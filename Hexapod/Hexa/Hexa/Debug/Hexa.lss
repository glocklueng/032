
Hexa.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000f7e  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003000  80003000  00003400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000118  80003200  80003200  00003600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000028  00000008  80003318  00003808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f8  00000030  00000030  00000000  2**2
                  ALLOC
  8 .heap         00002ed8  00000128  00000128  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000600  00000000  00000000  00003860  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001214  00000000  00000000  00003e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000b3e9  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001758  00000000  00000000  0001045d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008d30  00000000  00000000  00011bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000f74  00000000  00000000  0001a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000031ac  00000000  00000000  0001b85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000037a2  00000000  00000000  0001ea08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00558b1a  00000000  00000000  000221aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  00003000  00003000  00000000  2**0
                  ALLOC
 20 .debug_ranges 000029b8  00000000  00000000  0057acc8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf f7 a4 	sub	pc,pc,-2140

Disassembly of section .text:

80002004 <flashcdw_default_wait_until_ready>:
80002004:	fe 6a 00 00 	mov	r10,-131072
}


void flashcdw_default_wait_until_ready(void)
{
	while (!flashcdw_is_ready());
80002008:	30 09       	mov	r9,0
//! @{


bool flashcdw_is_ready(void)
{
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
8000200a:	74 28       	ld.w	r8,r10[0x8]
}


void flashcdw_default_wait_until_ready(void)
{
	while (!flashcdw_is_ready());
8000200c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002010:	f2 08 18 00 	cp.b	r8,r9
80002014:	cf b0       	breq	8000200a <flashcdw_default_wait_until_ready+0x6>
}
80002016:	5e fc       	retal	r12

80002018 <flashcdw_set_flash_waitstate_and_readmode>:
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
}


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80002018:	eb cd 40 c0 	pushm	r6-r7,lr
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
8000201c:	e0 68 e1 c0 	mov	r8,57792
80002020:	ea 18 00 e4 	orh	r8,0xe4
80002024:	10 3c       	cp.w	r12,r8
80002026:	e0 88 00 31 	brls	80002088 <flashcdw_set_flash_waitstate_and_readmode+0x70>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
8000202a:	e0 68 c3 80 	mov	r8,50048
8000202e:	ea 18 01 c9 	orh	r8,0x1c9
80002032:	10 3c       	cp.w	r12,r8
80002034:	e0 8b 00 0f 	brhi	80002052 <flashcdw_set_flash_waitstate_and_readmode+0x3a>
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002038:	fe 67 00 00 	mov	r7,-131072

void flashcdw_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
8000203c:	30 86       	mov	r6,8
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
8000203e:	6e 08       	ld.w	r8,r7[0x0]
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002040:	30 19       	mov	r9,1
80002042:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
80002046:	8f 08       	st.w	r7[0x0],r8

void flashcdw_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002048:	6c 08       	ld.w	r8,r6[0x0]
8000204a:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000204c:	6e 18       	ld.w	r8,r7[0x4]
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
8000204e:	31 19       	mov	r9,17
80002050:	c0 d8       	rjmp	8000206a <flashcdw_set_flash_waitstate_and_readmode+0x52>
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002052:	fe 67 00 00 	mov	r7,-131072
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002056:	30 19       	mov	r9,1
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002058:	6e 08       	ld.w	r8,r7[0x0]
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
8000205a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1

void flashcdw_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
8000205e:	30 86       	mov	r6,8

void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
80002060:	8f 08       	st.w	r7[0x0],r8

void flashcdw_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002062:	6c 08       	ld.w	r8,r6[0x0]
80002064:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
80002066:	6e 18       	ld.w	r8,r7[0x4]
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80002068:	31 09       	mov	r9,16
8000206a:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
8000206e:	3a 59       	mov	r9,-91
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
80002070:	33 0a       	mov	r10,48
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
80002072:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80002076:	8f 18       	st.w	r7[0x4],r8
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
80002078:	6e 29       	ld.w	r9,r7[0x8]
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
8000207a:	e2 19 00 0c 	andl	r9,0xc,COH
	flashcdw_wait_until_ready();
8000207e:	6c 08       	ld.w	r8,r6[0x0]
	if (page_number >= 0) {
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
	flashcdw_error_status = flashcdw_get_error_status();
80002080:	95 09       	st.w	r10[0x0],r9
	flashcdw_wait_until_ready();
80002082:	5d 18       	icall	r8
80002084:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002088:	fe 67 00 00 	mov	r7,-131072

void flashcdw_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
8000208c:	30 86       	mov	r6,8
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
8000208e:	6e 08       	ld.w	r8,r7[0x0]
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002090:	30 09       	mov	r9,0
80002092:	cd 8b       	rjmp	80002042 <flashcdw_set_flash_waitstate_and_readmode+0x2a>

80002094 <gpio_enable_module_pin>:
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002094:	f8 08 16 05 	lsr	r8,r12,0x5
80002098:	a9 78       	lsl	r8,0x9
8000209a:	e0 28 d4 00 	sub	r8,54272

  // Enable the correct function.
  switch (function)
8000209e:	58 7b       	cp.w	r11,7
800020a0:	e0 88 00 03 	brls	800020a6 <gpio_enable_module_pin+0x12>
800020a4:	5e ff       	retal	1
800020a6:	fe c9 ee a6 	sub	r9,pc,-4442
800020aa:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
    gpio_port->pmr1c = 1 << (pin & 0x1F);
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;

  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800020ae:	30 19       	mov	r9,1
800020b0:	f2 0c 09 4c 	lsl	r12,r9,r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800020b4:	91 6c       	st.w	r8[0x18],r12
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800020b6:	91 9c       	st.w	r8[0x24],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800020b8:	91 dc       	st.w	r8[0x34],r12
800020ba:	91 2c       	st.w	r8[0x8],r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;

  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800020bc:	5e fd       	retal	0
800020be:	30 19       	mov	r9,1
800020c0:	f2 0c 09 4c 	lsl	r12,r9,r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800020c4:	91 5c       	st.w	r8[0x14],r12
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800020c6:	91 9c       	st.w	r8[0x24],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800020c8:	91 dc       	st.w	r8[0x34],r12
800020ca:	91 2c       	st.w	r8[0x8],r12

  // Enable the correct function.
  switch (function)
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800020cc:	5e fd       	retal	0
800020ce:	30 19       	mov	r9,1
800020d0:	f2 0c 09 4c 	lsl	r12,r9,r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800020d4:	91 6c       	st.w	r8[0x18],r12
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800020d6:	91 ac       	st.w	r8[0x28],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800020d8:	91 ec       	st.w	r8[0x38],r12
800020da:	91 2c       	st.w	r8[0x8],r12
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800020dc:	5e fd       	retal	0
800020de:	30 19       	mov	r9,1
800020e0:	f2 0c 09 4c 	lsl	r12,r9,r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
800020e4:	91 5c       	st.w	r8[0x14],r12
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800020e6:	91 ac       	st.w	r8[0x28],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800020e8:	91 ec       	st.w	r8[0x38],r12
800020ea:	91 2c       	st.w	r8[0x8],r12
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800020ec:	5e fd       	retal	0
800020ee:	30 19       	mov	r9,1
800020f0:	f2 0c 09 4c 	lsl	r12,r9,r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800020f4:	91 6c       	st.w	r8[0x18],r12
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800020f6:	91 9c       	st.w	r8[0x24],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800020f8:	91 ec       	st.w	r8[0x38],r12
800020fa:	91 2c       	st.w	r8[0x8],r12
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800020fc:	5e fd       	retal	0
800020fe:	30 19       	mov	r9,1
80002100:	f2 0c 09 4c 	lsl	r12,r9,r12
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002104:	91 5c       	st.w	r8[0x14],r12
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80002106:	91 9c       	st.w	r8[0x24],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002108:	91 ec       	st.w	r8[0x38],r12
8000210a:	91 2c       	st.w	r8[0x8],r12
#endif
    break;

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000210c:	5e fd       	retal	0
8000210e:	30 19       	mov	r9,1
80002110:	f2 0c 09 4c 	lsl	r12,r9,r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002114:	91 6c       	st.w	r8[0x18],r12
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80002116:	91 ac       	st.w	r8[0x28],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002118:	91 dc       	st.w	r8[0x34],r12
8000211a:	91 2c       	st.w	r8[0x8],r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;

  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8000211c:	5e fd       	retal	0
8000211e:	30 19       	mov	r9,1
80002120:	f2 0c 09 4c 	lsl	r12,r9,r12
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002124:	91 5c       	st.w	r8[0x14],r12
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80002126:	91 ac       	st.w	r8[0x28],r12
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002128:	91 dc       	st.w	r8[0x34],r12
8000212a:	91 2c       	st.w	r8[0x8],r12
8000212c:	5e fd       	retal	0
8000212e:	d7 03       	nop

80002130 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002130:	e0 68 00 83 	mov	r8,131
80002134:	f0 0c 01 0c 	sub	r12,r8,r12
80002138:	fe 78 10 00 	mov	r8,-61440
8000213c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002140:	f2 ca ff c0 	sub	r10,r9,-64
80002144:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002148:	58 0c       	cp.w	r12,0
8000214a:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000214c:	fe c8 ef 2c 	sub	r8,pc,-4308
80002150:	f8 0c 12 00 	clz	r12,r12
80002154:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002158:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000215c:	72 18       	ld.w	r8,r9[0x4]
8000215e:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002162:	5e fc       	retal	r12

80002164 <pm_set_mclk_source>:
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
  AVR32_ENTER_CRITICAL_REGION( );
80002164:	e1 b8 00 00 	mfsr	r8,0x0
80002168:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000216a:	fe 79 14 00 	mov	r9,-60416
8000216e:	fc 1a aa 00 	movh	r10,0xaa00
80002172:	f3 4a 00 58 	st.w	r9[88],r10
  AVR32_PM.mcctrl = src;
80002176:	93 0c       	st.w	r9[0x0],r12
  AVR32_LEAVE_CRITICAL_REGION( );
80002178:	ed b8 00 10 	bld	r8,0x10
8000217c:	c0 20       	breq	80002180 <pm_set_mclk_source+0x1c>
8000217e:	d5 03       	csrf	0x10

  return PASS;
}
80002180:	5e fd       	retal	0

80002182 <pm_set_all_cksel>:
  return PASS;
}

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
80002182:	eb cd 40 c0 	pushm	r6-r7,lr
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80002186:	f8 0b 0d 06 	divu	r6,r12,r11
8000218a:	0c 98       	mov	r8,r6
  if(div_ratio == 1)
8000218c:	58 16       	cp.w	r6,1
8000218e:	e0 80 00 cf 	breq	8000232c <pm_set_all_cksel+0x1aa>
    return(PM_CKSEL_DIVRATIO_ERROR);
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80002192:	5c 98       	brev	r8
80002194:	f0 08 12 00 	clz	r8,r8
80002198:	f0 c7 00 01 	sub	r7,r8,1


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
8000219c:	58 87       	cp.w	r7,8
8000219e:	e0 80 00 c7 	breq	8000232c <pm_set_all_cksel+0x1aa>
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800021a2:	fe 78 14 00 	mov	r8,-60416
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800021a6:	10 9b       	mov	r11,r8
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800021a8:	70 1e       	ld.w	lr,r8[0x4]
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800021aa:	f6 f8 00 d4 	ld.w	r8,r11[212]
800021ae:	ed b8 00 05 	bld	r8,0x5
800021b2:	cf c1       	brne	800021aa <pm_set_all_cksel+0x28>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
800021b4:	30 18       	mov	r8,1
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800021b6:	1c 9b       	mov	r11,lr

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
800021b8:	f7 d8 d0 e1 	bfins	r11,r8,0x7,0x1
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
800021bc:	f7 d7 d0 03 	bfins	r11,r7,0x0,0x3
  AVR32_ENTER_CRITICAL_REGION( );
800021c0:	e1 b8 00 00 	mfsr	r8,0x0
800021c4:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
800021c6:	fe 77 14 00 	mov	r7,-60416
800021ca:	30 4e       	mov	lr,4
800021cc:	ea 1e aa 00 	orh	lr,0xaa00
800021d0:	ef 4e 00 58 	st.w	r7[88],lr
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
800021d4:	fe 77 14 04 	mov	r7,-60412
800021d8:	8f 0b       	st.w	r7[0x0],r11
  AVR32_LEAVE_CRITICAL_REGION( );
800021da:	ed b8 00 10 	bld	r8,0x10
800021de:	e0 81 00 82 	brne	800022e2 <pm_set_all_cksel+0x160>
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
800021e2:	f8 0a 0d 0a 	divu	r10,r12,r10
800021e6:	14 98       	mov	r8,r10
  if(div_ratio == 1)
800021e8:	58 1a       	cp.w	r10,1
800021ea:	e0 80 00 82 	breq	800022ee <pm_set_all_cksel+0x16c>
    return(PM_CKSEL_DIVRATIO_ERROR);
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
800021ee:	5c 98       	brev	r8
800021f0:	f0 08 12 00 	clz	r8,r8
800021f4:	f0 cb 00 01 	sub	r11,r8,1
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
800021f8:	58 8b       	cp.w	r11,8
800021fa:	c7 a0       	breq	800022ee <pm_set_all_cksel+0x16c>
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800021fc:	fe 78 14 00 	mov	r8,-60416
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002200:	10 9a       	mov	r10,r8
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002202:	70 17       	ld.w	r7,r8[0x4]
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002204:	f4 f8 00 d4 	ld.w	r8,r10[212]
80002208:	ed b8 00 05 	bld	r8,0x5
8000220c:	cf c1       	brne	80002204 <pm_set_all_cksel+0x82>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
8000220e:	30 18       	mov	r8,1
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002210:	0e 9a       	mov	r10,r7

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80002212:	f5 d8 d0 e1 	bfins	r10,r8,0x7,0x1
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
80002216:	f5 db d0 03 	bfins	r10,r11,0x0,0x3
  AVR32_ENTER_CRITICAL_REGION( );
8000221a:	e1 b8 00 00 	mfsr	r8,0x0
8000221e:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002220:	fe 7b 14 00 	mov	r11,-60416
80002224:	30 c7       	mov	r7,12
80002226:	ea 17 aa 00 	orh	r7,0xaa00
8000222a:	f7 47 00 58 	st.w	r11[88],r7
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
8000222e:	fe 7b 14 0c 	mov	r11,-60404
80002232:	97 0a       	st.w	r11[0x0],r10
  AVR32_LEAVE_CRITICAL_REGION( );
80002234:	ed b8 00 10 	bld	r8,0x10
80002238:	c3 01       	brne	80002298 <pm_set_all_cksel+0x116>
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
8000223a:	f8 09 0d 08 	divu	r8,r12,r9
  if(div_ratio == 1)
8000223e:	58 18       	cp.w	r8,1
80002240:	c3 10       	breq	800022a2 <pm_set_all_cksel+0x120>
    return(PM_CKSEL_DIVRATIO_ERROR);
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80002242:	5c 98       	brev	r8
80002244:	f0 08 12 00 	clz	r8,r8
80002248:	f0 ca 00 01 	sub	r10,r8,1
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
8000224c:	58 8a       	cp.w	r10,8
8000224e:	c2 a0       	breq	800022a2 <pm_set_all_cksel+0x120>
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002250:	fe 78 14 00 	mov	r8,-60416
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002254:	10 99       	mov	r9,r8
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002256:	70 1b       	ld.w	r11,r8[0x4]
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002258:	f2 f8 00 d4 	ld.w	r8,r9[212]
8000225c:	ed b8 00 05 	bld	r8,0x5
80002260:	cf c1       	brne	80002258 <pm_set_all_cksel+0xd6>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80002262:	30 18       	mov	r8,1
  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002264:	16 99       	mov	r9,r11

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80002266:	f3 d8 d0 e1 	bfins	r9,r8,0x7,0x1
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
8000226a:	f3 da d0 03 	bfins	r9,r10,0x0,0x3
  AVR32_ENTER_CRITICAL_REGION( );
8000226e:	e1 b8 00 00 	mfsr	r8,0x0
80002272:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002274:	fe 7a 14 00 	mov	r10,-60416
80002278:	31 0b       	mov	r11,16
8000227a:	ea 1b aa 00 	orh	r11,0xaa00
8000227e:	f5 4b 00 58 	st.w	r10[88],r11
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002282:	fe 7a 14 10 	mov	r10,-60400
80002286:	95 09       	st.w	r10[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002288:	ed b8 00 10 	bld	r8,0x10
8000228c:	c0 31       	brne	80002292 <pm_set_all_cksel+0x110>
8000228e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002292:	d5 03       	csrf	0x10
80002294:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002298:	d5 03       	csrf	0x10
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
8000229a:	f8 09 0d 08 	divu	r8,r12,r9
  if(div_ratio == 1)
8000229e:	58 18       	cp.w	r8,1
800022a0:	cd 11       	brne	80002242 <pm_set_all_cksel+0xc0>
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800022a2:	fe 78 14 00 	mov	r8,-60416

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800022a6:	10 99       	mov	r9,r8
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800022a8:	70 1a       	ld.w	r10,r8[0x4]

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800022aa:	f2 f8 00 d4 	ld.w	r8,r9[212]
800022ae:	ed b8 00 05 	bld	r8,0x5
800022b2:	cf c1       	brne	800022aa <pm_set_all_cksel+0x128>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
800022b4:	30 08       	mov	r8,0
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800022b6:	14 99       	mov	r9,r10

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
800022b8:	f3 d8 d0 e1 	bfins	r9,r8,0x7,0x1
  AVR32_ENTER_CRITICAL_REGION( );
800022bc:	e1 b8 00 00 	mfsr	r8,0x0
800022c0:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
800022c2:	fe 7a 14 00 	mov	r10,-60416
800022c6:	31 0b       	mov	r11,16
800022c8:	ea 1b aa 00 	orh	r11,0xaa00
800022cc:	f5 4b 00 58 	st.w	r10[88],r11
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
800022d0:	fe 7a 14 10 	mov	r10,-60400
800022d4:	95 09       	st.w	r10[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800022d6:	ed b8 00 10 	bld	r8,0x10
800022da:	cd a0       	breq	8000228e <pm_set_all_cksel+0x10c>
800022dc:	d5 03       	csrf	0x10
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  AVR32_ENTER_CRITICAL_REGION( );
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
  AVR32_LEAVE_CRITICAL_REGION( );
800022e2:	d5 03       	csrf	0x10
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
800022e4:	f8 0a 0d 0a 	divu	r10,r12,r10
800022e8:	14 98       	mov	r8,r10
  if(div_ratio == 1)
800022ea:	58 1a       	cp.w	r10,1
800022ec:	c8 11       	brne	800021ee <pm_set_all_cksel+0x6c>
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800022ee:	fe 78 14 00 	mov	r8,-60416

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800022f2:	10 9a       	mov	r10,r8
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800022f4:	70 1b       	ld.w	r11,r8[0x4]

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800022f6:	f4 f8 00 d4 	ld.w	r8,r10[212]
800022fa:	ed b8 00 05 	bld	r8,0x5
800022fe:	cf c1       	brne	800022f6 <pm_set_all_cksel+0x174>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80002300:	30 08       	mov	r8,0
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002302:	16 9a       	mov	r10,r11

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80002304:	f5 d8 d0 e1 	bfins	r10,r8,0x7,0x1
  AVR32_ENTER_CRITICAL_REGION( );
80002308:	e1 b8 00 00 	mfsr	r8,0x0
8000230c:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
8000230e:	fe 7b 14 00 	mov	r11,-60416
80002312:	30 ce       	mov	lr,12
80002314:	ea 1e aa 00 	orh	lr,0xaa00
80002318:	f7 4e 00 58 	st.w	r11[88],lr
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
8000231c:	fe 7b 14 0c 	mov	r11,-60404
80002320:	97 0a       	st.w	r11[0x0],r10
  AVR32_LEAVE_CRITICAL_REGION( );
80002322:	ed b8 00 10 	bld	r8,0x10
80002326:	c8 a0       	breq	8000223a <pm_set_all_cksel+0xb8>
80002328:	d5 03       	csrf	0x10
8000232a:	c8 8b       	rjmp	8000223a <pm_set_all_cksel+0xb8>
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
8000232c:	fe 78 14 00 	mov	r8,-60416

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002330:	10 9b       	mov	r11,r8
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002332:	70 1e       	ld.w	lr,r8[0x4]

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002334:	f6 f8 00 d4 	ld.w	r8,r11[212]
80002338:	ed b8 00 05 	bld	r8,0x5
8000233c:	cf c1       	brne	80002334 <pm_set_all_cksel+0x1b2>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
8000233e:	30 08       	mov	r8,0
  return PASS;
}

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002340:	1c 9b       	mov	r11,lr

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80002342:	f7 d8 d0 e1 	bfins	r11,r8,0x7,0x1
  AVR32_ENTER_CRITICAL_REGION( );
80002346:	e1 b8 00 00 	mfsr	r8,0x0
8000234a:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
8000234c:	fe 7e 14 00 	mov	lr,-60416
80002350:	30 47       	mov	r7,4
80002352:	ea 17 aa 00 	orh	r7,0xaa00
80002356:	fd 47 00 58 	st.w	lr[88],r7
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
8000235a:	fe 7e 14 04 	mov	lr,-60412
8000235e:	9d 0b       	st.w	lr[0x0],r11
  AVR32_LEAVE_CRITICAL_REGION( );
80002360:	ed b8 00 10 	bld	r8,0x10
80002364:	fe 90 ff 3f 	breq	800021e2 <pm_set_all_cksel+0x60>
80002368:	d5 03       	csrf	0x10
8000236a:	c3 cb       	rjmp	800021e2 <pm_set_all_cksel+0x60>

8000236c <pcl_configure_clocks_rc120m>:
  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
}


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
8000236c:	eb cd 40 80 	pushm	r7,lr
80002370:	18 97       	mov	r7,r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80002372:	ce 5c       	rcall	8000253c <scif_start_rc120M>
80002374:	6e 39       	ld.w	r9,r7[0xc]
static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80002376:	6e 2a       	ld.w	r10,r7[0x8]
80002378:	6e 1b       	ld.w	r11,r7[0x4]
8000237a:	e0 6c 0e 00 	mov	r12,3584
8000237e:	ea 1c 07 27 	orh	r12,0x727
80002382:	c0 0f       	rcall	80002182 <pm_set_all_cksel>
80002384:	6e 1c       	ld.w	r12,r7[0x4]
80002386:	c4 9e       	rcall	80002018 <flashcdw_set_flash_waitstate_and_readmode>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80002388:	30 3c       	mov	r12,3
8000238a:	ce de       	rcall	80002164 <pm_set_mclk_source>
8000238c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80002390 <pcl_configure_clocks_osc0>:


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80002390:	eb cd 40 c0 	pushm	r6-r7,lr

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
}
80002394:	18 97       	mov	r7,r12
80002396:	30 0c       	mov	r12,0
80002398:	6e 56       	ld.w	r6,r7[0x14]
8000239a:	0c 9b       	mov	r11,r6
8000239c:	e0 a0 02 30 	rcall	800027fc <scif_configure_osc_crystalmode>
800023a0:	6e 6b       	ld.w	r11,r7[0x18]
800023a2:	30 1a       	mov	r10,1
800023a4:	30 0c       	mov	r12,0
800023a6:	e0 a0 02 07 	rcall	800027b4 <scif_enable_osc>
static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
800023aa:	6e 39       	ld.w	r9,r7[0xc]
800023ac:	6e 2a       	ld.w	r10,r7[0x8]
800023ae:	6e 1b       	ld.w	r11,r7[0x4]
800023b0:	0c 9c       	mov	r12,r6
800023b2:	ce 8e       	rcall	80002182 <pm_set_all_cksel>
800023b4:	6e 1c       	ld.w	r12,r7[0x4]

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
800023b6:	c3 1e       	rcall	80002018 <flashcdw_set_flash_waitstate_and_readmode>
800023b8:	30 1c       	mov	r12,1
800023ba:	cd 5e       	rcall	80002164 <pm_set_mclk_source>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
800023bc:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

800023c0 <pcl_configure_clocks>:
800023c0:	eb cd 40 c0 	pushm	r6-r7,lr
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
}
800023c4:	18 97       	mov	r7,r12
800023c6:	78 06       	ld.w	r6,r12[0x0]
800023c8:	58 06       	cp.w	r6,0
800023ca:	c1 60       	breq	800023f6 <pcl_configure_clocks+0x36>
800023cc:	58 96       	cp.w	r6,9
800023ce:	c2 40       	breq	80002416 <pcl_configure_clocks+0x56>
800023d0:	58 16       	cp.w	r6,1
800023d2:	c1 f0       	breq	80002410 <pcl_configure_clocks+0x50>
800023d4:	78 76       	ld.w	r6,r12[0x1c]
800023d6:	30 19       	mov	r9,1
800023d8:	0c 9a       	mov	r10,r6
800023da:	30 0b       	mov	r11,0
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
800023dc:	78 8c       	ld.w	r12,r12[0x20]
800023de:	c5 3d       	rcall	80002684 <scif_dfll0_closedloop_configure_and_start>
800023e0:	6e 39       	ld.w	r9,r7[0xc]
static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
800023e2:	6e 2a       	ld.w	r10,r7[0x8]
800023e4:	6e 1b       	ld.w	r11,r7[0x4]
800023e6:	0c 9c       	mov	r12,r6
800023e8:	cc de       	rcall	80002182 <pm_set_all_cksel>
800023ea:	6e 1c       	ld.w	r12,r7[0x4]
800023ec:	c1 6e       	rcall	80002018 <flashcdw_set_flash_waitstate_and_readmode>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
800023ee:	30 2c       	mov	r12,2
800023f0:	cb ae       	rcall	80002164 <pm_set_mclk_source>
800023f2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
800023f6:	78 39       	ld.w	r9,r12[0xc]
800023f8:	78 2a       	ld.w	r10,r12[0x8]
800023fa:	78 1b       	ld.w	r11,r12[0x4]
800023fc:	e0 7c c2 00 	mov	r12,115200
static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80002400:	cc 1e       	rcall	80002182 <pm_set_all_cksel>
80002402:	6e 1c       	ld.w	r12,r7[0x4]
80002404:	c0 ae       	rcall	80002018 <flashcdw_set_flash_waitstate_and_readmode>
80002406:	0c 9c       	mov	r12,r6
80002408:	ca ee       	rcall	80002164 <pm_set_mclk_source>
8000240a:	0c 9c       	mov	r12,r6

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
8000240c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002410:	cc 0f       	rcall	80002390 <pcl_configure_clocks_osc0>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80002412:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002416:	ca bf       	rcall	8000236c <pcl_configure_clocks_rc120m>
80002418:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

8000241c <pwma_config_and_enable>:

void pwma_config_and_enable(volatile avr32_pwma_t *pwma,
                            unsigned long long int channel_mask,
                            int period_cycles, int duty_cycles)
{
  pwma->cr =
8000241c:	a9 69       	lsl	r9,0x8
8000241e:	e8 19 00 03 	orl	r9,0x3
80002422:	99 09       	st.w	r12[0x0],r9
  //# to allow multiple channels to be updated simultaneously with the same duty
  //# cycle
  //#

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80002424:	78 79       	ld.w	r9,r12[0x1c]
80002426:	ed b9 00 03 	bld	r9,0x3
8000242a:	cf d0       	breq	80002424 <pwma_config_and_enable+0x8>

  //#
  //# First 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
8000242c:	99 18       	st.w	r12[0x4],r8
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[0].ischset = channel_mask_low;
#else
  pwma->ischset0 = channel_mask_low;
8000242e:	99 ca       	st.w	r12[0x30],r10
#endif

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80002430:	78 79       	ld.w	r9,r12[0x1c]
80002432:	ed b9 00 03 	bld	r9,0x3
80002436:	cf d0       	breq	80002430 <pwma_config_and_enable+0x14>

  //#
  //# Last 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80002438:	99 18       	st.w	r12[0x4],r8
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[1].ischset = channel_mask_high;
#else
  pwma->ischset1 = channel_mask_high;
8000243a:	f9 4b 00 40 	st.w	r12[64],r11
#endif
  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
8000243e:	78 78       	ld.w	r8,r12[0x1c]
80002440:	ed b8 00 03 	bld	r8,0x3
80002444:	cf d0       	breq	8000243e <pwma_config_and_enable+0x22>
      (period_cycles << AVR32_PWMA_CR_TOP_OFFSET) // Set the TOP and SPREAD values of the timebase counter
      | AVR32_PWMA_CR_TCLR_MASK                   // Clear the timebase counter
      | AVR32_PWMA_CR_EN_MASK;                    // Enable the PWMA

  pwma_set_channels_value(pwma, channel_mask, duty_cycles);
}
80002446:	5e fc       	retal	r12

80002448 <pwma_set_channels_value>:
  //# to allow multiple channels to be updated simultaneously with the same duty
  //# cycle
  //#

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80002448:	78 78       	ld.w	r8,r12[0x1c]
8000244a:	ed b8 00 03 	bld	r8,0x3
8000244e:	cf d0       	breq	80002448 <pwma_set_channels_value>

  //#
  //# First 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
80002450:	99 19       	st.w	r12[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[0].ischset = channel_mask_low;
#else
  pwma->ischset0 = channel_mask_low;
80002452:	99 ca       	st.w	r12[0x30],r10
#endif

  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80002454:	78 78       	ld.w	r8,r12[0x1c]
80002456:	ed b8 00 03 	bld	r8,0x3
8000245a:	cf d0       	breq	80002454 <pwma_set_channels_value+0xc>

  //#
  //# Last 32 channels
  //#
  // Set the common duty cycle value.
  pwma->isduty = duty_cycles;
8000245c:	99 19       	st.w	r12[0x4],r9
  // Define the interlinked channels
#if (UC3D)
  pwma->chgroup[1].ischset = channel_mask_high;
#else
  pwma->ischset1 = channel_mask_high;
8000245e:	f9 4b 00 40 	st.w	r12[64],r11
#endif
  // Wait for the PWMA to be ready for writing.
  while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80002462:	78 78       	ld.w	r8,r12[0x1c]
80002464:	ed b8 00 03 	bld	r8,0x3
80002468:	cf d0       	breq	80002462 <pwma_set_channels_value+0x1a>
}
8000246a:	5e fc       	retal	r12

8000246c <scif_gc_setup>:
  return PASS;
}


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
8000246c:	eb cd 40 c0 	pushm	r6-r7,lr
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80002470:	fe 7e 18 00 	mov	lr,-59392
80002474:	f8 c8 ff e4 	sub	r8,r12,-28
80002478:	fc 08 03 2c 	ld.w	r12,lr[r8<<0x2]
{
  int restart_gc = false;


  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
8000247c:	a1 99       	lsr	r9,0x1
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8000247e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
{
  int restart_gc = false;


  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
80002482:	20 19       	sub	r9,1
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80002484:	58 0c       	cp.w	r12,0
80002486:	c1 21       	brne	800024aa <scif_gc_setup+0x3e>
    if(scif_stop_gclk(gclk) < 0)
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80002488:	a1 7a       	lsl	r10,0x1
8000248a:	a9 6b       	lsl	r11,0x8
8000248c:	e2 1a 00 02 	andl	r10,0x2,COH
80002490:	e2 1b 0f 00 	andl	r11,0xf00,COH
80002494:	b1 69       	lsl	r9,0x10
80002496:	f5 eb 10 0b 	or	r11,r10,r11
8000249a:	e6 19 00 ff 	andh	r9,0xff,COH
8000249e:	f7 e9 10 09 	or	r9,r11,r9
800024a2:	fc 08 09 29 	st.w	lr[r8<<0x2],r9
  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
    AVR32_SCIF.gcctrl[gclk] |= (AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
}
800024a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
800024aa:	fc 08 03 2c 	ld.w	r12,lr[r8<<0x2]

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800024ae:	1c 96       	mov	r6,lr
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
800024b0:	a1 cc       	cbr	r12,0x0
800024b2:	fc 08 09 2c 	st.w	lr[r8<<0x2],r12
800024b6:	30 0e       	mov	lr,0
800024b8:	c0 48       	rjmp	800024c0 <scif_gc_setup+0x54>

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
  {
    if(--timeout == 0)
800024ba:	e0 5e 86 a0 	cp.w	lr,100000
800024be:	c1 e0       	breq	800024fa <scif_gc_setup+0x8e>

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800024c0:	ec 08 03 2c 	ld.w	r12,r6[r8<<0x2]
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
800024c4:	2f fe       	sub	lr,-1

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800024c6:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800024ca:	fe 77 18 00 	mov	r7,-59392
800024ce:	cf 61       	brne	800024ba <scif_gc_setup+0x4e>
    if(scif_stop_gclk(gclk) < 0)
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800024d0:	a1 7a       	lsl	r10,0x1
800024d2:	a9 6b       	lsl	r11,0x8
800024d4:	e2 1a 00 02 	andl	r10,0x2,COH
800024d8:	e2 1b 0f 00 	andl	r11,0xf00,COH
800024dc:	b1 69       	lsl	r9,0x10
800024de:	16 4a       	or	r10,r11
800024e0:	e6 19 00 ff 	andh	r9,0xff,COH
800024e4:	f5 e9 10 09 	or	r9,r10,r9
800024e8:	ee 08 09 29 	st.w	r7[r8<<0x2],r9
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);

  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
    AVR32_SCIF.gcctrl[gclk] |= (AVR32_SCIF_GCCTRL_CEN_MASK);
800024ec:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800024f0:	a1 a9       	sbr	r9,0x0
800024f2:	ee 08 09 29 	st.w	r7[r8<<0x2],r9
800024f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;

  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
  {
    if(--timeout == 0)
800024fa:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1

800024fe <scif_gc_enable>:
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
800024fe:	2e 4c       	sub	r12,-28
80002500:	fe 78 18 00 	mov	r8,-59392
80002504:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
80002508:	ed b9 00 00 	bld	r9,0x0
8000250c:	c0 60       	breq	80002518 <scif_gc_enable+0x1a>
    AVR32_SCIF.gcctrl[gclk] |= (AVR32_SCIF_GCCTRL_CEN_MASK);
8000250e:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
80002512:	a1 a9       	sbr	r9,0x0
80002514:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9

  return PASS;
}
80002518:	5e fd       	retal	0

8000251a <scif_start_rc32k>:
/**
 ** 32kHz internal RCosc (RC32K) Functions
 **/
void scif_start_rc32k(void)
{
  AVR32_ENTER_CRITICAL_REGION( );
8000251a:	e1 b8 00 00 	mfsr	r8,0x0
8000251e:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC32KCR register
  SCIF_UNLOCK(AVR32_SCIF_RC32KCR);
80002520:	fe 79 18 00 	mov	r9,-59392
80002524:	36 ca       	mov	r10,108
80002526:	ea 1a aa 00 	orh	r10,0xaa00
8000252a:	93 6a       	st.w	r9[0x18],r10
  AVR32_SCIF.rc32kcr = AVR32_SCIF_RC32KCR_EN_MASK;
8000252c:	30 1a       	mov	r10,1
8000252e:	f3 4a 00 6c 	st.w	r9[108],r10
  AVR32_LEAVE_CRITICAL_REGION( );
80002532:	ed b8 00 10 	bld	r8,0x10
80002536:	5e 0c       	reteq	r12
80002538:	d5 03       	csrf	0x10
8000253a:	5e fc       	retal	r12

8000253c <scif_start_rc120M>:
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
  AVR32_ENTER_CRITICAL_REGION( );
8000253c:	e1 b8 00 00 	mfsr	r8,0x0
80002540:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80002542:	fe 79 18 00 	mov	r9,-59392
80002546:	35 8a       	mov	r10,88
80002548:	ea 1a aa 00 	orh	r10,0xaa00
8000254c:	93 6a       	st.w	r9[0x18],r10
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
8000254e:	30 1a       	mov	r10,1
80002550:	f3 4a 00 58 	st.w	r9[88],r10
  AVR32_LEAVE_CRITICAL_REGION( );
80002554:	ed b8 00 10 	bld	r8,0x10
80002558:	5e 0c       	reteq	r12
8000255a:	d5 03       	csrf	0x10
8000255c:	5e fc       	retal	r12

8000255e <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
8000255e:	d4 01       	pushm	lr
80002560:	20 1d       	sub	sp,4
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
80002562:	30 18       	mov	r8,1
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
80002564:	fe 79 18 00 	mov	r9,-59392
80002568:	72 9e       	ld.w	lr,r9[0x24]
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
8000256a:	fd d8 d0 01 	bfins	lr,r8,0x0,0x1
  AVR32_ENTER_CRITICAL_REGION( );
8000256e:	e1 b8 00 00 	mfsr	r8,0x0
80002572:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80002574:	32 4a       	mov	r10,36
80002576:	ea 1a aa 00 	orh	r10,0xaa00
8000257a:	93 6a       	st.w	r9[0x18],r10
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
8000257c:	93 9e       	st.w	r9[0x24],lr
  AVR32_LEAVE_CRITICAL_REGION( );
8000257e:	ed b8 00 10 	bld	r8,0x10
80002582:	c1 11       	brne	800025a4 <scif_dfll0_closedloop_start+0x46>
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
  {
    if(--timeout == 0)
80002584:	30 09       	mov	r9,0
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80002586:	fe 7a 18 00 	mov	r10,-59392
8000258a:	74 58       	ld.w	r8,r10[0x14]
  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
  AVR32_ENTER_CRITICAL_REGION( );
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
  AVR32_LEAVE_CRITICAL_REGION( );
8000258c:	2f f9       	sub	r9,-1
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
8000258e:	e2 18 40 00 	andl	r8,0x4000,COH
80002592:	fe 7b 18 00 	mov	r11,-59392
80002596:	c0 91       	brne	800025a8 <scif_dfll0_closedloop_start+0x4a>
  {
    if(--timeout == 0)
80002598:	e0 59 86 a0 	cp.w	r9,100000
8000259c:	cf 71       	brne	8000258a <scif_dfll0_closedloop_start+0x2c>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
8000259e:	3f fc       	mov	r12,-1
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
    return -1;

  return PASS;
}
800025a0:	2f fd       	sub	sp,-4
800025a2:	d8 02       	popm	pc
  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
  AVR32_ENTER_CRITICAL_REGION( );
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
  AVR32_LEAVE_CRITICAL_REGION( );
800025a4:	d5 03       	csrf	0x10
800025a6:	ce fb       	rjmp	80002584 <scif_dfll0_closedloop_start+0x26>
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
800025a8:	78 38       	ld.w	r8,r12[0xc]
800025aa:	f9 39 00 13 	ld.ub	r9,r12[19]
800025ae:	b1 68       	lsl	r8,0x10
800025b0:	e6 18 01 ff 	andh	r8,0x1ff,COH
800025b4:	12 48       	or	r8,r9
800025b6:	50 08       	stdsp	sp[0x0],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
800025b8:	e1 b8 00 00 	mfsr	r8,0x0
800025bc:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
800025be:	32 c9       	mov	r9,44
800025c0:	ea 19 aa 00 	orh	r9,0xaa00
800025c4:	97 69       	st.w	r11[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
800025c6:	40 09       	lddsp	r9,sp[0x0]
800025c8:	97 b9       	st.w	r11[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800025ca:	ed b8 00 10 	bld	r8,0x10
800025ce:	c0 f1       	brne	800025ec <scif_dfll0_closedloop_start+0x8e>
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
  {
    if(--timeout == 0)
800025d0:	30 09       	mov	r9,0
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800025d2:	fe 7a 18 00 	mov	r10,-59392
800025d6:	74 58       	ld.w	r8,r10[0x14]
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
  AVR32_SCIF.dfll0step = tempo;
  AVR32_LEAVE_CRITICAL_REGION( );
800025d8:	2f f9       	sub	r9,-1
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800025da:	e2 18 40 00 	andl	r8,0x4000,COH
800025de:	fe 7b 18 00 	mov	r11,-59392
800025e2:	c0 71       	brne	800025f0 <scif_dfll0_closedloop_start+0x92>
  {
    if(--timeout == 0)
800025e4:	e0 59 86 a0 	cp.w	r9,100000
800025e8:	cf 71       	brne	800025d6 <scif_dfll0_closedloop_start+0x78>
800025ea:	cd ab       	rjmp	8000259e <scif_dfll0_closedloop_start+0x40>
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
  AVR32_SCIF.dfll0step = tempo;
  AVR32_LEAVE_CRITICAL_REGION( );
800025ec:	d5 03       	csrf	0x10
800025ee:	cf 1b       	rjmp	800025d0 <scif_dfll0_closedloop_start+0x72>
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
800025f0:	e1 b8 00 00 	mfsr	r8,0x0
800025f4:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
800025f6:	32 89       	mov	r9,40
800025f8:	ea 19 aa 00 	orh	r9,0xaa00
800025fc:	97 69       	st.w	r11[0x18],r9
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
800025fe:	78 29       	ld.w	r9,r12[0x8]
80002600:	97 a9       	st.w	r11[0x28],r9
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
80002602:	ed b8 00 10 	bld	r8,0x10
80002606:	c2 c1       	brne	8000265e <scif_dfll0_closedloop_start+0x100>
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
  {
    if(--timeout == 0)
80002608:	30 08       	mov	r8,0
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
8000260a:	fe 7b 18 00 	mov	r11,-59392
8000260e:	c0 48       	rjmp	80002616 <scif_dfll0_closedloop_start+0xb8>
  {
    if(--timeout == 0)
80002610:	e0 58 86 a0 	cp.w	r8,100000
80002614:	cc 50       	breq	8000259e <scif_dfll0_closedloop_start+0x40>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80002616:	76 59       	ld.w	r9,r11[0x14]
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
80002618:	2f f8       	sub	r8,-1
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
8000261a:	e2 19 40 00 	andl	r9,0x4000,COH
8000261e:	fe 7a 18 00 	mov	r10,-59392
80002622:	cf 70       	breq	80002610 <scif_dfll0_closedloop_start+0xb2>
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
80002624:	78 08       	ld.w	r8,r12[0x0]
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
80002626:	30 19       	mov	r9,1
80002628:	fd d9 d0 21 	bfins	lr,r9,0x1,0x1
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
8000262c:	fd d8 d3 08 	bfins	lr,r8,0x18,0x8
  AVR32_ENTER_CRITICAL_REGION( );
80002630:	e1 b8 00 00 	mfsr	r8,0x0
80002634:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80002636:	32 49       	mov	r9,36
80002638:	ea 19 aa 00 	orh	r9,0xaa00
8000263c:	95 69       	st.w	r10[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
8000263e:	95 9e       	st.w	r10[0x24],lr
  AVR32_LEAVE_CRITICAL_REGION( );
80002640:	e6 18 00 01 	andh	r8,0x1,COH
80002644:	c0 f0       	breq	80002662 <scif_dfll0_closedloop_start+0x104>
80002646:	30 08       	mov	r8,0
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80002648:	fe 7a 18 00 	mov	r10,-59392
8000264c:	74 59       	ld.w	r9,r10[0x14]
8000264e:	ed b9 00 0e 	bld	r9,0xe
80002652:	c0 a0       	breq	80002666 <scif_dfll0_closedloop_start+0x108>
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
  AVR32_ENTER_CRITICAL_REGION( );
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
  AVR32_LEAVE_CRITICAL_REGION( );
80002654:	2f f8       	sub	r8,-1
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
  {
    if(--timeout == 0)
80002656:	e0 58 86 a0 	cp.w	r8,100000
8000265a:	cf 91       	brne	8000264c <scif_dfll0_closedloop_start+0xee>
8000265c:	ca 1b       	rjmp	8000259e <scif_dfll0_closedloop_start+0x40>
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
8000265e:	d5 03       	csrf	0x10
80002660:	cd 4b       	rjmp	80002608 <scif_dfll0_closedloop_start+0xaa>
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
  AVR32_ENTER_CRITICAL_REGION( );
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
  AVR32_LEAVE_CRITICAL_REGION( );
80002662:	d5 03       	csrf	0x10
80002664:	cf 2b       	rjmp	80002648 <scif_dfll0_closedloop_start+0xea>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80002666:	30 08       	mov	r8,0
80002668:	fe 7a 18 00 	mov	r10,-59392
8000266c:	74 59       	ld.w	r9,r10[0x14]
8000266e:	ed b9 00 09 	bld	r9,0x9
80002672:	c0 60       	breq	8000267e <scif_dfll0_closedloop_start+0x120>
80002674:	2f f8       	sub	r8,-1
  {
    if(--timeout == 0)
80002676:	e0 58 86 a0 	cp.w	r8,100000
8000267a:	cf 91       	brne	8000266c <scif_dfll0_closedloop_start+0x10e>
8000267c:	c9 1b       	rjmp	8000259e <scif_dfll0_closedloop_start+0x40>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
8000267e:	30 0c       	mov	r12,0
80002680:	c9 0b       	rjmp	800025a0 <scif_dfll0_closedloop_start+0x42>
80002682:	d7 03       	nop

80002684 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
80002684:	d4 31       	pushm	r0-r7,lr
80002686:	20 8d       	sub	sp,32
80002688:	16 97       	mov	r7,r11
8000268a:	14 96       	mov	r6,r10
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
8000268c:	78 0b       	ld.w	r11,r12[0x0]
8000268e:	58 0b       	cp.w	r11,0
80002690:	c7 00       	breq	80002770 <scif_dfll0_closedloop_configure_and_start+0xec>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
80002692:	58 9b       	cp.w	r11,9
80002694:	5f 09       	sreq	r9
80002696:	58 1b       	cp.w	r11,1
80002698:	5f 08       	sreq	r8
8000269a:	f3 e8 10 08 	or	r8,r9,r8
8000269e:	c6 c1       	brne	80002776 <scif_dfll0_closedloop_configure_and_start+0xf2>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
800026a0:	58 3b       	cp.w	r11,3
800026a2:	c6 d0       	breq	8000277c <scif_dfll0_closedloop_configure_and_start+0xf8>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
800026a4:	58 4b       	cp.w	r11,4
800026a6:	c0 60       	breq	800026b2 <scif_dfll0_closedloop_configure_and_start+0x2e>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
800026a8:	58 bb       	cp.w	r11,11
800026aa:	c6 00       	breq	8000276a <scif_dfll0_closedloop_configure_and_start+0xe6>
  DfllConfig.coarsemaxstep = 0x0000004;

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
800026ac:	3f fc       	mov	r12,-1
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
}
800026ae:	2f 8d       	sub	sp,-32
800026b0:	d8 32       	popm	r0-r7,pc
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
800026b2:	e0 65 0e 00 	mov	r5,3584
800026b6:	ea 15 07 27 	orh	r5,0x727
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800026ba:	fe 7a 18 00 	mov	r10,-59392
800026be:	75 c4       	ld.w	r4,r10[0x70]
800026c0:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
800026c4:	cf 41       	brne	800026ac <scif_dfll0_closedloop_configure_and_start+0x28>
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
800026c6:	78 22       	ld.w	r2,r12[0x8]
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800026c8:	a9 6b       	lsl	r11,0x8
800026ca:	78 1c       	ld.w	r12,r12[0x4]
800026cc:	e2 1b 0f 00 	andl	r11,0xf00,COH
800026d0:	50 0c       	stdsp	sp[0x0],r12
800026d2:	18 93       	mov	r3,r12
800026d4:	e4 0c 15 01 	lsl	r12,r2,0x1
800026d8:	b1 63       	lsl	r3,0x10
800026da:	e2 1c 00 02 	andl	r12,0x2,COH
800026de:	e6 13 00 ff 	andh	r3,0xff,COH
800026e2:	e7 ec 10 0c 	or	r12,r3,r12
800026e6:	a1 ac       	sbr	r12,0x0
800026e8:	16 4c       	or	r12,r11
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
    return(-1);

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
800026ea:	0e 9b       	mov	r11,r7
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800026ec:	f5 4c 00 70 	st.w	r10[112],r12
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
    return(-1);

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
800026f0:	a9 6b       	lsl	r11,0x8
800026f2:	ec 0a 15 08 	lsl	r10,r6,0x8
800026f6:	f7 e6 13 8b 	or	r11,r11,r6>>0x18
800026fa:	e0 68 77 80 	mov	r8,30592
800026fe:	ea 18 06 8e 	orh	r8,0x68e
80002702:	f4 06 01 00 	sub	r0,r10,r6
80002706:	f6 07 01 41 	sbc	r1,r11,r7
8000270a:	30 09       	mov	r9,0
8000270c:	e0 6a 5a 00 	mov	r10,23040
80002710:	ea 1a a0 08 	orh	r10,0xa008
80002714:	3f db       	mov	r11,-3
80002716:	e0 0a 00 0a 	add	r10,r0,r10
8000271a:	e2 0b 00 4b 	adc	r11,r1,r11
8000271e:	e0 a0 02 e9 	rcall	80002cf0 <__avr32_udiv64>

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
80002722:	ea 01 14 1f 	asr	r1,r5,0x1f
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
    return(-1);

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
80002726:	50 3a       	stdsp	sp[0xc],r10

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
80002728:	0a 98       	mov	r8,r5
8000272a:	02 99       	mov	r9,r1
8000272c:	0c 9a       	mov	r10,r6
8000272e:	0e 9b       	mov	r11,r7
80002730:	e0 a0 02 e0 	rcall	80002cf0 <__avr32_udiv64>
80002734:	50 5a       	stdsp	sp[0x14],r10
80002736:	14 93       	mov	r3,r10
  if(0 == gc_dfllif_ref_opt->diven)
80002738:	58 02       	cp.w	r2,0
8000273a:	c2 31       	brne	80002780 <scif_dfll0_closedloop_configure_and_start+0xfc>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
8000273c:	02 99       	mov	r9,r1
8000273e:	0a 98       	mov	r8,r5
80002740:	0c 9a       	mov	r10,r6
80002742:	0e 9b       	mov	r11,r7
80002744:	b1 6a       	lsl	r10,0x10
80002746:	b1 6b       	lsl	r11,0x10
80002748:	b1 63       	lsl	r3,0x10
8000274a:	f7 e6 13 0b 	or	r11,r11,r6>>0x10
8000274e:	0c 90       	mov	r0,r6
80002750:	e0 a0 02 d0 	rcall	80002cf0 <__avr32_udiv64>
80002754:	f4 03 01 03 	sub	r3,r10,r3
80002758:	50 43       	stdsp	sp[0x10],r3
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
8000275a:	30 48       	mov	r8,4
  DfllConfig.coarsemaxstep = 0x0000004;

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
8000275c:	fa cc ff f4 	sub	r12,sp,-12
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
  DfllConfig.coarsemaxstep = 0x0000004;
80002760:	50 78       	stdsp	sp[0x1c],r8
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
80002762:	50 68       	stdsp	sp[0x18],r8
  DfllConfig.coarsemaxstep = 0x0000004;

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
80002764:	cf de       	rcall	8000255e <scif_dfll0_closedloop_start>
80002766:	ca 40       	breq	800026ae <scif_dfll0_closedloop_configure_and_start+0x2a>
80002768:	ca 2b       	rjmp	800026ac <scif_dfll0_closedloop_configure_and_start+0x28>
8000276a:	e0 65 03 e8 	mov	r5,1000
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
8000276e:	ca 6b       	rjmp	800026ba <scif_dfll0_closedloop_configure_and_start+0x36>
80002770:	e0 75 c2 00 	mov	r5,115200
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
80002774:	ca 3b       	rjmp	800026ba <scif_dfll0_closedloop_configure_and_start+0x36>
80002776:	e0 65 80 00 	mov	r5,32768
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
8000277a:	ca 0b       	rjmp	800026ba <scif_dfll0_closedloop_configure_and_start+0x36>
8000277c:	78 35       	ld.w	r5,r12[0xc]
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
8000277e:	c9 eb       	rjmp	800026ba <scif_dfll0_closedloop_configure_and_start+0x36>
80002780:	02 99       	mov	r9,r1
  if(0 == gc_dfllif_ref_opt->diven)
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
80002782:	0a 98       	mov	r8,r5
80002784:	0c 9a       	mov	r10,r6
80002786:	0e 9b       	mov	r11,r7
80002788:	b1 6a       	lsl	r10,0x10
8000278a:	b1 6b       	lsl	r11,0x10
8000278c:	f7 e6 13 0b 	or	r11,r11,r6>>0x10
80002790:	e0 a0 02 b0 	rcall	80002cf0 <__avr32_udiv64>
80002794:	e6 09 16 10 	lsr	r9,r3,0x10
80002798:	40 00       	lddsp	r0,sp[0x0]
8000279a:	e6 08 15 10 	lsl	r8,r3,0x10
8000279e:	2f f0       	sub	r0,-1
800027a0:	f4 08 01 08 	sub	r8,r10,r8
800027a4:	f6 09 01 49 	sbc	r9,r11,r9
800027a8:	10 08       	add	r8,r8
800027aa:	f2 09 00 49 	adc	r9,r9,r9
800027ae:	b1 30       	mul	r0,r8
800027b0:	50 40       	stdsp	sp[0x10],r0
800027b2:	cd 4b       	rjmp	8000275a <scif_dfll0_closedloop_configure_and_start+0xd6>

800027b4 <scif_enable_osc>:
800027b4:	fe 78 18 00 	mov	r8,-59392
800027b8:	70 79       	ld.w	r9,r8[0x1c]
800027ba:	f3 db d1 03 	bfins	r9,r11,0x8,0x3
800027be:	30 1b       	mov	r11,1
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
800027c0:	f3 db d2 01 	bfins	r9,r11,0x10,0x1
  AVR32_ENTER_CRITICAL_REGION( );
800027c4:	e1 bb 00 00 	mfsr	r11,0x0
800027c8:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
800027ca:	31 cc       	mov	r12,28
800027cc:	ea 1c aa 00 	orh	r12,0xaa00
800027d0:	91 6c       	st.w	r8[0x18],r12
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
800027d2:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800027d4:	ed bb 00 10 	bld	r11,0x10
800027d8:	c0 41       	brne	800027e0 <scif_enable_osc+0x2c>

  if(true == wait_for_ready)
800027da:	58 0a       	cp.w	r10,0
800027dc:	c0 41       	brne	800027e4 <scif_enable_osc+0x30>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800027de:	5e fd       	retal	0
  AVR32_ENTER_CRITICAL_REGION( );
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
  AVR32_LEAVE_CRITICAL_REGION( );
800027e0:	d5 03       	csrf	0x10
800027e2:	cf cb       	rjmp	800027da <scif_enable_osc+0x26>

  if(true == wait_for_ready)
800027e4:	30 09       	mov	r9,0
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800027e6:	fe 7a 18 00 	mov	r10,-59392
800027ea:	74 58       	ld.w	r8,r10[0x14]
800027ec:	ed b8 00 01 	bld	r8,0x1
800027f0:	cf 70       	breq	800027de <scif_enable_osc+0x2a>
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
  AVR32_LEAVE_CRITICAL_REGION( );

  if(true == wait_for_ready)
800027f2:	2f f9       	sub	r9,-1
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
  {
    if(--timeout == 0)
800027f4:	e0 59 86 a0 	cp.w	r9,100000
800027f8:	cf 91       	brne	800027ea <scif_enable_osc+0x36>
800027fa:	5e fe       	retal	-1

800027fc <scif_configure_osc_crystalmode>:

long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
800027fc:	fe 78 18 00 	mov	r8,-59392
80002800:	70 78       	ld.w	r8,r8[0x1c]

  // Configure the oscillator mode to crystal and set the gain according to the
  // cyrstal frequency.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80002802:	ec 5b bb 9f 	cp.w	r11,899999
80002806:	e0 8b 00 17 	brhi	80002834 <scif_configure_osc_crystalmode+0x38>
8000280a:	30 0b       	mov	r11,0
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};

  // Configure the oscillator mode to crystal and set the gain according to the
  // cyrstal frequency.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8000280c:	30 19       	mov	r9,1
8000280e:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80002812:	f1 db d0 22 	bfins	r8,r11,0x1,0x2
                                        (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                               AVR32_SCIF_OSCCTRL0_GAIN_G3;
  AVR32_ENTER_CRITICAL_REGION( );
80002816:	e1 b9 00 00 	mfsr	r9,0x0
8000281a:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
8000281c:	fe 7a 18 00 	mov	r10,-59392
80002820:	31 cb       	mov	r11,28
80002822:	ea 1b aa 00 	orh	r11,0xaa00
80002826:	95 6b       	st.w	r10[0x18],r11
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80002828:	95 78       	st.w	r10[0x1c],r8
  AVR32_LEAVE_CRITICAL_REGION( );
8000282a:	ed b9 00 10 	bld	r9,0x10
8000282e:	c0 20       	breq	80002832 <scif_configure_osc_crystalmode+0x36>
80002830:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
}
80002832:	5e fd       	retal	0
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};

  // Configure the oscillator mode to crystal and set the gain according to the
  // cyrstal frequency.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80002834:	e0 69 c6 bf 	mov	r9,50879
80002838:	ea 19 00 2d 	orh	r9,0x2d
8000283c:	12 3b       	cp.w	r11,r9
8000283e:	e0 88 00 0c 	brls	80002856 <scif_configure_osc_crystalmode+0x5a>
80002842:	e0 69 12 00 	mov	r9,4608
80002846:	ea 19 00 7a 	orh	r9,0x7a
8000284a:	12 3b       	cp.w	r11,r9
8000284c:	f9 bb 03 02 	movlo	r11,2
80002850:	f9 bb 02 03 	movhs	r11,3
80002854:	cd cb       	rjmp	8000280c <scif_configure_osc_crystalmode+0x10>
80002856:	30 1b       	mov	r11,1
80002858:	cd ab       	rjmp	8000280c <scif_configure_osc_crystalmode+0x10>
8000285a:	d7 03       	nop

8000285c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000285c:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002860:	fe c0 f8 60 	sub	r0,pc,-1952

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002864:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002868:	d5 53       	csrf	0x15
  cp      r0, r1
8000286a:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000286c:	33 01       	mov	r1,48
  lda.w   r2, _data_lma
8000286e:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002870:	c0 72       	brcc	8000287e <idata_load_loop_end>
  st.d    r0++, r4
80002872:	fe c2 f5 5a 	sub	r2,pc,-2726

80002876 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80002876:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002878:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
8000287a:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000287c:	cf d3       	brcs	80002876 <idata_load_loop>

8000287e <idata_load_loop_end>:
  brhs    udata_clear_loop_end
8000287e:	33 00       	mov	r0,48
  mov     r2, 0
80002880:	e0 61 01 28 	mov	r1,296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002884:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002886:	c0 62       	brcc	80002892 <udata_clear_loop_end>
  brlo    udata_clear_loop
80002888:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000288a:	30 03       	mov	r3,0

8000288c <udata_clear_loop>:
8000288c:	a1 22       	st.d	r0++,r2
8000288e:	02 30       	cp.w	r0,r1
80002890:	cf e3       	brcs	8000288c <udata_clear_loop>

80002892 <udata_clear_loop_end>:
80002892:	fe cf ff fa 	sub	pc,pc,-6
80002896:	d7 03       	nop

80002898 <main>:
}



int main(void)
{
80002898:	d4 01       	pushm	lr

static unsigned long init_clock( unsigned long cpuclk_hz )
{
  unsigned long ret_val = 0u;
  
  pcl_configure_clocks(&pcl_dfll_freq_param);
8000289a:	30 cc       	mov	r12,12
8000289c:	fe b0 fd 92 	rcall	800023c0 <pcl_configure_clocks>
800028a0:	30 4b       	mov	r11,4

int main(void)
{
	init_system();
	
	gpio_enable_module_pin(PWMA09_GPIO, PWM09_PWM_FUNCTION);
800028a2:	30 9c       	mov	r12,9
800028a4:	fe b0 fb f8 	rcall	80002094 <gpio_enable_module_pin>
800028a8:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA11_GPIO, PWM11_PWM_FUNCTION);
800028aa:	30 bc       	mov	r12,11
800028ac:	fe b0 fb f4 	rcall	80002094 <gpio_enable_module_pin>
800028b0:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA12_GPIO, PWM12_PWM_FUNCTION);
800028b2:	30 cc       	mov	r12,12
800028b4:	fe b0 fb f0 	rcall	80002094 <gpio_enable_module_pin>
800028b8:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA13_GPIO, PWM13_PWM_FUNCTION);
800028ba:	30 dc       	mov	r12,13
800028bc:	fe b0 fb ec 	rcall	80002094 <gpio_enable_module_pin>
800028c0:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA15_GPIO, PWM15_PWM_FUNCTION);
800028c2:	30 fc       	mov	r12,15
800028c4:	fe b0 fb e8 	rcall	80002094 <gpio_enable_module_pin>
800028c8:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA16_GPIO, PWM16_PWM_FUNCTION);
800028ca:	31 0c       	mov	r12,16
800028cc:	fe b0 fb e4 	rcall	80002094 <gpio_enable_module_pin>
800028d0:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA17_GPIO, PWM17_PWM_FUNCTION);
800028d2:	31 1c       	mov	r12,17
800028d4:	fe b0 fb e0 	rcall	80002094 <gpio_enable_module_pin>
800028d8:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA18_GPIO, PWM18_PWM_FUNCTION);
800028da:	31 2c       	mov	r12,18
800028dc:	fe b0 fb dc 	rcall	80002094 <gpio_enable_module_pin>
800028e0:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA19_GPIO, PWM19_PWM_FUNCTION);
800028e2:	31 3c       	mov	r12,19
800028e4:	fe b0 fb d8 	rcall	80002094 <gpio_enable_module_pin>
800028e8:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA20_GPIO, PWM20_PWM_FUNCTION);
800028ea:	31 4c       	mov	r12,20
800028ec:	fe b0 fb d4 	rcall	80002094 <gpio_enable_module_pin>
800028f0:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA21_GPIO, PWM21_PWM_FUNCTION);
800028f2:	31 5c       	mov	r12,21
800028f4:	fe b0 fb d0 	rcall	80002094 <gpio_enable_module_pin>
800028f8:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA22_GPIO, PWM22_PWM_FUNCTION);
800028fa:	31 6c       	mov	r12,22
800028fc:	fe b0 fb cc 	rcall	80002094 <gpio_enable_module_pin>
80002900:	30 4b       	mov	r11,4
	
	
	gpio_enable_module_pin(PWMA23_GPIO, PWM23_PWM_FUNCTION);
80002902:	32 0c       	mov	r12,32
80002904:	fe b0 fb c8 	rcall	80002094 <gpio_enable_module_pin>
80002908:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA25_GPIO, PWM25_PWM_FUNCTION);
8000290a:	32 2c       	mov	r12,34
8000290c:	fe b0 fb c4 	rcall	80002094 <gpio_enable_module_pin>
80002910:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA26_GPIO, PWM26_PWM_FUNCTION);
80002912:	32 3c       	mov	r12,35
80002914:	fe b0 fb c0 	rcall	80002094 <gpio_enable_module_pin>
80002918:	30 4b       	mov	r11,4
	
	//gpio_enable_module_pin(PWMA27_GPIO, PWM27_PWM_FUNCTION);
	
	gpio_enable_module_pin(PWMA28_GPIO, PWM28_PWM_FUNCTION);
8000291a:	32 5c       	mov	r12,37
8000291c:	fe b0 fb bc 	rcall	80002094 <gpio_enable_module_pin>
80002920:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA29_GPIO, PWM29_PWM_FUNCTION);
80002922:	32 6c       	mov	r12,38
80002924:	fe b0 fb b8 	rcall	80002094 <gpio_enable_module_pin>
80002928:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA30_GPIO, PWM30_PWM_FUNCTION);
8000292a:	32 7c       	mov	r12,39
8000292c:	fe b0 fb b4 	rcall	80002094 <gpio_enable_module_pin>
80002930:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA31_GPIO, PWM31_PWM_FUNCTION);
80002932:	32 8c       	mov	r12,40
80002934:	fe b0 fb b0 	rcall	80002094 <gpio_enable_module_pin>
80002938:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA32_GPIO, PWM32_PWM_FUNCTION);
8000293a:	32 9c       	mov	r12,41
8000293c:	fe b0 fb ac 	rcall	80002094 <gpio_enable_module_pin>
80002940:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA33_GPIO, PWM33_PWM_FUNCTION);
80002942:	32 ac       	mov	r12,42
80002944:	fe b0 fb a8 	rcall	80002094 <gpio_enable_module_pin>
80002948:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA34_GPIO, PWM34_PWM_FUNCTION);
8000294a:	32 bc       	mov	r12,43
8000294c:	fe b0 fb a4 	rcall	80002094 <gpio_enable_module_pin>
80002950:	30 4b       	mov	r11,4
	gpio_enable_module_pin(PWMA35_GPIO, PWM35_PWM_FUNCTION);
80002952:	32 cc       	mov	r12,44
80002954:	fe b0 fb a0 	rcall	80002094 <gpio_enable_module_pin>
80002958:	fe b0 fd e1 	rcall	8000251a <scif_start_rc32k>
	
	
	scif_start_rc32k();
8000295c:	30 29       	mov	r9,2
	scif_gc_setup(  AVR32_PM_GCLK_PWMA, 
8000295e:	30 1a       	mov	r10,1
80002960:	30 9b       	mov	r11,9
80002962:	30 3c       	mov	r12,3
80002964:	fe b0 fd 84 	rcall	8000246c <scif_gc_setup>
80002968:	30 3c       	mov	r12,3
					SCIF_GCCTRL_RC32K, 
					true,              
					2);                 
	scif_gc_enable(AVR32_PM_GCLK_PWMA);
8000296a:	fe b0 fd ca 	rcall	800024fe <scif_gc_enable>
8000296e:	30 08       	mov	r8,0
	
	
	pwma_config_and_enable( &AVR32_PWMA, (PWM_CH1)
80002970:	e0 69 00 ff 	mov	r9,255
80002974:	e0 6a ba 01 	mov	r10,47617
80002978:	ea 1a fe ff 	orh	r10,0xfeff
8000297c:	30 fb       	mov	r11,15
8000297e:	fe 7c 54 00 	mov	r12,-44032
80002982:	fe b0 fd 4d 	rcall	8000241c <pwma_config_and_enable>
80002986:	31 79       	mov	r9,23
	delay_init(sysclk_get_cpu_hz());
	
	// Center all motors
	// ----------------------------------------------------
	// Update Leg 1
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH4), servos[0][0]);
80002988:	30 1a       	mov	r10,1
8000298a:	30 2b       	mov	r11,2
8000298c:	fe 7c 54 00 	mov	r12,-44032
80002990:	fe b0 fd 5c 	rcall	80002448 <pwma_set_channels_value>
80002994:	30 a9       	mov	r9,10
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH5), servos[0][1]);
80002996:	30 1a       	mov	r10,1
80002998:	ea 1a 00 20 	orh	r10,0x20
8000299c:	30 0b       	mov	r11,0
8000299e:	fe 7c 54 00 	mov	r12,-44032
800029a2:	fe b0 fd 53 	rcall	80002448 <pwma_set_channels_value>
800029a6:	31 c9       	mov	r9,28
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH6), servos[0][2]);
800029a8:	30 1a       	mov	r10,1
800029aa:	ea 1a 00 10 	orh	r10,0x10
800029ae:	30 0b       	mov	r11,0
800029b0:	fe 7c 54 00 	mov	r12,-44032
800029b4:	fe b0 fd 4a 	rcall	80002448 <pwma_set_channels_value>
800029b8:	31 39       	mov	r9,19
	
	// Update Leg 2
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH7), servos[1][0]);
800029ba:	e0 6a 20 01 	mov	r10,8193
800029be:	30 0b       	mov	r11,0
800029c0:	fe 7c 54 00 	mov	r12,-44032
800029c4:	fe b0 fd 42 	rcall	80002448 <pwma_set_channels_value>
800029c8:	30 a9       	mov	r9,10
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH8), servos[1][1]);
800029ca:	e0 6a 08 01 	mov	r10,2049
800029ce:	30 0b       	mov	r11,0
800029d0:	fe 7c 54 00 	mov	r12,-44032
800029d4:	fe b0 fd 3a 	rcall	80002448 <pwma_set_channels_value>
800029d8:	31 c9       	mov	r9,28
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH9), servos[1][2]);
800029da:	30 1a       	mov	r10,1
800029dc:	30 1b       	mov	r11,1
800029de:	fe 7c 54 00 	mov	r12,-44032
800029e2:	fe b0 fd 33 	rcall	80002448 <pwma_set_channels_value>
800029e6:	31 19       	mov	r9,17
	
	// Update Leg 3
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH10), servos[2][0]);
800029e8:	30 1a       	mov	r10,1
800029ea:	ea 1a 20 00 	orh	r10,0x2000
800029ee:	30 0b       	mov	r11,0
800029f0:	fe 7c 54 00 	mov	r12,-44032
800029f4:	fe b0 fd 2a 	rcall	80002448 <pwma_set_channels_value>
800029f8:	30 a9       	mov	r9,10
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH11), servos[2][1]);
800029fa:	30 1a       	mov	r10,1
800029fc:	ea 1a 40 00 	orh	r10,0x4000
80002a00:	30 0b       	mov	r11,0
80002a02:	fe 7c 54 00 	mov	r12,-44032
80002a06:	fe b0 fd 21 	rcall	80002448 <pwma_set_channels_value>
80002a0a:	31 c9       	mov	r9,28
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH12), servos[2][2]);
80002a0c:	30 1a       	mov	r10,1
80002a0e:	ea 1a 80 00 	orh	r10,0x8000
80002a12:	30 0b       	mov	r11,0
80002a14:	fe 7c 54 00 	mov	r12,-44032
80002a18:	fe b0 fd 18 	rcall	80002448 <pwma_set_channels_value>
80002a1c:	31 09       	mov	r9,16
	
	// Update Leg 4
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH16), servos[3][0]);
80002a1e:	30 1a       	mov	r10,1
80002a20:	30 8b       	mov	r11,8
80002a22:	fe 7c 54 00 	mov	r12,-44032
80002a26:	fe b0 fd 11 	rcall	80002448 <pwma_set_channels_value>
80002a2a:	30 a9       	mov	r9,10
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH17), servos[3][1]);
80002a2c:	e0 6a 02 01 	mov	r10,513
80002a30:	30 0b       	mov	r11,0
80002a32:	fe 7c 54 00 	mov	r12,-44032
80002a36:	fe b0 fd 09 	rcall	80002448 <pwma_set_channels_value>
80002a3a:	31 c9       	mov	r9,28
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH18), servos[3][2]);
80002a3c:	e0 6a 10 01 	mov	r10,4097
80002a40:	30 0b       	mov	r11,0
80002a42:	fe 7c 54 00 	mov	r12,-44032
80002a46:	fe b0 fd 01 	rcall	80002448 <pwma_set_channels_value>
80002a4a:	31 69       	mov	r9,22
	
	// Update Leg 5
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH19), servos[4][0]);
80002a4c:	30 1a       	mov	r10,1
80002a4e:	30 4b       	mov	r11,4
80002a50:	fe 7c 54 00 	mov	r12,-44032
80002a54:	fe b0 fc fa 	rcall	80002448 <pwma_set_channels_value>
80002a58:	30 a9       	mov	r9,10
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH20), servos[4][1]);
80002a5a:	e4 6a 00 01 	mov	r10,262145
80002a5e:	30 0b       	mov	r11,0
80002a60:	fe 7c 54 00 	mov	r12,-44032
80002a64:	fe b0 fc f2 	rcall	80002448 <pwma_set_channels_value>
80002a68:	31 c9       	mov	r9,28
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH21), servos[4][2]);
80002a6a:	e8 6a 00 01 	mov	r10,524289
80002a6e:	30 0b       	mov	r11,0
80002a70:	fe 7c 54 00 	mov	r12,-44032
80002a74:	fe b0 fc ea 	rcall	80002448 <pwma_set_channels_value>
80002a78:	31 69       	mov	r9,22
	
	// Update Leg 6
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH22), servos[5][0]);
80002a7a:	e2 6a 00 01 	mov	r10,131073
80002a7e:	30 0b       	mov	r11,0
80002a80:	fe 7c 54 00 	mov	r12,-44032
80002a84:	fe b0 fc e2 	rcall	80002448 <pwma_set_channels_value>
80002a88:	30 a9       	mov	r9,10
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH23), servos[5][1]);
80002a8a:	e0 7a 00 01 	mov	r10,65537
80002a8e:	30 0b       	mov	r11,0
80002a90:	fe 7c 54 00 	mov	r12,-44032
80002a94:	fe b0 fc da 	rcall	80002448 <pwma_set_channels_value>
80002a98:	31 c9       	mov	r9,28
	pwma_set_channels_value(&AVR32_PWMA, (PWM_CH24), servos[5][2]);
80002a9a:	e0 6a 80 01 	mov	r10,32769
80002a9e:	30 0b       	mov	r11,0
80002aa0:	fe 7c 54 00 	mov	r12,-44032
80002aa4:	fe b0 fc d2 	rcall	80002448 <pwma_set_channels_value>
80002aa8:	31 49       	mov	r9,20
		servos[1][2] += 10;
		servos[3][1] += 10;
		servos[3][2] += 10;
		servos[5][1] += 10;
		servos[5][2] += 10;
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH8), servos[1][1]);
80002aaa:	e0 6a 08 01 	mov	r10,2049
80002aae:	30 0b       	mov	r11,0
80002ab0:	fe 7c 54 00 	mov	r12,-44032
80002ab4:	fe b0 fc ca 	rcall	80002448 <pwma_set_channels_value>
80002ab8:	32 69       	mov	r9,38
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH9), servos[1][2]);
80002aba:	30 1a       	mov	r10,1
80002abc:	30 1b       	mov	r11,1
80002abe:	fe 7c 54 00 	mov	r12,-44032
80002ac2:	fe b0 fc c3 	rcall	80002448 <pwma_set_channels_value>
80002ac6:	31 49       	mov	r9,20
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH17), servos[3][1]);
80002ac8:	e0 6a 02 01 	mov	r10,513
80002acc:	30 0b       	mov	r11,0
80002ace:	fe 7c 54 00 	mov	r12,-44032
80002ad2:	fe b0 fc bb 	rcall	80002448 <pwma_set_channels_value>
80002ad6:	32 69       	mov	r9,38
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH18), servos[3][2]);
80002ad8:	e0 6a 10 01 	mov	r10,4097
80002adc:	30 0b       	mov	r11,0
80002ade:	fe 7c 54 00 	mov	r12,-44032
80002ae2:	fe b0 fc b3 	rcall	80002448 <pwma_set_channels_value>
80002ae6:	31 49       	mov	r9,20
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH23), servos[5][1]);
80002ae8:	e0 7a 00 01 	mov	r10,65537
80002aec:	30 0b       	mov	r11,0
80002aee:	fe 7c 54 00 	mov	r12,-44032
80002af2:	fe b0 fc ab 	rcall	80002448 <pwma_set_channels_value>
80002af6:	32 69       	mov	r9,38
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH24), servos[5][2]);
80002af8:	e0 6a 80 01 	mov	r10,32769
80002afc:	30 0b       	mov	r11,0
80002afe:	fe 7c 54 00 	mov	r12,-44032
80002b02:	fe b0 fc a3 	rcall	80002448 <pwma_set_channels_value>
80002b06:	31 b9       	mov	r9,27
		
		// Move Body Forward
		servos[0][0] += 4;
		servos[2][0] += 4;
		servos[4][0] -= 4;
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH4), servos[0][0]);
80002b08:	30 1a       	mov	r10,1
80002b0a:	30 2b       	mov	r11,2
80002b0c:	fe 7c 54 00 	mov	r12,-44032
80002b10:	fe b0 fc 9c 	rcall	80002448 <pwma_set_channels_value>
80002b14:	31 59       	mov	r9,21
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH10), servos[2][0]);
80002b16:	30 1a       	mov	r10,1
80002b18:	ea 1a 20 00 	orh	r10,0x2000
80002b1c:	30 0b       	mov	r11,0
80002b1e:	fe 7c 54 00 	mov	r12,-44032
80002b22:	fe b0 fc 93 	rcall	80002448 <pwma_set_channels_value>
80002b26:	31 29       	mov	r9,18
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH19), servos[4][0]);
80002b28:	30 1a       	mov	r10,1
80002b2a:	30 4b       	mov	r11,4
80002b2c:	fe 7c 54 00 	mov	r12,-44032
80002b30:	fe b0 fc 8c 	rcall	80002448 <pwma_set_channels_value>
80002b34:	30 f9       	mov	r9,15
		
		// Move Legs Forward
		servos[1][0] -= 4;
		servos[3][0] += 4;
		servos[5][0] += 4;
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH7), servos[1][0]);
80002b36:	e0 6a 20 01 	mov	r10,8193
80002b3a:	30 0b       	mov	r11,0
80002b3c:	fe 7c 54 00 	mov	r12,-44032
80002b40:	fe b0 fc 84 	rcall	80002448 <pwma_set_channels_value>
80002b44:	31 49       	mov	r9,20
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH16), servos[3][0]);
80002b46:	30 1a       	mov	r10,1
80002b48:	30 8b       	mov	r11,8
80002b4a:	fe 7c 54 00 	mov	r12,-44032
80002b4e:	fe b0 fc 7d 	rcall	80002448 <pwma_set_channels_value>
80002b52:	31 a9       	mov	r9,26
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH22), servos[5][0]);
80002b54:	e2 6a 00 01 	mov	r10,131073
80002b58:	30 0b       	mov	r11,0
80002b5a:	fe 7c 54 00 	mov	r12,-44032
80002b5e:	fe b0 fc 75 	rcall	80002448 <pwma_set_channels_value>
80002b62:	30 a9       	mov	r9,10
		servos[1][2] -= 10;
		servos[3][1] -= 10;
		servos[3][2] -= 10;
		servos[5][1] -= 10;
		servos[5][2] -= 10;
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH8), servos[1][1]);
80002b64:	e0 6a 08 01 	mov	r10,2049
80002b68:	30 0b       	mov	r11,0
80002b6a:	fe 7c 54 00 	mov	r12,-44032
80002b6e:	fe b0 fc 6d 	rcall	80002448 <pwma_set_channels_value>
80002b72:	31 c9       	mov	r9,28
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH9), servos[1][2]);
80002b74:	30 1a       	mov	r10,1
80002b76:	30 1b       	mov	r11,1
80002b78:	fe 7c 54 00 	mov	r12,-44032
80002b7c:	fe b0 fc 66 	rcall	80002448 <pwma_set_channels_value>
80002b80:	30 a9       	mov	r9,10
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH17), servos[3][1]);
80002b82:	e0 6a 02 01 	mov	r10,513
80002b86:	30 0b       	mov	r11,0
80002b88:	fe 7c 54 00 	mov	r12,-44032
80002b8c:	fe b0 fc 5e 	rcall	80002448 <pwma_set_channels_value>
80002b90:	31 c9       	mov	r9,28
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH18), servos[3][2]);
80002b92:	e0 6a 10 01 	mov	r10,4097
80002b96:	30 0b       	mov	r11,0
80002b98:	fe 7c 54 00 	mov	r12,-44032
80002b9c:	fe b0 fc 56 	rcall	80002448 <pwma_set_channels_value>
80002ba0:	30 a9       	mov	r9,10
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH23), servos[5][1]);
80002ba2:	e0 7a 00 01 	mov	r10,65537
80002ba6:	30 0b       	mov	r11,0
80002ba8:	fe 7c 54 00 	mov	r12,-44032
80002bac:	fe b0 fc 4e 	rcall	80002448 <pwma_set_channels_value>
80002bb0:	31 c9       	mov	r9,28
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH24), servos[5][2]);
80002bb2:	e0 6a 80 01 	mov	r10,32769
80002bb6:	30 0b       	mov	r11,0
80002bb8:	fe 7c 54 00 	mov	r12,-44032
80002bbc:	fe b0 fc 46 	rcall	80002448 <pwma_set_channels_value>
80002bc0:	31 09       	mov	r9,16
		servos[0][2] += 6;
		servos[2][1] += 6;
		servos[2][2] += 6;
		servos[4][1] += 6;
		servos[4][2] += 6;
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH5), servos[0][1]);
80002bc2:	30 1a       	mov	r10,1
80002bc4:	ea 1a 00 20 	orh	r10,0x20
80002bc8:	30 0b       	mov	r11,0
80002bca:	fe 7c 54 00 	mov	r12,-44032
80002bce:	fe b0 fc 3d 	rcall	80002448 <pwma_set_channels_value>
80002bd2:	32 29       	mov	r9,34
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH6), servos[0][2]);
80002bd4:	30 1a       	mov	r10,1
80002bd6:	ea 1a 00 10 	orh	r10,0x10
80002bda:	30 0b       	mov	r11,0
80002bdc:	fe 7c 54 00 	mov	r12,-44032
80002be0:	fe b0 fc 34 	rcall	80002448 <pwma_set_channels_value>
80002be4:	31 09       	mov	r9,16
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH11), servos[2][1]);
80002be6:	30 1a       	mov	r10,1
80002be8:	ea 1a 40 00 	orh	r10,0x4000
80002bec:	30 0b       	mov	r11,0
80002bee:	fe 7c 54 00 	mov	r12,-44032
80002bf2:	fe b0 fc 2b 	rcall	80002448 <pwma_set_channels_value>
80002bf6:	32 29       	mov	r9,34
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH12), servos[2][2]);
80002bf8:	30 1a       	mov	r10,1
80002bfa:	ea 1a 80 00 	orh	r10,0x8000
80002bfe:	30 0b       	mov	r11,0
80002c00:	fe 7c 54 00 	mov	r12,-44032
80002c04:	fe b0 fc 22 	rcall	80002448 <pwma_set_channels_value>
80002c08:	31 09       	mov	r9,16
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH20), servos[4][1]);
80002c0a:	e4 6a 00 01 	mov	r10,262145
80002c0e:	30 0b       	mov	r11,0
80002c10:	fe 7c 54 00 	mov	r12,-44032
80002c14:	fe b0 fc 1a 	rcall	80002448 <pwma_set_channels_value>
80002c18:	32 29       	mov	r9,34
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH21), servos[4][2]);
80002c1a:	e8 6a 00 01 	mov	r10,524289
80002c1e:	30 0b       	mov	r11,0
80002c20:	fe 7c 54 00 	mov	r12,-44032
80002c24:	fe b0 fc 12 	rcall	80002448 <pwma_set_channels_value>
80002c28:	31 39       	mov	r9,19
		
		// Move Body Forward
		servos[1][0] += 4;
		servos[3][0] -= 4;
		servos[5][0] -= 4;
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH7), servos[1][0]);
80002c2a:	e0 6a 20 01 	mov	r10,8193
80002c2e:	30 0b       	mov	r11,0
80002c30:	fe 7c 54 00 	mov	r12,-44032
80002c34:	fe b0 fc 0a 	rcall	80002448 <pwma_set_channels_value>
80002c38:	31 09       	mov	r9,16
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH16), servos[3][0]);
80002c3a:	30 1a       	mov	r10,1
80002c3c:	30 8b       	mov	r11,8
80002c3e:	fe 7c 54 00 	mov	r12,-44032
80002c42:	fe b0 fc 03 	rcall	80002448 <pwma_set_channels_value>
80002c46:	31 69       	mov	r9,22
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH22), servos[5][0]);
80002c48:	e2 6a 00 01 	mov	r10,131073
80002c4c:	30 0b       	mov	r11,0
80002c4e:	fe 7c 54 00 	mov	r12,-44032
80002c52:	fe b0 fb fb 	rcall	80002448 <pwma_set_channels_value>
80002c56:	31 79       	mov	r9,23
		
		// Move Legs Forward
		servos[0][0] -= 4;
		servos[2][0] -= 4;
		servos[4][0] += 4;
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH4), servos[0][0]);
80002c58:	30 1a       	mov	r10,1
80002c5a:	30 2b       	mov	r11,2
80002c5c:	fe 7c 54 00 	mov	r12,-44032
80002c60:	fe b0 fb f4 	rcall	80002448 <pwma_set_channels_value>
80002c64:	31 19       	mov	r9,17
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH10), servos[2][0]);
80002c66:	30 1a       	mov	r10,1
80002c68:	ea 1a 20 00 	orh	r10,0x2000
80002c6c:	30 0b       	mov	r11,0
80002c6e:	fe 7c 54 00 	mov	r12,-44032
80002c72:	fe b0 fb eb 	rcall	80002448 <pwma_set_channels_value>
80002c76:	31 69       	mov	r9,22
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH19), servos[4][0]);
80002c78:	30 1a       	mov	r10,1
80002c7a:	30 4b       	mov	r11,4
80002c7c:	fe 7c 54 00 	mov	r12,-44032
80002c80:	fe b0 fb e4 	rcall	80002448 <pwma_set_channels_value>
80002c84:	30 a9       	mov	r9,10
		servos[0][2] -= 6;
		servos[2][1] -= 6;
		servos[2][2] -= 6;
		servos[4][1] -= 6;
		servos[4][2] -= 6;
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH5), servos[0][1]);
80002c86:	30 1a       	mov	r10,1
80002c88:	ea 1a 00 20 	orh	r10,0x20
80002c8c:	30 0b       	mov	r11,0
80002c8e:	fe 7c 54 00 	mov	r12,-44032
80002c92:	fe b0 fb db 	rcall	80002448 <pwma_set_channels_value>
80002c96:	31 c9       	mov	r9,28
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH6), servos[0][2]);
80002c98:	30 1a       	mov	r10,1
80002c9a:	ea 1a 00 10 	orh	r10,0x10
80002c9e:	30 0b       	mov	r11,0
80002ca0:	fe 7c 54 00 	mov	r12,-44032
80002ca4:	fe b0 fb d2 	rcall	80002448 <pwma_set_channels_value>
80002ca8:	30 a9       	mov	r9,10
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH11), servos[2][1]);
80002caa:	30 1a       	mov	r10,1
80002cac:	ea 1a 40 00 	orh	r10,0x4000
80002cb0:	30 0b       	mov	r11,0
80002cb2:	fe 7c 54 00 	mov	r12,-44032
80002cb6:	fe b0 fb c9 	rcall	80002448 <pwma_set_channels_value>
80002cba:	31 c9       	mov	r9,28
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH12), servos[2][2]);
80002cbc:	30 1a       	mov	r10,1
80002cbe:	ea 1a 80 00 	orh	r10,0x8000
80002cc2:	30 0b       	mov	r11,0
80002cc4:	fe 7c 54 00 	mov	r12,-44032
80002cc8:	fe b0 fb c0 	rcall	80002448 <pwma_set_channels_value>
80002ccc:	30 a9       	mov	r9,10
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH20), servos[4][1]);
80002cce:	e4 6a 00 01 	mov	r10,262145
80002cd2:	30 0b       	mov	r11,0
80002cd4:	fe 7c 54 00 	mov	r12,-44032
80002cd8:	fe b0 fb b8 	rcall	80002448 <pwma_set_channels_value>
80002cdc:	31 c9       	mov	r9,28
		pwma_set_channels_value(&AVR32_PWMA, (PWM_CH21), servos[4][2]);
80002cde:	e8 6a 00 01 	mov	r10,524289
80002ce2:	30 0b       	mov	r11,0
80002ce4:	fe 7c 54 00 	mov	r12,-44032
80002ce8:	fe b0 fb b0 	rcall	80002448 <pwma_set_channels_value>
80002cec:	cd ea       	rjmp	80002aa8 <main+0x210>
80002cee:	d7 03       	nop

80002cf0 <__avr32_udiv64>:
80002cf0:	d4 31       	pushm	r0-r7,lr
80002cf2:	1a 97       	mov	r7,sp
80002cf4:	20 2d       	sub	sp,8
80002cf6:	10 9e       	mov	lr,r8
80002cf8:	12 95       	mov	r5,r9
80002cfa:	14 96       	mov	r6,r10
80002cfc:	58 09       	cp.w	r9,0
80002cfe:	c4 91       	brne	80002d90 <__avr32_udiv64+0xa0>
80002d00:	16 38       	cp.w	r8,r11
80002d02:	e0 88 00 57 	brls	80002db0 <__avr32_udiv64+0xc0>
80002d06:	f0 08 12 00 	clz	r8,r8
80002d0a:	c0 d0       	breq	80002d24 <__avr32_udiv64+0x34>
80002d0c:	f6 08 09 4b 	lsl	r11,r11,r8
80002d10:	f0 09 11 20 	rsub	r9,r8,32
80002d14:	fc 08 09 4e 	lsl	lr,lr,r8
80002d18:	f4 09 0a 49 	lsr	r9,r10,r9
80002d1c:	f4 08 09 46 	lsl	r6,r10,r8
80002d20:	f3 eb 10 0b 	or	r11,r9,r11
80002d24:	fc 05 16 10 	lsr	r5,lr,0x10
80002d28:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80002d2c:	f6 05 0d 0a 	divu	r10,r11,r5
80002d30:	ec 08 16 10 	lsr	r8,r6,0x10
80002d34:	14 99       	mov	r9,r10
80002d36:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80002d3a:	b9 3a       	mul	r10,r12
80002d3c:	10 3a       	cp.w	r10,r8
80002d3e:	e0 88 00 0c 	brls	80002d56 <__avr32_udiv64+0x66>
80002d42:	20 19       	sub	r9,1
80002d44:	1c 08       	add	r8,lr
80002d46:	10 3e       	cp.w	lr,r8
80002d48:	e0 8b 00 07 	brhi	80002d56 <__avr32_udiv64+0x66>
80002d4c:	10 3a       	cp.w	r10,r8
80002d4e:	f7 b9 0b 01 	subhi	r9,1
80002d52:	f1 de eb 08 	addhi	r8,r8,lr
80002d56:	f0 0a 01 0b 	sub	r11,r8,r10
80002d5a:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80002d5e:	f6 05 0d 0a 	divu	r10,r11,r5
80002d62:	ed eb 11 06 	or	r6,r6,r11<<0x10
80002d66:	14 98       	mov	r8,r10
80002d68:	f4 0c 02 4c 	mul	r12,r10,r12
80002d6c:	0c 3c       	cp.w	r12,r6
80002d6e:	e0 88 00 0a 	brls	80002d82 <__avr32_udiv64+0x92>
80002d72:	20 18       	sub	r8,1
80002d74:	1c 06       	add	r6,lr
80002d76:	0c 3e       	cp.w	lr,r6
80002d78:	e0 8b 00 05 	brhi	80002d82 <__avr32_udiv64+0x92>
80002d7c:	0c 3c       	cp.w	r12,r6
80002d7e:	f7 b8 0b 01 	subhi	r8,1
80002d82:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
80002d86:	30 0c       	mov	r12,0
80002d88:	16 9a       	mov	r10,r11
80002d8a:	18 9b       	mov	r11,r12
80002d8c:	2f ed       	sub	sp,-8
80002d8e:	d8 32       	popm	r0-r7,pc
80002d90:	16 39       	cp.w	r9,r11
80002d92:	e0 8b 00 51 	brhi	80002e34 <__avr32_udiv64+0x144>
80002d96:	f2 0c 12 00 	clz	r12,r9
80002d9a:	c5 31       	brne	80002e40 <__avr32_udiv64+0x150>
80002d9c:	14 38       	cp.w	r8,r10
80002d9e:	5f 89       	srls	r9
80002da0:	16 35       	cp.w	r5,r11
80002da2:	5f 38       	srlo	r8
80002da4:	10 49       	or	r9,r8
80002da6:	f8 09 18 00 	cp.b	r9,r12
80002daa:	c4 50       	breq	80002e34 <__avr32_udiv64+0x144>
80002dac:	30 1b       	mov	r11,1
80002dae:	c4 58       	rjmp	80002e38 <__avr32_udiv64+0x148>
80002db0:	58 08       	cp.w	r8,0
80002db2:	c0 51       	brne	80002dbc <__avr32_udiv64+0xcc>
80002db4:	30 19       	mov	r9,1
80002db6:	f2 08 0d 08 	divu	r8,r9,r8
80002dba:	10 9e       	mov	lr,r8
80002dbc:	fc 08 12 00 	clz	r8,lr
80002dc0:	e0 81 00 91 	brne	80002ee2 <__avr32_udiv64+0x1f2>
80002dc4:	1c 1b       	sub	r11,lr
80002dc6:	fc 05 16 10 	lsr	r5,lr,0x10
80002dca:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80002dce:	30 1c       	mov	r12,1
80002dd0:	f6 05 0d 0a 	divu	r10,r11,r5
80002dd4:	ec 08 16 10 	lsr	r8,r6,0x10
80002dd8:	f4 09 02 43 	mul	r3,r10,r9
80002ddc:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80002de0:	14 9b       	mov	r11,r10
80002de2:	10 33       	cp.w	r3,r8
80002de4:	e0 88 00 0c 	brls	80002dfc <__avr32_udiv64+0x10c>
80002de8:	20 1b       	sub	r11,1
80002dea:	1c 08       	add	r8,lr
80002dec:	10 3e       	cp.w	lr,r8
80002dee:	e0 8b 00 07 	brhi	80002dfc <__avr32_udiv64+0x10c>
80002df2:	10 33       	cp.w	r3,r8
80002df4:	f7 bb 0b 01 	subhi	r11,1
80002df8:	f1 de eb 08 	addhi	r8,r8,lr
80002dfc:	f0 03 01 03 	sub	r3,r8,r3
80002e00:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80002e04:	e6 05 0d 02 	divu	r2,r3,r5
80002e08:	ed e3 11 06 	or	r6,r6,r3<<0x10
80002e0c:	04 98       	mov	r8,r2
80002e0e:	e4 09 02 49 	mul	r9,r2,r9
80002e12:	0c 39       	cp.w	r9,r6
80002e14:	e0 88 00 0a 	brls	80002e28 <__avr32_udiv64+0x138>
80002e18:	20 18       	sub	r8,1
80002e1a:	1c 06       	add	r6,lr
80002e1c:	0c 3e       	cp.w	lr,r6
80002e1e:	e0 8b 00 05 	brhi	80002e28 <__avr32_udiv64+0x138>
80002e22:	0c 39       	cp.w	r9,r6
80002e24:	f7 b8 0b 01 	subhi	r8,1
80002e28:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80002e2c:	16 9a       	mov	r10,r11
80002e2e:	18 9b       	mov	r11,r12
80002e30:	2f ed       	sub	sp,-8
80002e32:	d8 32       	popm	r0-r7,pc
80002e34:	30 0b       	mov	r11,0
80002e36:	16 9c       	mov	r12,r11
80002e38:	16 9a       	mov	r10,r11
80002e3a:	18 9b       	mov	r11,r12
80002e3c:	2f ed       	sub	sp,-8
80002e3e:	d8 32       	popm	r0-r7,pc
80002e40:	f2 0c 09 45 	lsl	r5,r9,r12
80002e44:	f8 0e 11 20 	rsub	lr,r12,32
80002e48:	f0 0c 09 43 	lsl	r3,r8,r12
80002e4c:	f4 0e 0a 46 	lsr	r6,r10,lr
80002e50:	f0 0e 0a 48 	lsr	r8,r8,lr
80002e54:	f6 0e 0a 4e 	lsr	lr,r11,lr
80002e58:	0a 48       	or	r8,r5
80002e5a:	f0 01 16 10 	lsr	r1,r8,0x10
80002e5e:	fc 01 0d 04 	divu	r4,lr,r1
80002e62:	ee e5 ff f8 	st.d	r7[-8],r4
80002e66:	f6 0c 09 49 	lsl	r9,r11,r12
80002e6a:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80002e6e:	ed e9 10 09 	or	r9,r6,r9
80002e72:	08 96       	mov	r6,r4
80002e74:	f2 0e 16 10 	lsr	lr,r9,0x10
80002e78:	ee f4 ff f8 	ld.w	r4,r7[-8]
80002e7c:	ec 05 02 4b 	mul	r11,r6,r5
80002e80:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80002e84:	1c 3b       	cp.w	r11,lr
80002e86:	e0 88 00 07 	brls	80002e94 <__avr32_udiv64+0x1a4>
80002e8a:	20 16       	sub	r6,1
80002e8c:	10 0e       	add	lr,r8
80002e8e:	1c 38       	cp.w	r8,lr
80002e90:	e0 88 00 6d 	brls	80002f6a <__avr32_udiv64+0x27a>
80002e94:	16 1e       	sub	lr,r11
80002e96:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80002e9a:	fc 01 0d 00 	divu	r0,lr,r1
80002e9e:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80002ea2:	00 9b       	mov	r11,r0
80002ea4:	e0 05 02 4e 	mul	lr,r0,r5
80002ea8:	12 3e       	cp.w	lr,r9
80002eaa:	e0 88 00 07 	brls	80002eb8 <__avr32_udiv64+0x1c8>
80002eae:	20 1b       	sub	r11,1
80002eb0:	10 09       	add	r9,r8
80002eb2:	12 38       	cp.w	r8,r9
80002eb4:	e0 88 00 55 	brls	80002f5e <__avr32_udiv64+0x26e>
80002eb8:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80002ebc:	1c 19       	sub	r9,lr
80002ebe:	f6 03 06 42 	mulu.d	r2,r11,r3
80002ec2:	06 39       	cp.w	r9,r3
80002ec4:	c0 93       	brcs	80002ed6 <__avr32_udiv64+0x1e6>
80002ec6:	5f 09       	sreq	r9
80002ec8:	f4 0c 09 4c 	lsl	r12,r10,r12
80002ecc:	04 3c       	cp.w	r12,r2
80002ece:	5f 38       	srlo	r8
80002ed0:	f3 e8 00 08 	and	r8,r9,r8
80002ed4:	c0 20       	breq	80002ed8 <__avr32_udiv64+0x1e8>
80002ed6:	20 1b       	sub	r11,1
80002ed8:	30 0c       	mov	r12,0
80002eda:	16 9a       	mov	r10,r11
80002edc:	18 9b       	mov	r11,r12
80002ede:	2f ed       	sub	sp,-8
80002ee0:	d8 32       	popm	r0-r7,pc
80002ee2:	f6 08 09 49 	lsl	r9,r11,r8
80002ee6:	fc 08 09 4e 	lsl	lr,lr,r8
80002eea:	f0 01 11 20 	rsub	r1,r8,32
80002eee:	fc 05 16 10 	lsr	r5,lr,0x10
80002ef2:	f4 01 0a 42 	lsr	r2,r10,r1
80002ef6:	f6 01 0a 41 	lsr	r1,r11,r1
80002efa:	12 42       	or	r2,r9
80002efc:	e2 05 0d 00 	divu	r0,r1,r5
80002f00:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80002f04:	e4 06 16 10 	lsr	r6,r2,0x10
80002f08:	00 93       	mov	r3,r0
80002f0a:	ed e1 11 06 	or	r6,r6,r1<<0x10
80002f0e:	e0 09 02 4c 	mul	r12,r0,r9
80002f12:	0c 3c       	cp.w	r12,r6
80002f14:	e0 88 00 07 	brls	80002f22 <__avr32_udiv64+0x232>
80002f18:	20 13       	sub	r3,1
80002f1a:	1c 06       	add	r6,lr
80002f1c:	0c 3e       	cp.w	lr,r6
80002f1e:	e0 88 00 2c 	brls	80002f76 <__avr32_udiv64+0x286>
80002f22:	ec 0c 01 01 	sub	r1,r6,r12
80002f26:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80002f2a:	e2 05 0d 00 	divu	r0,r1,r5
80002f2e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002f32:	00 9c       	mov	r12,r0
80002f34:	e0 09 02 41 	mul	r1,r0,r9
80002f38:	16 31       	cp.w	r1,r11
80002f3a:	e0 88 00 0c 	brls	80002f52 <__avr32_udiv64+0x262>
80002f3e:	20 1c       	sub	r12,1
80002f40:	1c 0b       	add	r11,lr
80002f42:	16 3e       	cp.w	lr,r11
80002f44:	e0 8b 00 07 	brhi	80002f52 <__avr32_udiv64+0x262>
80002f48:	16 31       	cp.w	r1,r11
80002f4a:	f7 bc 0b 01 	subhi	r12,1
80002f4e:	f7 de eb 0b 	addhi	r11,r11,lr
80002f52:	f4 08 09 46 	lsl	r6,r10,r8
80002f56:	02 1b       	sub	r11,r1
80002f58:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80002f5c:	c3 ab       	rjmp	80002dd0 <__avr32_udiv64+0xe0>
80002f5e:	12 3e       	cp.w	lr,r9
80002f60:	f3 d8 eb 09 	addhi	r9,r9,r8
80002f64:	f7 bb 0b 01 	subhi	r11,1
80002f68:	ca 8b       	rjmp	80002eb8 <__avr32_udiv64+0x1c8>
80002f6a:	1c 3b       	cp.w	r11,lr
80002f6c:	f7 b6 0b 01 	subhi	r6,1
80002f70:	fd d8 eb 0e 	addhi	lr,lr,r8
80002f74:	c9 0b       	rjmp	80002e94 <__avr32_udiv64+0x1a4>
80002f76:	0c 3c       	cp.w	r12,r6
80002f78:	f7 b3 0b 01 	subhi	r3,1
80002f7c:	ed de eb 06 	addhi	r6,r6,lr
80002f80:	cd 1b       	rjmp	80002f22 <__avr32_udiv64+0x232>

Disassembly of section .exception:

80003000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80003000:	c0 08       	rjmp	80003000 <_evba>
	...

80003004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80003004:	c0 08       	rjmp	80003004 <_handle_TLB_Multiple_Hit>
	...

80003008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80003008:	c0 08       	rjmp	80003008 <_handle_Bus_Error_Data_Fetch>
	...

8000300c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000300c:	c0 08       	rjmp	8000300c <_handle_Bus_Error_Instruction_Fetch>
	...

80003010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80003010:	c0 08       	rjmp	80003010 <_handle_NMI>
	...

80003014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80003014:	c0 08       	rjmp	80003014 <_handle_Instruction_Address>
	...

80003018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80003018:	c0 08       	rjmp	80003018 <_handle_ITLB_Protection>
	...

8000301c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000301c:	c0 08       	rjmp	8000301c <_handle_Breakpoint>
	...

80003020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80003020:	c0 08       	rjmp	80003020 <_handle_Illegal_Opcode>
	...

80003024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80003024:	c0 08       	rjmp	80003024 <_handle_Unimplemented_Instruction>
	...

80003028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80003028:	c0 08       	rjmp	80003028 <_handle_Privilege_Violation>
	...

8000302c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000302c:	c0 08       	rjmp	8000302c <_handle_Floating_Point>
	...

80003030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80003030:	c0 08       	rjmp	80003030 <_handle_Coprocessor_Absent>
	...

80003034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80003034:	c0 08       	rjmp	80003034 <_handle_Data_Address_Read>
	...

80003038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80003038:	c0 08       	rjmp	80003038 <_handle_Data_Address_Write>
	...

8000303c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000303c:	c0 08       	rjmp	8000303c <_handle_DTLB_Protection_Read>
	...

80003040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80003040:	c0 08       	rjmp	80003040 <_handle_DTLB_Protection_Write>
	...

80003044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80003044:	c0 08       	rjmp	80003044 <_handle_DTLB_Modified>
	...

80003050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80003050:	c0 08       	rjmp	80003050 <_handle_ITLB_Miss>
	...

80003060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80003060:	c0 08       	rjmp	80003060 <_handle_DTLB_Miss_Read>
	...

80003070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80003070:	c0 08       	rjmp	80003070 <_handle_DTLB_Miss_Write>
	...

80003100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80003100:	c0 08       	rjmp	80003100 <_handle_Supervisor_Call>
80003102:	d7 03       	nop

80003104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003104:	30 0c       	mov	r12,0
80003106:	fe b0 f8 15 	rcall	80002130 <_get_interrupt_handler>
8000310a:	58 0c       	cp.w	r12,0
8000310c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003110:	d6 03       	rete

80003112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003112:	30 1c       	mov	r12,1
80003114:	fe b0 f8 0e 	rcall	80002130 <_get_interrupt_handler>
80003118:	58 0c       	cp.w	r12,0
8000311a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000311e:	d6 03       	rete

80003120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003120:	30 2c       	mov	r12,2
80003122:	fe b0 f8 07 	rcall	80002130 <_get_interrupt_handler>
80003126:	58 0c       	cp.w	r12,0
80003128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000312c:	d6 03       	rete

8000312e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000312e:	30 3c       	mov	r12,3
80003130:	fe b0 f8 00 	rcall	80002130 <_get_interrupt_handler>
80003134:	58 0c       	cp.w	r12,0
80003136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000313a:	d6 03       	rete
8000313c:	d7 03       	nop
8000313e:	d7 03       	nop
80003140:	d7 03       	nop
80003142:	d7 03       	nop
80003144:	d7 03       	nop
80003146:	d7 03       	nop
80003148:	d7 03       	nop
8000314a:	d7 03       	nop
8000314c:	d7 03       	nop
8000314e:	d7 03       	nop
80003150:	d7 03       	nop
80003152:	d7 03       	nop
80003154:	d7 03       	nop
80003156:	d7 03       	nop
80003158:	d7 03       	nop
8000315a:	d7 03       	nop
8000315c:	d7 03       	nop
8000315e:	d7 03       	nop
80003160:	d7 03       	nop
80003162:	d7 03       	nop
80003164:	d7 03       	nop
80003166:	d7 03       	nop
80003168:	d7 03       	nop
8000316a:	d7 03       	nop
8000316c:	d7 03       	nop
8000316e:	d7 03       	nop
80003170:	d7 03       	nop
80003172:	d7 03       	nop
80003174:	d7 03       	nop
80003176:	d7 03       	nop
80003178:	d7 03       	nop
8000317a:	d7 03       	nop
8000317c:	d7 03       	nop
8000317e:	d7 03       	nop
80003180:	d7 03       	nop
80003182:	d7 03       	nop
80003184:	d7 03       	nop
80003186:	d7 03       	nop
80003188:	d7 03       	nop
8000318a:	d7 03       	nop
8000318c:	d7 03       	nop
8000318e:	d7 03       	nop
80003190:	d7 03       	nop
80003192:	d7 03       	nop
80003194:	d7 03       	nop
80003196:	d7 03       	nop
80003198:	d7 03       	nop
8000319a:	d7 03       	nop
8000319c:	d7 03       	nop
8000319e:	d7 03       	nop
800031a0:	d7 03       	nop
800031a2:	d7 03       	nop
800031a4:	d7 03       	nop
800031a6:	d7 03       	nop
800031a8:	d7 03       	nop
800031aa:	d7 03       	nop
800031ac:	d7 03       	nop
800031ae:	d7 03       	nop
800031b0:	d7 03       	nop
800031b2:	d7 03       	nop
800031b4:	d7 03       	nop
800031b6:	d7 03       	nop
800031b8:	d7 03       	nop
800031ba:	d7 03       	nop
800031bc:	d7 03       	nop
800031be:	d7 03       	nop
800031c0:	d7 03       	nop
800031c2:	d7 03       	nop
800031c4:	d7 03       	nop
800031c6:	d7 03       	nop
800031c8:	d7 03       	nop
800031ca:	d7 03       	nop
800031cc:	d7 03       	nop
800031ce:	d7 03       	nop
800031d0:	d7 03       	nop
800031d2:	d7 03       	nop
800031d4:	d7 03       	nop
800031d6:	d7 03       	nop
800031d8:	d7 03       	nop
800031da:	d7 03       	nop
800031dc:	d7 03       	nop
800031de:	d7 03       	nop
800031e0:	d7 03       	nop
800031e2:	d7 03       	nop
800031e4:	d7 03       	nop
800031e6:	d7 03       	nop
800031e8:	d7 03       	nop
800031ea:	d7 03       	nop
800031ec:	d7 03       	nop
800031ee:	d7 03       	nop
800031f0:	d7 03       	nop
800031f2:	d7 03       	nop
800031f4:	d7 03       	nop
800031f6:	d7 03       	nop
800031f8:	d7 03       	nop
800031fa:	d7 03       	nop
800031fc:	d7 03       	nop
800031fe:	d7 03       	nop
