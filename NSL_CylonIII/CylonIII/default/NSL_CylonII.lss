
NSL_CylonII.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000007dc  00000870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  00000876  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000054  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000306  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c1  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051d  00000000  00000000  00000db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000149  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000359  00000000  00000000  00001469  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	30 c0       	rjmp	.+96     	; 0x62 <__ctors_end>
   2:	48 c0       	rjmp	.+144    	; 0x94 <__bad_interrupt>
   4:	47 c0       	rjmp	.+142    	; 0x94 <__bad_interrupt>
   6:	46 c0       	rjmp	.+140    	; 0x94 <__bad_interrupt>
   8:	78 c2       	rjmp	.+1264   	; 0x4fa <__vector_4>
   a:	44 c0       	rjmp	.+136    	; 0x94 <__bad_interrupt>
   c:	43 c0       	rjmp	.+134    	; 0x94 <__bad_interrupt>
   e:	42 c0       	rjmp	.+132    	; 0x94 <__bad_interrupt>
  10:	41 c0       	rjmp	.+130    	; 0x94 <__bad_interrupt>
  12:	40 c0       	rjmp	.+128    	; 0x94 <__bad_interrupt>
  14:	3f c0       	rjmp	.+126    	; 0x94 <__bad_interrupt>
  16:	3e c0       	rjmp	.+124    	; 0x94 <__bad_interrupt>
  18:	3d c0       	rjmp	.+122    	; 0x94 <__bad_interrupt>
  1a:	3c c0       	rjmp	.+120    	; 0x94 <__bad_interrupt>
  1c:	3b c0       	rjmp	.+118    	; 0x94 <__bad_interrupt>
  1e:	3a c0       	rjmp	.+116    	; 0x94 <__bad_interrupt>
  20:	39 c0       	rjmp	.+114    	; 0x94 <__bad_interrupt>
  22:	38 c0       	rjmp	.+112    	; 0x94 <__bad_interrupt>
  24:	37 c0       	rjmp	.+110    	; 0x94 <__bad_interrupt>

00000026 <led30>:
  26:	0f f1 0f f4 0f cd 0f dc 0f 3d 0f 7c 0c fd 0d fc     .........=.|....
  36:	03 fd 07 fc 0f c7 0f d3 0f 37 0f 73 0c f7 0d f3     .........7.s....
  46:	03 f7 07 f3 0f 1f 0f 4f 0c df 0d cf 03 df 07 cf     .......O........
  56:	0c 7f 0d 3f 03 7f 07 3f 01 ff 04 ff                 ...?...?....

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf ed       	ldi	r28, 0xDF	; 223
  68:	cd bf       	out	0x3d, r28	; 61

0000006a <__do_copy_data>:
  6a:	10 e0       	ldi	r17, 0x00	; 0
  6c:	a0 e6       	ldi	r26, 0x60	; 96
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	ec ed       	ldi	r30, 0xDC	; 220
  72:	f7 e0       	ldi	r31, 0x07	; 7
  74:	02 c0       	rjmp	.+4      	; 0x7a <.do_copy_data_start>

00000076 <.do_copy_data_loop>:
  76:	05 90       	lpm	r0, Z+
  78:	0d 92       	st	X+, r0

0000007a <.do_copy_data_start>:
  7a:	a6 36       	cpi	r26, 0x66	; 102
  7c:	b1 07       	cpc	r27, r17
  7e:	d9 f7       	brne	.-10     	; 0x76 <.do_copy_data_loop>

00000080 <__do_clear_bss>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a6 e6       	ldi	r26, 0x66	; 102
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a8 36       	cpi	r26, 0x68	; 104
  8c:	b1 07       	cpc	r27, r17
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	d1 d0       	rcall	.+418    	; 0x234 <main>
  92:	a2 c3       	rjmp	.+1860   	; 0x7d8 <_exit>

00000094 <__bad_interrupt>:
  94:	b5 cf       	rjmp	.-150    	; 0x0 <__vectors>

00000096 <SetRC>:
unsigned int X = 0;
signed char XDIR =1;

// this routine is written to help understand how the process works, not be fast.
void SetRC( unsigned char index ) 
{	
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	unsigned char b1,b2;
	unsigned char portb, ddrb,portd6=2;
	DDRB = 0x0;
  9e:	17 ba       	out	0x17, r1	; 23
	DDRD = 0x0;
  a0:	11 ba       	out	0x11, r1	; 17
	PORTB =0x0;
  a2:	18 ba       	out	0x18, r1	; 24
	PORTD = 0;
  a4:	12 ba       	out	0x12, r1	; 18

	// get current values, Can't cache PORTD/DDRD since the sound interrupt can change, should cache DDRD6/PORTD6 instead
	portb = PORTB;
  a6:	28 b3       	in	r18, 0x18	; 24
	ddrb = DDRB;
  a8:	37 b3       	in	r19, 0x17	; 23
	index %= 30;


//	read two values from array, we use pgm_read_byte because the data is in program memory space
// its 6*2 because there are 6 leds in each column, and two bytes per led
	b1 = pgm_read_byte(&led30[ index*2   ] ) ;
  aa:	6e e1       	ldi	r22, 0x1E	; 30
  ac:	7c d2       	rcall	.+1272   	; 0x5a6 <__udivmodqi4>
  ae:	69 2f       	mov	r22, r25
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	66 0f       	add	r22, r22
  b4:	77 1f       	adc	r23, r23
  b6:	cb 01       	movw	r24, r22
  b8:	8a 5d       	subi	r24, 0xDA	; 218
  ba:	9f 4f       	sbci	r25, 0xFF	; 255
  bc:	fc 01       	movw	r30, r24
  be:	54 91       	lpm	r21, Z+
	b2 = pgm_read_byte(&led30[(index*2)+1] ) ;
  c0:	69 5d       	subi	r22, 0xD9	; 217
  c2:	7f 4f       	sbci	r23, 0xFF	; 255
  c4:	fb 01       	movw	r30, r22
  c6:	44 91       	lpm	r20, Z+

// if  bit positions 32 in b1 == 11 then set to don't care (input ) tristate for PD6
	if( IS_BIT_SET( b1,3 ) && IS_BIT_SET( b1,2 ) ) {
  c8:	65 2f       	mov	r22, r21
  ca:	53 ff       	sbrs	r21, 3
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <SetRC+0x40>
  ce:	52 ff       	sbrs	r21, 2
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <SetRC+0x40>

		CLR_BIT(DDRD,6 );
  d2:	8e 98       	cbi	0x11, 6	; 17
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <SetRC+0x42>

	} else { 

		// otherwise it is set to an output
		SET_BIT(DDRD ,6 );
  d6:	8e 9a       	sbi	0x11, 6	; 17
	}

// if 10 == 11 then set to don't care (input ) tristate for PB0
	if( GET_BIT( b1,1 )==1 && GET_BIT( b1,0 )==1 ) {
  d8:	85 2f       	mov	r24, r21
  da:	86 95       	lsr	r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8c 01       	movw	r16, r24
  e0:	01 70       	andi	r16, 0x01	; 1
  e2:	10 70       	andi	r17, 0x00	; 0
  e4:	80 ff       	sbrs	r24, 0
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <__stack+0x13>
  e8:	60 ff       	sbrs	r22, 0
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <__stack+0x13>

		CLR_BIT(ddrb,0 );
  ec:	93 2f       	mov	r25, r19
  ee:	9e 7f       	andi	r25, 0xFE	; 254
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__stack+0x17>

	} else { 

		// otherwise its an output
		SET_BIT(ddrb ,0 );
  f2:	93 2f       	mov	r25, r19
  f4:	91 60       	ori	r25, 0x01	; 1
	}

// if 76 == 11 then set to don't care (input ) tristate  for PB1
	if( GET_BIT( b2,7 )==1 && GET_BIT( b2,6 )==1 ) {
  f6:	47 ff       	sbrs	r20, 7
  f8:	0a c0       	rjmp	.+20     	; 0x10e <__stack+0x2f>
  fa:	84 2f       	mov	r24, r20
  fc:	82 95       	swap	r24
  fe:	86 95       	lsr	r24
 100:	86 95       	lsr	r24
 102:	83 70       	andi	r24, 0x03	; 3
 104:	80 ff       	sbrs	r24, 0
 106:	03 c0       	rjmp	.+6      	; 0x10e <__stack+0x2f>

		CLR_BIT(ddrb,1 );
 108:	39 2f       	mov	r19, r25
 10a:	3d 7f       	andi	r19, 0xFD	; 253
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__stack+0x33>

	} else { 

		// otherwise its an output
		SET_BIT(ddrb ,1 );
 10e:	39 2f       	mov	r19, r25
 110:	32 60       	ori	r19, 0x02	; 2
	}

// if 54 == 11 then set to don't care (input ) tristate for PB2
	if( GET_BIT( b2,5 )==1 && GET_BIT( b2,4 )==1 ) {
 112:	84 2f       	mov	r24, r20
 114:	82 95       	swap	r24
 116:	86 95       	lsr	r24
 118:	87 70       	andi	r24, 0x07	; 7
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	ec 01       	movw	r28, r24
 11e:	c1 70       	andi	r28, 0x01	; 1
 120:	d0 70       	andi	r29, 0x00	; 0
 122:	80 ff       	sbrs	r24, 0
 124:	07 c0       	rjmp	.+14     	; 0x134 <__stack+0x55>
 126:	84 2f       	mov	r24, r20
 128:	82 95       	swap	r24
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	80 ff       	sbrs	r24, 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__stack+0x55>

		CLR_BIT(ddrb,2 );
 130:	3b 7f       	andi	r19, 0xFB	; 251
 132:	01 c0       	rjmp	.+2      	; 0x136 <__stack+0x57>

	} else { 

		// otherwise its an output
		SET_BIT(ddrb ,2 );
 134:	34 60       	ori	r19, 0x04	; 4
	}

// if 32 == 11 then set to don't care (input ) tristate for PB3
	if( GET_BIT( b2,3 )==1 && GET_BIT( b2,2 )==1 ) {
 136:	84 2f       	mov	r24, r20
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	86 95       	lsr	r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	dc 01       	movw	r26, r24
 142:	a1 70       	andi	r26, 0x01	; 1
 144:	b0 70       	andi	r27, 0x00	; 0
 146:	80 ff       	sbrs	r24, 0
 148:	07 c0       	rjmp	.+14     	; 0x158 <__stack+0x79>
 14a:	84 2f       	mov	r24, r20
 14c:	86 95       	lsr	r24
 14e:	86 95       	lsr	r24
 150:	80 ff       	sbrs	r24, 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <__stack+0x79>

		CLR_BIT(ddrb,3 );
 154:	37 7f       	andi	r19, 0xF7	; 247
 156:	01 c0       	rjmp	.+2      	; 0x15a <__stack+0x7b>

	} else { 

		// otherwise its an output
		SET_BIT(ddrb ,3 );
 158:	38 60       	ori	r19, 0x08	; 8
	}

// if 10 == 11 then set to don't care (input ) tristate for PB4
	if( GET_BIT( b2,1 )==1 && GET_BIT( b2,0 )==1 ) {
 15a:	84 2f       	mov	r24, r20
 15c:	86 95       	lsr	r24
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	e1 70       	andi	r30, 0x01	; 1
 164:	f0 70       	andi	r31, 0x00	; 0
 166:	80 ff       	sbrs	r24, 0
 168:	05 c0       	rjmp	.+10     	; 0x174 <__stack+0x95>
 16a:	40 ff       	sbrs	r20, 0
 16c:	03 c0       	rjmp	.+6      	; 0x174 <__stack+0x95>

		CLR_BIT(ddrb,4 );
 16e:	93 2f       	mov	r25, r19
 170:	9f 7e       	andi	r25, 0xEF	; 239
 172:	02 c0       	rjmp	.+4      	; 0x178 <__stack+0x99>

	} else { 

		// otherwise its an output
		SET_BIT(ddrb ,4 );
 174:	93 2f       	mov	r25, r19
 176:	90 61       	ori	r25, 0x10	; 16
	}

/// all of the DDR's are set

// if 32 == 00 then set to low for PD6
	if( GET_BIT( b1,3 )==0 && GET_BIT( b1,2 )==0 ) {
 178:	85 2f       	mov	r24, r21
 17a:	86 95       	lsr	r24
 17c:	86 95       	lsr	r24
 17e:	86 95       	lsr	r24
 180:	80 ff       	sbrs	r24, 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <__stack+0xa9>
 184:	32 e0       	ldi	r19, 0x02	; 2
 186:	04 c0       	rjmp	.+8      	; 0x190 <__stack+0xb1>
 188:	35 2f       	mov	r19, r21
 18a:	36 95       	lsr	r19
 18c:	36 95       	lsr	r19
 18e:	31 70       	andi	r19, 0x01	; 1
		//SET_BIT(PORTD ,6 );
		portd6 = 1;
	}

// if 10 == 00 then set to low for PB0
	if( GET_BIT( b1,1 )==0 && GET_BIT( b1,0 )==0 ) {
 190:	01 2b       	or	r16, r17
 192:	29 f4       	brne	.+10     	; 0x19e <__stack+0xbf>
 194:	60 fd       	sbrc	r22, 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <__stack+0xbd>

		CLR_BIT(portb,0); //set to off
 198:	2e 7f       	andi	r18, 0xFE	; 254
 19a:	01 c0       	rjmp	.+2      	; 0x19e <__stack+0xbf>

	// if 32 == 01 then set to high for PB0
	} else if( GET_BIT( b1,1 )==0 && GET_BIT( b1,0 )==1 ) { 

		// set to on
		SET_BIT(portb ,0 );
 19c:	21 60       	ori	r18, 0x01	; 1
	}

// if 76 == 00 then set to low for PB1
	if( GET_BIT( b2,7 )==0 && GET_BIT( b2,6 )==0 ) {
 19e:	47 fd       	sbrc	r20, 7
 1a0:	0a c0       	rjmp	.+20     	; 0x1b6 <__stack+0xd7>
 1a2:	84 2f       	mov	r24, r20
 1a4:	82 95       	swap	r24
 1a6:	86 95       	lsr	r24
 1a8:	86 95       	lsr	r24
 1aa:	83 70       	andi	r24, 0x03	; 3
 1ac:	80 fd       	sbrc	r24, 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__stack+0xd5>

		CLR_BIT(portb,1); //set to off
 1b0:	2d 7f       	andi	r18, 0xFD	; 253
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <__stack+0xd7>

	// if 32 == 01 then set to high for PB1
	} else if( GET_BIT( b2,7 )==0 && GET_BIT( b2,6 ) ==1 ) { 

		// set to on
		SET_BIT(portb ,1 );
 1b4:	22 60       	ori	r18, 0x02	; 2
	}


// if 54 == 00 then set to low for PB2
	if( GET_BIT( b2,5 )==0 && GET_BIT( b2,4 )==0 ) {
 1b6:	cd 2b       	or	r28, r29
 1b8:	41 f4       	brne	.+16     	; 0x1ca <__stack+0xeb>
 1ba:	84 2f       	mov	r24, r20
 1bc:	82 95       	swap	r24
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	80 fd       	sbrc	r24, 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__stack+0xe9>

		CLR_BIT(portb,2); //set to off
 1c4:	2b 7f       	andi	r18, 0xFB	; 251
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <__stack+0xeb>

	// if 32 == 01 then set to high for PB2
	} else if( GET_BIT( b2,5 )==0 && GET_BIT( b2,4 )==1 ) { 

		// set to on
		SET_BIT(portb ,2 );
 1c8:	24 60       	ori	r18, 0x04	; 4
	}

// if 32 == 00 then set to low for PB3
	if( GET_BIT( b2,3 )==0 && GET_BIT( b2,2 )==0 ) {
 1ca:	ab 2b       	or	r26, r27
 1cc:	41 f4       	brne	.+16     	; 0x1de <__stack+0xff>
 1ce:	84 2f       	mov	r24, r20
 1d0:	86 95       	lsr	r24
 1d2:	86 95       	lsr	r24
 1d4:	80 fd       	sbrc	r24, 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__stack+0xfd>

		CLR_BIT(portb,3); //set to off
 1d8:	27 7f       	andi	r18, 0xF7	; 247
 1da:	01 c0       	rjmp	.+2      	; 0x1de <__stack+0xff>

	// if 32 == 01 then set to high for PB3
	} else if( GET_BIT( b2,3 ) ==0 && GET_BIT( b2,2 )==1 ) { 

		// set to on
		SET_BIT(portb ,3 );
 1dc:	28 60       	ori	r18, 0x08	; 8
	}

// if 10 == 00 then set to low for PB4
	if( GET_BIT( b2,1 )==0 && GET_BIT( b2,0 )==0 ) {
 1de:	ef 2b       	or	r30, r31
 1e0:	29 f4       	brne	.+10     	; 0x1ec <__stack+0x10d>
 1e2:	40 fd       	sbrc	r20, 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__stack+0x10b>

		CLR_BIT(portb,4); //set to off
 1e6:	2f 7e       	andi	r18, 0xEF	; 239
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <__stack+0x10d>

// if 10 == 01 then set to high for PB4
	} else if( GET_BIT( b2,1)==0 && GET_BIT( b2,0 )==1 ) { 

		// set to on
		SET_BIT(portb ,4 );
 1ea:	20 61       	ori	r18, 0x10	; 16
	}

	//set all at once, stops it from flickering 
	PORTB = portb;
 1ec:	28 bb       	out	0x18, r18	; 24
	DDRB = ddrb;
 1ee:	97 bb       	out	0x17, r25	; 23

	if(portd6 == 1 ) { 
 1f0:	31 30       	cpi	r19, 0x01	; 1
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <__stack+0x119>
	
		SET_BIT(PORTD ,6 );
 1f4:	96 9a       	sbi	0x12, 6	; 18
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <__stack+0x11f>

	} else	if(portd6 == 0 ) {
 1f8:	33 23       	and	r19, r19
 1fa:	09 f4       	brne	.+2      	; 0x1fe <__stack+0x11f>

		CLR_BIT(PORTD,6 ); 
 1fc:	96 98       	cbi	0x12, 6	; 18
	}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <delay_ten_us>:


// This function delays the specified number of 10 microseconds
void delay_ten_us(unsigned long int us) 
{
	us /= 8;
 208:	23 e0       	ldi	r18, 0x03	; 3
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	77 95       	ror	r23
 210:	67 95       	ror	r22
 212:	2a 95       	dec	r18
 214:	d1 f7       	brne	.-12     	; 0x20a <delay_ten_us+0x2>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 216:	32 e0       	ldi	r19, 0x02	; 2
 218:	07 c0       	rjmp	.+14     	; 0x228 <delay_ten_us+0x20>
 21a:	23 2f       	mov	r18, r19
 21c:	2a 95       	dec	r18
 21e:	f1 f7       	brne	.-4      	; 0x21c <delay_ten_us+0x14>

  while (us != 0) {
	_delay_us(10);
    us--;
 220:	61 50       	subi	r22, 0x01	; 1
 222:	70 40       	sbci	r23, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
// This function delays the specified number of 10 microseconds
void delay_ten_us(unsigned long int us) 
{
	us /= 8;

  while (us != 0) {
 228:	61 15       	cp	r22, r1
 22a:	71 05       	cpc	r23, r1
 22c:	81 05       	cpc	r24, r1
 22e:	91 05       	cpc	r25, r1
 230:	a1 f7       	brne	.-24     	; 0x21a <delay_ten_us+0x12>
	_delay_us(10);
    us--;
  }
}
 232:	08 95       	ret

00000234 <main>:

int main(void)
{
 234:	8f 92       	push	r8
 236:	9f 92       	push	r9
 238:	af 92       	push	r10
 23a:	bf 92       	push	r11
 23c:	cf 92       	push	r12
 23e:	df 92       	push	r13
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
	unsigned int x,c;
	unsigned char R,C;
	unsigned short i;

	// setup timer
	TCCR1B = (1 << WGM12) | TIMER1_PRESCALE_1;
 24c:	89 e0       	ldi	r24, 0x09	; 9
 24e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = (uint16_t)1000;
 250:	88 ee       	ldi	r24, 0xE8	; 232
 252:	93 e0       	ldi	r25, 0x03	; 3
 254:	9b bd       	out	0x2b, r25	; 43
 256:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= 1 << OCIE1A;   // Output Compare Interrupt Enable (timer 1, OCR1A) 
 258:	89 b7       	in	r24, 0x39	; 57
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	89 bf       	out	0x39, r24	; 57

//  speaker off (eats power otherwise)
	DDRD = 0xff;
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	81 bb       	out	0x11, r24	; 17
	PIND = 0x0;
 262:	10 ba       	out	0x10, r1	; 16
	PORTD = 0x10; 
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	82 bb       	out	0x12, r24	; 18
	DDRB = 0;
 268:	17 ba       	out	0x17, r1	; 23
	while( 1 ) 
	{

		R = 0;	
		C = 29;			
		for ( X = 0 ; X < 3000/8 ; X++ ) {
 26a:	10 92 67 00 	sts	0x0067, r1
 26e:	10 92 66 00 	sts	0x0066, r1
 272:	00 e0       	ldi	r16, 0x00	; 0
 274:	1c e2       	ldi	r17, 0x2C	; 44
 276:	3e c0       	rjmp	.+124    	; 0x2f4 <main+0xc0>
 278:	c0 e0       	ldi	r28, 0x00	; 0
 27a:	d0 e0       	ldi	r29, 0x00	; 0
			for ( i = 0 ; i < 10 ; i++ ) {
				SetRC(R);	
				SetRC(R+1);	
 27c:	f0 2e       	mov	r15, r16
 27e:	f3 94       	inc	r15
				SetRC(R+2);	
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	89 2e       	mov	r8, r25
 284:	80 0e       	add	r8, r16
				SetRC(R+3);	
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	98 2e       	mov	r9, r24
 28a:	90 0e       	add	r9, r16
				SetRC(R+4);	
 28c:	b4 e0       	ldi	r27, 0x04	; 4
 28e:	ab 2e       	mov	r10, r27
 290:	a0 0e       	add	r10, r16

				SetRC(C+15);	
				SetRC(C+1+15);	
 292:	b1 2e       	mov	r11, r17
 294:	b3 94       	inc	r11
				SetRC(C+2+15);	
 296:	a2 e0       	ldi	r26, 0x02	; 2
 298:	ca 2e       	mov	r12, r26
 29a:	c1 0e       	add	r12, r17
				SetRC(C+3+15);	
 29c:	f3 e0       	ldi	r31, 0x03	; 3
 29e:	df 2e       	mov	r13, r31
 2a0:	d1 0e       	add	r13, r17
				SetRC(C+4+15);	
 2a2:	e4 e0       	ldi	r30, 0x04	; 4
 2a4:	ee 2e       	mov	r14, r30
 2a6:	e1 0e       	add	r14, r17

		R = 0;	
		C = 29;			
		for ( X = 0 ; X < 3000/8 ; X++ ) {
			for ( i = 0 ; i < 10 ; i++ ) {
				SetRC(R);	
 2a8:	80 2f       	mov	r24, r16
 2aa:	f5 de       	rcall	.-534    	; 0x96 <SetRC>
				SetRC(R+1);	
 2ac:	8f 2d       	mov	r24, r15
 2ae:	f3 de       	rcall	.-538    	; 0x96 <SetRC>
				SetRC(R+2);	
 2b0:	88 2d       	mov	r24, r8
 2b2:	f1 de       	rcall	.-542    	; 0x96 <SetRC>
				SetRC(R+3);	
 2b4:	89 2d       	mov	r24, r9
 2b6:	ef de       	rcall	.-546    	; 0x96 <SetRC>
				SetRC(R+4);	
 2b8:	8a 2d       	mov	r24, r10
 2ba:	ed de       	rcall	.-550    	; 0x96 <SetRC>

				SetRC(C+15);	
 2bc:	81 2f       	mov	r24, r17
 2be:	eb de       	rcall	.-554    	; 0x96 <SetRC>
				SetRC(C+1+15);	
 2c0:	8b 2d       	mov	r24, r11
 2c2:	e9 de       	rcall	.-558    	; 0x96 <SetRC>
				SetRC(C+2+15);	
 2c4:	8c 2d       	mov	r24, r12
 2c6:	e7 de       	rcall	.-562    	; 0x96 <SetRC>
				SetRC(C+3+15);	
 2c8:	8d 2d       	mov	r24, r13
 2ca:	e5 de       	rcall	.-566    	; 0x96 <SetRC>
				SetRC(C+4+15);	
 2cc:	8e 2d       	mov	r24, r14
 2ce:	e3 de       	rcall	.-570    	; 0x96 <SetRC>
	{

		R = 0;	
		C = 29;			
		for ( X = 0 ; X < 3000/8 ; X++ ) {
			for ( i = 0 ; i < 10 ; i++ ) {
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	ca 30       	cpi	r28, 0x0A	; 10
 2d4:	d1 05       	cpc	r29, r1
 2d6:	41 f7       	brne	.-48     	; 0x2a8 <main+0x74>
				SetRC(C+3+15);	
				SetRC(C+4+15);	
			}

			R++;
			R%=30;
 2d8:	8f 2d       	mov	r24, r15
 2da:	6e e1       	ldi	r22, 0x1E	; 30
 2dc:	64 d1       	rcall	.+712    	; 0x5a6 <__udivmodqi4>
 2de:	09 2f       	mov	r16, r25
	while( 1 ) 
	{

		R = 0;	
		C = 29;			
		for ( X = 0 ; X < 3000/8 ; X++ ) {
 2e0:	80 91 66 00 	lds	r24, 0x0066
 2e4:	90 91 67 00 	lds	r25, 0x0067
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	90 93 67 00 	sts	0x0067, r25
 2ee:	80 93 66 00 	sts	0x0066, r24
 2f2:	11 50       	subi	r17, 0x01	; 1
 2f4:	80 91 66 00 	lds	r24, 0x0066
 2f8:	90 91 67 00 	lds	r25, 0x0067
 2fc:	87 57       	subi	r24, 0x77	; 119
 2fe:	91 40       	sbci	r25, 0x01	; 1
 300:	08 f4       	brcc	.+2      	; 0x304 <main+0xd0>
 302:	ba cf       	rjmp	.-140    	; 0x278 <main+0x44>
			if( c == 0 ) c = 29;
		}

		R= 0 ;

		for ( X = 0 ; X < 3000/8 ; X++ ) {
 304:	10 92 67 00 	sts	0x0067, r1
 308:	10 92 66 00 	sts	0x0066, r1
 30c:	ff 24       	eor	r15, r15
 30e:	29 c0       	rjmp	.+82     	; 0x362 <main+0x12e>
 310:	00 e0       	ldi	r16, 0x00	; 0
 312:	10 e0       	ldi	r17, 0x00	; 0
			for ( i = 0 ; i < 10 ; i++ ) {
				SetRC(R);	
				SetRC(R+1);	
 314:	ef 2c       	mov	r14, r15
 316:	e3 94       	inc	r14
				SetRC(R+2);	
 318:	72 e0       	ldi	r23, 0x02	; 2
 31a:	b7 2e       	mov	r11, r23
 31c:	bf 0c       	add	r11, r15
				SetRC(R+3);	
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	c6 2e       	mov	r12, r22
 322:	cf 0c       	add	r12, r15
				SetRC(R+4);	
 324:	54 e0       	ldi	r21, 0x04	; 4
 326:	d5 2e       	mov	r13, r21
 328:	df 0c       	add	r13, r15

		R= 0 ;

		for ( X = 0 ; X < 3000/8 ; X++ ) {
			for ( i = 0 ; i < 10 ; i++ ) {
				SetRC(R);	
 32a:	8f 2d       	mov	r24, r15
 32c:	b4 de       	rcall	.-664    	; 0x96 <SetRC>
				SetRC(R+1);	
 32e:	8e 2d       	mov	r24, r14
 330:	b2 de       	rcall	.-668    	; 0x96 <SetRC>
				SetRC(R+2);	
 332:	8b 2d       	mov	r24, r11
 334:	b0 de       	rcall	.-672    	; 0x96 <SetRC>
				SetRC(R+3);	
 336:	8c 2d       	mov	r24, r12
 338:	ae de       	rcall	.-676    	; 0x96 <SetRC>
				SetRC(R+4);	
 33a:	8d 2d       	mov	r24, r13
 33c:	ac de       	rcall	.-680    	; 0x96 <SetRC>
		}

		R= 0 ;

		for ( X = 0 ; X < 3000/8 ; X++ ) {
			for ( i = 0 ; i < 10 ; i++ ) {
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	0a 30       	cpi	r16, 0x0A	; 10
 344:	11 05       	cpc	r17, r1
 346:	89 f7       	brne	.-30     	; 0x32a <main+0xf6>
				SetRC(R+3);	
				SetRC(R+4);	
			}

			R++;
			R%=30;
 348:	8e 2d       	mov	r24, r14
 34a:	6e e1       	ldi	r22, 0x1E	; 30
 34c:	2c d1       	rcall	.+600    	; 0x5a6 <__udivmodqi4>
 34e:	f9 2e       	mov	r15, r25
			if( c == 0 ) c = 29;
		}

		R= 0 ;

		for ( X = 0 ; X < 3000/8 ; X++ ) {
 350:	80 91 66 00 	lds	r24, 0x0066
 354:	90 91 67 00 	lds	r25, 0x0067
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	90 93 67 00 	sts	0x0067, r25
 35e:	80 93 66 00 	sts	0x0066, r24
 362:	80 91 66 00 	lds	r24, 0x0066
 366:	90 91 67 00 	lds	r25, 0x0067
 36a:	87 57       	subi	r24, 0x77	; 119
 36c:	91 40       	sbci	r25, 0x01	; 1
 36e:	80 f2       	brcs	.-96     	; 0x310 <main+0xdc>
		}

		x = 30;

	c=0;
		for ( X = 0 ; X < 5000/8 ; X++ )  {
 370:	10 92 67 00 	sts	0x0067, r1
 374:	10 92 66 00 	sts	0x0066, r1
 378:	ce e1       	ldi	r28, 0x1E	; 30
 37a:	d0 e0       	ldi	r29, 0x00	; 0
 37c:	cc 24       	eor	r12, r12
 37e:	dd 24       	eor	r13, r13
 380:	26 c0       	rjmp	.+76     	; 0x3ce <main+0x19a>
			x--;
 382:	21 97       	sbiw	r28, 0x01	; 1
			if (x== 0 ) x =29;
 384:	11 f4       	brne	.+4      	; 0x38a <main+0x156>
 386:	cd e1       	ldi	r28, 0x1D	; 29
 388:	d0 e0       	ldi	r29, 0x00	; 0
 38a:	00 e0       	ldi	r16, 0x00	; 0
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	13 c0       	rjmp	.+38     	; 0x3b6 <main+0x182>

			for ( i = 0 ; i < 10 ; i++ ) {
				for ( R= 0 ; R < x ; R ++ ) 
				{
					SetRC(c+R);
 390:	8e 2d       	mov	r24, r14
 392:	81 de       	rcall	.-766    	; 0x96 <SetRC>
		for ( X = 0 ; X < 5000/8 ; X++ )  {
			x--;
			if (x== 0 ) x =29;

			for ( i = 0 ; i < 10 ; i++ ) {
				for ( R= 0 ; R < x ; R ++ ) 
 394:	f3 94       	inc	r15
 396:	e3 94       	inc	r14
 398:	8f 2d       	mov	r24, r15
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	8c 17       	cp	r24, r28
 39e:	9d 07       	cpc	r25, r29
 3a0:	b8 f3       	brcs	.-18     	; 0x390 <main+0x15c>
				{
					SetRC(c+R);
					
				}
				if( i&1 == 1 ) 
 3a2:	00 ff       	sbrs	r16, 0
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <main+0x178>
				c++;
 3a6:	08 94       	sec
 3a8:	c1 1c       	adc	r12, r1
 3aa:	d1 1c       	adc	r13, r1
	c=0;
		for ( X = 0 ; X < 5000/8 ; X++ )  {
			x--;
			if (x== 0 ) x =29;

			for ( i = 0 ; i < 10 ; i++ ) {
 3ac:	0f 5f       	subi	r16, 0xFF	; 255
 3ae:	1f 4f       	sbci	r17, 0xFF	; 255
 3b0:	0a 30       	cpi	r16, 0x0A	; 10
 3b2:	11 05       	cpc	r17, r1
 3b4:	19 f0       	breq	.+6      	; 0x3bc <main+0x188>
 3b6:	ec 2c       	mov	r14, r12
 3b8:	ff 24       	eor	r15, r15
 3ba:	ee cf       	rjmp	.-36     	; 0x398 <main+0x164>
		}

		x = 30;

	c=0;
		for ( X = 0 ; X < 5000/8 ; X++ )  {
 3bc:	80 91 66 00 	lds	r24, 0x0066
 3c0:	90 91 67 00 	lds	r25, 0x0067
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	90 93 67 00 	sts	0x0067, r25
 3ca:	80 93 66 00 	sts	0x0066, r24
 3ce:	80 91 66 00 	lds	r24, 0x0066
 3d2:	90 91 67 00 	lds	r25, 0x0067
 3d6:	81 57       	subi	r24, 0x71	; 113
 3d8:	92 40       	sbci	r25, 0x02	; 2
 3da:	98 f2       	brcs	.-90     	; 0x382 <main+0x14e>
				c++;

			}
		}

		for ( X = 0 ; X < 10 ; X++ ) 
 3dc:	10 92 67 00 	sts	0x0067, r1
 3e0:	10 92 66 00 	sts	0x0066, r1
 3e4:	21 c0       	rjmp	.+66     	; 0x428 <main+0x1f4>
 3e6:	dd 24       	eor	r13, r13
 3e8:	40 eb       	ldi	r20, 0xB0	; 176
 3ea:	e4 2e       	mov	r14, r20
 3ec:	44 e0       	ldi	r20, 0x04	; 4
 3ee:	f4 2e       	mov	r15, r20
 3f0:	01 2d       	mov	r16, r1
 3f2:	11 2d       	mov	r17, r1
			for ( R= 0 ; R < 30 ; R ++ ) 
			{

				SetRC(R);
 3f4:	8d 2d       	mov	r24, r13
 3f6:	4f de       	rcall	.-866    	; 0x96 <SetRC>
				i = 200*(((R+1)*6));
				delay_ten_us(i);
 3f8:	c8 01       	movw	r24, r16
 3fa:	b7 01       	movw	r22, r14
 3fc:	05 df       	rcall	.-502    	; 0x208 <delay_ten_us>

			}
		}

		for ( X = 0 ; X < 10 ; X++ ) 
			for ( R= 0 ; R < 30 ; R ++ ) 
 3fe:	d3 94       	inc	r13
 400:	80 eb       	ldi	r24, 0xB0	; 176
 402:	94 e0       	ldi	r25, 0x04	; 4
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e8 0e       	add	r14, r24
 40a:	f9 1e       	adc	r15, r25
 40c:	0a 1f       	adc	r16, r26
 40e:	1b 1f       	adc	r17, r27
 410:	9e e1       	ldi	r25, 0x1E	; 30
 412:	d9 16       	cp	r13, r25
 414:	79 f7       	brne	.-34     	; 0x3f4 <main+0x1c0>
				c++;

			}
		}

		for ( X = 0 ; X < 10 ; X++ ) 
 416:	80 91 66 00 	lds	r24, 0x0066
 41a:	90 91 67 00 	lds	r25, 0x0067
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	90 93 67 00 	sts	0x0067, r25
 424:	80 93 66 00 	sts	0x0066, r24
 428:	80 91 66 00 	lds	r24, 0x0066
 42c:	90 91 67 00 	lds	r25, 0x0067
 430:	0a 97       	sbiw	r24, 0x0a	; 10
 432:	c8 f2       	brcs	.-78     	; 0x3e6 <main+0x1b2>
				i = 200*(((R+1)*6));
				delay_ten_us(i);

			}

		for ( X = 0 ; X < 10 ; X++ ) 
 434:	10 92 67 00 	sts	0x0067, r1
 438:	10 92 66 00 	sts	0x0066, r1
 43c:	21 c0       	rjmp	.+66     	; 0x480 <main+0x24c>
 43e:	dd 24       	eor	r13, r13
 440:	30 eb       	ldi	r19, 0xB0	; 176
 442:	e3 2e       	mov	r14, r19
 444:	34 e0       	ldi	r19, 0x04	; 4
 446:	f3 2e       	mov	r15, r19
 448:	01 2d       	mov	r16, r1
 44a:	11 2d       	mov	r17, r1
			for ( R= 0 ; R < 30 ; R ++ ) 
			{
				SetRC(R);
 44c:	8d 2d       	mov	r24, r13
 44e:	23 de       	rcall	.-954    	; 0x96 <SetRC>
				i = 200*(((R+1)*6));
				delay_ten_us(i);
 450:	c8 01       	movw	r24, r16
 452:	b7 01       	movw	r22, r14
 454:	d9 de       	rcall	.-590    	; 0x208 <delay_ten_us>
				delay_ten_us(i);

			}

		for ( X = 0 ; X < 10 ; X++ ) 
			for ( R= 0 ; R < 30 ; R ++ ) 
 456:	d3 94       	inc	r13
 458:	80 eb       	ldi	r24, 0xB0	; 176
 45a:	94 e0       	ldi	r25, 0x04	; 4
 45c:	a0 e0       	ldi	r26, 0x00	; 0
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e8 0e       	add	r14, r24
 462:	f9 1e       	adc	r15, r25
 464:	0a 1f       	adc	r16, r26
 466:	1b 1f       	adc	r17, r27
 468:	9e e1       	ldi	r25, 0x1E	; 30
 46a:	d9 16       	cp	r13, r25
 46c:	79 f7       	brne	.-34     	; 0x44c <main+0x218>
				i = 200*(((R+1)*6));
				delay_ten_us(i);

			}

		for ( X = 0 ; X < 10 ; X++ ) 
 46e:	80 91 66 00 	lds	r24, 0x0066
 472:	90 91 67 00 	lds	r25, 0x0067
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	90 93 67 00 	sts	0x0067, r25
 47c:	80 93 66 00 	sts	0x0066, r24
 480:	80 91 66 00 	lds	r24, 0x0066
 484:	90 91 67 00 	lds	r25, 0x0067
 488:	0a 97       	sbiw	r24, 0x0a	; 10
 48a:	c8 f2       	brcs	.-78     	; 0x43e <main+0x20a>
				SetRC(R);
				i = 200*(((R+1)*6));
				delay_ten_us(i);
			}
		
		for ( X = 0 ; X < 5000/8 ; X++ ) 
 48c:	10 92 67 00 	sts	0x0067, r1
 490:	10 92 66 00 	sts	0x0066, r1
 494:	0f c0       	rjmp	.+30     	; 0x4b4 <main+0x280>
 496:	10 e0       	ldi	r17, 0x00	; 0
			for ( R= 0 ; R < 30 ; R ++ ) 
			{


				SetRC(R);	
 498:	81 2f       	mov	r24, r17
 49a:	fd dd       	rcall	.-1030   	; 0x96 <SetRC>
				i = 200*(((R+1)*6));
				delay_ten_us(i);
			}
		
		for ( X = 0 ; X < 5000/8 ; X++ ) 
			for ( R= 0 ; R < 30 ; R ++ ) 
 49c:	1f 5f       	subi	r17, 0xFF	; 255
 49e:	1e 31       	cpi	r17, 0x1E	; 30
 4a0:	d9 f7       	brne	.-10     	; 0x498 <main+0x264>
				SetRC(R);
				i = 200*(((R+1)*6));
				delay_ten_us(i);
			}
		
		for ( X = 0 ; X < 5000/8 ; X++ ) 
 4a2:	80 91 66 00 	lds	r24, 0x0066
 4a6:	90 91 67 00 	lds	r25, 0x0067
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	90 93 67 00 	sts	0x0067, r25
 4b0:	80 93 66 00 	sts	0x0066, r24
 4b4:	80 91 66 00 	lds	r24, 0x0066
 4b8:	90 91 67 00 	lds	r25, 0x0067
 4bc:	81 57       	subi	r24, 0x71	; 113
 4be:	92 40       	sbci	r25, 0x02	; 2
 4c0:	50 f3       	brcs	.-44     	; 0x496 <main+0x262>

				SetRC(R);	
				
			}
		
		for ( X = 0 ; X < 5000/8 ; X++ ) 
 4c2:	10 92 67 00 	sts	0x0067, r1
 4c6:	10 92 66 00 	sts	0x0066, r1
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <main+0x2b4>
			SetRC(rand()%30);	
 4cc:	e9 d0       	rcall	.+466    	; 0x6a0 <rand>
 4ce:	6e e1       	ldi	r22, 0x1E	; 30
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	75 d0       	rcall	.+234    	; 0x5be <__divmodhi4>
 4d4:	e0 dd       	rcall	.-1088   	; 0x96 <SetRC>

				SetRC(R);	
				
			}
		
		for ( X = 0 ; X < 5000/8 ; X++ ) 
 4d6:	80 91 66 00 	lds	r24, 0x0066
 4da:	90 91 67 00 	lds	r25, 0x0067
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	90 93 67 00 	sts	0x0067, r25
 4e4:	80 93 66 00 	sts	0x0066, r24
 4e8:	80 91 66 00 	lds	r24, 0x0066
 4ec:	90 91 67 00 	lds	r25, 0x0067
 4f0:	81 57       	subi	r24, 0x71	; 113
 4f2:	92 40       	sbci	r25, 0x02	; 2
 4f4:	08 f0       	brcs	.+2      	; 0x4f8 <main+0x2c4>
 4f6:	b9 ce       	rjmp	.-654    	; 0x26a <main+0x36>
 4f8:	e9 cf       	rjmp	.-46     	; 0x4cc <main+0x298>

000004fa <__vector_4>:



// Speaker drive interrupt
SIGNAL( SIG_TIMER1_COMPA ) 
{
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
	// toggle speaker on/off
	//SWITCH_BIT( PORTD , 4 );

	X += XDIR;
 520:	80 91 60 00 	lds	r24, 0x0060
 524:	28 2f       	mov	r18, r24
 526:	33 27       	eor	r19, r19
 528:	27 fd       	sbrc	r18, 7
 52a:	30 95       	com	r19
 52c:	80 91 66 00 	lds	r24, 0x0066
 530:	90 91 67 00 	lds	r25, 0x0067
 534:	28 0f       	add	r18, r24
 536:	39 1f       	adc	r19, r25
 538:	30 93 67 00 	sts	0x0067, r19
 53c:	20 93 66 00 	sts	0x0066, r18

	if (X > 10000 ) { 
 540:	87 e2       	ldi	r24, 0x27	; 39
 542:	21 31       	cpi	r18, 0x11	; 17
 544:	38 07       	cpc	r19, r24
 546:	30 f0       	brcs	.+12     	; 0x554 <__vector_4+0x5a>
		XDIR = -((rand()%9)+1);
 548:	ab d0       	rcall	.+342    	; 0x6a0 <rand>
 54a:	69 e0       	ldi	r22, 0x09	; 9
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	37 d0       	rcall	.+110    	; 0x5be <__divmodhi4>
 550:	80 95       	com	r24
 552:	08 c0       	rjmp	.+16     	; 0x564 <__vector_4+0x6a>
	} else if ( X < 20) {
 554:	24 31       	cpi	r18, 0x14	; 20
 556:	31 05       	cpc	r19, r1
 558:	38 f4       	brcc	.+14     	; 0x568 <__vector_4+0x6e>
		XDIR = ((rand()%9)+1);
 55a:	a2 d0       	rcall	.+324    	; 0x6a0 <rand>
 55c:	69 e0       	ldi	r22, 0x09	; 9
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	2e d0       	rcall	.+92     	; 0x5be <__divmodhi4>
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 60 00 	sts	0x0060, r24
	}

	OCR1A = X+(rand()%100);
 568:	00 91 66 00 	lds	r16, 0x0066
 56c:	10 91 67 00 	lds	r17, 0x0067
 570:	97 d0       	rcall	.+302    	; 0x6a0 <rand>
 572:	64 e6       	ldi	r22, 0x64	; 100
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	23 d0       	rcall	.+70     	; 0x5be <__divmodhi4>
 578:	08 0f       	add	r16, r24
 57a:	19 1f       	adc	r17, r25
 57c:	1b bd       	out	0x2b, r17	; 43
 57e:	0a bd       	out	0x2a, r16	; 42
}
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__udivmodqi4>:
 5a6:	99 1b       	sub	r25, r25
 5a8:	79 e0       	ldi	r23, 0x09	; 9
 5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <__udivmodqi4_ep>

000005ac <__udivmodqi4_loop>:
 5ac:	99 1f       	adc	r25, r25
 5ae:	96 17       	cp	r25, r22
 5b0:	08 f0       	brcs	.+2      	; 0x5b4 <__udivmodqi4_ep>
 5b2:	96 1b       	sub	r25, r22

000005b4 <__udivmodqi4_ep>:
 5b4:	88 1f       	adc	r24, r24
 5b6:	7a 95       	dec	r23
 5b8:	c9 f7       	brne	.-14     	; 0x5ac <__udivmodqi4_loop>
 5ba:	80 95       	com	r24
 5bc:	08 95       	ret

000005be <__divmodhi4>:
 5be:	97 fb       	bst	r25, 7
 5c0:	09 2e       	mov	r0, r25
 5c2:	07 26       	eor	r0, r23
 5c4:	0a d0       	rcall	.+20     	; 0x5da <__divmodhi4_neg1>
 5c6:	77 fd       	sbrc	r23, 7
 5c8:	04 d0       	rcall	.+8      	; 0x5d2 <__divmodhi4_neg2>
 5ca:	0c d0       	rcall	.+24     	; 0x5e4 <__udivmodhi4>
 5cc:	06 d0       	rcall	.+12     	; 0x5da <__divmodhi4_neg1>
 5ce:	00 20       	and	r0, r0
 5d0:	1a f4       	brpl	.+6      	; 0x5d8 <__divmodhi4_exit>

000005d2 <__divmodhi4_neg2>:
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255

000005d8 <__divmodhi4_exit>:
 5d8:	08 95       	ret

000005da <__divmodhi4_neg1>:
 5da:	f6 f7       	brtc	.-4      	; 0x5d8 <__divmodhi4_exit>
 5dc:	90 95       	com	r25
 5de:	81 95       	neg	r24
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

000005e4 <__udivmodhi4>:
 5e4:	aa 1b       	sub	r26, r26
 5e6:	bb 1b       	sub	r27, r27
 5e8:	51 e1       	ldi	r21, 0x11	; 17
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <__udivmodhi4_ep>

000005ec <__udivmodhi4_loop>:
 5ec:	aa 1f       	adc	r26, r26
 5ee:	bb 1f       	adc	r27, r27
 5f0:	a6 17       	cp	r26, r22
 5f2:	b7 07       	cpc	r27, r23
 5f4:	10 f0       	brcs	.+4      	; 0x5fa <__udivmodhi4_ep>
 5f6:	a6 1b       	sub	r26, r22
 5f8:	b7 0b       	sbc	r27, r23

000005fa <__udivmodhi4_ep>:
 5fa:	88 1f       	adc	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	5a 95       	dec	r21
 600:	a9 f7       	brne	.-22     	; 0x5ec <__udivmodhi4_loop>
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	bc 01       	movw	r22, r24
 608:	cd 01       	movw	r24, r26
 60a:	08 95       	ret

0000060c <do_rand>:
 60c:	a0 e0       	ldi	r26, 0x00	; 0
 60e:	b0 e0       	ldi	r27, 0x00	; 0
 610:	eb e0       	ldi	r30, 0x0B	; 11
 612:	f3 e0       	ldi	r31, 0x03	; 3
 614:	90 c0       	rjmp	.+288    	; 0x736 <__prologue_saves__+0x10>
 616:	ec 01       	movw	r28, r24
 618:	a8 80       	ld	r10, Y
 61a:	b9 80       	ldd	r11, Y+1	; 0x01
 61c:	ca 80       	ldd	r12, Y+2	; 0x02
 61e:	db 80       	ldd	r13, Y+3	; 0x03
 620:	a1 14       	cp	r10, r1
 622:	b1 04       	cpc	r11, r1
 624:	c1 04       	cpc	r12, r1
 626:	d1 04       	cpc	r13, r1
 628:	41 f4       	brne	.+16     	; 0x63a <do_rand+0x2e>
 62a:	84 e2       	ldi	r24, 0x24	; 36
 62c:	a8 2e       	mov	r10, r24
 62e:	89 ed       	ldi	r24, 0xD9	; 217
 630:	b8 2e       	mov	r11, r24
 632:	8b e5       	ldi	r24, 0x5B	; 91
 634:	c8 2e       	mov	r12, r24
 636:	87 e0       	ldi	r24, 0x07	; 7
 638:	d8 2e       	mov	r13, r24
 63a:	c6 01       	movw	r24, r12
 63c:	b5 01       	movw	r22, r10
 63e:	2d e1       	ldi	r18, 0x1D	; 29
 640:	33 ef       	ldi	r19, 0xF3	; 243
 642:	41 e0       	ldi	r20, 0x01	; 1
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	54 d0       	rcall	.+168    	; 0x6f0 <__divmodsi4>
 648:	27 ea       	ldi	r18, 0xA7	; 167
 64a:	31 e4       	ldi	r19, 0x41	; 65
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	36 d0       	rcall	.+108    	; 0x6be <__mulsi3>
 652:	7b 01       	movw	r14, r22
 654:	8c 01       	movw	r16, r24
 656:	c6 01       	movw	r24, r12
 658:	b5 01       	movw	r22, r10
 65a:	2d e1       	ldi	r18, 0x1D	; 29
 65c:	33 ef       	ldi	r19, 0xF3	; 243
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	46 d0       	rcall	.+140    	; 0x6f0 <__divmodsi4>
 664:	ca 01       	movw	r24, r20
 666:	b9 01       	movw	r22, r18
 668:	2c ee       	ldi	r18, 0xEC	; 236
 66a:	34 ef       	ldi	r19, 0xF4	; 244
 66c:	4f ef       	ldi	r20, 0xFF	; 255
 66e:	5f ef       	ldi	r21, 0xFF	; 255
 670:	26 d0       	rcall	.+76     	; 0x6be <__mulsi3>
 672:	6e 0d       	add	r22, r14
 674:	7f 1d       	adc	r23, r15
 676:	80 1f       	adc	r24, r16
 678:	91 1f       	adc	r25, r17
 67a:	97 ff       	sbrs	r25, 7
 67c:	04 c0       	rjmp	.+8      	; 0x686 <do_rand+0x7a>
 67e:	61 50       	subi	r22, 0x01	; 1
 680:	70 40       	sbci	r23, 0x00	; 0
 682:	80 40       	sbci	r24, 0x00	; 0
 684:	90 48       	sbci	r25, 0x80	; 128
 686:	68 83       	st	Y, r22
 688:	79 83       	std	Y+1, r23	; 0x01
 68a:	8a 83       	std	Y+2, r24	; 0x02
 68c:	9b 83       	std	Y+3, r25	; 0x03
 68e:	9b 01       	movw	r18, r22
 690:	3f 77       	andi	r19, 0x7F	; 127
 692:	c9 01       	movw	r24, r18
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	ea e0       	ldi	r30, 0x0A	; 10
 69a:	69 c0       	rjmp	.+210    	; 0x76e <__epilogue_restores__+0x10>

0000069c <rand_r>:
 69c:	b7 df       	rcall	.-146    	; 0x60c <do_rand>
 69e:	08 95       	ret

000006a0 <rand>:
 6a0:	81 e6       	ldi	r24, 0x61	; 97
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	b3 df       	rcall	.-154    	; 0x60c <do_rand>
 6a6:	08 95       	ret

000006a8 <srand>:
 6a8:	a0 e0       	ldi	r26, 0x00	; 0
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	80 93 61 00 	sts	0x0061, r24
 6b0:	90 93 62 00 	sts	0x0062, r25
 6b4:	a0 93 63 00 	sts	0x0063, r26
 6b8:	b0 93 64 00 	sts	0x0064, r27
 6bc:	08 95       	ret

000006be <__mulsi3>:
 6be:	ff 27       	eor	r31, r31
 6c0:	ee 27       	eor	r30, r30
 6c2:	bb 27       	eor	r27, r27
 6c4:	aa 27       	eor	r26, r26

000006c6 <__mulsi3_loop>:
 6c6:	60 ff       	sbrs	r22, 0
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <__mulsi3_skip1>
 6ca:	a2 0f       	add	r26, r18
 6cc:	b3 1f       	adc	r27, r19
 6ce:	e4 1f       	adc	r30, r20
 6d0:	f5 1f       	adc	r31, r21

000006d2 <__mulsi3_skip1>:
 6d2:	22 0f       	add	r18, r18
 6d4:	33 1f       	adc	r19, r19
 6d6:	44 1f       	adc	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	96 95       	lsr	r25
 6dc:	87 95       	ror	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	89 f7       	brne	.-30     	; 0x6c6 <__mulsi3_loop>
 6e4:	00 97       	sbiw	r24, 0x00	; 0
 6e6:	76 07       	cpc	r23, r22
 6e8:	71 f7       	brne	.-36     	; 0x6c6 <__mulsi3_loop>

000006ea <__mulsi3_exit>:
 6ea:	cf 01       	movw	r24, r30
 6ec:	bd 01       	movw	r22, r26
 6ee:	08 95       	ret

000006f0 <__divmodsi4>:
 6f0:	97 fb       	bst	r25, 7
 6f2:	09 2e       	mov	r0, r25
 6f4:	05 26       	eor	r0, r21
 6f6:	0e d0       	rcall	.+28     	; 0x714 <__divmodsi4_neg1>
 6f8:	57 fd       	sbrc	r21, 7
 6fa:	04 d0       	rcall	.+8      	; 0x704 <__divmodsi4_neg2>
 6fc:	4b d0       	rcall	.+150    	; 0x794 <__udivmodsi4>
 6fe:	0a d0       	rcall	.+20     	; 0x714 <__divmodsi4_neg1>
 700:	00 1c       	adc	r0, r0
 702:	38 f4       	brcc	.+14     	; 0x712 <__divmodsi4_exit>

00000704 <__divmodsi4_neg2>:
 704:	50 95       	com	r21
 706:	40 95       	com	r20
 708:	30 95       	com	r19
 70a:	21 95       	neg	r18
 70c:	3f 4f       	sbci	r19, 0xFF	; 255
 70e:	4f 4f       	sbci	r20, 0xFF	; 255
 710:	5f 4f       	sbci	r21, 0xFF	; 255

00000712 <__divmodsi4_exit>:
 712:	08 95       	ret

00000714 <__divmodsi4_neg1>:
 714:	f6 f7       	brtc	.-4      	; 0x712 <__divmodsi4_exit>
 716:	90 95       	com	r25
 718:	80 95       	com	r24
 71a:	70 95       	com	r23
 71c:	61 95       	neg	r22
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	8f 4f       	sbci	r24, 0xFF	; 255
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	08 95       	ret

00000726 <__prologue_saves__>:
 726:	2f 92       	push	r2
 728:	3f 92       	push	r3
 72a:	4f 92       	push	r4
 72c:	5f 92       	push	r5
 72e:	6f 92       	push	r6
 730:	7f 92       	push	r7
 732:	8f 92       	push	r8
 734:	9f 92       	push	r9
 736:	af 92       	push	r10
 738:	bf 92       	push	r11
 73a:	cf 92       	push	r12
 73c:	df 92       	push	r13
 73e:	ef 92       	push	r14
 740:	ff 92       	push	r15
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	ca 1b       	sub	r28, r26
 750:	db 0b       	sbc	r29, r27
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	09 94       	ijmp

0000075e <__epilogue_restores__>:
 75e:	2a 88       	ldd	r2, Y+18	; 0x12
 760:	39 88       	ldd	r3, Y+17	; 0x11
 762:	48 88       	ldd	r4, Y+16	; 0x10
 764:	5f 84       	ldd	r5, Y+15	; 0x0f
 766:	6e 84       	ldd	r6, Y+14	; 0x0e
 768:	7d 84       	ldd	r7, Y+13	; 0x0d
 76a:	8c 84       	ldd	r8, Y+12	; 0x0c
 76c:	9b 84       	ldd	r9, Y+11	; 0x0b
 76e:	aa 84       	ldd	r10, Y+10	; 0x0a
 770:	b9 84       	ldd	r11, Y+9	; 0x09
 772:	c8 84       	ldd	r12, Y+8	; 0x08
 774:	df 80       	ldd	r13, Y+7	; 0x07
 776:	ee 80       	ldd	r14, Y+6	; 0x06
 778:	fd 80       	ldd	r15, Y+5	; 0x05
 77a:	0c 81       	ldd	r16, Y+4	; 0x04
 77c:	1b 81       	ldd	r17, Y+3	; 0x03
 77e:	aa 81       	ldd	r26, Y+2	; 0x02
 780:	b9 81       	ldd	r27, Y+1	; 0x01
 782:	ce 0f       	add	r28, r30
 784:	d1 1d       	adc	r29, r1
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	ed 01       	movw	r28, r26
 792:	08 95       	ret

00000794 <__udivmodsi4>:
 794:	a1 e2       	ldi	r26, 0x21	; 33
 796:	1a 2e       	mov	r1, r26
 798:	aa 1b       	sub	r26, r26
 79a:	bb 1b       	sub	r27, r27
 79c:	fd 01       	movw	r30, r26
 79e:	0d c0       	rjmp	.+26     	; 0x7ba <__udivmodsi4_ep>

000007a0 <__udivmodsi4_loop>:
 7a0:	aa 1f       	adc	r26, r26
 7a2:	bb 1f       	adc	r27, r27
 7a4:	ee 1f       	adc	r30, r30
 7a6:	ff 1f       	adc	r31, r31
 7a8:	a2 17       	cp	r26, r18
 7aa:	b3 07       	cpc	r27, r19
 7ac:	e4 07       	cpc	r30, r20
 7ae:	f5 07       	cpc	r31, r21
 7b0:	20 f0       	brcs	.+8      	; 0x7ba <__udivmodsi4_ep>
 7b2:	a2 1b       	sub	r26, r18
 7b4:	b3 0b       	sbc	r27, r19
 7b6:	e4 0b       	sbc	r30, r20
 7b8:	f5 0b       	sbc	r31, r21

000007ba <__udivmodsi4_ep>:
 7ba:	66 1f       	adc	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	1a 94       	dec	r1
 7c4:	69 f7       	brne	.-38     	; 0x7a0 <__udivmodsi4_loop>
 7c6:	60 95       	com	r22
 7c8:	70 95       	com	r23
 7ca:	80 95       	com	r24
 7cc:	90 95       	com	r25
 7ce:	9b 01       	movw	r18, r22
 7d0:	ac 01       	movw	r20, r24
 7d2:	bd 01       	movw	r22, r26
 7d4:	cf 01       	movw	r24, r30
 7d6:	08 95       	ret

000007d8 <_exit>:
 7d8:	f8 94       	cli

000007da <__stop_program>:
 7da:	ff cf       	rjmp	.-2      	; 0x7da <__stop_program>
