
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000062e0  00006374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000062e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f2  00800206  00800206  0000637a  2**0
                  ALLOC
  3 .debug_aranges 00000688  00000000  00000000  0000637a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ccd  00000000  00000000  00006a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000540d  00000000  00000000  000076cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bdb  00000000  00000000  0000cadc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004d10  00000000  00000000  0000e6b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ab0  00000000  00000000  000133c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001622  00000000  00000000  00013e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000353b  00000000  00000000  0001549a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ba8  00000000  00000000  000189d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 27 03 	jmp	0x64e	; 0x64e <__ctors_end>
       4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
       8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
       c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      10:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      14:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      18:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      1c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      20:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      24:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      28:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      2c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      30:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      34:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      38:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      3c:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__vector_15>
      40:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      44:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <__vector_17>
      48:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      4c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      50:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      54:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      58:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      5c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      60:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      64:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__vector_25>
      68:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      6c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      70:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      74:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      78:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      7c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      80:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <__vector_32>
      84:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      88:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      8c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      90:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      94:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      98:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      9c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      a0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      a4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      a8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      ac:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      b0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      b4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      b8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      bc:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      c0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      c4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      c8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      cc:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      d0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      d4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      d8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      dc:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      e0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      e4:	7d 07       	cpc	r23, r29
      e6:	79 07       	cpc	r23, r25
      e8:	75 07       	cpc	r23, r21
      ea:	71 07       	cpc	r23, r17
      ec:	65 07       	cpc	r22, r21
      ee:	08 07       	cpc	r16, r24
      f0:	08 07       	cpc	r16, r24
      f2:	08 07       	cpc	r16, r24
      f4:	08 07       	cpc	r16, r24
      f6:	08 07       	cpc	r16, r24
      f8:	08 07       	cpc	r16, r24
      fa:	08 07       	cpc	r16, r24
      fc:	08 07       	cpc	r16, r24
      fe:	08 07       	cpc	r16, r24
     100:	08 07       	cpc	r16, r24
     102:	08 07       	cpc	r16, r24
     104:	08 07       	cpc	r16, r24
     106:	68 07       	cpc	r22, r24
     108:	9e 07       	cpc	r25, r30
     10a:	95 07       	cpc	r25, r21
     10c:	91 07       	cpc	r25, r17
     10e:	8e 07       	cpc	r24, r30
     110:	08 07       	cpc	r16, r24
     112:	08 07       	cpc	r16, r24
     114:	08 07       	cpc	r16, r24
     116:	08 07       	cpc	r16, r24
     118:	08 07       	cpc	r16, r24
     11a:	08 07       	cpc	r16, r24
     11c:	8b 07       	cpc	r24, r27
     11e:	08 07       	cpc	r16, r24
     120:	8b 07       	cpc	r24, r27
     122:	08 07       	cpc	r16, r24
     124:	08 07       	cpc	r16, r24
     126:	08 07       	cpc	r16, r24
     128:	08 07       	cpc	r16, r24
     12a:	08 07       	cpc	r16, r24
     12c:	08 07       	cpc	r16, r24
     12e:	08 07       	cpc	r16, r24
     130:	08 07       	cpc	r16, r24
     132:	08 07       	cpc	r16, r24
     134:	08 07       	cpc	r16, r24
     136:	08 07       	cpc	r16, r24
     138:	08 07       	cpc	r16, r24
     13a:	08 07       	cpc	r16, r24
     13c:	08 07       	cpc	r16, r24
     13e:	08 07       	cpc	r16, r24
     140:	08 07       	cpc	r16, r24
     142:	08 07       	cpc	r16, r24
     144:	08 07       	cpc	r16, r24
     146:	08 07       	cpc	r16, r24
     148:	08 07       	cpc	r16, r24
     14a:	08 07       	cpc	r16, r24
     14c:	08 07       	cpc	r16, r24
     14e:	88 07       	cpc	r24, r24
     150:	08 07       	cpc	r16, r24
     152:	08 07       	cpc	r16, r24
     154:	08 07       	cpc	r16, r24
     156:	08 07       	cpc	r16, r24
     158:	08 07       	cpc	r16, r24
     15a:	08 07       	cpc	r16, r24
     15c:	08 07       	cpc	r16, r24
     15e:	08 07       	cpc	r16, r24
     160:	08 07       	cpc	r16, r24
     162:	08 07       	cpc	r16, r24
     164:	08 07       	cpc	r16, r24
     166:	08 07       	cpc	r16, r24
     168:	08 07       	cpc	r16, r24
     16a:	08 07       	cpc	r16, r24
     16c:	08 07       	cpc	r16, r24
     16e:	08 07       	cpc	r16, r24
     170:	08 07       	cpc	r16, r24
     172:	08 07       	cpc	r16, r24
     174:	08 07       	cpc	r16, r24
     176:	08 07       	cpc	r16, r24
     178:	08 07       	cpc	r16, r24
     17a:	08 07       	cpc	r16, r24
     17c:	08 07       	cpc	r16, r24
     17e:	08 07       	cpc	r16, r24
     180:	08 07       	cpc	r16, r24
     182:	08 07       	cpc	r16, r24
     184:	84 07       	cpc	r24, r20
     186:	08 07       	cpc	r16, r24
     188:	08 07       	cpc	r16, r24
     18a:	08 07       	cpc	r16, r24
     18c:	08 07       	cpc	r16, r24
     18e:	08 07       	cpc	r16, r24
     190:	08 07       	cpc	r16, r24
     192:	08 07       	cpc	r16, r24
     194:	08 07       	cpc	r16, r24
     196:	08 07       	cpc	r16, r24
     198:	80 07       	cpc	r24, r16
     19a:	b1 07       	cpc	r27, r17
     19c:	ae 07       	cpc	r26, r30
     19e:	aa 07       	cpc	r26, r26
     1a0:	a7 07       	cpc	r26, r23
     1a2:	c6 07       	cpc	r28, r22
     1a4:	c6 07       	cpc	r28, r22
     1a6:	c2 07       	cpc	r28, r18
     1a8:	bb 07       	cpc	r27, r27
     1aa:	b4 07       	cpc	r27, r20
     1ac:	f9 07       	cpc	r31, r25
     1ae:	08 07       	cpc	r16, r24
     1b0:	08 07       	cpc	r16, r24
     1b2:	f2 07       	cpc	r31, r18
     1b4:	ed 07       	cpc	r30, r29
     1b6:	e6 07       	cpc	r30, r22
     1b8:	df 07       	cpc	r29, r31
     1ba:	d8 07       	cpc	r29, r24
     1bc:	d1 07       	cpc	r29, r17
     1be:	ca 07       	cpc	r28, r26
     1c0:	2b 08       	sbc	r2, r11
     1c2:	24 08       	sbc	r2, r4
     1c4:	1d 08       	sbc	r1, r13
     1c6:	16 08       	sbc	r1, r6
     1c8:	0f 08       	sbc	r0, r15
     1ca:	08 08       	sbc	r0, r8
     1cc:	03 08       	sbc	r0, r3
     1ce:	fe 07       	cpc	r31, r30
     1d0:	56 08       	sbc	r5, r6
     1d2:	4f 08       	sbc	r4, r15
     1d4:	4a 08       	sbc	r4, r10
     1d6:	43 08       	sbc	r4, r3
     1d8:	61 07       	cpc	r22, r17
     1da:	32 08       	sbc	r3, r2
     1dc:	39 08       	sbc	r3, r9
     1de:	c2 07       	cpc	r28, r18
     1e0:	08 07       	cpc	r16, r24
     1e2:	08 07       	cpc	r16, r24
     1e4:	08 07       	cpc	r16, r24
     1e6:	08 07       	cpc	r16, r24
     1e8:	08 07       	cpc	r16, r24
     1ea:	08 07       	cpc	r16, r24
     1ec:	08 07       	cpc	r16, r24
     1ee:	08 07       	cpc	r16, r24
     1f0:	08 07       	cpc	r16, r24
     1f2:	08 07       	cpc	r16, r24
     1f4:	08 07       	cpc	r16, r24
     1f6:	08 07       	cpc	r16, r24
     1f8:	08 07       	cpc	r16, r24
     1fa:	08 07       	cpc	r16, r24
     1fc:	08 07       	cpc	r16, r24
     1fe:	08 07       	cpc	r16, r24
     200:	08 07       	cpc	r16, r24
     202:	08 07       	cpc	r16, r24
     204:	08 07       	cpc	r16, r24
     206:	08 07       	cpc	r16, r24
     208:	08 07       	cpc	r16, r24
     20a:	08 07       	cpc	r16, r24
     20c:	08 07       	cpc	r16, r24
     20e:	08 07       	cpc	r16, r24
     210:	08 07       	cpc	r16, r24
     212:	08 07       	cpc	r16, r24
     214:	08 07       	cpc	r16, r24
     216:	08 07       	cpc	r16, r24
     218:	08 07       	cpc	r16, r24
     21a:	c2 07       	cpc	r28, r18
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.1946>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.1944>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.1942>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1940>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1938>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1936>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1934>:
     273:	0d 0a 00                                            ...

00000276 <__c.1932>:
     276:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

00000282 <__c.1930>:
     282:	0d 0a 00                                            ...

00000285 <__c.1928>:
     285:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000290 <__c.1926>:
     290:	0d 0a 00                                            ...

00000293 <__c.1924>:
     293:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000002a3 <__c.1922>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1920>:
     2a6:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000002b5 <__c.1918>:
     2b5:	0d 0a 00                                            ...

000002b8 <__c.1916>:
     2b8:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000002c5 <__c.1914>:
     2c5:	0d 0a 00                                            ...

000002c8 <__c.1912>:
     2c8:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

000002d7 <__c.1910>:
     2d7:	0d 0a 00                                            ...

000002da <__c.1908>:
     2da:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

000002e4 <__c.1906>:
     2e4:	0d 0a 00                                            ...

000002e7 <__c.1904>:
     2e7:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     2f7:	3d 20 00                                            = .

000002fa <__c.1902>:
     2fa:	0d 0a 00                                            ...

000002fd <__c.1900>:
     2fd:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     30d:	20 00                                                .

0000030f <__c.1639>:
     30f:	6f 6b 0a 00                                         ok..

00000313 <__c.1725>:
     313:	0a 00                                               ..

00000315 <__c.1723>:
     315:	65 72 72 6f 72 3a 20 00                             error: .

0000031d <__c.1719>:
     31d:	65 72 72 6f 72 3a 20 4e 6f 74 20 68 6f 6d 65 64     error: Not homed
     32d:	0a 00                                               ..

0000032f <__c.1716>:
     32f:	65 72 72 6f 72 3a 20 43 6f 6d 6d 61 6e 64 20 46     error: Command F
     33f:	61 69 6c 65 64 0a 00                                ailed..

00000346 <__c.1713>:
     346:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     356:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 00              point error..

00000363 <__c.1710>:
     363:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     373:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 00           ed statement..

00000381 <__c.1707>:
     381:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     391:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 00     command letter..

000003a1 <__c.1704>:
     3a1:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     3b1:	72 20 66 6f 72 6d 61 74 0a 00                       r format..

000003bb <__c.1700>:
     3bb:	6f 6b 0d 00                                         ok..

000003bf <__c.1734>:
     3bf:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     3cf:	6e 67 0d 0a 00                                      ng...

000003d4 <__c.1732>:
     3d4:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     3e4:	72 0d 0a 00                                         r...

000003e8 <__c.1689>:
     3e8:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     3f8:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     408:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     418:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     428:	0d 0a 00                                            ...

0000042b <__c.1687>:
     42b:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     43b:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     44b:	61 62 6c 65 64 29 0d 0a 00                          abled)...

00000454 <__c.1685>:
     454:	24 31 30 30 30 20 3d 20 00                          $1000 = .

0000045d <__c.1683>:
     45d:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     46d:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     47d:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     48d:	2f 6d 69 6e 29 0d 0a 00                             /min)...

00000495 <__c.1681>:
     495:	24 39 20 3d 20 00                                   $9 = .

0000049b <__c.1679>:
     49b:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     4ab:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000004b9 <__c.1677>:
     4b9:	24 38 20 3d 20 00                                   $8 = .

000004bf <__c.1675>:
     4bf:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     4cf:	29 0d 0a 00                                         )...

000004d3 <__c.1673>:
     4d3:	24 37 20 3d 20 00                                   $7 = .

000004d9 <__c.1671>:
     4d9:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     4e9:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

000004f7 <__c.1669>:
     4f7:	24 36 20 3d 20 00                                   $6 = .

000004fd <__c.1667>:
     4fd:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     50d:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

0000051b <__c.1665>:
     51b:	24 35 20 3d 20 00                                   $5 = .

00000521 <__c.1663>:
     521:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     531:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

0000053e <__c.1661>:
     53e:	24 34 20 3d 20 00                                   $4 = .

00000544 <__c.1659>:
     544:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     554:	0a 00                                               ..

00000556 <__c.1657>:
     556:	24 33 20 3d 20 00                                   $3 = .

0000055c <__c.1655>:
     55c:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

0000056c <__c.1653>:
     56c:	24 32 20 3d 20 00                                   $2 = .

00000572 <__c.1651>:
     572:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

00000582 <__c.1649>:
     582:	24 31 20 3d 20 00                                   $1 = .

00000588 <__c.1647>:
     588:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

00000598 <__c.1645>:
     598:	24 30 20 3d 20 00                                   $0 = .

0000059e <__c.1643>:
     59e:	0d 0a 00                                            ...

000005a1 <__c.1641>:
     5a1:	30 2e 37 36 50 42 00                                0.76PB.

000005a8 <__c.1639>:
     5a8:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000005b4 <__c.2207>:
     5b4:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

000005c2 <__c.2068>:
     5c2:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000005cc <__c.2086>:
     5cc:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

000005d6 <__c.1843>:
     5d6:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     5e6:	0d 00                                               ..

000005e8 <__c.1878>:
     5e8:	6e 6f 0a 00                                         no..

000005ec <__c.1876>:
     5ec:	79 65 73 0a 00                                      yes..

000005f1 <__c.1849>:
     5f1:	45 72 72 6f 72 3a 20 4f 53 43 4f 4b 49 52 51 20     Error: OSCOKIRQ 
     601:	66 61 69 6c 65 64 20 74 6f 20 61 73 73 65 72 74     failed to assert
     611:	0a 00                                               ..

00000613 <pstr_inf>:
     613:	49 4e 46                                            INF

00000616 <pstr_inity>:
     616:	49 4e 49 54 59                                      INITY

0000061b <pstr_nan>:
     61b:	4e 41 4e                                            NAN

0000061e <pwr_m10>:
     61e:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     62e:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000636 <pwr_p10>:
     636:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     646:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000064e <__ctors_end>:
     64e:	11 24       	eor	r1, r1
     650:	1f be       	out	0x3f, r1	; 63
     652:	cf ef       	ldi	r28, 0xFF	; 255
     654:	d1 e2       	ldi	r29, 0x21	; 33
     656:	de bf       	out	0x3e, r29	; 62
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	00 e0       	ldi	r16, 0x00	; 0
     65c:	0c bf       	out	0x3c, r16	; 60

0000065e <__do_copy_data>:
     65e:	12 e0       	ldi	r17, 0x02	; 2
     660:	a0 e0       	ldi	r26, 0x00	; 0
     662:	b2 e0       	ldi	r27, 0x02	; 2
     664:	e0 ee       	ldi	r30, 0xE0	; 224
     666:	f2 e6       	ldi	r31, 0x62	; 98
     668:	00 e0       	ldi	r16, 0x00	; 0
     66a:	0b bf       	out	0x3b, r16	; 59
     66c:	02 c0       	rjmp	.+4      	; 0x672 <__do_copy_data+0x14>
     66e:	07 90       	elpm	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	a6 30       	cpi	r26, 0x06	; 6
     674:	b1 07       	cpc	r27, r17
     676:	d9 f7       	brne	.-10     	; 0x66e <__do_copy_data+0x10>

00000678 <__do_clear_bss>:
     678:	16 e0       	ldi	r17, 0x06	; 6
     67a:	a6 e0       	ldi	r26, 0x06	; 6
     67c:	b2 e0       	ldi	r27, 0x02	; 2
     67e:	01 c0       	rjmp	.+2      	; 0x682 <.do_clear_bss_start>

00000680 <.do_clear_bss_loop>:
     680:	1d 92       	st	X+, r1

00000682 <.do_clear_bss_start>:
     682:	a8 3f       	cpi	r26, 0xF8	; 248
     684:	b1 07       	cpc	r27, r17
     686:	e1 f7       	brne	.-8      	; 0x680 <.do_clear_bss_loop>
     688:	0e 94 a8 0a 	call	0x1550	; 0x1550 <main>
     68c:	0c 94 6e 31 	jmp	0x62dc	; 0x62dc <_exit>

00000690 <__bad_interrupt>:
     690:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000694 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     694:	24 9a       	sbi	0x04, 4	; 4
}
     696:	08 95       	ret

00000698 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     698:	89 2b       	or	r24, r25
     69a:	11 f4       	brne	.+4      	; 0x6a0 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     69c:	2c 98       	cbi	0x05, 4	; 5
     69e:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     6a0:	2c 9a       	sbi	0x05, 4	; 5
     6a2:	08 95       	ret

000006a4 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6a4:	f9 99       	sbic	0x1f, 1	; 31
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     6a8:	92 bd       	out	0x22, r25	; 34
     6aa:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     6b0:	80 b5       	in	r24, 0x20	; 32
}
     6b2:	08 95       	ret

000006b4 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     6b4:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6b6:	f9 99       	sbic	0x1f, 1	; 31
     6b8:	fe cf       	rjmp	.-4      	; 0x6b6 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     6ba:	92 bd       	out	0x22, r25	; 34
     6bc:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     6c2:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     6c4:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     6c6:	89 2f       	mov	r24, r25
     6c8:	86 23       	and	r24, r22
     6ca:	41 f0       	breq	.+16     	; 0x6dc <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     6cc:	6f 3f       	cpi	r22, 0xFF	; 255
     6ce:	71 f0       	breq	.+28     	; 0x6ec <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     6d0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     6d6:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6d8:	78 94       	sei
}
     6da:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     6dc:	99 23       	and	r25, r25
     6de:	e1 f3       	breq	.-8      	; 0x6d8 <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6e0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6e2:	84 e2       	ldi	r24, 0x24	; 36
     6e4:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     6e6:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     6e8:	78 94       	sei
}
     6ea:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6ec:	84 e1       	ldi	r24, 0x14	; 20
     6ee:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     6f0:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6f2:	78 94       	sei
}
     6f4:	08 95       	ret

000006f6 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     6f6:	af 92       	push	r10
     6f8:	bf 92       	push	r11
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	6c 01       	movw	r12, r24
     70a:	8b 01       	movw	r16, r22
     70c:	5a 01       	movw	r10, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     70e:	41 15       	cp	r20, r1
     710:	51 05       	cpc	r21, r1
     712:	59 f1       	breq	.+86     	; 0x76a <memcpy_to_eeprom_with_checksum+0x74>
     714:	ff 24       	eor	r15, r15
     716:	c0 e0       	ldi	r28, 0x00	; 0
     718:	d0 e0       	ldi	r29, 0x00	; 0
     71a:	0d c0       	rjmp	.+26     	; 0x736 <memcpy_to_eeprom_with_checksum+0x40>
    checksum = (checksum << 1) || (checksum >> 7);
     71c:	21 e0       	ldi	r18, 0x01	; 1
    checksum += *source;
     71e:	f8 01       	movw	r30, r16
     720:	60 81       	ld	r22, Z
     722:	f2 2e       	mov	r15, r18
     724:	f6 0e       	add	r15, r22
    eeprom_put_char(destination++, *(source++)); 
     726:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <eeprom_put_char>
     72a:	21 96       	adiw	r28, 0x01	; 1
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     72c:	ca 15       	cp	r28, r10
     72e:	db 05       	cpc	r29, r11
     730:	61 f0       	breq	.+24     	; 0x74a <memcpy_to_eeprom_with_checksum+0x54>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     732:	0f 5f       	subi	r16, 0xFF	; 255
     734:	1f 4f       	sbci	r17, 0xFF	; 255
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     736:	ce 01       	movw	r24, r28
     738:	8c 0d       	add	r24, r12
     73a:	9d 1d       	adc	r25, r13
    checksum = (checksum << 1) || (checksum >> 7);
     73c:	ff 20       	and	r15, r15
     73e:	71 f7       	brne	.-36     	; 0x71c <memcpy_to_eeprom_with_checksum+0x26>
     740:	2f 2d       	mov	r18, r15
     742:	22 1f       	adc	r18, r18
     744:	22 27       	eor	r18, r18
     746:	22 1f       	adc	r18, r18
     748:	ea cf       	rjmp	.-44     	; 0x71e <memcpy_to_eeprom_with_checksum+0x28>
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     74a:	cc 0e       	add	r12, r28
     74c:	dd 1e       	adc	r13, r29
  }
  eeprom_put_char(destination, checksum);
     74e:	c6 01       	movw	r24, r12
     750:	6f 2d       	mov	r22, r15
     752:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <eeprom_put_char>
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	08 95       	ret
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     76a:	ff 24       	eor	r15, r15
     76c:	f0 cf       	rjmp	.-32     	; 0x74e <memcpy_to_eeprom_with_checksum+0x58>

0000076e <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     76e:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     770:	41 15       	cp	r20, r1
     772:	51 05       	cpc	r21, r1
     774:	c9 f1       	breq	.+114    	; 0x7e8 <memcpy_from_eeprom_with_checksum+0x7a>
     776:	a0 e0       	ldi	r26, 0x00	; 0
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     77c:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     77e:	c9 01       	movw	r24, r18
     780:	86 0f       	add	r24, r22
     782:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     784:	f9 99       	sbic	0x1f, 1	; 31
     786:	fe cf       	rjmp	.-4      	; 0x784 <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     788:	92 bd       	out	0x22, r25	; 34
     78a:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     78c:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     78e:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     790:	aa 23       	and	r26, r26
     792:	59 f0       	breq	.+22     	; 0x7aa <memcpy_from_eeprom_with_checksum+0x3c>
     794:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     796:	a8 2f       	mov	r26, r24
     798:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     79a:	90 83       	st	Z, r25
     79c:	2f 5f       	subi	r18, 0xFF	; 255
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7a0:	24 17       	cp	r18, r20
     7a2:	35 07       	cpc	r19, r21
     7a4:	71 f0       	breq	.+28     	; 0x7c2 <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     7a6:	31 96       	adiw	r30, 0x01	; 1
     7a8:	ea cf       	rjmp	.-44     	; 0x77e <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     7aa:	8a 2f       	mov	r24, r26
     7ac:	88 1f       	adc	r24, r24
     7ae:	88 27       	eor	r24, r24
     7b0:	88 1f       	adc	r24, r24
    checksum += data;    
     7b2:	a8 2f       	mov	r26, r24
     7b4:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     7b6:	90 83       	st	Z, r25
     7b8:	2f 5f       	subi	r18, 0xFF	; 255
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7bc:	24 17       	cp	r18, r20
     7be:	35 07       	cpc	r19, r21
     7c0:	91 f7       	brne	.-28     	; 0x7a6 <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     7c2:	62 0f       	add	r22, r18
     7c4:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7c6:	f9 99       	sbic	0x1f, 1	; 31
     7c8:	fe cf       	rjmp	.-4      	; 0x7c6 <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     7ca:	72 bd       	out	0x22, r23	; 34
     7cc:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     7d2:	80 b5       	in	r24, 0x20	; 32
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	a8 17       	cp	r26, r24
     7da:	11 f0       	breq	.+4      	; 0x7e0 <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7dc:	c9 01       	movw	r24, r18
     7de:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     7e0:	21 e0       	ldi	r18, 0x01	; 1
     7e2:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7e4:	c9 01       	movw	r24, r18
     7e6:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7e8:	a0 e0       	ldi	r26, 0x00	; 0
     7ea:	ed cf       	rjmp	.-38     	; 0x7c6 <memcpy_from_eeprom_with_checksum+0x58>

000007ec <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     7ec:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     7f0:	60 93 30 02 	sts	0x0230, r22
  gc.plane_axis_2 = axis_2;
     7f4:	40 93 31 02 	sts	0x0231, r20
}
     7f8:	08 95       	ret

000007fa <set_feeder_x>:

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
     7fa:	60 93 06 02 	sts	0x0206, r22
     7fe:	70 93 07 02 	sts	0x0207, r23
     802:	80 93 08 02 	sts	0x0208, r24
     806:	90 93 09 02 	sts	0x0209, r25
}
     80a:	08 95       	ret

0000080c <set_feeder_y>:

void set_feeder_y( double y )
{
	feeder_x_pos = y;
     80c:	60 93 06 02 	sts	0x0206, r22
     810:	70 93 07 02 	sts	0x0207, r23
     814:	80 93 08 02 	sts	0x0208, r24
     818:	90 93 09 02 	sts	0x0209, r25
}
     81c:	08 95       	ret

0000081e <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     81e:	2f 92       	push	r2
     820:	3f 92       	push	r3
     822:	4f 92       	push	r4
     824:	5f 92       	push	r5
     826:	6f 92       	push	r6
     828:	7f 92       	push	r7
     82a:	8f 92       	push	r8
     82c:	9f 92       	push	r9
     82e:	af 92       	push	r10
     830:	bf 92       	push	r11
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	28 97       	sbiw	r28, 0x08	; 8
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	69 83       	std	Y+1, r22	; 0x01
     854:	7a 83       	std	Y+2, r23	; 0x02
     856:	8b 83       	std	Y+3, r24	; 0x03
     858:	9c 83       	std	Y+4, r25	; 0x04
     85a:	2d 83       	std	Y+5, r18	; 0x05
     85c:	3e 83       	std	Y+6, r19	; 0x06
     85e:	4f 83       	std	Y+7, r20	; 0x07
     860:	58 87       	std	Y+8, r21	; 0x08
     862:	17 01       	movw	r2, r14
     864:	28 01       	movw	r4, r16
     866:	35 01       	movw	r6, r10
     868:	46 01       	movw	r8, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e8       	ldi	r20, 0x80	; 128
     870:	5f eb       	ldi	r21, 0xBF	; 191
     872:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
     876:	88 23       	and	r24, r24
     878:	41 f4       	brne	.+16     	; 0x88a <gotoxy+0x6c>
     87a:	20 90 1c 02 	lds	r2, 0x021C
     87e:	30 90 1d 02 	lds	r3, 0x021D
     882:	40 90 1e 02 	lds	r4, 0x021E
     886:	50 90 1f 02 	lds	r5, 0x021F
  if( y == -1) c = gc.position[Y_AXIS] ;
     88a:	6d 81       	ldd	r22, Y+5	; 0x05
     88c:	7e 81       	ldd	r23, Y+6	; 0x06
     88e:	8f 81       	ldd	r24, Y+7	; 0x07
     890:	98 85       	ldd	r25, Y+8	; 0x08
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e8       	ldi	r20, 0x80	; 128
     898:	5f eb       	ldi	r21, 0xBF	; 191
     89a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
     89e:	88 23       	and	r24, r24
     8a0:	41 f4       	brne	.+16     	; 0x8b2 <gotoxy+0x94>
     8a2:	60 90 20 02 	lds	r6, 0x0220
     8a6:	70 90 21 02 	lds	r7, 0x0221
     8aa:	80 90 22 02 	lds	r8, 0x0222
     8ae:	90 90 23 02 	lds	r9, 0x0223
  if( z == -1) z = gc.position[Z_AXIS] ;
     8b2:	c2 01       	movw	r24, r4
     8b4:	b1 01       	movw	r22, r2
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e8       	ldi	r20, 0x80	; 128
     8bc:	5f eb       	ldi	r21, 0xBF	; 191
     8be:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
     8c2:	88 23       	and	r24, r24
     8c4:	41 f4       	brne	.+16     	; 0x8d6 <gotoxy+0xb8>
     8c6:	20 90 24 02 	lds	r2, 0x0224
     8ca:	30 90 25 02 	lds	r3, 0x0225
     8ce:	40 90 26 02 	lds	r4, 0x0226
     8d2:	50 90 27 02 	lds	r5, 0x0227
  if( c == -1) c = gc.position[C_AXIS] ;
     8d6:	c4 01       	movw	r24, r8
     8d8:	b3 01       	movw	r22, r6
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e8       	ldi	r20, 0x80	; 128
     8e0:	5f eb       	ldi	r21, 0xBF	; 191
     8e2:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
     8e6:	88 23       	and	r24, r24
     8e8:	41 f4       	brne	.+16     	; 0x8fa <gotoxy+0xdc>
     8ea:	60 90 28 02 	lds	r6, 0x0228
     8ee:	70 90 29 02 	lds	r7, 0x0229
     8f2:	80 90 2a 02 	lds	r8, 0x022A
     8f6:	90 90 2b 02 	lds	r9, 0x022B

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <gotoxy+0xde>
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <gotoxy+0xe0>
     8fe:	80 91 18 02 	lds	r24, 0x0218
     902:	90 91 19 02 	lds	r25, 0x0219
     906:	a0 91 1a 02 	lds	r26, 0x021A
     90a:	b0 91 1b 02 	lds	r27, 0x021B
     90e:	ed b7       	in	r30, 0x3d	; 61
     910:	fe b7       	in	r31, 0x3e	; 62
     912:	81 83       	std	Z+1, r24	; 0x01
     914:	92 83       	std	Z+2, r25	; 0x02
     916:	a3 83       	std	Z+3, r26	; 0x03
     918:	b4 83       	std	Z+4, r27	; 0x04
     91a:	16 82       	std	Z+6, r1	; 0x06
     91c:	15 82       	std	Z+5, r1	; 0x05
     91e:	69 81       	ldd	r22, Y+1	; 0x01
     920:	7a 81       	ldd	r23, Y+2	; 0x02
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	2d 81       	ldd	r18, Y+5	; 0x05
     928:	3e 81       	ldd	r19, Y+6	; 0x06
     92a:	4f 81       	ldd	r20, Y+7	; 0x07
     92c:	58 85       	ldd	r21, Y+8	; 0x08
     92e:	82 01       	movw	r16, r4
     930:	71 01       	movw	r14, r2
     932:	64 01       	movw	r12, r8
     934:	53 01       	movw	r10, r6
     936:	0e 94 4d 10 	call	0x209a	; 0x209a <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	9a 81       	ldd	r25, Y+2	; 0x02
     93e:	ab 81       	ldd	r26, Y+3	; 0x03
     940:	bc 81       	ldd	r27, Y+4	; 0x04
     942:	80 93 1c 02 	sts	0x021C, r24
     946:	90 93 1d 02 	sts	0x021D, r25
     94a:	a0 93 1e 02 	sts	0x021E, r26
     94e:	b0 93 1f 02 	sts	0x021F, r27
   gc.position[Y_AXIS] = y;
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	af 81       	ldd	r26, Y+7	; 0x07
     958:	b8 85       	ldd	r27, Y+8	; 0x08
     95a:	80 93 20 02 	sts	0x0220, r24
     95e:	90 93 21 02 	sts	0x0221, r25
     962:	a0 93 22 02 	sts	0x0222, r26
     966:	b0 93 23 02 	sts	0x0223, r27
   gc.position[Z_AXIS] = z;
     96a:	20 92 24 02 	sts	0x0224, r2
     96e:	30 92 25 02 	sts	0x0225, r3
     972:	40 92 26 02 	sts	0x0226, r4
     976:	50 92 27 02 	sts	0x0227, r5
   gc.position[C_AXIS] = c;
     97a:	60 92 28 02 	sts	0x0228, r6
     97e:	70 92 29 02 	sts	0x0229, r7
     982:	80 92 2a 02 	sts	0x022A, r8
     986:	90 92 2b 02 	sts	0x022B, r9
     98a:	ad b7       	in	r26, 0x3d	; 61
     98c:	be b7       	in	r27, 0x3e	; 62
     98e:	16 96       	adiw	r26, 0x06	; 6
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	be bf       	out	0x3e, r27	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	ad bf       	out	0x3d, r26	; 61

}
     99a:	28 96       	adiw	r28, 0x08	; 8
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	cf 91       	pop	r28
     9a8:	df 91       	pop	r29
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
     9ba:	9f 90       	pop	r9
     9bc:	8f 90       	pop	r8
     9be:	7f 90       	pop	r7
     9c0:	6f 90       	pop	r6
     9c2:	5f 90       	pop	r5
     9c4:	4f 90       	pop	r4
     9c6:	3f 90       	pop	r3
     9c8:	2f 90       	pop	r2
     9ca:	08 95       	ret

000009cc <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	0f 92       	push	r0
     9e2:	0f 92       	push	r0
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	6c 01       	movw	r12, r24
     9ea:	5b 01       	movw	r10, r22
     9ec:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     9ee:	fb 01       	movw	r30, r22
     9f0:	00 81       	ld	r16, Z
     9f2:	11 81       	ldd	r17, Z+1	; 0x01
     9f4:	08 0f       	add	r16, r24
     9f6:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     9f8:	c8 01       	movw	r24, r16
     9fa:	be 01       	movw	r22, r28
     9fc:	6f 5f       	subi	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <strtod>
     a04:	f7 01       	movw	r30, r14
     a06:	60 83       	st	Z, r22
     a08:	71 83       	std	Z+1, r23	; 0x01
     a0a:	82 83       	std	Z+2, r24	; 0x02
     a0c:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	80 17       	cp	r24, r16
     a14:	91 07       	cpc	r25, r17
     a16:	a9 f0       	breq	.+42     	; 0xa42 <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     a18:	8c 19       	sub	r24, r12
     a1a:	9d 09       	sbc	r25, r13
     a1c:	f5 01       	movw	r30, r10
     a1e:	91 83       	std	Z+1, r25	; 0x01
     a20:	80 83       	st	Z, r24
     a22:	21 e0       	ldi	r18, 0x01	; 1
     a24:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     a26:	c9 01       	movw	r24, r18
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	cf 91       	pop	r28
     a2e:	df 91       	pop	r29
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	af 90       	pop	r10
     a40:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 0a 02 	sts	0x020A, r24
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	ec cf       	rjmp	.-40     	; 0xa26 <read_double+0x5a>

00000a4e <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	ec 01       	movw	r28, r24
     a58:	8b 01       	movw	r16, r22
     a5a:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     a5c:	ed 91       	ld	r30, X+
     a5e:	fc 91       	ld	r31, X
     a60:	11 97       	sbiw	r26, 0x01	; 1
     a62:	e4 0f       	add	r30, r20
     a64:	f5 1f       	adc	r31, r21
     a66:	e0 81       	ld	r30, Z
     a68:	ee 23       	and	r30, r30
     a6a:	39 f0       	breq	.+14     	; 0xa7a <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     a6c:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     a6e:	e1 54       	subi	r30, 0x41	; 65
     a70:	ea 31       	cpi	r30, 0x1A	; 26
     a72:	58 f0       	brcs	.+22     	; 0xa8a <next_statement+0x3c>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	80 93 0a 02 	sts	0x020A, r24
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     a7e:	c9 01       	movw	r24, r18
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     a8a:	8d 91       	ld	r24, X+
     a8c:	9c 91       	ld	r25, X
     a8e:	11 97       	sbiw	r26, 0x01	; 1
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	8d 93       	st	X+, r24
     a94:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     a96:	ca 01       	movw	r24, r20
     a98:	b9 01       	movw	r22, r18
     a9a:	a8 01       	movw	r20, r16
     a9c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <read_double>
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <next_statement+0x5a>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     aaa:	c9 01       	movw	r24, r18
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	08 95       	ret

00000ab6 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     ab6:	88 e2       	ldi	r24, 0x28	; 40
     ab8:	ea e0       	ldi	r30, 0x0A	; 10
     aba:	f2 e0       	ldi	r31, 0x02	; 2
     abc:	df 01       	movw	r26, r30
     abe:	1d 92       	st	X+, r1
     ac0:	8a 95       	dec	r24
     ac2:	e9 f7       	brne	.-6      	; 0xabe <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     ac4:	60 91 9f 06 	lds	r22, 0x069F
     ac8:	70 91 a0 06 	lds	r23, 0x06A0
     acc:	80 91 a1 06 	lds	r24, 0x06A1
     ad0:	90 91 a2 06 	lds	r25, 0x06A2
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e7       	ldi	r20, 0x70	; 112
     ada:	52 e4       	ldi	r21, 0x42	; 66
     adc:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
     ae0:	60 93 14 02 	sts	0x0214, r22
     ae4:	70 93 15 02 	sts	0x0215, r23
     ae8:	80 93 16 02 	sts	0x0216, r24
     aec:	90 93 17 02 	sts	0x0217, r25
  gc.seek_rate = settings.default_seek_rate/60;
     af0:	60 91 a3 06 	lds	r22, 0x06A3
     af4:	70 91 a4 06 	lds	r23, 0x06A4
     af8:	80 91 a5 06 	lds	r24, 0x06A5
     afc:	90 91 a6 06 	lds	r25, 0x06A6
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e7       	ldi	r20, 0x70	; 112
     b06:	52 e4       	ldi	r21, 0x42	; 66
     b08:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
     b0c:	60 93 18 02 	sts	0x0218, r22
     b10:	70 93 19 02 	sts	0x0219, r23
     b14:	80 93 1a 02 	sts	0x021A, r24
     b18:	90 93 1b 02 	sts	0x021B, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b1c:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	80 93 31 02 	sts	0x0231, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     b2c:	90 93 0e 02 	sts	0x020E, r25
}
     b30:	08 95       	ret

00000b32 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     b32:	2f 92       	push	r2
     b34:	3f 92       	push	r3
     b36:	4f 92       	push	r4
     b38:	5f 92       	push	r5
     b3a:	6f 92       	push	r6
     b3c:	7f 92       	push	r7
     b3e:	8f 92       	push	r8
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	e7 97       	sbiw	r28, 0x37	; 55
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     b68:	1b 82       	std	Y+3, r1	; 0x03
     b6a:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	88 87       	std	Y+8, r24	; 0x08
     b76:	99 87       	std	Y+9, r25	; 0x09
     b78:	aa 87       	std	Y+10, r26	; 0x0a
     b7a:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     b7c:	ac e0       	ldi	r26, 0x0C	; 12
     b7e:	2a 2e       	mov	r2, r26
     b80:	31 2c       	mov	r3, r1
     b82:	2c 0e       	add	r2, r28
     b84:	3d 1e       	adc	r3, r29
     b86:	80 e1       	ldi	r24, 0x10	; 16
     b88:	d1 01       	movw	r26, r2
     b8a:	e8 2f       	mov	r30, r24
     b8c:	1d 92       	st	X+, r1
     b8e:	ea 95       	dec	r30
     b90:	e9 f7       	brne	.-6      	; 0xb8c <gc_execute_line+0x5a>
  clear_vector(offset);
     b92:	fc e1       	ldi	r31, 0x1C	; 28
     b94:	cf 2e       	mov	r12, r31
     b96:	d1 2c       	mov	r13, r1
     b98:	cc 0e       	add	r12, r28
     b9a:	dd 1e       	adc	r13, r29
     b9c:	d6 01       	movw	r26, r12
     b9e:	1d 92       	st	X+, r1
     ba0:	8a 95       	dec	r24
     ba2:	e9 f7       	brne	.-6      	; 0xb9e <gc_execute_line+0x6c>

  gc.status_code = GCSTATUS_OK;
     ba4:	10 92 0a 02 	sts	0x020A, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     ba8:	f5 01       	movw	r30, r10
     baa:	80 81       	ld	r24, Z
     bac:	88 32       	cpi	r24, 0x28	; 40
     bae:	09 f4       	brne	.+2      	; 0xbb2 <gc_execute_line+0x80>
     bb0:	86 c0       	rjmp	.+268    	; 0xcbe <gc_execute_line+0x18c>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     bb2:	8f 32       	cpi	r24, 0x2F	; 47
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <gc_execute_line+0x86>
     bb6:	6e c0       	rjmp	.+220    	; 0xc94 <gc_execute_line+0x162>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     bb8:	84 32       	cpi	r24, 0x24	; 36
     bba:	09 f4       	brne	.+2      	; 0xbbe <gc_execute_line+0x8c>
     bbc:	4a c0       	rjmp	.+148    	; 0xc52 <gc_execute_line+0x120>
     bbe:	19 aa       	std	Y+49, r1	; 0x31
     bc0:	18 aa       	std	Y+48, r1	; 0x30
     bc2:	e2 e0       	ldi	r30, 0x02	; 2
     bc4:	6e 2e       	mov	r6, r30
     bc6:	71 2c       	mov	r7, r1
     bc8:	6c 0e       	add	r6, r28
     bca:	7d 1e       	adc	r7, r29
     bcc:	74 e0       	ldi	r23, 0x04	; 4
     bce:	47 2e       	mov	r4, r23
     bd0:	51 2c       	mov	r5, r1
     bd2:	4c 0e       	add	r4, r28
     bd4:	5d 1e       	adc	r5, r29
     bd6:	4e 01       	movw	r8, r28
     bd8:	08 94       	sec
     bda:	81 1c       	adc	r8, r1
     bdc:	91 1c       	adc	r9, r1
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     bde:	c4 01       	movw	r24, r8
     be0:	b2 01       	movw	r22, r4
     be2:	a5 01       	movw	r20, r10
     be4:	93 01       	movw	r18, r6
     be6:	0e 94 27 05 	call	0xa4e	; 0xa4e <next_statement>
     bea:	89 2b       	or	r24, r25
     bec:	09 f4       	brne	.+2      	; 0xbf0 <gc_execute_line+0xbe>
     bee:	63 c2       	rjmp	.+1222   	; 0x10b6 <gc_execute_line+0x584>
    int_value = trunc(value);
     bf0:	6c 81       	ldd	r22, Y+4	; 0x04
     bf2:	7d 81       	ldd	r23, Y+5	; 0x05
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	9f 81       	ldd	r25, Y+7	; 0x07
     bf8:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <trunc>
     bfc:	7b 01       	movw	r14, r22
     bfe:	8c 01       	movw	r16, r24
     c00:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>

    switch(letter) {
     c04:	29 81       	ldd	r18, Y+1	; 0x01
     c06:	27 34       	cpi	r18, 0x47	; 71
     c08:	09 f4       	brne	.+2      	; 0xc0c <gc_execute_line+0xda>
     c0a:	06 c1       	rjmp	.+524    	; 0xe18 <gc_execute_line+0x2e6>
     c0c:	28 34       	cpi	r18, 0x48	; 72
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <gc_execute_line+0xe0>
     c10:	47 c0       	rjmp	.+142    	; 0xca0 <gc_execute_line+0x16e>
     c12:	24 34       	cpi	r18, 0x44	; 68
     c14:	09 f4       	brne	.+2      	; 0xc18 <gc_execute_line+0xe6>
     c16:	55 c0       	rjmp	.+170    	; 0xcc2 <gc_execute_line+0x190>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }

    if(gc.status_code) { break; }
     c18:	80 91 0a 02 	lds	r24, 0x020A
     c1c:	88 23       	and	r24, r24
     c1e:	f9 f2       	breq	.-66     	; 0xbde <gc_execute_line+0xac>
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     c20:	e7 96       	adiw	r28, 0x37	; 55
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	9f 90       	pop	r9
     c42:	8f 90       	pop	r8
     c44:	7f 90       	pop	r7
     c46:	6f 90       	pop	r6
     c48:	5f 90       	pop	r5
     c4a:	4f 90       	pop	r4
     c4c:	3f 90       	pop	r3
     c4e:	2f 90       	pop	r2
     c50:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9b 83       	std	Y+3, r25	; 0x03
     c58:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c5a:	d5 01       	movw	r26, r10
     c5c:	11 96       	adiw	r26, 0x01	; 1
     c5e:	8c 91       	ld	r24, X
     c60:	88 23       	and	r24, r24
     c62:	59 f1       	breq	.+86     	; 0xcba <gc_execute_line+0x188>
    read_double(line, &char_counter, &p);
     c64:	8e 01       	movw	r16, r28
     c66:	0e 5f       	subi	r16, 0xFE	; 254
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	c5 01       	movw	r24, r10
     c6c:	b8 01       	movw	r22, r16
     c6e:	ae 01       	movw	r20, r28
     c70:	48 5f       	subi	r20, 0xF8	; 248
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	0e 94 e6 04 	call	0x9cc	; 0x9cc <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	f5 01       	movw	r30, r10
     c7e:	e8 0f       	add	r30, r24
     c80:	f9 1f       	adc	r31, r25
     c82:	20 81       	ld	r18, Z
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	8a 83       	std	Y+2, r24	; 0x02
     c8a:	2d 33       	cpi	r18, 0x3D	; 61
     c8c:	09 f4       	brne	.+2      	; 0xc90 <gc_execute_line+0x15e>
     c8e:	f9 c0       	rjmp	.+498    	; 0xe82 <gc_execute_line+0x350>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     c90:	83 e0       	ldi	r24, 0x03	; 3
     c92:	c6 cf       	rjmp	.-116    	; 0xc20 <gc_execute_line+0xee>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	9b 81       	ldd	r25, Y+3	; 0x03
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	9b 83       	std	Y+3, r25	; 0x03
     c9c:	8a 83       	std	Y+2, r24	; 0x02
     c9e:	8f cf       	rjmp	.-226    	; 0xbbe <gc_execute_line+0x8c>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     ca0:	2d 34       	cpi	r18, 0x4D	; 77
     ca2:	09 f4       	brne	.+2      	; 0xca6 <gc_execute_line+0x174>
     ca4:	b0 c0       	rjmp	.+352    	; 0xe06 <gc_execute_line+0x2d4>
     ca6:	24 35       	cpi	r18, 0x54	; 84
     ca8:	09 f0       	breq	.+2      	; 0xcac <gc_execute_line+0x17a>
     caa:	b6 cf       	rjmp	.-148    	; 0xc18 <gc_execute_line+0xe6>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     cac:	c8 01       	movw	r24, r16
     cae:	b7 01       	movw	r22, r14
     cb0:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
     cb4:	60 93 2c 02 	sts	0x022C, r22
     cb8:	af cf       	rjmp	.-162    	; 0xc18 <gc_execute_line+0xe6>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     cba:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <settings_dump>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	af cf       	rjmp	.-162    	; 0xc20 <gc_execute_line+0xee>
    switch(letter) {
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     cc2:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     cc4:	8d ef       	ldi	r24, 0xFD	; 253
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
		  	printBinary( DIRECTION_DDR );
     ccc:	60 b3       	in	r22, 0x10	; 16
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cd8:	8a ef       	ldi	r24, 0xFA	; 250
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     ce0:	87 ee       	ldi	r24, 0xE7	; 231
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
		  	printBinary( DIRECTION_PORT );
     ce8:	61 b3       	in	r22, 0x11	; 17
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cf4:	84 ee       	ldi	r24, 0xE4	; 228
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

			ch = PORTD;
     cfc:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     cfe:	8a ed       	ldi	r24, 0xDA	; 218
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
		  	printBinary( ch );
     d06:	ff 24       	eor	r15, r15
     d08:	00 e0       	ldi	r16, 0x00	; 0
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	c8 01       	movw	r24, r16
     d0e:	b7 01       	movw	r22, r14
     d10:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d14:	87 ed       	ldi	r24, 0xD7	; 215
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

			ch = PIND;
     d1c:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     d1e:	88 ec       	ldi	r24, 0xC8	; 200
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
		  	printBinary( ch );
     d26:	ff 24       	eor	r15, r15
     d28:	00 e0       	ldi	r16, 0x00	; 0
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	c8 01       	movw	r24, r16
     d2e:	b7 01       	movw	r22, r14
     d30:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d34:	85 ec       	ldi	r24, 0xC5	; 197
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     d3c:	88 eb       	ldi	r24, 0xB8	; 184
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
			printInteger( is_head_down() );
     d44:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d56:	85 eb       	ldi	r24, 0xB5	; 181
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     d5e:	86 ea       	ldi	r24, 0xA6	; 166
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
			printInteger( head_moving() );
     d66:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d78:	83 ea       	ldi	r24, 0xA3	; 163
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     d80:	83 e9       	ldi	r24, 0x93	; 147
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
			printInteger( vacuum_state() );
     d88:	0e 94 41 21 	call	0x4282	; 0x4282 <vacuum_state>
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	bc 01       	movw	r22, r24
     d94:	cd 01       	movw	r24, r26
     d96:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d9a:	80 e9       	ldi	r24, 0x90	; 144
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     da2:	85 e8       	ldi	r24, 0x85	; 133
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
			printInteger( is_rotated() );
     daa:	0e 94 1f 20 	call	0x403e	; 0x403e <is_rotated>
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	a0 e0       	ldi	r26, 0x00	; 0
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dbc:	82 e8       	ldi	r24, 0x82	; 130
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
     dc4:	86 e7       	ldi	r24, 0x76	; 118
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
			printInteger( get_busy() );
     dcc:	0e 94 94 17 	call	0x2f28	; 0x2f28 <get_busy>
     dd0:	aa 27       	eor	r26, r26
     dd2:	97 fd       	sbrc	r25, 7
     dd4:	a0 95       	com	r26
     dd6:	ba 2f       	mov	r27, r26
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
	      	printPgmString(PSTR("\r\n"));
     de0:	83 e7       	ldi	r24, 0x73	; 115
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     de8:	4b 99       	sbic	0x09, 3	; 9
     dea:	46 c0       	rjmp	.+140    	; 0xe78 <gc_execute_line+0x346>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     dec:	4a 99       	sbic	0x09, 2	; 9
     dee:	3f c0       	rjmp	.+126    	; 0xe6e <gc_execute_line+0x33c>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     df0:	48 99       	sbic	0x09, 0	; 9
     df2:	38 c0       	rjmp	.+112    	; 0xe64 <gc_execute_line+0x332>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     df4:	49 99       	sbic	0x09, 1	; 9
     df6:	31 c0       	rjmp	.+98     	; 0xe5a <gc_execute_line+0x328>
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
     df8:	04 99       	sbic	0x00, 4	; 0
     dfa:	2a c0       	rjmp	.+84     	; 0xe50 <gc_execute_line+0x31e>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     dfc:	90 99       	sbic	0x12, 0	; 18
     dfe:	21 c0       	rjmp	.+66     	; 0xe42 <gc_execute_line+0x310>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     e00:	80 91 0a 02 	lds	r24, 0x020A
     e04:	0d cf       	rjmp	.-486    	; 0xc20 <gc_execute_line+0xee>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e06:	e6 2f       	mov	r30, r22
     e08:	f7 2f       	mov	r31, r23
     e0a:	ed 33       	cpi	r30, 0x3D	; 61
     e0c:	f1 05       	cpc	r31, r1
     e0e:	88 f0       	brcs	.+34     	; 0xe32 <gc_execute_line+0x300>
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;

		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	80 93 0a 02 	sts	0x020A, r24
     e16:	f4 cf       	rjmp	.-24     	; 0xe00 <gc_execute_line+0x2ce>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     e18:	e6 2f       	mov	r30, r22
     e1a:	f7 2f       	mov	r31, r23
     e1c:	ef 35       	cpi	r30, 0x5F	; 95
     e1e:	f1 05       	cpc	r31, r1
     e20:	b8 f7       	brcc	.-18     	; 0xe10 <gc_execute_line+0x2de>
     e22:	ee 58       	subi	r30, 0x8E	; 142
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	05 90       	lpm	r0, Z+
     e2c:	f4 91       	lpm	r31, Z+
     e2e:	e0 2d       	mov	r30, r0
     e30:	19 94       	eijmp
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e32:	ef 52       	subi	r30, 0x2F	; 47
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	ee 0f       	add	r30, r30
     e38:	ff 1f       	adc	r31, r31
     e3a:	05 90       	lpm	r0, Z+
     e3c:	f4 91       	lpm	r31, Z+
     e3e:	e0 2d       	mov	r30, r0
     e40:	19 94       	eijmp

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
		      	printPgmString(PSTR("Y_HOME\r\n"));
     e42:	89 e4       	ldi	r24, 0x49	; 73
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     e4a:	80 91 0a 02 	lds	r24, 0x020A
     e4e:	e8 ce       	rjmp	.-560    	; 0xc20 <gc_execute_line+0xee>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));
     e50:	82 e5       	ldi	r24, 0x52	; 82
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
     e58:	d1 cf       	rjmp	.-94     	; 0xdfc <gc_execute_line+0x2ca>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));
     e5a:	8b e5       	ldi	r24, 0x5B	; 91
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
     e62:	ca cf       	rjmp	.-108    	; 0xdf8 <gc_execute_line+0x2c6>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
     e64:	81 e6       	ldi	r24, 0x61	; 97
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
     e6c:	c3 cf       	rjmp	.-122    	; 0xdf4 <gc_execute_line+0x2c2>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));
     e6e:	87 e6       	ldi	r24, 0x67	; 103
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
     e76:	bc cf       	rjmp	.-136    	; 0xdf0 <gc_execute_line+0x2be>
			printInteger( get_busy() );
	      	printPgmString(PSTR("\r\n"));


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
     e78:	8d e6       	ldi	r24, 0x6D	; 109
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
     e80:	b5 cf       	rjmp	.-150    	; 0xdec <gc_execute_line+0x2ba>
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    read_double(line, &char_counter, &value);
     e82:	c5 01       	movw	r24, r10
     e84:	b8 01       	movw	r22, r16
     e86:	ae 01       	movw	r20, r28
     e88:	4c 5f       	subi	r20, 0xFC	; 252
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     e90:	ea 81       	ldd	r30, Y+2	; 0x02
     e92:	fb 81       	ldd	r31, Y+3	; 0x03
     e94:	ea 0d       	add	r30, r10
     e96:	fb 1d       	adc	r31, r11
     e98:	80 81       	ld	r24, Z
     e9a:	88 23       	and	r24, r24
     e9c:	09 f0       	breq	.+2      	; 0xea0 <gc_execute_line+0x36e>
     e9e:	f8 ce       	rjmp	.-528    	; 0xc90 <gc_execute_line+0x15e>
    settings_store_setting(p, value);
     ea0:	68 85       	ldd	r22, Y+8	; 0x08
     ea2:	79 85       	ldd	r23, Y+9	; 0x09
     ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea8:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	4c 81       	ldd	r20, Y+4	; 0x04
     eb2:	5d 81       	ldd	r21, Y+5	; 0x05
     eb4:	6e 81       	ldd	r22, Y+6	; 0x06
     eb6:	7f 81       	ldd	r23, Y+7	; 0x07
     eb8:	0e 94 d6 15 	call	0x2bac	; 0x2bac <settings_store_setting>
    return(gc.status_code);
     ebc:	80 91 0a 02 	lds	r24, 0x020A
     ec0:	af ce       	rjmp	.-674    	; 0xc20 <gc_execute_line+0xee>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
     ec2:	0e 94 58 23 	call	0x46b0	; 0x46b0 <putdown_part>
     ec6:	80 93 0a 02 	sts	0x020A, r24
     eca:	e1 e0       	ldi	r30, 0x01	; 1
     ecc:	e8 ab       	std	Y+48, r30	; 0x30
     ece:	a4 ce       	rjmp	.-696    	; 0xc18 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     ed0:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     ed4:	a1 e0       	ldi	r26, 0x01	; 1
     ed6:	a0 93 30 02 	sts	0x0230, r26
  gc.plane_axis_2 = axis_2;
     eda:	b2 e0       	ldi	r27, 0x02	; 2
     edc:	b0 93 31 02 	sts	0x0231, r27
     ee0:	9b ce       	rjmp	.-714    	; 0xc18 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	90 93 0b 02 	sts	0x020B, r25
     ee8:	97 ce       	rjmp	.-722    	; 0xc18 <gc_execute_line+0xe6>
      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	80 93 0b 02 	sts	0x020B, r24
     ef0:	93 ce       	rjmp	.-730    	; 0xc18 <gc_execute_line+0xe6>
	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     ef2:	f1 e0       	ldi	r31, 0x01	; 1
     ef4:	f0 93 0b 02 	sts	0x020B, r31
     ef8:	8f ce       	rjmp	.-738    	; 0xc18 <gc_execute_line+0xe6>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     efa:	10 92 0b 02 	sts	0x020B, r1
     efe:	8c ce       	rjmp	.-744    	; 0xc18 <gc_execute_line+0xe6>
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     f00:	f1 e0       	ldi	r31, 0x01	; 1
     f02:	f0 93 0e 02 	sts	0x020E, r31
     f06:	88 ce       	rjmp	.-752    	; 0xc18 <gc_execute_line+0xe6>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     f08:	e4 e0       	ldi	r30, 0x04	; 4
     f0a:	e0 93 0b 02 	sts	0x020B, r30
     f0e:	84 ce       	rjmp	.-760    	; 0xc18 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f10:	b1 e0       	ldi	r27, 0x01	; 1
     f12:	b9 ab       	std	Y+49, r27	; 0x31
     f14:	81 ce       	rjmp	.-766    	; 0xc18 <gc_execute_line+0xe6>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     f16:	b2 e0       	ldi	r27, 0x02	; 2
     f18:	b8 ab       	std	Y+48, r27	; 0x30
     f1a:	7e ce       	rjmp	.-772    	; 0xc18 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f1c:	10 92 0d 02 	sts	0x020D, r1
     f20:	7b ce       	rjmp	.-778    	; 0xc18 <gc_execute_line+0xe6>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     f22:	a1 e0       	ldi	r26, 0x01	; 1
     f24:	a0 93 0d 02 	sts	0x020D, r26
     f28:	77 ce       	rjmp	.-786    	; 0xc18 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     f36:	10 92 31 02 	sts	0x0231, r1
     f3a:	6e ce       	rjmp	.-804    	; 0xc18 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f3c:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f40:	e2 e0       	ldi	r30, 0x02	; 2
     f42:	e0 93 30 02 	sts	0x0230, r30
  gc.plane_axis_2 = axis_2;
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	f0 93 31 02 	sts	0x0231, r31
     f4c:	65 ce       	rjmp	.-822    	; 0xc18 <gc_execute_line+0xe6>
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     f4e:	10 92 0c 02 	sts	0x020C, r1
     f52:	62 ce       	rjmp	.-828    	; 0xc18 <gc_execute_line+0xe6>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	90 93 0c 02 	sts	0x020C, r25
     f5a:	5e ce       	rjmp	.-836    	; 0xc18 <gc_execute_line+0xe6>
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	88 ab       	std	Y+48, r24	; 0x30
     f60:	5b ce       	rjmp	.-842    	; 0xc18 <gc_execute_line+0xe6>
     f62:	10 92 0e 02 	sts	0x020E, r1
     f66:	58 ce       	rjmp	.-848    	; 0xc18 <gc_execute_line+0xe6>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     f68:	ef ef       	ldi	r30, 0xFF	; 255
     f6a:	ff ef       	ldi	r31, 0xFF	; 255
     f6c:	f0 93 11 02 	sts	0x0211, r31
     f70:	e0 93 10 02 	sts	0x0210, r30
     f74:	51 ce       	rjmp	.-862    	; 0xc18 <gc_execute_line+0xe6>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	90 93 11 02 	sts	0x0211, r25
     f7e:	80 93 10 02 	sts	0x0210, r24
     f82:	4a ce       	rjmp	.-876    	; 0xc18 <gc_execute_line+0xe6>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     f84:	b2 e0       	ldi	r27, 0x02	; 2
     f86:	b0 93 0f 02 	sts	0x020F, r27
     f8a:	46 ce       	rjmp	.-884    	; 0xc18 <gc_execute_line+0xe6>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     f8c:	a1 e0       	ldi	r26, 0x01	; 1
     f8e:	a0 93 0f 02 	sts	0x020F, r26
     f92:	42 ce       	rjmp	.-892    	; 0xc18 <gc_execute_line+0xe6>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>
     f9c:	b1 e0       	ldi	r27, 0x01	; 1
     f9e:	b8 ab       	std	Y+48, r27	; 0x30
     fa0:	3b ce       	rjmp	.-906    	; 0xc18 <gc_execute_line+0xe6>
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>
     faa:	a1 e0       	ldi	r26, 0x01	; 1
     fac:	a8 ab       	std	Y+48, r26	; 0x30
     fae:	34 ce       	rjmp	.-920    	; 0xc18 <gc_execute_line+0xe6>
		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	98 ab       	std	Y+48, r25	; 0x30
     fbc:	2d ce       	rjmp	.-934    	; 0xc18 <gc_execute_line+0xe6>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	88 ab       	std	Y+48, r24	; 0x30
     fca:	26 ce       	rjmp	.-948    	; 0xc18 <gc_execute_line+0xe6>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
     fd4:	f1 e0       	ldi	r31, 0x01	; 1
     fd6:	f8 ab       	std	Y+48, r31	; 0x30
     fd8:	1f ce       	rjmp	.-962    	; 0xc18 <gc_execute_line+0xe6>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
     fda:	10 92 13 02 	sts	0x0213, r1
     fde:	10 92 12 02 	sts	0x0212, r1
     fe2:	1a ce       	rjmp	.-972    	; 0xc18 <gc_execute_line+0xe6>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	90 93 13 02 	sts	0x0213, r25
     fec:	80 93 12 02 	sts	0x0212, r24
     ff0:	13 ce       	rjmp	.-986    	; 0xc18 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
     ff2:	10 92 11 02 	sts	0x0211, r1
     ff6:	10 92 10 02 	sts	0x0210, r1
     ffa:	0e ce       	rjmp	.-996    	; 0xc18 <gc_execute_line+0xe6>
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
     ffc:	0e 94 46 23 	call	0x468c	; 0x468c <vacuum_test>
    1000:	f1 e0       	ldi	r31, 0x01	; 1
    1002:	f8 ab       	std	Y+48, r31	; 0x30
    1004:	09 ce       	rjmp	.-1006   	; 0xc18 <gc_execute_line+0xe6>
		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
    1006:	0e 94 84 23 	call	0x4708	; 0x4708 <tape_knock>
    100a:	e1 e0       	ldi	r30, 0x01	; 1
    100c:	e8 ab       	std	Y+48, r30	; 0x30
    100e:	04 ce       	rjmp	.-1016   	; 0xc18 <gc_execute_line+0xe6>
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	b8 ab       	std	Y+48, r27	; 0x30
    101c:	fd cd       	rjmp	.-1030   	; 0xc18 <gc_execute_line+0xe6>
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
    1026:	a1 e0       	ldi	r26, 0x01	; 1
    1028:	a8 ab       	std	Y+48, r26	; 0x30
    102a:	f6 cd       	rjmp	.-1044   	; 0xc18 <gc_execute_line+0xe6>
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;
    102c:	86 e0       	ldi	r24, 0x06	; 6
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	98 ab       	std	Y+48, r25	; 0x30
    1038:	ef cd       	rjmp	.-1058   	; 0xc18 <gc_execute_line+0xe6>
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
    103a:	85 e0       	ldi	r24, 0x05	; 5
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	88 ab       	std	Y+48, r24	; 0x30
    1046:	e8 cd       	rjmp	.-1072   	; 0xc18 <gc_execute_line+0xe6>
		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
    1048:	84 e0       	ldi	r24, 0x04	; 4
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>
    1050:	f1 e0       	ldi	r31, 0x01	; 1
    1052:	f8 ab       	std	Y+48, r31	; 0x30
    1054:	e1 cd       	rjmp	.-1086   	; 0xc18 <gc_execute_line+0xe6>

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>
    105e:	e1 e0       	ldi	r30, 0x01	; 1
    1060:	e8 ab       	std	Y+48, r30	; 0x30
    1062:	da cd       	rjmp	.-1100   	; 0xc18 <gc_execute_line+0xe6>
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
    1064:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <test_mode>
    1068:	80 93 0a 02 	sts	0x020A, r24
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	f8 ab       	std	Y+48, r31	; 0x30
    1070:	d3 cd       	rjmp	.-1114   	; 0xc18 <gc_execute_line+0xe6>

		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;
    1072:	86 e0       	ldi	r24, 0x06	; 6
    1074:	80 93 0a 02 	sts	0x020A, r24
    1078:	0e 94 93 19 	call	0x3326	; 0x3326 <get_limit_bits>
    107c:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <serialWrite>
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	c9 cd       	rjmp	.-1134   	; 0xc18 <gc_execute_line+0xe6>
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
    1086:	0e 94 b1 23 	call	0x4762	; 0x4762 <pickup_part>
    108a:	80 93 0a 02 	sts	0x020A, r24
    108e:	b1 e0       	ldi	r27, 0x01	; 1
    1090:	b8 ab       	std	Y+48, r27	; 0x30
    1092:	c2 cd       	rjmp	.-1148   	; 0xc18 <gc_execute_line+0xe6>
		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
    1094:	0e 94 46 23 	call	0x468c	; 0x468c <vacuum_test>
    1098:	a1 e0       	ldi	r26, 0x01	; 1
    109a:	a8 ab       	std	Y+48, r26	; 0x30
    109c:	bd cd       	rjmp	.-1158   	; 0xc18 <gc_execute_line+0xe6>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
    109e:	0e 94 81 21 	call	0x4302	; 0x4302 <goto_vacpad>
    10a2:	80 93 0a 02 	sts	0x020A, r24
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	98 ab       	std	Y+48, r25	; 0x30
    10aa:	b6 cd       	rjmp	.-1172   	; 0xc18 <gc_execute_line+0xe6>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
    10ac:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <check_for_tool>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	88 ab       	std	Y+48, r24	; 0x30
    10b4:	b1 cd       	rjmp	.-1182   	; 0xc18 <gc_execute_line+0xe6>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    10b6:	80 91 0a 02 	lds	r24, 0x020A
    10ba:	88 23       	and	r24, r24
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <gc_execute_line+0x58e>
    10be:	b0 cd       	rjmp	.-1184   	; 0xc20 <gc_execute_line+0xee>

  char_counter = 0;
    10c0:	1b 82       	std	Y+3, r1	; 0x03
    10c2:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
    10c4:	80 e1       	ldi	r24, 0x10	; 16
    10c6:	d6 01       	movw	r26, r12
    10c8:	1d 92       	st	X+, r1
    10ca:	8a 95       	dec	r24
    10cc:	e9 f7       	brne	.-6      	; 0x10c8 <gc_execute_line+0x596>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
    10ce:	d1 01       	movw	r26, r2
    10d0:	ec e1       	ldi	r30, 0x1C	; 28
    10d2:	f2 e0       	ldi	r31, 0x02	; 2
    10d4:	80 e1       	ldi	r24, 0x10	; 16
    10d6:	01 90       	ld	r0, Z+
    10d8:	0d 92       	st	X+, r0
    10da:	81 50       	subi	r24, 0x01	; 1
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <gc_execute_line+0x5a4>
    10de:	1c aa       	std	Y+52, r1	; 0x34
    10e0:	1d aa       	std	Y+53, r1	; 0x35
    10e2:	b0 e8       	ldi	r27, 0x80	; 128
    10e4:	be ab       	std	Y+54, r27	; 0x36
    10e6:	ef eb       	ldi	r30, 0xBF	; 191
    10e8:	ef ab       	std	Y+55, r30	; 0x37
    10ea:	1b aa       	std	Y+51, r1	; 0x33
    10ec:	1a aa       	std	Y+50, r1	; 0x32

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    10ee:	c4 01       	movw	r24, r8
    10f0:	b2 01       	movw	r22, r4
    10f2:	a5 01       	movw	r20, r10
    10f4:	93 01       	movw	r18, r6
    10f6:	0e 94 27 05 	call	0xa4e	; 0xa4e <next_statement>
    10fa:	89 2b       	or	r24, r25
    10fc:	09 f4       	brne	.+2      	; 0x1100 <gc_execute_line+0x5ce>
    10fe:	ed c0       	rjmp	.+474    	; 0x12da <gc_execute_line+0x7a8>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    1100:	cc 80       	ldd	r12, Y+4	; 0x04
    1102:	dd 80       	ldd	r13, Y+5	; 0x05
    1104:	ee 80       	ldd	r14, Y+6	; 0x06
    1106:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1108:	80 91 0d 02 	lds	r24, 0x020D
    110c:	88 23       	and	r24, r24
    110e:	d9 f4       	brne	.+54     	; 0x1146 <gc_execute_line+0x614>
    1110:	a7 01       	movw	r20, r14
    1112:	96 01       	movw	r18, r12

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1114:	09 81       	ldd	r16, Y+1	; 0x01
    1116:	0d 34       	cpi	r16, 0x4D	; 77
    1118:	19 f1       	breq	.+70     	; 0x1160 <gc_execute_line+0x62e>
    111a:	0e 34       	cpi	r16, 0x4E	; 78
    111c:	60 f5       	brcc	.+88     	; 0x1176 <gc_execute_line+0x644>
    111e:	08 34       	cpi	r16, 0x48	; 72
    1120:	09 f4       	brne	.+2      	; 0x1124 <gc_execute_line+0x5f2>
    1122:	7a c0       	rjmp	.+244    	; 0x1218 <gc_execute_line+0x6e6>
    1124:	09 34       	cpi	r16, 0x49	; 73
    1126:	b8 f5       	brcc	.+110    	; 0x1196 <gc_execute_line+0x664>
    1128:	03 34       	cpi	r16, 0x43	; 67
    112a:	09 f4       	brne	.+2      	; 0x112e <gc_execute_line+0x5fc>
    112c:	8a c0       	rjmp	.+276    	; 0x1242 <gc_execute_line+0x710>
    112e:	06 34       	cpi	r16, 0x46	; 70
    1130:	f1 f6       	brne	.-68     	; 0x10ee <gc_execute_line+0x5bc>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    1132:	80 91 0c 02 	lds	r24, 0x020C
    1136:	88 23       	and	r24, r24
    1138:	09 f4       	brne	.+2      	; 0x113c <gc_execute_line+0x60a>
    113a:	a9 c0       	rjmp	.+338    	; 0x128e <gc_execute_line+0x75c>
    113c:	2c ab       	std	Y+52, r18	; 0x34
    113e:	3d ab       	std	Y+53, r19	; 0x35
    1140:	4e ab       	std	Y+54, r20	; 0x36
    1142:	5f ab       	std	Y+55, r21	; 0x37
    1144:	d4 cf       	rjmp	.-88     	; 0x10ee <gc_execute_line+0x5bc>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1146:	c7 01       	movw	r24, r14
    1148:	b6 01       	movw	r22, r12
    114a:	23 e3       	ldi	r18, 0x33	; 51
    114c:	33 e3       	ldi	r19, 0x33	; 51
    114e:	4b ec       	ldi	r20, 0xCB	; 203
    1150:	51 e4       	ldi	r21, 0x41	; 65
    1152:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1156:	9b 01       	movw	r18, r22
    1158:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    115a:	09 81       	ldd	r16, Y+1	; 0x01
    115c:	0d 34       	cpi	r16, 0x4D	; 77
    115e:	e9 f6       	brne	.-70     	; 0x111a <gc_execute_line+0x5e8>
	feeder_x_pos = x;
}

void set_feeder_y( double y )
{
	feeder_x_pos = y;
    1160:	20 93 06 02 	sts	0x0206, r18
    1164:	30 93 07 02 	sts	0x0207, r19
    1168:	40 93 08 02 	sts	0x0208, r20
    116c:	50 93 09 02 	sts	0x0209, r21
    1170:	a1 e0       	ldi	r26, 0x01	; 1
    1172:	a8 ab       	std	Y+48, r26	; 0x30
    1174:	bc cf       	rjmp	.-136    	; 0x10ee <gc_execute_line+0x5bc>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1176:	03 35       	cpi	r16, 0x53	; 83
    1178:	09 f4       	brne	.+2      	; 0x117c <gc_execute_line+0x64a>
    117a:	45 c0       	rjmp	.+138    	; 0x1206 <gc_execute_line+0x6d4>
    117c:	04 35       	cpi	r16, 0x54	; 84
    117e:	e8 f4       	brcc	.+58     	; 0x11ba <gc_execute_line+0x688>
    1180:	0e 34       	cpi	r16, 0x4E	; 78
    1182:	09 f4       	brne	.+2      	; 0x1186 <gc_execute_line+0x654>
    1184:	53 c0       	rjmp	.+166    	; 0x122c <gc_execute_line+0x6fa>
    1186:	00 35       	cpi	r16, 0x50	; 80
    1188:	09 f0       	breq	.+2      	; 0x118c <gc_execute_line+0x65a>
    118a:	b1 cf       	rjmp	.-158    	; 0x10ee <gc_execute_line+0x5bc>
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
    118c:	c8 86       	std	Y+8, r12	; 0x08
    118e:	d9 86       	std	Y+9, r13	; 0x09
    1190:	ea 86       	std	Y+10, r14	; 0x0a
    1192:	fb 86       	std	Y+11, r15	; 0x0b
    1194:	ac cf       	rjmp	.-168    	; 0x10ee <gc_execute_line+0x5bc>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1196:	0c 34       	cpi	r16, 0x4C	; 76
    1198:	08 f0       	brcs	.+2      	; 0x119c <gc_execute_line+0x66a>
    119a:	a9 cf       	rjmp	.-174    	; 0x10ee <gc_execute_line+0x5bc>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    119c:	e0 2f       	mov	r30, r16
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	e9 54       	subi	r30, 0x49	; 73
    11a2:	f0 40       	sbci	r31, 0x00	; 0
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	e8 0d       	add	r30, r8
    11ae:	f9 1d       	adc	r31, r9
    11b0:	23 8f       	std	Z+27, r18	; 0x1b
    11b2:	34 8f       	std	Z+28, r19	; 0x1c
    11b4:	45 8f       	std	Z+29, r20	; 0x1d
    11b6:	56 8f       	std	Z+30, r21	; 0x1e
    11b8:	9a cf       	rjmp	.-204    	; 0x10ee <gc_execute_line+0x5bc>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11ba:	80 2f       	mov	r24, r16
    11bc:	88 55       	subi	r24, 0x58	; 88
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <gc_execute_line+0x692>
    11c2:	95 cf       	rjmp	.-214    	; 0x10ee <gc_execute_line+0x5bc>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    11c4:	80 91 0e 02 	lds	r24, 0x020E
    11c8:	88 23       	and	r24, r24
    11ca:	09 f0       	breq	.+2      	; 0x11ce <gc_execute_line+0x69c>
    11cc:	4c c0       	rjmp	.+152    	; 0x1266 <gc_execute_line+0x734>
    11ce:	f9 a9       	ldd	r31, Y+49	; 0x31
    11d0:	ff 23       	and	r31, r31
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <gc_execute_line+0x6a4>
    11d4:	48 c0       	rjmp	.+144    	; 0x1266 <gc_execute_line+0x734>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    11d6:	10 e0       	ldi	r17, 0x00	; 0
    11d8:	08 55       	subi	r16, 0x58	; 88
    11da:	10 40       	sbci	r17, 0x00	; 0
    11dc:	00 0f       	add	r16, r16
    11de:	11 1f       	adc	r17, r17
    11e0:	00 0f       	add	r16, r16
    11e2:	11 1f       	adc	r17, r17
    11e4:	08 0d       	add	r16, r8
    11e6:	19 1d       	adc	r17, r9
    11e8:	d8 01       	movw	r26, r16
    11ea:	1b 96       	adiw	r26, 0x0b	; 11
    11ec:	6d 91       	ld	r22, X+
    11ee:	7d 91       	ld	r23, X+
    11f0:	8d 91       	ld	r24, X+
    11f2:	9c 91       	ld	r25, X
    11f4:	1e 97       	sbiw	r26, 0x0e	; 14
    11f6:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    11fa:	f8 01       	movw	r30, r16
    11fc:	63 87       	std	Z+11, r22	; 0x0b
    11fe:	74 87       	std	Z+12, r23	; 0x0c
    1200:	85 87       	std	Z+13, r24	; 0x0d
    1202:	96 87       	std	Z+14, r25	; 0x0e
    1204:	74 cf       	rjmp	.-280    	; 0x10ee <gc_execute_line+0x5bc>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    1206:	c7 01       	movw	r24, r14
    1208:	b6 01       	movw	r22, r12
    120a:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    120e:	70 93 2e 02 	sts	0x022E, r23
    1212:	60 93 2d 02 	sts	0x022D, r22
    1216:	6b cf       	rjmp	.-298    	; 0x10ee <gc_execute_line+0x5bc>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    1218:	ca 01       	movw	r24, r20
    121a:	b9 01       	movw	r22, r18
    121c:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
    1220:	7b ab       	std	Y+51, r23	; 0x33
    1222:	6a ab       	std	Y+50, r22	; 0x32
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    1224:	89 e0       	ldi	r24, 0x09	; 9
    1226:	80 93 0b 02 	sts	0x020B, r24
    122a:	61 cf       	rjmp	.-318    	; 0x10ee <gc_execute_line+0x5bc>

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
    122c:	20 93 06 02 	sts	0x0206, r18
    1230:	30 93 07 02 	sts	0x0207, r19
    1234:	40 93 08 02 	sts	0x0208, r20
    1238:	50 93 09 02 	sts	0x0209, r21
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	98 ab       	std	Y+48, r25	; 0x30
    1240:	56 cf       	rjmp	.-340    	; 0x10ee <gc_execute_line+0x5bc>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    1242:	80 91 0e 02 	lds	r24, 0x020E
    1246:	88 23       	and	r24, r24
    1248:	e9 f4       	brne	.+58     	; 0x1284 <gc_execute_line+0x752>
    124a:	f9 a9       	ldd	r31, Y+49	; 0x31
    124c:	ff 23       	and	r31, r31
    124e:	d1 f4       	brne	.+52     	; 0x1284 <gc_execute_line+0x752>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
    1250:	68 8d       	ldd	r22, Y+24	; 0x18
    1252:	79 8d       	ldd	r23, Y+25	; 0x19
    1254:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1256:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1258:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    125c:	68 8f       	std	Y+24, r22	; 0x18
    125e:	79 8f       	std	Y+25, r23	; 0x19
    1260:	8a 8f       	std	Y+26, r24	; 0x1a
    1262:	9b 8f       	std	Y+27, r25	; 0x1b
    1264:	44 cf       	rjmp	.-376    	; 0x10ee <gc_execute_line+0x5bc>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    1266:	e0 2f       	mov	r30, r16
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	e8 55       	subi	r30, 0x58	; 88
    126c:	f0 40       	sbci	r31, 0x00	; 0
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	e8 0d       	add	r30, r8
    1278:	f9 1d       	adc	r31, r9
    127a:	23 87       	std	Z+11, r18	; 0x0b
    127c:	34 87       	std	Z+12, r19	; 0x0c
    127e:	45 87       	std	Z+13, r20	; 0x0d
    1280:	56 87       	std	Z+14, r21	; 0x0e
    1282:	35 cf       	rjmp	.-406    	; 0x10ee <gc_execute_line+0x5bc>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
    1284:	28 8f       	std	Y+24, r18	; 0x18
    1286:	39 8f       	std	Y+25, r19	; 0x19
    1288:	4a 8f       	std	Y+26, r20	; 0x1a
    128a:	5b 8f       	std	Y+27, r21	; 0x1b
    128c:	30 cf       	rjmp	.-416    	; 0x10ee <gc_execute_line+0x5bc>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    128e:	80 91 0b 02 	lds	r24, 0x020B
    1292:	88 23       	and	r24, r24
    1294:	89 f4       	brne	.+34     	; 0x12b8 <gc_execute_line+0x786>
          gc.seek_rate = unit_converted_value/60;
    1296:	ca 01       	movw	r24, r20
    1298:	b9 01       	movw	r22, r18
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e7       	ldi	r20, 0x70	; 112
    12a0:	52 e4       	ldi	r21, 0x42	; 66
    12a2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    12a6:	60 93 18 02 	sts	0x0218, r22
    12aa:	70 93 19 02 	sts	0x0219, r23
    12ae:	80 93 1a 02 	sts	0x021A, r24
    12b2:	90 93 1b 02 	sts	0x021B, r25
    12b6:	1b cf       	rjmp	.-458    	; 0x10ee <gc_execute_line+0x5bc>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
    12b8:	ca 01       	movw	r24, r20
    12ba:	b9 01       	movw	r22, r18
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e7       	ldi	r20, 0x70	; 112
    12c2:	52 e4       	ldi	r21, 0x42	; 66
    12c4:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    12c8:	60 93 14 02 	sts	0x0214, r22
    12cc:	70 93 15 02 	sts	0x0215, r23
    12d0:	80 93 16 02 	sts	0x0216, r24
    12d4:	90 93 17 02 	sts	0x0217, r25
    12d8:	0a cf       	rjmp	.-492    	; 0x10ee <gc_execute_line+0x5bc>

    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    12da:	80 91 0a 02 	lds	r24, 0x020A
    12de:	88 23       	and	r24, r24
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <gc_execute_line+0x7b2>
    12e2:	9e cc       	rjmp	.-1732   	; 0xc20 <gc_execute_line+0xee>
    
  // Update spindle state
  if (gc.spindle_direction) {
    12e4:	80 91 10 02 	lds	r24, 0x0210
    12e8:	90 91 11 02 	lds	r25, 0x0211
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <gc_execute_line+0x7c0>
    12f0:	5d c0       	rjmp	.+186    	; 0x13ac <gc_execute_line+0x87a>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    12f2:	40 91 2d 02 	lds	r20, 0x022D
    12f6:	50 91 2e 02 	lds	r21, 0x022E
    12fa:	66 27       	eor	r22, r22
    12fc:	57 fd       	sbrc	r21, 7
    12fe:	60 95       	com	r22
    1300:	76 2f       	mov	r23, r22
    1302:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    1306:	80 91 12 02 	lds	r24, 0x0212
    130a:	90 91 13 02 	lds	r25, 0x0213
    130e:	89 2b       	or	r24, r25
    1310:	09 f4       	brne	.+2      	; 0x1314 <gc_execute_line+0x7e2>
    1312:	4f c0       	rjmp	.+158    	; 0x13b2 <gc_execute_line+0x880>
  	coolant_flood(TRUE);
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 4c 03 	call	0x698	; 0x698 <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    131c:	b8 a9       	ldd	r27, Y+48	; 0x30
    131e:	b1 30       	cpi	r27, 0x01	; 1
    1320:	09 f4       	brne	.+2      	; 0x1324 <gc_execute_line+0x7f2>
    1322:	63 c0       	rjmp	.+198    	; 0x13ea <gc_execute_line+0x8b8>
    1324:	b1 30       	cpi	r27, 0x01	; 1
    1326:	08 f0       	brcs	.+2      	; 0x132a <gc_execute_line+0x7f8>
    1328:	49 c0       	rjmp	.+146    	; 0x13bc <gc_execute_line+0x88a>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    132a:	80 91 0b 02 	lds	r24, 0x020B
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	09 f4       	brne	.+2      	; 0x1334 <gc_execute_line+0x802>
    1332:	7a c0       	rjmp	.+244    	; 0x1428 <gc_execute_line+0x8f6>
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	08 f0       	brcs	.+2      	; 0x133a <gc_execute_line+0x808>
    1338:	6f c0       	rjmp	.+222    	; 0x1418 <gc_execute_line+0x8e6>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    133a:	00 d0       	rcall	.+0      	; 0x133c <gc_execute_line+0x80a>
    133c:	00 d0       	rcall	.+0      	; 0x133e <gc_execute_line+0x80c>
    133e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1340:	7d 85       	ldd	r23, Y+13	; 0x0d
    1342:	8e 85       	ldd	r24, Y+14	; 0x0e
    1344:	9f 85       	ldd	r25, Y+15	; 0x0f
    1346:	28 89       	ldd	r18, Y+16	; 0x10
    1348:	39 89       	ldd	r19, Y+17	; 0x11
    134a:	4a 89       	ldd	r20, Y+18	; 0x12
    134c:	5b 89       	ldd	r21, Y+19	; 0x13
    134e:	ec 88       	ldd	r14, Y+20	; 0x14
    1350:	fd 88       	ldd	r15, Y+21	; 0x15
    1352:	0e 89       	ldd	r16, Y+22	; 0x16
    1354:	1f 89       	ldd	r17, Y+23	; 0x17
    1356:	a8 8c       	ldd	r10, Y+24	; 0x18
    1358:	b9 8c       	ldd	r11, Y+25	; 0x19
    135a:	ca 8c       	ldd	r12, Y+26	; 0x1a
    135c:	db 8c       	ldd	r13, Y+27	; 0x1b
    135e:	60 90 18 02 	lds	r6, 0x0218
    1362:	70 90 19 02 	lds	r7, 0x0219
    1366:	80 90 1a 02 	lds	r8, 0x021A
    136a:	90 90 1b 02 	lds	r9, 0x021B
    136e:	ad b7       	in	r26, 0x3d	; 61
    1370:	be b7       	in	r27, 0x3e	; 62
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	6d 92       	st	X+, r6
    1376:	7d 92       	st	X+, r7
    1378:	8d 92       	st	X+, r8
    137a:	9c 92       	st	X, r9
    137c:	14 97       	sbiw	r26, 0x04	; 4
    137e:	16 96       	adiw	r26, 0x06	; 6
    1380:	1c 92       	st	X, r1
    1382:	1e 92       	st	-X, r1
    1384:	15 97       	sbiw	r26, 0x05	; 5
    1386:	0e 94 4d 10 	call	0x209a	; 0x209a <plan_buffer_line>
    138a:	ed b7       	in	r30, 0x3d	; 61
    138c:	fe b7       	in	r31, 0x3e	; 62
    138e:	36 96       	adiw	r30, 0x06	; 6
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	fe bf       	out	0x3e, r31	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    139a:	ac e1       	ldi	r26, 0x1C	; 28
    139c:	b2 e0       	ldi	r27, 0x02	; 2
    139e:	f1 01       	movw	r30, r2
    13a0:	80 e1       	ldi	r24, 0x10	; 16
    13a2:	01 90       	ld	r0, Z+
    13a4:	0d 92       	st	X+, r0
    13a6:	81 50       	subi	r24, 0x01	; 1
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <gc_execute_line+0x870>
    13aa:	2a cd       	rjmp	.-1452   	; 0xe00 <gc_execute_line+0x2ce>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    13ac:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <spindle_stop>
    13b0:	aa cf       	rjmp	.-172    	; 0x1306 <gc_execute_line+0x7d4>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 4c 03 	call	0x698	; 0x698 <coolant_flood>
    13ba:	b0 cf       	rjmp	.-160    	; 0x131c <gc_execute_line+0x7ea>
  }
  
  // Perform any physical actions
  switch (next_action) {
    13bc:	b2 30       	cpi	r27, 0x02	; 2
    13be:	21 f1       	breq	.+72     	; 0x1408 <gc_execute_line+0x8d6>
    13c0:	b3 30       	cpi	r27, 0x03	; 3
    13c2:	59 f7       	brne	.-42     	; 0x139a <gc_execute_line+0x868>
	  rotate_head( head);
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    13c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    13c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    13c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    13cc:	28 89       	ldd	r18, Y+16	; 0x10
    13ce:	39 89       	ldd	r19, Y+17	; 0x11
    13d0:	4a 89       	ldd	r20, Y+18	; 0x12
    13d2:	5b 89       	ldd	r21, Y+19	; 0x13
    13d4:	ec 88       	ldd	r14, Y+20	; 0x14
    13d6:	fd 88       	ldd	r15, Y+21	; 0x15
    13d8:	0e 89       	ldd	r16, Y+22	; 0x16
    13da:	1f 89       	ldd	r17, Y+23	; 0x17
    13dc:	a8 8c       	ldd	r10, Y+24	; 0x18
    13de:	b9 8c       	ldd	r11, Y+25	; 0x19
    13e0:	ca 8c       	ldd	r12, Y+26	; 0x1a
    13e2:	db 8c       	ldd	r13, Y+27	; 0x1b
    13e4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <plan_set_current>
    13e8:	d8 cf       	rjmp	.-80     	; 0x139a <gc_execute_line+0x868>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    13ea:	68 85       	ldd	r22, Y+8	; 0x08
    13ec:	79 85       	ldd	r23, Y+9	; 0x09
    13ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	4a e7       	ldi	r20, 0x7A	; 122
    13f8:	54 e4       	ldi	r21, 0x44	; 68
    13fa:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    13fe:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
    1402:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <mc_dwell>
    1406:	c9 cf       	rjmp	.-110    	; 0x139a <gc_execute_line+0x868>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    1408:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <mc_go_home>
    140c:	80 e1       	ldi	r24, 0x10	; 16
    140e:	f1 01       	movw	r30, r2
    1410:	11 92       	st	Z+, r1
    1412:	8a 95       	dec	r24
    1414:	e9 f7       	brne	.-6      	; 0x1410 <gc_execute_line+0x8de>
    1416:	c1 cf       	rjmp	.-126    	; 0x139a <gc_execute_line+0x868>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1418:	89 30       	cpi	r24, 0x09	; 9
    141a:	09 f0       	breq	.+2      	; 0x141e <gc_execute_line+0x8ec>
    141c:	be cf       	rjmp	.-132    	; 0x139a <gc_execute_line+0x868>
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    141e:	8a a9       	ldd	r24, Y+50	; 0x32
    1420:	9b a9       	ldd	r25, Y+51	; 0x33
    1422:	0e 94 77 17 	call	0x2eee	; 0x2eee <rotate_head>
    1426:	b9 cf       	rjmp	.-142    	; 0x139a <gc_execute_line+0x868>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    1428:	8c 85       	ldd	r24, Y+12	; 0x0c
    142a:	9d 85       	ldd	r25, Y+13	; 0x0d
    142c:	ae 85       	ldd	r26, Y+14	; 0x0e
    142e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1430:	8c a7       	std	Y+44, r24	; 0x2c
    1432:	9d a7       	std	Y+45, r25	; 0x2d
    1434:	ae a7       	std	Y+46, r26	; 0x2e
    1436:	bf a7       	std	Y+47, r27	; 0x2f
    1438:	68 88       	ldd	r6, Y+16	; 0x10
    143a:	79 88       	ldd	r7, Y+17	; 0x11
    143c:	8a 88       	ldd	r8, Y+18	; 0x12
    143e:	9b 88       	ldd	r9, Y+19	; 0x13
    1440:	ec 88       	ldd	r14, Y+20	; 0x14
    1442:	fd 88       	ldd	r15, Y+21	; 0x15
    1444:	0e 89       	ldd	r16, Y+22	; 0x16
    1446:	1f 89       	ldd	r17, Y+23	; 0x17
    1448:	a8 8c       	ldd	r10, Y+24	; 0x18
    144a:	b9 8c       	ldd	r11, Y+25	; 0x19
    144c:	ca 8c       	ldd	r12, Y+26	; 0x1a
    144e:	db 8c       	ldd	r13, Y+27	; 0x1b
    1450:	60 91 0c 02 	lds	r22, 0x020C
    1454:	66 23       	and	r22, r22
    1456:	61 f4       	brne	.+24     	; 0x1470 <gc_execute_line+0x93e>
    1458:	90 91 14 02 	lds	r25, 0x0214
    145c:	9c ab       	std	Y+52, r25	; 0x34
    145e:	a0 91 15 02 	lds	r26, 0x0215
    1462:	ad ab       	std	Y+53, r26	; 0x35
    1464:	b0 91 16 02 	lds	r27, 0x0216
    1468:	be ab       	std	Y+54, r27	; 0x36
    146a:	e0 91 17 02 	lds	r30, 0x0217
    146e:	ef ab       	std	Y+55, r30	; 0x37
    1470:	00 d0       	rcall	.+0      	; 0x1472 <gc_execute_line+0x940>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <gc_execute_line+0x942>
    1474:	4d b6       	in	r4, 0x3d	; 61
    1476:	5e b6       	in	r5, 0x3e	; 62
    1478:	08 94       	sec
    147a:	41 1c       	adc	r4, r1
    147c:	51 1c       	adc	r5, r1
    147e:	2c a9       	ldd	r18, Y+52	; 0x34
    1480:	3d a9       	ldd	r19, Y+53	; 0x35
    1482:	4e a9       	ldd	r20, Y+54	; 0x36
    1484:	5f a9       	ldd	r21, Y+55	; 0x37
    1486:	c9 01       	movw	r24, r18
    1488:	da 01       	movw	r26, r20
    148a:	ed b7       	in	r30, 0x3d	; 61
    148c:	fe b7       	in	r31, 0x3e	; 62
    148e:	81 83       	std	Z+1, r24	; 0x01
    1490:	92 83       	std	Z+2, r25	; 0x02
    1492:	a3 83       	std	Z+3, r26	; 0x03
    1494:	b4 83       	std	Z+4, r27	; 0x04
    1496:	d2 01       	movw	r26, r4
    1498:	14 96       	adiw	r26, 0x04	; 4
    149a:	6c 93       	st	X, r22
    149c:	14 97       	sbiw	r26, 0x04	; 4
    149e:	15 96       	adiw	r26, 0x05	; 5
    14a0:	1c 92       	st	X, r1
    14a2:	6c a5       	ldd	r22, Y+44	; 0x2c
    14a4:	7d a5       	ldd	r23, Y+45	; 0x2d
    14a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    14a8:	9f a5       	ldd	r25, Y+47	; 0x2f
    14aa:	a4 01       	movw	r20, r8
    14ac:	93 01       	movw	r18, r6
    14ae:	0e 94 4d 10 	call	0x209a	; 0x209a <plan_buffer_line>
    14b2:	ed b7       	in	r30, 0x3d	; 61
    14b4:	fe b7       	in	r31, 0x3e	; 62
    14b6:	36 96       	adiw	r30, 0x06	; 6
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	fe bf       	out	0x3e, r31	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	ed bf       	out	0x3d, r30	; 61
    14c2:	6b cf       	rjmp	.-298    	; 0x139a <gc_execute_line+0x868>

000014c4 <theta>:


// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    14c4:	af 92       	push	r10
    14c6:	bf 92       	push	r11
    14c8:	cf 92       	push	r12
    14ca:	df 92       	push	r13
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	79 01       	movw	r14, r18
    14d6:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    14d8:	5f 77       	andi	r21, 0x7F	; 127
    14da:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    14de:	0e 94 a9 2b 	call	0x5752	; 0x5752 <atan>
    14e2:	5b 01       	movw	r10, r22
    14e4:	6c 01       	movw	r12, r24
  if (y>0) {
    14e6:	c8 01       	movw	r24, r16
    14e8:	b7 01       	movw	r22, r14
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
    14f6:	18 16       	cp	r1, r24
    14f8:	5c f4       	brge	.+22     	; 0x1510 <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
    14fa:	b5 01       	movw	r22, r10
    14fc:	c6 01       	movw	r24, r12
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
    1510:	c6 01       	movw	r24, r12
    1512:	b5 01       	movw	r22, r10
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
    1520:	18 16       	cp	r1, r24
    1522:	5c f4       	brge	.+22     	; 0x153a <theta+0x76>
    {
      return(M_PI-theta);
    1524:	6b ed       	ldi	r22, 0xDB	; 219
    1526:	7f e0       	ldi	r23, 0x0F	; 15
    1528:	89 e4       	ldi	r24, 0x49	; 73
    152a:	90 e4       	ldi	r25, 0x40	; 64
    152c:	a6 01       	movw	r20, r12
    152e:	95 01       	movw	r18, r10
    1530:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    1534:	5b 01       	movw	r10, r22
    1536:	6c 01       	movw	r12, r24
    1538:	e0 cf       	rjmp	.-64     	; 0x14fa <theta+0x36>
    } else {
      return(-M_PI-theta);
    153a:	6b ed       	ldi	r22, 0xDB	; 219
    153c:	7f e0       	ldi	r23, 0x0F	; 15
    153e:	89 e4       	ldi	r24, 0x49	; 73
    1540:	90 ec       	ldi	r25, 0xC0	; 192
    1542:	a6 01       	movw	r20, r12
    1544:	95 01       	movw	r18, r10
    1546:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    154a:	5b 01       	movw	r10, r22
    154c:	6c 01       	movw	r12, r24
    154e:	d5 cf       	rjmp	.-86     	; 0x14fa <theta+0x36>

00001550 <main>:
// stepper interrupt ack to host
extern char ackHost;

int main(void)
{
  sp_init();        
    1550:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <sp_init>
  settings_init();  
    1554:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <settings_init>
  plan_init();      
    1558:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <plan_init>
  st_init();        
    155c:	0e 94 85 18 	call	0x310a	; 0x310a <st_init>
  limits_init();
    1560:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <limits_init>
  spindle_init();   
    1564:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <spindle_init>
  coolant_init();
    1568:	0e 94 4a 03 	call	0x694	; 0x694 <coolant_init>
  atc_init();
    156c:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <atc_init>
  head_init();
    1570:	0e 94 0d 20 	call	0x401a	; 0x401a <head_init>
  vacuum_init();
    1574:	0e 94 15 21 	call	0x422a	; 0x422a <vacuum_init>
  panel_init();
    1578:	0e 94 61 20 	call	0x40c2	; 0x40c2 <panel_init>
  gc_init();
    157c:	0e 94 5b 05 	call	0xab6	; 0xab6 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n"));
    1580:	8f e0       	ldi	r24, 0x0F	; 15
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <main+0x42>
	if( ackHost != 0 ) {
		serialWrite( ackHost );
		ackHost = 0;
	}

    sp_process(); // ... process the serial protocol
    158a:	0e 94 81 14 	call	0x2902	; 0x2902 <sp_process>

	process_panel(); // check the panel
    158e:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <process_panel>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    1592:	83 b7       	in	r24, 0x33	; 51
    1594:	81 60       	ori	r24, 0x01	; 1
    1596:	83 bf       	out	0x33, r24	; 51
    1598:	88 95       	sleep
    159a:	83 b7       	in	r24, 0x33	; 51
    159c:	8e 7f       	andi	r24, 0xFE	; 254
    159e:	83 bf       	out	0x33, r24	; 51
	
	if( ackHost != 0 ) {
    15a0:	80 91 54 05 	lds	r24, 0x0554
    15a4:	88 23       	and	r24, r24
    15a6:	89 f3       	breq	.-30     	; 0x158a <main+0x3a>
		serialWrite( ackHost );
    15a8:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <serialWrite>
		ackHost = 0;
    15ac:	10 92 54 05 	sts	0x0554, r1
    15b0:	ec cf       	rjmp	.-40     	; 0x158a <main+0x3a>

000015b2 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    15b2:	0e 94 a3 19 	call	0x3346	; 0x3346 <st_go_home>
}
    15b6:	08 95       	ret

000015b8 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	7b 01       	movw	r14, r22
    15ca:	8c 01       	movw	r16, r24
  st_synchronize();
    15cc:	0e 94 21 1a 	call	0x3442	; 0x3442 <st_synchronize>
  _delay_ms(milliseconds);
    15d0:	c8 01       	movw	r24, r16
    15d2:	b7 01       	movw	r22, r14
    15d4:	0e 94 81 2c 	call	0x5902	; 0x5902 <__floatunsisf>
    15d8:	5b 01       	movw	r10, r22
    15da:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a e7       	ldi	r20, 0x7A	; 122
    15e2:	55 e4       	ldi	r21, 0x45	; 69
    15e4:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    15e8:	7b 01       	movw	r14, r22
    15ea:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	7c f1       	brlt	.+94     	; 0x165a <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    15fc:	c8 01       	movw	r24, r16
    15fe:	b7 01       	movw	r22, r14
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	57 e4       	ldi	r21, 0x47	; 71
    1608:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
    160c:	18 16       	cp	r1, r24
    160e:	ac f4       	brge	.+42     	; 0x163a <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	c6 01       	movw	r24, r12
    1612:	b5 01       	movw	r22, r10
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e2       	ldi	r20, 0x20	; 32
    161a:	51 e4       	ldi	r21, 0x41	; 65
    161c:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1620:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
    1624:	cb 01       	movw	r24, r22
		while(__ticks)
    1626:	67 2b       	or	r22, r23
    1628:	79 f0       	breq	.+30     	; 0x1648 <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    162a:	20 e9       	ldi	r18, 0x90	; 144
    162c:	31 e0       	ldi	r19, 0x01	; 1
    162e:	f9 01       	movw	r30, r18
    1630:	31 97       	sbiw	r30, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1636:	d9 f7       	brne	.-10     	; 0x162e <mc_dwell+0x76>
    1638:	07 c0       	rjmp	.+14     	; 0x1648 <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163a:	c8 01       	movw	r24, r16
    163c:	b7 01       	movw	r22, r14
    163e:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
    1642:	cb 01       	movw	r24, r22
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <mc_dwell+0x8c>
}
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	bf 90       	pop	r11
    1656:	af 90       	pop	r10
    1658:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	f1 cf       	rjmp	.-30     	; 0x1642 <mc_dwell+0x8a>

00001660 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    1660:	fc 01       	movw	r30, r24
    1662:	60 91 af 06 	lds	r22, 0x06AF
    1666:	70 91 b0 06 	lds	r23, 0x06B0
    166a:	80 91 b1 06 	lds	r24, 0x06B1
    166e:	90 91 b2 06 	lds	r25, 0x06B2
    1672:	21 a5       	ldd	r18, Z+41	; 0x29
    1674:	32 a5       	ldd	r19, Z+42	; 0x2a
    1676:	43 a5       	ldd	r20, Z+43	; 0x2b
    1678:	54 a5       	ldd	r21, Z+44	; 0x2c
    167a:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    167e:	08 95       	ret

00001680 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    1680:	80 91 20 05 	lds	r24, 0x0520
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	08 95       	ret

00001688 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1688:	20 91 0c 05 	lds	r18, 0x050C
    168c:	30 91 0d 05 	lds	r19, 0x050D
    1690:	80 91 0e 05 	lds	r24, 0x050E
    1694:	90 91 0f 05 	lds	r25, 0x050F
    1698:	28 17       	cp	r18, r24
    169a:	39 07       	cpc	r19, r25
    169c:	69 f0       	breq	.+26     	; 0x16b8 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    169e:	80 91 0e 05 	lds	r24, 0x050E
    16a2:	90 91 0f 05 	lds	r25, 0x050F
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	6a e0       	ldi	r22, 0x0A	; 10
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
    16b0:	90 93 0f 05 	sts	0x050F, r25
    16b4:	80 93 0e 05 	sts	0x050E, r24
    16b8:	08 95       	ret

000016ba <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    16ba:	20 91 0c 05 	lds	r18, 0x050C
    16be:	30 91 0d 05 	lds	r19, 0x050D
    16c2:	80 91 0e 05 	lds	r24, 0x050E
    16c6:	90 91 0f 05 	lds	r25, 0x050F
    16ca:	28 17       	cp	r18, r24
    16cc:	39 07       	cpc	r19, r25
    16ce:	d1 f0       	breq	.+52     	; 0x1704 <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    16d0:	20 91 0e 05 	lds	r18, 0x050E
    16d4:	30 91 0f 05 	lds	r19, 0x050F
    16d8:	c9 01       	movw	r24, r18
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	ac 01       	movw	r20, r24
    16e8:	44 0f       	add	r20, r20
    16ea:	55 1f       	adc	r21, r21
    16ec:	44 0f       	add	r20, r20
    16ee:	55 1f       	adc	r21, r21
    16f0:	44 0f       	add	r20, r20
    16f2:	55 1f       	adc	r21, r21
    16f4:	48 0f       	add	r20, r24
    16f6:	59 1f       	adc	r21, r25
    16f8:	42 0f       	add	r20, r18
    16fa:	53 1f       	adc	r21, r19
    16fc:	4e 5c       	subi	r20, 0xCE	; 206
    16fe:	5d 4f       	sbci	r21, 0xFD	; 253
}
    1700:	ca 01       	movw	r24, r20
    1702:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    1708:	ca 01       	movw	r24, r20
    170a:	08 95       	ret

0000170c <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    170c:	4f 92       	push	r4
    170e:	5f 92       	push	r5
    1710:	6f 92       	push	r6
    1712:	7f 92       	push	r7
    1714:	8f 92       	push	r8
    1716:	9f 92       	push	r9
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	ec 01       	movw	r28, r24
    172e:	4b 01       	movw	r8, r22
  if(!current) { return; }
    1730:	61 15       	cp	r22, r1
    1732:	71 05       	cpc	r23, r1
    1734:	99 f0       	breq	.+38     	; 0x175c <planner_forward_pass_kernel+0x50>
  if(previous) {
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	89 f0       	breq	.+34     	; 0x175c <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    173a:	e9 a8       	ldd	r14, Y+49	; 0x31
    173c:	fa a8       	ldd	r15, Y+50	; 0x32
    173e:	0b a9       	ldd	r16, Y+51	; 0x33
    1740:	1c a9       	ldd	r17, Y+52	; 0x34
    1742:	fb 01       	movw	r30, r22
    1744:	41 a8       	ldd	r4, Z+49	; 0x31
    1746:	52 a8       	ldd	r5, Z+50	; 0x32
    1748:	63 a8       	ldd	r6, Z+51	; 0x33
    174a:	74 a8       	ldd	r7, Z+52	; 0x34
    174c:	c8 01       	movw	r24, r16
    174e:	b7 01       	movw	r22, r14
    1750:	a3 01       	movw	r20, r6
    1752:	92 01       	movw	r18, r4
    1754:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
    1758:	88 23       	and	r24, r24
    175a:	8c f0       	brlt	.+34     	; 0x177e <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	af 90       	pop	r10
    1770:	9f 90       	pop	r9
    1772:	8f 90       	pop	r8
    1774:	7f 90       	pop	r7
    1776:	6f 90       	pop	r6
    1778:	5f 90       	pop	r5
    177a:	4f 90       	pop	r4
    177c:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    177e:	f4 01       	movw	r30, r8
    1780:	a1 a4       	ldd	r10, Z+41	; 0x29
    1782:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1784:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1786:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1788:	c8 01       	movw	r24, r16
    178a:	b7 01       	movw	r22, r14
    178c:	a6 01       	movw	r20, r12
    178e:	95 01       	movw	r18, r10
    1790:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1794:	9b 01       	movw	r18, r22
    1796:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1798:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    179c:	7b 01       	movw	r14, r22
    179e:	8c 01       	movw	r16, r24
    17a0:	20 91 ab 06 	lds	r18, 0x06AB
    17a4:	30 91 ac 06 	lds	r19, 0x06AC
    17a8:	40 91 ad 06 	lds	r20, 0x06AD
    17ac:	50 91 ae 06 	lds	r21, 0x06AE
    17b0:	50 58       	subi	r21, 0x80	; 128
    17b2:	ca 01       	movw	r24, r20
    17b4:	b9 01       	movw	r22, r18
    17b6:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e7       	ldi	r20, 0x70	; 112
    17c0:	52 e4       	ldi	r21, 0x42	; 66
    17c2:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e7       	ldi	r20, 0x70	; 112
    17cc:	52 ec       	ldi	r21, 0xC2	; 194
    17ce:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    17d2:	2d a5       	ldd	r18, Y+45	; 0x2d
    17d4:	3e a5       	ldd	r19, Y+46	; 0x2e
    17d6:	4f a5       	ldd	r20, Y+47	; 0x2f
    17d8:	58 a9       	ldd	r21, Y+48	; 0x30
    17da:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	c8 01       	movw	r24, r16
    17e4:	b7 01       	movw	r22, r14
    17e6:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    17ea:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    17ee:	a6 01       	movw	r20, r12
    17f0:	95 01       	movw	r18, r10
    17f2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    17f6:	7b 01       	movw	r14, r22
    17f8:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    17fa:	c3 01       	movw	r24, r6
    17fc:	b2 01       	movw	r22, r4
    17fe:	a8 01       	movw	r20, r16
    1800:	97 01       	movw	r18, r14
    1802:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
    1806:	18 16       	cp	r1, r24
    1808:	0c f0       	brlt	.+2      	; 0x180c <planner_forward_pass_kernel+0x100>
    180a:	a8 cf       	rjmp	.-176    	; 0x175c <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    180c:	f4 01       	movw	r30, r8
    180e:	e1 aa       	std	Z+49, r14	; 0x31
    1810:	f2 aa       	std	Z+50, r15	; 0x32
    1812:	03 ab       	std	Z+51, r16	; 0x33
    1814:	14 ab       	std	Z+52, r17	; 0x34
    1816:	a2 cf       	rjmp	.-188    	; 0x175c <planner_forward_pass_kernel+0x50>

00001818 <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1824:	80 91 0e 05 	lds	r24, 0x050E
    1828:	90 91 0f 05 	lds	r25, 0x050F
    182c:	48 2f       	mov	r20, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    182e:	08 2f       	mov	r16, r24
    1830:	11 27       	eor	r17, r17
    1832:	07 fd       	sbrc	r16, 7
    1834:	10 95       	com	r17
    1836:	80 91 0c 05 	lds	r24, 0x050C
    183a:	90 91 0d 05 	lds	r25, 0x050D
    183e:	08 17       	cp	r16, r24
    1840:	19 07       	cpc	r17, r25
    1842:	91 f1       	breq	.+100    	; 0x18a8 <planner_forward_pass+0x90>
    1844:	ee 24       	eor	r14, r14
    1846:	ff 24       	eor	r15, r15
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <planner_forward_pass+0x38>
    184e:	7e 01       	movw	r14, r28
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    1850:	89 e4       	ldi	r24, 0x49	; 73
    1852:	48 02       	muls	r20, r24
    1854:	e0 01       	movw	r28, r0
    1856:	11 24       	eor	r1, r1
    1858:	ce 5c       	subi	r28, 0xCE	; 206
    185a:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    185c:	c9 01       	movw	r24, r18
    185e:	b7 01       	movw	r22, r14
    1860:	ae 01       	movw	r20, r28
    1862:	0e 94 86 0b 	call	0x170c	; 0x170c <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1866:	c8 01       	movw	r24, r16
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	6a e0       	ldi	r22, 0x0A	; 10
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
    1872:	48 2f       	mov	r20, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1874:	08 2f       	mov	r16, r24
    1876:	11 27       	eor	r17, r17
    1878:	07 fd       	sbrc	r16, 7
    187a:	10 95       	com	r17
    187c:	80 91 0c 05 	lds	r24, 0x050C
    1880:	90 91 0d 05 	lds	r25, 0x050D
    1884:	97 01       	movw	r18, r14
    1886:	08 17       	cp	r16, r24
    1888:	19 07       	cpc	r17, r25
    188a:	09 f7       	brne	.-62     	; 0x184e <planner_forward_pass+0x36>
    188c:	b7 01       	movw	r22, r14
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    188e:	cb 01       	movw	r24, r22
    1890:	be 01       	movw	r22, r28
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	0e 94 86 0b 	call	0x170c	; 0x170c <planner_forward_pass_kernel>
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	08 95       	ret
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    18a8:	c0 e0       	ldi	r28, 0x00	; 0
    18aa:	d0 e0       	ldi	r29, 0x00	; 0
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	ee cf       	rjmp	.-36     	; 0x188e <planner_forward_pass+0x76>

000018b2 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    18b2:	2f 92       	push	r2
    18b4:	3f 92       	push	r3
    18b6:	4f 92       	push	r4
    18b8:	5f 92       	push	r5
    18ba:	6f 92       	push	r6
    18bc:	7f 92       	push	r7
    18be:	8f 92       	push	r8
    18c0:	9f 92       	push	r9
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	3b 01       	movw	r6, r22
    18d4:	4c 01       	movw	r8, r24
    18d6:	19 01       	movw	r2, r18
    18d8:	2a 01       	movw	r4, r20
	st_synchronize();
    18da:	0e 94 21 1a 	call	0x3442	; 0x3442 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    18de:	c4 01       	movw	r24, r8
    18e0:	b3 01       	movw	r22, r6
    18e2:	20 91 8d 06 	lds	r18, 0x068D
    18e6:	30 91 8e 06 	lds	r19, 0x068E
    18ea:	40 91 8f 06 	lds	r20, 0x068F
    18ee:	50 91 90 06 	lds	r21, 0x0690
    18f2:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    18f6:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    18fa:	e0 e1       	ldi	r30, 0x10	; 16
    18fc:	8e 2e       	mov	r8, r30
    18fe:	e5 e0       	ldi	r30, 0x05	; 5
    1900:	9e 2e       	mov	r9, r30
    1902:	60 93 10 05 	sts	0x0510, r22
    1906:	70 93 11 05 	sts	0x0511, r23
    190a:	80 93 12 05 	sts	0x0512, r24
    190e:	90 93 13 05 	sts	0x0513, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1912:	c2 01       	movw	r24, r4
    1914:	b1 01       	movw	r22, r2
    1916:	20 91 91 06 	lds	r18, 0x0691
    191a:	30 91 92 06 	lds	r19, 0x0692
    191e:	40 91 93 06 	lds	r20, 0x0693
    1922:	50 91 94 06 	lds	r21, 0x0694
    1926:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    192a:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    192e:	f4 01       	movw	r30, r8
    1930:	34 96       	adiw	r30, 0x04	; 4
    1932:	60 93 14 05 	sts	0x0514, r22
    1936:	71 83       	std	Z+1, r23	; 0x01
    1938:	82 83       	std	Z+2, r24	; 0x02
    193a:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    193c:	c8 01       	movw	r24, r16
    193e:	b7 01       	movw	r22, r14
    1940:	20 91 95 06 	lds	r18, 0x0695
    1944:	30 91 96 06 	lds	r19, 0x0696
    1948:	40 91 97 06 	lds	r20, 0x0697
    194c:	50 91 98 06 	lds	r21, 0x0698
    1950:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1954:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    1958:	f4 01       	movw	r30, r8
    195a:	38 96       	adiw	r30, 0x08	; 8
    195c:	60 93 18 05 	sts	0x0518, r22
    1960:	71 83       	std	Z+1, r23	; 0x01
    1962:	82 83       	std	Z+2, r24	; 0x02
    1964:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1966:	c6 01       	movw	r24, r12
    1968:	b5 01       	movw	r22, r10
    196a:	20 91 99 06 	lds	r18, 0x0699
    196e:	30 91 9a 06 	lds	r19, 0x069A
    1972:	40 91 9b 06 	lds	r20, 0x069B
    1976:	50 91 9c 06 	lds	r21, 0x069C
    197a:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    197e:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    1982:	2c e0       	ldi	r18, 0x0C	; 12
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	82 0e       	add	r8, r18
    1988:	93 1e       	adc	r9, r19
    198a:	60 93 1c 05 	sts	0x051C, r22
    198e:	f4 01       	movw	r30, r8
    1990:	71 83       	std	Z+1, r23	; 0x01
    1992:	82 83       	std	Z+2, r24	; 0x02
    1994:	93 83       	std	Z+3, r25	; 0x03
}
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	cf 90       	pop	r12
    19a2:	bf 90       	pop	r11
    19a4:	af 90       	pop	r10
    19a6:	9f 90       	pop	r9
    19a8:	8f 90       	pop	r8
    19aa:	7f 90       	pop	r7
    19ac:	6f 90       	pop	r6
    19ae:	5f 90       	pop	r5
    19b0:	4f 90       	pop	r4
    19b2:	3f 90       	pop	r3
    19b4:	2f 90       	pop	r2
    19b6:	08 95       	ret

000019b8 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	80 91 20 05 	lds	r24, 0x0520
    19c4:	81 11       	cpse	r24, r1
    19c6:	91 e0       	ldi	r25, 0x01	; 1
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	20 97       	sbiw	r28, 0x00	; 0
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <plan_set_acceleration_manager_enabled+0x18>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	98 17       	cp	r25, r24
    19d2:	31 f0       	breq	.+12     	; 0x19e0 <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    19d4:	0e 94 21 1a 	call	0x3442	; 0x3442 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    19d8:	10 92 20 05 	sts	0x0520, r1
    19dc:	cd 2b       	or	r28, r29
    19de:	19 f4       	brne	.+6      	; 0x19e6 <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 20 05 	sts	0x0520, r24
  }
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    19f2:	10 92 0d 05 	sts	0x050D, r1
    19f6:	10 92 0c 05 	sts	0x050C, r1
  block_buffer_tail = 0;
    19fa:	10 92 0f 05 	sts	0x050F, r1
    19fe:	10 92 0e 05 	sts	0x050E, r1
  plan_set_acceleration_manager_enabled(TRUE);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1a0a:	80 e1       	ldi	r24, 0x10	; 16
    1a0c:	e0 e1       	ldi	r30, 0x10	; 16
    1a0e:	f5 e0       	ldi	r31, 0x05	; 5
    1a10:	df 01       	movw	r26, r30
    1a12:	1d 92       	st	X+, r1
    1a14:	8a 95       	dec	r24
    1a16:	e9 f7       	brne	.-6      	; 0x1a12 <plan_init+0x20>
}
    1a18:	08 95       	ret

00001a1a <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1a1a:	2f 92       	push	r2
    1a1c:	3f 92       	push	r3
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <planner_reverse_pass_kernel+0x26>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <planner_reverse_pass_kernel+0x28>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	8c 01       	movw	r16, r24
    1a48:	7e 83       	std	Y+6, r23	; 0x06
    1a4a:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1a4c:	67 2b       	or	r22, r23
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <planner_reverse_pass_kernel+0x38>
    1a50:	a3 c0       	rjmp	.+326    	; 0x1b98 <planner_reverse_pass_kernel+0x17e>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1a52:	41 15       	cp	r20, r1
    1a54:	51 05       	cpc	r21, r1
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <planner_reverse_pass_kernel+0x40>
    1a58:	19 c1       	rjmp	.+562    	; 0x1c8c <planner_reverse_pass_kernel+0x272>
    exit_factor = next->entry_factor;
    1a5a:	da 01       	movw	r26, r20
    1a5c:	d1 96       	adiw	r26, 0x31	; 49
    1a5e:	8d 91       	ld	r24, X+
    1a60:	9d 91       	ld	r25, X+
    1a62:	0d 90       	ld	r0, X+
    1a64:	bc 91       	ld	r27, X
    1a66:	a0 2d       	mov	r26, r0
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	ab 83       	std	Y+3, r26	; 0x03
    1a6e:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1a70:	01 15       	cp	r16, r1
    1a72:	11 05       	cpc	r17, r1
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <planner_reverse_pass_kernel+0x5e>
    1a76:	03 c1       	rjmp	.+518    	; 0x1c7e <planner_reverse_pass_kernel+0x264>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1a78:	f8 01       	movw	r30, r16
    1a7a:	61 8d       	ldd	r22, Z+25	; 0x19
    1a7c:	72 8d       	ldd	r23, Z+26	; 0x1a
    1a7e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a80:	94 8d       	ldd	r25, Z+28	; 0x1c
    1a82:	ad 81       	ldd	r26, Y+5	; 0x05
    1a84:	be 81       	ldd	r27, Y+6	; 0x06
    1a86:	59 96       	adiw	r26, 0x19	; 25
    1a88:	2d 91       	ld	r18, X+
    1a8a:	3d 91       	ld	r19, X+
    1a8c:	4d 91       	ld	r20, X+
    1a8e:	5c 91       	ld	r21, X
    1a90:	5c 97       	sbiw	r26, 0x1c	; 28
    1a92:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    1a96:	9b 01       	movw	r18, r22
    1a98:	ac 01       	movw	r20, r24
    1a9a:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1a9e:	1b 01       	movw	r2, r22
    1aa0:	2c 01       	movw	r4, r24
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	65 8d       	ldd	r22, Z+29	; 0x1d
    1aa6:	76 8d       	ldd	r23, Z+30	; 0x1e
    1aa8:	87 8d       	ldd	r24, Z+31	; 0x1f
    1aaa:	90 a1       	ldd	r25, Z+32	; 0x20
    1aac:	ad 81       	ldd	r26, Y+5	; 0x05
    1aae:	be 81       	ldd	r27, Y+6	; 0x06
    1ab0:	5d 96       	adiw	r26, 0x1d	; 29
    1ab2:	2d 91       	ld	r18, X+
    1ab4:	3d 91       	ld	r19, X+
    1ab6:	4d 91       	ld	r20, X+
    1ab8:	5c 91       	ld	r21, X
    1aba:	90 97       	sbiw	r26, 0x20	; 32
    1abc:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1ac8:	3b 01       	movw	r6, r22
    1aca:	4c 01       	movw	r8, r24
    1acc:	f8 01       	movw	r30, r16
    1ace:	61 a1       	ldd	r22, Z+33	; 0x21
    1ad0:	72 a1       	ldd	r23, Z+34	; 0x22
    1ad2:	83 a1       	ldd	r24, Z+35	; 0x23
    1ad4:	94 a1       	ldd	r25, Z+36	; 0x24
    1ad6:	ad 81       	ldd	r26, Y+5	; 0x05
    1ad8:	be 81       	ldd	r27, Y+6	; 0x06
    1ada:	91 96       	adiw	r26, 0x21	; 33
    1adc:	2d 91       	ld	r18, X+
    1ade:	3d 91       	ld	r19, X+
    1ae0:	4d 91       	ld	r20, X+
    1ae2:	5c 91       	ld	r21, X
    1ae4:	94 97       	sbiw	r26, 0x24	; 36
    1ae6:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    1aea:	9b 01       	movw	r18, r22
    1aec:	ac 01       	movw	r20, r24
    1aee:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1af2:	5b 01       	movw	r10, r22
    1af4:	6c 01       	movw	r12, r24
    1af6:	f8 01       	movw	r30, r16
    1af8:	65 a1       	ldd	r22, Z+37	; 0x25
    1afa:	76 a1       	ldd	r23, Z+38	; 0x26
    1afc:	87 a1       	ldd	r24, Z+39	; 0x27
    1afe:	90 a5       	ldd	r25, Z+40	; 0x28
    1b00:	ad 81       	ldd	r26, Y+5	; 0x05
    1b02:	be 81       	ldd	r27, Y+6	; 0x06
    1b04:	95 96       	adiw	r26, 0x25	; 37
    1b06:	2d 91       	ld	r18, X+
    1b08:	3d 91       	ld	r19, X+
    1b0a:	4d 91       	ld	r20, X+
    1b0c:	5c 91       	ld	r21, X
    1b0e:	98 97       	sbiw	r26, 0x28	; 40
    1b10:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    1b14:	9b 01       	movw	r18, r22
    1b16:	ac 01       	movw	r20, r24
    1b18:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1b1c:	7b 01       	movw	r14, r22
    1b1e:	8c 01       	movw	r16, r24
    1b20:	c2 01       	movw	r24, r4
    1b22:	b1 01       	movw	r22, r2
    1b24:	a4 01       	movw	r20, r8
    1b26:	93 01       	movw	r18, r6
    1b28:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    1b2c:	a6 01       	movw	r20, r12
    1b2e:	95 01       	movw	r18, r10
    1b30:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    1b34:	a8 01       	movw	r20, r16
    1b36:	97 01       	movw	r18, r14
    1b38:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    1b3c:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <sqrt>
    1b40:	5b 01       	movw	r10, r22
    1b42:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1b44:	e0 90 af 06 	lds	r14, 0x06AF
    1b48:	f0 90 b0 06 	lds	r15, 0x06B0
    1b4c:	00 91 b1 06 	lds	r16, 0x06B1
    1b50:	10 91 b2 06 	lds	r17, 0x06B2
    1b54:	c8 01       	movw	r24, r16
    1b56:	b7 01       	movw	r22, r14
    1b58:	a6 01       	movw	r20, r12
    1b5a:	95 01       	movw	r18, r10
    1b5c:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
    1b60:	87 fd       	sbrc	r24, 7
    1b62:	33 c0       	rjmp	.+102    	; 0x1bca <planner_reverse_pass_kernel+0x1b0>
    1b64:	0f 2e       	mov	r0, r31
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	6f 2e       	mov	r6, r31
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	7f 2e       	mov	r7, r31
    1b6e:	f0 e8       	ldi	r31, 0x80	; 128
    1b70:	8f 2e       	mov	r8, r31
    1b72:	ff e3       	ldi	r31, 0x3F	; 63
    1b74:	9f 2e       	mov	r9, r31
    1b76:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1b78:	c4 01       	movw	r24, r8
    1b7a:	b3 01       	movw	r22, r6
    1b7c:	29 81       	ldd	r18, Y+1	; 0x01
    1b7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b80:	4b 81       	ldd	r20, Y+3	; 0x03
    1b82:	5c 81       	ldd	r21, Y+4	; 0x04
    1b84:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	44 f1       	brlt	.+80     	; 0x1bdc <planner_reverse_pass_kernel+0x1c2>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1b8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1b8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1b90:	61 aa       	std	Z+49, r6	; 0x31
    1b92:	72 aa       	std	Z+50, r7	; 0x32
    1b94:	83 aa       	std	Z+51, r8	; 0x33
    1b96:	94 aa       	std	Z+52, r9	; 0x34
}
    1b98:	26 96       	adiw	r28, 0x06	; 6
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	8f 90       	pop	r8
    1bbc:	7f 90       	pop	r7
    1bbe:	6f 90       	pop	r6
    1bc0:	5f 90       	pop	r5
    1bc2:	4f 90       	pop	r4
    1bc4:	3f 90       	pop	r3
    1bc6:	2f 90       	pop	r2
    1bc8:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1bca:	c8 01       	movw	r24, r16
    1bcc:	b7 01       	movw	r22, r14
    1bce:	a6 01       	movw	r20, r12
    1bd0:	95 01       	movw	r18, r10
    1bd2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    1bd6:	3b 01       	movw	r6, r22
    1bd8:	4c 01       	movw	r8, r24
    1bda:	ce cf       	rjmp	.-100    	; 0x1b78 <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1bdc:	ed 81       	ldd	r30, Y+5	; 0x05
    1bde:	fe 81       	ldd	r31, Y+6	; 0x06
    1be0:	a1 a4       	ldd	r10, Z+41	; 0x29
    1be2:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1be4:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1be6:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1be8:	c6 01       	movw	r24, r12
    1bea:	b5 01       	movw	r22, r10
    1bec:	29 81       	ldd	r18, Y+1	; 0x01
    1bee:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf0:	4b 81       	ldd	r20, Y+3	; 0x03
    1bf2:	5c 81       	ldd	r21, Y+4	; 0x04
    1bf4:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1bfc:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1c00:	7b 01       	movw	r14, r22
    1c02:	8c 01       	movw	r16, r24
    1c04:	20 91 ab 06 	lds	r18, 0x06AB
    1c08:	30 91 ac 06 	lds	r19, 0x06AC
    1c0c:	40 91 ad 06 	lds	r20, 0x06AD
    1c10:	50 91 ae 06 	lds	r21, 0x06AE
    1c14:	50 58       	subi	r21, 0x80	; 128
    1c16:	ca 01       	movw	r24, r20
    1c18:	b9 01       	movw	r22, r18
    1c1a:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e7       	ldi	r20, 0x70	; 112
    1c24:	52 e4       	ldi	r21, 0x42	; 66
    1c26:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e7       	ldi	r20, 0x70	; 112
    1c30:	52 ec       	ldi	r21, 0xC2	; 194
    1c32:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1c36:	ad 81       	ldd	r26, Y+5	; 0x05
    1c38:	be 81       	ldd	r27, Y+6	; 0x06
    1c3a:	9d 96       	adiw	r26, 0x2d	; 45
    1c3c:	2d 91       	ld	r18, X+
    1c3e:	3d 91       	ld	r19, X+
    1c40:	4d 91       	ld	r20, X+
    1c42:	5c 91       	ld	r21, X
    1c44:	d0 97       	sbiw	r26, 0x30	; 48
    1c46:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1c4a:	9b 01       	movw	r18, r22
    1c4c:	ac 01       	movw	r20, r24
    1c4e:	c8 01       	movw	r24, r16
    1c50:	b7 01       	movw	r22, r14
    1c52:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    1c56:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1c5a:	a6 01       	movw	r20, r12
    1c5c:	95 01       	movw	r18, r10
    1c5e:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    1c62:	7b 01       	movw	r14, r22
    1c64:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1c66:	c4 01       	movw	r24, r8
    1c68:	b3 01       	movw	r22, r6
    1c6a:	a8 01       	movw	r20, r16
    1c6c:	97 01       	movw	r18, r14
    1c6e:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <__gesf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	0c f0       	brlt	.+2      	; 0x1c78 <planner_reverse_pass_kernel+0x25e>
    1c76:	8a cf       	rjmp	.-236    	; 0x1b8c <planner_reverse_pass_kernel+0x172>
    1c78:	37 01       	movw	r6, r14
    1c7a:	48 01       	movw	r8, r16
    1c7c:	87 cf       	rjmp	.-242    	; 0x1b8c <planner_reverse_pass_kernel+0x172>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	0e 94 30 0b 	call	0x1660	; 0x1660 <factor_for_safe_speed>
    1c86:	3b 01       	movw	r6, r22
    1c88:	4c 01       	movw	r8, r24
    1c8a:	80 cf       	rjmp	.-256    	; 0x1b8c <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	0e 94 30 0b 	call	0x1660	; 0x1660 <factor_for_safe_speed>
    1c94:	69 83       	std	Y+1, r22	; 0x01
    1c96:	7a 83       	std	Y+2, r23	; 0x02
    1c98:	8b 83       	std	Y+3, r24	; 0x03
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	e9 ce       	rjmp	.-558    	; 0x1a70 <planner_reverse_pass_kernel+0x56>

00001c9e <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1c9e:	cf 92       	push	r12
    1ca0:	df 92       	push	r13
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1cac:	80 91 0c 05 	lds	r24, 0x050C
    1cb0:	90 91 0d 05 	lds	r25, 0x050D
    1cb4:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1cb6:	20 91 0e 05 	lds	r18, 0x050E
    1cba:	30 91 0f 05 	lds	r19, 0x050F
    1cbe:	99 27       	eor	r25, r25
    1cc0:	87 fd       	sbrc	r24, 7
    1cc2:	90 95       	com	r25
    1cc4:	82 17       	cp	r24, r18
    1cc6:	93 07       	cpc	r25, r19
    1cc8:	b9 f1       	breq	.+110    	; 0x1d38 <planner_reverse_pass+0x9a>
    1cca:	00 e0       	ldi	r16, 0x00	; 0
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	19 c0       	rjmp	.+50     	; 0x1d06 <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1cd4:	8f 2d       	mov	r24, r15
    1cd6:	99 e4       	ldi	r25, 0x49	; 73
    1cd8:	89 02       	muls	r24, r25
    1cda:	b0 01       	movw	r22, r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	cf 2c       	mov	r12, r15
    1ce0:	dd 24       	eor	r13, r13
    1ce2:	c7 fc       	sbrc	r12, 7
    1ce4:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1ce6:	eb 01       	movw	r28, r22
    1ce8:	ce 5c       	subi	r28, 0xCE	; 206
    1cea:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1cec:	ce 01       	movw	r24, r28
    1cee:	b8 01       	movw	r22, r16
    1cf0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1cf4:	80 91 0e 05 	lds	r24, 0x050E
    1cf8:	90 91 0f 05 	lds	r25, 0x050F
    1cfc:	a8 01       	movw	r20, r16
    1cfe:	8c 15       	cp	r24, r12
    1d00:	9d 05       	cpc	r25, r13
    1d02:	61 f0       	breq	.+24     	; 0x1d1c <planner_reverse_pass+0x7e>
    1d04:	8e 01       	movw	r16, r28
    block_index--;
    1d06:	fa 94       	dec	r15
    if(block_index < 0) {
    1d08:	f7 fe       	sbrs	r15, 7
    1d0a:	e4 cf       	rjmp	.-56     	; 0x1cd4 <planner_reverse_pass+0x36>
    1d0c:	a9 e0       	ldi	r26, 0x09	; 9
    1d0e:	fa 2e       	mov	r15, r26
    1d10:	61 e9       	ldi	r22, 0x91	; 145
    1d12:	72 e0       	ldi	r23, 0x02	; 2
    1d14:	f9 e0       	ldi	r31, 0x09	; 9
    1d16:	cf 2e       	mov	r12, r31
    1d18:	d1 2c       	mov	r13, r1
    1d1a:	e5 cf       	rjmp	.-54     	; 0x1ce6 <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d1c:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	be 01       	movw	r22, r28
    1d24:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <planner_reverse_pass_kernel>
}
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	df 90       	pop	r13
    1d34:	cf 90       	pop	r12
    1d36:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d38:	c0 e0       	ldi	r28, 0x00	; 0
    1d3a:	d0 e0       	ldi	r29, 0x00	; 0
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	ee cf       	rjmp	.-36     	; 0x1d1e <planner_reverse_pass+0x80>

00001d42 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1d42:	2f 92       	push	r2
    1d44:	3f 92       	push	r3
    1d46:	4f 92       	push	r4
    1d48:	5f 92       	push	r5
    1d4a:	6f 92       	push	r6
    1d4c:	7f 92       	push	r7
    1d4e:	8f 92       	push	r8
    1d50:	9f 92       	push	r9
    1d52:	af 92       	push	r10
    1d54:	bf 92       	push	r11
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	62 97       	sbiw	r28, 0x12	; 18
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	9a 8b       	std	Y+18, r25	; 0x12
    1d78:	89 8b       	std	Y+17, r24	; 0x11
    1d7a:	6a 01       	movw	r12, r20
    1d7c:	7b 01       	movw	r14, r22
    1d7e:	18 01       	movw	r2, r16
    1d80:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1d82:	fc 01       	movw	r30, r24
    1d84:	65 89       	ldd	r22, Z+21	; 0x15
    1d86:	76 89       	ldd	r23, Z+22	; 0x16
    1d88:	87 89       	ldd	r24, Z+23	; 0x17
    1d8a:	90 8d       	ldd	r25, Z+24	; 0x18
    1d8c:	0e 94 81 2c 	call	0x5902	; 0x5902 <__floatunsisf>
    1d90:	3b 01       	movw	r6, r22
    1d92:	4c 01       	movw	r8, r24
    1d94:	a7 01       	movw	r20, r14
    1d96:	96 01       	movw	r18, r12
    1d98:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1d9c:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <ceil>
    1da0:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
    1da4:	7b 01       	movw	r14, r22
    1da6:	8c 01       	movw	r16, r24
    1da8:	e9 89       	ldd	r30, Y+17	; 0x11
    1daa:	fa 89       	ldd	r31, Y+18	; 0x12
    1dac:	65 ab       	std	Z+53, r22	; 0x35
    1dae:	76 ab       	std	Z+54, r23	; 0x36
    1db0:	87 ab       	std	Z+55, r24	; 0x37
    1db2:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1db4:	c4 01       	movw	r24, r8
    1db6:	b3 01       	movw	r22, r6
    1db8:	a2 01       	movw	r20, r4
    1dba:	91 01       	movw	r18, r2
    1dbc:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1dc0:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <ceil>
    1dc4:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
    1dc8:	1b 01       	movw	r2, r22
    1dca:	2c 01       	movw	r4, r24
    1dcc:	e9 89       	ldd	r30, Y+17	; 0x11
    1dce:	fa 89       	ldd	r31, Y+18	; 0x12
    1dd0:	61 af       	std	Z+57, r22	; 0x39
    1dd2:	72 af       	std	Z+58, r23	; 0x3a
    1dd4:	83 af       	std	Z+59, r24	; 0x3b
    1dd6:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1dd8:	fd 96       	adiw	r30, 0x3d	; 61
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	fd 97       	sbiw	r30, 0x3d	; 61
    1de4:	fa 8b       	std	Y+18, r31	; 0x12
    1de6:	e9 8b       	std	Y+17, r30	; 0x11
    1de8:	28 e2       	ldi	r18, 0x28	; 40
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <__mulsi3>
    1df4:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e7       	ldi	r20, 0x70	; 112
    1dfe:	52 e4       	ldi	r21, 0x42	; 66
    1e00:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1e04:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    1e08:	5b 01       	movw	r10, r22
    1e0a:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	b7 01       	movw	r22, r14
    1e10:	0e 94 81 2c 	call	0x5902	; 0x5902 <__floatunsisf>
    1e14:	7b 01       	movw	r14, r22
    1e16:	8c 01       	movw	r16, r24
    1e18:	c6 01       	movw	r24, r12
    1e1a:	b5 01       	movw	r22, r10
    1e1c:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    1e20:	6d 83       	std	Y+5, r22	; 0x05
    1e22:	7e 83       	std	Y+6, r23	; 0x06
    1e24:	8f 83       	std	Y+7, r24	; 0x07
    1e26:	98 87       	std	Y+8, r25	; 0x08


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1e28:	c4 01       	movw	r24, r8
    1e2a:	b3 01       	movw	r22, r6
    1e2c:	a4 01       	movw	r20, r8
    1e2e:	93 01       	movw	r18, r6
    1e30:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1e34:	3b 01       	movw	r6, r22
    1e36:	4c 01       	movw	r8, r24
    1e38:	c8 01       	movw	r24, r16
    1e3a:	b7 01       	movw	r22, r14
    1e3c:	a8 01       	movw	r20, r16
    1e3e:	97 01       	movw	r18, r14
    1e40:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1e44:	69 87       	std	Y+9, r22	; 0x09
    1e46:	7a 87       	std	Y+10, r23	; 0x0a
    1e48:	8b 87       	std	Y+11, r24	; 0x0b
    1e4a:	9c 87       	std	Y+12, r25	; 0x0c
    1e4c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e4e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e50:	8f 81       	ldd	r24, Y+7	; 0x07
    1e52:	98 85       	ldd	r25, Y+8	; 0x08
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    1e5c:	6d 87       	std	Y+13, r22	; 0x0d
    1e5e:	7e 87       	std	Y+14, r23	; 0x0e
    1e60:	8f 87       	std	Y+15, r24	; 0x0f
    1e62:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1e64:	c4 01       	movw	r24, r8
    1e66:	b3 01       	movw	r22, r6
    1e68:	29 85       	ldd	r18, Y+9	; 0x09
    1e6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e6c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e6e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e70:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    1e74:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e76:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e78:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e7a:	58 89       	ldd	r21, Y+16	; 0x10
    1e7c:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    1e80:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <ceil>
    1e84:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    1e88:	69 83       	std	Y+1, r22	; 0x01
    1e8a:	7a 83       	std	Y+2, r23	; 0x02
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1e90:	c2 01       	movw	r24, r4
    1e92:	b1 01       	movw	r22, r2
    1e94:	0e 94 81 2c 	call	0x5902	; 0x5902 <__floatunsisf>
    1e98:	9b 01       	movw	r18, r22
    1e9a:	ac 01       	movw	r20, r24


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1e9c:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1ea0:	1b 01       	movw	r2, r22
    1ea2:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1ea4:	a4 01       	movw	r20, r8
    1ea6:	93 01       	movw	r18, r6
    1ea8:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    1eac:	7b 01       	movw	r14, r22
    1eae:	8c 01       	movw	r16, r24
    1eb0:	d0 94       	com	r13
    1eb2:	c0 94       	com	r12
    1eb4:	b0 94       	com	r11
    1eb6:	a0 94       	com	r10
    1eb8:	a1 1c       	adc	r10, r1
    1eba:	b1 1c       	adc	r11, r1
    1ebc:	c1 1c       	adc	r12, r1
    1ebe:	d1 1c       	adc	r13, r1
    1ec0:	c6 01       	movw	r24, r12
    1ec2:	b5 01       	movw	r22, r10
    1ec4:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    1ec8:	9b 01       	movw	r18, r22
    1eca:	ac 01       	movw	r20, r24
    1ecc:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	c8 01       	movw	r24, r16
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    1edc:	0e 94 be 2c 	call	0x597c	; 0x597c <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1ee0:	e9 89       	ldd	r30, Y+17	; 0x11
    1ee2:	fa 89       	ldd	r31, Y+18	; 0x12
    1ee4:	a1 88       	ldd	r10, Z+17	; 0x11
    1ee6:	b2 88       	ldd	r11, Z+18	; 0x12
    1ee8:	c3 88       	ldd	r12, Z+19	; 0x13
    1eea:	d4 88       	ldd	r13, Z+20	; 0x14
    1eec:	86 01       	movw	r16, r12
    1eee:	75 01       	movw	r14, r10
    1ef0:	29 81       	ldd	r18, Y+1	; 0x01
    1ef2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ef6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ef8:	e2 1a       	sub	r14, r18
    1efa:	f3 0a       	sbc	r15, r19
    1efc:	04 0b       	sbc	r16, r20
    1efe:	15 0b       	sbc	r17, r21
    1f00:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    1f04:	a8 01       	movw	r20, r16
    1f06:	97 01       	movw	r18, r14
    1f08:	26 1b       	sub	r18, r22
    1f0a:	37 0b       	sbc	r19, r23
    1f0c:	48 0b       	sbc	r20, r24
    1f0e:	59 0b       	sbc	r21, r25
    1f10:	da 01       	movw	r26, r20
    1f12:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1f14:	57 fd       	sbrc	r21, 7
    1f16:	30 c0       	rjmp	.+96     	; 0x1f78 <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1f18:	49 89       	ldd	r20, Y+17	; 0x11
    1f1a:	5a 89       	ldd	r21, Y+18	; 0x12
    1f1c:	4f 5b       	subi	r20, 0xBF	; 191
    1f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f20:	fa 01       	movw	r30, r20
    1f22:	29 81       	ldd	r18, Y+1	; 0x01
    1f24:	3a 81       	ldd	r19, Y+2	; 0x02
    1f26:	4b 81       	ldd	r20, Y+3	; 0x03
    1f28:	5c 81       	ldd	r21, Y+4	; 0x04
    1f2a:	21 93       	st	Z+, r18
    1f2c:	31 93       	st	Z+, r19
    1f2e:	41 93       	st	Z+, r20
    1f30:	51 93       	st	Z+, r21
    1f32:	fa 8b       	std	Y+18, r31	; 0x12
    1f34:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1f36:	82 0f       	add	r24, r18
    1f38:	93 1f       	adc	r25, r19
    1f3a:	a4 1f       	adc	r26, r20
    1f3c:	b5 1f       	adc	r27, r21
    1f3e:	80 83       	st	Z, r24
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	a2 83       	std	Z+2, r26	; 0x02
    1f44:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1f46:	62 96       	adiw	r28, 0x12	; 18
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	df 90       	pop	r13
    1f60:	cf 90       	pop	r12
    1f62:	bf 90       	pop	r11
    1f64:	af 90       	pop	r10
    1f66:	9f 90       	pop	r9
    1f68:	8f 90       	pop	r8
    1f6a:	7f 90       	pop	r7
    1f6c:	6f 90       	pop	r6
    1f6e:	5f 90       	pop	r5
    1f70:	4f 90       	pop	r4
    1f72:	3f 90       	pop	r3
    1f74:	2f 90       	pop	r2
    1f76:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    1f78:	c6 01       	movw	r24, r12
    1f7a:	b5 01       	movw	r22, r10
    1f7c:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    1f80:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f82:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f84:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f86:	58 89       	ldd	r21, Y+16	; 0x10
    1f88:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1f8c:	29 85       	ldd	r18, Y+9	; 0x09
    1f8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f90:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f92:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f94:	0e 94 44 2b 	call	0x5688	; 0x5688 <__subsf3>
    1f98:	9b 01       	movw	r18, r22
    1f9a:	ac 01       	movw	r20, r24
    1f9c:	c2 01       	movw	r24, r4
    1f9e:	b1 01       	movw	r22, r2
    1fa0:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    1fa4:	7b 01       	movw	r14, r22
    1fa6:	8c 01       	movw	r16, r24
    1fa8:	6d 81       	ldd	r22, Y+5	; 0x05
    1faa:	7e 81       	ldd	r23, Y+6	; 0x06
    1fac:	8f 81       	ldd	r24, Y+7	; 0x07
    1fae:	98 85       	ldd	r25, Y+8	; 0x08
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	50 e4       	ldi	r21, 0x40	; 64
    1fb8:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    1fbc:	9b 01       	movw	r18, r22
    1fbe:	ac 01       	movw	r20, r24
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	b7 01       	movw	r22, r14
    1fc4:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    1fc8:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <ceil>
    1fcc:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    1fd0:	69 83       	std	Y+1, r22	; 0x01
    1fd2:	7a 83       	std	Y+2, r23	; 0x02
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a0 e0       	ldi	r26, 0x00	; 0
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	9b cf       	rjmp	.-202    	; 0x1f18 <calculate_trapezoid_for_block+0x1d6>

00001fe2 <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1fee:	80 91 0e 05 	lds	r24, 0x050E
    1ff2:	90 91 0f 05 	lds	r25, 0x050F
    1ff6:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1ff8:	e8 2e       	mov	r14, r24
    1ffa:	ff 24       	eor	r15, r15
    1ffc:	e7 fc       	sbrc	r14, 7
    1ffe:	f0 94       	com	r15
    2000:	80 91 0c 05 	lds	r24, 0x050C
    2004:	90 91 0d 05 	lds	r25, 0x050D
    2008:	e8 16       	cp	r14, r24
    200a:	f9 06       	cpc	r15, r25
    200c:	e1 f1       	breq	.+120    	; 0x2086 <planner_recalculate_trapezoids+0xa4>
    200e:	e0 e0       	ldi	r30, 0x00	; 0
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <planner_recalculate_trapezoids+0x34>
    2014:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    2016:	89 e4       	ldi	r24, 0x49	; 73
    2018:	28 02       	muls	r18, r24
    201a:	e0 01       	movw	r28, r0
    201c:	11 24       	eor	r1, r1
    201e:	ce 5c       	subi	r28, 0xCE	; 206
    2020:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	59 f0       	breq	.+22     	; 0x203c <planner_recalculate_trapezoids+0x5a>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    2026:	41 a9       	ldd	r20, Z+49	; 0x31
    2028:	52 a9       	ldd	r21, Z+50	; 0x32
    202a:	63 a9       	ldd	r22, Z+51	; 0x33
    202c:	74 a9       	ldd	r23, Z+52	; 0x34
    202e:	09 a9       	ldd	r16, Y+49	; 0x31
    2030:	1a a9       	ldd	r17, Y+50	; 0x32
    2032:	2b a9       	ldd	r18, Y+51	; 0x33
    2034:	3c a9       	ldd	r19, Y+52	; 0x34
    2036:	cf 01       	movw	r24, r30
    2038:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    203c:	c7 01       	movw	r24, r14
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	6a e0       	ldi	r22, 0x0A	; 10
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
    2048:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    204a:	e8 2e       	mov	r14, r24
    204c:	ff 24       	eor	r15, r15
    204e:	e7 fc       	sbrc	r14, 7
    2050:	f0 94       	com	r15
    2052:	80 91 0c 05 	lds	r24, 0x050C
    2056:	90 91 0d 05 	lds	r25, 0x050D
    205a:	e8 16       	cp	r14, r24
    205c:	f9 06       	cpc	r15, r25
    205e:	d1 f6       	brne	.-76     	; 0x2014 <planner_recalculate_trapezoids+0x32>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    2060:	ce 01       	movw	r24, r28
    2062:	0e 94 30 0b 	call	0x1660	; 0x1660 <factor_for_safe_speed>
    2066:	8b 01       	movw	r16, r22
    2068:	9c 01       	movw	r18, r24
    206a:	49 a9       	ldd	r20, Y+49	; 0x31
    206c:	5a a9       	ldd	r21, Y+50	; 0x32
    206e:	6b a9       	ldd	r22, Y+51	; 0x33
    2070:	7c a9       	ldd	r23, Y+52	; 0x34
    2072:	ce 01       	movw	r24, r28
    2074:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <calculate_trapezoid_for_block>
}
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2086:	c0 e0       	ldi	r28, 0x00	; 0
    2088:	d0 e0       	ldi	r29, 0x00	; 0
    208a:	ea cf       	rjmp	.-44     	; 0x2060 <planner_recalculate_trapezoids+0x7e>

0000208c <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    208c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <planner_reverse_pass>
  planner_forward_pass();
    2090:	0e 94 0c 0c 	call	0x1818	; 0x1818 <planner_forward_pass>
  planner_recalculate_trapezoids();
    2094:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <planner_recalculate_trapezoids>
}
    2098:	08 95       	ret

0000209a <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    209a:	2f 92       	push	r2
    209c:	3f 92       	push	r3
    209e:	4f 92       	push	r4
    20a0:	5f 92       	push	r5
    20a2:	6f 92       	push	r6
    20a4:	7f 92       	push	r7
    20a6:	8f 92       	push	r8
    20a8:	9f 92       	push	r9
    20aa:	af 92       	push	r10
    20ac:	bf 92       	push	r11
    20ae:	cf 92       	push	r12
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	cc 54       	subi	r28, 0x4C	; 76
    20c4:	d0 40       	sbci	r29, 0x00	; 0
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	3b 01       	movw	r6, r22
    20d2:	4c 01       	movw	r8, r24
    20d4:	23 96       	adiw	r28, 0x03	; 3
    20d6:	2c af       	std	Y+60, r18	; 0x3c
    20d8:	3d af       	std	Y+61, r19	; 0x3d
    20da:	4e af       	std	Y+62, r20	; 0x3e
    20dc:	5f af       	std	Y+63, r21	; 0x3f
    20de:	23 97       	sbiw	r28, 0x03	; 3
    20e0:	27 96       	adiw	r28, 0x07	; 7
    20e2:	ec ae       	std	Y+60, r14	; 0x3c
    20e4:	fd ae       	std	Y+61, r15	; 0x3d
    20e6:	0e af       	std	Y+62, r16	; 0x3e
    20e8:	1f af       	std	Y+63, r17	; 0x3f
    20ea:	27 97       	sbiw	r28, 0x07	; 7
	printPgmString(PSTR("z = "));
	printFloat( z );
	printPgmString(PSTR("\r\n"));
#endif
  
  if( gHomed == FALSE ) 
    20ec:	80 91 55 05 	lds	r24, 0x0555
    20f0:	88 23       	and	r24, r24
    20f2:	d1 f4       	brne	.+52     	; 0x2128 <plan_buffer_line+0x8e>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    20f4:	c4 5b       	subi	r28, 0xB4	; 180
    20f6:	df 4f       	sbci	r29, 0xFF	; 255
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	6f 90       	pop	r6
    211e:	5f 90       	pop	r5
    2120:	4f 90       	pop	r4
    2122:	3f 90       	pop	r3
    2124:	2f 90       	pop	r2
    2126:	08 95       	ret
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    2128:	c4 01       	movw	r24, r8
    212a:	b3 01       	movw	r22, r6
    212c:	20 91 8d 06 	lds	r18, 0x068D
    2130:	30 91 8e 06 	lds	r19, 0x068E
    2134:	40 91 8f 06 	lds	r20, 0x068F
    2138:	50 91 90 06 	lds	r21, 0x0690
    213c:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    2140:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    2144:	7b 01       	movw	r14, r22
    2146:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2148:	20 91 91 06 	lds	r18, 0x0691
    214c:	30 91 92 06 	lds	r19, 0x0692
    2150:	40 91 93 06 	lds	r20, 0x0693
    2154:	50 91 94 06 	lds	r21, 0x0694
    2158:	2b af       	std	Y+59, r18	; 0x3b
    215a:	3c af       	std	Y+60, r19	; 0x3c
    215c:	4d af       	std	Y+61, r20	; 0x3d
    215e:	5e af       	std	Y+62, r21	; 0x3e
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2160:	40 91 95 06 	lds	r20, 0x0695
    2164:	50 91 96 06 	lds	r21, 0x0696
    2168:	60 91 97 06 	lds	r22, 0x0697
    216c:	70 91 98 06 	lds	r23, 0x0698
    2170:	4f ab       	std	Y+55, r20	; 0x37
    2172:	58 af       	std	Y+56, r21	; 0x38
    2174:	69 af       	std	Y+57, r22	; 0x39
    2176:	7a af       	std	Y+58, r23	; 0x3a
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    2178:	20 90 99 06 	lds	r2, 0x0699
    217c:	30 90 9a 06 	lds	r3, 0x069A
    2180:	40 90 9b 06 	lds	r4, 0x069B
    2184:	50 90 9c 06 	lds	r5, 0x069C
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    2188:	80 91 0c 05 	lds	r24, 0x050C
    218c:	90 91 0d 05 	lds	r25, 0x050D
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	6a e0       	ldi	r22, 0x0A	; 10
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
    219a:	28 96       	adiw	r28, 0x08	; 8
    219c:	8f af       	std	Y+63, r24	; 0x3f
    219e:	28 97       	sbiw	r28, 0x08	; 8
    21a0:	29 96       	adiw	r28, 0x09	; 9
    21a2:	9f af       	std	Y+63, r25	; 0x3f
    21a4:	29 97       	sbiw	r28, 0x09	; 9
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    21a6:	20 91 0e 05 	lds	r18, 0x050E
    21aa:	30 91 0f 05 	lds	r19, 0x050F
    21ae:	29 96       	adiw	r28, 0x09	; 9
    21b0:	6e ad       	ldd	r22, Y+62	; 0x3e
    21b2:	7f ad       	ldd	r23, Y+63	; 0x3f
    21b4:	29 97       	sbiw	r28, 0x09	; 9
    21b6:	26 17       	cp	r18, r22
    21b8:	37 07       	cpc	r19, r23
    21ba:	71 f4       	brne	.+28     	; 0x21d8 <plan_buffer_line+0x13e>
    21bc:	83 b7       	in	r24, 0x33	; 51
    21be:	81 60       	ori	r24, 0x01	; 1
    21c0:	83 bf       	out	0x33, r24	; 51
    21c2:	88 95       	sleep
    21c4:	83 b7       	in	r24, 0x33	; 51
    21c6:	8e 7f       	andi	r24, 0xFE	; 254
    21c8:	83 bf       	out	0x33, r24	; 51
    21ca:	80 91 0e 05 	lds	r24, 0x050E
    21ce:	90 91 0f 05 	lds	r25, 0x050F
    21d2:	82 17       	cp	r24, r18
    21d4:	93 07       	cpc	r25, r19
    21d6:	91 f3       	breq	.-28     	; 0x21bc <plan_buffer_line+0x122>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    21d8:	20 91 0c 05 	lds	r18, 0x050C
    21dc:	30 91 0d 05 	lds	r19, 0x050D
    21e0:	c9 01       	movw	r24, r18
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	dc 01       	movw	r26, r24
    21f0:	aa 0f       	add	r26, r26
    21f2:	bb 1f       	adc	r27, r27
    21f4:	aa 0f       	add	r26, r26
    21f6:	bb 1f       	adc	r27, r27
    21f8:	aa 0f       	add	r26, r26
    21fa:	bb 1f       	adc	r27, r27
    21fc:	a8 0f       	add	r26, r24
    21fe:	b9 1f       	adc	r27, r25
    2200:	a2 0f       	add	r26, r18
    2202:	b3 1f       	adc	r27, r19
    2204:	ae 5c       	subi	r26, 0xCE	; 206
    2206:	bd 4f       	sbci	r27, 0xFD	; 253
    2208:	be ab       	std	Y+54, r27	; 0x36
    220a:	ad ab       	std	Y+53, r26	; 0x35
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    220c:	80 91 10 05 	lds	r24, 0x0510
    2210:	90 91 11 05 	lds	r25, 0x0511
    2214:	a0 91 12 05 	lds	r26, 0x0512
    2218:	b0 91 13 05 	lds	r27, 0x0513
    221c:	37 01       	movw	r6, r14
    221e:	48 01       	movw	r8, r16
    2220:	68 1a       	sub	r6, r24
    2222:	79 0a       	sbc	r7, r25
    2224:	8a 0a       	sbc	r8, r26
    2226:	9b 0a       	sbc	r9, r27
    2228:	97 fc       	sbrc	r9, 7
    222a:	0a c3       	rjmp	.+1556   	; 0x2840 <__stack+0x641>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    222c:	c2 01       	movw	r24, r4
    222e:	b1 01       	movw	r22, r2
    2230:	a6 01       	movw	r20, r12
    2232:	95 01       	movw	r18, r10
    2234:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    2238:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    223c:	6d 87       	std	Y+13, r22	; 0x0d
    223e:	7e 87       	std	Y+14, r23	; 0x0e
    2240:	8f 87       	std	Y+15, r24	; 0x0f
    2242:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2244:	6f a9       	ldd	r22, Y+55	; 0x37
    2246:	78 ad       	ldd	r23, Y+56	; 0x38
    2248:	89 ad       	ldd	r24, Y+57	; 0x39
    224a:	9a ad       	ldd	r25, Y+58	; 0x3a
    224c:	27 96       	adiw	r28, 0x07	; 7
    224e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2250:	3d ad       	ldd	r19, Y+61	; 0x3d
    2252:	4e ad       	ldd	r20, Y+62	; 0x3e
    2254:	5f ad       	ldd	r21, Y+63	; 0x3f
    2256:	27 97       	sbiw	r28, 0x07	; 7
    2258:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    225c:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    2260:	69 87       	std	Y+9, r22	; 0x09
    2262:	7a 87       	std	Y+10, r23	; 0x0a
    2264:	8b 87       	std	Y+11, r24	; 0x0b
    2266:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2268:	6b ad       	ldd	r22, Y+59	; 0x3b
    226a:	7c ad       	ldd	r23, Y+60	; 0x3c
    226c:	8d ad       	ldd	r24, Y+61	; 0x3d
    226e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2270:	23 96       	adiw	r28, 0x03	; 3
    2272:	2c ad       	ldd	r18, Y+60	; 0x3c
    2274:	3d ad       	ldd	r19, Y+61	; 0x3d
    2276:	4e ad       	ldd	r20, Y+62	; 0x3e
    2278:	5f ad       	ldd	r21, Y+63	; 0x3f
    227a:	23 97       	sbiw	r28, 0x03	; 3
    227c:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    2280:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    2284:	6d 83       	std	Y+5, r22	; 0x05
    2286:	7e 83       	std	Y+6, r23	; 0x06
    2288:	8f 83       	std	Y+7, r24	; 0x07
    228a:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    228c:	e9 82       	std	Y+1, r14	; 0x01
    228e:	fa 82       	std	Y+2, r15	; 0x02
    2290:	0b 83       	std	Y+3, r16	; 0x03
    2292:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2294:	ed a9       	ldd	r30, Y+53	; 0x35
    2296:	fe a9       	ldd	r31, Y+54	; 0x36
    2298:	60 82       	st	Z, r6
    229a:	71 82       	std	Z+1, r7	; 0x01
    229c:	82 82       	std	Z+2, r8	; 0x02
    229e:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    22a0:	ad 80       	ldd	r10, Y+5	; 0x05
    22a2:	be 80       	ldd	r11, Y+6	; 0x06
    22a4:	cf 80       	ldd	r12, Y+7	; 0x07
    22a6:	d8 84       	ldd	r13, Y+8	; 0x08
    22a8:	80 91 14 05 	lds	r24, 0x0514
    22ac:	90 91 15 05 	lds	r25, 0x0515
    22b0:	a0 91 16 05 	lds	r26, 0x0516
    22b4:	b0 91 17 05 	lds	r27, 0x0517
    22b8:	a6 01       	movw	r20, r12
    22ba:	95 01       	movw	r18, r10
    22bc:	28 1b       	sub	r18, r24
    22be:	39 0b       	sbc	r19, r25
    22c0:	4a 0b       	sbc	r20, r26
    22c2:	5b 0b       	sbc	r21, r27
    22c4:	da 01       	movw	r26, r20
    22c6:	c9 01       	movw	r24, r18
    22c8:	57 fd       	sbrc	r21, 7
    22ca:	cb c2       	rjmp	.+1430   	; 0x2862 <__stack+0x663>
    22cc:	ed a9       	ldd	r30, Y+53	; 0x35
    22ce:	fe a9       	ldd	r31, Y+54	; 0x36
    22d0:	84 83       	std	Z+4, r24	; 0x04
    22d2:	95 83       	std	Z+5, r25	; 0x05
    22d4:	a6 83       	std	Z+6, r26	; 0x06
    22d6:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    22d8:	20 90 18 05 	lds	r2, 0x0518
    22dc:	30 90 19 05 	lds	r3, 0x0519
    22e0:	40 90 1a 05 	lds	r4, 0x051A
    22e4:	50 90 1b 05 	lds	r5, 0x051B
    22e8:	69 84       	ldd	r6, Y+9	; 0x09
    22ea:	7a 84       	ldd	r7, Y+10	; 0x0a
    22ec:	8b 84       	ldd	r8, Y+11	; 0x0b
    22ee:	9c 84       	ldd	r9, Y+12	; 0x0c
    22f0:	d4 01       	movw	r26, r8
    22f2:	c3 01       	movw	r24, r6
    22f4:	82 19       	sub	r24, r2
    22f6:	93 09       	sbc	r25, r3
    22f8:	a4 09       	sbc	r26, r4
    22fa:	b5 09       	sbc	r27, r5
    22fc:	b7 fd       	sbrc	r27, 7
    22fe:	a9 c2       	rjmp	.+1362   	; 0x2852 <__stack+0x653>
    2300:	ed a9       	ldd	r30, Y+53	; 0x35
    2302:	fe a9       	ldd	r31, Y+54	; 0x36
    2304:	80 87       	std	Z+8, r24	; 0x08
    2306:	91 87       	std	Z+9, r25	; 0x09
    2308:	a2 87       	std	Z+10, r26	; 0x0a
    230a:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    230c:	20 91 1c 05 	lds	r18, 0x051C
    2310:	30 91 1d 05 	lds	r19, 0x051D
    2314:	40 91 1e 05 	lds	r20, 0x051E
    2318:	50 91 1f 05 	lds	r21, 0x051F
    231c:	29 8b       	std	Y+17, r18	; 0x11
    231e:	3a 8b       	std	Y+18, r19	; 0x12
    2320:	4b 8b       	std	Y+19, r20	; 0x13
    2322:	5c 8b       	std	Y+20, r21	; 0x14
    2324:	4d 85       	ldd	r20, Y+13	; 0x0d
    2326:	5e 85       	ldd	r21, Y+14	; 0x0e
    2328:	6f 85       	ldd	r22, Y+15	; 0x0f
    232a:	78 89       	ldd	r23, Y+16	; 0x10
    232c:	2d 96       	adiw	r28, 0x0d	; 13
    232e:	4c af       	std	Y+60, r20	; 0x3c
    2330:	5d af       	std	Y+61, r21	; 0x3d
    2332:	6e af       	std	Y+62, r22	; 0x3e
    2334:	7f af       	std	Y+63, r23	; 0x3f
    2336:	2d 97       	sbiw	r28, 0x0d	; 13
    2338:	7a 01       	movw	r14, r20
    233a:	8b 01       	movw	r16, r22
    233c:	69 89       	ldd	r22, Y+17	; 0x11
    233e:	7a 89       	ldd	r23, Y+18	; 0x12
    2340:	8b 89       	ldd	r24, Y+19	; 0x13
    2342:	9c 89       	ldd	r25, Y+20	; 0x14
    2344:	e6 1a       	sub	r14, r22
    2346:	f7 0a       	sbc	r15, r23
    2348:	08 0b       	sbc	r16, r24
    234a:	19 0b       	sbc	r17, r25
    234c:	17 fd       	sbrc	r17, 7
    234e:	6f c2       	rjmp	.+1246   	; 0x282e <__stack+0x62f>
    2350:	ad a9       	ldd	r26, Y+53	; 0x35
    2352:	be a9       	ldd	r27, Y+54	; 0x36
    2354:	1c 96       	adiw	r26, 0x0c	; 12
    2356:	ed 92       	st	X+, r14
    2358:	fd 92       	st	X+, r15
    235a:	0d 93       	st	X+, r16
    235c:	1c 93       	st	X, r17
    235e:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    2360:	18 96       	adiw	r26, 0x08	; 8
    2362:	2d 91       	ld	r18, X+
    2364:	3d 91       	ld	r19, X+
    2366:	4d 91       	ld	r20, X+
    2368:	5c 91       	ld	r21, X
    236a:	1b 97       	sbiw	r26, 0x0b	; 11
    236c:	fd 01       	movw	r30, r26
    236e:	84 81       	ldd	r24, Z+4	; 0x04
    2370:	95 81       	ldd	r25, Z+5	; 0x05
    2372:	a6 81       	ldd	r26, Z+6	; 0x06
    2374:	b7 81       	ldd	r27, Z+7	; 0x07
    2376:	82 17       	cp	r24, r18
    2378:	93 07       	cpc	r25, r19
    237a:	a4 07       	cpc	r26, r20
    237c:	b5 07       	cpc	r27, r21
    237e:	48 f1       	brcs	.+82     	; 0x23d2 <__stack+0x1d3>
    2380:	ed a9       	ldd	r30, Y+53	; 0x35
    2382:	fe a9       	ldd	r31, Y+54	; 0x36
    2384:	20 81       	ld	r18, Z
    2386:	31 81       	ldd	r19, Z+1	; 0x01
    2388:	42 81       	ldd	r20, Z+2	; 0x02
    238a:	53 81       	ldd	r21, Z+3	; 0x03
    238c:	82 17       	cp	r24, r18
    238e:	93 07       	cpc	r25, r19
    2390:	a4 07       	cpc	r26, r20
    2392:	b5 07       	cpc	r27, r21
    2394:	b0 f0       	brcs	.+44     	; 0x23c2 <__stack+0x1c3>
    2396:	8e 15       	cp	r24, r14
    2398:	9f 05       	cpc	r25, r15
    239a:	a0 07       	cpc	r26, r16
    239c:	b1 07       	cpc	r27, r17
    239e:	70 f0       	brcs	.+28     	; 0x23bc <__stack+0x1bd>
    23a0:	ed a9       	ldd	r30, Y+53	; 0x35
    23a2:	fe a9       	ldd	r31, Y+54	; 0x36
    23a4:	81 8b       	std	Z+17, r24	; 0x11
    23a6:	92 8b       	std	Z+18, r25	; 0x12
    23a8:	a3 8b       	std	Z+19, r26	; 0x13
    23aa:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	a1 05       	cpc	r26, r1
    23b0:	b1 05       	cpc	r27, r1
    23b2:	91 f4       	brne	.+36     	; 0x23d8 <__stack+0x1d9>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
#endif

// needs for GUI ACK
 	ackHost = 'X';
    23b4:	88 e5       	ldi	r24, 0x58	; 88
    23b6:	80 93 54 05 	sts	0x0554, r24
    23ba:	9c ce       	rjmp	.-712    	; 0x20f4 <plan_buffer_line+0x5a>
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    23bc:	d8 01       	movw	r26, r16
    23be:	c7 01       	movw	r24, r14
    23c0:	ef cf       	rjmp	.-34     	; 0x23a0 <__stack+0x1a1>
    23c2:	da 01       	movw	r26, r20
    23c4:	c9 01       	movw	r24, r18
    23c6:	8e 15       	cp	r24, r14
    23c8:	9f 05       	cpc	r25, r15
    23ca:	a0 07       	cpc	r26, r16
    23cc:	b1 07       	cpc	r27, r17
    23ce:	40 f7       	brcc	.-48     	; 0x23a0 <__stack+0x1a1>
    23d0:	f5 cf       	rjmp	.-22     	; 0x23bc <__stack+0x1bd>
    23d2:	da 01       	movw	r26, r20
    23d4:	c9 01       	movw	r24, r18
    23d6:	d4 cf       	rjmp	.-88     	; 0x2380 <__stack+0x181>
// needs for GUI ACK
 	ackHost = 'X';
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    23d8:	29 81       	ldd	r18, Y+1	; 0x01
    23da:	3a 81       	ldd	r19, Y+2	; 0x02
    23dc:	4b 81       	ldd	r20, Y+3	; 0x03
    23de:	5c 81       	ldd	r21, Y+4	; 0x04
    23e0:	2d 8f       	std	Y+29, r18	; 0x1d
    23e2:	3e 8f       	std	Y+30, r19	; 0x1e
    23e4:	4f 8f       	std	Y+31, r20	; 0x1f
    23e6:	58 a3       	std	Y+32, r21	; 0x20
    23e8:	80 91 10 05 	lds	r24, 0x0510
    23ec:	90 91 11 05 	lds	r25, 0x0511
    23f0:	a0 91 12 05 	lds	r26, 0x0512
    23f4:	b0 91 13 05 	lds	r27, 0x0513
    23f8:	28 1b       	sub	r18, r24
    23fa:	39 0b       	sbc	r19, r25
    23fc:	4a 0b       	sbc	r20, r26
    23fe:	5b 0b       	sbc	r21, r27
    2400:	ca 01       	movw	r24, r20
    2402:	b9 01       	movw	r22, r18
    2404:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    2408:	20 91 8d 06 	lds	r18, 0x068D
    240c:	30 91 8e 06 	lds	r19, 0x068E
    2410:	40 91 8f 06 	lds	r20, 0x068F
    2414:	50 91 90 06 	lds	r21, 0x0690
    2418:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    241c:	69 ab       	std	Y+49, r22	; 0x31
    241e:	7a ab       	std	Y+50, r23	; 0x32
    2420:	8b ab       	std	Y+51, r24	; 0x33
    2422:	9c ab       	std	Y+52, r25	; 0x34
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    2424:	a9 a2       	std	Y+33, r10	; 0x21
    2426:	ba a2       	std	Y+34, r11	; 0x22
    2428:	cb a2       	std	Y+35, r12	; 0x23
    242a:	dc a2       	std	Y+36, r13	; 0x24
    242c:	80 91 14 05 	lds	r24, 0x0514
    2430:	90 91 15 05 	lds	r25, 0x0515
    2434:	a0 91 16 05 	lds	r26, 0x0516
    2438:	b0 91 17 05 	lds	r27, 0x0517
    243c:	a6 01       	movw	r20, r12
    243e:	95 01       	movw	r18, r10
    2440:	28 1b       	sub	r18, r24
    2442:	39 0b       	sbc	r19, r25
    2444:	4a 0b       	sbc	r20, r26
    2446:	5b 0b       	sbc	r21, r27
    2448:	ca 01       	movw	r24, r20
    244a:	b9 01       	movw	r22, r18
    244c:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    2450:	20 91 91 06 	lds	r18, 0x0691
    2454:	30 91 92 06 	lds	r19, 0x0692
    2458:	40 91 93 06 	lds	r20, 0x0693
    245c:	50 91 94 06 	lds	r21, 0x0694
    2460:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    2464:	6d a7       	std	Y+45, r22	; 0x2d
    2466:	7e a7       	std	Y+46, r23	; 0x2e
    2468:	8f a7       	std	Y+47, r24	; 0x2f
    246a:	98 ab       	std	Y+48, r25	; 0x30
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    246c:	69 8e       	std	Y+25, r6	; 0x19
    246e:	7a 8e       	std	Y+26, r7	; 0x1a
    2470:	8b 8e       	std	Y+27, r8	; 0x1b
    2472:	9c 8e       	std	Y+28, r9	; 0x1c
    2474:	c4 01       	movw	r24, r8
    2476:	b3 01       	movw	r22, r6
    2478:	62 19       	sub	r22, r2
    247a:	73 09       	sbc	r23, r3
    247c:	84 09       	sbc	r24, r4
    247e:	95 09       	sbc	r25, r5
    2480:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    2484:	20 91 95 06 	lds	r18, 0x0695
    2488:	30 91 96 06 	lds	r19, 0x0696
    248c:	40 91 97 06 	lds	r20, 0x0697
    2490:	50 91 98 06 	lds	r21, 0x0698
    2494:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    2498:	69 a7       	std	Y+41, r22	; 0x29
    249a:	7a a7       	std	Y+42, r23	; 0x2a
    249c:	8b a7       	std	Y+43, r24	; 0x2b
    249e:	9c a7       	std	Y+44, r25	; 0x2c
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    24a0:	2d 96       	adiw	r28, 0x0d	; 13
    24a2:	4c ad       	ldd	r20, Y+60	; 0x3c
    24a4:	5d ad       	ldd	r21, Y+61	; 0x3d
    24a6:	6e ad       	ldd	r22, Y+62	; 0x3e
    24a8:	7f ad       	ldd	r23, Y+63	; 0x3f
    24aa:	2d 97       	sbiw	r28, 0x0d	; 13
    24ac:	4d 8b       	std	Y+21, r20	; 0x15
    24ae:	5e 8b       	std	Y+22, r21	; 0x16
    24b0:	6f 8b       	std	Y+23, r22	; 0x17
    24b2:	78 8f       	std	Y+24, r23	; 0x18
    24b4:	cb 01       	movw	r24, r22
    24b6:	ba 01       	movw	r22, r20
    24b8:	29 89       	ldd	r18, Y+17	; 0x11
    24ba:	3a 89       	ldd	r19, Y+18	; 0x12
    24bc:	4b 89       	ldd	r20, Y+19	; 0x13
    24be:	5c 89       	ldd	r21, Y+20	; 0x14
    24c0:	62 1b       	sub	r22, r18
    24c2:	73 0b       	sbc	r23, r19
    24c4:	84 0b       	sbc	r24, r20
    24c6:	95 0b       	sbc	r25, r21
    24c8:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    24cc:	20 91 99 06 	lds	r18, 0x0699
    24d0:	30 91 9a 06 	lds	r19, 0x069A
    24d4:	40 91 9b 06 	lds	r20, 0x069B
    24d8:	50 91 9c 06 	lds	r21, 0x069C
    24dc:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    24e0:	6d a3       	std	Y+37, r22	; 0x25
    24e2:	7e a3       	std	Y+38, r23	; 0x26
    24e4:	8f a3       	std	Y+39, r24	; 0x27
    24e6:	98 a7       	std	Y+40, r25	; 0x28
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    24e8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ea:	7a a9       	ldd	r23, Y+50	; 0x32
    24ec:	8b a9       	ldd	r24, Y+51	; 0x33
    24ee:	9c a9       	ldd	r25, Y+52	; 0x34
    24f0:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <square>
    24f4:	3b 01       	movw	r6, r22
    24f6:	4c 01       	movw	r8, r24
    24f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    24fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    24fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2500:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <square>
    2504:	7b 01       	movw	r14, r22
    2506:	8c 01       	movw	r16, r24
    2508:	69 a5       	ldd	r22, Y+41	; 0x29
    250a:	7a a5       	ldd	r23, Y+42	; 0x2a
    250c:	8b a5       	ldd	r24, Y+43	; 0x2b
    250e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2510:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <square>
    2514:	5b 01       	movw	r10, r22
    2516:	6c 01       	movw	r12, r24
    2518:	6d a1       	ldd	r22, Y+37	; 0x25
    251a:	7e a1       	ldd	r23, Y+38	; 0x26
    251c:	8f a1       	ldd	r24, Y+39	; 0x27
    251e:	98 a5       	ldd	r25, Y+40	; 0x28
    2520:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <square>
    2524:	1b 01       	movw	r2, r22
    2526:	2c 01       	movw	r4, r24
    2528:	c4 01       	movw	r24, r8
    252a:	b3 01       	movw	r22, r6
    252c:	a8 01       	movw	r20, r16
    252e:	97 01       	movw	r18, r14
    2530:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    2534:	a6 01       	movw	r20, r12
    2536:	95 01       	movw	r18, r10
    2538:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    253c:	a2 01       	movw	r20, r4
    253e:	91 01       	movw	r18, r2
    2540:	0e 94 45 2b 	call	0x568a	; 0x568a <__addsf3>
    2544:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <sqrt>
    2548:	ad a9       	ldd	r26, Y+53	; 0x35
    254a:	be a9       	ldd	r27, Y+54	; 0x36
    254c:	9d 96       	adiw	r26, 0x2d	; 45
    254e:	6d 93       	st	X+, r22
    2550:	7d 93       	st	X+, r23
    2552:	8d 93       	st	X+, r24
    2554:	9c 93       	st	X, r25
    2556:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    2558:	a8 96       	adiw	r28, 0x28	; 40
    255a:	ee ad       	ldd	r30, Y+62	; 0x3e
    255c:	ff ad       	ldd	r31, Y+63	; 0x3f
    255e:	a8 97       	sbiw	r28, 0x28	; 40
    2560:	ef 2b       	or	r30, r31
    2562:	09 f0       	breq	.+2      	; 0x2566 <__stack+0x367>
    2564:	86 c1       	rjmp	.+780    	; 0x2872 <__stack+0x673>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2566:	a6 96       	adiw	r28, 0x26	; 38
    2568:	2c ad       	ldd	r18, Y+60	; 0x3c
    256a:	3d ad       	ldd	r19, Y+61	; 0x3d
    256c:	4e ad       	ldd	r20, Y+62	; 0x3e
    256e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2570:	a6 97       	sbiw	r28, 0x26	; 38
    2572:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	34 e2       	ldi	r19, 0x24	; 36
    257a:	44 e7       	ldi	r20, 0x74	; 116
    257c:	59 e4       	ldi	r21, 0x49	; 73
    257e:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2582:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <lround>
    2586:	ac 01       	movw	r20, r24
    2588:	cb 01       	movw	r24, r22
    258a:	da 01       	movw	r26, r20
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2590:	0e 94 81 2c 	call	0x5902	; 0x5902 <__floatunsisf>
    2594:	9b 01       	movw	r18, r22
    2596:	ac 01       	movw	r20, r24
    2598:	60 ec       	ldi	r22, 0xC0	; 192
    259a:	71 ee       	ldi	r23, 0xE1	; 225
    259c:	84 e6       	ldi	r24, 0x64	; 100
    259e:	9c e4       	ldi	r25, 0x4C	; 76
    25a0:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    25a4:	7b 01       	movw	r14, r22
    25a6:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    25a8:	69 a9       	ldd	r22, Y+49	; 0x31
    25aa:	7a a9       	ldd	r23, Y+50	; 0x32
    25ac:	8b a9       	ldd	r24, Y+51	; 0x33
    25ae:	9c a9       	ldd	r25, Y+52	; 0x34
    25b0:	a8 01       	movw	r20, r16
    25b2:	97 01       	movw	r18, r14
    25b4:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    25b8:	ad a9       	ldd	r26, Y+53	; 0x35
    25ba:	be a9       	ldd	r27, Y+54	; 0x36
    25bc:	59 96       	adiw	r26, 0x19	; 25
    25be:	6d 93       	st	X+, r22
    25c0:	7d 93       	st	X+, r23
    25c2:	8d 93       	st	X+, r24
    25c4:	9c 93       	st	X, r25
    25c6:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    25c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    25ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    25cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ce:	98 a9       	ldd	r25, Y+48	; 0x30
    25d0:	a8 01       	movw	r20, r16
    25d2:	97 01       	movw	r18, r14
    25d4:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    25d8:	ed a9       	ldd	r30, Y+53	; 0x35
    25da:	fe a9       	ldd	r31, Y+54	; 0x36
    25dc:	65 8f       	std	Z+29, r22	; 0x1d
    25de:	76 8f       	std	Z+30, r23	; 0x1e
    25e0:	87 8f       	std	Z+31, r24	; 0x1f
    25e2:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    25e4:	69 a5       	ldd	r22, Y+41	; 0x29
    25e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    25e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ec:	a8 01       	movw	r20, r16
    25ee:	97 01       	movw	r18, r14
    25f0:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    25f4:	ad a9       	ldd	r26, Y+53	; 0x35
    25f6:	be a9       	ldd	r27, Y+54	; 0x36
    25f8:	91 96       	adiw	r26, 0x21	; 33
    25fa:	6d 93       	st	X+, r22
    25fc:	7d 93       	st	X+, r23
    25fe:	8d 93       	st	X+, r24
    2600:	9c 93       	st	X, r25
    2602:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    2604:	6d a1       	ldd	r22, Y+37	; 0x25
    2606:	7e a1       	ldd	r23, Y+38	; 0x26
    2608:	8f a1       	ldd	r24, Y+39	; 0x27
    260a:	98 a5       	ldd	r25, Y+40	; 0x28
    260c:	a8 01       	movw	r20, r16
    260e:	97 01       	movw	r18, r14
    2610:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    2614:	ed a9       	ldd	r30, Y+53	; 0x35
    2616:	fe a9       	ldd	r31, Y+54	; 0x36
    2618:	65 a3       	std	Z+37, r22	; 0x25
    261a:	76 a3       	std	Z+38, r23	; 0x26
    261c:	87 a3       	std	Z+39, r24	; 0x27
    261e:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    2620:	65 a5       	ldd	r22, Z+45	; 0x2d
    2622:	76 a5       	ldd	r23, Z+46	; 0x2e
    2624:	87 a5       	ldd	r24, Z+47	; 0x2f
    2626:	90 a9       	ldd	r25, Z+48	; 0x30
    2628:	a8 01       	movw	r20, r16
    262a:	97 01       	movw	r18, r14
    262c:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    2630:	ad a9       	ldd	r26, Y+53	; 0x35
    2632:	be a9       	ldd	r27, Y+54	; 0x36
    2634:	99 96       	adiw	r26, 0x29	; 41
    2636:	6d 93       	st	X+, r22
    2638:	7d 93       	st	X+, r23
    263a:	8d 93       	st	X+, r24
    263c:	9c 93       	st	X, r25
    263e:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    2640:	51 96       	adiw	r26, 0x11	; 17
    2642:	6d 91       	ld	r22, X+
    2644:	7d 91       	ld	r23, X+
    2646:	8d 91       	ld	r24, X+
    2648:	9c 91       	ld	r25, X
    264a:	54 97       	sbiw	r26, 0x14	; 20
    264c:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    2650:	5b 01       	movw	r10, r22
    2652:	6c 01       	movw	r12, r24
    2654:	a8 01       	movw	r20, r16
    2656:	97 01       	movw	r18, r14
    2658:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    265c:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <ceil>
    2660:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
    2664:	3b 01       	movw	r6, r22
    2666:	4c 01       	movw	r8, r24
    2668:	ed a9       	ldd	r30, Y+53	; 0x35
    266a:	fe a9       	ldd	r31, Y+54	; 0x36
    266c:	65 8b       	std	Z+21, r22	; 0x15
    266e:	76 8b       	std	Z+22, r23	; 0x16
    2670:	87 8b       	std	Z+23, r24	; 0x17
    2672:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	a0 e0       	ldi	r26, 0x00	; 0
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	81 ab       	std	Z+49, r24	; 0x31
    267e:	92 ab       	std	Z+50, r25	; 0x32
    2680:	a3 ab       	std	Z+51, r26	; 0x33
    2682:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2684:	60 91 ab 06 	lds	r22, 0x06AB
    2688:	70 91 ac 06 	lds	r23, 0x06AC
    268c:	80 91 ad 06 	lds	r24, 0x06AD
    2690:	90 91 ae 06 	lds	r25, 0x06AE
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e7       	ldi	r20, 0x70	; 112
    269a:	52 e4       	ldi	r21, 0x42	; 66
    269c:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e2       	ldi	r20, 0x20	; 32
    26a6:	52 e4       	ldi	r21, 0x42	; 66
    26a8:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    26ac:	7b 01       	movw	r14, r22
    26ae:	8c 01       	movw	r16, r24
    26b0:	ad a9       	ldd	r26, Y+53	; 0x35
    26b2:	be a9       	ldd	r27, Y+54	; 0x36
    26b4:	9d 96       	adiw	r26, 0x2d	; 45
    26b6:	6d 91       	ld	r22, X+
    26b8:	7d 91       	ld	r23, X+
    26ba:	8d 91       	ld	r24, X+
    26bc:	9c 91       	ld	r25, X
    26be:	d0 97       	sbiw	r26, 0x30	; 48
    26c0:	a6 01       	movw	r20, r12
    26c2:	95 01       	movw	r18, r10
    26c4:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    26c8:	9b 01       	movw	r18, r22
    26ca:	ac 01       	movw	r20, r24
    26cc:	c8 01       	movw	r24, r16
    26ce:	b7 01       	movw	r22, r14
    26d0:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    26d4:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <ceil>
    26d8:	0d a9       	ldd	r16, Y+53	; 0x35
    26da:	1e a9       	ldd	r17, Y+54	; 0x36
    26dc:	03 5c       	subi	r16, 0xC3	; 195
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    26e4:	f8 01       	movw	r30, r16
    26e6:	60 83       	st	Z, r22
    26e8:	71 83       	std	Z+1, r23	; 0x01
    26ea:	82 83       	std	Z+2, r24	; 0x02
    26ec:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    26ee:	20 91 20 05 	lds	r18, 0x0520
    26f2:	22 23       	and	r18, r18
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <__stack+0x4f9>
    26f6:	ca c0       	rjmp	.+404    	; 0x288c <__stack+0x68d>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    26f8:	ad a9       	ldd	r26, Y+53	; 0x35
    26fa:	be a9       	ldd	r27, Y+54	; 0x36
    26fc:	d5 96       	adiw	r26, 0x35	; 53
    26fe:	6d 92       	st	X+, r6
    2700:	7d 92       	st	X+, r7
    2702:	8d 92       	st	X+, r8
    2704:	9c 92       	st	X, r9
    2706:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    2708:	fd 01       	movw	r30, r26
    270a:	61 ae       	std	Z+57, r6	; 0x39
    270c:	72 ae       	std	Z+58, r7	; 0x3a
    270e:	83 ae       	std	Z+59, r8	; 0x3b
    2710:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    2712:	ef 5b       	subi	r30, 0xBF	; 191
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	10 82       	st	Z, r1
    2718:	11 82       	std	Z+1, r1	; 0x01
    271a:	12 82       	std	Z+2, r1	; 0x02
    271c:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    271e:	ad 01       	movw	r20, r26
    2720:	4b 5b       	subi	r20, 0xBB	; 187
    2722:	5f 4f       	sbci	r21, 0xFF	; 255
    2724:	fd 01       	movw	r30, r26
    2726:	81 89       	ldd	r24, Z+17	; 0x11
    2728:	92 89       	ldd	r25, Z+18	; 0x12
    272a:	a3 89       	ldd	r26, Z+19	; 0x13
    272c:	b4 89       	ldd	r27, Z+20	; 0x14
    272e:	fa 01       	movw	r30, r20
    2730:	80 83       	st	Z, r24
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	a2 83       	std	Z+2, r26	; 0x02
    2736:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    2738:	d8 01       	movw	r26, r16
    273a:	1d 92       	st	X+, r1
    273c:	1d 92       	st	X+, r1
    273e:	1d 92       	st	X+, r1
    2740:	1c 92       	st	X, r1
    2742:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    2744:	ed a9       	ldd	r30, Y+53	; 0x35
    2746:	fe a9       	ldd	r31, Y+54	; 0x36
    2748:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    274a:	80 91 10 05 	lds	r24, 0x0510
    274e:	90 91 11 05 	lds	r25, 0x0511
    2752:	a0 91 12 05 	lds	r26, 0x0512
    2756:	b0 91 13 05 	lds	r27, 0x0513
    275a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    275c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    275e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2760:	78 a1       	ldd	r23, Y+32	; 0x20
    2762:	48 17       	cp	r20, r24
    2764:	59 07       	cpc	r21, r25
    2766:	6a 07       	cpc	r22, r26
    2768:	7b 07       	cpc	r23, r27
    276a:	14 f4       	brge	.+4      	; 0x2770 <__stack+0x571>
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2770:	80 91 14 05 	lds	r24, 0x0514
    2774:	90 91 15 05 	lds	r25, 0x0515
    2778:	a0 91 16 05 	lds	r26, 0x0516
    277c:	b0 91 17 05 	lds	r27, 0x0517
    2780:	49 a1       	ldd	r20, Y+33	; 0x21
    2782:	5a a1       	ldd	r21, Y+34	; 0x22
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	48 17       	cp	r20, r24
    278a:	59 07       	cpc	r21, r25
    278c:	6a 07       	cpc	r22, r26
    278e:	7b 07       	cpc	r23, r27
    2790:	44 f4       	brge	.+16     	; 0x27a2 <__stack+0x5a3>
    2792:	ad a9       	ldd	r26, Y+53	; 0x35
    2794:	be a9       	ldd	r27, Y+54	; 0x36
    2796:	50 96       	adiw	r26, 0x10	; 16
    2798:	8c 91       	ld	r24, X
    279a:	50 97       	sbiw	r26, 0x10	; 16
    279c:	88 60       	ori	r24, 0x08	; 8
    279e:	50 96       	adiw	r26, 0x10	; 16
    27a0:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    27a2:	80 91 18 05 	lds	r24, 0x0518
    27a6:	90 91 19 05 	lds	r25, 0x0519
    27aa:	a0 91 1a 05 	lds	r26, 0x051A
    27ae:	b0 91 1b 05 	lds	r27, 0x051B
    27b2:	49 8d       	ldd	r20, Y+25	; 0x19
    27b4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    27b6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    27b8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    27ba:	48 17       	cp	r20, r24
    27bc:	59 07       	cpc	r21, r25
    27be:	6a 07       	cpc	r22, r26
    27c0:	7b 07       	cpc	r23, r27
    27c2:	44 f4       	brge	.+16     	; 0x27d4 <__stack+0x5d5>
    27c4:	ad a9       	ldd	r26, Y+53	; 0x35
    27c6:	be a9       	ldd	r27, Y+54	; 0x36
    27c8:	50 96       	adiw	r26, 0x10	; 16
    27ca:	8c 91       	ld	r24, X
    27cc:	50 97       	sbiw	r26, 0x10	; 16
    27ce:	80 64       	ori	r24, 0x40	; 64
    27d0:	50 96       	adiw	r26, 0x10	; 16
    27d2:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    27d4:	4d 89       	ldd	r20, Y+21	; 0x15
    27d6:	5e 89       	ldd	r21, Y+22	; 0x16
    27d8:	6f 89       	ldd	r22, Y+23	; 0x17
    27da:	78 8d       	ldd	r23, Y+24	; 0x18
    27dc:	89 89       	ldd	r24, Y+17	; 0x11
    27de:	9a 89       	ldd	r25, Y+18	; 0x12
    27e0:	ab 89       	ldd	r26, Y+19	; 0x13
    27e2:	bc 89       	ldd	r27, Y+20	; 0x14
    27e4:	48 17       	cp	r20, r24
    27e6:	59 07       	cpc	r21, r25
    27e8:	6a 07       	cpc	r22, r26
    27ea:	7b 07       	cpc	r23, r27
    27ec:	44 f4       	brge	.+16     	; 0x27fe <__stack+0x5ff>
    27ee:	ad a9       	ldd	r26, Y+53	; 0x35
    27f0:	be a9       	ldd	r27, Y+54	; 0x36
    27f2:	50 96       	adiw	r26, 0x10	; 16
    27f4:	8c 91       	ld	r24, X
    27f6:	50 97       	sbiw	r26, 0x10	; 16
    27f8:	80 68       	ori	r24, 0x80	; 128
    27fa:	50 96       	adiw	r26, 0x10	; 16
    27fc:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    27fe:	29 96       	adiw	r28, 0x09	; 9
    2800:	ee ad       	ldd	r30, Y+62	; 0x3e
    2802:	ff ad       	ldd	r31, Y+63	; 0x3f
    2804:	29 97       	sbiw	r28, 0x09	; 9
    2806:	f0 93 0d 05 	sts	0x050D, r31
    280a:	e0 93 0c 05 	sts	0x050C, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    280e:	a0 e1       	ldi	r26, 0x10	; 16
    2810:	b5 e0       	ldi	r27, 0x05	; 5
    2812:	fe 01       	movw	r30, r28
    2814:	31 96       	adiw	r30, 0x01	; 1
    2816:	80 e1       	ldi	r24, 0x10	; 16
    2818:	01 90       	ld	r0, Z+
    281a:	0d 92       	st	X+, r0
    281c:	81 50       	subi	r24, 0x01	; 1
    281e:	e1 f7       	brne	.-8      	; 0x2818 <__stack+0x619>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2820:	22 23       	and	r18, r18
    2822:	11 f0       	breq	.+4      	; 0x2828 <__stack+0x629>
    2824:	0e 94 46 10 	call	0x208c	; 0x208c <planner_recalculate>
  st_wake_up();
    2828:	0e 94 88 17 	call	0x2f10	; 0x2f10 <st_wake_up>
    282c:	63 cc       	rjmp	.-1850   	; 0x20f4 <plan_buffer_line+0x5a>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    282e:	10 95       	com	r17
    2830:	00 95       	com	r16
    2832:	f0 94       	com	r15
    2834:	e0 94       	com	r14
    2836:	e1 1c       	adc	r14, r1
    2838:	f1 1c       	adc	r15, r1
    283a:	01 1d       	adc	r16, r1
    283c:	11 1d       	adc	r17, r1
    283e:	88 cd       	rjmp	.-1264   	; 0x2350 <__stack+0x151>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2840:	90 94       	com	r9
    2842:	80 94       	com	r8
    2844:	70 94       	com	r7
    2846:	60 94       	com	r6
    2848:	61 1c       	adc	r6, r1
    284a:	71 1c       	adc	r7, r1
    284c:	81 1c       	adc	r8, r1
    284e:	91 1c       	adc	r9, r1
    2850:	ed cc       	rjmp	.-1574   	; 0x222c <__stack+0x2d>
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2852:	b0 95       	com	r27
    2854:	a0 95       	com	r26
    2856:	90 95       	com	r25
    2858:	81 95       	neg	r24
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	af 4f       	sbci	r26, 0xFF	; 255
    285e:	bf 4f       	sbci	r27, 0xFF	; 255
    2860:	4f cd       	rjmp	.-1378   	; 0x2300 <__stack+0x101>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2862:	b0 95       	com	r27
    2864:	a0 95       	com	r26
    2866:	90 95       	com	r25
    2868:	81 95       	neg	r24
    286a:	9f 4f       	sbci	r25, 0xFF	; 255
    286c:	af 4f       	sbci	r26, 0xFF	; 255
    286e:	bf 4f       	sbci	r27, 0xFF	; 255
    2870:	2d cd       	rjmp	.-1446   	; 0x22cc <__stack+0xcd>
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2872:	60 ec       	ldi	r22, 0xC0	; 192
    2874:	71 ee       	ldi	r23, 0xE1	; 225
    2876:	84 e6       	ldi	r24, 0x64	; 100
    2878:	9c e4       	ldi	r25, 0x4C	; 76
    287a:	a6 96       	adiw	r28, 0x26	; 38
    287c:	2c ad       	ldd	r18, Y+60	; 0x3c
    287e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2880:	4e ad       	ldd	r20, Y+62	; 0x3e
    2882:	5f ad       	ldd	r21, Y+63	; 0x3f
    2884:	a6 97       	sbiw	r28, 0x26	; 38
    2886:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <__divsf3>
    288a:	7b ce       	rjmp	.-778    	; 0x2582 <__stack+0x383>
  block->rate_delta = ceil(
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    288c:	8d a9       	ldd	r24, Y+53	; 0x35
    288e:	9e a9       	ldd	r25, Y+54	; 0x36
    2890:	0e 94 30 0b 	call	0x1660	; 0x1660 <factor_for_safe_speed>
    2894:	8b 01       	movw	r16, r22
    2896:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    2898:	8d a9       	ldd	r24, Y+53	; 0x35
    289a:	9e a9       	ldd	r25, Y+54	; 0x36
    289c:	b9 01       	movw	r22, r18
    289e:	a8 01       	movw	r20, r16
    28a0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <calculate_trapezoid_for_block>
    28a4:	29 81       	ldd	r18, Y+1	; 0x01
    28a6:	3a 81       	ldd	r19, Y+2	; 0x02
    28a8:	4b 81       	ldd	r20, Y+3	; 0x03
    28aa:	5c 81       	ldd	r21, Y+4	; 0x04
    28ac:	2d 8f       	std	Y+29, r18	; 0x1d
    28ae:	3e 8f       	std	Y+30, r19	; 0x1e
    28b0:	4f 8f       	std	Y+31, r20	; 0x1f
    28b2:	58 a3       	std	Y+32, r21	; 0x20
    28b4:	4d 81       	ldd	r20, Y+5	; 0x05
    28b6:	5e 81       	ldd	r21, Y+6	; 0x06
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	49 a3       	std	Y+33, r20	; 0x21
    28be:	5a a3       	std	Y+34, r21	; 0x22
    28c0:	6b a3       	std	Y+35, r22	; 0x23
    28c2:	7c a3       	std	Y+36, r23	; 0x24
    28c4:	69 85       	ldd	r22, Y+9	; 0x09
    28c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    28c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    28cc:	69 8f       	std	Y+25, r22	; 0x19
    28ce:	7a 8f       	std	Y+26, r23	; 0x1a
    28d0:	8b 8f       	std	Y+27, r24	; 0x1b
    28d2:	9c 8f       	std	Y+28, r25	; 0x1c
    28d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d8:	af 85       	ldd	r26, Y+15	; 0x0f
    28da:	b8 89       	ldd	r27, Y+16	; 0x10
    28dc:	8d 8b       	std	Y+21, r24	; 0x15
    28de:	9e 8b       	std	Y+22, r25	; 0x16
    28e0:	af 8b       	std	Y+23, r26	; 0x17
    28e2:	b8 8f       	std	Y+24, r27	; 0x18
    28e4:	20 91 1c 05 	lds	r18, 0x051C
    28e8:	30 91 1d 05 	lds	r19, 0x051D
    28ec:	40 91 1e 05 	lds	r20, 0x051E
    28f0:	50 91 1f 05 	lds	r21, 0x051F
    28f4:	29 8b       	std	Y+17, r18	; 0x11
    28f6:	3a 8b       	std	Y+18, r19	; 0x12
    28f8:	4b 8b       	std	Y+19, r20	; 0x13
    28fa:	5c 8b       	std	Y+20, r21	; 0x14
    28fc:	20 91 20 05 	lds	r18, 0x0520
    2900:	21 cf       	rjmp	.-446    	; 0x2744 <__stack+0x545>

00002902 <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2906:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <serialRead>
    290a:	98 2f       	mov	r25, r24
    290c:	8f 3f       	cpi	r24, 0xFF	; 255
    290e:	e1 f0       	breq	.+56     	; 0x2948 <sp_process+0x46>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    2910:	20 91 53 05 	lds	r18, 0x0553
    2914:	22 23       	and	r18, r18
    2916:	21 f0       	breq	.+8      	; 0x2920 <sp_process+0x1e>
    2918:	9a 30       	cpi	r25, 0x0A	; 10
    291a:	c9 f0       	breq	.+50     	; 0x294e <sp_process+0x4c>
    291c:	9d 30       	cpi	r25, 0x0D	; 13
    291e:	b9 f0       	breq	.+46     	; 0x294e <sp_process+0x4c>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    2920:	91 32       	cpi	r25, 0x21	; 33
    2922:	8c f3       	brlt	.-30     	; 0x2906 <sp_process+0x4>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2924:	89 2f       	mov	r24, r25
    2926:	81 56       	subi	r24, 0x61	; 97
    2928:	8a 31       	cpi	r24, 0x1A	; 26
    292a:	b8 f5       	brcc	.+110    	; 0x299a <sp_process+0x98>
      line[char_counter++] = c-'a'+'A';
    292c:	e2 2f       	mov	r30, r18
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	ef 5d       	subi	r30, 0xDF	; 223
    2932:	fa 4f       	sbci	r31, 0xFA	; 250
    2934:	90 52       	subi	r25, 0x20	; 32
    2936:	90 83       	st	Z, r25
    2938:	2f 5f       	subi	r18, 0xFF	; 255
    293a:	20 93 53 05 	sts	0x0553, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    293e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <serialRead>
    2942:	98 2f       	mov	r25, r24
    2944:	8f 3f       	cpi	r24, 0xFF	; 255
    2946:	21 f7       	brne	.-56     	; 0x2910 <sp_process+0xe>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2948:	1f 91       	pop	r17
    294a:	0f 91       	pop	r16
    294c:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    294e:	e2 2f       	mov	r30, r18
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	ef 5d       	subi	r30, 0xDF	; 223
    2954:	fa 4f       	sbci	r31, 0xFA	; 250
    2956:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2958:	81 e2       	ldi	r24, 0x21	; 33
    295a:	95 e0       	ldi	r25, 0x05	; 5
    295c:	0e 94 99 05 	call	0xb32	; 0xb32 <gc_execute_line>
    2960:	08 2f       	mov	r16, r24
static uint8_t char_counter;

static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    2962:	80 91 55 05 	lds	r24, 0x0555
    2966:	88 23       	and	r24, r24
    2968:	09 f5       	brne	.+66     	; 0x29ac <sp_process+0xaa>
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n")); 
			break;
		case GCSTATUS_NOT_HOMED:
			printPgmString(PSTR("error: Not homed\n")); 
    296a:	8d e1       	ldi	r24, 0x1D	; 29
    296c:	93 e0       	ldi	r25, 0x03	; 3
    296e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {

		vacuum(0);
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
		head_down(0);
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
		atc_fire(0);
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    298a:	10 92 55 05 	sts	0x0555, r1

		// stops all but home
		set_busy(TRUE);
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2994:	10 92 53 05 	sts	0x0553, r1
    2998:	b6 cf       	rjmp	.-148    	; 0x2906 <sp_process+0x4>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    299a:	e2 2f       	mov	r30, r18
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	ef 5d       	subi	r30, 0xDF	; 223
    29a0:	fa 4f       	sbci	r31, 0xFA	; 250
    29a2:	90 83       	st	Z, r25
    29a4:	2f 5f       	subi	r18, 0xFF	; 255
    29a6:	20 93 53 05 	sts	0x0553, r18
    29aa:	ad cf       	rjmp	.-166    	; 0x2906 <sp_process+0x4>
	// Always override
	if( gHomed == FALSE ) {
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    29ac:	03 30       	cpi	r16, 0x03	; 3
    29ae:	d1 f1       	breq	.+116    	; 0x2a24 <sp_process+0x122>
    29b0:	04 30       	cpi	r16, 0x04	; 4
    29b2:	d8 f0       	brcs	.+54     	; 0x29ea <sp_process+0xe8>
    29b4:	05 30       	cpi	r16, 0x05	; 5
    29b6:	89 f1       	breq	.+98     	; 0x2a1a <sp_process+0x118>
    29b8:	05 30       	cpi	r16, 0x05	; 5
    29ba:	00 f1       	brcs	.+64     	; 0x29fc <sp_process+0xfa>
    29bc:	06 30       	cpi	r16, 0x06	; 6
    29be:	51 f3       	breq	.-44     	; 0x2994 <sp_process+0x92>
    29c0:	03 36       	cpi	r16, 0x63	; 99
    29c2:	99 f2       	breq	.-90     	; 0x296a <sp_process+0x68>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    29c4:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case GCSTATUS_NO_ACK:
			return;
			break;
		default:
			printPgmString(PSTR("error: "));
    29c6:	85 e1       	ldi	r24, 0x15	; 21
    29c8:	93 e0       	ldi	r25, 0x03	; 3
    29ca:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
			printInteger(status_code);
    29ce:	b8 01       	movw	r22, r16
    29d0:	88 27       	eor	r24, r24
    29d2:	77 fd       	sbrc	r23, 7
    29d4:	80 95       	com	r24
    29d6:	98 2f       	mov	r25, r24
    29d8:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
			printPgmString(PSTR("\n"));
    29dc:	83 e1       	ldi	r24, 0x13	; 19
    29de:	93 e0       	ldi	r25, 0x03	; 3
    29e0:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    29e4:	01 2b       	or	r16, r17
    29e6:	b1 f2       	breq	.-84     	; 0x2994 <sp_process+0x92>
    29e8:	c4 cf       	rjmp	.-120    	; 0x2972 <sp_process+0x70>
	// Always override
	if( gHomed == FALSE ) {
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    29ea:	01 30       	cpi	r16, 0x01	; 1
    29ec:	89 f0       	breq	.+34     	; 0x2a10 <sp_process+0x10e>
    29ee:	02 30       	cpi	r16, 0x02	; 2
    29f0:	50 f0       	brcs	.+20     	; 0x2a06 <sp_process+0x104>
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n")); 
			// typos are ok
			return;
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n")); 
    29f2:	81 e8       	ldi	r24, 0x81	; 129
    29f4:	93 e0       	ldi	r25, 0x03	; 3
    29f6:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    29fa:	cc cf       	rjmp	.-104    	; 0x2994 <sp_process+0x92>
			printPgmString(PSTR("error: Unsupported statement\n")); 
			// typos are ok
			return;

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n")); 
    29fc:	86 e4       	ldi	r24, 0x46	; 70
    29fe:	93 e0       	ldi	r25, 0x03	; 3
    2a00:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2a04:	b6 cf       	rjmp	.-148    	; 0x2972 <sp_process+0x70>
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
		case GCSTATUS_OK:
			printPgmString(PSTR("ok\r")); 
    2a06:	8b eb       	ldi	r24, 0xBB	; 187
    2a08:	93 e0       	ldi	r25, 0x03	; 3
    2a0a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2a0e:	c2 cf       	rjmp	.-124    	; 0x2994 <sp_process+0x92>
			break;
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n")); 
    2a10:	81 ea       	ldi	r24, 0xA1	; 161
    2a12:	93 e0       	ldi	r25, 0x03	; 3
    2a14:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2a18:	bd cf       	rjmp	.-134    	; 0x2994 <sp_process+0x92>

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n")); 
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n")); 
    2a1a:	8f e2       	ldi	r24, 0x2F	; 47
    2a1c:	93 e0       	ldi	r25, 0x03	; 3
    2a1e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2a22:	a7 cf       	rjmp	.-178    	; 0x2972 <sp_process+0x70>
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n")); 
			// typos are ok
			return;
		case GCSTATUS_UNSUPPORTED_STATEMENT:
			printPgmString(PSTR("error: Unsupported statement\n")); 
    2a24:	83 e6       	ldi	r24, 0x63	; 99
    2a26:	93 e0       	ldi	r25, 0x03	; 3
    2a28:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2a2c:	b3 cf       	rjmp	.-154    	; 0x2994 <sp_process+0x92>

00002a2e <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	76 e9       	ldi	r23, 0x96	; 150
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <beginSerial>
}
    2a3a:	08 95       	ret

00002a3c <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	ae e7       	ldi	r26, 0x7E	; 126
    2a42:	b4 e4       	ldi	r27, 0x44	; 68
    2a44:	80 93 8d 06 	sts	0x068D, r24
    2a48:	90 93 8e 06 	sts	0x068E, r25
    2a4c:	a0 93 8f 06 	sts	0x068F, r26
    2a50:	b0 93 90 06 	sts	0x0690, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2a54:	80 93 91 06 	sts	0x0691, r24
    2a58:	90 93 92 06 	sts	0x0692, r25
    2a5c:	a0 93 93 06 	sts	0x0693, r26
    2a60:	b0 93 94 06 	sts	0x0694, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2a64:	84 ef       	ldi	r24, 0xF4	; 244
    2a66:	99 ef       	ldi	r25, 0xF9	; 249
    2a68:	ac e3       	ldi	r26, 0x3C	; 60
    2a6a:	b4 e4       	ldi	r27, 0x44	; 68
    2a6c:	80 93 95 06 	sts	0x0695, r24
    2a70:	90 93 96 06 	sts	0x0696, r25
    2a74:	a0 93 97 06 	sts	0x0697, r26
    2a78:	b0 93 98 06 	sts	0x0698, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2a7c:	81 ec       	ldi	r24, 0xC1	; 193
    2a7e:	9a ec       	ldi	r25, 0xCA	; 202
    2a80:	a1 e3       	ldi	r26, 0x31	; 49
    2a82:	b2 e4       	ldi	r27, 0x42	; 66
    2a84:	80 93 99 06 	sts	0x0699, r24
    2a88:	90 93 9a 06 	sts	0x069A, r25
    2a8c:	a0 93 9b 06 	sts	0x069B, r26
    2a90:	b0 93 9c 06 	sts	0x069C, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2a94:	88 e0       	ldi	r24, 0x08	; 8
    2a96:	80 93 9e 06 	sts	0x069E, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 ef       	ldi	r26, 0xF0	; 240
    2aa0:	b3 e4       	ldi	r27, 0x43	; 67
    2aa2:	80 93 9f 06 	sts	0x069F, r24
    2aa6:	90 93 a0 06 	sts	0x06A0, r25
    2aaa:	a0 93 a1 06 	sts	0x06A1, r26
    2aae:	b0 93 a2 06 	sts	0x06A2, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2ab2:	80 93 a3 06 	sts	0x06A3, r24
    2ab6:	90 93 a4 06 	sts	0x06A4, r25
    2aba:	a0 93 a5 06 	sts	0x06A5, r26
    2abe:	b0 93 a6 06 	sts	0x06A6, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2ac2:	8a e9       	ldi	r24, 0x9A	; 154
    2ac4:	99 e9       	ldi	r25, 0x99	; 153
    2ac6:	a9 e9       	ldi	r26, 0x99	; 153
    2ac8:	b0 e4       	ldi	r27, 0x40	; 64
    2aca:	80 93 ab 06 	sts	0x06AB, r24
    2ace:	90 93 ac 06 	sts	0x06AC, r25
    2ad2:	a0 93 ad 06 	sts	0x06AD, r26
    2ad6:	b0 93 ae 06 	sts	0x06AE, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2ada:	8d ec       	ldi	r24, 0xCD	; 205
    2adc:	9c ec       	ldi	r25, 0xCC	; 204
    2ade:	ac ec       	ldi	r26, 0xCC	; 204
    2ae0:	bd e3       	ldi	r27, 0x3D	; 61
    2ae2:	80 93 a7 06 	sts	0x06A7, r24
    2ae6:	90 93 a8 06 	sts	0x06A8, r25
    2aea:	a0 93 a9 06 	sts	0x06A9, r26
    2aee:	b0 93 aa 06 	sts	0x06AA, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a8 e4       	ldi	r26, 0x48	; 72
    2af8:	b2 e4       	ldi	r27, 0x42	; 66
    2afa:	80 93 af 06 	sts	0x06AF, r24
    2afe:	90 93 b0 06 	sts	0x06B0, r25
    2b02:	a0 93 b1 06 	sts	0x06B1, r26
    2b06:	b0 93 b2 06 	sts	0x06B2, r27
}
    2b0a:	08 95       	ret

00002b0c <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 52 03 	call	0x6a4	; 0x6a4 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2b14:	87 36       	cpi	r24, 0x67	; 103
    2b16:	31 f0       	breq	.+12     	; 0x2b24 <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	a9 f0       	breq	.+42     	; 0x2b46 <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2b20:	c9 01       	movw	r24, r18
    2b22:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2b24:	8d e8       	ldi	r24, 0x8D	; 141
    2b26:	96 e0       	ldi	r25, 0x06	; 6
    2b28:	61 e0       	ldi	r22, 0x01	; 1
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	46 e2       	ldi	r20, 0x26	; 38
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	0e 94 b7 03 	call	0x76e	; 0x76e <memcpy_from_eeprom_with_checksum>
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	89 2b       	or	r24, r25
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <read_settings+0x30>
    2b3a:	21 e0       	ldi	r18, 0x01	; 1
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	28 27       	eor	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2b42:	c9 01       	movw	r24, r18
    2b44:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2b46:	8d e8       	ldi	r24, 0x8D	; 141
    2b48:	96 e0       	ldi	r25, 0x06	; 6
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	70 e0       	ldi	r23, 0x00	; 0
    2b4e:	4b e1       	ldi	r20, 0x1B	; 27
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	0e 94 b7 03 	call	0x76e	; 0x76e <memcpy_from_eeprom_with_checksum>
    2b56:	89 2b       	or	r24, r25
    2b58:	09 f3       	breq	.-62     	; 0x2b1c <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2b5a:	8a e9       	ldi	r24, 0x9A	; 154
    2b5c:	99 e9       	ldi	r25, 0x99	; 153
    2b5e:	a9 e9       	ldi	r26, 0x99	; 153
    2b60:	b0 e4       	ldi	r27, 0x40	; 64
    2b62:	80 93 ab 06 	sts	0x06AB, r24
    2b66:	90 93 ac 06 	sts	0x06AC, r25
    2b6a:	a0 93 ad 06 	sts	0x06AD, r26
    2b6e:	b0 93 ae 06 	sts	0x06AE, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a8 e4       	ldi	r26, 0x48	; 72
    2b78:	b2 e4       	ldi	r27, 0x42	; 66
    2b7a:	80 93 af 06 	sts	0x06AF, r24
    2b7e:	90 93 b0 06 	sts	0x06B0, r25
    2b82:	a0 93 b1 06 	sts	0x06B1, r26
    2b86:	b0 93 b2 06 	sts	0x06B2, r27
    2b8a:	21 e0       	ldi	r18, 0x01	; 1
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	c8 cf       	rjmp	.-112    	; 0x2b20 <read_settings+0x14>

00002b90 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	67 e6       	ldi	r22, 0x67	; 103
    2b96:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	6d e8       	ldi	r22, 0x8D	; 141
    2ba0:	76 e0       	ldi	r23, 0x06	; 6
    2ba2:	46 e2       	ldi	r20, 0x26	; 38
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <memcpy_to_eeprom_with_checksum>
}
    2baa:	08 95       	ret

00002bac <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2bac:	fc 01       	movw	r30, r24
  switch(parameter) {
    2bae:	86 30       	cpi	r24, 0x06	; 6
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	09 f4       	brne	.+2      	; 0x2bb6 <settings_store_setting+0xa>
    2bb4:	6d c0       	rjmp	.+218    	; 0x2c90 <settings_store_setting+0xe4>
    2bb6:	87 30       	cpi	r24, 0x07	; 7
    2bb8:	91 05       	cpc	r25, r1
    2bba:	a4 f0       	brlt	.+40     	; 0x2be4 <settings_store_setting+0x38>
    2bbc:	88 30       	cpi	r24, 0x08	; 8
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <settings_store_setting+0x18>
    2bc2:	48 c0       	rjmp	.+144    	; 0x2c54 <settings_store_setting+0xa8>
    2bc4:	88 30       	cpi	r24, 0x08	; 8
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	b4 f1       	brlt	.+108    	; 0x2c36 <settings_store_setting+0x8a>
    2bca:	89 30       	cpi	r24, 0x09	; 9
    2bcc:	91 05       	cpc	r25, r1
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <settings_store_setting+0x26>
    2bd0:	7b c0       	rjmp	.+246    	; 0x2cc8 <settings_store_setting+0x11c>
    2bd2:	e8 5e       	subi	r30, 0xE8	; 232
    2bd4:	f3 40       	sbci	r31, 0x03	; 3
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <settings_store_setting+0x2e>
    2bd8:	6a c0       	rjmp	.+212    	; 0x2cae <settings_store_setting+0x102>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2bda:	84 ed       	ldi	r24, 0xD4	; 212
    2bdc:	93 e0       	ldi	r25, 0x03	; 3
    2bde:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2be2:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    2be4:	84 30       	cpi	r24, 0x04	; 4
    2be6:	91 05       	cpc	r25, r1
    2be8:	09 f4       	brne	.+2      	; 0x2bec <settings_store_setting+0x40>
    2bea:	43 c0       	rjmp	.+134    	; 0x2c72 <settings_store_setting+0xc6>
    2bec:	85 30       	cpi	r24, 0x05	; 5
    2bee:	91 05       	cpc	r25, r1
    2bf0:	9c f4       	brge	.+38     	; 0x2c18 <settings_store_setting+0x6c>
    2bf2:	97 fd       	sbrc	r25, 7
    2bf4:	f2 cf       	rjmp	.-28     	; 0x2bda <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2bf6:	ee 0f       	add	r30, r30
    2bf8:	ff 1f       	adc	r31, r31
    2bfa:	ee 0f       	add	r30, r30
    2bfc:	ff 1f       	adc	r31, r31
    2bfe:	e3 57       	subi	r30, 0x73	; 115
    2c00:	f9 4f       	sbci	r31, 0xF9	; 249
    2c02:	40 83       	st	Z, r20
    2c04:	51 83       	std	Z+1, r21	; 0x01
    2c06:	62 83       	std	Z+2, r22	; 0x02
    2c08:	73 83       	std	Z+3, r23	; 0x03
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c0a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c0e:	8f eb       	ldi	r24, 0xBF	; 191
    2c10:	93 e0       	ldi	r25, 0x03	; 3
    2c12:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2c16:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    2c18:	40 93 9f 06 	sts	0x069F, r20
    2c1c:	50 93 a0 06 	sts	0x06A0, r21
    2c20:	60 93 a1 06 	sts	0x06A1, r22
    2c24:	70 93 a2 06 	sts	0x06A2, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c28:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c2c:	8f eb       	ldi	r24, 0xBF	; 191
    2c2e:	93 e0       	ldi	r25, 0x03	; 3
    2c30:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2c34:	08 95       	ret
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    2c36:	40 93 a7 06 	sts	0x06A7, r20
    2c3a:	50 93 a8 06 	sts	0x06A8, r21
    2c3e:	60 93 a9 06 	sts	0x06A9, r22
    2c42:	70 93 aa 06 	sts	0x06AA, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c46:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c4a:	8f eb       	ldi	r24, 0xBF	; 191
    2c4c:	93 e0       	ldi	r25, 0x03	; 3
    2c4e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2c52:	08 95       	ret
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    2c54:	40 93 ab 06 	sts	0x06AB, r20
    2c58:	50 93 ac 06 	sts	0x06AC, r21
    2c5c:	60 93 ad 06 	sts	0x06AD, r22
    2c60:	70 93 ae 06 	sts	0x06AE, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c64:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c68:	8f eb       	ldi	r24, 0xBF	; 191
    2c6a:	93 e0       	ldi	r25, 0x03	; 3
    2c6c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2c70:	08 95       	ret
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    2c72:	cb 01       	movw	r24, r22
    2c74:	ba 01       	movw	r22, r20
    2c76:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <round>
    2c7a:	0e 94 55 2c 	call	0x58aa	; 0x58aa <__fixunssfsi>
    2c7e:	60 93 9e 06 	sts	0x069E, r22
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c82:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c86:	8f eb       	ldi	r24, 0xBF	; 191
    2c88:	93 e0       	ldi	r25, 0x03	; 3
    2c8a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2c8e:	08 95       	ret
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    2c90:	40 93 a3 06 	sts	0x06A3, r20
    2c94:	50 93 a4 06 	sts	0x06A4, r21
    2c98:	60 93 a5 06 	sts	0x06A5, r22
    2c9c:	70 93 a6 06 	sts	0x06A6, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2ca0:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2ca4:	8f eb       	ldi	r24, 0xBF	; 191
    2ca6:	93 e0       	ldi	r25, 0x03	; 3
    2ca8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2cac:	08 95       	ret
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    2cae:	cb 01       	movw	r24, r22
    2cb0:	ba 01       	movw	r22, r20
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
    2cbe:	88 23       	and	r24, r24
    2cc0:	a9 f0       	breq	.+42     	; 0x2cec <settings_store_setting+0x140>
    2cc2:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <st_enable>
    2cc6:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    2cc8:	db 01       	movw	r26, r22
    2cca:	ca 01       	movw	r24, r20
    2ccc:	bf 77       	andi	r27, 0x7F	; 127
    2cce:	80 93 af 06 	sts	0x06AF, r24
    2cd2:	90 93 b0 06 	sts	0x06B0, r25
    2cd6:	a0 93 b1 06 	sts	0x06B1, r26
    2cda:	b0 93 b2 06 	sts	0x06B2, r27
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2cde:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2ce2:	8f eb       	ldi	r24, 0xBF	; 191
    2ce4:	93 e0       	ldi	r25, 0x03	; 3
    2ce6:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    2cea:	08 95       	ret
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    2cec:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <st_disable>
    2cf0:	08 95       	ret

00002cf2 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2cf2:	88 ea       	ldi	r24, 0xA8	; 168
    2cf4:	95 e0       	ldi	r25, 0x05	; 5
    2cf6:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2cfa:	81 ea       	ldi	r24, 0xA1	; 161
    2cfc:	95 e0       	ldi	r25, 0x05	; 5
    2cfe:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printPgmString(PSTR("\r\n"));
    2d02:	8e e9       	ldi	r24, 0x9E	; 158
    2d04:	95 e0       	ldi	r25, 0x05	; 5
    2d06:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2d0a:	88 e9       	ldi	r24, 0x98	; 152
    2d0c:	95 e0       	ldi	r25, 0x05	; 5
    2d0e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2d12:	60 91 8d 06 	lds	r22, 0x068D
    2d16:	70 91 8e 06 	lds	r23, 0x068E
    2d1a:	80 91 8f 06 	lds	r24, 0x068F
    2d1e:	90 91 90 06 	lds	r25, 0x0690
    2d22:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2d26:	88 e8       	ldi	r24, 0x88	; 136
    2d28:	95 e0       	ldi	r25, 0x05	; 5
    2d2a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2d2e:	82 e8       	ldi	r24, 0x82	; 130
    2d30:	95 e0       	ldi	r25, 0x05	; 5
    2d32:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2d36:	60 91 91 06 	lds	r22, 0x0691
    2d3a:	70 91 92 06 	lds	r23, 0x0692
    2d3e:	80 91 93 06 	lds	r24, 0x0693
    2d42:	90 91 94 06 	lds	r25, 0x0694
    2d46:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2d4a:	82 e7       	ldi	r24, 0x72	; 114
    2d4c:	95 e0       	ldi	r25, 0x05	; 5
    2d4e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2d52:	8c e6       	ldi	r24, 0x6C	; 108
    2d54:	95 e0       	ldi	r25, 0x05	; 5
    2d56:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2d5a:	60 91 95 06 	lds	r22, 0x0695
    2d5e:	70 91 96 06 	lds	r23, 0x0696
    2d62:	80 91 97 06 	lds	r24, 0x0697
    2d66:	90 91 98 06 	lds	r25, 0x0698
    2d6a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2d6e:	8c e5       	ldi	r24, 0x5C	; 92
    2d70:	95 e0       	ldi	r25, 0x05	; 5
    2d72:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2d76:	86 e5       	ldi	r24, 0x56	; 86
    2d78:	95 e0       	ldi	r25, 0x05	; 5
    2d7a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2d7e:	60 91 99 06 	lds	r22, 0x0699
    2d82:	70 91 9a 06 	lds	r23, 0x069A
    2d86:	80 91 9b 06 	lds	r24, 0x069B
    2d8a:	90 91 9c 06 	lds	r25, 0x069C
    2d8e:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2d92:	84 e4       	ldi	r24, 0x44	; 68
    2d94:	95 e0       	ldi	r25, 0x05	; 5
    2d96:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2d9a:	8e e3       	ldi	r24, 0x3E	; 62
    2d9c:	95 e0       	ldi	r25, 0x05	; 5
    2d9e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printInteger(settings.pulse_microseconds);
    2da2:	60 91 9e 06 	lds	r22, 0x069E
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2db0:	81 e2       	ldi	r24, 0x21	; 33
    2db2:	95 e0       	ldi	r25, 0x05	; 5
    2db4:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2db8:	8b e1       	ldi	r24, 0x1B	; 27
    2dba:	95 e0       	ldi	r25, 0x05	; 5
    2dbc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.default_feed_rate);
    2dc0:	60 91 9f 06 	lds	r22, 0x069F
    2dc4:	70 91 a0 06 	lds	r23, 0x06A0
    2dc8:	80 91 a1 06 	lds	r24, 0x06A1
    2dcc:	90 91 a2 06 	lds	r25, 0x06A2
    2dd0:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2dd4:	8d ef       	ldi	r24, 0xFD	; 253
    2dd6:	94 e0       	ldi	r25, 0x04	; 4
    2dd8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2ddc:	87 ef       	ldi	r24, 0xF7	; 247
    2dde:	94 e0       	ldi	r25, 0x04	; 4
    2de0:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.default_seek_rate);
    2de4:	60 91 a3 06 	lds	r22, 0x06A3
    2de8:	70 91 a4 06 	lds	r23, 0x06A4
    2dec:	80 91 a5 06 	lds	r24, 0x06A5
    2df0:	90 91 a6 06 	lds	r25, 0x06A6
    2df4:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2df8:	89 ed       	ldi	r24, 0xD9	; 217
    2dfa:	94 e0       	ldi	r25, 0x04	; 4
    2dfc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2e00:	83 ed       	ldi	r24, 0xD3	; 211
    2e02:	94 e0       	ldi	r25, 0x04	; 4
    2e04:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2e08:	60 91 a7 06 	lds	r22, 0x06A7
    2e0c:	70 91 a8 06 	lds	r23, 0x06A8
    2e10:	80 91 a9 06 	lds	r24, 0x06A9
    2e14:	90 91 aa 06 	lds	r25, 0x06AA
    2e18:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2e1c:	8f eb       	ldi	r24, 0xBF	; 191
    2e1e:	94 e0       	ldi	r25, 0x04	; 4
    2e20:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2e24:	89 eb       	ldi	r24, 0xB9	; 185
    2e26:	94 e0       	ldi	r25, 0x04	; 4
    2e28:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.acceleration);
    2e2c:	60 91 ab 06 	lds	r22, 0x06AB
    2e30:	70 91 ac 06 	lds	r23, 0x06AC
    2e34:	80 91 ad 06 	lds	r24, 0x06AD
    2e38:	90 91 ae 06 	lds	r25, 0x06AE
    2e3c:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2e40:	8b e9       	ldi	r24, 0x9B	; 155
    2e42:	94 e0       	ldi	r25, 0x04	; 4
    2e44:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2e48:	85 e9       	ldi	r24, 0x95	; 149
    2e4a:	94 e0       	ldi	r25, 0x04	; 4
    2e4c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printFloat(settings.max_jerk);
    2e50:	60 91 af 06 	lds	r22, 0x06AF
    2e54:	70 91 b0 06 	lds	r23, 0x06B0
    2e58:	80 91 b1 06 	lds	r24, 0x06B1
    2e5c:	90 91 b2 06 	lds	r25, 0x06B2
    2e60:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2e64:	8d e5       	ldi	r24, 0x5D	; 93
    2e66:	94 e0       	ldi	r25, 0x04	; 4
    2e68:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2e6c:	84 e5       	ldi	r24, 0x54	; 84
    2e6e:	94 e0       	ldi	r25, 0x04	; 4
    2e70:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
  printInteger(st_is_enabled());
    2e74:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <st_is_enabled>
    2e78:	aa 27       	eor	r26, r26
    2e7a:	97 fd       	sbrc	r25, 7
    2e7c:	a0 95       	com	r26
    2e7e:	ba 2f       	mov	r27, r26
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2e88:	8b e2       	ldi	r24, 0x2B	; 43
    2e8a:	94 e0       	ldi	r25, 0x04	; 4
    2e8c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2e90:	88 ee       	ldi	r24, 0xE8	; 232
    2e92:	93 e0       	ldi	r25, 0x03	; 3
    2e94:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
}
    2e98:	08 95       	ret

00002e9a <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2e9a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <read_settings>
    2e9e:	89 2b       	or	r24, r25
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <settings_init+0xa>
    2ea2:	08 95       	ret
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2ea4:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <settings_reset>
    write_settings();
    2ea8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <write_settings>
    settings_dump();
    2eac:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <settings_dump>
    2eb0:	08 95       	ret

00002eb2 <spindle_init>:
#include <avr/io.h>
#include <avr/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2eb2:	e1 e0       	ldi	r30, 0x01	; 1
    2eb4:	f1 e0       	ldi	r31, 0x01	; 1
    2eb6:	80 81       	ld	r24, Z
    2eb8:	80 64       	ori	r24, 0x40	; 64
    2eba:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2ebc:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2ebe:	3e 9a       	sbi	0x07, 6	; 7

}
    2ec0:	08 95       	ret

00002ec2 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2ec2:	97 fd       	sbrc	r25, 7
    2ec4:	07 c0       	rjmp	.+14     	; 0x2ed4 <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2ec6:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2ec8:	80 91 02 01 	lds	r24, 0x0102
    2ecc:	80 64       	ori	r24, 0x40	; 64
    2ece:	80 93 02 01 	sts	0x0102, r24
}
    2ed2:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2ed4:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2ed6:	80 91 02 01 	lds	r24, 0x0102
    2eda:	80 64       	ori	r24, 0x40	; 64
    2edc:	80 93 02 01 	sts	0x0102, r24
}
    2ee0:	08 95       	ret

00002ee2 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2ee2:	e2 e0       	ldi	r30, 0x02	; 2
    2ee4:	f1 e0       	ldi	r31, 0x01	; 1
    2ee6:	80 81       	ld	r24, Z
    2ee8:	8f 7b       	andi	r24, 0xBF	; 191
    2eea:	80 83       	st	Z, r24
}
    2eec:	08 95       	ret

00002eee <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eee:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ef0:	40 e7       	ldi	r20, 0x70	; 112
    2ef2:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2ef4:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ef6:	23 2f       	mov	r18, r19
    2ef8:	2a 95       	dec	r18
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2efc:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2efe:	fa 01       	movw	r30, r20
    2f00:	31 97       	sbiw	r30, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	2f ef       	ldi	r18, 0xFF	; 255
    2f08:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0a:	92 07       	cpc	r25, r18
    2f0c:	99 f7       	brne	.-26     	; 0x2ef4 <rotate_head+0x6>

}
    2f0e:	08 95       	ret

00002f10 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2f10:	ef e6       	ldi	r30, 0x6F	; 111
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	82 60       	ori	r24, 0x02	; 2
    2f18:	80 83       	st	Z, r24
}
    2f1a:	08 95       	ret

00002f1c <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	90 93 6e 05 	sts	0x056E, r25
    2f22:	80 93 6d 05 	sts	0x056D, r24
}
    2f26:	08 95       	ret

00002f28 <get_busy>:

int get_busy( void ) 
{
	return busy;
    2f28:	20 91 6d 05 	lds	r18, 0x056D
    2f2c:	30 91 6e 05 	lds	r19, 0x056E
}
    2f30:	c9 01       	movw	r24, r18
    2f32:	08 95       	ret

00002f34 <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2f34:	1f 92       	push	r1
    2f36:	0f 92       	push	r0
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	0f 92       	push	r0
    2f3c:	11 24       	eor	r1, r1
    2f3e:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2f40:	81 b3       	in	r24, 0x11	; 17
    2f42:	85 63       	ori	r24, 0x35	; 53
    2f44:	81 bb       	out	0x11, r24	; 17
}
    2f46:	8f 91       	pop	r24
    2f48:	0f 90       	pop	r0
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	0f 90       	pop	r0
    2f4e:	1f 90       	pop	r1
    2f50:	18 95       	reti

00002f52 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f52:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2f54:	08 95       	ret

00002f56 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f56:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2f58:	08 95       	ret

00002f5a <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2f5a:	3c 99       	sbic	0x07, 4	; 7
    2f5c:	04 c0       	rjmp	.+8      	; 0x2f66 <st_is_enabled+0xc>
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2f62:	c9 01       	movw	r24, r18
    2f64:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2f66:	88 b1       	in	r24, 0x08	; 8
    2f68:	82 95       	swap	r24
    2f6a:	8f 70       	andi	r24, 0x0F	; 15
    2f6c:	80 95       	com	r24
    2f6e:	81 70       	andi	r24, 0x01	; 1
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2f74:	c9 01       	movw	r24, r18
    2f76:	08 95       	ret

00002f78 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2f78:	60 30       	cpi	r22, 0x00	; 0
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	72 07       	cpc	r23, r18
    2f7e:	21 e0       	ldi	r18, 0x01	; 1
    2f80:	82 07       	cpc	r24, r18
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	92 07       	cpc	r25, r18
    2f86:	08 f4       	brcc	.+2      	; 0x2f8a <config_step_timer+0x12>
    2f88:	5c c0       	rjmp	.+184    	; 0x3042 <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    2f8a:	60 30       	cpi	r22, 0x00	; 0
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	72 07       	cpc	r23, r18
    2f90:	28 e0       	ldi	r18, 0x08	; 8
    2f92:	82 07       	cpc	r24, r18
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	92 07       	cpc	r25, r18
    2f98:	78 f1       	brcs	.+94     	; 0x2ff8 <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    2f9a:	60 30       	cpi	r22, 0x00	; 0
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	72 07       	cpc	r23, r18
    2fa0:	20 e4       	ldi	r18, 0x40	; 64
    2fa2:	82 07       	cpc	r24, r18
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	92 07       	cpc	r25, r18
    2fa8:	08 f4       	brcc	.+2      	; 0x2fac <config_step_timer+0x34>
    2faa:	51 c0       	rjmp	.+162    	; 0x304e <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    2fac:	60 30       	cpi	r22, 0x00	; 0
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	72 07       	cpc	r23, r18
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	82 07       	cpc	r24, r18
    2fb6:	21 e0       	ldi	r18, 0x01	; 1
    2fb8:	92 07       	cpc	r25, r18
    2fba:	08 f4       	brcc	.+2      	; 0x2fbe <config_step_timer+0x46>
    2fbc:	6d c0       	rjmp	.+218    	; 0x3098 <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    2fbe:	60 30       	cpi	r22, 0x00	; 0
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	72 07       	cpc	r23, r18
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	82 07       	cpc	r24, r18
    2fc8:	24 e0       	ldi	r18, 0x04	; 4
    2fca:	92 07       	cpc	r25, r18
    2fcc:	08 f0       	brcs	.+2      	; 0x2fd0 <config_step_timer+0x58>
    2fce:	71 c0       	rjmp	.+226    	; 0x30b2 <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    2fd0:	2a e0       	ldi	r18, 0x0A	; 10
    2fd2:	96 95       	lsr	r25
    2fd4:	87 95       	ror	r24
    2fd6:	77 95       	ror	r23
    2fd8:	67 95       	ror	r22
    2fda:	2a 95       	dec	r18
    2fdc:	d1 f7       	brne	.-12     	; 0x2fd2 <config_step_timer+0x5a>
    2fde:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    2fe0:	9b 01       	movw	r18, r22
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	8a e0       	ldi	r24, 0x0A	; 10
    2fe8:	22 0f       	add	r18, r18
    2fea:	33 1f       	adc	r19, r19
    2fec:	44 1f       	adc	r20, r20
    2fee:	55 1f       	adc	r21, r21
    2ff0:	8a 95       	dec	r24
    2ff2:	d1 f7       	brne	.-12     	; 0x2fe8 <config_step_timer+0x70>
    2ff4:	95 e0       	ldi	r25, 0x05	; 5
    2ff6:	18 c0       	rjmp	.+48     	; 0x3028 <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    2ff8:	23 e0       	ldi	r18, 0x03	; 3
    2ffa:	96 95       	lsr	r25
    2ffc:	87 95       	ror	r24
    2ffe:	77 95       	ror	r23
    3000:	67 95       	ror	r22
    3002:	2a 95       	dec	r18
    3004:	d1 f7       	brne	.-12     	; 0x2ffa <config_step_timer+0x82>
    3006:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    3008:	9b 01       	movw	r18, r22
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	50 e0       	ldi	r21, 0x00	; 0
    300e:	22 0f       	add	r18, r18
    3010:	33 1f       	adc	r19, r19
    3012:	44 1f       	adc	r20, r20
    3014:	55 1f       	adc	r21, r21
    3016:	22 0f       	add	r18, r18
    3018:	33 1f       	adc	r19, r19
    301a:	44 1f       	adc	r20, r20
    301c:	55 1f       	adc	r21, r21
    301e:	22 0f       	add	r18, r18
    3020:	33 1f       	adc	r19, r19
    3022:	44 1f       	adc	r20, r20
    3024:	55 1f       	adc	r21, r21
    3026:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3028:	80 91 81 00 	lds	r24, 0x0081
    302c:	88 7f       	andi	r24, 0xF8	; 248
    302e:	98 2b       	or	r25, r24
    3030:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    3034:	f0 93 89 00 	sts	0x0089, r31
    3038:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    303c:	b9 01       	movw	r22, r18
    303e:	ca 01       	movw	r24, r20
    3040:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    3042:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    3044:	9b 01       	movw	r18, r22
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	ed cf       	rjmp	.-38     	; 0x3028 <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    304e:	b6 e0       	ldi	r27, 0x06	; 6
    3050:	96 95       	lsr	r25
    3052:	87 95       	ror	r24
    3054:	77 95       	ror	r23
    3056:	67 95       	ror	r22
    3058:	ba 95       	dec	r27
    305a:	d1 f7       	brne	.-12     	; 0x3050 <config_step_timer+0xd8>
    305c:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    305e:	9b 01       	movw	r18, r22
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	22 0f       	add	r18, r18
    3066:	33 1f       	adc	r19, r19
    3068:	44 1f       	adc	r20, r20
    306a:	55 1f       	adc	r21, r21
    306c:	22 0f       	add	r18, r18
    306e:	33 1f       	adc	r19, r19
    3070:	44 1f       	adc	r20, r20
    3072:	55 1f       	adc	r21, r21
    3074:	22 0f       	add	r18, r18
    3076:	33 1f       	adc	r19, r19
    3078:	44 1f       	adc	r20, r20
    307a:	55 1f       	adc	r21, r21
    307c:	22 0f       	add	r18, r18
    307e:	33 1f       	adc	r19, r19
    3080:	44 1f       	adc	r20, r20
    3082:	55 1f       	adc	r21, r21
    3084:	22 0f       	add	r18, r18
    3086:	33 1f       	adc	r19, r19
    3088:	44 1f       	adc	r20, r20
    308a:	55 1f       	adc	r21, r21
    308c:	22 0f       	add	r18, r18
    308e:	33 1f       	adc	r19, r19
    3090:	44 1f       	adc	r20, r20
    3092:	55 1f       	adc	r21, r21
    3094:	93 e0       	ldi	r25, 0x03	; 3
    3096:	c8 cf       	rjmp	.-112    	; 0x3028 <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    3098:	bb 27       	eor	r27, r27
    309a:	a9 2f       	mov	r26, r25
    309c:	98 2f       	mov	r25, r24
    309e:	87 2f       	mov	r24, r23
    30a0:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    30a2:	a0 e0       	ldi	r26, 0x00	; 0
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	22 27       	eor	r18, r18
    30a8:	38 2f       	mov	r19, r24
    30aa:	49 2f       	mov	r20, r25
    30ac:	5a 2f       	mov	r21, r26
    30ae:	94 e0       	ldi	r25, 0x04	; 4
    30b0:	bb cf       	rjmp	.-138    	; 0x3028 <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    30b2:	ef ef       	ldi	r30, 0xFF	; 255
    30b4:	ff ef       	ldi	r31, 0xFF	; 255
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	3c ef       	ldi	r19, 0xFC	; 252
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	95 e0       	ldi	r25, 0x05	; 5
    30c0:	b3 cf       	rjmp	.-154    	; 0x3028 <config_step_timer+0xb0>

000030c2 <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    30c2:	9b 01       	movw	r18, r22
    30c4:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    30c6:	20 3b       	cpi	r18, 0xB0	; 176
    30c8:	84 e0       	ldi	r24, 0x04	; 4
    30ca:	38 07       	cpc	r19, r24
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	48 07       	cpc	r20, r24
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	58 07       	cpc	r21, r24
    30d4:	78 f4       	brcc	.+30     	; 0x30f4 <set_step_events_per_minute+0x32>
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	75 e3       	ldi	r23, 0x35	; 53
    30da:	8c e0       	ldi	r24, 0x0C	; 12
    30dc:	90 e0       	ldi	r25, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    30de:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <config_step_timer>
    30e2:	60 93 6f 05 	sts	0x056F, r22
    30e6:	70 93 70 05 	sts	0x0570, r23
    30ea:	80 93 71 05 	sts	0x0571, r24
    30ee:	90 93 72 05 	sts	0x0572, r25
}
    30f2:	08 95       	ret
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	70 e7       	ldi	r23, 0x70	; 112
    30f8:	88 e3       	ldi	r24, 0x38	; 56
    30fa:	99 e3       	ldi	r25, 0x39	; 57
    30fc:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__udivmodsi4>
    3100:	c9 01       	movw	r24, r18
    3102:	da 01       	movw	r26, r20
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	ea cf       	rjmp	.-44     	; 0x30de <set_step_events_per_minute+0x1c>

0000310a <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    310a:	80 b3       	in	r24, 0x10	; 16
    310c:	85 63       	ori	r24, 0x35	; 53
    310e:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    3110:	80 b3       	in	r24, 0x10	; 16
    3112:	8a 6c       	ori	r24, 0xCA	; 202
    3114:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    3116:	81 b3       	in	r24, 0x11	; 17
    3118:	85 63       	ori	r24, 0x35	; 53
    311a:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    311c:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    311e:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    3120:	e1 e8       	ldi	r30, 0x81	; 129
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	8f 7e       	andi	r24, 0xEF	; 239
    3128:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    312a:	80 81       	ld	r24, Z
    312c:	88 60       	ori	r24, 0x08	; 8
    312e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    3130:	e0 e8       	ldi	r30, 0x80	; 128
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	8d 7f       	andi	r24, 0xFD	; 253
    3138:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    313a:	80 81       	ld	r24, Z
    313c:	8e 7f       	andi	r24, 0xFE	; 254
    313e:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    3140:	80 81       	ld	r24, Z
    3142:	8f 73       	andi	r24, 0x3F	; 63
    3144:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    3146:	80 81       	ld	r24, Z
    3148:	8f 7c       	andi	r24, 0xCF	; 207
    314a:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    314c:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    3156:	e0 e7       	ldi	r30, 0x70	; 112
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	81 60       	ori	r24, 0x01	; 1
    315e:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    3160:	60 e7       	ldi	r22, 0x70	; 112
    3162:	77 e1       	ldi	r23, 0x17	; 23
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 61 18 	call	0x30c2	; 0x30c2 <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    316c:	ef e6       	ldi	r30, 0x6F	; 111
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	8d 7f       	andi	r24, 0xFD	; 253
    3174:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    3176:	10 92 73 05 	sts	0x0573, r1
    317a:	10 92 74 05 	sts	0x0574, r1
    317e:	10 92 75 05 	sts	0x0575, r1
    3182:	10 92 76 05 	sts	0x0576, r1
  
  sei();
    3186:	78 94       	sei
}
    3188:	08 95       	ret

0000318a <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    318a:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    318c:	81 b3       	in	r24, 0x11	; 17
    318e:	85 73       	andi	r24, 0x35	; 53
    3190:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3192:	21 15       	cp	r18, r1
    3194:	31 05       	cpc	r19, r1
    3196:	e1 f0       	breq	.+56     	; 0x31d0 <moveLeft+0x46>

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    3198:	4b 99       	sbic	0x09, 3	; 9
    319a:	1c c0       	rjmp	.+56     	; 0x31d4 <moveLeft+0x4a>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    319c:	21 50       	subi	r18, 0x01	; 1
    319e:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31a0:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31a2:	40 e6       	ldi	r20, 0x60	; 96
    31a4:	54 e0       	ldi	r21, 0x04	; 4
    31a6:	04 c0       	rjmp	.+8      	; 0x31b0 <moveLeft+0x26>

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    31a8:	21 50       	subi	r18, 0x01	; 1
    31aa:	30 40       	sbci	r19, 0x00	; 0
    31ac:	4b 99       	sbic	0x09, 3	; 9
    31ae:	12 c0       	rjmp	.+36     	; 0x31d4 <moveLeft+0x4a>
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    31b0:	81 b3       	in	r24, 0x11	; 17
    31b2:	8a 7c       	andi	r24, 0xCA	; 202
    31b4:	81 60       	ori	r24, 0x01	; 1
    31b6:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31b8:	89 2f       	mov	r24, r25
    31ba:	8a 95       	dec	r24
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <moveLeft+0x30>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    31be:	81 b3       	in	r24, 0x11	; 17
    31c0:	8a 7c       	andi	r24, 0xCA	; 202
    31c2:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31c4:	fa 01       	movw	r30, r20
    31c6:	31 97       	sbiw	r30, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <moveLeft+0x3c>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31ca:	21 15       	cp	r18, r1
    31cc:	31 05       	cpc	r19, r1
    31ce:	61 f7       	brne	.-40     	; 0x31a8 <moveLeft+0x1e>
    31d0:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    31d2:	08 95       	ret
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	08 95       	ret

000031d8 <moveRight>:

	return TRUE;
}

unsigned char moveRight( unsigned int distance ) 
{
    31d8:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    31da:	81 b3       	in	r24, 0x11	; 17
    31dc:	85 73       	andi	r24, 0x35	; 53
    31de:	82 60       	ori	r24, 0x02	; 2
    31e0:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    31e2:	21 15       	cp	r18, r1
    31e4:	31 05       	cpc	r19, r1
    31e6:	e1 f0       	breq	.+56     	; 0x3220 <moveRight+0x48>

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    31e8:	4a 99       	sbic	0x09, 2	; 9
    31ea:	1c c0       	rjmp	.+56     	; 0x3224 <moveRight+0x4c>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31ec:	21 50       	subi	r18, 0x01	; 1
    31ee:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31f0:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31f2:	40 e6       	ldi	r20, 0x60	; 96
    31f4:	54 e0       	ldi	r21, 0x04	; 4
    31f6:	04 c0       	rjmp	.+8      	; 0x3200 <moveRight+0x28>

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    31f8:	21 50       	subi	r18, 0x01	; 1
    31fa:	30 40       	sbci	r19, 0x00	; 0
    31fc:	4a 99       	sbic	0x09, 2	; 9
    31fe:	12 c0       	rjmp	.+36     	; 0x3224 <moveRight+0x4c>
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3200:	81 b3       	in	r24, 0x11	; 17
    3202:	8a 7c       	andi	r24, 0xCA	; 202
    3204:	81 60       	ori	r24, 0x01	; 1
    3206:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3208:	89 2f       	mov	r24, r25
    320a:	8a 95       	dec	r24
    320c:	f1 f7       	brne	.-4      	; 0x320a <moveRight+0x32>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    320e:	81 b3       	in	r24, 0x11	; 17
    3210:	8a 7c       	andi	r24, 0xCA	; 202
    3212:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3214:	fa 01       	movw	r30, r20
    3216:	31 97       	sbiw	r30, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <moveRight+0x3e>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    321a:	21 15       	cp	r18, r1
    321c:	31 05       	cpc	r19, r1
    321e:	61 f7       	brne	.-40     	; 0x31f8 <moveRight+0x20>
    3220:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3222:	08 95       	ret
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	08 95       	ret

00003228 <moveForward>:
  }
	return TRUE;
}

unsigned char moveForward( unsigned int distance ) 
{
    3228:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    322a:	81 b3       	in	r24, 0x11	; 17
    322c:	85 73       	andi	r24, 0x35	; 53
    322e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3230:	21 15       	cp	r18, r1
    3232:	31 05       	cpc	r19, r1
    3234:	e1 f0       	breq	.+56     	; 0x326e <moveForward+0x46>

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    3236:	48 99       	sbic	0x09, 0	; 9
    3238:	1c c0       	rjmp	.+56     	; 0x3272 <moveForward+0x4a>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    323a:	21 50       	subi	r18, 0x01	; 1
    323c:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    323e:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3240:	40 e6       	ldi	r20, 0x60	; 96
    3242:	54 e0       	ldi	r21, 0x04	; 4
    3244:	04 c0       	rjmp	.+8      	; 0x324e <moveForward+0x26>

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    3246:	21 50       	subi	r18, 0x01	; 1
    3248:	30 40       	sbci	r19, 0x00	; 0
    324a:	48 99       	sbic	0x09, 0	; 9
    324c:	12 c0       	rjmp	.+36     	; 0x3272 <moveForward+0x4a>
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    324e:	81 b3       	in	r24, 0x11	; 17
    3250:	8a 7c       	andi	r24, 0xCA	; 202
    3252:	84 60       	ori	r24, 0x04	; 4
    3254:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3256:	89 2f       	mov	r24, r25
    3258:	8a 95       	dec	r24
    325a:	f1 f7       	brne	.-4      	; 0x3258 <moveForward+0x30>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    325c:	81 b3       	in	r24, 0x11	; 17
    325e:	8a 7c       	andi	r24, 0xCA	; 202
    3260:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3262:	fa 01       	movw	r30, r20
    3264:	31 97       	sbiw	r30, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <moveForward+0x3c>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3268:	21 15       	cp	r18, r1
    326a:	31 05       	cpc	r19, r1
    326c:	61 f7       	brne	.-40     	; 0x3246 <moveForward+0x1e>
    326e:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3270:	08 95       	ret


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	08 95       	ret

00003276 <moveBack>:
  }
	return TRUE;
}

unsigned char moveBack( unsigned int distance ) 
{
    3276:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    3278:	81 b3       	in	r24, 0x11	; 17
    327a:	85 73       	andi	r24, 0x35	; 53
    327c:	88 60       	ori	r24, 0x08	; 8
    327e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3280:	21 15       	cp	r18, r1
    3282:	31 05       	cpc	r19, r1
    3284:	e1 f0       	breq	.+56     	; 0x32be <moveBack+0x48>

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    3286:	49 99       	sbic	0x09, 1	; 9
    3288:	1c c0       	rjmp	.+56     	; 0x32c2 <moveBack+0x4c>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    328a:	21 50       	subi	r18, 0x01	; 1
    328c:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    328e:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3290:	40 e6       	ldi	r20, 0x60	; 96
    3292:	54 e0       	ldi	r21, 0x04	; 4
    3294:	04 c0       	rjmp	.+8      	; 0x329e <moveBack+0x28>

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    3296:	21 50       	subi	r18, 0x01	; 1
    3298:	30 40       	sbci	r19, 0x00	; 0
    329a:	49 99       	sbic	0x09, 1	; 9
    329c:	12 c0       	rjmp	.+36     	; 0x32c2 <moveBack+0x4c>
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    329e:	81 b3       	in	r24, 0x11	; 17
    32a0:	8a 7c       	andi	r24, 0xCA	; 202
    32a2:	84 60       	ori	r24, 0x04	; 4
    32a4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32a6:	89 2f       	mov	r24, r25
    32a8:	8a 95       	dec	r24
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <moveBack+0x32>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    32ac:	81 b3       	in	r24, 0x11	; 17
    32ae:	8a 7c       	andi	r24, 0xCA	; 202
    32b0:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32b2:	fa 01       	movw	r30, r20
    32b4:	31 97       	sbiw	r30, 0x01	; 1
    32b6:	f1 f7       	brne	.-4      	; 0x32b4 <moveBack+0x3e>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32b8:	21 15       	cp	r18, r1
    32ba:	31 05       	cpc	r19, r1
    32bc:	61 f7       	brne	.-40     	; 0x3296 <moveBack+0x20>
    32be:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    32c0:	08 95       	ret
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	08 95       	ret

000032c6 <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    32c6:	80 91 6f 00 	lds	r24, 0x006F
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	96 95       	lsr	r25
    32ce:	87 95       	ror	r24
}
    32d0:	81 70       	andi	r24, 0x01	; 1
    32d2:	08 95       	ret

000032d4 <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    32d4:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    32d6:	82 e0       	ldi	r24, 0x02	; 2
    32d8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    32da:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    32dc:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    32de:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    32e0:	9f e8       	ldi	r25, 0x8F	; 143
    32e2:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    32e4:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    32e6:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    32ea:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    32ee:	3f ec       	ldi	r19, 0xCF	; 207
    32f0:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    32f4:	20 ef       	ldi	r18, 0xF0	; 240
    32f6:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    32fa:	8c e9       	ldi	r24, 0x9C	; 156
    32fc:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    32fe:	82 e2       	ldi	r24, 0x22	; 34
    3300:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    3302:	83 e1       	ldi	r24, 0x13	; 19
    3304:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    3306:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    3308:	80 e3       	ldi	r24, 0x30	; 48
    330a:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    330c:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    330e:	83 e2       	ldi	r24, 0x23	; 35
    3310:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    3318:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    331c:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    3320:	20 93 0b 01 	sts	0x010B, r18
}
    3324:	08 95       	ret

00003326 <get_limit_bits>:
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    3326:	4b 9b       	sbis	0x09, 3	; 9
    3328:	0c c0       	rjmp	.+24     	; 0x3342 <get_limit_bits+0x1c>
    332a:	82 e8       	ldi	r24, 0x82	; 130
      	ret |= _BV( 1 ) ;

	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
    332c:	4a 99       	sbic	0x09, 2	; 9
      	ret |= _BV( 2 ) ;
    332e:	84 60       	ori	r24, 0x04	; 4

	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
    3330:	48 99       	sbic	0x09, 0	; 9
      	ret |= _BV( 3 ) ;
    3332:	88 60       	ori	r24, 0x08	; 8

	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
    3334:	49 99       	sbic	0x09, 1	; 9
      	ret |= _BV( 4 ) ;
    3336:	80 61       	ori	r24, 0x10	; 16

	if( bit_is_set( XHM_PIN, X_HOME ) )
    3338:	04 99       	sbic	0x00, 4	; 0
      	ret |= _BV( 5 ) ;
    333a:	80 62       	ori	r24, 0x20	; 32

	if( bit_is_set( YHM_PIN, Y_HOME ) )
    333c:	90 99       	sbic	0x12, 0	; 18
      	ret |= _BV( 6) ;
    333e:	80 64       	ori	r24, 0x40	; 64

	return ret;

}
    3340:	08 95       	ret
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    3342:	80 e8       	ldi	r24, 0x80	; 128
    3344:	f3 cf       	rjmp	.-26     	; 0x332c <get_limit_bits+0x6>

00003346 <st_go_home>:

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    3346:	10 92 55 05 	sts	0x0555, r1

// reset position machine thinks we are at.
	plan_init();
    334a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <plan_init>
	gc_init();
    334e:	0e 94 5b 05 	call	0xab6	; 0xab6 <gc_init>

	// if head down, set head up
	if( is_head_down() ) {
    3352:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    3356:	88 23       	and	r24, r24
    3358:	49 f0       	breq	.+18     	; 0x336c <st_go_home+0x26>
		head_down(0);
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
		
		//check again
		if(is_head_down() ){
    3362:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    3366:	88 23       	and	r24, r24
    3368:	09 f0       	breq	.+2      	; 0x336c <st_go_home+0x26>
    336a:	62 c0       	rjmp	.+196    	; 0x3430 <st_go_home+0xea>
			return;
		}

	}

	cli();
    336c:	f8 94       	cli

	// tool changer all down
	atc_fire(0);	
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <atc_fire>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    3376:	4b 99       	sbic	0x09, 3	; 9
    3378:	2c c0       	rjmp	.+88     	; 0x33d2 <st_go_home+0x8c>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    337a:	48 99       	sbic	0x09, 0	; 9
    337c:	42 c0       	rjmp	.+132    	; 0x3402 <st_go_home+0xbc>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    337e:	04 99       	sbic	0x00, 4	; 0
    3380:	15 c0       	rjmp	.+42     	; 0x33ac <st_go_home+0x66>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 c5 18 	call	0x318a	; 0x318a <moveLeft>
    338a:	88 23       	and	r24, r24
    338c:	c1 f7       	brne	.-16     	; 0x337e <st_go_home+0x38>
	printPgmString(PSTR("\r\n"));
#endif

error:;

	sei();
    338e:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    3390:	89 b1       	in	r24, 0x09	; 9
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	8f 70       	andi	r24, 0x0F	; 15
    3396:	90 70       	andi	r25, 0x00	; 0
    3398:	89 2b       	or	r24, r25
    339a:	39 f4       	brne	.+14     	; 0x33aa <st_go_home+0x64>
		gHomed = TRUE ;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	80 93 55 05 	sts	0x0555, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    33a2:	10 92 6e 05 	sts	0x056E, r1
    33a6:	10 92 6d 05 	sts	0x056D, r1
    33aa:	08 95       	ret
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    33ac:	20 ed       	ldi	r18, 0xD0	; 208
    33ae:	37 e0       	ldi	r19, 0x07	; 7
    33b0:	40 e9       	ldi	r20, 0x90	; 144
    33b2:	51 e0       	ldi	r21, 0x01	; 1
    33b4:	ca 01       	movw	r24, r20
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <st_go_home+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ba:	21 50       	subi	r18, 0x01	; 1
    33bc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33be:	d1 f7       	brne	.-12     	; 0x33b4 <st_go_home+0x6e>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    33c0:	90 99       	sbic	0x12, 0	; 18
    33c2:	e5 cf       	rjmp	.-54     	; 0x338e <st_go_home+0x48>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 14 19 	call	0x3228	; 0x3228 <moveForward>
    33cc:	88 23       	and	r24, r24
    33ce:	c1 f7       	brne	.-16     	; 0x33c0 <st_go_home+0x7a>
    33d0:	de cf       	rjmp	.-68     	; 0x338e <st_go_home+0x48>
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
		// no longer homed
		gHomed = FALSE;
    33d2:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("xLimit1\r\n"));
    33d6:	82 ec       	ldi	r24, 0xC2	; 194
    33d8:	95 e0       	ldi	r25, 0x05	; 5
    33da:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    33de:	88 ee       	ldi	r24, 0xE8	; 232
    33e0:	93 e0       	ldi	r25, 0x03	; 3
    33e2:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <moveRight>
    33e6:	88 23       	and	r24, r24
    33e8:	41 f1       	breq	.+80     	; 0x343a <st_go_home+0xf4>
			sei();
			return;
    33ea:	20 ed       	ldi	r18, 0xD0	; 208
    33ec:	37 e0       	ldi	r19, 0x07	; 7
    33ee:	40 e9       	ldi	r20, 0x90	; 144
    33f0:	51 e0       	ldi	r21, 0x01	; 1
    33f2:	ca 01       	movw	r24, r20
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <st_go_home+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f8:	21 50       	subi	r18, 0x01	; 1
    33fa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fc:	d1 f7       	brne	.-12     	; 0x33f2 <st_go_home+0xac>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    33fe:	48 9b       	sbis	0x09, 0	; 9
    3400:	be cf       	rjmp	.-132    	; 0x337e <st_go_home+0x38>
		// no longer homed
		gHomed = FALSE;
    3402:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("yLimit1\r\n"));
    3406:	8c ec       	ldi	r24, 0xCC	; 204
    3408:	95 e0       	ldi	r25, 0x05	; 5
    340a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    340e:	88 ee       	ldi	r24, 0xE8	; 232
    3410:	93 e0       	ldi	r25, 0x03	; 3
    3412:	0e 94 3b 19 	call	0x3276	; 0x3276 <moveBack>
    3416:	88 23       	and	r24, r24
    3418:	91 f0       	breq	.+36     	; 0x343e <st_go_home+0xf8>
			sei();
			return;
    341a:	20 ed       	ldi	r18, 0xD0	; 208
    341c:	37 e0       	ldi	r19, 0x07	; 7
    341e:	40 e9       	ldi	r20, 0x90	; 144
    3420:	51 e0       	ldi	r21, 0x01	; 1
    3422:	ca 01       	movw	r24, r20
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <st_go_home+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3428:	21 50       	subi	r18, 0x01	; 1
    342a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342c:	d1 f7       	brne	.-12     	; 0x3422 <st_go_home+0xdc>
    342e:	a7 cf       	rjmp	.-178    	; 0x337e <st_go_home+0x38>
	if( is_head_down() ) {
		head_down(0);
		
		//check again
		if(is_head_down() ){
			printPgmString(PSTR("home failed\r\n"));
    3430:	84 eb       	ldi	r24, 0xB4	; 180
    3432:	95 e0       	ldi	r25, 0x05	; 5
    3434:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    3438:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
			sei();
    343a:	78 94       	sei
    343c:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
			sei();
    343e:	78 94       	sei
    3440:	08 95       	ret

00003442 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    3442:	07 c0       	rjmp	.+14     	; 0x3452 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    3444:	83 b7       	in	r24, 0x33	; 51
    3446:	81 60       	ori	r24, 0x01	; 1
    3448:	83 bf       	out	0x33, r24	; 51
    344a:	88 95       	sleep
    344c:	83 b7       	in	r24, 0x33	; 51
    344e:	8e 7f       	andi	r24, 0xFE	; 254
    3450:	83 bf       	out	0x33, r24	; 51
    3452:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <plan_get_current_block>
    3456:	89 2b       	or	r24, r25
    3458:	a9 f7       	brne	.-22     	; 0x3444 <st_synchronize+0x2>
}
    345a:	08 95       	ret

0000345c <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    345c:	1f 92       	push	r1
    345e:	0f 92       	push	r0
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	0f 92       	push	r0
    3464:	0b b6       	in	r0, 0x3b	; 59
    3466:	0f 92       	push	r0
    3468:	11 24       	eor	r1, r1
    346a:	ef 92       	push	r14
    346c:	ff 92       	push	r15
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	2f 93       	push	r18
    3474:	3f 93       	push	r19
    3476:	4f 93       	push	r20
    3478:	5f 93       	push	r21
    347a:	6f 93       	push	r22
    347c:	7f 93       	push	r23
    347e:	8f 93       	push	r24
    3480:	9f 93       	push	r25
    3482:	af 93       	push	r26
    3484:	bf 93       	push	r27
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	ef 93       	push	r30
    348c:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    348e:	80 91 55 05 	lds	r24, 0x0555
    3492:	88 23       	and	r24, r24
    3494:	09 f5       	brne	.+66     	; 0x34d8 <__vector_17+0x7c>
		// set ack
		ackHost = 'H';
    3496:	88 e4       	ldi	r24, 0x48	; 72
    3498:	80 93 54 05 	sts	0x0554, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    349c:	80 91 6f 00 	lds	r24, 0x006F
    34a0:	8d 7f       	andi	r24, 0xFD	; 253
    34a2:	80 93 6f 00 	sts	0x006F, r24
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
}
    34a6:	ff 91       	pop	r31
    34a8:	ef 91       	pop	r30
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	bf 91       	pop	r27
    34b0:	af 91       	pop	r26
    34b2:	9f 91       	pop	r25
    34b4:	8f 91       	pop	r24
    34b6:	7f 91       	pop	r23
    34b8:	6f 91       	pop	r22
    34ba:	5f 91       	pop	r21
    34bc:	4f 91       	pop	r20
    34be:	3f 91       	pop	r19
    34c0:	2f 91       	pop	r18
    34c2:	1f 91       	pop	r17
    34c4:	0f 91       	pop	r16
    34c6:	ff 90       	pop	r15
    34c8:	ef 90       	pop	r14
    34ca:	0f 90       	pop	r0
    34cc:	0b be       	out	0x3b, r0	; 59
    34ce:	0f 90       	pop	r0
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	0f 90       	pop	r0
    34d4:	1f 90       	pop	r1
    34d6:	18 95       	reti
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

// don't move if the head is down, this one is ok to let it keep running  
  if( is_head_down() ) {
    34d8:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    34dc:	88 23       	and	r24, r24
    34de:	19 f7       	brne	.-58     	; 0x34a6 <__vector_17+0x4a>
  	return;
 }

  if(busy){ 
    34e0:	80 91 6d 05 	lds	r24, 0x056D
    34e4:	90 91 6e 05 	lds	r25, 0x056E
    34e8:	89 2b       	or	r24, r25
    34ea:	e9 f6       	brne	.-70     	; 0x34a6 <__vector_17+0x4a>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    34ec:	89 b1       	in	r24, 0x09	; 9
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	8f 70       	andi	r24, 0x0F	; 15
    34f2:	90 70       	andi	r25, 0x00	; 0
    34f4:	89 2b       	or	r24, r25
    34f6:	09 f0       	breq	.+2      	; 0x34fa <__vector_17+0x9e>
    34f8:	91 c1       	rjmp	.+802    	; 0x381c <__vector_17+0x3c0>
	DISABLE_STEPPER_DRIVER_INTERRUPT();
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    34fa:	91 b3       	in	r25, 0x11	; 17
    34fc:	80 91 b3 06 	lds	r24, 0x06B3
    3500:	8a 7c       	andi	r24, 0xCA	; 202
    3502:	95 73       	andi	r25, 0x35	; 53
    3504:	89 2b       	or	r24, r25
    3506:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    3508:	81 b3       	in	r24, 0x11	; 17
    350a:	8a 7c       	andi	r24, 0xCA	; 202
    350c:	90 91 58 05 	lds	r25, 0x0558
    3510:	89 2b       	or	r24, r25
    3512:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    3514:	80 91 9e 06 	lds	r24, 0x069E
    3518:	88 0f       	add	r24, r24
    351a:	84 50       	subi	r24, 0x04	; 4
    351c:	81 95       	neg	r24
    351e:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    3522:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	90 93 6e 05 	sts	0x056E, r25
    352c:	80 93 6d 05 	sts	0x056D, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    3530:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    3532:	e0 91 56 05 	lds	r30, 0x0556
    3536:	f0 91 57 05 	lds	r31, 0x0557
    353a:	30 97       	sbiw	r30, 0x00	; 0
    353c:	09 f4       	brne	.+2      	; 0x3540 <__vector_17+0xe4>
    353e:	d6 c1       	rjmp	.+940    	; 0x38ec <__vector_17+0x490>

    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    3540:	80 89       	ldd	r24, Z+16	; 0x10
    3542:	80 93 b3 06 	sts	0x06B3, r24
    out_bits = 0;
    3546:	10 92 58 05 	sts	0x0558, r1
    counter_x += current_block->steps_x;
    354a:	20 91 59 05 	lds	r18, 0x0559
    354e:	30 91 5a 05 	lds	r19, 0x055A
    3552:	40 91 5b 05 	lds	r20, 0x055B
    3556:	50 91 5c 05 	lds	r21, 0x055C
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
    355e:	a2 81       	ldd	r26, Z+2	; 0x02
    3560:	b3 81       	ldd	r27, Z+3	; 0x03
    3562:	28 0f       	add	r18, r24
    3564:	39 1f       	adc	r19, r25
    3566:	4a 1f       	adc	r20, r26
    3568:	5b 1f       	adc	r21, r27
    356a:	20 93 59 05 	sts	0x0559, r18
    356e:	30 93 5a 05 	sts	0x055A, r19
    3572:	40 93 5b 05 	sts	0x055B, r20
    3576:	50 93 5c 05 	sts	0x055C, r21
    if (counter_x > 0) {
    357a:	12 16       	cp	r1, r18
    357c:	13 06       	cpc	r1, r19
    357e:	14 06       	cpc	r1, r20
    3580:	15 06       	cpc	r1, r21
    3582:	0c f0       	brlt	.+2      	; 0x3586 <__vector_17+0x12a>
    3584:	46 c1       	rjmp	.+652    	; 0x3812 <__vector_17+0x3b6>
      out_bits |= (1<<X_STEP_BIT);
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	80 93 58 05 	sts	0x0558, r24
      counter_x -= current_block->step_event_count;
    358c:	e1 88       	ldd	r14, Z+17	; 0x11
    358e:	f2 88       	ldd	r15, Z+18	; 0x12
    3590:	03 89       	ldd	r16, Z+19	; 0x13
    3592:	14 89       	ldd	r17, Z+20	; 0x14
    3594:	2e 19       	sub	r18, r14
    3596:	3f 09       	sbc	r19, r15
    3598:	40 0b       	sbc	r20, r16
    359a:	51 0b       	sbc	r21, r17
    359c:	20 93 59 05 	sts	0x0559, r18
    35a0:	30 93 5a 05 	sts	0x055A, r19
    35a4:	40 93 5b 05 	sts	0x055B, r20
    35a8:	50 93 5c 05 	sts	0x055C, r21
    }
    counter_y += current_block->steps_y;
    35ac:	20 91 5d 05 	lds	r18, 0x055D
    35b0:	30 91 5e 05 	lds	r19, 0x055E
    35b4:	40 91 5f 05 	lds	r20, 0x055F
    35b8:	50 91 60 05 	lds	r21, 0x0560
    35bc:	84 81       	ldd	r24, Z+4	; 0x04
    35be:	95 81       	ldd	r25, Z+5	; 0x05
    35c0:	a6 81       	ldd	r26, Z+6	; 0x06
    35c2:	b7 81       	ldd	r27, Z+7	; 0x07
    35c4:	28 0f       	add	r18, r24
    35c6:	39 1f       	adc	r19, r25
    35c8:	4a 1f       	adc	r20, r26
    35ca:	5b 1f       	adc	r21, r27
    35cc:	20 93 5d 05 	sts	0x055D, r18
    35d0:	30 93 5e 05 	sts	0x055E, r19
    35d4:	40 93 5f 05 	sts	0x055F, r20
    35d8:	50 93 60 05 	sts	0x0560, r21
    if (counter_y > 0) {
    35dc:	12 16       	cp	r1, r18
    35de:	13 06       	cpc	r1, r19
    35e0:	14 06       	cpc	r1, r20
    35e2:	15 06       	cpc	r1, r21
    35e4:	8c f4       	brge	.+34     	; 0x3608 <__vector_17+0x1ac>
      out_bits |= (1<<Y_STEP_BIT);
    35e6:	80 91 58 05 	lds	r24, 0x0558
    35ea:	84 60       	ori	r24, 0x04	; 4
    35ec:	80 93 58 05 	sts	0x0558, r24
      counter_y -= current_block->step_event_count;
    35f0:	2e 19       	sub	r18, r14
    35f2:	3f 09       	sbc	r19, r15
    35f4:	40 0b       	sbc	r20, r16
    35f6:	51 0b       	sbc	r21, r17
    35f8:	20 93 5d 05 	sts	0x055D, r18
    35fc:	30 93 5e 05 	sts	0x055E, r19
    3600:	40 93 5f 05 	sts	0x055F, r20
    3604:	50 93 60 05 	sts	0x0560, r21
    }
    counter_z += current_block->steps_z;
    3608:	20 91 61 05 	lds	r18, 0x0561
    360c:	30 91 62 05 	lds	r19, 0x0562
    3610:	40 91 63 05 	lds	r20, 0x0563
    3614:	50 91 64 05 	lds	r21, 0x0564
    3618:	80 85       	ldd	r24, Z+8	; 0x08
    361a:	91 85       	ldd	r25, Z+9	; 0x09
    361c:	a2 85       	ldd	r26, Z+10	; 0x0a
    361e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3620:	28 0f       	add	r18, r24
    3622:	39 1f       	adc	r19, r25
    3624:	4a 1f       	adc	r20, r26
    3626:	5b 1f       	adc	r21, r27
    3628:	20 93 61 05 	sts	0x0561, r18
    362c:	30 93 62 05 	sts	0x0562, r19
    3630:	40 93 63 05 	sts	0x0563, r20
    3634:	50 93 64 05 	sts	0x0564, r21
    if (counter_z > 0) {
    3638:	12 16       	cp	r1, r18
    363a:	13 06       	cpc	r1, r19
    363c:	14 06       	cpc	r1, r20
    363e:	15 06       	cpc	r1, r21
    3640:	8c f4       	brge	.+34     	; 0x3664 <__vector_17+0x208>
      out_bits |= (1<<Z_STEP_BIT);
    3642:	80 91 58 05 	lds	r24, 0x0558
    3646:	80 61       	ori	r24, 0x10	; 16
    3648:	80 93 58 05 	sts	0x0558, r24
      counter_z -= current_block->step_event_count;
    364c:	2e 19       	sub	r18, r14
    364e:	3f 09       	sbc	r19, r15
    3650:	40 0b       	sbc	r20, r16
    3652:	51 0b       	sbc	r21, r17
    3654:	20 93 61 05 	sts	0x0561, r18
    3658:	30 93 62 05 	sts	0x0562, r19
    365c:	40 93 63 05 	sts	0x0563, r20
    3660:	50 93 64 05 	sts	0x0564, r21
    }
    counter_c += current_block->steps_c;
    3664:	20 91 65 05 	lds	r18, 0x0565
    3668:	30 91 66 05 	lds	r19, 0x0566
    366c:	40 91 67 05 	lds	r20, 0x0567
    3670:	50 91 68 05 	lds	r21, 0x0568
    3674:	84 85       	ldd	r24, Z+12	; 0x0c
    3676:	95 85       	ldd	r25, Z+13	; 0x0d
    3678:	a6 85       	ldd	r26, Z+14	; 0x0e
    367a:	b7 85       	ldd	r27, Z+15	; 0x0f
    367c:	28 0f       	add	r18, r24
    367e:	39 1f       	adc	r19, r25
    3680:	4a 1f       	adc	r20, r26
    3682:	5b 1f       	adc	r21, r27
    3684:	20 93 65 05 	sts	0x0565, r18
    3688:	30 93 66 05 	sts	0x0566, r19
    368c:	40 93 67 05 	sts	0x0567, r20
    3690:	50 93 68 05 	sts	0x0568, r21
    if (counter_c > 0) {
    3694:	12 16       	cp	r1, r18
    3696:	13 06       	cpc	r1, r19
    3698:	14 06       	cpc	r1, r20
    369a:	15 06       	cpc	r1, r21
    369c:	8c f4       	brge	.+34     	; 0x36c0 <__vector_17+0x264>
      out_bits |= (1<<C_STEP_BIT);
    369e:	80 91 58 05 	lds	r24, 0x0558
    36a2:	80 62       	ori	r24, 0x20	; 32
    36a4:	80 93 58 05 	sts	0x0558, r24
      counter_c -= current_block->step_event_count;
    36a8:	2e 19       	sub	r18, r14
    36aa:	3f 09       	sbc	r19, r15
    36ac:	40 0b       	sbc	r20, r16
    36ae:	51 0b       	sbc	r21, r17
    36b0:	20 93 65 05 	sts	0x0565, r18
    36b4:	30 93 66 05 	sts	0x0566, r19
    36b8:	40 93 67 05 	sts	0x0567, r20
    36bc:	50 93 68 05 	sts	0x0568, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    36c0:	80 91 69 05 	lds	r24, 0x0569
    36c4:	90 91 6a 05 	lds	r25, 0x056A
    36c8:	a0 91 6b 05 	lds	r26, 0x056B
    36cc:	b0 91 6c 05 	lds	r27, 0x056C
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	a1 1d       	adc	r26, r1
    36d4:	b1 1d       	adc	r27, r1
    36d6:	80 93 69 05 	sts	0x0569, r24
    36da:	90 93 6a 05 	sts	0x056A, r25
    36de:	a0 93 6b 05 	sts	0x056B, r26
    36e2:	b0 93 6c 05 	sts	0x056C, r27
    if (step_events_completed >= current_block->step_event_count) {
    36e6:	8e 15       	cp	r24, r14
    36e8:	9f 05       	cpc	r25, r15
    36ea:	a0 07       	cpc	r26, r16
    36ec:	b1 07       	cpc	r27, r17
    36ee:	08 f0       	brcs	.+2      	; 0x36f2 <__vector_17+0x296>
    36f0:	a0 c0       	rjmp	.+320    	; 0x3832 <__vector_17+0x3d6>
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
    36f2:	80 91 58 05 	lds	r24, 0x0558
    36f6:	95 e3       	ldi	r25, 0x35	; 53
    36f8:	89 27       	eor	r24, r25
    36fa:	80 93 58 05 	sts	0x0558, r24
  dir_bits ^= DIRECTION_INVERT_MASK;
    36fe:	80 91 b3 06 	lds	r24, 0x06B3
    3702:	9a e0       	ldi	r25, 0x0A	; 10
    3704:	89 27       	eor	r24, r25
    3706:	80 93 b3 06 	sts	0x06B3, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    370a:	20 91 6f 05 	lds	r18, 0x056F
    370e:	30 91 70 05 	lds	r19, 0x0570
    3712:	40 91 71 05 	lds	r20, 0x0571
    3716:	50 91 72 05 	lds	r21, 0x0572
    371a:	80 91 73 05 	lds	r24, 0x0573
    371e:	90 91 74 05 	lds	r25, 0x0574
    3722:	a0 91 75 05 	lds	r26, 0x0575
    3726:	b0 91 76 05 	lds	r27, 0x0576
    372a:	28 0f       	add	r18, r24
    372c:	39 1f       	adc	r19, r25
    372e:	4a 1f       	adc	r20, r26
    3730:	5b 1f       	adc	r21, r27
    3732:	20 93 73 05 	sts	0x0573, r18
    3736:	30 93 74 05 	sts	0x0574, r19
    373a:	40 93 75 05 	sts	0x0575, r20
    373e:	50 93 76 05 	sts	0x0576, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    3742:	21 38       	cpi	r18, 0x81	; 129
    3744:	0a e1       	ldi	r16, 0x1A	; 26
    3746:	30 07       	cpc	r19, r16
    3748:	06 e0       	ldi	r16, 0x06	; 6
    374a:	40 07       	cpc	r20, r16
    374c:	00 e0       	ldi	r16, 0x00	; 0
    374e:	50 07       	cpc	r21, r16
    3750:	08 f4       	brcc	.+2      	; 0x3754 <__vector_17+0x2f8>
    3752:	5a c0       	rjmp	.+180    	; 0x3808 <__vector_17+0x3ac>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    3754:	20 58       	subi	r18, 0x80	; 128
    3756:	3a 41       	sbci	r19, 0x1A	; 26
    3758:	46 40       	sbci	r20, 0x06	; 6
    375a:	50 40       	sbci	r21, 0x00	; 0
    375c:	20 93 73 05 	sts	0x0573, r18
    3760:	30 93 74 05 	sts	0x0574, r19
    3764:	40 93 75 05 	sts	0x0575, r20
    3768:	50 93 76 05 	sts	0x0576, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static inline void trapezoid_generator_tick() {     
  if (current_block) {
    376c:	e0 91 56 05 	lds	r30, 0x0556
    3770:	f0 91 57 05 	lds	r31, 0x0557
    3774:	30 97       	sbiw	r30, 0x00	; 0
    3776:	09 f4       	brne	.+2      	; 0x377a <__vector_17+0x31e>
    3778:	47 c0       	rjmp	.+142    	; 0x3808 <__vector_17+0x3ac>
    if (step_events_completed < current_block->accelerate_until) {
    377a:	20 91 69 05 	lds	r18, 0x0569
    377e:	30 91 6a 05 	lds	r19, 0x056A
    3782:	40 91 6b 05 	lds	r20, 0x056B
    3786:	50 91 6c 05 	lds	r21, 0x056C
    378a:	ef 5b       	subi	r30, 0xBF	; 191
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	80 81       	ld	r24, Z
    3790:	91 81       	ldd	r25, Z+1	; 0x01
    3792:	a2 81       	ldd	r26, Z+2	; 0x02
    3794:	b3 81       	ldd	r27, Z+3	; 0x03
    3796:	e1 54       	subi	r30, 0x41	; 65
    3798:	f0 40       	sbci	r31, 0x00	; 0
    379a:	28 17       	cp	r18, r24
    379c:	39 07       	cpc	r19, r25
    379e:	4a 07       	cpc	r20, r26
    37a0:	5b 07       	cpc	r21, r27
    37a2:	08 f0       	brcs	.+2      	; 0x37a6 <__vector_17+0x34a>
    37a4:	4d c0       	rjmp	.+154    	; 0x3840 <__vector_17+0x3e4>
      trapezoid_adjusted_rate += current_block->rate_delta;
    37a6:	fd 96       	adiw	r30, 0x3d	; 61
    37a8:	80 81       	ld	r24, Z
    37aa:	91 81       	ldd	r25, Z+1	; 0x01
    37ac:	a2 81       	ldd	r26, Z+2	; 0x02
    37ae:	b3 81       	ldd	r27, Z+3	; 0x03
    37b0:	fd 97       	sbiw	r30, 0x3d	; 61
    37b2:	20 91 77 05 	lds	r18, 0x0577
    37b6:	30 91 78 05 	lds	r19, 0x0578
    37ba:	40 91 79 05 	lds	r20, 0x0579
    37be:	50 91 7a 05 	lds	r21, 0x057A
    37c2:	28 0f       	add	r18, r24
    37c4:	39 1f       	adc	r19, r25
    37c6:	4a 1f       	adc	r20, r26
    37c8:	5b 1f       	adc	r21, r27
    37ca:	20 93 77 05 	sts	0x0577, r18
    37ce:	30 93 78 05 	sts	0x0578, r19
    37d2:	40 93 79 05 	sts	0x0579, r20
    37d6:	50 93 7a 05 	sts	0x057A, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    37da:	85 89       	ldd	r24, Z+21	; 0x15
    37dc:	96 89       	ldd	r25, Z+22	; 0x16
    37de:	a7 89       	ldd	r26, Z+23	; 0x17
    37e0:	b0 8d       	ldd	r27, Z+24	; 0x18
    37e2:	82 17       	cp	r24, r18
    37e4:	93 07       	cpc	r25, r19
    37e6:	a4 07       	cpc	r26, r20
    37e8:	b5 07       	cpc	r27, r21
    37ea:	50 f4       	brcc	.+20     	; 0x3800 <__vector_17+0x3a4>
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
        trapezoid_adjusted_rate -= current_block->rate_delta;
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
        trapezoid_adjusted_rate = current_block->final_rate;
    37ec:	80 93 77 05 	sts	0x0577, r24
    37f0:	90 93 78 05 	sts	0x0578, r25
    37f4:	a0 93 79 05 	sts	0x0579, r26
    37f8:	b0 93 7a 05 	sts	0x057A, r27
    37fc:	9c 01       	movw	r18, r24
    37fe:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3800:	ca 01       	movw	r24, r20
    3802:	b9 01       	movw	r22, r18
    3804:	0e 94 61 18 	call	0x30c2	; 0x30c2 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    3808:	10 92 6e 05 	sts	0x056E, r1
    380c:	10 92 6d 05 	sts	0x056D, r1
    3810:	4a ce       	rjmp	.-876    	; 0x34a6 <__vector_17+0x4a>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    3812:	e1 88       	ldd	r14, Z+17	; 0x11
    3814:	f2 88       	ldd	r15, Z+18	; 0x12
    3816:	03 89       	ldd	r16, Z+19	; 0x13
    3818:	14 89       	ldd	r17, Z+20	; 0x14
    381a:	c8 ce       	rjmp	.-624    	; 0x35ac <__vector_17+0x150>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
	gHomed = FALSE ;
    381c:	10 92 55 05 	sts	0x0555, r1
		// set ack
	  ackHost = 'L';
    3820:	8c e4       	ldi	r24, 0x4C	; 76
    3822:	80 93 54 05 	sts	0x0554, r24
	DISABLE_STEPPER_DRIVER_INTERRUPT();
    3826:	80 91 6f 00 	lds	r24, 0x006F
    382a:	8d 7f       	andi	r24, 0xFD	; 253
    382c:	80 93 6f 00 	sts	0x006F, r24
    3830:	3a ce       	rjmp	.-908    	; 0x34a6 <__vector_17+0x4a>
      counter_c -= current_block->step_event_count;
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    3832:	10 92 57 05 	sts	0x0557, r1
    3836:	10 92 56 05 	sts	0x0556, r1
      plan_discard_current_block();
    383a:	0e 94 44 0b 	call	0x1688	; 0x1688 <plan_discard_current_block>
    383e:	59 cf       	rjmp	.-334    	; 0x36f2 <__vector_17+0x296>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3840:	eb 5b       	subi	r30, 0xBB	; 187
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	80 81       	ld	r24, Z
    3846:	91 81       	ldd	r25, Z+1	; 0x01
    3848:	a2 81       	ldd	r26, Z+2	; 0x02
    384a:	b3 81       	ldd	r27, Z+3	; 0x03
    384c:	e5 54       	subi	r30, 0x45	; 69
    384e:	f0 40       	sbci	r31, 0x00	; 0
    3850:	82 17       	cp	r24, r18
    3852:	93 07       	cpc	r25, r19
    3854:	a4 07       	cpc	r26, r20
    3856:	b5 07       	cpc	r27, r21
    3858:	70 f5       	brcc	.+92     	; 0x38b6 <__vector_17+0x45a>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    385a:	fd 96       	adiw	r30, 0x3d	; 61
    385c:	60 81       	ld	r22, Z
    385e:	71 81       	ldd	r23, Z+1	; 0x01
    3860:	82 81       	ldd	r24, Z+2	; 0x02
    3862:	93 81       	ldd	r25, Z+3	; 0x03
    3864:	fd 97       	sbiw	r30, 0x3d	; 61
    3866:	20 91 77 05 	lds	r18, 0x0577
    386a:	30 91 78 05 	lds	r19, 0x0578
    386e:	40 91 79 05 	lds	r20, 0x0579
    3872:	50 91 7a 05 	lds	r21, 0x057A
    3876:	62 17       	cp	r22, r18
    3878:	73 07       	cpc	r23, r19
    387a:	84 07       	cpc	r24, r20
    387c:	95 07       	cpc	r25, r21
    387e:	80 f4       	brcc	.+32     	; 0x38a0 <__vector_17+0x444>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3880:	79 01       	movw	r14, r18
    3882:	8a 01       	movw	r16, r20
    3884:	e6 1a       	sub	r14, r22
    3886:	f7 0a       	sbc	r15, r23
    3888:	08 0b       	sbc	r16, r24
    388a:	19 0b       	sbc	r17, r25
    388c:	e0 92 77 05 	sts	0x0577, r14
    3890:	f0 92 78 05 	sts	0x0578, r15
    3894:	00 93 79 05 	sts	0x0579, r16
    3898:	10 93 7a 05 	sts	0x057A, r17
    389c:	a8 01       	movw	r20, r16
    389e:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    38a0:	81 ad       	ldd	r24, Z+57	; 0x39
    38a2:	92 ad       	ldd	r25, Z+58	; 0x3a
    38a4:	a3 ad       	ldd	r26, Z+59	; 0x3b
    38a6:	b4 ad       	ldd	r27, Z+60	; 0x3c
    38a8:	28 17       	cp	r18, r24
    38aa:	39 07       	cpc	r19, r25
    38ac:	4a 07       	cpc	r20, r26
    38ae:	5b 07       	cpc	r21, r27
    38b0:	08 f0       	brcs	.+2      	; 0x38b4 <__vector_17+0x458>
    38b2:	a6 cf       	rjmp	.-180    	; 0x3800 <__vector_17+0x3a4>
    38b4:	9b cf       	rjmp	.-202    	; 0x37ec <__vector_17+0x390>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    38b6:	25 89       	ldd	r18, Z+21	; 0x15
    38b8:	36 89       	ldd	r19, Z+22	; 0x16
    38ba:	47 89       	ldd	r20, Z+23	; 0x17
    38bc:	50 8d       	ldd	r21, Z+24	; 0x18
    38be:	80 91 77 05 	lds	r24, 0x0577
    38c2:	90 91 78 05 	lds	r25, 0x0578
    38c6:	a0 91 79 05 	lds	r26, 0x0579
    38ca:	b0 91 7a 05 	lds	r27, 0x057A
    38ce:	28 17       	cp	r18, r24
    38d0:	39 07       	cpc	r19, r25
    38d2:	4a 07       	cpc	r20, r26
    38d4:	5b 07       	cpc	r21, r27
    38d6:	09 f4       	brne	.+2      	; 0x38da <__vector_17+0x47e>
    38d8:	97 cf       	rjmp	.-210    	; 0x3808 <__vector_17+0x3ac>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    38da:	20 93 77 05 	sts	0x0577, r18
    38de:	30 93 78 05 	sts	0x0578, r19
    38e2:	40 93 79 05 	sts	0x0579, r20
    38e6:	50 93 7a 05 	sts	0x057A, r21
    38ea:	8a cf       	rjmp	.-236    	; 0x3800 <__vector_17+0x3a4>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    38ec:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <plan_get_current_block>
    38f0:	ec 01       	movw	r28, r24
    38f2:	90 93 57 05 	sts	0x0557, r25
    38f6:	80 93 56 05 	sts	0x0556, r24
    if (current_block != NULL) {
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	09 f4       	brne	.+2      	; 0x3900 <__vector_17+0x4a4>
    38fe:	52 c0       	rjmp	.+164    	; 0x39a4 <__vector_17+0x548>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3900:	6d a9       	ldd	r22, Y+53	; 0x35
    3902:	7e a9       	ldd	r23, Y+54	; 0x36
    3904:	8f a9       	ldd	r24, Y+55	; 0x37
    3906:	98 ad       	ldd	r25, Y+56	; 0x38
    3908:	60 93 77 05 	sts	0x0577, r22
    390c:	70 93 78 05 	sts	0x0578, r23
    3910:	80 93 79 05 	sts	0x0579, r24
    3914:	90 93 7a 05 	sts	0x057A, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    3918:	10 92 73 05 	sts	0x0573, r1
    391c:	10 92 74 05 	sts	0x0574, r1
    3920:	10 92 75 05 	sts	0x0575, r1
    3924:	10 92 76 05 	sts	0x0576, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    3928:	0e 94 61 18 	call	0x30c2	; 0x30c2 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    392c:	89 89       	ldd	r24, Y+17	; 0x11
    392e:	9a 89       	ldd	r25, Y+18	; 0x12
    3930:	ab 89       	ldd	r26, Y+19	; 0x13
    3932:	bc 89       	ldd	r27, Y+20	; 0x14
    3934:	b5 95       	asr	r27
    3936:	a7 95       	ror	r26
    3938:	97 95       	ror	r25
    393a:	87 95       	ror	r24
    393c:	b0 95       	com	r27
    393e:	a0 95       	com	r26
    3940:	90 95       	com	r25
    3942:	81 95       	neg	r24
    3944:	9f 4f       	sbci	r25, 0xFF	; 255
    3946:	af 4f       	sbci	r26, 0xFF	; 255
    3948:	bf 4f       	sbci	r27, 0xFF	; 255
    394a:	80 93 59 05 	sts	0x0559, r24
    394e:	90 93 5a 05 	sts	0x055A, r25
    3952:	a0 93 5b 05 	sts	0x055B, r26
    3956:	b0 93 5c 05 	sts	0x055C, r27
      counter_y = counter_x;
    395a:	80 93 5d 05 	sts	0x055D, r24
    395e:	90 93 5e 05 	sts	0x055E, r25
    3962:	a0 93 5f 05 	sts	0x055F, r26
    3966:	b0 93 60 05 	sts	0x0560, r27
      counter_z = counter_x;
    396a:	80 93 61 05 	sts	0x0561, r24
    396e:	90 93 62 05 	sts	0x0562, r25
    3972:	a0 93 63 05 	sts	0x0563, r26
    3976:	b0 93 64 05 	sts	0x0564, r27
      counter_c = counter_x;
    397a:	80 93 65 05 	sts	0x0565, r24
    397e:	90 93 66 05 	sts	0x0566, r25
    3982:	a0 93 67 05 	sts	0x0567, r26
    3986:	b0 93 68 05 	sts	0x0568, r27
      step_events_completed = 0;
    398a:	10 92 69 05 	sts	0x0569, r1
    398e:	10 92 6a 05 	sts	0x056A, r1
    3992:	10 92 6b 05 	sts	0x056B, r1
    3996:	10 92 6c 05 	sts	0x056C, r1
    399a:	e0 91 56 05 	lds	r30, 0x0556
    399e:	f0 91 57 05 	lds	r31, 0x0557
    39a2:	ce cd       	rjmp	.-1124   	; 0x3540 <__vector_17+0xe4>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    39a4:	80 91 6f 00 	lds	r24, 0x006F
    39a8:	8d 7f       	andi	r24, 0xFD	; 253
    39aa:	80 93 6f 00 	sts	0x006F, r24

		// set ack
	  ackHost = 'X';
    39ae:	88 e5       	ldi	r24, 0x58	; 88
    39b0:	80 93 54 05 	sts	0x0554, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    39b4:	10 92 58 05 	sts	0x0558, r1
    39b8:	9c ce       	rjmp	.-712    	; 0x36f2 <__vector_17+0x296>

000039ba <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    39ba:	ef 92       	push	r14
    39bc:	ff 92       	push	r15
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
    39c2:	7b 01       	movw	r14, r22
    39c4:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    39c6:	22 e0       	ldi	r18, 0x02	; 2
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__divmodsi4>
    39d2:	20 5c       	subi	r18, 0xC0	; 192
    39d4:	3d 4b       	sbci	r19, 0xBD	; 189
    39d6:	40 4f       	sbci	r20, 0xF0	; 240
    39d8:	5f 4f       	sbci	r21, 0xFF	; 255
    39da:	ca 01       	movw	r24, r20
    39dc:	b9 01       	movw	r22, r18
    39de:	a8 01       	movw	r20, r16
    39e0:	97 01       	movw	r18, r14
    39e2:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__udivmodsi4>
    39e6:	c9 01       	movw	r24, r18
    39e8:	da 01       	movw	r26, r20
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	a1 09       	sbc	r26, r1
    39ee:	b1 09       	sbc	r27, r1
    39f0:	29 2f       	mov	r18, r25
    39f2:	3a 2f       	mov	r19, r26
    39f4:	4b 2f       	mov	r20, r27
    39f6:	55 27       	eor	r21, r21
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	a1 1d       	adc	r26, r1
    39fc:	b1 1d       	adc	r27, r1
    39fe:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3a02:	81 50       	subi	r24, 0x01	; 1
    3a04:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3a08:	e0 ec       	ldi	r30, 0xC0	; 192
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	80 81       	ld	r24, Z
    3a0e:	8d 7f       	andi	r24, 0xFD	; 253
    3a10:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    3a12:	e1 ec       	ldi	r30, 0xC1	; 193
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	80 61       	ori	r24, 0x10	; 16
    3a1a:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3a1c:	80 81       	ld	r24, Z
    3a1e:	88 60       	ori	r24, 0x08	; 8
    3a20:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3a22:	80 81       	ld	r24, Z
    3a24:	80 68       	ori	r24, 0x80	; 128
    3a26:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	ff 90       	pop	r15
    3a2e:	ef 90       	pop	r14
    3a30:	08 95       	ret

00003a32 <serialWrite>:

void serialWrite(unsigned char c)
{
    3a32:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3a34:	80 91 c0 00 	lds	r24, 0x00C0
    3a38:	85 ff       	sbrs	r24, 5
    3a3a:	fc cf       	rjmp	.-8      	; 0x3a34 <serialWrite+0x2>
		;
	UDR0 = c;
    3a3c:	90 93 c6 00 	sts	0x00C6, r25
}
    3a40:	08 95       	ret

00003a42 <serialAvailable>:

int serialAvailable()
{
    3a42:	80 91 7b 05 	lds	r24, 0x057B
    3a46:	90 91 7c 05 	lds	r25, 0x057C
    3a4a:	80 50       	subi	r24, 0x00	; 0
    3a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4e:	20 91 7d 05 	lds	r18, 0x057D
    3a52:	30 91 7e 05 	lds	r19, 0x057E
    3a56:	82 1b       	sub	r24, r18
    3a58:	93 0b       	sbc	r25, r19
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	71 e0       	ldi	r23, 0x01	; 1
    3a5e:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3a62:	08 95       	ret

00003a64 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3a64:	40 91 7d 05 	lds	r20, 0x057D
    3a68:	50 91 7e 05 	lds	r21, 0x057E
    3a6c:	80 91 7b 05 	lds	r24, 0x057B
    3a70:	90 91 7c 05 	lds	r25, 0x057C
    3a74:	84 17       	cp	r24, r20
    3a76:	95 07       	cpc	r25, r21
    3a78:	89 f0       	breq	.+34     	; 0x3a9c <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3a7a:	fa 01       	movw	r30, r20
    3a7c:	e1 58       	subi	r30, 0x81	; 129
    3a7e:	fa 4f       	sbci	r31, 0xFA	; 250
    3a80:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3a82:	ca 01       	movw	r24, r20
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	71 e0       	ldi	r23, 0x01	; 1
    3a8a:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
    3a8e:	90 93 7e 05 	sts	0x057E, r25
    3a92:	80 93 7d 05 	sts	0x057D, r24
		return c;
    3a96:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3a98:	c9 01       	movw	r24, r18
    3a9a:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3a9c:	2f ef       	ldi	r18, 0xFF	; 255
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3aa0:	c9 01       	movw	r24, r18
    3aa2:	08 95       	ret

00003aa4 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3aa4:	80 91 7d 05 	lds	r24, 0x057D
    3aa8:	90 91 7e 05 	lds	r25, 0x057E
    3aac:	90 93 7c 05 	sts	0x057C, r25
    3ab0:	80 93 7b 05 	sts	0x057B, r24
}
    3ab4:	08 95       	ret

00003ab6 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3ab6:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3ab8:	80 91 c0 00 	lds	r24, 0x00C0
    3abc:	85 ff       	sbrs	r24, 5
    3abe:	fc cf       	rjmp	.-8      	; 0x3ab8 <printByte+0x2>
		;
	UDR0 = c;
    3ac0:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3ac4:	08 95       	ret

00003ac6 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3ac6:	fc 01       	movw	r30, r24
	while (*s)
    3ac8:	90 81       	ld	r25, Z
    3aca:	99 23       	and	r25, r25
    3acc:	51 f0       	breq	.+20     	; 0x3ae2 <printString+0x1c>
		printByte(*s++);
    3ace:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3ad0:	80 91 c0 00 	lds	r24, 0x00C0
    3ad4:	85 ff       	sbrs	r24, 5
    3ad6:	fc cf       	rjmp	.-8      	; 0x3ad0 <printString+0xa>
		;
	UDR0 = c;
    3ad8:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3adc:	90 81       	ld	r25, Z
    3ade:	99 23       	and	r25, r25
    3ae0:	b1 f7       	brne	.-20     	; 0x3ace <printString+0x8>
    3ae2:	08 95       	ret

00003ae4 <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3ae4:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3ae6:	94 91       	lpm	r25, Z+
    3ae8:	99 23       	and	r25, r25
    3aea:	51 f0       	breq	.+20     	; 0x3b00 <printPgmString+0x1c>
    3aec:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3aee:	80 91 c0 00 	lds	r24, 0x00C0
    3af2:	85 ff       	sbrs	r24, 5
    3af4:	fc cf       	rjmp	.-8      	; 0x3aee <printPgmString+0xa>
		;
	UDR0 = c;
    3af6:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3afa:	94 91       	lpm	r25, Z+
    3afc:	99 23       	and	r25, r25
    3afe:	b1 f7       	brne	.-20     	; 0x3aec <printPgmString+0x8>
    3b00:	08 95       	ret

00003b02 <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3b02:	2f 92       	push	r2
    3b04:	3f 92       	push	r3
    3b06:	4f 92       	push	r4
    3b08:	5f 92       	push	r5
    3b0a:	6f 92       	push	r6
    3b0c:	7f 92       	push	r7
    3b0e:	8f 92       	push	r8
    3b10:	9f 92       	push	r9
    3b12:	af 92       	push	r10
    3b14:	bf 92       	push	r11
    3b16:	cf 92       	push	r12
    3b18:	df 92       	push	r13
    3b1a:	ef 92       	push	r14
    3b1c:	ff 92       	push	r15
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	a0 97       	sbiw	r28, 0x20	; 32
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	6b 01       	movw	r12, r22
    3b38:	7c 01       	movw	r14, r24
    3b3a:	29 01       	movw	r4, r18
    3b3c:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3b3e:	61 15       	cp	r22, r1
    3b40:	71 05       	cpc	r23, r1
    3b42:	81 05       	cpc	r24, r1
    3b44:	91 05       	cpc	r25, r1
    3b46:	09 f4       	brne	.+2      	; 0x3b4a <printIntegerInBase+0x48>
    3b48:	50 c0       	rjmp	.+160    	; 0x3bea <printIntegerInBase+0xe8>
		printByte('0');
		return;
    3b4a:	88 24       	eor	r8, r8
    3b4c:	99 24       	eor	r9, r9
    3b4e:	54 01       	movw	r10, r8
    3b50:	1e 01       	movw	r2, r28
    3b52:	08 94       	sec
    3b54:	21 1c       	adc	r2, r1
    3b56:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3b58:	81 01       	movw	r16, r2
    3b5a:	08 0d       	add	r16, r8
    3b5c:	19 1d       	adc	r17, r9
    3b5e:	c7 01       	movw	r24, r14
    3b60:	b6 01       	movw	r22, r12
    3b62:	a3 01       	movw	r20, r6
    3b64:	92 01       	movw	r18, r4
    3b66:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__udivmodsi4>
    3b6a:	f8 01       	movw	r30, r16
    3b6c:	60 83       	st	Z, r22
    3b6e:	08 94       	sec
    3b70:	81 1c       	adc	r8, r1
    3b72:	91 1c       	adc	r9, r1
    3b74:	a1 1c       	adc	r10, r1
    3b76:	b1 1c       	adc	r11, r1
		n /= base;
    3b78:	c7 01       	movw	r24, r14
    3b7a:	b6 01       	movw	r22, r12
    3b7c:	a3 01       	movw	r20, r6
    3b7e:	92 01       	movw	r18, r4
    3b80:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__udivmodsi4>
    3b84:	c9 01       	movw	r24, r18
    3b86:	da 01       	movw	r26, r20
    3b88:	6c 01       	movw	r12, r24
    3b8a:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3b8c:	c1 14       	cp	r12, r1
    3b8e:	d1 04       	cpc	r13, r1
    3b90:	e1 04       	cpc	r14, r1
    3b92:	f1 04       	cpc	r15, r1
    3b94:	09 f7       	brne	.-62     	; 0x3b58 <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3b96:	81 14       	cp	r8, r1
    3b98:	91 04       	cpc	r9, r1
    3b9a:	a1 04       	cpc	r10, r1
    3b9c:	b1 04       	cpc	r11, r1
    3b9e:	61 f1       	breq	.+88     	; 0x3bf8 <printIntegerInBase+0xf6>
    3ba0:	91 01       	movw	r18, r2
    3ba2:	28 0d       	add	r18, r8
    3ba4:	39 1d       	adc	r19, r9
    3ba6:	d5 01       	movw	r26, r10
    3ba8:	c4 01       	movw	r24, r8
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	a1 09       	sbc	r26, r1
    3bae:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    3bb0:	ac 01       	movw	r20, r24
    3bb2:	48 19       	sub	r20, r8
    3bb4:	59 09       	sbc	r21, r9
    3bb6:	fa 01       	movw	r30, r20
    3bb8:	e2 0f       	add	r30, r18
    3bba:	f3 1f       	adc	r31, r19
    3bbc:	e0 81       	ld	r30, Z
    3bbe:	ea 30       	cpi	r30, 0x0A	; 10
    3bc0:	90 f4       	brcc	.+36     	; 0x3be6 <printIntegerInBase+0xe4>
    3bc2:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3bc4:	80 91 c0 00 	lds	r24, 0x00C0
    3bc8:	85 ff       	sbrs	r24, 5
    3bca:	fc cf       	rjmp	.-8      	; 0x3bc4 <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    3bcc:	e0 93 c6 00 	sts	0x00C6, r30
    3bd0:	21 50       	subi	r18, 0x01	; 1
    3bd2:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3bd4:	22 16       	cp	r2, r18
    3bd6:	33 06       	cpc	r3, r19
    3bd8:	79 f0       	breq	.+30     	; 0x3bf8 <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    3bda:	fa 01       	movw	r30, r20
    3bdc:	e2 0f       	add	r30, r18
    3bde:	f3 1f       	adc	r31, r19
    3be0:	e0 81       	ld	r30, Z
    3be2:	ea 30       	cpi	r30, 0x0A	; 10
    3be4:	70 f3       	brcs	.-36     	; 0x3bc2 <printIntegerInBase+0xc0>
    3be6:	e9 5c       	subi	r30, 0xC9	; 201
    3be8:	ed cf       	rjmp	.-38     	; 0x3bc4 <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3bea:	80 91 c0 00 	lds	r24, 0x00C0
    3bee:	85 ff       	sbrs	r24, 5
    3bf0:	fc cf       	rjmp	.-8      	; 0x3bea <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    3bf2:	80 e3       	ldi	r24, 0x30	; 48
    3bf4:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3bf8:	a0 96       	adiw	r28, 0x20	; 32
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	ff 90       	pop	r15
    3c0e:	ef 90       	pop	r14
    3c10:	df 90       	pop	r13
    3c12:	cf 90       	pop	r12
    3c14:	bf 90       	pop	r11
    3c16:	af 90       	pop	r10
    3c18:	9f 90       	pop	r9
    3c1a:	8f 90       	pop	r8
    3c1c:	7f 90       	pop	r7
    3c1e:	6f 90       	pop	r6
    3c20:	5f 90       	pop	r5
    3c22:	4f 90       	pop	r4
    3c24:	3f 90       	pop	r3
    3c26:	2f 90       	pop	r2
    3c28:	08 95       	ret

00003c2a <printInteger>:

void printInteger(long n)
{
    3c2a:	9b 01       	movw	r18, r22
    3c2c:	ac 01       	movw	r20, r24
	if (n < 0) {
    3c2e:	97 fd       	sbrc	r25, 7
    3c30:	09 c0       	rjmp	.+18     	; 0x3c44 <printInteger+0x1a>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    3c32:	ca 01       	movw	r24, r20
    3c34:	b9 01       	movw	r22, r18
    3c36:	2a e0       	ldi	r18, 0x0A	; 10
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <printIntegerInBase>
}
    3c42:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c44:	80 91 c0 00 	lds	r24, 0x00C0
    3c48:	85 ff       	sbrs	r24, 5
    3c4a:	fc cf       	rjmp	.-8      	; 0x3c44 <printInteger+0x1a>
		;
	UDR0 = c;
    3c4c:	8d e2       	ldi	r24, 0x2D	; 45
    3c4e:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3c52:	50 95       	com	r21
    3c54:	40 95       	com	r20
    3c56:	30 95       	com	r19
    3c58:	21 95       	neg	r18
    3c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5c:	4f 4f       	sbci	r20, 0xFF	; 255
    3c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c60:	e8 cf       	rjmp	.-48     	; 0x3c32 <printInteger+0x8>

00003c62 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3c62:	22 e0       	ldi	r18, 0x02	; 2
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <printIntegerInBase>
  }
    3c6e:	08 95       	ret

00003c70 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3c70:	ef 92       	push	r14
    3c72:	ff 92       	push	r15
    3c74:	0f 93       	push	r16
    3c76:	1f 93       	push	r17
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <printFloat+0xe>
    3c7e:	0f 92       	push	r0
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3c84:	ae 01       	movw	r20, r28
    3c86:	4f 5f       	subi	r20, 0xFF	; 255
    3c88:	5f 4f       	sbci	r21, 0xFF	; 255
    3c8a:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <modf>
    3c8e:	7b 01       	movw	r14, r22
    3c90:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3c92:	69 81       	ldd	r22, Y+1	; 0x01
    3c94:	7a 81       	ldd	r23, Y+2	; 0x02
    3c96:	8b 81       	ldd	r24, Y+3	; 0x03
    3c98:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9a:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    3c9e:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3ca2:	80 91 c0 00 	lds	r24, 0x00C0
    3ca6:	85 ff       	sbrs	r24, 5
    3ca8:	fc cf       	rjmp	.-8      	; 0x3ca2 <printFloat+0x32>
		;
	UDR0 = c;
    3caa:	8e e2       	ldi	r24, 0x2E	; 46
    3cac:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3cb0:	c8 01       	movw	r24, r16
    3cb2:	b7 01       	movw	r22, r14
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	4a e7       	ldi	r20, 0x7A	; 122
    3cba:	54 e4       	ldi	r21, 0x44	; 68
    3cbc:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    3cc0:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <round>
    3cc4:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    3cc8:	97 fd       	sbrc	r25, 7
    3cca:	0d c0       	rjmp	.+26     	; 0x3ce6 <printFloat+0x76>
    3ccc:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <printInteger>
}
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	cf 91       	pop	r28
    3cda:	df 91       	pop	r29
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	08 95       	ret
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3ce6:	90 95       	com	r25
    3ce8:	80 95       	com	r24
    3cea:	70 95       	com	r23
    3cec:	61 95       	neg	r22
    3cee:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf0:	8f 4f       	sbci	r24, 0xFF	; 255
    3cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf4:	eb cf       	rjmp	.-42     	; 0x3ccc <printFloat+0x5c>

00003cf6 <__vector_25>:
	rx_buffer_head = rx_buffer_tail;
}

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3cf6:	1f 92       	push	r1
    3cf8:	0f 92       	push	r0
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	0f 92       	push	r0
    3cfe:	0b b6       	in	r0, 0x3b	; 59
    3d00:	0f 92       	push	r0
    3d02:	11 24       	eor	r1, r1
    3d04:	2f 93       	push	r18
    3d06:	3f 93       	push	r19
    3d08:	4f 93       	push	r20
    3d0a:	5f 93       	push	r21
    3d0c:	6f 93       	push	r22
    3d0e:	7f 93       	push	r23
    3d10:	8f 93       	push	r24
    3d12:	9f 93       	push	r25
    3d14:	af 93       	push	r26
    3d16:	bf 93       	push	r27
    3d18:	ef 93       	push	r30
    3d1a:	ff 93       	push	r31
	unsigned char c = UDR0;
    3d1c:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3d20:	e0 91 7b 05 	lds	r30, 0x057B
    3d24:	f0 91 7c 05 	lds	r31, 0x057C
    3d28:	cf 01       	movw	r24, r30
    3d2a:	01 96       	adiw	r24, 0x01	; 1
    3d2c:	60 e0       	ldi	r22, 0x00	; 0
    3d2e:	71 e0       	ldi	r23, 0x01	; 1
    3d30:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
    3d34:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3d36:	80 91 7d 05 	lds	r24, 0x057D
    3d3a:	90 91 7e 05 	lds	r25, 0x057E
    3d3e:	28 17       	cp	r18, r24
    3d40:	39 07       	cpc	r19, r25
    3d42:	39 f0       	breq	.+14     	; 0x3d52 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3d44:	e1 58       	subi	r30, 0x81	; 129
    3d46:	fa 4f       	sbci	r31, 0xFA	; 250
    3d48:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3d4a:	30 93 7c 05 	sts	0x057C, r19
    3d4e:	20 93 7b 05 	sts	0x057B, r18
	}

	if( c == 0x0ff ) {
    3d52:	4f 3f       	cpi	r20, 0xFF	; 255
    3d54:	99 f0       	breq	.+38     	; 0x3d7c <__vector_25+0x86>
		gHomed = 0 ;
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3d56:	ff 91       	pop	r31
    3d58:	ef 91       	pop	r30
    3d5a:	bf 91       	pop	r27
    3d5c:	af 91       	pop	r26
    3d5e:	9f 91       	pop	r25
    3d60:	8f 91       	pop	r24
    3d62:	7f 91       	pop	r23
    3d64:	6f 91       	pop	r22
    3d66:	5f 91       	pop	r21
    3d68:	4f 91       	pop	r20
    3d6a:	3f 91       	pop	r19
    3d6c:	2f 91       	pop	r18
    3d6e:	0f 90       	pop	r0
    3d70:	0b be       	out	0x3b, r0	; 59
    3d72:	0f 90       	pop	r0
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	0f 90       	pop	r0
    3d78:	1f 90       	pop	r1
    3d7a:	18 95       	reti
		rx_buffer_head = i;
	}

	if( c == 0x0ff ) {
		// shut off servo interrupt
		cli();
    3d7c:	f8 94       	cli
		st_disable();
    3d7e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <st_disable>
		// not homed
		gHomed = 0 ;
    3d82:	10 92 55 05 	sts	0x0555, r1
    3d86:	e7 cf       	rjmp	.-50     	; 0x3d56 <__vector_25+0x60>

00003d88 <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    3d88:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    3d8a:	e7 e0       	ldi	r30, 0x07	; 7
    3d8c:	f1 e0       	ldi	r31, 0x01	; 1
    3d8e:	80 81       	ld	r24, Z
    3d90:	81 60       	ori	r24, 0x01	; 1
    3d92:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3d94:	80 81       	ld	r24, Z
    3d96:	82 60       	ori	r24, 0x02	; 2
    3d98:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3d9a:	80 81       	ld	r24, Z
    3d9c:	84 60       	ori	r24, 0x04	; 4
    3d9e:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3da0:	80 81       	ld	r24, Z
    3da2:	88 60       	ori	r24, 0x08	; 8
    3da4:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3da6:	80 81       	ld	r24, Z
    3da8:	80 64       	ori	r24, 0x40	; 64
    3daa:	80 83       	st	Z, r24

// initialise PORT as well

}
    3dac:	08 95       	ret

00003dae <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	08 95       	ret

00003db2 <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3db8:	80 91 55 05 	lds	r24, 0x0555
    3dbc:	88 23       	and	r24, r24
    3dbe:	19 f4       	brne	.+6      	; 0x3dc6 <atc_fire+0x14>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3dc0:	df 91       	pop	r29
    3dc2:	cf 91       	pop	r28
    3dc4:	08 95       	ret

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    3dcc:	20 97       	sbiw	r28, 0x00	; 0
    3dce:	29 f1       	breq	.+74     	; 0x3e1a <atc_fire+0x68>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3dd0:	80 91 08 01 	lds	r24, 0x0108
    3dd4:	81 60       	ori	r24, 0x01	; 1
    3dd6:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3dda:	c3 30       	cpi	r28, 0x03	; 3
    3ddc:	d1 05       	cpc	r29, r1
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <atc_fire+0x30>
    3de0:	46 c0       	rjmp	.+140    	; 0x3e6e <atc_fire+0xbc>
    3de2:	c4 30       	cpi	r28, 0x04	; 4
    3de4:	d1 05       	cpc	r29, r1
    3de6:	8c f5       	brge	.+98     	; 0x3e4a <atc_fire+0x98>
    3de8:	c1 30       	cpi	r28, 0x01	; 1
    3dea:	d1 05       	cpc	r29, r1
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <atc_fire+0x3e>
    3dee:	6d c0       	rjmp	.+218    	; 0x3eca <atc_fire+0x118>
    3df0:	22 97       	sbiw	r28, 0x02	; 2
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <atc_fire+0x44>
    3df4:	66 c0       	rjmp	.+204    	; 0x3ec2 <atc_fire+0x110>
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3df6:	80 91 08 01 	lds	r24, 0x0108
    3dfa:	8e 7f       	andi	r24, 0xFE	; 254
    3dfc:	80 93 08 01 	sts	0x0108, r24
    3e00:	28 ee       	ldi	r18, 0xE8	; 232
    3e02:	33 e0       	ldi	r19, 0x03	; 3
    3e04:	40 e9       	ldi	r20, 0x90	; 144
    3e06:	51 e0       	ldi	r21, 0x01	; 1
    3e08:	ca 01       	movw	r24, r20
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <atc_fire+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0e:	21 50       	subi	r18, 0x01	; 1
    3e10:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e12:	d1 f7       	brne	.-12     	; 0x3e08 <atc_fire+0x56>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	08 95       	ret

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e1a:	80 91 08 01 	lds	r24, 0x0108
    3e1e:	81 60       	ori	r24, 0x01	; 1
    3e20:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e24:	80 91 08 01 	lds	r24, 0x0108
    3e28:	82 60       	ori	r24, 0x02	; 2
    3e2a:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e2e:	80 91 08 01 	lds	r24, 0x0108
    3e32:	84 60       	ori	r24, 0x04	; 4
    3e34:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3e38:	80 91 08 01 	lds	r24, 0x0108
    3e3c:	88 60       	ori	r24, 0x08	; 8
    3e3e:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <set_busy>
    3e48:	bb cf       	rjmp	.-138    	; 0x3dc0 <atc_fire+0xe>
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3e4a:	c5 30       	cpi	r28, 0x05	; 5
    3e4c:	d1 05       	cpc	r29, r1
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <atc_fire+0xa0>
    3e50:	45 c0       	rjmp	.+138    	; 0x3edc <atc_fire+0x12a>
    3e52:	c5 30       	cpi	r28, 0x05	; 5
    3e54:	d1 05       	cpc	r29, r1
    3e56:	04 f1       	brlt	.+64     	; 0x3e98 <atc_fire+0xe6>
    3e58:	26 97       	sbiw	r28, 0x06	; 6
    3e5a:	69 f6       	brne	.-102    	; 0x3df6 <atc_fire+0x44>
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3e5c:	80 91 08 01 	lds	r24, 0x0108
    3e60:	82 60       	ori	r24, 0x02	; 2
    3e62:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e66:	80 91 08 01 	lds	r24, 0x0108
    3e6a:	8b 7f       	andi	r24, 0xFB	; 251
    3e6c:	1d c0       	rjmp	.+58     	; 0x3ea8 <atc_fire+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e6e:	80 91 08 01 	lds	r24, 0x0108
    3e72:	8d 7f       	andi	r24, 0xFD	; 253
    3e74:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e78:	80 91 08 01 	lds	r24, 0x0108
    3e7c:	84 60       	ori	r24, 0x04	; 4
    3e7e:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3e82:	80 91 08 01 	lds	r24, 0x0108
    3e86:	87 7f       	andi	r24, 0xF7	; 247
    3e88:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e8c:	80 91 08 01 	lds	r24, 0x0108
    3e90:	8e 7f       	andi	r24, 0xFE	; 254
    3e92:	80 93 08 01 	sts	0x0108, r24
    3e96:	af cf       	rjmp	.-162    	; 0x3df6 <atc_fire+0x44>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e98:	80 91 08 01 	lds	r24, 0x0108
    3e9c:	8d 7f       	andi	r24, 0xFD	; 253
    3e9e:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3ea2:	80 91 08 01 	lds	r24, 0x0108
    3ea6:	84 60       	ori	r24, 0x04	; 4
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3ea8:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3eac:	80 91 08 01 	lds	r24, 0x0108
    3eb0:	88 60       	ori	r24, 0x08	; 8
    3eb2:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3eb6:	80 91 08 01 	lds	r24, 0x0108
    3eba:	8e 7f       	andi	r24, 0xFE	; 254
    3ebc:	80 93 08 01 	sts	0x0108, r24
    3ec0:	9a cf       	rjmp	.-204    	; 0x3df6 <atc_fire+0x44>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3ec2:	80 91 08 01 	lds	r24, 0x0108
    3ec6:	8d 7f       	andi	r24, 0xFD	; 253
    3ec8:	cc cf       	rjmp	.-104    	; 0x3e62 <atc_fire+0xb0>
 */
 	switch( tool ) {
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3eca:	80 91 08 01 	lds	r24, 0x0108
    3ece:	8d 7f       	andi	r24, 0xFD	; 253
    3ed0:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3ed4:	80 91 08 01 	lds	r24, 0x0108
    3ed8:	8b 7f       	andi	r24, 0xFB	; 251
    3eda:	d1 cf       	rjmp	.-94     	; 0x3e7e <atc_fire+0xcc>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    3edc:	80 91 08 01 	lds	r24, 0x0108
    3ee0:	82 60       	ori	r24, 0x02	; 2
    3ee2:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3ee6:	80 91 08 01 	lds	r24, 0x0108
    3eea:	8b 7f       	andi	r24, 0xFB	; 251
    3eec:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    3ef0:	80 91 08 01 	lds	r24, 0x0108
    3ef4:	87 7f       	andi	r24, 0xF7	; 247
    3ef6:	80 93 08 01 	sts	0x0108, r24
    3efa:	7d cf       	rjmp	.-262    	; 0x3df6 <atc_fire+0x44>

00003efc <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    3efc:	1f 93       	push	r17
    3efe:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3f00:	80 91 55 05 	lds	r24, 0x0555
    3f04:	88 23       	and	r24, r24
    3f06:	19 f4       	brne	.+6      	; 0x3f0e <DropTool+0x12>
    3f08:	83 e6       	ldi	r24, 0x63	; 99
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3f0a:	1f 91       	pop	r17
    3f0c:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    3f16:	88 23       	and	r24, r24
    3f18:	19 f4       	brne	.+6      	; 0x3f20 <DropTool+0x24>
    3f1a:	85 e0       	ldi	r24, 0x05	; 5
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3f1c:	1f 91       	pop	r17
    3f1e:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    3f20:	81 2f       	mov	r24, r17
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <atc_fire>

	// head back up
	head_down( 0 );
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    3f38:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3f3a:	1f 91       	pop	r17
    3f3c:	08 95       	ret

00003f3e <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    3f3e:	1f 93       	push	r17
    3f40:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3f42:	80 91 55 05 	lds	r24, 0x0555
    3f46:	88 23       	and	r24, r24
    3f48:	19 f4       	brne	.+6      	; 0x3f50 <PickupTool+0x12>
    3f4a:	83 e6       	ldi	r24, 0x63	; 99
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3f4c:	1f 91       	pop	r17
    3f4e:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    3f58:	88 23       	and	r24, r24
    3f5a:	19 f4       	brne	.+6      	; 0x3f62 <PickupTool+0x24>
    3f5c:	85 e0       	ldi	r24, 0x05	; 5
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3f5e:	1f 91       	pop	r17
    3f60:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    3f62:	81 2f       	mov	r24, r17
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>

	// head back up
	head_down( 0 );
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    3f72:	80 e9       	ldi	r24, 0x90	; 144
    3f74:	91 e0       	ldi	r25, 0x01	; 1
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	f1 f7       	brne	.-4      	; 0x3f76 <PickupTool+0x38>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <atc_change>
    3f82:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3f84:	1f 91       	pop	r17
    3f86:	08 95       	ret

00003f88 <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3f8e:	80 91 55 05 	lds	r24, 0x0555
    3f92:	88 23       	and	r24, r24
    3f94:	71 f0       	breq	.+28     	; 0x3fb2 <atc_change+0x2a>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    3f96:	cf 3f       	cpi	r28, 0xFF	; 255
    3f98:	d1 05       	cpc	r29, r1
    3f9a:	39 f0       	breq	.+14     	; 0x3faa <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    3f9c:	0e 94 47 21 	call	0x428e	; 0x428e <run_vacuum_test>
    3fa0:	88 23       	and	r24, r24
    3fa2:	59 f0       	breq	.+22     	; 0x3fba <atc_change+0x32>
		PickupTool(tool);
	} else { 
		DropTool(tool);
    3fa4:	8c 2f       	mov	r24, r28
    3fa6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <DropTool>
    3faa:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    3fac:	df 91       	pop	r29
    3fae:	cf 91       	pop	r28
    3fb0:	08 95       	ret

*/

unsigned char atc_change(int tool)
{
	if( gHomed == FALSE  ){ 
    3fb2:	83 e6       	ldi	r24, 0x63	; 99
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    3fb4:	df 91       	pop	r29
    3fb6:	cf 91       	pop	r28
    3fb8:	08 95       	ret
	if( tool == toolId ) {
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
		PickupTool(tool);
    3fba:	8c 2f       	mov	r24, r28
    3fbc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <PickupTool>
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	08 95       	ret

00003fc8 <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    3fc8:	80 91 55 05 	lds	r24, 0x0555
    3fcc:	88 23       	and	r24, r24
    3fce:	11 f4       	brne	.+4      	; 0x3fd4 <check_for_tool+0xc>
    3fd0:	83 e6       	ldi	r24, 0x63	; 99
    3fd2:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    3fd4:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    3fd8:	88 23       	and	r24, r24
    3fda:	a1 f4       	brne	.+40     	; 0x4004 <check_for_tool+0x3c>
		head_down( FALSE) ;
	}

	goto_vacpad();
    3fdc:	0e 94 81 21 	call	0x4302	; 0x4302 <goto_vacpad>
	
	head_down(TRUE);
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
	
	vacuum(TRUE);
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>

	if( vacuum_state() == TRUE )  {
    3ff0:	0e 94 41 21 	call	0x4282	; 0x4282 <vacuum_state>
    3ff4:	81 30       	cpi	r24, 0x01	; 1
    3ff6:	59 f0       	breq	.+22     	; 0x400e <check_for_tool+0x46>
		head_down( FALSE) ;
		return TRUE;
	} else {
		head_down( FALSE) ;
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4000:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    4002:	08 95       	ret
	}


	//move head up
	if( is_head_down() ) {
		head_down( FALSE) ;
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    400c:	e7 cf       	rjmp	.-50     	; 0x3fdc <check_for_tool+0x14>
	head_down(TRUE);
	
	vacuum(TRUE);

	if( vacuum_state() == TRUE )  {
		head_down( FALSE) ;
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	08 95       	ret

0000401a <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    401a:	ea e0       	ldi	r30, 0x0A	; 10
    401c:	f1 e0       	ldi	r31, 0x01	; 1
    401e:	80 81       	ld	r24, Z
    4020:	80 62       	ori	r24, 0x20	; 32
    4022:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    4024:	eb e0       	ldi	r30, 0x0B	; 11
    4026:	f1 e0       	ldi	r31, 0x01	; 1
    4028:	80 81       	ld	r24, Z
    402a:	80 62       	ori	r24, 0x20	; 32
    402c:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    402e:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    4030:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    4032:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    4034:	41 9a       	sbi	0x08, 1	; 8
}
    4036:	08 95       	ret

00004038 <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    4038:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    403a:	81 70       	andi	r24, 0x01	; 1
    403c:	08 95       	ret

0000403e <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    403e:	86 b1       	in	r24, 0x06	; 6
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	96 95       	lsr	r25
    4044:	87 95       	ror	r24

	return state;
}
    4046:	81 70       	andi	r24, 0x01	; 1
    4048:	08 95       	ret

0000404a <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}


char head_down(int state)
{
    404a:	cf 93       	push	r28
    404c:	df 93       	push	r29
    404e:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    4050:	80 91 55 05 	lds	r24, 0x0555
    4054:	88 23       	and	r24, r24
    4056:	19 f1       	breq	.+70     	; 0x409e <head_down+0x54>
		return 0;
	}

	// wait til head stops
	while( head_moving() );
    4058:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
    405c:	88 23       	and	r24, r24
    405e:	e1 f7       	brne	.-8      	; 0x4058 <head_down+0xe>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <set_busy>

// head down mode
  if( state == 0 ) {
    4066:	20 97       	sbiw	r28, 0x00	; 0
    4068:	e9 f0       	breq	.+58     	; 0x40a4 <head_down+0x5a>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    406a:	80 91 0b 01 	lds	r24, 0x010B
    406e:	8f 7d       	andi	r24, 0xDF	; 223
    4070:	80 93 0b 01 	sts	0x010B, r24
    4074:	20 ed       	ldi	r18, 0xD0	; 208
    4076:	37 e0       	ldi	r19, 0x07	; 7
    4078:	40 e9       	ldi	r20, 0x90	; 144
    407a:	51 e0       	ldi	r21, 0x01	; 1
    407c:	ca 01       	movw	r24, r20
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	f1 f7       	brne	.-4      	; 0x407e <head_down+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4082:	21 50       	subi	r18, 0x01	; 1
    4084:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4086:	d1 f7       	brne	.-12     	; 0x407c <head_down+0x32>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    4088:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    408a:	81 70       	andi	r24, 0x01	; 1
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	8c 17       	cp	r24, r28
    4090:	9d 07       	cpc	r25, r29
    4092:	81 f0       	breq	.+32     	; 0x40b4 <head_down+0x6a>

	  printPgmString(PSTR("Head down error\n\r"));
    4094:	86 ed       	ldi	r24, 0xD6	; 214
    4096:	95 e0       	ldi	r25, 0x05	; 5
    4098:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    409c:	80 e0       	ldi	r24, 0x00	; 0
  }

 	set_busy( FALSE );

	return 1;
}
    409e:	df 91       	pop	r29
    40a0:	cf 91       	pop	r28
    40a2:	08 95       	ret
	set_busy( TRUE );

// head down mode
  if( state == 0 ) {

	HEAD_PORT |= _BV( HEAD );
    40a4:	80 91 0b 01 	lds	r24, 0x010B
    40a8:	80 62       	ori	r24, 0x20	; 32
    40aa:	80 93 0b 01 	sts	0x010B, r24
    40ae:	20 ed       	ldi	r18, 0xD0	; 208
    40b0:	37 e0       	ldi	r19, 0x07	; 7
    40b2:	e2 cf       	rjmp	.-60     	; 0x4078 <head_down+0x2e>
	  printPgmString(PSTR("Head down error\n\r"));
	  
	  return 0;
  }

 	set_busy( FALSE );
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <set_busy>
    40ba:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	08 95       	ret

000040c2 <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    40c2:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    40c4:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    40c6:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    40c8:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    40ca:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    40cc:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    40ce:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    40d0:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    40d2:	a4 e0       	ldi	r26, 0x04	; 4
    40d4:	b1 e0       	ldi	r27, 0x01	; 1
    40d6:	8c 91       	ld	r24, X
    40d8:	8e 7f       	andi	r24, 0xFE	; 254
    40da:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    40dc:	e5 e0       	ldi	r30, 0x05	; 5
    40de:	f1 e0       	ldi	r31, 0x01	; 1
    40e0:	80 81       	ld	r24, Z
    40e2:	81 60       	ori	r24, 0x01	; 1
    40e4:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    40e6:	8c 91       	ld	r24, X
    40e8:	8f 7e       	andi	r24, 0xEF	; 239
    40ea:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    40ec:	80 81       	ld	r24, Z
    40ee:	80 61       	ori	r24, 0x10	; 16
    40f0:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    40f2:	a1 e0       	ldi	r26, 0x01	; 1
    40f4:	b1 e0       	ldi	r27, 0x01	; 1
    40f6:	8c 91       	ld	r24, X
    40f8:	8e 7f       	andi	r24, 0xFE	; 254
    40fa:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    40fc:	e2 e0       	ldi	r30, 0x02	; 2
    40fe:	f1 e0       	ldi	r31, 0x01	; 1
    4100:	80 81       	ld	r24, Z
    4102:	81 60       	ori	r24, 0x01	; 1
    4104:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    4106:	8c 91       	ld	r24, X
    4108:	8d 7f       	andi	r24, 0xFD	; 253
    410a:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    410c:	80 81       	ld	r24, Z
    410e:	82 60       	ori	r24, 0x02	; 2
    4110:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    4112:	e0 e9       	ldi	r30, 0x90	; 144
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	82 60       	ori	r24, 0x02	; 2
    411a:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    411c:	8c e7       	ldi	r24, 0x7C	; 124
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	90 93 99 00 	sts	0x0099, r25
    4124:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    4128:	10 92 95 00 	sts	0x0095, r1
    412c:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    4130:	84 e0       	ldi	r24, 0x04	; 4
    4132:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    4136:	e1 e7       	ldi	r30, 0x71	; 113
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	80 81       	ld	r24, Z
    413c:	82 60       	ori	r24, 0x02	; 2
    413e:	80 83       	st	Z, r24

}
    4140:	08 95       	ret

00004142 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    4142:	8c b1       	in	r24, 0x0c	; 12
    4144:	82 95       	swap	r24
    4146:	86 95       	lsr	r24
    4148:	87 70       	andi	r24, 0x07	; 7
    414a:	80 95       	com	r24

	return state;
}
    414c:	81 70       	andi	r24, 0x01	; 1
    414e:	08 95       	ret

00004150 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    4150:	82 b3       	in	r24, 0x12	; 18
    4152:	82 95       	swap	r24
    4154:	86 95       	lsr	r24
    4156:	87 70       	andi	r24, 0x07	; 7
    4158:	80 95       	com	r24

	return state;
}
    415a:	81 70       	andi	r24, 0x01	; 1
    415c:	08 95       	ret

0000415e <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    415e:	8c b1       	in	r24, 0x0c	; 12
    4160:	82 95       	swap	r24
    4162:	8f 70       	andi	r24, 0x0F	; 15
    4164:	80 95       	com	r24

	return state;
}
    4166:	81 70       	andi	r24, 0x01	; 1
    4168:	08 95       	ret

0000416a <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    416a:	80 91 03 01 	lds	r24, 0x0103
    416e:	86 95       	lsr	r24
    4170:	80 95       	com	r24

	return state;
}
    4172:	81 70       	andi	r24, 0x01	; 1
    4174:	08 95       	ret

00004176 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    4176:	86 b1       	in	r24, 0x06	; 6
    4178:	82 95       	swap	r24
    417a:	8f 70       	andi	r24, 0x0F	; 15
    417c:	80 95       	com	r24

	return state;
}
    417e:	81 70       	andi	r24, 0x01	; 1
    4180:	08 95       	ret

00004182 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    4182:	80 91 00 01 	lds	r24, 0x0100
    4186:	80 95       	com	r24

	return state;
}
    4188:	81 70       	andi	r24, 0x01	; 1
    418a:	08 95       	ret

0000418c <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    418c:	80 91 03 01 	lds	r24, 0x0103
    4190:	80 95       	com	r24

	return state;
}
    4192:	81 70       	andi	r24, 0x01	; 1
    4194:	08 95       	ret

00004196 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    4196:	83 b1       	in	r24, 0x03	; 3
    4198:	82 95       	swap	r24
    419a:	86 95       	lsr	r24
    419c:	87 70       	andi	r24, 0x07	; 7
    419e:	80 95       	com	r24

	return state;
}
    41a0:	81 70       	andi	r24, 0x01	; 1
    41a2:	08 95       	ret

000041a4 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    41a4:	80 91 00 01 	lds	r24, 0x0100
    41a8:	86 95       	lsr	r24
    41aa:	80 95       	com	r24

	return state;
}
    41ac:	81 70       	andi	r24, 0x01	; 1
    41ae:	08 95       	ret

000041b0 <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    41b0:	1f 92       	push	r1
    41b2:	0f 92       	push	r0
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	0f 92       	push	r0
    41b8:	11 24       	eor	r1, r1
	return;
}
    41ba:	0f 90       	pop	r0
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	0f 90       	pop	r0
    41c0:	1f 90       	pop	r1
    41c2:	18 95       	reti

000041c4 <process_panel>:
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    41c4:	1d 9b       	sbis	0x03, 5	; 3
    41c6:	20 c0       	rjmp	.+64     	; 0x4208 <process_panel+0x44>

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    41c8:	80 91 00 01 	lds	r24, 0x0100
    41cc:	80 ff       	sbrs	r24, 0
    41ce:	0b c0       	rjmp	.+22     	; 0x41e6 <process_panel+0x22>
	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
    41d0:	80 91 80 06 	lds	r24, 0x0680
    41d4:	81 30       	cpi	r24, 0x01	; 1
    41d6:	d9 f0       	breq	.+54     	; 0x420e <process_panel+0x4a>
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    41d8:	34 9b       	sbis	0x06, 4	; 6
    41da:	0e c0       	rjmp	.+28     	; 0x41f8 <process_panel+0x34>
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
    41dc:	80 91 7f 06 	lds	r24, 0x067F
    41e0:	81 30       	cpi	r24, 0x01	; 1
    41e2:	e1 f0       	breq	.+56     	; 0x421c <process_panel+0x58>
    41e4:	08 95       	ret
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	80 93 80 06 	sts	0x0680, r24
		vacuum(1);
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
	} else if(bvac == 1 ) {
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    41f4:	34 99       	sbic	0x06, 4	; 6
    41f6:	f2 cf       	rjmp	.-28     	; 0x41dc <process_panel+0x18>
		bhead = 1;
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	80 93 7f 06 	sts	0x067F, r24
		head_down(1);
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4206:	08 95       	ret
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    4208:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <mc_go_home>
    420c:	dd cf       	rjmp	.-70     	; 0x41c8 <process_panel+0x4>

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
		bvac = 0;
    420e:	10 92 80 06 	sts	0x0680, r1
		vacuum(0);
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
    421a:	de cf       	rjmp	.-68     	; 0x41d8 <process_panel+0x14>

	if( is_phead() ) {
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
		bhead = 0;
    421c:	10 92 7f 06 	sts	0x067F, r1
		head_down(0);
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4228:	08 95       	ret

0000422a <vacuum_init>:
#include "stepper.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    422a:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    422c:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    422e:	ea e0       	ldi	r30, 0x0A	; 10
    4230:	f1 e0       	ldi	r31, 0x01	; 1
    4232:	80 81       	ld	r24, Z
    4234:	80 61       	ori	r24, 0x10	; 16
    4236:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    4238:	eb e0       	ldi	r30, 0x0B	; 11
    423a:	f1 e0       	ldi	r31, 0x01	; 1
    423c:	80 81       	ld	r24, Z
    423e:	80 61       	ori	r24, 0x10	; 16
    4240:	80 83       	st	Z, r24

}
    4242:	08 95       	ret

00004244 <vacuum>:

// switches vacuum on and off
void vacuum(int state)
{
    4244:	9c 01       	movw	r18, r24
	if( gHomed == FALSE ) return;
    4246:	80 91 55 05 	lds	r24, 0x0555
    424a:	88 23       	and	r24, r24
    424c:	89 f0       	breq	.+34     	; 0x4270 <vacuum+0x2c>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    424e:	23 2b       	or	r18, r19
    4250:	81 f0       	breq	.+32     	; 0x4272 <vacuum+0x2e>

	HEAD_PORT |= _BV( VACUUM );

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    4252:	80 91 0b 01 	lds	r24, 0x010B
    4256:	8f 7e       	andi	r24, 0xEF	; 239
    4258:	80 93 0b 01 	sts	0x010B, r24
    425c:	28 e8       	ldi	r18, 0x88	; 136
    425e:	33 e1       	ldi	r19, 0x13	; 19
    4260:	40 e9       	ldi	r20, 0x90	; 144
    4262:	51 e0       	ldi	r21, 0x01	; 1
    4264:	ca 01       	movw	r24, r20
    4266:	01 97       	sbiw	r24, 0x01	; 1
    4268:	f1 f7       	brne	.-4      	; 0x4266 <vacuum+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426a:	21 50       	subi	r18, 0x01	; 1
    426c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    426e:	d1 f7       	brne	.-12     	; 0x4264 <vacuum+0x20>
    4270:	08 95       	ret
#endif

// vacuum  on / off
  if( state == 0 ) {

	HEAD_PORT |= _BV( VACUUM );
    4272:	80 91 0b 01 	lds	r24, 0x010B
    4276:	80 61       	ori	r24, 0x10	; 16
    4278:	80 93 0b 01 	sts	0x010B, r24
    427c:	28 e8       	ldi	r18, 0x88	; 136
    427e:	33 e1       	ldi	r19, 0x13	; 19
    4280:	ef cf       	rjmp	.-34     	; 0x4260 <vacuum+0x1c>

00004282 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    4282:	89 b1       	in	r24, 0x09	; 9
    4284:	80 95       	com	r24

	return state;
}
    4286:	88 1f       	adc	r24, r24
    4288:	88 27       	eor	r24, r24
    428a:	88 1f       	adc	r24, r24
    428c:	08 95       	ret

0000428e <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    428e:	af 92       	push	r10
    4290:	bf 92       	push	r11
    4292:	cf 92       	push	r12
    4294:	df 92       	push	r13
    4296:	ef 92       	push	r14
    4298:	ff 92       	push	r15
    429a:	0f 93       	push	r16
    429c:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    429e:	80 91 55 05 	lds	r24, 0x0555
    42a2:	88 23       	and	r24, r24
    42a4:	51 f4       	brne	.+20     	; 0x42ba <run_vacuum_test+0x2c>
    42a6:	83 e6       	ldi	r24, 0x63	; 99
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	ff 90       	pop	r15
    42ae:	ef 90       	pop	r14
    42b0:	df 90       	pop	r13
    42b2:	cf 90       	pop	r12
    42b4:	bf 90       	pop	r11
    42b6:	af 90       	pop	r10
    42b8:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    42c2:	63 ec       	ldi	r22, 0xC3	; 195
    42c4:	73 ed       	ldi	r23, 0xD3	; 211
    42c6:	81 e4       	ldi	r24, 0x41	; 65
    42c8:	91 e4       	ldi	r25, 0x41	; 65
    42ca:	2a e1       	ldi	r18, 0x1A	; 26
    42cc:	3b e8       	ldi	r19, 0x8B	; 139
    42ce:	4d e9       	ldi	r20, 0x9D	; 157
    42d0:	50 e4       	ldi	r21, 0x40	; 64
    42d2:	0f 2e       	mov	r0, r31
    42d4:	f0 e0       	ldi	r31, 0x00	; 0
    42d6:	ef 2e       	mov	r14, r31
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	ff 2e       	mov	r15, r31
    42dc:	f0 e8       	ldi	r31, 0x80	; 128
    42de:	0f 2f       	mov	r16, r31
    42e0:	ff eb       	ldi	r31, 0xBF	; 191
    42e2:	1f 2f       	mov	r17, r31
    42e4:	f0 2d       	mov	r31, r0
    42e6:	57 01       	movw	r10, r14
    42e8:	68 01       	movw	r12, r16
    42ea:	0e 94 0f 04 	call	0x81e	; 0x81e <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    42ee:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
    42f2:	88 23       	and	r24, r24
    42f4:	e1 f7       	brne	.-8      	; 0x42ee <run_vacuum_test+0x60>
    42f6:	80 e9       	ldi	r24, 0x90	; 144
    42f8:	91 e0       	ldi	r25, 0x01	; 1
    42fa:	01 97       	sbiw	r24, 0x01	; 1
    42fc:	f1 f7       	brne	.-4      	; 0x42fa <run_vacuum_test+0x6c>
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	d3 cf       	rjmp	.-90     	; 0x42a8 <run_vacuum_test+0x1a>

00004302 <goto_vacpad>:
	return GCSTATUS_OK;

}

unsigned char goto_vacpad( void ) 
{
    4302:	8f 92       	push	r8
    4304:	9f 92       	push	r9
    4306:	af 92       	push	r10
    4308:	bf 92       	push	r11
    430a:	cf 92       	push	r12
    430c:	df 92       	push	r13
    430e:	ef 92       	push	r14
    4310:	ff 92       	push	r15
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    4316:	80 91 55 05 	lds	r24, 0x0555
    431a:	88 23       	and	r24, r24
    431c:	61 f4       	brne	.+24     	; 0x4336 <goto_vacpad+0x34>
    431e:	83 e6       	ldi	r24, 0x63	; 99

	while( is_head_down() ) ;
	
	return GCSTATUS_OK;

}
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	ff 90       	pop	r15
    4326:	ef 90       	pop	r14
    4328:	df 90       	pop	r13
    432a:	cf 90       	pop	r12
    432c:	bf 90       	pop	r11
    432e:	af 90       	pop	r10
    4330:	9f 90       	pop	r9
    4332:	8f 90       	pop	r8
    4334:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
    4336:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    433a:	88 23       	and	r24, r24
    433c:	09 f0       	breq	.+2      	; 0x4340 <goto_vacpad+0x3e>
    433e:	20 c1       	rjmp	.+576    	; 0x4580 <goto_vacpad+0x27e>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4340:	63 ec       	ldi	r22, 0xC3	; 195
    4342:	73 ed       	ldi	r23, 0xD3	; 211
    4344:	81 e4       	ldi	r24, 0x41	; 65
    4346:	91 e4       	ldi	r25, 0x41	; 65
    4348:	2a e1       	ldi	r18, 0x1A	; 26
    434a:	3b e8       	ldi	r19, 0x8B	; 139
    434c:	4d e9       	ldi	r20, 0x9D	; 157
    434e:	50 e4       	ldi	r21, 0x40	; 64
    4350:	0f 2e       	mov	r0, r31
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	ef 2e       	mov	r14, r31
    4356:	f0 e0       	ldi	r31, 0x00	; 0
    4358:	ff 2e       	mov	r15, r31
    435a:	f0 e8       	ldi	r31, 0x80	; 128
    435c:	0f 2f       	mov	r16, r31
    435e:	ff eb       	ldi	r31, 0xBF	; 191
    4360:	1f 2f       	mov	r17, r31
    4362:	f0 2d       	mov	r31, r0
    4364:	57 01       	movw	r10, r14
    4366:	68 01       	movw	r12, r16
    4368:	0e 94 0f 04 	call	0x81e	; 0x81e <gotoxy>

	while( head_moving() );	
    436c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
    4370:	88 23       	and	r24, r24
    4372:	e1 f7       	brne	.-8      	; 0x436c <goto_vacpad+0x6a>
    4374:	80 e9       	ldi	r24, 0x90	; 144
    4376:	91 e0       	ldi	r25, 0x01	; 1
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	f1 f7       	brne	.-4      	; 0x4378 <goto_vacpad+0x76>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
    4384:	28 e8       	ldi	r18, 0x88	; 136
    4386:	33 e1       	ldi	r19, 0x13	; 19
    4388:	40 e9       	ldi	r20, 0x90	; 144
    438a:	51 e0       	ldi	r21, 0x01	; 1
    438c:	ca 01       	movw	r24, r20
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <goto_vacpad+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4392:	21 50       	subi	r18, 0x01	; 1
    4394:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4396:	d1 f7       	brne	.-12     	; 0x438c <goto_vacpad+0x8a>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    43a0:	88 23       	and	r24, r24
    43a2:	09 f4       	brne	.+2      	; 0x43a6 <goto_vacpad+0xa4>
    43a4:	e7 c0       	rjmp	.+462    	; 0x4574 <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    43a6:	20 e1       	ldi	r18, 0x10	; 16
    43a8:	37 e2       	ldi	r19, 0x27	; 39
    43aa:	40 e9       	ldi	r20, 0x90	; 144
    43ac:	51 e0       	ldi	r21, 0x01	; 1
    43ae:	ca 01       	movw	r24, r20
    43b0:	01 97       	sbiw	r24, 0x01	; 1
    43b2:	f1 f7       	brne	.-4      	; 0x43b0 <goto_vacpad+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b4:	21 50       	subi	r18, 0x01	; 1
    43b6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b8:	d1 f7       	brne	.-12     	; 0x43ae <goto_vacpad+0xac>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    43ba:	99 b0       	in	r9, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    43c4:	80 e0       	ldi	r24, 0x00	; 0
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    43cc:	88 23       	and	r24, r24
    43ce:	09 f4       	brne	.+2      	; 0x43d2 <goto_vacpad+0xd0>
    43d0:	c8 c0       	rjmp	.+400    	; 0x4562 <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    43d2:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    43d6:	88 23       	and	r24, r24
    43d8:	e1 f7       	brne	.-8      	; 0x43d2 <goto_vacpad+0xd0>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    43da:	6d e3       	ldi	r22, 0x3D	; 61
    43dc:	7b e9       	ldi	r23, 0x9B	; 155
    43de:	8d e4       	ldi	r24, 0x4D	; 77
    43e0:	91 e4       	ldi	r25, 0x41	; 65
    43e2:	2c ed       	ldi	r18, 0xDC	; 220
    43e4:	38 e6       	ldi	r19, 0x68	; 104
    43e6:	44 e9       	ldi	r20, 0x94	; 148
    43e8:	50 e4       	ldi	r21, 0x40	; 64
    43ea:	0f 2e       	mov	r0, r31
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	ef 2e       	mov	r14, r31
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	ff 2e       	mov	r15, r31
    43f4:	f0 e8       	ldi	r31, 0x80	; 128
    43f6:	0f 2f       	mov	r16, r31
    43f8:	ff eb       	ldi	r31, 0xBF	; 191
    43fa:	1f 2f       	mov	r17, r31
    43fc:	f0 2d       	mov	r31, r0
    43fe:	57 01       	movw	r10, r14
    4400:	68 01       	movw	r12, r16
    4402:	0e 94 0f 04 	call	0x81e	; 0x81e <gotoxy>

	while( head_moving() );	
    4406:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
    440a:	88 23       	and	r24, r24
    440c:	e1 f7       	brne	.-8      	; 0x4406 <goto_vacpad+0x104>
    440e:	80 e9       	ldi	r24, 0x90	; 144
    4410:	91 e0       	ldi	r25, 0x01	; 1
    4412:	01 97       	sbiw	r24, 0x01	; 1
    4414:	f1 f7       	brne	.-4      	; 0x4412 <goto_vacpad+0x110>
    4416:	20 ea       	ldi	r18, 0xA0	; 160
    4418:	3f e0       	ldi	r19, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    441a:	40 e9       	ldi	r20, 0x90	; 144
    441c:	51 e0       	ldi	r21, 0x01	; 1
    441e:	ca 01       	movw	r24, r20
    4420:	01 97       	sbiw	r24, 0x01	; 1
    4422:	f1 f7       	brne	.-4      	; 0x4420 <goto_vacpad+0x11e>
    4424:	21 50       	subi	r18, 0x01	; 1
    4426:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4428:	d1 f7       	brne	.-12     	; 0x441e <goto_vacpad+0x11c>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4432:	88 23       	and	r24, r24
    4434:	09 f4       	brne	.+2      	; 0x4438 <goto_vacpad+0x136>
    4436:	95 c0       	rjmp	.+298    	; 0x4562 <goto_vacpad+0x260>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    4438:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    443c:	88 23       	and	r24, r24
    443e:	e1 f3       	breq	.-8      	; 0x4438 <goto_vacpad+0x136>
    4440:	20 e1       	ldi	r18, 0x10	; 16
    4442:	37 e2       	ldi	r19, 0x27	; 39
    4444:	40 e9       	ldi	r20, 0x90	; 144
    4446:	51 e0       	ldi	r21, 0x01	; 1
    4448:	ca 01       	movw	r24, r20
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	f1 f7       	brne	.-4      	; 0x444a <goto_vacpad+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    444e:	21 50       	subi	r18, 0x01	; 1
    4450:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4452:	d1 f7       	brne	.-12     	; 0x4448 <goto_vacpad+0x146>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <atc_fire>
    445c:	20 e4       	ldi	r18, 0x40	; 64
    445e:	3f e1       	ldi	r19, 0x1F	; 31
    4460:	40 e9       	ldi	r20, 0x90	; 144
    4462:	51 e0       	ldi	r21, 0x01	; 1
    4464:	ca 01       	movw	r24, r20
    4466:	01 97       	sbiw	r24, 0x01	; 1
    4468:	f1 f7       	brne	.-4      	; 0x4466 <goto_vacpad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    446a:	21 50       	subi	r18, 0x01	; 1
    446c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    446e:	d1 f7       	brne	.-12     	; 0x4464 <goto_vacpad+0x162>
    4470:	88 24       	eor	r8, r8
    4472:	97 fc       	sbrc	r9, 7
    4474:	6b c0       	rjmp	.+214    	; 0x454c <goto_vacpad+0x24a>
    4476:	88 24       	eor	r8, r8
    4478:	83 94       	inc	r8

		// tool changer off
		atc_fire ( 0 );
		
		// head up
		if( head_down( 0 ) == 0 ) {
    447a:	28 e8       	ldi	r18, 0x88	; 136
    447c:	33 e1       	ldi	r19, 0x13	; 19
    447e:	40 e9       	ldi	r20, 0x90	; 144
    4480:	51 e0       	ldi	r21, 0x01	; 1
    4482:	ca 01       	movw	r24, r20
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	f1 f7       	brne	.-4      	; 0x4484 <goto_vacpad+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4488:	21 50       	subi	r18, 0x01	; 1
    448a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    448c:	d1 f7       	brne	.-12     	; 0x4482 <goto_vacpad+0x180>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4496:	88 23       	and	r24, r24
    4498:	09 f4       	brne	.+2      	; 0x449c <goto_vacpad+0x19a>
    449a:	63 c0       	rjmp	.+198    	; 0x4562 <goto_vacpad+0x260>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    449c:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    44a0:	81 30       	cpi	r24, 0x01	; 1
    44a2:	e1 f3       	breq	.-8      	; 0x449c <goto_vacpad+0x19a>
    44a4:	28 e9       	ldi	r18, 0x98	; 152
    44a6:	3a e3       	ldi	r19, 0x3A	; 58
    44a8:	40 e9       	ldi	r20, 0x90	; 144
    44aa:	51 e0       	ldi	r21, 0x01	; 1
    44ac:	ca 01       	movw	r24, r20
    44ae:	01 97       	sbiw	r24, 0x01	; 1
    44b0:	f1 f7       	brne	.-4      	; 0x44ae <goto_vacpad+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b2:	21 50       	subi	r18, 0x01	; 1
    44b4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b6:	d1 f7       	brne	.-12     	; 0x44ac <goto_vacpad+0x1aa>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    44b8:	63 ec       	ldi	r22, 0xC3	; 195
    44ba:	73 ed       	ldi	r23, 0xD3	; 211
    44bc:	81 e4       	ldi	r24, 0x41	; 65
    44be:	91 e4       	ldi	r25, 0x41	; 65
    44c0:	2a e1       	ldi	r18, 0x1A	; 26
    44c2:	3b e8       	ldi	r19, 0x8B	; 139
    44c4:	4d e9       	ldi	r20, 0x9D	; 157
    44c6:	50 e4       	ldi	r21, 0x40	; 64
    44c8:	0f 2e       	mov	r0, r31
    44ca:	f0 e0       	ldi	r31, 0x00	; 0
    44cc:	ef 2e       	mov	r14, r31
    44ce:	f0 e0       	ldi	r31, 0x00	; 0
    44d0:	ff 2e       	mov	r15, r31
    44d2:	f0 e8       	ldi	r31, 0x80	; 128
    44d4:	0f 2f       	mov	r16, r31
    44d6:	ff eb       	ldi	r31, 0xBF	; 191
    44d8:	1f 2f       	mov	r17, r31
    44da:	f0 2d       	mov	r31, r0
    44dc:	57 01       	movw	r10, r14
    44de:	68 01       	movw	r12, r16
    44e0:	0e 94 0f 04 	call	0x81e	; 0x81e <gotoxy>

	while( head_moving() );	
    44e4:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
    44e8:	88 23       	and	r24, r24
    44ea:	e1 f7       	brne	.-8      	; 0x44e4 <goto_vacpad+0x1e2>
    44ec:	80 e9       	ldi	r24, 0x90	; 144
    44ee:	91 e0       	ldi	r25, 0x01	; 1
    44f0:	01 97       	sbiw	r24, 0x01	; 1
    44f2:	f1 f7       	brne	.-4      	; 0x44f0 <goto_vacpad+0x1ee>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    44f4:	81 e0       	ldi	r24, 0x01	; 1
    44f6:	90 e0       	ldi	r25, 0x00	; 0
    44f8:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
    44fc:	28 e8       	ldi	r18, 0x88	; 136
    44fe:	33 e1       	ldi	r19, 0x13	; 19
    4500:	40 e9       	ldi	r20, 0x90	; 144
    4502:	51 e0       	ldi	r21, 0x01	; 1
    4504:	ca 01       	movw	r24, r20
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <goto_vacpad+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    450a:	21 50       	subi	r18, 0x01	; 1
    450c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    450e:	d1 f7       	brne	.-12     	; 0x4504 <goto_vacpad+0x202>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4518:	88 23       	and	r24, r24
    451a:	61 f1       	breq	.+88     	; 0x4574 <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    451c:	20 e1       	ldi	r18, 0x10	; 16
    451e:	37 e2       	ldi	r19, 0x27	; 39
    4520:	40 e9       	ldi	r20, 0x90	; 144
    4522:	51 e0       	ldi	r21, 0x01	; 1
    4524:	ca 01       	movw	r24, r20
    4526:	01 97       	sbiw	r24, 0x01	; 1
    4528:	f1 f7       	brne	.-4      	; 0x4526 <goto_vacpad+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    452a:	21 50       	subi	r18, 0x01	; 1
    452c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    452e:	d1 f7       	brne	.-12     	; 0x4524 <goto_vacpad+0x222>

   _delay_ms( 1000 );


	// check vacuum
	if( vacuum_state() ) {
    4530:	4f 99       	sbic	0x09, 7	; 9
    4532:	19 c0       	rjmp	.+50     	; 0x4566 <goto_vacpad+0x264>
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    4534:	88 20       	and	r8, r8
    4536:	49 f1       	breq	.+82     	; 0x458a <goto_vacpad+0x288>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup failed\r\n"));
#endif

// oops
		head_down(0);
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
		vacuum( 0 );
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
    4548:	85 e0       	ldi	r24, 0x05	; 5
    454a:	ea ce       	rjmp	.-556    	; 0x4320 <goto_vacpad+0x1e>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <atc_fire>
		
		// head up
		if( head_down( 0 ) == 0 ) {
    4554:	80 e0       	ldi	r24, 0x00	; 0
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    455c:	88 23       	and	r24, r24
    455e:	09 f0       	breq	.+2      	; 0x4562 <goto_vacpad+0x260>
    4560:	9d cf       	rjmp	.-198    	; 0x449c <goto_vacpad+0x19a>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4562:	85 e0       	ldi	r24, 0x05	; 5
    4564:	dd ce       	rjmp	.-582    	; 0x4320 <goto_vacpad+0x1e>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	88 16       	cp	r8, r24
    456a:	79 f0       	breq	.+30     	; 0x458a <goto_vacpad+0x288>
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
#endif

			head_down(0);
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
			vacuum( 0 );
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>
    457c:	85 e0       	ldi	r24, 0x05	; 5
    457e:	d0 ce       	rjmp	.-608    	; 0x4320 <goto_vacpad+0x1e>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4588:	db ce       	rjmp	.-586    	; 0x4340 <goto_vacpad+0x3e>
		}

	}	

// vacuum off
	vacuum( 0 );
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    459a:	88 23       	and	r24, r24
    459c:	11 f3       	breq	.-60     	; 0x4562 <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    459e:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    45a2:	88 23       	and	r24, r24
    45a4:	e1 f7       	brne	.-8      	; 0x459e <goto_vacpad+0x29c>
    45a6:	bc ce       	rjmp	.-648    	; 0x4320 <goto_vacpad+0x1e>

000045a8 <test_mode>:
	return GCSTATUS_OK;

}

unsigned char test_mode(void)
{
    45a8:	8f 92       	push	r8
    45aa:	9f 92       	push	r9
    45ac:	af 92       	push	r10
    45ae:	bf 92       	push	r11
    45b0:	cf 92       	push	r12
    45b2:	df 92       	push	r13
    45b4:	ef 92       	push	r14
    45b6:	ff 92       	push	r15
    45b8:	0f 93       	push	r16
    45ba:	1f 93       	push	r17
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
	int i;
	double x,y;

	if( gHomed == FALSE ) {
    45c0:	80 91 55 05 	lds	r24, 0x0555
    45c4:	88 23       	and	r24, r24
    45c6:	71 f4       	brne	.+28     	; 0x45e4 <test_mode+0x3c>
    45c8:	83 e6       	ldi	r24, 0x63	; 99

	}

	return GCSTATUS_OK;

}
    45ca:	df 91       	pop	r29
    45cc:	cf 91       	pop	r28
    45ce:	1f 91       	pop	r17
    45d0:	0f 91       	pop	r16
    45d2:	ff 90       	pop	r15
    45d4:	ef 90       	pop	r14
    45d6:	df 90       	pop	r13
    45d8:	cf 90       	pop	r12
    45da:	bf 90       	pop	r11
    45dc:	af 90       	pop	r10
    45de:	9f 90       	pop	r9
    45e0:	8f 90       	pop	r8
    45e2:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
    45e4:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    45e8:	88 23       	and	r24, r24
    45ea:	09 f0       	breq	.+2      	; 0x45ee <test_mode+0x46>
    45ec:	4a c0       	rjmp	.+148    	; 0x4682 <test_mode+0xda>
		head_down( FALSE )  ;
    45ee:	88 24       	eor	r8, r8
    45f0:	99 24       	eor	r9, r9
    45f2:	c0 e9       	ldi	r28, 0x90	; 144
    45f4:	d1 e0       	ldi	r29, 0x01	; 1
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
	
		x = rand() %12;
    45f6:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <rand>
    45fa:	8c 01       	movw	r16, r24
		y = rand() %14 ;
    45fc:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <rand>
    4600:	6c 01       	movw	r12, r24

		gotoxy( x,y ,-1,-1) ;
    4602:	c8 01       	movw	r24, r16
    4604:	6c e0       	ldi	r22, 0x0C	; 12
    4606:	70 e0       	ldi	r23, 0x00	; 0
    4608:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
    460c:	aa 27       	eor	r26, r26
    460e:	97 fd       	sbrc	r25, 7
    4610:	a0 95       	com	r26
    4612:	ba 2f       	mov	r27, r26
    4614:	bc 01       	movw	r22, r24
    4616:	cd 01       	movw	r24, r26
    4618:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    461c:	7b 01       	movw	r14, r22
    461e:	8c 01       	movw	r16, r24
    4620:	c6 01       	movw	r24, r12
    4622:	6e e0       	ldi	r22, 0x0E	; 14
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__divmodhi4>
    462a:	aa 27       	eor	r26, r26
    462c:	97 fd       	sbrc	r25, 7
    462e:	a0 95       	com	r26
    4630:	ba 2f       	mov	r27, r26
    4632:	bc 01       	movw	r22, r24
    4634:	cd 01       	movw	r24, r26
    4636:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    463a:	9b 01       	movw	r18, r22
    463c:	ac 01       	movw	r20, r24
    463e:	c8 01       	movw	r24, r16
    4640:	b7 01       	movw	r22, r14
    4642:	0f 2e       	mov	r0, r31
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	ef 2e       	mov	r14, r31
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	ff 2e       	mov	r15, r31
    464c:	f0 e8       	ldi	r31, 0x80	; 128
    464e:	0f 2f       	mov	r16, r31
    4650:	ff eb       	ldi	r31, 0xBF	; 191
    4652:	1f 2f       	mov	r17, r31
    4654:	f0 2d       	mov	r31, r0
    4656:	57 01       	movw	r10, r14
    4658:	68 01       	movw	r12, r16
    465a:	0e 94 0f 04 	call	0x81e	; 0x81e <gotoxy>
    465e:	28 e8       	ldi	r18, 0x88	; 136
    4660:	33 e1       	ldi	r19, 0x13	; 19
    4662:	ce 01       	movw	r24, r28
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	f1 f7       	brne	.-4      	; 0x4664 <test_mode+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4668:	21 50       	subi	r18, 0x01	; 1
    466a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466c:	d1 f7       	brne	.-12     	; 0x4662 <test_mode+0xba>
	if( is_head_down() ) {
		head_down( FALSE )  ;
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
    466e:	08 94       	sec
    4670:	81 1c       	adc	r8, r1
    4672:	91 1c       	adc	r9, r1
    4674:	88 ec       	ldi	r24, 0xC8	; 200
    4676:	88 16       	cp	r8, r24
    4678:	91 04       	cpc	r9, r1
    467a:	09 f0       	breq	.+2      	; 0x467e <test_mode+0xd6>
    467c:	bc cf       	rjmp	.-136    	; 0x45f6 <test_mode+0x4e>
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	a4 cf       	rjmp	.-184    	; 0x45ca <test_mode+0x22>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    468a:	b1 cf       	rjmp	.-158    	; 0x45ee <test_mode+0x46>

0000468c <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    468c:	4f 99       	sbic	0x09, 7	; 9
    468e:	05 c0       	rjmp	.+10     	; 0x469a <vacuum_test+0xe>
		
		printPgmString(PSTR("yes\n"));
    4690:	8c ee       	ldi	r24, 0xEC	; 236
    4692:	95 e0       	ldi	r25, 0x05	; 5
    4694:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    4698:	08 95       	ret
	} else {
		printPgmString(PSTR("no\n"));
    469a:	88 ee       	ldi	r24, 0xE8	; 232
    469c:	95 e0       	ldi	r25, 0x05	; 5
    469e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    46a2:	08 95       	ret

000046a4 <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    46a4:	e7 e0       	ldi	r30, 0x07	; 7
    46a6:	f1 e0       	ldi	r31, 0x01	; 1
    46a8:	80 81       	ld	r24, Z
    46aa:	80 68       	ori	r24, 0x80	; 128
    46ac:	80 83       	st	Z, r24
}
    46ae:	08 95       	ret

000046b0 <putdown_part>:
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    46b0:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    46b4:	88 23       	and	r24, r24
    46b6:	31 f5       	brne	.+76     	; 0x4704 <putdown_part+0x54>
		return GCSTATUS_FAILED_COMMAND;
	}

	// wait til head stops
	while( head_moving() );
    46b8:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
    46bc:	88 23       	and	r24, r24
    46be:	e1 f7       	brne	.-8      	; 0x46b8 <putdown_part+0x8>
    46c0:	28 ee       	ldi	r18, 0xE8	; 232
    46c2:	33 e0       	ldi	r19, 0x03	; 3
    46c4:	40 e9       	ldi	r20, 0x90	; 144
    46c6:	51 e0       	ldi	r21, 0x01	; 1
    46c8:	ca 01       	movw	r24, r20
    46ca:	01 97       	sbiw	r24, 0x01	; 1
    46cc:	f1 f7       	brne	.-4      	; 0x46ca <putdown_part+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ce:	21 50       	subi	r18, 0x01	; 1
    46d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d2:	d1 f7       	brne	.-12     	; 0x46c8 <putdown_part+0x18>
	}

#endif

	// push head down
	head_down( 1 );
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    46dc:	24 ec       	ldi	r18, 0xC4	; 196
    46de:	39 e0       	ldi	r19, 0x09	; 9
    46e0:	40 e9       	ldi	r20, 0x90	; 144
    46e2:	51 e0       	ldi	r21, 0x01	; 1
    46e4:	ca 01       	movw	r24, r20
    46e6:	01 97       	sbiw	r24, 0x01	; 1
    46e8:	f1 f7       	brne	.-4      	; 0x46e6 <putdown_part+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ea:	21 50       	subi	r18, 0x01	; 1
    46ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ee:	d1 f7       	brne	.-12     	; 0x46e4 <putdown_part+0x34>

	// settle after head down ( probably doesn't need it  )
	_delay_ms( 250 );

	// vacuum off
	vacuum ( 0 );
    46f0:	80 e0       	ldi	r24, 0x00	; 0
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>

	// head up
	head_down ( 0 ) ;
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    4700:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    4702:	08 95       	ret
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    4704:	85 e0       	ldi	r24, 0x05	; 5
    4706:	08 95       	ret

00004708 <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    4708:	80 91 55 05 	lds	r24, 0x0555
    470c:	88 23       	and	r24, r24
    470e:	41 f1       	breq	.+80     	; 0x4760 <tape_knock+0x58>
   		return ;
   	}


	while( head_moving() );
    4710:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
    4714:	88 23       	and	r24, r24
    4716:	e1 f7       	brne	.-8      	; 0x4710 <tape_knock+0x8>

	set_busy( TRUE );
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    471e:	80 91 08 01 	lds	r24, 0x0108
    4722:	8f 77       	andi	r24, 0x7F	; 127
    4724:	80 93 08 01 	sts	0x0108, r24
    4728:	20 ed       	ldi	r18, 0xD0	; 208
    472a:	37 e0       	ldi	r19, 0x07	; 7
    472c:	40 e9       	ldi	r20, 0x90	; 144
    472e:	51 e0       	ldi	r21, 0x01	; 1
    4730:	ca 01       	movw	r24, r20
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	f1 f7       	brne	.-4      	; 0x4732 <tape_knock+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4736:	21 50       	subi	r18, 0x01	; 1
    4738:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473a:	d1 f7       	brne	.-12     	; 0x4730 <tape_knock+0x28>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    473c:	80 91 08 01 	lds	r24, 0x0108
    4740:	80 68       	ori	r24, 0x80	; 128
    4742:	80 93 08 01 	sts	0x0108, r24
    4746:	20 ed       	ldi	r18, 0xD0	; 208
    4748:	37 e0       	ldi	r19, 0x07	; 7
    474a:	40 e9       	ldi	r20, 0x90	; 144
    474c:	51 e0       	ldi	r21, 0x01	; 1
    474e:	ca 01       	movw	r24, r20
    4750:	01 97       	sbiw	r24, 0x01	; 1
    4752:	f1 f7       	brne	.-4      	; 0x4750 <tape_knock+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4754:	21 50       	subi	r18, 0x01	; 1
    4756:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4758:	d1 f7       	brne	.-12     	; 0x474e <tape_knock+0x46>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <set_busy>
    4760:	08 95       	ret

00004762 <pickup_part>:
char pickup_part ( void ) 
{
	unsigned char failedCounter;

	// wait til head stops
	while( head_moving() );
    4762:	0e 94 63 19 	call	0x32c6	; 0x32c6 <head_moving>
    4766:	88 23       	and	r24, r24
    4768:	e1 f7       	brne	.-8      	; 0x4762 <pickup_part>

	// count number of pickup fails
	failedCounter = 0 ;

	if( is_head_down() ){
    476a:	0e 94 1c 20 	call	0x4038	; 0x4038 <is_head_down>
    476e:	88 23       	and	r24, r24
    4770:	11 f0       	breq	.+4      	; 0x4776 <pickup_part+0x14>
    4772:	85 e0       	ldi	r24, 0x05	; 5
    4774:	08 95       	ret

	//for(;;)  (oops!)
	{

		// advance part, waits til head has done
		tape_knock();
    4776:	0e 94 84 23 	call	0x4708	; 0x4708 <tape_knock>

		// vacuum on
		vacuum ( 1 );
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	0e 94 22 21 	call	0x4244	; 0x4244 <vacuum>

		// push head down
		head_down( 1 );
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    478a:	28 e8       	ldi	r18, 0x88	; 136
    478c:	33 e1       	ldi	r19, 0x13	; 19
    478e:	40 e9       	ldi	r20, 0x90	; 144
    4790:	51 e0       	ldi	r21, 0x01	; 1
    4792:	ca 01       	movw	r24, r20
    4794:	01 97       	sbiw	r24, 0x01	; 1
    4796:	f1 f7       	brne	.-4      	; 0x4794 <pickup_part+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4798:	21 50       	subi	r18, 0x01	; 1
    479a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479c:	d1 f7       	brne	.-12     	; 0x4792 <pickup_part+0x30>

		//settle (probably doesn't need this)
		_delay_ms( 500 );

		// head up
		head_down ( 0 ) ;
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	0e 94 25 20 	call	0x404a	; 0x404a <head_down>
    47a6:	80 e0       	ldi	r24, 0x00	; 0

	}

	return GCSTATUS_OK;

}
    47a8:	08 95       	ret

000047aa <millis>:

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    47aa:	20 91 88 06 	lds	r18, 0x0688
    47ae:	30 91 89 06 	lds	r19, 0x0689
    47b2:	40 91 8a 06 	lds	r20, 0x068A
    47b6:	50 91 8b 06 	lds	r21, 0x068B
    47ba:	2f 5f       	subi	r18, 0xFF	; 255
    47bc:	3f 4f       	sbci	r19, 0xFF	; 255
    47be:	4f 4f       	sbci	r20, 0xFF	; 255
    47c0:	5f 4f       	sbci	r21, 0xFF	; 255
    47c2:	20 93 88 06 	sts	0x0688, r18
    47c6:	30 93 89 06 	sts	0x0689, r19
    47ca:	40 93 8a 06 	sts	0x068A, r20
    47ce:	50 93 8b 06 	sts	0x068B, r21

	return counter;
}
    47d2:	b9 01       	movw	r22, r18
    47d4:	ca 01       	movw	r24, r20
    47d6:	08 95       	ret

000047d8 <digitalWrite>:

void digitalWrite( int a  ,int b)
{

}
    47d8:	08 95       	ret

000047da <USB_initEndPoint>:
 * Initialises a USB endpoint.
 * @param endpoint USB endpoint
 * @param address endpoint address
 */
void USB_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
    47da:	fc 01       	movw	r30, r24
	endpoint->address = address;
    47dc:	60 83       	st	Z, r22
	endpoint->sendToggle = bmSNDTOG0;
    47de:	80 e4       	ldi	r24, 0x40	; 64
    47e0:	84 83       	std	Z+4, r24	; 0x04
	endpoint->receiveToggle = bmRCVTOG0;
    47e2:	80 e1       	ldi	r24, 0x10	; 16
    47e4:	85 83       	std	Z+5, r24	; 0x05
}
    47e6:	08 95       	ret

000047e8 <USB_setEventHandler>:
 * Sets the global USB event callback function. Use this to catch global events like device connect/disconnect.
 * @param handler event handler function.
 */
void USB_setEventHandler(usb_eventHandler * handler)
{
	eventHandler = handler;
    47e8:	90 93 87 06 	sts	0x0687, r25
    47ec:	80 93 86 06 	sts	0x0686, r24
}
    47f0:	08 95       	ret

000047f2 <USB_fireEvent>:
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    47f2:	e0 91 86 06 	lds	r30, 0x0686
    47f6:	f0 91 87 06 	lds	r31, 0x0687
    47fa:	19 95       	eicall
}
    47fc:	08 95       	ret

000047fe <usb_getUsbTaskState>:

// private
uint8_t usb_getUsbTaskState()
{
	return (usb_task_state);
}
    47fe:	80 91 00 02 	lds	r24, 0x0200
    4802:	08 95       	ret

00004804 <usb_setUsbTaskState>:

// private
void usb_setUsbTaskState(uint8_t state)
{
	usb_task_state = state;
    4804:	80 93 00 02 	sts	0x0200, r24
}
    4808:	08 95       	ret

0000480a <usb_getDevice>:
 * as address zero is reserver).
 * @param address USB device address
 * @return USB device struct or NULL on failure (address out of range)
 */
usb_device * usb_getDevice(uint8_t address)
{
    480a:	98 2f       	mov	r25, r24
	if (address>USB_NUMDEVICES+1) return NULL;
    480c:	84 30       	cpi	r24, 0x04	; 4
    480e:	40 f4       	brcc	.+16     	; 0x4820 <usb_getDevice+0x16>

	return &(deviceTable[address]);
    4810:	86 e1       	ldi	r24, 0x16	; 22
    4812:	98 9f       	mul	r25, r24
    4814:	90 01       	movw	r18, r0
    4816:	11 24       	eor	r1, r1
    4818:	2c 54       	subi	r18, 0x4C	; 76
    481a:	39 4f       	sbci	r19, 0xF9	; 249
}
    481c:	c9 01       	movw	r24, r18
    481e:	08 95       	ret
 * @param address USB device address
 * @return USB device struct or NULL on failure (address out of range)
 */
usb_device * usb_getDevice(uint8_t address)
{
	if (address>USB_NUMDEVICES+1) return NULL;
    4820:	20 e0       	ldi	r18, 0x00	; 0
    4822:	30 e0       	ldi	r19, 0x00	; 0

	return &(deviceTable[address]);
}
    4824:	c9 01       	movw	r24, r18
    4826:	08 95       	ret

00004828 <USB_write>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes written, or error code in case of failure.
 */
int USB_write(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data)
{
    4828:	2f 92       	push	r2
    482a:	3f 92       	push	r3
    482c:	4f 92       	push	r4
    482e:	5f 92       	push	r5
    4830:	6f 92       	push	r6
    4832:	7f 92       	push	r7
    4834:	8f 92       	push	r8
    4836:	9f 92       	push	r9
    4838:	af 92       	push	r10
    483a:	bf 92       	push	r11
    483c:	cf 92       	push	r12
    483e:	df 92       	push	r13
    4840:	ef 92       	push	r14
    4842:	ff 92       	push	r15
    4844:	0f 93       	push	r16
    4846:	1f 93       	push	r17
    4848:	cf 93       	push	r28
    484a:	df 93       	push	r29
    484c:	fc 01       	movw	r30, r24
    484e:	7b 01       	movw	r14, r22
    4850:	ea 01       	movw	r28, r20
    4852:	02 2f       	mov	r16, r18
    4854:	93 2e       	mov	r9, r19
	uint8_t rcode = 0, retry_count;

	// Set device address.
	max3421e_write(MAX_REG_PERADDR, device->address);
    4856:	80 ee       	ldi	r24, 0xE0	; 224
    4858:	60 81       	ld	r22, Z
    485a:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    485e:	80 91 88 06 	lds	r24, 0x0688
    4862:	90 91 89 06 	lds	r25, 0x0689
    4866:	a0 91 8a 06 	lds	r26, 0x068A
    486a:	b0 91 8b 06 	lds	r27, 0x068B
    486e:	01 96       	adiw	r24, 0x01	; 1
    4870:	a1 1d       	adc	r26, r1
    4872:	b1 1d       	adc	r27, r1
    4874:	80 93 88 06 	sts	0x0688, r24
    4878:	90 93 89 06 	sts	0x0689, r25
    487c:	a0 93 8a 06 	sts	0x068A, r26
    4880:	b0 93 8b 06 	sts	0x068B, r27

	unsigned int bytes_tosend, nak_count;
	unsigned int bytes_left = length;
	unsigned int nak_limit = USB_NAK_LIMIT;

	uint32_t timeout = millis() + USB_XFER_TIMEOUT;
    4884:	28 e8       	ldi	r18, 0x88	; 136
    4886:	a2 2e       	mov	r10, r18
    4888:	23 e1       	ldi	r18, 0x13	; 19
    488a:	b2 2e       	mov	r11, r18
    488c:	c1 2c       	mov	r12, r1
    488e:	d1 2c       	mov	r13, r1
    4890:	a8 0e       	add	r10, r24
    4892:	b9 1e       	adc	r11, r25
    4894:	ca 1e       	adc	r12, r26
    4896:	db 1e       	adc	r13, r27

	uint8_t maxPacketSize = endpoint->maxPacketSize;
    4898:	f7 01       	movw	r30, r14
    489a:	12 81       	ldd	r17, Z+2	; 0x02

	// If maximum packet size is not set, return.
	if (!maxPacketSize) return 0xFE;
    489c:	11 23       	and	r17, r17
    489e:	b1 f4       	brne	.+44     	; 0x48cc <USB_write+0xa4>
    48a0:	ce ef       	ldi	r28, 0xFE	; 254
    48a2:	d0 e0       	ldi	r29, 0x00	; 0

	endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle

	// Should be 0 in all cases.
	return (rcode);
}
    48a4:	ce 01       	movw	r24, r28
    48a6:	df 91       	pop	r29
    48a8:	cf 91       	pop	r28
    48aa:	1f 91       	pop	r17
    48ac:	0f 91       	pop	r16
    48ae:	ff 90       	pop	r15
    48b0:	ef 90       	pop	r14
    48b2:	df 90       	pop	r13
    48b4:	cf 90       	pop	r12
    48b6:	bf 90       	pop	r11
    48b8:	af 90       	pop	r10
    48ba:	9f 90       	pop	r9
    48bc:	8f 90       	pop	r8
    48be:	7f 90       	pop	r7
    48c0:	6f 90       	pop	r6
    48c2:	5f 90       	pop	r5
    48c4:	4f 90       	pop	r4
    48c6:	3f 90       	pop	r3
    48c8:	2f 90       	pop	r2
    48ca:	08 95       	ret
	uint8_t maxPacketSize = endpoint->maxPacketSize;

	// If maximum packet size is not set, return.
	if (!maxPacketSize) return 0xFE;

	max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value
    48cc:	88 ee       	ldi	r24, 0xE8	; 232
    48ce:	f7 01       	movw	r30, r14
    48d0:	64 81       	ldd	r22, Z+4	; 0x04
    48d2:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

	while (bytes_left)
    48d6:	20 97       	sbiw	r28, 0x00	; 0
    48d8:	09 f4       	brne	.+2      	; 0x48dc <USB_write+0xb4>
    48da:	a1 c0       	rjmp	.+322    	; 0x4a1e <USB_write+0x1f6>
    48dc:	21 2e       	mov	r2, r17
    48de:	33 24       	eor	r3, r3
    48e0:	80 2f       	mov	r24, r16
    48e2:	99 2d       	mov	r25, r9
    48e4:	9c 01       	movw	r18, r24
    48e6:	49 01       	movw	r8, r18
    48e8:	2e 01       	movw	r4, r28
	{
		retry_count = 0;
		nak_count = 0;

		bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    48ea:	82 01       	movw	r16, r4
    48ec:	24 14       	cp	r2, r4
    48ee:	35 04       	cpc	r3, r5
    48f0:	08 f4       	brcc	.+2      	; 0x48f4 <USB_write+0xcc>
    48f2:	93 c0       	rjmp	.+294    	; 0x4a1a <USB_write+0x1f2>

		// Filling output FIFO
		max3421e_writeMultiple(MAX_REG_SNDFIFO, bytes_tosend, data_p);
    48f4:	60 2e       	mov	r6, r16
    48f6:	80 e1       	ldi	r24, 0x10	; 16
    48f8:	60 2f       	mov	r22, r16
    48fa:	a4 01       	movw	r20, r8
    48fc:	0e 94 15 2a 	call	0x542a	; 0x542a <max3421e_writeMultiple>

		// Set number of bytes to send.
		max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    4900:	88 e3       	ldi	r24, 0x38	; 56
    4902:	60 2f       	mov	r22, r16
    4904:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

		// Dispatch packet.
		max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address));
    4908:	f7 01       	movw	r30, r14
    490a:	60 81       	ld	r22, Z
    490c:	60 62       	ori	r22, 0x20	; 32
    490e:	80 ef       	ldi	r24, 0xF0	; 240
    4910:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

		// Wait for completion.
		while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    4914:	88 ec       	ldi	r24, 0xC8	; 200
    4916:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    491a:	87 ff       	sbrs	r24, 7
    491c:	fb cf       	rjmp	.-10     	; 0x4914 <USB_write+0xec>

		// Clear IRQ.
		max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    491e:	88 ec       	ldi	r24, 0xC8	; 200
    4920:	60 e8       	ldi	r22, 0x80	; 128
    4922:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

		rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4926:	88 ef       	ldi	r24, 0xF8	; 248
    4928:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    492c:	28 2f       	mov	r18, r24
    492e:	2f 70       	andi	r18, 0x0F	; 15

		while (rcode && (timeout > millis()))
    4930:	09 f4       	brne	.+2      	; 0x4934 <USB_write+0x10c>
    4932:	65 c0       	rjmp	.+202    	; 0x49fe <USB_write+0x1d6>

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4934:	80 91 88 06 	lds	r24, 0x0688
    4938:	90 91 89 06 	lds	r25, 0x0689
    493c:	a0 91 8a 06 	lds	r26, 0x068A
    4940:	b0 91 8b 06 	lds	r27, 0x068B
    4944:	01 96       	adiw	r24, 0x01	; 1
    4946:	a1 1d       	adc	r26, r1
    4948:	b1 1d       	adc	r27, r1
    494a:	80 93 88 06 	sts	0x0688, r24
    494e:	90 93 89 06 	sts	0x0689, r25
    4952:	a0 93 8a 06 	sts	0x068A, r26
    4956:	b0 93 8b 06 	sts	0x068B, r27
		// Clear IRQ.
		max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

		rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

		while (rcode && (timeout > millis()))
    495a:	8a 15       	cp	r24, r10
    495c:	9b 05       	cpc	r25, r11
    495e:	ac 05       	cpc	r26, r12
    4960:	bd 05       	cpc	r27, r13
    4962:	08 f0       	brcs	.+2      	; 0x4966 <USB_write+0x13e>
    4964:	4c c0       	rjmp	.+152    	; 0x49fe <USB_write+0x1d6>
    4966:	77 24       	eor	r7, r7
    4968:	c0 e0       	ldi	r28, 0x00	; 0
    496a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			switch (rcode)
    496c:	24 30       	cpi	r18, 0x04	; 4
    496e:	31 f0       	breq	.+12     	; 0x497c <USB_write+0x154>
    4970:	2e 30       	cpi	r18, 0x0E	; 14
    4972:	09 f4       	brne	.+2      	; 0x4976 <USB_write+0x14e>
    4974:	4a c0       	rjmp	.+148    	; 0x4a0a <USB_write+0x1e2>
				{
					return (rcode); //return TIMEOUT
				}
				break;
			default:
				return (rcode);
    4976:	c2 2f       	mov	r28, r18
    4978:	d0 e0       	ldi	r29, 0x00	; 0
    497a:	94 cf       	rjmp	.-216    	; 0x48a4 <USB_write+0x7c>
		while (rcode && (timeout > millis()))
		{
			switch (rcode)
			{
			case hrNAK:
				nak_count++;
    497c:	21 96       	adiw	r28, 0x01	; 1
				if (nak_limit && (nak_count == USB_NAK_LIMIT))
    497e:	fd e7       	ldi	r31, 0x7D	; 125
    4980:	c0 30       	cpi	r28, 0x00	; 0
    4982:	df 07       	cpc	r29, r31
    4984:	09 f4       	brne	.+2      	; 0x4988 <USB_write+0x160>
    4986:	56 c0       	rjmp	.+172    	; 0x4a34 <USB_write+0x20c>
			default:
				return (rcode);
			}

			// Process NAK according to Host out NAK bug.
			max3421e_write(MAX_REG_SNDBC, 0);
    4988:	88 e3       	ldi	r24, 0x38	; 56
    498a:	60 e0       	ldi	r22, 0x00	; 0
    498c:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
			max3421e_write(MAX_REG_SNDFIFO, *data_p);
    4990:	80 e1       	ldi	r24, 0x10	; 16
    4992:	f4 01       	movw	r30, r8
    4994:	60 81       	ld	r22, Z
    4996:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
			max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    499a:	88 e3       	ldi	r24, 0x38	; 56
    499c:	66 2d       	mov	r22, r6
    499e:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
			max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address)); //dispatch packet
    49a2:	f7 01       	movw	r30, r14
    49a4:	60 81       	ld	r22, Z
    49a6:	60 62       	ori	r22, 0x20	; 32
    49a8:	80 ef       	ldi	r24, 0xF0	; 240
    49aa:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

			// Wait for the completion interrupt.
			while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    49ae:	88 ec       	ldi	r24, 0xC8	; 200
    49b0:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    49b4:	87 ff       	sbrs	r24, 7
    49b6:	fb cf       	rjmp	.-10     	; 0x49ae <USB_write+0x186>

			// Clear interrupt.
			max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    49b8:	88 ec       	ldi	r24, 0xC8	; 200
    49ba:	60 e8       	ldi	r22, 0x80	; 128
    49bc:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    49c0:	88 ef       	ldi	r24, 0xF8	; 248
    49c2:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    49c6:	28 2f       	mov	r18, r24
    49c8:	2f 70       	andi	r18, 0x0F	; 15
		// Clear IRQ.
		max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

		rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

		while (rcode && (timeout > millis()))
    49ca:	c9 f0       	breq	.+50     	; 0x49fe <USB_write+0x1d6>

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    49cc:	80 91 88 06 	lds	r24, 0x0688
    49d0:	90 91 89 06 	lds	r25, 0x0689
    49d4:	a0 91 8a 06 	lds	r26, 0x068A
    49d8:	b0 91 8b 06 	lds	r27, 0x068B
    49dc:	01 96       	adiw	r24, 0x01	; 1
    49de:	a1 1d       	adc	r26, r1
    49e0:	b1 1d       	adc	r27, r1
    49e2:	80 93 88 06 	sts	0x0688, r24
    49e6:	90 93 89 06 	sts	0x0689, r25
    49ea:	a0 93 8a 06 	sts	0x068A, r26
    49ee:	b0 93 8b 06 	sts	0x068B, r27
		// Clear IRQ.
		max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

		rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

		while (rcode && (timeout > millis()))
    49f2:	8a 15       	cp	r24, r10
    49f4:	9b 05       	cpc	r25, r11
    49f6:	ac 05       	cpc	r26, r12
    49f8:	bd 05       	cpc	r27, r13
    49fa:	08 f4       	brcc	.+2      	; 0x49fe <USB_write+0x1d6>
    49fc:	b7 cf       	rjmp	.-146    	; 0x496c <USB_write+0x144>
			max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
		}

		bytes_left -= bytes_tosend;
    49fe:	40 1a       	sub	r4, r16
    4a00:	51 0a       	sbc	r5, r17
	// If maximum packet size is not set, return.
	if (!maxPacketSize) return 0xFE;

	max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

	while (bytes_left)
    4a02:	e9 f0       	breq	.+58     	; 0x4a3e <USB_write+0x216>

			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
		}

		bytes_left -= bytes_tosend;
		data_p += bytes_tosend;
    4a04:	80 0e       	add	r8, r16
    4a06:	91 1e       	adc	r9, r17
    4a08:	70 cf       	rjmp	.-288    	; 0x48ea <USB_write+0xc2>
				{
					return (rcode); //return NAK
				}
				break;
			case hrTIMEOUT:
				retry_count++;
    4a0a:	73 94       	inc	r7
				if (retry_count == USB_RETRY_LIMIT)
    4a0c:	83 e0       	ldi	r24, 0x03	; 3
    4a0e:	78 16       	cp	r7, r24
    4a10:	09 f0       	breq	.+2      	; 0x4a14 <USB_write+0x1ec>
    4a12:	ba cf       	rjmp	.-140    	; 0x4988 <USB_write+0x160>
    4a14:	ce e0       	ldi	r28, 0x0E	; 14
    4a16:	d0 e0       	ldi	r29, 0x00	; 0
    4a18:	45 cf       	rjmp	.-374    	; 0x48a4 <USB_write+0x7c>
	while (bytes_left)
	{
		retry_count = 0;
		nak_count = 0;

		bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    4a1a:	81 01       	movw	r16, r2
    4a1c:	6b cf       	rjmp	.-298    	; 0x48f4 <USB_write+0xcc>
	// If maximum packet size is not set, return.
	if (!maxPacketSize) return 0xFE;

	max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

	while (bytes_left)
    4a1e:	c0 e0       	ldi	r28, 0x00	; 0
    4a20:	d0 e0       	ldi	r29, 0x00	; 0

		bytes_left -= bytes_tosend;
		data_p += bytes_tosend;
	}

	endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    4a22:	88 ef       	ldi	r24, 0xF8	; 248
    4a24:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    4a28:	85 fd       	sbrc	r24, 5
    4a2a:	07 c0       	rjmp	.+14     	; 0x4a3a <USB_write+0x212>
    4a2c:	80 e4       	ldi	r24, 0x40	; 64
    4a2e:	f7 01       	movw	r30, r14
    4a30:	84 83       	std	Z+4, r24	; 0x04
    4a32:	38 cf       	rjmp	.-400    	; 0x48a4 <USB_write+0x7c>
		{
			switch (rcode)
			{
			case hrNAK:
				nak_count++;
				if (nak_limit && (nak_count == USB_NAK_LIMIT))
    4a34:	c4 e0       	ldi	r28, 0x04	; 4
    4a36:	d0 e0       	ldi	r29, 0x00	; 0
    4a38:	35 cf       	rjmp	.-406    	; 0x48a4 <USB_write+0x7c>

		bytes_left -= bytes_tosend;
		data_p += bytes_tosend;
	}

	endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    4a3a:	80 e8       	ldi	r24, 0x80	; 128
    4a3c:	f8 cf       	rjmp	.-16     	; 0x4a2e <USB_write+0x206>

			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
		}

		bytes_left -= bytes_tosend;
		data_p += bytes_tosend;
    4a3e:	c2 2f       	mov	r28, r18
    4a40:	d0 e0       	ldi	r29, 0x00	; 0
    4a42:	ef cf       	rjmp	.-34     	; 0x4a22 <USB_write+0x1fa>

00004a44 <USB_bulkWrite>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int USB_bulkWrite(usb_device * device, uint16_t length, uint8_t * data)
{
    4a44:	fc 01       	movw	r30, r24
    4a46:	db 01       	movw	r26, r22
    4a48:	9a 01       	movw	r18, r20
	return USB_write(device, &(device->bulk_out) , length, data);
    4a4a:	3e 96       	adiw	r30, 0x0e	; 14
    4a4c:	bf 01       	movw	r22, r30
    4a4e:	ad 01       	movw	r20, r26
    4a50:	0e 94 14 24 	call	0x4828	; 0x4828 <USB_write>
}
    4a54:	08 95       	ret

00004a56 <usb_dispatchPacket>:

	return &(deviceTable[address]);
}

int usb_dispatchPacket(uint8_t token, usb_endpoint * endpoint, unsigned int nakLimit)
{
    4a56:	8f 92       	push	r8
    4a58:	9f 92       	push	r9
    4a5a:	af 92       	push	r10
    4a5c:	bf 92       	push	r11
    4a5e:	cf 92       	push	r12
    4a60:	df 92       	push	r13
    4a62:	ef 92       	push	r14
    4a64:	ff 92       	push	r15
    4a66:	0f 93       	push	r16
    4a68:	1f 93       	push	r17
    4a6a:	cf 93       	push	r28
    4a6c:	df 93       	push	r29
    4a6e:	c8 2e       	mov	r12, r24
    4a70:	5b 01       	movw	r10, r22
    4a72:	4a 01       	movw	r8, r20

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4a74:	80 91 88 06 	lds	r24, 0x0688
    4a78:	90 91 89 06 	lds	r25, 0x0689
    4a7c:	a0 91 8a 06 	lds	r26, 0x068A
    4a80:	b0 91 8b 06 	lds	r27, 0x068B
    4a84:	7c 01       	movw	r14, r24
    4a86:	8d 01       	movw	r16, r26
    4a88:	01 96       	adiw	r24, 0x01	; 1
    4a8a:	a1 1d       	adc	r26, r1
    4a8c:	b1 1d       	adc	r27, r1
	return &(deviceTable[address]);
}

int usb_dispatchPacket(uint8_t token, usb_endpoint * endpoint, unsigned int nakLimit)
{
	uint32_t timeout = millis() + USB_XFER_TIMEOUT;
    4a8e:	29 e8       	ldi	r18, 0x89	; 137
    4a90:	33 e1       	ldi	r19, 0x13	; 19
    4a92:	40 e0       	ldi	r20, 0x00	; 0
    4a94:	50 e0       	ldi	r21, 0x00	; 0
    4a96:	e2 0e       	add	r14, r18
    4a98:	f3 1e       	adc	r15, r19
    4a9a:	04 1f       	adc	r16, r20
    4a9c:	15 1f       	adc	r17, r21
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	c0 e0       	ldi	r28, 0x00	; 0
    4aa2:	d0 e0       	ldi	r29, 0x00	; 0
    4aa4:	dd 24       	eor	r13, r13

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4aa6:	01 96       	adiw	r24, 0x01	; 1
    4aa8:	a1 1d       	adc	r26, r1
    4aaa:	b1 1d       	adc	r27, r1
    4aac:	80 93 88 06 	sts	0x0688, r24
    4ab0:	90 93 89 06 	sts	0x0689, r25
    4ab4:	a0 93 8a 06 	sts	0x068A, r26
    4ab8:	b0 93 8b 06 	sts	0x068B, r27
	uint8_t tmpdata;
	uint8_t rcode = 0;
	unsigned int nak_count = 0;
	char retry_count = 0;

	while (timeout > millis())
    4abc:	8e 15       	cp	r24, r14
    4abe:	9f 05       	cpc	r25, r15
    4ac0:	a0 07       	cpc	r26, r16
    4ac2:	b1 07       	cpc	r27, r17
    4ac4:	08 f0       	brcs	.+2      	; 0x4ac8 <usb_dispatchPacket+0x72>
    4ac6:	4c c0       	rjmp	.+152    	; 0x4b60 <usb_dispatchPacket+0x10a>
	{
		// Analyze transfer result.

		// Launch the transfer.
		max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
    4ac8:	f5 01       	movw	r30, r10
    4aca:	60 81       	ld	r22, Z
    4acc:	6c 29       	or	r22, r12
    4ace:	80 ef       	ldi	r24, 0xF0	; 240
    4ad0:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4ad4:	80 91 88 06 	lds	r24, 0x0688
    4ad8:	90 91 89 06 	lds	r25, 0x0689
    4adc:	a0 91 8a 06 	lds	r26, 0x068A
    4ae0:	b0 91 8b 06 	lds	r27, 0x068B
    4ae4:	01 96       	adiw	r24, 0x01	; 1
    4ae6:	a1 1d       	adc	r26, r1
    4ae8:	b1 1d       	adc	r27, r1
    4aea:	80 93 88 06 	sts	0x0688, r24
    4aee:	90 93 89 06 	sts	0x0689, r25
    4af2:	a0 93 8a 06 	sts	0x068A, r26
    4af6:	b0 93 8b 06 	sts	0x068B, r27
		// Launch the transfer.
		max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
		rcode = 0xff;

		// Wait for interrupt
		while (timeout > millis())
    4afa:	8e 15       	cp	r24, r14
    4afc:	9f 05       	cpc	r25, r15
    4afe:	a0 07       	cpc	r26, r16
    4b00:	b1 07       	cpc	r27, r17
    4b02:	08 f0       	brcs	.+2      	; 0x4b06 <usb_dispatchPacket+0xb0>
    4b04:	50 c0       	rjmp	.+160    	; 0x4ba6 <usb_dispatchPacket+0x150>
		{
			tmpdata = max3421e_read(MAX_REG_HIRQ);
    4b06:	88 ec       	ldi	r24, 0xC8	; 200
    4b08:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
			if (tmpdata & bmHXFRDNIRQ)
    4b0c:	87 ff       	sbrs	r24, 7
    4b0e:	e2 cf       	rjmp	.-60     	; 0x4ad4 <usb_dispatchPacket+0x7e>
			{
				// Clear the interrupt.
				max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4b10:	88 ec       	ldi	r24, 0xC8	; 200
    4b12:	60 e8       	ldi	r22, 0x80	; 128
    4b14:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
    4b18:	20 e0       	ldi	r18, 0x00	; 0

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4b1a:	80 91 88 06 	lds	r24, 0x0688
    4b1e:	90 91 89 06 	lds	r25, 0x0689
    4b22:	a0 91 8a 06 	lds	r26, 0x068A
    4b26:	b0 91 8b 06 	lds	r27, 0x068B
    4b2a:	01 96       	adiw	r24, 0x01	; 1
    4b2c:	a1 1d       	adc	r26, r1
    4b2e:	b1 1d       	adc	r27, r1
    4b30:	80 93 88 06 	sts	0x0688, r24
    4b34:	90 93 89 06 	sts	0x0689, r25
    4b38:	a0 93 8a 06 	sts	0x068A, r26
    4b3c:	b0 93 8b 06 	sts	0x068B, r27
		// Exit if timeout.
		if (rcode != 0x00)
			return (rcode);

		// Wait for HRSL
		while (timeout > millis())
    4b40:	8e 15       	cp	r24, r14
    4b42:	9f 05       	cpc	r25, r15
    4b44:	a0 07       	cpc	r26, r16
    4b46:	b1 07       	cpc	r27, r17
    4b48:	38 f4       	brcc	.+14     	; 0x4b58 <usb_dispatchPacket+0x102>
		{
			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4b4a:	88 ef       	ldi	r24, 0xF8	; 248
    4b4c:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    4b50:	28 2f       	mov	r18, r24
    4b52:	2f 70       	andi	r18, 0x0F	; 15
			if (rcode != hrBUSY)
    4b54:	21 30       	cpi	r18, 0x01	; 1
    4b56:	09 f3       	breq	.-62     	; 0x4b1a <usb_dispatchPacket+0xc4>
//			else
//				serialPrintf("busy!\n");
		}


		switch (rcode)
    4b58:	24 30       	cpi	r18, 0x04	; 4
    4b5a:	f1 f0       	breq	.+60     	; 0x4b98 <usb_dispatchPacket+0x142>
    4b5c:	2e 30       	cpi	r18, 0x0E	; 14
    4b5e:	79 f0       	breq	.+30     	; 0x4b7e <usb_dispatchPacket+0x128>
			default:
				return (rcode);
		}
	}

	return (rcode);
    4b60:	30 e0       	ldi	r19, 0x00	; 0
}
    4b62:	c9 01       	movw	r24, r18
    4b64:	df 91       	pop	r29
    4b66:	cf 91       	pop	r28
    4b68:	1f 91       	pop	r17
    4b6a:	0f 91       	pop	r16
    4b6c:	ff 90       	pop	r15
    4b6e:	ef 90       	pop	r14
    4b70:	df 90       	pop	r13
    4b72:	cf 90       	pop	r12
    4b74:	bf 90       	pop	r11
    4b76:	af 90       	pop	r10
    4b78:	9f 90       	pop	r9
    4b7a:	8f 90       	pop	r8
    4b7c:	08 95       	ret
				nak_count++;
				if (nak_count == nakLimit)
					return (rcode);
				break;
			case hrTIMEOUT:
				retry_count++;
    4b7e:	d3 94       	inc	r13
				if (retry_count == USB_RETRY_LIMIT)
    4b80:	f3 e0       	ldi	r31, 0x03	; 3
    4b82:	df 16       	cp	r13, r31
    4b84:	99 f0       	breq	.+38     	; 0x4bac <usb_dispatchPacket+0x156>
    4b86:	80 91 88 06 	lds	r24, 0x0688
    4b8a:	90 91 89 06 	lds	r25, 0x0689
    4b8e:	a0 91 8a 06 	lds	r26, 0x068A
    4b92:	b0 91 8b 06 	lds	r27, 0x068B
    4b96:	87 cf       	rjmp	.-242    	; 0x4aa6 <usb_dispatchPacket+0x50>


		switch (rcode)
		{
			case hrNAK:
				nak_count++;
    4b98:	21 96       	adiw	r28, 0x01	; 1
				if (nak_count == nakLimit)
    4b9a:	c8 15       	cp	r28, r8
    4b9c:	d9 05       	cpc	r29, r9
    4b9e:	99 f7       	brne	.-26     	; 0x4b86 <usb_dispatchPacket+0x130>
    4ba0:	24 e0       	ldi	r18, 0x04	; 4
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	de cf       	rjmp	.-68     	; 0x4b62 <usb_dispatchPacket+0x10c>
		// Launch the transfer.
		max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
		rcode = 0xff;

		// Wait for interrupt
		while (timeout > millis())
    4ba6:	2f ef       	ldi	r18, 0xFF	; 255
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	db cf       	rjmp	.-74     	; 0x4b62 <usb_dispatchPacket+0x10c>
				if (nak_count == nakLimit)
					return (rcode);
				break;
			case hrTIMEOUT:
				retry_count++;
				if (retry_count == USB_RETRY_LIMIT)
    4bac:	2e e0       	ldi	r18, 0x0E	; 14
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	d8 cf       	rjmp	.-80     	; 0x4b62 <usb_dispatchPacket+0x10c>

00004bb2 <USB_read>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int USB_read(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data, unsigned int nakLimit)
{
    4bb2:	6f 92       	push	r6
    4bb4:	7f 92       	push	r7
    4bb6:	8f 92       	push	r8
    4bb8:	9f 92       	push	r9
    4bba:	af 92       	push	r10
    4bbc:	bf 92       	push	r11
    4bbe:	cf 92       	push	r12
    4bc0:	df 92       	push	r13
    4bc2:	ef 92       	push	r14
    4bc4:	ff 92       	push	r15
    4bc6:	0f 93       	push	r16
    4bc8:	1f 93       	push	r17
    4bca:	cf 93       	push	r28
    4bcc:	df 93       	push	r29
    4bce:	fc 01       	movw	r30, r24
    4bd0:	7b 01       	movw	r14, r22
    4bd2:	3a 01       	movw	r6, r20
    4bd4:	69 01       	movw	r12, r18
    4bd6:	58 01       	movw	r10, r16
	uint16_t rcode, bytesRead;
	uint16_t maxPacketSize = endpoint->maxPacketSize;
    4bd8:	db 01       	movw	r26, r22
    4bda:	12 96       	adiw	r26, 0x02	; 2
    4bdc:	8d 90       	ld	r8, X+
    4bde:	9c 90       	ld	r9, X
    4be0:	13 97       	sbiw	r26, 0x03	; 3

	unsigned int totalTransferred = 0;

	// Set device address.
	max3421e_write(MAX_REG_PERADDR, device->address);
    4be2:	80 ee       	ldi	r24, 0xE0	; 224
    4be4:	60 81       	ld	r22, Z
    4be6:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

	// Set toggle value.
	max3421e_write(MAX_REG_HCTL, endpoint->receiveToggle);
    4bea:	88 ee       	ldi	r24, 0xE8	; 232
    4bec:	f7 01       	movw	r30, r14
    4bee:	65 81       	ldd	r22, Z+5	; 0x05
    4bf0:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
    4bf4:	c0 e0       	ldi	r28, 0x00	; 0
    4bf6:	d0 e0       	ldi	r29, 0x00	; 0

	while (1)
	{

		// Start IN transfer
		rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	b7 01       	movw	r22, r14
    4bfc:	a5 01       	movw	r20, r10
    4bfe:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <usb_dispatchPacket>

		if (rcode)
    4c02:	89 2b       	or	r24, r25
    4c04:	d1 f5       	brne	.+116    	; 0x4c7a <USB_read+0xc8>

			return -1;
		}

		// Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
		if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    4c06:	88 ec       	ldi	r24, 0xC8	; 200
    4c08:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    4c0c:	82 ff       	sbrs	r24, 2
    4c0e:	38 c0       	rjmp	.+112    	; 0x4c80 <USB_read+0xce>
			// TODO: the absence of RCVDAVIRQ indicates a toggle error. Need to add handling for that.
			return -2;
		}

		// Obtain the number of bytes in FIFO.
		bytesRead = max3421e_read(MAX_REG_RCVBC);
    4c10:	80 e3       	ldi	r24, 0x30	; 48
    4c12:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    4c16:	68 2f       	mov	r22, r24
    4c18:	08 2f       	mov	r16, r24
    4c1a:	10 e0       	ldi	r17, 0x00	; 0

		// Read the data from the FIFO.
		data = max3421e_readMultiple(MAX_REG_RCVFIFO, bytesRead, data);
    4c1c:	88 e0       	ldi	r24, 0x08	; 8
    4c1e:	a6 01       	movw	r20, r12
    4c20:	0e 94 c1 29 	call	0x5382	; 0x5382 <max3421e_readMultiple>
    4c24:	6c 01       	movw	r12, r24

		// Clear the interrupt to free the buffer.
		max3421e_write(MAX_REG_HIRQ, bmRCVDAVIRQ);
    4c26:	88 ec       	ldi	r24, 0xC8	; 200
    4c28:	64 e0       	ldi	r22, 0x04	; 4
    4c2a:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

		totalTransferred += bytesRead;
    4c2e:	c0 0f       	add	r28, r16
    4c30:	d1 1f       	adc	r29, r17

		// Check if we're done reading. Either we've received a 'short' packet (<maxPacketSize), or the
		// desired number of bytes has been transferred.
		if ((bytesRead < maxPacketSize) || (totalTransferred >= length))
    4c32:	08 15       	cp	r16, r8
    4c34:	19 05       	cpc	r17, r9
    4c36:	18 f0       	brcs	.+6      	; 0x4c3e <USB_read+0x8c>
    4c38:	c6 15       	cp	r28, r6
    4c3a:	d7 05       	cpc	r29, r7
    4c3c:	e8 f2       	brcs	.-70     	; 0x4bf8 <USB_read+0x46>
		{
			// Remember the toggle value for the next transfer.
			if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
    4c3e:	88 ef       	ldi	r24, 0xF8	; 248
    4c40:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    4c44:	84 ff       	sbrs	r24, 4
    4c46:	15 c0       	rjmp	.+42     	; 0x4c72 <USB_read+0xc0>
				endpoint->receiveToggle = bmRCVTOG1;
    4c48:	80 e2       	ldi	r24, 0x20	; 32
    4c4a:	d7 01       	movw	r26, r14
    4c4c:	15 96       	adiw	r26, 0x05	; 5
    4c4e:	8c 93       	st	X, r24
			break;
		}
	}

	// Report success.
	return totalTransferred;
    4c50:	9e 01       	movw	r18, r28
}
    4c52:	c9 01       	movw	r24, r18
    4c54:	df 91       	pop	r29
    4c56:	cf 91       	pop	r28
    4c58:	1f 91       	pop	r17
    4c5a:	0f 91       	pop	r16
    4c5c:	ff 90       	pop	r15
    4c5e:	ef 90       	pop	r14
    4c60:	df 90       	pop	r13
    4c62:	cf 90       	pop	r12
    4c64:	bf 90       	pop	r11
    4c66:	af 90       	pop	r10
    4c68:	9f 90       	pop	r9
    4c6a:	8f 90       	pop	r8
    4c6c:	7f 90       	pop	r7
    4c6e:	6f 90       	pop	r6
    4c70:	08 95       	ret
		{
			// Remember the toggle value for the next transfer.
			if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
				endpoint->receiveToggle = bmRCVTOG1;
			else
				endpoint->receiveToggle = bmRCVTOG0;
    4c72:	80 e1       	ldi	r24, 0x10	; 16
    4c74:	f7 01       	movw	r30, r14
    4c76:	85 83       	std	Z+5, r24	; 0x05
    4c78:	eb cf       	rjmp	.-42     	; 0x4c50 <USB_read+0x9e>
	{

		// Start IN transfer
		rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);

		if (rcode)
    4c7a:	2f ef       	ldi	r18, 0xFF	; 255
    4c7c:	3f ef       	ldi	r19, 0xFF	; 255
    4c7e:	e9 cf       	rjmp	.-46     	; 0x4c52 <USB_read+0xa0>

			return -1;
		}

		// Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
		if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    4c80:	2e ef       	ldi	r18, 0xFE	; 254
    4c82:	3f ef       	ldi	r19, 0xFF	; 255
    4c84:	e6 cf       	rjmp	.-52     	; 0x4c52 <USB_read+0xa0>

00004c86 <USB_ctrlData>:
 * @param direction true for input, false for output.
 * @param length number of bytes to transfer.
 * @param data data buffer.
 */
uint8_t USB_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
    4c86:	0f 93       	push	r16
    4c88:	1f 93       	push	r17
    4c8a:	fc 01       	movw	r30, r24
	if (direction)
    4c8c:	66 23       	and	r22, r22
    4c8e:	51 f4       	brne	.+20     	; 0x4ca4 <USB_ctrlData+0x1e>
		return USB_read(device, &(device->control), length, data, USB_NAK_LIMIT);

	} else
	{
		// OUT transfer
		device->control.sendToggle = bmSNDTOG1;
    4c90:	80 e8       	ldi	r24, 0x80	; 128
    4c92:	86 83       	std	Z+6, r24	; 0x06
		return USB_write(device, &(device->control), length, data);
    4c94:	cf 01       	movw	r24, r30
    4c96:	32 96       	adiw	r30, 0x02	; 2
    4c98:	bf 01       	movw	r22, r30
    4c9a:	0e 94 14 24 	call	0x4828	; 0x4828 <USB_write>
	}
}
    4c9e:	1f 91       	pop	r17
    4ca0:	0f 91       	pop	r16
    4ca2:	08 95       	ret
uint8_t USB_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
	if (direction)
	{
		// IN transfer
		device->control.receiveToggle = bmRCVTOG1;
    4ca4:	80 e2       	ldi	r24, 0x20	; 32
    4ca6:	87 83       	std	Z+7, r24	; 0x07
		return USB_read(device, &(device->control), length, data, USB_NAK_LIMIT);
    4ca8:	cf 01       	movw	r24, r30
    4caa:	32 96       	adiw	r30, 0x02	; 2
    4cac:	bf 01       	movw	r22, r30
    4cae:	00 e0       	ldi	r16, 0x00	; 0
    4cb0:	1d e7       	ldi	r17, 0x7D	; 125
    4cb2:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <USB_read>
	{
		// OUT transfer
		device->control.sendToggle = bmSNDTOG1;
		return USB_write(device, &(device->control), length, data);
	}
}
    4cb6:	1f 91       	pop	r17
    4cb8:	0f 91       	pop	r16
    4cba:	08 95       	ret

00004cbc <USB_controlRequest>:
		uint8_t valueLow,
		uint8_t valueHigh,
		uint16_t index,
		uint16_t length,
		uint8_t * data)
{
    4cbc:	5f 92       	push	r5
    4cbe:	6f 92       	push	r6
    4cc0:	7f 92       	push	r7
    4cc2:	8f 92       	push	r8
    4cc4:	9f 92       	push	r9
    4cc6:	af 92       	push	r10
    4cc8:	bf 92       	push	r11
    4cca:	cf 92       	push	r12
    4ccc:	df 92       	push	r13
    4cce:	ef 92       	push	r14
    4cd0:	ff 92       	push	r15
    4cd2:	0f 93       	push	r16
    4cd4:	1f 93       	push	r17
    4cd6:	df 93       	push	r29
    4cd8:	cf 93       	push	r28
    4cda:	cd b7       	in	r28, 0x3d	; 61
    4cdc:	de b7       	in	r29, 0x3e	; 62
    4cde:	28 97       	sbiw	r28, 0x08	; 8
    4ce0:	0f b6       	in	r0, 0x3f	; 63
    4ce2:	f8 94       	cli
    4ce4:	de bf       	out	0x3e, r29	; 62
    4ce6:	0f be       	out	0x3f, r0	; 63
    4ce8:	cd bf       	out	0x3d, r28	; 61
    4cea:	3c 01       	movw	r6, r24
    4cec:	56 2e       	mov	r5, r22
    4cee:	14 2f       	mov	r17, r20
    4cf0:	82 2e       	mov	r8, r18
	boolean direction = false; //request direction, IN or OUT
	uint8_t rcode;
	usb_setupPacket setup_pkt;

	// Set device address.
	max3421e_write(MAX_REG_PERADDR, device->address);
    4cf2:	80 ee       	ldi	r24, 0xE0	; 224
    4cf4:	f3 01       	movw	r30, r6
    4cf6:	60 81       	ld	r22, Z
    4cf8:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

	if (requestType & 0x80)
		direction = true; //determine request direction

	// Build setup packet.
	setup_pkt.bmRequestType = requestType;
    4cfc:	59 82       	std	Y+1, r5	; 0x01
	setup_pkt.bRequest = request;
    4cfe:	1a 83       	std	Y+2, r17	; 0x02
	setup_pkt.wValue = valueLow | (valueHigh << 8);
    4d00:	90 2f       	mov	r25, r16
    4d02:	80 e0       	ldi	r24, 0x00	; 0
    4d04:	99 24       	eor	r9, r9
    4d06:	88 29       	or	r24, r8
    4d08:	99 29       	or	r25, r9
    4d0a:	9c 83       	std	Y+4, r25	; 0x04
    4d0c:	8b 83       	std	Y+3, r24	; 0x03
	setup_pkt.wIndex = index;
    4d0e:	fe 82       	std	Y+6, r15	; 0x06
    4d10:	ed 82       	std	Y+5, r14	; 0x05
	setup_pkt.wLength = length;
    4d12:	d8 86       	std	Y+8, r13	; 0x08
    4d14:	cf 82       	std	Y+7, r12	; 0x07

	// Write setup packet to the FIFO and dispatch
	max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
    4d16:	80 e2       	ldi	r24, 0x20	; 32
    4d18:	68 e0       	ldi	r22, 0x08	; 8
    4d1a:	ae 01       	movw	r20, r28
    4d1c:	4f 5f       	subi	r20, 0xFF	; 255
    4d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d20:	0e 94 15 2a 	call	0x542a	; 0x542a <max3421e_writeMultiple>
	rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);
    4d24:	83 01       	movw	r16, r6
    4d26:	0e 5f       	subi	r16, 0xFE	; 254
    4d28:	1f 4f       	sbci	r17, 0xFF	; 255
    4d2a:	80 e1       	ldi	r24, 0x10	; 16
    4d2c:	b8 01       	movw	r22, r16
    4d2e:	40 e0       	ldi	r20, 0x00	; 0
    4d30:	5d e7       	ldi	r21, 0x7D	; 125
    4d32:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <usb_dispatchPacket>

	// Print error in case of failure.
	if (rcode)
    4d36:	88 23       	and	r24, r24
    4d38:	c9 f0       	breq	.+50     	; 0x4d6c <USB_controlRequest+0xb0>
    4d3a:	2f ef       	ldi	r18, 0xFF	; 255
    4d3c:	3f ef       	ldi	r19, 0xFF	; 255

	if (rcode)
		return -3;
	else
		return 0;
}
    4d3e:	c9 01       	movw	r24, r18
    4d40:	28 96       	adiw	r28, 0x08	; 8
    4d42:	0f b6       	in	r0, 0x3f	; 63
    4d44:	f8 94       	cli
    4d46:	de bf       	out	0x3e, r29	; 62
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	cd bf       	out	0x3d, r28	; 61
    4d4c:	cf 91       	pop	r28
    4d4e:	df 91       	pop	r29
    4d50:	1f 91       	pop	r17
    4d52:	0f 91       	pop	r16
    4d54:	ff 90       	pop	r15
    4d56:	ef 90       	pop	r14
    4d58:	df 90       	pop	r13
    4d5a:	cf 90       	pop	r12
    4d5c:	bf 90       	pop	r11
    4d5e:	af 90       	pop	r10
    4d60:	9f 90       	pop	r9
    4d62:	8f 90       	pop	r8
    4d64:	7f 90       	pop	r7
    4d66:	6f 90       	pop	r6
    4d68:	5f 90       	pop	r5
    4d6a:	08 95       	ret
	// Write setup packet to the FIFO and dispatch
	max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
	rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);

	// Print error in case of failure.
	if (rcode)
    4d6c:	f5 2c       	mov	r15, r5
    4d6e:	ff 1c       	adc	r15, r15
    4d70:	ff 24       	eor	r15, r15
    4d72:	ff 1c       	adc	r15, r15
//		serialPrintf("Setup packet error: 0x%02x\n", rcode);
		return -1;
	}

	// Data stage, if present
	if (data != NULL)
    4d74:	a1 14       	cp	r10, r1
    4d76:	b1 04       	cpc	r11, r1
    4d78:	31 f0       	breq	.+12     	; 0x4d86 <USB_controlRequest+0xca>
	{
		rcode = USB_ctrlData(device, direction, length, data);
    4d7a:	c3 01       	movw	r24, r6
    4d7c:	6f 2d       	mov	r22, r15
    4d7e:	a6 01       	movw	r20, r12
    4d80:	95 01       	movw	r18, r10
    4d82:	0e 94 43 26 	call	0x4c86	; 0x4c86 <USB_ctrlData>
			return -2;
		}
	}

	// Status stage.
	if (direction)
    4d86:	ff 20       	and	r15, r15
    4d88:	59 f0       	breq	.+22     	; 0x4da0 <USB_controlRequest+0xe4>
		rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
    4d8a:	80 ea       	ldi	r24, 0xA0	; 160
    4d8c:	b8 01       	movw	r22, r16
    4d8e:	40 e0       	ldi	r20, 0x00	; 0
    4d90:	5d e7       	ldi	r21, 0x7D	; 125
    4d92:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <usb_dispatchPacket>
	else
		rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);

	if (rcode)
    4d96:	88 23       	and	r24, r24
    4d98:	51 f4       	brne	.+20     	; 0x4dae <USB_controlRequest+0xf2>
    4d9a:	20 e0       	ldi	r18, 0x00	; 0
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	cf cf       	rjmp	.-98     	; 0x4d3e <USB_controlRequest+0x82>

	// Status stage.
	if (direction)
		rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
	else
		rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);
    4da0:	80 e8       	ldi	r24, 0x80	; 128
    4da2:	b8 01       	movw	r22, r16
    4da4:	40 e0       	ldi	r20, 0x00	; 0
    4da6:	5d e7       	ldi	r21, 0x7D	; 125
    4da8:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <usb_dispatchPacket>
    4dac:	f4 cf       	rjmp	.-24     	; 0x4d96 <USB_controlRequest+0xda>

	if (rcode)
    4dae:	2d ef       	ldi	r18, 0xFD	; 253
    4db0:	3f ef       	ldi	r19, 0xFF	; 255
    4db2:	c5 cf       	rjmp	.-118    	; 0x4d3e <USB_controlRequest+0x82>

00004db4 <USB_setConfiguration>:
 * @param device USB device
 * @param configuration configuration number to switch to
 * @param error code. Negative on error or zero on success.
 */
int USB_setConfiguration(usb_device * device, uint8_t configuration)
{
    4db4:	af 92       	push	r10
    4db6:	bf 92       	push	r11
    4db8:	cf 92       	push	r12
    4dba:	df 92       	push	r13
    4dbc:	ef 92       	push	r14
    4dbe:	ff 92       	push	r15
    4dc0:	0f 93       	push	r16
    4dc2:	26 2f       	mov	r18, r22
    return(USB_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, configuration, 0x00, 0x0000, 0x0000, NULL));
    4dc4:	60 e0       	ldi	r22, 0x00	; 0
    4dc6:	49 e0       	ldi	r20, 0x09	; 9
    4dc8:	00 e0       	ldi	r16, 0x00	; 0
    4dca:	ee 24       	eor	r14, r14
    4dcc:	ff 24       	eor	r15, r15
    4dce:	cc 24       	eor	r12, r12
    4dd0:	dd 24       	eor	r13, r13
    4dd2:	aa 24       	eor	r10, r10
    4dd4:	bb 24       	eor	r11, r11
    4dd6:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <USB_controlRequest>
}
    4dda:	0f 91       	pop	r16
    4ddc:	ff 90       	pop	r15
    4dde:	ef 90       	pop	r14
    4de0:	df 90       	pop	r13
    4de2:	cf 90       	pop	r12
    4de4:	bf 90       	pop	r11
    4de6:	af 90       	pop	r10
    4de8:	08 95       	ret

00004dea <USB_setAddress>:
 * @param device the 'zero' usb device (address 0, endpoint 0)
 * @param address the address to set for the newly connected device
 * @return 0 in case of success, error code otherwise
 */
int USB_setAddress(usb_device * device, uint8_t address)
{
    4dea:	af 92       	push	r10
    4dec:	bf 92       	push	r11
    4dee:	cf 92       	push	r12
    4df0:	df 92       	push	r13
    4df2:	ef 92       	push	r14
    4df4:	ff 92       	push	r15
    4df6:	0f 93       	push	r16
    4df8:	26 2f       	mov	r18, r22
    return(USB_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
    4dfa:	60 e0       	ldi	r22, 0x00	; 0
    4dfc:	45 e0       	ldi	r20, 0x05	; 5
    4dfe:	00 e0       	ldi	r16, 0x00	; 0
    4e00:	ee 24       	eor	r14, r14
    4e02:	ff 24       	eor	r15, r15
    4e04:	cc 24       	eor	r12, r12
    4e06:	dd 24       	eor	r13, r13
    4e08:	aa 24       	eor	r10, r10
    4e0a:	bb 24       	eor	r11, r11
    4e0c:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <USB_controlRequest>
}
    4e10:	0f 91       	pop	r16
    4e12:	ff 90       	pop	r15
    4e14:	ef 90       	pop	r14
    4e16:	df 90       	pop	r13
    4e18:	cf 90       	pop	r12
    4e1a:	bf 90       	pop	r11
    4e1c:	af 90       	pop	r10
    4e1e:	08 95       	ret

00004e20 <USB_getConfigurationDescriptor>:
 * @param conf configuration number
 * @param length length of the data buffer. This method will not write beyond this boundary.
 * @return number of bytes read, or negative number in case of error.
 */
int USB_getConfigurationDescriptor(usb_device * device, uint8_t conf, uint16_t length, uint8_t * data)
{
    4e20:	4f 92       	push	r4
    4e22:	5f 92       	push	r5
    4e24:	6f 92       	push	r6
    4e26:	7f 92       	push	r7
    4e28:	8f 92       	push	r8
    4e2a:	9f 92       	push	r9
    4e2c:	af 92       	push	r10
    4e2e:	bf 92       	push	r11
    4e30:	cf 92       	push	r12
    4e32:	df 92       	push	r13
    4e34:	ef 92       	push	r14
    4e36:	ff 92       	push	r15
    4e38:	0f 93       	push	r16
    4e3a:	1f 93       	push	r17
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	4c 01       	movw	r8, r24
    4e42:	16 2f       	mov	r17, r22
    4e44:	3a 01       	movw	r6, r20
    4e46:	e9 01       	movw	r28, r18
	uint16_t descriptorLength;
	int rcode;

	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
    4e48:	60 e8       	ldi	r22, 0x80	; 128
    4e4a:	46 e0       	ldi	r20, 0x06	; 6
    4e4c:	21 2f       	mov	r18, r17
    4e4e:	02 e0       	ldi	r16, 0x02	; 2
    4e50:	ee 24       	eor	r14, r14
    4e52:	ff 24       	eor	r15, r15
    4e54:	34 e0       	ldi	r19, 0x04	; 4
    4e56:	c3 2e       	mov	r12, r19
    4e58:	d1 2c       	mov	r13, r1
    4e5a:	5e 01       	movw	r10, r28
    4e5c:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <USB_controlRequest>
	if (rcode) return -1;
    4e60:	89 2b       	or	r24, r25
    4e62:	a1 f0       	breq	.+40     	; 0x4e8c <USB_getConfigurationDescriptor+0x6c>
    4e64:	2f ef       	ldi	r18, 0xFF	; 255
    4e66:	3f ef       	ldi	r19, 0xFF	; 255
	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
	if (rcode) return -2;

	return length;
}
    4e68:	c9 01       	movw	r24, r18
    4e6a:	df 91       	pop	r29
    4e6c:	cf 91       	pop	r28
    4e6e:	1f 91       	pop	r17
    4e70:	0f 91       	pop	r16
    4e72:	ff 90       	pop	r15
    4e74:	ef 90       	pop	r14
    4e76:	df 90       	pop	r13
    4e78:	cf 90       	pop	r12
    4e7a:	bf 90       	pop	r11
    4e7c:	af 90       	pop	r10
    4e7e:	9f 90       	pop	r9
    4e80:	8f 90       	pop	r8
    4e82:	7f 90       	pop	r7
    4e84:	6f 90       	pop	r6
    4e86:	5f 90       	pop	r5
    4e88:	4f 90       	pop	r4
    4e8a:	08 95       	ret
	uint16_t descriptorLength;
	int rcode;

	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
	if (rcode) return -1;
    4e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e8e:	80 e0       	ldi	r24, 0x00	; 0
    4e90:	2a 81       	ldd	r18, Y+2	; 0x02
    4e92:	42 2e       	mov	r4, r18
    4e94:	55 24       	eor	r5, r5
    4e96:	48 2a       	or	r4, r24
    4e98:	59 2a       	or	r5, r25
    4e9a:	64 14       	cp	r6, r4
    4e9c:	75 04       	cpc	r7, r5
    4e9e:	08 f4       	brcc	.+2      	; 0x4ea2 <USB_getConfigurationDescriptor+0x82>
    4ea0:	23 01       	movw	r4, r6

	descriptorLength = (data[3] << 8) | data[2];
	if (descriptorLength<length) length = descriptorLength;

	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
    4ea2:	c4 01       	movw	r24, r8
    4ea4:	60 e8       	ldi	r22, 0x80	; 128
    4ea6:	46 e0       	ldi	r20, 0x06	; 6
    4ea8:	21 2f       	mov	r18, r17
    4eaa:	02 e0       	ldi	r16, 0x02	; 2
    4eac:	ee 24       	eor	r14, r14
    4eae:	ff 24       	eor	r15, r15
    4eb0:	62 01       	movw	r12, r4
    4eb2:	5e 01       	movw	r10, r28
    4eb4:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <USB_controlRequest>
	if (rcode) return -2;
    4eb8:	89 2b       	or	r24, r25
    4eba:	11 f4       	brne	.+4      	; 0x4ec0 <USB_getConfigurationDescriptor+0xa0>

	return length;
    4ebc:	92 01       	movw	r18, r4
    4ebe:	d4 cf       	rjmp	.-88     	; 0x4e68 <USB_getConfigurationDescriptor+0x48>
	descriptorLength = (data[3] << 8) | data[2];
	if (descriptorLength<length) length = descriptorLength;

	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
	if (rcode) return -2;
    4ec0:	2e ef       	ldi	r18, 0xFE	; 254
    4ec2:	3f ef       	ldi	r19, 0xFF	; 255
    4ec4:	d1 cf       	rjmp	.-94     	; 0x4e68 <USB_getConfigurationDescriptor+0x48>

00004ec6 <USB_getDeviceDescriptor>:
 * @param device USB device
 * @param descriptor pointer to a usb_deviceDescriptor record that will be filled with the requested data.
 * @return 0 in case of success, error code otherwise
 */
int USB_getDeviceDescriptor(usb_device * device, usb_deviceDescriptor * descriptor)
{
    4ec6:	af 92       	push	r10
    4ec8:	bf 92       	push	r11
    4eca:	cf 92       	push	r12
    4ecc:	df 92       	push	r13
    4ece:	ef 92       	push	r14
    4ed0:	ff 92       	push	r15
    4ed2:	0f 93       	push	r16
    4ed4:	5b 01       	movw	r10, r22
	return(USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, sizeof(usb_deviceDescriptor), (uint8_t *)descriptor));
    4ed6:	60 e8       	ldi	r22, 0x80	; 128
    4ed8:	46 e0       	ldi	r20, 0x06	; 6
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	01 e0       	ldi	r16, 0x01	; 1
    4ede:	ee 24       	eor	r14, r14
    4ee0:	ff 24       	eor	r15, r15
    4ee2:	52 e1       	ldi	r21, 0x12	; 18
    4ee4:	c5 2e       	mov	r12, r21
    4ee6:	d1 2c       	mov	r13, r1
    4ee8:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <USB_controlRequest>
}
    4eec:	0f 91       	pop	r16
    4eee:	ff 90       	pop	r15
    4ef0:	ef 90       	pop	r14
    4ef2:	df 90       	pop	r13
    4ef4:	cf 90       	pop	r12
    4ef6:	bf 90       	pop	r11
    4ef8:	af 90       	pop	r10
    4efa:	08 95       	ret

00004efc <USB_getString>:
 * @param length buffer length.
 * @param str target buffer.
 * @return 0 on success, error code otherwise.
 */
int USB_getString(usb_device * device, uint8_t index, uint8_t languageId, uint16_t length, char * str)
{
    4efc:	2f 92       	push	r2
    4efe:	3f 92       	push	r3
    4f00:	4f 92       	push	r4
    4f02:	5f 92       	push	r5
    4f04:	6f 92       	push	r6
    4f06:	7f 92       	push	r7
    4f08:	8f 92       	push	r8
    4f0a:	9f 92       	push	r9
    4f0c:	af 92       	push	r10
    4f0e:	bf 92       	push	r11
    4f10:	cf 92       	push	r12
    4f12:	df 92       	push	r13
    4f14:	ef 92       	push	r14
    4f16:	ff 92       	push	r15
    4f18:	0f 93       	push	r16
    4f1a:	1f 93       	push	r17
    4f1c:	df 93       	push	r29
    4f1e:	cf 93       	push	r28
    4f20:	0f 92       	push	r0
    4f22:	cd b7       	in	r28, 0x3d	; 61
    4f24:	de b7       	in	r29, 0x3e	; 62
    4f26:	3c 01       	movw	r6, r24
    4f28:	36 2e       	mov	r3, r22
    4f2a:	24 2e       	mov	r2, r20
    4f2c:	49 01       	movw	r8, r18
    4f2e:	28 01       	movw	r4, r16
	uint8_t stringLength = 0;
    4f30:	19 82       	std	Y+1, r1	; 0x01
	int i, ret = 0;

    // Get string length;
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    4f32:	60 e8       	ldi	r22, 0x80	; 128
    4f34:	46 e0       	ldi	r20, 0x06	; 6
    4f36:	23 2d       	mov	r18, r3
    4f38:	03 e0       	ldi	r16, 0x03	; 3
    4f3a:	e2 2c       	mov	r14, r2
    4f3c:	ff 24       	eor	r15, r15
    4f3e:	71 e0       	ldi	r23, 0x01	; 1
    4f40:	c7 2e       	mov	r12, r23
    4f42:	d1 2c       	mov	r13, r1
    4f44:	5e 01       	movw	r10, r28
    4f46:	08 94       	sec
    4f48:	a1 1c       	adc	r10, r1
    4f4a:	b1 1c       	adc	r11, r1
    4f4c:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <USB_controlRequest>
    if (ret<0) return -1;
    4f50:	97 ff       	sbrs	r25, 7
    4f52:	17 c0       	rjmp	.+46     	; 0x4f82 <USB_getString+0x86>
    4f54:	2f ef       	ldi	r18, 0xFF	; 255
    4f56:	3f ef       	ldi	r19, 0xFF	; 255
	stringLength = (stringLength - 2) / 2;
	for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
	str[stringLength] = 0;

	return 0;
}
    4f58:	c9 01       	movw	r24, r18
    4f5a:	0f 90       	pop	r0
    4f5c:	cf 91       	pop	r28
    4f5e:	df 91       	pop	r29
    4f60:	1f 91       	pop	r17
    4f62:	0f 91       	pop	r16
    4f64:	ff 90       	pop	r15
    4f66:	ef 90       	pop	r14
    4f68:	df 90       	pop	r13
    4f6a:	cf 90       	pop	r12
    4f6c:	bf 90       	pop	r11
    4f6e:	af 90       	pop	r10
    4f70:	9f 90       	pop	r9
    4f72:	8f 90       	pop	r8
    4f74:	7f 90       	pop	r7
    4f76:	6f 90       	pop	r6
    4f78:	5f 90       	pop	r5
    4f7a:	4f 90       	pop	r4
    4f7c:	3f 90       	pop	r3
    4f7e:	2f 90       	pop	r2
    4f80:	08 95       	ret
    // Get string length;
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    4f82:	c9 80       	ldd	r12, Y+1	; 0x01
    4f84:	8c 2d       	mov	r24, r12
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	88 16       	cp	r8, r24
    4f8a:	99 06       	cpc	r9, r25
    4f8c:	80 f1       	brcs	.+96     	; 0x4fee <USB_getString+0xf2>

	// Get the whole thing.
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    4f8e:	c3 01       	movw	r24, r6
    4f90:	60 e8       	ldi	r22, 0x80	; 128
    4f92:	46 e0       	ldi	r20, 0x06	; 6
    4f94:	23 2d       	mov	r18, r3
    4f96:	03 e0       	ldi	r16, 0x03	; 3
    4f98:	e2 2c       	mov	r14, r2
    4f9a:	ff 24       	eor	r15, r15
    4f9c:	dd 24       	eor	r13, r13
    4f9e:	52 01       	movw	r10, r4
    4fa0:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <USB_controlRequest>
    if (ret<0) return -2;
    4fa4:	97 fd       	sbrc	r25, 7
    4fa6:	26 c0       	rjmp	.+76     	; 0x4ff4 <USB_getString+0xf8>

	// Convert to 8-bit ASCII
	stringLength = (stringLength - 2) / 2;
    4fa8:	89 81       	ldd	r24, Y+1	; 0x01
    4faa:	28 2f       	mov	r18, r24
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	c9 01       	movw	r24, r18
    4fb0:	02 97       	sbiw	r24, 0x02	; 2
    4fb2:	97 fd       	sbrc	r25, 7
    4fb4:	22 c0       	rjmp	.+68     	; 0x4ffa <USB_getString+0xfe>
    4fb6:	95 95       	asr	r25
    4fb8:	87 95       	ror	r24
    4fba:	89 83       	std	Y+1, r24	; 0x01
	for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
    4fbc:	88 23       	and	r24, r24
    4fbe:	01 f1       	breq	.+64     	; 0x5000 <USB_getString+0x104>
    4fc0:	b2 01       	movw	r22, r4
    4fc2:	f2 01       	movw	r30, r4
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	48 2f       	mov	r20, r24
    4fca:	50 e0       	ldi	r21, 0x00	; 0
    4fcc:	2f 5f       	subi	r18, 0xFF	; 255
    4fce:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd0:	82 81       	ldd	r24, Z+2	; 0x02
    4fd2:	db 01       	movw	r26, r22
    4fd4:	8d 93       	st	X+, r24
    4fd6:	bd 01       	movw	r22, r26
    4fd8:	32 96       	adiw	r30, 0x02	; 2
    4fda:	da 01       	movw	r26, r20
    4fdc:	24 17       	cp	r18, r20
    4fde:	35 07       	cpc	r19, r21
    4fe0:	ac f3       	brlt	.-22     	; 0x4fcc <USB_getString+0xd0>
	str[stringLength] = 0;
    4fe2:	a4 0d       	add	r26, r4
    4fe4:	b5 1d       	adc	r27, r5
    4fe6:	1c 92       	st	X, r1
    4fe8:	20 e0       	ldi	r18, 0x00	; 0
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	b5 cf       	rjmp	.-150    	; 0x4f58 <USB_getString+0x5c>
    // Get string length;
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    4fee:	c8 2c       	mov	r12, r8
    4ff0:	89 82       	std	Y+1, r8	; 0x01
    4ff2:	cd cf       	rjmp	.-102    	; 0x4f8e <USB_getString+0x92>

	// Get the whole thing.
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    if (ret<0) return -2;
    4ff4:	2e ef       	ldi	r18, 0xFE	; 254
    4ff6:	3f ef       	ldi	r19, 0xFF	; 255
    4ff8:	af cf       	rjmp	.-162    	; 0x4f58 <USB_getString+0x5c>

	// Convert to 8-bit ASCII
	stringLength = (stringLength - 2) / 2;
    4ffa:	c9 01       	movw	r24, r18
    4ffc:	01 97       	sbiw	r24, 0x01	; 1
    4ffe:	db cf       	rjmp	.-74     	; 0x4fb6 <USB_getString+0xba>
    5000:	a8 2f       	mov	r26, r24
    5002:	b0 e0       	ldi	r27, 0x00	; 0
    5004:	ee cf       	rjmp	.-36     	; 0x4fe2 <USB_getString+0xe6>

00005006 <USB_initDevice>:
 * @param USB device
 * @param configuration configuration to switch to
 * @return negative error code or zero on success.
 */
int USB_initDevice(usb_device * device, int configuration)
{
    5006:	ef 92       	push	r14
    5008:	ff 92       	push	r15
    500a:	0f 93       	push	r16
    500c:	1f 93       	push	r17
    500e:	df 93       	push	r29
    5010:	cf 93       	push	r28
    5012:	00 d0       	rcall	.+0      	; 0x5014 <USB_initDevice+0xe>
    5014:	0f 92       	push	r0
    5016:	cd b7       	in	r28, 0x3d	; 61
    5018:	de b7       	in	r29, 0x3e	; 62
    501a:	7c 01       	movw	r14, r24
	char buf[4];

	uint8_t rcode;

	// Set the configuration for this USB device.
	rcode = USB_setConfiguration(device, configuration);
    501c:	0e 94 da 26 	call	0x4db4	; 0x4db4 <USB_setConfiguration>
	if (rcode<0) return rcode;

	// Get the first supported language.
	rcode = USB_getString(device, 0, 0, 4, buf);
    5020:	c7 01       	movw	r24, r14
    5022:	60 e0       	ldi	r22, 0x00	; 0
    5024:	40 e0       	ldi	r20, 0x00	; 0
    5026:	24 e0       	ldi	r18, 0x04	; 4
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	8e 01       	movw	r16, r28
    502c:	0f 5f       	subi	r16, 0xFF	; 255
    502e:	1f 4f       	sbci	r17, 0xFF	; 255
    5030:	0e 94 7e 27 	call	0x4efc	; 0x4efc <USB_getString>
	if (rcode<0) return rcode;
    device->firstStringLanguage = (buf[3] << 8) | buf[2];
    5034:	3c 81       	ldd	r19, Y+4	; 0x04
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	4b 81       	ldd	r20, Y+3	; 0x03
    503a:	50 e0       	ldi	r21, 0x00	; 0
    503c:	24 2b       	or	r18, r20
    503e:	35 2b       	or	r19, r21
    5040:	f7 01       	movw	r30, r14
    5042:	35 8b       	std	Z+21, r19	; 0x15
    5044:	24 8b       	std	Z+20, r18	; 0x14

    return rcode;
}
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	0f 90       	pop	r0
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	0f 90       	pop	r0
    5050:	cf 91       	pop	r28
    5052:	df 91       	pop	r29
    5054:	1f 91       	pop	r17
    5056:	0f 91       	pop	r16
    5058:	ff 90       	pop	r15
    505a:	ef 90       	pop	r14
    505c:	08 95       	ret

0000505e <USB_bulkRead>:
 * @param data target buffer.
 *
 * @return number of bytes read, or error code in case of failure.
 */
int USB_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
    505e:	0f 93       	push	r16
    5060:	1f 93       	push	r17
    5062:	cf 93       	push	r28
    5064:	df 93       	push	r29
    5066:	fc 01       	movw	r30, r24
    5068:	db 01       	movw	r26, r22
    506a:	ea 01       	movw	r28, r20
	return USB_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    506c:	22 23       	and	r18, r18
    506e:	71 f4       	brne	.+28     	; 0x508c <USB_bulkRead+0x2e>
    5070:	00 e0       	ldi	r16, 0x00	; 0
    5072:	1d e7       	ldi	r17, 0x7D	; 125
    5074:	cf 01       	movw	r24, r30
    5076:	38 96       	adiw	r30, 0x08	; 8
    5078:	bf 01       	movw	r22, r30
    507a:	ad 01       	movw	r20, r26
    507c:	9e 01       	movw	r18, r28
    507e:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <USB_read>
}
    5082:	df 91       	pop	r29
    5084:	cf 91       	pop	r28
    5086:	1f 91       	pop	r17
    5088:	0f 91       	pop	r16
    508a:	08 95       	ret
 *
 * @return number of bytes read, or error code in case of failure.
 */
int USB_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
	return USB_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    508c:	01 e0       	ldi	r16, 0x01	; 1
    508e:	10 e0       	ldi	r17, 0x00	; 0
    5090:	f1 cf       	rjmp	.-30     	; 0x5074 <USB_bulkRead+0x16>

00005092 <USB_init>:
/**
 * Initialises the USB layer.
 */
void USB_init(void)
{
 	max3421e_init();
    5092:	0e 94 05 2b 	call	0x560a	; 0x560a <max3421e_init>
	max3421e_powerOn();
    5096:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <max3421e_powerOn>

	uint8_t i;

	// Initialise the USB state machine.
	usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    509a:	81 e1       	ldi	r24, 0x11	; 17
    509c:	80 93 00 02 	sts	0x0200, r24

	// Initialise the device table.
	for (i = 0; i < (USB_NUMDEVICES + 1); i++)
		deviceTable[i].active = false;
    50a0:	10 92 b5 06 	sts	0x06B5, r1
    50a4:	10 92 cb 06 	sts	0x06CB, r1
    50a8:	10 92 e1 06 	sts	0x06E1, r1

	// Address 0 is used to configure devices and assign them an address when they are first plugged in
	deviceTable[0].address = 0;
    50ac:	10 92 b4 06 	sts	0x06B4, r1
 * @param endpoint USB endpoint
 * @param address endpoint address
 */
void USB_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
	endpoint->address = address;
    50b0:	10 92 b6 06 	sts	0x06B6, r1
	endpoint->sendToggle = bmSNDTOG0;
    50b4:	80 e4       	ldi	r24, 0x40	; 64
    50b6:	80 93 ba 06 	sts	0x06BA, r24
	endpoint->receiveToggle = bmRCVTOG0;
    50ba:	80 e1       	ldi	r24, 0x10	; 16
    50bc:	80 93 bb 06 	sts	0x06BB, r24

	// Address 0 is used to configure devices and assign them an address when they are first plugged in
	deviceTable[0].address = 0;
	USB_initEndPoint(&(deviceTable[0].control), 0);

}
    50c0:	08 95       	ret

000050c2 <USB_poll>:

/**
 * USB poll method. Performs enumeration/cleanup.
 */
void USB_poll()
{
    50c2:	1f 93       	push	r17
    50c4:	df 93       	push	r29
    50c6:	cf 93       	push	r28
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
    50cc:	62 97       	sbiw	r28, 0x12	; 18
    50ce:	0f b6       	in	r0, 0x3f	; 63
    50d0:	f8 94       	cli
    50d2:	de bf       	out	0x3e, r29	; 62
    50d4:	0f be       	out	0x3f, r0	; 63
    50d6:	cd bf       	out	0x3d, r28	; 61
	uint8_t tmpdata;
	static unsigned long delay = 0;
	usb_deviceDescriptor deviceDescriptor;

	// Poll the MAX3421E device.
	max3421e_poll();
    50d8:	0e 94 af 2a 	call	0x555e	; 0x555e <max3421e_poll>

	/* modify USB task state if Vbus changed */
	tmpdata = max3421e_getVbusState();
    50dc:	0e 94 be 29 	call	0x537c	; 0x537c <max3421e_getVbusState>

	switch (tmpdata)
    50e0:	81 30       	cpi	r24, 0x01	; 1
    50e2:	09 f4       	brne	.+2      	; 0x50e6 <USB_poll+0x24>
    50e4:	93 c0       	rjmp	.+294    	; 0x520c <USB_poll+0x14a>
    50e6:	81 30       	cpi	r24, 0x01	; 1
    50e8:	a0 f4       	brcc	.+40     	; 0x5112 <USB_poll+0x50>
	{
	case SE1: //illegal state
		usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
		break;
	case SE0: //disconnected
		if ((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    50ea:	10 91 00 02 	lds	r17, 0x0200
    50ee:	81 2f       	mov	r24, r17
    50f0:	80 7f       	andi	r24, 0xF0	; 240
    50f2:	80 31       	cpi	r24, 0x10	; 16
    50f4:	91 f0       	breq	.+36     	; 0x511a <USB_poll+0x58>
		{
			usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    50f6:	81 e1       	ldi	r24, 0x11	; 17
    50f8:	80 93 00 02 	sts	0x0200, r24
	case USB_DETACHED_SUBSTATE_INITIALIZE:

		// TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
		// devices.
		for (i = 1; i < USB_NUMDEVICES; i++)
			if (deviceTable[i].active)
    50fc:	80 91 cb 06 	lds	r24, 0x06CB
    5100:	88 23       	and	r24, r24
    5102:	09 f0       	breq	.+2      	; 0x5106 <USB_poll+0x44>
    5104:	12 c1       	rjmp	.+548    	; 0x532a <USB_poll+0x268>
				USB_fireEvent(&(deviceTable[i]), USB_DISCONNECT);

		USB_init();
    5106:	0e 94 49 28 	call	0x5092	; 0x5092 <USB_init>
		usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    510a:	82 e1       	ldi	r24, 0x12	; 18
    510c:	80 93 00 02 	sts	0x0200, r24
    5110:	80 c0       	rjmp	.+256    	; 0x5212 <USB_poll+0x150>
	max3421e_poll();

	/* modify USB task state if Vbus changed */
	tmpdata = max3421e_getVbusState();

	switch (tmpdata)
    5112:	84 30       	cpi	r24, 0x04	; 4
    5114:	d8 f1       	brcs	.+118    	; 0x518c <USB_poll+0xca>
    5116:	10 91 00 02 	lds	r17, 0x0200
	}// switch( tmpdata

	//Serial.print("USB task state: ");
	//Serial.println( usb_task_state, HEX );

	switch (usb_task_state)
    511a:	10 34       	cpi	r17, 0x40	; 64
    511c:	09 f4       	brne	.+2      	; 0x5120 <USB_poll+0x5e>
    511e:	8c c0       	rjmp	.+280    	; 0x5238 <USB_poll+0x176>
    5120:	11 34       	cpi	r17, 0x41	; 65
    5122:	08 f4       	brcc	.+2      	; 0x5126 <USB_poll+0x64>
    5124:	80 c0       	rjmp	.+256    	; 0x5226 <USB_poll+0x164>
    5126:	10 36       	cpi	r17, 0x60	; 96
    5128:	09 f4       	brne	.+2      	; 0x512c <USB_poll+0x6a>
    512a:	b5 c0       	rjmp	.+362    	; 0x5296 <USB_poll+0x1d4>
    512c:	10 37       	cpi	r17, 0x70	; 112
    512e:	09 f4       	brne	.+2      	; 0x5132 <USB_poll+0x70>
    5130:	d2 c0       	rjmp	.+420    	; 0x52d6 <USB_poll+0x214>
    5132:	10 35       	cpi	r17, 0x50	; 80
    5134:	09 f0       	breq	.+2      	; 0x5138 <USB_poll+0x76>
    5136:	6d c0       	rjmp	.+218    	; 0x5212 <USB_poll+0x150>
			delay = millis() + 20; //20ms wait after reset per USB spec
		}
		break;

	case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
		if (max3421e_read(MAX_REG_HIRQ) & bmFRAMEIRQ)
    5138:	88 ec       	ldi	r24, 0xC8	; 200
    513a:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    513e:	86 ff       	sbrs	r24, 6
    5140:	68 c0       	rjmp	.+208    	; 0x5212 <USB_poll+0x150>

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    5142:	80 91 88 06 	lds	r24, 0x0688
    5146:	90 91 89 06 	lds	r25, 0x0689
    514a:	a0 91 8a 06 	lds	r26, 0x068A
    514e:	b0 91 8b 06 	lds	r27, 0x068B
    5152:	01 96       	adiw	r24, 0x01	; 1
    5154:	a1 1d       	adc	r26, r1
    5156:	b1 1d       	adc	r27, r1
    5158:	80 93 88 06 	sts	0x0688, r24
    515c:	90 93 89 06 	sts	0x0689, r25
    5160:	a0 93 8a 06 	sts	0x068A, r26
    5164:	b0 93 8b 06 	sts	0x068B, r27
		break;

	case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
		if (max3421e_read(MAX_REG_HIRQ) & bmFRAMEIRQ)
		{ //when first SOF received we can continue
			if (delay < millis())
    5168:	20 91 82 06 	lds	r18, 0x0682
    516c:	30 91 83 06 	lds	r19, 0x0683
    5170:	40 91 84 06 	lds	r20, 0x0684
    5174:	50 91 85 06 	lds	r21, 0x0685
    5178:	28 17       	cp	r18, r24
    517a:	39 07       	cpc	r19, r25
    517c:	4a 07       	cpc	r20, r26
    517e:	5b 07       	cpc	r21, r27
    5180:	08 f0       	brcs	.+2      	; 0x5184 <USB_poll+0xc2>
    5182:	47 c0       	rjmp	.+142    	; 0x5212 <USB_poll+0x150>
			{ //20ms passed
				usb_task_state
    5184:	80 e6       	ldi	r24, 0x60	; 96
    5186:	80 93 00 02 	sts	0x0200, r24
    518a:	43 c0       	rjmp	.+134    	; 0x5212 <USB_poll+0x150>
			usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
		}
		break;
	case FSHOST: //attached
	case LSHOST:
		if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
    518c:	10 91 00 02 	lds	r17, 0x0200
    5190:	81 2f       	mov	r24, r17
    5192:	80 7f       	andi	r24, 0xF0	; 240
    5194:	80 31       	cpi	r24, 0x10	; 16
    5196:	09 f6       	brne	.-126    	; 0x511a <USB_poll+0x58>

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    5198:	20 91 88 06 	lds	r18, 0x0688
    519c:	30 91 89 06 	lds	r19, 0x0689
    51a0:	40 91 8a 06 	lds	r20, 0x068A
    51a4:	50 91 8b 06 	lds	r21, 0x068B
    51a8:	da 01       	movw	r26, r20
    51aa:	c9 01       	movw	r24, r18
    51ac:	2f 5f       	subi	r18, 0xFF	; 255
    51ae:	3f 4f       	sbci	r19, 0xFF	; 255
    51b0:	4f 4f       	sbci	r20, 0xFF	; 255
    51b2:	5f 4f       	sbci	r21, 0xFF	; 255
		break;
	case FSHOST: //attached
	case LSHOST:
		if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
		{
			delay = millis() + USB_SETTLE_DELAY;
    51b4:	87 53       	subi	r24, 0x37	; 55
    51b6:	9f 4f       	sbci	r25, 0xFF	; 255
    51b8:	af 4f       	sbci	r26, 0xFF	; 255
    51ba:	bf 4f       	sbci	r27, 0xFF	; 255
    51bc:	80 93 82 06 	sts	0x0682, r24
    51c0:	90 93 83 06 	sts	0x0683, r25
    51c4:	a0 93 84 06 	sts	0x0684, r26
    51c8:	b0 93 85 06 	sts	0x0685, r27
			usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    51cc:	80 e2       	ldi	r24, 0x20	; 32
    51ce:	80 93 00 02 	sts	0x0200, r24

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    51d2:	2f 5f       	subi	r18, 0xFF	; 255
    51d4:	3f 4f       	sbci	r19, 0xFF	; 255
    51d6:	4f 4f       	sbci	r20, 0xFF	; 255
    51d8:	5f 4f       	sbci	r21, 0xFF	; 255
    51da:	20 93 88 06 	sts	0x0688, r18
    51de:	30 93 89 06 	sts	0x0689, r19
    51e2:	40 93 8a 06 	sts	0x068A, r20
    51e6:	50 93 8b 06 	sts	0x068B, r21
	case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
		break;
	case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
		break;
	case USB_ATTACHED_SUBSTATE_SETTLE: //setlle time for just attached device
		if (delay < millis())
    51ea:	80 91 82 06 	lds	r24, 0x0682
    51ee:	90 91 83 06 	lds	r25, 0x0683
    51f2:	a0 91 84 06 	lds	r26, 0x0684
    51f6:	b0 91 85 06 	lds	r27, 0x0685
    51fa:	82 17       	cp	r24, r18
    51fc:	93 07       	cpc	r25, r19
    51fe:	a4 07       	cpc	r26, r20
    5200:	b5 07       	cpc	r27, r21
    5202:	38 f4       	brcc	.+14     	; 0x5212 <USB_poll+0x150>
		{
			usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    5204:	80 e3       	ldi	r24, 0x30	; 48
    5206:	80 93 00 02 	sts	0x0200, r24
    520a:	03 c0       	rjmp	.+6      	; 0x5212 <USB_poll+0x150>
	tmpdata = max3421e_getVbusState();

	switch (tmpdata)
	{
	case SE1: //illegal state
		usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    520c:	83 e1       	ldi	r24, 0x13	; 19
    520e:	80 93 00 02 	sts	0x0200, r24
	case USB_STATE_RUNNING:
		break;
	case USB_STATE_ERROR:
		break;
	}
}
    5212:	62 96       	adiw	r28, 0x12	; 18
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	f8 94       	cli
    5218:	de bf       	out	0x3e, r29	; 62
    521a:	0f be       	out	0x3f, r0	; 63
    521c:	cd bf       	out	0x3d, r28	; 61
    521e:	cf 91       	pop	r28
    5220:	df 91       	pop	r29
    5222:	1f 91       	pop	r17
    5224:	08 95       	ret
	}// switch( tmpdata

	//Serial.print("USB task state: ");
	//Serial.println( usb_task_state, HEX );

	switch (usb_task_state)
    5226:	10 32       	cpi	r17, 0x20	; 32
    5228:	09 f4       	brne	.+2      	; 0x522c <USB_poll+0x16a>
    522a:	76 c0       	rjmp	.+236    	; 0x5318 <USB_poll+0x256>
    522c:	10 33       	cpi	r17, 0x30	; 48
    522e:	09 f4       	brne	.+2      	; 0x5232 <USB_poll+0x170>
    5230:	4a c0       	rjmp	.+148    	; 0x52c6 <USB_poll+0x204>
    5232:	11 31       	cpi	r17, 0x11	; 17
    5234:	71 f7       	brne	.-36     	; 0x5212 <USB_poll+0x150>
    5236:	62 cf       	rjmp	.-316    	; 0x50fc <USB_poll+0x3a>
		max3421e_write(MAX_REG_HCTL, bmBUSRST);
		usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
		break;

	case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
		if ((max3421e_read(MAX_REG_HCTL) & bmBUSRST) == 0)
    5238:	88 ee       	ldi	r24, 0xE8	; 232
    523a:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    523e:	80 fd       	sbrc	r24, 0
    5240:	e8 cf       	rjmp	.-48     	; 0x5212 <USB_poll+0x150>
		{
			tmpdata = max3421e_read(MAX_REG_MODE) | bmSOFKAENAB; //start SOF generation
    5242:	88 ed       	ldi	r24, 0xD8	; 216
    5244:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
			max3421e_write(MAX_REG_MODE, tmpdata);
    5248:	68 2f       	mov	r22, r24
    524a:	68 60       	ori	r22, 0x08	; 8
    524c:	88 ed       	ldi	r24, 0xD8	; 216
    524e:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
			//                  max3421e_regWr( rMODE, bmSOFKAENAB );
			usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    5252:	80 e5       	ldi	r24, 0x50	; 80
    5254:	80 93 00 02 	sts	0x0200, r24

unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    5258:	80 91 88 06 	lds	r24, 0x0688
    525c:	90 91 89 06 	lds	r25, 0x0689
    5260:	a0 91 8a 06 	lds	r26, 0x068A
    5264:	b0 91 8b 06 	lds	r27, 0x068B
    5268:	01 96       	adiw	r24, 0x01	; 1
    526a:	a1 1d       	adc	r26, r1
    526c:	b1 1d       	adc	r27, r1
    526e:	80 93 88 06 	sts	0x0688, r24
    5272:	90 93 89 06 	sts	0x0689, r25
    5276:	a0 93 8a 06 	sts	0x068A, r26
    527a:	b0 93 8b 06 	sts	0x068B, r27
		{
			tmpdata = max3421e_read(MAX_REG_MODE) | bmSOFKAENAB; //start SOF generation
			max3421e_write(MAX_REG_MODE, tmpdata);
			//                  max3421e_regWr( rMODE, bmSOFKAENAB );
			usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
			delay = millis() + 20; //20ms wait after reset per USB spec
    527e:	44 96       	adiw	r24, 0x14	; 20
    5280:	a1 1d       	adc	r26, r1
    5282:	b1 1d       	adc	r27, r1
    5284:	80 93 82 06 	sts	0x0682, r24
    5288:	90 93 83 06 	sts	0x0683, r25
    528c:	a0 93 84 06 	sts	0x0684, r26
    5290:	b0 93 85 06 	sts	0x0685, r27
    5294:	be cf       	rjmp	.-132    	; 0x5212 <USB_poll+0x150>
		break;

	case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
		// toggle( BPNT_0 );

		deviceTable[0].control.maxPacketSize = 8;
    5296:	88 e0       	ldi	r24, 0x08	; 8
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	90 93 b9 06 	sts	0x06B9, r25
    529e:	80 93 b8 06 	sts	0x06B8, r24

		rcode = USB_getDeviceDescriptor(&deviceTable[0], &deviceDescriptor);
    52a2:	84 eb       	ldi	r24, 0xB4	; 180
    52a4:	96 e0       	ldi	r25, 0x06	; 6
    52a6:	be 01       	movw	r22, r28
    52a8:	6f 5f       	subi	r22, 0xFF	; 255
    52aa:	7f 4f       	sbci	r23, 0xFF	; 255
    52ac:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <USB_getDeviceDescriptor>
		if (rcode == 0)
    52b0:	88 23       	and	r24, r24
    52b2:	61 f5       	brne	.+88     	; 0x530c <USB_poll+0x24a>
		{
			deviceTable[0].control.maxPacketSize = deviceDescriptor.bMaxPacketSize0;
    52b4:	88 85       	ldd	r24, Y+8	; 0x08
    52b6:	80 93 b8 06 	sts	0x06B8, r24
    52ba:	10 92 b9 06 	sts	0x06B9, r1
			usb_task_state = USB_STATE_ADDRESSING;
    52be:	80 e7       	ldi	r24, 0x70	; 112
    52c0:	80 93 00 02 	sts	0x0200, r24
    52c4:	a6 cf       	rjmp	.-180    	; 0x5212 <USB_poll+0x150>
		}
		break;

	case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
		// Issue bus reset.
		max3421e_write(MAX_REG_HCTL, bmBUSRST);
    52c6:	88 ee       	ldi	r24, 0xE8	; 232
    52c8:	61 e0       	ldi	r22, 0x01	; 1
    52ca:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
		usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    52ce:	80 e4       	ldi	r24, 0x40	; 64
    52d0:	80 93 00 02 	sts	0x0200, r24
    52d4:	9e cf       	rjmp	.-196    	; 0x5212 <USB_poll+0x150>
	case USB_STATE_ADDRESSING:

		// Look for an empty spot
		for (i = 1; i < USB_NUMDEVICES; i++)
		{
			if (!deviceTable[i].active)
    52d6:	80 91 cb 06 	lds	r24, 0x06CB
    52da:	88 23       	and	r24, r24
    52dc:	79 f1       	breq	.+94     	; 0x533c <USB_poll+0x27a>
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    52de:	e0 91 86 06 	lds	r30, 0x0686
    52e2:	f0 91 87 06 	lds	r31, 0x0687
    52e6:	80 ee       	ldi	r24, 0xE0	; 224
    52e8:	96 e0       	ldi	r25, 0x06	; 6
    52ea:	62 e0       	ldi	r22, 0x02	; 2
    52ec:	19 95       	eicall
		if (usb_task_state == USB_STATE_ADDRESSING)
		{
			USB_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);

			// No vacant place in devtable
			usb_error = 0xfe;
    52ee:	8e ef       	ldi	r24, 0xFE	; 254
    52f0:	80 93 81 06 	sts	0x0681, r24
			usb_task_state = USB_STATE_ERROR;
    52f4:	80 ea       	ldi	r24, 0xA0	; 160
    52f6:	80 93 00 02 	sts	0x0200, r24
    52fa:	8b cf       	rjmp	.-234    	; 0x5212 <USB_poll+0x150>
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    52fc:	e0 91 86 06 	lds	r30, 0x0686
    5300:	f0 91 87 06 	lds	r31, 0x0687
    5304:	8a ec       	ldi	r24, 0xCA	; 202
    5306:	96 e0       	ldi	r25, 0x06	; 6
    5308:	62 e0       	ldi	r22, 0x02	; 2
    530a:	19 95       	eicall
				} else
				{
					USB_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);

					// TODO remove usb_error at some point?
					usb_error = USB_STATE_ADDRESSING;
    530c:	10 93 81 06 	sts	0x0681, r17
					usb_task_state = USB_STATE_ERROR;
    5310:	80 ea       	ldi	r24, 0xA0	; 160
    5312:	80 93 00 02 	sts	0x0200, r24
    5316:	7d cf       	rjmp	.-262    	; 0x5212 <USB_poll+0x150>
    5318:	20 91 88 06 	lds	r18, 0x0688
    531c:	30 91 89 06 	lds	r19, 0x0689
    5320:	40 91 8a 06 	lds	r20, 0x068A
    5324:	50 91 8b 06 	lds	r21, 0x068B
    5328:	54 cf       	rjmp	.-344    	; 0x51d2 <USB_poll+0x110>
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    532a:	e0 91 86 06 	lds	r30, 0x0686
    532e:	f0 91 87 06 	lds	r31, 0x0687
    5332:	8a ec       	ldi	r24, 0xCA	; 202
    5334:	96 e0       	ldi	r25, 0x06	; 6
    5336:	61 e0       	ldi	r22, 0x01	; 1
    5338:	19 95       	eicall
    533a:	e5 ce       	rjmp	.-566    	; 0x5106 <USB_poll+0x44>
			if (!deviceTable[i].active)
			{
				// Set correct MaxPktSize
				// deviceTable[i].epinfo = deviceTable[0].epinfo;

				deviceTable[i].address = i;
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	80 93 ca 06 	sts	0x06CA, r24
				deviceTable[i].active = true;
    5342:	80 93 cb 06 	sts	0x06CB, r24
 * @param endpoint USB endpoint
 * @param address endpoint address
 */
void USB_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
	endpoint->address = address;
    5346:	10 92 cc 06 	sts	0x06CC, r1
	endpoint->sendToggle = bmSNDTOG0;
    534a:	80 e4       	ldi	r24, 0x40	; 64
    534c:	80 93 d0 06 	sts	0x06D0, r24
	endpoint->receiveToggle = bmRCVTOG0;
    5350:	80 e1       	ldi	r24, 0x10	; 16
    5352:	80 93 d1 06 	sts	0x06D1, r24
				deviceTable[i].active = true;

				USB_initEndPoint(&(deviceTable[i].control), 0);

				// temporary record until plugged with real device endpoint structure
				rcode = USB_setAddress(&deviceTable[0], i);
    5356:	84 eb       	ldi	r24, 0xB4	; 180
    5358:	96 e0       	ldi	r25, 0x06	; 6
    535a:	61 e0       	ldi	r22, 0x01	; 1
    535c:	0e 94 f5 26 	call	0x4dea	; 0x4dea <USB_setAddress>

				if (rcode == 0)
    5360:	88 23       	and	r24, r24
    5362:	61 f6       	brne	.-104    	; 0x52fc <USB_poll+0x23a>
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    5364:	e0 91 86 06 	lds	r30, 0x0686
    5368:	f0 91 87 06 	lds	r31, 0x0687
    536c:	8a ec       	ldi	r24, 0xCA	; 202
    536e:	96 e0       	ldi	r25, 0x06	; 6
    5370:	60 e0       	ldi	r22, 0x00	; 0
    5372:	19 95       	eicall
				{
					USB_fireEvent(&deviceTable[i], USB_CONNECT);
					// usb_task_state = USB_STATE_CONFIGURING;
					// NB: I've bypassed the configuring state, because configuration should be handled
					// in the usb event handler.
					usb_task_state = USB_STATE_RUNNING;
    5374:	80 e9       	ldi	r24, 0x90	; 144
    5376:	80 93 00 02 	sts	0x0200, r24
    537a:	4b cf       	rjmp	.-362    	; 0x5212 <USB_poll+0x150>

0000537c <max3421e_getVbusState>:
 * @return the status of Vbus.
 */
uint8_t max3421e_getVbusState()
{
	return vbusState;
}
    537c:	80 91 8c 06 	lds	r24, 0x068C
    5380:	08 95       	ret

00005382 <max3421e_readMultiple>:
 * @param count number of bytes to read.
 * @param values target buffer.
 * @return pointer to the input buffer + count.
 */
uint8_t * max3421e_readMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
    5382:	ef 92       	push	r14
    5384:	ff 92       	push	r15
    5386:	0f 93       	push	r16
    5388:	1f 93       	push	r17
    538a:	18 2f       	mov	r17, r24
    538c:	06 2f       	mov	r16, r22
    538e:	f4 2e       	mov	r15, r20
    5390:	e5 2e       	mov	r14, r21
	// Pull slave-select high to initiate transfer.
	MAX_SS(0);
    5392:	85 e3       	ldi	r24, 0x35	; 53
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	60 e0       	ldi	r22, 0x00	; 0
    5398:	70 e0       	ldi	r23, 0x00	; 0
    539a:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	// Send a command byte containing the register number.
	SPDR = reg;
    539e:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF))); //wait
    53a0:	0d b4       	in	r0, 0x2d	; 45
    53a2:	07 fe       	sbrs	r0, 7
    53a4:	fd cf       	rjmp	.-6      	; 0x53a0 <max3421e_readMultiple+0x1e>

	// Read [count] bytes.
	while (count--)
    53a6:	00 23       	and	r16, r16
    53a8:	b1 f0       	breq	.+44     	; 0x53d6 <max3421e_readMultiple+0x54>
    53aa:	01 50       	subi	r16, 0x01	; 1
    53ac:	8f 2d       	mov	r24, r15
    53ae:	9e 2d       	mov	r25, r14
    53b0:	fc 01       	movw	r30, r24
    53b2:	60 2f       	mov	r22, r16
    53b4:	70 e0       	ldi	r23, 0x00	; 0
    53b6:	6f 5f       	subi	r22, 0xFF	; 255
    53b8:	7f 4f       	sbci	r23, 0xFF	; 255
    53ba:	6e 0f       	add	r22, r30
    53bc:	7f 1f       	adc	r23, r31
	{
		// Send empty byte while reading.
		SPDR = 0;
    53be:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1 << SPIF)));
    53c0:	0d b4       	in	r0, 0x2d	; 45
    53c2:	07 fe       	sbrs	r0, 7
    53c4:	fd cf       	rjmp	.-6      	; 0x53c0 <max3421e_readMultiple+0x3e>

		*values = SPDR;
    53c6:	8e b5       	in	r24, 0x2e	; 46
    53c8:	81 93       	st	Z+, r24
	// Send a command byte containing the register number.
	SPDR = reg;
	while (!(SPSR & (1 << SPIF))); //wait

	// Read [count] bytes.
	while (count--)
    53ca:	e6 17       	cp	r30, r22
    53cc:	f7 07       	cpc	r31, r23
    53ce:	b9 f7       	brne	.-18     	; 0x53be <max3421e_readMultiple+0x3c>
    53d0:	cf 01       	movw	r24, r30
    53d2:	fe 2e       	mov	r15, r30
    53d4:	e9 2e       	mov	r14, r25
		*values = SPDR;
		values++;
	}

	// Pull slave-select low to signal transfer complete.
	MAX_SS(1);
    53d6:	85 e3       	ldi	r24, 0x35	; 53
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	61 e0       	ldi	r22, 0x01	; 1
    53dc:	70 e0       	ldi	r23, 0x00	; 0
    53de:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	// Return the byte array + count.
	return (values);
}
    53e2:	8f 2d       	mov	r24, r15
    53e4:	9e 2d       	mov	r25, r14
    53e6:	1f 91       	pop	r17
    53e8:	0f 91       	pop	r16
    53ea:	ff 90       	pop	r15
    53ec:	ef 90       	pop	r14
    53ee:	08 95       	ret

000053f0 <max3421e_read>:
 *
 * @param reg register address.
 * @return result value.
 */
uint8_t max3421e_read(uint8_t reg)
{
    53f0:	1f 93       	push	r17
    53f2:	18 2f       	mov	r17, r24
	// Pull slave-select high to initiate transfer.
	MAX_SS(0);
    53f4:	85 e3       	ldi	r24, 0x35	; 53
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	60 e0       	ldi	r22, 0x00	; 0
    53fa:	70 e0       	ldi	r23, 0x00	; 0
    53fc:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	// Send a command byte containing the register number.
	SPDR = reg;
    5400:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF)));
    5402:	0d b4       	in	r0, 0x2d	; 45
    5404:	07 fe       	sbrs	r0, 7
    5406:	fd cf       	rjmp	.-6      	; 0x5402 <max3421e_read+0x12>

	// Send an empty byte while reading.
	SPDR = 0;
    5408:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1 << SPIF)));
    540a:	0d b4       	in	r0, 0x2d	; 45
    540c:	07 fe       	sbrs	r0, 7
    540e:	fd cf       	rjmp	.-6      	; 0x540a <max3421e_read+0x1a>

	// Pull slave-select low to signal transfer complete.
	MAX_SS(1);
    5410:	85 e3       	ldi	r24, 0x35	; 53
    5412:	90 e0       	ldi	r25, 0x00	; 0
    5414:	61 e0       	ldi	r22, 0x01	; 1
    5416:	70 e0       	ldi	r23, 0x00	; 0
    5418:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	// Return result byte.
	return (SPDR);
    541c:	8e b5       	in	r24, 0x2e	; 46
}
    541e:	1f 91       	pop	r17
    5420:	08 95       	ret

00005422 <max3421e_gpxInterruptHandler>:
 * GPX interrupt handler
 */
uint8_t max3421e_gpxInterruptHandler(void)
{
	//read GPIN IRQ register
	uint8_t interruptStatus = max3421e_read(MAX_REG_GPINIRQ);
    5422:	80 eb       	ldi	r24, 0xB0	; 176
    5424:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
	//        vbusPwr( ON );
	//        regWr( rGPINIRQ, bmGPINIRQ7 );
	//    }

	return (interruptStatus);
}
    5428:	08 95       	ret

0000542a <max3421e_writeMultiple>:
 * @param count number of bytes to write.
 * @param vaues input values.
 * @return a pointer to values, incremented by the number of bytes written (values + length).
 */
uint8_t * max3421e_writeMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
    542a:	ef 92       	push	r14
    542c:	ff 92       	push	r15
    542e:	0f 93       	push	r16
    5430:	1f 93       	push	r17
    5432:	18 2f       	mov	r17, r24
    5434:	06 2f       	mov	r16, r22
    5436:	f4 2e       	mov	r15, r20
    5438:	e5 2e       	mov	r14, r21
	// Pull slave select low to indicate start of transfer.
	MAX_SS(0);
    543a:	85 e3       	ldi	r24, 0x35	; 53
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	60 e0       	ldi	r22, 0x00	; 0
    5440:	70 e0       	ldi	r23, 0x00	; 0
    5442:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	// Transfer command byte, 0x02 indicates write.
	SPDR = (reg | 0x02);
    5446:	12 60       	ori	r17, 0x02	; 2
    5448:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF)));
    544a:	0d b4       	in	r0, 0x2d	; 45
    544c:	07 fe       	sbrs	r0, 7
    544e:	fd cf       	rjmp	.-6      	; 0x544a <max3421e_writeMultiple+0x20>

	// Transfer values.
	while (count--)
    5450:	00 23       	and	r16, r16
    5452:	b1 f0       	breq	.+44     	; 0x5480 <max3421e_writeMultiple+0x56>
    5454:	01 50       	subi	r16, 0x01	; 1
    5456:	8f 2d       	mov	r24, r15
    5458:	9e 2d       	mov	r25, r14
    545a:	fc 01       	movw	r30, r24
    545c:	60 2f       	mov	r22, r16
    545e:	70 e0       	ldi	r23, 0x00	; 0
    5460:	6f 5f       	subi	r22, 0xFF	; 255
    5462:	7f 4f       	sbci	r23, 0xFF	; 255
    5464:	6e 0f       	add	r22, r30
    5466:	7f 1f       	adc	r23, r31
	{
		// Send next value byte.
		SPDR = (*values);
    5468:	80 81       	ld	r24, Z
    546a:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1 << SPIF)));
    546c:	0d b4       	in	r0, 0x2d	; 45
    546e:	07 fe       	sbrs	r0, 7
    5470:	fd cf       	rjmp	.-6      	; 0x546c <max3421e_writeMultiple+0x42>

		values++;
    5472:	31 96       	adiw	r30, 0x01	; 1
	// Transfer command byte, 0x02 indicates write.
	SPDR = (reg | 0x02);
	while (!(SPSR & (1 << SPIF)));

	// Transfer values.
	while (count--)
    5474:	e6 17       	cp	r30, r22
    5476:	f7 07       	cpc	r31, r23
    5478:	b9 f7       	brne	.-18     	; 0x5468 <max3421e_writeMultiple+0x3e>
    547a:	cf 01       	movw	r24, r30
    547c:	fe 2e       	mov	r15, r30
    547e:	e9 2e       	mov	r14, r25

		values++;
	}

	// Pull slave select high to indicate end of transfer.
	MAX_SS(1);
    5480:	85 e3       	ldi	r24, 0x35	; 53
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	61 e0       	ldi	r22, 0x01	; 1
    5486:	70 e0       	ldi	r23, 0x00	; 0
    5488:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	return (values);
}
    548c:	8f 2d       	mov	r24, r15
    548e:	9e 2d       	mov	r25, r14
    5490:	1f 91       	pop	r17
    5492:	0f 91       	pop	r16
    5494:	ff 90       	pop	r15
    5496:	ef 90       	pop	r14
    5498:	08 95       	ret

0000549a <max3421e_write>:
 *
 * @param reg register address.
 * @param value value to write.
 */
void max3421e_write(uint8_t reg, uint8_t value)
{
    549a:	0f 93       	push	r16
    549c:	1f 93       	push	r17
    549e:	18 2f       	mov	r17, r24
    54a0:	06 2f       	mov	r16, r22
	// Pull slave select low to indicate start of transfer.
	MAX_SS(0);
    54a2:	85 e3       	ldi	r24, 0x35	; 53
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	60 e0       	ldi	r22, 0x00	; 0
    54a8:	70 e0       	ldi	r23, 0x00	; 0
    54aa:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	// Transfer command byte, 0x02 indicates write.
	SPDR = (reg | 0x02);
    54ae:	12 60       	ori	r17, 0x02	; 2
    54b0:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF)));
    54b2:	0d b4       	in	r0, 0x2d	; 45
    54b4:	07 fe       	sbrs	r0, 7
    54b6:	fd cf       	rjmp	.-6      	; 0x54b2 <max3421e_write+0x18>

	// Transfer value byte.
	SPDR = value;
    54b8:	0e bd       	out	0x2e, r16	; 46
	while (!(SPSR & (1 << SPIF)));
    54ba:	0d b4       	in	r0, 0x2d	; 45
    54bc:	07 fe       	sbrs	r0, 7
    54be:	fd cf       	rjmp	.-6      	; 0x54ba <max3421e_write+0x20>

	// Pull slave select high to indicate end of transfer.
	MAX_SS(1);
    54c0:	85 e3       	ldi	r24, 0x35	; 53
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	61 e0       	ldi	r22, 0x01	; 1
    54c6:	70 e0       	ldi	r23, 0x00	; 0
    54c8:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	return;
}
    54cc:	1f 91       	pop	r17
    54ce:	0f 91       	pop	r16
    54d0:	08 95       	ret

000054d2 <max3421e_busprobe>:
 * Probes the bus to determine device presence and speed, and switches host to this speed.
 */
void max3421e_busprobe(void)
{
	uint8_t bus_sample;
	bus_sample = max3421e_read(MAX_REG_HRSL); //Get J,K status
    54d2:	88 ef       	ldi	r24, 0xF8	; 248
    54d4:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the uint8_t

	switch (bus_sample)
    54d8:	80 7c       	andi	r24, 0xC0	; 192
    54da:	80 34       	cpi	r24, 0x40	; 64
    54dc:	81 f0       	breq	.+32     	; 0x54fe <max3421e_busprobe+0x2c>
    54de:	81 34       	cpi	r24, 0x41	; 65
    54e0:	28 f0       	brcs	.+10     	; 0x54ec <max3421e_busprobe+0x1a>
    54e2:	80 38       	cpi	r24, 0x80	; 128
    54e4:	c9 f0       	breq	.+50     	; 0x5518 <max3421e_busprobe+0x46>
    54e6:	80 3c       	cpi	r24, 0xC0	; 192
    54e8:	31 f0       	breq	.+12     	; 0x54f6 <max3421e_busprobe+0x24>
    54ea:	08 95       	ret
    54ec:	88 23       	and	r24, r24
    54ee:	09 f5       	brne	.+66     	; 0x5532 <max3421e_busprobe+0x60>
		break;
	case (bmSE1): //illegal state
		vbusState = SE1;
		break;
	case (bmSE0): //disconnected state
		vbusState = SE0;
    54f0:	10 92 8c 06 	sts	0x068C, r1
    54f4:	08 95       	ret
			max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
			vbusState = FSHOST;
		}
		break;
	case (bmSE1): //illegal state
		vbusState = SE1;
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	80 93 8c 06 	sts	0x068C, r24
    54fc:	08 95       	ret
			max3421e_write(MAX_REG_MODE, MODE_LS_HOST); //start low-speed host
			vbusState = LSHOST;
		}
		break;
	case (bmKSTATUS):
		if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    54fe:	88 ed       	ldi	r24, 0xD8	; 216
    5500:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    5504:	81 fd       	sbrc	r24, 1
    5506:	0d c0       	rjmp	.+26     	; 0x5522 <max3421e_busprobe+0x50>
		{
			max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
    5508:	88 ed       	ldi	r24, 0xD8	; 216
    550a:	6b ec       	ldi	r22, 0xCB	; 203
    550c:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
			vbusState = LSHOST;
    5510:	83 e0       	ldi	r24, 0x03	; 3
    5512:	80 93 8c 06 	sts	0x068C, r24
    5516:	08 95       	ret

	switch (bus_sample)
	{
	//start full-speed or low-speed host
	case (bmJSTATUS):
		if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    5518:	88 ed       	ldi	r24, 0xD8	; 216
    551a:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    551e:	81 fd       	sbrc	r24, 1
    5520:	f3 cf       	rjmp	.-26     	; 0x5508 <max3421e_busprobe+0x36>
		{
			max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
			vbusState = LSHOST;
		} else
		{
			max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
    5522:	88 ed       	ldi	r24, 0xD8	; 216
    5524:	69 ec       	ldi	r22, 0xC9	; 201
    5526:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
			vbusState = FSHOST;
    552a:	82 e0       	ldi	r24, 0x02	; 2
    552c:	80 93 8c 06 	sts	0x068C, r24
    5530:	08 95       	ret
    5532:	08 95       	ret

00005534 <max3421e_interruptHandler>:

/**
 * Interrupt handler.
 */
uint8_t max3421e_interruptHandler(void)
{
    5534:	1f 93       	push	r17
	uint8_t interruptStatus;
	uint8_t HIRQ_sendback = 0x00;

	// Determine interrupt source.
	interruptStatus = max3421e_read(MAX_REG_HIRQ);
    5536:	88 ec       	ldi	r24, 0xC8	; 200
    5538:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>

	if (interruptStatus & bmFRAMEIRQ)
    553c:	86 fd       	sbrc	r24, 6
    553e:	0d c0       	rjmp	.+26     	; 0x555a <max3421e_interruptHandler+0x26>
    5540:	10 e0       	ldi	r17, 0x00	; 0
	{
		//->1ms SOF interrupt handler
		HIRQ_sendback |= bmFRAMEIRQ;
	}

	if (interruptStatus & bmCONDETIRQ)
    5542:	85 ff       	sbrs	r24, 5
    5544:	03 c0       	rjmp	.+6      	; 0x554c <max3421e_interruptHandler+0x18>
	{
		max3421e_busprobe();
    5546:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <max3421e_busprobe>

		HIRQ_sendback |= bmCONDETIRQ;
    554a:	10 62       	ori	r17, 0x20	; 32
	}

	// End HIRQ interrupts handling, clear serviced IRQs
	max3421e_write(MAX_REG_HIRQ, HIRQ_sendback);
    554c:	88 ec       	ldi	r24, 0xC8	; 200
    554e:	61 2f       	mov	r22, r17
    5550:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

	return (HIRQ_sendback);
}
    5554:	81 2f       	mov	r24, r17
    5556:	1f 91       	pop	r17
    5558:	08 95       	ret
	uint8_t HIRQ_sendback = 0x00;

	// Determine interrupt source.
	interruptStatus = max3421e_read(MAX_REG_HIRQ);

	if (interruptStatus & bmFRAMEIRQ)
    555a:	10 e4       	ldi	r17, 0x40	; 64
    555c:	f2 cf       	rjmp	.-28     	; 0x5542 <max3421e_interruptHandler+0xe>

0000555e <max3421e_poll>:
/**
 * MAX3421 state change task and interrupt handler.
 * @return error code or 0 if successful.
 */
uint8_t max3421e_poll(void)
{
    555e:	1f 93       	push	r17
	uint8_t rcode = 0;

	// Check interrupt.
	if (MAX_INT() == 0)
    5560:	76 9b       	sbis	0x0e, 6	; 14
    5562:	0a c0       	rjmp	.+20     	; 0x5578 <max3421e_poll+0x1a>
    5564:	10 e0       	ldi	r17, 0x00	; 0
		rcode = max3421e_interruptHandler();

	if (MAX_GPX() == 0)
    5566:	80 91 05 01 	lds	r24, 0x0105
    556a:	83 fd       	sbrc	r24, 3
    556c:	02 c0       	rjmp	.+4      	; 0x5572 <max3421e_poll+0x14>
		max3421e_gpxInterruptHandler();
    556e:	0e 94 11 2a 	call	0x5422	; 0x5422 <max3421e_gpxInterruptHandler>

	return (rcode);
}
    5572:	81 2f       	mov	r24, r17
    5574:	1f 91       	pop	r17
    5576:	08 95       	ret
{
	uint8_t rcode = 0;

	// Check interrupt.
	if (MAX_INT() == 0)
		rcode = max3421e_interruptHandler();
    5578:	0e 94 9a 2a 	call	0x5534	; 0x5534 <max3421e_interruptHandler>
    557c:	18 2f       	mov	r17, r24
    557e:	f3 cf       	rjmp	.-26     	; 0x5566 <max3421e_poll+0x8>

00005580 <max3421e_reset>:
/**
 * Resets the max3412e. Sets the chip reset bit, SPI configuration is not affected.
 * @return true iff success.
 */
boolean max3421e_reset(void)
{
    5580:	1f 93       	push	r17
	uint8_t tmp = 0;

	// Chip reset. This stops the oscillator
	max3421e_write(MAX_REG_USBCTL, bmCHIPRES);
    5582:	88 e7       	ldi	r24, 0x78	; 120
    5584:	60 e2       	ldi	r22, 0x20	; 32
    5586:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

	// Remove the reset
	max3421e_write(MAX_REG_USBCTL, 0x00);
    558a:	88 e7       	ldi	r24, 0x78	; 120
    558c:	60 e0       	ldi	r22, 0x00	; 0
    558e:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
    5592:	80 e4       	ldi	r24, 0x40	; 64
    5594:	9c e9       	ldi	r25, 0x9C	; 156
    5596:	01 97       	sbiw	r24, 0x01	; 1
    5598:	f1 f7       	brne	.-4      	; 0x5596 <max3421e_reset+0x16>
    559a:	10 e0       	ldi	r17, 0x00	; 0
    559c:	02 c0       	rjmp	.+4      	; 0x55a2 <max3421e_reset+0x22>
    559e:	11 50       	subi	r17, 0x01	; 1
	// Wait until the PLL is stable
	while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
	{
		// Timeout after 256 attempts.
		tmp++;
		if (tmp == 0)
    55a0:	41 f0       	breq	.+16     	; 0x55b2 <max3421e_reset+0x32>
	max3421e_write(MAX_REG_USBCTL, 0x00);

	_delay_ms(10);

	// Wait until the PLL is stable
	while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    55a2:	88 e6       	ldi	r24, 0x68	; 104
    55a4:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    55a8:	80 ff       	sbrs	r24, 0
    55aa:	f9 cf       	rjmp	.-14     	; 0x559e <max3421e_reset+0x1e>
    55ac:	81 e0       	ldi	r24, 0x01	; 1
			return (false);
	}

	// Success.
	return (true);
}
    55ae:	1f 91       	pop	r17
    55b0:	08 95       	ret
	// Wait until the PLL is stable
	while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
	{
		// Timeout after 256 attempts.
		tmp++;
		if (tmp == 0)
    55b2:	80 e0       	ldi	r24, 0x00	; 0
			return (false);
	}

	// Success.
	return (true);
}
    55b4:	1f 91       	pop	r17
    55b6:	08 95       	ret

000055b8 <max3421e_powerOn>:
 * Initialises the max3421e after power-on.
 */
void max3421e_powerOn(void)
{
	// Configure full-duplex SPI, interrupt pulse.
	max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
    55b8:	88 e8       	ldi	r24, 0x88	; 136
    55ba:	6a e1       	ldi	r22, 0x1A	; 26
    55bc:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

	// Stop/start the oscillator.
	if (max3421e_reset() == false)
    55c0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <max3421e_reset>
    55c4:	88 23       	and	r24, r24
    55c6:	e1 f0       	breq	.+56     	; 0x5600 <max3421e_powerOn+0x48>
		printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));

	// Configure host operation.
	max3421e_write(MAX_REG_MODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ ); // set pull-downs, Host, Separate GPIN IRQ on GPX
    55c8:	88 ed       	ldi	r24, 0xD8	; 216
    55ca:	61 ed       	ldi	r22, 0xD1	; 209
    55cc:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
	max3421e_write(MAX_REG_HIEN, bmCONDETIE | bmFRAMEIE ); //connection detection
    55d0:	80 ed       	ldi	r24, 0xD0	; 208
    55d2:	60 e6       	ldi	r22, 0x60	; 96
    55d4:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

	// Check if device is connected.
	max3421e_write(MAX_REG_HCTL, bmSAMPLEBUS ); // sample USB bus
    55d8:	88 ee       	ldi	r24, 0xE8	; 232
    55da:	64 e0       	ldi	r22, 0x04	; 4
    55dc:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
	while (!(max3421e_read(MAX_REG_HCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    55e0:	88 ee       	ldi	r24, 0xE8	; 232
    55e2:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_read>
    55e6:	82 ff       	sbrs	r24, 2
    55e8:	fb cf       	rjmp	.-10     	; 0x55e0 <max3421e_powerOn+0x28>

	max3421e_busprobe(); //check if anything is connected
    55ea:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <max3421e_busprobe>
	max3421e_write(MAX_REG_HIRQ, bmCONDETIRQ ); //clear connection detect interrupt
    55ee:	88 ec       	ldi	r24, 0xC8	; 200
    55f0:	60 e2       	ldi	r22, 0x20	; 32
    55f2:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>

	// Enable interrupt pin.
	max3421e_write(MAX_REG_CPUCTL, 0x01);
    55f6:	80 e8       	ldi	r24, 0x80	; 128
    55f8:	61 e0       	ldi	r22, 0x01	; 1
    55fa:	0e 94 4d 2a 	call	0x549a	; 0x549a <max3421e_write>
}
    55fe:	08 95       	ret
	// Configure full-duplex SPI, interrupt pulse.
	max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX

	// Stop/start the oscillator.
	if (max3421e_reset() == false)
		printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));
    5600:	81 ef       	ldi	r24, 0xF1	; 241
    5602:	95 e0       	ldi	r25, 0x05	; 5
    5604:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <printPgmString>
    5608:	df cf       	rjmp	.-66     	; 0x55c8 <max3421e_powerOn+0x10>

0000560a <max3421e_init>:
 * Must be called before powerOn.
 */
void max3421e_init()
{

	SPI_begin();
    560a:	0e 94 1c 2b 	call	0x5638	; 0x5638 <SPI_begin>
	pinMode(PIN_MAX_GPX, INPUT);
	pinMode(PIN_MAX_RESET, OUTPUT);
*/


	DDRE &= ~ 0x40;
    560e:	6e 98       	cbi	0x0d, 6	; 13
	DDRJ &= ~ 0x08;
    5610:	e4 e0       	ldi	r30, 0x04	; 4
    5612:	f1 e0       	ldi	r31, 0x01	; 1
    5614:	80 81       	ld	r24, Z
    5616:	87 7f       	andi	r24, 0xF7	; 247
    5618:	80 83       	st	Z, r24
	DDRJ |= 0x04;
    561a:	80 81       	ld	r24, Z
    561c:	84 60       	ori	r24, 0x04	; 4
    561e:	80 83       	st	Z, r24

#endif
*/

	// Pull SPI !SS high
	MAX_SS(1);
    5620:	85 e3       	ldi	r24, 0x35	; 53
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	61 e0       	ldi	r22, 0x01	; 1
    5626:	70 e0       	ldi	r23, 0x00	; 0
    5628:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <digitalWrite>

	// Reset
	MAX_RESET(1);
    562c:	e5 e0       	ldi	r30, 0x05	; 5
    562e:	f1 e0       	ldi	r31, 0x01	; 1
    5630:	80 81       	ld	r24, Z
    5632:	84 60       	ori	r24, 0x04	; 4
    5634:	80 83       	st	Z, r24
}
    5636:	08 95       	ret

00005638 <SPI_begin>:
  //digitalWrite(SS, HIGH);

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    5638:	8c b5       	in	r24, 0x2c	; 44
    563a:	80 61       	ori	r24, 0x10	; 16
    563c:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    563e:	8c b5       	in	r24, 0x2c	; 44
    5640:	80 64       	ori	r24, 0x40	; 64
    5642:	8c bd       	out	0x2c, r24	; 44
}
    5644:	08 95       	ret

00005646 <SPI_end>:

void SPI_end() {
  SPCR &= ~_BV(SPE);
    5646:	8c b5       	in	r24, 0x2c	; 44
    5648:	8f 7b       	andi	r24, 0xBF	; 191
    564a:	8c bd       	out	0x2c, r24	; 44
}

void SPIClass_detachInterrupt() {
  SPCR &= ~_BV(SPIE);
}
}
    564c:	08 95       	ret

0000564e <SPI_setBitOrder>:

void SPI_setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    564e:	88 23       	and	r24, r24
    5650:	21 f0       	breq	.+8      	; 0x565a <SPI_setBitOrder+0xc>
    SPCR |= _BV(DORD);
  } else {
    SPCR &= ~(_BV(DORD));
    5652:	8c b5       	in	r24, 0x2c	; 44
    5654:	8f 7d       	andi	r24, 0xDF	; 223
    5656:	8c bd       	out	0x2c, r24	; 44
    5658:	08 95       	ret
}

void SPI_setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    SPCR |= _BV(DORD);
    565a:	8c b5       	in	r24, 0x2c	; 44
    565c:	80 62       	ori	r24, 0x20	; 32
    565e:	8c bd       	out	0x2c, r24	; 44
    5660:	08 95       	ret

00005662 <SPI_setDataMode>:
  }
}

void SPI_setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    5662:	9c b5       	in	r25, 0x2c	; 44
    5664:	93 7f       	andi	r25, 0xF3	; 243
    5666:	98 2b       	or	r25, r24
    5668:	9c bd       	out	0x2c, r25	; 44
}
    566a:	08 95       	ret

0000566c <SPI_setClockDivider>:

void SPI_setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    566c:	9c b5       	in	r25, 0x2c	; 44
    566e:	28 2f       	mov	r18, r24
    5670:	23 70       	andi	r18, 0x03	; 3
    5672:	9c 7f       	andi	r25, 0xFC	; 252
    5674:	29 2b       	or	r18, r25
    5676:	2c bd       	out	0x2c, r18	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    5678:	9d b5       	in	r25, 0x2d	; 45
    567a:	86 95       	lsr	r24
    567c:	86 95       	lsr	r24
    567e:	81 70       	andi	r24, 0x01	; 1
    5680:	9e 7f       	andi	r25, 0xFE	; 254
    5682:	98 2b       	or	r25, r24
    5684:	9d bd       	out	0x2d, r25	; 45
}
    5686:	08 95       	ret

00005688 <__subsf3>:
    5688:	50 58       	subi	r21, 0x80	; 128

0000568a <__addsf3>:
    568a:	bb 27       	eor	r27, r27
    568c:	aa 27       	eor	r26, r26
    568e:	0e d0       	rcall	.+28     	; 0x56ac <__addsf3x>
    5690:	11 c2       	rjmp	.+1058   	; 0x5ab4 <__fp_round>
    5692:	02 d2       	rcall	.+1028   	; 0x5a98 <__fp_pscA>
    5694:	30 f0       	brcs	.+12     	; 0x56a2 <__addsf3+0x18>
    5696:	07 d2       	rcall	.+1038   	; 0x5aa6 <__fp_pscB>
    5698:	20 f0       	brcs	.+8      	; 0x56a2 <__addsf3+0x18>
    569a:	31 f4       	brne	.+12     	; 0x56a8 <__addsf3+0x1e>
    569c:	9f 3f       	cpi	r25, 0xFF	; 255
    569e:	11 f4       	brne	.+4      	; 0x56a4 <__addsf3+0x1a>
    56a0:	1e f4       	brtc	.+6      	; 0x56a8 <__addsf3+0x1e>
    56a2:	d2 c1       	rjmp	.+932    	; 0x5a48 <__fp_nan>
    56a4:	0e f4       	brtc	.+2      	; 0x56a8 <__addsf3+0x1e>
    56a6:	e0 95       	com	r30
    56a8:	e7 fb       	bst	r30, 7
    56aa:	9f c1       	rjmp	.+830    	; 0x59ea <__fp_inf>

000056ac <__addsf3x>:
    56ac:	e9 2f       	mov	r30, r25
    56ae:	13 d2       	rcall	.+1062   	; 0x5ad6 <__fp_split3>
    56b0:	80 f3       	brcs	.-32     	; 0x5692 <__addsf3+0x8>
    56b2:	ba 17       	cp	r27, r26
    56b4:	62 07       	cpc	r22, r18
    56b6:	73 07       	cpc	r23, r19
    56b8:	84 07       	cpc	r24, r20
    56ba:	95 07       	cpc	r25, r21
    56bc:	18 f0       	brcs	.+6      	; 0x56c4 <__addsf3x+0x18>
    56be:	71 f4       	brne	.+28     	; 0x56dc <__addsf3x+0x30>
    56c0:	9e f5       	brtc	.+102    	; 0x5728 <__addsf3x+0x7c>
    56c2:	42 c2       	rjmp	.+1156   	; 0x5b48 <__fp_zero>
    56c4:	0e f4       	brtc	.+2      	; 0x56c8 <__addsf3x+0x1c>
    56c6:	e0 95       	com	r30
    56c8:	0b 2e       	mov	r0, r27
    56ca:	ba 2f       	mov	r27, r26
    56cc:	a0 2d       	mov	r26, r0
    56ce:	0b 01       	movw	r0, r22
    56d0:	b9 01       	movw	r22, r18
    56d2:	90 01       	movw	r18, r0
    56d4:	0c 01       	movw	r0, r24
    56d6:	ca 01       	movw	r24, r20
    56d8:	a0 01       	movw	r20, r0
    56da:	11 24       	eor	r1, r1
    56dc:	ff 27       	eor	r31, r31
    56de:	59 1b       	sub	r21, r25
    56e0:	99 f0       	breq	.+38     	; 0x5708 <__addsf3x+0x5c>
    56e2:	59 3f       	cpi	r21, 0xF9	; 249
    56e4:	50 f4       	brcc	.+20     	; 0x56fa <__addsf3x+0x4e>
    56e6:	50 3e       	cpi	r21, 0xE0	; 224
    56e8:	68 f1       	brcs	.+90     	; 0x5744 <__addsf3x+0x98>
    56ea:	1a 16       	cp	r1, r26
    56ec:	f0 40       	sbci	r31, 0x00	; 0
    56ee:	a2 2f       	mov	r26, r18
    56f0:	23 2f       	mov	r18, r19
    56f2:	34 2f       	mov	r19, r20
    56f4:	44 27       	eor	r20, r20
    56f6:	58 5f       	subi	r21, 0xF8	; 248
    56f8:	f3 cf       	rjmp	.-26     	; 0x56e0 <__addsf3x+0x34>
    56fa:	46 95       	lsr	r20
    56fc:	37 95       	ror	r19
    56fe:	27 95       	ror	r18
    5700:	a7 95       	ror	r26
    5702:	f0 40       	sbci	r31, 0x00	; 0
    5704:	53 95       	inc	r21
    5706:	c9 f7       	brne	.-14     	; 0x56fa <__addsf3x+0x4e>
    5708:	7e f4       	brtc	.+30     	; 0x5728 <__addsf3x+0x7c>
    570a:	1f 16       	cp	r1, r31
    570c:	ba 0b       	sbc	r27, r26
    570e:	62 0b       	sbc	r22, r18
    5710:	73 0b       	sbc	r23, r19
    5712:	84 0b       	sbc	r24, r20
    5714:	ba f0       	brmi	.+46     	; 0x5744 <__addsf3x+0x98>
    5716:	91 50       	subi	r25, 0x01	; 1
    5718:	a1 f0       	breq	.+40     	; 0x5742 <__addsf3x+0x96>
    571a:	ff 0f       	add	r31, r31
    571c:	bb 1f       	adc	r27, r27
    571e:	66 1f       	adc	r22, r22
    5720:	77 1f       	adc	r23, r23
    5722:	88 1f       	adc	r24, r24
    5724:	c2 f7       	brpl	.-16     	; 0x5716 <__addsf3x+0x6a>
    5726:	0e c0       	rjmp	.+28     	; 0x5744 <__addsf3x+0x98>
    5728:	ba 0f       	add	r27, r26
    572a:	62 1f       	adc	r22, r18
    572c:	73 1f       	adc	r23, r19
    572e:	84 1f       	adc	r24, r20
    5730:	48 f4       	brcc	.+18     	; 0x5744 <__addsf3x+0x98>
    5732:	87 95       	ror	r24
    5734:	77 95       	ror	r23
    5736:	67 95       	ror	r22
    5738:	b7 95       	ror	r27
    573a:	f7 95       	ror	r31
    573c:	9e 3f       	cpi	r25, 0xFE	; 254
    573e:	08 f0       	brcs	.+2      	; 0x5742 <__addsf3x+0x96>
    5740:	b3 cf       	rjmp	.-154    	; 0x56a8 <__addsf3+0x1e>
    5742:	93 95       	inc	r25
    5744:	88 0f       	add	r24, r24
    5746:	08 f0       	brcs	.+2      	; 0x574a <__addsf3x+0x9e>
    5748:	99 27       	eor	r25, r25
    574a:	ee 0f       	add	r30, r30
    574c:	97 95       	ror	r25
    574e:	87 95       	ror	r24
    5750:	08 95       	ret

00005752 <atan>:
    5752:	df 93       	push	r29
    5754:	dd 27       	eor	r29, r29
    5756:	b9 2f       	mov	r27, r25
    5758:	bf 77       	andi	r27, 0x7F	; 127
    575a:	40 e8       	ldi	r20, 0x80	; 128
    575c:	5f e3       	ldi	r21, 0x3F	; 63
    575e:	16 16       	cp	r1, r22
    5760:	17 06       	cpc	r1, r23
    5762:	48 07       	cpc	r20, r24
    5764:	5b 07       	cpc	r21, r27
    5766:	10 f4       	brcc	.+4      	; 0x576c <atan+0x1a>
    5768:	d9 2f       	mov	r29, r25
    576a:	f9 d1       	rcall	.+1010   	; 0x5b5e <inverse>
    576c:	9f 93       	push	r25
    576e:	8f 93       	push	r24
    5770:	7f 93       	push	r23
    5772:	6f 93       	push	r22
    5774:	23 d3       	rcall	.+1606   	; 0x5dbc <square>
    5776:	ec e1       	ldi	r30, 0x1C	; 28
    5778:	f2 e0       	ldi	r31, 0x02	; 2
    577a:	69 d1       	rcall	.+722    	; 0x5a4e <__fp_powser>
    577c:	9b d1       	rcall	.+822    	; 0x5ab4 <__fp_round>
    577e:	2f 91       	pop	r18
    5780:	3f 91       	pop	r19
    5782:	4f 91       	pop	r20
    5784:	5f 91       	pop	r21
    5786:	61 d2       	rcall	.+1218   	; 0x5c4a <__mulsf3x>
    5788:	dd 23       	and	r29, r29
    578a:	49 f0       	breq	.+18     	; 0x579e <atan+0x4c>
    578c:	90 58       	subi	r25, 0x80	; 128
    578e:	a2 ea       	ldi	r26, 0xA2	; 162
    5790:	2a ed       	ldi	r18, 0xDA	; 218
    5792:	3f e0       	ldi	r19, 0x0F	; 15
    5794:	49 ec       	ldi	r20, 0xC9	; 201
    5796:	5f e3       	ldi	r21, 0x3F	; 63
    5798:	d0 78       	andi	r29, 0x80	; 128
    579a:	5d 27       	eor	r21, r29
    579c:	87 df       	rcall	.-242    	; 0x56ac <__addsf3x>
    579e:	df 91       	pop	r29
    57a0:	89 c1       	rjmp	.+786    	; 0x5ab4 <__fp_round>

000057a2 <ceil>:
    57a2:	bb d1       	rcall	.+886    	; 0x5b1a <__fp_trunc>
    57a4:	80 f0       	brcs	.+32     	; 0x57c6 <ceil+0x24>
    57a6:	9f 37       	cpi	r25, 0x7F	; 127
    57a8:	40 f4       	brcc	.+16     	; 0x57ba <ceil+0x18>
    57aa:	91 11       	cpse	r25, r1
    57ac:	0e f4       	brtc	.+2      	; 0x57b0 <ceil+0xe>
    57ae:	cd c1       	rjmp	.+922    	; 0x5b4a <__fp_szero>
    57b0:	60 e0       	ldi	r22, 0x00	; 0
    57b2:	70 e0       	ldi	r23, 0x00	; 0
    57b4:	80 e8       	ldi	r24, 0x80	; 128
    57b6:	9f e3       	ldi	r25, 0x3F	; 63
    57b8:	08 95       	ret
    57ba:	26 f0       	brts	.+8      	; 0x57c4 <ceil+0x22>
    57bc:	1b 16       	cp	r1, r27
    57be:	61 1d       	adc	r22, r1
    57c0:	71 1d       	adc	r23, r1
    57c2:	81 1d       	adc	r24, r1
    57c4:	18 c1       	rjmp	.+560    	; 0x59f6 <__fp_mintl>
    57c6:	32 c1       	rjmp	.+612    	; 0x5a2c <__fp_mpack>

000057c8 <__cmpsf2>:
    57c8:	ec d0       	rcall	.+472    	; 0x59a2 <__fp_cmp>
    57ca:	08 f4       	brcc	.+2      	; 0x57ce <__cmpsf2+0x6>
    57cc:	81 e0       	ldi	r24, 0x01	; 1
    57ce:	08 95       	ret

000057d0 <__divsf3>:
    57d0:	0c d0       	rcall	.+24     	; 0x57ea <__divsf3x>
    57d2:	70 c1       	rjmp	.+736    	; 0x5ab4 <__fp_round>
    57d4:	68 d1       	rcall	.+720    	; 0x5aa6 <__fp_pscB>
    57d6:	40 f0       	brcs	.+16     	; 0x57e8 <__divsf3+0x18>
    57d8:	5f d1       	rcall	.+702    	; 0x5a98 <__fp_pscA>
    57da:	30 f0       	brcs	.+12     	; 0x57e8 <__divsf3+0x18>
    57dc:	21 f4       	brne	.+8      	; 0x57e6 <__divsf3+0x16>
    57de:	5f 3f       	cpi	r21, 0xFF	; 255
    57e0:	19 f0       	breq	.+6      	; 0x57e8 <__divsf3+0x18>
    57e2:	03 c1       	rjmp	.+518    	; 0x59ea <__fp_inf>
    57e4:	51 11       	cpse	r21, r1
    57e6:	b1 c1       	rjmp	.+866    	; 0x5b4a <__fp_szero>
    57e8:	2f c1       	rjmp	.+606    	; 0x5a48 <__fp_nan>

000057ea <__divsf3x>:
    57ea:	75 d1       	rcall	.+746    	; 0x5ad6 <__fp_split3>
    57ec:	98 f3       	brcs	.-26     	; 0x57d4 <__divsf3+0x4>

000057ee <__divsf3_pse>:
    57ee:	99 23       	and	r25, r25
    57f0:	c9 f3       	breq	.-14     	; 0x57e4 <__divsf3+0x14>
    57f2:	55 23       	and	r21, r21
    57f4:	b1 f3       	breq	.-20     	; 0x57e2 <__divsf3+0x12>
    57f6:	95 1b       	sub	r25, r21
    57f8:	55 0b       	sbc	r21, r21
    57fa:	bb 27       	eor	r27, r27
    57fc:	aa 27       	eor	r26, r26
    57fe:	62 17       	cp	r22, r18
    5800:	73 07       	cpc	r23, r19
    5802:	84 07       	cpc	r24, r20
    5804:	38 f0       	brcs	.+14     	; 0x5814 <__divsf3_pse+0x26>
    5806:	9f 5f       	subi	r25, 0xFF	; 255
    5808:	5f 4f       	sbci	r21, 0xFF	; 255
    580a:	22 0f       	add	r18, r18
    580c:	33 1f       	adc	r19, r19
    580e:	44 1f       	adc	r20, r20
    5810:	aa 1f       	adc	r26, r26
    5812:	a9 f3       	breq	.-22     	; 0x57fe <__divsf3_pse+0x10>
    5814:	33 d0       	rcall	.+102    	; 0x587c <__divsf3_pse+0x8e>
    5816:	0e 2e       	mov	r0, r30
    5818:	3a f0       	brmi	.+14     	; 0x5828 <__divsf3_pse+0x3a>
    581a:	e0 e8       	ldi	r30, 0x80	; 128
    581c:	30 d0       	rcall	.+96     	; 0x587e <__divsf3_pse+0x90>
    581e:	91 50       	subi	r25, 0x01	; 1
    5820:	50 40       	sbci	r21, 0x00	; 0
    5822:	e6 95       	lsr	r30
    5824:	00 1c       	adc	r0, r0
    5826:	ca f7       	brpl	.-14     	; 0x581a <__divsf3_pse+0x2c>
    5828:	29 d0       	rcall	.+82     	; 0x587c <__divsf3_pse+0x8e>
    582a:	fe 2f       	mov	r31, r30
    582c:	27 d0       	rcall	.+78     	; 0x587c <__divsf3_pse+0x8e>
    582e:	66 0f       	add	r22, r22
    5830:	77 1f       	adc	r23, r23
    5832:	88 1f       	adc	r24, r24
    5834:	bb 1f       	adc	r27, r27
    5836:	26 17       	cp	r18, r22
    5838:	37 07       	cpc	r19, r23
    583a:	48 07       	cpc	r20, r24
    583c:	ab 07       	cpc	r26, r27
    583e:	b0 e8       	ldi	r27, 0x80	; 128
    5840:	09 f0       	breq	.+2      	; 0x5844 <__divsf3_pse+0x56>
    5842:	bb 0b       	sbc	r27, r27
    5844:	80 2d       	mov	r24, r0
    5846:	bf 01       	movw	r22, r30
    5848:	ff 27       	eor	r31, r31
    584a:	93 58       	subi	r25, 0x83	; 131
    584c:	5f 4f       	sbci	r21, 0xFF	; 255
    584e:	2a f0       	brmi	.+10     	; 0x585a <__divsf3_pse+0x6c>
    5850:	9e 3f       	cpi	r25, 0xFE	; 254
    5852:	51 05       	cpc	r21, r1
    5854:	68 f0       	brcs	.+26     	; 0x5870 <__divsf3_pse+0x82>
    5856:	c9 c0       	rjmp	.+402    	; 0x59ea <__fp_inf>
    5858:	78 c1       	rjmp	.+752    	; 0x5b4a <__fp_szero>
    585a:	5f 3f       	cpi	r21, 0xFF	; 255
    585c:	ec f3       	brlt	.-6      	; 0x5858 <__divsf3_pse+0x6a>
    585e:	98 3e       	cpi	r25, 0xE8	; 232
    5860:	dc f3       	brlt	.-10     	; 0x5858 <__divsf3_pse+0x6a>
    5862:	86 95       	lsr	r24
    5864:	77 95       	ror	r23
    5866:	67 95       	ror	r22
    5868:	b7 95       	ror	r27
    586a:	f7 95       	ror	r31
    586c:	9f 5f       	subi	r25, 0xFF	; 255
    586e:	c9 f7       	brne	.-14     	; 0x5862 <__divsf3_pse+0x74>
    5870:	88 0f       	add	r24, r24
    5872:	91 1d       	adc	r25, r1
    5874:	96 95       	lsr	r25
    5876:	87 95       	ror	r24
    5878:	97 f9       	bld	r25, 7
    587a:	08 95       	ret
    587c:	e1 e0       	ldi	r30, 0x01	; 1
    587e:	66 0f       	add	r22, r22
    5880:	77 1f       	adc	r23, r23
    5882:	88 1f       	adc	r24, r24
    5884:	bb 1f       	adc	r27, r27
    5886:	62 17       	cp	r22, r18
    5888:	73 07       	cpc	r23, r19
    588a:	84 07       	cpc	r24, r20
    588c:	ba 07       	cpc	r27, r26
    588e:	20 f0       	brcs	.+8      	; 0x5898 <__divsf3_pse+0xaa>
    5890:	62 1b       	sub	r22, r18
    5892:	73 0b       	sbc	r23, r19
    5894:	84 0b       	sbc	r24, r20
    5896:	ba 0b       	sbc	r27, r26
    5898:	ee 1f       	adc	r30, r30
    589a:	88 f7       	brcc	.-30     	; 0x587e <__divsf3_pse+0x90>
    589c:	e0 95       	com	r30
    589e:	08 95       	ret

000058a0 <__fixsfsi>:
    58a0:	04 d0       	rcall	.+8      	; 0x58aa <__fixunssfsi>
    58a2:	68 94       	set
    58a4:	b1 11       	cpse	r27, r1
    58a6:	51 c1       	rjmp	.+674    	; 0x5b4a <__fp_szero>
    58a8:	08 95       	ret

000058aa <__fixunssfsi>:
    58aa:	1d d1       	rcall	.+570    	; 0x5ae6 <__fp_splitA>
    58ac:	88 f0       	brcs	.+34     	; 0x58d0 <__fixunssfsi+0x26>
    58ae:	9f 57       	subi	r25, 0x7F	; 127
    58b0:	90 f0       	brcs	.+36     	; 0x58d6 <__fixunssfsi+0x2c>
    58b2:	b9 2f       	mov	r27, r25
    58b4:	99 27       	eor	r25, r25
    58b6:	b7 51       	subi	r27, 0x17	; 23
    58b8:	a0 f0       	brcs	.+40     	; 0x58e2 <__fixunssfsi+0x38>
    58ba:	d1 f0       	breq	.+52     	; 0x58f0 <__fixunssfsi+0x46>
    58bc:	66 0f       	add	r22, r22
    58be:	77 1f       	adc	r23, r23
    58c0:	88 1f       	adc	r24, r24
    58c2:	99 1f       	adc	r25, r25
    58c4:	1a f0       	brmi	.+6      	; 0x58cc <__fixunssfsi+0x22>
    58c6:	ba 95       	dec	r27
    58c8:	c9 f7       	brne	.-14     	; 0x58bc <__fixunssfsi+0x12>
    58ca:	12 c0       	rjmp	.+36     	; 0x58f0 <__fixunssfsi+0x46>
    58cc:	b1 30       	cpi	r27, 0x01	; 1
    58ce:	81 f0       	breq	.+32     	; 0x58f0 <__fixunssfsi+0x46>
    58d0:	3b d1       	rcall	.+630    	; 0x5b48 <__fp_zero>
    58d2:	b1 e0       	ldi	r27, 0x01	; 1
    58d4:	08 95       	ret
    58d6:	38 c1       	rjmp	.+624    	; 0x5b48 <__fp_zero>
    58d8:	67 2f       	mov	r22, r23
    58da:	78 2f       	mov	r23, r24
    58dc:	88 27       	eor	r24, r24
    58de:	b8 5f       	subi	r27, 0xF8	; 248
    58e0:	39 f0       	breq	.+14     	; 0x58f0 <__fixunssfsi+0x46>
    58e2:	b9 3f       	cpi	r27, 0xF9	; 249
    58e4:	cc f3       	brlt	.-14     	; 0x58d8 <__fixunssfsi+0x2e>
    58e6:	86 95       	lsr	r24
    58e8:	77 95       	ror	r23
    58ea:	67 95       	ror	r22
    58ec:	b3 95       	inc	r27
    58ee:	d9 f7       	brne	.-10     	; 0x58e6 <__fixunssfsi+0x3c>
    58f0:	3e f4       	brtc	.+14     	; 0x5900 <__fixunssfsi+0x56>
    58f2:	90 95       	com	r25
    58f4:	80 95       	com	r24
    58f6:	70 95       	com	r23
    58f8:	61 95       	neg	r22
    58fa:	7f 4f       	sbci	r23, 0xFF	; 255
    58fc:	8f 4f       	sbci	r24, 0xFF	; 255
    58fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5900:	08 95       	ret

00005902 <__floatunsisf>:
    5902:	e8 94       	clt
    5904:	09 c0       	rjmp	.+18     	; 0x5918 <__floatsisf+0x12>

00005906 <__floatsisf>:
    5906:	97 fb       	bst	r25, 7
    5908:	3e f4       	brtc	.+14     	; 0x5918 <__floatsisf+0x12>
    590a:	90 95       	com	r25
    590c:	80 95       	com	r24
    590e:	70 95       	com	r23
    5910:	61 95       	neg	r22
    5912:	7f 4f       	sbci	r23, 0xFF	; 255
    5914:	8f 4f       	sbci	r24, 0xFF	; 255
    5916:	9f 4f       	sbci	r25, 0xFF	; 255
    5918:	99 23       	and	r25, r25
    591a:	a9 f0       	breq	.+42     	; 0x5946 <__floatsisf+0x40>
    591c:	f9 2f       	mov	r31, r25
    591e:	96 e9       	ldi	r25, 0x96	; 150
    5920:	bb 27       	eor	r27, r27
    5922:	93 95       	inc	r25
    5924:	f6 95       	lsr	r31
    5926:	87 95       	ror	r24
    5928:	77 95       	ror	r23
    592a:	67 95       	ror	r22
    592c:	b7 95       	ror	r27
    592e:	f1 11       	cpse	r31, r1
    5930:	f8 cf       	rjmp	.-16     	; 0x5922 <__floatsisf+0x1c>
    5932:	fa f4       	brpl	.+62     	; 0x5972 <__floatsisf+0x6c>
    5934:	bb 0f       	add	r27, r27
    5936:	11 f4       	brne	.+4      	; 0x593c <__floatsisf+0x36>
    5938:	60 ff       	sbrs	r22, 0
    593a:	1b c0       	rjmp	.+54     	; 0x5972 <__floatsisf+0x6c>
    593c:	6f 5f       	subi	r22, 0xFF	; 255
    593e:	7f 4f       	sbci	r23, 0xFF	; 255
    5940:	8f 4f       	sbci	r24, 0xFF	; 255
    5942:	9f 4f       	sbci	r25, 0xFF	; 255
    5944:	16 c0       	rjmp	.+44     	; 0x5972 <__floatsisf+0x6c>
    5946:	88 23       	and	r24, r24
    5948:	11 f0       	breq	.+4      	; 0x594e <__floatsisf+0x48>
    594a:	96 e9       	ldi	r25, 0x96	; 150
    594c:	11 c0       	rjmp	.+34     	; 0x5970 <__floatsisf+0x6a>
    594e:	77 23       	and	r23, r23
    5950:	21 f0       	breq	.+8      	; 0x595a <__floatsisf+0x54>
    5952:	9e e8       	ldi	r25, 0x8E	; 142
    5954:	87 2f       	mov	r24, r23
    5956:	76 2f       	mov	r23, r22
    5958:	05 c0       	rjmp	.+10     	; 0x5964 <__floatsisf+0x5e>
    595a:	66 23       	and	r22, r22
    595c:	71 f0       	breq	.+28     	; 0x597a <__floatsisf+0x74>
    595e:	96 e8       	ldi	r25, 0x86	; 134
    5960:	86 2f       	mov	r24, r22
    5962:	70 e0       	ldi	r23, 0x00	; 0
    5964:	60 e0       	ldi	r22, 0x00	; 0
    5966:	2a f0       	brmi	.+10     	; 0x5972 <__floatsisf+0x6c>
    5968:	9a 95       	dec	r25
    596a:	66 0f       	add	r22, r22
    596c:	77 1f       	adc	r23, r23
    596e:	88 1f       	adc	r24, r24
    5970:	da f7       	brpl	.-10     	; 0x5968 <__floatsisf+0x62>
    5972:	88 0f       	add	r24, r24
    5974:	96 95       	lsr	r25
    5976:	87 95       	ror	r24
    5978:	97 f9       	bld	r25, 7
    597a:	08 95       	ret

0000597c <floor>:
    597c:	ce d0       	rcall	.+412    	; 0x5b1a <__fp_trunc>
    597e:	80 f0       	brcs	.+32     	; 0x59a0 <floor+0x24>
    5980:	9f 37       	cpi	r25, 0x7F	; 127
    5982:	40 f4       	brcc	.+16     	; 0x5994 <floor+0x18>
    5984:	91 11       	cpse	r25, r1
    5986:	0e f0       	brts	.+2      	; 0x598a <floor+0xe>
    5988:	e0 c0       	rjmp	.+448    	; 0x5b4a <__fp_szero>
    598a:	60 e0       	ldi	r22, 0x00	; 0
    598c:	70 e0       	ldi	r23, 0x00	; 0
    598e:	80 e8       	ldi	r24, 0x80	; 128
    5990:	9f eb       	ldi	r25, 0xBF	; 191
    5992:	08 95       	ret
    5994:	26 f4       	brtc	.+8      	; 0x599e <floor+0x22>
    5996:	1b 16       	cp	r1, r27
    5998:	61 1d       	adc	r22, r1
    599a:	71 1d       	adc	r23, r1
    599c:	81 1d       	adc	r24, r1
    599e:	2b c0       	rjmp	.+86     	; 0x59f6 <__fp_mintl>
    59a0:	45 c0       	rjmp	.+138    	; 0x5a2c <__fp_mpack>

000059a2 <__fp_cmp>:
    59a2:	99 0f       	add	r25, r25
    59a4:	00 08       	sbc	r0, r0
    59a6:	55 0f       	add	r21, r21
    59a8:	aa 0b       	sbc	r26, r26
    59aa:	e0 e8       	ldi	r30, 0x80	; 128
    59ac:	fe ef       	ldi	r31, 0xFE	; 254
    59ae:	16 16       	cp	r1, r22
    59b0:	17 06       	cpc	r1, r23
    59b2:	e8 07       	cpc	r30, r24
    59b4:	f9 07       	cpc	r31, r25
    59b6:	c0 f0       	brcs	.+48     	; 0x59e8 <__fp_cmp+0x46>
    59b8:	12 16       	cp	r1, r18
    59ba:	13 06       	cpc	r1, r19
    59bc:	e4 07       	cpc	r30, r20
    59be:	f5 07       	cpc	r31, r21
    59c0:	98 f0       	brcs	.+38     	; 0x59e8 <__fp_cmp+0x46>
    59c2:	62 1b       	sub	r22, r18
    59c4:	73 0b       	sbc	r23, r19
    59c6:	84 0b       	sbc	r24, r20
    59c8:	95 0b       	sbc	r25, r21
    59ca:	39 f4       	brne	.+14     	; 0x59da <__fp_cmp+0x38>
    59cc:	0a 26       	eor	r0, r26
    59ce:	61 f0       	breq	.+24     	; 0x59e8 <__fp_cmp+0x46>
    59d0:	23 2b       	or	r18, r19
    59d2:	24 2b       	or	r18, r20
    59d4:	25 2b       	or	r18, r21
    59d6:	21 f4       	brne	.+8      	; 0x59e0 <__fp_cmp+0x3e>
    59d8:	08 95       	ret
    59da:	0a 26       	eor	r0, r26
    59dc:	09 f4       	brne	.+2      	; 0x59e0 <__fp_cmp+0x3e>
    59de:	a1 40       	sbci	r26, 0x01	; 1
    59e0:	a6 95       	lsr	r26
    59e2:	8f ef       	ldi	r24, 0xFF	; 255
    59e4:	81 1d       	adc	r24, r1
    59e6:	81 1d       	adc	r24, r1
    59e8:	08 95       	ret

000059ea <__fp_inf>:
    59ea:	97 f9       	bld	r25, 7
    59ec:	9f 67       	ori	r25, 0x7F	; 127
    59ee:	80 e8       	ldi	r24, 0x80	; 128
    59f0:	70 e0       	ldi	r23, 0x00	; 0
    59f2:	60 e0       	ldi	r22, 0x00	; 0
    59f4:	08 95       	ret

000059f6 <__fp_mintl>:
    59f6:	88 23       	and	r24, r24
    59f8:	71 f4       	brne	.+28     	; 0x5a16 <__fp_mintl+0x20>
    59fa:	77 23       	and	r23, r23
    59fc:	21 f0       	breq	.+8      	; 0x5a06 <__fp_mintl+0x10>
    59fe:	98 50       	subi	r25, 0x08	; 8
    5a00:	87 2b       	or	r24, r23
    5a02:	76 2f       	mov	r23, r22
    5a04:	07 c0       	rjmp	.+14     	; 0x5a14 <__fp_mintl+0x1e>
    5a06:	66 23       	and	r22, r22
    5a08:	11 f4       	brne	.+4      	; 0x5a0e <__fp_mintl+0x18>
    5a0a:	99 27       	eor	r25, r25
    5a0c:	0d c0       	rjmp	.+26     	; 0x5a28 <__fp_mintl+0x32>
    5a0e:	90 51       	subi	r25, 0x10	; 16
    5a10:	86 2b       	or	r24, r22
    5a12:	70 e0       	ldi	r23, 0x00	; 0
    5a14:	60 e0       	ldi	r22, 0x00	; 0
    5a16:	2a f0       	brmi	.+10     	; 0x5a22 <__fp_mintl+0x2c>
    5a18:	9a 95       	dec	r25
    5a1a:	66 0f       	add	r22, r22
    5a1c:	77 1f       	adc	r23, r23
    5a1e:	88 1f       	adc	r24, r24
    5a20:	da f7       	brpl	.-10     	; 0x5a18 <__fp_mintl+0x22>
    5a22:	88 0f       	add	r24, r24
    5a24:	96 95       	lsr	r25
    5a26:	87 95       	ror	r24
    5a28:	97 f9       	bld	r25, 7
    5a2a:	08 95       	ret

00005a2c <__fp_mpack>:
    5a2c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a2e:	31 f0       	breq	.+12     	; 0x5a3c <__fp_mpack_finite+0xc>

00005a30 <__fp_mpack_finite>:
    5a30:	91 50       	subi	r25, 0x01	; 1
    5a32:	20 f4       	brcc	.+8      	; 0x5a3c <__fp_mpack_finite+0xc>
    5a34:	87 95       	ror	r24
    5a36:	77 95       	ror	r23
    5a38:	67 95       	ror	r22
    5a3a:	b7 95       	ror	r27
    5a3c:	88 0f       	add	r24, r24
    5a3e:	91 1d       	adc	r25, r1
    5a40:	96 95       	lsr	r25
    5a42:	87 95       	ror	r24
    5a44:	97 f9       	bld	r25, 7
    5a46:	08 95       	ret

00005a48 <__fp_nan>:
    5a48:	9f ef       	ldi	r25, 0xFF	; 255
    5a4a:	80 ec       	ldi	r24, 0xC0	; 192
    5a4c:	08 95       	ret

00005a4e <__fp_powser>:
    5a4e:	df 93       	push	r29
    5a50:	cf 93       	push	r28
    5a52:	1f 93       	push	r17
    5a54:	0f 93       	push	r16
    5a56:	ff 92       	push	r15
    5a58:	ef 92       	push	r14
    5a5a:	df 92       	push	r13
    5a5c:	7b 01       	movw	r14, r22
    5a5e:	8c 01       	movw	r16, r24
    5a60:	68 94       	set
    5a62:	05 c0       	rjmp	.+10     	; 0x5a6e <__fp_powser+0x20>
    5a64:	da 2e       	mov	r13, r26
    5a66:	ef 01       	movw	r28, r30
    5a68:	f0 d0       	rcall	.+480    	; 0x5c4a <__mulsf3x>
    5a6a:	fe 01       	movw	r30, r28
    5a6c:	e8 94       	clt
    5a6e:	a5 91       	lpm	r26, Z+
    5a70:	25 91       	lpm	r18, Z+
    5a72:	35 91       	lpm	r19, Z+
    5a74:	45 91       	lpm	r20, Z+
    5a76:	55 91       	lpm	r21, Z+
    5a78:	ae f3       	brts	.-22     	; 0x5a64 <__fp_powser+0x16>
    5a7a:	ef 01       	movw	r28, r30
    5a7c:	17 de       	rcall	.-978    	; 0x56ac <__addsf3x>
    5a7e:	fe 01       	movw	r30, r28
    5a80:	97 01       	movw	r18, r14
    5a82:	a8 01       	movw	r20, r16
    5a84:	da 94       	dec	r13
    5a86:	79 f7       	brne	.-34     	; 0x5a66 <__fp_powser+0x18>
    5a88:	df 90       	pop	r13
    5a8a:	ef 90       	pop	r14
    5a8c:	ff 90       	pop	r15
    5a8e:	0f 91       	pop	r16
    5a90:	1f 91       	pop	r17
    5a92:	cf 91       	pop	r28
    5a94:	df 91       	pop	r29
    5a96:	08 95       	ret

00005a98 <__fp_pscA>:
    5a98:	00 24       	eor	r0, r0
    5a9a:	0a 94       	dec	r0
    5a9c:	16 16       	cp	r1, r22
    5a9e:	17 06       	cpc	r1, r23
    5aa0:	18 06       	cpc	r1, r24
    5aa2:	09 06       	cpc	r0, r25
    5aa4:	08 95       	ret

00005aa6 <__fp_pscB>:
    5aa6:	00 24       	eor	r0, r0
    5aa8:	0a 94       	dec	r0
    5aaa:	12 16       	cp	r1, r18
    5aac:	13 06       	cpc	r1, r19
    5aae:	14 06       	cpc	r1, r20
    5ab0:	05 06       	cpc	r0, r21
    5ab2:	08 95       	ret

00005ab4 <__fp_round>:
    5ab4:	09 2e       	mov	r0, r25
    5ab6:	03 94       	inc	r0
    5ab8:	00 0c       	add	r0, r0
    5aba:	11 f4       	brne	.+4      	; 0x5ac0 <__fp_round+0xc>
    5abc:	88 23       	and	r24, r24
    5abe:	52 f0       	brmi	.+20     	; 0x5ad4 <__fp_round+0x20>
    5ac0:	bb 0f       	add	r27, r27
    5ac2:	40 f4       	brcc	.+16     	; 0x5ad4 <__fp_round+0x20>
    5ac4:	bf 2b       	or	r27, r31
    5ac6:	11 f4       	brne	.+4      	; 0x5acc <__fp_round+0x18>
    5ac8:	60 ff       	sbrs	r22, 0
    5aca:	04 c0       	rjmp	.+8      	; 0x5ad4 <__fp_round+0x20>
    5acc:	6f 5f       	subi	r22, 0xFF	; 255
    5ace:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad4:	08 95       	ret

00005ad6 <__fp_split3>:
    5ad6:	57 fd       	sbrc	r21, 7
    5ad8:	90 58       	subi	r25, 0x80	; 128
    5ada:	44 0f       	add	r20, r20
    5adc:	55 1f       	adc	r21, r21
    5ade:	59 f0       	breq	.+22     	; 0x5af6 <__fp_splitA+0x10>
    5ae0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ae2:	71 f0       	breq	.+28     	; 0x5b00 <__fp_splitA+0x1a>
    5ae4:	47 95       	ror	r20

00005ae6 <__fp_splitA>:
    5ae6:	88 0f       	add	r24, r24
    5ae8:	97 fb       	bst	r25, 7
    5aea:	99 1f       	adc	r25, r25
    5aec:	61 f0       	breq	.+24     	; 0x5b06 <__fp_splitA+0x20>
    5aee:	9f 3f       	cpi	r25, 0xFF	; 255
    5af0:	79 f0       	breq	.+30     	; 0x5b10 <__fp_splitA+0x2a>
    5af2:	87 95       	ror	r24
    5af4:	08 95       	ret
    5af6:	12 16       	cp	r1, r18
    5af8:	13 06       	cpc	r1, r19
    5afa:	14 06       	cpc	r1, r20
    5afc:	55 1f       	adc	r21, r21
    5afe:	f2 cf       	rjmp	.-28     	; 0x5ae4 <__fp_split3+0xe>
    5b00:	46 95       	lsr	r20
    5b02:	f1 df       	rcall	.-30     	; 0x5ae6 <__fp_splitA>
    5b04:	08 c0       	rjmp	.+16     	; 0x5b16 <__fp_splitA+0x30>
    5b06:	16 16       	cp	r1, r22
    5b08:	17 06       	cpc	r1, r23
    5b0a:	18 06       	cpc	r1, r24
    5b0c:	99 1f       	adc	r25, r25
    5b0e:	f1 cf       	rjmp	.-30     	; 0x5af2 <__fp_splitA+0xc>
    5b10:	86 95       	lsr	r24
    5b12:	71 05       	cpc	r23, r1
    5b14:	61 05       	cpc	r22, r1
    5b16:	08 94       	sec
    5b18:	08 95       	ret

00005b1a <__fp_trunc>:
    5b1a:	e5 df       	rcall	.-54     	; 0x5ae6 <__fp_splitA>
    5b1c:	a0 f0       	brcs	.+40     	; 0x5b46 <__fp_trunc+0x2c>
    5b1e:	be e7       	ldi	r27, 0x7E	; 126
    5b20:	b9 17       	cp	r27, r25
    5b22:	88 f4       	brcc	.+34     	; 0x5b46 <__fp_trunc+0x2c>
    5b24:	bb 27       	eor	r27, r27
    5b26:	9f 38       	cpi	r25, 0x8F	; 143
    5b28:	60 f4       	brcc	.+24     	; 0x5b42 <__fp_trunc+0x28>
    5b2a:	16 16       	cp	r1, r22
    5b2c:	b1 1d       	adc	r27, r1
    5b2e:	67 2f       	mov	r22, r23
    5b30:	78 2f       	mov	r23, r24
    5b32:	88 27       	eor	r24, r24
    5b34:	98 5f       	subi	r25, 0xF8	; 248
    5b36:	f7 cf       	rjmp	.-18     	; 0x5b26 <__fp_trunc+0xc>
    5b38:	86 95       	lsr	r24
    5b3a:	77 95       	ror	r23
    5b3c:	67 95       	ror	r22
    5b3e:	b1 1d       	adc	r27, r1
    5b40:	93 95       	inc	r25
    5b42:	96 39       	cpi	r25, 0x96	; 150
    5b44:	c8 f3       	brcs	.-14     	; 0x5b38 <__fp_trunc+0x1e>
    5b46:	08 95       	ret

00005b48 <__fp_zero>:
    5b48:	e8 94       	clt

00005b4a <__fp_szero>:
    5b4a:	bb 27       	eor	r27, r27
    5b4c:	66 27       	eor	r22, r22
    5b4e:	77 27       	eor	r23, r23
    5b50:	cb 01       	movw	r24, r22
    5b52:	97 f9       	bld	r25, 7
    5b54:	08 95       	ret

00005b56 <__gesf2>:
    5b56:	25 df       	rcall	.-438    	; 0x59a2 <__fp_cmp>
    5b58:	08 f4       	brcc	.+2      	; 0x5b5c <__gesf2+0x6>
    5b5a:	8f ef       	ldi	r24, 0xFF	; 255
    5b5c:	08 95       	ret

00005b5e <inverse>:
    5b5e:	9b 01       	movw	r18, r22
    5b60:	ac 01       	movw	r20, r24
    5b62:	60 e0       	ldi	r22, 0x00	; 0
    5b64:	70 e0       	ldi	r23, 0x00	; 0
    5b66:	80 e8       	ldi	r24, 0x80	; 128
    5b68:	9f e3       	ldi	r25, 0x3F	; 63
    5b6a:	32 ce       	rjmp	.-924    	; 0x57d0 <__divsf3>

00005b6c <lround>:
    5b6c:	bc df       	rcall	.-136    	; 0x5ae6 <__fp_splitA>
    5b6e:	58 f1       	brcs	.+86     	; 0x5bc6 <lround+0x5a>
    5b70:	9e 57       	subi	r25, 0x7E	; 126
    5b72:	58 f1       	brcs	.+86     	; 0x5bca <lround+0x5e>
    5b74:	98 51       	subi	r25, 0x18	; 24
    5b76:	a0 f0       	brcs	.+40     	; 0x5ba0 <lround+0x34>
    5b78:	e9 f0       	breq	.+58     	; 0x5bb4 <lround+0x48>
    5b7a:	98 30       	cpi	r25, 0x08	; 8
    5b7c:	20 f5       	brcc	.+72     	; 0x5bc6 <lround+0x5a>
    5b7e:	09 2e       	mov	r0, r25
    5b80:	99 27       	eor	r25, r25
    5b82:	66 0f       	add	r22, r22
    5b84:	77 1f       	adc	r23, r23
    5b86:	88 1f       	adc	r24, r24
    5b88:	99 1f       	adc	r25, r25
    5b8a:	0a 94       	dec	r0
    5b8c:	d1 f7       	brne	.-12     	; 0x5b82 <lround+0x16>
    5b8e:	12 c0       	rjmp	.+36     	; 0x5bb4 <lround+0x48>
    5b90:	06 2e       	mov	r0, r22
    5b92:	67 2f       	mov	r22, r23
    5b94:	78 2f       	mov	r23, r24
    5b96:	88 27       	eor	r24, r24
    5b98:	98 5f       	subi	r25, 0xF8	; 248
    5b9a:	11 f4       	brne	.+4      	; 0x5ba0 <lround+0x34>
    5b9c:	00 0c       	add	r0, r0
    5b9e:	07 c0       	rjmp	.+14     	; 0x5bae <lround+0x42>
    5ba0:	99 3f       	cpi	r25, 0xF9	; 249
    5ba2:	b4 f3       	brlt	.-20     	; 0x5b90 <lround+0x24>
    5ba4:	86 95       	lsr	r24
    5ba6:	77 95       	ror	r23
    5ba8:	67 95       	ror	r22
    5baa:	93 95       	inc	r25
    5bac:	d9 f7       	brne	.-10     	; 0x5ba4 <lround+0x38>
    5bae:	61 1d       	adc	r22, r1
    5bb0:	71 1d       	adc	r23, r1
    5bb2:	81 1d       	adc	r24, r1
    5bb4:	3e f4       	brtc	.+14     	; 0x5bc4 <lround+0x58>
    5bb6:	90 95       	com	r25
    5bb8:	80 95       	com	r24
    5bba:	70 95       	com	r23
    5bbc:	61 95       	neg	r22
    5bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    5bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc4:	08 95       	ret
    5bc6:	68 94       	set
    5bc8:	c0 cf       	rjmp	.-128    	; 0x5b4a <__fp_szero>
    5bca:	be cf       	rjmp	.-132    	; 0x5b48 <__fp_zero>

00005bcc <modf>:
    5bcc:	fa 01       	movw	r30, r20
    5bce:	dc 01       	movw	r26, r24
    5bd0:	aa 0f       	add	r26, r26
    5bd2:	bb 1f       	adc	r27, r27
    5bd4:	9b 01       	movw	r18, r22
    5bd6:	ac 01       	movw	r20, r24
    5bd8:	bf 57       	subi	r27, 0x7F	; 127
    5bda:	28 f4       	brcc	.+10     	; 0x5be6 <modf+0x1a>
    5bdc:	22 27       	eor	r18, r18
    5bde:	33 27       	eor	r19, r19
    5be0:	44 27       	eor	r20, r20
    5be2:	50 78       	andi	r21, 0x80	; 128
    5be4:	1f c0       	rjmp	.+62     	; 0x5c24 <modf+0x58>
    5be6:	b7 51       	subi	r27, 0x17	; 23
    5be8:	88 f4       	brcc	.+34     	; 0x5c0c <modf+0x40>
    5bea:	ab 2f       	mov	r26, r27
    5bec:	00 24       	eor	r0, r0
    5bee:	46 95       	lsr	r20
    5bf0:	37 95       	ror	r19
    5bf2:	27 95       	ror	r18
    5bf4:	01 1c       	adc	r0, r1
    5bf6:	a3 95       	inc	r26
    5bf8:	d2 f3       	brmi	.-12     	; 0x5bee <modf+0x22>
    5bfa:	00 20       	and	r0, r0
    5bfc:	69 f0       	breq	.+26     	; 0x5c18 <modf+0x4c>
    5bfe:	22 0f       	add	r18, r18
    5c00:	33 1f       	adc	r19, r19
    5c02:	44 1f       	adc	r20, r20
    5c04:	b3 95       	inc	r27
    5c06:	da f3       	brmi	.-10     	; 0x5bfe <modf+0x32>
    5c08:	0d d0       	rcall	.+26     	; 0x5c24 <modf+0x58>
    5c0a:	3e cd       	rjmp	.-1412   	; 0x5688 <__subsf3>
    5c0c:	61 30       	cpi	r22, 0x01	; 1
    5c0e:	71 05       	cpc	r23, r1
    5c10:	a0 e8       	ldi	r26, 0x80	; 128
    5c12:	8a 07       	cpc	r24, r26
    5c14:	b9 46       	sbci	r27, 0x69	; 105
    5c16:	30 f4       	brcc	.+12     	; 0x5c24 <modf+0x58>
    5c18:	9b 01       	movw	r18, r22
    5c1a:	ac 01       	movw	r20, r24
    5c1c:	66 27       	eor	r22, r22
    5c1e:	77 27       	eor	r23, r23
    5c20:	88 27       	eor	r24, r24
    5c22:	90 78       	andi	r25, 0x80	; 128
    5c24:	30 96       	adiw	r30, 0x00	; 0
    5c26:	21 f0       	breq	.+8      	; 0x5c30 <modf+0x64>
    5c28:	20 83       	st	Z, r18
    5c2a:	31 83       	std	Z+1, r19	; 0x01
    5c2c:	42 83       	std	Z+2, r20	; 0x02
    5c2e:	53 83       	std	Z+3, r21	; 0x03
    5c30:	08 95       	ret

00005c32 <__mulsf3>:
    5c32:	0b d0       	rcall	.+22     	; 0x5c4a <__mulsf3x>
    5c34:	3f cf       	rjmp	.-386    	; 0x5ab4 <__fp_round>
    5c36:	30 df       	rcall	.-416    	; 0x5a98 <__fp_pscA>
    5c38:	28 f0       	brcs	.+10     	; 0x5c44 <__mulsf3+0x12>
    5c3a:	35 df       	rcall	.-406    	; 0x5aa6 <__fp_pscB>
    5c3c:	18 f0       	brcs	.+6      	; 0x5c44 <__mulsf3+0x12>
    5c3e:	95 23       	and	r25, r21
    5c40:	09 f0       	breq	.+2      	; 0x5c44 <__mulsf3+0x12>
    5c42:	d3 ce       	rjmp	.-602    	; 0x59ea <__fp_inf>
    5c44:	01 cf       	rjmp	.-510    	; 0x5a48 <__fp_nan>
    5c46:	11 24       	eor	r1, r1
    5c48:	80 cf       	rjmp	.-256    	; 0x5b4a <__fp_szero>

00005c4a <__mulsf3x>:
    5c4a:	45 df       	rcall	.-374    	; 0x5ad6 <__fp_split3>
    5c4c:	a0 f3       	brcs	.-24     	; 0x5c36 <__mulsf3+0x4>

00005c4e <__mulsf3_pse>:
    5c4e:	95 9f       	mul	r25, r21
    5c50:	d1 f3       	breq	.-12     	; 0x5c46 <__mulsf3+0x14>
    5c52:	95 0f       	add	r25, r21
    5c54:	50 e0       	ldi	r21, 0x00	; 0
    5c56:	55 1f       	adc	r21, r21
    5c58:	62 9f       	mul	r22, r18
    5c5a:	f0 01       	movw	r30, r0
    5c5c:	72 9f       	mul	r23, r18
    5c5e:	bb 27       	eor	r27, r27
    5c60:	f0 0d       	add	r31, r0
    5c62:	b1 1d       	adc	r27, r1
    5c64:	63 9f       	mul	r22, r19
    5c66:	aa 27       	eor	r26, r26
    5c68:	f0 0d       	add	r31, r0
    5c6a:	b1 1d       	adc	r27, r1
    5c6c:	aa 1f       	adc	r26, r26
    5c6e:	64 9f       	mul	r22, r20
    5c70:	66 27       	eor	r22, r22
    5c72:	b0 0d       	add	r27, r0
    5c74:	a1 1d       	adc	r26, r1
    5c76:	66 1f       	adc	r22, r22
    5c78:	82 9f       	mul	r24, r18
    5c7a:	22 27       	eor	r18, r18
    5c7c:	b0 0d       	add	r27, r0
    5c7e:	a1 1d       	adc	r26, r1
    5c80:	62 1f       	adc	r22, r18
    5c82:	73 9f       	mul	r23, r19
    5c84:	b0 0d       	add	r27, r0
    5c86:	a1 1d       	adc	r26, r1
    5c88:	62 1f       	adc	r22, r18
    5c8a:	83 9f       	mul	r24, r19
    5c8c:	a0 0d       	add	r26, r0
    5c8e:	61 1d       	adc	r22, r1
    5c90:	22 1f       	adc	r18, r18
    5c92:	74 9f       	mul	r23, r20
    5c94:	33 27       	eor	r19, r19
    5c96:	a0 0d       	add	r26, r0
    5c98:	61 1d       	adc	r22, r1
    5c9a:	23 1f       	adc	r18, r19
    5c9c:	84 9f       	mul	r24, r20
    5c9e:	60 0d       	add	r22, r0
    5ca0:	21 1d       	adc	r18, r1
    5ca2:	82 2f       	mov	r24, r18
    5ca4:	76 2f       	mov	r23, r22
    5ca6:	6a 2f       	mov	r22, r26
    5ca8:	11 24       	eor	r1, r1
    5caa:	9f 57       	subi	r25, 0x7F	; 127
    5cac:	50 40       	sbci	r21, 0x00	; 0
    5cae:	8a f0       	brmi	.+34     	; 0x5cd2 <__mulsf3_pse+0x84>
    5cb0:	e1 f0       	breq	.+56     	; 0x5cea <__mulsf3_pse+0x9c>
    5cb2:	88 23       	and	r24, r24
    5cb4:	4a f0       	brmi	.+18     	; 0x5cc8 <__mulsf3_pse+0x7a>
    5cb6:	ee 0f       	add	r30, r30
    5cb8:	ff 1f       	adc	r31, r31
    5cba:	bb 1f       	adc	r27, r27
    5cbc:	66 1f       	adc	r22, r22
    5cbe:	77 1f       	adc	r23, r23
    5cc0:	88 1f       	adc	r24, r24
    5cc2:	91 50       	subi	r25, 0x01	; 1
    5cc4:	50 40       	sbci	r21, 0x00	; 0
    5cc6:	a9 f7       	brne	.-22     	; 0x5cb2 <__mulsf3_pse+0x64>
    5cc8:	9e 3f       	cpi	r25, 0xFE	; 254
    5cca:	51 05       	cpc	r21, r1
    5ccc:	70 f0       	brcs	.+28     	; 0x5cea <__mulsf3_pse+0x9c>
    5cce:	8d ce       	rjmp	.-742    	; 0x59ea <__fp_inf>
    5cd0:	3c cf       	rjmp	.-392    	; 0x5b4a <__fp_szero>
    5cd2:	5f 3f       	cpi	r21, 0xFF	; 255
    5cd4:	ec f3       	brlt	.-6      	; 0x5cd0 <__mulsf3_pse+0x82>
    5cd6:	98 3e       	cpi	r25, 0xE8	; 232
    5cd8:	dc f3       	brlt	.-10     	; 0x5cd0 <__mulsf3_pse+0x82>
    5cda:	86 95       	lsr	r24
    5cdc:	77 95       	ror	r23
    5cde:	67 95       	ror	r22
    5ce0:	b7 95       	ror	r27
    5ce2:	f7 95       	ror	r31
    5ce4:	e7 95       	ror	r30
    5ce6:	9f 5f       	subi	r25, 0xFF	; 255
    5ce8:	c1 f7       	brne	.-16     	; 0x5cda <__mulsf3_pse+0x8c>
    5cea:	fe 2b       	or	r31, r30
    5cec:	88 0f       	add	r24, r24
    5cee:	91 1d       	adc	r25, r1
    5cf0:	96 95       	lsr	r25
    5cf2:	87 95       	ror	r24
    5cf4:	97 f9       	bld	r25, 7
    5cf6:	08 95       	ret

00005cf8 <round>:
    5cf8:	f6 de       	rcall	.-532    	; 0x5ae6 <__fp_splitA>
    5cfa:	e0 f0       	brcs	.+56     	; 0x5d34 <round+0x3c>
    5cfc:	9e 37       	cpi	r25, 0x7E	; 126
    5cfe:	d8 f0       	brcs	.+54     	; 0x5d36 <round+0x3e>
    5d00:	96 39       	cpi	r25, 0x96	; 150
    5d02:	b8 f4       	brcc	.+46     	; 0x5d32 <round+0x3a>
    5d04:	9e 38       	cpi	r25, 0x8E	; 142
    5d06:	48 f4       	brcc	.+18     	; 0x5d1a <round+0x22>
    5d08:	67 2f       	mov	r22, r23
    5d0a:	78 2f       	mov	r23, r24
    5d0c:	88 27       	eor	r24, r24
    5d0e:	98 5f       	subi	r25, 0xF8	; 248
    5d10:	f9 cf       	rjmp	.-14     	; 0x5d04 <round+0xc>
    5d12:	86 95       	lsr	r24
    5d14:	77 95       	ror	r23
    5d16:	67 95       	ror	r22
    5d18:	93 95       	inc	r25
    5d1a:	95 39       	cpi	r25, 0x95	; 149
    5d1c:	d0 f3       	brcs	.-12     	; 0x5d12 <round+0x1a>
    5d1e:	b6 2f       	mov	r27, r22
    5d20:	b1 70       	andi	r27, 0x01	; 1
    5d22:	6b 0f       	add	r22, r27
    5d24:	71 1d       	adc	r23, r1
    5d26:	81 1d       	adc	r24, r1
    5d28:	20 f4       	brcc	.+8      	; 0x5d32 <round+0x3a>
    5d2a:	87 95       	ror	r24
    5d2c:	77 95       	ror	r23
    5d2e:	67 95       	ror	r22
    5d30:	93 95       	inc	r25
    5d32:	61 ce       	rjmp	.-830    	; 0x59f6 <__fp_mintl>
    5d34:	7b ce       	rjmp	.-778    	; 0x5a2c <__fp_mpack>
    5d36:	09 cf       	rjmp	.-494    	; 0x5b4a <__fp_szero>
    5d38:	11 f4       	brne	.+4      	; 0x5d3e <round+0x46>
    5d3a:	0e f4       	brtc	.+2      	; 0x5d3e <round+0x46>
    5d3c:	85 ce       	rjmp	.-758    	; 0x5a48 <__fp_nan>
    5d3e:	76 ce       	rjmp	.-788    	; 0x5a2c <__fp_mpack>

00005d40 <sqrt>:
    5d40:	d2 de       	rcall	.-604    	; 0x5ae6 <__fp_splitA>
    5d42:	d0 f3       	brcs	.-12     	; 0x5d38 <round+0x40>
    5d44:	99 23       	and	r25, r25
    5d46:	d9 f3       	breq	.-10     	; 0x5d3e <round+0x46>
    5d48:	ce f3       	brts	.-14     	; 0x5d3c <round+0x44>
    5d4a:	9f 57       	subi	r25, 0x7F	; 127
    5d4c:	55 0b       	sbc	r21, r21
    5d4e:	87 ff       	sbrs	r24, 7
    5d50:	3f d0       	rcall	.+126    	; 0x5dd0 <__fp_norm2>
    5d52:	00 24       	eor	r0, r0
    5d54:	a0 e6       	ldi	r26, 0x60	; 96
    5d56:	40 ea       	ldi	r20, 0xA0	; 160
    5d58:	90 01       	movw	r18, r0
    5d5a:	80 58       	subi	r24, 0x80	; 128
    5d5c:	56 95       	lsr	r21
    5d5e:	97 95       	ror	r25
    5d60:	28 f4       	brcc	.+10     	; 0x5d6c <sqrt+0x2c>
    5d62:	80 5c       	subi	r24, 0xC0	; 192
    5d64:	66 0f       	add	r22, r22
    5d66:	77 1f       	adc	r23, r23
    5d68:	88 1f       	adc	r24, r24
    5d6a:	20 f0       	brcs	.+8      	; 0x5d74 <sqrt+0x34>
    5d6c:	26 17       	cp	r18, r22
    5d6e:	37 07       	cpc	r19, r23
    5d70:	48 07       	cpc	r20, r24
    5d72:	30 f4       	brcc	.+12     	; 0x5d80 <sqrt+0x40>
    5d74:	62 1b       	sub	r22, r18
    5d76:	73 0b       	sbc	r23, r19
    5d78:	84 0b       	sbc	r24, r20
    5d7a:	20 29       	or	r18, r0
    5d7c:	31 29       	or	r19, r1
    5d7e:	4a 2b       	or	r20, r26
    5d80:	a6 95       	lsr	r26
    5d82:	17 94       	ror	r1
    5d84:	07 94       	ror	r0
    5d86:	20 25       	eor	r18, r0
    5d88:	31 25       	eor	r19, r1
    5d8a:	4a 27       	eor	r20, r26
    5d8c:	58 f7       	brcc	.-42     	; 0x5d64 <sqrt+0x24>
    5d8e:	66 0f       	add	r22, r22
    5d90:	77 1f       	adc	r23, r23
    5d92:	88 1f       	adc	r24, r24
    5d94:	20 f0       	brcs	.+8      	; 0x5d9e <sqrt+0x5e>
    5d96:	26 17       	cp	r18, r22
    5d98:	37 07       	cpc	r19, r23
    5d9a:	48 07       	cpc	r20, r24
    5d9c:	30 f4       	brcc	.+12     	; 0x5daa <sqrt+0x6a>
    5d9e:	62 0b       	sbc	r22, r18
    5da0:	73 0b       	sbc	r23, r19
    5da2:	84 0b       	sbc	r24, r20
    5da4:	20 0d       	add	r18, r0
    5da6:	31 1d       	adc	r19, r1
    5da8:	41 1d       	adc	r20, r1
    5daa:	a0 95       	com	r26
    5dac:	81 f7       	brne	.-32     	; 0x5d8e <sqrt+0x4e>
    5dae:	b9 01       	movw	r22, r18
    5db0:	84 2f       	mov	r24, r20
    5db2:	91 58       	subi	r25, 0x81	; 129
    5db4:	88 0f       	add	r24, r24
    5db6:	96 95       	lsr	r25
    5db8:	87 95       	ror	r24
    5dba:	08 95       	ret

00005dbc <square>:
    5dbc:	9b 01       	movw	r18, r22
    5dbe:	ac 01       	movw	r20, r24
    5dc0:	38 cf       	rjmp	.-400    	; 0x5c32 <__mulsf3>

00005dc2 <trunc>:
    5dc2:	ab de       	rcall	.-682    	; 0x5b1a <__fp_trunc>
    5dc4:	20 f0       	brcs	.+8      	; 0x5dce <trunc+0xc>
    5dc6:	9f 37       	cpi	r25, 0x7F	; 127
    5dc8:	08 f4       	brcc	.+2      	; 0x5dcc <trunc+0xa>
    5dca:	bf ce       	rjmp	.-642    	; 0x5b4a <__fp_szero>
    5dcc:	14 ce       	rjmp	.-984    	; 0x59f6 <__fp_mintl>
    5dce:	2e ce       	rjmp	.-932    	; 0x5a2c <__fp_mpack>

00005dd0 <__fp_norm2>:
    5dd0:	91 50       	subi	r25, 0x01	; 1
    5dd2:	50 40       	sbci	r21, 0x00	; 0
    5dd4:	66 0f       	add	r22, r22
    5dd6:	77 1f       	adc	r23, r23
    5dd8:	88 1f       	adc	r24, r24
    5dda:	d2 f7       	brpl	.-12     	; 0x5dd0 <__fp_norm2>
    5ddc:	08 95       	ret

00005dde <__mulsi3>:
    5dde:	62 9f       	mul	r22, r18
    5de0:	d0 01       	movw	r26, r0
    5de2:	73 9f       	mul	r23, r19
    5de4:	f0 01       	movw	r30, r0
    5de6:	82 9f       	mul	r24, r18
    5de8:	e0 0d       	add	r30, r0
    5dea:	f1 1d       	adc	r31, r1
    5dec:	64 9f       	mul	r22, r20
    5dee:	e0 0d       	add	r30, r0
    5df0:	f1 1d       	adc	r31, r1
    5df2:	92 9f       	mul	r25, r18
    5df4:	f0 0d       	add	r31, r0
    5df6:	83 9f       	mul	r24, r19
    5df8:	f0 0d       	add	r31, r0
    5dfa:	74 9f       	mul	r23, r20
    5dfc:	f0 0d       	add	r31, r0
    5dfe:	65 9f       	mul	r22, r21
    5e00:	f0 0d       	add	r31, r0
    5e02:	99 27       	eor	r25, r25
    5e04:	72 9f       	mul	r23, r18
    5e06:	b0 0d       	add	r27, r0
    5e08:	e1 1d       	adc	r30, r1
    5e0a:	f9 1f       	adc	r31, r25
    5e0c:	63 9f       	mul	r22, r19
    5e0e:	b0 0d       	add	r27, r0
    5e10:	e1 1d       	adc	r30, r1
    5e12:	f9 1f       	adc	r31, r25
    5e14:	bd 01       	movw	r22, r26
    5e16:	cf 01       	movw	r24, r30
    5e18:	11 24       	eor	r1, r1
    5e1a:	08 95       	ret

00005e1c <__divmodhi4>:
    5e1c:	97 fb       	bst	r25, 7
    5e1e:	09 2e       	mov	r0, r25
    5e20:	07 26       	eor	r0, r23
    5e22:	0a d0       	rcall	.+20     	; 0x5e38 <__divmodhi4_neg1>
    5e24:	77 fd       	sbrc	r23, 7
    5e26:	04 d0       	rcall	.+8      	; 0x5e30 <__divmodhi4_neg2>
    5e28:	49 d0       	rcall	.+146    	; 0x5ebc <__udivmodhi4>
    5e2a:	06 d0       	rcall	.+12     	; 0x5e38 <__divmodhi4_neg1>
    5e2c:	00 20       	and	r0, r0
    5e2e:	1a f4       	brpl	.+6      	; 0x5e36 <__divmodhi4_exit>

00005e30 <__divmodhi4_neg2>:
    5e30:	70 95       	com	r23
    5e32:	61 95       	neg	r22
    5e34:	7f 4f       	sbci	r23, 0xFF	; 255

00005e36 <__divmodhi4_exit>:
    5e36:	08 95       	ret

00005e38 <__divmodhi4_neg1>:
    5e38:	f6 f7       	brtc	.-4      	; 0x5e36 <__divmodhi4_exit>
    5e3a:	90 95       	com	r25
    5e3c:	81 95       	neg	r24
    5e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e40:	08 95       	ret

00005e42 <__udivmodsi4>:
    5e42:	a1 e2       	ldi	r26, 0x21	; 33
    5e44:	1a 2e       	mov	r1, r26
    5e46:	aa 1b       	sub	r26, r26
    5e48:	bb 1b       	sub	r27, r27
    5e4a:	fd 01       	movw	r30, r26
    5e4c:	0d c0       	rjmp	.+26     	; 0x5e68 <__udivmodsi4_ep>

00005e4e <__udivmodsi4_loop>:
    5e4e:	aa 1f       	adc	r26, r26
    5e50:	bb 1f       	adc	r27, r27
    5e52:	ee 1f       	adc	r30, r30
    5e54:	ff 1f       	adc	r31, r31
    5e56:	a2 17       	cp	r26, r18
    5e58:	b3 07       	cpc	r27, r19
    5e5a:	e4 07       	cpc	r30, r20
    5e5c:	f5 07       	cpc	r31, r21
    5e5e:	20 f0       	brcs	.+8      	; 0x5e68 <__udivmodsi4_ep>
    5e60:	a2 1b       	sub	r26, r18
    5e62:	b3 0b       	sbc	r27, r19
    5e64:	e4 0b       	sbc	r30, r20
    5e66:	f5 0b       	sbc	r31, r21

00005e68 <__udivmodsi4_ep>:
    5e68:	66 1f       	adc	r22, r22
    5e6a:	77 1f       	adc	r23, r23
    5e6c:	88 1f       	adc	r24, r24
    5e6e:	99 1f       	adc	r25, r25
    5e70:	1a 94       	dec	r1
    5e72:	69 f7       	brne	.-38     	; 0x5e4e <__udivmodsi4_loop>
    5e74:	60 95       	com	r22
    5e76:	70 95       	com	r23
    5e78:	80 95       	com	r24
    5e7a:	90 95       	com	r25
    5e7c:	9b 01       	movw	r18, r22
    5e7e:	ac 01       	movw	r20, r24
    5e80:	bd 01       	movw	r22, r26
    5e82:	cf 01       	movw	r24, r30
    5e84:	08 95       	ret

00005e86 <__divmodsi4>:
    5e86:	97 fb       	bst	r25, 7
    5e88:	09 2e       	mov	r0, r25
    5e8a:	05 26       	eor	r0, r21
    5e8c:	0e d0       	rcall	.+28     	; 0x5eaa <__divmodsi4_neg1>
    5e8e:	57 fd       	sbrc	r21, 7
    5e90:	04 d0       	rcall	.+8      	; 0x5e9a <__divmodsi4_neg2>
    5e92:	d7 df       	rcall	.-82     	; 0x5e42 <__udivmodsi4>
    5e94:	0a d0       	rcall	.+20     	; 0x5eaa <__divmodsi4_neg1>
    5e96:	00 1c       	adc	r0, r0
    5e98:	38 f4       	brcc	.+14     	; 0x5ea8 <__divmodsi4_exit>

00005e9a <__divmodsi4_neg2>:
    5e9a:	50 95       	com	r21
    5e9c:	40 95       	com	r20
    5e9e:	30 95       	com	r19
    5ea0:	21 95       	neg	r18
    5ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ea4:	4f 4f       	sbci	r20, 0xFF	; 255
    5ea6:	5f 4f       	sbci	r21, 0xFF	; 255

00005ea8 <__divmodsi4_exit>:
    5ea8:	08 95       	ret

00005eaa <__divmodsi4_neg1>:
    5eaa:	f6 f7       	brtc	.-4      	; 0x5ea8 <__divmodsi4_exit>
    5eac:	90 95       	com	r25
    5eae:	80 95       	com	r24
    5eb0:	70 95       	com	r23
    5eb2:	61 95       	neg	r22
    5eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5eb6:	8f 4f       	sbci	r24, 0xFF	; 255
    5eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eba:	08 95       	ret

00005ebc <__udivmodhi4>:
    5ebc:	aa 1b       	sub	r26, r26
    5ebe:	bb 1b       	sub	r27, r27
    5ec0:	51 e1       	ldi	r21, 0x11	; 17
    5ec2:	07 c0       	rjmp	.+14     	; 0x5ed2 <__udivmodhi4_ep>

00005ec4 <__udivmodhi4_loop>:
    5ec4:	aa 1f       	adc	r26, r26
    5ec6:	bb 1f       	adc	r27, r27
    5ec8:	a6 17       	cp	r26, r22
    5eca:	b7 07       	cpc	r27, r23
    5ecc:	10 f0       	brcs	.+4      	; 0x5ed2 <__udivmodhi4_ep>
    5ece:	a6 1b       	sub	r26, r22
    5ed0:	b7 0b       	sbc	r27, r23

00005ed2 <__udivmodhi4_ep>:
    5ed2:	88 1f       	adc	r24, r24
    5ed4:	99 1f       	adc	r25, r25
    5ed6:	5a 95       	dec	r21
    5ed8:	a9 f7       	brne	.-22     	; 0x5ec4 <__udivmodhi4_loop>
    5eda:	80 95       	com	r24
    5edc:	90 95       	com	r25
    5ede:	bc 01       	movw	r22, r24
    5ee0:	cd 01       	movw	r24, r26
    5ee2:	08 95       	ret

00005ee4 <do_rand>:
    5ee4:	af 92       	push	r10
    5ee6:	bf 92       	push	r11
    5ee8:	cf 92       	push	r12
    5eea:	df 92       	push	r13
    5eec:	ef 92       	push	r14
    5eee:	ff 92       	push	r15
    5ef0:	0f 93       	push	r16
    5ef2:	1f 93       	push	r17
    5ef4:	cf 93       	push	r28
    5ef6:	df 93       	push	r29
    5ef8:	ec 01       	movw	r28, r24
    5efa:	a8 80       	ld	r10, Y
    5efc:	b9 80       	ldd	r11, Y+1	; 0x01
    5efe:	ca 80       	ldd	r12, Y+2	; 0x02
    5f00:	db 80       	ldd	r13, Y+3	; 0x03
    5f02:	a1 14       	cp	r10, r1
    5f04:	b1 04       	cpc	r11, r1
    5f06:	c1 04       	cpc	r12, r1
    5f08:	d1 04       	cpc	r13, r1
    5f0a:	41 f4       	brne	.+16     	; 0x5f1c <do_rand+0x38>
    5f0c:	84 e2       	ldi	r24, 0x24	; 36
    5f0e:	a8 2e       	mov	r10, r24
    5f10:	89 ed       	ldi	r24, 0xD9	; 217
    5f12:	b8 2e       	mov	r11, r24
    5f14:	8b e5       	ldi	r24, 0x5B	; 91
    5f16:	c8 2e       	mov	r12, r24
    5f18:	87 e0       	ldi	r24, 0x07	; 7
    5f1a:	d8 2e       	mov	r13, r24
    5f1c:	c6 01       	movw	r24, r12
    5f1e:	b5 01       	movw	r22, r10
    5f20:	2d e1       	ldi	r18, 0x1D	; 29
    5f22:	33 ef       	ldi	r19, 0xF3	; 243
    5f24:	41 e0       	ldi	r20, 0x01	; 1
    5f26:	50 e0       	ldi	r21, 0x00	; 0
    5f28:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__divmodsi4>
    5f2c:	27 ea       	ldi	r18, 0xA7	; 167
    5f2e:	31 e4       	ldi	r19, 0x41	; 65
    5f30:	40 e0       	ldi	r20, 0x00	; 0
    5f32:	50 e0       	ldi	r21, 0x00	; 0
    5f34:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <__mulsi3>
    5f38:	7b 01       	movw	r14, r22
    5f3a:	8c 01       	movw	r16, r24
    5f3c:	c6 01       	movw	r24, r12
    5f3e:	b5 01       	movw	r22, r10
    5f40:	2d e1       	ldi	r18, 0x1D	; 29
    5f42:	33 ef       	ldi	r19, 0xF3	; 243
    5f44:	41 e0       	ldi	r20, 0x01	; 1
    5f46:	50 e0       	ldi	r21, 0x00	; 0
    5f48:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__divmodsi4>
    5f4c:	ca 01       	movw	r24, r20
    5f4e:	b9 01       	movw	r22, r18
    5f50:	2c ee       	ldi	r18, 0xEC	; 236
    5f52:	34 ef       	ldi	r19, 0xF4	; 244
    5f54:	4f ef       	ldi	r20, 0xFF	; 255
    5f56:	5f ef       	ldi	r21, 0xFF	; 255
    5f58:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <__mulsi3>
    5f5c:	6e 0d       	add	r22, r14
    5f5e:	7f 1d       	adc	r23, r15
    5f60:	80 1f       	adc	r24, r16
    5f62:	91 1f       	adc	r25, r17
    5f64:	97 ff       	sbrs	r25, 7
    5f66:	04 c0       	rjmp	.+8      	; 0x5f70 <do_rand+0x8c>
    5f68:	61 50       	subi	r22, 0x01	; 1
    5f6a:	70 40       	sbci	r23, 0x00	; 0
    5f6c:	80 40       	sbci	r24, 0x00	; 0
    5f6e:	90 48       	sbci	r25, 0x80	; 128
    5f70:	68 83       	st	Y, r22
    5f72:	79 83       	std	Y+1, r23	; 0x01
    5f74:	8a 83       	std	Y+2, r24	; 0x02
    5f76:	9b 83       	std	Y+3, r25	; 0x03
    5f78:	9b 01       	movw	r18, r22
    5f7a:	3f 77       	andi	r19, 0x7F	; 127
    5f7c:	c9 01       	movw	r24, r18
    5f7e:	df 91       	pop	r29
    5f80:	cf 91       	pop	r28
    5f82:	1f 91       	pop	r17
    5f84:	0f 91       	pop	r16
    5f86:	ff 90       	pop	r15
    5f88:	ef 90       	pop	r14
    5f8a:	df 90       	pop	r13
    5f8c:	cf 90       	pop	r12
    5f8e:	bf 90       	pop	r11
    5f90:	af 90       	pop	r10
    5f92:	08 95       	ret

00005f94 <rand_r>:
    5f94:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <do_rand>
    5f98:	08 95       	ret

00005f9a <rand>:
    5f9a:	81 e0       	ldi	r24, 0x01	; 1
    5f9c:	92 e0       	ldi	r25, 0x02	; 2
    5f9e:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <do_rand>
    5fa2:	08 95       	ret

00005fa4 <srand>:
    5fa4:	a0 e0       	ldi	r26, 0x00	; 0
    5fa6:	b0 e0       	ldi	r27, 0x00	; 0
    5fa8:	80 93 01 02 	sts	0x0201, r24
    5fac:	90 93 02 02 	sts	0x0202, r25
    5fb0:	a0 93 03 02 	sts	0x0203, r26
    5fb4:	b0 93 04 02 	sts	0x0204, r27
    5fb8:	08 95       	ret

00005fba <strtod>:
    5fba:	8f 92       	push	r8
    5fbc:	9f 92       	push	r9
    5fbe:	af 92       	push	r10
    5fc0:	bf 92       	push	r11
    5fc2:	cf 92       	push	r12
    5fc4:	df 92       	push	r13
    5fc6:	ef 92       	push	r14
    5fc8:	ff 92       	push	r15
    5fca:	0f 93       	push	r16
    5fcc:	1f 93       	push	r17
    5fce:	cf 93       	push	r28
    5fd0:	df 93       	push	r29
    5fd2:	ec 01       	movw	r28, r24
    5fd4:	5b 01       	movw	r10, r22
    5fd6:	61 15       	cp	r22, r1
    5fd8:	71 05       	cpc	r23, r1
    5fda:	19 f0       	breq	.+6      	; 0x5fe2 <strtod+0x28>
    5fdc:	fb 01       	movw	r30, r22
    5fde:	91 83       	std	Z+1, r25	; 0x01
    5fe0:	80 83       	st	Z, r24
    5fe2:	f9 90       	ld	r15, Y+
    5fe4:	8f 2d       	mov	r24, r15
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	0e 94 4b 31 	call	0x6296	; 0x6296 <isspace>
    5fec:	89 2b       	or	r24, r25
    5fee:	c9 f7       	brne	.-14     	; 0x5fe2 <strtod+0x28>
    5ff0:	fd e2       	ldi	r31, 0x2D	; 45
    5ff2:	ff 16       	cp	r15, r31
    5ff4:	21 f4       	brne	.+8      	; 0x5ffe <strtod+0x44>
    5ff6:	f9 90       	ld	r15, Y+
    5ff8:	ee 24       	eor	r14, r14
    5ffa:	e3 94       	inc	r14
    5ffc:	05 c0       	rjmp	.+10     	; 0x6008 <strtod+0x4e>
    5ffe:	2b e2       	ldi	r18, 0x2B	; 43
    6000:	f2 16       	cp	r15, r18
    6002:	09 f4       	brne	.+2      	; 0x6006 <strtod+0x4c>
    6004:	f9 90       	ld	r15, Y+
    6006:	ee 24       	eor	r14, r14
    6008:	8e 01       	movw	r16, r28
    600a:	01 50       	subi	r16, 0x01	; 1
    600c:	10 40       	sbci	r17, 0x00	; 0
    600e:	c8 01       	movw	r24, r16
    6010:	63 e1       	ldi	r22, 0x13	; 19
    6012:	76 e0       	ldi	r23, 0x06	; 6
    6014:	43 e0       	ldi	r20, 0x03	; 3
    6016:	50 e0       	ldi	r21, 0x00	; 0
    6018:	0e 94 53 31 	call	0x62a6	; 0x62a6 <strncasecmp_P>
    601c:	89 2b       	or	r24, r25
    601e:	01 f5       	brne	.+64     	; 0x6060 <strtod+0xa6>
    6020:	8e 01       	movw	r16, r28
    6022:	0e 5f       	subi	r16, 0xFE	; 254
    6024:	1f 4f       	sbci	r17, 0xFF	; 255
    6026:	c8 01       	movw	r24, r16
    6028:	66 e1       	ldi	r22, 0x16	; 22
    602a:	76 e0       	ldi	r23, 0x06	; 6
    602c:	45 e0       	ldi	r20, 0x05	; 5
    602e:	50 e0       	ldi	r21, 0x00	; 0
    6030:	0e 94 53 31 	call	0x62a6	; 0x62a6 <strncasecmp_P>
    6034:	89 2b       	or	r24, r25
    6036:	19 f4       	brne	.+6      	; 0x603e <strtod+0x84>
    6038:	8e 01       	movw	r16, r28
    603a:	09 5f       	subi	r16, 0xF9	; 249
    603c:	1f 4f       	sbci	r17, 0xFF	; 255
    603e:	a1 14       	cp	r10, r1
    6040:	b1 04       	cpc	r11, r1
    6042:	19 f0       	breq	.+6      	; 0x604a <strtod+0x90>
    6044:	f5 01       	movw	r30, r10
    6046:	11 83       	std	Z+1, r17	; 0x01
    6048:	00 83       	st	Z, r16
    604a:	e0 fc       	sbrc	r14, 0
    604c:	04 c0       	rjmp	.+8      	; 0x6056 <strtod+0x9c>
    604e:	70 e0       	ldi	r23, 0x00	; 0
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	80 e8       	ldi	r24, 0x80	; 128
    6054:	14 c0       	rjmp	.+40     	; 0x607e <strtod+0xc4>
    6056:	70 e0       	ldi	r23, 0x00	; 0
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	80 e8       	ldi	r24, 0x80	; 128
    605c:	6f ef       	ldi	r22, 0xFF	; 255
    605e:	08 c1       	rjmp	.+528    	; 0x6270 <strtod+0x2b6>
    6060:	c8 01       	movw	r24, r16
    6062:	6b e1       	ldi	r22, 0x1B	; 27
    6064:	76 e0       	ldi	r23, 0x06	; 6
    6066:	43 e0       	ldi	r20, 0x03	; 3
    6068:	50 e0       	ldi	r21, 0x00	; 0
    606a:	0e 94 53 31 	call	0x62a6	; 0x62a6 <strncasecmp_P>
    606e:	89 2b       	or	r24, r25
    6070:	69 f4       	brne	.+26     	; 0x608c <strtod+0xd2>
    6072:	a1 14       	cp	r10, r1
    6074:	b1 04       	cpc	r11, r1
    6076:	29 f4       	brne	.+10     	; 0x6082 <strtod+0xc8>
    6078:	70 e0       	ldi	r23, 0x00	; 0
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	80 ec       	ldi	r24, 0xC0	; 192
    607e:	6f e7       	ldi	r22, 0x7F	; 127
    6080:	f7 c0       	rjmp	.+494    	; 0x6270 <strtod+0x2b6>
    6082:	22 96       	adiw	r28, 0x02	; 2
    6084:	f5 01       	movw	r30, r10
    6086:	d1 83       	std	Z+1, r29	; 0x01
    6088:	c0 83       	st	Z, r28
    608a:	f6 cf       	rjmp	.-20     	; 0x6078 <strtod+0xbe>
    608c:	88 24       	eor	r8, r8
    608e:	99 24       	eor	r9, r9
    6090:	40 e0       	ldi	r20, 0x00	; 0
    6092:	50 e0       	ldi	r21, 0x00	; 0
    6094:	60 e0       	ldi	r22, 0x00	; 0
    6096:	70 e0       	ldi	r23, 0x00	; 0
    6098:	ef 2d       	mov	r30, r15
    609a:	e0 53       	subi	r30, 0x30	; 48
    609c:	ea 30       	cpi	r30, 0x0A	; 10
    609e:	a0 f5       	brcc	.+104    	; 0x6108 <strtod+0x14e>
    60a0:	f2 e0       	ldi	r31, 0x02	; 2
    60a2:	ef 2a       	or	r14, r31
    60a4:	8e 2d       	mov	r24, r14
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	9c 01       	movw	r18, r24
    60aa:	28 70       	andi	r18, 0x08	; 8
    60ac:	30 70       	andi	r19, 0x00	; 0
    60ae:	e2 fe       	sbrs	r14, 2
    60b0:	06 c0       	rjmp	.+12     	; 0x60be <strtod+0x104>
    60b2:	23 2b       	or	r18, r19
    60b4:	79 f5       	brne	.+94     	; 0x6114 <strtod+0x15a>
    60b6:	08 94       	sec
    60b8:	81 1c       	adc	r8, r1
    60ba:	91 1c       	adc	r9, r1
    60bc:	2b c0       	rjmp	.+86     	; 0x6114 <strtod+0x15a>
    60be:	23 2b       	or	r18, r19
    60c0:	19 f0       	breq	.+6      	; 0x60c8 <strtod+0x10e>
    60c2:	08 94       	sec
    60c4:	81 08       	sbc	r8, r1
    60c6:	91 08       	sbc	r9, r1
    60c8:	db 01       	movw	r26, r22
    60ca:	ca 01       	movw	r24, r20
    60cc:	12 e0       	ldi	r17, 0x02	; 2
    60ce:	88 0f       	add	r24, r24
    60d0:	99 1f       	adc	r25, r25
    60d2:	aa 1f       	adc	r26, r26
    60d4:	bb 1f       	adc	r27, r27
    60d6:	1a 95       	dec	r17
    60d8:	d1 f7       	brne	.-12     	; 0x60ce <strtod+0x114>
    60da:	48 0f       	add	r20, r24
    60dc:	59 1f       	adc	r21, r25
    60de:	6a 1f       	adc	r22, r26
    60e0:	7b 1f       	adc	r23, r27
    60e2:	44 0f       	add	r20, r20
    60e4:	55 1f       	adc	r21, r21
    60e6:	66 1f       	adc	r22, r22
    60e8:	77 1f       	adc	r23, r23
    60ea:	4e 0f       	add	r20, r30
    60ec:	51 1d       	adc	r21, r1
    60ee:	61 1d       	adc	r22, r1
    60f0:	71 1d       	adc	r23, r1
    60f2:	48 39       	cpi	r20, 0x98	; 152
    60f4:	29 e9       	ldi	r18, 0x99	; 153
    60f6:	52 07       	cpc	r21, r18
    60f8:	29 e9       	ldi	r18, 0x99	; 153
    60fa:	62 07       	cpc	r22, r18
    60fc:	29 e1       	ldi	r18, 0x19	; 25
    60fe:	72 07       	cpc	r23, r18
    6100:	48 f0       	brcs	.+18     	; 0x6114 <strtod+0x15a>
    6102:	84 e0       	ldi	r24, 0x04	; 4
    6104:	e8 2a       	or	r14, r24
    6106:	06 c0       	rjmp	.+12     	; 0x6114 <strtod+0x15a>
    6108:	ee 3f       	cpi	r30, 0xFE	; 254
    610a:	31 f4       	brne	.+12     	; 0x6118 <strtod+0x15e>
    610c:	e3 fc       	sbrc	r14, 3
    610e:	39 c0       	rjmp	.+114    	; 0x6182 <strtod+0x1c8>
    6110:	98 e0       	ldi	r25, 0x08	; 8
    6112:	e9 2a       	or	r14, r25
    6114:	f9 90       	ld	r15, Y+
    6116:	c0 cf       	rjmp	.-128    	; 0x6098 <strtod+0xde>
    6118:	e5 33       	cpi	r30, 0x35	; 53
    611a:	11 f0       	breq	.+4      	; 0x6120 <strtod+0x166>
    611c:	e5 31       	cpi	r30, 0x15	; 21
    611e:	89 f5       	brne	.+98     	; 0x6182 <strtod+0x1c8>
    6120:	29 91       	ld	r18, Y+
    6122:	2d 32       	cpi	r18, 0x2D	; 45
    6124:	19 f4       	brne	.+6      	; 0x612c <strtod+0x172>
    6126:	e0 e1       	ldi	r30, 0x10	; 16
    6128:	ee 2a       	or	r14, r30
    612a:	05 c0       	rjmp	.+10     	; 0x6136 <strtod+0x17c>
    612c:	2b 32       	cpi	r18, 0x2B	; 43
    612e:	19 f0       	breq	.+6      	; 0x6136 <strtod+0x17c>
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	03 c0       	rjmp	.+6      	; 0x613c <strtod+0x182>
    6136:	29 91       	ld	r18, Y+
    6138:	82 e0       	ldi	r24, 0x02	; 2
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	e2 2f       	mov	r30, r18
    613e:	e0 53       	subi	r30, 0x30	; 48
    6140:	ea 30       	cpi	r30, 0x0A	; 10
    6142:	18 f0       	brcs	.+6      	; 0x614a <strtod+0x190>
    6144:	c8 1b       	sub	r28, r24
    6146:	d9 0b       	sbc	r29, r25
    6148:	1c c0       	rjmp	.+56     	; 0x6182 <strtod+0x1c8>
    614a:	20 e0       	ldi	r18, 0x00	; 0
    614c:	30 e0       	ldi	r19, 0x00	; 0
    614e:	fc e0       	ldi	r31, 0x0C	; 12
    6150:	20 38       	cpi	r18, 0x80	; 128
    6152:	3f 07       	cpc	r19, r31
    6154:	5c f4       	brge	.+22     	; 0x616c <strtod+0x1b2>
    6156:	c9 01       	movw	r24, r18
    6158:	88 0f       	add	r24, r24
    615a:	99 1f       	adc	r25, r25
    615c:	88 0f       	add	r24, r24
    615e:	99 1f       	adc	r25, r25
    6160:	28 0f       	add	r18, r24
    6162:	39 1f       	adc	r19, r25
    6164:	22 0f       	add	r18, r18
    6166:	33 1f       	adc	r19, r19
    6168:	2e 0f       	add	r18, r30
    616a:	31 1d       	adc	r19, r1
    616c:	e9 91       	ld	r30, Y+
    616e:	e0 53       	subi	r30, 0x30	; 48
    6170:	ea 30       	cpi	r30, 0x0A	; 10
    6172:	68 f3       	brcs	.-38     	; 0x614e <strtod+0x194>
    6174:	e4 fe       	sbrs	r14, 4
    6176:	03 c0       	rjmp	.+6      	; 0x617e <strtod+0x1c4>
    6178:	30 95       	com	r19
    617a:	21 95       	neg	r18
    617c:	3f 4f       	sbci	r19, 0xFF	; 255
    617e:	82 0e       	add	r8, r18
    6180:	93 1e       	adc	r9, r19
    6182:	ce 2c       	mov	r12, r14
    6184:	dd 24       	eor	r13, r13
    6186:	e1 fe       	sbrs	r14, 1
    6188:	07 c0       	rjmp	.+14     	; 0x6198 <strtod+0x1de>
    618a:	a1 14       	cp	r10, r1
    618c:	b1 04       	cpc	r11, r1
    618e:	21 f0       	breq	.+8      	; 0x6198 <strtod+0x1de>
    6190:	21 97       	sbiw	r28, 0x01	; 1
    6192:	f5 01       	movw	r30, r10
    6194:	d1 83       	std	Z+1, r29	; 0x01
    6196:	c0 83       	st	Z, r28
    6198:	cb 01       	movw	r24, r22
    619a:	ba 01       	movw	r22, r20
    619c:	0e 94 81 2c 	call	0x5902	; 0x5902 <__floatunsisf>
    61a0:	7b 01       	movw	r14, r22
    61a2:	8c 01       	movw	r16, r24
    61a4:	f3 e0       	ldi	r31, 0x03	; 3
    61a6:	cf 22       	and	r12, r31
    61a8:	dd 24       	eor	r13, r13
    61aa:	23 e0       	ldi	r18, 0x03	; 3
    61ac:	c2 16       	cp	r12, r18
    61ae:	d1 04       	cpc	r13, r1
    61b0:	21 f4       	brne	.+8      	; 0x61ba <strtod+0x200>
    61b2:	17 fb       	bst	r17, 7
    61b4:	10 95       	com	r17
    61b6:	17 f9       	bld	r17, 7
    61b8:	10 95       	com	r17
    61ba:	57 01       	movw	r10, r14
    61bc:	68 01       	movw	r12, r16
    61be:	c8 01       	movw	r24, r16
    61c0:	b7 01       	movw	r22, r14
    61c2:	20 e0       	ldi	r18, 0x00	; 0
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	40 e0       	ldi	r20, 0x00	; 0
    61c8:	50 e0       	ldi	r21, 0x00	; 0
    61ca:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
    61ce:	88 23       	and	r24, r24
    61d0:	09 f4       	brne	.+2      	; 0x61d4 <strtod+0x21a>
    61d2:	4a c0       	rjmp	.+148    	; 0x6268 <strtod+0x2ae>
    61d4:	97 fe       	sbrs	r9, 7
    61d6:	0d c0       	rjmp	.+26     	; 0x61f2 <strtod+0x238>
    61d8:	22 e3       	ldi	r18, 0x32	; 50
    61da:	e2 2e       	mov	r14, r18
    61dc:	26 e0       	ldi	r18, 0x06	; 6
    61de:	f2 2e       	mov	r15, r18
    61e0:	90 94       	com	r9
    61e2:	81 94       	neg	r8
    61e4:	91 08       	sbc	r9, r1
    61e6:	93 94       	inc	r9
    61e8:	c0 e2       	ldi	r28, 0x20	; 32
    61ea:	d0 e0       	ldi	r29, 0x00	; 0
    61ec:	00 e0       	ldi	r16, 0x00	; 0
    61ee:	10 e0       	ldi	r17, 0x00	; 0
    61f0:	12 c0       	rjmp	.+36     	; 0x6216 <strtod+0x25c>
    61f2:	9a e4       	ldi	r25, 0x4A	; 74
    61f4:	e9 2e       	mov	r14, r25
    61f6:	96 e0       	ldi	r25, 0x06	; 6
    61f8:	f9 2e       	mov	r15, r25
    61fa:	f6 cf       	rjmp	.-20     	; 0x61e8 <strtod+0x22e>
    61fc:	f7 01       	movw	r30, r14
    61fe:	25 91       	lpm	r18, Z+
    6200:	35 91       	lpm	r19, Z+
    6202:	45 91       	lpm	r20, Z+
    6204:	54 91       	lpm	r21, Z+
    6206:	c6 01       	movw	r24, r12
    6208:	b5 01       	movw	r22, r10
    620a:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <__mulsf3>
    620e:	5b 01       	movw	r10, r22
    6210:	6c 01       	movw	r12, r24
    6212:	8c 1a       	sub	r8, r28
    6214:	9d 0a       	sbc	r9, r29
    6216:	8c 16       	cp	r8, r28
    6218:	9d 06       	cpc	r9, r29
    621a:	84 f7       	brge	.-32     	; 0x61fc <strtod+0x242>
    621c:	d5 95       	asr	r29
    621e:	c7 95       	ror	r28
    6220:	0f 5f       	subi	r16, 0xFF	; 255
    6222:	1f 4f       	sbci	r17, 0xFF	; 255
    6224:	06 30       	cpi	r16, 0x06	; 6
    6226:	11 05       	cpc	r17, r1
    6228:	29 f0       	breq	.+10     	; 0x6234 <strtod+0x27a>
    622a:	8c ef       	ldi	r24, 0xFC	; 252
    622c:	9f ef       	ldi	r25, 0xFF	; 255
    622e:	e8 0e       	add	r14, r24
    6230:	f9 1e       	adc	r15, r25
    6232:	f1 cf       	rjmp	.-30     	; 0x6216 <strtod+0x25c>
    6234:	c5 01       	movw	r24, r10
    6236:	d6 01       	movw	r26, r12
    6238:	7c 01       	movw	r14, r24
    623a:	8d 01       	movw	r16, r26
    623c:	8c 2d       	mov	r24, r12
    623e:	88 0f       	add	r24, r24
    6240:	8d 2d       	mov	r24, r13
    6242:	88 1f       	adc	r24, r24
    6244:	8f 3f       	cpi	r24, 0xFF	; 255
    6246:	51 f0       	breq	.+20     	; 0x625c <strtod+0x2a2>
    6248:	c6 01       	movw	r24, r12
    624a:	b5 01       	movw	r22, r10
    624c:	20 e0       	ldi	r18, 0x00	; 0
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	40 e0       	ldi	r20, 0x00	; 0
    6252:	50 e0       	ldi	r21, 0x00	; 0
    6254:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <__cmpsf2>
    6258:	88 23       	and	r24, r24
    625a:	31 f4       	brne	.+12     	; 0x6268 <strtod+0x2ae>
    625c:	82 e2       	ldi	r24, 0x22	; 34
    625e:	90 e0       	ldi	r25, 0x00	; 0
    6260:	90 93 f7 06 	sts	0x06F7, r25
    6264:	80 93 f6 06 	sts	0x06F6, r24
    6268:	7e 2d       	mov	r23, r14
    626a:	9f 2d       	mov	r25, r15
    626c:	80 2f       	mov	r24, r16
    626e:	61 2f       	mov	r22, r17
    6270:	27 2f       	mov	r18, r23
    6272:	39 2f       	mov	r19, r25
    6274:	48 2f       	mov	r20, r24
    6276:	56 2f       	mov	r21, r22
    6278:	b9 01       	movw	r22, r18
    627a:	ca 01       	movw	r24, r20
    627c:	df 91       	pop	r29
    627e:	cf 91       	pop	r28
    6280:	1f 91       	pop	r17
    6282:	0f 91       	pop	r16
    6284:	ff 90       	pop	r15
    6286:	ef 90       	pop	r14
    6288:	df 90       	pop	r13
    628a:	cf 90       	pop	r12
    628c:	bf 90       	pop	r11
    628e:	af 90       	pop	r10
    6290:	9f 90       	pop	r9
    6292:	8f 90       	pop	r8
    6294:	08 95       	ret

00006296 <isspace>:
    6296:	91 11       	cpse	r25, r1
    6298:	1e c0       	rjmp	.+60     	; 0x62d6 <__ctype_isfalse>
    629a:	80 32       	cpi	r24, 0x20	; 32
    629c:	19 f0       	breq	.+6      	; 0x62a4 <isspace+0xe>
    629e:	89 50       	subi	r24, 0x09	; 9
    62a0:	85 50       	subi	r24, 0x05	; 5
    62a2:	d0 f7       	brcc	.-12     	; 0x6298 <isspace+0x2>
    62a4:	08 95       	ret

000062a6 <strncasecmp_P>:
    62a6:	fb 01       	movw	r30, r22
    62a8:	dc 01       	movw	r26, r24
    62aa:	41 50       	subi	r20, 0x01	; 1
    62ac:	50 40       	sbci	r21, 0x00	; 0
    62ae:	88 f0       	brcs	.+34     	; 0x62d2 <strncasecmp_P+0x2c>
    62b0:	8d 91       	ld	r24, X+
    62b2:	81 34       	cpi	r24, 0x41	; 65
    62b4:	1c f0       	brlt	.+6      	; 0x62bc <strncasecmp_P+0x16>
    62b6:	8b 35       	cpi	r24, 0x5B	; 91
    62b8:	0c f4       	brge	.+2      	; 0x62bc <strncasecmp_P+0x16>
    62ba:	80 5e       	subi	r24, 0xE0	; 224
    62bc:	65 91       	lpm	r22, Z+
    62be:	61 34       	cpi	r22, 0x41	; 65
    62c0:	1c f0       	brlt	.+6      	; 0x62c8 <strncasecmp_P+0x22>
    62c2:	6b 35       	cpi	r22, 0x5B	; 91
    62c4:	0c f4       	brge	.+2      	; 0x62c8 <strncasecmp_P+0x22>
    62c6:	60 5e       	subi	r22, 0xE0	; 224
    62c8:	86 1b       	sub	r24, r22
    62ca:	61 11       	cpse	r22, r1
    62cc:	71 f3       	breq	.-36     	; 0x62aa <strncasecmp_P+0x4>
    62ce:	99 0b       	sbc	r25, r25
    62d0:	08 95       	ret
    62d2:	88 1b       	sub	r24, r24
    62d4:	fc cf       	rjmp	.-8      	; 0x62ce <strncasecmp_P+0x28>

000062d6 <__ctype_isfalse>:
    62d6:	99 27       	eor	r25, r25
    62d8:	88 27       	eor	r24, r24

000062da <__ctype_istrue>:
    62da:	08 95       	ret

000062dc <_exit>:
    62dc:	f8 94       	cli

000062de <__stop_program>:
    62de:	ff cf       	rjmp	.-2      	; 0x62de <__stop_program>
