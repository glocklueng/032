
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004860  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000049d  00800200  00800200  000048d4  2**0
                  ALLOC
  2 .debug_aranges 000004b8  00000000  00000000  000048d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000008b5  00000000  00000000  00004d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000394b  00000000  00000000  00005641  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000014ac  00000000  00000000  00008f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000031df  00000000  00000000  0000a438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000770  00000000  00000000  0000d618  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e14  00000000  00000000  0000dd88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001ad3  00000000  00000000  0000eb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000840  00000000  00000000  0001066f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9c 02 	jmp	0x538	; 0x538 <__ctors_end>
       4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
       8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
       c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      10:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      14:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      18:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      1c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      20:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      24:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      28:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      2c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      30:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      34:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      38:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      3c:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__vector_15>
      40:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      44:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__vector_17>
      48:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      4c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      50:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      54:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      58:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      5c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      60:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      64:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <__vector_25>
      68:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      6c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      70:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      74:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      78:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      7c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      80:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      84:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      88:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      8c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      90:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      94:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      98:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      9c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      a0:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      a4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      a8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      ac:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      b0:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      b4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      b8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      bc:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      c0:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      c4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      c8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      cc:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      d0:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      d4:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      d8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      dc:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      e0:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__bad_interrupt>
      e4:	f5 06       	cpc	r15, r21
      e6:	f5 06       	cpc	r15, r21
      e8:	f8 06       	cpc	r15, r24
      ea:	fc 06       	cpc	r15, r28
      ec:	ff 06       	cpc	r15, r31
      ee:	06 07       	cpc	r16, r22
      f0:	47 07       	cpc	r20, r23
      f2:	47 07       	cpc	r20, r23
      f4:	0b 07       	cpc	r16, r27
      f6:	12 07       	cpc	r17, r18
      f8:	17 07       	cpc	r17, r23
      fa:	1a 07       	cpc	r17, r26
      fc:	1f 07       	cpc	r17, r31
      fe:	22 07       	cpc	r18, r18
     100:	25 07       	cpc	r18, r21
     102:	28 07       	cpc	r18, r24
     104:	2b 07       	cpc	r18, r27
     106:	2e 07       	cpc	r18, r30
     108:	31 07       	cpc	r19, r17
     10a:	36 07       	cpc	r19, r22
     10c:	39 07       	cpc	r19, r25
     10e:	3e 07       	cpc	r19, r30
     110:	41 07       	cpc	r20, r17
     112:	44 07       	cpc	r20, r20
     114:	47 07       	cpc	r20, r23
     116:	47 07       	cpc	r20, r23
     118:	47 07       	cpc	r20, r23
     11a:	47 07       	cpc	r20, r23
     11c:	47 07       	cpc	r20, r23
     11e:	47 07       	cpc	r20, r23
     120:	f8 06       	cpc	r15, r24
     122:	47 07       	cpc	r20, r23
     124:	47 07       	cpc	r20, r23
     126:	47 07       	cpc	r20, r23
     128:	47 07       	cpc	r20, r23
     12a:	47 07       	cpc	r20, r23
     12c:	47 07       	cpc	r20, r23
     12e:	47 07       	cpc	r20, r23
     130:	47 07       	cpc	r20, r23
     132:	47 07       	cpc	r20, r23
     134:	47 07       	cpc	r20, r23
     136:	47 07       	cpc	r20, r23
     138:	47 07       	cpc	r20, r23
     13a:	47 07       	cpc	r20, r23
     13c:	47 07       	cpc	r20, r23
     13e:	47 07       	cpc	r20, r23
     140:	47 07       	cpc	r20, r23
     142:	47 07       	cpc	r20, r23
     144:	47 07       	cpc	r20, r23
     146:	47 07       	cpc	r20, r23
     148:	47 07       	cpc	r20, r23
     14a:	47 07       	cpc	r20, r23
     14c:	47 07       	cpc	r20, r23
     14e:	47 07       	cpc	r20, r23
     150:	47 07       	cpc	r20, r23
     152:	47 07       	cpc	r20, r23
     154:	47 07       	cpc	r20, r23
     156:	47 07       	cpc	r20, r23
     158:	47 07       	cpc	r20, r23
     15a:	47 07       	cpc	r20, r23
     15c:	f8 06       	cpc	r15, r24
     15e:	08 4a       	sbci	r16, 0xA8	; 168
     160:	d7 3b       	cpi	r29, 0xB7	; 183
     162:	3b ce       	rjmp	.-906    	; 0xfffffdda <__eeprom_end+0xff7efdda>
     164:	01 6e       	ori	r16, 0xE1	; 225
     166:	84 bc       	out	0x24, r8	; 36
     168:	bf fd       	.word	0xfdbf	; ????
     16a:	c1 2f       	mov	r28, r17
     16c:	3d 6c       	ori	r19, 0xCD	; 205
     16e:	74 31       	cpi	r23, 0x14	; 20
     170:	9a bd       	out	0x2a, r25	; 42
     172:	56 83       	std	Z+6, r21	; 0x06
     174:	3d da       	rcall	.-2950   	; 0xfffff5f0 <__eeprom_end+0xff7ef5f0>
     176:	3d 00       	.word	0x003d	; ????
     178:	c7 7f       	andi	r28, 0xF7	; 247
     17a:	11 be       	out	0x31, r1	; 49
     17c:	d9 e4       	ldi	r29, 0x49	; 73
     17e:	bb 4c       	sbci	r27, 0xCB	; 203
     180:	3e 91       	ld	r19, -X
     182:	6b aa       	std	Y+51, r6	; 0x33
     184:	aa be       	out	0x3a, r10	; 58
     186:	00 00       	nop
     188:	00 80       	ld	r0, Z
     18a:	3f 59       	subi	r19, 0x9F	; 159

0000018b <__c.1901>:
     18b:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000194 <__c.1899>:
     194:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000019d <__c.1897>:
     19d:	59 4c 32 0d 0a 00                                   YL2...

000001a3 <__c.1895>:
     1a3:	59 4c 31 0d 0a 00                                   YL1...

000001a9 <__c.1893>:
     1a9:	58 4c 32 0d 0a 00                                   XL2...

000001af <__c.1891>:
     1af:	58 4c 31 0d 0a 00                                   XL1...

000001b5 <__c.1889>:
     1b5:	0d 0a 00                                            ...

000001b8 <__c.1887>:
     1b8:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

000001c3 <__c.1885>:
     1c3:	0d 0a 00                                            ...

000001c6 <__c.1883>:
     1c6:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000001d6 <__c.1881>:
     1d6:	0d 0a 00                                            ...

000001d9 <__c.1879>:
     1d9:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000001e6 <__c.1877>:
     1e6:	0d 0a 00                                            ...

000001e9 <__c.1875>:
     1e9:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

000001f8 <__c.1873>:
     1f8:	0d 0a 00                                            ...

000001fb <__c.1871>:
     1fb:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

00000205 <__c.1869>:
     205:	0d 0a 00                                            ...

00000208 <__c.1867>:
     208:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     218:	3d 20 00                                            = .

0000021b <__c.1865>:
     21b:	0d 0a 00                                            ...

0000021e <__c.1863>:
     21e:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     22e:	20 00                                                .

00000230 <__c.1622>:
     230:	6f 6b 0a 0d 00                                      ok...

00000235 <__c.1674>:
     235:	0a 0d 00                                            ...

00000238 <__c.1672>:
     238:	65 72 72 6f 72 3a 20 00                             error: .

00000240 <__c.1669>:
     240:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     250:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

0000025e <__c.1666>:
     25e:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     26e:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

0000027d <__c.1663>:
     27d:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     28d:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

0000029e <__c.1660>:
     29e:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     2ae:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

000002b9 <__c.1656>:
     2b9:	6f 6b 0a 0d 00                                      ok...

000002be <__c.1653>:
     2be:	0d 0a 4e 6f 74 20 68 6f 6d 65 64 0a 0d 00           ..Not homed...

000002cc <__c.1728>:
     2cc:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     2dc:	6e 67 0d 0a 00                                      ng...

000002e1 <__c.1726>:
     2e1:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     2f1:	72 0d 0a 00                                         r...

000002f5 <__c.1683>:
     2f5:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     305:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     315:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     325:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     335:	0d 0a 00                                            ...

00000338 <__c.1681>:
     338:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     348:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     358:	61 62 6c 65 64 29 0d 0a 00                          abled)...

00000361 <__c.1679>:
     361:	24 31 30 30 30 20 3d 20 00                          $1000 = .

0000036a <__c.1677>:
     36a:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     37a:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     38a:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     39a:	2f 6d 69 6e 29 0d 0a 00                             /min)...

000003a2 <__c.1675>:
     3a2:	24 39 20 3d 20 00                                   $9 = .

000003a8 <__c.1673>:
     3a8:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     3b8:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000003c6 <__c.1671>:
     3c6:	24 38 20 3d 20 00                                   $8 = .

000003cc <__c.1669>:
     3cc:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     3dc:	29 0d 0a 00                                         )...

000003e0 <__c.1667>:
     3e0:	24 37 20 3d 20 00                                   $7 = .

000003e6 <__c.1665>:
     3e6:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     3f6:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000404 <__c.1663>:
     404:	24 36 20 3d 20 00                                   $6 = .

0000040a <__c.1661>:
     40a:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     41a:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000428 <__c.1659>:
     428:	24 35 20 3d 20 00                                   $5 = .

0000042e <__c.1657>:
     42e:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     43e:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

0000044b <__c.1655>:
     44b:	24 34 20 3d 20 00                                   $4 = .

00000451 <__c.1653>:
     451:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     461:	0a 00                                               ..

00000463 <__c.1651>:
     463:	24 33 20 3d 20 00                                   $3 = .

00000469 <__c.1649>:
     469:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

00000479 <__c.1647>:
     479:	24 32 20 3d 20 00                                   $2 = .

0000047f <__c.1645>:
     47f:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

0000048f <__c.1643>:
     48f:	24 31 20 3d 20 00                                   $1 = .

00000495 <__c.1641>:
     495:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000004a5 <__c.1639>:
     4a5:	24 30 20 3d 20 00                                   $0 = .

000004ab <__c.1637>:
     4ab:	0d 0a 00                                            ...

000004ae <__c.1635>:
     4ae:	30 2e 37 36 50 42 00                                0.76PB.

000004b5 <__c.1633>:
     4b5:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000004c1 <__c.2171>:
     4c1:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

000004cf <__c.2031>:
     4cf:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000004d9 <__c.2049>:
     4d9:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

000004e3 <__c.1824>:
     4e3:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     4f3:	0d 00                                               ..

000004f5 <__c.1840>:
     4f5:	6e 0d 0a 00                                         n...

000004f9 <__c.1838>:
     4f9:	79 0d 0a 00                                         y...

000004fd <pstr_inf>:
     4fd:	49 4e 46                                            INF

00000500 <pstr_inity>:
     500:	49 4e 49 54 59                                      INITY

00000505 <pstr_nan>:
     505:	4e 41 4e                                            NAN

00000508 <pwr_m10>:
     508:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     518:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000520 <pwr_p10>:
     520:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     530:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000538 <__ctors_end>:
     538:	11 24       	eor	r1, r1
     53a:	1f be       	out	0x3f, r1	; 63
     53c:	cf ef       	ldi	r28, 0xFF	; 255
     53e:	d1 e2       	ldi	r29, 0x21	; 33
     540:	de bf       	out	0x3e, r29	; 62
     542:	cd bf       	out	0x3d, r28	; 61
     544:	00 e0       	ldi	r16, 0x00	; 0
     546:	0c bf       	out	0x3c, r16	; 60

00000548 <__do_copy_data>:
     548:	12 e0       	ldi	r17, 0x02	; 2
     54a:	a0 e0       	ldi	r26, 0x00	; 0
     54c:	b2 e0       	ldi	r27, 0x02	; 2
     54e:	e0 e6       	ldi	r30, 0x60	; 96
     550:	f8 e4       	ldi	r31, 0x48	; 72
     552:	00 e0       	ldi	r16, 0x00	; 0
     554:	0b bf       	out	0x3b, r16	; 59
     556:	02 c0       	rjmp	.+4      	; 0x55c <__do_copy_data+0x14>
     558:	07 90       	elpm	r0, Z+
     55a:	0d 92       	st	X+, r0
     55c:	a0 30       	cpi	r26, 0x00	; 0
     55e:	b1 07       	cpc	r27, r17
     560:	d9 f7       	brne	.-10     	; 0x558 <__do_copy_data+0x10>

00000562 <__do_clear_bss>:
     562:	16 e0       	ldi	r17, 0x06	; 6
     564:	a0 e0       	ldi	r26, 0x00	; 0
     566:	b2 e0       	ldi	r27, 0x02	; 2
     568:	01 c0       	rjmp	.+2      	; 0x56c <.do_clear_bss_start>

0000056a <.do_clear_bss_loop>:
     56a:	1d 92       	st	X+, r1

0000056c <.do_clear_bss_start>:
     56c:	ad 39       	cpi	r26, 0x9D	; 157
     56e:	b1 07       	cpc	r27, r17
     570:	e1 f7       	brne	.-8      	; 0x56a <.do_clear_bss_loop>
     572:	0e 94 a0 09 	call	0x1340	; 0x1340 <main>
     576:	0c 94 2e 24 	jmp	0x485c	; 0x485c <_exit>

0000057a <__bad_interrupt>:
     57a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000057e <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     57e:	24 9a       	sbi	0x04, 4	; 4
}
     580:	08 95       	ret

00000582 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     582:	89 2b       	or	r24, r25
     584:	11 f0       	breq	.+4      	; 0x58a <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     586:	2c 9a       	sbi	0x05, 4	; 5
     588:	08 95       	ret
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     58a:	2c 98       	cbi	0x05, 4	; 5
     58c:	08 95       	ret

0000058e <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     58e:	f9 99       	sbic	0x1f, 1	; 31
     590:	fe cf       	rjmp	.-4      	; 0x58e <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     592:	92 bd       	out	0x22, r25	; 34
     594:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     59a:	80 b5       	in	r24, 0x20	; 32
}
     59c:	08 95       	ret

0000059e <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     59e:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5a0:	f9 99       	sbic	0x1f, 1	; 31
     5a2:	fe cf       	rjmp	.-4      	; 0x5a0 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     5a4:	92 bd       	out	0x22, r25	; 34
     5a6:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     5ac:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     5ae:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     5b0:	89 2f       	mov	r24, r25
     5b2:	86 23       	and	r24, r22
     5b4:	39 f0       	breq	.+14     	; 0x5c4 <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     5b6:	6f 3f       	cpi	r22, 0xFF	; 255
     5b8:	19 f0       	breq	.+6      	; 0x5c0 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     5ba:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5bc:	84 e0       	ldi	r24, 0x04	; 4
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5c0:	84 e1       	ldi	r24, 0x14	; 20
     5c2:	04 c0       	rjmp	.+8      	; 0x5cc <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     5c4:	99 23       	and	r25, r25
     5c6:	21 f0       	breq	.+8      	; 0x5d0 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     5c8:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5ca:	84 e2       	ldi	r24, 0x24	; 36
     5cc:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     5ce:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     5d0:	78 94       	sei
}
     5d2:	08 95       	ret

000005d4 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     5d4:	8f 92       	push	r8
     5d6:	9f 92       	push	r9
     5d8:	af 92       	push	r10
     5da:	bf 92       	push	r11
     5dc:	cf 92       	push	r12
     5de:	df 92       	push	r13
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	0f 92       	push	r0
     5ec:	0f 92       	push	r0
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	5c 01       	movw	r10, r24
     5f4:	6b 01       	movw	r12, r22
     5f6:	7a 01       	movw	r14, r20
     5f8:	4a 01       	movw	r8, r20
     5fa:	00 e0       	ldi	r16, 0x00	; 0
     5fc:	1e c0       	rjmp	.+60     	; 0x63a <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     5fe:	00 23       	and	r16, r16
     600:	19 f0       	breq	.+6      	; 0x608 <memcpy_to_eeprom_with_checksum+0x34>
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	08 c0       	rjmp	.+16     	; 0x618 <memcpy_to_eeprom_with_checksum+0x44>
     608:	20 2f       	mov	r18, r16
     60a:	33 27       	eor	r19, r19
     60c:	27 fd       	sbrc	r18, 7
     60e:	30 95       	com	r19
     610:	22 27       	eor	r18, r18
     612:	33 0f       	add	r19, r19
     614:	22 1f       	adc	r18, r18
     616:	33 27       	eor	r19, r19
    checksum += *source;
     618:	f6 01       	movw	r30, r12
     61a:	61 91       	ld	r22, Z+
     61c:	6f 01       	movw	r12, r30
     61e:	06 2f       	mov	r16, r22
     620:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     622:	9c 01       	movw	r18, r24
     624:	2f 5f       	subi	r18, 0xFF	; 255
     626:	3f 4f       	sbci	r19, 0xFF	; 255
     628:	3a 83       	std	Y+2, r19	; 0x02
     62a:	29 83       	std	Y+1, r18	; 0x01
     62c:	0e 94 cf 02 	call	0x59e	; 0x59e <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     630:	08 94       	sec
     632:	81 08       	sbc	r8, r1
     634:	91 08       	sbc	r9, r1
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	81 14       	cp	r8, r1
     63c:	91 04       	cpc	r9, r1
     63e:	f9 f6       	brne	.-66     	; 0x5fe <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     640:	c7 01       	movw	r24, r14
     642:	8a 0d       	add	r24, r10
     644:	9b 1d       	adc	r25, r11
     646:	60 2f       	mov	r22, r16
     648:	0e 94 cf 02 	call	0x59e	; 0x59e <eeprom_put_char>
}
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	cf 91       	pop	r28
     652:	df 91       	pop	r29
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	bf 90       	pop	r11
     660:	af 90       	pop	r10
     662:	9f 90       	pop	r9
     664:	8f 90       	pop	r8
     666:	08 95       	ret

00000668 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	fb 01       	movw	r30, r22
     670:	9a 01       	movw	r18, r20
     672:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     674:	b1 e0       	ldi	r27, 0x01	; 1
     676:	19 c0       	rjmp	.+50     	; 0x6aa <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     678:	f9 99       	sbic	0x1f, 1	; 31
     67a:	fe cf       	rjmp	.-4      	; 0x678 <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     67c:	f2 bd       	out	0x22, r31	; 34
     67e:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     680:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     682:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     684:	99 23       	and	r25, r25
     686:	19 f0       	breq	.+6      	; 0x68e <memcpy_from_eeprom_with_checksum+0x26>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	08 c0       	rjmp	.+16     	; 0x69e <memcpy_from_eeprom_with_checksum+0x36>
     68e:	89 2f       	mov	r24, r25
     690:	99 27       	eor	r25, r25
     692:	87 fd       	sbrc	r24, 7
     694:	90 95       	com	r25
     696:	88 27       	eor	r24, r24
     698:	99 0f       	add	r25, r25
     69a:	88 1f       	adc	r24, r24
     69c:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     69e:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     6a0:	9a 2f       	mov	r25, r26
     6a2:	98 0f       	add	r25, r24
    *(destination++) = data; 
     6a4:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	30 40       	sbci	r19, 0x00	; 0
     6aa:	21 15       	cp	r18, r1
     6ac:	31 05       	cpc	r19, r1
     6ae:	21 f7       	brne	.-56     	; 0x678 <memcpy_from_eeprom_with_checksum+0x10>
     6b0:	46 0f       	add	r20, r22
     6b2:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6b4:	f9 99       	sbic	0x1f, 1	; 31
     6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     6b8:	52 bd       	out	0x22, r21	; 34
     6ba:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     6c0:	80 b5       	in	r24, 0x20	; 32
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	98 17       	cp	r25, r24
     6c8:	11 f4       	brne	.+4      	; 0x6ce <memcpy_from_eeprom_with_checksum+0x66>
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     6ce:	c9 01       	movw	r24, r18
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     6d6:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     6da:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     6de:	40 93 27 02 	sts	0x0227, r20
}
     6e2:	08 95       	ret

000006e4 <gotoxy>:
*/



void gotoxy( double x,double y, double z,double c )
{
     6e4:	2f 92       	push	r2
     6e6:	3f 92       	push	r3
     6e8:	4f 92       	push	r4
     6ea:	5f 92       	push	r5
     6ec:	6f 92       	push	r6
     6ee:	7f 92       	push	r7
     6f0:	8f 92       	push	r8
     6f2:	9f 92       	push	r9
     6f4:	af 92       	push	r10
     6f6:	bf 92       	push	r11
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	28 97       	sbiw	r28, 0x08	; 8
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	69 83       	std	Y+1, r22	; 0x01
     71a:	7a 83       	std	Y+2, r23	; 0x02
     71c:	8b 83       	std	Y+3, r24	; 0x03
     71e:	9c 83       	std	Y+4, r25	; 0x04
     720:	2d 83       	std	Y+5, r18	; 0x05
     722:	3e 83       	std	Y+6, r19	; 0x06
     724:	4f 83       	std	Y+7, r20	; 0x07
     726:	58 87       	std	Y+8, r21	; 0x08
     728:	37 01       	movw	r6, r14
     72a:	48 01       	movw	r8, r16
     72c:	15 01       	movw	r2, r10
     72e:	26 01       	movw	r4, r12

	// 
  if( x == -1) z = gc.position[X_AXIS] ;
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e8       	ldi	r20, 0x80	; 128
     736:	5f eb       	ldi	r21, 0xBF	; 191
     738:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
     73c:	88 23       	and	r24, r24
     73e:	41 f4       	brne	.+16     	; 0x750 <gotoxy+0x6c>
     740:	60 90 12 02 	lds	r6, 0x0212
     744:	70 90 13 02 	lds	r7, 0x0213
     748:	80 90 14 02 	lds	r8, 0x0214
     74c:	90 90 15 02 	lds	r9, 0x0215
  if( y == -1) c = gc.position[Y_AXIS] ;
     750:	6d 81       	ldd	r22, Y+5	; 0x05
     752:	7e 81       	ldd	r23, Y+6	; 0x06
     754:	8f 81       	ldd	r24, Y+7	; 0x07
     756:	98 85       	ldd	r25, Y+8	; 0x08
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e8       	ldi	r20, 0x80	; 128
     75e:	5f eb       	ldi	r21, 0xBF	; 191
     760:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
     764:	88 23       	and	r24, r24
     766:	41 f4       	brne	.+16     	; 0x778 <gotoxy+0x94>
     768:	20 90 16 02 	lds	r2, 0x0216
     76c:	30 90 17 02 	lds	r3, 0x0217
     770:	40 90 18 02 	lds	r4, 0x0218
     774:	50 90 19 02 	lds	r5, 0x0219
  if( z == -1) z = gc.position[Z_AXIS] ;
     778:	c4 01       	movw	r24, r8
     77a:	b3 01       	movw	r22, r6
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e8       	ldi	r20, 0x80	; 128
     782:	5f eb       	ldi	r21, 0xBF	; 191
     784:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
     788:	88 23       	and	r24, r24
     78a:	41 f4       	brne	.+16     	; 0x79c <gotoxy+0xb8>
     78c:	60 90 1a 02 	lds	r6, 0x021A
     790:	70 90 1b 02 	lds	r7, 0x021B
     794:	80 90 1c 02 	lds	r8, 0x021C
     798:	90 90 1d 02 	lds	r9, 0x021D
  if( c == -1) c = gc.position[C_AXIS] ;
     79c:	c2 01       	movw	r24, r4
     79e:	b1 01       	movw	r22, r2
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	40 e8       	ldi	r20, 0x80	; 128
     7a6:	5f eb       	ldi	r21, 0xBF	; 191
     7a8:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
     7ac:	88 23       	and	r24, r24
     7ae:	41 f4       	brne	.+16     	; 0x7c0 <gotoxy+0xdc>
     7b0:	20 90 1e 02 	lds	r2, 0x021E
     7b4:	30 90 1f 02 	lds	r3, 0x021F
     7b8:	40 90 20 02 	lds	r4, 0x0220
     7bc:	50 90 21 02 	lds	r5, 0x0221

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <gotoxy+0xde>
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <gotoxy+0xe0>
     7c4:	80 91 0e 02 	lds	r24, 0x020E
     7c8:	90 91 0f 02 	lds	r25, 0x020F
     7cc:	a0 91 10 02 	lds	r26, 0x0210
     7d0:	b0 91 11 02 	lds	r27, 0x0211
     7d4:	ed b7       	in	r30, 0x3d	; 61
     7d6:	fe b7       	in	r31, 0x3e	; 62
     7d8:	81 83       	std	Z+1, r24	; 0x01
     7da:	92 83       	std	Z+2, r25	; 0x02
     7dc:	a3 83       	std	Z+3, r26	; 0x03
     7de:	b4 83       	std	Z+4, r27	; 0x04
     7e0:	16 82       	std	Z+6, r1	; 0x06
     7e2:	15 82       	std	Z+5, r1	; 0x05
     7e4:	69 81       	ldd	r22, Y+1	; 0x01
     7e6:	7a 81       	ldd	r23, Y+2	; 0x02
     7e8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ea:	9c 81       	ldd	r25, Y+4	; 0x04
     7ec:	2d 81       	ldd	r18, Y+5	; 0x05
     7ee:	3e 81       	ldd	r19, Y+6	; 0x06
     7f0:	4f 81       	ldd	r20, Y+7	; 0x07
     7f2:	58 85       	ldd	r21, Y+8	; 0x08
     7f4:	84 01       	movw	r16, r8
     7f6:	73 01       	movw	r14, r6
     7f8:	62 01       	movw	r12, r4
     7fa:	51 01       	movw	r10, r2
     7fc:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	ab 81       	ldd	r26, Y+3	; 0x03
     806:	bc 81       	ldd	r27, Y+4	; 0x04
     808:	80 93 12 02 	sts	0x0212, r24
     80c:	90 93 13 02 	sts	0x0213, r25
     810:	a0 93 14 02 	sts	0x0214, r26
     814:	b0 93 15 02 	sts	0x0215, r27
   gc.position[Y_AXIS] = y;
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	9e 81       	ldd	r25, Y+6	; 0x06
     81c:	af 81       	ldd	r26, Y+7	; 0x07
     81e:	b8 85       	ldd	r27, Y+8	; 0x08
     820:	80 93 16 02 	sts	0x0216, r24
     824:	90 93 17 02 	sts	0x0217, r25
     828:	a0 93 18 02 	sts	0x0218, r26
     82c:	b0 93 19 02 	sts	0x0219, r27
   gc.position[Z_AXIS] = z;
     830:	60 92 1a 02 	sts	0x021A, r6
     834:	70 92 1b 02 	sts	0x021B, r7
     838:	80 92 1c 02 	sts	0x021C, r8
     83c:	90 92 1d 02 	sts	0x021D, r9
   gc.position[C_AXIS] = c;
     840:	20 92 1e 02 	sts	0x021E, r2
     844:	30 92 1f 02 	sts	0x021F, r3
     848:	40 92 20 02 	sts	0x0220, r4
     84c:	50 92 21 02 	sts	0x0221, r5
     850:	ad b7       	in	r26, 0x3d	; 61
     852:	be b7       	in	r27, 0x3e	; 62
     854:	16 96       	adiw	r26, 0x06	; 6
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	be bf       	out	0x3e, r27	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	ad bf       	out	0x3d, r26	; 61

}
     860:	28 96       	adiw	r28, 0x08	; 8
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	9f 90       	pop	r9
     882:	8f 90       	pop	r8
     884:	7f 90       	pop	r7
     886:	6f 90       	pop	r6
     888:	5f 90       	pop	r5
     88a:	4f 90       	pop	r4
     88c:	3f 90       	pop	r3
     88e:	2f 90       	pop	r2
     890:	08 95       	ret

00000892 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	df 93       	push	r29
     8a4:	cf 93       	push	r28
     8a6:	0f 92       	push	r0
     8a8:	0f 92       	push	r0
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	6c 01       	movw	r12, r24
     8b0:	5b 01       	movw	r10, r22
     8b2:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     8b4:	fb 01       	movw	r30, r22
     8b6:	00 81       	ld	r16, Z
     8b8:	11 81       	ldd	r17, Z+1	; 0x01
     8ba:	08 0f       	add	r16, r24
     8bc:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     8be:	c8 01       	movw	r24, r16
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	0e 94 9d 22 	call	0x453a	; 0x453a <strtod>
     8ca:	f7 01       	movw	r30, r14
     8cc:	60 83       	st	Z, r22
     8ce:	71 83       	std	Z+1, r23	; 0x01
     8d0:	82 83       	std	Z+2, r24	; 0x02
     8d2:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	80 17       	cp	r24, r16
     8da:	91 07       	cpc	r25, r17
     8dc:	31 f4       	brne	.+12     	; 0x8ea <read_double+0x58>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 00 02 	sts	0x0200, r24
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <read_double+0x66>
    return(0); 
  };

  *char_counter = end - line;
     8ea:	8c 19       	sub	r24, r12
     8ec:	9d 09       	sbc	r25, r13
     8ee:	f5 01       	movw	r30, r10
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	80 83       	st	Z, r24
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     8f8:	c9 01       	movw	r24, r18
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	cf 91       	pop	r28
     900:	df 91       	pop	r29
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	08 95       	ret

00000914 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
     91e:	8b 01       	movw	r16, r22
     920:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     922:	ed 91       	ld	r30, X+
     924:	fc 91       	ld	r31, X
     926:	11 97       	sbiw	r26, 0x01	; 1
     928:	e4 0f       	add	r30, r20
     92a:	f5 1f       	adc	r31, r21
     92c:	e0 81       	ld	r30, Z
     92e:	ee 23       	and	r30, r30
     930:	39 f0       	breq	.+14     	; 0x940 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     932:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     934:	e1 54       	subi	r30, 0x41	; 65
     936:	ea 31       	cpi	r30, 0x1A	; 26
     938:	30 f0       	brcs	.+12     	; 0x946 <next_statement+0x32>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	80 93 00 02 	sts	0x0200, r24
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	10 c0       	rjmp	.+32     	; 0x966 <next_statement+0x52>
    return(0);
  }
  (*char_counter)++;
     946:	8d 91       	ld	r24, X+
     948:	9c 91       	ld	r25, X
     94a:	11 97       	sbiw	r26, 0x01	; 1
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	8d 93       	st	X+, r24
     950:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     952:	ca 01       	movw	r24, r20
     954:	b9 01       	movw	r22, r18
     956:	a8 01       	movw	r20, r16
     958:	0e 94 49 04 	call	0x892	; 0x892 <read_double>
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	11 f0       	breq	.+4      	; 0x964 <next_statement+0x50>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     966:	c9 01       	movw	r24, r18
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     972:	88 e2       	ldi	r24, 0x28	; 40
     974:	e0 e0       	ldi	r30, 0x00	; 0
     976:	f2 e0       	ldi	r31, 0x02	; 2
     978:	df 01       	movw	r26, r30
     97a:	1d 92       	st	X+, r1
     97c:	8a 95       	dec	r24
     97e:	e9 f7       	brne	.-6      	; 0x97a <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     980:	60 91 86 06 	lds	r22, 0x0686
     984:	70 91 87 06 	lds	r23, 0x0687
     988:	80 91 88 06 	lds	r24, 0x0688
     98c:	90 91 89 06 	lds	r25, 0x0689
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e7       	ldi	r20, 0x70	; 112
     996:	52 e4       	ldi	r21, 0x42	; 66
     998:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
     99c:	60 93 0a 02 	sts	0x020A, r22
     9a0:	70 93 0b 02 	sts	0x020B, r23
     9a4:	80 93 0c 02 	sts	0x020C, r24
     9a8:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     9ac:	60 91 8a 06 	lds	r22, 0x068A
     9b0:	70 91 8b 06 	lds	r23, 0x068B
     9b4:	80 91 8c 06 	lds	r24, 0x068C
     9b8:	90 91 8d 06 	lds	r25, 0x068D
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e7       	ldi	r20, 0x70	; 112
     9c2:	52 e4       	ldi	r21, 0x42	; 66
     9c4:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
     9c8:	60 93 0e 02 	sts	0x020E, r22
     9cc:	70 93 0f 02 	sts	0x020F, r23
     9d0:	80 93 10 02 	sts	0x0210, r24
     9d4:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     9d8:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     9e8:	90 93 04 02 	sts	0x0204, r25
}
     9ec:	08 95       	ret

000009ee <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     9ee:	2f 92       	push	r2
     9f0:	3f 92       	push	r3
     9f2:	4f 92       	push	r4
     9f4:	5f 92       	push	r5
     9f6:	6f 92       	push	r6
     9f8:	7f 92       	push	r7
     9fa:	8f 92       	push	r8
     9fc:	9f 92       	push	r9
     9fe:	af 92       	push	r10
     a00:	bf 92       	push	r11
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	e2 97       	sbiw	r28, 0x32	; 50
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     a24:	1b 82       	std	Y+3, r1	; 0x03
     a26:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a0 e0       	ldi	r26, 0x00	; 0
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	88 87       	std	Y+8, r24	; 0x08
     a32:	99 87       	std	Y+9, r25	; 0x09
     a34:	aa 87       	std	Y+10, r26	; 0x0a
     a36:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     a38:	80 e1       	ldi	r24, 0x10	; 16
     a3a:	fe 01       	movw	r30, r28
     a3c:	3c 96       	adiw	r30, 0x0c	; 12
     a3e:	df 01       	movw	r26, r30
     a40:	98 2f       	mov	r25, r24
     a42:	1d 92       	st	X+, r1
     a44:	9a 95       	dec	r25
     a46:	e9 f7       	brne	.-6      	; 0xa42 <gc_execute_line+0x54>
  clear_vector(offset);
     a48:	fe 01       	movw	r30, r28
     a4a:	7c 96       	adiw	r30, 0x1c	; 28
     a4c:	df 01       	movw	r26, r30
     a4e:	1d 92       	st	X+, r1
     a50:	8a 95       	dec	r24
     a52:	e9 f7       	brne	.-6      	; 0xa4e <gc_execute_line+0x60>

  gc.status_code = GCSTATUS_OK;
     a54:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     a58:	f5 01       	movw	r30, r10
     a5a:	80 81       	ld	r24, Z
     a5c:	88 32       	cpi	r24, 0x28	; 40
     a5e:	51 f1       	breq	.+84     	; 0xab4 <gc_execute_line+0xc6>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     a60:	8f 32       	cpi	r24, 0x2F	; 47
     a62:	29 f4       	brne	.+10     	; 0xa6e <gc_execute_line+0x80>
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	9b 81       	ldd	r25, Y+3	; 0x03
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	9b 83       	std	Y+3, r25	; 0x03
     a6c:	8a 83       	std	Y+2, r24	; 0x02
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     a6e:	d5 01       	movw	r26, r10
     a70:	8c 91       	ld	r24, X
     a72:	84 32       	cpi	r24, 0x24	; 36
     a74:	a9 f0       	breq	.+42     	; 0xaa0 <gc_execute_line+0xb2>
     a76:	55 24       	eor	r5, r5
     a78:	1c a6       	std	Y+44, r1	; 0x2c
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     a7a:	b4 e0       	ldi	r27, 0x04	; 4
     a7c:	6b 2e       	mov	r6, r27
     a7e:	71 2c       	mov	r7, r1
     a80:	6c 0e       	add	r6, r28
     a82:	7d 1e       	adc	r7, r29
     a84:	a2 e0       	ldi	r26, 0x02	; 2
     a86:	2a 2e       	mov	r2, r26
     a88:	31 2c       	mov	r3, r1
     a8a:	2c 0e       	add	r2, r28
     a8c:	3d 1e       	adc	r3, r29
     a8e:	4e 01       	movw	r8, r28
     a90:	08 94       	sec
     a92:	81 1c       	adc	r8, r1
     a94:	91 1c       	adc	r9, r1
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     a96:	f3 e0       	ldi	r31, 0x03	; 3
     a98:	cf 2e       	mov	r12, r31
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     a9a:	dd 24       	eor	r13, r13
     a9c:	d3 94       	inc	r13
     a9e:	04 c2       	rjmp	.+1032   	; 0xea8 <gc_execute_line+0x4ba>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9b 83       	std	Y+3, r25	; 0x03
     aa6:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     aa8:	f5 01       	movw	r30, r10
     aaa:	81 81       	ldd	r24, Z+1	; 0x01
     aac:	88 23       	and	r24, r24
     aae:	21 f4       	brne	.+8      	; 0xab8 <gc_execute_line+0xca>
     ab0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <settings_dump>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	ec c3       	rjmp	.+2008   	; 0x1290 <gc_execute_line+0x8a2>
    read_double(line, &char_counter, &p);
     ab8:	8e 01       	movw	r16, r28
     aba:	0e 5f       	subi	r16, 0xFE	; 254
     abc:	1f 4f       	sbci	r17, 0xFF	; 255
     abe:	c5 01       	movw	r24, r10
     ac0:	b8 01       	movw	r22, r16
     ac2:	ae 01       	movw	r20, r28
     ac4:	48 5f       	subi	r20, 0xF8	; 248
     ac6:	5f 4f       	sbci	r21, 0xFF	; 255
     ac8:	0e 94 49 04 	call	0x892	; 0x892 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	9b 81       	ldd	r25, Y+3	; 0x03
     ad0:	f5 01       	movw	r30, r10
     ad2:	e8 0f       	add	r30, r24
     ad4:	f9 1f       	adc	r31, r25
     ad6:	20 81       	ld	r18, Z
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	9b 83       	std	Y+3, r25	; 0x03
     adc:	8a 83       	std	Y+2, r24	; 0x02
     ade:	2d 33       	cpi	r18, 0x3D	; 61
     ae0:	09 f0       	breq	.+2      	; 0xae4 <gc_execute_line+0xf6>
     ae2:	d5 c3       	rjmp	.+1962   	; 0x128e <gc_execute_line+0x8a0>
    read_double(line, &char_counter, &value);
     ae4:	c5 01       	movw	r24, r10
     ae6:	b8 01       	movw	r22, r16
     ae8:	ae 01       	movw	r20, r28
     aea:	4c 5f       	subi	r20, 0xFC	; 252
     aec:	5f 4f       	sbci	r21, 0xFF	; 255
     aee:	0e 94 49 04 	call	0x892	; 0x892 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     af2:	ea 81       	ldd	r30, Y+2	; 0x02
     af4:	fb 81       	ldd	r31, Y+3	; 0x03
     af6:	ea 0d       	add	r30, r10
     af8:	fb 1d       	adc	r31, r11
     afa:	80 81       	ld	r24, Z
     afc:	88 23       	and	r24, r24
     afe:	09 f0       	breq	.+2      	; 0xb02 <gc_execute_line+0x114>
     b00:	c6 c3       	rjmp	.+1932   	; 0x128e <gc_execute_line+0x8a0>
    settings_store_setting(p, value);
     b02:	68 85       	ldd	r22, Y+8	; 0x08
     b04:	79 85       	ldd	r23, Y+9	; 0x09
     b06:	8a 85       	ldd	r24, Y+10	; 0x0a
     b08:	9b 85       	ldd	r25, Y+11	; 0x0b
     b0a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	4c 81       	ldd	r20, Y+4	; 0x04
     b14:	5d 81       	ldd	r21, Y+5	; 0x05
     b16:	6e 81       	ldd	r22, Y+6	; 0x06
     b18:	7f 81       	ldd	r23, Y+7	; 0x07
     b1a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <settings_store_setting>
     b1e:	b4 c3       	rjmp	.+1896   	; 0x1288 <gc_execute_line+0x89a>
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     b20:	6c 81       	ldd	r22, Y+4	; 0x04
     b22:	7d 81       	ldd	r23, Y+5	; 0x05
     b24:	8e 81       	ldd	r24, Y+6	; 0x06
     b26:	9f 81       	ldd	r25, Y+7	; 0x07
     b28:	0e 94 0c 22 	call	0x4418	; 0x4418 <trunc>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
     b34:	fb 01       	movw	r30, r22

    switch(letter) {
     b36:	29 81       	ldd	r18, Y+1	; 0x01
     b38:	27 34       	cpi	r18, 0x47	; 71
     b3a:	09 f4       	brne	.+2      	; 0xb3e <gc_execute_line+0x150>
     b3c:	a2 c0       	rjmp	.+324    	; 0xc82 <gc_execute_line+0x294>
     b3e:	28 34       	cpi	r18, 0x48	; 72
     b40:	20 f4       	brcc	.+8      	; 0xb4a <gc_execute_line+0x15c>
     b42:	24 34       	cpi	r18, 0x44	; 68
     b44:	09 f0       	breq	.+2      	; 0xb48 <gc_execute_line+0x15a>
     b46:	ac c1       	rjmp	.+856    	; 0xea0 <gc_execute_line+0x4b2>
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <gc_execute_line+0x16a>
     b4a:	2d 34       	cpi	r18, 0x4D	; 77
     b4c:	09 f4       	brne	.+2      	; 0xb50 <gc_execute_line+0x162>
     b4e:	41 c1       	rjmp	.+642    	; 0xdd2 <gc_execute_line+0x3e4>
     b50:	24 35       	cpi	r18, 0x54	; 84
     b52:	09 f0       	breq	.+2      	; 0xb56 <gc_execute_line+0x168>
     b54:	a5 c1       	rjmp	.+842    	; 0xea0 <gc_execute_line+0x4b2>
     b56:	9e c1       	rjmp	.+828    	; 0xe94 <gc_execute_line+0x4a6>
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     b58:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     b5a:	8e e1       	ldi	r24, 0x1E	; 30
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
		  	printBinary( DIRECTION_DDR );
     b62:	60 b3       	in	r22, 0x10	; 16
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <printBinary>
	      	printPgmString(PSTR("\r\n"));
     b6e:	8b e1       	ldi	r24, 0x1B	; 27
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
		  	printBinary( DIRECTION_PORT );
     b7e:	61 b3       	in	r22, 0x11	; 17
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <printBinary>
	      	printPgmString(PSTR("\r\n"));
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

			ch = PORTD;
     b92:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     b94:	8b ef       	ldi	r24, 0xFB	; 251
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
		  	printBinary( ch );
     b9c:	ff 24       	eor	r15, r15
     b9e:	00 e0       	ldi	r16, 0x00	; 0
     ba0:	10 e0       	ldi	r17, 0x00	; 0
     ba2:	c8 01       	movw	r24, r16
     ba4:	b7 01       	movw	r22, r14
     ba6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <printBinary>
	      	printPgmString(PSTR("\r\n"));
     baa:	88 ef       	ldi	r24, 0xF8	; 248
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

			ch = PIND;
     bb2:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     bb4:	89 ee       	ldi	r24, 0xE9	; 233
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
		  	printBinary( ch );
     bbc:	ff 24       	eor	r15, r15
     bbe:	00 e0       	ldi	r16, 0x00	; 0
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	c8 01       	movw	r24, r16
     bc4:	b7 01       	movw	r22, r14
     bc6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <printBinary>
	      	printPgmString(PSTR("\r\n"));
     bca:	86 ee       	ldi	r24, 0xE6	; 230
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     bd2:	89 ed       	ldi	r24, 0xD9	; 217
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
			printInteger( is_head_down() );
     bda:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <is_head_down>
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	bc 01       	movw	r22, r24
     be6:	cd 01       	movw	r24, r26
     be8:	0e 94 bb 1b 	call	0x3776	; 0x3776 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     bec:	86 ed       	ldi	r24, 0xD6	; 214
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     bf4:	86 ec       	ldi	r24, 0xC6	; 198
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
			printInteger( vacuum_state() );
     bfc:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <vacuum_state>
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	a0 e0       	ldi	r26, 0x00	; 0
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	bc 01       	movw	r22, r24
     c08:	cd 01       	movw	r24, r26
     c0a:	0e 94 bb 1b 	call	0x3776	; 0x3776 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c0e:	83 ec       	ldi	r24, 0xC3	; 195
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     c16:	88 eb       	ldi	r24, 0xB8	; 184
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
			printInteger( is_rotated() );
     c1e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <is_rotated>
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	bc 01       	movw	r22, r24
     c2a:	cd 01       	movw	r24, r26
     c2c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c30:	85 eb       	ldi	r24, 0xB5	; 181
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     c38:	4b 9b       	sbis	0x09, 3	; 9
     c3a:	04 c0       	rjmp	.+8      	; 0xc44 <gc_execute_line+0x256>
		      	printPgmString(PSTR("XL1\r\n"));
     c3c:	8f ea       	ldi	r24, 0xAF	; 175
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     c44:	4a 9b       	sbis	0x09, 2	; 9
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <gc_execute_line+0x262>
		      	printPgmString(PSTR("XL2\r\n"));
     c48:	89 ea       	ldi	r24, 0xA9	; 169
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     c50:	48 9b       	sbis	0x09, 0	; 9
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <gc_execute_line+0x26e>
		      	printPgmString(PSTR("YL1\r\n"));
     c54:	83 ea       	ldi	r24, 0xA3	; 163
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     c5c:	49 9b       	sbis	0x09, 1	; 9
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <gc_execute_line+0x27a>
		      	printPgmString(PSTR("YL2\r\n"));
     c60:	8d e9       	ldi	r24, 0x9D	; 157
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

			if( bit_is_set( XHM_PIN, X_HOME ) )
     c68:	04 9b       	sbis	0x00, 4	; 0
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <gc_execute_line+0x286>
		      	printPgmString(PSTR("X_HOME\r\n"));
     c6c:	84 e9       	ldi	r24, 0x94	; 148
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     c74:	90 9b       	sbis	0x12, 0	; 18
     c76:	14 c1       	rjmp	.+552    	; 0xea0 <gc_execute_line+0x4b2>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     c78:	8b e8       	ldi	r24, 0x8B	; 139
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
     c80:	0f c1       	rjmp	.+542    	; 0xea0 <gc_execute_line+0x4b2>
			}

	       break;

      case 'G':
      switch(int_value) {
     c82:	65 31       	cpi	r22, 0x15	; 21
     c84:	71 05       	cpc	r23, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <gc_execute_line+0x29c>
     c88:	8b c0       	rjmp	.+278    	; 0xda0 <gc_execute_line+0x3b2>
     c8a:	66 31       	cpi	r22, 0x16	; 22
     c8c:	71 05       	cpc	r23, r1
     c8e:	84 f5       	brge	.+96     	; 0xcf0 <gc_execute_line+0x302>
     c90:	64 30       	cpi	r22, 0x04	; 4
     c92:	71 05       	cpc	r23, r1
     c94:	09 f4       	brne	.+2      	; 0xc98 <gc_execute_line+0x2aa>
     c96:	5b c0       	rjmp	.+182    	; 0xd4e <gc_execute_line+0x360>
     c98:	65 30       	cpi	r22, 0x05	; 5
     c9a:	71 05       	cpc	r23, r1
     c9c:	a4 f4       	brge	.+40     	; 0xcc6 <gc_execute_line+0x2d8>
     c9e:	61 30       	cpi	r22, 0x01	; 1
     ca0:	71 05       	cpc	r23, r1
     ca2:	09 f4       	brne	.+2      	; 0xca6 <gc_execute_line+0x2b8>
     ca4:	5a c0       	rjmp	.+180    	; 0xd5a <gc_execute_line+0x36c>
     ca6:	62 30       	cpi	r22, 0x02	; 2
     ca8:	71 05       	cpc	r23, r1
     caa:	24 f4       	brge	.+8      	; 0xcb4 <gc_execute_line+0x2c6>
     cac:	67 2b       	or	r22, r23
     cae:	09 f4       	brne	.+2      	; 0xcb2 <gc_execute_line+0x2c4>
     cb0:	51 c0       	rjmp	.+162    	; 0xd54 <gc_execute_line+0x366>
     cb2:	ed c0       	rjmp	.+474    	; 0xe8e <gc_execute_line+0x4a0>
     cb4:	62 30       	cpi	r22, 0x02	; 2
     cb6:	71 05       	cpc	r23, r1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <gc_execute_line+0x2ce>
     cba:	52 c0       	rjmp	.+164    	; 0xd60 <gc_execute_line+0x372>
     cbc:	63 30       	cpi	r22, 0x03	; 3
     cbe:	71 05       	cpc	r23, r1
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <gc_execute_line+0x2d6>
     cc2:	e5 c0       	rjmp	.+458    	; 0xe8e <gc_execute_line+0x4a0>
     cc4:	4f c0       	rjmp	.+158    	; 0xd64 <gc_execute_line+0x376>
     cc6:	62 31       	cpi	r22, 0x12	; 18
     cc8:	71 05       	cpc	r23, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <gc_execute_line+0x2e0>
     ccc:	56 c0       	rjmp	.+172    	; 0xd7a <gc_execute_line+0x38c>
     cce:	63 31       	cpi	r22, 0x13	; 19
     cd0:	71 05       	cpc	r23, r1
     cd2:	2c f4       	brge	.+10     	; 0xcde <gc_execute_line+0x2f0>
     cd4:	61 31       	cpi	r22, 0x11	; 17
     cd6:	71 05       	cpc	r23, r1
     cd8:	09 f0       	breq	.+2      	; 0xcdc <gc_execute_line+0x2ee>
     cda:	d9 c0       	rjmp	.+434    	; 0xe8e <gc_execute_line+0x4a0>
     cdc:	46 c0       	rjmp	.+140    	; 0xd6a <gc_execute_line+0x37c>
     cde:	63 31       	cpi	r22, 0x13	; 19
     ce0:	71 05       	cpc	r23, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <gc_execute_line+0x2f8>
     ce4:	52 c0       	rjmp	.+164    	; 0xd8a <gc_execute_line+0x39c>
     ce6:	64 31       	cpi	r22, 0x14	; 20
     ce8:	71 05       	cpc	r23, r1
     cea:	09 f0       	breq	.+2      	; 0xcee <gc_execute_line+0x300>
     cec:	d0 c0       	rjmp	.+416    	; 0xe8e <gc_execute_line+0x4a0>
     cee:	55 c0       	rjmp	.+170    	; 0xd9a <gc_execute_line+0x3ac>
     cf0:	6a 35       	cpi	r22, 0x5A	; 90
     cf2:	71 05       	cpc	r23, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <gc_execute_line+0x30a>
     cf6:	5e c0       	rjmp	.+188    	; 0xdb4 <gc_execute_line+0x3c6>
     cf8:	6b 35       	cpi	r22, 0x5B	; 91
     cfa:	71 05       	cpc	r23, r1
     cfc:	a4 f4       	brge	.+40     	; 0xd26 <gc_execute_line+0x338>
     cfe:	6e 31       	cpi	r22, 0x1E	; 30
     d00:	71 05       	cpc	r23, r1
     d02:	11 f1       	breq	.+68     	; 0xd48 <gc_execute_line+0x35a>
     d04:	6f 31       	cpi	r22, 0x1F	; 31
     d06:	71 05       	cpc	r23, r1
     d08:	2c f4       	brge	.+10     	; 0xd14 <gc_execute_line+0x326>
     d0a:	6c 31       	cpi	r22, 0x1C	; 28
     d0c:	71 05       	cpc	r23, r1
     d0e:	09 f0       	breq	.+2      	; 0xd12 <gc_execute_line+0x324>
     d10:	be c0       	rjmp	.+380    	; 0xe8e <gc_execute_line+0x4a0>
     d12:	1a c0       	rjmp	.+52     	; 0xd48 <gc_execute_line+0x35a>
     d14:	65 33       	cpi	r22, 0x35	; 53
     d16:	71 05       	cpc	r23, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <gc_execute_line+0x32e>
     d1a:	45 c0       	rjmp	.+138    	; 0xda6 <gc_execute_line+0x3b8>
     d1c:	60 35       	cpi	r22, 0x50	; 80
     d1e:	71 05       	cpc	r23, r1
     d20:	09 f0       	breq	.+2      	; 0xd24 <gc_execute_line+0x336>
     d22:	b5 c0       	rjmp	.+362    	; 0xe8e <gc_execute_line+0x4a0>
     d24:	43 c0       	rjmp	.+134    	; 0xdac <gc_execute_line+0x3be>
     d26:	6c 35       	cpi	r22, 0x5C	; 92
     d28:	71 05       	cpc	r23, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <gc_execute_line+0x340>
     d2c:	49 c0       	rjmp	.+146    	; 0xdc0 <gc_execute_line+0x3d2>
     d2e:	6c 35       	cpi	r22, 0x5C	; 92
     d30:	71 05       	cpc	r23, r1
     d32:	0c f4       	brge	.+2      	; 0xd36 <gc_execute_line+0x348>
     d34:	42 c0       	rjmp	.+132    	; 0xdba <gc_execute_line+0x3cc>
     d36:	6d 35       	cpi	r22, 0x5D	; 93
     d38:	71 05       	cpc	r23, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <gc_execute_line+0x350>
     d3c:	44 c0       	rjmp	.+136    	; 0xdc6 <gc_execute_line+0x3d8>
     d3e:	6e 35       	cpi	r22, 0x5E	; 94
     d40:	71 05       	cpc	r23, r1
     d42:	09 f0       	breq	.+2      	; 0xd46 <gc_execute_line+0x358>
     d44:	a4 c0       	rjmp	.+328    	; 0xe8e <gc_execute_line+0x4a0>
     d46:	42 c0       	rjmp	.+132    	; 0xdcc <gc_execute_line+0x3de>
     d48:	f2 e0       	ldi	r31, 0x02	; 2
     d4a:	fc a7       	std	Y+44, r31	; 0x2c
     d4c:	a9 c0       	rjmp	.+338    	; 0xea0 <gc_execute_line+0x4b2>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	8c a7       	std	Y+44, r24	; 0x2c
     d52:	a6 c0       	rjmp	.+332    	; 0xea0 <gc_execute_line+0x4b2>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     d54:	10 92 01 02 	sts	0x0201, r1
     d58:	a3 c0       	rjmp	.+326    	; 0xea0 <gc_execute_line+0x4b2>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     d5a:	d0 92 01 02 	sts	0x0201, r13
     d5e:	a0 c0       	rjmp	.+320    	; 0xea0 <gc_execute_line+0x4b2>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	25 c0       	rjmp	.+74     	; 0xdae <gc_execute_line+0x3c0>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     d64:	c0 92 01 02 	sts	0x0201, r12
     d68:	9b c0       	rjmp	.+310    	; 0xea0 <gc_execute_line+0x4b2>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     d6a:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     d6e:	d0 92 26 02 	sts	0x0226, r13
  gc.plane_axis_2 = axis_2;
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	80 93 27 02 	sts	0x0227, r24
     d78:	93 c0       	rjmp	.+294    	; 0xea0 <gc_execute_line+0x4b2>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     d7a:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	80 93 26 02 	sts	0x0226, r24
  gc.plane_axis_2 = axis_2;
     d84:	d0 92 27 02 	sts	0x0227, r13
     d88:	8b c0       	rjmp	.+278    	; 0xea0 <gc_execute_line+0x4b2>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     d8a:	d0 92 25 02 	sts	0x0225, r13
  gc.plane_axis_1 = axis_1;
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	80 93 26 02 	sts	0x0226, r24
  gc.plane_axis_2 = axis_2;
     d94:	10 92 27 02 	sts	0x0227, r1
     d98:	83 c0       	rjmp	.+262    	; 0xea0 <gc_execute_line+0x4b2>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     d9a:	d0 92 03 02 	sts	0x0203, r13
     d9e:	80 c0       	rjmp	.+256    	; 0xea0 <gc_execute_line+0x4b2>
        case 21: gc.inches_mode = FALSE; break;
     da0:	10 92 03 02 	sts	0x0203, r1
     da4:	7d c0       	rjmp	.+250    	; 0xea0 <gc_execute_line+0x4b2>
     da6:	55 24       	eor	r5, r5
     da8:	53 94       	inc	r5
     daa:	7a c0       	rjmp	.+244    	; 0xea0 <gc_execute_line+0x4b2>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	80 93 01 02 	sts	0x0201, r24
     db2:	76 c0       	rjmp	.+236    	; 0xea0 <gc_execute_line+0x4b2>
        case 90: gc.absolute_mode = TRUE; break;
     db4:	d0 92 04 02 	sts	0x0204, r13
     db8:	73 c0       	rjmp	.+230    	; 0xea0 <gc_execute_line+0x4b2>
        case 91: gc.absolute_mode = FALSE; break;
     dba:	10 92 04 02 	sts	0x0204, r1
     dbe:	70 c0       	rjmp	.+224    	; 0xea0 <gc_execute_line+0x4b2>
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	9c a7       	std	Y+44, r25	; 0x2c
     dc4:	6d c0       	rjmp	.+218    	; 0xea0 <gc_execute_line+0x4b2>
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     dc6:	d0 92 02 02 	sts	0x0202, r13
     dca:	6a c0       	rjmp	.+212    	; 0xea0 <gc_execute_line+0x4b2>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     dcc:	10 92 02 02 	sts	0x0202, r1
     dd0:	67 c0       	rjmp	.+206    	; 0xea0 <gc_execute_line+0x4b2>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     dd2:	6d 33       	cpi	r22, 0x3D	; 61
     dd4:	71 05       	cpc	r23, r1
     dd6:	08 f0       	brcs	.+2      	; 0xdda <gc_execute_line+0x3ec>
     dd8:	5a c0       	rjmp	.+180    	; 0xe8e <gc_execute_line+0x4a0>
     dda:	ee 58       	subi	r30, 0x8E	; 142
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	05 90       	lpm	r0, Z+
     de4:	f4 91       	lpm	r31, Z+
     de6:	e0 2d       	mov	r30, r0
     de8:	19 94       	eijmp
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     dea:	d0 92 05 02 	sts	0x0205, r13
     dee:	58 c0       	rjmp	.+176    	; 0xea0 <gc_execute_line+0x4b2>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	80 93 05 02 	sts	0x0205, r24
     df6:	54 c0       	rjmp	.+168    	; 0xea0 <gc_execute_line+0x4b2>
        case 3: gc.spindle_direction = 1; break;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <gc_execute_line+0x414>
        case 4: gc.spindle_direction = -1; break;
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	9f ef       	ldi	r25, 0xFF	; 255
     e02:	90 93 07 02 	sts	0x0207, r25
     e06:	80 93 06 02 	sts	0x0206, r24
     e0a:	4a c0       	rjmp	.+148    	; 0xea0 <gc_execute_line+0x4b2>
        case 5: gc.spindle_direction = 0; break;
     e0c:	10 92 07 02 	sts	0x0207, r1
     e10:	10 92 06 02 	sts	0x0206, r1
     e14:	45 c0       	rjmp	.+138    	; 0xea0 <gc_execute_line+0x4b2>
        case 8: gc.coolant_flood = 1; break;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	90 93 09 02 	sts	0x0209, r25
     e1e:	80 93 08 02 	sts	0x0208, r24
     e22:	3e c0       	rjmp	.+124    	; 0xea0 <gc_execute_line+0x4b2>
        case 9: gc.coolant_flood = 0; break;
     e24:	10 92 09 02 	sts	0x0209, r1
     e28:	10 92 08 02 	sts	0x0208, r1
     e2c:	39 c0       	rjmp	.+114    	; 0xea0 <gc_execute_line+0x4b2>

		// head control
        case 10: head_down(1);break;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <gc_execute_line+0x44a>
        case 11: head_down(0);break;
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
     e3c:	31 c0       	rjmp	.+98     	; 0xea0 <gc_execute_line+0x4b2>

		// atc
		case 12: atc_change(0);break;
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	11 c0       	rjmp	.+34     	; 0xe66 <gc_execute_line+0x478>
		case 13: atc_change(1);break;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e c0       	rjmp	.+28     	; 0xe66 <gc_execute_line+0x478>
		case 14: atc_change(2);break;
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0b c0       	rjmp	.+22     	; 0xe66 <gc_execute_line+0x478>
		case 15: atc_change(3);break;
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <gc_execute_line+0x478>
		case 16: atc_change(4);break;
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <gc_execute_line+0x478>
		case 17: atc_change(5);break;
     e5c:	85 e0       	ldi	r24, 0x05	; 5
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <gc_execute_line+0x478>
		case 18: atc_change(6);break;
     e62:	86 e0       	ldi	r24, 0x06	; 6
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <atc_change>
     e6a:	1a c0       	rjmp	.+52     	; 0xea0 <gc_execute_line+0x4b2>

		// vacuum
		case 19: vacuum(1);break;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <gc_execute_line+0x488>
		case 20: vacuum(0);break;
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vacuum>
     e7a:	12 c0       	rjmp	.+36     	; 0xea0 <gc_execute_line+0x4b2>

		// tape knock
		case 21: tape_knock();break;
     e7c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <tape_knock>
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <gc_execute_line+0x4b2>
		case 22: vacuum_test(); break;
     e82:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <vacuum_test>
     e86:	0c c0       	rjmp	.+24     	; 0xea0 <gc_execute_line+0x4b2>
		case 23: check_for_tool(); break;
     e88:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <check_for_tool>
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <gc_execute_line+0x4b2>

        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     e8e:	c0 92 00 02 	sts	0x0200, r12
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <gc_execute_line+0x4b2>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     e94:	c8 01       	movw	r24, r16
     e96:	b7 01       	movw	r22, r14
     e98:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
     e9c:	60 93 22 02 	sts	0x0222, r22
    }

    if(gc.status_code) { break; }
     ea0:	80 91 00 02 	lds	r24, 0x0200
     ea4:	88 23       	and	r24, r24
     ea6:	49 f4       	brne	.+18     	; 0xeba <gc_execute_line+0x4cc>
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     ea8:	c4 01       	movw	r24, r8
     eaa:	b3 01       	movw	r22, r6
     eac:	a5 01       	movw	r20, r10
     eae:	91 01       	movw	r18, r2
     eb0:	0e 94 8a 04 	call	0x914	; 0x914 <next_statement>
     eb4:	89 2b       	or	r24, r25
     eb6:	09 f0       	breq	.+2      	; 0xeba <gc_execute_line+0x4cc>
     eb8:	33 ce       	rjmp	.-922    	; 0xb20 <gc_execute_line+0x132>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     eba:	80 91 00 02 	lds	r24, 0x0200
     ebe:	88 23       	and	r24, r24
     ec0:	09 f0       	breq	.+2      	; 0xec4 <gc_execute_line+0x4d6>
     ec2:	e6 c1       	rjmp	.+972    	; 0x1290 <gc_execute_line+0x8a2>

  char_counter = 0;
     ec4:	1b 82       	std	Y+3, r1	; 0x03
     ec6:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
     ec8:	80 e1       	ldi	r24, 0x10	; 16
     eca:	fe 01       	movw	r30, r28
     ecc:	7c 96       	adiw	r30, 0x1c	; 28
     ece:	df 01       	movw	r26, r30
     ed0:	1d 92       	st	X+, r1
     ed2:	8a 95       	dec	r24
     ed4:	e9 f7       	brne	.-6      	; 0xed0 <gc_execute_line+0x4e2>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     ed6:	de 01       	movw	r26, r28
     ed8:	1c 96       	adiw	r26, 0x0c	; 12
     eda:	e2 e1       	ldi	r30, 0x12	; 18
     edc:	f2 e0       	ldi	r31, 0x02	; 2
     ede:	80 e1       	ldi	r24, 0x10	; 16
     ee0:	01 90       	ld	r0, Z+
     ee2:	0d 92       	st	X+, r0
     ee4:	81 50       	subi	r24, 0x01	; 1
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <gc_execute_line+0x4f2>
     ee8:	1d a6       	std	Y+45, r1	; 0x2d
     eea:	1e a6       	std	Y+46, r1	; 0x2e
     eec:	b0 e8       	ldi	r27, 0x80	; 128
     eee:	bf a7       	std	Y+47, r27	; 0x2f
     ef0:	ef eb       	ldi	r30, 0xBF	; 191
     ef2:	e8 ab       	std	Y+48, r30	; 0x30
     ef4:	66 24       	eor	r6, r6
     ef6:	77 24       	eor	r7, r7

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     ef8:	e2 e0       	ldi	r30, 0x02	; 2
     efa:	2e 2e       	mov	r2, r30
     efc:	31 2c       	mov	r3, r1
     efe:	2c 0e       	add	r2, r28
     f00:	3d 1e       	adc	r3, r29
     f02:	4e 01       	movw	r8, r28
     f04:	08 94       	sec
     f06:	81 1c       	adc	r8, r1
     f08:	91 1c       	adc	r9, r1
	  case 'H':

			// amount to move
	        head = unit_converted_value;
		  // move the head
		  gc.motion_mode = MOTION_MODE_HEAD;
     f0a:	79 e0       	ldi	r23, 0x09	; 9
     f0c:	47 2e       	mov	r4, r23
     f0e:	c9 c0       	rjmp	.+402    	; 0x10a2 <gc_execute_line+0x6b4>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     f10:	cc 80       	ldd	r12, Y+4	; 0x04
     f12:	dd 80       	ldd	r13, Y+5	; 0x05
     f14:	ee 80       	ldd	r14, Y+6	; 0x06
     f16:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     f18:	80 91 03 02 	lds	r24, 0x0203
     f1c:	88 23       	and	r24, r24
     f1e:	19 f4       	brne	.+6      	; 0xf26 <gc_execute_line+0x538>
     f20:	a7 01       	movw	r20, r14
     f22:	96 01       	movw	r18, r12
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <gc_execute_line+0x54c>
     f26:	c7 01       	movw	r24, r14
     f28:	b6 01       	movw	r22, r12
     f2a:	23 e3       	ldi	r18, 0x33	; 51
     f2c:	33 e3       	ldi	r19, 0x33	; 51
     f2e:	4b ec       	ldi	r20, 0xCB	; 203
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     f3a:	09 81       	ldd	r16, Y+1	; 0x01
     f3c:	0c 34       	cpi	r16, 0x4C	; 76
     f3e:	60 f4       	brcc	.+24     	; 0xf58 <gc_execute_line+0x56a>
     f40:	09 34       	cpi	r16, 0x49	; 73
     f42:	08 f0       	brcs	.+2      	; 0xf46 <gc_execute_line+0x558>
     f44:	47 c0       	rjmp	.+142    	; 0xfd4 <gc_execute_line+0x5e6>
     f46:	06 34       	cpi	r16, 0x46	; 70
     f48:	b1 f0       	breq	.+44     	; 0xf76 <gc_execute_line+0x588>
     f4a:	08 34       	cpi	r16, 0x48	; 72
     f4c:	09 f4       	brne	.+2      	; 0xf50 <gc_execute_line+0x562>
     f4e:	a2 c0       	rjmp	.+324    	; 0x1094 <gc_execute_line+0x6a6>
     f50:	03 34       	cpi	r16, 0x43	; 67
     f52:	09 f0       	breq	.+2      	; 0xf56 <gc_execute_line+0x568>
     f54:	a6 c0       	rjmp	.+332    	; 0x10a2 <gc_execute_line+0x6b4>
     f56:	88 c0       	rjmp	.+272    	; 0x1068 <gc_execute_line+0x67a>
     f58:	03 35       	cpi	r16, 0x53	; 83
     f5a:	09 f4       	brne	.+2      	; 0xf5e <gc_execute_line+0x570>
     f5c:	4f c0       	rjmp	.+158    	; 0xffc <gc_execute_line+0x60e>
     f5e:	04 35       	cpi	r16, 0x54	; 84
     f60:	20 f4       	brcc	.+8      	; 0xf6a <gc_execute_line+0x57c>
     f62:	00 35       	cpi	r16, 0x50	; 80
     f64:	09 f0       	breq	.+2      	; 0xf68 <gc_execute_line+0x57a>
     f66:	9d c0       	rjmp	.+314    	; 0x10a2 <gc_execute_line+0x6b4>
     f68:	44 c0       	rjmp	.+136    	; 0xff2 <gc_execute_line+0x604>
     f6a:	80 2f       	mov	r24, r16
     f6c:	88 55       	subi	r24, 0x58	; 88
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	08 f0       	brcs	.+2      	; 0xf74 <gc_execute_line+0x586>
     f72:	97 c0       	rjmp	.+302    	; 0x10a2 <gc_execute_line+0x6b4>
     f74:	4c c0       	rjmp	.+152    	; 0x100e <gc_execute_line+0x620>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     f76:	80 91 02 02 	lds	r24, 0x0202
     f7a:	88 23       	and	r24, r24
     f7c:	29 f0       	breq	.+10     	; 0xf88 <gc_execute_line+0x59a>
     f7e:	2d a7       	std	Y+45, r18	; 0x2d
     f80:	3e a7       	std	Y+46, r19	; 0x2e
     f82:	4f a7       	std	Y+47, r20	; 0x2f
     f84:	58 ab       	std	Y+48, r21	; 0x30
     f86:	8d c0       	rjmp	.+282    	; 0x10a2 <gc_execute_line+0x6b4>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     f88:	80 91 01 02 	lds	r24, 0x0201
     f8c:	88 23       	and	r24, r24
     f8e:	89 f4       	brne	.+34     	; 0xfb2 <gc_execute_line+0x5c4>
          gc.seek_rate = unit_converted_value/60;
     f90:	ca 01       	movw	r24, r20
     f92:	b9 01       	movw	r22, r18
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e7       	ldi	r20, 0x70	; 112
     f9a:	52 e4       	ldi	r21, 0x42	; 66
     f9c:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
     fa0:	60 93 0e 02 	sts	0x020E, r22
     fa4:	70 93 0f 02 	sts	0x020F, r23
     fa8:	80 93 10 02 	sts	0x0210, r24
     fac:	90 93 11 02 	sts	0x0211, r25
     fb0:	78 c0       	rjmp	.+240    	; 0x10a2 <gc_execute_line+0x6b4>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
     fb2:	ca 01       	movw	r24, r20
     fb4:	b9 01       	movw	r22, r18
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e7       	ldi	r20, 0x70	; 112
     fbc:	52 e4       	ldi	r21, 0x42	; 66
     fbe:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
     fc2:	60 93 0a 02 	sts	0x020A, r22
     fc6:	70 93 0b 02 	sts	0x020B, r23
     fca:	80 93 0c 02 	sts	0x020C, r24
     fce:	90 93 0d 02 	sts	0x020D, r25
     fd2:	67 c0       	rjmp	.+206    	; 0x10a2 <gc_execute_line+0x6b4>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     fd4:	e0 2f       	mov	r30, r16
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	e9 54       	subi	r30, 0x49	; 73
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	e8 0d       	add	r30, r8
     fe6:	f9 1d       	adc	r31, r9
     fe8:	23 8f       	std	Z+27, r18	; 0x1b
     fea:	34 8f       	std	Z+28, r19	; 0x1c
     fec:	45 8f       	std	Z+29, r20	; 0x1d
     fee:	56 8f       	std	Z+30, r21	; 0x1e
     ff0:	58 c0       	rjmp	.+176    	; 0x10a2 <gc_execute_line+0x6b4>
      case 'P': p = value; break;
     ff2:	c8 86       	std	Y+8, r12	; 0x08
     ff4:	d9 86       	std	Y+9, r13	; 0x09
     ff6:	ea 86       	std	Y+10, r14	; 0x0a
     ff8:	fb 86       	std	Y+11, r15	; 0x0b
     ffa:	53 c0       	rjmp	.+166    	; 0x10a2 <gc_execute_line+0x6b4>
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
    1004:	70 93 24 02 	sts	0x0224, r23
    1008:	60 93 23 02 	sts	0x0223, r22
    100c:	4a c0       	rjmp	.+148    	; 0x10a2 <gc_execute_line+0x6b4>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    100e:	80 91 04 02 	lds	r24, 0x0204
    1012:	88 23       	and	r24, r24
    1014:	11 f4       	brne	.+4      	; 0x101a <gc_execute_line+0x62c>
    1016:	55 20       	and	r5, r5
    1018:	79 f0       	breq	.+30     	; 0x1038 <gc_execute_line+0x64a>
        target[letter - 'X'] = unit_converted_value;
    101a:	e0 2f       	mov	r30, r16
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	e8 55       	subi	r30, 0x58	; 88
    1020:	f0 40       	sbci	r31, 0x00	; 0
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	e8 0d       	add	r30, r8
    102c:	f9 1d       	adc	r31, r9
    102e:	23 87       	std	Z+11, r18	; 0x0b
    1030:	34 87       	std	Z+12, r19	; 0x0c
    1032:	45 87       	std	Z+13, r20	; 0x0d
    1034:	56 87       	std	Z+14, r21	; 0x0e
    1036:	35 c0       	rjmp	.+106    	; 0x10a2 <gc_execute_line+0x6b4>
      } else {
        target[letter - 'X'] += unit_converted_value;
    1038:	10 e0       	ldi	r17, 0x00	; 0
    103a:	08 55       	subi	r16, 0x58	; 88
    103c:	10 40       	sbci	r17, 0x00	; 0
    103e:	00 0f       	add	r16, r16
    1040:	11 1f       	adc	r17, r17
    1042:	00 0f       	add	r16, r16
    1044:	11 1f       	adc	r17, r17
    1046:	08 0d       	add	r16, r8
    1048:	19 1d       	adc	r17, r9
    104a:	d8 01       	movw	r26, r16
    104c:	1b 96       	adiw	r26, 0x0b	; 11
    104e:	6d 91       	ld	r22, X+
    1050:	7d 91       	ld	r23, X+
    1052:	8d 91       	ld	r24, X+
    1054:	9c 91       	ld	r25, X
    1056:	1e 97       	sbiw	r26, 0x0e	; 14
    1058:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    105c:	f8 01       	movw	r30, r16
    105e:	63 87       	std	Z+11, r22	; 0x0b
    1060:	74 87       	std	Z+12, r23	; 0x0c
    1062:	85 87       	std	Z+13, r24	; 0x0d
    1064:	96 87       	std	Z+14, r25	; 0x0e
    1066:	1d c0       	rjmp	.+58     	; 0x10a2 <gc_execute_line+0x6b4>
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    1068:	80 91 04 02 	lds	r24, 0x0204
    106c:	88 23       	and	r24, r24
    106e:	11 f4       	brne	.+4      	; 0x1074 <gc_execute_line+0x686>
    1070:	55 20       	and	r5, r5
    1072:	29 f0       	breq	.+10     	; 0x107e <gc_execute_line+0x690>
		target[C_AXIS] = unit_converted_value;
    1074:	28 8f       	std	Y+24, r18	; 0x18
    1076:	39 8f       	std	Y+25, r19	; 0x19
    1078:	4a 8f       	std	Y+26, r20	; 0x1a
    107a:	5b 8f       	std	Y+27, r21	; 0x1b
    107c:	12 c0       	rjmp	.+36     	; 0x10a2 <gc_execute_line+0x6b4>
      } else {
        target[C_AXIS] += unit_converted_value;
    107e:	68 8d       	ldd	r22, Y+24	; 0x18
    1080:	79 8d       	ldd	r23, Y+25	; 0x19
    1082:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1084:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1086:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    108a:	68 8f       	std	Y+24, r22	; 0x18
    108c:	79 8f       	std	Y+25, r23	; 0x19
    108e:	8a 8f       	std	Y+26, r24	; 0x1a
    1090:	9b 8f       	std	Y+27, r25	; 0x1b
    1092:	07 c0       	rjmp	.+14     	; 0x10a2 <gc_execute_line+0x6b4>
      }
	  break;
	  case 'H':

			// amount to move
	        head = unit_converted_value;
    1094:	ca 01       	movw	r24, r20
    1096:	b9 01       	movw	r22, r18
    1098:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
    109c:	3b 01       	movw	r6, r22
		  // move the head
		  gc.motion_mode = MOTION_MODE_HEAD;
    109e:	40 92 01 02 	sts	0x0201, r4
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    10a2:	c4 01       	movw	r24, r8
    10a4:	be 01       	movw	r22, r28
    10a6:	6c 5f       	subi	r22, 0xFC	; 252
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	a5 01       	movw	r20, r10
    10ac:	91 01       	movw	r18, r2
    10ae:	0e 94 8a 04 	call	0x914	; 0x914 <next_statement>
    10b2:	89 2b       	or	r24, r25
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <gc_execute_line+0x6ca>
    10b6:	2c cf       	rjmp	.-424    	; 0xf10 <gc_execute_line+0x522>
	      break;
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    10b8:	80 91 00 02 	lds	r24, 0x0200
    10bc:	88 23       	and	r24, r24
    10be:	09 f0       	breq	.+2      	; 0x10c2 <gc_execute_line+0x6d4>
    10c0:	e7 c0       	rjmp	.+462    	; 0x1290 <gc_execute_line+0x8a2>
    
  // Update spindle state
  if (gc.spindle_direction) {
    10c2:	80 91 06 02 	lds	r24, 0x0206
    10c6:	90 91 07 02 	lds	r25, 0x0207
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	59 f0       	breq	.+22     	; 0x10e4 <gc_execute_line+0x6f6>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    10ce:	40 91 23 02 	lds	r20, 0x0223
    10d2:	50 91 24 02 	lds	r21, 0x0224
    10d6:	66 27       	eor	r22, r22
    10d8:	57 fd       	sbrc	r21, 7
    10da:	60 95       	com	r22
    10dc:	76 2f       	mov	r23, r22
    10de:	0e 94 39 15 	call	0x2a72	; 0x2a72 <spindle_run>
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <gc_execute_line+0x6fa>
  } else {
    spindle_stop();
    10e4:	0e 94 44 15 	call	0x2a88	; 0x2a88 <spindle_stop>
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    10e8:	80 91 08 02 	lds	r24, 0x0208
    10ec:	90 91 09 02 	lds	r25, 0x0209
    10f0:	89 2b       	or	r24, r25
    10f2:	19 f0       	breq	.+6      	; 0x10fa <gc_execute_line+0x70c>
  	coolant_flood(TRUE);
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <gc_execute_line+0x710>
  }
  else {
  	coolant_flood(FALSE);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 c1 02 	call	0x582	; 0x582 <coolant_flood>
  }
  
  // Perform any physical actions
  switch (next_action) {
    1102:	fc a5       	ldd	r31, Y+44	; 0x2c
    1104:	f1 30       	cpi	r31, 0x01	; 1
    1106:	91 f0       	breq	.+36     	; 0x112c <gc_execute_line+0x73e>
    1108:	f1 30       	cpi	r31, 0x01	; 1
    110a:	f8 f0       	brcs	.+62     	; 0x114a <gc_execute_line+0x75c>
    110c:	f2 30       	cpi	r31, 0x02	; 2
    110e:	21 f0       	breq	.+8      	; 0x1118 <gc_execute_line+0x72a>
    1110:	f3 30       	cpi	r31, 0x03	; 3
    1112:	09 f0       	breq	.+2      	; 0x1116 <gc_execute_line+0x728>
    1114:	b0 c0       	rjmp	.+352    	; 0x1276 <gc_execute_line+0x888>
    1116:	9d c0       	rjmp	.+314    	; 0x1252 <gc_execute_line+0x864>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    1118:	0e 94 c6 09 	call	0x138c	; 0x138c <mc_go_home>
    111c:	80 e1       	ldi	r24, 0x10	; 16
    111e:	fe 01       	movw	r30, r28
    1120:	3c 96       	adiw	r30, 0x0c	; 12
    1122:	df 01       	movw	r26, r30
    1124:	1d 92       	st	X+, r1
    1126:	8a 95       	dec	r24
    1128:	e9 f7       	brne	.-6      	; 0x1124 <gc_execute_line+0x736>
    112a:	a5 c0       	rjmp	.+330    	; 0x1276 <gc_execute_line+0x888>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    112c:	68 85       	ldd	r22, Y+8	; 0x08
    112e:	79 85       	ldd	r23, Y+9	; 0x09
    1130:	8a 85       	ldd	r24, Y+10	; 0x0a
    1132:	9b 85       	ldd	r25, Y+11	; 0x0b
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a e7       	ldi	r20, 0x7A	; 122
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1140:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
    1144:	0e 94 c9 09 	call	0x1392	; 0x1392 <mc_dwell>
    1148:	96 c0       	rjmp	.+300    	; 0x1276 <gc_execute_line+0x888>
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    114a:	80 91 01 02 	lds	r24, 0x0201
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	99 f1       	breq	.+102    	; 0x11b8 <gc_execute_line+0x7ca>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	20 f0       	brcs	.+8      	; 0x115e <gc_execute_line+0x770>
    1156:	89 30       	cpi	r24, 0x09	; 9
    1158:	09 f0       	breq	.+2      	; 0x115c <gc_execute_line+0x76e>
    115a:	8d c0       	rjmp	.+282    	; 0x1276 <gc_execute_line+0x888>
    115c:	76 c0       	rjmp	.+236    	; 0x124a <gc_execute_line+0x85c>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    115e:	00 d0       	rcall	.+0      	; 0x1160 <gc_execute_line+0x772>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <gc_execute_line+0x774>
    1162:	6c 85       	ldd	r22, Y+12	; 0x0c
    1164:	7d 85       	ldd	r23, Y+13	; 0x0d
    1166:	8e 85       	ldd	r24, Y+14	; 0x0e
    1168:	9f 85       	ldd	r25, Y+15	; 0x0f
    116a:	28 89       	ldd	r18, Y+16	; 0x10
    116c:	39 89       	ldd	r19, Y+17	; 0x11
    116e:	4a 89       	ldd	r20, Y+18	; 0x12
    1170:	5b 89       	ldd	r21, Y+19	; 0x13
    1172:	ec 88       	ldd	r14, Y+20	; 0x14
    1174:	fd 88       	ldd	r15, Y+21	; 0x15
    1176:	0e 89       	ldd	r16, Y+22	; 0x16
    1178:	1f 89       	ldd	r17, Y+23	; 0x17
    117a:	a8 8c       	ldd	r10, Y+24	; 0x18
    117c:	b9 8c       	ldd	r11, Y+25	; 0x19
    117e:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1180:	db 8c       	ldd	r13, Y+27	; 0x1b
    1182:	60 90 0e 02 	lds	r6, 0x020E
    1186:	70 90 0f 02 	lds	r7, 0x020F
    118a:	80 90 10 02 	lds	r8, 0x0210
    118e:	90 90 11 02 	lds	r9, 0x0211
    1192:	ed b7       	in	r30, 0x3d	; 61
    1194:	fe b7       	in	r31, 0x3e	; 62
    1196:	61 82       	std	Z+1, r6	; 0x01
    1198:	72 82       	std	Z+2, r7	; 0x02
    119a:	83 82       	std	Z+3, r8	; 0x03
    119c:	94 82       	std	Z+4, r9	; 0x04
    119e:	16 82       	std	Z+6, r1	; 0x06
    11a0:	15 82       	std	Z+5, r1	; 0x05
    11a2:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <plan_buffer_line>
    11a6:	8d b7       	in	r24, 0x3d	; 61
    11a8:	9e b7       	in	r25, 0x3e	; 62
    11aa:	06 96       	adiw	r24, 0x06	; 6
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	9e bf       	out	0x3e, r25	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	8d bf       	out	0x3d, r24	; 61
    11b6:	5f c0       	rjmp	.+190    	; 0x1276 <gc_execute_line+0x888>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    11b8:	2c 84       	ldd	r2, Y+12	; 0x0c
    11ba:	3d 84       	ldd	r3, Y+13	; 0x0d
    11bc:	4e 84       	ldd	r4, Y+14	; 0x0e
    11be:	5f 84       	ldd	r5, Y+15	; 0x0f
    11c0:	68 88       	ldd	r6, Y+16	; 0x10
    11c2:	79 88       	ldd	r7, Y+17	; 0x11
    11c4:	8a 88       	ldd	r8, Y+18	; 0x12
    11c6:	9b 88       	ldd	r9, Y+19	; 0x13
    11c8:	ec 88       	ldd	r14, Y+20	; 0x14
    11ca:	fd 88       	ldd	r15, Y+21	; 0x15
    11cc:	0e 89       	ldd	r16, Y+22	; 0x16
    11ce:	1f 89       	ldd	r17, Y+23	; 0x17
    11d0:	a8 8c       	ldd	r10, Y+24	; 0x18
    11d2:	b9 8c       	ldd	r11, Y+25	; 0x19
    11d4:	ca 8c       	ldd	r12, Y+26	; 0x1a
    11d6:	db 8c       	ldd	r13, Y+27	; 0x1b
    11d8:	60 91 02 02 	lds	r22, 0x0202
    11dc:	66 23       	and	r22, r22
    11de:	61 f4       	brne	.+24     	; 0x11f8 <gc_execute_line+0x80a>
    11e0:	90 91 0a 02 	lds	r25, 0x020A
    11e4:	9d a7       	std	Y+45, r25	; 0x2d
    11e6:	a0 91 0b 02 	lds	r26, 0x020B
    11ea:	ae a7       	std	Y+46, r26	; 0x2e
    11ec:	b0 91 0c 02 	lds	r27, 0x020C
    11f0:	bf a7       	std	Y+47, r27	; 0x2f
    11f2:	e0 91 0d 02 	lds	r30, 0x020D
    11f6:	e8 ab       	std	Y+48, r30	; 0x30
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <gc_execute_line+0x80c>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <gc_execute_line+0x80e>
    11fc:	8d b7       	in	r24, 0x3d	; 61
    11fe:	9e b7       	in	r25, 0x3e	; 62
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9a ab       	std	Y+50, r25	; 0x32
    1204:	89 ab       	std	Y+49, r24	; 0x31
    1206:	2d a5       	ldd	r18, Y+45	; 0x2d
    1208:	3e a5       	ldd	r19, Y+46	; 0x2e
    120a:	4f a5       	ldd	r20, Y+47	; 0x2f
    120c:	58 a9       	ldd	r21, Y+48	; 0x30
    120e:	c9 01       	movw	r24, r18
    1210:	da 01       	movw	r26, r20
    1212:	ed b7       	in	r30, 0x3d	; 61
    1214:	fe b7       	in	r31, 0x3e	; 62
    1216:	81 83       	std	Z+1, r24	; 0x01
    1218:	92 83       	std	Z+2, r25	; 0x02
    121a:	a3 83       	std	Z+3, r26	; 0x03
    121c:	b4 83       	std	Z+4, r27	; 0x04
    121e:	a9 a9       	ldd	r26, Y+49	; 0x31
    1220:	ba a9       	ldd	r27, Y+50	; 0x32
    1222:	14 96       	adiw	r26, 0x04	; 4
    1224:	6c 93       	st	X, r22
    1226:	14 97       	sbiw	r26, 0x04	; 4
    1228:	15 96       	adiw	r26, 0x05	; 5
    122a:	1c 92       	st	X, r1
    122c:	c2 01       	movw	r24, r4
    122e:	b1 01       	movw	r22, r2
    1230:	a4 01       	movw	r20, r8
    1232:	93 01       	movw	r18, r6
    1234:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <plan_buffer_line>
    1238:	ed b7       	in	r30, 0x3d	; 61
    123a:	fe b7       	in	r31, 0x3e	; 62
    123c:	36 96       	adiw	r30, 0x06	; 6
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	fe bf       	out	0x3e, r31	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	ed bf       	out	0x3d, r30	; 61
    1248:	16 c0       	rjmp	.+44     	; 0x1276 <gc_execute_line+0x888>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    124a:	c3 01       	movw	r24, r6
    124c:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rotate_head>
    1250:	12 c0       	rjmp	.+36     	; 0x1276 <gc_execute_line+0x888>
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1252:	6c 85       	ldd	r22, Y+12	; 0x0c
    1254:	7d 85       	ldd	r23, Y+13	; 0x0d
    1256:	8e 85       	ldd	r24, Y+14	; 0x0e
    1258:	9f 85       	ldd	r25, Y+15	; 0x0f
    125a:	28 89       	ldd	r18, Y+16	; 0x10
    125c:	39 89       	ldd	r19, Y+17	; 0x11
    125e:	4a 89       	ldd	r20, Y+18	; 0x12
    1260:	5b 89       	ldd	r21, Y+19	; 0x13
    1262:	ec 88       	ldd	r14, Y+20	; 0x14
    1264:	fd 88       	ldd	r15, Y+21	; 0x15
    1266:	0e 89       	ldd	r16, Y+22	; 0x16
    1268:	1f 89       	ldd	r17, Y+23	; 0x17
    126a:	a8 8c       	ldd	r10, Y+24	; 0x18
    126c:	b9 8c       	ldd	r11, Y+25	; 0x19
    126e:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1270:	db 8c       	ldd	r13, Y+27	; 0x1b
    1272:	0e 94 2b 0b 	call	0x1656	; 0x1656 <plan_set_current>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    1276:	a2 e1       	ldi	r26, 0x12	; 18
    1278:	b2 e0       	ldi	r27, 0x02	; 2
    127a:	fe 01       	movw	r30, r28
    127c:	3c 96       	adiw	r30, 0x0c	; 12
    127e:	80 e1       	ldi	r24, 0x10	; 16
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	81 50       	subi	r24, 0x01	; 1
    1286:	e1 f7       	brne	.-8      	; 0x1280 <gc_execute_line+0x892>

  return(gc.status_code);
    1288:	80 91 00 02 	lds	r24, 0x0200
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <gc_execute_line+0x8a2>
    128e:	83 e0       	ldi	r24, 0x03	; 3
}
    1290:	e2 96       	adiw	r28, 0x32	; 50
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	bf 90       	pop	r11
    12ae:	af 90       	pop	r10
    12b0:	9f 90       	pop	r9
    12b2:	8f 90       	pop	r8
    12b4:	7f 90       	pop	r7
    12b6:	6f 90       	pop	r6
    12b8:	5f 90       	pop	r5
    12ba:	4f 90       	pop	r4
    12bc:	3f 90       	pop	r3
    12be:	2f 90       	pop	r2
    12c0:	08 95       	ret

000012c2 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	79 01       	movw	r14, r18
    12d4:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    12d6:	5f 77       	andi	r21, 0x7F	; 127
    12d8:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    12dc:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <atan>
    12e0:	5b 01       	movw	r10, r22
    12e2:	6c 01       	movw	r12, r24
  if (y>0) {
    12e4:	c8 01       	movw	r24, r16
    12e6:	b7 01       	movw	r22, r14
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__gesf2>
    12f4:	18 16       	cp	r1, r24
    12f6:	cc f0       	brlt	.+50     	; 0x132a <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__gesf2>
    1308:	18 16       	cp	r1, r24
    130a:	2c f4       	brge	.+10     	; 0x1316 <theta+0x54>
    {
      return(M_PI-theta);
    130c:	6b ed       	ldi	r22, 0xDB	; 219
    130e:	7f e0       	ldi	r23, 0x0F	; 15
    1310:	89 e4       	ldi	r24, 0x49	; 73
    1312:	90 e4       	ldi	r25, 0x40	; 64
    1314:	04 c0       	rjmp	.+8      	; 0x131e <theta+0x5c>
    } else {
      return(-M_PI-theta);
    1316:	6b ed       	ldi	r22, 0xDB	; 219
    1318:	7f e0       	ldi	r23, 0x0F	; 15
    131a:	89 e4       	ldi	r24, 0x49	; 73
    131c:	90 ec       	ldi	r25, 0xC0	; 192
    131e:	a6 01       	movw	r20, r12
    1320:	95 01       	movw	r18, r10
    1322:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__subsf3>
    1326:	5b 01       	movw	r10, r22
    1328:	6c 01       	movw	r12, r24
    }
  }
}
    132a:	b5 01       	movw	r22, r10
    132c:	c6 01       	movw	r24, r12
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	08 95       	ret

00001340 <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  sp_init();        
    1340:	0e 94 18 13 	call	0x2630	; 0x2630 <sp_init>
  settings_init();  
    1344:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <settings_init>
  plan_init();      
    1348:	0e 94 c8 0b 	call	0x1790	; 0x1790 <plan_init>
  st_init();        
    134c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <st_init>
  limits_init();
    1350:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <limits_init>
  spindle_init();   
    1354:	0e 94 31 15 	call	0x2a62	; 0x2a62 <spindle_init>
  coolant_init();
    1358:	0e 94 bf 02 	call	0x57e	; 0x57e <coolant_init>
  atc_init();
    135c:	0e 94 1f 1c 	call	0x383e	; 0x383e <atc_init>
  head_init();
    1360:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <head_init>
  vacuum_init();
    1364:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <vacuum_init>
  panel_init();
    1368:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <panel_init>
  gc_init();
    136c:	0e 94 b9 04 	call	0x972	; 0x972 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    1370:	80 e3       	ldi	r24, 0x30	; 48
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    1378:	83 b7       	in	r24, 0x33	; 51
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	83 bf       	out	0x33, r24	; 51
    137e:	88 95       	sleep
    1380:	83 b7       	in	r24, 0x33	; 51
    1382:	8e 7f       	andi	r24, 0xFE	; 254
    1384:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
    1386:	0e 94 ab 12 	call	0x2556	; 0x2556 <sp_process>
    138a:	f6 cf       	rjmp	.-20     	; 0x1378 <main+0x38>

0000138c <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    138c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <st_go_home>
}
    1390:	08 95       	ret

00001392 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1392:	af 92       	push	r10
    1394:	bf 92       	push	r11
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	7b 01       	movw	r14, r22
    13a4:	8c 01       	movw	r16, r24
  st_synchronize();
    13a6:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <st_synchronize>
  _delay_ms(milliseconds);
    13aa:	c8 01       	movw	r24, r16
    13ac:	b7 01       	movw	r22, r14
    13ae:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__floatunsisf>
    13b2:	5b 01       	movw	r10, r22
    13b4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4a e7       	ldi	r20, 0x7A	; 122
    13bc:	55 e4       	ldi	r21, 0x45	; 69
    13be:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    13c2:	7b 01       	movw	r14, r22
    13c4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
    13d2:	88 23       	and	r24, r24
    13d4:	1c f4       	brge	.+6      	; 0x13dc <mc_dwell+0x4a>
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	24 c0       	rjmp	.+72     	; 0x1424 <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    13dc:	c8 01       	movw	r24, r16
    13de:	b7 01       	movw	r22, r14
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	4f e7       	ldi	r20, 0x7F	; 127
    13e6:	57 e4       	ldi	r21, 0x47	; 71
    13e8:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__gesf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	b4 f4       	brge	.+44     	; 0x141c <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f0:	c6 01       	movw	r24, r12
    13f2:	b5 01       	movw	r22, r10
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e2       	ldi	r20, 0x20	; 32
    13fa:	51 e4       	ldi	r21, 0x41	; 65
    13fc:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1400:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1404:	80 e9       	ldi	r24, 0x90	; 144
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <mc_dwell+0x82>
    140a:	fc 01       	movw	r30, r24
    140c:	31 97       	sbiw	r30, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	61 50       	subi	r22, 0x01	; 1
    1412:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	61 15       	cp	r22, r1
    1416:	71 05       	cpc	r23, r1
    1418:	c1 f7       	brne	.-16     	; 0x140a <mc_dwell+0x78>
    141a:	07 c0       	rjmp	.+14     	; 0x142a <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141c:	c8 01       	movw	r24, r16
    141e:	b7 01       	movw	r22, r14
    1420:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
    1424:	cb 01       	movw	r24, r22
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <mc_dwell+0x94>
}
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	bf 90       	pop	r11
    1438:	af 90       	pop	r10
    143a:	08 95       	ret

0000143c <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    143c:	fc 01       	movw	r30, r24
    143e:	60 91 96 06 	lds	r22, 0x0696
    1442:	70 91 97 06 	lds	r23, 0x0697
    1446:	80 91 98 06 	lds	r24, 0x0698
    144a:	90 91 99 06 	lds	r25, 0x0699
    144e:	21 a5       	ldd	r18, Z+41	; 0x29
    1450:	32 a5       	ldd	r19, Z+42	; 0x2a
    1452:	43 a5       	ldd	r20, Z+43	; 0x2b
    1454:	54 a5       	ldd	r21, Z+44	; 0x2c
    1456:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    145a:	08 95       	ret

0000145c <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    145c:	80 91 16 05 	lds	r24, 0x0516
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	08 95       	ret

00001464 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1464:	20 91 02 05 	lds	r18, 0x0502
    1468:	30 91 03 05 	lds	r19, 0x0503
    146c:	80 91 04 05 	lds	r24, 0x0504
    1470:	90 91 05 05 	lds	r25, 0x0505
    1474:	28 17       	cp	r18, r24
    1476:	39 07       	cpc	r19, r25
    1478:	69 f0       	breq	.+26     	; 0x1494 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    147a:	80 91 04 05 	lds	r24, 0x0504
    147e:	90 91 05 05 	lds	r25, 0x0505
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	6a e0       	ldi	r22, 0x0A	; 10
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	0e 94 39 22 	call	0x4472	; 0x4472 <__divmodhi4>
    148c:	90 93 05 05 	sts	0x0505, r25
    1490:	80 93 04 05 	sts	0x0504, r24
    1494:	08 95       	ret

00001496 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1496:	20 91 02 05 	lds	r18, 0x0502
    149a:	30 91 03 05 	lds	r19, 0x0503
    149e:	80 91 04 05 	lds	r24, 0x0504
    14a2:	90 91 05 05 	lds	r25, 0x0505
    14a6:	28 17       	cp	r18, r24
    14a8:	39 07       	cpc	r19, r25
    14aa:	19 f4       	brne	.+6      	; 0x14b2 <plan_get_current_block+0x1c>
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	0f c0       	rjmp	.+30     	; 0x14d0 <plan_get_current_block+0x3a>
  return(&block_buffer[block_buffer_tail]);
    14b2:	20 91 04 05 	lds	r18, 0x0504
    14b6:	30 91 05 05 	lds	r19, 0x0505
    14ba:	89 e4       	ldi	r24, 0x49	; 73
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	28 9f       	mul	r18, r24
    14c0:	a0 01       	movw	r20, r0
    14c2:	29 9f       	mul	r18, r25
    14c4:	50 0d       	add	r21, r0
    14c6:	38 9f       	mul	r19, r24
    14c8:	50 0d       	add	r21, r0
    14ca:	11 24       	eor	r1, r1
    14cc:	48 5d       	subi	r20, 0xD8	; 216
    14ce:	5d 4f       	sbci	r21, 0xFD	; 253
}
    14d0:	ca 01       	movw	r24, r20
    14d2:	08 95       	ret

000014d4 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    14d4:	4f 92       	push	r4
    14d6:	5f 92       	push	r5
    14d8:	6f 92       	push	r6
    14da:	7f 92       	push	r7
    14dc:	8f 92       	push	r8
    14de:	9f 92       	push	r9
    14e0:	af 92       	push	r10
    14e2:	bf 92       	push	r11
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ec 01       	movw	r28, r24
    14f6:	4b 01       	movw	r8, r22
  if(!current) { return; }
    14f8:	61 15       	cp	r22, r1
    14fa:	71 05       	cpc	r23, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <planner_forward_pass_kernel+0x2c>
    14fe:	5e c0       	rjmp	.+188    	; 0x15bc <planner_forward_pass_kernel+0xe8>
  if(previous) {
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	09 f4       	brne	.+2      	; 0x1506 <planner_forward_pass_kernel+0x32>
    1504:	5b c0       	rjmp	.+182    	; 0x15bc <planner_forward_pass_kernel+0xe8>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1506:	e9 a8       	ldd	r14, Y+49	; 0x31
    1508:	fa a8       	ldd	r15, Y+50	; 0x32
    150a:	0b a9       	ldd	r16, Y+51	; 0x33
    150c:	1c a9       	ldd	r17, Y+52	; 0x34
    150e:	fb 01       	movw	r30, r22
    1510:	41 a8       	ldd	r4, Z+49	; 0x31
    1512:	52 a8       	ldd	r5, Z+50	; 0x32
    1514:	63 a8       	ldd	r6, Z+51	; 0x33
    1516:	74 a8       	ldd	r7, Z+52	; 0x34
    1518:	c8 01       	movw	r24, r16
    151a:	b7 01       	movw	r22, r14
    151c:	a3 01       	movw	r20, r6
    151e:	92 01       	movw	r18, r4
    1520:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
    1524:	88 23       	and	r24, r24
    1526:	0c f0       	brlt	.+2      	; 0x152a <planner_forward_pass_kernel+0x56>
    1528:	49 c0       	rjmp	.+146    	; 0x15bc <planner_forward_pass_kernel+0xe8>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    152a:	f4 01       	movw	r30, r8
    152c:	a1 a4       	ldd	r10, Z+41	; 0x29
    152e:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1530:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1532:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1534:	c6 01       	movw	r24, r12
    1536:	b5 01       	movw	r22, r10
    1538:	a8 01       	movw	r20, r16
    153a:	97 01       	movw	r18, r14
    153c:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1540:	9b 01       	movw	r18, r22
    1542:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1544:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1548:	7b 01       	movw	r14, r22
    154a:	8c 01       	movw	r16, r24
    154c:	20 91 92 06 	lds	r18, 0x0692
    1550:	30 91 93 06 	lds	r19, 0x0693
    1554:	40 91 94 06 	lds	r20, 0x0694
    1558:	50 91 95 06 	lds	r21, 0x0695
    155c:	50 58       	subi	r21, 0x80	; 128
    155e:	ca 01       	movw	r24, r20
    1560:	b9 01       	movw	r22, r18
    1562:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e7       	ldi	r20, 0x70	; 112
    156c:	52 e4       	ldi	r21, 0x42	; 66
    156e:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e7       	ldi	r20, 0x70	; 112
    1578:	52 ec       	ldi	r21, 0xC2	; 194
    157a:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    157e:	2d a5       	ldd	r18, Y+45	; 0x2d
    1580:	3e a5       	ldd	r19, Y+46	; 0x2e
    1582:	4f a5       	ldd	r20, Y+47	; 0x2f
    1584:	58 a9       	ldd	r21, Y+48	; 0x30
    1586:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    158a:	9b 01       	movw	r18, r22
    158c:	ac 01       	movw	r20, r24
    158e:	c8 01       	movw	r24, r16
    1590:	b7 01       	movw	r22, r14
    1592:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    1596:	0e 94 cb 21 	call	0x4396	; 0x4396 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    159a:	a6 01       	movw	r20, r12
    159c:	95 01       	movw	r18, r10
    159e:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    15a2:	7b 01       	movw	r14, r22
    15a4:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    15a6:	a3 01       	movw	r20, r6
    15a8:	92 01       	movw	r18, r4
    15aa:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <planner_forward_pass_kernel+0xe8>
        current->entry_factor = max_entry_factor;
    15b2:	f4 01       	movw	r30, r8
    15b4:	e1 aa       	std	Z+49, r14	; 0x31
    15b6:	f2 aa       	std	Z+50, r15	; 0x32
    15b8:	03 ab       	std	Z+51, r16	; 0x33
    15ba:	14 ab       	std	Z+52, r17	; 0x34
      }
    }
  }
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	df 90       	pop	r13
    15ca:	cf 90       	pop	r12
    15cc:	bf 90       	pop	r11
    15ce:	af 90       	pop	r10
    15d0:	9f 90       	pop	r9
    15d2:	8f 90       	pop	r8
    15d4:	7f 90       	pop	r7
    15d6:	6f 90       	pop	r6
    15d8:	5f 90       	pop	r5
    15da:	4f 90       	pop	r4
    15dc:	08 95       	ret

000015de <planner_forward_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    15ea:	80 91 04 05 	lds	r24, 0x0504
    15ee:	90 91 05 05 	lds	r25, 0x0505
    15f2:	48 2f       	mov	r20, r24
    15f4:	c0 e0       	ldi	r28, 0x00	; 0
    15f6:	d0 e0       	ldi	r29, 0x00	; 0
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	14 c0       	rjmp	.+40     	; 0x1626 <planner_forward_pass+0x48>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    15fe:	89 e4       	ldi	r24, 0x49	; 73
    1600:	48 02       	muls	r20, r24
    1602:	80 01       	movw	r16, r0
    1604:	11 24       	eor	r1, r1
    1606:	08 5d       	subi	r16, 0xD8	; 216
    1608:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    160a:	c9 01       	movw	r24, r18
    160c:	be 01       	movw	r22, r28
    160e:	a8 01       	movw	r20, r16
    1610:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1614:	c7 01       	movw	r24, r14
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	6a e0       	ldi	r22, 0x0A	; 10
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	0e 94 39 22 	call	0x4472	; 0x4472 <__divmodhi4>
    1620:	48 2f       	mov	r20, r24
    1622:	9e 01       	movw	r18, r28
    1624:	e8 01       	movw	r28, r16
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1626:	e4 2e       	mov	r14, r20
    1628:	ff 24       	eor	r15, r15
    162a:	e7 fc       	sbrc	r14, 7
    162c:	f0 94       	com	r15
    162e:	80 91 02 05 	lds	r24, 0x0502
    1632:	90 91 03 05 	lds	r25, 0x0503
    1636:	e8 16       	cp	r14, r24
    1638:	f9 06       	cpc	r15, r25
    163a:	09 f7       	brne	.-62     	; 0x15fe <planner_forward_pass+0x20>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    163c:	c9 01       	movw	r24, r18
    163e:	be 01       	movw	r22, r28
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <planner_forward_pass_kernel>
}
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	08 95       	ret

00001656 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1656:	2f 92       	push	r2
    1658:	3f 92       	push	r3
    165a:	4f 92       	push	r4
    165c:	5f 92       	push	r5
    165e:	6f 92       	push	r6
    1660:	7f 92       	push	r7
    1662:	8f 92       	push	r8
    1664:	9f 92       	push	r9
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	3b 01       	movw	r6, r22
    1678:	4c 01       	movw	r8, r24
    167a:	19 01       	movw	r2, r18
    167c:	2a 01       	movw	r4, r20
	st_synchronize();
    167e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1682:	c4 01       	movw	r24, r8
    1684:	b3 01       	movw	r22, r6
    1686:	20 91 74 06 	lds	r18, 0x0674
    168a:	30 91 75 06 	lds	r19, 0x0675
    168e:	40 91 76 06 	lds	r20, 0x0676
    1692:	50 91 77 06 	lds	r21, 0x0677
    1696:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    169a:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    169e:	26 e0       	ldi	r18, 0x06	; 6
    16a0:	82 2e       	mov	r8, r18
    16a2:	25 e0       	ldi	r18, 0x05	; 5
    16a4:	92 2e       	mov	r9, r18
    16a6:	60 93 06 05 	sts	0x0506, r22
    16aa:	70 93 07 05 	sts	0x0507, r23
    16ae:	80 93 08 05 	sts	0x0508, r24
    16b2:	90 93 09 05 	sts	0x0509, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    16b6:	c2 01       	movw	r24, r4
    16b8:	b1 01       	movw	r22, r2
    16ba:	20 91 78 06 	lds	r18, 0x0678
    16be:	30 91 79 06 	lds	r19, 0x0679
    16c2:	40 91 7a 06 	lds	r20, 0x067A
    16c6:	50 91 7b 06 	lds	r21, 0x067B
    16ca:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    16ce:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    16d2:	f4 01       	movw	r30, r8
    16d4:	34 96       	adiw	r30, 0x04	; 4
    16d6:	60 93 0a 05 	sts	0x050A, r22
    16da:	71 83       	std	Z+1, r23	; 0x01
    16dc:	82 83       	std	Z+2, r24	; 0x02
    16de:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    16e0:	c8 01       	movw	r24, r16
    16e2:	b7 01       	movw	r22, r14
    16e4:	20 91 7c 06 	lds	r18, 0x067C
    16e8:	30 91 7d 06 	lds	r19, 0x067D
    16ec:	40 91 7e 06 	lds	r20, 0x067E
    16f0:	50 91 7f 06 	lds	r21, 0x067F
    16f4:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    16f8:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    16fc:	f4 01       	movw	r30, r8
    16fe:	38 96       	adiw	r30, 0x08	; 8
    1700:	60 93 0e 05 	sts	0x050E, r22
    1704:	71 83       	std	Z+1, r23	; 0x01
    1706:	82 83       	std	Z+2, r24	; 0x02
    1708:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    170a:	c6 01       	movw	r24, r12
    170c:	b5 01       	movw	r22, r10
    170e:	20 91 80 06 	lds	r18, 0x0680
    1712:	30 91 81 06 	lds	r19, 0x0681
    1716:	40 91 82 06 	lds	r20, 0x0682
    171a:	50 91 83 06 	lds	r21, 0x0683
    171e:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1722:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    1726:	2c e0       	ldi	r18, 0x0C	; 12
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	82 0e       	add	r8, r18
    172c:	93 1e       	adc	r9, r19
    172e:	60 93 12 05 	sts	0x0512, r22
    1732:	f4 01       	movw	r30, r8
    1734:	71 83       	std	Z+1, r23	; 0x01
    1736:	82 83       	std	Z+2, r24	; 0x02
    1738:	93 83       	std	Z+3, r25	; 0x03
}
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	9f 90       	pop	r9
    174c:	8f 90       	pop	r8
    174e:	7f 90       	pop	r7
    1750:	6f 90       	pop	r6
    1752:	5f 90       	pop	r5
    1754:	4f 90       	pop	r4
    1756:	3f 90       	pop	r3
    1758:	2f 90       	pop	r2
    175a:	08 95       	ret

0000175c <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	80 91 16 05 	lds	r24, 0x0516
    1768:	81 11       	cpse	r24, r1
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	20 97       	sbiw	r28, 0x00	; 0
    1770:	09 f0       	breq	.+2      	; 0x1774 <plan_set_acceleration_manager_enabled+0x18>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	98 17       	cp	r25, r24
    1776:	49 f0       	breq	.+18     	; 0x178a <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    1778:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    177c:	10 92 16 05 	sts	0x0516, r1
    1780:	cd 2b       	or	r28, r29
    1782:	19 f0       	breq	.+6      	; 0x178a <plan_set_acceleration_manager_enabled+0x2e>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	80 93 16 05 	sts	0x0516, r24
  }
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1790:	10 92 03 05 	sts	0x0503, r1
    1794:	10 92 02 05 	sts	0x0502, r1
  block_buffer_tail = 0;
    1798:	10 92 05 05 	sts	0x0505, r1
    179c:	10 92 04 05 	sts	0x0504, r1
  plan_set_acceleration_manager_enabled(TRUE);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 ae 0b 	call	0x175c	; 0x175c <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    17a8:	80 e1       	ldi	r24, 0x10	; 16
    17aa:	e6 e0       	ldi	r30, 0x06	; 6
    17ac:	f5 e0       	ldi	r31, 0x05	; 5
    17ae:	df 01       	movw	r26, r30
    17b0:	1d 92       	st	X+, r1
    17b2:	8a 95       	dec	r24
    17b4:	e9 f7       	brne	.-6      	; 0x17b0 <plan_init+0x20>
}
    17b6:	08 95       	ret

000017b8 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    17b8:	2f 92       	push	r2
    17ba:	3f 92       	push	r3
    17bc:	4f 92       	push	r4
    17be:	5f 92       	push	r5
    17c0:	6f 92       	push	r6
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	00 d0       	rcall	.+0      	; 0x17de <planner_reverse_pass_kernel+0x26>
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <planner_reverse_pass_kernel+0x28>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	8c 01       	movw	r16, r24
    17e6:	7e 83       	std	Y+6, r23	; 0x06
    17e8:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    17ea:	67 2b       	or	r22, r23
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <planner_reverse_pass_kernel+0x38>
    17ee:	07 c1       	rjmp	.+526    	; 0x19fe <planner_reverse_pass_kernel+0x246>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    17f0:	41 15       	cp	r20, r1
    17f2:	51 05       	cpc	r21, r1
    17f4:	61 f0       	breq	.+24     	; 0x180e <planner_reverse_pass_kernel+0x56>
    exit_factor = next->entry_factor;
    17f6:	da 01       	movw	r26, r20
    17f8:	d1 96       	adiw	r26, 0x31	; 49
    17fa:	8d 91       	ld	r24, X+
    17fc:	9d 91       	ld	r25, X+
    17fe:	0d 90       	ld	r0, X+
    1800:	bc 91       	ld	r27, X
    1802:	a0 2d       	mov	r26, r0
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	ab 83       	std	Y+3, r26	; 0x03
    180a:	bc 83       	std	Y+4, r27	; 0x04
    180c:	08 c0       	rjmp	.+16     	; 0x181e <planner_reverse_pass_kernel+0x66>
  } else {
    exit_factor = factor_for_safe_speed(current);
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	0e 94 1e 0a 	call	0x143c	; 0x143c <factor_for_safe_speed>
    1816:	69 83       	std	Y+1, r22	; 0x01
    1818:	7a 83       	std	Y+2, r23	; 0x02
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    181e:	01 15       	cp	r16, r1
    1820:	11 05       	cpc	r17, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <planner_reverse_pass_kernel+0x6e>
    1824:	e0 c0       	rjmp	.+448    	; 0x19e6 <planner_reverse_pass_kernel+0x22e>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1826:	f8 01       	movw	r30, r16
    1828:	61 8d       	ldd	r22, Z+25	; 0x19
    182a:	72 8d       	ldd	r23, Z+26	; 0x1a
    182c:	83 8d       	ldd	r24, Z+27	; 0x1b
    182e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1830:	ad 81       	ldd	r26, Y+5	; 0x05
    1832:	be 81       	ldd	r27, Y+6	; 0x06
    1834:	59 96       	adiw	r26, 0x19	; 25
    1836:	2d 91       	ld	r18, X+
    1838:	3d 91       	ld	r19, X+
    183a:	4d 91       	ld	r20, X+
    183c:	5c 91       	ld	r21, X
    183e:	5c 97       	sbiw	r26, 0x1c	; 28
    1840:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__subsf3>
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    184c:	1b 01       	movw	r2, r22
    184e:	2c 01       	movw	r4, r24
    1850:	f8 01       	movw	r30, r16
    1852:	65 8d       	ldd	r22, Z+29	; 0x1d
    1854:	76 8d       	ldd	r23, Z+30	; 0x1e
    1856:	87 8d       	ldd	r24, Z+31	; 0x1f
    1858:	90 a1       	ldd	r25, Z+32	; 0x20
    185a:	ad 81       	ldd	r26, Y+5	; 0x05
    185c:	be 81       	ldd	r27, Y+6	; 0x06
    185e:	5d 96       	adiw	r26, 0x1d	; 29
    1860:	2d 91       	ld	r18, X+
    1862:	3d 91       	ld	r19, X+
    1864:	4d 91       	ld	r20, X+
    1866:	5c 91       	ld	r21, X
    1868:	90 97       	sbiw	r26, 0x20	; 32
    186a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__subsf3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1876:	3b 01       	movw	r6, r22
    1878:	4c 01       	movw	r8, r24
    187a:	f8 01       	movw	r30, r16
    187c:	61 a1       	ldd	r22, Z+33	; 0x21
    187e:	72 a1       	ldd	r23, Z+34	; 0x22
    1880:	83 a1       	ldd	r24, Z+35	; 0x23
    1882:	94 a1       	ldd	r25, Z+36	; 0x24
    1884:	ad 81       	ldd	r26, Y+5	; 0x05
    1886:	be 81       	ldd	r27, Y+6	; 0x06
    1888:	91 96       	adiw	r26, 0x21	; 33
    188a:	2d 91       	ld	r18, X+
    188c:	3d 91       	ld	r19, X+
    188e:	4d 91       	ld	r20, X+
    1890:	5c 91       	ld	r21, X
    1892:	94 97       	sbiw	r26, 0x24	; 36
    1894:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__subsf3>
    1898:	9b 01       	movw	r18, r22
    189a:	ac 01       	movw	r20, r24
    189c:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    18a0:	5b 01       	movw	r10, r22
    18a2:	6c 01       	movw	r12, r24
    18a4:	f8 01       	movw	r30, r16
    18a6:	65 a1       	ldd	r22, Z+37	; 0x25
    18a8:	76 a1       	ldd	r23, Z+38	; 0x26
    18aa:	87 a1       	ldd	r24, Z+39	; 0x27
    18ac:	90 a5       	ldd	r25, Z+40	; 0x28
    18ae:	ad 81       	ldd	r26, Y+5	; 0x05
    18b0:	be 81       	ldd	r27, Y+6	; 0x06
    18b2:	95 96       	adiw	r26, 0x25	; 37
    18b4:	2d 91       	ld	r18, X+
    18b6:	3d 91       	ld	r19, X+
    18b8:	4d 91       	ld	r20, X+
    18ba:	5c 91       	ld	r21, X
    18bc:	98 97       	sbiw	r26, 0x28	; 40
    18be:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__subsf3>
    18c2:	9b 01       	movw	r18, r22
    18c4:	ac 01       	movw	r20, r24
    18c6:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    18ca:	7b 01       	movw	r14, r22
    18cc:	8c 01       	movw	r16, r24
    18ce:	c2 01       	movw	r24, r4
    18d0:	b1 01       	movw	r22, r2
    18d2:	a4 01       	movw	r20, r8
    18d4:	93 01       	movw	r18, r6
    18d6:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    18da:	a6 01       	movw	r20, r12
    18dc:	95 01       	movw	r18, r10
    18de:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    18e2:	a8 01       	movw	r20, r16
    18e4:	97 01       	movw	r18, r14
    18e6:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    18ea:	0e 94 cb 21 	call	0x4396	; 0x4396 <sqrt>
    18ee:	5b 01       	movw	r10, r22
    18f0:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    18f2:	e0 90 96 06 	lds	r14, 0x0696
    18f6:	f0 90 97 06 	lds	r15, 0x0697
    18fa:	00 91 98 06 	lds	r16, 0x0698
    18fe:	10 91 99 06 	lds	r17, 0x0699
    1902:	a8 01       	movw	r20, r16
    1904:	97 01       	movw	r18, r14
    1906:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__gesf2>
    190a:	18 16       	cp	r1, r24
    190c:	5c f0       	brlt	.+22     	; 0x1924 <planner_reverse_pass_kernel+0x16c>
    190e:	0f 2e       	mov	r0, r31
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	6f 2e       	mov	r6, r31
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	7f 2e       	mov	r7, r31
    1918:	f0 e8       	ldi	r31, 0x80	; 128
    191a:	8f 2e       	mov	r8, r31
    191c:	ff e3       	ldi	r31, 0x3F	; 63
    191e:	9f 2e       	mov	r9, r31
    1920:	f0 2d       	mov	r31, r0
    1922:	08 c0       	rjmp	.+16     	; 0x1934 <planner_reverse_pass_kernel+0x17c>
      entry_factor = (settings.max_jerk/jerk);
    1924:	c8 01       	movw	r24, r16
    1926:	b7 01       	movw	r22, r14
    1928:	a6 01       	movw	r20, r12
    192a:	95 01       	movw	r18, r10
    192c:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    1930:	3b 01       	movw	r6, r22
    1932:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1934:	c4 01       	movw	r24, r8
    1936:	b3 01       	movw	r22, r6
    1938:	29 81       	ldd	r18, Y+1	; 0x01
    193a:	3a 81       	ldd	r19, Y+2	; 0x02
    193c:	4b 81       	ldd	r20, Y+3	; 0x03
    193e:	5c 81       	ldd	r21, Y+4	; 0x04
    1940:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__gesf2>
    1944:	18 16       	cp	r1, r24
    1946:	0c f0       	brlt	.+2      	; 0x194a <planner_reverse_pass_kernel+0x192>
    1948:	54 c0       	rjmp	.+168    	; 0x19f2 <planner_reverse_pass_kernel+0x23a>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    194a:	ed 81       	ldd	r30, Y+5	; 0x05
    194c:	fe 81       	ldd	r31, Y+6	; 0x06
    194e:	a1 a4       	ldd	r10, Z+41	; 0x29
    1950:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1952:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1954:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1956:	c6 01       	movw	r24, r12
    1958:	b5 01       	movw	r22, r10
    195a:	29 81       	ldd	r18, Y+1	; 0x01
    195c:	3a 81       	ldd	r19, Y+2	; 0x02
    195e:	4b 81       	ldd	r20, Y+3	; 0x03
    1960:	5c 81       	ldd	r21, Y+4	; 0x04
    1962:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1966:	9b 01       	movw	r18, r22
    1968:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    196a:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    196e:	7b 01       	movw	r14, r22
    1970:	8c 01       	movw	r16, r24
    1972:	20 91 92 06 	lds	r18, 0x0692
    1976:	30 91 93 06 	lds	r19, 0x0693
    197a:	40 91 94 06 	lds	r20, 0x0694
    197e:	50 91 95 06 	lds	r21, 0x0695
    1982:	50 58       	subi	r21, 0x80	; 128
    1984:	ca 01       	movw	r24, r20
    1986:	b9 01       	movw	r22, r18
    1988:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e7       	ldi	r20, 0x70	; 112
    1992:	52 e4       	ldi	r21, 0x42	; 66
    1994:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e7       	ldi	r20, 0x70	; 112
    199e:	52 ec       	ldi	r21, 0xC2	; 194
    19a0:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    19a4:	ad 81       	ldd	r26, Y+5	; 0x05
    19a6:	be 81       	ldd	r27, Y+6	; 0x06
    19a8:	9d 96       	adiw	r26, 0x2d	; 45
    19aa:	2d 91       	ld	r18, X+
    19ac:	3d 91       	ld	r19, X+
    19ae:	4d 91       	ld	r20, X+
    19b0:	5c 91       	ld	r21, X
    19b2:	d0 97       	sbiw	r26, 0x30	; 48
    19b4:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    19b8:	9b 01       	movw	r18, r22
    19ba:	ac 01       	movw	r20, r24
    19bc:	c8 01       	movw	r24, r16
    19be:	b7 01       	movw	r22, r14
    19c0:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    19c4:	0e 94 cb 21 	call	0x4396	; 0x4396 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    19c8:	a6 01       	movw	r20, r12
    19ca:	95 01       	movw	r18, r10
    19cc:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    19d0:	7b 01       	movw	r14, r22
    19d2:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    19d4:	a4 01       	movw	r20, r8
    19d6:	93 01       	movw	r18, r6
    19d8:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
    19dc:	88 23       	and	r24, r24
    19de:	4c f4       	brge	.+18     	; 0x19f2 <planner_reverse_pass_kernel+0x23a>
    19e0:	37 01       	movw	r6, r14
    19e2:	48 01       	movw	r8, r16
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <planner_reverse_pass_kernel+0x23a>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ea:	0e 94 1e 0a 	call	0x143c	; 0x143c <factor_for_safe_speed>
    19ee:	3b 01       	movw	r6, r22
    19f0:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    19f2:	ed 81       	ldd	r30, Y+5	; 0x05
    19f4:	fe 81       	ldd	r31, Y+6	; 0x06
    19f6:	61 aa       	std	Z+49, r6	; 0x31
    19f8:	72 aa       	std	Z+50, r7	; 0x32
    19fa:	83 aa       	std	Z+51, r8	; 0x33
    19fc:	94 aa       	std	Z+52, r9	; 0x34
}
    19fe:	26 96       	adiw	r28, 0x06	; 6
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	9f 90       	pop	r9
    1a20:	8f 90       	pop	r8
    1a22:	7f 90       	pop	r7
    1a24:	6f 90       	pop	r6
    1a26:	5f 90       	pop	r5
    1a28:	4f 90       	pop	r4
    1a2a:	3f 90       	pop	r3
    1a2c:	2f 90       	pop	r2
    1a2e:	08 95       	ret

00001a30 <planner_reverse_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1a3a:	80 91 02 05 	lds	r24, 0x0502
    1a3e:	90 91 03 05 	lds	r25, 0x0503
    1a42:	f8 2e       	mov	r15, r24
    1a44:	c0 e0       	ldi	r28, 0x00	; 0
    1a46:	d0 e0       	ldi	r29, 0x00	; 0
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	12 c0       	rjmp	.+36     	; 0x1a72 <planner_reverse_pass+0x42>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    1a4e:	fa 94       	dec	r15
    if(block_index < 0) {
    1a50:	f7 fe       	sbrs	r15, 7
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <planner_reverse_pass+0x28>
    1a54:	39 e0       	ldi	r19, 0x09	; 9
    1a56:	f3 2e       	mov	r15, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1a58:	8f 2d       	mov	r24, r15
    1a5a:	99 e4       	ldi	r25, 0x49	; 73
    1a5c:	89 02       	muls	r24, r25
    1a5e:	80 01       	movw	r16, r0
    1a60:	11 24       	eor	r1, r1
    1a62:	08 5d       	subi	r16, 0xD8	; 216
    1a64:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1a66:	c8 01       	movw	r24, r16
    1a68:	be 01       	movw	r22, r28
    1a6a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <planner_reverse_pass_kernel>
    1a6e:	ae 01       	movw	r20, r28
    1a70:	e8 01       	movw	r28, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1a72:	20 91 04 05 	lds	r18, 0x0504
    1a76:	30 91 05 05 	lds	r19, 0x0505
    1a7a:	8f 2d       	mov	r24, r15
    1a7c:	99 27       	eor	r25, r25
    1a7e:	87 fd       	sbrc	r24, 7
    1a80:	90 95       	com	r25
    1a82:	82 17       	cp	r24, r18
    1a84:	93 07       	cpc	r25, r19
    1a86:	19 f7       	brne	.-58     	; 0x1a4e <planner_reverse_pass+0x1e>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	be 01       	movw	r22, r28
    1a8e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <planner_reverse_pass_kernel>
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	08 95       	ret

00001a9e <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1a9e:	2f 92       	push	r2
    1aa0:	3f 92       	push	r3
    1aa2:	4f 92       	push	r4
    1aa4:	5f 92       	push	r5
    1aa6:	6f 92       	push	r6
    1aa8:	7f 92       	push	r7
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	62 97       	sbiw	r28, 0x12	; 18
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	9a 8b       	std	Y+18, r25	; 0x12
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
    1ad6:	6a 01       	movw	r12, r20
    1ad8:	7b 01       	movw	r14, r22
    1ada:	18 01       	movw	r2, r16
    1adc:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1ade:	fc 01       	movw	r30, r24
    1ae0:	65 89       	ldd	r22, Z+21	; 0x15
    1ae2:	76 89       	ldd	r23, Z+22	; 0x16
    1ae4:	87 89       	ldd	r24, Z+23	; 0x17
    1ae6:	90 8d       	ldd	r25, Z+24	; 0x18
    1ae8:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__floatunsisf>
    1aec:	3b 01       	movw	r6, r22
    1aee:	4c 01       	movw	r8, r24
    1af0:	a7 01       	movw	r20, r14
    1af2:	96 01       	movw	r18, r12
    1af4:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1af8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <ceil>
    1afc:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
    1b00:	7b 01       	movw	r14, r22
    1b02:	8c 01       	movw	r16, r24
    1b04:	e9 89       	ldd	r30, Y+17	; 0x11
    1b06:	fa 89       	ldd	r31, Y+18	; 0x12
    1b08:	65 ab       	std	Z+53, r22	; 0x35
    1b0a:	76 ab       	std	Z+54, r23	; 0x36
    1b0c:	87 ab       	std	Z+55, r24	; 0x37
    1b0e:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1b10:	c4 01       	movw	r24, r8
    1b12:	b3 01       	movw	r22, r6
    1b14:	a2 01       	movw	r20, r4
    1b16:	91 01       	movw	r18, r2
    1b18:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1b1c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <ceil>
    1b20:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
    1b24:	1b 01       	movw	r2, r22
    1b26:	2c 01       	movw	r4, r24
    1b28:	e9 89       	ldd	r30, Y+17	; 0x11
    1b2a:	fa 89       	ldd	r31, Y+18	; 0x12
    1b2c:	61 af       	std	Z+57, r22	; 0x39
    1b2e:	72 af       	std	Z+58, r23	; 0x3a
    1b30:	83 af       	std	Z+59, r24	; 0x3b
    1b32:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1b34:	fd 96       	adiw	r30, 0x3d	; 61
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	fd 97       	sbiw	r30, 0x3d	; 61
    1b40:	fa 8b       	std	Y+18, r31	; 0x12
    1b42:	e9 8b       	std	Y+17, r30	; 0x11
    1b44:	28 e2       	ldi	r18, 0x28	; 40
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	0e 94 1a 22 	call	0x4434	; 0x4434 <__mulsi3>
    1b50:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e7       	ldi	r20, 0x70	; 112
    1b5a:	52 e4       	ldi	r21, 0x42	; 66
    1b5c:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1b60:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
    1b64:	5b 01       	movw	r10, r22
    1b66:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1b68:	c8 01       	movw	r24, r16
    1b6a:	b7 01       	movw	r22, r14
    1b6c:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__floatunsisf>
    1b70:	7b 01       	movw	r14, r22
    1b72:	8c 01       	movw	r16, r24
    1b74:	c6 01       	movw	r24, r12
    1b76:	b5 01       	movw	r22, r10
    1b78:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    1b7c:	6d 83       	std	Y+5, r22	; 0x05
    1b7e:	7e 83       	std	Y+6, r23	; 0x06
    1b80:	8f 83       	std	Y+7, r24	; 0x07
    1b82:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1b84:	c4 01       	movw	r24, r8
    1b86:	b3 01       	movw	r22, r6
    1b88:	a4 01       	movw	r20, r8
    1b8a:	93 01       	movw	r18, r6
    1b8c:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1b90:	3b 01       	movw	r6, r22
    1b92:	4c 01       	movw	r8, r24
    1b94:	c8 01       	movw	r24, r16
    1b96:	b7 01       	movw	r22, r14
    1b98:	a8 01       	movw	r20, r16
    1b9a:	97 01       	movw	r18, r14
    1b9c:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1ba0:	69 87       	std	Y+9, r22	; 0x09
    1ba2:	7a 87       	std	Y+10, r23	; 0x0a
    1ba4:	8b 87       	std	Y+11, r24	; 0x0b
    1ba6:	9c 87       	std	Y+12, r25	; 0x0c
    1ba8:	6d 81       	ldd	r22, Y+5	; 0x05
    1baa:	7e 81       	ldd	r23, Y+6	; 0x06
    1bac:	8f 81       	ldd	r24, Y+7	; 0x07
    1bae:	98 85       	ldd	r25, Y+8	; 0x08
    1bb0:	9b 01       	movw	r18, r22
    1bb2:	ac 01       	movw	r20, r24
    1bb4:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    1bb8:	6d 87       	std	Y+13, r22	; 0x0d
    1bba:	7e 87       	std	Y+14, r23	; 0x0e
    1bbc:	8f 87       	std	Y+15, r24	; 0x0f
    1bbe:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1bc0:	c4 01       	movw	r24, r8
    1bc2:	b3 01       	movw	r22, r6
    1bc4:	29 85       	ldd	r18, Y+9	; 0x09
    1bc6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bc8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1bca:	5c 85       	ldd	r21, Y+12	; 0x0c
    1bcc:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__subsf3>
    1bd0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bd2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1bd4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1bd6:	58 89       	ldd	r21, Y+16	; 0x10
    1bd8:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    1bdc:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <ceil>
    1be0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
    1be4:	69 83       	std	Y+1, r22	; 0x01
    1be6:	7a 83       	std	Y+2, r23	; 0x02
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1bec:	c2 01       	movw	r24, r4
    1bee:	b1 01       	movw	r22, r2
    1bf0:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__floatunsisf>
    1bf4:	9b 01       	movw	r18, r22
    1bf6:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1bf8:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1bfc:	1b 01       	movw	r2, r22
    1bfe:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1c00:	a4 01       	movw	r20, r8
    1c02:	93 01       	movw	r18, r6
    1c04:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__subsf3>
    1c08:	7b 01       	movw	r14, r22
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	d0 94       	com	r13
    1c0e:	c0 94       	com	r12
    1c10:	b0 94       	com	r11
    1c12:	a0 94       	com	r10
    1c14:	a1 1c       	adc	r10, r1
    1c16:	b1 1c       	adc	r11, r1
    1c18:	c1 1c       	adc	r12, r1
    1c1a:	d1 1c       	adc	r13, r1
    1c1c:	c6 01       	movw	r24, r12
    1c1e:	b5 01       	movw	r22, r10
    1c20:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    1c24:	9b 01       	movw	r18, r22
    1c26:	ac 01       	movw	r20, r24
    1c28:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    1c2c:	9b 01       	movw	r18, r22
    1c2e:	ac 01       	movw	r20, r24
    1c30:	c8 01       	movw	r24, r16
    1c32:	b7 01       	movw	r22, r14
    1c34:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    1c38:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1c3c:	e9 89       	ldd	r30, Y+17	; 0x11
    1c3e:	fa 89       	ldd	r31, Y+18	; 0x12
    1c40:	a1 88       	ldd	r10, Z+17	; 0x11
    1c42:	b2 88       	ldd	r11, Z+18	; 0x12
    1c44:	c3 88       	ldd	r12, Z+19	; 0x13
    1c46:	d4 88       	ldd	r13, Z+20	; 0x14
    1c48:	86 01       	movw	r16, r12
    1c4a:	75 01       	movw	r14, r10
    1c4c:	29 81       	ldd	r18, Y+1	; 0x01
    1c4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c50:	4b 81       	ldd	r20, Y+3	; 0x03
    1c52:	5c 81       	ldd	r21, Y+4	; 0x04
    1c54:	e2 1a       	sub	r14, r18
    1c56:	f3 0a       	sbc	r15, r19
    1c58:	04 0b       	sbc	r16, r20
    1c5a:	15 0b       	sbc	r17, r21
    1c5c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
    1c60:	a8 01       	movw	r20, r16
    1c62:	97 01       	movw	r18, r14
    1c64:	26 1b       	sub	r18, r22
    1c66:	37 0b       	sbc	r19, r23
    1c68:	48 0b       	sbc	r20, r24
    1c6a:	59 0b       	sbc	r21, r25
    1c6c:	da 01       	movw	r26, r20
    1c6e:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1c70:	57 ff       	sbrs	r21, 7
    1c72:	34 c0       	rjmp	.+104    	; 0x1cdc <calculate_trapezoid_for_block+0x23e>
    accelerate_steps = ceil(
    1c74:	c6 01       	movw	r24, r12
    1c76:	b5 01       	movw	r22, r10
    1c78:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    1c7c:	9b 01       	movw	r18, r22
    1c7e:	ac 01       	movw	r20, r24
    1c80:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c82:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c86:	98 89       	ldd	r25, Y+16	; 0x10
    1c88:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1c8c:	29 85       	ldd	r18, Y+9	; 0x09
    1c8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c90:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c92:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c94:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <__subsf3>
    1c98:	a2 01       	movw	r20, r4
    1c9a:	91 01       	movw	r18, r2
    1c9c:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    1ca0:	7b 01       	movw	r14, r22
    1ca2:	8c 01       	movw	r16, r24
    1ca4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ca6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    1caa:	98 85       	ldd	r25, Y+8	; 0x08
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e8       	ldi	r20, 0x80	; 128
    1cb2:	50 e4       	ldi	r21, 0x40	; 64
    1cb4:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1cb8:	9b 01       	movw	r18, r22
    1cba:	ac 01       	movw	r20, r24
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	b7 01       	movw	r22, r14
    1cc0:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    1cc4:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <ceil>
    1cc8:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
    1ccc:	69 83       	std	Y+1, r22	; 0x01
    1cce:	7a 83       	std	Y+2, r23	; 0x02
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 e0       	ldi	r26, 0x00	; 0
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1cdc:	49 89       	ldd	r20, Y+17	; 0x11
    1cde:	5a 89       	ldd	r21, Y+18	; 0x12
    1ce0:	4f 5b       	subi	r20, 0xBF	; 191
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	fa 01       	movw	r30, r20
    1ce6:	29 81       	ldd	r18, Y+1	; 0x01
    1ce8:	3a 81       	ldd	r19, Y+2	; 0x02
    1cea:	4b 81       	ldd	r20, Y+3	; 0x03
    1cec:	5c 81       	ldd	r21, Y+4	; 0x04
    1cee:	21 93       	st	Z+, r18
    1cf0:	31 93       	st	Z+, r19
    1cf2:	41 93       	st	Z+, r20
    1cf4:	51 93       	st	Z+, r21
    1cf6:	fa 8b       	std	Y+18, r31	; 0x12
    1cf8:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	a4 1f       	adc	r26, r20
    1d00:	b5 1f       	adc	r27, r21
    1d02:	80 83       	st	Z, r24
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	a2 83       	std	Z+2, r26	; 0x02
    1d08:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1d0a:	62 96       	adiw	r28, 0x12	; 18
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
    1d22:	df 90       	pop	r13
    1d24:	cf 90       	pop	r12
    1d26:	bf 90       	pop	r11
    1d28:	af 90       	pop	r10
    1d2a:	9f 90       	pop	r9
    1d2c:	8f 90       	pop	r8
    1d2e:	7f 90       	pop	r7
    1d30:	6f 90       	pop	r6
    1d32:	5f 90       	pop	r5
    1d34:	4f 90       	pop	r4
    1d36:	3f 90       	pop	r3
    1d38:	2f 90       	pop	r2
    1d3a:	08 95       	ret

00001d3c <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1d3c:	cf 92       	push	r12
    1d3e:	df 92       	push	r13
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1d4c:	80 91 04 05 	lds	r24, 0x0504
    1d50:	90 91 05 05 	lds	r25, 0x0505
    1d54:	28 2f       	mov	r18, r24
    1d56:	c0 e0       	ldi	r28, 0x00	; 0
    1d58:	d0 e0       	ldi	r29, 0x00	; 0
    1d5a:	1e c0       	rjmp	.+60     	; 0x1d98 <planner_recalculate_trapezoids+0x5c>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    1d5c:	89 e4       	ldi	r24, 0x49	; 73
    1d5e:	28 02       	muls	r18, r24
    1d60:	70 01       	movw	r14, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	e8 e2       	ldi	r30, 0x28	; 40
    1d66:	f2 e0       	ldi	r31, 0x02	; 2
    1d68:	ee 0e       	add	r14, r30
    1d6a:	ff 1e       	adc	r15, r31
    if (current) {
    1d6c:	20 97       	sbiw	r28, 0x00	; 0
    1d6e:	61 f0       	breq	.+24     	; 0x1d88 <planner_recalculate_trapezoids+0x4c>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1d70:	49 a9       	ldd	r20, Y+49	; 0x31
    1d72:	5a a9       	ldd	r21, Y+50	; 0x32
    1d74:	6b a9       	ldd	r22, Y+51	; 0x33
    1d76:	7c a9       	ldd	r23, Y+52	; 0x34
    1d78:	f7 01       	movw	r30, r14
    1d7a:	01 a9       	ldd	r16, Z+49	; 0x31
    1d7c:	12 a9       	ldd	r17, Z+50	; 0x32
    1d7e:	23 a9       	ldd	r18, Z+51	; 0x33
    1d80:	34 a9       	ldd	r19, Z+52	; 0x34
    1d82:	ce 01       	movw	r24, r28
    1d84:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1d88:	c6 01       	movw	r24, r12
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	6a e0       	ldi	r22, 0x0A	; 10
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	0e 94 39 22 	call	0x4472	; 0x4472 <__divmodhi4>
    1d94:	28 2f       	mov	r18, r24
    1d96:	e7 01       	movw	r28, r14
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1d98:	c2 2e       	mov	r12, r18
    1d9a:	dd 24       	eor	r13, r13
    1d9c:	c7 fc       	sbrc	r12, 7
    1d9e:	d0 94       	com	r13
    1da0:	80 91 02 05 	lds	r24, 0x0502
    1da4:	90 91 03 05 	lds	r25, 0x0503
    1da8:	c8 16       	cp	r12, r24
    1daa:	d9 06       	cpc	r13, r25
    1dac:	b9 f6       	brne	.-82     	; 0x1d5c <planner_recalculate_trapezoids+0x20>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 1e 0a 	call	0x143c	; 0x143c <factor_for_safe_speed>
    1db4:	8b 01       	movw	r16, r22
    1db6:	9c 01       	movw	r18, r24
    1db8:	49 a9       	ldd	r20, Y+49	; 0x31
    1dba:	5a a9       	ldd	r21, Y+50	; 0x32
    1dbc:	6b a9       	ldd	r22, Y+51	; 0x33
    1dbe:	7c a9       	ldd	r23, Y+52	; 0x34
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <calculate_trapezoid_for_block>
}
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	08 95       	ret

00001dd8 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    1dd8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <planner_reverse_pass>
  planner_forward_pass();
    1ddc:	0e 94 ef 0a 	call	0x15de	; 0x15de <planner_forward_pass>
  planner_recalculate_trapezoids();
    1de0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <planner_recalculate_trapezoids>
}
    1de4:	08 95       	ret

00001de6 <plan_buffer_line>:


// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
    1de6:	2f 92       	push	r2
    1de8:	3f 92       	push	r3
    1dea:	4f 92       	push	r4
    1dec:	5f 92       	push	r5
    1dee:	6f 92       	push	r6
    1df0:	7f 92       	push	r7
    1df2:	8f 92       	push	r8
    1df4:	9f 92       	push	r9
    1df6:	af 92       	push	r10
    1df8:	bf 92       	push	r11
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	e4 97       	sbiw	r28, 0x34	; 52
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	3b 01       	movw	r6, r22
    1e1c:	4c 01       	movw	r8, r24
    1e1e:	2f a3       	std	Y+39, r18	; 0x27
    1e20:	38 a7       	std	Y+40, r19	; 0x28
    1e22:	49 a7       	std	Y+41, r20	; 0x29
    1e24:	5a a7       	std	Y+42, r21	; 0x2a
    1e26:	eb a6       	std	Y+43, r14	; 0x2b
    1e28:	fc a6       	std	Y+44, r15	; 0x2c
    1e2a:	0d a7       	std	Y+45, r16	; 0x2d
    1e2c:	1e a7       	std	Y+46, r17	; 0x2e
    1e2e:	af a6       	std	Y+47, r10	; 0x2f
    1e30:	b8 aa       	std	Y+48, r11	; 0x30
    1e32:	c9 aa       	std	Y+49, r12	; 0x31
    1e34:	da aa       	std	Y+50, r13	; 0x32
  
  
  if( gHomed == FALSE ) 
    1e36:	80 91 4a 05 	lds	r24, 0x054A
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <plan_buffer_line+0x5a>
    1e3e:	72 c3       	rjmp	.+1764   	; 0x2524 <__stack+0x325>
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1e40:	c4 01       	movw	r24, r8
    1e42:	b3 01       	movw	r22, r6
    1e44:	20 91 74 06 	lds	r18, 0x0674
    1e48:	30 91 75 06 	lds	r19, 0x0675
    1e4c:	40 91 76 06 	lds	r20, 0x0676
    1e50:	50 91 77 06 	lds	r21, 0x0677
    1e54:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1e58:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    1e5c:	7b 01       	movw	r14, r22
    1e5e:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1e60:	20 91 78 06 	lds	r18, 0x0678
    1e64:	30 91 79 06 	lds	r19, 0x0679
    1e68:	40 91 7a 06 	lds	r20, 0x067A
    1e6c:	50 91 7b 06 	lds	r21, 0x067B
    1e70:	2b a3       	std	Y+35, r18	; 0x23
    1e72:	3c a3       	std	Y+36, r19	; 0x24
    1e74:	4d a3       	std	Y+37, r20	; 0x25
    1e76:	5e a3       	std	Y+38, r21	; 0x26
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1e78:	20 90 7c 06 	lds	r2, 0x067C
    1e7c:	30 90 7d 06 	lds	r3, 0x067D
    1e80:	40 90 7e 06 	lds	r4, 0x067E
    1e84:	50 90 7f 06 	lds	r5, 0x067F
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1e88:	a0 90 80 06 	lds	r10, 0x0680
    1e8c:	b0 90 81 06 	lds	r11, 0x0681
    1e90:	c0 90 82 06 	lds	r12, 0x0682
    1e94:	d0 90 83 06 	lds	r13, 0x0683
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    1e98:	80 91 02 05 	lds	r24, 0x0502
    1e9c:	90 91 03 05 	lds	r25, 0x0503
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	6a e0       	ldi	r22, 0x0A	; 10
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	0e 94 39 22 	call	0x4472	; 0x4472 <__divmodhi4>
    1eaa:	8b ab       	std	Y+51, r24	; 0x33
    1eac:	9c ab       	std	Y+52, r25	; 0x34
    1eae:	07 c0       	rjmp	.+14     	; 0x1ebe <plan_buffer_line+0xd8>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    1eb0:	83 b7       	in	r24, 0x33	; 51
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	83 bf       	out	0x33, r24	; 51
    1eb6:	88 95       	sleep
    1eb8:	83 b7       	in	r24, 0x33	; 51
    1eba:	8e 7f       	andi	r24, 0xFE	; 254
    1ebc:	83 bf       	out	0x33, r24	; 51
    1ebe:	80 91 04 05 	lds	r24, 0x0504
    1ec2:	90 91 05 05 	lds	r25, 0x0505
    1ec6:	4b a9       	ldd	r20, Y+51	; 0x33
    1ec8:	5c a9       	ldd	r21, Y+52	; 0x34
    1eca:	84 17       	cp	r24, r20
    1ecc:	95 07       	cpc	r25, r21
    1ece:	81 f3       	breq	.-32     	; 0x1eb0 <plan_buffer_line+0xca>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1ed0:	20 91 02 05 	lds	r18, 0x0502
    1ed4:	30 91 03 05 	lds	r19, 0x0503
    1ed8:	89 e4       	ldi	r24, 0x49	; 73
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	28 9f       	mul	r18, r24
    1ede:	d0 01       	movw	r26, r0
    1ee0:	29 9f       	mul	r18, r25
    1ee2:	b0 0d       	add	r27, r0
    1ee4:	38 9f       	mul	r19, r24
    1ee6:	b0 0d       	add	r27, r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	a8 5d       	subi	r26, 0xD8	; 216
    1eec:	bd 4f       	sbci	r27, 0xFD	; 253
    1eee:	ba a3       	std	Y+34, r27	; 0x22
    1ef0:	a9 a3       	std	Y+33, r26	; 0x21
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1ef2:	80 91 06 05 	lds	r24, 0x0506
    1ef6:	90 91 07 05 	lds	r25, 0x0507
    1efa:	a0 91 08 05 	lds	r26, 0x0508
    1efe:	b0 91 09 05 	lds	r27, 0x0509
    1f02:	37 01       	movw	r6, r14
    1f04:	48 01       	movw	r8, r16
    1f06:	68 1a       	sub	r6, r24
    1f08:	79 0a       	sbc	r7, r25
    1f0a:	8a 0a       	sbc	r8, r26
    1f0c:	9b 0a       	sbc	r9, r27
    1f0e:	97 fe       	sbrs	r9, 7
    1f10:	08 c0       	rjmp	.+16     	; 0x1f22 <plan_buffer_line+0x13c>
    1f12:	90 94       	com	r9
    1f14:	80 94       	com	r8
    1f16:	70 94       	com	r7
    1f18:	60 94       	com	r6
    1f1a:	61 1c       	adc	r6, r1
    1f1c:	71 1c       	adc	r7, r1
    1f1e:	81 1c       	adc	r8, r1
    1f20:	91 1c       	adc	r9, r1
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1f22:	6f a5       	ldd	r22, Y+47	; 0x2f
    1f24:	78 a9       	ldd	r23, Y+48	; 0x30
    1f26:	89 a9       	ldd	r24, Y+49	; 0x31
    1f28:	9a a9       	ldd	r25, Y+50	; 0x32
    1f2a:	a6 01       	movw	r20, r12
    1f2c:	95 01       	movw	r18, r10
    1f2e:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1f32:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    1f36:	6d 87       	std	Y+13, r22	; 0x0d
    1f38:	7e 87       	std	Y+14, r23	; 0x0e
    1f3a:	8f 87       	std	Y+15, r24	; 0x0f
    1f3c:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1f3e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1f40:	7c a5       	ldd	r23, Y+44	; 0x2c
    1f42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f44:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f46:	a2 01       	movw	r20, r4
    1f48:	91 01       	movw	r18, r2
    1f4a:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1f4e:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    1f52:	69 87       	std	Y+9, r22	; 0x09
    1f54:	7a 87       	std	Y+10, r23	; 0x0a
    1f56:	8b 87       	std	Y+11, r24	; 0x0b
    1f58:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1f5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f62:	2b a1       	ldd	r18, Y+35	; 0x23
    1f64:	3c a1       	ldd	r19, Y+36	; 0x24
    1f66:	4d a1       	ldd	r20, Y+37	; 0x25
    1f68:	5e a1       	ldd	r21, Y+38	; 0x26
    1f6a:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    1f6e:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    1f72:	6d 83       	std	Y+5, r22	; 0x05
    1f74:	7e 83       	std	Y+6, r23	; 0x06
    1f76:	8f 83       	std	Y+7, r24	; 0x07
    1f78:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1f7a:	e9 82       	std	Y+1, r14	; 0x01
    1f7c:	fa 82       	std	Y+2, r15	; 0x02
    1f7e:	0b 83       	std	Y+3, r16	; 0x03
    1f80:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1f82:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f84:	fa a1       	ldd	r31, Y+34	; 0x22
    1f86:	60 82       	st	Z, r6
    1f88:	71 82       	std	Z+1, r7	; 0x01
    1f8a:	82 82       	std	Z+2, r8	; 0x02
    1f8c:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    1f8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f90:	3e 81       	ldd	r19, Y+6	; 0x06
    1f92:	4f 81       	ldd	r20, Y+7	; 0x07
    1f94:	58 85       	ldd	r21, Y+8	; 0x08
    1f96:	80 91 0a 05 	lds	r24, 0x050A
    1f9a:	90 91 0b 05 	lds	r25, 0x050B
    1f9e:	a0 91 0c 05 	lds	r26, 0x050C
    1fa2:	b0 91 0d 05 	lds	r27, 0x050D
    1fa6:	28 1b       	sub	r18, r24
    1fa8:	39 0b       	sbc	r19, r25
    1faa:	4a 0b       	sbc	r20, r26
    1fac:	5b 0b       	sbc	r21, r27
    1fae:	57 ff       	sbrs	r21, 7
    1fb0:	07 c0       	rjmp	.+14     	; 0x1fc0 <plan_buffer_line+0x1da>
    1fb2:	50 95       	com	r21
    1fb4:	40 95       	com	r20
    1fb6:	30 95       	com	r19
    1fb8:	21 95       	neg	r18
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	4f 4f       	sbci	r20, 0xFF	; 255
    1fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc0:	a9 a1       	ldd	r26, Y+33	; 0x21
    1fc2:	ba a1       	ldd	r27, Y+34	; 0x22
    1fc4:	14 96       	adiw	r26, 0x04	; 4
    1fc6:	2d 93       	st	X+, r18
    1fc8:	3d 93       	st	X+, r19
    1fca:	4d 93       	st	X+, r20
    1fcc:	5c 93       	st	X, r21
    1fce:	17 97       	sbiw	r26, 0x07	; 7
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    1fd0:	29 85       	ldd	r18, Y+9	; 0x09
    1fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fd6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fd8:	80 91 0e 05 	lds	r24, 0x050E
    1fdc:	90 91 0f 05 	lds	r25, 0x050F
    1fe0:	a0 91 10 05 	lds	r26, 0x0510
    1fe4:	b0 91 11 05 	lds	r27, 0x0511
    1fe8:	28 1b       	sub	r18, r24
    1fea:	39 0b       	sbc	r19, r25
    1fec:	4a 0b       	sbc	r20, r26
    1fee:	5b 0b       	sbc	r21, r27
    1ff0:	57 ff       	sbrs	r21, 7
    1ff2:	07 c0       	rjmp	.+14     	; 0x2002 <plan_buffer_line+0x21c>
    1ff4:	50 95       	com	r21
    1ff6:	40 95       	com	r20
    1ff8:	30 95       	com	r19
    1ffa:	21 95       	neg	r18
    1ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffe:	4f 4f       	sbci	r20, 0xFF	; 255
    2000:	5f 4f       	sbci	r21, 0xFF	; 255
    2002:	e9 a1       	ldd	r30, Y+33	; 0x21
    2004:	fa a1       	ldd	r31, Y+34	; 0x22
    2006:	20 87       	std	Z+8, r18	; 0x08
    2008:	31 87       	std	Z+9, r19	; 0x09
    200a:	42 87       	std	Z+10, r20	; 0x0a
    200c:	53 87       	std	Z+11, r21	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    200e:	a0 90 12 05 	lds	r10, 0x0512
    2012:	b0 90 13 05 	lds	r11, 0x0513
    2016:	c0 90 14 05 	lds	r12, 0x0514
    201a:	d0 90 15 05 	lds	r13, 0x0515
    201e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2020:	3e 85       	ldd	r19, Y+14	; 0x0e
    2022:	4f 85       	ldd	r20, Y+15	; 0x0f
    2024:	58 89       	ldd	r21, Y+16	; 0x10
    2026:	2a 19       	sub	r18, r10
    2028:	3b 09       	sbc	r19, r11
    202a:	4c 09       	sbc	r20, r12
    202c:	5d 09       	sbc	r21, r13
    202e:	57 ff       	sbrs	r21, 7
    2030:	07 c0       	rjmp	.+14     	; 0x2040 <plan_buffer_line+0x25a>
    2032:	50 95       	com	r21
    2034:	40 95       	com	r20
    2036:	30 95       	com	r19
    2038:	21 95       	neg	r18
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
    203c:	4f 4f       	sbci	r20, 0xFF	; 255
    203e:	5f 4f       	sbci	r21, 0xFF	; 255
    2040:	a9 a1       	ldd	r26, Y+33	; 0x21
    2042:	ba a1       	ldd	r27, Y+34	; 0x22
    2044:	1c 96       	adiw	r26, 0x0c	; 12
    2046:	2d 93       	st	X+, r18
    2048:	3d 93       	st	X+, r19
    204a:	4d 93       	st	X+, r20
    204c:	5c 93       	st	X, r21
    204e:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    2050:	18 96       	adiw	r26, 0x08	; 8
    2052:	ed 90       	ld	r14, X+
    2054:	fd 90       	ld	r15, X+
    2056:	0d 91       	ld	r16, X+
    2058:	1c 91       	ld	r17, X
    205a:	1b 97       	sbiw	r26, 0x0b	; 11
    205c:	fd 01       	movw	r30, r26
    205e:	84 81       	ldd	r24, Z+4	; 0x04
    2060:	95 81       	ldd	r25, Z+5	; 0x05
    2062:	a6 81       	ldd	r26, Z+6	; 0x06
    2064:	b7 81       	ldd	r27, Z+7	; 0x07
    2066:	8e 15       	cp	r24, r14
    2068:	9f 05       	cpc	r25, r15
    206a:	a0 07       	cpc	r26, r16
    206c:	b1 07       	cpc	r27, r17
    206e:	10 f4       	brcc	.+4      	; 0x2074 <plan_buffer_line+0x28e>
    2070:	d8 01       	movw	r26, r16
    2072:	c7 01       	movw	r24, r14
    2074:	e9 a1       	ldd	r30, Y+33	; 0x21
    2076:	fa a1       	ldd	r31, Y+34	; 0x22
    2078:	e0 80       	ld	r14, Z
    207a:	f1 80       	ldd	r15, Z+1	; 0x01
    207c:	02 81       	ldd	r16, Z+2	; 0x02
    207e:	13 81       	ldd	r17, Z+3	; 0x03
    2080:	8e 15       	cp	r24, r14
    2082:	9f 05       	cpc	r25, r15
    2084:	a0 07       	cpc	r26, r16
    2086:	b1 07       	cpc	r27, r17
    2088:	10 f4       	brcc	.+4      	; 0x208e <plan_buffer_line+0x2a8>
    208a:	d8 01       	movw	r26, r16
    208c:	c7 01       	movw	r24, r14
    208e:	82 17       	cp	r24, r18
    2090:	93 07       	cpc	r25, r19
    2092:	a4 07       	cpc	r26, r20
    2094:	b5 07       	cpc	r27, r21
    2096:	10 f4       	brcc	.+4      	; 0x209c <plan_buffer_line+0x2b6>
    2098:	da 01       	movw	r26, r20
    209a:	c9 01       	movw	r24, r18
    209c:	e9 a1       	ldd	r30, Y+33	; 0x21
    209e:	fa a1       	ldd	r31, Y+34	; 0x22
    20a0:	81 8b       	std	Z+17, r24	; 0x11
    20a2:	92 8b       	std	Z+18, r25	; 0x12
    20a4:	a3 8b       	std	Z+19, r26	; 0x13
    20a6:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	a1 05       	cpc	r26, r1
    20ac:	b1 05       	cpc	r27, r1
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <plan_buffer_line+0x2cc>
    20b0:	39 c2       	rjmp	.+1138   	; 0x2524 <__stack+0x325>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    20b2:	69 81       	ldd	r22, Y+1	; 0x01
    20b4:	7a 81       	ldd	r23, Y+2	; 0x02
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	20 91 06 05 	lds	r18, 0x0506
    20be:	30 91 07 05 	lds	r19, 0x0507
    20c2:	40 91 08 05 	lds	r20, 0x0508
    20c6:	50 91 09 05 	lds	r21, 0x0509
    20ca:	62 1b       	sub	r22, r18
    20cc:	73 0b       	sbc	r23, r19
    20ce:	84 0b       	sbc	r24, r20
    20d0:	95 0b       	sbc	r25, r21
    20d2:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    20d6:	20 91 74 06 	lds	r18, 0x0674
    20da:	30 91 75 06 	lds	r19, 0x0675
    20de:	40 91 76 06 	lds	r20, 0x0676
    20e2:	50 91 77 06 	lds	r21, 0x0677
    20e6:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    20ea:	6d 8f       	std	Y+29, r22	; 0x1d
    20ec:	7e 8f       	std	Y+30, r23	; 0x1e
    20ee:	8f 8f       	std	Y+31, r24	; 0x1f
    20f0:	98 a3       	std	Y+32, r25	; 0x20
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    20f2:	6d 81       	ldd	r22, Y+5	; 0x05
    20f4:	7e 81       	ldd	r23, Y+6	; 0x06
    20f6:	8f 81       	ldd	r24, Y+7	; 0x07
    20f8:	98 85       	ldd	r25, Y+8	; 0x08
    20fa:	20 91 0a 05 	lds	r18, 0x050A
    20fe:	30 91 0b 05 	lds	r19, 0x050B
    2102:	40 91 0c 05 	lds	r20, 0x050C
    2106:	50 91 0d 05 	lds	r21, 0x050D
    210a:	62 1b       	sub	r22, r18
    210c:	73 0b       	sbc	r23, r19
    210e:	84 0b       	sbc	r24, r20
    2110:	95 0b       	sbc	r25, r21
    2112:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    2116:	20 91 78 06 	lds	r18, 0x0678
    211a:	30 91 79 06 	lds	r19, 0x0679
    211e:	40 91 7a 06 	lds	r20, 0x067A
    2122:	50 91 7b 06 	lds	r21, 0x067B
    2126:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    212a:	69 8f       	std	Y+25, r22	; 0x19
    212c:	7a 8f       	std	Y+26, r23	; 0x1a
    212e:	8b 8f       	std	Y+27, r24	; 0x1b
    2130:	9c 8f       	std	Y+28, r25	; 0x1c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    2132:	69 85       	ldd	r22, Y+9	; 0x09
    2134:	7a 85       	ldd	r23, Y+10	; 0x0a
    2136:	8b 85       	ldd	r24, Y+11	; 0x0b
    2138:	9c 85       	ldd	r25, Y+12	; 0x0c
    213a:	20 91 0e 05 	lds	r18, 0x050E
    213e:	30 91 0f 05 	lds	r19, 0x050F
    2142:	40 91 10 05 	lds	r20, 0x0510
    2146:	50 91 11 05 	lds	r21, 0x0511
    214a:	62 1b       	sub	r22, r18
    214c:	73 0b       	sbc	r23, r19
    214e:	84 0b       	sbc	r24, r20
    2150:	95 0b       	sbc	r25, r21
    2152:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    2156:	20 91 7c 06 	lds	r18, 0x067C
    215a:	30 91 7d 06 	lds	r19, 0x067D
    215e:	40 91 7e 06 	lds	r20, 0x067E
    2162:	50 91 7f 06 	lds	r21, 0x067F
    2166:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    216a:	6d 8b       	std	Y+21, r22	; 0x15
    216c:	7e 8b       	std	Y+22, r23	; 0x16
    216e:	8f 8b       	std	Y+23, r24	; 0x17
    2170:	98 8f       	std	Y+24, r25	; 0x18
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2172:	6d 85       	ldd	r22, Y+13	; 0x0d
    2174:	7e 85       	ldd	r23, Y+14	; 0x0e
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	98 89       	ldd	r25, Y+16	; 0x10
    217a:	6a 19       	sub	r22, r10
    217c:	7b 09       	sbc	r23, r11
    217e:	8c 09       	sbc	r24, r12
    2180:	9d 09       	sbc	r25, r13
    2182:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    2186:	20 91 80 06 	lds	r18, 0x0680
    218a:	30 91 81 06 	lds	r19, 0x0681
    218e:	40 91 82 06 	lds	r20, 0x0682
    2192:	50 91 83 06 	lds	r21, 0x0683
    2196:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    219a:	69 8b       	std	Y+17, r22	; 0x11
    219c:	7a 8b       	std	Y+18, r23	; 0x12
    219e:	8b 8b       	std	Y+19, r24	; 0x13
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    21a2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21a4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    21a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21a8:	98 a1       	ldd	r25, Y+32	; 0x20
    21aa:	0e 94 09 22 	call	0x4412	; 0x4412 <square>
    21ae:	3b 01       	movw	r6, r22
    21b0:	4c 01       	movw	r8, r24
    21b2:	69 8d       	ldd	r22, Y+25	; 0x19
    21b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ba:	0e 94 09 22 	call	0x4412	; 0x4412 <square>
    21be:	7b 01       	movw	r14, r22
    21c0:	8c 01       	movw	r16, r24
    21c2:	6d 89       	ldd	r22, Y+21	; 0x15
    21c4:	7e 89       	ldd	r23, Y+22	; 0x16
    21c6:	8f 89       	ldd	r24, Y+23	; 0x17
    21c8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ca:	0e 94 09 22 	call	0x4412	; 0x4412 <square>
    21ce:	5b 01       	movw	r10, r22
    21d0:	6c 01       	movw	r12, r24
    21d2:	69 89       	ldd	r22, Y+17	; 0x11
    21d4:	7a 89       	ldd	r23, Y+18	; 0x12
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	0e 94 09 22 	call	0x4412	; 0x4412 <square>
    21de:	1b 01       	movw	r2, r22
    21e0:	2c 01       	movw	r4, r24
    21e2:	c4 01       	movw	r24, r8
    21e4:	b3 01       	movw	r22, r6
    21e6:	a8 01       	movw	r20, r16
    21e8:	97 01       	movw	r18, r14
    21ea:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    21ee:	a6 01       	movw	r20, r12
    21f0:	95 01       	movw	r18, r10
    21f2:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    21f6:	a2 01       	movw	r20, r4
    21f8:	91 01       	movw	r18, r2
    21fa:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__addsf3>
    21fe:	0e 94 cb 21 	call	0x4396	; 0x4396 <sqrt>
    2202:	9b 01       	movw	r18, r22
    2204:	ac 01       	movw	r20, r24
    2206:	a9 a1       	ldd	r26, Y+33	; 0x21
    2208:	ba a1       	ldd	r27, Y+34	; 0x22
    220a:	9d 96       	adiw	r26, 0x2d	; 45
    220c:	6d 93       	st	X+, r22
    220e:	7d 93       	st	X+, r23
    2210:	8d 93       	st	X+, r24
    2212:	9c 93       	st	X, r25
    2214:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    2216:	60 96       	adiw	r28, 0x10	; 16
    2218:	8e ad       	ldd	r24, Y+62	; 0x3e
    221a:	9f ad       	ldd	r25, Y+63	; 0x3f
    221c:	60 97       	sbiw	r28, 0x10	; 16
    221e:	89 2b       	or	r24, r25
    2220:	89 f4       	brne	.+34     	; 0x2244 <__stack+0x45>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2222:	ca 01       	movw	r24, r20
    2224:	b9 01       	movw	r22, r18
    2226:	2e 96       	adiw	r28, 0x0e	; 14
    2228:	2c ad       	ldd	r18, Y+60	; 0x3c
    222a:	3d ad       	ldd	r19, Y+61	; 0x3d
    222c:	4e ad       	ldd	r20, Y+62	; 0x3e
    222e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2230:	2e 97       	sbiw	r28, 0x0e	; 14
    2232:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	34 e2       	ldi	r19, 0x24	; 36
    223a:	44 e7       	ldi	r20, 0x74	; 116
    223c:	59 e4       	ldi	r21, 0x49	; 73
    223e:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    2242:	0c c0       	rjmp	.+24     	; 0x225c <__stack+0x5d>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2244:	60 ec       	ldi	r22, 0xC0	; 192
    2246:	71 ee       	ldi	r23, 0xE1	; 225
    2248:	84 e6       	ldi	r24, 0x64	; 100
    224a:	9c e4       	ldi	r25, 0x4C	; 76
    224c:	2e 96       	adiw	r28, 0x0e	; 14
    224e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2250:	3d ad       	ldd	r19, Y+61	; 0x3d
    2252:	4e ad       	ldd	r20, Y+62	; 0x3e
    2254:	5f ad       	ldd	r21, Y+63	; 0x3f
    2256:	2e 97       	sbiw	r28, 0x0e	; 14
    2258:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    225c:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <lround>
    2260:	ac 01       	movw	r20, r24
    2262:	cb 01       	movw	r24, r22
    2264:	da 01       	movw	r26, r20
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    226a:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__floatunsisf>
    226e:	9b 01       	movw	r18, r22
    2270:	ac 01       	movw	r20, r24
    2272:	60 ec       	ldi	r22, 0xC0	; 192
    2274:	71 ee       	ldi	r23, 0xE1	; 225
    2276:	84 e6       	ldi	r24, 0x64	; 100
    2278:	9c e4       	ldi	r25, 0x4C	; 76
    227a:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    227e:	7b 01       	movw	r14, r22
    2280:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2282:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2284:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2286:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2288:	98 a1       	ldd	r25, Y+32	; 0x20
    228a:	a8 01       	movw	r20, r16
    228c:	97 01       	movw	r18, r14
    228e:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    2292:	e9 a1       	ldd	r30, Y+33	; 0x21
    2294:	fa a1       	ldd	r31, Y+34	; 0x22
    2296:	61 8f       	std	Z+25, r22	; 0x19
    2298:	72 8f       	std	Z+26, r23	; 0x1a
    229a:	83 8f       	std	Z+27, r24	; 0x1b
    229c:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_y = delta_y_mm * multiplier;
    229e:	69 8d       	ldd	r22, Y+25	; 0x19
    22a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a6:	a8 01       	movw	r20, r16
    22a8:	97 01       	movw	r18, r14
    22aa:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    22ae:	a9 a1       	ldd	r26, Y+33	; 0x21
    22b0:	ba a1       	ldd	r27, Y+34	; 0x22
    22b2:	5d 96       	adiw	r26, 0x1d	; 29
    22b4:	6d 93       	st	X+, r22
    22b6:	7d 93       	st	X+, r23
    22b8:	8d 93       	st	X+, r24
    22ba:	9c 93       	st	X, r25
    22bc:	90 97       	sbiw	r26, 0x20	; 32
  block->speed_z = delta_z_mm * multiplier;
    22be:	6d 89       	ldd	r22, Y+21	; 0x15
    22c0:	7e 89       	ldd	r23, Y+22	; 0x16
    22c2:	8f 89       	ldd	r24, Y+23	; 0x17
    22c4:	98 8d       	ldd	r25, Y+24	; 0x18
    22c6:	a8 01       	movw	r20, r16
    22c8:	97 01       	movw	r18, r14
    22ca:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    22ce:	e9 a1       	ldd	r30, Y+33	; 0x21
    22d0:	fa a1       	ldd	r31, Y+34	; 0x22
    22d2:	61 a3       	std	Z+33, r22	; 0x21
    22d4:	72 a3       	std	Z+34, r23	; 0x22
    22d6:	83 a3       	std	Z+35, r24	; 0x23
    22d8:	94 a3       	std	Z+36, r25	; 0x24
  block->speed_c = delta_c_mm * multiplier;
    22da:	69 89       	ldd	r22, Y+17	; 0x11
    22dc:	7a 89       	ldd	r23, Y+18	; 0x12
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	a8 01       	movw	r20, r16
    22e4:	97 01       	movw	r18, r14
    22e6:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    22ea:	a9 a1       	ldd	r26, Y+33	; 0x21
    22ec:	ba a1       	ldd	r27, Y+34	; 0x22
    22ee:	95 96       	adiw	r26, 0x25	; 37
    22f0:	6d 93       	st	X+, r22
    22f2:	7d 93       	st	X+, r23
    22f4:	8d 93       	st	X+, r24
    22f6:	9c 93       	st	X, r25
    22f8:	98 97       	sbiw	r26, 0x28	; 40
  block->nominal_speed = block->millimeters * multiplier;
    22fa:	9d 96       	adiw	r26, 0x2d	; 45
    22fc:	6d 91       	ld	r22, X+
    22fe:	7d 91       	ld	r23, X+
    2300:	8d 91       	ld	r24, X+
    2302:	9c 91       	ld	r25, X
    2304:	d0 97       	sbiw	r26, 0x30	; 48
    2306:	a8 01       	movw	r20, r16
    2308:	97 01       	movw	r18, r14
    230a:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    230e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2310:	fa a1       	ldd	r31, Y+34	; 0x22
    2312:	61 a7       	std	Z+41, r22	; 0x29
    2314:	72 a7       	std	Z+42, r23	; 0x2a
    2316:	83 a7       	std	Z+43, r24	; 0x2b
    2318:	94 a7       	std	Z+44, r25	; 0x2c
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    231a:	61 89       	ldd	r22, Z+17	; 0x11
    231c:	72 89       	ldd	r23, Z+18	; 0x12
    231e:	83 89       	ldd	r24, Z+19	; 0x13
    2320:	94 89       	ldd	r25, Z+20	; 0x14
    2322:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__floatsisf>
    2326:	5b 01       	movw	r10, r22
    2328:	6c 01       	movw	r12, r24
    232a:	a8 01       	movw	r20, r16
    232c:	97 01       	movw	r18, r14
    232e:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    2332:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <ceil>
    2336:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
    233a:	3b 01       	movw	r6, r22
    233c:	4c 01       	movw	r8, r24
    233e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2340:	ba a1       	ldd	r27, Y+34	; 0x22
    2342:	55 96       	adiw	r26, 0x15	; 21
    2344:	6d 93       	st	X+, r22
    2346:	7d 93       	st	X+, r23
    2348:	8d 93       	st	X+, r24
    234a:	9c 93       	st	X, r25
    234c:	58 97       	sbiw	r26, 0x18	; 24
  block->entry_factor = 0.0;
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e0       	ldi	r26, 0x00	; 0
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e9 a1       	ldd	r30, Y+33	; 0x21
    2358:	fa a1       	ldd	r31, Y+34	; 0x22
    235a:	81 ab       	std	Z+49, r24	; 0x31
    235c:	92 ab       	std	Z+50, r25	; 0x32
    235e:	a3 ab       	std	Z+51, r26	; 0x33
    2360:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2362:	60 91 92 06 	lds	r22, 0x0692
    2366:	70 91 93 06 	lds	r23, 0x0693
    236a:	80 91 94 06 	lds	r24, 0x0694
    236e:	90 91 95 06 	lds	r25, 0x0695
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e7       	ldi	r20, 0x70	; 112
    2378:	52 e4       	ldi	r21, 0x42	; 66
    237a:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	52 e4       	ldi	r21, 0x42	; 66
    2386:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    238a:	7b 01       	movw	r14, r22
    238c:	8c 01       	movw	r16, r24
    238e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2390:	ba a1       	ldd	r27, Y+34	; 0x22
    2392:	9d 96       	adiw	r26, 0x2d	; 45
    2394:	6d 91       	ld	r22, X+
    2396:	7d 91       	ld	r23, X+
    2398:	8d 91       	ld	r24, X+
    239a:	9c 91       	ld	r25, X
    239c:	d0 97       	sbiw	r26, 0x30	; 48
    239e:	a6 01       	movw	r20, r12
    23a0:	95 01       	movw	r18, r10
    23a2:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    23a6:	9b 01       	movw	r18, r22
    23a8:	ac 01       	movw	r20, r24
    23aa:	c8 01       	movw	r24, r16
    23ac:	b7 01       	movw	r22, r14
    23ae:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__divsf3>
    23b2:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <ceil>
    23b6:	09 a1       	ldd	r16, Y+33	; 0x21
    23b8:	1a a1       	ldd	r17, Y+34	; 0x22
    23ba:	03 5c       	subi	r16, 0xC3	; 195
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
    23c2:	f8 01       	movw	r30, r16
    23c4:	60 83       	st	Z, r22
    23c6:	71 83       	std	Z+1, r23	; 0x01
    23c8:	82 83       	std	Z+2, r24	; 0x02
    23ca:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    23cc:	80 91 16 05 	lds	r24, 0x0516
    23d0:	88 23       	and	r24, r24
    23d2:	69 f0       	breq	.+26     	; 0x23ee <__stack+0x1ef>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    23d4:	89 a1       	ldd	r24, Y+33	; 0x21
    23d6:	9a a1       	ldd	r25, Y+34	; 0x22
    23d8:	0e 94 1e 0a 	call	0x143c	; 0x143c <factor_for_safe_speed>
    23dc:	8b 01       	movw	r16, r22
    23de:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    23e0:	89 a1       	ldd	r24, Y+33	; 0x21
    23e2:	9a a1       	ldd	r25, Y+34	; 0x22
    23e4:	b9 01       	movw	r22, r18
    23e6:	a8 01       	movw	r20, r16
    23e8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <calculate_trapezoid_for_block>
    23ec:	26 c0       	rjmp	.+76     	; 0x243a <__stack+0x23b>
  } else {
    block->initial_rate = block->nominal_rate;
    23ee:	a9 a1       	ldd	r26, Y+33	; 0x21
    23f0:	ba a1       	ldd	r27, Y+34	; 0x22
    23f2:	d5 96       	adiw	r26, 0x35	; 53
    23f4:	6d 92       	st	X+, r6
    23f6:	7d 92       	st	X+, r7
    23f8:	8d 92       	st	X+, r8
    23fa:	9c 92       	st	X, r9
    23fc:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    23fe:	fd 01       	movw	r30, r26
    2400:	61 ae       	std	Z+57, r6	; 0x39
    2402:	72 ae       	std	Z+58, r7	; 0x3a
    2404:	83 ae       	std	Z+59, r8	; 0x3b
    2406:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    2408:	ef 5b       	subi	r30, 0xBF	; 191
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	10 82       	st	Z, r1
    240e:	11 82       	std	Z+1, r1	; 0x01
    2410:	12 82       	std	Z+2, r1	; 0x02
    2412:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    2414:	9d 01       	movw	r18, r26
    2416:	2b 5b       	subi	r18, 0xBB	; 187
    2418:	3f 4f       	sbci	r19, 0xFF	; 255
    241a:	fd 01       	movw	r30, r26
    241c:	81 89       	ldd	r24, Z+17	; 0x11
    241e:	92 89       	ldd	r25, Z+18	; 0x12
    2420:	a3 89       	ldd	r26, Z+19	; 0x13
    2422:	b4 89       	ldd	r27, Z+20	; 0x14
    2424:	f9 01       	movw	r30, r18
    2426:	80 83       	st	Z, r24
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	a2 83       	std	Z+2, r26	; 0x02
    242c:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    242e:	d8 01       	movw	r26, r16
    2430:	1d 92       	st	X+, r1
    2432:	1d 92       	st	X+, r1
    2434:	1d 92       	st	X+, r1
    2436:	1c 92       	st	X, r1
    2438:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    243a:	e9 a1       	ldd	r30, Y+33	; 0x21
    243c:	fa a1       	ldd	r31, Y+34	; 0x22
    243e:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    2440:	29 81       	ldd	r18, Y+1	; 0x01
    2442:	3a 81       	ldd	r19, Y+2	; 0x02
    2444:	4b 81       	ldd	r20, Y+3	; 0x03
    2446:	5c 81       	ldd	r21, Y+4	; 0x04
    2448:	80 91 06 05 	lds	r24, 0x0506
    244c:	90 91 07 05 	lds	r25, 0x0507
    2450:	a0 91 08 05 	lds	r26, 0x0508
    2454:	b0 91 09 05 	lds	r27, 0x0509
    2458:	28 17       	cp	r18, r24
    245a:	39 07       	cpc	r19, r25
    245c:	4a 07       	cpc	r20, r26
    245e:	5b 07       	cpc	r21, r27
    2460:	14 f4       	brge	.+4      	; 0x2466 <__stack+0x267>
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2466:	2d 81       	ldd	r18, Y+5	; 0x05
    2468:	3e 81       	ldd	r19, Y+6	; 0x06
    246a:	4f 81       	ldd	r20, Y+7	; 0x07
    246c:	58 85       	ldd	r21, Y+8	; 0x08
    246e:	80 91 0a 05 	lds	r24, 0x050A
    2472:	90 91 0b 05 	lds	r25, 0x050B
    2476:	a0 91 0c 05 	lds	r26, 0x050C
    247a:	b0 91 0d 05 	lds	r27, 0x050D
    247e:	28 17       	cp	r18, r24
    2480:	39 07       	cpc	r19, r25
    2482:	4a 07       	cpc	r20, r26
    2484:	5b 07       	cpc	r21, r27
    2486:	44 f4       	brge	.+16     	; 0x2498 <__stack+0x299>
    2488:	a9 a1       	ldd	r26, Y+33	; 0x21
    248a:	ba a1       	ldd	r27, Y+34	; 0x22
    248c:	50 96       	adiw	r26, 0x10	; 16
    248e:	8c 91       	ld	r24, X
    2490:	50 97       	sbiw	r26, 0x10	; 16
    2492:	88 60       	ori	r24, 0x08	; 8
    2494:	50 96       	adiw	r26, 0x10	; 16
    2496:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2498:	29 85       	ldd	r18, Y+9	; 0x09
    249a:	3a 85       	ldd	r19, Y+10	; 0x0a
    249c:	4b 85       	ldd	r20, Y+11	; 0x0b
    249e:	5c 85       	ldd	r21, Y+12	; 0x0c
    24a0:	80 91 0e 05 	lds	r24, 0x050E
    24a4:	90 91 0f 05 	lds	r25, 0x050F
    24a8:	a0 91 10 05 	lds	r26, 0x0510
    24ac:	b0 91 11 05 	lds	r27, 0x0511
    24b0:	28 17       	cp	r18, r24
    24b2:	39 07       	cpc	r19, r25
    24b4:	4a 07       	cpc	r20, r26
    24b6:	5b 07       	cpc	r21, r27
    24b8:	2c f4       	brge	.+10     	; 0x24c4 <__stack+0x2c5>
    24ba:	e9 a1       	ldd	r30, Y+33	; 0x21
    24bc:	fa a1       	ldd	r31, Y+34	; 0x22
    24be:	80 89       	ldd	r24, Z+16	; 0x10
    24c0:	80 64       	ori	r24, 0x40	; 64
    24c2:	80 8b       	std	Z+16, r24	; 0x10
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    24c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    24c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    24c8:	4f 85       	ldd	r20, Y+15	; 0x0f
    24ca:	58 89       	ldd	r21, Y+16	; 0x10
    24cc:	80 91 12 05 	lds	r24, 0x0512
    24d0:	90 91 13 05 	lds	r25, 0x0513
    24d4:	a0 91 14 05 	lds	r26, 0x0514
    24d8:	b0 91 15 05 	lds	r27, 0x0515
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	4a 07       	cpc	r20, r26
    24e2:	5b 07       	cpc	r21, r27
    24e4:	44 f4       	brge	.+16     	; 0x24f6 <__stack+0x2f7>
    24e6:	a9 a1       	ldd	r26, Y+33	; 0x21
    24e8:	ba a1       	ldd	r27, Y+34	; 0x22
    24ea:	50 96       	adiw	r26, 0x10	; 16
    24ec:	8c 91       	ld	r24, X
    24ee:	50 97       	sbiw	r26, 0x10	; 16
    24f0:	80 68       	ori	r24, 0x80	; 128
    24f2:	50 96       	adiw	r26, 0x10	; 16
    24f4:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    24f6:	eb a9       	ldd	r30, Y+51	; 0x33
    24f8:	fc a9       	ldd	r31, Y+52	; 0x34
    24fa:	f0 93 03 05 	sts	0x0503, r31
    24fe:	e0 93 02 05 	sts	0x0502, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    2502:	a6 e0       	ldi	r26, 0x06	; 6
    2504:	b5 e0       	ldi	r27, 0x05	; 5
    2506:	fe 01       	movw	r30, r28
    2508:	31 96       	adiw	r30, 0x01	; 1
    250a:	80 e1       	ldi	r24, 0x10	; 16
    250c:	01 90       	ld	r0, Z+
    250e:	0d 92       	st	X+, r0
    2510:	81 50       	subi	r24, 0x01	; 1
    2512:	e1 f7       	brne	.-8      	; 0x250c <__stack+0x30d>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2514:	80 91 16 05 	lds	r24, 0x0516
    2518:	88 23       	and	r24, r24
    251a:	11 f0       	breq	.+4      	; 0x2520 <__stack+0x321>
    251c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <planner_recalculate>
  st_wake_up();
    2520:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <st_wake_up>
}
    2524:	e4 96       	adiw	r28, 0x34	; 52
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	1f 91       	pop	r17
    2536:	0f 91       	pop	r16
    2538:	ff 90       	pop	r15
    253a:	ef 90       	pop	r14
    253c:	df 90       	pop	r13
    253e:	cf 90       	pop	r12
    2540:	bf 90       	pop	r11
    2542:	af 90       	pop	r10
    2544:	9f 90       	pop	r9
    2546:	8f 90       	pop	r8
    2548:	7f 90       	pop	r7
    254a:	6f 90       	pop	r6
    254c:	5f 90       	pop	r5
    254e:	4f 90       	pop	r4
    2550:	3f 90       	pop	r3
    2552:	2f 90       	pop	r2
    2554:	08 95       	ret

00002556 <sp_process>:
//  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
//  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	61 c0       	rjmp	.+194    	; 0x261e <sp_process+0xc8>
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    255c:	e0 91 49 05 	lds	r30, 0x0549
    2560:	ee 23       	and	r30, r30
    2562:	09 f4       	brne	.+2      	; 0x2566 <sp_process+0x10>
    2564:	4a c0       	rjmp	.+148    	; 0x25fa <sp_process+0xa4>
    2566:	9a 30       	cpi	r25, 0x0A	; 10
    2568:	19 f0       	breq	.+6      	; 0x2570 <sp_process+0x1a>
    256a:	9d 30       	cpi	r25, 0x0D	; 13
    256c:	09 f0       	breq	.+2      	; 0x2570 <sp_process+0x1a>
    256e:	45 c0       	rjmp	.+138    	; 0x25fa <sp_process+0xa4>
      line[char_counter] = 0; // terminate string
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	e9 5e       	subi	r30, 0xE9	; 233
    2574:	fa 4f       	sbci	r31, 0xFA	; 250
    2576:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2578:	87 e1       	ldi	r24, 0x17	; 23
    257a:	95 e0       	ldi	r25, 0x05	; 5
    257c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <gc_execute_line>
    2580:	68 2f       	mov	r22, r24
static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code)
{
	if( gHomed == FALSE ) {
    2582:	80 91 4a 05 	lds	r24, 0x054A
    2586:	88 23       	and	r24, r24
    2588:	39 f4       	brne	.+14     	; 0x2598 <sp_process+0x42>
    	printPgmString(PSTR("\r\nNot homed\n\r"));status_code = 99;
    258a:	8e eb       	ldi	r24, 0xBE	; 190
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
    2592:	c3 e6       	ldi	r28, 0x63	; 99
    2594:	d0 e0       	ldi	r29, 0x00	; 0
    2596:	1f c0       	rjmp	.+62     	; 0x25d6 <sp_process+0x80>
	}

  switch(status_code) {          
    2598:	62 30       	cpi	r22, 0x02	; 2
    259a:	91 f0       	breq	.+36     	; 0x25c0 <sp_process+0x6a>
    259c:	63 30       	cpi	r22, 0x03	; 3
    259e:	28 f4       	brcc	.+10     	; 0x25aa <sp_process+0x54>
    25a0:	66 23       	and	r22, r22
    25a2:	41 f0       	breq	.+16     	; 0x25b4 <sp_process+0x5e>
    25a4:	61 30       	cpi	r22, 0x01	; 1
    25a6:	a9 f4       	brne	.+42     	; 0x25d2 <sp_process+0x7c>
    25a8:	08 c0       	rjmp	.+16     	; 0x25ba <sp_process+0x64>
    25aa:	63 30       	cpi	r22, 0x03	; 3
    25ac:	61 f0       	breq	.+24     	; 0x25c6 <sp_process+0x70>
    25ae:	64 30       	cpi	r22, 0x04	; 4
    25b0:	81 f4       	brne	.+32     	; 0x25d2 <sp_process+0x7c>
    25b2:	0c c0       	rjmp	.+24     	; 0x25cc <sp_process+0x76>
    case GCSTATUS_OK:
    	printPgmString(PSTR("ok\n\r")); 
    25b4:	89 eb       	ldi	r24, 0xB9	; 185
    25b6:	92 e0       	ldi	r25, 0x02	; 2
    25b8:	1b c0       	rjmp	.+54     	; 0x25f0 <sp_process+0x9a>
		break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    	printPgmString(PSTR("error: Bad number format\n\r")); 
    25ba:	8e e9       	ldi	r24, 0x9E	; 158
    25bc:	92 e0       	ldi	r25, 0x02	; 2
    25be:	18 c0       	rjmp	.+48     	; 0x25f0 <sp_process+0x9a>
		break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    	printPgmString(PSTR("error: Expected command letter\n\r")); 
    25c0:	8d e7       	ldi	r24, 0x7D	; 125
    25c2:	92 e0       	ldi	r25, 0x02	; 2
    25c4:	15 c0       	rjmp	.+42     	; 0x25f0 <sp_process+0x9a>
		break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    	printPgmString(PSTR("error: Unsupported statement\n\r")); 
    25c6:	8e e5       	ldi	r24, 0x5E	; 94
    25c8:	92 e0       	ldi	r25, 0x02	; 2
    25ca:	12 c0       	rjmp	.+36     	; 0x25f0 <sp_process+0x9a>
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
    25cc:	80 e4       	ldi	r24, 0x40	; 64
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	0f c0       	rjmp	.+30     	; 0x25f0 <sp_process+0x9a>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    25d2:	c6 2f       	mov	r28, r22
    25d4:	d0 e0       	ldi	r29, 0x00	; 0
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
		break;
    default:
    	printPgmString(PSTR("error: "));
    25d6:	88 e3       	ldi	r24, 0x38	; 56
    25d8:	92 e0       	ldi	r25, 0x02	; 2
    25da:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
    	printInteger(status_code);
    25de:	be 01       	movw	r22, r28
    25e0:	88 27       	eor	r24, r24
    25e2:	77 fd       	sbrc	r23, 7
    25e4:	80 95       	com	r24
    25e6:	98 2f       	mov	r25, r24
    25e8:	0e 94 bb 1b 	call	0x3776	; 0x3776 <printInteger>
    	printPgmString(PSTR("\n\r"));
    25ec:	85 e3       	ldi	r24, 0x35	; 53
    25ee:	92 e0       	ldi	r25, 0x02	; 2
    25f0:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    25f4:	10 92 49 05 	sts	0x0549, r1
    25f8:	12 c0       	rjmp	.+36     	; 0x261e <sp_process+0xc8>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    25fa:	91 32       	cpi	r25, 0x21	; 33
    25fc:	84 f0       	brlt	.+32     	; 0x261e <sp_process+0xc8>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    25fe:	89 2f       	mov	r24, r25
    2600:	81 56       	subi	r24, 0x61	; 97
    2602:	ae 2f       	mov	r26, r30
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	ef 5f       	subi	r30, 0xFF	; 255
    2608:	8a 31       	cpi	r24, 0x1A	; 26
    260a:	20 f4       	brcc	.+8      	; 0x2614 <sp_process+0xbe>
      line[char_counter++] = c-'a'+'A';
    260c:	a9 5e       	subi	r26, 0xE9	; 233
    260e:	ba 4f       	sbci	r27, 0xFA	; 250
    2610:	90 52       	subi	r25, 0x20	; 32
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <sp_process+0xc2>
    } else {
      line[char_counter++] = c;
    2614:	a9 5e       	subi	r26, 0xE9	; 233
    2616:	ba 4f       	sbci	r27, 0xFA	; 250
    2618:	9c 93       	st	X, r25
    261a:	e0 93 49 05 	sts	0x0549, r30

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    261e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <serialRead>
    2622:	98 2f       	mov	r25, r24
    2624:	8f 3f       	cpi	r24, 0xFF	; 255
    2626:	09 f0       	breq	.+2      	; 0x262a <sp_process+0xd4>
    2628:	99 cf       	rjmp	.-206    	; 0x255c <sp_process+0x6>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	76 e9       	ldi	r23, 0x96	; 150
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 4c 1a 	call	0x3498	; 0x3498 <beginSerial>
//  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
//  printPgmString(PSTR("\r\n"));  
}
    263c:	08 95       	ret

0000263e <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	ae e7       	ldi	r26, 0x7E	; 126
    2644:	b4 e4       	ldi	r27, 0x44	; 68
    2646:	80 93 74 06 	sts	0x0674, r24
    264a:	90 93 75 06 	sts	0x0675, r25
    264e:	a0 93 76 06 	sts	0x0676, r26
    2652:	b0 93 77 06 	sts	0x0677, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2656:	80 93 78 06 	sts	0x0678, r24
    265a:	90 93 79 06 	sts	0x0679, r25
    265e:	a0 93 7a 06 	sts	0x067A, r26
    2662:	b0 93 7b 06 	sts	0x067B, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2666:	84 ef       	ldi	r24, 0xF4	; 244
    2668:	99 ef       	ldi	r25, 0xF9	; 249
    266a:	ac e3       	ldi	r26, 0x3C	; 60
    266c:	b4 e4       	ldi	r27, 0x44	; 68
    266e:	80 93 7c 06 	sts	0x067C, r24
    2672:	90 93 7d 06 	sts	0x067D, r25
    2676:	a0 93 7e 06 	sts	0x067E, r26
    267a:	b0 93 7f 06 	sts	0x067F, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    267e:	81 ec       	ldi	r24, 0xC1	; 193
    2680:	9a ec       	ldi	r25, 0xCA	; 202
    2682:	a1 e3       	ldi	r26, 0x31	; 49
    2684:	b2 e4       	ldi	r27, 0x42	; 66
    2686:	80 93 80 06 	sts	0x0680, r24
    268a:	90 93 81 06 	sts	0x0681, r25
    268e:	a0 93 82 06 	sts	0x0682, r26
    2692:	b0 93 83 06 	sts	0x0683, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2696:	88 e0       	ldi	r24, 0x08	; 8
    2698:	80 93 85 06 	sts	0x0685, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a0 ef       	ldi	r26, 0xF0	; 240
    26a2:	b3 e4       	ldi	r27, 0x43	; 67
    26a4:	80 93 86 06 	sts	0x0686, r24
    26a8:	90 93 87 06 	sts	0x0687, r25
    26ac:	a0 93 88 06 	sts	0x0688, r26
    26b0:	b0 93 89 06 	sts	0x0689, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    26b4:	80 93 8a 06 	sts	0x068A, r24
    26b8:	90 93 8b 06 	sts	0x068B, r25
    26bc:	a0 93 8c 06 	sts	0x068C, r26
    26c0:	b0 93 8d 06 	sts	0x068D, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    26c4:	8a e9       	ldi	r24, 0x9A	; 154
    26c6:	99 e9       	ldi	r25, 0x99	; 153
    26c8:	a9 e9       	ldi	r26, 0x99	; 153
    26ca:	b0 e4       	ldi	r27, 0x40	; 64
    26cc:	80 93 92 06 	sts	0x0692, r24
    26d0:	90 93 93 06 	sts	0x0693, r25
    26d4:	a0 93 94 06 	sts	0x0694, r26
    26d8:	b0 93 95 06 	sts	0x0695, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    26dc:	8d ec       	ldi	r24, 0xCD	; 205
    26de:	9c ec       	ldi	r25, 0xCC	; 204
    26e0:	ac ec       	ldi	r26, 0xCC	; 204
    26e2:	bd e3       	ldi	r27, 0x3D	; 61
    26e4:	80 93 8e 06 	sts	0x068E, r24
    26e8:	90 93 8f 06 	sts	0x068F, r25
    26ec:	a0 93 90 06 	sts	0x0690, r26
    26f0:	b0 93 91 06 	sts	0x0691, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a8 e4       	ldi	r26, 0x48	; 72
    26fa:	b2 e4       	ldi	r27, 0x42	; 66
    26fc:	80 93 96 06 	sts	0x0696, r24
    2700:	90 93 97 06 	sts	0x0697, r25
    2704:	a0 93 98 06 	sts	0x0698, r26
    2708:	b0 93 99 06 	sts	0x0699, r27
}
    270c:	08 95       	ret

0000270e <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 c7 02 	call	0x58e	; 0x58e <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2716:	87 36       	cpi	r24, 0x67	; 103
    2718:	81 f4       	brne	.+32     	; 0x273a <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    271a:	84 e7       	ldi	r24, 0x74	; 116
    271c:	96 e0       	ldi	r25, 0x06	; 6
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	46 e2       	ldi	r20, 0x26	; 38
    2724:	50 e0       	ldi	r21, 0x00	; 0
    2726:	0e 94 34 03 	call	0x668	; 0x668 <memcpy_from_eeprom_with_checksum>
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	89 2b       	or	r24, r25
    272e:	09 f4       	brne	.+2      	; 0x2732 <read_settings+0x24>
    2730:	21 e0       	ldi	r18, 0x01	; 1
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	28 27       	eor	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	29 c0       	rjmp	.+82     	; 0x278c <read_settings+0x7e>
      return(FALSE);
    }
  } 
  else if (version == 1) {
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	29 f5       	brne	.+74     	; 0x2788 <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    273e:	84 e7       	ldi	r24, 0x74	; 116
    2740:	96 e0       	ldi	r25, 0x06	; 6
    2742:	61 e0       	ldi	r22, 0x01	; 1
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	4b e1       	ldi	r20, 0x1B	; 27
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	0e 94 34 03 	call	0x668	; 0x668 <memcpy_from_eeprom_with_checksum>
    274e:	89 2b       	or	r24, r25
    2750:	d9 f0       	breq	.+54     	; 0x2788 <read_settings+0x7a>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2752:	8a e9       	ldi	r24, 0x9A	; 154
    2754:	99 e9       	ldi	r25, 0x99	; 153
    2756:	a9 e9       	ldi	r26, 0x99	; 153
    2758:	b0 e4       	ldi	r27, 0x40	; 64
    275a:	80 93 92 06 	sts	0x0692, r24
    275e:	90 93 93 06 	sts	0x0693, r25
    2762:	a0 93 94 06 	sts	0x0694, r26
    2766:	b0 93 95 06 	sts	0x0695, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a8 e4       	ldi	r26, 0x48	; 72
    2770:	b2 e4       	ldi	r27, 0x42	; 66
    2772:	80 93 96 06 	sts	0x0696, r24
    2776:	90 93 97 06 	sts	0x0697, r25
    277a:	a0 93 98 06 	sts	0x0698, r26
    277e:	b0 93 99 06 	sts	0x0699, r27
    2782:	21 e0       	ldi	r18, 0x01	; 1
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	02 c0       	rjmp	.+4      	; 0x278c <read_settings+0x7e>
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    278c:	c9 01       	movw	r24, r18
    278e:	08 95       	ret

00002790 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	67 e6       	ldi	r22, 0x67	; 103
    2796:	0e 94 cf 02 	call	0x59e	; 0x59e <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	64 e7       	ldi	r22, 0x74	; 116
    27a0:	76 e0       	ldi	r23, 0x06	; 6
    27a2:	46 e2       	ldi	r20, 0x26	; 38
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <memcpy_to_eeprom_with_checksum>
}
    27aa:	08 95       	ret

000027ac <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    27ac:	fc 01       	movw	r30, r24
  switch(parameter) {
    27ae:	86 30       	cpi	r24, 0x06	; 6
    27b0:	91 05       	cpc	r25, r1
    27b2:	b9 f1       	breq	.+110    	; 0x2822 <settings_store_setting+0x76>
    27b4:	87 30       	cpi	r24, 0x07	; 7
    27b6:	91 05       	cpc	r25, r1
    27b8:	4c f4       	brge	.+18     	; 0x27cc <settings_store_setting+0x20>
    27ba:	84 30       	cpi	r24, 0x04	; 4
    27bc:	91 05       	cpc	r25, r1
    27be:	f9 f0       	breq	.+62     	; 0x27fe <settings_store_setting+0x52>
    27c0:	85 30       	cpi	r24, 0x05	; 5
    27c2:	91 05       	cpc	r25, r1
    27c4:	2c f5       	brge	.+74     	; 0x2810 <settings_store_setting+0x64>
    27c6:	97 ff       	sbrs	r25, 7
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <settings_store_setting+0x3c>
    27ca:	62 c0       	rjmp	.+196    	; 0x2890 <settings_store_setting+0xe4>
    27cc:	88 30       	cpi	r24, 0x08	; 8
    27ce:	91 05       	cpc	r25, r1
    27d0:	d1 f1       	breq	.+116    	; 0x2846 <settings_store_setting+0x9a>
    27d2:	88 30       	cpi	r24, 0x08	; 8
    27d4:	91 05       	cpc	r25, r1
    27d6:	74 f1       	brlt	.+92     	; 0x2834 <settings_store_setting+0x88>
    27d8:	89 30       	cpi	r24, 0x09	; 9
    27da:	91 05       	cpc	r25, r1
    27dc:	e9 f1       	breq	.+122    	; 0x2858 <settings_store_setting+0xac>
    27de:	e8 5e       	subi	r30, 0xE8	; 232
    27e0:	f3 40       	sbci	r31, 0x03	; 3
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <settings_store_setting+0x3a>
    27e4:	55 c0       	rjmp	.+170    	; 0x2890 <settings_store_setting+0xe4>
    27e6:	44 c0       	rjmp	.+136    	; 0x2870 <settings_store_setting+0xc4>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	ec 58       	subi	r30, 0x8C	; 140
    27f2:	f9 4f       	sbci	r31, 0xF9	; 249
    27f4:	40 83       	st	Z, r20
    27f6:	51 83       	std	Z+1, r21	; 0x01
    27f8:	62 83       	std	Z+2, r22	; 0x02
    27fa:	73 83       	std	Z+3, r23	; 0x03
    27fc:	4c c0       	rjmp	.+152    	; 0x2896 <settings_store_setting+0xea>
    case 4: settings.pulse_microseconds = round(value); break;
    27fe:	cb 01       	movw	r24, r22
    2800:	ba 01       	movw	r22, r20
    2802:	0e 94 a7 21 	call	0x434e	; 0x434e <round>
    2806:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__fixunssfsi>
    280a:	60 93 85 06 	sts	0x0685, r22
    280e:	43 c0       	rjmp	.+134    	; 0x2896 <settings_store_setting+0xea>
    case 5: settings.default_feed_rate = value; break;
    2810:	40 93 86 06 	sts	0x0686, r20
    2814:	50 93 87 06 	sts	0x0687, r21
    2818:	60 93 88 06 	sts	0x0688, r22
    281c:	70 93 89 06 	sts	0x0689, r23
    2820:	3a c0       	rjmp	.+116    	; 0x2896 <settings_store_setting+0xea>
    case 6: settings.default_seek_rate = value; break;
    2822:	40 93 8a 06 	sts	0x068A, r20
    2826:	50 93 8b 06 	sts	0x068B, r21
    282a:	60 93 8c 06 	sts	0x068C, r22
    282e:	70 93 8d 06 	sts	0x068D, r23
    2832:	31 c0       	rjmp	.+98     	; 0x2896 <settings_store_setting+0xea>
    case 7: settings.mm_per_arc_segment = value; break;
    2834:	40 93 8e 06 	sts	0x068E, r20
    2838:	50 93 8f 06 	sts	0x068F, r21
    283c:	60 93 90 06 	sts	0x0690, r22
    2840:	70 93 91 06 	sts	0x0691, r23
    2844:	28 c0       	rjmp	.+80     	; 0x2896 <settings_store_setting+0xea>
    case 8: settings.acceleration = value; break;
    2846:	40 93 92 06 	sts	0x0692, r20
    284a:	50 93 93 06 	sts	0x0693, r21
    284e:	60 93 94 06 	sts	0x0694, r22
    2852:	70 93 95 06 	sts	0x0695, r23
    2856:	1f c0       	rjmp	.+62     	; 0x2896 <settings_store_setting+0xea>
    case 9: settings.max_jerk = fabs(value); break;
    2858:	db 01       	movw	r26, r22
    285a:	ca 01       	movw	r24, r20
    285c:	bf 77       	andi	r27, 0x7F	; 127
    285e:	80 93 96 06 	sts	0x0696, r24
    2862:	90 93 97 06 	sts	0x0697, r25
    2866:	a0 93 98 06 	sts	0x0698, r26
    286a:	b0 93 99 06 	sts	0x0699, r27
    286e:	13 c0       	rjmp	.+38     	; 0x2896 <settings_store_setting+0xea>
    case 1000:
	  if (!!value) st_enable();
    2870:	cb 01       	movw	r24, r22
    2872:	ba 01       	movw	r22, r20
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
    2880:	88 23       	and	r24, r24
    2882:	19 f0       	breq	.+6      	; 0x288a <settings_store_setting+0xde>
    2884:	0e 94 76 15 	call	0x2aec	; 0x2aec <st_enable>
    2888:	08 95       	ret
      else st_disable();
    288a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <st_disable>
    288e:	08 95       	ret
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2890:	81 ee       	ldi	r24, 0xE1	; 225
    2892:	92 e0       	ldi	r25, 0x02	; 2
    2894:	04 c0       	rjmp	.+8      	; 0x289e <settings_store_setting+0xf2>
      return;
  }
  write_settings();
    2896:	0e 94 c8 13 	call	0x2790	; 0x2790 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    289a:	8c ec       	ldi	r24, 0xCC	; 204
    289c:	92 e0       	ldi	r25, 0x02	; 2
    289e:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
    28a2:	08 95       	ret

000028a4 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    28a4:	85 eb       	ldi	r24, 0xB5	; 181
    28a6:	94 e0       	ldi	r25, 0x04	; 4
    28a8:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    28ac:	8e ea       	ldi	r24, 0xAE	; 174
    28ae:	94 e0       	ldi	r25, 0x04	; 4
    28b0:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printPgmString(PSTR("\r\n"));
    28b4:	8b ea       	ldi	r24, 0xAB	; 171
    28b6:	94 e0       	ldi	r25, 0x04	; 4
    28b8:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    28bc:	85 ea       	ldi	r24, 0xA5	; 165
    28be:	94 e0       	ldi	r25, 0x04	; 4
    28c0:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    28c4:	60 91 74 06 	lds	r22, 0x0674
    28c8:	70 91 75 06 	lds	r23, 0x0675
    28cc:	80 91 76 06 	lds	r24, 0x0676
    28d0:	90 91 77 06 	lds	r25, 0x0677
    28d4:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    28d8:	85 e9       	ldi	r24, 0x95	; 149
    28da:	94 e0       	ldi	r25, 0x04	; 4
    28dc:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    28e0:	8f e8       	ldi	r24, 0x8F	; 143
    28e2:	94 e0       	ldi	r25, 0x04	; 4
    28e4:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    28e8:	60 91 78 06 	lds	r22, 0x0678
    28ec:	70 91 79 06 	lds	r23, 0x0679
    28f0:	80 91 7a 06 	lds	r24, 0x067A
    28f4:	90 91 7b 06 	lds	r25, 0x067B
    28f8:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    28fc:	8f e7       	ldi	r24, 0x7F	; 127
    28fe:	94 e0       	ldi	r25, 0x04	; 4
    2900:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2904:	89 e7       	ldi	r24, 0x79	; 121
    2906:	94 e0       	ldi	r25, 0x04	; 4
    2908:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    290c:	60 91 7c 06 	lds	r22, 0x067C
    2910:	70 91 7d 06 	lds	r23, 0x067D
    2914:	80 91 7e 06 	lds	r24, 0x067E
    2918:	90 91 7f 06 	lds	r25, 0x067F
    291c:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2920:	89 e6       	ldi	r24, 0x69	; 105
    2922:	94 e0       	ldi	r25, 0x04	; 4
    2924:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2928:	83 e6       	ldi	r24, 0x63	; 99
    292a:	94 e0       	ldi	r25, 0x04	; 4
    292c:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2930:	60 91 80 06 	lds	r22, 0x0680
    2934:	70 91 81 06 	lds	r23, 0x0681
    2938:	80 91 82 06 	lds	r24, 0x0682
    293c:	90 91 83 06 	lds	r25, 0x0683
    2940:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2944:	81 e5       	ldi	r24, 0x51	; 81
    2946:	94 e0       	ldi	r25, 0x04	; 4
    2948:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    294c:	8b e4       	ldi	r24, 0x4B	; 75
    294e:	94 e0       	ldi	r25, 0x04	; 4
    2950:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printInteger(settings.pulse_microseconds);
    2954:	60 91 85 06 	lds	r22, 0x0685
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 bb 1b 	call	0x3776	; 0x3776 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2962:	8e e2       	ldi	r24, 0x2E	; 46
    2964:	94 e0       	ldi	r25, 0x04	; 4
    2966:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    296a:	88 e2       	ldi	r24, 0x28	; 40
    296c:	94 e0       	ldi	r25, 0x04	; 4
    296e:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.default_feed_rate);
    2972:	60 91 86 06 	lds	r22, 0x0686
    2976:	70 91 87 06 	lds	r23, 0x0687
    297a:	80 91 88 06 	lds	r24, 0x0688
    297e:	90 91 89 06 	lds	r25, 0x0689
    2982:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2986:	8a e0       	ldi	r24, 0x0A	; 10
    2988:	94 e0       	ldi	r25, 0x04	; 4
    298a:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    298e:	84 e0       	ldi	r24, 0x04	; 4
    2990:	94 e0       	ldi	r25, 0x04	; 4
    2992:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.default_seek_rate);
    2996:	60 91 8a 06 	lds	r22, 0x068A
    299a:	70 91 8b 06 	lds	r23, 0x068B
    299e:	80 91 8c 06 	lds	r24, 0x068C
    29a2:	90 91 8d 06 	lds	r25, 0x068D
    29a6:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    29aa:	86 ee       	ldi	r24, 0xE6	; 230
    29ac:	93 e0       	ldi	r25, 0x03	; 3
    29ae:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    29b2:	80 ee       	ldi	r24, 0xE0	; 224
    29b4:	93 e0       	ldi	r25, 0x03	; 3
    29b6:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    29ba:	60 91 8e 06 	lds	r22, 0x068E
    29be:	70 91 8f 06 	lds	r23, 0x068F
    29c2:	80 91 90 06 	lds	r24, 0x0690
    29c6:	90 91 91 06 	lds	r25, 0x0691
    29ca:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    29ce:	8c ec       	ldi	r24, 0xCC	; 204
    29d0:	93 e0       	ldi	r25, 0x03	; 3
    29d2:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    29d6:	86 ec       	ldi	r24, 0xC6	; 198
    29d8:	93 e0       	ldi	r25, 0x03	; 3
    29da:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.acceleration);
    29de:	60 91 92 06 	lds	r22, 0x0692
    29e2:	70 91 93 06 	lds	r23, 0x0693
    29e6:	80 91 94 06 	lds	r24, 0x0694
    29ea:	90 91 95 06 	lds	r25, 0x0695
    29ee:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    29f2:	88 ea       	ldi	r24, 0xA8	; 168
    29f4:	93 e0       	ldi	r25, 0x03	; 3
    29f6:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    29fa:	82 ea       	ldi	r24, 0xA2	; 162
    29fc:	93 e0       	ldi	r25, 0x03	; 3
    29fe:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printFloat(settings.max_jerk);
    2a02:	60 91 96 06 	lds	r22, 0x0696
    2a06:	70 91 97 06 	lds	r23, 0x0697
    2a0a:	80 91 98 06 	lds	r24, 0x0698
    2a0e:	90 91 99 06 	lds	r25, 0x0699
    2a12:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2a16:	8a e6       	ldi	r24, 0x6A	; 106
    2a18:	93 e0       	ldi	r25, 0x03	; 3
    2a1a:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2a1e:	81 e6       	ldi	r24, 0x61	; 97
    2a20:	93 e0       	ldi	r25, 0x03	; 3
    2a22:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
  printInteger(st_is_enabled());
    2a26:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <st_is_enabled>
    2a2a:	aa 27       	eor	r26, r26
    2a2c:	97 fd       	sbrc	r25, 7
    2a2e:	a0 95       	com	r26
    2a30:	ba 2f       	mov	r27, r26
    2a32:	bc 01       	movw	r22, r24
    2a34:	cd 01       	movw	r24, r26
    2a36:	0e 94 bb 1b 	call	0x3776	; 0x3776 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2a3a:	88 e3       	ldi	r24, 0x38	; 56
    2a3c:	93 e0       	ldi	r25, 0x03	; 3
    2a3e:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2a42:	85 ef       	ldi	r24, 0xF5	; 245
    2a44:	92 e0       	ldi	r25, 0x02	; 2
    2a46:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
}
    2a4a:	08 95       	ret

00002a4c <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2a4c:	0e 94 87 13 	call	0x270e	; 0x270e <read_settings>
    2a50:	89 2b       	or	r24, r25
    2a52:	31 f4       	brne	.+12     	; 0x2a60 <settings_init+0x14>
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2a54:	0e 94 1f 13 	call	0x263e	; 0x263e <settings_reset>
    write_settings();
    2a58:	0e 94 c8 13 	call	0x2790	; 0x2790 <write_settings>
    settings_dump();
    2a5c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <settings_dump>
    2a60:	08 95       	ret

00002a62 <spindle_init>:
#include <avr/io.h>
#include <avr/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2a62:	e1 e0       	ldi	r30, 0x01	; 1
    2a64:	f1 e0       	ldi	r31, 0x01	; 1
    2a66:	80 81       	ld	r24, Z
    2a68:	80 64       	ori	r24, 0x40	; 64
    2a6a:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2a6c:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2a6e:	3e 9a       	sbi	0x07, 6	; 7

}
    2a70:	08 95       	ret

00002a72 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2a72:	97 fd       	sbrc	r25, 7
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <spindle_run+0x8>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2a76:	2f 98       	cbi	0x05, 7	; 5
    2a78:	01 c0       	rjmp	.+2      	; 0x2a7c <spindle_run+0xa>
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2a7a:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2a7c:	80 91 02 01 	lds	r24, 0x0102
    2a80:	80 64       	ori	r24, 0x40	; 64
    2a82:	80 93 02 01 	sts	0x0102, r24
}
    2a86:	08 95       	ret

00002a88 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2a88:	e2 e0       	ldi	r30, 0x02	; 2
    2a8a:	f1 e0       	ldi	r31, 0x01	; 1
    2a8c:	80 81       	ld	r24, Z
    2a8e:	8f 7b       	andi	r24, 0xBF	; 191
    2a90:	80 83       	st	Z, r24
}
    2a92:	08 95       	ret

00002a94 <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a94:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a96:	40 e7       	ldi	r20, 0x70	; 112
    2a98:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2a9a:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a9c:	23 2f       	mov	r18, r19
    2a9e:	2a 95       	dec	r18
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2aa2:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2aa4:	fa 01       	movw	r30, r20
    2aa6:	31 97       	sbiw	r30, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	2f ef       	ldi	r18, 0xFF	; 255
    2aae:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab0:	92 07       	cpc	r25, r18
    2ab2:	99 f7       	brne	.-26     	; 0x2a9a <rotate_head+0x6>

}
    2ab4:	08 95       	ret

00002ab6 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2ab6:	ef e6       	ldi	r30, 0x6F	; 111
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	82 60       	ori	r24, 0x02	; 2
    2abe:	80 83       	st	Z, r24
}
    2ac0:	08 95       	ret

00002ac2 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	90 93 63 05 	sts	0x0563, r25
    2ac8:	80 93 62 05 	sts	0x0562, r24
}
    2acc:	08 95       	ret

00002ace <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2ace:	1f 92       	push	r1
    2ad0:	0f 92       	push	r0
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	0f 92       	push	r0
    2ad6:	11 24       	eor	r1, r1
    2ad8:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2ada:	81 b3       	in	r24, 0x11	; 17
    2adc:	8a 7c       	andi	r24, 0xCA	; 202
    2ade:	81 bb       	out	0x11, r24	; 17
}
    2ae0:	8f 91       	pop	r24
    2ae2:	0f 90       	pop	r0
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	0f 90       	pop	r0
    2ae8:	1f 90       	pop	r1
    2aea:	18 95       	reti

00002aec <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2aec:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2aee:	08 95       	ret

00002af0 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2af0:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2af2:	08 95       	ret

00002af4 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2af4:	3c 99       	sbic	0x07, 4	; 7
    2af6:	03 c0       	rjmp	.+6      	; 0x2afe <st_is_enabled+0xa>
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	07 c0       	rjmp	.+14     	; 0x2b0c <st_is_enabled+0x18>
    2afe:	88 b1       	in	r24, 0x08	; 8
    2b00:	82 95       	swap	r24
    2b02:	8f 70       	andi	r24, 0x0F	; 15
    2b04:	80 95       	com	r24
    2b06:	81 70       	andi	r24, 0x01	; 1
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2b0c:	c9 01       	movw	r24, r18
    2b0e:	08 95       	ret

00002b10 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2b10:	60 30       	cpi	r22, 0x00	; 0
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	72 07       	cpc	r23, r18
    2b16:	21 e0       	ldi	r18, 0x01	; 1
    2b18:	82 07       	cpc	r24, r18
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	92 07       	cpc	r25, r18
    2b1e:	30 f4       	brcc	.+12     	; 0x2b2c <config_step_timer+0x1c>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    2b20:	9b 01       	movw	r18, r22
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	e0 e0       	ldi	r30, 0x00	; 0
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	72 c0       	rjmp	.+228    	; 0x2c10 <config_step_timer+0x100>
	} else if (cycles <= 0x7ffffL) {
    2b2c:	60 30       	cpi	r22, 0x00	; 0
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	72 07       	cpc	r23, r18
    2b32:	28 e0       	ldi	r18, 0x08	; 8
    2b34:	82 07       	cpc	r24, r18
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	92 07       	cpc	r25, r18
    2b3a:	a0 f4       	brcc	.+40     	; 0x2b64 <config_step_timer+0x54>
    ceiling = cycles >> 3;
    2b3c:	b3 e0       	ldi	r27, 0x03	; 3
    2b3e:	96 95       	lsr	r25
    2b40:	87 95       	ror	r24
    2b42:	77 95       	ror	r23
    2b44:	67 95       	ror	r22
    2b46:	ba 95       	dec	r27
    2b48:	d1 f7       	brne	.-12     	; 0x2b3e <config_step_timer+0x2e>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2b4a:	9b 01       	movw	r18, r22
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	a3 e0       	ldi	r26, 0x03	; 3
    2b52:	22 0f       	add	r18, r18
    2b54:	33 1f       	adc	r19, r19
    2b56:	44 1f       	adc	r20, r20
    2b58:	55 1f       	adc	r21, r21
    2b5a:	aa 95       	dec	r26
    2b5c:	d1 f7       	brne	.-12     	; 0x2b52 <config_step_timer+0x42>
    2b5e:	e1 e0       	ldi	r30, 0x01	; 1
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	56 c0       	rjmp	.+172    	; 0x2c10 <config_step_timer+0x100>
	} else if (cycles <= 0x3fffffL) {
    2b64:	60 30       	cpi	r22, 0x00	; 0
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	72 07       	cpc	r23, r18
    2b6a:	20 e4       	ldi	r18, 0x40	; 64
    2b6c:	82 07       	cpc	r24, r18
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	92 07       	cpc	r25, r18
    2b72:	a0 f4       	brcc	.+40     	; 0x2b9c <config_step_timer+0x8c>
		ceiling =  cycles >> 6;
    2b74:	f6 e0       	ldi	r31, 0x06	; 6
    2b76:	96 95       	lsr	r25
    2b78:	87 95       	ror	r24
    2b7a:	77 95       	ror	r23
    2b7c:	67 95       	ror	r22
    2b7e:	fa 95       	dec	r31
    2b80:	d1 f7       	brne	.-12     	; 0x2b76 <config_step_timer+0x66>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    2b82:	9b 01       	movw	r18, r22
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	e6 e0       	ldi	r30, 0x06	; 6
    2b8a:	22 0f       	add	r18, r18
    2b8c:	33 1f       	adc	r19, r19
    2b8e:	44 1f       	adc	r20, r20
    2b90:	55 1f       	adc	r21, r21
    2b92:	ea 95       	dec	r30
    2b94:	d1 f7       	brne	.-12     	; 0x2b8a <config_step_timer+0x7a>
    2b96:	e2 e0       	ldi	r30, 0x02	; 2
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	3a c0       	rjmp	.+116    	; 0x2c10 <config_step_timer+0x100>
	} else if (cycles <= 0xffffffL) {
    2b9c:	60 30       	cpi	r22, 0x00	; 0
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	72 07       	cpc	r23, r18
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	82 07       	cpc	r24, r18
    2ba6:	21 e0       	ldi	r18, 0x01	; 1
    2ba8:	92 07       	cpc	r25, r18
    2baa:	70 f4       	brcc	.+28     	; 0x2bc8 <config_step_timer+0xb8>
		ceiling =  (cycles >> 8);
    2bac:	bb 27       	eor	r27, r27
    2bae:	a9 2f       	mov	r26, r25
    2bb0:	98 2f       	mov	r25, r24
    2bb2:	87 2f       	mov	r24, r23
    2bb4:	bc 01       	movw	r22, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    2bb6:	a0 e0       	ldi	r26, 0x00	; 0
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	22 27       	eor	r18, r18
    2bbc:	38 2f       	mov	r19, r24
    2bbe:	49 2f       	mov	r20, r25
    2bc0:	5a 2f       	mov	r21, r26
    2bc2:	e3 e0       	ldi	r30, 0x03	; 3
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	24 c0       	rjmp	.+72     	; 0x2c10 <config_step_timer+0x100>
	} else if (cycles <= 0x3ffffffL) {
    2bc8:	60 30       	cpi	r22, 0x00	; 0
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	72 07       	cpc	r23, r18
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	82 07       	cpc	r24, r18
    2bd2:	24 e0       	ldi	r18, 0x04	; 4
    2bd4:	92 07       	cpc	r25, r18
    2bd6:	48 f0       	brcs	.+18     	; 0x2bea <config_step_timer+0xda>
    2bd8:	6f ef       	ldi	r22, 0xFF	; 255
    2bda:	7f ef       	ldi	r23, 0xFF	; 255
    2bdc:	e4 e0       	ldi	r30, 0x04	; 4
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	3c ef       	ldi	r19, 0xFC	; 252
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	13 c0       	rjmp	.+38     	; 0x2c10 <config_step_timer+0x100>
		ceiling = (cycles >> 10);
    2bea:	2a e0       	ldi	r18, 0x0A	; 10
    2bec:	96 95       	lsr	r25
    2bee:	87 95       	ror	r24
    2bf0:	77 95       	ror	r23
    2bf2:	67 95       	ror	r22
    2bf4:	2a 95       	dec	r18
    2bf6:	d1 f7       	brne	.-12     	; 0x2bec <config_step_timer+0xdc>
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    2bf8:	9b 01       	movw	r18, r22
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	8a e0       	ldi	r24, 0x0A	; 10
    2c00:	22 0f       	add	r18, r18
    2c02:	33 1f       	adc	r19, r19
    2c04:	44 1f       	adc	r20, r20
    2c06:	55 1f       	adc	r21, r21
    2c08:	8a 95       	dec	r24
    2c0a:	d1 f7       	brne	.-12     	; 0x2c00 <config_step_timer+0xf0>
    2c0c:	e4 e0       	ldi	r30, 0x04	; 4
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    2c10:	80 91 81 00 	lds	r24, 0x0081
    2c14:	9e 2f       	mov	r25, r30
    2c16:	9f 5f       	subi	r25, 0xFF	; 255
    2c18:	88 7f       	andi	r24, 0xF8	; 248
    2c1a:	98 2b       	or	r25, r24
    2c1c:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    2c20:	70 93 89 00 	sts	0x0089, r23
    2c24:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}
    2c28:	b9 01       	movw	r22, r18
    2c2a:	ca 01       	movw	r24, r20
    2c2c:	08 95       	ret

00002c2e <set_step_events_per_minute>:

void set_step_events_per_minute(uint32_t steps_per_minute) {
    2c2e:	9b 01       	movw	r18, r22
    2c30:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    2c32:	20 3b       	cpi	r18, 0xB0	; 176
    2c34:	84 e0       	ldi	r24, 0x04	; 4
    2c36:	38 07       	cpc	r19, r24
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	48 07       	cpc	r20, r24
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	58 07       	cpc	r21, r24
    2c40:	20 f4       	brcc	.+8      	; 0x2c4a <set_step_events_per_minute+0x1c>
    2c42:	20 eb       	ldi	r18, 0xB0	; 176
    2c44:	34 e0       	ldi	r19, 0x04	; 4
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e7       	ldi	r23, 0x70	; 112
    2c4e:	88 e3       	ldi	r24, 0x38	; 56
    2c50:	99 e3       	ldi	r25, 0x39	; 57
    2c52:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodsi4>
    2c56:	ca 01       	movw	r24, r20
    2c58:	b9 01       	movw	r22, r18
    2c5a:	0e 94 88 15 	call	0x2b10	; 0x2b10 <config_step_timer>
    2c5e:	60 93 64 05 	sts	0x0564, r22
    2c62:	70 93 65 05 	sts	0x0565, r23
    2c66:	80 93 66 05 	sts	0x0566, r24
    2c6a:	90 93 67 05 	sts	0x0567, r25
}
    2c6e:	08 95       	ret

00002c70 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    2c70:	80 b3       	in	r24, 0x10	; 16
    2c72:	85 63       	ori	r24, 0x35	; 53
    2c74:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    2c76:	80 b3       	in	r24, 0x10	; 16
    2c78:	8a 6c       	ori	r24, 0xCA	; 202
    2c7a:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    2c7c:	81 b3       	in	r24, 0x11	; 17
    2c7e:	8a 7c       	andi	r24, 0xCA	; 202
    2c80:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2c82:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2c84:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    2c86:	e1 e8       	ldi	r30, 0x81	; 129
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8f 7e       	andi	r24, 0xEF	; 239
    2c8e:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2c90:	80 81       	ld	r24, Z
    2c92:	88 60       	ori	r24, 0x08	; 8
    2c94:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    2c96:	e0 e8       	ldi	r30, 0x80	; 128
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	8d 7f       	andi	r24, 0xFD	; 253
    2c9e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8e 7f       	andi	r24, 0xFE	; 254
    2ca4:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    2ca6:	80 81       	ld	r24, Z
    2ca8:	8f 73       	andi	r24, 0x3F	; 63
    2caa:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    2cac:	80 81       	ld	r24, Z
    2cae:	8f 7c       	andi	r24, 0xCF	; 207
    2cb0:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    2cb2:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    2cbc:	e0 e7       	ldi	r30, 0x70	; 112
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	81 60       	ori	r24, 0x01	; 1
    2cc4:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    2cc6:	60 e7       	ldi	r22, 0x70	; 112
    2cc8:	77 e1       	ldi	r23, 0x17	; 23
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2cd2:	ef e6       	ldi	r30, 0x6F	; 111
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	8d 7f       	andi	r24, 0xFD	; 253
    2cda:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    2cdc:	10 92 68 05 	sts	0x0568, r1
    2ce0:	10 92 69 05 	sts	0x0569, r1
    2ce4:	10 92 6a 05 	sts	0x056A, r1
    2ce8:	10 92 6b 05 	sts	0x056B, r1
  
  sei();
    2cec:	78 94       	sei
}
    2cee:	08 95       	ret

00002cf0 <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    2cf0:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2cf2:	81 b3       	in	r24, 0x11	; 17
    2cf4:	85 73       	andi	r24, 0x35	; 53
    2cf6:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cf8:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cfa:	40 e6       	ldi	r20, 0x60	; 96
    2cfc:	54 e0       	ldi	r21, 0x04	; 4
    2cfe:	13 c0       	rjmp	.+38     	; 0x2d26 <moveLeft+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    2d00:	21 50       	subi	r18, 0x01	; 1
    2d02:	30 40       	sbci	r19, 0x00	; 0
    2d04:	4b 9b       	sbis	0x09, 3	; 9
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <moveLeft+0x1c>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	08 95       	ret
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2d0c:	81 b3       	in	r24, 0x11	; 17
    2d0e:	8a 7c       	andi	r24, 0xCA	; 202
    2d10:	81 60       	ori	r24, 0x01	; 1
    2d12:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d14:	89 2f       	mov	r24, r25
    2d16:	8a 95       	dec	r24
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <moveLeft+0x26>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2d1a:	81 b3       	in	r24, 0x11	; 17
    2d1c:	8a 7c       	andi	r24, 0xCA	; 202
    2d1e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d20:	fa 01       	movw	r30, r20
    2d22:	31 97       	sbiw	r30, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <moveLeft+0x32>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2d26:	21 15       	cp	r18, r1
    2d28:	31 05       	cpc	r19, r1
    2d2a:	51 f7       	brne	.-44     	; 0x2d00 <moveLeft+0x10>
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    2d2e:	08 95       	ret

00002d30 <moveRight>:

unsigned char moveRight( unsigned int distance ) 
{
    2d30:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    2d32:	81 b3       	in	r24, 0x11	; 17
    2d34:	85 73       	andi	r24, 0x35	; 53
    2d36:	82 60       	ori	r24, 0x02	; 2
    2d38:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d3a:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d3c:	40 e6       	ldi	r20, 0x60	; 96
    2d3e:	54 e0       	ldi	r21, 0x04	; 4
    2d40:	13 c0       	rjmp	.+38     	; 0x2d68 <moveRight+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    2d42:	21 50       	subi	r18, 0x01	; 1
    2d44:	30 40       	sbci	r19, 0x00	; 0
    2d46:	4a 9b       	sbis	0x09, 2	; 9
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <moveRight+0x1e>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	08 95       	ret
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2d4e:	81 b3       	in	r24, 0x11	; 17
    2d50:	8a 7c       	andi	r24, 0xCA	; 202
    2d52:	81 60       	ori	r24, 0x01	; 1
    2d54:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d56:	89 2f       	mov	r24, r25
    2d58:	8a 95       	dec	r24
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <moveRight+0x28>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    2d5c:	81 b3       	in	r24, 0x11	; 17
    2d5e:	8a 7c       	andi	r24, 0xCA	; 202
    2d60:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d62:	fa 01       	movw	r30, r20
    2d64:	31 97       	sbiw	r30, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <moveRight+0x34>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2d68:	21 15       	cp	r18, r1
    2d6a:	31 05       	cpc	r19, r1
    2d6c:	51 f7       	brne	.-44     	; 0x2d42 <moveRight+0x12>
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2d70:	08 95       	ret

00002d72 <moveForward>:

unsigned char moveForward( unsigned int distance ) 
{
    2d72:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2d74:	81 b3       	in	r24, 0x11	; 17
    2d76:	85 73       	andi	r24, 0x35	; 53
    2d78:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d7a:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d7c:	40 e6       	ldi	r20, 0x60	; 96
    2d7e:	54 e0       	ldi	r21, 0x04	; 4
    2d80:	13 c0       	rjmp	.+38     	; 0x2da8 <moveForward+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    2d82:	21 50       	subi	r18, 0x01	; 1
    2d84:	30 40       	sbci	r19, 0x00	; 0
    2d86:	48 9b       	sbis	0x09, 0	; 9
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <moveForward+0x1c>
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	08 95       	ret
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2d8e:	81 b3       	in	r24, 0x11	; 17
    2d90:	8a 7c       	andi	r24, 0xCA	; 202
    2d92:	84 60       	ori	r24, 0x04	; 4
    2d94:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d96:	89 2f       	mov	r24, r25
    2d98:	8a 95       	dec	r24
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <moveForward+0x26>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2d9c:	81 b3       	in	r24, 0x11	; 17
    2d9e:	8a 7c       	andi	r24, 0xCA	; 202
    2da0:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2da2:	fa 01       	movw	r30, r20
    2da4:	31 97       	sbiw	r30, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <moveForward+0x32>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2da8:	21 15       	cp	r18, r1
    2daa:	31 05       	cpc	r19, r1
    2dac:	51 f7       	brne	.-44     	; 0x2d82 <moveForward+0x10>
    2dae:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2db0:	08 95       	ret

00002db2 <moveBack>:

unsigned char moveBack( unsigned int distance ) 
{
    2db2:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    2db4:	81 b3       	in	r24, 0x11	; 17
    2db6:	85 73       	andi	r24, 0x35	; 53
    2db8:	88 60       	ori	r24, 0x08	; 8
    2dba:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dbc:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dbe:	40 e6       	ldi	r20, 0x60	; 96
    2dc0:	54 e0       	ldi	r21, 0x04	; 4
    2dc2:	13 c0       	rjmp	.+38     	; 0x2dea <moveBack+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    2dc4:	21 50       	subi	r18, 0x01	; 1
    2dc6:	30 40       	sbci	r19, 0x00	; 0
    2dc8:	49 9b       	sbis	0x09, 1	; 9
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <moveBack+0x1e>
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	08 95       	ret
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2dd0:	81 b3       	in	r24, 0x11	; 17
    2dd2:	8a 7c       	andi	r24, 0xCA	; 202
    2dd4:	84 60       	ori	r24, 0x04	; 4
    2dd6:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dd8:	89 2f       	mov	r24, r25
    2dda:	8a 95       	dec	r24
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <moveBack+0x28>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2dde:	81 b3       	in	r24, 0x11	; 17
    2de0:	8a 7c       	andi	r24, 0xCA	; 202
    2de2:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2de4:	fa 01       	movw	r30, r20
    2de6:	31 97       	sbiw	r30, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <moveBack+0x34>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2dea:	21 15       	cp	r18, r1
    2dec:	31 05       	cpc	r19, r1
    2dee:	51 f7       	brne	.-44     	; 0x2dc4 <moveBack+0x12>
    2df0:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    2df2:	08 95       	ret

00002df4 <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED();
    2df4:	80 91 6f 00 	lds	r24, 0x006F
}
    2df8:	82 70       	andi	r24, 0x02	; 2
    2dfa:	08 95       	ret

00002dfc <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    2dfc:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    2e02:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    2e04:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    2e06:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    2e08:	9f e8       	ldi	r25, 0x8F	; 143
    2e0a:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    2e0c:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    2e0e:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    2e12:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    2e16:	3f ec       	ldi	r19, 0xCF	; 207
    2e18:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    2e1c:	20 ef       	ldi	r18, 0xF0	; 240
    2e1e:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    2e22:	8c e9       	ldi	r24, 0x9C	; 156
    2e24:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    2e26:	82 e2       	ldi	r24, 0x22	; 34
    2e28:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    2e2a:	83 e1       	ldi	r24, 0x13	; 19
    2e2c:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    2e2e:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    2e30:	80 e3       	ldi	r24, 0x30	; 48
    2e32:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    2e34:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    2e36:	83 e2       	ldi	r24, 0x23	; 35
    2e38:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    2e3a:	83 e0       	ldi	r24, 0x03	; 3
    2e3c:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    2e40:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    2e44:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    2e48:	20 93 0b 01 	sts	0x010B, r18
}
    2e4c:	08 95       	ret

00002e4e <st_go_home>:

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    2e4e:	10 92 4a 05 	sts	0x054A, r1

// reset position machine thinks we are at.
	plan_init();
    2e52:	0e 94 c8 0b 	call	0x1790	; 0x1790 <plan_init>
	gc_init();
    2e56:	0e 94 b9 04 	call	0x972	; 0x972 <gc_init>

	// no interrupts
	cli();
    2e5a:	f8 94       	cli

	// if head down, set head up
	if( is_head_down() ) {
    2e5c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <is_head_down>
    2e60:	88 23       	and	r24, r24
    2e62:	69 f0       	breq	.+26     	; 0x2e7e <st_go_home+0x30>
		head_down(0);
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
		
		//check again
		if(is_head_down() ){
    2e6c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <is_head_down>
    2e70:	88 23       	and	r24, r24
    2e72:	29 f0       	breq	.+10     	; 0x2e7e <st_go_home+0x30>
			printPgmString(PSTR("home failed\r\n"));
    2e74:	81 ec       	ldi	r24, 0xC1	; 193
    2e76:	94 e0       	ldi	r25, 0x04	; 4
    2e78:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
    2e7c:	08 95       	ret
		}

	}

	// tool changer off
	atc_change(0);	
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <atc_change>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    2e86:	4b 9b       	sbis	0x09, 3	; 9
    2e88:	16 c0       	rjmp	.+44     	; 0x2eb6 <st_go_home+0x68>
		// no longer homed
		gHomed = FALSE;
    2e8a:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("xLimit1\r\n"));
    2e8e:	8f ec       	ldi	r24, 0xCF	; 207
    2e90:	94 e0       	ldi	r25, 0x04	; 4
    2e92:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    2e96:	88 ee       	ldi	r24, 0xE8	; 232
    2e98:	93 e0       	ldi	r25, 0x03	; 3
    2e9a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <moveRight>
    2e9e:	88 23       	and	r24, r24
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <st_go_home+0x56>
    2ea2:	44 c0       	rjmp	.+136    	; 0x2f2c <st_go_home+0xde>
			return;
    2ea4:	80 ed       	ldi	r24, 0xD0	; 208
    2ea6:	97 e0       	ldi	r25, 0x07	; 7
    2ea8:	20 e9       	ldi	r18, 0x90	; 144
    2eaa:	31 e0       	ldi	r19, 0x01	; 1
    2eac:	f9 01       	movw	r30, r18
    2eae:	31 97       	sbiw	r30, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <st_go_home+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	d9 f7       	brne	.-10     	; 0x2eac <st_go_home+0x5e>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    2eb6:	48 9b       	sbis	0x09, 0	; 9
    2eb8:	15 c0       	rjmp	.+42     	; 0x2ee4 <st_go_home+0x96>
		// no longer homed
		gHomed = FALSE;
    2eba:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("yLimit1\r\n"));
    2ebe:	89 ed       	ldi	r24, 0xD9	; 217
    2ec0:	94 e0       	ldi	r25, 0x04	; 4
    2ec2:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    2ec6:	88 ee       	ldi	r24, 0xE8	; 232
    2ec8:	93 e0       	ldi	r25, 0x03	; 3
    2eca:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <moveBack>
    2ece:	88 23       	and	r24, r24
    2ed0:	69 f1       	breq	.+90     	; 0x2f2c <st_go_home+0xde>
			return;
    2ed2:	80 ed       	ldi	r24, 0xD0	; 208
    2ed4:	97 e0       	ldi	r25, 0x07	; 7
    2ed6:	20 e9       	ldi	r18, 0x90	; 144
    2ed8:	31 e0       	ldi	r19, 0x01	; 1
    2eda:	f9 01       	movw	r30, r18
    2edc:	31 97       	sbiw	r30, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <st_go_home+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee2:	d9 f7       	brne	.-10     	; 0x2eda <st_go_home+0x8c>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    2ee4:	04 99       	sbic	0x00, 4	; 0
    2ee6:	07 c0       	rjmp	.+14     	; 0x2ef6 <st_go_home+0xa8>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <moveLeft>
    2ef0:	88 23       	and	r24, r24
    2ef2:	c1 f7       	brne	.-16     	; 0x2ee4 <st_go_home+0x96>
    2ef4:	11 c0       	rjmp	.+34     	; 0x2f18 <st_go_home+0xca>
    2ef6:	80 ed       	ldi	r24, 0xD0	; 208
    2ef8:	97 e0       	ldi	r25, 0x07	; 7
    2efa:	20 e9       	ldi	r18, 0x90	; 144
    2efc:	31 e0       	ldi	r19, 0x01	; 1
    2efe:	f9 01       	movw	r30, r18
    2f00:	31 97       	sbiw	r30, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <st_go_home+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f04:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f06:	d9 f7       	brne	.-10     	; 0x2efe <st_go_home+0xb0>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    2f08:	90 99       	sbic	0x12, 0	; 18
    2f0a:	06 c0       	rjmp	.+12     	; 0x2f18 <st_go_home+0xca>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <moveForward>
    2f14:	88 23       	and	r24, r24
    2f16:	c1 f7       	brne	.-16     	; 0x2f08 <st_go_home+0xba>

error:;



	sei();
    2f18:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    2f1a:	89 b1       	in	r24, 0x09	; 9
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	8f 70       	andi	r24, 0x0F	; 15
    2f20:	90 70       	andi	r25, 0x00	; 0
    2f22:	89 2b       	or	r24, r25
    2f24:	19 f4       	brne	.+6      	; 0x2f2c <st_go_home+0xde>
		gHomed = TRUE ;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	80 93 4a 05 	sts	0x054A, r24
    2f2c:	08 95       	ret

00002f2e <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    2f2e:	07 c0       	rjmp	.+14     	; 0x2f3e <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    2f30:	83 b7       	in	r24, 0x33	; 51
    2f32:	81 60       	ori	r24, 0x01	; 1
    2f34:	83 bf       	out	0x33, r24	; 51
    2f36:	88 95       	sleep
    2f38:	83 b7       	in	r24, 0x33	; 51
    2f3a:	8e 7f       	andi	r24, 0xFE	; 254
    2f3c:	83 bf       	out	0x33, r24	; 51
    2f3e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <plan_get_current_block>
    2f42:	89 2b       	or	r24, r25
    2f44:	a9 f7       	brne	.-22     	; 0x2f30 <st_synchronize+0x2>
}
    2f46:	08 95       	ret

00002f48 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    2f48:	1f 92       	push	r1
    2f4a:	0f 92       	push	r0
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	0f 92       	push	r0
    2f50:	0b b6       	in	r0, 0x3b	; 59
    2f52:	0f 92       	push	r0
    2f54:	11 24       	eor	r1, r1
    2f56:	ef 92       	push	r14
    2f58:	ff 92       	push	r15
    2f5a:	0f 93       	push	r16
    2f5c:	1f 93       	push	r17
    2f5e:	2f 93       	push	r18
    2f60:	3f 93       	push	r19
    2f62:	4f 93       	push	r20
    2f64:	5f 93       	push	r21
    2f66:	6f 93       	push	r22
    2f68:	7f 93       	push	r23
    2f6a:	8f 93       	push	r24
    2f6c:	9f 93       	push	r25
    2f6e:	af 93       	push	r26
    2f70:	bf 93       	push	r27
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	ef 93       	push	r30
    2f78:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE ) 
    2f7a:	80 91 4a 05 	lds	r24, 0x054A
    2f7e:	88 23       	and	r24, r24
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <__vector_17+0x3c>
    2f82:	71 c2       	rjmp	.+1250   	; 0x3466 <__vector_17+0x51e>
		return;

// don't move if the head is down  
  if( is_head_down() )
    2f84:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <is_head_down>
    2f88:	88 23       	and	r24, r24
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <__vector_17+0x46>
    2f8c:	6c c2       	rjmp	.+1240   	; 0x3466 <__vector_17+0x51e>
  	return;

  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    2f8e:	80 91 62 05 	lds	r24, 0x0562
    2f92:	90 91 63 05 	lds	r25, 0x0563
    2f96:	89 2b       	or	r24, r25
    2f98:	09 f0       	breq	.+2      	; 0x2f9c <__vector_17+0x54>
    2f9a:	65 c2       	rjmp	.+1226   	; 0x3466 <__vector_17+0x51e>

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    2f9c:	89 b1       	in	r24, 0x09	; 9
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	8f 70       	andi	r24, 0x0F	; 15
    2fa2:	90 70       	andi	r25, 0x00	; 0
    2fa4:	89 2b       	or	r24, r25
    2fa6:	19 f0       	breq	.+6      	; 0x2fae <__vector_17+0x66>
  	gHomed = FALSE ;
    2fa8:	10 92 4a 05 	sts	0x054A, r1
    2fac:	5c c2       	rjmp	.+1208   	; 0x3466 <__vector_17+0x51e>
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    2fae:	91 b3       	in	r25, 0x11	; 17
    2fb0:	80 91 9a 06 	lds	r24, 0x069A
    2fb4:	8a 7c       	andi	r24, 0xCA	; 202
    2fb6:	95 73       	andi	r25, 0x35	; 53
    2fb8:	89 2b       	or	r24, r25
    2fba:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    2fbc:	81 b3       	in	r24, 0x11	; 17
    2fbe:	8a 7c       	andi	r24, 0xCA	; 202
    2fc0:	90 91 4d 05 	lds	r25, 0x054D
    2fc4:	89 2b       	or	r24, r25
    2fc6:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    2fc8:	80 91 85 06 	lds	r24, 0x0685
    2fcc:	88 0f       	add	r24, r24
    2fce:	84 50       	subi	r24, 0x04	; 4
    2fd0:	81 95       	neg	r24
    2fd2:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    2fd6:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	90 93 63 05 	sts	0x0563, r25
    2fe0:	80 93 62 05 	sts	0x0562, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    2fe4:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    2fe6:	80 91 4b 05 	lds	r24, 0x054B
    2fea:	90 91 4c 05 	lds	r25, 0x054C
    2fee:	89 2b       	or	r24, r25
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <__vector_17+0xac>
    2ff2:	5d c0       	rjmp	.+186    	; 0x30ae <__vector_17+0x166>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    2ff4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <plan_get_current_block>
    2ff8:	ec 01       	movw	r28, r24
    2ffa:	90 93 4c 05 	sts	0x054C, r25
    2ffe:	80 93 4b 05 	sts	0x054B, r24
    if (current_block != NULL) {
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	09 f4       	brne	.+2      	; 0x3008 <__vector_17+0xc0>
    3006:	4e c0       	rjmp	.+156    	; 0x30a4 <__vector_17+0x15c>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3008:	6d a9       	ldd	r22, Y+53	; 0x35
    300a:	7e a9       	ldd	r23, Y+54	; 0x36
    300c:	8f a9       	ldd	r24, Y+55	; 0x37
    300e:	98 ad       	ldd	r25, Y+56	; 0x38
    3010:	60 93 6c 05 	sts	0x056C, r22
    3014:	70 93 6d 05 	sts	0x056D, r23
    3018:	80 93 6e 05 	sts	0x056E, r24
    301c:	90 93 6f 05 	sts	0x056F, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    3020:	10 92 68 05 	sts	0x0568, r1
    3024:	10 92 69 05 	sts	0x0569, r1
    3028:	10 92 6a 05 	sts	0x056A, r1
    302c:	10 92 6b 05 	sts	0x056B, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    3030:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    3034:	89 89       	ldd	r24, Y+17	; 0x11
    3036:	9a 89       	ldd	r25, Y+18	; 0x12
    3038:	ab 89       	ldd	r26, Y+19	; 0x13
    303a:	bc 89       	ldd	r27, Y+20	; 0x14
    303c:	b5 95       	asr	r27
    303e:	a7 95       	ror	r26
    3040:	97 95       	ror	r25
    3042:	87 95       	ror	r24
    3044:	b0 95       	com	r27
    3046:	a0 95       	com	r26
    3048:	90 95       	com	r25
    304a:	81 95       	neg	r24
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	af 4f       	sbci	r26, 0xFF	; 255
    3050:	bf 4f       	sbci	r27, 0xFF	; 255
    3052:	80 93 4e 05 	sts	0x054E, r24
    3056:	90 93 4f 05 	sts	0x054F, r25
    305a:	a0 93 50 05 	sts	0x0550, r26
    305e:	b0 93 51 05 	sts	0x0551, r27
      counter_y = counter_x;
    3062:	80 93 52 05 	sts	0x0552, r24
    3066:	90 93 53 05 	sts	0x0553, r25
    306a:	a0 93 54 05 	sts	0x0554, r26
    306e:	b0 93 55 05 	sts	0x0555, r27
      counter_z = counter_x;
    3072:	80 93 56 05 	sts	0x0556, r24
    3076:	90 93 57 05 	sts	0x0557, r25
    307a:	a0 93 58 05 	sts	0x0558, r26
    307e:	b0 93 59 05 	sts	0x0559, r27
      counter_c = counter_x;
    3082:	80 93 5a 05 	sts	0x055A, r24
    3086:	90 93 5b 05 	sts	0x055B, r25
    308a:	a0 93 5c 05 	sts	0x055C, r26
    308e:	b0 93 5d 05 	sts	0x055D, r27
      step_events_completed = 0;
    3092:	10 92 5e 05 	sts	0x055E, r1
    3096:	10 92 5f 05 	sts	0x055F, r1
    309a:	10 92 60 05 	sts	0x0560, r1
    309e:	10 92 61 05 	sts	0x0561, r1
    30a2:	05 c0       	rjmp	.+10     	; 0x30ae <__vector_17+0x166>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    30a4:	80 91 6f 00 	lds	r24, 0x006F
    30a8:	8d 7f       	andi	r24, 0xFD	; 253
    30aa:	80 93 6f 00 	sts	0x006F, r24
    }    
  } 

  if (current_block != NULL) {
    30ae:	e0 91 4b 05 	lds	r30, 0x054B
    30b2:	f0 91 4c 05 	lds	r31, 0x054C
    30b6:	30 97       	sbiw	r30, 0x00	; 0
    30b8:	09 f4       	brne	.+2      	; 0x30bc <__vector_17+0x174>
    30ba:	ee c0       	rjmp	.+476    	; 0x3298 <__vector_17+0x350>
    dir_bits = current_block->direction_bits;
    30bc:	80 89       	ldd	r24, Z+16	; 0x10
    30be:	80 93 9a 06 	sts	0x069A, r24
    out_bits = 0;
    30c2:	10 92 4d 05 	sts	0x054D, r1
    counter_x += current_block->steps_x;
    30c6:	20 91 4e 05 	lds	r18, 0x054E
    30ca:	30 91 4f 05 	lds	r19, 0x054F
    30ce:	40 91 50 05 	lds	r20, 0x0550
    30d2:	50 91 51 05 	lds	r21, 0x0551
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	a2 81       	ldd	r26, Z+2	; 0x02
    30dc:	b3 81       	ldd	r27, Z+3	; 0x03
    30de:	28 0f       	add	r18, r24
    30e0:	39 1f       	adc	r19, r25
    30e2:	4a 1f       	adc	r20, r26
    30e4:	5b 1f       	adc	r21, r27
    30e6:	20 93 4e 05 	sts	0x054E, r18
    30ea:	30 93 4f 05 	sts	0x054F, r19
    30ee:	40 93 50 05 	sts	0x0550, r20
    30f2:	50 93 51 05 	sts	0x0551, r21
    if (counter_x > 0) {
    30f6:	12 16       	cp	r1, r18
    30f8:	13 06       	cpc	r1, r19
    30fa:	14 06       	cpc	r1, r20
    30fc:	15 06       	cpc	r1, r21
    30fe:	9c f4       	brge	.+38     	; 0x3126 <__vector_17+0x1de>
      out_bits |= (1<<X_STEP_BIT);
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	80 93 4d 05 	sts	0x054D, r24
      counter_x -= current_block->step_event_count;
    3106:	81 89       	ldd	r24, Z+17	; 0x11
    3108:	92 89       	ldd	r25, Z+18	; 0x12
    310a:	a3 89       	ldd	r26, Z+19	; 0x13
    310c:	b4 89       	ldd	r27, Z+20	; 0x14
    310e:	28 1b       	sub	r18, r24
    3110:	39 0b       	sbc	r19, r25
    3112:	4a 0b       	sbc	r20, r26
    3114:	5b 0b       	sbc	r21, r27
    3116:	20 93 4e 05 	sts	0x054E, r18
    311a:	30 93 4f 05 	sts	0x054F, r19
    311e:	40 93 50 05 	sts	0x0550, r20
    3122:	50 93 51 05 	sts	0x0551, r21
    }
    counter_y += current_block->steps_y;
    3126:	20 91 52 05 	lds	r18, 0x0552
    312a:	30 91 53 05 	lds	r19, 0x0553
    312e:	40 91 54 05 	lds	r20, 0x0554
    3132:	50 91 55 05 	lds	r21, 0x0555
    3136:	84 81       	ldd	r24, Z+4	; 0x04
    3138:	95 81       	ldd	r25, Z+5	; 0x05
    313a:	a6 81       	ldd	r26, Z+6	; 0x06
    313c:	b7 81       	ldd	r27, Z+7	; 0x07
    313e:	28 0f       	add	r18, r24
    3140:	39 1f       	adc	r19, r25
    3142:	4a 1f       	adc	r20, r26
    3144:	5b 1f       	adc	r21, r27
    3146:	20 93 52 05 	sts	0x0552, r18
    314a:	30 93 53 05 	sts	0x0553, r19
    314e:	40 93 54 05 	sts	0x0554, r20
    3152:	50 93 55 05 	sts	0x0555, r21
    if (counter_y > 0) {
    3156:	12 16       	cp	r1, r18
    3158:	13 06       	cpc	r1, r19
    315a:	14 06       	cpc	r1, r20
    315c:	15 06       	cpc	r1, r21
    315e:	ac f4       	brge	.+42     	; 0x318a <__vector_17+0x242>
      out_bits |= (1<<Y_STEP_BIT);
    3160:	80 91 4d 05 	lds	r24, 0x054D
    3164:	84 60       	ori	r24, 0x04	; 4
    3166:	80 93 4d 05 	sts	0x054D, r24
      counter_y -= current_block->step_event_count;
    316a:	81 89       	ldd	r24, Z+17	; 0x11
    316c:	92 89       	ldd	r25, Z+18	; 0x12
    316e:	a3 89       	ldd	r26, Z+19	; 0x13
    3170:	b4 89       	ldd	r27, Z+20	; 0x14
    3172:	28 1b       	sub	r18, r24
    3174:	39 0b       	sbc	r19, r25
    3176:	4a 0b       	sbc	r20, r26
    3178:	5b 0b       	sbc	r21, r27
    317a:	20 93 52 05 	sts	0x0552, r18
    317e:	30 93 53 05 	sts	0x0553, r19
    3182:	40 93 54 05 	sts	0x0554, r20
    3186:	50 93 55 05 	sts	0x0555, r21
    }
    counter_z += current_block->steps_z;
    318a:	20 91 56 05 	lds	r18, 0x0556
    318e:	30 91 57 05 	lds	r19, 0x0557
    3192:	40 91 58 05 	lds	r20, 0x0558
    3196:	50 91 59 05 	lds	r21, 0x0559
    319a:	80 85       	ldd	r24, Z+8	; 0x08
    319c:	91 85       	ldd	r25, Z+9	; 0x09
    319e:	a2 85       	ldd	r26, Z+10	; 0x0a
    31a0:	b3 85       	ldd	r27, Z+11	; 0x0b
    31a2:	28 0f       	add	r18, r24
    31a4:	39 1f       	adc	r19, r25
    31a6:	4a 1f       	adc	r20, r26
    31a8:	5b 1f       	adc	r21, r27
    31aa:	20 93 56 05 	sts	0x0556, r18
    31ae:	30 93 57 05 	sts	0x0557, r19
    31b2:	40 93 58 05 	sts	0x0558, r20
    31b6:	50 93 59 05 	sts	0x0559, r21
    if (counter_z > 0) {
    31ba:	12 16       	cp	r1, r18
    31bc:	13 06       	cpc	r1, r19
    31be:	14 06       	cpc	r1, r20
    31c0:	15 06       	cpc	r1, r21
    31c2:	ac f4       	brge	.+42     	; 0x31ee <__vector_17+0x2a6>
      out_bits |= (1<<Z_STEP_BIT);
    31c4:	80 91 4d 05 	lds	r24, 0x054D
    31c8:	80 61       	ori	r24, 0x10	; 16
    31ca:	80 93 4d 05 	sts	0x054D, r24
      counter_z -= current_block->step_event_count;
    31ce:	81 89       	ldd	r24, Z+17	; 0x11
    31d0:	92 89       	ldd	r25, Z+18	; 0x12
    31d2:	a3 89       	ldd	r26, Z+19	; 0x13
    31d4:	b4 89       	ldd	r27, Z+20	; 0x14
    31d6:	28 1b       	sub	r18, r24
    31d8:	39 0b       	sbc	r19, r25
    31da:	4a 0b       	sbc	r20, r26
    31dc:	5b 0b       	sbc	r21, r27
    31de:	20 93 56 05 	sts	0x0556, r18
    31e2:	30 93 57 05 	sts	0x0557, r19
    31e6:	40 93 58 05 	sts	0x0558, r20
    31ea:	50 93 59 05 	sts	0x0559, r21
    }
    counter_c += current_block->steps_c;
    31ee:	20 91 5a 05 	lds	r18, 0x055A
    31f2:	30 91 5b 05 	lds	r19, 0x055B
    31f6:	40 91 5c 05 	lds	r20, 0x055C
    31fa:	50 91 5d 05 	lds	r21, 0x055D
    31fe:	84 85       	ldd	r24, Z+12	; 0x0c
    3200:	95 85       	ldd	r25, Z+13	; 0x0d
    3202:	a6 85       	ldd	r26, Z+14	; 0x0e
    3204:	b7 85       	ldd	r27, Z+15	; 0x0f
    3206:	28 0f       	add	r18, r24
    3208:	39 1f       	adc	r19, r25
    320a:	4a 1f       	adc	r20, r26
    320c:	5b 1f       	adc	r21, r27
    320e:	20 93 5a 05 	sts	0x055A, r18
    3212:	30 93 5b 05 	sts	0x055B, r19
    3216:	40 93 5c 05 	sts	0x055C, r20
    321a:	50 93 5d 05 	sts	0x055D, r21
    if (counter_c > 0) {
    321e:	12 16       	cp	r1, r18
    3220:	13 06       	cpc	r1, r19
    3222:	14 06       	cpc	r1, r20
    3224:	15 06       	cpc	r1, r21
    3226:	ac f4       	brge	.+42     	; 0x3252 <__vector_17+0x30a>
      out_bits |= (1<<C_STEP_BIT);
    3228:	80 91 4d 05 	lds	r24, 0x054D
    322c:	80 62       	ori	r24, 0x20	; 32
    322e:	80 93 4d 05 	sts	0x054D, r24
      counter_c -= current_block->step_event_count;
    3232:	81 89       	ldd	r24, Z+17	; 0x11
    3234:	92 89       	ldd	r25, Z+18	; 0x12
    3236:	a3 89       	ldd	r26, Z+19	; 0x13
    3238:	b4 89       	ldd	r27, Z+20	; 0x14
    323a:	28 1b       	sub	r18, r24
    323c:	39 0b       	sbc	r19, r25
    323e:	4a 0b       	sbc	r20, r26
    3240:	5b 0b       	sbc	r21, r27
    3242:	20 93 5a 05 	sts	0x055A, r18
    3246:	30 93 5b 05 	sts	0x055B, r19
    324a:	40 93 5c 05 	sts	0x055C, r20
    324e:	50 93 5d 05 	sts	0x055D, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3252:	80 91 5e 05 	lds	r24, 0x055E
    3256:	90 91 5f 05 	lds	r25, 0x055F
    325a:	a0 91 60 05 	lds	r26, 0x0560
    325e:	b0 91 61 05 	lds	r27, 0x0561
    3262:	01 96       	adiw	r24, 0x01	; 1
    3264:	a1 1d       	adc	r26, r1
    3266:	b1 1d       	adc	r27, r1
    3268:	80 93 5e 05 	sts	0x055E, r24
    326c:	90 93 5f 05 	sts	0x055F, r25
    3270:	a0 93 60 05 	sts	0x0560, r26
    3274:	b0 93 61 05 	sts	0x0561, r27
    if (step_events_completed >= current_block->step_event_count) {
    3278:	21 89       	ldd	r18, Z+17	; 0x11
    327a:	32 89       	ldd	r19, Z+18	; 0x12
    327c:	43 89       	ldd	r20, Z+19	; 0x13
    327e:	54 89       	ldd	r21, Z+20	; 0x14
    3280:	82 17       	cp	r24, r18
    3282:	93 07       	cpc	r25, r19
    3284:	a4 07       	cpc	r26, r20
    3286:	b5 07       	cpc	r27, r21
    3288:	48 f0       	brcs	.+18     	; 0x329c <__vector_17+0x354>
      current_block = NULL;
    328a:	10 92 4c 05 	sts	0x054C, r1
    328e:	10 92 4b 05 	sts	0x054B, r1
      plan_discard_current_block();
    3292:	0e 94 32 0a 	call	0x1464	; 0x1464 <plan_discard_current_block>
    3296:	02 c0       	rjmp	.+4      	; 0x329c <__vector_17+0x354>
    }
  } else {
    out_bits = 0;
    3298:	10 92 4d 05 	sts	0x054D, r1
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    329c:	80 91 9a 06 	lds	r24, 0x069A
    32a0:	9a e0       	ldi	r25, 0x0A	; 10
    32a2:	89 27       	eor	r24, r25
    32a4:	80 93 9a 06 	sts	0x069A, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    32a8:	20 91 64 05 	lds	r18, 0x0564
    32ac:	30 91 65 05 	lds	r19, 0x0565
    32b0:	40 91 66 05 	lds	r20, 0x0566
    32b4:	50 91 67 05 	lds	r21, 0x0567
    32b8:	80 91 68 05 	lds	r24, 0x0568
    32bc:	90 91 69 05 	lds	r25, 0x0569
    32c0:	a0 91 6a 05 	lds	r26, 0x056A
    32c4:	b0 91 6b 05 	lds	r27, 0x056B
    32c8:	28 0f       	add	r18, r24
    32ca:	39 1f       	adc	r19, r25
    32cc:	4a 1f       	adc	r20, r26
    32ce:	5b 1f       	adc	r21, r27
    32d0:	20 93 68 05 	sts	0x0568, r18
    32d4:	30 93 69 05 	sts	0x0569, r19
    32d8:	40 93 6a 05 	sts	0x056A, r20
    32dc:	50 93 6b 05 	sts	0x056B, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    32e0:	21 38       	cpi	r18, 0x81	; 129
    32e2:	8a e1       	ldi	r24, 0x1A	; 26
    32e4:	38 07       	cpc	r19, r24
    32e6:	86 e0       	ldi	r24, 0x06	; 6
    32e8:	48 07       	cpc	r20, r24
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	58 07       	cpc	r21, r24
    32ee:	08 f4       	brcc	.+2      	; 0x32f2 <__vector_17+0x3aa>
    32f0:	b6 c0       	rjmp	.+364    	; 0x345e <__vector_17+0x516>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    32f2:	20 58       	subi	r18, 0x80	; 128
    32f4:	3a 41       	sbci	r19, 0x1A	; 26
    32f6:	46 40       	sbci	r20, 0x06	; 6
    32f8:	50 40       	sbci	r21, 0x00	; 0
    32fa:	20 93 68 05 	sts	0x0568, r18
    32fe:	30 93 69 05 	sts	0x0569, r19
    3302:	40 93 6a 05 	sts	0x056A, r20
    3306:	50 93 6b 05 	sts	0x056B, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    330a:	e0 91 4b 05 	lds	r30, 0x054B
    330e:	f0 91 4c 05 	lds	r31, 0x054C
    3312:	30 97       	sbiw	r30, 0x00	; 0
    3314:	09 f4       	brne	.+2      	; 0x3318 <__vector_17+0x3d0>
    3316:	a3 c0       	rjmp	.+326    	; 0x345e <__vector_17+0x516>
    if (step_events_completed < current_block->accelerate_until) {
    3318:	e0 90 5e 05 	lds	r14, 0x055E
    331c:	f0 90 5f 05 	lds	r15, 0x055F
    3320:	00 91 60 05 	lds	r16, 0x0560
    3324:	10 91 61 05 	lds	r17, 0x0561
    3328:	ef 5b       	subi	r30, 0xBF	; 191
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 81       	ld	r24, Z
    332e:	91 81       	ldd	r25, Z+1	; 0x01
    3330:	a2 81       	ldd	r26, Z+2	; 0x02
    3332:	b3 81       	ldd	r27, Z+3	; 0x03
    3334:	e1 54       	subi	r30, 0x41	; 65
    3336:	f0 40       	sbci	r31, 0x00	; 0
    3338:	e8 16       	cp	r14, r24
    333a:	f9 06       	cpc	r15, r25
    333c:	0a 07       	cpc	r16, r26
    333e:	1b 07       	cpc	r17, r27
    3340:	68 f5       	brcc	.+90     	; 0x339c <__vector_17+0x454>
      trapezoid_adjusted_rate += current_block->rate_delta;
    3342:	fd 96       	adiw	r30, 0x3d	; 61
    3344:	20 81       	ld	r18, Z
    3346:	31 81       	ldd	r19, Z+1	; 0x01
    3348:	42 81       	ldd	r20, Z+2	; 0x02
    334a:	53 81       	ldd	r21, Z+3	; 0x03
    334c:	fd 97       	sbiw	r30, 0x3d	; 61
    334e:	80 91 6c 05 	lds	r24, 0x056C
    3352:	90 91 6d 05 	lds	r25, 0x056D
    3356:	a0 91 6e 05 	lds	r26, 0x056E
    335a:	b0 91 6f 05 	lds	r27, 0x056F
    335e:	28 0f       	add	r18, r24
    3360:	39 1f       	adc	r19, r25
    3362:	4a 1f       	adc	r20, r26
    3364:	5b 1f       	adc	r21, r27
    3366:	20 93 6c 05 	sts	0x056C, r18
    336a:	30 93 6d 05 	sts	0x056D, r19
    336e:	40 93 6e 05 	sts	0x056E, r20
    3372:	50 93 6f 05 	sts	0x056F, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3376:	85 89       	ldd	r24, Z+21	; 0x15
    3378:	96 89       	ldd	r25, Z+22	; 0x16
    337a:	a7 89       	ldd	r26, Z+23	; 0x17
    337c:	b0 8d       	ldd	r27, Z+24	; 0x18
    337e:	82 17       	cp	r24, r18
    3380:	93 07       	cpc	r25, r19
    3382:	a4 07       	cpc	r26, r20
    3384:	b5 07       	cpc	r27, r21
    3386:	08 f0       	brcs	.+2      	; 0x338a <__vector_17+0x442>
    3388:	4e c0       	rjmp	.+156    	; 0x3426 <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    338a:	80 93 6c 05 	sts	0x056C, r24
    338e:	90 93 6d 05 	sts	0x056D, r25
    3392:	a0 93 6e 05 	sts	0x056E, r26
    3396:	b0 93 6f 05 	sts	0x056F, r27
    339a:	45 c0       	rjmp	.+138    	; 0x3426 <__vector_17+0x4de>
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    339c:	eb 5b       	subi	r30, 0xBB	; 187
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	a2 81       	ldd	r26, Z+2	; 0x02
    33a6:	b3 81       	ldd	r27, Z+3	; 0x03
    33a8:	e5 54       	subi	r30, 0x45	; 69
    33aa:	f0 40       	sbci	r31, 0x00	; 0
    33ac:	20 91 6c 05 	lds	r18, 0x056C
    33b0:	30 91 6d 05 	lds	r19, 0x056D
    33b4:	40 91 6e 05 	lds	r20, 0x056E
    33b8:	50 91 6f 05 	lds	r21, 0x056F
    33bc:	8e 15       	cp	r24, r14
    33be:	9f 05       	cpc	r25, r15
    33c0:	a0 07       	cpc	r26, r16
    33c2:	b1 07       	cpc	r27, r17
    33c4:	c8 f5       	brcc	.+114    	; 0x3438 <__vector_17+0x4f0>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    33c6:	fd 96       	adiw	r30, 0x3d	; 61
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	a2 81       	ldd	r26, Z+2	; 0x02
    33ce:	b3 81       	ldd	r27, Z+3	; 0x03
    33d0:	fd 97       	sbiw	r30, 0x3d	; 61
    33d2:	82 17       	cp	r24, r18
    33d4:	93 07       	cpc	r25, r19
    33d6:	a4 07       	cpc	r26, r20
    33d8:	b5 07       	cpc	r27, r21
    33da:	60 f4       	brcc	.+24     	; 0x33f4 <__vector_17+0x4ac>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    33dc:	28 1b       	sub	r18, r24
    33de:	39 0b       	sbc	r19, r25
    33e0:	4a 0b       	sbc	r20, r26
    33e2:	5b 0b       	sbc	r21, r27
    33e4:	20 93 6c 05 	sts	0x056C, r18
    33e8:	30 93 6d 05 	sts	0x056D, r19
    33ec:	40 93 6e 05 	sts	0x056E, r20
    33f0:	50 93 6f 05 	sts	0x056F, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    33f4:	21 ad       	ldd	r18, Z+57	; 0x39
    33f6:	32 ad       	ldd	r19, Z+58	; 0x3a
    33f8:	43 ad       	ldd	r20, Z+59	; 0x3b
    33fa:	54 ad       	ldd	r21, Z+60	; 0x3c
    33fc:	80 91 6c 05 	lds	r24, 0x056C
    3400:	90 91 6d 05 	lds	r25, 0x056D
    3404:	a0 91 6e 05 	lds	r26, 0x056E
    3408:	b0 91 6f 05 	lds	r27, 0x056F
    340c:	82 17       	cp	r24, r18
    340e:	93 07       	cpc	r25, r19
    3410:	a4 07       	cpc	r26, r20
    3412:	b5 07       	cpc	r27, r21
    3414:	40 f4       	brcc	.+16     	; 0x3426 <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->final_rate;
    3416:	20 93 6c 05 	sts	0x056C, r18
    341a:	30 93 6d 05 	sts	0x056D, r19
    341e:	40 93 6e 05 	sts	0x056E, r20
    3422:	50 93 6f 05 	sts	0x056F, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    3426:	60 91 6c 05 	lds	r22, 0x056C
    342a:	70 91 6d 05 	lds	r23, 0x056D
    342e:	80 91 6e 05 	lds	r24, 0x056E
    3432:	90 91 6f 05 	lds	r25, 0x056F
    3436:	11 c0       	rjmp	.+34     	; 0x345a <__vector_17+0x512>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3438:	65 89       	ldd	r22, Z+21	; 0x15
    343a:	76 89       	ldd	r23, Z+22	; 0x16
    343c:	87 89       	ldd	r24, Z+23	; 0x17
    343e:	90 8d       	ldd	r25, Z+24	; 0x18
    3440:	26 17       	cp	r18, r22
    3442:	37 07       	cpc	r19, r23
    3444:	48 07       	cpc	r20, r24
    3446:	59 07       	cpc	r21, r25
    3448:	51 f0       	breq	.+20     	; 0x345e <__vector_17+0x516>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    344a:	60 93 6c 05 	sts	0x056C, r22
    344e:	70 93 6d 05 	sts	0x056D, r23
    3452:	80 93 6e 05 	sts	0x056E, r24
    3456:	90 93 6f 05 	sts	0x056F, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    345a:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    345e:	10 92 63 05 	sts	0x0563, r1
    3462:	10 92 62 05 	sts	0x0562, r1
}
    3466:	ff 91       	pop	r31
    3468:	ef 91       	pop	r30
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	bf 91       	pop	r27
    3470:	af 91       	pop	r26
    3472:	9f 91       	pop	r25
    3474:	8f 91       	pop	r24
    3476:	7f 91       	pop	r23
    3478:	6f 91       	pop	r22
    347a:	5f 91       	pop	r21
    347c:	4f 91       	pop	r20
    347e:	3f 91       	pop	r19
    3480:	2f 91       	pop	r18
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	0f 90       	pop	r0
    348c:	0b be       	out	0x3b, r0	; 59
    348e:	0f 90       	pop	r0
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	0f 90       	pop	r0
    3494:	1f 90       	pop	r1
    3496:	18 95       	reti

00003498 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	7b 01       	movw	r14, r22
    34a2:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    34a4:	22 e0       	ldi	r18, 0x02	; 2
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	50 e0       	ldi	r21, 0x00	; 0
    34ac:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__divmodsi4>
    34b0:	20 5c       	subi	r18, 0xC0	; 192
    34b2:	3d 4b       	sbci	r19, 0xBD	; 189
    34b4:	40 4f       	sbci	r20, 0xF0	; 240
    34b6:	5f 4f       	sbci	r21, 0xFF	; 255
    34b8:	ca 01       	movw	r24, r20
    34ba:	b9 01       	movw	r22, r18
    34bc:	a8 01       	movw	r20, r16
    34be:	97 01       	movw	r18, r14
    34c0:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodsi4>
    34c4:	c9 01       	movw	r24, r18
    34c6:	da 01       	movw	r26, r20
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	a1 09       	sbc	r26, r1
    34cc:	b1 09       	sbc	r27, r1
    34ce:	29 2f       	mov	r18, r25
    34d0:	3a 2f       	mov	r19, r26
    34d2:	4b 2f       	mov	r20, r27
    34d4:	55 27       	eor	r21, r21
    34d6:	01 96       	adiw	r24, 0x01	; 1
    34d8:	a1 1d       	adc	r26, r1
    34da:	b1 1d       	adc	r27, r1
    34dc:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    34e0:	81 50       	subi	r24, 0x01	; 1
    34e2:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    34e6:	e0 ec       	ldi	r30, 0xC0	; 192
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	8d 7f       	andi	r24, 0xFD	; 253
    34ee:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    34f0:	e1 ec       	ldi	r30, 0xC1	; 193
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	80 61       	ori	r24, 0x10	; 16
    34f8:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    34fa:	80 81       	ld	r24, Z
    34fc:	88 60       	ori	r24, 0x08	; 8
    34fe:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3500:	80 81       	ld	r24, Z
    3502:	80 68       	ori	r24, 0x80	; 128
    3504:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	ff 90       	pop	r15
    350c:	ef 90       	pop	r14
    350e:	08 95       	ret

00003510 <serialWrite>:

void serialWrite(unsigned char c)
{
    3510:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3512:	80 91 c0 00 	lds	r24, 0x00C0
    3516:	85 ff       	sbrs	r24, 5
    3518:	fc cf       	rjmp	.-8      	; 0x3512 <serialWrite+0x2>
		;
	UDR0 = c;
    351a:	90 93 c6 00 	sts	0x00C6, r25
}
    351e:	08 95       	ret

00003520 <serialAvailable>:

int serialAvailable()
{
    3520:	80 91 70 05 	lds	r24, 0x0570
    3524:	90 91 71 05 	lds	r25, 0x0571
    3528:	80 50       	subi	r24, 0x00	; 0
    352a:	9f 4f       	sbci	r25, 0xFF	; 255
    352c:	20 91 72 05 	lds	r18, 0x0572
    3530:	30 91 73 05 	lds	r19, 0x0573
    3534:	82 1b       	sub	r24, r18
    3536:	93 0b       	sbc	r25, r19
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	71 e0       	ldi	r23, 0x01	; 1
    353c:	0e 94 39 22 	call	0x4472	; 0x4472 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3540:	08 95       	ret

00003542 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3542:	40 91 72 05 	lds	r20, 0x0572
    3546:	50 91 73 05 	lds	r21, 0x0573
    354a:	80 91 70 05 	lds	r24, 0x0570
    354e:	90 91 71 05 	lds	r25, 0x0571
    3552:	84 17       	cp	r24, r20
    3554:	95 07       	cpc	r25, r21
    3556:	19 f4       	brne	.+6      	; 0x355e <serialRead+0x1c>
    3558:	2f ef       	ldi	r18, 0xFF	; 255
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	0f c0       	rjmp	.+30     	; 0x357c <serialRead+0x3a>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    355e:	fa 01       	movw	r30, r20
    3560:	ec 58       	subi	r30, 0x8C	; 140
    3562:	fa 4f       	sbci	r31, 0xFA	; 250
    3564:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3566:	ca 01       	movw	r24, r20
    3568:	01 96       	adiw	r24, 0x01	; 1
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	71 e0       	ldi	r23, 0x01	; 1
    356e:	0e 94 39 22 	call	0x4472	; 0x4472 <__divmodhi4>
    3572:	90 93 73 05 	sts	0x0573, r25
    3576:	80 93 72 05 	sts	0x0572, r24
		return c;
    357a:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    357c:	c9 01       	movw	r24, r18
    357e:	08 95       	ret

00003580 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3580:	80 91 72 05 	lds	r24, 0x0572
    3584:	90 91 73 05 	lds	r25, 0x0573
    3588:	90 93 71 05 	sts	0x0571, r25
    358c:	80 93 70 05 	sts	0x0570, r24
}
    3590:	08 95       	ret

00003592 <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3592:	1f 92       	push	r1
    3594:	0f 92       	push	r0
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	0f 92       	push	r0
    359a:	0b b6       	in	r0, 0x3b	; 59
    359c:	0f 92       	push	r0
    359e:	11 24       	eor	r1, r1
    35a0:	2f 93       	push	r18
    35a2:	3f 93       	push	r19
    35a4:	4f 93       	push	r20
    35a6:	5f 93       	push	r21
    35a8:	6f 93       	push	r22
    35aa:	7f 93       	push	r23
    35ac:	8f 93       	push	r24
    35ae:	9f 93       	push	r25
    35b0:	af 93       	push	r26
    35b2:	bf 93       	push	r27
    35b4:	ef 93       	push	r30
    35b6:	ff 93       	push	r31
	unsigned char c = UDR0;
    35b8:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    35bc:	e0 91 70 05 	lds	r30, 0x0570
    35c0:	f0 91 71 05 	lds	r31, 0x0571
    35c4:	cf 01       	movw	r24, r30
    35c6:	01 96       	adiw	r24, 0x01	; 1
    35c8:	60 e0       	ldi	r22, 0x00	; 0
    35ca:	71 e0       	ldi	r23, 0x01	; 1
    35cc:	0e 94 39 22 	call	0x4472	; 0x4472 <__divmodhi4>
    35d0:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    35d2:	80 91 72 05 	lds	r24, 0x0572
    35d6:	90 91 73 05 	lds	r25, 0x0573
    35da:	28 17       	cp	r18, r24
    35dc:	39 07       	cpc	r19, r25
    35de:	39 f0       	breq	.+14     	; 0x35ee <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    35e0:	ec 58       	subi	r30, 0x8C	; 140
    35e2:	fa 4f       	sbci	r31, 0xFA	; 250
    35e4:	40 83       	st	Z, r20
		rx_buffer_head = i;
    35e6:	30 93 71 05 	sts	0x0571, r19
    35ea:	20 93 70 05 	sts	0x0570, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    35ee:	ff 91       	pop	r31
    35f0:	ef 91       	pop	r30
    35f2:	bf 91       	pop	r27
    35f4:	af 91       	pop	r26
    35f6:	9f 91       	pop	r25
    35f8:	8f 91       	pop	r24
    35fa:	7f 91       	pop	r23
    35fc:	6f 91       	pop	r22
    35fe:	5f 91       	pop	r21
    3600:	4f 91       	pop	r20
    3602:	3f 91       	pop	r19
    3604:	2f 91       	pop	r18
    3606:	0f 90       	pop	r0
    3608:	0b be       	out	0x3b, r0	; 59
    360a:	0f 90       	pop	r0
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	0f 90       	pop	r0
    3610:	1f 90       	pop	r1
    3612:	18 95       	reti

00003614 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3614:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3616:	80 91 c0 00 	lds	r24, 0x00C0
    361a:	85 ff       	sbrs	r24, 5
    361c:	fc cf       	rjmp	.-8      	; 0x3616 <printByte+0x2>
		;
	UDR0 = c;
    361e:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3622:	08 95       	ret

00003624 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3624:	fc 01       	movw	r30, r24
    3626:	07 c0       	rjmp	.+14     	; 0x3636 <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3628:	80 91 c0 00 	lds	r24, 0x00C0
    362c:	85 ff       	sbrs	r24, 5
    362e:	fc cf       	rjmp	.-8      	; 0x3628 <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
    3630:	31 96       	adiw	r30, 0x01	; 1

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    3632:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3636:	90 81       	ld	r25, Z
    3638:	99 23       	and	r25, r25
    363a:	b1 f7       	brne	.-20     	; 0x3628 <printString+0x4>
		printByte(*s++);
}
    363c:	08 95       	ret

0000363e <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    363e:	9c 01       	movw	r18, r24
    3640:	06 c0       	rjmp	.+12     	; 0x364e <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3642:	80 91 c0 00 	lds	r24, 0x00C0
    3646:	85 ff       	sbrs	r24, 5
    3648:	fc cf       	rjmp	.-8      	; 0x3642 <printPgmString+0x4>
		;
	UDR0 = c;
    364a:	90 93 c6 00 	sts	0x00C6, r25
    364e:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3650:	2f 5f       	subi	r18, 0xFF	; 255
    3652:	3f 4f       	sbci	r19, 0xFF	; 255
    3654:	94 91       	lpm	r25, Z+
    3656:	99 23       	and	r25, r25
    3658:	a1 f7       	brne	.-24     	; 0x3642 <printPgmString+0x4>
		printByte(c);
}
    365a:	08 95       	ret

0000365c <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    365c:	2f 92       	push	r2
    365e:	3f 92       	push	r3
    3660:	4f 92       	push	r4
    3662:	5f 92       	push	r5
    3664:	6f 92       	push	r6
    3666:	7f 92       	push	r7
    3668:	8f 92       	push	r8
    366a:	9f 92       	push	r9
    366c:	af 92       	push	r10
    366e:	bf 92       	push	r11
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	a0 97       	sbiw	r28, 0x20	; 32
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	cd bf       	out	0x3d, r28	; 61
    3690:	6b 01       	movw	r12, r22
    3692:	7c 01       	movw	r14, r24
    3694:	29 01       	movw	r4, r18
    3696:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3698:	61 15       	cp	r22, r1
    369a:	71 05       	cpc	r23, r1
    369c:	81 05       	cpc	r24, r1
    369e:	91 05       	cpc	r25, r1
    36a0:	41 f4       	brne	.+16     	; 0x36b2 <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    36a2:	80 91 c0 00 	lds	r24, 0x00C0
    36a6:	85 ff       	sbrs	r24, 5
    36a8:	fc cf       	rjmp	.-8      	; 0x36a2 <printIntegerInBase+0x46>
		;
	UDR0 = c;
    36aa:	80 e3       	ldi	r24, 0x30	; 48
    36ac:	80 93 c6 00 	sts	0x00C6, r24
    36b0:	49 c0       	rjmp	.+146    	; 0x3744 <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
    36b2:	88 24       	eor	r8, r8
    36b4:	99 24       	eor	r9, r9
    36b6:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
    36b8:	1e 01       	movw	r2, r28
    36ba:	08 94       	sec
    36bc:	21 1c       	adc	r2, r1
    36be:	31 1c       	adc	r3, r1
    36c0:	81 01       	movw	r16, r2
    36c2:	08 0d       	add	r16, r8
    36c4:	19 1d       	adc	r17, r9
    36c6:	c7 01       	movw	r24, r14
    36c8:	b6 01       	movw	r22, r12
    36ca:	a3 01       	movw	r20, r6
    36cc:	92 01       	movw	r18, r4
    36ce:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodsi4>
    36d2:	f8 01       	movw	r30, r16
    36d4:	60 83       	st	Z, r22
    36d6:	08 94       	sec
    36d8:	81 1c       	adc	r8, r1
    36da:	91 1c       	adc	r9, r1
    36dc:	a1 1c       	adc	r10, r1
    36de:	b1 1c       	adc	r11, r1
		n /= base;
    36e0:	c7 01       	movw	r24, r14
    36e2:	b6 01       	movw	r22, r12
    36e4:	a3 01       	movw	r20, r6
    36e6:	92 01       	movw	r18, r4
    36e8:	0e 94 4c 22 	call	0x4498	; 0x4498 <__udivmodsi4>
    36ec:	c9 01       	movw	r24, r18
    36ee:	da 01       	movw	r26, r20
    36f0:	6c 01       	movw	r12, r24
    36f2:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    36f4:	c1 14       	cp	r12, r1
    36f6:	d1 04       	cpc	r13, r1
    36f8:	e1 04       	cpc	r14, r1
    36fa:	f1 04       	cpc	r15, r1
    36fc:	09 f7       	brne	.-62     	; 0x36c0 <printIntegerInBase+0x64>
    36fe:	91 01       	movw	r18, r2
    3700:	28 0d       	add	r18, r8
    3702:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3704:	be 01       	movw	r22, r28
    3706:	6f 5f       	subi	r22, 0xFF	; 255
    3708:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
    370a:	d5 01       	movw	r26, r10
    370c:	c4 01       	movw	r24, r8
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	a1 09       	sbc	r26, r1
    3712:	b1 09       	sbc	r27, r1
    3714:	ac 01       	movw	r20, r24
    3716:	48 19       	sub	r20, r8
    3718:	59 09       	sbc	r21, r9
    371a:	11 c0       	rjmp	.+34     	; 0x373e <printIntegerInBase+0xe2>
    371c:	fa 01       	movw	r30, r20
    371e:	e2 0f       	add	r30, r18
    3720:	f3 1f       	adc	r31, r19
    3722:	e0 81       	ld	r30, Z
    3724:	ea 30       	cpi	r30, 0x0A	; 10
    3726:	10 f4       	brcc	.+4      	; 0x372c <printIntegerInBase+0xd0>
    3728:	e0 5d       	subi	r30, 0xD0	; 208
    372a:	01 c0       	rjmp	.+2      	; 0x372e <printIntegerInBase+0xd2>
    372c:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    372e:	80 91 c0 00 	lds	r24, 0x00C0
    3732:	85 ff       	sbrs	r24, 5
    3734:	fc cf       	rjmp	.-8      	; 0x372e <printIntegerInBase+0xd2>
		;
	UDR0 = c;
    3736:	e0 93 c6 00 	sts	0x00C6, r30
    373a:	21 50       	subi	r18, 0x01	; 1
    373c:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    373e:	62 17       	cp	r22, r18
    3740:	73 07       	cpc	r23, r19
    3742:	61 f7       	brne	.-40     	; 0x371c <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3744:	a0 96       	adiw	r28, 0x20	; 32
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	ff 90       	pop	r15
    375a:	ef 90       	pop	r14
    375c:	df 90       	pop	r13
    375e:	cf 90       	pop	r12
    3760:	bf 90       	pop	r11
    3762:	af 90       	pop	r10
    3764:	9f 90       	pop	r9
    3766:	8f 90       	pop	r8
    3768:	7f 90       	pop	r7
    376a:	6f 90       	pop	r6
    376c:	5f 90       	pop	r5
    376e:	4f 90       	pop	r4
    3770:	3f 90       	pop	r3
    3772:	2f 90       	pop	r2
    3774:	08 95       	ret

00003776 <printInteger>:

void printInteger(long n)
{
    3776:	9b 01       	movw	r18, r22
    3778:	ac 01       	movw	r20, r24
	if (n < 0) {
    377a:	97 ff       	sbrs	r25, 7
    377c:	0e c0       	rjmp	.+28     	; 0x379a <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    377e:	80 91 c0 00 	lds	r24, 0x00C0
    3782:	85 ff       	sbrs	r24, 5
    3784:	fc cf       	rjmp	.-8      	; 0x377e <printInteger+0x8>
		;
	UDR0 = c;
    3786:	8d e2       	ldi	r24, 0x2D	; 45
    3788:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    378c:	50 95       	com	r21
    378e:	40 95       	com	r20
    3790:	30 95       	com	r19
    3792:	21 95       	neg	r18
    3794:	3f 4f       	sbci	r19, 0xFF	; 255
    3796:	4f 4f       	sbci	r20, 0xFF	; 255
    3798:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
    379a:	ca 01       	movw	r24, r20
    379c:	b9 01       	movw	r22, r18
    379e:	2a e0       	ldi	r18, 0x0A	; 10
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e0       	ldi	r20, 0x00	; 0
    37a4:	50 e0       	ldi	r21, 0x00	; 0
    37a6:	0e 94 2e 1b 	call	0x365c	; 0x365c <printIntegerInBase>
}
    37aa:	08 95       	ret

000037ac <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    37ac:	22 e0       	ldi	r18, 0x02	; 2
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e0       	ldi	r20, 0x00	; 0
    37b2:	50 e0       	ldi	r21, 0x00	; 0
    37b4:	0e 94 2e 1b 	call	0x365c	; 0x365c <printIntegerInBase>
  }
    37b8:	08 95       	ret

000037ba <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    37ba:	ef 92       	push	r14
    37bc:	ff 92       	push	r15
    37be:	0f 93       	push	r16
    37c0:	1f 93       	push	r17
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	00 d0       	rcall	.+0      	; 0x37c8 <printFloat+0xe>
    37c8:	0f 92       	push	r0
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    37ce:	ae 01       	movw	r20, r28
    37d0:	4f 5f       	subi	r20, 0xFF	; 255
    37d2:	5f 4f       	sbci	r21, 0xFF	; 255
    37d4:	0e 94 11 21 	call	0x4222	; 0x4222 <modf>
    37d8:	7b 01       	movw	r14, r22
    37da:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    37dc:	69 81       	ldd	r22, Y+1	; 0x01
    37de:	7a 81       	ldd	r23, Y+2	; 0x02
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	9c 81       	ldd	r25, Y+4	; 0x04
    37e4:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
    37e8:	0e 94 bb 1b 	call	0x3776	; 0x3776 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    37ec:	80 91 c0 00 	lds	r24, 0x00C0
    37f0:	85 ff       	sbrs	r24, 5
    37f2:	fc cf       	rjmp	.-8      	; 0x37ec <printFloat+0x32>
		;
	UDR0 = c;
    37f4:	8e e2       	ldi	r24, 0x2E	; 46
    37f6:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    37fa:	c8 01       	movw	r24, r16
    37fc:	b7 01       	movw	r22, r14
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	4a e7       	ldi	r20, 0x7A	; 122
    3804:	54 e4       	ldi	r21, 0x44	; 68
    3806:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    380a:	0e 94 a7 21 	call	0x434e	; 0x434e <round>
    380e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__fixsfsi>
    3812:	97 ff       	sbrs	r25, 7
    3814:	07 c0       	rjmp	.+14     	; 0x3824 <printFloat+0x6a>
    3816:	90 95       	com	r25
    3818:	80 95       	com	r24
    381a:	70 95       	com	r23
    381c:	61 95       	neg	r22
    381e:	7f 4f       	sbci	r23, 0xFF	; 255
    3820:	8f 4f       	sbci	r24, 0xFF	; 255
    3822:	9f 4f       	sbci	r25, 0xFF	; 255
    3824:	0e 94 bb 1b 	call	0x3776	; 0x3776 <printInteger>
}
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	1f 91       	pop	r17
    3836:	0f 91       	pop	r16
    3838:	ff 90       	pop	r15
    383a:	ef 90       	pop	r14
    383c:	08 95       	ret

0000383e <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    383e:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    3840:	e7 e0       	ldi	r30, 0x07	; 7
    3842:	f1 e0       	ldi	r31, 0x01	; 1
    3844:	80 81       	ld	r24, Z
    3846:	81 60       	ori	r24, 0x01	; 1
    3848:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    384a:	80 81       	ld	r24, Z
    384c:	82 60       	ori	r24, 0x02	; 2
    384e:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3850:	80 81       	ld	r24, Z
    3852:	84 60       	ori	r24, 0x04	; 4
    3854:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3856:	80 81       	ld	r24, Z
    3858:	88 60       	ori	r24, 0x08	; 8
    385a:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    385c:	80 81       	ld	r24, Z
    385e:	80 64       	ori	r24, 0x40	; 64
    3860:	80 83       	st	Z, r24

// initialise PORT as well

}
    3862:	08 95       	ret

00003864 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	08 95       	ret

00003868 <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    3868:	cf 93       	push	r28
    386a:	df 93       	push	r29
    386c:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    3874:	20 97       	sbiw	r28, 0x00	; 0
    3876:	c1 f4       	brne	.+48     	; 0x38a8 <atc_fire+0x40>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3878:	80 91 08 01 	lds	r24, 0x0108
    387c:	81 60       	ori	r24, 0x01	; 1
    387e:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3882:	80 91 08 01 	lds	r24, 0x0108
    3886:	82 60       	ori	r24, 0x02	; 2
    3888:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    388c:	80 91 08 01 	lds	r24, 0x0108
    3890:	84 60       	ori	r24, 0x04	; 4
    3892:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3896:	80 91 08 01 	lds	r24, 0x0108
    389a:	88 60       	ori	r24, 0x08	; 8
    389c:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <set_busy>
    38a6:	70 c0       	rjmp	.+224    	; 0x3988 <atc_fire+0x120>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    38a8:	80 91 08 01 	lds	r24, 0x0108
    38ac:	81 60       	ori	r24, 0x01	; 1
    38ae:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    38b2:	c3 30       	cpi	r28, 0x03	; 3
    38b4:	d1 05       	cpc	r29, r1
    38b6:	09 f1       	breq	.+66     	; 0x38fa <atc_fire+0x92>
    38b8:	c4 30       	cpi	r28, 0x04	; 4
    38ba:	d1 05       	cpc	r29, r1
    38bc:	3c f4       	brge	.+14     	; 0x38cc <atc_fire+0x64>
    38be:	c1 30       	cpi	r28, 0x01	; 1
    38c0:	d1 05       	cpc	r29, r1
    38c2:	71 f0       	breq	.+28     	; 0x38e0 <atc_fire+0x78>
    38c4:	22 97       	sbiw	r28, 0x02	; 2
    38c6:	09 f0       	breq	.+2      	; 0x38ca <atc_fire+0x62>
    38c8:	51 c0       	rjmp	.+162    	; 0x396c <atc_fire+0x104>
    38ca:	13 c0       	rjmp	.+38     	; 0x38f2 <atc_fire+0x8a>
    38cc:	c5 30       	cpi	r28, 0x05	; 5
    38ce:	d1 05       	cpc	r29, r1
    38d0:	59 f1       	breq	.+86     	; 0x3928 <atc_fire+0xc0>
    38d2:	c5 30       	cpi	r28, 0x05	; 5
    38d4:	d1 05       	cpc	r29, r1
    38d6:	fc f0       	brlt	.+62     	; 0x3916 <atc_fire+0xae>
    38d8:	26 97       	sbiw	r28, 0x06	; 6
    38da:	09 f0       	breq	.+2      	; 0x38de <atc_fire+0x76>
    38dc:	47 c0       	rjmp	.+142    	; 0x396c <atc_fire+0x104>
    38de:	32 c0       	rjmp	.+100    	; 0x3944 <atc_fire+0xdc>
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    38e0:	80 91 08 01 	lds	r24, 0x0108
    38e4:	8d 7f       	andi	r24, 0xFD	; 253
    38e6:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    38ea:	80 91 08 01 	lds	r24, 0x0108
    38ee:	8b 7f       	andi	r24, 0xFB	; 251
    38f0:	0c c0       	rjmp	.+24     	; 0x390a <atc_fire+0xa2>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    38f2:	80 91 08 01 	lds	r24, 0x0108
    38f6:	8d 7f       	andi	r24, 0xFD	; 253
    38f8:	28 c0       	rjmp	.+80     	; 0x394a <atc_fire+0xe2>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    38fa:	80 91 08 01 	lds	r24, 0x0108
    38fe:	8d 7f       	andi	r24, 0xFD	; 253
    3900:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3904:	80 91 08 01 	lds	r24, 0x0108
    3908:	84 60       	ori	r24, 0x04	; 4
    390a:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    390e:	80 91 08 01 	lds	r24, 0x0108
    3912:	87 7f       	andi	r24, 0xF7	; 247
    3914:	24 c0       	rjmp	.+72     	; 0x395e <atc_fire+0xf6>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3916:	80 91 08 01 	lds	r24, 0x0108
    391a:	8d 7f       	andi	r24, 0xFD	; 253
    391c:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3920:	80 91 08 01 	lds	r24, 0x0108
    3924:	84 60       	ori	r24, 0x04	; 4
    3926:	16 c0       	rjmp	.+44     	; 0x3954 <atc_fire+0xec>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    3928:	80 91 08 01 	lds	r24, 0x0108
    392c:	82 60       	ori	r24, 0x02	; 2
    392e:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3932:	80 91 08 01 	lds	r24, 0x0108
    3936:	8b 7f       	andi	r24, 0xFB	; 251
    3938:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    393c:	80 91 08 01 	lds	r24, 0x0108
    3940:	87 7f       	andi	r24, 0xF7	; 247
    3942:	12 c0       	rjmp	.+36     	; 0x3968 <atc_fire+0x100>
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3944:	80 91 08 01 	lds	r24, 0x0108
    3948:	82 60       	ori	r24, 0x02	; 2
    394a:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    394e:	80 91 08 01 	lds	r24, 0x0108
    3952:	8b 7f       	andi	r24, 0xFB	; 251
    3954:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3958:	80 91 08 01 	lds	r24, 0x0108
    395c:	88 60       	ori	r24, 0x08	; 8
    395e:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3962:	80 91 08 01 	lds	r24, 0x0108
    3966:	8e 7f       	andi	r24, 0xFE	; 254
    3968:	80 93 08 01 	sts	0x0108, r24
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    396c:	80 91 08 01 	lds	r24, 0x0108
    3970:	8e 7f       	andi	r24, 0xFE	; 254
    3972:	80 93 08 01 	sts	0x0108, r24
    3976:	88 ee       	ldi	r24, 0xE8	; 232
    3978:	93 e0       	ldi	r25, 0x03	; 3
    397a:	20 e9       	ldi	r18, 0x90	; 144
    397c:	31 e0       	ldi	r19, 0x01	; 1
    397e:	f9 01       	movw	r30, r18
    3980:	31 97       	sbiw	r30, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <atc_fire+0x118>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3984:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3986:	d9 f7       	brne	.-10     	; 0x397e <atc_fire+0x116>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3988:	df 91       	pop	r29
    398a:	cf 91       	pop	r28
    398c:	08 95       	ret

0000398e <DropTool>:
	atc_change( 0 );
	
}

void DropTool( unsigned char tool )
{
    398e:	1f 93       	push	r17
    3990:	18 2f       	mov	r17, r24
	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
    399a:	88 23       	and	r24, r24
    399c:	61 f0       	breq	.+24     	; 0x39b6 <DropTool+0x28>
		// Head failed to go down.
		return 0;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    399e:	81 2f       	mov	r24, r17
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	0e 94 34 1c 	call	0x3868	; 0x3868 <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	0e 94 34 1c 	call	0x3868	; 0x3868 <atc_fire>

	// head back up
	head_down( 0 );
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
	
}
    39b6:	1f 91       	pop	r17
    39b8:	08 95       	ret

000039ba <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    39ba:	1f 93       	push	r17
    39bc:	18 2f       	mov	r17, r24
	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
    39c6:	88 23       	and	r24, r24
    39c8:	81 f0       	breq	.+32     	; 0x39ea <PickupTool+0x30>
		// Head failed to go down.
		return 0;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    39ca:	81 2f       	mov	r24, r17
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <atc_change>

	// head back up
	head_down( 0 );
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
    39da:	80 e9       	ldi	r24, 0x90	; 144
    39dc:	91 e0       	ldi	r25, 0x01	; 1
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	f1 f7       	brne	.-4      	; 0x39de <PickupTool+0x24>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <atc_change>
	
}
    39ea:	1f 91       	pop	r17
    39ec:	08 95       	ret

000039ee <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	ec 01       	movw	r28, r24
	// do we have that tool already ?
	if( tool == toolId ) {
    39f4:	8f 3f       	cpi	r24, 0xFF	; 255
    39f6:	91 05       	cpc	r25, r1
    39f8:	11 f4       	brne	.+4      	; 0x39fe <atc_change+0x10>
		PickupTool(tool);
	} else { 
		DropTool(tool);
	}

}
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	0b c0       	rjmp	.+22     	; 0x3a14 <atc_change+0x26>
	// do we have that tool already ?
	if( tool == toolId ) {
		return 1;
	}
	
	if( run_vacuum_test() == 0 ) {
    39fe:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <run_vacuum_test>
    3a02:	88 23       	and	r24, r24
    3a04:	21 f4       	brne	.+8      	; 0x3a0e <atc_change+0x20>
		PickupTool(tool);
    3a06:	8c 2f       	mov	r24, r28
    3a08:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <PickupTool>
    3a0c:	03 c0       	rjmp	.+6      	; 0x3a14 <atc_change+0x26>
	} else { 
		DropTool(tool);
    3a0e:	8c 2f       	mov	r24, r28
    3a10:	0e 94 c7 1c 	call	0x398e	; 0x398e <DropTool>
	}

}
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	08 95       	ret

00003a1a <goto_vacpad>:

}

void goto_vacpad( void ) 
{
	if( is_head_down() ) {
    3a1a:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <is_head_down>
    3a1e:	88 23       	and	r24, r24
    3a20:	21 f0       	breq	.+8      	; 0x3a2a <goto_vacpad+0x10>
		head_down( FALSE) ;
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
    3a2a:	08 95       	ret

00003a2c <check_for_tool>:

// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	//move head up
	if( is_head_down() ) {
    3a2c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <is_head_down>
    3a30:	88 23       	and	r24, r24
    3a32:	21 f0       	breq	.+8      	; 0x3a3c <check_for_tool+0x10>
		head_down( FALSE) ;
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
	}

	goto_vacpad();
    3a3c:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <goto_vacpad>
	
	head_down(TRUE);
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
	
	vacuum(TRUE);
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vacuum>

	if( vacuum_state() == TRUE )  {
    3a50:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <vacuum_state>
    3a54:	81 30       	cpi	r24, 0x01	; 1
    3a56:	31 f4       	brne	.+12     	; 0x3a64 <check_for_tool+0x38>
		head_down( FALSE) ;
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	08 95       	ret
		return TRUE;
	} else {
		head_down( FALSE) ;
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <head_down>
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	}
}
    3a6e:	08 95       	ret

00003a70 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    3a70:	ea e0       	ldi	r30, 0x0A	; 10
    3a72:	f1 e0       	ldi	r31, 0x01	; 1
    3a74:	80 81       	ld	r24, Z
    3a76:	80 62       	ori	r24, 0x20	; 32
    3a78:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    3a7a:	eb e0       	ldi	r30, 0x0B	; 11
    3a7c:	f1 e0       	ldi	r31, 0x01	; 1
    3a7e:	80 81       	ld	r24, Z
    3a80:	80 62       	ori	r24, 0x20	; 32
    3a82:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    3a84:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    3a86:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    3a88:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    3a8a:	41 9a       	sbi	0x08, 1	; 8
}
    3a8c:	08 95       	ret

00003a8e <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3a8e:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    3a90:	81 70       	andi	r24, 0x01	; 1
    3a92:	08 95       	ret

00003a94 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    3a94:	86 b1       	in	r24, 0x06	; 6
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	96 95       	lsr	r25
    3a9a:	87 95       	ror	r24

	return state;
}
    3a9c:	81 70       	andi	r24, 0x01	; 1
    3a9e:	08 95       	ret

00003aa0 <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}

// todo: don't allow head down while not homed?
char head_down(int state)
{
    3aa0:	cf 93       	push	r28
    3aa2:	df 93       	push	r29
    3aa4:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <set_busy>

// head down mode
  if( state == 0 ) {
    3aae:	20 97       	sbiw	r28, 0x00	; 0
    3ab0:	21 f4       	brne	.+8      	; 0x3aba <head_down+0x1a>

	HEAD_PORT |= _BV( HEAD );
    3ab2:	80 91 0b 01 	lds	r24, 0x010B
    3ab6:	80 62       	ori	r24, 0x20	; 32
    3ab8:	03 c0       	rjmp	.+6      	; 0x3ac0 <head_down+0x20>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    3aba:	80 91 0b 01 	lds	r24, 0x010B
    3abe:	8f 7d       	andi	r24, 0xDF	; 223
    3ac0:	80 93 0b 01 	sts	0x010B, r24
    3ac4:	80 ed       	ldi	r24, 0xD0	; 208
    3ac6:	97 e0       	ldi	r25, 0x07	; 7
    3ac8:	20 e9       	ldi	r18, 0x90	; 144
    3aca:	31 e0       	ldi	r19, 0x01	; 1
    3acc:	f9 01       	movw	r30, r18
    3ace:	31 97       	sbiw	r30, 0x01	; 1
    3ad0:	f1 f7       	brne	.-4      	; 0x3ace <head_down+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad4:	d9 f7       	brne	.-10     	; 0x3acc <head_down+0x2c>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3ad6:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    3ad8:	81 70       	andi	r24, 0x01	; 1
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	8c 17       	cp	r24, r28
    3ade:	9d 07       	cpc	r25, r29
    3ae0:	31 f0       	breq	.+12     	; 0x3aee <head_down+0x4e>

	  printPgmString(PSTR("Head down error\n\r"));
    3ae2:	83 ee       	ldi	r24, 0xE3	; 227
    3ae4:	94 e0       	ldi	r25, 0x04	; 4
    3ae6:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	05 c0       	rjmp	.+10     	; 0x3af8 <head_down+0x58>
	  
	  return 0;
  }

 set_busy( FALSE );
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <set_busy>
    3af6:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	08 95       	ret

00003afe <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    3afe:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    3b00:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    3b02:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    3b04:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    3b06:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    3b08:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    3b0a:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    3b0c:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    3b0e:	a4 e0       	ldi	r26, 0x04	; 4
    3b10:	b1 e0       	ldi	r27, 0x01	; 1
    3b12:	8c 91       	ld	r24, X
    3b14:	8e 7f       	andi	r24, 0xFE	; 254
    3b16:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    3b18:	e5 e0       	ldi	r30, 0x05	; 5
    3b1a:	f1 e0       	ldi	r31, 0x01	; 1
    3b1c:	80 81       	ld	r24, Z
    3b1e:	81 60       	ori	r24, 0x01	; 1
    3b20:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    3b22:	8c 91       	ld	r24, X
    3b24:	8f 7e       	andi	r24, 0xEF	; 239
    3b26:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    3b28:	80 81       	ld	r24, Z
    3b2a:	80 61       	ori	r24, 0x10	; 16
    3b2c:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    3b2e:	a1 e0       	ldi	r26, 0x01	; 1
    3b30:	b1 e0       	ldi	r27, 0x01	; 1
    3b32:	8c 91       	ld	r24, X
    3b34:	8e 7f       	andi	r24, 0xFE	; 254
    3b36:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    3b38:	e2 e0       	ldi	r30, 0x02	; 2
    3b3a:	f1 e0       	ldi	r31, 0x01	; 1
    3b3c:	80 81       	ld	r24, Z
    3b3e:	81 60       	ori	r24, 0x01	; 1
    3b40:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    3b42:	8c 91       	ld	r24, X
    3b44:	8d 7f       	andi	r24, 0xFD	; 253
    3b46:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    3b48:	80 81       	ld	r24, Z
    3b4a:	82 60       	ori	r24, 0x02	; 2
    3b4c:	80 83       	st	Z, r24

}
    3b4e:	08 95       	ret

00003b50 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    3b50:	8c b1       	in	r24, 0x0c	; 12
    3b52:	82 95       	swap	r24
    3b54:	86 95       	lsr	r24
    3b56:	87 70       	andi	r24, 0x07	; 7
    3b58:	80 95       	com	r24

	return state;
}
    3b5a:	81 70       	andi	r24, 0x01	; 1
    3b5c:	08 95       	ret

00003b5e <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    3b5e:	82 b3       	in	r24, 0x12	; 18
    3b60:	82 95       	swap	r24
    3b62:	86 95       	lsr	r24
    3b64:	87 70       	andi	r24, 0x07	; 7
    3b66:	80 95       	com	r24

	return state;
}
    3b68:	81 70       	andi	r24, 0x01	; 1
    3b6a:	08 95       	ret

00003b6c <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    3b6c:	8c b1       	in	r24, 0x0c	; 12
    3b6e:	82 95       	swap	r24
    3b70:	8f 70       	andi	r24, 0x0F	; 15
    3b72:	80 95       	com	r24

	return state;
}
    3b74:	81 70       	andi	r24, 0x01	; 1
    3b76:	08 95       	ret

00003b78 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    3b78:	80 91 03 01 	lds	r24, 0x0103
    3b7c:	86 95       	lsr	r24
    3b7e:	80 95       	com	r24

	return state;
}
    3b80:	81 70       	andi	r24, 0x01	; 1
    3b82:	08 95       	ret

00003b84 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    3b84:	86 b1       	in	r24, 0x06	; 6
    3b86:	82 95       	swap	r24
    3b88:	8f 70       	andi	r24, 0x0F	; 15
    3b8a:	80 95       	com	r24

	return state;
}
    3b8c:	81 70       	andi	r24, 0x01	; 1
    3b8e:	08 95       	ret

00003b90 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    3b90:	80 91 00 01 	lds	r24, 0x0100
    3b94:	80 95       	com	r24

	return state;
}
    3b96:	81 70       	andi	r24, 0x01	; 1
    3b98:	08 95       	ret

00003b9a <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    3b9a:	80 91 03 01 	lds	r24, 0x0103
    3b9e:	80 95       	com	r24

	return state;
}
    3ba0:	81 70       	andi	r24, 0x01	; 1
    3ba2:	08 95       	ret

00003ba4 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    3ba4:	83 b1       	in	r24, 0x03	; 3
    3ba6:	82 95       	swap	r24
    3ba8:	86 95       	lsr	r24
    3baa:	87 70       	andi	r24, 0x07	; 7
    3bac:	80 95       	com	r24

	return state;
}
    3bae:	81 70       	andi	r24, 0x01	; 1
    3bb0:	08 95       	ret

00003bb2 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    3bb2:	80 91 00 01 	lds	r24, 0x0100
    3bb6:	86 95       	lsr	r24
    3bb8:	80 95       	com	r24

	return state;
}
    3bba:	81 70       	andi	r24, 0x01	; 1
    3bbc:	08 95       	ret

00003bbe <vacuum_init>:
#include "settings.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    3bbe:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    3bc0:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    3bc2:	ea e0       	ldi	r30, 0x0A	; 10
    3bc4:	f1 e0       	ldi	r31, 0x01	; 1
    3bc6:	80 81       	ld	r24, Z
    3bc8:	80 61       	ori	r24, 0x10	; 16
    3bca:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    3bcc:	eb e0       	ldi	r30, 0x0B	; 11
    3bce:	f1 e0       	ldi	r31, 0x01	; 1
    3bd0:	80 81       	ld	r24, Z
    3bd2:	80 61       	ori	r24, 0x10	; 16
    3bd4:	80 83       	st	Z, r24

}
    3bd6:	08 95       	ret

00003bd8 <vacuum>:
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    3bd8:	89 2b       	or	r24, r25
    3bda:	21 f4       	brne	.+8      	; 0x3be4 <vacuum+0xc>

	HEAD_PORT |= _BV( VACUUM );
    3bdc:	80 91 0b 01 	lds	r24, 0x010B
    3be0:	80 61       	ori	r24, 0x10	; 16
    3be2:	03 c0       	rjmp	.+6      	; 0x3bea <vacuum+0x12>

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    3be4:	80 91 0b 01 	lds	r24, 0x010B
    3be8:	8f 7e       	andi	r24, 0xEF	; 239
    3bea:	80 93 0b 01 	sts	0x010B, r24
    3bee:	88 e8       	ldi	r24, 0x88	; 136
    3bf0:	93 e1       	ldi	r25, 0x13	; 19
    3bf2:	20 e9       	ldi	r18, 0x90	; 144
    3bf4:	31 e0       	ldi	r19, 0x01	; 1
    3bf6:	f9 01       	movw	r30, r18
    3bf8:	31 97       	sbiw	r30, 0x01	; 1
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <vacuum+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfe:	d9 f7       	brne	.-10     	; 0x3bf6 <vacuum+0x1e>
  }

   // wait for air to get settled
   _delay_ms( AIR_SETTLE_TIME );

}
    3c00:	08 95       	ret

00003c02 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    3c02:	89 b1       	in	r24, 0x09	; 9
    3c04:	80 95       	com	r24

	return state;
}
    3c06:	88 1f       	adc	r24, r24
    3c08:	88 27       	eor	r24, r24
    3c0a:	88 1f       	adc	r24, r24
    3c0c:	08 95       	ret

00003c0e <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    3c0e:	af 92       	push	r10
    3c10:	bf 92       	push	r11
    3c12:	cf 92       	push	r12
    3c14:	df 92       	push	r13
    3c16:	ef 92       	push	r14
    3c18:	ff 92       	push	r15
    3c1a:	0f 93       	push	r16
    3c1c:	1f 93       	push	r17
// switch vacuum on, faster, wastes air
	vacuum( 1 );
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    3c26:	66 e6       	ldi	r22, 0x66	; 102
    3c28:	76 e6       	ldi	r23, 0x66	; 102
    3c2a:	86 ea       	ldi	r24, 0xA6	; 166
    3c2c:	9f e3       	ldi	r25, 0x3F	; 63
    3c2e:	2a e9       	ldi	r18, 0x9A	; 154
    3c30:	39 e9       	ldi	r19, 0x99	; 153
    3c32:	49 e9       	ldi	r20, 0x99	; 153
    3c34:	5f e3       	ldi	r21, 0x3F	; 63
    3c36:	0f 2e       	mov	r0, r31
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	ef 2e       	mov	r14, r31
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	ff 2e       	mov	r15, r31
    3c40:	f0 e8       	ldi	r31, 0x80	; 128
    3c42:	0f 2f       	mov	r16, r31
    3c44:	ff eb       	ldi	r31, 0xBF	; 191
    3c46:	1f 2f       	mov	r17, r31
    3c48:	f0 2d       	mov	r31, r0
    3c4a:	57 01       	movw	r10, r14
    3c4c:	68 01       	movw	r12, r16
    3c4e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    3c52:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <head_moving>
    3c56:	89 2b       	or	r24, r25
    3c58:	e1 f7       	brne	.-8      	; 0x3c52 <run_vacuum_test+0x44>
    3c5a:	80 e9       	ldi	r24, 0x90	; 144
    3c5c:	91 e0       	ldi	r25, 0x01	; 1
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	f1 f7       	brne	.-4      	; 0x3c5e <run_vacuum_test+0x50>

	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

}
    3c62:	1f 91       	pop	r17
    3c64:	0f 91       	pop	r16
    3c66:	ff 90       	pop	r15
    3c68:	ef 90       	pop	r14
    3c6a:	df 90       	pop	r13
    3c6c:	cf 90       	pop	r12
    3c6e:	bf 90       	pop	r11
    3c70:	af 90       	pop	r10
    3c72:	08 95       	ret

00003c74 <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    3c74:	4f 99       	sbic	0x09, 7	; 9
    3c76:	03 c0       	rjmp	.+6      	; 0x3c7e <vacuum_test+0xa>
		
		printPgmString(PSTR("y\r\n"));
    3c78:	89 ef       	ldi	r24, 0xF9	; 249
    3c7a:	94 e0       	ldi	r25, 0x04	; 4
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <vacuum_test+0xe>

	} else {

		printPgmString(PSTR("n\r\n"));
    3c7e:	85 ef       	ldi	r24, 0xF5	; 245
    3c80:	94 e0       	ldi	r25, 0x04	; 4
    3c82:	0e 94 1f 1b 	call	0x363e	; 0x363e <printPgmString>
    3c86:	08 95       	ret

00003c88 <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    3c88:	e7 e0       	ldi	r30, 0x07	; 7
    3c8a:	f1 e0       	ldi	r31, 0x01	; 1
    3c8c:	80 81       	ld	r24, Z
    3c8e:	80 68       	ori	r24, 0x80	; 128
    3c90:	80 83       	st	Z, r24
}
    3c92:	08 95       	ret

00003c94 <tape_knock>:
{
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

 set_busy( TRUE );
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    3c9c:	80 91 08 01 	lds	r24, 0x0108
    3ca0:	8f 77       	andi	r24, 0x7F	; 127
    3ca2:	80 93 08 01 	sts	0x0108, r24
    3ca6:	80 ed       	ldi	r24, 0xD0	; 208
    3ca8:	97 e0       	ldi	r25, 0x07	; 7
    3caa:	20 e9       	ldi	r18, 0x90	; 144
    3cac:	31 e0       	ldi	r19, 0x01	; 1
    3cae:	f9 01       	movw	r30, r18
    3cb0:	31 97       	sbiw	r30, 0x01	; 1
    3cb2:	f1 f7       	brne	.-4      	; 0x3cb0 <tape_knock+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb6:	d9 f7       	brne	.-10     	; 0x3cae <tape_knock+0x1a>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    3cb8:	80 91 08 01 	lds	r24, 0x0108
    3cbc:	80 68       	ori	r24, 0x80	; 128
    3cbe:	80 93 08 01 	sts	0x0108, r24
    3cc2:	80 ed       	ldi	r24, 0xD0	; 208
    3cc4:	97 e0       	ldi	r25, 0x07	; 7
    3cc6:	20 e9       	ldi	r18, 0x90	; 144
    3cc8:	31 e0       	ldi	r19, 0x01	; 1
    3cca:	f9 01       	movw	r30, r18
    3ccc:	31 97       	sbiw	r30, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <tape_knock+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd2:	d9 f7       	brne	.-10     	; 0x3cca <tape_knock+0x36>

	_delay_ms( TAPE_KNOCK_SETTLE );

 set_busy( FALSE );
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <set_busy>
}
    3cdc:	08 95       	ret

00003cde <__subsf3>:
    3cde:	50 58       	subi	r21, 0x80	; 128

00003ce0 <__addsf3>:
    3ce0:	bb 27       	eor	r27, r27
    3ce2:	aa 27       	eor	r26, r26
    3ce4:	0e d0       	rcall	.+28     	; 0x3d02 <__addsf3x>
    3ce6:	11 c2       	rjmp	.+1058   	; 0x410a <__fp_round>
    3ce8:	02 d2       	rcall	.+1028   	; 0x40ee <__fp_pscA>
    3cea:	30 f0       	brcs	.+12     	; 0x3cf8 <__addsf3+0x18>
    3cec:	07 d2       	rcall	.+1038   	; 0x40fc <__fp_pscB>
    3cee:	20 f0       	brcs	.+8      	; 0x3cf8 <__addsf3+0x18>
    3cf0:	31 f4       	brne	.+12     	; 0x3cfe <__addsf3+0x1e>
    3cf2:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf4:	11 f4       	brne	.+4      	; 0x3cfa <__addsf3+0x1a>
    3cf6:	1e f4       	brtc	.+6      	; 0x3cfe <__addsf3+0x1e>
    3cf8:	d2 c1       	rjmp	.+932    	; 0x409e <__fp_nan>
    3cfa:	0e f4       	brtc	.+2      	; 0x3cfe <__addsf3+0x1e>
    3cfc:	e0 95       	com	r30
    3cfe:	e7 fb       	bst	r30, 7
    3d00:	9f c1       	rjmp	.+830    	; 0x4040 <__fp_inf>

00003d02 <__addsf3x>:
    3d02:	e9 2f       	mov	r30, r25
    3d04:	13 d2       	rcall	.+1062   	; 0x412c <__fp_split3>
    3d06:	80 f3       	brcs	.-32     	; 0x3ce8 <__addsf3+0x8>
    3d08:	ba 17       	cp	r27, r26
    3d0a:	62 07       	cpc	r22, r18
    3d0c:	73 07       	cpc	r23, r19
    3d0e:	84 07       	cpc	r24, r20
    3d10:	95 07       	cpc	r25, r21
    3d12:	18 f0       	brcs	.+6      	; 0x3d1a <__addsf3x+0x18>
    3d14:	71 f4       	brne	.+28     	; 0x3d32 <__addsf3x+0x30>
    3d16:	9e f5       	brtc	.+102    	; 0x3d7e <__addsf3x+0x7c>
    3d18:	42 c2       	rjmp	.+1156   	; 0x419e <__fp_zero>
    3d1a:	0e f4       	brtc	.+2      	; 0x3d1e <__addsf3x+0x1c>
    3d1c:	e0 95       	com	r30
    3d1e:	0b 2e       	mov	r0, r27
    3d20:	ba 2f       	mov	r27, r26
    3d22:	a0 2d       	mov	r26, r0
    3d24:	0b 01       	movw	r0, r22
    3d26:	b9 01       	movw	r22, r18
    3d28:	90 01       	movw	r18, r0
    3d2a:	0c 01       	movw	r0, r24
    3d2c:	ca 01       	movw	r24, r20
    3d2e:	a0 01       	movw	r20, r0
    3d30:	11 24       	eor	r1, r1
    3d32:	ff 27       	eor	r31, r31
    3d34:	59 1b       	sub	r21, r25
    3d36:	99 f0       	breq	.+38     	; 0x3d5e <__addsf3x+0x5c>
    3d38:	59 3f       	cpi	r21, 0xF9	; 249
    3d3a:	50 f4       	brcc	.+20     	; 0x3d50 <__addsf3x+0x4e>
    3d3c:	50 3e       	cpi	r21, 0xE0	; 224
    3d3e:	68 f1       	brcs	.+90     	; 0x3d9a <__addsf3x+0x98>
    3d40:	1a 16       	cp	r1, r26
    3d42:	f0 40       	sbci	r31, 0x00	; 0
    3d44:	a2 2f       	mov	r26, r18
    3d46:	23 2f       	mov	r18, r19
    3d48:	34 2f       	mov	r19, r20
    3d4a:	44 27       	eor	r20, r20
    3d4c:	58 5f       	subi	r21, 0xF8	; 248
    3d4e:	f3 cf       	rjmp	.-26     	; 0x3d36 <__addsf3x+0x34>
    3d50:	46 95       	lsr	r20
    3d52:	37 95       	ror	r19
    3d54:	27 95       	ror	r18
    3d56:	a7 95       	ror	r26
    3d58:	f0 40       	sbci	r31, 0x00	; 0
    3d5a:	53 95       	inc	r21
    3d5c:	c9 f7       	brne	.-14     	; 0x3d50 <__addsf3x+0x4e>
    3d5e:	7e f4       	brtc	.+30     	; 0x3d7e <__addsf3x+0x7c>
    3d60:	1f 16       	cp	r1, r31
    3d62:	ba 0b       	sbc	r27, r26
    3d64:	62 0b       	sbc	r22, r18
    3d66:	73 0b       	sbc	r23, r19
    3d68:	84 0b       	sbc	r24, r20
    3d6a:	ba f0       	brmi	.+46     	; 0x3d9a <__addsf3x+0x98>
    3d6c:	91 50       	subi	r25, 0x01	; 1
    3d6e:	a1 f0       	breq	.+40     	; 0x3d98 <__addsf3x+0x96>
    3d70:	ff 0f       	add	r31, r31
    3d72:	bb 1f       	adc	r27, r27
    3d74:	66 1f       	adc	r22, r22
    3d76:	77 1f       	adc	r23, r23
    3d78:	88 1f       	adc	r24, r24
    3d7a:	c2 f7       	brpl	.-16     	; 0x3d6c <__addsf3x+0x6a>
    3d7c:	0e c0       	rjmp	.+28     	; 0x3d9a <__addsf3x+0x98>
    3d7e:	ba 0f       	add	r27, r26
    3d80:	62 1f       	adc	r22, r18
    3d82:	73 1f       	adc	r23, r19
    3d84:	84 1f       	adc	r24, r20
    3d86:	48 f4       	brcc	.+18     	; 0x3d9a <__addsf3x+0x98>
    3d88:	87 95       	ror	r24
    3d8a:	77 95       	ror	r23
    3d8c:	67 95       	ror	r22
    3d8e:	b7 95       	ror	r27
    3d90:	f7 95       	ror	r31
    3d92:	9e 3f       	cpi	r25, 0xFE	; 254
    3d94:	08 f0       	brcs	.+2      	; 0x3d98 <__addsf3x+0x96>
    3d96:	b3 cf       	rjmp	.-154    	; 0x3cfe <__addsf3+0x1e>
    3d98:	93 95       	inc	r25
    3d9a:	88 0f       	add	r24, r24
    3d9c:	08 f0       	brcs	.+2      	; 0x3da0 <__addsf3x+0x9e>
    3d9e:	99 27       	eor	r25, r25
    3da0:	ee 0f       	add	r30, r30
    3da2:	97 95       	ror	r25
    3da4:	87 95       	ror	r24
    3da6:	08 95       	ret

00003da8 <atan>:
    3da8:	df 93       	push	r29
    3daa:	dd 27       	eor	r29, r29
    3dac:	b9 2f       	mov	r27, r25
    3dae:	bf 77       	andi	r27, 0x7F	; 127
    3db0:	40 e8       	ldi	r20, 0x80	; 128
    3db2:	5f e3       	ldi	r21, 0x3F	; 63
    3db4:	16 16       	cp	r1, r22
    3db6:	17 06       	cpc	r1, r23
    3db8:	48 07       	cpc	r20, r24
    3dba:	5b 07       	cpc	r21, r27
    3dbc:	10 f4       	brcc	.+4      	; 0x3dc2 <atan+0x1a>
    3dbe:	d9 2f       	mov	r29, r25
    3dc0:	f9 d1       	rcall	.+1010   	; 0x41b4 <inverse>
    3dc2:	9f 93       	push	r25
    3dc4:	8f 93       	push	r24
    3dc6:	7f 93       	push	r23
    3dc8:	6f 93       	push	r22
    3dca:	23 d3       	rcall	.+1606   	; 0x4412 <square>
    3dcc:	ee e5       	ldi	r30, 0x5E	; 94
    3dce:	f1 e0       	ldi	r31, 0x01	; 1
    3dd0:	69 d1       	rcall	.+722    	; 0x40a4 <__fp_powser>
    3dd2:	9b d1       	rcall	.+822    	; 0x410a <__fp_round>
    3dd4:	2f 91       	pop	r18
    3dd6:	3f 91       	pop	r19
    3dd8:	4f 91       	pop	r20
    3dda:	5f 91       	pop	r21
    3ddc:	61 d2       	rcall	.+1218   	; 0x42a0 <__mulsf3x>
    3dde:	dd 23       	and	r29, r29
    3de0:	49 f0       	breq	.+18     	; 0x3df4 <atan+0x4c>
    3de2:	90 58       	subi	r25, 0x80	; 128
    3de4:	a2 ea       	ldi	r26, 0xA2	; 162
    3de6:	2a ed       	ldi	r18, 0xDA	; 218
    3de8:	3f e0       	ldi	r19, 0x0F	; 15
    3dea:	49 ec       	ldi	r20, 0xC9	; 201
    3dec:	5f e3       	ldi	r21, 0x3F	; 63
    3dee:	d0 78       	andi	r29, 0x80	; 128
    3df0:	5d 27       	eor	r21, r29
    3df2:	87 df       	rcall	.-242    	; 0x3d02 <__addsf3x>
    3df4:	df 91       	pop	r29
    3df6:	89 c1       	rjmp	.+786    	; 0x410a <__fp_round>

00003df8 <ceil>:
    3df8:	bb d1       	rcall	.+886    	; 0x4170 <__fp_trunc>
    3dfa:	80 f0       	brcs	.+32     	; 0x3e1c <ceil+0x24>
    3dfc:	9f 37       	cpi	r25, 0x7F	; 127
    3dfe:	40 f4       	brcc	.+16     	; 0x3e10 <ceil+0x18>
    3e00:	91 11       	cpse	r25, r1
    3e02:	0e f4       	brtc	.+2      	; 0x3e06 <ceil+0xe>
    3e04:	cd c1       	rjmp	.+922    	; 0x41a0 <__fp_szero>
    3e06:	60 e0       	ldi	r22, 0x00	; 0
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	80 e8       	ldi	r24, 0x80	; 128
    3e0c:	9f e3       	ldi	r25, 0x3F	; 63
    3e0e:	08 95       	ret
    3e10:	26 f0       	brts	.+8      	; 0x3e1a <ceil+0x22>
    3e12:	1b 16       	cp	r1, r27
    3e14:	61 1d       	adc	r22, r1
    3e16:	71 1d       	adc	r23, r1
    3e18:	81 1d       	adc	r24, r1
    3e1a:	18 c1       	rjmp	.+560    	; 0x404c <__fp_mintl>
    3e1c:	32 c1       	rjmp	.+612    	; 0x4082 <__fp_mpack>

00003e1e <__cmpsf2>:
    3e1e:	ec d0       	rcall	.+472    	; 0x3ff8 <__fp_cmp>
    3e20:	08 f4       	brcc	.+2      	; 0x3e24 <__cmpsf2+0x6>
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	08 95       	ret

00003e26 <__divsf3>:
    3e26:	0c d0       	rcall	.+24     	; 0x3e40 <__divsf3x>
    3e28:	70 c1       	rjmp	.+736    	; 0x410a <__fp_round>
    3e2a:	68 d1       	rcall	.+720    	; 0x40fc <__fp_pscB>
    3e2c:	40 f0       	brcs	.+16     	; 0x3e3e <__divsf3+0x18>
    3e2e:	5f d1       	rcall	.+702    	; 0x40ee <__fp_pscA>
    3e30:	30 f0       	brcs	.+12     	; 0x3e3e <__divsf3+0x18>
    3e32:	21 f4       	brne	.+8      	; 0x3e3c <__divsf3+0x16>
    3e34:	5f 3f       	cpi	r21, 0xFF	; 255
    3e36:	19 f0       	breq	.+6      	; 0x3e3e <__divsf3+0x18>
    3e38:	03 c1       	rjmp	.+518    	; 0x4040 <__fp_inf>
    3e3a:	51 11       	cpse	r21, r1
    3e3c:	b1 c1       	rjmp	.+866    	; 0x41a0 <__fp_szero>
    3e3e:	2f c1       	rjmp	.+606    	; 0x409e <__fp_nan>

00003e40 <__divsf3x>:
    3e40:	75 d1       	rcall	.+746    	; 0x412c <__fp_split3>
    3e42:	98 f3       	brcs	.-26     	; 0x3e2a <__divsf3+0x4>

00003e44 <__divsf3_pse>:
    3e44:	99 23       	and	r25, r25
    3e46:	c9 f3       	breq	.-14     	; 0x3e3a <__divsf3+0x14>
    3e48:	55 23       	and	r21, r21
    3e4a:	b1 f3       	breq	.-20     	; 0x3e38 <__divsf3+0x12>
    3e4c:	95 1b       	sub	r25, r21
    3e4e:	55 0b       	sbc	r21, r21
    3e50:	bb 27       	eor	r27, r27
    3e52:	aa 27       	eor	r26, r26
    3e54:	62 17       	cp	r22, r18
    3e56:	73 07       	cpc	r23, r19
    3e58:	84 07       	cpc	r24, r20
    3e5a:	38 f0       	brcs	.+14     	; 0x3e6a <__divsf3_pse+0x26>
    3e5c:	9f 5f       	subi	r25, 0xFF	; 255
    3e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e60:	22 0f       	add	r18, r18
    3e62:	33 1f       	adc	r19, r19
    3e64:	44 1f       	adc	r20, r20
    3e66:	aa 1f       	adc	r26, r26
    3e68:	a9 f3       	breq	.-22     	; 0x3e54 <__divsf3_pse+0x10>
    3e6a:	33 d0       	rcall	.+102    	; 0x3ed2 <__divsf3_pse+0x8e>
    3e6c:	0e 2e       	mov	r0, r30
    3e6e:	3a f0       	brmi	.+14     	; 0x3e7e <__divsf3_pse+0x3a>
    3e70:	e0 e8       	ldi	r30, 0x80	; 128
    3e72:	30 d0       	rcall	.+96     	; 0x3ed4 <__divsf3_pse+0x90>
    3e74:	91 50       	subi	r25, 0x01	; 1
    3e76:	50 40       	sbci	r21, 0x00	; 0
    3e78:	e6 95       	lsr	r30
    3e7a:	00 1c       	adc	r0, r0
    3e7c:	ca f7       	brpl	.-14     	; 0x3e70 <__divsf3_pse+0x2c>
    3e7e:	29 d0       	rcall	.+82     	; 0x3ed2 <__divsf3_pse+0x8e>
    3e80:	fe 2f       	mov	r31, r30
    3e82:	27 d0       	rcall	.+78     	; 0x3ed2 <__divsf3_pse+0x8e>
    3e84:	66 0f       	add	r22, r22
    3e86:	77 1f       	adc	r23, r23
    3e88:	88 1f       	adc	r24, r24
    3e8a:	bb 1f       	adc	r27, r27
    3e8c:	26 17       	cp	r18, r22
    3e8e:	37 07       	cpc	r19, r23
    3e90:	48 07       	cpc	r20, r24
    3e92:	ab 07       	cpc	r26, r27
    3e94:	b0 e8       	ldi	r27, 0x80	; 128
    3e96:	09 f0       	breq	.+2      	; 0x3e9a <__divsf3_pse+0x56>
    3e98:	bb 0b       	sbc	r27, r27
    3e9a:	80 2d       	mov	r24, r0
    3e9c:	bf 01       	movw	r22, r30
    3e9e:	ff 27       	eor	r31, r31
    3ea0:	93 58       	subi	r25, 0x83	; 131
    3ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ea4:	2a f0       	brmi	.+10     	; 0x3eb0 <__divsf3_pse+0x6c>
    3ea6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ea8:	51 05       	cpc	r21, r1
    3eaa:	68 f0       	brcs	.+26     	; 0x3ec6 <__divsf3_pse+0x82>
    3eac:	c9 c0       	rjmp	.+402    	; 0x4040 <__fp_inf>
    3eae:	78 c1       	rjmp	.+752    	; 0x41a0 <__fp_szero>
    3eb0:	5f 3f       	cpi	r21, 0xFF	; 255
    3eb2:	ec f3       	brlt	.-6      	; 0x3eae <__divsf3_pse+0x6a>
    3eb4:	98 3e       	cpi	r25, 0xE8	; 232
    3eb6:	dc f3       	brlt	.-10     	; 0x3eae <__divsf3_pse+0x6a>
    3eb8:	86 95       	lsr	r24
    3eba:	77 95       	ror	r23
    3ebc:	67 95       	ror	r22
    3ebe:	b7 95       	ror	r27
    3ec0:	f7 95       	ror	r31
    3ec2:	9f 5f       	subi	r25, 0xFF	; 255
    3ec4:	c9 f7       	brne	.-14     	; 0x3eb8 <__divsf3_pse+0x74>
    3ec6:	88 0f       	add	r24, r24
    3ec8:	91 1d       	adc	r25, r1
    3eca:	96 95       	lsr	r25
    3ecc:	87 95       	ror	r24
    3ece:	97 f9       	bld	r25, 7
    3ed0:	08 95       	ret
    3ed2:	e1 e0       	ldi	r30, 0x01	; 1
    3ed4:	66 0f       	add	r22, r22
    3ed6:	77 1f       	adc	r23, r23
    3ed8:	88 1f       	adc	r24, r24
    3eda:	bb 1f       	adc	r27, r27
    3edc:	62 17       	cp	r22, r18
    3ede:	73 07       	cpc	r23, r19
    3ee0:	84 07       	cpc	r24, r20
    3ee2:	ba 07       	cpc	r27, r26
    3ee4:	20 f0       	brcs	.+8      	; 0x3eee <__divsf3_pse+0xaa>
    3ee6:	62 1b       	sub	r22, r18
    3ee8:	73 0b       	sbc	r23, r19
    3eea:	84 0b       	sbc	r24, r20
    3eec:	ba 0b       	sbc	r27, r26
    3eee:	ee 1f       	adc	r30, r30
    3ef0:	88 f7       	brcc	.-30     	; 0x3ed4 <__divsf3_pse+0x90>
    3ef2:	e0 95       	com	r30
    3ef4:	08 95       	ret

00003ef6 <__fixsfsi>:
    3ef6:	04 d0       	rcall	.+8      	; 0x3f00 <__fixunssfsi>
    3ef8:	68 94       	set
    3efa:	b1 11       	cpse	r27, r1
    3efc:	51 c1       	rjmp	.+674    	; 0x41a0 <__fp_szero>
    3efe:	08 95       	ret

00003f00 <__fixunssfsi>:
    3f00:	1d d1       	rcall	.+570    	; 0x413c <__fp_splitA>
    3f02:	88 f0       	brcs	.+34     	; 0x3f26 <__fixunssfsi+0x26>
    3f04:	9f 57       	subi	r25, 0x7F	; 127
    3f06:	90 f0       	brcs	.+36     	; 0x3f2c <__fixunssfsi+0x2c>
    3f08:	b9 2f       	mov	r27, r25
    3f0a:	99 27       	eor	r25, r25
    3f0c:	b7 51       	subi	r27, 0x17	; 23
    3f0e:	a0 f0       	brcs	.+40     	; 0x3f38 <__fixunssfsi+0x38>
    3f10:	d1 f0       	breq	.+52     	; 0x3f46 <__fixunssfsi+0x46>
    3f12:	66 0f       	add	r22, r22
    3f14:	77 1f       	adc	r23, r23
    3f16:	88 1f       	adc	r24, r24
    3f18:	99 1f       	adc	r25, r25
    3f1a:	1a f0       	brmi	.+6      	; 0x3f22 <__fixunssfsi+0x22>
    3f1c:	ba 95       	dec	r27
    3f1e:	c9 f7       	brne	.-14     	; 0x3f12 <__fixunssfsi+0x12>
    3f20:	12 c0       	rjmp	.+36     	; 0x3f46 <__fixunssfsi+0x46>
    3f22:	b1 30       	cpi	r27, 0x01	; 1
    3f24:	81 f0       	breq	.+32     	; 0x3f46 <__fixunssfsi+0x46>
    3f26:	3b d1       	rcall	.+630    	; 0x419e <__fp_zero>
    3f28:	b1 e0       	ldi	r27, 0x01	; 1
    3f2a:	08 95       	ret
    3f2c:	38 c1       	rjmp	.+624    	; 0x419e <__fp_zero>
    3f2e:	67 2f       	mov	r22, r23
    3f30:	78 2f       	mov	r23, r24
    3f32:	88 27       	eor	r24, r24
    3f34:	b8 5f       	subi	r27, 0xF8	; 248
    3f36:	39 f0       	breq	.+14     	; 0x3f46 <__fixunssfsi+0x46>
    3f38:	b9 3f       	cpi	r27, 0xF9	; 249
    3f3a:	cc f3       	brlt	.-14     	; 0x3f2e <__fixunssfsi+0x2e>
    3f3c:	86 95       	lsr	r24
    3f3e:	77 95       	ror	r23
    3f40:	67 95       	ror	r22
    3f42:	b3 95       	inc	r27
    3f44:	d9 f7       	brne	.-10     	; 0x3f3c <__fixunssfsi+0x3c>
    3f46:	3e f4       	brtc	.+14     	; 0x3f56 <__fixunssfsi+0x56>
    3f48:	90 95       	com	r25
    3f4a:	80 95       	com	r24
    3f4c:	70 95       	com	r23
    3f4e:	61 95       	neg	r22
    3f50:	7f 4f       	sbci	r23, 0xFF	; 255
    3f52:	8f 4f       	sbci	r24, 0xFF	; 255
    3f54:	9f 4f       	sbci	r25, 0xFF	; 255
    3f56:	08 95       	ret

00003f58 <__floatunsisf>:
    3f58:	e8 94       	clt
    3f5a:	09 c0       	rjmp	.+18     	; 0x3f6e <__floatsisf+0x12>

00003f5c <__floatsisf>:
    3f5c:	97 fb       	bst	r25, 7
    3f5e:	3e f4       	brtc	.+14     	; 0x3f6e <__floatsisf+0x12>
    3f60:	90 95       	com	r25
    3f62:	80 95       	com	r24
    3f64:	70 95       	com	r23
    3f66:	61 95       	neg	r22
    3f68:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6e:	99 23       	and	r25, r25
    3f70:	a9 f0       	breq	.+42     	; 0x3f9c <__floatsisf+0x40>
    3f72:	f9 2f       	mov	r31, r25
    3f74:	96 e9       	ldi	r25, 0x96	; 150
    3f76:	bb 27       	eor	r27, r27
    3f78:	93 95       	inc	r25
    3f7a:	f6 95       	lsr	r31
    3f7c:	87 95       	ror	r24
    3f7e:	77 95       	ror	r23
    3f80:	67 95       	ror	r22
    3f82:	b7 95       	ror	r27
    3f84:	f1 11       	cpse	r31, r1
    3f86:	f8 cf       	rjmp	.-16     	; 0x3f78 <__floatsisf+0x1c>
    3f88:	fa f4       	brpl	.+62     	; 0x3fc8 <__floatsisf+0x6c>
    3f8a:	bb 0f       	add	r27, r27
    3f8c:	11 f4       	brne	.+4      	; 0x3f92 <__floatsisf+0x36>
    3f8e:	60 ff       	sbrs	r22, 0
    3f90:	1b c0       	rjmp	.+54     	; 0x3fc8 <__floatsisf+0x6c>
    3f92:	6f 5f       	subi	r22, 0xFF	; 255
    3f94:	7f 4f       	sbci	r23, 0xFF	; 255
    3f96:	8f 4f       	sbci	r24, 0xFF	; 255
    3f98:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9a:	16 c0       	rjmp	.+44     	; 0x3fc8 <__floatsisf+0x6c>
    3f9c:	88 23       	and	r24, r24
    3f9e:	11 f0       	breq	.+4      	; 0x3fa4 <__floatsisf+0x48>
    3fa0:	96 e9       	ldi	r25, 0x96	; 150
    3fa2:	11 c0       	rjmp	.+34     	; 0x3fc6 <__floatsisf+0x6a>
    3fa4:	77 23       	and	r23, r23
    3fa6:	21 f0       	breq	.+8      	; 0x3fb0 <__floatsisf+0x54>
    3fa8:	9e e8       	ldi	r25, 0x8E	; 142
    3faa:	87 2f       	mov	r24, r23
    3fac:	76 2f       	mov	r23, r22
    3fae:	05 c0       	rjmp	.+10     	; 0x3fba <__floatsisf+0x5e>
    3fb0:	66 23       	and	r22, r22
    3fb2:	71 f0       	breq	.+28     	; 0x3fd0 <__floatsisf+0x74>
    3fb4:	96 e8       	ldi	r25, 0x86	; 134
    3fb6:	86 2f       	mov	r24, r22
    3fb8:	70 e0       	ldi	r23, 0x00	; 0
    3fba:	60 e0       	ldi	r22, 0x00	; 0
    3fbc:	2a f0       	brmi	.+10     	; 0x3fc8 <__floatsisf+0x6c>
    3fbe:	9a 95       	dec	r25
    3fc0:	66 0f       	add	r22, r22
    3fc2:	77 1f       	adc	r23, r23
    3fc4:	88 1f       	adc	r24, r24
    3fc6:	da f7       	brpl	.-10     	; 0x3fbe <__floatsisf+0x62>
    3fc8:	88 0f       	add	r24, r24
    3fca:	96 95       	lsr	r25
    3fcc:	87 95       	ror	r24
    3fce:	97 f9       	bld	r25, 7
    3fd0:	08 95       	ret

00003fd2 <floor>:
    3fd2:	ce d0       	rcall	.+412    	; 0x4170 <__fp_trunc>
    3fd4:	80 f0       	brcs	.+32     	; 0x3ff6 <floor+0x24>
    3fd6:	9f 37       	cpi	r25, 0x7F	; 127
    3fd8:	40 f4       	brcc	.+16     	; 0x3fea <floor+0x18>
    3fda:	91 11       	cpse	r25, r1
    3fdc:	0e f0       	brts	.+2      	; 0x3fe0 <floor+0xe>
    3fde:	e0 c0       	rjmp	.+448    	; 0x41a0 <__fp_szero>
    3fe0:	60 e0       	ldi	r22, 0x00	; 0
    3fe2:	70 e0       	ldi	r23, 0x00	; 0
    3fe4:	80 e8       	ldi	r24, 0x80	; 128
    3fe6:	9f eb       	ldi	r25, 0xBF	; 191
    3fe8:	08 95       	ret
    3fea:	26 f4       	brtc	.+8      	; 0x3ff4 <floor+0x22>
    3fec:	1b 16       	cp	r1, r27
    3fee:	61 1d       	adc	r22, r1
    3ff0:	71 1d       	adc	r23, r1
    3ff2:	81 1d       	adc	r24, r1
    3ff4:	2b c0       	rjmp	.+86     	; 0x404c <__fp_mintl>
    3ff6:	45 c0       	rjmp	.+138    	; 0x4082 <__fp_mpack>

00003ff8 <__fp_cmp>:
    3ff8:	99 0f       	add	r25, r25
    3ffa:	00 08       	sbc	r0, r0
    3ffc:	55 0f       	add	r21, r21
    3ffe:	aa 0b       	sbc	r26, r26
    4000:	e0 e8       	ldi	r30, 0x80	; 128
    4002:	fe ef       	ldi	r31, 0xFE	; 254
    4004:	16 16       	cp	r1, r22
    4006:	17 06       	cpc	r1, r23
    4008:	e8 07       	cpc	r30, r24
    400a:	f9 07       	cpc	r31, r25
    400c:	c0 f0       	brcs	.+48     	; 0x403e <__fp_cmp+0x46>
    400e:	12 16       	cp	r1, r18
    4010:	13 06       	cpc	r1, r19
    4012:	e4 07       	cpc	r30, r20
    4014:	f5 07       	cpc	r31, r21
    4016:	98 f0       	brcs	.+38     	; 0x403e <__fp_cmp+0x46>
    4018:	62 1b       	sub	r22, r18
    401a:	73 0b       	sbc	r23, r19
    401c:	84 0b       	sbc	r24, r20
    401e:	95 0b       	sbc	r25, r21
    4020:	39 f4       	brne	.+14     	; 0x4030 <__fp_cmp+0x38>
    4022:	0a 26       	eor	r0, r26
    4024:	61 f0       	breq	.+24     	; 0x403e <__fp_cmp+0x46>
    4026:	23 2b       	or	r18, r19
    4028:	24 2b       	or	r18, r20
    402a:	25 2b       	or	r18, r21
    402c:	21 f4       	brne	.+8      	; 0x4036 <__fp_cmp+0x3e>
    402e:	08 95       	ret
    4030:	0a 26       	eor	r0, r26
    4032:	09 f4       	brne	.+2      	; 0x4036 <__fp_cmp+0x3e>
    4034:	a1 40       	sbci	r26, 0x01	; 1
    4036:	a6 95       	lsr	r26
    4038:	8f ef       	ldi	r24, 0xFF	; 255
    403a:	81 1d       	adc	r24, r1
    403c:	81 1d       	adc	r24, r1
    403e:	08 95       	ret

00004040 <__fp_inf>:
    4040:	97 f9       	bld	r25, 7
    4042:	9f 67       	ori	r25, 0x7F	; 127
    4044:	80 e8       	ldi	r24, 0x80	; 128
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	08 95       	ret

0000404c <__fp_mintl>:
    404c:	88 23       	and	r24, r24
    404e:	71 f4       	brne	.+28     	; 0x406c <__fp_mintl+0x20>
    4050:	77 23       	and	r23, r23
    4052:	21 f0       	breq	.+8      	; 0x405c <__fp_mintl+0x10>
    4054:	98 50       	subi	r25, 0x08	; 8
    4056:	87 2b       	or	r24, r23
    4058:	76 2f       	mov	r23, r22
    405a:	07 c0       	rjmp	.+14     	; 0x406a <__fp_mintl+0x1e>
    405c:	66 23       	and	r22, r22
    405e:	11 f4       	brne	.+4      	; 0x4064 <__fp_mintl+0x18>
    4060:	99 27       	eor	r25, r25
    4062:	0d c0       	rjmp	.+26     	; 0x407e <__fp_mintl+0x32>
    4064:	90 51       	subi	r25, 0x10	; 16
    4066:	86 2b       	or	r24, r22
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	60 e0       	ldi	r22, 0x00	; 0
    406c:	2a f0       	brmi	.+10     	; 0x4078 <__fp_mintl+0x2c>
    406e:	9a 95       	dec	r25
    4070:	66 0f       	add	r22, r22
    4072:	77 1f       	adc	r23, r23
    4074:	88 1f       	adc	r24, r24
    4076:	da f7       	brpl	.-10     	; 0x406e <__fp_mintl+0x22>
    4078:	88 0f       	add	r24, r24
    407a:	96 95       	lsr	r25
    407c:	87 95       	ror	r24
    407e:	97 f9       	bld	r25, 7
    4080:	08 95       	ret

00004082 <__fp_mpack>:
    4082:	9f 3f       	cpi	r25, 0xFF	; 255
    4084:	31 f0       	breq	.+12     	; 0x4092 <__fp_mpack_finite+0xc>

00004086 <__fp_mpack_finite>:
    4086:	91 50       	subi	r25, 0x01	; 1
    4088:	20 f4       	brcc	.+8      	; 0x4092 <__fp_mpack_finite+0xc>
    408a:	87 95       	ror	r24
    408c:	77 95       	ror	r23
    408e:	67 95       	ror	r22
    4090:	b7 95       	ror	r27
    4092:	88 0f       	add	r24, r24
    4094:	91 1d       	adc	r25, r1
    4096:	96 95       	lsr	r25
    4098:	87 95       	ror	r24
    409a:	97 f9       	bld	r25, 7
    409c:	08 95       	ret

0000409e <__fp_nan>:
    409e:	9f ef       	ldi	r25, 0xFF	; 255
    40a0:	80 ec       	ldi	r24, 0xC0	; 192
    40a2:	08 95       	ret

000040a4 <__fp_powser>:
    40a4:	df 93       	push	r29
    40a6:	cf 93       	push	r28
    40a8:	1f 93       	push	r17
    40aa:	0f 93       	push	r16
    40ac:	ff 92       	push	r15
    40ae:	ef 92       	push	r14
    40b0:	df 92       	push	r13
    40b2:	7b 01       	movw	r14, r22
    40b4:	8c 01       	movw	r16, r24
    40b6:	68 94       	set
    40b8:	05 c0       	rjmp	.+10     	; 0x40c4 <__fp_powser+0x20>
    40ba:	da 2e       	mov	r13, r26
    40bc:	ef 01       	movw	r28, r30
    40be:	f0 d0       	rcall	.+480    	; 0x42a0 <__mulsf3x>
    40c0:	fe 01       	movw	r30, r28
    40c2:	e8 94       	clt
    40c4:	a5 91       	lpm	r26, Z+
    40c6:	25 91       	lpm	r18, Z+
    40c8:	35 91       	lpm	r19, Z+
    40ca:	45 91       	lpm	r20, Z+
    40cc:	55 91       	lpm	r21, Z+
    40ce:	ae f3       	brts	.-22     	; 0x40ba <__fp_powser+0x16>
    40d0:	ef 01       	movw	r28, r30
    40d2:	17 de       	rcall	.-978    	; 0x3d02 <__addsf3x>
    40d4:	fe 01       	movw	r30, r28
    40d6:	97 01       	movw	r18, r14
    40d8:	a8 01       	movw	r20, r16
    40da:	da 94       	dec	r13
    40dc:	79 f7       	brne	.-34     	; 0x40bc <__fp_powser+0x18>
    40de:	df 90       	pop	r13
    40e0:	ef 90       	pop	r14
    40e2:	ff 90       	pop	r15
    40e4:	0f 91       	pop	r16
    40e6:	1f 91       	pop	r17
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	08 95       	ret

000040ee <__fp_pscA>:
    40ee:	00 24       	eor	r0, r0
    40f0:	0a 94       	dec	r0
    40f2:	16 16       	cp	r1, r22
    40f4:	17 06       	cpc	r1, r23
    40f6:	18 06       	cpc	r1, r24
    40f8:	09 06       	cpc	r0, r25
    40fa:	08 95       	ret

000040fc <__fp_pscB>:
    40fc:	00 24       	eor	r0, r0
    40fe:	0a 94       	dec	r0
    4100:	12 16       	cp	r1, r18
    4102:	13 06       	cpc	r1, r19
    4104:	14 06       	cpc	r1, r20
    4106:	05 06       	cpc	r0, r21
    4108:	08 95       	ret

0000410a <__fp_round>:
    410a:	09 2e       	mov	r0, r25
    410c:	03 94       	inc	r0
    410e:	00 0c       	add	r0, r0
    4110:	11 f4       	brne	.+4      	; 0x4116 <__fp_round+0xc>
    4112:	88 23       	and	r24, r24
    4114:	52 f0       	brmi	.+20     	; 0x412a <__fp_round+0x20>
    4116:	bb 0f       	add	r27, r27
    4118:	40 f4       	brcc	.+16     	; 0x412a <__fp_round+0x20>
    411a:	bf 2b       	or	r27, r31
    411c:	11 f4       	brne	.+4      	; 0x4122 <__fp_round+0x18>
    411e:	60 ff       	sbrs	r22, 0
    4120:	04 c0       	rjmp	.+8      	; 0x412a <__fp_round+0x20>
    4122:	6f 5f       	subi	r22, 0xFF	; 255
    4124:	7f 4f       	sbci	r23, 0xFF	; 255
    4126:	8f 4f       	sbci	r24, 0xFF	; 255
    4128:	9f 4f       	sbci	r25, 0xFF	; 255
    412a:	08 95       	ret

0000412c <__fp_split3>:
    412c:	57 fd       	sbrc	r21, 7
    412e:	90 58       	subi	r25, 0x80	; 128
    4130:	44 0f       	add	r20, r20
    4132:	55 1f       	adc	r21, r21
    4134:	59 f0       	breq	.+22     	; 0x414c <__fp_splitA+0x10>
    4136:	5f 3f       	cpi	r21, 0xFF	; 255
    4138:	71 f0       	breq	.+28     	; 0x4156 <__fp_splitA+0x1a>
    413a:	47 95       	ror	r20

0000413c <__fp_splitA>:
    413c:	88 0f       	add	r24, r24
    413e:	97 fb       	bst	r25, 7
    4140:	99 1f       	adc	r25, r25
    4142:	61 f0       	breq	.+24     	; 0x415c <__fp_splitA+0x20>
    4144:	9f 3f       	cpi	r25, 0xFF	; 255
    4146:	79 f0       	breq	.+30     	; 0x4166 <__fp_splitA+0x2a>
    4148:	87 95       	ror	r24
    414a:	08 95       	ret
    414c:	12 16       	cp	r1, r18
    414e:	13 06       	cpc	r1, r19
    4150:	14 06       	cpc	r1, r20
    4152:	55 1f       	adc	r21, r21
    4154:	f2 cf       	rjmp	.-28     	; 0x413a <__fp_split3+0xe>
    4156:	46 95       	lsr	r20
    4158:	f1 df       	rcall	.-30     	; 0x413c <__fp_splitA>
    415a:	08 c0       	rjmp	.+16     	; 0x416c <__fp_splitA+0x30>
    415c:	16 16       	cp	r1, r22
    415e:	17 06       	cpc	r1, r23
    4160:	18 06       	cpc	r1, r24
    4162:	99 1f       	adc	r25, r25
    4164:	f1 cf       	rjmp	.-30     	; 0x4148 <__fp_splitA+0xc>
    4166:	86 95       	lsr	r24
    4168:	71 05       	cpc	r23, r1
    416a:	61 05       	cpc	r22, r1
    416c:	08 94       	sec
    416e:	08 95       	ret

00004170 <__fp_trunc>:
    4170:	e5 df       	rcall	.-54     	; 0x413c <__fp_splitA>
    4172:	a0 f0       	brcs	.+40     	; 0x419c <__fp_trunc+0x2c>
    4174:	be e7       	ldi	r27, 0x7E	; 126
    4176:	b9 17       	cp	r27, r25
    4178:	88 f4       	brcc	.+34     	; 0x419c <__fp_trunc+0x2c>
    417a:	bb 27       	eor	r27, r27
    417c:	9f 38       	cpi	r25, 0x8F	; 143
    417e:	60 f4       	brcc	.+24     	; 0x4198 <__fp_trunc+0x28>
    4180:	16 16       	cp	r1, r22
    4182:	b1 1d       	adc	r27, r1
    4184:	67 2f       	mov	r22, r23
    4186:	78 2f       	mov	r23, r24
    4188:	88 27       	eor	r24, r24
    418a:	98 5f       	subi	r25, 0xF8	; 248
    418c:	f7 cf       	rjmp	.-18     	; 0x417c <__fp_trunc+0xc>
    418e:	86 95       	lsr	r24
    4190:	77 95       	ror	r23
    4192:	67 95       	ror	r22
    4194:	b1 1d       	adc	r27, r1
    4196:	93 95       	inc	r25
    4198:	96 39       	cpi	r25, 0x96	; 150
    419a:	c8 f3       	brcs	.-14     	; 0x418e <__fp_trunc+0x1e>
    419c:	08 95       	ret

0000419e <__fp_zero>:
    419e:	e8 94       	clt

000041a0 <__fp_szero>:
    41a0:	bb 27       	eor	r27, r27
    41a2:	66 27       	eor	r22, r22
    41a4:	77 27       	eor	r23, r23
    41a6:	cb 01       	movw	r24, r22
    41a8:	97 f9       	bld	r25, 7
    41aa:	08 95       	ret

000041ac <__gesf2>:
    41ac:	25 df       	rcall	.-438    	; 0x3ff8 <__fp_cmp>
    41ae:	08 f4       	brcc	.+2      	; 0x41b2 <__gesf2+0x6>
    41b0:	8f ef       	ldi	r24, 0xFF	; 255
    41b2:	08 95       	ret

000041b4 <inverse>:
    41b4:	9b 01       	movw	r18, r22
    41b6:	ac 01       	movw	r20, r24
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	80 e8       	ldi	r24, 0x80	; 128
    41be:	9f e3       	ldi	r25, 0x3F	; 63
    41c0:	32 ce       	rjmp	.-924    	; 0x3e26 <__divsf3>

000041c2 <lround>:
    41c2:	bc df       	rcall	.-136    	; 0x413c <__fp_splitA>
    41c4:	58 f1       	brcs	.+86     	; 0x421c <lround+0x5a>
    41c6:	9e 57       	subi	r25, 0x7E	; 126
    41c8:	58 f1       	brcs	.+86     	; 0x4220 <lround+0x5e>
    41ca:	98 51       	subi	r25, 0x18	; 24
    41cc:	a0 f0       	brcs	.+40     	; 0x41f6 <lround+0x34>
    41ce:	e9 f0       	breq	.+58     	; 0x420a <lround+0x48>
    41d0:	98 30       	cpi	r25, 0x08	; 8
    41d2:	20 f5       	brcc	.+72     	; 0x421c <lround+0x5a>
    41d4:	09 2e       	mov	r0, r25
    41d6:	99 27       	eor	r25, r25
    41d8:	66 0f       	add	r22, r22
    41da:	77 1f       	adc	r23, r23
    41dc:	88 1f       	adc	r24, r24
    41de:	99 1f       	adc	r25, r25
    41e0:	0a 94       	dec	r0
    41e2:	d1 f7       	brne	.-12     	; 0x41d8 <lround+0x16>
    41e4:	12 c0       	rjmp	.+36     	; 0x420a <lround+0x48>
    41e6:	06 2e       	mov	r0, r22
    41e8:	67 2f       	mov	r22, r23
    41ea:	78 2f       	mov	r23, r24
    41ec:	88 27       	eor	r24, r24
    41ee:	98 5f       	subi	r25, 0xF8	; 248
    41f0:	11 f4       	brne	.+4      	; 0x41f6 <lround+0x34>
    41f2:	00 0c       	add	r0, r0
    41f4:	07 c0       	rjmp	.+14     	; 0x4204 <lround+0x42>
    41f6:	99 3f       	cpi	r25, 0xF9	; 249
    41f8:	b4 f3       	brlt	.-20     	; 0x41e6 <lround+0x24>
    41fa:	86 95       	lsr	r24
    41fc:	77 95       	ror	r23
    41fe:	67 95       	ror	r22
    4200:	93 95       	inc	r25
    4202:	d9 f7       	brne	.-10     	; 0x41fa <lround+0x38>
    4204:	61 1d       	adc	r22, r1
    4206:	71 1d       	adc	r23, r1
    4208:	81 1d       	adc	r24, r1
    420a:	3e f4       	brtc	.+14     	; 0x421a <lround+0x58>
    420c:	90 95       	com	r25
    420e:	80 95       	com	r24
    4210:	70 95       	com	r23
    4212:	61 95       	neg	r22
    4214:	7f 4f       	sbci	r23, 0xFF	; 255
    4216:	8f 4f       	sbci	r24, 0xFF	; 255
    4218:	9f 4f       	sbci	r25, 0xFF	; 255
    421a:	08 95       	ret
    421c:	68 94       	set
    421e:	c0 cf       	rjmp	.-128    	; 0x41a0 <__fp_szero>
    4220:	be cf       	rjmp	.-132    	; 0x419e <__fp_zero>

00004222 <modf>:
    4222:	fa 01       	movw	r30, r20
    4224:	dc 01       	movw	r26, r24
    4226:	aa 0f       	add	r26, r26
    4228:	bb 1f       	adc	r27, r27
    422a:	9b 01       	movw	r18, r22
    422c:	ac 01       	movw	r20, r24
    422e:	bf 57       	subi	r27, 0x7F	; 127
    4230:	28 f4       	brcc	.+10     	; 0x423c <modf+0x1a>
    4232:	22 27       	eor	r18, r18
    4234:	33 27       	eor	r19, r19
    4236:	44 27       	eor	r20, r20
    4238:	50 78       	andi	r21, 0x80	; 128
    423a:	1f c0       	rjmp	.+62     	; 0x427a <modf+0x58>
    423c:	b7 51       	subi	r27, 0x17	; 23
    423e:	88 f4       	brcc	.+34     	; 0x4262 <modf+0x40>
    4240:	ab 2f       	mov	r26, r27
    4242:	00 24       	eor	r0, r0
    4244:	46 95       	lsr	r20
    4246:	37 95       	ror	r19
    4248:	27 95       	ror	r18
    424a:	01 1c       	adc	r0, r1
    424c:	a3 95       	inc	r26
    424e:	d2 f3       	brmi	.-12     	; 0x4244 <modf+0x22>
    4250:	00 20       	and	r0, r0
    4252:	69 f0       	breq	.+26     	; 0x426e <modf+0x4c>
    4254:	22 0f       	add	r18, r18
    4256:	33 1f       	adc	r19, r19
    4258:	44 1f       	adc	r20, r20
    425a:	b3 95       	inc	r27
    425c:	da f3       	brmi	.-10     	; 0x4254 <modf+0x32>
    425e:	0d d0       	rcall	.+26     	; 0x427a <modf+0x58>
    4260:	3e cd       	rjmp	.-1412   	; 0x3cde <__subsf3>
    4262:	61 30       	cpi	r22, 0x01	; 1
    4264:	71 05       	cpc	r23, r1
    4266:	a0 e8       	ldi	r26, 0x80	; 128
    4268:	8a 07       	cpc	r24, r26
    426a:	b9 46       	sbci	r27, 0x69	; 105
    426c:	30 f4       	brcc	.+12     	; 0x427a <modf+0x58>
    426e:	9b 01       	movw	r18, r22
    4270:	ac 01       	movw	r20, r24
    4272:	66 27       	eor	r22, r22
    4274:	77 27       	eor	r23, r23
    4276:	88 27       	eor	r24, r24
    4278:	90 78       	andi	r25, 0x80	; 128
    427a:	30 96       	adiw	r30, 0x00	; 0
    427c:	21 f0       	breq	.+8      	; 0x4286 <modf+0x64>
    427e:	20 83       	st	Z, r18
    4280:	31 83       	std	Z+1, r19	; 0x01
    4282:	42 83       	std	Z+2, r20	; 0x02
    4284:	53 83       	std	Z+3, r21	; 0x03
    4286:	08 95       	ret

00004288 <__mulsf3>:
    4288:	0b d0       	rcall	.+22     	; 0x42a0 <__mulsf3x>
    428a:	3f cf       	rjmp	.-386    	; 0x410a <__fp_round>
    428c:	30 df       	rcall	.-416    	; 0x40ee <__fp_pscA>
    428e:	28 f0       	brcs	.+10     	; 0x429a <__mulsf3+0x12>
    4290:	35 df       	rcall	.-406    	; 0x40fc <__fp_pscB>
    4292:	18 f0       	brcs	.+6      	; 0x429a <__mulsf3+0x12>
    4294:	95 23       	and	r25, r21
    4296:	09 f0       	breq	.+2      	; 0x429a <__mulsf3+0x12>
    4298:	d3 ce       	rjmp	.-602    	; 0x4040 <__fp_inf>
    429a:	01 cf       	rjmp	.-510    	; 0x409e <__fp_nan>
    429c:	11 24       	eor	r1, r1
    429e:	80 cf       	rjmp	.-256    	; 0x41a0 <__fp_szero>

000042a0 <__mulsf3x>:
    42a0:	45 df       	rcall	.-374    	; 0x412c <__fp_split3>
    42a2:	a0 f3       	brcs	.-24     	; 0x428c <__mulsf3+0x4>

000042a4 <__mulsf3_pse>:
    42a4:	95 9f       	mul	r25, r21
    42a6:	d1 f3       	breq	.-12     	; 0x429c <__mulsf3+0x14>
    42a8:	95 0f       	add	r25, r21
    42aa:	50 e0       	ldi	r21, 0x00	; 0
    42ac:	55 1f       	adc	r21, r21
    42ae:	62 9f       	mul	r22, r18
    42b0:	f0 01       	movw	r30, r0
    42b2:	72 9f       	mul	r23, r18
    42b4:	bb 27       	eor	r27, r27
    42b6:	f0 0d       	add	r31, r0
    42b8:	b1 1d       	adc	r27, r1
    42ba:	63 9f       	mul	r22, r19
    42bc:	aa 27       	eor	r26, r26
    42be:	f0 0d       	add	r31, r0
    42c0:	b1 1d       	adc	r27, r1
    42c2:	aa 1f       	adc	r26, r26
    42c4:	64 9f       	mul	r22, r20
    42c6:	66 27       	eor	r22, r22
    42c8:	b0 0d       	add	r27, r0
    42ca:	a1 1d       	adc	r26, r1
    42cc:	66 1f       	adc	r22, r22
    42ce:	82 9f       	mul	r24, r18
    42d0:	22 27       	eor	r18, r18
    42d2:	b0 0d       	add	r27, r0
    42d4:	a1 1d       	adc	r26, r1
    42d6:	62 1f       	adc	r22, r18
    42d8:	73 9f       	mul	r23, r19
    42da:	b0 0d       	add	r27, r0
    42dc:	a1 1d       	adc	r26, r1
    42de:	62 1f       	adc	r22, r18
    42e0:	83 9f       	mul	r24, r19
    42e2:	a0 0d       	add	r26, r0
    42e4:	61 1d       	adc	r22, r1
    42e6:	22 1f       	adc	r18, r18
    42e8:	74 9f       	mul	r23, r20
    42ea:	33 27       	eor	r19, r19
    42ec:	a0 0d       	add	r26, r0
    42ee:	61 1d       	adc	r22, r1
    42f0:	23 1f       	adc	r18, r19
    42f2:	84 9f       	mul	r24, r20
    42f4:	60 0d       	add	r22, r0
    42f6:	21 1d       	adc	r18, r1
    42f8:	82 2f       	mov	r24, r18
    42fa:	76 2f       	mov	r23, r22
    42fc:	6a 2f       	mov	r22, r26
    42fe:	11 24       	eor	r1, r1
    4300:	9f 57       	subi	r25, 0x7F	; 127
    4302:	50 40       	sbci	r21, 0x00	; 0
    4304:	8a f0       	brmi	.+34     	; 0x4328 <__mulsf3_pse+0x84>
    4306:	e1 f0       	breq	.+56     	; 0x4340 <__mulsf3_pse+0x9c>
    4308:	88 23       	and	r24, r24
    430a:	4a f0       	brmi	.+18     	; 0x431e <__mulsf3_pse+0x7a>
    430c:	ee 0f       	add	r30, r30
    430e:	ff 1f       	adc	r31, r31
    4310:	bb 1f       	adc	r27, r27
    4312:	66 1f       	adc	r22, r22
    4314:	77 1f       	adc	r23, r23
    4316:	88 1f       	adc	r24, r24
    4318:	91 50       	subi	r25, 0x01	; 1
    431a:	50 40       	sbci	r21, 0x00	; 0
    431c:	a9 f7       	brne	.-22     	; 0x4308 <__mulsf3_pse+0x64>
    431e:	9e 3f       	cpi	r25, 0xFE	; 254
    4320:	51 05       	cpc	r21, r1
    4322:	70 f0       	brcs	.+28     	; 0x4340 <__mulsf3_pse+0x9c>
    4324:	8d ce       	rjmp	.-742    	; 0x4040 <__fp_inf>
    4326:	3c cf       	rjmp	.-392    	; 0x41a0 <__fp_szero>
    4328:	5f 3f       	cpi	r21, 0xFF	; 255
    432a:	ec f3       	brlt	.-6      	; 0x4326 <__mulsf3_pse+0x82>
    432c:	98 3e       	cpi	r25, 0xE8	; 232
    432e:	dc f3       	brlt	.-10     	; 0x4326 <__mulsf3_pse+0x82>
    4330:	86 95       	lsr	r24
    4332:	77 95       	ror	r23
    4334:	67 95       	ror	r22
    4336:	b7 95       	ror	r27
    4338:	f7 95       	ror	r31
    433a:	e7 95       	ror	r30
    433c:	9f 5f       	subi	r25, 0xFF	; 255
    433e:	c1 f7       	brne	.-16     	; 0x4330 <__mulsf3_pse+0x8c>
    4340:	fe 2b       	or	r31, r30
    4342:	88 0f       	add	r24, r24
    4344:	91 1d       	adc	r25, r1
    4346:	96 95       	lsr	r25
    4348:	87 95       	ror	r24
    434a:	97 f9       	bld	r25, 7
    434c:	08 95       	ret

0000434e <round>:
    434e:	f6 de       	rcall	.-532    	; 0x413c <__fp_splitA>
    4350:	e0 f0       	brcs	.+56     	; 0x438a <round+0x3c>
    4352:	9e 37       	cpi	r25, 0x7E	; 126
    4354:	d8 f0       	brcs	.+54     	; 0x438c <round+0x3e>
    4356:	96 39       	cpi	r25, 0x96	; 150
    4358:	b8 f4       	brcc	.+46     	; 0x4388 <round+0x3a>
    435a:	9e 38       	cpi	r25, 0x8E	; 142
    435c:	48 f4       	brcc	.+18     	; 0x4370 <round+0x22>
    435e:	67 2f       	mov	r22, r23
    4360:	78 2f       	mov	r23, r24
    4362:	88 27       	eor	r24, r24
    4364:	98 5f       	subi	r25, 0xF8	; 248
    4366:	f9 cf       	rjmp	.-14     	; 0x435a <round+0xc>
    4368:	86 95       	lsr	r24
    436a:	77 95       	ror	r23
    436c:	67 95       	ror	r22
    436e:	93 95       	inc	r25
    4370:	95 39       	cpi	r25, 0x95	; 149
    4372:	d0 f3       	brcs	.-12     	; 0x4368 <round+0x1a>
    4374:	b6 2f       	mov	r27, r22
    4376:	b1 70       	andi	r27, 0x01	; 1
    4378:	6b 0f       	add	r22, r27
    437a:	71 1d       	adc	r23, r1
    437c:	81 1d       	adc	r24, r1
    437e:	20 f4       	brcc	.+8      	; 0x4388 <round+0x3a>
    4380:	87 95       	ror	r24
    4382:	77 95       	ror	r23
    4384:	67 95       	ror	r22
    4386:	93 95       	inc	r25
    4388:	61 ce       	rjmp	.-830    	; 0x404c <__fp_mintl>
    438a:	7b ce       	rjmp	.-778    	; 0x4082 <__fp_mpack>
    438c:	09 cf       	rjmp	.-494    	; 0x41a0 <__fp_szero>
    438e:	11 f4       	brne	.+4      	; 0x4394 <round+0x46>
    4390:	0e f4       	brtc	.+2      	; 0x4394 <round+0x46>
    4392:	85 ce       	rjmp	.-758    	; 0x409e <__fp_nan>
    4394:	76 ce       	rjmp	.-788    	; 0x4082 <__fp_mpack>

00004396 <sqrt>:
    4396:	d2 de       	rcall	.-604    	; 0x413c <__fp_splitA>
    4398:	d0 f3       	brcs	.-12     	; 0x438e <round+0x40>
    439a:	99 23       	and	r25, r25
    439c:	d9 f3       	breq	.-10     	; 0x4394 <round+0x46>
    439e:	ce f3       	brts	.-14     	; 0x4392 <round+0x44>
    43a0:	9f 57       	subi	r25, 0x7F	; 127
    43a2:	55 0b       	sbc	r21, r21
    43a4:	87 ff       	sbrs	r24, 7
    43a6:	3f d0       	rcall	.+126    	; 0x4426 <__fp_norm2>
    43a8:	00 24       	eor	r0, r0
    43aa:	a0 e6       	ldi	r26, 0x60	; 96
    43ac:	40 ea       	ldi	r20, 0xA0	; 160
    43ae:	90 01       	movw	r18, r0
    43b0:	80 58       	subi	r24, 0x80	; 128
    43b2:	56 95       	lsr	r21
    43b4:	97 95       	ror	r25
    43b6:	28 f4       	brcc	.+10     	; 0x43c2 <sqrt+0x2c>
    43b8:	80 5c       	subi	r24, 0xC0	; 192
    43ba:	66 0f       	add	r22, r22
    43bc:	77 1f       	adc	r23, r23
    43be:	88 1f       	adc	r24, r24
    43c0:	20 f0       	brcs	.+8      	; 0x43ca <sqrt+0x34>
    43c2:	26 17       	cp	r18, r22
    43c4:	37 07       	cpc	r19, r23
    43c6:	48 07       	cpc	r20, r24
    43c8:	30 f4       	brcc	.+12     	; 0x43d6 <sqrt+0x40>
    43ca:	62 1b       	sub	r22, r18
    43cc:	73 0b       	sbc	r23, r19
    43ce:	84 0b       	sbc	r24, r20
    43d0:	20 29       	or	r18, r0
    43d2:	31 29       	or	r19, r1
    43d4:	4a 2b       	or	r20, r26
    43d6:	a6 95       	lsr	r26
    43d8:	17 94       	ror	r1
    43da:	07 94       	ror	r0
    43dc:	20 25       	eor	r18, r0
    43de:	31 25       	eor	r19, r1
    43e0:	4a 27       	eor	r20, r26
    43e2:	58 f7       	brcc	.-42     	; 0x43ba <sqrt+0x24>
    43e4:	66 0f       	add	r22, r22
    43e6:	77 1f       	adc	r23, r23
    43e8:	88 1f       	adc	r24, r24
    43ea:	20 f0       	brcs	.+8      	; 0x43f4 <sqrt+0x5e>
    43ec:	26 17       	cp	r18, r22
    43ee:	37 07       	cpc	r19, r23
    43f0:	48 07       	cpc	r20, r24
    43f2:	30 f4       	brcc	.+12     	; 0x4400 <sqrt+0x6a>
    43f4:	62 0b       	sbc	r22, r18
    43f6:	73 0b       	sbc	r23, r19
    43f8:	84 0b       	sbc	r24, r20
    43fa:	20 0d       	add	r18, r0
    43fc:	31 1d       	adc	r19, r1
    43fe:	41 1d       	adc	r20, r1
    4400:	a0 95       	com	r26
    4402:	81 f7       	brne	.-32     	; 0x43e4 <sqrt+0x4e>
    4404:	b9 01       	movw	r22, r18
    4406:	84 2f       	mov	r24, r20
    4408:	91 58       	subi	r25, 0x81	; 129
    440a:	88 0f       	add	r24, r24
    440c:	96 95       	lsr	r25
    440e:	87 95       	ror	r24
    4410:	08 95       	ret

00004412 <square>:
    4412:	9b 01       	movw	r18, r22
    4414:	ac 01       	movw	r20, r24
    4416:	38 cf       	rjmp	.-400    	; 0x4288 <__mulsf3>

00004418 <trunc>:
    4418:	ab de       	rcall	.-682    	; 0x4170 <__fp_trunc>
    441a:	20 f0       	brcs	.+8      	; 0x4424 <trunc+0xc>
    441c:	9f 37       	cpi	r25, 0x7F	; 127
    441e:	08 f4       	brcc	.+2      	; 0x4422 <trunc+0xa>
    4420:	bf ce       	rjmp	.-642    	; 0x41a0 <__fp_szero>
    4422:	14 ce       	rjmp	.-984    	; 0x404c <__fp_mintl>
    4424:	2e ce       	rjmp	.-932    	; 0x4082 <__fp_mpack>

00004426 <__fp_norm2>:
    4426:	91 50       	subi	r25, 0x01	; 1
    4428:	50 40       	sbci	r21, 0x00	; 0
    442a:	66 0f       	add	r22, r22
    442c:	77 1f       	adc	r23, r23
    442e:	88 1f       	adc	r24, r24
    4430:	d2 f7       	brpl	.-12     	; 0x4426 <__fp_norm2>
    4432:	08 95       	ret

00004434 <__mulsi3>:
    4434:	62 9f       	mul	r22, r18
    4436:	d0 01       	movw	r26, r0
    4438:	73 9f       	mul	r23, r19
    443a:	f0 01       	movw	r30, r0
    443c:	82 9f       	mul	r24, r18
    443e:	e0 0d       	add	r30, r0
    4440:	f1 1d       	adc	r31, r1
    4442:	64 9f       	mul	r22, r20
    4444:	e0 0d       	add	r30, r0
    4446:	f1 1d       	adc	r31, r1
    4448:	92 9f       	mul	r25, r18
    444a:	f0 0d       	add	r31, r0
    444c:	83 9f       	mul	r24, r19
    444e:	f0 0d       	add	r31, r0
    4450:	74 9f       	mul	r23, r20
    4452:	f0 0d       	add	r31, r0
    4454:	65 9f       	mul	r22, r21
    4456:	f0 0d       	add	r31, r0
    4458:	99 27       	eor	r25, r25
    445a:	72 9f       	mul	r23, r18
    445c:	b0 0d       	add	r27, r0
    445e:	e1 1d       	adc	r30, r1
    4460:	f9 1f       	adc	r31, r25
    4462:	63 9f       	mul	r22, r19
    4464:	b0 0d       	add	r27, r0
    4466:	e1 1d       	adc	r30, r1
    4468:	f9 1f       	adc	r31, r25
    446a:	bd 01       	movw	r22, r26
    446c:	cf 01       	movw	r24, r30
    446e:	11 24       	eor	r1, r1
    4470:	08 95       	ret

00004472 <__divmodhi4>:
    4472:	97 fb       	bst	r25, 7
    4474:	09 2e       	mov	r0, r25
    4476:	07 26       	eor	r0, r23
    4478:	0a d0       	rcall	.+20     	; 0x448e <__divmodhi4_neg1>
    447a:	77 fd       	sbrc	r23, 7
    447c:	04 d0       	rcall	.+8      	; 0x4486 <__divmodhi4_neg2>
    447e:	49 d0       	rcall	.+146    	; 0x4512 <__udivmodhi4>
    4480:	06 d0       	rcall	.+12     	; 0x448e <__divmodhi4_neg1>
    4482:	00 20       	and	r0, r0
    4484:	1a f4       	brpl	.+6      	; 0x448c <__divmodhi4_exit>

00004486 <__divmodhi4_neg2>:
    4486:	70 95       	com	r23
    4488:	61 95       	neg	r22
    448a:	7f 4f       	sbci	r23, 0xFF	; 255

0000448c <__divmodhi4_exit>:
    448c:	08 95       	ret

0000448e <__divmodhi4_neg1>:
    448e:	f6 f7       	brtc	.-4      	; 0x448c <__divmodhi4_exit>
    4490:	90 95       	com	r25
    4492:	81 95       	neg	r24
    4494:	9f 4f       	sbci	r25, 0xFF	; 255
    4496:	08 95       	ret

00004498 <__udivmodsi4>:
    4498:	a1 e2       	ldi	r26, 0x21	; 33
    449a:	1a 2e       	mov	r1, r26
    449c:	aa 1b       	sub	r26, r26
    449e:	bb 1b       	sub	r27, r27
    44a0:	fd 01       	movw	r30, r26
    44a2:	0d c0       	rjmp	.+26     	; 0x44be <__udivmodsi4_ep>

000044a4 <__udivmodsi4_loop>:
    44a4:	aa 1f       	adc	r26, r26
    44a6:	bb 1f       	adc	r27, r27
    44a8:	ee 1f       	adc	r30, r30
    44aa:	ff 1f       	adc	r31, r31
    44ac:	a2 17       	cp	r26, r18
    44ae:	b3 07       	cpc	r27, r19
    44b0:	e4 07       	cpc	r30, r20
    44b2:	f5 07       	cpc	r31, r21
    44b4:	20 f0       	brcs	.+8      	; 0x44be <__udivmodsi4_ep>
    44b6:	a2 1b       	sub	r26, r18
    44b8:	b3 0b       	sbc	r27, r19
    44ba:	e4 0b       	sbc	r30, r20
    44bc:	f5 0b       	sbc	r31, r21

000044be <__udivmodsi4_ep>:
    44be:	66 1f       	adc	r22, r22
    44c0:	77 1f       	adc	r23, r23
    44c2:	88 1f       	adc	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	1a 94       	dec	r1
    44c8:	69 f7       	brne	.-38     	; 0x44a4 <__udivmodsi4_loop>
    44ca:	60 95       	com	r22
    44cc:	70 95       	com	r23
    44ce:	80 95       	com	r24
    44d0:	90 95       	com	r25
    44d2:	9b 01       	movw	r18, r22
    44d4:	ac 01       	movw	r20, r24
    44d6:	bd 01       	movw	r22, r26
    44d8:	cf 01       	movw	r24, r30
    44da:	08 95       	ret

000044dc <__divmodsi4>:
    44dc:	97 fb       	bst	r25, 7
    44de:	09 2e       	mov	r0, r25
    44e0:	05 26       	eor	r0, r21
    44e2:	0e d0       	rcall	.+28     	; 0x4500 <__divmodsi4_neg1>
    44e4:	57 fd       	sbrc	r21, 7
    44e6:	04 d0       	rcall	.+8      	; 0x44f0 <__divmodsi4_neg2>
    44e8:	d7 df       	rcall	.-82     	; 0x4498 <__udivmodsi4>
    44ea:	0a d0       	rcall	.+20     	; 0x4500 <__divmodsi4_neg1>
    44ec:	00 1c       	adc	r0, r0
    44ee:	38 f4       	brcc	.+14     	; 0x44fe <__divmodsi4_exit>

000044f0 <__divmodsi4_neg2>:
    44f0:	50 95       	com	r21
    44f2:	40 95       	com	r20
    44f4:	30 95       	com	r19
    44f6:	21 95       	neg	r18
    44f8:	3f 4f       	sbci	r19, 0xFF	; 255
    44fa:	4f 4f       	sbci	r20, 0xFF	; 255
    44fc:	5f 4f       	sbci	r21, 0xFF	; 255

000044fe <__divmodsi4_exit>:
    44fe:	08 95       	ret

00004500 <__divmodsi4_neg1>:
    4500:	f6 f7       	brtc	.-4      	; 0x44fe <__divmodsi4_exit>
    4502:	90 95       	com	r25
    4504:	80 95       	com	r24
    4506:	70 95       	com	r23
    4508:	61 95       	neg	r22
    450a:	7f 4f       	sbci	r23, 0xFF	; 255
    450c:	8f 4f       	sbci	r24, 0xFF	; 255
    450e:	9f 4f       	sbci	r25, 0xFF	; 255
    4510:	08 95       	ret

00004512 <__udivmodhi4>:
    4512:	aa 1b       	sub	r26, r26
    4514:	bb 1b       	sub	r27, r27
    4516:	51 e1       	ldi	r21, 0x11	; 17
    4518:	07 c0       	rjmp	.+14     	; 0x4528 <__udivmodhi4_ep>

0000451a <__udivmodhi4_loop>:
    451a:	aa 1f       	adc	r26, r26
    451c:	bb 1f       	adc	r27, r27
    451e:	a6 17       	cp	r26, r22
    4520:	b7 07       	cpc	r27, r23
    4522:	10 f0       	brcs	.+4      	; 0x4528 <__udivmodhi4_ep>
    4524:	a6 1b       	sub	r26, r22
    4526:	b7 0b       	sbc	r27, r23

00004528 <__udivmodhi4_ep>:
    4528:	88 1f       	adc	r24, r24
    452a:	99 1f       	adc	r25, r25
    452c:	5a 95       	dec	r21
    452e:	a9 f7       	brne	.-22     	; 0x451a <__udivmodhi4_loop>
    4530:	80 95       	com	r24
    4532:	90 95       	com	r25
    4534:	bc 01       	movw	r22, r24
    4536:	cd 01       	movw	r24, r26
    4538:	08 95       	ret

0000453a <strtod>:
    453a:	8f 92       	push	r8
    453c:	9f 92       	push	r9
    453e:	af 92       	push	r10
    4540:	bf 92       	push	r11
    4542:	cf 92       	push	r12
    4544:	df 92       	push	r13
    4546:	ef 92       	push	r14
    4548:	ff 92       	push	r15
    454a:	0f 93       	push	r16
    454c:	1f 93       	push	r17
    454e:	cf 93       	push	r28
    4550:	df 93       	push	r29
    4552:	ec 01       	movw	r28, r24
    4554:	5b 01       	movw	r10, r22
    4556:	61 15       	cp	r22, r1
    4558:	71 05       	cpc	r23, r1
    455a:	19 f0       	breq	.+6      	; 0x4562 <strtod+0x28>
    455c:	fb 01       	movw	r30, r22
    455e:	91 83       	std	Z+1, r25	; 0x01
    4560:	80 83       	st	Z, r24
    4562:	f9 90       	ld	r15, Y+
    4564:	8f 2d       	mov	r24, r15
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	0e 94 0b 24 	call	0x4816	; 0x4816 <isspace>
    456c:	89 2b       	or	r24, r25
    456e:	c9 f7       	brne	.-14     	; 0x4562 <strtod+0x28>
    4570:	fd e2       	ldi	r31, 0x2D	; 45
    4572:	ff 16       	cp	r15, r31
    4574:	21 f4       	brne	.+8      	; 0x457e <strtod+0x44>
    4576:	f9 90       	ld	r15, Y+
    4578:	ee 24       	eor	r14, r14
    457a:	e3 94       	inc	r14
    457c:	05 c0       	rjmp	.+10     	; 0x4588 <strtod+0x4e>
    457e:	2b e2       	ldi	r18, 0x2B	; 43
    4580:	f2 16       	cp	r15, r18
    4582:	09 f4       	brne	.+2      	; 0x4586 <strtod+0x4c>
    4584:	f9 90       	ld	r15, Y+
    4586:	ee 24       	eor	r14, r14
    4588:	8e 01       	movw	r16, r28
    458a:	01 50       	subi	r16, 0x01	; 1
    458c:	10 40       	sbci	r17, 0x00	; 0
    458e:	c8 01       	movw	r24, r16
    4590:	6d ef       	ldi	r22, 0xFD	; 253
    4592:	74 e0       	ldi	r23, 0x04	; 4
    4594:	43 e0       	ldi	r20, 0x03	; 3
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	0e 94 13 24 	call	0x4826	; 0x4826 <strncasecmp_P>
    459c:	89 2b       	or	r24, r25
    459e:	01 f5       	brne	.+64     	; 0x45e0 <strtod+0xa6>
    45a0:	8e 01       	movw	r16, r28
    45a2:	0e 5f       	subi	r16, 0xFE	; 254
    45a4:	1f 4f       	sbci	r17, 0xFF	; 255
    45a6:	c8 01       	movw	r24, r16
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	75 e0       	ldi	r23, 0x05	; 5
    45ac:	45 e0       	ldi	r20, 0x05	; 5
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	0e 94 13 24 	call	0x4826	; 0x4826 <strncasecmp_P>
    45b4:	89 2b       	or	r24, r25
    45b6:	19 f4       	brne	.+6      	; 0x45be <strtod+0x84>
    45b8:	8e 01       	movw	r16, r28
    45ba:	09 5f       	subi	r16, 0xF9	; 249
    45bc:	1f 4f       	sbci	r17, 0xFF	; 255
    45be:	a1 14       	cp	r10, r1
    45c0:	b1 04       	cpc	r11, r1
    45c2:	19 f0       	breq	.+6      	; 0x45ca <strtod+0x90>
    45c4:	f5 01       	movw	r30, r10
    45c6:	11 83       	std	Z+1, r17	; 0x01
    45c8:	00 83       	st	Z, r16
    45ca:	e0 fc       	sbrc	r14, 0
    45cc:	04 c0       	rjmp	.+8      	; 0x45d6 <strtod+0x9c>
    45ce:	70 e0       	ldi	r23, 0x00	; 0
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	80 e8       	ldi	r24, 0x80	; 128
    45d4:	14 c0       	rjmp	.+40     	; 0x45fe <strtod+0xc4>
    45d6:	70 e0       	ldi	r23, 0x00	; 0
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	80 e8       	ldi	r24, 0x80	; 128
    45dc:	6f ef       	ldi	r22, 0xFF	; 255
    45de:	08 c1       	rjmp	.+528    	; 0x47f0 <strtod+0x2b6>
    45e0:	c8 01       	movw	r24, r16
    45e2:	65 e0       	ldi	r22, 0x05	; 5
    45e4:	75 e0       	ldi	r23, 0x05	; 5
    45e6:	43 e0       	ldi	r20, 0x03	; 3
    45e8:	50 e0       	ldi	r21, 0x00	; 0
    45ea:	0e 94 13 24 	call	0x4826	; 0x4826 <strncasecmp_P>
    45ee:	89 2b       	or	r24, r25
    45f0:	69 f4       	brne	.+26     	; 0x460c <strtod+0xd2>
    45f2:	a1 14       	cp	r10, r1
    45f4:	b1 04       	cpc	r11, r1
    45f6:	29 f4       	brne	.+10     	; 0x4602 <strtod+0xc8>
    45f8:	70 e0       	ldi	r23, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	80 ec       	ldi	r24, 0xC0	; 192
    45fe:	6f e7       	ldi	r22, 0x7F	; 127
    4600:	f7 c0       	rjmp	.+494    	; 0x47f0 <strtod+0x2b6>
    4602:	22 96       	adiw	r28, 0x02	; 2
    4604:	f5 01       	movw	r30, r10
    4606:	d1 83       	std	Z+1, r29	; 0x01
    4608:	c0 83       	st	Z, r28
    460a:	f6 cf       	rjmp	.-20     	; 0x45f8 <strtod+0xbe>
    460c:	88 24       	eor	r8, r8
    460e:	99 24       	eor	r9, r9
    4610:	40 e0       	ldi	r20, 0x00	; 0
    4612:	50 e0       	ldi	r21, 0x00	; 0
    4614:	60 e0       	ldi	r22, 0x00	; 0
    4616:	70 e0       	ldi	r23, 0x00	; 0
    4618:	ef 2d       	mov	r30, r15
    461a:	e0 53       	subi	r30, 0x30	; 48
    461c:	ea 30       	cpi	r30, 0x0A	; 10
    461e:	a0 f5       	brcc	.+104    	; 0x4688 <strtod+0x14e>
    4620:	f2 e0       	ldi	r31, 0x02	; 2
    4622:	ef 2a       	or	r14, r31
    4624:	8e 2d       	mov	r24, r14
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	9c 01       	movw	r18, r24
    462a:	28 70       	andi	r18, 0x08	; 8
    462c:	30 70       	andi	r19, 0x00	; 0
    462e:	e2 fe       	sbrs	r14, 2
    4630:	06 c0       	rjmp	.+12     	; 0x463e <strtod+0x104>
    4632:	23 2b       	or	r18, r19
    4634:	79 f5       	brne	.+94     	; 0x4694 <strtod+0x15a>
    4636:	08 94       	sec
    4638:	81 1c       	adc	r8, r1
    463a:	91 1c       	adc	r9, r1
    463c:	2b c0       	rjmp	.+86     	; 0x4694 <strtod+0x15a>
    463e:	23 2b       	or	r18, r19
    4640:	19 f0       	breq	.+6      	; 0x4648 <strtod+0x10e>
    4642:	08 94       	sec
    4644:	81 08       	sbc	r8, r1
    4646:	91 08       	sbc	r9, r1
    4648:	db 01       	movw	r26, r22
    464a:	ca 01       	movw	r24, r20
    464c:	12 e0       	ldi	r17, 0x02	; 2
    464e:	88 0f       	add	r24, r24
    4650:	99 1f       	adc	r25, r25
    4652:	aa 1f       	adc	r26, r26
    4654:	bb 1f       	adc	r27, r27
    4656:	1a 95       	dec	r17
    4658:	d1 f7       	brne	.-12     	; 0x464e <strtod+0x114>
    465a:	48 0f       	add	r20, r24
    465c:	59 1f       	adc	r21, r25
    465e:	6a 1f       	adc	r22, r26
    4660:	7b 1f       	adc	r23, r27
    4662:	44 0f       	add	r20, r20
    4664:	55 1f       	adc	r21, r21
    4666:	66 1f       	adc	r22, r22
    4668:	77 1f       	adc	r23, r23
    466a:	4e 0f       	add	r20, r30
    466c:	51 1d       	adc	r21, r1
    466e:	61 1d       	adc	r22, r1
    4670:	71 1d       	adc	r23, r1
    4672:	48 39       	cpi	r20, 0x98	; 152
    4674:	29 e9       	ldi	r18, 0x99	; 153
    4676:	52 07       	cpc	r21, r18
    4678:	29 e9       	ldi	r18, 0x99	; 153
    467a:	62 07       	cpc	r22, r18
    467c:	29 e1       	ldi	r18, 0x19	; 25
    467e:	72 07       	cpc	r23, r18
    4680:	48 f0       	brcs	.+18     	; 0x4694 <strtod+0x15a>
    4682:	84 e0       	ldi	r24, 0x04	; 4
    4684:	e8 2a       	or	r14, r24
    4686:	06 c0       	rjmp	.+12     	; 0x4694 <strtod+0x15a>
    4688:	ee 3f       	cpi	r30, 0xFE	; 254
    468a:	31 f4       	brne	.+12     	; 0x4698 <strtod+0x15e>
    468c:	e3 fc       	sbrc	r14, 3
    468e:	39 c0       	rjmp	.+114    	; 0x4702 <strtod+0x1c8>
    4690:	98 e0       	ldi	r25, 0x08	; 8
    4692:	e9 2a       	or	r14, r25
    4694:	f9 90       	ld	r15, Y+
    4696:	c0 cf       	rjmp	.-128    	; 0x4618 <strtod+0xde>
    4698:	e5 33       	cpi	r30, 0x35	; 53
    469a:	11 f0       	breq	.+4      	; 0x46a0 <strtod+0x166>
    469c:	e5 31       	cpi	r30, 0x15	; 21
    469e:	89 f5       	brne	.+98     	; 0x4702 <strtod+0x1c8>
    46a0:	29 91       	ld	r18, Y+
    46a2:	2d 32       	cpi	r18, 0x2D	; 45
    46a4:	19 f4       	brne	.+6      	; 0x46ac <strtod+0x172>
    46a6:	e0 e1       	ldi	r30, 0x10	; 16
    46a8:	ee 2a       	or	r14, r30
    46aa:	05 c0       	rjmp	.+10     	; 0x46b6 <strtod+0x17c>
    46ac:	2b 32       	cpi	r18, 0x2B	; 43
    46ae:	19 f0       	breq	.+6      	; 0x46b6 <strtod+0x17c>
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	03 c0       	rjmp	.+6      	; 0x46bc <strtod+0x182>
    46b6:	29 91       	ld	r18, Y+
    46b8:	82 e0       	ldi	r24, 0x02	; 2
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	e2 2f       	mov	r30, r18
    46be:	e0 53       	subi	r30, 0x30	; 48
    46c0:	ea 30       	cpi	r30, 0x0A	; 10
    46c2:	18 f0       	brcs	.+6      	; 0x46ca <strtod+0x190>
    46c4:	c8 1b       	sub	r28, r24
    46c6:	d9 0b       	sbc	r29, r25
    46c8:	1c c0       	rjmp	.+56     	; 0x4702 <strtod+0x1c8>
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	fc e0       	ldi	r31, 0x0C	; 12
    46d0:	20 38       	cpi	r18, 0x80	; 128
    46d2:	3f 07       	cpc	r19, r31
    46d4:	5c f4       	brge	.+22     	; 0x46ec <strtod+0x1b2>
    46d6:	c9 01       	movw	r24, r18
    46d8:	88 0f       	add	r24, r24
    46da:	99 1f       	adc	r25, r25
    46dc:	88 0f       	add	r24, r24
    46de:	99 1f       	adc	r25, r25
    46e0:	28 0f       	add	r18, r24
    46e2:	39 1f       	adc	r19, r25
    46e4:	22 0f       	add	r18, r18
    46e6:	33 1f       	adc	r19, r19
    46e8:	2e 0f       	add	r18, r30
    46ea:	31 1d       	adc	r19, r1
    46ec:	e9 91       	ld	r30, Y+
    46ee:	e0 53       	subi	r30, 0x30	; 48
    46f0:	ea 30       	cpi	r30, 0x0A	; 10
    46f2:	68 f3       	brcs	.-38     	; 0x46ce <strtod+0x194>
    46f4:	e4 fe       	sbrs	r14, 4
    46f6:	03 c0       	rjmp	.+6      	; 0x46fe <strtod+0x1c4>
    46f8:	30 95       	com	r19
    46fa:	21 95       	neg	r18
    46fc:	3f 4f       	sbci	r19, 0xFF	; 255
    46fe:	82 0e       	add	r8, r18
    4700:	93 1e       	adc	r9, r19
    4702:	ce 2c       	mov	r12, r14
    4704:	dd 24       	eor	r13, r13
    4706:	e1 fe       	sbrs	r14, 1
    4708:	07 c0       	rjmp	.+14     	; 0x4718 <strtod+0x1de>
    470a:	a1 14       	cp	r10, r1
    470c:	b1 04       	cpc	r11, r1
    470e:	21 f0       	breq	.+8      	; 0x4718 <strtod+0x1de>
    4710:	21 97       	sbiw	r28, 0x01	; 1
    4712:	f5 01       	movw	r30, r10
    4714:	d1 83       	std	Z+1, r29	; 0x01
    4716:	c0 83       	st	Z, r28
    4718:	cb 01       	movw	r24, r22
    471a:	ba 01       	movw	r22, r20
    471c:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__floatunsisf>
    4720:	7b 01       	movw	r14, r22
    4722:	8c 01       	movw	r16, r24
    4724:	f3 e0       	ldi	r31, 0x03	; 3
    4726:	cf 22       	and	r12, r31
    4728:	dd 24       	eor	r13, r13
    472a:	23 e0       	ldi	r18, 0x03	; 3
    472c:	c2 16       	cp	r12, r18
    472e:	d1 04       	cpc	r13, r1
    4730:	21 f4       	brne	.+8      	; 0x473a <strtod+0x200>
    4732:	17 fb       	bst	r17, 7
    4734:	10 95       	com	r17
    4736:	17 f9       	bld	r17, 7
    4738:	10 95       	com	r17
    473a:	57 01       	movw	r10, r14
    473c:	68 01       	movw	r12, r16
    473e:	c8 01       	movw	r24, r16
    4740:	b7 01       	movw	r22, r14
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	40 e0       	ldi	r20, 0x00	; 0
    4748:	50 e0       	ldi	r21, 0x00	; 0
    474a:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
    474e:	88 23       	and	r24, r24
    4750:	09 f4       	brne	.+2      	; 0x4754 <strtod+0x21a>
    4752:	4a c0       	rjmp	.+148    	; 0x47e8 <strtod+0x2ae>
    4754:	97 fe       	sbrs	r9, 7
    4756:	0d c0       	rjmp	.+26     	; 0x4772 <strtod+0x238>
    4758:	2c e1       	ldi	r18, 0x1C	; 28
    475a:	e2 2e       	mov	r14, r18
    475c:	25 e0       	ldi	r18, 0x05	; 5
    475e:	f2 2e       	mov	r15, r18
    4760:	90 94       	com	r9
    4762:	81 94       	neg	r8
    4764:	91 08       	sbc	r9, r1
    4766:	93 94       	inc	r9
    4768:	c0 e2       	ldi	r28, 0x20	; 32
    476a:	d0 e0       	ldi	r29, 0x00	; 0
    476c:	00 e0       	ldi	r16, 0x00	; 0
    476e:	10 e0       	ldi	r17, 0x00	; 0
    4770:	12 c0       	rjmp	.+36     	; 0x4796 <strtod+0x25c>
    4772:	94 e3       	ldi	r25, 0x34	; 52
    4774:	e9 2e       	mov	r14, r25
    4776:	95 e0       	ldi	r25, 0x05	; 5
    4778:	f9 2e       	mov	r15, r25
    477a:	f6 cf       	rjmp	.-20     	; 0x4768 <strtod+0x22e>
    477c:	f7 01       	movw	r30, r14
    477e:	25 91       	lpm	r18, Z+
    4780:	35 91       	lpm	r19, Z+
    4782:	45 91       	lpm	r20, Z+
    4784:	54 91       	lpm	r21, Z+
    4786:	c6 01       	movw	r24, r12
    4788:	b5 01       	movw	r22, r10
    478a:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsf3>
    478e:	5b 01       	movw	r10, r22
    4790:	6c 01       	movw	r12, r24
    4792:	8c 1a       	sub	r8, r28
    4794:	9d 0a       	sbc	r9, r29
    4796:	8c 16       	cp	r8, r28
    4798:	9d 06       	cpc	r9, r29
    479a:	84 f7       	brge	.-32     	; 0x477c <strtod+0x242>
    479c:	d5 95       	asr	r29
    479e:	c7 95       	ror	r28
    47a0:	0f 5f       	subi	r16, 0xFF	; 255
    47a2:	1f 4f       	sbci	r17, 0xFF	; 255
    47a4:	06 30       	cpi	r16, 0x06	; 6
    47a6:	11 05       	cpc	r17, r1
    47a8:	29 f0       	breq	.+10     	; 0x47b4 <strtod+0x27a>
    47aa:	8c ef       	ldi	r24, 0xFC	; 252
    47ac:	9f ef       	ldi	r25, 0xFF	; 255
    47ae:	e8 0e       	add	r14, r24
    47b0:	f9 1e       	adc	r15, r25
    47b2:	f1 cf       	rjmp	.-30     	; 0x4796 <strtod+0x25c>
    47b4:	c5 01       	movw	r24, r10
    47b6:	d6 01       	movw	r26, r12
    47b8:	7c 01       	movw	r14, r24
    47ba:	8d 01       	movw	r16, r26
    47bc:	8c 2d       	mov	r24, r12
    47be:	88 0f       	add	r24, r24
    47c0:	8d 2d       	mov	r24, r13
    47c2:	88 1f       	adc	r24, r24
    47c4:	8f 3f       	cpi	r24, 0xFF	; 255
    47c6:	51 f0       	breq	.+20     	; 0x47dc <strtod+0x2a2>
    47c8:	c6 01       	movw	r24, r12
    47ca:	b5 01       	movw	r22, r10
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	40 e0       	ldi	r20, 0x00	; 0
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__cmpsf2>
    47d8:	88 23       	and	r24, r24
    47da:	31 f4       	brne	.+12     	; 0x47e8 <strtod+0x2ae>
    47dc:	82 e2       	ldi	r24, 0x22	; 34
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	90 93 9c 06 	sts	0x069C, r25
    47e4:	80 93 9b 06 	sts	0x069B, r24
    47e8:	7e 2d       	mov	r23, r14
    47ea:	9f 2d       	mov	r25, r15
    47ec:	80 2f       	mov	r24, r16
    47ee:	61 2f       	mov	r22, r17
    47f0:	27 2f       	mov	r18, r23
    47f2:	39 2f       	mov	r19, r25
    47f4:	48 2f       	mov	r20, r24
    47f6:	56 2f       	mov	r21, r22
    47f8:	b9 01       	movw	r22, r18
    47fa:	ca 01       	movw	r24, r20
    47fc:	df 91       	pop	r29
    47fe:	cf 91       	pop	r28
    4800:	1f 91       	pop	r17
    4802:	0f 91       	pop	r16
    4804:	ff 90       	pop	r15
    4806:	ef 90       	pop	r14
    4808:	df 90       	pop	r13
    480a:	cf 90       	pop	r12
    480c:	bf 90       	pop	r11
    480e:	af 90       	pop	r10
    4810:	9f 90       	pop	r9
    4812:	8f 90       	pop	r8
    4814:	08 95       	ret

00004816 <isspace>:
    4816:	91 11       	cpse	r25, r1
    4818:	1e c0       	rjmp	.+60     	; 0x4856 <__ctype_isfalse>
    481a:	80 32       	cpi	r24, 0x20	; 32
    481c:	19 f0       	breq	.+6      	; 0x4824 <isspace+0xe>
    481e:	89 50       	subi	r24, 0x09	; 9
    4820:	85 50       	subi	r24, 0x05	; 5
    4822:	d0 f7       	brcc	.-12     	; 0x4818 <isspace+0x2>
    4824:	08 95       	ret

00004826 <strncasecmp_P>:
    4826:	fb 01       	movw	r30, r22
    4828:	dc 01       	movw	r26, r24
    482a:	41 50       	subi	r20, 0x01	; 1
    482c:	50 40       	sbci	r21, 0x00	; 0
    482e:	88 f0       	brcs	.+34     	; 0x4852 <strncasecmp_P+0x2c>
    4830:	8d 91       	ld	r24, X+
    4832:	81 34       	cpi	r24, 0x41	; 65
    4834:	1c f0       	brlt	.+6      	; 0x483c <strncasecmp_P+0x16>
    4836:	8b 35       	cpi	r24, 0x5B	; 91
    4838:	0c f4       	brge	.+2      	; 0x483c <strncasecmp_P+0x16>
    483a:	80 5e       	subi	r24, 0xE0	; 224
    483c:	65 91       	lpm	r22, Z+
    483e:	61 34       	cpi	r22, 0x41	; 65
    4840:	1c f0       	brlt	.+6      	; 0x4848 <strncasecmp_P+0x22>
    4842:	6b 35       	cpi	r22, 0x5B	; 91
    4844:	0c f4       	brge	.+2      	; 0x4848 <strncasecmp_P+0x22>
    4846:	60 5e       	subi	r22, 0xE0	; 224
    4848:	86 1b       	sub	r24, r22
    484a:	61 11       	cpse	r22, r1
    484c:	71 f3       	breq	.-36     	; 0x482a <strncasecmp_P+0x4>
    484e:	99 0b       	sbc	r25, r25
    4850:	08 95       	ret
    4852:	88 1b       	sub	r24, r24
    4854:	fc cf       	rjmp	.-8      	; 0x484e <strncasecmp_P+0x28>

00004856 <__ctype_isfalse>:
    4856:	99 27       	eor	r25, r25
    4858:	88 27       	eor	r24, r24

0000485a <__ctype_istrue>:
    485a:	08 95       	ret

0000485c <_exit>:
    485c:	f8 94       	cli

0000485e <__stop_program>:
    485e:	ff cf       	rjmp	.-2      	; 0x485e <__stop_program>
