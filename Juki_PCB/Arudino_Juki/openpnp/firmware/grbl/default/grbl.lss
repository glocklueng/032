
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000451c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000049d  00800200  00800200  00004590  2**0
                  ALLOC
  2 .debug_aranges 00000478  00000000  00000000  00004590  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000083d  00000000  00000000  00004a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000349d  00000000  00000000  00005245  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001316  00000000  00000000  000086e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00002f38  00000000  00000000  000099f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000006f0  00000000  00000000  0000c930  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000daa  00000000  00000000  0000d020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000190b  00000000  00000000  0000ddca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000740  00000000  00000000  0000f6d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__ctors_end>
       4:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
       8:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
       c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      10:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      14:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      18:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      1c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      20:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      24:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      28:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      2c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      30:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      34:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      38:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      3c:	0c 94 46 14 	jmp	0x288c	; 0x288c <__vector_15>
      40:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      44:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__vector_17>
      48:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      4c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      50:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      54:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      58:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      5c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      60:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      64:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__vector_25>
      68:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      6c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      70:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      74:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      78:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      7c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      80:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      84:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      88:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      8c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      90:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      94:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      98:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      9c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      a0:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      a4:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      a8:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      ac:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      b0:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      b4:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      b8:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      bc:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      c0:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      c4:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      c8:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      cc:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      d0:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      d4:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      d8:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      dc:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      e0:	0c 94 b0 02 	jmp	0x560	; 0x560 <__bad_interrupt>
      e4:	fc 05       	cpc	r31, r12
      e6:	fc 05       	cpc	r31, r12
      e8:	ff 05       	cpc	r31, r15
      ea:	02 06       	cpc	r0, r18
      ec:	05 06       	cpc	r0, r21
      ee:	0c 06       	cpc	r0, r28
      f0:	47 06       	cpc	r4, r23
      f2:	47 06       	cpc	r4, r23
      f4:	11 06       	cpc	r1, r17
      f6:	18 06       	cpc	r1, r24
      f8:	1d 06       	cpc	r1, r29
      fa:	20 06       	cpc	r2, r16
      fc:	25 06       	cpc	r2, r21
      fe:	28 06       	cpc	r2, r24
     100:	2b 06       	cpc	r2, r27
     102:	2e 06       	cpc	r2, r30
     104:	31 06       	cpc	r3, r17
     106:	34 06       	cpc	r3, r20
     108:	37 06       	cpc	r3, r23
     10a:	3c 06       	cpc	r3, r28
     10c:	3f 06       	cpc	r3, r31
     10e:	44 06       	cpc	r4, r20
     110:	47 06       	cpc	r4, r23
     112:	47 06       	cpc	r4, r23
     114:	47 06       	cpc	r4, r23
     116:	47 06       	cpc	r4, r23
     118:	47 06       	cpc	r4, r23
     11a:	47 06       	cpc	r4, r23
     11c:	47 06       	cpc	r4, r23
     11e:	47 06       	cpc	r4, r23
     120:	ff 05       	cpc	r31, r15
     122:	47 06       	cpc	r4, r23
     124:	47 06       	cpc	r4, r23
     126:	47 06       	cpc	r4, r23
     128:	47 06       	cpc	r4, r23
     12a:	47 06       	cpc	r4, r23
     12c:	47 06       	cpc	r4, r23
     12e:	47 06       	cpc	r4, r23
     130:	47 06       	cpc	r4, r23
     132:	47 06       	cpc	r4, r23
     134:	47 06       	cpc	r4, r23
     136:	47 06       	cpc	r4, r23
     138:	47 06       	cpc	r4, r23
     13a:	47 06       	cpc	r4, r23
     13c:	47 06       	cpc	r4, r23
     13e:	47 06       	cpc	r4, r23
     140:	47 06       	cpc	r4, r23
     142:	47 06       	cpc	r4, r23
     144:	47 06       	cpc	r4, r23
     146:	47 06       	cpc	r4, r23
     148:	47 06       	cpc	r4, r23
     14a:	47 06       	cpc	r4, r23
     14c:	47 06       	cpc	r4, r23
     14e:	47 06       	cpc	r4, r23
     150:	47 06       	cpc	r4, r23
     152:	47 06       	cpc	r4, r23
     154:	47 06       	cpc	r4, r23
     156:	47 06       	cpc	r4, r23
     158:	47 06       	cpc	r4, r23
     15a:	47 06       	cpc	r4, r23
     15c:	ff 05       	cpc	r31, r15
     15e:	08 4a       	sbci	r16, 0xA8	; 168
     160:	d7 3b       	cpi	r29, 0xB7	; 183
     162:	3b ce       	rjmp	.-906    	; 0xfffffdda <__eeprom_end+0xff7efdda>
     164:	01 6e       	ori	r16, 0xE1	; 225
     166:	84 bc       	out	0x24, r8	; 36
     168:	bf fd       	.word	0xfdbf	; ????
     16a:	c1 2f       	mov	r28, r17
     16c:	3d 6c       	ori	r19, 0xCD	; 205
     16e:	74 31       	cpi	r23, 0x14	; 20
     170:	9a bd       	out	0x2a, r25	; 42
     172:	56 83       	std	Z+6, r21	; 0x06
     174:	3d da       	rcall	.-2950   	; 0xfffff5f0 <__eeprom_end+0xff7ef5f0>
     176:	3d 00       	.word	0x003d	; ????
     178:	c7 7f       	andi	r28, 0xF7	; 247
     17a:	11 be       	out	0x31, r1	; 49
     17c:	d9 e4       	ldi	r29, 0x49	; 73
     17e:	bb 4c       	sbci	r27, 0xCB	; 203
     180:	3e 91       	ld	r19, -X
     182:	6b aa       	std	Y+51, r6	; 0x33
     184:	aa be       	out	0x3a, r10	; 58
     186:	00 00       	nop
     188:	00 80       	ld	r0, Z
     18a:	3f 59       	subi	r19, 0x9F	; 159

0000018b <__c.1875>:
     18b:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000194 <__c.1873>:
     194:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000019d <__c.1871>:
     19d:	59 4c 32 0d 0a 00                                   YL2...

000001a3 <__c.1869>:
     1a3:	59 4c 31 0d 0a 00                                   YL1...

000001a9 <__c.1867>:
     1a9:	58 4c 32 0d 0a 00                                   XL2...

000001af <__c.1865>:
     1af:	58 4c 31 0d 0a 00                                   XL1...

000001b5 <__c.1863>:
     1b5:	0d 0a 00                                            ...

000001b8 <__c.1861>:
     1b8:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

000001c3 <__c.1859>:
     1c3:	0d 0a 00                                            ...

000001c6 <__c.1857>:
     1c6:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000001d3 <__c.1855>:
     1d3:	0d 0a 00                                            ...

000001d6 <__c.1853>:
     1d6:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

000001e5 <__c.1851>:
     1e5:	0d 0a 00                                            ...

000001e8 <__c.1849>:
     1e8:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

000001f2 <__c.1847>:
     1f2:	0d 0a 00                                            ...

000001f5 <__c.1845>:
     1f5:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     205:	3d 20 00                                            = .

00000208 <__c.1843>:
     208:	0d 0a 00                                            ...

0000020b <__c.1841>:
     20b:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     21b:	20 00                                                .

0000021d <__c.1609>:
     21d:	6f 6b 0a 0d 00                                      ok...

00000222 <__c.1669>:
     222:	0a 0d 00                                            ...

00000225 <__c.1667>:
     225:	65 72 72 6f 72 3a 20 00                             error: .

0000022d <__c.1664>:
     22d:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     23d:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

0000024b <__c.1661>:
     24b:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     25b:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

0000026a <__c.1658>:
     26a:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     27a:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

0000028b <__c.1655>:
     28b:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     29b:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

000002a6 <__c.1651>:
     2a6:	6f 6b 0a 0d 00                                      ok...

000002ab <__c.1648>:
     2ab:	0d 0a 4e 6f 74 20 68 6f 6d 65 64 0a 0d 00           ..Not homed...

000002b9 <__c.1726>:
     2b9:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     2c9:	6e 67 0d 0a 00                                      ng...

000002ce <__c.1724>:
     2ce:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     2de:	72 0d 0a 00                                         r...

000002e2 <__c.1681>:
     2e2:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     2f2:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     302:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     312:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     322:	0d 0a 00                                            ...

00000325 <__c.1679>:
     325:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     335:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     345:	61 62 6c 65 64 29 0d 0a 00                          abled)...

0000034e <__c.1677>:
     34e:	24 31 30 30 30 20 3d 20 00                          $1000 = .

00000357 <__c.1675>:
     357:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     367:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     377:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     387:	2f 6d 69 6e 29 0d 0a 00                             /min)...

0000038f <__c.1673>:
     38f:	24 39 20 3d 20 00                                   $9 = .

00000395 <__c.1671>:
     395:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     3a5:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000003b3 <__c.1669>:
     3b3:	24 38 20 3d 20 00                                   $8 = .

000003b9 <__c.1667>:
     3b9:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     3c9:	29 0d 0a 00                                         )...

000003cd <__c.1665>:
     3cd:	24 37 20 3d 20 00                                   $7 = .

000003d3 <__c.1663>:
     3d3:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     3e3:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

000003f1 <__c.1661>:
     3f1:	24 36 20 3d 20 00                                   $6 = .

000003f7 <__c.1659>:
     3f7:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     407:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000415 <__c.1657>:
     415:	24 35 20 3d 20 00                                   $5 = .

0000041b <__c.1655>:
     41b:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     42b:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

00000438 <__c.1653>:
     438:	24 34 20 3d 20 00                                   $4 = .

0000043e <__c.1651>:
     43e:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     44e:	0a 00                                               ..

00000450 <__c.1649>:
     450:	24 33 20 3d 20 00                                   $3 = .

00000456 <__c.1647>:
     456:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

00000466 <__c.1645>:
     466:	24 32 20 3d 20 00                                   $2 = .

0000046c <__c.1643>:
     46c:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

0000047c <__c.1641>:
     47c:	24 31 20 3d 20 00                                   $1 = .

00000482 <__c.1639>:
     482:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

00000492 <__c.1637>:
     492:	24 30 20 3d 20 00                                   $0 = .

00000498 <__c.1635>:
     498:	0d 0a 00                                            ...

0000049b <__c.1633>:
     49b:	30 2e 37 36 50 42 00                                0.76PB.

000004a2 <__c.1631>:
     4a2:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000004ae <__c.2169>:
     4ae:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

000004bc <__c.2029>:
     4bc:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000004c6 <__c.2047>:
     4c6:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

000004d0 <__c.1817>:
     4d0:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     4e0:	0d 00                                               ..

000004e2 <pstr_inf>:
     4e2:	49 4e 46                                            INF

000004e5 <pstr_inity>:
     4e5:	49 4e 49 54 59                                      INITY

000004ea <pstr_nan>:
     4ea:	4e 41 4e                                            NAN

000004ed <pwr_m10>:
     4ed:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     4fd:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000505 <pwr_p10>:
     505:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     515:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000051e <__ctors_end>:
     51e:	11 24       	eor	r1, r1
     520:	1f be       	out	0x3f, r1	; 63
     522:	cf ef       	ldi	r28, 0xFF	; 255
     524:	d1 e2       	ldi	r29, 0x21	; 33
     526:	de bf       	out	0x3e, r29	; 62
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	00 e0       	ldi	r16, 0x00	; 0
     52c:	0c bf       	out	0x3c, r16	; 60

0000052e <__do_copy_data>:
     52e:	12 e0       	ldi	r17, 0x02	; 2
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b2 e0       	ldi	r27, 0x02	; 2
     534:	ec e1       	ldi	r30, 0x1C	; 28
     536:	f5 e4       	ldi	r31, 0x45	; 69
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	0b bf       	out	0x3b, r16	; 59
     53c:	02 c0       	rjmp	.+4      	; 0x542 <__do_copy_data+0x14>
     53e:	07 90       	elpm	r0, Z+
     540:	0d 92       	st	X+, r0
     542:	a0 30       	cpi	r26, 0x00	; 0
     544:	b1 07       	cpc	r27, r17
     546:	d9 f7       	brne	.-10     	; 0x53e <__do_copy_data+0x10>

00000548 <__do_clear_bss>:
     548:	16 e0       	ldi	r17, 0x06	; 6
     54a:	a0 e0       	ldi	r26, 0x00	; 0
     54c:	b2 e0       	ldi	r27, 0x02	; 2
     54e:	01 c0       	rjmp	.+2      	; 0x552 <.do_clear_bss_start>

00000550 <.do_clear_bss_loop>:
     550:	1d 92       	st	X+, r1

00000552 <.do_clear_bss_start>:
     552:	ad 39       	cpi	r26, 0x9D	; 157
     554:	b1 07       	cpc	r27, r17
     556:	e1 f7       	brne	.-8      	; 0x550 <.do_clear_bss_loop>
     558:	0e 94 91 08 	call	0x1122	; 0x1122 <main>
     55c:	0c 94 8c 22 	jmp	0x4518	; 0x4518 <_exit>

00000560 <__bad_interrupt>:
     560:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000564 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     564:	24 9a       	sbi	0x04, 4	; 4
}
     566:	08 95       	ret

00000568 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     568:	89 2b       	or	r24, r25
     56a:	11 f0       	breq	.+4      	; 0x570 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     56c:	2c 9a       	sbi	0x05, 4	; 5
     56e:	08 95       	ret
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     570:	2c 98       	cbi	0x05, 4	; 5
     572:	08 95       	ret

00000574 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     574:	f9 99       	sbic	0x1f, 1	; 31
     576:	fe cf       	rjmp	.-4      	; 0x574 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     578:	92 bd       	out	0x22, r25	; 34
     57a:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     580:	80 b5       	in	r24, 0x20	; 32
}
     582:	08 95       	ret

00000584 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     584:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     586:	f9 99       	sbic	0x1f, 1	; 31
     588:	fe cf       	rjmp	.-4      	; 0x586 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     58a:	92 bd       	out	0x22, r25	; 34
     58c:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     592:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     594:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     596:	89 2f       	mov	r24, r25
     598:	86 23       	and	r24, r22
     59a:	39 f0       	breq	.+14     	; 0x5aa <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     59c:	6f 3f       	cpi	r22, 0xFF	; 255
     59e:	19 f0       	breq	.+6      	; 0x5a6 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     5a0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5a2:	84 e0       	ldi	r24, 0x04	; 4
     5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5a6:	84 e1       	ldi	r24, 0x14	; 20
     5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     5aa:	99 23       	and	r25, r25
     5ac:	21 f0       	breq	.+8      	; 0x5b6 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     5ae:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5b0:	84 e2       	ldi	r24, 0x24	; 36
     5b2:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     5b4:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     5b6:	78 94       	sei
}
     5b8:	08 95       	ret

000005ba <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     5ba:	8f 92       	push	r8
     5bc:	9f 92       	push	r9
     5be:	af 92       	push	r10
     5c0:	bf 92       	push	r11
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	df 93       	push	r29
     5ce:	cf 93       	push	r28
     5d0:	0f 92       	push	r0
     5d2:	0f 92       	push	r0
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	5c 01       	movw	r10, r24
     5da:	6b 01       	movw	r12, r22
     5dc:	7a 01       	movw	r14, r20
     5de:	4a 01       	movw	r8, r20
     5e0:	00 e0       	ldi	r16, 0x00	; 0
     5e2:	1e c0       	rjmp	.+60     	; 0x620 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     5e4:	00 23       	and	r16, r16
     5e6:	19 f0       	breq	.+6      	; 0x5ee <memcpy_to_eeprom_with_checksum+0x34>
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	08 c0       	rjmp	.+16     	; 0x5fe <memcpy_to_eeprom_with_checksum+0x44>
     5ee:	20 2f       	mov	r18, r16
     5f0:	33 27       	eor	r19, r19
     5f2:	27 fd       	sbrc	r18, 7
     5f4:	30 95       	com	r19
     5f6:	22 27       	eor	r18, r18
     5f8:	33 0f       	add	r19, r19
     5fa:	22 1f       	adc	r18, r18
     5fc:	33 27       	eor	r19, r19
    checksum += *source;
     5fe:	f6 01       	movw	r30, r12
     600:	61 91       	ld	r22, Z+
     602:	6f 01       	movw	r12, r30
     604:	06 2f       	mov	r16, r22
     606:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     608:	9c 01       	movw	r18, r24
     60a:	2f 5f       	subi	r18, 0xFF	; 255
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
     60e:	3a 83       	std	Y+2, r19	; 0x02
     610:	29 83       	std	Y+1, r18	; 0x01
     612:	0e 94 c2 02 	call	0x584	; 0x584 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     616:	08 94       	sec
     618:	81 08       	sbc	r8, r1
     61a:	91 08       	sbc	r9, r1
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	81 14       	cp	r8, r1
     622:	91 04       	cpc	r9, r1
     624:	f9 f6       	brne	.-66     	; 0x5e4 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     626:	c7 01       	movw	r24, r14
     628:	8a 0d       	add	r24, r10
     62a:	9b 1d       	adc	r25, r11
     62c:	60 2f       	mov	r22, r16
     62e:	0e 94 c2 02 	call	0x584	; 0x584 <eeprom_put_char>
}
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	bf 90       	pop	r11
     646:	af 90       	pop	r10
     648:	9f 90       	pop	r9
     64a:	8f 90       	pop	r8
     64c:	08 95       	ret

0000064e <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	ec 01       	movw	r28, r24
     654:	fb 01       	movw	r30, r22
     656:	9a 01       	movw	r18, r20
     658:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     65a:	b1 e0       	ldi	r27, 0x01	; 1
     65c:	19 c0       	rjmp	.+50     	; 0x690 <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     65e:	f9 99       	sbic	0x1f, 1	; 31
     660:	fe cf       	rjmp	.-4      	; 0x65e <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     662:	f2 bd       	out	0x22, r31	; 34
     664:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     666:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     668:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     66a:	99 23       	and	r25, r25
     66c:	19 f0       	breq	.+6      	; 0x674 <memcpy_from_eeprom_with_checksum+0x26>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	08 c0       	rjmp	.+16     	; 0x684 <memcpy_from_eeprom_with_checksum+0x36>
     674:	89 2f       	mov	r24, r25
     676:	99 27       	eor	r25, r25
     678:	87 fd       	sbrc	r24, 7
     67a:	90 95       	com	r25
     67c:	88 27       	eor	r24, r24
     67e:	99 0f       	add	r25, r25
     680:	88 1f       	adc	r24, r24
     682:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     684:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     686:	9a 2f       	mov	r25, r26
     688:	98 0f       	add	r25, r24
    *(destination++) = data; 
     68a:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	30 40       	sbci	r19, 0x00	; 0
     690:	21 15       	cp	r18, r1
     692:	31 05       	cpc	r19, r1
     694:	21 f7       	brne	.-56     	; 0x65e <memcpy_from_eeprom_with_checksum+0x10>
     696:	46 0f       	add	r20, r22
     698:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     69a:	f9 99       	sbic	0x1f, 1	; 31
     69c:	fe cf       	rjmp	.-4      	; 0x69a <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     69e:	52 bd       	out	0x22, r21	; 34
     6a0:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     6a6:	80 b5       	in	r24, 0x20	; 32
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	98 17       	cp	r25, r24
     6ae:	11 f4       	brne	.+4      	; 0x6b4 <memcpy_from_eeprom_with_checksum+0x66>
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     6b4:	c9 01       	movw	r24, r18
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     6bc:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     6c0:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     6c4:	40 93 27 02 	sts	0x0227, r20
}
     6c8:	08 95       	ret

000006ca <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     6ca:	af 92       	push	r10
     6cc:	bf 92       	push	r11
     6ce:	cf 92       	push	r12
     6d0:	df 92       	push	r13
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	0f 92       	push	r0
     6e0:	0f 92       	push	r0
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	6c 01       	movw	r12, r24
     6e8:	5b 01       	movw	r10, r22
     6ea:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     6ec:	fb 01       	movw	r30, r22
     6ee:	00 81       	ld	r16, Z
     6f0:	11 81       	ldd	r17, Z+1	; 0x01
     6f2:	08 0f       	add	r16, r24
     6f4:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     6f6:	c8 01       	movw	r24, r16
     6f8:	be 01       	movw	r22, r28
     6fa:	6f 5f       	subi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <strtod>
     702:	f7 01       	movw	r30, r14
     704:	60 83       	st	Z, r22
     706:	71 83       	std	Z+1, r23	; 0x01
     708:	82 83       	std	Z+2, r24	; 0x02
     70a:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	80 17       	cp	r24, r16
     712:	91 07       	cpc	r25, r17
     714:	31 f4       	brne	.+12     	; 0x722 <read_double+0x58>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 00 02 	sts	0x0200, r24
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	07 c0       	rjmp	.+14     	; 0x730 <read_double+0x66>
    return(0); 
  };

  *char_counter = end - line;
     722:	8c 19       	sub	r24, r12
     724:	9d 09       	sbc	r25, r13
     726:	f5 01       	movw	r30, r10
     728:	91 83       	std	Z+1, r25	; 0x01
     72a:	80 83       	st	Z, r24
     72c:	21 e0       	ldi	r18, 0x01	; 1
     72e:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     730:	c9 01       	movw	r24, r18
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	cf 91       	pop	r28
     738:	df 91       	pop	r29
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	08 95       	ret

0000074c <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
     756:	8b 01       	movw	r16, r22
     758:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     75a:	ed 91       	ld	r30, X+
     75c:	fc 91       	ld	r31, X
     75e:	11 97       	sbiw	r26, 0x01	; 1
     760:	e4 0f       	add	r30, r20
     762:	f5 1f       	adc	r31, r21
     764:	e0 81       	ld	r30, Z
     766:	ee 23       	and	r30, r30
     768:	39 f0       	breq	.+14     	; 0x778 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     76a:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     76c:	e1 54       	subi	r30, 0x41	; 65
     76e:	ea 31       	cpi	r30, 0x1A	; 26
     770:	30 f0       	brcs	.+12     	; 0x77e <next_statement+0x32>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	80 93 00 02 	sts	0x0200, r24
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	10 c0       	rjmp	.+32     	; 0x79e <next_statement+0x52>
    return(0);
  }
  (*char_counter)++;
     77e:	8d 91       	ld	r24, X+
     780:	9c 91       	ld	r25, X
     782:	11 97       	sbiw	r26, 0x01	; 1
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	8d 93       	st	X+, r24
     788:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     78a:	ca 01       	movw	r24, r20
     78c:	b9 01       	movw	r22, r18
     78e:	a8 01       	movw	r20, r16
     790:	0e 94 65 03 	call	0x6ca	; 0x6ca <read_double>
     794:	00 97       	sbiw	r24, 0x00	; 0
     796:	11 f0       	breq	.+4      	; 0x79c <next_statement+0x50>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     79e:	c9 01       	movw	r24, r18
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     7aa:	88 e2       	ldi	r24, 0x28	; 40
     7ac:	e0 e0       	ldi	r30, 0x00	; 0
     7ae:	f2 e0       	ldi	r31, 0x02	; 2
     7b0:	df 01       	movw	r26, r30
     7b2:	1d 92       	st	X+, r1
     7b4:	8a 95       	dec	r24
     7b6:	e9 f7       	brne	.-6      	; 0x7b2 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     7b8:	60 91 86 06 	lds	r22, 0x0686
     7bc:	70 91 87 06 	lds	r23, 0x0687
     7c0:	80 91 88 06 	lds	r24, 0x0688
     7c4:	90 91 89 06 	lds	r25, 0x0689
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 e7       	ldi	r20, 0x70	; 112
     7ce:	52 e4       	ldi	r21, 0x42	; 66
     7d0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
     7d4:	60 93 0a 02 	sts	0x020A, r22
     7d8:	70 93 0b 02 	sts	0x020B, r23
     7dc:	80 93 0c 02 	sts	0x020C, r24
     7e0:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     7e4:	60 91 8a 06 	lds	r22, 0x068A
     7e8:	70 91 8b 06 	lds	r23, 0x068B
     7ec:	80 91 8c 06 	lds	r24, 0x068C
     7f0:	90 91 8d 06 	lds	r25, 0x068D
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e7       	ldi	r20, 0x70	; 112
     7fa:	52 e4       	ldi	r21, 0x42	; 66
     7fc:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
     800:	60 93 0e 02 	sts	0x020E, r22
     804:	70 93 0f 02 	sts	0x020F, r23
     808:	80 93 10 02 	sts	0x0210, r24
     80c:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     810:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     820:	90 93 04 02 	sts	0x0204, r25
}
     824:	08 95       	ret

00000826 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     826:	2f 92       	push	r2
     828:	3f 92       	push	r3
     82a:	4f 92       	push	r4
     82c:	5f 92       	push	r5
     82e:	6f 92       	push	r6
     830:	7f 92       	push	r7
     832:	8f 92       	push	r8
     834:	9f 92       	push	r9
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	e2 97       	sbiw	r28, 0x32	; 50
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     85c:	1b 82       	std	Y+3, r1	; 0x03
     85e:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	a0 e0       	ldi	r26, 0x00	; 0
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	88 87       	std	Y+8, r24	; 0x08
     86a:	99 87       	std	Y+9, r25	; 0x09
     86c:	aa 87       	std	Y+10, r26	; 0x0a
     86e:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     870:	80 e1       	ldi	r24, 0x10	; 16
     872:	fe 01       	movw	r30, r28
     874:	3c 96       	adiw	r30, 0x0c	; 12
     876:	df 01       	movw	r26, r30
     878:	98 2f       	mov	r25, r24
     87a:	1d 92       	st	X+, r1
     87c:	9a 95       	dec	r25
     87e:	e9 f7       	brne	.-6      	; 0x87a <gc_execute_line+0x54>
  clear_vector(offset);
     880:	fe 01       	movw	r30, r28
     882:	7c 96       	adiw	r30, 0x1c	; 28
     884:	df 01       	movw	r26, r30
     886:	1d 92       	st	X+, r1
     888:	8a 95       	dec	r24
     88a:	e9 f7       	brne	.-6      	; 0x886 <gc_execute_line+0x60>

  gc.status_code = GCSTATUS_OK;
     88c:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     890:	f5 01       	movw	r30, r10
     892:	80 81       	ld	r24, Z
     894:	88 32       	cpi	r24, 0x28	; 40
     896:	49 f1       	breq	.+82     	; 0x8ea <gc_execute_line+0xc4>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     898:	8f 32       	cpi	r24, 0x2F	; 47
     89a:	29 f4       	brne	.+10     	; 0x8a6 <gc_execute_line+0x80>
     89c:	8a 81       	ldd	r24, Y+2	; 0x02
     89e:	9b 81       	ldd	r25, Y+3	; 0x03
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	9b 83       	std	Y+3, r25	; 0x03
     8a4:	8a 83       	std	Y+2, r24	; 0x02
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     8a6:	d5 01       	movw	r26, r10
     8a8:	8c 91       	ld	r24, X
     8aa:	84 32       	cpi	r24, 0x24	; 36
     8ac:	a1 f0       	breq	.+40     	; 0x8d6 <gc_execute_line+0xb0>
     8ae:	77 24       	eor	r7, r7
     8b0:	1c a6       	std	Y+44, r1	; 0x2c
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     8b2:	12 e0       	ldi	r17, 0x02	; 2
     8b4:	41 2e       	mov	r4, r17
     8b6:	51 2c       	mov	r5, r1
     8b8:	4c 0e       	add	r4, r28
     8ba:	5d 1e       	adc	r5, r29
     8bc:	1e 01       	movw	r2, r28
     8be:	08 94       	sec
     8c0:	21 1c       	adc	r2, r1
     8c2:	31 1c       	adc	r3, r1
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     8c4:	b3 e0       	ldi	r27, 0x03	; 3
     8c6:	9b 2e       	mov	r9, r27
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     8c8:	dd 24       	eor	r13, r13
     8ca:	d3 94       	inc	r13
			}

	       break;

      case 'G':
      switch(int_value) {
     8cc:	a2 e0       	ldi	r26, 0x02	; 2
     8ce:	ca 2e       	mov	r12, r26
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     8d0:	f4 e0       	ldi	r31, 0x04	; 4
     8d2:	8f 2e       	mov	r8, r31
     8d4:	e9 c1       	rjmp	.+978    	; 0xca8 <gc_execute_line+0x482>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	9b 83       	std	Y+3, r25	; 0x03
     8dc:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     8de:	f5 01       	movw	r30, r10
     8e0:	81 81       	ldd	r24, Z+1	; 0x01
     8e2:	88 23       	and	r24, r24
     8e4:	21 f4       	brne	.+8      	; 0x8ee <gc_execute_line+0xc8>
     8e6:	0e 94 43 13 	call	0x2686	; 0x2686 <settings_dump>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	c2 c3       	rjmp	.+1924   	; 0x1072 <gc_execute_line+0x84c>
    read_double(line, &char_counter, &p);
     8ee:	8e 01       	movw	r16, r28
     8f0:	0e 5f       	subi	r16, 0xFE	; 254
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	c5 01       	movw	r24, r10
     8f6:	b8 01       	movw	r22, r16
     8f8:	ae 01       	movw	r20, r28
     8fa:	48 5f       	subi	r20, 0xF8	; 248
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	0e 94 65 03 	call	0x6ca	; 0x6ca <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	f5 01       	movw	r30, r10
     908:	e8 0f       	add	r30, r24
     90a:	f9 1f       	adc	r31, r25
     90c:	20 81       	ld	r18, Z
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	9b 83       	std	Y+3, r25	; 0x03
     912:	8a 83       	std	Y+2, r24	; 0x02
     914:	2d 33       	cpi	r18, 0x3D	; 61
     916:	09 f0       	breq	.+2      	; 0x91a <gc_execute_line+0xf4>
     918:	ab c3       	rjmp	.+1878   	; 0x1070 <gc_execute_line+0x84a>
    read_double(line, &char_counter, &value);
     91a:	c5 01       	movw	r24, r10
     91c:	b8 01       	movw	r22, r16
     91e:	ae 01       	movw	r20, r28
     920:	4c 5f       	subi	r20, 0xFC	; 252
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e 94 65 03 	call	0x6ca	; 0x6ca <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     928:	ea 81       	ldd	r30, Y+2	; 0x02
     92a:	fb 81       	ldd	r31, Y+3	; 0x03
     92c:	ea 0d       	add	r30, r10
     92e:	fb 1d       	adc	r31, r11
     930:	80 81       	ld	r24, Z
     932:	88 23       	and	r24, r24
     934:	09 f0       	breq	.+2      	; 0x938 <gc_execute_line+0x112>
     936:	9c c3       	rjmp	.+1848   	; 0x1070 <gc_execute_line+0x84a>
    settings_store_setting(p, value);
     938:	68 85       	ldd	r22, Y+8	; 0x08
     93a:	79 85       	ldd	r23, Y+9	; 0x09
     93c:	8a 85       	ldd	r24, Y+10	; 0x0a
     93e:	9b 85       	ldd	r25, Y+11	; 0x0b
     940:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	4c 81       	ldd	r20, Y+4	; 0x04
     94a:	5d 81       	ldd	r21, Y+5	; 0x05
     94c:	6e 81       	ldd	r22, Y+6	; 0x06
     94e:	7f 81       	ldd	r23, Y+7	; 0x07
     950:	0e 94 c7 12 	call	0x258e	; 0x258e <settings_store_setting>
     954:	8a c3       	rjmp	.+1812   	; 0x106a <gc_execute_line+0x844>
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     956:	6c 81       	ldd	r22, Y+4	; 0x04
     958:	7d 81       	ldd	r23, Y+5	; 0x05
     95a:	8e 81       	ldd	r24, Y+6	; 0x06
     95c:	9f 81       	ldd	r25, Y+7	; 0x07
     95e:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <trunc>
     962:	7b 01       	movw	r14, r22
     964:	8c 01       	movw	r16, r24
     966:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
     96a:	fb 01       	movw	r30, r22

    switch(letter) {
     96c:	29 81       	ldd	r18, Y+1	; 0x01
     96e:	27 34       	cpi	r18, 0x47	; 71
     970:	09 f4       	brne	.+2      	; 0x974 <gc_execute_line+0x14e>
     972:	91 c0       	rjmp	.+290    	; 0xa96 <gc_execute_line+0x270>
     974:	28 34       	cpi	r18, 0x48	; 72
     976:	20 f4       	brcc	.+8      	; 0x980 <gc_execute_line+0x15a>
     978:	24 34       	cpi	r18, 0x44	; 68
     97a:	09 f0       	breq	.+2      	; 0x97e <gc_execute_line+0x158>
     97c:	91 c1       	rjmp	.+802    	; 0xca0 <gc_execute_line+0x47a>
     97e:	07 c0       	rjmp	.+14     	; 0x98e <gc_execute_line+0x168>
     980:	2d 34       	cpi	r18, 0x4D	; 77
     982:	09 f4       	brne	.+2      	; 0x986 <gc_execute_line+0x160>
     984:	2d c1       	rjmp	.+602    	; 0xbe0 <gc_execute_line+0x3ba>
     986:	24 35       	cpi	r18, 0x54	; 84
     988:	09 f0       	breq	.+2      	; 0x98c <gc_execute_line+0x166>
     98a:	8a c1       	rjmp	.+788    	; 0xca0 <gc_execute_line+0x47a>
     98c:	83 c1       	rjmp	.+774    	; 0xc94 <gc_execute_line+0x46e>
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     98e:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     990:	8b e0       	ldi	r24, 0x0B	; 11
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
		  	printBinary( DIRECTION_DDR );
     998:	60 b3       	in	r22, 0x10	; 16
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     9a4:	88 e0       	ldi	r24, 0x08	; 8
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     9ac:	85 ef       	ldi	r24, 0xF5	; 245
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
		  	printBinary( DIRECTION_PORT );
     9b4:	61 b3       	in	r22, 0x11	; 17
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 b1 1a 	call	0x3562	; 0x3562 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     9c0:	82 ef       	ldi	r24, 0xF2	; 242
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

			ch = PORTD;
     9c8:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     9ca:	88 ee       	ldi	r24, 0xE8	; 232
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
		  	printBinary( ch );
     9d2:	ff 24       	eor	r15, r15
     9d4:	00 e0       	ldi	r16, 0x00	; 0
     9d6:	10 e0       	ldi	r17, 0x00	; 0
     9d8:	c8 01       	movw	r24, r16
     9da:	b7 01       	movw	r22, r14
     9dc:	0e 94 b1 1a 	call	0x3562	; 0x3562 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     9e0:	85 ee       	ldi	r24, 0xE5	; 229
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

			ch = PIND;
     9e8:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     9ea:	86 ed       	ldi	r24, 0xD6	; 214
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
		  	printBinary( ch );
     9f2:	ff 24       	eor	r15, r15
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	c8 01       	movw	r24, r16
     9fa:	b7 01       	movw	r22, r14
     9fc:	0e 94 b1 1a 	call	0x3562	; 0x3562 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     a00:	83 ed       	ldi	r24, 0xD3	; 211
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     a08:	86 ec       	ldi	r24, 0xC6	; 198
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
			printInteger( is_head_down() );
     a10:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <is_head_down>
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	a0 e0       	ldi	r26, 0x00	; 0
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	bc 01       	movw	r22, r24
     a1c:	cd 01       	movw	r24, r26
     a1e:	0e 94 96 1a 	call	0x352c	; 0x352c <printInteger>
	      	printPgmString(PSTR("\r\n"));
     a22:	83 ec       	ldi	r24, 0xC3	; 195
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     a2a:	88 eb       	ldi	r24, 0xB8	; 184
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
			printInteger( is_rotated() );
     a32:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <is_rotated>
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	bc 01       	movw	r22, r24
     a3e:	cd 01       	movw	r24, r26
     a40:	0e 94 96 1a 	call	0x352c	; 0x352c <printInteger>
	      	printPgmString(PSTR("\r\n"));
     a44:	85 eb       	ldi	r24, 0xB5	; 181
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     a4c:	4b 9b       	sbis	0x09, 3	; 9
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <gc_execute_line+0x232>
		      	printPgmString(PSTR("XL1\r\n"));
     a50:	8f ea       	ldi	r24, 0xAF	; 175
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     a58:	4a 9b       	sbis	0x09, 2	; 9
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <gc_execute_line+0x23e>
		      	printPgmString(PSTR("XL2\r\n"));
     a5c:	89 ea       	ldi	r24, 0xA9	; 169
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     a64:	48 9b       	sbis	0x09, 0	; 9
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <gc_execute_line+0x24a>
		      	printPgmString(PSTR("YL1\r\n"));
     a68:	83 ea       	ldi	r24, 0xA3	; 163
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     a70:	49 9b       	sbis	0x09, 1	; 9
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <gc_execute_line+0x256>
		      	printPgmString(PSTR("YL2\r\n"));
     a74:	8d e9       	ldi	r24, 0x9D	; 157
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

			if( bit_is_set( XHM_PIN, X_HOME ) )
     a7c:	04 9b       	sbis	0x00, 4	; 0
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <gc_execute_line+0x262>
		      	printPgmString(PSTR("X_HOME\r\n"));
     a80:	84 e9       	ldi	r24, 0x94	; 148
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     a88:	90 9b       	sbis	0x12, 0	; 18
     a8a:	0a c1       	rjmp	.+532    	; 0xca0 <gc_execute_line+0x47a>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     a8c:	8b e8       	ldi	r24, 0x8B	; 139
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
     a94:	05 c1       	rjmp	.+522    	; 0xca0 <gc_execute_line+0x47a>
			}

	       break;

      case 'G':
      switch(int_value) {
     a96:	65 31       	cpi	r22, 0x15	; 21
     a98:	71 05       	cpc	r23, r1
     a9a:	09 f4       	brne	.+2      	; 0xa9e <gc_execute_line+0x278>
     a9c:	89 c0       	rjmp	.+274    	; 0xbb0 <gc_execute_line+0x38a>
     a9e:	66 31       	cpi	r22, 0x16	; 22
     aa0:	71 05       	cpc	r23, r1
     aa2:	84 f5       	brge	.+96     	; 0xb04 <gc_execute_line+0x2de>
     aa4:	64 30       	cpi	r22, 0x04	; 4
     aa6:	71 05       	cpc	r23, r1
     aa8:	09 f4       	brne	.+2      	; 0xaac <gc_execute_line+0x286>
     aaa:	5b c0       	rjmp	.+182    	; 0xb62 <gc_execute_line+0x33c>
     aac:	65 30       	cpi	r22, 0x05	; 5
     aae:	71 05       	cpc	r23, r1
     ab0:	a4 f4       	brge	.+40     	; 0xada <gc_execute_line+0x2b4>
     ab2:	61 30       	cpi	r22, 0x01	; 1
     ab4:	71 05       	cpc	r23, r1
     ab6:	09 f4       	brne	.+2      	; 0xaba <gc_execute_line+0x294>
     ab8:	5a c0       	rjmp	.+180    	; 0xb6e <gc_execute_line+0x348>
     aba:	62 30       	cpi	r22, 0x02	; 2
     abc:	71 05       	cpc	r23, r1
     abe:	24 f4       	brge	.+8      	; 0xac8 <gc_execute_line+0x2a2>
     ac0:	67 2b       	or	r22, r23
     ac2:	09 f4       	brne	.+2      	; 0xac6 <gc_execute_line+0x2a0>
     ac4:	51 c0       	rjmp	.+162    	; 0xb68 <gc_execute_line+0x342>
     ac6:	e3 c0       	rjmp	.+454    	; 0xc8e <gc_execute_line+0x468>
     ac8:	62 30       	cpi	r22, 0x02	; 2
     aca:	71 05       	cpc	r23, r1
     acc:	09 f4       	brne	.+2      	; 0xad0 <gc_execute_line+0x2aa>
     ace:	52 c0       	rjmp	.+164    	; 0xb74 <gc_execute_line+0x34e>
     ad0:	63 30       	cpi	r22, 0x03	; 3
     ad2:	71 05       	cpc	r23, r1
     ad4:	09 f0       	breq	.+2      	; 0xad8 <gc_execute_line+0x2b2>
     ad6:	db c0       	rjmp	.+438    	; 0xc8e <gc_execute_line+0x468>
     ad8:	50 c0       	rjmp	.+160    	; 0xb7a <gc_execute_line+0x354>
     ada:	62 31       	cpi	r22, 0x12	; 18
     adc:	71 05       	cpc	r23, r1
     ade:	09 f4       	brne	.+2      	; 0xae2 <gc_execute_line+0x2bc>
     ae0:	56 c0       	rjmp	.+172    	; 0xb8e <gc_execute_line+0x368>
     ae2:	63 31       	cpi	r22, 0x13	; 19
     ae4:	71 05       	cpc	r23, r1
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <gc_execute_line+0x2cc>
     ae8:	61 31       	cpi	r22, 0x11	; 17
     aea:	71 05       	cpc	r23, r1
     aec:	09 f0       	breq	.+2      	; 0xaf0 <gc_execute_line+0x2ca>
     aee:	cf c0       	rjmp	.+414    	; 0xc8e <gc_execute_line+0x468>
     af0:	47 c0       	rjmp	.+142    	; 0xb80 <gc_execute_line+0x35a>
     af2:	63 31       	cpi	r22, 0x13	; 19
     af4:	71 05       	cpc	r23, r1
     af6:	09 f4       	brne	.+2      	; 0xafa <gc_execute_line+0x2d4>
     af8:	51 c0       	rjmp	.+162    	; 0xb9c <gc_execute_line+0x376>
     afa:	64 31       	cpi	r22, 0x14	; 20
     afc:	71 05       	cpc	r23, r1
     afe:	09 f0       	breq	.+2      	; 0xb02 <gc_execute_line+0x2dc>
     b00:	c6 c0       	rjmp	.+396    	; 0xc8e <gc_execute_line+0x468>
     b02:	53 c0       	rjmp	.+166    	; 0xbaa <gc_execute_line+0x384>
     b04:	6a 35       	cpi	r22, 0x5A	; 90
     b06:	71 05       	cpc	r23, r1
     b08:	09 f4       	brne	.+2      	; 0xb0c <gc_execute_line+0x2e6>
     b0a:	5b c0       	rjmp	.+182    	; 0xbc2 <gc_execute_line+0x39c>
     b0c:	6b 35       	cpi	r22, 0x5B	; 91
     b0e:	71 05       	cpc	r23, r1
     b10:	a4 f4       	brge	.+40     	; 0xb3a <gc_execute_line+0x314>
     b12:	6e 31       	cpi	r22, 0x1E	; 30
     b14:	71 05       	cpc	r23, r1
     b16:	11 f1       	breq	.+68     	; 0xb5c <gc_execute_line+0x336>
     b18:	6f 31       	cpi	r22, 0x1F	; 31
     b1a:	71 05       	cpc	r23, r1
     b1c:	2c f4       	brge	.+10     	; 0xb28 <gc_execute_line+0x302>
     b1e:	6c 31       	cpi	r22, 0x1C	; 28
     b20:	71 05       	cpc	r23, r1
     b22:	09 f0       	breq	.+2      	; 0xb26 <gc_execute_line+0x300>
     b24:	b4 c0       	rjmp	.+360    	; 0xc8e <gc_execute_line+0x468>
     b26:	1a c0       	rjmp	.+52     	; 0xb5c <gc_execute_line+0x336>
     b28:	65 33       	cpi	r22, 0x35	; 53
     b2a:	71 05       	cpc	r23, r1
     b2c:	09 f4       	brne	.+2      	; 0xb30 <gc_execute_line+0x30a>
     b2e:	43 c0       	rjmp	.+134    	; 0xbb6 <gc_execute_line+0x390>
     b30:	60 35       	cpi	r22, 0x50	; 80
     b32:	71 05       	cpc	r23, r1
     b34:	09 f0       	breq	.+2      	; 0xb38 <gc_execute_line+0x312>
     b36:	ab c0       	rjmp	.+342    	; 0xc8e <gc_execute_line+0x468>
     b38:	41 c0       	rjmp	.+130    	; 0xbbc <gc_execute_line+0x396>
     b3a:	6c 35       	cpi	r22, 0x5C	; 92
     b3c:	71 05       	cpc	r23, r1
     b3e:	09 f4       	brne	.+2      	; 0xb42 <gc_execute_line+0x31c>
     b40:	46 c0       	rjmp	.+140    	; 0xbce <gc_execute_line+0x3a8>
     b42:	6c 35       	cpi	r22, 0x5C	; 92
     b44:	71 05       	cpc	r23, r1
     b46:	0c f4       	brge	.+2      	; 0xb4a <gc_execute_line+0x324>
     b48:	3f c0       	rjmp	.+126    	; 0xbc8 <gc_execute_line+0x3a2>
     b4a:	6d 35       	cpi	r22, 0x5D	; 93
     b4c:	71 05       	cpc	r23, r1
     b4e:	09 f4       	brne	.+2      	; 0xb52 <gc_execute_line+0x32c>
     b50:	41 c0       	rjmp	.+130    	; 0xbd4 <gc_execute_line+0x3ae>
     b52:	6e 35       	cpi	r22, 0x5E	; 94
     b54:	71 05       	cpc	r23, r1
     b56:	09 f0       	breq	.+2      	; 0xb5a <gc_execute_line+0x334>
     b58:	9a c0       	rjmp	.+308    	; 0xc8e <gc_execute_line+0x468>
     b5a:	3f c0       	rjmp	.+126    	; 0xbda <gc_execute_line+0x3b4>
     b5c:	f2 e0       	ldi	r31, 0x02	; 2
     b5e:	fc a7       	std	Y+44, r31	; 0x2c
     b60:	9f c0       	rjmp	.+318    	; 0xca0 <gc_execute_line+0x47a>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	8c a7       	std	Y+44, r24	; 0x2c
     b66:	9c c0       	rjmp	.+312    	; 0xca0 <gc_execute_line+0x47a>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     b68:	10 92 01 02 	sts	0x0201, r1
     b6c:	99 c0       	rjmp	.+306    	; 0xca0 <gc_execute_line+0x47a>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     b6e:	d0 92 01 02 	sts	0x0201, r13
     b72:	96 c0       	rjmp	.+300    	; 0xca0 <gc_execute_line+0x47a>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     b74:	c0 92 01 02 	sts	0x0201, r12
     b78:	93 c0       	rjmp	.+294    	; 0xca0 <gc_execute_line+0x47a>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     b7a:	90 92 01 02 	sts	0x0201, r9
     b7e:	90 c0       	rjmp	.+288    	; 0xca0 <gc_execute_line+0x47a>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b80:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     b84:	d0 92 26 02 	sts	0x0226, r13
  gc.plane_axis_2 = axis_2;
     b88:	c0 92 27 02 	sts	0x0227, r12
     b8c:	89 c0       	rjmp	.+274    	; 0xca0 <gc_execute_line+0x47a>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b8e:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     b92:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     b96:	d0 92 27 02 	sts	0x0227, r13
     b9a:	82 c0       	rjmp	.+260    	; 0xca0 <gc_execute_line+0x47a>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b9c:	d0 92 25 02 	sts	0x0225, r13
  gc.plane_axis_1 = axis_1;
     ba0:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     ba4:	10 92 27 02 	sts	0x0227, r1
     ba8:	7b c0       	rjmp	.+246    	; 0xca0 <gc_execute_line+0x47a>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     baa:	d0 92 03 02 	sts	0x0203, r13
     bae:	78 c0       	rjmp	.+240    	; 0xca0 <gc_execute_line+0x47a>
        case 21: gc.inches_mode = FALSE; break;
     bb0:	10 92 03 02 	sts	0x0203, r1
     bb4:	75 c0       	rjmp	.+234    	; 0xca0 <gc_execute_line+0x47a>
     bb6:	77 24       	eor	r7, r7
     bb8:	73 94       	inc	r7
     bba:	72 c0       	rjmp	.+228    	; 0xca0 <gc_execute_line+0x47a>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     bbc:	80 92 01 02 	sts	0x0201, r8
     bc0:	6f c0       	rjmp	.+222    	; 0xca0 <gc_execute_line+0x47a>
        case 90: gc.absolute_mode = TRUE; break;
     bc2:	d0 92 04 02 	sts	0x0204, r13
     bc6:	6c c0       	rjmp	.+216    	; 0xca0 <gc_execute_line+0x47a>
        case 91: gc.absolute_mode = FALSE; break;
     bc8:	10 92 04 02 	sts	0x0204, r1
     bcc:	69 c0       	rjmp	.+210    	; 0xca0 <gc_execute_line+0x47a>
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	9c a7       	std	Y+44, r25	; 0x2c
     bd2:	66 c0       	rjmp	.+204    	; 0xca0 <gc_execute_line+0x47a>
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     bd4:	d0 92 02 02 	sts	0x0202, r13
     bd8:	63 c0       	rjmp	.+198    	; 0xca0 <gc_execute_line+0x47a>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     bda:	10 92 02 02 	sts	0x0202, r1
     bde:	60 c0       	rjmp	.+192    	; 0xca0 <gc_execute_line+0x47a>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     be0:	6d 33       	cpi	r22, 0x3D	; 61
     be2:	71 05       	cpc	r23, r1
     be4:	08 f0       	brcs	.+2      	; 0xbe8 <gc_execute_line+0x3c2>
     be6:	53 c0       	rjmp	.+166    	; 0xc8e <gc_execute_line+0x468>
     be8:	ee 58       	subi	r30, 0x8E	; 142
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	05 90       	lpm	r0, Z+
     bf2:	f4 91       	lpm	r31, Z+
     bf4:	e0 2d       	mov	r30, r0
     bf6:	19 94       	eijmp
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     bf8:	d0 92 05 02 	sts	0x0205, r13
     bfc:	51 c0       	rjmp	.+162    	; 0xca0 <gc_execute_line+0x47a>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     bfe:	c0 92 05 02 	sts	0x0205, r12
     c02:	4e c0       	rjmp	.+156    	; 0xca0 <gc_execute_line+0x47a>
        case 3: gc.spindle_direction = 1; break;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <gc_execute_line+0x3e8>
        case 4: gc.spindle_direction = -1; break;
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	9f ef       	ldi	r25, 0xFF	; 255
     c0e:	90 93 07 02 	sts	0x0207, r25
     c12:	80 93 06 02 	sts	0x0206, r24
     c16:	44 c0       	rjmp	.+136    	; 0xca0 <gc_execute_line+0x47a>
        case 5: gc.spindle_direction = 0; break;
     c18:	10 92 07 02 	sts	0x0207, r1
     c1c:	10 92 06 02 	sts	0x0206, r1
     c20:	3f c0       	rjmp	.+126    	; 0xca0 <gc_execute_line+0x47a>
        case 8: gc.coolant_flood = 1; break;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	90 93 09 02 	sts	0x0209, r25
     c2a:	80 93 08 02 	sts	0x0208, r24
     c2e:	38 c0       	rjmp	.+112    	; 0xca0 <gc_execute_line+0x47a>
        case 9: gc.coolant_flood = 0; break;
     c30:	10 92 09 02 	sts	0x0209, r1
     c34:	10 92 08 02 	sts	0x0208, r1
     c38:	33 c0       	rjmp	.+102    	; 0xca0 <gc_execute_line+0x47a>
	// head control
        case 10: head_down(1);break;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <gc_execute_line+0x41e>
        case 11: head_down(0);break;
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <head_down>
     c48:	2b c0       	rjmp	.+86     	; 0xca0 <gc_execute_line+0x47a>
	// atc
		case 12: atc_change(0);break;
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	11 c0       	rjmp	.+34     	; 0xc72 <gc_execute_line+0x44c>
		case 13: atc_change(1);break;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e c0       	rjmp	.+28     	; 0xc72 <gc_execute_line+0x44c>
		case 14: atc_change(2);break;
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0b c0       	rjmp	.+22     	; 0xc72 <gc_execute_line+0x44c>
		case 15: atc_change(3);break;
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <gc_execute_line+0x44c>
		case 16: atc_change(4);break;
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <gc_execute_line+0x44c>
		case 17: atc_change(5);break;
     c68:	85 e0       	ldi	r24, 0x05	; 5
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <gc_execute_line+0x44c>
		case 18: atc_change(6);break;
     c6e:	86 e0       	ldi	r24, 0x06	; 6
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 0f 1b 	call	0x361e	; 0x361e <atc_change>
     c76:	14 c0       	rjmp	.+40     	; 0xca0 <gc_execute_line+0x47a>
// vacuum
		case 19: vacuum(1);break;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <gc_execute_line+0x45c>
		case 20: vacuum(0);break;
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 87 1c 	call	0x390e	; 0x390e <vacuum>
     c86:	0c c0       	rjmp	.+24     	; 0xca0 <gc_execute_line+0x47a>
// tape knock
		case 21: tape_knock();break;
     c88:	0e 94 a8 1c 	call	0x3950	; 0x3950 <tape_knock>
     c8c:	09 c0       	rjmp	.+18     	; 0xca0 <gc_execute_line+0x47a>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     c8e:	90 92 00 02 	sts	0x0200, r9
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <gc_execute_line+0x47a>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     c94:	c8 01       	movw	r24, r16
     c96:	b7 01       	movw	r22, r14
     c98:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fixunssfsi>
     c9c:	60 93 22 02 	sts	0x0222, r22
    }
    if(gc.status_code) { break; }
     ca0:	80 91 00 02 	lds	r24, 0x0200
     ca4:	88 23       	and	r24, r24
     ca6:	59 f4       	brne	.+22     	; 0xcbe <gc_execute_line+0x498>
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     ca8:	c1 01       	movw	r24, r2
     caa:	be 01       	movw	r22, r28
     cac:	6c 5f       	subi	r22, 0xFC	; 252
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	a5 01       	movw	r20, r10
     cb2:	92 01       	movw	r18, r4
     cb4:	0e 94 a6 03 	call	0x74c	; 0x74c <next_statement>
     cb8:	89 2b       	or	r24, r25
     cba:	09 f0       	breq	.+2      	; 0xcbe <gc_execute_line+0x498>
     cbc:	4c ce       	rjmp	.-872    	; 0x956 <gc_execute_line+0x130>
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     cbe:	80 91 00 02 	lds	r24, 0x0200
     cc2:	88 23       	and	r24, r24
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <gc_execute_line+0x4a2>
     cc6:	d5 c1       	rjmp	.+938    	; 0x1072 <gc_execute_line+0x84c>

  char_counter = 0;
     cc8:	1b 82       	std	Y+3, r1	; 0x03
     cca:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
     ccc:	80 e1       	ldi	r24, 0x10	; 16
     cce:	fe 01       	movw	r30, r28
     cd0:	7c 96       	adiw	r30, 0x1c	; 28
     cd2:	df 01       	movw	r26, r30
     cd4:	1d 92       	st	X+, r1
     cd6:	8a 95       	dec	r24
     cd8:	e9 f7       	brne	.-6      	; 0xcd4 <gc_execute_line+0x4ae>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     cda:	de 01       	movw	r26, r28
     cdc:	1c 96       	adiw	r26, 0x0c	; 12
     cde:	e2 e1       	ldi	r30, 0x12	; 18
     ce0:	f2 e0       	ldi	r31, 0x02	; 2
     ce2:	80 e1       	ldi	r24, 0x10	; 16
     ce4:	01 90       	ld	r0, Z+
     ce6:	0d 92       	st	X+, r0
     ce8:	81 50       	subi	r24, 0x01	; 1
     cea:	e1 f7       	brne	.-8      	; 0xce4 <gc_execute_line+0x4be>
     cec:	1d a6       	std	Y+45, r1	; 0x2d
     cee:	1e a6       	std	Y+46, r1	; 0x2e
     cf0:	b0 e8       	ldi	r27, 0x80	; 128
     cf2:	bf a7       	std	Y+47, r27	; 0x2f
     cf4:	ef eb       	ldi	r30, 0xBF	; 191
     cf6:	e8 ab       	std	Y+48, r30	; 0x30

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     cf8:	e4 e0       	ldi	r30, 0x04	; 4
     cfa:	2e 2e       	mov	r2, r30
     cfc:	31 2c       	mov	r3, r1
     cfe:	2c 0e       	add	r2, r28
     d00:	3d 1e       	adc	r3, r29
     d02:	72 e0       	ldi	r23, 0x02	; 2
     d04:	47 2e       	mov	r4, r23
     d06:	51 2c       	mov	r5, r1
     d08:	4c 0e       	add	r4, r28
     d0a:	5d 1e       	adc	r5, r29
     d0c:	4e 01       	movw	r8, r28
     d0e:	08 94       	sec
     d10:	81 1c       	adc	r8, r1
     d12:	91 1c       	adc	r9, r1
     d14:	bf c0       	rjmp	.+382    	; 0xe94 <gc_execute_line+0x66e>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     d16:	cc 80       	ldd	r12, Y+4	; 0x04
     d18:	dd 80       	ldd	r13, Y+5	; 0x05
     d1a:	ee 80       	ldd	r14, Y+6	; 0x06
     d1c:	ff 80       	ldd	r15, Y+7	; 0x07
  gc.absolute_mode = TRUE;
}
extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     d1e:	80 91 03 02 	lds	r24, 0x0203
     d22:	88 23       	and	r24, r24
     d24:	19 f4       	brne	.+6      	; 0xd2c <gc_execute_line+0x506>
     d26:	a7 01       	movw	r20, r14
     d28:	96 01       	movw	r18, r12
     d2a:	0a c0       	rjmp	.+20     	; 0xd40 <gc_execute_line+0x51a>
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	23 e3       	ldi	r18, 0x33	; 51
     d32:	33 e3       	ldi	r19, 0x33	; 51
     d34:	4b ec       	ldi	r20, 0xCB	; 203
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     d40:	09 81       	ldd	r16, Y+1	; 0x01
     d42:	0c 34       	cpi	r16, 0x4C	; 76
     d44:	50 f4       	brcc	.+20     	; 0xd5a <gc_execute_line+0x534>
     d46:	09 34       	cpi	r16, 0x49	; 73
     d48:	08 f0       	brcs	.+2      	; 0xd4c <gc_execute_line+0x526>
     d4a:	45 c0       	rjmp	.+138    	; 0xdd6 <gc_execute_line+0x5b0>
     d4c:	03 34       	cpi	r16, 0x43	; 67
     d4e:	09 f4       	brne	.+2      	; 0xd52 <gc_execute_line+0x52c>
     d50:	8c c0       	rjmp	.+280    	; 0xe6a <gc_execute_line+0x644>
     d52:	06 34       	cpi	r16, 0x46	; 70
     d54:	09 f0       	breq	.+2      	; 0xd58 <gc_execute_line+0x532>
     d56:	9e c0       	rjmp	.+316    	; 0xe94 <gc_execute_line+0x66e>
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <gc_execute_line+0x552>
     d5a:	03 35       	cpi	r16, 0x53	; 83
     d5c:	09 f4       	brne	.+2      	; 0xd60 <gc_execute_line+0x53a>
     d5e:	4f c0       	rjmp	.+158    	; 0xdfe <gc_execute_line+0x5d8>
     d60:	04 35       	cpi	r16, 0x54	; 84
     d62:	20 f4       	brcc	.+8      	; 0xd6c <gc_execute_line+0x546>
     d64:	00 35       	cpi	r16, 0x50	; 80
     d66:	09 f0       	breq	.+2      	; 0xd6a <gc_execute_line+0x544>
     d68:	95 c0       	rjmp	.+298    	; 0xe94 <gc_execute_line+0x66e>
     d6a:	44 c0       	rjmp	.+136    	; 0xdf4 <gc_execute_line+0x5ce>
     d6c:	80 2f       	mov	r24, r16
     d6e:	88 55       	subi	r24, 0x58	; 88
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	08 f0       	brcs	.+2      	; 0xd76 <gc_execute_line+0x550>
     d74:	8f c0       	rjmp	.+286    	; 0xe94 <gc_execute_line+0x66e>
     d76:	4c c0       	rjmp	.+152    	; 0xe10 <gc_execute_line+0x5ea>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     d78:	80 91 02 02 	lds	r24, 0x0202
     d7c:	88 23       	and	r24, r24
     d7e:	29 f0       	breq	.+10     	; 0xd8a <gc_execute_line+0x564>
     d80:	2d a7       	std	Y+45, r18	; 0x2d
     d82:	3e a7       	std	Y+46, r19	; 0x2e
     d84:	4f a7       	std	Y+47, r20	; 0x2f
     d86:	58 ab       	std	Y+48, r21	; 0x30
     d88:	85 c0       	rjmp	.+266    	; 0xe94 <gc_execute_line+0x66e>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     d8a:	80 91 01 02 	lds	r24, 0x0201
     d8e:	88 23       	and	r24, r24
     d90:	89 f4       	brne	.+34     	; 0xdb4 <gc_execute_line+0x58e>
          gc.seek_rate = unit_converted_value/60;
     d92:	ca 01       	movw	r24, r20
     d94:	b9 01       	movw	r22, r18
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e7       	ldi	r20, 0x70	; 112
     d9c:	52 e4       	ldi	r21, 0x42	; 66
     d9e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
     da2:	60 93 0e 02 	sts	0x020E, r22
     da6:	70 93 0f 02 	sts	0x020F, r23
     daa:	80 93 10 02 	sts	0x0210, r24
     dae:	90 93 11 02 	sts	0x0211, r25
     db2:	70 c0       	rjmp	.+224    	; 0xe94 <gc_execute_line+0x66e>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
     db4:	ca 01       	movw	r24, r20
     db6:	b9 01       	movw	r22, r18
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e7       	ldi	r20, 0x70	; 112
     dbe:	52 e4       	ldi	r21, 0x42	; 66
     dc0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
     dc4:	60 93 0a 02 	sts	0x020A, r22
     dc8:	70 93 0b 02 	sts	0x020B, r23
     dcc:	80 93 0c 02 	sts	0x020C, r24
     dd0:	90 93 0d 02 	sts	0x020D, r25
     dd4:	5f c0       	rjmp	.+190    	; 0xe94 <gc_execute_line+0x66e>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     dd6:	e0 2f       	mov	r30, r16
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	e9 54       	subi	r30, 0x49	; 73
     ddc:	f0 40       	sbci	r31, 0x00	; 0
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	e8 0d       	add	r30, r8
     de8:	f9 1d       	adc	r31, r9
     dea:	23 8f       	std	Z+27, r18	; 0x1b
     dec:	34 8f       	std	Z+28, r19	; 0x1c
     dee:	45 8f       	std	Z+29, r20	; 0x1d
     df0:	56 8f       	std	Z+30, r21	; 0x1e
     df2:	50 c0       	rjmp	.+160    	; 0xe94 <gc_execute_line+0x66e>
      case 'P': p = value; break;
     df4:	c8 86       	std	Y+8, r12	; 0x08
     df6:	d9 86       	std	Y+9, r13	; 0x09
     df8:	ea 86       	std	Y+10, r14	; 0x0a
     dfa:	fb 86       	std	Y+11, r15	; 0x0b
     dfc:	4b c0       	rjmp	.+150    	; 0xe94 <gc_execute_line+0x66e>
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
     dfe:	c7 01       	movw	r24, r14
     e00:	b6 01       	movw	r22, r12
     e02:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
     e06:	70 93 24 02 	sts	0x0224, r23
     e0a:	60 93 23 02 	sts	0x0223, r22
     e0e:	42 c0       	rjmp	.+132    	; 0xe94 <gc_execute_line+0x66e>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
     e10:	80 91 04 02 	lds	r24, 0x0204
     e14:	88 23       	and	r24, r24
     e16:	11 f4       	brne	.+4      	; 0xe1c <gc_execute_line+0x5f6>
     e18:	77 20       	and	r7, r7
     e1a:	79 f0       	breq	.+30     	; 0xe3a <gc_execute_line+0x614>
        target[letter - 'X'] = unit_converted_value;
     e1c:	e0 2f       	mov	r30, r16
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	e8 55       	subi	r30, 0x58	; 88
     e22:	f0 40       	sbci	r31, 0x00	; 0
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	e8 0d       	add	r30, r8
     e2e:	f9 1d       	adc	r31, r9
     e30:	23 87       	std	Z+11, r18	; 0x0b
     e32:	34 87       	std	Z+12, r19	; 0x0c
     e34:	45 87       	std	Z+13, r20	; 0x0d
     e36:	56 87       	std	Z+14, r21	; 0x0e
     e38:	2d c0       	rjmp	.+90     	; 0xe94 <gc_execute_line+0x66e>
      } else {
        target[letter - 'X'] += unit_converted_value;
     e3a:	10 e0       	ldi	r17, 0x00	; 0
     e3c:	08 55       	subi	r16, 0x58	; 88
     e3e:	10 40       	sbci	r17, 0x00	; 0
     e40:	00 0f       	add	r16, r16
     e42:	11 1f       	adc	r17, r17
     e44:	00 0f       	add	r16, r16
     e46:	11 1f       	adc	r17, r17
     e48:	08 0d       	add	r16, r8
     e4a:	19 1d       	adc	r17, r9
     e4c:	d8 01       	movw	r26, r16
     e4e:	1b 96       	adiw	r26, 0x0b	; 11
     e50:	6d 91       	ld	r22, X+
     e52:	7d 91       	ld	r23, X+
     e54:	8d 91       	ld	r24, X+
     e56:	9c 91       	ld	r25, X
     e58:	1e 97       	sbiw	r26, 0x0e	; 14
     e5a:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
     e5e:	f8 01       	movw	r30, r16
     e60:	63 87       	std	Z+11, r22	; 0x0b
     e62:	74 87       	std	Z+12, r23	; 0x0c
     e64:	85 87       	std	Z+13, r24	; 0x0d
     e66:	96 87       	std	Z+14, r25	; 0x0e
     e68:	15 c0       	rjmp	.+42     	; 0xe94 <gc_execute_line+0x66e>
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
     e6a:	80 91 04 02 	lds	r24, 0x0204
     e6e:	88 23       	and	r24, r24
     e70:	11 f4       	brne	.+4      	; 0xe76 <gc_execute_line+0x650>
     e72:	77 20       	and	r7, r7
     e74:	29 f0       	breq	.+10     	; 0xe80 <gc_execute_line+0x65a>
		target[C_AXIS] = unit_converted_value;
     e76:	28 8f       	std	Y+24, r18	; 0x18
     e78:	39 8f       	std	Y+25, r19	; 0x19
     e7a:	4a 8f       	std	Y+26, r20	; 0x1a
     e7c:	5b 8f       	std	Y+27, r21	; 0x1b
     e7e:	0a c0       	rjmp	.+20     	; 0xe94 <gc_execute_line+0x66e>
      } else {
        target[C_AXIS] += unit_converted_value;
     e80:	68 8d       	ldd	r22, Y+24	; 0x18
     e82:	79 8d       	ldd	r23, Y+25	; 0x19
     e84:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e86:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e88:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
     e8c:	68 8f       	std	Y+24, r22	; 0x18
     e8e:	79 8f       	std	Y+25, r23	; 0x19
     e90:	8a 8f       	std	Y+26, r24	; 0x1a
     e92:	9b 8f       	std	Y+27, r25	; 0x1b
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     e94:	c4 01       	movw	r24, r8
     e96:	b1 01       	movw	r22, r2
     e98:	a5 01       	movw	r20, r10
     e9a:	92 01       	movw	r18, r4
     e9c:	0e 94 a6 03 	call	0x74c	; 0x74c <next_statement>
     ea0:	89 2b       	or	r24, r25
     ea2:	09 f0       	breq	.+2      	; 0xea6 <gc_execute_line+0x680>
     ea4:	38 cf       	rjmp	.-400    	; 0xd16 <gc_execute_line+0x4f0>
      break;      
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     ea6:	80 91 00 02 	lds	r24, 0x0200
     eaa:	88 23       	and	r24, r24
     eac:	09 f0       	breq	.+2      	; 0xeb0 <gc_execute_line+0x68a>
     eae:	e1 c0       	rjmp	.+450    	; 0x1072 <gc_execute_line+0x84c>
    
  // Update spindle state
  if (gc.spindle_direction) {
     eb0:	80 91 06 02 	lds	r24, 0x0206
     eb4:	90 91 07 02 	lds	r25, 0x0207
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	59 f0       	breq	.+22     	; 0xed2 <gc_execute_line+0x6ac>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
     ebc:	40 91 23 02 	lds	r20, 0x0223
     ec0:	50 91 24 02 	lds	r21, 0x0224
     ec4:	66 27       	eor	r22, r22
     ec6:	57 fd       	sbrc	r21, 7
     ec8:	60 95       	com	r22
     eca:	76 2f       	mov	r23, r22
     ecc:	0e 94 29 14 	call	0x2852	; 0x2852 <spindle_run>
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <gc_execute_line+0x6b0>
  } else {
    spindle_stop();
     ed2:	0e 94 34 14 	call	0x2868	; 0x2868 <spindle_stop>
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
     ed6:	80 91 08 02 	lds	r24, 0x0208
     eda:	90 91 09 02 	lds	r25, 0x0209
     ede:	89 2b       	or	r24, r25
     ee0:	19 f0       	breq	.+6      	; 0xee8 <gc_execute_line+0x6c2>
  	coolant_flood(TRUE);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <gc_execute_line+0x6c6>
  }
  else {
  	coolant_flood(FALSE);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 b4 02 	call	0x568	; 0x568 <coolant_flood>
  }
  
  // Perform any physical actions
  switch (next_action) {
     ef0:	fc a5       	ldd	r31, Y+44	; 0x2c
     ef2:	f1 30       	cpi	r31, 0x01	; 1
     ef4:	91 f0       	breq	.+36     	; 0xf1a <gc_execute_line+0x6f4>
     ef6:	f1 30       	cpi	r31, 0x01	; 1
     ef8:	f8 f0       	brcs	.+62     	; 0xf38 <gc_execute_line+0x712>
     efa:	f2 30       	cpi	r31, 0x02	; 2
     efc:	21 f0       	breq	.+8      	; 0xf06 <gc_execute_line+0x6e0>
     efe:	f3 30       	cpi	r31, 0x03	; 3
     f00:	09 f0       	breq	.+2      	; 0xf04 <gc_execute_line+0x6de>
     f02:	aa c0       	rjmp	.+340    	; 0x1058 <gc_execute_line+0x832>
     f04:	97 c0       	rjmp	.+302    	; 0x1034 <gc_execute_line+0x80e>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
     f06:	0e 94 b7 08 	call	0x116e	; 0x116e <mc_go_home>
     f0a:	80 e1       	ldi	r24, 0x10	; 16
     f0c:	fe 01       	movw	r30, r28
     f0e:	3c 96       	adiw	r30, 0x0c	; 12
     f10:	df 01       	movw	r26, r30
     f12:	1d 92       	st	X+, r1
     f14:	8a 95       	dec	r24
     f16:	e9 f7       	brne	.-6      	; 0xf12 <gc_execute_line+0x6ec>
     f18:	9f c0       	rjmp	.+318    	; 0x1058 <gc_execute_line+0x832>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
     f1a:	68 85       	ldd	r22, Y+8	; 0x08
     f1c:	79 85       	ldd	r23, Y+9	; 0x09
     f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f20:	9b 85       	ldd	r25, Y+11	; 0x0b
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	4a e7       	ldi	r20, 0x7A	; 122
     f28:	54 e4       	ldi	r21, 0x44	; 68
     f2a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
     f2e:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fixunssfsi>
     f32:	0e 94 ba 08 	call	0x1174	; 0x1174 <mc_dwell>
     f36:	90 c0       	rjmp	.+288    	; 0x1058 <gc_execute_line+0x832>
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     f38:	80 91 01 02 	lds	r24, 0x0201
     f3c:	88 23       	and	r24, r24
     f3e:	21 f0       	breq	.+8      	; 0xf48 <gc_execute_line+0x722>
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	09 f0       	breq	.+2      	; 0xf46 <gc_execute_line+0x720>
     f44:	89 c0       	rjmp	.+274    	; 0x1058 <gc_execute_line+0x832>
     f46:	2d c0       	rjmp	.+90     	; 0xfa2 <gc_execute_line+0x77c>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
     f48:	00 d0       	rcall	.+0      	; 0xf4a <gc_execute_line+0x724>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <gc_execute_line+0x726>
     f4c:	6c 85       	ldd	r22, Y+12	; 0x0c
     f4e:	7d 85       	ldd	r23, Y+13	; 0x0d
     f50:	8e 85       	ldd	r24, Y+14	; 0x0e
     f52:	9f 85       	ldd	r25, Y+15	; 0x0f
     f54:	28 89       	ldd	r18, Y+16	; 0x10
     f56:	39 89       	ldd	r19, Y+17	; 0x11
     f58:	4a 89       	ldd	r20, Y+18	; 0x12
     f5a:	5b 89       	ldd	r21, Y+19	; 0x13
     f5c:	ec 88       	ldd	r14, Y+20	; 0x14
     f5e:	fd 88       	ldd	r15, Y+21	; 0x15
     f60:	0e 89       	ldd	r16, Y+22	; 0x16
     f62:	1f 89       	ldd	r17, Y+23	; 0x17
     f64:	a8 8c       	ldd	r10, Y+24	; 0x18
     f66:	b9 8c       	ldd	r11, Y+25	; 0x19
     f68:	ca 8c       	ldd	r12, Y+26	; 0x1a
     f6a:	db 8c       	ldd	r13, Y+27	; 0x1b
     f6c:	60 90 0e 02 	lds	r6, 0x020E
     f70:	70 90 0f 02 	lds	r7, 0x020F
     f74:	80 90 10 02 	lds	r8, 0x0210
     f78:	90 90 11 02 	lds	r9, 0x0211
     f7c:	ed b7       	in	r30, 0x3d	; 61
     f7e:	fe b7       	in	r31, 0x3e	; 62
     f80:	61 82       	std	Z+1, r6	; 0x01
     f82:	72 82       	std	Z+2, r7	; 0x02
     f84:	83 82       	std	Z+3, r8	; 0x03
     f86:	94 82       	std	Z+4, r9	; 0x04
     f88:	16 82       	std	Z+6, r1	; 0x06
     f8a:	15 82       	std	Z+5, r1	; 0x05
     f8c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <plan_buffer_line>
     f90:	8d b7       	in	r24, 0x3d	; 61
     f92:	9e b7       	in	r25, 0x3e	; 62
     f94:	06 96       	adiw	r24, 0x06	; 6
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	9e bf       	out	0x3e, r25	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	8d bf       	out	0x3d, r24	; 61
     fa0:	5b c0       	rjmp	.+182    	; 0x1058 <gc_execute_line+0x832>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
     fa2:	2c 84       	ldd	r2, Y+12	; 0x0c
     fa4:	3d 84       	ldd	r3, Y+13	; 0x0d
     fa6:	4e 84       	ldd	r4, Y+14	; 0x0e
     fa8:	5f 84       	ldd	r5, Y+15	; 0x0f
     faa:	68 88       	ldd	r6, Y+16	; 0x10
     fac:	79 88       	ldd	r7, Y+17	; 0x11
     fae:	8a 88       	ldd	r8, Y+18	; 0x12
     fb0:	9b 88       	ldd	r9, Y+19	; 0x13
     fb2:	ec 88       	ldd	r14, Y+20	; 0x14
     fb4:	fd 88       	ldd	r15, Y+21	; 0x15
     fb6:	0e 89       	ldd	r16, Y+22	; 0x16
     fb8:	1f 89       	ldd	r17, Y+23	; 0x17
     fba:	a8 8c       	ldd	r10, Y+24	; 0x18
     fbc:	b9 8c       	ldd	r11, Y+25	; 0x19
     fbe:	ca 8c       	ldd	r12, Y+26	; 0x1a
     fc0:	db 8c       	ldd	r13, Y+27	; 0x1b
     fc2:	60 91 02 02 	lds	r22, 0x0202
     fc6:	66 23       	and	r22, r22
     fc8:	61 f4       	brne	.+24     	; 0xfe2 <gc_execute_line+0x7bc>
     fca:	90 91 0a 02 	lds	r25, 0x020A
     fce:	9d a7       	std	Y+45, r25	; 0x2d
     fd0:	a0 91 0b 02 	lds	r26, 0x020B
     fd4:	ae a7       	std	Y+46, r26	; 0x2e
     fd6:	b0 91 0c 02 	lds	r27, 0x020C
     fda:	bf a7       	std	Y+47, r27	; 0x2f
     fdc:	e0 91 0d 02 	lds	r30, 0x020D
     fe0:	e8 ab       	std	Y+48, r30	; 0x30
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <gc_execute_line+0x7be>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <gc_execute_line+0x7c0>
     fe6:	8d b7       	in	r24, 0x3d	; 61
     fe8:	9e b7       	in	r25, 0x3e	; 62
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	9a ab       	std	Y+50, r25	; 0x32
     fee:	89 ab       	std	Y+49, r24	; 0x31
     ff0:	2d a5       	ldd	r18, Y+45	; 0x2d
     ff2:	3e a5       	ldd	r19, Y+46	; 0x2e
     ff4:	4f a5       	ldd	r20, Y+47	; 0x2f
     ff6:	58 a9       	ldd	r21, Y+48	; 0x30
     ff8:	c9 01       	movw	r24, r18
     ffa:	da 01       	movw	r26, r20
     ffc:	ed b7       	in	r30, 0x3d	; 61
     ffe:	fe b7       	in	r31, 0x3e	; 62
    1000:	81 83       	std	Z+1, r24	; 0x01
    1002:	92 83       	std	Z+2, r25	; 0x02
    1004:	a3 83       	std	Z+3, r26	; 0x03
    1006:	b4 83       	std	Z+4, r27	; 0x04
    1008:	a9 a9       	ldd	r26, Y+49	; 0x31
    100a:	ba a9       	ldd	r27, Y+50	; 0x32
    100c:	14 96       	adiw	r26, 0x04	; 4
    100e:	6c 93       	st	X, r22
    1010:	14 97       	sbiw	r26, 0x04	; 4
    1012:	15 96       	adiw	r26, 0x05	; 5
    1014:	1c 92       	st	X, r1
    1016:	c2 01       	movw	r24, r4
    1018:	b1 01       	movw	r22, r2
    101a:	a4 01       	movw	r20, r8
    101c:	93 01       	movw	r18, r6
    101e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <plan_buffer_line>
    1022:	ed b7       	in	r30, 0x3d	; 61
    1024:	fe b7       	in	r31, 0x3e	; 62
    1026:	36 96       	adiw	r30, 0x06	; 6
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	fe bf       	out	0x3e, r31	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	ed bf       	out	0x3d, r30	; 61
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <gc_execute_line+0x832>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1034:	6c 85       	ldd	r22, Y+12	; 0x0c
    1036:	7d 85       	ldd	r23, Y+13	; 0x0d
    1038:	8e 85       	ldd	r24, Y+14	; 0x0e
    103a:	9f 85       	ldd	r25, Y+15	; 0x0f
    103c:	28 89       	ldd	r18, Y+16	; 0x10
    103e:	39 89       	ldd	r19, Y+17	; 0x11
    1040:	4a 89       	ldd	r20, Y+18	; 0x12
    1042:	5b 89       	ldd	r21, Y+19	; 0x13
    1044:	ec 88       	ldd	r14, Y+20	; 0x14
    1046:	fd 88       	ldd	r15, Y+21	; 0x15
    1048:	0e 89       	ldd	r16, Y+22	; 0x16
    104a:	1f 89       	ldd	r17, Y+23	; 0x17
    104c:	a8 8c       	ldd	r10, Y+24	; 0x18
    104e:	b9 8c       	ldd	r11, Y+25	; 0x19
    1050:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1052:	db 8c       	ldd	r13, Y+27	; 0x1b
    1054:	0e 94 1c 0a 	call	0x1438	; 0x1438 <plan_set_current>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    1058:	a2 e1       	ldi	r26, 0x12	; 18
    105a:	b2 e0       	ldi	r27, 0x02	; 2
    105c:	fe 01       	movw	r30, r28
    105e:	3c 96       	adiw	r30, 0x0c	; 12
    1060:	80 e1       	ldi	r24, 0x10	; 16
    1062:	01 90       	ld	r0, Z+
    1064:	0d 92       	st	X+, r0
    1066:	81 50       	subi	r24, 0x01	; 1
    1068:	e1 f7       	brne	.-8      	; 0x1062 <gc_execute_line+0x83c>

  return(gc.status_code);
    106a:	80 91 00 02 	lds	r24, 0x0200
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <gc_execute_line+0x84c>
    1070:	83 e0       	ldi	r24, 0x03	; 3
}
    1072:	e2 96       	adiw	r28, 0x32	; 50
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	9f 90       	pop	r9
    1094:	8f 90       	pop	r8
    1096:	7f 90       	pop	r7
    1098:	6f 90       	pop	r6
    109a:	5f 90       	pop	r5
    109c:	4f 90       	pop	r4
    109e:	3f 90       	pop	r3
    10a0:	2f 90       	pop	r2
    10a2:	08 95       	ret

000010a4 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	79 01       	movw	r14, r18
    10b6:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    10b8:	5f 77       	andi	r21, 0x7F	; 127
    10ba:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    10be:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <atan>
    10c2:	5b 01       	movw	r10, r22
    10c4:	6c 01       	movw	r12, r24
  if (y>0) {
    10c6:	c8 01       	movw	r24, r16
    10c8:	b7 01       	movw	r22, r14
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__gesf2>
    10d6:	18 16       	cp	r1, r24
    10d8:	cc f0       	brlt	.+50     	; 0x110c <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
    10da:	c6 01       	movw	r24, r12
    10dc:	b5 01       	movw	r22, r10
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__gesf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	2c f4       	brge	.+10     	; 0x10f8 <theta+0x54>
    {
      return(M_PI-theta);
    10ee:	6b ed       	ldi	r22, 0xDB	; 219
    10f0:	7f e0       	ldi	r23, 0x0F	; 15
    10f2:	89 e4       	ldi	r24, 0x49	; 73
    10f4:	90 e4       	ldi	r25, 0x40	; 64
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <theta+0x5c>
    } else {
      return(-M_PI-theta);
    10f8:	6b ed       	ldi	r22, 0xDB	; 219
    10fa:	7f e0       	ldi	r23, 0x0F	; 15
    10fc:	89 e4       	ldi	r24, 0x49	; 73
    10fe:	90 ec       	ldi	r25, 0xC0	; 192
    1100:	a6 01       	movw	r20, r12
    1102:	95 01       	movw	r18, r10
    1104:	0e 94 cd 1c 	call	0x399a	; 0x399a <__subsf3>
    1108:	5b 01       	movw	r10, r22
    110a:	6c 01       	movw	r12, r24
    }
  }
}
    110c:	b5 01       	movw	r22, r10
    110e:	c6 01       	movw	r24, r12
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	08 95       	ret

00001122 <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  sp_init();        
    1122:	0e 94 09 12 	call	0x2412	; 0x2412 <sp_init>
  settings_init();  
    1126:	0e 94 17 14 	call	0x282e	; 0x282e <settings_init>
  plan_init();      
    112a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <plan_init>
  st_init();        
    112e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <st_init>
  limits_init();
    1132:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <limits_init>
  spindle_init();   
    1136:	0e 94 22 14 	call	0x2844	; 0x2844 <spindle_init>
  coolant_init();
    113a:	0e 94 b2 02 	call	0x564	; 0x564 <coolant_init>
  atc_init();
    113e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <atc_init>
  head_init();
    1142:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <head_init>
  vacuum_init();
    1146:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <vacuum_init>
  panel_init();
    114a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <panel_init>
  gc_init();
    114e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    1152:	8d e1       	ldi	r24, 0x1D	; 29
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    115a:	83 b7       	in	r24, 0x33	; 51
    115c:	81 60       	ori	r24, 0x01	; 1
    115e:	83 bf       	out	0x33, r24	; 51
    1160:	88 95       	sleep
    1162:	83 b7       	in	r24, 0x33	; 51
    1164:	8e 7f       	andi	r24, 0xFE	; 254
    1166:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
    1168:	0e 94 9c 11 	call	0x2338	; 0x2338 <sp_process>
    116c:	f6 cf       	rjmp	.-20     	; 0x115a <main+0x38>

0000116e <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    116e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <st_go_home>
}
    1172:	08 95       	ret

00001174 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1174:	af 92       	push	r10
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	7b 01       	movw	r14, r22
    1186:	8c 01       	movw	r16, r24
  st_synchronize();
    1188:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <st_synchronize>
  _delay_ms(milliseconds);
    118c:	c8 01       	movw	r24, r16
    118e:	b7 01       	movw	r22, r14
    1190:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__floatunsisf>
    1194:	5b 01       	movw	r10, r22
    1196:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	4a e7       	ldi	r20, 0x7A	; 122
    119e:	55 e4       	ldi	r21, 0x45	; 69
    11a0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    11a4:	7b 01       	movw	r14, r22
    11a6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5f e3       	ldi	r21, 0x3F	; 63
    11b0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__cmpsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	1c f4       	brge	.+6      	; 0x11be <mc_dwell+0x4a>
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	24 c0       	rjmp	.+72     	; 0x1206 <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    11be:	c8 01       	movw	r24, r16
    11c0:	b7 01       	movw	r22, r14
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	3f ef       	ldi	r19, 0xFF	; 255
    11c6:	4f e7       	ldi	r20, 0x7F	; 127
    11c8:	57 e4       	ldi	r21, 0x47	; 71
    11ca:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__gesf2>
    11ce:	18 16       	cp	r1, r24
    11d0:	b4 f4       	brge	.+44     	; 0x11fe <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d2:	c6 01       	movw	r24, r12
    11d4:	b5 01       	movw	r22, r10
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    11e2:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11e6:	80 e9       	ldi	r24, 0x90	; 144
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <mc_dwell+0x82>
    11ec:	fc 01       	movw	r30, r24
    11ee:	31 97       	sbiw	r30, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	61 50       	subi	r22, 0x01	; 1
    11f4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	61 15       	cp	r22, r1
    11f8:	71 05       	cpc	r23, r1
    11fa:	c1 f7       	brne	.-16     	; 0x11ec <mc_dwell+0x78>
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fe:	c8 01       	movw	r24, r16
    1200:	b7 01       	movw	r22, r14
    1202:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fixunssfsi>
    1206:	cb 01       	movw	r24, r22
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <mc_dwell+0x94>
}
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	08 95       	ret

0000121e <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    121e:	fc 01       	movw	r30, r24
    1220:	60 91 96 06 	lds	r22, 0x0696
    1224:	70 91 97 06 	lds	r23, 0x0697
    1228:	80 91 98 06 	lds	r24, 0x0698
    122c:	90 91 99 06 	lds	r25, 0x0699
    1230:	21 a5       	ldd	r18, Z+41	; 0x29
    1232:	32 a5       	ldd	r19, Z+42	; 0x2a
    1234:	43 a5       	ldd	r20, Z+43	; 0x2b
    1236:	54 a5       	ldd	r21, Z+44	; 0x2c
    1238:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    123c:	08 95       	ret

0000123e <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    123e:	80 91 16 05 	lds	r24, 0x0516
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	08 95       	ret

00001246 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1246:	20 91 02 05 	lds	r18, 0x0502
    124a:	30 91 03 05 	lds	r19, 0x0503
    124e:	80 91 04 05 	lds	r24, 0x0504
    1252:	90 91 05 05 	lds	r25, 0x0505
    1256:	28 17       	cp	r18, r24
    1258:	39 07       	cpc	r19, r25
    125a:	69 f0       	breq	.+26     	; 0x1276 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    125c:	80 91 04 05 	lds	r24, 0x0504
    1260:	90 91 05 05 	lds	r25, 0x0505
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	6a e0       	ldi	r22, 0x0A	; 10
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	0e 94 97 20 	call	0x412e	; 0x412e <__divmodhi4>
    126e:	90 93 05 05 	sts	0x0505, r25
    1272:	80 93 04 05 	sts	0x0504, r24
    1276:	08 95       	ret

00001278 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1278:	20 91 02 05 	lds	r18, 0x0502
    127c:	30 91 03 05 	lds	r19, 0x0503
    1280:	80 91 04 05 	lds	r24, 0x0504
    1284:	90 91 05 05 	lds	r25, 0x0505
    1288:	28 17       	cp	r18, r24
    128a:	39 07       	cpc	r19, r25
    128c:	19 f4       	brne	.+6      	; 0x1294 <plan_get_current_block+0x1c>
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	0f c0       	rjmp	.+30     	; 0x12b2 <plan_get_current_block+0x3a>
  return(&block_buffer[block_buffer_tail]);
    1294:	20 91 04 05 	lds	r18, 0x0504
    1298:	30 91 05 05 	lds	r19, 0x0505
    129c:	89 e4       	ldi	r24, 0x49	; 73
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	28 9f       	mul	r18, r24
    12a2:	a0 01       	movw	r20, r0
    12a4:	29 9f       	mul	r18, r25
    12a6:	50 0d       	add	r21, r0
    12a8:	38 9f       	mul	r19, r24
    12aa:	50 0d       	add	r21, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	48 5d       	subi	r20, 0xD8	; 216
    12b0:	5d 4f       	sbci	r21, 0xFD	; 253
}
    12b2:	ca 01       	movw	r24, r20
    12b4:	08 95       	ret

000012b6 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    12b6:	4f 92       	push	r4
    12b8:	5f 92       	push	r5
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	ec 01       	movw	r28, r24
    12d8:	4b 01       	movw	r8, r22
  if(!current) { return; }
    12da:	61 15       	cp	r22, r1
    12dc:	71 05       	cpc	r23, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <planner_forward_pass_kernel+0x2c>
    12e0:	5e c0       	rjmp	.+188    	; 0x139e <planner_forward_pass_kernel+0xe8>
  if(previous) {
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <planner_forward_pass_kernel+0x32>
    12e6:	5b c0       	rjmp	.+182    	; 0x139e <planner_forward_pass_kernel+0xe8>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    12e8:	e9 a8       	ldd	r14, Y+49	; 0x31
    12ea:	fa a8       	ldd	r15, Y+50	; 0x32
    12ec:	0b a9       	ldd	r16, Y+51	; 0x33
    12ee:	1c a9       	ldd	r17, Y+52	; 0x34
    12f0:	fb 01       	movw	r30, r22
    12f2:	41 a8       	ldd	r4, Z+49	; 0x31
    12f4:	52 a8       	ldd	r5, Z+50	; 0x32
    12f6:	63 a8       	ldd	r6, Z+51	; 0x33
    12f8:	74 a8       	ldd	r7, Z+52	; 0x34
    12fa:	c8 01       	movw	r24, r16
    12fc:	b7 01       	movw	r22, r14
    12fe:	a3 01       	movw	r20, r6
    1300:	92 01       	movw	r18, r4
    1302:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__cmpsf2>
    1306:	88 23       	and	r24, r24
    1308:	0c f0       	brlt	.+2      	; 0x130c <planner_forward_pass_kernel+0x56>
    130a:	49 c0       	rjmp	.+146    	; 0x139e <planner_forward_pass_kernel+0xe8>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    130c:	f4 01       	movw	r30, r8
    130e:	a1 a4       	ldd	r10, Z+41	; 0x29
    1310:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1312:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1314:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1316:	c6 01       	movw	r24, r12
    1318:	b5 01       	movw	r22, r10
    131a:	a8 01       	movw	r20, r16
    131c:	97 01       	movw	r18, r14
    131e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1322:	9b 01       	movw	r18, r22
    1324:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1326:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    132a:	7b 01       	movw	r14, r22
    132c:	8c 01       	movw	r16, r24
    132e:	20 91 92 06 	lds	r18, 0x0692
    1332:	30 91 93 06 	lds	r19, 0x0693
    1336:	40 91 94 06 	lds	r20, 0x0694
    133a:	50 91 95 06 	lds	r21, 0x0695
    133e:	50 58       	subi	r21, 0x80	; 128
    1340:	ca 01       	movw	r24, r20
    1342:	b9 01       	movw	r22, r18
    1344:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e7       	ldi	r20, 0x70	; 112
    134e:	52 e4       	ldi	r21, 0x42	; 66
    1350:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e7       	ldi	r20, 0x70	; 112
    135a:	52 ec       	ldi	r21, 0xC2	; 194
    135c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1360:	2d a5       	ldd	r18, Y+45	; 0x2d
    1362:	3e a5       	ldd	r19, Y+46	; 0x2e
    1364:	4f a5       	ldd	r20, Y+47	; 0x2f
    1366:	58 a9       	ldd	r21, Y+48	; 0x30
    1368:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	c8 01       	movw	r24, r16
    1372:	b7 01       	movw	r22, r14
    1374:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    1378:	0e 94 29 20 	call	0x4052	; 0x4052 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    137c:	a6 01       	movw	r20, r12
    137e:	95 01       	movw	r18, r10
    1380:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    1384:	7b 01       	movw	r14, r22
    1386:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1388:	a3 01       	movw	r20, r6
    138a:	92 01       	movw	r18, r4
    138c:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__cmpsf2>
    1390:	88 23       	and	r24, r24
    1392:	2c f4       	brge	.+10     	; 0x139e <planner_forward_pass_kernel+0xe8>
        current->entry_factor = max_entry_factor;
    1394:	f4 01       	movw	r30, r8
    1396:	e1 aa       	std	Z+49, r14	; 0x31
    1398:	f2 aa       	std	Z+50, r15	; 0x32
    139a:	03 ab       	std	Z+51, r16	; 0x33
    139c:	14 ab       	std	Z+52, r17	; 0x34
      }
    }
  }
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	7f 90       	pop	r7
    13b8:	6f 90       	pop	r6
    13ba:	5f 90       	pop	r5
    13bc:	4f 90       	pop	r4
    13be:	08 95       	ret

000013c0 <planner_forward_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    13cc:	80 91 04 05 	lds	r24, 0x0504
    13d0:	90 91 05 05 	lds	r25, 0x0505
    13d4:	48 2f       	mov	r20, r24
    13d6:	c0 e0       	ldi	r28, 0x00	; 0
    13d8:	d0 e0       	ldi	r29, 0x00	; 0
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <planner_forward_pass+0x48>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    13e0:	89 e4       	ldi	r24, 0x49	; 73
    13e2:	48 02       	muls	r20, r24
    13e4:	80 01       	movw	r16, r0
    13e6:	11 24       	eor	r1, r1
    13e8:	08 5d       	subi	r16, 0xD8	; 216
    13ea:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    13ec:	c9 01       	movw	r24, r18
    13ee:	be 01       	movw	r22, r28
    13f0:	a8 01       	movw	r20, r16
    13f2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    13f6:	c7 01       	movw	r24, r14
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	6a e0       	ldi	r22, 0x0A	; 10
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	0e 94 97 20 	call	0x412e	; 0x412e <__divmodhi4>
    1402:	48 2f       	mov	r20, r24
    1404:	9e 01       	movw	r18, r28
    1406:	e8 01       	movw	r28, r16
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1408:	e4 2e       	mov	r14, r20
    140a:	ff 24       	eor	r15, r15
    140c:	e7 fc       	sbrc	r14, 7
    140e:	f0 94       	com	r15
    1410:	80 91 02 05 	lds	r24, 0x0502
    1414:	90 91 03 05 	lds	r25, 0x0503
    1418:	e8 16       	cp	r14, r24
    141a:	f9 06       	cpc	r15, r25
    141c:	09 f7       	brne	.-62     	; 0x13e0 <planner_forward_pass+0x20>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    141e:	c9 01       	movw	r24, r18
    1420:	be 01       	movw	r22, r28
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <planner_forward_pass_kernel>
}
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	08 95       	ret

00001438 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1438:	2f 92       	push	r2
    143a:	3f 92       	push	r3
    143c:	4f 92       	push	r4
    143e:	5f 92       	push	r5
    1440:	6f 92       	push	r6
    1442:	7f 92       	push	r7
    1444:	8f 92       	push	r8
    1446:	9f 92       	push	r9
    1448:	af 92       	push	r10
    144a:	bf 92       	push	r11
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	3b 01       	movw	r6, r22
    145a:	4c 01       	movw	r8, r24
    145c:	19 01       	movw	r2, r18
    145e:	2a 01       	movw	r4, r20
	st_synchronize();
    1460:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1464:	c4 01       	movw	r24, r8
    1466:	b3 01       	movw	r22, r6
    1468:	20 91 74 06 	lds	r18, 0x0674
    146c:	30 91 75 06 	lds	r19, 0x0675
    1470:	40 91 76 06 	lds	r20, 0x0676
    1474:	50 91 77 06 	lds	r21, 0x0677
    1478:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    147c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    1480:	26 e0       	ldi	r18, 0x06	; 6
    1482:	82 2e       	mov	r8, r18
    1484:	25 e0       	ldi	r18, 0x05	; 5
    1486:	92 2e       	mov	r9, r18
    1488:	60 93 06 05 	sts	0x0506, r22
    148c:	70 93 07 05 	sts	0x0507, r23
    1490:	80 93 08 05 	sts	0x0508, r24
    1494:	90 93 09 05 	sts	0x0509, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1498:	c2 01       	movw	r24, r4
    149a:	b1 01       	movw	r22, r2
    149c:	20 91 78 06 	lds	r18, 0x0678
    14a0:	30 91 79 06 	lds	r19, 0x0679
    14a4:	40 91 7a 06 	lds	r20, 0x067A
    14a8:	50 91 7b 06 	lds	r21, 0x067B
    14ac:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    14b0:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    14b4:	f4 01       	movw	r30, r8
    14b6:	34 96       	adiw	r30, 0x04	; 4
    14b8:	60 93 0a 05 	sts	0x050A, r22
    14bc:	71 83       	std	Z+1, r23	; 0x01
    14be:	82 83       	std	Z+2, r24	; 0x02
    14c0:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    14c2:	c8 01       	movw	r24, r16
    14c4:	b7 01       	movw	r22, r14
    14c6:	20 91 7c 06 	lds	r18, 0x067C
    14ca:	30 91 7d 06 	lds	r19, 0x067D
    14ce:	40 91 7e 06 	lds	r20, 0x067E
    14d2:	50 91 7f 06 	lds	r21, 0x067F
    14d6:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    14da:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    14de:	f4 01       	movw	r30, r8
    14e0:	38 96       	adiw	r30, 0x08	; 8
    14e2:	60 93 0e 05 	sts	0x050E, r22
    14e6:	71 83       	std	Z+1, r23	; 0x01
    14e8:	82 83       	std	Z+2, r24	; 0x02
    14ea:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    14ec:	c6 01       	movw	r24, r12
    14ee:	b5 01       	movw	r22, r10
    14f0:	20 91 80 06 	lds	r18, 0x0680
    14f4:	30 91 81 06 	lds	r19, 0x0681
    14f8:	40 91 82 06 	lds	r20, 0x0682
    14fc:	50 91 83 06 	lds	r21, 0x0683
    1500:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1504:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    1508:	2c e0       	ldi	r18, 0x0C	; 12
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	82 0e       	add	r8, r18
    150e:	93 1e       	adc	r9, r19
    1510:	60 93 12 05 	sts	0x0512, r22
    1514:	f4 01       	movw	r30, r8
    1516:	71 83       	std	Z+1, r23	; 0x01
    1518:	82 83       	std	Z+2, r24	; 0x02
    151a:	93 83       	std	Z+3, r25	; 0x03
}
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	9f 90       	pop	r9
    152e:	8f 90       	pop	r8
    1530:	7f 90       	pop	r7
    1532:	6f 90       	pop	r6
    1534:	5f 90       	pop	r5
    1536:	4f 90       	pop	r4
    1538:	3f 90       	pop	r3
    153a:	2f 90       	pop	r2
    153c:	08 95       	ret

0000153e <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	80 91 16 05 	lds	r24, 0x0516
    154a:	81 11       	cpse	r24, r1
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	20 97       	sbiw	r28, 0x00	; 0
    1552:	09 f0       	breq	.+2      	; 0x1556 <plan_set_acceleration_manager_enabled+0x18>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	98 17       	cp	r25, r24
    1558:	49 f0       	breq	.+18     	; 0x156c <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    155a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    155e:	10 92 16 05 	sts	0x0516, r1
    1562:	cd 2b       	or	r28, r29
    1564:	19 f0       	breq	.+6      	; 0x156c <plan_set_acceleration_manager_enabled+0x2e>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	80 93 16 05 	sts	0x0516, r24
  }
}
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1572:	10 92 03 05 	sts	0x0503, r1
    1576:	10 92 02 05 	sts	0x0502, r1
  block_buffer_tail = 0;
    157a:	10 92 05 05 	sts	0x0505, r1
    157e:	10 92 04 05 	sts	0x0504, r1
  plan_set_acceleration_manager_enabled(TRUE);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 9f 0a 	call	0x153e	; 0x153e <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    158a:	80 e1       	ldi	r24, 0x10	; 16
    158c:	e6 e0       	ldi	r30, 0x06	; 6
    158e:	f5 e0       	ldi	r31, 0x05	; 5
    1590:	df 01       	movw	r26, r30
    1592:	1d 92       	st	X+, r1
    1594:	8a 95       	dec	r24
    1596:	e9 f7       	brne	.-6      	; 0x1592 <plan_init+0x20>
}
    1598:	08 95       	ret

0000159a <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    159a:	2f 92       	push	r2
    159c:	3f 92       	push	r3
    159e:	4f 92       	push	r4
    15a0:	5f 92       	push	r5
    15a2:	6f 92       	push	r6
    15a4:	7f 92       	push	r7
    15a6:	8f 92       	push	r8
    15a8:	9f 92       	push	r9
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <planner_reverse_pass_kernel+0x26>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <planner_reverse_pass_kernel+0x28>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	8c 01       	movw	r16, r24
    15c8:	7e 83       	std	Y+6, r23	; 0x06
    15ca:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    15cc:	67 2b       	or	r22, r23
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <planner_reverse_pass_kernel+0x38>
    15d0:	07 c1       	rjmp	.+526    	; 0x17e0 <planner_reverse_pass_kernel+0x246>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    15d2:	41 15       	cp	r20, r1
    15d4:	51 05       	cpc	r21, r1
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <planner_reverse_pass_kernel+0x56>
    exit_factor = next->entry_factor;
    15d8:	da 01       	movw	r26, r20
    15da:	d1 96       	adiw	r26, 0x31	; 49
    15dc:	8d 91       	ld	r24, X+
    15de:	9d 91       	ld	r25, X+
    15e0:	0d 90       	ld	r0, X+
    15e2:	bc 91       	ld	r27, X
    15e4:	a0 2d       	mov	r26, r0
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	ab 83       	std	Y+3, r26	; 0x03
    15ec:	bc 83       	std	Y+4, r27	; 0x04
    15ee:	08 c0       	rjmp	.+16     	; 0x1600 <planner_reverse_pass_kernel+0x66>
  } else {
    exit_factor = factor_for_safe_speed(current);
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	0e 94 0f 09 	call	0x121e	; 0x121e <factor_for_safe_speed>
    15f8:	69 83       	std	Y+1, r22	; 0x01
    15fa:	7a 83       	std	Y+2, r23	; 0x02
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1600:	01 15       	cp	r16, r1
    1602:	11 05       	cpc	r17, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <planner_reverse_pass_kernel+0x6e>
    1606:	e0 c0       	rjmp	.+448    	; 0x17c8 <planner_reverse_pass_kernel+0x22e>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1608:	f8 01       	movw	r30, r16
    160a:	61 8d       	ldd	r22, Z+25	; 0x19
    160c:	72 8d       	ldd	r23, Z+26	; 0x1a
    160e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1610:	94 8d       	ldd	r25, Z+28	; 0x1c
    1612:	ad 81       	ldd	r26, Y+5	; 0x05
    1614:	be 81       	ldd	r27, Y+6	; 0x06
    1616:	59 96       	adiw	r26, 0x19	; 25
    1618:	2d 91       	ld	r18, X+
    161a:	3d 91       	ld	r19, X+
    161c:	4d 91       	ld	r20, X+
    161e:	5c 91       	ld	r21, X
    1620:	5c 97       	sbiw	r26, 0x1c	; 28
    1622:	0e 94 cd 1c 	call	0x399a	; 0x399a <__subsf3>
    1626:	9b 01       	movw	r18, r22
    1628:	ac 01       	movw	r20, r24
    162a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    162e:	1b 01       	movw	r2, r22
    1630:	2c 01       	movw	r4, r24
    1632:	f8 01       	movw	r30, r16
    1634:	65 8d       	ldd	r22, Z+29	; 0x1d
    1636:	76 8d       	ldd	r23, Z+30	; 0x1e
    1638:	87 8d       	ldd	r24, Z+31	; 0x1f
    163a:	90 a1       	ldd	r25, Z+32	; 0x20
    163c:	ad 81       	ldd	r26, Y+5	; 0x05
    163e:	be 81       	ldd	r27, Y+6	; 0x06
    1640:	5d 96       	adiw	r26, 0x1d	; 29
    1642:	2d 91       	ld	r18, X+
    1644:	3d 91       	ld	r19, X+
    1646:	4d 91       	ld	r20, X+
    1648:	5c 91       	ld	r21, X
    164a:	90 97       	sbiw	r26, 0x20	; 32
    164c:	0e 94 cd 1c 	call	0x399a	; 0x399a <__subsf3>
    1650:	9b 01       	movw	r18, r22
    1652:	ac 01       	movw	r20, r24
    1654:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1658:	3b 01       	movw	r6, r22
    165a:	4c 01       	movw	r8, r24
    165c:	f8 01       	movw	r30, r16
    165e:	61 a1       	ldd	r22, Z+33	; 0x21
    1660:	72 a1       	ldd	r23, Z+34	; 0x22
    1662:	83 a1       	ldd	r24, Z+35	; 0x23
    1664:	94 a1       	ldd	r25, Z+36	; 0x24
    1666:	ad 81       	ldd	r26, Y+5	; 0x05
    1668:	be 81       	ldd	r27, Y+6	; 0x06
    166a:	91 96       	adiw	r26, 0x21	; 33
    166c:	2d 91       	ld	r18, X+
    166e:	3d 91       	ld	r19, X+
    1670:	4d 91       	ld	r20, X+
    1672:	5c 91       	ld	r21, X
    1674:	94 97       	sbiw	r26, 0x24	; 36
    1676:	0e 94 cd 1c 	call	0x399a	; 0x399a <__subsf3>
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1682:	5b 01       	movw	r10, r22
    1684:	6c 01       	movw	r12, r24
    1686:	f8 01       	movw	r30, r16
    1688:	65 a1       	ldd	r22, Z+37	; 0x25
    168a:	76 a1       	ldd	r23, Z+38	; 0x26
    168c:	87 a1       	ldd	r24, Z+39	; 0x27
    168e:	90 a5       	ldd	r25, Z+40	; 0x28
    1690:	ad 81       	ldd	r26, Y+5	; 0x05
    1692:	be 81       	ldd	r27, Y+6	; 0x06
    1694:	95 96       	adiw	r26, 0x25	; 37
    1696:	2d 91       	ld	r18, X+
    1698:	3d 91       	ld	r19, X+
    169a:	4d 91       	ld	r20, X+
    169c:	5c 91       	ld	r21, X
    169e:	98 97       	sbiw	r26, 0x28	; 40
    16a0:	0e 94 cd 1c 	call	0x399a	; 0x399a <__subsf3>
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    16ac:	7b 01       	movw	r14, r22
    16ae:	8c 01       	movw	r16, r24
    16b0:	c2 01       	movw	r24, r4
    16b2:	b1 01       	movw	r22, r2
    16b4:	a4 01       	movw	r20, r8
    16b6:	93 01       	movw	r18, r6
    16b8:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    16bc:	a6 01       	movw	r20, r12
    16be:	95 01       	movw	r18, r10
    16c0:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    16c4:	a8 01       	movw	r20, r16
    16c6:	97 01       	movw	r18, r14
    16c8:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    16cc:	0e 94 29 20 	call	0x4052	; 0x4052 <sqrt>
    16d0:	5b 01       	movw	r10, r22
    16d2:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    16d4:	e0 90 96 06 	lds	r14, 0x0696
    16d8:	f0 90 97 06 	lds	r15, 0x0697
    16dc:	00 91 98 06 	lds	r16, 0x0698
    16e0:	10 91 99 06 	lds	r17, 0x0699
    16e4:	a8 01       	movw	r20, r16
    16e6:	97 01       	movw	r18, r14
    16e8:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__gesf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	5c f0       	brlt	.+22     	; 0x1706 <planner_reverse_pass_kernel+0x16c>
    16f0:	0f 2e       	mov	r0, r31
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	6f 2e       	mov	r6, r31
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	7f 2e       	mov	r7, r31
    16fa:	f0 e8       	ldi	r31, 0x80	; 128
    16fc:	8f 2e       	mov	r8, r31
    16fe:	ff e3       	ldi	r31, 0x3F	; 63
    1700:	9f 2e       	mov	r9, r31
    1702:	f0 2d       	mov	r31, r0
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <planner_reverse_pass_kernel+0x17c>
      entry_factor = (settings.max_jerk/jerk);
    1706:	c8 01       	movw	r24, r16
    1708:	b7 01       	movw	r22, r14
    170a:	a6 01       	movw	r20, r12
    170c:	95 01       	movw	r18, r10
    170e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    1712:	3b 01       	movw	r6, r22
    1714:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1716:	c4 01       	movw	r24, r8
    1718:	b3 01       	movw	r22, r6
    171a:	29 81       	ldd	r18, Y+1	; 0x01
    171c:	3a 81       	ldd	r19, Y+2	; 0x02
    171e:	4b 81       	ldd	r20, Y+3	; 0x03
    1720:	5c 81       	ldd	r21, Y+4	; 0x04
    1722:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__gesf2>
    1726:	18 16       	cp	r1, r24
    1728:	0c f0       	brlt	.+2      	; 0x172c <planner_reverse_pass_kernel+0x192>
    172a:	54 c0       	rjmp	.+168    	; 0x17d4 <planner_reverse_pass_kernel+0x23a>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    172c:	ed 81       	ldd	r30, Y+5	; 0x05
    172e:	fe 81       	ldd	r31, Y+6	; 0x06
    1730:	a1 a4       	ldd	r10, Z+41	; 0x29
    1732:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1734:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1736:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1738:	c6 01       	movw	r24, r12
    173a:	b5 01       	movw	r22, r10
    173c:	29 81       	ldd	r18, Y+1	; 0x01
    173e:	3a 81       	ldd	r19, Y+2	; 0x02
    1740:	4b 81       	ldd	r20, Y+3	; 0x03
    1742:	5c 81       	ldd	r21, Y+4	; 0x04
    1744:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1748:	9b 01       	movw	r18, r22
    174a:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    174c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1750:	7b 01       	movw	r14, r22
    1752:	8c 01       	movw	r16, r24
    1754:	20 91 92 06 	lds	r18, 0x0692
    1758:	30 91 93 06 	lds	r19, 0x0693
    175c:	40 91 94 06 	lds	r20, 0x0694
    1760:	50 91 95 06 	lds	r21, 0x0695
    1764:	50 58       	subi	r21, 0x80	; 128
    1766:	ca 01       	movw	r24, r20
    1768:	b9 01       	movw	r22, r18
    176a:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e7       	ldi	r20, 0x70	; 112
    1774:	52 e4       	ldi	r21, 0x42	; 66
    1776:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e7       	ldi	r20, 0x70	; 112
    1780:	52 ec       	ldi	r21, 0xC2	; 194
    1782:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1786:	ad 81       	ldd	r26, Y+5	; 0x05
    1788:	be 81       	ldd	r27, Y+6	; 0x06
    178a:	9d 96       	adiw	r26, 0x2d	; 45
    178c:	2d 91       	ld	r18, X+
    178e:	3d 91       	ld	r19, X+
    1790:	4d 91       	ld	r20, X+
    1792:	5c 91       	ld	r21, X
    1794:	d0 97       	sbiw	r26, 0x30	; 48
    1796:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    179a:	9b 01       	movw	r18, r22
    179c:	ac 01       	movw	r20, r24
    179e:	c8 01       	movw	r24, r16
    17a0:	b7 01       	movw	r22, r14
    17a2:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    17a6:	0e 94 29 20 	call	0x4052	; 0x4052 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    17aa:	a6 01       	movw	r20, r12
    17ac:	95 01       	movw	r18, r10
    17ae:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    17b2:	7b 01       	movw	r14, r22
    17b4:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    17b6:	a4 01       	movw	r20, r8
    17b8:	93 01       	movw	r18, r6
    17ba:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__cmpsf2>
    17be:	88 23       	and	r24, r24
    17c0:	4c f4       	brge	.+18     	; 0x17d4 <planner_reverse_pass_kernel+0x23a>
    17c2:	37 01       	movw	r6, r14
    17c4:	48 01       	movw	r8, r16
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <planner_reverse_pass_kernel+0x23a>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	0e 94 0f 09 	call	0x121e	; 0x121e <factor_for_safe_speed>
    17d0:	3b 01       	movw	r6, r22
    17d2:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    17d4:	ed 81       	ldd	r30, Y+5	; 0x05
    17d6:	fe 81       	ldd	r31, Y+6	; 0x06
    17d8:	61 aa       	std	Z+49, r6	; 0x31
    17da:	72 aa       	std	Z+50, r7	; 0x32
    17dc:	83 aa       	std	Z+51, r8	; 0x33
    17de:	94 aa       	std	Z+52, r9	; 0x34
}
    17e0:	26 96       	adiw	r28, 0x06	; 6
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	bf 90       	pop	r11
    17fe:	af 90       	pop	r10
    1800:	9f 90       	pop	r9
    1802:	8f 90       	pop	r8
    1804:	7f 90       	pop	r7
    1806:	6f 90       	pop	r6
    1808:	5f 90       	pop	r5
    180a:	4f 90       	pop	r4
    180c:	3f 90       	pop	r3
    180e:	2f 90       	pop	r2
    1810:	08 95       	ret

00001812 <planner_reverse_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    181c:	80 91 02 05 	lds	r24, 0x0502
    1820:	90 91 03 05 	lds	r25, 0x0503
    1824:	f8 2e       	mov	r15, r24
    1826:	c0 e0       	ldi	r28, 0x00	; 0
    1828:	d0 e0       	ldi	r29, 0x00	; 0
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	12 c0       	rjmp	.+36     	; 0x1854 <planner_reverse_pass+0x42>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    1830:	fa 94       	dec	r15
    if(block_index < 0) {
    1832:	f7 fe       	sbrs	r15, 7
    1834:	02 c0       	rjmp	.+4      	; 0x183a <planner_reverse_pass+0x28>
    1836:	39 e0       	ldi	r19, 0x09	; 9
    1838:	f3 2e       	mov	r15, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    183a:	8f 2d       	mov	r24, r15
    183c:	99 e4       	ldi	r25, 0x49	; 73
    183e:	89 02       	muls	r24, r25
    1840:	80 01       	movw	r16, r0
    1842:	11 24       	eor	r1, r1
    1844:	08 5d       	subi	r16, 0xD8	; 216
    1846:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1848:	c8 01       	movw	r24, r16
    184a:	be 01       	movw	r22, r28
    184c:	0e 94 cd 0a 	call	0x159a	; 0x159a <planner_reverse_pass_kernel>
    1850:	ae 01       	movw	r20, r28
    1852:	e8 01       	movw	r28, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1854:	20 91 04 05 	lds	r18, 0x0504
    1858:	30 91 05 05 	lds	r19, 0x0505
    185c:	8f 2d       	mov	r24, r15
    185e:	99 27       	eor	r25, r25
    1860:	87 fd       	sbrc	r24, 7
    1862:	90 95       	com	r25
    1864:	82 17       	cp	r24, r18
    1866:	93 07       	cpc	r25, r19
    1868:	19 f7       	brne	.-58     	; 0x1830 <planner_reverse_pass+0x1e>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	be 01       	movw	r22, r28
    1870:	0e 94 cd 0a 	call	0x159a	; 0x159a <planner_reverse_pass_kernel>
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	ff 90       	pop	r15
    187e:	08 95       	ret

00001880 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1880:	2f 92       	push	r2
    1882:	3f 92       	push	r3
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	62 97       	sbiw	r28, 0x12	; 18
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	9a 8b       	std	Y+18, r25	; 0x12
    18b6:	89 8b       	std	Y+17, r24	; 0x11
    18b8:	6a 01       	movw	r12, r20
    18ba:	7b 01       	movw	r14, r22
    18bc:	18 01       	movw	r2, r16
    18be:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    18c0:	fc 01       	movw	r30, r24
    18c2:	65 89       	ldd	r22, Z+21	; 0x15
    18c4:	76 89       	ldd	r23, Z+22	; 0x16
    18c6:	87 89       	ldd	r24, Z+23	; 0x17
    18c8:	90 8d       	ldd	r25, Z+24	; 0x18
    18ca:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__floatunsisf>
    18ce:	3b 01       	movw	r6, r22
    18d0:	4c 01       	movw	r8, r24
    18d2:	a7 01       	movw	r20, r14
    18d4:	96 01       	movw	r18, r12
    18d6:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    18da:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ceil>
    18de:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fixunssfsi>
    18e2:	7b 01       	movw	r14, r22
    18e4:	8c 01       	movw	r16, r24
    18e6:	e9 89       	ldd	r30, Y+17	; 0x11
    18e8:	fa 89       	ldd	r31, Y+18	; 0x12
    18ea:	65 ab       	std	Z+53, r22	; 0x35
    18ec:	76 ab       	std	Z+54, r23	; 0x36
    18ee:	87 ab       	std	Z+55, r24	; 0x37
    18f0:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    18f2:	c4 01       	movw	r24, r8
    18f4:	b3 01       	movw	r22, r6
    18f6:	a2 01       	movw	r20, r4
    18f8:	91 01       	movw	r18, r2
    18fa:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    18fe:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ceil>
    1902:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fixunssfsi>
    1906:	1b 01       	movw	r2, r22
    1908:	2c 01       	movw	r4, r24
    190a:	e9 89       	ldd	r30, Y+17	; 0x11
    190c:	fa 89       	ldd	r31, Y+18	; 0x12
    190e:	61 af       	std	Z+57, r22	; 0x39
    1910:	72 af       	std	Z+58, r23	; 0x3a
    1912:	83 af       	std	Z+59, r24	; 0x3b
    1914:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1916:	fd 96       	adiw	r30, 0x3d	; 61
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	fd 97       	sbiw	r30, 0x3d	; 61
    1922:	fa 8b       	std	Y+18, r31	; 0x12
    1924:	e9 8b       	std	Y+17, r30	; 0x11
    1926:	28 e2       	ldi	r18, 0x28	; 40
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__mulsi3>
    1932:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e7       	ldi	r20, 0x70	; 112
    193c:	52 e4       	ldi	r21, 0x42	; 66
    193e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1942:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
    1946:	5b 01       	movw	r10, r22
    1948:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    194a:	c8 01       	movw	r24, r16
    194c:	b7 01       	movw	r22, r14
    194e:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__floatunsisf>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
    1956:	c6 01       	movw	r24, r12
    1958:	b5 01       	movw	r22, r10
    195a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    195e:	6d 83       	std	Y+5, r22	; 0x05
    1960:	7e 83       	std	Y+6, r23	; 0x06
    1962:	8f 83       	std	Y+7, r24	; 0x07
    1964:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1966:	c4 01       	movw	r24, r8
    1968:	b3 01       	movw	r22, r6
    196a:	a4 01       	movw	r20, r8
    196c:	93 01       	movw	r18, r6
    196e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1972:	3b 01       	movw	r6, r22
    1974:	4c 01       	movw	r8, r24
    1976:	c8 01       	movw	r24, r16
    1978:	b7 01       	movw	r22, r14
    197a:	a8 01       	movw	r20, r16
    197c:	97 01       	movw	r18, r14
    197e:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1982:	69 87       	std	Y+9, r22	; 0x09
    1984:	7a 87       	std	Y+10, r23	; 0x0a
    1986:	8b 87       	std	Y+11, r24	; 0x0b
    1988:	9c 87       	std	Y+12, r25	; 0x0c
    198a:	6d 81       	ldd	r22, Y+5	; 0x05
    198c:	7e 81       	ldd	r23, Y+6	; 0x06
    198e:	8f 81       	ldd	r24, Y+7	; 0x07
    1990:	98 85       	ldd	r25, Y+8	; 0x08
    1992:	9b 01       	movw	r18, r22
    1994:	ac 01       	movw	r20, r24
    1996:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    199a:	6d 87       	std	Y+13, r22	; 0x0d
    199c:	7e 87       	std	Y+14, r23	; 0x0e
    199e:	8f 87       	std	Y+15, r24	; 0x0f
    19a0:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    19a2:	c4 01       	movw	r24, r8
    19a4:	b3 01       	movw	r22, r6
    19a6:	29 85       	ldd	r18, Y+9	; 0x09
    19a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    19aa:	4b 85       	ldd	r20, Y+11	; 0x0b
    19ac:	5c 85       	ldd	r21, Y+12	; 0x0c
    19ae:	0e 94 cd 1c 	call	0x399a	; 0x399a <__subsf3>
    19b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    19b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    19b6:	4f 85       	ldd	r20, Y+15	; 0x0f
    19b8:	58 89       	ldd	r21, Y+16	; 0x10
    19ba:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    19be:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ceil>
    19c2:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
    19c6:	69 83       	std	Y+1, r22	; 0x01
    19c8:	7a 83       	std	Y+2, r23	; 0x02
    19ca:	8b 83       	std	Y+3, r24	; 0x03
    19cc:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    19ce:	c2 01       	movw	r24, r4
    19d0:	b1 01       	movw	r22, r2
    19d2:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__floatunsisf>
    19d6:	9b 01       	movw	r18, r22
    19d8:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    19da:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    19de:	1b 01       	movw	r2, r22
    19e0:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    19e2:	a4 01       	movw	r20, r8
    19e4:	93 01       	movw	r18, r6
    19e6:	0e 94 cd 1c 	call	0x399a	; 0x399a <__subsf3>
    19ea:	7b 01       	movw	r14, r22
    19ec:	8c 01       	movw	r16, r24
    19ee:	d0 94       	com	r13
    19f0:	c0 94       	com	r12
    19f2:	b0 94       	com	r11
    19f4:	a0 94       	com	r10
    19f6:	a1 1c       	adc	r10, r1
    19f8:	b1 1c       	adc	r11, r1
    19fa:	c1 1c       	adc	r12, r1
    19fc:	d1 1c       	adc	r13, r1
    19fe:	c6 01       	movw	r24, r12
    1a00:	b5 01       	movw	r22, r10
    1a02:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    1a0e:	9b 01       	movw	r18, r22
    1a10:	ac 01       	movw	r20, r24
    1a12:	c8 01       	movw	r24, r16
    1a14:	b7 01       	movw	r22, r14
    1a16:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    1a1a:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1a1e:	e9 89       	ldd	r30, Y+17	; 0x11
    1a20:	fa 89       	ldd	r31, Y+18	; 0x12
    1a22:	a1 88       	ldd	r10, Z+17	; 0x11
    1a24:	b2 88       	ldd	r11, Z+18	; 0x12
    1a26:	c3 88       	ldd	r12, Z+19	; 0x13
    1a28:	d4 88       	ldd	r13, Z+20	; 0x14
    1a2a:	86 01       	movw	r16, r12
    1a2c:	75 01       	movw	r14, r10
    1a2e:	29 81       	ldd	r18, Y+1	; 0x01
    1a30:	3a 81       	ldd	r19, Y+2	; 0x02
    1a32:	4b 81       	ldd	r20, Y+3	; 0x03
    1a34:	5c 81       	ldd	r21, Y+4	; 0x04
    1a36:	e2 1a       	sub	r14, r18
    1a38:	f3 0a       	sbc	r15, r19
    1a3a:	04 0b       	sbc	r16, r20
    1a3c:	15 0b       	sbc	r17, r21
    1a3e:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
    1a42:	a8 01       	movw	r20, r16
    1a44:	97 01       	movw	r18, r14
    1a46:	26 1b       	sub	r18, r22
    1a48:	37 0b       	sbc	r19, r23
    1a4a:	48 0b       	sbc	r20, r24
    1a4c:	59 0b       	sbc	r21, r25
    1a4e:	da 01       	movw	r26, r20
    1a50:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1a52:	57 ff       	sbrs	r21, 7
    1a54:	34 c0       	rjmp	.+104    	; 0x1abe <calculate_trapezoid_for_block+0x23e>
    accelerate_steps = ceil(
    1a56:	c6 01       	movw	r24, r12
    1a58:	b5 01       	movw	r22, r10
    1a5a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    1a5e:	9b 01       	movw	r18, r22
    1a60:	ac 01       	movw	r20, r24
    1a62:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a64:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a68:	98 89       	ldd	r25, Y+16	; 0x10
    1a6a:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1a6e:	29 85       	ldd	r18, Y+9	; 0x09
    1a70:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a72:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a74:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a76:	0e 94 cd 1c 	call	0x399a	; 0x399a <__subsf3>
    1a7a:	a2 01       	movw	r20, r4
    1a7c:	91 01       	movw	r18, r2
    1a7e:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    1a82:	7b 01       	movw	r14, r22
    1a84:	8c 01       	movw	r16, r24
    1a86:	6d 81       	ldd	r22, Y+5	; 0x05
    1a88:	7e 81       	ldd	r23, Y+6	; 0x06
    1a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8c:	98 85       	ldd	r25, Y+8	; 0x08
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	50 e4       	ldi	r21, 0x40	; 64
    1a96:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1a9a:	9b 01       	movw	r18, r22
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	c8 01       	movw	r24, r16
    1aa0:	b7 01       	movw	r22, r14
    1aa2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    1aa6:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ceil>
    1aaa:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
    1aae:	69 83       	std	Y+1, r22	; 0x01
    1ab0:	7a 83       	std	Y+2, r23	; 0x02
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e0       	ldi	r26, 0x00	; 0
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1abe:	49 89       	ldd	r20, Y+17	; 0x11
    1ac0:	5a 89       	ldd	r21, Y+18	; 0x12
    1ac2:	4f 5b       	subi	r20, 0xBF	; 191
    1ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac6:	fa 01       	movw	r30, r20
    1ac8:	29 81       	ldd	r18, Y+1	; 0x01
    1aca:	3a 81       	ldd	r19, Y+2	; 0x02
    1acc:	4b 81       	ldd	r20, Y+3	; 0x03
    1ace:	5c 81       	ldd	r21, Y+4	; 0x04
    1ad0:	21 93       	st	Z+, r18
    1ad2:	31 93       	st	Z+, r19
    1ad4:	41 93       	st	Z+, r20
    1ad6:	51 93       	st	Z+, r21
    1ad8:	fa 8b       	std	Y+18, r31	; 0x12
    1ada:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	a4 1f       	adc	r26, r20
    1ae2:	b5 1f       	adc	r27, r21
    1ae4:	80 83       	st	Z, r24
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	a2 83       	std	Z+2, r26	; 0x02
    1aea:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1aec:	62 96       	adiw	r28, 0x12	; 18
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	df 90       	pop	r13
    1b06:	cf 90       	pop	r12
    1b08:	bf 90       	pop	r11
    1b0a:	af 90       	pop	r10
    1b0c:	9f 90       	pop	r9
    1b0e:	8f 90       	pop	r8
    1b10:	7f 90       	pop	r7
    1b12:	6f 90       	pop	r6
    1b14:	5f 90       	pop	r5
    1b16:	4f 90       	pop	r4
    1b18:	3f 90       	pop	r3
    1b1a:	2f 90       	pop	r2
    1b1c:	08 95       	ret

00001b1e <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1b2e:	80 91 04 05 	lds	r24, 0x0504
    1b32:	90 91 05 05 	lds	r25, 0x0505
    1b36:	28 2f       	mov	r18, r24
    1b38:	c0 e0       	ldi	r28, 0x00	; 0
    1b3a:	d0 e0       	ldi	r29, 0x00	; 0
    1b3c:	1e c0       	rjmp	.+60     	; 0x1b7a <planner_recalculate_trapezoids+0x5c>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    1b3e:	89 e4       	ldi	r24, 0x49	; 73
    1b40:	28 02       	muls	r18, r24
    1b42:	70 01       	movw	r14, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	e8 e2       	ldi	r30, 0x28	; 40
    1b48:	f2 e0       	ldi	r31, 0x02	; 2
    1b4a:	ee 0e       	add	r14, r30
    1b4c:	ff 1e       	adc	r15, r31
    if (current) {
    1b4e:	20 97       	sbiw	r28, 0x00	; 0
    1b50:	61 f0       	breq	.+24     	; 0x1b6a <planner_recalculate_trapezoids+0x4c>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1b52:	49 a9       	ldd	r20, Y+49	; 0x31
    1b54:	5a a9       	ldd	r21, Y+50	; 0x32
    1b56:	6b a9       	ldd	r22, Y+51	; 0x33
    1b58:	7c a9       	ldd	r23, Y+52	; 0x34
    1b5a:	f7 01       	movw	r30, r14
    1b5c:	01 a9       	ldd	r16, Z+49	; 0x31
    1b5e:	12 a9       	ldd	r17, Z+50	; 0x32
    1b60:	23 a9       	ldd	r18, Z+51	; 0x33
    1b62:	34 a9       	ldd	r19, Z+52	; 0x34
    1b64:	ce 01       	movw	r24, r28
    1b66:	0e 94 40 0c 	call	0x1880	; 0x1880 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1b6a:	c6 01       	movw	r24, r12
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	6a e0       	ldi	r22, 0x0A	; 10
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	0e 94 97 20 	call	0x412e	; 0x412e <__divmodhi4>
    1b76:	28 2f       	mov	r18, r24
    1b78:	e7 01       	movw	r28, r14
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1b7a:	c2 2e       	mov	r12, r18
    1b7c:	dd 24       	eor	r13, r13
    1b7e:	c7 fc       	sbrc	r12, 7
    1b80:	d0 94       	com	r13
    1b82:	80 91 02 05 	lds	r24, 0x0502
    1b86:	90 91 03 05 	lds	r25, 0x0503
    1b8a:	c8 16       	cp	r12, r24
    1b8c:	d9 06       	cpc	r13, r25
    1b8e:	b9 f6       	brne	.-82     	; 0x1b3e <planner_recalculate_trapezoids+0x20>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1b90:	ce 01       	movw	r24, r28
    1b92:	0e 94 0f 09 	call	0x121e	; 0x121e <factor_for_safe_speed>
    1b96:	8b 01       	movw	r16, r22
    1b98:	9c 01       	movw	r18, r24
    1b9a:	49 a9       	ldd	r20, Y+49	; 0x31
    1b9c:	5a a9       	ldd	r21, Y+50	; 0x32
    1b9e:	6b a9       	ldd	r22, Y+51	; 0x33
    1ba0:	7c a9       	ldd	r23, Y+52	; 0x34
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	0e 94 40 0c 	call	0x1880	; 0x1880 <calculate_trapezoid_for_block>
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	08 95       	ret

00001bba <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    1bba:	0e 94 09 0c 	call	0x1812	; 0x1812 <planner_reverse_pass>
  planner_forward_pass();
    1bbe:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <planner_forward_pass>
  planner_recalculate_trapezoids();
    1bc2:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <planner_recalculate_trapezoids>
}
    1bc6:	08 95       	ret

00001bc8 <plan_buffer_line>:


// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
    1bc8:	2f 92       	push	r2
    1bca:	3f 92       	push	r3
    1bcc:	4f 92       	push	r4
    1bce:	5f 92       	push	r5
    1bd0:	6f 92       	push	r6
    1bd2:	7f 92       	push	r7
    1bd4:	8f 92       	push	r8
    1bd6:	9f 92       	push	r9
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	e4 97       	sbiw	r28, 0x34	; 52
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	3b 01       	movw	r6, r22
    1bfe:	4c 01       	movw	r8, r24
    1c00:	2f a3       	std	Y+39, r18	; 0x27
    1c02:	38 a7       	std	Y+40, r19	; 0x28
    1c04:	49 a7       	std	Y+41, r20	; 0x29
    1c06:	5a a7       	std	Y+42, r21	; 0x2a
    1c08:	eb a6       	std	Y+43, r14	; 0x2b
    1c0a:	fc a6       	std	Y+44, r15	; 0x2c
    1c0c:	0d a7       	std	Y+45, r16	; 0x2d
    1c0e:	1e a7       	std	Y+46, r17	; 0x2e
    1c10:	af a6       	std	Y+47, r10	; 0x2f
    1c12:	b8 aa       	std	Y+48, r11	; 0x30
    1c14:	c9 aa       	std	Y+49, r12	; 0x31
    1c16:	da aa       	std	Y+50, r13	; 0x32
  
  
  if( gHomed == FALSE ) 
    1c18:	80 91 4a 05 	lds	r24, 0x054A
    1c1c:	88 23       	and	r24, r24
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <plan_buffer_line+0x5a>
    1c20:	72 c3       	rjmp	.+1764   	; 0x2306 <__stack+0x107>
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1c22:	c4 01       	movw	r24, r8
    1c24:	b3 01       	movw	r22, r6
    1c26:	20 91 74 06 	lds	r18, 0x0674
    1c2a:	30 91 75 06 	lds	r19, 0x0675
    1c2e:	40 91 76 06 	lds	r20, 0x0676
    1c32:	50 91 77 06 	lds	r21, 0x0677
    1c36:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1c3a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    1c3e:	7b 01       	movw	r14, r22
    1c40:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1c42:	20 91 78 06 	lds	r18, 0x0678
    1c46:	30 91 79 06 	lds	r19, 0x0679
    1c4a:	40 91 7a 06 	lds	r20, 0x067A
    1c4e:	50 91 7b 06 	lds	r21, 0x067B
    1c52:	2b a3       	std	Y+35, r18	; 0x23
    1c54:	3c a3       	std	Y+36, r19	; 0x24
    1c56:	4d a3       	std	Y+37, r20	; 0x25
    1c58:	5e a3       	std	Y+38, r21	; 0x26
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1c5a:	20 90 7c 06 	lds	r2, 0x067C
    1c5e:	30 90 7d 06 	lds	r3, 0x067D
    1c62:	40 90 7e 06 	lds	r4, 0x067E
    1c66:	50 90 7f 06 	lds	r5, 0x067F
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1c6a:	a0 90 80 06 	lds	r10, 0x0680
    1c6e:	b0 90 81 06 	lds	r11, 0x0681
    1c72:	c0 90 82 06 	lds	r12, 0x0682
    1c76:	d0 90 83 06 	lds	r13, 0x0683
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    1c7a:	80 91 02 05 	lds	r24, 0x0502
    1c7e:	90 91 03 05 	lds	r25, 0x0503
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	6a e0       	ldi	r22, 0x0A	; 10
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	0e 94 97 20 	call	0x412e	; 0x412e <__divmodhi4>
    1c8c:	8b ab       	std	Y+51, r24	; 0x33
    1c8e:	9c ab       	std	Y+52, r25	; 0x34
    1c90:	07 c0       	rjmp	.+14     	; 0x1ca0 <plan_buffer_line+0xd8>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    1c92:	83 b7       	in	r24, 0x33	; 51
    1c94:	81 60       	ori	r24, 0x01	; 1
    1c96:	83 bf       	out	0x33, r24	; 51
    1c98:	88 95       	sleep
    1c9a:	83 b7       	in	r24, 0x33	; 51
    1c9c:	8e 7f       	andi	r24, 0xFE	; 254
    1c9e:	83 bf       	out	0x33, r24	; 51
    1ca0:	80 91 04 05 	lds	r24, 0x0504
    1ca4:	90 91 05 05 	lds	r25, 0x0505
    1ca8:	4b a9       	ldd	r20, Y+51	; 0x33
    1caa:	5c a9       	ldd	r21, Y+52	; 0x34
    1cac:	84 17       	cp	r24, r20
    1cae:	95 07       	cpc	r25, r21
    1cb0:	81 f3       	breq	.-32     	; 0x1c92 <plan_buffer_line+0xca>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1cb2:	20 91 02 05 	lds	r18, 0x0502
    1cb6:	30 91 03 05 	lds	r19, 0x0503
    1cba:	89 e4       	ldi	r24, 0x49	; 73
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	28 9f       	mul	r18, r24
    1cc0:	d0 01       	movw	r26, r0
    1cc2:	29 9f       	mul	r18, r25
    1cc4:	b0 0d       	add	r27, r0
    1cc6:	38 9f       	mul	r19, r24
    1cc8:	b0 0d       	add	r27, r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	a8 5d       	subi	r26, 0xD8	; 216
    1cce:	bd 4f       	sbci	r27, 0xFD	; 253
    1cd0:	ba a3       	std	Y+34, r27	; 0x22
    1cd2:	a9 a3       	std	Y+33, r26	; 0x21
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1cd4:	80 91 06 05 	lds	r24, 0x0506
    1cd8:	90 91 07 05 	lds	r25, 0x0507
    1cdc:	a0 91 08 05 	lds	r26, 0x0508
    1ce0:	b0 91 09 05 	lds	r27, 0x0509
    1ce4:	37 01       	movw	r6, r14
    1ce6:	48 01       	movw	r8, r16
    1ce8:	68 1a       	sub	r6, r24
    1cea:	79 0a       	sbc	r7, r25
    1cec:	8a 0a       	sbc	r8, r26
    1cee:	9b 0a       	sbc	r9, r27
    1cf0:	97 fe       	sbrs	r9, 7
    1cf2:	08 c0       	rjmp	.+16     	; 0x1d04 <plan_buffer_line+0x13c>
    1cf4:	90 94       	com	r9
    1cf6:	80 94       	com	r8
    1cf8:	70 94       	com	r7
    1cfa:	60 94       	com	r6
    1cfc:	61 1c       	adc	r6, r1
    1cfe:	71 1c       	adc	r7, r1
    1d00:	81 1c       	adc	r8, r1
    1d02:	91 1c       	adc	r9, r1
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1d04:	6f a5       	ldd	r22, Y+47	; 0x2f
    1d06:	78 a9       	ldd	r23, Y+48	; 0x30
    1d08:	89 a9       	ldd	r24, Y+49	; 0x31
    1d0a:	9a a9       	ldd	r25, Y+50	; 0x32
    1d0c:	a6 01       	movw	r20, r12
    1d0e:	95 01       	movw	r18, r10
    1d10:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1d14:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    1d18:	6d 87       	std	Y+13, r22	; 0x0d
    1d1a:	7e 87       	std	Y+14, r23	; 0x0e
    1d1c:	8f 87       	std	Y+15, r24	; 0x0f
    1d1e:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1d20:	6b a5       	ldd	r22, Y+43	; 0x2b
    1d22:	7c a5       	ldd	r23, Y+44	; 0x2c
    1d24:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d26:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d28:	a2 01       	movw	r20, r4
    1d2a:	91 01       	movw	r18, r2
    1d2c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1d30:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    1d34:	69 87       	std	Y+9, r22	; 0x09
    1d36:	7a 87       	std	Y+10, r23	; 0x0a
    1d38:	8b 87       	std	Y+11, r24	; 0x0b
    1d3a:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1d3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d40:	89 a5       	ldd	r24, Y+41	; 0x29
    1d42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d44:	2b a1       	ldd	r18, Y+35	; 0x23
    1d46:	3c a1       	ldd	r19, Y+36	; 0x24
    1d48:	4d a1       	ldd	r20, Y+37	; 0x25
    1d4a:	5e a1       	ldd	r21, Y+38	; 0x26
    1d4c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    1d50:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    1d54:	6d 83       	std	Y+5, r22	; 0x05
    1d56:	7e 83       	std	Y+6, r23	; 0x06
    1d58:	8f 83       	std	Y+7, r24	; 0x07
    1d5a:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1d5c:	e9 82       	std	Y+1, r14	; 0x01
    1d5e:	fa 82       	std	Y+2, r15	; 0x02
    1d60:	0b 83       	std	Y+3, r16	; 0x03
    1d62:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1d64:	e9 a1       	ldd	r30, Y+33	; 0x21
    1d66:	fa a1       	ldd	r31, Y+34	; 0x22
    1d68:	60 82       	st	Z, r6
    1d6a:	71 82       	std	Z+1, r7	; 0x01
    1d6c:	82 82       	std	Z+2, r8	; 0x02
    1d6e:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    1d70:	2d 81       	ldd	r18, Y+5	; 0x05
    1d72:	3e 81       	ldd	r19, Y+6	; 0x06
    1d74:	4f 81       	ldd	r20, Y+7	; 0x07
    1d76:	58 85       	ldd	r21, Y+8	; 0x08
    1d78:	80 91 0a 05 	lds	r24, 0x050A
    1d7c:	90 91 0b 05 	lds	r25, 0x050B
    1d80:	a0 91 0c 05 	lds	r26, 0x050C
    1d84:	b0 91 0d 05 	lds	r27, 0x050D
    1d88:	28 1b       	sub	r18, r24
    1d8a:	39 0b       	sbc	r19, r25
    1d8c:	4a 0b       	sbc	r20, r26
    1d8e:	5b 0b       	sbc	r21, r27
    1d90:	57 ff       	sbrs	r21, 7
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <plan_buffer_line+0x1da>
    1d94:	50 95       	com	r21
    1d96:	40 95       	com	r20
    1d98:	30 95       	com	r19
    1d9a:	21 95       	neg	r18
    1d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9e:	4f 4f       	sbci	r20, 0xFF	; 255
    1da0:	5f 4f       	sbci	r21, 0xFF	; 255
    1da2:	a9 a1       	ldd	r26, Y+33	; 0x21
    1da4:	ba a1       	ldd	r27, Y+34	; 0x22
    1da6:	14 96       	adiw	r26, 0x04	; 4
    1da8:	2d 93       	st	X+, r18
    1daa:	3d 93       	st	X+, r19
    1dac:	4d 93       	st	X+, r20
    1dae:	5c 93       	st	X, r21
    1db0:	17 97       	sbiw	r26, 0x07	; 7
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    1db2:	29 85       	ldd	r18, Y+9	; 0x09
    1db4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1db6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1db8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1dba:	80 91 0e 05 	lds	r24, 0x050E
    1dbe:	90 91 0f 05 	lds	r25, 0x050F
    1dc2:	a0 91 10 05 	lds	r26, 0x0510
    1dc6:	b0 91 11 05 	lds	r27, 0x0511
    1dca:	28 1b       	sub	r18, r24
    1dcc:	39 0b       	sbc	r19, r25
    1dce:	4a 0b       	sbc	r20, r26
    1dd0:	5b 0b       	sbc	r21, r27
    1dd2:	57 ff       	sbrs	r21, 7
    1dd4:	07 c0       	rjmp	.+14     	; 0x1de4 <plan_buffer_line+0x21c>
    1dd6:	50 95       	com	r21
    1dd8:	40 95       	com	r20
    1dda:	30 95       	com	r19
    1ddc:	21 95       	neg	r18
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	4f 4f       	sbci	r20, 0xFF	; 255
    1de2:	5f 4f       	sbci	r21, 0xFF	; 255
    1de4:	e9 a1       	ldd	r30, Y+33	; 0x21
    1de6:	fa a1       	ldd	r31, Y+34	; 0x22
    1de8:	20 87       	std	Z+8, r18	; 0x08
    1dea:	31 87       	std	Z+9, r19	; 0x09
    1dec:	42 87       	std	Z+10, r20	; 0x0a
    1dee:	53 87       	std	Z+11, r21	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    1df0:	a0 90 12 05 	lds	r10, 0x0512
    1df4:	b0 90 13 05 	lds	r11, 0x0513
    1df8:	c0 90 14 05 	lds	r12, 0x0514
    1dfc:	d0 90 15 05 	lds	r13, 0x0515
    1e00:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e02:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e04:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e06:	58 89       	ldd	r21, Y+16	; 0x10
    1e08:	2a 19       	sub	r18, r10
    1e0a:	3b 09       	sbc	r19, r11
    1e0c:	4c 09       	sbc	r20, r12
    1e0e:	5d 09       	sbc	r21, r13
    1e10:	57 ff       	sbrs	r21, 7
    1e12:	07 c0       	rjmp	.+14     	; 0x1e22 <plan_buffer_line+0x25a>
    1e14:	50 95       	com	r21
    1e16:	40 95       	com	r20
    1e18:	30 95       	com	r19
    1e1a:	21 95       	neg	r18
    1e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e20:	5f 4f       	sbci	r21, 0xFF	; 255
    1e22:	a9 a1       	ldd	r26, Y+33	; 0x21
    1e24:	ba a1       	ldd	r27, Y+34	; 0x22
    1e26:	1c 96       	adiw	r26, 0x0c	; 12
    1e28:	2d 93       	st	X+, r18
    1e2a:	3d 93       	st	X+, r19
    1e2c:	4d 93       	st	X+, r20
    1e2e:	5c 93       	st	X, r21
    1e30:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    1e32:	18 96       	adiw	r26, 0x08	; 8
    1e34:	ed 90       	ld	r14, X+
    1e36:	fd 90       	ld	r15, X+
    1e38:	0d 91       	ld	r16, X+
    1e3a:	1c 91       	ld	r17, X
    1e3c:	1b 97       	sbiw	r26, 0x0b	; 11
    1e3e:	fd 01       	movw	r30, r26
    1e40:	84 81       	ldd	r24, Z+4	; 0x04
    1e42:	95 81       	ldd	r25, Z+5	; 0x05
    1e44:	a6 81       	ldd	r26, Z+6	; 0x06
    1e46:	b7 81       	ldd	r27, Z+7	; 0x07
    1e48:	8e 15       	cp	r24, r14
    1e4a:	9f 05       	cpc	r25, r15
    1e4c:	a0 07       	cpc	r26, r16
    1e4e:	b1 07       	cpc	r27, r17
    1e50:	10 f4       	brcc	.+4      	; 0x1e56 <plan_buffer_line+0x28e>
    1e52:	d8 01       	movw	r26, r16
    1e54:	c7 01       	movw	r24, r14
    1e56:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e58:	fa a1       	ldd	r31, Y+34	; 0x22
    1e5a:	e0 80       	ld	r14, Z
    1e5c:	f1 80       	ldd	r15, Z+1	; 0x01
    1e5e:	02 81       	ldd	r16, Z+2	; 0x02
    1e60:	13 81       	ldd	r17, Z+3	; 0x03
    1e62:	8e 15       	cp	r24, r14
    1e64:	9f 05       	cpc	r25, r15
    1e66:	a0 07       	cpc	r26, r16
    1e68:	b1 07       	cpc	r27, r17
    1e6a:	10 f4       	brcc	.+4      	; 0x1e70 <plan_buffer_line+0x2a8>
    1e6c:	d8 01       	movw	r26, r16
    1e6e:	c7 01       	movw	r24, r14
    1e70:	82 17       	cp	r24, r18
    1e72:	93 07       	cpc	r25, r19
    1e74:	a4 07       	cpc	r26, r20
    1e76:	b5 07       	cpc	r27, r21
    1e78:	10 f4       	brcc	.+4      	; 0x1e7e <plan_buffer_line+0x2b6>
    1e7a:	da 01       	movw	r26, r20
    1e7c:	c9 01       	movw	r24, r18
    1e7e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e80:	fa a1       	ldd	r31, Y+34	; 0x22
    1e82:	81 8b       	std	Z+17, r24	; 0x11
    1e84:	92 8b       	std	Z+18, r25	; 0x12
    1e86:	a3 8b       	std	Z+19, r26	; 0x13
    1e88:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	a1 05       	cpc	r26, r1
    1e8e:	b1 05       	cpc	r27, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <plan_buffer_line+0x2cc>
    1e92:	39 c2       	rjmp	.+1138   	; 0x2306 <__stack+0x107>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    1e94:	69 81       	ldd	r22, Y+1	; 0x01
    1e96:	7a 81       	ldd	r23, Y+2	; 0x02
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	20 91 06 05 	lds	r18, 0x0506
    1ea0:	30 91 07 05 	lds	r19, 0x0507
    1ea4:	40 91 08 05 	lds	r20, 0x0508
    1ea8:	50 91 09 05 	lds	r21, 0x0509
    1eac:	62 1b       	sub	r22, r18
    1eae:	73 0b       	sbc	r23, r19
    1eb0:	84 0b       	sbc	r24, r20
    1eb2:	95 0b       	sbc	r25, r21
    1eb4:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    1eb8:	20 91 74 06 	lds	r18, 0x0674
    1ebc:	30 91 75 06 	lds	r19, 0x0675
    1ec0:	40 91 76 06 	lds	r20, 0x0676
    1ec4:	50 91 77 06 	lds	r21, 0x0677
    1ec8:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    1ecc:	6d 8f       	std	Y+29, r22	; 0x1d
    1ece:	7e 8f       	std	Y+30, r23	; 0x1e
    1ed0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ed2:	98 a3       	std	Y+32, r25	; 0x20
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    1ed4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ed6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ed8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eda:	98 85       	ldd	r25, Y+8	; 0x08
    1edc:	20 91 0a 05 	lds	r18, 0x050A
    1ee0:	30 91 0b 05 	lds	r19, 0x050B
    1ee4:	40 91 0c 05 	lds	r20, 0x050C
    1ee8:	50 91 0d 05 	lds	r21, 0x050D
    1eec:	62 1b       	sub	r22, r18
    1eee:	73 0b       	sbc	r23, r19
    1ef0:	84 0b       	sbc	r24, r20
    1ef2:	95 0b       	sbc	r25, r21
    1ef4:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    1ef8:	20 91 78 06 	lds	r18, 0x0678
    1efc:	30 91 79 06 	lds	r19, 0x0679
    1f00:	40 91 7a 06 	lds	r20, 0x067A
    1f04:	50 91 7b 06 	lds	r21, 0x067B
    1f08:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    1f0c:	69 8f       	std	Y+25, r22	; 0x19
    1f0e:	7a 8f       	std	Y+26, r23	; 0x1a
    1f10:	8b 8f       	std	Y+27, r24	; 0x1b
    1f12:	9c 8f       	std	Y+28, r25	; 0x1c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    1f14:	69 85       	ldd	r22, Y+9	; 0x09
    1f16:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1c:	20 91 0e 05 	lds	r18, 0x050E
    1f20:	30 91 0f 05 	lds	r19, 0x050F
    1f24:	40 91 10 05 	lds	r20, 0x0510
    1f28:	50 91 11 05 	lds	r21, 0x0511
    1f2c:	62 1b       	sub	r22, r18
    1f2e:	73 0b       	sbc	r23, r19
    1f30:	84 0b       	sbc	r24, r20
    1f32:	95 0b       	sbc	r25, r21
    1f34:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    1f38:	20 91 7c 06 	lds	r18, 0x067C
    1f3c:	30 91 7d 06 	lds	r19, 0x067D
    1f40:	40 91 7e 06 	lds	r20, 0x067E
    1f44:	50 91 7f 06 	lds	r21, 0x067F
    1f48:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    1f4c:	6d 8b       	std	Y+21, r22	; 0x15
    1f4e:	7e 8b       	std	Y+22, r23	; 0x16
    1f50:	8f 8b       	std	Y+23, r24	; 0x17
    1f52:	98 8f       	std	Y+24, r25	; 0x18
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    1f54:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f56:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f5a:	98 89       	ldd	r25, Y+16	; 0x10
    1f5c:	6a 19       	sub	r22, r10
    1f5e:	7b 09       	sbc	r23, r11
    1f60:	8c 09       	sbc	r24, r12
    1f62:	9d 09       	sbc	r25, r13
    1f64:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    1f68:	20 91 80 06 	lds	r18, 0x0680
    1f6c:	30 91 81 06 	lds	r19, 0x0681
    1f70:	40 91 82 06 	lds	r20, 0x0682
    1f74:	50 91 83 06 	lds	r21, 0x0683
    1f78:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    1f7c:	69 8b       	std	Y+17, r22	; 0x11
    1f7e:	7a 8b       	std	Y+18, r23	; 0x12
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
    1f82:	9c 8b       	std	Y+20, r25	; 0x14
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    1f84:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f86:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1f88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f8c:	0e 94 67 20 	call	0x40ce	; 0x40ce <square>
    1f90:	3b 01       	movw	r6, r22
    1f92:	4c 01       	movw	r8, r24
    1f94:	69 8d       	ldd	r22, Y+25	; 0x19
    1f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9c:	0e 94 67 20 	call	0x40ce	; 0x40ce <square>
    1fa0:	7b 01       	movw	r14, r22
    1fa2:	8c 01       	movw	r16, r24
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	0e 94 67 20 	call	0x40ce	; 0x40ce <square>
    1fb0:	5b 01       	movw	r10, r22
    1fb2:	6c 01       	movw	r12, r24
    1fb4:	69 89       	ldd	r22, Y+17	; 0x11
    1fb6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	0e 94 67 20 	call	0x40ce	; 0x40ce <square>
    1fc0:	1b 01       	movw	r2, r22
    1fc2:	2c 01       	movw	r4, r24
    1fc4:	c4 01       	movw	r24, r8
    1fc6:	b3 01       	movw	r22, r6
    1fc8:	a8 01       	movw	r20, r16
    1fca:	97 01       	movw	r18, r14
    1fcc:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    1fd0:	a6 01       	movw	r20, r12
    1fd2:	95 01       	movw	r18, r10
    1fd4:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    1fd8:	a2 01       	movw	r20, r4
    1fda:	91 01       	movw	r18, r2
    1fdc:	0e 94 ce 1c 	call	0x399c	; 0x399c <__addsf3>
    1fe0:	0e 94 29 20 	call	0x4052	; 0x4052 <sqrt>
    1fe4:	9b 01       	movw	r18, r22
    1fe6:	ac 01       	movw	r20, r24
    1fe8:	a9 a1       	ldd	r26, Y+33	; 0x21
    1fea:	ba a1       	ldd	r27, Y+34	; 0x22
    1fec:	9d 96       	adiw	r26, 0x2d	; 45
    1fee:	6d 93       	st	X+, r22
    1ff0:	7d 93       	st	X+, r23
    1ff2:	8d 93       	st	X+, r24
    1ff4:	9c 93       	st	X, r25
    1ff6:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    1ff8:	60 96       	adiw	r28, 0x10	; 16
    1ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ffc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ffe:	60 97       	sbiw	r28, 0x10	; 16
    2000:	89 2b       	or	r24, r25
    2002:	89 f4       	brne	.+34     	; 0x2026 <plan_buffer_line+0x45e>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2004:	ca 01       	movw	r24, r20
    2006:	b9 01       	movw	r22, r18
    2008:	2e 96       	adiw	r28, 0x0e	; 14
    200a:	2c ad       	ldd	r18, Y+60	; 0x3c
    200c:	3d ad       	ldd	r19, Y+61	; 0x3d
    200e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2010:	5f ad       	ldd	r21, Y+63	; 0x3f
    2012:	2e 97       	sbiw	r28, 0x0e	; 14
    2014:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	34 e2       	ldi	r19, 0x24	; 36
    201c:	44 e7       	ldi	r20, 0x74	; 116
    201e:	59 e4       	ldi	r21, 0x49	; 73
    2020:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    2024:	0c c0       	rjmp	.+24     	; 0x203e <plan_buffer_line+0x476>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2026:	60 ec       	ldi	r22, 0xC0	; 192
    2028:	71 ee       	ldi	r23, 0xE1	; 225
    202a:	84 e6       	ldi	r24, 0x64	; 100
    202c:	9c e4       	ldi	r25, 0x4C	; 76
    202e:	2e 96       	adiw	r28, 0x0e	; 14
    2030:	2c ad       	ldd	r18, Y+60	; 0x3c
    2032:	3d ad       	ldd	r19, Y+61	; 0x3d
    2034:	4e ad       	ldd	r20, Y+62	; 0x3e
    2036:	5f ad       	ldd	r21, Y+63	; 0x3f
    2038:	2e 97       	sbiw	r28, 0x0e	; 14
    203a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    203e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <lround>
    2042:	ac 01       	movw	r20, r24
    2044:	cb 01       	movw	r24, r22
    2046:	da 01       	movw	r26, r20
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    204c:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__floatunsisf>
    2050:	9b 01       	movw	r18, r22
    2052:	ac 01       	movw	r20, r24
    2054:	60 ec       	ldi	r22, 0xC0	; 192
    2056:	71 ee       	ldi	r23, 0xE1	; 225
    2058:	84 e6       	ldi	r24, 0x64	; 100
    205a:	9c e4       	ldi	r25, 0x4C	; 76
    205c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    2060:	7b 01       	movw	r14, r22
    2062:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2064:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2066:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2068:	8f 8d       	ldd	r24, Y+31	; 0x1f
    206a:	98 a1       	ldd	r25, Y+32	; 0x20
    206c:	a8 01       	movw	r20, r16
    206e:	97 01       	movw	r18, r14
    2070:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    2074:	e9 a1       	ldd	r30, Y+33	; 0x21
    2076:	fa a1       	ldd	r31, Y+34	; 0x22
    2078:	61 8f       	std	Z+25, r22	; 0x19
    207a:	72 8f       	std	Z+26, r23	; 0x1a
    207c:	83 8f       	std	Z+27, r24	; 0x1b
    207e:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_y = delta_y_mm * multiplier;
    2080:	69 8d       	ldd	r22, Y+25	; 0x19
    2082:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2084:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2086:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2088:	a8 01       	movw	r20, r16
    208a:	97 01       	movw	r18, r14
    208c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    2090:	a9 a1       	ldd	r26, Y+33	; 0x21
    2092:	ba a1       	ldd	r27, Y+34	; 0x22
    2094:	5d 96       	adiw	r26, 0x1d	; 29
    2096:	6d 93       	st	X+, r22
    2098:	7d 93       	st	X+, r23
    209a:	8d 93       	st	X+, r24
    209c:	9c 93       	st	X, r25
    209e:	90 97       	sbiw	r26, 0x20	; 32
  block->speed_z = delta_z_mm * multiplier;
    20a0:	6d 89       	ldd	r22, Y+21	; 0x15
    20a2:	7e 89       	ldd	r23, Y+22	; 0x16
    20a4:	8f 89       	ldd	r24, Y+23	; 0x17
    20a6:	98 8d       	ldd	r25, Y+24	; 0x18
    20a8:	a8 01       	movw	r20, r16
    20aa:	97 01       	movw	r18, r14
    20ac:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    20b0:	e9 a1       	ldd	r30, Y+33	; 0x21
    20b2:	fa a1       	ldd	r31, Y+34	; 0x22
    20b4:	61 a3       	std	Z+33, r22	; 0x21
    20b6:	72 a3       	std	Z+34, r23	; 0x22
    20b8:	83 a3       	std	Z+35, r24	; 0x23
    20ba:	94 a3       	std	Z+36, r25	; 0x24
  block->speed_c = delta_c_mm * multiplier;
    20bc:	69 89       	ldd	r22, Y+17	; 0x11
    20be:	7a 89       	ldd	r23, Y+18	; 0x12
    20c0:	8b 89       	ldd	r24, Y+19	; 0x13
    20c2:	9c 89       	ldd	r25, Y+20	; 0x14
    20c4:	a8 01       	movw	r20, r16
    20c6:	97 01       	movw	r18, r14
    20c8:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    20cc:	a9 a1       	ldd	r26, Y+33	; 0x21
    20ce:	ba a1       	ldd	r27, Y+34	; 0x22
    20d0:	95 96       	adiw	r26, 0x25	; 37
    20d2:	6d 93       	st	X+, r22
    20d4:	7d 93       	st	X+, r23
    20d6:	8d 93       	st	X+, r24
    20d8:	9c 93       	st	X, r25
    20da:	98 97       	sbiw	r26, 0x28	; 40
  block->nominal_speed = block->millimeters * multiplier;
    20dc:	9d 96       	adiw	r26, 0x2d	; 45
    20de:	6d 91       	ld	r22, X+
    20e0:	7d 91       	ld	r23, X+
    20e2:	8d 91       	ld	r24, X+
    20e4:	9c 91       	ld	r25, X
    20e6:	d0 97       	sbiw	r26, 0x30	; 48
    20e8:	a8 01       	movw	r20, r16
    20ea:	97 01       	movw	r18, r14
    20ec:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    20f0:	e9 a1       	ldd	r30, Y+33	; 0x21
    20f2:	fa a1       	ldd	r31, Y+34	; 0x22
    20f4:	61 a7       	std	Z+41, r22	; 0x29
    20f6:	72 a7       	std	Z+42, r23	; 0x2a
    20f8:	83 a7       	std	Z+43, r24	; 0x2b
    20fa:	94 a7       	std	Z+44, r25	; 0x2c
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    20fc:	61 89       	ldd	r22, Z+17	; 0x11
    20fe:	72 89       	ldd	r23, Z+18	; 0x12
    2100:	83 89       	ldd	r24, Z+19	; 0x13
    2102:	94 89       	ldd	r25, Z+20	; 0x14
    2104:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__floatsisf>
    2108:	5b 01       	movw	r10, r22
    210a:	6c 01       	movw	r12, r24
    210c:	a8 01       	movw	r20, r16
    210e:	97 01       	movw	r18, r14
    2110:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    2114:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ceil>
    2118:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fixunssfsi>
    211c:	3b 01       	movw	r6, r22
    211e:	4c 01       	movw	r8, r24
    2120:	a9 a1       	ldd	r26, Y+33	; 0x21
    2122:	ba a1       	ldd	r27, Y+34	; 0x22
    2124:	55 96       	adiw	r26, 0x15	; 21
    2126:	6d 93       	st	X+, r22
    2128:	7d 93       	st	X+, r23
    212a:	8d 93       	st	X+, r24
    212c:	9c 93       	st	X, r25
    212e:	58 97       	sbiw	r26, 0x18	; 24
  block->entry_factor = 0.0;
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	a0 e0       	ldi	r26, 0x00	; 0
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e9 a1       	ldd	r30, Y+33	; 0x21
    213a:	fa a1       	ldd	r31, Y+34	; 0x22
    213c:	81 ab       	std	Z+49, r24	; 0x31
    213e:	92 ab       	std	Z+50, r25	; 0x32
    2140:	a3 ab       	std	Z+51, r26	; 0x33
    2142:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2144:	60 91 92 06 	lds	r22, 0x0692
    2148:	70 91 93 06 	lds	r23, 0x0693
    214c:	80 91 94 06 	lds	r24, 0x0694
    2150:	90 91 95 06 	lds	r25, 0x0695
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e7       	ldi	r20, 0x70	; 112
    215a:	52 e4       	ldi	r21, 0x42	; 66
    215c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	52 e4       	ldi	r21, 0x42	; 66
    2168:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    216c:	7b 01       	movw	r14, r22
    216e:	8c 01       	movw	r16, r24
    2170:	a9 a1       	ldd	r26, Y+33	; 0x21
    2172:	ba a1       	ldd	r27, Y+34	; 0x22
    2174:	9d 96       	adiw	r26, 0x2d	; 45
    2176:	6d 91       	ld	r22, X+
    2178:	7d 91       	ld	r23, X+
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	d0 97       	sbiw	r26, 0x30	; 48
    2180:	a6 01       	movw	r20, r12
    2182:	95 01       	movw	r18, r10
    2184:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    2188:	9b 01       	movw	r18, r22
    218a:	ac 01       	movw	r20, r24
    218c:	c8 01       	movw	r24, r16
    218e:	b7 01       	movw	r22, r14
    2190:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divsf3>
    2194:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ceil>
    2198:	09 a1       	ldd	r16, Y+33	; 0x21
    219a:	1a a1       	ldd	r17, Y+34	; 0x22
    219c:	03 5c       	subi	r16, 0xC3	; 195
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
    21a4:	f8 01       	movw	r30, r16
    21a6:	60 83       	st	Z, r22
    21a8:	71 83       	std	Z+1, r23	; 0x01
    21aa:	82 83       	std	Z+2, r24	; 0x02
    21ac:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    21ae:	80 91 16 05 	lds	r24, 0x0516
    21b2:	88 23       	and	r24, r24
    21b4:	69 f0       	breq	.+26     	; 0x21d0 <plan_buffer_line+0x608>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    21b6:	89 a1       	ldd	r24, Y+33	; 0x21
    21b8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ba:	0e 94 0f 09 	call	0x121e	; 0x121e <factor_for_safe_speed>
    21be:	8b 01       	movw	r16, r22
    21c0:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    21c2:	89 a1       	ldd	r24, Y+33	; 0x21
    21c4:	9a a1       	ldd	r25, Y+34	; 0x22
    21c6:	b9 01       	movw	r22, r18
    21c8:	a8 01       	movw	r20, r16
    21ca:	0e 94 40 0c 	call	0x1880	; 0x1880 <calculate_trapezoid_for_block>
    21ce:	26 c0       	rjmp	.+76     	; 0x221c <__stack+0x1d>
  } else {
    block->initial_rate = block->nominal_rate;
    21d0:	a9 a1       	ldd	r26, Y+33	; 0x21
    21d2:	ba a1       	ldd	r27, Y+34	; 0x22
    21d4:	d5 96       	adiw	r26, 0x35	; 53
    21d6:	6d 92       	st	X+, r6
    21d8:	7d 92       	st	X+, r7
    21da:	8d 92       	st	X+, r8
    21dc:	9c 92       	st	X, r9
    21de:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    21e0:	fd 01       	movw	r30, r26
    21e2:	61 ae       	std	Z+57, r6	; 0x39
    21e4:	72 ae       	std	Z+58, r7	; 0x3a
    21e6:	83 ae       	std	Z+59, r8	; 0x3b
    21e8:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    21ea:	ef 5b       	subi	r30, 0xBF	; 191
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	10 82       	st	Z, r1
    21f0:	11 82       	std	Z+1, r1	; 0x01
    21f2:	12 82       	std	Z+2, r1	; 0x02
    21f4:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    21f6:	9d 01       	movw	r18, r26
    21f8:	2b 5b       	subi	r18, 0xBB	; 187
    21fa:	3f 4f       	sbci	r19, 0xFF	; 255
    21fc:	fd 01       	movw	r30, r26
    21fe:	81 89       	ldd	r24, Z+17	; 0x11
    2200:	92 89       	ldd	r25, Z+18	; 0x12
    2202:	a3 89       	ldd	r26, Z+19	; 0x13
    2204:	b4 89       	ldd	r27, Z+20	; 0x14
    2206:	f9 01       	movw	r30, r18
    2208:	80 83       	st	Z, r24
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	a2 83       	std	Z+2, r26	; 0x02
    220e:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    2210:	d8 01       	movw	r26, r16
    2212:	1d 92       	st	X+, r1
    2214:	1d 92       	st	X+, r1
    2216:	1d 92       	st	X+, r1
    2218:	1c 92       	st	X, r1
    221a:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    221c:	e9 a1       	ldd	r30, Y+33	; 0x21
    221e:	fa a1       	ldd	r31, Y+34	; 0x22
    2220:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    2222:	29 81       	ldd	r18, Y+1	; 0x01
    2224:	3a 81       	ldd	r19, Y+2	; 0x02
    2226:	4b 81       	ldd	r20, Y+3	; 0x03
    2228:	5c 81       	ldd	r21, Y+4	; 0x04
    222a:	80 91 06 05 	lds	r24, 0x0506
    222e:	90 91 07 05 	lds	r25, 0x0507
    2232:	a0 91 08 05 	lds	r26, 0x0508
    2236:	b0 91 09 05 	lds	r27, 0x0509
    223a:	28 17       	cp	r18, r24
    223c:	39 07       	cpc	r19, r25
    223e:	4a 07       	cpc	r20, r26
    2240:	5b 07       	cpc	r21, r27
    2242:	14 f4       	brge	.+4      	; 0x2248 <__stack+0x49>
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2248:	2d 81       	ldd	r18, Y+5	; 0x05
    224a:	3e 81       	ldd	r19, Y+6	; 0x06
    224c:	4f 81       	ldd	r20, Y+7	; 0x07
    224e:	58 85       	ldd	r21, Y+8	; 0x08
    2250:	80 91 0a 05 	lds	r24, 0x050A
    2254:	90 91 0b 05 	lds	r25, 0x050B
    2258:	a0 91 0c 05 	lds	r26, 0x050C
    225c:	b0 91 0d 05 	lds	r27, 0x050D
    2260:	28 17       	cp	r18, r24
    2262:	39 07       	cpc	r19, r25
    2264:	4a 07       	cpc	r20, r26
    2266:	5b 07       	cpc	r21, r27
    2268:	44 f4       	brge	.+16     	; 0x227a <__stack+0x7b>
    226a:	a9 a1       	ldd	r26, Y+33	; 0x21
    226c:	ba a1       	ldd	r27, Y+34	; 0x22
    226e:	50 96       	adiw	r26, 0x10	; 16
    2270:	8c 91       	ld	r24, X
    2272:	50 97       	sbiw	r26, 0x10	; 16
    2274:	88 60       	ori	r24, 0x08	; 8
    2276:	50 96       	adiw	r26, 0x10	; 16
    2278:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    227a:	29 85       	ldd	r18, Y+9	; 0x09
    227c:	3a 85       	ldd	r19, Y+10	; 0x0a
    227e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2280:	5c 85       	ldd	r21, Y+12	; 0x0c
    2282:	80 91 0e 05 	lds	r24, 0x050E
    2286:	90 91 0f 05 	lds	r25, 0x050F
    228a:	a0 91 10 05 	lds	r26, 0x0510
    228e:	b0 91 11 05 	lds	r27, 0x0511
    2292:	28 17       	cp	r18, r24
    2294:	39 07       	cpc	r19, r25
    2296:	4a 07       	cpc	r20, r26
    2298:	5b 07       	cpc	r21, r27
    229a:	2c f4       	brge	.+10     	; 0x22a6 <__stack+0xa7>
    229c:	e9 a1       	ldd	r30, Y+33	; 0x21
    229e:	fa a1       	ldd	r31, Y+34	; 0x22
    22a0:	80 89       	ldd	r24, Z+16	; 0x10
    22a2:	80 64       	ori	r24, 0x40	; 64
    22a4:	80 8b       	std	Z+16, r24	; 0x10
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    22a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    22a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    22aa:	4f 85       	ldd	r20, Y+15	; 0x0f
    22ac:	58 89       	ldd	r21, Y+16	; 0x10
    22ae:	80 91 12 05 	lds	r24, 0x0512
    22b2:	90 91 13 05 	lds	r25, 0x0513
    22b6:	a0 91 14 05 	lds	r26, 0x0514
    22ba:	b0 91 15 05 	lds	r27, 0x0515
    22be:	28 17       	cp	r18, r24
    22c0:	39 07       	cpc	r19, r25
    22c2:	4a 07       	cpc	r20, r26
    22c4:	5b 07       	cpc	r21, r27
    22c6:	44 f4       	brge	.+16     	; 0x22d8 <__stack+0xd9>
    22c8:	a9 a1       	ldd	r26, Y+33	; 0x21
    22ca:	ba a1       	ldd	r27, Y+34	; 0x22
    22cc:	50 96       	adiw	r26, 0x10	; 16
    22ce:	8c 91       	ld	r24, X
    22d0:	50 97       	sbiw	r26, 0x10	; 16
    22d2:	80 68       	ori	r24, 0x80	; 128
    22d4:	50 96       	adiw	r26, 0x10	; 16
    22d6:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    22d8:	eb a9       	ldd	r30, Y+51	; 0x33
    22da:	fc a9       	ldd	r31, Y+52	; 0x34
    22dc:	f0 93 03 05 	sts	0x0503, r31
    22e0:	e0 93 02 05 	sts	0x0502, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    22e4:	a6 e0       	ldi	r26, 0x06	; 6
    22e6:	b5 e0       	ldi	r27, 0x05	; 5
    22e8:	fe 01       	movw	r30, r28
    22ea:	31 96       	adiw	r30, 0x01	; 1
    22ec:	80 e1       	ldi	r24, 0x10	; 16
    22ee:	01 90       	ld	r0, Z+
    22f0:	0d 92       	st	X+, r0
    22f2:	81 50       	subi	r24, 0x01	; 1
    22f4:	e1 f7       	brne	.-8      	; 0x22ee <__stack+0xef>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    22f6:	80 91 16 05 	lds	r24, 0x0516
    22fa:	88 23       	and	r24, r24
    22fc:	11 f0       	breq	.+4      	; 0x2302 <__stack+0x103>
    22fe:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <planner_recalculate>
  st_wake_up();
    2302:	0e 94 3a 14 	call	0x2874	; 0x2874 <st_wake_up>
}
    2306:	e4 96       	adiw	r28, 0x34	; 52
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	ff 90       	pop	r15
    231c:	ef 90       	pop	r14
    231e:	df 90       	pop	r13
    2320:	cf 90       	pop	r12
    2322:	bf 90       	pop	r11
    2324:	af 90       	pop	r10
    2326:	9f 90       	pop	r9
    2328:	8f 90       	pop	r8
    232a:	7f 90       	pop	r7
    232c:	6f 90       	pop	r6
    232e:	5f 90       	pop	r5
    2330:	4f 90       	pop	r4
    2332:	3f 90       	pop	r3
    2334:	2f 90       	pop	r2
    2336:	08 95       	ret

00002338 <sp_process>:
//  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
//  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	61 c0       	rjmp	.+194    	; 0x2400 <sp_process+0xc8>
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    233e:	e0 91 49 05 	lds	r30, 0x0549
    2342:	ee 23       	and	r30, r30
    2344:	09 f4       	brne	.+2      	; 0x2348 <sp_process+0x10>
    2346:	4a c0       	rjmp	.+148    	; 0x23dc <sp_process+0xa4>
    2348:	9a 30       	cpi	r25, 0x0A	; 10
    234a:	19 f0       	breq	.+6      	; 0x2352 <sp_process+0x1a>
    234c:	9d 30       	cpi	r25, 0x0D	; 13
    234e:	09 f0       	breq	.+2      	; 0x2352 <sp_process+0x1a>
    2350:	45 c0       	rjmp	.+138    	; 0x23dc <sp_process+0xa4>
      line[char_counter] = 0; // terminate string
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	e9 5e       	subi	r30, 0xE9	; 233
    2356:	fa 4f       	sbci	r31, 0xFA	; 250
    2358:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    235a:	87 e1       	ldi	r24, 0x17	; 23
    235c:	95 e0       	ldi	r25, 0x05	; 5
    235e:	0e 94 13 04 	call	0x826	; 0x826 <gc_execute_line>
    2362:	68 2f       	mov	r22, r24
static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code)
{
	if( gHomed == FALSE ) {
    2364:	80 91 4a 05 	lds	r24, 0x054A
    2368:	88 23       	and	r24, r24
    236a:	39 f4       	brne	.+14     	; 0x237a <sp_process+0x42>
    	printPgmString(PSTR("\r\nNot homed\n\r"));status_code = 99;
    236c:	8b ea       	ldi	r24, 0xAB	; 171
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
    2374:	c3 e6       	ldi	r28, 0x63	; 99
    2376:	d0 e0       	ldi	r29, 0x00	; 0
    2378:	1f c0       	rjmp	.+62     	; 0x23b8 <sp_process+0x80>
	}

  switch(status_code) {          
    237a:	62 30       	cpi	r22, 0x02	; 2
    237c:	91 f0       	breq	.+36     	; 0x23a2 <sp_process+0x6a>
    237e:	63 30       	cpi	r22, 0x03	; 3
    2380:	28 f4       	brcc	.+10     	; 0x238c <sp_process+0x54>
    2382:	66 23       	and	r22, r22
    2384:	41 f0       	breq	.+16     	; 0x2396 <sp_process+0x5e>
    2386:	61 30       	cpi	r22, 0x01	; 1
    2388:	a9 f4       	brne	.+42     	; 0x23b4 <sp_process+0x7c>
    238a:	08 c0       	rjmp	.+16     	; 0x239c <sp_process+0x64>
    238c:	63 30       	cpi	r22, 0x03	; 3
    238e:	61 f0       	breq	.+24     	; 0x23a8 <sp_process+0x70>
    2390:	64 30       	cpi	r22, 0x04	; 4
    2392:	81 f4       	brne	.+32     	; 0x23b4 <sp_process+0x7c>
    2394:	0c c0       	rjmp	.+24     	; 0x23ae <sp_process+0x76>
    case GCSTATUS_OK:
    	printPgmString(PSTR("ok\n\r")); 
    2396:	86 ea       	ldi	r24, 0xA6	; 166
    2398:	92 e0       	ldi	r25, 0x02	; 2
    239a:	1b c0       	rjmp	.+54     	; 0x23d2 <sp_process+0x9a>
		break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    	printPgmString(PSTR("error: Bad number format\n\r")); 
    239c:	8b e8       	ldi	r24, 0x8B	; 139
    239e:	92 e0       	ldi	r25, 0x02	; 2
    23a0:	18 c0       	rjmp	.+48     	; 0x23d2 <sp_process+0x9a>
		break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    	printPgmString(PSTR("error: Expected command letter\n\r")); 
    23a2:	8a e6       	ldi	r24, 0x6A	; 106
    23a4:	92 e0       	ldi	r25, 0x02	; 2
    23a6:	15 c0       	rjmp	.+42     	; 0x23d2 <sp_process+0x9a>
		break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    	printPgmString(PSTR("error: Unsupported statement\n\r")); 
    23a8:	8b e4       	ldi	r24, 0x4B	; 75
    23aa:	92 e0       	ldi	r25, 0x02	; 2
    23ac:	12 c0       	rjmp	.+36     	; 0x23d2 <sp_process+0x9a>
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
    23ae:	8d e2       	ldi	r24, 0x2D	; 45
    23b0:	92 e0       	ldi	r25, 0x02	; 2
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <sp_process+0x9a>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    23b4:	c6 2f       	mov	r28, r22
    23b6:	d0 e0       	ldi	r29, 0x00	; 0
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
		break;
    default:
    	printPgmString(PSTR("error: "));
    23b8:	85 e2       	ldi	r24, 0x25	; 37
    23ba:	92 e0       	ldi	r25, 0x02	; 2
    23bc:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
    	printInteger(status_code);
    23c0:	be 01       	movw	r22, r28
    23c2:	88 27       	eor	r24, r24
    23c4:	77 fd       	sbrc	r23, 7
    23c6:	80 95       	com	r24
    23c8:	98 2f       	mov	r25, r24
    23ca:	0e 94 96 1a 	call	0x352c	; 0x352c <printInteger>
    	printPgmString(PSTR("\n\r"));
    23ce:	82 e2       	ldi	r24, 0x22	; 34
    23d0:	92 e0       	ldi	r25, 0x02	; 2
    23d2:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    23d6:	10 92 49 05 	sts	0x0549, r1
    23da:	12 c0       	rjmp	.+36     	; 0x2400 <sp_process+0xc8>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    23dc:	91 32       	cpi	r25, 0x21	; 33
    23de:	84 f0       	brlt	.+32     	; 0x2400 <sp_process+0xc8>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    23e0:	89 2f       	mov	r24, r25
    23e2:	81 56       	subi	r24, 0x61	; 97
    23e4:	ae 2f       	mov	r26, r30
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ef 5f       	subi	r30, 0xFF	; 255
    23ea:	8a 31       	cpi	r24, 0x1A	; 26
    23ec:	20 f4       	brcc	.+8      	; 0x23f6 <sp_process+0xbe>
      line[char_counter++] = c-'a'+'A';
    23ee:	a9 5e       	subi	r26, 0xE9	; 233
    23f0:	ba 4f       	sbci	r27, 0xFA	; 250
    23f2:	90 52       	subi	r25, 0x20	; 32
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <sp_process+0xc2>
    } else {
      line[char_counter++] = c;
    23f6:	a9 5e       	subi	r26, 0xE9	; 233
    23f8:	ba 4f       	sbci	r27, 0xFA	; 250
    23fa:	9c 93       	st	X, r25
    23fc:	e0 93 49 05 	sts	0x0549, r30

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2400:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <serialRead>
    2404:	98 2f       	mov	r25, r24
    2406:	8f 3f       	cpi	r24, 0xFF	; 255
    2408:	09 f0       	breq	.+2      	; 0x240c <sp_process+0xd4>
    240a:	99 cf       	rjmp	.-206    	; 0x233e <sp_process+0x6>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	76 e9       	ldi	r23, 0x96	; 150
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 94 27 19 	call	0x324e	; 0x324e <beginSerial>
//  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
//  printPgmString(PSTR("\r\n"));  
}
    241e:	08 95       	ret

00002420 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	ae e7       	ldi	r26, 0x7E	; 126
    2426:	b4 e4       	ldi	r27, 0x44	; 68
    2428:	80 93 74 06 	sts	0x0674, r24
    242c:	90 93 75 06 	sts	0x0675, r25
    2430:	a0 93 76 06 	sts	0x0676, r26
    2434:	b0 93 77 06 	sts	0x0677, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2438:	80 93 78 06 	sts	0x0678, r24
    243c:	90 93 79 06 	sts	0x0679, r25
    2440:	a0 93 7a 06 	sts	0x067A, r26
    2444:	b0 93 7b 06 	sts	0x067B, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2448:	84 ef       	ldi	r24, 0xF4	; 244
    244a:	99 ef       	ldi	r25, 0xF9	; 249
    244c:	ac e3       	ldi	r26, 0x3C	; 60
    244e:	b4 e4       	ldi	r27, 0x44	; 68
    2450:	80 93 7c 06 	sts	0x067C, r24
    2454:	90 93 7d 06 	sts	0x067D, r25
    2458:	a0 93 7e 06 	sts	0x067E, r26
    245c:	b0 93 7f 06 	sts	0x067F, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2460:	81 ec       	ldi	r24, 0xC1	; 193
    2462:	9a ec       	ldi	r25, 0xCA	; 202
    2464:	a1 e3       	ldi	r26, 0x31	; 49
    2466:	b2 e4       	ldi	r27, 0x42	; 66
    2468:	80 93 80 06 	sts	0x0680, r24
    246c:	90 93 81 06 	sts	0x0681, r25
    2470:	a0 93 82 06 	sts	0x0682, r26
    2474:	b0 93 83 06 	sts	0x0683, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2478:	88 e0       	ldi	r24, 0x08	; 8
    247a:	80 93 85 06 	sts	0x0685, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 ef       	ldi	r26, 0xF0	; 240
    2484:	b3 e4       	ldi	r27, 0x43	; 67
    2486:	80 93 86 06 	sts	0x0686, r24
    248a:	90 93 87 06 	sts	0x0687, r25
    248e:	a0 93 88 06 	sts	0x0688, r26
    2492:	b0 93 89 06 	sts	0x0689, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2496:	80 93 8a 06 	sts	0x068A, r24
    249a:	90 93 8b 06 	sts	0x068B, r25
    249e:	a0 93 8c 06 	sts	0x068C, r26
    24a2:	b0 93 8d 06 	sts	0x068D, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    24a6:	8a e9       	ldi	r24, 0x9A	; 154
    24a8:	99 e9       	ldi	r25, 0x99	; 153
    24aa:	a9 e9       	ldi	r26, 0x99	; 153
    24ac:	b0 e4       	ldi	r27, 0x40	; 64
    24ae:	80 93 92 06 	sts	0x0692, r24
    24b2:	90 93 93 06 	sts	0x0693, r25
    24b6:	a0 93 94 06 	sts	0x0694, r26
    24ba:	b0 93 95 06 	sts	0x0695, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    24be:	8d ec       	ldi	r24, 0xCD	; 205
    24c0:	9c ec       	ldi	r25, 0xCC	; 204
    24c2:	ac ec       	ldi	r26, 0xCC	; 204
    24c4:	bd e3       	ldi	r27, 0x3D	; 61
    24c6:	80 93 8e 06 	sts	0x068E, r24
    24ca:	90 93 8f 06 	sts	0x068F, r25
    24ce:	a0 93 90 06 	sts	0x0690, r26
    24d2:	b0 93 91 06 	sts	0x0691, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a8 e4       	ldi	r26, 0x48	; 72
    24dc:	b2 e4       	ldi	r27, 0x42	; 66
    24de:	80 93 96 06 	sts	0x0696, r24
    24e2:	90 93 97 06 	sts	0x0697, r25
    24e6:	a0 93 98 06 	sts	0x0698, r26
    24ea:	b0 93 99 06 	sts	0x0699, r27
}
    24ee:	08 95       	ret

000024f0 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 ba 02 	call	0x574	; 0x574 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    24f8:	87 36       	cpi	r24, 0x67	; 103
    24fa:	81 f4       	brne	.+32     	; 0x251c <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    24fc:	84 e7       	ldi	r24, 0x74	; 116
    24fe:	96 e0       	ldi	r25, 0x06	; 6
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	46 e2       	ldi	r20, 0x26	; 38
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	0e 94 27 03 	call	0x64e	; 0x64e <memcpy_from_eeprom_with_checksum>
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	89 2b       	or	r24, r25
    2510:	09 f4       	brne	.+2      	; 0x2514 <read_settings+0x24>
    2512:	21 e0       	ldi	r18, 0x01	; 1
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	28 27       	eor	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	29 c0       	rjmp	.+82     	; 0x256e <read_settings+0x7e>
      return(FALSE);
    }
  } 
  else if (version == 1) {
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	29 f5       	brne	.+74     	; 0x256a <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2520:	84 e7       	ldi	r24, 0x74	; 116
    2522:	96 e0       	ldi	r25, 0x06	; 6
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	4b e1       	ldi	r20, 0x1B	; 27
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	0e 94 27 03 	call	0x64e	; 0x64e <memcpy_from_eeprom_with_checksum>
    2530:	89 2b       	or	r24, r25
    2532:	d9 f0       	breq	.+54     	; 0x256a <read_settings+0x7a>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2534:	8a e9       	ldi	r24, 0x9A	; 154
    2536:	99 e9       	ldi	r25, 0x99	; 153
    2538:	a9 e9       	ldi	r26, 0x99	; 153
    253a:	b0 e4       	ldi	r27, 0x40	; 64
    253c:	80 93 92 06 	sts	0x0692, r24
    2540:	90 93 93 06 	sts	0x0693, r25
    2544:	a0 93 94 06 	sts	0x0694, r26
    2548:	b0 93 95 06 	sts	0x0695, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a8 e4       	ldi	r26, 0x48	; 72
    2552:	b2 e4       	ldi	r27, 0x42	; 66
    2554:	80 93 96 06 	sts	0x0696, r24
    2558:	90 93 97 06 	sts	0x0697, r25
    255c:	a0 93 98 06 	sts	0x0698, r26
    2560:	b0 93 99 06 	sts	0x0699, r27
    2564:	21 e0       	ldi	r18, 0x01	; 1
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	02 c0       	rjmp	.+4      	; 0x256e <read_settings+0x7e>
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    256e:	c9 01       	movw	r24, r18
    2570:	08 95       	ret

00002572 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	67 e6       	ldi	r22, 0x67	; 103
    2578:	0e 94 c2 02 	call	0x584	; 0x584 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	64 e7       	ldi	r22, 0x74	; 116
    2582:	76 e0       	ldi	r23, 0x06	; 6
    2584:	46 e2       	ldi	r20, 0x26	; 38
    2586:	50 e0       	ldi	r21, 0x00	; 0
    2588:	0e 94 dd 02 	call	0x5ba	; 0x5ba <memcpy_to_eeprom_with_checksum>
}
    258c:	08 95       	ret

0000258e <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    258e:	fc 01       	movw	r30, r24
  switch(parameter) {
    2590:	86 30       	cpi	r24, 0x06	; 6
    2592:	91 05       	cpc	r25, r1
    2594:	b9 f1       	breq	.+110    	; 0x2604 <settings_store_setting+0x76>
    2596:	87 30       	cpi	r24, 0x07	; 7
    2598:	91 05       	cpc	r25, r1
    259a:	4c f4       	brge	.+18     	; 0x25ae <settings_store_setting+0x20>
    259c:	84 30       	cpi	r24, 0x04	; 4
    259e:	91 05       	cpc	r25, r1
    25a0:	f9 f0       	breq	.+62     	; 0x25e0 <settings_store_setting+0x52>
    25a2:	85 30       	cpi	r24, 0x05	; 5
    25a4:	91 05       	cpc	r25, r1
    25a6:	2c f5       	brge	.+74     	; 0x25f2 <settings_store_setting+0x64>
    25a8:	97 ff       	sbrs	r25, 7
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <settings_store_setting+0x3c>
    25ac:	62 c0       	rjmp	.+196    	; 0x2672 <settings_store_setting+0xe4>
    25ae:	88 30       	cpi	r24, 0x08	; 8
    25b0:	91 05       	cpc	r25, r1
    25b2:	d1 f1       	breq	.+116    	; 0x2628 <settings_store_setting+0x9a>
    25b4:	88 30       	cpi	r24, 0x08	; 8
    25b6:	91 05       	cpc	r25, r1
    25b8:	74 f1       	brlt	.+92     	; 0x2616 <settings_store_setting+0x88>
    25ba:	89 30       	cpi	r24, 0x09	; 9
    25bc:	91 05       	cpc	r25, r1
    25be:	e9 f1       	breq	.+122    	; 0x263a <settings_store_setting+0xac>
    25c0:	e8 5e       	subi	r30, 0xE8	; 232
    25c2:	f3 40       	sbci	r31, 0x03	; 3
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <settings_store_setting+0x3a>
    25c6:	55 c0       	rjmp	.+170    	; 0x2672 <settings_store_setting+0xe4>
    25c8:	44 c0       	rjmp	.+136    	; 0x2652 <settings_store_setting+0xc4>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	ec 58       	subi	r30, 0x8C	; 140
    25d4:	f9 4f       	sbci	r31, 0xF9	; 249
    25d6:	40 83       	st	Z, r20
    25d8:	51 83       	std	Z+1, r21	; 0x01
    25da:	62 83       	std	Z+2, r22	; 0x02
    25dc:	73 83       	std	Z+3, r23	; 0x03
    25de:	4c c0       	rjmp	.+152    	; 0x2678 <settings_store_setting+0xea>
    case 4: settings.pulse_microseconds = round(value); break;
    25e0:	cb 01       	movw	r24, r22
    25e2:	ba 01       	movw	r22, r20
    25e4:	0e 94 05 20 	call	0x400a	; 0x400a <round>
    25e8:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__fixunssfsi>
    25ec:	60 93 85 06 	sts	0x0685, r22
    25f0:	43 c0       	rjmp	.+134    	; 0x2678 <settings_store_setting+0xea>
    case 5: settings.default_feed_rate = value; break;
    25f2:	40 93 86 06 	sts	0x0686, r20
    25f6:	50 93 87 06 	sts	0x0687, r21
    25fa:	60 93 88 06 	sts	0x0688, r22
    25fe:	70 93 89 06 	sts	0x0689, r23
    2602:	3a c0       	rjmp	.+116    	; 0x2678 <settings_store_setting+0xea>
    case 6: settings.default_seek_rate = value; break;
    2604:	40 93 8a 06 	sts	0x068A, r20
    2608:	50 93 8b 06 	sts	0x068B, r21
    260c:	60 93 8c 06 	sts	0x068C, r22
    2610:	70 93 8d 06 	sts	0x068D, r23
    2614:	31 c0       	rjmp	.+98     	; 0x2678 <settings_store_setting+0xea>
    case 7: settings.mm_per_arc_segment = value; break;
    2616:	40 93 8e 06 	sts	0x068E, r20
    261a:	50 93 8f 06 	sts	0x068F, r21
    261e:	60 93 90 06 	sts	0x0690, r22
    2622:	70 93 91 06 	sts	0x0691, r23
    2626:	28 c0       	rjmp	.+80     	; 0x2678 <settings_store_setting+0xea>
    case 8: settings.acceleration = value; break;
    2628:	40 93 92 06 	sts	0x0692, r20
    262c:	50 93 93 06 	sts	0x0693, r21
    2630:	60 93 94 06 	sts	0x0694, r22
    2634:	70 93 95 06 	sts	0x0695, r23
    2638:	1f c0       	rjmp	.+62     	; 0x2678 <settings_store_setting+0xea>
    case 9: settings.max_jerk = fabs(value); break;
    263a:	db 01       	movw	r26, r22
    263c:	ca 01       	movw	r24, r20
    263e:	bf 77       	andi	r27, 0x7F	; 127
    2640:	80 93 96 06 	sts	0x0696, r24
    2644:	90 93 97 06 	sts	0x0697, r25
    2648:	a0 93 98 06 	sts	0x0698, r26
    264c:	b0 93 99 06 	sts	0x0699, r27
    2650:	13 c0       	rjmp	.+38     	; 0x2678 <settings_store_setting+0xea>
    case 1000:
	  if (!!value) st_enable();
    2652:	cb 01       	movw	r24, r22
    2654:	ba 01       	movw	r22, r20
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__cmpsf2>
    2662:	88 23       	and	r24, r24
    2664:	19 f0       	breq	.+6      	; 0x266c <settings_store_setting+0xde>
    2666:	0e 94 55 14 	call	0x28aa	; 0x28aa <st_enable>
    266a:	08 95       	ret
      else st_disable();
    266c:	0e 94 57 14 	call	0x28ae	; 0x28ae <st_disable>
    2670:	08 95       	ret
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2672:	8e ec       	ldi	r24, 0xCE	; 206
    2674:	92 e0       	ldi	r25, 0x02	; 2
    2676:	04 c0       	rjmp	.+8      	; 0x2680 <settings_store_setting+0xf2>
      return;
  }
  write_settings();
    2678:	0e 94 b9 12 	call	0x2572	; 0x2572 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    267c:	89 eb       	ldi	r24, 0xB9	; 185
    267e:	92 e0       	ldi	r25, 0x02	; 2
    2680:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
    2684:	08 95       	ret

00002686 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2686:	82 ea       	ldi	r24, 0xA2	; 162
    2688:	94 e0       	ldi	r25, 0x04	; 4
    268a:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    268e:	8b e9       	ldi	r24, 0x9B	; 155
    2690:	94 e0       	ldi	r25, 0x04	; 4
    2692:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printPgmString(PSTR("\r\n"));
    2696:	88 e9       	ldi	r24, 0x98	; 152
    2698:	94 e0       	ldi	r25, 0x04	; 4
    269a:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    269e:	82 e9       	ldi	r24, 0x92	; 146
    26a0:	94 e0       	ldi	r25, 0x04	; 4
    26a2:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    26a6:	60 91 74 06 	lds	r22, 0x0674
    26aa:	70 91 75 06 	lds	r23, 0x0675
    26ae:	80 91 76 06 	lds	r24, 0x0676
    26b2:	90 91 77 06 	lds	r25, 0x0677
    26b6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    26ba:	82 e8       	ldi	r24, 0x82	; 130
    26bc:	94 e0       	ldi	r25, 0x04	; 4
    26be:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    26c2:	8c e7       	ldi	r24, 0x7C	; 124
    26c4:	94 e0       	ldi	r25, 0x04	; 4
    26c6:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    26ca:	60 91 78 06 	lds	r22, 0x0678
    26ce:	70 91 79 06 	lds	r23, 0x0679
    26d2:	80 91 7a 06 	lds	r24, 0x067A
    26d6:	90 91 7b 06 	lds	r25, 0x067B
    26da:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    26de:	8c e6       	ldi	r24, 0x6C	; 108
    26e0:	94 e0       	ldi	r25, 0x04	; 4
    26e2:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    26e6:	86 e6       	ldi	r24, 0x66	; 102
    26e8:	94 e0       	ldi	r25, 0x04	; 4
    26ea:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    26ee:	60 91 7c 06 	lds	r22, 0x067C
    26f2:	70 91 7d 06 	lds	r23, 0x067D
    26f6:	80 91 7e 06 	lds	r24, 0x067E
    26fa:	90 91 7f 06 	lds	r25, 0x067F
    26fe:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2702:	86 e5       	ldi	r24, 0x56	; 86
    2704:	94 e0       	ldi	r25, 0x04	; 4
    2706:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    270a:	80 e5       	ldi	r24, 0x50	; 80
    270c:	94 e0       	ldi	r25, 0x04	; 4
    270e:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2712:	60 91 80 06 	lds	r22, 0x0680
    2716:	70 91 81 06 	lds	r23, 0x0681
    271a:	80 91 82 06 	lds	r24, 0x0682
    271e:	90 91 83 06 	lds	r25, 0x0683
    2722:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2726:	8e e3       	ldi	r24, 0x3E	; 62
    2728:	94 e0       	ldi	r25, 0x04	; 4
    272a:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    272e:	88 e3       	ldi	r24, 0x38	; 56
    2730:	94 e0       	ldi	r25, 0x04	; 4
    2732:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printInteger(settings.pulse_microseconds);
    2736:	60 91 85 06 	lds	r22, 0x0685
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 96 1a 	call	0x352c	; 0x352c <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2744:	8b e1       	ldi	r24, 0x1B	; 27
    2746:	94 e0       	ldi	r25, 0x04	; 4
    2748:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    274c:	85 e1       	ldi	r24, 0x15	; 21
    274e:	94 e0       	ldi	r25, 0x04	; 4
    2750:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.default_feed_rate);
    2754:	60 91 86 06 	lds	r22, 0x0686
    2758:	70 91 87 06 	lds	r23, 0x0687
    275c:	80 91 88 06 	lds	r24, 0x0688
    2760:	90 91 89 06 	lds	r25, 0x0689
    2764:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2768:	87 ef       	ldi	r24, 0xF7	; 247
    276a:	93 e0       	ldi	r25, 0x03	; 3
    276c:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2770:	81 ef       	ldi	r24, 0xF1	; 241
    2772:	93 e0       	ldi	r25, 0x03	; 3
    2774:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.default_seek_rate);
    2778:	60 91 8a 06 	lds	r22, 0x068A
    277c:	70 91 8b 06 	lds	r23, 0x068B
    2780:	80 91 8c 06 	lds	r24, 0x068C
    2784:	90 91 8d 06 	lds	r25, 0x068D
    2788:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    278c:	83 ed       	ldi	r24, 0xD3	; 211
    278e:	93 e0       	ldi	r25, 0x03	; 3
    2790:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2794:	8d ec       	ldi	r24, 0xCD	; 205
    2796:	93 e0       	ldi	r25, 0x03	; 3
    2798:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    279c:	60 91 8e 06 	lds	r22, 0x068E
    27a0:	70 91 8f 06 	lds	r23, 0x068F
    27a4:	80 91 90 06 	lds	r24, 0x0690
    27a8:	90 91 91 06 	lds	r25, 0x0691
    27ac:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    27b0:	89 eb       	ldi	r24, 0xB9	; 185
    27b2:	93 e0       	ldi	r25, 0x03	; 3
    27b4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    27b8:	83 eb       	ldi	r24, 0xB3	; 179
    27ba:	93 e0       	ldi	r25, 0x03	; 3
    27bc:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.acceleration);
    27c0:	60 91 92 06 	lds	r22, 0x0692
    27c4:	70 91 93 06 	lds	r23, 0x0693
    27c8:	80 91 94 06 	lds	r24, 0x0694
    27cc:	90 91 95 06 	lds	r25, 0x0695
    27d0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    27d4:	85 e9       	ldi	r24, 0x95	; 149
    27d6:	93 e0       	ldi	r25, 0x03	; 3
    27d8:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    27dc:	8f e8       	ldi	r24, 0x8F	; 143
    27de:	93 e0       	ldi	r25, 0x03	; 3
    27e0:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printFloat(settings.max_jerk);
    27e4:	60 91 96 06 	lds	r22, 0x0696
    27e8:	70 91 97 06 	lds	r23, 0x0697
    27ec:	80 91 98 06 	lds	r24, 0x0698
    27f0:	90 91 99 06 	lds	r25, 0x0699
    27f4:	0e 94 b8 1a 	call	0x3570	; 0x3570 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    27f8:	87 e5       	ldi	r24, 0x57	; 87
    27fa:	93 e0       	ldi	r25, 0x03	; 3
    27fc:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2800:	8e e4       	ldi	r24, 0x4E	; 78
    2802:	93 e0       	ldi	r25, 0x03	; 3
    2804:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  printInteger(st_is_enabled());
    2808:	0e 94 59 14 	call	0x28b2	; 0x28b2 <st_is_enabled>
    280c:	aa 27       	eor	r26, r26
    280e:	97 fd       	sbrc	r25, 7
    2810:	a0 95       	com	r26
    2812:	ba 2f       	mov	r27, r26
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 96 1a 	call	0x352c	; 0x352c <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    281c:	85 e2       	ldi	r24, 0x25	; 37
    281e:	93 e0       	ldi	r25, 0x03	; 3
    2820:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2824:	82 ee       	ldi	r24, 0xE2	; 226
    2826:	92 e0       	ldi	r25, 0x02	; 2
    2828:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
}
    282c:	08 95       	ret

0000282e <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    282e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <read_settings>
    2832:	89 2b       	or	r24, r25
    2834:	31 f4       	brne	.+12     	; 0x2842 <settings_init+0x14>
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2836:	0e 94 10 12 	call	0x2420	; 0x2420 <settings_reset>
    write_settings();
    283a:	0e 94 b9 12 	call	0x2572	; 0x2572 <write_settings>
    settings_dump();
    283e:	0e 94 43 13 	call	0x2686	; 0x2686 <settings_dump>
    2842:	08 95       	ret

00002844 <spindle_init>:

#include <avr/io.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2844:	e1 e0       	ldi	r30, 0x01	; 1
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	80 81       	ld	r24, Z
    284a:	80 64       	ori	r24, 0x40	; 64
    284c:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    284e:	27 9a       	sbi	0x04, 7	; 4
}
    2850:	08 95       	ret

00002852 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2852:	97 fd       	sbrc	r25, 7
    2854:	02 c0       	rjmp	.+4      	; 0x285a <spindle_run+0x8>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2856:	2f 98       	cbi	0x05, 7	; 5
    2858:	01 c0       	rjmp	.+2      	; 0x285c <spindle_run+0xa>
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    285a:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    285c:	80 91 02 01 	lds	r24, 0x0102
    2860:	80 64       	ori	r24, 0x40	; 64
    2862:	80 93 02 01 	sts	0x0102, r24
}
    2866:	08 95       	ret

00002868 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2868:	e2 e0       	ldi	r30, 0x02	; 2
    286a:	f1 e0       	ldi	r31, 0x01	; 1
    286c:	80 81       	ld	r24, Z
    286e:	8f 7b       	andi	r24, 0xBF	; 191
    2870:	80 83       	st	Z, r24
}
    2872:	08 95       	ret

00002874 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2874:	ef e6       	ldi	r30, 0x6F	; 111
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	82 60       	ori	r24, 0x02	; 2
    287c:	80 83       	st	Z, r24
}
    287e:	08 95       	ret

00002880 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	90 93 63 05 	sts	0x0563, r25
    2886:	80 93 62 05 	sts	0x0562, r24
}
    288a:	08 95       	ret

0000288c <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    288c:	1f 92       	push	r1
    288e:	0f 92       	push	r0
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	0f 92       	push	r0
    2894:	11 24       	eor	r1, r1
    2896:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2898:	81 b3       	in	r24, 0x11	; 17
    289a:	8a 7c       	andi	r24, 0xCA	; 202
    289c:	81 bb       	out	0x11, r24	; 17
}
    289e:	8f 91       	pop	r24
    28a0:	0f 90       	pop	r0
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	0f 90       	pop	r0
    28a6:	1f 90       	pop	r1
    28a8:	18 95       	reti

000028aa <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    28aa:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    28ac:	08 95       	ret

000028ae <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    28ae:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    28b0:	08 95       	ret

000028b2 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    28b2:	3c 99       	sbic	0x07, 4	; 7
    28b4:	03 c0       	rjmp	.+6      	; 0x28bc <st_is_enabled+0xa>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	07 c0       	rjmp	.+14     	; 0x28ca <st_is_enabled+0x18>
    28bc:	88 b1       	in	r24, 0x08	; 8
    28be:	82 95       	swap	r24
    28c0:	8f 70       	andi	r24, 0x0F	; 15
    28c2:	80 95       	com	r24
    28c4:	81 70       	andi	r24, 0x01	; 1
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    28ca:	c9 01       	movw	r24, r18
    28cc:	08 95       	ret

000028ce <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    28ce:	60 30       	cpi	r22, 0x00	; 0
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	72 07       	cpc	r23, r18
    28d4:	21 e0       	ldi	r18, 0x01	; 1
    28d6:	82 07       	cpc	r24, r18
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	92 07       	cpc	r25, r18
    28dc:	30 f4       	brcc	.+12     	; 0x28ea <config_step_timer+0x1c>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    28de:	9b 01       	movw	r18, r22
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	50 e0       	ldi	r21, 0x00	; 0
    28e4:	e0 e0       	ldi	r30, 0x00	; 0
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	72 c0       	rjmp	.+228    	; 0x29ce <config_step_timer+0x100>
	} else if (cycles <= 0x7ffffL) {
    28ea:	60 30       	cpi	r22, 0x00	; 0
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	72 07       	cpc	r23, r18
    28f0:	28 e0       	ldi	r18, 0x08	; 8
    28f2:	82 07       	cpc	r24, r18
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	92 07       	cpc	r25, r18
    28f8:	a0 f4       	brcc	.+40     	; 0x2922 <config_step_timer+0x54>
    ceiling = cycles >> 3;
    28fa:	b3 e0       	ldi	r27, 0x03	; 3
    28fc:	96 95       	lsr	r25
    28fe:	87 95       	ror	r24
    2900:	77 95       	ror	r23
    2902:	67 95       	ror	r22
    2904:	ba 95       	dec	r27
    2906:	d1 f7       	brne	.-12     	; 0x28fc <config_step_timer+0x2e>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2908:	9b 01       	movw	r18, r22
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	a3 e0       	ldi	r26, 0x03	; 3
    2910:	22 0f       	add	r18, r18
    2912:	33 1f       	adc	r19, r19
    2914:	44 1f       	adc	r20, r20
    2916:	55 1f       	adc	r21, r21
    2918:	aa 95       	dec	r26
    291a:	d1 f7       	brne	.-12     	; 0x2910 <config_step_timer+0x42>
    291c:	e1 e0       	ldi	r30, 0x01	; 1
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	56 c0       	rjmp	.+172    	; 0x29ce <config_step_timer+0x100>
	} else if (cycles <= 0x3fffffL) {
    2922:	60 30       	cpi	r22, 0x00	; 0
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	72 07       	cpc	r23, r18
    2928:	20 e4       	ldi	r18, 0x40	; 64
    292a:	82 07       	cpc	r24, r18
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	92 07       	cpc	r25, r18
    2930:	a0 f4       	brcc	.+40     	; 0x295a <config_step_timer+0x8c>
		ceiling =  cycles >> 6;
    2932:	f6 e0       	ldi	r31, 0x06	; 6
    2934:	96 95       	lsr	r25
    2936:	87 95       	ror	r24
    2938:	77 95       	ror	r23
    293a:	67 95       	ror	r22
    293c:	fa 95       	dec	r31
    293e:	d1 f7       	brne	.-12     	; 0x2934 <config_step_timer+0x66>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    2940:	9b 01       	movw	r18, r22
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	e6 e0       	ldi	r30, 0x06	; 6
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	44 1f       	adc	r20, r20
    294e:	55 1f       	adc	r21, r21
    2950:	ea 95       	dec	r30
    2952:	d1 f7       	brne	.-12     	; 0x2948 <config_step_timer+0x7a>
    2954:	e2 e0       	ldi	r30, 0x02	; 2
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	3a c0       	rjmp	.+116    	; 0x29ce <config_step_timer+0x100>
	} else if (cycles <= 0xffffffL) {
    295a:	60 30       	cpi	r22, 0x00	; 0
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	72 07       	cpc	r23, r18
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	82 07       	cpc	r24, r18
    2964:	21 e0       	ldi	r18, 0x01	; 1
    2966:	92 07       	cpc	r25, r18
    2968:	70 f4       	brcc	.+28     	; 0x2986 <config_step_timer+0xb8>
		ceiling =  (cycles >> 8);
    296a:	bb 27       	eor	r27, r27
    296c:	a9 2f       	mov	r26, r25
    296e:	98 2f       	mov	r25, r24
    2970:	87 2f       	mov	r24, r23
    2972:	bc 01       	movw	r22, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	22 27       	eor	r18, r18
    297a:	38 2f       	mov	r19, r24
    297c:	49 2f       	mov	r20, r25
    297e:	5a 2f       	mov	r21, r26
    2980:	e3 e0       	ldi	r30, 0x03	; 3
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	24 c0       	rjmp	.+72     	; 0x29ce <config_step_timer+0x100>
	} else if (cycles <= 0x3ffffffL) {
    2986:	60 30       	cpi	r22, 0x00	; 0
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	72 07       	cpc	r23, r18
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	82 07       	cpc	r24, r18
    2990:	24 e0       	ldi	r18, 0x04	; 4
    2992:	92 07       	cpc	r25, r18
    2994:	48 f0       	brcs	.+18     	; 0x29a8 <config_step_timer+0xda>
    2996:	6f ef       	ldi	r22, 0xFF	; 255
    2998:	7f ef       	ldi	r23, 0xFF	; 255
    299a:	e4 e0       	ldi	r30, 0x04	; 4
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3c ef       	ldi	r19, 0xFC	; 252
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	13 c0       	rjmp	.+38     	; 0x29ce <config_step_timer+0x100>
		ceiling = (cycles >> 10);
    29a8:	2a e0       	ldi	r18, 0x0A	; 10
    29aa:	96 95       	lsr	r25
    29ac:	87 95       	ror	r24
    29ae:	77 95       	ror	r23
    29b0:	67 95       	ror	r22
    29b2:	2a 95       	dec	r18
    29b4:	d1 f7       	brne	.-12     	; 0x29aa <config_step_timer+0xdc>
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    29b6:	9b 01       	movw	r18, r22
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	8a e0       	ldi	r24, 0x0A	; 10
    29be:	22 0f       	add	r18, r18
    29c0:	33 1f       	adc	r19, r19
    29c2:	44 1f       	adc	r20, r20
    29c4:	55 1f       	adc	r21, r21
    29c6:	8a 95       	dec	r24
    29c8:	d1 f7       	brne	.-12     	; 0x29be <config_step_timer+0xf0>
    29ca:	e4 e0       	ldi	r30, 0x04	; 4
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    29ce:	80 91 81 00 	lds	r24, 0x0081
    29d2:	9e 2f       	mov	r25, r30
    29d4:	9f 5f       	subi	r25, 0xFF	; 255
    29d6:	88 7f       	andi	r24, 0xF8	; 248
    29d8:	98 2b       	or	r25, r24
    29da:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    29de:	70 93 89 00 	sts	0x0089, r23
    29e2:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}
    29e6:	b9 01       	movw	r22, r18
    29e8:	ca 01       	movw	r24, r20
    29ea:	08 95       	ret

000029ec <set_step_events_per_minute>:

void set_step_events_per_minute(uint32_t steps_per_minute) {
    29ec:	9b 01       	movw	r18, r22
    29ee:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    29f0:	20 3b       	cpi	r18, 0xB0	; 176
    29f2:	84 e0       	ldi	r24, 0x04	; 4
    29f4:	38 07       	cpc	r19, r24
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	48 07       	cpc	r20, r24
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	58 07       	cpc	r21, r24
    29fe:	20 f4       	brcc	.+8      	; 0x2a08 <set_step_events_per_minute+0x1c>
    2a00:	20 eb       	ldi	r18, 0xB0	; 176
    2a02:	34 e0       	ldi	r19, 0x04	; 4
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e7       	ldi	r23, 0x70	; 112
    2a0c:	88 e3       	ldi	r24, 0x38	; 56
    2a0e:	99 e3       	ldi	r25, 0x39	; 57
    2a10:	0e 94 aa 20 	call	0x4154	; 0x4154 <__udivmodsi4>
    2a14:	ca 01       	movw	r24, r20
    2a16:	b9 01       	movw	r22, r18
    2a18:	0e 94 67 14 	call	0x28ce	; 0x28ce <config_step_timer>
    2a1c:	60 93 64 05 	sts	0x0564, r22
    2a20:	70 93 65 05 	sts	0x0565, r23
    2a24:	80 93 66 05 	sts	0x0566, r24
    2a28:	90 93 67 05 	sts	0x0567, r25
}
    2a2c:	08 95       	ret

00002a2e <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    2a2e:	80 b3       	in	r24, 0x10	; 16
    2a30:	85 63       	ori	r24, 0x35	; 53
    2a32:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    2a34:	80 b3       	in	r24, 0x10	; 16
    2a36:	8a 6c       	ori	r24, 0xCA	; 202
    2a38:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    2a3a:	81 b3       	in	r24, 0x11	; 17
    2a3c:	8a 7c       	andi	r24, 0xCA	; 202
    2a3e:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2a40:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2a42:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    2a44:	e1 e8       	ldi	r30, 0x81	; 129
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8f 7e       	andi	r24, 0xEF	; 239
    2a4c:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2a4e:	80 81       	ld	r24, Z
    2a50:	88 60       	ori	r24, 0x08	; 8
    2a52:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    2a54:	e0 e8       	ldi	r30, 0x80	; 128
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	8d 7f       	andi	r24, 0xFD	; 253
    2a5c:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2a5e:	80 81       	ld	r24, Z
    2a60:	8e 7f       	andi	r24, 0xFE	; 254
    2a62:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    2a64:	80 81       	ld	r24, Z
    2a66:	8f 73       	andi	r24, 0x3F	; 63
    2a68:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    2a6a:	80 81       	ld	r24, Z
    2a6c:	8f 7c       	andi	r24, 0xCF	; 207
    2a6e:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    2a70:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    2a7a:	e0 e7       	ldi	r30, 0x70	; 112
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	81 60       	ori	r24, 0x01	; 1
    2a82:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    2a84:	60 e7       	ldi	r22, 0x70	; 112
    2a86:	77 e1       	ldi	r23, 0x17	; 23
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2a90:	ef e6       	ldi	r30, 0x6F	; 111
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	8d 7f       	andi	r24, 0xFD	; 253
    2a98:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    2a9a:	10 92 68 05 	sts	0x0568, r1
    2a9e:	10 92 69 05 	sts	0x0569, r1
    2aa2:	10 92 6a 05 	sts	0x056A, r1
    2aa6:	10 92 6b 05 	sts	0x056B, r1
  
  sei();
    2aaa:	78 94       	sei
}
    2aac:	08 95       	ret

00002aae <moveLeft>:

#define PULSE_LENGTH	( 10 )
#define PULSE_OFF_LENGTH ( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    2aae:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2ab0:	81 b3       	in	r24, 0x11	; 17
    2ab2:	85 73       	andi	r24, 0x35	; 53
    2ab4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ab6:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ab8:	40 e6       	ldi	r20, 0x60	; 96
    2aba:	54 e0       	ldi	r21, 0x04	; 4
    2abc:	13 c0       	rjmp	.+38     	; 0x2ae4 <moveLeft+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    2abe:	21 50       	subi	r18, 0x01	; 1
    2ac0:	30 40       	sbci	r19, 0x00	; 0
    2ac2:	4b 9b       	sbis	0x09, 3	; 9
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <moveLeft+0x1c>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	08 95       	ret
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2aca:	81 b3       	in	r24, 0x11	; 17
    2acc:	8a 7c       	andi	r24, 0xCA	; 202
    2ace:	81 60       	ori	r24, 0x01	; 1
    2ad0:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ad2:	89 2f       	mov	r24, r25
    2ad4:	8a 95       	dec	r24
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <moveLeft+0x26>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2ad8:	81 b3       	in	r24, 0x11	; 17
    2ada:	8a 7c       	andi	r24, 0xCA	; 202
    2adc:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ade:	fa 01       	movw	r30, r20
    2ae0:	31 97       	sbiw	r30, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <moveLeft+0x32>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2ae4:	21 15       	cp	r18, r1
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	51 f7       	brne	.-44     	; 0x2abe <moveLeft+0x10>
    2aea:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    2aec:	08 95       	ret

00002aee <moveRight>:

unsigned char moveRight( unsigned int distance ) 
{
    2aee:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    2af0:	81 b3       	in	r24, 0x11	; 17
    2af2:	85 73       	andi	r24, 0x35	; 53
    2af4:	82 60       	ori	r24, 0x02	; 2
    2af6:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2af8:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2afa:	40 e6       	ldi	r20, 0x60	; 96
    2afc:	54 e0       	ldi	r21, 0x04	; 4
    2afe:	13 c0       	rjmp	.+38     	; 0x2b26 <moveRight+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    2b00:	21 50       	subi	r18, 0x01	; 1
    2b02:	30 40       	sbci	r19, 0x00	; 0
    2b04:	4a 9b       	sbis	0x09, 2	; 9
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <moveRight+0x1e>
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	08 95       	ret
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2b0c:	81 b3       	in	r24, 0x11	; 17
    2b0e:	8a 7c       	andi	r24, 0xCA	; 202
    2b10:	81 60       	ori	r24, 0x01	; 1
    2b12:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b14:	89 2f       	mov	r24, r25
    2b16:	8a 95       	dec	r24
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <moveRight+0x28>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    2b1a:	81 b3       	in	r24, 0x11	; 17
    2b1c:	8a 7c       	andi	r24, 0xCA	; 202
    2b1e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b20:	fa 01       	movw	r30, r20
    2b22:	31 97       	sbiw	r30, 0x01	; 1
    2b24:	f1 f7       	brne	.-4      	; 0x2b22 <moveRight+0x34>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2b26:	21 15       	cp	r18, r1
    2b28:	31 05       	cpc	r19, r1
    2b2a:	51 f7       	brne	.-44     	; 0x2b00 <moveRight+0x12>
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2b2e:	08 95       	ret

00002b30 <moveForward>:

unsigned char moveForward( unsigned int distance ) 
{
    2b30:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2b32:	81 b3       	in	r24, 0x11	; 17
    2b34:	85 73       	andi	r24, 0x35	; 53
    2b36:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b38:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b3a:	40 e6       	ldi	r20, 0x60	; 96
    2b3c:	54 e0       	ldi	r21, 0x04	; 4
    2b3e:	13 c0       	rjmp	.+38     	; 0x2b66 <moveForward+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    2b40:	21 50       	subi	r18, 0x01	; 1
    2b42:	30 40       	sbci	r19, 0x00	; 0
    2b44:	48 9b       	sbis	0x09, 0	; 9
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <moveForward+0x1c>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	08 95       	ret
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2b4c:	81 b3       	in	r24, 0x11	; 17
    2b4e:	8a 7c       	andi	r24, 0xCA	; 202
    2b50:	84 60       	ori	r24, 0x04	; 4
    2b52:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b54:	89 2f       	mov	r24, r25
    2b56:	8a 95       	dec	r24
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <moveForward+0x26>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2b5a:	81 b3       	in	r24, 0x11	; 17
    2b5c:	8a 7c       	andi	r24, 0xCA	; 202
    2b5e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b60:	fa 01       	movw	r30, r20
    2b62:	31 97       	sbiw	r30, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <moveForward+0x32>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2b66:	21 15       	cp	r18, r1
    2b68:	31 05       	cpc	r19, r1
    2b6a:	51 f7       	brne	.-44     	; 0x2b40 <moveForward+0x10>
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2b6e:	08 95       	ret

00002b70 <moveBack>:

unsigned char moveBack( unsigned int distance ) 
{
    2b70:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    2b72:	81 b3       	in	r24, 0x11	; 17
    2b74:	85 73       	andi	r24, 0x35	; 53
    2b76:	88 60       	ori	r24, 0x08	; 8
    2b78:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b7a:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b7c:	40 e6       	ldi	r20, 0x60	; 96
    2b7e:	54 e0       	ldi	r21, 0x04	; 4
    2b80:	13 c0       	rjmp	.+38     	; 0x2ba8 <moveBack+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    2b82:	21 50       	subi	r18, 0x01	; 1
    2b84:	30 40       	sbci	r19, 0x00	; 0
    2b86:	49 9b       	sbis	0x09, 1	; 9
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <moveBack+0x1e>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	08 95       	ret
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2b8e:	81 b3       	in	r24, 0x11	; 17
    2b90:	8a 7c       	andi	r24, 0xCA	; 202
    2b92:	84 60       	ori	r24, 0x04	; 4
    2b94:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b96:	89 2f       	mov	r24, r25
    2b98:	8a 95       	dec	r24
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <moveBack+0x28>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2b9c:	81 b3       	in	r24, 0x11	; 17
    2b9e:	8a 7c       	andi	r24, 0xCA	; 202
    2ba0:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ba2:	fa 01       	movw	r30, r20
    2ba4:	31 97       	sbiw	r30, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <moveBack+0x34>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2ba8:	21 15       	cp	r18, r1
    2baa:	31 05       	cpc	r19, r1
    2bac:	51 f7       	brne	.-44     	; 0x2b82 <moveBack+0x12>
    2bae:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    2bb0:	08 95       	ret

00002bb2 <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    2bb2:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    2bb8:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    2bba:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    2bbc:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    2bbe:	9f e8       	ldi	r25, 0x8F	; 143
    2bc0:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    2bc2:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    2bc4:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    2bc8:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    2bcc:	3f ec       	ldi	r19, 0xCF	; 207
    2bce:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    2bd2:	20 ef       	ldi	r18, 0xF0	; 240
    2bd4:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    2bd8:	8c e9       	ldi	r24, 0x9C	; 156
    2bda:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    2bdc:	82 e2       	ldi	r24, 0x22	; 34
    2bde:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    2be0:	83 e1       	ldi	r24, 0x13	; 19
    2be2:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    2be4:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    2be6:	80 e3       	ldi	r24, 0x30	; 48
    2be8:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    2bea:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    2bec:	83 e2       	ldi	r24, 0x23	; 35
    2bee:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    2bf6:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    2bfa:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    2bfe:	20 93 0b 01 	sts	0x010B, r18
}
    2c02:	08 95       	ret

00002c04 <st_go_home>:

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    2c04:	10 92 4a 05 	sts	0x054A, r1

// reset position machine thinks we are at.
	plan_init();
    2c08:	0e 94 b9 0a 	call	0x1572	; 0x1572 <plan_init>
	gc_init();
    2c0c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <gc_init>

	// no interrupts
	cli();
    2c10:	f8 94       	cli

	// if head down, set head up
	if( is_head_down() ) {
    2c12:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <is_head_down>
    2c16:	88 23       	and	r24, r24
    2c18:	69 f0       	breq	.+26     	; 0x2c34 <st_go_home+0x30>
		head_down(0);
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <head_down>
		
		//check again
		if(is_head_down() ){
    2c22:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <is_head_down>
    2c26:	88 23       	and	r24, r24
    2c28:	29 f0       	breq	.+10     	; 0x2c34 <st_go_home+0x30>
			printPgmString(PSTR("home failed\r\n"));
    2c2a:	8e ea       	ldi	r24, 0xAE	; 174
    2c2c:	94 e0       	ldi	r25, 0x04	; 4
    2c2e:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
    2c32:	08 95       	ret
		}

	}

	// tool changer off
	atc_change(0);	
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 0f 1b 	call	0x361e	; 0x361e <atc_change>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    2c3c:	4b 9b       	sbis	0x09, 3	; 9
    2c3e:	16 c0       	rjmp	.+44     	; 0x2c6c <st_go_home+0x68>
		// no longer homed
		gHomed = FALSE;
    2c40:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("xLimit1\r\n"));
    2c44:	8c eb       	ldi	r24, 0xBC	; 188
    2c46:	94 e0       	ldi	r25, 0x04	; 4
    2c48:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    2c4c:	88 ee       	ldi	r24, 0xE8	; 232
    2c4e:	93 e0       	ldi	r25, 0x03	; 3
    2c50:	0e 94 77 15 	call	0x2aee	; 0x2aee <moveRight>
    2c54:	88 23       	and	r24, r24
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <st_go_home+0x56>
    2c58:	44 c0       	rjmp	.+136    	; 0x2ce2 <st_go_home+0xde>
			return;
    2c5a:	80 ed       	ldi	r24, 0xD0	; 208
    2c5c:	97 e0       	ldi	r25, 0x07	; 7
    2c5e:	20 e9       	ldi	r18, 0x90	; 144
    2c60:	31 e0       	ldi	r19, 0x01	; 1
    2c62:	f9 01       	movw	r30, r18
    2c64:	31 97       	sbiw	r30, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <st_go_home+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6a:	d9 f7       	brne	.-10     	; 0x2c62 <st_go_home+0x5e>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    2c6c:	48 9b       	sbis	0x09, 0	; 9
    2c6e:	15 c0       	rjmp	.+42     	; 0x2c9a <st_go_home+0x96>
		// no longer homed
		gHomed = FALSE;
    2c70:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("yLimit1\r\n"));
    2c74:	86 ec       	ldi	r24, 0xC6	; 198
    2c76:	94 e0       	ldi	r25, 0x04	; 4
    2c78:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    2c7c:	88 ee       	ldi	r24, 0xE8	; 232
    2c7e:	93 e0       	ldi	r25, 0x03	; 3
    2c80:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <moveBack>
    2c84:	88 23       	and	r24, r24
    2c86:	69 f1       	breq	.+90     	; 0x2ce2 <st_go_home+0xde>
			return;
    2c88:	80 ed       	ldi	r24, 0xD0	; 208
    2c8a:	97 e0       	ldi	r25, 0x07	; 7
    2c8c:	20 e9       	ldi	r18, 0x90	; 144
    2c8e:	31 e0       	ldi	r19, 0x01	; 1
    2c90:	f9 01       	movw	r30, r18
    2c92:	31 97       	sbiw	r30, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <st_go_home+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c98:	d9 f7       	brne	.-10     	; 0x2c90 <st_go_home+0x8c>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    2c9a:	04 99       	sbic	0x00, 4	; 0
    2c9c:	07 c0       	rjmp	.+14     	; 0x2cac <st_go_home+0xa8>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	0e 94 57 15 	call	0x2aae	; 0x2aae <moveLeft>
    2ca6:	88 23       	and	r24, r24
    2ca8:	c1 f7       	brne	.-16     	; 0x2c9a <st_go_home+0x96>
    2caa:	11 c0       	rjmp	.+34     	; 0x2cce <st_go_home+0xca>
    2cac:	80 ed       	ldi	r24, 0xD0	; 208
    2cae:	97 e0       	ldi	r25, 0x07	; 7
    2cb0:	20 e9       	ldi	r18, 0x90	; 144
    2cb2:	31 e0       	ldi	r19, 0x01	; 1
    2cb4:	f9 01       	movw	r30, r18
    2cb6:	31 97       	sbiw	r30, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <st_go_home+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbc:	d9 f7       	brne	.-10     	; 0x2cb4 <st_go_home+0xb0>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    2cbe:	90 99       	sbic	0x12, 0	; 18
    2cc0:	06 c0       	rjmp	.+12     	; 0x2cce <st_go_home+0xca>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 98 15 	call	0x2b30	; 0x2b30 <moveForward>
    2cca:	88 23       	and	r24, r24
    2ccc:	c1 f7       	brne	.-16     	; 0x2cbe <st_go_home+0xba>

error:;



	sei();
    2cce:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    2cd0:	89 b1       	in	r24, 0x09	; 9
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	8f 70       	andi	r24, 0x0F	; 15
    2cd6:	90 70       	andi	r25, 0x00	; 0
    2cd8:	89 2b       	or	r24, r25
    2cda:	19 f4       	brne	.+6      	; 0x2ce2 <st_go_home+0xde>
		gHomed = TRUE ;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	80 93 4a 05 	sts	0x054A, r24
    2ce2:	08 95       	ret

00002ce4 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    2ce4:	07 c0       	rjmp	.+14     	; 0x2cf4 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    2ce6:	83 b7       	in	r24, 0x33	; 51
    2ce8:	81 60       	ori	r24, 0x01	; 1
    2cea:	83 bf       	out	0x33, r24	; 51
    2cec:	88 95       	sleep
    2cee:	83 b7       	in	r24, 0x33	; 51
    2cf0:	8e 7f       	andi	r24, 0xFE	; 254
    2cf2:	83 bf       	out	0x33, r24	; 51
    2cf4:	0e 94 3c 09 	call	0x1278	; 0x1278 <plan_get_current_block>
    2cf8:	89 2b       	or	r24, r25
    2cfa:	a9 f7       	brne	.-22     	; 0x2ce6 <st_synchronize+0x2>
}
    2cfc:	08 95       	ret

00002cfe <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    2cfe:	1f 92       	push	r1
    2d00:	0f 92       	push	r0
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	0f 92       	push	r0
    2d06:	0b b6       	in	r0, 0x3b	; 59
    2d08:	0f 92       	push	r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	2f 93       	push	r18
    2d16:	3f 93       	push	r19
    2d18:	4f 93       	push	r20
    2d1a:	5f 93       	push	r21
    2d1c:	6f 93       	push	r22
    2d1e:	7f 93       	push	r23
    2d20:	8f 93       	push	r24
    2d22:	9f 93       	push	r25
    2d24:	af 93       	push	r26
    2d26:	bf 93       	push	r27
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	ef 93       	push	r30
    2d2e:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE ) 
    2d30:	80 91 4a 05 	lds	r24, 0x054A
    2d34:	88 23       	and	r24, r24
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <__vector_17+0x3c>
    2d38:	71 c2       	rjmp	.+1250   	; 0x321c <__vector_17+0x51e>
		return;

// don't move if the head is down  
  if( is_head_down() )
    2d3a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <is_head_down>
    2d3e:	88 23       	and	r24, r24
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <__vector_17+0x46>
    2d42:	6c c2       	rjmp	.+1240   	; 0x321c <__vector_17+0x51e>
  	return;

  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    2d44:	80 91 62 05 	lds	r24, 0x0562
    2d48:	90 91 63 05 	lds	r25, 0x0563
    2d4c:	89 2b       	or	r24, r25
    2d4e:	09 f0       	breq	.+2      	; 0x2d52 <__vector_17+0x54>
    2d50:	65 c2       	rjmp	.+1226   	; 0x321c <__vector_17+0x51e>

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    2d52:	89 b1       	in	r24, 0x09	; 9
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	8f 70       	andi	r24, 0x0F	; 15
    2d58:	90 70       	andi	r25, 0x00	; 0
    2d5a:	89 2b       	or	r24, r25
    2d5c:	19 f0       	breq	.+6      	; 0x2d64 <__vector_17+0x66>
  	gHomed = FALSE ;
    2d5e:	10 92 4a 05 	sts	0x054A, r1
    2d62:	5c c2       	rjmp	.+1208   	; 0x321c <__vector_17+0x51e>
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    2d64:	91 b3       	in	r25, 0x11	; 17
    2d66:	80 91 9a 06 	lds	r24, 0x069A
    2d6a:	8a 7c       	andi	r24, 0xCA	; 202
    2d6c:	95 73       	andi	r25, 0x35	; 53
    2d6e:	89 2b       	or	r24, r25
    2d70:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    2d72:	81 b3       	in	r24, 0x11	; 17
    2d74:	8a 7c       	andi	r24, 0xCA	; 202
    2d76:	90 91 4d 05 	lds	r25, 0x054D
    2d7a:	89 2b       	or	r24, r25
    2d7c:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    2d7e:	80 91 85 06 	lds	r24, 0x0685
    2d82:	88 0f       	add	r24, r24
    2d84:	84 50       	subi	r24, 0x04	; 4
    2d86:	81 95       	neg	r24
    2d88:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    2d8c:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	90 93 63 05 	sts	0x0563, r25
    2d96:	80 93 62 05 	sts	0x0562, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    2d9a:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    2d9c:	80 91 4b 05 	lds	r24, 0x054B
    2da0:	90 91 4c 05 	lds	r25, 0x054C
    2da4:	89 2b       	or	r24, r25
    2da6:	09 f0       	breq	.+2      	; 0x2daa <__vector_17+0xac>
    2da8:	5d c0       	rjmp	.+186    	; 0x2e64 <__vector_17+0x166>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    2daa:	0e 94 3c 09 	call	0x1278	; 0x1278 <plan_get_current_block>
    2dae:	ec 01       	movw	r28, r24
    2db0:	90 93 4c 05 	sts	0x054C, r25
    2db4:	80 93 4b 05 	sts	0x054B, r24
    if (current_block != NULL) {
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	09 f4       	brne	.+2      	; 0x2dbe <__vector_17+0xc0>
    2dbc:	4e c0       	rjmp	.+156    	; 0x2e5a <__vector_17+0x15c>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    2dbe:	6d a9       	ldd	r22, Y+53	; 0x35
    2dc0:	7e a9       	ldd	r23, Y+54	; 0x36
    2dc2:	8f a9       	ldd	r24, Y+55	; 0x37
    2dc4:	98 ad       	ldd	r25, Y+56	; 0x38
    2dc6:	60 93 6c 05 	sts	0x056C, r22
    2dca:	70 93 6d 05 	sts	0x056D, r23
    2dce:	80 93 6e 05 	sts	0x056E, r24
    2dd2:	90 93 6f 05 	sts	0x056F, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    2dd6:	10 92 68 05 	sts	0x0568, r1
    2dda:	10 92 69 05 	sts	0x0569, r1
    2dde:	10 92 6a 05 	sts	0x056A, r1
    2de2:	10 92 6b 05 	sts	0x056B, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    2de6:	0e 94 f6 14 	call	0x29ec	; 0x29ec <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    2dea:	89 89       	ldd	r24, Y+17	; 0x11
    2dec:	9a 89       	ldd	r25, Y+18	; 0x12
    2dee:	ab 89       	ldd	r26, Y+19	; 0x13
    2df0:	bc 89       	ldd	r27, Y+20	; 0x14
    2df2:	b5 95       	asr	r27
    2df4:	a7 95       	ror	r26
    2df6:	97 95       	ror	r25
    2df8:	87 95       	ror	r24
    2dfa:	b0 95       	com	r27
    2dfc:	a0 95       	com	r26
    2dfe:	90 95       	com	r25
    2e00:	81 95       	neg	r24
    2e02:	9f 4f       	sbci	r25, 0xFF	; 255
    2e04:	af 4f       	sbci	r26, 0xFF	; 255
    2e06:	bf 4f       	sbci	r27, 0xFF	; 255
    2e08:	80 93 4e 05 	sts	0x054E, r24
    2e0c:	90 93 4f 05 	sts	0x054F, r25
    2e10:	a0 93 50 05 	sts	0x0550, r26
    2e14:	b0 93 51 05 	sts	0x0551, r27
      counter_y = counter_x;
    2e18:	80 93 52 05 	sts	0x0552, r24
    2e1c:	90 93 53 05 	sts	0x0553, r25
    2e20:	a0 93 54 05 	sts	0x0554, r26
    2e24:	b0 93 55 05 	sts	0x0555, r27
      counter_z = counter_x;
    2e28:	80 93 56 05 	sts	0x0556, r24
    2e2c:	90 93 57 05 	sts	0x0557, r25
    2e30:	a0 93 58 05 	sts	0x0558, r26
    2e34:	b0 93 59 05 	sts	0x0559, r27
      counter_c = counter_x;
    2e38:	80 93 5a 05 	sts	0x055A, r24
    2e3c:	90 93 5b 05 	sts	0x055B, r25
    2e40:	a0 93 5c 05 	sts	0x055C, r26
    2e44:	b0 93 5d 05 	sts	0x055D, r27
      step_events_completed = 0;
    2e48:	10 92 5e 05 	sts	0x055E, r1
    2e4c:	10 92 5f 05 	sts	0x055F, r1
    2e50:	10 92 60 05 	sts	0x0560, r1
    2e54:	10 92 61 05 	sts	0x0561, r1
    2e58:	05 c0       	rjmp	.+10     	; 0x2e64 <__vector_17+0x166>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    2e5a:	80 91 6f 00 	lds	r24, 0x006F
    2e5e:	8d 7f       	andi	r24, 0xFD	; 253
    2e60:	80 93 6f 00 	sts	0x006F, r24
    }    
  } 

  if (current_block != NULL) {
    2e64:	e0 91 4b 05 	lds	r30, 0x054B
    2e68:	f0 91 4c 05 	lds	r31, 0x054C
    2e6c:	30 97       	sbiw	r30, 0x00	; 0
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <__vector_17+0x174>
    2e70:	ee c0       	rjmp	.+476    	; 0x304e <__vector_17+0x350>
    dir_bits = current_block->direction_bits;
    2e72:	80 89       	ldd	r24, Z+16	; 0x10
    2e74:	80 93 9a 06 	sts	0x069A, r24
    out_bits = 0;
    2e78:	10 92 4d 05 	sts	0x054D, r1
    counter_x += current_block->steps_x;
    2e7c:	20 91 4e 05 	lds	r18, 0x054E
    2e80:	30 91 4f 05 	lds	r19, 0x054F
    2e84:	40 91 50 05 	lds	r20, 0x0550
    2e88:	50 91 51 05 	lds	r21, 0x0551
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	a2 81       	ldd	r26, Z+2	; 0x02
    2e92:	b3 81       	ldd	r27, Z+3	; 0x03
    2e94:	28 0f       	add	r18, r24
    2e96:	39 1f       	adc	r19, r25
    2e98:	4a 1f       	adc	r20, r26
    2e9a:	5b 1f       	adc	r21, r27
    2e9c:	20 93 4e 05 	sts	0x054E, r18
    2ea0:	30 93 4f 05 	sts	0x054F, r19
    2ea4:	40 93 50 05 	sts	0x0550, r20
    2ea8:	50 93 51 05 	sts	0x0551, r21
    if (counter_x > 0) {
    2eac:	12 16       	cp	r1, r18
    2eae:	13 06       	cpc	r1, r19
    2eb0:	14 06       	cpc	r1, r20
    2eb2:	15 06       	cpc	r1, r21
    2eb4:	9c f4       	brge	.+38     	; 0x2edc <__vector_17+0x1de>
      out_bits |= (1<<X_STEP_BIT);
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	80 93 4d 05 	sts	0x054D, r24
      counter_x -= current_block->step_event_count;
    2ebc:	81 89       	ldd	r24, Z+17	; 0x11
    2ebe:	92 89       	ldd	r25, Z+18	; 0x12
    2ec0:	a3 89       	ldd	r26, Z+19	; 0x13
    2ec2:	b4 89       	ldd	r27, Z+20	; 0x14
    2ec4:	28 1b       	sub	r18, r24
    2ec6:	39 0b       	sbc	r19, r25
    2ec8:	4a 0b       	sbc	r20, r26
    2eca:	5b 0b       	sbc	r21, r27
    2ecc:	20 93 4e 05 	sts	0x054E, r18
    2ed0:	30 93 4f 05 	sts	0x054F, r19
    2ed4:	40 93 50 05 	sts	0x0550, r20
    2ed8:	50 93 51 05 	sts	0x0551, r21
    }
    counter_y += current_block->steps_y;
    2edc:	20 91 52 05 	lds	r18, 0x0552
    2ee0:	30 91 53 05 	lds	r19, 0x0553
    2ee4:	40 91 54 05 	lds	r20, 0x0554
    2ee8:	50 91 55 05 	lds	r21, 0x0555
    2eec:	84 81       	ldd	r24, Z+4	; 0x04
    2eee:	95 81       	ldd	r25, Z+5	; 0x05
    2ef0:	a6 81       	ldd	r26, Z+6	; 0x06
    2ef2:	b7 81       	ldd	r27, Z+7	; 0x07
    2ef4:	28 0f       	add	r18, r24
    2ef6:	39 1f       	adc	r19, r25
    2ef8:	4a 1f       	adc	r20, r26
    2efa:	5b 1f       	adc	r21, r27
    2efc:	20 93 52 05 	sts	0x0552, r18
    2f00:	30 93 53 05 	sts	0x0553, r19
    2f04:	40 93 54 05 	sts	0x0554, r20
    2f08:	50 93 55 05 	sts	0x0555, r21
    if (counter_y > 0) {
    2f0c:	12 16       	cp	r1, r18
    2f0e:	13 06       	cpc	r1, r19
    2f10:	14 06       	cpc	r1, r20
    2f12:	15 06       	cpc	r1, r21
    2f14:	ac f4       	brge	.+42     	; 0x2f40 <__vector_17+0x242>
      out_bits |= (1<<Y_STEP_BIT);
    2f16:	80 91 4d 05 	lds	r24, 0x054D
    2f1a:	84 60       	ori	r24, 0x04	; 4
    2f1c:	80 93 4d 05 	sts	0x054D, r24
      counter_y -= current_block->step_event_count;
    2f20:	81 89       	ldd	r24, Z+17	; 0x11
    2f22:	92 89       	ldd	r25, Z+18	; 0x12
    2f24:	a3 89       	ldd	r26, Z+19	; 0x13
    2f26:	b4 89       	ldd	r27, Z+20	; 0x14
    2f28:	28 1b       	sub	r18, r24
    2f2a:	39 0b       	sbc	r19, r25
    2f2c:	4a 0b       	sbc	r20, r26
    2f2e:	5b 0b       	sbc	r21, r27
    2f30:	20 93 52 05 	sts	0x0552, r18
    2f34:	30 93 53 05 	sts	0x0553, r19
    2f38:	40 93 54 05 	sts	0x0554, r20
    2f3c:	50 93 55 05 	sts	0x0555, r21
    }
    counter_z += current_block->steps_z;
    2f40:	20 91 56 05 	lds	r18, 0x0556
    2f44:	30 91 57 05 	lds	r19, 0x0557
    2f48:	40 91 58 05 	lds	r20, 0x0558
    2f4c:	50 91 59 05 	lds	r21, 0x0559
    2f50:	80 85       	ldd	r24, Z+8	; 0x08
    2f52:	91 85       	ldd	r25, Z+9	; 0x09
    2f54:	a2 85       	ldd	r26, Z+10	; 0x0a
    2f56:	b3 85       	ldd	r27, Z+11	; 0x0b
    2f58:	28 0f       	add	r18, r24
    2f5a:	39 1f       	adc	r19, r25
    2f5c:	4a 1f       	adc	r20, r26
    2f5e:	5b 1f       	adc	r21, r27
    2f60:	20 93 56 05 	sts	0x0556, r18
    2f64:	30 93 57 05 	sts	0x0557, r19
    2f68:	40 93 58 05 	sts	0x0558, r20
    2f6c:	50 93 59 05 	sts	0x0559, r21
    if (counter_z > 0) {
    2f70:	12 16       	cp	r1, r18
    2f72:	13 06       	cpc	r1, r19
    2f74:	14 06       	cpc	r1, r20
    2f76:	15 06       	cpc	r1, r21
    2f78:	ac f4       	brge	.+42     	; 0x2fa4 <__vector_17+0x2a6>
      out_bits |= (1<<Z_STEP_BIT);
    2f7a:	80 91 4d 05 	lds	r24, 0x054D
    2f7e:	80 61       	ori	r24, 0x10	; 16
    2f80:	80 93 4d 05 	sts	0x054D, r24
      counter_z -= current_block->step_event_count;
    2f84:	81 89       	ldd	r24, Z+17	; 0x11
    2f86:	92 89       	ldd	r25, Z+18	; 0x12
    2f88:	a3 89       	ldd	r26, Z+19	; 0x13
    2f8a:	b4 89       	ldd	r27, Z+20	; 0x14
    2f8c:	28 1b       	sub	r18, r24
    2f8e:	39 0b       	sbc	r19, r25
    2f90:	4a 0b       	sbc	r20, r26
    2f92:	5b 0b       	sbc	r21, r27
    2f94:	20 93 56 05 	sts	0x0556, r18
    2f98:	30 93 57 05 	sts	0x0557, r19
    2f9c:	40 93 58 05 	sts	0x0558, r20
    2fa0:	50 93 59 05 	sts	0x0559, r21
    }
    counter_c += current_block->steps_c;
    2fa4:	20 91 5a 05 	lds	r18, 0x055A
    2fa8:	30 91 5b 05 	lds	r19, 0x055B
    2fac:	40 91 5c 05 	lds	r20, 0x055C
    2fb0:	50 91 5d 05 	lds	r21, 0x055D
    2fb4:	84 85       	ldd	r24, Z+12	; 0x0c
    2fb6:	95 85       	ldd	r25, Z+13	; 0x0d
    2fb8:	a6 85       	ldd	r26, Z+14	; 0x0e
    2fba:	b7 85       	ldd	r27, Z+15	; 0x0f
    2fbc:	28 0f       	add	r18, r24
    2fbe:	39 1f       	adc	r19, r25
    2fc0:	4a 1f       	adc	r20, r26
    2fc2:	5b 1f       	adc	r21, r27
    2fc4:	20 93 5a 05 	sts	0x055A, r18
    2fc8:	30 93 5b 05 	sts	0x055B, r19
    2fcc:	40 93 5c 05 	sts	0x055C, r20
    2fd0:	50 93 5d 05 	sts	0x055D, r21
    if (counter_c > 0) {
    2fd4:	12 16       	cp	r1, r18
    2fd6:	13 06       	cpc	r1, r19
    2fd8:	14 06       	cpc	r1, r20
    2fda:	15 06       	cpc	r1, r21
    2fdc:	ac f4       	brge	.+42     	; 0x3008 <__vector_17+0x30a>
      out_bits |= (1<<C_STEP_BIT);
    2fde:	80 91 4d 05 	lds	r24, 0x054D
    2fe2:	80 62       	ori	r24, 0x20	; 32
    2fe4:	80 93 4d 05 	sts	0x054D, r24
      counter_c -= current_block->step_event_count;
    2fe8:	81 89       	ldd	r24, Z+17	; 0x11
    2fea:	92 89       	ldd	r25, Z+18	; 0x12
    2fec:	a3 89       	ldd	r26, Z+19	; 0x13
    2fee:	b4 89       	ldd	r27, Z+20	; 0x14
    2ff0:	28 1b       	sub	r18, r24
    2ff2:	39 0b       	sbc	r19, r25
    2ff4:	4a 0b       	sbc	r20, r26
    2ff6:	5b 0b       	sbc	r21, r27
    2ff8:	20 93 5a 05 	sts	0x055A, r18
    2ffc:	30 93 5b 05 	sts	0x055B, r19
    3000:	40 93 5c 05 	sts	0x055C, r20
    3004:	50 93 5d 05 	sts	0x055D, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3008:	80 91 5e 05 	lds	r24, 0x055E
    300c:	90 91 5f 05 	lds	r25, 0x055F
    3010:	a0 91 60 05 	lds	r26, 0x0560
    3014:	b0 91 61 05 	lds	r27, 0x0561
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	a1 1d       	adc	r26, r1
    301c:	b1 1d       	adc	r27, r1
    301e:	80 93 5e 05 	sts	0x055E, r24
    3022:	90 93 5f 05 	sts	0x055F, r25
    3026:	a0 93 60 05 	sts	0x0560, r26
    302a:	b0 93 61 05 	sts	0x0561, r27
    if (step_events_completed >= current_block->step_event_count) {
    302e:	21 89       	ldd	r18, Z+17	; 0x11
    3030:	32 89       	ldd	r19, Z+18	; 0x12
    3032:	43 89       	ldd	r20, Z+19	; 0x13
    3034:	54 89       	ldd	r21, Z+20	; 0x14
    3036:	82 17       	cp	r24, r18
    3038:	93 07       	cpc	r25, r19
    303a:	a4 07       	cpc	r26, r20
    303c:	b5 07       	cpc	r27, r21
    303e:	48 f0       	brcs	.+18     	; 0x3052 <__vector_17+0x354>
      current_block = NULL;
    3040:	10 92 4c 05 	sts	0x054C, r1
    3044:	10 92 4b 05 	sts	0x054B, r1
      plan_discard_current_block();
    3048:	0e 94 23 09 	call	0x1246	; 0x1246 <plan_discard_current_block>
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <__vector_17+0x354>
    }
  } else {
    out_bits = 0;
    304e:	10 92 4d 05 	sts	0x054D, r1
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    3052:	80 91 9a 06 	lds	r24, 0x069A
    3056:	9a e0       	ldi	r25, 0x0A	; 10
    3058:	89 27       	eor	r24, r25
    305a:	80 93 9a 06 	sts	0x069A, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    305e:	20 91 64 05 	lds	r18, 0x0564
    3062:	30 91 65 05 	lds	r19, 0x0565
    3066:	40 91 66 05 	lds	r20, 0x0566
    306a:	50 91 67 05 	lds	r21, 0x0567
    306e:	80 91 68 05 	lds	r24, 0x0568
    3072:	90 91 69 05 	lds	r25, 0x0569
    3076:	a0 91 6a 05 	lds	r26, 0x056A
    307a:	b0 91 6b 05 	lds	r27, 0x056B
    307e:	28 0f       	add	r18, r24
    3080:	39 1f       	adc	r19, r25
    3082:	4a 1f       	adc	r20, r26
    3084:	5b 1f       	adc	r21, r27
    3086:	20 93 68 05 	sts	0x0568, r18
    308a:	30 93 69 05 	sts	0x0569, r19
    308e:	40 93 6a 05 	sts	0x056A, r20
    3092:	50 93 6b 05 	sts	0x056B, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    3096:	21 38       	cpi	r18, 0x81	; 129
    3098:	8a e1       	ldi	r24, 0x1A	; 26
    309a:	38 07       	cpc	r19, r24
    309c:	86 e0       	ldi	r24, 0x06	; 6
    309e:	48 07       	cpc	r20, r24
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	58 07       	cpc	r21, r24
    30a4:	08 f4       	brcc	.+2      	; 0x30a8 <__vector_17+0x3aa>
    30a6:	b6 c0       	rjmp	.+364    	; 0x3214 <__vector_17+0x516>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    30a8:	20 58       	subi	r18, 0x80	; 128
    30aa:	3a 41       	sbci	r19, 0x1A	; 26
    30ac:	46 40       	sbci	r20, 0x06	; 6
    30ae:	50 40       	sbci	r21, 0x00	; 0
    30b0:	20 93 68 05 	sts	0x0568, r18
    30b4:	30 93 69 05 	sts	0x0569, r19
    30b8:	40 93 6a 05 	sts	0x056A, r20
    30bc:	50 93 6b 05 	sts	0x056B, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    30c0:	e0 91 4b 05 	lds	r30, 0x054B
    30c4:	f0 91 4c 05 	lds	r31, 0x054C
    30c8:	30 97       	sbiw	r30, 0x00	; 0
    30ca:	09 f4       	brne	.+2      	; 0x30ce <__vector_17+0x3d0>
    30cc:	a3 c0       	rjmp	.+326    	; 0x3214 <__vector_17+0x516>
    if (step_events_completed < current_block->accelerate_until) {
    30ce:	e0 90 5e 05 	lds	r14, 0x055E
    30d2:	f0 90 5f 05 	lds	r15, 0x055F
    30d6:	00 91 60 05 	lds	r16, 0x0560
    30da:	10 91 61 05 	lds	r17, 0x0561
    30de:	ef 5b       	subi	r30, 0xBF	; 191
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 81       	ld	r24, Z
    30e4:	91 81       	ldd	r25, Z+1	; 0x01
    30e6:	a2 81       	ldd	r26, Z+2	; 0x02
    30e8:	b3 81       	ldd	r27, Z+3	; 0x03
    30ea:	e1 54       	subi	r30, 0x41	; 65
    30ec:	f0 40       	sbci	r31, 0x00	; 0
    30ee:	e8 16       	cp	r14, r24
    30f0:	f9 06       	cpc	r15, r25
    30f2:	0a 07       	cpc	r16, r26
    30f4:	1b 07       	cpc	r17, r27
    30f6:	68 f5       	brcc	.+90     	; 0x3152 <__vector_17+0x454>
      trapezoid_adjusted_rate += current_block->rate_delta;
    30f8:	fd 96       	adiw	r30, 0x3d	; 61
    30fa:	20 81       	ld	r18, Z
    30fc:	31 81       	ldd	r19, Z+1	; 0x01
    30fe:	42 81       	ldd	r20, Z+2	; 0x02
    3100:	53 81       	ldd	r21, Z+3	; 0x03
    3102:	fd 97       	sbiw	r30, 0x3d	; 61
    3104:	80 91 6c 05 	lds	r24, 0x056C
    3108:	90 91 6d 05 	lds	r25, 0x056D
    310c:	a0 91 6e 05 	lds	r26, 0x056E
    3110:	b0 91 6f 05 	lds	r27, 0x056F
    3114:	28 0f       	add	r18, r24
    3116:	39 1f       	adc	r19, r25
    3118:	4a 1f       	adc	r20, r26
    311a:	5b 1f       	adc	r21, r27
    311c:	20 93 6c 05 	sts	0x056C, r18
    3120:	30 93 6d 05 	sts	0x056D, r19
    3124:	40 93 6e 05 	sts	0x056E, r20
    3128:	50 93 6f 05 	sts	0x056F, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    312c:	85 89       	ldd	r24, Z+21	; 0x15
    312e:	96 89       	ldd	r25, Z+22	; 0x16
    3130:	a7 89       	ldd	r26, Z+23	; 0x17
    3132:	b0 8d       	ldd	r27, Z+24	; 0x18
    3134:	82 17       	cp	r24, r18
    3136:	93 07       	cpc	r25, r19
    3138:	a4 07       	cpc	r26, r20
    313a:	b5 07       	cpc	r27, r21
    313c:	08 f0       	brcs	.+2      	; 0x3140 <__vector_17+0x442>
    313e:	4e c0       	rjmp	.+156    	; 0x31dc <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3140:	80 93 6c 05 	sts	0x056C, r24
    3144:	90 93 6d 05 	sts	0x056D, r25
    3148:	a0 93 6e 05 	sts	0x056E, r26
    314c:	b0 93 6f 05 	sts	0x056F, r27
    3150:	45 c0       	rjmp	.+138    	; 0x31dc <__vector_17+0x4de>
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3152:	eb 5b       	subi	r30, 0xBB	; 187
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	a2 81       	ldd	r26, Z+2	; 0x02
    315c:	b3 81       	ldd	r27, Z+3	; 0x03
    315e:	e5 54       	subi	r30, 0x45	; 69
    3160:	f0 40       	sbci	r31, 0x00	; 0
    3162:	20 91 6c 05 	lds	r18, 0x056C
    3166:	30 91 6d 05 	lds	r19, 0x056D
    316a:	40 91 6e 05 	lds	r20, 0x056E
    316e:	50 91 6f 05 	lds	r21, 0x056F
    3172:	8e 15       	cp	r24, r14
    3174:	9f 05       	cpc	r25, r15
    3176:	a0 07       	cpc	r26, r16
    3178:	b1 07       	cpc	r27, r17
    317a:	c8 f5       	brcc	.+114    	; 0x31ee <__vector_17+0x4f0>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    317c:	fd 96       	adiw	r30, 0x3d	; 61
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	a2 81       	ldd	r26, Z+2	; 0x02
    3184:	b3 81       	ldd	r27, Z+3	; 0x03
    3186:	fd 97       	sbiw	r30, 0x3d	; 61
    3188:	82 17       	cp	r24, r18
    318a:	93 07       	cpc	r25, r19
    318c:	a4 07       	cpc	r26, r20
    318e:	b5 07       	cpc	r27, r21
    3190:	60 f4       	brcc	.+24     	; 0x31aa <__vector_17+0x4ac>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3192:	28 1b       	sub	r18, r24
    3194:	39 0b       	sbc	r19, r25
    3196:	4a 0b       	sbc	r20, r26
    3198:	5b 0b       	sbc	r21, r27
    319a:	20 93 6c 05 	sts	0x056C, r18
    319e:	30 93 6d 05 	sts	0x056D, r19
    31a2:	40 93 6e 05 	sts	0x056E, r20
    31a6:	50 93 6f 05 	sts	0x056F, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    31aa:	21 ad       	ldd	r18, Z+57	; 0x39
    31ac:	32 ad       	ldd	r19, Z+58	; 0x3a
    31ae:	43 ad       	ldd	r20, Z+59	; 0x3b
    31b0:	54 ad       	ldd	r21, Z+60	; 0x3c
    31b2:	80 91 6c 05 	lds	r24, 0x056C
    31b6:	90 91 6d 05 	lds	r25, 0x056D
    31ba:	a0 91 6e 05 	lds	r26, 0x056E
    31be:	b0 91 6f 05 	lds	r27, 0x056F
    31c2:	82 17       	cp	r24, r18
    31c4:	93 07       	cpc	r25, r19
    31c6:	a4 07       	cpc	r26, r20
    31c8:	b5 07       	cpc	r27, r21
    31ca:	40 f4       	brcc	.+16     	; 0x31dc <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->final_rate;
    31cc:	20 93 6c 05 	sts	0x056C, r18
    31d0:	30 93 6d 05 	sts	0x056D, r19
    31d4:	40 93 6e 05 	sts	0x056E, r20
    31d8:	50 93 6f 05 	sts	0x056F, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    31dc:	60 91 6c 05 	lds	r22, 0x056C
    31e0:	70 91 6d 05 	lds	r23, 0x056D
    31e4:	80 91 6e 05 	lds	r24, 0x056E
    31e8:	90 91 6f 05 	lds	r25, 0x056F
    31ec:	11 c0       	rjmp	.+34     	; 0x3210 <__vector_17+0x512>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    31ee:	65 89       	ldd	r22, Z+21	; 0x15
    31f0:	76 89       	ldd	r23, Z+22	; 0x16
    31f2:	87 89       	ldd	r24, Z+23	; 0x17
    31f4:	90 8d       	ldd	r25, Z+24	; 0x18
    31f6:	26 17       	cp	r18, r22
    31f8:	37 07       	cpc	r19, r23
    31fa:	48 07       	cpc	r20, r24
    31fc:	59 07       	cpc	r21, r25
    31fe:	51 f0       	breq	.+20     	; 0x3214 <__vector_17+0x516>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3200:	60 93 6c 05 	sts	0x056C, r22
    3204:	70 93 6d 05 	sts	0x056D, r23
    3208:	80 93 6e 05 	sts	0x056E, r24
    320c:	90 93 6f 05 	sts	0x056F, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3210:	0e 94 f6 14 	call	0x29ec	; 0x29ec <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    3214:	10 92 63 05 	sts	0x0563, r1
    3218:	10 92 62 05 	sts	0x0562, r1
}
    321c:	ff 91       	pop	r31
    321e:	ef 91       	pop	r30
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	bf 91       	pop	r27
    3226:	af 91       	pop	r26
    3228:	9f 91       	pop	r25
    322a:	8f 91       	pop	r24
    322c:	7f 91       	pop	r23
    322e:	6f 91       	pop	r22
    3230:	5f 91       	pop	r21
    3232:	4f 91       	pop	r20
    3234:	3f 91       	pop	r19
    3236:	2f 91       	pop	r18
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	ff 90       	pop	r15
    323e:	ef 90       	pop	r14
    3240:	0f 90       	pop	r0
    3242:	0b be       	out	0x3b, r0	; 59
    3244:	0f 90       	pop	r0
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	0f 90       	pop	r0
    324a:	1f 90       	pop	r1
    324c:	18 95       	reti

0000324e <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    324e:	ef 92       	push	r14
    3250:	ff 92       	push	r15
    3252:	0f 93       	push	r16
    3254:	1f 93       	push	r17
    3256:	7b 01       	movw	r14, r22
    3258:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    325a:	22 e0       	ldi	r18, 0x02	; 2
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	50 e0       	ldi	r21, 0x00	; 0
    3262:	0e 94 cc 20 	call	0x4198	; 0x4198 <__divmodsi4>
    3266:	20 5c       	subi	r18, 0xC0	; 192
    3268:	3d 4b       	sbci	r19, 0xBD	; 189
    326a:	40 4f       	sbci	r20, 0xF0	; 240
    326c:	5f 4f       	sbci	r21, 0xFF	; 255
    326e:	ca 01       	movw	r24, r20
    3270:	b9 01       	movw	r22, r18
    3272:	a8 01       	movw	r20, r16
    3274:	97 01       	movw	r18, r14
    3276:	0e 94 aa 20 	call	0x4154	; 0x4154 <__udivmodsi4>
    327a:	c9 01       	movw	r24, r18
    327c:	da 01       	movw	r26, r20
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	a1 09       	sbc	r26, r1
    3282:	b1 09       	sbc	r27, r1
    3284:	29 2f       	mov	r18, r25
    3286:	3a 2f       	mov	r19, r26
    3288:	4b 2f       	mov	r20, r27
    328a:	55 27       	eor	r21, r21
    328c:	01 96       	adiw	r24, 0x01	; 1
    328e:	a1 1d       	adc	r26, r1
    3290:	b1 1d       	adc	r27, r1
    3292:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3296:	81 50       	subi	r24, 0x01	; 1
    3298:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    329c:	e0 ec       	ldi	r30, 0xC0	; 192
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	8d 7f       	andi	r24, 0xFD	; 253
    32a4:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    32a6:	e1 ec       	ldi	r30, 0xC1	; 193
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	80 61       	ori	r24, 0x10	; 16
    32ae:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    32b0:	80 81       	ld	r24, Z
    32b2:	88 60       	ori	r24, 0x08	; 8
    32b4:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    32b6:	80 81       	ld	r24, Z
    32b8:	80 68       	ori	r24, 0x80	; 128
    32ba:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    32bc:	1f 91       	pop	r17
    32be:	0f 91       	pop	r16
    32c0:	ff 90       	pop	r15
    32c2:	ef 90       	pop	r14
    32c4:	08 95       	ret

000032c6 <serialWrite>:

void serialWrite(unsigned char c)
{
    32c6:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    32c8:	80 91 c0 00 	lds	r24, 0x00C0
    32cc:	85 ff       	sbrs	r24, 5
    32ce:	fc cf       	rjmp	.-8      	; 0x32c8 <serialWrite+0x2>
		;
	UDR0 = c;
    32d0:	90 93 c6 00 	sts	0x00C6, r25
}
    32d4:	08 95       	ret

000032d6 <serialAvailable>:

int serialAvailable()
{
    32d6:	80 91 70 05 	lds	r24, 0x0570
    32da:	90 91 71 05 	lds	r25, 0x0571
    32de:	80 50       	subi	r24, 0x00	; 0
    32e0:	9f 4f       	sbci	r25, 0xFF	; 255
    32e2:	20 91 72 05 	lds	r18, 0x0572
    32e6:	30 91 73 05 	lds	r19, 0x0573
    32ea:	82 1b       	sub	r24, r18
    32ec:	93 0b       	sbc	r25, r19
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	71 e0       	ldi	r23, 0x01	; 1
    32f2:	0e 94 97 20 	call	0x412e	; 0x412e <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    32f6:	08 95       	ret

000032f8 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    32f8:	40 91 72 05 	lds	r20, 0x0572
    32fc:	50 91 73 05 	lds	r21, 0x0573
    3300:	80 91 70 05 	lds	r24, 0x0570
    3304:	90 91 71 05 	lds	r25, 0x0571
    3308:	84 17       	cp	r24, r20
    330a:	95 07       	cpc	r25, r21
    330c:	19 f4       	brne	.+6      	; 0x3314 <serialRead+0x1c>
    330e:	2f ef       	ldi	r18, 0xFF	; 255
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	0f c0       	rjmp	.+30     	; 0x3332 <serialRead+0x3a>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3314:	fa 01       	movw	r30, r20
    3316:	ec 58       	subi	r30, 0x8C	; 140
    3318:	fa 4f       	sbci	r31, 0xFA	; 250
    331a:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    331c:	ca 01       	movw	r24, r20
    331e:	01 96       	adiw	r24, 0x01	; 1
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	71 e0       	ldi	r23, 0x01	; 1
    3324:	0e 94 97 20 	call	0x412e	; 0x412e <__divmodhi4>
    3328:	90 93 73 05 	sts	0x0573, r25
    332c:	80 93 72 05 	sts	0x0572, r24
		return c;
    3330:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3332:	c9 01       	movw	r24, r18
    3334:	08 95       	ret

00003336 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3336:	80 91 72 05 	lds	r24, 0x0572
    333a:	90 91 73 05 	lds	r25, 0x0573
    333e:	90 93 71 05 	sts	0x0571, r25
    3342:	80 93 70 05 	sts	0x0570, r24
}
    3346:	08 95       	ret

00003348 <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3348:	1f 92       	push	r1
    334a:	0f 92       	push	r0
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	0f 92       	push	r0
    3350:	0b b6       	in	r0, 0x3b	; 59
    3352:	0f 92       	push	r0
    3354:	11 24       	eor	r1, r1
    3356:	2f 93       	push	r18
    3358:	3f 93       	push	r19
    335a:	4f 93       	push	r20
    335c:	5f 93       	push	r21
    335e:	6f 93       	push	r22
    3360:	7f 93       	push	r23
    3362:	8f 93       	push	r24
    3364:	9f 93       	push	r25
    3366:	af 93       	push	r26
    3368:	bf 93       	push	r27
    336a:	ef 93       	push	r30
    336c:	ff 93       	push	r31
	unsigned char c = UDR0;
    336e:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3372:	e0 91 70 05 	lds	r30, 0x0570
    3376:	f0 91 71 05 	lds	r31, 0x0571
    337a:	cf 01       	movw	r24, r30
    337c:	01 96       	adiw	r24, 0x01	; 1
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	71 e0       	ldi	r23, 0x01	; 1
    3382:	0e 94 97 20 	call	0x412e	; 0x412e <__divmodhi4>
    3386:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3388:	80 91 72 05 	lds	r24, 0x0572
    338c:	90 91 73 05 	lds	r25, 0x0573
    3390:	28 17       	cp	r18, r24
    3392:	39 07       	cpc	r19, r25
    3394:	39 f0       	breq	.+14     	; 0x33a4 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3396:	ec 58       	subi	r30, 0x8C	; 140
    3398:	fa 4f       	sbci	r31, 0xFA	; 250
    339a:	40 83       	st	Z, r20
		rx_buffer_head = i;
    339c:	30 93 71 05 	sts	0x0571, r19
    33a0:	20 93 70 05 	sts	0x0570, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    33a4:	ff 91       	pop	r31
    33a6:	ef 91       	pop	r30
    33a8:	bf 91       	pop	r27
    33aa:	af 91       	pop	r26
    33ac:	9f 91       	pop	r25
    33ae:	8f 91       	pop	r24
    33b0:	7f 91       	pop	r23
    33b2:	6f 91       	pop	r22
    33b4:	5f 91       	pop	r21
    33b6:	4f 91       	pop	r20
    33b8:	3f 91       	pop	r19
    33ba:	2f 91       	pop	r18
    33bc:	0f 90       	pop	r0
    33be:	0b be       	out	0x3b, r0	; 59
    33c0:	0f 90       	pop	r0
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	0f 90       	pop	r0
    33c6:	1f 90       	pop	r1
    33c8:	18 95       	reti

000033ca <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    33ca:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    33cc:	80 91 c0 00 	lds	r24, 0x00C0
    33d0:	85 ff       	sbrs	r24, 5
    33d2:	fc cf       	rjmp	.-8      	; 0x33cc <printByte+0x2>
		;
	UDR0 = c;
    33d4:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    33d8:	08 95       	ret

000033da <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    33da:	fc 01       	movw	r30, r24
    33dc:	07 c0       	rjmp	.+14     	; 0x33ec <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    33de:	80 91 c0 00 	lds	r24, 0x00C0
    33e2:	85 ff       	sbrs	r24, 5
    33e4:	fc cf       	rjmp	.-8      	; 0x33de <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
    33e6:	31 96       	adiw	r30, 0x01	; 1

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    33e8:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    33ec:	90 81       	ld	r25, Z
    33ee:	99 23       	and	r25, r25
    33f0:	b1 f7       	brne	.-20     	; 0x33de <printString+0x4>
		printByte(*s++);
}
    33f2:	08 95       	ret

000033f4 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    33f4:	9c 01       	movw	r18, r24
    33f6:	06 c0       	rjmp	.+12     	; 0x3404 <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    33f8:	80 91 c0 00 	lds	r24, 0x00C0
    33fc:	85 ff       	sbrs	r24, 5
    33fe:	fc cf       	rjmp	.-8      	; 0x33f8 <printPgmString+0x4>
		;
	UDR0 = c;
    3400:	90 93 c6 00 	sts	0x00C6, r25
    3404:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3406:	2f 5f       	subi	r18, 0xFF	; 255
    3408:	3f 4f       	sbci	r19, 0xFF	; 255
    340a:	94 91       	lpm	r25, Z+
    340c:	99 23       	and	r25, r25
    340e:	a1 f7       	brne	.-24     	; 0x33f8 <printPgmString+0x4>
		printByte(c);
}
    3410:	08 95       	ret

00003412 <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3412:	2f 92       	push	r2
    3414:	3f 92       	push	r3
    3416:	4f 92       	push	r4
    3418:	5f 92       	push	r5
    341a:	6f 92       	push	r6
    341c:	7f 92       	push	r7
    341e:	8f 92       	push	r8
    3420:	9f 92       	push	r9
    3422:	af 92       	push	r10
    3424:	bf 92       	push	r11
    3426:	cf 92       	push	r12
    3428:	df 92       	push	r13
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	a0 97       	sbiw	r28, 0x20	; 32
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	6b 01       	movw	r12, r22
    3448:	7c 01       	movw	r14, r24
    344a:	29 01       	movw	r4, r18
    344c:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    344e:	61 15       	cp	r22, r1
    3450:	71 05       	cpc	r23, r1
    3452:	81 05       	cpc	r24, r1
    3454:	91 05       	cpc	r25, r1
    3456:	41 f4       	brne	.+16     	; 0x3468 <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3458:	80 91 c0 00 	lds	r24, 0x00C0
    345c:	85 ff       	sbrs	r24, 5
    345e:	fc cf       	rjmp	.-8      	; 0x3458 <printIntegerInBase+0x46>
		;
	UDR0 = c;
    3460:	80 e3       	ldi	r24, 0x30	; 48
    3462:	80 93 c6 00 	sts	0x00C6, r24
    3466:	49 c0       	rjmp	.+146    	; 0x34fa <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
    3468:	88 24       	eor	r8, r8
    346a:	99 24       	eor	r9, r9
    346c:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
    346e:	1e 01       	movw	r2, r28
    3470:	08 94       	sec
    3472:	21 1c       	adc	r2, r1
    3474:	31 1c       	adc	r3, r1
    3476:	81 01       	movw	r16, r2
    3478:	08 0d       	add	r16, r8
    347a:	19 1d       	adc	r17, r9
    347c:	c7 01       	movw	r24, r14
    347e:	b6 01       	movw	r22, r12
    3480:	a3 01       	movw	r20, r6
    3482:	92 01       	movw	r18, r4
    3484:	0e 94 aa 20 	call	0x4154	; 0x4154 <__udivmodsi4>
    3488:	f8 01       	movw	r30, r16
    348a:	60 83       	st	Z, r22
    348c:	08 94       	sec
    348e:	81 1c       	adc	r8, r1
    3490:	91 1c       	adc	r9, r1
    3492:	a1 1c       	adc	r10, r1
    3494:	b1 1c       	adc	r11, r1
		n /= base;
    3496:	c7 01       	movw	r24, r14
    3498:	b6 01       	movw	r22, r12
    349a:	a3 01       	movw	r20, r6
    349c:	92 01       	movw	r18, r4
    349e:	0e 94 aa 20 	call	0x4154	; 0x4154 <__udivmodsi4>
    34a2:	c9 01       	movw	r24, r18
    34a4:	da 01       	movw	r26, r20
    34a6:	6c 01       	movw	r12, r24
    34a8:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    34aa:	c1 14       	cp	r12, r1
    34ac:	d1 04       	cpc	r13, r1
    34ae:	e1 04       	cpc	r14, r1
    34b0:	f1 04       	cpc	r15, r1
    34b2:	09 f7       	brne	.-62     	; 0x3476 <printIntegerInBase+0x64>
    34b4:	91 01       	movw	r18, r2
    34b6:	28 0d       	add	r18, r8
    34b8:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    34ba:	be 01       	movw	r22, r28
    34bc:	6f 5f       	subi	r22, 0xFF	; 255
    34be:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
    34c0:	d5 01       	movw	r26, r10
    34c2:	c4 01       	movw	r24, r8
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	a1 09       	sbc	r26, r1
    34c8:	b1 09       	sbc	r27, r1
    34ca:	ac 01       	movw	r20, r24
    34cc:	48 19       	sub	r20, r8
    34ce:	59 09       	sbc	r21, r9
    34d0:	11 c0       	rjmp	.+34     	; 0x34f4 <printIntegerInBase+0xe2>
    34d2:	fa 01       	movw	r30, r20
    34d4:	e2 0f       	add	r30, r18
    34d6:	f3 1f       	adc	r31, r19
    34d8:	e0 81       	ld	r30, Z
    34da:	ea 30       	cpi	r30, 0x0A	; 10
    34dc:	10 f4       	brcc	.+4      	; 0x34e2 <printIntegerInBase+0xd0>
    34de:	e0 5d       	subi	r30, 0xD0	; 208
    34e0:	01 c0       	rjmp	.+2      	; 0x34e4 <printIntegerInBase+0xd2>
    34e2:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    34e4:	80 91 c0 00 	lds	r24, 0x00C0
    34e8:	85 ff       	sbrs	r24, 5
    34ea:	fc cf       	rjmp	.-8      	; 0x34e4 <printIntegerInBase+0xd2>
		;
	UDR0 = c;
    34ec:	e0 93 c6 00 	sts	0x00C6, r30
    34f0:	21 50       	subi	r18, 0x01	; 1
    34f2:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    34f4:	62 17       	cp	r22, r18
    34f6:	73 07       	cpc	r23, r19
    34f8:	61 f7       	brne	.-40     	; 0x34d2 <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    34fa:	a0 96       	adiw	r28, 0x20	; 32
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	f8 94       	cli
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	cd bf       	out	0x3d, r28	; 61
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	1f 91       	pop	r17
    350c:	0f 91       	pop	r16
    350e:	ff 90       	pop	r15
    3510:	ef 90       	pop	r14
    3512:	df 90       	pop	r13
    3514:	cf 90       	pop	r12
    3516:	bf 90       	pop	r11
    3518:	af 90       	pop	r10
    351a:	9f 90       	pop	r9
    351c:	8f 90       	pop	r8
    351e:	7f 90       	pop	r7
    3520:	6f 90       	pop	r6
    3522:	5f 90       	pop	r5
    3524:	4f 90       	pop	r4
    3526:	3f 90       	pop	r3
    3528:	2f 90       	pop	r2
    352a:	08 95       	ret

0000352c <printInteger>:

void printInteger(long n)
{
    352c:	9b 01       	movw	r18, r22
    352e:	ac 01       	movw	r20, r24
	if (n < 0) {
    3530:	97 ff       	sbrs	r25, 7
    3532:	0e c0       	rjmp	.+28     	; 0x3550 <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3534:	80 91 c0 00 	lds	r24, 0x00C0
    3538:	85 ff       	sbrs	r24, 5
    353a:	fc cf       	rjmp	.-8      	; 0x3534 <printInteger+0x8>
		;
	UDR0 = c;
    353c:	8d e2       	ldi	r24, 0x2D	; 45
    353e:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3542:	50 95       	com	r21
    3544:	40 95       	com	r20
    3546:	30 95       	com	r19
    3548:	21 95       	neg	r18
    354a:	3f 4f       	sbci	r19, 0xFF	; 255
    354c:	4f 4f       	sbci	r20, 0xFF	; 255
    354e:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
    3550:	ca 01       	movw	r24, r20
    3552:	b9 01       	movw	r22, r18
    3554:	2a e0       	ldi	r18, 0x0A	; 10
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e0       	ldi	r20, 0x00	; 0
    355a:	50 e0       	ldi	r21, 0x00	; 0
    355c:	0e 94 09 1a 	call	0x3412	; 0x3412 <printIntegerInBase>
}
    3560:	08 95       	ret

00003562 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3562:	22 e0       	ldi	r18, 0x02	; 2
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e0       	ldi	r20, 0x00	; 0
    3568:	50 e0       	ldi	r21, 0x00	; 0
    356a:	0e 94 09 1a 	call	0x3412	; 0x3412 <printIntegerInBase>
  }
    356e:	08 95       	ret

00003570 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3570:	ef 92       	push	r14
    3572:	ff 92       	push	r15
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	00 d0       	rcall	.+0      	; 0x357e <printFloat+0xe>
    357e:	0f 92       	push	r0
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3584:	ae 01       	movw	r20, r28
    3586:	4f 5f       	subi	r20, 0xFF	; 255
    3588:	5f 4f       	sbci	r21, 0xFF	; 255
    358a:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <modf>
    358e:	7b 01       	movw	r14, r22
    3590:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3592:	69 81       	ldd	r22, Y+1	; 0x01
    3594:	7a 81       	ldd	r23, Y+2	; 0x02
    3596:	8b 81       	ldd	r24, Y+3	; 0x03
    3598:	9c 81       	ldd	r25, Y+4	; 0x04
    359a:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
    359e:	0e 94 96 1a 	call	0x352c	; 0x352c <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    35a2:	80 91 c0 00 	lds	r24, 0x00C0
    35a6:	85 ff       	sbrs	r24, 5
    35a8:	fc cf       	rjmp	.-8      	; 0x35a2 <printFloat+0x32>
		;
	UDR0 = c;
    35aa:	8e e2       	ldi	r24, 0x2E	; 46
    35ac:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    35b0:	c8 01       	movw	r24, r16
    35b2:	b7 01       	movw	r22, r14
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	4a e7       	ldi	r20, 0x7A	; 122
    35ba:	54 e4       	ldi	r21, 0x44	; 68
    35bc:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    35c0:	0e 94 05 20 	call	0x400a	; 0x400a <round>
    35c4:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__fixsfsi>
    35c8:	97 ff       	sbrs	r25, 7
    35ca:	07 c0       	rjmp	.+14     	; 0x35da <printFloat+0x6a>
    35cc:	90 95       	com	r25
    35ce:	80 95       	com	r24
    35d0:	70 95       	com	r23
    35d2:	61 95       	neg	r22
    35d4:	7f 4f       	sbci	r23, 0xFF	; 255
    35d6:	8f 4f       	sbci	r24, 0xFF	; 255
    35d8:	9f 4f       	sbci	r25, 0xFF	; 255
    35da:	0e 94 96 1a 	call	0x352c	; 0x352c <printInteger>
}
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	1f 91       	pop	r17
    35ec:	0f 91       	pop	r16
    35ee:	ff 90       	pop	r15
    35f0:	ef 90       	pop	r14
    35f2:	08 95       	ret

000035f4 <atc_init>:
#include "settings.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    35f4:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    35f6:	e7 e0       	ldi	r30, 0x07	; 7
    35f8:	f1 e0       	ldi	r31, 0x01	; 1
    35fa:	80 81       	ld	r24, Z
    35fc:	81 60       	ori	r24, 0x01	; 1
    35fe:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3600:	80 81       	ld	r24, Z
    3602:	82 60       	ori	r24, 0x02	; 2
    3604:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3606:	80 81       	ld	r24, Z
    3608:	84 60       	ori	r24, 0x04	; 4
    360a:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    360c:	80 81       	ld	r24, Z
    360e:	88 60       	ori	r24, 0x08	; 8
    3610:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3612:	80 81       	ld	r24, Z
    3614:	80 64       	ori	r24, 0x40	; 64
    3616:	80 83       	st	Z, r24

// initialise PORT as well

}
    3618:	08 95       	ret

0000361a <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	08 95       	ret

0000361e <atc_change>:



// changes tool , 0 put back, 1-6 picks up
void atc_change(int tool)
{
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	0e 94 40 14 	call	0x2880	; 0x2880 <set_busy>

	// make sure head is up before moving
	if( is_head_down() ) {
    362c:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <is_head_down>
    3630:	89 2b       	or	r24, r25
    3632:	21 f0       	breq	.+8      	; 0x363c <atc_change+0x1e>
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("TOOL headup\n\r"));
#endif
		head_down( FALSE ) ;
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <head_down>
	}

	// turn off toolchanger
	if( tool == 0 ) {
    363c:	20 97       	sbiw	r28, 0x00	; 0
    363e:	c9 f4       	brne	.+50     	; 0x3672 <atc_change+0x54>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3640:	80 91 08 01 	lds	r24, 0x0108
    3644:	81 60       	ori	r24, 0x01	; 1
    3646:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    364a:	80 91 08 01 	lds	r24, 0x0108
    364e:	82 60       	ori	r24, 0x02	; 2
    3650:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3654:	80 91 08 01 	lds	r24, 0x0108
    3658:	84 60       	ori	r24, 0x04	; 4
    365a:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    365e:	80 91 08 01 	lds	r24, 0x0108
    3662:	88 60       	ori	r24, 0x08	; 8
    3664:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	0e 94 40 14 	call	0x2880	; 0x2880 <set_busy>
    3670:	70 c0       	rjmp	.+224    	; 0x3752 <atc_change+0x134>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3672:	80 91 08 01 	lds	r24, 0x0108
    3676:	81 60       	ori	r24, 0x01	; 1
    3678:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    367c:	c3 30       	cpi	r28, 0x03	; 3
    367e:	d1 05       	cpc	r29, r1
    3680:	09 f1       	breq	.+66     	; 0x36c4 <atc_change+0xa6>
    3682:	c4 30       	cpi	r28, 0x04	; 4
    3684:	d1 05       	cpc	r29, r1
    3686:	3c f4       	brge	.+14     	; 0x3696 <atc_change+0x78>
    3688:	c1 30       	cpi	r28, 0x01	; 1
    368a:	d1 05       	cpc	r29, r1
    368c:	71 f0       	breq	.+28     	; 0x36aa <atc_change+0x8c>
    368e:	22 97       	sbiw	r28, 0x02	; 2
    3690:	09 f0       	breq	.+2      	; 0x3694 <atc_change+0x76>
    3692:	51 c0       	rjmp	.+162    	; 0x3736 <atc_change+0x118>
    3694:	13 c0       	rjmp	.+38     	; 0x36bc <atc_change+0x9e>
    3696:	c5 30       	cpi	r28, 0x05	; 5
    3698:	d1 05       	cpc	r29, r1
    369a:	59 f1       	breq	.+86     	; 0x36f2 <atc_change+0xd4>
    369c:	c5 30       	cpi	r28, 0x05	; 5
    369e:	d1 05       	cpc	r29, r1
    36a0:	fc f0       	brlt	.+62     	; 0x36e0 <atc_change+0xc2>
    36a2:	26 97       	sbiw	r28, 0x06	; 6
    36a4:	09 f0       	breq	.+2      	; 0x36a8 <atc_change+0x8a>
    36a6:	47 c0       	rjmp	.+142    	; 0x3736 <atc_change+0x118>
    36a8:	32 c0       	rjmp	.+100    	; 0x370e <atc_change+0xf0>
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    36aa:	80 91 08 01 	lds	r24, 0x0108
    36ae:	8d 7f       	andi	r24, 0xFD	; 253
    36b0:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    36b4:	80 91 08 01 	lds	r24, 0x0108
    36b8:	8b 7f       	andi	r24, 0xFB	; 251
    36ba:	0c c0       	rjmp	.+24     	; 0x36d4 <atc_change+0xb6>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    36bc:	80 91 08 01 	lds	r24, 0x0108
    36c0:	8d 7f       	andi	r24, 0xFD	; 253
    36c2:	28 c0       	rjmp	.+80     	; 0x3714 <atc_change+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    36c4:	80 91 08 01 	lds	r24, 0x0108
    36c8:	8d 7f       	andi	r24, 0xFD	; 253
    36ca:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    36ce:	80 91 08 01 	lds	r24, 0x0108
    36d2:	84 60       	ori	r24, 0x04	; 4
    36d4:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    36d8:	80 91 08 01 	lds	r24, 0x0108
    36dc:	87 7f       	andi	r24, 0xF7	; 247
    36de:	24 c0       	rjmp	.+72     	; 0x3728 <atc_change+0x10a>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    36e0:	80 91 08 01 	lds	r24, 0x0108
    36e4:	8d 7f       	andi	r24, 0xFD	; 253
    36e6:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    36ea:	80 91 08 01 	lds	r24, 0x0108
    36ee:	84 60       	ori	r24, 0x04	; 4
    36f0:	16 c0       	rjmp	.+44     	; 0x371e <atc_change+0x100>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    36f2:	80 91 08 01 	lds	r24, 0x0108
    36f6:	82 60       	ori	r24, 0x02	; 2
    36f8:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    36fc:	80 91 08 01 	lds	r24, 0x0108
    3700:	8b 7f       	andi	r24, 0xFB	; 251
    3702:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    3706:	80 91 08 01 	lds	r24, 0x0108
    370a:	87 7f       	andi	r24, 0xF7	; 247
    370c:	12 c0       	rjmp	.+36     	; 0x3732 <atc_change+0x114>
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    370e:	80 91 08 01 	lds	r24, 0x0108
    3712:	82 60       	ori	r24, 0x02	; 2
    3714:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3718:	80 91 08 01 	lds	r24, 0x0108
    371c:	8b 7f       	andi	r24, 0xFB	; 251
    371e:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3722:	80 91 08 01 	lds	r24, 0x0108
    3726:	88 60       	ori	r24, 0x08	; 8
    3728:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    372c:	80 91 08 01 	lds	r24, 0x0108
    3730:	8e 7f       	andi	r24, 0xFE	; 254
    3732:	80 93 08 01 	sts	0x0108, r24
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3736:	80 91 08 01 	lds	r24, 0x0108
    373a:	8e 7f       	andi	r24, 0xFE	; 254
    373c:	80 93 08 01 	sts	0x0108, r24
    3740:	88 ee       	ldi	r24, 0xE8	; 232
    3742:	93 e0       	ldi	r25, 0x03	; 3
    3744:	20 e9       	ldi	r18, 0x90	; 144
    3746:	31 e0       	ldi	r19, 0x01	; 1
    3748:	f9 01       	movw	r30, r18
    374a:	31 97       	sbiw	r30, 0x01	; 1
    374c:	f1 f7       	brne	.-4      	; 0x374a <atc_change+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3750:	d9 f7       	brne	.-10     	; 0x3748 <atc_change+0x12a>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	08 95       	ret

00003758 <goto_vacpad>:

}

void goto_vacpad( void ) 
{
	if( is_head_down() ) {
    3758:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <is_head_down>
    375c:	89 2b       	or	r24, r25
    375e:	21 f0       	breq	.+8      	; 0x3768 <goto_vacpad+0x10>
		head_down( FALSE) ;
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <head_down>
    3768:	08 95       	ret

0000376a <check_for_tool>:

// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	//move head up
	if( is_head_down() ) {
    376a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <is_head_down>
    376e:	89 2b       	or	r24, r25
    3770:	21 f0       	breq	.+8      	; 0x377a <check_for_tool+0x10>
		head_down( FALSE) ;
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <head_down>
	}

	goto_vacpad();
    377a:	0e 94 ac 1b 	call	0x3758	; 0x3758 <goto_vacpad>
	
	head_down(TRUE);
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <head_down>
	
	vacuum(TRUE);
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 87 1c 	call	0x390e	; 0x390e <vacuum>

	if( vacuum_state() == TRUE )  {
    378e:	0e 94 9c 1c 	call	0x3938	; 0x3938 <vacuum_state>
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	31 f4       	brne	.+12     	; 0x37a2 <check_for_tool+0x38>
		head_down( FALSE) ;
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <head_down>
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	08 95       	ret
		return TRUE;
	} else {
		head_down( FALSE) ;
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <head_down>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	}
}
    37ac:	08 95       	ret

000037ae <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    37ae:	ea e0       	ldi	r30, 0x0A	; 10
    37b0:	f1 e0       	ldi	r31, 0x01	; 1
    37b2:	80 81       	ld	r24, Z
    37b4:	80 62       	ori	r24, 0x20	; 32
    37b6:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    37b8:	eb e0       	ldi	r30, 0x0B	; 11
    37ba:	f1 e0       	ldi	r31, 0x01	; 1
    37bc:	80 81       	ld	r24, Z
    37be:	80 62       	ori	r24, 0x20	; 32
    37c0:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    37c2:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    37c4:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    37c6:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    37c8:	41 9a       	sbi	0x08, 1	; 8
}
    37ca:	08 95       	ret

000037cc <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    37cc:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    37ce:	81 70       	andi	r24, 0x01	; 1
    37d0:	08 95       	ret

000037d2 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?0:1;
    37d2:	86 b1       	in	r24, 0x06	; 6
    37d4:	86 95       	lsr	r24
    37d6:	80 95       	com	r24

	return state;
}
    37d8:	81 70       	andi	r24, 0x01	; 1
    37da:	08 95       	ret

000037dc <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}

// todo: don't allow head down while not homed?
void head_down(int state)
{
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 40 14 	call	0x2880	; 0x2880 <set_busy>

// head down mode
  if( state == 0 ) {
    37ea:	20 97       	sbiw	r28, 0x00	; 0
    37ec:	21 f4       	brne	.+8      	; 0x37f6 <head_down+0x1a>

	HEAD_PORT |= _BV( HEAD );
    37ee:	80 91 0b 01 	lds	r24, 0x010B
    37f2:	80 62       	ori	r24, 0x20	; 32
    37f4:	03 c0       	rjmp	.+6      	; 0x37fc <head_down+0x20>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    37f6:	80 91 0b 01 	lds	r24, 0x010B
    37fa:	8f 7d       	andi	r24, 0xDF	; 223
    37fc:	80 93 0b 01 	sts	0x010B, r24
    3800:	80 ed       	ldi	r24, 0xD0	; 208
    3802:	97 e0       	ldi	r25, 0x07	; 7
    3804:	20 e9       	ldi	r18, 0x90	; 144
    3806:	31 e0       	ldi	r19, 0x01	; 1
    3808:	f9 01       	movw	r30, r18
    380a:	31 97       	sbiw	r30, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <head_down+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3810:	d9 f7       	brne	.-10     	; 0x3808 <head_down+0x2c>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3812:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    3814:	81 70       	andi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	8c 17       	cp	r24, r28
    381a:	9d 07       	cpc	r25, r29
    381c:	21 f0       	breq	.+8      	; 0x3826 <head_down+0x4a>

	  printPgmString(PSTR("Head down error\n\r"));
    381e:	80 ed       	ldi	r24, 0xD0	; 208
    3820:	94 e0       	ldi	r25, 0x04	; 4
    3822:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <printPgmString>
  }

 set_busy( FALSE );
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	0e 94 40 14 	call	0x2880	; 0x2880 <set_busy>

}
    382e:	df 91       	pop	r29
    3830:	cf 91       	pop	r28
    3832:	08 95       	ret

00003834 <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    3834:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    3836:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    3838:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    383a:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    383c:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    383e:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    3840:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    3842:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    3844:	a4 e0       	ldi	r26, 0x04	; 4
    3846:	b1 e0       	ldi	r27, 0x01	; 1
    3848:	8c 91       	ld	r24, X
    384a:	8e 7f       	andi	r24, 0xFE	; 254
    384c:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    384e:	e5 e0       	ldi	r30, 0x05	; 5
    3850:	f1 e0       	ldi	r31, 0x01	; 1
    3852:	80 81       	ld	r24, Z
    3854:	81 60       	ori	r24, 0x01	; 1
    3856:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    3858:	8c 91       	ld	r24, X
    385a:	8f 7e       	andi	r24, 0xEF	; 239
    385c:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    385e:	80 81       	ld	r24, Z
    3860:	80 61       	ori	r24, 0x10	; 16
    3862:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    3864:	a1 e0       	ldi	r26, 0x01	; 1
    3866:	b1 e0       	ldi	r27, 0x01	; 1
    3868:	8c 91       	ld	r24, X
    386a:	8e 7f       	andi	r24, 0xFE	; 254
    386c:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    386e:	e2 e0       	ldi	r30, 0x02	; 2
    3870:	f1 e0       	ldi	r31, 0x01	; 1
    3872:	80 81       	ld	r24, Z
    3874:	81 60       	ori	r24, 0x01	; 1
    3876:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    3878:	8c 91       	ld	r24, X
    387a:	8d 7f       	andi	r24, 0xFD	; 253
    387c:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    387e:	80 81       	ld	r24, Z
    3880:	82 60       	ori	r24, 0x02	; 2
    3882:	80 83       	st	Z, r24

}
    3884:	08 95       	ret

00003886 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    3886:	8c b1       	in	r24, 0x0c	; 12
    3888:	82 95       	swap	r24
    388a:	86 95       	lsr	r24
    388c:	87 70       	andi	r24, 0x07	; 7
    388e:	80 95       	com	r24

	return state;
}
    3890:	81 70       	andi	r24, 0x01	; 1
    3892:	08 95       	ret

00003894 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    3894:	82 b3       	in	r24, 0x12	; 18
    3896:	82 95       	swap	r24
    3898:	86 95       	lsr	r24
    389a:	87 70       	andi	r24, 0x07	; 7
    389c:	80 95       	com	r24

	return state;
}
    389e:	81 70       	andi	r24, 0x01	; 1
    38a0:	08 95       	ret

000038a2 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    38a2:	8c b1       	in	r24, 0x0c	; 12
    38a4:	82 95       	swap	r24
    38a6:	8f 70       	andi	r24, 0x0F	; 15
    38a8:	80 95       	com	r24

	return state;
}
    38aa:	81 70       	andi	r24, 0x01	; 1
    38ac:	08 95       	ret

000038ae <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    38ae:	80 91 03 01 	lds	r24, 0x0103
    38b2:	86 95       	lsr	r24
    38b4:	80 95       	com	r24

	return state;
}
    38b6:	81 70       	andi	r24, 0x01	; 1
    38b8:	08 95       	ret

000038ba <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    38ba:	86 b1       	in	r24, 0x06	; 6
    38bc:	82 95       	swap	r24
    38be:	8f 70       	andi	r24, 0x0F	; 15
    38c0:	80 95       	com	r24

	return state;
}
    38c2:	81 70       	andi	r24, 0x01	; 1
    38c4:	08 95       	ret

000038c6 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    38c6:	80 91 00 01 	lds	r24, 0x0100
    38ca:	80 95       	com	r24

	return state;
}
    38cc:	81 70       	andi	r24, 0x01	; 1
    38ce:	08 95       	ret

000038d0 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    38d0:	80 91 03 01 	lds	r24, 0x0103
    38d4:	80 95       	com	r24

	return state;
}
    38d6:	81 70       	andi	r24, 0x01	; 1
    38d8:	08 95       	ret

000038da <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    38da:	83 b1       	in	r24, 0x03	; 3
    38dc:	82 95       	swap	r24
    38de:	86 95       	lsr	r24
    38e0:	87 70       	andi	r24, 0x07	; 7
    38e2:	80 95       	com	r24

	return state;
}
    38e4:	81 70       	andi	r24, 0x01	; 1
    38e6:	08 95       	ret

000038e8 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    38e8:	80 91 00 01 	lds	r24, 0x0100
    38ec:	86 95       	lsr	r24
    38ee:	80 95       	com	r24

	return state;
}
    38f0:	81 70       	andi	r24, 0x01	; 1
    38f2:	08 95       	ret

000038f4 <vacuum_init>:
#include "settings.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    38f4:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_DDR |= (_BV( TACSENSE ));
    38f6:	57 9a       	sbi	0x0a, 7	; 10

	// Vacuum on/off control
	HEAD_DDR |= _BV( VACUUM );
    38f8:	ea e0       	ldi	r30, 0x0A	; 10
    38fa:	f1 e0       	ldi	r31, 0x01	; 1
    38fc:	80 81       	ld	r24, Z
    38fe:	80 61       	ori	r24, 0x10	; 16
    3900:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    3902:	eb e0       	ldi	r30, 0x0B	; 11
    3904:	f1 e0       	ldi	r31, 0x01	; 1
    3906:	80 81       	ld	r24, Z
    3908:	80 61       	ori	r24, 0x10	; 16
    390a:	80 83       	st	Z, r24

}
    390c:	08 95       	ret

0000390e <vacuum>:
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    390e:	89 2b       	or	r24, r25
    3910:	21 f4       	brne	.+8      	; 0x391a <vacuum+0xc>

	HEAD_PORT |= _BV( VACUUM );
    3912:	80 91 0b 01 	lds	r24, 0x010B
    3916:	80 61       	ori	r24, 0x10	; 16
    3918:	03 c0       	rjmp	.+6      	; 0x3920 <vacuum+0x12>

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    391a:	80 91 0b 01 	lds	r24, 0x010B
    391e:	8f 7e       	andi	r24, 0xEF	; 239
    3920:	80 93 0b 01 	sts	0x010B, r24
    3924:	88 e8       	ldi	r24, 0x88	; 136
    3926:	93 e1       	ldi	r25, 0x13	; 19
    3928:	20 e9       	ldi	r18, 0x90	; 144
    392a:	31 e0       	ldi	r19, 0x01	; 1
    392c:	f9 01       	movw	r30, r18
    392e:	31 97       	sbiw	r30, 0x01	; 1
    3930:	f1 f7       	brne	.-4      	; 0x392e <vacuum+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3932:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3934:	d9 f7       	brne	.-10     	; 0x392c <vacuum+0x1e>
  }

   // wait for air to get settled
   _delay_ms( AIR_SETTLE_TIME );

}
    3936:	08 95       	ret

00003938 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_DDR, TACSENSE )?0:1;
    3938:	8a b1       	in	r24, 0x0a	; 10
    393a:	80 95       	com	r24

	return state;
}
    393c:	88 1f       	adc	r24, r24
    393e:	88 27       	eor	r24, r24
    3940:	88 1f       	adc	r24, r24
    3942:	08 95       	ret

00003944 <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    3944:	e7 e0       	ldi	r30, 0x07	; 7
    3946:	f1 e0       	ldi	r31, 0x01	; 1
    3948:	80 81       	ld	r24, Z
    394a:	80 68       	ori	r24, 0x80	; 128
    394c:	80 83       	st	Z, r24
}
    394e:	08 95       	ret

00003950 <tape_knock>:
{
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

 set_busy( TRUE );
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 40 14 	call	0x2880	; 0x2880 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    3958:	80 91 08 01 	lds	r24, 0x0108
    395c:	8f 77       	andi	r24, 0x7F	; 127
    395e:	80 93 08 01 	sts	0x0108, r24
    3962:	80 ed       	ldi	r24, 0xD0	; 208
    3964:	97 e0       	ldi	r25, 0x07	; 7
    3966:	20 e9       	ldi	r18, 0x90	; 144
    3968:	31 e0       	ldi	r19, 0x01	; 1
    396a:	f9 01       	movw	r30, r18
    396c:	31 97       	sbiw	r30, 0x01	; 1
    396e:	f1 f7       	brne	.-4      	; 0x396c <tape_knock+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3970:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3972:	d9 f7       	brne	.-10     	; 0x396a <tape_knock+0x1a>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    3974:	80 91 08 01 	lds	r24, 0x0108
    3978:	80 68       	ori	r24, 0x80	; 128
    397a:	80 93 08 01 	sts	0x0108, r24
    397e:	80 ed       	ldi	r24, 0xD0	; 208
    3980:	97 e0       	ldi	r25, 0x07	; 7
    3982:	20 e9       	ldi	r18, 0x90	; 144
    3984:	31 e0       	ldi	r19, 0x01	; 1
    3986:	f9 01       	movw	r30, r18
    3988:	31 97       	sbiw	r30, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <tape_knock+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    398e:	d9 f7       	brne	.-10     	; 0x3986 <tape_knock+0x36>

	_delay_ms( TAPE_KNOCK_SETTLE );

 set_busy( FALSE );
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	0e 94 40 14 	call	0x2880	; 0x2880 <set_busy>
}
    3998:	08 95       	ret

0000399a <__subsf3>:
    399a:	50 58       	subi	r21, 0x80	; 128

0000399c <__addsf3>:
    399c:	bb 27       	eor	r27, r27
    399e:	aa 27       	eor	r26, r26
    39a0:	0e d0       	rcall	.+28     	; 0x39be <__addsf3x>
    39a2:	11 c2       	rjmp	.+1058   	; 0x3dc6 <__fp_round>
    39a4:	02 d2       	rcall	.+1028   	; 0x3daa <__fp_pscA>
    39a6:	30 f0       	brcs	.+12     	; 0x39b4 <__addsf3+0x18>
    39a8:	07 d2       	rcall	.+1038   	; 0x3db8 <__fp_pscB>
    39aa:	20 f0       	brcs	.+8      	; 0x39b4 <__addsf3+0x18>
    39ac:	31 f4       	brne	.+12     	; 0x39ba <__addsf3+0x1e>
    39ae:	9f 3f       	cpi	r25, 0xFF	; 255
    39b0:	11 f4       	brne	.+4      	; 0x39b6 <__addsf3+0x1a>
    39b2:	1e f4       	brtc	.+6      	; 0x39ba <__addsf3+0x1e>
    39b4:	d2 c1       	rjmp	.+932    	; 0x3d5a <__fp_nan>
    39b6:	0e f4       	brtc	.+2      	; 0x39ba <__addsf3+0x1e>
    39b8:	e0 95       	com	r30
    39ba:	e7 fb       	bst	r30, 7
    39bc:	9f c1       	rjmp	.+830    	; 0x3cfc <__fp_inf>

000039be <__addsf3x>:
    39be:	e9 2f       	mov	r30, r25
    39c0:	13 d2       	rcall	.+1062   	; 0x3de8 <__fp_split3>
    39c2:	80 f3       	brcs	.-32     	; 0x39a4 <__addsf3+0x8>
    39c4:	ba 17       	cp	r27, r26
    39c6:	62 07       	cpc	r22, r18
    39c8:	73 07       	cpc	r23, r19
    39ca:	84 07       	cpc	r24, r20
    39cc:	95 07       	cpc	r25, r21
    39ce:	18 f0       	brcs	.+6      	; 0x39d6 <__addsf3x+0x18>
    39d0:	71 f4       	brne	.+28     	; 0x39ee <__addsf3x+0x30>
    39d2:	9e f5       	brtc	.+102    	; 0x3a3a <__addsf3x+0x7c>
    39d4:	42 c2       	rjmp	.+1156   	; 0x3e5a <__fp_zero>
    39d6:	0e f4       	brtc	.+2      	; 0x39da <__addsf3x+0x1c>
    39d8:	e0 95       	com	r30
    39da:	0b 2e       	mov	r0, r27
    39dc:	ba 2f       	mov	r27, r26
    39de:	a0 2d       	mov	r26, r0
    39e0:	0b 01       	movw	r0, r22
    39e2:	b9 01       	movw	r22, r18
    39e4:	90 01       	movw	r18, r0
    39e6:	0c 01       	movw	r0, r24
    39e8:	ca 01       	movw	r24, r20
    39ea:	a0 01       	movw	r20, r0
    39ec:	11 24       	eor	r1, r1
    39ee:	ff 27       	eor	r31, r31
    39f0:	59 1b       	sub	r21, r25
    39f2:	99 f0       	breq	.+38     	; 0x3a1a <__addsf3x+0x5c>
    39f4:	59 3f       	cpi	r21, 0xF9	; 249
    39f6:	50 f4       	brcc	.+20     	; 0x3a0c <__addsf3x+0x4e>
    39f8:	50 3e       	cpi	r21, 0xE0	; 224
    39fa:	68 f1       	brcs	.+90     	; 0x3a56 <__addsf3x+0x98>
    39fc:	1a 16       	cp	r1, r26
    39fe:	f0 40       	sbci	r31, 0x00	; 0
    3a00:	a2 2f       	mov	r26, r18
    3a02:	23 2f       	mov	r18, r19
    3a04:	34 2f       	mov	r19, r20
    3a06:	44 27       	eor	r20, r20
    3a08:	58 5f       	subi	r21, 0xF8	; 248
    3a0a:	f3 cf       	rjmp	.-26     	; 0x39f2 <__addsf3x+0x34>
    3a0c:	46 95       	lsr	r20
    3a0e:	37 95       	ror	r19
    3a10:	27 95       	ror	r18
    3a12:	a7 95       	ror	r26
    3a14:	f0 40       	sbci	r31, 0x00	; 0
    3a16:	53 95       	inc	r21
    3a18:	c9 f7       	brne	.-14     	; 0x3a0c <__addsf3x+0x4e>
    3a1a:	7e f4       	brtc	.+30     	; 0x3a3a <__addsf3x+0x7c>
    3a1c:	1f 16       	cp	r1, r31
    3a1e:	ba 0b       	sbc	r27, r26
    3a20:	62 0b       	sbc	r22, r18
    3a22:	73 0b       	sbc	r23, r19
    3a24:	84 0b       	sbc	r24, r20
    3a26:	ba f0       	brmi	.+46     	; 0x3a56 <__addsf3x+0x98>
    3a28:	91 50       	subi	r25, 0x01	; 1
    3a2a:	a1 f0       	breq	.+40     	; 0x3a54 <__addsf3x+0x96>
    3a2c:	ff 0f       	add	r31, r31
    3a2e:	bb 1f       	adc	r27, r27
    3a30:	66 1f       	adc	r22, r22
    3a32:	77 1f       	adc	r23, r23
    3a34:	88 1f       	adc	r24, r24
    3a36:	c2 f7       	brpl	.-16     	; 0x3a28 <__addsf3x+0x6a>
    3a38:	0e c0       	rjmp	.+28     	; 0x3a56 <__addsf3x+0x98>
    3a3a:	ba 0f       	add	r27, r26
    3a3c:	62 1f       	adc	r22, r18
    3a3e:	73 1f       	adc	r23, r19
    3a40:	84 1f       	adc	r24, r20
    3a42:	48 f4       	brcc	.+18     	; 0x3a56 <__addsf3x+0x98>
    3a44:	87 95       	ror	r24
    3a46:	77 95       	ror	r23
    3a48:	67 95       	ror	r22
    3a4a:	b7 95       	ror	r27
    3a4c:	f7 95       	ror	r31
    3a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    3a50:	08 f0       	brcs	.+2      	; 0x3a54 <__addsf3x+0x96>
    3a52:	b3 cf       	rjmp	.-154    	; 0x39ba <__addsf3+0x1e>
    3a54:	93 95       	inc	r25
    3a56:	88 0f       	add	r24, r24
    3a58:	08 f0       	brcs	.+2      	; 0x3a5c <__addsf3x+0x9e>
    3a5a:	99 27       	eor	r25, r25
    3a5c:	ee 0f       	add	r30, r30
    3a5e:	97 95       	ror	r25
    3a60:	87 95       	ror	r24
    3a62:	08 95       	ret

00003a64 <atan>:
    3a64:	df 93       	push	r29
    3a66:	dd 27       	eor	r29, r29
    3a68:	b9 2f       	mov	r27, r25
    3a6a:	bf 77       	andi	r27, 0x7F	; 127
    3a6c:	40 e8       	ldi	r20, 0x80	; 128
    3a6e:	5f e3       	ldi	r21, 0x3F	; 63
    3a70:	16 16       	cp	r1, r22
    3a72:	17 06       	cpc	r1, r23
    3a74:	48 07       	cpc	r20, r24
    3a76:	5b 07       	cpc	r21, r27
    3a78:	10 f4       	brcc	.+4      	; 0x3a7e <atan+0x1a>
    3a7a:	d9 2f       	mov	r29, r25
    3a7c:	f9 d1       	rcall	.+1010   	; 0x3e70 <inverse>
    3a7e:	9f 93       	push	r25
    3a80:	8f 93       	push	r24
    3a82:	7f 93       	push	r23
    3a84:	6f 93       	push	r22
    3a86:	23 d3       	rcall	.+1606   	; 0x40ce <square>
    3a88:	ee e5       	ldi	r30, 0x5E	; 94
    3a8a:	f1 e0       	ldi	r31, 0x01	; 1
    3a8c:	69 d1       	rcall	.+722    	; 0x3d60 <__fp_powser>
    3a8e:	9b d1       	rcall	.+822    	; 0x3dc6 <__fp_round>
    3a90:	2f 91       	pop	r18
    3a92:	3f 91       	pop	r19
    3a94:	4f 91       	pop	r20
    3a96:	5f 91       	pop	r21
    3a98:	61 d2       	rcall	.+1218   	; 0x3f5c <__mulsf3x>
    3a9a:	dd 23       	and	r29, r29
    3a9c:	49 f0       	breq	.+18     	; 0x3ab0 <atan+0x4c>
    3a9e:	90 58       	subi	r25, 0x80	; 128
    3aa0:	a2 ea       	ldi	r26, 0xA2	; 162
    3aa2:	2a ed       	ldi	r18, 0xDA	; 218
    3aa4:	3f e0       	ldi	r19, 0x0F	; 15
    3aa6:	49 ec       	ldi	r20, 0xC9	; 201
    3aa8:	5f e3       	ldi	r21, 0x3F	; 63
    3aaa:	d0 78       	andi	r29, 0x80	; 128
    3aac:	5d 27       	eor	r21, r29
    3aae:	87 df       	rcall	.-242    	; 0x39be <__addsf3x>
    3ab0:	df 91       	pop	r29
    3ab2:	89 c1       	rjmp	.+786    	; 0x3dc6 <__fp_round>

00003ab4 <ceil>:
    3ab4:	bb d1       	rcall	.+886    	; 0x3e2c <__fp_trunc>
    3ab6:	80 f0       	brcs	.+32     	; 0x3ad8 <ceil+0x24>
    3ab8:	9f 37       	cpi	r25, 0x7F	; 127
    3aba:	40 f4       	brcc	.+16     	; 0x3acc <ceil+0x18>
    3abc:	91 11       	cpse	r25, r1
    3abe:	0e f4       	brtc	.+2      	; 0x3ac2 <ceil+0xe>
    3ac0:	cd c1       	rjmp	.+922    	; 0x3e5c <__fp_szero>
    3ac2:	60 e0       	ldi	r22, 0x00	; 0
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	80 e8       	ldi	r24, 0x80	; 128
    3ac8:	9f e3       	ldi	r25, 0x3F	; 63
    3aca:	08 95       	ret
    3acc:	26 f0       	brts	.+8      	; 0x3ad6 <ceil+0x22>
    3ace:	1b 16       	cp	r1, r27
    3ad0:	61 1d       	adc	r22, r1
    3ad2:	71 1d       	adc	r23, r1
    3ad4:	81 1d       	adc	r24, r1
    3ad6:	18 c1       	rjmp	.+560    	; 0x3d08 <__fp_mintl>
    3ad8:	32 c1       	rjmp	.+612    	; 0x3d3e <__fp_mpack>

00003ada <__cmpsf2>:
    3ada:	ec d0       	rcall	.+472    	; 0x3cb4 <__fp_cmp>
    3adc:	08 f4       	brcc	.+2      	; 0x3ae0 <__cmpsf2+0x6>
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	08 95       	ret

00003ae2 <__divsf3>:
    3ae2:	0c d0       	rcall	.+24     	; 0x3afc <__divsf3x>
    3ae4:	70 c1       	rjmp	.+736    	; 0x3dc6 <__fp_round>
    3ae6:	68 d1       	rcall	.+720    	; 0x3db8 <__fp_pscB>
    3ae8:	40 f0       	brcs	.+16     	; 0x3afa <__divsf3+0x18>
    3aea:	5f d1       	rcall	.+702    	; 0x3daa <__fp_pscA>
    3aec:	30 f0       	brcs	.+12     	; 0x3afa <__divsf3+0x18>
    3aee:	21 f4       	brne	.+8      	; 0x3af8 <__divsf3+0x16>
    3af0:	5f 3f       	cpi	r21, 0xFF	; 255
    3af2:	19 f0       	breq	.+6      	; 0x3afa <__divsf3+0x18>
    3af4:	03 c1       	rjmp	.+518    	; 0x3cfc <__fp_inf>
    3af6:	51 11       	cpse	r21, r1
    3af8:	b1 c1       	rjmp	.+866    	; 0x3e5c <__fp_szero>
    3afa:	2f c1       	rjmp	.+606    	; 0x3d5a <__fp_nan>

00003afc <__divsf3x>:
    3afc:	75 d1       	rcall	.+746    	; 0x3de8 <__fp_split3>
    3afe:	98 f3       	brcs	.-26     	; 0x3ae6 <__divsf3+0x4>

00003b00 <__divsf3_pse>:
    3b00:	99 23       	and	r25, r25
    3b02:	c9 f3       	breq	.-14     	; 0x3af6 <__divsf3+0x14>
    3b04:	55 23       	and	r21, r21
    3b06:	b1 f3       	breq	.-20     	; 0x3af4 <__divsf3+0x12>
    3b08:	95 1b       	sub	r25, r21
    3b0a:	55 0b       	sbc	r21, r21
    3b0c:	bb 27       	eor	r27, r27
    3b0e:	aa 27       	eor	r26, r26
    3b10:	62 17       	cp	r22, r18
    3b12:	73 07       	cpc	r23, r19
    3b14:	84 07       	cpc	r24, r20
    3b16:	38 f0       	brcs	.+14     	; 0x3b26 <__divsf3_pse+0x26>
    3b18:	9f 5f       	subi	r25, 0xFF	; 255
    3b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b1c:	22 0f       	add	r18, r18
    3b1e:	33 1f       	adc	r19, r19
    3b20:	44 1f       	adc	r20, r20
    3b22:	aa 1f       	adc	r26, r26
    3b24:	a9 f3       	breq	.-22     	; 0x3b10 <__divsf3_pse+0x10>
    3b26:	33 d0       	rcall	.+102    	; 0x3b8e <__divsf3_pse+0x8e>
    3b28:	0e 2e       	mov	r0, r30
    3b2a:	3a f0       	brmi	.+14     	; 0x3b3a <__divsf3_pse+0x3a>
    3b2c:	e0 e8       	ldi	r30, 0x80	; 128
    3b2e:	30 d0       	rcall	.+96     	; 0x3b90 <__divsf3_pse+0x90>
    3b30:	91 50       	subi	r25, 0x01	; 1
    3b32:	50 40       	sbci	r21, 0x00	; 0
    3b34:	e6 95       	lsr	r30
    3b36:	00 1c       	adc	r0, r0
    3b38:	ca f7       	brpl	.-14     	; 0x3b2c <__divsf3_pse+0x2c>
    3b3a:	29 d0       	rcall	.+82     	; 0x3b8e <__divsf3_pse+0x8e>
    3b3c:	fe 2f       	mov	r31, r30
    3b3e:	27 d0       	rcall	.+78     	; 0x3b8e <__divsf3_pse+0x8e>
    3b40:	66 0f       	add	r22, r22
    3b42:	77 1f       	adc	r23, r23
    3b44:	88 1f       	adc	r24, r24
    3b46:	bb 1f       	adc	r27, r27
    3b48:	26 17       	cp	r18, r22
    3b4a:	37 07       	cpc	r19, r23
    3b4c:	48 07       	cpc	r20, r24
    3b4e:	ab 07       	cpc	r26, r27
    3b50:	b0 e8       	ldi	r27, 0x80	; 128
    3b52:	09 f0       	breq	.+2      	; 0x3b56 <__divsf3_pse+0x56>
    3b54:	bb 0b       	sbc	r27, r27
    3b56:	80 2d       	mov	r24, r0
    3b58:	bf 01       	movw	r22, r30
    3b5a:	ff 27       	eor	r31, r31
    3b5c:	93 58       	subi	r25, 0x83	; 131
    3b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b60:	2a f0       	brmi	.+10     	; 0x3b6c <__divsf3_pse+0x6c>
    3b62:	9e 3f       	cpi	r25, 0xFE	; 254
    3b64:	51 05       	cpc	r21, r1
    3b66:	68 f0       	brcs	.+26     	; 0x3b82 <__divsf3_pse+0x82>
    3b68:	c9 c0       	rjmp	.+402    	; 0x3cfc <__fp_inf>
    3b6a:	78 c1       	rjmp	.+752    	; 0x3e5c <__fp_szero>
    3b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b6e:	ec f3       	brlt	.-6      	; 0x3b6a <__divsf3_pse+0x6a>
    3b70:	98 3e       	cpi	r25, 0xE8	; 232
    3b72:	dc f3       	brlt	.-10     	; 0x3b6a <__divsf3_pse+0x6a>
    3b74:	86 95       	lsr	r24
    3b76:	77 95       	ror	r23
    3b78:	67 95       	ror	r22
    3b7a:	b7 95       	ror	r27
    3b7c:	f7 95       	ror	r31
    3b7e:	9f 5f       	subi	r25, 0xFF	; 255
    3b80:	c9 f7       	brne	.-14     	; 0x3b74 <__divsf3_pse+0x74>
    3b82:	88 0f       	add	r24, r24
    3b84:	91 1d       	adc	r25, r1
    3b86:	96 95       	lsr	r25
    3b88:	87 95       	ror	r24
    3b8a:	97 f9       	bld	r25, 7
    3b8c:	08 95       	ret
    3b8e:	e1 e0       	ldi	r30, 0x01	; 1
    3b90:	66 0f       	add	r22, r22
    3b92:	77 1f       	adc	r23, r23
    3b94:	88 1f       	adc	r24, r24
    3b96:	bb 1f       	adc	r27, r27
    3b98:	62 17       	cp	r22, r18
    3b9a:	73 07       	cpc	r23, r19
    3b9c:	84 07       	cpc	r24, r20
    3b9e:	ba 07       	cpc	r27, r26
    3ba0:	20 f0       	brcs	.+8      	; 0x3baa <__divsf3_pse+0xaa>
    3ba2:	62 1b       	sub	r22, r18
    3ba4:	73 0b       	sbc	r23, r19
    3ba6:	84 0b       	sbc	r24, r20
    3ba8:	ba 0b       	sbc	r27, r26
    3baa:	ee 1f       	adc	r30, r30
    3bac:	88 f7       	brcc	.-30     	; 0x3b90 <__divsf3_pse+0x90>
    3bae:	e0 95       	com	r30
    3bb0:	08 95       	ret

00003bb2 <__fixsfsi>:
    3bb2:	04 d0       	rcall	.+8      	; 0x3bbc <__fixunssfsi>
    3bb4:	68 94       	set
    3bb6:	b1 11       	cpse	r27, r1
    3bb8:	51 c1       	rjmp	.+674    	; 0x3e5c <__fp_szero>
    3bba:	08 95       	ret

00003bbc <__fixunssfsi>:
    3bbc:	1d d1       	rcall	.+570    	; 0x3df8 <__fp_splitA>
    3bbe:	88 f0       	brcs	.+34     	; 0x3be2 <__fixunssfsi+0x26>
    3bc0:	9f 57       	subi	r25, 0x7F	; 127
    3bc2:	90 f0       	brcs	.+36     	; 0x3be8 <__fixunssfsi+0x2c>
    3bc4:	b9 2f       	mov	r27, r25
    3bc6:	99 27       	eor	r25, r25
    3bc8:	b7 51       	subi	r27, 0x17	; 23
    3bca:	a0 f0       	brcs	.+40     	; 0x3bf4 <__fixunssfsi+0x38>
    3bcc:	d1 f0       	breq	.+52     	; 0x3c02 <__fixunssfsi+0x46>
    3bce:	66 0f       	add	r22, r22
    3bd0:	77 1f       	adc	r23, r23
    3bd2:	88 1f       	adc	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	1a f0       	brmi	.+6      	; 0x3bde <__fixunssfsi+0x22>
    3bd8:	ba 95       	dec	r27
    3bda:	c9 f7       	brne	.-14     	; 0x3bce <__fixunssfsi+0x12>
    3bdc:	12 c0       	rjmp	.+36     	; 0x3c02 <__fixunssfsi+0x46>
    3bde:	b1 30       	cpi	r27, 0x01	; 1
    3be0:	81 f0       	breq	.+32     	; 0x3c02 <__fixunssfsi+0x46>
    3be2:	3b d1       	rcall	.+630    	; 0x3e5a <__fp_zero>
    3be4:	b1 e0       	ldi	r27, 0x01	; 1
    3be6:	08 95       	ret
    3be8:	38 c1       	rjmp	.+624    	; 0x3e5a <__fp_zero>
    3bea:	67 2f       	mov	r22, r23
    3bec:	78 2f       	mov	r23, r24
    3bee:	88 27       	eor	r24, r24
    3bf0:	b8 5f       	subi	r27, 0xF8	; 248
    3bf2:	39 f0       	breq	.+14     	; 0x3c02 <__fixunssfsi+0x46>
    3bf4:	b9 3f       	cpi	r27, 0xF9	; 249
    3bf6:	cc f3       	brlt	.-14     	; 0x3bea <__fixunssfsi+0x2e>
    3bf8:	86 95       	lsr	r24
    3bfa:	77 95       	ror	r23
    3bfc:	67 95       	ror	r22
    3bfe:	b3 95       	inc	r27
    3c00:	d9 f7       	brne	.-10     	; 0x3bf8 <__fixunssfsi+0x3c>
    3c02:	3e f4       	brtc	.+14     	; 0x3c12 <__fixunssfsi+0x56>
    3c04:	90 95       	com	r25
    3c06:	80 95       	com	r24
    3c08:	70 95       	com	r23
    3c0a:	61 95       	neg	r22
    3c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c10:	9f 4f       	sbci	r25, 0xFF	; 255
    3c12:	08 95       	ret

00003c14 <__floatunsisf>:
    3c14:	e8 94       	clt
    3c16:	09 c0       	rjmp	.+18     	; 0x3c2a <__floatsisf+0x12>

00003c18 <__floatsisf>:
    3c18:	97 fb       	bst	r25, 7
    3c1a:	3e f4       	brtc	.+14     	; 0x3c2a <__floatsisf+0x12>
    3c1c:	90 95       	com	r25
    3c1e:	80 95       	com	r24
    3c20:	70 95       	com	r23
    3c22:	61 95       	neg	r22
    3c24:	7f 4f       	sbci	r23, 0xFF	; 255
    3c26:	8f 4f       	sbci	r24, 0xFF	; 255
    3c28:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2a:	99 23       	and	r25, r25
    3c2c:	a9 f0       	breq	.+42     	; 0x3c58 <__floatsisf+0x40>
    3c2e:	f9 2f       	mov	r31, r25
    3c30:	96 e9       	ldi	r25, 0x96	; 150
    3c32:	bb 27       	eor	r27, r27
    3c34:	93 95       	inc	r25
    3c36:	f6 95       	lsr	r31
    3c38:	87 95       	ror	r24
    3c3a:	77 95       	ror	r23
    3c3c:	67 95       	ror	r22
    3c3e:	b7 95       	ror	r27
    3c40:	f1 11       	cpse	r31, r1
    3c42:	f8 cf       	rjmp	.-16     	; 0x3c34 <__floatsisf+0x1c>
    3c44:	fa f4       	brpl	.+62     	; 0x3c84 <__floatsisf+0x6c>
    3c46:	bb 0f       	add	r27, r27
    3c48:	11 f4       	brne	.+4      	; 0x3c4e <__floatsisf+0x36>
    3c4a:	60 ff       	sbrs	r22, 0
    3c4c:	1b c0       	rjmp	.+54     	; 0x3c84 <__floatsisf+0x6c>
    3c4e:	6f 5f       	subi	r22, 0xFF	; 255
    3c50:	7f 4f       	sbci	r23, 0xFF	; 255
    3c52:	8f 4f       	sbci	r24, 0xFF	; 255
    3c54:	9f 4f       	sbci	r25, 0xFF	; 255
    3c56:	16 c0       	rjmp	.+44     	; 0x3c84 <__floatsisf+0x6c>
    3c58:	88 23       	and	r24, r24
    3c5a:	11 f0       	breq	.+4      	; 0x3c60 <__floatsisf+0x48>
    3c5c:	96 e9       	ldi	r25, 0x96	; 150
    3c5e:	11 c0       	rjmp	.+34     	; 0x3c82 <__floatsisf+0x6a>
    3c60:	77 23       	and	r23, r23
    3c62:	21 f0       	breq	.+8      	; 0x3c6c <__floatsisf+0x54>
    3c64:	9e e8       	ldi	r25, 0x8E	; 142
    3c66:	87 2f       	mov	r24, r23
    3c68:	76 2f       	mov	r23, r22
    3c6a:	05 c0       	rjmp	.+10     	; 0x3c76 <__floatsisf+0x5e>
    3c6c:	66 23       	and	r22, r22
    3c6e:	71 f0       	breq	.+28     	; 0x3c8c <__floatsisf+0x74>
    3c70:	96 e8       	ldi	r25, 0x86	; 134
    3c72:	86 2f       	mov	r24, r22
    3c74:	70 e0       	ldi	r23, 0x00	; 0
    3c76:	60 e0       	ldi	r22, 0x00	; 0
    3c78:	2a f0       	brmi	.+10     	; 0x3c84 <__floatsisf+0x6c>
    3c7a:	9a 95       	dec	r25
    3c7c:	66 0f       	add	r22, r22
    3c7e:	77 1f       	adc	r23, r23
    3c80:	88 1f       	adc	r24, r24
    3c82:	da f7       	brpl	.-10     	; 0x3c7a <__floatsisf+0x62>
    3c84:	88 0f       	add	r24, r24
    3c86:	96 95       	lsr	r25
    3c88:	87 95       	ror	r24
    3c8a:	97 f9       	bld	r25, 7
    3c8c:	08 95       	ret

00003c8e <floor>:
    3c8e:	ce d0       	rcall	.+412    	; 0x3e2c <__fp_trunc>
    3c90:	80 f0       	brcs	.+32     	; 0x3cb2 <floor+0x24>
    3c92:	9f 37       	cpi	r25, 0x7F	; 127
    3c94:	40 f4       	brcc	.+16     	; 0x3ca6 <floor+0x18>
    3c96:	91 11       	cpse	r25, r1
    3c98:	0e f0       	brts	.+2      	; 0x3c9c <floor+0xe>
    3c9a:	e0 c0       	rjmp	.+448    	; 0x3e5c <__fp_szero>
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	80 e8       	ldi	r24, 0x80	; 128
    3ca2:	9f eb       	ldi	r25, 0xBF	; 191
    3ca4:	08 95       	ret
    3ca6:	26 f4       	brtc	.+8      	; 0x3cb0 <floor+0x22>
    3ca8:	1b 16       	cp	r1, r27
    3caa:	61 1d       	adc	r22, r1
    3cac:	71 1d       	adc	r23, r1
    3cae:	81 1d       	adc	r24, r1
    3cb0:	2b c0       	rjmp	.+86     	; 0x3d08 <__fp_mintl>
    3cb2:	45 c0       	rjmp	.+138    	; 0x3d3e <__fp_mpack>

00003cb4 <__fp_cmp>:
    3cb4:	99 0f       	add	r25, r25
    3cb6:	00 08       	sbc	r0, r0
    3cb8:	55 0f       	add	r21, r21
    3cba:	aa 0b       	sbc	r26, r26
    3cbc:	e0 e8       	ldi	r30, 0x80	; 128
    3cbe:	fe ef       	ldi	r31, 0xFE	; 254
    3cc0:	16 16       	cp	r1, r22
    3cc2:	17 06       	cpc	r1, r23
    3cc4:	e8 07       	cpc	r30, r24
    3cc6:	f9 07       	cpc	r31, r25
    3cc8:	c0 f0       	brcs	.+48     	; 0x3cfa <__fp_cmp+0x46>
    3cca:	12 16       	cp	r1, r18
    3ccc:	13 06       	cpc	r1, r19
    3cce:	e4 07       	cpc	r30, r20
    3cd0:	f5 07       	cpc	r31, r21
    3cd2:	98 f0       	brcs	.+38     	; 0x3cfa <__fp_cmp+0x46>
    3cd4:	62 1b       	sub	r22, r18
    3cd6:	73 0b       	sbc	r23, r19
    3cd8:	84 0b       	sbc	r24, r20
    3cda:	95 0b       	sbc	r25, r21
    3cdc:	39 f4       	brne	.+14     	; 0x3cec <__fp_cmp+0x38>
    3cde:	0a 26       	eor	r0, r26
    3ce0:	61 f0       	breq	.+24     	; 0x3cfa <__fp_cmp+0x46>
    3ce2:	23 2b       	or	r18, r19
    3ce4:	24 2b       	or	r18, r20
    3ce6:	25 2b       	or	r18, r21
    3ce8:	21 f4       	brne	.+8      	; 0x3cf2 <__fp_cmp+0x3e>
    3cea:	08 95       	ret
    3cec:	0a 26       	eor	r0, r26
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <__fp_cmp+0x3e>
    3cf0:	a1 40       	sbci	r26, 0x01	; 1
    3cf2:	a6 95       	lsr	r26
    3cf4:	8f ef       	ldi	r24, 0xFF	; 255
    3cf6:	81 1d       	adc	r24, r1
    3cf8:	81 1d       	adc	r24, r1
    3cfa:	08 95       	ret

00003cfc <__fp_inf>:
    3cfc:	97 f9       	bld	r25, 7
    3cfe:	9f 67       	ori	r25, 0x7F	; 127
    3d00:	80 e8       	ldi	r24, 0x80	; 128
    3d02:	70 e0       	ldi	r23, 0x00	; 0
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	08 95       	ret

00003d08 <__fp_mintl>:
    3d08:	88 23       	and	r24, r24
    3d0a:	71 f4       	brne	.+28     	; 0x3d28 <__fp_mintl+0x20>
    3d0c:	77 23       	and	r23, r23
    3d0e:	21 f0       	breq	.+8      	; 0x3d18 <__fp_mintl+0x10>
    3d10:	98 50       	subi	r25, 0x08	; 8
    3d12:	87 2b       	or	r24, r23
    3d14:	76 2f       	mov	r23, r22
    3d16:	07 c0       	rjmp	.+14     	; 0x3d26 <__fp_mintl+0x1e>
    3d18:	66 23       	and	r22, r22
    3d1a:	11 f4       	brne	.+4      	; 0x3d20 <__fp_mintl+0x18>
    3d1c:	99 27       	eor	r25, r25
    3d1e:	0d c0       	rjmp	.+26     	; 0x3d3a <__fp_mintl+0x32>
    3d20:	90 51       	subi	r25, 0x10	; 16
    3d22:	86 2b       	or	r24, r22
    3d24:	70 e0       	ldi	r23, 0x00	; 0
    3d26:	60 e0       	ldi	r22, 0x00	; 0
    3d28:	2a f0       	brmi	.+10     	; 0x3d34 <__fp_mintl+0x2c>
    3d2a:	9a 95       	dec	r25
    3d2c:	66 0f       	add	r22, r22
    3d2e:	77 1f       	adc	r23, r23
    3d30:	88 1f       	adc	r24, r24
    3d32:	da f7       	brpl	.-10     	; 0x3d2a <__fp_mintl+0x22>
    3d34:	88 0f       	add	r24, r24
    3d36:	96 95       	lsr	r25
    3d38:	87 95       	ror	r24
    3d3a:	97 f9       	bld	r25, 7
    3d3c:	08 95       	ret

00003d3e <__fp_mpack>:
    3d3e:	9f 3f       	cpi	r25, 0xFF	; 255
    3d40:	31 f0       	breq	.+12     	; 0x3d4e <__fp_mpack_finite+0xc>

00003d42 <__fp_mpack_finite>:
    3d42:	91 50       	subi	r25, 0x01	; 1
    3d44:	20 f4       	brcc	.+8      	; 0x3d4e <__fp_mpack_finite+0xc>
    3d46:	87 95       	ror	r24
    3d48:	77 95       	ror	r23
    3d4a:	67 95       	ror	r22
    3d4c:	b7 95       	ror	r27
    3d4e:	88 0f       	add	r24, r24
    3d50:	91 1d       	adc	r25, r1
    3d52:	96 95       	lsr	r25
    3d54:	87 95       	ror	r24
    3d56:	97 f9       	bld	r25, 7
    3d58:	08 95       	ret

00003d5a <__fp_nan>:
    3d5a:	9f ef       	ldi	r25, 0xFF	; 255
    3d5c:	80 ec       	ldi	r24, 0xC0	; 192
    3d5e:	08 95       	ret

00003d60 <__fp_powser>:
    3d60:	df 93       	push	r29
    3d62:	cf 93       	push	r28
    3d64:	1f 93       	push	r17
    3d66:	0f 93       	push	r16
    3d68:	ff 92       	push	r15
    3d6a:	ef 92       	push	r14
    3d6c:	df 92       	push	r13
    3d6e:	7b 01       	movw	r14, r22
    3d70:	8c 01       	movw	r16, r24
    3d72:	68 94       	set
    3d74:	05 c0       	rjmp	.+10     	; 0x3d80 <__fp_powser+0x20>
    3d76:	da 2e       	mov	r13, r26
    3d78:	ef 01       	movw	r28, r30
    3d7a:	f0 d0       	rcall	.+480    	; 0x3f5c <__mulsf3x>
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e8 94       	clt
    3d80:	a5 91       	lpm	r26, Z+
    3d82:	25 91       	lpm	r18, Z+
    3d84:	35 91       	lpm	r19, Z+
    3d86:	45 91       	lpm	r20, Z+
    3d88:	55 91       	lpm	r21, Z+
    3d8a:	ae f3       	brts	.-22     	; 0x3d76 <__fp_powser+0x16>
    3d8c:	ef 01       	movw	r28, r30
    3d8e:	17 de       	rcall	.-978    	; 0x39be <__addsf3x>
    3d90:	fe 01       	movw	r30, r28
    3d92:	97 01       	movw	r18, r14
    3d94:	a8 01       	movw	r20, r16
    3d96:	da 94       	dec	r13
    3d98:	79 f7       	brne	.-34     	; 0x3d78 <__fp_powser+0x18>
    3d9a:	df 90       	pop	r13
    3d9c:	ef 90       	pop	r14
    3d9e:	ff 90       	pop	r15
    3da0:	0f 91       	pop	r16
    3da2:	1f 91       	pop	r17
    3da4:	cf 91       	pop	r28
    3da6:	df 91       	pop	r29
    3da8:	08 95       	ret

00003daa <__fp_pscA>:
    3daa:	00 24       	eor	r0, r0
    3dac:	0a 94       	dec	r0
    3dae:	16 16       	cp	r1, r22
    3db0:	17 06       	cpc	r1, r23
    3db2:	18 06       	cpc	r1, r24
    3db4:	09 06       	cpc	r0, r25
    3db6:	08 95       	ret

00003db8 <__fp_pscB>:
    3db8:	00 24       	eor	r0, r0
    3dba:	0a 94       	dec	r0
    3dbc:	12 16       	cp	r1, r18
    3dbe:	13 06       	cpc	r1, r19
    3dc0:	14 06       	cpc	r1, r20
    3dc2:	05 06       	cpc	r0, r21
    3dc4:	08 95       	ret

00003dc6 <__fp_round>:
    3dc6:	09 2e       	mov	r0, r25
    3dc8:	03 94       	inc	r0
    3dca:	00 0c       	add	r0, r0
    3dcc:	11 f4       	brne	.+4      	; 0x3dd2 <__fp_round+0xc>
    3dce:	88 23       	and	r24, r24
    3dd0:	52 f0       	brmi	.+20     	; 0x3de6 <__fp_round+0x20>
    3dd2:	bb 0f       	add	r27, r27
    3dd4:	40 f4       	brcc	.+16     	; 0x3de6 <__fp_round+0x20>
    3dd6:	bf 2b       	or	r27, r31
    3dd8:	11 f4       	brne	.+4      	; 0x3dde <__fp_round+0x18>
    3dda:	60 ff       	sbrs	r22, 0
    3ddc:	04 c0       	rjmp	.+8      	; 0x3de6 <__fp_round+0x20>
    3dde:	6f 5f       	subi	r22, 0xFF	; 255
    3de0:	7f 4f       	sbci	r23, 0xFF	; 255
    3de2:	8f 4f       	sbci	r24, 0xFF	; 255
    3de4:	9f 4f       	sbci	r25, 0xFF	; 255
    3de6:	08 95       	ret

00003de8 <__fp_split3>:
    3de8:	57 fd       	sbrc	r21, 7
    3dea:	90 58       	subi	r25, 0x80	; 128
    3dec:	44 0f       	add	r20, r20
    3dee:	55 1f       	adc	r21, r21
    3df0:	59 f0       	breq	.+22     	; 0x3e08 <__fp_splitA+0x10>
    3df2:	5f 3f       	cpi	r21, 0xFF	; 255
    3df4:	71 f0       	breq	.+28     	; 0x3e12 <__fp_splitA+0x1a>
    3df6:	47 95       	ror	r20

00003df8 <__fp_splitA>:
    3df8:	88 0f       	add	r24, r24
    3dfa:	97 fb       	bst	r25, 7
    3dfc:	99 1f       	adc	r25, r25
    3dfe:	61 f0       	breq	.+24     	; 0x3e18 <__fp_splitA+0x20>
    3e00:	9f 3f       	cpi	r25, 0xFF	; 255
    3e02:	79 f0       	breq	.+30     	; 0x3e22 <__fp_splitA+0x2a>
    3e04:	87 95       	ror	r24
    3e06:	08 95       	ret
    3e08:	12 16       	cp	r1, r18
    3e0a:	13 06       	cpc	r1, r19
    3e0c:	14 06       	cpc	r1, r20
    3e0e:	55 1f       	adc	r21, r21
    3e10:	f2 cf       	rjmp	.-28     	; 0x3df6 <__fp_split3+0xe>
    3e12:	46 95       	lsr	r20
    3e14:	f1 df       	rcall	.-30     	; 0x3df8 <__fp_splitA>
    3e16:	08 c0       	rjmp	.+16     	; 0x3e28 <__fp_splitA+0x30>
    3e18:	16 16       	cp	r1, r22
    3e1a:	17 06       	cpc	r1, r23
    3e1c:	18 06       	cpc	r1, r24
    3e1e:	99 1f       	adc	r25, r25
    3e20:	f1 cf       	rjmp	.-30     	; 0x3e04 <__fp_splitA+0xc>
    3e22:	86 95       	lsr	r24
    3e24:	71 05       	cpc	r23, r1
    3e26:	61 05       	cpc	r22, r1
    3e28:	08 94       	sec
    3e2a:	08 95       	ret

00003e2c <__fp_trunc>:
    3e2c:	e5 df       	rcall	.-54     	; 0x3df8 <__fp_splitA>
    3e2e:	a0 f0       	brcs	.+40     	; 0x3e58 <__fp_trunc+0x2c>
    3e30:	be e7       	ldi	r27, 0x7E	; 126
    3e32:	b9 17       	cp	r27, r25
    3e34:	88 f4       	brcc	.+34     	; 0x3e58 <__fp_trunc+0x2c>
    3e36:	bb 27       	eor	r27, r27
    3e38:	9f 38       	cpi	r25, 0x8F	; 143
    3e3a:	60 f4       	brcc	.+24     	; 0x3e54 <__fp_trunc+0x28>
    3e3c:	16 16       	cp	r1, r22
    3e3e:	b1 1d       	adc	r27, r1
    3e40:	67 2f       	mov	r22, r23
    3e42:	78 2f       	mov	r23, r24
    3e44:	88 27       	eor	r24, r24
    3e46:	98 5f       	subi	r25, 0xF8	; 248
    3e48:	f7 cf       	rjmp	.-18     	; 0x3e38 <__fp_trunc+0xc>
    3e4a:	86 95       	lsr	r24
    3e4c:	77 95       	ror	r23
    3e4e:	67 95       	ror	r22
    3e50:	b1 1d       	adc	r27, r1
    3e52:	93 95       	inc	r25
    3e54:	96 39       	cpi	r25, 0x96	; 150
    3e56:	c8 f3       	brcs	.-14     	; 0x3e4a <__fp_trunc+0x1e>
    3e58:	08 95       	ret

00003e5a <__fp_zero>:
    3e5a:	e8 94       	clt

00003e5c <__fp_szero>:
    3e5c:	bb 27       	eor	r27, r27
    3e5e:	66 27       	eor	r22, r22
    3e60:	77 27       	eor	r23, r23
    3e62:	cb 01       	movw	r24, r22
    3e64:	97 f9       	bld	r25, 7
    3e66:	08 95       	ret

00003e68 <__gesf2>:
    3e68:	25 df       	rcall	.-438    	; 0x3cb4 <__fp_cmp>
    3e6a:	08 f4       	brcc	.+2      	; 0x3e6e <__gesf2+0x6>
    3e6c:	8f ef       	ldi	r24, 0xFF	; 255
    3e6e:	08 95       	ret

00003e70 <inverse>:
    3e70:	9b 01       	movw	r18, r22
    3e72:	ac 01       	movw	r20, r24
    3e74:	60 e0       	ldi	r22, 0x00	; 0
    3e76:	70 e0       	ldi	r23, 0x00	; 0
    3e78:	80 e8       	ldi	r24, 0x80	; 128
    3e7a:	9f e3       	ldi	r25, 0x3F	; 63
    3e7c:	32 ce       	rjmp	.-924    	; 0x3ae2 <__divsf3>

00003e7e <lround>:
    3e7e:	bc df       	rcall	.-136    	; 0x3df8 <__fp_splitA>
    3e80:	58 f1       	brcs	.+86     	; 0x3ed8 <lround+0x5a>
    3e82:	9e 57       	subi	r25, 0x7E	; 126
    3e84:	58 f1       	brcs	.+86     	; 0x3edc <lround+0x5e>
    3e86:	98 51       	subi	r25, 0x18	; 24
    3e88:	a0 f0       	brcs	.+40     	; 0x3eb2 <lround+0x34>
    3e8a:	e9 f0       	breq	.+58     	; 0x3ec6 <lround+0x48>
    3e8c:	98 30       	cpi	r25, 0x08	; 8
    3e8e:	20 f5       	brcc	.+72     	; 0x3ed8 <lround+0x5a>
    3e90:	09 2e       	mov	r0, r25
    3e92:	99 27       	eor	r25, r25
    3e94:	66 0f       	add	r22, r22
    3e96:	77 1f       	adc	r23, r23
    3e98:	88 1f       	adc	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	0a 94       	dec	r0
    3e9e:	d1 f7       	brne	.-12     	; 0x3e94 <lround+0x16>
    3ea0:	12 c0       	rjmp	.+36     	; 0x3ec6 <lround+0x48>
    3ea2:	06 2e       	mov	r0, r22
    3ea4:	67 2f       	mov	r22, r23
    3ea6:	78 2f       	mov	r23, r24
    3ea8:	88 27       	eor	r24, r24
    3eaa:	98 5f       	subi	r25, 0xF8	; 248
    3eac:	11 f4       	brne	.+4      	; 0x3eb2 <lround+0x34>
    3eae:	00 0c       	add	r0, r0
    3eb0:	07 c0       	rjmp	.+14     	; 0x3ec0 <lround+0x42>
    3eb2:	99 3f       	cpi	r25, 0xF9	; 249
    3eb4:	b4 f3       	brlt	.-20     	; 0x3ea2 <lround+0x24>
    3eb6:	86 95       	lsr	r24
    3eb8:	77 95       	ror	r23
    3eba:	67 95       	ror	r22
    3ebc:	93 95       	inc	r25
    3ebe:	d9 f7       	brne	.-10     	; 0x3eb6 <lround+0x38>
    3ec0:	61 1d       	adc	r22, r1
    3ec2:	71 1d       	adc	r23, r1
    3ec4:	81 1d       	adc	r24, r1
    3ec6:	3e f4       	brtc	.+14     	; 0x3ed6 <lround+0x58>
    3ec8:	90 95       	com	r25
    3eca:	80 95       	com	r24
    3ecc:	70 95       	com	r23
    3ece:	61 95       	neg	r22
    3ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed6:	08 95       	ret
    3ed8:	68 94       	set
    3eda:	c0 cf       	rjmp	.-128    	; 0x3e5c <__fp_szero>
    3edc:	be cf       	rjmp	.-132    	; 0x3e5a <__fp_zero>

00003ede <modf>:
    3ede:	fa 01       	movw	r30, r20
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	aa 0f       	add	r26, r26
    3ee4:	bb 1f       	adc	r27, r27
    3ee6:	9b 01       	movw	r18, r22
    3ee8:	ac 01       	movw	r20, r24
    3eea:	bf 57       	subi	r27, 0x7F	; 127
    3eec:	28 f4       	brcc	.+10     	; 0x3ef8 <modf+0x1a>
    3eee:	22 27       	eor	r18, r18
    3ef0:	33 27       	eor	r19, r19
    3ef2:	44 27       	eor	r20, r20
    3ef4:	50 78       	andi	r21, 0x80	; 128
    3ef6:	1f c0       	rjmp	.+62     	; 0x3f36 <modf+0x58>
    3ef8:	b7 51       	subi	r27, 0x17	; 23
    3efa:	88 f4       	brcc	.+34     	; 0x3f1e <modf+0x40>
    3efc:	ab 2f       	mov	r26, r27
    3efe:	00 24       	eor	r0, r0
    3f00:	46 95       	lsr	r20
    3f02:	37 95       	ror	r19
    3f04:	27 95       	ror	r18
    3f06:	01 1c       	adc	r0, r1
    3f08:	a3 95       	inc	r26
    3f0a:	d2 f3       	brmi	.-12     	; 0x3f00 <modf+0x22>
    3f0c:	00 20       	and	r0, r0
    3f0e:	69 f0       	breq	.+26     	; 0x3f2a <modf+0x4c>
    3f10:	22 0f       	add	r18, r18
    3f12:	33 1f       	adc	r19, r19
    3f14:	44 1f       	adc	r20, r20
    3f16:	b3 95       	inc	r27
    3f18:	da f3       	brmi	.-10     	; 0x3f10 <modf+0x32>
    3f1a:	0d d0       	rcall	.+26     	; 0x3f36 <modf+0x58>
    3f1c:	3e cd       	rjmp	.-1412   	; 0x399a <__subsf3>
    3f1e:	61 30       	cpi	r22, 0x01	; 1
    3f20:	71 05       	cpc	r23, r1
    3f22:	a0 e8       	ldi	r26, 0x80	; 128
    3f24:	8a 07       	cpc	r24, r26
    3f26:	b9 46       	sbci	r27, 0x69	; 105
    3f28:	30 f4       	brcc	.+12     	; 0x3f36 <modf+0x58>
    3f2a:	9b 01       	movw	r18, r22
    3f2c:	ac 01       	movw	r20, r24
    3f2e:	66 27       	eor	r22, r22
    3f30:	77 27       	eor	r23, r23
    3f32:	88 27       	eor	r24, r24
    3f34:	90 78       	andi	r25, 0x80	; 128
    3f36:	30 96       	adiw	r30, 0x00	; 0
    3f38:	21 f0       	breq	.+8      	; 0x3f42 <modf+0x64>
    3f3a:	20 83       	st	Z, r18
    3f3c:	31 83       	std	Z+1, r19	; 0x01
    3f3e:	42 83       	std	Z+2, r20	; 0x02
    3f40:	53 83       	std	Z+3, r21	; 0x03
    3f42:	08 95       	ret

00003f44 <__mulsf3>:
    3f44:	0b d0       	rcall	.+22     	; 0x3f5c <__mulsf3x>
    3f46:	3f cf       	rjmp	.-386    	; 0x3dc6 <__fp_round>
    3f48:	30 df       	rcall	.-416    	; 0x3daa <__fp_pscA>
    3f4a:	28 f0       	brcs	.+10     	; 0x3f56 <__mulsf3+0x12>
    3f4c:	35 df       	rcall	.-406    	; 0x3db8 <__fp_pscB>
    3f4e:	18 f0       	brcs	.+6      	; 0x3f56 <__mulsf3+0x12>
    3f50:	95 23       	and	r25, r21
    3f52:	09 f0       	breq	.+2      	; 0x3f56 <__mulsf3+0x12>
    3f54:	d3 ce       	rjmp	.-602    	; 0x3cfc <__fp_inf>
    3f56:	01 cf       	rjmp	.-510    	; 0x3d5a <__fp_nan>
    3f58:	11 24       	eor	r1, r1
    3f5a:	80 cf       	rjmp	.-256    	; 0x3e5c <__fp_szero>

00003f5c <__mulsf3x>:
    3f5c:	45 df       	rcall	.-374    	; 0x3de8 <__fp_split3>
    3f5e:	a0 f3       	brcs	.-24     	; 0x3f48 <__mulsf3+0x4>

00003f60 <__mulsf3_pse>:
    3f60:	95 9f       	mul	r25, r21
    3f62:	d1 f3       	breq	.-12     	; 0x3f58 <__mulsf3+0x14>
    3f64:	95 0f       	add	r25, r21
    3f66:	50 e0       	ldi	r21, 0x00	; 0
    3f68:	55 1f       	adc	r21, r21
    3f6a:	62 9f       	mul	r22, r18
    3f6c:	f0 01       	movw	r30, r0
    3f6e:	72 9f       	mul	r23, r18
    3f70:	bb 27       	eor	r27, r27
    3f72:	f0 0d       	add	r31, r0
    3f74:	b1 1d       	adc	r27, r1
    3f76:	63 9f       	mul	r22, r19
    3f78:	aa 27       	eor	r26, r26
    3f7a:	f0 0d       	add	r31, r0
    3f7c:	b1 1d       	adc	r27, r1
    3f7e:	aa 1f       	adc	r26, r26
    3f80:	64 9f       	mul	r22, r20
    3f82:	66 27       	eor	r22, r22
    3f84:	b0 0d       	add	r27, r0
    3f86:	a1 1d       	adc	r26, r1
    3f88:	66 1f       	adc	r22, r22
    3f8a:	82 9f       	mul	r24, r18
    3f8c:	22 27       	eor	r18, r18
    3f8e:	b0 0d       	add	r27, r0
    3f90:	a1 1d       	adc	r26, r1
    3f92:	62 1f       	adc	r22, r18
    3f94:	73 9f       	mul	r23, r19
    3f96:	b0 0d       	add	r27, r0
    3f98:	a1 1d       	adc	r26, r1
    3f9a:	62 1f       	adc	r22, r18
    3f9c:	83 9f       	mul	r24, r19
    3f9e:	a0 0d       	add	r26, r0
    3fa0:	61 1d       	adc	r22, r1
    3fa2:	22 1f       	adc	r18, r18
    3fa4:	74 9f       	mul	r23, r20
    3fa6:	33 27       	eor	r19, r19
    3fa8:	a0 0d       	add	r26, r0
    3faa:	61 1d       	adc	r22, r1
    3fac:	23 1f       	adc	r18, r19
    3fae:	84 9f       	mul	r24, r20
    3fb0:	60 0d       	add	r22, r0
    3fb2:	21 1d       	adc	r18, r1
    3fb4:	82 2f       	mov	r24, r18
    3fb6:	76 2f       	mov	r23, r22
    3fb8:	6a 2f       	mov	r22, r26
    3fba:	11 24       	eor	r1, r1
    3fbc:	9f 57       	subi	r25, 0x7F	; 127
    3fbe:	50 40       	sbci	r21, 0x00	; 0
    3fc0:	8a f0       	brmi	.+34     	; 0x3fe4 <__mulsf3_pse+0x84>
    3fc2:	e1 f0       	breq	.+56     	; 0x3ffc <__mulsf3_pse+0x9c>
    3fc4:	88 23       	and	r24, r24
    3fc6:	4a f0       	brmi	.+18     	; 0x3fda <__mulsf3_pse+0x7a>
    3fc8:	ee 0f       	add	r30, r30
    3fca:	ff 1f       	adc	r31, r31
    3fcc:	bb 1f       	adc	r27, r27
    3fce:	66 1f       	adc	r22, r22
    3fd0:	77 1f       	adc	r23, r23
    3fd2:	88 1f       	adc	r24, r24
    3fd4:	91 50       	subi	r25, 0x01	; 1
    3fd6:	50 40       	sbci	r21, 0x00	; 0
    3fd8:	a9 f7       	brne	.-22     	; 0x3fc4 <__mulsf3_pse+0x64>
    3fda:	9e 3f       	cpi	r25, 0xFE	; 254
    3fdc:	51 05       	cpc	r21, r1
    3fde:	70 f0       	brcs	.+28     	; 0x3ffc <__mulsf3_pse+0x9c>
    3fe0:	8d ce       	rjmp	.-742    	; 0x3cfc <__fp_inf>
    3fe2:	3c cf       	rjmp	.-392    	; 0x3e5c <__fp_szero>
    3fe4:	5f 3f       	cpi	r21, 0xFF	; 255
    3fe6:	ec f3       	brlt	.-6      	; 0x3fe2 <__mulsf3_pse+0x82>
    3fe8:	98 3e       	cpi	r25, 0xE8	; 232
    3fea:	dc f3       	brlt	.-10     	; 0x3fe2 <__mulsf3_pse+0x82>
    3fec:	86 95       	lsr	r24
    3fee:	77 95       	ror	r23
    3ff0:	67 95       	ror	r22
    3ff2:	b7 95       	ror	r27
    3ff4:	f7 95       	ror	r31
    3ff6:	e7 95       	ror	r30
    3ff8:	9f 5f       	subi	r25, 0xFF	; 255
    3ffa:	c1 f7       	brne	.-16     	; 0x3fec <__mulsf3_pse+0x8c>
    3ffc:	fe 2b       	or	r31, r30
    3ffe:	88 0f       	add	r24, r24
    4000:	91 1d       	adc	r25, r1
    4002:	96 95       	lsr	r25
    4004:	87 95       	ror	r24
    4006:	97 f9       	bld	r25, 7
    4008:	08 95       	ret

0000400a <round>:
    400a:	f6 de       	rcall	.-532    	; 0x3df8 <__fp_splitA>
    400c:	e0 f0       	brcs	.+56     	; 0x4046 <round+0x3c>
    400e:	9e 37       	cpi	r25, 0x7E	; 126
    4010:	d8 f0       	brcs	.+54     	; 0x4048 <round+0x3e>
    4012:	96 39       	cpi	r25, 0x96	; 150
    4014:	b8 f4       	brcc	.+46     	; 0x4044 <round+0x3a>
    4016:	9e 38       	cpi	r25, 0x8E	; 142
    4018:	48 f4       	brcc	.+18     	; 0x402c <round+0x22>
    401a:	67 2f       	mov	r22, r23
    401c:	78 2f       	mov	r23, r24
    401e:	88 27       	eor	r24, r24
    4020:	98 5f       	subi	r25, 0xF8	; 248
    4022:	f9 cf       	rjmp	.-14     	; 0x4016 <round+0xc>
    4024:	86 95       	lsr	r24
    4026:	77 95       	ror	r23
    4028:	67 95       	ror	r22
    402a:	93 95       	inc	r25
    402c:	95 39       	cpi	r25, 0x95	; 149
    402e:	d0 f3       	brcs	.-12     	; 0x4024 <round+0x1a>
    4030:	b6 2f       	mov	r27, r22
    4032:	b1 70       	andi	r27, 0x01	; 1
    4034:	6b 0f       	add	r22, r27
    4036:	71 1d       	adc	r23, r1
    4038:	81 1d       	adc	r24, r1
    403a:	20 f4       	brcc	.+8      	; 0x4044 <round+0x3a>
    403c:	87 95       	ror	r24
    403e:	77 95       	ror	r23
    4040:	67 95       	ror	r22
    4042:	93 95       	inc	r25
    4044:	61 ce       	rjmp	.-830    	; 0x3d08 <__fp_mintl>
    4046:	7b ce       	rjmp	.-778    	; 0x3d3e <__fp_mpack>
    4048:	09 cf       	rjmp	.-494    	; 0x3e5c <__fp_szero>
    404a:	11 f4       	brne	.+4      	; 0x4050 <round+0x46>
    404c:	0e f4       	brtc	.+2      	; 0x4050 <round+0x46>
    404e:	85 ce       	rjmp	.-758    	; 0x3d5a <__fp_nan>
    4050:	76 ce       	rjmp	.-788    	; 0x3d3e <__fp_mpack>

00004052 <sqrt>:
    4052:	d2 de       	rcall	.-604    	; 0x3df8 <__fp_splitA>
    4054:	d0 f3       	brcs	.-12     	; 0x404a <round+0x40>
    4056:	99 23       	and	r25, r25
    4058:	d9 f3       	breq	.-10     	; 0x4050 <round+0x46>
    405a:	ce f3       	brts	.-14     	; 0x404e <round+0x44>
    405c:	9f 57       	subi	r25, 0x7F	; 127
    405e:	55 0b       	sbc	r21, r21
    4060:	87 ff       	sbrs	r24, 7
    4062:	3f d0       	rcall	.+126    	; 0x40e2 <__fp_norm2>
    4064:	00 24       	eor	r0, r0
    4066:	a0 e6       	ldi	r26, 0x60	; 96
    4068:	40 ea       	ldi	r20, 0xA0	; 160
    406a:	90 01       	movw	r18, r0
    406c:	80 58       	subi	r24, 0x80	; 128
    406e:	56 95       	lsr	r21
    4070:	97 95       	ror	r25
    4072:	28 f4       	brcc	.+10     	; 0x407e <sqrt+0x2c>
    4074:	80 5c       	subi	r24, 0xC0	; 192
    4076:	66 0f       	add	r22, r22
    4078:	77 1f       	adc	r23, r23
    407a:	88 1f       	adc	r24, r24
    407c:	20 f0       	brcs	.+8      	; 0x4086 <sqrt+0x34>
    407e:	26 17       	cp	r18, r22
    4080:	37 07       	cpc	r19, r23
    4082:	48 07       	cpc	r20, r24
    4084:	30 f4       	brcc	.+12     	; 0x4092 <sqrt+0x40>
    4086:	62 1b       	sub	r22, r18
    4088:	73 0b       	sbc	r23, r19
    408a:	84 0b       	sbc	r24, r20
    408c:	20 29       	or	r18, r0
    408e:	31 29       	or	r19, r1
    4090:	4a 2b       	or	r20, r26
    4092:	a6 95       	lsr	r26
    4094:	17 94       	ror	r1
    4096:	07 94       	ror	r0
    4098:	20 25       	eor	r18, r0
    409a:	31 25       	eor	r19, r1
    409c:	4a 27       	eor	r20, r26
    409e:	58 f7       	brcc	.-42     	; 0x4076 <sqrt+0x24>
    40a0:	66 0f       	add	r22, r22
    40a2:	77 1f       	adc	r23, r23
    40a4:	88 1f       	adc	r24, r24
    40a6:	20 f0       	brcs	.+8      	; 0x40b0 <sqrt+0x5e>
    40a8:	26 17       	cp	r18, r22
    40aa:	37 07       	cpc	r19, r23
    40ac:	48 07       	cpc	r20, r24
    40ae:	30 f4       	brcc	.+12     	; 0x40bc <sqrt+0x6a>
    40b0:	62 0b       	sbc	r22, r18
    40b2:	73 0b       	sbc	r23, r19
    40b4:	84 0b       	sbc	r24, r20
    40b6:	20 0d       	add	r18, r0
    40b8:	31 1d       	adc	r19, r1
    40ba:	41 1d       	adc	r20, r1
    40bc:	a0 95       	com	r26
    40be:	81 f7       	brne	.-32     	; 0x40a0 <sqrt+0x4e>
    40c0:	b9 01       	movw	r22, r18
    40c2:	84 2f       	mov	r24, r20
    40c4:	91 58       	subi	r25, 0x81	; 129
    40c6:	88 0f       	add	r24, r24
    40c8:	96 95       	lsr	r25
    40ca:	87 95       	ror	r24
    40cc:	08 95       	ret

000040ce <square>:
    40ce:	9b 01       	movw	r18, r22
    40d0:	ac 01       	movw	r20, r24
    40d2:	38 cf       	rjmp	.-400    	; 0x3f44 <__mulsf3>

000040d4 <trunc>:
    40d4:	ab de       	rcall	.-682    	; 0x3e2c <__fp_trunc>
    40d6:	20 f0       	brcs	.+8      	; 0x40e0 <trunc+0xc>
    40d8:	9f 37       	cpi	r25, 0x7F	; 127
    40da:	08 f4       	brcc	.+2      	; 0x40de <trunc+0xa>
    40dc:	bf ce       	rjmp	.-642    	; 0x3e5c <__fp_szero>
    40de:	14 ce       	rjmp	.-984    	; 0x3d08 <__fp_mintl>
    40e0:	2e ce       	rjmp	.-932    	; 0x3d3e <__fp_mpack>

000040e2 <__fp_norm2>:
    40e2:	91 50       	subi	r25, 0x01	; 1
    40e4:	50 40       	sbci	r21, 0x00	; 0
    40e6:	66 0f       	add	r22, r22
    40e8:	77 1f       	adc	r23, r23
    40ea:	88 1f       	adc	r24, r24
    40ec:	d2 f7       	brpl	.-12     	; 0x40e2 <__fp_norm2>
    40ee:	08 95       	ret

000040f0 <__mulsi3>:
    40f0:	62 9f       	mul	r22, r18
    40f2:	d0 01       	movw	r26, r0
    40f4:	73 9f       	mul	r23, r19
    40f6:	f0 01       	movw	r30, r0
    40f8:	82 9f       	mul	r24, r18
    40fa:	e0 0d       	add	r30, r0
    40fc:	f1 1d       	adc	r31, r1
    40fe:	64 9f       	mul	r22, r20
    4100:	e0 0d       	add	r30, r0
    4102:	f1 1d       	adc	r31, r1
    4104:	92 9f       	mul	r25, r18
    4106:	f0 0d       	add	r31, r0
    4108:	83 9f       	mul	r24, r19
    410a:	f0 0d       	add	r31, r0
    410c:	74 9f       	mul	r23, r20
    410e:	f0 0d       	add	r31, r0
    4110:	65 9f       	mul	r22, r21
    4112:	f0 0d       	add	r31, r0
    4114:	99 27       	eor	r25, r25
    4116:	72 9f       	mul	r23, r18
    4118:	b0 0d       	add	r27, r0
    411a:	e1 1d       	adc	r30, r1
    411c:	f9 1f       	adc	r31, r25
    411e:	63 9f       	mul	r22, r19
    4120:	b0 0d       	add	r27, r0
    4122:	e1 1d       	adc	r30, r1
    4124:	f9 1f       	adc	r31, r25
    4126:	bd 01       	movw	r22, r26
    4128:	cf 01       	movw	r24, r30
    412a:	11 24       	eor	r1, r1
    412c:	08 95       	ret

0000412e <__divmodhi4>:
    412e:	97 fb       	bst	r25, 7
    4130:	09 2e       	mov	r0, r25
    4132:	07 26       	eor	r0, r23
    4134:	0a d0       	rcall	.+20     	; 0x414a <__divmodhi4_neg1>
    4136:	77 fd       	sbrc	r23, 7
    4138:	04 d0       	rcall	.+8      	; 0x4142 <__divmodhi4_neg2>
    413a:	49 d0       	rcall	.+146    	; 0x41ce <__udivmodhi4>
    413c:	06 d0       	rcall	.+12     	; 0x414a <__divmodhi4_neg1>
    413e:	00 20       	and	r0, r0
    4140:	1a f4       	brpl	.+6      	; 0x4148 <__divmodhi4_exit>

00004142 <__divmodhi4_neg2>:
    4142:	70 95       	com	r23
    4144:	61 95       	neg	r22
    4146:	7f 4f       	sbci	r23, 0xFF	; 255

00004148 <__divmodhi4_exit>:
    4148:	08 95       	ret

0000414a <__divmodhi4_neg1>:
    414a:	f6 f7       	brtc	.-4      	; 0x4148 <__divmodhi4_exit>
    414c:	90 95       	com	r25
    414e:	81 95       	neg	r24
    4150:	9f 4f       	sbci	r25, 0xFF	; 255
    4152:	08 95       	ret

00004154 <__udivmodsi4>:
    4154:	a1 e2       	ldi	r26, 0x21	; 33
    4156:	1a 2e       	mov	r1, r26
    4158:	aa 1b       	sub	r26, r26
    415a:	bb 1b       	sub	r27, r27
    415c:	fd 01       	movw	r30, r26
    415e:	0d c0       	rjmp	.+26     	; 0x417a <__udivmodsi4_ep>

00004160 <__udivmodsi4_loop>:
    4160:	aa 1f       	adc	r26, r26
    4162:	bb 1f       	adc	r27, r27
    4164:	ee 1f       	adc	r30, r30
    4166:	ff 1f       	adc	r31, r31
    4168:	a2 17       	cp	r26, r18
    416a:	b3 07       	cpc	r27, r19
    416c:	e4 07       	cpc	r30, r20
    416e:	f5 07       	cpc	r31, r21
    4170:	20 f0       	brcs	.+8      	; 0x417a <__udivmodsi4_ep>
    4172:	a2 1b       	sub	r26, r18
    4174:	b3 0b       	sbc	r27, r19
    4176:	e4 0b       	sbc	r30, r20
    4178:	f5 0b       	sbc	r31, r21

0000417a <__udivmodsi4_ep>:
    417a:	66 1f       	adc	r22, r22
    417c:	77 1f       	adc	r23, r23
    417e:	88 1f       	adc	r24, r24
    4180:	99 1f       	adc	r25, r25
    4182:	1a 94       	dec	r1
    4184:	69 f7       	brne	.-38     	; 0x4160 <__udivmodsi4_loop>
    4186:	60 95       	com	r22
    4188:	70 95       	com	r23
    418a:	80 95       	com	r24
    418c:	90 95       	com	r25
    418e:	9b 01       	movw	r18, r22
    4190:	ac 01       	movw	r20, r24
    4192:	bd 01       	movw	r22, r26
    4194:	cf 01       	movw	r24, r30
    4196:	08 95       	ret

00004198 <__divmodsi4>:
    4198:	97 fb       	bst	r25, 7
    419a:	09 2e       	mov	r0, r25
    419c:	05 26       	eor	r0, r21
    419e:	0e d0       	rcall	.+28     	; 0x41bc <__divmodsi4_neg1>
    41a0:	57 fd       	sbrc	r21, 7
    41a2:	04 d0       	rcall	.+8      	; 0x41ac <__divmodsi4_neg2>
    41a4:	d7 df       	rcall	.-82     	; 0x4154 <__udivmodsi4>
    41a6:	0a d0       	rcall	.+20     	; 0x41bc <__divmodsi4_neg1>
    41a8:	00 1c       	adc	r0, r0
    41aa:	38 f4       	brcc	.+14     	; 0x41ba <__divmodsi4_exit>

000041ac <__divmodsi4_neg2>:
    41ac:	50 95       	com	r21
    41ae:	40 95       	com	r20
    41b0:	30 95       	com	r19
    41b2:	21 95       	neg	r18
    41b4:	3f 4f       	sbci	r19, 0xFF	; 255
    41b6:	4f 4f       	sbci	r20, 0xFF	; 255
    41b8:	5f 4f       	sbci	r21, 0xFF	; 255

000041ba <__divmodsi4_exit>:
    41ba:	08 95       	ret

000041bc <__divmodsi4_neg1>:
    41bc:	f6 f7       	brtc	.-4      	; 0x41ba <__divmodsi4_exit>
    41be:	90 95       	com	r25
    41c0:	80 95       	com	r24
    41c2:	70 95       	com	r23
    41c4:	61 95       	neg	r22
    41c6:	7f 4f       	sbci	r23, 0xFF	; 255
    41c8:	8f 4f       	sbci	r24, 0xFF	; 255
    41ca:	9f 4f       	sbci	r25, 0xFF	; 255
    41cc:	08 95       	ret

000041ce <__udivmodhi4>:
    41ce:	aa 1b       	sub	r26, r26
    41d0:	bb 1b       	sub	r27, r27
    41d2:	51 e1       	ldi	r21, 0x11	; 17
    41d4:	07 c0       	rjmp	.+14     	; 0x41e4 <__udivmodhi4_ep>

000041d6 <__udivmodhi4_loop>:
    41d6:	aa 1f       	adc	r26, r26
    41d8:	bb 1f       	adc	r27, r27
    41da:	a6 17       	cp	r26, r22
    41dc:	b7 07       	cpc	r27, r23
    41de:	10 f0       	brcs	.+4      	; 0x41e4 <__udivmodhi4_ep>
    41e0:	a6 1b       	sub	r26, r22
    41e2:	b7 0b       	sbc	r27, r23

000041e4 <__udivmodhi4_ep>:
    41e4:	88 1f       	adc	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	5a 95       	dec	r21
    41ea:	a9 f7       	brne	.-22     	; 0x41d6 <__udivmodhi4_loop>
    41ec:	80 95       	com	r24
    41ee:	90 95       	com	r25
    41f0:	bc 01       	movw	r22, r24
    41f2:	cd 01       	movw	r24, r26
    41f4:	08 95       	ret

000041f6 <strtod>:
    41f6:	8f 92       	push	r8
    41f8:	9f 92       	push	r9
    41fa:	af 92       	push	r10
    41fc:	bf 92       	push	r11
    41fe:	cf 92       	push	r12
    4200:	df 92       	push	r13
    4202:	ef 92       	push	r14
    4204:	ff 92       	push	r15
    4206:	0f 93       	push	r16
    4208:	1f 93       	push	r17
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	ec 01       	movw	r28, r24
    4210:	5b 01       	movw	r10, r22
    4212:	61 15       	cp	r22, r1
    4214:	71 05       	cpc	r23, r1
    4216:	19 f0       	breq	.+6      	; 0x421e <strtod+0x28>
    4218:	fb 01       	movw	r30, r22
    421a:	91 83       	std	Z+1, r25	; 0x01
    421c:	80 83       	st	Z, r24
    421e:	f9 90       	ld	r15, Y+
    4220:	8f 2d       	mov	r24, r15
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 69 22 	call	0x44d2	; 0x44d2 <isspace>
    4228:	89 2b       	or	r24, r25
    422a:	c9 f7       	brne	.-14     	; 0x421e <strtod+0x28>
    422c:	fd e2       	ldi	r31, 0x2D	; 45
    422e:	ff 16       	cp	r15, r31
    4230:	21 f4       	brne	.+8      	; 0x423a <strtod+0x44>
    4232:	f9 90       	ld	r15, Y+
    4234:	ee 24       	eor	r14, r14
    4236:	e3 94       	inc	r14
    4238:	05 c0       	rjmp	.+10     	; 0x4244 <strtod+0x4e>
    423a:	2b e2       	ldi	r18, 0x2B	; 43
    423c:	f2 16       	cp	r15, r18
    423e:	09 f4       	brne	.+2      	; 0x4242 <strtod+0x4c>
    4240:	f9 90       	ld	r15, Y+
    4242:	ee 24       	eor	r14, r14
    4244:	8e 01       	movw	r16, r28
    4246:	01 50       	subi	r16, 0x01	; 1
    4248:	10 40       	sbci	r17, 0x00	; 0
    424a:	c8 01       	movw	r24, r16
    424c:	62 ee       	ldi	r22, 0xE2	; 226
    424e:	74 e0       	ldi	r23, 0x04	; 4
    4250:	43 e0       	ldi	r20, 0x03	; 3
    4252:	50 e0       	ldi	r21, 0x00	; 0
    4254:	0e 94 71 22 	call	0x44e2	; 0x44e2 <strncasecmp_P>
    4258:	89 2b       	or	r24, r25
    425a:	01 f5       	brne	.+64     	; 0x429c <strtod+0xa6>
    425c:	8e 01       	movw	r16, r28
    425e:	0e 5f       	subi	r16, 0xFE	; 254
    4260:	1f 4f       	sbci	r17, 0xFF	; 255
    4262:	c8 01       	movw	r24, r16
    4264:	65 ee       	ldi	r22, 0xE5	; 229
    4266:	74 e0       	ldi	r23, 0x04	; 4
    4268:	45 e0       	ldi	r20, 0x05	; 5
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	0e 94 71 22 	call	0x44e2	; 0x44e2 <strncasecmp_P>
    4270:	89 2b       	or	r24, r25
    4272:	19 f4       	brne	.+6      	; 0x427a <strtod+0x84>
    4274:	8e 01       	movw	r16, r28
    4276:	09 5f       	subi	r16, 0xF9	; 249
    4278:	1f 4f       	sbci	r17, 0xFF	; 255
    427a:	a1 14       	cp	r10, r1
    427c:	b1 04       	cpc	r11, r1
    427e:	19 f0       	breq	.+6      	; 0x4286 <strtod+0x90>
    4280:	f5 01       	movw	r30, r10
    4282:	11 83       	std	Z+1, r17	; 0x01
    4284:	00 83       	st	Z, r16
    4286:	e0 fc       	sbrc	r14, 0
    4288:	04 c0       	rjmp	.+8      	; 0x4292 <strtod+0x9c>
    428a:	70 e0       	ldi	r23, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	80 e8       	ldi	r24, 0x80	; 128
    4290:	14 c0       	rjmp	.+40     	; 0x42ba <strtod+0xc4>
    4292:	70 e0       	ldi	r23, 0x00	; 0
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	80 e8       	ldi	r24, 0x80	; 128
    4298:	6f ef       	ldi	r22, 0xFF	; 255
    429a:	08 c1       	rjmp	.+528    	; 0x44ac <strtod+0x2b6>
    429c:	c8 01       	movw	r24, r16
    429e:	6a ee       	ldi	r22, 0xEA	; 234
    42a0:	74 e0       	ldi	r23, 0x04	; 4
    42a2:	43 e0       	ldi	r20, 0x03	; 3
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	0e 94 71 22 	call	0x44e2	; 0x44e2 <strncasecmp_P>
    42aa:	89 2b       	or	r24, r25
    42ac:	69 f4       	brne	.+26     	; 0x42c8 <strtod+0xd2>
    42ae:	a1 14       	cp	r10, r1
    42b0:	b1 04       	cpc	r11, r1
    42b2:	29 f4       	brne	.+10     	; 0x42be <strtod+0xc8>
    42b4:	70 e0       	ldi	r23, 0x00	; 0
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	80 ec       	ldi	r24, 0xC0	; 192
    42ba:	6f e7       	ldi	r22, 0x7F	; 127
    42bc:	f7 c0       	rjmp	.+494    	; 0x44ac <strtod+0x2b6>
    42be:	22 96       	adiw	r28, 0x02	; 2
    42c0:	f5 01       	movw	r30, r10
    42c2:	d1 83       	std	Z+1, r29	; 0x01
    42c4:	c0 83       	st	Z, r28
    42c6:	f6 cf       	rjmp	.-20     	; 0x42b4 <strtod+0xbe>
    42c8:	88 24       	eor	r8, r8
    42ca:	99 24       	eor	r9, r9
    42cc:	40 e0       	ldi	r20, 0x00	; 0
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	60 e0       	ldi	r22, 0x00	; 0
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	ef 2d       	mov	r30, r15
    42d6:	e0 53       	subi	r30, 0x30	; 48
    42d8:	ea 30       	cpi	r30, 0x0A	; 10
    42da:	a0 f5       	brcc	.+104    	; 0x4344 <strtod+0x14e>
    42dc:	f2 e0       	ldi	r31, 0x02	; 2
    42de:	ef 2a       	or	r14, r31
    42e0:	8e 2d       	mov	r24, r14
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	9c 01       	movw	r18, r24
    42e6:	28 70       	andi	r18, 0x08	; 8
    42e8:	30 70       	andi	r19, 0x00	; 0
    42ea:	e2 fe       	sbrs	r14, 2
    42ec:	06 c0       	rjmp	.+12     	; 0x42fa <strtod+0x104>
    42ee:	23 2b       	or	r18, r19
    42f0:	79 f5       	brne	.+94     	; 0x4350 <strtod+0x15a>
    42f2:	08 94       	sec
    42f4:	81 1c       	adc	r8, r1
    42f6:	91 1c       	adc	r9, r1
    42f8:	2b c0       	rjmp	.+86     	; 0x4350 <strtod+0x15a>
    42fa:	23 2b       	or	r18, r19
    42fc:	19 f0       	breq	.+6      	; 0x4304 <strtod+0x10e>
    42fe:	08 94       	sec
    4300:	81 08       	sbc	r8, r1
    4302:	91 08       	sbc	r9, r1
    4304:	db 01       	movw	r26, r22
    4306:	ca 01       	movw	r24, r20
    4308:	12 e0       	ldi	r17, 0x02	; 2
    430a:	88 0f       	add	r24, r24
    430c:	99 1f       	adc	r25, r25
    430e:	aa 1f       	adc	r26, r26
    4310:	bb 1f       	adc	r27, r27
    4312:	1a 95       	dec	r17
    4314:	d1 f7       	brne	.-12     	; 0x430a <strtod+0x114>
    4316:	48 0f       	add	r20, r24
    4318:	59 1f       	adc	r21, r25
    431a:	6a 1f       	adc	r22, r26
    431c:	7b 1f       	adc	r23, r27
    431e:	44 0f       	add	r20, r20
    4320:	55 1f       	adc	r21, r21
    4322:	66 1f       	adc	r22, r22
    4324:	77 1f       	adc	r23, r23
    4326:	4e 0f       	add	r20, r30
    4328:	51 1d       	adc	r21, r1
    432a:	61 1d       	adc	r22, r1
    432c:	71 1d       	adc	r23, r1
    432e:	48 39       	cpi	r20, 0x98	; 152
    4330:	29 e9       	ldi	r18, 0x99	; 153
    4332:	52 07       	cpc	r21, r18
    4334:	29 e9       	ldi	r18, 0x99	; 153
    4336:	62 07       	cpc	r22, r18
    4338:	29 e1       	ldi	r18, 0x19	; 25
    433a:	72 07       	cpc	r23, r18
    433c:	48 f0       	brcs	.+18     	; 0x4350 <strtod+0x15a>
    433e:	84 e0       	ldi	r24, 0x04	; 4
    4340:	e8 2a       	or	r14, r24
    4342:	06 c0       	rjmp	.+12     	; 0x4350 <strtod+0x15a>
    4344:	ee 3f       	cpi	r30, 0xFE	; 254
    4346:	31 f4       	brne	.+12     	; 0x4354 <strtod+0x15e>
    4348:	e3 fc       	sbrc	r14, 3
    434a:	39 c0       	rjmp	.+114    	; 0x43be <strtod+0x1c8>
    434c:	98 e0       	ldi	r25, 0x08	; 8
    434e:	e9 2a       	or	r14, r25
    4350:	f9 90       	ld	r15, Y+
    4352:	c0 cf       	rjmp	.-128    	; 0x42d4 <strtod+0xde>
    4354:	e5 33       	cpi	r30, 0x35	; 53
    4356:	11 f0       	breq	.+4      	; 0x435c <strtod+0x166>
    4358:	e5 31       	cpi	r30, 0x15	; 21
    435a:	89 f5       	brne	.+98     	; 0x43be <strtod+0x1c8>
    435c:	29 91       	ld	r18, Y+
    435e:	2d 32       	cpi	r18, 0x2D	; 45
    4360:	19 f4       	brne	.+6      	; 0x4368 <strtod+0x172>
    4362:	e0 e1       	ldi	r30, 0x10	; 16
    4364:	ee 2a       	or	r14, r30
    4366:	05 c0       	rjmp	.+10     	; 0x4372 <strtod+0x17c>
    4368:	2b 32       	cpi	r18, 0x2B	; 43
    436a:	19 f0       	breq	.+6      	; 0x4372 <strtod+0x17c>
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	03 c0       	rjmp	.+6      	; 0x4378 <strtod+0x182>
    4372:	29 91       	ld	r18, Y+
    4374:	82 e0       	ldi	r24, 0x02	; 2
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	e2 2f       	mov	r30, r18
    437a:	e0 53       	subi	r30, 0x30	; 48
    437c:	ea 30       	cpi	r30, 0x0A	; 10
    437e:	18 f0       	brcs	.+6      	; 0x4386 <strtod+0x190>
    4380:	c8 1b       	sub	r28, r24
    4382:	d9 0b       	sbc	r29, r25
    4384:	1c c0       	rjmp	.+56     	; 0x43be <strtod+0x1c8>
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	fc e0       	ldi	r31, 0x0C	; 12
    438c:	20 38       	cpi	r18, 0x80	; 128
    438e:	3f 07       	cpc	r19, r31
    4390:	5c f4       	brge	.+22     	; 0x43a8 <strtod+0x1b2>
    4392:	c9 01       	movw	r24, r18
    4394:	88 0f       	add	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	88 0f       	add	r24, r24
    439a:	99 1f       	adc	r25, r25
    439c:	28 0f       	add	r18, r24
    439e:	39 1f       	adc	r19, r25
    43a0:	22 0f       	add	r18, r18
    43a2:	33 1f       	adc	r19, r19
    43a4:	2e 0f       	add	r18, r30
    43a6:	31 1d       	adc	r19, r1
    43a8:	e9 91       	ld	r30, Y+
    43aa:	e0 53       	subi	r30, 0x30	; 48
    43ac:	ea 30       	cpi	r30, 0x0A	; 10
    43ae:	68 f3       	brcs	.-38     	; 0x438a <strtod+0x194>
    43b0:	e4 fe       	sbrs	r14, 4
    43b2:	03 c0       	rjmp	.+6      	; 0x43ba <strtod+0x1c4>
    43b4:	30 95       	com	r19
    43b6:	21 95       	neg	r18
    43b8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ba:	82 0e       	add	r8, r18
    43bc:	93 1e       	adc	r9, r19
    43be:	ce 2c       	mov	r12, r14
    43c0:	dd 24       	eor	r13, r13
    43c2:	e1 fe       	sbrs	r14, 1
    43c4:	07 c0       	rjmp	.+14     	; 0x43d4 <strtod+0x1de>
    43c6:	a1 14       	cp	r10, r1
    43c8:	b1 04       	cpc	r11, r1
    43ca:	21 f0       	breq	.+8      	; 0x43d4 <strtod+0x1de>
    43cc:	21 97       	sbiw	r28, 0x01	; 1
    43ce:	f5 01       	movw	r30, r10
    43d0:	d1 83       	std	Z+1, r29	; 0x01
    43d2:	c0 83       	st	Z, r28
    43d4:	cb 01       	movw	r24, r22
    43d6:	ba 01       	movw	r22, r20
    43d8:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__floatunsisf>
    43dc:	7b 01       	movw	r14, r22
    43de:	8c 01       	movw	r16, r24
    43e0:	f3 e0       	ldi	r31, 0x03	; 3
    43e2:	cf 22       	and	r12, r31
    43e4:	dd 24       	eor	r13, r13
    43e6:	23 e0       	ldi	r18, 0x03	; 3
    43e8:	c2 16       	cp	r12, r18
    43ea:	d1 04       	cpc	r13, r1
    43ec:	21 f4       	brne	.+8      	; 0x43f6 <strtod+0x200>
    43ee:	17 fb       	bst	r17, 7
    43f0:	10 95       	com	r17
    43f2:	17 f9       	bld	r17, 7
    43f4:	10 95       	com	r17
    43f6:	57 01       	movw	r10, r14
    43f8:	68 01       	movw	r12, r16
    43fa:	c8 01       	movw	r24, r16
    43fc:	b7 01       	movw	r22, r14
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	40 e0       	ldi	r20, 0x00	; 0
    4404:	50 e0       	ldi	r21, 0x00	; 0
    4406:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__cmpsf2>
    440a:	88 23       	and	r24, r24
    440c:	09 f4       	brne	.+2      	; 0x4410 <strtod+0x21a>
    440e:	4a c0       	rjmp	.+148    	; 0x44a4 <strtod+0x2ae>
    4410:	97 fe       	sbrs	r9, 7
    4412:	0d c0       	rjmp	.+26     	; 0x442e <strtod+0x238>
    4414:	21 e0       	ldi	r18, 0x01	; 1
    4416:	e2 2e       	mov	r14, r18
    4418:	25 e0       	ldi	r18, 0x05	; 5
    441a:	f2 2e       	mov	r15, r18
    441c:	90 94       	com	r9
    441e:	81 94       	neg	r8
    4420:	91 08       	sbc	r9, r1
    4422:	93 94       	inc	r9
    4424:	c0 e2       	ldi	r28, 0x20	; 32
    4426:	d0 e0       	ldi	r29, 0x00	; 0
    4428:	00 e0       	ldi	r16, 0x00	; 0
    442a:	10 e0       	ldi	r17, 0x00	; 0
    442c:	12 c0       	rjmp	.+36     	; 0x4452 <strtod+0x25c>
    442e:	99 e1       	ldi	r25, 0x19	; 25
    4430:	e9 2e       	mov	r14, r25
    4432:	95 e0       	ldi	r25, 0x05	; 5
    4434:	f9 2e       	mov	r15, r25
    4436:	f6 cf       	rjmp	.-20     	; 0x4424 <strtod+0x22e>
    4438:	f7 01       	movw	r30, r14
    443a:	25 91       	lpm	r18, Z+
    443c:	35 91       	lpm	r19, Z+
    443e:	45 91       	lpm	r20, Z+
    4440:	54 91       	lpm	r21, Z+
    4442:	c6 01       	movw	r24, r12
    4444:	b5 01       	movw	r22, r10
    4446:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__mulsf3>
    444a:	5b 01       	movw	r10, r22
    444c:	6c 01       	movw	r12, r24
    444e:	8c 1a       	sub	r8, r28
    4450:	9d 0a       	sbc	r9, r29
    4452:	8c 16       	cp	r8, r28
    4454:	9d 06       	cpc	r9, r29
    4456:	84 f7       	brge	.-32     	; 0x4438 <strtod+0x242>
    4458:	d5 95       	asr	r29
    445a:	c7 95       	ror	r28
    445c:	0f 5f       	subi	r16, 0xFF	; 255
    445e:	1f 4f       	sbci	r17, 0xFF	; 255
    4460:	06 30       	cpi	r16, 0x06	; 6
    4462:	11 05       	cpc	r17, r1
    4464:	29 f0       	breq	.+10     	; 0x4470 <strtod+0x27a>
    4466:	8c ef       	ldi	r24, 0xFC	; 252
    4468:	9f ef       	ldi	r25, 0xFF	; 255
    446a:	e8 0e       	add	r14, r24
    446c:	f9 1e       	adc	r15, r25
    446e:	f1 cf       	rjmp	.-30     	; 0x4452 <strtod+0x25c>
    4470:	c5 01       	movw	r24, r10
    4472:	d6 01       	movw	r26, r12
    4474:	7c 01       	movw	r14, r24
    4476:	8d 01       	movw	r16, r26
    4478:	8c 2d       	mov	r24, r12
    447a:	88 0f       	add	r24, r24
    447c:	8d 2d       	mov	r24, r13
    447e:	88 1f       	adc	r24, r24
    4480:	8f 3f       	cpi	r24, 0xFF	; 255
    4482:	51 f0       	breq	.+20     	; 0x4498 <strtod+0x2a2>
    4484:	c6 01       	movw	r24, r12
    4486:	b5 01       	movw	r22, r10
    4488:	20 e0       	ldi	r18, 0x00	; 0
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	40 e0       	ldi	r20, 0x00	; 0
    448e:	50 e0       	ldi	r21, 0x00	; 0
    4490:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__cmpsf2>
    4494:	88 23       	and	r24, r24
    4496:	31 f4       	brne	.+12     	; 0x44a4 <strtod+0x2ae>
    4498:	82 e2       	ldi	r24, 0x22	; 34
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	90 93 9c 06 	sts	0x069C, r25
    44a0:	80 93 9b 06 	sts	0x069B, r24
    44a4:	7e 2d       	mov	r23, r14
    44a6:	9f 2d       	mov	r25, r15
    44a8:	80 2f       	mov	r24, r16
    44aa:	61 2f       	mov	r22, r17
    44ac:	27 2f       	mov	r18, r23
    44ae:	39 2f       	mov	r19, r25
    44b0:	48 2f       	mov	r20, r24
    44b2:	56 2f       	mov	r21, r22
    44b4:	b9 01       	movw	r22, r18
    44b6:	ca 01       	movw	r24, r20
    44b8:	df 91       	pop	r29
    44ba:	cf 91       	pop	r28
    44bc:	1f 91       	pop	r17
    44be:	0f 91       	pop	r16
    44c0:	ff 90       	pop	r15
    44c2:	ef 90       	pop	r14
    44c4:	df 90       	pop	r13
    44c6:	cf 90       	pop	r12
    44c8:	bf 90       	pop	r11
    44ca:	af 90       	pop	r10
    44cc:	9f 90       	pop	r9
    44ce:	8f 90       	pop	r8
    44d0:	08 95       	ret

000044d2 <isspace>:
    44d2:	91 11       	cpse	r25, r1
    44d4:	1e c0       	rjmp	.+60     	; 0x4512 <__ctype_isfalse>
    44d6:	80 32       	cpi	r24, 0x20	; 32
    44d8:	19 f0       	breq	.+6      	; 0x44e0 <isspace+0xe>
    44da:	89 50       	subi	r24, 0x09	; 9
    44dc:	85 50       	subi	r24, 0x05	; 5
    44de:	d0 f7       	brcc	.-12     	; 0x44d4 <isspace+0x2>
    44e0:	08 95       	ret

000044e2 <strncasecmp_P>:
    44e2:	fb 01       	movw	r30, r22
    44e4:	dc 01       	movw	r26, r24
    44e6:	41 50       	subi	r20, 0x01	; 1
    44e8:	50 40       	sbci	r21, 0x00	; 0
    44ea:	88 f0       	brcs	.+34     	; 0x450e <strncasecmp_P+0x2c>
    44ec:	8d 91       	ld	r24, X+
    44ee:	81 34       	cpi	r24, 0x41	; 65
    44f0:	1c f0       	brlt	.+6      	; 0x44f8 <strncasecmp_P+0x16>
    44f2:	8b 35       	cpi	r24, 0x5B	; 91
    44f4:	0c f4       	brge	.+2      	; 0x44f8 <strncasecmp_P+0x16>
    44f6:	80 5e       	subi	r24, 0xE0	; 224
    44f8:	65 91       	lpm	r22, Z+
    44fa:	61 34       	cpi	r22, 0x41	; 65
    44fc:	1c f0       	brlt	.+6      	; 0x4504 <strncasecmp_P+0x22>
    44fe:	6b 35       	cpi	r22, 0x5B	; 91
    4500:	0c f4       	brge	.+2      	; 0x4504 <strncasecmp_P+0x22>
    4502:	60 5e       	subi	r22, 0xE0	; 224
    4504:	86 1b       	sub	r24, r22
    4506:	61 11       	cpse	r22, r1
    4508:	71 f3       	breq	.-36     	; 0x44e6 <strncasecmp_P+0x4>
    450a:	99 0b       	sbc	r25, r25
    450c:	08 95       	ret
    450e:	88 1b       	sub	r24, r24
    4510:	fc cf       	rjmp	.-8      	; 0x450a <strncasecmp_P+0x28>

00004512 <__ctype_isfalse>:
    4512:	99 27       	eor	r25, r25
    4514:	88 27       	eor	r24, r24

00004516 <__ctype_istrue>:
    4516:	08 95       	ret

00004518 <_exit>:
    4518:	f8 94       	cli

0000451a <__stop_program>:
    451a:	ff cf       	rjmp	.-2      	; 0x451a <__stop_program>
