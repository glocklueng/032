
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00006d60  00006df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d4  00800206  00800206  00006dfa  2**0
                  ALLOC
  3 .debug_aranges 00000710  00000000  00000000  00006dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000df7  00000000  00000000  0000750a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006249  00000000  00000000  00008301  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d80  00000000  00000000  0000e54a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000054be  00000000  00000000  000102ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b80  00000000  00000000  00015788  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016ba  00000000  00000000  00016308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000037b5  00000000  00000000  000179c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000be0  00000000  00000000  0001b177  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__ctors_end>
       4:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
       8:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
       c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      10:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      14:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      18:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      1c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      20:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      24:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      28:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      2c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      30:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      34:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      38:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      3c:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__vector_15>
      40:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      44:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__vector_17>
      48:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      4c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      50:	0c 94 77 2b 	jmp	0x56ee	; 0x56ee <__vector_20>
      54:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      58:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      5c:	0c 94 94 2a 	jmp	0x5528	; 0x5528 <__vector_23>
      60:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      64:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__vector_25>
      68:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      6c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      70:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      74:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      78:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      7c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      80:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <__vector_32>
      84:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      88:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      8c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      90:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      94:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      98:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      9c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      a0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      a4:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      a8:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      ac:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      b0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      b4:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      b8:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      bc:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      c0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      c4:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      c8:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      cc:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      d0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      d4:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      d8:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      dc:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      e0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__bad_interrupt>
      e4:	f7 0a       	sbc	r15, r23
      e6:	f7 0a       	sbc	r15, r23
      e8:	f3 0a       	sbc	r15, r19
      ea:	ec 0a       	sbc	r14, r28
      ec:	e5 0a       	sbc	r14, r21
      ee:	e0 0a       	sbc	r14, r16
      f0:	c7 08       	sbc	r12, r7
      f2:	c7 08       	sbc	r12, r7
      f4:	d9 0a       	sbc	r13, r25
      f6:	d4 0a       	sbc	r13, r20
      f8:	cd 0a       	sbc	r12, r29
      fa:	c6 0a       	sbc	r12, r22
      fc:	bf 0a       	sbc	r11, r31
      fe:	b8 0a       	sbc	r11, r24
     100:	b1 0a       	sbc	r11, r17
     102:	aa 0a       	sbc	r10, r26
     104:	a3 0a       	sbc	r10, r19
     106:	9c 0a       	sbc	r9, r28
     108:	95 0a       	sbc	r9, r21
     10a:	8e 0a       	sbc	r8, r30
     10c:	87 0a       	sbc	r8, r23
     10e:	82 0a       	sbc	r8, r18
     110:	7d 0a       	sbc	r7, r29
     112:	78 0a       	sbc	r7, r24
     114:	71 0a       	sbc	r7, r17
     116:	6c 0a       	sbc	r6, r28
     118:	65 0a       	sbc	r6, r21
     11a:	fc 09       	sbc	r31, r12
     11c:	5e 0a       	sbc	r5, r30
     11e:	54 0a       	sbc	r5, r20
     120:	f3 0a       	sbc	r15, r19
     122:	4f 0a       	sbc	r4, r31
     124:	c7 08       	sbc	r12, r7
     126:	c7 08       	sbc	r12, r7
     128:	c7 08       	sbc	r12, r7
     12a:	c7 08       	sbc	r12, r7
     12c:	c7 08       	sbc	r12, r7
     12e:	c7 08       	sbc	r12, r7
     130:	c7 08       	sbc	r12, r7
     132:	c7 08       	sbc	r12, r7
     134:	c7 08       	sbc	r12, r7
     136:	c7 08       	sbc	r12, r7
     138:	c7 08       	sbc	r12, r7
     13a:	c7 08       	sbc	r12, r7
     13c:	c7 08       	sbc	r12, r7
     13e:	c7 08       	sbc	r12, r7
     140:	c7 08       	sbc	r12, r7
     142:	c7 08       	sbc	r12, r7
     144:	c7 08       	sbc	r12, r7
     146:	c7 08       	sbc	r12, r7
     148:	c7 08       	sbc	r12, r7
     14a:	c7 08       	sbc	r12, r7
     14c:	c7 08       	sbc	r12, r7
     14e:	c7 08       	sbc	r12, r7
     150:	c7 08       	sbc	r12, r7
     152:	c7 08       	sbc	r12, r7
     154:	c7 08       	sbc	r12, r7
     156:	c7 08       	sbc	r12, r7
     158:	c7 08       	sbc	r12, r7
     15a:	c7 08       	sbc	r12, r7
     15c:	f3 0a       	sbc	r15, r19
     15e:	4c 0a       	sbc	r4, r28
     160:	48 0a       	sbc	r4, r24
     162:	44 0a       	sbc	r4, r20
     164:	40 0a       	sbc	r4, r16
     166:	00 0a       	sbc	r0, r16
     168:	c7 08       	sbc	r12, r7
     16a:	c7 08       	sbc	r12, r7
     16c:	c7 08       	sbc	r12, r7
     16e:	c7 08       	sbc	r12, r7
     170:	c7 08       	sbc	r12, r7
     172:	c7 08       	sbc	r12, r7
     174:	c7 08       	sbc	r12, r7
     176:	c7 08       	sbc	r12, r7
     178:	c7 08       	sbc	r12, r7
     17a:	c7 08       	sbc	r12, r7
     17c:	c7 08       	sbc	r12, r7
     17e:	c7 08       	sbc	r12, r7
     180:	18 0a       	sbc	r1, r24
     182:	2a 0a       	sbc	r2, r26
     184:	21 0a       	sbc	r2, r17
     186:	3c 0a       	sbc	r3, r28
     188:	39 0a       	sbc	r3, r25
     18a:	c7 08       	sbc	r12, r7
     18c:	c7 08       	sbc	r12, r7
     18e:	c7 08       	sbc	r12, r7
     190:	c7 08       	sbc	r12, r7
     192:	c7 08       	sbc	r12, r7
     194:	c7 08       	sbc	r12, r7
     196:	36 0a       	sbc	r3, r22
     198:	c7 08       	sbc	r12, r7
     19a:	36 0a       	sbc	r3, r22
     19c:	c7 08       	sbc	r12, r7
     19e:	c7 08       	sbc	r12, r7
     1a0:	c7 08       	sbc	r12, r7
     1a2:	c7 08       	sbc	r12, r7
     1a4:	c7 08       	sbc	r12, r7
     1a6:	c7 08       	sbc	r12, r7
     1a8:	c7 08       	sbc	r12, r7
     1aa:	c7 08       	sbc	r12, r7
     1ac:	c7 08       	sbc	r12, r7
     1ae:	c7 08       	sbc	r12, r7
     1b0:	c7 08       	sbc	r12, r7
     1b2:	c7 08       	sbc	r12, r7
     1b4:	c7 08       	sbc	r12, r7
     1b6:	c7 08       	sbc	r12, r7
     1b8:	c7 08       	sbc	r12, r7
     1ba:	c7 08       	sbc	r12, r7
     1bc:	c7 08       	sbc	r12, r7
     1be:	c7 08       	sbc	r12, r7
     1c0:	c7 08       	sbc	r12, r7
     1c2:	c7 08       	sbc	r12, r7
     1c4:	c7 08       	sbc	r12, r7
     1c6:	c7 08       	sbc	r12, r7
     1c8:	33 0a       	sbc	r3, r19
     1ca:	c7 08       	sbc	r12, r7
     1cc:	c7 08       	sbc	r12, r7
     1ce:	c7 08       	sbc	r12, r7
     1d0:	c7 08       	sbc	r12, r7
     1d2:	c7 08       	sbc	r12, r7
     1d4:	c7 08       	sbc	r12, r7
     1d6:	c7 08       	sbc	r12, r7
     1d8:	c7 08       	sbc	r12, r7
     1da:	c7 08       	sbc	r12, r7
     1dc:	c7 08       	sbc	r12, r7
     1de:	c7 08       	sbc	r12, r7
     1e0:	c7 08       	sbc	r12, r7
     1e2:	c7 08       	sbc	r12, r7
     1e4:	c7 08       	sbc	r12, r7
     1e6:	c7 08       	sbc	r12, r7
     1e8:	c7 08       	sbc	r12, r7
     1ea:	c7 08       	sbc	r12, r7
     1ec:	c7 08       	sbc	r12, r7
     1ee:	c7 08       	sbc	r12, r7
     1f0:	c7 08       	sbc	r12, r7
     1f2:	c7 08       	sbc	r12, r7
     1f4:	c7 08       	sbc	r12, r7
     1f6:	c7 08       	sbc	r12, r7
     1f8:	c7 08       	sbc	r12, r7
     1fa:	c7 08       	sbc	r12, r7
     1fc:	c7 08       	sbc	r12, r7
     1fe:	14 0a       	sbc	r1, r20
     200:	c7 08       	sbc	r12, r7
     202:	c7 08       	sbc	r12, r7
     204:	c7 08       	sbc	r12, r7
     206:	c7 08       	sbc	r12, r7
     208:	c7 08       	sbc	r12, r7
     20a:	c7 08       	sbc	r12, r7
     20c:	c7 08       	sbc	r12, r7
     20e:	c7 08       	sbc	r12, r7
     210:	c7 08       	sbc	r12, r7
     212:	10 0a       	sbc	r1, r16
     214:	0d 0a       	sbc	r0, r29
     216:	0a 0a       	sbc	r0, r26
     218:	06 0a       	sbc	r0, r22
     21a:	03 0a       	sbc	r0, r19
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.2004>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.2002>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.2000>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1998>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1996>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1994>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1992>:
     273:	0d 0a 00                                            ...

00000276 <__c.1990>:
     276:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

00000282 <__c.1988>:
     282:	0d 0a 00                                            ...

00000285 <__c.1986>:
     285:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000290 <__c.1984>:
     290:	0d 0a 00                                            ...

00000293 <__c.1982>:
     293:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000002a3 <__c.1980>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1978>:
     2a6:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000002b5 <__c.1976>:
     2b5:	0d 0a 00                                            ...

000002b8 <__c.1974>:
     2b8:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000002c5 <__c.1972>:
     2c5:	0d 0a 00                                            ...

000002c8 <__c.1970>:
     2c8:	61 76 72 5f 6d 69 6c 6c 69 73 28 29 20 3d 20 00     avr_millis() = .

000002d8 <__c.1968>:
     2d8:	0d 0a 00                                            ...

000002db <__c.1966>:
     2db:	74 6f 5f 6d 69 6c 6c 69 6d 65 74 65 72 73 28 31     to_millimeters(1
     2eb:	30 30 29 20 3d 20 00                                00) = .

000002f2 <__c.1964>:
     2f2:	0d 0a 00                                            ...

000002f5 <__c.1962>:
     2f5:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

00000304 <__c.1960>:
     304:	0d 0a 00                                            ...

00000307 <__c.1958>:
     307:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

00000311 <__c.1956>:
     311:	0d 0a 00                                            ...

00000314 <__c.1954>:
     314:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     324:	3d 20 00                                            = .

00000327 <__c.1952>:
     327:	0d 0a 00                                            ...

0000032a <__c.1950>:
     32a:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     33a:	20 00                                                .

0000033c <__c.1832>:
     33c:	65 72 72 0a 00                                      err..

00000341 <__c.1829>:
     341:	6f 6b 0a 00                                         ok..

00000345 <__c.1825>:
     345:	6e 68 6f 0a 00                                      nho..

0000034a <__c.1821>:
     34a:	6c 69 6d 0a 00                                      lim..

0000034f <__c.1772>:
     34f:	6f 6b 0a 00                                         ok..

00000353 <__c.2059>:
     353:	64 69 64 6e 27 74 20 6d 6f 76 65 00                 didn't move.

0000035f <__c.2051>:
     35f:	0d 0a 00                                            ...

00000362 <__c.2049>:
     362:	63 20 3d 20 00                                      c = .

00000367 <__c.2047>:
     367:	0d 0a 00                                            ...

0000036a <__c.2045>:
     36a:	7a 20 3d 20 00                                      z = .

0000036f <__c.2043>:
     36f:	0d 0a 00                                            ...

00000372 <__c.2041>:
     372:	79 20 3d 20 00                                      y = .

00000377 <__c.2039>:
     377:	0d 0a 00                                            ...

0000037a <__c.2037>:
     37a:	78 20 3d 20 00                                      x = .

0000037f <__c.1743>:
     37f:	0a 00                                               ..

00000381 <__c.1741>:
     381:	65 72 72 6f 72 3a 20 00                             error: .

00000389 <__c.1737>:
     389:	65 72 72 6f 72 3a 20 4e 6f 74 20 68 6f 6d 65 64     error: Not homed
     399:	0a 00                                               ..

0000039b <__c.1734>:
     39b:	65 72 72 6f 72 3a 20 43 6f 6d 6d 61 6e 64 20 46     error: Command F
     3ab:	61 69 6c 65 64 0a 00                                ailed..

000003b2 <__c.1731>:
     3b2:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     3c2:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 00              point error..

000003cf <__c.1728>:
     3cf:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     3df:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 00           ed statement..

000003ed <__c.1725>:
     3ed:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     3fd:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 00     command letter..

0000040d <__c.1722>:
     40d:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     41d:	72 20 66 6f 72 6d 61 74 0a 00                       r format..

00000427 <__c.1718>:
     427:	0a 47 43 53 54 41 54 55 53 5f 4f 4b 0a 00           .GCSTATUS_OK..

00000435 <__c.1715>:
     435:	4e 6f 74 20 68 6f 6d 65 64 0a 00                    Not homed..

00000440 <__c.1746>:
     440:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     450:	6e 67 0d 0a 00                                      ng...

00000455 <__c.1744>:
     455:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     465:	72 0d 0a 00                                         r...

00000469 <__c.1701>:
     469:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     479:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     489:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     499:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     4a9:	0d 0a 00                                            ...

000004ac <__c.1699>:
     4ac:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     4bc:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     4cc:	61 62 6c 65 64 29 0d 0a 00                          abled)...

000004d5 <__c.1697>:
     4d5:	24 31 30 30 30 20 3d 20 00                          $1000 = .

000004de <__c.1695>:
     4de:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     4ee:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     4fe:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     50e:	2f 6d 69 6e 29 0d 0a 00                             /min)...

00000516 <__c.1693>:
     516:	24 39 20 3d 20 00                                   $9 = .

0000051c <__c.1691>:
     51c:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     52c:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

0000053a <__c.1689>:
     53a:	24 38 20 3d 20 00                                   $8 = .

00000540 <__c.1687>:
     540:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     550:	29 0d 0a 00                                         )...

00000554 <__c.1685>:
     554:	24 37 20 3d 20 00                                   $7 = .

0000055a <__c.1683>:
     55a:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     56a:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000578 <__c.1681>:
     578:	24 36 20 3d 20 00                                   $6 = .

0000057e <__c.1679>:
     57e:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     58e:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

0000059c <__c.1677>:
     59c:	24 35 20 3d 20 00                                   $5 = .

000005a2 <__c.1675>:
     5a2:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     5b2:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

000005bf <__c.1673>:
     5bf:	24 34 20 3d 20 00                                   $4 = .

000005c5 <__c.1671>:
     5c5:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     5d5:	0a 00                                               ..

000005d7 <__c.1669>:
     5d7:	24 33 20 3d 20 00                                   $3 = .

000005dd <__c.1667>:
     5dd:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

000005ed <__c.1665>:
     5ed:	24 32 20 3d 20 00                                   $2 = .

000005f3 <__c.1663>:
     5f3:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

00000603 <__c.1661>:
     603:	24 31 20 3d 20 00                                   $1 = .

00000609 <__c.1659>:
     609:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

00000619 <__c.1657>:
     619:	24 30 20 3d 20 00                                   $0 = .

0000061f <__c.1655>:
     61f:	0d 0a 00                                            ...

00000622 <__c.1653>:
     622:	30 2e 37 36 50 42 00                                0.76PB.

00000629 <__c.1651>:
     629:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

00000635 <__c.2336>:
     635:	0d 0a 70 69 63 6b 6f 62 65 61 72 20 69 73 20 6e     ..pickobear is n
     645:	6f 74 20 68 6f 6d 65 64 0d 0a 00                    ot homed...

00000650 <__c.2334>:
     650:	0d 0a 70 69 63 6b 6f 62 65 61 72 20 69 73 20 68     ..pickobear is h
     660:	6f 6d 65 64 0d 0a 00                                omed...

00000667 <__c.2332>:
     667:	0d 0a 00                                            ...

0000066a <__c.2330>:
     66a:	0d 0a 66 6f 72 77 61 72 64 20 63 6f 75 6e 74 20     ..forward count 
     67a:	3d 20 00                                            = .

0000067d <__c.2326>:
     67d:	68 6f 6d 65 20 6d 6f 76 65 46 6f 72 77 61 72 64     home moveForward
     68d:	28 31 29 20 66 61 69 6c 65 64 00                    (1) failed.

00000698 <__c.2324>:
     698:	68 6f 6d 65 20 79 48 6f 6d 65 28 29 20 3d 3d 31     home yHome() ==1
	...

000006a9 <__c.2322>:
     6a9:	2e 00                                               ..

000006ab <__c.2319>:
     6ab:	0d 0a 68 6f 6d 69 6e 67 20 72 69 67 68 74 20 00     ..homing right .

000006bb <__c.2317>:
     6bb:	0d 0a 00                                            ...

000006be <__c.2315>:
     6be:	0d 0a 6c 65 66 74 20 63 6f 75 6e 74 20 3d 20 00     ..left count = .

000006ce <__c.2310>:
     6ce:	68 6f 6d 65 20 6d 6f 76 65 4c 65 66 74 28 31 29     home moveLeft(1)
     6de:	20 66 61 69 6c 65 64 00                              failed.

000006e6 <__c.2308>:
     6e6:	68 6f 6d 65 20 78 48 6f 6d 65 28 29 20 3d 3d 31     home xHome() ==1
	...

000006f7 <__c.2306>:
     6f7:	2e 00                                               ..

000006f9 <__c.2304>:
     6f9:	68 6f 6d 69 6e 67 20 6c 65 66 74 20 00              homing left .

00000706 <__c.2302>:
     706:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

00000710 <__c.2300>:
     710:	0d 0a 59 20 6c 69 6d 69 74 31 20 63 68 65 63 6b     ..Y limit1 check
     720:	0d 0a 00                                            ...

00000723 <__c.2298>:
     723:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

0000072d <__c.2296>:
     72d:	0d 0a 58 20 6c 69 6d 69 74 31 20 63 68 65 63 6b     ..X limit1 check
     73d:	0d 0a 00                                            ...

00000740 <__c.2294>:
     740:	68 6f 6d 65 20 66 61 69 6c 65 64 2c 20 68 65 61     home failed, hea
     750:	64 20 64 6f 77 6e 0d 0a 00                          d down...

00000759 <__c.2292>:
     759:	68 6f 6d 65 20 69 73 5f 68 65 61 64 5f 64 6f 77     home is_head_dow
     769:	6e 28 29 3d 31 0d 0a 00                             n()=1...

00000771 <__c.2236>:
     771:	0d 0a 00                                            ...

00000774 <__c.2234>:
     774:	48 45 41 44 5f 44 4f 57 4e 5f 54 45 53 54 00        HEAD_DOWN_TEST.

00000783 <__c.2232>:
     783:	59 31 5f 4c 49 4d 49 54 5f 42 49 54 20 00           Y1_LIMIT_BIT .

00000791 <__c.2230>:
     791:	20 00                                                .

00000793 <__c.2228>:
     793:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000007a0 <__c.2226>:
     7a0:	0d 0a 6d 6f 76 65 4c 65 66 74 20 00                 ..moveLeft .

000007ac <__c.2199>:
     7ac:	0d 0a 6d 6f 76 65 4c 65 66 74 20 48 45 41 44 5f     ..moveLeft HEAD_
     7bc:	44 4f 57 4e 5f 54 45 53 54 20 6f 72 20 58 32 20     DOWN_TEST or X2 
     7cc:	4c 49 4d 49 54 20 0d 0a 00                          LIMIT ...

000007d5 <__c.2171>:
     7d5:	0d 0a 00                                            ...

000007d8 <__c.2169>:
     7d8:	48 45 41 44 5f 44 4f 57 4e 5f 54 45 53 54 00        HEAD_DOWN_TEST.

000007e7 <__c.2167>:
     7e7:	58 31 5f 4c 49 4d 49 54 5f 42 49 54 20 00           X1_LIMIT_BIT .

000007f5 <__c.2165>:
     7f5:	20 00                                                .

000007f7 <__c.2163>:
     7f7:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

00000804 <__c.2161>:
     804:	0d 0a 6d 6f 76 65 4c 65 66 74 20 00                 ..moveLeft .

00000810 <__c.2147>:
     810:	79 48 6f 6d 65 3a 20 68 6f 6d 65 64 0d 0a 00        yHome: homed...

0000081f <__c.2138>:
     81f:	78 48 6f 6d 65 3a 20 68 6f 6d 65 64 0d 0a 00        xHome: homed...

0000082e <__c.2129>:
     82e:	79 4c 69 6d 69 74 32 3a 20 69 73 20 69 6e 20 6c     yLimit2: is in l
     83e:	69 6d 69 74 0d 0a 00                                imit...

00000845 <__c.2120>:
     845:	79 4c 69 6d 69 74 31 3a 20 69 73 20 69 6e 20 6c     yLimit1: is in l
     855:	69 6d 69 74 0d 0a 00                                imit...

0000085c <__c.2111>:
     85c:	78 4c 69 6d 69 74 32 3a 20 69 73 20 69 6e 20 6c     xLimit2: is in l
     86c:	69 6d 69 74 0d 0a 00                                imit...

00000873 <__c.2102>:
     873:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

0000087d <__c.1908>:
     87d:	41 54 43 73 20 6f 66 66 0a 0d 00                    ATCs off...

00000888 <__c.1906>:
     888:	61 74 63 20 63 68 61 6e 67 65 0a 0d 00              atc change...

00000895 <__c.1860>:
     895:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     8a5:	0d 00                                               ..

000008a7 <__c.1858>:
     8a7:	64 62 67 3a 20 68 65 61 64 5f 64 6f 77 6e 0a 0d     dbg: head_down..
	...

000008b8 <__c.1977>:
     8b8:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 68 65     goto_vacpad:  he
     8c8:	61 64 20 66 61 69 6c 65 64 20 74 6f 20 67 6f 20     ad failed to go 
     8d8:	75 70 0d 0a 00                                      up...

000008dd <__c.1975>:
     8dd:	74 6f 6f 6c 20 64 72 6f 70 20 66 61 69 6c 65 64     tool drop failed
     8ed:	0d 0a 00                                            ...

000008f0 <__c.1973>:
     8f0:	74 6f 6f 6c 20 64 72 6f 70 20 6f 6b 0d 0a 00        tool drop ok...

000008ff <__c.1971>:
     8ff:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 6e 6f     goto_vacpad:  no
     90f:	20 62 6c 6f 63 6b 61 67 65 0d 0a 00                  blockage...

0000091b <__c.1969>:
     91b:	74 6f 6f 6c 20 70 69 63 6b 75 70 20 66 61 69 6c     tool pickup fail
     92b:	65 64 0d 0a 00                                      ed...

00000930 <__c.1967>:
     930:	74 6f 6f 6c 20 70 69 63 6b 75 70 20 6f 6b 0d 0a     tool pickup ok..
	...

00000941 <__c.1965>:
     941:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 64 65     goto_vacpad:  de
     951:	74 65 63 74 65 64 20 62 6c 6f 63 6b 61 67 65 0d     tected blockage.
     961:	0a 00                                               ..

00000963 <__c.1963>:
     963:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 68 65     goto_vacpad:  he
     973:	61 64 20 66 61 69 6c 65 64 20 74 6f 20 64 6f 77     ad failed to dow
     983:	6e 0d 0a 00                                         n...

00000987 <__c.1955>:
     987:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 68 65     goto_vacpad:  he
     997:	61 64 20 66 61 69 6c 65 64 20 74 6f 20 75 70 20     ad failed to up 
     9a7:	0d 0a 00                                            ...

000009aa <__c.1953>:
     9aa:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 68 65     goto_vacpad:  he
     9ba:	61 64 20 66 61 69 6c 65 64 20 74 6f 20 67 6f 20     ad failed to go 
     9ca:	0d 0a 00                                            ...

000009cd <__c.1948>:
     9cd:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 68 65     goto_vacpad:  he
     9dd:	61 64 20 66 61 69 6c 65 64 20 74 6f 20 67 6f 20     ad failed to go 
     9ed:	64 6f 77 6e 0d 0a 00                                down...

000009f4 <__c.1940>:
     9f4:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 68 65     goto_vacpad:  he
     a04:	61 64 20 66 61 69 6c 65 64 20 74 6f 20 67 6f 20     ad failed to go 
     a14:	62 61 63 6b 20 75 70 0d 0a 00                       back up...

00000a1e <__c.1938>:
     a1e:	76 61 63 75 75 6d 5f 74 65 73 74 3a 30 20 70 69     vacuum_test:0 pi
     a2e:	63 6b 69 6e 67 20 75 70 20 74 6f 6f 6c 0d 0a 00     cking up tool...

00000a3e <__c.1936>:
     a3e:	76 61 63 75 75 6d 5f 74 65 73 74 3a 31 2c 20 64     vacuum_test:1, d
     a4e:	72 6f 70 70 69 6e 67 20 74 6f 6f 6c 0d 0a 00        ropping tool...

00000a5d <__c.1934>:
     a5d:	67 6f 74 6f 5f 76 61 63 70 61 64 3a 20 20 68 65     goto_vacpad:  he
     a6d:	61 64 20 66 61 69 6c 65 64 20 74 6f 20 67 6f 20     ad failed to go 
     a7d:	64 6f 77 6e 0d 0a 00                                down...

00000a84 <__c.1929>:
     a84:	67 6f 74 6f 5f 76 61 63 70 61 64 0d 0a 00           goto_vacpad...

00000a92 <__c.1913>:
     a92:	74 65 73 74 5f 6d 6f 64 65 0d 0a 00                 test_mode...

00000a9e <__c.1895>:
     a9e:	6e 6f 0a 00                                         no..

00000aa2 <__c.1893>:
     aa2:	79 65 73 0a 00                                      yes..

00000aa7 <__c.1874>:
     aa7:	76 61 63 75 75 6d 20 63 68 61 6e 67 65 0a 0d 00     vacuum change...

00000ab7 <__c.1863>:
     ab7:	74 61 70 65 20 6b 6e 6f 63 6b 0a 0d 00              tape knock...

00000ac4 <__c.1810>:
     ac4:	45 72 72 6f 72 3a 20 4f 53 43 4f 4b 49 52 51 20     Error: OSCOKIRQ 
     ad4:	66 61 69 6c 65 64 20 74 6f 20 61 73 73 65 72 74     failed to assert
     ae4:	0a 00                                               ..

00000ae6 <pstr_inf>:
     ae6:	49 4e 46                                            INF

00000ae9 <pstr_inity>:
     ae9:	49 4e 49 54 59                                      INITY

00000aee <pstr_nan>:
     aee:	4e 41 4e                                            NAN

00000af1 <pwr_m10>:
     af1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     b01:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000b09 <pwr_p10>:
     b09:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     b19:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000b22 <__ctors_end>:
     b22:	11 24       	eor	r1, r1
     b24:	1f be       	out	0x3f, r1	; 63
     b26:	cf ef       	ldi	r28, 0xFF	; 255
     b28:	d1 e2       	ldi	r29, 0x21	; 33
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	00 e0       	ldi	r16, 0x00	; 0
     b30:	0c bf       	out	0x3c, r16	; 60

00000b32 <__do_copy_data>:
     b32:	12 e0       	ldi	r17, 0x02	; 2
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b2 e0       	ldi	r27, 0x02	; 2
     b38:	e0 e6       	ldi	r30, 0x60	; 96
     b3a:	fd e6       	ldi	r31, 0x6D	; 109
     b3c:	00 e0       	ldi	r16, 0x00	; 0
     b3e:	0b bf       	out	0x3b, r16	; 59
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <__do_copy_data+0x14>
     b42:	07 90       	elpm	r0, Z+
     b44:	0d 92       	st	X+, r0
     b46:	a6 30       	cpi	r26, 0x06	; 6
     b48:	b1 07       	cpc	r27, r17
     b4a:	d9 f7       	brne	.-10     	; 0xb42 <__do_copy_data+0x10>

00000b4c <__do_clear_bss>:
     b4c:	19 e0       	ldi	r17, 0x09	; 9
     b4e:	a6 e0       	ldi	r26, 0x06	; 6
     b50:	b2 e0       	ldi	r27, 0x02	; 2
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <.do_clear_bss_start>

00000b54 <.do_clear_bss_loop>:
     b54:	1d 92       	st	X+, r1

00000b56 <.do_clear_bss_start>:
     b56:	aa 3d       	cpi	r26, 0xDA	; 218
     b58:	b1 07       	cpc	r27, r17
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <.do_clear_bss_loop>
     b5c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <main>
     b60:	0c 94 ae 36 	jmp	0x6d5c	; 0x6d5c <_exit>

00000b64 <__bad_interrupt>:
     b64:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b68 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     b68:	24 9a       	sbi	0x04, 4	; 4
}
     b6a:	08 95       	ret

00000b6c <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     b6c:	89 2b       	or	r24, r25
     b6e:	11 f4       	brne	.+4      	; 0xb74 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     b70:	2c 98       	cbi	0x05, 4	; 5
     b72:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     b74:	2c 9a       	sbi	0x05, 4	; 5
     b76:	08 95       	ret

00000b78 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     b78:	f9 99       	sbic	0x1f, 1	; 31
     b7a:	fe cf       	rjmp	.-4      	; 0xb78 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     b7c:	92 bd       	out	0x22, r25	; 34
     b7e:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     b84:	80 b5       	in	r24, 0x20	; 32
}
     b86:	08 95       	ret

00000b88 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     b88:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     b8a:	f9 99       	sbic	0x1f, 1	; 31
     b8c:	fe cf       	rjmp	.-4      	; 0xb8a <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     b8e:	92 bd       	out	0x22, r25	; 34
     b90:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     b96:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     b98:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     b9a:	89 2f       	mov	r24, r25
     b9c:	86 23       	and	r24, r22
     b9e:	41 f0       	breq	.+16     	; 0xbb0 <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     ba0:	6f 3f       	cpi	r22, 0xFF	; 255
     ba2:	71 f0       	breq	.+28     	; 0xbc0 <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     ba4:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     ba6:	84 e0       	ldi	r24, 0x04	; 4
     ba8:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     baa:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     bac:	78 94       	sei
}
     bae:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     bb0:	99 23       	and	r25, r25
     bb2:	e1 f3       	breq	.-8      	; 0xbac <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     bb4:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     bb6:	84 e2       	ldi	r24, 0x24	; 36
     bb8:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     bba:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     bbc:	78 94       	sei
}
     bbe:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     bc0:	84 e1       	ldi	r24, 0x14	; 20
     bc2:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     bc4:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     bc6:	78 94       	sei
}
     bc8:	08 95       	ret

00000bca <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     bca:	af 92       	push	r10
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	6c 01       	movw	r12, r24
     bde:	8b 01       	movw	r16, r22
     be0:	5a 01       	movw	r10, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     be2:	41 15       	cp	r20, r1
     be4:	51 05       	cpc	r21, r1
     be6:	59 f1       	breq	.+86     	; 0xc3e <memcpy_to_eeprom_with_checksum+0x74>
     be8:	ff 24       	eor	r15, r15
     bea:	c0 e0       	ldi	r28, 0x00	; 0
     bec:	d0 e0       	ldi	r29, 0x00	; 0
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <memcpy_to_eeprom_with_checksum+0x40>
    checksum = (checksum << 1) || (checksum >> 7);
     bf0:	21 e0       	ldi	r18, 0x01	; 1
    checksum += *source;
     bf2:	f8 01       	movw	r30, r16
     bf4:	60 81       	ld	r22, Z
     bf6:	f2 2e       	mov	r15, r18
     bf8:	f6 0e       	add	r15, r22
    eeprom_put_char(destination++, *(source++)); 
     bfa:	0e 94 c4 05 	call	0xb88	; 0xb88 <eeprom_put_char>
     bfe:	21 96       	adiw	r28, 0x01	; 1
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     c00:	ca 15       	cp	r28, r10
     c02:	db 05       	cpc	r29, r11
     c04:	61 f0       	breq	.+24     	; 0xc1e <memcpy_to_eeprom_with_checksum+0x54>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     c06:	0f 5f       	subi	r16, 0xFF	; 255
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     c0a:	ce 01       	movw	r24, r28
     c0c:	8c 0d       	add	r24, r12
     c0e:	9d 1d       	adc	r25, r13
    checksum = (checksum << 1) || (checksum >> 7);
     c10:	ff 20       	and	r15, r15
     c12:	71 f7       	brne	.-36     	; 0xbf0 <memcpy_to_eeprom_with_checksum+0x26>
     c14:	2f 2d       	mov	r18, r15
     c16:	22 1f       	adc	r18, r18
     c18:	22 27       	eor	r18, r18
     c1a:	22 1f       	adc	r18, r18
     c1c:	ea cf       	rjmp	.-44     	; 0xbf2 <memcpy_to_eeprom_with_checksum+0x28>
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     c1e:	cc 0e       	add	r12, r28
     c20:	dd 1e       	adc	r13, r29
  }
  eeprom_put_char(destination, checksum);
     c22:	c6 01       	movw	r24, r12
     c24:	6f 2d       	mov	r22, r15
     c26:	0e 94 c4 05 	call	0xb88	; 0xb88 <eeprom_put_char>
}
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	bf 90       	pop	r11
     c3a:	af 90       	pop	r10
     c3c:	08 95       	ret
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     c3e:	ff 24       	eor	r15, r15
     c40:	f0 cf       	rjmp	.-32     	; 0xc22 <memcpy_to_eeprom_with_checksum+0x58>

00000c42 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     c42:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     c44:	41 15       	cp	r20, r1
     c46:	51 05       	cpc	r21, r1
     c48:	c9 f1       	breq	.+114    	; 0xcbc <memcpy_from_eeprom_with_checksum+0x7a>
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     c50:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     c52:	c9 01       	movw	r24, r18
     c54:	86 0f       	add	r24, r22
     c56:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     c58:	f9 99       	sbic	0x1f, 1	; 31
     c5a:	fe cf       	rjmp	.-4      	; 0xc58 <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     c5c:	92 bd       	out	0x22, r25	; 34
     c5e:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     c60:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     c62:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     c64:	aa 23       	and	r26, r26
     c66:	59 f0       	breq	.+22     	; 0xc7e <memcpy_from_eeprom_with_checksum+0x3c>
     c68:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     c6a:	a8 2f       	mov	r26, r24
     c6c:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     c6e:	90 83       	st	Z, r25
     c70:	2f 5f       	subi	r18, 0xFF	; 255
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     c74:	24 17       	cp	r18, r20
     c76:	35 07       	cpc	r19, r21
     c78:	71 f0       	breq	.+28     	; 0xc96 <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     c7a:	31 96       	adiw	r30, 0x01	; 1
     c7c:	ea cf       	rjmp	.-44     	; 0xc52 <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     c7e:	8a 2f       	mov	r24, r26
     c80:	88 1f       	adc	r24, r24
     c82:	88 27       	eor	r24, r24
     c84:	88 1f       	adc	r24, r24
    checksum += data;    
     c86:	a8 2f       	mov	r26, r24
     c88:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     c8a:	90 83       	st	Z, r25
     c8c:	2f 5f       	subi	r18, 0xFF	; 255
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     c90:	24 17       	cp	r18, r20
     c92:	35 07       	cpc	r19, r21
     c94:	91 f7       	brne	.-28     	; 0xc7a <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     c96:	62 0f       	add	r22, r18
     c98:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     c9a:	f9 99       	sbic	0x1f, 1	; 31
     c9c:	fe cf       	rjmp	.-4      	; 0xc9a <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     c9e:	72 bd       	out	0x22, r23	; 34
     ca0:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     ca6:	80 b5       	in	r24, 0x20	; 32
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	a8 17       	cp	r26, r24
     cae:	11 f0       	breq	.+4      	; 0xcb4 <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     cb0:	c9 01       	movw	r24, r18
     cb2:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     cb8:	c9 01       	movw	r24, r18
     cba:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     cbc:	a0 e0       	ldi	r26, 0x00	; 0
     cbe:	ed cf       	rjmp	.-38     	; 0xc9a <memcpy_from_eeprom_with_checksum+0x58>

00000cc0 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     cc0:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     cc4:	60 93 30 02 	sts	0x0230, r22
  gc.plane_axis_2 = axis_2;
     cc8:	40 93 31 02 	sts	0x0231, r20
}
     ccc:	08 95       	ret

00000cce <set_feeder_x>:

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
     cce:	60 93 06 02 	sts	0x0206, r22
     cd2:	70 93 07 02 	sts	0x0207, r23
     cd6:	80 93 08 02 	sts	0x0208, r24
     cda:	90 93 09 02 	sts	0x0209, r25
}
     cde:	08 95       	ret

00000ce0 <set_feeder_y>:

void set_feeder_y( double y )
{
	feeder_x_pos = y;
     ce0:	60 93 06 02 	sts	0x0206, r22
     ce4:	70 93 07 02 	sts	0x0207, r23
     ce8:	80 93 08 02 	sts	0x0208, r24
     cec:	90 93 09 02 	sts	0x0209, r25
}
     cf0:	08 95       	ret

00000cf2 <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     cf2:	2f 92       	push	r2
     cf4:	3f 92       	push	r3
     cf6:	4f 92       	push	r4
     cf8:	5f 92       	push	r5
     cfa:	6f 92       	push	r6
     cfc:	7f 92       	push	r7
     cfe:	8f 92       	push	r8
     d00:	9f 92       	push	r9
     d02:	af 92       	push	r10
     d04:	bf 92       	push	r11
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <gotoxy+0x26>
     d18:	0f 92       	push	r0
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	1b 01       	movw	r2, r22
     d20:	2c 01       	movw	r4, r24
     d22:	29 83       	std	Y+1, r18	; 0x01
     d24:	3a 83       	std	Y+2, r19	; 0x02
     d26:	4b 83       	std	Y+3, r20	; 0x03
     d28:	5c 83       	std	Y+4, r21	; 0x04
     d2a:	37 01       	movw	r6, r14
     d2c:	48 01       	movw	r8, r16

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e8       	ldi	r20, 0x80	; 128
     d34:	5f eb       	ldi	r21, 0xBF	; 191
     d36:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
     d3a:	88 23       	and	r24, r24
     d3c:	41 f4       	brne	.+16     	; 0xd4e <gotoxy+0x5c>
     d3e:	60 90 1c 02 	lds	r6, 0x021C
     d42:	70 90 1d 02 	lds	r7, 0x021D
     d46:	80 90 1e 02 	lds	r8, 0x021E
     d4a:	90 90 1f 02 	lds	r9, 0x021F
  if( y == -1) c = gc.position[Y_AXIS] ;
     d4e:	69 81       	ldd	r22, Y+1	; 0x01
     d50:	7a 81       	ldd	r23, Y+2	; 0x02
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	9c 81       	ldd	r25, Y+4	; 0x04
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	5f eb       	ldi	r21, 0xBF	; 191
     d5e:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
     d62:	88 23       	and	r24, r24
     d64:	41 f4       	brne	.+16     	; 0xd76 <gotoxy+0x84>
     d66:	a0 90 20 02 	lds	r10, 0x0220
     d6a:	b0 90 21 02 	lds	r11, 0x0221
     d6e:	c0 90 22 02 	lds	r12, 0x0222
     d72:	d0 90 23 02 	lds	r13, 0x0223
  if( z == -1) z = gc.position[Z_AXIS] ;
     d76:	c4 01       	movw	r24, r8
     d78:	b3 01       	movw	r22, r6
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e8       	ldi	r20, 0x80	; 128
     d80:	5f eb       	ldi	r21, 0xBF	; 191
     d82:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
     d86:	88 23       	and	r24, r24
     d88:	41 f4       	brne	.+16     	; 0xd9a <gotoxy+0xa8>
     d8a:	60 90 24 02 	lds	r6, 0x0224
     d8e:	70 90 25 02 	lds	r7, 0x0225
     d92:	80 90 26 02 	lds	r8, 0x0226
     d96:	90 90 27 02 	lds	r9, 0x0227
  if( c == -1) c = gc.position[C_AXIS] ;
     d9a:	c6 01       	movw	r24, r12
     d9c:	b5 01       	movw	r22, r10
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	5f eb       	ldi	r21, 0xBF	; 191
     da6:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
     daa:	88 23       	and	r24, r24
     dac:	41 f4       	brne	.+16     	; 0xdbe <gotoxy+0xcc>
     dae:	a0 90 28 02 	lds	r10, 0x0228
     db2:	b0 90 29 02 	lds	r11, 0x0229
     db6:	c0 90 2a 02 	lds	r12, 0x022A
     dba:	d0 90 2b 02 	lds	r13, 0x022B

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <gotoxy+0xce>
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <gotoxy+0xd0>
     dc2:	80 91 18 02 	lds	r24, 0x0218
     dc6:	90 91 19 02 	lds	r25, 0x0219
     dca:	a0 91 1a 02 	lds	r26, 0x021A
     dce:	b0 91 1b 02 	lds	r27, 0x021B
     dd2:	ed b7       	in	r30, 0x3d	; 61
     dd4:	fe b7       	in	r31, 0x3e	; 62
     dd6:	81 83       	std	Z+1, r24	; 0x01
     dd8:	92 83       	std	Z+2, r25	; 0x02
     dda:	a3 83       	std	Z+3, r26	; 0x03
     ddc:	b4 83       	std	Z+4, r27	; 0x04
     dde:	16 82       	std	Z+6, r1	; 0x06
     de0:	15 82       	std	Z+5, r1	; 0x05
     de2:	c2 01       	movw	r24, r4
     de4:	b1 01       	movw	r22, r2
     de6:	29 81       	ldd	r18, Y+1	; 0x01
     de8:	3a 81       	ldd	r19, Y+2	; 0x02
     dea:	4b 81       	ldd	r20, Y+3	; 0x03
     dec:	5c 81       	ldd	r21, Y+4	; 0x04
     dee:	84 01       	movw	r16, r8
     df0:	73 01       	movw	r14, r6
     df2:	0e 94 31 13 	call	0x2662	; 0x2662 <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     df6:	20 92 1c 02 	sts	0x021C, r2
     dfa:	30 92 1d 02 	sts	0x021D, r3
     dfe:	40 92 1e 02 	sts	0x021E, r4
     e02:	50 92 1f 02 	sts	0x021F, r5
   gc.position[Y_AXIS] = y;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	ab 81       	ldd	r26, Y+3	; 0x03
     e0c:	bc 81       	ldd	r27, Y+4	; 0x04
     e0e:	80 93 20 02 	sts	0x0220, r24
     e12:	90 93 21 02 	sts	0x0221, r25
     e16:	a0 93 22 02 	sts	0x0222, r26
     e1a:	b0 93 23 02 	sts	0x0223, r27
   gc.position[Z_AXIS] = z;
     e1e:	60 92 24 02 	sts	0x0224, r6
     e22:	70 92 25 02 	sts	0x0225, r7
     e26:	80 92 26 02 	sts	0x0226, r8
     e2a:	90 92 27 02 	sts	0x0227, r9

   // C axis is always 0
   gc.position[C_AXIS] = 0;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a0 e0       	ldi	r26, 0x00	; 0
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	80 93 28 02 	sts	0x0228, r24
     e3a:	90 93 29 02 	sts	0x0229, r25
     e3e:	a0 93 2a 02 	sts	0x022A, r26
     e42:	b0 93 2b 02 	sts	0x022B, r27
     e46:	ad b7       	in	r26, 0x3d	; 61
     e48:	be b7       	in	r27, 0x3e	; 62
     e4a:	16 96       	adiw	r26, 0x06	; 6
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	be bf       	out	0x3e, r27	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	ad bf       	out	0x3d, r26	; 61

}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	7f 90       	pop	r7
     e78:	6f 90       	pop	r6
     e7a:	5f 90       	pop	r5
     e7c:	4f 90       	pop	r4
     e7e:	3f 90       	pop	r3
     e80:	2f 90       	pop	r2
     e82:	08 95       	ret

00000e84 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     e84:	af 92       	push	r10
     e86:	bf 92       	push	r11
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	0f 92       	push	r0
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	6c 01       	movw	r12, r24
     ea2:	5b 01       	movw	r10, r22
     ea4:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     ea6:	fb 01       	movw	r30, r22
     ea8:	00 81       	ld	r16, Z
     eaa:	11 81       	ldd	r17, Z+1	; 0x01
     eac:	08 0f       	add	r16, r24
     eae:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     eb0:	c8 01       	movw	r24, r16
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <strtod>
     ebc:	f7 01       	movw	r30, r14
     ebe:	60 83       	st	Z, r22
     ec0:	71 83       	std	Z+1, r23	; 0x01
     ec2:	82 83       	std	Z+2, r24	; 0x02
     ec4:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	80 17       	cp	r24, r16
     ecc:	91 07       	cpc	r25, r17
     ece:	a9 f0       	breq	.+42     	; 0xefa <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     ed0:	8c 19       	sub	r24, r12
     ed2:	9d 09       	sbc	r25, r13
     ed4:	f5 01       	movw	r30, r10
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     ede:	c9 01       	movw	r24, r18
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	bf 90       	pop	r11
     ef6:	af 90       	pop	r10
     ef8:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 0a 02 	sts	0x020A, r24
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	ec cf       	rjmp	.-40     	; 0xede <read_double+0x5a>

00000f06 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	ec 01       	movw	r28, r24
     f10:	8b 01       	movw	r16, r22
     f12:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     f14:	ed 91       	ld	r30, X+
     f16:	fc 91       	ld	r31, X
     f18:	11 97       	sbiw	r26, 0x01	; 1
     f1a:	e4 0f       	add	r30, r20
     f1c:	f5 1f       	adc	r31, r21
     f1e:	e0 81       	ld	r30, Z
     f20:	ee 23       	and	r30, r30
     f22:	39 f0       	breq	.+14     	; 0xf32 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     f24:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     f26:	e1 54       	subi	r30, 0x41	; 65
     f28:	ea 31       	cpi	r30, 0x1A	; 26
     f2a:	58 f0       	brcs	.+22     	; 0xf42 <next_statement+0x3c>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	80 93 0a 02 	sts	0x020A, r24
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     f36:	c9 01       	movw	r24, r18
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     f42:	8d 91       	ld	r24, X+
     f44:	9c 91       	ld	r25, X
     f46:	11 97       	sbiw	r26, 0x01	; 1
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	8d 93       	st	X+, r24
     f4c:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     f4e:	ca 01       	movw	r24, r20
     f50:	b9 01       	movw	r22, r18
     f52:	a8 01       	movw	r20, r16
     f54:	0e 94 42 07 	call	0xe84	; 0xe84 <read_double>
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	11 f0       	breq	.+4      	; 0xf60 <next_statement+0x5a>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     f62:	c9 01       	movw	r24, r18
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     f6e:	88 e2       	ldi	r24, 0x28	; 40
     f70:	ea e0       	ldi	r30, 0x0A	; 10
     f72:	f2 e0       	ldi	r31, 0x02	; 2
     f74:	df 01       	movw	r26, r30
     f76:	1d 92       	st	X+, r1
     f78:	8a 95       	dec	r24
     f7a:	e9 f7       	brne	.-6      	; 0xf76 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     f7c:	60 91 80 09 	lds	r22, 0x0980
     f80:	70 91 81 09 	lds	r23, 0x0981
     f84:	80 91 82 09 	lds	r24, 0x0982
     f88:	90 91 83 09 	lds	r25, 0x0983
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e7       	ldi	r20, 0x70	; 112
     f92:	52 e4       	ldi	r21, 0x42	; 66
     f94:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
     f98:	60 93 14 02 	sts	0x0214, r22
     f9c:	70 93 15 02 	sts	0x0215, r23
     fa0:	80 93 16 02 	sts	0x0216, r24
     fa4:	90 93 17 02 	sts	0x0217, r25
  gc.seek_rate = settings.default_seek_rate/60;
     fa8:	60 91 84 09 	lds	r22, 0x0984
     fac:	70 91 85 09 	lds	r23, 0x0985
     fb0:	80 91 86 09 	lds	r24, 0x0986
     fb4:	90 91 87 09 	lds	r25, 0x0987
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e7       	ldi	r20, 0x70	; 112
     fbe:	52 e4       	ldi	r21, 0x42	; 66
     fc0:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
     fc4:	60 93 18 02 	sts	0x0218, r22
     fc8:	70 93 19 02 	sts	0x0219, r23
     fcc:	80 93 1a 02 	sts	0x021A, r24
     fd0:	90 93 1b 02 	sts	0x021B, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     fd4:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	80 93 31 02 	sts	0x0231, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     fe4:	90 93 0e 02 	sts	0x020E, r25
}
     fe8:	08 95       	ret

00000fea <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     fea:	2f 92       	push	r2
     fec:	3f 92       	push	r3
     fee:	4f 92       	push	r4
     ff0:	5f 92       	push	r5
     ff2:	6f 92       	push	r6
     ff4:	7f 92       	push	r7
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	e7 97       	sbiw	r28, 0x37	; 55
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	5c 01       	movw	r10, r24
  int char_counter = 0;  
    1020:	1b 82       	std	Y+3, r1	; 0x03
    1022:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	88 87       	std	Y+8, r24	; 0x08
    102e:	99 87       	std	Y+9, r25	; 0x09
    1030:	aa 87       	std	Y+10, r26	; 0x0a
    1032:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
    1034:	ac e0       	ldi	r26, 0x0C	; 12
    1036:	2a 2e       	mov	r2, r26
    1038:	31 2c       	mov	r3, r1
    103a:	2c 0e       	add	r2, r28
    103c:	3d 1e       	adc	r3, r29
    103e:	80 e1       	ldi	r24, 0x10	; 16
    1040:	d1 01       	movw	r26, r2
    1042:	e8 2f       	mov	r30, r24
    1044:	1d 92       	st	X+, r1
    1046:	ea 95       	dec	r30
    1048:	e9 f7       	brne	.-6      	; 0x1044 <gc_execute_line+0x5a>
  clear_vector(offset);
    104a:	fc e1       	ldi	r31, 0x1C	; 28
    104c:	cf 2e       	mov	r12, r31
    104e:	d1 2c       	mov	r13, r1
    1050:	cc 0e       	add	r12, r28
    1052:	dd 1e       	adc	r13, r29
    1054:	d6 01       	movw	r26, r12
    1056:	1d 92       	st	X+, r1
    1058:	8a 95       	dec	r24
    105a:	e9 f7       	brne	.-6      	; 0x1056 <gc_execute_line+0x6c>

  gc.status_code = GCSTATUS_OK;
    105c:	10 92 0a 02 	sts	0x020A, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
    1060:	f5 01       	movw	r30, r10
    1062:	80 81       	ld	r24, Z
    1064:	88 32       	cpi	r24, 0x28	; 40
    1066:	09 f4       	brne	.+2      	; 0x106a <gc_execute_line+0x80>
    1068:	8a c0       	rjmp	.+276    	; 0x117e <gc_execute_line+0x194>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
    106a:	8f 32       	cpi	r24, 0x2F	; 47
    106c:	09 f4       	brne	.+2      	; 0x1070 <gc_execute_line+0x86>
    106e:	6e c0       	rjmp	.+220    	; 0x114c <gc_execute_line+0x162>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    1070:	84 32       	cpi	r24, 0x24	; 36
    1072:	09 f4       	brne	.+2      	; 0x1076 <gc_execute_line+0x8c>
    1074:	4d c0       	rjmp	.+154    	; 0x1110 <gc_execute_line+0x126>
    1076:	19 aa       	std	Y+49, r1	; 0x31
    1078:	18 aa       	std	Y+48, r1	; 0x30
    107a:	e2 e0       	ldi	r30, 0x02	; 2
    107c:	6e 2e       	mov	r6, r30
    107e:	71 2c       	mov	r7, r1
    1080:	6c 0e       	add	r6, r28
    1082:	7d 1e       	adc	r7, r29
    1084:	74 e0       	ldi	r23, 0x04	; 4
    1086:	47 2e       	mov	r4, r23
    1088:	51 2c       	mov	r5, r1
    108a:	4c 0e       	add	r4, r28
    108c:	5d 1e       	adc	r5, r29
    108e:	4e 01       	movw	r8, r28
    1090:	08 94       	sec
    1092:	81 1c       	adc	r8, r1
    1094:	91 1c       	adc	r9, r1
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    1096:	c4 01       	movw	r24, r8
    1098:	b2 01       	movw	r22, r4
    109a:	a5 01       	movw	r20, r10
    109c:	93 01       	movw	r18, r6
    109e:	0e 94 83 07 	call	0xf06	; 0xf06 <next_statement>
    10a2:	89 2b       	or	r24, r25
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <gc_execute_line+0xbe>
    10a6:	a7 c2       	rjmp	.+1358   	; 0x15f6 <gc_execute_line+0x60c>
    int_value = trunc(value);
    10a8:	6c 81       	ldd	r22, Y+4	; 0x04
    10aa:	7d 81       	ldd	r23, Y+5	; 0x05
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	9f 81       	ldd	r25, Y+7	; 0x07
    10b0:	0e 94 21 34 	call	0x6842	; 0x6842 <trunc>
    10b4:	7b 01       	movw	r14, r22
    10b6:	8c 01       	movw	r16, r24
    10b8:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>

    switch(letter) {
    10bc:	29 81       	ldd	r18, Y+1	; 0x01
    10be:	2d 34       	cpi	r18, 0x4D	; 77
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <gc_execute_line+0xda>
    10c2:	42 c1       	rjmp	.+644    	; 0x1348 <gc_execute_line+0x35e>
    10c4:	2e 34       	cpi	r18, 0x4E	; 78
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <gc_execute_line+0xe0>
    10c8:	47 c0       	rjmp	.+142    	; 0x1158 <gc_execute_line+0x16e>
    10ca:	24 34       	cpi	r18, 0x44	; 68
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <gc_execute_line+0xe6>
    10ce:	6a c0       	rjmp	.+212    	; 0x11a4 <gc_execute_line+0x1ba>
    10d0:	27 34       	cpi	r18, 0x47	; 71
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <gc_execute_line+0xec>
    10d4:	56 c0       	rjmp	.+172    	; 0x1182 <gc_execute_line+0x198>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }

    if(gc.status_code) { break; }
    10d6:	80 91 0a 02 	lds	r24, 0x020A
    10da:	88 23       	and	r24, r24
    10dc:	e1 f2       	breq	.-72     	; 0x1096 <gc_execute_line+0xac>
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
    10de:	e7 96       	adiw	r28, 0x37	; 55
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	9f 90       	pop	r9
    1100:	8f 90       	pop	r8
    1102:	7f 90       	pop	r7
    1104:	6f 90       	pop	r6
    1106:	5f 90       	pop	r5
    1108:	4f 90       	pop	r4
    110a:	3f 90       	pop	r3
    110c:	2f 90       	pop	r2
    110e:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9b 83       	std	Y+3, r25	; 0x03
    1116:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    1118:	d5 01       	movw	r26, r10
    111a:	11 96       	adiw	r26, 0x01	; 1
    111c:	8c 91       	ld	r24, X
    111e:	88 23       	and	r24, r24
    1120:	61 f1       	breq	.+88     	; 0x117a <gc_execute_line+0x190>
    read_double(line, &char_counter, &p);
    1122:	8e 01       	movw	r16, r28
    1124:	0e 5f       	subi	r16, 0xFE	; 254
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	c5 01       	movw	r24, r10
    112a:	b8 01       	movw	r22, r16
    112c:	ae 01       	movw	r20, r28
    112e:	48 5f       	subi	r20, 0xF8	; 248
    1130:	5f 4f       	sbci	r21, 0xFF	; 255
    1132:	0e 94 42 07 	call	0xe84	; 0xe84 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    1136:	2a 81       	ldd	r18, Y+2	; 0x02
    1138:	3b 81       	ldd	r19, Y+3	; 0x03
    113a:	f5 01       	movw	r30, r10
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	80 81       	ld	r24, Z
    1142:	8d 33       	cpi	r24, 0x3D	; 61
    1144:	09 f4       	brne	.+2      	; 0x1148 <gc_execute_line+0x15e>
    1146:	34 c1       	rjmp	.+616    	; 0x13b0 <gc_execute_line+0x3c6>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	c9 cf       	rjmp	.-110    	; 0x10de <gc_execute_line+0xf4>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	9b 81       	ldd	r25, Y+3	; 0x03
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	9b 83       	std	Y+3, r25	; 0x03
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	8f cf       	rjmp	.-226    	; 0x1076 <gc_execute_line+0x8c>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
    1158:	20 35       	cpi	r18, 0x50	; 80
    115a:	f9 f0       	breq	.+62     	; 0x119a <gc_execute_line+0x1b0>
    115c:	24 35       	cpi	r18, 0x54	; 84
    115e:	09 f0       	breq	.+2      	; 0x1162 <gc_execute_line+0x178>
    1160:	ba cf       	rjmp	.-140    	; 0x10d6 <gc_execute_line+0xec>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    1162:	c8 01       	movw	r24, r16
    1164:	b7 01       	movw	r22, r14
    1166:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    116a:	60 93 2c 02 	sts	0x022C, r22
    }

    if(gc.status_code) { break; }
    116e:	80 91 0a 02 	lds	r24, 0x020A
    1172:	88 23       	and	r24, r24
    1174:	09 f4       	brne	.+2      	; 0x1178 <gc_execute_line+0x18e>
    1176:	8f cf       	rjmp	.-226    	; 0x1096 <gc_execute_line+0xac>
    1178:	b2 cf       	rjmp	.-156    	; 0x10de <gc_execute_line+0xf4>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    117a:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <settings_dump>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	ae cf       	rjmp	.-164    	; 0x10de <gc_execute_line+0xf4>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
    1182:	e6 2f       	mov	r30, r22
    1184:	f7 2f       	mov	r31, r23
    1186:	ef 35       	cpi	r30, 0x5F	; 95
    1188:	f1 05       	cpc	r31, r1
    118a:	08 f4       	brcc	.+2      	; 0x118e <gc_execute_line+0x1a4>
    118c:	eb c0       	rjmp	.+470    	; 0x1364 <gc_execute_line+0x37a>
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	80 93 0a 02 	sts	0x020A, r24
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
    1194:	80 91 0a 02 	lds	r24, 0x020A
    1198:	a2 cf       	rjmp	.-188    	; 0x10de <gc_execute_line+0xf4>
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
		 case 'P':
			printCurrentPosition();
    119a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <printCurrentPosition>
			return(gc.status_code);
    119e:	80 91 0a 02 	lds	r24, 0x020A
    11a2:	9d cf       	rjmp	.-198    	; 0x10de <gc_execute_line+0xf4>

	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
    11a4:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
    11a6:	8a e2       	ldi	r24, 0x2A	; 42
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		  	printBinary( DIRECTION_DDR );
    11ae:	60 b3       	in	r22, 0x10	; 16
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printBinary>
	      	printPgmString(PSTR("\r\n"));
    11ba:	87 e2       	ldi	r24, 0x27	; 39
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
    11c2:	84 e1       	ldi	r24, 0x14	; 20
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		  	printBinary( DIRECTION_PORT );
    11ca:	61 b3       	in	r22, 0x11	; 17
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printBinary>
	      	printPgmString(PSTR("\r\n"));
    11d6:	81 e1       	ldi	r24, 0x11	; 17
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

			ch = PORTD;
    11de:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
    11e0:	87 e0       	ldi	r24, 0x07	; 7
    11e2:	93 e0       	ldi	r25, 0x03	; 3
    11e4:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		  	printBinary( ch );
    11e8:	ff 24       	eor	r15, r15
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	c8 01       	movw	r24, r16
    11f0:	b7 01       	movw	r22, r14
    11f2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printBinary>
	      	printPgmString(PSTR("\r\n"));
    11f6:	84 e0       	ldi	r24, 0x04	; 4
    11f8:	93 e0       	ldi	r25, 0x03	; 3
    11fa:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

			ch = PIND;
    11fe:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
    1200:	85 ef       	ldi	r24, 0xF5	; 245
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		  	printBinary( ch );
    1208:	ff 24       	eor	r15, r15
    120a:	00 e0       	ldi	r16, 0x00	; 0
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	c8 01       	movw	r24, r16
    1210:	b7 01       	movw	r22, r14
    1212:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printBinary>
	      	printPgmString(PSTR("\r\n"));
    1216:	82 ef       	ldi	r24, 0xF2	; 242
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	      	printPgmString(PSTR("CAUTION:Simulate mode is on\n"));

#endif

	      	printPgmString(PSTR("to_millimeters(100) = "));
    121e:	8b ed       	ldi	r24, 0xDB	; 219
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1226:	80 91 0d 02 	lds	r24, 0x020D
    122a:	88 23       	and	r24, r24
    122c:	09 f4       	brne	.+2      	; 0x1230 <gc_execute_line+0x246>
    122e:	a2 c0       	rjmp	.+324    	; 0x1374 <gc_execute_line+0x38a>
    1230:	6c ee       	ldi	r22, 0xEC	; 236
    1232:	79 e0       	ldi	r23, 0x09	; 9
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
	      	printPgmString(PSTR("CAUTION:Simulate mode is on\n"));

#endif

	      	printPgmString(PSTR("to_millimeters(100) = "));
			printInteger( to_millimeters(100) );
    1238:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR("\r\n"));
    123c:	88 ed       	ldi	r24, 0xD8	; 216
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	      	printPgmString(PSTR("avr_millis() = "));
    1244:	88 ec       	ldi	r24, 0xC8	; 200
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger( avr_millis() );
    124c:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    1250:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR("\r\n"));
    1254:	85 ec       	ldi	r24, 0xC5	; 197
    1256:	92 e0       	ldi	r25, 0x02	; 2
    1258:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>


	      	printPgmString(PSTR("head down = "));
    125c:	88 eb       	ldi	r24, 0xB8	; 184
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger( is_head_down() );
    1264:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a0 e0       	ldi	r26, 0x00	; 0
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR("\r\n"));
    1276:	85 eb       	ldi	r24, 0xB5	; 181
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
    127e:	86 ea       	ldi	r24, 0xA6	; 166
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger( head_moving() );
    1286:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a0 e0       	ldi	r26, 0x00	; 0
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR("\r\n"));
    1298:	83 ea       	ldi	r24, 0xA3	; 163
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
    12a0:	83 e9       	ldi	r24, 0x93	; 147
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger( vacuum_state() );
    12a8:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <vacuum_state>
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR("\r\n"));
    12ba:	80 e9       	ldi	r24, 0x90	; 144
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	      	printPgmString(PSTR("rotated = "));
    12c2:	85 e8       	ldi	r24, 0x85	; 133
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger( is_rotated() );
    12ca:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <is_rotated>
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a0 e0       	ldi	r26, 0x00	; 0
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR("\r\n"));
    12dc:	82 e8       	ldi	r24, 0x82	; 130
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
    12e4:	86 e7       	ldi	r24, 0x76	; 118
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger( get_busy() );
    12ec:	0e 94 ef 1a 	call	0x35de	; 0x35de <get_busy>
    12f0:	aa 27       	eor	r26, r26
    12f2:	97 fd       	sbrc	r25, 7
    12f4:	a0 95       	com	r26
    12f6:	ba 2f       	mov	r27, r26
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR("\r\n"));
    1300:	83 e7       	ldi	r24, 0x73	; 115
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>


			if( xLimit1() )
    1308:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <xLimit1>
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <gc_execute_line+0x328>
    1310:	40 c0       	rjmp	.+128    	; 0x1392 <gc_execute_line+0x3a8>
		      	printPgmString(PSTR("XL1\r\n"));

			if( xLimit2() ){
    1312:	0e 94 cf 1c 	call	0x399e	; 0x399e <xLimit2>
    1316:	88 23       	and	r24, r24
    1318:	09 f0       	breq	.+2      	; 0x131c <gc_execute_line+0x332>
    131a:	45 c0       	rjmp	.+138    	; 0x13a6 <gc_execute_line+0x3bc>
		      	printPgmString(PSTR("XL2\r\n"));
			}

			if( yLimit1())
    131c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <yLimit1>
    1320:	88 23       	and	r24, r24
    1322:	e1 f5       	brne	.+120    	; 0x139c <gc_execute_line+0x3b2>
		      	printPgmString(PSTR("YL1\r\n"));
			
			if( yLimit2() )
    1324:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <yLimit2>
    1328:	88 23       	and	r24, r24
    132a:	71 f5       	brne	.+92     	; 0x1388 <gc_execute_line+0x39e>
		      	printPgmString(PSTR("YL2\r\n"));

			if( xHome() )
    132c:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <xHome>
    1330:	88 23       	and	r24, r24
    1332:	29 f5       	brne	.+74     	; 0x137e <gc_execute_line+0x394>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( yHome() )
    1334:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <yHome>
    1338:	88 23       	and	r24, r24
    133a:	09 f4       	brne	.+2      	; 0x133e <gc_execute_line+0x354>
    133c:	2b cf       	rjmp	.-426    	; 0x1194 <gc_execute_line+0x1aa>
		      	printPgmString(PSTR("Y_HOME\r\n"));
    133e:	89 e4       	ldi	r24, 0x49	; 73
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    1346:	26 cf       	rjmp	.-436    	; 0x1194 <gc_execute_line+0x1aa>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
    1348:	e6 2f       	mov	r30, r22
    134a:	f7 2f       	mov	r31, r23
    134c:	ed 33       	cpi	r30, 0x3D	; 61
    134e:	f1 05       	cpc	r31, r1
    1350:	08 f0       	brcs	.+2      	; 0x1354 <gc_execute_line+0x36a>
    1352:	1d cf       	rjmp	.-454    	; 0x118e <gc_execute_line+0x1a4>
    1354:	ee 58       	subi	r30, 0x8E	; 142
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	ee 0f       	add	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	05 90       	lpm	r0, Z+
    135e:	f4 91       	lpm	r31, Z+
    1360:	e0 2d       	mov	r30, r0
    1362:	19 94       	eijmp
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
    1364:	e1 55       	subi	r30, 0x51	; 81
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	05 90       	lpm	r0, Z+
    136e:	f4 91       	lpm	r31, Z+
    1370:	e0 2d       	mov	r30, r0
    1372:	19 94       	eijmp
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1374:	64 e6       	ldi	r22, 0x64	; 100
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	5d cf       	rjmp	.-326    	; 0x1238 <gc_execute_line+0x24e>
			
			if( yLimit2() )
		      	printPgmString(PSTR("YL2\r\n"));

			if( xHome() )
		      	printPgmString(PSTR("X_HOME\r\n"));
    137e:	82 e5       	ldi	r24, 0x52	; 82
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    1386:	d6 cf       	rjmp	.-84     	; 0x1334 <gc_execute_line+0x34a>

			if( yLimit1())
		      	printPgmString(PSTR("YL1\r\n"));
			
			if( yLimit2() )
		      	printPgmString(PSTR("YL2\r\n"));
    1388:	8b e5       	ldi	r24, 0x5B	; 91
    138a:	92 e0       	ldi	r25, 0x02	; 2
    138c:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    1390:	cd cf       	rjmp	.-102    	; 0x132c <gc_execute_line+0x342>
			printInteger( get_busy() );
	      	printPgmString(PSTR("\r\n"));


			if( xLimit1() )
		      	printPgmString(PSTR("XL1\r\n"));
    1392:	8d e6       	ldi	r24, 0x6D	; 109
    1394:	92 e0       	ldi	r25, 0x02	; 2
    1396:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    139a:	bb cf       	rjmp	.-138    	; 0x1312 <gc_execute_line+0x328>
			if( xLimit2() ){
		      	printPgmString(PSTR("XL2\r\n"));
			}

			if( yLimit1())
		      	printPgmString(PSTR("YL1\r\n"));
    139c:	81 e6       	ldi	r24, 0x61	; 97
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    13a4:	bf cf       	rjmp	.-130    	; 0x1324 <gc_execute_line+0x33a>

			if( xLimit1() )
		      	printPgmString(PSTR("XL1\r\n"));

			if( xLimit2() ){
		      	printPgmString(PSTR("XL2\r\n"));
    13a6:	87 e6       	ldi	r24, 0x67	; 103
    13a8:	92 e0       	ldi	r25, 0x02	; 2
    13aa:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    13ae:	b6 cf       	rjmp	.-148    	; 0x131c <gc_execute_line+0x332>
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	3b 83       	std	Y+3, r19	; 0x03
    13b6:	2a 83       	std	Y+2, r18	; 0x02
    read_double(line, &char_counter, &value);
    13b8:	c5 01       	movw	r24, r10
    13ba:	b8 01       	movw	r22, r16
    13bc:	ae 01       	movw	r20, r28
    13be:	4c 5f       	subi	r20, 0xFC	; 252
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255
    13c2:	0e 94 42 07 	call	0xe84	; 0xe84 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    13c6:	ea 81       	ldd	r30, Y+2	; 0x02
    13c8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ca:	ea 0d       	add	r30, r10
    13cc:	fb 1d       	adc	r31, r11
    13ce:	80 81       	ld	r24, Z
    13d0:	88 23       	and	r24, r24
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <gc_execute_line+0x3ec>
    13d4:	b9 ce       	rjmp	.-654    	; 0x1148 <gc_execute_line+0x15e>
    settings_store_setting(p, value);
    13d6:	68 85       	ldd	r22, Y+8	; 0x08
    13d8:	79 85       	ldd	r23, Y+9	; 0x09
    13da:	8a 85       	ldd	r24, Y+10	; 0x0a
    13dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    13de:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	4c 81       	ldd	r20, Y+4	; 0x04
    13e8:	5d 81       	ldd	r21, Y+5	; 0x05
    13ea:	6e 81       	ldd	r22, Y+6	; 0x06
    13ec:	7f 81       	ldd	r23, Y+7	; 0x07
    13ee:	0e 94 31 19 	call	0x3262	; 0x3262 <settings_store_setting>
    return(gc.status_code);
    13f2:	80 91 0a 02 	lds	r24, 0x020A
    13f6:	73 ce       	rjmp	.-794    	; 0x10de <gc_execute_line+0xf4>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
    13f8:	0e 94 7d 28 	call	0x50fa	; 0x50fa <putdown_part>
    13fc:	80 93 0a 02 	sts	0x020A, r24
    1400:	e1 e0       	ldi	r30, 0x01	; 1
    1402:	e8 ab       	std	Y+48, r30	; 0x30
    1404:	68 ce       	rjmp	.-816    	; 0x10d6 <gc_execute_line+0xec>
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
    1406:	10 92 0c 02 	sts	0x020C, r1
    140a:	65 ce       	rjmp	.-822    	; 0x10d6 <gc_execute_line+0xec>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	90 93 0c 02 	sts	0x020C, r25
    1412:	61 ce       	rjmp	.-830    	; 0x10d6 <gc_execute_line+0xec>
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	88 ab       	std	Y+48, r24	; 0x30
    1418:	5e ce       	rjmp	.-836    	; 0x10d6 <gc_execute_line+0xec>
    141a:	10 92 0e 02 	sts	0x020E, r1
    141e:	5b ce       	rjmp	.-842    	; 0x10d6 <gc_execute_line+0xec>
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
    1420:	f1 e0       	ldi	r31, 0x01	; 1
    1422:	f0 93 0e 02 	sts	0x020E, r31
    1426:	57 ce       	rjmp	.-850    	; 0x10d6 <gc_execute_line+0xec>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
    1428:	e4 e0       	ldi	r30, 0x04	; 4
    142a:	e0 93 0b 02 	sts	0x020B, r30
    142e:	53 ce       	rjmp	.-858    	; 0x10d6 <gc_execute_line+0xec>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
    1430:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
    1434:	a1 e0       	ldi	r26, 0x01	; 1
    1436:	a0 93 30 02 	sts	0x0230, r26
  gc.plane_axis_2 = axis_2;
    143a:	b2 e0       	ldi	r27, 0x02	; 2
    143c:	b0 93 31 02 	sts	0x0231, r27
    1440:	4a ce       	rjmp	.-876    	; 0x10d6 <gc_execute_line+0xec>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
    1448:	92 e0       	ldi	r25, 0x02	; 2
    144a:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
    144e:	10 92 31 02 	sts	0x0231, r1
    1452:	41 ce       	rjmp	.-894    	; 0x10d6 <gc_execute_line+0xec>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
    1454:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
    1458:	e2 e0       	ldi	r30, 0x02	; 2
    145a:	e0 93 30 02 	sts	0x0230, r30
  gc.plane_axis_2 = axis_2;
    145e:	f1 e0       	ldi	r31, 0x01	; 1
    1460:	f0 93 31 02 	sts	0x0231, r31
    1464:	38 ce       	rjmp	.-912    	; 0x10d6 <gc_execute_line+0xec>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
    1466:	b1 e0       	ldi	r27, 0x01	; 1
    1468:	b9 ab       	std	Y+49, r27	; 0x31
    146a:	35 ce       	rjmp	.-918    	; 0x10d6 <gc_execute_line+0xec>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
    146c:	b2 e0       	ldi	r27, 0x02	; 2
    146e:	b8 ab       	std	Y+48, r27	; 0x30
    1470:	32 ce       	rjmp	.-924    	; 0x10d6 <gc_execute_line+0xec>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
    1472:	10 92 0d 02 	sts	0x020D, r1
    1476:	2f ce       	rjmp	.-930    	; 0x10d6 <gc_execute_line+0xec>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
    1478:	a1 e0       	ldi	r26, 0x01	; 1
    147a:	a0 93 0d 02 	sts	0x020D, r26
    147e:	2b ce       	rjmp	.-938    	; 0x10d6 <gc_execute_line+0xec>
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
    1480:	93 e0       	ldi	r25, 0x03	; 3
    1482:	90 93 0b 02 	sts	0x020B, r25
    1486:	27 ce       	rjmp	.-946    	; 0x10d6 <gc_execute_line+0xec>
      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	80 93 0b 02 	sts	0x020B, r24
    148e:	23 ce       	rjmp	.-954    	; 0x10d6 <gc_execute_line+0xec>
	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
    1490:	f1 e0       	ldi	r31, 0x01	; 1
    1492:	f0 93 0b 02 	sts	0x020B, r31
    1496:	1f ce       	rjmp	.-962    	; 0x10d6 <gc_execute_line+0xec>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
    1498:	10 92 0b 02 	sts	0x020B, r1
    149c:	1c ce       	rjmp	.-968    	; 0x10d6 <gc_execute_line+0xec>
#ifdef VERBOSE_DEBUG
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
#endif
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;
    149e:	0e 94 7d 18 	call	0x30fa	; 0x30fa <settings_reset>
    14a2:	a1 e0       	ldi	r26, 0x01	; 1
    14a4:	a8 ab       	std	Y+48, r26	; 0x30
    14a6:	17 ce       	rjmp	.-978    	; 0x10d6 <gc_execute_line+0xec>
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
#ifdef VERBOSE_DEBUG
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
#endif
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;
    14a8:	86 e0       	ldi	r24, 0x06	; 6
    14aa:	80 93 0a 02 	sts	0x020A, r24
    14ae:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <get_limit_bits>
    14b2:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	98 ab       	std	Y+48, r25	; 0x30
    14ba:	0d ce       	rjmp	.-998    	; 0x10d6 <gc_execute_line+0xec>
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
#ifdef VERBOSE_DEBUG
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
    14bc:	0e 94 01 28 	call	0x5002	; 0x5002 <test_mode>
    14c0:	80 93 0a 02 	sts	0x020A, r24
    14c4:	f1 e0       	ldi	r31, 0x01	; 1
    14c6:	f8 ab       	std	Y+48, r31	; 0x30
    14c8:	06 ce       	rjmp	.-1012   	; 0x10d6 <gc_execute_line+0xec>
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
    14ca:	0e 94 ef 28 	call	0x51de	; 0x51de <pickup_part>
    14ce:	80 93 0a 02 	sts	0x020A, r24
    14d2:	b1 e0       	ldi	r27, 0x01	; 1
    14d4:	b8 ab       	std	Y+48, r27	; 0x30
    14d6:	ff cd       	rjmp	.-1026   	; 0x10d6 <gc_execute_line+0xec>
		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
    14d8:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <vacuum_test>
    14dc:	a1 e0       	ldi	r26, 0x01	; 1
    14de:	a8 ab       	std	Y+48, r26	; 0x30
    14e0:	fa cd       	rjmp	.-1036   	; 0x10d6 <gc_execute_line+0xec>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
    14e2:	0e 94 65 26 	call	0x4cca	; 0x4cca <goto_vacpad>
    14e6:	80 93 0a 02 	sts	0x020A, r24
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	98 ab       	std	Y+48, r25	; 0x30
    14ee:	f3 cd       	rjmp	.-1050   	; 0x10d6 <gc_execute_line+0xec>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
    14f0:	0e 94 a9 24 	call	0x4952	; 0x4952 <check_for_tool>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	88 ab       	std	Y+48, r24	; 0x30
    14f8:	ee cd       	rjmp	.-1060   	; 0x10d6 <gc_execute_line+0xec>
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
    14fa:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <vacuum_test>
    14fe:	f1 e0       	ldi	r31, 0x01	; 1
    1500:	f8 ab       	std	Y+48, r31	; 0x30
    1502:	e9 cd       	rjmp	.-1070   	; 0x10d6 <gc_execute_line+0xec>
		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
    1504:	0e 94 be 28 	call	0x517c	; 0x517c <tape_knock>
    1508:	e1 e0       	ldi	r30, 0x01	; 1
    150a:	e8 ab       	std	Y+48, r30	; 0x30
    150c:	e4 cd       	rjmp	.-1080   	; 0x10d6 <gc_execute_line+0xec>
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
    1516:	b1 e0       	ldi	r27, 0x01	; 1
    1518:	b8 ab       	std	Y+48, r27	; 0x30
    151a:	dd cd       	rjmp	.-1094   	; 0x10d6 <gc_execute_line+0xec>
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
    1524:	a1 e0       	ldi	r26, 0x01	; 1
    1526:	a8 ab       	std	Y+48, r26	; 0x30
    1528:	d6 cd       	rjmp	.-1108   	; 0x10d6 <gc_execute_line+0xec>
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;
    152a:	86 e0       	ldi	r24, 0x06	; 6
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	98 ab       	std	Y+48, r25	; 0x30
    1536:	cf cd       	rjmp	.-1122   	; 0x10d6 <gc_execute_line+0xec>
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
    1538:	85 e0       	ldi	r24, 0x05	; 5
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	88 ab       	std	Y+48, r24	; 0x30
    1544:	c8 cd       	rjmp	.-1136   	; 0x10d6 <gc_execute_line+0xec>
		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
    1546:	84 e0       	ldi	r24, 0x04	; 4
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>
    154e:	f1 e0       	ldi	r31, 0x01	; 1
    1550:	f8 ab       	std	Y+48, r31	; 0x30
    1552:	c1 cd       	rjmp	.-1150   	; 0x10d6 <gc_execute_line+0xec>

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>
    155c:	e1 e0       	ldi	r30, 0x01	; 1
    155e:	e8 ab       	std	Y+48, r30	; 0x30
    1560:	ba cd       	rjmp	.-1164   	; 0x10d6 <gc_execute_line+0xec>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>
    156a:	b1 e0       	ldi	r27, 0x01	; 1
    156c:	b8 ab       	std	Y+48, r27	; 0x30
    156e:	b3 cd       	rjmp	.-1178   	; 0x10d6 <gc_execute_line+0xec>
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>
    1578:	a1 e0       	ldi	r26, 0x01	; 1
    157a:	a8 ab       	std	Y+48, r26	; 0x30
    157c:	ac cd       	rjmp	.-1192   	; 0x10d6 <gc_execute_line+0xec>
		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	98 ab       	std	Y+48, r25	; 0x30
    158a:	a5 cd       	rjmp	.-1206   	; 0x10d6 <gc_execute_line+0xec>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	88 ab       	std	Y+48, r24	; 0x30
    1598:	9e cd       	rjmp	.-1220   	; 0x10d6 <gc_execute_line+0xec>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	f8 ab       	std	Y+48, r31	; 0x30
    15a6:	97 cd       	rjmp	.-1234   	; 0x10d6 <gc_execute_line+0xec>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
    15a8:	10 92 13 02 	sts	0x0213, r1
    15ac:	10 92 12 02 	sts	0x0212, r1
    15b0:	92 cd       	rjmp	.-1244   	; 0x10d6 <gc_execute_line+0xec>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	90 93 13 02 	sts	0x0213, r25
    15ba:	80 93 12 02 	sts	0x0212, r24
    15be:	8b cd       	rjmp	.-1258   	; 0x10d6 <gc_execute_line+0xec>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
    15c0:	10 92 11 02 	sts	0x0211, r1
    15c4:	10 92 10 02 	sts	0x0210, r1
    15c8:	86 cd       	rjmp	.-1268   	; 0x10d6 <gc_execute_line+0xec>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
    15ca:	ef ef       	ldi	r30, 0xFF	; 255
    15cc:	ff ef       	ldi	r31, 0xFF	; 255
    15ce:	f0 93 11 02 	sts	0x0211, r31
    15d2:	e0 93 10 02 	sts	0x0210, r30
    15d6:	7f cd       	rjmp	.-1282   	; 0x10d6 <gc_execute_line+0xec>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	90 93 11 02 	sts	0x0211, r25
    15e0:	80 93 10 02 	sts	0x0210, r24
    15e4:	78 cd       	rjmp	.-1296   	; 0x10d6 <gc_execute_line+0xec>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    15e6:	b2 e0       	ldi	r27, 0x02	; 2
    15e8:	b0 93 0f 02 	sts	0x020F, r27
    15ec:	74 cd       	rjmp	.-1304   	; 0x10d6 <gc_execute_line+0xec>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    15ee:	a1 e0       	ldi	r26, 0x01	; 1
    15f0:	a0 93 0f 02 	sts	0x020F, r26
    15f4:	70 cd       	rjmp	.-1312   	; 0x10d6 <gc_execute_line+0xec>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    15f6:	80 91 0a 02 	lds	r24, 0x020A
    15fa:	88 23       	and	r24, r24
    15fc:	09 f0       	breq	.+2      	; 0x1600 <gc_execute_line+0x616>
    15fe:	6f cd       	rjmp	.-1314   	; 0x10de <gc_execute_line+0xf4>

  char_counter = 0;
    1600:	1b 82       	std	Y+3, r1	; 0x03
    1602:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
    1604:	80 e1       	ldi	r24, 0x10	; 16
    1606:	f6 01       	movw	r30, r12
    1608:	11 92       	st	Z+, r1
    160a:	8a 95       	dec	r24
    160c:	e9 f7       	brne	.-6      	; 0x1608 <gc_execute_line+0x61e>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
    160e:	d1 01       	movw	r26, r2
    1610:	ec e1       	ldi	r30, 0x1C	; 28
    1612:	f2 e0       	ldi	r31, 0x02	; 2
    1614:	80 e1       	ldi	r24, 0x10	; 16
    1616:	01 90       	ld	r0, Z+
    1618:	0d 92       	st	X+, r0
    161a:	81 50       	subi	r24, 0x01	; 1
    161c:	e1 f7       	brne	.-8      	; 0x1616 <gc_execute_line+0x62c>
    161e:	1c aa       	std	Y+52, r1	; 0x34
    1620:	1d aa       	std	Y+53, r1	; 0x35
    1622:	f0 e8       	ldi	r31, 0x80	; 128
    1624:	fe ab       	std	Y+54, r31	; 0x36
    1626:	8f eb       	ldi	r24, 0xBF	; 191
    1628:	8f ab       	std	Y+55, r24	; 0x37
    162a:	1b aa       	std	Y+51, r1	; 0x33
    162c:	1a aa       	std	Y+50, r1	; 0x32

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    162e:	c4 01       	movw	r24, r8
    1630:	b2 01       	movw	r22, r4
    1632:	a5 01       	movw	r20, r10
    1634:	93 01       	movw	r18, r6
    1636:	0e 94 83 07 	call	0xf06	; 0xf06 <next_statement>
    163a:	89 2b       	or	r24, r25
    163c:	09 f4       	brne	.+2      	; 0x1640 <gc_execute_line+0x656>
    163e:	ed c0       	rjmp	.+474    	; 0x181a <gc_execute_line+0x830>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    1640:	cc 80       	ldd	r12, Y+4	; 0x04
    1642:	dd 80       	ldd	r13, Y+5	; 0x05
    1644:	ee 80       	ldd	r14, Y+6	; 0x06
    1646:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1648:	80 91 0d 02 	lds	r24, 0x020D
    164c:	88 23       	and	r24, r24
    164e:	d9 f4       	brne	.+54     	; 0x1686 <gc_execute_line+0x69c>
    1650:	a7 01       	movw	r20, r14
    1652:	96 01       	movw	r18, r12

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1654:	09 81       	ldd	r16, Y+1	; 0x01
    1656:	0d 34       	cpi	r16, 0x4D	; 77
    1658:	19 f1       	breq	.+70     	; 0x16a0 <gc_execute_line+0x6b6>
    165a:	0e 34       	cpi	r16, 0x4E	; 78
    165c:	60 f5       	brcc	.+88     	; 0x16b6 <gc_execute_line+0x6cc>
    165e:	08 34       	cpi	r16, 0x48	; 72
    1660:	09 f4       	brne	.+2      	; 0x1664 <gc_execute_line+0x67a>
    1662:	7a c0       	rjmp	.+244    	; 0x1758 <gc_execute_line+0x76e>
    1664:	09 34       	cpi	r16, 0x49	; 73
    1666:	b8 f5       	brcc	.+110    	; 0x16d6 <gc_execute_line+0x6ec>
    1668:	03 34       	cpi	r16, 0x43	; 67
    166a:	09 f4       	brne	.+2      	; 0x166e <gc_execute_line+0x684>
    166c:	8a c0       	rjmp	.+276    	; 0x1782 <gc_execute_line+0x798>
    166e:	06 34       	cpi	r16, 0x46	; 70
    1670:	f1 f6       	brne	.-68     	; 0x162e <gc_execute_line+0x644>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    1672:	80 91 0c 02 	lds	r24, 0x020C
    1676:	88 23       	and	r24, r24
    1678:	09 f4       	brne	.+2      	; 0x167c <gc_execute_line+0x692>
    167a:	a9 c0       	rjmp	.+338    	; 0x17ce <gc_execute_line+0x7e4>
    167c:	2c ab       	std	Y+52, r18	; 0x34
    167e:	3d ab       	std	Y+53, r19	; 0x35
    1680:	4e ab       	std	Y+54, r20	; 0x36
    1682:	5f ab       	std	Y+55, r21	; 0x37
    1684:	d4 cf       	rjmp	.-88     	; 0x162e <gc_execute_line+0x644>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1686:	c7 01       	movw	r24, r14
    1688:	b6 01       	movw	r22, r12
    168a:	23 e3       	ldi	r18, 0x33	; 51
    168c:	33 e3       	ldi	r19, 0x33	; 51
    168e:	4b ec       	ldi	r20, 0xCB	; 203
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1696:	9b 01       	movw	r18, r22
    1698:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    169a:	09 81       	ldd	r16, Y+1	; 0x01
    169c:	0d 34       	cpi	r16, 0x4D	; 77
    169e:	e9 f6       	brne	.-70     	; 0x165a <gc_execute_line+0x670>
	feeder_x_pos = x;
}

void set_feeder_y( double y )
{
	feeder_x_pos = y;
    16a0:	20 93 06 02 	sts	0x0206, r18
    16a4:	30 93 07 02 	sts	0x0207, r19
    16a8:	40 93 08 02 	sts	0x0208, r20
    16ac:	50 93 09 02 	sts	0x0209, r21
    16b0:	a1 e0       	ldi	r26, 0x01	; 1
    16b2:	a8 ab       	std	Y+48, r26	; 0x30
    16b4:	bc cf       	rjmp	.-136    	; 0x162e <gc_execute_line+0x644>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    16b6:	03 35       	cpi	r16, 0x53	; 83
    16b8:	09 f4       	brne	.+2      	; 0x16bc <gc_execute_line+0x6d2>
    16ba:	45 c0       	rjmp	.+138    	; 0x1746 <gc_execute_line+0x75c>
    16bc:	04 35       	cpi	r16, 0x54	; 84
    16be:	e8 f4       	brcc	.+58     	; 0x16fa <gc_execute_line+0x710>
    16c0:	0e 34       	cpi	r16, 0x4E	; 78
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <gc_execute_line+0x6dc>
    16c4:	53 c0       	rjmp	.+166    	; 0x176c <gc_execute_line+0x782>
    16c6:	00 35       	cpi	r16, 0x50	; 80
    16c8:	09 f0       	breq	.+2      	; 0x16cc <gc_execute_line+0x6e2>
    16ca:	b1 cf       	rjmp	.-158    	; 0x162e <gc_execute_line+0x644>
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
    16cc:	c8 86       	std	Y+8, r12	; 0x08
    16ce:	d9 86       	std	Y+9, r13	; 0x09
    16d0:	ea 86       	std	Y+10, r14	; 0x0a
    16d2:	fb 86       	std	Y+11, r15	; 0x0b
    16d4:	ac cf       	rjmp	.-168    	; 0x162e <gc_execute_line+0x644>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    16d6:	0c 34       	cpi	r16, 0x4C	; 76
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <gc_execute_line+0x6f2>
    16da:	a9 cf       	rjmp	.-174    	; 0x162e <gc_execute_line+0x644>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    16dc:	e0 2f       	mov	r30, r16
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	e9 54       	subi	r30, 0x49	; 73
    16e2:	f0 40       	sbci	r31, 0x00	; 0
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	e8 0d       	add	r30, r8
    16ee:	f9 1d       	adc	r31, r9
    16f0:	23 8f       	std	Z+27, r18	; 0x1b
    16f2:	34 8f       	std	Z+28, r19	; 0x1c
    16f4:	45 8f       	std	Z+29, r20	; 0x1d
    16f6:	56 8f       	std	Z+30, r21	; 0x1e
    16f8:	9a cf       	rjmp	.-204    	; 0x162e <gc_execute_line+0x644>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    16fa:	80 2f       	mov	r24, r16
    16fc:	88 55       	subi	r24, 0x58	; 88
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	08 f0       	brcs	.+2      	; 0x1704 <gc_execute_line+0x71a>
    1702:	95 cf       	rjmp	.-214    	; 0x162e <gc_execute_line+0x644>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    1704:	80 91 0e 02 	lds	r24, 0x020E
    1708:	88 23       	and	r24, r24
    170a:	09 f0       	breq	.+2      	; 0x170e <gc_execute_line+0x724>
    170c:	4c c0       	rjmp	.+152    	; 0x17a6 <gc_execute_line+0x7bc>
    170e:	99 a9       	ldd	r25, Y+49	; 0x31
    1710:	99 23       	and	r25, r25
    1712:	09 f0       	breq	.+2      	; 0x1716 <gc_execute_line+0x72c>
    1714:	48 c0       	rjmp	.+144    	; 0x17a6 <gc_execute_line+0x7bc>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    1716:	10 e0       	ldi	r17, 0x00	; 0
    1718:	08 55       	subi	r16, 0x58	; 88
    171a:	10 40       	sbci	r17, 0x00	; 0
    171c:	00 0f       	add	r16, r16
    171e:	11 1f       	adc	r17, r17
    1720:	00 0f       	add	r16, r16
    1722:	11 1f       	adc	r17, r17
    1724:	08 0d       	add	r16, r8
    1726:	19 1d       	adc	r17, r9
    1728:	d8 01       	movw	r26, r16
    172a:	1b 96       	adiw	r26, 0x0b	; 11
    172c:	6d 91       	ld	r22, X+
    172e:	7d 91       	ld	r23, X+
    1730:	8d 91       	ld	r24, X+
    1732:	9c 91       	ld	r25, X
    1734:	1e 97       	sbiw	r26, 0x0e	; 14
    1736:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    173a:	f8 01       	movw	r30, r16
    173c:	63 87       	std	Z+11, r22	; 0x0b
    173e:	74 87       	std	Z+12, r23	; 0x0c
    1740:	85 87       	std	Z+13, r24	; 0x0d
    1742:	96 87       	std	Z+14, r25	; 0x0e
    1744:	74 cf       	rjmp	.-280    	; 0x162e <gc_execute_line+0x644>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    1746:	c7 01       	movw	r24, r14
    1748:	b6 01       	movw	r22, r12
    174a:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    174e:	70 93 2e 02 	sts	0x022E, r23
    1752:	60 93 2d 02 	sts	0x022D, r22
    1756:	6b cf       	rjmp	.-298    	; 0x162e <gc_execute_line+0x644>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    1758:	ca 01       	movw	r24, r20
    175a:	b9 01       	movw	r22, r18
    175c:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    1760:	7b ab       	std	Y+51, r23	; 0x33
    1762:	6a ab       	std	Y+50, r22	; 0x32
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    1764:	89 e0       	ldi	r24, 0x09	; 9
    1766:	80 93 0b 02 	sts	0x020B, r24
    176a:	61 cf       	rjmp	.-318    	; 0x162e <gc_execute_line+0x644>

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
    176c:	20 93 06 02 	sts	0x0206, r18
    1770:	30 93 07 02 	sts	0x0207, r19
    1774:	40 93 08 02 	sts	0x0208, r20
    1778:	50 93 09 02 	sts	0x0209, r21
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	98 ab       	std	Y+48, r25	; 0x30
    1780:	56 cf       	rjmp	.-340    	; 0x162e <gc_execute_line+0x644>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    1782:	80 91 0e 02 	lds	r24, 0x020E
    1786:	88 23       	and	r24, r24
    1788:	e9 f4       	brne	.+58     	; 0x17c4 <gc_execute_line+0x7da>
    178a:	f9 a9       	ldd	r31, Y+49	; 0x31
    178c:	ff 23       	and	r31, r31
    178e:	d1 f4       	brne	.+52     	; 0x17c4 <gc_execute_line+0x7da>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
    1790:	68 8d       	ldd	r22, Y+24	; 0x18
    1792:	79 8d       	ldd	r23, Y+25	; 0x19
    1794:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1796:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1798:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    179c:	68 8f       	std	Y+24, r22	; 0x18
    179e:	79 8f       	std	Y+25, r23	; 0x19
    17a0:	8a 8f       	std	Y+26, r24	; 0x1a
    17a2:	9b 8f       	std	Y+27, r25	; 0x1b
    17a4:	44 cf       	rjmp	.-376    	; 0x162e <gc_execute_line+0x644>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    17a6:	e0 2f       	mov	r30, r16
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	e8 55       	subi	r30, 0x58	; 88
    17ac:	f0 40       	sbci	r31, 0x00	; 0
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	ee 0f       	add	r30, r30
    17b4:	ff 1f       	adc	r31, r31
    17b6:	e8 0d       	add	r30, r8
    17b8:	f9 1d       	adc	r31, r9
    17ba:	23 87       	std	Z+11, r18	; 0x0b
    17bc:	34 87       	std	Z+12, r19	; 0x0c
    17be:	45 87       	std	Z+13, r20	; 0x0d
    17c0:	56 87       	std	Z+14, r21	; 0x0e
    17c2:	35 cf       	rjmp	.-406    	; 0x162e <gc_execute_line+0x644>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
    17c4:	28 8f       	std	Y+24, r18	; 0x18
    17c6:	39 8f       	std	Y+25, r19	; 0x19
    17c8:	4a 8f       	std	Y+26, r20	; 0x1a
    17ca:	5b 8f       	std	Y+27, r21	; 0x1b
    17cc:	30 cf       	rjmp	.-416    	; 0x162e <gc_execute_line+0x644>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    17ce:	80 91 0b 02 	lds	r24, 0x020B
    17d2:	88 23       	and	r24, r24
    17d4:	89 f4       	brne	.+34     	; 0x17f8 <gc_execute_line+0x80e>
          gc.seek_rate = unit_converted_value/60;
    17d6:	ca 01       	movw	r24, r20
    17d8:	b9 01       	movw	r22, r18
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e7       	ldi	r20, 0x70	; 112
    17e0:	52 e4       	ldi	r21, 0x42	; 66
    17e2:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    17e6:	60 93 18 02 	sts	0x0218, r22
    17ea:	70 93 19 02 	sts	0x0219, r23
    17ee:	80 93 1a 02 	sts	0x021A, r24
    17f2:	90 93 1b 02 	sts	0x021B, r25
    17f6:	1b cf       	rjmp	.-458    	; 0x162e <gc_execute_line+0x644>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
    17f8:	ca 01       	movw	r24, r20
    17fa:	b9 01       	movw	r22, r18
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e7       	ldi	r20, 0x70	; 112
    1802:	52 e4       	ldi	r21, 0x42	; 66
    1804:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    1808:	60 93 14 02 	sts	0x0214, r22
    180c:	70 93 15 02 	sts	0x0215, r23
    1810:	80 93 16 02 	sts	0x0216, r24
    1814:	90 93 17 02 	sts	0x0217, r25
    1818:	0a cf       	rjmp	.-492    	; 0x162e <gc_execute_line+0x644>

    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    181a:	80 91 0a 02 	lds	r24, 0x020A
    181e:	88 23       	and	r24, r24
    1820:	09 f0       	breq	.+2      	; 0x1824 <gc_execute_line+0x83a>
    1822:	5d cc       	rjmp	.-1862   	; 0x10de <gc_execute_line+0xf4>
    
  // Update spindle state
  if (gc.spindle_direction) {
    1824:	80 91 10 02 	lds	r24, 0x0210
    1828:	90 91 11 02 	lds	r25, 0x0211
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	09 f4       	brne	.+2      	; 0x1832 <gc_execute_line+0x848>
    1830:	5d c0       	rjmp	.+186    	; 0x18ec <gc_execute_line+0x902>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    1832:	40 91 2d 02 	lds	r20, 0x022D
    1836:	50 91 2e 02 	lds	r21, 0x022E
    183a:	66 27       	eor	r22, r22
    183c:	57 fd       	sbrc	r21, 7
    183e:	60 95       	com	r22
    1840:	76 2f       	mov	r23, r22
    1842:	0e 94 bc 1a 	call	0x3578	; 0x3578 <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    1846:	80 91 12 02 	lds	r24, 0x0212
    184a:	90 91 13 02 	lds	r25, 0x0213
    184e:	89 2b       	or	r24, r25
    1850:	09 f4       	brne	.+2      	; 0x1854 <gc_execute_line+0x86a>
    1852:	4f c0       	rjmp	.+158    	; 0x18f2 <gc_execute_line+0x908>
  	coolant_flood(TRUE);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 b6 05 	call	0xb6c	; 0xb6c <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    185c:	b8 a9       	ldd	r27, Y+48	; 0x30
    185e:	b1 30       	cpi	r27, 0x01	; 1
    1860:	09 f4       	brne	.+2      	; 0x1864 <gc_execute_line+0x87a>
    1862:	63 c0       	rjmp	.+198    	; 0x192a <gc_execute_line+0x940>
    1864:	b1 30       	cpi	r27, 0x01	; 1
    1866:	08 f0       	brcs	.+2      	; 0x186a <gc_execute_line+0x880>
    1868:	49 c0       	rjmp	.+146    	; 0x18fc <gc_execute_line+0x912>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    186a:	80 91 0b 02 	lds	r24, 0x020B
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	09 f4       	brne	.+2      	; 0x1874 <gc_execute_line+0x88a>
    1872:	7a c0       	rjmp	.+244    	; 0x1968 <gc_execute_line+0x97e>
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	08 f0       	brcs	.+2      	; 0x187a <gc_execute_line+0x890>
    1878:	6f c0       	rjmp	.+222    	; 0x1958 <gc_execute_line+0x96e>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    187a:	00 d0       	rcall	.+0      	; 0x187c <gc_execute_line+0x892>
    187c:	00 d0       	rcall	.+0      	; 0x187e <gc_execute_line+0x894>
    187e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1880:	7d 85       	ldd	r23, Y+13	; 0x0d
    1882:	8e 85       	ldd	r24, Y+14	; 0x0e
    1884:	9f 85       	ldd	r25, Y+15	; 0x0f
    1886:	28 89       	ldd	r18, Y+16	; 0x10
    1888:	39 89       	ldd	r19, Y+17	; 0x11
    188a:	4a 89       	ldd	r20, Y+18	; 0x12
    188c:	5b 89       	ldd	r21, Y+19	; 0x13
    188e:	ec 88       	ldd	r14, Y+20	; 0x14
    1890:	fd 88       	ldd	r15, Y+21	; 0x15
    1892:	0e 89       	ldd	r16, Y+22	; 0x16
    1894:	1f 89       	ldd	r17, Y+23	; 0x17
    1896:	a8 8c       	ldd	r10, Y+24	; 0x18
    1898:	b9 8c       	ldd	r11, Y+25	; 0x19
    189a:	ca 8c       	ldd	r12, Y+26	; 0x1a
    189c:	db 8c       	ldd	r13, Y+27	; 0x1b
    189e:	60 90 18 02 	lds	r6, 0x0218
    18a2:	70 90 19 02 	lds	r7, 0x0219
    18a6:	80 90 1a 02 	lds	r8, 0x021A
    18aa:	90 90 1b 02 	lds	r9, 0x021B
    18ae:	ad b7       	in	r26, 0x3d	; 61
    18b0:	be b7       	in	r27, 0x3e	; 62
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	6d 92       	st	X+, r6
    18b6:	7d 92       	st	X+, r7
    18b8:	8d 92       	st	X+, r8
    18ba:	9c 92       	st	X, r9
    18bc:	14 97       	sbiw	r26, 0x04	; 4
    18be:	16 96       	adiw	r26, 0x06	; 6
    18c0:	1c 92       	st	X, r1
    18c2:	1e 92       	st	-X, r1
    18c4:	15 97       	sbiw	r26, 0x05	; 5
    18c6:	0e 94 31 13 	call	0x2662	; 0x2662 <plan_buffer_line>
    18ca:	ed b7       	in	r30, 0x3d	; 61
    18cc:	fe b7       	in	r31, 0x3e	; 62
    18ce:	36 96       	adiw	r30, 0x06	; 6
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	fe bf       	out	0x3e, r31	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    18da:	ac e1       	ldi	r26, 0x1C	; 28
    18dc:	b2 e0       	ldi	r27, 0x02	; 2
    18de:	f1 01       	movw	r30, r2
    18e0:	80 e1       	ldi	r24, 0x10	; 16
    18e2:	01 90       	ld	r0, Z+
    18e4:	0d 92       	st	X+, r0
    18e6:	81 50       	subi	r24, 0x01	; 1
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <gc_execute_line+0x8f8>
    18ea:	54 cc       	rjmp	.-1880   	; 0x1194 <gc_execute_line+0x1aa>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    18ec:	0e 94 cc 1a 	call	0x3598	; 0x3598 <spindle_stop>
    18f0:	aa cf       	rjmp	.-172    	; 0x1846 <gc_execute_line+0x85c>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <coolant_flood>
    18fa:	b0 cf       	rjmp	.-160    	; 0x185c <gc_execute_line+0x872>
  }
  
  // Perform any physical actions
  switch (next_action) {
    18fc:	b2 30       	cpi	r27, 0x02	; 2
    18fe:	21 f1       	breq	.+72     	; 0x1948 <gc_execute_line+0x95e>
    1900:	b3 30       	cpi	r27, 0x03	; 3
    1902:	59 f7       	brne	.-42     	; 0x18da <gc_execute_line+0x8f0>
	  rotate_head( head);
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1904:	6c 85       	ldd	r22, Y+12	; 0x0c
    1906:	7d 85       	ldd	r23, Y+13	; 0x0d
    1908:	8e 85       	ldd	r24, Y+14	; 0x0e
    190a:	9f 85       	ldd	r25, Y+15	; 0x0f
    190c:	28 89       	ldd	r18, Y+16	; 0x10
    190e:	39 89       	ldd	r19, Y+17	; 0x11
    1910:	4a 89       	ldd	r20, Y+18	; 0x12
    1912:	5b 89       	ldd	r21, Y+19	; 0x13
    1914:	ec 88       	ldd	r14, Y+20	; 0x14
    1916:	fd 88       	ldd	r15, Y+21	; 0x15
    1918:	0e 89       	ldd	r16, Y+22	; 0x16
    191a:	1f 89       	ldd	r17, Y+23	; 0x17
    191c:	a8 8c       	ldd	r10, Y+24	; 0x18
    191e:	b9 8c       	ldd	r11, Y+25	; 0x19
    1920:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1922:	db 8c       	ldd	r13, Y+27	; 0x1b
    1924:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <plan_set_current>
    1928:	d8 cf       	rjmp	.-80     	; 0x18da <gc_execute_line+0x8f0>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    192a:	68 85       	ldd	r22, Y+8	; 0x08
    192c:	79 85       	ldd	r23, Y+9	; 0x09
    192e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1930:	9b 85       	ldd	r25, Y+11	; 0x0b
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a e7       	ldi	r20, 0x7A	; 122
    1938:	54 e4       	ldi	r21, 0x44	; 68
    193a:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    193e:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    1942:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <mc_dwell>
    1946:	c9 cf       	rjmp	.-110    	; 0x18da <gc_execute_line+0x8f0>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    1948:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <mc_go_home>
    194c:	80 e1       	ldi	r24, 0x10	; 16
    194e:	f1 01       	movw	r30, r2
    1950:	11 92       	st	Z+, r1
    1952:	8a 95       	dec	r24
    1954:	e9 f7       	brne	.-6      	; 0x1950 <gc_execute_line+0x966>
    1956:	c1 cf       	rjmp	.-126    	; 0x18da <gc_execute_line+0x8f0>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1958:	89 30       	cpi	r24, 0x09	; 9
    195a:	09 f0       	breq	.+2      	; 0x195e <gc_execute_line+0x974>
    195c:	be cf       	rjmp	.-132    	; 0x18da <gc_execute_line+0x8f0>
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    195e:	8a a9       	ldd	r24, Y+50	; 0x32
    1960:	9b a9       	ldd	r25, Y+51	; 0x33
    1962:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <rotate_head>
    1966:	b9 cf       	rjmp	.-142    	; 0x18da <gc_execute_line+0x8f0>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    1968:	8c 85       	ldd	r24, Y+12	; 0x0c
    196a:	9d 85       	ldd	r25, Y+13	; 0x0d
    196c:	ae 85       	ldd	r26, Y+14	; 0x0e
    196e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1970:	8c a7       	std	Y+44, r24	; 0x2c
    1972:	9d a7       	std	Y+45, r25	; 0x2d
    1974:	ae a7       	std	Y+46, r26	; 0x2e
    1976:	bf a7       	std	Y+47, r27	; 0x2f
    1978:	68 88       	ldd	r6, Y+16	; 0x10
    197a:	79 88       	ldd	r7, Y+17	; 0x11
    197c:	8a 88       	ldd	r8, Y+18	; 0x12
    197e:	9b 88       	ldd	r9, Y+19	; 0x13
    1980:	ec 88       	ldd	r14, Y+20	; 0x14
    1982:	fd 88       	ldd	r15, Y+21	; 0x15
    1984:	0e 89       	ldd	r16, Y+22	; 0x16
    1986:	1f 89       	ldd	r17, Y+23	; 0x17
    1988:	a8 8c       	ldd	r10, Y+24	; 0x18
    198a:	b9 8c       	ldd	r11, Y+25	; 0x19
    198c:	ca 8c       	ldd	r12, Y+26	; 0x1a
    198e:	db 8c       	ldd	r13, Y+27	; 0x1b
    1990:	60 91 0c 02 	lds	r22, 0x020C
    1994:	66 23       	and	r22, r22
    1996:	61 f4       	brne	.+24     	; 0x19b0 <gc_execute_line+0x9c6>
    1998:	90 91 14 02 	lds	r25, 0x0214
    199c:	9c ab       	std	Y+52, r25	; 0x34
    199e:	a0 91 15 02 	lds	r26, 0x0215
    19a2:	ad ab       	std	Y+53, r26	; 0x35
    19a4:	b0 91 16 02 	lds	r27, 0x0216
    19a8:	be ab       	std	Y+54, r27	; 0x36
    19aa:	e0 91 17 02 	lds	r30, 0x0217
    19ae:	ef ab       	std	Y+55, r30	; 0x37
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <gc_execute_line+0x9c8>
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <gc_execute_line+0x9ca>
    19b4:	4d b6       	in	r4, 0x3d	; 61
    19b6:	5e b6       	in	r5, 0x3e	; 62
    19b8:	08 94       	sec
    19ba:	41 1c       	adc	r4, r1
    19bc:	51 1c       	adc	r5, r1
    19be:	2c a9       	ldd	r18, Y+52	; 0x34
    19c0:	3d a9       	ldd	r19, Y+53	; 0x35
    19c2:	4e a9       	ldd	r20, Y+54	; 0x36
    19c4:	5f a9       	ldd	r21, Y+55	; 0x37
    19c6:	c9 01       	movw	r24, r18
    19c8:	da 01       	movw	r26, r20
    19ca:	ed b7       	in	r30, 0x3d	; 61
    19cc:	fe b7       	in	r31, 0x3e	; 62
    19ce:	81 83       	std	Z+1, r24	; 0x01
    19d0:	92 83       	std	Z+2, r25	; 0x02
    19d2:	a3 83       	std	Z+3, r26	; 0x03
    19d4:	b4 83       	std	Z+4, r27	; 0x04
    19d6:	d2 01       	movw	r26, r4
    19d8:	14 96       	adiw	r26, 0x04	; 4
    19da:	6c 93       	st	X, r22
    19dc:	14 97       	sbiw	r26, 0x04	; 4
    19de:	15 96       	adiw	r26, 0x05	; 5
    19e0:	1c 92       	st	X, r1
    19e2:	6c a5       	ldd	r22, Y+44	; 0x2c
    19e4:	7d a5       	ldd	r23, Y+45	; 0x2d
    19e6:	8e a5       	ldd	r24, Y+46	; 0x2e
    19e8:	9f a5       	ldd	r25, Y+47	; 0x2f
    19ea:	a4 01       	movw	r20, r8
    19ec:	93 01       	movw	r18, r6
    19ee:	0e 94 31 13 	call	0x2662	; 0x2662 <plan_buffer_line>
    19f2:	ed b7       	in	r30, 0x3d	; 61
    19f4:	fe b7       	in	r31, 0x3e	; 62
    19f6:	36 96       	adiw	r30, 0x06	; 6
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	fe bf       	out	0x3e, r31	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	ed bf       	out	0x3d, r30	; 61
    1a02:	6b cf       	rjmp	.-298    	; 0x18da <gc_execute_line+0x8f0>

00001a04 <theta>:


// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1a04:	af 92       	push	r10
    1a06:	bf 92       	push	r11
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	79 01       	movw	r14, r18
    1a16:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    1a18:	5f 77       	andi	r21, 0x7F	; 127
    1a1a:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    1a1e:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <atan>
    1a22:	5b 01       	movw	r10, r22
    1a24:	6c 01       	movw	r12, r24
  if (y>0) {
    1a26:	c8 01       	movw	r24, r16
    1a28:	b7 01       	movw	r22, r14
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__gesf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	5c f4       	brge	.+22     	; 0x1a50 <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
    1a3a:	b5 01       	movw	r22, r10
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	bf 90       	pop	r11
    1a4c:	af 90       	pop	r10
    1a4e:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
    1a50:	c6 01       	movw	r24, r12
    1a52:	b5 01       	movw	r22, r10
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__gesf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	5c f4       	brge	.+22     	; 0x1a7a <theta+0x76>
    {
      return(M_PI-theta);
    1a64:	6b ed       	ldi	r22, 0xDB	; 219
    1a66:	7f e0       	ldi	r23, 0x0F	; 15
    1a68:	89 e4       	ldi	r24, 0x49	; 73
    1a6a:	90 e4       	ldi	r25, 0x40	; 64
    1a6c:	a6 01       	movw	r20, r12
    1a6e:	95 01       	movw	r18, r10
    1a70:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    1a74:	5b 01       	movw	r10, r22
    1a76:	6c 01       	movw	r12, r24
    1a78:	e0 cf       	rjmp	.-64     	; 0x1a3a <theta+0x36>
    } else {
      return(-M_PI-theta);
    1a7a:	6b ed       	ldi	r22, 0xDB	; 219
    1a7c:	7f e0       	ldi	r23, 0x0F	; 15
    1a7e:	89 e4       	ldi	r24, 0x49	; 73
    1a80:	90 ec       	ldi	r25, 0xC0	; 192
    1a82:	a6 01       	movw	r20, r12
    1a84:	95 01       	movw	r18, r10
    1a86:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    1a8a:	5b 01       	movw	r10, r22
    1a8c:	6c 01       	movw	r12, r24
    1a8e:	d5 cf       	rjmp	.-86     	; 0x1a3a <theta+0x36>

00001a90 <pb_usbEventHandler>:
 */
static void pb_usbEventHandler(usb_device * device, usb_eventType event)
{
        //adb_usbConfiguration handle;

        switch (event)
    1a90:	66 23       	and	r22, r22
    1a92:	39 f4       	brne	.+14     	; 0x1aa2 <pb_usbEventHandler+0x12>
        {
        case USB_CONNECT:

				serialWrite('U');
    1a94:	85 e5       	ldi	r24, 0x55	; 85
    1a96:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
				serialWrite('C');
    1a9a:	83 e4       	ldi	r24, 0x43	; 67
    1a9c:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
    1aa0:	08 95       	ret
 */
static void pb_usbEventHandler(usb_device * device, usb_eventType event)
{
        //adb_usbConfiguration handle;

        switch (event)
    1aa2:	61 30       	cpi	r22, 0x01	; 1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <pb_usbEventHandler+0x18>
    1aa6:	08 95       	ret

                break;

        case USB_DISCONNECT:

				serialWrite('U');
    1aa8:	85 e5       	ldi	r24, 0x55	; 85
    1aaa:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
				serialWrite('D');
    1aae:	84 e4       	ldi	r24, 0x44	; 68
    1ab0:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
    1ab4:	08 95       	ret

00001ab6 <main>:
        }
}

int main(void)
{
	setup_timer();
    1ab6:	0e 94 9c 2b 	call	0x5738	; 0x5738 <setup_timer>

	sp_init();        
    1aba:	0e 94 76 18 	call	0x30ec	; 0x30ec <sp_init>

#ifdef VERBOSE_DEBUG
  serialWrite('1');
    1abe:	81 e3       	ldi	r24, 0x31	; 49
    1ac0:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
#endif
  settings_init();  
    1ac4:	0e 94 a8 1a 	call	0x3550	; 0x3550 <settings_init>

#ifdef VERBOSE_DEBUG
  serialWrite('2');
    1ac8:	82 e3       	ldi	r24, 0x32	; 50
    1aca:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
#endif
  plan_init();      
    1ace:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <plan_init>

#ifdef VERBOSE_DEBUG
  serialWrite('3');
    1ad2:	83 e3       	ldi	r24, 0x33	; 51
    1ad4:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
#endif
  st_init();       
    1ad8:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <st_init>


#ifdef VERBOSE_DEBUG
  serialWrite('4');
    1adc:	84 e3       	ldi	r24, 0x34	; 52
    1ade:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
#endif
  // do limits init first because its dumb at the moment 
  limits_init();
    1ae2:	0e 94 28 1c 	call	0x3850	; 0x3850 <limits_init>

#ifdef VERBOSE_DEBUG
  serialWrite('5');
    1ae6:	85 e3       	ldi	r24, 0x35	; 53
    1ae8:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
#endif
	usb_init();
    1aec:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <usb_init>

	usb_setEventHandler(pb_usbEventHandler);
    1af0:	88 e4       	ldi	r24, 0x48	; 72
    1af2:	9d e0       	ldi	r25, 0x0D	; 13
    1af4:	0e 94 27 29 	call	0x524e	; 0x524e <usb_setEventHandler>

#ifdef VERBOSE_DEBUG
  serialWrite('6');
    1af8:	86 e3       	ldi	r24, 0x36	; 54
    1afa:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
#endif

  spindle_init();   
    1afe:	0e 94 b4 1a 	call	0x3568	; 0x3568 <spindle_init>
  coolant_init();
    1b02:	0e 94 b4 05 	call	0xb68	; 0xb68 <coolant_init>
  atc_init();
    1b06:	0e 94 81 23 	call	0x4702	; 0x4702 <atc_init>
  head_init();
    1b0a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <head_init>
  vacuum_init();
    1b0e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <vacuum_init>
  panel_init();
    1b12:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <panel_init>
  gc_init();
    1b16:	0e 94 b7 07 	call	0xf6e	; 0xf6e <gc_init>
 
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n"));
    1b1a:	8f e4       	ldi	r24, 0x4F	; 79
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <main+0x8e>
	if(ackHost){
		serialWrite(ackHost);
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    1b24:	85 34       	cpi	r24, 0x45	; 69
    1b26:	c9 f1       	breq	.+114    	; 0x1b9a <main+0xe4>
    1b28:	88 34       	cpi	r24, 0x48	; 72
    1b2a:	21 f4       	brne	.+8      	; 0x1b34 <main+0x7e>
		// H = not homed
		case 'L':
				printPgmString( PSTR("lim\n"));
				break;
		case 'H':
				printPgmString( PSTR("nho\n"));
    1b2c:	85 e4       	ldi	r24, 0x45	; 69
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		case 'E':
			printPgmString( PSTR("err\n"));
			break;
	}

	ackHost = 0;
    1b34:	10 92 2e 08 	sts	0x082E, r1

    sp_process(); // ... process the serial protocol
    1b38:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <sp_process>

	process_panel(); // check the panel
    1b3c:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <process_panel>

	usb_poll();
    1b40:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <usb_poll>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    1b44:	83 b7       	in	r24, 0x33	; 51
    1b46:	81 60       	ori	r24, 0x01	; 1
    1b48:	83 bf       	out	0x33, r24	; 51
    1b4a:	88 95       	sleep
    1b4c:	83 b7       	in	r24, 0x33	; 51
    1b4e:	8e 7f       	andi	r24, 0xFE	; 254
    1b50:	83 bf       	out	0x33, r24	; 51


#ifdef VERBOSE_DEBUG
	if(ackHost){
    1b52:	80 91 2e 08 	lds	r24, 0x082E
    1b56:	88 23       	and	r24, r24
    1b58:	99 f4       	brne	.+38     	; 0x1b80 <main+0xca>
		serialWrite(ackHost);
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    1b5a:	80 91 2e 08 	lds	r24, 0x082E
    1b5e:	8c 34       	cpi	r24, 0x4C	; 76
    1b60:	b9 f0       	breq	.+46     	; 0x1b90 <main+0xda>
    1b62:	8d 34       	cpi	r24, 0x4D	; 77
    1b64:	f8 f2       	brcs	.-66     	; 0x1b24 <main+0x6e>
    1b66:	8f 34       	cpi	r24, 0x4F	; 79
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <main+0xb8>
    1b6a:	88 35       	cpi	r24, 0x58	; 88
    1b6c:	19 f7       	brne	.-58     	; 0x1b34 <main+0x7e>
		case 'H':
				printPgmString( PSTR("nho\n"));
			break;
		case 'O':
		case 'X':
			if( head_moving() == 0 ) 
    1b6e:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    1b72:	88 23       	and	r24, r24
    1b74:	f9 f6       	brne	.-66     	; 0x1b34 <main+0x7e>
				printPgmString( PSTR("ok\n"));
    1b76:	81 e4       	ldi	r24, 0x41	; 65
    1b78:	93 e0       	ldi	r25, 0x03	; 3
    1b7a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    1b7e:	da cf       	rjmp	.-76     	; 0x1b34 <main+0x7e>
    sleep_mode(); // Wait for it ...


#ifdef VERBOSE_DEBUG
	if(ackHost){
		serialWrite(ackHost);
    1b80:	80 91 2e 08 	lds	r24, 0x082E
    1b84:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    1b88:	80 91 2e 08 	lds	r24, 0x082E
    1b8c:	8c 34       	cpi	r24, 0x4C	; 76
    1b8e:	49 f7       	brne	.-46     	; 0x1b62 <main+0xac>
		// X = move finished ok
		// L = hit a limit
		// H = not homed
		case 'L':
				printPgmString( PSTR("lim\n"));
    1b90:	8a e4       	ldi	r24, 0x4A	; 74
    1b92:	93 e0       	ldi	r25, 0x03	; 3
    1b94:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    1b98:	cd cf       	rjmp	.-102    	; 0x1b34 <main+0x7e>
		case 'X':
			if( head_moving() == 0 ) 
				printPgmString( PSTR("ok\n"));
			break;
		case 'E':
			printPgmString( PSTR("err\n"));
    1b9a:	8c e3       	ldi	r24, 0x3C	; 60
    1b9c:	93 e0       	ldi	r25, 0x03	; 3
    1b9e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    1ba2:	c8 cf       	rjmp	.-112    	; 0x1b34 <main+0x7e>

00001ba4 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    1ba4:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <st_go_home>
}
    1ba8:	08 95       	ret

00001baa <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	7b 01       	movw	r14, r22
    1bbc:	8c 01       	movw	r16, r24
  st_synchronize();
    1bbe:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <st_synchronize>
  _delay_ms(milliseconds);
    1bc2:	c8 01       	movw	r24, r16
    1bc4:	b7 01       	movw	r22, r14
    1bc6:	0e 94 c1 31 	call	0x6382	; 0x6382 <__floatunsisf>
    1bca:	5b 01       	movw	r10, r22
    1bcc:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a e7       	ldi	r20, 0x7A	; 122
    1bd4:	55 e4       	ldi	r21, 0x45	; 69
    1bd6:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1bda:	7b 01       	movw	r14, r22
    1bdc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	7c f1       	brlt	.+94     	; 0x1c4c <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    1bee:	c8 01       	movw	r24, r16
    1bf0:	b7 01       	movw	r22, r14
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	57 e4       	ldi	r21, 0x47	; 71
    1bfa:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__gesf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	ac f4       	brge	.+42     	; 0x1c2c <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	c6 01       	movw	r24, r12
    1c04:	b5 01       	movw	r22, r10
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1c12:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    1c16:	cb 01       	movw	r24, r22
		while(__ticks)
    1c18:	67 2b       	or	r22, r23
    1c1a:	79 f0       	breq	.+30     	; 0x1c3a <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c1c:	20 e9       	ldi	r18, 0x90	; 144
    1c1e:	31 e0       	ldi	r19, 0x01	; 1
    1c20:	f9 01       	movw	r30, r18
    1c22:	31 97       	sbiw	r30, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c28:	d9 f7       	brne	.-10     	; 0x1c20 <mc_dwell+0x76>
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	b7 01       	movw	r22, r14
    1c30:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    1c34:	cb 01       	movw	r24, r22
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <mc_dwell+0x8c>
}
    1c3a:	1f 91       	pop	r17
    1c3c:	0f 91       	pop	r16
    1c3e:	ff 90       	pop	r15
    1c40:	ef 90       	pop	r14
    1c42:	df 90       	pop	r13
    1c44:	cf 90       	pop	r12
    1c46:	bf 90       	pop	r11
    1c48:	af 90       	pop	r10
    1c4a:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	f1 cf       	rjmp	.-30     	; 0x1c34 <mc_dwell+0x8a>

00001c52 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    1c52:	fc 01       	movw	r30, r24
    1c54:	60 91 90 09 	lds	r22, 0x0990
    1c58:	70 91 91 09 	lds	r23, 0x0991
    1c5c:	80 91 92 09 	lds	r24, 0x0992
    1c60:	90 91 93 09 	lds	r25, 0x0993
    1c64:	21 a5       	ldd	r18, Z+41	; 0x29
    1c66:	32 a5       	ldd	r19, Z+42	; 0x2a
    1c68:	43 a5       	ldd	r20, Z+43	; 0x2b
    1c6a:	54 a5       	ldd	r21, Z+44	; 0x2c
    1c6c:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    1c70:	08 95       	ret

00001c72 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    1c72:	80 91 fa 07 	lds	r24, 0x07FA
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	08 95       	ret

00001c7a <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1c7a:	20 91 e6 07 	lds	r18, 0x07E6
    1c7e:	30 91 e7 07 	lds	r19, 0x07E7
    1c82:	80 91 e8 07 	lds	r24, 0x07E8
    1c86:	90 91 e9 07 	lds	r25, 0x07E9
    1c8a:	28 17       	cp	r18, r24
    1c8c:	39 07       	cpc	r19, r25
    1c8e:	69 f0       	breq	.+26     	; 0x1caa <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1c90:	80 91 e8 07 	lds	r24, 0x07E8
    1c94:	90 91 e9 07 	lds	r25, 0x07E9
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	64 e1       	ldi	r22, 0x14	; 20
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    1ca2:	90 93 e9 07 	sts	0x07E9, r25
    1ca6:	80 93 e8 07 	sts	0x07E8, r24
    1caa:	08 95       	ret

00001cac <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1cac:	20 91 e6 07 	lds	r18, 0x07E6
    1cb0:	30 91 e7 07 	lds	r19, 0x07E7
    1cb4:	80 91 e8 07 	lds	r24, 0x07E8
    1cb8:	90 91 e9 07 	lds	r25, 0x07E9
    1cbc:	28 17       	cp	r18, r24
    1cbe:	39 07       	cpc	r19, r25
    1cc0:	d1 f0       	breq	.+52     	; 0x1cf6 <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    1cc2:	20 91 e8 07 	lds	r18, 0x07E8
    1cc6:	30 91 e9 07 	lds	r19, 0x07E9
    1cca:	c9 01       	movw	r24, r18
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	ac 01       	movw	r20, r24
    1cda:	44 0f       	add	r20, r20
    1cdc:	55 1f       	adc	r21, r21
    1cde:	44 0f       	add	r20, r20
    1ce0:	55 1f       	adc	r21, r21
    1ce2:	44 0f       	add	r20, r20
    1ce4:	55 1f       	adc	r21, r21
    1ce6:	48 0f       	add	r20, r24
    1ce8:	59 1f       	adc	r21, r25
    1cea:	42 0f       	add	r20, r18
    1cec:	53 1f       	adc	r21, r19
    1cee:	4e 5c       	subi	r20, 0xCE	; 206
    1cf0:	5d 4f       	sbci	r21, 0xFD	; 253
}
    1cf2:	ca 01       	movw	r24, r20
    1cf4:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    1cfa:	ca 01       	movw	r24, r20
    1cfc:	08 95       	ret

00001cfe <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1cfe:	4f 92       	push	r4
    1d00:	5f 92       	push	r5
    1d02:	6f 92       	push	r6
    1d04:	7f 92       	push	r7
    1d06:	8f 92       	push	r8
    1d08:	9f 92       	push	r9
    1d0a:	af 92       	push	r10
    1d0c:	bf 92       	push	r11
    1d0e:	cf 92       	push	r12
    1d10:	df 92       	push	r13
    1d12:	ef 92       	push	r14
    1d14:	ff 92       	push	r15
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	ec 01       	movw	r28, r24
    1d20:	4b 01       	movw	r8, r22
  if(!current) { return; }
    1d22:	61 15       	cp	r22, r1
    1d24:	71 05       	cpc	r23, r1
    1d26:	99 f0       	breq	.+38     	; 0x1d4e <planner_forward_pass_kernel+0x50>
  if(previous) {
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	89 f0       	breq	.+34     	; 0x1d4e <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1d2c:	e9 a8       	ldd	r14, Y+49	; 0x31
    1d2e:	fa a8       	ldd	r15, Y+50	; 0x32
    1d30:	0b a9       	ldd	r16, Y+51	; 0x33
    1d32:	1c a9       	ldd	r17, Y+52	; 0x34
    1d34:	fb 01       	movw	r30, r22
    1d36:	41 a8       	ldd	r4, Z+49	; 0x31
    1d38:	52 a8       	ldd	r5, Z+50	; 0x32
    1d3a:	63 a8       	ldd	r6, Z+51	; 0x33
    1d3c:	74 a8       	ldd	r7, Z+52	; 0x34
    1d3e:	c8 01       	movw	r24, r16
    1d40:	b7 01       	movw	r22, r14
    1d42:	a3 01       	movw	r20, r6
    1d44:	92 01       	movw	r18, r4
    1d46:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	8c f0       	brlt	.+34     	; 0x1d70 <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	df 90       	pop	r13
    1d5c:	cf 90       	pop	r12
    1d5e:	bf 90       	pop	r11
    1d60:	af 90       	pop	r10
    1d62:	9f 90       	pop	r9
    1d64:	8f 90       	pop	r8
    1d66:	7f 90       	pop	r7
    1d68:	6f 90       	pop	r6
    1d6a:	5f 90       	pop	r5
    1d6c:	4f 90       	pop	r4
    1d6e:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1d70:	f4 01       	movw	r30, r8
    1d72:	a1 a4       	ldd	r10, Z+41	; 0x29
    1d74:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1d76:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1d78:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1d7a:	c8 01       	movw	r24, r16
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	a6 01       	movw	r20, r12
    1d80:	95 01       	movw	r18, r10
    1d82:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1d86:	9b 01       	movw	r18, r22
    1d88:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1d8a:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1d8e:	7b 01       	movw	r14, r22
    1d90:	8c 01       	movw	r16, r24
    1d92:	20 91 8c 09 	lds	r18, 0x098C
    1d96:	30 91 8d 09 	lds	r19, 0x098D
    1d9a:	40 91 8e 09 	lds	r20, 0x098E
    1d9e:	50 91 8f 09 	lds	r21, 0x098F
    1da2:	50 58       	subi	r21, 0x80	; 128
    1da4:	ca 01       	movw	r24, r20
    1da6:	b9 01       	movw	r22, r18
    1da8:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e7       	ldi	r20, 0x70	; 112
    1db2:	52 e4       	ldi	r21, 0x42	; 66
    1db4:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e7       	ldi	r20, 0x70	; 112
    1dbe:	52 ec       	ldi	r21, 0xC2	; 194
    1dc0:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1dc4:	2d a5       	ldd	r18, Y+45	; 0x2d
    1dc6:	3e a5       	ldd	r19, Y+46	; 0x2e
    1dc8:	4f a5       	ldd	r20, Y+47	; 0x2f
    1dca:	58 a9       	ldd	r21, Y+48	; 0x30
    1dcc:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1dd0:	9b 01       	movw	r18, r22
    1dd2:	ac 01       	movw	r20, r24
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	b7 01       	movw	r22, r14
    1dd8:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    1ddc:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1de0:	a6 01       	movw	r20, r12
    1de2:	95 01       	movw	r18, r10
    1de4:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    1de8:	7b 01       	movw	r14, r22
    1dea:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1dec:	c3 01       	movw	r24, r6
    1dee:	b2 01       	movw	r22, r4
    1df0:	a8 01       	movw	r20, r16
    1df2:	97 01       	movw	r18, r14
    1df4:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__gesf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	0c f0       	brlt	.+2      	; 0x1dfe <planner_forward_pass_kernel+0x100>
    1dfc:	a8 cf       	rjmp	.-176    	; 0x1d4e <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    1dfe:	f4 01       	movw	r30, r8
    1e00:	e1 aa       	std	Z+49, r14	; 0x31
    1e02:	f2 aa       	std	Z+50, r15	; 0x32
    1e04:	03 ab       	std	Z+51, r16	; 0x33
    1e06:	14 ab       	std	Z+52, r17	; 0x34
    1e08:	a2 cf       	rjmp	.-188    	; 0x1d4e <planner_forward_pass_kernel+0x50>

00001e0a <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1e16:	80 91 e8 07 	lds	r24, 0x07E8
    1e1a:	90 91 e9 07 	lds	r25, 0x07E9
    1e1e:	48 2f       	mov	r20, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1e20:	08 2f       	mov	r16, r24
    1e22:	11 27       	eor	r17, r17
    1e24:	07 fd       	sbrc	r16, 7
    1e26:	10 95       	com	r17
    1e28:	80 91 e6 07 	lds	r24, 0x07E6
    1e2c:	90 91 e7 07 	lds	r25, 0x07E7
    1e30:	08 17       	cp	r16, r24
    1e32:	19 07       	cpc	r17, r25
    1e34:	91 f1       	breq	.+100    	; 0x1e9a <planner_forward_pass+0x90>
    1e36:	ee 24       	eor	r14, r14
    1e38:	ff 24       	eor	r15, r15
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <planner_forward_pass+0x38>
    1e40:	7e 01       	movw	r14, r28
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    1e42:	89 e4       	ldi	r24, 0x49	; 73
    1e44:	48 02       	muls	r20, r24
    1e46:	e0 01       	movw	r28, r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	ce 5c       	subi	r28, 0xCE	; 206
    1e4c:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    1e4e:	c9 01       	movw	r24, r18
    1e50:	b7 01       	movw	r22, r14
    1e52:	ae 01       	movw	r20, r28
    1e54:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1e58:	c8 01       	movw	r24, r16
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	64 e1       	ldi	r22, 0x14	; 20
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    1e64:	48 2f       	mov	r20, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1e66:	08 2f       	mov	r16, r24
    1e68:	11 27       	eor	r17, r17
    1e6a:	07 fd       	sbrc	r16, 7
    1e6c:	10 95       	com	r17
    1e6e:	80 91 e6 07 	lds	r24, 0x07E6
    1e72:	90 91 e7 07 	lds	r25, 0x07E7
    1e76:	97 01       	movw	r18, r14
    1e78:	08 17       	cp	r16, r24
    1e7a:	19 07       	cpc	r17, r25
    1e7c:	09 f7       	brne	.-62     	; 0x1e40 <planner_forward_pass+0x36>
    1e7e:	b7 01       	movw	r22, r14
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    1e80:	cb 01       	movw	r24, r22
    1e82:	be 01       	movw	r22, r28
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <planner_forward_pass_kernel>
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	08 95       	ret
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1e9a:	c0 e0       	ldi	r28, 0x00	; 0
    1e9c:	d0 e0       	ldi	r29, 0x00	; 0
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	ee cf       	rjmp	.-36     	; 0x1e80 <planner_forward_pass+0x76>

00001ea4 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1ea4:	6f 92       	push	r6
    1ea6:	7f 92       	push	r7
    1ea8:	8f 92       	push	r8
    1eaa:	9f 92       	push	r9
    1eac:	af 92       	push	r10
    1eae:	bf 92       	push	r11
    1eb0:	cf 92       	push	r12
    1eb2:	df 92       	push	r13
    1eb4:	ef 92       	push	r14
    1eb6:	ff 92       	push	r15
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	5b 01       	movw	r10, r22
    1ebe:	6c 01       	movw	r12, r24
    1ec0:	39 01       	movw	r6, r18
    1ec2:	4a 01       	movw	r8, r20
	st_synchronize();
    1ec4:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1ec8:	c6 01       	movw	r24, r12
    1eca:	b5 01       	movw	r22, r10
    1ecc:	20 91 6e 09 	lds	r18, 0x096E
    1ed0:	30 91 6f 09 	lds	r19, 0x096F
    1ed4:	40 91 70 09 	lds	r20, 0x0970
    1ed8:	50 91 71 09 	lds	r21, 0x0971
    1edc:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1ee0:	0e 94 f6 32 	call	0x65ec	; 0x65ec <lround>
    1ee4:	ea ee       	ldi	r30, 0xEA	; 234
    1ee6:	ce 2e       	mov	r12, r30
    1ee8:	e7 e0       	ldi	r30, 0x07	; 7
    1eea:	de 2e       	mov	r13, r30
    1eec:	60 93 ea 07 	sts	0x07EA, r22
    1ef0:	70 93 eb 07 	sts	0x07EB, r23
    1ef4:	80 93 ec 07 	sts	0x07EC, r24
    1ef8:	90 93 ed 07 	sts	0x07ED, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1efc:	c4 01       	movw	r24, r8
    1efe:	b3 01       	movw	r22, r6
    1f00:	20 91 72 09 	lds	r18, 0x0972
    1f04:	30 91 73 09 	lds	r19, 0x0973
    1f08:	40 91 74 09 	lds	r20, 0x0974
    1f0c:	50 91 75 09 	lds	r21, 0x0975
    1f10:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1f14:	0e 94 f6 32 	call	0x65ec	; 0x65ec <lround>
    1f18:	f6 01       	movw	r30, r12
    1f1a:	34 96       	adiw	r30, 0x04	; 4
    1f1c:	60 93 ee 07 	sts	0x07EE, r22
    1f20:	71 83       	std	Z+1, r23	; 0x01
    1f22:	82 83       	std	Z+2, r24	; 0x02
    1f24:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1f26:	c8 01       	movw	r24, r16
    1f28:	b7 01       	movw	r22, r14
    1f2a:	20 91 76 09 	lds	r18, 0x0976
    1f2e:	30 91 77 09 	lds	r19, 0x0977
    1f32:	40 91 78 09 	lds	r20, 0x0978
    1f36:	50 91 79 09 	lds	r21, 0x0979
    1f3a:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    1f3e:	0e 94 f6 32 	call	0x65ec	; 0x65ec <lround>
    1f42:	28 e0       	ldi	r18, 0x08	; 8
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	c2 0e       	add	r12, r18
    1f48:	d3 1e       	adc	r13, r19
    1f4a:	60 93 f2 07 	sts	0x07F2, r22
    1f4e:	f6 01       	movw	r30, r12
    1f50:	71 83       	std	Z+1, r23	; 0x01
    1f52:	82 83       	std	Z+2, r24	; 0x02
    1f54:	93 83       	std	Z+3, r25	; 0x03

	// C AXIS is always 0
    position[C_AXIS] = 0;//lround(c*settings.steps_per_mm[C_AXIS]);     
    1f56:	10 92 f6 07 	sts	0x07F6, r1
    1f5a:	10 92 f7 07 	sts	0x07F7, r1
    1f5e:	10 92 f8 07 	sts	0x07F8, r1
    1f62:	10 92 f9 07 	sts	0x07F9, r1
}
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	bf 90       	pop	r11
    1f74:	af 90       	pop	r10
    1f76:	9f 90       	pop	r9
    1f78:	8f 90       	pop	r8
    1f7a:	7f 90       	pop	r7
    1f7c:	6f 90       	pop	r6
    1f7e:	08 95       	ret

00001f80 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	80 91 fa 07 	lds	r24, 0x07FA
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	20 97       	sbiw	r28, 0x00	; 0
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <plan_set_acceleration_manager_enabled+0x18>
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	98 17       	cp	r25, r24
    1f9a:	31 f0       	breq	.+12     	; 0x1fa8 <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    1f9c:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    1fa0:	10 92 fa 07 	sts	0x07FA, r1
    1fa4:	cd 2b       	or	r28, r29
    1fa6:	19 f4       	brne	.+6      	; 0x1fae <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	80 93 fa 07 	sts	0x07FA, r24
  }
}
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1fba:	10 92 e7 07 	sts	0x07E7, r1
    1fbe:	10 92 e6 07 	sts	0x07E6, r1
  block_buffer_tail = 0;
    1fc2:	10 92 e9 07 	sts	0x07E9, r1
    1fc6:	10 92 e8 07 	sts	0x07E8, r1
  plan_set_acceleration_manager_enabled(TRUE);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1fd2:	80 e1       	ldi	r24, 0x10	; 16
    1fd4:	ea ee       	ldi	r30, 0xEA	; 234
    1fd6:	f7 e0       	ldi	r31, 0x07	; 7
    1fd8:	df 01       	movw	r26, r30
    1fda:	1d 92       	st	X+, r1
    1fdc:	8a 95       	dec	r24
    1fde:	e9 f7       	brne	.-6      	; 0x1fda <plan_init+0x20>
}
    1fe0:	08 95       	ret

00001fe2 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1fe2:	2f 92       	push	r2
    1fe4:	3f 92       	push	r3
    1fe6:	4f 92       	push	r4
    1fe8:	5f 92       	push	r5
    1fea:	6f 92       	push	r6
    1fec:	7f 92       	push	r7
    1fee:	8f 92       	push	r8
    1ff0:	9f 92       	push	r9
    1ff2:	af 92       	push	r10
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <planner_reverse_pass_kernel+0x26>
    2008:	00 d0       	rcall	.+0      	; 0x200a <planner_reverse_pass_kernel+0x28>
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	8c 01       	movw	r16, r24
    2010:	7e 83       	std	Y+6, r23	; 0x06
    2012:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    2014:	67 2b       	or	r22, r23
    2016:	09 f4       	brne	.+2      	; 0x201a <planner_reverse_pass_kernel+0x38>
    2018:	a3 c0       	rjmp	.+326    	; 0x2160 <planner_reverse_pass_kernel+0x17e>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    201a:	41 15       	cp	r20, r1
    201c:	51 05       	cpc	r21, r1
    201e:	09 f4       	brne	.+2      	; 0x2022 <planner_reverse_pass_kernel+0x40>
    2020:	19 c1       	rjmp	.+562    	; 0x2254 <__stack+0x55>
    exit_factor = next->entry_factor;
    2022:	da 01       	movw	r26, r20
    2024:	d1 96       	adiw	r26, 0x31	; 49
    2026:	8d 91       	ld	r24, X+
    2028:	9d 91       	ld	r25, X+
    202a:	0d 90       	ld	r0, X+
    202c:	bc 91       	ld	r27, X
    202e:	a0 2d       	mov	r26, r0
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	ab 83       	std	Y+3, r26	; 0x03
    2036:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    2038:	01 15       	cp	r16, r1
    203a:	11 05       	cpc	r17, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <planner_reverse_pass_kernel+0x5e>
    203e:	03 c1       	rjmp	.+518    	; 0x2246 <__stack+0x47>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    2040:	f8 01       	movw	r30, r16
    2042:	61 8d       	ldd	r22, Z+25	; 0x19
    2044:	72 8d       	ldd	r23, Z+26	; 0x1a
    2046:	83 8d       	ldd	r24, Z+27	; 0x1b
    2048:	94 8d       	ldd	r25, Z+28	; 0x1c
    204a:	ad 81       	ldd	r26, Y+5	; 0x05
    204c:	be 81       	ldd	r27, Y+6	; 0x06
    204e:	59 96       	adiw	r26, 0x19	; 25
    2050:	2d 91       	ld	r18, X+
    2052:	3d 91       	ld	r19, X+
    2054:	4d 91       	ld	r20, X+
    2056:	5c 91       	ld	r21, X
    2058:	5c 97       	sbiw	r26, 0x1c	; 28
    205a:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    205e:	9b 01       	movw	r18, r22
    2060:	ac 01       	movw	r20, r24
    2062:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2066:	1b 01       	movw	r2, r22
    2068:	2c 01       	movw	r4, r24
    206a:	f8 01       	movw	r30, r16
    206c:	65 8d       	ldd	r22, Z+29	; 0x1d
    206e:	76 8d       	ldd	r23, Z+30	; 0x1e
    2070:	87 8d       	ldd	r24, Z+31	; 0x1f
    2072:	90 a1       	ldd	r25, Z+32	; 0x20
    2074:	ad 81       	ldd	r26, Y+5	; 0x05
    2076:	be 81       	ldd	r27, Y+6	; 0x06
    2078:	5d 96       	adiw	r26, 0x1d	; 29
    207a:	2d 91       	ld	r18, X+
    207c:	3d 91       	ld	r19, X+
    207e:	4d 91       	ld	r20, X+
    2080:	5c 91       	ld	r21, X
    2082:	90 97       	sbiw	r26, 0x20	; 32
    2084:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    2088:	9b 01       	movw	r18, r22
    208a:	ac 01       	movw	r20, r24
    208c:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2090:	3b 01       	movw	r6, r22
    2092:	4c 01       	movw	r8, r24
    2094:	f8 01       	movw	r30, r16
    2096:	61 a1       	ldd	r22, Z+33	; 0x21
    2098:	72 a1       	ldd	r23, Z+34	; 0x22
    209a:	83 a1       	ldd	r24, Z+35	; 0x23
    209c:	94 a1       	ldd	r25, Z+36	; 0x24
    209e:	ad 81       	ldd	r26, Y+5	; 0x05
    20a0:	be 81       	ldd	r27, Y+6	; 0x06
    20a2:	91 96       	adiw	r26, 0x21	; 33
    20a4:	2d 91       	ld	r18, X+
    20a6:	3d 91       	ld	r19, X+
    20a8:	4d 91       	ld	r20, X+
    20aa:	5c 91       	ld	r21, X
    20ac:	94 97       	sbiw	r26, 0x24	; 36
    20ae:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    20b2:	9b 01       	movw	r18, r22
    20b4:	ac 01       	movw	r20, r24
    20b6:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    20ba:	5b 01       	movw	r10, r22
    20bc:	6c 01       	movw	r12, r24
    20be:	f8 01       	movw	r30, r16
    20c0:	65 a1       	ldd	r22, Z+37	; 0x25
    20c2:	76 a1       	ldd	r23, Z+38	; 0x26
    20c4:	87 a1       	ldd	r24, Z+39	; 0x27
    20c6:	90 a5       	ldd	r25, Z+40	; 0x28
    20c8:	ad 81       	ldd	r26, Y+5	; 0x05
    20ca:	be 81       	ldd	r27, Y+6	; 0x06
    20cc:	95 96       	adiw	r26, 0x25	; 37
    20ce:	2d 91       	ld	r18, X+
    20d0:	3d 91       	ld	r19, X+
    20d2:	4d 91       	ld	r20, X+
    20d4:	5c 91       	ld	r21, X
    20d6:	98 97       	sbiw	r26, 0x28	; 40
    20d8:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    20dc:	9b 01       	movw	r18, r22
    20de:	ac 01       	movw	r20, r24
    20e0:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    20e4:	7b 01       	movw	r14, r22
    20e6:	8c 01       	movw	r16, r24
    20e8:	c2 01       	movw	r24, r4
    20ea:	b1 01       	movw	r22, r2
    20ec:	a4 01       	movw	r20, r8
    20ee:	93 01       	movw	r18, r6
    20f0:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    20f4:	a6 01       	movw	r20, r12
    20f6:	95 01       	movw	r18, r10
    20f8:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    20fc:	a8 01       	movw	r20, r16
    20fe:	97 01       	movw	r18, r14
    2100:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    2104:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <sqrt>
    2108:	5b 01       	movw	r10, r22
    210a:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    210c:	e0 90 90 09 	lds	r14, 0x0990
    2110:	f0 90 91 09 	lds	r15, 0x0991
    2114:	00 91 92 09 	lds	r16, 0x0992
    2118:	10 91 93 09 	lds	r17, 0x0993
    211c:	c8 01       	movw	r24, r16
    211e:	b7 01       	movw	r22, r14
    2120:	a6 01       	movw	r20, r12
    2122:	95 01       	movw	r18, r10
    2124:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
    2128:	87 fd       	sbrc	r24, 7
    212a:	33 c0       	rjmp	.+102    	; 0x2192 <planner_reverse_pass_kernel+0x1b0>
    212c:	0f 2e       	mov	r0, r31
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	6f 2e       	mov	r6, r31
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	7f 2e       	mov	r7, r31
    2136:	f0 e8       	ldi	r31, 0x80	; 128
    2138:	8f 2e       	mov	r8, r31
    213a:	ff e3       	ldi	r31, 0x3F	; 63
    213c:	9f 2e       	mov	r9, r31
    213e:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    2140:	c4 01       	movw	r24, r8
    2142:	b3 01       	movw	r22, r6
    2144:	29 81       	ldd	r18, Y+1	; 0x01
    2146:	3a 81       	ldd	r19, Y+2	; 0x02
    2148:	4b 81       	ldd	r20, Y+3	; 0x03
    214a:	5c 81       	ldd	r21, Y+4	; 0x04
    214c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__gesf2>
    2150:	18 16       	cp	r1, r24
    2152:	44 f1       	brlt	.+80     	; 0x21a4 <planner_reverse_pass_kernel+0x1c2>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    2154:	ed 81       	ldd	r30, Y+5	; 0x05
    2156:	fe 81       	ldd	r31, Y+6	; 0x06
    2158:	61 aa       	std	Z+49, r6	; 0x31
    215a:	72 aa       	std	Z+50, r7	; 0x32
    215c:	83 aa       	std	Z+51, r8	; 0x33
    215e:	94 aa       	std	Z+52, r9	; 0x34
}
    2160:	26 96       	adiw	r28, 0x06	; 6
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	df 90       	pop	r13
    217a:	cf 90       	pop	r12
    217c:	bf 90       	pop	r11
    217e:	af 90       	pop	r10
    2180:	9f 90       	pop	r9
    2182:	8f 90       	pop	r8
    2184:	7f 90       	pop	r7
    2186:	6f 90       	pop	r6
    2188:	5f 90       	pop	r5
    218a:	4f 90       	pop	r4
    218c:	3f 90       	pop	r3
    218e:	2f 90       	pop	r2
    2190:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    2192:	c8 01       	movw	r24, r16
    2194:	b7 01       	movw	r22, r14
    2196:	a6 01       	movw	r20, r12
    2198:	95 01       	movw	r18, r10
    219a:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    219e:	3b 01       	movw	r6, r22
    21a0:	4c 01       	movw	r8, r24
    21a2:	ce cf       	rjmp	.-100    	; 0x2140 <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    21a4:	ed 81       	ldd	r30, Y+5	; 0x05
    21a6:	fe 81       	ldd	r31, Y+6	; 0x06
    21a8:	a1 a4       	ldd	r10, Z+41	; 0x29
    21aa:	b2 a4       	ldd	r11, Z+42	; 0x2a
    21ac:	c3 a4       	ldd	r12, Z+43	; 0x2b
    21ae:	d4 a4       	ldd	r13, Z+44	; 0x2c
    21b0:	c6 01       	movw	r24, r12
    21b2:	b5 01       	movw	r22, r10
    21b4:	29 81       	ldd	r18, Y+1	; 0x01
    21b6:	3a 81       	ldd	r19, Y+2	; 0x02
    21b8:	4b 81       	ldd	r20, Y+3	; 0x03
    21ba:	5c 81       	ldd	r21, Y+4	; 0x04
    21bc:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    21c0:	9b 01       	movw	r18, r22
    21c2:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    21c4:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    21c8:	7b 01       	movw	r14, r22
    21ca:	8c 01       	movw	r16, r24
    21cc:	20 91 8c 09 	lds	r18, 0x098C
    21d0:	30 91 8d 09 	lds	r19, 0x098D
    21d4:	40 91 8e 09 	lds	r20, 0x098E
    21d8:	50 91 8f 09 	lds	r21, 0x098F
    21dc:	50 58       	subi	r21, 0x80	; 128
    21de:	ca 01       	movw	r24, r20
    21e0:	b9 01       	movw	r22, r18
    21e2:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e7       	ldi	r20, 0x70	; 112
    21ec:	52 e4       	ldi	r21, 0x42	; 66
    21ee:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e7       	ldi	r20, 0x70	; 112
    21f8:	52 ec       	ldi	r21, 0xC2	; 194
    21fa:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    21fe:	ad 81       	ldd	r26, Y+5	; 0x05
    2200:	be 81       	ldd	r27, Y+6	; 0x06
    2202:	9d 96       	adiw	r26, 0x2d	; 45
    2204:	2d 91       	ld	r18, X+
    2206:	3d 91       	ld	r19, X+
    2208:	4d 91       	ld	r20, X+
    220a:	5c 91       	ld	r21, X
    220c:	d0 97       	sbiw	r26, 0x30	; 48
    220e:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2212:	9b 01       	movw	r18, r22
    2214:	ac 01       	movw	r20, r24
    2216:	c8 01       	movw	r24, r16
    2218:	b7 01       	movw	r22, r14
    221a:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    221e:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    2222:	a6 01       	movw	r20, r12
    2224:	95 01       	movw	r18, r10
    2226:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    222a:	7b 01       	movw	r14, r22
    222c:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    222e:	c4 01       	movw	r24, r8
    2230:	b3 01       	movw	r22, r6
    2232:	a8 01       	movw	r20, r16
    2234:	97 01       	movw	r18, r14
    2236:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__gesf2>
    223a:	18 16       	cp	r1, r24
    223c:	0c f0       	brlt	.+2      	; 0x2240 <__stack+0x41>
    223e:	8a cf       	rjmp	.-236    	; 0x2154 <planner_reverse_pass_kernel+0x172>
    2240:	37 01       	movw	r6, r14
    2242:	48 01       	movw	r8, r16
    2244:	87 cf       	rjmp	.-242    	; 0x2154 <planner_reverse_pass_kernel+0x172>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <factor_for_safe_speed>
    224e:	3b 01       	movw	r6, r22
    2250:	4c 01       	movw	r8, r24
    2252:	80 cf       	rjmp	.-256    	; 0x2154 <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <factor_for_safe_speed>
    225c:	69 83       	std	Y+1, r22	; 0x01
    225e:	7a 83       	std	Y+2, r23	; 0x02
    2260:	8b 83       	std	Y+3, r24	; 0x03
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	e9 ce       	rjmp	.-558    	; 0x2038 <planner_reverse_pass_kernel+0x56>

00002266 <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    2266:	cf 92       	push	r12
    2268:	df 92       	push	r13
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    2274:	80 91 e6 07 	lds	r24, 0x07E6
    2278:	90 91 e7 07 	lds	r25, 0x07E7
    227c:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    227e:	20 91 e8 07 	lds	r18, 0x07E8
    2282:	30 91 e9 07 	lds	r19, 0x07E9
    2286:	99 27       	eor	r25, r25
    2288:	87 fd       	sbrc	r24, 7
    228a:	90 95       	com	r25
    228c:	82 17       	cp	r24, r18
    228e:	93 07       	cpc	r25, r19
    2290:	b9 f1       	breq	.+110    	; 0x2300 <planner_reverse_pass+0x9a>
    2292:	00 e0       	ldi	r16, 0x00	; 0
    2294:	10 e0       	ldi	r17, 0x00	; 0
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	19 c0       	rjmp	.+50     	; 0x22ce <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    229c:	8f 2d       	mov	r24, r15
    229e:	99 e4       	ldi	r25, 0x49	; 73
    22a0:	89 02       	muls	r24, r25
    22a2:	b0 01       	movw	r22, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	cf 2c       	mov	r12, r15
    22a8:	dd 24       	eor	r13, r13
    22aa:	c7 fc       	sbrc	r12, 7
    22ac:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    22ae:	eb 01       	movw	r28, r22
    22b0:	ce 5c       	subi	r28, 0xCE	; 206
    22b2:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    22b4:	ce 01       	movw	r24, r28
    22b6:	b8 01       	movw	r22, r16
    22b8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    22bc:	80 91 e8 07 	lds	r24, 0x07E8
    22c0:	90 91 e9 07 	lds	r25, 0x07E9
    22c4:	a8 01       	movw	r20, r16
    22c6:	8c 15       	cp	r24, r12
    22c8:	9d 05       	cpc	r25, r13
    22ca:	61 f0       	breq	.+24     	; 0x22e4 <planner_reverse_pass+0x7e>
    22cc:	8e 01       	movw	r16, r28
    block_index--;
    22ce:	fa 94       	dec	r15
    if(block_index < 0) {
    22d0:	f7 fe       	sbrs	r15, 7
    22d2:	e4 cf       	rjmp	.-56     	; 0x229c <planner_reverse_pass+0x36>
    22d4:	a3 e1       	ldi	r26, 0x13	; 19
    22d6:	fa 2e       	mov	r15, r26
    22d8:	6b e6       	ldi	r22, 0x6B	; 107
    22da:	75 e0       	ldi	r23, 0x05	; 5
    22dc:	f3 e1       	ldi	r31, 0x13	; 19
    22de:	cf 2e       	mov	r12, r31
    22e0:	d1 2c       	mov	r13, r1
    22e2:	e5 cf       	rjmp	.-54     	; 0x22ae <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    22e4:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	be 01       	movw	r22, r28
    22ec:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <planner_reverse_pass_kernel>
}
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	ff 90       	pop	r15
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    2300:	c0 e0       	ldi	r28, 0x00	; 0
    2302:	d0 e0       	ldi	r29, 0x00	; 0
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	ee cf       	rjmp	.-36     	; 0x22e6 <planner_reverse_pass+0x80>

0000230a <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    230a:	2f 92       	push	r2
    230c:	3f 92       	push	r3
    230e:	4f 92       	push	r4
    2310:	5f 92       	push	r5
    2312:	6f 92       	push	r6
    2314:	7f 92       	push	r7
    2316:	8f 92       	push	r8
    2318:	9f 92       	push	r9
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	62 97       	sbiw	r28, 0x12	; 18
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	9a 8b       	std	Y+18, r25	; 0x12
    2340:	89 8b       	std	Y+17, r24	; 0x11
    2342:	6a 01       	movw	r12, r20
    2344:	7b 01       	movw	r14, r22
    2346:	18 01       	movw	r2, r16
    2348:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    234a:	fc 01       	movw	r30, r24
    234c:	65 89       	ldd	r22, Z+21	; 0x15
    234e:	76 89       	ldd	r23, Z+22	; 0x16
    2350:	87 89       	ldd	r24, Z+23	; 0x17
    2352:	90 8d       	ldd	r25, Z+24	; 0x18
    2354:	0e 94 c1 31 	call	0x6382	; 0x6382 <__floatunsisf>
    2358:	3b 01       	movw	r6, r22
    235a:	4c 01       	movw	r8, r24
    235c:	a7 01       	movw	r20, r14
    235e:	96 01       	movw	r18, r12
    2360:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2364:	0e 94 11 31 	call	0x6222	; 0x6222 <ceil>
    2368:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    236c:	7b 01       	movw	r14, r22
    236e:	8c 01       	movw	r16, r24
    2370:	e9 89       	ldd	r30, Y+17	; 0x11
    2372:	fa 89       	ldd	r31, Y+18	; 0x12
    2374:	65 ab       	std	Z+53, r22	; 0x35
    2376:	76 ab       	std	Z+54, r23	; 0x36
    2378:	87 ab       	std	Z+55, r24	; 0x37
    237a:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    237c:	c4 01       	movw	r24, r8
    237e:	b3 01       	movw	r22, r6
    2380:	a2 01       	movw	r20, r4
    2382:	91 01       	movw	r18, r2
    2384:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2388:	0e 94 11 31 	call	0x6222	; 0x6222 <ceil>
    238c:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    2390:	1b 01       	movw	r2, r22
    2392:	2c 01       	movw	r4, r24
    2394:	e9 89       	ldd	r30, Y+17	; 0x11
    2396:	fa 89       	ldd	r31, Y+18	; 0x12
    2398:	61 af       	std	Z+57, r22	; 0x39
    239a:	72 af       	std	Z+58, r23	; 0x3a
    239c:	83 af       	std	Z+59, r24	; 0x3b
    239e:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    23a0:	fd 96       	adiw	r30, 0x3d	; 61
    23a2:	60 81       	ld	r22, Z
    23a4:	71 81       	ldd	r23, Z+1	; 0x01
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	fd 97       	sbiw	r30, 0x3d	; 61
    23ac:	fa 8b       	std	Y+18, r31	; 0x12
    23ae:	e9 8b       	std	Y+17, r30	; 0x11
    23b0:	28 e2       	ldi	r18, 0x28	; 40
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	0e 94 2f 34 	call	0x685e	; 0x685e <__mulsi3>
    23bc:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e7       	ldi	r20, 0x70	; 112
    23c6:	52 e4       	ldi	r21, 0x42	; 66
    23c8:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    23cc:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    23d0:	5b 01       	movw	r10, r22
    23d2:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    23d4:	c8 01       	movw	r24, r16
    23d6:	b7 01       	movw	r22, r14
    23d8:	0e 94 c1 31 	call	0x6382	; 0x6382 <__floatunsisf>
    23dc:	7b 01       	movw	r14, r22
    23de:	8c 01       	movw	r16, r24
    23e0:	c6 01       	movw	r24, r12
    23e2:	b5 01       	movw	r22, r10
    23e4:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    23e8:	6d 83       	std	Y+5, r22	; 0x05
    23ea:	7e 83       	std	Y+6, r23	; 0x06
    23ec:	8f 83       	std	Y+7, r24	; 0x07
    23ee:	98 87       	std	Y+8, r25	; 0x08
}

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    23f0:	c4 01       	movw	r24, r8
    23f2:	b3 01       	movw	r22, r6
    23f4:	a4 01       	movw	r20, r8
    23f6:	93 01       	movw	r18, r6
    23f8:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    23fc:	3b 01       	movw	r6, r22
    23fe:	4c 01       	movw	r8, r24
    2400:	c8 01       	movw	r24, r16
    2402:	b7 01       	movw	r22, r14
    2404:	a8 01       	movw	r20, r16
    2406:	97 01       	movw	r18, r14
    2408:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    240c:	69 87       	std	Y+9, r22	; 0x09
    240e:	7a 87       	std	Y+10, r23	; 0x0a
    2410:	8b 87       	std	Y+11, r24	; 0x0b
    2412:	9c 87       	std	Y+12, r25	; 0x0c
    2414:	6d 81       	ldd	r22, Y+5	; 0x05
    2416:	7e 81       	ldd	r23, Y+6	; 0x06
    2418:	8f 81       	ldd	r24, Y+7	; 0x07
    241a:	98 85       	ldd	r25, Y+8	; 0x08
    241c:	9b 01       	movw	r18, r22
    241e:	ac 01       	movw	r20, r24
    2420:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    2424:	6d 87       	std	Y+13, r22	; 0x0d
    2426:	7e 87       	std	Y+14, r23	; 0x0e
    2428:	8f 87       	std	Y+15, r24	; 0x0f
    242a:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    242c:	c4 01       	movw	r24, r8
    242e:	b3 01       	movw	r22, r6
    2430:	29 85       	ldd	r18, Y+9	; 0x09
    2432:	3a 85       	ldd	r19, Y+10	; 0x0a
    2434:	4b 85       	ldd	r20, Y+11	; 0x0b
    2436:	5c 85       	ldd	r21, Y+12	; 0x0c
    2438:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    243c:	2d 85       	ldd	r18, Y+13	; 0x0d
    243e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2440:	4f 85       	ldd	r20, Y+15	; 0x0f
    2442:	58 89       	ldd	r21, Y+16	; 0x10
    2444:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2448:	0e 94 11 31 	call	0x6222	; 0x6222 <ceil>
    244c:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    2450:	69 83       	std	Y+1, r22	; 0x01
    2452:	7a 83       	std	Y+2, r23	; 0x02
    2454:	8b 83       	std	Y+3, r24	; 0x03
    2456:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    2458:	c2 01       	movw	r24, r4
    245a:	b1 01       	movw	r22, r2
    245c:	0e 94 c1 31 	call	0x6382	; 0x6382 <__floatunsisf>
    2460:	9b 01       	movw	r18, r22
    2462:	ac 01       	movw	r20, r24
}

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    2464:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2468:	1b 01       	movw	r2, r22
    246a:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    246c:	a4 01       	movw	r20, r8
    246e:	93 01       	movw	r18, r6
    2470:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    2474:	7b 01       	movw	r14, r22
    2476:	8c 01       	movw	r16, r24
    2478:	d0 94       	com	r13
    247a:	c0 94       	com	r12
    247c:	b0 94       	com	r11
    247e:	a0 94       	com	r10
    2480:	a1 1c       	adc	r10, r1
    2482:	b1 1c       	adc	r11, r1
    2484:	c1 1c       	adc	r12, r1
    2486:	d1 1c       	adc	r13, r1
    2488:	c6 01       	movw	r24, r12
    248a:	b5 01       	movw	r22, r10
    248c:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    2490:	9b 01       	movw	r18, r22
    2492:	ac 01       	movw	r20, r24
    2494:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    2498:	9b 01       	movw	r18, r22
    249a:	ac 01       	movw	r20, r24
    249c:	c8 01       	movw	r24, r16
    249e:	b7 01       	movw	r22, r14
    24a0:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    24a4:	0e 94 fe 31 	call	0x63fc	; 0x63fc <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    24a8:	e9 89       	ldd	r30, Y+17	; 0x11
    24aa:	fa 89       	ldd	r31, Y+18	; 0x12
    24ac:	a1 88       	ldd	r10, Z+17	; 0x11
    24ae:	b2 88       	ldd	r11, Z+18	; 0x12
    24b0:	c3 88       	ldd	r12, Z+19	; 0x13
    24b2:	d4 88       	ldd	r13, Z+20	; 0x14
    24b4:	86 01       	movw	r16, r12
    24b6:	75 01       	movw	r14, r10
    24b8:	29 81       	ldd	r18, Y+1	; 0x01
    24ba:	3a 81       	ldd	r19, Y+2	; 0x02
    24bc:	4b 81       	ldd	r20, Y+3	; 0x03
    24be:	5c 81       	ldd	r21, Y+4	; 0x04
    24c0:	e2 1a       	sub	r14, r18
    24c2:	f3 0a       	sbc	r15, r19
    24c4:	04 0b       	sbc	r16, r20
    24c6:	15 0b       	sbc	r17, r21
    24c8:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    24cc:	a8 01       	movw	r20, r16
    24ce:	97 01       	movw	r18, r14
    24d0:	26 1b       	sub	r18, r22
    24d2:	37 0b       	sbc	r19, r23
    24d4:	48 0b       	sbc	r20, r24
    24d6:	59 0b       	sbc	r21, r25
    24d8:	da 01       	movw	r26, r20
    24da:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    24dc:	57 fd       	sbrc	r21, 7
    24de:	30 c0       	rjmp	.+96     	; 0x2540 <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    24e0:	49 89       	ldd	r20, Y+17	; 0x11
    24e2:	5a 89       	ldd	r21, Y+18	; 0x12
    24e4:	4f 5b       	subi	r20, 0xBF	; 191
    24e6:	5f 4f       	sbci	r21, 0xFF	; 255
    24e8:	fa 01       	movw	r30, r20
    24ea:	29 81       	ldd	r18, Y+1	; 0x01
    24ec:	3a 81       	ldd	r19, Y+2	; 0x02
    24ee:	4b 81       	ldd	r20, Y+3	; 0x03
    24f0:	5c 81       	ldd	r21, Y+4	; 0x04
    24f2:	21 93       	st	Z+, r18
    24f4:	31 93       	st	Z+, r19
    24f6:	41 93       	st	Z+, r20
    24f8:	51 93       	st	Z+, r21
    24fa:	fa 8b       	std	Y+18, r31	; 0x12
    24fc:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    24fe:	82 0f       	add	r24, r18
    2500:	93 1f       	adc	r25, r19
    2502:	a4 1f       	adc	r26, r20
    2504:	b5 1f       	adc	r27, r21
    2506:	80 83       	st	Z, r24
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	a2 83       	std	Z+2, r26	; 0x02
    250c:	b3 83       	std	Z+3, r27	; 0x03
}                    
    250e:	62 96       	adiw	r28, 0x12	; 18
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	ff 90       	pop	r15
    2524:	ef 90       	pop	r14
    2526:	df 90       	pop	r13
    2528:	cf 90       	pop	r12
    252a:	bf 90       	pop	r11
    252c:	af 90       	pop	r10
    252e:	9f 90       	pop	r9
    2530:	8f 90       	pop	r8
    2532:	7f 90       	pop	r7
    2534:	6f 90       	pop	r6
    2536:	5f 90       	pop	r5
    2538:	4f 90       	pop	r4
    253a:	3f 90       	pop	r3
    253c:	2f 90       	pop	r2
    253e:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    2540:	c6 01       	movw	r24, r12
    2542:	b5 01       	movw	r22, r10
    2544:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    2548:	2d 85       	ldd	r18, Y+13	; 0x0d
    254a:	3e 85       	ldd	r19, Y+14	; 0x0e
    254c:	4f 85       	ldd	r20, Y+15	; 0x0f
    254e:	58 89       	ldd	r21, Y+16	; 0x10
    2550:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2554:	29 85       	ldd	r18, Y+9	; 0x09
    2556:	3a 85       	ldd	r19, Y+10	; 0x0a
    2558:	4b 85       	ldd	r20, Y+11	; 0x0b
    255a:	5c 85       	ldd	r21, Y+12	; 0x0c
    255c:	0e 94 84 30 	call	0x6108	; 0x6108 <__subsf3>
    2560:	9b 01       	movw	r18, r22
    2562:	ac 01       	movw	r20, r24
    2564:	c2 01       	movw	r24, r4
    2566:	b1 01       	movw	r22, r2
    2568:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    256c:	7b 01       	movw	r14, r22
    256e:	8c 01       	movw	r16, r24
    2570:	6d 81       	ldd	r22, Y+5	; 0x05
    2572:	7e 81       	ldd	r23, Y+6	; 0x06
    2574:	8f 81       	ldd	r24, Y+7	; 0x07
    2576:	98 85       	ldd	r25, Y+8	; 0x08
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	50 e4       	ldi	r21, 0x40	; 64
    2580:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2584:	9b 01       	movw	r18, r22
    2586:	ac 01       	movw	r20, r24
    2588:	c8 01       	movw	r24, r16
    258a:	b7 01       	movw	r22, r14
    258c:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2590:	0e 94 11 31 	call	0x6222	; 0x6222 <ceil>
    2594:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    2598:	69 83       	std	Y+1, r22	; 0x01
    259a:	7a 83       	std	Y+2, r23	; 0x02
    259c:	8b 83       	std	Y+3, r24	; 0x03
    259e:	9c 83       	std	Y+4, r25	; 0x04
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a0 e0       	ldi	r26, 0x00	; 0
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	9b cf       	rjmp	.-202    	; 0x24e0 <calculate_trapezoid_for_block+0x1d6>

000025aa <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	0f 93       	push	r16
    25b0:	1f 93       	push	r17
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    25b6:	80 91 e8 07 	lds	r24, 0x07E8
    25ba:	90 91 e9 07 	lds	r25, 0x07E9
    25be:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    25c0:	e8 2e       	mov	r14, r24
    25c2:	ff 24       	eor	r15, r15
    25c4:	e7 fc       	sbrc	r14, 7
    25c6:	f0 94       	com	r15
    25c8:	80 91 e6 07 	lds	r24, 0x07E6
    25cc:	90 91 e7 07 	lds	r25, 0x07E7
    25d0:	e8 16       	cp	r14, r24
    25d2:	f9 06       	cpc	r15, r25
    25d4:	e1 f1       	breq	.+120    	; 0x264e <planner_recalculate_trapezoids+0xa4>
    25d6:	e0 e0       	ldi	r30, 0x00	; 0
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	01 c0       	rjmp	.+2      	; 0x25de <planner_recalculate_trapezoids+0x34>
    25dc:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    25de:	89 e4       	ldi	r24, 0x49	; 73
    25e0:	28 02       	muls	r18, r24
    25e2:	e0 01       	movw	r28, r0
    25e4:	11 24       	eor	r1, r1
    25e6:	ce 5c       	subi	r28, 0xCE	; 206
    25e8:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    25ea:	30 97       	sbiw	r30, 0x00	; 0
    25ec:	59 f0       	breq	.+22     	; 0x2604 <planner_recalculate_trapezoids+0x5a>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    25ee:	41 a9       	ldd	r20, Z+49	; 0x31
    25f0:	52 a9       	ldd	r21, Z+50	; 0x32
    25f2:	63 a9       	ldd	r22, Z+51	; 0x33
    25f4:	74 a9       	ldd	r23, Z+52	; 0x34
    25f6:	09 a9       	ldd	r16, Y+49	; 0x31
    25f8:	1a a9       	ldd	r17, Y+50	; 0x32
    25fa:	2b a9       	ldd	r18, Y+51	; 0x33
    25fc:	3c a9       	ldd	r19, Y+52	; 0x34
    25fe:	cf 01       	movw	r24, r30
    2600:	0e 94 85 11 	call	0x230a	; 0x230a <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    2604:	c7 01       	movw	r24, r14
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	64 e1       	ldi	r22, 0x14	; 20
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    2610:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2612:	e8 2e       	mov	r14, r24
    2614:	ff 24       	eor	r15, r15
    2616:	e7 fc       	sbrc	r14, 7
    2618:	f0 94       	com	r15
    261a:	80 91 e6 07 	lds	r24, 0x07E6
    261e:	90 91 e7 07 	lds	r25, 0x07E7
    2622:	e8 16       	cp	r14, r24
    2624:	f9 06       	cpc	r15, r25
    2626:	d1 f6       	brne	.-76     	; 0x25dc <planner_recalculate_trapezoids+0x32>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    2628:	ce 01       	movw	r24, r28
    262a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <factor_for_safe_speed>
    262e:	8b 01       	movw	r16, r22
    2630:	9c 01       	movw	r18, r24
    2632:	49 a9       	ldd	r20, Y+49	; 0x31
    2634:	5a a9       	ldd	r21, Y+50	; 0x32
    2636:	6b a9       	ldd	r22, Y+51	; 0x33
    2638:	7c a9       	ldd	r23, Y+52	; 0x34
    263a:	ce 01       	movw	r24, r28
    263c:	0e 94 85 11 	call	0x230a	; 0x230a <calculate_trapezoid_for_block>
}
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	ff 90       	pop	r15
    264a:	ef 90       	pop	r14
    264c:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    264e:	c0 e0       	ldi	r28, 0x00	; 0
    2650:	d0 e0       	ldi	r29, 0x00	; 0
    2652:	ea cf       	rjmp	.-44     	; 0x2628 <planner_recalculate_trapezoids+0x7e>

00002654 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    2654:	0e 94 33 11 	call	0x2266	; 0x2266 <planner_reverse_pass>
  planner_forward_pass();
    2658:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <planner_forward_pass>
  planner_recalculate_trapezoids();
    265c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <planner_recalculate_trapezoids>
}
    2660:	08 95       	ret

00002662 <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    2662:	2f 92       	push	r2
    2664:	3f 92       	push	r3
    2666:	4f 92       	push	r4
    2668:	5f 92       	push	r5
    266a:	6f 92       	push	r6
    266c:	7f 92       	push	r7
    266e:	8f 92       	push	r8
    2670:	9f 92       	push	r9
    2672:	af 92       	push	r10
    2674:	bf 92       	push	r11
    2676:	cf 92       	push	r12
    2678:	df 92       	push	r13
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	c8 54       	subi	r28, 0x48	; 72
    268c:	d0 40       	sbci	r29, 0x00	; 0
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	3b 01       	movw	r6, r22
    269a:	4c 01       	movw	r8, r24
    269c:	23 96       	adiw	r28, 0x03	; 3
    269e:	2c af       	std	Y+60, r18	; 0x3c
    26a0:	3d af       	std	Y+61, r19	; 0x3d
    26a2:	4e af       	std	Y+62, r20	; 0x3e
    26a4:	5f af       	std	Y+63, r21	; 0x3f
    26a6:	23 97       	sbiw	r28, 0x03	; 3
    26a8:	17 01       	movw	r2, r14
    26aa:	28 01       	movw	r4, r16

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("x = "));
    26ac:	8a e7       	ldi	r24, 0x7A	; 122
    26ae:	93 e0       	ldi	r25, 0x03	; 3
    26b0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	printFloat( x );
    26b4:	c4 01       	movw	r24, r8
    26b6:	b3 01       	movw	r22, r6
    26b8:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
	printPgmString(PSTR("\r\n"));
    26bc:	87 e7       	ldi	r24, 0x77	; 119
    26be:	93 e0       	ldi	r25, 0x03	; 3
    26c0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	printPgmString(PSTR("y = "));
    26c4:	82 e7       	ldi	r24, 0x72	; 114
    26c6:	93 e0       	ldi	r25, 0x03	; 3
    26c8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	printFloat( y );
    26cc:	23 96       	adiw	r28, 0x03	; 3
    26ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    26d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    26d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    26d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    26d6:	23 97       	sbiw	r28, 0x03	; 3
    26d8:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
	printPgmString(PSTR("\r\n"));
    26dc:	8f e6       	ldi	r24, 0x6F	; 111
    26de:	93 e0       	ldi	r25, 0x03	; 3
    26e0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	printPgmString(PSTR("z = "));
    26e4:	8a e6       	ldi	r24, 0x6A	; 106
    26e6:	93 e0       	ldi	r25, 0x03	; 3
    26e8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	printFloat( z );
    26ec:	c8 01       	movw	r24, r16
    26ee:	b7 01       	movw	r22, r14
    26f0:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
	printPgmString(PSTR("\r\n"));
    26f4:	87 e6       	ldi	r24, 0x67	; 103
    26f6:	93 e0       	ldi	r25, 0x03	; 3
    26f8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	printPgmString(PSTR("c = "));
    26fc:	82 e6       	ldi	r24, 0x62	; 98
    26fe:	93 e0       	ldi	r25, 0x03	; 3
    2700:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	printFloat( c );
    2704:	c6 01       	movw	r24, r12
    2706:	b5 01       	movw	r22, r10
    2708:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
	printPgmString(PSTR("\r\n"));
    270c:	8f e5       	ldi	r24, 0x5F	; 95
    270e:	93 e0       	ldi	r25, 0x03	; 3
    2710:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

#endif
  
  if( gHomed == FALSE ) 
    2714:	80 91 2f 08 	lds	r24, 0x082F
    2718:	88 23       	and	r24, r24
    271a:	d1 f4       	brne	.+52     	; 0x2750 <plan_buffer_line+0xee>
	// blah
  position[C_AXIS] = 0;

  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    271c:	c8 5b       	subi	r28, 0xB8	; 184
    271e:	df 4f       	sbci	r29, 0xFF	; 255
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	df 90       	pop	r13
    2738:	cf 90       	pop	r12
    273a:	bf 90       	pop	r11
    273c:	af 90       	pop	r10
    273e:	9f 90       	pop	r9
    2740:	8f 90       	pop	r8
    2742:	7f 90       	pop	r7
    2744:	6f 90       	pop	r6
    2746:	5f 90       	pop	r5
    2748:	4f 90       	pop	r4
    274a:	3f 90       	pop	r3
    274c:	2f 90       	pop	r2
    274e:	08 95       	ret
  
  if( gHomed == FALSE ) 
  	return;
	
	// always 0  
	position[C_AXIS] = 0;
    2750:	10 92 f6 07 	sts	0x07F6, r1
    2754:	10 92 f7 07 	sts	0x07F7, r1
    2758:	10 92 f8 07 	sts	0x07F8, r1
    275c:	10 92 f9 07 	sts	0x07F9, r1

  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    2760:	c4 01       	movw	r24, r8
    2762:	b3 01       	movw	r22, r6
    2764:	20 91 6e 09 	lds	r18, 0x096E
    2768:	30 91 6f 09 	lds	r19, 0x096F
    276c:	40 91 70 09 	lds	r20, 0x0970
    2770:	50 91 71 09 	lds	r21, 0x0971
    2774:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2778:	0e 94 f6 32 	call	0x65ec	; 0x65ec <lround>
    277c:	7b 01       	movw	r14, r22
    277e:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2780:	20 91 72 09 	lds	r18, 0x0972
    2784:	30 91 73 09 	lds	r19, 0x0973
    2788:	40 91 74 09 	lds	r20, 0x0974
    278c:	50 91 75 09 	lds	r21, 0x0975
    2790:	2b af       	std	Y+59, r18	; 0x3b
    2792:	3c af       	std	Y+60, r19	; 0x3c
    2794:	4d af       	std	Y+61, r20	; 0x3d
    2796:	5e af       	std	Y+62, r21	; 0x3e
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2798:	40 91 76 09 	lds	r20, 0x0976
    279c:	50 91 77 09 	lds	r21, 0x0977
    27a0:	60 91 78 09 	lds	r22, 0x0978
    27a4:	70 91 79 09 	lds	r23, 0x0979
    27a8:	4f ab       	std	Y+55, r20	; 0x37
    27aa:	58 af       	std	Y+56, r21	; 0x38
    27ac:	69 af       	std	Y+57, r22	; 0x39
    27ae:	7a af       	std	Y+58, r23	; 0x3a
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    27b0:	60 91 7a 09 	lds	r22, 0x097A
    27b4:	70 91 7b 09 	lds	r23, 0x097B
    27b8:	80 91 7c 09 	lds	r24, 0x097C
    27bc:	90 91 7d 09 	lds	r25, 0x097D
    27c0:	6b ab       	std	Y+51, r22	; 0x33
    27c2:	7c ab       	std	Y+52, r23	; 0x34
    27c4:	8d ab       	std	Y+53, r24	; 0x35
    27c6:	9e ab       	std	Y+54, r25	; 0x36
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    27c8:	80 91 e6 07 	lds	r24, 0x07E6
    27cc:	90 91 e7 07 	lds	r25, 0x07E7
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	64 e1       	ldi	r22, 0x14	; 20
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    27da:	24 96       	adiw	r28, 0x04	; 4
    27dc:	8f af       	std	Y+63, r24	; 0x3f
    27de:	24 97       	sbiw	r28, 0x04	; 4
    27e0:	25 96       	adiw	r28, 0x05	; 5
    27e2:	9f af       	std	Y+63, r25	; 0x3f
    27e4:	25 97       	sbiw	r28, 0x05	; 5
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    27e6:	20 91 e8 07 	lds	r18, 0x07E8
    27ea:	30 91 e9 07 	lds	r19, 0x07E9
    27ee:	25 96       	adiw	r28, 0x05	; 5
    27f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    27f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    27f4:	25 97       	sbiw	r28, 0x05	; 5
    27f6:	28 17       	cp	r18, r24
    27f8:	39 07       	cpc	r19, r25
    27fa:	71 f4       	brne	.+28     	; 0x2818 <plan_buffer_line+0x1b6>
    27fc:	83 b7       	in	r24, 0x33	; 51
    27fe:	81 60       	ori	r24, 0x01	; 1
    2800:	83 bf       	out	0x33, r24	; 51
    2802:	88 95       	sleep
    2804:	83 b7       	in	r24, 0x33	; 51
    2806:	8e 7f       	andi	r24, 0xFE	; 254
    2808:	83 bf       	out	0x33, r24	; 51
    280a:	80 91 e8 07 	lds	r24, 0x07E8
    280e:	90 91 e9 07 	lds	r25, 0x07E9
    2812:	82 17       	cp	r24, r18
    2814:	93 07       	cpc	r25, r19
    2816:	91 f3       	breq	.-28     	; 0x27fc <plan_buffer_line+0x19a>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    2818:	20 91 e6 07 	lds	r18, 0x07E6
    281c:	30 91 e7 07 	lds	r19, 0x07E7
    2820:	c9 01       	movw	r24, r18
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	dc 01       	movw	r26, r24
    2830:	aa 0f       	add	r26, r26
    2832:	bb 1f       	adc	r27, r27
    2834:	aa 0f       	add	r26, r26
    2836:	bb 1f       	adc	r27, r27
    2838:	aa 0f       	add	r26, r26
    283a:	bb 1f       	adc	r27, r27
    283c:	a8 0f       	add	r26, r24
    283e:	b9 1f       	adc	r27, r25
    2840:	a2 0f       	add	r26, r18
    2842:	b3 1f       	adc	r27, r19
    2844:	ae 5c       	subi	r26, 0xCE	; 206
    2846:	bd 4f       	sbci	r27, 0xFD	; 253
    2848:	ba ab       	std	Y+50, r27	; 0x32
    284a:	a9 ab       	std	Y+49, r26	; 0x31
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    284c:	80 91 ea 07 	lds	r24, 0x07EA
    2850:	90 91 eb 07 	lds	r25, 0x07EB
    2854:	a0 91 ec 07 	lds	r26, 0x07EC
    2858:	b0 91 ed 07 	lds	r27, 0x07ED
    285c:	37 01       	movw	r6, r14
    285e:	48 01       	movw	r8, r16
    2860:	68 1a       	sub	r6, r24
    2862:	79 0a       	sbc	r7, r25
    2864:	8a 0a       	sbc	r8, r26
    2866:	9b 0a       	sbc	r9, r27
    2868:	97 fc       	sbrc	r9, 7
    286a:	31 c3       	rjmp	.+1634   	; 0x2ece <plan_buffer_line+0x86c>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    286c:	6b a9       	ldd	r22, Y+51	; 0x33
    286e:	7c a9       	ldd	r23, Y+52	; 0x34
    2870:	8d a9       	ldd	r24, Y+53	; 0x35
    2872:	9e a9       	ldd	r25, Y+54	; 0x36
    2874:	a6 01       	movw	r20, r12
    2876:	95 01       	movw	r18, r10
    2878:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    287c:	0e 94 f6 32 	call	0x65ec	; 0x65ec <lround>
    2880:	6d 87       	std	Y+13, r22	; 0x0d
    2882:	7e 87       	std	Y+14, r23	; 0x0e
    2884:	8f 87       	std	Y+15, r24	; 0x0f
    2886:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2888:	6f a9       	ldd	r22, Y+55	; 0x37
    288a:	78 ad       	ldd	r23, Y+56	; 0x38
    288c:	89 ad       	ldd	r24, Y+57	; 0x39
    288e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2890:	a2 01       	movw	r20, r4
    2892:	91 01       	movw	r18, r2
    2894:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2898:	0e 94 f6 32 	call	0x65ec	; 0x65ec <lround>
    289c:	69 87       	std	Y+9, r22	; 0x09
    289e:	7a 87       	std	Y+10, r23	; 0x0a
    28a0:	8b 87       	std	Y+11, r24	; 0x0b
    28a2:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    28a4:	6b ad       	ldd	r22, Y+59	; 0x3b
    28a6:	7c ad       	ldd	r23, Y+60	; 0x3c
    28a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ac:	23 96       	adiw	r28, 0x03	; 3
    28ae:	2c ad       	ldd	r18, Y+60	; 0x3c
    28b0:	3d ad       	ldd	r19, Y+61	; 0x3d
    28b2:	4e ad       	ldd	r20, Y+62	; 0x3e
    28b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    28b6:	23 97       	sbiw	r28, 0x03	; 3
    28b8:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    28bc:	0e 94 f6 32 	call	0x65ec	; 0x65ec <lround>
    28c0:	6d 83       	std	Y+5, r22	; 0x05
    28c2:	7e 83       	std	Y+6, r23	; 0x06
    28c4:	8f 83       	std	Y+7, r24	; 0x07
    28c6:	98 87       	std	Y+8, r25	; 0x08

  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    28c8:	e9 82       	std	Y+1, r14	; 0x01
    28ca:	fa 82       	std	Y+2, r15	; 0x02
    28cc:	0b 83       	std	Y+3, r16	; 0x03
    28ce:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    28d0:	e9 a9       	ldd	r30, Y+49	; 0x31
    28d2:	fa a9       	ldd	r31, Y+50	; 0x32
    28d4:	60 82       	st	Z, r6
    28d6:	71 82       	std	Z+1, r7	; 0x01
    28d8:	82 82       	std	Z+2, r8	; 0x02
    28da:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    28dc:	2d 81       	ldd	r18, Y+5	; 0x05
    28de:	3e 81       	ldd	r19, Y+6	; 0x06
    28e0:	4f 81       	ldd	r20, Y+7	; 0x07
    28e2:	58 85       	ldd	r21, Y+8	; 0x08
    28e4:	2d 8b       	std	Y+21, r18	; 0x15
    28e6:	3e 8b       	std	Y+22, r19	; 0x16
    28e8:	4f 8b       	std	Y+23, r20	; 0x17
    28ea:	58 8f       	std	Y+24, r21	; 0x18
    28ec:	80 91 ee 07 	lds	r24, 0x07EE
    28f0:	90 91 ef 07 	lds	r25, 0x07EF
    28f4:	a0 91 f0 07 	lds	r26, 0x07F0
    28f8:	b0 91 f1 07 	lds	r27, 0x07F1
    28fc:	28 1b       	sub	r18, r24
    28fe:	39 0b       	sbc	r19, r25
    2900:	4a 0b       	sbc	r20, r26
    2902:	5b 0b       	sbc	r21, r27
    2904:	da 01       	movw	r26, r20
    2906:	c9 01       	movw	r24, r18
    2908:	57 fd       	sbrc	r21, 7
    290a:	d9 c2       	rjmp	.+1458   	; 0x2ebe <plan_buffer_line+0x85c>
    290c:	e9 a9       	ldd	r30, Y+49	; 0x31
    290e:	fa a9       	ldd	r31, Y+50	; 0x32
    2910:	84 83       	std	Z+4, r24	; 0x04
    2912:	95 83       	std	Z+5, r25	; 0x05
    2914:	a6 83       	std	Z+6, r26	; 0x06
    2916:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2918:	29 85       	ldd	r18, Y+9	; 0x09
    291a:	3a 85       	ldd	r19, Y+10	; 0x0a
    291c:	4b 85       	ldd	r20, Y+11	; 0x0b
    291e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2920:	29 8f       	std	Y+25, r18	; 0x19
    2922:	3a 8f       	std	Y+26, r19	; 0x1a
    2924:	4b 8f       	std	Y+27, r20	; 0x1b
    2926:	5c 8f       	std	Y+28, r21	; 0x1c
    2928:	80 91 f2 07 	lds	r24, 0x07F2
    292c:	90 91 f3 07 	lds	r25, 0x07F3
    2930:	a0 91 f4 07 	lds	r26, 0x07F4
    2934:	b0 91 f5 07 	lds	r27, 0x07F5
    2938:	28 1b       	sub	r18, r24
    293a:	39 0b       	sbc	r19, r25
    293c:	4a 0b       	sbc	r20, r26
    293e:	5b 0b       	sbc	r21, r27
    2940:	da 01       	movw	r26, r20
    2942:	c9 01       	movw	r24, r18
    2944:	57 fd       	sbrc	r21, 7
    2946:	b3 c2       	rjmp	.+1382   	; 0x2eae <plan_buffer_line+0x84c>
    2948:	e9 a9       	ldd	r30, Y+49	; 0x31
    294a:	fa a9       	ldd	r31, Y+50	; 0x32
    294c:	80 87       	std	Z+8, r24	; 0x08
    294e:	91 87       	std	Z+9, r25	; 0x09
    2950:	a2 87       	std	Z+10, r26	; 0x0a
    2952:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2954:	2d 85       	ldd	r18, Y+13	; 0x0d
    2956:	3e 85       	ldd	r19, Y+14	; 0x0e
    2958:	4f 85       	ldd	r20, Y+15	; 0x0f
    295a:	58 89       	ldd	r21, Y+16	; 0x10
    295c:	2d 8f       	std	Y+29, r18	; 0x1d
    295e:	3e 8f       	std	Y+30, r19	; 0x1e
    2960:	4f 8f       	std	Y+31, r20	; 0x1f
    2962:	58 a3       	std	Y+32, r21	; 0x20
    2964:	40 91 f6 07 	lds	r20, 0x07F6
    2968:	50 91 f7 07 	lds	r21, 0x07F7
    296c:	60 91 f8 07 	lds	r22, 0x07F8
    2970:	70 91 f9 07 	lds	r23, 0x07F9
    2974:	49 8b       	std	Y+17, r20	; 0x11
    2976:	5a 8b       	std	Y+18, r21	; 0x12
    2978:	6b 8b       	std	Y+19, r22	; 0x13
    297a:	7c 8b       	std	Y+20, r23	; 0x14
    297c:	ad 8c       	ldd	r10, Y+29	; 0x1d
    297e:	be 8c       	ldd	r11, Y+30	; 0x1e
    2980:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2982:	d8 a0       	ldd	r13, Y+32	; 0x20
    2984:	a4 1a       	sub	r10, r20
    2986:	b5 0a       	sbc	r11, r21
    2988:	c6 0a       	sbc	r12, r22
    298a:	d7 0a       	sbc	r13, r23
    298c:	86 01       	movw	r16, r12
    298e:	75 01       	movw	r14, r10
    2990:	d7 fc       	sbrc	r13, 7
    2992:	85 c2       	rjmp	.+1290   	; 0x2e9e <plan_buffer_line+0x83c>
    2994:	a9 a9       	ldd	r26, Y+49	; 0x31
    2996:	ba a9       	ldd	r27, Y+50	; 0x32
    2998:	1c 96       	adiw	r26, 0x0c	; 12
    299a:	ed 92       	st	X+, r14
    299c:	fd 92       	st	X+, r15
    299e:	0d 93       	st	X+, r16
    29a0:	1c 93       	st	X, r17
    29a2:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    29a4:	18 96       	adiw	r26, 0x08	; 8
    29a6:	2d 91       	ld	r18, X+
    29a8:	3d 91       	ld	r19, X+
    29aa:	4d 91       	ld	r20, X+
    29ac:	5c 91       	ld	r21, X
    29ae:	1b 97       	sbiw	r26, 0x0b	; 11
    29b0:	fd 01       	movw	r30, r26
    29b2:	84 81       	ldd	r24, Z+4	; 0x04
    29b4:	95 81       	ldd	r25, Z+5	; 0x05
    29b6:	a6 81       	ldd	r26, Z+6	; 0x06
    29b8:	b7 81       	ldd	r27, Z+7	; 0x07
    29ba:	82 17       	cp	r24, r18
    29bc:	93 07       	cpc	r25, r19
    29be:	a4 07       	cpc	r26, r20
    29c0:	b5 07       	cpc	r27, r21
    29c2:	08 f4       	brcc	.+2      	; 0x29c6 <plan_buffer_line+0x364>
    29c4:	54 c2       	rjmp	.+1192   	; 0x2e6e <plan_buffer_line+0x80c>
    29c6:	e9 a9       	ldd	r30, Y+49	; 0x31
    29c8:	fa a9       	ldd	r31, Y+50	; 0x32
    29ca:	20 81       	ld	r18, Z
    29cc:	31 81       	ldd	r19, Z+1	; 0x01
    29ce:	42 81       	ldd	r20, Z+2	; 0x02
    29d0:	53 81       	ldd	r21, Z+3	; 0x03
    29d2:	82 17       	cp	r24, r18
    29d4:	93 07       	cpc	r25, r19
    29d6:	a4 07       	cpc	r26, r20
    29d8:	b5 07       	cpc	r27, r21
    29da:	08 f4       	brcc	.+2      	; 0x29de <plan_buffer_line+0x37c>
    29dc:	3f c2       	rjmp	.+1150   	; 0x2e5c <plan_buffer_line+0x7fa>
    29de:	8e 15       	cp	r24, r14
    29e0:	9f 05       	cpc	r25, r15
    29e2:	a0 07       	cpc	r26, r16
    29e4:	b1 07       	cpc	r27, r17
    29e6:	08 f4       	brcc	.+2      	; 0x29ea <plan_buffer_line+0x388>
    29e8:	36 c2       	rjmp	.+1132   	; 0x2e56 <plan_buffer_line+0x7f4>
    29ea:	e9 a9       	ldd	r30, Y+49	; 0x31
    29ec:	fa a9       	ldd	r31, Y+50	; 0x32
    29ee:	81 8b       	std	Z+17, r24	; 0x11
    29f0:	92 8b       	std	Z+18, r25	; 0x12
    29f2:	a3 8b       	std	Z+19, r26	; 0x13
    29f4:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	a1 05       	cpc	r26, r1
    29fa:	b1 05       	cpc	r27, r1
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <plan_buffer_line+0x39e>
    29fe:	3a c2       	rjmp	.+1140   	; 0x2e74 <plan_buffer_line+0x812>
// needs for GUI ACK
 	ackHost = 'X';
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2a00:	29 81       	ldd	r18, Y+1	; 0x01
    2a02:	3a 81       	ldd	r19, Y+2	; 0x02
    2a04:	4b 81       	ldd	r20, Y+3	; 0x03
    2a06:	5c 81       	ldd	r21, Y+4	; 0x04
    2a08:	29 96       	adiw	r28, 0x09	; 9
    2a0a:	2c af       	std	Y+60, r18	; 0x3c
    2a0c:	3d af       	std	Y+61, r19	; 0x3d
    2a0e:	4e af       	std	Y+62, r20	; 0x3e
    2a10:	5f af       	std	Y+63, r21	; 0x3f
    2a12:	29 97       	sbiw	r28, 0x09	; 9
    2a14:	80 91 ea 07 	lds	r24, 0x07EA
    2a18:	90 91 eb 07 	lds	r25, 0x07EB
    2a1c:	a0 91 ec 07 	lds	r26, 0x07EC
    2a20:	b0 91 ed 07 	lds	r27, 0x07ED
    2a24:	28 1b       	sub	r18, r24
    2a26:	39 0b       	sbc	r19, r25
    2a28:	4a 0b       	sbc	r20, r26
    2a2a:	5b 0b       	sbc	r21, r27
    2a2c:	ca 01       	movw	r24, r20
    2a2e:	b9 01       	movw	r22, r18
    2a30:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    2a34:	20 91 6e 09 	lds	r18, 0x096E
    2a38:	30 91 6f 09 	lds	r19, 0x096F
    2a3c:	40 91 70 09 	lds	r20, 0x0970
    2a40:	50 91 71 09 	lds	r21, 0x0971
    2a44:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2a48:	6d a7       	std	Y+45, r22	; 0x2d
    2a4a:	7e a7       	std	Y+46, r23	; 0x2e
    2a4c:	8f a7       	std	Y+47, r24	; 0x2f
    2a4e:	98 ab       	std	Y+48, r25	; 0x30
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    2a50:	80 91 ee 07 	lds	r24, 0x07EE
    2a54:	90 91 ef 07 	lds	r25, 0x07EF
    2a58:	a0 91 f0 07 	lds	r26, 0x07F0
    2a5c:	b0 91 f1 07 	lds	r27, 0x07F1
    2a60:	2d 89       	ldd	r18, Y+21	; 0x15
    2a62:	3e 89       	ldd	r19, Y+22	; 0x16
    2a64:	4f 89       	ldd	r20, Y+23	; 0x17
    2a66:	58 8d       	ldd	r21, Y+24	; 0x18
    2a68:	28 1b       	sub	r18, r24
    2a6a:	39 0b       	sbc	r19, r25
    2a6c:	4a 0b       	sbc	r20, r26
    2a6e:	5b 0b       	sbc	r21, r27
    2a70:	ca 01       	movw	r24, r20
    2a72:	b9 01       	movw	r22, r18
    2a74:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    2a78:	20 91 72 09 	lds	r18, 0x0972
    2a7c:	30 91 73 09 	lds	r19, 0x0973
    2a80:	40 91 74 09 	lds	r20, 0x0974
    2a84:	50 91 75 09 	lds	r21, 0x0975
    2a88:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2a8c:	69 a7       	std	Y+41, r22	; 0x29
    2a8e:	7a a7       	std	Y+42, r23	; 0x2a
    2a90:	8b a7       	std	Y+43, r24	; 0x2b
    2a92:	9c a7       	std	Y+44, r25	; 0x2c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    2a94:	80 91 f2 07 	lds	r24, 0x07F2
    2a98:	90 91 f3 07 	lds	r25, 0x07F3
    2a9c:	a0 91 f4 07 	lds	r26, 0x07F4
    2aa0:	b0 91 f5 07 	lds	r27, 0x07F5
    2aa4:	29 8d       	ldd	r18, Y+25	; 0x19
    2aa6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2aa8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2aaa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2aac:	28 1b       	sub	r18, r24
    2aae:	39 0b       	sbc	r19, r25
    2ab0:	4a 0b       	sbc	r20, r26
    2ab2:	5b 0b       	sbc	r21, r27
    2ab4:	ca 01       	movw	r24, r20
    2ab6:	b9 01       	movw	r22, r18
    2ab8:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    2abc:	20 91 76 09 	lds	r18, 0x0976
    2ac0:	30 91 77 09 	lds	r19, 0x0977
    2ac4:	40 91 78 09 	lds	r20, 0x0978
    2ac8:	50 91 79 09 	lds	r21, 0x0979
    2acc:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2ad0:	6d a3       	std	Y+37, r22	; 0x25
    2ad2:	7e a3       	std	Y+38, r23	; 0x26
    2ad4:	8f a3       	std	Y+39, r24	; 0x27
    2ad6:	98 a7       	std	Y+40, r25	; 0x28
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2ad8:	c6 01       	movw	r24, r12
    2ada:	b5 01       	movw	r22, r10
    2adc:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    2ae0:	20 91 7a 09 	lds	r18, 0x097A
    2ae4:	30 91 7b 09 	lds	r19, 0x097B
    2ae8:	40 91 7c 09 	lds	r20, 0x097C
    2aec:	50 91 7d 09 	lds	r21, 0x097D
    2af0:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2af4:	69 a3       	std	Y+33, r22	; 0x21
    2af6:	7a a3       	std	Y+34, r23	; 0x22
    2af8:	8b a3       	std	Y+35, r24	; 0x23
    2afa:	9c a3       	std	Y+36, r25	; 0x24
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    2afc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2afe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b02:	98 a9       	ldd	r25, Y+48	; 0x30
    2b04:	0e 94 1e 34 	call	0x683c	; 0x683c <square>
    2b08:	3b 01       	movw	r6, r22
    2b0a:	4c 01       	movw	r8, r24
    2b0c:	69 a5       	ldd	r22, Y+41	; 0x29
    2b0e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b14:	0e 94 1e 34 	call	0x683c	; 0x683c <square>
    2b18:	7b 01       	movw	r14, r22
    2b1a:	8c 01       	movw	r16, r24
    2b1c:	6d a1       	ldd	r22, Y+37	; 0x25
    2b1e:	7e a1       	ldd	r23, Y+38	; 0x26
    2b20:	8f a1       	ldd	r24, Y+39	; 0x27
    2b22:	98 a5       	ldd	r25, Y+40	; 0x28
    2b24:	0e 94 1e 34 	call	0x683c	; 0x683c <square>
    2b28:	5b 01       	movw	r10, r22
    2b2a:	6c 01       	movw	r12, r24
    2b2c:	69 a1       	ldd	r22, Y+33	; 0x21
    2b2e:	7a a1       	ldd	r23, Y+34	; 0x22
    2b30:	8b a1       	ldd	r24, Y+35	; 0x23
    2b32:	9c a1       	ldd	r25, Y+36	; 0x24
    2b34:	0e 94 1e 34 	call	0x683c	; 0x683c <square>
    2b38:	1b 01       	movw	r2, r22
    2b3a:	2c 01       	movw	r4, r24
    2b3c:	c4 01       	movw	r24, r8
    2b3e:	b3 01       	movw	r22, r6
    2b40:	a8 01       	movw	r20, r16
    2b42:	97 01       	movw	r18, r14
    2b44:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    2b48:	a6 01       	movw	r20, r12
    2b4a:	95 01       	movw	r18, r10
    2b4c:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    2b50:	a2 01       	movw	r20, r4
    2b52:	91 01       	movw	r18, r2
    2b54:	0e 94 85 30 	call	0x610a	; 0x610a <__addsf3>
    2b58:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <sqrt>
    2b5c:	a9 a9       	ldd	r26, Y+49	; 0x31
    2b5e:	ba a9       	ldd	r27, Y+50	; 0x32
    2b60:	9d 96       	adiw	r26, 0x2d	; 45
    2b62:	6d 93       	st	X+, r22
    2b64:	7d 93       	st	X+, r23
    2b66:	8d 93       	st	X+, r24
    2b68:	9c 93       	st	X, r25
    2b6a:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    2b6c:	a4 96       	adiw	r28, 0x24	; 36
    2b6e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b70:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b72:	a4 97       	sbiw	r28, 0x24	; 36
    2b74:	ef 2b       	or	r30, r31
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <plan_buffer_line+0x518>
    2b78:	85 c1       	rjmp	.+778    	; 0x2e84 <plan_buffer_line+0x822>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2b7a:	a2 96       	adiw	r28, 0x22	; 34
    2b7c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b7e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b80:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b82:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b84:	a2 97       	sbiw	r28, 0x22	; 34
    2b86:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	34 e2       	ldi	r19, 0x24	; 36
    2b8e:	44 e7       	ldi	r20, 0x74	; 116
    2b90:	59 e4       	ldi	r21, 0x49	; 73
    2b92:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2b96:	0e 94 f6 32 	call	0x65ec	; 0x65ec <lround>
    2b9a:	ac 01       	movw	r20, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	da 01       	movw	r26, r20
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2ba4:	0e 94 c1 31 	call	0x6382	; 0x6382 <__floatunsisf>
    2ba8:	9b 01       	movw	r18, r22
    2baa:	ac 01       	movw	r20, r24
    2bac:	60 ec       	ldi	r22, 0xC0	; 192
    2bae:	71 ee       	ldi	r23, 0xE1	; 225
    2bb0:	84 e6       	ldi	r24, 0x64	; 100
    2bb2:	9c e4       	ldi	r25, 0x4C	; 76
    2bb4:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2bb8:	7b 01       	movw	r14, r22
    2bba:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2bbc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2bbe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    2bc4:	a8 01       	movw	r20, r16
    2bc6:	97 01       	movw	r18, r14
    2bc8:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2bcc:	a9 a9       	ldd	r26, Y+49	; 0x31
    2bce:	ba a9       	ldd	r27, Y+50	; 0x32
    2bd0:	59 96       	adiw	r26, 0x19	; 25
    2bd2:	6d 93       	st	X+, r22
    2bd4:	7d 93       	st	X+, r23
    2bd6:	8d 93       	st	X+, r24
    2bd8:	9c 93       	st	X, r25
    2bda:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    2bdc:	69 a5       	ldd	r22, Y+41	; 0x29
    2bde:	7a a5       	ldd	r23, Y+42	; 0x2a
    2be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2be4:	a8 01       	movw	r20, r16
    2be6:	97 01       	movw	r18, r14
    2be8:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2bec:	e9 a9       	ldd	r30, Y+49	; 0x31
    2bee:	fa a9       	ldd	r31, Y+50	; 0x32
    2bf0:	65 8f       	std	Z+29, r22	; 0x1d
    2bf2:	76 8f       	std	Z+30, r23	; 0x1e
    2bf4:	87 8f       	std	Z+31, r24	; 0x1f
    2bf6:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    2bf8:	6d a1       	ldd	r22, Y+37	; 0x25
    2bfa:	7e a1       	ldd	r23, Y+38	; 0x26
    2bfc:	8f a1       	ldd	r24, Y+39	; 0x27
    2bfe:	98 a5       	ldd	r25, Y+40	; 0x28
    2c00:	a8 01       	movw	r20, r16
    2c02:	97 01       	movw	r18, r14
    2c04:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2c08:	a9 a9       	ldd	r26, Y+49	; 0x31
    2c0a:	ba a9       	ldd	r27, Y+50	; 0x32
    2c0c:	91 96       	adiw	r26, 0x21	; 33
    2c0e:	6d 93       	st	X+, r22
    2c10:	7d 93       	st	X+, r23
    2c12:	8d 93       	st	X+, r24
    2c14:	9c 93       	st	X, r25
    2c16:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    2c18:	69 a1       	ldd	r22, Y+33	; 0x21
    2c1a:	7a a1       	ldd	r23, Y+34	; 0x22
    2c1c:	8b a1       	ldd	r24, Y+35	; 0x23
    2c1e:	9c a1       	ldd	r25, Y+36	; 0x24
    2c20:	a8 01       	movw	r20, r16
    2c22:	97 01       	movw	r18, r14
    2c24:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2c28:	e9 a9       	ldd	r30, Y+49	; 0x31
    2c2a:	fa a9       	ldd	r31, Y+50	; 0x32
    2c2c:	65 a3       	std	Z+37, r22	; 0x25
    2c2e:	76 a3       	std	Z+38, r23	; 0x26
    2c30:	87 a3       	std	Z+39, r24	; 0x27
    2c32:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    2c34:	65 a5       	ldd	r22, Z+45	; 0x2d
    2c36:	76 a5       	ldd	r23, Z+46	; 0x2e
    2c38:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c3a:	90 a9       	ldd	r25, Z+48	; 0x30
    2c3c:	a8 01       	movw	r20, r16
    2c3e:	97 01       	movw	r18, r14
    2c40:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2c44:	a9 a9       	ldd	r26, Y+49	; 0x31
    2c46:	ba a9       	ldd	r27, Y+50	; 0x32
    2c48:	99 96       	adiw	r26, 0x29	; 41
    2c4a:	6d 93       	st	X+, r22
    2c4c:	7d 93       	st	X+, r23
    2c4e:	8d 93       	st	X+, r24
    2c50:	9c 93       	st	X, r25
    2c52:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    2c54:	51 96       	adiw	r26, 0x11	; 17
    2c56:	6d 91       	ld	r22, X+
    2c58:	7d 91       	ld	r23, X+
    2c5a:	8d 91       	ld	r24, X+
    2c5c:	9c 91       	ld	r25, X
    2c5e:	54 97       	sbiw	r26, 0x14	; 20
    2c60:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    2c64:	5b 01       	movw	r10, r22
    2c66:	6c 01       	movw	r12, r24
    2c68:	a8 01       	movw	r20, r16
    2c6a:	97 01       	movw	r18, r14
    2c6c:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2c70:	0e 94 11 31 	call	0x6222	; 0x6222 <ceil>
    2c74:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    2c78:	3b 01       	movw	r6, r22
    2c7a:	4c 01       	movw	r8, r24
    2c7c:	e9 a9       	ldd	r30, Y+49	; 0x31
    2c7e:	fa a9       	ldd	r31, Y+50	; 0x32
    2c80:	65 8b       	std	Z+21, r22	; 0x15
    2c82:	76 8b       	std	Z+22, r23	; 0x16
    2c84:	87 8b       	std	Z+23, r24	; 0x17
    2c86:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	a0 e0       	ldi	r26, 0x00	; 0
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	81 ab       	std	Z+49, r24	; 0x31
    2c92:	92 ab       	std	Z+50, r25	; 0x32
    2c94:	a3 ab       	std	Z+51, r26	; 0x33
    2c96:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2c98:	60 91 8c 09 	lds	r22, 0x098C
    2c9c:	70 91 8d 09 	lds	r23, 0x098D
    2ca0:	80 91 8e 09 	lds	r24, 0x098E
    2ca4:	90 91 8f 09 	lds	r25, 0x098F
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e7       	ldi	r20, 0x70	; 112
    2cae:	52 e4       	ldi	r21, 0x42	; 66
    2cb0:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	52 e4       	ldi	r21, 0x42	; 66
    2cbc:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2cc0:	7b 01       	movw	r14, r22
    2cc2:	8c 01       	movw	r16, r24
    2cc4:	a9 a9       	ldd	r26, Y+49	; 0x31
    2cc6:	ba a9       	ldd	r27, Y+50	; 0x32
    2cc8:	9d 96       	adiw	r26, 0x2d	; 45
    2cca:	6d 91       	ld	r22, X+
    2ccc:	7d 91       	ld	r23, X+
    2cce:	8d 91       	ld	r24, X+
    2cd0:	9c 91       	ld	r25, X
    2cd2:	d0 97       	sbiw	r26, 0x30	; 48
    2cd4:	a6 01       	movw	r20, r12
    2cd6:	95 01       	movw	r18, r10
    2cd8:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2cdc:	9b 01       	movw	r18, r22
    2cde:	ac 01       	movw	r20, r24
    2ce0:	c8 01       	movw	r24, r16
    2ce2:	b7 01       	movw	r22, r14
    2ce4:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2ce8:	0e 94 11 31 	call	0x6222	; 0x6222 <ceil>
    2cec:	09 a9       	ldd	r16, Y+49	; 0x31
    2cee:	1a a9       	ldd	r17, Y+50	; 0x32
    2cf0:	03 5c       	subi	r16, 0xC3	; 195
    2cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf4:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    2cf8:	f8 01       	movw	r30, r16
    2cfa:	60 83       	st	Z, r22
    2cfc:	71 83       	std	Z+1, r23	; 0x01
    2cfe:	82 83       	std	Z+2, r24	; 0x02
    2d00:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    2d02:	20 91 fa 07 	lds	r18, 0x07FA
    2d06:	22 23       	and	r18, r18
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <plan_buffer_line+0x6aa>
    2d0a:	ea c0       	rjmp	.+468    	; 0x2ee0 <plan_buffer_line+0x87e>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    2d0c:	a9 a9       	ldd	r26, Y+49	; 0x31
    2d0e:	ba a9       	ldd	r27, Y+50	; 0x32
    2d10:	d5 96       	adiw	r26, 0x35	; 53
    2d12:	6d 92       	st	X+, r6
    2d14:	7d 92       	st	X+, r7
    2d16:	8d 92       	st	X+, r8
    2d18:	9c 92       	st	X, r9
    2d1a:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    2d1c:	fd 01       	movw	r30, r26
    2d1e:	61 ae       	std	Z+57, r6	; 0x39
    2d20:	72 ae       	std	Z+58, r7	; 0x3a
    2d22:	83 ae       	std	Z+59, r8	; 0x3b
    2d24:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    2d26:	ef 5b       	subi	r30, 0xBF	; 191
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	10 82       	st	Z, r1
    2d2c:	11 82       	std	Z+1, r1	; 0x01
    2d2e:	12 82       	std	Z+2, r1	; 0x02
    2d30:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    2d32:	ad 01       	movw	r20, r26
    2d34:	4b 5b       	subi	r20, 0xBB	; 187
    2d36:	5f 4f       	sbci	r21, 0xFF	; 255
    2d38:	fd 01       	movw	r30, r26
    2d3a:	81 89       	ldd	r24, Z+17	; 0x11
    2d3c:	92 89       	ldd	r25, Z+18	; 0x12
    2d3e:	a3 89       	ldd	r26, Z+19	; 0x13
    2d40:	b4 89       	ldd	r27, Z+20	; 0x14
    2d42:	fa 01       	movw	r30, r20
    2d44:	80 83       	st	Z, r24
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	a2 83       	std	Z+2, r26	; 0x02
    2d4a:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    2d4c:	d8 01       	movw	r26, r16
    2d4e:	1d 92       	st	X+, r1
    2d50:	1d 92       	st	X+, r1
    2d52:	1d 92       	st	X+, r1
    2d54:	1c 92       	st	X, r1
    2d56:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    2d58:	e9 a9       	ldd	r30, Y+49	; 0x31
    2d5a:	fa a9       	ldd	r31, Y+50	; 0x32
    2d5c:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    2d5e:	80 91 ea 07 	lds	r24, 0x07EA
    2d62:	90 91 eb 07 	lds	r25, 0x07EB
    2d66:	a0 91 ec 07 	lds	r26, 0x07EC
    2d6a:	b0 91 ed 07 	lds	r27, 0x07ED
    2d6e:	29 96       	adiw	r28, 0x09	; 9
    2d70:	4c ad       	ldd	r20, Y+60	; 0x3c
    2d72:	5d ad       	ldd	r21, Y+61	; 0x3d
    2d74:	6e ad       	ldd	r22, Y+62	; 0x3e
    2d76:	7f ad       	ldd	r23, Y+63	; 0x3f
    2d78:	29 97       	sbiw	r28, 0x09	; 9
    2d7a:	48 17       	cp	r20, r24
    2d7c:	59 07       	cpc	r21, r25
    2d7e:	6a 07       	cpc	r22, r26
    2d80:	7b 07       	cpc	r23, r27
    2d82:	14 f4       	brge	.+4      	; 0x2d88 <plan_buffer_line+0x726>
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2d88:	80 91 ee 07 	lds	r24, 0x07EE
    2d8c:	90 91 ef 07 	lds	r25, 0x07EF
    2d90:	a0 91 f0 07 	lds	r26, 0x07F0
    2d94:	b0 91 f1 07 	lds	r27, 0x07F1
    2d98:	4d 89       	ldd	r20, Y+21	; 0x15
    2d9a:	5e 89       	ldd	r21, Y+22	; 0x16
    2d9c:	6f 89       	ldd	r22, Y+23	; 0x17
    2d9e:	78 8d       	ldd	r23, Y+24	; 0x18
    2da0:	48 17       	cp	r20, r24
    2da2:	59 07       	cpc	r21, r25
    2da4:	6a 07       	cpc	r22, r26
    2da6:	7b 07       	cpc	r23, r27
    2da8:	44 f4       	brge	.+16     	; 0x2dba <plan_buffer_line+0x758>
    2daa:	a9 a9       	ldd	r26, Y+49	; 0x31
    2dac:	ba a9       	ldd	r27, Y+50	; 0x32
    2dae:	50 96       	adiw	r26, 0x10	; 16
    2db0:	8c 91       	ld	r24, X
    2db2:	50 97       	sbiw	r26, 0x10	; 16
    2db4:	88 60       	ori	r24, 0x08	; 8
    2db6:	50 96       	adiw	r26, 0x10	; 16
    2db8:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2dba:	80 91 f2 07 	lds	r24, 0x07F2
    2dbe:	90 91 f3 07 	lds	r25, 0x07F3
    2dc2:	a0 91 f4 07 	lds	r26, 0x07F4
    2dc6:	b0 91 f5 07 	lds	r27, 0x07F5
    2dca:	49 8d       	ldd	r20, Y+25	; 0x19
    2dcc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2dce:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2dd0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2dd2:	48 17       	cp	r20, r24
    2dd4:	59 07       	cpc	r21, r25
    2dd6:	6a 07       	cpc	r22, r26
    2dd8:	7b 07       	cpc	r23, r27
    2dda:	44 f4       	brge	.+16     	; 0x2dec <plan_buffer_line+0x78a>
    2ddc:	a9 a9       	ldd	r26, Y+49	; 0x31
    2dde:	ba a9       	ldd	r27, Y+50	; 0x32
    2de0:	50 96       	adiw	r26, 0x10	; 16
    2de2:	8c 91       	ld	r24, X
    2de4:	50 97       	sbiw	r26, 0x10	; 16
    2de6:	80 64       	ori	r24, 0x40	; 64
    2de8:	50 96       	adiw	r26, 0x10	; 16
    2dea:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2dec:	49 89       	ldd	r20, Y+17	; 0x11
    2dee:	5a 89       	ldd	r21, Y+18	; 0x12
    2df0:	6b 89       	ldd	r22, Y+19	; 0x13
    2df2:	7c 89       	ldd	r23, Y+20	; 0x14
    2df4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2df6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2df8:	af 8d       	ldd	r26, Y+31	; 0x1f
    2dfa:	b8 a1       	ldd	r27, Y+32	; 0x20
    2dfc:	84 17       	cp	r24, r20
    2dfe:	95 07       	cpc	r25, r21
    2e00:	a6 07       	cpc	r26, r22
    2e02:	b7 07       	cpc	r27, r23
    2e04:	44 f4       	brge	.+16     	; 0x2e16 <plan_buffer_line+0x7b4>
    2e06:	a9 a9       	ldd	r26, Y+49	; 0x31
    2e08:	ba a9       	ldd	r27, Y+50	; 0x32
    2e0a:	50 96       	adiw	r26, 0x10	; 16
    2e0c:	8c 91       	ld	r24, X
    2e0e:	50 97       	sbiw	r26, 0x10	; 16
    2e10:	80 68       	ori	r24, 0x80	; 128
    2e12:	50 96       	adiw	r26, 0x10	; 16
    2e14:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    2e16:	25 96       	adiw	r28, 0x05	; 5
    2e18:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e1c:	25 97       	sbiw	r28, 0x05	; 5
    2e1e:	f0 93 e7 07 	sts	0x07E7, r31
    2e22:	e0 93 e6 07 	sts	0x07E6, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    2e26:	aa ee       	ldi	r26, 0xEA	; 234
    2e28:	b7 e0       	ldi	r27, 0x07	; 7
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	31 96       	adiw	r30, 0x01	; 1
    2e2e:	80 e1       	ldi	r24, 0x10	; 16
    2e30:	01 90       	ld	r0, Z+
    2e32:	0d 92       	st	X+, r0
    2e34:	81 50       	subi	r24, 0x01	; 1
    2e36:	e1 f7       	brne	.-8      	; 0x2e30 <plan_buffer_line+0x7ce>

	// blah
  position[C_AXIS] = 0;
    2e38:	10 92 f6 07 	sts	0x07F6, r1
    2e3c:	10 92 f7 07 	sts	0x07F7, r1
    2e40:	10 92 f8 07 	sts	0x07F8, r1
    2e44:	10 92 f9 07 	sts	0x07F9, r1

  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2e48:	22 23       	and	r18, r18
    2e4a:	11 f0       	breq	.+4      	; 0x2e50 <plan_buffer_line+0x7ee>
    2e4c:	0e 94 2a 13 	call	0x2654	; 0x2654 <planner_recalculate>
  st_wake_up();
    2e50:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <st_wake_up>
    2e54:	63 cc       	rjmp	.-1850   	; 0x271c <plan_buffer_line+0xba>
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    2e56:	d8 01       	movw	r26, r16
    2e58:	c7 01       	movw	r24, r14
    2e5a:	c7 cd       	rjmp	.-1138   	; 0x29ea <plan_buffer_line+0x388>
    2e5c:	da 01       	movw	r26, r20
    2e5e:	c9 01       	movw	r24, r18
    2e60:	8e 15       	cp	r24, r14
    2e62:	9f 05       	cpc	r25, r15
    2e64:	a0 07       	cpc	r26, r16
    2e66:	b1 07       	cpc	r27, r17
    2e68:	08 f0       	brcs	.+2      	; 0x2e6c <plan_buffer_line+0x80a>
    2e6a:	bf cd       	rjmp	.-1154   	; 0x29ea <plan_buffer_line+0x388>
    2e6c:	f4 cf       	rjmp	.-24     	; 0x2e56 <plan_buffer_line+0x7f4>
    2e6e:	da 01       	movw	r26, r20
    2e70:	c9 01       	movw	r24, r18
    2e72:	a9 cd       	rjmp	.-1198   	; 0x29c6 <plan_buffer_line+0x364>
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
    2e74:	83 e5       	ldi	r24, 0x53	; 83
    2e76:	93 e0       	ldi	r25, 0x03	; 3
    2e78:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

// needs for GUI ACK
 	ackHost = 'X';
    2e7c:	88 e5       	ldi	r24, 0x58	; 88
    2e7e:	80 93 2e 08 	sts	0x082E, r24
    2e82:	4c cc       	rjmp	.-1896   	; 0x271c <plan_buffer_line+0xba>
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2e84:	60 ec       	ldi	r22, 0xC0	; 192
    2e86:	71 ee       	ldi	r23, 0xE1	; 225
    2e88:	84 e6       	ldi	r24, 0x64	; 100
    2e8a:	9c e4       	ldi	r25, 0x4C	; 76
    2e8c:	a2 96       	adiw	r28, 0x22	; 34
    2e8e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e90:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e92:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e94:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e96:	a2 97       	sbiw	r28, 0x22	; 34
    2e98:	0e 94 28 31 	call	0x6250	; 0x6250 <__divsf3>
    2e9c:	7c ce       	rjmp	.-776    	; 0x2b96 <plan_buffer_line+0x534>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2e9e:	ee 24       	eor	r14, r14
    2ea0:	ff 24       	eor	r15, r15
    2ea2:	87 01       	movw	r16, r14
    2ea4:	ea 18       	sub	r14, r10
    2ea6:	fb 08       	sbc	r15, r11
    2ea8:	0c 09       	sbc	r16, r12
    2eaa:	1d 09       	sbc	r17, r13
    2eac:	73 cd       	rjmp	.-1306   	; 0x2994 <plan_buffer_line+0x332>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2eae:	b0 95       	com	r27
    2eb0:	a0 95       	com	r26
    2eb2:	90 95       	com	r25
    2eb4:	81 95       	neg	r24
    2eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb8:	af 4f       	sbci	r26, 0xFF	; 255
    2eba:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebc:	45 cd       	rjmp	.-1398   	; 0x2948 <plan_buffer_line+0x2e6>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2ebe:	b0 95       	com	r27
    2ec0:	a0 95       	com	r26
    2ec2:	90 95       	com	r25
    2ec4:	81 95       	neg	r24
    2ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec8:	af 4f       	sbci	r26, 0xFF	; 255
    2eca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ecc:	1f cd       	rjmp	.-1474   	; 0x290c <plan_buffer_line+0x2aa>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2ece:	90 94       	com	r9
    2ed0:	80 94       	com	r8
    2ed2:	70 94       	com	r7
    2ed4:	60 94       	com	r6
    2ed6:	61 1c       	adc	r6, r1
    2ed8:	71 1c       	adc	r7, r1
    2eda:	81 1c       	adc	r8, r1
    2edc:	91 1c       	adc	r9, r1
    2ede:	c6 cc       	rjmp	.-1652   	; 0x286c <plan_buffer_line+0x20a>
  block->rate_delta = ceil(
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    2ee0:	89 a9       	ldd	r24, Y+49	; 0x31
    2ee2:	9a a9       	ldd	r25, Y+50	; 0x32
    2ee4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <factor_for_safe_speed>
    2ee8:	8b 01       	movw	r16, r22
    2eea:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    2eec:	89 a9       	ldd	r24, Y+49	; 0x31
    2eee:	9a a9       	ldd	r25, Y+50	; 0x32
    2ef0:	b9 01       	movw	r22, r18
    2ef2:	a8 01       	movw	r20, r16
    2ef4:	0e 94 85 11 	call	0x230a	; 0x230a <calculate_trapezoid_for_block>
    2ef8:	2d 81       	ldd	r18, Y+5	; 0x05
    2efa:	3e 81       	ldd	r19, Y+6	; 0x06
    2efc:	4f 81       	ldd	r20, Y+7	; 0x07
    2efe:	58 85       	ldd	r21, Y+8	; 0x08
    2f00:	2d 8b       	std	Y+21, r18	; 0x15
    2f02:	3e 8b       	std	Y+22, r19	; 0x16
    2f04:	4f 8b       	std	Y+23, r20	; 0x17
    2f06:	58 8f       	std	Y+24, r21	; 0x18
    2f08:	49 85       	ldd	r20, Y+9	; 0x09
    2f0a:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f10:	49 8f       	std	Y+25, r20	; 0x19
    2f12:	5a 8f       	std	Y+26, r21	; 0x1a
    2f14:	6b 8f       	std	Y+27, r22	; 0x1b
    2f16:	7c 8f       	std	Y+28, r23	; 0x1c
    2f18:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f1a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f1e:	98 89       	ldd	r25, Y+16	; 0x10
    2f20:	6d 8f       	std	Y+29, r22	; 0x1d
    2f22:	7e 8f       	std	Y+30, r23	; 0x1e
    2f24:	8f 8f       	std	Y+31, r24	; 0x1f
    2f26:	98 a3       	std	Y+32, r25	; 0x20
    2f28:	80 91 f6 07 	lds	r24, 0x07F6
    2f2c:	90 91 f7 07 	lds	r25, 0x07F7
    2f30:	a0 91 f8 07 	lds	r26, 0x07F8
    2f34:	b0 91 f9 07 	lds	r27, 0x07F9
    2f38:	89 8b       	std	Y+17, r24	; 0x11
    2f3a:	9a 8b       	std	Y+18, r25	; 0x12
    2f3c:	ab 8b       	std	Y+19, r26	; 0x13
    2f3e:	bc 8b       	std	Y+20, r27	; 0x14
    2f40:	29 81       	ldd	r18, Y+1	; 0x01
    2f42:	3a 81       	ldd	r19, Y+2	; 0x02
    2f44:	4b 81       	ldd	r20, Y+3	; 0x03
    2f46:	5c 81       	ldd	r21, Y+4	; 0x04
    2f48:	29 96       	adiw	r28, 0x09	; 9
    2f4a:	2c af       	std	Y+60, r18	; 0x3c
    2f4c:	3d af       	std	Y+61, r19	; 0x3d
    2f4e:	4e af       	std	Y+62, r20	; 0x3e
    2f50:	5f af       	std	Y+63, r21	; 0x3f
    2f52:	29 97       	sbiw	r28, 0x09	; 9
    2f54:	20 91 fa 07 	lds	r18, 0x07FA
    2f58:	ff ce       	rjmp	.-514    	; 0x2d58 <plan_buffer_line+0x6f6>

00002f5a <printCurrentPosition>:
extern volatile char ackHost;


void printCurrentPosition( void ) 
{
	printInteger(position[0]);
    2f5a:	60 91 ea 07 	lds	r22, 0x07EA
    2f5e:	70 91 eb 07 	lds	r23, 0x07EB
    2f62:	80 91 ec 07 	lds	r24, 0x07EC
    2f66:	90 91 ed 07 	lds	r25, 0x07ED
    2f6a:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	serialWrite(',');
    2f6e:	8c e2       	ldi	r24, 0x2C	; 44
    2f70:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
	printInteger(position[1]);
    2f74:	60 91 ee 07 	lds	r22, 0x07EE
    2f78:	70 91 ef 07 	lds	r23, 0x07EF
    2f7c:	80 91 f0 07 	lds	r24, 0x07F0
    2f80:	90 91 f1 07 	lds	r25, 0x07F1
    2f84:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	serialWrite('\n');
    2f88:	8a e0       	ldi	r24, 0x0A	; 10
    2f8a:	0e 94 d6 21 	call	0x43ac	; 0x43ac <serialWrite>
}
    2f8e:	08 95       	ret

00002f90 <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    2f98:	95 e4       	ldi	r25, 0x45	; 69
    2f9a:	f9 2e       	mov	r15, r25
		case GCSTATUS_OK:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("\nGCSTATUS_OK\n")); 
#endif
			// ack OK
			ackHost = 'O';
    2f9c:	8f e4       	ldi	r24, 0x4F	; 79
    2f9e:	e8 2e       	mov	r14, r24

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2fa0:	0e 94 ef 21 	call	0x43de	; 0x43de <serialRead>
    2fa4:	98 2f       	mov	r25, r24
    2fa6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fa8:	e1 f0       	breq	.+56     	; 0x2fe2 <sp_process+0x52>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    2faa:	20 91 2d 08 	lds	r18, 0x082D
    2fae:	22 23       	and	r18, r18
    2fb0:	21 f0       	breq	.+8      	; 0x2fba <sp_process+0x2a>
    2fb2:	9a 30       	cpi	r25, 0x0A	; 10
    2fb4:	d9 f0       	breq	.+54     	; 0x2fec <sp_process+0x5c>
    2fb6:	9d 30       	cpi	r25, 0x0D	; 13
    2fb8:	c9 f0       	breq	.+50     	; 0x2fec <sp_process+0x5c>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    2fba:	91 32       	cpi	r25, 0x21	; 33
    2fbc:	8c f3       	brlt	.-30     	; 0x2fa0 <sp_process+0x10>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2fbe:	89 2f       	mov	r24, r25
    2fc0:	81 56       	subi	r24, 0x61	; 97
    2fc2:	8a 31       	cpi	r24, 0x1A	; 26
    2fc4:	98 f5       	brcc	.+102    	; 0x302c <sp_process+0x9c>
      line[char_counter++] = c-'a'+'A';
    2fc6:	e2 2f       	mov	r30, r18
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	e5 50       	subi	r30, 0x05	; 5
    2fcc:	f8 4f       	sbci	r31, 0xF8	; 248
    2fce:	90 52       	subi	r25, 0x20	; 32
    2fd0:	90 83       	st	Z, r25
    2fd2:	2f 5f       	subi	r18, 0xFF	; 255
    2fd4:	20 93 2d 08 	sts	0x082D, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2fd8:	0e 94 ef 21 	call	0x43de	; 0x43de <serialRead>
    2fdc:	98 2f       	mov	r25, r24
    2fde:	8f 3f       	cpi	r24, 0xFF	; 255
    2fe0:	21 f7       	brne	.-56     	; 0x2faa <sp_process+0x1a>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    2fec:	e2 2f       	mov	r30, r18
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	e5 50       	subi	r30, 0x05	; 5
    2ff2:	f8 4f       	sbci	r31, 0xF8	; 248
    2ff4:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2ff6:	8b ef       	ldi	r24, 0xFB	; 251
    2ff8:	97 e0       	ldi	r25, 0x07	; 7
    2ffa:	0e 94 f5 07 	call	0xfea	; 0xfea <gc_execute_line>
    2ffe:	08 2f       	mov	r16, r24

// this needs to be fixed so it can reply correctly
static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    3000:	80 91 2f 08 	lds	r24, 0x082F
    3004:	88 23       	and	r24, r24
    3006:	d9 f0       	breq	.+54     	; 0x303e <sp_process+0xae>
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    3008:	f0 92 2e 08 	sts	0x082E, r15

	switch(status_code) {          
    300c:	03 30       	cpi	r16, 0x03	; 3
    300e:	09 f4       	brne	.+2      	; 0x3012 <sp_process+0x82>
    3010:	65 c0       	rjmp	.+202    	; 0x30dc <sp_process+0x14c>
    3012:	04 30       	cpi	r16, 0x04	; 4
    3014:	90 f5       	brcc	.+100    	; 0x307a <sp_process+0xea>
    3016:	01 30       	cpi	r16, 0x01	; 1
    3018:	09 f4       	brne	.+2      	; 0x301c <sp_process+0x8c>
    301a:	5b c0       	rjmp	.+182    	; 0x30d2 <sp_process+0x142>
    301c:	02 30       	cpi	r16, 0x02	; 2
    301e:	08 f4       	brcc	.+2      	; 0x3022 <sp_process+0x92>
    3020:	47 c0       	rjmp	.+142    	; 0x30b0 <sp_process+0x120>
#endif
			// typos are ok
			return;
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("error: Expected command letter\n")); 
    3022:	8d ee       	ldi	r24, 0xED	; 237
    3024:	93 e0       	ldi	r25, 0x03	; 3
    3026:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    302a:	24 c0       	rjmp	.+72     	; 0x3074 <sp_process+0xe4>
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    302c:	e2 2f       	mov	r30, r18
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	e5 50       	subi	r30, 0x05	; 5
    3032:	f8 4f       	sbci	r31, 0xF8	; 248
    3034:	90 83       	st	Z, r25
    3036:	2f 5f       	subi	r18, 0xFF	; 255
    3038:	20 93 2d 08 	sts	0x082D, r18
    303c:	b1 cf       	rjmp	.-158    	; 0x2fa0 <sp_process+0x10>
static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("Not homed\n")); 
    303e:	85 e3       	ldi	r24, 0x35	; 53
    3040:	94 e0       	ldi	r25, 0x04	; 4
    3042:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    3046:	f0 92 2e 08 	sts	0x082E, r15
			printPgmString(PSTR("error: Command Failed\n")); 
#endif
			break;
		case GCSTATUS_NOT_HOMED:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("error: Not homed\n")); 
    304a:	89 e8       	ldi	r24, 0x89	; 137
    304c:	93 e0       	ldi	r25, 0x03	; 3
    304e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {

		vacuum(0);
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
		head_down(0);
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
		atc_fire(0);
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	0e 94 96 23 	call	0x472c	; 0x472c <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    306a:	10 92 2f 08 	sts	0x082F, r1

		// stops all but home
		set_busy(TRUE);
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    3074:	10 92 2d 08 	sts	0x082D, r1
    3078:	93 cf       	rjmp	.-218    	; 0x2fa0 <sp_process+0x10>

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';

	switch(status_code) {          
    307a:	05 30       	cpi	r16, 0x05	; 5
    307c:	29 f1       	breq	.+74     	; 0x30c8 <sp_process+0x138>
    307e:	05 30       	cpi	r16, 0x05	; 5
    3080:	f0 f0       	brcs	.+60     	; 0x30be <sp_process+0x12e>
    3082:	06 30       	cpi	r16, 0x06	; 6
    3084:	81 f1       	breq	.+96     	; 0x30e6 <sp_process+0x156>
    3086:	03 36       	cpi	r16, 0x63	; 99
    3088:	01 f3       	breq	.-64     	; 0x304a <sp_process+0xba>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    308a:	10 e0       	ldi	r17, 0x00	; 0

			return;
			break;
		default:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("error: "));
    308c:	81 e8       	ldi	r24, 0x81	; 129
    308e:	93 e0       	ldi	r25, 0x03	; 3
    3090:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger(status_code);
    3094:	b8 01       	movw	r22, r16
    3096:	88 27       	eor	r24, r24
    3098:	77 fd       	sbrc	r23, 7
    309a:	80 95       	com	r24
    309c:	98 2f       	mov	r25, r24
    309e:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
			printPgmString(PSTR("\n"));
    30a2:	8f e7       	ldi	r24, 0x7F	; 127
    30a4:	93 e0       	ldi	r25, 0x03	; 3
    30a6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    30aa:	01 2b       	or	r16, r17
    30ac:	19 f3       	breq	.-58     	; 0x3074 <sp_process+0xe4>
    30ae:	d1 cf       	rjmp	.-94     	; 0x3052 <sp_process+0xc2>
	ackHost = 'E';

	switch(status_code) {          
		case GCSTATUS_OK:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("\nGCSTATUS_OK\n")); 
    30b0:	87 e2       	ldi	r24, 0x27	; 39
    30b2:	94 e0       	ldi	r25, 0x04	; 4
    30b4:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
			// ack OK
			ackHost = 'O';
    30b8:	e0 92 2e 08 	sts	0x082E, r14
    30bc:	db cf       	rjmp	.-74     	; 0x3074 <sp_process+0xe4>
			// typos are ok
			return;

		case GCSTATUS_FLOATING_POINT_ERROR:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("error: Floating point error\n")); 
    30be:	82 eb       	ldi	r24, 0xB2	; 178
    30c0:	93 e0       	ldi	r25, 0x03	; 3
    30c2:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    30c6:	c5 cf       	rjmp	.-118    	; 0x3052 <sp_process+0xc2>
#endif
			break;
		case GCSTATUS_FAILED_COMMAND:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("error: Command Failed\n")); 
    30c8:	8b e9       	ldi	r24, 0x9B	; 155
    30ca:	93 e0       	ldi	r25, 0x03	; 3
    30cc:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    30d0:	c0 cf       	rjmp	.-128    	; 0x3052 <sp_process+0xc2>
			// ack OK
			ackHost = 'O';
			break;
		case GCSTATUS_BAD_NUMBER_FORMAT:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("error: Bad number format\n")); 
    30d2:	8d e0       	ldi	r24, 0x0D	; 13
    30d4:	94 e0       	ldi	r25, 0x04	; 4
    30d6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    30da:	cc cf       	rjmp	.-104    	; 0x3074 <sp_process+0xe4>
#endif
			// typos are ok
			return;
		case GCSTATUS_UNSUPPORTED_STATEMENT:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("error: Unsupported statement\n")); 
    30dc:	8f ec       	ldi	r24, 0xCF	; 207
    30de:	93 e0       	ldi	r25, 0x03	; 3
    30e0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    30e4:	c7 cf       	rjmp	.-114    	; 0x3074 <sp_process+0xe4>
#endif
			break;
		case GCSTATUS_NO_ACK:

			// no ACK
			ackHost = 0;
    30e6:	10 92 2e 08 	sts	0x082E, r1
    30ea:	c4 cf       	rjmp	.-120    	; 0x3074 <sp_process+0xe4>

000030ec <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	76 e9       	ldi	r23, 0x96	; 150
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	0e 94 9a 21 	call	0x4334	; 0x4334 <beginSerial>
}
    30f8:	08 95       	ret

000030fa <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	a0 e2       	ldi	r26, 0x20	; 32
    3100:	b2 e4       	ldi	r27, 0x42	; 66
    3102:	80 93 6e 09 	sts	0x096E, r24
    3106:	90 93 6f 09 	sts	0x096F, r25
    310a:	a0 93 70 09 	sts	0x0970, r26
    310e:	b0 93 71 09 	sts	0x0971, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    3112:	80 93 72 09 	sts	0x0972, r24
    3116:	90 93 73 09 	sts	0x0973, r25
    311a:	a0 93 74 09 	sts	0x0974, r26
    311e:	b0 93 75 09 	sts	0x0975, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    3122:	80 93 76 09 	sts	0x0976, r24
    3126:	90 93 77 09 	sts	0x0977, r25
    312a:	a0 93 78 09 	sts	0x0978, r26
    312e:	b0 93 79 09 	sts	0x0979, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    3132:	80 93 7a 09 	sts	0x097A, r24
    3136:	90 93 7b 09 	sts	0x097B, r25
    313a:	a0 93 7c 09 	sts	0x097C, r26
    313e:	b0 93 7d 09 	sts	0x097D, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    3142:	86 e0       	ldi	r24, 0x06	; 6
    3144:	80 93 7f 09 	sts	0x097F, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	a6 e9       	ldi	r26, 0x96	; 150
    314e:	b5 e4       	ldi	r27, 0x45	; 69
    3150:	80 93 80 09 	sts	0x0980, r24
    3154:	90 93 81 09 	sts	0x0981, r25
    3158:	a0 93 82 09 	sts	0x0982, r26
    315c:	b0 93 83 09 	sts	0x0983, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	a0 ef       	ldi	r26, 0xF0	; 240
    3166:	b3 e4       	ldi	r27, 0x43	; 67
    3168:	80 93 84 09 	sts	0x0984, r24
    316c:	90 93 85 09 	sts	0x0985, r25
    3170:	a0 93 86 09 	sts	0x0986, r26
    3174:	b0 93 87 09 	sts	0x0987, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	a0 e4       	ldi	r26, 0x40	; 64
    317e:	b2 e4       	ldi	r27, 0x42	; 66
    3180:	80 93 8c 09 	sts	0x098C, r24
    3184:	90 93 8d 09 	sts	0x098D, r25
    3188:	a0 93 8e 09 	sts	0x098E, r26
    318c:	b0 93 8f 09 	sts	0x098F, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    3190:	8d ec       	ldi	r24, 0xCD	; 205
    3192:	9c ec       	ldi	r25, 0xCC	; 204
    3194:	ac ec       	ldi	r26, 0xCC	; 204
    3196:	bd e3       	ldi	r27, 0x3D	; 61
    3198:	80 93 88 09 	sts	0x0988, r24
    319c:	90 93 89 09 	sts	0x0989, r25
    31a0:	a0 93 8a 09 	sts	0x098A, r26
    31a4:	b0 93 8b 09 	sts	0x098B, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	a8 e4       	ldi	r26, 0x48	; 72
    31ae:	b2 e4       	ldi	r27, 0x42	; 66
    31b0:	80 93 90 09 	sts	0x0990, r24
    31b4:	90 93 91 09 	sts	0x0991, r25
    31b8:	a0 93 92 09 	sts	0x0992, r26
    31bc:	b0 93 93 09 	sts	0x0993, r27
}
    31c0:	08 95       	ret

000031c2 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 bc 05 	call	0xb78	; 0xb78 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    31ca:	87 36       	cpi	r24, 0x67	; 103
    31cc:	31 f0       	breq	.+12     	; 0x31da <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    31ce:	81 30       	cpi	r24, 0x01	; 1
    31d0:	a9 f0       	breq	.+42     	; 0x31fc <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    31d6:	c9 01       	movw	r24, r18
    31d8:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    31da:	8e e6       	ldi	r24, 0x6E	; 110
    31dc:	99 e0       	ldi	r25, 0x09	; 9
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	46 e2       	ldi	r20, 0x26	; 38
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	0e 94 21 06 	call	0xc42	; 0xc42 <memcpy_from_eeprom_with_checksum>
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	89 2b       	or	r24, r25
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <read_settings+0x30>
    31f0:	21 e0       	ldi	r18, 0x01	; 1
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	28 27       	eor	r18, r24
    31f6:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    31f8:	c9 01       	movw	r24, r18
    31fa:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    31fc:	8e e6       	ldi	r24, 0x6E	; 110
    31fe:	99 e0       	ldi	r25, 0x09	; 9
    3200:	61 e0       	ldi	r22, 0x01	; 1
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	4b e1       	ldi	r20, 0x1B	; 27
    3206:	50 e0       	ldi	r21, 0x00	; 0
    3208:	0e 94 21 06 	call	0xc42	; 0xc42 <memcpy_from_eeprom_with_checksum>
    320c:	89 2b       	or	r24, r25
    320e:	09 f3       	breq	.-62     	; 0x31d2 <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	a0 e4       	ldi	r26, 0x40	; 64
    3216:	b2 e4       	ldi	r27, 0x42	; 66
    3218:	80 93 8c 09 	sts	0x098C, r24
    321c:	90 93 8d 09 	sts	0x098D, r25
    3220:	a0 93 8e 09 	sts	0x098E, r26
    3224:	b0 93 8f 09 	sts	0x098F, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	a8 e4       	ldi	r26, 0x48	; 72
    322e:	b2 e4       	ldi	r27, 0x42	; 66
    3230:	80 93 90 09 	sts	0x0990, r24
    3234:	90 93 91 09 	sts	0x0991, r25
    3238:	a0 93 92 09 	sts	0x0992, r26
    323c:	b0 93 93 09 	sts	0x0993, r27
    3240:	21 e0       	ldi	r18, 0x01	; 1
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	c8 cf       	rjmp	.-112    	; 0x31d6 <read_settings+0x14>

00003246 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	67 e6       	ldi	r22, 0x67	; 103
    324c:	0e 94 c4 05 	call	0xb88	; 0xb88 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	6e e6       	ldi	r22, 0x6E	; 110
    3256:	79 e0       	ldi	r23, 0x09	; 9
    3258:	46 e2       	ldi	r20, 0x26	; 38
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	0e 94 e5 05 	call	0xbca	; 0xbca <memcpy_to_eeprom_with_checksum>
}
    3260:	08 95       	ret

00003262 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    3262:	fc 01       	movw	r30, r24
  switch(parameter) {
    3264:	86 30       	cpi	r24, 0x06	; 6
    3266:	91 05       	cpc	r25, r1
    3268:	09 f4       	brne	.+2      	; 0x326c <settings_store_setting+0xa>
    326a:	6d c0       	rjmp	.+218    	; 0x3346 <settings_store_setting+0xe4>
    326c:	87 30       	cpi	r24, 0x07	; 7
    326e:	91 05       	cpc	r25, r1
    3270:	a4 f0       	brlt	.+40     	; 0x329a <settings_store_setting+0x38>
    3272:	88 30       	cpi	r24, 0x08	; 8
    3274:	91 05       	cpc	r25, r1
    3276:	09 f4       	brne	.+2      	; 0x327a <settings_store_setting+0x18>
    3278:	48 c0       	rjmp	.+144    	; 0x330a <settings_store_setting+0xa8>
    327a:	88 30       	cpi	r24, 0x08	; 8
    327c:	91 05       	cpc	r25, r1
    327e:	b4 f1       	brlt	.+108    	; 0x32ec <settings_store_setting+0x8a>
    3280:	89 30       	cpi	r24, 0x09	; 9
    3282:	91 05       	cpc	r25, r1
    3284:	09 f4       	brne	.+2      	; 0x3288 <settings_store_setting+0x26>
    3286:	7b c0       	rjmp	.+246    	; 0x337e <settings_store_setting+0x11c>
    3288:	e8 5e       	subi	r30, 0xE8	; 232
    328a:	f3 40       	sbci	r31, 0x03	; 3
    328c:	09 f4       	brne	.+2      	; 0x3290 <settings_store_setting+0x2e>
    328e:	6a c0       	rjmp	.+212    	; 0x3364 <settings_store_setting+0x102>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    3290:	85 e5       	ldi	r24, 0x55	; 85
    3292:	94 e0       	ldi	r25, 0x04	; 4
    3294:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3298:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    329a:	84 30       	cpi	r24, 0x04	; 4
    329c:	91 05       	cpc	r25, r1
    329e:	09 f4       	brne	.+2      	; 0x32a2 <settings_store_setting+0x40>
    32a0:	43 c0       	rjmp	.+134    	; 0x3328 <settings_store_setting+0xc6>
    32a2:	85 30       	cpi	r24, 0x05	; 5
    32a4:	91 05       	cpc	r25, r1
    32a6:	9c f4       	brge	.+38     	; 0x32ce <settings_store_setting+0x6c>
    32a8:	97 fd       	sbrc	r25, 7
    32aa:	f2 cf       	rjmp	.-28     	; 0x3290 <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	ee 0f       	add	r30, r30
    32b2:	ff 1f       	adc	r31, r31
    32b4:	e2 59       	subi	r30, 0x92	; 146
    32b6:	f6 4f       	sbci	r31, 0xF6	; 246
    32b8:	40 83       	st	Z, r20
    32ba:	51 83       	std	Z+1, r21	; 0x01
    32bc:	62 83       	std	Z+2, r22	; 0x02
    32be:	73 83       	std	Z+3, r23	; 0x03
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    32c0:	0e 94 23 19 	call	0x3246	; 0x3246 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    32c4:	80 e4       	ldi	r24, 0x40	; 64
    32c6:	94 e0       	ldi	r25, 0x04	; 4
    32c8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    32cc:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    32ce:	40 93 80 09 	sts	0x0980, r20
    32d2:	50 93 81 09 	sts	0x0981, r21
    32d6:	60 93 82 09 	sts	0x0982, r22
    32da:	70 93 83 09 	sts	0x0983, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    32de:	0e 94 23 19 	call	0x3246	; 0x3246 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    32e2:	80 e4       	ldi	r24, 0x40	; 64
    32e4:	94 e0       	ldi	r25, 0x04	; 4
    32e6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    32ea:	08 95       	ret
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    32ec:	40 93 88 09 	sts	0x0988, r20
    32f0:	50 93 89 09 	sts	0x0989, r21
    32f4:	60 93 8a 09 	sts	0x098A, r22
    32f8:	70 93 8b 09 	sts	0x098B, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    32fc:	0e 94 23 19 	call	0x3246	; 0x3246 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    3300:	80 e4       	ldi	r24, 0x40	; 64
    3302:	94 e0       	ldi	r25, 0x04	; 4
    3304:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3308:	08 95       	ret
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    330a:	40 93 8c 09 	sts	0x098C, r20
    330e:	50 93 8d 09 	sts	0x098D, r21
    3312:	60 93 8e 09 	sts	0x098E, r22
    3316:	70 93 8f 09 	sts	0x098F, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    331a:	0e 94 23 19 	call	0x3246	; 0x3246 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    331e:	80 e4       	ldi	r24, 0x40	; 64
    3320:	94 e0       	ldi	r25, 0x04	; 4
    3322:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3326:	08 95       	ret
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    3328:	cb 01       	movw	r24, r22
    332a:	ba 01       	movw	r22, r20
    332c:	0e 94 bc 33 	call	0x6778	; 0x6778 <round>
    3330:	0e 94 95 31 	call	0x632a	; 0x632a <__fixunssfsi>
    3334:	60 93 7f 09 	sts	0x097F, r22
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    3338:	0e 94 23 19 	call	0x3246	; 0x3246 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    333c:	80 e4       	ldi	r24, 0x40	; 64
    333e:	94 e0       	ldi	r25, 0x04	; 4
    3340:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3344:	08 95       	ret
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    3346:	40 93 84 09 	sts	0x0984, r20
    334a:	50 93 85 09 	sts	0x0985, r21
    334e:	60 93 86 09 	sts	0x0986, r22
    3352:	70 93 87 09 	sts	0x0987, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    3356:	0e 94 23 19 	call	0x3246	; 0x3246 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    335a:	80 e4       	ldi	r24, 0x40	; 64
    335c:	94 e0       	ldi	r25, 0x04	; 4
    335e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3362:	08 95       	ret
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    3364:	cb 01       	movw	r24, r22
    3366:	ba 01       	movw	r22, r20
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	50 e0       	ldi	r21, 0x00	; 0
    3370:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
    3374:	88 23       	and	r24, r24
    3376:	a9 f0       	breq	.+42     	; 0x33a2 <settings_store_setting+0x140>
    3378:	0e 94 05 1b 	call	0x360a	; 0x360a <st_enable>
    337c:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    337e:	db 01       	movw	r26, r22
    3380:	ca 01       	movw	r24, r20
    3382:	bf 77       	andi	r27, 0x7F	; 127
    3384:	80 93 90 09 	sts	0x0990, r24
    3388:	90 93 91 09 	sts	0x0991, r25
    338c:	a0 93 92 09 	sts	0x0992, r26
    3390:	b0 93 93 09 	sts	0x0993, r27
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    3394:	0e 94 23 19 	call	0x3246	; 0x3246 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    3398:	80 e4       	ldi	r24, 0x40	; 64
    339a:	94 e0       	ldi	r25, 0x04	; 4
    339c:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    33a0:	08 95       	ret
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    33a2:	0e 94 07 1b 	call	0x360e	; 0x360e <st_disable>
    33a6:	08 95       	ret

000033a8 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    33a8:	89 e2       	ldi	r24, 0x29	; 41
    33aa:	96 e0       	ldi	r25, 0x06	; 6
    33ac:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    33b0:	82 e2       	ldi	r24, 0x22	; 34
    33b2:	96 e0       	ldi	r25, 0x06	; 6
    33b4:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printPgmString(PSTR("\r\n"));
    33b8:	8f e1       	ldi	r24, 0x1F	; 31
    33ba:	96 e0       	ldi	r25, 0x06	; 6
    33bc:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    33c0:	89 e1       	ldi	r24, 0x19	; 25
    33c2:	96 e0       	ldi	r25, 0x06	; 6
    33c4:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    33c8:	60 91 6e 09 	lds	r22, 0x096E
    33cc:	70 91 6f 09 	lds	r23, 0x096F
    33d0:	80 91 70 09 	lds	r24, 0x0970
    33d4:	90 91 71 09 	lds	r25, 0x0971
    33d8:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    33dc:	89 e0       	ldi	r24, 0x09	; 9
    33de:	96 e0       	ldi	r25, 0x06	; 6
    33e0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    33e4:	83 e0       	ldi	r24, 0x03	; 3
    33e6:	96 e0       	ldi	r25, 0x06	; 6
    33e8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    33ec:	60 91 72 09 	lds	r22, 0x0972
    33f0:	70 91 73 09 	lds	r23, 0x0973
    33f4:	80 91 74 09 	lds	r24, 0x0974
    33f8:	90 91 75 09 	lds	r25, 0x0975
    33fc:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    3400:	83 ef       	ldi	r24, 0xF3	; 243
    3402:	95 e0       	ldi	r25, 0x05	; 5
    3404:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    3408:	8d ee       	ldi	r24, 0xED	; 237
    340a:	95 e0       	ldi	r25, 0x05	; 5
    340c:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    3410:	60 91 76 09 	lds	r22, 0x0976
    3414:	70 91 77 09 	lds	r23, 0x0977
    3418:	80 91 78 09 	lds	r24, 0x0978
    341c:	90 91 79 09 	lds	r25, 0x0979
    3420:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    3424:	8d ed       	ldi	r24, 0xDD	; 221
    3426:	95 e0       	ldi	r25, 0x05	; 5
    3428:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    342c:	87 ed       	ldi	r24, 0xD7	; 215
    342e:	95 e0       	ldi	r25, 0x05	; 5
    3430:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    3434:	60 91 7a 09 	lds	r22, 0x097A
    3438:	70 91 7b 09 	lds	r23, 0x097B
    343c:	80 91 7c 09 	lds	r24, 0x097C
    3440:	90 91 7d 09 	lds	r25, 0x097D
    3444:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    3448:	85 ec       	ldi	r24, 0xC5	; 197
    344a:	95 e0       	ldi	r25, 0x05	; 5
    344c:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    3450:	8f eb       	ldi	r24, 0xBF	; 191
    3452:	95 e0       	ldi	r25, 0x05	; 5
    3454:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printInteger(settings.pulse_microseconds);
    3458:	60 91 7f 09 	lds	r22, 0x097F
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    3466:	82 ea       	ldi	r24, 0xA2	; 162
    3468:	95 e0       	ldi	r25, 0x05	; 5
    346a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    346e:	8c e9       	ldi	r24, 0x9C	; 156
    3470:	95 e0       	ldi	r25, 0x05	; 5
    3472:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.default_feed_rate);
    3476:	60 91 80 09 	lds	r22, 0x0980
    347a:	70 91 81 09 	lds	r23, 0x0981
    347e:	80 91 82 09 	lds	r24, 0x0982
    3482:	90 91 83 09 	lds	r25, 0x0983
    3486:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    348a:	8e e7       	ldi	r24, 0x7E	; 126
    348c:	95 e0       	ldi	r25, 0x05	; 5
    348e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    3492:	88 e7       	ldi	r24, 0x78	; 120
    3494:	95 e0       	ldi	r25, 0x05	; 5
    3496:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.default_seek_rate);
    349a:	60 91 84 09 	lds	r22, 0x0984
    349e:	70 91 85 09 	lds	r23, 0x0985
    34a2:	80 91 86 09 	lds	r24, 0x0986
    34a6:	90 91 87 09 	lds	r25, 0x0987
    34aa:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    34ae:	8a e5       	ldi	r24, 0x5A	; 90
    34b0:	95 e0       	ldi	r25, 0x05	; 5
    34b2:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    34b6:	84 e5       	ldi	r24, 0x54	; 84
    34b8:	95 e0       	ldi	r25, 0x05	; 5
    34ba:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    34be:	60 91 88 09 	lds	r22, 0x0988
    34c2:	70 91 89 09 	lds	r23, 0x0989
    34c6:	80 91 8a 09 	lds	r24, 0x098A
    34ca:	90 91 8b 09 	lds	r25, 0x098B
    34ce:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    34d2:	80 e4       	ldi	r24, 0x40	; 64
    34d4:	95 e0       	ldi	r25, 0x05	; 5
    34d6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    34da:	8a e3       	ldi	r24, 0x3A	; 58
    34dc:	95 e0       	ldi	r25, 0x05	; 5
    34de:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.acceleration);
    34e2:	60 91 8c 09 	lds	r22, 0x098C
    34e6:	70 91 8d 09 	lds	r23, 0x098D
    34ea:	80 91 8e 09 	lds	r24, 0x098E
    34ee:	90 91 8f 09 	lds	r25, 0x098F
    34f2:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    34f6:	8c e1       	ldi	r24, 0x1C	; 28
    34f8:	95 e0       	ldi	r25, 0x05	; 5
    34fa:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    34fe:	86 e1       	ldi	r24, 0x16	; 22
    3500:	95 e0       	ldi	r25, 0x05	; 5
    3502:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printFloat(settings.max_jerk);
    3506:	60 91 90 09 	lds	r22, 0x0990
    350a:	70 91 91 09 	lds	r23, 0x0991
    350e:	80 91 92 09 	lds	r24, 0x0992
    3512:	90 91 93 09 	lds	r25, 0x0993
    3516:	0e 94 f5 22 	call	0x45ea	; 0x45ea <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    351a:	8e ed       	ldi	r24, 0xDE	; 222
    351c:	94 e0       	ldi	r25, 0x04	; 4
    351e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    3522:	85 ed       	ldi	r24, 0xD5	; 213
    3524:	94 e0       	ldi	r25, 0x04	; 4
    3526:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
  printInteger(st_is_enabled());
    352a:	0e 94 09 1b 	call	0x3612	; 0x3612 <st_is_enabled>
    352e:	aa 27       	eor	r26, r26
    3530:	97 fd       	sbrc	r25, 7
    3532:	a0 95       	com	r26
    3534:	ba 2f       	mov	r27, r26
    3536:	bc 01       	movw	r22, r24
    3538:	cd 01       	movw	r24, r26
    353a:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    353e:	8c ea       	ldi	r24, 0xAC	; 172
    3540:	94 e0       	ldi	r25, 0x04	; 4
    3542:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    3546:	89 e6       	ldi	r24, 0x69	; 105
    3548:	94 e0       	ldi	r25, 0x04	; 4
    354a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
}
    354e:	08 95       	ret

00003550 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    3550:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <read_settings>
    3554:	89 2b       	or	r24, r25
    3556:	09 f0       	breq	.+2      	; 0x355a <settings_init+0xa>
    3558:	08 95       	ret
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    355a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <settings_reset>
    write_settings();
    355e:	0e 94 23 19 	call	0x3246	; 0x3246 <write_settings>
    settings_dump();
    3562:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <settings_dump>
    3566:	08 95       	ret

00003568 <spindle_init>:
#include <avr/io.h>
#include <util/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    3568:	e1 e0       	ldi	r30, 0x01	; 1
    356a:	f1 e0       	ldi	r31, 0x01	; 1
    356c:	80 81       	ld	r24, Z
    356e:	80 64       	ori	r24, 0x40	; 64
    3570:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    3572:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    3574:	3e 9a       	sbi	0x07, 6	; 7

}
    3576:	08 95       	ret

00003578 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    3578:	97 fd       	sbrc	r25, 7
    357a:	07 c0       	rjmp	.+14     	; 0x358a <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    357c:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    357e:	80 91 02 01 	lds	r24, 0x0102
    3582:	80 64       	ori	r24, 0x40	; 64
    3584:	80 93 02 01 	sts	0x0102, r24
}
    3588:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    358a:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    358c:	80 91 02 01 	lds	r24, 0x0102
    3590:	80 64       	ori	r24, 0x40	; 64
    3592:	80 93 02 01 	sts	0x0102, r24
}
    3596:	08 95       	ret

00003598 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    3598:	e2 e0       	ldi	r30, 0x02	; 2
    359a:	f1 e0       	ldi	r31, 0x01	; 1
    359c:	80 81       	ld	r24, Z
    359e:	8f 7b       	andi	r24, 0xBF	; 191
    35a0:	80 83       	st	Z, r24
}
    35a2:	08 95       	ret

000035a4 <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35a4:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35a6:	40 e7       	ldi	r20, 0x70	; 112
    35a8:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    35aa:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35ac:	23 2f       	mov	r18, r19
    35ae:	2a 95       	dec	r18
    35b0:	f1 f7       	brne	.-4      	; 0x35ae <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    35b2:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35b4:	fa 01       	movw	r30, r20
    35b6:	31 97       	sbiw	r30, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	2f ef       	ldi	r18, 0xFF	; 255
    35be:	8f 3f       	cpi	r24, 0xFF	; 255
    35c0:	92 07       	cpc	r25, r18
    35c2:	99 f7       	brne	.-26     	; 0x35aa <rotate_head+0x6>

}
    35c4:	08 95       	ret

000035c6 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    35c6:	ef e6       	ldi	r30, 0x6F	; 111
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	82 60       	ori	r24, 0x02	; 2
    35ce:	80 83       	st	Z, r24
}
    35d0:	08 95       	ret

000035d2 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	90 93 48 08 	sts	0x0848, r25
    35d8:	80 93 47 08 	sts	0x0847, r24
}
    35dc:	08 95       	ret

000035de <get_busy>:

int get_busy( void ) 
{
	return busy;
    35de:	20 91 47 08 	lds	r18, 0x0847
    35e2:	30 91 48 08 	lds	r19, 0x0848
}
    35e6:	c9 01       	movw	r24, r18
    35e8:	08 95       	ret

000035ea <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    35ea:	1f 92       	push	r1
    35ec:	0f 92       	push	r0
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	0f 92       	push	r0
    35f2:	11 24       	eor	r1, r1
    35f4:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    35f6:	81 b3       	in	r24, 0x11	; 17
    35f8:	85 63       	ori	r24, 0x35	; 53
    35fa:	81 bb       	out	0x11, r24	; 17

// turn off C axis
	STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    35fc:	46 98       	cbi	0x08, 6	; 8


}
    35fe:	8f 91       	pop	r24
    3600:	0f 90       	pop	r0
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	0f 90       	pop	r0
    3606:	1f 90       	pop	r1
    3608:	18 95       	reti

0000360a <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    360a:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    360c:	08 95       	ret

0000360e <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    360e:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    3610:	08 95       	ret

00003612 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    3612:	3c 99       	sbic	0x07, 4	; 7
    3614:	04 c0       	rjmp	.+8      	; 0x361e <st_is_enabled+0xc>
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    361a:	c9 01       	movw	r24, r18
    361c:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    361e:	88 b1       	in	r24, 0x08	; 8
    3620:	82 95       	swap	r24
    3622:	8f 70       	andi	r24, 0x0F	; 15
    3624:	80 95       	com	r24
    3626:	81 70       	andi	r24, 0x01	; 1
    3628:	28 2f       	mov	r18, r24
    362a:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    362c:	c9 01       	movw	r24, r18
    362e:	08 95       	ret

00003630 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    3630:	60 30       	cpi	r22, 0x00	; 0
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	72 07       	cpc	r23, r18
    3636:	21 e0       	ldi	r18, 0x01	; 1
    3638:	82 07       	cpc	r24, r18
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	92 07       	cpc	r25, r18
    363e:	08 f4       	brcc	.+2      	; 0x3642 <config_step_timer+0x12>
    3640:	5c c0       	rjmp	.+184    	; 0x36fa <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    3642:	60 30       	cpi	r22, 0x00	; 0
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	72 07       	cpc	r23, r18
    3648:	28 e0       	ldi	r18, 0x08	; 8
    364a:	82 07       	cpc	r24, r18
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	92 07       	cpc	r25, r18
    3650:	78 f1       	brcs	.+94     	; 0x36b0 <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    3652:	60 30       	cpi	r22, 0x00	; 0
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	72 07       	cpc	r23, r18
    3658:	20 e4       	ldi	r18, 0x40	; 64
    365a:	82 07       	cpc	r24, r18
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	92 07       	cpc	r25, r18
    3660:	08 f4       	brcc	.+2      	; 0x3664 <config_step_timer+0x34>
    3662:	51 c0       	rjmp	.+162    	; 0x3706 <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    3664:	60 30       	cpi	r22, 0x00	; 0
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	72 07       	cpc	r23, r18
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	82 07       	cpc	r24, r18
    366e:	21 e0       	ldi	r18, 0x01	; 1
    3670:	92 07       	cpc	r25, r18
    3672:	08 f4       	brcc	.+2      	; 0x3676 <config_step_timer+0x46>
    3674:	6d c0       	rjmp	.+218    	; 0x3750 <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    3676:	60 30       	cpi	r22, 0x00	; 0
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	72 07       	cpc	r23, r18
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	82 07       	cpc	r24, r18
    3680:	24 e0       	ldi	r18, 0x04	; 4
    3682:	92 07       	cpc	r25, r18
    3684:	08 f0       	brcs	.+2      	; 0x3688 <config_step_timer+0x58>
    3686:	71 c0       	rjmp	.+226    	; 0x376a <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    3688:	2a e0       	ldi	r18, 0x0A	; 10
    368a:	96 95       	lsr	r25
    368c:	87 95       	ror	r24
    368e:	77 95       	ror	r23
    3690:	67 95       	ror	r22
    3692:	2a 95       	dec	r18
    3694:	d1 f7       	brne	.-12     	; 0x368a <config_step_timer+0x5a>
    3696:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    3698:	9b 01       	movw	r18, r22
    369a:	40 e0       	ldi	r20, 0x00	; 0
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	8a e0       	ldi	r24, 0x0A	; 10
    36a0:	22 0f       	add	r18, r18
    36a2:	33 1f       	adc	r19, r19
    36a4:	44 1f       	adc	r20, r20
    36a6:	55 1f       	adc	r21, r21
    36a8:	8a 95       	dec	r24
    36aa:	d1 f7       	brne	.-12     	; 0x36a0 <config_step_timer+0x70>
    36ac:	95 e0       	ldi	r25, 0x05	; 5
    36ae:	18 c0       	rjmp	.+48     	; 0x36e0 <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    36b0:	23 e0       	ldi	r18, 0x03	; 3
    36b2:	96 95       	lsr	r25
    36b4:	87 95       	ror	r24
    36b6:	77 95       	ror	r23
    36b8:	67 95       	ror	r22
    36ba:	2a 95       	dec	r18
    36bc:	d1 f7       	brne	.-12     	; 0x36b2 <config_step_timer+0x82>
    36be:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    36c0:	9b 01       	movw	r18, r22
    36c2:	40 e0       	ldi	r20, 0x00	; 0
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	22 0f       	add	r18, r18
    36c8:	33 1f       	adc	r19, r19
    36ca:	44 1f       	adc	r20, r20
    36cc:	55 1f       	adc	r21, r21
    36ce:	22 0f       	add	r18, r18
    36d0:	33 1f       	adc	r19, r19
    36d2:	44 1f       	adc	r20, r20
    36d4:	55 1f       	adc	r21, r21
    36d6:	22 0f       	add	r18, r18
    36d8:	33 1f       	adc	r19, r19
    36da:	44 1f       	adc	r20, r20
    36dc:	55 1f       	adc	r21, r21
    36de:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    36e0:	80 91 81 00 	lds	r24, 0x0081
    36e4:	88 7f       	andi	r24, 0xF8	; 248
    36e6:	98 2b       	or	r25, r24
    36e8:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    36ec:	f0 93 89 00 	sts	0x0089, r31
    36f0:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    36f4:	b9 01       	movw	r22, r18
    36f6:	ca 01       	movw	r24, r20
    36f8:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    36fa:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    36fc:	9b 01       	movw	r18, r22
    36fe:	40 e0       	ldi	r20, 0x00	; 0
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	91 e0       	ldi	r25, 0x01	; 1
    3704:	ed cf       	rjmp	.-38     	; 0x36e0 <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    3706:	b6 e0       	ldi	r27, 0x06	; 6
    3708:	96 95       	lsr	r25
    370a:	87 95       	ror	r24
    370c:	77 95       	ror	r23
    370e:	67 95       	ror	r22
    3710:	ba 95       	dec	r27
    3712:	d1 f7       	brne	.-12     	; 0x3708 <config_step_timer+0xd8>
    3714:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    3716:	9b 01       	movw	r18, r22
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	50 e0       	ldi	r21, 0x00	; 0
    371c:	22 0f       	add	r18, r18
    371e:	33 1f       	adc	r19, r19
    3720:	44 1f       	adc	r20, r20
    3722:	55 1f       	adc	r21, r21
    3724:	22 0f       	add	r18, r18
    3726:	33 1f       	adc	r19, r19
    3728:	44 1f       	adc	r20, r20
    372a:	55 1f       	adc	r21, r21
    372c:	22 0f       	add	r18, r18
    372e:	33 1f       	adc	r19, r19
    3730:	44 1f       	adc	r20, r20
    3732:	55 1f       	adc	r21, r21
    3734:	22 0f       	add	r18, r18
    3736:	33 1f       	adc	r19, r19
    3738:	44 1f       	adc	r20, r20
    373a:	55 1f       	adc	r21, r21
    373c:	22 0f       	add	r18, r18
    373e:	33 1f       	adc	r19, r19
    3740:	44 1f       	adc	r20, r20
    3742:	55 1f       	adc	r21, r21
    3744:	22 0f       	add	r18, r18
    3746:	33 1f       	adc	r19, r19
    3748:	44 1f       	adc	r20, r20
    374a:	55 1f       	adc	r21, r21
    374c:	93 e0       	ldi	r25, 0x03	; 3
    374e:	c8 cf       	rjmp	.-112    	; 0x36e0 <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    3750:	bb 27       	eor	r27, r27
    3752:	a9 2f       	mov	r26, r25
    3754:	98 2f       	mov	r25, r24
    3756:	87 2f       	mov	r24, r23
    3758:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    375a:	a0 e0       	ldi	r26, 0x00	; 0
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	22 27       	eor	r18, r18
    3760:	38 2f       	mov	r19, r24
    3762:	49 2f       	mov	r20, r25
    3764:	5a 2f       	mov	r21, r26
    3766:	94 e0       	ldi	r25, 0x04	; 4
    3768:	bb cf       	rjmp	.-138    	; 0x36e0 <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    376a:	ef ef       	ldi	r30, 0xFF	; 255
    376c:	ff ef       	ldi	r31, 0xFF	; 255
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	3c ef       	ldi	r19, 0xFC	; 252
    3772:	40 e0       	ldi	r20, 0x00	; 0
    3774:	50 e0       	ldi	r21, 0x00	; 0
    3776:	95 e0       	ldi	r25, 0x05	; 5
    3778:	b3 cf       	rjmp	.-154    	; 0x36e0 <config_step_timer+0xb0>

0000377a <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    377a:	9b 01       	movw	r18, r22
    377c:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    377e:	20 3b       	cpi	r18, 0xB0	; 176
    3780:	84 e0       	ldi	r24, 0x04	; 4
    3782:	38 07       	cpc	r19, r24
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	48 07       	cpc	r20, r24
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	58 07       	cpc	r21, r24
    378c:	78 f4       	brcc	.+30     	; 0x37ac <set_step_events_per_minute+0x32>
    378e:	60 e0       	ldi	r22, 0x00	; 0
    3790:	75 e3       	ldi	r23, 0x35	; 53
    3792:	8c e0       	ldi	r24, 0x0C	; 12
    3794:	90 e0       	ldi	r25, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    3796:	0e 94 18 1b 	call	0x3630	; 0x3630 <config_step_timer>
    379a:	60 93 49 08 	sts	0x0849, r22
    379e:	70 93 4a 08 	sts	0x084A, r23
    37a2:	80 93 4b 08 	sts	0x084B, r24
    37a6:	90 93 4c 08 	sts	0x084C, r25
}
    37aa:	08 95       	ret
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	70 e7       	ldi	r23, 0x70	; 112
    37b0:	88 e3       	ldi	r24, 0x38	; 56
    37b2:	99 e3       	ldi	r25, 0x39	; 57
    37b4:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    37b8:	c9 01       	movw	r24, r18
    37ba:	da 01       	movw	r26, r20
    37bc:	bc 01       	movw	r22, r24
    37be:	cd 01       	movw	r24, r26
    37c0:	ea cf       	rjmp	.-44     	; 0x3796 <set_step_events_per_minute+0x1c>

000037c2 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    37c2:	80 b3       	in	r24, 0x10	; 16
    37c4:	85 63       	ori	r24, 0x35	; 53
    37c6:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    37c8:	80 b3       	in	r24, 0x10	; 16
    37ca:	8a 6c       	ori	r24, 0xCA	; 202
    37cc:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    37ce:	81 b3       	in	r24, 0x11	; 17
    37d0:	85 63       	ori	r24, 0x35	; 53
    37d2:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    37d4:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    37d6:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    37d8:	e1 e8       	ldi	r30, 0x81	; 129
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	8f 7e       	andi	r24, 0xEF	; 239
    37e0:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    37e2:	80 81       	ld	r24, Z
    37e4:	88 60       	ori	r24, 0x08	; 8
    37e6:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    37e8:	e0 e8       	ldi	r30, 0x80	; 128
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
    37ee:	8d 7f       	andi	r24, 0xFD	; 253
    37f0:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    37f2:	80 81       	ld	r24, Z
    37f4:	8e 7f       	andi	r24, 0xFE	; 254
    37f6:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    37f8:	80 81       	ld	r24, Z
    37fa:	8f 73       	andi	r24, 0x3F	; 63
    37fc:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    37fe:	80 81       	ld	r24, Z
    3800:	8f 7c       	andi	r24, 0xCF	; 207
    3802:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    3804:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3808:	82 e0       	ldi	r24, 0x02	; 2
    380a:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    380e:	e0 e7       	ldi	r30, 0x70	; 112
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	81 60       	ori	r24, 0x01	; 1
    3816:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    3818:	60 e7       	ldi	r22, 0x70	; 112
    381a:	77 e1       	ldi	r23, 0x17	; 23
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	0e 94 bd 1b 	call	0x377a	; 0x377a <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    3824:	ef e6       	ldi	r30, 0x6F	; 111
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	80 81       	ld	r24, Z
    382a:	8d 7f       	andi	r24, 0xFD	; 253
    382c:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    382e:	10 92 4d 08 	sts	0x084D, r1
    3832:	10 92 4e 08 	sts	0x084E, r1
    3836:	10 92 4f 08 	sts	0x084F, r1
    383a:	10 92 50 08 	sts	0x0850, r1
  
  sei();
    383e:	78 94       	sei
}
    3840:	08 95       	ret

00003842 <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    3842:	80 91 6f 00 	lds	r24, 0x006F
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	96 95       	lsr	r25
    384a:	87 95       	ror	r24
}
    384c:	81 70       	andi	r24, 0x01	; 1
    384e:	08 95       	ret

00003850 <limits_init>:


void limits_init(void)
{
	//pickobear specific
	DDRA = 0x0;
    3850:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    3852:	82 e0       	ldi	r24, 0x02	; 2
    3854:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    3856:	17 b8       	out	0x07, r1	; 7
	LIMIT_DDR = 0x0;
    3858:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    385a:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    385c:	9f e8       	ldi	r25, 0x8F	; 143
    385e:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    3860:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    3862:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    3866:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    386a:	3f ec       	ldi	r19, 0xCF	; 207
    386c:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    3870:	20 ef       	ldi	r18, 0xF0	; 240
    3872:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    3876:	8c e9       	ldi	r24, 0x9C	; 156
    3878:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    387a:	82 e2       	ldi	r24, 0x22	; 34
    387c:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    387e:	83 e1       	ldi	r24, 0x13	; 19
    3880:	88 b9       	out	0x08, r24	; 8
#ifdef SIMULATE
	LIMIT_PORT = 0x00; //00000000
	LIMIT_PIN = 0x0;
#else
	LIMIT_PORT = 0x8F; //10001111
    3882:	9b b9       	out	0x0b, r25	; 11
#endif
	PORTE = 0x30;
    3884:	80 e3       	ldi	r24, 0x30	; 48
    3886:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    3888:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    388a:	83 e2       	ldi	r24, 0x23	; 35
    388c:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    3894:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    3898:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    389c:	20 93 0b 01 	sts	0x010B, r18
}
    38a0:	08 95       	ret

000038a2 <get_limit_bits>:
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    38a2:	4b 9b       	sbis	0x09, 3	; 9
    38a4:	0c c0       	rjmp	.+24     	; 0x38be <get_limit_bits+0x1c>
    38a6:	82 e8       	ldi	r24, 0x82	; 130
      	ret |= _BV( 1 ) ;

	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
    38a8:	4a 99       	sbic	0x09, 2	; 9
      	ret |= _BV( 2 ) ;
    38aa:	84 60       	ori	r24, 0x04	; 4

	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
    38ac:	48 99       	sbic	0x09, 0	; 9
      	ret |= _BV( 3 ) ;
    38ae:	88 60       	ori	r24, 0x08	; 8

	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
    38b0:	49 99       	sbic	0x09, 1	; 9
      	ret |= _BV( 4 ) ;
    38b2:	80 61       	ori	r24, 0x10	; 16

	if( bit_is_set( XHM_PIN, X_HOME ) )
    38b4:	04 99       	sbic	0x00, 4	; 0
      	ret |= _BV( 5 ) ;
    38b6:	80 62       	ori	r24, 0x20	; 32

	if( bit_is_set( YHM_PIN, Y_HOME ) )
    38b8:	90 99       	sbic	0x12, 0	; 18
      	ret |= _BV( 6) ;
    38ba:	80 64       	ori	r24, 0x40	; 64

	return ret;

}
    38bc:	08 95       	ret
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    38be:	80 e8       	ldi	r24, 0x80	; 128
    38c0:	f3 cf       	rjmp	.-26     	; 0x38a8 <get_limit_bits+0x6>

000038c2 <yHome>:

	return homex;
}

unsigned char yHome( void ) 
{
    38c2:	1f 93       	push	r17
	unsigned char homey = bit_is_set( YHM_PIN, Y_HOME );
    38c4:	82 b3       	in	r24, 0x12	; 18
	
	if( homey ) {
    38c6:	18 2f       	mov	r17, r24
    38c8:	11 70       	andi	r17, 0x01	; 1
    38ca:	80 ff       	sbrs	r24, 0
    38cc:	04 c0       	rjmp	.+8      	; 0x38d6 <yHome+0x14>
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yHome: homed\r\n"));
    38ce:	80 e1       	ldi	r24, 0x10	; 16
    38d0:	98 e0       	ldi	r25, 0x08	; 8
    38d2:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
	}

	return homey;
}
    38d6:	81 2f       	mov	r24, r17
    38d8:	1f 91       	pop	r17
    38da:	08 95       	ret

000038dc <xHome>:
	return limit;
}


unsigned char xHome( void ) 
{
    38dc:	1f 93       	push	r17
	unsigned char homex = bit_is_set( XHM_PIN, X_HOME );
    38de:	80 b1       	in	r24, 0x00	; 0
	
	if( homex ) {
    38e0:	18 2f       	mov	r17, r24
    38e2:	10 71       	andi	r17, 0x10	; 16
    38e4:	84 ff       	sbrs	r24, 4
    38e6:	04 c0       	rjmp	.+8      	; 0x38f0 <xHome+0x14>


#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xHome: homed\r\n"));
    38e8:	8f e1       	ldi	r24, 0x1F	; 31
    38ea:	98 e0       	ldi	r25, 0x08	; 8
    38ec:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
	}

	return homex;
}
    38f0:	81 2f       	mov	r24, r17
    38f2:	1f 91       	pop	r17
    38f4:	08 95       	ret

000038f6 <yLimit2>:

	return limit;
}

unsigned char yLimit2( void ) 
{
    38f6:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT );
    38f8:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    38fa:	18 2f       	mov	r17, r24
    38fc:	12 70       	andi	r17, 0x02	; 2
    38fe:	81 ff       	sbrs	r24, 1
    3900:	06 c0       	rjmp	.+12     	; 0x390e <yLimit2+0x18>
		// no longer homed
		gHomed = FALSE;
    3902:	10 92 2f 08 	sts	0x082F, r1
		printPgmString(PSTR("yLimit2: is in limit\r\n"));
    3906:	8e e2       	ldi	r24, 0x2E	; 46
    3908:	98 e0       	ldi	r25, 0x08	; 8
    390a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	}

	return limit;
}
    390e:	81 2f       	mov	r24, r17
    3910:	1f 91       	pop	r17
    3912:	08 95       	ret

00003914 <moveBack>:
  }
	return TRUE;
}

unsigned char moveBack( unsigned int distance ) 
{
    3914:	ff 92       	push	r15
    3916:	0f 93       	push	r16
    3918:	1f 93       	push	r17
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    3920:	81 b3       	in	r24, 0x11	; 17
    3922:	85 73       	andi	r24, 0x35	; 53
    3924:	88 60       	ori	r24, 0x08	; 8
    3926:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3928:	20 97       	sbiw	r28, 0x00	; 0
    392a:	19 f1       	breq	.+70     	; 0x3972 <moveBack+0x5e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    392c:	45 e3       	ldi	r20, 0x35	; 53
    392e:	f4 2e       	mov	r15, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3930:	00 e6       	ldi	r16, 0x60	; 96
    3932:	14 e0       	ldi	r17, 0x04	; 4
    3934:	13 c0       	rjmp	.+38     	; 0x395c <moveBack+0x48>

  	if( yLimit2() || is_head_down()  ) 
    3936:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    393a:	88 23       	and	r24, r24
    393c:	99 f4       	brne	.+38     	; 0x3964 <moveBack+0x50>
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    393e:	81 b3       	in	r24, 0x11	; 17
    3940:	8a 7c       	andi	r24, 0xCA	; 202
    3942:	84 60       	ori	r24, 0x04	; 4
    3944:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3946:	8f 2d       	mov	r24, r15
    3948:	8a 95       	dec	r24
    394a:	f1 f7       	brne	.-4      	; 0x3948 <moveBack+0x34>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    394c:	81 b3       	in	r24, 0x11	; 17
    394e:	8a 7c       	andi	r24, 0xCA	; 202
    3950:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3952:	c8 01       	movw	r24, r16
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	f1 f7       	brne	.-4      	; 0x3954 <moveBack+0x40>
    3958:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    395a:	59 f0       	breq	.+22     	; 0x3972 <moveBack+0x5e>

  	if( yLimit2() || is_head_down()  ) 
    395c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <yLimit2>
    3960:	88 23       	and	r24, r24
    3962:	49 f3       	breq	.-46     	; 0x3936 <moveBack+0x22>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3964:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	1f 91       	pop	r17
    396c:	0f 91       	pop	r16
    396e:	ff 90       	pop	r15
    3970:	08 95       	ret
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3972:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	ff 90       	pop	r15
    397e:	08 95       	ret

00003980 <yLimit1>:

	return limit;
}

unsigned char yLimit1( void ) 
{
    3980:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
    3982:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    3984:	18 2f       	mov	r17, r24
    3986:	11 70       	andi	r17, 0x01	; 1
    3988:	80 ff       	sbrs	r24, 0
    398a:	06 c0       	rjmp	.+12     	; 0x3998 <yLimit1+0x18>
		// no longer homed
		gHomed = FALSE;
    398c:	10 92 2f 08 	sts	0x082F, r1
		printPgmString(PSTR("yLimit1: is in limit\r\n"));
    3990:	85 e4       	ldi	r24, 0x45	; 69
    3992:	98 e0       	ldi	r25, 0x08	; 8
    3994:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	}

	return limit;
}
    3998:	81 2f       	mov	r24, r17
    399a:	1f 91       	pop	r17
    399c:	08 95       	ret

0000399e <xLimit2>:

	return limit;
}

unsigned char xLimit2( void ) 
{
    399e:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, X2_LIMIT_BIT );
    39a0:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    39a2:	18 2f       	mov	r17, r24
    39a4:	14 70       	andi	r17, 0x04	; 4
    39a6:	82 ff       	sbrs	r24, 2
    39a8:	06 c0       	rjmp	.+12     	; 0x39b6 <xLimit2+0x18>
		// no longer homed
		gHomed = FALSE;
    39aa:	10 92 2f 08 	sts	0x082F, r1
		printPgmString(PSTR("xLimit2: is in limit\r\n"));
    39ae:	8c e5       	ldi	r24, 0x5C	; 92
    39b0:	98 e0       	ldi	r25, 0x08	; 8
    39b2:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	}

	return limit;
}
    39b6:	81 2f       	mov	r24, r17
    39b8:	1f 91       	pop	r17
    39ba:	08 95       	ret

000039bc <moveRight>:

	return TRUE;
}

unsigned char moveRight( unsigned int distance ) 
{
    39bc:	ff 92       	push	r15
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    39c8:	81 b3       	in	r24, 0x11	; 17
    39ca:	85 73       	andi	r24, 0x35	; 53
    39cc:	82 60       	ori	r24, 0x02	; 2
    39ce:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    39d0:	20 97       	sbiw	r28, 0x00	; 0
    39d2:	39 f1       	breq	.+78     	; 0x3a22 <moveRight+0x66>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39d4:	55 e3       	ldi	r21, 0x35	; 53
    39d6:	f5 2e       	mov	r15, r21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39d8:	00 e6       	ldi	r16, 0x60	; 96
    39da:	14 e0       	ldi	r17, 0x04	; 4
    39dc:	13 c0       	rjmp	.+38     	; 0x3a04 <moveRight+0x48>

	//  hit left limit or head down?
  	if( xLimit2()  || is_head_down()  ) {
    39de:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    39e2:	88 23       	and	r24, r24
    39e4:	99 f4       	brne	.+38     	; 0x3a0c <moveRight+0x50>
		printPgmString(PSTR("\r\nmoveLeft HEAD_DOWN_TEST or X2 LIMIT \r\n"));
#endif
		return 0;  	
	}

	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    39e6:	81 b3       	in	r24, 0x11	; 17
    39e8:	8a 7c       	andi	r24, 0xCA	; 202
    39ea:	81 60       	ori	r24, 0x01	; 1
    39ec:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39ee:	8f 2d       	mov	r24, r15
    39f0:	8a 95       	dec	r24
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <moveRight+0x34>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    39f4:	81 b3       	in	r24, 0x11	; 17
    39f6:	8a 7c       	andi	r24, 0xCA	; 202
    39f8:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39fa:	c8 01       	movw	r24, r16
    39fc:	01 97       	sbiw	r24, 0x01	; 1
    39fe:	f1 f7       	brne	.-4      	; 0x39fc <moveRight+0x40>
    3a00:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3a02:	79 f0       	breq	.+30     	; 0x3a22 <moveRight+0x66>

	//  hit left limit or head down?
  	if( xLimit2()  || is_head_down()  ) {
    3a04:	0e 94 cf 1c 	call	0x399e	; 0x399e <xLimit2>
    3a08:	88 23       	and	r24, r24
    3a0a:	49 f3       	breq	.-46     	; 0x39de <moveRight+0x22>
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("\r\nmoveLeft HEAD_DOWN_TEST or X2 LIMIT \r\n"));
    3a0c:	8c ea       	ldi	r24, 0xAC	; 172
    3a0e:	97 e0       	ldi	r25, 0x07	; 7
    3a10:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3a14:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	08 95       	ret
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3a22:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	ff 90       	pop	r15
    3a2e:	08 95       	ret

00003a30 <xLimit1>:

// global home flag ( machine should only do home move if this is FALSE)
unsigned char gHomed = FALSE;

unsigned char xLimit1( void ) 
{
    3a30:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
    3a32:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    3a34:	18 2f       	mov	r17, r24
    3a36:	18 70       	andi	r17, 0x08	; 8
    3a38:	83 ff       	sbrs	r24, 3
    3a3a:	06 c0       	rjmp	.+12     	; 0x3a48 <xLimit1+0x18>
		// no longer homed
		gHomed = FALSE;
    3a3c:	10 92 2f 08 	sts	0x082F, r1
		printPgmString(PSTR("xLimit1\r\n"));
    3a40:	83 e7       	ldi	r24, 0x73	; 115
    3a42:	98 e0       	ldi	r25, 0x08	; 8
    3a44:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	}

	return limit;
}
    3a48:	81 2f       	mov	r24, r17
    3a4a:	1f 91       	pop	r17
    3a4c:	08 95       	ret

00003a4e <moveForward>:
  }
	return TRUE;
}

unsigned char moveForward( unsigned int distance ) 
{
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	ec 01       	movw	r28, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3a5a:	81 b3       	in	r24, 0x11	; 17
    3a5c:	85 73       	andi	r24, 0x35	; 53
    3a5e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3a60:	20 97       	sbiw	r28, 0x00	; 0
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <moveForward+0x18>
    3a64:	4c c0       	rjmp	.+152    	; 0x3afe <moveForward+0xb0>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a66:	65 e3       	ldi	r22, 0x35	; 53
    3a68:	f6 2e       	mov	r15, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a6a:	00 e6       	ldi	r16, 0x60	; 96
    3a6c:	14 e0       	ldi	r17, 0x04	; 4
    3a6e:	18 c0       	rjmp	.+48     	; 0x3aa0 <moveForward+0x52>
	      	printPgmString(PSTR(" "));

		if( yLimit1() )
			printPgmString(PSTR("Y1_LIMIT_BIT "));

		if( is_head_down() )
    3a70:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3a74:	88 23       	and	r24, r24
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <moveForward+0x2c>
    3a78:	3d c0       	rjmp	.+122    	; 0x3af4 <moveForward+0xa6>
			printPgmString(PSTR("HEAD_DOWN_TEST"));


		printPgmString(PSTR("\r\n"));
    3a7a:	81 e7       	ldi	r24, 0x71	; 113
    3a7c:	97 e0       	ldi	r25, 0x07	; 7
    3a7e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

#endif
	}

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3a82:	81 b3       	in	r24, 0x11	; 17
    3a84:	8a 7c       	andi	r24, 0xCA	; 202
    3a86:	84 60       	ori	r24, 0x04	; 4
    3a88:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a8a:	8f 2d       	mov	r24, r15
    3a8c:	8a 95       	dec	r24
    3a8e:	f1 f7       	brne	.-4      	; 0x3a8c <moveForward+0x3e>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3a90:	81 b3       	in	r24, 0x11	; 17
    3a92:	8a 7c       	andi	r24, 0xCA	; 202
    3a94:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a96:	c8 01       	movw	r24, r16
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <moveForward+0x4a>
    3a9c:	21 97       	sbiw	r28, 0x01	; 1


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3a9e:	79 f1       	breq	.+94     	; 0x3afe <moveForward+0xb0>

	//  hit left limit or head down?
  	if( yLimit1() || is_head_down()  ) {
    3aa0:	0e 94 c0 1c 	call	0x3980	; 0x3980 <yLimit1>
    3aa4:	88 23       	and	r24, r24
    3aa6:	21 f4       	brne	.+8      	; 0x3ab0 <moveForward+0x62>
    3aa8:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3aac:	88 23       	and	r24, r24
    3aae:	49 f3       	breq	.-46     	; 0x3a82 <moveForward+0x34>
#ifdef VERBOSE_DEBUG

		printPgmString(PSTR("\r\nmoveLeft "));
    3ab0:	80 ea       	ldi	r24, 0xA0	; 160
    3ab2:	97 e0       	ldi	r25, 0x07	; 7
    3ab4:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	      	printPgmString(PSTR("head down = "));
    3ab8:	83 e9       	ldi	r24, 0x93	; 147
    3aba:	97 e0       	ldi	r25, 0x07	; 7
    3abc:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger( is_head_down() );
    3ac0:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	a0 e0       	ldi	r26, 0x00	; 0
    3ac8:	b0 e0       	ldi	r27, 0x00	; 0
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR(" "));
    3ad2:	81 e9       	ldi	r24, 0x91	; 145
    3ad4:	97 e0       	ldi	r25, 0x07	; 7
    3ad6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

		if( yLimit1() )
    3ada:	0e 94 c0 1c 	call	0x3980	; 0x3980 <yLimit1>
    3ade:	88 23       	and	r24, r24
    3ae0:	39 f2       	breq	.-114    	; 0x3a70 <moveForward+0x22>
			printPgmString(PSTR("Y1_LIMIT_BIT "));
    3ae2:	83 e8       	ldi	r24, 0x83	; 131
    3ae4:	97 e0       	ldi	r25, 0x07	; 7
    3ae6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

		if( is_head_down() )
    3aea:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3aee:	88 23       	and	r24, r24
    3af0:	09 f4       	brne	.+2      	; 0x3af4 <moveForward+0xa6>
    3af2:	c3 cf       	rjmp	.-122    	; 0x3a7a <moveForward+0x2c>
			printPgmString(PSTR("HEAD_DOWN_TEST"));
    3af4:	84 e7       	ldi	r24, 0x74	; 116
    3af6:	97 e0       	ldi	r25, 0x07	; 7
    3af8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3afc:	be cf       	rjmp	.-132    	; 0x3a7a <moveForward+0x2c>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	1f 91       	pop	r17
    3b06:	0f 91       	pop	r16
    3b08:	ff 90       	pop	r15
    3b0a:	08 95       	ret

00003b0c <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    3b0c:	ff 92       	push	r15
    3b0e:	0f 93       	push	r16
    3b10:	1f 93       	push	r17
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3b18:	81 b3       	in	r24, 0x11	; 17
    3b1a:	85 73       	andi	r24, 0x35	; 53
    3b1c:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3b1e:	20 97       	sbiw	r28, 0x00	; 0
    3b20:	09 f4       	brne	.+2      	; 0x3b24 <moveLeft+0x18>
    3b22:	52 c0       	rjmp	.+164    	; 0x3bc8 <moveLeft+0xbc>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b24:	75 e3       	ldi	r23, 0x35	; 53
    3b26:	f7 2e       	mov	r15, r23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b28:	00 e6       	ldi	r16, 0x60	; 96
    3b2a:	14 e0       	ldi	r17, 0x04	; 4
    3b2c:	13 c0       	rjmp	.+38     	; 0x3b54 <moveLeft+0x48>

	//  hit left limit or head down?
  	if( xLimit1() || is_head_down() ) {
    3b2e:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3b32:	88 23       	and	r24, r24
    3b34:	99 f4       	brne	.+38     	; 0x3b5c <moveLeft+0x50>
#endif

		return 0;
	}

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3b36:	81 b3       	in	r24, 0x11	; 17
    3b38:	8a 7c       	andi	r24, 0xCA	; 202
    3b3a:	81 60       	ori	r24, 0x01	; 1
    3b3c:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b3e:	8f 2d       	mov	r24, r15
    3b40:	8a 95       	dec	r24
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <moveLeft+0x34>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3b44:	81 b3       	in	r24, 0x11	; 17
    3b46:	8a 7c       	andi	r24, 0xCA	; 202
    3b48:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b4a:	c8 01       	movw	r24, r16
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <moveLeft+0x40>
    3b50:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3b52:	d1 f1       	breq	.+116    	; 0x3bc8 <moveLeft+0xbc>

	//  hit left limit or head down?
  	if( xLimit1() || is_head_down() ) {
    3b54:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <xLimit1>
    3b58:	88 23       	and	r24, r24
    3b5a:	49 f3       	breq	.-46     	; 0x3b2e <moveLeft+0x22>

#ifdef VERBOSE_DEBUG

		printPgmString(PSTR("\r\nmoveLeft "));
    3b5c:	84 e0       	ldi	r24, 0x04	; 4
    3b5e:	98 e0       	ldi	r25, 0x08	; 8
    3b60:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	      	printPgmString(PSTR("head down = "));
    3b64:	87 ef       	ldi	r24, 0xF7	; 247
    3b66:	97 e0       	ldi	r25, 0x07	; 7
    3b68:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
			printInteger( is_head_down() );
    3b6c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	a0 e0       	ldi	r26, 0x00	; 0
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	bc 01       	movw	r22, r24
    3b78:	cd 01       	movw	r24, r26
    3b7a:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	      	printPgmString(PSTR(" "));
    3b7e:	85 ef       	ldi	r24, 0xF5	; 245
    3b80:	97 e0       	ldi	r25, 0x07	; 7
    3b82:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

		if( xLimit1() ){
    3b86:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <xLimit1>
    3b8a:	88 23       	and	r24, r24
    3b8c:	a1 f4       	brne	.+40     	; 0x3bb6 <moveLeft+0xaa>
			printPgmString(PSTR("X1_LIMIT_BIT "));	
		}

		if( is_head_down() )
    3b8e:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3b92:	88 23       	and	r24, r24
    3b94:	59 f4       	brne	.+22     	; 0x3bac <moveLeft+0xa0>
			printPgmString(PSTR("HEAD_DOWN_TEST"));


		printPgmString(PSTR("\r\n"));
    3b96:	85 ed       	ldi	r24, 0xD5	; 213
    3b98:	97 e0       	ldi	r25, 0x07	; 7
    3b9a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	1f 91       	pop	r17
    3ba6:	0f 91       	pop	r16
    3ba8:	ff 90       	pop	r15
    3baa:	08 95       	ret
		if( xLimit1() ){
			printPgmString(PSTR("X1_LIMIT_BIT "));	
		}

		if( is_head_down() )
			printPgmString(PSTR("HEAD_DOWN_TEST"));
    3bac:	88 ed       	ldi	r24, 0xD8	; 216
    3bae:	97 e0       	ldi	r25, 0x07	; 7
    3bb0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3bb4:	f0 cf       	rjmp	.-32     	; 0x3b96 <moveLeft+0x8a>
	      	printPgmString(PSTR("head down = "));
			printInteger( is_head_down() );
	      	printPgmString(PSTR(" "));

		if( xLimit1() ){
			printPgmString(PSTR("X1_LIMIT_BIT "));	
    3bb6:	87 ee       	ldi	r24, 0xE7	; 231
    3bb8:	97 e0       	ldi	r25, 0x07	; 7
    3bba:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		}

		if( is_head_down() )
    3bbe:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3bc2:	88 23       	and	r24, r24
    3bc4:	41 f3       	breq	.-48     	; 0x3b96 <moveLeft+0x8a>
    3bc6:	f2 cf       	rjmp	.-28     	; 0x3bac <moveLeft+0xa0>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    3bca:	df 91       	pop	r29
    3bcc:	cf 91       	pop	r28
    3bce:	1f 91       	pop	r17
    3bd0:	0f 91       	pop	r16
    3bd2:	ff 90       	pop	r15
    3bd4:	08 95       	ret

00003bd6 <st_go_home>:
  }
  return TRUE;
}

void st_go_home(void)
{
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
	unsigned char yDir = FORWARD;

	unsigned int counter = 0;

	// not homed
	gHomed = FALSE;
    3bda:	10 92 2f 08 	sts	0x082F, r1

	// reset position machine thinks we are at.
	plan_init();
    3bde:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <plan_init>
	gc_init();
    3be2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <gc_init>

	// if head down, set head up
	if( is_head_down() ) {
    3be6:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3bea:	88 23       	and	r24, r24
    3bec:	69 f0       	breq	.+26     	; 0x3c08 <st_go_home+0x32>

#ifdef VERBOSE_DEBUG

		printPgmString(PSTR("home is_head_down()=1\r\n"));
    3bee:	89 e5       	ldi	r24, 0x59	; 89
    3bf0:	97 e0       	ldi	r25, 0x07	; 7
    3bf2:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

		head_down(0);
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
		
		//check again
		if(is_head_down() ){
    3bfe:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3c02:	88 23       	and	r24, r24
    3c04:	09 f0       	breq	.+2      	; 0x3c08 <st_go_home+0x32>
    3c06:	bd c0       	rjmp	.+378    	; 0x3d82 <st_go_home+0x1ac>
	set_busy(FALSE);
	return ;

#endif

	cli();
    3c08:	f8 94       	cli

	// tool changer all down
	atc_fire(0);	
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	0e 94 96 23 	call	0x472c	; 0x472c <atc_fire>
	vacuum(0);
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nX limit1 check\r\n"));
    3c1a:	8d e2       	ldi	r24, 0x2D	; 45
    3c1c:	97 e0       	ldi	r25, 0x07	; 7
    3c1e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

	// If in left most limit, move to right > more than size of home and limit area
	if( xLimit1() ) {
    3c22:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <xLimit1>
    3c26:	88 23       	and	r24, r24
    3c28:	a9 f0       	breq	.+42     	; 0x3c54 <st_go_home+0x7e>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
    3c2a:	83 e2       	ldi	r24, 0x23	; 35
    3c2c:	97 e0       	ldi	r25, 0x07	; 7
    3c2e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    3c32:	88 ee       	ldi	r24, 0xE8	; 232
    3c34:	93 e0       	ldi	r25, 0x03	; 3
    3c36:	0e 94 de 1c 	call	0x39bc	; 0x39bc <moveRight>
    3c3a:	88 23       	and	r24, r24
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <st_go_home+0x6a>
    3c3e:	99 c0       	rjmp	.+306    	; 0x3d72 <st_go_home+0x19c>
			sei();
			return;
    3c40:	20 ed       	ldi	r18, 0xD0	; 208
    3c42:	37 e0       	ldi	r19, 0x07	; 7
    3c44:	40 e9       	ldi	r20, 0x90	; 144
    3c46:	51 e0       	ldi	r21, 0x01	; 1
    3c48:	ca 01       	movw	r24, r20
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <st_go_home+0x74>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4e:	21 50       	subi	r18, 0x01	; 1
    3c50:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c52:	d1 f7       	brne	.-12     	; 0x3c48 <st_go_home+0x72>
		// direction change delay
		_delay_ms(200);

	}
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nY limit1 check\r\n"));
    3c54:	80 e1       	ldi	r24, 0x10	; 16
    3c56:	97 e0       	ldi	r25, 0x07	; 7
    3c58:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

	// If in front most limit, move to right > more than size of home and limit area
	if( yLimit1() ) {
    3c5c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <yLimit1>
    3c60:	88 23       	and	r24, r24
    3c62:	09 f0       	breq	.+2      	; 0x3c66 <st_go_home+0x90>
    3c64:	50 c0       	rjmp	.+160    	; 0x3d06 <st_go_home+0x130>
		// direction change delay
		_delay_ms(200);
	}

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("homing left "));
    3c66:	89 ef       	ldi	r24, 0xF9	; 249
    3c68:	96 e0       	ldi	r25, 0x06	; 6
    3c6a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3c6e:	c0 e0       	ldi	r28, 0x00	; 0
    3c70:	d0 e0       	ldi	r29, 0x00	; 0
	// at here, we are maybe  not in home, and also not in the XL1/Yl1 limits
	do {


#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
    3c72:	87 ef       	ldi	r24, 0xF7	; 247
    3c74:	96 e0       	ldi	r25, 0x06	; 6
    3c76:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
		// are we homed ?	
		if( xHome() ) {
    3c7a:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <xHome>
    3c7e:	88 23       	and	r24, r24
    3c80:	81 f4       	brne	.+32     	; 0x3ca2 <st_go_home+0xcc>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 )  {
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <moveLeft>
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <st_go_home+0xba>
    3c8e:	91 c0       	rjmp	.+290    	; 0x3db2 <st_go_home+0x1dc>
				printPgmString(PSTR("home moveLeft(1) failed"));
#endif
				goto error;
			}

			counter ++;
    3c90:	21 96       	adiw	r28, 0x01	; 1
	// at here, we are maybe  not in home, and also not in the XL1/Yl1 limits
	do {


#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
    3c92:	87 ef       	ldi	r24, 0xF7	; 247
    3c94:	96 e0       	ldi	r25, 0x06	; 6
    3c96:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
		// are we homed ?	
		if( xHome() ) {
    3c9a:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <xHome>
    3c9e:	88 23       	and	r24, r24
    3ca0:	81 f3       	breq	.-32     	; 0x3c82 <st_go_home+0xac>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("home xHome() ==1"));
    3ca2:	86 ee       	ldi	r24, 0xE6	; 230
    3ca4:	96 e0       	ldi	r25, 0x06	; 6
    3ca6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		}

	}while( xDir != STOP );

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nleft count = "));
    3caa:	8e eb       	ldi	r24, 0xBE	; 190
    3cac:	96 e0       	ldi	r25, 0x06	; 6
    3cae:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	printInteger( counter ) ;
    3cb2:	be 01       	movw	r22, r28
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	printPgmString(PSTR("\r\n"));
    3cbc:	8b eb       	ldi	r24, 0xBB	; 187
    3cbe:	96 e0       	ldi	r25, 0x06	; 6
    3cc0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3cc4:	20 ed       	ldi	r18, 0xD0	; 208
    3cc6:	37 e0       	ldi	r19, 0x07	; 7
    3cc8:	40 e9       	ldi	r20, 0x90	; 144
    3cca:	51 e0       	ldi	r21, 0x01	; 1
    3ccc:	ca 01       	movw	r24, r20
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	f1 f7       	brne	.-4      	; 0x3cce <st_go_home+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd2:	21 50       	subi	r18, 0x01	; 1
    3cd4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd6:	d1 f7       	brne	.-12     	; 0x3ccc <st_go_home+0xf6>

	// direction change delay
	_delay_ms(200);

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nhoming right "));
    3cd8:	8b ea       	ldi	r24, 0xAB	; 171
    3cda:	96 e0       	ldi	r25, 0x06	; 6
    3cdc:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	do {
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
    3ce0:	89 ea       	ldi	r24, 0xA9	; 169
    3ce2:	96 e0       	ldi	r25, 0x06	; 6
    3ce4:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
		if( yHome() ) {
    3ce8:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <yHome>
    3cec:	88 23       	and	r24, r24
    3cee:	01 f5       	brne	.+64     	; 0x3d30 <st_go_home+0x15a>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <moveForward>
    3cf8:	88 23       	and	r24, r24
    3cfa:	91 f7       	brne	.-28     	; 0x3ce0 <st_go_home+0x10a>
#ifdef VERBOSE_DEBUG
				printPgmString(PSTR("home moveForward(1) failed"));
    3cfc:	8d e7       	ldi	r24, 0x7D	; 125
    3cfe:	96 e0       	ldi	r25, 0x06	; 6
    3d00:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3d04:	2e c0       	rjmp	.+92     	; 0x3d62 <st_go_home+0x18c>

	// If in front most limit, move to right > more than size of home and limit area
	if( yLimit1() ) {

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
    3d06:	86 e0       	ldi	r24, 0x06	; 6
    3d08:	97 e0       	ldi	r25, 0x07	; 7
    3d0a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    3d0e:	88 ee       	ldi	r24, 0xE8	; 232
    3d10:	93 e0       	ldi	r25, 0x03	; 3
    3d12:	0e 94 8a 1c 	call	0x3914	; 0x3914 <moveBack>
    3d16:	88 23       	and	r24, r24
    3d18:	81 f1       	breq	.+96     	; 0x3d7a <st_go_home+0x1a4>
			sei();
			return;
    3d1a:	20 ed       	ldi	r18, 0xD0	; 208
    3d1c:	37 e0       	ldi	r19, 0x07	; 7
    3d1e:	40 e9       	ldi	r20, 0x90	; 144
    3d20:	51 e0       	ldi	r21, 0x01	; 1
    3d22:	ca 01       	movw	r24, r20
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	f1 f7       	brne	.-4      	; 0x3d24 <st_go_home+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d28:	21 50       	subi	r18, 0x01	; 1
    3d2a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2c:	d1 f7       	brne	.-12     	; 0x3d22 <st_go_home+0x14c>
    3d2e:	9b cf       	rjmp	.-202    	; 0x3c66 <st_go_home+0x90>
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( yHome() ) {
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("home yHome() ==1"));
    3d30:	88 e9       	ldi	r24, 0x98	; 152
    3d32:	96 e0       	ldi	r25, 0x06	; 6
    3d34:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	} while( yDir != STOP );


#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nforward count = "));
    3d38:	8a e6       	ldi	r24, 0x6A	; 106
    3d3a:	96 e0       	ldi	r25, 0x06	; 6
    3d3c:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
	printInteger( counter ) ;
    3d40:	60 e0       	ldi	r22, 0x00	; 0
    3d42:	70 e0       	ldi	r23, 0x00	; 0
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	printPgmString(PSTR("\r\n"));
    3d4c:	87 e6       	ldi	r24, 0x67	; 103
    3d4e:	96 e0       	ldi	r25, 0x06	; 6
    3d50:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif



	sei();
    3d54:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    3d56:	89 b1       	in	r24, 0x09	; 9
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	8f 70       	andi	r24, 0x0F	; 15
    3d5c:	90 70       	andi	r25, 0x00	; 0
    3d5e:	89 2b       	or	r24, r25
    3d60:	d1 f0       	breq	.+52     	; 0x3d96 <st_go_home+0x1c0>
		printPgmString(PSTR("\r\npickobear is homed\r\n"));
#endif
		return;
	}
error:;
	sei();
    3d62:	78 94       	sei

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\npickobear is not homed\r\n"));
    3d64:	85 e3       	ldi	r24, 0x35	; 53
    3d66:	96 e0       	ldi	r25, 0x06	; 6
    3d68:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

}
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
			sei();
    3d72:	78 94       	sei

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\npickobear is not homed\r\n"));
#endif

}
    3d74:	df 91       	pop	r29
    3d76:	cf 91       	pop	r28
    3d78:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
			sei();
    3d7a:	78 94       	sei

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\npickobear is not homed\r\n"));
#endif

}
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	08 95       	ret
		head_down(0);
		
		//check again
		if(is_head_down() ){
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("home failed, head down\r\n"));
    3d82:	80 e4       	ldi	r24, 0x40	; 64
    3d84:	97 e0       	ldi	r25, 0x07	; 7
    3d86:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
			ackHost = 'E';
    3d8a:	85 e4       	ldi	r24, 0x45	; 69
    3d8c:	80 93 2e 08 	sts	0x082E, r24

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\npickobear is not homed\r\n"));
#endif

}
    3d90:	df 91       	pop	r29
    3d92:	cf 91       	pop	r28
    3d94:	08 95       	ret

	sei();


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
		gHomed = TRUE ;
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	80 93 2f 08 	sts	0x082F, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    3d9c:	10 92 48 08 	sts	0x0848, r1
    3da0:	10 92 47 08 	sts	0x0847, r1
		
		// marks as no longer busy
		set_busy(FALSE);

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("\r\npickobear is homed\r\n"));
    3da4:	80 e5       	ldi	r24, 0x50	; 80
    3da6:	96 e0       	ldi	r25, 0x06	; 6
    3da8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\npickobear is not homed\r\n"));
#endif

}
    3dac:	df 91       	pop	r29
    3dae:	cf 91       	pop	r28
    3db0:	08 95       	ret

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 )  {
#ifdef VERBOSE_DEBUG
				printPgmString(PSTR("home moveLeft(1) failed"));
    3db2:	8e ec       	ldi	r24, 0xCE	; 206
    3db4:	96 e0       	ldi	r25, 0x06	; 6
    3db6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    3dba:	d3 cf       	rjmp	.-90     	; 0x3d62 <st_go_home+0x18c>

00003dbc <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    3dbc:	07 c0       	rjmp	.+14     	; 0x3dcc <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    3dbe:	83 b7       	in	r24, 0x33	; 51
    3dc0:	81 60       	ori	r24, 0x01	; 1
    3dc2:	83 bf       	out	0x33, r24	; 51
    3dc4:	88 95       	sleep
    3dc6:	83 b7       	in	r24, 0x33	; 51
    3dc8:	8e 7f       	andi	r24, 0xFE	; 254
    3dca:	83 bf       	out	0x33, r24	; 51
    3dcc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <plan_get_current_block>
    3dd0:	89 2b       	or	r24, r25
    3dd2:	a9 f7       	brne	.-22     	; 0x3dbe <st_synchronize+0x2>
}
    3dd4:	08 95       	ret

00003dd6 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    3dd6:	1f 92       	push	r1
    3dd8:	0f 92       	push	r0
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	0f 92       	push	r0
    3dde:	0b b6       	in	r0, 0x3b	; 59
    3de0:	0f 92       	push	r0
    3de2:	11 24       	eor	r1, r1
    3de4:	ef 92       	push	r14
    3de6:	ff 92       	push	r15
    3de8:	0f 93       	push	r16
    3dea:	1f 93       	push	r17
    3dec:	2f 93       	push	r18
    3dee:	3f 93       	push	r19
    3df0:	4f 93       	push	r20
    3df2:	5f 93       	push	r21
    3df4:	6f 93       	push	r22
    3df6:	7f 93       	push	r23
    3df8:	8f 93       	push	r24
    3dfa:	9f 93       	push	r25
    3dfc:	af 93       	push	r26
    3dfe:	bf 93       	push	r27
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	ef 93       	push	r30
    3e06:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    3e08:	80 91 2f 08 	lds	r24, 0x082F
    3e0c:	88 23       	and	r24, r24
    3e0e:	49 f1       	breq	.+82     	; 0x3e62 <__vector_17+0x8c>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

	// Check all limit switches
	if( LIMIT_PIN & 0xf ) {
    3e10:	89 b1       	in	r24, 0x09	; 9
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	8f 70       	andi	r24, 0x0F	; 15
    3e16:	90 70       	andi	r25, 0x00	; 0
    3e18:	89 2b       	or	r24, r25
    3e1a:	61 f1       	breq	.+88     	; 0x3e74 <__vector_17+0x9e>
		gHomed = FALSE ;
    3e1c:	10 92 2f 08 	sts	0x082F, r1
		// set ack
		ackHost = 'L';
    3e20:	8c e4       	ldi	r24, 0x4C	; 76
    3e22:	80 93 2e 08 	sts	0x082E, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    3e26:	80 91 6f 00 	lds	r24, 0x006F
    3e2a:	8d 7f       	andi	r24, 0xFD	; 253
    3e2c:	80 93 6f 00 	sts	0x006F, r24
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
}
    3e30:	ff 91       	pop	r31
    3e32:	ef 91       	pop	r30
    3e34:	df 91       	pop	r29
    3e36:	cf 91       	pop	r28
    3e38:	bf 91       	pop	r27
    3e3a:	af 91       	pop	r26
    3e3c:	9f 91       	pop	r25
    3e3e:	8f 91       	pop	r24
    3e40:	7f 91       	pop	r23
    3e42:	6f 91       	pop	r22
    3e44:	5f 91       	pop	r21
    3e46:	4f 91       	pop	r20
    3e48:	3f 91       	pop	r19
    3e4a:	2f 91       	pop	r18
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	0f 90       	pop	r0
    3e56:	0b be       	out	0x3b, r0	; 59
    3e58:	0f 90       	pop	r0
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	0f 90       	pop	r0
    3e5e:	1f 90       	pop	r1
    3e60:	18 95       	reti
{        
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
		// set ack
		ackHost = 'H';
    3e62:	88 e4       	ldi	r24, 0x48	; 72
    3e64:	80 93 2e 08 	sts	0x082E, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    3e68:	80 91 6f 00 	lds	r24, 0x006F
    3e6c:	8d 7f       	andi	r24, 0xFD	; 253
    3e6e:	80 93 6f 00 	sts	0x006F, r24
    3e72:	de cf       	rjmp	.-68     	; 0x3e30 <__vector_17+0x5a>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

	// don't move if the head is down, this one is ok to let it keep running  
	if( is_head_down() ) {
    3e74:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    3e78:	88 23       	and	r24, r24
    3e7a:	d1 f6       	brne	.-76     	; 0x3e30 <__vector_17+0x5a>
		return;
	}

  if(busy){ 
    3e7c:	80 91 47 08 	lds	r24, 0x0847
    3e80:	90 91 48 08 	lds	r25, 0x0848
    3e84:	89 2b       	or	r24, r25
    3e86:	a1 f6       	brne	.-88     	; 0x3e30 <__vector_17+0x5a>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    3e88:	91 b3       	in	r25, 0x11	; 17
    3e8a:	80 91 94 09 	lds	r24, 0x0994
    3e8e:	8a 7c       	andi	r24, 0xCA	; 202
    3e90:	95 73       	andi	r25, 0x35	; 53
    3e92:	89 2b       	or	r24, r25
    3e94:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    3e96:	81 b3       	in	r24, 0x11	; 17
    3e98:	8a 7c       	andi	r24, 0xCA	; 202
    3e9a:	90 91 32 08 	lds	r25, 0x0832
    3e9e:	89 2b       	or	r24, r25
    3ea0:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    3ea2:	80 91 7f 09 	lds	r24, 0x097F
    3ea6:	88 0f       	add	r24, r24
    3ea8:	84 50       	subi	r24, 0x04	; 4
    3eaa:	81 95       	neg	r24
    3eac:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    3eb0:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	90 93 48 08 	sts	0x0848, r25
    3eba:	80 93 47 08 	sts	0x0847, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    3ebe:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    3ec0:	e0 91 30 08 	lds	r30, 0x0830
    3ec4:	f0 91 31 08 	lds	r31, 0x0831
    3ec8:	30 97       	sbiw	r30, 0x00	; 0
    3eca:	09 f4       	brne	.+2      	; 0x3ece <__vector_17+0xf8>
    3ecc:	cc c1       	rjmp	.+920    	; 0x4266 <__vector_17+0x490>

    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    3ece:	80 89       	ldd	r24, Z+16	; 0x10
    3ed0:	80 93 94 09 	sts	0x0994, r24
    out_bits = 0;
    3ed4:	10 92 32 08 	sts	0x0832, r1
    counter_x += current_block->steps_x;
    3ed8:	20 91 33 08 	lds	r18, 0x0833
    3edc:	30 91 34 08 	lds	r19, 0x0834
    3ee0:	40 91 35 08 	lds	r20, 0x0835
    3ee4:	50 91 36 08 	lds	r21, 0x0836
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	a2 81       	ldd	r26, Z+2	; 0x02
    3eee:	b3 81       	ldd	r27, Z+3	; 0x03
    3ef0:	28 0f       	add	r18, r24
    3ef2:	39 1f       	adc	r19, r25
    3ef4:	4a 1f       	adc	r20, r26
    3ef6:	5b 1f       	adc	r21, r27
    3ef8:	20 93 33 08 	sts	0x0833, r18
    3efc:	30 93 34 08 	sts	0x0834, r19
    3f00:	40 93 35 08 	sts	0x0835, r20
    3f04:	50 93 36 08 	sts	0x0836, r21
    if (counter_x > 0) {
    3f08:	12 16       	cp	r1, r18
    3f0a:	13 06       	cpc	r1, r19
    3f0c:	14 06       	cpc	r1, r20
    3f0e:	15 06       	cpc	r1, r21
    3f10:	0c f0       	brlt	.+2      	; 0x3f14 <__vector_17+0x13e>
    3f12:	47 c1       	rjmp	.+654    	; 0x41a2 <__vector_17+0x3cc>
      out_bits |= (1<<X_STEP_BIT);
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	80 93 32 08 	sts	0x0832, r24
      counter_x -= current_block->step_event_count;
    3f1a:	e1 88       	ldd	r14, Z+17	; 0x11
    3f1c:	f2 88       	ldd	r15, Z+18	; 0x12
    3f1e:	03 89       	ldd	r16, Z+19	; 0x13
    3f20:	14 89       	ldd	r17, Z+20	; 0x14
    3f22:	2e 19       	sub	r18, r14
    3f24:	3f 09       	sbc	r19, r15
    3f26:	40 0b       	sbc	r20, r16
    3f28:	51 0b       	sbc	r21, r17
    3f2a:	20 93 33 08 	sts	0x0833, r18
    3f2e:	30 93 34 08 	sts	0x0834, r19
    3f32:	40 93 35 08 	sts	0x0835, r20
    3f36:	50 93 36 08 	sts	0x0836, r21
    }
    counter_y += current_block->steps_y;
    3f3a:	20 91 37 08 	lds	r18, 0x0837
    3f3e:	30 91 38 08 	lds	r19, 0x0838
    3f42:	40 91 39 08 	lds	r20, 0x0839
    3f46:	50 91 3a 08 	lds	r21, 0x083A
    3f4a:	84 81       	ldd	r24, Z+4	; 0x04
    3f4c:	95 81       	ldd	r25, Z+5	; 0x05
    3f4e:	a6 81       	ldd	r26, Z+6	; 0x06
    3f50:	b7 81       	ldd	r27, Z+7	; 0x07
    3f52:	28 0f       	add	r18, r24
    3f54:	39 1f       	adc	r19, r25
    3f56:	4a 1f       	adc	r20, r26
    3f58:	5b 1f       	adc	r21, r27
    3f5a:	20 93 37 08 	sts	0x0837, r18
    3f5e:	30 93 38 08 	sts	0x0838, r19
    3f62:	40 93 39 08 	sts	0x0839, r20
    3f66:	50 93 3a 08 	sts	0x083A, r21
    if (counter_y > 0) {
    3f6a:	12 16       	cp	r1, r18
    3f6c:	13 06       	cpc	r1, r19
    3f6e:	14 06       	cpc	r1, r20
    3f70:	15 06       	cpc	r1, r21
    3f72:	8c f4       	brge	.+34     	; 0x3f96 <__vector_17+0x1c0>
      out_bits |= (1<<Y_STEP_BIT);
    3f74:	80 91 32 08 	lds	r24, 0x0832
    3f78:	84 60       	ori	r24, 0x04	; 4
    3f7a:	80 93 32 08 	sts	0x0832, r24
      counter_y -= current_block->step_event_count;
    3f7e:	2e 19       	sub	r18, r14
    3f80:	3f 09       	sbc	r19, r15
    3f82:	40 0b       	sbc	r20, r16
    3f84:	51 0b       	sbc	r21, r17
    3f86:	20 93 37 08 	sts	0x0837, r18
    3f8a:	30 93 38 08 	sts	0x0838, r19
    3f8e:	40 93 39 08 	sts	0x0839, r20
    3f92:	50 93 3a 08 	sts	0x083A, r21
    }
    counter_z += current_block->steps_z;
    3f96:	20 91 3b 08 	lds	r18, 0x083B
    3f9a:	30 91 3c 08 	lds	r19, 0x083C
    3f9e:	40 91 3d 08 	lds	r20, 0x083D
    3fa2:	50 91 3e 08 	lds	r21, 0x083E
    3fa6:	80 85       	ldd	r24, Z+8	; 0x08
    3fa8:	91 85       	ldd	r25, Z+9	; 0x09
    3faa:	a2 85       	ldd	r26, Z+10	; 0x0a
    3fac:	b3 85       	ldd	r27, Z+11	; 0x0b
    3fae:	28 0f       	add	r18, r24
    3fb0:	39 1f       	adc	r19, r25
    3fb2:	4a 1f       	adc	r20, r26
    3fb4:	5b 1f       	adc	r21, r27
    3fb6:	20 93 3b 08 	sts	0x083B, r18
    3fba:	30 93 3c 08 	sts	0x083C, r19
    3fbe:	40 93 3d 08 	sts	0x083D, r20
    3fc2:	50 93 3e 08 	sts	0x083E, r21
    if (counter_z > 0) {
    3fc6:	12 16       	cp	r1, r18
    3fc8:	13 06       	cpc	r1, r19
    3fca:	14 06       	cpc	r1, r20
    3fcc:	15 06       	cpc	r1, r21
    3fce:	8c f4       	brge	.+34     	; 0x3ff2 <__vector_17+0x21c>
      out_bits |= (1<<Z_STEP_BIT);
    3fd0:	80 91 32 08 	lds	r24, 0x0832
    3fd4:	80 61       	ori	r24, 0x10	; 16
    3fd6:	80 93 32 08 	sts	0x0832, r24
      counter_z -= current_block->step_event_count;
    3fda:	2e 19       	sub	r18, r14
    3fdc:	3f 09       	sbc	r19, r15
    3fde:	40 0b       	sbc	r20, r16
    3fe0:	51 0b       	sbc	r21, r17
    3fe2:	20 93 3b 08 	sts	0x083B, r18
    3fe6:	30 93 3c 08 	sts	0x083C, r19
    3fea:	40 93 3d 08 	sts	0x083D, r20
    3fee:	50 93 3e 08 	sts	0x083E, r21
    }
    counter_c += current_block->steps_c;
    3ff2:	20 91 3f 08 	lds	r18, 0x083F
    3ff6:	30 91 40 08 	lds	r19, 0x0840
    3ffa:	40 91 41 08 	lds	r20, 0x0841
    3ffe:	50 91 42 08 	lds	r21, 0x0842
    4002:	84 85       	ldd	r24, Z+12	; 0x0c
    4004:	95 85       	ldd	r25, Z+13	; 0x0d
    4006:	a6 85       	ldd	r26, Z+14	; 0x0e
    4008:	b7 85       	ldd	r27, Z+15	; 0x0f
    400a:	28 0f       	add	r18, r24
    400c:	39 1f       	adc	r19, r25
    400e:	4a 1f       	adc	r20, r26
    4010:	5b 1f       	adc	r21, r27
    4012:	20 93 3f 08 	sts	0x083F, r18
    4016:	30 93 40 08 	sts	0x0840, r19
    401a:	40 93 41 08 	sts	0x0841, r20
    401e:	50 93 42 08 	sts	0x0842, r21
    if (counter_c > 0) {
    4022:	12 16       	cp	r1, r18
    4024:	13 06       	cpc	r1, r19
    4026:	14 06       	cpc	r1, r20
    4028:	15 06       	cpc	r1, r21
    402a:	94 f4       	brge	.+36     	; 0x4050 <__vector_17+0x27a>
      out_bits |= (1<<C_STEP_BIT);
    402c:	80 91 32 08 	lds	r24, 0x0832
    4030:	80 62       	ori	r24, 0x20	; 32
    4032:	80 93 32 08 	sts	0x0832, r24
      counter_c -= current_block->step_event_count;
    4036:	2e 19       	sub	r18, r14
    4038:	3f 09       	sbc	r19, r15
    403a:	40 0b       	sbc	r20, r16
    403c:	51 0b       	sbc	r21, r17
    403e:	20 93 3f 08 	sts	0x083F, r18
    4042:	30 93 40 08 	sts	0x0840, r19
    4046:	40 93 41 08 	sts	0x0841, r20
    404a:	50 93 42 08 	sts	0x0842, r21

	//pulse C axis (head)
		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    404e:	46 9a       	sbi	0x08, 6	; 8



    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    4050:	80 91 43 08 	lds	r24, 0x0843
    4054:	90 91 44 08 	lds	r25, 0x0844
    4058:	a0 91 45 08 	lds	r26, 0x0845
    405c:	b0 91 46 08 	lds	r27, 0x0846
    4060:	01 96       	adiw	r24, 0x01	; 1
    4062:	a1 1d       	adc	r26, r1
    4064:	b1 1d       	adc	r27, r1
    4066:	80 93 43 08 	sts	0x0843, r24
    406a:	90 93 44 08 	sts	0x0844, r25
    406e:	a0 93 45 08 	sts	0x0845, r26
    4072:	b0 93 46 08 	sts	0x0846, r27
    if (step_events_completed >= current_block->step_event_count) {
    4076:	8e 15       	cp	r24, r14
    4078:	9f 05       	cpc	r25, r15
    407a:	a0 07       	cpc	r26, r16
    407c:	b1 07       	cpc	r27, r17
    407e:	08 f0       	brcs	.+2      	; 0x4082 <__vector_17+0x2ac>
    4080:	95 c0       	rjmp	.+298    	; 0x41ac <__vector_17+0x3d6>
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
    4082:	80 91 32 08 	lds	r24, 0x0832
    4086:	95 e3       	ldi	r25, 0x35	; 53
    4088:	89 27       	eor	r24, r25
    408a:	80 93 32 08 	sts	0x0832, r24
  dir_bits ^= DIRECTION_INVERT_MASK;
    408e:	80 91 94 09 	lds	r24, 0x0994
    4092:	9a ec       	ldi	r25, 0xCA	; 202
    4094:	89 27       	eor	r24, r25
    4096:	80 93 94 09 	sts	0x0994, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    409a:	20 91 49 08 	lds	r18, 0x0849
    409e:	30 91 4a 08 	lds	r19, 0x084A
    40a2:	40 91 4b 08 	lds	r20, 0x084B
    40a6:	50 91 4c 08 	lds	r21, 0x084C
    40aa:	80 91 4d 08 	lds	r24, 0x084D
    40ae:	90 91 4e 08 	lds	r25, 0x084E
    40b2:	a0 91 4f 08 	lds	r26, 0x084F
    40b6:	b0 91 50 08 	lds	r27, 0x0850
    40ba:	28 0f       	add	r18, r24
    40bc:	39 1f       	adc	r19, r25
    40be:	4a 1f       	adc	r20, r26
    40c0:	5b 1f       	adc	r21, r27
    40c2:	20 93 4d 08 	sts	0x084D, r18
    40c6:	30 93 4e 08 	sts	0x084E, r19
    40ca:	40 93 4f 08 	sts	0x084F, r20
    40ce:	50 93 50 08 	sts	0x0850, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    40d2:	21 38       	cpi	r18, 0x81	; 129
    40d4:	0a e1       	ldi	r16, 0x1A	; 26
    40d6:	30 07       	cpc	r19, r16
    40d8:	06 e0       	ldi	r16, 0x06	; 6
    40da:	40 07       	cpc	r20, r16
    40dc:	00 e0       	ldi	r16, 0x00	; 0
    40de:	50 07       	cpc	r21, r16
    40e0:	08 f4       	brcc	.+2      	; 0x40e4 <__vector_17+0x30e>
    40e2:	5a c0       	rjmp	.+180    	; 0x4198 <__vector_17+0x3c2>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    40e4:	20 58       	subi	r18, 0x80	; 128
    40e6:	3a 41       	sbci	r19, 0x1A	; 26
    40e8:	46 40       	sbci	r20, 0x06	; 6
    40ea:	50 40       	sbci	r21, 0x00	; 0
    40ec:	20 93 4d 08 	sts	0x084D, r18
    40f0:	30 93 4e 08 	sts	0x084E, r19
    40f4:	40 93 4f 08 	sts	0x084F, r20
    40f8:	50 93 50 08 	sts	0x0850, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static inline void trapezoid_generator_tick() {     
  if (current_block) {
    40fc:	e0 91 30 08 	lds	r30, 0x0830
    4100:	f0 91 31 08 	lds	r31, 0x0831
    4104:	30 97       	sbiw	r30, 0x00	; 0
    4106:	09 f4       	brne	.+2      	; 0x410a <__vector_17+0x334>
    4108:	47 c0       	rjmp	.+142    	; 0x4198 <__vector_17+0x3c2>
    if (step_events_completed < current_block->accelerate_until) {
    410a:	20 91 43 08 	lds	r18, 0x0843
    410e:	30 91 44 08 	lds	r19, 0x0844
    4112:	40 91 45 08 	lds	r20, 0x0845
    4116:	50 91 46 08 	lds	r21, 0x0846
    411a:	ef 5b       	subi	r30, 0xBF	; 191
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	80 81       	ld	r24, Z
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	a2 81       	ldd	r26, Z+2	; 0x02
    4124:	b3 81       	ldd	r27, Z+3	; 0x03
    4126:	e1 54       	subi	r30, 0x41	; 65
    4128:	f0 40       	sbci	r31, 0x00	; 0
    412a:	28 17       	cp	r18, r24
    412c:	39 07       	cpc	r19, r25
    412e:	4a 07       	cpc	r20, r26
    4130:	5b 07       	cpc	r21, r27
    4132:	08 f0       	brcs	.+2      	; 0x4136 <__vector_17+0x360>
    4134:	42 c0       	rjmp	.+132    	; 0x41ba <__vector_17+0x3e4>
      trapezoid_adjusted_rate += current_block->rate_delta;
    4136:	fd 96       	adiw	r30, 0x3d	; 61
    4138:	80 81       	ld	r24, Z
    413a:	91 81       	ldd	r25, Z+1	; 0x01
    413c:	a2 81       	ldd	r26, Z+2	; 0x02
    413e:	b3 81       	ldd	r27, Z+3	; 0x03
    4140:	fd 97       	sbiw	r30, 0x3d	; 61
    4142:	20 91 51 08 	lds	r18, 0x0851
    4146:	30 91 52 08 	lds	r19, 0x0852
    414a:	40 91 53 08 	lds	r20, 0x0853
    414e:	50 91 54 08 	lds	r21, 0x0854
    4152:	28 0f       	add	r18, r24
    4154:	39 1f       	adc	r19, r25
    4156:	4a 1f       	adc	r20, r26
    4158:	5b 1f       	adc	r21, r27
    415a:	20 93 51 08 	sts	0x0851, r18
    415e:	30 93 52 08 	sts	0x0852, r19
    4162:	40 93 53 08 	sts	0x0853, r20
    4166:	50 93 54 08 	sts	0x0854, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    416a:	85 89       	ldd	r24, Z+21	; 0x15
    416c:	96 89       	ldd	r25, Z+22	; 0x16
    416e:	a7 89       	ldd	r26, Z+23	; 0x17
    4170:	b0 8d       	ldd	r27, Z+24	; 0x18
    4172:	82 17       	cp	r24, r18
    4174:	93 07       	cpc	r25, r19
    4176:	a4 07       	cpc	r26, r20
    4178:	b5 07       	cpc	r27, r21
    417a:	50 f4       	brcc	.+20     	; 0x4190 <__vector_17+0x3ba>
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
        trapezoid_adjusted_rate -= current_block->rate_delta;
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
        trapezoid_adjusted_rate = current_block->final_rate;
    417c:	80 93 51 08 	sts	0x0851, r24
    4180:	90 93 52 08 	sts	0x0852, r25
    4184:	a0 93 53 08 	sts	0x0853, r26
    4188:	b0 93 54 08 	sts	0x0854, r27
    418c:	9c 01       	movw	r18, r24
    418e:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    4190:	ca 01       	movw	r24, r20
    4192:	b9 01       	movw	r22, r18
    4194:	0e 94 bd 1b 	call	0x377a	; 0x377a <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    4198:	10 92 48 08 	sts	0x0848, r1
    419c:	10 92 47 08 	sts	0x0847, r1
    41a0:	47 ce       	rjmp	.-882    	; 0x3e30 <__vector_17+0x5a>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    41a2:	e1 88       	ldd	r14, Z+17	; 0x11
    41a4:	f2 88       	ldd	r15, Z+18	; 0x12
    41a6:	03 89       	ldd	r16, Z+19	; 0x13
    41a8:	14 89       	ldd	r17, Z+20	; 0x14
    41aa:	c7 ce       	rjmp	.-626    	; 0x3f3a <__vector_17+0x164>

    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    41ac:	10 92 31 08 	sts	0x0831, r1
    41b0:	10 92 30 08 	sts	0x0830, r1
      plan_discard_current_block();
    41b4:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <plan_discard_current_block>
    41b8:	64 cf       	rjmp	.-312    	; 0x4082 <__vector_17+0x2ac>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    41ba:	eb 5b       	subi	r30, 0xBB	; 187
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	80 81       	ld	r24, Z
    41c0:	91 81       	ldd	r25, Z+1	; 0x01
    41c2:	a2 81       	ldd	r26, Z+2	; 0x02
    41c4:	b3 81       	ldd	r27, Z+3	; 0x03
    41c6:	e5 54       	subi	r30, 0x45	; 69
    41c8:	f0 40       	sbci	r31, 0x00	; 0
    41ca:	82 17       	cp	r24, r18
    41cc:	93 07       	cpc	r25, r19
    41ce:	a4 07       	cpc	r26, r20
    41d0:	b5 07       	cpc	r27, r21
    41d2:	70 f5       	brcc	.+92     	; 0x4230 <__vector_17+0x45a>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    41d4:	fd 96       	adiw	r30, 0x3d	; 61
    41d6:	60 81       	ld	r22, Z
    41d8:	71 81       	ldd	r23, Z+1	; 0x01
    41da:	82 81       	ldd	r24, Z+2	; 0x02
    41dc:	93 81       	ldd	r25, Z+3	; 0x03
    41de:	fd 97       	sbiw	r30, 0x3d	; 61
    41e0:	20 91 51 08 	lds	r18, 0x0851
    41e4:	30 91 52 08 	lds	r19, 0x0852
    41e8:	40 91 53 08 	lds	r20, 0x0853
    41ec:	50 91 54 08 	lds	r21, 0x0854
    41f0:	62 17       	cp	r22, r18
    41f2:	73 07       	cpc	r23, r19
    41f4:	84 07       	cpc	r24, r20
    41f6:	95 07       	cpc	r25, r21
    41f8:	80 f4       	brcc	.+32     	; 0x421a <__vector_17+0x444>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    41fa:	79 01       	movw	r14, r18
    41fc:	8a 01       	movw	r16, r20
    41fe:	e6 1a       	sub	r14, r22
    4200:	f7 0a       	sbc	r15, r23
    4202:	08 0b       	sbc	r16, r24
    4204:	19 0b       	sbc	r17, r25
    4206:	e0 92 51 08 	sts	0x0851, r14
    420a:	f0 92 52 08 	sts	0x0852, r15
    420e:	00 93 53 08 	sts	0x0853, r16
    4212:	10 93 54 08 	sts	0x0854, r17
    4216:	a8 01       	movw	r20, r16
    4218:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    421a:	81 ad       	ldd	r24, Z+57	; 0x39
    421c:	92 ad       	ldd	r25, Z+58	; 0x3a
    421e:	a3 ad       	ldd	r26, Z+59	; 0x3b
    4220:	b4 ad       	ldd	r27, Z+60	; 0x3c
    4222:	28 17       	cp	r18, r24
    4224:	39 07       	cpc	r19, r25
    4226:	4a 07       	cpc	r20, r26
    4228:	5b 07       	cpc	r21, r27
    422a:	08 f0       	brcs	.+2      	; 0x422e <__vector_17+0x458>
    422c:	b1 cf       	rjmp	.-158    	; 0x4190 <__vector_17+0x3ba>
    422e:	a6 cf       	rjmp	.-180    	; 0x417c <__vector_17+0x3a6>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    4230:	25 89       	ldd	r18, Z+21	; 0x15
    4232:	36 89       	ldd	r19, Z+22	; 0x16
    4234:	47 89       	ldd	r20, Z+23	; 0x17
    4236:	50 8d       	ldd	r21, Z+24	; 0x18
    4238:	80 91 51 08 	lds	r24, 0x0851
    423c:	90 91 52 08 	lds	r25, 0x0852
    4240:	a0 91 53 08 	lds	r26, 0x0853
    4244:	b0 91 54 08 	lds	r27, 0x0854
    4248:	28 17       	cp	r18, r24
    424a:	39 07       	cpc	r19, r25
    424c:	4a 07       	cpc	r20, r26
    424e:	5b 07       	cpc	r21, r27
    4250:	09 f4       	brne	.+2      	; 0x4254 <__vector_17+0x47e>
    4252:	a2 cf       	rjmp	.-188    	; 0x4198 <__vector_17+0x3c2>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    4254:	20 93 51 08 	sts	0x0851, r18
    4258:	30 93 52 08 	sts	0x0852, r19
    425c:	40 93 53 08 	sts	0x0853, r20
    4260:	50 93 54 08 	sts	0x0854, r21
    4264:	95 cf       	rjmp	.-214    	; 0x4190 <__vector_17+0x3ba>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    4266:	0e 94 56 0e 	call	0x1cac	; 0x1cac <plan_get_current_block>
    426a:	ec 01       	movw	r28, r24
    426c:	90 93 31 08 	sts	0x0831, r25
    4270:	80 93 30 08 	sts	0x0830, r24
    if (current_block != NULL) {
    4274:	00 97       	sbiw	r24, 0x00	; 0
    4276:	09 f4       	brne	.+2      	; 0x427a <__vector_17+0x4a4>
    4278:	52 c0       	rjmp	.+164    	; 0x431e <__vector_17+0x548>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    427a:	6d a9       	ldd	r22, Y+53	; 0x35
    427c:	7e a9       	ldd	r23, Y+54	; 0x36
    427e:	8f a9       	ldd	r24, Y+55	; 0x37
    4280:	98 ad       	ldd	r25, Y+56	; 0x38
    4282:	60 93 51 08 	sts	0x0851, r22
    4286:	70 93 52 08 	sts	0x0852, r23
    428a:	80 93 53 08 	sts	0x0853, r24
    428e:	90 93 54 08 	sts	0x0854, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    4292:	10 92 4d 08 	sts	0x084D, r1
    4296:	10 92 4e 08 	sts	0x084E, r1
    429a:	10 92 4f 08 	sts	0x084F, r1
    429e:	10 92 50 08 	sts	0x0850, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    42a2:	0e 94 bd 1b 	call	0x377a	; 0x377a <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    42a6:	89 89       	ldd	r24, Y+17	; 0x11
    42a8:	9a 89       	ldd	r25, Y+18	; 0x12
    42aa:	ab 89       	ldd	r26, Y+19	; 0x13
    42ac:	bc 89       	ldd	r27, Y+20	; 0x14
    42ae:	b5 95       	asr	r27
    42b0:	a7 95       	ror	r26
    42b2:	97 95       	ror	r25
    42b4:	87 95       	ror	r24
    42b6:	b0 95       	com	r27
    42b8:	a0 95       	com	r26
    42ba:	90 95       	com	r25
    42bc:	81 95       	neg	r24
    42be:	9f 4f       	sbci	r25, 0xFF	; 255
    42c0:	af 4f       	sbci	r26, 0xFF	; 255
    42c2:	bf 4f       	sbci	r27, 0xFF	; 255
    42c4:	80 93 33 08 	sts	0x0833, r24
    42c8:	90 93 34 08 	sts	0x0834, r25
    42cc:	a0 93 35 08 	sts	0x0835, r26
    42d0:	b0 93 36 08 	sts	0x0836, r27
      counter_y = counter_x;
    42d4:	80 93 37 08 	sts	0x0837, r24
    42d8:	90 93 38 08 	sts	0x0838, r25
    42dc:	a0 93 39 08 	sts	0x0839, r26
    42e0:	b0 93 3a 08 	sts	0x083A, r27
      counter_z = counter_x;
    42e4:	80 93 3b 08 	sts	0x083B, r24
    42e8:	90 93 3c 08 	sts	0x083C, r25
    42ec:	a0 93 3d 08 	sts	0x083D, r26
    42f0:	b0 93 3e 08 	sts	0x083E, r27
      counter_c = counter_x;
    42f4:	80 93 3f 08 	sts	0x083F, r24
    42f8:	90 93 40 08 	sts	0x0840, r25
    42fc:	a0 93 41 08 	sts	0x0841, r26
    4300:	b0 93 42 08 	sts	0x0842, r27
      step_events_completed = 0;
    4304:	10 92 43 08 	sts	0x0843, r1
    4308:	10 92 44 08 	sts	0x0844, r1
    430c:	10 92 45 08 	sts	0x0845, r1
    4310:	10 92 46 08 	sts	0x0846, r1
    4314:	e0 91 30 08 	lds	r30, 0x0830
    4318:	f0 91 31 08 	lds	r31, 0x0831
    431c:	d8 cd       	rjmp	.-1104   	; 0x3ece <__vector_17+0xf8>
    } else {

      DISABLE_STEPPER_DRIVER_INTERRUPT();
    431e:	80 91 6f 00 	lds	r24, 0x006F
    4322:	8d 7f       	andi	r24, 0xFD	; 253
    4324:	80 93 6f 00 	sts	0x006F, r24

		// set ack to host, move has finished
	  ackHost = 'X';
    4328:	88 e5       	ldi	r24, 0x58	; 88
    432a:	80 93 2e 08 	sts	0x082E, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    432e:	10 92 32 08 	sts	0x0832, r1
    4332:	a7 ce       	rjmp	.-690    	; 0x4082 <__vector_17+0x2ac>

00004334 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    4334:	ef 92       	push	r14
    4336:	ff 92       	push	r15
    4338:	0f 93       	push	r16
    433a:	1f 93       	push	r17
    433c:	7b 01       	movw	r14, r22
    433e:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    4340:	22 e0       	ldi	r18, 0x02	; 2
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	40 e0       	ldi	r20, 0x00	; 0
    4346:	50 e0       	ldi	r21, 0x00	; 0
    4348:	0e 94 83 34 	call	0x6906	; 0x6906 <__divmodsi4>
    434c:	20 5c       	subi	r18, 0xC0	; 192
    434e:	3d 4b       	sbci	r19, 0xBD	; 189
    4350:	40 4f       	sbci	r20, 0xF0	; 240
    4352:	5f 4f       	sbci	r21, 0xFF	; 255
    4354:	ca 01       	movw	r24, r20
    4356:	b9 01       	movw	r22, r18
    4358:	a8 01       	movw	r20, r16
    435a:	97 01       	movw	r18, r14
    435c:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    4360:	c9 01       	movw	r24, r18
    4362:	da 01       	movw	r26, r20
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	a1 09       	sbc	r26, r1
    4368:	b1 09       	sbc	r27, r1
    436a:	29 2f       	mov	r18, r25
    436c:	3a 2f       	mov	r19, r26
    436e:	4b 2f       	mov	r20, r27
    4370:	55 27       	eor	r21, r21
    4372:	01 96       	adiw	r24, 0x01	; 1
    4374:	a1 1d       	adc	r26, r1
    4376:	b1 1d       	adc	r27, r1
    4378:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    437c:	81 50       	subi	r24, 0x01	; 1
    437e:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    4382:	e0 ec       	ldi	r30, 0xC0	; 192
    4384:	f0 e0       	ldi	r31, 0x00	; 0
    4386:	80 81       	ld	r24, Z
    4388:	8d 7f       	andi	r24, 0xFD	; 253
    438a:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    438c:	e1 ec       	ldi	r30, 0xC1	; 193
    438e:	f0 e0       	ldi	r31, 0x00	; 0
    4390:	80 81       	ld	r24, Z
    4392:	80 61       	ori	r24, 0x10	; 16
    4394:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    4396:	80 81       	ld	r24, Z
    4398:	88 60       	ori	r24, 0x08	; 8
    439a:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    439c:	80 81       	ld	r24, Z
    439e:	80 68       	ori	r24, 0x80	; 128
    43a0:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    43a2:	1f 91       	pop	r17
    43a4:	0f 91       	pop	r16
    43a6:	ff 90       	pop	r15
    43a8:	ef 90       	pop	r14
    43aa:	08 95       	ret

000043ac <serialWrite>:

void serialWrite(unsigned char c)
{
    43ac:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    43ae:	80 91 c0 00 	lds	r24, 0x00C0
    43b2:	85 ff       	sbrs	r24, 5
    43b4:	fc cf       	rjmp	.-8      	; 0x43ae <serialWrite+0x2>
		;
	UDR0 = c;
    43b6:	90 93 c6 00 	sts	0x00C6, r25
}
    43ba:	08 95       	ret

000043bc <serialAvailable>:

int serialAvailable()
{
    43bc:	80 91 55 08 	lds	r24, 0x0855
    43c0:	90 91 56 08 	lds	r25, 0x0856
    43c4:	80 50       	subi	r24, 0x00	; 0
    43c6:	9f 4f       	sbci	r25, 0xFF	; 255
    43c8:	20 91 57 08 	lds	r18, 0x0857
    43cc:	30 91 58 08 	lds	r19, 0x0858
    43d0:	82 1b       	sub	r24, r18
    43d2:	93 0b       	sbc	r25, r19
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	71 e0       	ldi	r23, 0x01	; 1
    43d8:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    43dc:	08 95       	ret

000043de <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    43de:	40 91 57 08 	lds	r20, 0x0857
    43e2:	50 91 58 08 	lds	r21, 0x0858
    43e6:	80 91 55 08 	lds	r24, 0x0855
    43ea:	90 91 56 08 	lds	r25, 0x0856
    43ee:	84 17       	cp	r24, r20
    43f0:	95 07       	cpc	r25, r21
    43f2:	89 f0       	breq	.+34     	; 0x4416 <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    43f4:	fa 01       	movw	r30, r20
    43f6:	e7 5a       	subi	r30, 0xA7	; 167
    43f8:	f7 4f       	sbci	r31, 0xF7	; 247
    43fa:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    43fc:	ca 01       	movw	r24, r20
    43fe:	01 96       	adiw	r24, 0x01	; 1
    4400:	60 e0       	ldi	r22, 0x00	; 0
    4402:	71 e0       	ldi	r23, 0x01	; 1
    4404:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    4408:	90 93 58 08 	sts	0x0858, r25
    440c:	80 93 57 08 	sts	0x0857, r24
		return c;
    4410:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    4412:	c9 01       	movw	r24, r18
    4414:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    4416:	2f ef       	ldi	r18, 0xFF	; 255
    4418:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    441a:	c9 01       	movw	r24, r18
    441c:	08 95       	ret

0000441e <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    441e:	80 91 57 08 	lds	r24, 0x0857
    4422:	90 91 58 08 	lds	r25, 0x0858
    4426:	90 93 56 08 	sts	0x0856, r25
    442a:	80 93 55 08 	sts	0x0855, r24
}
    442e:	08 95       	ret

00004430 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    4430:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4432:	80 91 c0 00 	lds	r24, 0x00C0
    4436:	85 ff       	sbrs	r24, 5
    4438:	fc cf       	rjmp	.-8      	; 0x4432 <printByte+0x2>
		;
	UDR0 = c;
    443a:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    443e:	08 95       	ret

00004440 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    4440:	fc 01       	movw	r30, r24
	while (*s)
    4442:	90 81       	ld	r25, Z
    4444:	99 23       	and	r25, r25
    4446:	51 f0       	breq	.+20     	; 0x445c <printString+0x1c>
		printByte(*s++);
    4448:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    444a:	80 91 c0 00 	lds	r24, 0x00C0
    444e:	85 ff       	sbrs	r24, 5
    4450:	fc cf       	rjmp	.-8      	; 0x444a <printString+0xa>
		;
	UDR0 = c;
    4452:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    4456:	90 81       	ld	r25, Z
    4458:	99 23       	and	r25, r25
    445a:	b1 f7       	brne	.-20     	; 0x4448 <printString+0x8>
    445c:	08 95       	ret

0000445e <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    445e:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    4460:	94 91       	lpm	r25, Z+
    4462:	99 23       	and	r25, r25
    4464:	51 f0       	breq	.+20     	; 0x447a <printPgmString+0x1c>
    4466:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4468:	80 91 c0 00 	lds	r24, 0x00C0
    446c:	85 ff       	sbrs	r24, 5
    446e:	fc cf       	rjmp	.-8      	; 0x4468 <printPgmString+0xa>
		;
	UDR0 = c;
    4470:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    4474:	94 91       	lpm	r25, Z+
    4476:	99 23       	and	r25, r25
    4478:	b1 f7       	brne	.-20     	; 0x4466 <printPgmString+0x8>
    447a:	08 95       	ret

0000447c <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    447c:	2f 92       	push	r2
    447e:	3f 92       	push	r3
    4480:	4f 92       	push	r4
    4482:	5f 92       	push	r5
    4484:	6f 92       	push	r6
    4486:	7f 92       	push	r7
    4488:	8f 92       	push	r8
    448a:	9f 92       	push	r9
    448c:	af 92       	push	r10
    448e:	bf 92       	push	r11
    4490:	cf 92       	push	r12
    4492:	df 92       	push	r13
    4494:	ef 92       	push	r14
    4496:	ff 92       	push	r15
    4498:	0f 93       	push	r16
    449a:	1f 93       	push	r17
    449c:	df 93       	push	r29
    449e:	cf 93       	push	r28
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	a0 97       	sbiw	r28, 0x20	; 32
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	6b 01       	movw	r12, r22
    44b2:	7c 01       	movw	r14, r24
    44b4:	29 01       	movw	r4, r18
    44b6:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    44b8:	61 15       	cp	r22, r1
    44ba:	71 05       	cpc	r23, r1
    44bc:	81 05       	cpc	r24, r1
    44be:	91 05       	cpc	r25, r1
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <printIntegerInBase+0x48>
    44c2:	50 c0       	rjmp	.+160    	; 0x4564 <printIntegerInBase+0xe8>
		printByte('0');
		return;
    44c4:	88 24       	eor	r8, r8
    44c6:	99 24       	eor	r9, r9
    44c8:	54 01       	movw	r10, r8
    44ca:	1e 01       	movw	r2, r28
    44cc:	08 94       	sec
    44ce:	21 1c       	adc	r2, r1
    44d0:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    44d2:	81 01       	movw	r16, r2
    44d4:	08 0d       	add	r16, r8
    44d6:	19 1d       	adc	r17, r9
    44d8:	c7 01       	movw	r24, r14
    44da:	b6 01       	movw	r22, r12
    44dc:	a3 01       	movw	r20, r6
    44de:	92 01       	movw	r18, r4
    44e0:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    44e4:	f8 01       	movw	r30, r16
    44e6:	60 83       	st	Z, r22
    44e8:	08 94       	sec
    44ea:	81 1c       	adc	r8, r1
    44ec:	91 1c       	adc	r9, r1
    44ee:	a1 1c       	adc	r10, r1
    44f0:	b1 1c       	adc	r11, r1
		n /= base;
    44f2:	c7 01       	movw	r24, r14
    44f4:	b6 01       	movw	r22, r12
    44f6:	a3 01       	movw	r20, r6
    44f8:	92 01       	movw	r18, r4
    44fa:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    44fe:	c9 01       	movw	r24, r18
    4500:	da 01       	movw	r26, r20
    4502:	6c 01       	movw	r12, r24
    4504:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    4506:	c1 14       	cp	r12, r1
    4508:	d1 04       	cpc	r13, r1
    450a:	e1 04       	cpc	r14, r1
    450c:	f1 04       	cpc	r15, r1
    450e:	09 f7       	brne	.-62     	; 0x44d2 <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    4510:	81 14       	cp	r8, r1
    4512:	91 04       	cpc	r9, r1
    4514:	a1 04       	cpc	r10, r1
    4516:	b1 04       	cpc	r11, r1
    4518:	61 f1       	breq	.+88     	; 0x4572 <printIntegerInBase+0xf6>
    451a:	91 01       	movw	r18, r2
    451c:	28 0d       	add	r18, r8
    451e:	39 1d       	adc	r19, r9
    4520:	d5 01       	movw	r26, r10
    4522:	c4 01       	movw	r24, r8
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	a1 09       	sbc	r26, r1
    4528:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    452a:	ac 01       	movw	r20, r24
    452c:	48 19       	sub	r20, r8
    452e:	59 09       	sbc	r21, r9
    4530:	fa 01       	movw	r30, r20
    4532:	e2 0f       	add	r30, r18
    4534:	f3 1f       	adc	r31, r19
    4536:	e0 81       	ld	r30, Z
    4538:	ea 30       	cpi	r30, 0x0A	; 10
    453a:	90 f4       	brcc	.+36     	; 0x4560 <printIntegerInBase+0xe4>
    453c:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    453e:	80 91 c0 00 	lds	r24, 0x00C0
    4542:	85 ff       	sbrs	r24, 5
    4544:	fc cf       	rjmp	.-8      	; 0x453e <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    4546:	e0 93 c6 00 	sts	0x00C6, r30
    454a:	21 50       	subi	r18, 0x01	; 1
    454c:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    454e:	22 16       	cp	r2, r18
    4550:	33 06       	cpc	r3, r19
    4552:	79 f0       	breq	.+30     	; 0x4572 <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    4554:	fa 01       	movw	r30, r20
    4556:	e2 0f       	add	r30, r18
    4558:	f3 1f       	adc	r31, r19
    455a:	e0 81       	ld	r30, Z
    455c:	ea 30       	cpi	r30, 0x0A	; 10
    455e:	70 f3       	brcs	.-36     	; 0x453c <printIntegerInBase+0xc0>
    4560:	e9 5c       	subi	r30, 0xC9	; 201
    4562:	ed cf       	rjmp	.-38     	; 0x453e <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4564:	80 91 c0 00 	lds	r24, 0x00C0
    4568:	85 ff       	sbrs	r24, 5
    456a:	fc cf       	rjmp	.-8      	; 0x4564 <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    456c:	80 e3       	ldi	r24, 0x30	; 48
    456e:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    4572:	a0 96       	adiw	r28, 0x20	; 32
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	cf 91       	pop	r28
    4580:	df 91       	pop	r29
    4582:	1f 91       	pop	r17
    4584:	0f 91       	pop	r16
    4586:	ff 90       	pop	r15
    4588:	ef 90       	pop	r14
    458a:	df 90       	pop	r13
    458c:	cf 90       	pop	r12
    458e:	bf 90       	pop	r11
    4590:	af 90       	pop	r10
    4592:	9f 90       	pop	r9
    4594:	8f 90       	pop	r8
    4596:	7f 90       	pop	r7
    4598:	6f 90       	pop	r6
    459a:	5f 90       	pop	r5
    459c:	4f 90       	pop	r4
    459e:	3f 90       	pop	r3
    45a0:	2f 90       	pop	r2
    45a2:	08 95       	ret

000045a4 <printInteger>:

void printInteger(long n)
{
    45a4:	9b 01       	movw	r18, r22
    45a6:	ac 01       	movw	r20, r24
	if (n < 0) {
    45a8:	97 fd       	sbrc	r25, 7
    45aa:	09 c0       	rjmp	.+18     	; 0x45be <printInteger+0x1a>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    45ac:	ca 01       	movw	r24, r20
    45ae:	b9 01       	movw	r22, r18
    45b0:	2a e0       	ldi	r18, 0x0A	; 10
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	40 e0       	ldi	r20, 0x00	; 0
    45b6:	50 e0       	ldi	r21, 0x00	; 0
    45b8:	0e 94 3e 22 	call	0x447c	; 0x447c <printIntegerInBase>
}
    45bc:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    45be:	80 91 c0 00 	lds	r24, 0x00C0
    45c2:	85 ff       	sbrs	r24, 5
    45c4:	fc cf       	rjmp	.-8      	; 0x45be <printInteger+0x1a>
		;
	UDR0 = c;
    45c6:	8d e2       	ldi	r24, 0x2D	; 45
    45c8:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    45cc:	50 95       	com	r21
    45ce:	40 95       	com	r20
    45d0:	30 95       	com	r19
    45d2:	21 95       	neg	r18
    45d4:	3f 4f       	sbci	r19, 0xFF	; 255
    45d6:	4f 4f       	sbci	r20, 0xFF	; 255
    45d8:	5f 4f       	sbci	r21, 0xFF	; 255
    45da:	e8 cf       	rjmp	.-48     	; 0x45ac <printInteger+0x8>

000045dc <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    45dc:	22 e0       	ldi	r18, 0x02	; 2
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	40 e0       	ldi	r20, 0x00	; 0
    45e2:	50 e0       	ldi	r21, 0x00	; 0
    45e4:	0e 94 3e 22 	call	0x447c	; 0x447c <printIntegerInBase>
  }
    45e8:	08 95       	ret

000045ea <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    45ea:	ef 92       	push	r14
    45ec:	ff 92       	push	r15
    45ee:	0f 93       	push	r16
    45f0:	1f 93       	push	r17
    45f2:	df 93       	push	r29
    45f4:	cf 93       	push	r28
    45f6:	00 d0       	rcall	.+0      	; 0x45f8 <printFloat+0xe>
    45f8:	0f 92       	push	r0
    45fa:	cd b7       	in	r28, 0x3d	; 61
    45fc:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    45fe:	ae 01       	movw	r20, r28
    4600:	4f 5f       	subi	r20, 0xFF	; 255
    4602:	5f 4f       	sbci	r21, 0xFF	; 255
    4604:	0e 94 26 33 	call	0x664c	; 0x664c <modf>
    4608:	7b 01       	movw	r14, r22
    460a:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    460c:	69 81       	ldd	r22, Y+1	; 0x01
    460e:	7a 81       	ldd	r23, Y+2	; 0x02
    4610:	8b 81       	ldd	r24, Y+3	; 0x03
    4612:	9c 81       	ldd	r25, Y+4	; 0x04
    4614:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    4618:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    461c:	80 91 c0 00 	lds	r24, 0x00C0
    4620:	85 ff       	sbrs	r24, 5
    4622:	fc cf       	rjmp	.-8      	; 0x461c <printFloat+0x32>
		;
	UDR0 = c;
    4624:	8e e2       	ldi	r24, 0x2E	; 46
    4626:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    462a:	c8 01       	movw	r24, r16
    462c:	b7 01       	movw	r22, r14
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	4a e7       	ldi	r20, 0x7A	; 122
    4634:	54 e4       	ldi	r21, 0x44	; 68
    4636:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    463a:	0e 94 bc 33 	call	0x6778	; 0x6778 <round>
    463e:	0e 94 90 31 	call	0x6320	; 0x6320 <__fixsfsi>
    4642:	97 fd       	sbrc	r25, 7
    4644:	0d c0       	rjmp	.+26     	; 0x4660 <printFloat+0x76>
    4646:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <printInteger>
}
    464a:	0f 90       	pop	r0
    464c:	0f 90       	pop	r0
    464e:	0f 90       	pop	r0
    4650:	0f 90       	pop	r0
    4652:	cf 91       	pop	r28
    4654:	df 91       	pop	r29
    4656:	1f 91       	pop	r17
    4658:	0f 91       	pop	r16
    465a:	ff 90       	pop	r15
    465c:	ef 90       	pop	r14
    465e:	08 95       	ret
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    4660:	90 95       	com	r25
    4662:	80 95       	com	r24
    4664:	70 95       	com	r23
    4666:	61 95       	neg	r22
    4668:	7f 4f       	sbci	r23, 0xFF	; 255
    466a:	8f 4f       	sbci	r24, 0xFF	; 255
    466c:	9f 4f       	sbci	r25, 0xFF	; 255
    466e:	eb cf       	rjmp	.-42     	; 0x4646 <printFloat+0x5c>

00004670 <__vector_25>:
	rx_buffer_head = rx_buffer_tail;
}

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    4670:	1f 92       	push	r1
    4672:	0f 92       	push	r0
    4674:	0f b6       	in	r0, 0x3f	; 63
    4676:	0f 92       	push	r0
    4678:	0b b6       	in	r0, 0x3b	; 59
    467a:	0f 92       	push	r0
    467c:	11 24       	eor	r1, r1
    467e:	2f 93       	push	r18
    4680:	3f 93       	push	r19
    4682:	4f 93       	push	r20
    4684:	5f 93       	push	r21
    4686:	6f 93       	push	r22
    4688:	7f 93       	push	r23
    468a:	8f 93       	push	r24
    468c:	9f 93       	push	r25
    468e:	af 93       	push	r26
    4690:	bf 93       	push	r27
    4692:	ef 93       	push	r30
    4694:	ff 93       	push	r31
	unsigned char c = UDR0;
    4696:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    469a:	e0 91 55 08 	lds	r30, 0x0855
    469e:	f0 91 56 08 	lds	r31, 0x0856
    46a2:	cf 01       	movw	r24, r30
    46a4:	01 96       	adiw	r24, 0x01	; 1
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	71 e0       	ldi	r23, 0x01	; 1
    46aa:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    46ae:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    46b0:	80 91 57 08 	lds	r24, 0x0857
    46b4:	90 91 58 08 	lds	r25, 0x0858
    46b8:	28 17       	cp	r18, r24
    46ba:	39 07       	cpc	r19, r25
    46bc:	39 f0       	breq	.+14     	; 0x46cc <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    46be:	e7 5a       	subi	r30, 0xA7	; 167
    46c0:	f7 4f       	sbci	r31, 0xF7	; 247
    46c2:	40 83       	st	Z, r20
		rx_buffer_head = i;
    46c4:	30 93 56 08 	sts	0x0856, r19
    46c8:	20 93 55 08 	sts	0x0855, r18
	}

	if( c == 0x0ff ) {
    46cc:	4f 3f       	cpi	r20, 0xFF	; 255
    46ce:	99 f0       	breq	.+38     	; 0x46f6 <__vector_25+0x86>
		gHomed = 0 ;
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    46d0:	ff 91       	pop	r31
    46d2:	ef 91       	pop	r30
    46d4:	bf 91       	pop	r27
    46d6:	af 91       	pop	r26
    46d8:	9f 91       	pop	r25
    46da:	8f 91       	pop	r24
    46dc:	7f 91       	pop	r23
    46de:	6f 91       	pop	r22
    46e0:	5f 91       	pop	r21
    46e2:	4f 91       	pop	r20
    46e4:	3f 91       	pop	r19
    46e6:	2f 91       	pop	r18
    46e8:	0f 90       	pop	r0
    46ea:	0b be       	out	0x3b, r0	; 59
    46ec:	0f 90       	pop	r0
    46ee:	0f be       	out	0x3f, r0	; 63
    46f0:	0f 90       	pop	r0
    46f2:	1f 90       	pop	r1
    46f4:	18 95       	reti
		rx_buffer_head = i;
	}

	if( c == 0x0ff ) {
		// shut off servo interrupt
		cli();
    46f6:	f8 94       	cli
		st_disable();
    46f8:	0e 94 07 1b 	call	0x360e	; 0x360e <st_disable>
		// not homed
		gHomed = 0 ;
    46fc:	10 92 2f 08 	sts	0x082F, r1
    4700:	e7 cf       	rjmp	.-50     	; 0x46d0 <__vector_25+0x60>

00004702 <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    4702:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    4704:	e7 e0       	ldi	r30, 0x07	; 7
    4706:	f1 e0       	ldi	r31, 0x01	; 1
    4708:	80 81       	ld	r24, Z
    470a:	81 60       	ori	r24, 0x01	; 1
    470c:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    470e:	80 81       	ld	r24, Z
    4710:	82 60       	ori	r24, 0x02	; 2
    4712:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    4714:	80 81       	ld	r24, Z
    4716:	84 60       	ori	r24, 0x04	; 4
    4718:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    471a:	80 81       	ld	r24, Z
    471c:	88 60       	ori	r24, 0x08	; 8
    471e:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    4720:	80 81       	ld	r24, Z
    4722:	80 64       	ori	r24, 0x40	; 64
    4724:	80 83       	st	Z, r24

// initialise PORT as well

}
    4726:	08 95       	ret

00004728 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	08 95       	ret

0000472c <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    4732:	80 91 2f 08 	lds	r24, 0x082F
    4736:	88 23       	and	r24, r24
    4738:	19 f4       	brne	.+6      	; 0x4740 <atc_fire+0x14>
	_delay_ms( 100 );


// don't turn off busy flag

}
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	08 95       	ret
		return ;
	}


#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
    4740:	88 e8       	ldi	r24, 0x88	; 136
    4742:	98 e0       	ldi	r25, 0x08	; 8
    4744:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

	set_busy( TRUE ) ;
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    474e:	20 97       	sbiw	r28, 0x00	; 0
    4750:	29 f1       	breq	.+74     	; 0x479c <atc_fire+0x70>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    4752:	80 91 08 01 	lds	r24, 0x0108
    4756:	81 60       	ori	r24, 0x01	; 1
    4758:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    475c:	c3 30       	cpi	r28, 0x03	; 3
    475e:	d1 05       	cpc	r29, r1
    4760:	09 f4       	brne	.+2      	; 0x4764 <atc_fire+0x38>
    4762:	4a c0       	rjmp	.+148    	; 0x47f8 <atc_fire+0xcc>
    4764:	c4 30       	cpi	r28, 0x04	; 4
    4766:	d1 05       	cpc	r29, r1
    4768:	ac f5       	brge	.+106    	; 0x47d4 <atc_fire+0xa8>
    476a:	c1 30       	cpi	r28, 0x01	; 1
    476c:	d1 05       	cpc	r29, r1
    476e:	09 f4       	brne	.+2      	; 0x4772 <atc_fire+0x46>
    4770:	71 c0       	rjmp	.+226    	; 0x4854 <atc_fire+0x128>
    4772:	22 97       	sbiw	r28, 0x02	; 2
    4774:	09 f4       	brne	.+2      	; 0x4778 <atc_fire+0x4c>
    4776:	6a c0       	rjmp	.+212    	; 0x484c <atc_fire+0x120>
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    4778:	80 91 08 01 	lds	r24, 0x0108
    477c:	8e 7f       	andi	r24, 0xFE	; 254
    477e:	80 93 08 01 	sts	0x0108, r24
    4782:	28 ee       	ldi	r18, 0xE8	; 232
    4784:	33 e0       	ldi	r19, 0x03	; 3
    4786:	40 e9       	ldi	r20, 0x90	; 144
    4788:	51 e0       	ldi	r21, 0x01	; 1
    478a:	ca 01       	movw	r24, r20
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <atc_fire+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4790:	21 50       	subi	r18, 0x01	; 1
    4792:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4794:	d1 f7       	brne	.-12     	; 0x478a <atc_fire+0x5e>
	_delay_ms( 100 );


// don't turn off busy flag

}
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	08 95       	ret

	// turn off toolchanger
	if( tool == 0 ) {

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
    479c:	8d e7       	ldi	r24, 0x7D	; 125
    479e:	98 e0       	ldi	r25, 0x08	; 8
    47a0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    47a4:	80 91 08 01 	lds	r24, 0x0108
    47a8:	81 60       	ori	r24, 0x01	; 1
    47aa:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    47ae:	80 91 08 01 	lds	r24, 0x0108
    47b2:	82 60       	ori	r24, 0x02	; 2
    47b4:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    47b8:	80 91 08 01 	lds	r24, 0x0108
    47bc:	84 60       	ori	r24, 0x04	; 4
    47be:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    47c2:	80 91 08 01 	lds	r24, 0x0108
    47c6:	88 60       	ori	r24, 0x08	; 8
    47c8:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>
    47d2:	b3 cf       	rjmp	.-154    	; 0x473a <atc_fire+0xe>
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    47d4:	c5 30       	cpi	r28, 0x05	; 5
    47d6:	d1 05       	cpc	r29, r1
    47d8:	09 f4       	brne	.+2      	; 0x47dc <atc_fire+0xb0>
    47da:	45 c0       	rjmp	.+138    	; 0x4866 <atc_fire+0x13a>
    47dc:	c5 30       	cpi	r28, 0x05	; 5
    47de:	d1 05       	cpc	r29, r1
    47e0:	04 f1       	brlt	.+64     	; 0x4822 <atc_fire+0xf6>
    47e2:	26 97       	sbiw	r28, 0x06	; 6
    47e4:	49 f6       	brne	.-110    	; 0x4778 <atc_fire+0x4c>
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    47e6:	80 91 08 01 	lds	r24, 0x0108
    47ea:	82 60       	ori	r24, 0x02	; 2
    47ec:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    47f0:	80 91 08 01 	lds	r24, 0x0108
    47f4:	8b 7f       	andi	r24, 0xFB	; 251
    47f6:	1d c0       	rjmp	.+58     	; 0x4832 <atc_fire+0x106>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    47f8:	80 91 08 01 	lds	r24, 0x0108
    47fc:	8d 7f       	andi	r24, 0xFD	; 253
    47fe:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    4802:	80 91 08 01 	lds	r24, 0x0108
    4806:	84 60       	ori	r24, 0x04	; 4
    4808:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    480c:	80 91 08 01 	lds	r24, 0x0108
    4810:	87 7f       	andi	r24, 0xF7	; 247
    4812:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    4816:	80 91 08 01 	lds	r24, 0x0108
    481a:	8e 7f       	andi	r24, 0xFE	; 254
    481c:	80 93 08 01 	sts	0x0108, r24
    4820:	ab cf       	rjmp	.-170    	; 0x4778 <atc_fire+0x4c>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    4822:	80 91 08 01 	lds	r24, 0x0108
    4826:	8d 7f       	andi	r24, 0xFD	; 253
    4828:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    482c:	80 91 08 01 	lds	r24, 0x0108
    4830:	84 60       	ori	r24, 0x04	; 4
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    4832:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    4836:	80 91 08 01 	lds	r24, 0x0108
    483a:	88 60       	ori	r24, 0x08	; 8
    483c:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    4840:	80 91 08 01 	lds	r24, 0x0108
    4844:	8e 7f       	andi	r24, 0xFE	; 254
    4846:	80 93 08 01 	sts	0x0108, r24
    484a:	96 cf       	rjmp	.-212    	; 0x4778 <atc_fire+0x4c>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    484c:	80 91 08 01 	lds	r24, 0x0108
    4850:	8d 7f       	andi	r24, 0xFD	; 253
    4852:	cc cf       	rjmp	.-104    	; 0x47ec <atc_fire+0xc0>
 */
 	switch( tool ) {
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    4854:	80 91 08 01 	lds	r24, 0x0108
    4858:	8d 7f       	andi	r24, 0xFD	; 253
    485a:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    485e:	80 91 08 01 	lds	r24, 0x0108
    4862:	8b 7f       	andi	r24, 0xFB	; 251
    4864:	d1 cf       	rjmp	.-94     	; 0x4808 <atc_fire+0xdc>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    4866:	80 91 08 01 	lds	r24, 0x0108
    486a:	82 60       	ori	r24, 0x02	; 2
    486c:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    4870:	80 91 08 01 	lds	r24, 0x0108
    4874:	8b 7f       	andi	r24, 0xFB	; 251
    4876:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    487a:	80 91 08 01 	lds	r24, 0x0108
    487e:	87 7f       	andi	r24, 0xF7	; 247
    4880:	80 93 08 01 	sts	0x0108, r24
    4884:	79 cf       	rjmp	.-270    	; 0x4778 <atc_fire+0x4c>

00004886 <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    4886:	1f 93       	push	r17
    4888:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    488a:	80 91 2f 08 	lds	r24, 0x082F
    488e:	88 23       	and	r24, r24
    4890:	19 f4       	brne	.+6      	; 0x4898 <DropTool+0x12>
    4892:	83 e6       	ldi	r24, 0x63	; 99
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    4894:	1f 91       	pop	r17
    4896:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    48a0:	88 23       	and	r24, r24
    48a2:	19 f4       	brne	.+6      	; 0x48aa <DropTool+0x24>
    48a4:	85 e0       	ldi	r24, 0x05	; 5
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    48a6:	1f 91       	pop	r17
    48a8:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    48aa:	81 2f       	mov	r24, r17
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	0e 94 96 23 	call	0x472c	; 0x472c <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    48b2:	80 e0       	ldi	r24, 0x00	; 0
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	0e 94 96 23 	call	0x472c	; 0x472c <atc_fire>

	// head back up
	head_down( 0 );
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    48c2:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    48c4:	1f 91       	pop	r17
    48c6:	08 95       	ret

000048c8 <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    48c8:	1f 93       	push	r17
    48ca:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    48cc:	80 91 2f 08 	lds	r24, 0x082F
    48d0:	88 23       	and	r24, r24
    48d2:	19 f4       	brne	.+6      	; 0x48da <PickupTool+0x12>
    48d4:	83 e6       	ldi	r24, 0x63	; 99
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    48d6:	1f 91       	pop	r17
    48d8:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    48e2:	88 23       	and	r24, r24
    48e4:	19 f4       	brne	.+6      	; 0x48ec <PickupTool+0x24>
    48e6:	85 e0       	ldi	r24, 0x05	; 5
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    48e8:	1f 91       	pop	r17
    48ea:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    48ec:	81 2f       	mov	r24, r17
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>

	// head back up
	head_down( 0 );
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    48fc:	80 e9       	ldi	r24, 0x90	; 144
    48fe:	91 e0       	ldi	r25, 0x01	; 1
    4900:	01 97       	sbiw	r24, 0x01	; 1
    4902:	f1 f7       	brne	.-4      	; 0x4900 <PickupTool+0x38>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	0e 94 89 24 	call	0x4912	; 0x4912 <atc_change>
    490c:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    490e:	1f 91       	pop	r17
    4910:	08 95       	ret

00004912 <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    4918:	80 91 2f 08 	lds	r24, 0x082F
    491c:	88 23       	and	r24, r24
    491e:	71 f0       	breq	.+28     	; 0x493c <atc_change+0x2a>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    4920:	cf 3f       	cpi	r28, 0xFF	; 255
    4922:	d1 05       	cpc	r29, r1
    4924:	39 f0       	breq	.+14     	; 0x4934 <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    4926:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <run_vacuum_test>
    492a:	88 23       	and	r24, r24
    492c:	59 f0       	breq	.+22     	; 0x4944 <atc_change+0x32>
		PickupTool(tool);
	} else { 
		DropTool(tool);
    492e:	8c 2f       	mov	r24, r28
    4930:	0e 94 43 24 	call	0x4886	; 0x4886 <DropTool>
    4934:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	08 95       	ret

*/

unsigned char atc_change(int tool)
{
	if( gHomed == FALSE  ){ 
    493c:	83 e6       	ldi	r24, 0x63	; 99
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    493e:	df 91       	pop	r29
    4940:	cf 91       	pop	r28
    4942:	08 95       	ret
	if( tool == toolId ) {
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
		PickupTool(tool);
    4944:	8c 2f       	mov	r24, r28
    4946:	0e 94 64 24 	call	0x48c8	; 0x48c8 <PickupTool>
    494a:	80 e0       	ldi	r24, 0x00	; 0
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    494c:	df 91       	pop	r29
    494e:	cf 91       	pop	r28
    4950:	08 95       	ret

00004952 <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    4952:	80 91 2f 08 	lds	r24, 0x082F
    4956:	88 23       	and	r24, r24
    4958:	11 f4       	brne	.+4      	; 0x495e <check_for_tool+0xc>
    495a:	83 e6       	ldi	r24, 0x63	; 99
    495c:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    495e:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    4962:	88 23       	and	r24, r24
    4964:	a1 f4       	brne	.+40     	; 0x498e <check_for_tool+0x3c>
		head_down( FALSE) ;
	}

	goto_vacpad();
    4966:	0e 94 65 26 	call	0x4cca	; 0x4cca <goto_vacpad>
	
	head_down(TRUE);
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
	
	vacuum(TRUE);
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>

	if( vacuum_state() == TRUE )  {
    497a:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <vacuum_state>
    497e:	81 30       	cpi	r24, 0x01	; 1
    4980:	59 f0       	breq	.+22     	; 0x4998 <check_for_tool+0x46>
		head_down( FALSE) ;
		return TRUE;
	} else {
		head_down( FALSE) ;
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    498a:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    498c:	08 95       	ret
	}


	//move head up
	if( is_head_down() ) {
		head_down( FALSE) ;
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4996:	e7 cf       	rjmp	.-50     	; 0x4966 <check_for_tool+0x14>
	head_down(TRUE);
	
	vacuum(TRUE);

	if( vacuum_state() == TRUE )  {
		head_down( FALSE) ;
    4998:	80 e0       	ldi	r24, 0x00	; 0
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	08 95       	ret

000049a4 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    49a4:	ea e0       	ldi	r30, 0x0A	; 10
    49a6:	f1 e0       	ldi	r31, 0x01	; 1
    49a8:	80 81       	ld	r24, Z
    49aa:	80 62       	ori	r24, 0x20	; 32
    49ac:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    49ae:	eb e0       	ldi	r30, 0x0B	; 11
    49b0:	f1 e0       	ldi	r31, 0x01	; 1
    49b2:	80 81       	ld	r24, Z
    49b4:	80 62       	ori	r24, 0x20	; 32
    49b6:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    49b8:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    49ba:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    49bc:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    49be:	41 9a       	sbi	0x08, 1	; 8
}
    49c0:	08 95       	ret

000049c2 <is_head_down>:
	return simulate_head_state;
#else

	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    49c2:	86 b1       	in	r24, 0x06	; 6

	return state;

#endif
}
    49c4:	81 70       	andi	r24, 0x01	; 1
    49c6:	08 95       	ret

000049c8 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    49c8:	86 b1       	in	r24, 0x06	; 6
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	96 95       	lsr	r25
    49ce:	87 95       	ror	r24

	return state;
}
    49d0:	81 70       	andi	r24, 0x01	; 1
    49d2:	08 95       	ret

000049d4 <head_down>:
#ifdef SIMULATE
static unsigned char simulate_head_state = 0;
#endif

char head_down(int state)
{
    49d4:	cf 93       	push	r28
    49d6:	df 93       	push	r29
    49d8:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    49da:	80 91 2f 08 	lds	r24, 0x082F
    49de:	88 23       	and	r24, r24
    49e0:	39 f1       	breq	.+78     	; 0x4a30 <head_down+0x5c>
		return 0;
	}

	// wait til head stops
	while( head_moving() );
    49e2:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    49e6:	88 23       	and	r24, r24
    49e8:	e1 f7       	brne	.-8      	; 0x49e2 <head_down+0xe>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
    49ea:	87 ea       	ldi	r24, 0xA7	; 167
    49ec:	98 e0       	ldi	r25, 0x08	; 8
    49ee:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

	set_busy( TRUE );
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>

// head down mode
  if( state == 0 ) {
    49f8:	20 97       	sbiw	r28, 0x00	; 0
    49fa:	e9 f0       	breq	.+58     	; 0x4a36 <head_down+0x62>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    49fc:	80 91 0b 01 	lds	r24, 0x010B
    4a00:	8f 7d       	andi	r24, 0xDF	; 223
    4a02:	80 93 0b 01 	sts	0x010B, r24
    4a06:	20 ed       	ldi	r18, 0xD0	; 208
    4a08:	37 e0       	ldi	r19, 0x07	; 7
    4a0a:	40 e9       	ldi	r20, 0x90	; 144
    4a0c:	51 e0       	ldi	r21, 0x01	; 1
    4a0e:	ca 01       	movw	r24, r20
    4a10:	01 97       	sbiw	r24, 0x01	; 1
    4a12:	f1 f7       	brne	.-4      	; 0x4a10 <head_down+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a14:	21 50       	subi	r18, 0x01	; 1
    4a16:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a18:	d1 f7       	brne	.-12     	; 0x4a0e <head_down+0x3a>
	return simulate_head_state;
#else

	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    4a1a:	86 b1       	in	r24, 0x06	; 6

#ifdef SIMULATE
	simulate_head_state = state;
#endif

  if(is_head_down() != state ) {
    4a1c:	81 70       	andi	r24, 0x01	; 1
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	8c 17       	cp	r24, r28
    4a22:	9d 07       	cpc	r25, r29
    4a24:	81 f0       	breq	.+32     	; 0x4a46 <head_down+0x72>

	  printPgmString(PSTR("Head down error\n\r"));
    4a26:	85 e9       	ldi	r24, 0x95	; 149
    4a28:	98 e0       	ldi	r25, 0x08	; 8
    4a2a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
  }

 	set_busy( FALSE );

	return 1;
}
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	08 95       	ret
	set_busy( TRUE );

// head down mode
  if( state == 0 ) {

	HEAD_PORT |= _BV( HEAD );
    4a36:	80 91 0b 01 	lds	r24, 0x010B
    4a3a:	80 62       	ori	r24, 0x20	; 32
    4a3c:	80 93 0b 01 	sts	0x010B, r24
    4a40:	20 ed       	ldi	r18, 0xD0	; 208
    4a42:	37 e0       	ldi	r19, 0x07	; 7
    4a44:	e2 cf       	rjmp	.-60     	; 0x4a0a <head_down+0x36>
	  printPgmString(PSTR("Head down error\n\r"));
	  
	  return 0;
  }

 	set_busy( FALSE );
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>
    4a4c:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    4a4e:	df 91       	pop	r29
    4a50:	cf 91       	pop	r28
    4a52:	08 95       	ret

00004a54 <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    4a54:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    4a56:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    4a58:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    4a5a:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    4a5c:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    4a5e:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    4a60:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    4a62:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    4a64:	a4 e0       	ldi	r26, 0x04	; 4
    4a66:	b1 e0       	ldi	r27, 0x01	; 1
    4a68:	8c 91       	ld	r24, X
    4a6a:	8e 7f       	andi	r24, 0xFE	; 254
    4a6c:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    4a6e:	e5 e0       	ldi	r30, 0x05	; 5
    4a70:	f1 e0       	ldi	r31, 0x01	; 1
    4a72:	80 81       	ld	r24, Z
    4a74:	81 60       	ori	r24, 0x01	; 1
    4a76:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    4a78:	8c 91       	ld	r24, X
    4a7a:	8f 7e       	andi	r24, 0xEF	; 239
    4a7c:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    4a7e:	80 81       	ld	r24, Z
    4a80:	80 61       	ori	r24, 0x10	; 16
    4a82:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    4a84:	a1 e0       	ldi	r26, 0x01	; 1
    4a86:	b1 e0       	ldi	r27, 0x01	; 1
    4a88:	8c 91       	ld	r24, X
    4a8a:	8e 7f       	andi	r24, 0xFE	; 254
    4a8c:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    4a8e:	e2 e0       	ldi	r30, 0x02	; 2
    4a90:	f1 e0       	ldi	r31, 0x01	; 1
    4a92:	80 81       	ld	r24, Z
    4a94:	81 60       	ori	r24, 0x01	; 1
    4a96:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    4a98:	8c 91       	ld	r24, X
    4a9a:	8d 7f       	andi	r24, 0xFD	; 253
    4a9c:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    4a9e:	80 81       	ld	r24, Z
    4aa0:	82 60       	ori	r24, 0x02	; 2
    4aa2:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    4aa4:	e0 e9       	ldi	r30, 0x90	; 144
    4aa6:	f0 e0       	ldi	r31, 0x00	; 0
    4aa8:	80 81       	ld	r24, Z
    4aaa:	82 60       	ori	r24, 0x02	; 2
    4aac:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    4aae:	8c e7       	ldi	r24, 0x7C	; 124
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	90 93 99 00 	sts	0x0099, r25
    4ab6:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    4aba:	10 92 95 00 	sts	0x0095, r1
    4abe:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    4ac2:	84 e0       	ldi	r24, 0x04	; 4
    4ac4:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    4ac8:	e1 e7       	ldi	r30, 0x71	; 113
    4aca:	f0 e0       	ldi	r31, 0x00	; 0
    4acc:	80 81       	ld	r24, Z
    4ace:	82 60       	ori	r24, 0x02	; 2
    4ad0:	80 83       	st	Z, r24

}
    4ad2:	08 95       	ret

00004ad4 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    4ad4:	8c b1       	in	r24, 0x0c	; 12
    4ad6:	82 95       	swap	r24
    4ad8:	86 95       	lsr	r24
    4ada:	87 70       	andi	r24, 0x07	; 7
    4adc:	80 95       	com	r24

	return state;
}
    4ade:	81 70       	andi	r24, 0x01	; 1
    4ae0:	08 95       	ret

00004ae2 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    4ae2:	82 b3       	in	r24, 0x12	; 18
    4ae4:	82 95       	swap	r24
    4ae6:	86 95       	lsr	r24
    4ae8:	87 70       	andi	r24, 0x07	; 7
    4aea:	80 95       	com	r24

	return state;
}
    4aec:	81 70       	andi	r24, 0x01	; 1
    4aee:	08 95       	ret

00004af0 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    4af0:	8c b1       	in	r24, 0x0c	; 12
    4af2:	82 95       	swap	r24
    4af4:	8f 70       	andi	r24, 0x0F	; 15
    4af6:	80 95       	com	r24

	return state;
}
    4af8:	81 70       	andi	r24, 0x01	; 1
    4afa:	08 95       	ret

00004afc <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    4afc:	80 91 03 01 	lds	r24, 0x0103
    4b00:	86 95       	lsr	r24
    4b02:	80 95       	com	r24

	return state;
}
    4b04:	81 70       	andi	r24, 0x01	; 1
    4b06:	08 95       	ret

00004b08 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    4b08:	86 b1       	in	r24, 0x06	; 6
    4b0a:	82 95       	swap	r24
    4b0c:	8f 70       	andi	r24, 0x0F	; 15
    4b0e:	80 95       	com	r24

	return state;
}
    4b10:	81 70       	andi	r24, 0x01	; 1
    4b12:	08 95       	ret

00004b14 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    4b14:	80 91 00 01 	lds	r24, 0x0100
    4b18:	80 95       	com	r24

	return state;
}
    4b1a:	81 70       	andi	r24, 0x01	; 1
    4b1c:	08 95       	ret

00004b1e <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    4b1e:	80 91 03 01 	lds	r24, 0x0103
    4b22:	80 95       	com	r24

	return state;
}
    4b24:	81 70       	andi	r24, 0x01	; 1
    4b26:	08 95       	ret

00004b28 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    4b28:	83 b1       	in	r24, 0x03	; 3
    4b2a:	82 95       	swap	r24
    4b2c:	86 95       	lsr	r24
    4b2e:	87 70       	andi	r24, 0x07	; 7
    4b30:	80 95       	com	r24

	return state;
}
    4b32:	81 70       	andi	r24, 0x01	; 1
    4b34:	08 95       	ret

00004b36 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    4b36:	80 91 00 01 	lds	r24, 0x0100
    4b3a:	86 95       	lsr	r24
    4b3c:	80 95       	com	r24

	return state;
}
    4b3e:	81 70       	andi	r24, 0x01	; 1
    4b40:	08 95       	ret

00004b42 <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    4b42:	1f 92       	push	r1
    4b44:	0f 92       	push	r0
    4b46:	0f b6       	in	r0, 0x3f	; 63
    4b48:	0f 92       	push	r0
    4b4a:	11 24       	eor	r1, r1
	return;
}
    4b4c:	0f 90       	pop	r0
    4b4e:	0f be       	out	0x3f, r0	; 63
    4b50:	0f 90       	pop	r0
    4b52:	1f 90       	pop	r1
    4b54:	18 95       	reti

00004b56 <process_panel>:
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    4b56:	1d 9b       	sbis	0x03, 5	; 3
    4b58:	20 c0       	rjmp	.+64     	; 0x4b9a <process_panel+0x44>

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    4b5a:	80 91 00 01 	lds	r24, 0x0100
    4b5e:	80 ff       	sbrs	r24, 0
    4b60:	0b c0       	rjmp	.+22     	; 0x4b78 <process_panel+0x22>
	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
    4b62:	80 91 5a 09 	lds	r24, 0x095A
    4b66:	81 30       	cpi	r24, 0x01	; 1
    4b68:	d9 f0       	breq	.+54     	; 0x4ba0 <process_panel+0x4a>
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    4b6a:	34 9b       	sbis	0x06, 4	; 6
    4b6c:	0e c0       	rjmp	.+28     	; 0x4b8a <process_panel+0x34>
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
    4b6e:	80 91 59 09 	lds	r24, 0x0959
    4b72:	81 30       	cpi	r24, 0x01	; 1
    4b74:	e1 f0       	breq	.+56     	; 0x4bae <process_panel+0x58>
    4b76:	08 95       	ret
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	80 93 5a 09 	sts	0x095A, r24
		vacuum(1);
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
	} else if(bvac == 1 ) {
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    4b86:	34 99       	sbic	0x06, 4	; 6
    4b88:	f2 cf       	rjmp	.-28     	; 0x4b6e <process_panel+0x18>
		bhead = 1;
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	80 93 59 09 	sts	0x0959, r24
		head_down(1);
    4b90:	81 e0       	ldi	r24, 0x01	; 1
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4b98:	08 95       	ret
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    4b9a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <mc_go_home>
    4b9e:	dd cf       	rjmp	.-70     	; 0x4b5a <process_panel+0x4>

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
		bvac = 0;
    4ba0:	10 92 5a 09 	sts	0x095A, r1
		vacuum(0);
    4ba4:	80 e0       	ldi	r24, 0x00	; 0
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
    4bac:	de cf       	rjmp	.-68     	; 0x4b6a <process_panel+0x14>

	if( is_phead() ) {
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
		bhead = 0;
    4bae:	10 92 59 09 	sts	0x0959, r1
		head_down(0);
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4bba:	08 95       	ret

00004bbc <vacuum_init>:
#include "stepper.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    4bbc:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    4bbe:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    4bc0:	ea e0       	ldi	r30, 0x0A	; 10
    4bc2:	f1 e0       	ldi	r31, 0x01	; 1
    4bc4:	80 81       	ld	r24, Z
    4bc6:	80 61       	ori	r24, 0x10	; 16
    4bc8:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    4bca:	eb e0       	ldi	r30, 0x0B	; 11
    4bcc:	f1 e0       	ldi	r31, 0x01	; 1
    4bce:	80 81       	ld	r24, Z
    4bd0:	80 61       	ori	r24, 0x10	; 16
    4bd2:	80 83       	st	Z, r24

}
    4bd4:	08 95       	ret

00004bd6 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    4bd6:	89 b1       	in	r24, 0x09	; 9
    4bd8:	80 95       	com	r24

	return state;
}
    4bda:	88 1f       	adc	r24, r24
    4bdc:	88 27       	eor	r24, r24
    4bde:	88 1f       	adc	r24, r24
    4be0:	08 95       	ret

00004be2 <vacuum_test>:


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    4be2:	4f 99       	sbic	0x09, 7	; 9
    4be4:	05 c0       	rjmp	.+10     	; 0x4bf0 <vacuum_test+0xe>
		
		printPgmString(PSTR("yes\n"));
    4be6:	82 ea       	ldi	r24, 0xA2	; 162
    4be8:	9a e0       	ldi	r25, 0x0A	; 10
    4bea:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4bee:	08 95       	ret
	} else {
		printPgmString(PSTR("no\n"));
    4bf0:	8e e9       	ldi	r24, 0x9E	; 158
    4bf2:	9a e0       	ldi	r25, 0x0A	; 10
    4bf4:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4bf8:	08 95       	ret

00004bfa <vacuum>:

}

// switches vacuum on and off
void vacuum(int state)
{
    4bfa:	cf 93       	push	r28
    4bfc:	df 93       	push	r29
    4bfe:	ec 01       	movw	r28, r24
	if( state == 1 && gHomed == FALSE ) return;
    4c00:	81 30       	cpi	r24, 0x01	; 1
    4c02:	91 05       	cpc	r25, r1
    4c04:	81 f4       	brne	.+32     	; 0x4c26 <vacuum+0x2c>
    4c06:	80 91 2f 08 	lds	r24, 0x082F
    4c0a:	88 23       	and	r24, r24
    4c0c:	09 f1       	breq	.+66     	; 0x4c50 <vacuum+0x56>


#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
    4c0e:	87 ea       	ldi	r24, 0xA7	; 167
    4c10:	9a e0       	ldi	r25, 0x0A	; 10
    4c12:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

	HEAD_PORT |= _BV( VACUUM );

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    4c16:	80 91 0b 01 	lds	r24, 0x010B
    4c1a:	8f 7e       	andi	r24, 0xEF	; 239
    4c1c:	80 93 0b 01 	sts	0x010B, r24
    4c20:	28 e8       	ldi	r18, 0x88	; 136
    4c22:	33 e1       	ldi	r19, 0x13	; 19
    4c24:	0d c0       	rjmp	.+26     	; 0x4c40 <vacuum+0x46>
{
	if( state == 1 && gHomed == FALSE ) return;


#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
    4c26:	87 ea       	ldi	r24, 0xA7	; 167
    4c28:	9a e0       	ldi	r25, 0x0A	; 10
    4c2a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

// vacuum  on / off
  if( state == 0 ) {
    4c2e:	cd 2b       	or	r28, r29
    4c30:	91 f7       	brne	.-28     	; 0x4c16 <vacuum+0x1c>

	HEAD_PORT |= _BV( VACUUM );
    4c32:	80 91 0b 01 	lds	r24, 0x010B
    4c36:	80 61       	ori	r24, 0x10	; 16
    4c38:	80 93 0b 01 	sts	0x010B, r24
    4c3c:	28 e8       	ldi	r18, 0x88	; 136
    4c3e:	33 e1       	ldi	r19, 0x13	; 19
    4c40:	40 e9       	ldi	r20, 0x90	; 144
    4c42:	51 e0       	ldi	r21, 0x01	; 1
    4c44:	ca 01       	movw	r24, r20
    4c46:	01 97       	sbiw	r24, 0x01	; 1
    4c48:	f1 f7       	brne	.-4      	; 0x4c46 <vacuum+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c4a:	21 50       	subi	r18, 0x01	; 1
    4c4c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c4e:	d1 f7       	brne	.-12     	; 0x4c44 <vacuum+0x4a>
  }

   // wait for air to get settled
   _delay_ms( AIR_SETTLE_TIME );

}
    4c50:	df 91       	pop	r29
    4c52:	cf 91       	pop	r28
    4c54:	08 95       	ret

00004c56 <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    4c56:	af 92       	push	r10
    4c58:	bf 92       	push	r11
    4c5a:	cf 92       	push	r12
    4c5c:	df 92       	push	r13
    4c5e:	ef 92       	push	r14
    4c60:	ff 92       	push	r15
    4c62:	0f 93       	push	r16
    4c64:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    4c66:	80 91 2f 08 	lds	r24, 0x082F
    4c6a:	88 23       	and	r24, r24
    4c6c:	51 f4       	brne	.+20     	; 0x4c82 <run_vacuum_test+0x2c>
    4c6e:	83 e6       	ldi	r24, 0x63	; 99
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    4c70:	1f 91       	pop	r17
    4c72:	0f 91       	pop	r16
    4c74:	ff 90       	pop	r15
    4c76:	ef 90       	pop	r14
    4c78:	df 90       	pop	r13
    4c7a:	cf 90       	pop	r12
    4c7c:	bf 90       	pop	r11
    4c7e:	af 90       	pop	r10
    4c80:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4c8a:	63 ec       	ldi	r22, 0xC3	; 195
    4c8c:	73 ed       	ldi	r23, 0xD3	; 211
    4c8e:	81 e4       	ldi	r24, 0x41	; 65
    4c90:	91 e4       	ldi	r25, 0x41	; 65
    4c92:	2a e1       	ldi	r18, 0x1A	; 26
    4c94:	3b e8       	ldi	r19, 0x8B	; 139
    4c96:	4d e9       	ldi	r20, 0x9D	; 157
    4c98:	50 e4       	ldi	r21, 0x40	; 64
    4c9a:	0f 2e       	mov	r0, r31
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	ef 2e       	mov	r14, r31
    4ca0:	f0 e0       	ldi	r31, 0x00	; 0
    4ca2:	ff 2e       	mov	r15, r31
    4ca4:	f0 e8       	ldi	r31, 0x80	; 128
    4ca6:	0f 2f       	mov	r16, r31
    4ca8:	ff eb       	ldi	r31, 0xBF	; 191
    4caa:	1f 2f       	mov	r17, r31
    4cac:	f0 2d       	mov	r31, r0
    4cae:	57 01       	movw	r10, r14
    4cb0:	68 01       	movw	r12, r16
    4cb2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    4cb6:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    4cba:	88 23       	and	r24, r24
    4cbc:	e1 f7       	brne	.-8      	; 0x4cb6 <run_vacuum_test+0x60>
    4cbe:	80 e9       	ldi	r24, 0x90	; 144
    4cc0:	91 e0       	ldi	r25, 0x01	; 1
    4cc2:	01 97       	sbiw	r24, 0x01	; 1
    4cc4:	f1 f7       	brne	.-4      	; 0x4cc2 <run_vacuum_test+0x6c>
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
    4cc8:	d3 cf       	rjmp	.-90     	; 0x4c70 <run_vacuum_test+0x1a>

00004cca <goto_vacpad>:
	return GCSTATUS_OK;

}

unsigned char goto_vacpad( void ) 
{
    4cca:	9f 92       	push	r9
    4ccc:	af 92       	push	r10
    4cce:	bf 92       	push	r11
    4cd0:	cf 92       	push	r12
    4cd2:	df 92       	push	r13
    4cd4:	ef 92       	push	r14
    4cd6:	ff 92       	push	r15
    4cd8:	0f 93       	push	r16
    4cda:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    4cdc:	80 91 2f 08 	lds	r24, 0x082F
    4ce0:	88 23       	and	r24, r24
    4ce2:	59 f4       	brne	.+22     	; 0x4cfa <goto_vacpad+0x30>
    4ce4:	83 e6       	ldi	r24, 0x63	; 99

	while( is_head_down() ) ;
	
	return GCSTATUS_OK;

}
    4ce6:	1f 91       	pop	r17
    4ce8:	0f 91       	pop	r16
    4cea:	ff 90       	pop	r15
    4cec:	ef 90       	pop	r14
    4cee:	df 90       	pop	r13
    4cf0:	cf 90       	pop	r12
    4cf2:	bf 90       	pop	r11
    4cf4:	af 90       	pop	r10
    4cf6:	9f 90       	pop	r9
    4cf8:	08 95       	ret

	if( gHomed == FALSE ) {
		return GCSTATUS_NOT_HOMED;
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
    4cfa:	84 e8       	ldi	r24, 0x84	; 132
    4cfc:	9a e0       	ldi	r25, 0x0A	; 10
    4cfe:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

	if( is_head_down() ) {
    4d02:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    4d06:	88 23       	and	r24, r24
    4d08:	09 f0       	breq	.+2      	; 0x4d0c <goto_vacpad+0x42>
    4d0a:	c7 c0       	rjmp	.+398    	; 0x4e9a <goto_vacpad+0x1d0>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4d0c:	63 ec       	ldi	r22, 0xC3	; 195
    4d0e:	73 ed       	ldi	r23, 0xD3	; 211
    4d10:	81 e4       	ldi	r24, 0x41	; 65
    4d12:	91 e4       	ldi	r25, 0x41	; 65
    4d14:	2a e1       	ldi	r18, 0x1A	; 26
    4d16:	3b e8       	ldi	r19, 0x8B	; 139
    4d18:	4d e9       	ldi	r20, 0x9D	; 157
    4d1a:	50 e4       	ldi	r21, 0x40	; 64
    4d1c:	0f 2e       	mov	r0, r31
    4d1e:	f0 e0       	ldi	r31, 0x00	; 0
    4d20:	ef 2e       	mov	r14, r31
    4d22:	f0 e0       	ldi	r31, 0x00	; 0
    4d24:	ff 2e       	mov	r15, r31
    4d26:	f0 e8       	ldi	r31, 0x80	; 128
    4d28:	0f 2f       	mov	r16, r31
    4d2a:	ff eb       	ldi	r31, 0xBF	; 191
    4d2c:	1f 2f       	mov	r17, r31
    4d2e:	f0 2d       	mov	r31, r0
    4d30:	57 01       	movw	r10, r14
    4d32:	68 01       	movw	r12, r16
    4d34:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gotoxy>

	while( head_moving() );	
    4d38:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    4d3c:	88 23       	and	r24, r24
    4d3e:	e1 f7       	brne	.-8      	; 0x4d38 <goto_vacpad+0x6e>
    4d40:	80 e9       	ldi	r24, 0x90	; 144
    4d42:	91 e0       	ldi	r25, 0x01	; 1
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	f1 f7       	brne	.-4      	; 0x4d44 <goto_vacpad+0x7a>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
    4d50:	28 e8       	ldi	r18, 0x88	; 136
    4d52:	33 e1       	ldi	r19, 0x13	; 19
    4d54:	40 e9       	ldi	r20, 0x90	; 144
    4d56:	51 e0       	ldi	r21, 0x01	; 1
    4d58:	ca 01       	movw	r24, r20
    4d5a:	01 97       	sbiw	r24, 0x01	; 1
    4d5c:	f1 f7       	brne	.-4      	; 0x4d5a <goto_vacpad+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d5e:	21 50       	subi	r18, 0x01	; 1
    4d60:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d62:	d1 f7       	brne	.-12     	; 0x4d58 <goto_vacpad+0x8e>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    4d64:	81 e0       	ldi	r24, 0x01	; 1
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4d6c:	88 23       	and	r24, r24
    4d6e:	09 f4       	brne	.+2      	; 0x4d72 <goto_vacpad+0xa8>
    4d70:	8a c0       	rjmp	.+276    	; 0x4e86 <goto_vacpad+0x1bc>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4d72:	20 e1       	ldi	r18, 0x10	; 16
    4d74:	37 e2       	ldi	r19, 0x27	; 39
    4d76:	40 e9       	ldi	r20, 0x90	; 144
    4d78:	51 e0       	ldi	r21, 0x01	; 1
    4d7a:	ca 01       	movw	r24, r20
    4d7c:	01 97       	sbiw	r24, 0x01	; 1
    4d7e:	f1 f7       	brne	.-4      	; 0x4d7c <goto_vacpad+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d80:	21 50       	subi	r18, 0x01	; 1
    4d82:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d84:	d1 f7       	brne	.-12     	; 0x4d7a <goto_vacpad+0xb0>

	}

   _delay_ms( 1000 );

	if( vacuum_state() ) {
    4d86:	4f 99       	sbic	0x09, 7	; 9
    4d88:	8d c0       	rjmp	.+282    	; 0x4ea4 <goto_vacpad+0x1da>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("vacuum_test:1, dropping tool\r\n"));
    4d8a:	8e e3       	ldi	r24, 0x3E	; 62
    4d8c:	9a e0       	ldi	r25, 0x0A	; 10
    4d8e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4d92:	99 24       	eor	r9, r9
    4d94:	93 94       	inc	r9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    4d96:	80 e0       	ldi	r24, 0x00	; 0
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4da6:	88 23       	and	r24, r24
    4da8:	31 f4       	brne	.+12     	; 0x4db6 <goto_vacpad+0xec>

#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go back up\r\n"));
    4daa:	84 ef       	ldi	r24, 0xF4	; 244
    4dac:	99 e0       	ldi	r25, 0x09	; 9
    4dae:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4db2:	85 e0       	ldi	r24, 0x05	; 5
    4db4:	98 cf       	rjmp	.-208    	; 0x4ce6 <goto_vacpad+0x1c>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4db6:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    4dba:	88 23       	and	r24, r24
    4dbc:	e1 f7       	brne	.-8      	; 0x4db6 <goto_vacpad+0xec>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    4dbe:	6d e3       	ldi	r22, 0x3D	; 61
    4dc0:	7b e9       	ldi	r23, 0x9B	; 155
    4dc2:	8d e4       	ldi	r24, 0x4D	; 77
    4dc4:	91 e4       	ldi	r25, 0x41	; 65
    4dc6:	2c ed       	ldi	r18, 0xDC	; 220
    4dc8:	38 e6       	ldi	r19, 0x68	; 104
    4dca:	44 e9       	ldi	r20, 0x94	; 148
    4dcc:	50 e4       	ldi	r21, 0x40	; 64
    4dce:	0f 2e       	mov	r0, r31
    4dd0:	f0 e0       	ldi	r31, 0x00	; 0
    4dd2:	ef 2e       	mov	r14, r31
    4dd4:	f0 e0       	ldi	r31, 0x00	; 0
    4dd6:	ff 2e       	mov	r15, r31
    4dd8:	f0 e8       	ldi	r31, 0x80	; 128
    4dda:	0f 2f       	mov	r16, r31
    4ddc:	ff eb       	ldi	r31, 0xBF	; 191
    4dde:	1f 2f       	mov	r17, r31
    4de0:	f0 2d       	mov	r31, r0
    4de2:	57 01       	movw	r10, r14
    4de4:	68 01       	movw	r12, r16
    4de6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gotoxy>

	while( head_moving() );	
    4dea:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    4dee:	88 23       	and	r24, r24
    4df0:	e1 f7       	brne	.-8      	; 0x4dea <goto_vacpad+0x120>
    4df2:	80 e9       	ldi	r24, 0x90	; 144
    4df4:	91 e0       	ldi	r25, 0x01	; 1
    4df6:	01 97       	sbiw	r24, 0x01	; 1
    4df8:	f1 f7       	brne	.-4      	; 0x4df6 <goto_vacpad+0x12c>
    4dfa:	20 ea       	ldi	r18, 0xA0	; 160
    4dfc:	3f e0       	ldi	r19, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dfe:	40 e9       	ldi	r20, 0x90	; 144
    4e00:	51 e0       	ldi	r21, 0x01	; 1
    4e02:	ca 01       	movw	r24, r20
    4e04:	01 97       	sbiw	r24, 0x01	; 1
    4e06:	f1 f7       	brne	.-4      	; 0x4e04 <goto_vacpad+0x13a>
    4e08:	21 50       	subi	r18, 0x01	; 1
    4e0a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e0c:	d1 f7       	brne	.-12     	; 0x4e02 <goto_vacpad+0x138>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4e16:	88 23       	and	r24, r24
    4e18:	09 f4       	brne	.+2      	; 0x4e1c <goto_vacpad+0x152>
    4e1a:	a5 c0       	rjmp	.+330    	; 0x4f66 <goto_vacpad+0x29c>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    4e1c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    4e20:	88 23       	and	r24, r24
    4e22:	e1 f3       	breq	.-8      	; 0x4e1c <goto_vacpad+0x152>
    4e24:	20 e1       	ldi	r18, 0x10	; 16
    4e26:	37 e2       	ldi	r19, 0x27	; 39
    4e28:	40 e9       	ldi	r20, 0x90	; 144
    4e2a:	51 e0       	ldi	r21, 0x01	; 1
    4e2c:	ca 01       	movw	r24, r20
    4e2e:	01 97       	sbiw	r24, 0x01	; 1
    4e30:	f1 f7       	brne	.-4      	; 0x4e2e <goto_vacpad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e32:	21 50       	subi	r18, 0x01	; 1
    4e34:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e36:	d1 f7       	brne	.-12     	; 0x4e2c <goto_vacpad+0x162>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	0e 94 96 23 	call	0x472c	; 0x472c <atc_fire>
    4e40:	20 e4       	ldi	r18, 0x40	; 64
    4e42:	3f e1       	ldi	r19, 0x1F	; 31
    4e44:	40 e9       	ldi	r20, 0x90	; 144
    4e46:	51 e0       	ldi	r21, 0x01	; 1
    4e48:	ca 01       	movw	r24, r20
    4e4a:	01 97       	sbiw	r24, 0x01	; 1
    4e4c:	f1 f7       	brne	.-4      	; 0x4e4a <goto_vacpad+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e4e:	21 50       	subi	r18, 0x01	; 1
    4e50:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e52:	d1 f7       	brne	.-12     	; 0x4e48 <goto_vacpad+0x17e>

	//wait 
	_delay_ms( 800 );

	if( hasTool == FALSE ) {
    4e54:	99 20       	and	r9, r9
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <goto_vacpad+0x190>
    4e58:	75 c0       	rjmp	.+234    	; 0x4f44 <goto_vacpad+0x27a>

#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go \r\n"));
#endif

			return GCSTATUS_FAILED_COMMAND;	
    4e5a:	28 e8       	ldi	r18, 0x88	; 136
    4e5c:	33 e1       	ldi	r19, 0x13	; 19
    4e5e:	40 e9       	ldi	r20, 0x90	; 144
    4e60:	51 e0       	ldi	r21, 0x01	; 1
    4e62:	ca 01       	movw	r24, r20
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	f1 f7       	brne	.-4      	; 0x4e64 <goto_vacpad+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e68:	21 50       	subi	r18, 0x01	; 1
    4e6a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e6c:	d1 f7       	brne	.-12     	; 0x4e62 <goto_vacpad+0x198>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4e76:	88 23       	and	r24, r24
    4e78:	d9 f4       	brne	.+54     	; 0x4eb0 <goto_vacpad+0x1e6>

#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to up \r\n"));
    4e7a:	87 e8       	ldi	r24, 0x87	; 135
    4e7c:	99 e0       	ldi	r25, 0x09	; 9
    4e7e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4e82:	85 e0       	ldi	r24, 0x05	; 5
    4e84:	30 cf       	rjmp	.-416    	; 0x4ce6 <goto_vacpad+0x1c>
   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {

#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
    4e86:	8d e5       	ldi	r24, 0x5D	; 93
    4e88:	9a e0       	ldi	r25, 0x0A	; 10
    4e8a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

		vacuum ( 0 );
    4e8e:	80 e0       	ldi	r24, 0x00	; 0
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
    4e96:	85 e0       	ldi	r24, 0x05	; 5
    4e98:	26 cf       	rjmp	.-436    	; 0x4ce6 <goto_vacpad+0x1c>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4ea2:	34 cf       	rjmp	.-408    	; 0x4d0c <goto_vacpad+0x42>
	} else { 

		hasTool = FALSE ;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
    4ea4:	8e e1       	ldi	r24, 0x1E	; 30
    4ea6:	9a e0       	ldi	r25, 0x0A	; 10
    4ea8:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4eac:	99 24       	eor	r9, r9
    4eae:	73 cf       	rjmp	.-282    	; 0x4d96 <goto_vacpad+0xcc>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    4eb0:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    4eb4:	81 30       	cpi	r24, 0x01	; 1
    4eb6:	e1 f3       	breq	.-8      	; 0x4eb0 <goto_vacpad+0x1e6>
    4eb8:	28 e9       	ldi	r18, 0x98	; 152
    4eba:	3a e3       	ldi	r19, 0x3A	; 58
    4ebc:	40 e9       	ldi	r20, 0x90	; 144
    4ebe:	51 e0       	ldi	r21, 0x01	; 1
    4ec0:	ca 01       	movw	r24, r20
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <goto_vacpad+0x1f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec6:	21 50       	subi	r18, 0x01	; 1
    4ec8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eca:	d1 f7       	brne	.-12     	; 0x4ec0 <goto_vacpad+0x1f6>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4ecc:	63 ec       	ldi	r22, 0xC3	; 195
    4ece:	73 ed       	ldi	r23, 0xD3	; 211
    4ed0:	81 e4       	ldi	r24, 0x41	; 65
    4ed2:	91 e4       	ldi	r25, 0x41	; 65
    4ed4:	2a e1       	ldi	r18, 0x1A	; 26
    4ed6:	3b e8       	ldi	r19, 0x8B	; 139
    4ed8:	4d e9       	ldi	r20, 0x9D	; 157
    4eda:	50 e4       	ldi	r21, 0x40	; 64
    4edc:	0f 2e       	mov	r0, r31
    4ede:	f0 e0       	ldi	r31, 0x00	; 0
    4ee0:	ef 2e       	mov	r14, r31
    4ee2:	f0 e0       	ldi	r31, 0x00	; 0
    4ee4:	ff 2e       	mov	r15, r31
    4ee6:	f0 e8       	ldi	r31, 0x80	; 128
    4ee8:	0f 2f       	mov	r16, r31
    4eea:	ff eb       	ldi	r31, 0xBF	; 191
    4eec:	1f 2f       	mov	r17, r31
    4eee:	f0 2d       	mov	r31, r0
    4ef0:	57 01       	movw	r10, r14
    4ef2:	68 01       	movw	r12, r16
    4ef4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gotoxy>

	while( head_moving() );	
    4ef8:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    4efc:	88 23       	and	r24, r24
    4efe:	e1 f7       	brne	.-8      	; 0x4ef8 <goto_vacpad+0x22e>
    4f00:	80 e9       	ldi	r24, 0x90	; 144
    4f02:	91 e0       	ldi	r25, 0x01	; 1
    4f04:	01 97       	sbiw	r24, 0x01	; 1
    4f06:	f1 f7       	brne	.-4      	; 0x4f04 <goto_vacpad+0x23a>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    4f08:	81 e0       	ldi	r24, 0x01	; 1
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
    4f10:	28 e8       	ldi	r18, 0x88	; 136
    4f12:	33 e1       	ldi	r19, 0x13	; 19
    4f14:	40 e9       	ldi	r20, 0x90	; 144
    4f16:	51 e0       	ldi	r21, 0x01	; 1
    4f18:	ca 01       	movw	r24, r20
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	f1 f7       	brne	.-4      	; 0x4f1a <goto_vacpad+0x250>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f1e:	21 50       	subi	r18, 0x01	; 1
    4f20:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f22:	d1 f7       	brne	.-12     	; 0x4f18 <goto_vacpad+0x24e>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4f2c:	88 23       	and	r24, r24
    4f2e:	09 f5       	brne	.+66     	; 0x4f72 <goto_vacpad+0x2a8>

#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
    4f30:	83 e6       	ldi	r24, 0x63	; 99
    4f32:	99 e0       	ldi	r25, 0x09	; 9
    4f34:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

		vacuum ( 0 );
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
    4f40:	85 e0       	ldi	r24, 0x05	; 5
    4f42:	d1 ce       	rjmp	.-606    	; 0x4ce6 <goto_vacpad+0x1c>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	0e 94 96 23 	call	0x472c	; 0x472c <atc_fire>
		
		// head up
		if( head_down( 0 ) == 0 ) {
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4f54:	88 23       	and	r24, r24
    4f56:	09 f0       	breq	.+2      	; 0x4f5a <goto_vacpad+0x290>
    4f58:	ab cf       	rjmp	.-170    	; 0x4eb0 <goto_vacpad+0x1e6>

#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go \r\n"));
    4f5a:	8a ea       	ldi	r24, 0xAA	; 170
    4f5c:	99 e0       	ldi	r25, 0x09	; 9
    4f5e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4f62:	85 e0       	ldi	r24, 0x05	; 5
    4f64:	c0 ce       	rjmp	.-640    	; 0x4ce6 <goto_vacpad+0x1c>

//head down
	if( head_down( 1 ) == 0 ) {

#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
    4f66:	8d ec       	ldi	r24, 0xCD	; 205
    4f68:	99 e0       	ldi	r25, 0x09	; 9
    4f6a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4f6e:	85 e0       	ldi	r24, 0x05	; 5
    4f70:	ba ce       	rjmp	.-652    	; 0x4ce6 <goto_vacpad+0x1c>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4f72:	20 e1       	ldi	r18, 0x10	; 16
    4f74:	37 e2       	ldi	r19, 0x27	; 39
    4f76:	40 e9       	ldi	r20, 0x90	; 144
    4f78:	51 e0       	ldi	r21, 0x01	; 1
    4f7a:	ca 01       	movw	r24, r20
    4f7c:	01 97       	sbiw	r24, 0x01	; 1
    4f7e:	f1 f7       	brne	.-4      	; 0x4f7c <goto_vacpad+0x2b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f80:	21 50       	subi	r18, 0x01	; 1
    4f82:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f84:	d1 f7       	brne	.-12     	; 0x4f7a <goto_vacpad+0x2b0>

   _delay_ms( 1000 );


	// check vacuum
	if( vacuum_state() ) {
    4f86:	4f 99       	sbic	0x09, 7	; 9
    4f88:	14 c0       	rjmp	.+40     	; 0x4fb2 <goto_vacpad+0x2e8>

		// vacuum is blocked
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
    4f8a:	81 e4       	ldi	r24, 0x41	; 65
    4f8c:	99 e0       	ldi	r25, 0x09	; 9
    4f8e:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    4f92:	99 20       	and	r9, r9
    4f94:	c1 f0       	breq	.+48     	; 0x4fc6 <goto_vacpad+0x2fc>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup ok\r\n"));
#endif
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup failed\r\n"));
    4f96:	8b e1       	ldi	r24, 0x1B	; 27
    4f98:	99 e0       	ldi	r25, 0x09	; 9
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop ok\r\n"));
#endif
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
    4f9a:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

			head_down(0);
    4f9e:	80 e0       	ldi	r24, 0x00	; 0
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
			vacuum( 0 );
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>
    4fae:	85 e0       	ldi	r24, 0x05	; 5
    4fb0:	9a ce       	rjmp	.-716    	; 0x4ce6 <goto_vacpad+0x1c>

	} else {

		// vacuum is free (no block on test pad)
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  no blockage\r\n"));
    4fb2:	8f ef       	ldi	r24, 0xFF	; 255
    4fb4:	98 e0       	ldi	r25, 0x08	; 8
    4fb6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	98 16       	cp	r9, r24
    4fbe:	e1 f0       	breq	.+56     	; 0x4ff8 <goto_vacpad+0x32e>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop ok\r\n"));
#endif
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
    4fc0:	8d ed       	ldi	r24, 0xDD	; 221
    4fc2:	98 e0       	ldi	r25, 0x08	; 8
    4fc4:	ea cf       	rjmp	.-44     	; 0x4f9a <goto_vacpad+0x2d0>

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup ok\r\n"));
    4fc6:	80 e3       	ldi	r24, 0x30	; 48
    4fc8:	99 e0       	ldi	r25, 0x09	; 9
    4fca:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
		}

	}	

// vacuum off
	vacuum( 0 );
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    4fde:	88 23       	and	r24, r24
    4fe0:	31 f4       	brne	.+12     	; 0x4fee <goto_vacpad+0x324>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go up\r\n"));
    4fe2:	88 eb       	ldi	r24, 0xB8	; 184
    4fe4:	98 e0       	ldi	r25, 0x08	; 8
    4fe6:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    4fea:	85 e0       	ldi	r24, 0x05	; 5
    4fec:	7c ce       	rjmp	.-776    	; 0x4ce6 <goto_vacpad+0x1c>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4fee:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    4ff2:	88 23       	and	r24, r24
    4ff4:	e1 f7       	brne	.-8      	; 0x4fee <goto_vacpad+0x324>
    4ff6:	77 ce       	rjmp	.-786    	; 0x4ce6 <goto_vacpad+0x1c>
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop ok\r\n"));
    4ff8:	80 ef       	ldi	r24, 0xF0	; 240
    4ffa:	98 e0       	ldi	r25, 0x08	; 8
    4ffc:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    5000:	e6 cf       	rjmp	.-52     	; 0x4fce <goto_vacpad+0x304>

00005002 <test_mode>:
	return GCSTATUS_OK;

}

unsigned char test_mode(void)
{
    5002:	8f 92       	push	r8
    5004:	9f 92       	push	r9
    5006:	af 92       	push	r10
    5008:	bf 92       	push	r11
    500a:	cf 92       	push	r12
    500c:	df 92       	push	r13
    500e:	ef 92       	push	r14
    5010:	ff 92       	push	r15
    5012:	0f 93       	push	r16
    5014:	1f 93       	push	r17
    5016:	cf 93       	push	r28
    5018:	df 93       	push	r29
	int i;
	double x,y;

	if( gHomed == FALSE ) {
    501a:	80 91 2f 08 	lds	r24, 0x082F
    501e:	88 23       	and	r24, r24
    5020:	71 f4       	brne	.+28     	; 0x503e <test_mode+0x3c>
    5022:	83 e6       	ldi	r24, 0x63	; 99

	}

	return GCSTATUS_OK;

}
    5024:	df 91       	pop	r29
    5026:	cf 91       	pop	r28
    5028:	1f 91       	pop	r17
    502a:	0f 91       	pop	r16
    502c:	ff 90       	pop	r15
    502e:	ef 90       	pop	r14
    5030:	df 90       	pop	r13
    5032:	cf 90       	pop	r12
    5034:	bf 90       	pop	r11
    5036:	af 90       	pop	r10
    5038:	9f 90       	pop	r9
    503a:	8f 90       	pop	r8
    503c:	08 95       	ret

	if( gHomed == FALSE ) {
		return GCSTATUS_NOT_HOMED;
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
    503e:	82 e9       	ldi	r24, 0x92	; 146
    5040:	9a e0       	ldi	r25, 0x0A	; 10
    5042:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

	if( is_head_down() ) {
    5046:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    504a:	88 23       	and	r24, r24
    504c:	09 f0       	breq	.+2      	; 0x5050 <test_mode+0x4e>
    504e:	4a c0       	rjmp	.+148    	; 0x50e4 <test_mode+0xe2>
		head_down( FALSE )  ;
    5050:	88 24       	eor	r8, r8
    5052:	99 24       	eor	r9, r9
    5054:	c0 e9       	ldi	r28, 0x90	; 144
    5056:	d1 e0       	ldi	r29, 0x01	; 1
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
	
		x = rand() %12;
    5058:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <rand>
    505c:	8c 01       	movw	r16, r24
		y = rand() %14 ;
    505e:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <rand>
    5062:	6c 01       	movw	r12, r24

		gotoxy( x,y ,-1,-1) ;
    5064:	c8 01       	movw	r24, r16
    5066:	6c e0       	ldi	r22, 0x0C	; 12
    5068:	70 e0       	ldi	r23, 0x00	; 0
    506a:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    506e:	aa 27       	eor	r26, r26
    5070:	97 fd       	sbrc	r25, 7
    5072:	a0 95       	com	r26
    5074:	ba 2f       	mov	r27, r26
    5076:	bc 01       	movw	r22, r24
    5078:	cd 01       	movw	r24, r26
    507a:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    507e:	7b 01       	movw	r14, r22
    5080:	8c 01       	movw	r16, r24
    5082:	c6 01       	movw	r24, r12
    5084:	6e e0       	ldi	r22, 0x0E	; 14
    5086:	70 e0       	ldi	r23, 0x00	; 0
    5088:	0e 94 4e 34 	call	0x689c	; 0x689c <__divmodhi4>
    508c:	aa 27       	eor	r26, r26
    508e:	97 fd       	sbrc	r25, 7
    5090:	a0 95       	com	r26
    5092:	ba 2f       	mov	r27, r26
    5094:	bc 01       	movw	r22, r24
    5096:	cd 01       	movw	r24, r26
    5098:	0e 94 c3 31 	call	0x6386	; 0x6386 <__floatsisf>
    509c:	9b 01       	movw	r18, r22
    509e:	ac 01       	movw	r20, r24
    50a0:	c8 01       	movw	r24, r16
    50a2:	b7 01       	movw	r22, r14
    50a4:	0f 2e       	mov	r0, r31
    50a6:	f0 e0       	ldi	r31, 0x00	; 0
    50a8:	ef 2e       	mov	r14, r31
    50aa:	f0 e0       	ldi	r31, 0x00	; 0
    50ac:	ff 2e       	mov	r15, r31
    50ae:	f0 e8       	ldi	r31, 0x80	; 128
    50b0:	0f 2f       	mov	r16, r31
    50b2:	ff eb       	ldi	r31, 0xBF	; 191
    50b4:	1f 2f       	mov	r17, r31
    50b6:	f0 2d       	mov	r31, r0
    50b8:	57 01       	movw	r10, r14
    50ba:	68 01       	movw	r12, r16
    50bc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <gotoxy>
    50c0:	28 e8       	ldi	r18, 0x88	; 136
    50c2:	33 e1       	ldi	r19, 0x13	; 19
    50c4:	ce 01       	movw	r24, r28
    50c6:	01 97       	sbiw	r24, 0x01	; 1
    50c8:	f1 f7       	brne	.-4      	; 0x50c6 <test_mode+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ca:	21 50       	subi	r18, 0x01	; 1
    50cc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ce:	d1 f7       	brne	.-12     	; 0x50c4 <test_mode+0xc2>
	if( is_head_down() ) {
		head_down( FALSE )  ;
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
    50d0:	08 94       	sec
    50d2:	81 1c       	adc	r8, r1
    50d4:	91 1c       	adc	r9, r1
    50d6:	88 ec       	ldi	r24, 0xC8	; 200
    50d8:	88 16       	cp	r8, r24
    50da:	91 04       	cpc	r9, r1
    50dc:	09 f0       	breq	.+2      	; 0x50e0 <test_mode+0xde>
    50de:	bc cf       	rjmp	.-136    	; 0x5058 <test_mode+0x56>
    50e0:	80 e0       	ldi	r24, 0x00	; 0
    50e2:	a0 cf       	rjmp	.-192    	; 0x5024 <test_mode+0x22>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    50ec:	b1 cf       	rjmp	.-158    	; 0x5050 <test_mode+0x4e>

000050ee <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    50ee:	e7 e0       	ldi	r30, 0x07	; 7
    50f0:	f1 e0       	ldi	r31, 0x01	; 1
    50f2:	80 81       	ld	r24, Z
    50f4:	80 68       	ori	r24, 0x80	; 128
    50f6:	80 83       	st	Z, r24
}
    50f8:	08 95       	ret

000050fa <putdown_part>:
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    50fa:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    50fe:	88 23       	and	r24, r24
    5100:	09 f0       	breq	.+2      	; 0x5104 <putdown_part+0xa>
    5102:	3a c0       	rjmp	.+116    	; 0x5178 <putdown_part+0x7e>
		return GCSTATUS_FAILED_COMMAND;
	}

	// wait til head stops
	while( head_moving() );
    5104:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    5108:	88 23       	and	r24, r24
    510a:	e1 f7       	brne	.-8      	; 0x5104 <putdown_part+0xa>

	// maybe?
	while( get_busy() );
    510c:	0e 94 ef 1a 	call	0x35de	; 0x35de <get_busy>
    5110:	89 2b       	or	r24, r25
    5112:	e1 f7       	brne	.-8      	; 0x510c <putdown_part+0x12>

	set_busy( TRUE ) ;
    5114:	81 e0       	ldi	r24, 0x01	; 1
    5116:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>
    511a:	28 ee       	ldi	r18, 0xE8	; 232
    511c:	33 e0       	ldi	r19, 0x03	; 3
    511e:	40 e9       	ldi	r20, 0x90	; 144
    5120:	51 e0       	ldi	r21, 0x01	; 1
    5122:	ca 01       	movw	r24, r20
    5124:	01 97       	sbiw	r24, 0x01	; 1
    5126:	f1 f7       	brne	.-4      	; 0x5124 <putdown_part+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5128:	21 50       	subi	r18, 0x01	; 1
    512a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    512c:	d1 f7       	brne	.-12     	; 0x5122 <putdown_part+0x28>
	}

#endif

	// push head down
	head_down( 1 );
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    5136:	24 ef       	ldi	r18, 0xF4	; 244
    5138:	31 e0       	ldi	r19, 0x01	; 1
    513a:	40 e9       	ldi	r20, 0x90	; 144
    513c:	51 e0       	ldi	r21, 0x01	; 1
    513e:	ca 01       	movw	r24, r20
    5140:	01 97       	sbiw	r24, 0x01	; 1
    5142:	f1 f7       	brne	.-4      	; 0x5140 <putdown_part+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5144:	21 50       	subi	r18, 0x01	; 1
    5146:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5148:	d1 f7       	brne	.-12     	; 0x513e <putdown_part+0x44>

	// settle after head down ( probably doesn't need it  )
	_delay_ms( 50 );

	// vacuum off
	vacuum ( 0 );
    514a:	80 e0       	ldi	r24, 0x00	; 0
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>

	// head up
	head_down ( 0 ) ;
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    515a:	28 ee       	ldi	r18, 0xE8	; 232
    515c:	33 e0       	ldi	r19, 0x03	; 3
    515e:	40 e9       	ldi	r20, 0x90	; 144
    5160:	51 e0       	ldi	r21, 0x01	; 1
    5162:	ca 01       	movw	r24, r20
    5164:	01 97       	sbiw	r24, 0x01	; 1
    5166:	f1 f7       	brne	.-4      	; 0x5164 <putdown_part+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5168:	21 50       	subi	r18, 0x01	; 1
    516a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    516c:	d1 f7       	brne	.-12     	; 0x5162 <putdown_part+0x68>

	_delay_ms( 100 );

	set_busy( FALSE) ;
    516e:	80 e0       	ldi	r24, 0x00	; 0
    5170:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>
    5174:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    5176:	08 95       	ret
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    5178:	85 e0       	ldi	r24, 0x05	; 5
    517a:	08 95       	ret

0000517c <tape_knock>:
// some of the feeders are really slow
void tape_knock( void )
{

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
    517c:	87 eb       	ldi	r24, 0xB7	; 183
    517e:	9a e0       	ldi	r25, 0x0A	; 10
    5180:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
#endif

	if( gHomed == FALSE ) {
    5184:	80 91 2f 08 	lds	r24, 0x082F
    5188:	88 23       	and	r24, r24
    518a:	41 f1       	breq	.+80     	; 0x51dc <tape_knock+0x60>
   		return ;
   	}


	while( head_moving() );
    518c:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    5190:	88 23       	and	r24, r24
    5192:	e1 f7       	brne	.-8      	; 0x518c <tape_knock+0x10>

	set_busy( TRUE );
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    519a:	80 91 08 01 	lds	r24, 0x0108
    519e:	8f 77       	andi	r24, 0x7F	; 127
    51a0:	80 93 08 01 	sts	0x0108, r24
    51a4:	20 ed       	ldi	r18, 0xD0	; 208
    51a6:	37 e0       	ldi	r19, 0x07	; 7
    51a8:	40 e9       	ldi	r20, 0x90	; 144
    51aa:	51 e0       	ldi	r21, 0x01	; 1
    51ac:	ca 01       	movw	r24, r20
    51ae:	01 97       	sbiw	r24, 0x01	; 1
    51b0:	f1 f7       	brne	.-4      	; 0x51ae <tape_knock+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b2:	21 50       	subi	r18, 0x01	; 1
    51b4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51b6:	d1 f7       	brne	.-12     	; 0x51ac <tape_knock+0x30>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    51b8:	80 91 08 01 	lds	r24, 0x0108
    51bc:	80 68       	ori	r24, 0x80	; 128
    51be:	80 93 08 01 	sts	0x0108, r24
    51c2:	20 ed       	ldi	r18, 0xD0	; 208
    51c4:	37 e0       	ldi	r19, 0x07	; 7
    51c6:	40 e9       	ldi	r20, 0x90	; 144
    51c8:	51 e0       	ldi	r21, 0x01	; 1
    51ca:	ca 01       	movw	r24, r20
    51cc:	01 97       	sbiw	r24, 0x01	; 1
    51ce:	f1 f7       	brne	.-4      	; 0x51cc <tape_knock+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51d0:	21 50       	subi	r18, 0x01	; 1
    51d2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d4:	d1 f7       	brne	.-12     	; 0x51ca <tape_knock+0x4e>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>
    51dc:	08 95       	ret

000051de <pickup_part>:
{
	unsigned char failedCounter;


	// wait til head stops
	while( head_moving() );
    51de:	0e 94 21 1c 	call	0x3842	; 0x3842 <head_moving>
    51e2:	88 23       	and	r24, r24
    51e4:	e1 f7       	brne	.-8      	; 0x51de <pickup_part>

	// maybe?
	while( get_busy() );
    51e6:	0e 94 ef 1a 	call	0x35de	; 0x35de <get_busy>
    51ea:	89 2b       	or	r24, r25
    51ec:	e1 f7       	brne	.-8      	; 0x51e6 <pickup_part+0x8>

	// count number of pickup fails
	failedCounter = 0 ;


	if( is_head_down() ){
    51ee:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <is_head_down>
    51f2:	88 23       	and	r24, r24
    51f4:	11 f0       	breq	.+4      	; 0x51fa <pickup_part+0x1c>
    51f6:	85 e0       	ldi	r24, 0x05	; 5
    51f8:	08 95       	ret
		return GCSTATUS_FAILED_COMMAND;
	}

	set_busy( TRUE ) ;
    51fa:	81 e0       	ldi	r24, 0x01	; 1
    51fc:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>
	{
// advance part, waits til head has done
// trying tape_knock after pickup		tape_knock();

		// vacuum on
		vacuum ( 1 );
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <vacuum>

		// push head down
		head_down( 1 );
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>
    5210:	2c ed       	ldi	r18, 0xDC	; 220
    5212:	35 e0       	ldi	r19, 0x05	; 5
    5214:	40 e9       	ldi	r20, 0x90	; 144
    5216:	51 e0       	ldi	r21, 0x01	; 1
    5218:	ca 01       	movw	r24, r20
    521a:	01 97       	sbiw	r24, 0x01	; 1
    521c:	f1 f7       	brne	.-4      	; 0x521a <pickup_part+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    521e:	21 50       	subi	r18, 0x01	; 1
    5220:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5222:	d1 f7       	brne	.-12     	; 0x5218 <pickup_part+0x3a>

		//settle (probably doesn't need this)
		_delay_ms( 150 );

		// head up
		head_down ( 0 ) ;
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <head_down>

// advance part, waits til head has done
 		tape_knock();
    522c:	0e 94 be 28 	call	0x517c	; 0x517c <tape_knock>
    5230:	28 ee       	ldi	r18, 0xE8	; 232
    5232:	33 e0       	ldi	r19, 0x03	; 3
    5234:	40 e9       	ldi	r20, 0x90	; 144
    5236:	51 e0       	ldi	r21, 0x01	; 1
    5238:	ca 01       	movw	r24, r20
    523a:	01 97       	sbiw	r24, 0x01	; 1
    523c:	f1 f7       	brne	.-4      	; 0x523a <pickup_part+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    523e:	21 50       	subi	r18, 0x01	; 1
    5240:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5242:	d1 f7       	brne	.-12     	; 0x5238 <pickup_part+0x5a>

	}

	_delay_ms( 100 );

	set_busy( FALSE ) ;
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <set_busy>
    524a:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    524c:	08 95       	ret

0000524e <usb_setEventHandler>:

static usb_eventHandler * eventHandler;

void usb_setEventHandler(usb_eventHandler * handler)
{
        eventHandler = handler;
    524e:	90 93 5c 09 	sts	0x095C, r25
    5252:	80 93 5b 09 	sts	0x095B, r24
}
    5256:	08 95       	ret

00005258 <usb_fireEvent>:
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void usb_fireEvent(usb_device * device, usb_eventType event)
{
        eventHandler(device, event);
    5258:	e0 91 5b 09 	lds	r30, 0x095B
    525c:	f0 91 5c 09 	lds	r31, 0x095C
    5260:	19 95       	eicall
}
    5262:	08 95       	ret

00005264 <usb_initEndPoint>:

void usb_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
    5264:	fc 01       	movw	r30, r24
        endpoint->address = address;
    5266:	60 83       	st	Z, r22
        endpoint->sendToggle = bmSNDTOG0;
    5268:	80 e4       	ldi	r24, 0x40	; 64
    526a:	84 83       	std	Z+4, r24	; 0x04
        endpoint->receiveToggle = bmRCVTOG0;
    526c:	80 e1       	ldi	r24, 0x10	; 16
    526e:	85 83       	std	Z+5, r24	; 0x05
}
    5270:	08 95       	ret

00005272 <usb_initDevice>:

    return 0;
}

int usb_initDevice(usb_device * device, int configuration)
{
    5272:	ef 92       	push	r14
    5274:	ff 92       	push	r15
    5276:	0f 93       	push	r16
    5278:	1f 93       	push	r17
    527a:	df 93       	push	r29
    527c:	cf 93       	push	r28
    527e:	00 d0       	rcall	.+0      	; 0x5280 <usb_initDevice+0xe>
    5280:	0f 92       	push	r0
    5282:	cd b7       	in	r28, 0x3d	; 61
    5284:	de b7       	in	r29, 0x3e	; 62
    5286:	7c 01       	movw	r14, r24
        char buf[4];

        uint8_t rcode;

        // Set the configuration for this USB device.
        rcode = usb_setConfiguration(device, configuration);
    5288:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <usb_setConfiguration>
        if (rcode<0) return rcode;

        // Get the first supported language.
        rcode = usb_getString(device, 0, 0, 4, buf);
    528c:	c7 01       	movw	r24, r14
    528e:	60 e0       	ldi	r22, 0x00	; 0
    5290:	40 e0       	ldi	r20, 0x00	; 0
    5292:	24 e0       	ldi	r18, 0x04	; 4
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	8e 01       	movw	r16, r28
    5298:	0f 5f       	subi	r16, 0xFF	; 255
    529a:	1f 4f       	sbci	r17, 0xFF	; 255
    529c:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <usb_getString>
        if (rcode<0) return rcode;
    device->firstStringLanguage = (buf[3] << 8) | buf[2];
    52a0:	3c 81       	ldd	r19, Y+4	; 0x04
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	4b 81       	ldd	r20, Y+3	; 0x03
    52a6:	50 e0       	ldi	r21, 0x00	; 0
    52a8:	24 2b       	or	r18, r20
    52aa:	35 2b       	or	r19, r21
    52ac:	f7 01       	movw	r30, r14
    52ae:	35 8b       	std	Z+21, r19	; 0x15
    52b0:	24 8b       	std	Z+20, r18	; 0x14

    return rcode;
}
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	0f 90       	pop	r0
    52b6:	0f 90       	pop	r0
    52b8:	0f 90       	pop	r0
    52ba:	0f 90       	pop	r0
    52bc:	cf 91       	pop	r28
    52be:	df 91       	pop	r29
    52c0:	1f 91       	pop	r17
    52c2:	0f 91       	pop	r16
    52c4:	ff 90       	pop	r15
    52c6:	ef 90       	pop	r14
    52c8:	08 95       	ret

000052ca <usb_printDeviceInfo>:

/**
 * Print USB device information.
 */
int usb_printDeviceInfo(usb_device * device)
{
    52ca:	df 93       	push	r29
    52cc:	cf 93       	push	r28
    52ce:	cd b7       	in	r28, 0x3d	; 61
    52d0:	de b7       	in	r29, 0x3e	; 62
    52d2:	62 97       	sbiw	r28, 0x12	; 18
    52d4:	0f b6       	in	r0, 0x3f	; 63
    52d6:	f8 94       	cli
    52d8:	de bf       	out	0x3e, r29	; 62
    52da:	0f be       	out	0x3f, r0	; 63
    52dc:	cd bf       	out	0x3d, r28	; 61
        int rcode;
    // char buf[128];

    // Read the device descriptor
        usb_deviceDescriptor deviceDescriptor;
    rcode = usb_getDeviceDescriptor(device, &deviceDescriptor);
    52de:	be 01       	movw	r22, r28
    52e0:	6f 5f       	subi	r22, 0xFF	; 255
    52e2:	7f 4f       	sbci	r23, 0xFF	; 255
    52e4:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <usb_getDeviceDescriptor>
    usb_getString(device, deviceDescriptor.iSerialNumber, device->firstStringLanguage, 128, buf);
    avr_serialPrintf("Serial number: %s\n", buf);
    */

    return 0;
}
    52e8:	62 96       	adiw	r28, 0x12	; 18
    52ea:	0f b6       	in	r0, 0x3f	; 63
    52ec:	f8 94       	cli
    52ee:	de bf       	out	0x3e, r29	; 62
    52f0:	0f be       	out	0x3f, r0	; 63
    52f2:	cd bf       	out	0x3d, r28	; 61
    52f4:	cf 91       	pop	r28
    52f6:	df 91       	pop	r29
    52f8:	08 95       	ret

000052fa <max3421e_write>:
 * @param value value to write.
 */
void max3421e_write(uint8_t reg, uint8_t value)
{
        // Pull slave select low to indicate start of transfer.
        MAX_SS(0);
    52fa:	2c 98       	cbi	0x05, 4	; 5

        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
    52fc:	82 60       	ori	r24, 0x02	; 2
    52fe:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    5300:	0d b4       	in	r0, 0x2d	; 45
    5302:	07 fe       	sbrs	r0, 7
    5304:	fd cf       	rjmp	.-6      	; 0x5300 <max3421e_write+0x6>

        // Transfer value byte.
        SPDR = value;
    5306:	6e bd       	out	0x2e, r22	; 46
        while (!(SPSR & (1 << SPIF)));
    5308:	0d b4       	in	r0, 0x2d	; 45
    530a:	07 fe       	sbrs	r0, 7
    530c:	fd cf       	rjmp	.-6      	; 0x5308 <max3421e_write+0xe>

        // Pull slave select high to indicate end of transfer.
        MAX_SS(1);
    530e:	2c 9a       	sbi	0x05, 4	; 5

        return;
}
    5310:	08 95       	ret

00005312 <max3421e_writeMultiple>:
 * @return a pointer to values, incremented by the number of bytes written (values + length).
 */
uint8_t * max3421e_writeMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
        // Pull slave select low to indicate start of transfer.
        MAX_SS(0);
    5312:	2c 98       	cbi	0x05, 4	; 5

        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
    5314:	82 60       	ori	r24, 0x02	; 2
    5316:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    5318:	0d b4       	in	r0, 0x2d	; 45
    531a:	07 fe       	sbrs	r0, 7
    531c:	fd cf       	rjmp	.-6      	; 0x5318 <max3421e_writeMultiple+0x6>

        // Transfer values.
        while (count--)
    531e:	66 23       	and	r22, r22
    5320:	89 f0       	breq	.+34     	; 0x5344 <max3421e_writeMultiple+0x32>
    5322:	61 50       	subi	r22, 0x01	; 1
    5324:	fa 01       	movw	r30, r20
    5326:	70 e0       	ldi	r23, 0x00	; 0
    5328:	6f 5f       	subi	r22, 0xFF	; 255
    532a:	7f 4f       	sbci	r23, 0xFF	; 255
    532c:	64 0f       	add	r22, r20
    532e:	75 1f       	adc	r23, r21
        {
                // Send next value byte.
                SPDR = (*values);
    5330:	80 81       	ld	r24, Z
    5332:	8e bd       	out	0x2e, r24	; 46
                while (!(SPSR & (1 << SPIF)));
    5334:	0d b4       	in	r0, 0x2d	; 45
    5336:	07 fe       	sbrs	r0, 7
    5338:	fd cf       	rjmp	.-6      	; 0x5334 <max3421e_writeMultiple+0x22>

                values++;
    533a:	31 96       	adiw	r30, 0x01	; 1
        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
        while (!(SPSR & (1 << SPIF)));

        // Transfer values.
        while (count--)
    533c:	e6 17       	cp	r30, r22
    533e:	f7 07       	cpc	r31, r23
    5340:	b9 f7       	brne	.-18     	; 0x5330 <max3421e_writeMultiple+0x1e>
    5342:	af 01       	movw	r20, r30

                values++;
        }

        // Pull slave select high to indicate end of transfer.
        MAX_SS(1);
    5344:	2c 9a       	sbi	0x05, 4	; 5

        return (values);
}
    5346:	ca 01       	movw	r24, r20
    5348:	08 95       	ret

0000534a <max3421e_read>:
 * @return result value.
 */
uint8_t max3421e_read(uint8_t reg)
{
        // Pull slave-select high to initiate transfer.
        MAX_SS(0);
    534a:	2c 98       	cbi	0x05, 4	; 5

        // Send a command byte containing the register number.
        SPDR = reg;
    534c:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    534e:	0d b4       	in	r0, 0x2d	; 45
    5350:	07 fe       	sbrs	r0, 7
    5352:	fd cf       	rjmp	.-6      	; 0x534e <max3421e_read+0x4>

        // Send an empty byte while reading.
        SPDR = 0;
    5354:	1e bc       	out	0x2e, r1	; 46
        while (!(SPSR & (1 << SPIF)));
    5356:	0d b4       	in	r0, 0x2d	; 45
    5358:	07 fe       	sbrs	r0, 7
    535a:	fd cf       	rjmp	.-6      	; 0x5356 <max3421e_read+0xc>

        // Pull slave-select low to signal transfer complete.
        MAX_SS(1);
    535c:	2c 9a       	sbi	0x05, 4	; 5

        // Return result byte.
        return (SPDR);
    535e:	8e b5       	in	r24, 0x2e	; 46
}
    5360:	08 95       	ret

00005362 <max3421e_readMultiple>:
 * @return pointer to the input buffer + count.
 */
uint8_t * max3421e_readMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
        // Pull slave-select high to initiate transfer.
        MAX_SS(0);
    5362:	2c 98       	cbi	0x05, 4	; 5

        // Send a command byte containing the register number.
        SPDR = reg;
    5364:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF))); //wait
    5366:	0d b4       	in	r0, 0x2d	; 45
    5368:	07 fe       	sbrs	r0, 7
    536a:	fd cf       	rjmp	.-6      	; 0x5366 <max3421e_readMultiple+0x4>

        // Read [count] bytes.
        while (count--)
    536c:	66 23       	and	r22, r22
    536e:	89 f0       	breq	.+34     	; 0x5392 <max3421e_readMultiple+0x30>
    5370:	61 50       	subi	r22, 0x01	; 1
    5372:	fa 01       	movw	r30, r20
    5374:	70 e0       	ldi	r23, 0x00	; 0
    5376:	6f 5f       	subi	r22, 0xFF	; 255
    5378:	7f 4f       	sbci	r23, 0xFF	; 255
    537a:	64 0f       	add	r22, r20
    537c:	75 1f       	adc	r23, r21
        {
                // Send empty byte while reading.
                SPDR = 0;
    537e:	1e bc       	out	0x2e, r1	; 46
                while (!(SPSR & (1 << SPIF)));
    5380:	0d b4       	in	r0, 0x2d	; 45
    5382:	07 fe       	sbrs	r0, 7
    5384:	fd cf       	rjmp	.-6      	; 0x5380 <max3421e_readMultiple+0x1e>

                *values = SPDR;
    5386:	8e b5       	in	r24, 0x2e	; 46
    5388:	81 93       	st	Z+, r24
        // Send a command byte containing the register number.
        SPDR = reg;
        while (!(SPSR & (1 << SPIF))); //wait

        // Read [count] bytes.
        while (count--)
    538a:	e6 17       	cp	r30, r22
    538c:	f7 07       	cpc	r31, r23
    538e:	b9 f7       	brne	.-18     	; 0x537e <max3421e_readMultiple+0x1c>
    5390:	af 01       	movw	r20, r30
                *values = SPDR;
                values++;
        }

        // Pull slave-select low to signal transfer complete.
        MAX_SS(1);
    5392:	2c 9a       	sbi	0x05, 4	; 5

        // Return the byte array + count.
        return (values);
}
    5394:	ca 01       	movw	r24, r20
    5396:	08 95       	ret

00005398 <max3421e_getVbusState>:
 * @return the status of Vbus.
 */
uint8_t max3421e_getVbusState()
{
        return vbusState;
}
    5398:	80 91 5d 09 	lds	r24, 0x095D
    539c:	08 95       	ret

0000539e <max3421e_busprobe>:
 * Probes the bus to determine device presence and speed, and switches host to this speed.
 */
void max3421e_busprobe(void)
{
        uint8_t bus_sample;
        bus_sample = max3421e_read(MAX_REG_HRSL); //Get J,K status
    539e:	88 ef       	ldi	r24, 0xF8	; 248
    53a0:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the uint8_t

        switch (bus_sample)
    53a4:	80 7c       	andi	r24, 0xC0	; 192
    53a6:	80 34       	cpi	r24, 0x40	; 64
    53a8:	81 f0       	breq	.+32     	; 0x53ca <max3421e_busprobe+0x2c>
    53aa:	81 34       	cpi	r24, 0x41	; 65
    53ac:	28 f0       	brcs	.+10     	; 0x53b8 <max3421e_busprobe+0x1a>
    53ae:	80 38       	cpi	r24, 0x80	; 128
    53b0:	c9 f0       	breq	.+50     	; 0x53e4 <max3421e_busprobe+0x46>
    53b2:	80 3c       	cpi	r24, 0xC0	; 192
    53b4:	31 f0       	breq	.+12     	; 0x53c2 <max3421e_busprobe+0x24>
    53b6:	08 95       	ret
    53b8:	88 23       	and	r24, r24
    53ba:	09 f5       	brne	.+66     	; 0x53fe <max3421e_busprobe+0x60>
                break;
        case (bmSE1): //illegal state
                vbusState = SE1;
                break;
        case (bmSE0): //disconnected state
                vbusState = SE0;
    53bc:	10 92 5d 09 	sts	0x095D, r1
    53c0:	08 95       	ret
                        max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
                        vbusState = FSHOST;
                }
                break;
        case (bmSE1): //illegal state
                vbusState = SE1;
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	80 93 5d 09 	sts	0x095D, r24
    53c8:	08 95       	ret
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST); //start low-speed host
                        vbusState = LSHOST;
                }
                break;
        case (bmKSTATUS):
                if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    53ca:	88 ed       	ldi	r24, 0xD8	; 216
    53cc:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    53d0:	81 fd       	sbrc	r24, 1
    53d2:	0d c0       	rjmp	.+26     	; 0x53ee <max3421e_busprobe+0x50>
                {
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
    53d4:	88 ed       	ldi	r24, 0xD8	; 216
    53d6:	6b ec       	ldi	r22, 0xCB	; 203
    53d8:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
                        vbusState = LSHOST;
    53dc:	83 e0       	ldi	r24, 0x03	; 3
    53de:	80 93 5d 09 	sts	0x095D, r24
    53e2:	08 95       	ret

        switch (bus_sample)
        {
        //start full-speed or low-speed host
        case (bmJSTATUS):
                if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    53e4:	88 ed       	ldi	r24, 0xD8	; 216
    53e6:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    53ea:	81 fd       	sbrc	r24, 1
    53ec:	f3 cf       	rjmp	.-26     	; 0x53d4 <max3421e_busprobe+0x36>
                {
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
                        vbusState = LSHOST;
                } else
                {
                        max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
    53ee:	88 ed       	ldi	r24, 0xD8	; 216
    53f0:	69 ec       	ldi	r22, 0xC9	; 201
    53f2:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
                        vbusState = FSHOST;
    53f6:	82 e0       	ldi	r24, 0x02	; 2
    53f8:	80 93 5d 09 	sts	0x095D, r24
    53fc:	08 95       	ret
    53fe:	08 95       	ret

00005400 <max3421e_interruptHandler>:

/**
 * Interrupt handler.
 */
uint8_t max3421e_interruptHandler(void)
{
    5400:	1f 93       	push	r17
        uint8_t interruptStatus;
        uint8_t HIRQ_sendback = 0x00;

        // Determine interrupt source.
        interruptStatus = max3421e_read(MAX_REG_HIRQ);
    5402:	88 ec       	ldi	r24, 0xC8	; 200
    5404:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>

        if (interruptStatus & bmFRAMEIRQ)
    5408:	86 fd       	sbrc	r24, 6
    540a:	0d c0       	rjmp	.+26     	; 0x5426 <max3421e_interruptHandler+0x26>
    540c:	10 e0       	ldi	r17, 0x00	; 0
        {
                //->1ms SOF interrupt handler
                HIRQ_sendback |= bmFRAMEIRQ;
        }

        if (interruptStatus & bmCONDETIRQ)
    540e:	85 ff       	sbrs	r24, 5
    5410:	03 c0       	rjmp	.+6      	; 0x5418 <max3421e_interruptHandler+0x18>
        {
                max3421e_busprobe();
    5412:	0e 94 cf 29 	call	0x539e	; 0x539e <max3421e_busprobe>

                HIRQ_sendback |= bmCONDETIRQ;
    5416:	10 62       	ori	r17, 0x20	; 32
        }

        // End HIRQ interrupts handling, clear serviced IRQs
        max3421e_write(MAX_REG_HIRQ, HIRQ_sendback);
    5418:	88 ec       	ldi	r24, 0xC8	; 200
    541a:	61 2f       	mov	r22, r17
    541c:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        return (HIRQ_sendback);
}
    5420:	81 2f       	mov	r24, r17
    5422:	1f 91       	pop	r17
    5424:	08 95       	ret
        uint8_t HIRQ_sendback = 0x00;

        // Determine interrupt source.
        interruptStatus = max3421e_read(MAX_REG_HIRQ);

        if (interruptStatus & bmFRAMEIRQ)
    5426:	10 e4       	ldi	r17, 0x40	; 64
    5428:	f2 cf       	rjmp	.-28     	; 0x540e <max3421e_interruptHandler+0xe>

0000542a <max3421e_gpxInterruptHandler>:
 * GPX interrupt handler
 */
uint8_t max3421e_gpxInterruptHandler(void)
{
        //read GPIN IRQ register
        uint8_t interruptStatus = max3421e_read(MAX_REG_GPINIRQ);
    542a:	80 eb       	ldi	r24, 0xB0	; 176
    542c:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
        //        vbusPwr( ON );
        //        regWr( rGPINIRQ, bmGPINIRQ7 );
        //    }

        return (interruptStatus);
}
    5430:	08 95       	ret

00005432 <max3421e_poll>:
/**
 * MAX3421 state change task and interrupt handler.
 * @return error code or 0 if successful.
 */
uint8_t max3421e_poll(void)
{
    5432:	1f 93       	push	r17
        uint8_t rcode = 0;

        // Check interrupt.
        if (MAX_INT() == 0)
    5434:	80 91 02 01 	lds	r24, 0x0102
    5438:	86 ff       	sbrs	r24, 6
    543a:	0a c0       	rjmp	.+20     	; 0x5450 <max3421e_poll+0x1e>
    543c:	10 e0       	ldi	r17, 0x00	; 0
                rcode = max3421e_interruptHandler();

        if (MAX_GPX() == 0)
    543e:	80 91 02 01 	lds	r24, 0x0102
    5442:	85 fd       	sbrc	r24, 5
    5444:	02 c0       	rjmp	.+4      	; 0x544a <max3421e_poll+0x18>
                max3421e_gpxInterruptHandler();
    5446:	0e 94 15 2a 	call	0x542a	; 0x542a <max3421e_gpxInterruptHandler>

        return (rcode);
}
    544a:	81 2f       	mov	r24, r17
    544c:	1f 91       	pop	r17
    544e:	08 95       	ret
{
        uint8_t rcode = 0;

        // Check interrupt.
        if (MAX_INT() == 0)
                rcode = max3421e_interruptHandler();
    5450:	0e 94 00 2a 	call	0x5400	; 0x5400 <max3421e_interruptHandler>
    5454:	18 2f       	mov	r17, r24
    5456:	f3 cf       	rjmp	.-26     	; 0x543e <max3421e_poll+0xc>

00005458 <max3421e_reset>:
/**
 * Resets the max3412e. Sets the chip reset bit, SPI configuration is not affected.
 * @return true iff success.
 */
boolean max3421e_reset(void)
{
    5458:	1f 93       	push	r17
        uint8_t tmp = 0;

        // Chip reset. This stops the oscillator
        max3421e_write(MAX_REG_USBCTL, bmCHIPRES);
    545a:	88 e7       	ldi	r24, 0x78	; 120
    545c:	60 e2       	ldi	r22, 0x20	; 32
    545e:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        // Remove the reset
        max3421e_write(MAX_REG_USBCTL, 0x00);
    5462:	88 e7       	ldi	r24, 0x78	; 120
    5464:	60 e0       	ldi	r22, 0x00	; 0
    5466:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        avr_delay(10);
    546a:	6a e0       	ldi	r22, 0x0A	; 10
    546c:	70 e0       	ldi	r23, 0x00	; 0
    546e:	80 e0       	ldi	r24, 0x00	; 0
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	0e 94 2b 2b 	call	0x5656	; 0x5656 <avr_delay>
    5476:	10 e0       	ldi	r17, 0x00	; 0
    5478:	02 c0       	rjmp	.+4      	; 0x547e <max3421e_reset+0x26>

        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    547a:	11 50       	subi	r17, 0x01	; 1
        {
                // Timeout after 256 attempts.
                tmp++;
                if (tmp == 0)
    547c:	41 f0       	breq	.+16     	; 0x548e <max3421e_reset+0x36>
        max3421e_write(MAX_REG_USBCTL, 0x00);

        avr_delay(10);

        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    547e:	88 e6       	ldi	r24, 0x68	; 104
    5480:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    5484:	80 ff       	sbrs	r24, 0
    5486:	f9 cf       	rjmp	.-14     	; 0x547a <max3421e_reset+0x22>
    5488:	81 e0       	ldi	r24, 0x01	; 1
                        return (false);
        }

        // Success.
        return (true);
}
    548a:	1f 91       	pop	r17
    548c:	08 95       	ret
        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
        {
                // Timeout after 256 attempts.
                tmp++;
                if (tmp == 0)
    548e:	80 e0       	ldi	r24, 0x00	; 0
                        return (false);
        }

        // Success.
        return (true);
}
    5490:	1f 91       	pop	r17
    5492:	08 95       	ret

00005494 <max3421e_powerOn>:
 * Initialises the max3421e after power-on.
 */
void max3421e_powerOn(void)
{
        // Configure full-duplex SPI, interrupt pulse.
        max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
    5494:	88 e8       	ldi	r24, 0x88	; 136
    5496:	6a e1       	ldi	r22, 0x1A	; 26
    5498:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        // Stop/start the oscillator.
        if (max3421e_reset() == false)
    549c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <max3421e_reset>
    54a0:	88 23       	and	r24, r24
    54a2:	e1 f0       	breq	.+56     	; 0x54dc <max3421e_powerOn+0x48>
		      	printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));

        // Configure host operation.
        max3421e_write(MAX_REG_MODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ ); // set pull-downs, Host, Separate GPIN IRQ on GPX
    54a4:	88 ed       	ldi	r24, 0xD8	; 216
    54a6:	61 ed       	ldi	r22, 0xD1	; 209
    54a8:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
        max3421e_write(MAX_REG_HIEN, bmCONDETIE | bmFRAMEIE ); //connection detection
    54ac:	80 ed       	ldi	r24, 0xD0	; 208
    54ae:	60 e6       	ldi	r22, 0x60	; 96
    54b0:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        // Check if device is connected.
        max3421e_write(MAX_REG_HCTL, bmSAMPLEBUS ); // sample USB bus
    54b4:	88 ee       	ldi	r24, 0xE8	; 232
    54b6:	64 e0       	ldi	r22, 0x04	; 4
    54b8:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
        while (!(max3421e_read(MAX_REG_HCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    54bc:	88 ee       	ldi	r24, 0xE8	; 232
    54be:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    54c2:	82 ff       	sbrs	r24, 2
    54c4:	fb cf       	rjmp	.-10     	; 0x54bc <max3421e_powerOn+0x28>

        max3421e_busprobe(); //check if anything is connected
    54c6:	0e 94 cf 29 	call	0x539e	; 0x539e <max3421e_busprobe>
        max3421e_write(MAX_REG_HIRQ, bmCONDETIRQ ); //clear connection detect interrupt
    54ca:	88 ec       	ldi	r24, 0xC8	; 200
    54cc:	60 e2       	ldi	r22, 0x20	; 32
    54ce:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        // Enable interrupt pin.
        max3421e_write(MAX_REG_CPUCTL, 0x01);
    54d2:	80 e8       	ldi	r24, 0x80	; 128
    54d4:	61 e0       	ldi	r22, 0x01	; 1
    54d6:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
}
    54da:	08 95       	ret
        // Configure full-duplex SPI, interrupt pulse.
        max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX

        // Stop/start the oscillator.
        if (max3421e_reset() == false)
		      	printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));
    54dc:	84 ec       	ldi	r24, 0xC4	; 196
    54de:	9a e0       	ldi	r25, 0x0A	; 10
    54e0:	0e 94 2f 22 	call	0x445e	; 0x445e <printPgmString>
    54e4:	df cf       	rjmp	.-66     	; 0x54a4 <max3421e_powerOn+0x10>

000054e6 <max3421e_init>:
 * Initialises the max3421e host shield. Initialises the SPI bus and sets the required pin directions.
 * Must be called before powerOn.
 */
void max3421e_init()
{
        spi_begin();
    54e6:	0e 94 85 2a 	call	0x550a	; 0x550a <spi_begin>

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)

        // Set MAX_INT and MAX_GPX pins to input mode.
        DDRH &= ~(0x40 | 0x20);
    54ea:	e1 e0       	ldi	r30, 0x01	; 1
    54ec:	f1 e0       	ldi	r31, 0x01	; 1
    54ee:	80 81       	ld	r24, Z
    54f0:	8f 79       	andi	r24, 0x9F	; 159
    54f2:	80 83       	st	Z, r24

        // Set SPI !SS pint to output mode.
        DDRB |= 0x10;
    54f4:	24 9a       	sbi	0x04, 4	; 4

        // Set RESET pin to output
        DDRH |= 0x10;
    54f6:	80 81       	ld	r24, Z
    54f8:	80 61       	ori	r24, 0x10	; 16
    54fa:	80 83       	st	Z, r24

#endif


        // Pull SPI !SS high
        MAX_SS(1);
    54fc:	2c 9a       	sbi	0x05, 4	; 5

        // Reset
        MAX_RESET(1);
    54fe:	e2 e0       	ldi	r30, 0x02	; 2
    5500:	f1 e0       	ldi	r31, 0x01	; 1
    5502:	80 81       	ld	r24, Z
    5504:	80 61       	ori	r24, 0x10	; 16
    5506:	80 83       	st	Z, r24
}
    5508:	08 95       	ret

0000550a <spi_begin>:
        // MISO pin automatically overrides to INPUT.
        // When the SS pin is set as OUTPUT, it can be used as
        // a general purpose output port (it doesn't influence
        // SPI operations).

        SPI_PORT_DIR |= SPI_BIT_MOSI | SPI_BIT_SCK | SPI_BIT_SS;
    550a:	84 b1       	in	r24, 0x04	; 4
    550c:	87 60       	ori	r24, 0x07	; 7
    550e:	84 b9       	out	0x04, r24	; 4
        SPI_PORT_DIR &= ~SPI_BIT_MISO;
    5510:	23 98       	cbi	0x04, 3	; 4

        SPI_PORT &= ~(SPI_BIT_MOSI | SPI_BIT_SCK);
    5512:	85 b1       	in	r24, 0x05	; 5
    5514:	89 7f       	andi	r24, 0xF9	; 249
    5516:	85 b9       	out	0x05, r24	; 5
        SPI_PORT |= SPI_BIT_SS;
    5518:	28 9a       	sbi	0x05, 0	; 5

        // Warning: if the SS pin ever becomes a LOW INPUT then SPI
        // automatically switches to Slave, so the data direction of
        // the SS pin MUST be kept as OUTPUT.
        SPCR |= _BV(MSTR);
    551a:	8c b5       	in	r24, 0x2c	; 44
    551c:	80 61       	ori	r24, 0x10	; 16
    551e:	8c bd       	out	0x2c, r24	; 44
        SPCR |= _BV(SPE);
    5520:	8c b5       	in	r24, 0x2c	; 44
    5522:	80 64       	ori	r24, 0x40	; 64
    5524:	8c bd       	out	0x2c, r24	; 44
}
    5526:	08 95       	ret

00005528 <__vector_23>:
volatile uint32_t timer0_millis = 0;
static uint8_t timer0_fract = 0;
volatile uint16_t timer1_overflow_count = 0x0;

SIGNAL(TIMER0_OVF_vect)
{
    5528:	1f 92       	push	r1
    552a:	0f 92       	push	r0
    552c:	0f b6       	in	r0, 0x3f	; 63
    552e:	0f 92       	push	r0
    5530:	11 24       	eor	r1, r1
    5532:	2f 93       	push	r18
    5534:	3f 93       	push	r19
    5536:	8f 93       	push	r24
    5538:	9f 93       	push	r25
    553a:	af 93       	push	r26
    553c:	bf 93       	push	r27

        // copy these to local variables so they can be stored in registers
        // (volatile variables must be read from memory on every access)
        uint32_t m = timer0_millis;
    553e:	80 91 62 09 	lds	r24, 0x0962
    5542:	90 91 63 09 	lds	r25, 0x0963
    5546:	a0 91 64 09 	lds	r26, 0x0964
    554a:	b0 91 65 09 	lds	r27, 0x0965
        uint8_t f = timer0_fract;
    554e:	30 91 68 09 	lds	r19, 0x0968

        m += MILLIS_INC;
    5552:	01 96       	adiw	r24, 0x01	; 1
    5554:	a1 1d       	adc	r26, r1
    5556:	b1 1d       	adc	r27, r1
        f += FRACT_INC;
    5558:	23 2f       	mov	r18, r19
    555a:	2d 5f       	subi	r18, 0xFD	; 253
        if (f >= FRACT_MAX)
    555c:	2d 37       	cpi	r18, 0x7D	; 125
    555e:	20 f0       	brcs	.+8      	; 0x5568 <__vector_23+0x40>
        {
                f -= FRACT_MAX;
    5560:	2d 57       	subi	r18, 0x7D	; 125
                m += 1;
    5562:	01 96       	adiw	r24, 0x01	; 1
    5564:	a1 1d       	adc	r26, r1
    5566:	b1 1d       	adc	r27, r1
        }

        timer0_fract = f;
    5568:	20 93 68 09 	sts	0x0968, r18
        timer0_millis = m;
    556c:	80 93 62 09 	sts	0x0962, r24
    5570:	90 93 63 09 	sts	0x0963, r25
    5574:	a0 93 64 09 	sts	0x0964, r26
    5578:	b0 93 65 09 	sts	0x0965, r27
        timer0_overflow_count ++;
    557c:	80 91 5e 09 	lds	r24, 0x095E
    5580:	90 91 5f 09 	lds	r25, 0x095F
    5584:	a0 91 60 09 	lds	r26, 0x0960
    5588:	b0 91 61 09 	lds	r27, 0x0961
    558c:	01 96       	adiw	r24, 0x01	; 1
    558e:	a1 1d       	adc	r26, r1
    5590:	b1 1d       	adc	r27, r1
    5592:	80 93 5e 09 	sts	0x095E, r24
    5596:	90 93 5f 09 	sts	0x095F, r25
    559a:	a0 93 60 09 	sts	0x0960, r26
    559e:	b0 93 61 09 	sts	0x0961, r27
}
    55a2:	bf 91       	pop	r27
    55a4:	af 91       	pop	r26
    55a6:	9f 91       	pop	r25
    55a8:	8f 91       	pop	r24
    55aa:	3f 91       	pop	r19
    55ac:	2f 91       	pop	r18
    55ae:	0f 90       	pop	r0
    55b0:	0f be       	out	0x3f, r0	; 63
    55b2:	0f 90       	pop	r0
    55b4:	1f 90       	pop	r1
    55b6:	18 95       	reti

000055b8 <avr_millis>:

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    55b8:	8f b7       	in	r24, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    55ba:	f8 94       	cli
        m = timer0_millis;
    55bc:	20 91 62 09 	lds	r18, 0x0962
    55c0:	30 91 63 09 	lds	r19, 0x0963
    55c4:	40 91 64 09 	lds	r20, 0x0964
    55c8:	50 91 65 09 	lds	r21, 0x0965
        SREG = oldSREG;
    55cc:	8f bf       	out	0x3f, r24	; 63

        // Enable interrupts
        sei();
    55ce:	78 94       	sei

        return m;
}
    55d0:	b9 01       	movw	r22, r18
    55d2:	ca 01       	movw	r24, r20
    55d4:	08 95       	ret

000055d6 <avr_ticks>:

uint64_t avr_ticks()
{
    55d6:	af 92       	push	r10
    55d8:	bf 92       	push	r11
    55da:	cf 92       	push	r12
    55dc:	df 92       	push	r13
    55de:	ef 92       	push	r14
    55e0:	ff 92       	push	r15
    55e2:	0f 93       	push	r16
    55e4:	1f 93       	push	r17
        return (timer0_overflow_count * 256 + TCNT0) * 64;
    55e6:	a0 90 5e 09 	lds	r10, 0x095E
    55ea:	b0 90 5f 09 	lds	r11, 0x095F
    55ee:	c0 90 60 09 	lds	r12, 0x0960
    55f2:	d0 90 61 09 	lds	r13, 0x0961
    55f6:	86 b5       	in	r24, 0x26	; 38
    55f8:	dc 2c       	mov	r13, r12
    55fa:	cb 2c       	mov	r12, r11
    55fc:	ba 2c       	mov	r11, r10
    55fe:	aa 24       	eor	r10, r10
    5600:	a8 0e       	add	r10, r24
    5602:	b1 1c       	adc	r11, r1
    5604:	c1 1c       	adc	r12, r1
    5606:	d1 1c       	adc	r13, r1
    5608:	aa 0c       	add	r10, r10
    560a:	bb 1c       	adc	r11, r11
    560c:	cc 1c       	adc	r12, r12
    560e:	dd 1c       	adc	r13, r13
    5610:	aa 0c       	add	r10, r10
    5612:	bb 1c       	adc	r11, r11
    5614:	cc 1c       	adc	r12, r12
    5616:	dd 1c       	adc	r13, r13
    5618:	aa 0c       	add	r10, r10
    561a:	bb 1c       	adc	r11, r11
    561c:	cc 1c       	adc	r12, r12
    561e:	dd 1c       	adc	r13, r13
    5620:	aa 0c       	add	r10, r10
    5622:	bb 1c       	adc	r11, r11
    5624:	cc 1c       	adc	r12, r12
    5626:	dd 1c       	adc	r13, r13
    5628:	aa 0c       	add	r10, r10
    562a:	bb 1c       	adc	r11, r11
    562c:	cc 1c       	adc	r12, r12
    562e:	dd 1c       	adc	r13, r13
    5630:	aa 0c       	add	r10, r10
    5632:	bb 1c       	adc	r11, r11
    5634:	cc 1c       	adc	r12, r12
    5636:	dd 1c       	adc	r13, r13
}
    5638:	95 01       	movw	r18, r10
    563a:	a6 01       	movw	r20, r12
    563c:	60 e0       	ldi	r22, 0x00	; 0
    563e:	70 e0       	ldi	r23, 0x00	; 0
    5640:	80 e0       	ldi	r24, 0x00	; 0
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	1f 91       	pop	r17
    5646:	0f 91       	pop	r16
    5648:	ff 90       	pop	r15
    564a:	ef 90       	pop	r14
    564c:	df 90       	pop	r13
    564e:	cf 90       	pop	r12
    5650:	bf 90       	pop	r11
    5652:	af 90       	pop	r10
    5654:	08 95       	ret

00005656 <avr_delay>:

void avr_delay(unsigned long ms)
{
    5656:	ef 92       	push	r14
    5658:	ff 92       	push	r15
    565a:	0f 93       	push	r16
    565c:	1f 93       	push	r17
    565e:	7b 01       	movw	r14, r22
    5660:	8c 01       	movw	r16, r24
}

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    5662:	8f b7       	in	r24, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    5664:	f8 94       	cli
        m = timer0_millis;
    5666:	40 91 62 09 	lds	r20, 0x0962
    566a:	50 91 63 09 	lds	r21, 0x0963
    566e:	60 91 64 09 	lds	r22, 0x0964
    5672:	70 91 65 09 	lds	r23, 0x0965
        SREG = oldSREG;
    5676:	8f bf       	out	0x3f, r24	; 63

        // Enable interrupts
        sei();
    5678:	78 94       	sei
}

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    567a:	2f b7       	in	r18, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    567c:	f8 94       	cli
        m = timer0_millis;
    567e:	80 91 62 09 	lds	r24, 0x0962
    5682:	90 91 63 09 	lds	r25, 0x0963
    5686:	a0 91 64 09 	lds	r26, 0x0964
    568a:	b0 91 65 09 	lds	r27, 0x0965
        SREG = oldSREG;
    568e:	2f bf       	out	0x3f, r18	; 63

        // Enable interrupts
        sei();
    5690:	78 94       	sei

void avr_delay(unsigned long ms)
{
        unsigned long start = avr_millis();

        while (avr_millis() - start <= ms)
    5692:	84 1b       	sub	r24, r20
    5694:	95 0b       	sbc	r25, r21
    5696:	a6 0b       	sbc	r26, r22
    5698:	b7 0b       	sbc	r27, r23
    569a:	e8 16       	cp	r14, r24
    569c:	f9 06       	cpc	r15, r25
    569e:	0a 07       	cpc	r16, r26
    56a0:	1b 07       	cpc	r17, r27
    56a2:	58 f7       	brcc	.-42     	; 0x567a <avr_delay+0x24>
                ;
}
    56a4:	1f 91       	pop	r17
    56a6:	0f 91       	pop	r16
    56a8:	ff 90       	pop	r15
    56aa:	ef 90       	pop	r14
    56ac:	08 95       	ret

000056ae <avr_micros>:

uint32_t avr_micros()
{
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MICROS_DIVIDER;
    56ae:	80 91 84 00 	lds	r24, 0x0084
    56b2:	90 91 85 00 	lds	r25, 0x0085
    56b6:	20 91 66 09 	lds	r18, 0x0966
    56ba:	30 91 67 09 	lds	r19, 0x0967
    56be:	40 e0       	ldi	r20, 0x00	; 0
    56c0:	50 e0       	ldi	r21, 0x00	; 0
    56c2:	a9 01       	movw	r20, r18
    56c4:	33 27       	eor	r19, r19
    56c6:	22 27       	eor	r18, r18
    56c8:	a0 e0       	ldi	r26, 0x00	; 0
    56ca:	b0 e0       	ldi	r27, 0x00	; 0
    56cc:	28 0f       	add	r18, r24
    56ce:	39 1f       	adc	r19, r25
    56d0:	4a 1f       	adc	r20, r26
    56d2:	5b 1f       	adc	r21, r27
    56d4:	22 0f       	add	r18, r18
    56d6:	33 1f       	adc	r19, r19
    56d8:	44 1f       	adc	r20, r20
    56da:	55 1f       	adc	r21, r21
    56dc:	22 0f       	add	r18, r18
    56de:	33 1f       	adc	r19, r19
    56e0:	44 1f       	adc	r20, r20
    56e2:	55 1f       	adc	r21, r21
    56e4:	2c 7f       	andi	r18, 0xFC	; 252
    56e6:	5f 70       	andi	r21, 0x0F	; 15
}
    56e8:	b9 01       	movw	r22, r18
    56ea:	ca 01       	movw	r24, r20
    56ec:	08 95       	ret

000056ee <__vector_20>:
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MILLIS_DIVIDER;
}
*/

SIGNAL(TIMER1_OVF_vect)
{
    56ee:	1f 92       	push	r1
    56f0:	0f 92       	push	r0
    56f2:	0f b6       	in	r0, 0x3f	; 63
    56f4:	0f 92       	push	r0
    56f6:	11 24       	eor	r1, r1
    56f8:	8f 93       	push	r24
    56fa:	9f 93       	push	r25
        timer1_overflow_count ++;
    56fc:	80 91 66 09 	lds	r24, 0x0966
    5700:	90 91 67 09 	lds	r25, 0x0967
    5704:	01 96       	adiw	r24, 0x01	; 1
    5706:	90 93 67 09 	sts	0x0967, r25
    570a:	80 93 66 09 	sts	0x0966, r24
}
    570e:	9f 91       	pop	r25
    5710:	8f 91       	pop	r24
    5712:	0f 90       	pop	r0
    5714:	0f be       	out	0x3f, r0	; 63
    5716:	0f 90       	pop	r0
    5718:	1f 90       	pop	r1
    571a:	18 95       	reti

0000571c <avr_timer1Init>:

void avr_timer1Init()
{
        // Initialise 16-bit timer 1
        // Set prescale to 64
        sbi(TCCR1B, CS01);
    571c:	e1 e8       	ldi	r30, 0x81	; 129
    571e:	f0 e0       	ldi	r31, 0x00	; 0
    5720:	80 81       	ld	r24, Z
    5722:	82 60       	ori	r24, 0x02	; 2
    5724:	80 83       	st	Z, r24
        sbi(TCCR1B, CS00);
    5726:	80 81       	ld	r24, Z
    5728:	81 60       	ori	r24, 0x01	; 1
    572a:	80 83       	st	Z, r24

        sbi(TIMSK1, TOIE1);
    572c:	ef e6       	ldi	r30, 0x6F	; 111
    572e:	f0 e0       	ldi	r31, 0x00	; 0
    5730:	80 81       	ld	r24, Z
    5732:	81 60       	ori	r24, 0x01	; 1
    5734:	80 83       	st	Z, r24
}
    5736:	08 95       	ret

00005738 <setup_timer>:

void setup_timer()
{
        // this needs to be called before setup() or some functions won't
        // work there
        sei();
    5738:	78 94       	sei

        avr_timer1Init();
    573a:	0e 94 8e 2b 	call	0x571c	; 0x571c <avr_timer1Init>
        // set timer 0 prescale factor to 64
        #ifdef __AVR_ATmega128__
        sbi(TCCR0, CS01);
        sbi(TCCR0, CS00);
        #else
        sbi(TCCR0B, CS01);
    573e:	85 b5       	in	r24, 0x25	; 37
    5740:	82 60       	ori	r24, 0x02	; 2
    5742:	85 bd       	out	0x25, r24	; 37
        sbi(TCCR0B, CS00);
    5744:	85 b5       	in	r24, 0x25	; 37
    5746:	81 60       	ori	r24, 0x01	; 1
    5748:	85 bd       	out	0x25, r24	; 37

        // enable timer 0 overflow interrupt
        #ifdef __AVR_ATmega128__
        sbi(TIMSK, TOIE0);
        #else
        sbi(TIMSK0, TOIE0);
    574a:	ee e6       	ldi	r30, 0x6E	; 110
    574c:	f0 e0       	ldi	r31, 0x00	; 0
    574e:	80 81       	ld	r24, Z
    5750:	81 60       	ori	r24, 0x01	; 1
    5752:	80 83       	st	Z, r24
        sbi(ADCSRA, ADPS2);
        sbi(ADCSRA, ADPS1);
        sbi(ADCSRA, ADPS0);
        */

}
    5754:	08 95       	ret

00005756 <usb_getUsbTaskState>:
}

uint8_t usb_getUsbTaskState()
{
        return (usb_task_state);
}
    5756:	80 91 00 02 	lds	r24, 0x0200
    575a:	08 95       	ret

0000575c <usb_setUsbTaskState>:

void usb_setUsbTaskState(uint8_t state)
{
        usb_task_state = state;
    575c:	80 93 00 02 	sts	0x0200, r24
}
    5760:	08 95       	ret

00005762 <usb_getDevice>:

usb_device * usb_getDevice(uint8_t address)
{
    5762:	98 2f       	mov	r25, r24
        if (address>USB_NUMDEVICES+1) return NULL;
    5764:	84 30       	cpi	r24, 0x04	; 4
    5766:	40 f4       	brcc	.+16     	; 0x5778 <usb_getDevice+0x16>

        return &(deviceTable[address]);
    5768:	86 e1       	ldi	r24, 0x16	; 22
    576a:	98 9f       	mul	r25, r24
    576c:	90 01       	movw	r18, r0
    576e:	11 24       	eor	r1, r1
    5770:	2a 56       	subi	r18, 0x6A	; 106
    5772:	36 4f       	sbci	r19, 0xF6	; 246
}
    5774:	c9 01       	movw	r24, r18
    5776:	08 95       	ret
        usb_task_state = state;
}

usb_device * usb_getDevice(uint8_t address)
{
        if (address>USB_NUMDEVICES+1) return NULL;
    5778:	20 e0       	ldi	r18, 0x00	; 0
    577a:	30 e0       	ldi	r19, 0x00	; 0

        return &(deviceTable[address]);
}
    577c:	c9 01       	movw	r24, r18
    577e:	08 95       	ret

00005780 <usb_write>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes written, or error code in case of failure.
 */
int usb_write(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data)
{
    5780:	2f 92       	push	r2
    5782:	3f 92       	push	r3
    5784:	4f 92       	push	r4
    5786:	5f 92       	push	r5
    5788:	6f 92       	push	r6
    578a:	7f 92       	push	r7
    578c:	8f 92       	push	r8
    578e:	9f 92       	push	r9
    5790:	af 92       	push	r10
    5792:	bf 92       	push	r11
    5794:	cf 92       	push	r12
    5796:	df 92       	push	r13
    5798:	ef 92       	push	r14
    579a:	ff 92       	push	r15
    579c:	0f 93       	push	r16
    579e:	1f 93       	push	r17
    57a0:	df 93       	push	r29
    57a2:	cf 93       	push	r28
    57a4:	00 d0       	rcall	.+0      	; 0x57a6 <usb_write+0x26>
    57a6:	cd b7       	in	r28, 0x3d	; 61
    57a8:	de b7       	in	r29, 0x3e	; 62
    57aa:	fc 01       	movw	r30, r24
    57ac:	5b 01       	movw	r10, r22
    57ae:	2a 01       	movw	r4, r20
    57b0:	92 2e       	mov	r9, r18
    57b2:	83 2e       	mov	r8, r19
        uint8_t rcode = 0, retry_count;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    57b4:	80 ee       	ldi	r24, 0xE0	; 224
    57b6:	60 81       	ld	r22, Z
    57b8:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        unsigned int bytes_tosend, nak_count;
        unsigned int bytes_left = length;
        unsigned int nak_limit = USB_NAK_LIMIT;

        uint32_t timeout = avr_millis() + USB_XFER_TIMEOUT;
    57bc:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    57c0:	6b 01       	movw	r12, r22
    57c2:	7c 01       	movw	r14, r24
    57c4:	88 e8       	ldi	r24, 0x88	; 136
    57c6:	93 e1       	ldi	r25, 0x13	; 19
    57c8:	a0 e0       	ldi	r26, 0x00	; 0
    57ca:	b0 e0       	ldi	r27, 0x00	; 0
    57cc:	c8 0e       	add	r12, r24
    57ce:	d9 1e       	adc	r13, r25
    57d0:	ea 1e       	adc	r14, r26
    57d2:	fb 1e       	adc	r15, r27

        uint8_t maxPacketSize = endpoint->maxPacketSize;
    57d4:	d5 01       	movw	r26, r10
    57d6:	12 96       	adiw	r26, 0x02	; 2
    57d8:	1c 91       	ld	r17, X

        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;
    57da:	11 23       	and	r17, r17
    57dc:	c9 f4       	brne	.+50     	; 0x5810 <usb_write+0x90>
    57de:	0e ef       	ldi	r16, 0xFE	; 254
    57e0:	10 e0       	ldi	r17, 0x00	; 0

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle

        // Should be 0 in all cases.
        return (rcode);
}
    57e2:	c8 01       	movw	r24, r16
    57e4:	0f 90       	pop	r0
    57e6:	0f 90       	pop	r0
    57e8:	0f 90       	pop	r0
    57ea:	cf 91       	pop	r28
    57ec:	df 91       	pop	r29
    57ee:	1f 91       	pop	r17
    57f0:	0f 91       	pop	r16
    57f2:	ff 90       	pop	r15
    57f4:	ef 90       	pop	r14
    57f6:	df 90       	pop	r13
    57f8:	cf 90       	pop	r12
    57fa:	bf 90       	pop	r11
    57fc:	af 90       	pop	r10
    57fe:	9f 90       	pop	r9
    5800:	8f 90       	pop	r8
    5802:	7f 90       	pop	r7
    5804:	6f 90       	pop	r6
    5806:	5f 90       	pop	r5
    5808:	4f 90       	pop	r4
    580a:	3f 90       	pop	r3
    580c:	2f 90       	pop	r2
    580e:	08 95       	ret
        uint8_t maxPacketSize = endpoint->maxPacketSize;

        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value
    5810:	88 ee       	ldi	r24, 0xE8	; 232
    5812:	f5 01       	movw	r30, r10
    5814:	64 81       	ldd	r22, Z+4	; 0x04
    5816:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        while (bytes_left)
    581a:	41 14       	cp	r4, r1
    581c:	51 04       	cpc	r5, r1
    581e:	09 f4       	brne	.+2      	; 0x5822 <usb_write+0xa2>
    5820:	74 c0       	rjmp	.+232    	; 0x590a <usb_write+0x18a>
    5822:	21 2e       	mov	r2, r17
    5824:	33 24       	eor	r3, r3
    5826:	89 2d       	mov	r24, r9
    5828:	98 2d       	mov	r25, r8
    582a:	9c 01       	movw	r18, r24
    582c:	39 01       	movw	r6, r18
        {
                retry_count = 0;
                nak_count = 0;

                bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    582e:	42 01       	movw	r8, r4
    5830:	24 14       	cp	r2, r4
    5832:	35 04       	cpc	r3, r5
    5834:	08 f4       	brcc	.+2      	; 0x5838 <usb_write+0xb8>
    5836:	67 c0       	rjmp	.+206    	; 0x5906 <usb_write+0x186>

                // Filling output FIFO
                max3421e_writeMultiple(MAX_REG_SNDFIFO, bytes_tosend, data_p);
    5838:	89 82       	std	Y+1, r8	; 0x01
    583a:	80 e1       	ldi	r24, 0x10	; 16
    583c:	68 2d       	mov	r22, r8
    583e:	a3 01       	movw	r20, r6
    5840:	0e 94 89 29 	call	0x5312	; 0x5312 <max3421e_writeMultiple>

                // Set number of bytes to send.
                max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    5844:	88 e3       	ldi	r24, 0x38	; 56
    5846:	68 2d       	mov	r22, r8
    5848:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

                // Dispatch packet.
                max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address));
    584c:	d5 01       	movw	r26, r10
    584e:	6c 91       	ld	r22, X
    5850:	60 62       	ori	r22, 0x20	; 32
    5852:	80 ef       	ldi	r24, 0xF0	; 240
    5854:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

                // Wait for completion.
                while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    5858:	88 ec       	ldi	r24, 0xC8	; 200
    585a:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    585e:	87 ff       	sbrs	r24, 7
    5860:	fb cf       	rjmp	.-10     	; 0x5858 <usb_write+0xd8>

                // Clear IRQ.
                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    5862:	88 ec       	ldi	r24, 0xC8	; 200
    5864:	60 e8       	ldi	r22, 0x80	; 128
    5866:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

                rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    586a:	88 ef       	ldi	r24, 0xF8	; 248
    586c:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    5870:	18 2f       	mov	r17, r24
    5872:	1f 70       	andi	r17, 0x0F	; 15

                while (rcode && (timeout > avr_millis()))
    5874:	e1 f1       	breq	.+120    	; 0x58ee <usb_write+0x16e>
    5876:	00 e0       	ldi	r16, 0x00	; 0
    5878:	1b 82       	std	Y+3, r1	; 0x03
    587a:	1a 82       	std	Y+2, r1	; 0x02
    587c:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    5880:	6c 15       	cp	r22, r12
    5882:	7d 05       	cpc	r23, r13
    5884:	8e 05       	cpc	r24, r14
    5886:	9f 05       	cpc	r25, r15
    5888:	90 f5       	brcc	.+100    	; 0x58ee <usb_write+0x16e>
                {
                        switch (rcode)
    588a:	14 30       	cpi	r17, 0x04	; 4
    588c:	29 f0       	breq	.+10     	; 0x5898 <usb_write+0x118>
    588e:	1e 30       	cpi	r17, 0x0E	; 14
    5890:	a1 f1       	breq	.+104    	; 0x58fa <usb_write+0x17a>
                                {
                                        return (rcode); //return TIMEOUT
                                }
                                break;
                        default:
                                return (rcode);
    5892:	01 2f       	mov	r16, r17
    5894:	10 e0       	ldi	r17, 0x00	; 0
    5896:	a5 cf       	rjmp	.-182    	; 0x57e2 <usb_write+0x62>
                while (rcode && (timeout > avr_millis()))
                {
                        switch (rcode)
                        {
                        case hrNAK:
                                nak_count++;
    5898:	ea 81       	ldd	r30, Y+2	; 0x02
    589a:	fb 81       	ldd	r31, Y+3	; 0x03
    589c:	31 96       	adiw	r30, 0x01	; 1
    589e:	fb 83       	std	Y+3, r31	; 0x03
    58a0:	ea 83       	std	Y+2, r30	; 0x02
                                if (nak_limit && (nak_count == USB_NAK_LIMIT))
    58a2:	e0 50       	subi	r30, 0x00	; 0
    58a4:	fd 47       	sbci	r31, 0x7D	; 125
    58a6:	09 f4       	brne	.+2      	; 0x58aa <usb_write+0x12a>
    58a8:	3c c0       	rjmp	.+120    	; 0x5922 <usb_write+0x1a2>
                        default:
                                return (rcode);
                        }

                        // Process NAK according to Host out NAK bug.
                        max3421e_write(MAX_REG_SNDBC, 0);
    58aa:	88 e3       	ldi	r24, 0x38	; 56
    58ac:	60 e0       	ldi	r22, 0x00	; 0
    58ae:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
                        max3421e_write(MAX_REG_SNDFIFO, *data_p);
    58b2:	80 e1       	ldi	r24, 0x10	; 16
    58b4:	d3 01       	movw	r26, r6
    58b6:	6c 91       	ld	r22, X
    58b8:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
                        max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    58bc:	88 e3       	ldi	r24, 0x38	; 56
    58be:	69 81       	ldd	r22, Y+1	; 0x01
    58c0:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
                        max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address)); //dispatch packet
    58c4:	f5 01       	movw	r30, r10
    58c6:	60 81       	ld	r22, Z
    58c8:	60 62       	ori	r22, 0x20	; 32
    58ca:	80 ef       	ldi	r24, 0xF0	; 240
    58cc:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

                        // Wait for the completion interrupt.
                        while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    58d0:	88 ec       	ldi	r24, 0xC8	; 200
    58d2:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    58d6:	87 ff       	sbrs	r24, 7
    58d8:	fb cf       	rjmp	.-10     	; 0x58d0 <usb_write+0x150>

                        // Clear interrupt.
                        max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    58da:	88 ec       	ldi	r24, 0xC8	; 200
    58dc:	60 e8       	ldi	r22, 0x80	; 128
    58de:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    58e2:	88 ef       	ldi	r24, 0xF8	; 248
    58e4:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    58e8:	18 2f       	mov	r17, r24
    58ea:	1f 70       	andi	r17, 0x0F	; 15
                // Clear IRQ.
                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

                rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

                while (rcode && (timeout > avr_millis()))
    58ec:	39 f6       	brne	.-114    	; 0x587c <usb_write+0xfc>
                        max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
    58ee:	48 18       	sub	r4, r8
    58f0:	59 08       	sbc	r5, r9
        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

        while (bytes_left)
    58f2:	e1 f0       	breq	.+56     	; 0x592c <usb_write+0x1ac>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
    58f4:	68 0c       	add	r6, r8
    58f6:	79 1c       	adc	r7, r9
    58f8:	9a cf       	rjmp	.-204    	; 0x582e <usb_write+0xae>
                                {
                                        return (rcode); //return NAK
                                }
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    58fa:	0f 5f       	subi	r16, 0xFF	; 255
                                if (retry_count == USB_RETRY_LIMIT)
    58fc:	03 30       	cpi	r16, 0x03	; 3
    58fe:	a9 f6       	brne	.-86     	; 0x58aa <usb_write+0x12a>
    5900:	0e e0       	ldi	r16, 0x0E	; 14
    5902:	10 e0       	ldi	r17, 0x00	; 0
    5904:	6e cf       	rjmp	.-292    	; 0x57e2 <usb_write+0x62>
        while (bytes_left)
        {
                retry_count = 0;
                nak_count = 0;

                bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    5906:	41 01       	movw	r8, r2
    5908:	97 cf       	rjmp	.-210    	; 0x5838 <usb_write+0xb8>
        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

        while (bytes_left)
    590a:	00 e0       	ldi	r16, 0x00	; 0
    590c:	10 e0       	ldi	r17, 0x00	; 0

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    590e:	88 ef       	ldi	r24, 0xF8	; 248
    5910:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    5914:	85 fd       	sbrc	r24, 5
    5916:	08 c0       	rjmp	.+16     	; 0x5928 <usb_write+0x1a8>
    5918:	80 e4       	ldi	r24, 0x40	; 64
    591a:	d5 01       	movw	r26, r10
    591c:	14 96       	adiw	r26, 0x04	; 4
    591e:	8c 93       	st	X, r24
    5920:	60 cf       	rjmp	.-320    	; 0x57e2 <usb_write+0x62>
                {
                        switch (rcode)
                        {
                        case hrNAK:
                                nak_count++;
                                if (nak_limit && (nak_count == USB_NAK_LIMIT))
    5922:	04 e0       	ldi	r16, 0x04	; 4
    5924:	10 e0       	ldi	r17, 0x00	; 0
    5926:	5d cf       	rjmp	.-326    	; 0x57e2 <usb_write+0x62>

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    5928:	80 e8       	ldi	r24, 0x80	; 128
    592a:	f7 cf       	rjmp	.-18     	; 0x591a <usb_write+0x19a>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
    592c:	01 2f       	mov	r16, r17
    592e:	10 e0       	ldi	r17, 0x00	; 0
    5930:	ee cf       	rjmp	.-36     	; 0x590e <usb_write+0x18e>

00005932 <usb_bulkWrite>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkWrite(usb_device * device, uint16_t length, uint8_t * data)
{
    5932:	fc 01       	movw	r30, r24
    5934:	db 01       	movw	r26, r22
    5936:	9a 01       	movw	r18, r20
        return usb_write(device, &(device->bulk_out) , length, data);
    5938:	3e 96       	adiw	r30, 0x0e	; 14
    593a:	bf 01       	movw	r22, r30
    593c:	ad 01       	movw	r20, r26
    593e:	0e 94 c0 2b 	call	0x5780	; 0x5780 <usb_write>
}
    5942:	08 95       	ret

00005944 <usb_dispatchPacket>:

        return &(deviceTable[address]);
}

int usb_dispatchPacket(uint8_t token, usb_endpoint * endpoint, unsigned int nakLimit)
{
    5944:	7f 92       	push	r7
    5946:	8f 92       	push	r8
    5948:	9f 92       	push	r9
    594a:	af 92       	push	r10
    594c:	bf 92       	push	r11
    594e:	cf 92       	push	r12
    5950:	df 92       	push	r13
    5952:	ef 92       	push	r14
    5954:	ff 92       	push	r15
    5956:	0f 93       	push	r16
    5958:	1f 93       	push	r17
    595a:	cf 93       	push	r28
    595c:	df 93       	push	r29
    595e:	78 2e       	mov	r7, r24
    5960:	5b 01       	movw	r10, r22
    5962:	4a 01       	movw	r8, r20
        uint32_t timeout = avr_millis() + USB_XFER_TIMEOUT;
    5964:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    5968:	7b 01       	movw	r14, r22
    596a:	8c 01       	movw	r16, r24
    596c:	88 e8       	ldi	r24, 0x88	; 136
    596e:	93 e1       	ldi	r25, 0x13	; 19
    5970:	a0 e0       	ldi	r26, 0x00	; 0
    5972:	b0 e0       	ldi	r27, 0x00	; 0
    5974:	e8 0e       	add	r14, r24
    5976:	f9 1e       	adc	r15, r25
    5978:	0a 1f       	adc	r16, r26
    597a:	1b 1f       	adc	r17, r27
    597c:	dd 24       	eor	r13, r13
    597e:	c0 e0       	ldi	r28, 0x00	; 0
    5980:	d0 e0       	ldi	r29, 0x00	; 0
    5982:	cc 24       	eor	r12, r12
        uint8_t tmpdata;
        uint8_t rcode = 0;
        unsigned int nak_count = 0;
        char retry_count = 0;

        while (timeout > avr_millis())
    5984:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    5988:	6e 15       	cp	r22, r14
    598a:	7f 05       	cpc	r23, r15
    598c:	80 07       	cpc	r24, r16
    598e:	91 07       	cpc	r25, r17
    5990:	70 f5       	brcc	.+92     	; 0x59ee <usb_dispatchPacket+0xaa>
        {
                // Analyze transfer result.

                // Launch the transfer.
                max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
    5992:	d5 01       	movw	r26, r10
    5994:	6c 91       	ld	r22, X
    5996:	67 29       	or	r22, r7
    5998:	80 ef       	ldi	r24, 0xF0	; 240
    599a:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
                rcode = 0xff;

                // Wait for interrupt
                while (timeout > avr_millis())
    599e:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    59a2:	6e 15       	cp	r22, r14
    59a4:	7f 05       	cpc	r23, r15
    59a6:	80 07       	cpc	r24, r16
    59a8:	91 07       	cpc	r25, r17
    59aa:	08 f0       	brcs	.+2      	; 0x59ae <usb_dispatchPacket+0x6a>
    59ac:	41 c0       	rjmp	.+130    	; 0x5a30 <usb_dispatchPacket+0xec>
                {
                        tmpdata = max3421e_read(MAX_REG_HIRQ);
    59ae:	88 ec       	ldi	r24, 0xC8	; 200
    59b0:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
                        if (tmpdata & bmHXFRDNIRQ)
    59b4:	87 ff       	sbrs	r24, 7
    59b6:	f3 cf       	rjmp	.-26     	; 0x599e <usb_dispatchPacket+0x5a>
                        {
                                // Clear the interrupt.
                                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    59b8:	88 ec       	ldi	r24, 0xC8	; 200
    59ba:	60 e8       	ldi	r22, 0x80	; 128
    59bc:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
    59c0:	dd 24       	eor	r13, r13
                // Exit if timeout.
                if (rcode != 0x00)
                        return (rcode);

                // Wait for HRSL
                while (timeout > avr_millis())
    59c2:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    59c6:	6e 15       	cp	r22, r14
    59c8:	7f 05       	cpc	r23, r15
    59ca:	80 07       	cpc	r24, r16
    59cc:	91 07       	cpc	r25, r17
    59ce:	48 f4       	brcc	.+18     	; 0x59e2 <usb_dispatchPacket+0x9e>
                {
                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    59d0:	88 ef       	ldi	r24, 0xF8	; 248
    59d2:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    59d6:	9f e0       	ldi	r25, 0x0F	; 15
    59d8:	d9 2e       	mov	r13, r25
    59da:	d8 22       	and	r13, r24
                        if (rcode != hrBUSY)
    59dc:	b1 e0       	ldi	r27, 0x01	; 1
    59de:	db 16       	cp	r13, r27
    59e0:	81 f3       	breq	.-32     	; 0x59c2 <usb_dispatchPacket+0x7e>
//                      else
//                              avr_serialPrintf("busy!\n");
                }


                switch (rcode)
    59e2:	e4 e0       	ldi	r30, 0x04	; 4
    59e4:	de 16       	cp	r13, r30
    59e6:	e1 f0       	breq	.+56     	; 0x5a20 <usb_dispatchPacket+0xdc>
    59e8:	fe e0       	ldi	r31, 0x0E	; 14
    59ea:	df 16       	cp	r13, r31
    59ec:	89 f0       	breq	.+34     	; 0x5a10 <usb_dispatchPacket+0xcc>
                        default:
                                return (rcode);
                }
        }

        return (rcode);
    59ee:	2d 2d       	mov	r18, r13
    59f0:	30 e0       	ldi	r19, 0x00	; 0
}
    59f2:	c9 01       	movw	r24, r18
    59f4:	df 91       	pop	r29
    59f6:	cf 91       	pop	r28
    59f8:	1f 91       	pop	r17
    59fa:	0f 91       	pop	r16
    59fc:	ff 90       	pop	r15
    59fe:	ef 90       	pop	r14
    5a00:	df 90       	pop	r13
    5a02:	cf 90       	pop	r12
    5a04:	bf 90       	pop	r11
    5a06:	af 90       	pop	r10
    5a08:	9f 90       	pop	r9
    5a0a:	8f 90       	pop	r8
    5a0c:	7f 90       	pop	r7
    5a0e:	08 95       	ret
                                nak_count++;
                                if (nak_count == nakLimit)
                                        return (rcode);
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    5a10:	c3 94       	inc	r12
                                if (retry_count == USB_RETRY_LIMIT)
    5a12:	83 e0       	ldi	r24, 0x03	; 3
    5a14:	c8 16       	cp	r12, r24
    5a16:	09 f0       	breq	.+2      	; 0x5a1a <usb_dispatchPacket+0xd6>
    5a18:	b5 cf       	rjmp	.-150    	; 0x5984 <usb_dispatchPacket+0x40>
    5a1a:	2e e0       	ldi	r18, 0x0E	; 14
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
    5a1e:	e9 cf       	rjmp	.-46     	; 0x59f2 <usb_dispatchPacket+0xae>


                switch (rcode)
                {
                        case hrNAK:
                                nak_count++;
    5a20:	21 96       	adiw	r28, 0x01	; 1
                                if (nak_count == nakLimit)
    5a22:	c8 15       	cp	r28, r8
    5a24:	d9 05       	cpc	r29, r9
    5a26:	09 f0       	breq	.+2      	; 0x5a2a <usb_dispatchPacket+0xe6>
    5a28:	ad cf       	rjmp	.-166    	; 0x5984 <usb_dispatchPacket+0x40>
    5a2a:	24 e0       	ldi	r18, 0x04	; 4
    5a2c:	30 e0       	ldi	r19, 0x00	; 0
    5a2e:	e1 cf       	rjmp	.-62     	; 0x59f2 <usb_dispatchPacket+0xae>
                // Launch the transfer.
                max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
                rcode = 0xff;

                // Wait for interrupt
                while (timeout > avr_millis())
    5a30:	2f ef       	ldi	r18, 0xFF	; 255
    5a32:	30 e0       	ldi	r19, 0x00	; 0
    5a34:	de cf       	rjmp	.-68     	; 0x59f2 <usb_dispatchPacket+0xae>

00005a36 <usb_read>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int usb_read(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data, unsigned int nakLimit)
{
    5a36:	6f 92       	push	r6
    5a38:	7f 92       	push	r7
    5a3a:	8f 92       	push	r8
    5a3c:	9f 92       	push	r9
    5a3e:	af 92       	push	r10
    5a40:	bf 92       	push	r11
    5a42:	cf 92       	push	r12
    5a44:	df 92       	push	r13
    5a46:	ef 92       	push	r14
    5a48:	ff 92       	push	r15
    5a4a:	0f 93       	push	r16
    5a4c:	1f 93       	push	r17
    5a4e:	cf 93       	push	r28
    5a50:	df 93       	push	r29
    5a52:	fc 01       	movw	r30, r24
    5a54:	7b 01       	movw	r14, r22
    5a56:	3a 01       	movw	r6, r20
    5a58:	69 01       	movw	r12, r18
    5a5a:	58 01       	movw	r10, r16
        uint16_t rcode, bytesRead;
        uint16_t maxPacketSize = endpoint->maxPacketSize;
    5a5c:	db 01       	movw	r26, r22
    5a5e:	12 96       	adiw	r26, 0x02	; 2
    5a60:	8d 90       	ld	r8, X+
    5a62:	9c 90       	ld	r9, X
    5a64:	13 97       	sbiw	r26, 0x03	; 3

        unsigned int totalTransferred = 0;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    5a66:	80 ee       	ldi	r24, 0xE0	; 224
    5a68:	60 81       	ld	r22, Z
    5a6a:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        // Set toggle value.
        max3421e_write(MAX_REG_HCTL, endpoint->receiveToggle);
    5a6e:	88 ee       	ldi	r24, 0xE8	; 232
    5a70:	f7 01       	movw	r30, r14
    5a72:	65 81       	ldd	r22, Z+5	; 0x05
    5a74:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
    5a78:	c0 e0       	ldi	r28, 0x00	; 0
    5a7a:	d0 e0       	ldi	r29, 0x00	; 0

        while (1)
        {

                // Start IN transfer
                rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);
    5a7c:	80 e0       	ldi	r24, 0x00	; 0
    5a7e:	b7 01       	movw	r22, r14
    5a80:	a5 01       	movw	r20, r10
    5a82:	0e 94 a2 2c 	call	0x5944	; 0x5944 <usb_dispatchPacket>

                if (rcode)
    5a86:	89 2b       	or	r24, r25
    5a88:	d1 f5       	brne	.+116    	; 0x5afe <usb_read+0xc8>

                        return -1;
                }

                // Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
                if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    5a8a:	88 ec       	ldi	r24, 0xC8	; 200
    5a8c:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    5a90:	82 ff       	sbrs	r24, 2
    5a92:	38 c0       	rjmp	.+112    	; 0x5b04 <usb_read+0xce>
                        // TODO: the absence of RCVDAVIRQ indicates a toggle error. Need to add handling for that.
                        return -2;
                }

                // Obtain the number of bytes in FIFO.
                bytesRead = max3421e_read(MAX_REG_RCVBC);
    5a94:	80 e3       	ldi	r24, 0x30	; 48
    5a96:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    5a9a:	68 2f       	mov	r22, r24
    5a9c:	08 2f       	mov	r16, r24
    5a9e:	10 e0       	ldi	r17, 0x00	; 0

                // Read the data from the FIFO.
                data = max3421e_readMultiple(MAX_REG_RCVFIFO, bytesRead, data);
    5aa0:	88 e0       	ldi	r24, 0x08	; 8
    5aa2:	a6 01       	movw	r20, r12
    5aa4:	0e 94 b1 29 	call	0x5362	; 0x5362 <max3421e_readMultiple>
    5aa8:	6c 01       	movw	r12, r24

                // Clear the interrupt to free the buffer.
                max3421e_write(MAX_REG_HIRQ, bmRCVDAVIRQ);
    5aaa:	88 ec       	ldi	r24, 0xC8	; 200
    5aac:	64 e0       	ldi	r22, 0x04	; 4
    5aae:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

                totalTransferred += bytesRead;
    5ab2:	c0 0f       	add	r28, r16
    5ab4:	d1 1f       	adc	r29, r17

                // Check if we're done reading. Either we've received a 'short' packet (<maxPacketSize), or the
                // desired number of bytes has been transferred.
                if ((bytesRead < maxPacketSize) || (totalTransferred >= length))
    5ab6:	08 15       	cp	r16, r8
    5ab8:	19 05       	cpc	r17, r9
    5aba:	18 f0       	brcs	.+6      	; 0x5ac2 <usb_read+0x8c>
    5abc:	c6 15       	cp	r28, r6
    5abe:	d7 05       	cpc	r29, r7
    5ac0:	e8 f2       	brcs	.-70     	; 0x5a7c <usb_read+0x46>
                {
                        // Remember the toggle value for the next transfer.
                        if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
    5ac2:	88 ef       	ldi	r24, 0xF8	; 248
    5ac4:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    5ac8:	84 ff       	sbrs	r24, 4
    5aca:	15 c0       	rjmp	.+42     	; 0x5af6 <usb_read+0xc0>
                                endpoint->receiveToggle = bmRCVTOG1;
    5acc:	80 e2       	ldi	r24, 0x20	; 32
    5ace:	d7 01       	movw	r26, r14
    5ad0:	15 96       	adiw	r26, 0x05	; 5
    5ad2:	8c 93       	st	X, r24
                        break;
                }
        }

        // Report success.
        return totalTransferred;
    5ad4:	9e 01       	movw	r18, r28
}
    5ad6:	c9 01       	movw	r24, r18
    5ad8:	df 91       	pop	r29
    5ada:	cf 91       	pop	r28
    5adc:	1f 91       	pop	r17
    5ade:	0f 91       	pop	r16
    5ae0:	ff 90       	pop	r15
    5ae2:	ef 90       	pop	r14
    5ae4:	df 90       	pop	r13
    5ae6:	cf 90       	pop	r12
    5ae8:	bf 90       	pop	r11
    5aea:	af 90       	pop	r10
    5aec:	9f 90       	pop	r9
    5aee:	8f 90       	pop	r8
    5af0:	7f 90       	pop	r7
    5af2:	6f 90       	pop	r6
    5af4:	08 95       	ret
                {
                        // Remember the toggle value for the next transfer.
                        if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
                                endpoint->receiveToggle = bmRCVTOG1;
                        else
                                endpoint->receiveToggle = bmRCVTOG0;
    5af6:	80 e1       	ldi	r24, 0x10	; 16
    5af8:	f7 01       	movw	r30, r14
    5afa:	85 83       	std	Z+5, r24	; 0x05
    5afc:	eb cf       	rjmp	.-42     	; 0x5ad4 <usb_read+0x9e>
        {

                // Start IN transfer
                rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);

                if (rcode)
    5afe:	2f ef       	ldi	r18, 0xFF	; 255
    5b00:	3f ef       	ldi	r19, 0xFF	; 255
    5b02:	e9 cf       	rjmp	.-46     	; 0x5ad6 <usb_read+0xa0>

                        return -1;
                }

                // Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
                if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    5b04:	2e ef       	ldi	r18, 0xFE	; 254
    5b06:	3f ef       	ldi	r19, 0xFF	; 255
    5b08:	e6 cf       	rjmp	.-52     	; 0x5ad6 <usb_read+0xa0>

00005b0a <usb_ctrlData>:
 * @param direction true for input, false for output.
 * @param length number of bytes to transfer.
 * @param data data buffer.
 */
uint8_t usb_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
    5b0a:	0f 93       	push	r16
    5b0c:	1f 93       	push	r17
    5b0e:	fc 01       	movw	r30, r24
        if (direction)
    5b10:	66 23       	and	r22, r22
    5b12:	51 f4       	brne	.+20     	; 0x5b28 <usb_ctrlData+0x1e>
                return usb_read(device, &(device->control), length, data, USB_NAK_LIMIT);

        } else
        {
                // OUT transfer
                device->control.sendToggle = bmSNDTOG1;
    5b14:	80 e8       	ldi	r24, 0x80	; 128
    5b16:	86 83       	std	Z+6, r24	; 0x06
                return usb_write(device, &(device->control), length, data);
    5b18:	cf 01       	movw	r24, r30
    5b1a:	32 96       	adiw	r30, 0x02	; 2
    5b1c:	bf 01       	movw	r22, r30
    5b1e:	0e 94 c0 2b 	call	0x5780	; 0x5780 <usb_write>
        }
}
    5b22:	1f 91       	pop	r17
    5b24:	0f 91       	pop	r16
    5b26:	08 95       	ret
uint8_t usb_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
        if (direction)
        {
                // IN transfer
                device->control.receiveToggle = bmRCVTOG1;
    5b28:	80 e2       	ldi	r24, 0x20	; 32
    5b2a:	87 83       	std	Z+7, r24	; 0x07
                return usb_read(device, &(device->control), length, data, USB_NAK_LIMIT);
    5b2c:	cf 01       	movw	r24, r30
    5b2e:	32 96       	adiw	r30, 0x02	; 2
    5b30:	bf 01       	movw	r22, r30
    5b32:	00 e0       	ldi	r16, 0x00	; 0
    5b34:	1d e7       	ldi	r17, 0x7D	; 125
    5b36:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <usb_read>
        {
                // OUT transfer
                device->control.sendToggle = bmSNDTOG1;
                return usb_write(device, &(device->control), length, data);
        }
}
    5b3a:	1f 91       	pop	r17
    5b3c:	0f 91       	pop	r16
    5b3e:	08 95       	ret

00005b40 <usb_controlRequest>:
                uint8_t valueLow,
                uint8_t valueHigh,
                uint16_t index,
                uint16_t length,
                uint8_t * data)
{
    5b40:	5f 92       	push	r5
    5b42:	6f 92       	push	r6
    5b44:	7f 92       	push	r7
    5b46:	8f 92       	push	r8
    5b48:	9f 92       	push	r9
    5b4a:	af 92       	push	r10
    5b4c:	bf 92       	push	r11
    5b4e:	cf 92       	push	r12
    5b50:	df 92       	push	r13
    5b52:	ef 92       	push	r14
    5b54:	ff 92       	push	r15
    5b56:	0f 93       	push	r16
    5b58:	1f 93       	push	r17
    5b5a:	df 93       	push	r29
    5b5c:	cf 93       	push	r28
    5b5e:	cd b7       	in	r28, 0x3d	; 61
    5b60:	de b7       	in	r29, 0x3e	; 62
    5b62:	28 97       	sbiw	r28, 0x08	; 8
    5b64:	0f b6       	in	r0, 0x3f	; 63
    5b66:	f8 94       	cli
    5b68:	de bf       	out	0x3e, r29	; 62
    5b6a:	0f be       	out	0x3f, r0	; 63
    5b6c:	cd bf       	out	0x3d, r28	; 61
    5b6e:	3c 01       	movw	r6, r24
    5b70:	56 2e       	mov	r5, r22
    5b72:	14 2f       	mov	r17, r20
    5b74:	82 2e       	mov	r8, r18
        boolean direction = false; //request direction, IN or OUT
        uint8_t rcode;
        usb_setupPacket setup_pkt;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    5b76:	80 ee       	ldi	r24, 0xE0	; 224
    5b78:	f3 01       	movw	r30, r6
    5b7a:	60 81       	ld	r22, Z
    5b7c:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>

        if (requestType & 0x80)
                direction = true; //determine request direction

        // Build setup packet.
        setup_pkt.bmRequestType = requestType;
    5b80:	59 82       	std	Y+1, r5	; 0x01
        setup_pkt.bRequest = request;
    5b82:	1a 83       	std	Y+2, r17	; 0x02
        setup_pkt.wValue = valueLow | (valueHigh << 8);
    5b84:	90 2f       	mov	r25, r16
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	99 24       	eor	r9, r9
    5b8a:	88 29       	or	r24, r8
    5b8c:	99 29       	or	r25, r9
    5b8e:	9c 83       	std	Y+4, r25	; 0x04
    5b90:	8b 83       	std	Y+3, r24	; 0x03
        setup_pkt.wIndex = index;
    5b92:	fe 82       	std	Y+6, r15	; 0x06
    5b94:	ed 82       	std	Y+5, r14	; 0x05
        setup_pkt.wLength = length;
    5b96:	d8 86       	std	Y+8, r13	; 0x08
    5b98:	cf 82       	std	Y+7, r12	; 0x07

        // Write setup packet to the FIFO and dispatch
        max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
    5b9a:	80 e2       	ldi	r24, 0x20	; 32
    5b9c:	68 e0       	ldi	r22, 0x08	; 8
    5b9e:	ae 01       	movw	r20, r28
    5ba0:	4f 5f       	subi	r20, 0xFF	; 255
    5ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba4:	0e 94 89 29 	call	0x5312	; 0x5312 <max3421e_writeMultiple>
        rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);
    5ba8:	83 01       	movw	r16, r6
    5baa:	0e 5f       	subi	r16, 0xFE	; 254
    5bac:	1f 4f       	sbci	r17, 0xFF	; 255
    5bae:	80 e1       	ldi	r24, 0x10	; 16
    5bb0:	b8 01       	movw	r22, r16
    5bb2:	40 e0       	ldi	r20, 0x00	; 0
    5bb4:	5d e7       	ldi	r21, 0x7D	; 125
    5bb6:	0e 94 a2 2c 	call	0x5944	; 0x5944 <usb_dispatchPacket>

        // Print error in case of failure.
        if (rcode)
    5bba:	88 23       	and	r24, r24
    5bbc:	c9 f0       	breq	.+50     	; 0x5bf0 <usb_controlRequest+0xb0>
    5bbe:	2f ef       	ldi	r18, 0xFF	; 255
    5bc0:	3f ef       	ldi	r19, 0xFF	; 255

        if (rcode)
                return -3;
        else
                return 0;
}
    5bc2:	c9 01       	movw	r24, r18
    5bc4:	28 96       	adiw	r28, 0x08	; 8
    5bc6:	0f b6       	in	r0, 0x3f	; 63
    5bc8:	f8 94       	cli
    5bca:	de bf       	out	0x3e, r29	; 62
    5bcc:	0f be       	out	0x3f, r0	; 63
    5bce:	cd bf       	out	0x3d, r28	; 61
    5bd0:	cf 91       	pop	r28
    5bd2:	df 91       	pop	r29
    5bd4:	1f 91       	pop	r17
    5bd6:	0f 91       	pop	r16
    5bd8:	ff 90       	pop	r15
    5bda:	ef 90       	pop	r14
    5bdc:	df 90       	pop	r13
    5bde:	cf 90       	pop	r12
    5be0:	bf 90       	pop	r11
    5be2:	af 90       	pop	r10
    5be4:	9f 90       	pop	r9
    5be6:	8f 90       	pop	r8
    5be8:	7f 90       	pop	r7
    5bea:	6f 90       	pop	r6
    5bec:	5f 90       	pop	r5
    5bee:	08 95       	ret
        // Write setup packet to the FIFO and dispatch
        max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
        rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);

        // Print error in case of failure.
        if (rcode)
    5bf0:	f5 2c       	mov	r15, r5
    5bf2:	ff 1c       	adc	r15, r15
    5bf4:	ff 24       	eor	r15, r15
    5bf6:	ff 1c       	adc	r15, r15
//              avr_serialPrintf("Setup packet error: 0x%02x\n", rcode);
                return -1;
        }

        // Data stage, if present
        if (data != NULL)
    5bf8:	a1 14       	cp	r10, r1
    5bfa:	b1 04       	cpc	r11, r1
    5bfc:	31 f0       	breq	.+12     	; 0x5c0a <usb_controlRequest+0xca>
        {
                rcode = usb_ctrlData(device, direction, length, data);
    5bfe:	c3 01       	movw	r24, r6
    5c00:	6f 2d       	mov	r22, r15
    5c02:	a6 01       	movw	r20, r12
    5c04:	95 01       	movw	r18, r10
    5c06:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <usb_ctrlData>
                        return -2;
                }
        }

        // Status stage.
        if (direction)
    5c0a:	ff 20       	and	r15, r15
    5c0c:	59 f0       	breq	.+22     	; 0x5c24 <usb_controlRequest+0xe4>
                rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
    5c0e:	80 ea       	ldi	r24, 0xA0	; 160
    5c10:	b8 01       	movw	r22, r16
    5c12:	40 e0       	ldi	r20, 0x00	; 0
    5c14:	5d e7       	ldi	r21, 0x7D	; 125
    5c16:	0e 94 a2 2c 	call	0x5944	; 0x5944 <usb_dispatchPacket>
        else
                rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);

        if (rcode)
    5c1a:	88 23       	and	r24, r24
    5c1c:	51 f4       	brne	.+20     	; 0x5c32 <usb_controlRequest+0xf2>
    5c1e:	20 e0       	ldi	r18, 0x00	; 0
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	cf cf       	rjmp	.-98     	; 0x5bc2 <usb_controlRequest+0x82>

        // Status stage.
        if (direction)
                rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
        else
                rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);
    5c24:	80 e8       	ldi	r24, 0x80	; 128
    5c26:	b8 01       	movw	r22, r16
    5c28:	40 e0       	ldi	r20, 0x00	; 0
    5c2a:	5d e7       	ldi	r21, 0x7D	; 125
    5c2c:	0e 94 a2 2c 	call	0x5944	; 0x5944 <usb_dispatchPacket>
    5c30:	f4 cf       	rjmp	.-24     	; 0x5c1a <usb_controlRequest+0xda>

        if (rcode)
    5c32:	2d ef       	ldi	r18, 0xFD	; 253
    5c34:	3f ef       	ldi	r19, 0xFF	; 255
    5c36:	c5 cf       	rjmp	.-118    	; 0x5bc2 <usb_controlRequest+0x82>

00005c38 <usb_setConfiguration>:
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
}

//set configuration
int usb_setConfiguration(usb_device * device, uint8_t configuration)
{
    5c38:	af 92       	push	r10
    5c3a:	bf 92       	push	r11
    5c3c:	cf 92       	push	r12
    5c3e:	df 92       	push	r13
    5c40:	ef 92       	push	r14
    5c42:	ff 92       	push	r15
    5c44:	0f 93       	push	r16
    5c46:	26 2f       	mov	r18, r22
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, configuration, 0x00, 0x0000, 0x0000, NULL));
    5c48:	60 e0       	ldi	r22, 0x00	; 0
    5c4a:	49 e0       	ldi	r20, 0x09	; 9
    5c4c:	00 e0       	ldi	r16, 0x00	; 0
    5c4e:	ee 24       	eor	r14, r14
    5c50:	ff 24       	eor	r15, r15
    5c52:	cc 24       	eor	r12, r12
    5c54:	dd 24       	eor	r13, r13
    5c56:	aa 24       	eor	r10, r10
    5c58:	bb 24       	eor	r11, r11
    5c5a:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <usb_controlRequest>
}
    5c5e:	0f 91       	pop	r16
    5c60:	ff 90       	pop	r15
    5c62:	ef 90       	pop	r14
    5c64:	df 90       	pop	r13
    5c66:	cf 90       	pop	r12
    5c68:	bf 90       	pop	r11
    5c6a:	af 90       	pop	r10
    5c6c:	08 95       	ret

00005c6e <usb_setAddress>:
 * @param device the 'zero' usb device (address 0, endpoint 0)
 * @param address the address to set for the newly connected device
 * @return 0 in case of success, error code otherwise
 */
int usb_setAddress(usb_device * device, uint8_t address)
{
    5c6e:	af 92       	push	r10
    5c70:	bf 92       	push	r11
    5c72:	cf 92       	push	r12
    5c74:	df 92       	push	r13
    5c76:	ef 92       	push	r14
    5c78:	ff 92       	push	r15
    5c7a:	0f 93       	push	r16
    5c7c:	26 2f       	mov	r18, r22
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
    5c7e:	60 e0       	ldi	r22, 0x00	; 0
    5c80:	45 e0       	ldi	r20, 0x05	; 5
    5c82:	00 e0       	ldi	r16, 0x00	; 0
    5c84:	ee 24       	eor	r14, r14
    5c86:	ff 24       	eor	r15, r15
    5c88:	cc 24       	eor	r12, r12
    5c8a:	dd 24       	eor	r13, r13
    5c8c:	aa 24       	eor	r10, r10
    5c8e:	bb 24       	eor	r11, r11
    5c90:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <usb_controlRequest>
}
    5c94:	0f 91       	pop	r16
    5c96:	ff 90       	pop	r15
    5c98:	ef 90       	pop	r14
    5c9a:	df 90       	pop	r13
    5c9c:	cf 90       	pop	r12
    5c9e:	bf 90       	pop	r11
    5ca0:	af 90       	pop	r10
    5ca2:	08 95       	ret

00005ca4 <usb_getConfigurationDescriptor>:
 * @param conf configuration number
 * @param length length of the data buffer. This method will not write beyond this boundary.
 * @return number of bytes read, or negative number in case of error.
 */
int usb_getConfigurationDescriptor(usb_device * device, uint8_t conf, uint16_t length, uint8_t * data)
{
    5ca4:	4f 92       	push	r4
    5ca6:	5f 92       	push	r5
    5ca8:	6f 92       	push	r6
    5caa:	7f 92       	push	r7
    5cac:	8f 92       	push	r8
    5cae:	9f 92       	push	r9
    5cb0:	af 92       	push	r10
    5cb2:	bf 92       	push	r11
    5cb4:	cf 92       	push	r12
    5cb6:	df 92       	push	r13
    5cb8:	ef 92       	push	r14
    5cba:	ff 92       	push	r15
    5cbc:	0f 93       	push	r16
    5cbe:	1f 93       	push	r17
    5cc0:	cf 93       	push	r28
    5cc2:	df 93       	push	r29
    5cc4:	4c 01       	movw	r8, r24
    5cc6:	16 2f       	mov	r17, r22
    5cc8:	3a 01       	movw	r6, r20
    5cca:	e9 01       	movw	r28, r18
        uint16_t descriptorLength;
        int rcode;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
    5ccc:	60 e8       	ldi	r22, 0x80	; 128
    5cce:	46 e0       	ldi	r20, 0x06	; 6
    5cd0:	21 2f       	mov	r18, r17
    5cd2:	02 e0       	ldi	r16, 0x02	; 2
    5cd4:	ee 24       	eor	r14, r14
    5cd6:	ff 24       	eor	r15, r15
    5cd8:	34 e0       	ldi	r19, 0x04	; 4
    5cda:	c3 2e       	mov	r12, r19
    5cdc:	d1 2c       	mov	r13, r1
    5cde:	5e 01       	movw	r10, r28
    5ce0:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <usb_controlRequest>
        if (rcode) return -1;
    5ce4:	89 2b       	or	r24, r25
    5ce6:	a1 f0       	breq	.+40     	; 0x5d10 <usb_getConfigurationDescriptor+0x6c>
    5ce8:	2f ef       	ldi	r18, 0xFF	; 255
    5cea:	3f ef       	ldi	r19, 0xFF	; 255
        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
        if (rcode) return -2;

        return length;
}
    5cec:	c9 01       	movw	r24, r18
    5cee:	df 91       	pop	r29
    5cf0:	cf 91       	pop	r28
    5cf2:	1f 91       	pop	r17
    5cf4:	0f 91       	pop	r16
    5cf6:	ff 90       	pop	r15
    5cf8:	ef 90       	pop	r14
    5cfa:	df 90       	pop	r13
    5cfc:	cf 90       	pop	r12
    5cfe:	bf 90       	pop	r11
    5d00:	af 90       	pop	r10
    5d02:	9f 90       	pop	r9
    5d04:	8f 90       	pop	r8
    5d06:	7f 90       	pop	r7
    5d08:	6f 90       	pop	r6
    5d0a:	5f 90       	pop	r5
    5d0c:	4f 90       	pop	r4
    5d0e:	08 95       	ret
        uint16_t descriptorLength;
        int rcode;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
        if (rcode) return -1;
    5d10:	9b 81       	ldd	r25, Y+3	; 0x03
    5d12:	80 e0       	ldi	r24, 0x00	; 0
    5d14:	2a 81       	ldd	r18, Y+2	; 0x02
    5d16:	42 2e       	mov	r4, r18
    5d18:	55 24       	eor	r5, r5
    5d1a:	48 2a       	or	r4, r24
    5d1c:	59 2a       	or	r5, r25
    5d1e:	64 14       	cp	r6, r4
    5d20:	75 04       	cpc	r7, r5
    5d22:	08 f4       	brcc	.+2      	; 0x5d26 <usb_getConfigurationDescriptor+0x82>
    5d24:	23 01       	movw	r4, r6

        descriptorLength = (data[3] << 8) | data[2];
        if (descriptorLength<length) length = descriptorLength;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
    5d26:	c4 01       	movw	r24, r8
    5d28:	60 e8       	ldi	r22, 0x80	; 128
    5d2a:	46 e0       	ldi	r20, 0x06	; 6
    5d2c:	21 2f       	mov	r18, r17
    5d2e:	02 e0       	ldi	r16, 0x02	; 2
    5d30:	ee 24       	eor	r14, r14
    5d32:	ff 24       	eor	r15, r15
    5d34:	62 01       	movw	r12, r4
    5d36:	5e 01       	movw	r10, r28
    5d38:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <usb_controlRequest>
        if (rcode) return -2;
    5d3c:	89 2b       	or	r24, r25
    5d3e:	11 f4       	brne	.+4      	; 0x5d44 <usb_getConfigurationDescriptor+0xa0>

        return length;
    5d40:	92 01       	movw	r18, r4
    5d42:	d4 cf       	rjmp	.-88     	; 0x5cec <usb_getConfigurationDescriptor+0x48>
        descriptorLength = (data[3] << 8) | data[2];
        if (descriptorLength<length) length = descriptorLength;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
        if (rcode) return -2;
    5d44:	2e ef       	ldi	r18, 0xFE	; 254
    5d46:	3f ef       	ldi	r19, 0xFF	; 255
    5d48:	d1 cf       	rjmp	.-94     	; 0x5cec <usb_getConfigurationDescriptor+0x48>

00005d4a <usb_getDeviceDescriptor>:
 * @param device USB device
 * @param descriptor pointer to a usb_deviceDescriptor record that will be filled with the requested data.
 * @return 0 in case of success, error code otherwise
 */
int usb_getDeviceDescriptor(usb_device * device, usb_deviceDescriptor * descriptor)
{
    5d4a:	af 92       	push	r10
    5d4c:	bf 92       	push	r11
    5d4e:	cf 92       	push	r12
    5d50:	df 92       	push	r13
    5d52:	ef 92       	push	r14
    5d54:	ff 92       	push	r15
    5d56:	0f 93       	push	r16
    5d58:	5b 01       	movw	r10, r22
        return(usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, sizeof(usb_deviceDescriptor), (uint8_t *)descriptor));
    5d5a:	60 e8       	ldi	r22, 0x80	; 128
    5d5c:	46 e0       	ldi	r20, 0x06	; 6
    5d5e:	20 e0       	ldi	r18, 0x00	; 0
    5d60:	01 e0       	ldi	r16, 0x01	; 1
    5d62:	ee 24       	eor	r14, r14
    5d64:	ff 24       	eor	r15, r15
    5d66:	52 e1       	ldi	r21, 0x12	; 18
    5d68:	c5 2e       	mov	r12, r21
    5d6a:	d1 2c       	mov	r13, r1
    5d6c:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <usb_controlRequest>
}
    5d70:	0f 91       	pop	r16
    5d72:	ff 90       	pop	r15
    5d74:	ef 90       	pop	r14
    5d76:	df 90       	pop	r13
    5d78:	cf 90       	pop	r12
    5d7a:	bf 90       	pop	r11
    5d7c:	af 90       	pop	r10
    5d7e:	08 95       	ret

00005d80 <usb_getString>:
 * @param length buffer length.
 * @param str target buffer.
 * @return 0 on success, error code otherwise.
 */
int usb_getString(usb_device * device, uint8_t index, uint8_t languageId, uint16_t length, char * str)
{
    5d80:	2f 92       	push	r2
    5d82:	3f 92       	push	r3
    5d84:	4f 92       	push	r4
    5d86:	5f 92       	push	r5
    5d88:	6f 92       	push	r6
    5d8a:	7f 92       	push	r7
    5d8c:	8f 92       	push	r8
    5d8e:	9f 92       	push	r9
    5d90:	af 92       	push	r10
    5d92:	bf 92       	push	r11
    5d94:	cf 92       	push	r12
    5d96:	df 92       	push	r13
    5d98:	ef 92       	push	r14
    5d9a:	ff 92       	push	r15
    5d9c:	0f 93       	push	r16
    5d9e:	1f 93       	push	r17
    5da0:	df 93       	push	r29
    5da2:	cf 93       	push	r28
    5da4:	0f 92       	push	r0
    5da6:	cd b7       	in	r28, 0x3d	; 61
    5da8:	de b7       	in	r29, 0x3e	; 62
    5daa:	3c 01       	movw	r6, r24
    5dac:	36 2e       	mov	r3, r22
    5dae:	24 2e       	mov	r2, r20
    5db0:	49 01       	movw	r8, r18
    5db2:	28 01       	movw	r4, r16
        uint8_t stringLength = 0;
    5db4:	19 82       	std	Y+1, r1	; 0x01
        int i, ret = 0;

    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    5db6:	60 e8       	ldi	r22, 0x80	; 128
    5db8:	46 e0       	ldi	r20, 0x06	; 6
    5dba:	23 2d       	mov	r18, r3
    5dbc:	03 e0       	ldi	r16, 0x03	; 3
    5dbe:	e2 2c       	mov	r14, r2
    5dc0:	ff 24       	eor	r15, r15
    5dc2:	71 e0       	ldi	r23, 0x01	; 1
    5dc4:	c7 2e       	mov	r12, r23
    5dc6:	d1 2c       	mov	r13, r1
    5dc8:	5e 01       	movw	r10, r28
    5dca:	08 94       	sec
    5dcc:	a1 1c       	adc	r10, r1
    5dce:	b1 1c       	adc	r11, r1
    5dd0:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <usb_controlRequest>
    if (ret<0) return -1;
    5dd4:	97 ff       	sbrs	r25, 7
    5dd6:	17 c0       	rjmp	.+46     	; 0x5e06 <usb_getString+0x86>
    5dd8:	2f ef       	ldi	r18, 0xFF	; 255
    5dda:	3f ef       	ldi	r19, 0xFF	; 255
        stringLength = (stringLength - 2) / 2;
        for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
        str[stringLength] = 0;

        return 0;
}
    5ddc:	c9 01       	movw	r24, r18
    5dde:	0f 90       	pop	r0
    5de0:	cf 91       	pop	r28
    5de2:	df 91       	pop	r29
    5de4:	1f 91       	pop	r17
    5de6:	0f 91       	pop	r16
    5de8:	ff 90       	pop	r15
    5dea:	ef 90       	pop	r14
    5dec:	df 90       	pop	r13
    5dee:	cf 90       	pop	r12
    5df0:	bf 90       	pop	r11
    5df2:	af 90       	pop	r10
    5df4:	9f 90       	pop	r9
    5df6:	8f 90       	pop	r8
    5df8:	7f 90       	pop	r7
    5dfa:	6f 90       	pop	r6
    5dfc:	5f 90       	pop	r5
    5dfe:	4f 90       	pop	r4
    5e00:	3f 90       	pop	r3
    5e02:	2f 90       	pop	r2
    5e04:	08 95       	ret
    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    5e06:	c9 80       	ldd	r12, Y+1	; 0x01
    5e08:	8c 2d       	mov	r24, r12
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	88 16       	cp	r8, r24
    5e0e:	99 06       	cpc	r9, r25
    5e10:	80 f1       	brcs	.+96     	; 0x5e72 <usb_getString+0xf2>

        // Get the whole thing.
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    5e12:	c3 01       	movw	r24, r6
    5e14:	60 e8       	ldi	r22, 0x80	; 128
    5e16:	46 e0       	ldi	r20, 0x06	; 6
    5e18:	23 2d       	mov	r18, r3
    5e1a:	03 e0       	ldi	r16, 0x03	; 3
    5e1c:	e2 2c       	mov	r14, r2
    5e1e:	ff 24       	eor	r15, r15
    5e20:	dd 24       	eor	r13, r13
    5e22:	52 01       	movw	r10, r4
    5e24:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <usb_controlRequest>
    if (ret<0) return -2;
    5e28:	97 fd       	sbrc	r25, 7
    5e2a:	26 c0       	rjmp	.+76     	; 0x5e78 <usb_getString+0xf8>

        // Convert to 8-bit ASCII
        stringLength = (stringLength - 2) / 2;
    5e2c:	89 81       	ldd	r24, Y+1	; 0x01
    5e2e:	28 2f       	mov	r18, r24
    5e30:	30 e0       	ldi	r19, 0x00	; 0
    5e32:	c9 01       	movw	r24, r18
    5e34:	02 97       	sbiw	r24, 0x02	; 2
    5e36:	97 fd       	sbrc	r25, 7
    5e38:	22 c0       	rjmp	.+68     	; 0x5e7e <usb_getString+0xfe>
    5e3a:	95 95       	asr	r25
    5e3c:	87 95       	ror	r24
    5e3e:	89 83       	std	Y+1, r24	; 0x01
        for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
    5e40:	88 23       	and	r24, r24
    5e42:	01 f1       	breq	.+64     	; 0x5e84 <usb_getString+0x104>
    5e44:	b2 01       	movw	r22, r4
    5e46:	f2 01       	movw	r30, r4
    5e48:	20 e0       	ldi	r18, 0x00	; 0
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	48 2f       	mov	r20, r24
    5e4e:	50 e0       	ldi	r21, 0x00	; 0
    5e50:	2f 5f       	subi	r18, 0xFF	; 255
    5e52:	3f 4f       	sbci	r19, 0xFF	; 255
    5e54:	82 81       	ldd	r24, Z+2	; 0x02
    5e56:	db 01       	movw	r26, r22
    5e58:	8d 93       	st	X+, r24
    5e5a:	bd 01       	movw	r22, r26
    5e5c:	32 96       	adiw	r30, 0x02	; 2
    5e5e:	da 01       	movw	r26, r20
    5e60:	24 17       	cp	r18, r20
    5e62:	35 07       	cpc	r19, r21
    5e64:	ac f3       	brlt	.-22     	; 0x5e50 <usb_getString+0xd0>
        str[stringLength] = 0;
    5e66:	a4 0d       	add	r26, r4
    5e68:	b5 1d       	adc	r27, r5
    5e6a:	1c 92       	st	X, r1
    5e6c:	20 e0       	ldi	r18, 0x00	; 0
    5e6e:	30 e0       	ldi	r19, 0x00	; 0
    5e70:	b5 cf       	rjmp	.-150    	; 0x5ddc <usb_getString+0x5c>
    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    5e72:	c8 2c       	mov	r12, r8
    5e74:	89 82       	std	Y+1, r8	; 0x01
    5e76:	cd cf       	rjmp	.-102    	; 0x5e12 <usb_getString+0x92>

        // Get the whole thing.
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    if (ret<0) return -2;
    5e78:	2e ef       	ldi	r18, 0xFE	; 254
    5e7a:	3f ef       	ldi	r19, 0xFF	; 255
    5e7c:	af cf       	rjmp	.-162    	; 0x5ddc <usb_getString+0x5c>

        // Convert to 8-bit ASCII
        stringLength = (stringLength - 2) / 2;
    5e7e:	c9 01       	movw	r24, r18
    5e80:	01 97       	sbiw	r24, 0x01	; 1
    5e82:	db cf       	rjmp	.-74     	; 0x5e3a <usb_getString+0xba>
    5e84:	a8 2f       	mov	r26, r24
    5e86:	b0 e0       	ldi	r27, 0x00	; 0
    5e88:	ee cf       	rjmp	.-36     	; 0x5e66 <usb_getString+0xe6>

00005e8a <usb_bulkRead>:
 * @param data target buffer.
 *
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
    5e8a:	0f 93       	push	r16
    5e8c:	1f 93       	push	r17
    5e8e:	cf 93       	push	r28
    5e90:	df 93       	push	r29
    5e92:	fc 01       	movw	r30, r24
    5e94:	db 01       	movw	r26, r22
    5e96:	ea 01       	movw	r28, r20
        return usb_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    5e98:	22 23       	and	r18, r18
    5e9a:	71 f4       	brne	.+28     	; 0x5eb8 <usb_bulkRead+0x2e>
    5e9c:	00 e0       	ldi	r16, 0x00	; 0
    5e9e:	1d e7       	ldi	r17, 0x7D	; 125
    5ea0:	cf 01       	movw	r24, r30
    5ea2:	38 96       	adiw	r30, 0x08	; 8
    5ea4:	bf 01       	movw	r22, r30
    5ea6:	ad 01       	movw	r20, r26
    5ea8:	9e 01       	movw	r18, r28
    5eaa:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <usb_read>
}
    5eae:	df 91       	pop	r29
    5eb0:	cf 91       	pop	r28
    5eb2:	1f 91       	pop	r17
    5eb4:	0f 91       	pop	r16
    5eb6:	08 95       	ret
 *
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
        return usb_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    5eb8:	01 e0       	ldi	r16, 0x01	; 1
    5eba:	10 e0       	ldi	r17, 0x00	; 0
    5ebc:	f1 cf       	rjmp	.-30     	; 0x5ea0 <usb_bulkRead+0x16>

00005ebe <usb_init>:
/**
 * Initialises the USB layer.
 */
void usb_init()
{
        max3421e_init();
    5ebe:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <max3421e_init>
        max3421e_powerOn();
    5ec2:	0e 94 4a 2a 	call	0x5494	; 0x5494 <max3421e_powerOn>

        uint8_t i;

        // Initialise the USB state machine.
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    5ec6:	81 e1       	ldi	r24, 0x11	; 17
    5ec8:	80 93 00 02 	sts	0x0200, r24

        // Initialise the device table.
        for (i = 0; i < (USB_NUMDEVICES + 1); i++)
                deviceTable[i].active = false;
    5ecc:	10 92 97 09 	sts	0x0997, r1
    5ed0:	10 92 ad 09 	sts	0x09AD, r1
    5ed4:	10 92 c3 09 	sts	0x09C3, r1

        // Address 0 is used to configure devices and assign them an address when they are first plugged in
        deviceTable[0].address = 0;
    5ed8:	10 92 96 09 	sts	0x0996, r1
        usb_initEndPoint(&(deviceTable[0].control), 0);
    5edc:	88 e9       	ldi	r24, 0x98	; 152
    5ede:	99 e0       	ldi	r25, 0x09	; 9
    5ee0:	60 e0       	ldi	r22, 0x00	; 0
    5ee2:	0e 94 32 29 	call	0x5264	; 0x5264 <usb_initEndPoint>

}
    5ee6:	08 95       	ret

00005ee8 <usb_poll>:

/**
 * USB main task. Performs enumeration/cleanup
 */
void usb_poll(void)
{
    5ee8:	1f 93       	push	r17
    5eea:	df 93       	push	r29
    5eec:	cf 93       	push	r28
    5eee:	cd b7       	in	r28, 0x3d	; 61
    5ef0:	de b7       	in	r29, 0x3e	; 62
    5ef2:	62 97       	sbiw	r28, 0x12	; 18
    5ef4:	0f b6       	in	r0, 0x3f	; 63
    5ef6:	f8 94       	cli
    5ef8:	de bf       	out	0x3e, r29	; 62
    5efa:	0f be       	out	0x3f, r0	; 63
    5efc:	cd bf       	out	0x3d, r28	; 61
        uint8_t tmpdata;
        static unsigned long delay = 0;
        usb_deviceDescriptor deviceDescriptor;

        // Poll the MAX3421E device.
        max3421e_poll();
    5efe:	0e 94 19 2a 	call	0x5432	; 0x5432 <max3421e_poll>

        /* modify USB task state if Vbus changed */
        tmpdata = max3421e_getVbusState();
    5f02:	0e 94 cc 29 	call	0x5398	; 0x5398 <max3421e_getVbusState>

        switch (tmpdata)
    5f06:	81 30       	cpi	r24, 0x01	; 1
    5f08:	09 f4       	brne	.+2      	; 0x5f0c <usb_poll+0x24>
    5f0a:	44 c0       	rjmp	.+136    	; 0x5f94 <usb_poll+0xac>
    5f0c:	81 30       	cpi	r24, 0x01	; 1
    5f0e:	a0 f4       	brcc	.+40     	; 0x5f38 <usb_poll+0x50>
        {
        case SE1: //illegal state
                usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
                break;
        case SE0: //disconnected
                if ((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    5f10:	10 91 00 02 	lds	r17, 0x0200
    5f14:	81 2f       	mov	r24, r17
    5f16:	80 7f       	andi	r24, 0xF0	; 240
    5f18:	80 31       	cpi	r24, 0x10	; 16
    5f1a:	c1 f0       	breq	.+48     	; 0x5f4c <usb_poll+0x64>
                {
                        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    5f1c:	81 e1       	ldi	r24, 0x11	; 17
    5f1e:	80 93 00 02 	sts	0x0200, r24
        case USB_DETACHED_SUBSTATE_INITIALIZE:

                // TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
                // devices.
                for (i = 1; i < USB_NUMDEVICES; i++)
                        if (deviceTable[i].active)
    5f22:	80 91 ad 09 	lds	r24, 0x09AD
    5f26:	88 23       	and	r24, r24
    5f28:	09 f0       	breq	.+2      	; 0x5f2c <usb_poll+0x44>
    5f2a:	ce c0       	rjmp	.+412    	; 0x60c8 <usb_poll+0x1e0>
                                usb_fireEvent(&(deviceTable[i]), USB_DISCONNECT);

                usb_init();
    5f2c:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <usb_init>
                usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    5f30:	82 e1       	ldi	r24, 0x12	; 18
    5f32:	80 93 00 02 	sts	0x0200, r24
    5f36:	31 c0       	rjmp	.+98     	; 0x5f9a <usb_poll+0xb2>
        max3421e_poll();

        /* modify USB task state if Vbus changed */
        tmpdata = max3421e_getVbusState();

        switch (tmpdata)
    5f38:	84 30       	cpi	r24, 0x04	; 4
    5f3a:	08 f0       	brcs	.+2      	; 0x5f3e <usb_poll+0x56>
    5f3c:	41 c0       	rjmp	.+130    	; 0x5fc0 <usb_poll+0xd8>
                        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
                }
                break;
        case FSHOST: //attached
        case LSHOST:
                if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
    5f3e:	10 91 00 02 	lds	r17, 0x0200
    5f42:	81 2f       	mov	r24, r17
    5f44:	80 7f       	andi	r24, 0xF0	; 240
    5f46:	80 31       	cpi	r24, 0x10	; 16
    5f48:	09 f4       	brne	.+2      	; 0x5f4c <usb_poll+0x64>
    5f4a:	7e c0       	rjmp	.+252    	; 0x6048 <usb_poll+0x160>
        }// switch( tmpdata

        //Serial.print("USB task state: ");
        //Serial.println( usb_task_state, HEX );

        switch (usb_task_state)
    5f4c:	10 34       	cpi	r17, 0x40	; 64
    5f4e:	e1 f1       	breq	.+120    	; 0x5fc8 <usb_poll+0xe0>
    5f50:	11 34       	cpi	r17, 0x41	; 65
    5f52:	68 f1       	brcs	.+90     	; 0x5fae <usb_poll+0xc6>
    5f54:	10 36       	cpi	r17, 0x60	; 96
    5f56:	09 f4       	brne	.+2      	; 0x5f5a <usb_poll+0x72>
    5f58:	56 c0       	rjmp	.+172    	; 0x6006 <usb_poll+0x11e>
    5f5a:	10 37       	cpi	r17, 0x70	; 112
    5f5c:	09 f4       	brne	.+2      	; 0x5f60 <usb_poll+0x78>
    5f5e:	99 c0       	rjmp	.+306    	; 0x6092 <usb_poll+0x1aa>
    5f60:	10 35       	cpi	r17, 0x50	; 80
    5f62:	d9 f4       	brne	.+54     	; 0x5f9a <usb_poll+0xb2>
                        delay = avr_millis() + 20; //20ms wait after reset per USB spec
                }
                break;

        case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                if (max3421e_read(MAX_REG_HIRQ) & bmFRAMEIRQ)
    5f64:	88 ec       	ldi	r24, 0xC8	; 200
    5f66:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    5f6a:	86 ff       	sbrs	r24, 6
    5f6c:	16 c0       	rjmp	.+44     	; 0x5f9a <usb_poll+0xb2>
                { //when first SOF received we can continue
                        if (delay < avr_millis())
    5f6e:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    5f72:	20 91 6a 09 	lds	r18, 0x096A
    5f76:	30 91 6b 09 	lds	r19, 0x096B
    5f7a:	40 91 6c 09 	lds	r20, 0x096C
    5f7e:	50 91 6d 09 	lds	r21, 0x096D
    5f82:	26 17       	cp	r18, r22
    5f84:	37 07       	cpc	r19, r23
    5f86:	48 07       	cpc	r20, r24
    5f88:	59 07       	cpc	r21, r25
    5f8a:	38 f4       	brcc	.+14     	; 0x5f9a <usb_poll+0xb2>
                        { //20ms passed
                                usb_task_state
    5f8c:	80 e6       	ldi	r24, 0x60	; 96
    5f8e:	80 93 00 02 	sts	0x0200, r24
    5f92:	03 c0       	rjmp	.+6      	; 0x5f9a <usb_poll+0xb2>
        tmpdata = max3421e_getVbusState();

        switch (tmpdata)
        {
        case SE1: //illegal state
                usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    5f94:	83 e1       	ldi	r24, 0x13	; 19
    5f96:	80 93 00 02 	sts	0x0200, r24
        case USB_STATE_RUNNING:
                break;
        case USB_STATE_ERROR:
                break;
        }
}
    5f9a:	62 96       	adiw	r28, 0x12	; 18
    5f9c:	0f b6       	in	r0, 0x3f	; 63
    5f9e:	f8 94       	cli
    5fa0:	de bf       	out	0x3e, r29	; 62
    5fa2:	0f be       	out	0x3f, r0	; 63
    5fa4:	cd bf       	out	0x3d, r28	; 61
    5fa6:	cf 91       	pop	r28
    5fa8:	df 91       	pop	r29
    5faa:	1f 91       	pop	r17
    5fac:	08 95       	ret
        }// switch( tmpdata

        //Serial.print("USB task state: ");
        //Serial.println( usb_task_state, HEX );

        switch (usb_task_state)
    5fae:	10 32       	cpi	r17, 0x20	; 32
    5fb0:	09 f4       	brne	.+2      	; 0x5fb4 <usb_poll+0xcc>
    5fb2:	5b c0       	rjmp	.+182    	; 0x606a <usb_poll+0x182>
    5fb4:	10 33       	cpi	r17, 0x30	; 48
    5fb6:	09 f4       	brne	.+2      	; 0x5fba <usb_poll+0xd2>
    5fb8:	3f c0       	rjmp	.+126    	; 0x6038 <usb_poll+0x150>
    5fba:	11 31       	cpi	r17, 0x11	; 17
    5fbc:	71 f7       	brne	.-36     	; 0x5f9a <usb_poll+0xb2>
    5fbe:	b1 cf       	rjmp	.-158    	; 0x5f22 <usb_poll+0x3a>
    5fc0:	10 91 00 02 	lds	r17, 0x0200
    5fc4:	10 34       	cpi	r17, 0x40	; 64
    5fc6:	21 f6       	brne	.-120    	; 0x5f50 <usb_poll+0x68>
                max3421e_write(MAX_REG_HCTL, bmBUSRST);
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
                break;

        case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                if ((max3421e_read(MAX_REG_HCTL) & bmBUSRST) == 0)
    5fc8:	88 ee       	ldi	r24, 0xE8	; 232
    5fca:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
    5fce:	80 fd       	sbrc	r24, 0
    5fd0:	e4 cf       	rjmp	.-56     	; 0x5f9a <usb_poll+0xb2>
                {
                        tmpdata = max3421e_read(MAX_REG_MODE) | bmSOFKAENAB; //start SOF generation
    5fd2:	88 ed       	ldi	r24, 0xD8	; 216
    5fd4:	0e 94 a5 29 	call	0x534a	; 0x534a <max3421e_read>
                        max3421e_write(MAX_REG_MODE, tmpdata);
    5fd8:	68 2f       	mov	r22, r24
    5fda:	68 60       	ori	r22, 0x08	; 8
    5fdc:	88 ed       	ldi	r24, 0xD8	; 216
    5fde:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
                        //                  max3421e_regWr( rMODE, bmSOFKAENAB );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    5fe2:	80 e5       	ldi	r24, 0x50	; 80
    5fe4:	80 93 00 02 	sts	0x0200, r24
                        delay = avr_millis() + 20; //20ms wait after reset per USB spec
    5fe8:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    5fec:	6c 5e       	subi	r22, 0xEC	; 236
    5fee:	7f 4f       	sbci	r23, 0xFF	; 255
    5ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff4:	60 93 6a 09 	sts	0x096A, r22
    5ff8:	70 93 6b 09 	sts	0x096B, r23
    5ffc:	80 93 6c 09 	sts	0x096C, r24
    6000:	90 93 6d 09 	sts	0x096D, r25
    6004:	ca cf       	rjmp	.-108    	; 0x5f9a <usb_poll+0xb2>
                break;

        case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
                // toggle( BPNT_0 );

                deviceTable[0].control.maxPacketSize = 8;
    6006:	88 e0       	ldi	r24, 0x08	; 8
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	90 93 9b 09 	sts	0x099B, r25
    600e:	80 93 9a 09 	sts	0x099A, r24

                rcode = usb_getDeviceDescriptor(&deviceTable[0], &deviceDescriptor);
    6012:	86 e9       	ldi	r24, 0x96	; 150
    6014:	99 e0       	ldi	r25, 0x09	; 9
    6016:	be 01       	movw	r22, r28
    6018:	6f 5f       	subi	r22, 0xFF	; 255
    601a:	7f 4f       	sbci	r23, 0xFF	; 255
    601c:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <usb_getDeviceDescriptor>
                if (rcode == 0)
    6020:	88 23       	and	r24, r24
    6022:	09 f0       	breq	.+2      	; 0x6026 <usb_poll+0x13e>
    6024:	4b c0       	rjmp	.+150    	; 0x60bc <usb_poll+0x1d4>
                {
                        deviceTable[0].control.maxPacketSize = deviceDescriptor.bMaxPacketSize0;
    6026:	88 85       	ldd	r24, Y+8	; 0x08
    6028:	80 93 9a 09 	sts	0x099A, r24
    602c:	10 92 9b 09 	sts	0x099B, r1
                        usb_task_state = USB_STATE_ADDRESSING;
    6030:	80 e7       	ldi	r24, 0x70	; 112
    6032:	80 93 00 02 	sts	0x0200, r24
    6036:	b1 cf       	rjmp	.-158    	; 0x5f9a <usb_poll+0xb2>
                }
                break;

        case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                // Issue bus reset.
                max3421e_write(MAX_REG_HCTL, bmBUSRST);
    6038:	88 ee       	ldi	r24, 0xE8	; 232
    603a:	61 e0       	ldi	r22, 0x01	; 1
    603c:	0e 94 7d 29 	call	0x52fa	; 0x52fa <max3421e_write>
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    6040:	80 e4       	ldi	r24, 0x40	; 64
    6042:	80 93 00 02 	sts	0x0200, r24
    6046:	a9 cf       	rjmp	.-174    	; 0x5f9a <usb_poll+0xb2>
                break;
        case FSHOST: //attached
        case LSHOST:
                if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
                {
                        delay = avr_millis() + USB_SETTLE_DELAY;
    6048:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    604c:	68 53       	subi	r22, 0x38	; 56
    604e:	7f 4f       	sbci	r23, 0xFF	; 255
    6050:	8f 4f       	sbci	r24, 0xFF	; 255
    6052:	9f 4f       	sbci	r25, 0xFF	; 255
    6054:	60 93 6a 09 	sts	0x096A, r22
    6058:	70 93 6b 09 	sts	0x096B, r23
    605c:	80 93 6c 09 	sts	0x096C, r24
    6060:	90 93 6d 09 	sts	0x096D, r25
                        usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    6064:	80 e2       	ldi	r24, 0x20	; 32
    6066:	80 93 00 02 	sts	0x0200, r24
        case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                break;
        case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                break;
        case USB_ATTACHED_SUBSTATE_SETTLE: //setlle time for just attached device
                if (delay < avr_millis())
    606a:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <avr_millis>
    606e:	20 91 6a 09 	lds	r18, 0x096A
    6072:	30 91 6b 09 	lds	r19, 0x096B
    6076:	40 91 6c 09 	lds	r20, 0x096C
    607a:	50 91 6d 09 	lds	r21, 0x096D
    607e:	26 17       	cp	r18, r22
    6080:	37 07       	cpc	r19, r23
    6082:	48 07       	cpc	r20, r24
    6084:	59 07       	cpc	r21, r25
    6086:	08 f0       	brcs	.+2      	; 0x608a <usb_poll+0x1a2>
    6088:	88 cf       	rjmp	.-240    	; 0x5f9a <usb_poll+0xb2>
                {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    608a:	80 e3       	ldi	r24, 0x30	; 48
    608c:	80 93 00 02 	sts	0x0200, r24
    6090:	84 cf       	rjmp	.-248    	; 0x5f9a <usb_poll+0xb2>
        case USB_STATE_ADDRESSING:

                // Look for an empty spot
                for (i = 1; i < USB_NUMDEVICES; i++)
                {
                        if (!deviceTable[i].active)
    6092:	80 91 ad 09 	lds	r24, 0x09AD
    6096:	88 23       	and	r24, r24
    6098:	e9 f0       	breq	.+58     	; 0x60d4 <usb_poll+0x1ec>
                }

                // If no vacant spot was found in the device table, fire an error.
                if (usb_task_state == USB_STATE_ADDRESSING)
                {
                        usb_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);
    609a:	82 ec       	ldi	r24, 0xC2	; 194
    609c:	99 e0       	ldi	r25, 0x09	; 9
    609e:	62 e0       	ldi	r22, 0x02	; 2
    60a0:	0e 94 2c 29 	call	0x5258	; 0x5258 <usb_fireEvent>

                        // No vacant place in devtable
                        usb_error = 0xfe;
    60a4:	8e ef       	ldi	r24, 0xFE	; 254
    60a6:	80 93 69 09 	sts	0x0969, r24
                        usb_task_state = USB_STATE_ERROR;
    60aa:	80 ea       	ldi	r24, 0xA0	; 160
    60ac:	80 93 00 02 	sts	0x0200, r24
    60b0:	74 cf       	rjmp	.-280    	; 0x5f9a <usb_poll+0xb2>
                                        // NB: I've bypassed the configuring state, because configuration should be handled
                                        // in the usb event handler.
                                        usb_task_state = USB_STATE_RUNNING;
                                } else
                                {
                                        usb_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);
    60b2:	8c ea       	ldi	r24, 0xAC	; 172
    60b4:	99 e0       	ldi	r25, 0x09	; 9
    60b6:	62 e0       	ldi	r22, 0x02	; 2
    60b8:	0e 94 2c 29 	call	0x5258	; 0x5258 <usb_fireEvent>

                                        // TODO remove usb_error at some point?
                                        usb_error = USB_STATE_ADDRESSING;
    60bc:	10 93 69 09 	sts	0x0969, r17
                                        usb_task_state = USB_STATE_ERROR;
    60c0:	80 ea       	ldi	r24, 0xA0	; 160
    60c2:	80 93 00 02 	sts	0x0200, r24
    60c6:	69 cf       	rjmp	.-302    	; 0x5f9a <usb_poll+0xb2>

                // TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
                // devices.
                for (i = 1; i < USB_NUMDEVICES; i++)
                        if (deviceTable[i].active)
                                usb_fireEvent(&(deviceTable[i]), USB_DISCONNECT);
    60c8:	8c ea       	ldi	r24, 0xAC	; 172
    60ca:	99 e0       	ldi	r25, 0x09	; 9
    60cc:	61 e0       	ldi	r22, 0x01	; 1
    60ce:	0e 94 2c 29 	call	0x5258	; 0x5258 <usb_fireEvent>
    60d2:	2c cf       	rjmp	.-424    	; 0x5f2c <usb_poll+0x44>
                        if (!deviceTable[i].active)
                        {
                                // Set correct MaxPktSize
                                // deviceTable[i].epinfo = deviceTable[0].epinfo;

                                deviceTable[i].address = i;
    60d4:	81 e0       	ldi	r24, 0x01	; 1
    60d6:	80 93 ac 09 	sts	0x09AC, r24
                                deviceTable[i].active = true;
    60da:	80 93 ad 09 	sts	0x09AD, r24

                                usb_initEndPoint(&(deviceTable[i].control), 0);
    60de:	8e ea       	ldi	r24, 0xAE	; 174
    60e0:	99 e0       	ldi	r25, 0x09	; 9
    60e2:	60 e0       	ldi	r22, 0x00	; 0
    60e4:	0e 94 32 29 	call	0x5264	; 0x5264 <usb_initEndPoint>

                                //temporary record
                                //until plugged with real device endpoint structure
                                rcode = usb_setAddress(&deviceTable[0], i);
    60e8:	86 e9       	ldi	r24, 0x96	; 150
    60ea:	99 e0       	ldi	r25, 0x09	; 9
    60ec:	61 e0       	ldi	r22, 0x01	; 1
    60ee:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <usb_setAddress>

                                if (rcode == 0)
    60f2:	88 23       	and	r24, r24
    60f4:	f1 f6       	brne	.-68     	; 0x60b2 <usb_poll+0x1ca>
                                {
                                        usb_fireEvent(&deviceTable[i], USB_CONNECT);
    60f6:	8c ea       	ldi	r24, 0xAC	; 172
    60f8:	99 e0       	ldi	r25, 0x09	; 9
    60fa:	60 e0       	ldi	r22, 0x00	; 0
    60fc:	0e 94 2c 29 	call	0x5258	; 0x5258 <usb_fireEvent>
                                        // usb_task_state = USB_STATE_CONFIGURING;
                                        // NB: I've bypassed the configuring state, because configuration should be handled
                                        // in the usb event handler.
                                        usb_task_state = USB_STATE_RUNNING;
    6100:	80 e9       	ldi	r24, 0x90	; 144
    6102:	80 93 00 02 	sts	0x0200, r24
    6106:	49 cf       	rjmp	.-366    	; 0x5f9a <usb_poll+0xb2>

00006108 <__subsf3>:
    6108:	50 58       	subi	r21, 0x80	; 128

0000610a <__addsf3>:
    610a:	bb 27       	eor	r27, r27
    610c:	aa 27       	eor	r26, r26
    610e:	0e d0       	rcall	.+28     	; 0x612c <__addsf3x>
    6110:	11 c2       	rjmp	.+1058   	; 0x6534 <__fp_round>
    6112:	02 d2       	rcall	.+1028   	; 0x6518 <__fp_pscA>
    6114:	30 f0       	brcs	.+12     	; 0x6122 <__addsf3+0x18>
    6116:	07 d2       	rcall	.+1038   	; 0x6526 <__fp_pscB>
    6118:	20 f0       	brcs	.+8      	; 0x6122 <__addsf3+0x18>
    611a:	31 f4       	brne	.+12     	; 0x6128 <__addsf3+0x1e>
    611c:	9f 3f       	cpi	r25, 0xFF	; 255
    611e:	11 f4       	brne	.+4      	; 0x6124 <__addsf3+0x1a>
    6120:	1e f4       	brtc	.+6      	; 0x6128 <__addsf3+0x1e>
    6122:	d2 c1       	rjmp	.+932    	; 0x64c8 <__fp_nan>
    6124:	0e f4       	brtc	.+2      	; 0x6128 <__addsf3+0x1e>
    6126:	e0 95       	com	r30
    6128:	e7 fb       	bst	r30, 7
    612a:	9f c1       	rjmp	.+830    	; 0x646a <__fp_inf>

0000612c <__addsf3x>:
    612c:	e9 2f       	mov	r30, r25
    612e:	13 d2       	rcall	.+1062   	; 0x6556 <__fp_split3>
    6130:	80 f3       	brcs	.-32     	; 0x6112 <__addsf3+0x8>
    6132:	ba 17       	cp	r27, r26
    6134:	62 07       	cpc	r22, r18
    6136:	73 07       	cpc	r23, r19
    6138:	84 07       	cpc	r24, r20
    613a:	95 07       	cpc	r25, r21
    613c:	18 f0       	brcs	.+6      	; 0x6144 <__addsf3x+0x18>
    613e:	71 f4       	brne	.+28     	; 0x615c <__addsf3x+0x30>
    6140:	9e f5       	brtc	.+102    	; 0x61a8 <__addsf3x+0x7c>
    6142:	42 c2       	rjmp	.+1156   	; 0x65c8 <__fp_zero>
    6144:	0e f4       	brtc	.+2      	; 0x6148 <__addsf3x+0x1c>
    6146:	e0 95       	com	r30
    6148:	0b 2e       	mov	r0, r27
    614a:	ba 2f       	mov	r27, r26
    614c:	a0 2d       	mov	r26, r0
    614e:	0b 01       	movw	r0, r22
    6150:	b9 01       	movw	r22, r18
    6152:	90 01       	movw	r18, r0
    6154:	0c 01       	movw	r0, r24
    6156:	ca 01       	movw	r24, r20
    6158:	a0 01       	movw	r20, r0
    615a:	11 24       	eor	r1, r1
    615c:	ff 27       	eor	r31, r31
    615e:	59 1b       	sub	r21, r25
    6160:	99 f0       	breq	.+38     	; 0x6188 <__addsf3x+0x5c>
    6162:	59 3f       	cpi	r21, 0xF9	; 249
    6164:	50 f4       	brcc	.+20     	; 0x617a <__addsf3x+0x4e>
    6166:	50 3e       	cpi	r21, 0xE0	; 224
    6168:	68 f1       	brcs	.+90     	; 0x61c4 <__addsf3x+0x98>
    616a:	1a 16       	cp	r1, r26
    616c:	f0 40       	sbci	r31, 0x00	; 0
    616e:	a2 2f       	mov	r26, r18
    6170:	23 2f       	mov	r18, r19
    6172:	34 2f       	mov	r19, r20
    6174:	44 27       	eor	r20, r20
    6176:	58 5f       	subi	r21, 0xF8	; 248
    6178:	f3 cf       	rjmp	.-26     	; 0x6160 <__addsf3x+0x34>
    617a:	46 95       	lsr	r20
    617c:	37 95       	ror	r19
    617e:	27 95       	ror	r18
    6180:	a7 95       	ror	r26
    6182:	f0 40       	sbci	r31, 0x00	; 0
    6184:	53 95       	inc	r21
    6186:	c9 f7       	brne	.-14     	; 0x617a <__addsf3x+0x4e>
    6188:	7e f4       	brtc	.+30     	; 0x61a8 <__addsf3x+0x7c>
    618a:	1f 16       	cp	r1, r31
    618c:	ba 0b       	sbc	r27, r26
    618e:	62 0b       	sbc	r22, r18
    6190:	73 0b       	sbc	r23, r19
    6192:	84 0b       	sbc	r24, r20
    6194:	ba f0       	brmi	.+46     	; 0x61c4 <__addsf3x+0x98>
    6196:	91 50       	subi	r25, 0x01	; 1
    6198:	a1 f0       	breq	.+40     	; 0x61c2 <__addsf3x+0x96>
    619a:	ff 0f       	add	r31, r31
    619c:	bb 1f       	adc	r27, r27
    619e:	66 1f       	adc	r22, r22
    61a0:	77 1f       	adc	r23, r23
    61a2:	88 1f       	adc	r24, r24
    61a4:	c2 f7       	brpl	.-16     	; 0x6196 <__addsf3x+0x6a>
    61a6:	0e c0       	rjmp	.+28     	; 0x61c4 <__addsf3x+0x98>
    61a8:	ba 0f       	add	r27, r26
    61aa:	62 1f       	adc	r22, r18
    61ac:	73 1f       	adc	r23, r19
    61ae:	84 1f       	adc	r24, r20
    61b0:	48 f4       	brcc	.+18     	; 0x61c4 <__addsf3x+0x98>
    61b2:	87 95       	ror	r24
    61b4:	77 95       	ror	r23
    61b6:	67 95       	ror	r22
    61b8:	b7 95       	ror	r27
    61ba:	f7 95       	ror	r31
    61bc:	9e 3f       	cpi	r25, 0xFE	; 254
    61be:	08 f0       	brcs	.+2      	; 0x61c2 <__addsf3x+0x96>
    61c0:	b3 cf       	rjmp	.-154    	; 0x6128 <__addsf3+0x1e>
    61c2:	93 95       	inc	r25
    61c4:	88 0f       	add	r24, r24
    61c6:	08 f0       	brcs	.+2      	; 0x61ca <__addsf3x+0x9e>
    61c8:	99 27       	eor	r25, r25
    61ca:	ee 0f       	add	r30, r30
    61cc:	97 95       	ror	r25
    61ce:	87 95       	ror	r24
    61d0:	08 95       	ret

000061d2 <atan>:
    61d2:	df 93       	push	r29
    61d4:	dd 27       	eor	r29, r29
    61d6:	b9 2f       	mov	r27, r25
    61d8:	bf 77       	andi	r27, 0x7F	; 127
    61da:	40 e8       	ldi	r20, 0x80	; 128
    61dc:	5f e3       	ldi	r21, 0x3F	; 63
    61de:	16 16       	cp	r1, r22
    61e0:	17 06       	cpc	r1, r23
    61e2:	48 07       	cpc	r20, r24
    61e4:	5b 07       	cpc	r21, r27
    61e6:	10 f4       	brcc	.+4      	; 0x61ec <atan+0x1a>
    61e8:	d9 2f       	mov	r29, r25
    61ea:	f9 d1       	rcall	.+1010   	; 0x65de <inverse>
    61ec:	9f 93       	push	r25
    61ee:	8f 93       	push	r24
    61f0:	7f 93       	push	r23
    61f2:	6f 93       	push	r22
    61f4:	23 d3       	rcall	.+1606   	; 0x683c <square>
    61f6:	ec e1       	ldi	r30, 0x1C	; 28
    61f8:	f2 e0       	ldi	r31, 0x02	; 2
    61fa:	69 d1       	rcall	.+722    	; 0x64ce <__fp_powser>
    61fc:	9b d1       	rcall	.+822    	; 0x6534 <__fp_round>
    61fe:	2f 91       	pop	r18
    6200:	3f 91       	pop	r19
    6202:	4f 91       	pop	r20
    6204:	5f 91       	pop	r21
    6206:	61 d2       	rcall	.+1218   	; 0x66ca <__mulsf3x>
    6208:	dd 23       	and	r29, r29
    620a:	49 f0       	breq	.+18     	; 0x621e <atan+0x4c>
    620c:	90 58       	subi	r25, 0x80	; 128
    620e:	a2 ea       	ldi	r26, 0xA2	; 162
    6210:	2a ed       	ldi	r18, 0xDA	; 218
    6212:	3f e0       	ldi	r19, 0x0F	; 15
    6214:	49 ec       	ldi	r20, 0xC9	; 201
    6216:	5f e3       	ldi	r21, 0x3F	; 63
    6218:	d0 78       	andi	r29, 0x80	; 128
    621a:	5d 27       	eor	r21, r29
    621c:	87 df       	rcall	.-242    	; 0x612c <__addsf3x>
    621e:	df 91       	pop	r29
    6220:	89 c1       	rjmp	.+786    	; 0x6534 <__fp_round>

00006222 <ceil>:
    6222:	bb d1       	rcall	.+886    	; 0x659a <__fp_trunc>
    6224:	80 f0       	brcs	.+32     	; 0x6246 <ceil+0x24>
    6226:	9f 37       	cpi	r25, 0x7F	; 127
    6228:	40 f4       	brcc	.+16     	; 0x623a <ceil+0x18>
    622a:	91 11       	cpse	r25, r1
    622c:	0e f4       	brtc	.+2      	; 0x6230 <ceil+0xe>
    622e:	cd c1       	rjmp	.+922    	; 0x65ca <__fp_szero>
    6230:	60 e0       	ldi	r22, 0x00	; 0
    6232:	70 e0       	ldi	r23, 0x00	; 0
    6234:	80 e8       	ldi	r24, 0x80	; 128
    6236:	9f e3       	ldi	r25, 0x3F	; 63
    6238:	08 95       	ret
    623a:	26 f0       	brts	.+8      	; 0x6244 <ceil+0x22>
    623c:	1b 16       	cp	r1, r27
    623e:	61 1d       	adc	r22, r1
    6240:	71 1d       	adc	r23, r1
    6242:	81 1d       	adc	r24, r1
    6244:	18 c1       	rjmp	.+560    	; 0x6476 <__fp_mintl>
    6246:	32 c1       	rjmp	.+612    	; 0x64ac <__fp_mpack>

00006248 <__cmpsf2>:
    6248:	ec d0       	rcall	.+472    	; 0x6422 <__fp_cmp>
    624a:	08 f4       	brcc	.+2      	; 0x624e <__cmpsf2+0x6>
    624c:	81 e0       	ldi	r24, 0x01	; 1
    624e:	08 95       	ret

00006250 <__divsf3>:
    6250:	0c d0       	rcall	.+24     	; 0x626a <__divsf3x>
    6252:	70 c1       	rjmp	.+736    	; 0x6534 <__fp_round>
    6254:	68 d1       	rcall	.+720    	; 0x6526 <__fp_pscB>
    6256:	40 f0       	brcs	.+16     	; 0x6268 <__divsf3+0x18>
    6258:	5f d1       	rcall	.+702    	; 0x6518 <__fp_pscA>
    625a:	30 f0       	brcs	.+12     	; 0x6268 <__divsf3+0x18>
    625c:	21 f4       	brne	.+8      	; 0x6266 <__divsf3+0x16>
    625e:	5f 3f       	cpi	r21, 0xFF	; 255
    6260:	19 f0       	breq	.+6      	; 0x6268 <__divsf3+0x18>
    6262:	03 c1       	rjmp	.+518    	; 0x646a <__fp_inf>
    6264:	51 11       	cpse	r21, r1
    6266:	b1 c1       	rjmp	.+866    	; 0x65ca <__fp_szero>
    6268:	2f c1       	rjmp	.+606    	; 0x64c8 <__fp_nan>

0000626a <__divsf3x>:
    626a:	75 d1       	rcall	.+746    	; 0x6556 <__fp_split3>
    626c:	98 f3       	brcs	.-26     	; 0x6254 <__divsf3+0x4>

0000626e <__divsf3_pse>:
    626e:	99 23       	and	r25, r25
    6270:	c9 f3       	breq	.-14     	; 0x6264 <__divsf3+0x14>
    6272:	55 23       	and	r21, r21
    6274:	b1 f3       	breq	.-20     	; 0x6262 <__divsf3+0x12>
    6276:	95 1b       	sub	r25, r21
    6278:	55 0b       	sbc	r21, r21
    627a:	bb 27       	eor	r27, r27
    627c:	aa 27       	eor	r26, r26
    627e:	62 17       	cp	r22, r18
    6280:	73 07       	cpc	r23, r19
    6282:	84 07       	cpc	r24, r20
    6284:	38 f0       	brcs	.+14     	; 0x6294 <__divsf3_pse+0x26>
    6286:	9f 5f       	subi	r25, 0xFF	; 255
    6288:	5f 4f       	sbci	r21, 0xFF	; 255
    628a:	22 0f       	add	r18, r18
    628c:	33 1f       	adc	r19, r19
    628e:	44 1f       	adc	r20, r20
    6290:	aa 1f       	adc	r26, r26
    6292:	a9 f3       	breq	.-22     	; 0x627e <__divsf3_pse+0x10>
    6294:	33 d0       	rcall	.+102    	; 0x62fc <__divsf3_pse+0x8e>
    6296:	0e 2e       	mov	r0, r30
    6298:	3a f0       	brmi	.+14     	; 0x62a8 <__divsf3_pse+0x3a>
    629a:	e0 e8       	ldi	r30, 0x80	; 128
    629c:	30 d0       	rcall	.+96     	; 0x62fe <__divsf3_pse+0x90>
    629e:	91 50       	subi	r25, 0x01	; 1
    62a0:	50 40       	sbci	r21, 0x00	; 0
    62a2:	e6 95       	lsr	r30
    62a4:	00 1c       	adc	r0, r0
    62a6:	ca f7       	brpl	.-14     	; 0x629a <__divsf3_pse+0x2c>
    62a8:	29 d0       	rcall	.+82     	; 0x62fc <__divsf3_pse+0x8e>
    62aa:	fe 2f       	mov	r31, r30
    62ac:	27 d0       	rcall	.+78     	; 0x62fc <__divsf3_pse+0x8e>
    62ae:	66 0f       	add	r22, r22
    62b0:	77 1f       	adc	r23, r23
    62b2:	88 1f       	adc	r24, r24
    62b4:	bb 1f       	adc	r27, r27
    62b6:	26 17       	cp	r18, r22
    62b8:	37 07       	cpc	r19, r23
    62ba:	48 07       	cpc	r20, r24
    62bc:	ab 07       	cpc	r26, r27
    62be:	b0 e8       	ldi	r27, 0x80	; 128
    62c0:	09 f0       	breq	.+2      	; 0x62c4 <__divsf3_pse+0x56>
    62c2:	bb 0b       	sbc	r27, r27
    62c4:	80 2d       	mov	r24, r0
    62c6:	bf 01       	movw	r22, r30
    62c8:	ff 27       	eor	r31, r31
    62ca:	93 58       	subi	r25, 0x83	; 131
    62cc:	5f 4f       	sbci	r21, 0xFF	; 255
    62ce:	2a f0       	brmi	.+10     	; 0x62da <__divsf3_pse+0x6c>
    62d0:	9e 3f       	cpi	r25, 0xFE	; 254
    62d2:	51 05       	cpc	r21, r1
    62d4:	68 f0       	brcs	.+26     	; 0x62f0 <__divsf3_pse+0x82>
    62d6:	c9 c0       	rjmp	.+402    	; 0x646a <__fp_inf>
    62d8:	78 c1       	rjmp	.+752    	; 0x65ca <__fp_szero>
    62da:	5f 3f       	cpi	r21, 0xFF	; 255
    62dc:	ec f3       	brlt	.-6      	; 0x62d8 <__divsf3_pse+0x6a>
    62de:	98 3e       	cpi	r25, 0xE8	; 232
    62e0:	dc f3       	brlt	.-10     	; 0x62d8 <__divsf3_pse+0x6a>
    62e2:	86 95       	lsr	r24
    62e4:	77 95       	ror	r23
    62e6:	67 95       	ror	r22
    62e8:	b7 95       	ror	r27
    62ea:	f7 95       	ror	r31
    62ec:	9f 5f       	subi	r25, 0xFF	; 255
    62ee:	c9 f7       	brne	.-14     	; 0x62e2 <__divsf3_pse+0x74>
    62f0:	88 0f       	add	r24, r24
    62f2:	91 1d       	adc	r25, r1
    62f4:	96 95       	lsr	r25
    62f6:	87 95       	ror	r24
    62f8:	97 f9       	bld	r25, 7
    62fa:	08 95       	ret
    62fc:	e1 e0       	ldi	r30, 0x01	; 1
    62fe:	66 0f       	add	r22, r22
    6300:	77 1f       	adc	r23, r23
    6302:	88 1f       	adc	r24, r24
    6304:	bb 1f       	adc	r27, r27
    6306:	62 17       	cp	r22, r18
    6308:	73 07       	cpc	r23, r19
    630a:	84 07       	cpc	r24, r20
    630c:	ba 07       	cpc	r27, r26
    630e:	20 f0       	brcs	.+8      	; 0x6318 <__divsf3_pse+0xaa>
    6310:	62 1b       	sub	r22, r18
    6312:	73 0b       	sbc	r23, r19
    6314:	84 0b       	sbc	r24, r20
    6316:	ba 0b       	sbc	r27, r26
    6318:	ee 1f       	adc	r30, r30
    631a:	88 f7       	brcc	.-30     	; 0x62fe <__divsf3_pse+0x90>
    631c:	e0 95       	com	r30
    631e:	08 95       	ret

00006320 <__fixsfsi>:
    6320:	04 d0       	rcall	.+8      	; 0x632a <__fixunssfsi>
    6322:	68 94       	set
    6324:	b1 11       	cpse	r27, r1
    6326:	51 c1       	rjmp	.+674    	; 0x65ca <__fp_szero>
    6328:	08 95       	ret

0000632a <__fixunssfsi>:
    632a:	1d d1       	rcall	.+570    	; 0x6566 <__fp_splitA>
    632c:	88 f0       	brcs	.+34     	; 0x6350 <__fixunssfsi+0x26>
    632e:	9f 57       	subi	r25, 0x7F	; 127
    6330:	90 f0       	brcs	.+36     	; 0x6356 <__fixunssfsi+0x2c>
    6332:	b9 2f       	mov	r27, r25
    6334:	99 27       	eor	r25, r25
    6336:	b7 51       	subi	r27, 0x17	; 23
    6338:	a0 f0       	brcs	.+40     	; 0x6362 <__fixunssfsi+0x38>
    633a:	d1 f0       	breq	.+52     	; 0x6370 <__fixunssfsi+0x46>
    633c:	66 0f       	add	r22, r22
    633e:	77 1f       	adc	r23, r23
    6340:	88 1f       	adc	r24, r24
    6342:	99 1f       	adc	r25, r25
    6344:	1a f0       	brmi	.+6      	; 0x634c <__fixunssfsi+0x22>
    6346:	ba 95       	dec	r27
    6348:	c9 f7       	brne	.-14     	; 0x633c <__fixunssfsi+0x12>
    634a:	12 c0       	rjmp	.+36     	; 0x6370 <__fixunssfsi+0x46>
    634c:	b1 30       	cpi	r27, 0x01	; 1
    634e:	81 f0       	breq	.+32     	; 0x6370 <__fixunssfsi+0x46>
    6350:	3b d1       	rcall	.+630    	; 0x65c8 <__fp_zero>
    6352:	b1 e0       	ldi	r27, 0x01	; 1
    6354:	08 95       	ret
    6356:	38 c1       	rjmp	.+624    	; 0x65c8 <__fp_zero>
    6358:	67 2f       	mov	r22, r23
    635a:	78 2f       	mov	r23, r24
    635c:	88 27       	eor	r24, r24
    635e:	b8 5f       	subi	r27, 0xF8	; 248
    6360:	39 f0       	breq	.+14     	; 0x6370 <__fixunssfsi+0x46>
    6362:	b9 3f       	cpi	r27, 0xF9	; 249
    6364:	cc f3       	brlt	.-14     	; 0x6358 <__fixunssfsi+0x2e>
    6366:	86 95       	lsr	r24
    6368:	77 95       	ror	r23
    636a:	67 95       	ror	r22
    636c:	b3 95       	inc	r27
    636e:	d9 f7       	brne	.-10     	; 0x6366 <__fixunssfsi+0x3c>
    6370:	3e f4       	brtc	.+14     	; 0x6380 <__fixunssfsi+0x56>
    6372:	90 95       	com	r25
    6374:	80 95       	com	r24
    6376:	70 95       	com	r23
    6378:	61 95       	neg	r22
    637a:	7f 4f       	sbci	r23, 0xFF	; 255
    637c:	8f 4f       	sbci	r24, 0xFF	; 255
    637e:	9f 4f       	sbci	r25, 0xFF	; 255
    6380:	08 95       	ret

00006382 <__floatunsisf>:
    6382:	e8 94       	clt
    6384:	09 c0       	rjmp	.+18     	; 0x6398 <__floatsisf+0x12>

00006386 <__floatsisf>:
    6386:	97 fb       	bst	r25, 7
    6388:	3e f4       	brtc	.+14     	; 0x6398 <__floatsisf+0x12>
    638a:	90 95       	com	r25
    638c:	80 95       	com	r24
    638e:	70 95       	com	r23
    6390:	61 95       	neg	r22
    6392:	7f 4f       	sbci	r23, 0xFF	; 255
    6394:	8f 4f       	sbci	r24, 0xFF	; 255
    6396:	9f 4f       	sbci	r25, 0xFF	; 255
    6398:	99 23       	and	r25, r25
    639a:	a9 f0       	breq	.+42     	; 0x63c6 <__floatsisf+0x40>
    639c:	f9 2f       	mov	r31, r25
    639e:	96 e9       	ldi	r25, 0x96	; 150
    63a0:	bb 27       	eor	r27, r27
    63a2:	93 95       	inc	r25
    63a4:	f6 95       	lsr	r31
    63a6:	87 95       	ror	r24
    63a8:	77 95       	ror	r23
    63aa:	67 95       	ror	r22
    63ac:	b7 95       	ror	r27
    63ae:	f1 11       	cpse	r31, r1
    63b0:	f8 cf       	rjmp	.-16     	; 0x63a2 <__floatsisf+0x1c>
    63b2:	fa f4       	brpl	.+62     	; 0x63f2 <__floatsisf+0x6c>
    63b4:	bb 0f       	add	r27, r27
    63b6:	11 f4       	brne	.+4      	; 0x63bc <__floatsisf+0x36>
    63b8:	60 ff       	sbrs	r22, 0
    63ba:	1b c0       	rjmp	.+54     	; 0x63f2 <__floatsisf+0x6c>
    63bc:	6f 5f       	subi	r22, 0xFF	; 255
    63be:	7f 4f       	sbci	r23, 0xFF	; 255
    63c0:	8f 4f       	sbci	r24, 0xFF	; 255
    63c2:	9f 4f       	sbci	r25, 0xFF	; 255
    63c4:	16 c0       	rjmp	.+44     	; 0x63f2 <__floatsisf+0x6c>
    63c6:	88 23       	and	r24, r24
    63c8:	11 f0       	breq	.+4      	; 0x63ce <__floatsisf+0x48>
    63ca:	96 e9       	ldi	r25, 0x96	; 150
    63cc:	11 c0       	rjmp	.+34     	; 0x63f0 <__floatsisf+0x6a>
    63ce:	77 23       	and	r23, r23
    63d0:	21 f0       	breq	.+8      	; 0x63da <__floatsisf+0x54>
    63d2:	9e e8       	ldi	r25, 0x8E	; 142
    63d4:	87 2f       	mov	r24, r23
    63d6:	76 2f       	mov	r23, r22
    63d8:	05 c0       	rjmp	.+10     	; 0x63e4 <__floatsisf+0x5e>
    63da:	66 23       	and	r22, r22
    63dc:	71 f0       	breq	.+28     	; 0x63fa <__floatsisf+0x74>
    63de:	96 e8       	ldi	r25, 0x86	; 134
    63e0:	86 2f       	mov	r24, r22
    63e2:	70 e0       	ldi	r23, 0x00	; 0
    63e4:	60 e0       	ldi	r22, 0x00	; 0
    63e6:	2a f0       	brmi	.+10     	; 0x63f2 <__floatsisf+0x6c>
    63e8:	9a 95       	dec	r25
    63ea:	66 0f       	add	r22, r22
    63ec:	77 1f       	adc	r23, r23
    63ee:	88 1f       	adc	r24, r24
    63f0:	da f7       	brpl	.-10     	; 0x63e8 <__floatsisf+0x62>
    63f2:	88 0f       	add	r24, r24
    63f4:	96 95       	lsr	r25
    63f6:	87 95       	ror	r24
    63f8:	97 f9       	bld	r25, 7
    63fa:	08 95       	ret

000063fc <floor>:
    63fc:	ce d0       	rcall	.+412    	; 0x659a <__fp_trunc>
    63fe:	80 f0       	brcs	.+32     	; 0x6420 <floor+0x24>
    6400:	9f 37       	cpi	r25, 0x7F	; 127
    6402:	40 f4       	brcc	.+16     	; 0x6414 <floor+0x18>
    6404:	91 11       	cpse	r25, r1
    6406:	0e f0       	brts	.+2      	; 0x640a <floor+0xe>
    6408:	e0 c0       	rjmp	.+448    	; 0x65ca <__fp_szero>
    640a:	60 e0       	ldi	r22, 0x00	; 0
    640c:	70 e0       	ldi	r23, 0x00	; 0
    640e:	80 e8       	ldi	r24, 0x80	; 128
    6410:	9f eb       	ldi	r25, 0xBF	; 191
    6412:	08 95       	ret
    6414:	26 f4       	brtc	.+8      	; 0x641e <floor+0x22>
    6416:	1b 16       	cp	r1, r27
    6418:	61 1d       	adc	r22, r1
    641a:	71 1d       	adc	r23, r1
    641c:	81 1d       	adc	r24, r1
    641e:	2b c0       	rjmp	.+86     	; 0x6476 <__fp_mintl>
    6420:	45 c0       	rjmp	.+138    	; 0x64ac <__fp_mpack>

00006422 <__fp_cmp>:
    6422:	99 0f       	add	r25, r25
    6424:	00 08       	sbc	r0, r0
    6426:	55 0f       	add	r21, r21
    6428:	aa 0b       	sbc	r26, r26
    642a:	e0 e8       	ldi	r30, 0x80	; 128
    642c:	fe ef       	ldi	r31, 0xFE	; 254
    642e:	16 16       	cp	r1, r22
    6430:	17 06       	cpc	r1, r23
    6432:	e8 07       	cpc	r30, r24
    6434:	f9 07       	cpc	r31, r25
    6436:	c0 f0       	brcs	.+48     	; 0x6468 <__fp_cmp+0x46>
    6438:	12 16       	cp	r1, r18
    643a:	13 06       	cpc	r1, r19
    643c:	e4 07       	cpc	r30, r20
    643e:	f5 07       	cpc	r31, r21
    6440:	98 f0       	brcs	.+38     	; 0x6468 <__fp_cmp+0x46>
    6442:	62 1b       	sub	r22, r18
    6444:	73 0b       	sbc	r23, r19
    6446:	84 0b       	sbc	r24, r20
    6448:	95 0b       	sbc	r25, r21
    644a:	39 f4       	brne	.+14     	; 0x645a <__fp_cmp+0x38>
    644c:	0a 26       	eor	r0, r26
    644e:	61 f0       	breq	.+24     	; 0x6468 <__fp_cmp+0x46>
    6450:	23 2b       	or	r18, r19
    6452:	24 2b       	or	r18, r20
    6454:	25 2b       	or	r18, r21
    6456:	21 f4       	brne	.+8      	; 0x6460 <__fp_cmp+0x3e>
    6458:	08 95       	ret
    645a:	0a 26       	eor	r0, r26
    645c:	09 f4       	brne	.+2      	; 0x6460 <__fp_cmp+0x3e>
    645e:	a1 40       	sbci	r26, 0x01	; 1
    6460:	a6 95       	lsr	r26
    6462:	8f ef       	ldi	r24, 0xFF	; 255
    6464:	81 1d       	adc	r24, r1
    6466:	81 1d       	adc	r24, r1
    6468:	08 95       	ret

0000646a <__fp_inf>:
    646a:	97 f9       	bld	r25, 7
    646c:	9f 67       	ori	r25, 0x7F	; 127
    646e:	80 e8       	ldi	r24, 0x80	; 128
    6470:	70 e0       	ldi	r23, 0x00	; 0
    6472:	60 e0       	ldi	r22, 0x00	; 0
    6474:	08 95       	ret

00006476 <__fp_mintl>:
    6476:	88 23       	and	r24, r24
    6478:	71 f4       	brne	.+28     	; 0x6496 <__fp_mintl+0x20>
    647a:	77 23       	and	r23, r23
    647c:	21 f0       	breq	.+8      	; 0x6486 <__fp_mintl+0x10>
    647e:	98 50       	subi	r25, 0x08	; 8
    6480:	87 2b       	or	r24, r23
    6482:	76 2f       	mov	r23, r22
    6484:	07 c0       	rjmp	.+14     	; 0x6494 <__fp_mintl+0x1e>
    6486:	66 23       	and	r22, r22
    6488:	11 f4       	brne	.+4      	; 0x648e <__fp_mintl+0x18>
    648a:	99 27       	eor	r25, r25
    648c:	0d c0       	rjmp	.+26     	; 0x64a8 <__fp_mintl+0x32>
    648e:	90 51       	subi	r25, 0x10	; 16
    6490:	86 2b       	or	r24, r22
    6492:	70 e0       	ldi	r23, 0x00	; 0
    6494:	60 e0       	ldi	r22, 0x00	; 0
    6496:	2a f0       	brmi	.+10     	; 0x64a2 <__fp_mintl+0x2c>
    6498:	9a 95       	dec	r25
    649a:	66 0f       	add	r22, r22
    649c:	77 1f       	adc	r23, r23
    649e:	88 1f       	adc	r24, r24
    64a0:	da f7       	brpl	.-10     	; 0x6498 <__fp_mintl+0x22>
    64a2:	88 0f       	add	r24, r24
    64a4:	96 95       	lsr	r25
    64a6:	87 95       	ror	r24
    64a8:	97 f9       	bld	r25, 7
    64aa:	08 95       	ret

000064ac <__fp_mpack>:
    64ac:	9f 3f       	cpi	r25, 0xFF	; 255
    64ae:	31 f0       	breq	.+12     	; 0x64bc <__fp_mpack_finite+0xc>

000064b0 <__fp_mpack_finite>:
    64b0:	91 50       	subi	r25, 0x01	; 1
    64b2:	20 f4       	brcc	.+8      	; 0x64bc <__fp_mpack_finite+0xc>
    64b4:	87 95       	ror	r24
    64b6:	77 95       	ror	r23
    64b8:	67 95       	ror	r22
    64ba:	b7 95       	ror	r27
    64bc:	88 0f       	add	r24, r24
    64be:	91 1d       	adc	r25, r1
    64c0:	96 95       	lsr	r25
    64c2:	87 95       	ror	r24
    64c4:	97 f9       	bld	r25, 7
    64c6:	08 95       	ret

000064c8 <__fp_nan>:
    64c8:	9f ef       	ldi	r25, 0xFF	; 255
    64ca:	80 ec       	ldi	r24, 0xC0	; 192
    64cc:	08 95       	ret

000064ce <__fp_powser>:
    64ce:	df 93       	push	r29
    64d0:	cf 93       	push	r28
    64d2:	1f 93       	push	r17
    64d4:	0f 93       	push	r16
    64d6:	ff 92       	push	r15
    64d8:	ef 92       	push	r14
    64da:	df 92       	push	r13
    64dc:	7b 01       	movw	r14, r22
    64de:	8c 01       	movw	r16, r24
    64e0:	68 94       	set
    64e2:	05 c0       	rjmp	.+10     	; 0x64ee <__fp_powser+0x20>
    64e4:	da 2e       	mov	r13, r26
    64e6:	ef 01       	movw	r28, r30
    64e8:	f0 d0       	rcall	.+480    	; 0x66ca <__mulsf3x>
    64ea:	fe 01       	movw	r30, r28
    64ec:	e8 94       	clt
    64ee:	a5 91       	lpm	r26, Z+
    64f0:	25 91       	lpm	r18, Z+
    64f2:	35 91       	lpm	r19, Z+
    64f4:	45 91       	lpm	r20, Z+
    64f6:	55 91       	lpm	r21, Z+
    64f8:	ae f3       	brts	.-22     	; 0x64e4 <__fp_powser+0x16>
    64fa:	ef 01       	movw	r28, r30
    64fc:	17 de       	rcall	.-978    	; 0x612c <__addsf3x>
    64fe:	fe 01       	movw	r30, r28
    6500:	97 01       	movw	r18, r14
    6502:	a8 01       	movw	r20, r16
    6504:	da 94       	dec	r13
    6506:	79 f7       	brne	.-34     	; 0x64e6 <__fp_powser+0x18>
    6508:	df 90       	pop	r13
    650a:	ef 90       	pop	r14
    650c:	ff 90       	pop	r15
    650e:	0f 91       	pop	r16
    6510:	1f 91       	pop	r17
    6512:	cf 91       	pop	r28
    6514:	df 91       	pop	r29
    6516:	08 95       	ret

00006518 <__fp_pscA>:
    6518:	00 24       	eor	r0, r0
    651a:	0a 94       	dec	r0
    651c:	16 16       	cp	r1, r22
    651e:	17 06       	cpc	r1, r23
    6520:	18 06       	cpc	r1, r24
    6522:	09 06       	cpc	r0, r25
    6524:	08 95       	ret

00006526 <__fp_pscB>:
    6526:	00 24       	eor	r0, r0
    6528:	0a 94       	dec	r0
    652a:	12 16       	cp	r1, r18
    652c:	13 06       	cpc	r1, r19
    652e:	14 06       	cpc	r1, r20
    6530:	05 06       	cpc	r0, r21
    6532:	08 95       	ret

00006534 <__fp_round>:
    6534:	09 2e       	mov	r0, r25
    6536:	03 94       	inc	r0
    6538:	00 0c       	add	r0, r0
    653a:	11 f4       	brne	.+4      	; 0x6540 <__fp_round+0xc>
    653c:	88 23       	and	r24, r24
    653e:	52 f0       	brmi	.+20     	; 0x6554 <__fp_round+0x20>
    6540:	bb 0f       	add	r27, r27
    6542:	40 f4       	brcc	.+16     	; 0x6554 <__fp_round+0x20>
    6544:	bf 2b       	or	r27, r31
    6546:	11 f4       	brne	.+4      	; 0x654c <__fp_round+0x18>
    6548:	60 ff       	sbrs	r22, 0
    654a:	04 c0       	rjmp	.+8      	; 0x6554 <__fp_round+0x20>
    654c:	6f 5f       	subi	r22, 0xFF	; 255
    654e:	7f 4f       	sbci	r23, 0xFF	; 255
    6550:	8f 4f       	sbci	r24, 0xFF	; 255
    6552:	9f 4f       	sbci	r25, 0xFF	; 255
    6554:	08 95       	ret

00006556 <__fp_split3>:
    6556:	57 fd       	sbrc	r21, 7
    6558:	90 58       	subi	r25, 0x80	; 128
    655a:	44 0f       	add	r20, r20
    655c:	55 1f       	adc	r21, r21
    655e:	59 f0       	breq	.+22     	; 0x6576 <__fp_splitA+0x10>
    6560:	5f 3f       	cpi	r21, 0xFF	; 255
    6562:	71 f0       	breq	.+28     	; 0x6580 <__fp_splitA+0x1a>
    6564:	47 95       	ror	r20

00006566 <__fp_splitA>:
    6566:	88 0f       	add	r24, r24
    6568:	97 fb       	bst	r25, 7
    656a:	99 1f       	adc	r25, r25
    656c:	61 f0       	breq	.+24     	; 0x6586 <__fp_splitA+0x20>
    656e:	9f 3f       	cpi	r25, 0xFF	; 255
    6570:	79 f0       	breq	.+30     	; 0x6590 <__fp_splitA+0x2a>
    6572:	87 95       	ror	r24
    6574:	08 95       	ret
    6576:	12 16       	cp	r1, r18
    6578:	13 06       	cpc	r1, r19
    657a:	14 06       	cpc	r1, r20
    657c:	55 1f       	adc	r21, r21
    657e:	f2 cf       	rjmp	.-28     	; 0x6564 <__fp_split3+0xe>
    6580:	46 95       	lsr	r20
    6582:	f1 df       	rcall	.-30     	; 0x6566 <__fp_splitA>
    6584:	08 c0       	rjmp	.+16     	; 0x6596 <__fp_splitA+0x30>
    6586:	16 16       	cp	r1, r22
    6588:	17 06       	cpc	r1, r23
    658a:	18 06       	cpc	r1, r24
    658c:	99 1f       	adc	r25, r25
    658e:	f1 cf       	rjmp	.-30     	; 0x6572 <__fp_splitA+0xc>
    6590:	86 95       	lsr	r24
    6592:	71 05       	cpc	r23, r1
    6594:	61 05       	cpc	r22, r1
    6596:	08 94       	sec
    6598:	08 95       	ret

0000659a <__fp_trunc>:
    659a:	e5 df       	rcall	.-54     	; 0x6566 <__fp_splitA>
    659c:	a0 f0       	brcs	.+40     	; 0x65c6 <__fp_trunc+0x2c>
    659e:	be e7       	ldi	r27, 0x7E	; 126
    65a0:	b9 17       	cp	r27, r25
    65a2:	88 f4       	brcc	.+34     	; 0x65c6 <__fp_trunc+0x2c>
    65a4:	bb 27       	eor	r27, r27
    65a6:	9f 38       	cpi	r25, 0x8F	; 143
    65a8:	60 f4       	brcc	.+24     	; 0x65c2 <__fp_trunc+0x28>
    65aa:	16 16       	cp	r1, r22
    65ac:	b1 1d       	adc	r27, r1
    65ae:	67 2f       	mov	r22, r23
    65b0:	78 2f       	mov	r23, r24
    65b2:	88 27       	eor	r24, r24
    65b4:	98 5f       	subi	r25, 0xF8	; 248
    65b6:	f7 cf       	rjmp	.-18     	; 0x65a6 <__fp_trunc+0xc>
    65b8:	86 95       	lsr	r24
    65ba:	77 95       	ror	r23
    65bc:	67 95       	ror	r22
    65be:	b1 1d       	adc	r27, r1
    65c0:	93 95       	inc	r25
    65c2:	96 39       	cpi	r25, 0x96	; 150
    65c4:	c8 f3       	brcs	.-14     	; 0x65b8 <__fp_trunc+0x1e>
    65c6:	08 95       	ret

000065c8 <__fp_zero>:
    65c8:	e8 94       	clt

000065ca <__fp_szero>:
    65ca:	bb 27       	eor	r27, r27
    65cc:	66 27       	eor	r22, r22
    65ce:	77 27       	eor	r23, r23
    65d0:	cb 01       	movw	r24, r22
    65d2:	97 f9       	bld	r25, 7
    65d4:	08 95       	ret

000065d6 <__gesf2>:
    65d6:	25 df       	rcall	.-438    	; 0x6422 <__fp_cmp>
    65d8:	08 f4       	brcc	.+2      	; 0x65dc <__gesf2+0x6>
    65da:	8f ef       	ldi	r24, 0xFF	; 255
    65dc:	08 95       	ret

000065de <inverse>:
    65de:	9b 01       	movw	r18, r22
    65e0:	ac 01       	movw	r20, r24
    65e2:	60 e0       	ldi	r22, 0x00	; 0
    65e4:	70 e0       	ldi	r23, 0x00	; 0
    65e6:	80 e8       	ldi	r24, 0x80	; 128
    65e8:	9f e3       	ldi	r25, 0x3F	; 63
    65ea:	32 ce       	rjmp	.-924    	; 0x6250 <__divsf3>

000065ec <lround>:
    65ec:	bc df       	rcall	.-136    	; 0x6566 <__fp_splitA>
    65ee:	58 f1       	brcs	.+86     	; 0x6646 <lround+0x5a>
    65f0:	9e 57       	subi	r25, 0x7E	; 126
    65f2:	58 f1       	brcs	.+86     	; 0x664a <lround+0x5e>
    65f4:	98 51       	subi	r25, 0x18	; 24
    65f6:	a0 f0       	brcs	.+40     	; 0x6620 <lround+0x34>
    65f8:	e9 f0       	breq	.+58     	; 0x6634 <lround+0x48>
    65fa:	98 30       	cpi	r25, 0x08	; 8
    65fc:	20 f5       	brcc	.+72     	; 0x6646 <lround+0x5a>
    65fe:	09 2e       	mov	r0, r25
    6600:	99 27       	eor	r25, r25
    6602:	66 0f       	add	r22, r22
    6604:	77 1f       	adc	r23, r23
    6606:	88 1f       	adc	r24, r24
    6608:	99 1f       	adc	r25, r25
    660a:	0a 94       	dec	r0
    660c:	d1 f7       	brne	.-12     	; 0x6602 <lround+0x16>
    660e:	12 c0       	rjmp	.+36     	; 0x6634 <lround+0x48>
    6610:	06 2e       	mov	r0, r22
    6612:	67 2f       	mov	r22, r23
    6614:	78 2f       	mov	r23, r24
    6616:	88 27       	eor	r24, r24
    6618:	98 5f       	subi	r25, 0xF8	; 248
    661a:	11 f4       	brne	.+4      	; 0x6620 <lround+0x34>
    661c:	00 0c       	add	r0, r0
    661e:	07 c0       	rjmp	.+14     	; 0x662e <lround+0x42>
    6620:	99 3f       	cpi	r25, 0xF9	; 249
    6622:	b4 f3       	brlt	.-20     	; 0x6610 <lround+0x24>
    6624:	86 95       	lsr	r24
    6626:	77 95       	ror	r23
    6628:	67 95       	ror	r22
    662a:	93 95       	inc	r25
    662c:	d9 f7       	brne	.-10     	; 0x6624 <lround+0x38>
    662e:	61 1d       	adc	r22, r1
    6630:	71 1d       	adc	r23, r1
    6632:	81 1d       	adc	r24, r1
    6634:	3e f4       	brtc	.+14     	; 0x6644 <lround+0x58>
    6636:	90 95       	com	r25
    6638:	80 95       	com	r24
    663a:	70 95       	com	r23
    663c:	61 95       	neg	r22
    663e:	7f 4f       	sbci	r23, 0xFF	; 255
    6640:	8f 4f       	sbci	r24, 0xFF	; 255
    6642:	9f 4f       	sbci	r25, 0xFF	; 255
    6644:	08 95       	ret
    6646:	68 94       	set
    6648:	c0 cf       	rjmp	.-128    	; 0x65ca <__fp_szero>
    664a:	be cf       	rjmp	.-132    	; 0x65c8 <__fp_zero>

0000664c <modf>:
    664c:	fa 01       	movw	r30, r20
    664e:	dc 01       	movw	r26, r24
    6650:	aa 0f       	add	r26, r26
    6652:	bb 1f       	adc	r27, r27
    6654:	9b 01       	movw	r18, r22
    6656:	ac 01       	movw	r20, r24
    6658:	bf 57       	subi	r27, 0x7F	; 127
    665a:	28 f4       	brcc	.+10     	; 0x6666 <modf+0x1a>
    665c:	22 27       	eor	r18, r18
    665e:	33 27       	eor	r19, r19
    6660:	44 27       	eor	r20, r20
    6662:	50 78       	andi	r21, 0x80	; 128
    6664:	1f c0       	rjmp	.+62     	; 0x66a4 <modf+0x58>
    6666:	b7 51       	subi	r27, 0x17	; 23
    6668:	88 f4       	brcc	.+34     	; 0x668c <modf+0x40>
    666a:	ab 2f       	mov	r26, r27
    666c:	00 24       	eor	r0, r0
    666e:	46 95       	lsr	r20
    6670:	37 95       	ror	r19
    6672:	27 95       	ror	r18
    6674:	01 1c       	adc	r0, r1
    6676:	a3 95       	inc	r26
    6678:	d2 f3       	brmi	.-12     	; 0x666e <modf+0x22>
    667a:	00 20       	and	r0, r0
    667c:	69 f0       	breq	.+26     	; 0x6698 <modf+0x4c>
    667e:	22 0f       	add	r18, r18
    6680:	33 1f       	adc	r19, r19
    6682:	44 1f       	adc	r20, r20
    6684:	b3 95       	inc	r27
    6686:	da f3       	brmi	.-10     	; 0x667e <modf+0x32>
    6688:	0d d0       	rcall	.+26     	; 0x66a4 <modf+0x58>
    668a:	3e cd       	rjmp	.-1412   	; 0x6108 <__subsf3>
    668c:	61 30       	cpi	r22, 0x01	; 1
    668e:	71 05       	cpc	r23, r1
    6690:	a0 e8       	ldi	r26, 0x80	; 128
    6692:	8a 07       	cpc	r24, r26
    6694:	b9 46       	sbci	r27, 0x69	; 105
    6696:	30 f4       	brcc	.+12     	; 0x66a4 <modf+0x58>
    6698:	9b 01       	movw	r18, r22
    669a:	ac 01       	movw	r20, r24
    669c:	66 27       	eor	r22, r22
    669e:	77 27       	eor	r23, r23
    66a0:	88 27       	eor	r24, r24
    66a2:	90 78       	andi	r25, 0x80	; 128
    66a4:	30 96       	adiw	r30, 0x00	; 0
    66a6:	21 f0       	breq	.+8      	; 0x66b0 <modf+0x64>
    66a8:	20 83       	st	Z, r18
    66aa:	31 83       	std	Z+1, r19	; 0x01
    66ac:	42 83       	std	Z+2, r20	; 0x02
    66ae:	53 83       	std	Z+3, r21	; 0x03
    66b0:	08 95       	ret

000066b2 <__mulsf3>:
    66b2:	0b d0       	rcall	.+22     	; 0x66ca <__mulsf3x>
    66b4:	3f cf       	rjmp	.-386    	; 0x6534 <__fp_round>
    66b6:	30 df       	rcall	.-416    	; 0x6518 <__fp_pscA>
    66b8:	28 f0       	brcs	.+10     	; 0x66c4 <__mulsf3+0x12>
    66ba:	35 df       	rcall	.-406    	; 0x6526 <__fp_pscB>
    66bc:	18 f0       	brcs	.+6      	; 0x66c4 <__mulsf3+0x12>
    66be:	95 23       	and	r25, r21
    66c0:	09 f0       	breq	.+2      	; 0x66c4 <__mulsf3+0x12>
    66c2:	d3 ce       	rjmp	.-602    	; 0x646a <__fp_inf>
    66c4:	01 cf       	rjmp	.-510    	; 0x64c8 <__fp_nan>
    66c6:	11 24       	eor	r1, r1
    66c8:	80 cf       	rjmp	.-256    	; 0x65ca <__fp_szero>

000066ca <__mulsf3x>:
    66ca:	45 df       	rcall	.-374    	; 0x6556 <__fp_split3>
    66cc:	a0 f3       	brcs	.-24     	; 0x66b6 <__mulsf3+0x4>

000066ce <__mulsf3_pse>:
    66ce:	95 9f       	mul	r25, r21
    66d0:	d1 f3       	breq	.-12     	; 0x66c6 <__mulsf3+0x14>
    66d2:	95 0f       	add	r25, r21
    66d4:	50 e0       	ldi	r21, 0x00	; 0
    66d6:	55 1f       	adc	r21, r21
    66d8:	62 9f       	mul	r22, r18
    66da:	f0 01       	movw	r30, r0
    66dc:	72 9f       	mul	r23, r18
    66de:	bb 27       	eor	r27, r27
    66e0:	f0 0d       	add	r31, r0
    66e2:	b1 1d       	adc	r27, r1
    66e4:	63 9f       	mul	r22, r19
    66e6:	aa 27       	eor	r26, r26
    66e8:	f0 0d       	add	r31, r0
    66ea:	b1 1d       	adc	r27, r1
    66ec:	aa 1f       	adc	r26, r26
    66ee:	64 9f       	mul	r22, r20
    66f0:	66 27       	eor	r22, r22
    66f2:	b0 0d       	add	r27, r0
    66f4:	a1 1d       	adc	r26, r1
    66f6:	66 1f       	adc	r22, r22
    66f8:	82 9f       	mul	r24, r18
    66fa:	22 27       	eor	r18, r18
    66fc:	b0 0d       	add	r27, r0
    66fe:	a1 1d       	adc	r26, r1
    6700:	62 1f       	adc	r22, r18
    6702:	73 9f       	mul	r23, r19
    6704:	b0 0d       	add	r27, r0
    6706:	a1 1d       	adc	r26, r1
    6708:	62 1f       	adc	r22, r18
    670a:	83 9f       	mul	r24, r19
    670c:	a0 0d       	add	r26, r0
    670e:	61 1d       	adc	r22, r1
    6710:	22 1f       	adc	r18, r18
    6712:	74 9f       	mul	r23, r20
    6714:	33 27       	eor	r19, r19
    6716:	a0 0d       	add	r26, r0
    6718:	61 1d       	adc	r22, r1
    671a:	23 1f       	adc	r18, r19
    671c:	84 9f       	mul	r24, r20
    671e:	60 0d       	add	r22, r0
    6720:	21 1d       	adc	r18, r1
    6722:	82 2f       	mov	r24, r18
    6724:	76 2f       	mov	r23, r22
    6726:	6a 2f       	mov	r22, r26
    6728:	11 24       	eor	r1, r1
    672a:	9f 57       	subi	r25, 0x7F	; 127
    672c:	50 40       	sbci	r21, 0x00	; 0
    672e:	8a f0       	brmi	.+34     	; 0x6752 <__mulsf3_pse+0x84>
    6730:	e1 f0       	breq	.+56     	; 0x676a <__mulsf3_pse+0x9c>
    6732:	88 23       	and	r24, r24
    6734:	4a f0       	brmi	.+18     	; 0x6748 <__mulsf3_pse+0x7a>
    6736:	ee 0f       	add	r30, r30
    6738:	ff 1f       	adc	r31, r31
    673a:	bb 1f       	adc	r27, r27
    673c:	66 1f       	adc	r22, r22
    673e:	77 1f       	adc	r23, r23
    6740:	88 1f       	adc	r24, r24
    6742:	91 50       	subi	r25, 0x01	; 1
    6744:	50 40       	sbci	r21, 0x00	; 0
    6746:	a9 f7       	brne	.-22     	; 0x6732 <__mulsf3_pse+0x64>
    6748:	9e 3f       	cpi	r25, 0xFE	; 254
    674a:	51 05       	cpc	r21, r1
    674c:	70 f0       	brcs	.+28     	; 0x676a <__mulsf3_pse+0x9c>
    674e:	8d ce       	rjmp	.-742    	; 0x646a <__fp_inf>
    6750:	3c cf       	rjmp	.-392    	; 0x65ca <__fp_szero>
    6752:	5f 3f       	cpi	r21, 0xFF	; 255
    6754:	ec f3       	brlt	.-6      	; 0x6750 <__mulsf3_pse+0x82>
    6756:	98 3e       	cpi	r25, 0xE8	; 232
    6758:	dc f3       	brlt	.-10     	; 0x6750 <__mulsf3_pse+0x82>
    675a:	86 95       	lsr	r24
    675c:	77 95       	ror	r23
    675e:	67 95       	ror	r22
    6760:	b7 95       	ror	r27
    6762:	f7 95       	ror	r31
    6764:	e7 95       	ror	r30
    6766:	9f 5f       	subi	r25, 0xFF	; 255
    6768:	c1 f7       	brne	.-16     	; 0x675a <__mulsf3_pse+0x8c>
    676a:	fe 2b       	or	r31, r30
    676c:	88 0f       	add	r24, r24
    676e:	91 1d       	adc	r25, r1
    6770:	96 95       	lsr	r25
    6772:	87 95       	ror	r24
    6774:	97 f9       	bld	r25, 7
    6776:	08 95       	ret

00006778 <round>:
    6778:	f6 de       	rcall	.-532    	; 0x6566 <__fp_splitA>
    677a:	e0 f0       	brcs	.+56     	; 0x67b4 <round+0x3c>
    677c:	9e 37       	cpi	r25, 0x7E	; 126
    677e:	d8 f0       	brcs	.+54     	; 0x67b6 <round+0x3e>
    6780:	96 39       	cpi	r25, 0x96	; 150
    6782:	b8 f4       	brcc	.+46     	; 0x67b2 <round+0x3a>
    6784:	9e 38       	cpi	r25, 0x8E	; 142
    6786:	48 f4       	brcc	.+18     	; 0x679a <round+0x22>
    6788:	67 2f       	mov	r22, r23
    678a:	78 2f       	mov	r23, r24
    678c:	88 27       	eor	r24, r24
    678e:	98 5f       	subi	r25, 0xF8	; 248
    6790:	f9 cf       	rjmp	.-14     	; 0x6784 <round+0xc>
    6792:	86 95       	lsr	r24
    6794:	77 95       	ror	r23
    6796:	67 95       	ror	r22
    6798:	93 95       	inc	r25
    679a:	95 39       	cpi	r25, 0x95	; 149
    679c:	d0 f3       	brcs	.-12     	; 0x6792 <round+0x1a>
    679e:	b6 2f       	mov	r27, r22
    67a0:	b1 70       	andi	r27, 0x01	; 1
    67a2:	6b 0f       	add	r22, r27
    67a4:	71 1d       	adc	r23, r1
    67a6:	81 1d       	adc	r24, r1
    67a8:	20 f4       	brcc	.+8      	; 0x67b2 <round+0x3a>
    67aa:	87 95       	ror	r24
    67ac:	77 95       	ror	r23
    67ae:	67 95       	ror	r22
    67b0:	93 95       	inc	r25
    67b2:	61 ce       	rjmp	.-830    	; 0x6476 <__fp_mintl>
    67b4:	7b ce       	rjmp	.-778    	; 0x64ac <__fp_mpack>
    67b6:	09 cf       	rjmp	.-494    	; 0x65ca <__fp_szero>
    67b8:	11 f4       	brne	.+4      	; 0x67be <round+0x46>
    67ba:	0e f4       	brtc	.+2      	; 0x67be <round+0x46>
    67bc:	85 ce       	rjmp	.-758    	; 0x64c8 <__fp_nan>
    67be:	76 ce       	rjmp	.-788    	; 0x64ac <__fp_mpack>

000067c0 <sqrt>:
    67c0:	d2 de       	rcall	.-604    	; 0x6566 <__fp_splitA>
    67c2:	d0 f3       	brcs	.-12     	; 0x67b8 <round+0x40>
    67c4:	99 23       	and	r25, r25
    67c6:	d9 f3       	breq	.-10     	; 0x67be <round+0x46>
    67c8:	ce f3       	brts	.-14     	; 0x67bc <round+0x44>
    67ca:	9f 57       	subi	r25, 0x7F	; 127
    67cc:	55 0b       	sbc	r21, r21
    67ce:	87 ff       	sbrs	r24, 7
    67d0:	3f d0       	rcall	.+126    	; 0x6850 <__fp_norm2>
    67d2:	00 24       	eor	r0, r0
    67d4:	a0 e6       	ldi	r26, 0x60	; 96
    67d6:	40 ea       	ldi	r20, 0xA0	; 160
    67d8:	90 01       	movw	r18, r0
    67da:	80 58       	subi	r24, 0x80	; 128
    67dc:	56 95       	lsr	r21
    67de:	97 95       	ror	r25
    67e0:	28 f4       	brcc	.+10     	; 0x67ec <sqrt+0x2c>
    67e2:	80 5c       	subi	r24, 0xC0	; 192
    67e4:	66 0f       	add	r22, r22
    67e6:	77 1f       	adc	r23, r23
    67e8:	88 1f       	adc	r24, r24
    67ea:	20 f0       	brcs	.+8      	; 0x67f4 <sqrt+0x34>
    67ec:	26 17       	cp	r18, r22
    67ee:	37 07       	cpc	r19, r23
    67f0:	48 07       	cpc	r20, r24
    67f2:	30 f4       	brcc	.+12     	; 0x6800 <sqrt+0x40>
    67f4:	62 1b       	sub	r22, r18
    67f6:	73 0b       	sbc	r23, r19
    67f8:	84 0b       	sbc	r24, r20
    67fa:	20 29       	or	r18, r0
    67fc:	31 29       	or	r19, r1
    67fe:	4a 2b       	or	r20, r26
    6800:	a6 95       	lsr	r26
    6802:	17 94       	ror	r1
    6804:	07 94       	ror	r0
    6806:	20 25       	eor	r18, r0
    6808:	31 25       	eor	r19, r1
    680a:	4a 27       	eor	r20, r26
    680c:	58 f7       	brcc	.-42     	; 0x67e4 <sqrt+0x24>
    680e:	66 0f       	add	r22, r22
    6810:	77 1f       	adc	r23, r23
    6812:	88 1f       	adc	r24, r24
    6814:	20 f0       	brcs	.+8      	; 0x681e <sqrt+0x5e>
    6816:	26 17       	cp	r18, r22
    6818:	37 07       	cpc	r19, r23
    681a:	48 07       	cpc	r20, r24
    681c:	30 f4       	brcc	.+12     	; 0x682a <sqrt+0x6a>
    681e:	62 0b       	sbc	r22, r18
    6820:	73 0b       	sbc	r23, r19
    6822:	84 0b       	sbc	r24, r20
    6824:	20 0d       	add	r18, r0
    6826:	31 1d       	adc	r19, r1
    6828:	41 1d       	adc	r20, r1
    682a:	a0 95       	com	r26
    682c:	81 f7       	brne	.-32     	; 0x680e <sqrt+0x4e>
    682e:	b9 01       	movw	r22, r18
    6830:	84 2f       	mov	r24, r20
    6832:	91 58       	subi	r25, 0x81	; 129
    6834:	88 0f       	add	r24, r24
    6836:	96 95       	lsr	r25
    6838:	87 95       	ror	r24
    683a:	08 95       	ret

0000683c <square>:
    683c:	9b 01       	movw	r18, r22
    683e:	ac 01       	movw	r20, r24
    6840:	38 cf       	rjmp	.-400    	; 0x66b2 <__mulsf3>

00006842 <trunc>:
    6842:	ab de       	rcall	.-682    	; 0x659a <__fp_trunc>
    6844:	20 f0       	brcs	.+8      	; 0x684e <trunc+0xc>
    6846:	9f 37       	cpi	r25, 0x7F	; 127
    6848:	08 f4       	brcc	.+2      	; 0x684c <trunc+0xa>
    684a:	bf ce       	rjmp	.-642    	; 0x65ca <__fp_szero>
    684c:	14 ce       	rjmp	.-984    	; 0x6476 <__fp_mintl>
    684e:	2e ce       	rjmp	.-932    	; 0x64ac <__fp_mpack>

00006850 <__fp_norm2>:
    6850:	91 50       	subi	r25, 0x01	; 1
    6852:	50 40       	sbci	r21, 0x00	; 0
    6854:	66 0f       	add	r22, r22
    6856:	77 1f       	adc	r23, r23
    6858:	88 1f       	adc	r24, r24
    685a:	d2 f7       	brpl	.-12     	; 0x6850 <__fp_norm2>
    685c:	08 95       	ret

0000685e <__mulsi3>:
    685e:	62 9f       	mul	r22, r18
    6860:	d0 01       	movw	r26, r0
    6862:	73 9f       	mul	r23, r19
    6864:	f0 01       	movw	r30, r0
    6866:	82 9f       	mul	r24, r18
    6868:	e0 0d       	add	r30, r0
    686a:	f1 1d       	adc	r31, r1
    686c:	64 9f       	mul	r22, r20
    686e:	e0 0d       	add	r30, r0
    6870:	f1 1d       	adc	r31, r1
    6872:	92 9f       	mul	r25, r18
    6874:	f0 0d       	add	r31, r0
    6876:	83 9f       	mul	r24, r19
    6878:	f0 0d       	add	r31, r0
    687a:	74 9f       	mul	r23, r20
    687c:	f0 0d       	add	r31, r0
    687e:	65 9f       	mul	r22, r21
    6880:	f0 0d       	add	r31, r0
    6882:	99 27       	eor	r25, r25
    6884:	72 9f       	mul	r23, r18
    6886:	b0 0d       	add	r27, r0
    6888:	e1 1d       	adc	r30, r1
    688a:	f9 1f       	adc	r31, r25
    688c:	63 9f       	mul	r22, r19
    688e:	b0 0d       	add	r27, r0
    6890:	e1 1d       	adc	r30, r1
    6892:	f9 1f       	adc	r31, r25
    6894:	bd 01       	movw	r22, r26
    6896:	cf 01       	movw	r24, r30
    6898:	11 24       	eor	r1, r1
    689a:	08 95       	ret

0000689c <__divmodhi4>:
    689c:	97 fb       	bst	r25, 7
    689e:	09 2e       	mov	r0, r25
    68a0:	07 26       	eor	r0, r23
    68a2:	0a d0       	rcall	.+20     	; 0x68b8 <__divmodhi4_neg1>
    68a4:	77 fd       	sbrc	r23, 7
    68a6:	04 d0       	rcall	.+8      	; 0x68b0 <__divmodhi4_neg2>
    68a8:	49 d0       	rcall	.+146    	; 0x693c <__udivmodhi4>
    68aa:	06 d0       	rcall	.+12     	; 0x68b8 <__divmodhi4_neg1>
    68ac:	00 20       	and	r0, r0
    68ae:	1a f4       	brpl	.+6      	; 0x68b6 <__divmodhi4_exit>

000068b0 <__divmodhi4_neg2>:
    68b0:	70 95       	com	r23
    68b2:	61 95       	neg	r22
    68b4:	7f 4f       	sbci	r23, 0xFF	; 255

000068b6 <__divmodhi4_exit>:
    68b6:	08 95       	ret

000068b8 <__divmodhi4_neg1>:
    68b8:	f6 f7       	brtc	.-4      	; 0x68b6 <__divmodhi4_exit>
    68ba:	90 95       	com	r25
    68bc:	81 95       	neg	r24
    68be:	9f 4f       	sbci	r25, 0xFF	; 255
    68c0:	08 95       	ret

000068c2 <__udivmodsi4>:
    68c2:	a1 e2       	ldi	r26, 0x21	; 33
    68c4:	1a 2e       	mov	r1, r26
    68c6:	aa 1b       	sub	r26, r26
    68c8:	bb 1b       	sub	r27, r27
    68ca:	fd 01       	movw	r30, r26
    68cc:	0d c0       	rjmp	.+26     	; 0x68e8 <__udivmodsi4_ep>

000068ce <__udivmodsi4_loop>:
    68ce:	aa 1f       	adc	r26, r26
    68d0:	bb 1f       	adc	r27, r27
    68d2:	ee 1f       	adc	r30, r30
    68d4:	ff 1f       	adc	r31, r31
    68d6:	a2 17       	cp	r26, r18
    68d8:	b3 07       	cpc	r27, r19
    68da:	e4 07       	cpc	r30, r20
    68dc:	f5 07       	cpc	r31, r21
    68de:	20 f0       	brcs	.+8      	; 0x68e8 <__udivmodsi4_ep>
    68e0:	a2 1b       	sub	r26, r18
    68e2:	b3 0b       	sbc	r27, r19
    68e4:	e4 0b       	sbc	r30, r20
    68e6:	f5 0b       	sbc	r31, r21

000068e8 <__udivmodsi4_ep>:
    68e8:	66 1f       	adc	r22, r22
    68ea:	77 1f       	adc	r23, r23
    68ec:	88 1f       	adc	r24, r24
    68ee:	99 1f       	adc	r25, r25
    68f0:	1a 94       	dec	r1
    68f2:	69 f7       	brne	.-38     	; 0x68ce <__udivmodsi4_loop>
    68f4:	60 95       	com	r22
    68f6:	70 95       	com	r23
    68f8:	80 95       	com	r24
    68fa:	90 95       	com	r25
    68fc:	9b 01       	movw	r18, r22
    68fe:	ac 01       	movw	r20, r24
    6900:	bd 01       	movw	r22, r26
    6902:	cf 01       	movw	r24, r30
    6904:	08 95       	ret

00006906 <__divmodsi4>:
    6906:	97 fb       	bst	r25, 7
    6908:	09 2e       	mov	r0, r25
    690a:	05 26       	eor	r0, r21
    690c:	0e d0       	rcall	.+28     	; 0x692a <__divmodsi4_neg1>
    690e:	57 fd       	sbrc	r21, 7
    6910:	04 d0       	rcall	.+8      	; 0x691a <__divmodsi4_neg2>
    6912:	d7 df       	rcall	.-82     	; 0x68c2 <__udivmodsi4>
    6914:	0a d0       	rcall	.+20     	; 0x692a <__divmodsi4_neg1>
    6916:	00 1c       	adc	r0, r0
    6918:	38 f4       	brcc	.+14     	; 0x6928 <__divmodsi4_exit>

0000691a <__divmodsi4_neg2>:
    691a:	50 95       	com	r21
    691c:	40 95       	com	r20
    691e:	30 95       	com	r19
    6920:	21 95       	neg	r18
    6922:	3f 4f       	sbci	r19, 0xFF	; 255
    6924:	4f 4f       	sbci	r20, 0xFF	; 255
    6926:	5f 4f       	sbci	r21, 0xFF	; 255

00006928 <__divmodsi4_exit>:
    6928:	08 95       	ret

0000692a <__divmodsi4_neg1>:
    692a:	f6 f7       	brtc	.-4      	; 0x6928 <__divmodsi4_exit>
    692c:	90 95       	com	r25
    692e:	80 95       	com	r24
    6930:	70 95       	com	r23
    6932:	61 95       	neg	r22
    6934:	7f 4f       	sbci	r23, 0xFF	; 255
    6936:	8f 4f       	sbci	r24, 0xFF	; 255
    6938:	9f 4f       	sbci	r25, 0xFF	; 255
    693a:	08 95       	ret

0000693c <__udivmodhi4>:
    693c:	aa 1b       	sub	r26, r26
    693e:	bb 1b       	sub	r27, r27
    6940:	51 e1       	ldi	r21, 0x11	; 17
    6942:	07 c0       	rjmp	.+14     	; 0x6952 <__udivmodhi4_ep>

00006944 <__udivmodhi4_loop>:
    6944:	aa 1f       	adc	r26, r26
    6946:	bb 1f       	adc	r27, r27
    6948:	a6 17       	cp	r26, r22
    694a:	b7 07       	cpc	r27, r23
    694c:	10 f0       	brcs	.+4      	; 0x6952 <__udivmodhi4_ep>
    694e:	a6 1b       	sub	r26, r22
    6950:	b7 0b       	sbc	r27, r23

00006952 <__udivmodhi4_ep>:
    6952:	88 1f       	adc	r24, r24
    6954:	99 1f       	adc	r25, r25
    6956:	5a 95       	dec	r21
    6958:	a9 f7       	brne	.-22     	; 0x6944 <__udivmodhi4_loop>
    695a:	80 95       	com	r24
    695c:	90 95       	com	r25
    695e:	bc 01       	movw	r22, r24
    6960:	cd 01       	movw	r24, r26
    6962:	08 95       	ret

00006964 <do_rand>:
    6964:	af 92       	push	r10
    6966:	bf 92       	push	r11
    6968:	cf 92       	push	r12
    696a:	df 92       	push	r13
    696c:	ef 92       	push	r14
    696e:	ff 92       	push	r15
    6970:	0f 93       	push	r16
    6972:	1f 93       	push	r17
    6974:	cf 93       	push	r28
    6976:	df 93       	push	r29
    6978:	ec 01       	movw	r28, r24
    697a:	a8 80       	ld	r10, Y
    697c:	b9 80       	ldd	r11, Y+1	; 0x01
    697e:	ca 80       	ldd	r12, Y+2	; 0x02
    6980:	db 80       	ldd	r13, Y+3	; 0x03
    6982:	a1 14       	cp	r10, r1
    6984:	b1 04       	cpc	r11, r1
    6986:	c1 04       	cpc	r12, r1
    6988:	d1 04       	cpc	r13, r1
    698a:	41 f4       	brne	.+16     	; 0x699c <do_rand+0x38>
    698c:	84 e2       	ldi	r24, 0x24	; 36
    698e:	a8 2e       	mov	r10, r24
    6990:	89 ed       	ldi	r24, 0xD9	; 217
    6992:	b8 2e       	mov	r11, r24
    6994:	8b e5       	ldi	r24, 0x5B	; 91
    6996:	c8 2e       	mov	r12, r24
    6998:	87 e0       	ldi	r24, 0x07	; 7
    699a:	d8 2e       	mov	r13, r24
    699c:	c6 01       	movw	r24, r12
    699e:	b5 01       	movw	r22, r10
    69a0:	2d e1       	ldi	r18, 0x1D	; 29
    69a2:	33 ef       	ldi	r19, 0xF3	; 243
    69a4:	41 e0       	ldi	r20, 0x01	; 1
    69a6:	50 e0       	ldi	r21, 0x00	; 0
    69a8:	0e 94 83 34 	call	0x6906	; 0x6906 <__divmodsi4>
    69ac:	27 ea       	ldi	r18, 0xA7	; 167
    69ae:	31 e4       	ldi	r19, 0x41	; 65
    69b0:	40 e0       	ldi	r20, 0x00	; 0
    69b2:	50 e0       	ldi	r21, 0x00	; 0
    69b4:	0e 94 2f 34 	call	0x685e	; 0x685e <__mulsi3>
    69b8:	7b 01       	movw	r14, r22
    69ba:	8c 01       	movw	r16, r24
    69bc:	c6 01       	movw	r24, r12
    69be:	b5 01       	movw	r22, r10
    69c0:	2d e1       	ldi	r18, 0x1D	; 29
    69c2:	33 ef       	ldi	r19, 0xF3	; 243
    69c4:	41 e0       	ldi	r20, 0x01	; 1
    69c6:	50 e0       	ldi	r21, 0x00	; 0
    69c8:	0e 94 83 34 	call	0x6906	; 0x6906 <__divmodsi4>
    69cc:	ca 01       	movw	r24, r20
    69ce:	b9 01       	movw	r22, r18
    69d0:	2c ee       	ldi	r18, 0xEC	; 236
    69d2:	34 ef       	ldi	r19, 0xF4	; 244
    69d4:	4f ef       	ldi	r20, 0xFF	; 255
    69d6:	5f ef       	ldi	r21, 0xFF	; 255
    69d8:	0e 94 2f 34 	call	0x685e	; 0x685e <__mulsi3>
    69dc:	6e 0d       	add	r22, r14
    69de:	7f 1d       	adc	r23, r15
    69e0:	80 1f       	adc	r24, r16
    69e2:	91 1f       	adc	r25, r17
    69e4:	97 ff       	sbrs	r25, 7
    69e6:	04 c0       	rjmp	.+8      	; 0x69f0 <do_rand+0x8c>
    69e8:	61 50       	subi	r22, 0x01	; 1
    69ea:	70 40       	sbci	r23, 0x00	; 0
    69ec:	80 40       	sbci	r24, 0x00	; 0
    69ee:	90 48       	sbci	r25, 0x80	; 128
    69f0:	68 83       	st	Y, r22
    69f2:	79 83       	std	Y+1, r23	; 0x01
    69f4:	8a 83       	std	Y+2, r24	; 0x02
    69f6:	9b 83       	std	Y+3, r25	; 0x03
    69f8:	9b 01       	movw	r18, r22
    69fa:	3f 77       	andi	r19, 0x7F	; 127
    69fc:	c9 01       	movw	r24, r18
    69fe:	df 91       	pop	r29
    6a00:	cf 91       	pop	r28
    6a02:	1f 91       	pop	r17
    6a04:	0f 91       	pop	r16
    6a06:	ff 90       	pop	r15
    6a08:	ef 90       	pop	r14
    6a0a:	df 90       	pop	r13
    6a0c:	cf 90       	pop	r12
    6a0e:	bf 90       	pop	r11
    6a10:	af 90       	pop	r10
    6a12:	08 95       	ret

00006a14 <rand_r>:
    6a14:	0e 94 b2 34 	call	0x6964	; 0x6964 <do_rand>
    6a18:	08 95       	ret

00006a1a <rand>:
    6a1a:	81 e0       	ldi	r24, 0x01	; 1
    6a1c:	92 e0       	ldi	r25, 0x02	; 2
    6a1e:	0e 94 b2 34 	call	0x6964	; 0x6964 <do_rand>
    6a22:	08 95       	ret

00006a24 <srand>:
    6a24:	a0 e0       	ldi	r26, 0x00	; 0
    6a26:	b0 e0       	ldi	r27, 0x00	; 0
    6a28:	80 93 01 02 	sts	0x0201, r24
    6a2c:	90 93 02 02 	sts	0x0202, r25
    6a30:	a0 93 03 02 	sts	0x0203, r26
    6a34:	b0 93 04 02 	sts	0x0204, r27
    6a38:	08 95       	ret

00006a3a <strtod>:
    6a3a:	8f 92       	push	r8
    6a3c:	9f 92       	push	r9
    6a3e:	af 92       	push	r10
    6a40:	bf 92       	push	r11
    6a42:	cf 92       	push	r12
    6a44:	df 92       	push	r13
    6a46:	ef 92       	push	r14
    6a48:	ff 92       	push	r15
    6a4a:	0f 93       	push	r16
    6a4c:	1f 93       	push	r17
    6a4e:	cf 93       	push	r28
    6a50:	df 93       	push	r29
    6a52:	ec 01       	movw	r28, r24
    6a54:	5b 01       	movw	r10, r22
    6a56:	61 15       	cp	r22, r1
    6a58:	71 05       	cpc	r23, r1
    6a5a:	19 f0       	breq	.+6      	; 0x6a62 <strtod+0x28>
    6a5c:	fb 01       	movw	r30, r22
    6a5e:	91 83       	std	Z+1, r25	; 0x01
    6a60:	80 83       	st	Z, r24
    6a62:	f9 90       	ld	r15, Y+
    6a64:	8f 2d       	mov	r24, r15
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <isspace>
    6a6c:	89 2b       	or	r24, r25
    6a6e:	c9 f7       	brne	.-14     	; 0x6a62 <strtod+0x28>
    6a70:	fd e2       	ldi	r31, 0x2D	; 45
    6a72:	ff 16       	cp	r15, r31
    6a74:	21 f4       	brne	.+8      	; 0x6a7e <strtod+0x44>
    6a76:	f9 90       	ld	r15, Y+
    6a78:	ee 24       	eor	r14, r14
    6a7a:	e3 94       	inc	r14
    6a7c:	05 c0       	rjmp	.+10     	; 0x6a88 <strtod+0x4e>
    6a7e:	2b e2       	ldi	r18, 0x2B	; 43
    6a80:	f2 16       	cp	r15, r18
    6a82:	09 f4       	brne	.+2      	; 0x6a86 <strtod+0x4c>
    6a84:	f9 90       	ld	r15, Y+
    6a86:	ee 24       	eor	r14, r14
    6a88:	8e 01       	movw	r16, r28
    6a8a:	01 50       	subi	r16, 0x01	; 1
    6a8c:	10 40       	sbci	r17, 0x00	; 0
    6a8e:	c8 01       	movw	r24, r16
    6a90:	66 ee       	ldi	r22, 0xE6	; 230
    6a92:	7a e0       	ldi	r23, 0x0A	; 10
    6a94:	43 e0       	ldi	r20, 0x03	; 3
    6a96:	50 e0       	ldi	r21, 0x00	; 0
    6a98:	0e 94 93 36 	call	0x6d26	; 0x6d26 <strncasecmp_P>
    6a9c:	89 2b       	or	r24, r25
    6a9e:	01 f5       	brne	.+64     	; 0x6ae0 <strtod+0xa6>
    6aa0:	8e 01       	movw	r16, r28
    6aa2:	0e 5f       	subi	r16, 0xFE	; 254
    6aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    6aa6:	c8 01       	movw	r24, r16
    6aa8:	69 ee       	ldi	r22, 0xE9	; 233
    6aaa:	7a e0       	ldi	r23, 0x0A	; 10
    6aac:	45 e0       	ldi	r20, 0x05	; 5
    6aae:	50 e0       	ldi	r21, 0x00	; 0
    6ab0:	0e 94 93 36 	call	0x6d26	; 0x6d26 <strncasecmp_P>
    6ab4:	89 2b       	or	r24, r25
    6ab6:	19 f4       	brne	.+6      	; 0x6abe <strtod+0x84>
    6ab8:	8e 01       	movw	r16, r28
    6aba:	09 5f       	subi	r16, 0xF9	; 249
    6abc:	1f 4f       	sbci	r17, 0xFF	; 255
    6abe:	a1 14       	cp	r10, r1
    6ac0:	b1 04       	cpc	r11, r1
    6ac2:	19 f0       	breq	.+6      	; 0x6aca <strtod+0x90>
    6ac4:	f5 01       	movw	r30, r10
    6ac6:	11 83       	std	Z+1, r17	; 0x01
    6ac8:	00 83       	st	Z, r16
    6aca:	e0 fc       	sbrc	r14, 0
    6acc:	04 c0       	rjmp	.+8      	; 0x6ad6 <strtod+0x9c>
    6ace:	70 e0       	ldi	r23, 0x00	; 0
    6ad0:	90 e0       	ldi	r25, 0x00	; 0
    6ad2:	80 e8       	ldi	r24, 0x80	; 128
    6ad4:	14 c0       	rjmp	.+40     	; 0x6afe <strtod+0xc4>
    6ad6:	70 e0       	ldi	r23, 0x00	; 0
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	80 e8       	ldi	r24, 0x80	; 128
    6adc:	6f ef       	ldi	r22, 0xFF	; 255
    6ade:	08 c1       	rjmp	.+528    	; 0x6cf0 <strtod+0x2b6>
    6ae0:	c8 01       	movw	r24, r16
    6ae2:	6e ee       	ldi	r22, 0xEE	; 238
    6ae4:	7a e0       	ldi	r23, 0x0A	; 10
    6ae6:	43 e0       	ldi	r20, 0x03	; 3
    6ae8:	50 e0       	ldi	r21, 0x00	; 0
    6aea:	0e 94 93 36 	call	0x6d26	; 0x6d26 <strncasecmp_P>
    6aee:	89 2b       	or	r24, r25
    6af0:	69 f4       	brne	.+26     	; 0x6b0c <strtod+0xd2>
    6af2:	a1 14       	cp	r10, r1
    6af4:	b1 04       	cpc	r11, r1
    6af6:	29 f4       	brne	.+10     	; 0x6b02 <strtod+0xc8>
    6af8:	70 e0       	ldi	r23, 0x00	; 0
    6afa:	90 e0       	ldi	r25, 0x00	; 0
    6afc:	80 ec       	ldi	r24, 0xC0	; 192
    6afe:	6f e7       	ldi	r22, 0x7F	; 127
    6b00:	f7 c0       	rjmp	.+494    	; 0x6cf0 <strtod+0x2b6>
    6b02:	22 96       	adiw	r28, 0x02	; 2
    6b04:	f5 01       	movw	r30, r10
    6b06:	d1 83       	std	Z+1, r29	; 0x01
    6b08:	c0 83       	st	Z, r28
    6b0a:	f6 cf       	rjmp	.-20     	; 0x6af8 <strtod+0xbe>
    6b0c:	88 24       	eor	r8, r8
    6b0e:	99 24       	eor	r9, r9
    6b10:	40 e0       	ldi	r20, 0x00	; 0
    6b12:	50 e0       	ldi	r21, 0x00	; 0
    6b14:	60 e0       	ldi	r22, 0x00	; 0
    6b16:	70 e0       	ldi	r23, 0x00	; 0
    6b18:	ef 2d       	mov	r30, r15
    6b1a:	e0 53       	subi	r30, 0x30	; 48
    6b1c:	ea 30       	cpi	r30, 0x0A	; 10
    6b1e:	a0 f5       	brcc	.+104    	; 0x6b88 <strtod+0x14e>
    6b20:	f2 e0       	ldi	r31, 0x02	; 2
    6b22:	ef 2a       	or	r14, r31
    6b24:	8e 2d       	mov	r24, r14
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	9c 01       	movw	r18, r24
    6b2a:	28 70       	andi	r18, 0x08	; 8
    6b2c:	30 70       	andi	r19, 0x00	; 0
    6b2e:	e2 fe       	sbrs	r14, 2
    6b30:	06 c0       	rjmp	.+12     	; 0x6b3e <strtod+0x104>
    6b32:	23 2b       	or	r18, r19
    6b34:	79 f5       	brne	.+94     	; 0x6b94 <strtod+0x15a>
    6b36:	08 94       	sec
    6b38:	81 1c       	adc	r8, r1
    6b3a:	91 1c       	adc	r9, r1
    6b3c:	2b c0       	rjmp	.+86     	; 0x6b94 <strtod+0x15a>
    6b3e:	23 2b       	or	r18, r19
    6b40:	19 f0       	breq	.+6      	; 0x6b48 <strtod+0x10e>
    6b42:	08 94       	sec
    6b44:	81 08       	sbc	r8, r1
    6b46:	91 08       	sbc	r9, r1
    6b48:	db 01       	movw	r26, r22
    6b4a:	ca 01       	movw	r24, r20
    6b4c:	12 e0       	ldi	r17, 0x02	; 2
    6b4e:	88 0f       	add	r24, r24
    6b50:	99 1f       	adc	r25, r25
    6b52:	aa 1f       	adc	r26, r26
    6b54:	bb 1f       	adc	r27, r27
    6b56:	1a 95       	dec	r17
    6b58:	d1 f7       	brne	.-12     	; 0x6b4e <strtod+0x114>
    6b5a:	48 0f       	add	r20, r24
    6b5c:	59 1f       	adc	r21, r25
    6b5e:	6a 1f       	adc	r22, r26
    6b60:	7b 1f       	adc	r23, r27
    6b62:	44 0f       	add	r20, r20
    6b64:	55 1f       	adc	r21, r21
    6b66:	66 1f       	adc	r22, r22
    6b68:	77 1f       	adc	r23, r23
    6b6a:	4e 0f       	add	r20, r30
    6b6c:	51 1d       	adc	r21, r1
    6b6e:	61 1d       	adc	r22, r1
    6b70:	71 1d       	adc	r23, r1
    6b72:	48 39       	cpi	r20, 0x98	; 152
    6b74:	29 e9       	ldi	r18, 0x99	; 153
    6b76:	52 07       	cpc	r21, r18
    6b78:	29 e9       	ldi	r18, 0x99	; 153
    6b7a:	62 07       	cpc	r22, r18
    6b7c:	29 e1       	ldi	r18, 0x19	; 25
    6b7e:	72 07       	cpc	r23, r18
    6b80:	48 f0       	brcs	.+18     	; 0x6b94 <strtod+0x15a>
    6b82:	84 e0       	ldi	r24, 0x04	; 4
    6b84:	e8 2a       	or	r14, r24
    6b86:	06 c0       	rjmp	.+12     	; 0x6b94 <strtod+0x15a>
    6b88:	ee 3f       	cpi	r30, 0xFE	; 254
    6b8a:	31 f4       	brne	.+12     	; 0x6b98 <strtod+0x15e>
    6b8c:	e3 fc       	sbrc	r14, 3
    6b8e:	39 c0       	rjmp	.+114    	; 0x6c02 <strtod+0x1c8>
    6b90:	98 e0       	ldi	r25, 0x08	; 8
    6b92:	e9 2a       	or	r14, r25
    6b94:	f9 90       	ld	r15, Y+
    6b96:	c0 cf       	rjmp	.-128    	; 0x6b18 <strtod+0xde>
    6b98:	e5 33       	cpi	r30, 0x35	; 53
    6b9a:	11 f0       	breq	.+4      	; 0x6ba0 <strtod+0x166>
    6b9c:	e5 31       	cpi	r30, 0x15	; 21
    6b9e:	89 f5       	brne	.+98     	; 0x6c02 <strtod+0x1c8>
    6ba0:	29 91       	ld	r18, Y+
    6ba2:	2d 32       	cpi	r18, 0x2D	; 45
    6ba4:	19 f4       	brne	.+6      	; 0x6bac <strtod+0x172>
    6ba6:	e0 e1       	ldi	r30, 0x10	; 16
    6ba8:	ee 2a       	or	r14, r30
    6baa:	05 c0       	rjmp	.+10     	; 0x6bb6 <strtod+0x17c>
    6bac:	2b 32       	cpi	r18, 0x2B	; 43
    6bae:	19 f0       	breq	.+6      	; 0x6bb6 <strtod+0x17c>
    6bb0:	81 e0       	ldi	r24, 0x01	; 1
    6bb2:	90 e0       	ldi	r25, 0x00	; 0
    6bb4:	03 c0       	rjmp	.+6      	; 0x6bbc <strtod+0x182>
    6bb6:	29 91       	ld	r18, Y+
    6bb8:	82 e0       	ldi	r24, 0x02	; 2
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	e2 2f       	mov	r30, r18
    6bbe:	e0 53       	subi	r30, 0x30	; 48
    6bc0:	ea 30       	cpi	r30, 0x0A	; 10
    6bc2:	18 f0       	brcs	.+6      	; 0x6bca <strtod+0x190>
    6bc4:	c8 1b       	sub	r28, r24
    6bc6:	d9 0b       	sbc	r29, r25
    6bc8:	1c c0       	rjmp	.+56     	; 0x6c02 <strtod+0x1c8>
    6bca:	20 e0       	ldi	r18, 0x00	; 0
    6bcc:	30 e0       	ldi	r19, 0x00	; 0
    6bce:	fc e0       	ldi	r31, 0x0C	; 12
    6bd0:	20 38       	cpi	r18, 0x80	; 128
    6bd2:	3f 07       	cpc	r19, r31
    6bd4:	5c f4       	brge	.+22     	; 0x6bec <strtod+0x1b2>
    6bd6:	c9 01       	movw	r24, r18
    6bd8:	88 0f       	add	r24, r24
    6bda:	99 1f       	adc	r25, r25
    6bdc:	88 0f       	add	r24, r24
    6bde:	99 1f       	adc	r25, r25
    6be0:	28 0f       	add	r18, r24
    6be2:	39 1f       	adc	r19, r25
    6be4:	22 0f       	add	r18, r18
    6be6:	33 1f       	adc	r19, r19
    6be8:	2e 0f       	add	r18, r30
    6bea:	31 1d       	adc	r19, r1
    6bec:	e9 91       	ld	r30, Y+
    6bee:	e0 53       	subi	r30, 0x30	; 48
    6bf0:	ea 30       	cpi	r30, 0x0A	; 10
    6bf2:	68 f3       	brcs	.-38     	; 0x6bce <strtod+0x194>
    6bf4:	e4 fe       	sbrs	r14, 4
    6bf6:	03 c0       	rjmp	.+6      	; 0x6bfe <strtod+0x1c4>
    6bf8:	30 95       	com	r19
    6bfa:	21 95       	neg	r18
    6bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    6bfe:	82 0e       	add	r8, r18
    6c00:	93 1e       	adc	r9, r19
    6c02:	ce 2c       	mov	r12, r14
    6c04:	dd 24       	eor	r13, r13
    6c06:	e1 fe       	sbrs	r14, 1
    6c08:	07 c0       	rjmp	.+14     	; 0x6c18 <strtod+0x1de>
    6c0a:	a1 14       	cp	r10, r1
    6c0c:	b1 04       	cpc	r11, r1
    6c0e:	21 f0       	breq	.+8      	; 0x6c18 <strtod+0x1de>
    6c10:	21 97       	sbiw	r28, 0x01	; 1
    6c12:	f5 01       	movw	r30, r10
    6c14:	d1 83       	std	Z+1, r29	; 0x01
    6c16:	c0 83       	st	Z, r28
    6c18:	cb 01       	movw	r24, r22
    6c1a:	ba 01       	movw	r22, r20
    6c1c:	0e 94 c1 31 	call	0x6382	; 0x6382 <__floatunsisf>
    6c20:	7b 01       	movw	r14, r22
    6c22:	8c 01       	movw	r16, r24
    6c24:	f3 e0       	ldi	r31, 0x03	; 3
    6c26:	cf 22       	and	r12, r31
    6c28:	dd 24       	eor	r13, r13
    6c2a:	23 e0       	ldi	r18, 0x03	; 3
    6c2c:	c2 16       	cp	r12, r18
    6c2e:	d1 04       	cpc	r13, r1
    6c30:	21 f4       	brne	.+8      	; 0x6c3a <strtod+0x200>
    6c32:	17 fb       	bst	r17, 7
    6c34:	10 95       	com	r17
    6c36:	17 f9       	bld	r17, 7
    6c38:	10 95       	com	r17
    6c3a:	57 01       	movw	r10, r14
    6c3c:	68 01       	movw	r12, r16
    6c3e:	c8 01       	movw	r24, r16
    6c40:	b7 01       	movw	r22, r14
    6c42:	20 e0       	ldi	r18, 0x00	; 0
    6c44:	30 e0       	ldi	r19, 0x00	; 0
    6c46:	40 e0       	ldi	r20, 0x00	; 0
    6c48:	50 e0       	ldi	r21, 0x00	; 0
    6c4a:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
    6c4e:	88 23       	and	r24, r24
    6c50:	09 f4       	brne	.+2      	; 0x6c54 <strtod+0x21a>
    6c52:	4a c0       	rjmp	.+148    	; 0x6ce8 <strtod+0x2ae>
    6c54:	97 fe       	sbrs	r9, 7
    6c56:	0d c0       	rjmp	.+26     	; 0x6c72 <strtod+0x238>
    6c58:	25 e0       	ldi	r18, 0x05	; 5
    6c5a:	e2 2e       	mov	r14, r18
    6c5c:	2b e0       	ldi	r18, 0x0B	; 11
    6c5e:	f2 2e       	mov	r15, r18
    6c60:	90 94       	com	r9
    6c62:	81 94       	neg	r8
    6c64:	91 08       	sbc	r9, r1
    6c66:	93 94       	inc	r9
    6c68:	c0 e2       	ldi	r28, 0x20	; 32
    6c6a:	d0 e0       	ldi	r29, 0x00	; 0
    6c6c:	00 e0       	ldi	r16, 0x00	; 0
    6c6e:	10 e0       	ldi	r17, 0x00	; 0
    6c70:	12 c0       	rjmp	.+36     	; 0x6c96 <strtod+0x25c>
    6c72:	9d e1       	ldi	r25, 0x1D	; 29
    6c74:	e9 2e       	mov	r14, r25
    6c76:	9b e0       	ldi	r25, 0x0B	; 11
    6c78:	f9 2e       	mov	r15, r25
    6c7a:	f6 cf       	rjmp	.-20     	; 0x6c68 <strtod+0x22e>
    6c7c:	f7 01       	movw	r30, r14
    6c7e:	25 91       	lpm	r18, Z+
    6c80:	35 91       	lpm	r19, Z+
    6c82:	45 91       	lpm	r20, Z+
    6c84:	54 91       	lpm	r21, Z+
    6c86:	c6 01       	movw	r24, r12
    6c88:	b5 01       	movw	r22, r10
    6c8a:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__mulsf3>
    6c8e:	5b 01       	movw	r10, r22
    6c90:	6c 01       	movw	r12, r24
    6c92:	8c 1a       	sub	r8, r28
    6c94:	9d 0a       	sbc	r9, r29
    6c96:	8c 16       	cp	r8, r28
    6c98:	9d 06       	cpc	r9, r29
    6c9a:	84 f7       	brge	.-32     	; 0x6c7c <strtod+0x242>
    6c9c:	d5 95       	asr	r29
    6c9e:	c7 95       	ror	r28
    6ca0:	0f 5f       	subi	r16, 0xFF	; 255
    6ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ca4:	06 30       	cpi	r16, 0x06	; 6
    6ca6:	11 05       	cpc	r17, r1
    6ca8:	29 f0       	breq	.+10     	; 0x6cb4 <strtod+0x27a>
    6caa:	8c ef       	ldi	r24, 0xFC	; 252
    6cac:	9f ef       	ldi	r25, 0xFF	; 255
    6cae:	e8 0e       	add	r14, r24
    6cb0:	f9 1e       	adc	r15, r25
    6cb2:	f1 cf       	rjmp	.-30     	; 0x6c96 <strtod+0x25c>
    6cb4:	c5 01       	movw	r24, r10
    6cb6:	d6 01       	movw	r26, r12
    6cb8:	7c 01       	movw	r14, r24
    6cba:	8d 01       	movw	r16, r26
    6cbc:	8c 2d       	mov	r24, r12
    6cbe:	88 0f       	add	r24, r24
    6cc0:	8d 2d       	mov	r24, r13
    6cc2:	88 1f       	adc	r24, r24
    6cc4:	8f 3f       	cpi	r24, 0xFF	; 255
    6cc6:	51 f0       	breq	.+20     	; 0x6cdc <strtod+0x2a2>
    6cc8:	c6 01       	movw	r24, r12
    6cca:	b5 01       	movw	r22, r10
    6ccc:	20 e0       	ldi	r18, 0x00	; 0
    6cce:	30 e0       	ldi	r19, 0x00	; 0
    6cd0:	40 e0       	ldi	r20, 0x00	; 0
    6cd2:	50 e0       	ldi	r21, 0x00	; 0
    6cd4:	0e 94 24 31 	call	0x6248	; 0x6248 <__cmpsf2>
    6cd8:	88 23       	and	r24, r24
    6cda:	31 f4       	brne	.+12     	; 0x6ce8 <strtod+0x2ae>
    6cdc:	82 e2       	ldi	r24, 0x22	; 34
    6cde:	90 e0       	ldi	r25, 0x00	; 0
    6ce0:	90 93 d9 09 	sts	0x09D9, r25
    6ce4:	80 93 d8 09 	sts	0x09D8, r24
    6ce8:	7e 2d       	mov	r23, r14
    6cea:	9f 2d       	mov	r25, r15
    6cec:	80 2f       	mov	r24, r16
    6cee:	61 2f       	mov	r22, r17
    6cf0:	27 2f       	mov	r18, r23
    6cf2:	39 2f       	mov	r19, r25
    6cf4:	48 2f       	mov	r20, r24
    6cf6:	56 2f       	mov	r21, r22
    6cf8:	b9 01       	movw	r22, r18
    6cfa:	ca 01       	movw	r24, r20
    6cfc:	df 91       	pop	r29
    6cfe:	cf 91       	pop	r28
    6d00:	1f 91       	pop	r17
    6d02:	0f 91       	pop	r16
    6d04:	ff 90       	pop	r15
    6d06:	ef 90       	pop	r14
    6d08:	df 90       	pop	r13
    6d0a:	cf 90       	pop	r12
    6d0c:	bf 90       	pop	r11
    6d0e:	af 90       	pop	r10
    6d10:	9f 90       	pop	r9
    6d12:	8f 90       	pop	r8
    6d14:	08 95       	ret

00006d16 <isspace>:
    6d16:	91 11       	cpse	r25, r1
    6d18:	1e c0       	rjmp	.+60     	; 0x6d56 <__ctype_isfalse>
    6d1a:	80 32       	cpi	r24, 0x20	; 32
    6d1c:	19 f0       	breq	.+6      	; 0x6d24 <isspace+0xe>
    6d1e:	89 50       	subi	r24, 0x09	; 9
    6d20:	85 50       	subi	r24, 0x05	; 5
    6d22:	d0 f7       	brcc	.-12     	; 0x6d18 <isspace+0x2>
    6d24:	08 95       	ret

00006d26 <strncasecmp_P>:
    6d26:	fb 01       	movw	r30, r22
    6d28:	dc 01       	movw	r26, r24
    6d2a:	41 50       	subi	r20, 0x01	; 1
    6d2c:	50 40       	sbci	r21, 0x00	; 0
    6d2e:	88 f0       	brcs	.+34     	; 0x6d52 <strncasecmp_P+0x2c>
    6d30:	8d 91       	ld	r24, X+
    6d32:	81 34       	cpi	r24, 0x41	; 65
    6d34:	1c f0       	brlt	.+6      	; 0x6d3c <strncasecmp_P+0x16>
    6d36:	8b 35       	cpi	r24, 0x5B	; 91
    6d38:	0c f4       	brge	.+2      	; 0x6d3c <strncasecmp_P+0x16>
    6d3a:	80 5e       	subi	r24, 0xE0	; 224
    6d3c:	65 91       	lpm	r22, Z+
    6d3e:	61 34       	cpi	r22, 0x41	; 65
    6d40:	1c f0       	brlt	.+6      	; 0x6d48 <strncasecmp_P+0x22>
    6d42:	6b 35       	cpi	r22, 0x5B	; 91
    6d44:	0c f4       	brge	.+2      	; 0x6d48 <strncasecmp_P+0x22>
    6d46:	60 5e       	subi	r22, 0xE0	; 224
    6d48:	86 1b       	sub	r24, r22
    6d4a:	61 11       	cpse	r22, r1
    6d4c:	71 f3       	breq	.-36     	; 0x6d2a <strncasecmp_P+0x4>
    6d4e:	99 0b       	sbc	r25, r25
    6d50:	08 95       	ret
    6d52:	88 1b       	sub	r24, r24
    6d54:	fc cf       	rjmp	.-8      	; 0x6d4e <strncasecmp_P+0x28>

00006d56 <__ctype_isfalse>:
    6d56:	99 27       	eor	r25, r25
    6d58:	88 27       	eor	r24, r24

00006d5a <__ctype_istrue>:
    6d5a:	08 95       	ret

00006d5c <_exit>:
    6d5c:	f8 94       	cli

00006d5e <__stop_program>:
    6d5e:	ff cf       	rjmp	.-2      	; 0x6d5e <__stop_program>
