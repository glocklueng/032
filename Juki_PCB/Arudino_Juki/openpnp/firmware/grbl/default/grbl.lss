
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00006438  000064cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fa  00800206  00800206  000064d2  2**0
                  ALLOC
  3 .debug_aranges 00000708  00000000  00000000  000064d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dde  00000000  00000000  00006bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000058bb  00000000  00000000  000079b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001cd0  00000000  00000000  0000d273  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000050d2  00000000  00000000  0000ef43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b70  00000000  00000000  00014018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016a5  00000000  00000000  00014b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003600  00000000  00000000  0001622d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bd8  00000000  00000000  0001982d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__ctors_end>
       4:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
       8:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
       c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      10:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      14:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      18:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      1c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      20:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      24:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      28:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      2c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      30:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      34:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      38:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      3c:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__vector_15>
      40:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      44:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__vector_17>
      48:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      4c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      50:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__vector_20>
      54:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      58:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      5c:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__vector_23>
      60:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      64:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__vector_25>
      68:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      6c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      70:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      74:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      78:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      7c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      80:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <__vector_32>
      84:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      88:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      8c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      90:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      94:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      98:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      9c:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      a0:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      a4:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      a8:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      ac:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      b0:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      b4:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      b8:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      bc:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      c0:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      c4:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      c8:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      cc:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      d0:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      d4:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      d8:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      dc:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      e0:	0c 94 30 03 	jmp	0x660	; 0x660 <__bad_interrupt>
      e4:	95 07       	cpc	r25, r21
      e6:	91 07       	cpc	r25, r17
      e8:	8d 07       	cpc	r24, r29
      ea:	89 07       	cpc	r24, r25
      ec:	7d 07       	cpc	r23, r29
      ee:	22 07       	cpc	r18, r18
      f0:	22 07       	cpc	r18, r18
      f2:	22 07       	cpc	r18, r18
      f4:	22 07       	cpc	r18, r18
      f6:	22 07       	cpc	r18, r18
      f8:	22 07       	cpc	r18, r18
      fa:	22 07       	cpc	r18, r18
      fc:	22 07       	cpc	r18, r18
      fe:	22 07       	cpc	r18, r18
     100:	22 07       	cpc	r18, r18
     102:	22 07       	cpc	r18, r18
     104:	22 07       	cpc	r18, r18
     106:	80 07       	cpc	r24, r16
     108:	b6 07       	cpc	r27, r22
     10a:	ad 07       	cpc	r26, r29
     10c:	a9 07       	cpc	r26, r25
     10e:	a6 07       	cpc	r26, r22
     110:	22 07       	cpc	r18, r18
     112:	22 07       	cpc	r18, r18
     114:	22 07       	cpc	r18, r18
     116:	22 07       	cpc	r18, r18
     118:	22 07       	cpc	r18, r18
     11a:	22 07       	cpc	r18, r18
     11c:	a3 07       	cpc	r26, r19
     11e:	22 07       	cpc	r18, r18
     120:	a3 07       	cpc	r26, r19
     122:	22 07       	cpc	r18, r18
     124:	22 07       	cpc	r18, r18
     126:	22 07       	cpc	r18, r18
     128:	22 07       	cpc	r18, r18
     12a:	22 07       	cpc	r18, r18
     12c:	22 07       	cpc	r18, r18
     12e:	22 07       	cpc	r18, r18
     130:	22 07       	cpc	r18, r18
     132:	22 07       	cpc	r18, r18
     134:	22 07       	cpc	r18, r18
     136:	22 07       	cpc	r18, r18
     138:	22 07       	cpc	r18, r18
     13a:	22 07       	cpc	r18, r18
     13c:	22 07       	cpc	r18, r18
     13e:	22 07       	cpc	r18, r18
     140:	22 07       	cpc	r18, r18
     142:	22 07       	cpc	r18, r18
     144:	22 07       	cpc	r18, r18
     146:	22 07       	cpc	r18, r18
     148:	22 07       	cpc	r18, r18
     14a:	22 07       	cpc	r18, r18
     14c:	22 07       	cpc	r18, r18
     14e:	a0 07       	cpc	r26, r16
     150:	22 07       	cpc	r18, r18
     152:	22 07       	cpc	r18, r18
     154:	22 07       	cpc	r18, r18
     156:	22 07       	cpc	r18, r18
     158:	22 07       	cpc	r18, r18
     15a:	22 07       	cpc	r18, r18
     15c:	22 07       	cpc	r18, r18
     15e:	22 07       	cpc	r18, r18
     160:	22 07       	cpc	r18, r18
     162:	22 07       	cpc	r18, r18
     164:	22 07       	cpc	r18, r18
     166:	22 07       	cpc	r18, r18
     168:	22 07       	cpc	r18, r18
     16a:	22 07       	cpc	r18, r18
     16c:	22 07       	cpc	r18, r18
     16e:	22 07       	cpc	r18, r18
     170:	22 07       	cpc	r18, r18
     172:	22 07       	cpc	r18, r18
     174:	22 07       	cpc	r18, r18
     176:	22 07       	cpc	r18, r18
     178:	22 07       	cpc	r18, r18
     17a:	22 07       	cpc	r18, r18
     17c:	22 07       	cpc	r18, r18
     17e:	22 07       	cpc	r18, r18
     180:	22 07       	cpc	r18, r18
     182:	22 07       	cpc	r18, r18
     184:	9c 07       	cpc	r25, r28
     186:	22 07       	cpc	r18, r18
     188:	22 07       	cpc	r18, r18
     18a:	22 07       	cpc	r18, r18
     18c:	22 07       	cpc	r18, r18
     18e:	22 07       	cpc	r18, r18
     190:	22 07       	cpc	r18, r18
     192:	22 07       	cpc	r18, r18
     194:	22 07       	cpc	r18, r18
     196:	22 07       	cpc	r18, r18
     198:	98 07       	cpc	r25, r24
     19a:	c9 07       	cpc	r28, r25
     19c:	c6 07       	cpc	r28, r22
     19e:	c2 07       	cpc	r28, r18
     1a0:	bf 07       	cpc	r27, r31
     1a2:	de 07       	cpc	r29, r30
     1a4:	de 07       	cpc	r29, r30
     1a6:	da 07       	cpc	r29, r26
     1a8:	d3 07       	cpc	r29, r19
     1aa:	cc 07       	cpc	r28, r28
     1ac:	11 08       	sbc	r1, r1
     1ae:	22 07       	cpc	r18, r18
     1b0:	22 07       	cpc	r18, r18
     1b2:	0a 08       	sbc	r0, r10
     1b4:	05 08       	sbc	r0, r5
     1b6:	fe 07       	cpc	r31, r30
     1b8:	f7 07       	cpc	r31, r23
     1ba:	f0 07       	cpc	r31, r16
     1bc:	e9 07       	cpc	r30, r25
     1be:	e2 07       	cpc	r30, r18
     1c0:	43 08       	sbc	r4, r3
     1c2:	3c 08       	sbc	r3, r12
     1c4:	35 08       	sbc	r3, r5
     1c6:	2e 08       	sbc	r2, r14
     1c8:	27 08       	sbc	r2, r7
     1ca:	20 08       	sbc	r2, r0
     1cc:	1b 08       	sbc	r1, r11
     1ce:	16 08       	sbc	r1, r6
     1d0:	6c 08       	sbc	r6, r12
     1d2:	65 08       	sbc	r6, r5
     1d4:	60 08       	sbc	r6, r0
     1d6:	59 08       	sbc	r5, r9
     1d8:	79 07       	cpc	r23, r25
     1da:	22 07       	cpc	r18, r18
     1dc:	4a 08       	sbc	r4, r10
     1de:	da 07       	cpc	r29, r26
     1e0:	54 08       	sbc	r5, r4
     1e2:	22 07       	cpc	r18, r18
     1e4:	22 07       	cpc	r18, r18
     1e6:	22 07       	cpc	r18, r18
     1e8:	22 07       	cpc	r18, r18
     1ea:	22 07       	cpc	r18, r18
     1ec:	22 07       	cpc	r18, r18
     1ee:	22 07       	cpc	r18, r18
     1f0:	22 07       	cpc	r18, r18
     1f2:	22 07       	cpc	r18, r18
     1f4:	22 07       	cpc	r18, r18
     1f6:	22 07       	cpc	r18, r18
     1f8:	22 07       	cpc	r18, r18
     1fa:	22 07       	cpc	r18, r18
     1fc:	22 07       	cpc	r18, r18
     1fe:	22 07       	cpc	r18, r18
     200:	22 07       	cpc	r18, r18
     202:	22 07       	cpc	r18, r18
     204:	22 07       	cpc	r18, r18
     206:	22 07       	cpc	r18, r18
     208:	22 07       	cpc	r18, r18
     20a:	22 07       	cpc	r18, r18
     20c:	22 07       	cpc	r18, r18
     20e:	22 07       	cpc	r18, r18
     210:	22 07       	cpc	r18, r18
     212:	22 07       	cpc	r18, r18
     214:	22 07       	cpc	r18, r18
     216:	22 07       	cpc	r18, r18
     218:	22 07       	cpc	r18, r18
     21a:	da 07       	cpc	r29, r26
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.2001>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.1999>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.1997>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1995>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1993>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1991>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1989>:
     273:	0d 0a 00                                            ...

00000276 <__c.1987>:
     276:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

00000282 <__c.1985>:
     282:	0d 0a 00                                            ...

00000285 <__c.1983>:
     285:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000290 <__c.1981>:
     290:	0d 0a 00                                            ...

00000293 <__c.1979>:
     293:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000002a3 <__c.1977>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1975>:
     2a6:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000002b5 <__c.1973>:
     2b5:	0d 0a 00                                            ...

000002b8 <__c.1971>:
     2b8:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000002c5 <__c.1969>:
     2c5:	0d 0a 00                                            ...

000002c8 <__c.1967>:
     2c8:	61 76 72 5f 6d 69 6c 6c 69 73 28 29 20 3d 20 00     avr_millis() = .

000002d8 <__c.1965>:
     2d8:	0d 0a 00                                            ...

000002db <__c.1963>:
     2db:	74 6f 5f 6d 69 6c 6c 69 6d 65 74 65 72 73 28 31     to_millimeters(1
     2eb:	30 30 29 20 3d 20 00                                00) = .

000002f2 <__c.1961>:
     2f2:	0d 0a 00                                            ...

000002f5 <__c.1959>:
     2f5:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

00000304 <__c.1957>:
     304:	0d 0a 00                                            ...

00000307 <__c.1955>:
     307:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

00000311 <__c.1953>:
     311:	0d 0a 00                                            ...

00000314 <__c.1951>:
     314:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     324:	3d 20 00                                            = .

00000327 <__c.1949>:
     327:	0d 0a 00                                            ...

0000032a <__c.1947>:
     32a:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     33a:	20 00                                                .

0000033c <__c.1830>:
     33c:	65 72 72 0a 00                                      err..

00000341 <__c.1827>:
     341:	6f 6b 0a 00                                         ok..

00000345 <__c.1823>:
     345:	6e 68 6f 0a 00                                      nho..

0000034a <__c.1819>:
     34a:	6c 69 6d 0a 00                                      lim..

0000034f <__c.1770>:
     34f:	6f 6b 0a 00                                         ok..

00000353 <__c.1746>:
     353:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     363:	6e 67 0d 0a 00                                      ng...

00000368 <__c.1744>:
     368:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     378:	72 0d 0a 00                                         r...

0000037c <__c.1701>:
     37c:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     38c:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     39c:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     3ac:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     3bc:	0d 0a 00                                            ...

000003bf <__c.1699>:
     3bf:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     3cf:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     3df:	61 62 6c 65 64 29 0d 0a 00                          abled)...

000003e8 <__c.1697>:
     3e8:	24 31 30 30 30 20 3d 20 00                          $1000 = .

000003f1 <__c.1695>:
     3f1:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     401:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     411:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     421:	2f 6d 69 6e 29 0d 0a 00                             /min)...

00000429 <__c.1693>:
     429:	24 39 20 3d 20 00                                   $9 = .

0000042f <__c.1691>:
     42f:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     43f:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

0000044d <__c.1689>:
     44d:	24 38 20 3d 20 00                                   $8 = .

00000453 <__c.1687>:
     453:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     463:	29 0d 0a 00                                         )...

00000467 <__c.1685>:
     467:	24 37 20 3d 20 00                                   $7 = .

0000046d <__c.1683>:
     46d:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     47d:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

0000048b <__c.1681>:
     48b:	24 36 20 3d 20 00                                   $6 = .

00000491 <__c.1679>:
     491:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     4a1:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

000004af <__c.1677>:
     4af:	24 35 20 3d 20 00                                   $5 = .

000004b5 <__c.1675>:
     4b5:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     4c5:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

000004d2 <__c.1673>:
     4d2:	24 34 20 3d 20 00                                   $4 = .

000004d8 <__c.1671>:
     4d8:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     4e8:	0a 00                                               ..

000004ea <__c.1669>:
     4ea:	24 33 20 3d 20 00                                   $3 = .

000004f0 <__c.1667>:
     4f0:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

00000500 <__c.1665>:
     500:	24 32 20 3d 20 00                                   $2 = .

00000506 <__c.1663>:
     506:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

00000516 <__c.1661>:
     516:	24 31 20 3d 20 00                                   $1 = .

0000051c <__c.1659>:
     51c:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

0000052c <__c.1657>:
     52c:	24 30 20 3d 20 00                                   $0 = .

00000532 <__c.1655>:
     532:	0d 0a 00                                            ...

00000535 <__c.1653>:
     535:	30 2e 37 36 50 42 00                                0.76PB.

0000053c <__c.1651>:
     53c:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

00000548 <__c.2244>:
     548:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

00000556 <__c.2121>:
     556:	79 4c 69 6d 69 74 32 3a 20 69 73 20 69 6e 20 6c     yLimit2: is in l
     566:	69 6d 69 74 0d 0a 00                                imit...

0000056d <__c.2112>:
     56d:	79 4c 69 6d 69 74 31 3a 20 69 73 20 69 6e 20 6c     yLimit1: is in l
     57d:	69 6d 69 74 0d 0a 00                                imit...

00000584 <__c.2103>:
     584:	78 4c 69 6d 69 74 32 3a 20 69 73 20 69 6e 20 6c     xLimit2: is in l
     594:	69 6d 69 74 0d 0a 00                                imit...

0000059b <__c.2094>:
     59b:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000005a5 <__c.1856>:
     5a5:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     5b5:	0d 00                                               ..

000005b7 <__c.1891>:
     5b7:	6e 6f 0a 00                                         no..

000005bb <__c.1889>:
     5bb:	79 65 73 0a 00                                      yes..

000005c0 <__c.1810>:
     5c0:	45 72 72 6f 72 3a 20 4f 53 43 4f 4b 49 52 51 20     Error: OSCOKIRQ 
     5d0:	66 61 69 6c 65 64 20 74 6f 20 61 73 73 65 72 74     failed to assert
     5e0:	0a 00                                               ..

000005e2 <pstr_inf>:
     5e2:	49 4e 46                                            INF

000005e5 <pstr_inity>:
     5e5:	49 4e 49 54 59                                      INITY

000005ea <pstr_nan>:
     5ea:	4e 41 4e                                            NAN

000005ed <pwr_m10>:
     5ed:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     5fd:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000605 <pwr_p10>:
     605:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     615:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000061e <__ctors_end>:
     61e:	11 24       	eor	r1, r1
     620:	1f be       	out	0x3f, r1	; 63
     622:	cf ef       	ldi	r28, 0xFF	; 255
     624:	d1 e2       	ldi	r29, 0x21	; 33
     626:	de bf       	out	0x3e, r29	; 62
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	00 e0       	ldi	r16, 0x00	; 0
     62c:	0c bf       	out	0x3c, r16	; 60

0000062e <__do_copy_data>:
     62e:	12 e0       	ldi	r17, 0x02	; 2
     630:	a0 e0       	ldi	r26, 0x00	; 0
     632:	b2 e0       	ldi	r27, 0x02	; 2
     634:	e8 e3       	ldi	r30, 0x38	; 56
     636:	f4 e6       	ldi	r31, 0x64	; 100
     638:	00 e0       	ldi	r16, 0x00	; 0
     63a:	0b bf       	out	0x3b, r16	; 59
     63c:	02 c0       	rjmp	.+4      	; 0x642 <__do_copy_data+0x14>
     63e:	07 90       	elpm	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	a6 30       	cpi	r26, 0x06	; 6
     644:	b1 07       	cpc	r27, r17
     646:	d9 f7       	brne	.-10     	; 0x63e <__do_copy_data+0x10>

00000648 <__do_clear_bss>:
     648:	17 e0       	ldi	r17, 0x07	; 7
     64a:	a6 e0       	ldi	r26, 0x06	; 6
     64c:	b2 e0       	ldi	r27, 0x02	; 2
     64e:	01 c0       	rjmp	.+2      	; 0x652 <.do_clear_bss_start>

00000650 <.do_clear_bss_loop>:
     650:	1d 92       	st	X+, r1

00000652 <.do_clear_bss_start>:
     652:	a0 30       	cpi	r26, 0x00	; 0
     654:	b1 07       	cpc	r27, r17
     656:	e1 f7       	brne	.-8      	; 0x650 <.do_clear_bss_loop>
     658:	0e 94 be 0a 	call	0x157c	; 0x157c <main>
     65c:	0c 94 1a 32 	jmp	0x6434	; 0x6434 <_exit>

00000660 <__bad_interrupt>:
     660:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000664 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     664:	24 9a       	sbi	0x04, 4	; 4
}
     666:	08 95       	ret

00000668 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     668:	89 2b       	or	r24, r25
     66a:	11 f4       	brne	.+4      	; 0x670 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     66c:	2c 98       	cbi	0x05, 4	; 5
     66e:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     670:	2c 9a       	sbi	0x05, 4	; 5
     672:	08 95       	ret

00000674 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     674:	f9 99       	sbic	0x1f, 1	; 31
     676:	fe cf       	rjmp	.-4      	; 0x674 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     678:	92 bd       	out	0x22, r25	; 34
     67a:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     680:	80 b5       	in	r24, 0x20	; 32
}
     682:	08 95       	ret

00000684 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     684:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     686:	f9 99       	sbic	0x1f, 1	; 31
     688:	fe cf       	rjmp	.-4      	; 0x686 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     68a:	92 bd       	out	0x22, r25	; 34
     68c:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     692:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     694:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     696:	89 2f       	mov	r24, r25
     698:	86 23       	and	r24, r22
     69a:	41 f0       	breq	.+16     	; 0x6ac <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     69c:	6f 3f       	cpi	r22, 0xFF	; 255
     69e:	71 f0       	breq	.+28     	; 0x6bc <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     6a0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     6a6:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6a8:	78 94       	sei
}
     6aa:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     6ac:	99 23       	and	r25, r25
     6ae:	e1 f3       	breq	.-8      	; 0x6a8 <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6b0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6b2:	84 e2       	ldi	r24, 0x24	; 36
     6b4:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     6b6:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     6b8:	78 94       	sei
}
     6ba:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6bc:	84 e1       	ldi	r24, 0x14	; 20
     6be:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     6c0:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6c2:	78 94       	sei
}
     6c4:	08 95       	ret

000006c6 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     6c6:	af 92       	push	r10
     6c8:	bf 92       	push	r11
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	6c 01       	movw	r12, r24
     6da:	8b 01       	movw	r16, r22
     6dc:	5a 01       	movw	r10, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6de:	41 15       	cp	r20, r1
     6e0:	51 05       	cpc	r21, r1
     6e2:	59 f1       	breq	.+86     	; 0x73a <memcpy_to_eeprom_with_checksum+0x74>
     6e4:	ff 24       	eor	r15, r15
     6e6:	c0 e0       	ldi	r28, 0x00	; 0
     6e8:	d0 e0       	ldi	r29, 0x00	; 0
     6ea:	0d c0       	rjmp	.+26     	; 0x706 <memcpy_to_eeprom_with_checksum+0x40>
    checksum = (checksum << 1) || (checksum >> 7);
     6ec:	21 e0       	ldi	r18, 0x01	; 1
    checksum += *source;
     6ee:	f8 01       	movw	r30, r16
     6f0:	60 81       	ld	r22, Z
     6f2:	f2 2e       	mov	r15, r18
     6f4:	f6 0e       	add	r15, r22
    eeprom_put_char(destination++, *(source++)); 
     6f6:	0e 94 42 03 	call	0x684	; 0x684 <eeprom_put_char>
     6fa:	21 96       	adiw	r28, 0x01	; 1
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6fc:	ca 15       	cp	r28, r10
     6fe:	db 05       	cpc	r29, r11
     700:	61 f0       	breq	.+24     	; 0x71a <memcpy_to_eeprom_with_checksum+0x54>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     706:	ce 01       	movw	r24, r28
     708:	8c 0d       	add	r24, r12
     70a:	9d 1d       	adc	r25, r13
    checksum = (checksum << 1) || (checksum >> 7);
     70c:	ff 20       	and	r15, r15
     70e:	71 f7       	brne	.-36     	; 0x6ec <memcpy_to_eeprom_with_checksum+0x26>
     710:	2f 2d       	mov	r18, r15
     712:	22 1f       	adc	r18, r18
     714:	22 27       	eor	r18, r18
     716:	22 1f       	adc	r18, r18
     718:	ea cf       	rjmp	.-44     	; 0x6ee <memcpy_to_eeprom_with_checksum+0x28>
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     71a:	cc 0e       	add	r12, r28
     71c:	dd 1e       	adc	r13, r29
  }
  eeprom_put_char(destination, checksum);
     71e:	c6 01       	movw	r24, r12
     720:	6f 2d       	mov	r22, r15
     722:	0e 94 42 03 	call	0x684	; 0x684 <eeprom_put_char>
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	08 95       	ret
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     73a:	ff 24       	eor	r15, r15
     73c:	f0 cf       	rjmp	.-32     	; 0x71e <memcpy_to_eeprom_with_checksum+0x58>

0000073e <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     73e:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     740:	41 15       	cp	r20, r1
     742:	51 05       	cpc	r21, r1
     744:	c9 f1       	breq	.+114    	; 0x7b8 <memcpy_from_eeprom_with_checksum+0x7a>
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     74c:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     74e:	c9 01       	movw	r24, r18
     750:	86 0f       	add	r24, r22
     752:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     754:	f9 99       	sbic	0x1f, 1	; 31
     756:	fe cf       	rjmp	.-4      	; 0x754 <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     758:	92 bd       	out	0x22, r25	; 34
     75a:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     75c:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     75e:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     760:	aa 23       	and	r26, r26
     762:	59 f0       	breq	.+22     	; 0x77a <memcpy_from_eeprom_with_checksum+0x3c>
     764:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     766:	a8 2f       	mov	r26, r24
     768:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     76a:	90 83       	st	Z, r25
     76c:	2f 5f       	subi	r18, 0xFF	; 255
     76e:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     770:	24 17       	cp	r18, r20
     772:	35 07       	cpc	r19, r21
     774:	71 f0       	breq	.+28     	; 0x792 <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     776:	31 96       	adiw	r30, 0x01	; 1
     778:	ea cf       	rjmp	.-44     	; 0x74e <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     77a:	8a 2f       	mov	r24, r26
     77c:	88 1f       	adc	r24, r24
     77e:	88 27       	eor	r24, r24
     780:	88 1f       	adc	r24, r24
    checksum += data;    
     782:	a8 2f       	mov	r26, r24
     784:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     786:	90 83       	st	Z, r25
     788:	2f 5f       	subi	r18, 0xFF	; 255
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     78c:	24 17       	cp	r18, r20
     78e:	35 07       	cpc	r19, r21
     790:	91 f7       	brne	.-28     	; 0x776 <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     792:	62 0f       	add	r22, r18
     794:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     796:	f9 99       	sbic	0x1f, 1	; 31
     798:	fe cf       	rjmp	.-4      	; 0x796 <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     79a:	72 bd       	out	0x22, r23	; 34
     79c:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     7a2:	80 b5       	in	r24, 0x20	; 32
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	a8 17       	cp	r26, r24
     7aa:	11 f0       	breq	.+4      	; 0x7b0 <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7ac:	c9 01       	movw	r24, r18
     7ae:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7b4:	c9 01       	movw	r24, r18
     7b6:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7b8:	a0 e0       	ldi	r26, 0x00	; 0
     7ba:	ed cf       	rjmp	.-38     	; 0x796 <memcpy_from_eeprom_with_checksum+0x58>

000007bc <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     7bc:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     7c0:	60 93 30 02 	sts	0x0230, r22
  gc.plane_axis_2 = axis_2;
     7c4:	40 93 31 02 	sts	0x0231, r20
}
     7c8:	08 95       	ret

000007ca <set_feeder_x>:

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
     7ca:	60 93 06 02 	sts	0x0206, r22
     7ce:	70 93 07 02 	sts	0x0207, r23
     7d2:	80 93 08 02 	sts	0x0208, r24
     7d6:	90 93 09 02 	sts	0x0209, r25
}
     7da:	08 95       	ret

000007dc <set_feeder_y>:

void set_feeder_y( double y )
{
	feeder_x_pos = y;
     7dc:	60 93 06 02 	sts	0x0206, r22
     7e0:	70 93 07 02 	sts	0x0207, r23
     7e4:	80 93 08 02 	sts	0x0208, r24
     7e8:	90 93 09 02 	sts	0x0209, r25
}
     7ec:	08 95       	ret

000007ee <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     7ee:	2f 92       	push	r2
     7f0:	3f 92       	push	r3
     7f2:	4f 92       	push	r4
     7f4:	5f 92       	push	r5
     7f6:	6f 92       	push	r6
     7f8:	7f 92       	push	r7
     7fa:	8f 92       	push	r8
     7fc:	9f 92       	push	r9
     7fe:	af 92       	push	r10
     800:	bf 92       	push	r11
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	28 97       	sbiw	r28, 0x08	; 8
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	69 83       	std	Y+1, r22	; 0x01
     824:	7a 83       	std	Y+2, r23	; 0x02
     826:	8b 83       	std	Y+3, r24	; 0x03
     828:	9c 83       	std	Y+4, r25	; 0x04
     82a:	2d 83       	std	Y+5, r18	; 0x05
     82c:	3e 83       	std	Y+6, r19	; 0x06
     82e:	4f 83       	std	Y+7, r20	; 0x07
     830:	58 87       	std	Y+8, r21	; 0x08
     832:	17 01       	movw	r2, r14
     834:	28 01       	movw	r4, r16
     836:	35 01       	movw	r6, r10
     838:	46 01       	movw	r8, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e8       	ldi	r20, 0x80	; 128
     840:	5f eb       	ldi	r21, 0xBF	; 191
     842:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
     846:	88 23       	and	r24, r24
     848:	41 f4       	brne	.+16     	; 0x85a <gotoxy+0x6c>
     84a:	20 90 1c 02 	lds	r2, 0x021C
     84e:	30 90 1d 02 	lds	r3, 0x021D
     852:	40 90 1e 02 	lds	r4, 0x021E
     856:	50 90 1f 02 	lds	r5, 0x021F
  if( y == -1) c = gc.position[Y_AXIS] ;
     85a:	6d 81       	ldd	r22, Y+5	; 0x05
     85c:	7e 81       	ldd	r23, Y+6	; 0x06
     85e:	8f 81       	ldd	r24, Y+7	; 0x07
     860:	98 85       	ldd	r25, Y+8	; 0x08
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e8       	ldi	r20, 0x80	; 128
     868:	5f eb       	ldi	r21, 0xBF	; 191
     86a:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
     86e:	88 23       	and	r24, r24
     870:	41 f4       	brne	.+16     	; 0x882 <gotoxy+0x94>
     872:	60 90 20 02 	lds	r6, 0x0220
     876:	70 90 21 02 	lds	r7, 0x0221
     87a:	80 90 22 02 	lds	r8, 0x0222
     87e:	90 90 23 02 	lds	r9, 0x0223
  if( z == -1) z = gc.position[Z_AXIS] ;
     882:	c2 01       	movw	r24, r4
     884:	b1 01       	movw	r22, r2
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e8       	ldi	r20, 0x80	; 128
     88c:	5f eb       	ldi	r21, 0xBF	; 191
     88e:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
     892:	88 23       	and	r24, r24
     894:	41 f4       	brne	.+16     	; 0x8a6 <gotoxy+0xb8>
     896:	20 90 24 02 	lds	r2, 0x0224
     89a:	30 90 25 02 	lds	r3, 0x0225
     89e:	40 90 26 02 	lds	r4, 0x0226
     8a2:	50 90 27 02 	lds	r5, 0x0227
  if( c == -1) c = gc.position[C_AXIS] ;
     8a6:	c4 01       	movw	r24, r8
     8a8:	b3 01       	movw	r22, r6
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e8       	ldi	r20, 0x80	; 128
     8b0:	5f eb       	ldi	r21, 0xBF	; 191
     8b2:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
     8b6:	88 23       	and	r24, r24
     8b8:	41 f4       	brne	.+16     	; 0x8ca <gotoxy+0xdc>
     8ba:	60 90 28 02 	lds	r6, 0x0228
     8be:	70 90 29 02 	lds	r7, 0x0229
     8c2:	80 90 2a 02 	lds	r8, 0x022A
     8c6:	90 90 2b 02 	lds	r9, 0x022B

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <gotoxy+0xde>
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <gotoxy+0xe0>
     8ce:	80 91 18 02 	lds	r24, 0x0218
     8d2:	90 91 19 02 	lds	r25, 0x0219
     8d6:	a0 91 1a 02 	lds	r26, 0x021A
     8da:	b0 91 1b 02 	lds	r27, 0x021B
     8de:	ed b7       	in	r30, 0x3d	; 61
     8e0:	fe b7       	in	r31, 0x3e	; 62
     8e2:	81 83       	std	Z+1, r24	; 0x01
     8e4:	92 83       	std	Z+2, r25	; 0x02
     8e6:	a3 83       	std	Z+3, r26	; 0x03
     8e8:	b4 83       	std	Z+4, r27	; 0x04
     8ea:	16 82       	std	Z+6, r1	; 0x06
     8ec:	15 82       	std	Z+5, r1	; 0x05
     8ee:	69 81       	ldd	r22, Y+1	; 0x01
     8f0:	7a 81       	ldd	r23, Y+2	; 0x02
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	9c 81       	ldd	r25, Y+4	; 0x04
     8f6:	2d 81       	ldd	r18, Y+5	; 0x05
     8f8:	3e 81       	ldd	r19, Y+6	; 0x06
     8fa:	4f 81       	ldd	r20, Y+7	; 0x07
     8fc:	58 85       	ldd	r21, Y+8	; 0x08
     8fe:	82 01       	movw	r16, r4
     900:	71 01       	movw	r14, r2
     902:	64 01       	movw	r12, r8
     904:	53 01       	movw	r10, r6
     906:	0e 94 9e 10 	call	0x213c	; 0x213c <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	9a 81       	ldd	r25, Y+2	; 0x02
     90e:	ab 81       	ldd	r26, Y+3	; 0x03
     910:	bc 81       	ldd	r27, Y+4	; 0x04
     912:	80 93 1c 02 	sts	0x021C, r24
     916:	90 93 1d 02 	sts	0x021D, r25
     91a:	a0 93 1e 02 	sts	0x021E, r26
     91e:	b0 93 1f 02 	sts	0x021F, r27
   gc.position[Y_AXIS] = y;
     922:	8d 81       	ldd	r24, Y+5	; 0x05
     924:	9e 81       	ldd	r25, Y+6	; 0x06
     926:	af 81       	ldd	r26, Y+7	; 0x07
     928:	b8 85       	ldd	r27, Y+8	; 0x08
     92a:	80 93 20 02 	sts	0x0220, r24
     92e:	90 93 21 02 	sts	0x0221, r25
     932:	a0 93 22 02 	sts	0x0222, r26
     936:	b0 93 23 02 	sts	0x0223, r27
   gc.position[Z_AXIS] = z;
     93a:	20 92 24 02 	sts	0x0224, r2
     93e:	30 92 25 02 	sts	0x0225, r3
     942:	40 92 26 02 	sts	0x0226, r4
     946:	50 92 27 02 	sts	0x0227, r5
   gc.position[C_AXIS] = c;
     94a:	60 92 28 02 	sts	0x0228, r6
     94e:	70 92 29 02 	sts	0x0229, r7
     952:	80 92 2a 02 	sts	0x022A, r8
     956:	90 92 2b 02 	sts	0x022B, r9
     95a:	ad b7       	in	r26, 0x3d	; 61
     95c:	be b7       	in	r27, 0x3e	; 62
     95e:	16 96       	adiw	r26, 0x06	; 6
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	be bf       	out	0x3e, r27	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	ad bf       	out	0x3d, r26	; 61

}
     96a:	28 96       	adiw	r28, 0x08	; 8
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	7f 90       	pop	r7
     990:	6f 90       	pop	r6
     992:	5f 90       	pop	r5
     994:	4f 90       	pop	r4
     996:	3f 90       	pop	r3
     998:	2f 90       	pop	r2
     99a:	08 95       	ret

0000099c <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	df 93       	push	r29
     9ae:	cf 93       	push	r28
     9b0:	0f 92       	push	r0
     9b2:	0f 92       	push	r0
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	6c 01       	movw	r12, r24
     9ba:	5b 01       	movw	r10, r22
     9bc:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     9be:	fb 01       	movw	r30, r22
     9c0:	00 81       	ld	r16, Z
     9c2:	11 81       	ldd	r17, Z+1	; 0x01
     9c4:	08 0f       	add	r16, r24
     9c6:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     9c8:	c8 01       	movw	r24, r16
     9ca:	be 01       	movw	r22, r28
     9cc:	6f 5f       	subi	r22, 0xFF	; 255
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	0e 94 89 30 	call	0x6112	; 0x6112 <strtod>
     9d4:	f7 01       	movw	r30, r14
     9d6:	60 83       	st	Z, r22
     9d8:	71 83       	std	Z+1, r23	; 0x01
     9da:	82 83       	std	Z+2, r24	; 0x02
     9dc:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	9a 81       	ldd	r25, Y+2	; 0x02
     9e2:	80 17       	cp	r24, r16
     9e4:	91 07       	cpc	r25, r17
     9e6:	a9 f0       	breq	.+42     	; 0xa12 <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     9e8:	8c 19       	sub	r24, r12
     9ea:	9d 09       	sbc	r25, r13
     9ec:	f5 01       	movw	r30, r10
     9ee:	91 83       	std	Z+1, r25	; 0x01
     9f0:	80 83       	st	Z, r24
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     9f6:	c9 01       	movw	r24, r18
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 0a 02 	sts	0x020A, r24
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	ec cf       	rjmp	.-40     	; 0x9f6 <read_double+0x5a>

00000a1e <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
     a28:	8b 01       	movw	r16, r22
     a2a:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     a2c:	ed 91       	ld	r30, X+
     a2e:	fc 91       	ld	r31, X
     a30:	11 97       	sbiw	r26, 0x01	; 1
     a32:	e4 0f       	add	r30, r20
     a34:	f5 1f       	adc	r31, r21
     a36:	e0 81       	ld	r30, Z
     a38:	ee 23       	and	r30, r30
     a3a:	39 f0       	breq	.+14     	; 0xa4a <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     a3c:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     a3e:	e1 54       	subi	r30, 0x41	; 65
     a40:	ea 31       	cpi	r30, 0x1A	; 26
     a42:	58 f0       	brcs	.+22     	; 0xa5a <next_statement+0x3c>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	80 93 0a 02 	sts	0x020A, r24
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     a4e:	c9 01       	movw	r24, r18
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     a5a:	8d 91       	ld	r24, X+
     a5c:	9c 91       	ld	r25, X
     a5e:	11 97       	sbiw	r26, 0x01	; 1
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	8d 93       	st	X+, r24
     a64:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     a66:	ca 01       	movw	r24, r20
     a68:	b9 01       	movw	r22, r18
     a6a:	a8 01       	movw	r20, r16
     a6c:	0e 94 ce 04 	call	0x99c	; 0x99c <read_double>
     a70:	00 97       	sbiw	r24, 0x00	; 0
     a72:	11 f0       	breq	.+4      	; 0xa78 <next_statement+0x5a>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     a7a:	c9 01       	movw	r24, r18
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     a86:	88 e2       	ldi	r24, 0x28	; 40
     a88:	ea e0       	ldi	r30, 0x0A	; 10
     a8a:	f2 e0       	ldi	r31, 0x02	; 2
     a8c:	df 01       	movw	r26, r30
     a8e:	1d 92       	st	X+, r1
     a90:	8a 95       	dec	r24
     a92:	e9 f7       	brne	.-6      	; 0xa8e <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     a94:	60 91 a6 06 	lds	r22, 0x06A6
     a98:	70 91 a7 06 	lds	r23, 0x06A7
     a9c:	80 91 a8 06 	lds	r24, 0x06A8
     aa0:	90 91 a9 06 	lds	r25, 0x06A9
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e7       	ldi	r20, 0x70	; 112
     aaa:	52 e4       	ldi	r21, 0x42	; 66
     aac:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
     ab0:	60 93 14 02 	sts	0x0214, r22
     ab4:	70 93 15 02 	sts	0x0215, r23
     ab8:	80 93 16 02 	sts	0x0216, r24
     abc:	90 93 17 02 	sts	0x0217, r25
  gc.seek_rate = settings.default_seek_rate/60;
     ac0:	60 91 aa 06 	lds	r22, 0x06AA
     ac4:	70 91 ab 06 	lds	r23, 0x06AB
     ac8:	80 91 ac 06 	lds	r24, 0x06AC
     acc:	90 91 ad 06 	lds	r25, 0x06AD
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e7       	ldi	r20, 0x70	; 112
     ad6:	52 e4       	ldi	r21, 0x42	; 66
     ad8:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
     adc:	60 93 18 02 	sts	0x0218, r22
     ae0:	70 93 19 02 	sts	0x0219, r23
     ae4:	80 93 1a 02 	sts	0x021A, r24
     ae8:	90 93 1b 02 	sts	0x021B, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     aec:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	80 93 31 02 	sts	0x0231, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     afc:	90 93 0e 02 	sts	0x020E, r25
}
     b00:	08 95       	ret

00000b02 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     b02:	2f 92       	push	r2
     b04:	3f 92       	push	r3
     b06:	4f 92       	push	r4
     b08:	5f 92       	push	r5
     b0a:	6f 92       	push	r6
     b0c:	7f 92       	push	r7
     b0e:	8f 92       	push	r8
     b10:	9f 92       	push	r9
     b12:	af 92       	push	r10
     b14:	bf 92       	push	r11
     b16:	cf 92       	push	r12
     b18:	df 92       	push	r13
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	df 93       	push	r29
     b24:	cf 93       	push	r28
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	e7 97       	sbiw	r28, 0x37	; 55
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     b38:	1b 82       	std	Y+3, r1	; 0x03
     b3a:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	88 87       	std	Y+8, r24	; 0x08
     b46:	99 87       	std	Y+9, r25	; 0x09
     b48:	aa 87       	std	Y+10, r26	; 0x0a
     b4a:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     b4c:	ac e0       	ldi	r26, 0x0C	; 12
     b4e:	2a 2e       	mov	r2, r26
     b50:	31 2c       	mov	r3, r1
     b52:	2c 0e       	add	r2, r28
     b54:	3d 1e       	adc	r3, r29
     b56:	80 e1       	ldi	r24, 0x10	; 16
     b58:	d1 01       	movw	r26, r2
     b5a:	e8 2f       	mov	r30, r24
     b5c:	1d 92       	st	X+, r1
     b5e:	ea 95       	dec	r30
     b60:	e9 f7       	brne	.-6      	; 0xb5c <gc_execute_line+0x5a>
  clear_vector(offset);
     b62:	fc e1       	ldi	r31, 0x1C	; 28
     b64:	cf 2e       	mov	r12, r31
     b66:	d1 2c       	mov	r13, r1
     b68:	cc 0e       	add	r12, r28
     b6a:	dd 1e       	adc	r13, r29
     b6c:	d6 01       	movw	r26, r12
     b6e:	1d 92       	st	X+, r1
     b70:	8a 95       	dec	r24
     b72:	e9 f7       	brne	.-6      	; 0xb6e <gc_execute_line+0x6c>

  gc.status_code = GCSTATUS_OK;
     b74:	10 92 0a 02 	sts	0x020A, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     b78:	f5 01       	movw	r30, r10
     b7a:	80 81       	ld	r24, Z
     b7c:	88 32       	cpi	r24, 0x28	; 40
     b7e:	09 f4       	brne	.+2      	; 0xb82 <gc_execute_line+0x80>
     b80:	86 c0       	rjmp	.+268    	; 0xc8e <gc_execute_line+0x18c>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     b82:	8f 32       	cpi	r24, 0x2F	; 47
     b84:	09 f4       	brne	.+2      	; 0xb88 <gc_execute_line+0x86>
     b86:	6e c0       	rjmp	.+220    	; 0xc64 <gc_execute_line+0x162>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     b88:	84 32       	cpi	r24, 0x24	; 36
     b8a:	09 f4       	brne	.+2      	; 0xb8e <gc_execute_line+0x8c>
     b8c:	4a c0       	rjmp	.+148    	; 0xc22 <gc_execute_line+0x120>
     b8e:	19 aa       	std	Y+49, r1	; 0x31
     b90:	18 aa       	std	Y+48, r1	; 0x30
     b92:	e2 e0       	ldi	r30, 0x02	; 2
     b94:	6e 2e       	mov	r6, r30
     b96:	71 2c       	mov	r7, r1
     b98:	6c 0e       	add	r6, r28
     b9a:	7d 1e       	adc	r7, r29
     b9c:	74 e0       	ldi	r23, 0x04	; 4
     b9e:	47 2e       	mov	r4, r23
     ba0:	51 2c       	mov	r5, r1
     ba2:	4c 0e       	add	r4, r28
     ba4:	5d 1e       	adc	r5, r29
     ba6:	4e 01       	movw	r8, r28
     ba8:	08 94       	sec
     baa:	81 1c       	adc	r8, r1
     bac:	91 1c       	adc	r9, r1
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     bae:	c4 01       	movw	r24, r8
     bb0:	b2 01       	movw	r22, r4
     bb2:	a5 01       	movw	r20, r10
     bb4:	93 01       	movw	r18, r6
     bb6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <next_statement>
     bba:	89 2b       	or	r24, r25
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <gc_execute_line+0xbe>
     bbe:	91 c2       	rjmp	.+1314   	; 0x10e2 <gc_execute_line+0x5e0>
    int_value = trunc(value);
     bc0:	6c 81       	ldd	r22, Y+4	; 0x04
     bc2:	7d 81       	ldd	r23, Y+5	; 0x05
     bc4:	8e 81       	ldd	r24, Y+6	; 0x06
     bc6:	9f 81       	ldd	r25, Y+7	; 0x07
     bc8:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <trunc>
     bcc:	7b 01       	movw	r14, r22
     bce:	8c 01       	movw	r16, r24
     bd0:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>

    switch(letter) {
     bd4:	29 81       	ldd	r18, Y+1	; 0x01
     bd6:	27 34       	cpi	r18, 0x47	; 71
     bd8:	09 f4       	brne	.+2      	; 0xbdc <gc_execute_line+0xda>
     bda:	38 c1       	rjmp	.+624    	; 0xe4c <gc_execute_line+0x34a>
     bdc:	28 34       	cpi	r18, 0x48	; 72
     bde:	08 f0       	brcs	.+2      	; 0xbe2 <gc_execute_line+0xe0>
     be0:	47 c0       	rjmp	.+142    	; 0xc70 <gc_execute_line+0x16e>
     be2:	24 34       	cpi	r18, 0x44	; 68
     be4:	09 f4       	brne	.+2      	; 0xbe8 <gc_execute_line+0xe6>
     be6:	55 c0       	rjmp	.+170    	; 0xc92 <gc_execute_line+0x190>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }

    if(gc.status_code) { break; }
     be8:	80 91 0a 02 	lds	r24, 0x020A
     bec:	88 23       	and	r24, r24
     bee:	f9 f2       	breq	.-66     	; 0xbae <gc_execute_line+0xac>
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     bf0:	e7 96       	adiw	r28, 0x37	; 55
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	bf 90       	pop	r11
     c0e:	af 90       	pop	r10
     c10:	9f 90       	pop	r9
     c12:	8f 90       	pop	r8
     c14:	7f 90       	pop	r7
     c16:	6f 90       	pop	r6
     c18:	5f 90       	pop	r5
     c1a:	4f 90       	pop	r4
     c1c:	3f 90       	pop	r3
     c1e:	2f 90       	pop	r2
     c20:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9b 83       	std	Y+3, r25	; 0x03
     c28:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c2a:	d5 01       	movw	r26, r10
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	8c 91       	ld	r24, X
     c30:	88 23       	and	r24, r24
     c32:	59 f1       	breq	.+86     	; 0xc8a <gc_execute_line+0x188>
    read_double(line, &char_counter, &p);
     c34:	8e 01       	movw	r16, r28
     c36:	0e 5f       	subi	r16, 0xFE	; 254
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
     c3a:	c5 01       	movw	r24, r10
     c3c:	b8 01       	movw	r22, r16
     c3e:	ae 01       	movw	r20, r28
     c40:	48 5f       	subi	r20, 0xF8	; 248
     c42:	5f 4f       	sbci	r21, 0xFF	; 255
     c44:	0e 94 ce 04 	call	0x99c	; 0x99c <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	9b 81       	ldd	r25, Y+3	; 0x03
     c4c:	f5 01       	movw	r30, r10
     c4e:	e8 0f       	add	r30, r24
     c50:	f9 1f       	adc	r31, r25
     c52:	20 81       	ld	r18, Z
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	9b 83       	std	Y+3, r25	; 0x03
     c58:	8a 83       	std	Y+2, r24	; 0x02
     c5a:	2d 33       	cpi	r18, 0x3D	; 61
     c5c:	09 f4       	brne	.+2      	; 0xc60 <gc_execute_line+0x15e>
     c5e:	29 c1       	rjmp	.+594    	; 0xeb2 <gc_execute_line+0x3b0>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	c6 cf       	rjmp	.-116    	; 0xbf0 <gc_execute_line+0xee>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	9b 83       	std	Y+3, r25	; 0x03
     c6c:	8a 83       	std	Y+2, r24	; 0x02
     c6e:	8f cf       	rjmp	.-226    	; 0xb8e <gc_execute_line+0x8c>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     c70:	2d 34       	cpi	r18, 0x4D	; 77
     c72:	09 f4       	brne	.+2      	; 0xc76 <gc_execute_line+0x174>
     c74:	e2 c0       	rjmp	.+452    	; 0xe3a <gc_execute_line+0x338>
     c76:	24 35       	cpi	r18, 0x54	; 84
     c78:	09 f0       	breq	.+2      	; 0xc7c <gc_execute_line+0x17a>
     c7a:	b6 cf       	rjmp	.-148    	; 0xbe8 <gc_execute_line+0xe6>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
     c84:	60 93 2c 02 	sts	0x022C, r22
     c88:	af cf       	rjmp	.-162    	; 0xbe8 <gc_execute_line+0xe6>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c8a:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <settings_dump>
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	af cf       	rjmp	.-162    	; 0xbf0 <gc_execute_line+0xee>
    switch(letter) {
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     c92:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     c94:	8a e2       	ldi	r24, 0x2A	; 42
     c96:	93 e0       	ldi	r25, 0x03	; 3
     c98:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
		  	printBinary( DIRECTION_DDR );
     c9c:	60 b3       	in	r22, 0x10	; 16
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     ca8:	87 e2       	ldi	r24, 0x27	; 39
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     cb0:	84 e1       	ldi	r24, 0x14	; 20
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
		  	printBinary( DIRECTION_PORT );
     cb8:	61 b3       	in	r22, 0x11	; 17
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cc4:	81 e1       	ldi	r24, 0x11	; 17
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

			ch = PORTD;
     ccc:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
		  	printBinary( ch );
     cd6:	ff 24       	eor	r15, r15
     cd8:	00 e0       	ldi	r16, 0x00	; 0
     cda:	10 e0       	ldi	r17, 0x00	; 0
     cdc:	c8 01       	movw	r24, r16
     cde:	b7 01       	movw	r22, r14
     ce0:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     ce4:	84 e0       	ldi	r24, 0x04	; 4
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

			ch = PIND;
     cec:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     cee:	85 ef       	ldi	r24, 0xF5	; 245
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
		  	printBinary( ch );
     cf6:	ff 24       	eor	r15, r15
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	c8 01       	movw	r24, r16
     cfe:	b7 01       	movw	r22, r14
     d00:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d04:	82 ef       	ldi	r24, 0xF2	; 242
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

	      	printPgmString(PSTR("CAUTION:Simulate mode is on\n"));

#endif

	      	printPgmString(PSTR("to_millimeters(100) = "));
     d0c:	8b ed       	ldi	r24, 0xDB	; 219
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     d14:	80 91 0d 02 	lds	r24, 0x020D
     d18:	88 23       	and	r24, r24
     d1a:	09 f0       	breq	.+2      	; 0xd1e <gc_execute_line+0x21c>
     d1c:	ac c0       	rjmp	.+344    	; 0xe76 <gc_execute_line+0x374>
     d1e:	64 e6       	ldi	r22, 0x64	; 100
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
	      	printPgmString(PSTR("CAUTION:Simulate mode is on\n"));

#endif

	      	printPgmString(PSTR("to_millimeters(100) = "));
			printInteger( to_millimeters(100) );
     d26:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d2a:	88 ed       	ldi	r24, 0xD8	; 216
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

	      	printPgmString(PSTR("avr_millis() = "));
     d32:	88 ec       	ldi	r24, 0xC8	; 200
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
			printInteger( avr_millis() );
     d3a:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
     d3e:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d42:	85 ec       	ldi	r24, 0xC5	; 197
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>


	      	printPgmString(PSTR("head down = "));
     d4a:	88 eb       	ldi	r24, 0xB8	; 184
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
			printInteger( is_head_down() );
     d52:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d64:	85 eb       	ldi	r24, 0xB5	; 181
     d66:	92 e0       	ldi	r25, 0x02	; 2
     d68:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     d6c:	86 ea       	ldi	r24, 0xA6	; 166
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
			printInteger( head_moving() );
     d74:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	a0 e0       	ldi	r26, 0x00	; 0
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d86:	83 ea       	ldi	r24, 0xA3	; 163
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     d8e:	83 e9       	ldi	r24, 0x93	; 147
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
			printInteger( vacuum_state() );
     d96:	0e 94 d6 21 	call	0x43ac	; 0x43ac <vacuum_state>
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	bc 01       	movw	r22, r24
     da2:	cd 01       	movw	r24, r26
     da4:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
	      	printPgmString(PSTR("\r\n"));
     da8:	80 e9       	ldi	r24, 0x90	; 144
     daa:	92 e0       	ldi	r25, 0x02	; 2
     dac:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     db0:	85 e8       	ldi	r24, 0x85	; 133
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
			printInteger( is_rotated() );
     db8:	0e 94 b1 20 	call	0x4162	; 0x4162 <is_rotated>
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dca:	82 e8       	ldi	r24, 0x82	; 130
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
     dd2:	86 e7       	ldi	r24, 0x76	; 118
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
			printInteger( get_busy() );
     dda:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <get_busy>
     dde:	aa 27       	eor	r26, r26
     de0:	97 fd       	sbrc	r25, 7
     de2:	a0 95       	com	r26
     de4:	ba 2f       	mov	r27, r26
     de6:	bc 01       	movw	r22, r24
     de8:	cd 01       	movw	r24, r26
     dea:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dee:	83 e7       	ldi	r24, 0x73	; 115
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>


			if( xLimit1() )
     df6:	0e 94 f5 19 	call	0x33ea	; 0x33ea <xLimit1>
     dfa:	88 23       	and	r24, r24
     dfc:	09 f0       	breq	.+2      	; 0xe00 <gc_execute_line+0x2fe>
     dfe:	40 c0       	rjmp	.+128    	; 0xe80 <gc_execute_line+0x37e>
		      	printPgmString(PSTR("XL1\r\n"));

			if( xLimit2() ){
     e00:	0e 94 b0 19 	call	0x3360	; 0x3360 <xLimit2>
     e04:	88 23       	and	r24, r24
     e06:	09 f0       	breq	.+2      	; 0xe0a <gc_execute_line+0x308>
     e08:	4f c0       	rjmp	.+158    	; 0xea8 <gc_execute_line+0x3a6>
		      	printPgmString(PSTR("XL2\r\n"));
			}

			if( yLimit1())
     e0a:	0e 94 74 19 	call	0x32e8	; 0x32e8 <yLimit1>
     e0e:	88 23       	and	r24, r24
     e10:	09 f0       	breq	.+2      	; 0xe14 <gc_execute_line+0x312>
     e12:	45 c0       	rjmp	.+138    	; 0xe9e <gc_execute_line+0x39c>
		      	printPgmString(PSTR("YL1\r\n"));
			
			if( yLimit2() )
     e14:	0e 94 2f 19 	call	0x325e	; 0x325e <yLimit2>
     e18:	88 23       	and	r24, r24
     e1a:	e1 f5       	brne	.+120    	; 0xe94 <gc_execute_line+0x392>
		      	printPgmString(PSTR("YL2\r\n"));

			if( xHome() )
     e1c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <xHome>
     e20:	88 23       	and	r24, r24
     e22:	99 f5       	brne	.+102    	; 0xe8a <gc_execute_line+0x388>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( yHome() )
     e24:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <yHome>
     e28:	88 23       	and	r24, r24
     e2a:	21 f0       	breq	.+8      	; 0xe34 <gc_execute_line+0x332>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     e2c:	89 e4       	ldi	r24, 0x49	; 73
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     e34:	80 91 0a 02 	lds	r24, 0x020A
     e38:	db ce       	rjmp	.-586    	; 0xbf0 <gc_execute_line+0xee>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e3a:	e6 2f       	mov	r30, r22
     e3c:	f7 2f       	mov	r31, r23
     e3e:	ed 33       	cpi	r30, 0x3D	; 61
     e40:	f1 05       	cpc	r31, r1
     e42:	88 f0       	brcs	.+34     	; 0xe66 <gc_execute_line+0x364>
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	80 93 0a 02 	sts	0x020A, r24
     e4a:	f4 cf       	rjmp	.-24     	; 0xe34 <gc_execute_line+0x332>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     e4c:	e6 2f       	mov	r30, r22
     e4e:	f7 2f       	mov	r31, r23
     e50:	ef 35       	cpi	r30, 0x5F	; 95
     e52:	f1 05       	cpc	r31, r1
     e54:	b8 f7       	brcc	.-18     	; 0xe44 <gc_execute_line+0x342>
     e56:	ee 58       	subi	r30, 0x8E	; 142
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	05 90       	lpm	r0, Z+
     e60:	f4 91       	lpm	r31, Z+
     e62:	e0 2d       	mov	r30, r0
     e64:	19 94       	eijmp
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e66:	ef 52       	subi	r30, 0x2F	; 47
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	ee 0f       	add	r30, r30
     e6c:	ff 1f       	adc	r31, r31
     e6e:	05 90       	lpm	r0, Z+
     e70:	f4 91       	lpm	r31, Z+
     e72:	e0 2d       	mov	r30, r0
     e74:	19 94       	eijmp
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     e76:	6c ee       	ldi	r22, 0xEC	; 236
     e78:	79 e0       	ldi	r23, 0x09	; 9
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	53 cf       	rjmp	.-346    	; 0xd26 <gc_execute_line+0x224>
			printInteger( get_busy() );
	      	printPgmString(PSTR("\r\n"));


			if( xLimit1() )
		      	printPgmString(PSTR("XL1\r\n"));
     e80:	8d e6       	ldi	r24, 0x6D	; 109
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
     e88:	bb cf       	rjmp	.-138    	; 0xe00 <gc_execute_line+0x2fe>
			
			if( yLimit2() )
		      	printPgmString(PSTR("YL2\r\n"));

			if( xHome() )
		      	printPgmString(PSTR("X_HOME\r\n"));
     e8a:	82 e5       	ldi	r24, 0x52	; 82
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
     e92:	c8 cf       	rjmp	.-112    	; 0xe24 <gc_execute_line+0x322>

			if( yLimit1())
		      	printPgmString(PSTR("YL1\r\n"));
			
			if( yLimit2() )
		      	printPgmString(PSTR("YL2\r\n"));
     e94:	8b e5       	ldi	r24, 0x5B	; 91
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
     e9c:	bf cf       	rjmp	.-130    	; 0xe1c <gc_execute_line+0x31a>
			if( xLimit2() ){
		      	printPgmString(PSTR("XL2\r\n"));
			}

			if( yLimit1())
		      	printPgmString(PSTR("YL1\r\n"));
     e9e:	81 e6       	ldi	r24, 0x61	; 97
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
     ea6:	b6 cf       	rjmp	.-148    	; 0xe14 <gc_execute_line+0x312>

			if( xLimit1() )
		      	printPgmString(PSTR("XL1\r\n"));

			if( xLimit2() ){
		      	printPgmString(PSTR("XL2\r\n"));
     ea8:	87 e6       	ldi	r24, 0x67	; 103
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
     eb0:	ac cf       	rjmp	.-168    	; 0xe0a <gc_execute_line+0x308>
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    read_double(line, &char_counter, &value);
     eb2:	c5 01       	movw	r24, r10
     eb4:	b8 01       	movw	r22, r16
     eb6:	ae 01       	movw	r20, r28
     eb8:	4c 5f       	subi	r20, 0xFC	; 252
     eba:	5f 4f       	sbci	r21, 0xFF	; 255
     ebc:	0e 94 ce 04 	call	0x99c	; 0x99c <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     ec0:	ea 81       	ldd	r30, Y+2	; 0x02
     ec2:	fb 81       	ldd	r31, Y+3	; 0x03
     ec4:	ea 0d       	add	r30, r10
     ec6:	fb 1d       	adc	r31, r11
     ec8:	80 81       	ld	r24, Z
     eca:	88 23       	and	r24, r24
     ecc:	09 f0       	breq	.+2      	; 0xed0 <gc_execute_line+0x3ce>
     ece:	c8 ce       	rjmp	.-624    	; 0xc60 <gc_execute_line+0x15e>
    settings_store_setting(p, value);
     ed0:	68 85       	ldd	r22, Y+8	; 0x08
     ed2:	79 85       	ldd	r23, Y+9	; 0x09
     ed4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ed6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed8:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	4c 81       	ldd	r20, Y+4	; 0x04
     ee2:	5d 81       	ldd	r21, Y+5	; 0x05
     ee4:	6e 81       	ldd	r22, Y+6	; 0x06
     ee6:	7f 81       	ldd	r23, Y+7	; 0x07
     ee8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <settings_store_setting>
    return(gc.status_code);
     eec:	80 91 0a 02 	lds	r24, 0x020A
     ef0:	7f ce       	rjmp	.-770    	; 0xbf0 <gc_execute_line+0xee>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
     ef2:	0e 94 1a 24 	call	0x4834	; 0x4834 <putdown_part>
     ef6:	80 93 0a 02 	sts	0x020A, r24
     efa:	e1 e0       	ldi	r30, 0x01	; 1
     efc:	e8 ab       	std	Y+48, r30	; 0x30
     efe:	74 ce       	rjmp	.-792    	; 0xbe8 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f00:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f04:	a1 e0       	ldi	r26, 0x01	; 1
     f06:	a0 93 30 02 	sts	0x0230, r26
  gc.plane_axis_2 = axis_2;
     f0a:	b2 e0       	ldi	r27, 0x02	; 2
     f0c:	b0 93 31 02 	sts	0x0231, r27
     f10:	6b ce       	rjmp	.-810    	; 0xbe8 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	90 93 0b 02 	sts	0x020B, r25
     f18:	67 ce       	rjmp	.-818    	; 0xbe8 <gc_execute_line+0xe6>
      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	80 93 0b 02 	sts	0x020B, r24
     f20:	63 ce       	rjmp	.-826    	; 0xbe8 <gc_execute_line+0xe6>
	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	f0 93 0b 02 	sts	0x020B, r31
     f28:	5f ce       	rjmp	.-834    	; 0xbe8 <gc_execute_line+0xe6>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     f2a:	10 92 0b 02 	sts	0x020B, r1
     f2e:	5c ce       	rjmp	.-840    	; 0xbe8 <gc_execute_line+0xe6>
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	f0 93 0e 02 	sts	0x020E, r31
     f36:	58 ce       	rjmp	.-848    	; 0xbe8 <gc_execute_line+0xe6>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     f38:	e4 e0       	ldi	r30, 0x04	; 4
     f3a:	e0 93 0b 02 	sts	0x020B, r30
     f3e:	54 ce       	rjmp	.-856    	; 0xbe8 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f40:	b1 e0       	ldi	r27, 0x01	; 1
     f42:	b9 ab       	std	Y+49, r27	; 0x31
     f44:	51 ce       	rjmp	.-862    	; 0xbe8 <gc_execute_line+0xe6>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     f46:	b2 e0       	ldi	r27, 0x02	; 2
     f48:	b8 ab       	std	Y+48, r27	; 0x30
     f4a:	4e ce       	rjmp	.-868    	; 0xbe8 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f4c:	10 92 0d 02 	sts	0x020D, r1
     f50:	4b ce       	rjmp	.-874    	; 0xbe8 <gc_execute_line+0xe6>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     f52:	a1 e0       	ldi	r26, 0x01	; 1
     f54:	a0 93 0d 02 	sts	0x020D, r26
     f58:	47 ce       	rjmp	.-882    	; 0xbe8 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     f66:	10 92 31 02 	sts	0x0231, r1
     f6a:	3e ce       	rjmp	.-900    	; 0xbe8 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f6c:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f70:	e2 e0       	ldi	r30, 0x02	; 2
     f72:	e0 93 30 02 	sts	0x0230, r30
  gc.plane_axis_2 = axis_2;
     f76:	f1 e0       	ldi	r31, 0x01	; 1
     f78:	f0 93 31 02 	sts	0x0231, r31
     f7c:	35 ce       	rjmp	.-918    	; 0xbe8 <gc_execute_line+0xe6>
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     f7e:	10 92 0c 02 	sts	0x020C, r1
     f82:	32 ce       	rjmp	.-924    	; 0xbe8 <gc_execute_line+0xe6>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	90 93 0c 02 	sts	0x020C, r25
     f8a:	2e ce       	rjmp	.-932    	; 0xbe8 <gc_execute_line+0xe6>
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	88 ab       	std	Y+48, r24	; 0x30
     f90:	2b ce       	rjmp	.-938    	; 0xbe8 <gc_execute_line+0xe6>
     f92:	10 92 0e 02 	sts	0x020E, r1
     f96:	28 ce       	rjmp	.-944    	; 0xbe8 <gc_execute_line+0xe6>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     f98:	ef ef       	ldi	r30, 0xFF	; 255
     f9a:	ff ef       	ldi	r31, 0xFF	; 255
     f9c:	f0 93 11 02 	sts	0x0211, r31
     fa0:	e0 93 10 02 	sts	0x0210, r30
     fa4:	21 ce       	rjmp	.-958    	; 0xbe8 <gc_execute_line+0xe6>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	90 93 11 02 	sts	0x0211, r25
     fae:	80 93 10 02 	sts	0x0210, r24
     fb2:	1a ce       	rjmp	.-972    	; 0xbe8 <gc_execute_line+0xe6>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     fb4:	b2 e0       	ldi	r27, 0x02	; 2
     fb6:	b0 93 0f 02 	sts	0x020F, r27
     fba:	16 ce       	rjmp	.-980    	; 0xbe8 <gc_execute_line+0xe6>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     fbc:	a1 e0       	ldi	r26, 0x01	; 1
     fbe:	a0 93 0f 02 	sts	0x020F, r26
     fc2:	12 ce       	rjmp	.-988    	; 0xbe8 <gc_execute_line+0xe6>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>
     fcc:	b1 e0       	ldi	r27, 0x01	; 1
     fce:	b8 ab       	std	Y+48, r27	; 0x30
     fd0:	0b ce       	rjmp	.-1002   	; 0xbe8 <gc_execute_line+0xe6>
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>
     fda:	a1 e0       	ldi	r26, 0x01	; 1
     fdc:	a8 ab       	std	Y+48, r26	; 0x30
     fde:	04 ce       	rjmp	.-1016   	; 0xbe8 <gc_execute_line+0xe6>
		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	98 ab       	std	Y+48, r25	; 0x30
     fec:	fd cd       	rjmp	.-1030   	; 0xbe8 <gc_execute_line+0xe6>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	88 ab       	std	Y+48, r24	; 0x30
     ffa:	f6 cd       	rjmp	.-1044   	; 0xbe8 <gc_execute_line+0xe6>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	f8 ab       	std	Y+48, r31	; 0x30
    1008:	ef cd       	rjmp	.-1058   	; 0xbe8 <gc_execute_line+0xe6>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
    100a:	10 92 13 02 	sts	0x0213, r1
    100e:	10 92 12 02 	sts	0x0212, r1
    1012:	ea cd       	rjmp	.-1068   	; 0xbe8 <gc_execute_line+0xe6>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	90 93 13 02 	sts	0x0213, r25
    101c:	80 93 12 02 	sts	0x0212, r24
    1020:	e3 cd       	rjmp	.-1082   	; 0xbe8 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
    1022:	10 92 11 02 	sts	0x0211, r1
    1026:	10 92 10 02 	sts	0x0210, r1
    102a:	de cd       	rjmp	.-1092   	; 0xbe8 <gc_execute_line+0xe6>
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
    102c:	0e 94 db 23 	call	0x47b6	; 0x47b6 <vacuum_test>
    1030:	f1 e0       	ldi	r31, 0x01	; 1
    1032:	f8 ab       	std	Y+48, r31	; 0x30
    1034:	d9 cd       	rjmp	.-1102   	; 0xbe8 <gc_execute_line+0xe6>
		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
    1036:	0e 94 ed 23 	call	0x47da	; 0x47da <tape_knock>
    103a:	e1 e0       	ldi	r30, 0x01	; 1
    103c:	e8 ab       	std	Y+48, r30	; 0x30
    103e:	d4 cd       	rjmp	.-1112   	; 0xbe8 <gc_execute_line+0xe6>
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
    1048:	b1 e0       	ldi	r27, 0x01	; 1
    104a:	b8 ab       	std	Y+48, r27	; 0x30
    104c:	cd cd       	rjmp	.-1126   	; 0xbe8 <gc_execute_line+0xe6>
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
    1056:	a1 e0       	ldi	r26, 0x01	; 1
    1058:	a8 ab       	std	Y+48, r26	; 0x30
    105a:	c6 cd       	rjmp	.-1140   	; 0xbe8 <gc_execute_line+0xe6>
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;
    105c:	86 e0       	ldi	r24, 0x06	; 6
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	98 ab       	std	Y+48, r25	; 0x30
    1068:	bf cd       	rjmp	.-1154   	; 0xbe8 <gc_execute_line+0xe6>
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
    106a:	85 e0       	ldi	r24, 0x05	; 5
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	88 ab       	std	Y+48, r24	; 0x30
    1076:	b8 cd       	rjmp	.-1168   	; 0xbe8 <gc_execute_line+0xe6>
		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
    1078:	84 e0       	ldi	r24, 0x04	; 4
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>
    1080:	f1 e0       	ldi	r31, 0x01	; 1
    1082:	f8 ab       	std	Y+48, r31	; 0x30
    1084:	b1 cd       	rjmp	.-1182   	; 0xbe8 <gc_execute_line+0xe6>

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
    1086:	83 e0       	ldi	r24, 0x03	; 3
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	e8 ab       	std	Y+48, r30	; 0x30
    1092:	aa cd       	rjmp	.-1196   	; 0xbe8 <gc_execute_line+0xe6>
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
#ifdef VERBOSE_DEBUG
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
#endif
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;
    1094:	f6 e0       	ldi	r31, 0x06	; 6
    1096:	f0 93 0a 02 	sts	0x020A, r31
    109a:	0e 94 1f 19 	call	0x323e	; 0x323e <get_limit_bits>
    109e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <serialWrite>
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	88 ab       	std	Y+48, r24	; 0x30
    10a6:	a0 cd       	rjmp	.-1216   	; 0xbe8 <gc_execute_line+0xe6>

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;
    10a8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <settings_reset>
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	98 ab       	std	Y+48, r25	; 0x30
    10b0:	9b cd       	rjmp	.-1226   	; 0xbe8 <gc_execute_line+0xe6>
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
    10b2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <pickup_part>
    10b6:	80 93 0a 02 	sts	0x020A, r24
    10ba:	b1 e0       	ldi	r27, 0x01	; 1
    10bc:	b8 ab       	std	Y+48, r27	; 0x30
    10be:	94 cd       	rjmp	.-1240   	; 0xbe8 <gc_execute_line+0xe6>
		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
    10c0:	0e 94 db 23 	call	0x47b6	; 0x47b6 <vacuum_test>
    10c4:	a1 e0       	ldi	r26, 0x01	; 1
    10c6:	a8 ab       	std	Y+48, r26	; 0x30
    10c8:	8f cd       	rjmp	.-1250   	; 0xbe8 <gc_execute_line+0xe6>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
    10ca:	0e 94 16 22 	call	0x442c	; 0x442c <goto_vacpad>
    10ce:	80 93 0a 02 	sts	0x020A, r24
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	98 ab       	std	Y+48, r25	; 0x30
    10d6:	88 cd       	rjmp	.-1264   	; 0xbe8 <gc_execute_line+0xe6>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
    10d8:	0e 94 76 20 	call	0x40ec	; 0x40ec <check_for_tool>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	88 ab       	std	Y+48, r24	; 0x30
    10e0:	83 cd       	rjmp	.-1274   	; 0xbe8 <gc_execute_line+0xe6>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    10e2:	80 91 0a 02 	lds	r24, 0x020A
    10e6:	88 23       	and	r24, r24
    10e8:	09 f0       	breq	.+2      	; 0x10ec <gc_execute_line+0x5ea>
    10ea:	82 cd       	rjmp	.-1276   	; 0xbf0 <gc_execute_line+0xee>

  char_counter = 0;
    10ec:	1b 82       	std	Y+3, r1	; 0x03
    10ee:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
    10f0:	80 e1       	ldi	r24, 0x10	; 16
    10f2:	d6 01       	movw	r26, r12
    10f4:	1d 92       	st	X+, r1
    10f6:	8a 95       	dec	r24
    10f8:	e9 f7       	brne	.-6      	; 0x10f4 <gc_execute_line+0x5f2>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
    10fa:	d1 01       	movw	r26, r2
    10fc:	ec e1       	ldi	r30, 0x1C	; 28
    10fe:	f2 e0       	ldi	r31, 0x02	; 2
    1100:	80 e1       	ldi	r24, 0x10	; 16
    1102:	01 90       	ld	r0, Z+
    1104:	0d 92       	st	X+, r0
    1106:	81 50       	subi	r24, 0x01	; 1
    1108:	e1 f7       	brne	.-8      	; 0x1102 <gc_execute_line+0x600>
    110a:	1c aa       	std	Y+52, r1	; 0x34
    110c:	1d aa       	std	Y+53, r1	; 0x35
    110e:	b0 e8       	ldi	r27, 0x80	; 128
    1110:	be ab       	std	Y+54, r27	; 0x36
    1112:	ef eb       	ldi	r30, 0xBF	; 191
    1114:	ef ab       	std	Y+55, r30	; 0x37
    1116:	1b aa       	std	Y+51, r1	; 0x33
    1118:	1a aa       	std	Y+50, r1	; 0x32

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    111a:	c4 01       	movw	r24, r8
    111c:	b2 01       	movw	r22, r4
    111e:	a5 01       	movw	r20, r10
    1120:	93 01       	movw	r18, r6
    1122:	0e 94 0f 05 	call	0xa1e	; 0xa1e <next_statement>
    1126:	89 2b       	or	r24, r25
    1128:	09 f4       	brne	.+2      	; 0x112c <gc_execute_line+0x62a>
    112a:	ed c0       	rjmp	.+474    	; 0x1306 <gc_execute_line+0x804>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    112c:	cc 80       	ldd	r12, Y+4	; 0x04
    112e:	dd 80       	ldd	r13, Y+5	; 0x05
    1130:	ee 80       	ldd	r14, Y+6	; 0x06
    1132:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1134:	80 91 0d 02 	lds	r24, 0x020D
    1138:	88 23       	and	r24, r24
    113a:	d9 f4       	brne	.+54     	; 0x1172 <gc_execute_line+0x670>
    113c:	a7 01       	movw	r20, r14
    113e:	96 01       	movw	r18, r12

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1140:	09 81       	ldd	r16, Y+1	; 0x01
    1142:	0d 34       	cpi	r16, 0x4D	; 77
    1144:	19 f1       	breq	.+70     	; 0x118c <gc_execute_line+0x68a>
    1146:	0e 34       	cpi	r16, 0x4E	; 78
    1148:	60 f5       	brcc	.+88     	; 0x11a2 <gc_execute_line+0x6a0>
    114a:	08 34       	cpi	r16, 0x48	; 72
    114c:	09 f4       	brne	.+2      	; 0x1150 <gc_execute_line+0x64e>
    114e:	7a c0       	rjmp	.+244    	; 0x1244 <gc_execute_line+0x742>
    1150:	09 34       	cpi	r16, 0x49	; 73
    1152:	b8 f5       	brcc	.+110    	; 0x11c2 <gc_execute_line+0x6c0>
    1154:	03 34       	cpi	r16, 0x43	; 67
    1156:	09 f4       	brne	.+2      	; 0x115a <gc_execute_line+0x658>
    1158:	8a c0       	rjmp	.+276    	; 0x126e <gc_execute_line+0x76c>
    115a:	06 34       	cpi	r16, 0x46	; 70
    115c:	f1 f6       	brne	.-68     	; 0x111a <gc_execute_line+0x618>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    115e:	80 91 0c 02 	lds	r24, 0x020C
    1162:	88 23       	and	r24, r24
    1164:	09 f4       	brne	.+2      	; 0x1168 <gc_execute_line+0x666>
    1166:	a9 c0       	rjmp	.+338    	; 0x12ba <gc_execute_line+0x7b8>
    1168:	2c ab       	std	Y+52, r18	; 0x34
    116a:	3d ab       	std	Y+53, r19	; 0x35
    116c:	4e ab       	std	Y+54, r20	; 0x36
    116e:	5f ab       	std	Y+55, r21	; 0x37
    1170:	d4 cf       	rjmp	.-88     	; 0x111a <gc_execute_line+0x618>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1172:	c7 01       	movw	r24, r14
    1174:	b6 01       	movw	r22, r12
    1176:	23 e3       	ldi	r18, 0x33	; 51
    1178:	33 e3       	ldi	r19, 0x33	; 51
    117a:	4b ec       	ldi	r20, 0xCB	; 203
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1182:	9b 01       	movw	r18, r22
    1184:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1186:	09 81       	ldd	r16, Y+1	; 0x01
    1188:	0d 34       	cpi	r16, 0x4D	; 77
    118a:	e9 f6       	brne	.-70     	; 0x1146 <gc_execute_line+0x644>
	feeder_x_pos = x;
}

void set_feeder_y( double y )
{
	feeder_x_pos = y;
    118c:	20 93 06 02 	sts	0x0206, r18
    1190:	30 93 07 02 	sts	0x0207, r19
    1194:	40 93 08 02 	sts	0x0208, r20
    1198:	50 93 09 02 	sts	0x0209, r21
    119c:	a1 e0       	ldi	r26, 0x01	; 1
    119e:	a8 ab       	std	Y+48, r26	; 0x30
    11a0:	bc cf       	rjmp	.-136    	; 0x111a <gc_execute_line+0x618>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11a2:	03 35       	cpi	r16, 0x53	; 83
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <gc_execute_line+0x6a6>
    11a6:	45 c0       	rjmp	.+138    	; 0x1232 <gc_execute_line+0x730>
    11a8:	04 35       	cpi	r16, 0x54	; 84
    11aa:	e8 f4       	brcc	.+58     	; 0x11e6 <gc_execute_line+0x6e4>
    11ac:	0e 34       	cpi	r16, 0x4E	; 78
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <gc_execute_line+0x6b0>
    11b0:	53 c0       	rjmp	.+166    	; 0x1258 <gc_execute_line+0x756>
    11b2:	00 35       	cpi	r16, 0x50	; 80
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <gc_execute_line+0x6b6>
    11b6:	b1 cf       	rjmp	.-158    	; 0x111a <gc_execute_line+0x618>
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
    11b8:	c8 86       	std	Y+8, r12	; 0x08
    11ba:	d9 86       	std	Y+9, r13	; 0x09
    11bc:	ea 86       	std	Y+10, r14	; 0x0a
    11be:	fb 86       	std	Y+11, r15	; 0x0b
    11c0:	ac cf       	rjmp	.-168    	; 0x111a <gc_execute_line+0x618>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11c2:	0c 34       	cpi	r16, 0x4C	; 76
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <gc_execute_line+0x6c6>
    11c6:	a9 cf       	rjmp	.-174    	; 0x111a <gc_execute_line+0x618>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    11c8:	e0 2f       	mov	r30, r16
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	e9 54       	subi	r30, 0x49	; 73
    11ce:	f0 40       	sbci	r31, 0x00	; 0
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	e8 0d       	add	r30, r8
    11da:	f9 1d       	adc	r31, r9
    11dc:	23 8f       	std	Z+27, r18	; 0x1b
    11de:	34 8f       	std	Z+28, r19	; 0x1c
    11e0:	45 8f       	std	Z+29, r20	; 0x1d
    11e2:	56 8f       	std	Z+30, r21	; 0x1e
    11e4:	9a cf       	rjmp	.-204    	; 0x111a <gc_execute_line+0x618>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11e6:	80 2f       	mov	r24, r16
    11e8:	88 55       	subi	r24, 0x58	; 88
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <gc_execute_line+0x6ee>
    11ee:	95 cf       	rjmp	.-214    	; 0x111a <gc_execute_line+0x618>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    11f0:	80 91 0e 02 	lds	r24, 0x020E
    11f4:	88 23       	and	r24, r24
    11f6:	09 f0       	breq	.+2      	; 0x11fa <gc_execute_line+0x6f8>
    11f8:	4c c0       	rjmp	.+152    	; 0x1292 <gc_execute_line+0x790>
    11fa:	f9 a9       	ldd	r31, Y+49	; 0x31
    11fc:	ff 23       	and	r31, r31
    11fe:	09 f0       	breq	.+2      	; 0x1202 <gc_execute_line+0x700>
    1200:	48 c0       	rjmp	.+144    	; 0x1292 <gc_execute_line+0x790>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    1202:	10 e0       	ldi	r17, 0x00	; 0
    1204:	08 55       	subi	r16, 0x58	; 88
    1206:	10 40       	sbci	r17, 0x00	; 0
    1208:	00 0f       	add	r16, r16
    120a:	11 1f       	adc	r17, r17
    120c:	00 0f       	add	r16, r16
    120e:	11 1f       	adc	r17, r17
    1210:	08 0d       	add	r16, r8
    1212:	19 1d       	adc	r17, r9
    1214:	d8 01       	movw	r26, r16
    1216:	1b 96       	adiw	r26, 0x0b	; 11
    1218:	6d 91       	ld	r22, X+
    121a:	7d 91       	ld	r23, X+
    121c:	8d 91       	ld	r24, X+
    121e:	9c 91       	ld	r25, X
    1220:	1e 97       	sbiw	r26, 0x0e	; 14
    1222:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1226:	f8 01       	movw	r30, r16
    1228:	63 87       	std	Z+11, r22	; 0x0b
    122a:	74 87       	std	Z+12, r23	; 0x0c
    122c:	85 87       	std	Z+13, r24	; 0x0d
    122e:	96 87       	std	Z+14, r25	; 0x0e
    1230:	74 cf       	rjmp	.-280    	; 0x111a <gc_execute_line+0x618>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    1232:	c7 01       	movw	r24, r14
    1234:	b6 01       	movw	r22, r12
    1236:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
    123a:	70 93 2e 02 	sts	0x022E, r23
    123e:	60 93 2d 02 	sts	0x022D, r22
    1242:	6b cf       	rjmp	.-298    	; 0x111a <gc_execute_line+0x618>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    1244:	ca 01       	movw	r24, r20
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
    124c:	7b ab       	std	Y+51, r23	; 0x33
    124e:	6a ab       	std	Y+50, r22	; 0x32
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    1250:	89 e0       	ldi	r24, 0x09	; 9
    1252:	80 93 0b 02 	sts	0x020B, r24
    1256:	61 cf       	rjmp	.-318    	; 0x111a <gc_execute_line+0x618>

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
    1258:	20 93 06 02 	sts	0x0206, r18
    125c:	30 93 07 02 	sts	0x0207, r19
    1260:	40 93 08 02 	sts	0x0208, r20
    1264:	50 93 09 02 	sts	0x0209, r21
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	98 ab       	std	Y+48, r25	; 0x30
    126c:	56 cf       	rjmp	.-340    	; 0x111a <gc_execute_line+0x618>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    126e:	80 91 0e 02 	lds	r24, 0x020E
    1272:	88 23       	and	r24, r24
    1274:	e9 f4       	brne	.+58     	; 0x12b0 <gc_execute_line+0x7ae>
    1276:	f9 a9       	ldd	r31, Y+49	; 0x31
    1278:	ff 23       	and	r31, r31
    127a:	d1 f4       	brne	.+52     	; 0x12b0 <gc_execute_line+0x7ae>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
    127c:	68 8d       	ldd	r22, Y+24	; 0x18
    127e:	79 8d       	ldd	r23, Y+25	; 0x19
    1280:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1282:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1284:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1288:	68 8f       	std	Y+24, r22	; 0x18
    128a:	79 8f       	std	Y+25, r23	; 0x19
    128c:	8a 8f       	std	Y+26, r24	; 0x1a
    128e:	9b 8f       	std	Y+27, r25	; 0x1b
    1290:	44 cf       	rjmp	.-376    	; 0x111a <gc_execute_line+0x618>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    1292:	e0 2f       	mov	r30, r16
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	e8 55       	subi	r30, 0x58	; 88
    1298:	f0 40       	sbci	r31, 0x00	; 0
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	e8 0d       	add	r30, r8
    12a4:	f9 1d       	adc	r31, r9
    12a6:	23 87       	std	Z+11, r18	; 0x0b
    12a8:	34 87       	std	Z+12, r19	; 0x0c
    12aa:	45 87       	std	Z+13, r20	; 0x0d
    12ac:	56 87       	std	Z+14, r21	; 0x0e
    12ae:	35 cf       	rjmp	.-406    	; 0x111a <gc_execute_line+0x618>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
    12b0:	28 8f       	std	Y+24, r18	; 0x18
    12b2:	39 8f       	std	Y+25, r19	; 0x19
    12b4:	4a 8f       	std	Y+26, r20	; 0x1a
    12b6:	5b 8f       	std	Y+27, r21	; 0x1b
    12b8:	30 cf       	rjmp	.-416    	; 0x111a <gc_execute_line+0x618>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    12ba:	80 91 0b 02 	lds	r24, 0x020B
    12be:	88 23       	and	r24, r24
    12c0:	89 f4       	brne	.+34     	; 0x12e4 <gc_execute_line+0x7e2>
          gc.seek_rate = unit_converted_value/60;
    12c2:	ca 01       	movw	r24, r20
    12c4:	b9 01       	movw	r22, r18
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e7       	ldi	r20, 0x70	; 112
    12cc:	52 e4       	ldi	r21, 0x42	; 66
    12ce:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    12d2:	60 93 18 02 	sts	0x0218, r22
    12d6:	70 93 19 02 	sts	0x0219, r23
    12da:	80 93 1a 02 	sts	0x021A, r24
    12de:	90 93 1b 02 	sts	0x021B, r25
    12e2:	1b cf       	rjmp	.-458    	; 0x111a <gc_execute_line+0x618>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
    12e4:	ca 01       	movw	r24, r20
    12e6:	b9 01       	movw	r22, r18
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e7       	ldi	r20, 0x70	; 112
    12ee:	52 e4       	ldi	r21, 0x42	; 66
    12f0:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    12f4:	60 93 14 02 	sts	0x0214, r22
    12f8:	70 93 15 02 	sts	0x0215, r23
    12fc:	80 93 16 02 	sts	0x0216, r24
    1300:	90 93 17 02 	sts	0x0217, r25
    1304:	0a cf       	rjmp	.-492    	; 0x111a <gc_execute_line+0x618>

    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1306:	80 91 0a 02 	lds	r24, 0x020A
    130a:	88 23       	and	r24, r24
    130c:	09 f0       	breq	.+2      	; 0x1310 <gc_execute_line+0x80e>
    130e:	70 cc       	rjmp	.-1824   	; 0xbf0 <gc_execute_line+0xee>
    
  // Update spindle state
  if (gc.spindle_direction) {
    1310:	80 91 10 02 	lds	r24, 0x0210
    1314:	90 91 11 02 	lds	r25, 0x0211
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	09 f4       	brne	.+2      	; 0x131e <gc_execute_line+0x81c>
    131c:	5d c0       	rjmp	.+186    	; 0x13d8 <gc_execute_line+0x8d6>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    131e:	40 91 2d 02 	lds	r20, 0x022D
    1322:	50 91 2e 02 	lds	r21, 0x022E
    1326:	66 27       	eor	r22, r22
    1328:	57 fd       	sbrc	r21, 7
    132a:	60 95       	com	r22
    132c:	76 2f       	mov	r23, r22
    132e:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    1332:	80 91 12 02 	lds	r24, 0x0212
    1336:	90 91 13 02 	lds	r25, 0x0213
    133a:	89 2b       	or	r24, r25
    133c:	09 f4       	brne	.+2      	; 0x1340 <gc_execute_line+0x83e>
    133e:	4f c0       	rjmp	.+158    	; 0x13de <gc_execute_line+0x8dc>
  	coolant_flood(TRUE);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 34 03 	call	0x668	; 0x668 <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    1348:	b8 a9       	ldd	r27, Y+48	; 0x30
    134a:	b1 30       	cpi	r27, 0x01	; 1
    134c:	09 f4       	brne	.+2      	; 0x1350 <gc_execute_line+0x84e>
    134e:	63 c0       	rjmp	.+198    	; 0x1416 <gc_execute_line+0x914>
    1350:	b1 30       	cpi	r27, 0x01	; 1
    1352:	08 f0       	brcs	.+2      	; 0x1356 <gc_execute_line+0x854>
    1354:	49 c0       	rjmp	.+146    	; 0x13e8 <gc_execute_line+0x8e6>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1356:	80 91 0b 02 	lds	r24, 0x020B
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	09 f4       	brne	.+2      	; 0x1360 <gc_execute_line+0x85e>
    135e:	7a c0       	rjmp	.+244    	; 0x1454 <gc_execute_line+0x952>
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	08 f0       	brcs	.+2      	; 0x1366 <gc_execute_line+0x864>
    1364:	6f c0       	rjmp	.+222    	; 0x1444 <gc_execute_line+0x942>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    1366:	00 d0       	rcall	.+0      	; 0x1368 <gc_execute_line+0x866>
    1368:	00 d0       	rcall	.+0      	; 0x136a <gc_execute_line+0x868>
    136a:	6c 85       	ldd	r22, Y+12	; 0x0c
    136c:	7d 85       	ldd	r23, Y+13	; 0x0d
    136e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1370:	9f 85       	ldd	r25, Y+15	; 0x0f
    1372:	28 89       	ldd	r18, Y+16	; 0x10
    1374:	39 89       	ldd	r19, Y+17	; 0x11
    1376:	4a 89       	ldd	r20, Y+18	; 0x12
    1378:	5b 89       	ldd	r21, Y+19	; 0x13
    137a:	ec 88       	ldd	r14, Y+20	; 0x14
    137c:	fd 88       	ldd	r15, Y+21	; 0x15
    137e:	0e 89       	ldd	r16, Y+22	; 0x16
    1380:	1f 89       	ldd	r17, Y+23	; 0x17
    1382:	a8 8c       	ldd	r10, Y+24	; 0x18
    1384:	b9 8c       	ldd	r11, Y+25	; 0x19
    1386:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1388:	db 8c       	ldd	r13, Y+27	; 0x1b
    138a:	60 90 18 02 	lds	r6, 0x0218
    138e:	70 90 19 02 	lds	r7, 0x0219
    1392:	80 90 1a 02 	lds	r8, 0x021A
    1396:	90 90 1b 02 	lds	r9, 0x021B
    139a:	ad b7       	in	r26, 0x3d	; 61
    139c:	be b7       	in	r27, 0x3e	; 62
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	6d 92       	st	X+, r6
    13a2:	7d 92       	st	X+, r7
    13a4:	8d 92       	st	X+, r8
    13a6:	9c 92       	st	X, r9
    13a8:	14 97       	sbiw	r26, 0x04	; 4
    13aa:	16 96       	adiw	r26, 0x06	; 6
    13ac:	1c 92       	st	X, r1
    13ae:	1e 92       	st	-X, r1
    13b0:	15 97       	sbiw	r26, 0x05	; 5
    13b2:	0e 94 9e 10 	call	0x213c	; 0x213c <plan_buffer_line>
    13b6:	ed b7       	in	r30, 0x3d	; 61
    13b8:	fe b7       	in	r31, 0x3e	; 62
    13ba:	36 96       	adiw	r30, 0x06	; 6
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	fe bf       	out	0x3e, r31	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    13c6:	ac e1       	ldi	r26, 0x1C	; 28
    13c8:	b2 e0       	ldi	r27, 0x02	; 2
    13ca:	f1 01       	movw	r30, r2
    13cc:	80 e1       	ldi	r24, 0x10	; 16
    13ce:	01 90       	ld	r0, Z+
    13d0:	0d 92       	st	X+, r0
    13d2:	81 50       	subi	r24, 0x01	; 1
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <gc_execute_line+0x8cc>
    13d6:	2e cd       	rjmp	.-1444   	; 0xe34 <gc_execute_line+0x332>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    13d8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <spindle_stop>
    13dc:	aa cf       	rjmp	.-172    	; 0x1332 <gc_execute_line+0x830>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 34 03 	call	0x668	; 0x668 <coolant_flood>
    13e6:	b0 cf       	rjmp	.-160    	; 0x1348 <gc_execute_line+0x846>
  }
  
  // Perform any physical actions
  switch (next_action) {
    13e8:	b2 30       	cpi	r27, 0x02	; 2
    13ea:	21 f1       	breq	.+72     	; 0x1434 <gc_execute_line+0x932>
    13ec:	b3 30       	cpi	r27, 0x03	; 3
    13ee:	59 f7       	brne	.-42     	; 0x13c6 <gc_execute_line+0x8c4>
	  rotate_head( head);
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    13f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    13f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    13f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    13f8:	28 89       	ldd	r18, Y+16	; 0x10
    13fa:	39 89       	ldd	r19, Y+17	; 0x11
    13fc:	4a 89       	ldd	r20, Y+18	; 0x12
    13fe:	5b 89       	ldd	r21, Y+19	; 0x13
    1400:	ec 88       	ldd	r14, Y+20	; 0x14
    1402:	fd 88       	ldd	r15, Y+21	; 0x15
    1404:	0e 89       	ldd	r16, Y+22	; 0x16
    1406:	1f 89       	ldd	r17, Y+23	; 0x17
    1408:	a8 8c       	ldd	r10, Y+24	; 0x18
    140a:	b9 8c       	ldd	r11, Y+25	; 0x19
    140c:	ca 8c       	ldd	r12, Y+26	; 0x1a
    140e:	db 8c       	ldd	r13, Y+27	; 0x1b
    1410:	0e 94 aa 0c 	call	0x1954	; 0x1954 <plan_set_current>
    1414:	d8 cf       	rjmp	.-80     	; 0x13c6 <gc_execute_line+0x8c4>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    1416:	68 85       	ldd	r22, Y+8	; 0x08
    1418:	79 85       	ldd	r23, Y+9	; 0x09
    141a:	8a 85       	ldd	r24, Y+10	; 0x0a
    141c:	9b 85       	ldd	r25, Y+11	; 0x0b
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a e7       	ldi	r20, 0x7A	; 122
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    142a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
    142e:	0e 94 2d 0b 	call	0x165a	; 0x165a <mc_dwell>
    1432:	c9 cf       	rjmp	.-110    	; 0x13c6 <gc_execute_line+0x8c4>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    1434:	0e 94 2a 0b 	call	0x1654	; 0x1654 <mc_go_home>
    1438:	80 e1       	ldi	r24, 0x10	; 16
    143a:	f1 01       	movw	r30, r2
    143c:	11 92       	st	Z+, r1
    143e:	8a 95       	dec	r24
    1440:	e9 f7       	brne	.-6      	; 0x143c <gc_execute_line+0x93a>
    1442:	c1 cf       	rjmp	.-126    	; 0x13c6 <gc_execute_line+0x8c4>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1444:	89 30       	cpi	r24, 0x09	; 9
    1446:	09 f0       	breq	.+2      	; 0x144a <gc_execute_line+0x948>
    1448:	be cf       	rjmp	.-132    	; 0x13c6 <gc_execute_line+0x8c4>
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    144a:	8a a9       	ldd	r24, Y+50	; 0x32
    144c:	9b a9       	ldd	r25, Y+51	; 0x33
    144e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <rotate_head>
    1452:	b9 cf       	rjmp	.-142    	; 0x13c6 <gc_execute_line+0x8c4>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    1454:	8c 85       	ldd	r24, Y+12	; 0x0c
    1456:	9d 85       	ldd	r25, Y+13	; 0x0d
    1458:	ae 85       	ldd	r26, Y+14	; 0x0e
    145a:	bf 85       	ldd	r27, Y+15	; 0x0f
    145c:	8c a7       	std	Y+44, r24	; 0x2c
    145e:	9d a7       	std	Y+45, r25	; 0x2d
    1460:	ae a7       	std	Y+46, r26	; 0x2e
    1462:	bf a7       	std	Y+47, r27	; 0x2f
    1464:	68 88       	ldd	r6, Y+16	; 0x10
    1466:	79 88       	ldd	r7, Y+17	; 0x11
    1468:	8a 88       	ldd	r8, Y+18	; 0x12
    146a:	9b 88       	ldd	r9, Y+19	; 0x13
    146c:	ec 88       	ldd	r14, Y+20	; 0x14
    146e:	fd 88       	ldd	r15, Y+21	; 0x15
    1470:	0e 89       	ldd	r16, Y+22	; 0x16
    1472:	1f 89       	ldd	r17, Y+23	; 0x17
    1474:	a8 8c       	ldd	r10, Y+24	; 0x18
    1476:	b9 8c       	ldd	r11, Y+25	; 0x19
    1478:	ca 8c       	ldd	r12, Y+26	; 0x1a
    147a:	db 8c       	ldd	r13, Y+27	; 0x1b
    147c:	60 91 0c 02 	lds	r22, 0x020C
    1480:	66 23       	and	r22, r22
    1482:	61 f4       	brne	.+24     	; 0x149c <gc_execute_line+0x99a>
    1484:	90 91 14 02 	lds	r25, 0x0214
    1488:	9c ab       	std	Y+52, r25	; 0x34
    148a:	a0 91 15 02 	lds	r26, 0x0215
    148e:	ad ab       	std	Y+53, r26	; 0x35
    1490:	b0 91 16 02 	lds	r27, 0x0216
    1494:	be ab       	std	Y+54, r27	; 0x36
    1496:	e0 91 17 02 	lds	r30, 0x0217
    149a:	ef ab       	std	Y+55, r30	; 0x37
    149c:	00 d0       	rcall	.+0      	; 0x149e <gc_execute_line+0x99c>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <gc_execute_line+0x99e>
    14a0:	4d b6       	in	r4, 0x3d	; 61
    14a2:	5e b6       	in	r5, 0x3e	; 62
    14a4:	08 94       	sec
    14a6:	41 1c       	adc	r4, r1
    14a8:	51 1c       	adc	r5, r1
    14aa:	2c a9       	ldd	r18, Y+52	; 0x34
    14ac:	3d a9       	ldd	r19, Y+53	; 0x35
    14ae:	4e a9       	ldd	r20, Y+54	; 0x36
    14b0:	5f a9       	ldd	r21, Y+55	; 0x37
    14b2:	c9 01       	movw	r24, r18
    14b4:	da 01       	movw	r26, r20
    14b6:	ed b7       	in	r30, 0x3d	; 61
    14b8:	fe b7       	in	r31, 0x3e	; 62
    14ba:	81 83       	std	Z+1, r24	; 0x01
    14bc:	92 83       	std	Z+2, r25	; 0x02
    14be:	a3 83       	std	Z+3, r26	; 0x03
    14c0:	b4 83       	std	Z+4, r27	; 0x04
    14c2:	d2 01       	movw	r26, r4
    14c4:	14 96       	adiw	r26, 0x04	; 4
    14c6:	6c 93       	st	X, r22
    14c8:	14 97       	sbiw	r26, 0x04	; 4
    14ca:	15 96       	adiw	r26, 0x05	; 5
    14cc:	1c 92       	st	X, r1
    14ce:	6c a5       	ldd	r22, Y+44	; 0x2c
    14d0:	7d a5       	ldd	r23, Y+45	; 0x2d
    14d2:	8e a5       	ldd	r24, Y+46	; 0x2e
    14d4:	9f a5       	ldd	r25, Y+47	; 0x2f
    14d6:	a4 01       	movw	r20, r8
    14d8:	93 01       	movw	r18, r6
    14da:	0e 94 9e 10 	call	0x213c	; 0x213c <plan_buffer_line>
    14de:	ed b7       	in	r30, 0x3d	; 61
    14e0:	fe b7       	in	r31, 0x3e	; 62
    14e2:	36 96       	adiw	r30, 0x06	; 6
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	fe bf       	out	0x3e, r31	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	ed bf       	out	0x3d, r30	; 61
    14ee:	6b cf       	rjmp	.-298    	; 0x13c6 <gc_execute_line+0x8c4>

000014f0 <theta>:


// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    14f0:	af 92       	push	r10
    14f2:	bf 92       	push	r11
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	79 01       	movw	r14, r18
    1502:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    1504:	5f 77       	andi	r21, 0x7F	; 127
    1506:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    150a:	0e 94 55 2c 	call	0x58aa	; 0x58aa <atan>
    150e:	5b 01       	movw	r10, r22
    1510:	6c 01       	movw	r12, r24
  if (y>0) {
    1512:	c8 01       	movw	r24, r16
    1514:	b7 01       	movw	r22, r14
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__gesf2>
    1522:	18 16       	cp	r1, r24
    1524:	5c f4       	brge	.+22     	; 0x153c <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
    1526:	b5 01       	movw	r22, r10
    1528:	c6 01       	movw	r24, r12
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	bf 90       	pop	r11
    1538:	af 90       	pop	r10
    153a:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
    153c:	c6 01       	movw	r24, r12
    153e:	b5 01       	movw	r22, r10
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__gesf2>
    154c:	18 16       	cp	r1, r24
    154e:	5c f4       	brge	.+22     	; 0x1566 <theta+0x76>
    {
      return(M_PI-theta);
    1550:	6b ed       	ldi	r22, 0xDB	; 219
    1552:	7f e0       	ldi	r23, 0x0F	; 15
    1554:	89 e4       	ldi	r24, 0x49	; 73
    1556:	90 e4       	ldi	r25, 0x40	; 64
    1558:	a6 01       	movw	r20, r12
    155a:	95 01       	movw	r18, r10
    155c:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    1560:	5b 01       	movw	r10, r22
    1562:	6c 01       	movw	r12, r24
    1564:	e0 cf       	rjmp	.-64     	; 0x1526 <theta+0x36>
    } else {
      return(-M_PI-theta);
    1566:	6b ed       	ldi	r22, 0xDB	; 219
    1568:	7f e0       	ldi	r23, 0x0F	; 15
    156a:	89 e4       	ldi	r24, 0x49	; 73
    156c:	90 ec       	ldi	r25, 0xC0	; 192
    156e:	a6 01       	movw	r20, r12
    1570:	95 01       	movw	r18, r10
    1572:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    1576:	5b 01       	movw	r10, r22
    1578:	6c 01       	movw	r12, r24
    157a:	d5 cf       	rjmp	.-86     	; 0x1526 <theta+0x36>

0000157c <main>:
        }
}

int main(void)
{
	setup_timer();
    157c:	0e 94 08 27 	call	0x4e10	; 0x4e10 <setup_timer>

	sp_init();        
    1580:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <sp_init>

#ifdef VERBOSE_DEBUG
  serialWrite('1');
#endif
  settings_init();  
    1584:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <settings_init>

#ifdef VERBOSE_DEBUG
  serialWrite('2');
#endif
  plan_init();      
    1588:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <plan_init>

#ifdef VERBOSE_DEBUG
  serialWrite('3');
#endif
  st_init();       
    158c:	0e 94 a9 18 	call	0x3152	; 0x3152 <st_init>

#ifdef VERBOSE_DEBUG
  serialWrite('4');
#endif
  // do limits init first because its dumb at the moment 
  limits_init();
    1590:	0e 94 f6 18 	call	0x31ec	; 0x31ec <limits_init>

#ifdef VERBOSE_DEBUG
  serialWrite('5');
#endif
	usb_init();
    1594:	0e 94 cb 2a 	call	0x5596	; 0x5596 <usb_init>

	usb_setEventHandler(pb_usbEventHandler);
    1598:	87 e1       	ldi	r24, 0x17	; 23
    159a:	9b e0       	ldi	r25, 0x0B	; 11
    159c:	0e 94 93 24 	call	0x4926	; 0x4926 <usb_setEventHandler>

#ifdef VERBOSE_DEBUG
  serialWrite('6');
#endif

  spindle_init();   
    15a0:	0e 94 7d 17 	call	0x2efa	; 0x2efa <spindle_init>
  coolant_init();
    15a4:	0e 94 32 03 	call	0x664	; 0x664 <coolant_init>
  atc_init();
    15a8:	0e 94 56 1f 	call	0x3eac	; 0x3eac <atc_init>
  head_init();
    15ac:	0e 94 9f 20 	call	0x413e	; 0x413e <head_init>
  vacuum_init();
    15b0:	0e 94 a7 21 	call	0x434e	; 0x434e <vacuum_init>
  panel_init();
    15b4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <panel_init>
  gc_init();
    15b8:	0e 94 43 05 	call	0xa86	; 0xa86 <gc_init>
 
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n"));
    15bc:	8f e4       	ldi	r24, 0x4F	; 79
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    15c4:	10 c0       	rjmp	.+32     	; 0x15e6 <main+0x6a>
	if(ackHost){
		serialWrite(ackHost);
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    15c6:	85 34       	cpi	r24, 0x45	; 69
    15c8:	41 f1       	breq	.+80     	; 0x161a <main+0x9e>
    15ca:	88 34       	cpi	r24, 0x48	; 72
    15cc:	21 f4       	brne	.+8      	; 0x15d6 <main+0x5a>
		// H = not homed
		case 'L':
				printPgmString( PSTR("lim\n"));
				break;
		case 'H':
				printPgmString( PSTR("nho\n"));
    15ce:	85 e4       	ldi	r24, 0x45	; 69
    15d0:	93 e0       	ldi	r25, 0x03	; 3
    15d2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
		case 'E':
			printPgmString( PSTR("err\n"));
			break;
	}

	ackHost = 0;
    15d6:	10 92 54 05 	sts	0x0554, r1

    sp_process(); // ... process the serial protocol
    15da:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <sp_process>

	process_panel(); // check the panel
    15de:	0e 94 74 21 	call	0x42e8	; 0x42e8 <process_panel>

	usb_poll();
    15e2:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <usb_poll>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    15e6:	83 b7       	in	r24, 0x33	; 51
    15e8:	81 60       	ori	r24, 0x01	; 1
    15ea:	83 bf       	out	0x33, r24	; 51
    15ec:	88 95       	sleep
    15ee:	83 b7       	in	r24, 0x33	; 51
    15f0:	8e 7f       	andi	r24, 0xFE	; 254
    15f2:	83 bf       	out	0x33, r24	; 51
	if(ackHost){
		serialWrite(ackHost);
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    15f4:	80 91 54 05 	lds	r24, 0x0554
    15f8:	8c 34       	cpi	r24, 0x4C	; 76
    15fa:	a1 f0       	breq	.+40     	; 0x1624 <main+0xa8>
    15fc:	8d 34       	cpi	r24, 0x4D	; 77
    15fe:	18 f3       	brcs	.-58     	; 0x15c6 <main+0x4a>
    1600:	8f 34       	cpi	r24, 0x4F	; 79
    1602:	11 f0       	breq	.+4      	; 0x1608 <main+0x8c>
    1604:	88 35       	cpi	r24, 0x58	; 88
    1606:	39 f7       	brne	.-50     	; 0x15d6 <main+0x5a>
		case 'H':
				printPgmString( PSTR("nho\n"));
			break;
		case 'O':
		case 'X':
			if( head_moving() == 0 ) 
    1608:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    160c:	88 23       	and	r24, r24
    160e:	19 f7       	brne	.-58     	; 0x15d6 <main+0x5a>
				printPgmString( PSTR("ok\n"));
    1610:	81 e4       	ldi	r24, 0x41	; 65
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    1618:	de cf       	rjmp	.-68     	; 0x15d6 <main+0x5a>
			break;
		case 'E':
			printPgmString( PSTR("err\n"));
    161a:	8c e3       	ldi	r24, 0x3C	; 60
    161c:	93 e0       	ldi	r25, 0x03	; 3
    161e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    1622:	d9 cf       	rjmp	.-78     	; 0x15d6 <main+0x5a>
	switch( ackHost ) {
		// X = move finished ok
		// L = hit a limit
		// H = not homed
		case 'L':
				printPgmString( PSTR("lim\n"));
    1624:	8a e4       	ldi	r24, 0x4A	; 74
    1626:	93 e0       	ldi	r25, 0x03	; 3
    1628:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    162c:	d4 cf       	rjmp	.-88     	; 0x15d6 <main+0x5a>

0000162e <pb_usbEventHandler>:
 */
static void pb_usbEventHandler(usb_device * device, usb_eventType event)
{
        //adb_usbConfiguration handle;

        switch (event)
    162e:	66 23       	and	r22, r22
    1630:	39 f4       	brne	.+14     	; 0x1640 <pb_usbEventHandler+0x12>
        {
        case USB_CONNECT:

				serialWrite('U');
    1632:	85 e5       	ldi	r24, 0x55	; 85
    1634:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <serialWrite>
				serialWrite('C');
    1638:	83 e4       	ldi	r24, 0x43	; 67
    163a:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <serialWrite>
    163e:	08 95       	ret
 */
static void pb_usbEventHandler(usb_device * device, usb_eventType event)
{
        //adb_usbConfiguration handle;

        switch (event)
    1640:	61 30       	cpi	r22, 0x01	; 1
    1642:	09 f0       	breq	.+2      	; 0x1646 <pb_usbEventHandler+0x18>
    1644:	08 95       	ret

                break;

        case USB_DISCONNECT:

				serialWrite('U');
    1646:	85 e5       	ldi	r24, 0x55	; 85
    1648:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <serialWrite>
				serialWrite('D');
    164c:	84 e4       	ldi	r24, 0x44	; 68
    164e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <serialWrite>
    1652:	08 95       	ret

00001654 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    1654:	0e 94 39 1a 	call	0x3472	; 0x3472 <st_go_home>
}
    1658:	08 95       	ret

0000165a <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	7b 01       	movw	r14, r22
    166c:	8c 01       	movw	r16, r24
  st_synchronize();
    166e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <st_synchronize>
  _delay_ms(milliseconds);
    1672:	c8 01       	movw	r24, r16
    1674:	b7 01       	movw	r22, r14
    1676:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatunsisf>
    167a:	5b 01       	movw	r10, r22
    167c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	4a e7       	ldi	r20, 0x7A	; 122
    1684:	55 e4       	ldi	r21, 0x45	; 69
    1686:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    168a:	7b 01       	movw	r14, r22
    168c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
    169a:	88 23       	and	r24, r24
    169c:	7c f1       	brlt	.+94     	; 0x16fc <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    169e:	c8 01       	movw	r24, r16
    16a0:	b7 01       	movw	r22, r14
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	3f ef       	ldi	r19, 0xFF	; 255
    16a6:	4f e7       	ldi	r20, 0x7F	; 127
    16a8:	57 e4       	ldi	r21, 0x47	; 71
    16aa:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__gesf2>
    16ae:	18 16       	cp	r1, r24
    16b0:	ac f4       	brge	.+42     	; 0x16dc <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b2:	c6 01       	movw	r24, r12
    16b4:	b5 01       	movw	r22, r10
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    16c2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
    16c6:	cb 01       	movw	r24, r22
		while(__ticks)
    16c8:	67 2b       	or	r22, r23
    16ca:	79 f0       	breq	.+30     	; 0x16ea <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16cc:	20 e9       	ldi	r18, 0x90	; 144
    16ce:	31 e0       	ldi	r19, 0x01	; 1
    16d0:	f9 01       	movw	r30, r18
    16d2:	31 97       	sbiw	r30, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d8:	d9 f7       	brne	.-10     	; 0x16d0 <mc_dwell+0x76>
    16da:	07 c0       	rjmp	.+14     	; 0x16ea <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	c8 01       	movw	r24, r16
    16de:	b7 01       	movw	r22, r14
    16e0:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
    16e4:	cb 01       	movw	r24, r22
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <mc_dwell+0x8c>
}
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	cf 90       	pop	r12
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	f1 cf       	rjmp	.-30     	; 0x16e4 <mc_dwell+0x8a>

00001702 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    1702:	fc 01       	movw	r30, r24
    1704:	60 91 b6 06 	lds	r22, 0x06B6
    1708:	70 91 b7 06 	lds	r23, 0x06B7
    170c:	80 91 b8 06 	lds	r24, 0x06B8
    1710:	90 91 b9 06 	lds	r25, 0x06B9
    1714:	21 a5       	ldd	r18, Z+41	; 0x29
    1716:	32 a5       	ldd	r19, Z+42	; 0x2a
    1718:	43 a5       	ldd	r20, Z+43	; 0x2b
    171a:	54 a5       	ldd	r21, Z+44	; 0x2c
    171c:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    1720:	08 95       	ret

00001722 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    1722:	80 91 20 05 	lds	r24, 0x0520
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	08 95       	ret

0000172a <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    172a:	20 91 0c 05 	lds	r18, 0x050C
    172e:	30 91 0d 05 	lds	r19, 0x050D
    1732:	80 91 0e 05 	lds	r24, 0x050E
    1736:	90 91 0f 05 	lds	r25, 0x050F
    173a:	28 17       	cp	r18, r24
    173c:	39 07       	cpc	r19, r25
    173e:	69 f0       	breq	.+26     	; 0x175a <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1740:	80 91 0e 05 	lds	r24, 0x050E
    1744:	90 91 0f 05 	lds	r25, 0x050F
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	6a e0       	ldi	r22, 0x0A	; 10
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
    1752:	90 93 0f 05 	sts	0x050F, r25
    1756:	80 93 0e 05 	sts	0x050E, r24
    175a:	08 95       	ret

0000175c <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    175c:	20 91 0c 05 	lds	r18, 0x050C
    1760:	30 91 0d 05 	lds	r19, 0x050D
    1764:	80 91 0e 05 	lds	r24, 0x050E
    1768:	90 91 0f 05 	lds	r25, 0x050F
    176c:	28 17       	cp	r18, r24
    176e:	39 07       	cpc	r19, r25
    1770:	d1 f0       	breq	.+52     	; 0x17a6 <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    1772:	20 91 0e 05 	lds	r18, 0x050E
    1776:	30 91 0f 05 	lds	r19, 0x050F
    177a:	c9 01       	movw	r24, r18
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	ac 01       	movw	r20, r24
    178a:	44 0f       	add	r20, r20
    178c:	55 1f       	adc	r21, r21
    178e:	44 0f       	add	r20, r20
    1790:	55 1f       	adc	r21, r21
    1792:	44 0f       	add	r20, r20
    1794:	55 1f       	adc	r21, r21
    1796:	48 0f       	add	r20, r24
    1798:	59 1f       	adc	r21, r25
    179a:	42 0f       	add	r20, r18
    179c:	53 1f       	adc	r21, r19
    179e:	4e 5c       	subi	r20, 0xCE	; 206
    17a0:	5d 4f       	sbci	r21, 0xFD	; 253
}
    17a2:	ca 01       	movw	r24, r20
    17a4:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    17aa:	ca 01       	movw	r24, r20
    17ac:	08 95       	ret

000017ae <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    17ae:	4f 92       	push	r4
    17b0:	5f 92       	push	r5
    17b2:	6f 92       	push	r6
    17b4:	7f 92       	push	r7
    17b6:	8f 92       	push	r8
    17b8:	9f 92       	push	r9
    17ba:	af 92       	push	r10
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	ec 01       	movw	r28, r24
    17d0:	4b 01       	movw	r8, r22
  if(!current) { return; }
    17d2:	61 15       	cp	r22, r1
    17d4:	71 05       	cpc	r23, r1
    17d6:	99 f0       	breq	.+38     	; 0x17fe <planner_forward_pass_kernel+0x50>
  if(previous) {
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	89 f0       	breq	.+34     	; 0x17fe <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    17dc:	e9 a8       	ldd	r14, Y+49	; 0x31
    17de:	fa a8       	ldd	r15, Y+50	; 0x32
    17e0:	0b a9       	ldd	r16, Y+51	; 0x33
    17e2:	1c a9       	ldd	r17, Y+52	; 0x34
    17e4:	fb 01       	movw	r30, r22
    17e6:	41 a8       	ldd	r4, Z+49	; 0x31
    17e8:	52 a8       	ldd	r5, Z+50	; 0x32
    17ea:	63 a8       	ldd	r6, Z+51	; 0x33
    17ec:	74 a8       	ldd	r7, Z+52	; 0x34
    17ee:	c8 01       	movw	r24, r16
    17f0:	b7 01       	movw	r22, r14
    17f2:	a3 01       	movw	r20, r6
    17f4:	92 01       	movw	r18, r4
    17f6:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
    17fa:	88 23       	and	r24, r24
    17fc:	8c f0       	brlt	.+34     	; 0x1820 <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ff 90       	pop	r15
    1808:	ef 90       	pop	r14
    180a:	df 90       	pop	r13
    180c:	cf 90       	pop	r12
    180e:	bf 90       	pop	r11
    1810:	af 90       	pop	r10
    1812:	9f 90       	pop	r9
    1814:	8f 90       	pop	r8
    1816:	7f 90       	pop	r7
    1818:	6f 90       	pop	r6
    181a:	5f 90       	pop	r5
    181c:	4f 90       	pop	r4
    181e:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1820:	f4 01       	movw	r30, r8
    1822:	a1 a4       	ldd	r10, Z+41	; 0x29
    1824:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1826:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1828:	d4 a4       	ldd	r13, Z+44	; 0x2c
    182a:	c8 01       	movw	r24, r16
    182c:	b7 01       	movw	r22, r14
    182e:	a6 01       	movw	r20, r12
    1830:	95 01       	movw	r18, r10
    1832:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1836:	9b 01       	movw	r18, r22
    1838:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    183a:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    183e:	7b 01       	movw	r14, r22
    1840:	8c 01       	movw	r16, r24
    1842:	20 91 b2 06 	lds	r18, 0x06B2
    1846:	30 91 b3 06 	lds	r19, 0x06B3
    184a:	40 91 b4 06 	lds	r20, 0x06B4
    184e:	50 91 b5 06 	lds	r21, 0x06B5
    1852:	50 58       	subi	r21, 0x80	; 128
    1854:	ca 01       	movw	r24, r20
    1856:	b9 01       	movw	r22, r18
    1858:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e7       	ldi	r20, 0x70	; 112
    1862:	52 e4       	ldi	r21, 0x42	; 66
    1864:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e7       	ldi	r20, 0x70	; 112
    186e:	52 ec       	ldi	r21, 0xC2	; 194
    1870:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1874:	2d a5       	ldd	r18, Y+45	; 0x2d
    1876:	3e a5       	ldd	r19, Y+46	; 0x2e
    1878:	4f a5       	ldd	r20, Y+47	; 0x2f
    187a:	58 a9       	ldd	r21, Y+48	; 0x30
    187c:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1880:	9b 01       	movw	r18, r22
    1882:	ac 01       	movw	r20, r24
    1884:	c8 01       	movw	r24, r16
    1886:	b7 01       	movw	r22, r14
    1888:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    188c:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1890:	a6 01       	movw	r20, r12
    1892:	95 01       	movw	r18, r10
    1894:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    1898:	7b 01       	movw	r14, r22
    189a:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    189c:	c3 01       	movw	r24, r6
    189e:	b2 01       	movw	r22, r4
    18a0:	a8 01       	movw	r20, r16
    18a2:	97 01       	movw	r18, r14
    18a4:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__gesf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <planner_forward_pass_kernel+0x100>
    18ac:	a8 cf       	rjmp	.-176    	; 0x17fe <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    18ae:	f4 01       	movw	r30, r8
    18b0:	e1 aa       	std	Z+49, r14	; 0x31
    18b2:	f2 aa       	std	Z+50, r15	; 0x32
    18b4:	03 ab       	std	Z+51, r16	; 0x33
    18b6:	14 ab       	std	Z+52, r17	; 0x34
    18b8:	a2 cf       	rjmp	.-188    	; 0x17fe <planner_forward_pass_kernel+0x50>

000018ba <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    18c6:	80 91 0e 05 	lds	r24, 0x050E
    18ca:	90 91 0f 05 	lds	r25, 0x050F
    18ce:	48 2f       	mov	r20, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    18d0:	08 2f       	mov	r16, r24
    18d2:	11 27       	eor	r17, r17
    18d4:	07 fd       	sbrc	r16, 7
    18d6:	10 95       	com	r17
    18d8:	80 91 0c 05 	lds	r24, 0x050C
    18dc:	90 91 0d 05 	lds	r25, 0x050D
    18e0:	08 17       	cp	r16, r24
    18e2:	19 07       	cpc	r17, r25
    18e4:	91 f1       	breq	.+100    	; 0x194a <planner_forward_pass+0x90>
    18e6:	ee 24       	eor	r14, r14
    18e8:	ff 24       	eor	r15, r15
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <planner_forward_pass+0x38>
    18f0:	7e 01       	movw	r14, r28
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    18f2:	89 e4       	ldi	r24, 0x49	; 73
    18f4:	48 02       	muls	r20, r24
    18f6:	e0 01       	movw	r28, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	ce 5c       	subi	r28, 0xCE	; 206
    18fc:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    18fe:	c9 01       	movw	r24, r18
    1900:	b7 01       	movw	r22, r14
    1902:	ae 01       	movw	r20, r28
    1904:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1908:	c8 01       	movw	r24, r16
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	6a e0       	ldi	r22, 0x0A	; 10
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
    1914:	48 2f       	mov	r20, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1916:	08 2f       	mov	r16, r24
    1918:	11 27       	eor	r17, r17
    191a:	07 fd       	sbrc	r16, 7
    191c:	10 95       	com	r17
    191e:	80 91 0c 05 	lds	r24, 0x050C
    1922:	90 91 0d 05 	lds	r25, 0x050D
    1926:	97 01       	movw	r18, r14
    1928:	08 17       	cp	r16, r24
    192a:	19 07       	cpc	r17, r25
    192c:	09 f7       	brne	.-62     	; 0x18f0 <planner_forward_pass+0x36>
    192e:	b7 01       	movw	r22, r14
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    1930:	cb 01       	movw	r24, r22
    1932:	be 01       	movw	r22, r28
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <planner_forward_pass_kernel>
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	08 95       	ret
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    194a:	c0 e0       	ldi	r28, 0x00	; 0
    194c:	d0 e0       	ldi	r29, 0x00	; 0
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	ee cf       	rjmp	.-36     	; 0x1930 <planner_forward_pass+0x76>

00001954 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1954:	2f 92       	push	r2
    1956:	3f 92       	push	r3
    1958:	4f 92       	push	r4
    195a:	5f 92       	push	r5
    195c:	6f 92       	push	r6
    195e:	7f 92       	push	r7
    1960:	8f 92       	push	r8
    1962:	9f 92       	push	r9
    1964:	af 92       	push	r10
    1966:	bf 92       	push	r11
    1968:	cf 92       	push	r12
    196a:	df 92       	push	r13
    196c:	ef 92       	push	r14
    196e:	ff 92       	push	r15
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	3b 01       	movw	r6, r22
    1976:	4c 01       	movw	r8, r24
    1978:	19 01       	movw	r2, r18
    197a:	2a 01       	movw	r4, r20
	st_synchronize();
    197c:	0e 94 b4 1a 	call	0x3568	; 0x3568 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1980:	c4 01       	movw	r24, r8
    1982:	b3 01       	movw	r22, r6
    1984:	20 91 94 06 	lds	r18, 0x0694
    1988:	30 91 95 06 	lds	r19, 0x0695
    198c:	40 91 96 06 	lds	r20, 0x0696
    1990:	50 91 97 06 	lds	r21, 0x0697
    1994:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1998:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    199c:	e0 e1       	ldi	r30, 0x10	; 16
    199e:	8e 2e       	mov	r8, r30
    19a0:	e5 e0       	ldi	r30, 0x05	; 5
    19a2:	9e 2e       	mov	r9, r30
    19a4:	60 93 10 05 	sts	0x0510, r22
    19a8:	70 93 11 05 	sts	0x0511, r23
    19ac:	80 93 12 05 	sts	0x0512, r24
    19b0:	90 93 13 05 	sts	0x0513, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    19b4:	c2 01       	movw	r24, r4
    19b6:	b1 01       	movw	r22, r2
    19b8:	20 91 98 06 	lds	r18, 0x0698
    19bc:	30 91 99 06 	lds	r19, 0x0699
    19c0:	40 91 9a 06 	lds	r20, 0x069A
    19c4:	50 91 9b 06 	lds	r21, 0x069B
    19c8:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    19cc:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    19d0:	f4 01       	movw	r30, r8
    19d2:	34 96       	adiw	r30, 0x04	; 4
    19d4:	60 93 14 05 	sts	0x0514, r22
    19d8:	71 83       	std	Z+1, r23	; 0x01
    19da:	82 83       	std	Z+2, r24	; 0x02
    19dc:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    19de:	c8 01       	movw	r24, r16
    19e0:	b7 01       	movw	r22, r14
    19e2:	20 91 9c 06 	lds	r18, 0x069C
    19e6:	30 91 9d 06 	lds	r19, 0x069D
    19ea:	40 91 9e 06 	lds	r20, 0x069E
    19ee:	50 91 9f 06 	lds	r21, 0x069F
    19f2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    19f6:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    19fa:	f4 01       	movw	r30, r8
    19fc:	38 96       	adiw	r30, 0x08	; 8
    19fe:	60 93 18 05 	sts	0x0518, r22
    1a02:	71 83       	std	Z+1, r23	; 0x01
    1a04:	82 83       	std	Z+2, r24	; 0x02
    1a06:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1a08:	c6 01       	movw	r24, r12
    1a0a:	b5 01       	movw	r22, r10
    1a0c:	20 91 a0 06 	lds	r18, 0x06A0
    1a10:	30 91 a1 06 	lds	r19, 0x06A1
    1a14:	40 91 a2 06 	lds	r20, 0x06A2
    1a18:	50 91 a3 06 	lds	r21, 0x06A3
    1a1c:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1a20:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    1a24:	2c e0       	ldi	r18, 0x0C	; 12
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	82 0e       	add	r8, r18
    1a2a:	93 1e       	adc	r9, r19
    1a2c:	60 93 1c 05 	sts	0x051C, r22
    1a30:	f4 01       	movw	r30, r8
    1a32:	71 83       	std	Z+1, r23	; 0x01
    1a34:	82 83       	std	Z+2, r24	; 0x02
    1a36:	93 83       	std	Z+3, r25	; 0x03
}
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	bf 90       	pop	r11
    1a46:	af 90       	pop	r10
    1a48:	9f 90       	pop	r9
    1a4a:	8f 90       	pop	r8
    1a4c:	7f 90       	pop	r7
    1a4e:	6f 90       	pop	r6
    1a50:	5f 90       	pop	r5
    1a52:	4f 90       	pop	r4
    1a54:	3f 90       	pop	r3
    1a56:	2f 90       	pop	r2
    1a58:	08 95       	ret

00001a5a <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	80 91 20 05 	lds	r24, 0x0520
    1a66:	81 11       	cpse	r24, r1
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	20 97       	sbiw	r28, 0x00	; 0
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <plan_set_acceleration_manager_enabled+0x18>
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	98 17       	cp	r25, r24
    1a74:	31 f0       	breq	.+12     	; 0x1a82 <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    1a76:	0e 94 b4 1a 	call	0x3568	; 0x3568 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    1a7a:	10 92 20 05 	sts	0x0520, r1
    1a7e:	cd 2b       	or	r28, r29
    1a80:	19 f4       	brne	.+6      	; 0x1a88 <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	80 93 20 05 	sts	0x0520, r24
  }
}
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1a94:	10 92 0d 05 	sts	0x050D, r1
    1a98:	10 92 0c 05 	sts	0x050C, r1
  block_buffer_tail = 0;
    1a9c:	10 92 0f 05 	sts	0x050F, r1
    1aa0:	10 92 0e 05 	sts	0x050E, r1
  plan_set_acceleration_manager_enabled(TRUE);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1aac:	80 e1       	ldi	r24, 0x10	; 16
    1aae:	e0 e1       	ldi	r30, 0x10	; 16
    1ab0:	f5 e0       	ldi	r31, 0x05	; 5
    1ab2:	df 01       	movw	r26, r30
    1ab4:	1d 92       	st	X+, r1
    1ab6:	8a 95       	dec	r24
    1ab8:	e9 f7       	brne	.-6      	; 0x1ab4 <plan_init+0x20>
}
    1aba:	08 95       	ret

00001abc <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1abc:	2f 92       	push	r2
    1abe:	3f 92       	push	r3
    1ac0:	4f 92       	push	r4
    1ac2:	5f 92       	push	r5
    1ac4:	6f 92       	push	r6
    1ac6:	7f 92       	push	r7
    1ac8:	8f 92       	push	r8
    1aca:	9f 92       	push	r9
    1acc:	af 92       	push	r10
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <planner_reverse_pass_kernel+0x26>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <planner_reverse_pass_kernel+0x28>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	8c 01       	movw	r16, r24
    1aea:	7e 83       	std	Y+6, r23	; 0x06
    1aec:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1aee:	67 2b       	or	r22, r23
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <planner_reverse_pass_kernel+0x38>
    1af2:	a3 c0       	rjmp	.+326    	; 0x1c3a <planner_reverse_pass_kernel+0x17e>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1af4:	41 15       	cp	r20, r1
    1af6:	51 05       	cpc	r21, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <planner_reverse_pass_kernel+0x40>
    1afa:	19 c1       	rjmp	.+562    	; 0x1d2e <planner_reverse_pass_kernel+0x272>
    exit_factor = next->entry_factor;
    1afc:	da 01       	movw	r26, r20
    1afe:	d1 96       	adiw	r26, 0x31	; 49
    1b00:	8d 91       	ld	r24, X+
    1b02:	9d 91       	ld	r25, X+
    1b04:	0d 90       	ld	r0, X+
    1b06:	bc 91       	ld	r27, X
    1b08:	a0 2d       	mov	r26, r0
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	ab 83       	std	Y+3, r26	; 0x03
    1b10:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1b12:	01 15       	cp	r16, r1
    1b14:	11 05       	cpc	r17, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <planner_reverse_pass_kernel+0x5e>
    1b18:	03 c1       	rjmp	.+518    	; 0x1d20 <planner_reverse_pass_kernel+0x264>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	61 8d       	ldd	r22, Z+25	; 0x19
    1b1e:	72 8d       	ldd	r23, Z+26	; 0x1a
    1b20:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b22:	94 8d       	ldd	r25, Z+28	; 0x1c
    1b24:	ad 81       	ldd	r26, Y+5	; 0x05
    1b26:	be 81       	ldd	r27, Y+6	; 0x06
    1b28:	59 96       	adiw	r26, 0x19	; 25
    1b2a:	2d 91       	ld	r18, X+
    1b2c:	3d 91       	ld	r19, X+
    1b2e:	4d 91       	ld	r20, X+
    1b30:	5c 91       	ld	r21, X
    1b32:	5c 97       	sbiw	r26, 0x1c	; 28
    1b34:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    1b38:	9b 01       	movw	r18, r22
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1b40:	1b 01       	movw	r2, r22
    1b42:	2c 01       	movw	r4, r24
    1b44:	f8 01       	movw	r30, r16
    1b46:	65 8d       	ldd	r22, Z+29	; 0x1d
    1b48:	76 8d       	ldd	r23, Z+30	; 0x1e
    1b4a:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b4c:	90 a1       	ldd	r25, Z+32	; 0x20
    1b4e:	ad 81       	ldd	r26, Y+5	; 0x05
    1b50:	be 81       	ldd	r27, Y+6	; 0x06
    1b52:	5d 96       	adiw	r26, 0x1d	; 29
    1b54:	2d 91       	ld	r18, X+
    1b56:	3d 91       	ld	r19, X+
    1b58:	4d 91       	ld	r20, X+
    1b5a:	5c 91       	ld	r21, X
    1b5c:	90 97       	sbiw	r26, 0x20	; 32
    1b5e:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    1b62:	9b 01       	movw	r18, r22
    1b64:	ac 01       	movw	r20, r24
    1b66:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1b6a:	3b 01       	movw	r6, r22
    1b6c:	4c 01       	movw	r8, r24
    1b6e:	f8 01       	movw	r30, r16
    1b70:	61 a1       	ldd	r22, Z+33	; 0x21
    1b72:	72 a1       	ldd	r23, Z+34	; 0x22
    1b74:	83 a1       	ldd	r24, Z+35	; 0x23
    1b76:	94 a1       	ldd	r25, Z+36	; 0x24
    1b78:	ad 81       	ldd	r26, Y+5	; 0x05
    1b7a:	be 81       	ldd	r27, Y+6	; 0x06
    1b7c:	91 96       	adiw	r26, 0x21	; 33
    1b7e:	2d 91       	ld	r18, X+
    1b80:	3d 91       	ld	r19, X+
    1b82:	4d 91       	ld	r20, X+
    1b84:	5c 91       	ld	r21, X
    1b86:	94 97       	sbiw	r26, 0x24	; 36
    1b88:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    1b8c:	9b 01       	movw	r18, r22
    1b8e:	ac 01       	movw	r20, r24
    1b90:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1b94:	5b 01       	movw	r10, r22
    1b96:	6c 01       	movw	r12, r24
    1b98:	f8 01       	movw	r30, r16
    1b9a:	65 a1       	ldd	r22, Z+37	; 0x25
    1b9c:	76 a1       	ldd	r23, Z+38	; 0x26
    1b9e:	87 a1       	ldd	r24, Z+39	; 0x27
    1ba0:	90 a5       	ldd	r25, Z+40	; 0x28
    1ba2:	ad 81       	ldd	r26, Y+5	; 0x05
    1ba4:	be 81       	ldd	r27, Y+6	; 0x06
    1ba6:	95 96       	adiw	r26, 0x25	; 37
    1ba8:	2d 91       	ld	r18, X+
    1baa:	3d 91       	ld	r19, X+
    1bac:	4d 91       	ld	r20, X+
    1bae:	5c 91       	ld	r21, X
    1bb0:	98 97       	sbiw	r26, 0x28	; 40
    1bb2:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    1bb6:	9b 01       	movw	r18, r22
    1bb8:	ac 01       	movw	r20, r24
    1bba:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1bbe:	7b 01       	movw	r14, r22
    1bc0:	8c 01       	movw	r16, r24
    1bc2:	c2 01       	movw	r24, r4
    1bc4:	b1 01       	movw	r22, r2
    1bc6:	a4 01       	movw	r20, r8
    1bc8:	93 01       	movw	r18, r6
    1bca:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1bce:	a6 01       	movw	r20, r12
    1bd0:	95 01       	movw	r18, r10
    1bd2:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1bd6:	a8 01       	movw	r20, r16
    1bd8:	97 01       	movw	r18, r14
    1bda:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1bde:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <sqrt>
    1be2:	5b 01       	movw	r10, r22
    1be4:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1be6:	e0 90 b6 06 	lds	r14, 0x06B6
    1bea:	f0 90 b7 06 	lds	r15, 0x06B7
    1bee:	00 91 b8 06 	lds	r16, 0x06B8
    1bf2:	10 91 b9 06 	lds	r17, 0x06B9
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	b7 01       	movw	r22, r14
    1bfa:	a6 01       	movw	r20, r12
    1bfc:	95 01       	movw	r18, r10
    1bfe:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
    1c02:	87 fd       	sbrc	r24, 7
    1c04:	33 c0       	rjmp	.+102    	; 0x1c6c <planner_reverse_pass_kernel+0x1b0>
    1c06:	0f 2e       	mov	r0, r31
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	6f 2e       	mov	r6, r31
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	7f 2e       	mov	r7, r31
    1c10:	f0 e8       	ldi	r31, 0x80	; 128
    1c12:	8f 2e       	mov	r8, r31
    1c14:	ff e3       	ldi	r31, 0x3F	; 63
    1c16:	9f 2e       	mov	r9, r31
    1c18:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1c1a:	c4 01       	movw	r24, r8
    1c1c:	b3 01       	movw	r22, r6
    1c1e:	29 81       	ldd	r18, Y+1	; 0x01
    1c20:	3a 81       	ldd	r19, Y+2	; 0x02
    1c22:	4b 81       	ldd	r20, Y+3	; 0x03
    1c24:	5c 81       	ldd	r21, Y+4	; 0x04
    1c26:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__gesf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	44 f1       	brlt	.+80     	; 0x1c7e <planner_reverse_pass_kernel+0x1c2>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1c2e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c30:	fe 81       	ldd	r31, Y+6	; 0x06
    1c32:	61 aa       	std	Z+49, r6	; 0x31
    1c34:	72 aa       	std	Z+50, r7	; 0x32
    1c36:	83 aa       	std	Z+51, r8	; 0x33
    1c38:	94 aa       	std	Z+52, r9	; 0x34
}
    1c3a:	26 96       	adiw	r28, 0x06	; 6
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	bf 90       	pop	r11
    1c58:	af 90       	pop	r10
    1c5a:	9f 90       	pop	r9
    1c5c:	8f 90       	pop	r8
    1c5e:	7f 90       	pop	r7
    1c60:	6f 90       	pop	r6
    1c62:	5f 90       	pop	r5
    1c64:	4f 90       	pop	r4
    1c66:	3f 90       	pop	r3
    1c68:	2f 90       	pop	r2
    1c6a:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1c6c:	c8 01       	movw	r24, r16
    1c6e:	b7 01       	movw	r22, r14
    1c70:	a6 01       	movw	r20, r12
    1c72:	95 01       	movw	r18, r10
    1c74:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    1c78:	3b 01       	movw	r6, r22
    1c7a:	4c 01       	movw	r8, r24
    1c7c:	ce cf       	rjmp	.-100    	; 0x1c1a <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1c7e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c80:	fe 81       	ldd	r31, Y+6	; 0x06
    1c82:	a1 a4       	ldd	r10, Z+41	; 0x29
    1c84:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1c86:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1c88:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1c8a:	c6 01       	movw	r24, r12
    1c8c:	b5 01       	movw	r22, r10
    1c8e:	29 81       	ldd	r18, Y+1	; 0x01
    1c90:	3a 81       	ldd	r19, Y+2	; 0x02
    1c92:	4b 81       	ldd	r20, Y+3	; 0x03
    1c94:	5c 81       	ldd	r21, Y+4	; 0x04
    1c96:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1c9e:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1ca2:	7b 01       	movw	r14, r22
    1ca4:	8c 01       	movw	r16, r24
    1ca6:	20 91 b2 06 	lds	r18, 0x06B2
    1caa:	30 91 b3 06 	lds	r19, 0x06B3
    1cae:	40 91 b4 06 	lds	r20, 0x06B4
    1cb2:	50 91 b5 06 	lds	r21, 0x06B5
    1cb6:	50 58       	subi	r21, 0x80	; 128
    1cb8:	ca 01       	movw	r24, r20
    1cba:	b9 01       	movw	r22, r18
    1cbc:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e7       	ldi	r20, 0x70	; 112
    1cc6:	52 e4       	ldi	r21, 0x42	; 66
    1cc8:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e7       	ldi	r20, 0x70	; 112
    1cd2:	52 ec       	ldi	r21, 0xC2	; 194
    1cd4:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1cd8:	ad 81       	ldd	r26, Y+5	; 0x05
    1cda:	be 81       	ldd	r27, Y+6	; 0x06
    1cdc:	9d 96       	adiw	r26, 0x2d	; 45
    1cde:	2d 91       	ld	r18, X+
    1ce0:	3d 91       	ld	r19, X+
    1ce2:	4d 91       	ld	r20, X+
    1ce4:	5c 91       	ld	r21, X
    1ce6:	d0 97       	sbiw	r26, 0x30	; 48
    1ce8:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1cec:	9b 01       	movw	r18, r22
    1cee:	ac 01       	movw	r20, r24
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1cf8:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1cfc:	a6 01       	movw	r20, r12
    1cfe:	95 01       	movw	r18, r10
    1d00:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    1d04:	7b 01       	movw	r14, r22
    1d06:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1d08:	c4 01       	movw	r24, r8
    1d0a:	b3 01       	movw	r22, r6
    1d0c:	a8 01       	movw	r20, r16
    1d0e:	97 01       	movw	r18, r14
    1d10:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__gesf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	0c f0       	brlt	.+2      	; 0x1d1a <planner_reverse_pass_kernel+0x25e>
    1d18:	8a cf       	rjmp	.-236    	; 0x1c2e <planner_reverse_pass_kernel+0x172>
    1d1a:	37 01       	movw	r6, r14
    1d1c:	48 01       	movw	r8, r16
    1d1e:	87 cf       	rjmp	.-242    	; 0x1c2e <planner_reverse_pass_kernel+0x172>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	0e 94 81 0b 	call	0x1702	; 0x1702 <factor_for_safe_speed>
    1d28:	3b 01       	movw	r6, r22
    1d2a:	4c 01       	movw	r8, r24
    1d2c:	80 cf       	rjmp	.-256    	; 0x1c2e <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	0e 94 81 0b 	call	0x1702	; 0x1702 <factor_for_safe_speed>
    1d36:	69 83       	std	Y+1, r22	; 0x01
    1d38:	7a 83       	std	Y+2, r23	; 0x02
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	9c 83       	std	Y+4, r25	; 0x04
    1d3e:	e9 ce       	rjmp	.-558    	; 0x1b12 <planner_reverse_pass_kernel+0x56>

00001d40 <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1d4e:	80 91 0c 05 	lds	r24, 0x050C
    1d52:	90 91 0d 05 	lds	r25, 0x050D
    1d56:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d58:	20 91 0e 05 	lds	r18, 0x050E
    1d5c:	30 91 0f 05 	lds	r19, 0x050F
    1d60:	99 27       	eor	r25, r25
    1d62:	87 fd       	sbrc	r24, 7
    1d64:	90 95       	com	r25
    1d66:	82 17       	cp	r24, r18
    1d68:	93 07       	cpc	r25, r19
    1d6a:	b9 f1       	breq	.+110    	; 0x1dda <planner_reverse_pass+0x9a>
    1d6c:	00 e0       	ldi	r16, 0x00	; 0
    1d6e:	10 e0       	ldi	r17, 0x00	; 0
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	19 c0       	rjmp	.+50     	; 0x1da8 <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1d76:	8f 2d       	mov	r24, r15
    1d78:	99 e4       	ldi	r25, 0x49	; 73
    1d7a:	89 02       	muls	r24, r25
    1d7c:	b0 01       	movw	r22, r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	cf 2c       	mov	r12, r15
    1d82:	dd 24       	eor	r13, r13
    1d84:	c7 fc       	sbrc	r12, 7
    1d86:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1d88:	eb 01       	movw	r28, r22
    1d8a:	ce 5c       	subi	r28, 0xCE	; 206
    1d8c:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1d8e:	ce 01       	movw	r24, r28
    1d90:	b8 01       	movw	r22, r16
    1d92:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d96:	80 91 0e 05 	lds	r24, 0x050E
    1d9a:	90 91 0f 05 	lds	r25, 0x050F
    1d9e:	a8 01       	movw	r20, r16
    1da0:	8c 15       	cp	r24, r12
    1da2:	9d 05       	cpc	r25, r13
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <planner_reverse_pass+0x7e>
    1da6:	8e 01       	movw	r16, r28
    block_index--;
    1da8:	fa 94       	dec	r15
    if(block_index < 0) {
    1daa:	f7 fe       	sbrs	r15, 7
    1dac:	e4 cf       	rjmp	.-56     	; 0x1d76 <planner_reverse_pass+0x36>
    1dae:	a9 e0       	ldi	r26, 0x09	; 9
    1db0:	fa 2e       	mov	r15, r26
    1db2:	61 e9       	ldi	r22, 0x91	; 145
    1db4:	72 e0       	ldi	r23, 0x02	; 2
    1db6:	f9 e0       	ldi	r31, 0x09	; 9
    1db8:	cf 2e       	mov	r12, r31
    1dba:	d1 2c       	mov	r13, r1
    1dbc:	e5 cf       	rjmp	.-54     	; 0x1d88 <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1dbe:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	be 01       	movw	r22, r28
    1dc6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <planner_reverse_pass_kernel>
}
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1dda:	c0 e0       	ldi	r28, 0x00	; 0
    1ddc:	d0 e0       	ldi	r29, 0x00	; 0
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	ee cf       	rjmp	.-36     	; 0x1dc0 <planner_reverse_pass+0x80>

00001de4 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1de4:	2f 92       	push	r2
    1de6:	3f 92       	push	r3
    1de8:	4f 92       	push	r4
    1dea:	5f 92       	push	r5
    1dec:	6f 92       	push	r6
    1dee:	7f 92       	push	r7
    1df0:	8f 92       	push	r8
    1df2:	9f 92       	push	r9
    1df4:	af 92       	push	r10
    1df6:	bf 92       	push	r11
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	62 97       	sbiw	r28, 0x12	; 18
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	9a 8b       	std	Y+18, r25	; 0x12
    1e1a:	89 8b       	std	Y+17, r24	; 0x11
    1e1c:	6a 01       	movw	r12, r20
    1e1e:	7b 01       	movw	r14, r22
    1e20:	18 01       	movw	r2, r16
    1e22:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1e24:	fc 01       	movw	r30, r24
    1e26:	65 89       	ldd	r22, Z+21	; 0x15
    1e28:	76 89       	ldd	r23, Z+22	; 0x16
    1e2a:	87 89       	ldd	r24, Z+23	; 0x17
    1e2c:	90 8d       	ldd	r25, Z+24	; 0x18
    1e2e:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatunsisf>
    1e32:	3b 01       	movw	r6, r22
    1e34:	4c 01       	movw	r8, r24
    1e36:	a7 01       	movw	r20, r14
    1e38:	96 01       	movw	r18, r12
    1e3a:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1e3e:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <ceil>
    1e42:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
    1e46:	7b 01       	movw	r14, r22
    1e48:	8c 01       	movw	r16, r24
    1e4a:	e9 89       	ldd	r30, Y+17	; 0x11
    1e4c:	fa 89       	ldd	r31, Y+18	; 0x12
    1e4e:	65 ab       	std	Z+53, r22	; 0x35
    1e50:	76 ab       	std	Z+54, r23	; 0x36
    1e52:	87 ab       	std	Z+55, r24	; 0x37
    1e54:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1e56:	c4 01       	movw	r24, r8
    1e58:	b3 01       	movw	r22, r6
    1e5a:	a2 01       	movw	r20, r4
    1e5c:	91 01       	movw	r18, r2
    1e5e:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1e62:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <ceil>
    1e66:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
    1e6a:	1b 01       	movw	r2, r22
    1e6c:	2c 01       	movw	r4, r24
    1e6e:	e9 89       	ldd	r30, Y+17	; 0x11
    1e70:	fa 89       	ldd	r31, Y+18	; 0x12
    1e72:	61 af       	std	Z+57, r22	; 0x39
    1e74:	72 af       	std	Z+58, r23	; 0x3a
    1e76:	83 af       	std	Z+59, r24	; 0x3b
    1e78:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1e7a:	fd 96       	adiw	r30, 0x3d	; 61
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	fd 97       	sbiw	r30, 0x3d	; 61
    1e86:	fa 8b       	std	Y+18, r31	; 0x12
    1e88:	e9 8b       	std	Y+17, r30	; 0x11
    1e8a:	28 e2       	ldi	r18, 0x28	; 40
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	50 e0       	ldi	r21, 0x00	; 0
    1e92:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__mulsi3>
    1e96:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e7       	ldi	r20, 0x70	; 112
    1ea0:	52 e4       	ldi	r21, 0x42	; 66
    1ea2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1ea6:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
    1eaa:	5b 01       	movw	r10, r22
    1eac:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1eae:	c8 01       	movw	r24, r16
    1eb0:	b7 01       	movw	r22, r14
    1eb2:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatunsisf>
    1eb6:	7b 01       	movw	r14, r22
    1eb8:	8c 01       	movw	r16, r24
    1eba:	c6 01       	movw	r24, r12
    1ebc:	b5 01       	movw	r22, r10
    1ebe:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    1ec2:	6d 83       	std	Y+5, r22	; 0x05
    1ec4:	7e 83       	std	Y+6, r23	; 0x06
    1ec6:	8f 83       	std	Y+7, r24	; 0x07
    1ec8:	98 87       	std	Y+8, r25	; 0x08


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1eca:	c4 01       	movw	r24, r8
    1ecc:	b3 01       	movw	r22, r6
    1ece:	a4 01       	movw	r20, r8
    1ed0:	93 01       	movw	r18, r6
    1ed2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1ed6:	3b 01       	movw	r6, r22
    1ed8:	4c 01       	movw	r8, r24
    1eda:	c8 01       	movw	r24, r16
    1edc:	b7 01       	movw	r22, r14
    1ede:	a8 01       	movw	r20, r16
    1ee0:	97 01       	movw	r18, r14
    1ee2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1ee6:	69 87       	std	Y+9, r22	; 0x09
    1ee8:	7a 87       	std	Y+10, r23	; 0x0a
    1eea:	8b 87       	std	Y+11, r24	; 0x0b
    1eec:	9c 87       	std	Y+12, r25	; 0x0c
    1eee:	6d 81       	ldd	r22, Y+5	; 0x05
    1ef0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef4:	98 85       	ldd	r25, Y+8	; 0x08
    1ef6:	9b 01       	movw	r18, r22
    1ef8:	ac 01       	movw	r20, r24
    1efa:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1efe:	6d 87       	std	Y+13, r22	; 0x0d
    1f00:	7e 87       	std	Y+14, r23	; 0x0e
    1f02:	8f 87       	std	Y+15, r24	; 0x0f
    1f04:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1f06:	c4 01       	movw	r24, r8
    1f08:	b3 01       	movw	r22, r6
    1f0a:	29 85       	ldd	r18, Y+9	; 0x09
    1f0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f0e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f10:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f12:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    1f16:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f18:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f1a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f1c:	58 89       	ldd	r21, Y+16	; 0x10
    1f1e:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    1f22:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <ceil>
    1f26:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
    1f2a:	69 83       	std	Y+1, r22	; 0x01
    1f2c:	7a 83       	std	Y+2, r23	; 0x02
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1f32:	c2 01       	movw	r24, r4
    1f34:	b1 01       	movw	r22, r2
    1f36:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatunsisf>
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	ac 01       	movw	r20, r24


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1f3e:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    1f42:	1b 01       	movw	r2, r22
    1f44:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1f46:	a4 01       	movw	r20, r8
    1f48:	93 01       	movw	r18, r6
    1f4a:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    1f4e:	7b 01       	movw	r14, r22
    1f50:	8c 01       	movw	r16, r24
    1f52:	d0 94       	com	r13
    1f54:	c0 94       	com	r12
    1f56:	b0 94       	com	r11
    1f58:	a0 94       	com	r10
    1f5a:	a1 1c       	adc	r10, r1
    1f5c:	b1 1c       	adc	r11, r1
    1f5e:	c1 1c       	adc	r12, r1
    1f60:	d1 1c       	adc	r13, r1
    1f62:	c6 01       	movw	r24, r12
    1f64:	b5 01       	movw	r22, r10
    1f66:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    1f6a:	9b 01       	movw	r18, r22
    1f6c:	ac 01       	movw	r20, r24
    1f6e:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    1f72:	9b 01       	movw	r18, r22
    1f74:	ac 01       	movw	r20, r24
    1f76:	c8 01       	movw	r24, r16
    1f78:	b7 01       	movw	r22, r14
    1f7a:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    1f7e:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1f82:	e9 89       	ldd	r30, Y+17	; 0x11
    1f84:	fa 89       	ldd	r31, Y+18	; 0x12
    1f86:	a1 88       	ldd	r10, Z+17	; 0x11
    1f88:	b2 88       	ldd	r11, Z+18	; 0x12
    1f8a:	c3 88       	ldd	r12, Z+19	; 0x13
    1f8c:	d4 88       	ldd	r13, Z+20	; 0x14
    1f8e:	86 01       	movw	r16, r12
    1f90:	75 01       	movw	r14, r10
    1f92:	29 81       	ldd	r18, Y+1	; 0x01
    1f94:	3a 81       	ldd	r19, Y+2	; 0x02
    1f96:	4b 81       	ldd	r20, Y+3	; 0x03
    1f98:	5c 81       	ldd	r21, Y+4	; 0x04
    1f9a:	e2 1a       	sub	r14, r18
    1f9c:	f3 0a       	sbc	r15, r19
    1f9e:	04 0b       	sbc	r16, r20
    1fa0:	15 0b       	sbc	r17, r21
    1fa2:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
    1fa6:	a8 01       	movw	r20, r16
    1fa8:	97 01       	movw	r18, r14
    1faa:	26 1b       	sub	r18, r22
    1fac:	37 0b       	sbc	r19, r23
    1fae:	48 0b       	sbc	r20, r24
    1fb0:	59 0b       	sbc	r21, r25
    1fb2:	da 01       	movw	r26, r20
    1fb4:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1fb6:	57 fd       	sbrc	r21, 7
    1fb8:	30 c0       	rjmp	.+96     	; 0x201a <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1fba:	49 89       	ldd	r20, Y+17	; 0x11
    1fbc:	5a 89       	ldd	r21, Y+18	; 0x12
    1fbe:	4f 5b       	subi	r20, 0xBF	; 191
    1fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc2:	fa 01       	movw	r30, r20
    1fc4:	29 81       	ldd	r18, Y+1	; 0x01
    1fc6:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc8:	4b 81       	ldd	r20, Y+3	; 0x03
    1fca:	5c 81       	ldd	r21, Y+4	; 0x04
    1fcc:	21 93       	st	Z+, r18
    1fce:	31 93       	st	Z+, r19
    1fd0:	41 93       	st	Z+, r20
    1fd2:	51 93       	st	Z+, r21
    1fd4:	fa 8b       	std	Y+18, r31	; 0x12
    1fd6:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1fd8:	82 0f       	add	r24, r18
    1fda:	93 1f       	adc	r25, r19
    1fdc:	a4 1f       	adc	r26, r20
    1fde:	b5 1f       	adc	r27, r21
    1fe0:	80 83       	st	Z, r24
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	a2 83       	std	Z+2, r26	; 0x02
    1fe6:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1fe8:	62 96       	adiw	r28, 0x12	; 18
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	df 90       	pop	r13
    2002:	cf 90       	pop	r12
    2004:	bf 90       	pop	r11
    2006:	af 90       	pop	r10
    2008:	9f 90       	pop	r9
    200a:	8f 90       	pop	r8
    200c:	7f 90       	pop	r7
    200e:	6f 90       	pop	r6
    2010:	5f 90       	pop	r5
    2012:	4f 90       	pop	r4
    2014:	3f 90       	pop	r3
    2016:	2f 90       	pop	r2
    2018:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    201a:	c6 01       	movw	r24, r12
    201c:	b5 01       	movw	r22, r10
    201e:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    2022:	2d 85       	ldd	r18, Y+13	; 0x0d
    2024:	3e 85       	ldd	r19, Y+14	; 0x0e
    2026:	4f 85       	ldd	r20, Y+15	; 0x0f
    2028:	58 89       	ldd	r21, Y+16	; 0x10
    202a:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    202e:	29 85       	ldd	r18, Y+9	; 0x09
    2030:	3a 85       	ldd	r19, Y+10	; 0x0a
    2032:	4b 85       	ldd	r20, Y+11	; 0x0b
    2034:	5c 85       	ldd	r21, Y+12	; 0x0c
    2036:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__subsf3>
    203a:	9b 01       	movw	r18, r22
    203c:	ac 01       	movw	r20, r24
    203e:	c2 01       	movw	r24, r4
    2040:	b1 01       	movw	r22, r2
    2042:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    2046:	7b 01       	movw	r14, r22
    2048:	8c 01       	movw	r16, r24
    204a:	6d 81       	ldd	r22, Y+5	; 0x05
    204c:	7e 81       	ldd	r23, Y+6	; 0x06
    204e:	8f 81       	ldd	r24, Y+7	; 0x07
    2050:	98 85       	ldd	r25, Y+8	; 0x08
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	50 e4       	ldi	r21, 0x40	; 64
    205a:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    205e:	9b 01       	movw	r18, r22
    2060:	ac 01       	movw	r20, r24
    2062:	c8 01       	movw	r24, r16
    2064:	b7 01       	movw	r22, r14
    2066:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    206a:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <ceil>
    206e:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
    2072:	69 83       	std	Y+1, r22	; 0x01
    2074:	7a 83       	std	Y+2, r23	; 0x02
    2076:	8b 83       	std	Y+3, r24	; 0x03
    2078:	9c 83       	std	Y+4, r25	; 0x04
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	a0 e0       	ldi	r26, 0x00	; 0
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	9b cf       	rjmp	.-202    	; 0x1fba <calculate_trapezoid_for_block+0x1d6>

00002084 <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    2084:	ef 92       	push	r14
    2086:	ff 92       	push	r15
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    2090:	80 91 0e 05 	lds	r24, 0x050E
    2094:	90 91 0f 05 	lds	r25, 0x050F
    2098:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    209a:	e8 2e       	mov	r14, r24
    209c:	ff 24       	eor	r15, r15
    209e:	e7 fc       	sbrc	r14, 7
    20a0:	f0 94       	com	r15
    20a2:	80 91 0c 05 	lds	r24, 0x050C
    20a6:	90 91 0d 05 	lds	r25, 0x050D
    20aa:	e8 16       	cp	r14, r24
    20ac:	f9 06       	cpc	r15, r25
    20ae:	e1 f1       	breq	.+120    	; 0x2128 <planner_recalculate_trapezoids+0xa4>
    20b0:	e0 e0       	ldi	r30, 0x00	; 0
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <planner_recalculate_trapezoids+0x34>
    20b6:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    20b8:	89 e4       	ldi	r24, 0x49	; 73
    20ba:	28 02       	muls	r18, r24
    20bc:	e0 01       	movw	r28, r0
    20be:	11 24       	eor	r1, r1
    20c0:	ce 5c       	subi	r28, 0xCE	; 206
    20c2:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    20c4:	30 97       	sbiw	r30, 0x00	; 0
    20c6:	59 f0       	breq	.+22     	; 0x20de <planner_recalculate_trapezoids+0x5a>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    20c8:	41 a9       	ldd	r20, Z+49	; 0x31
    20ca:	52 a9       	ldd	r21, Z+50	; 0x32
    20cc:	63 a9       	ldd	r22, Z+51	; 0x33
    20ce:	74 a9       	ldd	r23, Z+52	; 0x34
    20d0:	09 a9       	ldd	r16, Y+49	; 0x31
    20d2:	1a a9       	ldd	r17, Y+50	; 0x32
    20d4:	2b a9       	ldd	r18, Y+51	; 0x33
    20d6:	3c a9       	ldd	r19, Y+52	; 0x34
    20d8:	cf 01       	movw	r24, r30
    20da:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    20de:	c7 01       	movw	r24, r14
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	6a e0       	ldi	r22, 0x0A	; 10
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
    20ea:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    20ec:	e8 2e       	mov	r14, r24
    20ee:	ff 24       	eor	r15, r15
    20f0:	e7 fc       	sbrc	r14, 7
    20f2:	f0 94       	com	r15
    20f4:	80 91 0c 05 	lds	r24, 0x050C
    20f8:	90 91 0d 05 	lds	r25, 0x050D
    20fc:	e8 16       	cp	r14, r24
    20fe:	f9 06       	cpc	r15, r25
    2100:	d1 f6       	brne	.-76     	; 0x20b6 <planner_recalculate_trapezoids+0x32>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    2102:	ce 01       	movw	r24, r28
    2104:	0e 94 81 0b 	call	0x1702	; 0x1702 <factor_for_safe_speed>
    2108:	8b 01       	movw	r16, r22
    210a:	9c 01       	movw	r18, r24
    210c:	49 a9       	ldd	r20, Y+49	; 0x31
    210e:	5a a9       	ldd	r21, Y+50	; 0x32
    2110:	6b a9       	ldd	r22, Y+51	; 0x33
    2112:	7c a9       	ldd	r23, Y+52	; 0x34
    2114:	ce 01       	movw	r24, r28
    2116:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <calculate_trapezoid_for_block>
}
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	ef 90       	pop	r14
    2126:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2128:	c0 e0       	ldi	r28, 0x00	; 0
    212a:	d0 e0       	ldi	r29, 0x00	; 0
    212c:	ea cf       	rjmp	.-44     	; 0x2102 <planner_recalculate_trapezoids+0x7e>

0000212e <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    212e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <planner_reverse_pass>
  planner_forward_pass();
    2132:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <planner_forward_pass>
  planner_recalculate_trapezoids();
    2136:	0e 94 42 10 	call	0x2084	; 0x2084 <planner_recalculate_trapezoids>
}
    213a:	08 95       	ret

0000213c <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    213c:	2f 92       	push	r2
    213e:	3f 92       	push	r3
    2140:	4f 92       	push	r4
    2142:	5f 92       	push	r5
    2144:	6f 92       	push	r6
    2146:	7f 92       	push	r7
    2148:	8f 92       	push	r8
    214a:	9f 92       	push	r9
    214c:	af 92       	push	r10
    214e:	bf 92       	push	r11
    2150:	cf 92       	push	r12
    2152:	df 92       	push	r13
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	cc 54       	subi	r28, 0x4C	; 76
    2166:	d0 40       	sbci	r29, 0x00	; 0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	3b 01       	movw	r6, r22
    2174:	4c 01       	movw	r8, r24
    2176:	23 96       	adiw	r28, 0x03	; 3
    2178:	2c af       	std	Y+60, r18	; 0x3c
    217a:	3d af       	std	Y+61, r19	; 0x3d
    217c:	4e af       	std	Y+62, r20	; 0x3e
    217e:	5f af       	std	Y+63, r21	; 0x3f
    2180:	23 97       	sbiw	r28, 0x03	; 3
    2182:	27 96       	adiw	r28, 0x07	; 7
    2184:	ec ae       	std	Y+60, r14	; 0x3c
    2186:	fd ae       	std	Y+61, r15	; 0x3d
    2188:	0e af       	std	Y+62, r16	; 0x3e
    218a:	1f af       	std	Y+63, r17	; 0x3f
    218c:	27 97       	sbiw	r28, 0x07	; 7
	printPgmString(PSTR("z = "));
	printFloat( z );
	printPgmString(PSTR("\r\n"));
#endif
  
  if( gHomed == FALSE ) 
    218e:	80 91 55 05 	lds	r24, 0x0555
    2192:	88 23       	and	r24, r24
    2194:	d1 f4       	brne	.+52     	; 0x21ca <plan_buffer_line+0x8e>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    2196:	c4 5b       	subi	r28, 0xB4	; 180
    2198:	df 4f       	sbci	r29, 0xFF	; 255
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	7f 90       	pop	r7
    21be:	6f 90       	pop	r6
    21c0:	5f 90       	pop	r5
    21c2:	4f 90       	pop	r4
    21c4:	3f 90       	pop	r3
    21c6:	2f 90       	pop	r2
    21c8:	08 95       	ret
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    21ca:	c4 01       	movw	r24, r8
    21cc:	b3 01       	movw	r22, r6
    21ce:	20 91 94 06 	lds	r18, 0x0694
    21d2:	30 91 95 06 	lds	r19, 0x0695
    21d6:	40 91 96 06 	lds	r20, 0x0696
    21da:	50 91 97 06 	lds	r21, 0x0697
    21de:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    21e2:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    21e6:	7b 01       	movw	r14, r22
    21e8:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    21ea:	20 91 98 06 	lds	r18, 0x0698
    21ee:	30 91 99 06 	lds	r19, 0x0699
    21f2:	40 91 9a 06 	lds	r20, 0x069A
    21f6:	50 91 9b 06 	lds	r21, 0x069B
    21fa:	2b af       	std	Y+59, r18	; 0x3b
    21fc:	3c af       	std	Y+60, r19	; 0x3c
    21fe:	4d af       	std	Y+61, r20	; 0x3d
    2200:	5e af       	std	Y+62, r21	; 0x3e
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2202:	40 91 9c 06 	lds	r20, 0x069C
    2206:	50 91 9d 06 	lds	r21, 0x069D
    220a:	60 91 9e 06 	lds	r22, 0x069E
    220e:	70 91 9f 06 	lds	r23, 0x069F
    2212:	4f ab       	std	Y+55, r20	; 0x37
    2214:	58 af       	std	Y+56, r21	; 0x38
    2216:	69 af       	std	Y+57, r22	; 0x39
    2218:	7a af       	std	Y+58, r23	; 0x3a
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    221a:	20 90 a0 06 	lds	r2, 0x06A0
    221e:	30 90 a1 06 	lds	r3, 0x06A1
    2222:	40 90 a2 06 	lds	r4, 0x06A2
    2226:	50 90 a3 06 	lds	r5, 0x06A3
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    222a:	80 91 0c 05 	lds	r24, 0x050C
    222e:	90 91 0d 05 	lds	r25, 0x050D
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	6a e0       	ldi	r22, 0x0A	; 10
    2236:	70 e0       	ldi	r23, 0x00	; 0
    2238:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
    223c:	28 96       	adiw	r28, 0x08	; 8
    223e:	8f af       	std	Y+63, r24	; 0x3f
    2240:	28 97       	sbiw	r28, 0x08	; 8
    2242:	29 96       	adiw	r28, 0x09	; 9
    2244:	9f af       	std	Y+63, r25	; 0x3f
    2246:	29 97       	sbiw	r28, 0x09	; 9
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    2248:	20 91 0e 05 	lds	r18, 0x050E
    224c:	30 91 0f 05 	lds	r19, 0x050F
    2250:	29 96       	adiw	r28, 0x09	; 9
    2252:	6e ad       	ldd	r22, Y+62	; 0x3e
    2254:	7f ad       	ldd	r23, Y+63	; 0x3f
    2256:	29 97       	sbiw	r28, 0x09	; 9
    2258:	26 17       	cp	r18, r22
    225a:	37 07       	cpc	r19, r23
    225c:	71 f4       	brne	.+28     	; 0x227a <__stack+0x7b>
    225e:	83 b7       	in	r24, 0x33	; 51
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	83 bf       	out	0x33, r24	; 51
    2264:	88 95       	sleep
    2266:	83 b7       	in	r24, 0x33	; 51
    2268:	8e 7f       	andi	r24, 0xFE	; 254
    226a:	83 bf       	out	0x33, r24	; 51
    226c:	80 91 0e 05 	lds	r24, 0x050E
    2270:	90 91 0f 05 	lds	r25, 0x050F
    2274:	82 17       	cp	r24, r18
    2276:	93 07       	cpc	r25, r19
    2278:	91 f3       	breq	.-28     	; 0x225e <__stack+0x5f>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    227a:	20 91 0c 05 	lds	r18, 0x050C
    227e:	30 91 0d 05 	lds	r19, 0x050D
    2282:	c9 01       	movw	r24, r18
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	dc 01       	movw	r26, r24
    2292:	aa 0f       	add	r26, r26
    2294:	bb 1f       	adc	r27, r27
    2296:	aa 0f       	add	r26, r26
    2298:	bb 1f       	adc	r27, r27
    229a:	aa 0f       	add	r26, r26
    229c:	bb 1f       	adc	r27, r27
    229e:	a8 0f       	add	r26, r24
    22a0:	b9 1f       	adc	r27, r25
    22a2:	a2 0f       	add	r26, r18
    22a4:	b3 1f       	adc	r27, r19
    22a6:	ae 5c       	subi	r26, 0xCE	; 206
    22a8:	bd 4f       	sbci	r27, 0xFD	; 253
    22aa:	be ab       	std	Y+54, r27	; 0x36
    22ac:	ad ab       	std	Y+53, r26	; 0x35
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    22ae:	80 91 10 05 	lds	r24, 0x0510
    22b2:	90 91 11 05 	lds	r25, 0x0511
    22b6:	a0 91 12 05 	lds	r26, 0x0512
    22ba:	b0 91 13 05 	lds	r27, 0x0513
    22be:	37 01       	movw	r6, r14
    22c0:	48 01       	movw	r8, r16
    22c2:	68 1a       	sub	r6, r24
    22c4:	79 0a       	sbc	r7, r25
    22c6:	8a 0a       	sbc	r8, r26
    22c8:	9b 0a       	sbc	r9, r27
    22ca:	97 fc       	sbrc	r9, 7
    22cc:	0a c3       	rjmp	.+1556   	; 0x28e2 <__stack+0x6e3>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    22ce:	c2 01       	movw	r24, r4
    22d0:	b1 01       	movw	r22, r2
    22d2:	a6 01       	movw	r20, r12
    22d4:	95 01       	movw	r18, r10
    22d6:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    22da:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    22de:	6d 87       	std	Y+13, r22	; 0x0d
    22e0:	7e 87       	std	Y+14, r23	; 0x0e
    22e2:	8f 87       	std	Y+15, r24	; 0x0f
    22e4:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    22e6:	6f a9       	ldd	r22, Y+55	; 0x37
    22e8:	78 ad       	ldd	r23, Y+56	; 0x38
    22ea:	89 ad       	ldd	r24, Y+57	; 0x39
    22ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    22ee:	27 96       	adiw	r28, 0x07	; 7
    22f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    22f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    22f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    22f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    22f8:	27 97       	sbiw	r28, 0x07	; 7
    22fa:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    22fe:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    2302:	69 87       	std	Y+9, r22	; 0x09
    2304:	7a 87       	std	Y+10, r23	; 0x0a
    2306:	8b 87       	std	Y+11, r24	; 0x0b
    2308:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    230a:	6b ad       	ldd	r22, Y+59	; 0x3b
    230c:	7c ad       	ldd	r23, Y+60	; 0x3c
    230e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2310:	9e ad       	ldd	r25, Y+62	; 0x3e
    2312:	23 96       	adiw	r28, 0x03	; 3
    2314:	2c ad       	ldd	r18, Y+60	; 0x3c
    2316:	3d ad       	ldd	r19, Y+61	; 0x3d
    2318:	4e ad       	ldd	r20, Y+62	; 0x3e
    231a:	5f ad       	ldd	r21, Y+63	; 0x3f
    231c:	23 97       	sbiw	r28, 0x03	; 3
    231e:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    2322:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    2326:	6d 83       	std	Y+5, r22	; 0x05
    2328:	7e 83       	std	Y+6, r23	; 0x06
    232a:	8f 83       	std	Y+7, r24	; 0x07
    232c:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    232e:	e9 82       	std	Y+1, r14	; 0x01
    2330:	fa 82       	std	Y+2, r15	; 0x02
    2332:	0b 83       	std	Y+3, r16	; 0x03
    2334:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2336:	ed a9       	ldd	r30, Y+53	; 0x35
    2338:	fe a9       	ldd	r31, Y+54	; 0x36
    233a:	60 82       	st	Z, r6
    233c:	71 82       	std	Z+1, r7	; 0x01
    233e:	82 82       	std	Z+2, r8	; 0x02
    2340:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2342:	ad 80       	ldd	r10, Y+5	; 0x05
    2344:	be 80       	ldd	r11, Y+6	; 0x06
    2346:	cf 80       	ldd	r12, Y+7	; 0x07
    2348:	d8 84       	ldd	r13, Y+8	; 0x08
    234a:	80 91 14 05 	lds	r24, 0x0514
    234e:	90 91 15 05 	lds	r25, 0x0515
    2352:	a0 91 16 05 	lds	r26, 0x0516
    2356:	b0 91 17 05 	lds	r27, 0x0517
    235a:	a6 01       	movw	r20, r12
    235c:	95 01       	movw	r18, r10
    235e:	28 1b       	sub	r18, r24
    2360:	39 0b       	sbc	r19, r25
    2362:	4a 0b       	sbc	r20, r26
    2364:	5b 0b       	sbc	r21, r27
    2366:	da 01       	movw	r26, r20
    2368:	c9 01       	movw	r24, r18
    236a:	57 fd       	sbrc	r21, 7
    236c:	cb c2       	rjmp	.+1430   	; 0x2904 <__stack+0x705>
    236e:	ed a9       	ldd	r30, Y+53	; 0x35
    2370:	fe a9       	ldd	r31, Y+54	; 0x36
    2372:	84 83       	std	Z+4, r24	; 0x04
    2374:	95 83       	std	Z+5, r25	; 0x05
    2376:	a6 83       	std	Z+6, r26	; 0x06
    2378:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    237a:	20 90 18 05 	lds	r2, 0x0518
    237e:	30 90 19 05 	lds	r3, 0x0519
    2382:	40 90 1a 05 	lds	r4, 0x051A
    2386:	50 90 1b 05 	lds	r5, 0x051B
    238a:	69 84       	ldd	r6, Y+9	; 0x09
    238c:	7a 84       	ldd	r7, Y+10	; 0x0a
    238e:	8b 84       	ldd	r8, Y+11	; 0x0b
    2390:	9c 84       	ldd	r9, Y+12	; 0x0c
    2392:	d4 01       	movw	r26, r8
    2394:	c3 01       	movw	r24, r6
    2396:	82 19       	sub	r24, r2
    2398:	93 09       	sbc	r25, r3
    239a:	a4 09       	sbc	r26, r4
    239c:	b5 09       	sbc	r27, r5
    239e:	b7 fd       	sbrc	r27, 7
    23a0:	a9 c2       	rjmp	.+1362   	; 0x28f4 <__stack+0x6f5>
    23a2:	ed a9       	ldd	r30, Y+53	; 0x35
    23a4:	fe a9       	ldd	r31, Y+54	; 0x36
    23a6:	80 87       	std	Z+8, r24	; 0x08
    23a8:	91 87       	std	Z+9, r25	; 0x09
    23aa:	a2 87       	std	Z+10, r26	; 0x0a
    23ac:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    23ae:	20 91 1c 05 	lds	r18, 0x051C
    23b2:	30 91 1d 05 	lds	r19, 0x051D
    23b6:	40 91 1e 05 	lds	r20, 0x051E
    23ba:	50 91 1f 05 	lds	r21, 0x051F
    23be:	29 8b       	std	Y+17, r18	; 0x11
    23c0:	3a 8b       	std	Y+18, r19	; 0x12
    23c2:	4b 8b       	std	Y+19, r20	; 0x13
    23c4:	5c 8b       	std	Y+20, r21	; 0x14
    23c6:	4d 85       	ldd	r20, Y+13	; 0x0d
    23c8:	5e 85       	ldd	r21, Y+14	; 0x0e
    23ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    23cc:	78 89       	ldd	r23, Y+16	; 0x10
    23ce:	2d 96       	adiw	r28, 0x0d	; 13
    23d0:	4c af       	std	Y+60, r20	; 0x3c
    23d2:	5d af       	std	Y+61, r21	; 0x3d
    23d4:	6e af       	std	Y+62, r22	; 0x3e
    23d6:	7f af       	std	Y+63, r23	; 0x3f
    23d8:	2d 97       	sbiw	r28, 0x0d	; 13
    23da:	7a 01       	movw	r14, r20
    23dc:	8b 01       	movw	r16, r22
    23de:	69 89       	ldd	r22, Y+17	; 0x11
    23e0:	7a 89       	ldd	r23, Y+18	; 0x12
    23e2:	8b 89       	ldd	r24, Y+19	; 0x13
    23e4:	9c 89       	ldd	r25, Y+20	; 0x14
    23e6:	e6 1a       	sub	r14, r22
    23e8:	f7 0a       	sbc	r15, r23
    23ea:	08 0b       	sbc	r16, r24
    23ec:	19 0b       	sbc	r17, r25
    23ee:	17 fd       	sbrc	r17, 7
    23f0:	6f c2       	rjmp	.+1246   	; 0x28d0 <__stack+0x6d1>
    23f2:	ad a9       	ldd	r26, Y+53	; 0x35
    23f4:	be a9       	ldd	r27, Y+54	; 0x36
    23f6:	1c 96       	adiw	r26, 0x0c	; 12
    23f8:	ed 92       	st	X+, r14
    23fa:	fd 92       	st	X+, r15
    23fc:	0d 93       	st	X+, r16
    23fe:	1c 93       	st	X, r17
    2400:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    2402:	18 96       	adiw	r26, 0x08	; 8
    2404:	2d 91       	ld	r18, X+
    2406:	3d 91       	ld	r19, X+
    2408:	4d 91       	ld	r20, X+
    240a:	5c 91       	ld	r21, X
    240c:	1b 97       	sbiw	r26, 0x0b	; 11
    240e:	fd 01       	movw	r30, r26
    2410:	84 81       	ldd	r24, Z+4	; 0x04
    2412:	95 81       	ldd	r25, Z+5	; 0x05
    2414:	a6 81       	ldd	r26, Z+6	; 0x06
    2416:	b7 81       	ldd	r27, Z+7	; 0x07
    2418:	82 17       	cp	r24, r18
    241a:	93 07       	cpc	r25, r19
    241c:	a4 07       	cpc	r26, r20
    241e:	b5 07       	cpc	r27, r21
    2420:	48 f1       	brcs	.+82     	; 0x2474 <__stack+0x275>
    2422:	ed a9       	ldd	r30, Y+53	; 0x35
    2424:	fe a9       	ldd	r31, Y+54	; 0x36
    2426:	20 81       	ld	r18, Z
    2428:	31 81       	ldd	r19, Z+1	; 0x01
    242a:	42 81       	ldd	r20, Z+2	; 0x02
    242c:	53 81       	ldd	r21, Z+3	; 0x03
    242e:	82 17       	cp	r24, r18
    2430:	93 07       	cpc	r25, r19
    2432:	a4 07       	cpc	r26, r20
    2434:	b5 07       	cpc	r27, r21
    2436:	b0 f0       	brcs	.+44     	; 0x2464 <__stack+0x265>
    2438:	8e 15       	cp	r24, r14
    243a:	9f 05       	cpc	r25, r15
    243c:	a0 07       	cpc	r26, r16
    243e:	b1 07       	cpc	r27, r17
    2440:	70 f0       	brcs	.+28     	; 0x245e <__stack+0x25f>
    2442:	ed a9       	ldd	r30, Y+53	; 0x35
    2444:	fe a9       	ldd	r31, Y+54	; 0x36
    2446:	81 8b       	std	Z+17, r24	; 0x11
    2448:	92 8b       	std	Z+18, r25	; 0x12
    244a:	a3 8b       	std	Z+19, r26	; 0x13
    244c:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	a1 05       	cpc	r26, r1
    2452:	b1 05       	cpc	r27, r1
    2454:	91 f4       	brne	.+36     	; 0x247a <__stack+0x27b>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
#endif

// needs for GUI ACK
 	ackHost = 'X';
    2456:	88 e5       	ldi	r24, 0x58	; 88
    2458:	80 93 54 05 	sts	0x0554, r24
    245c:	9c ce       	rjmp	.-712    	; 0x2196 <plan_buffer_line+0x5a>
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    245e:	d8 01       	movw	r26, r16
    2460:	c7 01       	movw	r24, r14
    2462:	ef cf       	rjmp	.-34     	; 0x2442 <__stack+0x243>
    2464:	da 01       	movw	r26, r20
    2466:	c9 01       	movw	r24, r18
    2468:	8e 15       	cp	r24, r14
    246a:	9f 05       	cpc	r25, r15
    246c:	a0 07       	cpc	r26, r16
    246e:	b1 07       	cpc	r27, r17
    2470:	40 f7       	brcc	.-48     	; 0x2442 <__stack+0x243>
    2472:	f5 cf       	rjmp	.-22     	; 0x245e <__stack+0x25f>
    2474:	da 01       	movw	r26, r20
    2476:	c9 01       	movw	r24, r18
    2478:	d4 cf       	rjmp	.-88     	; 0x2422 <__stack+0x223>
// needs for GUI ACK
 	ackHost = 'X';
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    247a:	29 81       	ldd	r18, Y+1	; 0x01
    247c:	3a 81       	ldd	r19, Y+2	; 0x02
    247e:	4b 81       	ldd	r20, Y+3	; 0x03
    2480:	5c 81       	ldd	r21, Y+4	; 0x04
    2482:	2d 8f       	std	Y+29, r18	; 0x1d
    2484:	3e 8f       	std	Y+30, r19	; 0x1e
    2486:	4f 8f       	std	Y+31, r20	; 0x1f
    2488:	58 a3       	std	Y+32, r21	; 0x20
    248a:	80 91 10 05 	lds	r24, 0x0510
    248e:	90 91 11 05 	lds	r25, 0x0511
    2492:	a0 91 12 05 	lds	r26, 0x0512
    2496:	b0 91 13 05 	lds	r27, 0x0513
    249a:	28 1b       	sub	r18, r24
    249c:	39 0b       	sbc	r19, r25
    249e:	4a 0b       	sbc	r20, r26
    24a0:	5b 0b       	sbc	r21, r27
    24a2:	ca 01       	movw	r24, r20
    24a4:	b9 01       	movw	r22, r18
    24a6:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    24aa:	20 91 94 06 	lds	r18, 0x0694
    24ae:	30 91 95 06 	lds	r19, 0x0695
    24b2:	40 91 96 06 	lds	r20, 0x0696
    24b6:	50 91 97 06 	lds	r21, 0x0697
    24ba:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    24be:	69 ab       	std	Y+49, r22	; 0x31
    24c0:	7a ab       	std	Y+50, r23	; 0x32
    24c2:	8b ab       	std	Y+51, r24	; 0x33
    24c4:	9c ab       	std	Y+52, r25	; 0x34
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    24c6:	a9 a2       	std	Y+33, r10	; 0x21
    24c8:	ba a2       	std	Y+34, r11	; 0x22
    24ca:	cb a2       	std	Y+35, r12	; 0x23
    24cc:	dc a2       	std	Y+36, r13	; 0x24
    24ce:	80 91 14 05 	lds	r24, 0x0514
    24d2:	90 91 15 05 	lds	r25, 0x0515
    24d6:	a0 91 16 05 	lds	r26, 0x0516
    24da:	b0 91 17 05 	lds	r27, 0x0517
    24de:	a6 01       	movw	r20, r12
    24e0:	95 01       	movw	r18, r10
    24e2:	28 1b       	sub	r18, r24
    24e4:	39 0b       	sbc	r19, r25
    24e6:	4a 0b       	sbc	r20, r26
    24e8:	5b 0b       	sbc	r21, r27
    24ea:	ca 01       	movw	r24, r20
    24ec:	b9 01       	movw	r22, r18
    24ee:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    24f2:	20 91 98 06 	lds	r18, 0x0698
    24f6:	30 91 99 06 	lds	r19, 0x0699
    24fa:	40 91 9a 06 	lds	r20, 0x069A
    24fe:	50 91 9b 06 	lds	r21, 0x069B
    2502:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    2506:	6d a7       	std	Y+45, r22	; 0x2d
    2508:	7e a7       	std	Y+46, r23	; 0x2e
    250a:	8f a7       	std	Y+47, r24	; 0x2f
    250c:	98 ab       	std	Y+48, r25	; 0x30
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    250e:	69 8e       	std	Y+25, r6	; 0x19
    2510:	7a 8e       	std	Y+26, r7	; 0x1a
    2512:	8b 8e       	std	Y+27, r8	; 0x1b
    2514:	9c 8e       	std	Y+28, r9	; 0x1c
    2516:	c4 01       	movw	r24, r8
    2518:	b3 01       	movw	r22, r6
    251a:	62 19       	sub	r22, r2
    251c:	73 09       	sbc	r23, r3
    251e:	84 09       	sbc	r24, r4
    2520:	95 09       	sbc	r25, r5
    2522:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    2526:	20 91 9c 06 	lds	r18, 0x069C
    252a:	30 91 9d 06 	lds	r19, 0x069D
    252e:	40 91 9e 06 	lds	r20, 0x069E
    2532:	50 91 9f 06 	lds	r21, 0x069F
    2536:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    253a:	69 a7       	std	Y+41, r22	; 0x29
    253c:	7a a7       	std	Y+42, r23	; 0x2a
    253e:	8b a7       	std	Y+43, r24	; 0x2b
    2540:	9c a7       	std	Y+44, r25	; 0x2c
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2542:	2d 96       	adiw	r28, 0x0d	; 13
    2544:	4c ad       	ldd	r20, Y+60	; 0x3c
    2546:	5d ad       	ldd	r21, Y+61	; 0x3d
    2548:	6e ad       	ldd	r22, Y+62	; 0x3e
    254a:	7f ad       	ldd	r23, Y+63	; 0x3f
    254c:	2d 97       	sbiw	r28, 0x0d	; 13
    254e:	4d 8b       	std	Y+21, r20	; 0x15
    2550:	5e 8b       	std	Y+22, r21	; 0x16
    2552:	6f 8b       	std	Y+23, r22	; 0x17
    2554:	78 8f       	std	Y+24, r23	; 0x18
    2556:	cb 01       	movw	r24, r22
    2558:	ba 01       	movw	r22, r20
    255a:	29 89       	ldd	r18, Y+17	; 0x11
    255c:	3a 89       	ldd	r19, Y+18	; 0x12
    255e:	4b 89       	ldd	r20, Y+19	; 0x13
    2560:	5c 89       	ldd	r21, Y+20	; 0x14
    2562:	62 1b       	sub	r22, r18
    2564:	73 0b       	sbc	r23, r19
    2566:	84 0b       	sbc	r24, r20
    2568:	95 0b       	sbc	r25, r21
    256a:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    256e:	20 91 a0 06 	lds	r18, 0x06A0
    2572:	30 91 a1 06 	lds	r19, 0x06A1
    2576:	40 91 a2 06 	lds	r20, 0x06A2
    257a:	50 91 a3 06 	lds	r21, 0x06A3
    257e:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    2582:	6d a3       	std	Y+37, r22	; 0x25
    2584:	7e a3       	std	Y+38, r23	; 0x26
    2586:	8f a3       	std	Y+39, r24	; 0x27
    2588:	98 a7       	std	Y+40, r25	; 0x28
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    258a:	69 a9       	ldd	r22, Y+49	; 0x31
    258c:	7a a9       	ldd	r23, Y+50	; 0x32
    258e:	8b a9       	ldd	r24, Y+51	; 0x33
    2590:	9c a9       	ldd	r25, Y+52	; 0x34
    2592:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <square>
    2596:	3b 01       	movw	r6, r22
    2598:	4c 01       	movw	r8, r24
    259a:	6d a5       	ldd	r22, Y+45	; 0x2d
    259c:	7e a5       	ldd	r23, Y+46	; 0x2e
    259e:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a0:	98 a9       	ldd	r25, Y+48	; 0x30
    25a2:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <square>
    25a6:	7b 01       	movw	r14, r22
    25a8:	8c 01       	movw	r16, r24
    25aa:	69 a5       	ldd	r22, Y+41	; 0x29
    25ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    25ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    25b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25b2:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <square>
    25b6:	5b 01       	movw	r10, r22
    25b8:	6c 01       	movw	r12, r24
    25ba:	6d a1       	ldd	r22, Y+37	; 0x25
    25bc:	7e a1       	ldd	r23, Y+38	; 0x26
    25be:	8f a1       	ldd	r24, Y+39	; 0x27
    25c0:	98 a5       	ldd	r25, Y+40	; 0x28
    25c2:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <square>
    25c6:	1b 01       	movw	r2, r22
    25c8:	2c 01       	movw	r4, r24
    25ca:	c4 01       	movw	r24, r8
    25cc:	b3 01       	movw	r22, r6
    25ce:	a8 01       	movw	r20, r16
    25d0:	97 01       	movw	r18, r14
    25d2:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    25d6:	a6 01       	movw	r20, r12
    25d8:	95 01       	movw	r18, r10
    25da:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    25de:	a2 01       	movw	r20, r4
    25e0:	91 01       	movw	r18, r2
    25e2:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <__addsf3>
    25e6:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <sqrt>
    25ea:	ad a9       	ldd	r26, Y+53	; 0x35
    25ec:	be a9       	ldd	r27, Y+54	; 0x36
    25ee:	9d 96       	adiw	r26, 0x2d	; 45
    25f0:	6d 93       	st	X+, r22
    25f2:	7d 93       	st	X+, r23
    25f4:	8d 93       	st	X+, r24
    25f6:	9c 93       	st	X, r25
    25f8:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    25fa:	a8 96       	adiw	r28, 0x28	; 40
    25fc:	ee ad       	ldd	r30, Y+62	; 0x3e
    25fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2600:	a8 97       	sbiw	r28, 0x28	; 40
    2602:	ef 2b       	or	r30, r31
    2604:	09 f0       	breq	.+2      	; 0x2608 <__stack+0x409>
    2606:	86 c1       	rjmp	.+780    	; 0x2914 <__stack+0x715>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2608:	a6 96       	adiw	r28, 0x26	; 38
    260a:	2c ad       	ldd	r18, Y+60	; 0x3c
    260c:	3d ad       	ldd	r19, Y+61	; 0x3d
    260e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2610:	5f ad       	ldd	r21, Y+63	; 0x3f
    2612:	a6 97       	sbiw	r28, 0x26	; 38
    2614:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	34 e2       	ldi	r19, 0x24	; 36
    261c:	44 e7       	ldi	r20, 0x74	; 116
    261e:	59 e4       	ldi	r21, 0x49	; 73
    2620:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2624:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <lround>
    2628:	ac 01       	movw	r20, r24
    262a:	cb 01       	movw	r24, r22
    262c:	da 01       	movw	r26, r20
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2632:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatunsisf>
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	60 ec       	ldi	r22, 0xC0	; 192
    263c:	71 ee       	ldi	r23, 0xE1	; 225
    263e:	84 e6       	ldi	r24, 0x64	; 100
    2640:	9c e4       	ldi	r25, 0x4C	; 76
    2642:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    2646:	7b 01       	movw	r14, r22
    2648:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    264a:	69 a9       	ldd	r22, Y+49	; 0x31
    264c:	7a a9       	ldd	r23, Y+50	; 0x32
    264e:	8b a9       	ldd	r24, Y+51	; 0x33
    2650:	9c a9       	ldd	r25, Y+52	; 0x34
    2652:	a8 01       	movw	r20, r16
    2654:	97 01       	movw	r18, r14
    2656:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    265a:	ad a9       	ldd	r26, Y+53	; 0x35
    265c:	be a9       	ldd	r27, Y+54	; 0x36
    265e:	59 96       	adiw	r26, 0x19	; 25
    2660:	6d 93       	st	X+, r22
    2662:	7d 93       	st	X+, r23
    2664:	8d 93       	st	X+, r24
    2666:	9c 93       	st	X, r25
    2668:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    266a:	6d a5       	ldd	r22, Y+45	; 0x2d
    266c:	7e a5       	ldd	r23, Y+46	; 0x2e
    266e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2670:	98 a9       	ldd	r25, Y+48	; 0x30
    2672:	a8 01       	movw	r20, r16
    2674:	97 01       	movw	r18, r14
    2676:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    267a:	ed a9       	ldd	r30, Y+53	; 0x35
    267c:	fe a9       	ldd	r31, Y+54	; 0x36
    267e:	65 8f       	std	Z+29, r22	; 0x1d
    2680:	76 8f       	std	Z+30, r23	; 0x1e
    2682:	87 8f       	std	Z+31, r24	; 0x1f
    2684:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    2686:	69 a5       	ldd	r22, Y+41	; 0x29
    2688:	7a a5       	ldd	r23, Y+42	; 0x2a
    268a:	8b a5       	ldd	r24, Y+43	; 0x2b
    268c:	9c a5       	ldd	r25, Y+44	; 0x2c
    268e:	a8 01       	movw	r20, r16
    2690:	97 01       	movw	r18, r14
    2692:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    2696:	ad a9       	ldd	r26, Y+53	; 0x35
    2698:	be a9       	ldd	r27, Y+54	; 0x36
    269a:	91 96       	adiw	r26, 0x21	; 33
    269c:	6d 93       	st	X+, r22
    269e:	7d 93       	st	X+, r23
    26a0:	8d 93       	st	X+, r24
    26a2:	9c 93       	st	X, r25
    26a4:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    26a6:	6d a1       	ldd	r22, Y+37	; 0x25
    26a8:	7e a1       	ldd	r23, Y+38	; 0x26
    26aa:	8f a1       	ldd	r24, Y+39	; 0x27
    26ac:	98 a5       	ldd	r25, Y+40	; 0x28
    26ae:	a8 01       	movw	r20, r16
    26b0:	97 01       	movw	r18, r14
    26b2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    26b6:	ed a9       	ldd	r30, Y+53	; 0x35
    26b8:	fe a9       	ldd	r31, Y+54	; 0x36
    26ba:	65 a3       	std	Z+37, r22	; 0x25
    26bc:	76 a3       	std	Z+38, r23	; 0x26
    26be:	87 a3       	std	Z+39, r24	; 0x27
    26c0:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    26c2:	65 a5       	ldd	r22, Z+45	; 0x2d
    26c4:	76 a5       	ldd	r23, Z+46	; 0x2e
    26c6:	87 a5       	ldd	r24, Z+47	; 0x2f
    26c8:	90 a9       	ldd	r25, Z+48	; 0x30
    26ca:	a8 01       	movw	r20, r16
    26cc:	97 01       	movw	r18, r14
    26ce:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    26d2:	ad a9       	ldd	r26, Y+53	; 0x35
    26d4:	be a9       	ldd	r27, Y+54	; 0x36
    26d6:	99 96       	adiw	r26, 0x29	; 41
    26d8:	6d 93       	st	X+, r22
    26da:	7d 93       	st	X+, r23
    26dc:	8d 93       	st	X+, r24
    26de:	9c 93       	st	X, r25
    26e0:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    26e2:	51 96       	adiw	r26, 0x11	; 17
    26e4:	6d 91       	ld	r22, X+
    26e6:	7d 91       	ld	r23, X+
    26e8:	8d 91       	ld	r24, X+
    26ea:	9c 91       	ld	r25, X
    26ec:	54 97       	sbiw	r26, 0x14	; 20
    26ee:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    26f2:	5b 01       	movw	r10, r22
    26f4:	6c 01       	movw	r12, r24
    26f6:	a8 01       	movw	r20, r16
    26f8:	97 01       	movw	r18, r14
    26fa:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    26fe:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <ceil>
    2702:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
    2706:	3b 01       	movw	r6, r22
    2708:	4c 01       	movw	r8, r24
    270a:	ed a9       	ldd	r30, Y+53	; 0x35
    270c:	fe a9       	ldd	r31, Y+54	; 0x36
    270e:	65 8b       	std	Z+21, r22	; 0x15
    2710:	76 8b       	std	Z+22, r23	; 0x16
    2712:	87 8b       	std	Z+23, r24	; 0x17
    2714:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 e0       	ldi	r26, 0x00	; 0
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	81 ab       	std	Z+49, r24	; 0x31
    2720:	92 ab       	std	Z+50, r25	; 0x32
    2722:	a3 ab       	std	Z+51, r26	; 0x33
    2724:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2726:	60 91 b2 06 	lds	r22, 0x06B2
    272a:	70 91 b3 06 	lds	r23, 0x06B3
    272e:	80 91 b4 06 	lds	r24, 0x06B4
    2732:	90 91 b5 06 	lds	r25, 0x06B5
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e7       	ldi	r20, 0x70	; 112
    273c:	52 e4       	ldi	r21, 0x42	; 66
    273e:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e2       	ldi	r20, 0x20	; 32
    2748:	52 e4       	ldi	r21, 0x42	; 66
    274a:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    274e:	7b 01       	movw	r14, r22
    2750:	8c 01       	movw	r16, r24
    2752:	ad a9       	ldd	r26, Y+53	; 0x35
    2754:	be a9       	ldd	r27, Y+54	; 0x36
    2756:	9d 96       	adiw	r26, 0x2d	; 45
    2758:	6d 91       	ld	r22, X+
    275a:	7d 91       	ld	r23, X+
    275c:	8d 91       	ld	r24, X+
    275e:	9c 91       	ld	r25, X
    2760:	d0 97       	sbiw	r26, 0x30	; 48
    2762:	a6 01       	movw	r20, r12
    2764:	95 01       	movw	r18, r10
    2766:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	c8 01       	movw	r24, r16
    2770:	b7 01       	movw	r22, r14
    2772:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    2776:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <ceil>
    277a:	0d a9       	ldd	r16, Y+53	; 0x35
    277c:	1e a9       	ldd	r17, Y+54	; 0x36
    277e:	03 5c       	subi	r16, 0xC3	; 195
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
    2786:	f8 01       	movw	r30, r16
    2788:	60 83       	st	Z, r22
    278a:	71 83       	std	Z+1, r23	; 0x01
    278c:	82 83       	std	Z+2, r24	; 0x02
    278e:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    2790:	20 91 20 05 	lds	r18, 0x0520
    2794:	22 23       	and	r18, r18
    2796:	09 f0       	breq	.+2      	; 0x279a <__stack+0x59b>
    2798:	ca c0       	rjmp	.+404    	; 0x292e <__stack+0x72f>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    279a:	ad a9       	ldd	r26, Y+53	; 0x35
    279c:	be a9       	ldd	r27, Y+54	; 0x36
    279e:	d5 96       	adiw	r26, 0x35	; 53
    27a0:	6d 92       	st	X+, r6
    27a2:	7d 92       	st	X+, r7
    27a4:	8d 92       	st	X+, r8
    27a6:	9c 92       	st	X, r9
    27a8:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    27aa:	fd 01       	movw	r30, r26
    27ac:	61 ae       	std	Z+57, r6	; 0x39
    27ae:	72 ae       	std	Z+58, r7	; 0x3a
    27b0:	83 ae       	std	Z+59, r8	; 0x3b
    27b2:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    27b4:	ef 5b       	subi	r30, 0xBF	; 191
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	10 82       	st	Z, r1
    27ba:	11 82       	std	Z+1, r1	; 0x01
    27bc:	12 82       	std	Z+2, r1	; 0x02
    27be:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    27c0:	ad 01       	movw	r20, r26
    27c2:	4b 5b       	subi	r20, 0xBB	; 187
    27c4:	5f 4f       	sbci	r21, 0xFF	; 255
    27c6:	fd 01       	movw	r30, r26
    27c8:	81 89       	ldd	r24, Z+17	; 0x11
    27ca:	92 89       	ldd	r25, Z+18	; 0x12
    27cc:	a3 89       	ldd	r26, Z+19	; 0x13
    27ce:	b4 89       	ldd	r27, Z+20	; 0x14
    27d0:	fa 01       	movw	r30, r20
    27d2:	80 83       	st	Z, r24
    27d4:	91 83       	std	Z+1, r25	; 0x01
    27d6:	a2 83       	std	Z+2, r26	; 0x02
    27d8:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    27da:	d8 01       	movw	r26, r16
    27dc:	1d 92       	st	X+, r1
    27de:	1d 92       	st	X+, r1
    27e0:	1d 92       	st	X+, r1
    27e2:	1c 92       	st	X, r1
    27e4:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    27e6:	ed a9       	ldd	r30, Y+53	; 0x35
    27e8:	fe a9       	ldd	r31, Y+54	; 0x36
    27ea:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    27ec:	80 91 10 05 	lds	r24, 0x0510
    27f0:	90 91 11 05 	lds	r25, 0x0511
    27f4:	a0 91 12 05 	lds	r26, 0x0512
    27f8:	b0 91 13 05 	lds	r27, 0x0513
    27fc:	4d 8d       	ldd	r20, Y+29	; 0x1d
    27fe:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2800:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2802:	78 a1       	ldd	r23, Y+32	; 0x20
    2804:	48 17       	cp	r20, r24
    2806:	59 07       	cpc	r21, r25
    2808:	6a 07       	cpc	r22, r26
    280a:	7b 07       	cpc	r23, r27
    280c:	14 f4       	brge	.+4      	; 0x2812 <__stack+0x613>
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2812:	80 91 14 05 	lds	r24, 0x0514
    2816:	90 91 15 05 	lds	r25, 0x0515
    281a:	a0 91 16 05 	lds	r26, 0x0516
    281e:	b0 91 17 05 	lds	r27, 0x0517
    2822:	49 a1       	ldd	r20, Y+33	; 0x21
    2824:	5a a1       	ldd	r21, Y+34	; 0x22
    2826:	6b a1       	ldd	r22, Y+35	; 0x23
    2828:	7c a1       	ldd	r23, Y+36	; 0x24
    282a:	48 17       	cp	r20, r24
    282c:	59 07       	cpc	r21, r25
    282e:	6a 07       	cpc	r22, r26
    2830:	7b 07       	cpc	r23, r27
    2832:	44 f4       	brge	.+16     	; 0x2844 <__stack+0x645>
    2834:	ad a9       	ldd	r26, Y+53	; 0x35
    2836:	be a9       	ldd	r27, Y+54	; 0x36
    2838:	50 96       	adiw	r26, 0x10	; 16
    283a:	8c 91       	ld	r24, X
    283c:	50 97       	sbiw	r26, 0x10	; 16
    283e:	88 60       	ori	r24, 0x08	; 8
    2840:	50 96       	adiw	r26, 0x10	; 16
    2842:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2844:	80 91 18 05 	lds	r24, 0x0518
    2848:	90 91 19 05 	lds	r25, 0x0519
    284c:	a0 91 1a 05 	lds	r26, 0x051A
    2850:	b0 91 1b 05 	lds	r27, 0x051B
    2854:	49 8d       	ldd	r20, Y+25	; 0x19
    2856:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2858:	6b 8d       	ldd	r22, Y+27	; 0x1b
    285a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    285c:	48 17       	cp	r20, r24
    285e:	59 07       	cpc	r21, r25
    2860:	6a 07       	cpc	r22, r26
    2862:	7b 07       	cpc	r23, r27
    2864:	44 f4       	brge	.+16     	; 0x2876 <__stack+0x677>
    2866:	ad a9       	ldd	r26, Y+53	; 0x35
    2868:	be a9       	ldd	r27, Y+54	; 0x36
    286a:	50 96       	adiw	r26, 0x10	; 16
    286c:	8c 91       	ld	r24, X
    286e:	50 97       	sbiw	r26, 0x10	; 16
    2870:	80 64       	ori	r24, 0x40	; 64
    2872:	50 96       	adiw	r26, 0x10	; 16
    2874:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2876:	4d 89       	ldd	r20, Y+21	; 0x15
    2878:	5e 89       	ldd	r21, Y+22	; 0x16
    287a:	6f 89       	ldd	r22, Y+23	; 0x17
    287c:	78 8d       	ldd	r23, Y+24	; 0x18
    287e:	89 89       	ldd	r24, Y+17	; 0x11
    2880:	9a 89       	ldd	r25, Y+18	; 0x12
    2882:	ab 89       	ldd	r26, Y+19	; 0x13
    2884:	bc 89       	ldd	r27, Y+20	; 0x14
    2886:	48 17       	cp	r20, r24
    2888:	59 07       	cpc	r21, r25
    288a:	6a 07       	cpc	r22, r26
    288c:	7b 07       	cpc	r23, r27
    288e:	44 f4       	brge	.+16     	; 0x28a0 <__stack+0x6a1>
    2890:	ad a9       	ldd	r26, Y+53	; 0x35
    2892:	be a9       	ldd	r27, Y+54	; 0x36
    2894:	50 96       	adiw	r26, 0x10	; 16
    2896:	8c 91       	ld	r24, X
    2898:	50 97       	sbiw	r26, 0x10	; 16
    289a:	80 68       	ori	r24, 0x80	; 128
    289c:	50 96       	adiw	r26, 0x10	; 16
    289e:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    28a0:	29 96       	adiw	r28, 0x09	; 9
    28a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    28a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    28a6:	29 97       	sbiw	r28, 0x09	; 9
    28a8:	f0 93 0d 05 	sts	0x050D, r31
    28ac:	e0 93 0c 05 	sts	0x050C, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    28b0:	a0 e1       	ldi	r26, 0x10	; 16
    28b2:	b5 e0       	ldi	r27, 0x05	; 5
    28b4:	fe 01       	movw	r30, r28
    28b6:	31 96       	adiw	r30, 0x01	; 1
    28b8:	80 e1       	ldi	r24, 0x10	; 16
    28ba:	01 90       	ld	r0, Z+
    28bc:	0d 92       	st	X+, r0
    28be:	81 50       	subi	r24, 0x01	; 1
    28c0:	e1 f7       	brne	.-8      	; 0x28ba <__stack+0x6bb>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    28c2:	22 23       	and	r18, r18
    28c4:	11 f0       	breq	.+4      	; 0x28ca <__stack+0x6cb>
    28c6:	0e 94 97 10 	call	0x212e	; 0x212e <planner_recalculate>
  st_wake_up();
    28ca:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <st_wake_up>
    28ce:	63 cc       	rjmp	.-1850   	; 0x2196 <plan_buffer_line+0x5a>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    28d0:	10 95       	com	r17
    28d2:	00 95       	com	r16
    28d4:	f0 94       	com	r15
    28d6:	e0 94       	com	r14
    28d8:	e1 1c       	adc	r14, r1
    28da:	f1 1c       	adc	r15, r1
    28dc:	01 1d       	adc	r16, r1
    28de:	11 1d       	adc	r17, r1
    28e0:	88 cd       	rjmp	.-1264   	; 0x23f2 <__stack+0x1f3>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    28e2:	90 94       	com	r9
    28e4:	80 94       	com	r8
    28e6:	70 94       	com	r7
    28e8:	60 94       	com	r6
    28ea:	61 1c       	adc	r6, r1
    28ec:	71 1c       	adc	r7, r1
    28ee:	81 1c       	adc	r8, r1
    28f0:	91 1c       	adc	r9, r1
    28f2:	ed cc       	rjmp	.-1574   	; 0x22ce <__stack+0xcf>
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    28f4:	b0 95       	com	r27
    28f6:	a0 95       	com	r26
    28f8:	90 95       	com	r25
    28fa:	81 95       	neg	r24
    28fc:	9f 4f       	sbci	r25, 0xFF	; 255
    28fe:	af 4f       	sbci	r26, 0xFF	; 255
    2900:	bf 4f       	sbci	r27, 0xFF	; 255
    2902:	4f cd       	rjmp	.-1378   	; 0x23a2 <__stack+0x1a3>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2904:	b0 95       	com	r27
    2906:	a0 95       	com	r26
    2908:	90 95       	com	r25
    290a:	81 95       	neg	r24
    290c:	9f 4f       	sbci	r25, 0xFF	; 255
    290e:	af 4f       	sbci	r26, 0xFF	; 255
    2910:	bf 4f       	sbci	r27, 0xFF	; 255
    2912:	2d cd       	rjmp	.-1446   	; 0x236e <__stack+0x16f>
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2914:	60 ec       	ldi	r22, 0xC0	; 192
    2916:	71 ee       	ldi	r23, 0xE1	; 225
    2918:	84 e6       	ldi	r24, 0x64	; 100
    291a:	9c e4       	ldi	r25, 0x4C	; 76
    291c:	a6 96       	adiw	r28, 0x26	; 38
    291e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2920:	3d ad       	ldd	r19, Y+61	; 0x3d
    2922:	4e ad       	ldd	r20, Y+62	; 0x3e
    2924:	5f ad       	ldd	r21, Y+63	; 0x3f
    2926:	a6 97       	sbiw	r28, 0x26	; 38
    2928:	0e 94 94 2c 	call	0x5928	; 0x5928 <__divsf3>
    292c:	7b ce       	rjmp	.-778    	; 0x2624 <__stack+0x425>
  block->rate_delta = ceil(
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    292e:	8d a9       	ldd	r24, Y+53	; 0x35
    2930:	9e a9       	ldd	r25, Y+54	; 0x36
    2932:	0e 94 81 0b 	call	0x1702	; 0x1702 <factor_for_safe_speed>
    2936:	8b 01       	movw	r16, r22
    2938:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    293a:	8d a9       	ldd	r24, Y+53	; 0x35
    293c:	9e a9       	ldd	r25, Y+54	; 0x36
    293e:	b9 01       	movw	r22, r18
    2940:	a8 01       	movw	r20, r16
    2942:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <calculate_trapezoid_for_block>
    2946:	29 81       	ldd	r18, Y+1	; 0x01
    2948:	3a 81       	ldd	r19, Y+2	; 0x02
    294a:	4b 81       	ldd	r20, Y+3	; 0x03
    294c:	5c 81       	ldd	r21, Y+4	; 0x04
    294e:	2d 8f       	std	Y+29, r18	; 0x1d
    2950:	3e 8f       	std	Y+30, r19	; 0x1e
    2952:	4f 8f       	std	Y+31, r20	; 0x1f
    2954:	58 a3       	std	Y+32, r21	; 0x20
    2956:	4d 81       	ldd	r20, Y+5	; 0x05
    2958:	5e 81       	ldd	r21, Y+6	; 0x06
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	49 a3       	std	Y+33, r20	; 0x21
    2960:	5a a3       	std	Y+34, r21	; 0x22
    2962:	6b a3       	std	Y+35, r22	; 0x23
    2964:	7c a3       	std	Y+36, r23	; 0x24
    2966:	69 85       	ldd	r22, Y+9	; 0x09
    2968:	7a 85       	ldd	r23, Y+10	; 0x0a
    296a:	8b 85       	ldd	r24, Y+11	; 0x0b
    296c:	9c 85       	ldd	r25, Y+12	; 0x0c
    296e:	69 8f       	std	Y+25, r22	; 0x19
    2970:	7a 8f       	std	Y+26, r23	; 0x1a
    2972:	8b 8f       	std	Y+27, r24	; 0x1b
    2974:	9c 8f       	std	Y+28, r25	; 0x1c
    2976:	8d 85       	ldd	r24, Y+13	; 0x0d
    2978:	9e 85       	ldd	r25, Y+14	; 0x0e
    297a:	af 85       	ldd	r26, Y+15	; 0x0f
    297c:	b8 89       	ldd	r27, Y+16	; 0x10
    297e:	8d 8b       	std	Y+21, r24	; 0x15
    2980:	9e 8b       	std	Y+22, r25	; 0x16
    2982:	af 8b       	std	Y+23, r26	; 0x17
    2984:	b8 8f       	std	Y+24, r27	; 0x18
    2986:	20 91 1c 05 	lds	r18, 0x051C
    298a:	30 91 1d 05 	lds	r19, 0x051D
    298e:	40 91 1e 05 	lds	r20, 0x051E
    2992:	50 91 1f 05 	lds	r21, 0x051F
    2996:	29 8b       	std	Y+17, r18	; 0x11
    2998:	3a 8b       	std	Y+18, r19	; 0x12
    299a:	4b 8b       	std	Y+19, r20	; 0x13
    299c:	5c 8b       	std	Y+20, r21	; 0x14
    299e:	20 91 20 05 	lds	r18, 0x0520
    29a2:	21 cf       	rjmp	.-446    	; 0x27e6 <__stack+0x5e7>

000029a4 <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    29a8:	15 e4       	ldi	r17, 0x45	; 69
		case GCSTATUS_OK:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("\nGCSTATUS_OK\n")); 
#endif
			// ack OK
			ackHost = 'O';
    29aa:	0f e4       	ldi	r16, 0x4F	; 79

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    29ac:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <serialRead>
    29b0:	98 2f       	mov	r25, r24
    29b2:	8f 3f       	cpi	r24, 0xFF	; 255
    29b4:	e1 f0       	breq	.+56     	; 0x29ee <sp_process+0x4a>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    29b6:	20 91 53 05 	lds	r18, 0x0553
    29ba:	22 23       	and	r18, r18
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <sp_process+0x22>
    29be:	9a 30       	cpi	r25, 0x0A	; 10
    29c0:	c9 f0       	breq	.+50     	; 0x29f4 <sp_process+0x50>
    29c2:	9d 30       	cpi	r25, 0x0D	; 13
    29c4:	b9 f0       	breq	.+46     	; 0x29f4 <sp_process+0x50>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    29c6:	91 32       	cpi	r25, 0x21	; 33
    29c8:	8c f3       	brlt	.-30     	; 0x29ac <sp_process+0x8>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    29ca:	89 2f       	mov	r24, r25
    29cc:	81 56       	subi	r24, 0x61	; 97
    29ce:	8a 31       	cpi	r24, 0x1A	; 26
    29d0:	68 f5       	brcc	.+90     	; 0x2a2c <sp_process+0x88>
      line[char_counter++] = c-'a'+'A';
    29d2:	e2 2f       	mov	r30, r18
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	ef 5d       	subi	r30, 0xDF	; 223
    29d8:	fa 4f       	sbci	r31, 0xFA	; 250
    29da:	90 52       	subi	r25, 0x20	; 32
    29dc:	90 83       	st	Z, r25
    29de:	2f 5f       	subi	r18, 0xFF	; 255
    29e0:	20 93 53 05 	sts	0x0553, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    29e4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <serialRead>
    29e8:	98 2f       	mov	r25, r24
    29ea:	8f 3f       	cpi	r24, 0xFF	; 255
    29ec:	21 f7       	brne	.-56     	; 0x29b6 <sp_process+0x12>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    29f4:	e2 2f       	mov	r30, r18
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	ef 5d       	subi	r30, 0xDF	; 223
    29fa:	fa 4f       	sbci	r31, 0xFA	; 250
    29fc:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    29fe:	81 e2       	ldi	r24, 0x21	; 33
    2a00:	95 e0       	ldi	r25, 0x05	; 5
    2a02:	0e 94 81 05 	call	0xb02	; 0xb02 <gc_execute_line>
    2a06:	98 2f       	mov	r25, r24

// this needs to be fixed so it can reply correctly
static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    2a08:	80 91 55 05 	lds	r24, 0x0555
    2a0c:	88 23       	and	r24, r24
    2a0e:	b9 f0       	breq	.+46     	; 0x2a3e <sp_process+0x9a>
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    2a10:	10 93 54 05 	sts	0x0554, r17

	switch(status_code) {          
    2a14:	94 30       	cpi	r25, 0x04	; 4
    2a16:	48 f5       	brcc	.+82     	; 0x2a6a <sp_process+0xc6>
    2a18:	91 30       	cpi	r25, 0x01	; 1
    2a1a:	18 f0       	brcs	.+6      	; 0x2a22 <sp_process+0x7e>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a1c:	10 92 53 05 	sts	0x0553, r1
    2a20:	c5 cf       	rjmp	.-118    	; 0x29ac <sp_process+0x8>
		case GCSTATUS_OK:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("\nGCSTATUS_OK\n")); 
#endif
			// ack OK
			ackHost = 'O';
    2a22:	00 93 54 05 	sts	0x0554, r16
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a26:	10 92 53 05 	sts	0x0553, r1
    2a2a:	c0 cf       	rjmp	.-128    	; 0x29ac <sp_process+0x8>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    2a2c:	e2 2f       	mov	r30, r18
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	ef 5d       	subi	r30, 0xDF	; 223
    2a32:	fa 4f       	sbci	r31, 0xFA	; 250
    2a34:	90 83       	st	Z, r25
    2a36:	2f 5f       	subi	r18, 0xFF	; 255
    2a38:	20 93 53 05 	sts	0x0553, r18
    2a3c:	b7 cf       	rjmp	.-146    	; 0x29ac <sp_process+0x8>
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    2a3e:	10 93 54 05 	sts	0x0554, r17


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {

		vacuum(0);
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
		head_down(0);
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
		atc_fire(0);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    2a5a:	10 92 55 05 	sts	0x0555, r1

		// stops all but home
		set_busy(TRUE);
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a64:	10 92 53 05 	sts	0x0553, r1
    2a68:	a1 cf       	rjmp	.-190    	; 0x29ac <sp_process+0x8>

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';

	switch(status_code) {          
    2a6a:	96 30       	cpi	r25, 0x06	; 6
    2a6c:	19 f0       	breq	.+6      	; 0x2a74 <sp_process+0xd0>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    2a6e:	99 23       	and	r25, r25
    2a70:	a9 f2       	breq	.-86     	; 0x2a1c <sp_process+0x78>
    2a72:	e7 cf       	rjmp	.-50     	; 0x2a42 <sp_process+0x9e>
#endif
			break;
		case GCSTATUS_NO_ACK:

			// no ACK
			ackHost = 0;
    2a74:	10 92 54 05 	sts	0x0554, r1
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a78:	10 92 53 05 	sts	0x0553, r1
    2a7c:	97 cf       	rjmp	.-210    	; 0x29ac <sp_process+0x8>

00002a7e <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	76 e9       	ldi	r23, 0x96	; 150
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <beginSerial>
}
    2a8a:	08 95       	ret

00002a8c <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e2       	ldi	r26, 0x20	; 32
    2a92:	b2 e4       	ldi	r27, 0x42	; 66
    2a94:	80 93 94 06 	sts	0x0694, r24
    2a98:	90 93 95 06 	sts	0x0695, r25
    2a9c:	a0 93 96 06 	sts	0x0696, r26
    2aa0:	b0 93 97 06 	sts	0x0697, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2aa4:	80 93 98 06 	sts	0x0698, r24
    2aa8:	90 93 99 06 	sts	0x0699, r25
    2aac:	a0 93 9a 06 	sts	0x069A, r26
    2ab0:	b0 93 9b 06 	sts	0x069B, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2ab4:	80 93 9c 06 	sts	0x069C, r24
    2ab8:	90 93 9d 06 	sts	0x069D, r25
    2abc:	a0 93 9e 06 	sts	0x069E, r26
    2ac0:	b0 93 9f 06 	sts	0x069F, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2ac4:	80 93 a0 06 	sts	0x06A0, r24
    2ac8:	90 93 a1 06 	sts	0x06A1, r25
    2acc:	a0 93 a2 06 	sts	0x06A2, r26
    2ad0:	b0 93 a3 06 	sts	0x06A3, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2ad4:	86 e0       	ldi	r24, 0x06	; 6
    2ad6:	80 93 a5 06 	sts	0x06A5, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	a6 e9       	ldi	r26, 0x96	; 150
    2ae0:	b5 e4       	ldi	r27, 0x45	; 69
    2ae2:	80 93 a6 06 	sts	0x06A6, r24
    2ae6:	90 93 a7 06 	sts	0x06A7, r25
    2aea:	a0 93 a8 06 	sts	0x06A8, r26
    2aee:	b0 93 a9 06 	sts	0x06A9, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a0 ef       	ldi	r26, 0xF0	; 240
    2af8:	b3 e4       	ldi	r27, 0x43	; 67
    2afa:	80 93 aa 06 	sts	0x06AA, r24
    2afe:	90 93 ab 06 	sts	0x06AB, r25
    2b02:	a0 93 ac 06 	sts	0x06AC, r26
    2b06:	b0 93 ad 06 	sts	0x06AD, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	a0 e4       	ldi	r26, 0x40	; 64
    2b10:	b2 e4       	ldi	r27, 0x42	; 66
    2b12:	80 93 b2 06 	sts	0x06B2, r24
    2b16:	90 93 b3 06 	sts	0x06B3, r25
    2b1a:	a0 93 b4 06 	sts	0x06B4, r26
    2b1e:	b0 93 b5 06 	sts	0x06B5, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2b22:	8d ec       	ldi	r24, 0xCD	; 205
    2b24:	9c ec       	ldi	r25, 0xCC	; 204
    2b26:	ac ec       	ldi	r26, 0xCC	; 204
    2b28:	bd e3       	ldi	r27, 0x3D	; 61
    2b2a:	80 93 ae 06 	sts	0x06AE, r24
    2b2e:	90 93 af 06 	sts	0x06AF, r25
    2b32:	a0 93 b0 06 	sts	0x06B0, r26
    2b36:	b0 93 b1 06 	sts	0x06B1, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a8 e4       	ldi	r26, 0x48	; 72
    2b40:	b2 e4       	ldi	r27, 0x42	; 66
    2b42:	80 93 b6 06 	sts	0x06B6, r24
    2b46:	90 93 b7 06 	sts	0x06B7, r25
    2b4a:	a0 93 b8 06 	sts	0x06B8, r26
    2b4e:	b0 93 b9 06 	sts	0x06B9, r27
}
    2b52:	08 95       	ret

00002b54 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 3a 03 	call	0x674	; 0x674 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2b5c:	87 36       	cpi	r24, 0x67	; 103
    2b5e:	31 f0       	breq	.+12     	; 0x2b6c <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2b60:	81 30       	cpi	r24, 0x01	; 1
    2b62:	a9 f0       	breq	.+42     	; 0x2b8e <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2b68:	c9 01       	movw	r24, r18
    2b6a:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2b6c:	84 e9       	ldi	r24, 0x94	; 148
    2b6e:	96 e0       	ldi	r25, 0x06	; 6
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	46 e2       	ldi	r20, 0x26	; 38
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	0e 94 9f 03 	call	0x73e	; 0x73e <memcpy_from_eeprom_with_checksum>
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	89 2b       	or	r24, r25
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <read_settings+0x30>
    2b82:	21 e0       	ldi	r18, 0x01	; 1
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	28 27       	eor	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2b8a:	c9 01       	movw	r24, r18
    2b8c:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2b8e:	84 e9       	ldi	r24, 0x94	; 148
    2b90:	96 e0       	ldi	r25, 0x06	; 6
    2b92:	61 e0       	ldi	r22, 0x01	; 1
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	4b e1       	ldi	r20, 0x1B	; 27
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	0e 94 9f 03 	call	0x73e	; 0x73e <memcpy_from_eeprom_with_checksum>
    2b9e:	89 2b       	or	r24, r25
    2ba0:	09 f3       	breq	.-62     	; 0x2b64 <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	a0 e4       	ldi	r26, 0x40	; 64
    2ba8:	b2 e4       	ldi	r27, 0x42	; 66
    2baa:	80 93 b2 06 	sts	0x06B2, r24
    2bae:	90 93 b3 06 	sts	0x06B3, r25
    2bb2:	a0 93 b4 06 	sts	0x06B4, r26
    2bb6:	b0 93 b5 06 	sts	0x06B5, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a8 e4       	ldi	r26, 0x48	; 72
    2bc0:	b2 e4       	ldi	r27, 0x42	; 66
    2bc2:	80 93 b6 06 	sts	0x06B6, r24
    2bc6:	90 93 b7 06 	sts	0x06B7, r25
    2bca:	a0 93 b8 06 	sts	0x06B8, r26
    2bce:	b0 93 b9 06 	sts	0x06B9, r27
    2bd2:	21 e0       	ldi	r18, 0x01	; 1
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	c8 cf       	rjmp	.-112    	; 0x2b68 <read_settings+0x14>

00002bd8 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	67 e6       	ldi	r22, 0x67	; 103
    2bde:	0e 94 42 03 	call	0x684	; 0x684 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	64 e9       	ldi	r22, 0x94	; 148
    2be8:	76 e0       	ldi	r23, 0x06	; 6
    2bea:	46 e2       	ldi	r20, 0x26	; 38
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	0e 94 63 03 	call	0x6c6	; 0x6c6 <memcpy_to_eeprom_with_checksum>
}
    2bf2:	08 95       	ret

00002bf4 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2bf4:	fc 01       	movw	r30, r24
  switch(parameter) {
    2bf6:	86 30       	cpi	r24, 0x06	; 6
    2bf8:	91 05       	cpc	r25, r1
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <settings_store_setting+0xa>
    2bfc:	6d c0       	rjmp	.+218    	; 0x2cd8 <settings_store_setting+0xe4>
    2bfe:	87 30       	cpi	r24, 0x07	; 7
    2c00:	91 05       	cpc	r25, r1
    2c02:	a4 f0       	brlt	.+40     	; 0x2c2c <settings_store_setting+0x38>
    2c04:	88 30       	cpi	r24, 0x08	; 8
    2c06:	91 05       	cpc	r25, r1
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <settings_store_setting+0x18>
    2c0a:	48 c0       	rjmp	.+144    	; 0x2c9c <settings_store_setting+0xa8>
    2c0c:	88 30       	cpi	r24, 0x08	; 8
    2c0e:	91 05       	cpc	r25, r1
    2c10:	b4 f1       	brlt	.+108    	; 0x2c7e <settings_store_setting+0x8a>
    2c12:	89 30       	cpi	r24, 0x09	; 9
    2c14:	91 05       	cpc	r25, r1
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <settings_store_setting+0x26>
    2c18:	7b c0       	rjmp	.+246    	; 0x2d10 <settings_store_setting+0x11c>
    2c1a:	e8 5e       	subi	r30, 0xE8	; 232
    2c1c:	f3 40       	sbci	r31, 0x03	; 3
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <settings_store_setting+0x2e>
    2c20:	6a c0       	rjmp	.+212    	; 0x2cf6 <settings_store_setting+0x102>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2c22:	88 e6       	ldi	r24, 0x68	; 104
    2c24:	93 e0       	ldi	r25, 0x03	; 3
    2c26:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    2c2a:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    2c2c:	84 30       	cpi	r24, 0x04	; 4
    2c2e:	91 05       	cpc	r25, r1
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <settings_store_setting+0x40>
    2c32:	43 c0       	rjmp	.+134    	; 0x2cba <settings_store_setting+0xc6>
    2c34:	85 30       	cpi	r24, 0x05	; 5
    2c36:	91 05       	cpc	r25, r1
    2c38:	9c f4       	brge	.+38     	; 0x2c60 <settings_store_setting+0x6c>
    2c3a:	97 fd       	sbrc	r25, 7
    2c3c:	f2 cf       	rjmp	.-28     	; 0x2c22 <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2c3e:	ee 0f       	add	r30, r30
    2c40:	ff 1f       	adc	r31, r31
    2c42:	ee 0f       	add	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	ec 56       	subi	r30, 0x6C	; 108
    2c48:	f9 4f       	sbci	r31, 0xF9	; 249
    2c4a:	40 83       	st	Z, r20
    2c4c:	51 83       	std	Z+1, r21	; 0x01
    2c4e:	62 83       	std	Z+2, r22	; 0x02
    2c50:	73 83       	std	Z+3, r23	; 0x03
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c52:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c56:	83 e5       	ldi	r24, 0x53	; 83
    2c58:	93 e0       	ldi	r25, 0x03	; 3
    2c5a:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    2c5e:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    2c60:	40 93 a6 06 	sts	0x06A6, r20
    2c64:	50 93 a7 06 	sts	0x06A7, r21
    2c68:	60 93 a8 06 	sts	0x06A8, r22
    2c6c:	70 93 a9 06 	sts	0x06A9, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c70:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c74:	83 e5       	ldi	r24, 0x53	; 83
    2c76:	93 e0       	ldi	r25, 0x03	; 3
    2c78:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    2c7c:	08 95       	ret
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    2c7e:	40 93 ae 06 	sts	0x06AE, r20
    2c82:	50 93 af 06 	sts	0x06AF, r21
    2c86:	60 93 b0 06 	sts	0x06B0, r22
    2c8a:	70 93 b1 06 	sts	0x06B1, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c8e:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c92:	83 e5       	ldi	r24, 0x53	; 83
    2c94:	93 e0       	ldi	r25, 0x03	; 3
    2c96:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    2c9a:	08 95       	ret
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    2c9c:	40 93 b2 06 	sts	0x06B2, r20
    2ca0:	50 93 b3 06 	sts	0x06B3, r21
    2ca4:	60 93 b4 06 	sts	0x06B4, r22
    2ca8:	70 93 b5 06 	sts	0x06B5, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2cac:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2cb0:	83 e5       	ldi	r24, 0x53	; 83
    2cb2:	93 e0       	ldi	r25, 0x03	; 3
    2cb4:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    2cb8:	08 95       	ret
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    2cba:	cb 01       	movw	r24, r22
    2cbc:	ba 01       	movw	r22, r20
    2cbe:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <round>
    2cc2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__fixunssfsi>
    2cc6:	60 93 a5 06 	sts	0x06A5, r22
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2cca:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2cce:	83 e5       	ldi	r24, 0x53	; 83
    2cd0:	93 e0       	ldi	r25, 0x03	; 3
    2cd2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    2cd6:	08 95       	ret
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    2cd8:	40 93 aa 06 	sts	0x06AA, r20
    2cdc:	50 93 ab 06 	sts	0x06AB, r21
    2ce0:	60 93 ac 06 	sts	0x06AC, r22
    2ce4:	70 93 ad 06 	sts	0x06AD, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2ce8:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2cec:	83 e5       	ldi	r24, 0x53	; 83
    2cee:	93 e0       	ldi	r25, 0x03	; 3
    2cf0:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    2cf4:	08 95       	ret
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	ba 01       	movw	r22, r20
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	a9 f0       	breq	.+42     	; 0x2d34 <settings_store_setting+0x140>
    2d0a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <st_enable>
    2d0e:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    2d10:	db 01       	movw	r26, r22
    2d12:	ca 01       	movw	r24, r20
    2d14:	bf 77       	andi	r27, 0x7F	; 127
    2d16:	80 93 b6 06 	sts	0x06B6, r24
    2d1a:	90 93 b7 06 	sts	0x06B7, r25
    2d1e:	a0 93 b8 06 	sts	0x06B8, r26
    2d22:	b0 93 b9 06 	sts	0x06B9, r27
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2d26:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d2a:	83 e5       	ldi	r24, 0x53	; 83
    2d2c:	93 e0       	ldi	r25, 0x03	; 3
    2d2e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    2d32:	08 95       	ret
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    2d34:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <st_disable>
    2d38:	08 95       	ret

00002d3a <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2d3a:	8c e3       	ldi	r24, 0x3C	; 60
    2d3c:	95 e0       	ldi	r25, 0x05	; 5
    2d3e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2d42:	85 e3       	ldi	r24, 0x35	; 53
    2d44:	95 e0       	ldi	r25, 0x05	; 5
    2d46:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printPgmString(PSTR("\r\n"));
    2d4a:	82 e3       	ldi	r24, 0x32	; 50
    2d4c:	95 e0       	ldi	r25, 0x05	; 5
    2d4e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2d52:	8c e2       	ldi	r24, 0x2C	; 44
    2d54:	95 e0       	ldi	r25, 0x05	; 5
    2d56:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2d5a:	60 91 94 06 	lds	r22, 0x0694
    2d5e:	70 91 95 06 	lds	r23, 0x0695
    2d62:	80 91 96 06 	lds	r24, 0x0696
    2d66:	90 91 97 06 	lds	r25, 0x0697
    2d6a:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2d6e:	8c e1       	ldi	r24, 0x1C	; 28
    2d70:	95 e0       	ldi	r25, 0x05	; 5
    2d72:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2d76:	86 e1       	ldi	r24, 0x16	; 22
    2d78:	95 e0       	ldi	r25, 0x05	; 5
    2d7a:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2d7e:	60 91 98 06 	lds	r22, 0x0698
    2d82:	70 91 99 06 	lds	r23, 0x0699
    2d86:	80 91 9a 06 	lds	r24, 0x069A
    2d8a:	90 91 9b 06 	lds	r25, 0x069B
    2d8e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2d92:	86 e0       	ldi	r24, 0x06	; 6
    2d94:	95 e0       	ldi	r25, 0x05	; 5
    2d96:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	95 e0       	ldi	r25, 0x05	; 5
    2d9e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2da2:	60 91 9c 06 	lds	r22, 0x069C
    2da6:	70 91 9d 06 	lds	r23, 0x069D
    2daa:	80 91 9e 06 	lds	r24, 0x069E
    2dae:	90 91 9f 06 	lds	r25, 0x069F
    2db2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2db6:	80 ef       	ldi	r24, 0xF0	; 240
    2db8:	94 e0       	ldi	r25, 0x04	; 4
    2dba:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2dbe:	8a ee       	ldi	r24, 0xEA	; 234
    2dc0:	94 e0       	ldi	r25, 0x04	; 4
    2dc2:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2dc6:	60 91 a0 06 	lds	r22, 0x06A0
    2dca:	70 91 a1 06 	lds	r23, 0x06A1
    2dce:	80 91 a2 06 	lds	r24, 0x06A2
    2dd2:	90 91 a3 06 	lds	r25, 0x06A3
    2dd6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2dda:	88 ed       	ldi	r24, 0xD8	; 216
    2ddc:	94 e0       	ldi	r25, 0x04	; 4
    2dde:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2de2:	82 ed       	ldi	r24, 0xD2	; 210
    2de4:	94 e0       	ldi	r25, 0x04	; 4
    2de6:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printInteger(settings.pulse_microseconds);
    2dea:	60 91 a5 06 	lds	r22, 0x06A5
    2dee:	70 e0       	ldi	r23, 0x00	; 0
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2df8:	85 eb       	ldi	r24, 0xB5	; 181
    2dfa:	94 e0       	ldi	r25, 0x04	; 4
    2dfc:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2e00:	8f ea       	ldi	r24, 0xAF	; 175
    2e02:	94 e0       	ldi	r25, 0x04	; 4
    2e04:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.default_feed_rate);
    2e08:	60 91 a6 06 	lds	r22, 0x06A6
    2e0c:	70 91 a7 06 	lds	r23, 0x06A7
    2e10:	80 91 a8 06 	lds	r24, 0x06A8
    2e14:	90 91 a9 06 	lds	r25, 0x06A9
    2e18:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2e1c:	81 e9       	ldi	r24, 0x91	; 145
    2e1e:	94 e0       	ldi	r25, 0x04	; 4
    2e20:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2e24:	8b e8       	ldi	r24, 0x8B	; 139
    2e26:	94 e0       	ldi	r25, 0x04	; 4
    2e28:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.default_seek_rate);
    2e2c:	60 91 aa 06 	lds	r22, 0x06AA
    2e30:	70 91 ab 06 	lds	r23, 0x06AB
    2e34:	80 91 ac 06 	lds	r24, 0x06AC
    2e38:	90 91 ad 06 	lds	r25, 0x06AD
    2e3c:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2e40:	8d e6       	ldi	r24, 0x6D	; 109
    2e42:	94 e0       	ldi	r25, 0x04	; 4
    2e44:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2e48:	87 e6       	ldi	r24, 0x67	; 103
    2e4a:	94 e0       	ldi	r25, 0x04	; 4
    2e4c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2e50:	60 91 ae 06 	lds	r22, 0x06AE
    2e54:	70 91 af 06 	lds	r23, 0x06AF
    2e58:	80 91 b0 06 	lds	r24, 0x06B0
    2e5c:	90 91 b1 06 	lds	r25, 0x06B1
    2e60:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2e64:	83 e5       	ldi	r24, 0x53	; 83
    2e66:	94 e0       	ldi	r25, 0x04	; 4
    2e68:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2e6c:	8d e4       	ldi	r24, 0x4D	; 77
    2e6e:	94 e0       	ldi	r25, 0x04	; 4
    2e70:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.acceleration);
    2e74:	60 91 b2 06 	lds	r22, 0x06B2
    2e78:	70 91 b3 06 	lds	r23, 0x06B3
    2e7c:	80 91 b4 06 	lds	r24, 0x06B4
    2e80:	90 91 b5 06 	lds	r25, 0x06B5
    2e84:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2e88:	8f e2       	ldi	r24, 0x2F	; 47
    2e8a:	94 e0       	ldi	r25, 0x04	; 4
    2e8c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2e90:	89 e2       	ldi	r24, 0x29	; 41
    2e92:	94 e0       	ldi	r25, 0x04	; 4
    2e94:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printFloat(settings.max_jerk);
    2e98:	60 91 b6 06 	lds	r22, 0x06B6
    2e9c:	70 91 b7 06 	lds	r23, 0x06B7
    2ea0:	80 91 b8 06 	lds	r24, 0x06B8
    2ea4:	90 91 b9 06 	lds	r25, 0x06B9
    2ea8:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2eac:	81 ef       	ldi	r24, 0xF1	; 241
    2eae:	93 e0       	ldi	r25, 0x03	; 3
    2eb0:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2eb4:	88 ee       	ldi	r24, 0xE8	; 232
    2eb6:	93 e0       	ldi	r25, 0x03	; 3
    2eb8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
  printInteger(st_is_enabled());
    2ebc:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <st_is_enabled>
    2ec0:	aa 27       	eor	r26, r26
    2ec2:	97 fd       	sbrc	r25, 7
    2ec4:	a0 95       	com	r26
    2ec6:	ba 2f       	mov	r27, r26
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2ed0:	8f eb       	ldi	r24, 0xBF	; 191
    2ed2:	93 e0       	ldi	r25, 0x03	; 3
    2ed4:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2ed8:	8c e7       	ldi	r24, 0x7C	; 124
    2eda:	93 e0       	ldi	r25, 0x03	; 3
    2edc:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
}
    2ee0:	08 95       	ret

00002ee2 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2ee2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <read_settings>
    2ee6:	89 2b       	or	r24, r25
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <settings_init+0xa>
    2eea:	08 95       	ret
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2eec:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <settings_reset>
    write_settings();
    2ef0:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_settings>
    settings_dump();
    2ef4:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <settings_dump>
    2ef8:	08 95       	ret

00002efa <spindle_init>:
#include <avr/io.h>
#include <util/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2efa:	e1 e0       	ldi	r30, 0x01	; 1
    2efc:	f1 e0       	ldi	r31, 0x01	; 1
    2efe:	80 81       	ld	r24, Z
    2f00:	80 64       	ori	r24, 0x40	; 64
    2f02:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2f04:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2f06:	3e 9a       	sbi	0x07, 6	; 7

}
    2f08:	08 95       	ret

00002f0a <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2f0a:	97 fd       	sbrc	r25, 7
    2f0c:	07 c0       	rjmp	.+14     	; 0x2f1c <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2f0e:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2f10:	80 91 02 01 	lds	r24, 0x0102
    2f14:	80 64       	ori	r24, 0x40	; 64
    2f16:	80 93 02 01 	sts	0x0102, r24
}
    2f1a:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2f1c:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2f1e:	80 91 02 01 	lds	r24, 0x0102
    2f22:	80 64       	ori	r24, 0x40	; 64
    2f24:	80 93 02 01 	sts	0x0102, r24
}
    2f28:	08 95       	ret

00002f2a <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2f2a:	e2 e0       	ldi	r30, 0x02	; 2
    2f2c:	f1 e0       	ldi	r31, 0x01	; 1
    2f2e:	80 81       	ld	r24, Z
    2f30:	8f 7b       	andi	r24, 0xBF	; 191
    2f32:	80 83       	st	Z, r24
}
    2f34:	08 95       	ret

00002f36 <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f36:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f38:	40 e7       	ldi	r20, 0x70	; 112
    2f3a:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2f3c:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f3e:	23 2f       	mov	r18, r19
    2f40:	2a 95       	dec	r18
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2f44:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f46:	fa 01       	movw	r30, r20
    2f48:	31 97       	sbiw	r30, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	2f ef       	ldi	r18, 0xFF	; 255
    2f50:	8f 3f       	cpi	r24, 0xFF	; 255
    2f52:	92 07       	cpc	r25, r18
    2f54:	99 f7       	brne	.-26     	; 0x2f3c <rotate_head+0x6>

}
    2f56:	08 95       	ret

00002f58 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2f58:	ef e6       	ldi	r30, 0x6F	; 111
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	82 60       	ori	r24, 0x02	; 2
    2f60:	80 83       	st	Z, r24
}
    2f62:	08 95       	ret

00002f64 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	90 93 6e 05 	sts	0x056E, r25
    2f6a:	80 93 6d 05 	sts	0x056D, r24
}
    2f6e:	08 95       	ret

00002f70 <get_busy>:

int get_busy( void ) 
{
	return busy;
    2f70:	20 91 6d 05 	lds	r18, 0x056D
    2f74:	30 91 6e 05 	lds	r19, 0x056E
}
    2f78:	c9 01       	movw	r24, r18
    2f7a:	08 95       	ret

00002f7c <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2f7c:	1f 92       	push	r1
    2f7e:	0f 92       	push	r0
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	0f 92       	push	r0
    2f84:	11 24       	eor	r1, r1
    2f86:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2f88:	81 b3       	in	r24, 0x11	; 17
    2f8a:	85 63       	ori	r24, 0x35	; 53
    2f8c:	81 bb       	out	0x11, r24	; 17
}
    2f8e:	8f 91       	pop	r24
    2f90:	0f 90       	pop	r0
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	0f 90       	pop	r0
    2f96:	1f 90       	pop	r1
    2f98:	18 95       	reti

00002f9a <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f9a:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2f9c:	08 95       	ret

00002f9e <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f9e:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2fa0:	08 95       	ret

00002fa2 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2fa2:	3c 99       	sbic	0x07, 4	; 7
    2fa4:	04 c0       	rjmp	.+8      	; 0x2fae <st_is_enabled+0xc>
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2faa:	c9 01       	movw	r24, r18
    2fac:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2fae:	88 b1       	in	r24, 0x08	; 8
    2fb0:	82 95       	swap	r24
    2fb2:	8f 70       	andi	r24, 0x0F	; 15
    2fb4:	80 95       	com	r24
    2fb6:	81 70       	andi	r24, 0x01	; 1
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2fbc:	c9 01       	movw	r24, r18
    2fbe:	08 95       	ret

00002fc0 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2fc0:	60 30       	cpi	r22, 0x00	; 0
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	72 07       	cpc	r23, r18
    2fc6:	21 e0       	ldi	r18, 0x01	; 1
    2fc8:	82 07       	cpc	r24, r18
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	92 07       	cpc	r25, r18
    2fce:	08 f4       	brcc	.+2      	; 0x2fd2 <config_step_timer+0x12>
    2fd0:	5c c0       	rjmp	.+184    	; 0x308a <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    2fd2:	60 30       	cpi	r22, 0x00	; 0
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	72 07       	cpc	r23, r18
    2fd8:	28 e0       	ldi	r18, 0x08	; 8
    2fda:	82 07       	cpc	r24, r18
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	92 07       	cpc	r25, r18
    2fe0:	78 f1       	brcs	.+94     	; 0x3040 <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    2fe2:	60 30       	cpi	r22, 0x00	; 0
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	72 07       	cpc	r23, r18
    2fe8:	20 e4       	ldi	r18, 0x40	; 64
    2fea:	82 07       	cpc	r24, r18
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	92 07       	cpc	r25, r18
    2ff0:	08 f4       	brcc	.+2      	; 0x2ff4 <config_step_timer+0x34>
    2ff2:	51 c0       	rjmp	.+162    	; 0x3096 <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    2ff4:	60 30       	cpi	r22, 0x00	; 0
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	72 07       	cpc	r23, r18
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	82 07       	cpc	r24, r18
    2ffe:	21 e0       	ldi	r18, 0x01	; 1
    3000:	92 07       	cpc	r25, r18
    3002:	08 f4       	brcc	.+2      	; 0x3006 <config_step_timer+0x46>
    3004:	6d c0       	rjmp	.+218    	; 0x30e0 <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    3006:	60 30       	cpi	r22, 0x00	; 0
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	72 07       	cpc	r23, r18
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	82 07       	cpc	r24, r18
    3010:	24 e0       	ldi	r18, 0x04	; 4
    3012:	92 07       	cpc	r25, r18
    3014:	08 f0       	brcs	.+2      	; 0x3018 <config_step_timer+0x58>
    3016:	71 c0       	rjmp	.+226    	; 0x30fa <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    3018:	2a e0       	ldi	r18, 0x0A	; 10
    301a:	96 95       	lsr	r25
    301c:	87 95       	ror	r24
    301e:	77 95       	ror	r23
    3020:	67 95       	ror	r22
    3022:	2a 95       	dec	r18
    3024:	d1 f7       	brne	.-12     	; 0x301a <config_step_timer+0x5a>
    3026:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    3028:	9b 01       	movw	r18, r22
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	8a e0       	ldi	r24, 0x0A	; 10
    3030:	22 0f       	add	r18, r18
    3032:	33 1f       	adc	r19, r19
    3034:	44 1f       	adc	r20, r20
    3036:	55 1f       	adc	r21, r21
    3038:	8a 95       	dec	r24
    303a:	d1 f7       	brne	.-12     	; 0x3030 <config_step_timer+0x70>
    303c:	95 e0       	ldi	r25, 0x05	; 5
    303e:	18 c0       	rjmp	.+48     	; 0x3070 <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    3040:	23 e0       	ldi	r18, 0x03	; 3
    3042:	96 95       	lsr	r25
    3044:	87 95       	ror	r24
    3046:	77 95       	ror	r23
    3048:	67 95       	ror	r22
    304a:	2a 95       	dec	r18
    304c:	d1 f7       	brne	.-12     	; 0x3042 <config_step_timer+0x82>
    304e:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    3050:	9b 01       	movw	r18, r22
    3052:	40 e0       	ldi	r20, 0x00	; 0
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	22 0f       	add	r18, r18
    3058:	33 1f       	adc	r19, r19
    305a:	44 1f       	adc	r20, r20
    305c:	55 1f       	adc	r21, r21
    305e:	22 0f       	add	r18, r18
    3060:	33 1f       	adc	r19, r19
    3062:	44 1f       	adc	r20, r20
    3064:	55 1f       	adc	r21, r21
    3066:	22 0f       	add	r18, r18
    3068:	33 1f       	adc	r19, r19
    306a:	44 1f       	adc	r20, r20
    306c:	55 1f       	adc	r21, r21
    306e:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3070:	80 91 81 00 	lds	r24, 0x0081
    3074:	88 7f       	andi	r24, 0xF8	; 248
    3076:	98 2b       	or	r25, r24
    3078:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    307c:	f0 93 89 00 	sts	0x0089, r31
    3080:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    3084:	b9 01       	movw	r22, r18
    3086:	ca 01       	movw	r24, r20
    3088:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    308a:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    308c:	9b 01       	movw	r18, r22
    308e:	40 e0       	ldi	r20, 0x00	; 0
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	91 e0       	ldi	r25, 0x01	; 1
    3094:	ed cf       	rjmp	.-38     	; 0x3070 <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    3096:	b6 e0       	ldi	r27, 0x06	; 6
    3098:	96 95       	lsr	r25
    309a:	87 95       	ror	r24
    309c:	77 95       	ror	r23
    309e:	67 95       	ror	r22
    30a0:	ba 95       	dec	r27
    30a2:	d1 f7       	brne	.-12     	; 0x3098 <config_step_timer+0xd8>
    30a4:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    30a6:	9b 01       	movw	r18, r22
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	22 0f       	add	r18, r18
    30ae:	33 1f       	adc	r19, r19
    30b0:	44 1f       	adc	r20, r20
    30b2:	55 1f       	adc	r21, r21
    30b4:	22 0f       	add	r18, r18
    30b6:	33 1f       	adc	r19, r19
    30b8:	44 1f       	adc	r20, r20
    30ba:	55 1f       	adc	r21, r21
    30bc:	22 0f       	add	r18, r18
    30be:	33 1f       	adc	r19, r19
    30c0:	44 1f       	adc	r20, r20
    30c2:	55 1f       	adc	r21, r21
    30c4:	22 0f       	add	r18, r18
    30c6:	33 1f       	adc	r19, r19
    30c8:	44 1f       	adc	r20, r20
    30ca:	55 1f       	adc	r21, r21
    30cc:	22 0f       	add	r18, r18
    30ce:	33 1f       	adc	r19, r19
    30d0:	44 1f       	adc	r20, r20
    30d2:	55 1f       	adc	r21, r21
    30d4:	22 0f       	add	r18, r18
    30d6:	33 1f       	adc	r19, r19
    30d8:	44 1f       	adc	r20, r20
    30da:	55 1f       	adc	r21, r21
    30dc:	93 e0       	ldi	r25, 0x03	; 3
    30de:	c8 cf       	rjmp	.-112    	; 0x3070 <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    30e0:	bb 27       	eor	r27, r27
    30e2:	a9 2f       	mov	r26, r25
    30e4:	98 2f       	mov	r25, r24
    30e6:	87 2f       	mov	r24, r23
    30e8:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    30ea:	a0 e0       	ldi	r26, 0x00	; 0
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	22 27       	eor	r18, r18
    30f0:	38 2f       	mov	r19, r24
    30f2:	49 2f       	mov	r20, r25
    30f4:	5a 2f       	mov	r21, r26
    30f6:	94 e0       	ldi	r25, 0x04	; 4
    30f8:	bb cf       	rjmp	.-138    	; 0x3070 <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    30fa:	ef ef       	ldi	r30, 0xFF	; 255
    30fc:	ff ef       	ldi	r31, 0xFF	; 255
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	3c ef       	ldi	r19, 0xFC	; 252
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	50 e0       	ldi	r21, 0x00	; 0
    3106:	95 e0       	ldi	r25, 0x05	; 5
    3108:	b3 cf       	rjmp	.-154    	; 0x3070 <config_step_timer+0xb0>

0000310a <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    310a:	9b 01       	movw	r18, r22
    310c:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    310e:	20 3b       	cpi	r18, 0xB0	; 176
    3110:	84 e0       	ldi	r24, 0x04	; 4
    3112:	38 07       	cpc	r19, r24
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	48 07       	cpc	r20, r24
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	58 07       	cpc	r21, r24
    311c:	78 f4       	brcc	.+30     	; 0x313c <set_step_events_per_minute+0x32>
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	75 e3       	ldi	r23, 0x35	; 53
    3122:	8c e0       	ldi	r24, 0x0C	; 12
    3124:	90 e0       	ldi	r25, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    3126:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <config_step_timer>
    312a:	60 93 6f 05 	sts	0x056F, r22
    312e:	70 93 70 05 	sts	0x0570, r23
    3132:	80 93 71 05 	sts	0x0571, r24
    3136:	90 93 72 05 	sts	0x0572, r25
}
    313a:	08 95       	ret
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    313c:	60 e0       	ldi	r22, 0x00	; 0
    313e:	70 e7       	ldi	r23, 0x70	; 112
    3140:	88 e3       	ldi	r24, 0x38	; 56
    3142:	99 e3       	ldi	r25, 0x39	; 57
    3144:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <__udivmodsi4>
    3148:	c9 01       	movw	r24, r18
    314a:	da 01       	movw	r26, r20
    314c:	bc 01       	movw	r22, r24
    314e:	cd 01       	movw	r24, r26
    3150:	ea cf       	rjmp	.-44     	; 0x3126 <set_step_events_per_minute+0x1c>

00003152 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    3152:	80 b3       	in	r24, 0x10	; 16
    3154:	85 63       	ori	r24, 0x35	; 53
    3156:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    3158:	80 b3       	in	r24, 0x10	; 16
    315a:	8a 6c       	ori	r24, 0xCA	; 202
    315c:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    315e:	81 b3       	in	r24, 0x11	; 17
    3160:	85 63       	ori	r24, 0x35	; 53
    3162:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    3164:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3166:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    3168:	e1 e8       	ldi	r30, 0x81	; 129
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8f 7e       	andi	r24, 0xEF	; 239
    3170:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    3172:	80 81       	ld	r24, Z
    3174:	88 60       	ori	r24, 0x08	; 8
    3176:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    3178:	e0 e8       	ldi	r30, 0x80	; 128
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	8d 7f       	andi	r24, 0xFD	; 253
    3180:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    3182:	80 81       	ld	r24, Z
    3184:	8e 7f       	andi	r24, 0xFE	; 254
    3186:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    3188:	80 81       	ld	r24, Z
    318a:	8f 73       	andi	r24, 0x3F	; 63
    318c:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    318e:	80 81       	ld	r24, Z
    3190:	8f 7c       	andi	r24, 0xCF	; 207
    3192:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    3194:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    319e:	e0 e7       	ldi	r30, 0x70	; 112
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	81 60       	ori	r24, 0x01	; 1
    31a6:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    31a8:	60 e7       	ldi	r22, 0x70	; 112
    31aa:	77 e1       	ldi	r23, 0x17	; 23
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 85 18 	call	0x310a	; 0x310a <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    31b4:	ef e6       	ldi	r30, 0x6F	; 111
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	8d 7f       	andi	r24, 0xFD	; 253
    31bc:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    31be:	10 92 73 05 	sts	0x0573, r1
    31c2:	10 92 74 05 	sts	0x0574, r1
    31c6:	10 92 75 05 	sts	0x0575, r1
    31ca:	10 92 76 05 	sts	0x0576, r1
  
  sei();
    31ce:	78 94       	sei
}
    31d0:	08 95       	ret

000031d2 <xHome>:
}


unsigned char xHome( void ) 
{
	unsigned char homex = bit_is_set( XHM_PIN, X_HOME );
    31d2:	80 b1       	in	r24, 0x00	; 0
		printPgmString(PSTR("xHome: homed\r\n"));
#endif
	}

	return homex;
}
    31d4:	80 71       	andi	r24, 0x10	; 16
    31d6:	08 95       	ret

000031d8 <yHome>:

unsigned char yHome( void ) 
{
	unsigned char homey = bit_is_set( YHM_PIN, Y_HOME );
    31d8:	82 b3       	in	r24, 0x12	; 18
		printPgmString(PSTR("yHome: homed\r\n"));
#endif
	}

	return homey;
}
    31da:	81 70       	andi	r24, 0x01	; 1
    31dc:	08 95       	ret

000031de <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    31de:	80 91 6f 00 	lds	r24, 0x006F
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	96 95       	lsr	r25
    31e6:	87 95       	ror	r24
}
    31e8:	81 70       	andi	r24, 0x01	; 1
    31ea:	08 95       	ret

000031ec <limits_init>:


void limits_init(void)
{
	//pickobear specific
	DDRA = 0x0;
    31ec:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    31ee:	82 e0       	ldi	r24, 0x02	; 2
    31f0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    31f2:	17 b8       	out	0x07, r1	; 7
	LIMIT_DDR = 0x0;
    31f4:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    31f6:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    31f8:	9f e8       	ldi	r25, 0x8F	; 143
    31fa:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    31fc:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    31fe:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    3202:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    3206:	3f ec       	ldi	r19, 0xCF	; 207
    3208:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    320c:	20 ef       	ldi	r18, 0xF0	; 240
    320e:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    3212:	8c e9       	ldi	r24, 0x9C	; 156
    3214:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    3216:	82 e2       	ldi	r24, 0x22	; 34
    3218:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    321a:	83 e1       	ldi	r24, 0x13	; 19
    321c:	88 b9       	out	0x08, r24	; 8
#ifdef SIMULATE
	LIMIT_PORT = 0x00; //00000000
	LIMIT_PIN = 0x0;
#else
	LIMIT_PORT = 0x8F; //10001111
    321e:	9b b9       	out	0x0b, r25	; 11
#endif
	PORTE = 0x30;
    3220:	80 e3       	ldi	r24, 0x30	; 48
    3222:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    3224:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    3226:	83 e2       	ldi	r24, 0x23	; 35
    3228:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    322a:	83 e0       	ldi	r24, 0x03	; 3
    322c:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    3230:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    3234:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    3238:	20 93 0b 01 	sts	0x010B, r18
}
    323c:	08 95       	ret

0000323e <get_limit_bits>:
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    323e:	4b 9b       	sbis	0x09, 3	; 9
    3240:	0c c0       	rjmp	.+24     	; 0x325a <get_limit_bits+0x1c>
    3242:	82 e8       	ldi	r24, 0x82	; 130
      	ret |= _BV( 1 ) ;

	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
    3244:	4a 99       	sbic	0x09, 2	; 9
      	ret |= _BV( 2 ) ;
    3246:	84 60       	ori	r24, 0x04	; 4

	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
    3248:	48 99       	sbic	0x09, 0	; 9
      	ret |= _BV( 3 ) ;
    324a:	88 60       	ori	r24, 0x08	; 8

	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
    324c:	49 99       	sbic	0x09, 1	; 9
      	ret |= _BV( 4 ) ;
    324e:	80 61       	ori	r24, 0x10	; 16

	if( bit_is_set( XHM_PIN, X_HOME ) )
    3250:	04 99       	sbic	0x00, 4	; 0
      	ret |= _BV( 5 ) ;
    3252:	80 62       	ori	r24, 0x20	; 32

	if( bit_is_set( YHM_PIN, Y_HOME ) )
    3254:	90 99       	sbic	0x12, 0	; 18
      	ret |= _BV( 6) ;
    3256:	80 64       	ori	r24, 0x40	; 64

	return ret;

}
    3258:	08 95       	ret
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    325a:	80 e8       	ldi	r24, 0x80	; 128
    325c:	f3 cf       	rjmp	.-26     	; 0x3244 <get_limit_bits+0x6>

0000325e <yLimit2>:

	return limit;
}

unsigned char yLimit2( void ) 
{
    325e:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT );
    3260:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    3262:	18 2f       	mov	r17, r24
    3264:	12 70       	andi	r17, 0x02	; 2
    3266:	81 ff       	sbrs	r24, 1
    3268:	06 c0       	rjmp	.+12     	; 0x3276 <yLimit2+0x18>
		// no longer homed
		gHomed = FALSE;
    326a:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("yLimit2: is in limit\r\n"));
    326e:	86 e5       	ldi	r24, 0x56	; 86
    3270:	95 e0       	ldi	r25, 0x05	; 5
    3272:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
	}

	return limit;
}
    3276:	81 2f       	mov	r24, r17
    3278:	1f 91       	pop	r17
    327a:	08 95       	ret

0000327c <moveBack>:
  }
	return TRUE;
}

unsigned char moveBack( unsigned int distance ) 
{
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    3288:	81 b3       	in	r24, 0x11	; 17
    328a:	85 73       	andi	r24, 0x35	; 53
    328c:	88 60       	ori	r24, 0x08	; 8
    328e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3290:	20 97       	sbiw	r28, 0x00	; 0
    3292:	19 f1       	breq	.+70     	; 0x32da <moveBack+0x5e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3294:	45 e3       	ldi	r20, 0x35	; 53
    3296:	f4 2e       	mov	r15, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3298:	00 e6       	ldi	r16, 0x60	; 96
    329a:	14 e0       	ldi	r17, 0x04	; 4
    329c:	13 c0       	rjmp	.+38     	; 0x32c4 <moveBack+0x48>

  	if( yLimit2() || is_head_down()  ) 
    329e:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    32a2:	88 23       	and	r24, r24
    32a4:	99 f4       	brne	.+38     	; 0x32cc <moveBack+0x50>
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    32a6:	81 b3       	in	r24, 0x11	; 17
    32a8:	8a 7c       	andi	r24, 0xCA	; 202
    32aa:	84 60       	ori	r24, 0x04	; 4
    32ac:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32ae:	8f 2d       	mov	r24, r15
    32b0:	8a 95       	dec	r24
    32b2:	f1 f7       	brne	.-4      	; 0x32b0 <moveBack+0x34>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    32b4:	81 b3       	in	r24, 0x11	; 17
    32b6:	8a 7c       	andi	r24, 0xCA	; 202
    32b8:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32ba:	c8 01       	movw	r24, r16
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <moveBack+0x40>
    32c0:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32c2:	59 f0       	breq	.+22     	; 0x32da <moveBack+0x5e>

  	if( yLimit2() || is_head_down()  ) 
    32c4:	0e 94 2f 19 	call	0x325e	; 0x325e <yLimit2>
    32c8:	88 23       	and	r24, r24
    32ca:	49 f3       	breq	.-46     	; 0x329e <moveBack+0x22>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32cc:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	1f 91       	pop	r17
    32d4:	0f 91       	pop	r16
    32d6:	ff 90       	pop	r15
    32d8:	08 95       	ret
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32da:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	1f 91       	pop	r17
    32e2:	0f 91       	pop	r16
    32e4:	ff 90       	pop	r15
    32e6:	08 95       	ret

000032e8 <yLimit1>:

	return limit;
}

unsigned char yLimit1( void ) 
{
    32e8:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
    32ea:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    32ec:	18 2f       	mov	r17, r24
    32ee:	11 70       	andi	r17, 0x01	; 1
    32f0:	80 ff       	sbrs	r24, 0
    32f2:	06 c0       	rjmp	.+12     	; 0x3300 <yLimit1+0x18>
		// no longer homed
		gHomed = FALSE;
    32f4:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("yLimit1: is in limit\r\n"));
    32f8:	8d e6       	ldi	r24, 0x6D	; 109
    32fa:	95 e0       	ldi	r25, 0x05	; 5
    32fc:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
	}

	return limit;
}
    3300:	81 2f       	mov	r24, r17
    3302:	1f 91       	pop	r17
    3304:	08 95       	ret

00003306 <moveForward>:
  }
	return TRUE;
}

unsigned char moveForward( unsigned int distance ) 
{
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	ec 01       	movw	r28, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3312:	81 b3       	in	r24, 0x11	; 17
    3314:	85 73       	andi	r24, 0x35	; 53
    3316:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3318:	20 97       	sbiw	r28, 0x00	; 0
    331a:	d9 f0       	breq	.+54     	; 0x3352 <moveForward+0x4c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    331c:	55 e3       	ldi	r21, 0x35	; 53
    331e:	f5 2e       	mov	r15, r21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3320:	00 e6       	ldi	r16, 0x60	; 96
    3322:	14 e0       	ldi	r17, 0x04	; 4
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <moveForward+0x3e>
		printPgmString(PSTR("\r\n"));

#endif
	}

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3326:	81 b3       	in	r24, 0x11	; 17
    3328:	8a 7c       	andi	r24, 0xCA	; 202
    332a:	84 60       	ori	r24, 0x04	; 4
    332c:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    332e:	8f 2d       	mov	r24, r15
    3330:	8a 95       	dec	r24
    3332:	f1 f7       	brne	.-4      	; 0x3330 <moveForward+0x2a>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3334:	81 b3       	in	r24, 0x11	; 17
    3336:	8a 7c       	andi	r24, 0xCA	; 202
    3338:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    333a:	c8 01       	movw	r24, r16
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <moveForward+0x36>
    3340:	21 97       	sbiw	r28, 0x01	; 1


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3342:	39 f0       	breq	.+14     	; 0x3352 <moveForward+0x4c>

	//  hit left limit or head down?
  	if( yLimit1() || is_head_down()  ) {
    3344:	0e 94 74 19 	call	0x32e8	; 0x32e8 <yLimit1>
    3348:	88 23       	and	r24, r24
    334a:	69 f7       	brne	.-38     	; 0x3326 <moveForward+0x20>
    334c:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    3350:	ea cf       	rjmp	.-44     	; 0x3326 <moveForward+0x20>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	08 95       	ret

00003360 <xLimit2>:

	return limit;
}

unsigned char xLimit2( void ) 
{
    3360:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, X2_LIMIT_BIT );
    3362:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    3364:	18 2f       	mov	r17, r24
    3366:	14 70       	andi	r17, 0x04	; 4
    3368:	82 ff       	sbrs	r24, 2
    336a:	06 c0       	rjmp	.+12     	; 0x3378 <xLimit2+0x18>
		// no longer homed
		gHomed = FALSE;
    336c:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("xLimit2: is in limit\r\n"));
    3370:	84 e8       	ldi	r24, 0x84	; 132
    3372:	95 e0       	ldi	r25, 0x05	; 5
    3374:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
	}

	return limit;
}
    3378:	81 2f       	mov	r24, r17
    337a:	1f 91       	pop	r17
    337c:	08 95       	ret

0000337e <moveRight>:

	return TRUE;
}

unsigned char moveRight( unsigned int distance ) 
{
    337e:	ff 92       	push	r15
    3380:	0f 93       	push	r16
    3382:	1f 93       	push	r17
    3384:	cf 93       	push	r28
    3386:	df 93       	push	r29
    3388:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    338a:	81 b3       	in	r24, 0x11	; 17
    338c:	85 73       	andi	r24, 0x35	; 53
    338e:	82 60       	ori	r24, 0x02	; 2
    3390:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3392:	20 97       	sbiw	r28, 0x00	; 0
    3394:	19 f1       	breq	.+70     	; 0x33dc <moveRight+0x5e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3396:	65 e3       	ldi	r22, 0x35	; 53
    3398:	f6 2e       	mov	r15, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    339a:	00 e6       	ldi	r16, 0x60	; 96
    339c:	14 e0       	ldi	r17, 0x04	; 4
    339e:	13 c0       	rjmp	.+38     	; 0x33c6 <moveRight+0x48>

	//  hit left limit or head down?
  	if( xLimit2()  || is_head_down()  ) {
    33a0:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    33a4:	88 23       	and	r24, r24
    33a6:	99 f4       	brne	.+38     	; 0x33ce <moveRight+0x50>
		printPgmString(PSTR("\r\nmoveLeft HEAD_DOWN_TEST or X2 LIMIT \r\n"));
#endif
		return 0;  	
	}

	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    33a8:	81 b3       	in	r24, 0x11	; 17
    33aa:	8a 7c       	andi	r24, 0xCA	; 202
    33ac:	81 60       	ori	r24, 0x01	; 1
    33ae:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33b0:	8f 2d       	mov	r24, r15
    33b2:	8a 95       	dec	r24
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <moveRight+0x34>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    33b6:	81 b3       	in	r24, 0x11	; 17
    33b8:	8a 7c       	andi	r24, 0xCA	; 202
    33ba:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33bc:	c8 01       	movw	r24, r16
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	f1 f7       	brne	.-4      	; 0x33be <moveRight+0x40>
    33c2:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    33c4:	59 f0       	breq	.+22     	; 0x33dc <moveRight+0x5e>

	//  hit left limit or head down?
  	if( xLimit2()  || is_head_down()  ) {
    33c6:	0e 94 b0 19 	call	0x3360	; 0x3360 <xLimit2>
    33ca:	88 23       	and	r24, r24
    33cc:	49 f3       	breq	.-46     	; 0x33a0 <moveRight+0x22>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    33ce:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	ff 90       	pop	r15
    33da:	08 95       	ret
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    33dc:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	08 95       	ret

000033ea <xLimit1>:

// global home flag ( machine should only do home move if this is FALSE)
unsigned char gHomed = FALSE;

unsigned char xLimit1( void ) 
{
    33ea:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
    33ec:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    33ee:	18 2f       	mov	r17, r24
    33f0:	18 70       	andi	r17, 0x08	; 8
    33f2:	83 ff       	sbrs	r24, 3
    33f4:	06 c0       	rjmp	.+12     	; 0x3402 <xLimit1+0x18>
		// no longer homed
		gHomed = FALSE;
    33f6:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("xLimit1\r\n"));
    33fa:	8b e9       	ldi	r24, 0x9B	; 155
    33fc:	95 e0       	ldi	r25, 0x05	; 5
    33fe:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
	}

	return limit;
}
    3402:	81 2f       	mov	r24, r17
    3404:	1f 91       	pop	r17
    3406:	08 95       	ret

00003408 <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    3408:	ff 92       	push	r15
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
    3412:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3414:	81 b3       	in	r24, 0x11	; 17
    3416:	85 73       	andi	r24, 0x35	; 53
    3418:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    341a:	20 97       	sbiw	r28, 0x00	; 0
    341c:	19 f1       	breq	.+70     	; 0x3464 <moveLeft+0x5c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    341e:	75 e3       	ldi	r23, 0x35	; 53
    3420:	f7 2e       	mov	r15, r23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3422:	00 e6       	ldi	r16, 0x60	; 96
    3424:	14 e0       	ldi	r17, 0x04	; 4
    3426:	13 c0       	rjmp	.+38     	; 0x344e <moveLeft+0x46>

	//  hit left limit or head down?
  	if( xLimit1() || is_head_down() ) {
    3428:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    342c:	88 23       	and	r24, r24
    342e:	99 f4       	brne	.+38     	; 0x3456 <moveLeft+0x4e>
#endif

		return 0;
	}

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3430:	81 b3       	in	r24, 0x11	; 17
    3432:	8a 7c       	andi	r24, 0xCA	; 202
    3434:	81 60       	ori	r24, 0x01	; 1
    3436:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3438:	8f 2d       	mov	r24, r15
    343a:	8a 95       	dec	r24
    343c:	f1 f7       	brne	.-4      	; 0x343a <moveLeft+0x32>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    343e:	81 b3       	in	r24, 0x11	; 17
    3440:	8a 7c       	andi	r24, 0xCA	; 202
    3442:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3444:	c8 01       	movw	r24, r16
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <moveLeft+0x3e>
    344a:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    344c:	59 f0       	breq	.+22     	; 0x3464 <moveLeft+0x5c>

	//  hit left limit or head down?
  	if( xLimit1() || is_head_down() ) {
    344e:	0e 94 f5 19 	call	0x33ea	; 0x33ea <xLimit1>
    3452:	88 23       	and	r24, r24
    3454:	49 f3       	breq	.-46     	; 0x3428 <moveLeft+0x20>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3456:	80 e0       	ldi	r24, 0x00	; 0
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	ff 90       	pop	r15
    3462:	08 95       	ret
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3464:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    3466:	df 91       	pop	r29
    3468:	cf 91       	pop	r28
    346a:	1f 91       	pop	r17
    346c:	0f 91       	pop	r16
    346e:	ff 90       	pop	r15
    3470:	08 95       	ret

00003472 <st_go_home>:
	unsigned char yDir = FORWARD;

	unsigned int counter = 0;

	// not homed
	gHomed = FALSE;
    3472:	10 92 55 05 	sts	0x0555, r1

	// reset position machine thinks we are at.
	plan_init();
    3476:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <plan_init>
	gc_init();
    347a:	0e 94 43 05 	call	0xa86	; 0xa86 <gc_init>

	// if head down, set head up
	if( is_head_down() ) {
    347e:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    3482:	88 23       	and	r24, r24
    3484:	49 f0       	breq	.+18     	; 0x3498 <st_go_home+0x26>
#ifdef VERBOSE_DEBUG

		printPgmString(PSTR("home is_head_down()=1\r\n"));
#endif

		head_down(0);
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
		
		//check again
		if(is_head_down() ){
    348e:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    3492:	88 23       	and	r24, r24
    3494:	09 f0       	breq	.+2      	; 0x3498 <st_go_home+0x26>
    3496:	61 c0       	rjmp	.+194    	; 0x355a <st_go_home+0xe8>
	set_busy(FALSE);
	return ;

#endif

	cli();
    3498:	f8 94       	cli

	// tool changer all down
	atc_fire(0);	
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <atc_fire>
	vacuum(0);
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nX limit1 check\r\n"));
#endif

	// If in left most limit, move to right > more than size of home and limit area
	if( xLimit1() ) {
    34aa:	0e 94 f5 19 	call	0x33ea	; 0x33ea <xLimit1>
    34ae:	88 23       	and	r24, r24
    34b0:	89 f0       	breq	.+34     	; 0x34d4 <st_go_home+0x62>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    34b2:	88 ee       	ldi	r24, 0xE8	; 232
    34b4:	93 e0       	ldi	r25, 0x03	; 3
    34b6:	0e 94 bf 19 	call	0x337e	; 0x337e <moveRight>
    34ba:	88 23       	and	r24, r24
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <st_go_home+0x4e>
    34be:	4b c0       	rjmp	.+150    	; 0x3556 <st_go_home+0xe4>
			sei();
			return;
    34c0:	20 ed       	ldi	r18, 0xD0	; 208
    34c2:	37 e0       	ldi	r19, 0x07	; 7
    34c4:	40 e9       	ldi	r20, 0x90	; 144
    34c6:	51 e0       	ldi	r21, 0x01	; 1
    34c8:	ca 01       	movw	r24, r20
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <st_go_home+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ce:	21 50       	subi	r18, 0x01	; 1
    34d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d2:	d1 f7       	brne	.-12     	; 0x34c8 <st_go_home+0x56>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nY limit1 check\r\n"));
#endif

	// If in front most limit, move to right > more than size of home and limit area
	if( yLimit1() ) {
    34d4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <yLimit1>
    34d8:	88 23       	and	r24, r24
    34da:	61 f5       	brne	.+88     	; 0x3534 <st_go_home+0xc2>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( xHome() ) {
    34dc:	04 99       	sbic	0x00, 4	; 0
    34de:	08 c0       	rjmp	.+16     	; 0x34f0 <st_go_home+0x7e>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 )  {
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	0e 94 04 1a 	call	0x3408	; 0x3408 <moveLeft>
    34e8:	88 23       	and	r24, r24
    34ea:	c1 f7       	brne	.-16     	; 0x34dc <st_go_home+0x6a>
		printPgmString(PSTR("\r\npickobear is homed\r\n"));
#endif
		return;
	}
error:;
	sei();
    34ec:	78 94       	sei
    34ee:	08 95       	ret
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 )  {
    34f0:	20 ed       	ldi	r18, 0xD0	; 208
    34f2:	37 e0       	ldi	r19, 0x07	; 7
    34f4:	40 e9       	ldi	r20, 0x90	; 144
    34f6:	51 e0       	ldi	r21, 0x01	; 1
    34f8:	ca 01       	movw	r24, r20
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	f1 f7       	brne	.-4      	; 0x34fa <st_go_home+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fe:	21 50       	subi	r18, 0x01	; 1
    3500:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3502:	d1 f7       	brne	.-12     	; 0x34f8 <st_go_home+0x86>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( yHome() ) {
    3504:	90 9b       	sbis	0x12, 0	; 18
    3506:	0f c0       	rjmp	.+30     	; 0x3526 <st_go_home+0xb4>
	printPgmString(PSTR("\r\n"));
#endif



	sei();
    3508:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    350a:	89 b1       	in	r24, 0x09	; 9
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	8f 70       	andi	r24, 0x0F	; 15
    3510:	90 70       	andi	r25, 0x00	; 0
    3512:	89 2b       	or	r24, r25
    3514:	59 f7       	brne	.-42     	; 0x34ec <st_go_home+0x7a>
		gHomed = TRUE ;
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	80 93 55 05 	sts	0x0555, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    351c:	10 92 6e 05 	sts	0x056E, r1
    3520:	10 92 6d 05 	sts	0x056D, r1
    3524:	08 95       	ret
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 83 19 	call	0x3306	; 0x3306 <moveForward>
    352e:	88 23       	and	r24, r24
    3530:	49 f7       	brne	.-46     	; 0x3504 <st_go_home+0x92>
    3532:	dc cf       	rjmp	.-72     	; 0x34ec <st_go_home+0x7a>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    3534:	88 ee       	ldi	r24, 0xE8	; 232
    3536:	93 e0       	ldi	r25, 0x03	; 3
    3538:	0e 94 3e 19 	call	0x327c	; 0x327c <moveBack>
    353c:	88 23       	and	r24, r24
    353e:	91 f0       	breq	.+36     	; 0x3564 <st_go_home+0xf2>
			sei();
			return;
    3540:	20 ed       	ldi	r18, 0xD0	; 208
    3542:	37 e0       	ldi	r19, 0x07	; 7
    3544:	40 e9       	ldi	r20, 0x90	; 144
    3546:	51 e0       	ldi	r21, 0x01	; 1
    3548:	ca 01       	movw	r24, r20
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <st_go_home+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354e:	21 50       	subi	r18, 0x01	; 1
    3550:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3552:	d1 f7       	brne	.-12     	; 0x3548 <st_go_home+0xd6>
    3554:	c3 cf       	rjmp	.-122    	; 0x34dc <st_go_home+0x6a>
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
			sei();
    3556:	78 94       	sei
    3558:	08 95       	ret

		head_down(0);
		
		//check again
		if(is_head_down() ){
			printPgmString(PSTR("home failed\r\n"));
    355a:	88 e4       	ldi	r24, 0x48	; 72
    355c:	95 e0       	ldi	r25, 0x05	; 5
    355e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    3562:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
			sei();
    3564:	78 94       	sei
    3566:	08 95       	ret

00003568 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    3568:	07 c0       	rjmp	.+14     	; 0x3578 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    356a:	83 b7       	in	r24, 0x33	; 51
    356c:	81 60       	ori	r24, 0x01	; 1
    356e:	83 bf       	out	0x33, r24	; 51
    3570:	88 95       	sleep
    3572:	83 b7       	in	r24, 0x33	; 51
    3574:	8e 7f       	andi	r24, 0xFE	; 254
    3576:	83 bf       	out	0x33, r24	; 51
    3578:	0e 94 ae 0b 	call	0x175c	; 0x175c <plan_get_current_block>
    357c:	89 2b       	or	r24, r25
    357e:	a9 f7       	brne	.-22     	; 0x356a <st_synchronize+0x2>
}
    3580:	08 95       	ret

00003582 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    3582:	1f 92       	push	r1
    3584:	0f 92       	push	r0
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	0f 92       	push	r0
    358a:	0b b6       	in	r0, 0x3b	; 59
    358c:	0f 92       	push	r0
    358e:	11 24       	eor	r1, r1
    3590:	ef 92       	push	r14
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	2f 93       	push	r18
    359a:	3f 93       	push	r19
    359c:	4f 93       	push	r20
    359e:	5f 93       	push	r21
    35a0:	6f 93       	push	r22
    35a2:	7f 93       	push	r23
    35a4:	8f 93       	push	r24
    35a6:	9f 93       	push	r25
    35a8:	af 93       	push	r26
    35aa:	bf 93       	push	r27
    35ac:	cf 93       	push	r28
    35ae:	df 93       	push	r29
    35b0:	ef 93       	push	r30
    35b2:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    35b4:	80 91 55 05 	lds	r24, 0x0555
    35b8:	88 23       	and	r24, r24
    35ba:	49 f1       	breq	.+82     	; 0x360e <__vector_17+0x8c>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

	// Check all limit switches
	if( LIMIT_PIN & 0xf ) {
    35bc:	89 b1       	in	r24, 0x09	; 9
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	8f 70       	andi	r24, 0x0F	; 15
    35c2:	90 70       	andi	r25, 0x00	; 0
    35c4:	89 2b       	or	r24, r25
    35c6:	61 f1       	breq	.+88     	; 0x3620 <__vector_17+0x9e>
		gHomed = FALSE ;
    35c8:	10 92 55 05 	sts	0x0555, r1
		// set ack
		ackHost = 'L';
    35cc:	8c e4       	ldi	r24, 0x4C	; 76
    35ce:	80 93 54 05 	sts	0x0554, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    35d2:	80 91 6f 00 	lds	r24, 0x006F
    35d6:	8d 7f       	andi	r24, 0xFD	; 253
    35d8:	80 93 6f 00 	sts	0x006F, r24
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
}
    35dc:	ff 91       	pop	r31
    35de:	ef 91       	pop	r30
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	bf 91       	pop	r27
    35e6:	af 91       	pop	r26
    35e8:	9f 91       	pop	r25
    35ea:	8f 91       	pop	r24
    35ec:	7f 91       	pop	r23
    35ee:	6f 91       	pop	r22
    35f0:	5f 91       	pop	r21
    35f2:	4f 91       	pop	r20
    35f4:	3f 91       	pop	r19
    35f6:	2f 91       	pop	r18
    35f8:	1f 91       	pop	r17
    35fa:	0f 91       	pop	r16
    35fc:	ff 90       	pop	r15
    35fe:	ef 90       	pop	r14
    3600:	0f 90       	pop	r0
    3602:	0b be       	out	0x3b, r0	; 59
    3604:	0f 90       	pop	r0
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	0f 90       	pop	r0
    360a:	1f 90       	pop	r1
    360c:	18 95       	reti
{        
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
		// set ack
		ackHost = 'H';
    360e:	88 e4       	ldi	r24, 0x48	; 72
    3610:	80 93 54 05 	sts	0x0554, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    3614:	80 91 6f 00 	lds	r24, 0x006F
    3618:	8d 7f       	andi	r24, 0xFD	; 253
    361a:	80 93 6f 00 	sts	0x006F, r24
    361e:	de cf       	rjmp	.-68     	; 0x35dc <__vector_17+0x5a>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

	// don't move if the head is down, this one is ok to let it keep running  
	if( is_head_down() ) {
    3620:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    3624:	88 23       	and	r24, r24
    3626:	d1 f6       	brne	.-76     	; 0x35dc <__vector_17+0x5a>
		return;
	}

  if(busy){ 
    3628:	80 91 6d 05 	lds	r24, 0x056D
    362c:	90 91 6e 05 	lds	r25, 0x056E
    3630:	89 2b       	or	r24, r25
    3632:	a1 f6       	brne	.-88     	; 0x35dc <__vector_17+0x5a>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    3634:	91 b3       	in	r25, 0x11	; 17
    3636:	80 91 ba 06 	lds	r24, 0x06BA
    363a:	8a 7c       	andi	r24, 0xCA	; 202
    363c:	95 73       	andi	r25, 0x35	; 53
    363e:	89 2b       	or	r24, r25
    3640:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    3642:	81 b3       	in	r24, 0x11	; 17
    3644:	8a 7c       	andi	r24, 0xCA	; 202
    3646:	90 91 58 05 	lds	r25, 0x0558
    364a:	89 2b       	or	r24, r25
    364c:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    364e:	80 91 a5 06 	lds	r24, 0x06A5
    3652:	88 0f       	add	r24, r24
    3654:	84 50       	subi	r24, 0x04	; 4
    3656:	81 95       	neg	r24
    3658:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    365c:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	90 93 6e 05 	sts	0x056E, r25
    3666:	80 93 6d 05 	sts	0x056D, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    366a:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    366c:	e0 91 56 05 	lds	r30, 0x0556
    3670:	f0 91 57 05 	lds	r31, 0x0557
    3674:	30 97       	sbiw	r30, 0x00	; 0
    3676:	09 f4       	brne	.+2      	; 0x367a <__vector_17+0xf8>
    3678:	cb c1       	rjmp	.+918    	; 0x3a10 <__vector_17+0x48e>

    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    367a:	80 89       	ldd	r24, Z+16	; 0x10
    367c:	80 93 ba 06 	sts	0x06BA, r24
    out_bits = 0;
    3680:	10 92 58 05 	sts	0x0558, r1
    counter_x += current_block->steps_x;
    3684:	20 91 59 05 	lds	r18, 0x0559
    3688:	30 91 5a 05 	lds	r19, 0x055A
    368c:	40 91 5b 05 	lds	r20, 0x055B
    3690:	50 91 5c 05 	lds	r21, 0x055C
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	a2 81       	ldd	r26, Z+2	; 0x02
    369a:	b3 81       	ldd	r27, Z+3	; 0x03
    369c:	28 0f       	add	r18, r24
    369e:	39 1f       	adc	r19, r25
    36a0:	4a 1f       	adc	r20, r26
    36a2:	5b 1f       	adc	r21, r27
    36a4:	20 93 59 05 	sts	0x0559, r18
    36a8:	30 93 5a 05 	sts	0x055A, r19
    36ac:	40 93 5b 05 	sts	0x055B, r20
    36b0:	50 93 5c 05 	sts	0x055C, r21
    if (counter_x > 0) {
    36b4:	12 16       	cp	r1, r18
    36b6:	13 06       	cpc	r1, r19
    36b8:	14 06       	cpc	r1, r20
    36ba:	15 06       	cpc	r1, r21
    36bc:	0c f0       	brlt	.+2      	; 0x36c0 <__vector_17+0x13e>
    36be:	46 c1       	rjmp	.+652    	; 0x394c <__vector_17+0x3ca>
      out_bits |= (1<<X_STEP_BIT);
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	80 93 58 05 	sts	0x0558, r24
      counter_x -= current_block->step_event_count;
    36c6:	e1 88       	ldd	r14, Z+17	; 0x11
    36c8:	f2 88       	ldd	r15, Z+18	; 0x12
    36ca:	03 89       	ldd	r16, Z+19	; 0x13
    36cc:	14 89       	ldd	r17, Z+20	; 0x14
    36ce:	2e 19       	sub	r18, r14
    36d0:	3f 09       	sbc	r19, r15
    36d2:	40 0b       	sbc	r20, r16
    36d4:	51 0b       	sbc	r21, r17
    36d6:	20 93 59 05 	sts	0x0559, r18
    36da:	30 93 5a 05 	sts	0x055A, r19
    36de:	40 93 5b 05 	sts	0x055B, r20
    36e2:	50 93 5c 05 	sts	0x055C, r21
    }
    counter_y += current_block->steps_y;
    36e6:	20 91 5d 05 	lds	r18, 0x055D
    36ea:	30 91 5e 05 	lds	r19, 0x055E
    36ee:	40 91 5f 05 	lds	r20, 0x055F
    36f2:	50 91 60 05 	lds	r21, 0x0560
    36f6:	84 81       	ldd	r24, Z+4	; 0x04
    36f8:	95 81       	ldd	r25, Z+5	; 0x05
    36fa:	a6 81       	ldd	r26, Z+6	; 0x06
    36fc:	b7 81       	ldd	r27, Z+7	; 0x07
    36fe:	28 0f       	add	r18, r24
    3700:	39 1f       	adc	r19, r25
    3702:	4a 1f       	adc	r20, r26
    3704:	5b 1f       	adc	r21, r27
    3706:	20 93 5d 05 	sts	0x055D, r18
    370a:	30 93 5e 05 	sts	0x055E, r19
    370e:	40 93 5f 05 	sts	0x055F, r20
    3712:	50 93 60 05 	sts	0x0560, r21
    if (counter_y > 0) {
    3716:	12 16       	cp	r1, r18
    3718:	13 06       	cpc	r1, r19
    371a:	14 06       	cpc	r1, r20
    371c:	15 06       	cpc	r1, r21
    371e:	8c f4       	brge	.+34     	; 0x3742 <__vector_17+0x1c0>
      out_bits |= (1<<Y_STEP_BIT);
    3720:	80 91 58 05 	lds	r24, 0x0558
    3724:	84 60       	ori	r24, 0x04	; 4
    3726:	80 93 58 05 	sts	0x0558, r24
      counter_y -= current_block->step_event_count;
    372a:	2e 19       	sub	r18, r14
    372c:	3f 09       	sbc	r19, r15
    372e:	40 0b       	sbc	r20, r16
    3730:	51 0b       	sbc	r21, r17
    3732:	20 93 5d 05 	sts	0x055D, r18
    3736:	30 93 5e 05 	sts	0x055E, r19
    373a:	40 93 5f 05 	sts	0x055F, r20
    373e:	50 93 60 05 	sts	0x0560, r21
    }
    counter_z += current_block->steps_z;
    3742:	20 91 61 05 	lds	r18, 0x0561
    3746:	30 91 62 05 	lds	r19, 0x0562
    374a:	40 91 63 05 	lds	r20, 0x0563
    374e:	50 91 64 05 	lds	r21, 0x0564
    3752:	80 85       	ldd	r24, Z+8	; 0x08
    3754:	91 85       	ldd	r25, Z+9	; 0x09
    3756:	a2 85       	ldd	r26, Z+10	; 0x0a
    3758:	b3 85       	ldd	r27, Z+11	; 0x0b
    375a:	28 0f       	add	r18, r24
    375c:	39 1f       	adc	r19, r25
    375e:	4a 1f       	adc	r20, r26
    3760:	5b 1f       	adc	r21, r27
    3762:	20 93 61 05 	sts	0x0561, r18
    3766:	30 93 62 05 	sts	0x0562, r19
    376a:	40 93 63 05 	sts	0x0563, r20
    376e:	50 93 64 05 	sts	0x0564, r21
    if (counter_z > 0) {
    3772:	12 16       	cp	r1, r18
    3774:	13 06       	cpc	r1, r19
    3776:	14 06       	cpc	r1, r20
    3778:	15 06       	cpc	r1, r21
    377a:	8c f4       	brge	.+34     	; 0x379e <__vector_17+0x21c>
      out_bits |= (1<<Z_STEP_BIT);
    377c:	80 91 58 05 	lds	r24, 0x0558
    3780:	80 61       	ori	r24, 0x10	; 16
    3782:	80 93 58 05 	sts	0x0558, r24
      counter_z -= current_block->step_event_count;
    3786:	2e 19       	sub	r18, r14
    3788:	3f 09       	sbc	r19, r15
    378a:	40 0b       	sbc	r20, r16
    378c:	51 0b       	sbc	r21, r17
    378e:	20 93 61 05 	sts	0x0561, r18
    3792:	30 93 62 05 	sts	0x0562, r19
    3796:	40 93 63 05 	sts	0x0563, r20
    379a:	50 93 64 05 	sts	0x0564, r21
    }
    counter_c += current_block->steps_c;
    379e:	20 91 65 05 	lds	r18, 0x0565
    37a2:	30 91 66 05 	lds	r19, 0x0566
    37a6:	40 91 67 05 	lds	r20, 0x0567
    37aa:	50 91 68 05 	lds	r21, 0x0568
    37ae:	84 85       	ldd	r24, Z+12	; 0x0c
    37b0:	95 85       	ldd	r25, Z+13	; 0x0d
    37b2:	a6 85       	ldd	r26, Z+14	; 0x0e
    37b4:	b7 85       	ldd	r27, Z+15	; 0x0f
    37b6:	28 0f       	add	r18, r24
    37b8:	39 1f       	adc	r19, r25
    37ba:	4a 1f       	adc	r20, r26
    37bc:	5b 1f       	adc	r21, r27
    37be:	20 93 65 05 	sts	0x0565, r18
    37c2:	30 93 66 05 	sts	0x0566, r19
    37c6:	40 93 67 05 	sts	0x0567, r20
    37ca:	50 93 68 05 	sts	0x0568, r21
    if (counter_c > 0) {
    37ce:	12 16       	cp	r1, r18
    37d0:	13 06       	cpc	r1, r19
    37d2:	14 06       	cpc	r1, r20
    37d4:	15 06       	cpc	r1, r21
    37d6:	8c f4       	brge	.+34     	; 0x37fa <__vector_17+0x278>
      out_bits |= (1<<C_STEP_BIT);
    37d8:	80 91 58 05 	lds	r24, 0x0558
    37dc:	80 62       	ori	r24, 0x20	; 32
    37de:	80 93 58 05 	sts	0x0558, r24
      counter_c -= current_block->step_event_count;
    37e2:	2e 19       	sub	r18, r14
    37e4:	3f 09       	sbc	r19, r15
    37e6:	40 0b       	sbc	r20, r16
    37e8:	51 0b       	sbc	r21, r17
    37ea:	20 93 65 05 	sts	0x0565, r18
    37ee:	30 93 66 05 	sts	0x0566, r19
    37f2:	40 93 67 05 	sts	0x0567, r20
    37f6:	50 93 68 05 	sts	0x0568, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    37fa:	80 91 69 05 	lds	r24, 0x0569
    37fe:	90 91 6a 05 	lds	r25, 0x056A
    3802:	a0 91 6b 05 	lds	r26, 0x056B
    3806:	b0 91 6c 05 	lds	r27, 0x056C
    380a:	01 96       	adiw	r24, 0x01	; 1
    380c:	a1 1d       	adc	r26, r1
    380e:	b1 1d       	adc	r27, r1
    3810:	80 93 69 05 	sts	0x0569, r24
    3814:	90 93 6a 05 	sts	0x056A, r25
    3818:	a0 93 6b 05 	sts	0x056B, r26
    381c:	b0 93 6c 05 	sts	0x056C, r27
    if (step_events_completed >= current_block->step_event_count) {
    3820:	8e 15       	cp	r24, r14
    3822:	9f 05       	cpc	r25, r15
    3824:	a0 07       	cpc	r26, r16
    3826:	b1 07       	cpc	r27, r17
    3828:	08 f0       	brcs	.+2      	; 0x382c <__vector_17+0x2aa>
    382a:	95 c0       	rjmp	.+298    	; 0x3956 <__vector_17+0x3d4>
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
    382c:	80 91 58 05 	lds	r24, 0x0558
    3830:	95 e3       	ldi	r25, 0x35	; 53
    3832:	89 27       	eor	r24, r25
    3834:	80 93 58 05 	sts	0x0558, r24
  dir_bits ^= DIRECTION_INVERT_MASK;
    3838:	80 91 ba 06 	lds	r24, 0x06BA
    383c:	9a ec       	ldi	r25, 0xCA	; 202
    383e:	89 27       	eor	r24, r25
    3840:	80 93 ba 06 	sts	0x06BA, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    3844:	20 91 6f 05 	lds	r18, 0x056F
    3848:	30 91 70 05 	lds	r19, 0x0570
    384c:	40 91 71 05 	lds	r20, 0x0571
    3850:	50 91 72 05 	lds	r21, 0x0572
    3854:	80 91 73 05 	lds	r24, 0x0573
    3858:	90 91 74 05 	lds	r25, 0x0574
    385c:	a0 91 75 05 	lds	r26, 0x0575
    3860:	b0 91 76 05 	lds	r27, 0x0576
    3864:	28 0f       	add	r18, r24
    3866:	39 1f       	adc	r19, r25
    3868:	4a 1f       	adc	r20, r26
    386a:	5b 1f       	adc	r21, r27
    386c:	20 93 73 05 	sts	0x0573, r18
    3870:	30 93 74 05 	sts	0x0574, r19
    3874:	40 93 75 05 	sts	0x0575, r20
    3878:	50 93 76 05 	sts	0x0576, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    387c:	21 38       	cpi	r18, 0x81	; 129
    387e:	0a e1       	ldi	r16, 0x1A	; 26
    3880:	30 07       	cpc	r19, r16
    3882:	06 e0       	ldi	r16, 0x06	; 6
    3884:	40 07       	cpc	r20, r16
    3886:	00 e0       	ldi	r16, 0x00	; 0
    3888:	50 07       	cpc	r21, r16
    388a:	08 f4       	brcc	.+2      	; 0x388e <__vector_17+0x30c>
    388c:	5a c0       	rjmp	.+180    	; 0x3942 <__vector_17+0x3c0>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    388e:	20 58       	subi	r18, 0x80	; 128
    3890:	3a 41       	sbci	r19, 0x1A	; 26
    3892:	46 40       	sbci	r20, 0x06	; 6
    3894:	50 40       	sbci	r21, 0x00	; 0
    3896:	20 93 73 05 	sts	0x0573, r18
    389a:	30 93 74 05 	sts	0x0574, r19
    389e:	40 93 75 05 	sts	0x0575, r20
    38a2:	50 93 76 05 	sts	0x0576, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static inline void trapezoid_generator_tick() {     
  if (current_block) {
    38a6:	e0 91 56 05 	lds	r30, 0x0556
    38aa:	f0 91 57 05 	lds	r31, 0x0557
    38ae:	30 97       	sbiw	r30, 0x00	; 0
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <__vector_17+0x332>
    38b2:	47 c0       	rjmp	.+142    	; 0x3942 <__vector_17+0x3c0>
    if (step_events_completed < current_block->accelerate_until) {
    38b4:	20 91 69 05 	lds	r18, 0x0569
    38b8:	30 91 6a 05 	lds	r19, 0x056A
    38bc:	40 91 6b 05 	lds	r20, 0x056B
    38c0:	50 91 6c 05 	lds	r21, 0x056C
    38c4:	ef 5b       	subi	r30, 0xBF	; 191
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	80 81       	ld	r24, Z
    38ca:	91 81       	ldd	r25, Z+1	; 0x01
    38cc:	a2 81       	ldd	r26, Z+2	; 0x02
    38ce:	b3 81       	ldd	r27, Z+3	; 0x03
    38d0:	e1 54       	subi	r30, 0x41	; 65
    38d2:	f0 40       	sbci	r31, 0x00	; 0
    38d4:	28 17       	cp	r18, r24
    38d6:	39 07       	cpc	r19, r25
    38d8:	4a 07       	cpc	r20, r26
    38da:	5b 07       	cpc	r21, r27
    38dc:	08 f0       	brcs	.+2      	; 0x38e0 <__vector_17+0x35e>
    38de:	42 c0       	rjmp	.+132    	; 0x3964 <__vector_17+0x3e2>
      trapezoid_adjusted_rate += current_block->rate_delta;
    38e0:	fd 96       	adiw	r30, 0x3d	; 61
    38e2:	80 81       	ld	r24, Z
    38e4:	91 81       	ldd	r25, Z+1	; 0x01
    38e6:	a2 81       	ldd	r26, Z+2	; 0x02
    38e8:	b3 81       	ldd	r27, Z+3	; 0x03
    38ea:	fd 97       	sbiw	r30, 0x3d	; 61
    38ec:	20 91 77 05 	lds	r18, 0x0577
    38f0:	30 91 78 05 	lds	r19, 0x0578
    38f4:	40 91 79 05 	lds	r20, 0x0579
    38f8:	50 91 7a 05 	lds	r21, 0x057A
    38fc:	28 0f       	add	r18, r24
    38fe:	39 1f       	adc	r19, r25
    3900:	4a 1f       	adc	r20, r26
    3902:	5b 1f       	adc	r21, r27
    3904:	20 93 77 05 	sts	0x0577, r18
    3908:	30 93 78 05 	sts	0x0578, r19
    390c:	40 93 79 05 	sts	0x0579, r20
    3910:	50 93 7a 05 	sts	0x057A, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3914:	85 89       	ldd	r24, Z+21	; 0x15
    3916:	96 89       	ldd	r25, Z+22	; 0x16
    3918:	a7 89       	ldd	r26, Z+23	; 0x17
    391a:	b0 8d       	ldd	r27, Z+24	; 0x18
    391c:	82 17       	cp	r24, r18
    391e:	93 07       	cpc	r25, r19
    3920:	a4 07       	cpc	r26, r20
    3922:	b5 07       	cpc	r27, r21
    3924:	50 f4       	brcc	.+20     	; 0x393a <__vector_17+0x3b8>
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
        trapezoid_adjusted_rate -= current_block->rate_delta;
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
        trapezoid_adjusted_rate = current_block->final_rate;
    3926:	80 93 77 05 	sts	0x0577, r24
    392a:	90 93 78 05 	sts	0x0578, r25
    392e:	a0 93 79 05 	sts	0x0579, r26
    3932:	b0 93 7a 05 	sts	0x057A, r27
    3936:	9c 01       	movw	r18, r24
    3938:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    393a:	ca 01       	movw	r24, r20
    393c:	b9 01       	movw	r22, r18
    393e:	0e 94 85 18 	call	0x310a	; 0x310a <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    3942:	10 92 6e 05 	sts	0x056E, r1
    3946:	10 92 6d 05 	sts	0x056D, r1
    394a:	48 ce       	rjmp	.-880    	; 0x35dc <__vector_17+0x5a>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    394c:	e1 88       	ldd	r14, Z+17	; 0x11
    394e:	f2 88       	ldd	r15, Z+18	; 0x12
    3950:	03 89       	ldd	r16, Z+19	; 0x13
    3952:	14 89       	ldd	r17, Z+20	; 0x14
    3954:	c8 ce       	rjmp	.-624    	; 0x36e6 <__vector_17+0x164>
      counter_c -= current_block->step_event_count;
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    3956:	10 92 57 05 	sts	0x0557, r1
    395a:	10 92 56 05 	sts	0x0556, r1
      plan_discard_current_block();
    395e:	0e 94 95 0b 	call	0x172a	; 0x172a <plan_discard_current_block>
    3962:	64 cf       	rjmp	.-312    	; 0x382c <__vector_17+0x2aa>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3964:	eb 5b       	subi	r30, 0xBB	; 187
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 81       	ld	r24, Z
    396a:	91 81       	ldd	r25, Z+1	; 0x01
    396c:	a2 81       	ldd	r26, Z+2	; 0x02
    396e:	b3 81       	ldd	r27, Z+3	; 0x03
    3970:	e5 54       	subi	r30, 0x45	; 69
    3972:	f0 40       	sbci	r31, 0x00	; 0
    3974:	82 17       	cp	r24, r18
    3976:	93 07       	cpc	r25, r19
    3978:	a4 07       	cpc	r26, r20
    397a:	b5 07       	cpc	r27, r21
    397c:	70 f5       	brcc	.+92     	; 0x39da <__vector_17+0x458>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    397e:	fd 96       	adiw	r30, 0x3d	; 61
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	fd 97       	sbiw	r30, 0x3d	; 61
    398a:	20 91 77 05 	lds	r18, 0x0577
    398e:	30 91 78 05 	lds	r19, 0x0578
    3992:	40 91 79 05 	lds	r20, 0x0579
    3996:	50 91 7a 05 	lds	r21, 0x057A
    399a:	62 17       	cp	r22, r18
    399c:	73 07       	cpc	r23, r19
    399e:	84 07       	cpc	r24, r20
    39a0:	95 07       	cpc	r25, r21
    39a2:	80 f4       	brcc	.+32     	; 0x39c4 <__vector_17+0x442>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    39a4:	79 01       	movw	r14, r18
    39a6:	8a 01       	movw	r16, r20
    39a8:	e6 1a       	sub	r14, r22
    39aa:	f7 0a       	sbc	r15, r23
    39ac:	08 0b       	sbc	r16, r24
    39ae:	19 0b       	sbc	r17, r25
    39b0:	e0 92 77 05 	sts	0x0577, r14
    39b4:	f0 92 78 05 	sts	0x0578, r15
    39b8:	00 93 79 05 	sts	0x0579, r16
    39bc:	10 93 7a 05 	sts	0x057A, r17
    39c0:	a8 01       	movw	r20, r16
    39c2:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    39c4:	81 ad       	ldd	r24, Z+57	; 0x39
    39c6:	92 ad       	ldd	r25, Z+58	; 0x3a
    39c8:	a3 ad       	ldd	r26, Z+59	; 0x3b
    39ca:	b4 ad       	ldd	r27, Z+60	; 0x3c
    39cc:	28 17       	cp	r18, r24
    39ce:	39 07       	cpc	r19, r25
    39d0:	4a 07       	cpc	r20, r26
    39d2:	5b 07       	cpc	r21, r27
    39d4:	08 f0       	brcs	.+2      	; 0x39d8 <__vector_17+0x456>
    39d6:	b1 cf       	rjmp	.-158    	; 0x393a <__vector_17+0x3b8>
    39d8:	a6 cf       	rjmp	.-180    	; 0x3926 <__vector_17+0x3a4>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    39da:	25 89       	ldd	r18, Z+21	; 0x15
    39dc:	36 89       	ldd	r19, Z+22	; 0x16
    39de:	47 89       	ldd	r20, Z+23	; 0x17
    39e0:	50 8d       	ldd	r21, Z+24	; 0x18
    39e2:	80 91 77 05 	lds	r24, 0x0577
    39e6:	90 91 78 05 	lds	r25, 0x0578
    39ea:	a0 91 79 05 	lds	r26, 0x0579
    39ee:	b0 91 7a 05 	lds	r27, 0x057A
    39f2:	28 17       	cp	r18, r24
    39f4:	39 07       	cpc	r19, r25
    39f6:	4a 07       	cpc	r20, r26
    39f8:	5b 07       	cpc	r21, r27
    39fa:	09 f4       	brne	.+2      	; 0x39fe <__vector_17+0x47c>
    39fc:	a2 cf       	rjmp	.-188    	; 0x3942 <__vector_17+0x3c0>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    39fe:	20 93 77 05 	sts	0x0577, r18
    3a02:	30 93 78 05 	sts	0x0578, r19
    3a06:	40 93 79 05 	sts	0x0579, r20
    3a0a:	50 93 7a 05 	sts	0x057A, r21
    3a0e:	95 cf       	rjmp	.-214    	; 0x393a <__vector_17+0x3b8>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    3a10:	0e 94 ae 0b 	call	0x175c	; 0x175c <plan_get_current_block>
    3a14:	ec 01       	movw	r28, r24
    3a16:	90 93 57 05 	sts	0x0557, r25
    3a1a:	80 93 56 05 	sts	0x0556, r24
    if (current_block != NULL) {
    3a1e:	00 97       	sbiw	r24, 0x00	; 0
    3a20:	09 f4       	brne	.+2      	; 0x3a24 <__vector_17+0x4a2>
    3a22:	52 c0       	rjmp	.+164    	; 0x3ac8 <__vector_17+0x546>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3a24:	6d a9       	ldd	r22, Y+53	; 0x35
    3a26:	7e a9       	ldd	r23, Y+54	; 0x36
    3a28:	8f a9       	ldd	r24, Y+55	; 0x37
    3a2a:	98 ad       	ldd	r25, Y+56	; 0x38
    3a2c:	60 93 77 05 	sts	0x0577, r22
    3a30:	70 93 78 05 	sts	0x0578, r23
    3a34:	80 93 79 05 	sts	0x0579, r24
    3a38:	90 93 7a 05 	sts	0x057A, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    3a3c:	10 92 73 05 	sts	0x0573, r1
    3a40:	10 92 74 05 	sts	0x0574, r1
    3a44:	10 92 75 05 	sts	0x0575, r1
    3a48:	10 92 76 05 	sts	0x0576, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    3a4c:	0e 94 85 18 	call	0x310a	; 0x310a <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    3a50:	89 89       	ldd	r24, Y+17	; 0x11
    3a52:	9a 89       	ldd	r25, Y+18	; 0x12
    3a54:	ab 89       	ldd	r26, Y+19	; 0x13
    3a56:	bc 89       	ldd	r27, Y+20	; 0x14
    3a58:	b5 95       	asr	r27
    3a5a:	a7 95       	ror	r26
    3a5c:	97 95       	ror	r25
    3a5e:	87 95       	ror	r24
    3a60:	b0 95       	com	r27
    3a62:	a0 95       	com	r26
    3a64:	90 95       	com	r25
    3a66:	81 95       	neg	r24
    3a68:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6a:	af 4f       	sbci	r26, 0xFF	; 255
    3a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a6e:	80 93 59 05 	sts	0x0559, r24
    3a72:	90 93 5a 05 	sts	0x055A, r25
    3a76:	a0 93 5b 05 	sts	0x055B, r26
    3a7a:	b0 93 5c 05 	sts	0x055C, r27
      counter_y = counter_x;
    3a7e:	80 93 5d 05 	sts	0x055D, r24
    3a82:	90 93 5e 05 	sts	0x055E, r25
    3a86:	a0 93 5f 05 	sts	0x055F, r26
    3a8a:	b0 93 60 05 	sts	0x0560, r27
      counter_z = counter_x;
    3a8e:	80 93 61 05 	sts	0x0561, r24
    3a92:	90 93 62 05 	sts	0x0562, r25
    3a96:	a0 93 63 05 	sts	0x0563, r26
    3a9a:	b0 93 64 05 	sts	0x0564, r27
      counter_c = counter_x;
    3a9e:	80 93 65 05 	sts	0x0565, r24
    3aa2:	90 93 66 05 	sts	0x0566, r25
    3aa6:	a0 93 67 05 	sts	0x0567, r26
    3aaa:	b0 93 68 05 	sts	0x0568, r27
      step_events_completed = 0;
    3aae:	10 92 69 05 	sts	0x0569, r1
    3ab2:	10 92 6a 05 	sts	0x056A, r1
    3ab6:	10 92 6b 05 	sts	0x056B, r1
    3aba:	10 92 6c 05 	sts	0x056C, r1
    3abe:	e0 91 56 05 	lds	r30, 0x0556
    3ac2:	f0 91 57 05 	lds	r31, 0x0557
    3ac6:	d9 cd       	rjmp	.-1102   	; 0x367a <__vector_17+0xf8>
    } else {

      DISABLE_STEPPER_DRIVER_INTERRUPT();
    3ac8:	80 91 6f 00 	lds	r24, 0x006F
    3acc:	8d 7f       	andi	r24, 0xFD	; 253
    3ace:	80 93 6f 00 	sts	0x006F, r24

		// set ack to host, move has finished
	  ackHost = 'X';
    3ad2:	88 e5       	ldi	r24, 0x58	; 88
    3ad4:	80 93 54 05 	sts	0x0554, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    3ad8:	10 92 58 05 	sts	0x0558, r1
    3adc:	a7 ce       	rjmp	.-690    	; 0x382c <__vector_17+0x2aa>

00003ade <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3ade:	ef 92       	push	r14
    3ae0:	ff 92       	push	r15
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	7b 01       	movw	r14, r22
    3ae8:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    3aea:	22 e0       	ldi	r18, 0x02	; 2
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e0       	ldi	r20, 0x00	; 0
    3af0:	50 e0       	ldi	r21, 0x00	; 0
    3af2:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__divmodsi4>
    3af6:	20 5c       	subi	r18, 0xC0	; 192
    3af8:	3d 4b       	sbci	r19, 0xBD	; 189
    3afa:	40 4f       	sbci	r20, 0xF0	; 240
    3afc:	5f 4f       	sbci	r21, 0xFF	; 255
    3afe:	ca 01       	movw	r24, r20
    3b00:	b9 01       	movw	r22, r18
    3b02:	a8 01       	movw	r20, r16
    3b04:	97 01       	movw	r18, r14
    3b06:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <__udivmodsi4>
    3b0a:	c9 01       	movw	r24, r18
    3b0c:	da 01       	movw	r26, r20
    3b0e:	01 97       	sbiw	r24, 0x01	; 1
    3b10:	a1 09       	sbc	r26, r1
    3b12:	b1 09       	sbc	r27, r1
    3b14:	29 2f       	mov	r18, r25
    3b16:	3a 2f       	mov	r19, r26
    3b18:	4b 2f       	mov	r20, r27
    3b1a:	55 27       	eor	r21, r21
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	a1 1d       	adc	r26, r1
    3b20:	b1 1d       	adc	r27, r1
    3b22:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3b26:	81 50       	subi	r24, 0x01	; 1
    3b28:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3b2c:	e0 ec       	ldi	r30, 0xC0	; 192
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	80 81       	ld	r24, Z
    3b32:	8d 7f       	andi	r24, 0xFD	; 253
    3b34:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    3b36:	e1 ec       	ldi	r30, 0xC1	; 193
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	80 81       	ld	r24, Z
    3b3c:	80 61       	ori	r24, 0x10	; 16
    3b3e:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3b40:	80 81       	ld	r24, Z
    3b42:	88 60       	ori	r24, 0x08	; 8
    3b44:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3b46:	80 81       	ld	r24, Z
    3b48:	80 68       	ori	r24, 0x80	; 128
    3b4a:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3b4c:	1f 91       	pop	r17
    3b4e:	0f 91       	pop	r16
    3b50:	ff 90       	pop	r15
    3b52:	ef 90       	pop	r14
    3b54:	08 95       	ret

00003b56 <serialWrite>:

void serialWrite(unsigned char c)
{
    3b56:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3b58:	80 91 c0 00 	lds	r24, 0x00C0
    3b5c:	85 ff       	sbrs	r24, 5
    3b5e:	fc cf       	rjmp	.-8      	; 0x3b58 <serialWrite+0x2>
		;
	UDR0 = c;
    3b60:	90 93 c6 00 	sts	0x00C6, r25
}
    3b64:	08 95       	ret

00003b66 <serialAvailable>:

int serialAvailable()
{
    3b66:	80 91 7b 05 	lds	r24, 0x057B
    3b6a:	90 91 7c 05 	lds	r25, 0x057C
    3b6e:	80 50       	subi	r24, 0x00	; 0
    3b70:	9f 4f       	sbci	r25, 0xFF	; 255
    3b72:	20 91 7d 05 	lds	r18, 0x057D
    3b76:	30 91 7e 05 	lds	r19, 0x057E
    3b7a:	82 1b       	sub	r24, r18
    3b7c:	93 0b       	sbc	r25, r19
    3b7e:	60 e0       	ldi	r22, 0x00	; 0
    3b80:	71 e0       	ldi	r23, 0x01	; 1
    3b82:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3b86:	08 95       	ret

00003b88 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3b88:	40 91 7d 05 	lds	r20, 0x057D
    3b8c:	50 91 7e 05 	lds	r21, 0x057E
    3b90:	80 91 7b 05 	lds	r24, 0x057B
    3b94:	90 91 7c 05 	lds	r25, 0x057C
    3b98:	84 17       	cp	r24, r20
    3b9a:	95 07       	cpc	r25, r21
    3b9c:	89 f0       	breq	.+34     	; 0x3bc0 <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3b9e:	fa 01       	movw	r30, r20
    3ba0:	e1 58       	subi	r30, 0x81	; 129
    3ba2:	fa 4f       	sbci	r31, 0xFA	; 250
    3ba4:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3ba6:	ca 01       	movw	r24, r20
    3ba8:	01 96       	adiw	r24, 0x01	; 1
    3baa:	60 e0       	ldi	r22, 0x00	; 0
    3bac:	71 e0       	ldi	r23, 0x01	; 1
    3bae:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
    3bb2:	90 93 7e 05 	sts	0x057E, r25
    3bb6:	80 93 7d 05 	sts	0x057D, r24
		return c;
    3bba:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3bbc:	c9 01       	movw	r24, r18
    3bbe:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3bc0:	2f ef       	ldi	r18, 0xFF	; 255
    3bc2:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3bc4:	c9 01       	movw	r24, r18
    3bc6:	08 95       	ret

00003bc8 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3bc8:	80 91 7d 05 	lds	r24, 0x057D
    3bcc:	90 91 7e 05 	lds	r25, 0x057E
    3bd0:	90 93 7c 05 	sts	0x057C, r25
    3bd4:	80 93 7b 05 	sts	0x057B, r24
}
    3bd8:	08 95       	ret

00003bda <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3bda:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3bdc:	80 91 c0 00 	lds	r24, 0x00C0
    3be0:	85 ff       	sbrs	r24, 5
    3be2:	fc cf       	rjmp	.-8      	; 0x3bdc <printByte+0x2>
		;
	UDR0 = c;
    3be4:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3be8:	08 95       	ret

00003bea <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3bea:	fc 01       	movw	r30, r24
	while (*s)
    3bec:	90 81       	ld	r25, Z
    3bee:	99 23       	and	r25, r25
    3bf0:	51 f0       	breq	.+20     	; 0x3c06 <printString+0x1c>
		printByte(*s++);
    3bf2:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3bf4:	80 91 c0 00 	lds	r24, 0x00C0
    3bf8:	85 ff       	sbrs	r24, 5
    3bfa:	fc cf       	rjmp	.-8      	; 0x3bf4 <printString+0xa>
		;
	UDR0 = c;
    3bfc:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3c00:	90 81       	ld	r25, Z
    3c02:	99 23       	and	r25, r25
    3c04:	b1 f7       	brne	.-20     	; 0x3bf2 <printString+0x8>
    3c06:	08 95       	ret

00003c08 <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3c08:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3c0a:	94 91       	lpm	r25, Z+
    3c0c:	99 23       	and	r25, r25
    3c0e:	51 f0       	breq	.+20     	; 0x3c24 <printPgmString+0x1c>
    3c10:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c12:	80 91 c0 00 	lds	r24, 0x00C0
    3c16:	85 ff       	sbrs	r24, 5
    3c18:	fc cf       	rjmp	.-8      	; 0x3c12 <printPgmString+0xa>
		;
	UDR0 = c;
    3c1a:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3c1e:	94 91       	lpm	r25, Z+
    3c20:	99 23       	and	r25, r25
    3c22:	b1 f7       	brne	.-20     	; 0x3c10 <printPgmString+0x8>
    3c24:	08 95       	ret

00003c26 <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3c26:	2f 92       	push	r2
    3c28:	3f 92       	push	r3
    3c2a:	4f 92       	push	r4
    3c2c:	5f 92       	push	r5
    3c2e:	6f 92       	push	r6
    3c30:	7f 92       	push	r7
    3c32:	8f 92       	push	r8
    3c34:	9f 92       	push	r9
    3c36:	af 92       	push	r10
    3c38:	bf 92       	push	r11
    3c3a:	cf 92       	push	r12
    3c3c:	df 92       	push	r13
    3c3e:	ef 92       	push	r14
    3c40:	ff 92       	push	r15
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	df 93       	push	r29
    3c48:	cf 93       	push	r28
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
    3c4e:	a0 97       	sbiw	r28, 0x20	; 32
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	de bf       	out	0x3e, r29	; 62
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	6b 01       	movw	r12, r22
    3c5c:	7c 01       	movw	r14, r24
    3c5e:	29 01       	movw	r4, r18
    3c60:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3c62:	61 15       	cp	r22, r1
    3c64:	71 05       	cpc	r23, r1
    3c66:	81 05       	cpc	r24, r1
    3c68:	91 05       	cpc	r25, r1
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <printIntegerInBase+0x48>
    3c6c:	50 c0       	rjmp	.+160    	; 0x3d0e <printIntegerInBase+0xe8>
		printByte('0');
		return;
    3c6e:	88 24       	eor	r8, r8
    3c70:	99 24       	eor	r9, r9
    3c72:	54 01       	movw	r10, r8
    3c74:	1e 01       	movw	r2, r28
    3c76:	08 94       	sec
    3c78:	21 1c       	adc	r2, r1
    3c7a:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3c7c:	81 01       	movw	r16, r2
    3c7e:	08 0d       	add	r16, r8
    3c80:	19 1d       	adc	r17, r9
    3c82:	c7 01       	movw	r24, r14
    3c84:	b6 01       	movw	r22, r12
    3c86:	a3 01       	movw	r20, r6
    3c88:	92 01       	movw	r18, r4
    3c8a:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <__udivmodsi4>
    3c8e:	f8 01       	movw	r30, r16
    3c90:	60 83       	st	Z, r22
    3c92:	08 94       	sec
    3c94:	81 1c       	adc	r8, r1
    3c96:	91 1c       	adc	r9, r1
    3c98:	a1 1c       	adc	r10, r1
    3c9a:	b1 1c       	adc	r11, r1
		n /= base;
    3c9c:	c7 01       	movw	r24, r14
    3c9e:	b6 01       	movw	r22, r12
    3ca0:	a3 01       	movw	r20, r6
    3ca2:	92 01       	movw	r18, r4
    3ca4:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <__udivmodsi4>
    3ca8:	c9 01       	movw	r24, r18
    3caa:	da 01       	movw	r26, r20
    3cac:	6c 01       	movw	r12, r24
    3cae:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3cb0:	c1 14       	cp	r12, r1
    3cb2:	d1 04       	cpc	r13, r1
    3cb4:	e1 04       	cpc	r14, r1
    3cb6:	f1 04       	cpc	r15, r1
    3cb8:	09 f7       	brne	.-62     	; 0x3c7c <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3cba:	81 14       	cp	r8, r1
    3cbc:	91 04       	cpc	r9, r1
    3cbe:	a1 04       	cpc	r10, r1
    3cc0:	b1 04       	cpc	r11, r1
    3cc2:	61 f1       	breq	.+88     	; 0x3d1c <printIntegerInBase+0xf6>
    3cc4:	91 01       	movw	r18, r2
    3cc6:	28 0d       	add	r18, r8
    3cc8:	39 1d       	adc	r19, r9
    3cca:	d5 01       	movw	r26, r10
    3ccc:	c4 01       	movw	r24, r8
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	a1 09       	sbc	r26, r1
    3cd2:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    3cd4:	ac 01       	movw	r20, r24
    3cd6:	48 19       	sub	r20, r8
    3cd8:	59 09       	sbc	r21, r9
    3cda:	fa 01       	movw	r30, r20
    3cdc:	e2 0f       	add	r30, r18
    3cde:	f3 1f       	adc	r31, r19
    3ce0:	e0 81       	ld	r30, Z
    3ce2:	ea 30       	cpi	r30, 0x0A	; 10
    3ce4:	90 f4       	brcc	.+36     	; 0x3d0a <printIntegerInBase+0xe4>
    3ce6:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3ce8:	80 91 c0 00 	lds	r24, 0x00C0
    3cec:	85 ff       	sbrs	r24, 5
    3cee:	fc cf       	rjmp	.-8      	; 0x3ce8 <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    3cf0:	e0 93 c6 00 	sts	0x00C6, r30
    3cf4:	21 50       	subi	r18, 0x01	; 1
    3cf6:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3cf8:	22 16       	cp	r2, r18
    3cfa:	33 06       	cpc	r3, r19
    3cfc:	79 f0       	breq	.+30     	; 0x3d1c <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    3cfe:	fa 01       	movw	r30, r20
    3d00:	e2 0f       	add	r30, r18
    3d02:	f3 1f       	adc	r31, r19
    3d04:	e0 81       	ld	r30, Z
    3d06:	ea 30       	cpi	r30, 0x0A	; 10
    3d08:	70 f3       	brcs	.-36     	; 0x3ce6 <printIntegerInBase+0xc0>
    3d0a:	e9 5c       	subi	r30, 0xC9	; 201
    3d0c:	ed cf       	rjmp	.-38     	; 0x3ce8 <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3d0e:	80 91 c0 00 	lds	r24, 0x00C0
    3d12:	85 ff       	sbrs	r24, 5
    3d14:	fc cf       	rjmp	.-8      	; 0x3d0e <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    3d16:	80 e3       	ldi	r24, 0x30	; 48
    3d18:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3d1c:	a0 96       	adiw	r28, 0x20	; 32
    3d1e:	0f b6       	in	r0, 0x3f	; 63
    3d20:	f8 94       	cli
    3d22:	de bf       	out	0x3e, r29	; 62
    3d24:	0f be       	out	0x3f, r0	; 63
    3d26:	cd bf       	out	0x3d, r28	; 61
    3d28:	cf 91       	pop	r28
    3d2a:	df 91       	pop	r29
    3d2c:	1f 91       	pop	r17
    3d2e:	0f 91       	pop	r16
    3d30:	ff 90       	pop	r15
    3d32:	ef 90       	pop	r14
    3d34:	df 90       	pop	r13
    3d36:	cf 90       	pop	r12
    3d38:	bf 90       	pop	r11
    3d3a:	af 90       	pop	r10
    3d3c:	9f 90       	pop	r9
    3d3e:	8f 90       	pop	r8
    3d40:	7f 90       	pop	r7
    3d42:	6f 90       	pop	r6
    3d44:	5f 90       	pop	r5
    3d46:	4f 90       	pop	r4
    3d48:	3f 90       	pop	r3
    3d4a:	2f 90       	pop	r2
    3d4c:	08 95       	ret

00003d4e <printInteger>:

void printInteger(long n)
{
    3d4e:	9b 01       	movw	r18, r22
    3d50:	ac 01       	movw	r20, r24
	if (n < 0) {
    3d52:	97 fd       	sbrc	r25, 7
    3d54:	09 c0       	rjmp	.+18     	; 0x3d68 <printInteger+0x1a>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    3d56:	ca 01       	movw	r24, r20
    3d58:	b9 01       	movw	r22, r18
    3d5a:	2a e0       	ldi	r18, 0x0A	; 10
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e0       	ldi	r20, 0x00	; 0
    3d60:	50 e0       	ldi	r21, 0x00	; 0
    3d62:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <printIntegerInBase>
}
    3d66:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3d68:	80 91 c0 00 	lds	r24, 0x00C0
    3d6c:	85 ff       	sbrs	r24, 5
    3d6e:	fc cf       	rjmp	.-8      	; 0x3d68 <printInteger+0x1a>
		;
	UDR0 = c;
    3d70:	8d e2       	ldi	r24, 0x2D	; 45
    3d72:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3d76:	50 95       	com	r21
    3d78:	40 95       	com	r20
    3d7a:	30 95       	com	r19
    3d7c:	21 95       	neg	r18
    3d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d80:	4f 4f       	sbci	r20, 0xFF	; 255
    3d82:	5f 4f       	sbci	r21, 0xFF	; 255
    3d84:	e8 cf       	rjmp	.-48     	; 0x3d56 <printInteger+0x8>

00003d86 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3d86:	22 e0       	ldi	r18, 0x02	; 2
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	40 e0       	ldi	r20, 0x00	; 0
    3d8c:	50 e0       	ldi	r21, 0x00	; 0
    3d8e:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <printIntegerInBase>
  }
    3d92:	08 95       	ret

00003d94 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3d94:	ef 92       	push	r14
    3d96:	ff 92       	push	r15
    3d98:	0f 93       	push	r16
    3d9a:	1f 93       	push	r17
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	00 d0       	rcall	.+0      	; 0x3da2 <printFloat+0xe>
    3da2:	0f 92       	push	r0
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3da8:	ae 01       	movw	r20, r28
    3daa:	4f 5f       	subi	r20, 0xFF	; 255
    3dac:	5f 4f       	sbci	r21, 0xFF	; 255
    3dae:	0e 94 92 2e 	call	0x5d24	; 0x5d24 <modf>
    3db2:	7b 01       	movw	r14, r22
    3db4:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3db6:	69 81       	ldd	r22, Y+1	; 0x01
    3db8:	7a 81       	ldd	r23, Y+2	; 0x02
    3dba:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbe:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
    3dc2:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3dc6:	80 91 c0 00 	lds	r24, 0x00C0
    3dca:	85 ff       	sbrs	r24, 5
    3dcc:	fc cf       	rjmp	.-8      	; 0x3dc6 <printFloat+0x32>
		;
	UDR0 = c;
    3dce:	8e e2       	ldi	r24, 0x2E	; 46
    3dd0:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3dd4:	c8 01       	movw	r24, r16
    3dd6:	b7 01       	movw	r22, r14
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	4a e7       	ldi	r20, 0x7A	; 122
    3dde:	54 e4       	ldi	r21, 0x44	; 68
    3de0:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    3de4:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <round>
    3de8:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fixsfsi>
    3dec:	97 fd       	sbrc	r25, 7
    3dee:	0d c0       	rjmp	.+26     	; 0x3e0a <printFloat+0x76>
    3df0:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <printInteger>
}
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	ff 90       	pop	r15
    3e06:	ef 90       	pop	r14
    3e08:	08 95       	ret
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3e0a:	90 95       	com	r25
    3e0c:	80 95       	com	r24
    3e0e:	70 95       	com	r23
    3e10:	61 95       	neg	r22
    3e12:	7f 4f       	sbci	r23, 0xFF	; 255
    3e14:	8f 4f       	sbci	r24, 0xFF	; 255
    3e16:	9f 4f       	sbci	r25, 0xFF	; 255
    3e18:	eb cf       	rjmp	.-42     	; 0x3df0 <printFloat+0x5c>

00003e1a <__vector_25>:
	rx_buffer_head = rx_buffer_tail;
}

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3e1a:	1f 92       	push	r1
    3e1c:	0f 92       	push	r0
    3e1e:	0f b6       	in	r0, 0x3f	; 63
    3e20:	0f 92       	push	r0
    3e22:	0b b6       	in	r0, 0x3b	; 59
    3e24:	0f 92       	push	r0
    3e26:	11 24       	eor	r1, r1
    3e28:	2f 93       	push	r18
    3e2a:	3f 93       	push	r19
    3e2c:	4f 93       	push	r20
    3e2e:	5f 93       	push	r21
    3e30:	6f 93       	push	r22
    3e32:	7f 93       	push	r23
    3e34:	8f 93       	push	r24
    3e36:	9f 93       	push	r25
    3e38:	af 93       	push	r26
    3e3a:	bf 93       	push	r27
    3e3c:	ef 93       	push	r30
    3e3e:	ff 93       	push	r31
	unsigned char c = UDR0;
    3e40:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3e44:	e0 91 7b 05 	lds	r30, 0x057B
    3e48:	f0 91 7c 05 	lds	r31, 0x057C
    3e4c:	cf 01       	movw	r24, r30
    3e4e:	01 96       	adiw	r24, 0x01	; 1
    3e50:	60 e0       	ldi	r22, 0x00	; 0
    3e52:	71 e0       	ldi	r23, 0x01	; 1
    3e54:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
    3e58:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3e5a:	80 91 7d 05 	lds	r24, 0x057D
    3e5e:	90 91 7e 05 	lds	r25, 0x057E
    3e62:	28 17       	cp	r18, r24
    3e64:	39 07       	cpc	r19, r25
    3e66:	39 f0       	breq	.+14     	; 0x3e76 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3e68:	e1 58       	subi	r30, 0x81	; 129
    3e6a:	fa 4f       	sbci	r31, 0xFA	; 250
    3e6c:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3e6e:	30 93 7c 05 	sts	0x057C, r19
    3e72:	20 93 7b 05 	sts	0x057B, r18
	}

	if( c == 0x0ff ) {
    3e76:	4f 3f       	cpi	r20, 0xFF	; 255
    3e78:	99 f0       	breq	.+38     	; 0x3ea0 <__vector_25+0x86>
		gHomed = 0 ;
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3e7a:	ff 91       	pop	r31
    3e7c:	ef 91       	pop	r30
    3e7e:	bf 91       	pop	r27
    3e80:	af 91       	pop	r26
    3e82:	9f 91       	pop	r25
    3e84:	8f 91       	pop	r24
    3e86:	7f 91       	pop	r23
    3e88:	6f 91       	pop	r22
    3e8a:	5f 91       	pop	r21
    3e8c:	4f 91       	pop	r20
    3e8e:	3f 91       	pop	r19
    3e90:	2f 91       	pop	r18
    3e92:	0f 90       	pop	r0
    3e94:	0b be       	out	0x3b, r0	; 59
    3e96:	0f 90       	pop	r0
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	0f 90       	pop	r0
    3e9c:	1f 90       	pop	r1
    3e9e:	18 95       	reti
		rx_buffer_head = i;
	}

	if( c == 0x0ff ) {
		// shut off servo interrupt
		cli();
    3ea0:	f8 94       	cli
		st_disable();
    3ea2:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <st_disable>
		// not homed
		gHomed = 0 ;
    3ea6:	10 92 55 05 	sts	0x0555, r1
    3eaa:	e7 cf       	rjmp	.-50     	; 0x3e7a <__vector_25+0x60>

00003eac <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    3eac:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    3eae:	e7 e0       	ldi	r30, 0x07	; 7
    3eb0:	f1 e0       	ldi	r31, 0x01	; 1
    3eb2:	80 81       	ld	r24, Z
    3eb4:	81 60       	ori	r24, 0x01	; 1
    3eb6:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3eb8:	80 81       	ld	r24, Z
    3eba:	82 60       	ori	r24, 0x02	; 2
    3ebc:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3ebe:	80 81       	ld	r24, Z
    3ec0:	84 60       	ori	r24, 0x04	; 4
    3ec2:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3ec4:	80 81       	ld	r24, Z
    3ec6:	88 60       	ori	r24, 0x08	; 8
    3ec8:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3eca:	80 81       	ld	r24, Z
    3ecc:	80 64       	ori	r24, 0x40	; 64
    3ece:	80 83       	st	Z, r24

// initialise PORT as well

}
    3ed0:	08 95       	ret

00003ed2 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	08 95       	ret

00003ed6 <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    3eda:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3edc:	80 91 55 05 	lds	r24, 0x0555
    3ee0:	88 23       	and	r24, r24
    3ee2:	19 f4       	brne	.+6      	; 0x3eea <atc_fire+0x14>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    3ef0:	20 97       	sbiw	r28, 0x00	; 0
    3ef2:	29 f1       	breq	.+74     	; 0x3f3e <atc_fire+0x68>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3ef4:	80 91 08 01 	lds	r24, 0x0108
    3ef8:	81 60       	ori	r24, 0x01	; 1
    3efa:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3efe:	c3 30       	cpi	r28, 0x03	; 3
    3f00:	d1 05       	cpc	r29, r1
    3f02:	09 f4       	brne	.+2      	; 0x3f06 <atc_fire+0x30>
    3f04:	46 c0       	rjmp	.+140    	; 0x3f92 <atc_fire+0xbc>
    3f06:	c4 30       	cpi	r28, 0x04	; 4
    3f08:	d1 05       	cpc	r29, r1
    3f0a:	8c f5       	brge	.+98     	; 0x3f6e <atc_fire+0x98>
    3f0c:	c1 30       	cpi	r28, 0x01	; 1
    3f0e:	d1 05       	cpc	r29, r1
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <atc_fire+0x3e>
    3f12:	6d c0       	rjmp	.+218    	; 0x3fee <atc_fire+0x118>
    3f14:	22 97       	sbiw	r28, 0x02	; 2
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <atc_fire+0x44>
    3f18:	66 c0       	rjmp	.+204    	; 0x3fe6 <atc_fire+0x110>
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3f1a:	80 91 08 01 	lds	r24, 0x0108
    3f1e:	8e 7f       	andi	r24, 0xFE	; 254
    3f20:	80 93 08 01 	sts	0x0108, r24
    3f24:	28 ee       	ldi	r18, 0xE8	; 232
    3f26:	33 e0       	ldi	r19, 0x03	; 3
    3f28:	40 e9       	ldi	r20, 0x90	; 144
    3f2a:	51 e0       	ldi	r21, 0x01	; 1
    3f2c:	ca 01       	movw	r24, r20
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <atc_fire+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f32:	21 50       	subi	r18, 0x01	; 1
    3f34:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f36:	d1 f7       	brne	.-12     	; 0x3f2c <atc_fire+0x56>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3f38:	df 91       	pop	r29
    3f3a:	cf 91       	pop	r28
    3f3c:	08 95       	ret

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3f3e:	80 91 08 01 	lds	r24, 0x0108
    3f42:	81 60       	ori	r24, 0x01	; 1
    3f44:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3f48:	80 91 08 01 	lds	r24, 0x0108
    3f4c:	82 60       	ori	r24, 0x02	; 2
    3f4e:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3f52:	80 91 08 01 	lds	r24, 0x0108
    3f56:	84 60       	ori	r24, 0x04	; 4
    3f58:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3f5c:	80 91 08 01 	lds	r24, 0x0108
    3f60:	88 60       	ori	r24, 0x08	; 8
    3f62:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3f66:	80 e0       	ldi	r24, 0x00	; 0
    3f68:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>
    3f6c:	bb cf       	rjmp	.-138    	; 0x3ee4 <atc_fire+0xe>
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3f6e:	c5 30       	cpi	r28, 0x05	; 5
    3f70:	d1 05       	cpc	r29, r1
    3f72:	09 f4       	brne	.+2      	; 0x3f76 <atc_fire+0xa0>
    3f74:	45 c0       	rjmp	.+138    	; 0x4000 <atc_fire+0x12a>
    3f76:	c5 30       	cpi	r28, 0x05	; 5
    3f78:	d1 05       	cpc	r29, r1
    3f7a:	04 f1       	brlt	.+64     	; 0x3fbc <atc_fire+0xe6>
    3f7c:	26 97       	sbiw	r28, 0x06	; 6
    3f7e:	69 f6       	brne	.-102    	; 0x3f1a <atc_fire+0x44>
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3f80:	80 91 08 01 	lds	r24, 0x0108
    3f84:	82 60       	ori	r24, 0x02	; 2
    3f86:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3f8a:	80 91 08 01 	lds	r24, 0x0108
    3f8e:	8b 7f       	andi	r24, 0xFB	; 251
    3f90:	1d c0       	rjmp	.+58     	; 0x3fcc <atc_fire+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3f92:	80 91 08 01 	lds	r24, 0x0108
    3f96:	8d 7f       	andi	r24, 0xFD	; 253
    3f98:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3f9c:	80 91 08 01 	lds	r24, 0x0108
    3fa0:	84 60       	ori	r24, 0x04	; 4
    3fa2:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3fa6:	80 91 08 01 	lds	r24, 0x0108
    3faa:	87 7f       	andi	r24, 0xF7	; 247
    3fac:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3fb0:	80 91 08 01 	lds	r24, 0x0108
    3fb4:	8e 7f       	andi	r24, 0xFE	; 254
    3fb6:	80 93 08 01 	sts	0x0108, r24
    3fba:	af cf       	rjmp	.-162    	; 0x3f1a <atc_fire+0x44>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3fbc:	80 91 08 01 	lds	r24, 0x0108
    3fc0:	8d 7f       	andi	r24, 0xFD	; 253
    3fc2:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3fc6:	80 91 08 01 	lds	r24, 0x0108
    3fca:	84 60       	ori	r24, 0x04	; 4
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3fcc:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3fd0:	80 91 08 01 	lds	r24, 0x0108
    3fd4:	88 60       	ori	r24, 0x08	; 8
    3fd6:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3fda:	80 91 08 01 	lds	r24, 0x0108
    3fde:	8e 7f       	andi	r24, 0xFE	; 254
    3fe0:	80 93 08 01 	sts	0x0108, r24
    3fe4:	9a cf       	rjmp	.-204    	; 0x3f1a <atc_fire+0x44>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3fe6:	80 91 08 01 	lds	r24, 0x0108
    3fea:	8d 7f       	andi	r24, 0xFD	; 253
    3fec:	cc cf       	rjmp	.-104    	; 0x3f86 <atc_fire+0xb0>
 */
 	switch( tool ) {
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3fee:	80 91 08 01 	lds	r24, 0x0108
    3ff2:	8d 7f       	andi	r24, 0xFD	; 253
    3ff4:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3ff8:	80 91 08 01 	lds	r24, 0x0108
    3ffc:	8b 7f       	andi	r24, 0xFB	; 251
    3ffe:	d1 cf       	rjmp	.-94     	; 0x3fa2 <atc_fire+0xcc>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    4000:	80 91 08 01 	lds	r24, 0x0108
    4004:	82 60       	ori	r24, 0x02	; 2
    4006:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    400a:	80 91 08 01 	lds	r24, 0x0108
    400e:	8b 7f       	andi	r24, 0xFB	; 251
    4010:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    4014:	80 91 08 01 	lds	r24, 0x0108
    4018:	87 7f       	andi	r24, 0xF7	; 247
    401a:	80 93 08 01 	sts	0x0108, r24
    401e:	7d cf       	rjmp	.-262    	; 0x3f1a <atc_fire+0x44>

00004020 <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    4020:	1f 93       	push	r17
    4022:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    4024:	80 91 55 05 	lds	r24, 0x0555
    4028:	88 23       	and	r24, r24
    402a:	19 f4       	brne	.+6      	; 0x4032 <DropTool+0x12>
    402c:	83 e6       	ldi	r24, 0x63	; 99
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    402e:	1f 91       	pop	r17
    4030:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    403a:	88 23       	and	r24, r24
    403c:	19 f4       	brne	.+6      	; 0x4044 <DropTool+0x24>
    403e:	85 e0       	ldi	r24, 0x05	; 5
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    4040:	1f 91       	pop	r17
    4042:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    4044:	81 2f       	mov	r24, r17
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <atc_fire>

	// head back up
	head_down( 0 );
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    405c:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    405e:	1f 91       	pop	r17
    4060:	08 95       	ret

00004062 <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    4062:	1f 93       	push	r17
    4064:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    4066:	80 91 55 05 	lds	r24, 0x0555
    406a:	88 23       	and	r24, r24
    406c:	19 f4       	brne	.+6      	; 0x4074 <PickupTool+0x12>
    406e:	83 e6       	ldi	r24, 0x63	; 99
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    4070:	1f 91       	pop	r17
    4072:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    407c:	88 23       	and	r24, r24
    407e:	19 f4       	brne	.+6      	; 0x4086 <PickupTool+0x24>
    4080:	85 e0       	ldi	r24, 0x05	; 5
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    4082:	1f 91       	pop	r17
    4084:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    4086:	81 2f       	mov	r24, r17
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>

	// head back up
	head_down( 0 );
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    4096:	80 e9       	ldi	r24, 0x90	; 144
    4098:	91 e0       	ldi	r25, 0x01	; 1
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	f1 f7       	brne	.-4      	; 0x409a <PickupTool+0x38>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 56 20 	call	0x40ac	; 0x40ac <atc_change>
    40a6:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    40a8:	1f 91       	pop	r17
    40aa:	08 95       	ret

000040ac <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
    40b0:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    40b2:	80 91 55 05 	lds	r24, 0x0555
    40b6:	88 23       	and	r24, r24
    40b8:	71 f0       	breq	.+28     	; 0x40d6 <atc_change+0x2a>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    40ba:	cf 3f       	cpi	r28, 0xFF	; 255
    40bc:	d1 05       	cpc	r29, r1
    40be:	39 f0       	breq	.+14     	; 0x40ce <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    40c0:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <run_vacuum_test>
    40c4:	88 23       	and	r24, r24
    40c6:	59 f0       	breq	.+22     	; 0x40de <atc_change+0x32>
		PickupTool(tool);
	} else { 
		DropTool(tool);
    40c8:	8c 2f       	mov	r24, r28
    40ca:	0e 94 10 20 	call	0x4020	; 0x4020 <DropTool>
    40ce:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	08 95       	ret

*/

unsigned char atc_change(int tool)
{
	if( gHomed == FALSE  ){ 
    40d6:	83 e6       	ldi	r24, 0x63	; 99
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    40d8:	df 91       	pop	r29
    40da:	cf 91       	pop	r28
    40dc:	08 95       	ret
	if( tool == toolId ) {
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
		PickupTool(tool);
    40de:	8c 2f       	mov	r24, r28
    40e0:	0e 94 31 20 	call	0x4062	; 0x4062 <PickupTool>
    40e4:	80 e0       	ldi	r24, 0x00	; 0
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	08 95       	ret

000040ec <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    40ec:	80 91 55 05 	lds	r24, 0x0555
    40f0:	88 23       	and	r24, r24
    40f2:	11 f4       	brne	.+4      	; 0x40f8 <check_for_tool+0xc>
    40f4:	83 e6       	ldi	r24, 0x63	; 99
    40f6:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    40f8:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    40fc:	88 23       	and	r24, r24
    40fe:	a1 f4       	brne	.+40     	; 0x4128 <check_for_tool+0x3c>
		head_down( FALSE) ;
	}

	goto_vacpad();
    4100:	0e 94 16 22 	call	0x442c	; 0x442c <goto_vacpad>
	
	head_down(TRUE);
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
	
	vacuum(TRUE);
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>

	if( vacuum_state() == TRUE )  {
    4114:	0e 94 d6 21 	call	0x43ac	; 0x43ac <vacuum_state>
    4118:	81 30       	cpi	r24, 0x01	; 1
    411a:	59 f0       	breq	.+22     	; 0x4132 <check_for_tool+0x46>
		head_down( FALSE) ;
		return TRUE;
	} else {
		head_down( FALSE) ;
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    4124:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    4126:	08 95       	ret
	}


	//move head up
	if( is_head_down() ) {
		head_down( FALSE) ;
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    4130:	e7 cf       	rjmp	.-50     	; 0x4100 <check_for_tool+0x14>
	head_down(TRUE);
	
	vacuum(TRUE);

	if( vacuum_state() == TRUE )  {
		head_down( FALSE) ;
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	08 95       	ret

0000413e <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    413e:	ea e0       	ldi	r30, 0x0A	; 10
    4140:	f1 e0       	ldi	r31, 0x01	; 1
    4142:	80 81       	ld	r24, Z
    4144:	80 62       	ori	r24, 0x20	; 32
    4146:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    4148:	eb e0       	ldi	r30, 0x0B	; 11
    414a:	f1 e0       	ldi	r31, 0x01	; 1
    414c:	80 81       	ld	r24, Z
    414e:	80 62       	ori	r24, 0x20	; 32
    4150:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    4152:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    4154:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    4156:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    4158:	41 9a       	sbi	0x08, 1	; 8
}
    415a:	08 95       	ret

0000415c <is_head_down>:
	return simulate_head_state;
#else

	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    415c:	86 b1       	in	r24, 0x06	; 6

	return state;

#endif
}
    415e:	81 70       	andi	r24, 0x01	; 1
    4160:	08 95       	ret

00004162 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    4162:	86 b1       	in	r24, 0x06	; 6
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	96 95       	lsr	r25
    4168:	87 95       	ror	r24

	return state;
}
    416a:	81 70       	andi	r24, 0x01	; 1
    416c:	08 95       	ret

0000416e <head_down>:
#ifdef SIMULATE
static unsigned char simulate_head_state = 0;
#endif

char head_down(int state)
{
    416e:	cf 93       	push	r28
    4170:	df 93       	push	r29
    4172:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    4174:	80 91 55 05 	lds	r24, 0x0555
    4178:	88 23       	and	r24, r24
    417a:	19 f1       	breq	.+70     	; 0x41c2 <head_down+0x54>
		return 0;
	}

	// wait til head stops
	while( head_moving() );
    417c:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    4180:	88 23       	and	r24, r24
    4182:	e1 f7       	brne	.-8      	; 0x417c <head_down+0xe>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>

// head down mode
  if( state == 0 ) {
    418a:	20 97       	sbiw	r28, 0x00	; 0
    418c:	e9 f0       	breq	.+58     	; 0x41c8 <head_down+0x5a>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    418e:	80 91 0b 01 	lds	r24, 0x010B
    4192:	8f 7d       	andi	r24, 0xDF	; 223
    4194:	80 93 0b 01 	sts	0x010B, r24
    4198:	20 ed       	ldi	r18, 0xD0	; 208
    419a:	37 e0       	ldi	r19, 0x07	; 7
    419c:	40 e9       	ldi	r20, 0x90	; 144
    419e:	51 e0       	ldi	r21, 0x01	; 1
    41a0:	ca 01       	movw	r24, r20
    41a2:	01 97       	sbiw	r24, 0x01	; 1
    41a4:	f1 f7       	brne	.-4      	; 0x41a2 <head_down+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a6:	21 50       	subi	r18, 0x01	; 1
    41a8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41aa:	d1 f7       	brne	.-12     	; 0x41a0 <head_down+0x32>
	return simulate_head_state;
#else

	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    41ac:	86 b1       	in	r24, 0x06	; 6

#ifdef SIMULATE
	simulate_head_state = state;
#endif

  if(is_head_down() != state ) {
    41ae:	81 70       	andi	r24, 0x01	; 1
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	8c 17       	cp	r24, r28
    41b4:	9d 07       	cpc	r25, r29
    41b6:	81 f0       	breq	.+32     	; 0x41d8 <head_down+0x6a>

	  printPgmString(PSTR("Head down error\n\r"));
    41b8:	85 ea       	ldi	r24, 0xA5	; 165
    41ba:	95 e0       	ldi	r25, 0x05	; 5
    41bc:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    41c0:	80 e0       	ldi	r24, 0x00	; 0
  }

 	set_busy( FALSE );

	return 1;
}
    41c2:	df 91       	pop	r29
    41c4:	cf 91       	pop	r28
    41c6:	08 95       	ret
	set_busy( TRUE );

// head down mode
  if( state == 0 ) {

	HEAD_PORT |= _BV( HEAD );
    41c8:	80 91 0b 01 	lds	r24, 0x010B
    41cc:	80 62       	ori	r24, 0x20	; 32
    41ce:	80 93 0b 01 	sts	0x010B, r24
    41d2:	20 ed       	ldi	r18, 0xD0	; 208
    41d4:	37 e0       	ldi	r19, 0x07	; 7
    41d6:	e2 cf       	rjmp	.-60     	; 0x419c <head_down+0x2e>
	  printPgmString(PSTR("Head down error\n\r"));
	  
	  return 0;
  }

 	set_busy( FALSE );
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>
    41de:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	08 95       	ret

000041e6 <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    41e6:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    41e8:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    41ea:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    41ec:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    41ee:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    41f0:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    41f2:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    41f4:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    41f6:	a4 e0       	ldi	r26, 0x04	; 4
    41f8:	b1 e0       	ldi	r27, 0x01	; 1
    41fa:	8c 91       	ld	r24, X
    41fc:	8e 7f       	andi	r24, 0xFE	; 254
    41fe:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    4200:	e5 e0       	ldi	r30, 0x05	; 5
    4202:	f1 e0       	ldi	r31, 0x01	; 1
    4204:	80 81       	ld	r24, Z
    4206:	81 60       	ori	r24, 0x01	; 1
    4208:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    420a:	8c 91       	ld	r24, X
    420c:	8f 7e       	andi	r24, 0xEF	; 239
    420e:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    4210:	80 81       	ld	r24, Z
    4212:	80 61       	ori	r24, 0x10	; 16
    4214:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    4216:	a1 e0       	ldi	r26, 0x01	; 1
    4218:	b1 e0       	ldi	r27, 0x01	; 1
    421a:	8c 91       	ld	r24, X
    421c:	8e 7f       	andi	r24, 0xFE	; 254
    421e:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    4220:	e2 e0       	ldi	r30, 0x02	; 2
    4222:	f1 e0       	ldi	r31, 0x01	; 1
    4224:	80 81       	ld	r24, Z
    4226:	81 60       	ori	r24, 0x01	; 1
    4228:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    422a:	8c 91       	ld	r24, X
    422c:	8d 7f       	andi	r24, 0xFD	; 253
    422e:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    4230:	80 81       	ld	r24, Z
    4232:	82 60       	ori	r24, 0x02	; 2
    4234:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    4236:	e0 e9       	ldi	r30, 0x90	; 144
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	82 60       	ori	r24, 0x02	; 2
    423e:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    4240:	8c e7       	ldi	r24, 0x7C	; 124
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	90 93 99 00 	sts	0x0099, r25
    4248:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    424c:	10 92 95 00 	sts	0x0095, r1
    4250:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    4254:	84 e0       	ldi	r24, 0x04	; 4
    4256:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    425a:	e1 e7       	ldi	r30, 0x71	; 113
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	80 81       	ld	r24, Z
    4260:	82 60       	ori	r24, 0x02	; 2
    4262:	80 83       	st	Z, r24

}
    4264:	08 95       	ret

00004266 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    4266:	8c b1       	in	r24, 0x0c	; 12
    4268:	82 95       	swap	r24
    426a:	86 95       	lsr	r24
    426c:	87 70       	andi	r24, 0x07	; 7
    426e:	80 95       	com	r24

	return state;
}
    4270:	81 70       	andi	r24, 0x01	; 1
    4272:	08 95       	ret

00004274 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    4274:	82 b3       	in	r24, 0x12	; 18
    4276:	82 95       	swap	r24
    4278:	86 95       	lsr	r24
    427a:	87 70       	andi	r24, 0x07	; 7
    427c:	80 95       	com	r24

	return state;
}
    427e:	81 70       	andi	r24, 0x01	; 1
    4280:	08 95       	ret

00004282 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    4282:	8c b1       	in	r24, 0x0c	; 12
    4284:	82 95       	swap	r24
    4286:	8f 70       	andi	r24, 0x0F	; 15
    4288:	80 95       	com	r24

	return state;
}
    428a:	81 70       	andi	r24, 0x01	; 1
    428c:	08 95       	ret

0000428e <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    428e:	80 91 03 01 	lds	r24, 0x0103
    4292:	86 95       	lsr	r24
    4294:	80 95       	com	r24

	return state;
}
    4296:	81 70       	andi	r24, 0x01	; 1
    4298:	08 95       	ret

0000429a <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    429a:	86 b1       	in	r24, 0x06	; 6
    429c:	82 95       	swap	r24
    429e:	8f 70       	andi	r24, 0x0F	; 15
    42a0:	80 95       	com	r24

	return state;
}
    42a2:	81 70       	andi	r24, 0x01	; 1
    42a4:	08 95       	ret

000042a6 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    42a6:	80 91 00 01 	lds	r24, 0x0100
    42aa:	80 95       	com	r24

	return state;
}
    42ac:	81 70       	andi	r24, 0x01	; 1
    42ae:	08 95       	ret

000042b0 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    42b0:	80 91 03 01 	lds	r24, 0x0103
    42b4:	80 95       	com	r24

	return state;
}
    42b6:	81 70       	andi	r24, 0x01	; 1
    42b8:	08 95       	ret

000042ba <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    42ba:	83 b1       	in	r24, 0x03	; 3
    42bc:	82 95       	swap	r24
    42be:	86 95       	lsr	r24
    42c0:	87 70       	andi	r24, 0x07	; 7
    42c2:	80 95       	com	r24

	return state;
}
    42c4:	81 70       	andi	r24, 0x01	; 1
    42c6:	08 95       	ret

000042c8 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    42c8:	80 91 00 01 	lds	r24, 0x0100
    42cc:	86 95       	lsr	r24
    42ce:	80 95       	com	r24

	return state;
}
    42d0:	81 70       	andi	r24, 0x01	; 1
    42d2:	08 95       	ret

000042d4 <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    42d4:	1f 92       	push	r1
    42d6:	0f 92       	push	r0
    42d8:	0f b6       	in	r0, 0x3f	; 63
    42da:	0f 92       	push	r0
    42dc:	11 24       	eor	r1, r1
	return;
}
    42de:	0f 90       	pop	r0
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	0f 90       	pop	r0
    42e4:	1f 90       	pop	r1
    42e6:	18 95       	reti

000042e8 <process_panel>:
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    42e8:	1d 9b       	sbis	0x03, 5	; 3
    42ea:	20 c0       	rjmp	.+64     	; 0x432c <process_panel+0x44>

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    42ec:	80 91 00 01 	lds	r24, 0x0100
    42f0:	80 ff       	sbrs	r24, 0
    42f2:	0b c0       	rjmp	.+22     	; 0x430a <process_panel+0x22>
	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
    42f4:	80 91 80 06 	lds	r24, 0x0680
    42f8:	81 30       	cpi	r24, 0x01	; 1
    42fa:	d9 f0       	breq	.+54     	; 0x4332 <process_panel+0x4a>
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    42fc:	34 9b       	sbis	0x06, 4	; 6
    42fe:	0e c0       	rjmp	.+28     	; 0x431c <process_panel+0x34>
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
    4300:	80 91 7f 06 	lds	r24, 0x067F
    4304:	81 30       	cpi	r24, 0x01	; 1
    4306:	e1 f0       	breq	.+56     	; 0x4340 <process_panel+0x58>
    4308:	08 95       	ret
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	80 93 80 06 	sts	0x0680, r24
		vacuum(1);
    4310:	81 e0       	ldi	r24, 0x01	; 1
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
	} else if(bvac == 1 ) {
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    4318:	34 99       	sbic	0x06, 4	; 6
    431a:	f2 cf       	rjmp	.-28     	; 0x4300 <process_panel+0x18>
		bhead = 1;
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	80 93 7f 06 	sts	0x067F, r24
		head_down(1);
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    432a:	08 95       	ret
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    432c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <mc_go_home>
    4330:	dd cf       	rjmp	.-70     	; 0x42ec <process_panel+0x4>

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
		bvac = 0;
    4332:	10 92 80 06 	sts	0x0680, r1
		vacuum(0);
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
    433e:	de cf       	rjmp	.-68     	; 0x42fc <process_panel+0x14>

	if( is_phead() ) {
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
		bhead = 0;
    4340:	10 92 7f 06 	sts	0x067F, r1
		head_down(0);
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    434c:	08 95       	ret

0000434e <vacuum_init>:
#include "stepper.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    434e:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    4350:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    4352:	ea e0       	ldi	r30, 0x0A	; 10
    4354:	f1 e0       	ldi	r31, 0x01	; 1
    4356:	80 81       	ld	r24, Z
    4358:	80 61       	ori	r24, 0x10	; 16
    435a:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    435c:	eb e0       	ldi	r30, 0x0B	; 11
    435e:	f1 e0       	ldi	r31, 0x01	; 1
    4360:	80 81       	ld	r24, Z
    4362:	80 61       	ori	r24, 0x10	; 16
    4364:	80 83       	st	Z, r24

}
    4366:	08 95       	ret

00004368 <vacuum>:

// switches vacuum on and off
void vacuum(int state)
{
	if( state == 1 && gHomed == FALSE ) return;
    4368:	81 30       	cpi	r24, 0x01	; 1
    436a:	91 05       	cpc	r25, r1
    436c:	91 f0       	breq	.+36     	; 0x4392 <vacuum+0x2a>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    436e:	89 2b       	or	r24, r25
    4370:	a1 f4       	brne	.+40     	; 0x439a <vacuum+0x32>

	HEAD_PORT |= _BV( VACUUM );
    4372:	80 91 0b 01 	lds	r24, 0x010B
    4376:	80 61       	ori	r24, 0x10	; 16
    4378:	80 93 0b 01 	sts	0x010B, r24
    437c:	28 e8       	ldi	r18, 0x88	; 136
    437e:	33 e1       	ldi	r19, 0x13	; 19
    4380:	40 e9       	ldi	r20, 0x90	; 144
    4382:	51 e0       	ldi	r21, 0x01	; 1
    4384:	ca 01       	movw	r24, r20
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <vacuum+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438a:	21 50       	subi	r18, 0x01	; 1
    438c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    438e:	d1 f7       	brne	.-12     	; 0x4384 <vacuum+0x1c>
    4390:	08 95       	ret
}

// switches vacuum on and off
void vacuum(int state)
{
	if( state == 1 && gHomed == FALSE ) return;
    4392:	80 91 55 05 	lds	r24, 0x0555
    4396:	88 23       	and	r24, r24
    4398:	41 f0       	breq	.+16     	; 0x43aa <vacuum+0x42>

	HEAD_PORT |= _BV( VACUUM );

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    439a:	80 91 0b 01 	lds	r24, 0x010B
    439e:	8f 7e       	andi	r24, 0xEF	; 239
    43a0:	80 93 0b 01 	sts	0x010B, r24
    43a4:	28 e8       	ldi	r18, 0x88	; 136
    43a6:	33 e1       	ldi	r19, 0x13	; 19
    43a8:	eb cf       	rjmp	.-42     	; 0x4380 <vacuum+0x18>
    43aa:	08 95       	ret

000043ac <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    43ac:	89 b1       	in	r24, 0x09	; 9
    43ae:	80 95       	com	r24

	return state;
}
    43b0:	88 1f       	adc	r24, r24
    43b2:	88 27       	eor	r24, r24
    43b4:	88 1f       	adc	r24, r24
    43b6:	08 95       	ret

000043b8 <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    43b8:	af 92       	push	r10
    43ba:	bf 92       	push	r11
    43bc:	cf 92       	push	r12
    43be:	df 92       	push	r13
    43c0:	ef 92       	push	r14
    43c2:	ff 92       	push	r15
    43c4:	0f 93       	push	r16
    43c6:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    43c8:	80 91 55 05 	lds	r24, 0x0555
    43cc:	88 23       	and	r24, r24
    43ce:	51 f4       	brne	.+20     	; 0x43e4 <run_vacuum_test+0x2c>
    43d0:	83 e6       	ldi	r24, 0x63	; 99
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	ff 90       	pop	r15
    43d8:	ef 90       	pop	r14
    43da:	df 90       	pop	r13
    43dc:	cf 90       	pop	r12
    43de:	bf 90       	pop	r11
    43e0:	af 90       	pop	r10
    43e2:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    43ec:	63 ec       	ldi	r22, 0xC3	; 195
    43ee:	73 ed       	ldi	r23, 0xD3	; 211
    43f0:	81 e4       	ldi	r24, 0x41	; 65
    43f2:	91 e4       	ldi	r25, 0x41	; 65
    43f4:	2a e1       	ldi	r18, 0x1A	; 26
    43f6:	3b e8       	ldi	r19, 0x8B	; 139
    43f8:	4d e9       	ldi	r20, 0x9D	; 157
    43fa:	50 e4       	ldi	r21, 0x40	; 64
    43fc:	0f 2e       	mov	r0, r31
    43fe:	f0 e0       	ldi	r31, 0x00	; 0
    4400:	ef 2e       	mov	r14, r31
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	ff 2e       	mov	r15, r31
    4406:	f0 e8       	ldi	r31, 0x80	; 128
    4408:	0f 2f       	mov	r16, r31
    440a:	ff eb       	ldi	r31, 0xBF	; 191
    440c:	1f 2f       	mov	r17, r31
    440e:	f0 2d       	mov	r31, r0
    4410:	57 01       	movw	r10, r14
    4412:	68 01       	movw	r12, r16
    4414:	0e 94 f7 03 	call	0x7ee	; 0x7ee <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    4418:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    441c:	88 23       	and	r24, r24
    441e:	e1 f7       	brne	.-8      	; 0x4418 <run_vacuum_test+0x60>
    4420:	80 e9       	ldi	r24, 0x90	; 144
    4422:	91 e0       	ldi	r25, 0x01	; 1
    4424:	01 97       	sbiw	r24, 0x01	; 1
    4426:	f1 f7       	brne	.-4      	; 0x4424 <run_vacuum_test+0x6c>
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	d3 cf       	rjmp	.-90     	; 0x43d2 <run_vacuum_test+0x1a>

0000442c <goto_vacpad>:
	return GCSTATUS_OK;

}

unsigned char goto_vacpad( void ) 
{
    442c:	8f 92       	push	r8
    442e:	9f 92       	push	r9
    4430:	af 92       	push	r10
    4432:	bf 92       	push	r11
    4434:	cf 92       	push	r12
    4436:	df 92       	push	r13
    4438:	ef 92       	push	r14
    443a:	ff 92       	push	r15
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    4440:	80 91 55 05 	lds	r24, 0x0555
    4444:	88 23       	and	r24, r24
    4446:	61 f4       	brne	.+24     	; 0x4460 <goto_vacpad+0x34>
    4448:	83 e6       	ldi	r24, 0x63	; 99

	while( is_head_down() ) ;
	
	return GCSTATUS_OK;

}
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	ff 90       	pop	r15
    4450:	ef 90       	pop	r14
    4452:	df 90       	pop	r13
    4454:	cf 90       	pop	r12
    4456:	bf 90       	pop	r11
    4458:	af 90       	pop	r10
    445a:	9f 90       	pop	r9
    445c:	8f 90       	pop	r8
    445e:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
    4460:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    4464:	88 23       	and	r24, r24
    4466:	09 f0       	breq	.+2      	; 0x446a <goto_vacpad+0x3e>
    4468:	20 c1       	rjmp	.+576    	; 0x46aa <goto_vacpad+0x27e>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    446a:	63 ec       	ldi	r22, 0xC3	; 195
    446c:	73 ed       	ldi	r23, 0xD3	; 211
    446e:	81 e4       	ldi	r24, 0x41	; 65
    4470:	91 e4       	ldi	r25, 0x41	; 65
    4472:	2a e1       	ldi	r18, 0x1A	; 26
    4474:	3b e8       	ldi	r19, 0x8B	; 139
    4476:	4d e9       	ldi	r20, 0x9D	; 157
    4478:	50 e4       	ldi	r21, 0x40	; 64
    447a:	0f 2e       	mov	r0, r31
    447c:	f0 e0       	ldi	r31, 0x00	; 0
    447e:	ef 2e       	mov	r14, r31
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	ff 2e       	mov	r15, r31
    4484:	f0 e8       	ldi	r31, 0x80	; 128
    4486:	0f 2f       	mov	r16, r31
    4488:	ff eb       	ldi	r31, 0xBF	; 191
    448a:	1f 2f       	mov	r17, r31
    448c:	f0 2d       	mov	r31, r0
    448e:	57 01       	movw	r10, r14
    4490:	68 01       	movw	r12, r16
    4492:	0e 94 f7 03 	call	0x7ee	; 0x7ee <gotoxy>

	while( head_moving() );	
    4496:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    449a:	88 23       	and	r24, r24
    449c:	e1 f7       	brne	.-8      	; 0x4496 <goto_vacpad+0x6a>
    449e:	80 e9       	ldi	r24, 0x90	; 144
    44a0:	91 e0       	ldi	r25, 0x01	; 1
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	f1 f7       	brne	.-4      	; 0x44a2 <goto_vacpad+0x76>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
    44ae:	28 e8       	ldi	r18, 0x88	; 136
    44b0:	33 e1       	ldi	r19, 0x13	; 19
    44b2:	40 e9       	ldi	r20, 0x90	; 144
    44b4:	51 e0       	ldi	r21, 0x01	; 1
    44b6:	ca 01       	movw	r24, r20
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	f1 f7       	brne	.-4      	; 0x44b8 <goto_vacpad+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44bc:	21 50       	subi	r18, 0x01	; 1
    44be:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c0:	d1 f7       	brne	.-12     	; 0x44b6 <goto_vacpad+0x8a>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    44ca:	88 23       	and	r24, r24
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <goto_vacpad+0xa4>
    44ce:	e7 c0       	rjmp	.+462    	; 0x469e <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    44d0:	20 e1       	ldi	r18, 0x10	; 16
    44d2:	37 e2       	ldi	r19, 0x27	; 39
    44d4:	40 e9       	ldi	r20, 0x90	; 144
    44d6:	51 e0       	ldi	r21, 0x01	; 1
    44d8:	ca 01       	movw	r24, r20
    44da:	01 97       	sbiw	r24, 0x01	; 1
    44dc:	f1 f7       	brne	.-4      	; 0x44da <goto_vacpad+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44de:	21 50       	subi	r18, 0x01	; 1
    44e0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e2:	d1 f7       	brne	.-12     	; 0x44d8 <goto_vacpad+0xac>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    44e4:	99 b0       	in	r9, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    44ee:	80 e0       	ldi	r24, 0x00	; 0
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    44f6:	88 23       	and	r24, r24
    44f8:	09 f4       	brne	.+2      	; 0x44fc <goto_vacpad+0xd0>
    44fa:	c8 c0       	rjmp	.+400    	; 0x468c <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    44fc:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    4500:	88 23       	and	r24, r24
    4502:	e1 f7       	brne	.-8      	; 0x44fc <goto_vacpad+0xd0>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    4504:	6d e3       	ldi	r22, 0x3D	; 61
    4506:	7b e9       	ldi	r23, 0x9B	; 155
    4508:	8d e4       	ldi	r24, 0x4D	; 77
    450a:	91 e4       	ldi	r25, 0x41	; 65
    450c:	2c ed       	ldi	r18, 0xDC	; 220
    450e:	38 e6       	ldi	r19, 0x68	; 104
    4510:	44 e9       	ldi	r20, 0x94	; 148
    4512:	50 e4       	ldi	r21, 0x40	; 64
    4514:	0f 2e       	mov	r0, r31
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	ef 2e       	mov	r14, r31
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	ff 2e       	mov	r15, r31
    451e:	f0 e8       	ldi	r31, 0x80	; 128
    4520:	0f 2f       	mov	r16, r31
    4522:	ff eb       	ldi	r31, 0xBF	; 191
    4524:	1f 2f       	mov	r17, r31
    4526:	f0 2d       	mov	r31, r0
    4528:	57 01       	movw	r10, r14
    452a:	68 01       	movw	r12, r16
    452c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <gotoxy>

	while( head_moving() );	
    4530:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    4534:	88 23       	and	r24, r24
    4536:	e1 f7       	brne	.-8      	; 0x4530 <goto_vacpad+0x104>
    4538:	80 e9       	ldi	r24, 0x90	; 144
    453a:	91 e0       	ldi	r25, 0x01	; 1
    453c:	01 97       	sbiw	r24, 0x01	; 1
    453e:	f1 f7       	brne	.-4      	; 0x453c <goto_vacpad+0x110>
    4540:	20 ea       	ldi	r18, 0xA0	; 160
    4542:	3f e0       	ldi	r19, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4544:	40 e9       	ldi	r20, 0x90	; 144
    4546:	51 e0       	ldi	r21, 0x01	; 1
    4548:	ca 01       	movw	r24, r20
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	f1 f7       	brne	.-4      	; 0x454a <goto_vacpad+0x11e>
    454e:	21 50       	subi	r18, 0x01	; 1
    4550:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4552:	d1 f7       	brne	.-12     	; 0x4548 <goto_vacpad+0x11c>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    455c:	88 23       	and	r24, r24
    455e:	09 f4       	brne	.+2      	; 0x4562 <goto_vacpad+0x136>
    4560:	95 c0       	rjmp	.+298    	; 0x468c <goto_vacpad+0x260>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    4562:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    4566:	88 23       	and	r24, r24
    4568:	e1 f3       	breq	.-8      	; 0x4562 <goto_vacpad+0x136>
    456a:	20 e1       	ldi	r18, 0x10	; 16
    456c:	37 e2       	ldi	r19, 0x27	; 39
    456e:	40 e9       	ldi	r20, 0x90	; 144
    4570:	51 e0       	ldi	r21, 0x01	; 1
    4572:	ca 01       	movw	r24, r20
    4574:	01 97       	sbiw	r24, 0x01	; 1
    4576:	f1 f7       	brne	.-4      	; 0x4574 <goto_vacpad+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4578:	21 50       	subi	r18, 0x01	; 1
    457a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457c:	d1 f7       	brne	.-12     	; 0x4572 <goto_vacpad+0x146>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <atc_fire>
    4586:	20 e4       	ldi	r18, 0x40	; 64
    4588:	3f e1       	ldi	r19, 0x1F	; 31
    458a:	40 e9       	ldi	r20, 0x90	; 144
    458c:	51 e0       	ldi	r21, 0x01	; 1
    458e:	ca 01       	movw	r24, r20
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	f1 f7       	brne	.-4      	; 0x4590 <goto_vacpad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4594:	21 50       	subi	r18, 0x01	; 1
    4596:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4598:	d1 f7       	brne	.-12     	; 0x458e <goto_vacpad+0x162>
    459a:	88 24       	eor	r8, r8
    459c:	97 fc       	sbrc	r9, 7
    459e:	6b c0       	rjmp	.+214    	; 0x4676 <goto_vacpad+0x24a>
    45a0:	88 24       	eor	r8, r8
    45a2:	83 94       	inc	r8

		// tool changer off
		atc_fire ( 0 );
		
		// head up
		if( head_down( 0 ) == 0 ) {
    45a4:	28 e8       	ldi	r18, 0x88	; 136
    45a6:	33 e1       	ldi	r19, 0x13	; 19
    45a8:	40 e9       	ldi	r20, 0x90	; 144
    45aa:	51 e0       	ldi	r21, 0x01	; 1
    45ac:	ca 01       	movw	r24, r20
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	f1 f7       	brne	.-4      	; 0x45ae <goto_vacpad+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b2:	21 50       	subi	r18, 0x01	; 1
    45b4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b6:	d1 f7       	brne	.-12     	; 0x45ac <goto_vacpad+0x180>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    45c0:	88 23       	and	r24, r24
    45c2:	09 f4       	brne	.+2      	; 0x45c6 <goto_vacpad+0x19a>
    45c4:	63 c0       	rjmp	.+198    	; 0x468c <goto_vacpad+0x260>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    45c6:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    45ca:	81 30       	cpi	r24, 0x01	; 1
    45cc:	e1 f3       	breq	.-8      	; 0x45c6 <goto_vacpad+0x19a>
    45ce:	28 e9       	ldi	r18, 0x98	; 152
    45d0:	3a e3       	ldi	r19, 0x3A	; 58
    45d2:	40 e9       	ldi	r20, 0x90	; 144
    45d4:	51 e0       	ldi	r21, 0x01	; 1
    45d6:	ca 01       	movw	r24, r20
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <goto_vacpad+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45dc:	21 50       	subi	r18, 0x01	; 1
    45de:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45e0:	d1 f7       	brne	.-12     	; 0x45d6 <goto_vacpad+0x1aa>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    45e2:	63 ec       	ldi	r22, 0xC3	; 195
    45e4:	73 ed       	ldi	r23, 0xD3	; 211
    45e6:	81 e4       	ldi	r24, 0x41	; 65
    45e8:	91 e4       	ldi	r25, 0x41	; 65
    45ea:	2a e1       	ldi	r18, 0x1A	; 26
    45ec:	3b e8       	ldi	r19, 0x8B	; 139
    45ee:	4d e9       	ldi	r20, 0x9D	; 157
    45f0:	50 e4       	ldi	r21, 0x40	; 64
    45f2:	0f 2e       	mov	r0, r31
    45f4:	f0 e0       	ldi	r31, 0x00	; 0
    45f6:	ef 2e       	mov	r14, r31
    45f8:	f0 e0       	ldi	r31, 0x00	; 0
    45fa:	ff 2e       	mov	r15, r31
    45fc:	f0 e8       	ldi	r31, 0x80	; 128
    45fe:	0f 2f       	mov	r16, r31
    4600:	ff eb       	ldi	r31, 0xBF	; 191
    4602:	1f 2f       	mov	r17, r31
    4604:	f0 2d       	mov	r31, r0
    4606:	57 01       	movw	r10, r14
    4608:	68 01       	movw	r12, r16
    460a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <gotoxy>

	while( head_moving() );	
    460e:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    4612:	88 23       	and	r24, r24
    4614:	e1 f7       	brne	.-8      	; 0x460e <goto_vacpad+0x1e2>
    4616:	80 e9       	ldi	r24, 0x90	; 144
    4618:	91 e0       	ldi	r25, 0x01	; 1
    461a:	01 97       	sbiw	r24, 0x01	; 1
    461c:	f1 f7       	brne	.-4      	; 0x461a <goto_vacpad+0x1ee>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
    4626:	28 e8       	ldi	r18, 0x88	; 136
    4628:	33 e1       	ldi	r19, 0x13	; 19
    462a:	40 e9       	ldi	r20, 0x90	; 144
    462c:	51 e0       	ldi	r21, 0x01	; 1
    462e:	ca 01       	movw	r24, r20
    4630:	01 97       	sbiw	r24, 0x01	; 1
    4632:	f1 f7       	brne	.-4      	; 0x4630 <goto_vacpad+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4634:	21 50       	subi	r18, 0x01	; 1
    4636:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4638:	d1 f7       	brne	.-12     	; 0x462e <goto_vacpad+0x202>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    4642:	88 23       	and	r24, r24
    4644:	61 f1       	breq	.+88     	; 0x469e <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4646:	20 e1       	ldi	r18, 0x10	; 16
    4648:	37 e2       	ldi	r19, 0x27	; 39
    464a:	40 e9       	ldi	r20, 0x90	; 144
    464c:	51 e0       	ldi	r21, 0x01	; 1
    464e:	ca 01       	movw	r24, r20
    4650:	01 97       	sbiw	r24, 0x01	; 1
    4652:	f1 f7       	brne	.-4      	; 0x4650 <goto_vacpad+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4654:	21 50       	subi	r18, 0x01	; 1
    4656:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4658:	d1 f7       	brne	.-12     	; 0x464e <goto_vacpad+0x222>

   _delay_ms( 1000 );


	// check vacuum
	if( vacuum_state() ) {
    465a:	4f 99       	sbic	0x09, 7	; 9
    465c:	19 c0       	rjmp	.+50     	; 0x4690 <goto_vacpad+0x264>
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    465e:	88 20       	and	r8, r8
    4660:	49 f1       	breq	.+82     	; 0x46b4 <goto_vacpad+0x288>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup failed\r\n"));
#endif

// oops
		head_down(0);
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
		vacuum( 0 );
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
    4672:	85 e0       	ldi	r24, 0x05	; 5
    4674:	ea ce       	rjmp	.-556    	; 0x444a <goto_vacpad+0x1e>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <atc_fire>
		
		// head up
		if( head_down( 0 ) == 0 ) {
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    4686:	88 23       	and	r24, r24
    4688:	09 f0       	breq	.+2      	; 0x468c <goto_vacpad+0x260>
    468a:	9d cf       	rjmp	.-198    	; 0x45c6 <goto_vacpad+0x19a>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    468c:	85 e0       	ldi	r24, 0x05	; 5
    468e:	dd ce       	rjmp	.-582    	; 0x444a <goto_vacpad+0x1e>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	88 16       	cp	r8, r24
    4694:	79 f0       	breq	.+30     	; 0x46b4 <goto_vacpad+0x288>
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
#endif

			head_down(0);
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
			vacuum( 0 );
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>
    46a6:	85 e0       	ldi	r24, 0x05	; 5
    46a8:	d0 ce       	rjmp	.-608    	; 0x444a <goto_vacpad+0x1e>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    46b2:	db ce       	rjmp	.-586    	; 0x446a <goto_vacpad+0x3e>
		}

	}	

// vacuum off
	vacuum( 0 );
    46b4:	80 e0       	ldi	r24, 0x00	; 0
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    46c4:	88 23       	and	r24, r24
    46c6:	11 f3       	breq	.-60     	; 0x468c <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    46c8:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    46cc:	88 23       	and	r24, r24
    46ce:	e1 f7       	brne	.-8      	; 0x46c8 <goto_vacpad+0x29c>
    46d0:	bc ce       	rjmp	.-648    	; 0x444a <goto_vacpad+0x1e>

000046d2 <test_mode>:
	return GCSTATUS_OK;

}

unsigned char test_mode(void)
{
    46d2:	8f 92       	push	r8
    46d4:	9f 92       	push	r9
    46d6:	af 92       	push	r10
    46d8:	bf 92       	push	r11
    46da:	cf 92       	push	r12
    46dc:	df 92       	push	r13
    46de:	ef 92       	push	r14
    46e0:	ff 92       	push	r15
    46e2:	0f 93       	push	r16
    46e4:	1f 93       	push	r17
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29
	int i;
	double x,y;

	if( gHomed == FALSE ) {
    46ea:	80 91 55 05 	lds	r24, 0x0555
    46ee:	88 23       	and	r24, r24
    46f0:	71 f4       	brne	.+28     	; 0x470e <test_mode+0x3c>
    46f2:	83 e6       	ldi	r24, 0x63	; 99

	}

	return GCSTATUS_OK;

}
    46f4:	df 91       	pop	r29
    46f6:	cf 91       	pop	r28
    46f8:	1f 91       	pop	r17
    46fa:	0f 91       	pop	r16
    46fc:	ff 90       	pop	r15
    46fe:	ef 90       	pop	r14
    4700:	df 90       	pop	r13
    4702:	cf 90       	pop	r12
    4704:	bf 90       	pop	r11
    4706:	af 90       	pop	r10
    4708:	9f 90       	pop	r9
    470a:	8f 90       	pop	r8
    470c:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
    470e:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    4712:	88 23       	and	r24, r24
    4714:	09 f0       	breq	.+2      	; 0x4718 <test_mode+0x46>
    4716:	4a c0       	rjmp	.+148    	; 0x47ac <test_mode+0xda>
		head_down( FALSE )  ;
    4718:	88 24       	eor	r8, r8
    471a:	99 24       	eor	r9, r9
    471c:	c0 e9       	ldi	r28, 0x90	; 144
    471e:	d1 e0       	ldi	r29, 0x01	; 1
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
	
		x = rand() %12;
    4720:	0e 94 79 30 	call	0x60f2	; 0x60f2 <rand>
    4724:	8c 01       	movw	r16, r24
		y = rand() %14 ;
    4726:	0e 94 79 30 	call	0x60f2	; 0x60f2 <rand>
    472a:	6c 01       	movw	r12, r24

		gotoxy( x,y ,-1,-1) ;
    472c:	c8 01       	movw	r24, r16
    472e:	6c e0       	ldi	r22, 0x0C	; 12
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
    4736:	aa 27       	eor	r26, r26
    4738:	97 fd       	sbrc	r25, 7
    473a:	a0 95       	com	r26
    473c:	ba 2f       	mov	r27, r26
    473e:	bc 01       	movw	r22, r24
    4740:	cd 01       	movw	r24, r26
    4742:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    4746:	7b 01       	movw	r14, r22
    4748:	8c 01       	movw	r16, r24
    474a:	c6 01       	movw	r24, r12
    474c:	6e e0       	ldi	r22, 0x0E	; 14
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <__divmodhi4>
    4754:	aa 27       	eor	r26, r26
    4756:	97 fd       	sbrc	r25, 7
    4758:	a0 95       	com	r26
    475a:	ba 2f       	mov	r27, r26
    475c:	bc 01       	movw	r22, r24
    475e:	cd 01       	movw	r24, r26
    4760:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__floatsisf>
    4764:	9b 01       	movw	r18, r22
    4766:	ac 01       	movw	r20, r24
    4768:	c8 01       	movw	r24, r16
    476a:	b7 01       	movw	r22, r14
    476c:	0f 2e       	mov	r0, r31
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	ef 2e       	mov	r14, r31
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	ff 2e       	mov	r15, r31
    4776:	f0 e8       	ldi	r31, 0x80	; 128
    4778:	0f 2f       	mov	r16, r31
    477a:	ff eb       	ldi	r31, 0xBF	; 191
    477c:	1f 2f       	mov	r17, r31
    477e:	f0 2d       	mov	r31, r0
    4780:	57 01       	movw	r10, r14
    4782:	68 01       	movw	r12, r16
    4784:	0e 94 f7 03 	call	0x7ee	; 0x7ee <gotoxy>
    4788:	28 e8       	ldi	r18, 0x88	; 136
    478a:	33 e1       	ldi	r19, 0x13	; 19
    478c:	ce 01       	movw	r24, r28
    478e:	01 97       	sbiw	r24, 0x01	; 1
    4790:	f1 f7       	brne	.-4      	; 0x478e <test_mode+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4792:	21 50       	subi	r18, 0x01	; 1
    4794:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4796:	d1 f7       	brne	.-12     	; 0x478c <test_mode+0xba>
	if( is_head_down() ) {
		head_down( FALSE )  ;
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
    4798:	08 94       	sec
    479a:	81 1c       	adc	r8, r1
    479c:	91 1c       	adc	r9, r1
    479e:	88 ec       	ldi	r24, 0xC8	; 200
    47a0:	88 16       	cp	r8, r24
    47a2:	91 04       	cpc	r9, r1
    47a4:	09 f0       	breq	.+2      	; 0x47a8 <test_mode+0xd6>
    47a6:	bc cf       	rjmp	.-136    	; 0x4720 <test_mode+0x4e>
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	a4 cf       	rjmp	.-184    	; 0x46f4 <test_mode+0x22>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    47b4:	b1 cf       	rjmp	.-158    	; 0x4718 <test_mode+0x46>

000047b6 <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    47b6:	4f 99       	sbic	0x09, 7	; 9
    47b8:	05 c0       	rjmp	.+10     	; 0x47c4 <vacuum_test+0xe>
		
		printPgmString(PSTR("yes\n"));
    47ba:	8b eb       	ldi	r24, 0xBB	; 187
    47bc:	95 e0       	ldi	r25, 0x05	; 5
    47be:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    47c2:	08 95       	ret
	} else {
		printPgmString(PSTR("no\n"));
    47c4:	87 eb       	ldi	r24, 0xB7	; 183
    47c6:	95 e0       	ldi	r25, 0x05	; 5
    47c8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    47cc:	08 95       	ret

000047ce <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    47ce:	e7 e0       	ldi	r30, 0x07	; 7
    47d0:	f1 e0       	ldi	r31, 0x01	; 1
    47d2:	80 81       	ld	r24, Z
    47d4:	80 68       	ori	r24, 0x80	; 128
    47d6:	80 83       	st	Z, r24
}
    47d8:	08 95       	ret

000047da <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    47da:	80 91 55 05 	lds	r24, 0x0555
    47de:	88 23       	and	r24, r24
    47e0:	41 f1       	breq	.+80     	; 0x4832 <tape_knock+0x58>
   		return ;
   	}


	while( head_moving() );
    47e2:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    47e6:	88 23       	and	r24, r24
    47e8:	e1 f7       	brne	.-8      	; 0x47e2 <tape_knock+0x8>

	set_busy( TRUE );
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    47f0:	80 91 08 01 	lds	r24, 0x0108
    47f4:	8f 77       	andi	r24, 0x7F	; 127
    47f6:	80 93 08 01 	sts	0x0108, r24
    47fa:	20 ed       	ldi	r18, 0xD0	; 208
    47fc:	37 e0       	ldi	r19, 0x07	; 7
    47fe:	40 e9       	ldi	r20, 0x90	; 144
    4800:	51 e0       	ldi	r21, 0x01	; 1
    4802:	ca 01       	movw	r24, r20
    4804:	01 97       	sbiw	r24, 0x01	; 1
    4806:	f1 f7       	brne	.-4      	; 0x4804 <tape_knock+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4808:	21 50       	subi	r18, 0x01	; 1
    480a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    480c:	d1 f7       	brne	.-12     	; 0x4802 <tape_knock+0x28>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    480e:	80 91 08 01 	lds	r24, 0x0108
    4812:	80 68       	ori	r24, 0x80	; 128
    4814:	80 93 08 01 	sts	0x0108, r24
    4818:	20 ed       	ldi	r18, 0xD0	; 208
    481a:	37 e0       	ldi	r19, 0x07	; 7
    481c:	40 e9       	ldi	r20, 0x90	; 144
    481e:	51 e0       	ldi	r21, 0x01	; 1
    4820:	ca 01       	movw	r24, r20
    4822:	01 97       	sbiw	r24, 0x01	; 1
    4824:	f1 f7       	brne	.-4      	; 0x4822 <tape_knock+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4826:	21 50       	subi	r18, 0x01	; 1
    4828:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    482a:	d1 f7       	brne	.-12     	; 0x4820 <tape_knock+0x46>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>
    4832:	08 95       	ret

00004834 <putdown_part>:
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    4834:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    4838:	88 23       	and	r24, r24
    483a:	09 f0       	breq	.+2      	; 0x483e <putdown_part+0xa>
    483c:	3a c0       	rjmp	.+116    	; 0x48b2 <putdown_part+0x7e>
		return GCSTATUS_FAILED_COMMAND;
	}

	// wait til head stops
	while( head_moving() );
    483e:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    4842:	88 23       	and	r24, r24
    4844:	e1 f7       	brne	.-8      	; 0x483e <putdown_part+0xa>

	// maybe?
	while( get_busy() );
    4846:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <get_busy>
    484a:	89 2b       	or	r24, r25
    484c:	e1 f7       	brne	.-8      	; 0x4846 <putdown_part+0x12>

	set_busy( TRUE ) ;
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>
    4854:	28 ee       	ldi	r18, 0xE8	; 232
    4856:	33 e0       	ldi	r19, 0x03	; 3
    4858:	40 e9       	ldi	r20, 0x90	; 144
    485a:	51 e0       	ldi	r21, 0x01	; 1
    485c:	ca 01       	movw	r24, r20
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	f1 f7       	brne	.-4      	; 0x485e <putdown_part+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4862:	21 50       	subi	r18, 0x01	; 1
    4864:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4866:	d1 f7       	brne	.-12     	; 0x485c <putdown_part+0x28>
	}

#endif

	// push head down
	head_down( 1 );
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    4870:	24 ec       	ldi	r18, 0xC4	; 196
    4872:	39 e0       	ldi	r19, 0x09	; 9
    4874:	40 e9       	ldi	r20, 0x90	; 144
    4876:	51 e0       	ldi	r21, 0x01	; 1
    4878:	ca 01       	movw	r24, r20
    487a:	01 97       	sbiw	r24, 0x01	; 1
    487c:	f1 f7       	brne	.-4      	; 0x487a <putdown_part+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    487e:	21 50       	subi	r18, 0x01	; 1
    4880:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4882:	d1 f7       	brne	.-12     	; 0x4878 <putdown_part+0x44>

	// settle after head down ( probably doesn't need it  )
	_delay_ms( 250 );

	// vacuum off
	vacuum ( 0 );
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>

	// head up
	head_down ( 0 ) ;
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    4894:	28 e8       	ldi	r18, 0x88	; 136
    4896:	33 e1       	ldi	r19, 0x13	; 19
    4898:	40 e9       	ldi	r20, 0x90	; 144
    489a:	51 e0       	ldi	r21, 0x01	; 1
    489c:	ca 01       	movw	r24, r20
    489e:	01 97       	sbiw	r24, 0x01	; 1
    48a0:	f1 f7       	brne	.-4      	; 0x489e <putdown_part+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a2:	21 50       	subi	r18, 0x01	; 1
    48a4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48a6:	d1 f7       	brne	.-12     	; 0x489c <putdown_part+0x68>

	_delay_ms( 500 );

	set_busy( FALSE) ;
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>
    48ae:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    48b0:	08 95       	ret
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    48b2:	85 e0       	ldi	r24, 0x05	; 5
    48b4:	08 95       	ret

000048b6 <pickup_part>:
	unsigned char failedCounter;



	// wait til head stops
	while( head_moving() );
    48b6:	0e 94 ef 18 	call	0x31de	; 0x31de <head_moving>
    48ba:	88 23       	and	r24, r24
    48bc:	e1 f7       	brne	.-8      	; 0x48b6 <pickup_part>

	// maybe?
	while( get_busy() );
    48be:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <get_busy>
    48c2:	89 2b       	or	r24, r25
    48c4:	e1 f7       	brne	.-8      	; 0x48be <pickup_part+0x8>

	// count number of pickup fails
	failedCounter = 0 ;


	if( is_head_down() ){
    48c6:	0e 94 ae 20 	call	0x415c	; 0x415c <is_head_down>
    48ca:	88 23       	and	r24, r24
    48cc:	11 f0       	breq	.+4      	; 0x48d2 <pickup_part+0x1c>
    48ce:	85 e0       	ldi	r24, 0x05	; 5
    48d0:	08 95       	ret
		return GCSTATUS_FAILED_COMMAND;
	}

	set_busy( TRUE ) ;
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>

	//for(;;)  (oops!)
	{

		// advance part, waits til head has done
		tape_knock();
    48d8:	0e 94 ed 23 	call	0x47da	; 0x47da <tape_knock>

		// vacuum on
		vacuum ( 1 );
    48dc:	81 e0       	ldi	r24, 0x01	; 1
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	0e 94 b4 21 	call	0x4368	; 0x4368 <vacuum>

		// push head down
		head_down( 1 );
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    48ec:	28 e8       	ldi	r18, 0x88	; 136
    48ee:	33 e1       	ldi	r19, 0x13	; 19
    48f0:	40 e9       	ldi	r20, 0x90	; 144
    48f2:	51 e0       	ldi	r21, 0x01	; 1
    48f4:	ca 01       	movw	r24, r20
    48f6:	01 97       	sbiw	r24, 0x01	; 1
    48f8:	f1 f7       	brne	.-4      	; 0x48f6 <pickup_part+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48fa:	21 50       	subi	r18, 0x01	; 1
    48fc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48fe:	d1 f7       	brne	.-12     	; 0x48f4 <pickup_part+0x3e>

		//settle (probably doesn't need this)
		_delay_ms( 500 );

		// head up
		head_down ( 0 ) ;
    4900:	80 e0       	ldi	r24, 0x00	; 0
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	0e 94 b7 20 	call	0x416e	; 0x416e <head_down>
    4908:	28 e8       	ldi	r18, 0x88	; 136
    490a:	33 e1       	ldi	r19, 0x13	; 19
    490c:	40 e9       	ldi	r20, 0x90	; 144
    490e:	51 e0       	ldi	r21, 0x01	; 1
    4910:	ca 01       	movw	r24, r20
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	f1 f7       	brne	.-4      	; 0x4912 <pickup_part+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4916:	21 50       	subi	r18, 0x01	; 1
    4918:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    491a:	d1 f7       	brne	.-12     	; 0x4910 <pickup_part+0x5a>

	}

	_delay_ms( 500 );

	set_busy( FALSE ) ;
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <set_busy>
    4922:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    4924:	08 95       	ret

00004926 <usb_setEventHandler>:

static usb_eventHandler * eventHandler;

void usb_setEventHandler(usb_eventHandler * handler)
{
        eventHandler = handler;
    4926:	90 93 82 06 	sts	0x0682, r25
    492a:	80 93 81 06 	sts	0x0681, r24
}
    492e:	08 95       	ret

00004930 <usb_fireEvent>:
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void usb_fireEvent(usb_device * device, usb_eventType event)
{
        eventHandler(device, event);
    4930:	e0 91 81 06 	lds	r30, 0x0681
    4934:	f0 91 82 06 	lds	r31, 0x0682
    4938:	19 95       	eicall
}
    493a:	08 95       	ret

0000493c <usb_initEndPoint>:

void usb_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
    493c:	fc 01       	movw	r30, r24
        endpoint->address = address;
    493e:	60 83       	st	Z, r22
        endpoint->sendToggle = bmSNDTOG0;
    4940:	80 e4       	ldi	r24, 0x40	; 64
    4942:	84 83       	std	Z+4, r24	; 0x04
        endpoint->receiveToggle = bmRCVTOG0;
    4944:	80 e1       	ldi	r24, 0x10	; 16
    4946:	85 83       	std	Z+5, r24	; 0x05
}
    4948:	08 95       	ret

0000494a <usb_initDevice>:

    return 0;
}

int usb_initDevice(usb_device * device, int configuration)
{
    494a:	ef 92       	push	r14
    494c:	ff 92       	push	r15
    494e:	0f 93       	push	r16
    4950:	1f 93       	push	r17
    4952:	df 93       	push	r29
    4954:	cf 93       	push	r28
    4956:	00 d0       	rcall	.+0      	; 0x4958 <usb_initDevice+0xe>
    4958:	0f 92       	push	r0
    495a:	cd b7       	in	r28, 0x3d	; 61
    495c:	de b7       	in	r29, 0x3e	; 62
    495e:	7c 01       	movw	r14, r24
        char buf[4];

        uint8_t rcode;

        // Set the configuration for this USB device.
        rcode = usb_setConfiguration(device, configuration);
    4960:	0e 94 88 29 	call	0x5310	; 0x5310 <usb_setConfiguration>
        if (rcode<0) return rcode;

        // Get the first supported language.
        rcode = usb_getString(device, 0, 0, 4, buf);
    4964:	c7 01       	movw	r24, r14
    4966:	60 e0       	ldi	r22, 0x00	; 0
    4968:	40 e0       	ldi	r20, 0x00	; 0
    496a:	24 e0       	ldi	r18, 0x04	; 4
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	8e 01       	movw	r16, r28
    4970:	0f 5f       	subi	r16, 0xFF	; 255
    4972:	1f 4f       	sbci	r17, 0xFF	; 255
    4974:	0e 94 2c 2a 	call	0x5458	; 0x5458 <usb_getString>
        if (rcode<0) return rcode;
    device->firstStringLanguage = (buf[3] << 8) | buf[2];
    4978:	3c 81       	ldd	r19, Y+4	; 0x04
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	4b 81       	ldd	r20, Y+3	; 0x03
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	24 2b       	or	r18, r20
    4982:	35 2b       	or	r19, r21
    4984:	f7 01       	movw	r30, r14
    4986:	35 8b       	std	Z+21, r19	; 0x15
    4988:	24 8b       	std	Z+20, r18	; 0x14

    return rcode;
}
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	0f 90       	pop	r0
    4994:	cf 91       	pop	r28
    4996:	df 91       	pop	r29
    4998:	1f 91       	pop	r17
    499a:	0f 91       	pop	r16
    499c:	ff 90       	pop	r15
    499e:	ef 90       	pop	r14
    49a0:	08 95       	ret

000049a2 <usb_printDeviceInfo>:

/**
 * Print USB device information.
 */
int usb_printDeviceInfo(usb_device * device)
{
    49a2:	df 93       	push	r29
    49a4:	cf 93       	push	r28
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    49aa:	62 97       	sbiw	r28, 0x12	; 18
    49ac:	0f b6       	in	r0, 0x3f	; 63
    49ae:	f8 94       	cli
    49b0:	de bf       	out	0x3e, r29	; 62
    49b2:	0f be       	out	0x3f, r0	; 63
    49b4:	cd bf       	out	0x3d, r28	; 61
        int rcode;
    // char buf[128];

    // Read the device descriptor
        usb_deviceDescriptor deviceDescriptor;
    rcode = usb_getDeviceDescriptor(device, &deviceDescriptor);
    49b6:	be 01       	movw	r22, r28
    49b8:	6f 5f       	subi	r22, 0xFF	; 255
    49ba:	7f 4f       	sbci	r23, 0xFF	; 255
    49bc:	0e 94 11 2a 	call	0x5422	; 0x5422 <usb_getDeviceDescriptor>
    usb_getString(device, deviceDescriptor.iSerialNumber, device->firstStringLanguage, 128, buf);
    avr_serialPrintf("Serial number: %s\n", buf);
    */

    return 0;
}
    49c0:	62 96       	adiw	r28, 0x12	; 18
    49c2:	0f b6       	in	r0, 0x3f	; 63
    49c4:	f8 94       	cli
    49c6:	de bf       	out	0x3e, r29	; 62
    49c8:	0f be       	out	0x3f, r0	; 63
    49ca:	cd bf       	out	0x3d, r28	; 61
    49cc:	cf 91       	pop	r28
    49ce:	df 91       	pop	r29
    49d0:	08 95       	ret

000049d2 <max3421e_write>:
 * @param value value to write.
 */
void max3421e_write(uint8_t reg, uint8_t value)
{
        // Pull slave select low to indicate start of transfer.
        MAX_SS(0);
    49d2:	2c 98       	cbi	0x05, 4	; 5

        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
    49d4:	82 60       	ori	r24, 0x02	; 2
    49d6:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    49d8:	0d b4       	in	r0, 0x2d	; 45
    49da:	07 fe       	sbrs	r0, 7
    49dc:	fd cf       	rjmp	.-6      	; 0x49d8 <max3421e_write+0x6>

        // Transfer value byte.
        SPDR = value;
    49de:	6e bd       	out	0x2e, r22	; 46
        while (!(SPSR & (1 << SPIF)));
    49e0:	0d b4       	in	r0, 0x2d	; 45
    49e2:	07 fe       	sbrs	r0, 7
    49e4:	fd cf       	rjmp	.-6      	; 0x49e0 <max3421e_write+0xe>

        // Pull slave select high to indicate end of transfer.
        MAX_SS(1);
    49e6:	2c 9a       	sbi	0x05, 4	; 5

        return;
}
    49e8:	08 95       	ret

000049ea <max3421e_writeMultiple>:
 * @return a pointer to values, incremented by the number of bytes written (values + length).
 */
uint8_t * max3421e_writeMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
        // Pull slave select low to indicate start of transfer.
        MAX_SS(0);
    49ea:	2c 98       	cbi	0x05, 4	; 5

        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
    49ec:	82 60       	ori	r24, 0x02	; 2
    49ee:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    49f0:	0d b4       	in	r0, 0x2d	; 45
    49f2:	07 fe       	sbrs	r0, 7
    49f4:	fd cf       	rjmp	.-6      	; 0x49f0 <max3421e_writeMultiple+0x6>

        // Transfer values.
        while (count--)
    49f6:	66 23       	and	r22, r22
    49f8:	89 f0       	breq	.+34     	; 0x4a1c <max3421e_writeMultiple+0x32>
    49fa:	61 50       	subi	r22, 0x01	; 1
    49fc:	fa 01       	movw	r30, r20
    49fe:	70 e0       	ldi	r23, 0x00	; 0
    4a00:	6f 5f       	subi	r22, 0xFF	; 255
    4a02:	7f 4f       	sbci	r23, 0xFF	; 255
    4a04:	64 0f       	add	r22, r20
    4a06:	75 1f       	adc	r23, r21
        {
                // Send next value byte.
                SPDR = (*values);
    4a08:	80 81       	ld	r24, Z
    4a0a:	8e bd       	out	0x2e, r24	; 46
                while (!(SPSR & (1 << SPIF)));
    4a0c:	0d b4       	in	r0, 0x2d	; 45
    4a0e:	07 fe       	sbrs	r0, 7
    4a10:	fd cf       	rjmp	.-6      	; 0x4a0c <max3421e_writeMultiple+0x22>

                values++;
    4a12:	31 96       	adiw	r30, 0x01	; 1
        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
        while (!(SPSR & (1 << SPIF)));

        // Transfer values.
        while (count--)
    4a14:	e6 17       	cp	r30, r22
    4a16:	f7 07       	cpc	r31, r23
    4a18:	b9 f7       	brne	.-18     	; 0x4a08 <max3421e_writeMultiple+0x1e>
    4a1a:	af 01       	movw	r20, r30

                values++;
        }

        // Pull slave select high to indicate end of transfer.
        MAX_SS(1);
    4a1c:	2c 9a       	sbi	0x05, 4	; 5

        return (values);
}
    4a1e:	ca 01       	movw	r24, r20
    4a20:	08 95       	ret

00004a22 <max3421e_read>:
 * @return result value.
 */
uint8_t max3421e_read(uint8_t reg)
{
        // Pull slave-select high to initiate transfer.
        MAX_SS(0);
    4a22:	2c 98       	cbi	0x05, 4	; 5

        // Send a command byte containing the register number.
        SPDR = reg;
    4a24:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    4a26:	0d b4       	in	r0, 0x2d	; 45
    4a28:	07 fe       	sbrs	r0, 7
    4a2a:	fd cf       	rjmp	.-6      	; 0x4a26 <max3421e_read+0x4>

        // Send an empty byte while reading.
        SPDR = 0;
    4a2c:	1e bc       	out	0x2e, r1	; 46
        while (!(SPSR & (1 << SPIF)));
    4a2e:	0d b4       	in	r0, 0x2d	; 45
    4a30:	07 fe       	sbrs	r0, 7
    4a32:	fd cf       	rjmp	.-6      	; 0x4a2e <max3421e_read+0xc>

        // Pull slave-select low to signal transfer complete.
        MAX_SS(1);
    4a34:	2c 9a       	sbi	0x05, 4	; 5

        // Return result byte.
        return (SPDR);
    4a36:	8e b5       	in	r24, 0x2e	; 46
}
    4a38:	08 95       	ret

00004a3a <max3421e_readMultiple>:
 * @return pointer to the input buffer + count.
 */
uint8_t * max3421e_readMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
        // Pull slave-select high to initiate transfer.
        MAX_SS(0);
    4a3a:	2c 98       	cbi	0x05, 4	; 5

        // Send a command byte containing the register number.
        SPDR = reg;
    4a3c:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF))); //wait
    4a3e:	0d b4       	in	r0, 0x2d	; 45
    4a40:	07 fe       	sbrs	r0, 7
    4a42:	fd cf       	rjmp	.-6      	; 0x4a3e <max3421e_readMultiple+0x4>

        // Read [count] bytes.
        while (count--)
    4a44:	66 23       	and	r22, r22
    4a46:	89 f0       	breq	.+34     	; 0x4a6a <max3421e_readMultiple+0x30>
    4a48:	61 50       	subi	r22, 0x01	; 1
    4a4a:	fa 01       	movw	r30, r20
    4a4c:	70 e0       	ldi	r23, 0x00	; 0
    4a4e:	6f 5f       	subi	r22, 0xFF	; 255
    4a50:	7f 4f       	sbci	r23, 0xFF	; 255
    4a52:	64 0f       	add	r22, r20
    4a54:	75 1f       	adc	r23, r21
        {
                // Send empty byte while reading.
                SPDR = 0;
    4a56:	1e bc       	out	0x2e, r1	; 46
                while (!(SPSR & (1 << SPIF)));
    4a58:	0d b4       	in	r0, 0x2d	; 45
    4a5a:	07 fe       	sbrs	r0, 7
    4a5c:	fd cf       	rjmp	.-6      	; 0x4a58 <max3421e_readMultiple+0x1e>

                *values = SPDR;
    4a5e:	8e b5       	in	r24, 0x2e	; 46
    4a60:	81 93       	st	Z+, r24
        // Send a command byte containing the register number.
        SPDR = reg;
        while (!(SPSR & (1 << SPIF))); //wait

        // Read [count] bytes.
        while (count--)
    4a62:	e6 17       	cp	r30, r22
    4a64:	f7 07       	cpc	r31, r23
    4a66:	b9 f7       	brne	.-18     	; 0x4a56 <max3421e_readMultiple+0x1c>
    4a68:	af 01       	movw	r20, r30
                *values = SPDR;
                values++;
        }

        // Pull slave-select low to signal transfer complete.
        MAX_SS(1);
    4a6a:	2c 9a       	sbi	0x05, 4	; 5

        // Return the byte array + count.
        return (values);
}
    4a6c:	ca 01       	movw	r24, r20
    4a6e:	08 95       	ret

00004a70 <max3421e_getVbusState>:
 * @return the status of Vbus.
 */
uint8_t max3421e_getVbusState()
{
        return vbusState;
}
    4a70:	80 91 83 06 	lds	r24, 0x0683
    4a74:	08 95       	ret

00004a76 <max3421e_busprobe>:
 * Probes the bus to determine device presence and speed, and switches host to this speed.
 */
void max3421e_busprobe(void)
{
        uint8_t bus_sample;
        bus_sample = max3421e_read(MAX_REG_HRSL); //Get J,K status
    4a76:	88 ef       	ldi	r24, 0xF8	; 248
    4a78:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the uint8_t

        switch (bus_sample)
    4a7c:	80 7c       	andi	r24, 0xC0	; 192
    4a7e:	80 34       	cpi	r24, 0x40	; 64
    4a80:	81 f0       	breq	.+32     	; 0x4aa2 <max3421e_busprobe+0x2c>
    4a82:	81 34       	cpi	r24, 0x41	; 65
    4a84:	28 f0       	brcs	.+10     	; 0x4a90 <max3421e_busprobe+0x1a>
    4a86:	80 38       	cpi	r24, 0x80	; 128
    4a88:	c9 f0       	breq	.+50     	; 0x4abc <max3421e_busprobe+0x46>
    4a8a:	80 3c       	cpi	r24, 0xC0	; 192
    4a8c:	31 f0       	breq	.+12     	; 0x4a9a <max3421e_busprobe+0x24>
    4a8e:	08 95       	ret
    4a90:	88 23       	and	r24, r24
    4a92:	09 f5       	brne	.+66     	; 0x4ad6 <max3421e_busprobe+0x60>
                break;
        case (bmSE1): //illegal state
                vbusState = SE1;
                break;
        case (bmSE0): //disconnected state
                vbusState = SE0;
    4a94:	10 92 83 06 	sts	0x0683, r1
    4a98:	08 95       	ret
                        max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
                        vbusState = FSHOST;
                }
                break;
        case (bmSE1): //illegal state
                vbusState = SE1;
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	80 93 83 06 	sts	0x0683, r24
    4aa0:	08 95       	ret
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST); //start low-speed host
                        vbusState = LSHOST;
                }
                break;
        case (bmKSTATUS):
                if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    4aa2:	88 ed       	ldi	r24, 0xD8	; 216
    4aa4:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4aa8:	81 fd       	sbrc	r24, 1
    4aaa:	0d c0       	rjmp	.+26     	; 0x4ac6 <max3421e_busprobe+0x50>
                {
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
    4aac:	88 ed       	ldi	r24, 0xD8	; 216
    4aae:	6b ec       	ldi	r22, 0xCB	; 203
    4ab0:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
                        vbusState = LSHOST;
    4ab4:	83 e0       	ldi	r24, 0x03	; 3
    4ab6:	80 93 83 06 	sts	0x0683, r24
    4aba:	08 95       	ret

        switch (bus_sample)
        {
        //start full-speed or low-speed host
        case (bmJSTATUS):
                if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    4abc:	88 ed       	ldi	r24, 0xD8	; 216
    4abe:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4ac2:	81 fd       	sbrc	r24, 1
    4ac4:	f3 cf       	rjmp	.-26     	; 0x4aac <max3421e_busprobe+0x36>
                {
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
                        vbusState = LSHOST;
                } else
                {
                        max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
    4ac6:	88 ed       	ldi	r24, 0xD8	; 216
    4ac8:	69 ec       	ldi	r22, 0xC9	; 201
    4aca:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
                        vbusState = FSHOST;
    4ace:	82 e0       	ldi	r24, 0x02	; 2
    4ad0:	80 93 83 06 	sts	0x0683, r24
    4ad4:	08 95       	ret
    4ad6:	08 95       	ret

00004ad8 <max3421e_interruptHandler>:

/**
 * Interrupt handler.
 */
uint8_t max3421e_interruptHandler(void)
{
    4ad8:	1f 93       	push	r17
        uint8_t interruptStatus;
        uint8_t HIRQ_sendback = 0x00;

        // Determine interrupt source.
        interruptStatus = max3421e_read(MAX_REG_HIRQ);
    4ada:	88 ec       	ldi	r24, 0xC8	; 200
    4adc:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>

        if (interruptStatus & bmFRAMEIRQ)
    4ae0:	86 fd       	sbrc	r24, 6
    4ae2:	0d c0       	rjmp	.+26     	; 0x4afe <max3421e_interruptHandler+0x26>
    4ae4:	10 e0       	ldi	r17, 0x00	; 0
        {
                //->1ms SOF interrupt handler
                HIRQ_sendback |= bmFRAMEIRQ;
        }

        if (interruptStatus & bmCONDETIRQ)
    4ae6:	85 ff       	sbrs	r24, 5
    4ae8:	03 c0       	rjmp	.+6      	; 0x4af0 <max3421e_interruptHandler+0x18>
        {
                max3421e_busprobe();
    4aea:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <max3421e_busprobe>

                HIRQ_sendback |= bmCONDETIRQ;
    4aee:	10 62       	ori	r17, 0x20	; 32
        }

        // End HIRQ interrupts handling, clear serviced IRQs
        max3421e_write(MAX_REG_HIRQ, HIRQ_sendback);
    4af0:	88 ec       	ldi	r24, 0xC8	; 200
    4af2:	61 2f       	mov	r22, r17
    4af4:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        return (HIRQ_sendback);
}
    4af8:	81 2f       	mov	r24, r17
    4afa:	1f 91       	pop	r17
    4afc:	08 95       	ret
        uint8_t HIRQ_sendback = 0x00;

        // Determine interrupt source.
        interruptStatus = max3421e_read(MAX_REG_HIRQ);

        if (interruptStatus & bmFRAMEIRQ)
    4afe:	10 e4       	ldi	r17, 0x40	; 64
    4b00:	f2 cf       	rjmp	.-28     	; 0x4ae6 <max3421e_interruptHandler+0xe>

00004b02 <max3421e_gpxInterruptHandler>:
 * GPX interrupt handler
 */
uint8_t max3421e_gpxInterruptHandler(void)
{
        //read GPIN IRQ register
        uint8_t interruptStatus = max3421e_read(MAX_REG_GPINIRQ);
    4b02:	80 eb       	ldi	r24, 0xB0	; 176
    4b04:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
        //        vbusPwr( ON );
        //        regWr( rGPINIRQ, bmGPINIRQ7 );
        //    }

        return (interruptStatus);
}
    4b08:	08 95       	ret

00004b0a <max3421e_poll>:
/**
 * MAX3421 state change task and interrupt handler.
 * @return error code or 0 if successful.
 */
uint8_t max3421e_poll(void)
{
    4b0a:	1f 93       	push	r17
        uint8_t rcode = 0;

        // Check interrupt.
        if (MAX_INT() == 0)
    4b0c:	80 91 02 01 	lds	r24, 0x0102
    4b10:	86 ff       	sbrs	r24, 6
    4b12:	0a c0       	rjmp	.+20     	; 0x4b28 <max3421e_poll+0x1e>
    4b14:	10 e0       	ldi	r17, 0x00	; 0
                rcode = max3421e_interruptHandler();

        if (MAX_GPX() == 0)
    4b16:	80 91 02 01 	lds	r24, 0x0102
    4b1a:	85 fd       	sbrc	r24, 5
    4b1c:	02 c0       	rjmp	.+4      	; 0x4b22 <max3421e_poll+0x18>
                max3421e_gpxInterruptHandler();
    4b1e:	0e 94 81 25 	call	0x4b02	; 0x4b02 <max3421e_gpxInterruptHandler>

        return (rcode);
}
    4b22:	81 2f       	mov	r24, r17
    4b24:	1f 91       	pop	r17
    4b26:	08 95       	ret
{
        uint8_t rcode = 0;

        // Check interrupt.
        if (MAX_INT() == 0)
                rcode = max3421e_interruptHandler();
    4b28:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <max3421e_interruptHandler>
    4b2c:	18 2f       	mov	r17, r24
    4b2e:	f3 cf       	rjmp	.-26     	; 0x4b16 <max3421e_poll+0xc>

00004b30 <max3421e_reset>:
/**
 * Resets the max3412e. Sets the chip reset bit, SPI configuration is not affected.
 * @return true iff success.
 */
boolean max3421e_reset(void)
{
    4b30:	1f 93       	push	r17
        uint8_t tmp = 0;

        // Chip reset. This stops the oscillator
        max3421e_write(MAX_REG_USBCTL, bmCHIPRES);
    4b32:	88 e7       	ldi	r24, 0x78	; 120
    4b34:	60 e2       	ldi	r22, 0x20	; 32
    4b36:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        // Remove the reset
        max3421e_write(MAX_REG_USBCTL, 0x00);
    4b3a:	88 e7       	ldi	r24, 0x78	; 120
    4b3c:	60 e0       	ldi	r22, 0x00	; 0
    4b3e:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        avr_delay(10);
    4b42:	6a e0       	ldi	r22, 0x0A	; 10
    4b44:	70 e0       	ldi	r23, 0x00	; 0
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <avr_delay>
    4b4e:	10 e0       	ldi	r17, 0x00	; 0
    4b50:	02 c0       	rjmp	.+4      	; 0x4b56 <max3421e_reset+0x26>

        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    4b52:	11 50       	subi	r17, 0x01	; 1
        {
                // Timeout after 256 attempts.
                tmp++;
                if (tmp == 0)
    4b54:	41 f0       	breq	.+16     	; 0x4b66 <max3421e_reset+0x36>
        max3421e_write(MAX_REG_USBCTL, 0x00);

        avr_delay(10);

        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    4b56:	88 e6       	ldi	r24, 0x68	; 104
    4b58:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4b5c:	80 ff       	sbrs	r24, 0
    4b5e:	f9 cf       	rjmp	.-14     	; 0x4b52 <max3421e_reset+0x22>
    4b60:	81 e0       	ldi	r24, 0x01	; 1
                        return (false);
        }

        // Success.
        return (true);
}
    4b62:	1f 91       	pop	r17
    4b64:	08 95       	ret
        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
        {
                // Timeout after 256 attempts.
                tmp++;
                if (tmp == 0)
    4b66:	80 e0       	ldi	r24, 0x00	; 0
                        return (false);
        }

        // Success.
        return (true);
}
    4b68:	1f 91       	pop	r17
    4b6a:	08 95       	ret

00004b6c <max3421e_powerOn>:
 * Initialises the max3421e after power-on.
 */
void max3421e_powerOn(void)
{
        // Configure full-duplex SPI, interrupt pulse.
        max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
    4b6c:	88 e8       	ldi	r24, 0x88	; 136
    4b6e:	6a e1       	ldi	r22, 0x1A	; 26
    4b70:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        // Stop/start the oscillator.
        if (max3421e_reset() == false)
    4b74:	0e 94 98 25 	call	0x4b30	; 0x4b30 <max3421e_reset>
    4b78:	88 23       	and	r24, r24
    4b7a:	e1 f0       	breq	.+56     	; 0x4bb4 <max3421e_powerOn+0x48>
		      	printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));

        // Configure host operation.
        max3421e_write(MAX_REG_MODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ ); // set pull-downs, Host, Separate GPIN IRQ on GPX
    4b7c:	88 ed       	ldi	r24, 0xD8	; 216
    4b7e:	61 ed       	ldi	r22, 0xD1	; 209
    4b80:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
        max3421e_write(MAX_REG_HIEN, bmCONDETIE | bmFRAMEIE ); //connection detection
    4b84:	80 ed       	ldi	r24, 0xD0	; 208
    4b86:	60 e6       	ldi	r22, 0x60	; 96
    4b88:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        // Check if device is connected.
        max3421e_write(MAX_REG_HCTL, bmSAMPLEBUS ); // sample USB bus
    4b8c:	88 ee       	ldi	r24, 0xE8	; 232
    4b8e:	64 e0       	ldi	r22, 0x04	; 4
    4b90:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
        while (!(max3421e_read(MAX_REG_HCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    4b94:	88 ee       	ldi	r24, 0xE8	; 232
    4b96:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4b9a:	82 ff       	sbrs	r24, 2
    4b9c:	fb cf       	rjmp	.-10     	; 0x4b94 <max3421e_powerOn+0x28>

        max3421e_busprobe(); //check if anything is connected
    4b9e:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <max3421e_busprobe>
        max3421e_write(MAX_REG_HIRQ, bmCONDETIRQ ); //clear connection detect interrupt
    4ba2:	88 ec       	ldi	r24, 0xC8	; 200
    4ba4:	60 e2       	ldi	r22, 0x20	; 32
    4ba6:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        // Enable interrupt pin.
        max3421e_write(MAX_REG_CPUCTL, 0x01);
    4baa:	80 e8       	ldi	r24, 0x80	; 128
    4bac:	61 e0       	ldi	r22, 0x01	; 1
    4bae:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
}
    4bb2:	08 95       	ret
        // Configure full-duplex SPI, interrupt pulse.
        max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX

        // Stop/start the oscillator.
        if (max3421e_reset() == false)
		      	printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));
    4bb4:	80 ec       	ldi	r24, 0xC0	; 192
    4bb6:	95 e0       	ldi	r25, 0x05	; 5
    4bb8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <printPgmString>
    4bbc:	df cf       	rjmp	.-66     	; 0x4b7c <max3421e_powerOn+0x10>

00004bbe <max3421e_init>:
 * Initialises the max3421e host shield. Initialises the SPI bus and sets the required pin directions.
 * Must be called before powerOn.
 */
void max3421e_init()
{
        spi_begin();
    4bbe:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <spi_begin>

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)

        // Set MAX_INT and MAX_GPX pins to input mode.
        DDRH &= ~(0x40 | 0x20);
    4bc2:	e1 e0       	ldi	r30, 0x01	; 1
    4bc4:	f1 e0       	ldi	r31, 0x01	; 1
    4bc6:	80 81       	ld	r24, Z
    4bc8:	8f 79       	andi	r24, 0x9F	; 159
    4bca:	80 83       	st	Z, r24

        // Set SPI !SS pint to output mode.
        DDRB |= 0x10;
    4bcc:	24 9a       	sbi	0x04, 4	; 4

        // Set RESET pin to output
        DDRH |= 0x10;
    4bce:	80 81       	ld	r24, Z
    4bd0:	80 61       	ori	r24, 0x10	; 16
    4bd2:	80 83       	st	Z, r24

#endif


        // Pull SPI !SS high
        MAX_SS(1);
    4bd4:	2c 9a       	sbi	0x05, 4	; 5

        // Reset
        MAX_RESET(1);
    4bd6:	e2 e0       	ldi	r30, 0x02	; 2
    4bd8:	f1 e0       	ldi	r31, 0x01	; 1
    4bda:	80 81       	ld	r24, Z
    4bdc:	80 61       	ori	r24, 0x10	; 16
    4bde:	80 83       	st	Z, r24
}
    4be0:	08 95       	ret

00004be2 <spi_begin>:
        // MISO pin automatically overrides to INPUT.
        // When the SS pin is set as OUTPUT, it can be used as
        // a general purpose output port (it doesn't influence
        // SPI operations).

        SPI_PORT_DIR |= SPI_BIT_MOSI | SPI_BIT_SCK | SPI_BIT_SS;
    4be2:	84 b1       	in	r24, 0x04	; 4
    4be4:	87 60       	ori	r24, 0x07	; 7
    4be6:	84 b9       	out	0x04, r24	; 4
        SPI_PORT_DIR &= ~SPI_BIT_MISO;
    4be8:	23 98       	cbi	0x04, 3	; 4

        SPI_PORT &= ~(SPI_BIT_MOSI | SPI_BIT_SCK);
    4bea:	85 b1       	in	r24, 0x05	; 5
    4bec:	89 7f       	andi	r24, 0xF9	; 249
    4bee:	85 b9       	out	0x05, r24	; 5
        SPI_PORT |= SPI_BIT_SS;
    4bf0:	28 9a       	sbi	0x05, 0	; 5

        // Warning: if the SS pin ever becomes a LOW INPUT then SPI
        // automatically switches to Slave, so the data direction of
        // the SS pin MUST be kept as OUTPUT.
        SPCR |= _BV(MSTR);
    4bf2:	8c b5       	in	r24, 0x2c	; 44
    4bf4:	80 61       	ori	r24, 0x10	; 16
    4bf6:	8c bd       	out	0x2c, r24	; 44
        SPCR |= _BV(SPE);
    4bf8:	8c b5       	in	r24, 0x2c	; 44
    4bfa:	80 64       	ori	r24, 0x40	; 64
    4bfc:	8c bd       	out	0x2c, r24	; 44
}
    4bfe:	08 95       	ret

00004c00 <__vector_23>:
volatile uint32_t timer0_millis = 0;
static uint8_t timer0_fract = 0;
volatile uint16_t timer1_overflow_count = 0x0;

SIGNAL(TIMER0_OVF_vect)
{
    4c00:	1f 92       	push	r1
    4c02:	0f 92       	push	r0
    4c04:	0f b6       	in	r0, 0x3f	; 63
    4c06:	0f 92       	push	r0
    4c08:	11 24       	eor	r1, r1
    4c0a:	2f 93       	push	r18
    4c0c:	3f 93       	push	r19
    4c0e:	8f 93       	push	r24
    4c10:	9f 93       	push	r25
    4c12:	af 93       	push	r26
    4c14:	bf 93       	push	r27

        // copy these to local variables so they can be stored in registers
        // (volatile variables must be read from memory on every access)
        uint32_t m = timer0_millis;
    4c16:	80 91 88 06 	lds	r24, 0x0688
    4c1a:	90 91 89 06 	lds	r25, 0x0689
    4c1e:	a0 91 8a 06 	lds	r26, 0x068A
    4c22:	b0 91 8b 06 	lds	r27, 0x068B
        uint8_t f = timer0_fract;
    4c26:	30 91 8e 06 	lds	r19, 0x068E

        m += MILLIS_INC;
    4c2a:	01 96       	adiw	r24, 0x01	; 1
    4c2c:	a1 1d       	adc	r26, r1
    4c2e:	b1 1d       	adc	r27, r1
        f += FRACT_INC;
    4c30:	23 2f       	mov	r18, r19
    4c32:	2d 5f       	subi	r18, 0xFD	; 253
        if (f >= FRACT_MAX)
    4c34:	2d 37       	cpi	r18, 0x7D	; 125
    4c36:	20 f0       	brcs	.+8      	; 0x4c40 <__vector_23+0x40>
        {
                f -= FRACT_MAX;
    4c38:	2d 57       	subi	r18, 0x7D	; 125
                m += 1;
    4c3a:	01 96       	adiw	r24, 0x01	; 1
    4c3c:	a1 1d       	adc	r26, r1
    4c3e:	b1 1d       	adc	r27, r1
        }

        timer0_fract = f;
    4c40:	20 93 8e 06 	sts	0x068E, r18
        timer0_millis = m;
    4c44:	80 93 88 06 	sts	0x0688, r24
    4c48:	90 93 89 06 	sts	0x0689, r25
    4c4c:	a0 93 8a 06 	sts	0x068A, r26
    4c50:	b0 93 8b 06 	sts	0x068B, r27
        timer0_overflow_count ++;
    4c54:	80 91 84 06 	lds	r24, 0x0684
    4c58:	90 91 85 06 	lds	r25, 0x0685
    4c5c:	a0 91 86 06 	lds	r26, 0x0686
    4c60:	b0 91 87 06 	lds	r27, 0x0687
    4c64:	01 96       	adiw	r24, 0x01	; 1
    4c66:	a1 1d       	adc	r26, r1
    4c68:	b1 1d       	adc	r27, r1
    4c6a:	80 93 84 06 	sts	0x0684, r24
    4c6e:	90 93 85 06 	sts	0x0685, r25
    4c72:	a0 93 86 06 	sts	0x0686, r26
    4c76:	b0 93 87 06 	sts	0x0687, r27
}
    4c7a:	bf 91       	pop	r27
    4c7c:	af 91       	pop	r26
    4c7e:	9f 91       	pop	r25
    4c80:	8f 91       	pop	r24
    4c82:	3f 91       	pop	r19
    4c84:	2f 91       	pop	r18
    4c86:	0f 90       	pop	r0
    4c88:	0f be       	out	0x3f, r0	; 63
    4c8a:	0f 90       	pop	r0
    4c8c:	1f 90       	pop	r1
    4c8e:	18 95       	reti

00004c90 <avr_millis>:

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4c90:	8f b7       	in	r24, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4c92:	f8 94       	cli
        m = timer0_millis;
    4c94:	20 91 88 06 	lds	r18, 0x0688
    4c98:	30 91 89 06 	lds	r19, 0x0689
    4c9c:	40 91 8a 06 	lds	r20, 0x068A
    4ca0:	50 91 8b 06 	lds	r21, 0x068B
        SREG = oldSREG;
    4ca4:	8f bf       	out	0x3f, r24	; 63

        // Enable interrupts
        sei();
    4ca6:	78 94       	sei

        return m;
}
    4ca8:	b9 01       	movw	r22, r18
    4caa:	ca 01       	movw	r24, r20
    4cac:	08 95       	ret

00004cae <avr_ticks>:

uint64_t avr_ticks()
{
    4cae:	af 92       	push	r10
    4cb0:	bf 92       	push	r11
    4cb2:	cf 92       	push	r12
    4cb4:	df 92       	push	r13
    4cb6:	ef 92       	push	r14
    4cb8:	ff 92       	push	r15
    4cba:	0f 93       	push	r16
    4cbc:	1f 93       	push	r17
        return (timer0_overflow_count * 256 + TCNT0) * 64;
    4cbe:	a0 90 84 06 	lds	r10, 0x0684
    4cc2:	b0 90 85 06 	lds	r11, 0x0685
    4cc6:	c0 90 86 06 	lds	r12, 0x0686
    4cca:	d0 90 87 06 	lds	r13, 0x0687
    4cce:	86 b5       	in	r24, 0x26	; 38
    4cd0:	dc 2c       	mov	r13, r12
    4cd2:	cb 2c       	mov	r12, r11
    4cd4:	ba 2c       	mov	r11, r10
    4cd6:	aa 24       	eor	r10, r10
    4cd8:	a8 0e       	add	r10, r24
    4cda:	b1 1c       	adc	r11, r1
    4cdc:	c1 1c       	adc	r12, r1
    4cde:	d1 1c       	adc	r13, r1
    4ce0:	aa 0c       	add	r10, r10
    4ce2:	bb 1c       	adc	r11, r11
    4ce4:	cc 1c       	adc	r12, r12
    4ce6:	dd 1c       	adc	r13, r13
    4ce8:	aa 0c       	add	r10, r10
    4cea:	bb 1c       	adc	r11, r11
    4cec:	cc 1c       	adc	r12, r12
    4cee:	dd 1c       	adc	r13, r13
    4cf0:	aa 0c       	add	r10, r10
    4cf2:	bb 1c       	adc	r11, r11
    4cf4:	cc 1c       	adc	r12, r12
    4cf6:	dd 1c       	adc	r13, r13
    4cf8:	aa 0c       	add	r10, r10
    4cfa:	bb 1c       	adc	r11, r11
    4cfc:	cc 1c       	adc	r12, r12
    4cfe:	dd 1c       	adc	r13, r13
    4d00:	aa 0c       	add	r10, r10
    4d02:	bb 1c       	adc	r11, r11
    4d04:	cc 1c       	adc	r12, r12
    4d06:	dd 1c       	adc	r13, r13
    4d08:	aa 0c       	add	r10, r10
    4d0a:	bb 1c       	adc	r11, r11
    4d0c:	cc 1c       	adc	r12, r12
    4d0e:	dd 1c       	adc	r13, r13
}
    4d10:	95 01       	movw	r18, r10
    4d12:	a6 01       	movw	r20, r12
    4d14:	60 e0       	ldi	r22, 0x00	; 0
    4d16:	70 e0       	ldi	r23, 0x00	; 0
    4d18:	80 e0       	ldi	r24, 0x00	; 0
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	1f 91       	pop	r17
    4d1e:	0f 91       	pop	r16
    4d20:	ff 90       	pop	r15
    4d22:	ef 90       	pop	r14
    4d24:	df 90       	pop	r13
    4d26:	cf 90       	pop	r12
    4d28:	bf 90       	pop	r11
    4d2a:	af 90       	pop	r10
    4d2c:	08 95       	ret

00004d2e <avr_delay>:

void avr_delay(unsigned long ms)
{
    4d2e:	ef 92       	push	r14
    4d30:	ff 92       	push	r15
    4d32:	0f 93       	push	r16
    4d34:	1f 93       	push	r17
    4d36:	7b 01       	movw	r14, r22
    4d38:	8c 01       	movw	r16, r24
}

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4d3a:	8f b7       	in	r24, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4d3c:	f8 94       	cli
        m = timer0_millis;
    4d3e:	40 91 88 06 	lds	r20, 0x0688
    4d42:	50 91 89 06 	lds	r21, 0x0689
    4d46:	60 91 8a 06 	lds	r22, 0x068A
    4d4a:	70 91 8b 06 	lds	r23, 0x068B
        SREG = oldSREG;
    4d4e:	8f bf       	out	0x3f, r24	; 63

        // Enable interrupts
        sei();
    4d50:	78 94       	sei
}

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4d52:	2f b7       	in	r18, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4d54:	f8 94       	cli
        m = timer0_millis;
    4d56:	80 91 88 06 	lds	r24, 0x0688
    4d5a:	90 91 89 06 	lds	r25, 0x0689
    4d5e:	a0 91 8a 06 	lds	r26, 0x068A
    4d62:	b0 91 8b 06 	lds	r27, 0x068B
        SREG = oldSREG;
    4d66:	2f bf       	out	0x3f, r18	; 63

        // Enable interrupts
        sei();
    4d68:	78 94       	sei

void avr_delay(unsigned long ms)
{
        unsigned long start = avr_millis();

        while (avr_millis() - start <= ms)
    4d6a:	84 1b       	sub	r24, r20
    4d6c:	95 0b       	sbc	r25, r21
    4d6e:	a6 0b       	sbc	r26, r22
    4d70:	b7 0b       	sbc	r27, r23
    4d72:	e8 16       	cp	r14, r24
    4d74:	f9 06       	cpc	r15, r25
    4d76:	0a 07       	cpc	r16, r26
    4d78:	1b 07       	cpc	r17, r27
    4d7a:	58 f7       	brcc	.-42     	; 0x4d52 <avr_delay+0x24>
                ;
}
    4d7c:	1f 91       	pop	r17
    4d7e:	0f 91       	pop	r16
    4d80:	ff 90       	pop	r15
    4d82:	ef 90       	pop	r14
    4d84:	08 95       	ret

00004d86 <avr_micros>:

uint32_t avr_micros()
{
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MICROS_DIVIDER;
    4d86:	80 91 84 00 	lds	r24, 0x0084
    4d8a:	90 91 85 00 	lds	r25, 0x0085
    4d8e:	20 91 8c 06 	lds	r18, 0x068C
    4d92:	30 91 8d 06 	lds	r19, 0x068D
    4d96:	40 e0       	ldi	r20, 0x00	; 0
    4d98:	50 e0       	ldi	r21, 0x00	; 0
    4d9a:	a9 01       	movw	r20, r18
    4d9c:	33 27       	eor	r19, r19
    4d9e:	22 27       	eor	r18, r18
    4da0:	a0 e0       	ldi	r26, 0x00	; 0
    4da2:	b0 e0       	ldi	r27, 0x00	; 0
    4da4:	28 0f       	add	r18, r24
    4da6:	39 1f       	adc	r19, r25
    4da8:	4a 1f       	adc	r20, r26
    4daa:	5b 1f       	adc	r21, r27
    4dac:	22 0f       	add	r18, r18
    4dae:	33 1f       	adc	r19, r19
    4db0:	44 1f       	adc	r20, r20
    4db2:	55 1f       	adc	r21, r21
    4db4:	22 0f       	add	r18, r18
    4db6:	33 1f       	adc	r19, r19
    4db8:	44 1f       	adc	r20, r20
    4dba:	55 1f       	adc	r21, r21
    4dbc:	2c 7f       	andi	r18, 0xFC	; 252
    4dbe:	5f 70       	andi	r21, 0x0F	; 15
}
    4dc0:	b9 01       	movw	r22, r18
    4dc2:	ca 01       	movw	r24, r20
    4dc4:	08 95       	ret

00004dc6 <__vector_20>:
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MILLIS_DIVIDER;
}
*/

SIGNAL(TIMER1_OVF_vect)
{
    4dc6:	1f 92       	push	r1
    4dc8:	0f 92       	push	r0
    4dca:	0f b6       	in	r0, 0x3f	; 63
    4dcc:	0f 92       	push	r0
    4dce:	11 24       	eor	r1, r1
    4dd0:	8f 93       	push	r24
    4dd2:	9f 93       	push	r25
        timer1_overflow_count ++;
    4dd4:	80 91 8c 06 	lds	r24, 0x068C
    4dd8:	90 91 8d 06 	lds	r25, 0x068D
    4ddc:	01 96       	adiw	r24, 0x01	; 1
    4dde:	90 93 8d 06 	sts	0x068D, r25
    4de2:	80 93 8c 06 	sts	0x068C, r24
}
    4de6:	9f 91       	pop	r25
    4de8:	8f 91       	pop	r24
    4dea:	0f 90       	pop	r0
    4dec:	0f be       	out	0x3f, r0	; 63
    4dee:	0f 90       	pop	r0
    4df0:	1f 90       	pop	r1
    4df2:	18 95       	reti

00004df4 <avr_timer1Init>:

void avr_timer1Init()
{
        // Initialise 16-bit timer 1
        // Set prescale to 64
        sbi(TCCR1B, CS01);
    4df4:	e1 e8       	ldi	r30, 0x81	; 129
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	80 81       	ld	r24, Z
    4dfa:	82 60       	ori	r24, 0x02	; 2
    4dfc:	80 83       	st	Z, r24
        sbi(TCCR1B, CS00);
    4dfe:	80 81       	ld	r24, Z
    4e00:	81 60       	ori	r24, 0x01	; 1
    4e02:	80 83       	st	Z, r24

        sbi(TIMSK1, TOIE1);
    4e04:	ef e6       	ldi	r30, 0x6F	; 111
    4e06:	f0 e0       	ldi	r31, 0x00	; 0
    4e08:	80 81       	ld	r24, Z
    4e0a:	81 60       	ori	r24, 0x01	; 1
    4e0c:	80 83       	st	Z, r24
}
    4e0e:	08 95       	ret

00004e10 <setup_timer>:

void setup_timer()
{
        // this needs to be called before setup() or some functions won't
        // work there
        sei();
    4e10:	78 94       	sei

        avr_timer1Init();
    4e12:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <avr_timer1Init>
        // set timer 0 prescale factor to 64
        #ifdef __AVR_ATmega128__
        sbi(TCCR0, CS01);
        sbi(TCCR0, CS00);
        #else
        sbi(TCCR0B, CS01);
    4e16:	85 b5       	in	r24, 0x25	; 37
    4e18:	82 60       	ori	r24, 0x02	; 2
    4e1a:	85 bd       	out	0x25, r24	; 37
        sbi(TCCR0B, CS00);
    4e1c:	85 b5       	in	r24, 0x25	; 37
    4e1e:	81 60       	ori	r24, 0x01	; 1
    4e20:	85 bd       	out	0x25, r24	; 37

        // enable timer 0 overflow interrupt
        #ifdef __AVR_ATmega128__
        sbi(TIMSK, TOIE0);
        #else
        sbi(TIMSK0, TOIE0);
    4e22:	ee e6       	ldi	r30, 0x6E	; 110
    4e24:	f0 e0       	ldi	r31, 0x00	; 0
    4e26:	80 81       	ld	r24, Z
    4e28:	81 60       	ori	r24, 0x01	; 1
    4e2a:	80 83       	st	Z, r24
        sbi(ADCSRA, ADPS2);
        sbi(ADCSRA, ADPS1);
        sbi(ADCSRA, ADPS0);
        */

}
    4e2c:	08 95       	ret

00004e2e <usb_getUsbTaskState>:
}

uint8_t usb_getUsbTaskState()
{
        return (usb_task_state);
}
    4e2e:	80 91 00 02 	lds	r24, 0x0200
    4e32:	08 95       	ret

00004e34 <usb_setUsbTaskState>:

void usb_setUsbTaskState(uint8_t state)
{
        usb_task_state = state;
    4e34:	80 93 00 02 	sts	0x0200, r24
}
    4e38:	08 95       	ret

00004e3a <usb_getDevice>:

usb_device * usb_getDevice(uint8_t address)
{
    4e3a:	98 2f       	mov	r25, r24
        if (address>USB_NUMDEVICES+1) return NULL;
    4e3c:	84 30       	cpi	r24, 0x04	; 4
    4e3e:	40 f4       	brcc	.+16     	; 0x4e50 <usb_getDevice+0x16>

        return &(deviceTable[address]);
    4e40:	86 e1       	ldi	r24, 0x16	; 22
    4e42:	98 9f       	mul	r25, r24
    4e44:	90 01       	movw	r18, r0
    4e46:	11 24       	eor	r1, r1
    4e48:	24 54       	subi	r18, 0x44	; 68
    4e4a:	39 4f       	sbci	r19, 0xF9	; 249
}
    4e4c:	c9 01       	movw	r24, r18
    4e4e:	08 95       	ret
        usb_task_state = state;
}

usb_device * usb_getDevice(uint8_t address)
{
        if (address>USB_NUMDEVICES+1) return NULL;
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0

        return &(deviceTable[address]);
}
    4e54:	c9 01       	movw	r24, r18
    4e56:	08 95       	ret

00004e58 <usb_write>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes written, or error code in case of failure.
 */
int usb_write(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data)
{
    4e58:	2f 92       	push	r2
    4e5a:	3f 92       	push	r3
    4e5c:	4f 92       	push	r4
    4e5e:	5f 92       	push	r5
    4e60:	6f 92       	push	r6
    4e62:	7f 92       	push	r7
    4e64:	8f 92       	push	r8
    4e66:	9f 92       	push	r9
    4e68:	af 92       	push	r10
    4e6a:	bf 92       	push	r11
    4e6c:	cf 92       	push	r12
    4e6e:	df 92       	push	r13
    4e70:	ef 92       	push	r14
    4e72:	ff 92       	push	r15
    4e74:	0f 93       	push	r16
    4e76:	1f 93       	push	r17
    4e78:	df 93       	push	r29
    4e7a:	cf 93       	push	r28
    4e7c:	00 d0       	rcall	.+0      	; 0x4e7e <usb_write+0x26>
    4e7e:	cd b7       	in	r28, 0x3d	; 61
    4e80:	de b7       	in	r29, 0x3e	; 62
    4e82:	fc 01       	movw	r30, r24
    4e84:	5b 01       	movw	r10, r22
    4e86:	2a 01       	movw	r4, r20
    4e88:	92 2e       	mov	r9, r18
    4e8a:	83 2e       	mov	r8, r19
        uint8_t rcode = 0, retry_count;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    4e8c:	80 ee       	ldi	r24, 0xE0	; 224
    4e8e:	60 81       	ld	r22, Z
    4e90:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        unsigned int bytes_tosend, nak_count;
        unsigned int bytes_left = length;
        unsigned int nak_limit = USB_NAK_LIMIT;

        uint32_t timeout = avr_millis() + USB_XFER_TIMEOUT;
    4e94:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    4e98:	6b 01       	movw	r12, r22
    4e9a:	7c 01       	movw	r14, r24
    4e9c:	88 e8       	ldi	r24, 0x88	; 136
    4e9e:	93 e1       	ldi	r25, 0x13	; 19
    4ea0:	a0 e0       	ldi	r26, 0x00	; 0
    4ea2:	b0 e0       	ldi	r27, 0x00	; 0
    4ea4:	c8 0e       	add	r12, r24
    4ea6:	d9 1e       	adc	r13, r25
    4ea8:	ea 1e       	adc	r14, r26
    4eaa:	fb 1e       	adc	r15, r27

        uint8_t maxPacketSize = endpoint->maxPacketSize;
    4eac:	d5 01       	movw	r26, r10
    4eae:	12 96       	adiw	r26, 0x02	; 2
    4eb0:	1c 91       	ld	r17, X

        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;
    4eb2:	11 23       	and	r17, r17
    4eb4:	c9 f4       	brne	.+50     	; 0x4ee8 <usb_write+0x90>
    4eb6:	0e ef       	ldi	r16, 0xFE	; 254
    4eb8:	10 e0       	ldi	r17, 0x00	; 0

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle

        // Should be 0 in all cases.
        return (rcode);
}
    4eba:	c8 01       	movw	r24, r16
    4ebc:	0f 90       	pop	r0
    4ebe:	0f 90       	pop	r0
    4ec0:	0f 90       	pop	r0
    4ec2:	cf 91       	pop	r28
    4ec4:	df 91       	pop	r29
    4ec6:	1f 91       	pop	r17
    4ec8:	0f 91       	pop	r16
    4eca:	ff 90       	pop	r15
    4ecc:	ef 90       	pop	r14
    4ece:	df 90       	pop	r13
    4ed0:	cf 90       	pop	r12
    4ed2:	bf 90       	pop	r11
    4ed4:	af 90       	pop	r10
    4ed6:	9f 90       	pop	r9
    4ed8:	8f 90       	pop	r8
    4eda:	7f 90       	pop	r7
    4edc:	6f 90       	pop	r6
    4ede:	5f 90       	pop	r5
    4ee0:	4f 90       	pop	r4
    4ee2:	3f 90       	pop	r3
    4ee4:	2f 90       	pop	r2
    4ee6:	08 95       	ret
        uint8_t maxPacketSize = endpoint->maxPacketSize;

        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value
    4ee8:	88 ee       	ldi	r24, 0xE8	; 232
    4eea:	f5 01       	movw	r30, r10
    4eec:	64 81       	ldd	r22, Z+4	; 0x04
    4eee:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        while (bytes_left)
    4ef2:	41 14       	cp	r4, r1
    4ef4:	51 04       	cpc	r5, r1
    4ef6:	09 f4       	brne	.+2      	; 0x4efa <usb_write+0xa2>
    4ef8:	74 c0       	rjmp	.+232    	; 0x4fe2 <usb_write+0x18a>
    4efa:	21 2e       	mov	r2, r17
    4efc:	33 24       	eor	r3, r3
    4efe:	89 2d       	mov	r24, r9
    4f00:	98 2d       	mov	r25, r8
    4f02:	9c 01       	movw	r18, r24
    4f04:	39 01       	movw	r6, r18
        {
                retry_count = 0;
                nak_count = 0;

                bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    4f06:	42 01       	movw	r8, r4
    4f08:	24 14       	cp	r2, r4
    4f0a:	35 04       	cpc	r3, r5
    4f0c:	08 f4       	brcc	.+2      	; 0x4f10 <usb_write+0xb8>
    4f0e:	67 c0       	rjmp	.+206    	; 0x4fde <usb_write+0x186>

                // Filling output FIFO
                max3421e_writeMultiple(MAX_REG_SNDFIFO, bytes_tosend, data_p);
    4f10:	89 82       	std	Y+1, r8	; 0x01
    4f12:	80 e1       	ldi	r24, 0x10	; 16
    4f14:	68 2d       	mov	r22, r8
    4f16:	a3 01       	movw	r20, r6
    4f18:	0e 94 f5 24 	call	0x49ea	; 0x49ea <max3421e_writeMultiple>

                // Set number of bytes to send.
                max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    4f1c:	88 e3       	ldi	r24, 0x38	; 56
    4f1e:	68 2d       	mov	r22, r8
    4f20:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

                // Dispatch packet.
                max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address));
    4f24:	d5 01       	movw	r26, r10
    4f26:	6c 91       	ld	r22, X
    4f28:	60 62       	ori	r22, 0x20	; 32
    4f2a:	80 ef       	ldi	r24, 0xF0	; 240
    4f2c:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

                // Wait for completion.
                while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    4f30:	88 ec       	ldi	r24, 0xC8	; 200
    4f32:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4f36:	87 ff       	sbrs	r24, 7
    4f38:	fb cf       	rjmp	.-10     	; 0x4f30 <usb_write+0xd8>

                // Clear IRQ.
                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4f3a:	88 ec       	ldi	r24, 0xC8	; 200
    4f3c:	60 e8       	ldi	r22, 0x80	; 128
    4f3e:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

                rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4f42:	88 ef       	ldi	r24, 0xF8	; 248
    4f44:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4f48:	18 2f       	mov	r17, r24
    4f4a:	1f 70       	andi	r17, 0x0F	; 15

                while (rcode && (timeout > avr_millis()))
    4f4c:	e1 f1       	breq	.+120    	; 0x4fc6 <usb_write+0x16e>
    4f4e:	00 e0       	ldi	r16, 0x00	; 0
    4f50:	1b 82       	std	Y+3, r1	; 0x03
    4f52:	1a 82       	std	Y+2, r1	; 0x02
    4f54:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    4f58:	6c 15       	cp	r22, r12
    4f5a:	7d 05       	cpc	r23, r13
    4f5c:	8e 05       	cpc	r24, r14
    4f5e:	9f 05       	cpc	r25, r15
    4f60:	90 f5       	brcc	.+100    	; 0x4fc6 <usb_write+0x16e>
                {
                        switch (rcode)
    4f62:	14 30       	cpi	r17, 0x04	; 4
    4f64:	29 f0       	breq	.+10     	; 0x4f70 <usb_write+0x118>
    4f66:	1e 30       	cpi	r17, 0x0E	; 14
    4f68:	a1 f1       	breq	.+104    	; 0x4fd2 <usb_write+0x17a>
                                {
                                        return (rcode); //return TIMEOUT
                                }
                                break;
                        default:
                                return (rcode);
    4f6a:	01 2f       	mov	r16, r17
    4f6c:	10 e0       	ldi	r17, 0x00	; 0
    4f6e:	a5 cf       	rjmp	.-182    	; 0x4eba <usb_write+0x62>
                while (rcode && (timeout > avr_millis()))
                {
                        switch (rcode)
                        {
                        case hrNAK:
                                nak_count++;
    4f70:	ea 81       	ldd	r30, Y+2	; 0x02
    4f72:	fb 81       	ldd	r31, Y+3	; 0x03
    4f74:	31 96       	adiw	r30, 0x01	; 1
    4f76:	fb 83       	std	Y+3, r31	; 0x03
    4f78:	ea 83       	std	Y+2, r30	; 0x02
                                if (nak_limit && (nak_count == USB_NAK_LIMIT))
    4f7a:	e0 50       	subi	r30, 0x00	; 0
    4f7c:	fd 47       	sbci	r31, 0x7D	; 125
    4f7e:	09 f4       	brne	.+2      	; 0x4f82 <usb_write+0x12a>
    4f80:	3c c0       	rjmp	.+120    	; 0x4ffa <usb_write+0x1a2>
                        default:
                                return (rcode);
                        }

                        // Process NAK according to Host out NAK bug.
                        max3421e_write(MAX_REG_SNDBC, 0);
    4f82:	88 e3       	ldi	r24, 0x38	; 56
    4f84:	60 e0       	ldi	r22, 0x00	; 0
    4f86:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
                        max3421e_write(MAX_REG_SNDFIFO, *data_p);
    4f8a:	80 e1       	ldi	r24, 0x10	; 16
    4f8c:	d3 01       	movw	r26, r6
    4f8e:	6c 91       	ld	r22, X
    4f90:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
                        max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    4f94:	88 e3       	ldi	r24, 0x38	; 56
    4f96:	69 81       	ldd	r22, Y+1	; 0x01
    4f98:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
                        max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address)); //dispatch packet
    4f9c:	f5 01       	movw	r30, r10
    4f9e:	60 81       	ld	r22, Z
    4fa0:	60 62       	ori	r22, 0x20	; 32
    4fa2:	80 ef       	ldi	r24, 0xF0	; 240
    4fa4:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

                        // Wait for the completion interrupt.
                        while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    4fa8:	88 ec       	ldi	r24, 0xC8	; 200
    4faa:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4fae:	87 ff       	sbrs	r24, 7
    4fb0:	fb cf       	rjmp	.-10     	; 0x4fa8 <usb_write+0x150>

                        // Clear interrupt.
                        max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4fb2:	88 ec       	ldi	r24, 0xC8	; 200
    4fb4:	60 e8       	ldi	r22, 0x80	; 128
    4fb6:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4fba:	88 ef       	ldi	r24, 0xF8	; 248
    4fbc:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4fc0:	18 2f       	mov	r17, r24
    4fc2:	1f 70       	andi	r17, 0x0F	; 15
                // Clear IRQ.
                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

                rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

                while (rcode && (timeout > avr_millis()))
    4fc4:	39 f6       	brne	.-114    	; 0x4f54 <usb_write+0xfc>
                        max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
    4fc6:	48 18       	sub	r4, r8
    4fc8:	59 08       	sbc	r5, r9
        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

        while (bytes_left)
    4fca:	e1 f0       	breq	.+56     	; 0x5004 <usb_write+0x1ac>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
    4fcc:	68 0c       	add	r6, r8
    4fce:	79 1c       	adc	r7, r9
    4fd0:	9a cf       	rjmp	.-204    	; 0x4f06 <usb_write+0xae>
                                {
                                        return (rcode); //return NAK
                                }
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    4fd2:	0f 5f       	subi	r16, 0xFF	; 255
                                if (retry_count == USB_RETRY_LIMIT)
    4fd4:	03 30       	cpi	r16, 0x03	; 3
    4fd6:	a9 f6       	brne	.-86     	; 0x4f82 <usb_write+0x12a>
    4fd8:	0e e0       	ldi	r16, 0x0E	; 14
    4fda:	10 e0       	ldi	r17, 0x00	; 0
    4fdc:	6e cf       	rjmp	.-292    	; 0x4eba <usb_write+0x62>
        while (bytes_left)
        {
                retry_count = 0;
                nak_count = 0;

                bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    4fde:	41 01       	movw	r8, r2
    4fe0:	97 cf       	rjmp	.-210    	; 0x4f10 <usb_write+0xb8>
        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

        while (bytes_left)
    4fe2:	00 e0       	ldi	r16, 0x00	; 0
    4fe4:	10 e0       	ldi	r17, 0x00	; 0

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    4fe6:	88 ef       	ldi	r24, 0xF8	; 248
    4fe8:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    4fec:	85 fd       	sbrc	r24, 5
    4fee:	08 c0       	rjmp	.+16     	; 0x5000 <usb_write+0x1a8>
    4ff0:	80 e4       	ldi	r24, 0x40	; 64
    4ff2:	d5 01       	movw	r26, r10
    4ff4:	14 96       	adiw	r26, 0x04	; 4
    4ff6:	8c 93       	st	X, r24
    4ff8:	60 cf       	rjmp	.-320    	; 0x4eba <usb_write+0x62>
                {
                        switch (rcode)
                        {
                        case hrNAK:
                                nak_count++;
                                if (nak_limit && (nak_count == USB_NAK_LIMIT))
    4ffa:	04 e0       	ldi	r16, 0x04	; 4
    4ffc:	10 e0       	ldi	r17, 0x00	; 0
    4ffe:	5d cf       	rjmp	.-326    	; 0x4eba <usb_write+0x62>

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    5000:	80 e8       	ldi	r24, 0x80	; 128
    5002:	f7 cf       	rjmp	.-18     	; 0x4ff2 <usb_write+0x19a>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
    5004:	01 2f       	mov	r16, r17
    5006:	10 e0       	ldi	r17, 0x00	; 0
    5008:	ee cf       	rjmp	.-36     	; 0x4fe6 <usb_write+0x18e>

0000500a <usb_bulkWrite>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkWrite(usb_device * device, uint16_t length, uint8_t * data)
{
    500a:	fc 01       	movw	r30, r24
    500c:	db 01       	movw	r26, r22
    500e:	9a 01       	movw	r18, r20
        return usb_write(device, &(device->bulk_out) , length, data);
    5010:	3e 96       	adiw	r30, 0x0e	; 14
    5012:	bf 01       	movw	r22, r30
    5014:	ad 01       	movw	r20, r26
    5016:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <usb_write>
}
    501a:	08 95       	ret

0000501c <usb_dispatchPacket>:

        return &(deviceTable[address]);
}

int usb_dispatchPacket(uint8_t token, usb_endpoint * endpoint, unsigned int nakLimit)
{
    501c:	7f 92       	push	r7
    501e:	8f 92       	push	r8
    5020:	9f 92       	push	r9
    5022:	af 92       	push	r10
    5024:	bf 92       	push	r11
    5026:	cf 92       	push	r12
    5028:	df 92       	push	r13
    502a:	ef 92       	push	r14
    502c:	ff 92       	push	r15
    502e:	0f 93       	push	r16
    5030:	1f 93       	push	r17
    5032:	cf 93       	push	r28
    5034:	df 93       	push	r29
    5036:	78 2e       	mov	r7, r24
    5038:	5b 01       	movw	r10, r22
    503a:	4a 01       	movw	r8, r20
        uint32_t timeout = avr_millis() + USB_XFER_TIMEOUT;
    503c:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    5040:	7b 01       	movw	r14, r22
    5042:	8c 01       	movw	r16, r24
    5044:	88 e8       	ldi	r24, 0x88	; 136
    5046:	93 e1       	ldi	r25, 0x13	; 19
    5048:	a0 e0       	ldi	r26, 0x00	; 0
    504a:	b0 e0       	ldi	r27, 0x00	; 0
    504c:	e8 0e       	add	r14, r24
    504e:	f9 1e       	adc	r15, r25
    5050:	0a 1f       	adc	r16, r26
    5052:	1b 1f       	adc	r17, r27
    5054:	dd 24       	eor	r13, r13
    5056:	c0 e0       	ldi	r28, 0x00	; 0
    5058:	d0 e0       	ldi	r29, 0x00	; 0
    505a:	cc 24       	eor	r12, r12
        uint8_t tmpdata;
        uint8_t rcode = 0;
        unsigned int nak_count = 0;
        char retry_count = 0;

        while (timeout > avr_millis())
    505c:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    5060:	6e 15       	cp	r22, r14
    5062:	7f 05       	cpc	r23, r15
    5064:	80 07       	cpc	r24, r16
    5066:	91 07       	cpc	r25, r17
    5068:	70 f5       	brcc	.+92     	; 0x50c6 <usb_dispatchPacket+0xaa>
        {
                // Analyze transfer result.

                // Launch the transfer.
                max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
    506a:	d5 01       	movw	r26, r10
    506c:	6c 91       	ld	r22, X
    506e:	67 29       	or	r22, r7
    5070:	80 ef       	ldi	r24, 0xF0	; 240
    5072:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
                rcode = 0xff;

                // Wait for interrupt
                while (timeout > avr_millis())
    5076:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    507a:	6e 15       	cp	r22, r14
    507c:	7f 05       	cpc	r23, r15
    507e:	80 07       	cpc	r24, r16
    5080:	91 07       	cpc	r25, r17
    5082:	08 f0       	brcs	.+2      	; 0x5086 <usb_dispatchPacket+0x6a>
    5084:	41 c0       	rjmp	.+130    	; 0x5108 <usb_dispatchPacket+0xec>
                {
                        tmpdata = max3421e_read(MAX_REG_HIRQ);
    5086:	88 ec       	ldi	r24, 0xC8	; 200
    5088:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
                        if (tmpdata & bmHXFRDNIRQ)
    508c:	87 ff       	sbrs	r24, 7
    508e:	f3 cf       	rjmp	.-26     	; 0x5076 <usb_dispatchPacket+0x5a>
                        {
                                // Clear the interrupt.
                                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    5090:	88 ec       	ldi	r24, 0xC8	; 200
    5092:	60 e8       	ldi	r22, 0x80	; 128
    5094:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
    5098:	dd 24       	eor	r13, r13
                // Exit if timeout.
                if (rcode != 0x00)
                        return (rcode);

                // Wait for HRSL
                while (timeout > avr_millis())
    509a:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    509e:	6e 15       	cp	r22, r14
    50a0:	7f 05       	cpc	r23, r15
    50a2:	80 07       	cpc	r24, r16
    50a4:	91 07       	cpc	r25, r17
    50a6:	48 f4       	brcc	.+18     	; 0x50ba <usb_dispatchPacket+0x9e>
                {
                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    50a8:	88 ef       	ldi	r24, 0xF8	; 248
    50aa:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    50ae:	9f e0       	ldi	r25, 0x0F	; 15
    50b0:	d9 2e       	mov	r13, r25
    50b2:	d8 22       	and	r13, r24
                        if (rcode != hrBUSY)
    50b4:	b1 e0       	ldi	r27, 0x01	; 1
    50b6:	db 16       	cp	r13, r27
    50b8:	81 f3       	breq	.-32     	; 0x509a <usb_dispatchPacket+0x7e>
//                      else
//                              avr_serialPrintf("busy!\n");
                }


                switch (rcode)
    50ba:	e4 e0       	ldi	r30, 0x04	; 4
    50bc:	de 16       	cp	r13, r30
    50be:	e1 f0       	breq	.+56     	; 0x50f8 <usb_dispatchPacket+0xdc>
    50c0:	fe e0       	ldi	r31, 0x0E	; 14
    50c2:	df 16       	cp	r13, r31
    50c4:	89 f0       	breq	.+34     	; 0x50e8 <usb_dispatchPacket+0xcc>
                        default:
                                return (rcode);
                }
        }

        return (rcode);
    50c6:	2d 2d       	mov	r18, r13
    50c8:	30 e0       	ldi	r19, 0x00	; 0
}
    50ca:	c9 01       	movw	r24, r18
    50cc:	df 91       	pop	r29
    50ce:	cf 91       	pop	r28
    50d0:	1f 91       	pop	r17
    50d2:	0f 91       	pop	r16
    50d4:	ff 90       	pop	r15
    50d6:	ef 90       	pop	r14
    50d8:	df 90       	pop	r13
    50da:	cf 90       	pop	r12
    50dc:	bf 90       	pop	r11
    50de:	af 90       	pop	r10
    50e0:	9f 90       	pop	r9
    50e2:	8f 90       	pop	r8
    50e4:	7f 90       	pop	r7
    50e6:	08 95       	ret
                                nak_count++;
                                if (nak_count == nakLimit)
                                        return (rcode);
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    50e8:	c3 94       	inc	r12
                                if (retry_count == USB_RETRY_LIMIT)
    50ea:	83 e0       	ldi	r24, 0x03	; 3
    50ec:	c8 16       	cp	r12, r24
    50ee:	09 f0       	breq	.+2      	; 0x50f2 <usb_dispatchPacket+0xd6>
    50f0:	b5 cf       	rjmp	.-150    	; 0x505c <usb_dispatchPacket+0x40>
    50f2:	2e e0       	ldi	r18, 0x0E	; 14
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	e9 cf       	rjmp	.-46     	; 0x50ca <usb_dispatchPacket+0xae>


                switch (rcode)
                {
                        case hrNAK:
                                nak_count++;
    50f8:	21 96       	adiw	r28, 0x01	; 1
                                if (nak_count == nakLimit)
    50fa:	c8 15       	cp	r28, r8
    50fc:	d9 05       	cpc	r29, r9
    50fe:	09 f0       	breq	.+2      	; 0x5102 <usb_dispatchPacket+0xe6>
    5100:	ad cf       	rjmp	.-166    	; 0x505c <usb_dispatchPacket+0x40>
    5102:	24 e0       	ldi	r18, 0x04	; 4
    5104:	30 e0       	ldi	r19, 0x00	; 0
    5106:	e1 cf       	rjmp	.-62     	; 0x50ca <usb_dispatchPacket+0xae>
                // Launch the transfer.
                max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
                rcode = 0xff;

                // Wait for interrupt
                while (timeout > avr_millis())
    5108:	2f ef       	ldi	r18, 0xFF	; 255
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	de cf       	rjmp	.-68     	; 0x50ca <usb_dispatchPacket+0xae>

0000510e <usb_read>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int usb_read(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data, unsigned int nakLimit)
{
    510e:	6f 92       	push	r6
    5110:	7f 92       	push	r7
    5112:	8f 92       	push	r8
    5114:	9f 92       	push	r9
    5116:	af 92       	push	r10
    5118:	bf 92       	push	r11
    511a:	cf 92       	push	r12
    511c:	df 92       	push	r13
    511e:	ef 92       	push	r14
    5120:	ff 92       	push	r15
    5122:	0f 93       	push	r16
    5124:	1f 93       	push	r17
    5126:	cf 93       	push	r28
    5128:	df 93       	push	r29
    512a:	fc 01       	movw	r30, r24
    512c:	7b 01       	movw	r14, r22
    512e:	3a 01       	movw	r6, r20
    5130:	69 01       	movw	r12, r18
    5132:	58 01       	movw	r10, r16
        uint16_t rcode, bytesRead;
        uint16_t maxPacketSize = endpoint->maxPacketSize;
    5134:	db 01       	movw	r26, r22
    5136:	12 96       	adiw	r26, 0x02	; 2
    5138:	8d 90       	ld	r8, X+
    513a:	9c 90       	ld	r9, X
    513c:	13 97       	sbiw	r26, 0x03	; 3

        unsigned int totalTransferred = 0;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    513e:	80 ee       	ldi	r24, 0xE0	; 224
    5140:	60 81       	ld	r22, Z
    5142:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        // Set toggle value.
        max3421e_write(MAX_REG_HCTL, endpoint->receiveToggle);
    5146:	88 ee       	ldi	r24, 0xE8	; 232
    5148:	f7 01       	movw	r30, r14
    514a:	65 81       	ldd	r22, Z+5	; 0x05
    514c:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
    5150:	c0 e0       	ldi	r28, 0x00	; 0
    5152:	d0 e0       	ldi	r29, 0x00	; 0

        while (1)
        {

                // Start IN transfer
                rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);
    5154:	80 e0       	ldi	r24, 0x00	; 0
    5156:	b7 01       	movw	r22, r14
    5158:	a5 01       	movw	r20, r10
    515a:	0e 94 0e 28 	call	0x501c	; 0x501c <usb_dispatchPacket>

                if (rcode)
    515e:	89 2b       	or	r24, r25
    5160:	d1 f5       	brne	.+116    	; 0x51d6 <usb_read+0xc8>

                        return -1;
                }

                // Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
                if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    5162:	88 ec       	ldi	r24, 0xC8	; 200
    5164:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    5168:	82 ff       	sbrs	r24, 2
    516a:	38 c0       	rjmp	.+112    	; 0x51dc <usb_read+0xce>
                        // TODO: the absence of RCVDAVIRQ indicates a toggle error. Need to add handling for that.
                        return -2;
                }

                // Obtain the number of bytes in FIFO.
                bytesRead = max3421e_read(MAX_REG_RCVBC);
    516c:	80 e3       	ldi	r24, 0x30	; 48
    516e:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    5172:	68 2f       	mov	r22, r24
    5174:	08 2f       	mov	r16, r24
    5176:	10 e0       	ldi	r17, 0x00	; 0

                // Read the data from the FIFO.
                data = max3421e_readMultiple(MAX_REG_RCVFIFO, bytesRead, data);
    5178:	88 e0       	ldi	r24, 0x08	; 8
    517a:	a6 01       	movw	r20, r12
    517c:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <max3421e_readMultiple>
    5180:	6c 01       	movw	r12, r24

                // Clear the interrupt to free the buffer.
                max3421e_write(MAX_REG_HIRQ, bmRCVDAVIRQ);
    5182:	88 ec       	ldi	r24, 0xC8	; 200
    5184:	64 e0       	ldi	r22, 0x04	; 4
    5186:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

                totalTransferred += bytesRead;
    518a:	c0 0f       	add	r28, r16
    518c:	d1 1f       	adc	r29, r17

                // Check if we're done reading. Either we've received a 'short' packet (<maxPacketSize), or the
                // desired number of bytes has been transferred.
                if ((bytesRead < maxPacketSize) || (totalTransferred >= length))
    518e:	08 15       	cp	r16, r8
    5190:	19 05       	cpc	r17, r9
    5192:	18 f0       	brcs	.+6      	; 0x519a <usb_read+0x8c>
    5194:	c6 15       	cp	r28, r6
    5196:	d7 05       	cpc	r29, r7
    5198:	e8 f2       	brcs	.-70     	; 0x5154 <usb_read+0x46>
                {
                        // Remember the toggle value for the next transfer.
                        if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
    519a:	88 ef       	ldi	r24, 0xF8	; 248
    519c:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    51a0:	84 ff       	sbrs	r24, 4
    51a2:	15 c0       	rjmp	.+42     	; 0x51ce <usb_read+0xc0>
                                endpoint->receiveToggle = bmRCVTOG1;
    51a4:	80 e2       	ldi	r24, 0x20	; 32
    51a6:	d7 01       	movw	r26, r14
    51a8:	15 96       	adiw	r26, 0x05	; 5
    51aa:	8c 93       	st	X, r24
                        break;
                }
        }

        // Report success.
        return totalTransferred;
    51ac:	9e 01       	movw	r18, r28
}
    51ae:	c9 01       	movw	r24, r18
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	1f 91       	pop	r17
    51b6:	0f 91       	pop	r16
    51b8:	ff 90       	pop	r15
    51ba:	ef 90       	pop	r14
    51bc:	df 90       	pop	r13
    51be:	cf 90       	pop	r12
    51c0:	bf 90       	pop	r11
    51c2:	af 90       	pop	r10
    51c4:	9f 90       	pop	r9
    51c6:	8f 90       	pop	r8
    51c8:	7f 90       	pop	r7
    51ca:	6f 90       	pop	r6
    51cc:	08 95       	ret
                {
                        // Remember the toggle value for the next transfer.
                        if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
                                endpoint->receiveToggle = bmRCVTOG1;
                        else
                                endpoint->receiveToggle = bmRCVTOG0;
    51ce:	80 e1       	ldi	r24, 0x10	; 16
    51d0:	f7 01       	movw	r30, r14
    51d2:	85 83       	std	Z+5, r24	; 0x05
    51d4:	eb cf       	rjmp	.-42     	; 0x51ac <usb_read+0x9e>
        {

                // Start IN transfer
                rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);

                if (rcode)
    51d6:	2f ef       	ldi	r18, 0xFF	; 255
    51d8:	3f ef       	ldi	r19, 0xFF	; 255
    51da:	e9 cf       	rjmp	.-46     	; 0x51ae <usb_read+0xa0>

                        return -1;
                }

                // Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
                if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    51dc:	2e ef       	ldi	r18, 0xFE	; 254
    51de:	3f ef       	ldi	r19, 0xFF	; 255
    51e0:	e6 cf       	rjmp	.-52     	; 0x51ae <usb_read+0xa0>

000051e2 <usb_ctrlData>:
 * @param direction true for input, false for output.
 * @param length number of bytes to transfer.
 * @param data data buffer.
 */
uint8_t usb_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
    51e2:	0f 93       	push	r16
    51e4:	1f 93       	push	r17
    51e6:	fc 01       	movw	r30, r24
        if (direction)
    51e8:	66 23       	and	r22, r22
    51ea:	51 f4       	brne	.+20     	; 0x5200 <usb_ctrlData+0x1e>
                return usb_read(device, &(device->control), length, data, USB_NAK_LIMIT);

        } else
        {
                // OUT transfer
                device->control.sendToggle = bmSNDTOG1;
    51ec:	80 e8       	ldi	r24, 0x80	; 128
    51ee:	86 83       	std	Z+6, r24	; 0x06
                return usb_write(device, &(device->control), length, data);
    51f0:	cf 01       	movw	r24, r30
    51f2:	32 96       	adiw	r30, 0x02	; 2
    51f4:	bf 01       	movw	r22, r30
    51f6:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <usb_write>
        }
}
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	08 95       	ret
uint8_t usb_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
        if (direction)
        {
                // IN transfer
                device->control.receiveToggle = bmRCVTOG1;
    5200:	80 e2       	ldi	r24, 0x20	; 32
    5202:	87 83       	std	Z+7, r24	; 0x07
                return usb_read(device, &(device->control), length, data, USB_NAK_LIMIT);
    5204:	cf 01       	movw	r24, r30
    5206:	32 96       	adiw	r30, 0x02	; 2
    5208:	bf 01       	movw	r22, r30
    520a:	00 e0       	ldi	r16, 0x00	; 0
    520c:	1d e7       	ldi	r17, 0x7D	; 125
    520e:	0e 94 87 28 	call	0x510e	; 0x510e <usb_read>
        {
                // OUT transfer
                device->control.sendToggle = bmSNDTOG1;
                return usb_write(device, &(device->control), length, data);
        }
}
    5212:	1f 91       	pop	r17
    5214:	0f 91       	pop	r16
    5216:	08 95       	ret

00005218 <usb_controlRequest>:
                uint8_t valueLow,
                uint8_t valueHigh,
                uint16_t index,
                uint16_t length,
                uint8_t * data)
{
    5218:	5f 92       	push	r5
    521a:	6f 92       	push	r6
    521c:	7f 92       	push	r7
    521e:	8f 92       	push	r8
    5220:	9f 92       	push	r9
    5222:	af 92       	push	r10
    5224:	bf 92       	push	r11
    5226:	cf 92       	push	r12
    5228:	df 92       	push	r13
    522a:	ef 92       	push	r14
    522c:	ff 92       	push	r15
    522e:	0f 93       	push	r16
    5230:	1f 93       	push	r17
    5232:	df 93       	push	r29
    5234:	cf 93       	push	r28
    5236:	cd b7       	in	r28, 0x3d	; 61
    5238:	de b7       	in	r29, 0x3e	; 62
    523a:	28 97       	sbiw	r28, 0x08	; 8
    523c:	0f b6       	in	r0, 0x3f	; 63
    523e:	f8 94       	cli
    5240:	de bf       	out	0x3e, r29	; 62
    5242:	0f be       	out	0x3f, r0	; 63
    5244:	cd bf       	out	0x3d, r28	; 61
    5246:	3c 01       	movw	r6, r24
    5248:	56 2e       	mov	r5, r22
    524a:	14 2f       	mov	r17, r20
    524c:	82 2e       	mov	r8, r18
        boolean direction = false; //request direction, IN or OUT
        uint8_t rcode;
        usb_setupPacket setup_pkt;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    524e:	80 ee       	ldi	r24, 0xE0	; 224
    5250:	f3 01       	movw	r30, r6
    5252:	60 81       	ld	r22, Z
    5254:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>

        if (requestType & 0x80)
                direction = true; //determine request direction

        // Build setup packet.
        setup_pkt.bmRequestType = requestType;
    5258:	59 82       	std	Y+1, r5	; 0x01
        setup_pkt.bRequest = request;
    525a:	1a 83       	std	Y+2, r17	; 0x02
        setup_pkt.wValue = valueLow | (valueHigh << 8);
    525c:	90 2f       	mov	r25, r16
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	99 24       	eor	r9, r9
    5262:	88 29       	or	r24, r8
    5264:	99 29       	or	r25, r9
    5266:	9c 83       	std	Y+4, r25	; 0x04
    5268:	8b 83       	std	Y+3, r24	; 0x03
        setup_pkt.wIndex = index;
    526a:	fe 82       	std	Y+6, r15	; 0x06
    526c:	ed 82       	std	Y+5, r14	; 0x05
        setup_pkt.wLength = length;
    526e:	d8 86       	std	Y+8, r13	; 0x08
    5270:	cf 82       	std	Y+7, r12	; 0x07

        // Write setup packet to the FIFO and dispatch
        max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
    5272:	80 e2       	ldi	r24, 0x20	; 32
    5274:	68 e0       	ldi	r22, 0x08	; 8
    5276:	ae 01       	movw	r20, r28
    5278:	4f 5f       	subi	r20, 0xFF	; 255
    527a:	5f 4f       	sbci	r21, 0xFF	; 255
    527c:	0e 94 f5 24 	call	0x49ea	; 0x49ea <max3421e_writeMultiple>
        rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);
    5280:	83 01       	movw	r16, r6
    5282:	0e 5f       	subi	r16, 0xFE	; 254
    5284:	1f 4f       	sbci	r17, 0xFF	; 255
    5286:	80 e1       	ldi	r24, 0x10	; 16
    5288:	b8 01       	movw	r22, r16
    528a:	40 e0       	ldi	r20, 0x00	; 0
    528c:	5d e7       	ldi	r21, 0x7D	; 125
    528e:	0e 94 0e 28 	call	0x501c	; 0x501c <usb_dispatchPacket>

        // Print error in case of failure.
        if (rcode)
    5292:	88 23       	and	r24, r24
    5294:	c9 f0       	breq	.+50     	; 0x52c8 <usb_controlRequest+0xb0>
    5296:	2f ef       	ldi	r18, 0xFF	; 255
    5298:	3f ef       	ldi	r19, 0xFF	; 255

        if (rcode)
                return -3;
        else
                return 0;
}
    529a:	c9 01       	movw	r24, r18
    529c:	28 96       	adiw	r28, 0x08	; 8
    529e:	0f b6       	in	r0, 0x3f	; 63
    52a0:	f8 94       	cli
    52a2:	de bf       	out	0x3e, r29	; 62
    52a4:	0f be       	out	0x3f, r0	; 63
    52a6:	cd bf       	out	0x3d, r28	; 61
    52a8:	cf 91       	pop	r28
    52aa:	df 91       	pop	r29
    52ac:	1f 91       	pop	r17
    52ae:	0f 91       	pop	r16
    52b0:	ff 90       	pop	r15
    52b2:	ef 90       	pop	r14
    52b4:	df 90       	pop	r13
    52b6:	cf 90       	pop	r12
    52b8:	bf 90       	pop	r11
    52ba:	af 90       	pop	r10
    52bc:	9f 90       	pop	r9
    52be:	8f 90       	pop	r8
    52c0:	7f 90       	pop	r7
    52c2:	6f 90       	pop	r6
    52c4:	5f 90       	pop	r5
    52c6:	08 95       	ret
        // Write setup packet to the FIFO and dispatch
        max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
        rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);

        // Print error in case of failure.
        if (rcode)
    52c8:	f5 2c       	mov	r15, r5
    52ca:	ff 1c       	adc	r15, r15
    52cc:	ff 24       	eor	r15, r15
    52ce:	ff 1c       	adc	r15, r15
//              avr_serialPrintf("Setup packet error: 0x%02x\n", rcode);
                return -1;
        }

        // Data stage, if present
        if (data != NULL)
    52d0:	a1 14       	cp	r10, r1
    52d2:	b1 04       	cpc	r11, r1
    52d4:	31 f0       	breq	.+12     	; 0x52e2 <usb_controlRequest+0xca>
        {
                rcode = usb_ctrlData(device, direction, length, data);
    52d6:	c3 01       	movw	r24, r6
    52d8:	6f 2d       	mov	r22, r15
    52da:	a6 01       	movw	r20, r12
    52dc:	95 01       	movw	r18, r10
    52de:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <usb_ctrlData>
                        return -2;
                }
        }

        // Status stage.
        if (direction)
    52e2:	ff 20       	and	r15, r15
    52e4:	59 f0       	breq	.+22     	; 0x52fc <usb_controlRequest+0xe4>
                rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
    52e6:	80 ea       	ldi	r24, 0xA0	; 160
    52e8:	b8 01       	movw	r22, r16
    52ea:	40 e0       	ldi	r20, 0x00	; 0
    52ec:	5d e7       	ldi	r21, 0x7D	; 125
    52ee:	0e 94 0e 28 	call	0x501c	; 0x501c <usb_dispatchPacket>
        else
                rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);

        if (rcode)
    52f2:	88 23       	and	r24, r24
    52f4:	51 f4       	brne	.+20     	; 0x530a <usb_controlRequest+0xf2>
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	cf cf       	rjmp	.-98     	; 0x529a <usb_controlRequest+0x82>

        // Status stage.
        if (direction)
                rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
        else
                rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);
    52fc:	80 e8       	ldi	r24, 0x80	; 128
    52fe:	b8 01       	movw	r22, r16
    5300:	40 e0       	ldi	r20, 0x00	; 0
    5302:	5d e7       	ldi	r21, 0x7D	; 125
    5304:	0e 94 0e 28 	call	0x501c	; 0x501c <usb_dispatchPacket>
    5308:	f4 cf       	rjmp	.-24     	; 0x52f2 <usb_controlRequest+0xda>

        if (rcode)
    530a:	2d ef       	ldi	r18, 0xFD	; 253
    530c:	3f ef       	ldi	r19, 0xFF	; 255
    530e:	c5 cf       	rjmp	.-118    	; 0x529a <usb_controlRequest+0x82>

00005310 <usb_setConfiguration>:
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
}

//set configuration
int usb_setConfiguration(usb_device * device, uint8_t configuration)
{
    5310:	af 92       	push	r10
    5312:	bf 92       	push	r11
    5314:	cf 92       	push	r12
    5316:	df 92       	push	r13
    5318:	ef 92       	push	r14
    531a:	ff 92       	push	r15
    531c:	0f 93       	push	r16
    531e:	26 2f       	mov	r18, r22
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, configuration, 0x00, 0x0000, 0x0000, NULL));
    5320:	60 e0       	ldi	r22, 0x00	; 0
    5322:	49 e0       	ldi	r20, 0x09	; 9
    5324:	00 e0       	ldi	r16, 0x00	; 0
    5326:	ee 24       	eor	r14, r14
    5328:	ff 24       	eor	r15, r15
    532a:	cc 24       	eor	r12, r12
    532c:	dd 24       	eor	r13, r13
    532e:	aa 24       	eor	r10, r10
    5330:	bb 24       	eor	r11, r11
    5332:	0e 94 0c 29 	call	0x5218	; 0x5218 <usb_controlRequest>
}
    5336:	0f 91       	pop	r16
    5338:	ff 90       	pop	r15
    533a:	ef 90       	pop	r14
    533c:	df 90       	pop	r13
    533e:	cf 90       	pop	r12
    5340:	bf 90       	pop	r11
    5342:	af 90       	pop	r10
    5344:	08 95       	ret

00005346 <usb_setAddress>:
 * @param device the 'zero' usb device (address 0, endpoint 0)
 * @param address the address to set for the newly connected device
 * @return 0 in case of success, error code otherwise
 */
int usb_setAddress(usb_device * device, uint8_t address)
{
    5346:	af 92       	push	r10
    5348:	bf 92       	push	r11
    534a:	cf 92       	push	r12
    534c:	df 92       	push	r13
    534e:	ef 92       	push	r14
    5350:	ff 92       	push	r15
    5352:	0f 93       	push	r16
    5354:	26 2f       	mov	r18, r22
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
    5356:	60 e0       	ldi	r22, 0x00	; 0
    5358:	45 e0       	ldi	r20, 0x05	; 5
    535a:	00 e0       	ldi	r16, 0x00	; 0
    535c:	ee 24       	eor	r14, r14
    535e:	ff 24       	eor	r15, r15
    5360:	cc 24       	eor	r12, r12
    5362:	dd 24       	eor	r13, r13
    5364:	aa 24       	eor	r10, r10
    5366:	bb 24       	eor	r11, r11
    5368:	0e 94 0c 29 	call	0x5218	; 0x5218 <usb_controlRequest>
}
    536c:	0f 91       	pop	r16
    536e:	ff 90       	pop	r15
    5370:	ef 90       	pop	r14
    5372:	df 90       	pop	r13
    5374:	cf 90       	pop	r12
    5376:	bf 90       	pop	r11
    5378:	af 90       	pop	r10
    537a:	08 95       	ret

0000537c <usb_getConfigurationDescriptor>:
 * @param conf configuration number
 * @param length length of the data buffer. This method will not write beyond this boundary.
 * @return number of bytes read, or negative number in case of error.
 */
int usb_getConfigurationDescriptor(usb_device * device, uint8_t conf, uint16_t length, uint8_t * data)
{
    537c:	4f 92       	push	r4
    537e:	5f 92       	push	r5
    5380:	6f 92       	push	r6
    5382:	7f 92       	push	r7
    5384:	8f 92       	push	r8
    5386:	9f 92       	push	r9
    5388:	af 92       	push	r10
    538a:	bf 92       	push	r11
    538c:	cf 92       	push	r12
    538e:	df 92       	push	r13
    5390:	ef 92       	push	r14
    5392:	ff 92       	push	r15
    5394:	0f 93       	push	r16
    5396:	1f 93       	push	r17
    5398:	cf 93       	push	r28
    539a:	df 93       	push	r29
    539c:	4c 01       	movw	r8, r24
    539e:	16 2f       	mov	r17, r22
    53a0:	3a 01       	movw	r6, r20
    53a2:	e9 01       	movw	r28, r18
        uint16_t descriptorLength;
        int rcode;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
    53a4:	60 e8       	ldi	r22, 0x80	; 128
    53a6:	46 e0       	ldi	r20, 0x06	; 6
    53a8:	21 2f       	mov	r18, r17
    53aa:	02 e0       	ldi	r16, 0x02	; 2
    53ac:	ee 24       	eor	r14, r14
    53ae:	ff 24       	eor	r15, r15
    53b0:	34 e0       	ldi	r19, 0x04	; 4
    53b2:	c3 2e       	mov	r12, r19
    53b4:	d1 2c       	mov	r13, r1
    53b6:	5e 01       	movw	r10, r28
    53b8:	0e 94 0c 29 	call	0x5218	; 0x5218 <usb_controlRequest>
        if (rcode) return -1;
    53bc:	89 2b       	or	r24, r25
    53be:	a1 f0       	breq	.+40     	; 0x53e8 <usb_getConfigurationDescriptor+0x6c>
    53c0:	2f ef       	ldi	r18, 0xFF	; 255
    53c2:	3f ef       	ldi	r19, 0xFF	; 255
        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
        if (rcode) return -2;

        return length;
}
    53c4:	c9 01       	movw	r24, r18
    53c6:	df 91       	pop	r29
    53c8:	cf 91       	pop	r28
    53ca:	1f 91       	pop	r17
    53cc:	0f 91       	pop	r16
    53ce:	ff 90       	pop	r15
    53d0:	ef 90       	pop	r14
    53d2:	df 90       	pop	r13
    53d4:	cf 90       	pop	r12
    53d6:	bf 90       	pop	r11
    53d8:	af 90       	pop	r10
    53da:	9f 90       	pop	r9
    53dc:	8f 90       	pop	r8
    53de:	7f 90       	pop	r7
    53e0:	6f 90       	pop	r6
    53e2:	5f 90       	pop	r5
    53e4:	4f 90       	pop	r4
    53e6:	08 95       	ret
        uint16_t descriptorLength;
        int rcode;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
        if (rcode) return -1;
    53e8:	9b 81       	ldd	r25, Y+3	; 0x03
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	2a 81       	ldd	r18, Y+2	; 0x02
    53ee:	42 2e       	mov	r4, r18
    53f0:	55 24       	eor	r5, r5
    53f2:	48 2a       	or	r4, r24
    53f4:	59 2a       	or	r5, r25
    53f6:	64 14       	cp	r6, r4
    53f8:	75 04       	cpc	r7, r5
    53fa:	08 f4       	brcc	.+2      	; 0x53fe <usb_getConfigurationDescriptor+0x82>
    53fc:	23 01       	movw	r4, r6

        descriptorLength = (data[3] << 8) | data[2];
        if (descriptorLength<length) length = descriptorLength;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
    53fe:	c4 01       	movw	r24, r8
    5400:	60 e8       	ldi	r22, 0x80	; 128
    5402:	46 e0       	ldi	r20, 0x06	; 6
    5404:	21 2f       	mov	r18, r17
    5406:	02 e0       	ldi	r16, 0x02	; 2
    5408:	ee 24       	eor	r14, r14
    540a:	ff 24       	eor	r15, r15
    540c:	62 01       	movw	r12, r4
    540e:	5e 01       	movw	r10, r28
    5410:	0e 94 0c 29 	call	0x5218	; 0x5218 <usb_controlRequest>
        if (rcode) return -2;
    5414:	89 2b       	or	r24, r25
    5416:	11 f4       	brne	.+4      	; 0x541c <usb_getConfigurationDescriptor+0xa0>

        return length;
    5418:	92 01       	movw	r18, r4
    541a:	d4 cf       	rjmp	.-88     	; 0x53c4 <usb_getConfigurationDescriptor+0x48>
        descriptorLength = (data[3] << 8) | data[2];
        if (descriptorLength<length) length = descriptorLength;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
        if (rcode) return -2;
    541c:	2e ef       	ldi	r18, 0xFE	; 254
    541e:	3f ef       	ldi	r19, 0xFF	; 255
    5420:	d1 cf       	rjmp	.-94     	; 0x53c4 <usb_getConfigurationDescriptor+0x48>

00005422 <usb_getDeviceDescriptor>:
 * @param device USB device
 * @param descriptor pointer to a usb_deviceDescriptor record that will be filled with the requested data.
 * @return 0 in case of success, error code otherwise
 */
int usb_getDeviceDescriptor(usb_device * device, usb_deviceDescriptor * descriptor)
{
    5422:	af 92       	push	r10
    5424:	bf 92       	push	r11
    5426:	cf 92       	push	r12
    5428:	df 92       	push	r13
    542a:	ef 92       	push	r14
    542c:	ff 92       	push	r15
    542e:	0f 93       	push	r16
    5430:	5b 01       	movw	r10, r22
        return(usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, sizeof(usb_deviceDescriptor), (uint8_t *)descriptor));
    5432:	60 e8       	ldi	r22, 0x80	; 128
    5434:	46 e0       	ldi	r20, 0x06	; 6
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	01 e0       	ldi	r16, 0x01	; 1
    543a:	ee 24       	eor	r14, r14
    543c:	ff 24       	eor	r15, r15
    543e:	52 e1       	ldi	r21, 0x12	; 18
    5440:	c5 2e       	mov	r12, r21
    5442:	d1 2c       	mov	r13, r1
    5444:	0e 94 0c 29 	call	0x5218	; 0x5218 <usb_controlRequest>
}
    5448:	0f 91       	pop	r16
    544a:	ff 90       	pop	r15
    544c:	ef 90       	pop	r14
    544e:	df 90       	pop	r13
    5450:	cf 90       	pop	r12
    5452:	bf 90       	pop	r11
    5454:	af 90       	pop	r10
    5456:	08 95       	ret

00005458 <usb_getString>:
 * @param length buffer length.
 * @param str target buffer.
 * @return 0 on success, error code otherwise.
 */
int usb_getString(usb_device * device, uint8_t index, uint8_t languageId, uint16_t length, char * str)
{
    5458:	2f 92       	push	r2
    545a:	3f 92       	push	r3
    545c:	4f 92       	push	r4
    545e:	5f 92       	push	r5
    5460:	6f 92       	push	r6
    5462:	7f 92       	push	r7
    5464:	8f 92       	push	r8
    5466:	9f 92       	push	r9
    5468:	af 92       	push	r10
    546a:	bf 92       	push	r11
    546c:	cf 92       	push	r12
    546e:	df 92       	push	r13
    5470:	ef 92       	push	r14
    5472:	ff 92       	push	r15
    5474:	0f 93       	push	r16
    5476:	1f 93       	push	r17
    5478:	df 93       	push	r29
    547a:	cf 93       	push	r28
    547c:	0f 92       	push	r0
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
    5482:	3c 01       	movw	r6, r24
    5484:	36 2e       	mov	r3, r22
    5486:	24 2e       	mov	r2, r20
    5488:	49 01       	movw	r8, r18
    548a:	28 01       	movw	r4, r16
        uint8_t stringLength = 0;
    548c:	19 82       	std	Y+1, r1	; 0x01
        int i, ret = 0;

    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    548e:	60 e8       	ldi	r22, 0x80	; 128
    5490:	46 e0       	ldi	r20, 0x06	; 6
    5492:	23 2d       	mov	r18, r3
    5494:	03 e0       	ldi	r16, 0x03	; 3
    5496:	e2 2c       	mov	r14, r2
    5498:	ff 24       	eor	r15, r15
    549a:	71 e0       	ldi	r23, 0x01	; 1
    549c:	c7 2e       	mov	r12, r23
    549e:	d1 2c       	mov	r13, r1
    54a0:	5e 01       	movw	r10, r28
    54a2:	08 94       	sec
    54a4:	a1 1c       	adc	r10, r1
    54a6:	b1 1c       	adc	r11, r1
    54a8:	0e 94 0c 29 	call	0x5218	; 0x5218 <usb_controlRequest>
    if (ret<0) return -1;
    54ac:	97 ff       	sbrs	r25, 7
    54ae:	17 c0       	rjmp	.+46     	; 0x54de <usb_getString+0x86>
    54b0:	2f ef       	ldi	r18, 0xFF	; 255
    54b2:	3f ef       	ldi	r19, 0xFF	; 255
        stringLength = (stringLength - 2) / 2;
        for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
        str[stringLength] = 0;

        return 0;
}
    54b4:	c9 01       	movw	r24, r18
    54b6:	0f 90       	pop	r0
    54b8:	cf 91       	pop	r28
    54ba:	df 91       	pop	r29
    54bc:	1f 91       	pop	r17
    54be:	0f 91       	pop	r16
    54c0:	ff 90       	pop	r15
    54c2:	ef 90       	pop	r14
    54c4:	df 90       	pop	r13
    54c6:	cf 90       	pop	r12
    54c8:	bf 90       	pop	r11
    54ca:	af 90       	pop	r10
    54cc:	9f 90       	pop	r9
    54ce:	8f 90       	pop	r8
    54d0:	7f 90       	pop	r7
    54d2:	6f 90       	pop	r6
    54d4:	5f 90       	pop	r5
    54d6:	4f 90       	pop	r4
    54d8:	3f 90       	pop	r3
    54da:	2f 90       	pop	r2
    54dc:	08 95       	ret
    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    54de:	c9 80       	ldd	r12, Y+1	; 0x01
    54e0:	8c 2d       	mov	r24, r12
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	88 16       	cp	r8, r24
    54e6:	99 06       	cpc	r9, r25
    54e8:	80 f1       	brcs	.+96     	; 0x554a <usb_getString+0xf2>

        // Get the whole thing.
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    54ea:	c3 01       	movw	r24, r6
    54ec:	60 e8       	ldi	r22, 0x80	; 128
    54ee:	46 e0       	ldi	r20, 0x06	; 6
    54f0:	23 2d       	mov	r18, r3
    54f2:	03 e0       	ldi	r16, 0x03	; 3
    54f4:	e2 2c       	mov	r14, r2
    54f6:	ff 24       	eor	r15, r15
    54f8:	dd 24       	eor	r13, r13
    54fa:	52 01       	movw	r10, r4
    54fc:	0e 94 0c 29 	call	0x5218	; 0x5218 <usb_controlRequest>
    if (ret<0) return -2;
    5500:	97 fd       	sbrc	r25, 7
    5502:	26 c0       	rjmp	.+76     	; 0x5550 <usb_getString+0xf8>

        // Convert to 8-bit ASCII
        stringLength = (stringLength - 2) / 2;
    5504:	89 81       	ldd	r24, Y+1	; 0x01
    5506:	28 2f       	mov	r18, r24
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	c9 01       	movw	r24, r18
    550c:	02 97       	sbiw	r24, 0x02	; 2
    550e:	97 fd       	sbrc	r25, 7
    5510:	22 c0       	rjmp	.+68     	; 0x5556 <usb_getString+0xfe>
    5512:	95 95       	asr	r25
    5514:	87 95       	ror	r24
    5516:	89 83       	std	Y+1, r24	; 0x01
        for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
    5518:	88 23       	and	r24, r24
    551a:	01 f1       	breq	.+64     	; 0x555c <usb_getString+0x104>
    551c:	b2 01       	movw	r22, r4
    551e:	f2 01       	movw	r30, r4
    5520:	20 e0       	ldi	r18, 0x00	; 0
    5522:	30 e0       	ldi	r19, 0x00	; 0
    5524:	48 2f       	mov	r20, r24
    5526:	50 e0       	ldi	r21, 0x00	; 0
    5528:	2f 5f       	subi	r18, 0xFF	; 255
    552a:	3f 4f       	sbci	r19, 0xFF	; 255
    552c:	82 81       	ldd	r24, Z+2	; 0x02
    552e:	db 01       	movw	r26, r22
    5530:	8d 93       	st	X+, r24
    5532:	bd 01       	movw	r22, r26
    5534:	32 96       	adiw	r30, 0x02	; 2
    5536:	da 01       	movw	r26, r20
    5538:	24 17       	cp	r18, r20
    553a:	35 07       	cpc	r19, r21
    553c:	ac f3       	brlt	.-22     	; 0x5528 <usb_getString+0xd0>
        str[stringLength] = 0;
    553e:	a4 0d       	add	r26, r4
    5540:	b5 1d       	adc	r27, r5
    5542:	1c 92       	st	X, r1
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	30 e0       	ldi	r19, 0x00	; 0
    5548:	b5 cf       	rjmp	.-150    	; 0x54b4 <usb_getString+0x5c>
    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    554a:	c8 2c       	mov	r12, r8
    554c:	89 82       	std	Y+1, r8	; 0x01
    554e:	cd cf       	rjmp	.-102    	; 0x54ea <usb_getString+0x92>

        // Get the whole thing.
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    if (ret<0) return -2;
    5550:	2e ef       	ldi	r18, 0xFE	; 254
    5552:	3f ef       	ldi	r19, 0xFF	; 255
    5554:	af cf       	rjmp	.-162    	; 0x54b4 <usb_getString+0x5c>

        // Convert to 8-bit ASCII
        stringLength = (stringLength - 2) / 2;
    5556:	c9 01       	movw	r24, r18
    5558:	01 97       	sbiw	r24, 0x01	; 1
    555a:	db cf       	rjmp	.-74     	; 0x5512 <usb_getString+0xba>
    555c:	a8 2f       	mov	r26, r24
    555e:	b0 e0       	ldi	r27, 0x00	; 0
    5560:	ee cf       	rjmp	.-36     	; 0x553e <usb_getString+0xe6>

00005562 <usb_bulkRead>:
 * @param data target buffer.
 *
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
    5562:	0f 93       	push	r16
    5564:	1f 93       	push	r17
    5566:	cf 93       	push	r28
    5568:	df 93       	push	r29
    556a:	fc 01       	movw	r30, r24
    556c:	db 01       	movw	r26, r22
    556e:	ea 01       	movw	r28, r20
        return usb_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    5570:	22 23       	and	r18, r18
    5572:	71 f4       	brne	.+28     	; 0x5590 <usb_bulkRead+0x2e>
    5574:	00 e0       	ldi	r16, 0x00	; 0
    5576:	1d e7       	ldi	r17, 0x7D	; 125
    5578:	cf 01       	movw	r24, r30
    557a:	38 96       	adiw	r30, 0x08	; 8
    557c:	bf 01       	movw	r22, r30
    557e:	ad 01       	movw	r20, r26
    5580:	9e 01       	movw	r18, r28
    5582:	0e 94 87 28 	call	0x510e	; 0x510e <usb_read>
}
    5586:	df 91       	pop	r29
    5588:	cf 91       	pop	r28
    558a:	1f 91       	pop	r17
    558c:	0f 91       	pop	r16
    558e:	08 95       	ret
 *
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
        return usb_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    5590:	01 e0       	ldi	r16, 0x01	; 1
    5592:	10 e0       	ldi	r17, 0x00	; 0
    5594:	f1 cf       	rjmp	.-30     	; 0x5578 <usb_bulkRead+0x16>

00005596 <usb_init>:
/**
 * Initialises the USB layer.
 */
void usb_init()
{
        max3421e_init();
    5596:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <max3421e_init>
        max3421e_powerOn();
    559a:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <max3421e_powerOn>

        uint8_t i;

        // Initialise the USB state machine.
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    559e:	81 e1       	ldi	r24, 0x11	; 17
    55a0:	80 93 00 02 	sts	0x0200, r24

        // Initialise the device table.
        for (i = 0; i < (USB_NUMDEVICES + 1); i++)
                deviceTable[i].active = false;
    55a4:	10 92 bd 06 	sts	0x06BD, r1
    55a8:	10 92 d3 06 	sts	0x06D3, r1
    55ac:	10 92 e9 06 	sts	0x06E9, r1

        // Address 0 is used to configure devices and assign them an address when they are first plugged in
        deviceTable[0].address = 0;
    55b0:	10 92 bc 06 	sts	0x06BC, r1
        usb_initEndPoint(&(deviceTable[0].control), 0);
    55b4:	8e eb       	ldi	r24, 0xBE	; 190
    55b6:	96 e0       	ldi	r25, 0x06	; 6
    55b8:	60 e0       	ldi	r22, 0x00	; 0
    55ba:	0e 94 9e 24 	call	0x493c	; 0x493c <usb_initEndPoint>

}
    55be:	08 95       	ret

000055c0 <usb_poll>:

/**
 * USB main task. Performs enumeration/cleanup
 */
void usb_poll(void)
{
    55c0:	1f 93       	push	r17
    55c2:	df 93       	push	r29
    55c4:	cf 93       	push	r28
    55c6:	cd b7       	in	r28, 0x3d	; 61
    55c8:	de b7       	in	r29, 0x3e	; 62
    55ca:	62 97       	sbiw	r28, 0x12	; 18
    55cc:	0f b6       	in	r0, 0x3f	; 63
    55ce:	f8 94       	cli
    55d0:	de bf       	out	0x3e, r29	; 62
    55d2:	0f be       	out	0x3f, r0	; 63
    55d4:	cd bf       	out	0x3d, r28	; 61
        uint8_t tmpdata;
        static unsigned long delay = 0;
        usb_deviceDescriptor deviceDescriptor;

        // Poll the MAX3421E device.
        max3421e_poll();
    55d6:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <max3421e_poll>

        /* modify USB task state if Vbus changed */
        tmpdata = max3421e_getVbusState();
    55da:	0e 94 38 25 	call	0x4a70	; 0x4a70 <max3421e_getVbusState>

        switch (tmpdata)
    55de:	81 30       	cpi	r24, 0x01	; 1
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <usb_poll+0x24>
    55e2:	44 c0       	rjmp	.+136    	; 0x566c <usb_poll+0xac>
    55e4:	81 30       	cpi	r24, 0x01	; 1
    55e6:	a0 f4       	brcc	.+40     	; 0x5610 <usb_poll+0x50>
        {
        case SE1: //illegal state
                usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
                break;
        case SE0: //disconnected
                if ((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    55e8:	10 91 00 02 	lds	r17, 0x0200
    55ec:	81 2f       	mov	r24, r17
    55ee:	80 7f       	andi	r24, 0xF0	; 240
    55f0:	80 31       	cpi	r24, 0x10	; 16
    55f2:	c1 f0       	breq	.+48     	; 0x5624 <usb_poll+0x64>
                {
                        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    55f4:	81 e1       	ldi	r24, 0x11	; 17
    55f6:	80 93 00 02 	sts	0x0200, r24
        case USB_DETACHED_SUBSTATE_INITIALIZE:

                // TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
                // devices.
                for (i = 1; i < USB_NUMDEVICES; i++)
                        if (deviceTable[i].active)
    55fa:	80 91 d3 06 	lds	r24, 0x06D3
    55fe:	88 23       	and	r24, r24
    5600:	09 f0       	breq	.+2      	; 0x5604 <usb_poll+0x44>
    5602:	ce c0       	rjmp	.+412    	; 0x57a0 <usb_poll+0x1e0>
                                usb_fireEvent(&(deviceTable[i]), USB_DISCONNECT);

                usb_init();
    5604:	0e 94 cb 2a 	call	0x5596	; 0x5596 <usb_init>
                usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    5608:	82 e1       	ldi	r24, 0x12	; 18
    560a:	80 93 00 02 	sts	0x0200, r24
    560e:	31 c0       	rjmp	.+98     	; 0x5672 <usb_poll+0xb2>
        max3421e_poll();

        /* modify USB task state if Vbus changed */
        tmpdata = max3421e_getVbusState();

        switch (tmpdata)
    5610:	84 30       	cpi	r24, 0x04	; 4
    5612:	08 f0       	brcs	.+2      	; 0x5616 <usb_poll+0x56>
    5614:	41 c0       	rjmp	.+130    	; 0x5698 <usb_poll+0xd8>
                        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
                }
                break;
        case FSHOST: //attached
        case LSHOST:
                if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
    5616:	10 91 00 02 	lds	r17, 0x0200
    561a:	81 2f       	mov	r24, r17
    561c:	80 7f       	andi	r24, 0xF0	; 240
    561e:	80 31       	cpi	r24, 0x10	; 16
    5620:	09 f4       	brne	.+2      	; 0x5624 <usb_poll+0x64>
    5622:	7e c0       	rjmp	.+252    	; 0x5720 <usb_poll+0x160>
        }// switch( tmpdata

        //Serial.print("USB task state: ");
        //Serial.println( usb_task_state, HEX );

        switch (usb_task_state)
    5624:	10 34       	cpi	r17, 0x40	; 64
    5626:	e1 f1       	breq	.+120    	; 0x56a0 <usb_poll+0xe0>
    5628:	11 34       	cpi	r17, 0x41	; 65
    562a:	68 f1       	brcs	.+90     	; 0x5686 <usb_poll+0xc6>
    562c:	10 36       	cpi	r17, 0x60	; 96
    562e:	09 f4       	brne	.+2      	; 0x5632 <usb_poll+0x72>
    5630:	56 c0       	rjmp	.+172    	; 0x56de <usb_poll+0x11e>
    5632:	10 37       	cpi	r17, 0x70	; 112
    5634:	09 f4       	brne	.+2      	; 0x5638 <usb_poll+0x78>
    5636:	99 c0       	rjmp	.+306    	; 0x576a <usb_poll+0x1aa>
    5638:	10 35       	cpi	r17, 0x50	; 80
    563a:	d9 f4       	brne	.+54     	; 0x5672 <usb_poll+0xb2>
                        delay = avr_millis() + 20; //20ms wait after reset per USB spec
                }
                break;

        case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                if (max3421e_read(MAX_REG_HIRQ) & bmFRAMEIRQ)
    563c:	88 ec       	ldi	r24, 0xC8	; 200
    563e:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    5642:	86 ff       	sbrs	r24, 6
    5644:	16 c0       	rjmp	.+44     	; 0x5672 <usb_poll+0xb2>
                { //when first SOF received we can continue
                        if (delay < avr_millis())
    5646:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    564a:	20 91 90 06 	lds	r18, 0x0690
    564e:	30 91 91 06 	lds	r19, 0x0691
    5652:	40 91 92 06 	lds	r20, 0x0692
    5656:	50 91 93 06 	lds	r21, 0x0693
    565a:	26 17       	cp	r18, r22
    565c:	37 07       	cpc	r19, r23
    565e:	48 07       	cpc	r20, r24
    5660:	59 07       	cpc	r21, r25
    5662:	38 f4       	brcc	.+14     	; 0x5672 <usb_poll+0xb2>
                        { //20ms passed
                                usb_task_state
    5664:	80 e6       	ldi	r24, 0x60	; 96
    5666:	80 93 00 02 	sts	0x0200, r24
    566a:	03 c0       	rjmp	.+6      	; 0x5672 <usb_poll+0xb2>
        tmpdata = max3421e_getVbusState();

        switch (tmpdata)
        {
        case SE1: //illegal state
                usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    566c:	83 e1       	ldi	r24, 0x13	; 19
    566e:	80 93 00 02 	sts	0x0200, r24
        case USB_STATE_RUNNING:
                break;
        case USB_STATE_ERROR:
                break;
        }
}
    5672:	62 96       	adiw	r28, 0x12	; 18
    5674:	0f b6       	in	r0, 0x3f	; 63
    5676:	f8 94       	cli
    5678:	de bf       	out	0x3e, r29	; 62
    567a:	0f be       	out	0x3f, r0	; 63
    567c:	cd bf       	out	0x3d, r28	; 61
    567e:	cf 91       	pop	r28
    5680:	df 91       	pop	r29
    5682:	1f 91       	pop	r17
    5684:	08 95       	ret
        }// switch( tmpdata

        //Serial.print("USB task state: ");
        //Serial.println( usb_task_state, HEX );

        switch (usb_task_state)
    5686:	10 32       	cpi	r17, 0x20	; 32
    5688:	09 f4       	brne	.+2      	; 0x568c <usb_poll+0xcc>
    568a:	5b c0       	rjmp	.+182    	; 0x5742 <usb_poll+0x182>
    568c:	10 33       	cpi	r17, 0x30	; 48
    568e:	09 f4       	brne	.+2      	; 0x5692 <usb_poll+0xd2>
    5690:	3f c0       	rjmp	.+126    	; 0x5710 <usb_poll+0x150>
    5692:	11 31       	cpi	r17, 0x11	; 17
    5694:	71 f7       	brne	.-36     	; 0x5672 <usb_poll+0xb2>
    5696:	b1 cf       	rjmp	.-158    	; 0x55fa <usb_poll+0x3a>
    5698:	10 91 00 02 	lds	r17, 0x0200
    569c:	10 34       	cpi	r17, 0x40	; 64
    569e:	21 f6       	brne	.-120    	; 0x5628 <usb_poll+0x68>
                max3421e_write(MAX_REG_HCTL, bmBUSRST);
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
                break;

        case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                if ((max3421e_read(MAX_REG_HCTL) & bmBUSRST) == 0)
    56a0:	88 ee       	ldi	r24, 0xE8	; 232
    56a2:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
    56a6:	80 fd       	sbrc	r24, 0
    56a8:	e4 cf       	rjmp	.-56     	; 0x5672 <usb_poll+0xb2>
                {
                        tmpdata = max3421e_read(MAX_REG_MODE) | bmSOFKAENAB; //start SOF generation
    56aa:	88 ed       	ldi	r24, 0xD8	; 216
    56ac:	0e 94 11 25 	call	0x4a22	; 0x4a22 <max3421e_read>
                        max3421e_write(MAX_REG_MODE, tmpdata);
    56b0:	68 2f       	mov	r22, r24
    56b2:	68 60       	ori	r22, 0x08	; 8
    56b4:	88 ed       	ldi	r24, 0xD8	; 216
    56b6:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
                        //                  max3421e_regWr( rMODE, bmSOFKAENAB );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    56ba:	80 e5       	ldi	r24, 0x50	; 80
    56bc:	80 93 00 02 	sts	0x0200, r24
                        delay = avr_millis() + 20; //20ms wait after reset per USB spec
    56c0:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    56c4:	6c 5e       	subi	r22, 0xEC	; 236
    56c6:	7f 4f       	sbci	r23, 0xFF	; 255
    56c8:	8f 4f       	sbci	r24, 0xFF	; 255
    56ca:	9f 4f       	sbci	r25, 0xFF	; 255
    56cc:	60 93 90 06 	sts	0x0690, r22
    56d0:	70 93 91 06 	sts	0x0691, r23
    56d4:	80 93 92 06 	sts	0x0692, r24
    56d8:	90 93 93 06 	sts	0x0693, r25
    56dc:	ca cf       	rjmp	.-108    	; 0x5672 <usb_poll+0xb2>
                break;

        case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
                // toggle( BPNT_0 );

                deviceTable[0].control.maxPacketSize = 8;
    56de:	88 e0       	ldi	r24, 0x08	; 8
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	90 93 c1 06 	sts	0x06C1, r25
    56e6:	80 93 c0 06 	sts	0x06C0, r24

                rcode = usb_getDeviceDescriptor(&deviceTable[0], &deviceDescriptor);
    56ea:	8c eb       	ldi	r24, 0xBC	; 188
    56ec:	96 e0       	ldi	r25, 0x06	; 6
    56ee:	be 01       	movw	r22, r28
    56f0:	6f 5f       	subi	r22, 0xFF	; 255
    56f2:	7f 4f       	sbci	r23, 0xFF	; 255
    56f4:	0e 94 11 2a 	call	0x5422	; 0x5422 <usb_getDeviceDescriptor>
                if (rcode == 0)
    56f8:	88 23       	and	r24, r24
    56fa:	09 f0       	breq	.+2      	; 0x56fe <usb_poll+0x13e>
    56fc:	4b c0       	rjmp	.+150    	; 0x5794 <usb_poll+0x1d4>
                {
                        deviceTable[0].control.maxPacketSize = deviceDescriptor.bMaxPacketSize0;
    56fe:	88 85       	ldd	r24, Y+8	; 0x08
    5700:	80 93 c0 06 	sts	0x06C0, r24
    5704:	10 92 c1 06 	sts	0x06C1, r1
                        usb_task_state = USB_STATE_ADDRESSING;
    5708:	80 e7       	ldi	r24, 0x70	; 112
    570a:	80 93 00 02 	sts	0x0200, r24
    570e:	b1 cf       	rjmp	.-158    	; 0x5672 <usb_poll+0xb2>
                }
                break;

        case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                // Issue bus reset.
                max3421e_write(MAX_REG_HCTL, bmBUSRST);
    5710:	88 ee       	ldi	r24, 0xE8	; 232
    5712:	61 e0       	ldi	r22, 0x01	; 1
    5714:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <max3421e_write>
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    5718:	80 e4       	ldi	r24, 0x40	; 64
    571a:	80 93 00 02 	sts	0x0200, r24
    571e:	a9 cf       	rjmp	.-174    	; 0x5672 <usb_poll+0xb2>
                break;
        case FSHOST: //attached
        case LSHOST:
                if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
                {
                        delay = avr_millis() + USB_SETTLE_DELAY;
    5720:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    5724:	68 53       	subi	r22, 0x38	; 56
    5726:	7f 4f       	sbci	r23, 0xFF	; 255
    5728:	8f 4f       	sbci	r24, 0xFF	; 255
    572a:	9f 4f       	sbci	r25, 0xFF	; 255
    572c:	60 93 90 06 	sts	0x0690, r22
    5730:	70 93 91 06 	sts	0x0691, r23
    5734:	80 93 92 06 	sts	0x0692, r24
    5738:	90 93 93 06 	sts	0x0693, r25
                        usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    573c:	80 e2       	ldi	r24, 0x20	; 32
    573e:	80 93 00 02 	sts	0x0200, r24
        case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                break;
        case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                break;
        case USB_ATTACHED_SUBSTATE_SETTLE: //setlle time for just attached device
                if (delay < avr_millis())
    5742:	0e 94 48 26 	call	0x4c90	; 0x4c90 <avr_millis>
    5746:	20 91 90 06 	lds	r18, 0x0690
    574a:	30 91 91 06 	lds	r19, 0x0691
    574e:	40 91 92 06 	lds	r20, 0x0692
    5752:	50 91 93 06 	lds	r21, 0x0693
    5756:	26 17       	cp	r18, r22
    5758:	37 07       	cpc	r19, r23
    575a:	48 07       	cpc	r20, r24
    575c:	59 07       	cpc	r21, r25
    575e:	08 f0       	brcs	.+2      	; 0x5762 <usb_poll+0x1a2>
    5760:	88 cf       	rjmp	.-240    	; 0x5672 <usb_poll+0xb2>
                {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    5762:	80 e3       	ldi	r24, 0x30	; 48
    5764:	80 93 00 02 	sts	0x0200, r24
    5768:	84 cf       	rjmp	.-248    	; 0x5672 <usb_poll+0xb2>
        case USB_STATE_ADDRESSING:

                // Look for an empty spot
                for (i = 1; i < USB_NUMDEVICES; i++)
                {
                        if (!deviceTable[i].active)
    576a:	80 91 d3 06 	lds	r24, 0x06D3
    576e:	88 23       	and	r24, r24
    5770:	e9 f0       	breq	.+58     	; 0x57ac <usb_poll+0x1ec>
                }

                // If no vacant spot was found in the device table, fire an error.
                if (usb_task_state == USB_STATE_ADDRESSING)
                {
                        usb_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);
    5772:	88 ee       	ldi	r24, 0xE8	; 232
    5774:	96 e0       	ldi	r25, 0x06	; 6
    5776:	62 e0       	ldi	r22, 0x02	; 2
    5778:	0e 94 98 24 	call	0x4930	; 0x4930 <usb_fireEvent>

                        // No vacant place in devtable
                        usb_error = 0xfe;
    577c:	8e ef       	ldi	r24, 0xFE	; 254
    577e:	80 93 8f 06 	sts	0x068F, r24
                        usb_task_state = USB_STATE_ERROR;
    5782:	80 ea       	ldi	r24, 0xA0	; 160
    5784:	80 93 00 02 	sts	0x0200, r24
    5788:	74 cf       	rjmp	.-280    	; 0x5672 <usb_poll+0xb2>
                                        // NB: I've bypassed the configuring state, because configuration should be handled
                                        // in the usb event handler.
                                        usb_task_state = USB_STATE_RUNNING;
                                } else
                                {
                                        usb_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);
    578a:	82 ed       	ldi	r24, 0xD2	; 210
    578c:	96 e0       	ldi	r25, 0x06	; 6
    578e:	62 e0       	ldi	r22, 0x02	; 2
    5790:	0e 94 98 24 	call	0x4930	; 0x4930 <usb_fireEvent>

                                        // TODO remove usb_error at some point?
                                        usb_error = USB_STATE_ADDRESSING;
    5794:	10 93 8f 06 	sts	0x068F, r17
                                        usb_task_state = USB_STATE_ERROR;
    5798:	80 ea       	ldi	r24, 0xA0	; 160
    579a:	80 93 00 02 	sts	0x0200, r24
    579e:	69 cf       	rjmp	.-302    	; 0x5672 <usb_poll+0xb2>

                // TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
                // devices.
                for (i = 1; i < USB_NUMDEVICES; i++)
                        if (deviceTable[i].active)
                                usb_fireEvent(&(deviceTable[i]), USB_DISCONNECT);
    57a0:	82 ed       	ldi	r24, 0xD2	; 210
    57a2:	96 e0       	ldi	r25, 0x06	; 6
    57a4:	61 e0       	ldi	r22, 0x01	; 1
    57a6:	0e 94 98 24 	call	0x4930	; 0x4930 <usb_fireEvent>
    57aa:	2c cf       	rjmp	.-424    	; 0x5604 <usb_poll+0x44>
                        if (!deviceTable[i].active)
                        {
                                // Set correct MaxPktSize
                                // deviceTable[i].epinfo = deviceTable[0].epinfo;

                                deviceTable[i].address = i;
    57ac:	81 e0       	ldi	r24, 0x01	; 1
    57ae:	80 93 d2 06 	sts	0x06D2, r24
                                deviceTable[i].active = true;
    57b2:	80 93 d3 06 	sts	0x06D3, r24

                                usb_initEndPoint(&(deviceTable[i].control), 0);
    57b6:	84 ed       	ldi	r24, 0xD4	; 212
    57b8:	96 e0       	ldi	r25, 0x06	; 6
    57ba:	60 e0       	ldi	r22, 0x00	; 0
    57bc:	0e 94 9e 24 	call	0x493c	; 0x493c <usb_initEndPoint>

                                //temporary record
                                //until plugged with real device endpoint structure
                                rcode = usb_setAddress(&deviceTable[0], i);
    57c0:	8c eb       	ldi	r24, 0xBC	; 188
    57c2:	96 e0       	ldi	r25, 0x06	; 6
    57c4:	61 e0       	ldi	r22, 0x01	; 1
    57c6:	0e 94 a3 29 	call	0x5346	; 0x5346 <usb_setAddress>

                                if (rcode == 0)
    57ca:	88 23       	and	r24, r24
    57cc:	f1 f6       	brne	.-68     	; 0x578a <usb_poll+0x1ca>
                                {
                                        usb_fireEvent(&deviceTable[i], USB_CONNECT);
    57ce:	82 ed       	ldi	r24, 0xD2	; 210
    57d0:	96 e0       	ldi	r25, 0x06	; 6
    57d2:	60 e0       	ldi	r22, 0x00	; 0
    57d4:	0e 94 98 24 	call	0x4930	; 0x4930 <usb_fireEvent>
                                        // usb_task_state = USB_STATE_CONFIGURING;
                                        // NB: I've bypassed the configuring state, because configuration should be handled
                                        // in the usb event handler.
                                        usb_task_state = USB_STATE_RUNNING;
    57d8:	80 e9       	ldi	r24, 0x90	; 144
    57da:	80 93 00 02 	sts	0x0200, r24
    57de:	49 cf       	rjmp	.-366    	; 0x5672 <usb_poll+0xb2>

000057e0 <__subsf3>:
    57e0:	50 58       	subi	r21, 0x80	; 128

000057e2 <__addsf3>:
    57e2:	bb 27       	eor	r27, r27
    57e4:	aa 27       	eor	r26, r26
    57e6:	0e d0       	rcall	.+28     	; 0x5804 <__addsf3x>
    57e8:	11 c2       	rjmp	.+1058   	; 0x5c0c <__fp_round>
    57ea:	02 d2       	rcall	.+1028   	; 0x5bf0 <__fp_pscA>
    57ec:	30 f0       	brcs	.+12     	; 0x57fa <__addsf3+0x18>
    57ee:	07 d2       	rcall	.+1038   	; 0x5bfe <__fp_pscB>
    57f0:	20 f0       	brcs	.+8      	; 0x57fa <__addsf3+0x18>
    57f2:	31 f4       	brne	.+12     	; 0x5800 <__addsf3+0x1e>
    57f4:	9f 3f       	cpi	r25, 0xFF	; 255
    57f6:	11 f4       	brne	.+4      	; 0x57fc <__addsf3+0x1a>
    57f8:	1e f4       	brtc	.+6      	; 0x5800 <__addsf3+0x1e>
    57fa:	d2 c1       	rjmp	.+932    	; 0x5ba0 <__fp_nan>
    57fc:	0e f4       	brtc	.+2      	; 0x5800 <__addsf3+0x1e>
    57fe:	e0 95       	com	r30
    5800:	e7 fb       	bst	r30, 7
    5802:	9f c1       	rjmp	.+830    	; 0x5b42 <__fp_inf>

00005804 <__addsf3x>:
    5804:	e9 2f       	mov	r30, r25
    5806:	13 d2       	rcall	.+1062   	; 0x5c2e <__fp_split3>
    5808:	80 f3       	brcs	.-32     	; 0x57ea <__addsf3+0x8>
    580a:	ba 17       	cp	r27, r26
    580c:	62 07       	cpc	r22, r18
    580e:	73 07       	cpc	r23, r19
    5810:	84 07       	cpc	r24, r20
    5812:	95 07       	cpc	r25, r21
    5814:	18 f0       	brcs	.+6      	; 0x581c <__addsf3x+0x18>
    5816:	71 f4       	brne	.+28     	; 0x5834 <__addsf3x+0x30>
    5818:	9e f5       	brtc	.+102    	; 0x5880 <__addsf3x+0x7c>
    581a:	42 c2       	rjmp	.+1156   	; 0x5ca0 <__fp_zero>
    581c:	0e f4       	brtc	.+2      	; 0x5820 <__addsf3x+0x1c>
    581e:	e0 95       	com	r30
    5820:	0b 2e       	mov	r0, r27
    5822:	ba 2f       	mov	r27, r26
    5824:	a0 2d       	mov	r26, r0
    5826:	0b 01       	movw	r0, r22
    5828:	b9 01       	movw	r22, r18
    582a:	90 01       	movw	r18, r0
    582c:	0c 01       	movw	r0, r24
    582e:	ca 01       	movw	r24, r20
    5830:	a0 01       	movw	r20, r0
    5832:	11 24       	eor	r1, r1
    5834:	ff 27       	eor	r31, r31
    5836:	59 1b       	sub	r21, r25
    5838:	99 f0       	breq	.+38     	; 0x5860 <__addsf3x+0x5c>
    583a:	59 3f       	cpi	r21, 0xF9	; 249
    583c:	50 f4       	brcc	.+20     	; 0x5852 <__addsf3x+0x4e>
    583e:	50 3e       	cpi	r21, 0xE0	; 224
    5840:	68 f1       	brcs	.+90     	; 0x589c <__addsf3x+0x98>
    5842:	1a 16       	cp	r1, r26
    5844:	f0 40       	sbci	r31, 0x00	; 0
    5846:	a2 2f       	mov	r26, r18
    5848:	23 2f       	mov	r18, r19
    584a:	34 2f       	mov	r19, r20
    584c:	44 27       	eor	r20, r20
    584e:	58 5f       	subi	r21, 0xF8	; 248
    5850:	f3 cf       	rjmp	.-26     	; 0x5838 <__addsf3x+0x34>
    5852:	46 95       	lsr	r20
    5854:	37 95       	ror	r19
    5856:	27 95       	ror	r18
    5858:	a7 95       	ror	r26
    585a:	f0 40       	sbci	r31, 0x00	; 0
    585c:	53 95       	inc	r21
    585e:	c9 f7       	brne	.-14     	; 0x5852 <__addsf3x+0x4e>
    5860:	7e f4       	brtc	.+30     	; 0x5880 <__addsf3x+0x7c>
    5862:	1f 16       	cp	r1, r31
    5864:	ba 0b       	sbc	r27, r26
    5866:	62 0b       	sbc	r22, r18
    5868:	73 0b       	sbc	r23, r19
    586a:	84 0b       	sbc	r24, r20
    586c:	ba f0       	brmi	.+46     	; 0x589c <__addsf3x+0x98>
    586e:	91 50       	subi	r25, 0x01	; 1
    5870:	a1 f0       	breq	.+40     	; 0x589a <__addsf3x+0x96>
    5872:	ff 0f       	add	r31, r31
    5874:	bb 1f       	adc	r27, r27
    5876:	66 1f       	adc	r22, r22
    5878:	77 1f       	adc	r23, r23
    587a:	88 1f       	adc	r24, r24
    587c:	c2 f7       	brpl	.-16     	; 0x586e <__addsf3x+0x6a>
    587e:	0e c0       	rjmp	.+28     	; 0x589c <__addsf3x+0x98>
    5880:	ba 0f       	add	r27, r26
    5882:	62 1f       	adc	r22, r18
    5884:	73 1f       	adc	r23, r19
    5886:	84 1f       	adc	r24, r20
    5888:	48 f4       	brcc	.+18     	; 0x589c <__addsf3x+0x98>
    588a:	87 95       	ror	r24
    588c:	77 95       	ror	r23
    588e:	67 95       	ror	r22
    5890:	b7 95       	ror	r27
    5892:	f7 95       	ror	r31
    5894:	9e 3f       	cpi	r25, 0xFE	; 254
    5896:	08 f0       	brcs	.+2      	; 0x589a <__addsf3x+0x96>
    5898:	b3 cf       	rjmp	.-154    	; 0x5800 <__addsf3+0x1e>
    589a:	93 95       	inc	r25
    589c:	88 0f       	add	r24, r24
    589e:	08 f0       	brcs	.+2      	; 0x58a2 <__addsf3x+0x9e>
    58a0:	99 27       	eor	r25, r25
    58a2:	ee 0f       	add	r30, r30
    58a4:	97 95       	ror	r25
    58a6:	87 95       	ror	r24
    58a8:	08 95       	ret

000058aa <atan>:
    58aa:	df 93       	push	r29
    58ac:	dd 27       	eor	r29, r29
    58ae:	b9 2f       	mov	r27, r25
    58b0:	bf 77       	andi	r27, 0x7F	; 127
    58b2:	40 e8       	ldi	r20, 0x80	; 128
    58b4:	5f e3       	ldi	r21, 0x3F	; 63
    58b6:	16 16       	cp	r1, r22
    58b8:	17 06       	cpc	r1, r23
    58ba:	48 07       	cpc	r20, r24
    58bc:	5b 07       	cpc	r21, r27
    58be:	10 f4       	brcc	.+4      	; 0x58c4 <atan+0x1a>
    58c0:	d9 2f       	mov	r29, r25
    58c2:	f9 d1       	rcall	.+1010   	; 0x5cb6 <inverse>
    58c4:	9f 93       	push	r25
    58c6:	8f 93       	push	r24
    58c8:	7f 93       	push	r23
    58ca:	6f 93       	push	r22
    58cc:	23 d3       	rcall	.+1606   	; 0x5f14 <square>
    58ce:	ec e1       	ldi	r30, 0x1C	; 28
    58d0:	f2 e0       	ldi	r31, 0x02	; 2
    58d2:	69 d1       	rcall	.+722    	; 0x5ba6 <__fp_powser>
    58d4:	9b d1       	rcall	.+822    	; 0x5c0c <__fp_round>
    58d6:	2f 91       	pop	r18
    58d8:	3f 91       	pop	r19
    58da:	4f 91       	pop	r20
    58dc:	5f 91       	pop	r21
    58de:	61 d2       	rcall	.+1218   	; 0x5da2 <__mulsf3x>
    58e0:	dd 23       	and	r29, r29
    58e2:	49 f0       	breq	.+18     	; 0x58f6 <atan+0x4c>
    58e4:	90 58       	subi	r25, 0x80	; 128
    58e6:	a2 ea       	ldi	r26, 0xA2	; 162
    58e8:	2a ed       	ldi	r18, 0xDA	; 218
    58ea:	3f e0       	ldi	r19, 0x0F	; 15
    58ec:	49 ec       	ldi	r20, 0xC9	; 201
    58ee:	5f e3       	ldi	r21, 0x3F	; 63
    58f0:	d0 78       	andi	r29, 0x80	; 128
    58f2:	5d 27       	eor	r21, r29
    58f4:	87 df       	rcall	.-242    	; 0x5804 <__addsf3x>
    58f6:	df 91       	pop	r29
    58f8:	89 c1       	rjmp	.+786    	; 0x5c0c <__fp_round>

000058fa <ceil>:
    58fa:	bb d1       	rcall	.+886    	; 0x5c72 <__fp_trunc>
    58fc:	80 f0       	brcs	.+32     	; 0x591e <ceil+0x24>
    58fe:	9f 37       	cpi	r25, 0x7F	; 127
    5900:	40 f4       	brcc	.+16     	; 0x5912 <ceil+0x18>
    5902:	91 11       	cpse	r25, r1
    5904:	0e f4       	brtc	.+2      	; 0x5908 <ceil+0xe>
    5906:	cd c1       	rjmp	.+922    	; 0x5ca2 <__fp_szero>
    5908:	60 e0       	ldi	r22, 0x00	; 0
    590a:	70 e0       	ldi	r23, 0x00	; 0
    590c:	80 e8       	ldi	r24, 0x80	; 128
    590e:	9f e3       	ldi	r25, 0x3F	; 63
    5910:	08 95       	ret
    5912:	26 f0       	brts	.+8      	; 0x591c <ceil+0x22>
    5914:	1b 16       	cp	r1, r27
    5916:	61 1d       	adc	r22, r1
    5918:	71 1d       	adc	r23, r1
    591a:	81 1d       	adc	r24, r1
    591c:	18 c1       	rjmp	.+560    	; 0x5b4e <__fp_mintl>
    591e:	32 c1       	rjmp	.+612    	; 0x5b84 <__fp_mpack>

00005920 <__cmpsf2>:
    5920:	ec d0       	rcall	.+472    	; 0x5afa <__fp_cmp>
    5922:	08 f4       	brcc	.+2      	; 0x5926 <__cmpsf2+0x6>
    5924:	81 e0       	ldi	r24, 0x01	; 1
    5926:	08 95       	ret

00005928 <__divsf3>:
    5928:	0c d0       	rcall	.+24     	; 0x5942 <__divsf3x>
    592a:	70 c1       	rjmp	.+736    	; 0x5c0c <__fp_round>
    592c:	68 d1       	rcall	.+720    	; 0x5bfe <__fp_pscB>
    592e:	40 f0       	brcs	.+16     	; 0x5940 <__divsf3+0x18>
    5930:	5f d1       	rcall	.+702    	; 0x5bf0 <__fp_pscA>
    5932:	30 f0       	brcs	.+12     	; 0x5940 <__divsf3+0x18>
    5934:	21 f4       	brne	.+8      	; 0x593e <__divsf3+0x16>
    5936:	5f 3f       	cpi	r21, 0xFF	; 255
    5938:	19 f0       	breq	.+6      	; 0x5940 <__divsf3+0x18>
    593a:	03 c1       	rjmp	.+518    	; 0x5b42 <__fp_inf>
    593c:	51 11       	cpse	r21, r1
    593e:	b1 c1       	rjmp	.+866    	; 0x5ca2 <__fp_szero>
    5940:	2f c1       	rjmp	.+606    	; 0x5ba0 <__fp_nan>

00005942 <__divsf3x>:
    5942:	75 d1       	rcall	.+746    	; 0x5c2e <__fp_split3>
    5944:	98 f3       	brcs	.-26     	; 0x592c <__divsf3+0x4>

00005946 <__divsf3_pse>:
    5946:	99 23       	and	r25, r25
    5948:	c9 f3       	breq	.-14     	; 0x593c <__divsf3+0x14>
    594a:	55 23       	and	r21, r21
    594c:	b1 f3       	breq	.-20     	; 0x593a <__divsf3+0x12>
    594e:	95 1b       	sub	r25, r21
    5950:	55 0b       	sbc	r21, r21
    5952:	bb 27       	eor	r27, r27
    5954:	aa 27       	eor	r26, r26
    5956:	62 17       	cp	r22, r18
    5958:	73 07       	cpc	r23, r19
    595a:	84 07       	cpc	r24, r20
    595c:	38 f0       	brcs	.+14     	; 0x596c <__divsf3_pse+0x26>
    595e:	9f 5f       	subi	r25, 0xFF	; 255
    5960:	5f 4f       	sbci	r21, 0xFF	; 255
    5962:	22 0f       	add	r18, r18
    5964:	33 1f       	adc	r19, r19
    5966:	44 1f       	adc	r20, r20
    5968:	aa 1f       	adc	r26, r26
    596a:	a9 f3       	breq	.-22     	; 0x5956 <__divsf3_pse+0x10>
    596c:	33 d0       	rcall	.+102    	; 0x59d4 <__divsf3_pse+0x8e>
    596e:	0e 2e       	mov	r0, r30
    5970:	3a f0       	brmi	.+14     	; 0x5980 <__divsf3_pse+0x3a>
    5972:	e0 e8       	ldi	r30, 0x80	; 128
    5974:	30 d0       	rcall	.+96     	; 0x59d6 <__divsf3_pse+0x90>
    5976:	91 50       	subi	r25, 0x01	; 1
    5978:	50 40       	sbci	r21, 0x00	; 0
    597a:	e6 95       	lsr	r30
    597c:	00 1c       	adc	r0, r0
    597e:	ca f7       	brpl	.-14     	; 0x5972 <__divsf3_pse+0x2c>
    5980:	29 d0       	rcall	.+82     	; 0x59d4 <__divsf3_pse+0x8e>
    5982:	fe 2f       	mov	r31, r30
    5984:	27 d0       	rcall	.+78     	; 0x59d4 <__divsf3_pse+0x8e>
    5986:	66 0f       	add	r22, r22
    5988:	77 1f       	adc	r23, r23
    598a:	88 1f       	adc	r24, r24
    598c:	bb 1f       	adc	r27, r27
    598e:	26 17       	cp	r18, r22
    5990:	37 07       	cpc	r19, r23
    5992:	48 07       	cpc	r20, r24
    5994:	ab 07       	cpc	r26, r27
    5996:	b0 e8       	ldi	r27, 0x80	; 128
    5998:	09 f0       	breq	.+2      	; 0x599c <__divsf3_pse+0x56>
    599a:	bb 0b       	sbc	r27, r27
    599c:	80 2d       	mov	r24, r0
    599e:	bf 01       	movw	r22, r30
    59a0:	ff 27       	eor	r31, r31
    59a2:	93 58       	subi	r25, 0x83	; 131
    59a4:	5f 4f       	sbci	r21, 0xFF	; 255
    59a6:	2a f0       	brmi	.+10     	; 0x59b2 <__divsf3_pse+0x6c>
    59a8:	9e 3f       	cpi	r25, 0xFE	; 254
    59aa:	51 05       	cpc	r21, r1
    59ac:	68 f0       	brcs	.+26     	; 0x59c8 <__divsf3_pse+0x82>
    59ae:	c9 c0       	rjmp	.+402    	; 0x5b42 <__fp_inf>
    59b0:	78 c1       	rjmp	.+752    	; 0x5ca2 <__fp_szero>
    59b2:	5f 3f       	cpi	r21, 0xFF	; 255
    59b4:	ec f3       	brlt	.-6      	; 0x59b0 <__divsf3_pse+0x6a>
    59b6:	98 3e       	cpi	r25, 0xE8	; 232
    59b8:	dc f3       	brlt	.-10     	; 0x59b0 <__divsf3_pse+0x6a>
    59ba:	86 95       	lsr	r24
    59bc:	77 95       	ror	r23
    59be:	67 95       	ror	r22
    59c0:	b7 95       	ror	r27
    59c2:	f7 95       	ror	r31
    59c4:	9f 5f       	subi	r25, 0xFF	; 255
    59c6:	c9 f7       	brne	.-14     	; 0x59ba <__divsf3_pse+0x74>
    59c8:	88 0f       	add	r24, r24
    59ca:	91 1d       	adc	r25, r1
    59cc:	96 95       	lsr	r25
    59ce:	87 95       	ror	r24
    59d0:	97 f9       	bld	r25, 7
    59d2:	08 95       	ret
    59d4:	e1 e0       	ldi	r30, 0x01	; 1
    59d6:	66 0f       	add	r22, r22
    59d8:	77 1f       	adc	r23, r23
    59da:	88 1f       	adc	r24, r24
    59dc:	bb 1f       	adc	r27, r27
    59de:	62 17       	cp	r22, r18
    59e0:	73 07       	cpc	r23, r19
    59e2:	84 07       	cpc	r24, r20
    59e4:	ba 07       	cpc	r27, r26
    59e6:	20 f0       	brcs	.+8      	; 0x59f0 <__divsf3_pse+0xaa>
    59e8:	62 1b       	sub	r22, r18
    59ea:	73 0b       	sbc	r23, r19
    59ec:	84 0b       	sbc	r24, r20
    59ee:	ba 0b       	sbc	r27, r26
    59f0:	ee 1f       	adc	r30, r30
    59f2:	88 f7       	brcc	.-30     	; 0x59d6 <__divsf3_pse+0x90>
    59f4:	e0 95       	com	r30
    59f6:	08 95       	ret

000059f8 <__fixsfsi>:
    59f8:	04 d0       	rcall	.+8      	; 0x5a02 <__fixunssfsi>
    59fa:	68 94       	set
    59fc:	b1 11       	cpse	r27, r1
    59fe:	51 c1       	rjmp	.+674    	; 0x5ca2 <__fp_szero>
    5a00:	08 95       	ret

00005a02 <__fixunssfsi>:
    5a02:	1d d1       	rcall	.+570    	; 0x5c3e <__fp_splitA>
    5a04:	88 f0       	brcs	.+34     	; 0x5a28 <__fixunssfsi+0x26>
    5a06:	9f 57       	subi	r25, 0x7F	; 127
    5a08:	90 f0       	brcs	.+36     	; 0x5a2e <__fixunssfsi+0x2c>
    5a0a:	b9 2f       	mov	r27, r25
    5a0c:	99 27       	eor	r25, r25
    5a0e:	b7 51       	subi	r27, 0x17	; 23
    5a10:	a0 f0       	brcs	.+40     	; 0x5a3a <__fixunssfsi+0x38>
    5a12:	d1 f0       	breq	.+52     	; 0x5a48 <__fixunssfsi+0x46>
    5a14:	66 0f       	add	r22, r22
    5a16:	77 1f       	adc	r23, r23
    5a18:	88 1f       	adc	r24, r24
    5a1a:	99 1f       	adc	r25, r25
    5a1c:	1a f0       	brmi	.+6      	; 0x5a24 <__fixunssfsi+0x22>
    5a1e:	ba 95       	dec	r27
    5a20:	c9 f7       	brne	.-14     	; 0x5a14 <__fixunssfsi+0x12>
    5a22:	12 c0       	rjmp	.+36     	; 0x5a48 <__fixunssfsi+0x46>
    5a24:	b1 30       	cpi	r27, 0x01	; 1
    5a26:	81 f0       	breq	.+32     	; 0x5a48 <__fixunssfsi+0x46>
    5a28:	3b d1       	rcall	.+630    	; 0x5ca0 <__fp_zero>
    5a2a:	b1 e0       	ldi	r27, 0x01	; 1
    5a2c:	08 95       	ret
    5a2e:	38 c1       	rjmp	.+624    	; 0x5ca0 <__fp_zero>
    5a30:	67 2f       	mov	r22, r23
    5a32:	78 2f       	mov	r23, r24
    5a34:	88 27       	eor	r24, r24
    5a36:	b8 5f       	subi	r27, 0xF8	; 248
    5a38:	39 f0       	breq	.+14     	; 0x5a48 <__fixunssfsi+0x46>
    5a3a:	b9 3f       	cpi	r27, 0xF9	; 249
    5a3c:	cc f3       	brlt	.-14     	; 0x5a30 <__fixunssfsi+0x2e>
    5a3e:	86 95       	lsr	r24
    5a40:	77 95       	ror	r23
    5a42:	67 95       	ror	r22
    5a44:	b3 95       	inc	r27
    5a46:	d9 f7       	brne	.-10     	; 0x5a3e <__fixunssfsi+0x3c>
    5a48:	3e f4       	brtc	.+14     	; 0x5a58 <__fixunssfsi+0x56>
    5a4a:	90 95       	com	r25
    5a4c:	80 95       	com	r24
    5a4e:	70 95       	com	r23
    5a50:	61 95       	neg	r22
    5a52:	7f 4f       	sbci	r23, 0xFF	; 255
    5a54:	8f 4f       	sbci	r24, 0xFF	; 255
    5a56:	9f 4f       	sbci	r25, 0xFF	; 255
    5a58:	08 95       	ret

00005a5a <__floatunsisf>:
    5a5a:	e8 94       	clt
    5a5c:	09 c0       	rjmp	.+18     	; 0x5a70 <__floatsisf+0x12>

00005a5e <__floatsisf>:
    5a5e:	97 fb       	bst	r25, 7
    5a60:	3e f4       	brtc	.+14     	; 0x5a70 <__floatsisf+0x12>
    5a62:	90 95       	com	r25
    5a64:	80 95       	com	r24
    5a66:	70 95       	com	r23
    5a68:	61 95       	neg	r22
    5a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a70:	99 23       	and	r25, r25
    5a72:	a9 f0       	breq	.+42     	; 0x5a9e <__floatsisf+0x40>
    5a74:	f9 2f       	mov	r31, r25
    5a76:	96 e9       	ldi	r25, 0x96	; 150
    5a78:	bb 27       	eor	r27, r27
    5a7a:	93 95       	inc	r25
    5a7c:	f6 95       	lsr	r31
    5a7e:	87 95       	ror	r24
    5a80:	77 95       	ror	r23
    5a82:	67 95       	ror	r22
    5a84:	b7 95       	ror	r27
    5a86:	f1 11       	cpse	r31, r1
    5a88:	f8 cf       	rjmp	.-16     	; 0x5a7a <__floatsisf+0x1c>
    5a8a:	fa f4       	brpl	.+62     	; 0x5aca <__floatsisf+0x6c>
    5a8c:	bb 0f       	add	r27, r27
    5a8e:	11 f4       	brne	.+4      	; 0x5a94 <__floatsisf+0x36>
    5a90:	60 ff       	sbrs	r22, 0
    5a92:	1b c0       	rjmp	.+54     	; 0x5aca <__floatsisf+0x6c>
    5a94:	6f 5f       	subi	r22, 0xFF	; 255
    5a96:	7f 4f       	sbci	r23, 0xFF	; 255
    5a98:	8f 4f       	sbci	r24, 0xFF	; 255
    5a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a9c:	16 c0       	rjmp	.+44     	; 0x5aca <__floatsisf+0x6c>
    5a9e:	88 23       	and	r24, r24
    5aa0:	11 f0       	breq	.+4      	; 0x5aa6 <__floatsisf+0x48>
    5aa2:	96 e9       	ldi	r25, 0x96	; 150
    5aa4:	11 c0       	rjmp	.+34     	; 0x5ac8 <__floatsisf+0x6a>
    5aa6:	77 23       	and	r23, r23
    5aa8:	21 f0       	breq	.+8      	; 0x5ab2 <__floatsisf+0x54>
    5aaa:	9e e8       	ldi	r25, 0x8E	; 142
    5aac:	87 2f       	mov	r24, r23
    5aae:	76 2f       	mov	r23, r22
    5ab0:	05 c0       	rjmp	.+10     	; 0x5abc <__floatsisf+0x5e>
    5ab2:	66 23       	and	r22, r22
    5ab4:	71 f0       	breq	.+28     	; 0x5ad2 <__floatsisf+0x74>
    5ab6:	96 e8       	ldi	r25, 0x86	; 134
    5ab8:	86 2f       	mov	r24, r22
    5aba:	70 e0       	ldi	r23, 0x00	; 0
    5abc:	60 e0       	ldi	r22, 0x00	; 0
    5abe:	2a f0       	brmi	.+10     	; 0x5aca <__floatsisf+0x6c>
    5ac0:	9a 95       	dec	r25
    5ac2:	66 0f       	add	r22, r22
    5ac4:	77 1f       	adc	r23, r23
    5ac6:	88 1f       	adc	r24, r24
    5ac8:	da f7       	brpl	.-10     	; 0x5ac0 <__floatsisf+0x62>
    5aca:	88 0f       	add	r24, r24
    5acc:	96 95       	lsr	r25
    5ace:	87 95       	ror	r24
    5ad0:	97 f9       	bld	r25, 7
    5ad2:	08 95       	ret

00005ad4 <floor>:
    5ad4:	ce d0       	rcall	.+412    	; 0x5c72 <__fp_trunc>
    5ad6:	80 f0       	brcs	.+32     	; 0x5af8 <floor+0x24>
    5ad8:	9f 37       	cpi	r25, 0x7F	; 127
    5ada:	40 f4       	brcc	.+16     	; 0x5aec <floor+0x18>
    5adc:	91 11       	cpse	r25, r1
    5ade:	0e f0       	brts	.+2      	; 0x5ae2 <floor+0xe>
    5ae0:	e0 c0       	rjmp	.+448    	; 0x5ca2 <__fp_szero>
    5ae2:	60 e0       	ldi	r22, 0x00	; 0
    5ae4:	70 e0       	ldi	r23, 0x00	; 0
    5ae6:	80 e8       	ldi	r24, 0x80	; 128
    5ae8:	9f eb       	ldi	r25, 0xBF	; 191
    5aea:	08 95       	ret
    5aec:	26 f4       	brtc	.+8      	; 0x5af6 <floor+0x22>
    5aee:	1b 16       	cp	r1, r27
    5af0:	61 1d       	adc	r22, r1
    5af2:	71 1d       	adc	r23, r1
    5af4:	81 1d       	adc	r24, r1
    5af6:	2b c0       	rjmp	.+86     	; 0x5b4e <__fp_mintl>
    5af8:	45 c0       	rjmp	.+138    	; 0x5b84 <__fp_mpack>

00005afa <__fp_cmp>:
    5afa:	99 0f       	add	r25, r25
    5afc:	00 08       	sbc	r0, r0
    5afe:	55 0f       	add	r21, r21
    5b00:	aa 0b       	sbc	r26, r26
    5b02:	e0 e8       	ldi	r30, 0x80	; 128
    5b04:	fe ef       	ldi	r31, 0xFE	; 254
    5b06:	16 16       	cp	r1, r22
    5b08:	17 06       	cpc	r1, r23
    5b0a:	e8 07       	cpc	r30, r24
    5b0c:	f9 07       	cpc	r31, r25
    5b0e:	c0 f0       	brcs	.+48     	; 0x5b40 <__fp_cmp+0x46>
    5b10:	12 16       	cp	r1, r18
    5b12:	13 06       	cpc	r1, r19
    5b14:	e4 07       	cpc	r30, r20
    5b16:	f5 07       	cpc	r31, r21
    5b18:	98 f0       	brcs	.+38     	; 0x5b40 <__fp_cmp+0x46>
    5b1a:	62 1b       	sub	r22, r18
    5b1c:	73 0b       	sbc	r23, r19
    5b1e:	84 0b       	sbc	r24, r20
    5b20:	95 0b       	sbc	r25, r21
    5b22:	39 f4       	brne	.+14     	; 0x5b32 <__fp_cmp+0x38>
    5b24:	0a 26       	eor	r0, r26
    5b26:	61 f0       	breq	.+24     	; 0x5b40 <__fp_cmp+0x46>
    5b28:	23 2b       	or	r18, r19
    5b2a:	24 2b       	or	r18, r20
    5b2c:	25 2b       	or	r18, r21
    5b2e:	21 f4       	brne	.+8      	; 0x5b38 <__fp_cmp+0x3e>
    5b30:	08 95       	ret
    5b32:	0a 26       	eor	r0, r26
    5b34:	09 f4       	brne	.+2      	; 0x5b38 <__fp_cmp+0x3e>
    5b36:	a1 40       	sbci	r26, 0x01	; 1
    5b38:	a6 95       	lsr	r26
    5b3a:	8f ef       	ldi	r24, 0xFF	; 255
    5b3c:	81 1d       	adc	r24, r1
    5b3e:	81 1d       	adc	r24, r1
    5b40:	08 95       	ret

00005b42 <__fp_inf>:
    5b42:	97 f9       	bld	r25, 7
    5b44:	9f 67       	ori	r25, 0x7F	; 127
    5b46:	80 e8       	ldi	r24, 0x80	; 128
    5b48:	70 e0       	ldi	r23, 0x00	; 0
    5b4a:	60 e0       	ldi	r22, 0x00	; 0
    5b4c:	08 95       	ret

00005b4e <__fp_mintl>:
    5b4e:	88 23       	and	r24, r24
    5b50:	71 f4       	brne	.+28     	; 0x5b6e <__fp_mintl+0x20>
    5b52:	77 23       	and	r23, r23
    5b54:	21 f0       	breq	.+8      	; 0x5b5e <__fp_mintl+0x10>
    5b56:	98 50       	subi	r25, 0x08	; 8
    5b58:	87 2b       	or	r24, r23
    5b5a:	76 2f       	mov	r23, r22
    5b5c:	07 c0       	rjmp	.+14     	; 0x5b6c <__fp_mintl+0x1e>
    5b5e:	66 23       	and	r22, r22
    5b60:	11 f4       	brne	.+4      	; 0x5b66 <__fp_mintl+0x18>
    5b62:	99 27       	eor	r25, r25
    5b64:	0d c0       	rjmp	.+26     	; 0x5b80 <__fp_mintl+0x32>
    5b66:	90 51       	subi	r25, 0x10	; 16
    5b68:	86 2b       	or	r24, r22
    5b6a:	70 e0       	ldi	r23, 0x00	; 0
    5b6c:	60 e0       	ldi	r22, 0x00	; 0
    5b6e:	2a f0       	brmi	.+10     	; 0x5b7a <__fp_mintl+0x2c>
    5b70:	9a 95       	dec	r25
    5b72:	66 0f       	add	r22, r22
    5b74:	77 1f       	adc	r23, r23
    5b76:	88 1f       	adc	r24, r24
    5b78:	da f7       	brpl	.-10     	; 0x5b70 <__fp_mintl+0x22>
    5b7a:	88 0f       	add	r24, r24
    5b7c:	96 95       	lsr	r25
    5b7e:	87 95       	ror	r24
    5b80:	97 f9       	bld	r25, 7
    5b82:	08 95       	ret

00005b84 <__fp_mpack>:
    5b84:	9f 3f       	cpi	r25, 0xFF	; 255
    5b86:	31 f0       	breq	.+12     	; 0x5b94 <__fp_mpack_finite+0xc>

00005b88 <__fp_mpack_finite>:
    5b88:	91 50       	subi	r25, 0x01	; 1
    5b8a:	20 f4       	brcc	.+8      	; 0x5b94 <__fp_mpack_finite+0xc>
    5b8c:	87 95       	ror	r24
    5b8e:	77 95       	ror	r23
    5b90:	67 95       	ror	r22
    5b92:	b7 95       	ror	r27
    5b94:	88 0f       	add	r24, r24
    5b96:	91 1d       	adc	r25, r1
    5b98:	96 95       	lsr	r25
    5b9a:	87 95       	ror	r24
    5b9c:	97 f9       	bld	r25, 7
    5b9e:	08 95       	ret

00005ba0 <__fp_nan>:
    5ba0:	9f ef       	ldi	r25, 0xFF	; 255
    5ba2:	80 ec       	ldi	r24, 0xC0	; 192
    5ba4:	08 95       	ret

00005ba6 <__fp_powser>:
    5ba6:	df 93       	push	r29
    5ba8:	cf 93       	push	r28
    5baa:	1f 93       	push	r17
    5bac:	0f 93       	push	r16
    5bae:	ff 92       	push	r15
    5bb0:	ef 92       	push	r14
    5bb2:	df 92       	push	r13
    5bb4:	7b 01       	movw	r14, r22
    5bb6:	8c 01       	movw	r16, r24
    5bb8:	68 94       	set
    5bba:	05 c0       	rjmp	.+10     	; 0x5bc6 <__fp_powser+0x20>
    5bbc:	da 2e       	mov	r13, r26
    5bbe:	ef 01       	movw	r28, r30
    5bc0:	f0 d0       	rcall	.+480    	; 0x5da2 <__mulsf3x>
    5bc2:	fe 01       	movw	r30, r28
    5bc4:	e8 94       	clt
    5bc6:	a5 91       	lpm	r26, Z+
    5bc8:	25 91       	lpm	r18, Z+
    5bca:	35 91       	lpm	r19, Z+
    5bcc:	45 91       	lpm	r20, Z+
    5bce:	55 91       	lpm	r21, Z+
    5bd0:	ae f3       	brts	.-22     	; 0x5bbc <__fp_powser+0x16>
    5bd2:	ef 01       	movw	r28, r30
    5bd4:	17 de       	rcall	.-978    	; 0x5804 <__addsf3x>
    5bd6:	fe 01       	movw	r30, r28
    5bd8:	97 01       	movw	r18, r14
    5bda:	a8 01       	movw	r20, r16
    5bdc:	da 94       	dec	r13
    5bde:	79 f7       	brne	.-34     	; 0x5bbe <__fp_powser+0x18>
    5be0:	df 90       	pop	r13
    5be2:	ef 90       	pop	r14
    5be4:	ff 90       	pop	r15
    5be6:	0f 91       	pop	r16
    5be8:	1f 91       	pop	r17
    5bea:	cf 91       	pop	r28
    5bec:	df 91       	pop	r29
    5bee:	08 95       	ret

00005bf0 <__fp_pscA>:
    5bf0:	00 24       	eor	r0, r0
    5bf2:	0a 94       	dec	r0
    5bf4:	16 16       	cp	r1, r22
    5bf6:	17 06       	cpc	r1, r23
    5bf8:	18 06       	cpc	r1, r24
    5bfa:	09 06       	cpc	r0, r25
    5bfc:	08 95       	ret

00005bfe <__fp_pscB>:
    5bfe:	00 24       	eor	r0, r0
    5c00:	0a 94       	dec	r0
    5c02:	12 16       	cp	r1, r18
    5c04:	13 06       	cpc	r1, r19
    5c06:	14 06       	cpc	r1, r20
    5c08:	05 06       	cpc	r0, r21
    5c0a:	08 95       	ret

00005c0c <__fp_round>:
    5c0c:	09 2e       	mov	r0, r25
    5c0e:	03 94       	inc	r0
    5c10:	00 0c       	add	r0, r0
    5c12:	11 f4       	brne	.+4      	; 0x5c18 <__fp_round+0xc>
    5c14:	88 23       	and	r24, r24
    5c16:	52 f0       	brmi	.+20     	; 0x5c2c <__fp_round+0x20>
    5c18:	bb 0f       	add	r27, r27
    5c1a:	40 f4       	brcc	.+16     	; 0x5c2c <__fp_round+0x20>
    5c1c:	bf 2b       	or	r27, r31
    5c1e:	11 f4       	brne	.+4      	; 0x5c24 <__fp_round+0x18>
    5c20:	60 ff       	sbrs	r22, 0
    5c22:	04 c0       	rjmp	.+8      	; 0x5c2c <__fp_round+0x20>
    5c24:	6f 5f       	subi	r22, 0xFF	; 255
    5c26:	7f 4f       	sbci	r23, 0xFF	; 255
    5c28:	8f 4f       	sbci	r24, 0xFF	; 255
    5c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2c:	08 95       	ret

00005c2e <__fp_split3>:
    5c2e:	57 fd       	sbrc	r21, 7
    5c30:	90 58       	subi	r25, 0x80	; 128
    5c32:	44 0f       	add	r20, r20
    5c34:	55 1f       	adc	r21, r21
    5c36:	59 f0       	breq	.+22     	; 0x5c4e <__fp_splitA+0x10>
    5c38:	5f 3f       	cpi	r21, 0xFF	; 255
    5c3a:	71 f0       	breq	.+28     	; 0x5c58 <__fp_splitA+0x1a>
    5c3c:	47 95       	ror	r20

00005c3e <__fp_splitA>:
    5c3e:	88 0f       	add	r24, r24
    5c40:	97 fb       	bst	r25, 7
    5c42:	99 1f       	adc	r25, r25
    5c44:	61 f0       	breq	.+24     	; 0x5c5e <__fp_splitA+0x20>
    5c46:	9f 3f       	cpi	r25, 0xFF	; 255
    5c48:	79 f0       	breq	.+30     	; 0x5c68 <__fp_splitA+0x2a>
    5c4a:	87 95       	ror	r24
    5c4c:	08 95       	ret
    5c4e:	12 16       	cp	r1, r18
    5c50:	13 06       	cpc	r1, r19
    5c52:	14 06       	cpc	r1, r20
    5c54:	55 1f       	adc	r21, r21
    5c56:	f2 cf       	rjmp	.-28     	; 0x5c3c <__fp_split3+0xe>
    5c58:	46 95       	lsr	r20
    5c5a:	f1 df       	rcall	.-30     	; 0x5c3e <__fp_splitA>
    5c5c:	08 c0       	rjmp	.+16     	; 0x5c6e <__fp_splitA+0x30>
    5c5e:	16 16       	cp	r1, r22
    5c60:	17 06       	cpc	r1, r23
    5c62:	18 06       	cpc	r1, r24
    5c64:	99 1f       	adc	r25, r25
    5c66:	f1 cf       	rjmp	.-30     	; 0x5c4a <__fp_splitA+0xc>
    5c68:	86 95       	lsr	r24
    5c6a:	71 05       	cpc	r23, r1
    5c6c:	61 05       	cpc	r22, r1
    5c6e:	08 94       	sec
    5c70:	08 95       	ret

00005c72 <__fp_trunc>:
    5c72:	e5 df       	rcall	.-54     	; 0x5c3e <__fp_splitA>
    5c74:	a0 f0       	brcs	.+40     	; 0x5c9e <__fp_trunc+0x2c>
    5c76:	be e7       	ldi	r27, 0x7E	; 126
    5c78:	b9 17       	cp	r27, r25
    5c7a:	88 f4       	brcc	.+34     	; 0x5c9e <__fp_trunc+0x2c>
    5c7c:	bb 27       	eor	r27, r27
    5c7e:	9f 38       	cpi	r25, 0x8F	; 143
    5c80:	60 f4       	brcc	.+24     	; 0x5c9a <__fp_trunc+0x28>
    5c82:	16 16       	cp	r1, r22
    5c84:	b1 1d       	adc	r27, r1
    5c86:	67 2f       	mov	r22, r23
    5c88:	78 2f       	mov	r23, r24
    5c8a:	88 27       	eor	r24, r24
    5c8c:	98 5f       	subi	r25, 0xF8	; 248
    5c8e:	f7 cf       	rjmp	.-18     	; 0x5c7e <__fp_trunc+0xc>
    5c90:	86 95       	lsr	r24
    5c92:	77 95       	ror	r23
    5c94:	67 95       	ror	r22
    5c96:	b1 1d       	adc	r27, r1
    5c98:	93 95       	inc	r25
    5c9a:	96 39       	cpi	r25, 0x96	; 150
    5c9c:	c8 f3       	brcs	.-14     	; 0x5c90 <__fp_trunc+0x1e>
    5c9e:	08 95       	ret

00005ca0 <__fp_zero>:
    5ca0:	e8 94       	clt

00005ca2 <__fp_szero>:
    5ca2:	bb 27       	eor	r27, r27
    5ca4:	66 27       	eor	r22, r22
    5ca6:	77 27       	eor	r23, r23
    5ca8:	cb 01       	movw	r24, r22
    5caa:	97 f9       	bld	r25, 7
    5cac:	08 95       	ret

00005cae <__gesf2>:
    5cae:	25 df       	rcall	.-438    	; 0x5afa <__fp_cmp>
    5cb0:	08 f4       	brcc	.+2      	; 0x5cb4 <__gesf2+0x6>
    5cb2:	8f ef       	ldi	r24, 0xFF	; 255
    5cb4:	08 95       	ret

00005cb6 <inverse>:
    5cb6:	9b 01       	movw	r18, r22
    5cb8:	ac 01       	movw	r20, r24
    5cba:	60 e0       	ldi	r22, 0x00	; 0
    5cbc:	70 e0       	ldi	r23, 0x00	; 0
    5cbe:	80 e8       	ldi	r24, 0x80	; 128
    5cc0:	9f e3       	ldi	r25, 0x3F	; 63
    5cc2:	32 ce       	rjmp	.-924    	; 0x5928 <__divsf3>

00005cc4 <lround>:
    5cc4:	bc df       	rcall	.-136    	; 0x5c3e <__fp_splitA>
    5cc6:	58 f1       	brcs	.+86     	; 0x5d1e <lround+0x5a>
    5cc8:	9e 57       	subi	r25, 0x7E	; 126
    5cca:	58 f1       	brcs	.+86     	; 0x5d22 <lround+0x5e>
    5ccc:	98 51       	subi	r25, 0x18	; 24
    5cce:	a0 f0       	brcs	.+40     	; 0x5cf8 <lround+0x34>
    5cd0:	e9 f0       	breq	.+58     	; 0x5d0c <lround+0x48>
    5cd2:	98 30       	cpi	r25, 0x08	; 8
    5cd4:	20 f5       	brcc	.+72     	; 0x5d1e <lround+0x5a>
    5cd6:	09 2e       	mov	r0, r25
    5cd8:	99 27       	eor	r25, r25
    5cda:	66 0f       	add	r22, r22
    5cdc:	77 1f       	adc	r23, r23
    5cde:	88 1f       	adc	r24, r24
    5ce0:	99 1f       	adc	r25, r25
    5ce2:	0a 94       	dec	r0
    5ce4:	d1 f7       	brne	.-12     	; 0x5cda <lround+0x16>
    5ce6:	12 c0       	rjmp	.+36     	; 0x5d0c <lround+0x48>
    5ce8:	06 2e       	mov	r0, r22
    5cea:	67 2f       	mov	r22, r23
    5cec:	78 2f       	mov	r23, r24
    5cee:	88 27       	eor	r24, r24
    5cf0:	98 5f       	subi	r25, 0xF8	; 248
    5cf2:	11 f4       	brne	.+4      	; 0x5cf8 <lround+0x34>
    5cf4:	00 0c       	add	r0, r0
    5cf6:	07 c0       	rjmp	.+14     	; 0x5d06 <lround+0x42>
    5cf8:	99 3f       	cpi	r25, 0xF9	; 249
    5cfa:	b4 f3       	brlt	.-20     	; 0x5ce8 <lround+0x24>
    5cfc:	86 95       	lsr	r24
    5cfe:	77 95       	ror	r23
    5d00:	67 95       	ror	r22
    5d02:	93 95       	inc	r25
    5d04:	d9 f7       	brne	.-10     	; 0x5cfc <lround+0x38>
    5d06:	61 1d       	adc	r22, r1
    5d08:	71 1d       	adc	r23, r1
    5d0a:	81 1d       	adc	r24, r1
    5d0c:	3e f4       	brtc	.+14     	; 0x5d1c <lround+0x58>
    5d0e:	90 95       	com	r25
    5d10:	80 95       	com	r24
    5d12:	70 95       	com	r23
    5d14:	61 95       	neg	r22
    5d16:	7f 4f       	sbci	r23, 0xFF	; 255
    5d18:	8f 4f       	sbci	r24, 0xFF	; 255
    5d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1c:	08 95       	ret
    5d1e:	68 94       	set
    5d20:	c0 cf       	rjmp	.-128    	; 0x5ca2 <__fp_szero>
    5d22:	be cf       	rjmp	.-132    	; 0x5ca0 <__fp_zero>

00005d24 <modf>:
    5d24:	fa 01       	movw	r30, r20
    5d26:	dc 01       	movw	r26, r24
    5d28:	aa 0f       	add	r26, r26
    5d2a:	bb 1f       	adc	r27, r27
    5d2c:	9b 01       	movw	r18, r22
    5d2e:	ac 01       	movw	r20, r24
    5d30:	bf 57       	subi	r27, 0x7F	; 127
    5d32:	28 f4       	brcc	.+10     	; 0x5d3e <modf+0x1a>
    5d34:	22 27       	eor	r18, r18
    5d36:	33 27       	eor	r19, r19
    5d38:	44 27       	eor	r20, r20
    5d3a:	50 78       	andi	r21, 0x80	; 128
    5d3c:	1f c0       	rjmp	.+62     	; 0x5d7c <modf+0x58>
    5d3e:	b7 51       	subi	r27, 0x17	; 23
    5d40:	88 f4       	brcc	.+34     	; 0x5d64 <modf+0x40>
    5d42:	ab 2f       	mov	r26, r27
    5d44:	00 24       	eor	r0, r0
    5d46:	46 95       	lsr	r20
    5d48:	37 95       	ror	r19
    5d4a:	27 95       	ror	r18
    5d4c:	01 1c       	adc	r0, r1
    5d4e:	a3 95       	inc	r26
    5d50:	d2 f3       	brmi	.-12     	; 0x5d46 <modf+0x22>
    5d52:	00 20       	and	r0, r0
    5d54:	69 f0       	breq	.+26     	; 0x5d70 <modf+0x4c>
    5d56:	22 0f       	add	r18, r18
    5d58:	33 1f       	adc	r19, r19
    5d5a:	44 1f       	adc	r20, r20
    5d5c:	b3 95       	inc	r27
    5d5e:	da f3       	brmi	.-10     	; 0x5d56 <modf+0x32>
    5d60:	0d d0       	rcall	.+26     	; 0x5d7c <modf+0x58>
    5d62:	3e cd       	rjmp	.-1412   	; 0x57e0 <__subsf3>
    5d64:	61 30       	cpi	r22, 0x01	; 1
    5d66:	71 05       	cpc	r23, r1
    5d68:	a0 e8       	ldi	r26, 0x80	; 128
    5d6a:	8a 07       	cpc	r24, r26
    5d6c:	b9 46       	sbci	r27, 0x69	; 105
    5d6e:	30 f4       	brcc	.+12     	; 0x5d7c <modf+0x58>
    5d70:	9b 01       	movw	r18, r22
    5d72:	ac 01       	movw	r20, r24
    5d74:	66 27       	eor	r22, r22
    5d76:	77 27       	eor	r23, r23
    5d78:	88 27       	eor	r24, r24
    5d7a:	90 78       	andi	r25, 0x80	; 128
    5d7c:	30 96       	adiw	r30, 0x00	; 0
    5d7e:	21 f0       	breq	.+8      	; 0x5d88 <modf+0x64>
    5d80:	20 83       	st	Z, r18
    5d82:	31 83       	std	Z+1, r19	; 0x01
    5d84:	42 83       	std	Z+2, r20	; 0x02
    5d86:	53 83       	std	Z+3, r21	; 0x03
    5d88:	08 95       	ret

00005d8a <__mulsf3>:
    5d8a:	0b d0       	rcall	.+22     	; 0x5da2 <__mulsf3x>
    5d8c:	3f cf       	rjmp	.-386    	; 0x5c0c <__fp_round>
    5d8e:	30 df       	rcall	.-416    	; 0x5bf0 <__fp_pscA>
    5d90:	28 f0       	brcs	.+10     	; 0x5d9c <__mulsf3+0x12>
    5d92:	35 df       	rcall	.-406    	; 0x5bfe <__fp_pscB>
    5d94:	18 f0       	brcs	.+6      	; 0x5d9c <__mulsf3+0x12>
    5d96:	95 23       	and	r25, r21
    5d98:	09 f0       	breq	.+2      	; 0x5d9c <__mulsf3+0x12>
    5d9a:	d3 ce       	rjmp	.-602    	; 0x5b42 <__fp_inf>
    5d9c:	01 cf       	rjmp	.-510    	; 0x5ba0 <__fp_nan>
    5d9e:	11 24       	eor	r1, r1
    5da0:	80 cf       	rjmp	.-256    	; 0x5ca2 <__fp_szero>

00005da2 <__mulsf3x>:
    5da2:	45 df       	rcall	.-374    	; 0x5c2e <__fp_split3>
    5da4:	a0 f3       	brcs	.-24     	; 0x5d8e <__mulsf3+0x4>

00005da6 <__mulsf3_pse>:
    5da6:	95 9f       	mul	r25, r21
    5da8:	d1 f3       	breq	.-12     	; 0x5d9e <__mulsf3+0x14>
    5daa:	95 0f       	add	r25, r21
    5dac:	50 e0       	ldi	r21, 0x00	; 0
    5dae:	55 1f       	adc	r21, r21
    5db0:	62 9f       	mul	r22, r18
    5db2:	f0 01       	movw	r30, r0
    5db4:	72 9f       	mul	r23, r18
    5db6:	bb 27       	eor	r27, r27
    5db8:	f0 0d       	add	r31, r0
    5dba:	b1 1d       	adc	r27, r1
    5dbc:	63 9f       	mul	r22, r19
    5dbe:	aa 27       	eor	r26, r26
    5dc0:	f0 0d       	add	r31, r0
    5dc2:	b1 1d       	adc	r27, r1
    5dc4:	aa 1f       	adc	r26, r26
    5dc6:	64 9f       	mul	r22, r20
    5dc8:	66 27       	eor	r22, r22
    5dca:	b0 0d       	add	r27, r0
    5dcc:	a1 1d       	adc	r26, r1
    5dce:	66 1f       	adc	r22, r22
    5dd0:	82 9f       	mul	r24, r18
    5dd2:	22 27       	eor	r18, r18
    5dd4:	b0 0d       	add	r27, r0
    5dd6:	a1 1d       	adc	r26, r1
    5dd8:	62 1f       	adc	r22, r18
    5dda:	73 9f       	mul	r23, r19
    5ddc:	b0 0d       	add	r27, r0
    5dde:	a1 1d       	adc	r26, r1
    5de0:	62 1f       	adc	r22, r18
    5de2:	83 9f       	mul	r24, r19
    5de4:	a0 0d       	add	r26, r0
    5de6:	61 1d       	adc	r22, r1
    5de8:	22 1f       	adc	r18, r18
    5dea:	74 9f       	mul	r23, r20
    5dec:	33 27       	eor	r19, r19
    5dee:	a0 0d       	add	r26, r0
    5df0:	61 1d       	adc	r22, r1
    5df2:	23 1f       	adc	r18, r19
    5df4:	84 9f       	mul	r24, r20
    5df6:	60 0d       	add	r22, r0
    5df8:	21 1d       	adc	r18, r1
    5dfa:	82 2f       	mov	r24, r18
    5dfc:	76 2f       	mov	r23, r22
    5dfe:	6a 2f       	mov	r22, r26
    5e00:	11 24       	eor	r1, r1
    5e02:	9f 57       	subi	r25, 0x7F	; 127
    5e04:	50 40       	sbci	r21, 0x00	; 0
    5e06:	8a f0       	brmi	.+34     	; 0x5e2a <__mulsf3_pse+0x84>
    5e08:	e1 f0       	breq	.+56     	; 0x5e42 <__mulsf3_pse+0x9c>
    5e0a:	88 23       	and	r24, r24
    5e0c:	4a f0       	brmi	.+18     	; 0x5e20 <__mulsf3_pse+0x7a>
    5e0e:	ee 0f       	add	r30, r30
    5e10:	ff 1f       	adc	r31, r31
    5e12:	bb 1f       	adc	r27, r27
    5e14:	66 1f       	adc	r22, r22
    5e16:	77 1f       	adc	r23, r23
    5e18:	88 1f       	adc	r24, r24
    5e1a:	91 50       	subi	r25, 0x01	; 1
    5e1c:	50 40       	sbci	r21, 0x00	; 0
    5e1e:	a9 f7       	brne	.-22     	; 0x5e0a <__mulsf3_pse+0x64>
    5e20:	9e 3f       	cpi	r25, 0xFE	; 254
    5e22:	51 05       	cpc	r21, r1
    5e24:	70 f0       	brcs	.+28     	; 0x5e42 <__mulsf3_pse+0x9c>
    5e26:	8d ce       	rjmp	.-742    	; 0x5b42 <__fp_inf>
    5e28:	3c cf       	rjmp	.-392    	; 0x5ca2 <__fp_szero>
    5e2a:	5f 3f       	cpi	r21, 0xFF	; 255
    5e2c:	ec f3       	brlt	.-6      	; 0x5e28 <__mulsf3_pse+0x82>
    5e2e:	98 3e       	cpi	r25, 0xE8	; 232
    5e30:	dc f3       	brlt	.-10     	; 0x5e28 <__mulsf3_pse+0x82>
    5e32:	86 95       	lsr	r24
    5e34:	77 95       	ror	r23
    5e36:	67 95       	ror	r22
    5e38:	b7 95       	ror	r27
    5e3a:	f7 95       	ror	r31
    5e3c:	e7 95       	ror	r30
    5e3e:	9f 5f       	subi	r25, 0xFF	; 255
    5e40:	c1 f7       	brne	.-16     	; 0x5e32 <__mulsf3_pse+0x8c>
    5e42:	fe 2b       	or	r31, r30
    5e44:	88 0f       	add	r24, r24
    5e46:	91 1d       	adc	r25, r1
    5e48:	96 95       	lsr	r25
    5e4a:	87 95       	ror	r24
    5e4c:	97 f9       	bld	r25, 7
    5e4e:	08 95       	ret

00005e50 <round>:
    5e50:	f6 de       	rcall	.-532    	; 0x5c3e <__fp_splitA>
    5e52:	e0 f0       	brcs	.+56     	; 0x5e8c <round+0x3c>
    5e54:	9e 37       	cpi	r25, 0x7E	; 126
    5e56:	d8 f0       	brcs	.+54     	; 0x5e8e <round+0x3e>
    5e58:	96 39       	cpi	r25, 0x96	; 150
    5e5a:	b8 f4       	brcc	.+46     	; 0x5e8a <round+0x3a>
    5e5c:	9e 38       	cpi	r25, 0x8E	; 142
    5e5e:	48 f4       	brcc	.+18     	; 0x5e72 <round+0x22>
    5e60:	67 2f       	mov	r22, r23
    5e62:	78 2f       	mov	r23, r24
    5e64:	88 27       	eor	r24, r24
    5e66:	98 5f       	subi	r25, 0xF8	; 248
    5e68:	f9 cf       	rjmp	.-14     	; 0x5e5c <round+0xc>
    5e6a:	86 95       	lsr	r24
    5e6c:	77 95       	ror	r23
    5e6e:	67 95       	ror	r22
    5e70:	93 95       	inc	r25
    5e72:	95 39       	cpi	r25, 0x95	; 149
    5e74:	d0 f3       	brcs	.-12     	; 0x5e6a <round+0x1a>
    5e76:	b6 2f       	mov	r27, r22
    5e78:	b1 70       	andi	r27, 0x01	; 1
    5e7a:	6b 0f       	add	r22, r27
    5e7c:	71 1d       	adc	r23, r1
    5e7e:	81 1d       	adc	r24, r1
    5e80:	20 f4       	brcc	.+8      	; 0x5e8a <round+0x3a>
    5e82:	87 95       	ror	r24
    5e84:	77 95       	ror	r23
    5e86:	67 95       	ror	r22
    5e88:	93 95       	inc	r25
    5e8a:	61 ce       	rjmp	.-830    	; 0x5b4e <__fp_mintl>
    5e8c:	7b ce       	rjmp	.-778    	; 0x5b84 <__fp_mpack>
    5e8e:	09 cf       	rjmp	.-494    	; 0x5ca2 <__fp_szero>
    5e90:	11 f4       	brne	.+4      	; 0x5e96 <round+0x46>
    5e92:	0e f4       	brtc	.+2      	; 0x5e96 <round+0x46>
    5e94:	85 ce       	rjmp	.-758    	; 0x5ba0 <__fp_nan>
    5e96:	76 ce       	rjmp	.-788    	; 0x5b84 <__fp_mpack>

00005e98 <sqrt>:
    5e98:	d2 de       	rcall	.-604    	; 0x5c3e <__fp_splitA>
    5e9a:	d0 f3       	brcs	.-12     	; 0x5e90 <round+0x40>
    5e9c:	99 23       	and	r25, r25
    5e9e:	d9 f3       	breq	.-10     	; 0x5e96 <round+0x46>
    5ea0:	ce f3       	brts	.-14     	; 0x5e94 <round+0x44>
    5ea2:	9f 57       	subi	r25, 0x7F	; 127
    5ea4:	55 0b       	sbc	r21, r21
    5ea6:	87 ff       	sbrs	r24, 7
    5ea8:	3f d0       	rcall	.+126    	; 0x5f28 <__fp_norm2>
    5eaa:	00 24       	eor	r0, r0
    5eac:	a0 e6       	ldi	r26, 0x60	; 96
    5eae:	40 ea       	ldi	r20, 0xA0	; 160
    5eb0:	90 01       	movw	r18, r0
    5eb2:	80 58       	subi	r24, 0x80	; 128
    5eb4:	56 95       	lsr	r21
    5eb6:	97 95       	ror	r25
    5eb8:	28 f4       	brcc	.+10     	; 0x5ec4 <sqrt+0x2c>
    5eba:	80 5c       	subi	r24, 0xC0	; 192
    5ebc:	66 0f       	add	r22, r22
    5ebe:	77 1f       	adc	r23, r23
    5ec0:	88 1f       	adc	r24, r24
    5ec2:	20 f0       	brcs	.+8      	; 0x5ecc <sqrt+0x34>
    5ec4:	26 17       	cp	r18, r22
    5ec6:	37 07       	cpc	r19, r23
    5ec8:	48 07       	cpc	r20, r24
    5eca:	30 f4       	brcc	.+12     	; 0x5ed8 <sqrt+0x40>
    5ecc:	62 1b       	sub	r22, r18
    5ece:	73 0b       	sbc	r23, r19
    5ed0:	84 0b       	sbc	r24, r20
    5ed2:	20 29       	or	r18, r0
    5ed4:	31 29       	or	r19, r1
    5ed6:	4a 2b       	or	r20, r26
    5ed8:	a6 95       	lsr	r26
    5eda:	17 94       	ror	r1
    5edc:	07 94       	ror	r0
    5ede:	20 25       	eor	r18, r0
    5ee0:	31 25       	eor	r19, r1
    5ee2:	4a 27       	eor	r20, r26
    5ee4:	58 f7       	brcc	.-42     	; 0x5ebc <sqrt+0x24>
    5ee6:	66 0f       	add	r22, r22
    5ee8:	77 1f       	adc	r23, r23
    5eea:	88 1f       	adc	r24, r24
    5eec:	20 f0       	brcs	.+8      	; 0x5ef6 <sqrt+0x5e>
    5eee:	26 17       	cp	r18, r22
    5ef0:	37 07       	cpc	r19, r23
    5ef2:	48 07       	cpc	r20, r24
    5ef4:	30 f4       	brcc	.+12     	; 0x5f02 <sqrt+0x6a>
    5ef6:	62 0b       	sbc	r22, r18
    5ef8:	73 0b       	sbc	r23, r19
    5efa:	84 0b       	sbc	r24, r20
    5efc:	20 0d       	add	r18, r0
    5efe:	31 1d       	adc	r19, r1
    5f00:	41 1d       	adc	r20, r1
    5f02:	a0 95       	com	r26
    5f04:	81 f7       	brne	.-32     	; 0x5ee6 <sqrt+0x4e>
    5f06:	b9 01       	movw	r22, r18
    5f08:	84 2f       	mov	r24, r20
    5f0a:	91 58       	subi	r25, 0x81	; 129
    5f0c:	88 0f       	add	r24, r24
    5f0e:	96 95       	lsr	r25
    5f10:	87 95       	ror	r24
    5f12:	08 95       	ret

00005f14 <square>:
    5f14:	9b 01       	movw	r18, r22
    5f16:	ac 01       	movw	r20, r24
    5f18:	38 cf       	rjmp	.-400    	; 0x5d8a <__mulsf3>

00005f1a <trunc>:
    5f1a:	ab de       	rcall	.-682    	; 0x5c72 <__fp_trunc>
    5f1c:	20 f0       	brcs	.+8      	; 0x5f26 <trunc+0xc>
    5f1e:	9f 37       	cpi	r25, 0x7F	; 127
    5f20:	08 f4       	brcc	.+2      	; 0x5f24 <trunc+0xa>
    5f22:	bf ce       	rjmp	.-642    	; 0x5ca2 <__fp_szero>
    5f24:	14 ce       	rjmp	.-984    	; 0x5b4e <__fp_mintl>
    5f26:	2e ce       	rjmp	.-932    	; 0x5b84 <__fp_mpack>

00005f28 <__fp_norm2>:
    5f28:	91 50       	subi	r25, 0x01	; 1
    5f2a:	50 40       	sbci	r21, 0x00	; 0
    5f2c:	66 0f       	add	r22, r22
    5f2e:	77 1f       	adc	r23, r23
    5f30:	88 1f       	adc	r24, r24
    5f32:	d2 f7       	brpl	.-12     	; 0x5f28 <__fp_norm2>
    5f34:	08 95       	ret

00005f36 <__mulsi3>:
    5f36:	62 9f       	mul	r22, r18
    5f38:	d0 01       	movw	r26, r0
    5f3a:	73 9f       	mul	r23, r19
    5f3c:	f0 01       	movw	r30, r0
    5f3e:	82 9f       	mul	r24, r18
    5f40:	e0 0d       	add	r30, r0
    5f42:	f1 1d       	adc	r31, r1
    5f44:	64 9f       	mul	r22, r20
    5f46:	e0 0d       	add	r30, r0
    5f48:	f1 1d       	adc	r31, r1
    5f4a:	92 9f       	mul	r25, r18
    5f4c:	f0 0d       	add	r31, r0
    5f4e:	83 9f       	mul	r24, r19
    5f50:	f0 0d       	add	r31, r0
    5f52:	74 9f       	mul	r23, r20
    5f54:	f0 0d       	add	r31, r0
    5f56:	65 9f       	mul	r22, r21
    5f58:	f0 0d       	add	r31, r0
    5f5a:	99 27       	eor	r25, r25
    5f5c:	72 9f       	mul	r23, r18
    5f5e:	b0 0d       	add	r27, r0
    5f60:	e1 1d       	adc	r30, r1
    5f62:	f9 1f       	adc	r31, r25
    5f64:	63 9f       	mul	r22, r19
    5f66:	b0 0d       	add	r27, r0
    5f68:	e1 1d       	adc	r30, r1
    5f6a:	f9 1f       	adc	r31, r25
    5f6c:	bd 01       	movw	r22, r26
    5f6e:	cf 01       	movw	r24, r30
    5f70:	11 24       	eor	r1, r1
    5f72:	08 95       	ret

00005f74 <__divmodhi4>:
    5f74:	97 fb       	bst	r25, 7
    5f76:	09 2e       	mov	r0, r25
    5f78:	07 26       	eor	r0, r23
    5f7a:	0a d0       	rcall	.+20     	; 0x5f90 <__divmodhi4_neg1>
    5f7c:	77 fd       	sbrc	r23, 7
    5f7e:	04 d0       	rcall	.+8      	; 0x5f88 <__divmodhi4_neg2>
    5f80:	49 d0       	rcall	.+146    	; 0x6014 <__udivmodhi4>
    5f82:	06 d0       	rcall	.+12     	; 0x5f90 <__divmodhi4_neg1>
    5f84:	00 20       	and	r0, r0
    5f86:	1a f4       	brpl	.+6      	; 0x5f8e <__divmodhi4_exit>

00005f88 <__divmodhi4_neg2>:
    5f88:	70 95       	com	r23
    5f8a:	61 95       	neg	r22
    5f8c:	7f 4f       	sbci	r23, 0xFF	; 255

00005f8e <__divmodhi4_exit>:
    5f8e:	08 95       	ret

00005f90 <__divmodhi4_neg1>:
    5f90:	f6 f7       	brtc	.-4      	; 0x5f8e <__divmodhi4_exit>
    5f92:	90 95       	com	r25
    5f94:	81 95       	neg	r24
    5f96:	9f 4f       	sbci	r25, 0xFF	; 255
    5f98:	08 95       	ret

00005f9a <__udivmodsi4>:
    5f9a:	a1 e2       	ldi	r26, 0x21	; 33
    5f9c:	1a 2e       	mov	r1, r26
    5f9e:	aa 1b       	sub	r26, r26
    5fa0:	bb 1b       	sub	r27, r27
    5fa2:	fd 01       	movw	r30, r26
    5fa4:	0d c0       	rjmp	.+26     	; 0x5fc0 <__udivmodsi4_ep>

00005fa6 <__udivmodsi4_loop>:
    5fa6:	aa 1f       	adc	r26, r26
    5fa8:	bb 1f       	adc	r27, r27
    5faa:	ee 1f       	adc	r30, r30
    5fac:	ff 1f       	adc	r31, r31
    5fae:	a2 17       	cp	r26, r18
    5fb0:	b3 07       	cpc	r27, r19
    5fb2:	e4 07       	cpc	r30, r20
    5fb4:	f5 07       	cpc	r31, r21
    5fb6:	20 f0       	brcs	.+8      	; 0x5fc0 <__udivmodsi4_ep>
    5fb8:	a2 1b       	sub	r26, r18
    5fba:	b3 0b       	sbc	r27, r19
    5fbc:	e4 0b       	sbc	r30, r20
    5fbe:	f5 0b       	sbc	r31, r21

00005fc0 <__udivmodsi4_ep>:
    5fc0:	66 1f       	adc	r22, r22
    5fc2:	77 1f       	adc	r23, r23
    5fc4:	88 1f       	adc	r24, r24
    5fc6:	99 1f       	adc	r25, r25
    5fc8:	1a 94       	dec	r1
    5fca:	69 f7       	brne	.-38     	; 0x5fa6 <__udivmodsi4_loop>
    5fcc:	60 95       	com	r22
    5fce:	70 95       	com	r23
    5fd0:	80 95       	com	r24
    5fd2:	90 95       	com	r25
    5fd4:	9b 01       	movw	r18, r22
    5fd6:	ac 01       	movw	r20, r24
    5fd8:	bd 01       	movw	r22, r26
    5fda:	cf 01       	movw	r24, r30
    5fdc:	08 95       	ret

00005fde <__divmodsi4>:
    5fde:	97 fb       	bst	r25, 7
    5fe0:	09 2e       	mov	r0, r25
    5fe2:	05 26       	eor	r0, r21
    5fe4:	0e d0       	rcall	.+28     	; 0x6002 <__divmodsi4_neg1>
    5fe6:	57 fd       	sbrc	r21, 7
    5fe8:	04 d0       	rcall	.+8      	; 0x5ff2 <__divmodsi4_neg2>
    5fea:	d7 df       	rcall	.-82     	; 0x5f9a <__udivmodsi4>
    5fec:	0a d0       	rcall	.+20     	; 0x6002 <__divmodsi4_neg1>
    5fee:	00 1c       	adc	r0, r0
    5ff0:	38 f4       	brcc	.+14     	; 0x6000 <__divmodsi4_exit>

00005ff2 <__divmodsi4_neg2>:
    5ff2:	50 95       	com	r21
    5ff4:	40 95       	com	r20
    5ff6:	30 95       	com	r19
    5ff8:	21 95       	neg	r18
    5ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    5ffc:	4f 4f       	sbci	r20, 0xFF	; 255
    5ffe:	5f 4f       	sbci	r21, 0xFF	; 255

00006000 <__divmodsi4_exit>:
    6000:	08 95       	ret

00006002 <__divmodsi4_neg1>:
    6002:	f6 f7       	brtc	.-4      	; 0x6000 <__divmodsi4_exit>
    6004:	90 95       	com	r25
    6006:	80 95       	com	r24
    6008:	70 95       	com	r23
    600a:	61 95       	neg	r22
    600c:	7f 4f       	sbci	r23, 0xFF	; 255
    600e:	8f 4f       	sbci	r24, 0xFF	; 255
    6010:	9f 4f       	sbci	r25, 0xFF	; 255
    6012:	08 95       	ret

00006014 <__udivmodhi4>:
    6014:	aa 1b       	sub	r26, r26
    6016:	bb 1b       	sub	r27, r27
    6018:	51 e1       	ldi	r21, 0x11	; 17
    601a:	07 c0       	rjmp	.+14     	; 0x602a <__udivmodhi4_ep>

0000601c <__udivmodhi4_loop>:
    601c:	aa 1f       	adc	r26, r26
    601e:	bb 1f       	adc	r27, r27
    6020:	a6 17       	cp	r26, r22
    6022:	b7 07       	cpc	r27, r23
    6024:	10 f0       	brcs	.+4      	; 0x602a <__udivmodhi4_ep>
    6026:	a6 1b       	sub	r26, r22
    6028:	b7 0b       	sbc	r27, r23

0000602a <__udivmodhi4_ep>:
    602a:	88 1f       	adc	r24, r24
    602c:	99 1f       	adc	r25, r25
    602e:	5a 95       	dec	r21
    6030:	a9 f7       	brne	.-22     	; 0x601c <__udivmodhi4_loop>
    6032:	80 95       	com	r24
    6034:	90 95       	com	r25
    6036:	bc 01       	movw	r22, r24
    6038:	cd 01       	movw	r24, r26
    603a:	08 95       	ret

0000603c <do_rand>:
    603c:	af 92       	push	r10
    603e:	bf 92       	push	r11
    6040:	cf 92       	push	r12
    6042:	df 92       	push	r13
    6044:	ef 92       	push	r14
    6046:	ff 92       	push	r15
    6048:	0f 93       	push	r16
    604a:	1f 93       	push	r17
    604c:	cf 93       	push	r28
    604e:	df 93       	push	r29
    6050:	ec 01       	movw	r28, r24
    6052:	a8 80       	ld	r10, Y
    6054:	b9 80       	ldd	r11, Y+1	; 0x01
    6056:	ca 80       	ldd	r12, Y+2	; 0x02
    6058:	db 80       	ldd	r13, Y+3	; 0x03
    605a:	a1 14       	cp	r10, r1
    605c:	b1 04       	cpc	r11, r1
    605e:	c1 04       	cpc	r12, r1
    6060:	d1 04       	cpc	r13, r1
    6062:	41 f4       	brne	.+16     	; 0x6074 <do_rand+0x38>
    6064:	84 e2       	ldi	r24, 0x24	; 36
    6066:	a8 2e       	mov	r10, r24
    6068:	89 ed       	ldi	r24, 0xD9	; 217
    606a:	b8 2e       	mov	r11, r24
    606c:	8b e5       	ldi	r24, 0x5B	; 91
    606e:	c8 2e       	mov	r12, r24
    6070:	87 e0       	ldi	r24, 0x07	; 7
    6072:	d8 2e       	mov	r13, r24
    6074:	c6 01       	movw	r24, r12
    6076:	b5 01       	movw	r22, r10
    6078:	2d e1       	ldi	r18, 0x1D	; 29
    607a:	33 ef       	ldi	r19, 0xF3	; 243
    607c:	41 e0       	ldi	r20, 0x01	; 1
    607e:	50 e0       	ldi	r21, 0x00	; 0
    6080:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__divmodsi4>
    6084:	27 ea       	ldi	r18, 0xA7	; 167
    6086:	31 e4       	ldi	r19, 0x41	; 65
    6088:	40 e0       	ldi	r20, 0x00	; 0
    608a:	50 e0       	ldi	r21, 0x00	; 0
    608c:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__mulsi3>
    6090:	7b 01       	movw	r14, r22
    6092:	8c 01       	movw	r16, r24
    6094:	c6 01       	movw	r24, r12
    6096:	b5 01       	movw	r22, r10
    6098:	2d e1       	ldi	r18, 0x1D	; 29
    609a:	33 ef       	ldi	r19, 0xF3	; 243
    609c:	41 e0       	ldi	r20, 0x01	; 1
    609e:	50 e0       	ldi	r21, 0x00	; 0
    60a0:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__divmodsi4>
    60a4:	ca 01       	movw	r24, r20
    60a6:	b9 01       	movw	r22, r18
    60a8:	2c ee       	ldi	r18, 0xEC	; 236
    60aa:	34 ef       	ldi	r19, 0xF4	; 244
    60ac:	4f ef       	ldi	r20, 0xFF	; 255
    60ae:	5f ef       	ldi	r21, 0xFF	; 255
    60b0:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__mulsi3>
    60b4:	6e 0d       	add	r22, r14
    60b6:	7f 1d       	adc	r23, r15
    60b8:	80 1f       	adc	r24, r16
    60ba:	91 1f       	adc	r25, r17
    60bc:	97 ff       	sbrs	r25, 7
    60be:	04 c0       	rjmp	.+8      	; 0x60c8 <do_rand+0x8c>
    60c0:	61 50       	subi	r22, 0x01	; 1
    60c2:	70 40       	sbci	r23, 0x00	; 0
    60c4:	80 40       	sbci	r24, 0x00	; 0
    60c6:	90 48       	sbci	r25, 0x80	; 128
    60c8:	68 83       	st	Y, r22
    60ca:	79 83       	std	Y+1, r23	; 0x01
    60cc:	8a 83       	std	Y+2, r24	; 0x02
    60ce:	9b 83       	std	Y+3, r25	; 0x03
    60d0:	9b 01       	movw	r18, r22
    60d2:	3f 77       	andi	r19, 0x7F	; 127
    60d4:	c9 01       	movw	r24, r18
    60d6:	df 91       	pop	r29
    60d8:	cf 91       	pop	r28
    60da:	1f 91       	pop	r17
    60dc:	0f 91       	pop	r16
    60de:	ff 90       	pop	r15
    60e0:	ef 90       	pop	r14
    60e2:	df 90       	pop	r13
    60e4:	cf 90       	pop	r12
    60e6:	bf 90       	pop	r11
    60e8:	af 90       	pop	r10
    60ea:	08 95       	ret

000060ec <rand_r>:
    60ec:	0e 94 1e 30 	call	0x603c	; 0x603c <do_rand>
    60f0:	08 95       	ret

000060f2 <rand>:
    60f2:	81 e0       	ldi	r24, 0x01	; 1
    60f4:	92 e0       	ldi	r25, 0x02	; 2
    60f6:	0e 94 1e 30 	call	0x603c	; 0x603c <do_rand>
    60fa:	08 95       	ret

000060fc <srand>:
    60fc:	a0 e0       	ldi	r26, 0x00	; 0
    60fe:	b0 e0       	ldi	r27, 0x00	; 0
    6100:	80 93 01 02 	sts	0x0201, r24
    6104:	90 93 02 02 	sts	0x0202, r25
    6108:	a0 93 03 02 	sts	0x0203, r26
    610c:	b0 93 04 02 	sts	0x0204, r27
    6110:	08 95       	ret

00006112 <strtod>:
    6112:	8f 92       	push	r8
    6114:	9f 92       	push	r9
    6116:	af 92       	push	r10
    6118:	bf 92       	push	r11
    611a:	cf 92       	push	r12
    611c:	df 92       	push	r13
    611e:	ef 92       	push	r14
    6120:	ff 92       	push	r15
    6122:	0f 93       	push	r16
    6124:	1f 93       	push	r17
    6126:	cf 93       	push	r28
    6128:	df 93       	push	r29
    612a:	ec 01       	movw	r28, r24
    612c:	5b 01       	movw	r10, r22
    612e:	61 15       	cp	r22, r1
    6130:	71 05       	cpc	r23, r1
    6132:	19 f0       	breq	.+6      	; 0x613a <strtod+0x28>
    6134:	fb 01       	movw	r30, r22
    6136:	91 83       	std	Z+1, r25	; 0x01
    6138:	80 83       	st	Z, r24
    613a:	f9 90       	ld	r15, Y+
    613c:	8f 2d       	mov	r24, r15
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	0e 94 f7 31 	call	0x63ee	; 0x63ee <isspace>
    6144:	89 2b       	or	r24, r25
    6146:	c9 f7       	brne	.-14     	; 0x613a <strtod+0x28>
    6148:	fd e2       	ldi	r31, 0x2D	; 45
    614a:	ff 16       	cp	r15, r31
    614c:	21 f4       	brne	.+8      	; 0x6156 <strtod+0x44>
    614e:	f9 90       	ld	r15, Y+
    6150:	ee 24       	eor	r14, r14
    6152:	e3 94       	inc	r14
    6154:	05 c0       	rjmp	.+10     	; 0x6160 <strtod+0x4e>
    6156:	2b e2       	ldi	r18, 0x2B	; 43
    6158:	f2 16       	cp	r15, r18
    615a:	09 f4       	brne	.+2      	; 0x615e <strtod+0x4c>
    615c:	f9 90       	ld	r15, Y+
    615e:	ee 24       	eor	r14, r14
    6160:	8e 01       	movw	r16, r28
    6162:	01 50       	subi	r16, 0x01	; 1
    6164:	10 40       	sbci	r17, 0x00	; 0
    6166:	c8 01       	movw	r24, r16
    6168:	62 ee       	ldi	r22, 0xE2	; 226
    616a:	75 e0       	ldi	r23, 0x05	; 5
    616c:	43 e0       	ldi	r20, 0x03	; 3
    616e:	50 e0       	ldi	r21, 0x00	; 0
    6170:	0e 94 ff 31 	call	0x63fe	; 0x63fe <strncasecmp_P>
    6174:	89 2b       	or	r24, r25
    6176:	01 f5       	brne	.+64     	; 0x61b8 <strtod+0xa6>
    6178:	8e 01       	movw	r16, r28
    617a:	0e 5f       	subi	r16, 0xFE	; 254
    617c:	1f 4f       	sbci	r17, 0xFF	; 255
    617e:	c8 01       	movw	r24, r16
    6180:	65 ee       	ldi	r22, 0xE5	; 229
    6182:	75 e0       	ldi	r23, 0x05	; 5
    6184:	45 e0       	ldi	r20, 0x05	; 5
    6186:	50 e0       	ldi	r21, 0x00	; 0
    6188:	0e 94 ff 31 	call	0x63fe	; 0x63fe <strncasecmp_P>
    618c:	89 2b       	or	r24, r25
    618e:	19 f4       	brne	.+6      	; 0x6196 <strtod+0x84>
    6190:	8e 01       	movw	r16, r28
    6192:	09 5f       	subi	r16, 0xF9	; 249
    6194:	1f 4f       	sbci	r17, 0xFF	; 255
    6196:	a1 14       	cp	r10, r1
    6198:	b1 04       	cpc	r11, r1
    619a:	19 f0       	breq	.+6      	; 0x61a2 <strtod+0x90>
    619c:	f5 01       	movw	r30, r10
    619e:	11 83       	std	Z+1, r17	; 0x01
    61a0:	00 83       	st	Z, r16
    61a2:	e0 fc       	sbrc	r14, 0
    61a4:	04 c0       	rjmp	.+8      	; 0x61ae <strtod+0x9c>
    61a6:	70 e0       	ldi	r23, 0x00	; 0
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	80 e8       	ldi	r24, 0x80	; 128
    61ac:	14 c0       	rjmp	.+40     	; 0x61d6 <strtod+0xc4>
    61ae:	70 e0       	ldi	r23, 0x00	; 0
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	80 e8       	ldi	r24, 0x80	; 128
    61b4:	6f ef       	ldi	r22, 0xFF	; 255
    61b6:	08 c1       	rjmp	.+528    	; 0x63c8 <strtod+0x2b6>
    61b8:	c8 01       	movw	r24, r16
    61ba:	6a ee       	ldi	r22, 0xEA	; 234
    61bc:	75 e0       	ldi	r23, 0x05	; 5
    61be:	43 e0       	ldi	r20, 0x03	; 3
    61c0:	50 e0       	ldi	r21, 0x00	; 0
    61c2:	0e 94 ff 31 	call	0x63fe	; 0x63fe <strncasecmp_P>
    61c6:	89 2b       	or	r24, r25
    61c8:	69 f4       	brne	.+26     	; 0x61e4 <strtod+0xd2>
    61ca:	a1 14       	cp	r10, r1
    61cc:	b1 04       	cpc	r11, r1
    61ce:	29 f4       	brne	.+10     	; 0x61da <strtod+0xc8>
    61d0:	70 e0       	ldi	r23, 0x00	; 0
    61d2:	90 e0       	ldi	r25, 0x00	; 0
    61d4:	80 ec       	ldi	r24, 0xC0	; 192
    61d6:	6f e7       	ldi	r22, 0x7F	; 127
    61d8:	f7 c0       	rjmp	.+494    	; 0x63c8 <strtod+0x2b6>
    61da:	22 96       	adiw	r28, 0x02	; 2
    61dc:	f5 01       	movw	r30, r10
    61de:	d1 83       	std	Z+1, r29	; 0x01
    61e0:	c0 83       	st	Z, r28
    61e2:	f6 cf       	rjmp	.-20     	; 0x61d0 <strtod+0xbe>
    61e4:	88 24       	eor	r8, r8
    61e6:	99 24       	eor	r9, r9
    61e8:	40 e0       	ldi	r20, 0x00	; 0
    61ea:	50 e0       	ldi	r21, 0x00	; 0
    61ec:	60 e0       	ldi	r22, 0x00	; 0
    61ee:	70 e0       	ldi	r23, 0x00	; 0
    61f0:	ef 2d       	mov	r30, r15
    61f2:	e0 53       	subi	r30, 0x30	; 48
    61f4:	ea 30       	cpi	r30, 0x0A	; 10
    61f6:	a0 f5       	brcc	.+104    	; 0x6260 <strtod+0x14e>
    61f8:	f2 e0       	ldi	r31, 0x02	; 2
    61fa:	ef 2a       	or	r14, r31
    61fc:	8e 2d       	mov	r24, r14
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	9c 01       	movw	r18, r24
    6202:	28 70       	andi	r18, 0x08	; 8
    6204:	30 70       	andi	r19, 0x00	; 0
    6206:	e2 fe       	sbrs	r14, 2
    6208:	06 c0       	rjmp	.+12     	; 0x6216 <strtod+0x104>
    620a:	23 2b       	or	r18, r19
    620c:	79 f5       	brne	.+94     	; 0x626c <strtod+0x15a>
    620e:	08 94       	sec
    6210:	81 1c       	adc	r8, r1
    6212:	91 1c       	adc	r9, r1
    6214:	2b c0       	rjmp	.+86     	; 0x626c <strtod+0x15a>
    6216:	23 2b       	or	r18, r19
    6218:	19 f0       	breq	.+6      	; 0x6220 <strtod+0x10e>
    621a:	08 94       	sec
    621c:	81 08       	sbc	r8, r1
    621e:	91 08       	sbc	r9, r1
    6220:	db 01       	movw	r26, r22
    6222:	ca 01       	movw	r24, r20
    6224:	12 e0       	ldi	r17, 0x02	; 2
    6226:	88 0f       	add	r24, r24
    6228:	99 1f       	adc	r25, r25
    622a:	aa 1f       	adc	r26, r26
    622c:	bb 1f       	adc	r27, r27
    622e:	1a 95       	dec	r17
    6230:	d1 f7       	brne	.-12     	; 0x6226 <strtod+0x114>
    6232:	48 0f       	add	r20, r24
    6234:	59 1f       	adc	r21, r25
    6236:	6a 1f       	adc	r22, r26
    6238:	7b 1f       	adc	r23, r27
    623a:	44 0f       	add	r20, r20
    623c:	55 1f       	adc	r21, r21
    623e:	66 1f       	adc	r22, r22
    6240:	77 1f       	adc	r23, r23
    6242:	4e 0f       	add	r20, r30
    6244:	51 1d       	adc	r21, r1
    6246:	61 1d       	adc	r22, r1
    6248:	71 1d       	adc	r23, r1
    624a:	48 39       	cpi	r20, 0x98	; 152
    624c:	29 e9       	ldi	r18, 0x99	; 153
    624e:	52 07       	cpc	r21, r18
    6250:	29 e9       	ldi	r18, 0x99	; 153
    6252:	62 07       	cpc	r22, r18
    6254:	29 e1       	ldi	r18, 0x19	; 25
    6256:	72 07       	cpc	r23, r18
    6258:	48 f0       	brcs	.+18     	; 0x626c <strtod+0x15a>
    625a:	84 e0       	ldi	r24, 0x04	; 4
    625c:	e8 2a       	or	r14, r24
    625e:	06 c0       	rjmp	.+12     	; 0x626c <strtod+0x15a>
    6260:	ee 3f       	cpi	r30, 0xFE	; 254
    6262:	31 f4       	brne	.+12     	; 0x6270 <strtod+0x15e>
    6264:	e3 fc       	sbrc	r14, 3
    6266:	39 c0       	rjmp	.+114    	; 0x62da <strtod+0x1c8>
    6268:	98 e0       	ldi	r25, 0x08	; 8
    626a:	e9 2a       	or	r14, r25
    626c:	f9 90       	ld	r15, Y+
    626e:	c0 cf       	rjmp	.-128    	; 0x61f0 <strtod+0xde>
    6270:	e5 33       	cpi	r30, 0x35	; 53
    6272:	11 f0       	breq	.+4      	; 0x6278 <strtod+0x166>
    6274:	e5 31       	cpi	r30, 0x15	; 21
    6276:	89 f5       	brne	.+98     	; 0x62da <strtod+0x1c8>
    6278:	29 91       	ld	r18, Y+
    627a:	2d 32       	cpi	r18, 0x2D	; 45
    627c:	19 f4       	brne	.+6      	; 0x6284 <strtod+0x172>
    627e:	e0 e1       	ldi	r30, 0x10	; 16
    6280:	ee 2a       	or	r14, r30
    6282:	05 c0       	rjmp	.+10     	; 0x628e <strtod+0x17c>
    6284:	2b 32       	cpi	r18, 0x2B	; 43
    6286:	19 f0       	breq	.+6      	; 0x628e <strtod+0x17c>
    6288:	81 e0       	ldi	r24, 0x01	; 1
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	03 c0       	rjmp	.+6      	; 0x6294 <strtod+0x182>
    628e:	29 91       	ld	r18, Y+
    6290:	82 e0       	ldi	r24, 0x02	; 2
    6292:	90 e0       	ldi	r25, 0x00	; 0
    6294:	e2 2f       	mov	r30, r18
    6296:	e0 53       	subi	r30, 0x30	; 48
    6298:	ea 30       	cpi	r30, 0x0A	; 10
    629a:	18 f0       	brcs	.+6      	; 0x62a2 <strtod+0x190>
    629c:	c8 1b       	sub	r28, r24
    629e:	d9 0b       	sbc	r29, r25
    62a0:	1c c0       	rjmp	.+56     	; 0x62da <strtod+0x1c8>
    62a2:	20 e0       	ldi	r18, 0x00	; 0
    62a4:	30 e0       	ldi	r19, 0x00	; 0
    62a6:	fc e0       	ldi	r31, 0x0C	; 12
    62a8:	20 38       	cpi	r18, 0x80	; 128
    62aa:	3f 07       	cpc	r19, r31
    62ac:	5c f4       	brge	.+22     	; 0x62c4 <strtod+0x1b2>
    62ae:	c9 01       	movw	r24, r18
    62b0:	88 0f       	add	r24, r24
    62b2:	99 1f       	adc	r25, r25
    62b4:	88 0f       	add	r24, r24
    62b6:	99 1f       	adc	r25, r25
    62b8:	28 0f       	add	r18, r24
    62ba:	39 1f       	adc	r19, r25
    62bc:	22 0f       	add	r18, r18
    62be:	33 1f       	adc	r19, r19
    62c0:	2e 0f       	add	r18, r30
    62c2:	31 1d       	adc	r19, r1
    62c4:	e9 91       	ld	r30, Y+
    62c6:	e0 53       	subi	r30, 0x30	; 48
    62c8:	ea 30       	cpi	r30, 0x0A	; 10
    62ca:	68 f3       	brcs	.-38     	; 0x62a6 <strtod+0x194>
    62cc:	e4 fe       	sbrs	r14, 4
    62ce:	03 c0       	rjmp	.+6      	; 0x62d6 <strtod+0x1c4>
    62d0:	30 95       	com	r19
    62d2:	21 95       	neg	r18
    62d4:	3f 4f       	sbci	r19, 0xFF	; 255
    62d6:	82 0e       	add	r8, r18
    62d8:	93 1e       	adc	r9, r19
    62da:	ce 2c       	mov	r12, r14
    62dc:	dd 24       	eor	r13, r13
    62de:	e1 fe       	sbrs	r14, 1
    62e0:	07 c0       	rjmp	.+14     	; 0x62f0 <strtod+0x1de>
    62e2:	a1 14       	cp	r10, r1
    62e4:	b1 04       	cpc	r11, r1
    62e6:	21 f0       	breq	.+8      	; 0x62f0 <strtod+0x1de>
    62e8:	21 97       	sbiw	r28, 0x01	; 1
    62ea:	f5 01       	movw	r30, r10
    62ec:	d1 83       	std	Z+1, r29	; 0x01
    62ee:	c0 83       	st	Z, r28
    62f0:	cb 01       	movw	r24, r22
    62f2:	ba 01       	movw	r22, r20
    62f4:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__floatunsisf>
    62f8:	7b 01       	movw	r14, r22
    62fa:	8c 01       	movw	r16, r24
    62fc:	f3 e0       	ldi	r31, 0x03	; 3
    62fe:	cf 22       	and	r12, r31
    6300:	dd 24       	eor	r13, r13
    6302:	23 e0       	ldi	r18, 0x03	; 3
    6304:	c2 16       	cp	r12, r18
    6306:	d1 04       	cpc	r13, r1
    6308:	21 f4       	brne	.+8      	; 0x6312 <strtod+0x200>
    630a:	17 fb       	bst	r17, 7
    630c:	10 95       	com	r17
    630e:	17 f9       	bld	r17, 7
    6310:	10 95       	com	r17
    6312:	57 01       	movw	r10, r14
    6314:	68 01       	movw	r12, r16
    6316:	c8 01       	movw	r24, r16
    6318:	b7 01       	movw	r22, r14
    631a:	20 e0       	ldi	r18, 0x00	; 0
    631c:	30 e0       	ldi	r19, 0x00	; 0
    631e:	40 e0       	ldi	r20, 0x00	; 0
    6320:	50 e0       	ldi	r21, 0x00	; 0
    6322:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
    6326:	88 23       	and	r24, r24
    6328:	09 f4       	brne	.+2      	; 0x632c <strtod+0x21a>
    632a:	4a c0       	rjmp	.+148    	; 0x63c0 <strtod+0x2ae>
    632c:	97 fe       	sbrs	r9, 7
    632e:	0d c0       	rjmp	.+26     	; 0x634a <strtod+0x238>
    6330:	21 e0       	ldi	r18, 0x01	; 1
    6332:	e2 2e       	mov	r14, r18
    6334:	26 e0       	ldi	r18, 0x06	; 6
    6336:	f2 2e       	mov	r15, r18
    6338:	90 94       	com	r9
    633a:	81 94       	neg	r8
    633c:	91 08       	sbc	r9, r1
    633e:	93 94       	inc	r9
    6340:	c0 e2       	ldi	r28, 0x20	; 32
    6342:	d0 e0       	ldi	r29, 0x00	; 0
    6344:	00 e0       	ldi	r16, 0x00	; 0
    6346:	10 e0       	ldi	r17, 0x00	; 0
    6348:	12 c0       	rjmp	.+36     	; 0x636e <strtod+0x25c>
    634a:	99 e1       	ldi	r25, 0x19	; 25
    634c:	e9 2e       	mov	r14, r25
    634e:	96 e0       	ldi	r25, 0x06	; 6
    6350:	f9 2e       	mov	r15, r25
    6352:	f6 cf       	rjmp	.-20     	; 0x6340 <strtod+0x22e>
    6354:	f7 01       	movw	r30, r14
    6356:	25 91       	lpm	r18, Z+
    6358:	35 91       	lpm	r19, Z+
    635a:	45 91       	lpm	r20, Z+
    635c:	54 91       	lpm	r21, Z+
    635e:	c6 01       	movw	r24, r12
    6360:	b5 01       	movw	r22, r10
    6362:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__mulsf3>
    6366:	5b 01       	movw	r10, r22
    6368:	6c 01       	movw	r12, r24
    636a:	8c 1a       	sub	r8, r28
    636c:	9d 0a       	sbc	r9, r29
    636e:	8c 16       	cp	r8, r28
    6370:	9d 06       	cpc	r9, r29
    6372:	84 f7       	brge	.-32     	; 0x6354 <strtod+0x242>
    6374:	d5 95       	asr	r29
    6376:	c7 95       	ror	r28
    6378:	0f 5f       	subi	r16, 0xFF	; 255
    637a:	1f 4f       	sbci	r17, 0xFF	; 255
    637c:	06 30       	cpi	r16, 0x06	; 6
    637e:	11 05       	cpc	r17, r1
    6380:	29 f0       	breq	.+10     	; 0x638c <strtod+0x27a>
    6382:	8c ef       	ldi	r24, 0xFC	; 252
    6384:	9f ef       	ldi	r25, 0xFF	; 255
    6386:	e8 0e       	add	r14, r24
    6388:	f9 1e       	adc	r15, r25
    638a:	f1 cf       	rjmp	.-30     	; 0x636e <strtod+0x25c>
    638c:	c5 01       	movw	r24, r10
    638e:	d6 01       	movw	r26, r12
    6390:	7c 01       	movw	r14, r24
    6392:	8d 01       	movw	r16, r26
    6394:	8c 2d       	mov	r24, r12
    6396:	88 0f       	add	r24, r24
    6398:	8d 2d       	mov	r24, r13
    639a:	88 1f       	adc	r24, r24
    639c:	8f 3f       	cpi	r24, 0xFF	; 255
    639e:	51 f0       	breq	.+20     	; 0x63b4 <strtod+0x2a2>
    63a0:	c6 01       	movw	r24, r12
    63a2:	b5 01       	movw	r22, r10
    63a4:	20 e0       	ldi	r18, 0x00	; 0
    63a6:	30 e0       	ldi	r19, 0x00	; 0
    63a8:	40 e0       	ldi	r20, 0x00	; 0
    63aa:	50 e0       	ldi	r21, 0x00	; 0
    63ac:	0e 94 90 2c 	call	0x5920	; 0x5920 <__cmpsf2>
    63b0:	88 23       	and	r24, r24
    63b2:	31 f4       	brne	.+12     	; 0x63c0 <strtod+0x2ae>
    63b4:	82 e2       	ldi	r24, 0x22	; 34
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	90 93 ff 06 	sts	0x06FF, r25
    63bc:	80 93 fe 06 	sts	0x06FE, r24
    63c0:	7e 2d       	mov	r23, r14
    63c2:	9f 2d       	mov	r25, r15
    63c4:	80 2f       	mov	r24, r16
    63c6:	61 2f       	mov	r22, r17
    63c8:	27 2f       	mov	r18, r23
    63ca:	39 2f       	mov	r19, r25
    63cc:	48 2f       	mov	r20, r24
    63ce:	56 2f       	mov	r21, r22
    63d0:	b9 01       	movw	r22, r18
    63d2:	ca 01       	movw	r24, r20
    63d4:	df 91       	pop	r29
    63d6:	cf 91       	pop	r28
    63d8:	1f 91       	pop	r17
    63da:	0f 91       	pop	r16
    63dc:	ff 90       	pop	r15
    63de:	ef 90       	pop	r14
    63e0:	df 90       	pop	r13
    63e2:	cf 90       	pop	r12
    63e4:	bf 90       	pop	r11
    63e6:	af 90       	pop	r10
    63e8:	9f 90       	pop	r9
    63ea:	8f 90       	pop	r8
    63ec:	08 95       	ret

000063ee <isspace>:
    63ee:	91 11       	cpse	r25, r1
    63f0:	1e c0       	rjmp	.+60     	; 0x642e <__ctype_isfalse>
    63f2:	80 32       	cpi	r24, 0x20	; 32
    63f4:	19 f0       	breq	.+6      	; 0x63fc <isspace+0xe>
    63f6:	89 50       	subi	r24, 0x09	; 9
    63f8:	85 50       	subi	r24, 0x05	; 5
    63fa:	d0 f7       	brcc	.-12     	; 0x63f0 <isspace+0x2>
    63fc:	08 95       	ret

000063fe <strncasecmp_P>:
    63fe:	fb 01       	movw	r30, r22
    6400:	dc 01       	movw	r26, r24
    6402:	41 50       	subi	r20, 0x01	; 1
    6404:	50 40       	sbci	r21, 0x00	; 0
    6406:	88 f0       	brcs	.+34     	; 0x642a <strncasecmp_P+0x2c>
    6408:	8d 91       	ld	r24, X+
    640a:	81 34       	cpi	r24, 0x41	; 65
    640c:	1c f0       	brlt	.+6      	; 0x6414 <strncasecmp_P+0x16>
    640e:	8b 35       	cpi	r24, 0x5B	; 91
    6410:	0c f4       	brge	.+2      	; 0x6414 <strncasecmp_P+0x16>
    6412:	80 5e       	subi	r24, 0xE0	; 224
    6414:	65 91       	lpm	r22, Z+
    6416:	61 34       	cpi	r22, 0x41	; 65
    6418:	1c f0       	brlt	.+6      	; 0x6420 <strncasecmp_P+0x22>
    641a:	6b 35       	cpi	r22, 0x5B	; 91
    641c:	0c f4       	brge	.+2      	; 0x6420 <strncasecmp_P+0x22>
    641e:	60 5e       	subi	r22, 0xE0	; 224
    6420:	86 1b       	sub	r24, r22
    6422:	61 11       	cpse	r22, r1
    6424:	71 f3       	breq	.-36     	; 0x6402 <strncasecmp_P+0x4>
    6426:	99 0b       	sbc	r25, r25
    6428:	08 95       	ret
    642a:	88 1b       	sub	r24, r24
    642c:	fc cf       	rjmp	.-8      	; 0x6426 <strncasecmp_P+0x28>

0000642e <__ctype_isfalse>:
    642e:	99 27       	eor	r25, r25
    6430:	88 27       	eor	r24, r24

00006432 <__ctype_istrue>:
    6432:	08 95       	ret

00006434 <_exit>:
    6434:	f8 94       	cli

00006436 <__stop_program>:
    6436:	ff cf       	rjmp	.-2      	; 0x6436 <__stop_program>
