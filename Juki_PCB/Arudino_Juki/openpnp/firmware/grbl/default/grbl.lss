
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004564  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000049d  00800200  00800200  000045d8  2**0
                  ALLOC
  2 .debug_aranges 00000478  00000000  00000000  000045d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000083d  00000000  00000000  00004a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000034ca  00000000  00000000  0000528d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000130d  00000000  00000000  00008757  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00002f38  00000000  00000000  00009a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000006f0  00000000  00000000  0000c99c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000da9  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000190b  00000000  00000000  0000de35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000740  00000000  00000000  0000f740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b9 02 	jmp	0x572	; 0x572 <__ctors_end>
       4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
       8:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
       c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      10:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      14:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      18:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      1c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      20:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      24:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      28:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      2c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      30:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      34:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      38:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      3c:	0c 94 72 14 	jmp	0x28e4	; 0x28e4 <__vector_15>
      40:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      44:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__vector_17>
      48:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      4c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      50:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      54:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      58:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      5c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      60:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      64:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__vector_25>
      68:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      6c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      70:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      74:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      78:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      7c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      80:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      84:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      88:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      8c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      90:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      94:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      98:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      9c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      a0:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      a4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      a8:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      ac:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      b0:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      b4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      b8:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      bc:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      c0:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      c4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      c8:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      cc:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      d0:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      d4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      d8:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      dc:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      e0:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
      e4:	18 06       	cpc	r1, r24
      e6:	18 06       	cpc	r1, r24
      e8:	1b 06       	cpc	r1, r27
      ea:	1e 06       	cpc	r1, r30
      ec:	25 06       	cpc	r2, r21
      ee:	2a 06       	cpc	r2, r26
      f0:	65 06       	cpc	r6, r21
      f2:	65 06       	cpc	r6, r21
      f4:	2f 06       	cpc	r2, r31
      f6:	36 06       	cpc	r3, r22
      f8:	3b 06       	cpc	r3, r27
      fa:	3e 06       	cpc	r3, r30
      fc:	43 06       	cpc	r4, r19
      fe:	46 06       	cpc	r4, r22
     100:	49 06       	cpc	r4, r25
     102:	4c 06       	cpc	r4, r28
     104:	4f 06       	cpc	r4, r31
     106:	52 06       	cpc	r5, r18
     108:	55 06       	cpc	r5, r21
     10a:	5a 06       	cpc	r5, r26
     10c:	5d 06       	cpc	r5, r29
     10e:	62 06       	cpc	r6, r18
     110:	65 06       	cpc	r6, r21
     112:	65 06       	cpc	r6, r21
     114:	65 06       	cpc	r6, r21
     116:	65 06       	cpc	r6, r21
     118:	65 06       	cpc	r6, r21
     11a:	65 06       	cpc	r6, r21
     11c:	65 06       	cpc	r6, r21
     11e:	65 06       	cpc	r6, r21
     120:	1b 06       	cpc	r1, r27
     122:	65 06       	cpc	r6, r21
     124:	65 06       	cpc	r6, r21
     126:	65 06       	cpc	r6, r21
     128:	65 06       	cpc	r6, r21
     12a:	65 06       	cpc	r6, r21
     12c:	65 06       	cpc	r6, r21
     12e:	65 06       	cpc	r6, r21
     130:	65 06       	cpc	r6, r21
     132:	65 06       	cpc	r6, r21
     134:	65 06       	cpc	r6, r21
     136:	65 06       	cpc	r6, r21
     138:	65 06       	cpc	r6, r21
     13a:	65 06       	cpc	r6, r21
     13c:	65 06       	cpc	r6, r21
     13e:	65 06       	cpc	r6, r21
     140:	65 06       	cpc	r6, r21
     142:	65 06       	cpc	r6, r21
     144:	65 06       	cpc	r6, r21
     146:	65 06       	cpc	r6, r21
     148:	65 06       	cpc	r6, r21
     14a:	65 06       	cpc	r6, r21
     14c:	65 06       	cpc	r6, r21
     14e:	65 06       	cpc	r6, r21
     150:	65 06       	cpc	r6, r21
     152:	65 06       	cpc	r6, r21
     154:	65 06       	cpc	r6, r21
     156:	65 06       	cpc	r6, r21
     158:	65 06       	cpc	r6, r21
     15a:	65 06       	cpc	r6, r21
     15c:	1b 06       	cpc	r1, r27
     15e:	08 4a       	sbci	r16, 0xA8	; 168
     160:	d7 3b       	cpi	r29, 0xB7	; 183
     162:	3b ce       	rjmp	.-906    	; 0xfffffdda <__eeprom_end+0xff7efdda>
     164:	01 6e       	ori	r16, 0xE1	; 225
     166:	84 bc       	out	0x24, r8	; 36
     168:	bf fd       	.word	0xfdbf	; ????
     16a:	c1 2f       	mov	r28, r17
     16c:	3d 6c       	ori	r19, 0xCD	; 205
     16e:	74 31       	cpi	r23, 0x14	; 20
     170:	9a bd       	out	0x2a, r25	; 42
     172:	56 83       	std	Z+6, r21	; 0x06
     174:	3d da       	rcall	.-2950   	; 0xfffff5f0 <__eeprom_end+0xff7ef5f0>
     176:	3d 00       	.word	0x003d	; ????
     178:	c7 7f       	andi	r28, 0xF7	; 247
     17a:	11 be       	out	0x31, r1	; 49
     17c:	d9 e4       	ldi	r29, 0x49	; 73
     17e:	bb 4c       	sbci	r27, 0xCB	; 203
     180:	3e 91       	ld	r19, -X
     182:	6b aa       	std	Y+51, r6	; 0x33
     184:	aa be       	out	0x3a, r10	; 58
     186:	00 00       	nop
     188:	00 80       	ld	r0, Z
     18a:	3f 59       	subi	r19, 0x9F	; 159

0000018b <__c.1871>:
     18b:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000194 <__c.1869>:
     194:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000019d <__c.1867>:
     19d:	59 4c 32 0d 0a 00                                   YL2...

000001a3 <__c.1865>:
     1a3:	59 4c 31 0d 0a 00                                   YL1...

000001a9 <__c.1863>:
     1a9:	58 4c 32 0d 0a 00                                   XL2...

000001af <__c.1861>:
     1af:	58 4c 31 0d 0a 00                                   XL1...

000001b5 <__c.1859>:
     1b5:	0d 0a 00                                            ...

000001b8 <__c.1857>:
     1b8:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

000001c3 <__c.1855>:
     1c3:	0d 0a 00                                            ...

000001c6 <__c.1853>:
     1c6:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000001d3 <__c.1851>:
     1d3:	0d 0a 00                                            ...

000001d6 <__c.1849>:
     1d6:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

000001e5 <__c.1847>:
     1e5:	0d 0a 00                                            ...

000001e8 <__c.1845>:
     1e8:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

000001f2 <__c.1843>:
     1f2:	0d 0a 00                                            ...

000001f5 <__c.1841>:
     1f5:	64 69 72 5f 62 69 74 73 20 20 3d 20 00              dir_bits  = .

00000202 <__c.1609>:
     202:	6f 6b 0a 0d 00                                      ok...

00000207 <__c.1669>:
     207:	0a 0d 00                                            ...

0000020a <__c.1667>:
     20a:	65 72 72 6f 72 3a 20 00                             error: .

00000212 <__c.1664>:
     212:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     222:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

00000230 <__c.1661>:
     230:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     240:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

0000024f <__c.1658>:
     24f:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     25f:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

00000270 <__c.1655>:
     270:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     280:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

0000028b <__c.1651>:
     28b:	6f 6b 0a 0d 00                                      ok...

00000290 <__c.1648>:
     290:	0d 0a 4e 6f 74 20 68 6f 6d 65 64 0a 0d 00           ..Not homed...

0000029e <__c.1677>:
     29e:	0d 0a 00                                            ...

000002a1 <__c.1675>:
     2a1:	0d 0a 4f 70 65 6e 50 6e 50 2f 47 72 62 6c 20 30     ..OpenPnP/Grbl 0
     2b1:	2e 37 36 00                                         .76.

000002b5 <__c.1736>:
     2b5:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
     2c5:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
     2d5:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
     2e5:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

000002f0 <__c.1734>:
     2f0:	27 24 27 20 74 6f 20 64 75 6d 70 20 63 75 72 72     '$' to dump curr
     300:	65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a 00        ent settings...

0000030f <__c.1726>:
     30f:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     31f:	6e 67 0d 0a 00                                      ng...

00000324 <__c.1724>:
     324:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     334:	72 0d 0a 00                                         r...

00000338 <__c.1681>:
     338:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     348:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     358:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     368:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     378:	0d 0a 00                                            ...

0000037b <__c.1679>:
     37b:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     38b:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     39b:	61 62 6c 65 64 29 0d 0a 00                          abled)...

000003a4 <__c.1677>:
     3a4:	24 31 30 30 30 20 3d 20 00                          $1000 = .

000003ad <__c.1675>:
     3ad:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     3bd:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     3cd:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     3dd:	2f 6d 69 6e 29 0d 0a 00                             /min)...

000003e5 <__c.1673>:
     3e5:	24 39 20 3d 20 00                                   $9 = .

000003eb <__c.1671>:
     3eb:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     3fb:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

00000409 <__c.1669>:
     409:	24 38 20 3d 20 00                                   $8 = .

0000040f <__c.1667>:
     40f:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     41f:	29 0d 0a 00                                         )...

00000423 <__c.1665>:
     423:	24 37 20 3d 20 00                                   $7 = .

00000429 <__c.1663>:
     429:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     439:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000447 <__c.1661>:
     447:	24 36 20 3d 20 00                                   $6 = .

0000044d <__c.1659>:
     44d:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     45d:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

0000046b <__c.1657>:
     46b:	24 35 20 3d 20 00                                   $5 = .

00000471 <__c.1655>:
     471:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     481:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

0000048e <__c.1653>:
     48e:	24 34 20 3d 20 00                                   $4 = .

00000494 <__c.1651>:
     494:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     4a4:	0a 00                                               ..

000004a6 <__c.1649>:
     4a6:	24 33 20 3d 20 00                                   $3 = .

000004ac <__c.1647>:
     4ac:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

000004bc <__c.1645>:
     4bc:	24 32 20 3d 20 00                                   $2 = .

000004c2 <__c.1643>:
     4c2:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

000004d2 <__c.1641>:
     4d2:	24 31 20 3d 20 00                                   $1 = .

000004d8 <__c.1639>:
     4d8:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000004e8 <__c.1637>:
     4e8:	24 30 20 3d 20 00                                   $0 = .

000004ee <__c.1635>:
     4ee:	0d 0a 00                                            ...

000004f1 <__c.1633>:
     4f1:	30 2e 37 36 00                                      0.76.

000004f6 <__c.1631>:
     4f6:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

00000502 <__c.2159>:
     502:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

00000510 <__c.2029>:
     510:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

0000051a <__c.2047>:
     51a:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

00000524 <__c.1817>:
     524:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     534:	0d 00                                               ..

00000536 <pstr_inf>:
     536:	49 4e 46                                            INF

00000539 <pstr_inity>:
     539:	49 4e 49 54 59                                      INITY

0000053e <pstr_nan>:
     53e:	4e 41 4e                                            NAN

00000541 <pwr_m10>:
     541:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     551:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000559 <pwr_p10>:
     559:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     569:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000572 <__ctors_end>:
     572:	11 24       	eor	r1, r1
     574:	1f be       	out	0x3f, r1	; 63
     576:	cf ef       	ldi	r28, 0xFF	; 255
     578:	d1 e2       	ldi	r29, 0x21	; 33
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	00 e0       	ldi	r16, 0x00	; 0
     580:	0c bf       	out	0x3c, r16	; 60

00000582 <__do_copy_data>:
     582:	12 e0       	ldi	r17, 0x02	; 2
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b2 e0       	ldi	r27, 0x02	; 2
     588:	e4 e6       	ldi	r30, 0x64	; 100
     58a:	f5 e4       	ldi	r31, 0x45	; 69
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	0b bf       	out	0x3b, r16	; 59
     590:	02 c0       	rjmp	.+4      	; 0x596 <__do_copy_data+0x14>
     592:	07 90       	elpm	r0, Z+
     594:	0d 92       	st	X+, r0
     596:	a0 30       	cpi	r26, 0x00	; 0
     598:	b1 07       	cpc	r27, r17
     59a:	d9 f7       	brne	.-10     	; 0x592 <__do_copy_data+0x10>

0000059c <__do_clear_bss>:
     59c:	16 e0       	ldi	r17, 0x06	; 6
     59e:	a0 e0       	ldi	r26, 0x00	; 0
     5a0:	b2 e0       	ldi	r27, 0x02	; 2
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <.do_clear_bss_start>

000005a4 <.do_clear_bss_loop>:
     5a4:	1d 92       	st	X+, r1

000005a6 <.do_clear_bss_start>:
     5a6:	ad 39       	cpi	r26, 0x9D	; 157
     5a8:	b1 07       	cpc	r27, r17
     5aa:	e1 f7       	brne	.-8      	; 0x5a4 <.do_clear_bss_loop>
     5ac:	0e 94 b0 08 	call	0x1160	; 0x1160 <main>
     5b0:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <_exit>

000005b4 <__bad_interrupt>:
     5b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005b8 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     5b8:	24 9a       	sbi	0x04, 4	; 4
}
     5ba:	08 95       	ret

000005bc <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     5bc:	89 2b       	or	r24, r25
     5be:	11 f0       	breq	.+4      	; 0x5c4 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     5c0:	2c 9a       	sbi	0x05, 4	; 5
     5c2:	08 95       	ret
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     5c4:	2c 98       	cbi	0x05, 4	; 5
     5c6:	08 95       	ret

000005c8 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5c8:	f9 99       	sbic	0x1f, 1	; 31
     5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     5cc:	92 bd       	out	0x22, r25	; 34
     5ce:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     5d4:	80 b5       	in	r24, 0x20	; 32
}
     5d6:	08 95       	ret

000005d8 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     5d8:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5da:	f9 99       	sbic	0x1f, 1	; 31
     5dc:	fe cf       	rjmp	.-4      	; 0x5da <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     5de:	92 bd       	out	0x22, r25	; 34
     5e0:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     5e6:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     5e8:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     5ea:	89 2f       	mov	r24, r25
     5ec:	86 23       	and	r24, r22
     5ee:	39 f0       	breq	.+14     	; 0x5fe <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     5f0:	6f 3f       	cpi	r22, 0xFF	; 255
     5f2:	19 f0       	breq	.+6      	; 0x5fa <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     5f4:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5f6:	84 e0       	ldi	r24, 0x04	; 4
     5f8:	06 c0       	rjmp	.+12     	; 0x606 <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5fa:	84 e1       	ldi	r24, 0x14	; 20
     5fc:	04 c0       	rjmp	.+8      	; 0x606 <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     5fe:	99 23       	and	r25, r25
     600:	21 f0       	breq	.+8      	; 0x60a <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     602:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     604:	84 e2       	ldi	r24, 0x24	; 36
     606:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     608:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     60a:	78 94       	sei
}
     60c:	08 95       	ret

0000060e <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     60e:	8f 92       	push	r8
     610:	9f 92       	push	r9
     612:	af 92       	push	r10
     614:	bf 92       	push	r11
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	df 93       	push	r29
     622:	cf 93       	push	r28
     624:	0f 92       	push	r0
     626:	0f 92       	push	r0
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	5c 01       	movw	r10, r24
     62e:	6b 01       	movw	r12, r22
     630:	7a 01       	movw	r14, r20
     632:	4a 01       	movw	r8, r20
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	1e c0       	rjmp	.+60     	; 0x674 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     638:	00 23       	and	r16, r16
     63a:	19 f0       	breq	.+6      	; 0x642 <memcpy_to_eeprom_with_checksum+0x34>
     63c:	21 e0       	ldi	r18, 0x01	; 1
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	08 c0       	rjmp	.+16     	; 0x652 <memcpy_to_eeprom_with_checksum+0x44>
     642:	20 2f       	mov	r18, r16
     644:	33 27       	eor	r19, r19
     646:	27 fd       	sbrc	r18, 7
     648:	30 95       	com	r19
     64a:	22 27       	eor	r18, r18
     64c:	33 0f       	add	r19, r19
     64e:	22 1f       	adc	r18, r18
     650:	33 27       	eor	r19, r19
    checksum += *source;
     652:	f6 01       	movw	r30, r12
     654:	61 91       	ld	r22, Z+
     656:	6f 01       	movw	r12, r30
     658:	06 2f       	mov	r16, r22
     65a:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     65c:	9c 01       	movw	r18, r24
     65e:	2f 5f       	subi	r18, 0xFF	; 255
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	3a 83       	std	Y+2, r19	; 0x02
     664:	29 83       	std	Y+1, r18	; 0x01
     666:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     66a:	08 94       	sec
     66c:	81 08       	sbc	r8, r1
     66e:	91 08       	sbc	r9, r1
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	81 14       	cp	r8, r1
     676:	91 04       	cpc	r9, r1
     678:	f9 f6       	brne	.-66     	; 0x638 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     67a:	c7 01       	movw	r24, r14
     67c:	8a 0d       	add	r24, r10
     67e:	9b 1d       	adc	r25, r11
     680:	60 2f       	mov	r22, r16
     682:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <eeprom_put_char>
}
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	cf 91       	pop	r28
     68c:	df 91       	pop	r29
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	08 95       	ret

000006a2 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
     6a8:	fb 01       	movw	r30, r22
     6aa:	9a 01       	movw	r18, r20
     6ac:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     6ae:	b1 e0       	ldi	r27, 0x01	; 1
     6b0:	19 c0       	rjmp	.+50     	; 0x6e4 <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6b2:	f9 99       	sbic	0x1f, 1	; 31
     6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     6b6:	f2 bd       	out	0x22, r31	; 34
     6b8:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6ba:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     6bc:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     6be:	99 23       	and	r25, r25
     6c0:	19 f0       	breq	.+6      	; 0x6c8 <memcpy_from_eeprom_with_checksum+0x26>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <memcpy_from_eeprom_with_checksum+0x36>
     6c8:	89 2f       	mov	r24, r25
     6ca:	99 27       	eor	r25, r25
     6cc:	87 fd       	sbrc	r24, 7
     6ce:	90 95       	com	r25
     6d0:	88 27       	eor	r24, r24
     6d2:	99 0f       	add	r25, r25
     6d4:	88 1f       	adc	r24, r24
     6d6:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     6d8:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     6da:	9a 2f       	mov	r25, r26
     6dc:	98 0f       	add	r25, r24
    *(destination++) = data; 
     6de:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	21 15       	cp	r18, r1
     6e6:	31 05       	cpc	r19, r1
     6e8:	21 f7       	brne	.-56     	; 0x6b2 <memcpy_from_eeprom_with_checksum+0x10>
     6ea:	46 0f       	add	r20, r22
     6ec:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6ee:	f9 99       	sbic	0x1f, 1	; 31
     6f0:	fe cf       	rjmp	.-4      	; 0x6ee <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     6f2:	52 bd       	out	0x22, r21	; 34
     6f4:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     6fa:	80 b5       	in	r24, 0x20	; 32
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	98 17       	cp	r25, r24
     702:	11 f4       	brne	.+4      	; 0x708 <memcpy_from_eeprom_with_checksum+0x66>
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     708:	c9 01       	movw	r24, r18
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     710:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     714:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     718:	40 93 27 02 	sts	0x0227, r20
}
     71c:	08 95       	ret

0000071e <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	0f 92       	push	r0
     734:	0f 92       	push	r0
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	6c 01       	movw	r12, r24
     73c:	5b 01       	movw	r10, r22
     73e:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     740:	fb 01       	movw	r30, r22
     742:	00 81       	ld	r16, Z
     744:	11 81       	ldd	r17, Z+1	; 0x01
     746:	08 0f       	add	r16, r24
     748:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     74a:	c8 01       	movw	r24, r16
     74c:	be 01       	movw	r22, r28
     74e:	6f 5f       	subi	r22, 0xFF	; 255
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	0e 94 1f 21 	call	0x423e	; 0x423e <strtod>
     756:	f7 01       	movw	r30, r14
     758:	60 83       	st	Z, r22
     75a:	71 83       	std	Z+1, r23	; 0x01
     75c:	82 83       	std	Z+2, r24	; 0x02
     75e:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	9a 81       	ldd	r25, Y+2	; 0x02
     764:	80 17       	cp	r24, r16
     766:	91 07       	cpc	r25, r17
     768:	31 f4       	brne	.+12     	; 0x776 <read_double+0x58>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	80 93 00 02 	sts	0x0200, r24
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	07 c0       	rjmp	.+14     	; 0x784 <read_double+0x66>
    return(0); 
  };

  *char_counter = end - line;
     776:	8c 19       	sub	r24, r12
     778:	9d 09       	sbc	r25, r13
     77a:	f5 01       	movw	r30, r10
     77c:	91 83       	std	Z+1, r25	; 0x01
     77e:	80 83       	st	Z, r24
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     784:	c9 01       	movw	r24, r18
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	08 95       	ret

000007a0 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	8b 01       	movw	r16, r22
     7ac:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     7ae:	ed 91       	ld	r30, X+
     7b0:	fc 91       	ld	r31, X
     7b2:	11 97       	sbiw	r26, 0x01	; 1
     7b4:	e4 0f       	add	r30, r20
     7b6:	f5 1f       	adc	r31, r21
     7b8:	e0 81       	ld	r30, Z
     7ba:	ee 23       	and	r30, r30
     7bc:	39 f0       	breq	.+14     	; 0x7cc <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     7be:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     7c0:	e1 54       	subi	r30, 0x41	; 65
     7c2:	ea 31       	cpi	r30, 0x1A	; 26
     7c4:	30 f0       	brcs	.+12     	; 0x7d2 <next_statement+0x32>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	80 93 00 02 	sts	0x0200, r24
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	10 c0       	rjmp	.+32     	; 0x7f2 <next_statement+0x52>
    return(0);
  }
  (*char_counter)++;
     7d2:	8d 91       	ld	r24, X+
     7d4:	9c 91       	ld	r25, X
     7d6:	11 97       	sbiw	r26, 0x01	; 1
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	8d 93       	st	X+, r24
     7dc:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     7de:	ca 01       	movw	r24, r20
     7e0:	b9 01       	movw	r22, r18
     7e2:	a8 01       	movw	r20, r16
     7e4:	0e 94 8f 03 	call	0x71e	; 0x71e <read_double>
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	11 f0       	breq	.+4      	; 0x7f0 <next_statement+0x50>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     7f2:	c9 01       	movw	r24, r18
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     7fe:	88 e2       	ldi	r24, 0x28	; 40
     800:	e0 e0       	ldi	r30, 0x00	; 0
     802:	f2 e0       	ldi	r31, 0x02	; 2
     804:	df 01       	movw	r26, r30
     806:	1d 92       	st	X+, r1
     808:	8a 95       	dec	r24
     80a:	e9 f7       	brne	.-6      	; 0x806 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     80c:	60 91 86 06 	lds	r22, 0x0686
     810:	70 91 87 06 	lds	r23, 0x0687
     814:	80 91 88 06 	lds	r24, 0x0688
     818:	90 91 89 06 	lds	r25, 0x0689
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e7       	ldi	r20, 0x70	; 112
     822:	52 e4       	ldi	r21, 0x42	; 66
     824:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
     828:	60 93 0a 02 	sts	0x020A, r22
     82c:	70 93 0b 02 	sts	0x020B, r23
     830:	80 93 0c 02 	sts	0x020C, r24
     834:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     838:	60 91 8a 06 	lds	r22, 0x068A
     83c:	70 91 8b 06 	lds	r23, 0x068B
     840:	80 91 8c 06 	lds	r24, 0x068C
     844:	90 91 8d 06 	lds	r25, 0x068D
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e7       	ldi	r20, 0x70	; 112
     84e:	52 e4       	ldi	r21, 0x42	; 66
     850:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
     854:	60 93 0e 02 	sts	0x020E, r22
     858:	70 93 0f 02 	sts	0x020F, r23
     85c:	80 93 10 02 	sts	0x0210, r24
     860:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     864:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     874:	90 93 04 02 	sts	0x0204, r25
}
     878:	08 95       	ret

0000087a <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     87a:	2f 92       	push	r2
     87c:	3f 92       	push	r3
     87e:	4f 92       	push	r4
     880:	5f 92       	push	r5
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	df 93       	push	r29
     89c:	cf 93       	push	r28
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	e2 97       	sbiw	r28, 0x32	; 50
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     8b0:	1b 82       	std	Y+3, r1	; 0x03
     8b2:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	88 87       	std	Y+8, r24	; 0x08
     8be:	99 87       	std	Y+9, r25	; 0x09
     8c0:	aa 87       	std	Y+10, r26	; 0x0a
     8c2:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     8c4:	80 e1       	ldi	r24, 0x10	; 16
     8c6:	fe 01       	movw	r30, r28
     8c8:	3c 96       	adiw	r30, 0x0c	; 12
     8ca:	df 01       	movw	r26, r30
     8cc:	98 2f       	mov	r25, r24
     8ce:	1d 92       	st	X+, r1
     8d0:	9a 95       	dec	r25
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <gc_execute_line+0x54>
  clear_vector(offset);
     8d4:	fe 01       	movw	r30, r28
     8d6:	7c 96       	adiw	r30, 0x1c	; 28
     8d8:	df 01       	movw	r26, r30
     8da:	1d 92       	st	X+, r1
     8dc:	8a 95       	dec	r24
     8de:	e9 f7       	brne	.-6      	; 0x8da <gc_execute_line+0x60>

  gc.status_code = GCSTATUS_OK;
     8e0:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     8e4:	f5 01       	movw	r30, r10
     8e6:	80 81       	ld	r24, Z
     8e8:	88 32       	cpi	r24, 0x28	; 40
     8ea:	41 f1       	breq	.+80     	; 0x93c <gc_execute_line+0xc2>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     8ec:	8f 32       	cpi	r24, 0x2F	; 47
     8ee:	29 f4       	brne	.+10     	; 0x8fa <gc_execute_line+0x80>
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	9b 81       	ldd	r25, Y+3	; 0x03
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	9b 83       	std	Y+3, r25	; 0x03
     8f8:	8a 83       	std	Y+2, r24	; 0x02
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     8fa:	d5 01       	movw	r26, r10
     8fc:	8c 91       	ld	r24, X
     8fe:	84 32       	cpi	r24, 0x24	; 36
     900:	99 f0       	breq	.+38     	; 0x928 <gc_execute_line+0xae>
     902:	77 24       	eor	r7, r7
     904:	1c a6       	std	Y+44, r1	; 0x2c
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     906:	14 e0       	ldi	r17, 0x04	; 4
     908:	21 2e       	mov	r2, r17
     90a:	31 2c       	mov	r3, r1
     90c:	2c 0e       	add	r2, r28
     90e:	3d 1e       	adc	r3, r29
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     910:	b3 e0       	ldi	r27, 0x03	; 3
     912:	9b 2e       	mov	r9, r27
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     914:	dd 24       	eor	r13, r13
     916:	d3 94       	inc	r13
			}

	       break;

      case 'G':
      switch(int_value) {
     918:	a2 e0       	ldi	r26, 0x02	; 2
     91a:	ca 2e       	mov	r12, r26
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	8f 2e       	mov	r8, r31
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     920:	44 24       	eor	r4, r4
     922:	4a 94       	dec	r4
     924:	54 2c       	mov	r5, r4
     926:	de c1       	rjmp	.+956    	; 0xce4 <gc_execute_line+0x46a>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	9b 83       	std	Y+3, r25	; 0x03
     92e:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     930:	f5 01       	movw	r30, r10
     932:	81 81       	ldd	r24, Z+1	; 0x01
     934:	88 23       	and	r24, r24
     936:	21 f4       	brne	.+8      	; 0x940 <gc_execute_line+0xc6>
     938:	0e 94 66 13 	call	0x26cc	; 0x26cc <settings_dump>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	b8 c3       	rjmp	.+1904   	; 0x10b0 <gc_execute_line+0x836>
    read_double(line, &char_counter, &p);
     940:	8e 01       	movw	r16, r28
     942:	0e 5f       	subi	r16, 0xFE	; 254
     944:	1f 4f       	sbci	r17, 0xFF	; 255
     946:	c5 01       	movw	r24, r10
     948:	b8 01       	movw	r22, r16
     94a:	ae 01       	movw	r20, r28
     94c:	48 5f       	subi	r20, 0xF8	; 248
     94e:	5f 4f       	sbci	r21, 0xFF	; 255
     950:	0e 94 8f 03 	call	0x71e	; 0x71e <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     954:	8a 81       	ldd	r24, Y+2	; 0x02
     956:	9b 81       	ldd	r25, Y+3	; 0x03
     958:	f5 01       	movw	r30, r10
     95a:	e8 0f       	add	r30, r24
     95c:	f9 1f       	adc	r31, r25
     95e:	20 81       	ld	r18, Z
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	9b 83       	std	Y+3, r25	; 0x03
     964:	8a 83       	std	Y+2, r24	; 0x02
     966:	2d 33       	cpi	r18, 0x3D	; 61
     968:	09 f0       	breq	.+2      	; 0x96c <gc_execute_line+0xf2>
     96a:	a1 c3       	rjmp	.+1858   	; 0x10ae <gc_execute_line+0x834>
    read_double(line, &char_counter, &value);
     96c:	c5 01       	movw	r24, r10
     96e:	b8 01       	movw	r22, r16
     970:	ae 01       	movw	r20, r28
     972:	4c 5f       	subi	r20, 0xFC	; 252
     974:	5f 4f       	sbci	r21, 0xFF	; 255
     976:	0e 94 8f 03 	call	0x71e	; 0x71e <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     97a:	ea 81       	ldd	r30, Y+2	; 0x02
     97c:	fb 81       	ldd	r31, Y+3	; 0x03
     97e:	ea 0d       	add	r30, r10
     980:	fb 1d       	adc	r31, r11
     982:	80 81       	ld	r24, Z
     984:	88 23       	and	r24, r24
     986:	09 f0       	breq	.+2      	; 0x98a <gc_execute_line+0x110>
     988:	92 c3       	rjmp	.+1828   	; 0x10ae <gc_execute_line+0x834>
    settings_store_setting(p, value);
     98a:	68 85       	ldd	r22, Y+8	; 0x08
     98c:	79 85       	ldd	r23, Y+9	; 0x09
     98e:	8a 85       	ldd	r24, Y+10	; 0x0a
     990:	9b 85       	ldd	r25, Y+11	; 0x0b
     992:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	4c 81       	ldd	r20, Y+4	; 0x04
     99c:	5d 81       	ldd	r21, Y+5	; 0x05
     99e:	6e 81       	ldd	r22, Y+6	; 0x06
     9a0:	7f 81       	ldd	r23, Y+7	; 0x07
     9a2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <settings_store_setting>
     9a6:	80 c3       	rjmp	.+1792   	; 0x10a8 <gc_execute_line+0x82e>
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     9a8:	6c 81       	ldd	r22, Y+4	; 0x04
     9aa:	7d 81       	ldd	r23, Y+5	; 0x05
     9ac:	8e 81       	ldd	r24, Y+6	; 0x06
     9ae:	9f 81       	ldd	r25, Y+7	; 0x07
     9b0:	0e 94 8e 20 	call	0x411c	; 0x411c <trunc>
     9b4:	7b 01       	movw	r14, r22
     9b6:	8c 01       	movw	r16, r24
     9b8:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
     9bc:	fb 01       	movw	r30, r22

    switch(letter) {
     9be:	29 81       	ldd	r18, Y+1	; 0x01
     9c0:	27 34       	cpi	r18, 0x47	; 71
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <gc_execute_line+0x14c>
     9c4:	84 c0       	rjmp	.+264    	; 0xace <gc_execute_line+0x254>
     9c6:	28 34       	cpi	r18, 0x48	; 72
     9c8:	20 f4       	brcc	.+8      	; 0x9d2 <gc_execute_line+0x158>
     9ca:	24 34       	cpi	r18, 0x44	; 68
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <gc_execute_line+0x156>
     9ce:	86 c1       	rjmp	.+780    	; 0xcdc <gc_execute_line+0x462>
     9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <gc_execute_line+0x166>
     9d2:	2d 34       	cpi	r18, 0x4D	; 77
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <gc_execute_line+0x15e>
     9d6:	20 c1       	rjmp	.+576    	; 0xc18 <gc_execute_line+0x39e>
     9d8:	24 35       	cpi	r18, 0x54	; 84
     9da:	09 f0       	breq	.+2      	; 0x9de <gc_execute_line+0x164>
     9dc:	7f c1       	rjmp	.+766    	; 0xcdc <gc_execute_line+0x462>
     9de:	78 c1       	rjmp	.+752    	; 0xcd0 <gc_execute_line+0x456>
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     9e0:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("dir_bits  = "));
     9e2:	85 ef       	ldi	r24, 0xF5	; 245
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
		  	printBinary( dir_bits );
     9ea:	60 91 9a 06 	lds	r22, 0x069A
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <printBinary>
	      	printPgmString(PSTR("\r\n"));
     9f8:	82 ef       	ldi	r24, 0xF2	; 242
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

			ch = PORTD;
     a00:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     a02:	88 ee       	ldi	r24, 0xE8	; 232
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
		  	printBinary( ch );
     a0a:	ff 24       	eor	r15, r15
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	c8 01       	movw	r24, r16
     a12:	b7 01       	movw	r22, r14
     a14:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <printBinary>
	      	printPgmString(PSTR("\r\n"));
     a18:	85 ee       	ldi	r24, 0xE5	; 229
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

			ch = PIND;
     a20:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     a22:	86 ed       	ldi	r24, 0xD6	; 214
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
		  	printBinary( ch );
     a2a:	ff 24       	eor	r15, r15
     a2c:	00 e0       	ldi	r16, 0x00	; 0
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	c8 01       	movw	r24, r16
     a32:	b7 01       	movw	r22, r14
     a34:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <printBinary>
	      	printPgmString(PSTR("\r\n"));
     a38:	83 ed       	ldi	r24, 0xD3	; 211
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     a40:	86 ec       	ldi	r24, 0xC6	; 198
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
			printInteger( is_head_down() );
     a48:	0e 94 0a 1c 	call	0x3814	; 0x3814 <is_head_down>
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	bc 01       	movw	r22, r24
     a54:	cd 01       	movw	r24, r26
     a56:	0e 94 ba 1a 	call	0x3574	; 0x3574 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     a5a:	83 ec       	ldi	r24, 0xC3	; 195
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     a62:	88 eb       	ldi	r24, 0xB8	; 184
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
			printInteger( is_rotated() );
     a6a:	0e 94 0d 1c 	call	0x381a	; 0x381a <is_rotated>
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	0e 94 ba 1a 	call	0x3574	; 0x3574 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     a7c:	85 eb       	ldi	r24, 0xB5	; 181
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     a84:	4b 9b       	sbis	0x09, 3	; 9
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <gc_execute_line+0x216>
		      	printPgmString(PSTR("XL1\r\n"));
     a88:	8f ea       	ldi	r24, 0xAF	; 175
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     a90:	4a 9b       	sbis	0x09, 2	; 9
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <gc_execute_line+0x222>
		      	printPgmString(PSTR("XL2\r\n"));
     a94:	89 ea       	ldi	r24, 0xA9	; 169
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     a9c:	48 9b       	sbis	0x09, 0	; 9
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <gc_execute_line+0x22e>
		      	printPgmString(PSTR("YL1\r\n"));
     aa0:	83 ea       	ldi	r24, 0xA3	; 163
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     aa8:	49 9b       	sbis	0x09, 1	; 9
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <gc_execute_line+0x23a>
		      	printPgmString(PSTR("YL2\r\n"));
     aac:	8d e9       	ldi	r24, 0x9D	; 157
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

			if( bit_is_set( XHM_PIN, X_HOME ) )
     ab4:	04 9b       	sbis	0x00, 4	; 0
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <gc_execute_line+0x246>
		      	printPgmString(PSTR("X_HOME\r\n"));
     ab8:	84 e9       	ldi	r24, 0x94	; 148
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     ac0:	90 9b       	sbis	0x12, 0	; 18
     ac2:	0c c1       	rjmp	.+536    	; 0xcdc <gc_execute_line+0x462>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     ac4:	8b e8       	ldi	r24, 0x8B	; 139
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
     acc:	07 c1       	rjmp	.+526    	; 0xcdc <gc_execute_line+0x462>
			}

	       break;

      case 'G':
      switch(int_value) {
     ace:	65 31       	cpi	r22, 0x15	; 21
     ad0:	71 05       	cpc	r23, r1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <gc_execute_line+0x25c>
     ad4:	89 c0       	rjmp	.+274    	; 0xbe8 <gc_execute_line+0x36e>
     ad6:	66 31       	cpi	r22, 0x16	; 22
     ad8:	71 05       	cpc	r23, r1
     ada:	84 f5       	brge	.+96     	; 0xb3c <gc_execute_line+0x2c2>
     adc:	64 30       	cpi	r22, 0x04	; 4
     ade:	71 05       	cpc	r23, r1
     ae0:	09 f4       	brne	.+2      	; 0xae4 <gc_execute_line+0x26a>
     ae2:	5b c0       	rjmp	.+182    	; 0xb9a <gc_execute_line+0x320>
     ae4:	65 30       	cpi	r22, 0x05	; 5
     ae6:	71 05       	cpc	r23, r1
     ae8:	a4 f4       	brge	.+40     	; 0xb12 <gc_execute_line+0x298>
     aea:	61 30       	cpi	r22, 0x01	; 1
     aec:	71 05       	cpc	r23, r1
     aee:	09 f4       	brne	.+2      	; 0xaf2 <gc_execute_line+0x278>
     af0:	5a c0       	rjmp	.+180    	; 0xba6 <gc_execute_line+0x32c>
     af2:	62 30       	cpi	r22, 0x02	; 2
     af4:	71 05       	cpc	r23, r1
     af6:	24 f4       	brge	.+8      	; 0xb00 <gc_execute_line+0x286>
     af8:	67 2b       	or	r22, r23
     afa:	09 f4       	brne	.+2      	; 0xafe <gc_execute_line+0x284>
     afc:	51 c0       	rjmp	.+162    	; 0xba0 <gc_execute_line+0x326>
     afe:	e5 c0       	rjmp	.+458    	; 0xcca <gc_execute_line+0x450>
     b00:	62 30       	cpi	r22, 0x02	; 2
     b02:	71 05       	cpc	r23, r1
     b04:	09 f4       	brne	.+2      	; 0xb08 <gc_execute_line+0x28e>
     b06:	52 c0       	rjmp	.+164    	; 0xbac <gc_execute_line+0x332>
     b08:	63 30       	cpi	r22, 0x03	; 3
     b0a:	71 05       	cpc	r23, r1
     b0c:	09 f0       	breq	.+2      	; 0xb10 <gc_execute_line+0x296>
     b0e:	dd c0       	rjmp	.+442    	; 0xcca <gc_execute_line+0x450>
     b10:	50 c0       	rjmp	.+160    	; 0xbb2 <gc_execute_line+0x338>
     b12:	62 31       	cpi	r22, 0x12	; 18
     b14:	71 05       	cpc	r23, r1
     b16:	09 f4       	brne	.+2      	; 0xb1a <gc_execute_line+0x2a0>
     b18:	56 c0       	rjmp	.+172    	; 0xbc6 <gc_execute_line+0x34c>
     b1a:	63 31       	cpi	r22, 0x13	; 19
     b1c:	71 05       	cpc	r23, r1
     b1e:	2c f4       	brge	.+10     	; 0xb2a <gc_execute_line+0x2b0>
     b20:	61 31       	cpi	r22, 0x11	; 17
     b22:	71 05       	cpc	r23, r1
     b24:	09 f0       	breq	.+2      	; 0xb28 <gc_execute_line+0x2ae>
     b26:	d1 c0       	rjmp	.+418    	; 0xcca <gc_execute_line+0x450>
     b28:	47 c0       	rjmp	.+142    	; 0xbb8 <gc_execute_line+0x33e>
     b2a:	63 31       	cpi	r22, 0x13	; 19
     b2c:	71 05       	cpc	r23, r1
     b2e:	09 f4       	brne	.+2      	; 0xb32 <gc_execute_line+0x2b8>
     b30:	51 c0       	rjmp	.+162    	; 0xbd4 <gc_execute_line+0x35a>
     b32:	64 31       	cpi	r22, 0x14	; 20
     b34:	71 05       	cpc	r23, r1
     b36:	09 f0       	breq	.+2      	; 0xb3a <gc_execute_line+0x2c0>
     b38:	c8 c0       	rjmp	.+400    	; 0xcca <gc_execute_line+0x450>
     b3a:	53 c0       	rjmp	.+166    	; 0xbe2 <gc_execute_line+0x368>
     b3c:	6a 35       	cpi	r22, 0x5A	; 90
     b3e:	71 05       	cpc	r23, r1
     b40:	09 f4       	brne	.+2      	; 0xb44 <gc_execute_line+0x2ca>
     b42:	5b c0       	rjmp	.+182    	; 0xbfa <gc_execute_line+0x380>
     b44:	6b 35       	cpi	r22, 0x5B	; 91
     b46:	71 05       	cpc	r23, r1
     b48:	a4 f4       	brge	.+40     	; 0xb72 <gc_execute_line+0x2f8>
     b4a:	6e 31       	cpi	r22, 0x1E	; 30
     b4c:	71 05       	cpc	r23, r1
     b4e:	11 f1       	breq	.+68     	; 0xb94 <gc_execute_line+0x31a>
     b50:	6f 31       	cpi	r22, 0x1F	; 31
     b52:	71 05       	cpc	r23, r1
     b54:	2c f4       	brge	.+10     	; 0xb60 <gc_execute_line+0x2e6>
     b56:	6c 31       	cpi	r22, 0x1C	; 28
     b58:	71 05       	cpc	r23, r1
     b5a:	09 f0       	breq	.+2      	; 0xb5e <gc_execute_line+0x2e4>
     b5c:	b6 c0       	rjmp	.+364    	; 0xcca <gc_execute_line+0x450>
     b5e:	1a c0       	rjmp	.+52     	; 0xb94 <gc_execute_line+0x31a>
     b60:	65 33       	cpi	r22, 0x35	; 53
     b62:	71 05       	cpc	r23, r1
     b64:	09 f4       	brne	.+2      	; 0xb68 <gc_execute_line+0x2ee>
     b66:	43 c0       	rjmp	.+134    	; 0xbee <gc_execute_line+0x374>
     b68:	60 35       	cpi	r22, 0x50	; 80
     b6a:	71 05       	cpc	r23, r1
     b6c:	09 f0       	breq	.+2      	; 0xb70 <gc_execute_line+0x2f6>
     b6e:	ad c0       	rjmp	.+346    	; 0xcca <gc_execute_line+0x450>
     b70:	41 c0       	rjmp	.+130    	; 0xbf4 <gc_execute_line+0x37a>
     b72:	6c 35       	cpi	r22, 0x5C	; 92
     b74:	71 05       	cpc	r23, r1
     b76:	09 f4       	brne	.+2      	; 0xb7a <gc_execute_line+0x300>
     b78:	46 c0       	rjmp	.+140    	; 0xc06 <gc_execute_line+0x38c>
     b7a:	6c 35       	cpi	r22, 0x5C	; 92
     b7c:	71 05       	cpc	r23, r1
     b7e:	0c f4       	brge	.+2      	; 0xb82 <gc_execute_line+0x308>
     b80:	3f c0       	rjmp	.+126    	; 0xc00 <gc_execute_line+0x386>
     b82:	6d 35       	cpi	r22, 0x5D	; 93
     b84:	71 05       	cpc	r23, r1
     b86:	09 f4       	brne	.+2      	; 0xb8a <gc_execute_line+0x310>
     b88:	41 c0       	rjmp	.+130    	; 0xc0c <gc_execute_line+0x392>
     b8a:	6e 35       	cpi	r22, 0x5E	; 94
     b8c:	71 05       	cpc	r23, r1
     b8e:	09 f0       	breq	.+2      	; 0xb92 <gc_execute_line+0x318>
     b90:	9c c0       	rjmp	.+312    	; 0xcca <gc_execute_line+0x450>
     b92:	3f c0       	rjmp	.+126    	; 0xc12 <gc_execute_line+0x398>
     b94:	f2 e0       	ldi	r31, 0x02	; 2
     b96:	fc a7       	std	Y+44, r31	; 0x2c
     b98:	a1 c0       	rjmp	.+322    	; 0xcdc <gc_execute_line+0x462>
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	8c a7       	std	Y+44, r24	; 0x2c
     b9e:	9e c0       	rjmp	.+316    	; 0xcdc <gc_execute_line+0x462>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     ba0:	10 92 01 02 	sts	0x0201, r1
     ba4:	9b c0       	rjmp	.+310    	; 0xcdc <gc_execute_line+0x462>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     ba6:	d0 92 01 02 	sts	0x0201, r13
     baa:	98 c0       	rjmp	.+304    	; 0xcdc <gc_execute_line+0x462>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     bac:	c0 92 01 02 	sts	0x0201, r12
     bb0:	95 c0       	rjmp	.+298    	; 0xcdc <gc_execute_line+0x462>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     bb2:	90 92 01 02 	sts	0x0201, r9
     bb6:	92 c0       	rjmp	.+292    	; 0xcdc <gc_execute_line+0x462>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     bb8:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     bbc:	d0 92 26 02 	sts	0x0226, r13
  gc.plane_axis_2 = axis_2;
     bc0:	c0 92 27 02 	sts	0x0227, r12
     bc4:	8b c0       	rjmp	.+278    	; 0xcdc <gc_execute_line+0x462>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     bc6:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     bca:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     bce:	d0 92 27 02 	sts	0x0227, r13
     bd2:	84 c0       	rjmp	.+264    	; 0xcdc <gc_execute_line+0x462>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     bd4:	d0 92 25 02 	sts	0x0225, r13
  gc.plane_axis_1 = axis_1;
     bd8:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     bdc:	10 92 27 02 	sts	0x0227, r1
     be0:	7d c0       	rjmp	.+250    	; 0xcdc <gc_execute_line+0x462>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     be2:	d0 92 03 02 	sts	0x0203, r13
     be6:	7a c0       	rjmp	.+244    	; 0xcdc <gc_execute_line+0x462>
        case 21: gc.inches_mode = FALSE; break;
     be8:	10 92 03 02 	sts	0x0203, r1
     bec:	77 c0       	rjmp	.+238    	; 0xcdc <gc_execute_line+0x462>
     bee:	77 24       	eor	r7, r7
     bf0:	73 94       	inc	r7
     bf2:	74 c0       	rjmp	.+232    	; 0xcdc <gc_execute_line+0x462>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     bf4:	80 92 01 02 	sts	0x0201, r8
     bf8:	71 c0       	rjmp	.+226    	; 0xcdc <gc_execute_line+0x462>
        case 90: gc.absolute_mode = TRUE; break;
     bfa:	d0 92 04 02 	sts	0x0204, r13
     bfe:	6e c0       	rjmp	.+220    	; 0xcdc <gc_execute_line+0x462>
        case 91: gc.absolute_mode = FALSE; break;
     c00:	10 92 04 02 	sts	0x0204, r1
     c04:	6b c0       	rjmp	.+214    	; 0xcdc <gc_execute_line+0x462>
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	9c a7       	std	Y+44, r25	; 0x2c
     c0a:	68 c0       	rjmp	.+208    	; 0xcdc <gc_execute_line+0x462>
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     c0c:	d0 92 02 02 	sts	0x0202, r13
     c10:	65 c0       	rjmp	.+202    	; 0xcdc <gc_execute_line+0x462>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     c12:	10 92 02 02 	sts	0x0202, r1
     c16:	62 c0       	rjmp	.+196    	; 0xcdc <gc_execute_line+0x462>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     c18:	6d 33       	cpi	r22, 0x3D	; 61
     c1a:	71 05       	cpc	r23, r1
     c1c:	08 f0       	brcs	.+2      	; 0xc20 <gc_execute_line+0x3a6>
     c1e:	55 c0       	rjmp	.+170    	; 0xcca <gc_execute_line+0x450>
     c20:	ee 58       	subi	r30, 0x8E	; 142
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	05 90       	lpm	r0, Z+
     c2a:	f4 91       	lpm	r31, Z+
     c2c:	e0 2d       	mov	r30, r0
     c2e:	19 94       	eijmp
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     c30:	d0 92 05 02 	sts	0x0205, r13
     c34:	53 c0       	rjmp	.+166    	; 0xcdc <gc_execute_line+0x462>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     c36:	c0 92 05 02 	sts	0x0205, r12
     c3a:	50 c0       	rjmp	.+160    	; 0xcdc <gc_execute_line+0x462>
        case 3: gc.spindle_direction = 1; break;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 07 02 	sts	0x0207, r25
     c44:	80 93 06 02 	sts	0x0206, r24
     c48:	49 c0       	rjmp	.+146    	; 0xcdc <gc_execute_line+0x462>
        case 4: gc.spindle_direction = -1; break;
     c4a:	50 92 07 02 	sts	0x0207, r5
     c4e:	40 92 06 02 	sts	0x0206, r4
     c52:	44 c0       	rjmp	.+136    	; 0xcdc <gc_execute_line+0x462>
        case 5: gc.spindle_direction = 0; break;
     c54:	10 92 07 02 	sts	0x0207, r1
     c58:	10 92 06 02 	sts	0x0206, r1
     c5c:	3f c0       	rjmp	.+126    	; 0xcdc <gc_execute_line+0x462>
        case 8: gc.coolant_flood = 1; break;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	90 93 09 02 	sts	0x0209, r25
     c66:	80 93 08 02 	sts	0x0208, r24
     c6a:	38 c0       	rjmp	.+112    	; 0xcdc <gc_execute_line+0x462>
        case 9: gc.coolant_flood = 0; break;
     c6c:	10 92 09 02 	sts	0x0209, r1
     c70:	10 92 08 02 	sts	0x0208, r1
     c74:	33 c0       	rjmp	.+102    	; 0xcdc <gc_execute_line+0x462>
	// head control
        case 10: head_down(1);break;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <gc_execute_line+0x406>
        case 11: head_down(0);break;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 12 1c 	call	0x3824	; 0x3824 <head_down>
     c84:	2b c0       	rjmp	.+86     	; 0xcdc <gc_execute_line+0x462>
	// atc
		case 12: atc_change(0);break;
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	11 c0       	rjmp	.+34     	; 0xcae <gc_execute_line+0x434>
		case 13: atc_change(1);break;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e c0       	rjmp	.+28     	; 0xcae <gc_execute_line+0x434>
		case 14: atc_change(2);break;
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0b c0       	rjmp	.+22     	; 0xcae <gc_execute_line+0x434>
		case 15: atc_change(3);break;
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	08 c0       	rjmp	.+16     	; 0xcae <gc_execute_line+0x434>
		case 16: atc_change(4);break;
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <gc_execute_line+0x434>
		case 17: atc_change(5);break;
     ca4:	85 e0       	ldi	r24, 0x05	; 5
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <gc_execute_line+0x434>
		case 18: atc_change(6);break;
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 33 1b 	call	0x3666	; 0x3666 <atc_change>
     cb2:	14 c0       	rjmp	.+40     	; 0xcdc <gc_execute_line+0x462>
// vacuum
		case 19: vacuum(1);break;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <gc_execute_line+0x444>
		case 20: vacuum(0);break;
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 ab 1c 	call	0x3956	; 0x3956 <vacuum>
     cc2:	0c c0       	rjmp	.+24     	; 0xcdc <gc_execute_line+0x462>
// tape knock
		case 21: tape_knock();break;
     cc4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <tape_knock>
     cc8:	09 c0       	rjmp	.+18     	; 0xcdc <gc_execute_line+0x462>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     cca:	90 92 00 02 	sts	0x0200, r9
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <gc_execute_line+0x462>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     cd0:	c8 01       	movw	r24, r16
     cd2:	b7 01       	movw	r22, r14
     cd4:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__fixunssfsi>
     cd8:	60 93 22 02 	sts	0x0222, r22
    }
    if(gc.status_code) { break; }
     cdc:	80 91 00 02 	lds	r24, 0x0200
     ce0:	88 23       	and	r24, r24
     ce2:	61 f4       	brne	.+24     	; 0xcfc <gc_execute_line+0x482>
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	b1 01       	movw	r22, r2
     cea:	a5 01       	movw	r20, r10
     cec:	9e 01       	movw	r18, r28
     cee:	2e 5f       	subi	r18, 0xFE	; 254
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <next_statement>
     cf6:	89 2b       	or	r24, r25
     cf8:	09 f0       	breq	.+2      	; 0xcfc <gc_execute_line+0x482>
     cfa:	56 ce       	rjmp	.-852    	; 0x9a8 <gc_execute_line+0x12e>
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     cfc:	80 91 00 02 	lds	r24, 0x0200
     d00:	88 23       	and	r24, r24
     d02:	09 f0       	breq	.+2      	; 0xd06 <gc_execute_line+0x48c>
     d04:	d5 c1       	rjmp	.+938    	; 0x10b0 <gc_execute_line+0x836>

  char_counter = 0;
     d06:	1b 82       	std	Y+3, r1	; 0x03
     d08:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
     d0a:	80 e1       	ldi	r24, 0x10	; 16
     d0c:	fe 01       	movw	r30, r28
     d0e:	7c 96       	adiw	r30, 0x1c	; 28
     d10:	df 01       	movw	r26, r30
     d12:	1d 92       	st	X+, r1
     d14:	8a 95       	dec	r24
     d16:	e9 f7       	brne	.-6      	; 0xd12 <gc_execute_line+0x498>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     d18:	de 01       	movw	r26, r28
     d1a:	1c 96       	adiw	r26, 0x0c	; 12
     d1c:	e2 e1       	ldi	r30, 0x12	; 18
     d1e:	f2 e0       	ldi	r31, 0x02	; 2
     d20:	80 e1       	ldi	r24, 0x10	; 16
     d22:	01 90       	ld	r0, Z+
     d24:	0d 92       	st	X+, r0
     d26:	81 50       	subi	r24, 0x01	; 1
     d28:	e1 f7       	brne	.-8      	; 0xd22 <gc_execute_line+0x4a8>
     d2a:	1d a6       	std	Y+45, r1	; 0x2d
     d2c:	1e a6       	std	Y+46, r1	; 0x2e
     d2e:	b0 e8       	ldi	r27, 0x80	; 128
     d30:	bf a7       	std	Y+47, r27	; 0x2f
     d32:	ef eb       	ldi	r30, 0xBF	; 191
     d34:	e8 ab       	std	Y+48, r30	; 0x30

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     d36:	e4 e0       	ldi	r30, 0x04	; 4
     d38:	2e 2e       	mov	r2, r30
     d3a:	31 2c       	mov	r3, r1
     d3c:	2c 0e       	add	r2, r28
     d3e:	3d 1e       	adc	r3, r29
     d40:	72 e0       	ldi	r23, 0x02	; 2
     d42:	47 2e       	mov	r4, r23
     d44:	51 2c       	mov	r5, r1
     d46:	4c 0e       	add	r4, r28
     d48:	5d 1e       	adc	r5, r29
     d4a:	4e 01       	movw	r8, r28
     d4c:	08 94       	sec
     d4e:	81 1c       	adc	r8, r1
     d50:	91 1c       	adc	r9, r1
     d52:	bf c0       	rjmp	.+382    	; 0xed2 <gc_execute_line+0x658>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     d54:	cc 80       	ldd	r12, Y+4	; 0x04
     d56:	dd 80       	ldd	r13, Y+5	; 0x05
     d58:	ee 80       	ldd	r14, Y+6	; 0x06
     d5a:	ff 80       	ldd	r15, Y+7	; 0x07
  gc.absolute_mode = TRUE;
}
extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     d5c:	80 91 03 02 	lds	r24, 0x0203
     d60:	88 23       	and	r24, r24
     d62:	19 f4       	brne	.+6      	; 0xd6a <gc_execute_line+0x4f0>
     d64:	a7 01       	movw	r20, r14
     d66:	96 01       	movw	r18, r12
     d68:	0a c0       	rjmp	.+20     	; 0xd7e <gc_execute_line+0x504>
     d6a:	c7 01       	movw	r24, r14
     d6c:	b6 01       	movw	r22, r12
     d6e:	23 e3       	ldi	r18, 0x33	; 51
     d70:	33 e3       	ldi	r19, 0x33	; 51
     d72:	4b ec       	ldi	r20, 0xCB	; 203
     d74:	51 e4       	ldi	r21, 0x41	; 65
     d76:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
     d7a:	9b 01       	movw	r18, r22
     d7c:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     d7e:	09 81       	ldd	r16, Y+1	; 0x01
     d80:	0c 34       	cpi	r16, 0x4C	; 76
     d82:	50 f4       	brcc	.+20     	; 0xd98 <gc_execute_line+0x51e>
     d84:	09 34       	cpi	r16, 0x49	; 73
     d86:	08 f0       	brcs	.+2      	; 0xd8a <gc_execute_line+0x510>
     d88:	45 c0       	rjmp	.+138    	; 0xe14 <gc_execute_line+0x59a>
     d8a:	03 34       	cpi	r16, 0x43	; 67
     d8c:	09 f4       	brne	.+2      	; 0xd90 <gc_execute_line+0x516>
     d8e:	8c c0       	rjmp	.+280    	; 0xea8 <gc_execute_line+0x62e>
     d90:	06 34       	cpi	r16, 0x46	; 70
     d92:	09 f0       	breq	.+2      	; 0xd96 <gc_execute_line+0x51c>
     d94:	9e c0       	rjmp	.+316    	; 0xed2 <gc_execute_line+0x658>
     d96:	0f c0       	rjmp	.+30     	; 0xdb6 <gc_execute_line+0x53c>
     d98:	03 35       	cpi	r16, 0x53	; 83
     d9a:	09 f4       	brne	.+2      	; 0xd9e <gc_execute_line+0x524>
     d9c:	4f c0       	rjmp	.+158    	; 0xe3c <gc_execute_line+0x5c2>
     d9e:	04 35       	cpi	r16, 0x54	; 84
     da0:	20 f4       	brcc	.+8      	; 0xdaa <gc_execute_line+0x530>
     da2:	00 35       	cpi	r16, 0x50	; 80
     da4:	09 f0       	breq	.+2      	; 0xda8 <gc_execute_line+0x52e>
     da6:	95 c0       	rjmp	.+298    	; 0xed2 <gc_execute_line+0x658>
     da8:	44 c0       	rjmp	.+136    	; 0xe32 <gc_execute_line+0x5b8>
     daa:	80 2f       	mov	r24, r16
     dac:	88 55       	subi	r24, 0x58	; 88
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <gc_execute_line+0x53a>
     db2:	8f c0       	rjmp	.+286    	; 0xed2 <gc_execute_line+0x658>
     db4:	4c c0       	rjmp	.+152    	; 0xe4e <gc_execute_line+0x5d4>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     db6:	80 91 02 02 	lds	r24, 0x0202
     dba:	88 23       	and	r24, r24
     dbc:	29 f0       	breq	.+10     	; 0xdc8 <gc_execute_line+0x54e>
     dbe:	2d a7       	std	Y+45, r18	; 0x2d
     dc0:	3e a7       	std	Y+46, r19	; 0x2e
     dc2:	4f a7       	std	Y+47, r20	; 0x2f
     dc4:	58 ab       	std	Y+48, r21	; 0x30
     dc6:	85 c0       	rjmp	.+266    	; 0xed2 <gc_execute_line+0x658>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     dc8:	80 91 01 02 	lds	r24, 0x0201
     dcc:	88 23       	and	r24, r24
     dce:	89 f4       	brne	.+34     	; 0xdf2 <gc_execute_line+0x578>
          gc.seek_rate = unit_converted_value/60;
     dd0:	ca 01       	movw	r24, r20
     dd2:	b9 01       	movw	r22, r18
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e7       	ldi	r20, 0x70	; 112
     dda:	52 e4       	ldi	r21, 0x42	; 66
     ddc:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
     de0:	60 93 0e 02 	sts	0x020E, r22
     de4:	70 93 0f 02 	sts	0x020F, r23
     de8:	80 93 10 02 	sts	0x0210, r24
     dec:	90 93 11 02 	sts	0x0211, r25
     df0:	70 c0       	rjmp	.+224    	; 0xed2 <gc_execute_line+0x658>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
     df2:	ca 01       	movw	r24, r20
     df4:	b9 01       	movw	r22, r18
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e7       	ldi	r20, 0x70	; 112
     dfc:	52 e4       	ldi	r21, 0x42	; 66
     dfe:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
     e02:	60 93 0a 02 	sts	0x020A, r22
     e06:	70 93 0b 02 	sts	0x020B, r23
     e0a:	80 93 0c 02 	sts	0x020C, r24
     e0e:	90 93 0d 02 	sts	0x020D, r25
     e12:	5f c0       	rjmp	.+190    	; 0xed2 <gc_execute_line+0x658>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     e14:	e0 2f       	mov	r30, r16
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	e9 54       	subi	r30, 0x49	; 73
     e1a:	f0 40       	sbci	r31, 0x00	; 0
     e1c:	ee 0f       	add	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	e8 0d       	add	r30, r8
     e26:	f9 1d       	adc	r31, r9
     e28:	23 8f       	std	Z+27, r18	; 0x1b
     e2a:	34 8f       	std	Z+28, r19	; 0x1c
     e2c:	45 8f       	std	Z+29, r20	; 0x1d
     e2e:	56 8f       	std	Z+30, r21	; 0x1e
     e30:	50 c0       	rjmp	.+160    	; 0xed2 <gc_execute_line+0x658>
      case 'P': p = value; break;
     e32:	c8 86       	std	Y+8, r12	; 0x08
     e34:	d9 86       	std	Y+9, r13	; 0x09
     e36:	ea 86       	std	Y+10, r14	; 0x0a
     e38:	fb 86       	std	Y+11, r15	; 0x0b
     e3a:	4b c0       	rjmp	.+150    	; 0xed2 <gc_execute_line+0x658>
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
     e3c:	c7 01       	movw	r24, r14
     e3e:	b6 01       	movw	r22, r12
     e40:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
     e44:	70 93 24 02 	sts	0x0224, r23
     e48:	60 93 23 02 	sts	0x0223, r22
     e4c:	42 c0       	rjmp	.+132    	; 0xed2 <gc_execute_line+0x658>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
     e4e:	80 91 04 02 	lds	r24, 0x0204
     e52:	88 23       	and	r24, r24
     e54:	11 f4       	brne	.+4      	; 0xe5a <gc_execute_line+0x5e0>
     e56:	77 20       	and	r7, r7
     e58:	79 f0       	breq	.+30     	; 0xe78 <gc_execute_line+0x5fe>
        target[letter - 'X'] = unit_converted_value;
     e5a:	e0 2f       	mov	r30, r16
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	e8 55       	subi	r30, 0x58	; 88
     e60:	f0 40       	sbci	r31, 0x00	; 0
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	e8 0d       	add	r30, r8
     e6c:	f9 1d       	adc	r31, r9
     e6e:	23 87       	std	Z+11, r18	; 0x0b
     e70:	34 87       	std	Z+12, r19	; 0x0c
     e72:	45 87       	std	Z+13, r20	; 0x0d
     e74:	56 87       	std	Z+14, r21	; 0x0e
     e76:	2d c0       	rjmp	.+90     	; 0xed2 <gc_execute_line+0x658>
      } else {
        target[letter - 'X'] += unit_converted_value;
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	08 55       	subi	r16, 0x58	; 88
     e7c:	10 40       	sbci	r17, 0x00	; 0
     e7e:	00 0f       	add	r16, r16
     e80:	11 1f       	adc	r17, r17
     e82:	00 0f       	add	r16, r16
     e84:	11 1f       	adc	r17, r17
     e86:	08 0d       	add	r16, r8
     e88:	19 1d       	adc	r17, r9
     e8a:	d8 01       	movw	r26, r16
     e8c:	1b 96       	adiw	r26, 0x0b	; 11
     e8e:	6d 91       	ld	r22, X+
     e90:	7d 91       	ld	r23, X+
     e92:	8d 91       	ld	r24, X+
     e94:	9c 91       	ld	r25, X
     e96:	1e 97       	sbiw	r26, 0x0e	; 14
     e98:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
     e9c:	f8 01       	movw	r30, r16
     e9e:	63 87       	std	Z+11, r22	; 0x0b
     ea0:	74 87       	std	Z+12, r23	; 0x0c
     ea2:	85 87       	std	Z+13, r24	; 0x0d
     ea4:	96 87       	std	Z+14, r25	; 0x0e
     ea6:	15 c0       	rjmp	.+42     	; 0xed2 <gc_execute_line+0x658>
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
     ea8:	80 91 04 02 	lds	r24, 0x0204
     eac:	88 23       	and	r24, r24
     eae:	11 f4       	brne	.+4      	; 0xeb4 <gc_execute_line+0x63a>
     eb0:	77 20       	and	r7, r7
     eb2:	29 f0       	breq	.+10     	; 0xebe <gc_execute_line+0x644>
		target[C_AXIS] = unit_converted_value;
     eb4:	28 8f       	std	Y+24, r18	; 0x18
     eb6:	39 8f       	std	Y+25, r19	; 0x19
     eb8:	4a 8f       	std	Y+26, r20	; 0x1a
     eba:	5b 8f       	std	Y+27, r21	; 0x1b
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <gc_execute_line+0x658>
      } else {
        target[C_AXIS] += unit_converted_value;
     ebe:	68 8d       	ldd	r22, Y+24	; 0x18
     ec0:	79 8d       	ldd	r23, Y+25	; 0x19
     ec2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ec4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ec6:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
     eca:	68 8f       	std	Y+24, r22	; 0x18
     ecc:	79 8f       	std	Y+25, r23	; 0x19
     ece:	8a 8f       	std	Y+26, r24	; 0x1a
     ed0:	9b 8f       	std	Y+27, r25	; 0x1b
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     ed2:	c4 01       	movw	r24, r8
     ed4:	b1 01       	movw	r22, r2
     ed6:	a5 01       	movw	r20, r10
     ed8:	92 01       	movw	r18, r4
     eda:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <next_statement>
     ede:	89 2b       	or	r24, r25
     ee0:	09 f0       	breq	.+2      	; 0xee4 <gc_execute_line+0x66a>
     ee2:	38 cf       	rjmp	.-400    	; 0xd54 <gc_execute_line+0x4da>
      break;      
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     ee4:	80 91 00 02 	lds	r24, 0x0200
     ee8:	88 23       	and	r24, r24
     eea:	09 f0       	breq	.+2      	; 0xeee <gc_execute_line+0x674>
     eec:	e1 c0       	rjmp	.+450    	; 0x10b0 <gc_execute_line+0x836>
    
  // Update spindle state
  if (gc.spindle_direction) {
     eee:	80 91 06 02 	lds	r24, 0x0206
     ef2:	90 91 07 02 	lds	r25, 0x0207
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	59 f0       	breq	.+22     	; 0xf10 <gc_execute_line+0x696>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
     efa:	40 91 23 02 	lds	r20, 0x0223
     efe:	50 91 24 02 	lds	r21, 0x0224
     f02:	66 27       	eor	r22, r22
     f04:	57 fd       	sbrc	r21, 7
     f06:	60 95       	com	r22
     f08:	76 2f       	mov	r23, r22
     f0a:	0e 94 55 14 	call	0x28aa	; 0x28aa <spindle_run>
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <gc_execute_line+0x69a>
  } else {
    spindle_stop();
     f10:	0e 94 60 14 	call	0x28c0	; 0x28c0 <spindle_stop>
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
     f14:	80 91 08 02 	lds	r24, 0x0208
     f18:	90 91 09 02 	lds	r25, 0x0209
     f1c:	89 2b       	or	r24, r25
     f1e:	19 f0       	breq	.+6      	; 0xf26 <gc_execute_line+0x6ac>
  	coolant_flood(TRUE);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <gc_execute_line+0x6b0>
  }
  else {
  	coolant_flood(FALSE);
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 de 02 	call	0x5bc	; 0x5bc <coolant_flood>
  }
  
  // Perform any physical actions
  switch (next_action) {
     f2e:	fc a5       	ldd	r31, Y+44	; 0x2c
     f30:	f1 30       	cpi	r31, 0x01	; 1
     f32:	91 f0       	breq	.+36     	; 0xf58 <gc_execute_line+0x6de>
     f34:	f1 30       	cpi	r31, 0x01	; 1
     f36:	f8 f0       	brcs	.+62     	; 0xf76 <gc_execute_line+0x6fc>
     f38:	f2 30       	cpi	r31, 0x02	; 2
     f3a:	21 f0       	breq	.+8      	; 0xf44 <gc_execute_line+0x6ca>
     f3c:	f3 30       	cpi	r31, 0x03	; 3
     f3e:	09 f0       	breq	.+2      	; 0xf42 <gc_execute_line+0x6c8>
     f40:	aa c0       	rjmp	.+340    	; 0x1096 <gc_execute_line+0x81c>
     f42:	97 c0       	rjmp	.+302    	; 0x1072 <gc_execute_line+0x7f8>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
     f44:	0e 94 d6 08 	call	0x11ac	; 0x11ac <mc_go_home>
     f48:	80 e1       	ldi	r24, 0x10	; 16
     f4a:	fe 01       	movw	r30, r28
     f4c:	3c 96       	adiw	r30, 0x0c	; 12
     f4e:	df 01       	movw	r26, r30
     f50:	1d 92       	st	X+, r1
     f52:	8a 95       	dec	r24
     f54:	e9 f7       	brne	.-6      	; 0xf50 <gc_execute_line+0x6d6>
     f56:	9f c0       	rjmp	.+318    	; 0x1096 <gc_execute_line+0x81c>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
     f58:	68 85       	ldd	r22, Y+8	; 0x08
     f5a:	79 85       	ldd	r23, Y+9	; 0x09
     f5c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	4a e7       	ldi	r20, 0x7A	; 122
     f66:	54 e4       	ldi	r21, 0x44	; 68
     f68:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
     f6c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__fixunssfsi>
     f70:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <mc_dwell>
     f74:	90 c0       	rjmp	.+288    	; 0x1096 <gc_execute_line+0x81c>
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     f76:	80 91 01 02 	lds	r24, 0x0201
     f7a:	88 23       	and	r24, r24
     f7c:	21 f0       	breq	.+8      	; 0xf86 <gc_execute_line+0x70c>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	09 f0       	breq	.+2      	; 0xf84 <gc_execute_line+0x70a>
     f82:	89 c0       	rjmp	.+274    	; 0x1096 <gc_execute_line+0x81c>
     f84:	2d c0       	rjmp	.+90     	; 0xfe0 <gc_execute_line+0x766>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
     f86:	00 d0       	rcall	.+0      	; 0xf88 <gc_execute_line+0x70e>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <gc_execute_line+0x710>
     f8a:	6c 85       	ldd	r22, Y+12	; 0x0c
     f8c:	7d 85       	ldd	r23, Y+13	; 0x0d
     f8e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f90:	9f 85       	ldd	r25, Y+15	; 0x0f
     f92:	28 89       	ldd	r18, Y+16	; 0x10
     f94:	39 89       	ldd	r19, Y+17	; 0x11
     f96:	4a 89       	ldd	r20, Y+18	; 0x12
     f98:	5b 89       	ldd	r21, Y+19	; 0x13
     f9a:	ec 88       	ldd	r14, Y+20	; 0x14
     f9c:	fd 88       	ldd	r15, Y+21	; 0x15
     f9e:	0e 89       	ldd	r16, Y+22	; 0x16
     fa0:	1f 89       	ldd	r17, Y+23	; 0x17
     fa2:	a8 8c       	ldd	r10, Y+24	; 0x18
     fa4:	b9 8c       	ldd	r11, Y+25	; 0x19
     fa6:	ca 8c       	ldd	r12, Y+26	; 0x1a
     fa8:	db 8c       	ldd	r13, Y+27	; 0x1b
     faa:	60 90 0e 02 	lds	r6, 0x020E
     fae:	70 90 0f 02 	lds	r7, 0x020F
     fb2:	80 90 10 02 	lds	r8, 0x0210
     fb6:	90 90 11 02 	lds	r9, 0x0211
     fba:	ed b7       	in	r30, 0x3d	; 61
     fbc:	fe b7       	in	r31, 0x3e	; 62
     fbe:	61 82       	std	Z+1, r6	; 0x01
     fc0:	72 82       	std	Z+2, r7	; 0x02
     fc2:	83 82       	std	Z+3, r8	; 0x03
     fc4:	94 82       	std	Z+4, r9	; 0x04
     fc6:	16 82       	std	Z+6, r1	; 0x06
     fc8:	15 82       	std	Z+5, r1	; 0x05
     fca:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <plan_buffer_line>
     fce:	8d b7       	in	r24, 0x3d	; 61
     fd0:	9e b7       	in	r25, 0x3e	; 62
     fd2:	06 96       	adiw	r24, 0x06	; 6
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	9e bf       	out	0x3e, r25	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	8d bf       	out	0x3d, r24	; 61
     fde:	5b c0       	rjmp	.+182    	; 0x1096 <gc_execute_line+0x81c>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
     fe0:	2c 84       	ldd	r2, Y+12	; 0x0c
     fe2:	3d 84       	ldd	r3, Y+13	; 0x0d
     fe4:	4e 84       	ldd	r4, Y+14	; 0x0e
     fe6:	5f 84       	ldd	r5, Y+15	; 0x0f
     fe8:	68 88       	ldd	r6, Y+16	; 0x10
     fea:	79 88       	ldd	r7, Y+17	; 0x11
     fec:	8a 88       	ldd	r8, Y+18	; 0x12
     fee:	9b 88       	ldd	r9, Y+19	; 0x13
     ff0:	ec 88       	ldd	r14, Y+20	; 0x14
     ff2:	fd 88       	ldd	r15, Y+21	; 0x15
     ff4:	0e 89       	ldd	r16, Y+22	; 0x16
     ff6:	1f 89       	ldd	r17, Y+23	; 0x17
     ff8:	a8 8c       	ldd	r10, Y+24	; 0x18
     ffa:	b9 8c       	ldd	r11, Y+25	; 0x19
     ffc:	ca 8c       	ldd	r12, Y+26	; 0x1a
     ffe:	db 8c       	ldd	r13, Y+27	; 0x1b
    1000:	60 91 02 02 	lds	r22, 0x0202
    1004:	66 23       	and	r22, r22
    1006:	61 f4       	brne	.+24     	; 0x1020 <gc_execute_line+0x7a6>
    1008:	90 91 0a 02 	lds	r25, 0x020A
    100c:	9d a7       	std	Y+45, r25	; 0x2d
    100e:	a0 91 0b 02 	lds	r26, 0x020B
    1012:	ae a7       	std	Y+46, r26	; 0x2e
    1014:	b0 91 0c 02 	lds	r27, 0x020C
    1018:	bf a7       	std	Y+47, r27	; 0x2f
    101a:	e0 91 0d 02 	lds	r30, 0x020D
    101e:	e8 ab       	std	Y+48, r30	; 0x30
    1020:	00 d0       	rcall	.+0      	; 0x1022 <gc_execute_line+0x7a8>
    1022:	00 d0       	rcall	.+0      	; 0x1024 <gc_execute_line+0x7aa>
    1024:	8d b7       	in	r24, 0x3d	; 61
    1026:	9e b7       	in	r25, 0x3e	; 62
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	9a ab       	std	Y+50, r25	; 0x32
    102c:	89 ab       	std	Y+49, r24	; 0x31
    102e:	2d a5       	ldd	r18, Y+45	; 0x2d
    1030:	3e a5       	ldd	r19, Y+46	; 0x2e
    1032:	4f a5       	ldd	r20, Y+47	; 0x2f
    1034:	58 a9       	ldd	r21, Y+48	; 0x30
    1036:	c9 01       	movw	r24, r18
    1038:	da 01       	movw	r26, r20
    103a:	ed b7       	in	r30, 0x3d	; 61
    103c:	fe b7       	in	r31, 0x3e	; 62
    103e:	81 83       	std	Z+1, r24	; 0x01
    1040:	92 83       	std	Z+2, r25	; 0x02
    1042:	a3 83       	std	Z+3, r26	; 0x03
    1044:	b4 83       	std	Z+4, r27	; 0x04
    1046:	a9 a9       	ldd	r26, Y+49	; 0x31
    1048:	ba a9       	ldd	r27, Y+50	; 0x32
    104a:	14 96       	adiw	r26, 0x04	; 4
    104c:	6c 93       	st	X, r22
    104e:	14 97       	sbiw	r26, 0x04	; 4
    1050:	15 96       	adiw	r26, 0x05	; 5
    1052:	1c 92       	st	X, r1
    1054:	c2 01       	movw	r24, r4
    1056:	b1 01       	movw	r22, r2
    1058:	a4 01       	movw	r20, r8
    105a:	93 01       	movw	r18, r6
    105c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <plan_buffer_line>
    1060:	ed b7       	in	r30, 0x3d	; 61
    1062:	fe b7       	in	r31, 0x3e	; 62
    1064:	36 96       	adiw	r30, 0x06	; 6
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	fe bf       	out	0x3e, r31	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	ed bf       	out	0x3d, r30	; 61
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <gc_execute_line+0x81c>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1072:	6c 85       	ldd	r22, Y+12	; 0x0c
    1074:	7d 85       	ldd	r23, Y+13	; 0x0d
    1076:	8e 85       	ldd	r24, Y+14	; 0x0e
    1078:	9f 85       	ldd	r25, Y+15	; 0x0f
    107a:	28 89       	ldd	r18, Y+16	; 0x10
    107c:	39 89       	ldd	r19, Y+17	; 0x11
    107e:	4a 89       	ldd	r20, Y+18	; 0x12
    1080:	5b 89       	ldd	r21, Y+19	; 0x13
    1082:	ec 88       	ldd	r14, Y+20	; 0x14
    1084:	fd 88       	ldd	r15, Y+21	; 0x15
    1086:	0e 89       	ldd	r16, Y+22	; 0x16
    1088:	1f 89       	ldd	r17, Y+23	; 0x17
    108a:	a8 8c       	ldd	r10, Y+24	; 0x18
    108c:	b9 8c       	ldd	r11, Y+25	; 0x19
    108e:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1090:	db 8c       	ldd	r13, Y+27	; 0x1b
    1092:	0e 94 3b 0a 	call	0x1476	; 0x1476 <plan_set_current>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    1096:	a2 e1       	ldi	r26, 0x12	; 18
    1098:	b2 e0       	ldi	r27, 0x02	; 2
    109a:	fe 01       	movw	r30, r28
    109c:	3c 96       	adiw	r30, 0x0c	; 12
    109e:	80 e1       	ldi	r24, 0x10	; 16
    10a0:	01 90       	ld	r0, Z+
    10a2:	0d 92       	st	X+, r0
    10a4:	81 50       	subi	r24, 0x01	; 1
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <gc_execute_line+0x826>

  return(gc.status_code);
    10a8:	80 91 00 02 	lds	r24, 0x0200
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <gc_execute_line+0x836>
    10ae:	83 e0       	ldi	r24, 0x03	; 3
}
    10b0:	e2 96       	adiw	r28, 0x32	; 50
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	9f 90       	pop	r9
    10d2:	8f 90       	pop	r8
    10d4:	7f 90       	pop	r7
    10d6:	6f 90       	pop	r6
    10d8:	5f 90       	pop	r5
    10da:	4f 90       	pop	r4
    10dc:	3f 90       	pop	r3
    10de:	2f 90       	pop	r2
    10e0:	08 95       	ret

000010e2 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	79 01       	movw	r14, r18
    10f4:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    10f6:	5f 77       	andi	r21, 0x7F	; 127
    10f8:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    10fc:	0e 94 56 1d 	call	0x3aac	; 0x3aac <atan>
    1100:	5b 01       	movw	r10, r22
    1102:	6c 01       	movw	r12, r24
  if (y>0) {
    1104:	c8 01       	movw	r24, r16
    1106:	b7 01       	movw	r22, r14
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__gesf2>
    1114:	18 16       	cp	r1, r24
    1116:	cc f0       	brlt	.+50     	; 0x114a <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
    1118:	c6 01       	movw	r24, r12
    111a:	b5 01       	movw	r22, r10
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__gesf2>
    1128:	18 16       	cp	r1, r24
    112a:	2c f4       	brge	.+10     	; 0x1136 <theta+0x54>
    {
      return(M_PI-theta);
    112c:	6b ed       	ldi	r22, 0xDB	; 219
    112e:	7f e0       	ldi	r23, 0x0F	; 15
    1130:	89 e4       	ldi	r24, 0x49	; 73
    1132:	90 e4       	ldi	r25, 0x40	; 64
    1134:	04 c0       	rjmp	.+8      	; 0x113e <theta+0x5c>
    } else {
      return(-M_PI-theta);
    1136:	6b ed       	ldi	r22, 0xDB	; 219
    1138:	7f e0       	ldi	r23, 0x0F	; 15
    113a:	89 e4       	ldi	r24, 0x49	; 73
    113c:	90 ec       	ldi	r25, 0xC0	; 192
    113e:	a6 01       	movw	r20, r12
    1140:	95 01       	movw	r18, r10
    1142:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__subsf3>
    1146:	5b 01       	movw	r10, r22
    1148:	6c 01       	movw	r12, r24
    }
  }
}
    114a:	b5 01       	movw	r22, r10
    114c:	c6 01       	movw	r24, r12
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	08 95       	ret

00001160 <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  sp_init();        
    1160:	0e 94 28 12 	call	0x2450	; 0x2450 <sp_init>
  settings_init();  
    1164:	0e 94 3a 14 	call	0x2874	; 0x2874 <settings_init>
  plan_init();      
    1168:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <plan_init>
  st_init();        
    116c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <st_init>
  limits_init();
    1170:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <limits_init>
  spindle_init();   
    1174:	0e 94 4e 14 	call	0x289c	; 0x289c <spindle_init>
  coolant_init();
    1178:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <coolant_init>
  atc_init();
    117c:	0e 94 1e 1b 	call	0x363c	; 0x363c <atc_init>
  head_init();
    1180:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <head_init>
  vacuum_init();
    1184:	0e 94 9e 1c 	call	0x393c	; 0x393c <vacuum_init>
  panel_init();
    1188:	0e 94 3e 1c 	call	0x387c	; 0x387c <panel_init>
  gc_init();
    118c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    1198:	83 b7       	in	r24, 0x33	; 51
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	83 bf       	out	0x33, r24	; 51
    119e:	88 95       	sleep
    11a0:	83 b7       	in	r24, 0x33	; 51
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
    11a6:	0e 94 bb 11 	call	0x2376	; 0x2376 <sp_process>
    11aa:	f6 cf       	rjmp	.-20     	; 0x1198 <main+0x38>

000011ac <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    11ac:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <st_go_home>
}
    11b0:	08 95       	ret

000011b2 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	7b 01       	movw	r14, r22
    11c4:	8c 01       	movw	r16, r24
  st_synchronize();
    11c6:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <st_synchronize>
  _delay_ms(milliseconds);
    11ca:	c8 01       	movw	r24, r16
    11cc:	b7 01       	movw	r22, r14
    11ce:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__floatunsisf>
    11d2:	5b 01       	movw	r10, r22
    11d4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4a e7       	ldi	r20, 0x7A	; 122
    11dc:	55 e4       	ldi	r21, 0x45	; 69
    11de:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    11e2:	7b 01       	movw	r14, r22
    11e4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e8       	ldi	r20, 0x80	; 128
    11ec:	5f e3       	ldi	r21, 0x3F	; 63
    11ee:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__cmpsf2>
    11f2:	88 23       	and	r24, r24
    11f4:	1c f4       	brge	.+6      	; 0x11fc <mc_dwell+0x4a>
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	24 c0       	rjmp	.+72     	; 0x1244 <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    11fc:	c8 01       	movw	r24, r16
    11fe:	b7 01       	movw	r22, r14
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__gesf2>
    120c:	18 16       	cp	r1, r24
    120e:	b4 f4       	brge	.+44     	; 0x123c <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	c6 01       	movw	r24, r12
    1212:	b5 01       	movw	r22, r10
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1220:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1224:	80 e9       	ldi	r24, 0x90	; 144
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <mc_dwell+0x82>
    122a:	fc 01       	movw	r30, r24
    122c:	31 97       	sbiw	r30, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1230:	61 50       	subi	r22, 0x01	; 1
    1232:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1234:	61 15       	cp	r22, r1
    1236:	71 05       	cpc	r23, r1
    1238:	c1 f7       	brne	.-16     	; 0x122a <mc_dwell+0x78>
    123a:	07 c0       	rjmp	.+14     	; 0x124a <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123c:	c8 01       	movw	r24, r16
    123e:	b7 01       	movw	r22, r14
    1240:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__fixunssfsi>
    1244:	cb 01       	movw	r24, r22
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <mc_dwell+0x94>
}
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	08 95       	ret

0000125c <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    125c:	fc 01       	movw	r30, r24
    125e:	60 91 96 06 	lds	r22, 0x0696
    1262:	70 91 97 06 	lds	r23, 0x0697
    1266:	80 91 98 06 	lds	r24, 0x0698
    126a:	90 91 99 06 	lds	r25, 0x0699
    126e:	21 a5       	ldd	r18, Z+41	; 0x29
    1270:	32 a5       	ldd	r19, Z+42	; 0x2a
    1272:	43 a5       	ldd	r20, Z+43	; 0x2b
    1274:	54 a5       	ldd	r21, Z+44	; 0x2c
    1276:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    127a:	08 95       	ret

0000127c <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    127c:	80 91 16 05 	lds	r24, 0x0516
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	08 95       	ret

00001284 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1284:	20 91 02 05 	lds	r18, 0x0502
    1288:	30 91 03 05 	lds	r19, 0x0503
    128c:	80 91 04 05 	lds	r24, 0x0504
    1290:	90 91 05 05 	lds	r25, 0x0505
    1294:	28 17       	cp	r18, r24
    1296:	39 07       	cpc	r19, r25
    1298:	69 f0       	breq	.+26     	; 0x12b4 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    129a:	80 91 04 05 	lds	r24, 0x0504
    129e:	90 91 05 05 	lds	r25, 0x0505
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	6a e0       	ldi	r22, 0x0A	; 10
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    12ac:	90 93 05 05 	sts	0x0505, r25
    12b0:	80 93 04 05 	sts	0x0504, r24
    12b4:	08 95       	ret

000012b6 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    12b6:	20 91 02 05 	lds	r18, 0x0502
    12ba:	30 91 03 05 	lds	r19, 0x0503
    12be:	80 91 04 05 	lds	r24, 0x0504
    12c2:	90 91 05 05 	lds	r25, 0x0505
    12c6:	28 17       	cp	r18, r24
    12c8:	39 07       	cpc	r19, r25
    12ca:	19 f4       	brne	.+6      	; 0x12d2 <plan_get_current_block+0x1c>
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	0f c0       	rjmp	.+30     	; 0x12f0 <plan_get_current_block+0x3a>
  return(&block_buffer[block_buffer_tail]);
    12d2:	20 91 04 05 	lds	r18, 0x0504
    12d6:	30 91 05 05 	lds	r19, 0x0505
    12da:	89 e4       	ldi	r24, 0x49	; 73
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	28 9f       	mul	r18, r24
    12e0:	a0 01       	movw	r20, r0
    12e2:	29 9f       	mul	r18, r25
    12e4:	50 0d       	add	r21, r0
    12e6:	38 9f       	mul	r19, r24
    12e8:	50 0d       	add	r21, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	48 5d       	subi	r20, 0xD8	; 216
    12ee:	5d 4f       	sbci	r21, 0xFD	; 253
}
    12f0:	ca 01       	movw	r24, r20
    12f2:	08 95       	ret

000012f4 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    12f4:	4f 92       	push	r4
    12f6:	5f 92       	push	r5
    12f8:	6f 92       	push	r6
    12fa:	7f 92       	push	r7
    12fc:	8f 92       	push	r8
    12fe:	9f 92       	push	r9
    1300:	af 92       	push	r10
    1302:	bf 92       	push	r11
    1304:	cf 92       	push	r12
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	ec 01       	movw	r28, r24
    1316:	4b 01       	movw	r8, r22
  if(!current) { return; }
    1318:	61 15       	cp	r22, r1
    131a:	71 05       	cpc	r23, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <planner_forward_pass_kernel+0x2c>
    131e:	5e c0       	rjmp	.+188    	; 0x13dc <planner_forward_pass_kernel+0xe8>
  if(previous) {
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	09 f4       	brne	.+2      	; 0x1326 <planner_forward_pass_kernel+0x32>
    1324:	5b c0       	rjmp	.+182    	; 0x13dc <planner_forward_pass_kernel+0xe8>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1326:	e9 a8       	ldd	r14, Y+49	; 0x31
    1328:	fa a8       	ldd	r15, Y+50	; 0x32
    132a:	0b a9       	ldd	r16, Y+51	; 0x33
    132c:	1c a9       	ldd	r17, Y+52	; 0x34
    132e:	fb 01       	movw	r30, r22
    1330:	41 a8       	ldd	r4, Z+49	; 0x31
    1332:	52 a8       	ldd	r5, Z+50	; 0x32
    1334:	63 a8       	ldd	r6, Z+51	; 0x33
    1336:	74 a8       	ldd	r7, Z+52	; 0x34
    1338:	c8 01       	movw	r24, r16
    133a:	b7 01       	movw	r22, r14
    133c:	a3 01       	movw	r20, r6
    133e:	92 01       	movw	r18, r4
    1340:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__cmpsf2>
    1344:	88 23       	and	r24, r24
    1346:	0c f0       	brlt	.+2      	; 0x134a <planner_forward_pass_kernel+0x56>
    1348:	49 c0       	rjmp	.+146    	; 0x13dc <planner_forward_pass_kernel+0xe8>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    134a:	f4 01       	movw	r30, r8
    134c:	a1 a4       	ldd	r10, Z+41	; 0x29
    134e:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1350:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1352:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1354:	c6 01       	movw	r24, r12
    1356:	b5 01       	movw	r22, r10
    1358:	a8 01       	movw	r20, r16
    135a:	97 01       	movw	r18, r14
    135c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1360:	9b 01       	movw	r18, r22
    1362:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1364:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1368:	7b 01       	movw	r14, r22
    136a:	8c 01       	movw	r16, r24
    136c:	20 91 92 06 	lds	r18, 0x0692
    1370:	30 91 93 06 	lds	r19, 0x0693
    1374:	40 91 94 06 	lds	r20, 0x0694
    1378:	50 91 95 06 	lds	r21, 0x0695
    137c:	50 58       	subi	r21, 0x80	; 128
    137e:	ca 01       	movw	r24, r20
    1380:	b9 01       	movw	r22, r18
    1382:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e7       	ldi	r20, 0x70	; 112
    138c:	52 e4       	ldi	r21, 0x42	; 66
    138e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e7       	ldi	r20, 0x70	; 112
    1398:	52 ec       	ldi	r21, 0xC2	; 194
    139a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    139e:	2d a5       	ldd	r18, Y+45	; 0x2d
    13a0:	3e a5       	ldd	r19, Y+46	; 0x2e
    13a2:	4f a5       	ldd	r20, Y+47	; 0x2f
    13a4:	58 a9       	ldd	r21, Y+48	; 0x30
    13a6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    13aa:	9b 01       	movw	r18, r22
    13ac:	ac 01       	movw	r20, r24
    13ae:	c8 01       	movw	r24, r16
    13b0:	b7 01       	movw	r22, r14
    13b2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    13b6:	0e 94 4d 20 	call	0x409a	; 0x409a <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    13ba:	a6 01       	movw	r20, r12
    13bc:	95 01       	movw	r18, r10
    13be:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    13c2:	7b 01       	movw	r14, r22
    13c4:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    13c6:	a3 01       	movw	r20, r6
    13c8:	92 01       	movw	r18, r4
    13ca:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__cmpsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <planner_forward_pass_kernel+0xe8>
        current->entry_factor = max_entry_factor;
    13d2:	f4 01       	movw	r30, r8
    13d4:	e1 aa       	std	Z+49, r14	; 0x31
    13d6:	f2 aa       	std	Z+50, r15	; 0x32
    13d8:	03 ab       	std	Z+51, r16	; 0x33
    13da:	14 ab       	std	Z+52, r17	; 0x34
      }
    }
  }
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	9f 90       	pop	r9
    13f2:	8f 90       	pop	r8
    13f4:	7f 90       	pop	r7
    13f6:	6f 90       	pop	r6
    13f8:	5f 90       	pop	r5
    13fa:	4f 90       	pop	r4
    13fc:	08 95       	ret

000013fe <planner_forward_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    140a:	80 91 04 05 	lds	r24, 0x0504
    140e:	90 91 05 05 	lds	r25, 0x0505
    1412:	48 2f       	mov	r20, r24
    1414:	c0 e0       	ldi	r28, 0x00	; 0
    1416:	d0 e0       	ldi	r29, 0x00	; 0
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <planner_forward_pass+0x48>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    141e:	89 e4       	ldi	r24, 0x49	; 73
    1420:	48 02       	muls	r20, r24
    1422:	80 01       	movw	r16, r0
    1424:	11 24       	eor	r1, r1
    1426:	08 5d       	subi	r16, 0xD8	; 216
    1428:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    142a:	c9 01       	movw	r24, r18
    142c:	be 01       	movw	r22, r28
    142e:	a8 01       	movw	r20, r16
    1430:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1434:	c7 01       	movw	r24, r14
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	6a e0       	ldi	r22, 0x0A	; 10
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    1440:	48 2f       	mov	r20, r24
    1442:	9e 01       	movw	r18, r28
    1444:	e8 01       	movw	r28, r16
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1446:	e4 2e       	mov	r14, r20
    1448:	ff 24       	eor	r15, r15
    144a:	e7 fc       	sbrc	r14, 7
    144c:	f0 94       	com	r15
    144e:	80 91 02 05 	lds	r24, 0x0502
    1452:	90 91 03 05 	lds	r25, 0x0503
    1456:	e8 16       	cp	r14, r24
    1458:	f9 06       	cpc	r15, r25
    145a:	09 f7       	brne	.-62     	; 0x141e <planner_forward_pass+0x20>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    145c:	c9 01       	movw	r24, r18
    145e:	be 01       	movw	r22, r28
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <planner_forward_pass_kernel>
}
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	08 95       	ret

00001476 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1476:	2f 92       	push	r2
    1478:	3f 92       	push	r3
    147a:	4f 92       	push	r4
    147c:	5f 92       	push	r5
    147e:	6f 92       	push	r6
    1480:	7f 92       	push	r7
    1482:	8f 92       	push	r8
    1484:	9f 92       	push	r9
    1486:	af 92       	push	r10
    1488:	bf 92       	push	r11
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	3b 01       	movw	r6, r22
    1498:	4c 01       	movw	r8, r24
    149a:	19 01       	movw	r2, r18
    149c:	2a 01       	movw	r4, r20
	st_synchronize();
    149e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    14a2:	c4 01       	movw	r24, r8
    14a4:	b3 01       	movw	r22, r6
    14a6:	20 91 74 06 	lds	r18, 0x0674
    14aa:	30 91 75 06 	lds	r19, 0x0675
    14ae:	40 91 76 06 	lds	r20, 0x0676
    14b2:	50 91 77 06 	lds	r21, 0x0677
    14b6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    14ba:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    14be:	26 e0       	ldi	r18, 0x06	; 6
    14c0:	82 2e       	mov	r8, r18
    14c2:	25 e0       	ldi	r18, 0x05	; 5
    14c4:	92 2e       	mov	r9, r18
    14c6:	60 93 06 05 	sts	0x0506, r22
    14ca:	70 93 07 05 	sts	0x0507, r23
    14ce:	80 93 08 05 	sts	0x0508, r24
    14d2:	90 93 09 05 	sts	0x0509, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    14d6:	c2 01       	movw	r24, r4
    14d8:	b1 01       	movw	r22, r2
    14da:	20 91 78 06 	lds	r18, 0x0678
    14de:	30 91 79 06 	lds	r19, 0x0679
    14e2:	40 91 7a 06 	lds	r20, 0x067A
    14e6:	50 91 7b 06 	lds	r21, 0x067B
    14ea:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    14ee:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    14f2:	f4 01       	movw	r30, r8
    14f4:	34 96       	adiw	r30, 0x04	; 4
    14f6:	60 93 0a 05 	sts	0x050A, r22
    14fa:	71 83       	std	Z+1, r23	; 0x01
    14fc:	82 83       	std	Z+2, r24	; 0x02
    14fe:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1500:	c8 01       	movw	r24, r16
    1502:	b7 01       	movw	r22, r14
    1504:	20 91 7c 06 	lds	r18, 0x067C
    1508:	30 91 7d 06 	lds	r19, 0x067D
    150c:	40 91 7e 06 	lds	r20, 0x067E
    1510:	50 91 7f 06 	lds	r21, 0x067F
    1514:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1518:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    151c:	f4 01       	movw	r30, r8
    151e:	38 96       	adiw	r30, 0x08	; 8
    1520:	60 93 0e 05 	sts	0x050E, r22
    1524:	71 83       	std	Z+1, r23	; 0x01
    1526:	82 83       	std	Z+2, r24	; 0x02
    1528:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    152a:	c6 01       	movw	r24, r12
    152c:	b5 01       	movw	r22, r10
    152e:	20 91 80 06 	lds	r18, 0x0680
    1532:	30 91 81 06 	lds	r19, 0x0681
    1536:	40 91 82 06 	lds	r20, 0x0682
    153a:	50 91 83 06 	lds	r21, 0x0683
    153e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1542:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    1546:	2c e0       	ldi	r18, 0x0C	; 12
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	82 0e       	add	r8, r18
    154c:	93 1e       	adc	r9, r19
    154e:	60 93 12 05 	sts	0x0512, r22
    1552:	f4 01       	movw	r30, r8
    1554:	71 83       	std	Z+1, r23	; 0x01
    1556:	82 83       	std	Z+2, r24	; 0x02
    1558:	93 83       	std	Z+3, r25	; 0x03
}
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	bf 90       	pop	r11
    1568:	af 90       	pop	r10
    156a:	9f 90       	pop	r9
    156c:	8f 90       	pop	r8
    156e:	7f 90       	pop	r7
    1570:	6f 90       	pop	r6
    1572:	5f 90       	pop	r5
    1574:	4f 90       	pop	r4
    1576:	3f 90       	pop	r3
    1578:	2f 90       	pop	r2
    157a:	08 95       	ret

0000157c <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	80 91 16 05 	lds	r24, 0x0516
    1588:	81 11       	cpse	r24, r1
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	20 97       	sbiw	r28, 0x00	; 0
    1590:	09 f0       	breq	.+2      	; 0x1594 <plan_set_acceleration_manager_enabled+0x18>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	98 17       	cp	r25, r24
    1596:	49 f0       	breq	.+18     	; 0x15aa <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    1598:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    159c:	10 92 16 05 	sts	0x0516, r1
    15a0:	cd 2b       	or	r28, r29
    15a2:	19 f0       	breq	.+6      	; 0x15aa <plan_set_acceleration_manager_enabled+0x2e>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 16 05 	sts	0x0516, r24
  }
}
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    15b0:	10 92 03 05 	sts	0x0503, r1
    15b4:	10 92 02 05 	sts	0x0502, r1
  block_buffer_tail = 0;
    15b8:	10 92 05 05 	sts	0x0505, r1
    15bc:	10 92 04 05 	sts	0x0504, r1
  plan_set_acceleration_manager_enabled(TRUE);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 be 0a 	call	0x157c	; 0x157c <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    15c8:	80 e1       	ldi	r24, 0x10	; 16
    15ca:	e6 e0       	ldi	r30, 0x06	; 6
    15cc:	f5 e0       	ldi	r31, 0x05	; 5
    15ce:	df 01       	movw	r26, r30
    15d0:	1d 92       	st	X+, r1
    15d2:	8a 95       	dec	r24
    15d4:	e9 f7       	brne	.-6      	; 0x15d0 <plan_init+0x20>
}
    15d6:	08 95       	ret

000015d8 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    15d8:	2f 92       	push	r2
    15da:	3f 92       	push	r3
    15dc:	4f 92       	push	r4
    15de:	5f 92       	push	r5
    15e0:	6f 92       	push	r6
    15e2:	7f 92       	push	r7
    15e4:	8f 92       	push	r8
    15e6:	9f 92       	push	r9
    15e8:	af 92       	push	r10
    15ea:	bf 92       	push	r11
    15ec:	cf 92       	push	r12
    15ee:	df 92       	push	r13
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <planner_reverse_pass_kernel+0x26>
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <planner_reverse_pass_kernel+0x28>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	8c 01       	movw	r16, r24
    1606:	7e 83       	std	Y+6, r23	; 0x06
    1608:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    160a:	67 2b       	or	r22, r23
    160c:	09 f4       	brne	.+2      	; 0x1610 <planner_reverse_pass_kernel+0x38>
    160e:	07 c1       	rjmp	.+526    	; 0x181e <planner_reverse_pass_kernel+0x246>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1610:	41 15       	cp	r20, r1
    1612:	51 05       	cpc	r21, r1
    1614:	61 f0       	breq	.+24     	; 0x162e <planner_reverse_pass_kernel+0x56>
    exit_factor = next->entry_factor;
    1616:	da 01       	movw	r26, r20
    1618:	d1 96       	adiw	r26, 0x31	; 49
    161a:	8d 91       	ld	r24, X+
    161c:	9d 91       	ld	r25, X+
    161e:	0d 90       	ld	r0, X+
    1620:	bc 91       	ld	r27, X
    1622:	a0 2d       	mov	r26, r0
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	ab 83       	std	Y+3, r26	; 0x03
    162a:	bc 83       	std	Y+4, r27	; 0x04
    162c:	08 c0       	rjmp	.+16     	; 0x163e <planner_reverse_pass_kernel+0x66>
  } else {
    exit_factor = factor_for_safe_speed(current);
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	0e 94 2e 09 	call	0x125c	; 0x125c <factor_for_safe_speed>
    1636:	69 83       	std	Y+1, r22	; 0x01
    1638:	7a 83       	std	Y+2, r23	; 0x02
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    163e:	01 15       	cp	r16, r1
    1640:	11 05       	cpc	r17, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <planner_reverse_pass_kernel+0x6e>
    1644:	e0 c0       	rjmp	.+448    	; 0x1806 <planner_reverse_pass_kernel+0x22e>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1646:	f8 01       	movw	r30, r16
    1648:	61 8d       	ldd	r22, Z+25	; 0x19
    164a:	72 8d       	ldd	r23, Z+26	; 0x1a
    164c:	83 8d       	ldd	r24, Z+27	; 0x1b
    164e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1650:	ad 81       	ldd	r26, Y+5	; 0x05
    1652:	be 81       	ldd	r27, Y+6	; 0x06
    1654:	59 96       	adiw	r26, 0x19	; 25
    1656:	2d 91       	ld	r18, X+
    1658:	3d 91       	ld	r19, X+
    165a:	4d 91       	ld	r20, X+
    165c:	5c 91       	ld	r21, X
    165e:	5c 97       	sbiw	r26, 0x1c	; 28
    1660:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__subsf3>
    1664:	9b 01       	movw	r18, r22
    1666:	ac 01       	movw	r20, r24
    1668:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    166c:	1b 01       	movw	r2, r22
    166e:	2c 01       	movw	r4, r24
    1670:	f8 01       	movw	r30, r16
    1672:	65 8d       	ldd	r22, Z+29	; 0x1d
    1674:	76 8d       	ldd	r23, Z+30	; 0x1e
    1676:	87 8d       	ldd	r24, Z+31	; 0x1f
    1678:	90 a1       	ldd	r25, Z+32	; 0x20
    167a:	ad 81       	ldd	r26, Y+5	; 0x05
    167c:	be 81       	ldd	r27, Y+6	; 0x06
    167e:	5d 96       	adiw	r26, 0x1d	; 29
    1680:	2d 91       	ld	r18, X+
    1682:	3d 91       	ld	r19, X+
    1684:	4d 91       	ld	r20, X+
    1686:	5c 91       	ld	r21, X
    1688:	90 97       	sbiw	r26, 0x20	; 32
    168a:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__subsf3>
    168e:	9b 01       	movw	r18, r22
    1690:	ac 01       	movw	r20, r24
    1692:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1696:	3b 01       	movw	r6, r22
    1698:	4c 01       	movw	r8, r24
    169a:	f8 01       	movw	r30, r16
    169c:	61 a1       	ldd	r22, Z+33	; 0x21
    169e:	72 a1       	ldd	r23, Z+34	; 0x22
    16a0:	83 a1       	ldd	r24, Z+35	; 0x23
    16a2:	94 a1       	ldd	r25, Z+36	; 0x24
    16a4:	ad 81       	ldd	r26, Y+5	; 0x05
    16a6:	be 81       	ldd	r27, Y+6	; 0x06
    16a8:	91 96       	adiw	r26, 0x21	; 33
    16aa:	2d 91       	ld	r18, X+
    16ac:	3d 91       	ld	r19, X+
    16ae:	4d 91       	ld	r20, X+
    16b0:	5c 91       	ld	r21, X
    16b2:	94 97       	sbiw	r26, 0x24	; 36
    16b4:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__subsf3>
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    16c0:	5b 01       	movw	r10, r22
    16c2:	6c 01       	movw	r12, r24
    16c4:	f8 01       	movw	r30, r16
    16c6:	65 a1       	ldd	r22, Z+37	; 0x25
    16c8:	76 a1       	ldd	r23, Z+38	; 0x26
    16ca:	87 a1       	ldd	r24, Z+39	; 0x27
    16cc:	90 a5       	ldd	r25, Z+40	; 0x28
    16ce:	ad 81       	ldd	r26, Y+5	; 0x05
    16d0:	be 81       	ldd	r27, Y+6	; 0x06
    16d2:	95 96       	adiw	r26, 0x25	; 37
    16d4:	2d 91       	ld	r18, X+
    16d6:	3d 91       	ld	r19, X+
    16d8:	4d 91       	ld	r20, X+
    16da:	5c 91       	ld	r21, X
    16dc:	98 97       	sbiw	r26, 0x28	; 40
    16de:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__subsf3>
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    16ea:	7b 01       	movw	r14, r22
    16ec:	8c 01       	movw	r16, r24
    16ee:	c2 01       	movw	r24, r4
    16f0:	b1 01       	movw	r22, r2
    16f2:	a4 01       	movw	r20, r8
    16f4:	93 01       	movw	r18, r6
    16f6:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    16fa:	a6 01       	movw	r20, r12
    16fc:	95 01       	movw	r18, r10
    16fe:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    1702:	a8 01       	movw	r20, r16
    1704:	97 01       	movw	r18, r14
    1706:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    170a:	0e 94 4d 20 	call	0x409a	; 0x409a <sqrt>
    170e:	5b 01       	movw	r10, r22
    1710:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1712:	e0 90 96 06 	lds	r14, 0x0696
    1716:	f0 90 97 06 	lds	r15, 0x0697
    171a:	00 91 98 06 	lds	r16, 0x0698
    171e:	10 91 99 06 	lds	r17, 0x0699
    1722:	a8 01       	movw	r20, r16
    1724:	97 01       	movw	r18, r14
    1726:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__gesf2>
    172a:	18 16       	cp	r1, r24
    172c:	5c f0       	brlt	.+22     	; 0x1744 <planner_reverse_pass_kernel+0x16c>
    172e:	0f 2e       	mov	r0, r31
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	6f 2e       	mov	r6, r31
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	7f 2e       	mov	r7, r31
    1738:	f0 e8       	ldi	r31, 0x80	; 128
    173a:	8f 2e       	mov	r8, r31
    173c:	ff e3       	ldi	r31, 0x3F	; 63
    173e:	9f 2e       	mov	r9, r31
    1740:	f0 2d       	mov	r31, r0
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <planner_reverse_pass_kernel+0x17c>
      entry_factor = (settings.max_jerk/jerk);
    1744:	c8 01       	movw	r24, r16
    1746:	b7 01       	movw	r22, r14
    1748:	a6 01       	movw	r20, r12
    174a:	95 01       	movw	r18, r10
    174c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    1750:	3b 01       	movw	r6, r22
    1752:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1754:	c4 01       	movw	r24, r8
    1756:	b3 01       	movw	r22, r6
    1758:	29 81       	ldd	r18, Y+1	; 0x01
    175a:	3a 81       	ldd	r19, Y+2	; 0x02
    175c:	4b 81       	ldd	r20, Y+3	; 0x03
    175e:	5c 81       	ldd	r21, Y+4	; 0x04
    1760:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__gesf2>
    1764:	18 16       	cp	r1, r24
    1766:	0c f0       	brlt	.+2      	; 0x176a <planner_reverse_pass_kernel+0x192>
    1768:	54 c0       	rjmp	.+168    	; 0x1812 <planner_reverse_pass_kernel+0x23a>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    176a:	ed 81       	ldd	r30, Y+5	; 0x05
    176c:	fe 81       	ldd	r31, Y+6	; 0x06
    176e:	a1 a4       	ldd	r10, Z+41	; 0x29
    1770:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1772:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1774:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1776:	c6 01       	movw	r24, r12
    1778:	b5 01       	movw	r22, r10
    177a:	29 81       	ldd	r18, Y+1	; 0x01
    177c:	3a 81       	ldd	r19, Y+2	; 0x02
    177e:	4b 81       	ldd	r20, Y+3	; 0x03
    1780:	5c 81       	ldd	r21, Y+4	; 0x04
    1782:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    178a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    178e:	7b 01       	movw	r14, r22
    1790:	8c 01       	movw	r16, r24
    1792:	20 91 92 06 	lds	r18, 0x0692
    1796:	30 91 93 06 	lds	r19, 0x0693
    179a:	40 91 94 06 	lds	r20, 0x0694
    179e:	50 91 95 06 	lds	r21, 0x0695
    17a2:	50 58       	subi	r21, 0x80	; 128
    17a4:	ca 01       	movw	r24, r20
    17a6:	b9 01       	movw	r22, r18
    17a8:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e7       	ldi	r20, 0x70	; 112
    17b2:	52 e4       	ldi	r21, 0x42	; 66
    17b4:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e7       	ldi	r20, 0x70	; 112
    17be:	52 ec       	ldi	r21, 0xC2	; 194
    17c0:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    17c4:	ad 81       	ldd	r26, Y+5	; 0x05
    17c6:	be 81       	ldd	r27, Y+6	; 0x06
    17c8:	9d 96       	adiw	r26, 0x2d	; 45
    17ca:	2d 91       	ld	r18, X+
    17cc:	3d 91       	ld	r19, X+
    17ce:	4d 91       	ld	r20, X+
    17d0:	5c 91       	ld	r21, X
    17d2:	d0 97       	sbiw	r26, 0x30	; 48
    17d4:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    17d8:	9b 01       	movw	r18, r22
    17da:	ac 01       	movw	r20, r24
    17dc:	c8 01       	movw	r24, r16
    17de:	b7 01       	movw	r22, r14
    17e0:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    17e4:	0e 94 4d 20 	call	0x409a	; 0x409a <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    17e8:	a6 01       	movw	r20, r12
    17ea:	95 01       	movw	r18, r10
    17ec:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    17f4:	a4 01       	movw	r20, r8
    17f6:	93 01       	movw	r18, r6
    17f8:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__cmpsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	4c f4       	brge	.+18     	; 0x1812 <planner_reverse_pass_kernel+0x23a>
    1800:	37 01       	movw	r6, r14
    1802:	48 01       	movw	r8, r16
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <planner_reverse_pass_kernel+0x23a>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	0e 94 2e 09 	call	0x125c	; 0x125c <factor_for_safe_speed>
    180e:	3b 01       	movw	r6, r22
    1810:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1812:	ed 81       	ldd	r30, Y+5	; 0x05
    1814:	fe 81       	ldd	r31, Y+6	; 0x06
    1816:	61 aa       	std	Z+49, r6	; 0x31
    1818:	72 aa       	std	Z+50, r7	; 0x32
    181a:	83 aa       	std	Z+51, r8	; 0x33
    181c:	94 aa       	std	Z+52, r9	; 0x34
}
    181e:	26 96       	adiw	r28, 0x06	; 6
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	9f 90       	pop	r9
    1840:	8f 90       	pop	r8
    1842:	7f 90       	pop	r7
    1844:	6f 90       	pop	r6
    1846:	5f 90       	pop	r5
    1848:	4f 90       	pop	r4
    184a:	3f 90       	pop	r3
    184c:	2f 90       	pop	r2
    184e:	08 95       	ret

00001850 <planner_reverse_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    185a:	80 91 02 05 	lds	r24, 0x0502
    185e:	90 91 03 05 	lds	r25, 0x0503
    1862:	f8 2e       	mov	r15, r24
    1864:	c0 e0       	ldi	r28, 0x00	; 0
    1866:	d0 e0       	ldi	r29, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	12 c0       	rjmp	.+36     	; 0x1892 <planner_reverse_pass+0x42>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    186e:	fa 94       	dec	r15
    if(block_index < 0) {
    1870:	f7 fe       	sbrs	r15, 7
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <planner_reverse_pass+0x28>
    1874:	39 e0       	ldi	r19, 0x09	; 9
    1876:	f3 2e       	mov	r15, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1878:	8f 2d       	mov	r24, r15
    187a:	99 e4       	ldi	r25, 0x49	; 73
    187c:	89 02       	muls	r24, r25
    187e:	80 01       	movw	r16, r0
    1880:	11 24       	eor	r1, r1
    1882:	08 5d       	subi	r16, 0xD8	; 216
    1884:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1886:	c8 01       	movw	r24, r16
    1888:	be 01       	movw	r22, r28
    188a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <planner_reverse_pass_kernel>
    188e:	ae 01       	movw	r20, r28
    1890:	e8 01       	movw	r28, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1892:	20 91 04 05 	lds	r18, 0x0504
    1896:	30 91 05 05 	lds	r19, 0x0505
    189a:	8f 2d       	mov	r24, r15
    189c:	99 27       	eor	r25, r25
    189e:	87 fd       	sbrc	r24, 7
    18a0:	90 95       	com	r25
    18a2:	82 17       	cp	r24, r18
    18a4:	93 07       	cpc	r25, r19
    18a6:	19 f7       	brne	.-58     	; 0x186e <planner_reverse_pass+0x1e>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	be 01       	movw	r22, r28
    18ae:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <planner_reverse_pass_kernel>
}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	08 95       	ret

000018be <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    18be:	2f 92       	push	r2
    18c0:	3f 92       	push	r3
    18c2:	4f 92       	push	r4
    18c4:	5f 92       	push	r5
    18c6:	6f 92       	push	r6
    18c8:	7f 92       	push	r7
    18ca:	8f 92       	push	r8
    18cc:	9f 92       	push	r9
    18ce:	af 92       	push	r10
    18d0:	bf 92       	push	r11
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	62 97       	sbiw	r28, 0x12	; 18
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	9a 8b       	std	Y+18, r25	; 0x12
    18f4:	89 8b       	std	Y+17, r24	; 0x11
    18f6:	6a 01       	movw	r12, r20
    18f8:	7b 01       	movw	r14, r22
    18fa:	18 01       	movw	r2, r16
    18fc:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    18fe:	fc 01       	movw	r30, r24
    1900:	65 89       	ldd	r22, Z+21	; 0x15
    1902:	76 89       	ldd	r23, Z+22	; 0x16
    1904:	87 89       	ldd	r24, Z+23	; 0x17
    1906:	90 8d       	ldd	r25, Z+24	; 0x18
    1908:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__floatunsisf>
    190c:	3b 01       	movw	r6, r22
    190e:	4c 01       	movw	r8, r24
    1910:	a7 01       	movw	r20, r14
    1912:	96 01       	movw	r18, r12
    1914:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1918:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <ceil>
    191c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__fixunssfsi>
    1920:	7b 01       	movw	r14, r22
    1922:	8c 01       	movw	r16, r24
    1924:	e9 89       	ldd	r30, Y+17	; 0x11
    1926:	fa 89       	ldd	r31, Y+18	; 0x12
    1928:	65 ab       	std	Z+53, r22	; 0x35
    192a:	76 ab       	std	Z+54, r23	; 0x36
    192c:	87 ab       	std	Z+55, r24	; 0x37
    192e:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1930:	c4 01       	movw	r24, r8
    1932:	b3 01       	movw	r22, r6
    1934:	a2 01       	movw	r20, r4
    1936:	91 01       	movw	r18, r2
    1938:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    193c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <ceil>
    1940:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__fixunssfsi>
    1944:	1b 01       	movw	r2, r22
    1946:	2c 01       	movw	r4, r24
    1948:	e9 89       	ldd	r30, Y+17	; 0x11
    194a:	fa 89       	ldd	r31, Y+18	; 0x12
    194c:	61 af       	std	Z+57, r22	; 0x39
    194e:	72 af       	std	Z+58, r23	; 0x3a
    1950:	83 af       	std	Z+59, r24	; 0x3b
    1952:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1954:	fd 96       	adiw	r30, 0x3d	; 61
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	fd 97       	sbiw	r30, 0x3d	; 61
    1960:	fa 8b       	std	Y+18, r31	; 0x12
    1962:	e9 8b       	std	Y+17, r30	; 0x11
    1964:	28 e2       	ldi	r18, 0x28	; 40
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	0e 94 9c 20 	call	0x4138	; 0x4138 <__mulsi3>
    1970:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e7       	ldi	r20, 0x70	; 112
    197a:	52 e4       	ldi	r21, 0x42	; 66
    197c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1980:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
    1984:	5b 01       	movw	r10, r22
    1986:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1988:	c8 01       	movw	r24, r16
    198a:	b7 01       	movw	r22, r14
    198c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__floatunsisf>
    1990:	7b 01       	movw	r14, r22
    1992:	8c 01       	movw	r16, r24
    1994:	c6 01       	movw	r24, r12
    1996:	b5 01       	movw	r22, r10
    1998:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    199c:	6d 83       	std	Y+5, r22	; 0x05
    199e:	7e 83       	std	Y+6, r23	; 0x06
    19a0:	8f 83       	std	Y+7, r24	; 0x07
    19a2:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    19a4:	c4 01       	movw	r24, r8
    19a6:	b3 01       	movw	r22, r6
    19a8:	a4 01       	movw	r20, r8
    19aa:	93 01       	movw	r18, r6
    19ac:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    19b0:	3b 01       	movw	r6, r22
    19b2:	4c 01       	movw	r8, r24
    19b4:	c8 01       	movw	r24, r16
    19b6:	b7 01       	movw	r22, r14
    19b8:	a8 01       	movw	r20, r16
    19ba:	97 01       	movw	r18, r14
    19bc:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    19c0:	69 87       	std	Y+9, r22	; 0x09
    19c2:	7a 87       	std	Y+10, r23	; 0x0a
    19c4:	8b 87       	std	Y+11, r24	; 0x0b
    19c6:	9c 87       	std	Y+12, r25	; 0x0c
    19c8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ca:	7e 81       	ldd	r23, Y+6	; 0x06
    19cc:	8f 81       	ldd	r24, Y+7	; 0x07
    19ce:	98 85       	ldd	r25, Y+8	; 0x08
    19d0:	9b 01       	movw	r18, r22
    19d2:	ac 01       	movw	r20, r24
    19d4:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    19d8:	6d 87       	std	Y+13, r22	; 0x0d
    19da:	7e 87       	std	Y+14, r23	; 0x0e
    19dc:	8f 87       	std	Y+15, r24	; 0x0f
    19de:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    19e0:	c4 01       	movw	r24, r8
    19e2:	b3 01       	movw	r22, r6
    19e4:	29 85       	ldd	r18, Y+9	; 0x09
    19e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    19e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    19ea:	5c 85       	ldd	r21, Y+12	; 0x0c
    19ec:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__subsf3>
    19f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    19f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    19f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    19f6:	58 89       	ldd	r21, Y+16	; 0x10
    19f8:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    19fc:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <ceil>
    1a00:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
    1a04:	69 83       	std	Y+1, r22	; 0x01
    1a06:	7a 83       	std	Y+2, r23	; 0x02
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1a0c:	c2 01       	movw	r24, r4
    1a0e:	b1 01       	movw	r22, r2
    1a10:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__floatunsisf>
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1a18:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1a1c:	1b 01       	movw	r2, r22
    1a1e:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1a20:	a4 01       	movw	r20, r8
    1a22:	93 01       	movw	r18, r6
    1a24:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__subsf3>
    1a28:	7b 01       	movw	r14, r22
    1a2a:	8c 01       	movw	r16, r24
    1a2c:	d0 94       	com	r13
    1a2e:	c0 94       	com	r12
    1a30:	b0 94       	com	r11
    1a32:	a0 94       	com	r10
    1a34:	a1 1c       	adc	r10, r1
    1a36:	b1 1c       	adc	r11, r1
    1a38:	c1 1c       	adc	r12, r1
    1a3a:	d1 1c       	adc	r13, r1
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	b5 01       	movw	r22, r10
    1a40:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    1a44:	9b 01       	movw	r18, r22
    1a46:	ac 01       	movw	r20, r24
    1a48:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    1a4c:	9b 01       	movw	r18, r22
    1a4e:	ac 01       	movw	r20, r24
    1a50:	c8 01       	movw	r24, r16
    1a52:	b7 01       	movw	r22, r14
    1a54:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    1a58:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1a5c:	e9 89       	ldd	r30, Y+17	; 0x11
    1a5e:	fa 89       	ldd	r31, Y+18	; 0x12
    1a60:	a1 88       	ldd	r10, Z+17	; 0x11
    1a62:	b2 88       	ldd	r11, Z+18	; 0x12
    1a64:	c3 88       	ldd	r12, Z+19	; 0x13
    1a66:	d4 88       	ldd	r13, Z+20	; 0x14
    1a68:	86 01       	movw	r16, r12
    1a6a:	75 01       	movw	r14, r10
    1a6c:	29 81       	ldd	r18, Y+1	; 0x01
    1a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a70:	4b 81       	ldd	r20, Y+3	; 0x03
    1a72:	5c 81       	ldd	r21, Y+4	; 0x04
    1a74:	e2 1a       	sub	r14, r18
    1a76:	f3 0a       	sbc	r15, r19
    1a78:	04 0b       	sbc	r16, r20
    1a7a:	15 0b       	sbc	r17, r21
    1a7c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
    1a80:	a8 01       	movw	r20, r16
    1a82:	97 01       	movw	r18, r14
    1a84:	26 1b       	sub	r18, r22
    1a86:	37 0b       	sbc	r19, r23
    1a88:	48 0b       	sbc	r20, r24
    1a8a:	59 0b       	sbc	r21, r25
    1a8c:	da 01       	movw	r26, r20
    1a8e:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1a90:	57 ff       	sbrs	r21, 7
    1a92:	34 c0       	rjmp	.+104    	; 0x1afc <calculate_trapezoid_for_block+0x23e>
    accelerate_steps = ceil(
    1a94:	c6 01       	movw	r24, r12
    1a96:	b5 01       	movw	r22, r10
    1a98:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
    1aa0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1aa2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa6:	98 89       	ldd	r25, Y+16	; 0x10
    1aa8:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1aac:	29 85       	ldd	r18, Y+9	; 0x09
    1aae:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ab0:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ab2:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ab4:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <__subsf3>
    1ab8:	a2 01       	movw	r20, r4
    1aba:	91 01       	movw	r18, r2
    1abc:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    1ac0:	7b 01       	movw	r14, r22
    1ac2:	8c 01       	movw	r16, r24
    1ac4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aca:	98 85       	ldd	r25, Y+8	; 0x08
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	50 e4       	ldi	r21, 0x40	; 64
    1ad4:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	c8 01       	movw	r24, r16
    1ade:	b7 01       	movw	r22, r14
    1ae0:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    1ae4:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <ceil>
    1ae8:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
    1aec:	69 83       	std	Y+1, r22	; 0x01
    1aee:	7a 83       	std	Y+2, r23	; 0x02
    1af0:	8b 83       	std	Y+3, r24	; 0x03
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a0 e0       	ldi	r26, 0x00	; 0
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1afc:	49 89       	ldd	r20, Y+17	; 0x11
    1afe:	5a 89       	ldd	r21, Y+18	; 0x12
    1b00:	4f 5b       	subi	r20, 0xBF	; 191
    1b02:	5f 4f       	sbci	r21, 0xFF	; 255
    1b04:	fa 01       	movw	r30, r20
    1b06:	29 81       	ldd	r18, Y+1	; 0x01
    1b08:	3a 81       	ldd	r19, Y+2	; 0x02
    1b0a:	4b 81       	ldd	r20, Y+3	; 0x03
    1b0c:	5c 81       	ldd	r21, Y+4	; 0x04
    1b0e:	21 93       	st	Z+, r18
    1b10:	31 93       	st	Z+, r19
    1b12:	41 93       	st	Z+, r20
    1b14:	51 93       	st	Z+, r21
    1b16:	fa 8b       	std	Y+18, r31	; 0x12
    1b18:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1b1a:	82 0f       	add	r24, r18
    1b1c:	93 1f       	adc	r25, r19
    1b1e:	a4 1f       	adc	r26, r20
    1b20:	b5 1f       	adc	r27, r21
    1b22:	80 83       	st	Z, r24
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	a2 83       	std	Z+2, r26	; 0x02
    1b28:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1b2a:	62 96       	adiw	r28, 0x12	; 18
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
    1b46:	bf 90       	pop	r11
    1b48:	af 90       	pop	r10
    1b4a:	9f 90       	pop	r9
    1b4c:	8f 90       	pop	r8
    1b4e:	7f 90       	pop	r7
    1b50:	6f 90       	pop	r6
    1b52:	5f 90       	pop	r5
    1b54:	4f 90       	pop	r4
    1b56:	3f 90       	pop	r3
    1b58:	2f 90       	pop	r2
    1b5a:	08 95       	ret

00001b5c <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1b6c:	80 91 04 05 	lds	r24, 0x0504
    1b70:	90 91 05 05 	lds	r25, 0x0505
    1b74:	28 2f       	mov	r18, r24
    1b76:	c0 e0       	ldi	r28, 0x00	; 0
    1b78:	d0 e0       	ldi	r29, 0x00	; 0
    1b7a:	1e c0       	rjmp	.+60     	; 0x1bb8 <planner_recalculate_trapezoids+0x5c>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    1b7c:	89 e4       	ldi	r24, 0x49	; 73
    1b7e:	28 02       	muls	r18, r24
    1b80:	70 01       	movw	r14, r0
    1b82:	11 24       	eor	r1, r1
    1b84:	e8 e2       	ldi	r30, 0x28	; 40
    1b86:	f2 e0       	ldi	r31, 0x02	; 2
    1b88:	ee 0e       	add	r14, r30
    1b8a:	ff 1e       	adc	r15, r31
    if (current) {
    1b8c:	20 97       	sbiw	r28, 0x00	; 0
    1b8e:	61 f0       	breq	.+24     	; 0x1ba8 <planner_recalculate_trapezoids+0x4c>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1b90:	49 a9       	ldd	r20, Y+49	; 0x31
    1b92:	5a a9       	ldd	r21, Y+50	; 0x32
    1b94:	6b a9       	ldd	r22, Y+51	; 0x33
    1b96:	7c a9       	ldd	r23, Y+52	; 0x34
    1b98:	f7 01       	movw	r30, r14
    1b9a:	01 a9       	ldd	r16, Z+49	; 0x31
    1b9c:	12 a9       	ldd	r17, Z+50	; 0x32
    1b9e:	23 a9       	ldd	r18, Z+51	; 0x33
    1ba0:	34 a9       	ldd	r19, Z+52	; 0x34
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	0e 94 5f 0c 	call	0x18be	; 0x18be <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1ba8:	c6 01       	movw	r24, r12
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	6a e0       	ldi	r22, 0x0A	; 10
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	e7 01       	movw	r28, r14
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1bb8:	c2 2e       	mov	r12, r18
    1bba:	dd 24       	eor	r13, r13
    1bbc:	c7 fc       	sbrc	r12, 7
    1bbe:	d0 94       	com	r13
    1bc0:	80 91 02 05 	lds	r24, 0x0502
    1bc4:	90 91 03 05 	lds	r25, 0x0503
    1bc8:	c8 16       	cp	r12, r24
    1bca:	d9 06       	cpc	r13, r25
    1bcc:	b9 f6       	brne	.-82     	; 0x1b7c <planner_recalculate_trapezoids+0x20>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1bce:	ce 01       	movw	r24, r28
    1bd0:	0e 94 2e 09 	call	0x125c	; 0x125c <factor_for_safe_speed>
    1bd4:	8b 01       	movw	r16, r22
    1bd6:	9c 01       	movw	r18, r24
    1bd8:	49 a9       	ldd	r20, Y+49	; 0x31
    1bda:	5a a9       	ldd	r21, Y+50	; 0x32
    1bdc:	6b a9       	ldd	r22, Y+51	; 0x33
    1bde:	7c a9       	ldd	r23, Y+52	; 0x34
    1be0:	ce 01       	movw	r24, r28
    1be2:	0e 94 5f 0c 	call	0x18be	; 0x18be <calculate_trapezoid_for_block>
}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	08 95       	ret

00001bf8 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    1bf8:	0e 94 28 0c 	call	0x1850	; 0x1850 <planner_reverse_pass>
  planner_forward_pass();
    1bfc:	0e 94 ff 09 	call	0x13fe	; 0x13fe <planner_forward_pass>
  planner_recalculate_trapezoids();
    1c00:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <planner_recalculate_trapezoids>
}
    1c04:	08 95       	ret

00001c06 <plan_buffer_line>:


// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
    1c06:	2f 92       	push	r2
    1c08:	3f 92       	push	r3
    1c0a:	4f 92       	push	r4
    1c0c:	5f 92       	push	r5
    1c0e:	6f 92       	push	r6
    1c10:	7f 92       	push	r7
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	e4 97       	sbiw	r28, 0x34	; 52
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	3b 01       	movw	r6, r22
    1c3c:	4c 01       	movw	r8, r24
    1c3e:	2f a3       	std	Y+39, r18	; 0x27
    1c40:	38 a7       	std	Y+40, r19	; 0x28
    1c42:	49 a7       	std	Y+41, r20	; 0x29
    1c44:	5a a7       	std	Y+42, r21	; 0x2a
    1c46:	eb a6       	std	Y+43, r14	; 0x2b
    1c48:	fc a6       	std	Y+44, r15	; 0x2c
    1c4a:	0d a7       	std	Y+45, r16	; 0x2d
    1c4c:	1e a7       	std	Y+46, r17	; 0x2e
    1c4e:	af a6       	std	Y+47, r10	; 0x2f
    1c50:	b8 aa       	std	Y+48, r11	; 0x30
    1c52:	c9 aa       	std	Y+49, r12	; 0x31
    1c54:	da aa       	std	Y+50, r13	; 0x32
  
  
  if( gHomed == FALSE ) 
    1c56:	80 91 4a 05 	lds	r24, 0x054A
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <plan_buffer_line+0x5a>
    1c5e:	72 c3       	rjmp	.+1764   	; 0x2344 <__stack+0x145>
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1c60:	c4 01       	movw	r24, r8
    1c62:	b3 01       	movw	r22, r6
    1c64:	20 91 74 06 	lds	r18, 0x0674
    1c68:	30 91 75 06 	lds	r19, 0x0675
    1c6c:	40 91 76 06 	lds	r20, 0x0676
    1c70:	50 91 77 06 	lds	r21, 0x0677
    1c74:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1c78:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    1c7c:	7b 01       	movw	r14, r22
    1c7e:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1c80:	20 91 78 06 	lds	r18, 0x0678
    1c84:	30 91 79 06 	lds	r19, 0x0679
    1c88:	40 91 7a 06 	lds	r20, 0x067A
    1c8c:	50 91 7b 06 	lds	r21, 0x067B
    1c90:	2b a3       	std	Y+35, r18	; 0x23
    1c92:	3c a3       	std	Y+36, r19	; 0x24
    1c94:	4d a3       	std	Y+37, r20	; 0x25
    1c96:	5e a3       	std	Y+38, r21	; 0x26
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1c98:	20 90 7c 06 	lds	r2, 0x067C
    1c9c:	30 90 7d 06 	lds	r3, 0x067D
    1ca0:	40 90 7e 06 	lds	r4, 0x067E
    1ca4:	50 90 7f 06 	lds	r5, 0x067F
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1ca8:	a0 90 80 06 	lds	r10, 0x0680
    1cac:	b0 90 81 06 	lds	r11, 0x0681
    1cb0:	c0 90 82 06 	lds	r12, 0x0682
    1cb4:	d0 90 83 06 	lds	r13, 0x0683
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    1cb8:	80 91 02 05 	lds	r24, 0x0502
    1cbc:	90 91 03 05 	lds	r25, 0x0503
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	6a e0       	ldi	r22, 0x0A	; 10
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    1cca:	8b ab       	std	Y+51, r24	; 0x33
    1ccc:	9c ab       	std	Y+52, r25	; 0x34
    1cce:	07 c0       	rjmp	.+14     	; 0x1cde <plan_buffer_line+0xd8>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    1cd0:	83 b7       	in	r24, 0x33	; 51
    1cd2:	81 60       	ori	r24, 0x01	; 1
    1cd4:	83 bf       	out	0x33, r24	; 51
    1cd6:	88 95       	sleep
    1cd8:	83 b7       	in	r24, 0x33	; 51
    1cda:	8e 7f       	andi	r24, 0xFE	; 254
    1cdc:	83 bf       	out	0x33, r24	; 51
    1cde:	80 91 04 05 	lds	r24, 0x0504
    1ce2:	90 91 05 05 	lds	r25, 0x0505
    1ce6:	4b a9       	ldd	r20, Y+51	; 0x33
    1ce8:	5c a9       	ldd	r21, Y+52	; 0x34
    1cea:	84 17       	cp	r24, r20
    1cec:	95 07       	cpc	r25, r21
    1cee:	81 f3       	breq	.-32     	; 0x1cd0 <plan_buffer_line+0xca>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1cf0:	20 91 02 05 	lds	r18, 0x0502
    1cf4:	30 91 03 05 	lds	r19, 0x0503
    1cf8:	89 e4       	ldi	r24, 0x49	; 73
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	28 9f       	mul	r18, r24
    1cfe:	d0 01       	movw	r26, r0
    1d00:	29 9f       	mul	r18, r25
    1d02:	b0 0d       	add	r27, r0
    1d04:	38 9f       	mul	r19, r24
    1d06:	b0 0d       	add	r27, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	a8 5d       	subi	r26, 0xD8	; 216
    1d0c:	bd 4f       	sbci	r27, 0xFD	; 253
    1d0e:	ba a3       	std	Y+34, r27	; 0x22
    1d10:	a9 a3       	std	Y+33, r26	; 0x21
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1d12:	80 91 06 05 	lds	r24, 0x0506
    1d16:	90 91 07 05 	lds	r25, 0x0507
    1d1a:	a0 91 08 05 	lds	r26, 0x0508
    1d1e:	b0 91 09 05 	lds	r27, 0x0509
    1d22:	37 01       	movw	r6, r14
    1d24:	48 01       	movw	r8, r16
    1d26:	68 1a       	sub	r6, r24
    1d28:	79 0a       	sbc	r7, r25
    1d2a:	8a 0a       	sbc	r8, r26
    1d2c:	9b 0a       	sbc	r9, r27
    1d2e:	97 fe       	sbrs	r9, 7
    1d30:	08 c0       	rjmp	.+16     	; 0x1d42 <plan_buffer_line+0x13c>
    1d32:	90 94       	com	r9
    1d34:	80 94       	com	r8
    1d36:	70 94       	com	r7
    1d38:	60 94       	com	r6
    1d3a:	61 1c       	adc	r6, r1
    1d3c:	71 1c       	adc	r7, r1
    1d3e:	81 1c       	adc	r8, r1
    1d40:	91 1c       	adc	r9, r1
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1d42:	6f a5       	ldd	r22, Y+47	; 0x2f
    1d44:	78 a9       	ldd	r23, Y+48	; 0x30
    1d46:	89 a9       	ldd	r24, Y+49	; 0x31
    1d48:	9a a9       	ldd	r25, Y+50	; 0x32
    1d4a:	a6 01       	movw	r20, r12
    1d4c:	95 01       	movw	r18, r10
    1d4e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1d52:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    1d56:	6d 87       	std	Y+13, r22	; 0x0d
    1d58:	7e 87       	std	Y+14, r23	; 0x0e
    1d5a:	8f 87       	std	Y+15, r24	; 0x0f
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1d5e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1d60:	7c a5       	ldd	r23, Y+44	; 0x2c
    1d62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d66:	a2 01       	movw	r20, r4
    1d68:	91 01       	movw	r18, r2
    1d6a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1d6e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    1d72:	69 87       	std	Y+9, r22	; 0x09
    1d74:	7a 87       	std	Y+10, r23	; 0x0a
    1d76:	8b 87       	std	Y+11, r24	; 0x0b
    1d78:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1d7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d82:	2b a1       	ldd	r18, Y+35	; 0x23
    1d84:	3c a1       	ldd	r19, Y+36	; 0x24
    1d86:	4d a1       	ldd	r20, Y+37	; 0x25
    1d88:	5e a1       	ldd	r21, Y+38	; 0x26
    1d8a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    1d8e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    1d92:	6d 83       	std	Y+5, r22	; 0x05
    1d94:	7e 83       	std	Y+6, r23	; 0x06
    1d96:	8f 83       	std	Y+7, r24	; 0x07
    1d98:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1d9a:	e9 82       	std	Y+1, r14	; 0x01
    1d9c:	fa 82       	std	Y+2, r15	; 0x02
    1d9e:	0b 83       	std	Y+3, r16	; 0x03
    1da0:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1da2:	e9 a1       	ldd	r30, Y+33	; 0x21
    1da4:	fa a1       	ldd	r31, Y+34	; 0x22
    1da6:	60 82       	st	Z, r6
    1da8:	71 82       	std	Z+1, r7	; 0x01
    1daa:	82 82       	std	Z+2, r8	; 0x02
    1dac:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    1dae:	2d 81       	ldd	r18, Y+5	; 0x05
    1db0:	3e 81       	ldd	r19, Y+6	; 0x06
    1db2:	4f 81       	ldd	r20, Y+7	; 0x07
    1db4:	58 85       	ldd	r21, Y+8	; 0x08
    1db6:	80 91 0a 05 	lds	r24, 0x050A
    1dba:	90 91 0b 05 	lds	r25, 0x050B
    1dbe:	a0 91 0c 05 	lds	r26, 0x050C
    1dc2:	b0 91 0d 05 	lds	r27, 0x050D
    1dc6:	28 1b       	sub	r18, r24
    1dc8:	39 0b       	sbc	r19, r25
    1dca:	4a 0b       	sbc	r20, r26
    1dcc:	5b 0b       	sbc	r21, r27
    1dce:	57 ff       	sbrs	r21, 7
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <plan_buffer_line+0x1da>
    1dd2:	50 95       	com	r21
    1dd4:	40 95       	com	r20
    1dd6:	30 95       	com	r19
    1dd8:	21 95       	neg	r18
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	4f 4f       	sbci	r20, 0xFF	; 255
    1dde:	5f 4f       	sbci	r21, 0xFF	; 255
    1de0:	a9 a1       	ldd	r26, Y+33	; 0x21
    1de2:	ba a1       	ldd	r27, Y+34	; 0x22
    1de4:	14 96       	adiw	r26, 0x04	; 4
    1de6:	2d 93       	st	X+, r18
    1de8:	3d 93       	st	X+, r19
    1dea:	4d 93       	st	X+, r20
    1dec:	5c 93       	st	X, r21
    1dee:	17 97       	sbiw	r26, 0x07	; 7
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    1df0:	29 85       	ldd	r18, Y+9	; 0x09
    1df2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1df4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1df6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1df8:	80 91 0e 05 	lds	r24, 0x050E
    1dfc:	90 91 0f 05 	lds	r25, 0x050F
    1e00:	a0 91 10 05 	lds	r26, 0x0510
    1e04:	b0 91 11 05 	lds	r27, 0x0511
    1e08:	28 1b       	sub	r18, r24
    1e0a:	39 0b       	sbc	r19, r25
    1e0c:	4a 0b       	sbc	r20, r26
    1e0e:	5b 0b       	sbc	r21, r27
    1e10:	57 ff       	sbrs	r21, 7
    1e12:	07 c0       	rjmp	.+14     	; 0x1e22 <plan_buffer_line+0x21c>
    1e14:	50 95       	com	r21
    1e16:	40 95       	com	r20
    1e18:	30 95       	com	r19
    1e1a:	21 95       	neg	r18
    1e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e20:	5f 4f       	sbci	r21, 0xFF	; 255
    1e22:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e24:	fa a1       	ldd	r31, Y+34	; 0x22
    1e26:	20 87       	std	Z+8, r18	; 0x08
    1e28:	31 87       	std	Z+9, r19	; 0x09
    1e2a:	42 87       	std	Z+10, r20	; 0x0a
    1e2c:	53 87       	std	Z+11, r21	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    1e2e:	a0 90 12 05 	lds	r10, 0x0512
    1e32:	b0 90 13 05 	lds	r11, 0x0513
    1e36:	c0 90 14 05 	lds	r12, 0x0514
    1e3a:	d0 90 15 05 	lds	r13, 0x0515
    1e3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e40:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e42:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e44:	58 89       	ldd	r21, Y+16	; 0x10
    1e46:	2a 19       	sub	r18, r10
    1e48:	3b 09       	sbc	r19, r11
    1e4a:	4c 09       	sbc	r20, r12
    1e4c:	5d 09       	sbc	r21, r13
    1e4e:	57 ff       	sbrs	r21, 7
    1e50:	07 c0       	rjmp	.+14     	; 0x1e60 <plan_buffer_line+0x25a>
    1e52:	50 95       	com	r21
    1e54:	40 95       	com	r20
    1e56:	30 95       	com	r19
    1e58:	21 95       	neg	r18
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	a9 a1       	ldd	r26, Y+33	; 0x21
    1e62:	ba a1       	ldd	r27, Y+34	; 0x22
    1e64:	1c 96       	adiw	r26, 0x0c	; 12
    1e66:	2d 93       	st	X+, r18
    1e68:	3d 93       	st	X+, r19
    1e6a:	4d 93       	st	X+, r20
    1e6c:	5c 93       	st	X, r21
    1e6e:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    1e70:	18 96       	adiw	r26, 0x08	; 8
    1e72:	ed 90       	ld	r14, X+
    1e74:	fd 90       	ld	r15, X+
    1e76:	0d 91       	ld	r16, X+
    1e78:	1c 91       	ld	r17, X
    1e7a:	1b 97       	sbiw	r26, 0x0b	; 11
    1e7c:	fd 01       	movw	r30, r26
    1e7e:	84 81       	ldd	r24, Z+4	; 0x04
    1e80:	95 81       	ldd	r25, Z+5	; 0x05
    1e82:	a6 81       	ldd	r26, Z+6	; 0x06
    1e84:	b7 81       	ldd	r27, Z+7	; 0x07
    1e86:	8e 15       	cp	r24, r14
    1e88:	9f 05       	cpc	r25, r15
    1e8a:	a0 07       	cpc	r26, r16
    1e8c:	b1 07       	cpc	r27, r17
    1e8e:	10 f4       	brcc	.+4      	; 0x1e94 <plan_buffer_line+0x28e>
    1e90:	d8 01       	movw	r26, r16
    1e92:	c7 01       	movw	r24, r14
    1e94:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e96:	fa a1       	ldd	r31, Y+34	; 0x22
    1e98:	e0 80       	ld	r14, Z
    1e9a:	f1 80       	ldd	r15, Z+1	; 0x01
    1e9c:	02 81       	ldd	r16, Z+2	; 0x02
    1e9e:	13 81       	ldd	r17, Z+3	; 0x03
    1ea0:	8e 15       	cp	r24, r14
    1ea2:	9f 05       	cpc	r25, r15
    1ea4:	a0 07       	cpc	r26, r16
    1ea6:	b1 07       	cpc	r27, r17
    1ea8:	10 f4       	brcc	.+4      	; 0x1eae <plan_buffer_line+0x2a8>
    1eaa:	d8 01       	movw	r26, r16
    1eac:	c7 01       	movw	r24, r14
    1eae:	82 17       	cp	r24, r18
    1eb0:	93 07       	cpc	r25, r19
    1eb2:	a4 07       	cpc	r26, r20
    1eb4:	b5 07       	cpc	r27, r21
    1eb6:	10 f4       	brcc	.+4      	; 0x1ebc <plan_buffer_line+0x2b6>
    1eb8:	da 01       	movw	r26, r20
    1eba:	c9 01       	movw	r24, r18
    1ebc:	e9 a1       	ldd	r30, Y+33	; 0x21
    1ebe:	fa a1       	ldd	r31, Y+34	; 0x22
    1ec0:	81 8b       	std	Z+17, r24	; 0x11
    1ec2:	92 8b       	std	Z+18, r25	; 0x12
    1ec4:	a3 8b       	std	Z+19, r26	; 0x13
    1ec6:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	a1 05       	cpc	r26, r1
    1ecc:	b1 05       	cpc	r27, r1
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <plan_buffer_line+0x2cc>
    1ed0:	39 c2       	rjmp	.+1138   	; 0x2344 <__stack+0x145>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    1ed2:	69 81       	ldd	r22, Y+1	; 0x01
    1ed4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	20 91 06 05 	lds	r18, 0x0506
    1ede:	30 91 07 05 	lds	r19, 0x0507
    1ee2:	40 91 08 05 	lds	r20, 0x0508
    1ee6:	50 91 09 05 	lds	r21, 0x0509
    1eea:	62 1b       	sub	r22, r18
    1eec:	73 0b       	sbc	r23, r19
    1eee:	84 0b       	sbc	r24, r20
    1ef0:	95 0b       	sbc	r25, r21
    1ef2:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    1ef6:	20 91 74 06 	lds	r18, 0x0674
    1efa:	30 91 75 06 	lds	r19, 0x0675
    1efe:	40 91 76 06 	lds	r20, 0x0676
    1f02:	50 91 77 06 	lds	r21, 0x0677
    1f06:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    1f0a:	6d 8f       	std	Y+29, r22	; 0x1d
    1f0c:	7e 8f       	std	Y+30, r23	; 0x1e
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f10:	98 a3       	std	Y+32, r25	; 0x20
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    1f12:	6d 81       	ldd	r22, Y+5	; 0x05
    1f14:	7e 81       	ldd	r23, Y+6	; 0x06
    1f16:	8f 81       	ldd	r24, Y+7	; 0x07
    1f18:	98 85       	ldd	r25, Y+8	; 0x08
    1f1a:	20 91 0a 05 	lds	r18, 0x050A
    1f1e:	30 91 0b 05 	lds	r19, 0x050B
    1f22:	40 91 0c 05 	lds	r20, 0x050C
    1f26:	50 91 0d 05 	lds	r21, 0x050D
    1f2a:	62 1b       	sub	r22, r18
    1f2c:	73 0b       	sbc	r23, r19
    1f2e:	84 0b       	sbc	r24, r20
    1f30:	95 0b       	sbc	r25, r21
    1f32:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    1f36:	20 91 78 06 	lds	r18, 0x0678
    1f3a:	30 91 79 06 	lds	r19, 0x0679
    1f3e:	40 91 7a 06 	lds	r20, 0x067A
    1f42:	50 91 7b 06 	lds	r21, 0x067B
    1f46:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    1f4a:	69 8f       	std	Y+25, r22	; 0x19
    1f4c:	7a 8f       	std	Y+26, r23	; 0x1a
    1f4e:	8b 8f       	std	Y+27, r24	; 0x1b
    1f50:	9c 8f       	std	Y+28, r25	; 0x1c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    1f52:	69 85       	ldd	r22, Y+9	; 0x09
    1f54:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f56:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f58:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f5a:	20 91 0e 05 	lds	r18, 0x050E
    1f5e:	30 91 0f 05 	lds	r19, 0x050F
    1f62:	40 91 10 05 	lds	r20, 0x0510
    1f66:	50 91 11 05 	lds	r21, 0x0511
    1f6a:	62 1b       	sub	r22, r18
    1f6c:	73 0b       	sbc	r23, r19
    1f6e:	84 0b       	sbc	r24, r20
    1f70:	95 0b       	sbc	r25, r21
    1f72:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    1f76:	20 91 7c 06 	lds	r18, 0x067C
    1f7a:	30 91 7d 06 	lds	r19, 0x067D
    1f7e:	40 91 7e 06 	lds	r20, 0x067E
    1f82:	50 91 7f 06 	lds	r21, 0x067F
    1f86:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    1f8a:	6d 8b       	std	Y+21, r22	; 0x15
    1f8c:	7e 8b       	std	Y+22, r23	; 0x16
    1f8e:	8f 8b       	std	Y+23, r24	; 0x17
    1f90:	98 8f       	std	Y+24, r25	; 0x18
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    1f92:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f94:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f98:	98 89       	ldd	r25, Y+16	; 0x10
    1f9a:	6a 19       	sub	r22, r10
    1f9c:	7b 09       	sbc	r23, r11
    1f9e:	8c 09       	sbc	r24, r12
    1fa0:	9d 09       	sbc	r25, r13
    1fa2:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    1fa6:	20 91 80 06 	lds	r18, 0x0680
    1faa:	30 91 81 06 	lds	r19, 0x0681
    1fae:	40 91 82 06 	lds	r20, 0x0682
    1fb2:	50 91 83 06 	lds	r21, 0x0683
    1fb6:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    1fba:	69 8b       	std	Y+17, r22	; 0x11
    1fbc:	7a 8b       	std	Y+18, r23	; 0x12
    1fbe:	8b 8b       	std	Y+19, r24	; 0x13
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    1fc2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fc4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1fc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc8:	98 a1       	ldd	r25, Y+32	; 0x20
    1fca:	0e 94 8b 20 	call	0x4116	; 0x4116 <square>
    1fce:	3b 01       	movw	r6, r22
    1fd0:	4c 01       	movw	r8, r24
    1fd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fda:	0e 94 8b 20 	call	0x4116	; 0x4116 <square>
    1fde:	7b 01       	movw	r14, r22
    1fe0:	8c 01       	movw	r16, r24
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	0e 94 8b 20 	call	0x4116	; 0x4116 <square>
    1fee:	5b 01       	movw	r10, r22
    1ff0:	6c 01       	movw	r12, r24
    1ff2:	69 89       	ldd	r22, Y+17	; 0x11
    1ff4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	0e 94 8b 20 	call	0x4116	; 0x4116 <square>
    1ffe:	1b 01       	movw	r2, r22
    2000:	2c 01       	movw	r4, r24
    2002:	c4 01       	movw	r24, r8
    2004:	b3 01       	movw	r22, r6
    2006:	a8 01       	movw	r20, r16
    2008:	97 01       	movw	r18, r14
    200a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    200e:	a6 01       	movw	r20, r12
    2010:	95 01       	movw	r18, r10
    2012:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    2016:	a2 01       	movw	r20, r4
    2018:	91 01       	movw	r18, r2
    201a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__addsf3>
    201e:	0e 94 4d 20 	call	0x409a	; 0x409a <sqrt>
    2022:	9b 01       	movw	r18, r22
    2024:	ac 01       	movw	r20, r24
    2026:	a9 a1       	ldd	r26, Y+33	; 0x21
    2028:	ba a1       	ldd	r27, Y+34	; 0x22
    202a:	9d 96       	adiw	r26, 0x2d	; 45
    202c:	6d 93       	st	X+, r22
    202e:	7d 93       	st	X+, r23
    2030:	8d 93       	st	X+, r24
    2032:	9c 93       	st	X, r25
    2034:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    2036:	60 96       	adiw	r28, 0x10	; 16
    2038:	8e ad       	ldd	r24, Y+62	; 0x3e
    203a:	9f ad       	ldd	r25, Y+63	; 0x3f
    203c:	60 97       	sbiw	r28, 0x10	; 16
    203e:	89 2b       	or	r24, r25
    2040:	89 f4       	brne	.+34     	; 0x2064 <plan_buffer_line+0x45e>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2042:	ca 01       	movw	r24, r20
    2044:	b9 01       	movw	r22, r18
    2046:	2e 96       	adiw	r28, 0x0e	; 14
    2048:	2c ad       	ldd	r18, Y+60	; 0x3c
    204a:	3d ad       	ldd	r19, Y+61	; 0x3d
    204c:	4e ad       	ldd	r20, Y+62	; 0x3e
    204e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2050:	2e 97       	sbiw	r28, 0x0e	; 14
    2052:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	34 e2       	ldi	r19, 0x24	; 36
    205a:	44 e7       	ldi	r20, 0x74	; 116
    205c:	59 e4       	ldi	r21, 0x49	; 73
    205e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    2062:	0c c0       	rjmp	.+24     	; 0x207c <plan_buffer_line+0x476>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2064:	60 ec       	ldi	r22, 0xC0	; 192
    2066:	71 ee       	ldi	r23, 0xE1	; 225
    2068:	84 e6       	ldi	r24, 0x64	; 100
    206a:	9c e4       	ldi	r25, 0x4C	; 76
    206c:	2e 96       	adiw	r28, 0x0e	; 14
    206e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2070:	3d ad       	ldd	r19, Y+61	; 0x3d
    2072:	4e ad       	ldd	r20, Y+62	; 0x3e
    2074:	5f ad       	ldd	r21, Y+63	; 0x3f
    2076:	2e 97       	sbiw	r28, 0x0e	; 14
    2078:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    207c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <lround>
    2080:	ac 01       	movw	r20, r24
    2082:	cb 01       	movw	r24, r22
    2084:	da 01       	movw	r26, r20
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    208a:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__floatunsisf>
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
    2092:	60 ec       	ldi	r22, 0xC0	; 192
    2094:	71 ee       	ldi	r23, 0xE1	; 225
    2096:	84 e6       	ldi	r24, 0x64	; 100
    2098:	9c e4       	ldi	r25, 0x4C	; 76
    209a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    209e:	7b 01       	movw	r14, r22
    20a0:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    20a2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20a4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a8:	98 a1       	ldd	r25, Y+32	; 0x20
    20aa:	a8 01       	movw	r20, r16
    20ac:	97 01       	movw	r18, r14
    20ae:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    20b2:	e9 a1       	ldd	r30, Y+33	; 0x21
    20b4:	fa a1       	ldd	r31, Y+34	; 0x22
    20b6:	61 8f       	std	Z+25, r22	; 0x19
    20b8:	72 8f       	std	Z+26, r23	; 0x1a
    20ba:	83 8f       	std	Z+27, r24	; 0x1b
    20bc:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_y = delta_y_mm * multiplier;
    20be:	69 8d       	ldd	r22, Y+25	; 0x19
    20c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c6:	a8 01       	movw	r20, r16
    20c8:	97 01       	movw	r18, r14
    20ca:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    20ce:	a9 a1       	ldd	r26, Y+33	; 0x21
    20d0:	ba a1       	ldd	r27, Y+34	; 0x22
    20d2:	5d 96       	adiw	r26, 0x1d	; 29
    20d4:	6d 93       	st	X+, r22
    20d6:	7d 93       	st	X+, r23
    20d8:	8d 93       	st	X+, r24
    20da:	9c 93       	st	X, r25
    20dc:	90 97       	sbiw	r26, 0x20	; 32
  block->speed_z = delta_z_mm * multiplier;
    20de:	6d 89       	ldd	r22, Y+21	; 0x15
    20e0:	7e 89       	ldd	r23, Y+22	; 0x16
    20e2:	8f 89       	ldd	r24, Y+23	; 0x17
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	a8 01       	movw	r20, r16
    20e8:	97 01       	movw	r18, r14
    20ea:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    20ee:	e9 a1       	ldd	r30, Y+33	; 0x21
    20f0:	fa a1       	ldd	r31, Y+34	; 0x22
    20f2:	61 a3       	std	Z+33, r22	; 0x21
    20f4:	72 a3       	std	Z+34, r23	; 0x22
    20f6:	83 a3       	std	Z+35, r24	; 0x23
    20f8:	94 a3       	std	Z+36, r25	; 0x24
  block->speed_c = delta_c_mm * multiplier;
    20fa:	69 89       	ldd	r22, Y+17	; 0x11
    20fc:	7a 89       	ldd	r23, Y+18	; 0x12
    20fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2100:	9c 89       	ldd	r25, Y+20	; 0x14
    2102:	a8 01       	movw	r20, r16
    2104:	97 01       	movw	r18, r14
    2106:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    210a:	a9 a1       	ldd	r26, Y+33	; 0x21
    210c:	ba a1       	ldd	r27, Y+34	; 0x22
    210e:	95 96       	adiw	r26, 0x25	; 37
    2110:	6d 93       	st	X+, r22
    2112:	7d 93       	st	X+, r23
    2114:	8d 93       	st	X+, r24
    2116:	9c 93       	st	X, r25
    2118:	98 97       	sbiw	r26, 0x28	; 40
  block->nominal_speed = block->millimeters * multiplier;
    211a:	9d 96       	adiw	r26, 0x2d	; 45
    211c:	6d 91       	ld	r22, X+
    211e:	7d 91       	ld	r23, X+
    2120:	8d 91       	ld	r24, X+
    2122:	9c 91       	ld	r25, X
    2124:	d0 97       	sbiw	r26, 0x30	; 48
    2126:	a8 01       	movw	r20, r16
    2128:	97 01       	movw	r18, r14
    212a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    212e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2130:	fa a1       	ldd	r31, Y+34	; 0x22
    2132:	61 a7       	std	Z+41, r22	; 0x29
    2134:	72 a7       	std	Z+42, r23	; 0x2a
    2136:	83 a7       	std	Z+43, r24	; 0x2b
    2138:	94 a7       	std	Z+44, r25	; 0x2c
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    213a:	61 89       	ldd	r22, Z+17	; 0x11
    213c:	72 89       	ldd	r23, Z+18	; 0x12
    213e:	83 89       	ldd	r24, Z+19	; 0x13
    2140:	94 89       	ldd	r25, Z+20	; 0x14
    2142:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__floatsisf>
    2146:	5b 01       	movw	r10, r22
    2148:	6c 01       	movw	r12, r24
    214a:	a8 01       	movw	r20, r16
    214c:	97 01       	movw	r18, r14
    214e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    2152:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <ceil>
    2156:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__fixunssfsi>
    215a:	3b 01       	movw	r6, r22
    215c:	4c 01       	movw	r8, r24
    215e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2160:	ba a1       	ldd	r27, Y+34	; 0x22
    2162:	55 96       	adiw	r26, 0x15	; 21
    2164:	6d 93       	st	X+, r22
    2166:	7d 93       	st	X+, r23
    2168:	8d 93       	st	X+, r24
    216a:	9c 93       	st	X, r25
    216c:	58 97       	sbiw	r26, 0x18	; 24
  block->entry_factor = 0.0;
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a0 e0       	ldi	r26, 0x00	; 0
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e9 a1       	ldd	r30, Y+33	; 0x21
    2178:	fa a1       	ldd	r31, Y+34	; 0x22
    217a:	81 ab       	std	Z+49, r24	; 0x31
    217c:	92 ab       	std	Z+50, r25	; 0x32
    217e:	a3 ab       	std	Z+51, r26	; 0x33
    2180:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2182:	60 91 92 06 	lds	r22, 0x0692
    2186:	70 91 93 06 	lds	r23, 0x0693
    218a:	80 91 94 06 	lds	r24, 0x0694
    218e:	90 91 95 06 	lds	r25, 0x0695
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e7       	ldi	r20, 0x70	; 112
    2198:	52 e4       	ldi	r21, 0x42	; 66
    219a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	52 e4       	ldi	r21, 0x42	; 66
    21a6:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    21aa:	7b 01       	movw	r14, r22
    21ac:	8c 01       	movw	r16, r24
    21ae:	a9 a1       	ldd	r26, Y+33	; 0x21
    21b0:	ba a1       	ldd	r27, Y+34	; 0x22
    21b2:	9d 96       	adiw	r26, 0x2d	; 45
    21b4:	6d 91       	ld	r22, X+
    21b6:	7d 91       	ld	r23, X+
    21b8:	8d 91       	ld	r24, X+
    21ba:	9c 91       	ld	r25, X
    21bc:	d0 97       	sbiw	r26, 0x30	; 48
    21be:	a6 01       	movw	r20, r12
    21c0:	95 01       	movw	r18, r10
    21c2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    21c6:	9b 01       	movw	r18, r22
    21c8:	ac 01       	movw	r20, r24
    21ca:	c8 01       	movw	r24, r16
    21cc:	b7 01       	movw	r22, r14
    21ce:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <__divsf3>
    21d2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <ceil>
    21d6:	09 a1       	ldd	r16, Y+33	; 0x21
    21d8:	1a a1       	ldd	r17, Y+34	; 0x22
    21da:	03 5c       	subi	r16, 0xC3	; 195
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
    21e2:	f8 01       	movw	r30, r16
    21e4:	60 83       	st	Z, r22
    21e6:	71 83       	std	Z+1, r23	; 0x01
    21e8:	82 83       	std	Z+2, r24	; 0x02
    21ea:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    21ec:	80 91 16 05 	lds	r24, 0x0516
    21f0:	88 23       	and	r24, r24
    21f2:	69 f0       	breq	.+26     	; 0x220e <__stack+0xf>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    21f4:	89 a1       	ldd	r24, Y+33	; 0x21
    21f6:	9a a1       	ldd	r25, Y+34	; 0x22
    21f8:	0e 94 2e 09 	call	0x125c	; 0x125c <factor_for_safe_speed>
    21fc:	8b 01       	movw	r16, r22
    21fe:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    2200:	89 a1       	ldd	r24, Y+33	; 0x21
    2202:	9a a1       	ldd	r25, Y+34	; 0x22
    2204:	b9 01       	movw	r22, r18
    2206:	a8 01       	movw	r20, r16
    2208:	0e 94 5f 0c 	call	0x18be	; 0x18be <calculate_trapezoid_for_block>
    220c:	26 c0       	rjmp	.+76     	; 0x225a <__stack+0x5b>
  } else {
    block->initial_rate = block->nominal_rate;
    220e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2210:	ba a1       	ldd	r27, Y+34	; 0x22
    2212:	d5 96       	adiw	r26, 0x35	; 53
    2214:	6d 92       	st	X+, r6
    2216:	7d 92       	st	X+, r7
    2218:	8d 92       	st	X+, r8
    221a:	9c 92       	st	X, r9
    221c:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    221e:	fd 01       	movw	r30, r26
    2220:	61 ae       	std	Z+57, r6	; 0x39
    2222:	72 ae       	std	Z+58, r7	; 0x3a
    2224:	83 ae       	std	Z+59, r8	; 0x3b
    2226:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    2228:	ef 5b       	subi	r30, 0xBF	; 191
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	10 82       	st	Z, r1
    222e:	11 82       	std	Z+1, r1	; 0x01
    2230:	12 82       	std	Z+2, r1	; 0x02
    2232:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    2234:	9d 01       	movw	r18, r26
    2236:	2b 5b       	subi	r18, 0xBB	; 187
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	fd 01       	movw	r30, r26
    223c:	81 89       	ldd	r24, Z+17	; 0x11
    223e:	92 89       	ldd	r25, Z+18	; 0x12
    2240:	a3 89       	ldd	r26, Z+19	; 0x13
    2242:	b4 89       	ldd	r27, Z+20	; 0x14
    2244:	f9 01       	movw	r30, r18
    2246:	80 83       	st	Z, r24
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	a2 83       	std	Z+2, r26	; 0x02
    224c:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    224e:	d8 01       	movw	r26, r16
    2250:	1d 92       	st	X+, r1
    2252:	1d 92       	st	X+, r1
    2254:	1d 92       	st	X+, r1
    2256:	1c 92       	st	X, r1
    2258:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    225a:	e9 a1       	ldd	r30, Y+33	; 0x21
    225c:	fa a1       	ldd	r31, Y+34	; 0x22
    225e:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    2260:	29 81       	ldd	r18, Y+1	; 0x01
    2262:	3a 81       	ldd	r19, Y+2	; 0x02
    2264:	4b 81       	ldd	r20, Y+3	; 0x03
    2266:	5c 81       	ldd	r21, Y+4	; 0x04
    2268:	80 91 06 05 	lds	r24, 0x0506
    226c:	90 91 07 05 	lds	r25, 0x0507
    2270:	a0 91 08 05 	lds	r26, 0x0508
    2274:	b0 91 09 05 	lds	r27, 0x0509
    2278:	28 17       	cp	r18, r24
    227a:	39 07       	cpc	r19, r25
    227c:	4a 07       	cpc	r20, r26
    227e:	5b 07       	cpc	r21, r27
    2280:	14 f4       	brge	.+4      	; 0x2286 <__stack+0x87>
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2286:	2d 81       	ldd	r18, Y+5	; 0x05
    2288:	3e 81       	ldd	r19, Y+6	; 0x06
    228a:	4f 81       	ldd	r20, Y+7	; 0x07
    228c:	58 85       	ldd	r21, Y+8	; 0x08
    228e:	80 91 0a 05 	lds	r24, 0x050A
    2292:	90 91 0b 05 	lds	r25, 0x050B
    2296:	a0 91 0c 05 	lds	r26, 0x050C
    229a:	b0 91 0d 05 	lds	r27, 0x050D
    229e:	28 17       	cp	r18, r24
    22a0:	39 07       	cpc	r19, r25
    22a2:	4a 07       	cpc	r20, r26
    22a4:	5b 07       	cpc	r21, r27
    22a6:	44 f4       	brge	.+16     	; 0x22b8 <__stack+0xb9>
    22a8:	a9 a1       	ldd	r26, Y+33	; 0x21
    22aa:	ba a1       	ldd	r27, Y+34	; 0x22
    22ac:	50 96       	adiw	r26, 0x10	; 16
    22ae:	8c 91       	ld	r24, X
    22b0:	50 97       	sbiw	r26, 0x10	; 16
    22b2:	88 60       	ori	r24, 0x08	; 8
    22b4:	50 96       	adiw	r26, 0x10	; 16
    22b6:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    22b8:	29 85       	ldd	r18, Y+9	; 0x09
    22ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    22bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    22be:	5c 85       	ldd	r21, Y+12	; 0x0c
    22c0:	80 91 0e 05 	lds	r24, 0x050E
    22c4:	90 91 0f 05 	lds	r25, 0x050F
    22c8:	a0 91 10 05 	lds	r26, 0x0510
    22cc:	b0 91 11 05 	lds	r27, 0x0511
    22d0:	28 17       	cp	r18, r24
    22d2:	39 07       	cpc	r19, r25
    22d4:	4a 07       	cpc	r20, r26
    22d6:	5b 07       	cpc	r21, r27
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <__stack+0xe5>
    22da:	e9 a1       	ldd	r30, Y+33	; 0x21
    22dc:	fa a1       	ldd	r31, Y+34	; 0x22
    22de:	80 89       	ldd	r24, Z+16	; 0x10
    22e0:	80 64       	ori	r24, 0x40	; 64
    22e2:	80 8b       	std	Z+16, r24	; 0x10
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    22e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    22e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    22e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    22ea:	58 89       	ldd	r21, Y+16	; 0x10
    22ec:	80 91 12 05 	lds	r24, 0x0512
    22f0:	90 91 13 05 	lds	r25, 0x0513
    22f4:	a0 91 14 05 	lds	r26, 0x0514
    22f8:	b0 91 15 05 	lds	r27, 0x0515
    22fc:	28 17       	cp	r18, r24
    22fe:	39 07       	cpc	r19, r25
    2300:	4a 07       	cpc	r20, r26
    2302:	5b 07       	cpc	r21, r27
    2304:	44 f4       	brge	.+16     	; 0x2316 <__stack+0x117>
    2306:	a9 a1       	ldd	r26, Y+33	; 0x21
    2308:	ba a1       	ldd	r27, Y+34	; 0x22
    230a:	50 96       	adiw	r26, 0x10	; 16
    230c:	8c 91       	ld	r24, X
    230e:	50 97       	sbiw	r26, 0x10	; 16
    2310:	80 68       	ori	r24, 0x80	; 128
    2312:	50 96       	adiw	r26, 0x10	; 16
    2314:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    2316:	eb a9       	ldd	r30, Y+51	; 0x33
    2318:	fc a9       	ldd	r31, Y+52	; 0x34
    231a:	f0 93 03 05 	sts	0x0503, r31
    231e:	e0 93 02 05 	sts	0x0502, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    2322:	a6 e0       	ldi	r26, 0x06	; 6
    2324:	b5 e0       	ldi	r27, 0x05	; 5
    2326:	fe 01       	movw	r30, r28
    2328:	31 96       	adiw	r30, 0x01	; 1
    232a:	80 e1       	ldi	r24, 0x10	; 16
    232c:	01 90       	ld	r0, Z+
    232e:	0d 92       	st	X+, r0
    2330:	81 50       	subi	r24, 0x01	; 1
    2332:	e1 f7       	brne	.-8      	; 0x232c <__stack+0x12d>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2334:	80 91 16 05 	lds	r24, 0x0516
    2338:	88 23       	and	r24, r24
    233a:	11 f0       	breq	.+4      	; 0x2340 <__stack+0x141>
    233c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <planner_recalculate>
  st_wake_up();
    2340:	0e 94 66 14 	call	0x28cc	; 0x28cc <st_wake_up>
}
    2344:	e4 96       	adiw	r28, 0x34	; 52
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	cf 90       	pop	r12
    2360:	bf 90       	pop	r11
    2362:	af 90       	pop	r10
    2364:	9f 90       	pop	r9
    2366:	8f 90       	pop	r8
    2368:	7f 90       	pop	r7
    236a:	6f 90       	pop	r6
    236c:	5f 90       	pop	r5
    236e:	4f 90       	pop	r4
    2370:	3f 90       	pop	r3
    2372:	2f 90       	pop	r2
    2374:	08 95       	ret

00002376 <sp_process>:
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	61 c0       	rjmp	.+194    	; 0x243e <sp_process+0xc8>
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    237c:	e0 91 49 05 	lds	r30, 0x0549
    2380:	ee 23       	and	r30, r30
    2382:	09 f4       	brne	.+2      	; 0x2386 <sp_process+0x10>
    2384:	4a c0       	rjmp	.+148    	; 0x241a <sp_process+0xa4>
    2386:	9a 30       	cpi	r25, 0x0A	; 10
    2388:	19 f0       	breq	.+6      	; 0x2390 <sp_process+0x1a>
    238a:	9d 30       	cpi	r25, 0x0D	; 13
    238c:	09 f0       	breq	.+2      	; 0x2390 <sp_process+0x1a>
    238e:	45 c0       	rjmp	.+138    	; 0x241a <sp_process+0xa4>
      line[char_counter] = 0; // terminate string
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	e9 5e       	subi	r30, 0xE9	; 233
    2394:	fa 4f       	sbci	r31, 0xFA	; 250
    2396:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2398:	87 e1       	ldi	r24, 0x17	; 23
    239a:	95 e0       	ldi	r25, 0x05	; 5
    239c:	0e 94 3d 04 	call	0x87a	; 0x87a <gc_execute_line>
    23a0:	68 2f       	mov	r22, r24
static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code)
{
	if( gHomed == FALSE ) {
    23a2:	80 91 4a 05 	lds	r24, 0x054A
    23a6:	88 23       	and	r24, r24
    23a8:	39 f4       	brne	.+14     	; 0x23b8 <sp_process+0x42>
    	printPgmString(PSTR("\r\nNot homed\n\r"));status_code = 99;
    23aa:	80 e9       	ldi	r24, 0x90	; 144
    23ac:	92 e0       	ldi	r25, 0x02	; 2
    23ae:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
    23b2:	c3 e6       	ldi	r28, 0x63	; 99
    23b4:	d0 e0       	ldi	r29, 0x00	; 0
    23b6:	1f c0       	rjmp	.+62     	; 0x23f6 <sp_process+0x80>
	}

  switch(status_code) {          
    23b8:	62 30       	cpi	r22, 0x02	; 2
    23ba:	91 f0       	breq	.+36     	; 0x23e0 <sp_process+0x6a>
    23bc:	63 30       	cpi	r22, 0x03	; 3
    23be:	28 f4       	brcc	.+10     	; 0x23ca <sp_process+0x54>
    23c0:	66 23       	and	r22, r22
    23c2:	41 f0       	breq	.+16     	; 0x23d4 <sp_process+0x5e>
    23c4:	61 30       	cpi	r22, 0x01	; 1
    23c6:	a9 f4       	brne	.+42     	; 0x23f2 <sp_process+0x7c>
    23c8:	08 c0       	rjmp	.+16     	; 0x23da <sp_process+0x64>
    23ca:	63 30       	cpi	r22, 0x03	; 3
    23cc:	61 f0       	breq	.+24     	; 0x23e6 <sp_process+0x70>
    23ce:	64 30       	cpi	r22, 0x04	; 4
    23d0:	81 f4       	brne	.+32     	; 0x23f2 <sp_process+0x7c>
    23d2:	0c c0       	rjmp	.+24     	; 0x23ec <sp_process+0x76>
    case GCSTATUS_OK:
    	printPgmString(PSTR("ok\n\r")); 
    23d4:	8b e8       	ldi	r24, 0x8B	; 139
    23d6:	92 e0       	ldi	r25, 0x02	; 2
    23d8:	1b c0       	rjmp	.+54     	; 0x2410 <sp_process+0x9a>
		break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    	printPgmString(PSTR("error: Bad number format\n\r")); 
    23da:	80 e7       	ldi	r24, 0x70	; 112
    23dc:	92 e0       	ldi	r25, 0x02	; 2
    23de:	18 c0       	rjmp	.+48     	; 0x2410 <sp_process+0x9a>
		break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    	printPgmString(PSTR("error: Expected command letter\n\r")); 
    23e0:	8f e4       	ldi	r24, 0x4F	; 79
    23e2:	92 e0       	ldi	r25, 0x02	; 2
    23e4:	15 c0       	rjmp	.+42     	; 0x2410 <sp_process+0x9a>
		break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    	printPgmString(PSTR("error: Unsupported statement\n\r")); 
    23e6:	80 e3       	ldi	r24, 0x30	; 48
    23e8:	92 e0       	ldi	r25, 0x02	; 2
    23ea:	12 c0       	rjmp	.+36     	; 0x2410 <sp_process+0x9a>
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
    23ec:	82 e1       	ldi	r24, 0x12	; 18
    23ee:	92 e0       	ldi	r25, 0x02	; 2
    23f0:	0f c0       	rjmp	.+30     	; 0x2410 <sp_process+0x9a>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    23f2:	c6 2f       	mov	r28, r22
    23f4:	d0 e0       	ldi	r29, 0x00	; 0
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
		break;
    default:
    	printPgmString(PSTR("error: "));
    23f6:	8a e0       	ldi	r24, 0x0A	; 10
    23f8:	92 e0       	ldi	r25, 0x02	; 2
    23fa:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
    	printInteger(status_code);
    23fe:	be 01       	movw	r22, r28
    2400:	88 27       	eor	r24, r24
    2402:	77 fd       	sbrc	r23, 7
    2404:	80 95       	com	r24
    2406:	98 2f       	mov	r25, r24
    2408:	0e 94 ba 1a 	call	0x3574	; 0x3574 <printInteger>
    	printPgmString(PSTR("\n\r"));
    240c:	87 e0       	ldi	r24, 0x07	; 7
    240e:	92 e0       	ldi	r25, 0x02	; 2
    2410:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2414:	10 92 49 05 	sts	0x0549, r1
    2418:	12 c0       	rjmp	.+36     	; 0x243e <sp_process+0xc8>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    241a:	91 32       	cpi	r25, 0x21	; 33
    241c:	84 f0       	brlt	.+32     	; 0x243e <sp_process+0xc8>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    241e:	89 2f       	mov	r24, r25
    2420:	81 56       	subi	r24, 0x61	; 97
    2422:	ae 2f       	mov	r26, r30
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ef 5f       	subi	r30, 0xFF	; 255
    2428:	8a 31       	cpi	r24, 0x1A	; 26
    242a:	20 f4       	brcc	.+8      	; 0x2434 <sp_process+0xbe>
      line[char_counter++] = c-'a'+'A';
    242c:	a9 5e       	subi	r26, 0xE9	; 233
    242e:	ba 4f       	sbci	r27, 0xFA	; 250
    2430:	90 52       	subi	r25, 0x20	; 32
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <sp_process+0xc2>
    } else {
      line[char_counter++] = c;
    2434:	a9 5e       	subi	r26, 0xE9	; 233
    2436:	ba 4f       	sbci	r27, 0xFA	; 250
    2438:	9c 93       	st	X, r25
    243a:	e0 93 49 05 	sts	0x0549, r30

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    243e:	0e 94 a0 19 	call	0x3340	; 0x3340 <serialRead>
    2442:	98 2f       	mov	r25, r24
    2444:	8f 3f       	cpi	r24, 0xFF	; 255
    2446:	09 f0       	breq	.+2      	; 0x244a <sp_process+0xd4>
    2448:	99 cf       	rjmp	.-206    	; 0x237c <sp_process+0x6>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	08 95       	ret

00002450 <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	76 e9       	ldi	r23, 0x96	; 150
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	0e 94 4b 19 	call	0x3296	; 0x3296 <beginSerial>
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
    245c:	81 ea       	ldi	r24, 0xA1	; 161
    245e:	92 e0       	ldi	r25, 0x02	; 2
    2460:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printPgmString(PSTR("\r\n"));  
    2464:	8e e9       	ldi	r24, 0x9E	; 158
    2466:	92 e0       	ldi	r25, 0x02	; 2
    2468:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
}
    246c:	08 95       	ret

0000246e <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    246e:	84 ef       	ldi	r24, 0xF4	; 244
    2470:	99 ef       	ldi	r25, 0xF9	; 249
    2472:	ac e3       	ldi	r26, 0x3C	; 60
    2474:	b4 e4       	ldi	r27, 0x44	; 68
    2476:	80 93 74 06 	sts	0x0674, r24
    247a:	90 93 75 06 	sts	0x0675, r25
    247e:	a0 93 76 06 	sts	0x0676, r26
    2482:	b0 93 77 06 	sts	0x0677, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2486:	80 93 78 06 	sts	0x0678, r24
    248a:	90 93 79 06 	sts	0x0679, r25
    248e:	a0 93 7a 06 	sts	0x067A, r26
    2492:	b0 93 7b 06 	sts	0x067B, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2496:	80 93 7c 06 	sts	0x067C, r24
    249a:	90 93 7d 06 	sts	0x067D, r25
    249e:	a0 93 7e 06 	sts	0x067E, r26
    24a2:	b0 93 7f 06 	sts	0x067F, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    24a6:	81 ec       	ldi	r24, 0xC1	; 193
    24a8:	9a ec       	ldi	r25, 0xCA	; 202
    24aa:	a1 e3       	ldi	r26, 0x31	; 49
    24ac:	b2 e4       	ldi	r27, 0x42	; 66
    24ae:	80 93 80 06 	sts	0x0680, r24
    24b2:	90 93 81 06 	sts	0x0681, r25
    24b6:	a0 93 82 06 	sts	0x0682, r26
    24ba:	b0 93 83 06 	sts	0x0683, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    24be:	88 e0       	ldi	r24, 0x08	; 8
    24c0:	80 93 85 06 	sts	0x0685, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 ef       	ldi	r26, 0xF0	; 240
    24ca:	b3 e4       	ldi	r27, 0x43	; 67
    24cc:	80 93 86 06 	sts	0x0686, r24
    24d0:	90 93 87 06 	sts	0x0687, r25
    24d4:	a0 93 88 06 	sts	0x0688, r26
    24d8:	b0 93 89 06 	sts	0x0689, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    24dc:	80 93 8a 06 	sts	0x068A, r24
    24e0:	90 93 8b 06 	sts	0x068B, r25
    24e4:	a0 93 8c 06 	sts	0x068C, r26
    24e8:	b0 93 8d 06 	sts	0x068D, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    24ec:	8a e9       	ldi	r24, 0x9A	; 154
    24ee:	99 e9       	ldi	r25, 0x99	; 153
    24f0:	a9 e9       	ldi	r26, 0x99	; 153
    24f2:	b0 e4       	ldi	r27, 0x40	; 64
    24f4:	80 93 92 06 	sts	0x0692, r24
    24f8:	90 93 93 06 	sts	0x0693, r25
    24fc:	a0 93 94 06 	sts	0x0694, r26
    2500:	b0 93 95 06 	sts	0x0695, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2504:	8d ec       	ldi	r24, 0xCD	; 205
    2506:	9c ec       	ldi	r25, 0xCC	; 204
    2508:	ac ec       	ldi	r26, 0xCC	; 204
    250a:	bd e3       	ldi	r27, 0x3D	; 61
    250c:	80 93 8e 06 	sts	0x068E, r24
    2510:	90 93 8f 06 	sts	0x068F, r25
    2514:	a0 93 90 06 	sts	0x0690, r26
    2518:	b0 93 91 06 	sts	0x0691, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a8 e4       	ldi	r26, 0x48	; 72
    2522:	b2 e4       	ldi	r27, 0x42	; 66
    2524:	80 93 96 06 	sts	0x0696, r24
    2528:	90 93 97 06 	sts	0x0697, r25
    252c:	a0 93 98 06 	sts	0x0698, r26
    2530:	b0 93 99 06 	sts	0x0699, r27
}
    2534:	08 95       	ret

00002536 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    253e:	87 36       	cpi	r24, 0x67	; 103
    2540:	81 f4       	brne	.+32     	; 0x2562 <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2542:	84 e7       	ldi	r24, 0x74	; 116
    2544:	96 e0       	ldi	r25, 0x06	; 6
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	46 e2       	ldi	r20, 0x26	; 38
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy_from_eeprom_with_checksum>
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	89 2b       	or	r24, r25
    2556:	09 f4       	brne	.+2      	; 0x255a <read_settings+0x24>
    2558:	21 e0       	ldi	r18, 0x01	; 1
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	28 27       	eor	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	29 c0       	rjmp	.+82     	; 0x25b4 <read_settings+0x7e>
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	29 f5       	brne	.+74     	; 0x25b0 <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2566:	84 e7       	ldi	r24, 0x74	; 116
    2568:	96 e0       	ldi	r25, 0x06	; 6
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	4b e1       	ldi	r20, 0x1B	; 27
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	0e 94 51 03 	call	0x6a2	; 0x6a2 <memcpy_from_eeprom_with_checksum>
    2576:	89 2b       	or	r24, r25
    2578:	d9 f0       	breq	.+54     	; 0x25b0 <read_settings+0x7a>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    257a:	8a e9       	ldi	r24, 0x9A	; 154
    257c:	99 e9       	ldi	r25, 0x99	; 153
    257e:	a9 e9       	ldi	r26, 0x99	; 153
    2580:	b0 e4       	ldi	r27, 0x40	; 64
    2582:	80 93 92 06 	sts	0x0692, r24
    2586:	90 93 93 06 	sts	0x0693, r25
    258a:	a0 93 94 06 	sts	0x0694, r26
    258e:	b0 93 95 06 	sts	0x0695, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a8 e4       	ldi	r26, 0x48	; 72
    2598:	b2 e4       	ldi	r27, 0x42	; 66
    259a:	80 93 96 06 	sts	0x0696, r24
    259e:	90 93 97 06 	sts	0x0697, r25
    25a2:	a0 93 98 06 	sts	0x0698, r26
    25a6:	b0 93 99 06 	sts	0x0699, r27
    25aa:	21 e0       	ldi	r18, 0x01	; 1
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <read_settings+0x7e>
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    25b4:	c9 01       	movw	r24, r18
    25b6:	08 95       	ret

000025b8 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	67 e6       	ldi	r22, 0x67	; 103
    25be:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	64 e7       	ldi	r22, 0x74	; 116
    25c8:	76 e0       	ldi	r23, 0x06	; 6
    25ca:	46 e2       	ldi	r20, 0x26	; 38
    25cc:	50 e0       	ldi	r21, 0x00	; 0
    25ce:	0e 94 07 03 	call	0x60e	; 0x60e <memcpy_to_eeprom_with_checksum>
}
    25d2:	08 95       	ret

000025d4 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    25d4:	fc 01       	movw	r30, r24
  switch(parameter) {
    25d6:	86 30       	cpi	r24, 0x06	; 6
    25d8:	91 05       	cpc	r25, r1
    25da:	b9 f1       	breq	.+110    	; 0x264a <settings_store_setting+0x76>
    25dc:	87 30       	cpi	r24, 0x07	; 7
    25de:	91 05       	cpc	r25, r1
    25e0:	4c f4       	brge	.+18     	; 0x25f4 <settings_store_setting+0x20>
    25e2:	84 30       	cpi	r24, 0x04	; 4
    25e4:	91 05       	cpc	r25, r1
    25e6:	f9 f0       	breq	.+62     	; 0x2626 <settings_store_setting+0x52>
    25e8:	85 30       	cpi	r24, 0x05	; 5
    25ea:	91 05       	cpc	r25, r1
    25ec:	2c f5       	brge	.+74     	; 0x2638 <settings_store_setting+0x64>
    25ee:	97 ff       	sbrs	r25, 7
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <settings_store_setting+0x3c>
    25f2:	62 c0       	rjmp	.+196    	; 0x26b8 <settings_store_setting+0xe4>
    25f4:	88 30       	cpi	r24, 0x08	; 8
    25f6:	91 05       	cpc	r25, r1
    25f8:	d1 f1       	breq	.+116    	; 0x266e <settings_store_setting+0x9a>
    25fa:	88 30       	cpi	r24, 0x08	; 8
    25fc:	91 05       	cpc	r25, r1
    25fe:	74 f1       	brlt	.+92     	; 0x265c <settings_store_setting+0x88>
    2600:	89 30       	cpi	r24, 0x09	; 9
    2602:	91 05       	cpc	r25, r1
    2604:	e9 f1       	breq	.+122    	; 0x2680 <settings_store_setting+0xac>
    2606:	e8 5e       	subi	r30, 0xE8	; 232
    2608:	f3 40       	sbci	r31, 0x03	; 3
    260a:	09 f0       	breq	.+2      	; 0x260e <settings_store_setting+0x3a>
    260c:	55 c0       	rjmp	.+170    	; 0x26b8 <settings_store_setting+0xe4>
    260e:	44 c0       	rjmp	.+136    	; 0x2698 <settings_store_setting+0xc4>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2610:	ee 0f       	add	r30, r30
    2612:	ff 1f       	adc	r31, r31
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	ec 58       	subi	r30, 0x8C	; 140
    261a:	f9 4f       	sbci	r31, 0xF9	; 249
    261c:	40 83       	st	Z, r20
    261e:	51 83       	std	Z+1, r21	; 0x01
    2620:	62 83       	std	Z+2, r22	; 0x02
    2622:	73 83       	std	Z+3, r23	; 0x03
    2624:	4c c0       	rjmp	.+152    	; 0x26be <settings_store_setting+0xea>
    case 4: settings.pulse_microseconds = round(value); break;
    2626:	cb 01       	movw	r24, r22
    2628:	ba 01       	movw	r22, r20
    262a:	0e 94 29 20 	call	0x4052	; 0x4052 <round>
    262e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__fixunssfsi>
    2632:	60 93 85 06 	sts	0x0685, r22
    2636:	43 c0       	rjmp	.+134    	; 0x26be <settings_store_setting+0xea>
    case 5: settings.default_feed_rate = value; break;
    2638:	40 93 86 06 	sts	0x0686, r20
    263c:	50 93 87 06 	sts	0x0687, r21
    2640:	60 93 88 06 	sts	0x0688, r22
    2644:	70 93 89 06 	sts	0x0689, r23
    2648:	3a c0       	rjmp	.+116    	; 0x26be <settings_store_setting+0xea>
    case 6: settings.default_seek_rate = value; break;
    264a:	40 93 8a 06 	sts	0x068A, r20
    264e:	50 93 8b 06 	sts	0x068B, r21
    2652:	60 93 8c 06 	sts	0x068C, r22
    2656:	70 93 8d 06 	sts	0x068D, r23
    265a:	31 c0       	rjmp	.+98     	; 0x26be <settings_store_setting+0xea>
    case 7: settings.mm_per_arc_segment = value; break;
    265c:	40 93 8e 06 	sts	0x068E, r20
    2660:	50 93 8f 06 	sts	0x068F, r21
    2664:	60 93 90 06 	sts	0x0690, r22
    2668:	70 93 91 06 	sts	0x0691, r23
    266c:	28 c0       	rjmp	.+80     	; 0x26be <settings_store_setting+0xea>
    case 8: settings.acceleration = value; break;
    266e:	40 93 92 06 	sts	0x0692, r20
    2672:	50 93 93 06 	sts	0x0693, r21
    2676:	60 93 94 06 	sts	0x0694, r22
    267a:	70 93 95 06 	sts	0x0695, r23
    267e:	1f c0       	rjmp	.+62     	; 0x26be <settings_store_setting+0xea>
    case 9: settings.max_jerk = fabs(value); break;
    2680:	db 01       	movw	r26, r22
    2682:	ca 01       	movw	r24, r20
    2684:	bf 77       	andi	r27, 0x7F	; 127
    2686:	80 93 96 06 	sts	0x0696, r24
    268a:	90 93 97 06 	sts	0x0697, r25
    268e:	a0 93 98 06 	sts	0x0698, r26
    2692:	b0 93 99 06 	sts	0x0699, r27
    2696:	13 c0       	rjmp	.+38     	; 0x26be <settings_store_setting+0xea>
    case 1000:
	  if (!!value) st_enable();
    2698:	cb 01       	movw	r24, r22
    269a:	ba 01       	movw	r22, r20
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__cmpsf2>
    26a8:	88 23       	and	r24, r24
    26aa:	19 f0       	breq	.+6      	; 0x26b2 <settings_store_setting+0xde>
    26ac:	0e 94 81 14 	call	0x2902	; 0x2902 <st_enable>
    26b0:	08 95       	ret
      else st_disable();
    26b2:	0e 94 83 14 	call	0x2906	; 0x2906 <st_disable>
    26b6:	08 95       	ret
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    26b8:	84 e2       	ldi	r24, 0x24	; 36
    26ba:	93 e0       	ldi	r25, 0x03	; 3
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <settings_store_setting+0xf2>
      return;
  }
  write_settings();
    26be:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    26c2:	8f e0       	ldi	r24, 0x0F	; 15
    26c4:	93 e0       	ldi	r25, 0x03	; 3
    26c6:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
    26ca:	08 95       	ret

000026cc <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    26cc:	86 ef       	ldi	r24, 0xF6	; 246
    26ce:	94 e0       	ldi	r25, 0x04	; 4
    26d0:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    26d4:	81 ef       	ldi	r24, 0xF1	; 241
    26d6:	94 e0       	ldi	r25, 0x04	; 4
    26d8:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printPgmString(PSTR("\r\n"));
    26dc:	8e ee       	ldi	r24, 0xEE	; 238
    26de:	94 e0       	ldi	r25, 0x04	; 4
    26e0:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    26e4:	88 ee       	ldi	r24, 0xE8	; 232
    26e6:	94 e0       	ldi	r25, 0x04	; 4
    26e8:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    26ec:	60 91 74 06 	lds	r22, 0x0674
    26f0:	70 91 75 06 	lds	r23, 0x0675
    26f4:	80 91 76 06 	lds	r24, 0x0676
    26f8:	90 91 77 06 	lds	r25, 0x0677
    26fc:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2700:	88 ed       	ldi	r24, 0xD8	; 216
    2702:	94 e0       	ldi	r25, 0x04	; 4
    2704:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2708:	82 ed       	ldi	r24, 0xD2	; 210
    270a:	94 e0       	ldi	r25, 0x04	; 4
    270c:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2710:	60 91 78 06 	lds	r22, 0x0678
    2714:	70 91 79 06 	lds	r23, 0x0679
    2718:	80 91 7a 06 	lds	r24, 0x067A
    271c:	90 91 7b 06 	lds	r25, 0x067B
    2720:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2724:	82 ec       	ldi	r24, 0xC2	; 194
    2726:	94 e0       	ldi	r25, 0x04	; 4
    2728:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    272c:	8c eb       	ldi	r24, 0xBC	; 188
    272e:	94 e0       	ldi	r25, 0x04	; 4
    2730:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2734:	60 91 7c 06 	lds	r22, 0x067C
    2738:	70 91 7d 06 	lds	r23, 0x067D
    273c:	80 91 7e 06 	lds	r24, 0x067E
    2740:	90 91 7f 06 	lds	r25, 0x067F
    2744:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2748:	8c ea       	ldi	r24, 0xAC	; 172
    274a:	94 e0       	ldi	r25, 0x04	; 4
    274c:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2750:	86 ea       	ldi	r24, 0xA6	; 166
    2752:	94 e0       	ldi	r25, 0x04	; 4
    2754:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2758:	60 91 80 06 	lds	r22, 0x0680
    275c:	70 91 81 06 	lds	r23, 0x0681
    2760:	80 91 82 06 	lds	r24, 0x0682
    2764:	90 91 83 06 	lds	r25, 0x0683
    2768:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    276c:	84 e9       	ldi	r24, 0x94	; 148
    276e:	94 e0       	ldi	r25, 0x04	; 4
    2770:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2774:	8e e8       	ldi	r24, 0x8E	; 142
    2776:	94 e0       	ldi	r25, 0x04	; 4
    2778:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printInteger(settings.pulse_microseconds);
    277c:	60 91 85 06 	lds	r22, 0x0685
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 ba 1a 	call	0x3574	; 0x3574 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    278a:	81 e7       	ldi	r24, 0x71	; 113
    278c:	94 e0       	ldi	r25, 0x04	; 4
    278e:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2792:	8b e6       	ldi	r24, 0x6B	; 107
    2794:	94 e0       	ldi	r25, 0x04	; 4
    2796:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.default_feed_rate);
    279a:	60 91 86 06 	lds	r22, 0x0686
    279e:	70 91 87 06 	lds	r23, 0x0687
    27a2:	80 91 88 06 	lds	r24, 0x0688
    27a6:	90 91 89 06 	lds	r25, 0x0689
    27aa:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    27ae:	8d e4       	ldi	r24, 0x4D	; 77
    27b0:	94 e0       	ldi	r25, 0x04	; 4
    27b2:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    27b6:	87 e4       	ldi	r24, 0x47	; 71
    27b8:	94 e0       	ldi	r25, 0x04	; 4
    27ba:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.default_seek_rate);
    27be:	60 91 8a 06 	lds	r22, 0x068A
    27c2:	70 91 8b 06 	lds	r23, 0x068B
    27c6:	80 91 8c 06 	lds	r24, 0x068C
    27ca:	90 91 8d 06 	lds	r25, 0x068D
    27ce:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    27d2:	89 e2       	ldi	r24, 0x29	; 41
    27d4:	94 e0       	ldi	r25, 0x04	; 4
    27d6:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    27da:	83 e2       	ldi	r24, 0x23	; 35
    27dc:	94 e0       	ldi	r25, 0x04	; 4
    27de:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    27e2:	60 91 8e 06 	lds	r22, 0x068E
    27e6:	70 91 8f 06 	lds	r23, 0x068F
    27ea:	80 91 90 06 	lds	r24, 0x0690
    27ee:	90 91 91 06 	lds	r25, 0x0691
    27f2:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    27f6:	8f e0       	ldi	r24, 0x0F	; 15
    27f8:	94 e0       	ldi	r25, 0x04	; 4
    27fa:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    27fe:	89 e0       	ldi	r24, 0x09	; 9
    2800:	94 e0       	ldi	r25, 0x04	; 4
    2802:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.acceleration);
    2806:	60 91 92 06 	lds	r22, 0x0692
    280a:	70 91 93 06 	lds	r23, 0x0693
    280e:	80 91 94 06 	lds	r24, 0x0694
    2812:	90 91 95 06 	lds	r25, 0x0695
    2816:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    281a:	8b ee       	ldi	r24, 0xEB	; 235
    281c:	93 e0       	ldi	r25, 0x03	; 3
    281e:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2822:	85 ee       	ldi	r24, 0xE5	; 229
    2824:	93 e0       	ldi	r25, 0x03	; 3
    2826:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printFloat(settings.max_jerk);
    282a:	60 91 96 06 	lds	r22, 0x0696
    282e:	70 91 97 06 	lds	r23, 0x0697
    2832:	80 91 98 06 	lds	r24, 0x0698
    2836:	90 91 99 06 	lds	r25, 0x0699
    283a:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    283e:	8d ea       	ldi	r24, 0xAD	; 173
    2840:	93 e0       	ldi	r25, 0x03	; 3
    2842:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2846:	84 ea       	ldi	r24, 0xA4	; 164
    2848:	93 e0       	ldi	r25, 0x03	; 3
    284a:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  printInteger(st_is_enabled());
    284e:	0e 94 85 14 	call	0x290a	; 0x290a <st_is_enabled>
    2852:	aa 27       	eor	r26, r26
    2854:	97 fd       	sbrc	r25, 7
    2856:	a0 95       	com	r26
    2858:	ba 2f       	mov	r27, r26
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2862:	8b e7       	ldi	r24, 0x7B	; 123
    2864:	93 e0       	ldi	r25, 0x03	; 3
    2866:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    286a:	88 e3       	ldi	r24, 0x38	; 56
    286c:	93 e0       	ldi	r25, 0x03	; 3
    286e:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
}
    2872:	08 95       	ret

00002874 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2874:	0e 94 9b 12 	call	0x2536	; 0x2536 <read_settings>
    2878:	89 2b       	or	r24, r25
    287a:	29 f0       	breq	.+10     	; 0x2886 <settings_init+0x12>
    printPgmString(PSTR("'$' to dump current settings\r\n"));
    287c:	80 ef       	ldi	r24, 0xF0	; 240
    287e:	92 e0       	ldi	r25, 0x02	; 2
    2880:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
    2884:	08 95       	ret
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    2886:	85 eb       	ldi	r24, 0xB5	; 181
    2888:	92 e0       	ldi	r25, 0x02	; 2
    288a:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
    settings_reset();
    288e:	0e 94 37 12 	call	0x246e	; 0x246e <settings_reset>
    write_settings();
    2892:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <write_settings>
    settings_dump();
    2896:	0e 94 66 13 	call	0x26cc	; 0x26cc <settings_dump>
    289a:	08 95       	ret

0000289c <spindle_init>:

#include <avr/io.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    289c:	e1 e0       	ldi	r30, 0x01	; 1
    289e:	f1 e0       	ldi	r31, 0x01	; 1
    28a0:	80 81       	ld	r24, Z
    28a2:	80 64       	ori	r24, 0x40	; 64
    28a4:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    28a6:	27 9a       	sbi	0x04, 7	; 4
}
    28a8:	08 95       	ret

000028aa <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    28aa:	97 fd       	sbrc	r25, 7
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <spindle_run+0x8>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    28ae:	2f 98       	cbi	0x05, 7	; 5
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <spindle_run+0xa>
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    28b2:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    28b4:	80 91 02 01 	lds	r24, 0x0102
    28b8:	80 64       	ori	r24, 0x40	; 64
    28ba:	80 93 02 01 	sts	0x0102, r24
}
    28be:	08 95       	ret

000028c0 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    28c0:	e2 e0       	ldi	r30, 0x02	; 2
    28c2:	f1 e0       	ldi	r31, 0x01	; 1
    28c4:	80 81       	ld	r24, Z
    28c6:	8f 7b       	andi	r24, 0xBF	; 191
    28c8:	80 83       	st	Z, r24
}
    28ca:	08 95       	ret

000028cc <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    28cc:	ef e6       	ldi	r30, 0x6F	; 111
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	82 60       	ori	r24, 0x02	; 2
    28d4:	80 83       	st	Z, r24
}
    28d6:	08 95       	ret

000028d8 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	90 93 63 05 	sts	0x0563, r25
    28de:	80 93 62 05 	sts	0x0562, r24
}
    28e2:	08 95       	ret

000028e4 <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    28e4:	1f 92       	push	r1
    28e6:	0f 92       	push	r0
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	0f 92       	push	r0
    28ec:	11 24       	eor	r1, r1
    28ee:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    28f0:	81 b3       	in	r24, 0x11	; 17
    28f2:	8a 7c       	andi	r24, 0xCA	; 202
    28f4:	81 bb       	out	0x11, r24	; 17
}
    28f6:	8f 91       	pop	r24
    28f8:	0f 90       	pop	r0
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	0f 90       	pop	r0
    28fe:	1f 90       	pop	r1
    2900:	18 95       	reti

00002902 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2902:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2904:	08 95       	ret

00002906 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2906:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2908:	08 95       	ret

0000290a <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    290a:	3c 99       	sbic	0x07, 4	; 7
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <st_is_enabled+0xa>
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	07 c0       	rjmp	.+14     	; 0x2922 <st_is_enabled+0x18>
    2914:	88 b1       	in	r24, 0x08	; 8
    2916:	82 95       	swap	r24
    2918:	8f 70       	andi	r24, 0x0F	; 15
    291a:	80 95       	com	r24
    291c:	81 70       	andi	r24, 0x01	; 1
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2922:	c9 01       	movw	r24, r18
    2924:	08 95       	ret

00002926 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2926:	60 30       	cpi	r22, 0x00	; 0
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	72 07       	cpc	r23, r18
    292c:	21 e0       	ldi	r18, 0x01	; 1
    292e:	82 07       	cpc	r24, r18
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	92 07       	cpc	r25, r18
    2934:	30 f4       	brcc	.+12     	; 0x2942 <config_step_timer+0x1c>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    2936:	9b 01       	movw	r18, r22
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	50 e0       	ldi	r21, 0x00	; 0
    293c:	e0 e0       	ldi	r30, 0x00	; 0
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	72 c0       	rjmp	.+228    	; 0x2a26 <config_step_timer+0x100>
	} else if (cycles <= 0x7ffffL) {
    2942:	60 30       	cpi	r22, 0x00	; 0
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	72 07       	cpc	r23, r18
    2948:	28 e0       	ldi	r18, 0x08	; 8
    294a:	82 07       	cpc	r24, r18
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	92 07       	cpc	r25, r18
    2950:	a0 f4       	brcc	.+40     	; 0x297a <config_step_timer+0x54>
    ceiling = cycles >> 3;
    2952:	b3 e0       	ldi	r27, 0x03	; 3
    2954:	96 95       	lsr	r25
    2956:	87 95       	ror	r24
    2958:	77 95       	ror	r23
    295a:	67 95       	ror	r22
    295c:	ba 95       	dec	r27
    295e:	d1 f7       	brne	.-12     	; 0x2954 <config_step_timer+0x2e>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2960:	9b 01       	movw	r18, r22
    2962:	40 e0       	ldi	r20, 0x00	; 0
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	a3 e0       	ldi	r26, 0x03	; 3
    2968:	22 0f       	add	r18, r18
    296a:	33 1f       	adc	r19, r19
    296c:	44 1f       	adc	r20, r20
    296e:	55 1f       	adc	r21, r21
    2970:	aa 95       	dec	r26
    2972:	d1 f7       	brne	.-12     	; 0x2968 <config_step_timer+0x42>
    2974:	e1 e0       	ldi	r30, 0x01	; 1
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	56 c0       	rjmp	.+172    	; 0x2a26 <config_step_timer+0x100>
	} else if (cycles <= 0x3fffffL) {
    297a:	60 30       	cpi	r22, 0x00	; 0
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	72 07       	cpc	r23, r18
    2980:	20 e4       	ldi	r18, 0x40	; 64
    2982:	82 07       	cpc	r24, r18
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	92 07       	cpc	r25, r18
    2988:	a0 f4       	brcc	.+40     	; 0x29b2 <config_step_timer+0x8c>
		ceiling =  cycles >> 6;
    298a:	f6 e0       	ldi	r31, 0x06	; 6
    298c:	96 95       	lsr	r25
    298e:	87 95       	ror	r24
    2990:	77 95       	ror	r23
    2992:	67 95       	ror	r22
    2994:	fa 95       	dec	r31
    2996:	d1 f7       	brne	.-12     	; 0x298c <config_step_timer+0x66>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    2998:	9b 01       	movw	r18, r22
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	e6 e0       	ldi	r30, 0x06	; 6
    29a0:	22 0f       	add	r18, r18
    29a2:	33 1f       	adc	r19, r19
    29a4:	44 1f       	adc	r20, r20
    29a6:	55 1f       	adc	r21, r21
    29a8:	ea 95       	dec	r30
    29aa:	d1 f7       	brne	.-12     	; 0x29a0 <config_step_timer+0x7a>
    29ac:	e2 e0       	ldi	r30, 0x02	; 2
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	3a c0       	rjmp	.+116    	; 0x2a26 <config_step_timer+0x100>
	} else if (cycles <= 0xffffffL) {
    29b2:	60 30       	cpi	r22, 0x00	; 0
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	72 07       	cpc	r23, r18
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	82 07       	cpc	r24, r18
    29bc:	21 e0       	ldi	r18, 0x01	; 1
    29be:	92 07       	cpc	r25, r18
    29c0:	70 f4       	brcc	.+28     	; 0x29de <config_step_timer+0xb8>
		ceiling =  (cycles >> 8);
    29c2:	bb 27       	eor	r27, r27
    29c4:	a9 2f       	mov	r26, r25
    29c6:	98 2f       	mov	r25, r24
    29c8:	87 2f       	mov	r24, r23
    29ca:	bc 01       	movw	r22, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    29cc:	a0 e0       	ldi	r26, 0x00	; 0
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	22 27       	eor	r18, r18
    29d2:	38 2f       	mov	r19, r24
    29d4:	49 2f       	mov	r20, r25
    29d6:	5a 2f       	mov	r21, r26
    29d8:	e3 e0       	ldi	r30, 0x03	; 3
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	24 c0       	rjmp	.+72     	; 0x2a26 <config_step_timer+0x100>
	} else if (cycles <= 0x3ffffffL) {
    29de:	60 30       	cpi	r22, 0x00	; 0
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	72 07       	cpc	r23, r18
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	82 07       	cpc	r24, r18
    29e8:	24 e0       	ldi	r18, 0x04	; 4
    29ea:	92 07       	cpc	r25, r18
    29ec:	48 f0       	brcs	.+18     	; 0x2a00 <config_step_timer+0xda>
    29ee:	6f ef       	ldi	r22, 0xFF	; 255
    29f0:	7f ef       	ldi	r23, 0xFF	; 255
    29f2:	e4 e0       	ldi	r30, 0x04	; 4
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3c ef       	ldi	r19, 0xFC	; 252
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	13 c0       	rjmp	.+38     	; 0x2a26 <config_step_timer+0x100>
		ceiling = (cycles >> 10);
    2a00:	2a e0       	ldi	r18, 0x0A	; 10
    2a02:	96 95       	lsr	r25
    2a04:	87 95       	ror	r24
    2a06:	77 95       	ror	r23
    2a08:	67 95       	ror	r22
    2a0a:	2a 95       	dec	r18
    2a0c:	d1 f7       	brne	.-12     	; 0x2a02 <config_step_timer+0xdc>
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    2a0e:	9b 01       	movw	r18, r22
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	8a e0       	ldi	r24, 0x0A	; 10
    2a16:	22 0f       	add	r18, r18
    2a18:	33 1f       	adc	r19, r19
    2a1a:	44 1f       	adc	r20, r20
    2a1c:	55 1f       	adc	r21, r21
    2a1e:	8a 95       	dec	r24
    2a20:	d1 f7       	brne	.-12     	; 0x2a16 <config_step_timer+0xf0>
    2a22:	e4 e0       	ldi	r30, 0x04	; 4
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    2a26:	80 91 81 00 	lds	r24, 0x0081
    2a2a:	9e 2f       	mov	r25, r30
    2a2c:	9f 5f       	subi	r25, 0xFF	; 255
    2a2e:	88 7f       	andi	r24, 0xF8	; 248
    2a30:	98 2b       	or	r25, r24
    2a32:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    2a36:	70 93 89 00 	sts	0x0089, r23
    2a3a:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}
    2a3e:	b9 01       	movw	r22, r18
    2a40:	ca 01       	movw	r24, r20
    2a42:	08 95       	ret

00002a44 <set_step_events_per_minute>:

void set_step_events_per_minute(uint32_t steps_per_minute) {
    2a44:	9b 01       	movw	r18, r22
    2a46:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    2a48:	20 3b       	cpi	r18, 0xB0	; 176
    2a4a:	84 e0       	ldi	r24, 0x04	; 4
    2a4c:	38 07       	cpc	r19, r24
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	48 07       	cpc	r20, r24
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	58 07       	cpc	r21, r24
    2a56:	20 f4       	brcc	.+8      	; 0x2a60 <set_step_events_per_minute+0x1c>
    2a58:	20 eb       	ldi	r18, 0xB0	; 176
    2a5a:	34 e0       	ldi	r19, 0x04	; 4
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	70 e7       	ldi	r23, 0x70	; 112
    2a64:	88 e3       	ldi	r24, 0x38	; 56
    2a66:	99 e3       	ldi	r25, 0x39	; 57
    2a68:	0e 94 ce 20 	call	0x419c	; 0x419c <__udivmodsi4>
    2a6c:	ca 01       	movw	r24, r20
    2a6e:	b9 01       	movw	r22, r18
    2a70:	0e 94 93 14 	call	0x2926	; 0x2926 <config_step_timer>
    2a74:	60 93 64 05 	sts	0x0564, r22
    2a78:	70 93 65 05 	sts	0x0565, r23
    2a7c:	80 93 66 05 	sts	0x0566, r24
    2a80:	90 93 67 05 	sts	0x0567, r25
}
    2a84:	08 95       	ret

00002a86 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    2a86:	80 b3       	in	r24, 0x10	; 16
    2a88:	85 63       	ori	r24, 0x35	; 53
    2a8a:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    2a8c:	80 b3       	in	r24, 0x10	; 16
    2a8e:	8a 6c       	ori	r24, 0xCA	; 202
    2a90:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    2a92:	81 b3       	in	r24, 0x11	; 17
    2a94:	8a 7c       	andi	r24, 0xCA	; 202
    2a96:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2a98:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2a9a:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    2a9c:	e1 e8       	ldi	r30, 0x81	; 129
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	8f 7e       	andi	r24, 0xEF	; 239
    2aa4:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2aa6:	80 81       	ld	r24, Z
    2aa8:	88 60       	ori	r24, 0x08	; 8
    2aaa:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    2aac:	e0 e8       	ldi	r30, 0x80	; 128
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8d 7f       	andi	r24, 0xFD	; 253
    2ab4:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8e 7f       	andi	r24, 0xFE	; 254
    2aba:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    2abc:	80 81       	ld	r24, Z
    2abe:	8f 73       	andi	r24, 0x3F	; 63
    2ac0:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    2ac2:	80 81       	ld	r24, Z
    2ac4:	8f 7c       	andi	r24, 0xCF	; 207
    2ac6:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    2ac8:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    2acc:	82 e0       	ldi	r24, 0x02	; 2
    2ace:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    2ad2:	e0 e7       	ldi	r30, 0x70	; 112
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	81 60       	ori	r24, 0x01	; 1
    2ada:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    2adc:	60 e7       	ldi	r22, 0x70	; 112
    2ade:	77 e1       	ldi	r23, 0x17	; 23
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 94 22 15 	call	0x2a44	; 0x2a44 <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2ae8:	ef e6       	ldi	r30, 0x6F	; 111
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	8d 7f       	andi	r24, 0xFD	; 253
    2af0:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    2af2:	10 92 68 05 	sts	0x0568, r1
    2af6:	10 92 69 05 	sts	0x0569, r1
    2afa:	10 92 6a 05 	sts	0x056A, r1
    2afe:	10 92 6b 05 	sts	0x056B, r1
  
  sei();
    2b02:	78 94       	sei
}
    2b04:	08 95       	ret

00002b06 <moveLeft>:

#define PULSE_LENGTH	( 10 )
#define PULSE_OFF_LENGTH ( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    2b06:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2b08:	81 b3       	in	r24, 0x11	; 17
    2b0a:	85 73       	andi	r24, 0x35	; 53
    2b0c:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b0e:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b10:	40 e6       	ldi	r20, 0x60	; 96
    2b12:	54 e0       	ldi	r21, 0x04	; 4
    2b14:	13 c0       	rjmp	.+38     	; 0x2b3c <moveLeft+0x36>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) return 0;
    2b16:	21 50       	subi	r18, 0x01	; 1
    2b18:	30 40       	sbci	r19, 0x00	; 0
    2b1a:	4b 9b       	sbis	0x09, 3	; 9
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <moveLeft+0x1c>
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	08 95       	ret

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2b22:	81 b3       	in	r24, 0x11	; 17
    2b24:	8a 7c       	andi	r24, 0xCA	; 202
    2b26:	81 60       	ori	r24, 0x01	; 1
    2b28:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b2a:	89 2f       	mov	r24, r25
    2b2c:	8a 95       	dec	r24
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <moveLeft+0x26>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2b30:	81 b3       	in	r24, 0x11	; 17
    2b32:	8a 7c       	andi	r24, 0xCA	; 202
    2b34:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b36:	fa 01       	movw	r30, r20
    2b38:	31 97       	sbiw	r30, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <moveLeft+0x32>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2b3c:	21 15       	cp	r18, r1
    2b3e:	31 05       	cpc	r19, r1
    2b40:	51 f7       	brne	.-44     	; 0x2b16 <moveLeft+0x10>
    2b42:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    2b44:	08 95       	ret

00002b46 <moveRight>:

unsigned char moveRight( unsigned int distance ) 
{
    2b46:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    2b48:	81 b3       	in	r24, 0x11	; 17
    2b4a:	85 73       	andi	r24, 0x35	; 53
    2b4c:	82 60       	ori	r24, 0x02	; 2
    2b4e:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b50:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b52:	40 e6       	ldi	r20, 0x60	; 96
    2b54:	54 e0       	ldi	r21, 0x04	; 4
    2b56:	13 c0       	rjmp	.+38     	; 0x2b7e <moveRight+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    2b58:	21 50       	subi	r18, 0x01	; 1
    2b5a:	30 40       	sbci	r19, 0x00	; 0
    2b5c:	4a 9b       	sbis	0x09, 2	; 9
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <moveRight+0x1e>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	08 95       	ret
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2b64:	81 b3       	in	r24, 0x11	; 17
    2b66:	8a 7c       	andi	r24, 0xCA	; 202
    2b68:	81 60       	ori	r24, 0x01	; 1
    2b6a:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b6c:	89 2f       	mov	r24, r25
    2b6e:	8a 95       	dec	r24
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <moveRight+0x28>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    2b72:	81 b3       	in	r24, 0x11	; 17
    2b74:	8a 7c       	andi	r24, 0xCA	; 202
    2b76:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b78:	fa 01       	movw	r30, r20
    2b7a:	31 97       	sbiw	r30, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <moveRight+0x34>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2b7e:	21 15       	cp	r18, r1
    2b80:	31 05       	cpc	r19, r1
    2b82:	51 f7       	brne	.-44     	; 0x2b58 <moveRight+0x12>
    2b84:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2b86:	08 95       	ret

00002b88 <moveForward>:

unsigned char moveForward( unsigned int distance ) 
{
    2b88:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2b8a:	81 b3       	in	r24, 0x11	; 17
    2b8c:	85 73       	andi	r24, 0x35	; 53
    2b8e:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b90:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b92:	40 e6       	ldi	r20, 0x60	; 96
    2b94:	54 e0       	ldi	r21, 0x04	; 4
    2b96:	0f c0       	rjmp	.+30     	; 0x2bb6 <moveForward+0x2e>
  // Then pulse the stepping pins
  while(distance--) {
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2b98:	81 b3       	in	r24, 0x11	; 17
    2b9a:	8a 7c       	andi	r24, 0xCA	; 202
    2b9c:	84 60       	ori	r24, 0x04	; 4
    2b9e:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ba0:	89 2f       	mov	r24, r25
    2ba2:	8a 95       	dec	r24
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <moveForward+0x1a>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2ba6:	81 b3       	in	r24, 0x11	; 17
    2ba8:	8a 7c       	andi	r24, 0xCA	; 202
    2baa:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bac:	fa 01       	movw	r30, r20
    2bae:	31 97       	sbiw	r30, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <moveForward+0x26>
    2bb2:	21 50       	subi	r18, 0x01	; 1
    2bb4:	30 40       	sbci	r19, 0x00	; 0
unsigned char moveForward( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2bb6:	21 15       	cp	r18, r1
    2bb8:	31 05       	cpc	r19, r1
    2bba:	71 f7       	brne	.-36     	; 0x2b98 <moveForward+0x10>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	08 95       	ret

00002bc0 <moveBack>:

unsigned char moveBack( unsigned int distance ) 
{
    2bc0:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    2bc2:	81 b3       	in	r24, 0x11	; 17
    2bc4:	85 73       	andi	r24, 0x35	; 53
    2bc6:	88 60       	ori	r24, 0x08	; 8
    2bc8:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bca:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bcc:	40 e6       	ldi	r20, 0x60	; 96
    2bce:	54 e0       	ldi	r21, 0x04	; 4
    2bd0:	0f c0       	rjmp	.+30     	; 0x2bf0 <moveBack+0x30>
  // Then pulse the stepping pins
  while(distance--) {
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2bd2:	81 b3       	in	r24, 0x11	; 17
    2bd4:	8a 7c       	andi	r24, 0xCA	; 202
    2bd6:	84 60       	ori	r24, 0x04	; 4
    2bd8:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bda:	89 2f       	mov	r24, r25
    2bdc:	8a 95       	dec	r24
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <moveBack+0x1c>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2be0:	81 b3       	in	r24, 0x11	; 17
    2be2:	8a 7c       	andi	r24, 0xCA	; 202
    2be4:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be6:	fa 01       	movw	r30, r20
    2be8:	31 97       	sbiw	r30, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <moveBack+0x28>
    2bec:	21 50       	subi	r18, 0x01	; 1
    2bee:	30 40       	sbci	r19, 0x00	; 0
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2bf0:	21 15       	cp	r18, r1
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	71 f7       	brne	.-36     	; 0x2bd2 <moveBack+0x12>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	08 95       	ret

00002bfa <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    2bfa:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    2c00:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    2c02:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    2c04:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    2c06:	9f e8       	ldi	r25, 0x8F	; 143
    2c08:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    2c0a:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    2c0c:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    2c10:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    2c14:	3f ec       	ldi	r19, 0xCF	; 207
    2c16:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    2c1a:	20 ef       	ldi	r18, 0xF0	; 240
    2c1c:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    2c20:	8c e9       	ldi	r24, 0x9C	; 156
    2c22:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    2c24:	82 e2       	ldi	r24, 0x22	; 34
    2c26:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    2c28:	83 e1       	ldi	r24, 0x13	; 19
    2c2a:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    2c2c:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    2c2e:	80 e3       	ldi	r24, 0x30	; 48
    2c30:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    2c32:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    2c34:	83 e2       	ldi	r24, 0x23	; 35
    2c36:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    2c38:	83 e0       	ldi	r24, 0x03	; 3
    2c3a:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    2c3e:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    2c42:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    2c46:	20 93 0b 01 	sts	0x010B, r18
}
    2c4a:	08 95       	ret

00002c4c <st_go_home>:
	// default direction is to go left and forward
	unsigned char xDir = LEFT;
	unsigned char yDir = FORWARD;

	// not homed
	gHomed = FALSE;
    2c4c:	10 92 4a 05 	sts	0x054A, r1

// reset position machine thinks we are at.
	plan_init();
    2c50:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <plan_init>
	gc_init();
    2c54:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gc_init>

	// no interrupts
	cli();
    2c58:	f8 94       	cli

	// if head down, set head up
	if( is_head_down() ) {
    2c5a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <is_head_down>
    2c5e:	88 23       	and	r24, r24
    2c60:	69 f0       	breq	.+26     	; 0x2c7c <st_go_home+0x30>
		head_down(0);
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0e 94 12 1c 	call	0x3824	; 0x3824 <head_down>
		
		//check again
		if(is_head_down() ){
    2c6a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <is_head_down>
    2c6e:	88 23       	and	r24, r24
    2c70:	29 f0       	breq	.+10     	; 0x2c7c <st_go_home+0x30>
			printPgmString(PSTR("home failed\r\n"));
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	95 e0       	ldi	r25, 0x05	; 5
    2c76:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
    2c7a:	08 95       	ret
		}

	}

	// tool changer off
	atc_change(0);	
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 33 1b 	call	0x3666	; 0x3666 <atc_change>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    2c84:	4b 9b       	sbis	0x09, 3	; 9
    2c86:	16 c0       	rjmp	.+44     	; 0x2cb4 <st_go_home+0x68>
		// no longer homed
		gHomed = FALSE;
    2c88:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("xLimit1\r\n"));
    2c8c:	80 e1       	ldi	r24, 0x10	; 16
    2c8e:	95 e0       	ldi	r25, 0x05	; 5
    2c90:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    2c94:	88 ee       	ldi	r24, 0xE8	; 232
    2c96:	93 e0       	ldi	r25, 0x03	; 3
    2c98:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <moveRight>
    2c9c:	88 23       	and	r24, r24
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <st_go_home+0x56>
    2ca0:	44 c0       	rjmp	.+136    	; 0x2d2a <st_go_home+0xde>
			return;
    2ca2:	80 ed       	ldi	r24, 0xD0	; 208
    2ca4:	97 e0       	ldi	r25, 0x07	; 7
    2ca6:	20 e9       	ldi	r18, 0x90	; 144
    2ca8:	31 e0       	ldi	r19, 0x01	; 1
    2caa:	f9 01       	movw	r30, r18
    2cac:	31 97       	sbiw	r30, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <st_go_home+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb2:	d9 f7       	brne	.-10     	; 0x2caa <st_go_home+0x5e>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    2cb4:	48 9b       	sbis	0x09, 0	; 9
    2cb6:	15 c0       	rjmp	.+42     	; 0x2ce2 <st_go_home+0x96>
		// no longer homed
		gHomed = FALSE;
    2cb8:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("yLimit1\r\n"));
    2cbc:	8a e1       	ldi	r24, 0x1A	; 26
    2cbe:	95 e0       	ldi	r25, 0x05	; 5
    2cc0:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    2cc4:	88 ee       	ldi	r24, 0xE8	; 232
    2cc6:	93 e0       	ldi	r25, 0x03	; 3
    2cc8:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <moveBack>
    2ccc:	88 23       	and	r24, r24
    2cce:	69 f1       	breq	.+90     	; 0x2d2a <st_go_home+0xde>
			return;
    2cd0:	80 ed       	ldi	r24, 0xD0	; 208
    2cd2:	97 e0       	ldi	r25, 0x07	; 7
    2cd4:	20 e9       	ldi	r18, 0x90	; 144
    2cd6:	31 e0       	ldi	r19, 0x01	; 1
    2cd8:	f9 01       	movw	r30, r18
    2cda:	31 97       	sbiw	r30, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <st_go_home+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	d9 f7       	brne	.-10     	; 0x2cd8 <st_go_home+0x8c>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    2ce2:	04 99       	sbic	0x00, 4	; 0
    2ce4:	07 c0       	rjmp	.+14     	; 0x2cf4 <st_go_home+0xa8>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	0e 94 83 15 	call	0x2b06	; 0x2b06 <moveLeft>
    2cee:	88 23       	and	r24, r24
    2cf0:	c1 f7       	brne	.-16     	; 0x2ce2 <st_go_home+0x96>
    2cf2:	11 c0       	rjmp	.+34     	; 0x2d16 <st_go_home+0xca>
    2cf4:	80 ed       	ldi	r24, 0xD0	; 208
    2cf6:	97 e0       	ldi	r25, 0x07	; 7
    2cf8:	20 e9       	ldi	r18, 0x90	; 144
    2cfa:	31 e0       	ldi	r19, 0x01	; 1
    2cfc:	f9 01       	movw	r30, r18
    2cfe:	31 97       	sbiw	r30, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <st_go_home+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d02:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d04:	d9 f7       	brne	.-10     	; 0x2cfc <st_go_home+0xb0>
	do {

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    2d06:	90 99       	sbic	0x12, 0	; 18
    2d08:	06 c0       	rjmp	.+12     	; 0x2d16 <st_go_home+0xca>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <moveForward>
    2d12:	88 23       	and	r24, r24
    2d14:	c1 f7       	brne	.-16     	; 0x2d06 <st_go_home+0xba>
		}

	} while( yDir != STOP );
error:;

	sei();
    2d16:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    2d18:	89 b1       	in	r24, 0x09	; 9
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	8f 70       	andi	r24, 0x0F	; 15
    2d1e:	90 70       	andi	r25, 0x00	; 0
    2d20:	89 2b       	or	r24, r25
    2d22:	19 f4       	brne	.+6      	; 0x2d2a <st_go_home+0xde>
		gHomed = TRUE ;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	80 93 4a 05 	sts	0x054A, r24
    2d2a:	08 95       	ret

00002d2c <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    2d2c:	07 c0       	rjmp	.+14     	; 0x2d3c <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    2d2e:	83 b7       	in	r24, 0x33	; 51
    2d30:	81 60       	ori	r24, 0x01	; 1
    2d32:	83 bf       	out	0x33, r24	; 51
    2d34:	88 95       	sleep
    2d36:	83 b7       	in	r24, 0x33	; 51
    2d38:	8e 7f       	andi	r24, 0xFE	; 254
    2d3a:	83 bf       	out	0x33, r24	; 51
    2d3c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <plan_get_current_block>
    2d40:	89 2b       	or	r24, r25
    2d42:	a9 f7       	brne	.-22     	; 0x2d2e <st_synchronize+0x2>
}
    2d44:	08 95       	ret

00002d46 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    2d46:	1f 92       	push	r1
    2d48:	0f 92       	push	r0
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	0f 92       	push	r0
    2d4e:	0b b6       	in	r0, 0x3b	; 59
    2d50:	0f 92       	push	r0
    2d52:	11 24       	eor	r1, r1
    2d54:	ef 92       	push	r14
    2d56:	ff 92       	push	r15
    2d58:	0f 93       	push	r16
    2d5a:	1f 93       	push	r17
    2d5c:	2f 93       	push	r18
    2d5e:	3f 93       	push	r19
    2d60:	4f 93       	push	r20
    2d62:	5f 93       	push	r21
    2d64:	6f 93       	push	r22
    2d66:	7f 93       	push	r23
    2d68:	8f 93       	push	r24
    2d6a:	9f 93       	push	r25
    2d6c:	af 93       	push	r26
    2d6e:	bf 93       	push	r27
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	ef 93       	push	r30
    2d76:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE ) 
    2d78:	80 91 4a 05 	lds	r24, 0x054A
    2d7c:	88 23       	and	r24, r24
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <__vector_17+0x3c>
    2d80:	71 c2       	rjmp	.+1250   	; 0x3264 <__vector_17+0x51e>
		return;

// don't move if the head is down  
  if( is_head_down() )
    2d82:	0e 94 0a 1c 	call	0x3814	; 0x3814 <is_head_down>
    2d86:	88 23       	and	r24, r24
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <__vector_17+0x46>
    2d8a:	6c c2       	rjmp	.+1240   	; 0x3264 <__vector_17+0x51e>
  	return;

  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    2d8c:	80 91 62 05 	lds	r24, 0x0562
    2d90:	90 91 63 05 	lds	r25, 0x0563
    2d94:	89 2b       	or	r24, r25
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <__vector_17+0x54>
    2d98:	65 c2       	rjmp	.+1226   	; 0x3264 <__vector_17+0x51e>

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    2d9a:	89 b1       	in	r24, 0x09	; 9
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	8f 70       	andi	r24, 0x0F	; 15
    2da0:	90 70       	andi	r25, 0x00	; 0
    2da2:	89 2b       	or	r24, r25
    2da4:	19 f0       	breq	.+6      	; 0x2dac <__vector_17+0x66>
  	gHomed = FALSE ;
    2da6:	10 92 4a 05 	sts	0x054A, r1
    2daa:	5c c2       	rjmp	.+1208   	; 0x3264 <__vector_17+0x51e>
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    2dac:	91 b3       	in	r25, 0x11	; 17
    2dae:	80 91 9a 06 	lds	r24, 0x069A
    2db2:	8a 7c       	andi	r24, 0xCA	; 202
    2db4:	95 73       	andi	r25, 0x35	; 53
    2db6:	89 2b       	or	r24, r25
    2db8:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    2dba:	81 b3       	in	r24, 0x11	; 17
    2dbc:	8a 7c       	andi	r24, 0xCA	; 202
    2dbe:	90 91 4d 05 	lds	r25, 0x054D
    2dc2:	89 2b       	or	r24, r25
    2dc4:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    2dc6:	80 91 85 06 	lds	r24, 0x0685
    2dca:	88 0f       	add	r24, r24
    2dcc:	84 50       	subi	r24, 0x04	; 4
    2dce:	81 95       	neg	r24
    2dd0:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    2dd4:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	90 93 63 05 	sts	0x0563, r25
    2dde:	80 93 62 05 	sts	0x0562, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    2de2:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    2de4:	80 91 4b 05 	lds	r24, 0x054B
    2de8:	90 91 4c 05 	lds	r25, 0x054C
    2dec:	89 2b       	or	r24, r25
    2dee:	09 f0       	breq	.+2      	; 0x2df2 <__vector_17+0xac>
    2df0:	5d c0       	rjmp	.+186    	; 0x2eac <__vector_17+0x166>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    2df2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <plan_get_current_block>
    2df6:	ec 01       	movw	r28, r24
    2df8:	90 93 4c 05 	sts	0x054C, r25
    2dfc:	80 93 4b 05 	sts	0x054B, r24
    if (current_block != NULL) {
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <__vector_17+0xc0>
    2e04:	4e c0       	rjmp	.+156    	; 0x2ea2 <__vector_17+0x15c>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    2e06:	6d a9       	ldd	r22, Y+53	; 0x35
    2e08:	7e a9       	ldd	r23, Y+54	; 0x36
    2e0a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e0e:	60 93 6c 05 	sts	0x056C, r22
    2e12:	70 93 6d 05 	sts	0x056D, r23
    2e16:	80 93 6e 05 	sts	0x056E, r24
    2e1a:	90 93 6f 05 	sts	0x056F, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    2e1e:	10 92 68 05 	sts	0x0568, r1
    2e22:	10 92 69 05 	sts	0x0569, r1
    2e26:	10 92 6a 05 	sts	0x056A, r1
    2e2a:	10 92 6b 05 	sts	0x056B, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    2e2e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    2e32:	89 89       	ldd	r24, Y+17	; 0x11
    2e34:	9a 89       	ldd	r25, Y+18	; 0x12
    2e36:	ab 89       	ldd	r26, Y+19	; 0x13
    2e38:	bc 89       	ldd	r27, Y+20	; 0x14
    2e3a:	b5 95       	asr	r27
    2e3c:	a7 95       	ror	r26
    2e3e:	97 95       	ror	r25
    2e40:	87 95       	ror	r24
    2e42:	b0 95       	com	r27
    2e44:	a0 95       	com	r26
    2e46:	90 95       	com	r25
    2e48:	81 95       	neg	r24
    2e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4c:	af 4f       	sbci	r26, 0xFF	; 255
    2e4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e50:	80 93 4e 05 	sts	0x054E, r24
    2e54:	90 93 4f 05 	sts	0x054F, r25
    2e58:	a0 93 50 05 	sts	0x0550, r26
    2e5c:	b0 93 51 05 	sts	0x0551, r27
      counter_y = counter_x;
    2e60:	80 93 52 05 	sts	0x0552, r24
    2e64:	90 93 53 05 	sts	0x0553, r25
    2e68:	a0 93 54 05 	sts	0x0554, r26
    2e6c:	b0 93 55 05 	sts	0x0555, r27
      counter_z = counter_x;
    2e70:	80 93 56 05 	sts	0x0556, r24
    2e74:	90 93 57 05 	sts	0x0557, r25
    2e78:	a0 93 58 05 	sts	0x0558, r26
    2e7c:	b0 93 59 05 	sts	0x0559, r27
      counter_c = counter_x;
    2e80:	80 93 5a 05 	sts	0x055A, r24
    2e84:	90 93 5b 05 	sts	0x055B, r25
    2e88:	a0 93 5c 05 	sts	0x055C, r26
    2e8c:	b0 93 5d 05 	sts	0x055D, r27
      step_events_completed = 0;
    2e90:	10 92 5e 05 	sts	0x055E, r1
    2e94:	10 92 5f 05 	sts	0x055F, r1
    2e98:	10 92 60 05 	sts	0x0560, r1
    2e9c:	10 92 61 05 	sts	0x0561, r1
    2ea0:	05 c0       	rjmp	.+10     	; 0x2eac <__vector_17+0x166>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    2ea2:	80 91 6f 00 	lds	r24, 0x006F
    2ea6:	8d 7f       	andi	r24, 0xFD	; 253
    2ea8:	80 93 6f 00 	sts	0x006F, r24
    }    
  } 

  if (current_block != NULL) {
    2eac:	e0 91 4b 05 	lds	r30, 0x054B
    2eb0:	f0 91 4c 05 	lds	r31, 0x054C
    2eb4:	30 97       	sbiw	r30, 0x00	; 0
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <__vector_17+0x174>
    2eb8:	ee c0       	rjmp	.+476    	; 0x3096 <__vector_17+0x350>
    dir_bits = current_block->direction_bits;
    2eba:	80 89       	ldd	r24, Z+16	; 0x10
    2ebc:	80 93 9a 06 	sts	0x069A, r24
    out_bits = 0;
    2ec0:	10 92 4d 05 	sts	0x054D, r1
    counter_x += current_block->steps_x;
    2ec4:	20 91 4e 05 	lds	r18, 0x054E
    2ec8:	30 91 4f 05 	lds	r19, 0x054F
    2ecc:	40 91 50 05 	lds	r20, 0x0550
    2ed0:	50 91 51 05 	lds	r21, 0x0551
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	a2 81       	ldd	r26, Z+2	; 0x02
    2eda:	b3 81       	ldd	r27, Z+3	; 0x03
    2edc:	28 0f       	add	r18, r24
    2ede:	39 1f       	adc	r19, r25
    2ee0:	4a 1f       	adc	r20, r26
    2ee2:	5b 1f       	adc	r21, r27
    2ee4:	20 93 4e 05 	sts	0x054E, r18
    2ee8:	30 93 4f 05 	sts	0x054F, r19
    2eec:	40 93 50 05 	sts	0x0550, r20
    2ef0:	50 93 51 05 	sts	0x0551, r21
    if (counter_x > 0) {
    2ef4:	12 16       	cp	r1, r18
    2ef6:	13 06       	cpc	r1, r19
    2ef8:	14 06       	cpc	r1, r20
    2efa:	15 06       	cpc	r1, r21
    2efc:	9c f4       	brge	.+38     	; 0x2f24 <__vector_17+0x1de>
      out_bits |= (1<<X_STEP_BIT);
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	80 93 4d 05 	sts	0x054D, r24
      counter_x -= current_block->step_event_count;
    2f04:	81 89       	ldd	r24, Z+17	; 0x11
    2f06:	92 89       	ldd	r25, Z+18	; 0x12
    2f08:	a3 89       	ldd	r26, Z+19	; 0x13
    2f0a:	b4 89       	ldd	r27, Z+20	; 0x14
    2f0c:	28 1b       	sub	r18, r24
    2f0e:	39 0b       	sbc	r19, r25
    2f10:	4a 0b       	sbc	r20, r26
    2f12:	5b 0b       	sbc	r21, r27
    2f14:	20 93 4e 05 	sts	0x054E, r18
    2f18:	30 93 4f 05 	sts	0x054F, r19
    2f1c:	40 93 50 05 	sts	0x0550, r20
    2f20:	50 93 51 05 	sts	0x0551, r21
    }
    counter_y += current_block->steps_y;
    2f24:	20 91 52 05 	lds	r18, 0x0552
    2f28:	30 91 53 05 	lds	r19, 0x0553
    2f2c:	40 91 54 05 	lds	r20, 0x0554
    2f30:	50 91 55 05 	lds	r21, 0x0555
    2f34:	84 81       	ldd	r24, Z+4	; 0x04
    2f36:	95 81       	ldd	r25, Z+5	; 0x05
    2f38:	a6 81       	ldd	r26, Z+6	; 0x06
    2f3a:	b7 81       	ldd	r27, Z+7	; 0x07
    2f3c:	28 0f       	add	r18, r24
    2f3e:	39 1f       	adc	r19, r25
    2f40:	4a 1f       	adc	r20, r26
    2f42:	5b 1f       	adc	r21, r27
    2f44:	20 93 52 05 	sts	0x0552, r18
    2f48:	30 93 53 05 	sts	0x0553, r19
    2f4c:	40 93 54 05 	sts	0x0554, r20
    2f50:	50 93 55 05 	sts	0x0555, r21
    if (counter_y > 0) {
    2f54:	12 16       	cp	r1, r18
    2f56:	13 06       	cpc	r1, r19
    2f58:	14 06       	cpc	r1, r20
    2f5a:	15 06       	cpc	r1, r21
    2f5c:	ac f4       	brge	.+42     	; 0x2f88 <__vector_17+0x242>
      out_bits |= (1<<Y_STEP_BIT);
    2f5e:	80 91 4d 05 	lds	r24, 0x054D
    2f62:	84 60       	ori	r24, 0x04	; 4
    2f64:	80 93 4d 05 	sts	0x054D, r24
      counter_y -= current_block->step_event_count;
    2f68:	81 89       	ldd	r24, Z+17	; 0x11
    2f6a:	92 89       	ldd	r25, Z+18	; 0x12
    2f6c:	a3 89       	ldd	r26, Z+19	; 0x13
    2f6e:	b4 89       	ldd	r27, Z+20	; 0x14
    2f70:	28 1b       	sub	r18, r24
    2f72:	39 0b       	sbc	r19, r25
    2f74:	4a 0b       	sbc	r20, r26
    2f76:	5b 0b       	sbc	r21, r27
    2f78:	20 93 52 05 	sts	0x0552, r18
    2f7c:	30 93 53 05 	sts	0x0553, r19
    2f80:	40 93 54 05 	sts	0x0554, r20
    2f84:	50 93 55 05 	sts	0x0555, r21
    }
    counter_z += current_block->steps_z;
    2f88:	20 91 56 05 	lds	r18, 0x0556
    2f8c:	30 91 57 05 	lds	r19, 0x0557
    2f90:	40 91 58 05 	lds	r20, 0x0558
    2f94:	50 91 59 05 	lds	r21, 0x0559
    2f98:	80 85       	ldd	r24, Z+8	; 0x08
    2f9a:	91 85       	ldd	r25, Z+9	; 0x09
    2f9c:	a2 85       	ldd	r26, Z+10	; 0x0a
    2f9e:	b3 85       	ldd	r27, Z+11	; 0x0b
    2fa0:	28 0f       	add	r18, r24
    2fa2:	39 1f       	adc	r19, r25
    2fa4:	4a 1f       	adc	r20, r26
    2fa6:	5b 1f       	adc	r21, r27
    2fa8:	20 93 56 05 	sts	0x0556, r18
    2fac:	30 93 57 05 	sts	0x0557, r19
    2fb0:	40 93 58 05 	sts	0x0558, r20
    2fb4:	50 93 59 05 	sts	0x0559, r21
    if (counter_z > 0) {
    2fb8:	12 16       	cp	r1, r18
    2fba:	13 06       	cpc	r1, r19
    2fbc:	14 06       	cpc	r1, r20
    2fbe:	15 06       	cpc	r1, r21
    2fc0:	ac f4       	brge	.+42     	; 0x2fec <__vector_17+0x2a6>
      out_bits |= (1<<Z_STEP_BIT);
    2fc2:	80 91 4d 05 	lds	r24, 0x054D
    2fc6:	80 61       	ori	r24, 0x10	; 16
    2fc8:	80 93 4d 05 	sts	0x054D, r24
      counter_z -= current_block->step_event_count;
    2fcc:	81 89       	ldd	r24, Z+17	; 0x11
    2fce:	92 89       	ldd	r25, Z+18	; 0x12
    2fd0:	a3 89       	ldd	r26, Z+19	; 0x13
    2fd2:	b4 89       	ldd	r27, Z+20	; 0x14
    2fd4:	28 1b       	sub	r18, r24
    2fd6:	39 0b       	sbc	r19, r25
    2fd8:	4a 0b       	sbc	r20, r26
    2fda:	5b 0b       	sbc	r21, r27
    2fdc:	20 93 56 05 	sts	0x0556, r18
    2fe0:	30 93 57 05 	sts	0x0557, r19
    2fe4:	40 93 58 05 	sts	0x0558, r20
    2fe8:	50 93 59 05 	sts	0x0559, r21
    }
    counter_c += current_block->steps_c;
    2fec:	20 91 5a 05 	lds	r18, 0x055A
    2ff0:	30 91 5b 05 	lds	r19, 0x055B
    2ff4:	40 91 5c 05 	lds	r20, 0x055C
    2ff8:	50 91 5d 05 	lds	r21, 0x055D
    2ffc:	84 85       	ldd	r24, Z+12	; 0x0c
    2ffe:	95 85       	ldd	r25, Z+13	; 0x0d
    3000:	a6 85       	ldd	r26, Z+14	; 0x0e
    3002:	b7 85       	ldd	r27, Z+15	; 0x0f
    3004:	28 0f       	add	r18, r24
    3006:	39 1f       	adc	r19, r25
    3008:	4a 1f       	adc	r20, r26
    300a:	5b 1f       	adc	r21, r27
    300c:	20 93 5a 05 	sts	0x055A, r18
    3010:	30 93 5b 05 	sts	0x055B, r19
    3014:	40 93 5c 05 	sts	0x055C, r20
    3018:	50 93 5d 05 	sts	0x055D, r21
    if (counter_c > 0) {
    301c:	12 16       	cp	r1, r18
    301e:	13 06       	cpc	r1, r19
    3020:	14 06       	cpc	r1, r20
    3022:	15 06       	cpc	r1, r21
    3024:	ac f4       	brge	.+42     	; 0x3050 <__vector_17+0x30a>
      out_bits |= (1<<C_STEP_BIT);
    3026:	80 91 4d 05 	lds	r24, 0x054D
    302a:	80 62       	ori	r24, 0x20	; 32
    302c:	80 93 4d 05 	sts	0x054D, r24
      counter_c -= current_block->step_event_count;
    3030:	81 89       	ldd	r24, Z+17	; 0x11
    3032:	92 89       	ldd	r25, Z+18	; 0x12
    3034:	a3 89       	ldd	r26, Z+19	; 0x13
    3036:	b4 89       	ldd	r27, Z+20	; 0x14
    3038:	28 1b       	sub	r18, r24
    303a:	39 0b       	sbc	r19, r25
    303c:	4a 0b       	sbc	r20, r26
    303e:	5b 0b       	sbc	r21, r27
    3040:	20 93 5a 05 	sts	0x055A, r18
    3044:	30 93 5b 05 	sts	0x055B, r19
    3048:	40 93 5c 05 	sts	0x055C, r20
    304c:	50 93 5d 05 	sts	0x055D, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3050:	80 91 5e 05 	lds	r24, 0x055E
    3054:	90 91 5f 05 	lds	r25, 0x055F
    3058:	a0 91 60 05 	lds	r26, 0x0560
    305c:	b0 91 61 05 	lds	r27, 0x0561
    3060:	01 96       	adiw	r24, 0x01	; 1
    3062:	a1 1d       	adc	r26, r1
    3064:	b1 1d       	adc	r27, r1
    3066:	80 93 5e 05 	sts	0x055E, r24
    306a:	90 93 5f 05 	sts	0x055F, r25
    306e:	a0 93 60 05 	sts	0x0560, r26
    3072:	b0 93 61 05 	sts	0x0561, r27
    if (step_events_completed >= current_block->step_event_count) {
    3076:	21 89       	ldd	r18, Z+17	; 0x11
    3078:	32 89       	ldd	r19, Z+18	; 0x12
    307a:	43 89       	ldd	r20, Z+19	; 0x13
    307c:	54 89       	ldd	r21, Z+20	; 0x14
    307e:	82 17       	cp	r24, r18
    3080:	93 07       	cpc	r25, r19
    3082:	a4 07       	cpc	r26, r20
    3084:	b5 07       	cpc	r27, r21
    3086:	48 f0       	brcs	.+18     	; 0x309a <__vector_17+0x354>
      current_block = NULL;
    3088:	10 92 4c 05 	sts	0x054C, r1
    308c:	10 92 4b 05 	sts	0x054B, r1
      plan_discard_current_block();
    3090:	0e 94 42 09 	call	0x1284	; 0x1284 <plan_discard_current_block>
    3094:	02 c0       	rjmp	.+4      	; 0x309a <__vector_17+0x354>
    }
  } else {
    out_bits = 0;
    3096:	10 92 4d 05 	sts	0x054D, r1
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    309a:	80 91 9a 06 	lds	r24, 0x069A
    309e:	9a e0       	ldi	r25, 0x0A	; 10
    30a0:	89 27       	eor	r24, r25
    30a2:	80 93 9a 06 	sts	0x069A, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    30a6:	20 91 64 05 	lds	r18, 0x0564
    30aa:	30 91 65 05 	lds	r19, 0x0565
    30ae:	40 91 66 05 	lds	r20, 0x0566
    30b2:	50 91 67 05 	lds	r21, 0x0567
    30b6:	80 91 68 05 	lds	r24, 0x0568
    30ba:	90 91 69 05 	lds	r25, 0x0569
    30be:	a0 91 6a 05 	lds	r26, 0x056A
    30c2:	b0 91 6b 05 	lds	r27, 0x056B
    30c6:	28 0f       	add	r18, r24
    30c8:	39 1f       	adc	r19, r25
    30ca:	4a 1f       	adc	r20, r26
    30cc:	5b 1f       	adc	r21, r27
    30ce:	20 93 68 05 	sts	0x0568, r18
    30d2:	30 93 69 05 	sts	0x0569, r19
    30d6:	40 93 6a 05 	sts	0x056A, r20
    30da:	50 93 6b 05 	sts	0x056B, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    30de:	21 38       	cpi	r18, 0x81	; 129
    30e0:	8a e1       	ldi	r24, 0x1A	; 26
    30e2:	38 07       	cpc	r19, r24
    30e4:	86 e0       	ldi	r24, 0x06	; 6
    30e6:	48 07       	cpc	r20, r24
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	58 07       	cpc	r21, r24
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <__vector_17+0x3aa>
    30ee:	b6 c0       	rjmp	.+364    	; 0x325c <__vector_17+0x516>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    30f0:	20 58       	subi	r18, 0x80	; 128
    30f2:	3a 41       	sbci	r19, 0x1A	; 26
    30f4:	46 40       	sbci	r20, 0x06	; 6
    30f6:	50 40       	sbci	r21, 0x00	; 0
    30f8:	20 93 68 05 	sts	0x0568, r18
    30fc:	30 93 69 05 	sts	0x0569, r19
    3100:	40 93 6a 05 	sts	0x056A, r20
    3104:	50 93 6b 05 	sts	0x056B, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    3108:	e0 91 4b 05 	lds	r30, 0x054B
    310c:	f0 91 4c 05 	lds	r31, 0x054C
    3110:	30 97       	sbiw	r30, 0x00	; 0
    3112:	09 f4       	brne	.+2      	; 0x3116 <__vector_17+0x3d0>
    3114:	a3 c0       	rjmp	.+326    	; 0x325c <__vector_17+0x516>
    if (step_events_completed < current_block->accelerate_until) {
    3116:	e0 90 5e 05 	lds	r14, 0x055E
    311a:	f0 90 5f 05 	lds	r15, 0x055F
    311e:	00 91 60 05 	lds	r16, 0x0560
    3122:	10 91 61 05 	lds	r17, 0x0561
    3126:	ef 5b       	subi	r30, 0xBF	; 191
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	a2 81       	ldd	r26, Z+2	; 0x02
    3130:	b3 81       	ldd	r27, Z+3	; 0x03
    3132:	e1 54       	subi	r30, 0x41	; 65
    3134:	f0 40       	sbci	r31, 0x00	; 0
    3136:	e8 16       	cp	r14, r24
    3138:	f9 06       	cpc	r15, r25
    313a:	0a 07       	cpc	r16, r26
    313c:	1b 07       	cpc	r17, r27
    313e:	68 f5       	brcc	.+90     	; 0x319a <__vector_17+0x454>
      trapezoid_adjusted_rate += current_block->rate_delta;
    3140:	fd 96       	adiw	r30, 0x3d	; 61
    3142:	20 81       	ld	r18, Z
    3144:	31 81       	ldd	r19, Z+1	; 0x01
    3146:	42 81       	ldd	r20, Z+2	; 0x02
    3148:	53 81       	ldd	r21, Z+3	; 0x03
    314a:	fd 97       	sbiw	r30, 0x3d	; 61
    314c:	80 91 6c 05 	lds	r24, 0x056C
    3150:	90 91 6d 05 	lds	r25, 0x056D
    3154:	a0 91 6e 05 	lds	r26, 0x056E
    3158:	b0 91 6f 05 	lds	r27, 0x056F
    315c:	28 0f       	add	r18, r24
    315e:	39 1f       	adc	r19, r25
    3160:	4a 1f       	adc	r20, r26
    3162:	5b 1f       	adc	r21, r27
    3164:	20 93 6c 05 	sts	0x056C, r18
    3168:	30 93 6d 05 	sts	0x056D, r19
    316c:	40 93 6e 05 	sts	0x056E, r20
    3170:	50 93 6f 05 	sts	0x056F, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3174:	85 89       	ldd	r24, Z+21	; 0x15
    3176:	96 89       	ldd	r25, Z+22	; 0x16
    3178:	a7 89       	ldd	r26, Z+23	; 0x17
    317a:	b0 8d       	ldd	r27, Z+24	; 0x18
    317c:	82 17       	cp	r24, r18
    317e:	93 07       	cpc	r25, r19
    3180:	a4 07       	cpc	r26, r20
    3182:	b5 07       	cpc	r27, r21
    3184:	08 f0       	brcs	.+2      	; 0x3188 <__vector_17+0x442>
    3186:	4e c0       	rjmp	.+156    	; 0x3224 <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3188:	80 93 6c 05 	sts	0x056C, r24
    318c:	90 93 6d 05 	sts	0x056D, r25
    3190:	a0 93 6e 05 	sts	0x056E, r26
    3194:	b0 93 6f 05 	sts	0x056F, r27
    3198:	45 c0       	rjmp	.+138    	; 0x3224 <__vector_17+0x4de>
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    319a:	eb 5b       	subi	r30, 0xBB	; 187
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	a2 81       	ldd	r26, Z+2	; 0x02
    31a4:	b3 81       	ldd	r27, Z+3	; 0x03
    31a6:	e5 54       	subi	r30, 0x45	; 69
    31a8:	f0 40       	sbci	r31, 0x00	; 0
    31aa:	20 91 6c 05 	lds	r18, 0x056C
    31ae:	30 91 6d 05 	lds	r19, 0x056D
    31b2:	40 91 6e 05 	lds	r20, 0x056E
    31b6:	50 91 6f 05 	lds	r21, 0x056F
    31ba:	8e 15       	cp	r24, r14
    31bc:	9f 05       	cpc	r25, r15
    31be:	a0 07       	cpc	r26, r16
    31c0:	b1 07       	cpc	r27, r17
    31c2:	c8 f5       	brcc	.+114    	; 0x3236 <__vector_17+0x4f0>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    31c4:	fd 96       	adiw	r30, 0x3d	; 61
    31c6:	80 81       	ld	r24, Z
    31c8:	91 81       	ldd	r25, Z+1	; 0x01
    31ca:	a2 81       	ldd	r26, Z+2	; 0x02
    31cc:	b3 81       	ldd	r27, Z+3	; 0x03
    31ce:	fd 97       	sbiw	r30, 0x3d	; 61
    31d0:	82 17       	cp	r24, r18
    31d2:	93 07       	cpc	r25, r19
    31d4:	a4 07       	cpc	r26, r20
    31d6:	b5 07       	cpc	r27, r21
    31d8:	60 f4       	brcc	.+24     	; 0x31f2 <__vector_17+0x4ac>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    31da:	28 1b       	sub	r18, r24
    31dc:	39 0b       	sbc	r19, r25
    31de:	4a 0b       	sbc	r20, r26
    31e0:	5b 0b       	sbc	r21, r27
    31e2:	20 93 6c 05 	sts	0x056C, r18
    31e6:	30 93 6d 05 	sts	0x056D, r19
    31ea:	40 93 6e 05 	sts	0x056E, r20
    31ee:	50 93 6f 05 	sts	0x056F, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    31f2:	21 ad       	ldd	r18, Z+57	; 0x39
    31f4:	32 ad       	ldd	r19, Z+58	; 0x3a
    31f6:	43 ad       	ldd	r20, Z+59	; 0x3b
    31f8:	54 ad       	ldd	r21, Z+60	; 0x3c
    31fa:	80 91 6c 05 	lds	r24, 0x056C
    31fe:	90 91 6d 05 	lds	r25, 0x056D
    3202:	a0 91 6e 05 	lds	r26, 0x056E
    3206:	b0 91 6f 05 	lds	r27, 0x056F
    320a:	82 17       	cp	r24, r18
    320c:	93 07       	cpc	r25, r19
    320e:	a4 07       	cpc	r26, r20
    3210:	b5 07       	cpc	r27, r21
    3212:	40 f4       	brcc	.+16     	; 0x3224 <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->final_rate;
    3214:	20 93 6c 05 	sts	0x056C, r18
    3218:	30 93 6d 05 	sts	0x056D, r19
    321c:	40 93 6e 05 	sts	0x056E, r20
    3220:	50 93 6f 05 	sts	0x056F, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    3224:	60 91 6c 05 	lds	r22, 0x056C
    3228:	70 91 6d 05 	lds	r23, 0x056D
    322c:	80 91 6e 05 	lds	r24, 0x056E
    3230:	90 91 6f 05 	lds	r25, 0x056F
    3234:	11 c0       	rjmp	.+34     	; 0x3258 <__vector_17+0x512>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3236:	65 89       	ldd	r22, Z+21	; 0x15
    3238:	76 89       	ldd	r23, Z+22	; 0x16
    323a:	87 89       	ldd	r24, Z+23	; 0x17
    323c:	90 8d       	ldd	r25, Z+24	; 0x18
    323e:	26 17       	cp	r18, r22
    3240:	37 07       	cpc	r19, r23
    3242:	48 07       	cpc	r20, r24
    3244:	59 07       	cpc	r21, r25
    3246:	51 f0       	breq	.+20     	; 0x325c <__vector_17+0x516>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3248:	60 93 6c 05 	sts	0x056C, r22
    324c:	70 93 6d 05 	sts	0x056D, r23
    3250:	80 93 6e 05 	sts	0x056E, r24
    3254:	90 93 6f 05 	sts	0x056F, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3258:	0e 94 22 15 	call	0x2a44	; 0x2a44 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    325c:	10 92 63 05 	sts	0x0563, r1
    3260:	10 92 62 05 	sts	0x0562, r1
}
    3264:	ff 91       	pop	r31
    3266:	ef 91       	pop	r30
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	bf 91       	pop	r27
    326e:	af 91       	pop	r26
    3270:	9f 91       	pop	r25
    3272:	8f 91       	pop	r24
    3274:	7f 91       	pop	r23
    3276:	6f 91       	pop	r22
    3278:	5f 91       	pop	r21
    327a:	4f 91       	pop	r20
    327c:	3f 91       	pop	r19
    327e:	2f 91       	pop	r18
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	ff 90       	pop	r15
    3286:	ef 90       	pop	r14
    3288:	0f 90       	pop	r0
    328a:	0b be       	out	0x3b, r0	; 59
    328c:	0f 90       	pop	r0
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	0f 90       	pop	r0
    3292:	1f 90       	pop	r1
    3294:	18 95       	reti

00003296 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3296:	ef 92       	push	r14
    3298:	ff 92       	push	r15
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	7b 01       	movw	r14, r22
    32a0:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    32a2:	22 e0       	ldi	r18, 0x02	; 2
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	50 e0       	ldi	r21, 0x00	; 0
    32aa:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__divmodsi4>
    32ae:	20 5c       	subi	r18, 0xC0	; 192
    32b0:	3d 4b       	sbci	r19, 0xBD	; 189
    32b2:	40 4f       	sbci	r20, 0xF0	; 240
    32b4:	5f 4f       	sbci	r21, 0xFF	; 255
    32b6:	ca 01       	movw	r24, r20
    32b8:	b9 01       	movw	r22, r18
    32ba:	a8 01       	movw	r20, r16
    32bc:	97 01       	movw	r18, r14
    32be:	0e 94 ce 20 	call	0x419c	; 0x419c <__udivmodsi4>
    32c2:	c9 01       	movw	r24, r18
    32c4:	da 01       	movw	r26, r20
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	a1 09       	sbc	r26, r1
    32ca:	b1 09       	sbc	r27, r1
    32cc:	29 2f       	mov	r18, r25
    32ce:	3a 2f       	mov	r19, r26
    32d0:	4b 2f       	mov	r20, r27
    32d2:	55 27       	eor	r21, r21
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	a1 1d       	adc	r26, r1
    32d8:	b1 1d       	adc	r27, r1
    32da:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    32de:	81 50       	subi	r24, 0x01	; 1
    32e0:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    32e4:	e0 ec       	ldi	r30, 0xC0	; 192
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	8d 7f       	andi	r24, 0xFD	; 253
    32ec:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    32ee:	e1 ec       	ldi	r30, 0xC1	; 193
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	80 61       	ori	r24, 0x10	; 16
    32f6:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    32f8:	80 81       	ld	r24, Z
    32fa:	88 60       	ori	r24, 0x08	; 8
    32fc:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    32fe:	80 81       	ld	r24, Z
    3300:	80 68       	ori	r24, 0x80	; 128
    3302:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3304:	1f 91       	pop	r17
    3306:	0f 91       	pop	r16
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	08 95       	ret

0000330e <serialWrite>:

void serialWrite(unsigned char c)
{
    330e:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3310:	80 91 c0 00 	lds	r24, 0x00C0
    3314:	85 ff       	sbrs	r24, 5
    3316:	fc cf       	rjmp	.-8      	; 0x3310 <serialWrite+0x2>
		;
	UDR0 = c;
    3318:	90 93 c6 00 	sts	0x00C6, r25
}
    331c:	08 95       	ret

0000331e <serialAvailable>:

int serialAvailable()
{
    331e:	80 91 70 05 	lds	r24, 0x0570
    3322:	90 91 71 05 	lds	r25, 0x0571
    3326:	80 50       	subi	r24, 0x00	; 0
    3328:	9f 4f       	sbci	r25, 0xFF	; 255
    332a:	20 91 72 05 	lds	r18, 0x0572
    332e:	30 91 73 05 	lds	r19, 0x0573
    3332:	82 1b       	sub	r24, r18
    3334:	93 0b       	sbc	r25, r19
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	71 e0       	ldi	r23, 0x01	; 1
    333a:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    333e:	08 95       	ret

00003340 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3340:	40 91 72 05 	lds	r20, 0x0572
    3344:	50 91 73 05 	lds	r21, 0x0573
    3348:	80 91 70 05 	lds	r24, 0x0570
    334c:	90 91 71 05 	lds	r25, 0x0571
    3350:	84 17       	cp	r24, r20
    3352:	95 07       	cpc	r25, r21
    3354:	19 f4       	brne	.+6      	; 0x335c <serialRead+0x1c>
    3356:	2f ef       	ldi	r18, 0xFF	; 255
    3358:	3f ef       	ldi	r19, 0xFF	; 255
    335a:	0f c0       	rjmp	.+30     	; 0x337a <serialRead+0x3a>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    335c:	fa 01       	movw	r30, r20
    335e:	ec 58       	subi	r30, 0x8C	; 140
    3360:	fa 4f       	sbci	r31, 0xFA	; 250
    3362:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3364:	ca 01       	movw	r24, r20
    3366:	01 96       	adiw	r24, 0x01	; 1
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	71 e0       	ldi	r23, 0x01	; 1
    336c:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    3370:	90 93 73 05 	sts	0x0573, r25
    3374:	80 93 72 05 	sts	0x0572, r24
		return c;
    3378:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    337a:	c9 01       	movw	r24, r18
    337c:	08 95       	ret

0000337e <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    337e:	80 91 72 05 	lds	r24, 0x0572
    3382:	90 91 73 05 	lds	r25, 0x0573
    3386:	90 93 71 05 	sts	0x0571, r25
    338a:	80 93 70 05 	sts	0x0570, r24
}
    338e:	08 95       	ret

00003390 <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3390:	1f 92       	push	r1
    3392:	0f 92       	push	r0
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	0f 92       	push	r0
    3398:	0b b6       	in	r0, 0x3b	; 59
    339a:	0f 92       	push	r0
    339c:	11 24       	eor	r1, r1
    339e:	2f 93       	push	r18
    33a0:	3f 93       	push	r19
    33a2:	4f 93       	push	r20
    33a4:	5f 93       	push	r21
    33a6:	6f 93       	push	r22
    33a8:	7f 93       	push	r23
    33aa:	8f 93       	push	r24
    33ac:	9f 93       	push	r25
    33ae:	af 93       	push	r26
    33b0:	bf 93       	push	r27
    33b2:	ef 93       	push	r30
    33b4:	ff 93       	push	r31
	unsigned char c = UDR0;
    33b6:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    33ba:	e0 91 70 05 	lds	r30, 0x0570
    33be:	f0 91 71 05 	lds	r31, 0x0571
    33c2:	cf 01       	movw	r24, r30
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	60 e0       	ldi	r22, 0x00	; 0
    33c8:	71 e0       	ldi	r23, 0x01	; 1
    33ca:	0e 94 bb 20 	call	0x4176	; 0x4176 <__divmodhi4>
    33ce:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    33d0:	80 91 72 05 	lds	r24, 0x0572
    33d4:	90 91 73 05 	lds	r25, 0x0573
    33d8:	28 17       	cp	r18, r24
    33da:	39 07       	cpc	r19, r25
    33dc:	39 f0       	breq	.+14     	; 0x33ec <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    33de:	ec 58       	subi	r30, 0x8C	; 140
    33e0:	fa 4f       	sbci	r31, 0xFA	; 250
    33e2:	40 83       	st	Z, r20
		rx_buffer_head = i;
    33e4:	30 93 71 05 	sts	0x0571, r19
    33e8:	20 93 70 05 	sts	0x0570, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    33ec:	ff 91       	pop	r31
    33ee:	ef 91       	pop	r30
    33f0:	bf 91       	pop	r27
    33f2:	af 91       	pop	r26
    33f4:	9f 91       	pop	r25
    33f6:	8f 91       	pop	r24
    33f8:	7f 91       	pop	r23
    33fa:	6f 91       	pop	r22
    33fc:	5f 91       	pop	r21
    33fe:	4f 91       	pop	r20
    3400:	3f 91       	pop	r19
    3402:	2f 91       	pop	r18
    3404:	0f 90       	pop	r0
    3406:	0b be       	out	0x3b, r0	; 59
    3408:	0f 90       	pop	r0
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	0f 90       	pop	r0
    340e:	1f 90       	pop	r1
    3410:	18 95       	reti

00003412 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3412:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3414:	80 91 c0 00 	lds	r24, 0x00C0
    3418:	85 ff       	sbrs	r24, 5
    341a:	fc cf       	rjmp	.-8      	; 0x3414 <printByte+0x2>
		;
	UDR0 = c;
    341c:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3420:	08 95       	ret

00003422 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3422:	fc 01       	movw	r30, r24
    3424:	07 c0       	rjmp	.+14     	; 0x3434 <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3426:	80 91 c0 00 	lds	r24, 0x00C0
    342a:	85 ff       	sbrs	r24, 5
    342c:	fc cf       	rjmp	.-8      	; 0x3426 <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
    342e:	31 96       	adiw	r30, 0x01	; 1

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    3430:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3434:	90 81       	ld	r25, Z
    3436:	99 23       	and	r25, r25
    3438:	b1 f7       	brne	.-20     	; 0x3426 <printString+0x4>
		printByte(*s++);
}
    343a:	08 95       	ret

0000343c <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    343c:	9c 01       	movw	r18, r24
    343e:	06 c0       	rjmp	.+12     	; 0x344c <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3440:	80 91 c0 00 	lds	r24, 0x00C0
    3444:	85 ff       	sbrs	r24, 5
    3446:	fc cf       	rjmp	.-8      	; 0x3440 <printPgmString+0x4>
		;
	UDR0 = c;
    3448:	90 93 c6 00 	sts	0x00C6, r25
    344c:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    344e:	2f 5f       	subi	r18, 0xFF	; 255
    3450:	3f 4f       	sbci	r19, 0xFF	; 255
    3452:	94 91       	lpm	r25, Z+
    3454:	99 23       	and	r25, r25
    3456:	a1 f7       	brne	.-24     	; 0x3440 <printPgmString+0x4>
		printByte(c);
}
    3458:	08 95       	ret

0000345a <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    345a:	2f 92       	push	r2
    345c:	3f 92       	push	r3
    345e:	4f 92       	push	r4
    3460:	5f 92       	push	r5
    3462:	6f 92       	push	r6
    3464:	7f 92       	push	r7
    3466:	8f 92       	push	r8
    3468:	9f 92       	push	r9
    346a:	af 92       	push	r10
    346c:	bf 92       	push	r11
    346e:	cf 92       	push	r12
    3470:	df 92       	push	r13
    3472:	ef 92       	push	r14
    3474:	ff 92       	push	r15
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	a0 97       	sbiw	r28, 0x20	; 32
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	cd bf       	out	0x3d, r28	; 61
    348e:	6b 01       	movw	r12, r22
    3490:	7c 01       	movw	r14, r24
    3492:	29 01       	movw	r4, r18
    3494:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3496:	61 15       	cp	r22, r1
    3498:	71 05       	cpc	r23, r1
    349a:	81 05       	cpc	r24, r1
    349c:	91 05       	cpc	r25, r1
    349e:	41 f4       	brne	.+16     	; 0x34b0 <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    34a0:	80 91 c0 00 	lds	r24, 0x00C0
    34a4:	85 ff       	sbrs	r24, 5
    34a6:	fc cf       	rjmp	.-8      	; 0x34a0 <printIntegerInBase+0x46>
		;
	UDR0 = c;
    34a8:	80 e3       	ldi	r24, 0x30	; 48
    34aa:	80 93 c6 00 	sts	0x00C6, r24
    34ae:	49 c0       	rjmp	.+146    	; 0x3542 <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
    34b0:	88 24       	eor	r8, r8
    34b2:	99 24       	eor	r9, r9
    34b4:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
    34b6:	1e 01       	movw	r2, r28
    34b8:	08 94       	sec
    34ba:	21 1c       	adc	r2, r1
    34bc:	31 1c       	adc	r3, r1
    34be:	81 01       	movw	r16, r2
    34c0:	08 0d       	add	r16, r8
    34c2:	19 1d       	adc	r17, r9
    34c4:	c7 01       	movw	r24, r14
    34c6:	b6 01       	movw	r22, r12
    34c8:	a3 01       	movw	r20, r6
    34ca:	92 01       	movw	r18, r4
    34cc:	0e 94 ce 20 	call	0x419c	; 0x419c <__udivmodsi4>
    34d0:	f8 01       	movw	r30, r16
    34d2:	60 83       	st	Z, r22
    34d4:	08 94       	sec
    34d6:	81 1c       	adc	r8, r1
    34d8:	91 1c       	adc	r9, r1
    34da:	a1 1c       	adc	r10, r1
    34dc:	b1 1c       	adc	r11, r1
		n /= base;
    34de:	c7 01       	movw	r24, r14
    34e0:	b6 01       	movw	r22, r12
    34e2:	a3 01       	movw	r20, r6
    34e4:	92 01       	movw	r18, r4
    34e6:	0e 94 ce 20 	call	0x419c	; 0x419c <__udivmodsi4>
    34ea:	c9 01       	movw	r24, r18
    34ec:	da 01       	movw	r26, r20
    34ee:	6c 01       	movw	r12, r24
    34f0:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    34f2:	c1 14       	cp	r12, r1
    34f4:	d1 04       	cpc	r13, r1
    34f6:	e1 04       	cpc	r14, r1
    34f8:	f1 04       	cpc	r15, r1
    34fa:	09 f7       	brne	.-62     	; 0x34be <printIntegerInBase+0x64>
    34fc:	91 01       	movw	r18, r2
    34fe:	28 0d       	add	r18, r8
    3500:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3502:	be 01       	movw	r22, r28
    3504:	6f 5f       	subi	r22, 0xFF	; 255
    3506:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
    3508:	d5 01       	movw	r26, r10
    350a:	c4 01       	movw	r24, r8
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	a1 09       	sbc	r26, r1
    3510:	b1 09       	sbc	r27, r1
    3512:	ac 01       	movw	r20, r24
    3514:	48 19       	sub	r20, r8
    3516:	59 09       	sbc	r21, r9
    3518:	11 c0       	rjmp	.+34     	; 0x353c <printIntegerInBase+0xe2>
    351a:	fa 01       	movw	r30, r20
    351c:	e2 0f       	add	r30, r18
    351e:	f3 1f       	adc	r31, r19
    3520:	e0 81       	ld	r30, Z
    3522:	ea 30       	cpi	r30, 0x0A	; 10
    3524:	10 f4       	brcc	.+4      	; 0x352a <printIntegerInBase+0xd0>
    3526:	e0 5d       	subi	r30, 0xD0	; 208
    3528:	01 c0       	rjmp	.+2      	; 0x352c <printIntegerInBase+0xd2>
    352a:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    352c:	80 91 c0 00 	lds	r24, 0x00C0
    3530:	85 ff       	sbrs	r24, 5
    3532:	fc cf       	rjmp	.-8      	; 0x352c <printIntegerInBase+0xd2>
		;
	UDR0 = c;
    3534:	e0 93 c6 00 	sts	0x00C6, r30
    3538:	21 50       	subi	r18, 0x01	; 1
    353a:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    353c:	62 17       	cp	r22, r18
    353e:	73 07       	cpc	r23, r19
    3540:	61 f7       	brne	.-40     	; 0x351a <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3542:	a0 96       	adiw	r28, 0x20	; 32
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	ff 90       	pop	r15
    3558:	ef 90       	pop	r14
    355a:	df 90       	pop	r13
    355c:	cf 90       	pop	r12
    355e:	bf 90       	pop	r11
    3560:	af 90       	pop	r10
    3562:	9f 90       	pop	r9
    3564:	8f 90       	pop	r8
    3566:	7f 90       	pop	r7
    3568:	6f 90       	pop	r6
    356a:	5f 90       	pop	r5
    356c:	4f 90       	pop	r4
    356e:	3f 90       	pop	r3
    3570:	2f 90       	pop	r2
    3572:	08 95       	ret

00003574 <printInteger>:

void printInteger(long n)
{
    3574:	9b 01       	movw	r18, r22
    3576:	ac 01       	movw	r20, r24
	if (n < 0) {
    3578:	97 ff       	sbrs	r25, 7
    357a:	0e c0       	rjmp	.+28     	; 0x3598 <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    357c:	80 91 c0 00 	lds	r24, 0x00C0
    3580:	85 ff       	sbrs	r24, 5
    3582:	fc cf       	rjmp	.-8      	; 0x357c <printInteger+0x8>
		;
	UDR0 = c;
    3584:	8d e2       	ldi	r24, 0x2D	; 45
    3586:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    358a:	50 95       	com	r21
    358c:	40 95       	com	r20
    358e:	30 95       	com	r19
    3590:	21 95       	neg	r18
    3592:	3f 4f       	sbci	r19, 0xFF	; 255
    3594:	4f 4f       	sbci	r20, 0xFF	; 255
    3596:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
    3598:	ca 01       	movw	r24, r20
    359a:	b9 01       	movw	r22, r18
    359c:	2a e0       	ldi	r18, 0x0A	; 10
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e0       	ldi	r20, 0x00	; 0
    35a2:	50 e0       	ldi	r21, 0x00	; 0
    35a4:	0e 94 2d 1a 	call	0x345a	; 0x345a <printIntegerInBase>
}
    35a8:	08 95       	ret

000035aa <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    35aa:	22 e0       	ldi	r18, 0x02	; 2
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	0e 94 2d 1a 	call	0x345a	; 0x345a <printIntegerInBase>
  }
    35b6:	08 95       	ret

000035b8 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <printFloat+0xe>
    35c6:	0f 92       	push	r0
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    35cc:	ae 01       	movw	r20, r28
    35ce:	4f 5f       	subi	r20, 0xFF	; 255
    35d0:	5f 4f       	sbci	r21, 0xFF	; 255
    35d2:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <modf>
    35d6:	7b 01       	movw	r14, r22
    35d8:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    35da:	69 81       	ldd	r22, Y+1	; 0x01
    35dc:	7a 81       	ldd	r23, Y+2	; 0x02
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	9c 81       	ldd	r25, Y+4	; 0x04
    35e2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
    35e6:	0e 94 ba 1a 	call	0x3574	; 0x3574 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    35ea:	80 91 c0 00 	lds	r24, 0x00C0
    35ee:	85 ff       	sbrs	r24, 5
    35f0:	fc cf       	rjmp	.-8      	; 0x35ea <printFloat+0x32>
		;
	UDR0 = c;
    35f2:	8e e2       	ldi	r24, 0x2E	; 46
    35f4:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    35f8:	c8 01       	movw	r24, r16
    35fa:	b7 01       	movw	r22, r14
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a e7       	ldi	r20, 0x7A	; 122
    3602:	54 e4       	ldi	r21, 0x44	; 68
    3604:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    3608:	0e 94 29 20 	call	0x4052	; 0x4052 <round>
    360c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__fixsfsi>
    3610:	97 ff       	sbrs	r25, 7
    3612:	07 c0       	rjmp	.+14     	; 0x3622 <printFloat+0x6a>
    3614:	90 95       	com	r25
    3616:	80 95       	com	r24
    3618:	70 95       	com	r23
    361a:	61 95       	neg	r22
    361c:	7f 4f       	sbci	r23, 0xFF	; 255
    361e:	8f 4f       	sbci	r24, 0xFF	; 255
    3620:	9f 4f       	sbci	r25, 0xFF	; 255
    3622:	0e 94 ba 1a 	call	0x3574	; 0x3574 <printInteger>
}
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	0f 90       	pop	r0
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	1f 91       	pop	r17
    3634:	0f 91       	pop	r16
    3636:	ff 90       	pop	r15
    3638:	ef 90       	pop	r14
    363a:	08 95       	ret

0000363c <atc_init>:
#include "settings.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    363c:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    363e:	e7 e0       	ldi	r30, 0x07	; 7
    3640:	f1 e0       	ldi	r31, 0x01	; 1
    3642:	80 81       	ld	r24, Z
    3644:	81 60       	ori	r24, 0x01	; 1
    3646:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3648:	80 81       	ld	r24, Z
    364a:	82 60       	ori	r24, 0x02	; 2
    364c:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    364e:	80 81       	ld	r24, Z
    3650:	84 60       	ori	r24, 0x04	; 4
    3652:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3654:	80 81       	ld	r24, Z
    3656:	88 60       	ori	r24, 0x08	; 8
    3658:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    365a:	80 81       	ld	r24, Z
    365c:	80 64       	ori	r24, 0x40	; 64
    365e:	80 83       	st	Z, r24

// initialise PORT as well

}
    3660:	08 95       	ret

00003662 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	08 95       	ret

00003666 <atc_change>:



// changes tool , 0 put back, 1-6 picks up
void atc_change(int tool)
{
    3666:	cf 93       	push	r28
    3668:	df 93       	push	r29
    366a:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <set_busy>

	// make sure head is up before moving
	if( is_head_down() ) {
    3674:	0e 94 0a 1c 	call	0x3814	; 0x3814 <is_head_down>
    3678:	89 2b       	or	r24, r25
    367a:	21 f0       	breq	.+8      	; 0x3684 <atc_change+0x1e>
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("TOOL headup\n\r"));
#endif
		head_down( FALSE ) ;
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	0e 94 12 1c 	call	0x3824	; 0x3824 <head_down>
	}

	// turn off toolchanger
	if( tool == 0 ) {
    3684:	20 97       	sbiw	r28, 0x00	; 0
    3686:	c9 f4       	brne	.+50     	; 0x36ba <atc_change+0x54>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3688:	80 91 08 01 	lds	r24, 0x0108
    368c:	81 60       	ori	r24, 0x01	; 1
    368e:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3692:	80 91 08 01 	lds	r24, 0x0108
    3696:	82 60       	ori	r24, 0x02	; 2
    3698:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    369c:	80 91 08 01 	lds	r24, 0x0108
    36a0:	84 60       	ori	r24, 0x04	; 4
    36a2:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    36a6:	80 91 08 01 	lds	r24, 0x0108
    36aa:	88 60       	ori	r24, 0x08	; 8
    36ac:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <set_busy>
    36b8:	70 c0       	rjmp	.+224    	; 0x379a <atc_change+0x134>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    36ba:	80 91 08 01 	lds	r24, 0x0108
    36be:	81 60       	ori	r24, 0x01	; 1
    36c0:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    36c4:	c3 30       	cpi	r28, 0x03	; 3
    36c6:	d1 05       	cpc	r29, r1
    36c8:	09 f1       	breq	.+66     	; 0x370c <atc_change+0xa6>
    36ca:	c4 30       	cpi	r28, 0x04	; 4
    36cc:	d1 05       	cpc	r29, r1
    36ce:	3c f4       	brge	.+14     	; 0x36de <atc_change+0x78>
    36d0:	c1 30       	cpi	r28, 0x01	; 1
    36d2:	d1 05       	cpc	r29, r1
    36d4:	71 f0       	breq	.+28     	; 0x36f2 <atc_change+0x8c>
    36d6:	22 97       	sbiw	r28, 0x02	; 2
    36d8:	09 f0       	breq	.+2      	; 0x36dc <atc_change+0x76>
    36da:	51 c0       	rjmp	.+162    	; 0x377e <atc_change+0x118>
    36dc:	13 c0       	rjmp	.+38     	; 0x3704 <atc_change+0x9e>
    36de:	c5 30       	cpi	r28, 0x05	; 5
    36e0:	d1 05       	cpc	r29, r1
    36e2:	59 f1       	breq	.+86     	; 0x373a <atc_change+0xd4>
    36e4:	c5 30       	cpi	r28, 0x05	; 5
    36e6:	d1 05       	cpc	r29, r1
    36e8:	fc f0       	brlt	.+62     	; 0x3728 <atc_change+0xc2>
    36ea:	26 97       	sbiw	r28, 0x06	; 6
    36ec:	09 f0       	breq	.+2      	; 0x36f0 <atc_change+0x8a>
    36ee:	47 c0       	rjmp	.+142    	; 0x377e <atc_change+0x118>
    36f0:	32 c0       	rjmp	.+100    	; 0x3756 <atc_change+0xf0>
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    36f2:	80 91 08 01 	lds	r24, 0x0108
    36f6:	8d 7f       	andi	r24, 0xFD	; 253
    36f8:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    36fc:	80 91 08 01 	lds	r24, 0x0108
    3700:	8b 7f       	andi	r24, 0xFB	; 251
    3702:	0c c0       	rjmp	.+24     	; 0x371c <atc_change+0xb6>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3704:	80 91 08 01 	lds	r24, 0x0108
    3708:	8d 7f       	andi	r24, 0xFD	; 253
    370a:	28 c0       	rjmp	.+80     	; 0x375c <atc_change+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    370c:	80 91 08 01 	lds	r24, 0x0108
    3710:	8d 7f       	andi	r24, 0xFD	; 253
    3712:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3716:	80 91 08 01 	lds	r24, 0x0108
    371a:	84 60       	ori	r24, 0x04	; 4
    371c:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3720:	80 91 08 01 	lds	r24, 0x0108
    3724:	87 7f       	andi	r24, 0xF7	; 247
    3726:	24 c0       	rjmp	.+72     	; 0x3770 <atc_change+0x10a>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3728:	80 91 08 01 	lds	r24, 0x0108
    372c:	8d 7f       	andi	r24, 0xFD	; 253
    372e:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3732:	80 91 08 01 	lds	r24, 0x0108
    3736:	84 60       	ori	r24, 0x04	; 4
    3738:	16 c0       	rjmp	.+44     	; 0x3766 <atc_change+0x100>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    373a:	80 91 08 01 	lds	r24, 0x0108
    373e:	82 60       	ori	r24, 0x02	; 2
    3740:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3744:	80 91 08 01 	lds	r24, 0x0108
    3748:	8b 7f       	andi	r24, 0xFB	; 251
    374a:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    374e:	80 91 08 01 	lds	r24, 0x0108
    3752:	87 7f       	andi	r24, 0xF7	; 247
    3754:	12 c0       	rjmp	.+36     	; 0x377a <atc_change+0x114>
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3756:	80 91 08 01 	lds	r24, 0x0108
    375a:	82 60       	ori	r24, 0x02	; 2
    375c:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3760:	80 91 08 01 	lds	r24, 0x0108
    3764:	8b 7f       	andi	r24, 0xFB	; 251
    3766:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    376a:	80 91 08 01 	lds	r24, 0x0108
    376e:	88 60       	ori	r24, 0x08	; 8
    3770:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3774:	80 91 08 01 	lds	r24, 0x0108
    3778:	8e 7f       	andi	r24, 0xFE	; 254
    377a:	80 93 08 01 	sts	0x0108, r24
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    377e:	80 91 08 01 	lds	r24, 0x0108
    3782:	8e 7f       	andi	r24, 0xFE	; 254
    3784:	80 93 08 01 	sts	0x0108, r24
    3788:	88 ee       	ldi	r24, 0xE8	; 232
    378a:	93 e0       	ldi	r25, 0x03	; 3
    378c:	20 e9       	ldi	r18, 0x90	; 144
    378e:	31 e0       	ldi	r19, 0x01	; 1
    3790:	f9 01       	movw	r30, r18
    3792:	31 97       	sbiw	r30, 0x01	; 1
    3794:	f1 f7       	brne	.-4      	; 0x3792 <atc_change+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3796:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3798:	d9 f7       	brne	.-10     	; 0x3790 <atc_change+0x12a>
	_delay_ms( 100 );


// don't turn off busy flag

}
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	08 95       	ret

000037a0 <goto_vacpad>:

}

void goto_vacpad( void ) 
{
	if( is_head_down() ) {
    37a0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <is_head_down>
    37a4:	89 2b       	or	r24, r25
    37a6:	21 f0       	breq	.+8      	; 0x37b0 <goto_vacpad+0x10>
		head_down( FALSE) ;
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	0e 94 12 1c 	call	0x3824	; 0x3824 <head_down>
    37b0:	08 95       	ret

000037b2 <check_for_tool>:

// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	//move head up
	if( is_head_down() ) {
    37b2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <is_head_down>
    37b6:	89 2b       	or	r24, r25
    37b8:	21 f0       	breq	.+8      	; 0x37c2 <check_for_tool+0x10>
		head_down( FALSE) ;
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	0e 94 12 1c 	call	0x3824	; 0x3824 <head_down>
	}

	goto_vacpad();
    37c2:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <goto_vacpad>
	
	head_down(TRUE);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	0e 94 12 1c 	call	0x3824	; 0x3824 <head_down>
	
	vacuum(TRUE);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	0e 94 ab 1c 	call	0x3956	; 0x3956 <vacuum>

	if( vacuum_state() == TRUE )  {
    37d6:	0e 94 c0 1c 	call	0x3980	; 0x3980 <vacuum_state>
    37da:	01 97       	sbiw	r24, 0x01	; 1
    37dc:	31 f4       	brne	.+12     	; 0x37ea <check_for_tool+0x38>
		head_down( FALSE) ;
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	0e 94 12 1c 	call	0x3824	; 0x3824 <head_down>
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	08 95       	ret
		return TRUE;
	} else {
		head_down( FALSE) ;
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	0e 94 12 1c 	call	0x3824	; 0x3824 <head_down>
    37f2:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	}
}
    37f4:	08 95       	ret

000037f6 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    37f6:	ea e0       	ldi	r30, 0x0A	; 10
    37f8:	f1 e0       	ldi	r31, 0x01	; 1
    37fa:	80 81       	ld	r24, Z
    37fc:	80 62       	ori	r24, 0x20	; 32
    37fe:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    3800:	eb e0       	ldi	r30, 0x0B	; 11
    3802:	f1 e0       	ldi	r31, 0x01	; 1
    3804:	80 81       	ld	r24, Z
    3806:	80 62       	ori	r24, 0x20	; 32
    3808:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    380a:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    380c:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    380e:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    3810:	41 9a       	sbi	0x08, 1	; 8
}
    3812:	08 95       	ret

00003814 <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3814:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    3816:	81 70       	andi	r24, 0x01	; 1
    3818:	08 95       	ret

0000381a <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?0:1;
    381a:	86 b1       	in	r24, 0x06	; 6
    381c:	86 95       	lsr	r24
    381e:	80 95       	com	r24

	return state;
}
    3820:	81 70       	andi	r24, 0x01	; 1
    3822:	08 95       	ret

00003824 <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}

// todo: don't allow head down while not homed?
void head_down(int state)
{
    3824:	cf 93       	push	r28
    3826:	df 93       	push	r29
    3828:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <set_busy>

// head down mode
  if( state == 0 ) {
    3832:	20 97       	sbiw	r28, 0x00	; 0
    3834:	21 f4       	brne	.+8      	; 0x383e <head_down+0x1a>

	HEAD_PORT |= _BV( HEAD );
    3836:	80 91 0b 01 	lds	r24, 0x010B
    383a:	80 62       	ori	r24, 0x20	; 32
    383c:	03 c0       	rjmp	.+6      	; 0x3844 <head_down+0x20>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    383e:	80 91 0b 01 	lds	r24, 0x010B
    3842:	8f 7d       	andi	r24, 0xDF	; 223
    3844:	80 93 0b 01 	sts	0x010B, r24
    3848:	80 ed       	ldi	r24, 0xD0	; 208
    384a:	97 e0       	ldi	r25, 0x07	; 7
    384c:	20 e9       	ldi	r18, 0x90	; 144
    384e:	31 e0       	ldi	r19, 0x01	; 1
    3850:	f9 01       	movw	r30, r18
    3852:	31 97       	sbiw	r30, 0x01	; 1
    3854:	f1 f7       	brne	.-4      	; 0x3852 <head_down+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3856:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	d9 f7       	brne	.-10     	; 0x3850 <head_down+0x2c>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    385a:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    385c:	81 70       	andi	r24, 0x01	; 1
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	8c 17       	cp	r24, r28
    3862:	9d 07       	cpc	r25, r29
    3864:	21 f0       	breq	.+8      	; 0x386e <head_down+0x4a>

	  printPgmString(PSTR("Head down error\n\r"));
    3866:	84 e2       	ldi	r24, 0x24	; 36
    3868:	95 e0       	ldi	r25, 0x05	; 5
    386a:	0e 94 1e 1a 	call	0x343c	; 0x343c <printPgmString>
  }

 set_busy( FALSE );
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <set_busy>

}
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	08 95       	ret

0000387c <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    387c:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    387e:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    3880:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    3882:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    3884:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    3886:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    3888:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    388a:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    388c:	a4 e0       	ldi	r26, 0x04	; 4
    388e:	b1 e0       	ldi	r27, 0x01	; 1
    3890:	8c 91       	ld	r24, X
    3892:	8e 7f       	andi	r24, 0xFE	; 254
    3894:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    3896:	e5 e0       	ldi	r30, 0x05	; 5
    3898:	f1 e0       	ldi	r31, 0x01	; 1
    389a:	80 81       	ld	r24, Z
    389c:	81 60       	ori	r24, 0x01	; 1
    389e:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    38a0:	8c 91       	ld	r24, X
    38a2:	8f 7e       	andi	r24, 0xEF	; 239
    38a4:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    38a6:	80 81       	ld	r24, Z
    38a8:	80 61       	ori	r24, 0x10	; 16
    38aa:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    38ac:	a1 e0       	ldi	r26, 0x01	; 1
    38ae:	b1 e0       	ldi	r27, 0x01	; 1
    38b0:	8c 91       	ld	r24, X
    38b2:	8e 7f       	andi	r24, 0xFE	; 254
    38b4:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    38b6:	e2 e0       	ldi	r30, 0x02	; 2
    38b8:	f1 e0       	ldi	r31, 0x01	; 1
    38ba:	80 81       	ld	r24, Z
    38bc:	81 60       	ori	r24, 0x01	; 1
    38be:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    38c0:	8c 91       	ld	r24, X
    38c2:	8d 7f       	andi	r24, 0xFD	; 253
    38c4:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    38c6:	80 81       	ld	r24, Z
    38c8:	82 60       	ori	r24, 0x02	; 2
    38ca:	80 83       	st	Z, r24

}
    38cc:	08 95       	ret

000038ce <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    38ce:	8c b1       	in	r24, 0x0c	; 12
    38d0:	82 95       	swap	r24
    38d2:	86 95       	lsr	r24
    38d4:	87 70       	andi	r24, 0x07	; 7
    38d6:	80 95       	com	r24

	return state;
}
    38d8:	81 70       	andi	r24, 0x01	; 1
    38da:	08 95       	ret

000038dc <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    38dc:	82 b3       	in	r24, 0x12	; 18
    38de:	82 95       	swap	r24
    38e0:	86 95       	lsr	r24
    38e2:	87 70       	andi	r24, 0x07	; 7
    38e4:	80 95       	com	r24

	return state;
}
    38e6:	81 70       	andi	r24, 0x01	; 1
    38e8:	08 95       	ret

000038ea <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    38ea:	8c b1       	in	r24, 0x0c	; 12
    38ec:	82 95       	swap	r24
    38ee:	8f 70       	andi	r24, 0x0F	; 15
    38f0:	80 95       	com	r24

	return state;
}
    38f2:	81 70       	andi	r24, 0x01	; 1
    38f4:	08 95       	ret

000038f6 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    38f6:	80 91 03 01 	lds	r24, 0x0103
    38fa:	86 95       	lsr	r24
    38fc:	80 95       	com	r24

	return state;
}
    38fe:	81 70       	andi	r24, 0x01	; 1
    3900:	08 95       	ret

00003902 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    3902:	86 b1       	in	r24, 0x06	; 6
    3904:	82 95       	swap	r24
    3906:	8f 70       	andi	r24, 0x0F	; 15
    3908:	80 95       	com	r24

	return state;
}
    390a:	81 70       	andi	r24, 0x01	; 1
    390c:	08 95       	ret

0000390e <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    390e:	80 91 00 01 	lds	r24, 0x0100
    3912:	80 95       	com	r24

	return state;
}
    3914:	81 70       	andi	r24, 0x01	; 1
    3916:	08 95       	ret

00003918 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    3918:	80 91 03 01 	lds	r24, 0x0103
    391c:	80 95       	com	r24

	return state;
}
    391e:	81 70       	andi	r24, 0x01	; 1
    3920:	08 95       	ret

00003922 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    3922:	83 b1       	in	r24, 0x03	; 3
    3924:	82 95       	swap	r24
    3926:	86 95       	lsr	r24
    3928:	87 70       	andi	r24, 0x07	; 7
    392a:	80 95       	com	r24

	return state;
}
    392c:	81 70       	andi	r24, 0x01	; 1
    392e:	08 95       	ret

00003930 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    3930:	80 91 00 01 	lds	r24, 0x0100
    3934:	86 95       	lsr	r24
    3936:	80 95       	com	r24

	return state;
}
    3938:	81 70       	andi	r24, 0x01	; 1
    393a:	08 95       	ret

0000393c <vacuum_init>:
#include "settings.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    393c:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_DDR |= (_BV( TACSENSE ));
    393e:	57 9a       	sbi	0x0a, 7	; 10

	// Vacuum on/off control
	HEAD_DDR |= _BV( VACUUM );
    3940:	ea e0       	ldi	r30, 0x0A	; 10
    3942:	f1 e0       	ldi	r31, 0x01	; 1
    3944:	80 81       	ld	r24, Z
    3946:	80 61       	ori	r24, 0x10	; 16
    3948:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    394a:	eb e0       	ldi	r30, 0x0B	; 11
    394c:	f1 e0       	ldi	r31, 0x01	; 1
    394e:	80 81       	ld	r24, Z
    3950:	80 61       	ori	r24, 0x10	; 16
    3952:	80 83       	st	Z, r24

}
    3954:	08 95       	ret

00003956 <vacuum>:
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    3956:	89 2b       	or	r24, r25
    3958:	21 f4       	brne	.+8      	; 0x3962 <vacuum+0xc>

	HEAD_PORT |= _BV( VACUUM );
    395a:	80 91 0b 01 	lds	r24, 0x010B
    395e:	80 61       	ori	r24, 0x10	; 16
    3960:	03 c0       	rjmp	.+6      	; 0x3968 <vacuum+0x12>

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    3962:	80 91 0b 01 	lds	r24, 0x010B
    3966:	8f 7e       	andi	r24, 0xEF	; 239
    3968:	80 93 0b 01 	sts	0x010B, r24
    396c:	88 e8       	ldi	r24, 0x88	; 136
    396e:	93 e1       	ldi	r25, 0x13	; 19
    3970:	20 e9       	ldi	r18, 0x90	; 144
    3972:	31 e0       	ldi	r19, 0x01	; 1
    3974:	f9 01       	movw	r30, r18
    3976:	31 97       	sbiw	r30, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <vacuum+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397c:	d9 f7       	brne	.-10     	; 0x3974 <vacuum+0x1e>
  }

   // wait for air to get settled
   _delay_ms( AIR_SETTLE_TIME );

}
    397e:	08 95       	ret

00003980 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_DDR, TACSENSE )?0:1;
    3980:	8a b1       	in	r24, 0x0a	; 10
    3982:	80 95       	com	r24

	return state;
}
    3984:	88 1f       	adc	r24, r24
    3986:	88 27       	eor	r24, r24
    3988:	88 1f       	adc	r24, r24
    398a:	08 95       	ret

0000398c <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    398c:	e7 e0       	ldi	r30, 0x07	; 7
    398e:	f1 e0       	ldi	r31, 0x01	; 1
    3990:	80 81       	ld	r24, Z
    3992:	80 68       	ori	r24, 0x80	; 128
    3994:	80 83       	st	Z, r24
}
    3996:	08 95       	ret

00003998 <tape_knock>:
{
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

 set_busy( TRUE );
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    39a0:	80 91 08 01 	lds	r24, 0x0108
    39a4:	8f 77       	andi	r24, 0x7F	; 127
    39a6:	80 93 08 01 	sts	0x0108, r24
    39aa:	80 ed       	ldi	r24, 0xD0	; 208
    39ac:	97 e0       	ldi	r25, 0x07	; 7
    39ae:	20 e9       	ldi	r18, 0x90	; 144
    39b0:	31 e0       	ldi	r19, 0x01	; 1
    39b2:	f9 01       	movw	r30, r18
    39b4:	31 97       	sbiw	r30, 0x01	; 1
    39b6:	f1 f7       	brne	.-4      	; 0x39b4 <tape_knock+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ba:	d9 f7       	brne	.-10     	; 0x39b2 <tape_knock+0x1a>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    39bc:	80 91 08 01 	lds	r24, 0x0108
    39c0:	80 68       	ori	r24, 0x80	; 128
    39c2:	80 93 08 01 	sts	0x0108, r24
    39c6:	80 ed       	ldi	r24, 0xD0	; 208
    39c8:	97 e0       	ldi	r25, 0x07	; 7
    39ca:	20 e9       	ldi	r18, 0x90	; 144
    39cc:	31 e0       	ldi	r19, 0x01	; 1
    39ce:	f9 01       	movw	r30, r18
    39d0:	31 97       	sbiw	r30, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <tape_knock+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d6:	d9 f7       	brne	.-10     	; 0x39ce <tape_knock+0x36>

	_delay_ms( TAPE_KNOCK_SETTLE );

 set_busy( FALSE );
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <set_busy>
}
    39e0:	08 95       	ret

000039e2 <__subsf3>:
    39e2:	50 58       	subi	r21, 0x80	; 128

000039e4 <__addsf3>:
    39e4:	bb 27       	eor	r27, r27
    39e6:	aa 27       	eor	r26, r26
    39e8:	0e d0       	rcall	.+28     	; 0x3a06 <__addsf3x>
    39ea:	11 c2       	rjmp	.+1058   	; 0x3e0e <__fp_round>
    39ec:	02 d2       	rcall	.+1028   	; 0x3df2 <__fp_pscA>
    39ee:	30 f0       	brcs	.+12     	; 0x39fc <__addsf3+0x18>
    39f0:	07 d2       	rcall	.+1038   	; 0x3e00 <__fp_pscB>
    39f2:	20 f0       	brcs	.+8      	; 0x39fc <__addsf3+0x18>
    39f4:	31 f4       	brne	.+12     	; 0x3a02 <__addsf3+0x1e>
    39f6:	9f 3f       	cpi	r25, 0xFF	; 255
    39f8:	11 f4       	brne	.+4      	; 0x39fe <__addsf3+0x1a>
    39fa:	1e f4       	brtc	.+6      	; 0x3a02 <__addsf3+0x1e>
    39fc:	d2 c1       	rjmp	.+932    	; 0x3da2 <__fp_nan>
    39fe:	0e f4       	brtc	.+2      	; 0x3a02 <__addsf3+0x1e>
    3a00:	e0 95       	com	r30
    3a02:	e7 fb       	bst	r30, 7
    3a04:	9f c1       	rjmp	.+830    	; 0x3d44 <__fp_inf>

00003a06 <__addsf3x>:
    3a06:	e9 2f       	mov	r30, r25
    3a08:	13 d2       	rcall	.+1062   	; 0x3e30 <__fp_split3>
    3a0a:	80 f3       	brcs	.-32     	; 0x39ec <__addsf3+0x8>
    3a0c:	ba 17       	cp	r27, r26
    3a0e:	62 07       	cpc	r22, r18
    3a10:	73 07       	cpc	r23, r19
    3a12:	84 07       	cpc	r24, r20
    3a14:	95 07       	cpc	r25, r21
    3a16:	18 f0       	brcs	.+6      	; 0x3a1e <__addsf3x+0x18>
    3a18:	71 f4       	brne	.+28     	; 0x3a36 <__addsf3x+0x30>
    3a1a:	9e f5       	brtc	.+102    	; 0x3a82 <__addsf3x+0x7c>
    3a1c:	42 c2       	rjmp	.+1156   	; 0x3ea2 <__fp_zero>
    3a1e:	0e f4       	brtc	.+2      	; 0x3a22 <__addsf3x+0x1c>
    3a20:	e0 95       	com	r30
    3a22:	0b 2e       	mov	r0, r27
    3a24:	ba 2f       	mov	r27, r26
    3a26:	a0 2d       	mov	r26, r0
    3a28:	0b 01       	movw	r0, r22
    3a2a:	b9 01       	movw	r22, r18
    3a2c:	90 01       	movw	r18, r0
    3a2e:	0c 01       	movw	r0, r24
    3a30:	ca 01       	movw	r24, r20
    3a32:	a0 01       	movw	r20, r0
    3a34:	11 24       	eor	r1, r1
    3a36:	ff 27       	eor	r31, r31
    3a38:	59 1b       	sub	r21, r25
    3a3a:	99 f0       	breq	.+38     	; 0x3a62 <__addsf3x+0x5c>
    3a3c:	59 3f       	cpi	r21, 0xF9	; 249
    3a3e:	50 f4       	brcc	.+20     	; 0x3a54 <__addsf3x+0x4e>
    3a40:	50 3e       	cpi	r21, 0xE0	; 224
    3a42:	68 f1       	brcs	.+90     	; 0x3a9e <__addsf3x+0x98>
    3a44:	1a 16       	cp	r1, r26
    3a46:	f0 40       	sbci	r31, 0x00	; 0
    3a48:	a2 2f       	mov	r26, r18
    3a4a:	23 2f       	mov	r18, r19
    3a4c:	34 2f       	mov	r19, r20
    3a4e:	44 27       	eor	r20, r20
    3a50:	58 5f       	subi	r21, 0xF8	; 248
    3a52:	f3 cf       	rjmp	.-26     	; 0x3a3a <__addsf3x+0x34>
    3a54:	46 95       	lsr	r20
    3a56:	37 95       	ror	r19
    3a58:	27 95       	ror	r18
    3a5a:	a7 95       	ror	r26
    3a5c:	f0 40       	sbci	r31, 0x00	; 0
    3a5e:	53 95       	inc	r21
    3a60:	c9 f7       	brne	.-14     	; 0x3a54 <__addsf3x+0x4e>
    3a62:	7e f4       	brtc	.+30     	; 0x3a82 <__addsf3x+0x7c>
    3a64:	1f 16       	cp	r1, r31
    3a66:	ba 0b       	sbc	r27, r26
    3a68:	62 0b       	sbc	r22, r18
    3a6a:	73 0b       	sbc	r23, r19
    3a6c:	84 0b       	sbc	r24, r20
    3a6e:	ba f0       	brmi	.+46     	; 0x3a9e <__addsf3x+0x98>
    3a70:	91 50       	subi	r25, 0x01	; 1
    3a72:	a1 f0       	breq	.+40     	; 0x3a9c <__addsf3x+0x96>
    3a74:	ff 0f       	add	r31, r31
    3a76:	bb 1f       	adc	r27, r27
    3a78:	66 1f       	adc	r22, r22
    3a7a:	77 1f       	adc	r23, r23
    3a7c:	88 1f       	adc	r24, r24
    3a7e:	c2 f7       	brpl	.-16     	; 0x3a70 <__addsf3x+0x6a>
    3a80:	0e c0       	rjmp	.+28     	; 0x3a9e <__addsf3x+0x98>
    3a82:	ba 0f       	add	r27, r26
    3a84:	62 1f       	adc	r22, r18
    3a86:	73 1f       	adc	r23, r19
    3a88:	84 1f       	adc	r24, r20
    3a8a:	48 f4       	brcc	.+18     	; 0x3a9e <__addsf3x+0x98>
    3a8c:	87 95       	ror	r24
    3a8e:	77 95       	ror	r23
    3a90:	67 95       	ror	r22
    3a92:	b7 95       	ror	r27
    3a94:	f7 95       	ror	r31
    3a96:	9e 3f       	cpi	r25, 0xFE	; 254
    3a98:	08 f0       	brcs	.+2      	; 0x3a9c <__addsf3x+0x96>
    3a9a:	b3 cf       	rjmp	.-154    	; 0x3a02 <__addsf3+0x1e>
    3a9c:	93 95       	inc	r25
    3a9e:	88 0f       	add	r24, r24
    3aa0:	08 f0       	brcs	.+2      	; 0x3aa4 <__addsf3x+0x9e>
    3aa2:	99 27       	eor	r25, r25
    3aa4:	ee 0f       	add	r30, r30
    3aa6:	97 95       	ror	r25
    3aa8:	87 95       	ror	r24
    3aaa:	08 95       	ret

00003aac <atan>:
    3aac:	df 93       	push	r29
    3aae:	dd 27       	eor	r29, r29
    3ab0:	b9 2f       	mov	r27, r25
    3ab2:	bf 77       	andi	r27, 0x7F	; 127
    3ab4:	40 e8       	ldi	r20, 0x80	; 128
    3ab6:	5f e3       	ldi	r21, 0x3F	; 63
    3ab8:	16 16       	cp	r1, r22
    3aba:	17 06       	cpc	r1, r23
    3abc:	48 07       	cpc	r20, r24
    3abe:	5b 07       	cpc	r21, r27
    3ac0:	10 f4       	brcc	.+4      	; 0x3ac6 <atan+0x1a>
    3ac2:	d9 2f       	mov	r29, r25
    3ac4:	f9 d1       	rcall	.+1010   	; 0x3eb8 <inverse>
    3ac6:	9f 93       	push	r25
    3ac8:	8f 93       	push	r24
    3aca:	7f 93       	push	r23
    3acc:	6f 93       	push	r22
    3ace:	23 d3       	rcall	.+1606   	; 0x4116 <square>
    3ad0:	ee e5       	ldi	r30, 0x5E	; 94
    3ad2:	f1 e0       	ldi	r31, 0x01	; 1
    3ad4:	69 d1       	rcall	.+722    	; 0x3da8 <__fp_powser>
    3ad6:	9b d1       	rcall	.+822    	; 0x3e0e <__fp_round>
    3ad8:	2f 91       	pop	r18
    3ada:	3f 91       	pop	r19
    3adc:	4f 91       	pop	r20
    3ade:	5f 91       	pop	r21
    3ae0:	61 d2       	rcall	.+1218   	; 0x3fa4 <__mulsf3x>
    3ae2:	dd 23       	and	r29, r29
    3ae4:	49 f0       	breq	.+18     	; 0x3af8 <atan+0x4c>
    3ae6:	90 58       	subi	r25, 0x80	; 128
    3ae8:	a2 ea       	ldi	r26, 0xA2	; 162
    3aea:	2a ed       	ldi	r18, 0xDA	; 218
    3aec:	3f e0       	ldi	r19, 0x0F	; 15
    3aee:	49 ec       	ldi	r20, 0xC9	; 201
    3af0:	5f e3       	ldi	r21, 0x3F	; 63
    3af2:	d0 78       	andi	r29, 0x80	; 128
    3af4:	5d 27       	eor	r21, r29
    3af6:	87 df       	rcall	.-242    	; 0x3a06 <__addsf3x>
    3af8:	df 91       	pop	r29
    3afa:	89 c1       	rjmp	.+786    	; 0x3e0e <__fp_round>

00003afc <ceil>:
    3afc:	bb d1       	rcall	.+886    	; 0x3e74 <__fp_trunc>
    3afe:	80 f0       	brcs	.+32     	; 0x3b20 <ceil+0x24>
    3b00:	9f 37       	cpi	r25, 0x7F	; 127
    3b02:	40 f4       	brcc	.+16     	; 0x3b14 <ceil+0x18>
    3b04:	91 11       	cpse	r25, r1
    3b06:	0e f4       	brtc	.+2      	; 0x3b0a <ceil+0xe>
    3b08:	cd c1       	rjmp	.+922    	; 0x3ea4 <__fp_szero>
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	70 e0       	ldi	r23, 0x00	; 0
    3b0e:	80 e8       	ldi	r24, 0x80	; 128
    3b10:	9f e3       	ldi	r25, 0x3F	; 63
    3b12:	08 95       	ret
    3b14:	26 f0       	brts	.+8      	; 0x3b1e <ceil+0x22>
    3b16:	1b 16       	cp	r1, r27
    3b18:	61 1d       	adc	r22, r1
    3b1a:	71 1d       	adc	r23, r1
    3b1c:	81 1d       	adc	r24, r1
    3b1e:	18 c1       	rjmp	.+560    	; 0x3d50 <__fp_mintl>
    3b20:	32 c1       	rjmp	.+612    	; 0x3d86 <__fp_mpack>

00003b22 <__cmpsf2>:
    3b22:	ec d0       	rcall	.+472    	; 0x3cfc <__fp_cmp>
    3b24:	08 f4       	brcc	.+2      	; 0x3b28 <__cmpsf2+0x6>
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	08 95       	ret

00003b2a <__divsf3>:
    3b2a:	0c d0       	rcall	.+24     	; 0x3b44 <__divsf3x>
    3b2c:	70 c1       	rjmp	.+736    	; 0x3e0e <__fp_round>
    3b2e:	68 d1       	rcall	.+720    	; 0x3e00 <__fp_pscB>
    3b30:	40 f0       	brcs	.+16     	; 0x3b42 <__divsf3+0x18>
    3b32:	5f d1       	rcall	.+702    	; 0x3df2 <__fp_pscA>
    3b34:	30 f0       	brcs	.+12     	; 0x3b42 <__divsf3+0x18>
    3b36:	21 f4       	brne	.+8      	; 0x3b40 <__divsf3+0x16>
    3b38:	5f 3f       	cpi	r21, 0xFF	; 255
    3b3a:	19 f0       	breq	.+6      	; 0x3b42 <__divsf3+0x18>
    3b3c:	03 c1       	rjmp	.+518    	; 0x3d44 <__fp_inf>
    3b3e:	51 11       	cpse	r21, r1
    3b40:	b1 c1       	rjmp	.+866    	; 0x3ea4 <__fp_szero>
    3b42:	2f c1       	rjmp	.+606    	; 0x3da2 <__fp_nan>

00003b44 <__divsf3x>:
    3b44:	75 d1       	rcall	.+746    	; 0x3e30 <__fp_split3>
    3b46:	98 f3       	brcs	.-26     	; 0x3b2e <__divsf3+0x4>

00003b48 <__divsf3_pse>:
    3b48:	99 23       	and	r25, r25
    3b4a:	c9 f3       	breq	.-14     	; 0x3b3e <__divsf3+0x14>
    3b4c:	55 23       	and	r21, r21
    3b4e:	b1 f3       	breq	.-20     	; 0x3b3c <__divsf3+0x12>
    3b50:	95 1b       	sub	r25, r21
    3b52:	55 0b       	sbc	r21, r21
    3b54:	bb 27       	eor	r27, r27
    3b56:	aa 27       	eor	r26, r26
    3b58:	62 17       	cp	r22, r18
    3b5a:	73 07       	cpc	r23, r19
    3b5c:	84 07       	cpc	r24, r20
    3b5e:	38 f0       	brcs	.+14     	; 0x3b6e <__divsf3_pse+0x26>
    3b60:	9f 5f       	subi	r25, 0xFF	; 255
    3b62:	5f 4f       	sbci	r21, 0xFF	; 255
    3b64:	22 0f       	add	r18, r18
    3b66:	33 1f       	adc	r19, r19
    3b68:	44 1f       	adc	r20, r20
    3b6a:	aa 1f       	adc	r26, r26
    3b6c:	a9 f3       	breq	.-22     	; 0x3b58 <__divsf3_pse+0x10>
    3b6e:	33 d0       	rcall	.+102    	; 0x3bd6 <__divsf3_pse+0x8e>
    3b70:	0e 2e       	mov	r0, r30
    3b72:	3a f0       	brmi	.+14     	; 0x3b82 <__divsf3_pse+0x3a>
    3b74:	e0 e8       	ldi	r30, 0x80	; 128
    3b76:	30 d0       	rcall	.+96     	; 0x3bd8 <__divsf3_pse+0x90>
    3b78:	91 50       	subi	r25, 0x01	; 1
    3b7a:	50 40       	sbci	r21, 0x00	; 0
    3b7c:	e6 95       	lsr	r30
    3b7e:	00 1c       	adc	r0, r0
    3b80:	ca f7       	brpl	.-14     	; 0x3b74 <__divsf3_pse+0x2c>
    3b82:	29 d0       	rcall	.+82     	; 0x3bd6 <__divsf3_pse+0x8e>
    3b84:	fe 2f       	mov	r31, r30
    3b86:	27 d0       	rcall	.+78     	; 0x3bd6 <__divsf3_pse+0x8e>
    3b88:	66 0f       	add	r22, r22
    3b8a:	77 1f       	adc	r23, r23
    3b8c:	88 1f       	adc	r24, r24
    3b8e:	bb 1f       	adc	r27, r27
    3b90:	26 17       	cp	r18, r22
    3b92:	37 07       	cpc	r19, r23
    3b94:	48 07       	cpc	r20, r24
    3b96:	ab 07       	cpc	r26, r27
    3b98:	b0 e8       	ldi	r27, 0x80	; 128
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <__divsf3_pse+0x56>
    3b9c:	bb 0b       	sbc	r27, r27
    3b9e:	80 2d       	mov	r24, r0
    3ba0:	bf 01       	movw	r22, r30
    3ba2:	ff 27       	eor	r31, r31
    3ba4:	93 58       	subi	r25, 0x83	; 131
    3ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba8:	2a f0       	brmi	.+10     	; 0x3bb4 <__divsf3_pse+0x6c>
    3baa:	9e 3f       	cpi	r25, 0xFE	; 254
    3bac:	51 05       	cpc	r21, r1
    3bae:	68 f0       	brcs	.+26     	; 0x3bca <__divsf3_pse+0x82>
    3bb0:	c9 c0       	rjmp	.+402    	; 0x3d44 <__fp_inf>
    3bb2:	78 c1       	rjmp	.+752    	; 0x3ea4 <__fp_szero>
    3bb4:	5f 3f       	cpi	r21, 0xFF	; 255
    3bb6:	ec f3       	brlt	.-6      	; 0x3bb2 <__divsf3_pse+0x6a>
    3bb8:	98 3e       	cpi	r25, 0xE8	; 232
    3bba:	dc f3       	brlt	.-10     	; 0x3bb2 <__divsf3_pse+0x6a>
    3bbc:	86 95       	lsr	r24
    3bbe:	77 95       	ror	r23
    3bc0:	67 95       	ror	r22
    3bc2:	b7 95       	ror	r27
    3bc4:	f7 95       	ror	r31
    3bc6:	9f 5f       	subi	r25, 0xFF	; 255
    3bc8:	c9 f7       	brne	.-14     	; 0x3bbc <__divsf3_pse+0x74>
    3bca:	88 0f       	add	r24, r24
    3bcc:	91 1d       	adc	r25, r1
    3bce:	96 95       	lsr	r25
    3bd0:	87 95       	ror	r24
    3bd2:	97 f9       	bld	r25, 7
    3bd4:	08 95       	ret
    3bd6:	e1 e0       	ldi	r30, 0x01	; 1
    3bd8:	66 0f       	add	r22, r22
    3bda:	77 1f       	adc	r23, r23
    3bdc:	88 1f       	adc	r24, r24
    3bde:	bb 1f       	adc	r27, r27
    3be0:	62 17       	cp	r22, r18
    3be2:	73 07       	cpc	r23, r19
    3be4:	84 07       	cpc	r24, r20
    3be6:	ba 07       	cpc	r27, r26
    3be8:	20 f0       	brcs	.+8      	; 0x3bf2 <__divsf3_pse+0xaa>
    3bea:	62 1b       	sub	r22, r18
    3bec:	73 0b       	sbc	r23, r19
    3bee:	84 0b       	sbc	r24, r20
    3bf0:	ba 0b       	sbc	r27, r26
    3bf2:	ee 1f       	adc	r30, r30
    3bf4:	88 f7       	brcc	.-30     	; 0x3bd8 <__divsf3_pse+0x90>
    3bf6:	e0 95       	com	r30
    3bf8:	08 95       	ret

00003bfa <__fixsfsi>:
    3bfa:	04 d0       	rcall	.+8      	; 0x3c04 <__fixunssfsi>
    3bfc:	68 94       	set
    3bfe:	b1 11       	cpse	r27, r1
    3c00:	51 c1       	rjmp	.+674    	; 0x3ea4 <__fp_szero>
    3c02:	08 95       	ret

00003c04 <__fixunssfsi>:
    3c04:	1d d1       	rcall	.+570    	; 0x3e40 <__fp_splitA>
    3c06:	88 f0       	brcs	.+34     	; 0x3c2a <__fixunssfsi+0x26>
    3c08:	9f 57       	subi	r25, 0x7F	; 127
    3c0a:	90 f0       	brcs	.+36     	; 0x3c30 <__fixunssfsi+0x2c>
    3c0c:	b9 2f       	mov	r27, r25
    3c0e:	99 27       	eor	r25, r25
    3c10:	b7 51       	subi	r27, 0x17	; 23
    3c12:	a0 f0       	brcs	.+40     	; 0x3c3c <__fixunssfsi+0x38>
    3c14:	d1 f0       	breq	.+52     	; 0x3c4a <__fixunssfsi+0x46>
    3c16:	66 0f       	add	r22, r22
    3c18:	77 1f       	adc	r23, r23
    3c1a:	88 1f       	adc	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	1a f0       	brmi	.+6      	; 0x3c26 <__fixunssfsi+0x22>
    3c20:	ba 95       	dec	r27
    3c22:	c9 f7       	brne	.-14     	; 0x3c16 <__fixunssfsi+0x12>
    3c24:	12 c0       	rjmp	.+36     	; 0x3c4a <__fixunssfsi+0x46>
    3c26:	b1 30       	cpi	r27, 0x01	; 1
    3c28:	81 f0       	breq	.+32     	; 0x3c4a <__fixunssfsi+0x46>
    3c2a:	3b d1       	rcall	.+630    	; 0x3ea2 <__fp_zero>
    3c2c:	b1 e0       	ldi	r27, 0x01	; 1
    3c2e:	08 95       	ret
    3c30:	38 c1       	rjmp	.+624    	; 0x3ea2 <__fp_zero>
    3c32:	67 2f       	mov	r22, r23
    3c34:	78 2f       	mov	r23, r24
    3c36:	88 27       	eor	r24, r24
    3c38:	b8 5f       	subi	r27, 0xF8	; 248
    3c3a:	39 f0       	breq	.+14     	; 0x3c4a <__fixunssfsi+0x46>
    3c3c:	b9 3f       	cpi	r27, 0xF9	; 249
    3c3e:	cc f3       	brlt	.-14     	; 0x3c32 <__fixunssfsi+0x2e>
    3c40:	86 95       	lsr	r24
    3c42:	77 95       	ror	r23
    3c44:	67 95       	ror	r22
    3c46:	b3 95       	inc	r27
    3c48:	d9 f7       	brne	.-10     	; 0x3c40 <__fixunssfsi+0x3c>
    3c4a:	3e f4       	brtc	.+14     	; 0x3c5a <__fixunssfsi+0x56>
    3c4c:	90 95       	com	r25
    3c4e:	80 95       	com	r24
    3c50:	70 95       	com	r23
    3c52:	61 95       	neg	r22
    3c54:	7f 4f       	sbci	r23, 0xFF	; 255
    3c56:	8f 4f       	sbci	r24, 0xFF	; 255
    3c58:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5a:	08 95       	ret

00003c5c <__floatunsisf>:
    3c5c:	e8 94       	clt
    3c5e:	09 c0       	rjmp	.+18     	; 0x3c72 <__floatsisf+0x12>

00003c60 <__floatsisf>:
    3c60:	97 fb       	bst	r25, 7
    3c62:	3e f4       	brtc	.+14     	; 0x3c72 <__floatsisf+0x12>
    3c64:	90 95       	com	r25
    3c66:	80 95       	com	r24
    3c68:	70 95       	com	r23
    3c6a:	61 95       	neg	r22
    3c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c70:	9f 4f       	sbci	r25, 0xFF	; 255
    3c72:	99 23       	and	r25, r25
    3c74:	a9 f0       	breq	.+42     	; 0x3ca0 <__floatsisf+0x40>
    3c76:	f9 2f       	mov	r31, r25
    3c78:	96 e9       	ldi	r25, 0x96	; 150
    3c7a:	bb 27       	eor	r27, r27
    3c7c:	93 95       	inc	r25
    3c7e:	f6 95       	lsr	r31
    3c80:	87 95       	ror	r24
    3c82:	77 95       	ror	r23
    3c84:	67 95       	ror	r22
    3c86:	b7 95       	ror	r27
    3c88:	f1 11       	cpse	r31, r1
    3c8a:	f8 cf       	rjmp	.-16     	; 0x3c7c <__floatsisf+0x1c>
    3c8c:	fa f4       	brpl	.+62     	; 0x3ccc <__floatsisf+0x6c>
    3c8e:	bb 0f       	add	r27, r27
    3c90:	11 f4       	brne	.+4      	; 0x3c96 <__floatsisf+0x36>
    3c92:	60 ff       	sbrs	r22, 0
    3c94:	1b c0       	rjmp	.+54     	; 0x3ccc <__floatsisf+0x6c>
    3c96:	6f 5f       	subi	r22, 0xFF	; 255
    3c98:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9e:	16 c0       	rjmp	.+44     	; 0x3ccc <__floatsisf+0x6c>
    3ca0:	88 23       	and	r24, r24
    3ca2:	11 f0       	breq	.+4      	; 0x3ca8 <__floatsisf+0x48>
    3ca4:	96 e9       	ldi	r25, 0x96	; 150
    3ca6:	11 c0       	rjmp	.+34     	; 0x3cca <__floatsisf+0x6a>
    3ca8:	77 23       	and	r23, r23
    3caa:	21 f0       	breq	.+8      	; 0x3cb4 <__floatsisf+0x54>
    3cac:	9e e8       	ldi	r25, 0x8E	; 142
    3cae:	87 2f       	mov	r24, r23
    3cb0:	76 2f       	mov	r23, r22
    3cb2:	05 c0       	rjmp	.+10     	; 0x3cbe <__floatsisf+0x5e>
    3cb4:	66 23       	and	r22, r22
    3cb6:	71 f0       	breq	.+28     	; 0x3cd4 <__floatsisf+0x74>
    3cb8:	96 e8       	ldi	r25, 0x86	; 134
    3cba:	86 2f       	mov	r24, r22
    3cbc:	70 e0       	ldi	r23, 0x00	; 0
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	2a f0       	brmi	.+10     	; 0x3ccc <__floatsisf+0x6c>
    3cc2:	9a 95       	dec	r25
    3cc4:	66 0f       	add	r22, r22
    3cc6:	77 1f       	adc	r23, r23
    3cc8:	88 1f       	adc	r24, r24
    3cca:	da f7       	brpl	.-10     	; 0x3cc2 <__floatsisf+0x62>
    3ccc:	88 0f       	add	r24, r24
    3cce:	96 95       	lsr	r25
    3cd0:	87 95       	ror	r24
    3cd2:	97 f9       	bld	r25, 7
    3cd4:	08 95       	ret

00003cd6 <floor>:
    3cd6:	ce d0       	rcall	.+412    	; 0x3e74 <__fp_trunc>
    3cd8:	80 f0       	brcs	.+32     	; 0x3cfa <floor+0x24>
    3cda:	9f 37       	cpi	r25, 0x7F	; 127
    3cdc:	40 f4       	brcc	.+16     	; 0x3cee <floor+0x18>
    3cde:	91 11       	cpse	r25, r1
    3ce0:	0e f0       	brts	.+2      	; 0x3ce4 <floor+0xe>
    3ce2:	e0 c0       	rjmp	.+448    	; 0x3ea4 <__fp_szero>
    3ce4:	60 e0       	ldi	r22, 0x00	; 0
    3ce6:	70 e0       	ldi	r23, 0x00	; 0
    3ce8:	80 e8       	ldi	r24, 0x80	; 128
    3cea:	9f eb       	ldi	r25, 0xBF	; 191
    3cec:	08 95       	ret
    3cee:	26 f4       	brtc	.+8      	; 0x3cf8 <floor+0x22>
    3cf0:	1b 16       	cp	r1, r27
    3cf2:	61 1d       	adc	r22, r1
    3cf4:	71 1d       	adc	r23, r1
    3cf6:	81 1d       	adc	r24, r1
    3cf8:	2b c0       	rjmp	.+86     	; 0x3d50 <__fp_mintl>
    3cfa:	45 c0       	rjmp	.+138    	; 0x3d86 <__fp_mpack>

00003cfc <__fp_cmp>:
    3cfc:	99 0f       	add	r25, r25
    3cfe:	00 08       	sbc	r0, r0
    3d00:	55 0f       	add	r21, r21
    3d02:	aa 0b       	sbc	r26, r26
    3d04:	e0 e8       	ldi	r30, 0x80	; 128
    3d06:	fe ef       	ldi	r31, 0xFE	; 254
    3d08:	16 16       	cp	r1, r22
    3d0a:	17 06       	cpc	r1, r23
    3d0c:	e8 07       	cpc	r30, r24
    3d0e:	f9 07       	cpc	r31, r25
    3d10:	c0 f0       	brcs	.+48     	; 0x3d42 <__fp_cmp+0x46>
    3d12:	12 16       	cp	r1, r18
    3d14:	13 06       	cpc	r1, r19
    3d16:	e4 07       	cpc	r30, r20
    3d18:	f5 07       	cpc	r31, r21
    3d1a:	98 f0       	brcs	.+38     	; 0x3d42 <__fp_cmp+0x46>
    3d1c:	62 1b       	sub	r22, r18
    3d1e:	73 0b       	sbc	r23, r19
    3d20:	84 0b       	sbc	r24, r20
    3d22:	95 0b       	sbc	r25, r21
    3d24:	39 f4       	brne	.+14     	; 0x3d34 <__fp_cmp+0x38>
    3d26:	0a 26       	eor	r0, r26
    3d28:	61 f0       	breq	.+24     	; 0x3d42 <__fp_cmp+0x46>
    3d2a:	23 2b       	or	r18, r19
    3d2c:	24 2b       	or	r18, r20
    3d2e:	25 2b       	or	r18, r21
    3d30:	21 f4       	brne	.+8      	; 0x3d3a <__fp_cmp+0x3e>
    3d32:	08 95       	ret
    3d34:	0a 26       	eor	r0, r26
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <__fp_cmp+0x3e>
    3d38:	a1 40       	sbci	r26, 0x01	; 1
    3d3a:	a6 95       	lsr	r26
    3d3c:	8f ef       	ldi	r24, 0xFF	; 255
    3d3e:	81 1d       	adc	r24, r1
    3d40:	81 1d       	adc	r24, r1
    3d42:	08 95       	ret

00003d44 <__fp_inf>:
    3d44:	97 f9       	bld	r25, 7
    3d46:	9f 67       	ori	r25, 0x7F	; 127
    3d48:	80 e8       	ldi	r24, 0x80	; 128
    3d4a:	70 e0       	ldi	r23, 0x00	; 0
    3d4c:	60 e0       	ldi	r22, 0x00	; 0
    3d4e:	08 95       	ret

00003d50 <__fp_mintl>:
    3d50:	88 23       	and	r24, r24
    3d52:	71 f4       	brne	.+28     	; 0x3d70 <__fp_mintl+0x20>
    3d54:	77 23       	and	r23, r23
    3d56:	21 f0       	breq	.+8      	; 0x3d60 <__fp_mintl+0x10>
    3d58:	98 50       	subi	r25, 0x08	; 8
    3d5a:	87 2b       	or	r24, r23
    3d5c:	76 2f       	mov	r23, r22
    3d5e:	07 c0       	rjmp	.+14     	; 0x3d6e <__fp_mintl+0x1e>
    3d60:	66 23       	and	r22, r22
    3d62:	11 f4       	brne	.+4      	; 0x3d68 <__fp_mintl+0x18>
    3d64:	99 27       	eor	r25, r25
    3d66:	0d c0       	rjmp	.+26     	; 0x3d82 <__fp_mintl+0x32>
    3d68:	90 51       	subi	r25, 0x10	; 16
    3d6a:	86 2b       	or	r24, r22
    3d6c:	70 e0       	ldi	r23, 0x00	; 0
    3d6e:	60 e0       	ldi	r22, 0x00	; 0
    3d70:	2a f0       	brmi	.+10     	; 0x3d7c <__fp_mintl+0x2c>
    3d72:	9a 95       	dec	r25
    3d74:	66 0f       	add	r22, r22
    3d76:	77 1f       	adc	r23, r23
    3d78:	88 1f       	adc	r24, r24
    3d7a:	da f7       	brpl	.-10     	; 0x3d72 <__fp_mintl+0x22>
    3d7c:	88 0f       	add	r24, r24
    3d7e:	96 95       	lsr	r25
    3d80:	87 95       	ror	r24
    3d82:	97 f9       	bld	r25, 7
    3d84:	08 95       	ret

00003d86 <__fp_mpack>:
    3d86:	9f 3f       	cpi	r25, 0xFF	; 255
    3d88:	31 f0       	breq	.+12     	; 0x3d96 <__fp_mpack_finite+0xc>

00003d8a <__fp_mpack_finite>:
    3d8a:	91 50       	subi	r25, 0x01	; 1
    3d8c:	20 f4       	brcc	.+8      	; 0x3d96 <__fp_mpack_finite+0xc>
    3d8e:	87 95       	ror	r24
    3d90:	77 95       	ror	r23
    3d92:	67 95       	ror	r22
    3d94:	b7 95       	ror	r27
    3d96:	88 0f       	add	r24, r24
    3d98:	91 1d       	adc	r25, r1
    3d9a:	96 95       	lsr	r25
    3d9c:	87 95       	ror	r24
    3d9e:	97 f9       	bld	r25, 7
    3da0:	08 95       	ret

00003da2 <__fp_nan>:
    3da2:	9f ef       	ldi	r25, 0xFF	; 255
    3da4:	80 ec       	ldi	r24, 0xC0	; 192
    3da6:	08 95       	ret

00003da8 <__fp_powser>:
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	1f 93       	push	r17
    3dae:	0f 93       	push	r16
    3db0:	ff 92       	push	r15
    3db2:	ef 92       	push	r14
    3db4:	df 92       	push	r13
    3db6:	7b 01       	movw	r14, r22
    3db8:	8c 01       	movw	r16, r24
    3dba:	68 94       	set
    3dbc:	05 c0       	rjmp	.+10     	; 0x3dc8 <__fp_powser+0x20>
    3dbe:	da 2e       	mov	r13, r26
    3dc0:	ef 01       	movw	r28, r30
    3dc2:	f0 d0       	rcall	.+480    	; 0x3fa4 <__mulsf3x>
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	e8 94       	clt
    3dc8:	a5 91       	lpm	r26, Z+
    3dca:	25 91       	lpm	r18, Z+
    3dcc:	35 91       	lpm	r19, Z+
    3dce:	45 91       	lpm	r20, Z+
    3dd0:	55 91       	lpm	r21, Z+
    3dd2:	ae f3       	brts	.-22     	; 0x3dbe <__fp_powser+0x16>
    3dd4:	ef 01       	movw	r28, r30
    3dd6:	17 de       	rcall	.-978    	; 0x3a06 <__addsf3x>
    3dd8:	fe 01       	movw	r30, r28
    3dda:	97 01       	movw	r18, r14
    3ddc:	a8 01       	movw	r20, r16
    3dde:	da 94       	dec	r13
    3de0:	79 f7       	brne	.-34     	; 0x3dc0 <__fp_powser+0x18>
    3de2:	df 90       	pop	r13
    3de4:	ef 90       	pop	r14
    3de6:	ff 90       	pop	r15
    3de8:	0f 91       	pop	r16
    3dea:	1f 91       	pop	r17
    3dec:	cf 91       	pop	r28
    3dee:	df 91       	pop	r29
    3df0:	08 95       	ret

00003df2 <__fp_pscA>:
    3df2:	00 24       	eor	r0, r0
    3df4:	0a 94       	dec	r0
    3df6:	16 16       	cp	r1, r22
    3df8:	17 06       	cpc	r1, r23
    3dfa:	18 06       	cpc	r1, r24
    3dfc:	09 06       	cpc	r0, r25
    3dfe:	08 95       	ret

00003e00 <__fp_pscB>:
    3e00:	00 24       	eor	r0, r0
    3e02:	0a 94       	dec	r0
    3e04:	12 16       	cp	r1, r18
    3e06:	13 06       	cpc	r1, r19
    3e08:	14 06       	cpc	r1, r20
    3e0a:	05 06       	cpc	r0, r21
    3e0c:	08 95       	ret

00003e0e <__fp_round>:
    3e0e:	09 2e       	mov	r0, r25
    3e10:	03 94       	inc	r0
    3e12:	00 0c       	add	r0, r0
    3e14:	11 f4       	brne	.+4      	; 0x3e1a <__fp_round+0xc>
    3e16:	88 23       	and	r24, r24
    3e18:	52 f0       	brmi	.+20     	; 0x3e2e <__fp_round+0x20>
    3e1a:	bb 0f       	add	r27, r27
    3e1c:	40 f4       	brcc	.+16     	; 0x3e2e <__fp_round+0x20>
    3e1e:	bf 2b       	or	r27, r31
    3e20:	11 f4       	brne	.+4      	; 0x3e26 <__fp_round+0x18>
    3e22:	60 ff       	sbrs	r22, 0
    3e24:	04 c0       	rjmp	.+8      	; 0x3e2e <__fp_round+0x20>
    3e26:	6f 5f       	subi	r22, 0xFF	; 255
    3e28:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2e:	08 95       	ret

00003e30 <__fp_split3>:
    3e30:	57 fd       	sbrc	r21, 7
    3e32:	90 58       	subi	r25, 0x80	; 128
    3e34:	44 0f       	add	r20, r20
    3e36:	55 1f       	adc	r21, r21
    3e38:	59 f0       	breq	.+22     	; 0x3e50 <__fp_splitA+0x10>
    3e3a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e3c:	71 f0       	breq	.+28     	; 0x3e5a <__fp_splitA+0x1a>
    3e3e:	47 95       	ror	r20

00003e40 <__fp_splitA>:
    3e40:	88 0f       	add	r24, r24
    3e42:	97 fb       	bst	r25, 7
    3e44:	99 1f       	adc	r25, r25
    3e46:	61 f0       	breq	.+24     	; 0x3e60 <__fp_splitA+0x20>
    3e48:	9f 3f       	cpi	r25, 0xFF	; 255
    3e4a:	79 f0       	breq	.+30     	; 0x3e6a <__fp_splitA+0x2a>
    3e4c:	87 95       	ror	r24
    3e4e:	08 95       	ret
    3e50:	12 16       	cp	r1, r18
    3e52:	13 06       	cpc	r1, r19
    3e54:	14 06       	cpc	r1, r20
    3e56:	55 1f       	adc	r21, r21
    3e58:	f2 cf       	rjmp	.-28     	; 0x3e3e <__fp_split3+0xe>
    3e5a:	46 95       	lsr	r20
    3e5c:	f1 df       	rcall	.-30     	; 0x3e40 <__fp_splitA>
    3e5e:	08 c0       	rjmp	.+16     	; 0x3e70 <__fp_splitA+0x30>
    3e60:	16 16       	cp	r1, r22
    3e62:	17 06       	cpc	r1, r23
    3e64:	18 06       	cpc	r1, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	f1 cf       	rjmp	.-30     	; 0x3e4c <__fp_splitA+0xc>
    3e6a:	86 95       	lsr	r24
    3e6c:	71 05       	cpc	r23, r1
    3e6e:	61 05       	cpc	r22, r1
    3e70:	08 94       	sec
    3e72:	08 95       	ret

00003e74 <__fp_trunc>:
    3e74:	e5 df       	rcall	.-54     	; 0x3e40 <__fp_splitA>
    3e76:	a0 f0       	brcs	.+40     	; 0x3ea0 <__fp_trunc+0x2c>
    3e78:	be e7       	ldi	r27, 0x7E	; 126
    3e7a:	b9 17       	cp	r27, r25
    3e7c:	88 f4       	brcc	.+34     	; 0x3ea0 <__fp_trunc+0x2c>
    3e7e:	bb 27       	eor	r27, r27
    3e80:	9f 38       	cpi	r25, 0x8F	; 143
    3e82:	60 f4       	brcc	.+24     	; 0x3e9c <__fp_trunc+0x28>
    3e84:	16 16       	cp	r1, r22
    3e86:	b1 1d       	adc	r27, r1
    3e88:	67 2f       	mov	r22, r23
    3e8a:	78 2f       	mov	r23, r24
    3e8c:	88 27       	eor	r24, r24
    3e8e:	98 5f       	subi	r25, 0xF8	; 248
    3e90:	f7 cf       	rjmp	.-18     	; 0x3e80 <__fp_trunc+0xc>
    3e92:	86 95       	lsr	r24
    3e94:	77 95       	ror	r23
    3e96:	67 95       	ror	r22
    3e98:	b1 1d       	adc	r27, r1
    3e9a:	93 95       	inc	r25
    3e9c:	96 39       	cpi	r25, 0x96	; 150
    3e9e:	c8 f3       	brcs	.-14     	; 0x3e92 <__fp_trunc+0x1e>
    3ea0:	08 95       	ret

00003ea2 <__fp_zero>:
    3ea2:	e8 94       	clt

00003ea4 <__fp_szero>:
    3ea4:	bb 27       	eor	r27, r27
    3ea6:	66 27       	eor	r22, r22
    3ea8:	77 27       	eor	r23, r23
    3eaa:	cb 01       	movw	r24, r22
    3eac:	97 f9       	bld	r25, 7
    3eae:	08 95       	ret

00003eb0 <__gesf2>:
    3eb0:	25 df       	rcall	.-438    	; 0x3cfc <__fp_cmp>
    3eb2:	08 f4       	brcc	.+2      	; 0x3eb6 <__gesf2+0x6>
    3eb4:	8f ef       	ldi	r24, 0xFF	; 255
    3eb6:	08 95       	ret

00003eb8 <inverse>:
    3eb8:	9b 01       	movw	r18, r22
    3eba:	ac 01       	movw	r20, r24
    3ebc:	60 e0       	ldi	r22, 0x00	; 0
    3ebe:	70 e0       	ldi	r23, 0x00	; 0
    3ec0:	80 e8       	ldi	r24, 0x80	; 128
    3ec2:	9f e3       	ldi	r25, 0x3F	; 63
    3ec4:	32 ce       	rjmp	.-924    	; 0x3b2a <__divsf3>

00003ec6 <lround>:
    3ec6:	bc df       	rcall	.-136    	; 0x3e40 <__fp_splitA>
    3ec8:	58 f1       	brcs	.+86     	; 0x3f20 <lround+0x5a>
    3eca:	9e 57       	subi	r25, 0x7E	; 126
    3ecc:	58 f1       	brcs	.+86     	; 0x3f24 <lround+0x5e>
    3ece:	98 51       	subi	r25, 0x18	; 24
    3ed0:	a0 f0       	brcs	.+40     	; 0x3efa <lround+0x34>
    3ed2:	e9 f0       	breq	.+58     	; 0x3f0e <lround+0x48>
    3ed4:	98 30       	cpi	r25, 0x08	; 8
    3ed6:	20 f5       	brcc	.+72     	; 0x3f20 <lround+0x5a>
    3ed8:	09 2e       	mov	r0, r25
    3eda:	99 27       	eor	r25, r25
    3edc:	66 0f       	add	r22, r22
    3ede:	77 1f       	adc	r23, r23
    3ee0:	88 1f       	adc	r24, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	0a 94       	dec	r0
    3ee6:	d1 f7       	brne	.-12     	; 0x3edc <lround+0x16>
    3ee8:	12 c0       	rjmp	.+36     	; 0x3f0e <lround+0x48>
    3eea:	06 2e       	mov	r0, r22
    3eec:	67 2f       	mov	r22, r23
    3eee:	78 2f       	mov	r23, r24
    3ef0:	88 27       	eor	r24, r24
    3ef2:	98 5f       	subi	r25, 0xF8	; 248
    3ef4:	11 f4       	brne	.+4      	; 0x3efa <lround+0x34>
    3ef6:	00 0c       	add	r0, r0
    3ef8:	07 c0       	rjmp	.+14     	; 0x3f08 <lround+0x42>
    3efa:	99 3f       	cpi	r25, 0xF9	; 249
    3efc:	b4 f3       	brlt	.-20     	; 0x3eea <lround+0x24>
    3efe:	86 95       	lsr	r24
    3f00:	77 95       	ror	r23
    3f02:	67 95       	ror	r22
    3f04:	93 95       	inc	r25
    3f06:	d9 f7       	brne	.-10     	; 0x3efe <lround+0x38>
    3f08:	61 1d       	adc	r22, r1
    3f0a:	71 1d       	adc	r23, r1
    3f0c:	81 1d       	adc	r24, r1
    3f0e:	3e f4       	brtc	.+14     	; 0x3f1e <lround+0x58>
    3f10:	90 95       	com	r25
    3f12:	80 95       	com	r24
    3f14:	70 95       	com	r23
    3f16:	61 95       	neg	r22
    3f18:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1e:	08 95       	ret
    3f20:	68 94       	set
    3f22:	c0 cf       	rjmp	.-128    	; 0x3ea4 <__fp_szero>
    3f24:	be cf       	rjmp	.-132    	; 0x3ea2 <__fp_zero>

00003f26 <modf>:
    3f26:	fa 01       	movw	r30, r20
    3f28:	dc 01       	movw	r26, r24
    3f2a:	aa 0f       	add	r26, r26
    3f2c:	bb 1f       	adc	r27, r27
    3f2e:	9b 01       	movw	r18, r22
    3f30:	ac 01       	movw	r20, r24
    3f32:	bf 57       	subi	r27, 0x7F	; 127
    3f34:	28 f4       	brcc	.+10     	; 0x3f40 <modf+0x1a>
    3f36:	22 27       	eor	r18, r18
    3f38:	33 27       	eor	r19, r19
    3f3a:	44 27       	eor	r20, r20
    3f3c:	50 78       	andi	r21, 0x80	; 128
    3f3e:	1f c0       	rjmp	.+62     	; 0x3f7e <modf+0x58>
    3f40:	b7 51       	subi	r27, 0x17	; 23
    3f42:	88 f4       	brcc	.+34     	; 0x3f66 <modf+0x40>
    3f44:	ab 2f       	mov	r26, r27
    3f46:	00 24       	eor	r0, r0
    3f48:	46 95       	lsr	r20
    3f4a:	37 95       	ror	r19
    3f4c:	27 95       	ror	r18
    3f4e:	01 1c       	adc	r0, r1
    3f50:	a3 95       	inc	r26
    3f52:	d2 f3       	brmi	.-12     	; 0x3f48 <modf+0x22>
    3f54:	00 20       	and	r0, r0
    3f56:	69 f0       	breq	.+26     	; 0x3f72 <modf+0x4c>
    3f58:	22 0f       	add	r18, r18
    3f5a:	33 1f       	adc	r19, r19
    3f5c:	44 1f       	adc	r20, r20
    3f5e:	b3 95       	inc	r27
    3f60:	da f3       	brmi	.-10     	; 0x3f58 <modf+0x32>
    3f62:	0d d0       	rcall	.+26     	; 0x3f7e <modf+0x58>
    3f64:	3e cd       	rjmp	.-1412   	; 0x39e2 <__subsf3>
    3f66:	61 30       	cpi	r22, 0x01	; 1
    3f68:	71 05       	cpc	r23, r1
    3f6a:	a0 e8       	ldi	r26, 0x80	; 128
    3f6c:	8a 07       	cpc	r24, r26
    3f6e:	b9 46       	sbci	r27, 0x69	; 105
    3f70:	30 f4       	brcc	.+12     	; 0x3f7e <modf+0x58>
    3f72:	9b 01       	movw	r18, r22
    3f74:	ac 01       	movw	r20, r24
    3f76:	66 27       	eor	r22, r22
    3f78:	77 27       	eor	r23, r23
    3f7a:	88 27       	eor	r24, r24
    3f7c:	90 78       	andi	r25, 0x80	; 128
    3f7e:	30 96       	adiw	r30, 0x00	; 0
    3f80:	21 f0       	breq	.+8      	; 0x3f8a <modf+0x64>
    3f82:	20 83       	st	Z, r18
    3f84:	31 83       	std	Z+1, r19	; 0x01
    3f86:	42 83       	std	Z+2, r20	; 0x02
    3f88:	53 83       	std	Z+3, r21	; 0x03
    3f8a:	08 95       	ret

00003f8c <__mulsf3>:
    3f8c:	0b d0       	rcall	.+22     	; 0x3fa4 <__mulsf3x>
    3f8e:	3f cf       	rjmp	.-386    	; 0x3e0e <__fp_round>
    3f90:	30 df       	rcall	.-416    	; 0x3df2 <__fp_pscA>
    3f92:	28 f0       	brcs	.+10     	; 0x3f9e <__mulsf3+0x12>
    3f94:	35 df       	rcall	.-406    	; 0x3e00 <__fp_pscB>
    3f96:	18 f0       	brcs	.+6      	; 0x3f9e <__mulsf3+0x12>
    3f98:	95 23       	and	r25, r21
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <__mulsf3+0x12>
    3f9c:	d3 ce       	rjmp	.-602    	; 0x3d44 <__fp_inf>
    3f9e:	01 cf       	rjmp	.-510    	; 0x3da2 <__fp_nan>
    3fa0:	11 24       	eor	r1, r1
    3fa2:	80 cf       	rjmp	.-256    	; 0x3ea4 <__fp_szero>

00003fa4 <__mulsf3x>:
    3fa4:	45 df       	rcall	.-374    	; 0x3e30 <__fp_split3>
    3fa6:	a0 f3       	brcs	.-24     	; 0x3f90 <__mulsf3+0x4>

00003fa8 <__mulsf3_pse>:
    3fa8:	95 9f       	mul	r25, r21
    3faa:	d1 f3       	breq	.-12     	; 0x3fa0 <__mulsf3+0x14>
    3fac:	95 0f       	add	r25, r21
    3fae:	50 e0       	ldi	r21, 0x00	; 0
    3fb0:	55 1f       	adc	r21, r21
    3fb2:	62 9f       	mul	r22, r18
    3fb4:	f0 01       	movw	r30, r0
    3fb6:	72 9f       	mul	r23, r18
    3fb8:	bb 27       	eor	r27, r27
    3fba:	f0 0d       	add	r31, r0
    3fbc:	b1 1d       	adc	r27, r1
    3fbe:	63 9f       	mul	r22, r19
    3fc0:	aa 27       	eor	r26, r26
    3fc2:	f0 0d       	add	r31, r0
    3fc4:	b1 1d       	adc	r27, r1
    3fc6:	aa 1f       	adc	r26, r26
    3fc8:	64 9f       	mul	r22, r20
    3fca:	66 27       	eor	r22, r22
    3fcc:	b0 0d       	add	r27, r0
    3fce:	a1 1d       	adc	r26, r1
    3fd0:	66 1f       	adc	r22, r22
    3fd2:	82 9f       	mul	r24, r18
    3fd4:	22 27       	eor	r18, r18
    3fd6:	b0 0d       	add	r27, r0
    3fd8:	a1 1d       	adc	r26, r1
    3fda:	62 1f       	adc	r22, r18
    3fdc:	73 9f       	mul	r23, r19
    3fde:	b0 0d       	add	r27, r0
    3fe0:	a1 1d       	adc	r26, r1
    3fe2:	62 1f       	adc	r22, r18
    3fe4:	83 9f       	mul	r24, r19
    3fe6:	a0 0d       	add	r26, r0
    3fe8:	61 1d       	adc	r22, r1
    3fea:	22 1f       	adc	r18, r18
    3fec:	74 9f       	mul	r23, r20
    3fee:	33 27       	eor	r19, r19
    3ff0:	a0 0d       	add	r26, r0
    3ff2:	61 1d       	adc	r22, r1
    3ff4:	23 1f       	adc	r18, r19
    3ff6:	84 9f       	mul	r24, r20
    3ff8:	60 0d       	add	r22, r0
    3ffa:	21 1d       	adc	r18, r1
    3ffc:	82 2f       	mov	r24, r18
    3ffe:	76 2f       	mov	r23, r22
    4000:	6a 2f       	mov	r22, r26
    4002:	11 24       	eor	r1, r1
    4004:	9f 57       	subi	r25, 0x7F	; 127
    4006:	50 40       	sbci	r21, 0x00	; 0
    4008:	8a f0       	brmi	.+34     	; 0x402c <__mulsf3_pse+0x84>
    400a:	e1 f0       	breq	.+56     	; 0x4044 <__mulsf3_pse+0x9c>
    400c:	88 23       	and	r24, r24
    400e:	4a f0       	brmi	.+18     	; 0x4022 <__mulsf3_pse+0x7a>
    4010:	ee 0f       	add	r30, r30
    4012:	ff 1f       	adc	r31, r31
    4014:	bb 1f       	adc	r27, r27
    4016:	66 1f       	adc	r22, r22
    4018:	77 1f       	adc	r23, r23
    401a:	88 1f       	adc	r24, r24
    401c:	91 50       	subi	r25, 0x01	; 1
    401e:	50 40       	sbci	r21, 0x00	; 0
    4020:	a9 f7       	brne	.-22     	; 0x400c <__mulsf3_pse+0x64>
    4022:	9e 3f       	cpi	r25, 0xFE	; 254
    4024:	51 05       	cpc	r21, r1
    4026:	70 f0       	brcs	.+28     	; 0x4044 <__mulsf3_pse+0x9c>
    4028:	8d ce       	rjmp	.-742    	; 0x3d44 <__fp_inf>
    402a:	3c cf       	rjmp	.-392    	; 0x3ea4 <__fp_szero>
    402c:	5f 3f       	cpi	r21, 0xFF	; 255
    402e:	ec f3       	brlt	.-6      	; 0x402a <__mulsf3_pse+0x82>
    4030:	98 3e       	cpi	r25, 0xE8	; 232
    4032:	dc f3       	brlt	.-10     	; 0x402a <__mulsf3_pse+0x82>
    4034:	86 95       	lsr	r24
    4036:	77 95       	ror	r23
    4038:	67 95       	ror	r22
    403a:	b7 95       	ror	r27
    403c:	f7 95       	ror	r31
    403e:	e7 95       	ror	r30
    4040:	9f 5f       	subi	r25, 0xFF	; 255
    4042:	c1 f7       	brne	.-16     	; 0x4034 <__mulsf3_pse+0x8c>
    4044:	fe 2b       	or	r31, r30
    4046:	88 0f       	add	r24, r24
    4048:	91 1d       	adc	r25, r1
    404a:	96 95       	lsr	r25
    404c:	87 95       	ror	r24
    404e:	97 f9       	bld	r25, 7
    4050:	08 95       	ret

00004052 <round>:
    4052:	f6 de       	rcall	.-532    	; 0x3e40 <__fp_splitA>
    4054:	e0 f0       	brcs	.+56     	; 0x408e <round+0x3c>
    4056:	9e 37       	cpi	r25, 0x7E	; 126
    4058:	d8 f0       	brcs	.+54     	; 0x4090 <round+0x3e>
    405a:	96 39       	cpi	r25, 0x96	; 150
    405c:	b8 f4       	brcc	.+46     	; 0x408c <round+0x3a>
    405e:	9e 38       	cpi	r25, 0x8E	; 142
    4060:	48 f4       	brcc	.+18     	; 0x4074 <round+0x22>
    4062:	67 2f       	mov	r22, r23
    4064:	78 2f       	mov	r23, r24
    4066:	88 27       	eor	r24, r24
    4068:	98 5f       	subi	r25, 0xF8	; 248
    406a:	f9 cf       	rjmp	.-14     	; 0x405e <round+0xc>
    406c:	86 95       	lsr	r24
    406e:	77 95       	ror	r23
    4070:	67 95       	ror	r22
    4072:	93 95       	inc	r25
    4074:	95 39       	cpi	r25, 0x95	; 149
    4076:	d0 f3       	brcs	.-12     	; 0x406c <round+0x1a>
    4078:	b6 2f       	mov	r27, r22
    407a:	b1 70       	andi	r27, 0x01	; 1
    407c:	6b 0f       	add	r22, r27
    407e:	71 1d       	adc	r23, r1
    4080:	81 1d       	adc	r24, r1
    4082:	20 f4       	brcc	.+8      	; 0x408c <round+0x3a>
    4084:	87 95       	ror	r24
    4086:	77 95       	ror	r23
    4088:	67 95       	ror	r22
    408a:	93 95       	inc	r25
    408c:	61 ce       	rjmp	.-830    	; 0x3d50 <__fp_mintl>
    408e:	7b ce       	rjmp	.-778    	; 0x3d86 <__fp_mpack>
    4090:	09 cf       	rjmp	.-494    	; 0x3ea4 <__fp_szero>
    4092:	11 f4       	brne	.+4      	; 0x4098 <round+0x46>
    4094:	0e f4       	brtc	.+2      	; 0x4098 <round+0x46>
    4096:	85 ce       	rjmp	.-758    	; 0x3da2 <__fp_nan>
    4098:	76 ce       	rjmp	.-788    	; 0x3d86 <__fp_mpack>

0000409a <sqrt>:
    409a:	d2 de       	rcall	.-604    	; 0x3e40 <__fp_splitA>
    409c:	d0 f3       	brcs	.-12     	; 0x4092 <round+0x40>
    409e:	99 23       	and	r25, r25
    40a0:	d9 f3       	breq	.-10     	; 0x4098 <round+0x46>
    40a2:	ce f3       	brts	.-14     	; 0x4096 <round+0x44>
    40a4:	9f 57       	subi	r25, 0x7F	; 127
    40a6:	55 0b       	sbc	r21, r21
    40a8:	87 ff       	sbrs	r24, 7
    40aa:	3f d0       	rcall	.+126    	; 0x412a <__fp_norm2>
    40ac:	00 24       	eor	r0, r0
    40ae:	a0 e6       	ldi	r26, 0x60	; 96
    40b0:	40 ea       	ldi	r20, 0xA0	; 160
    40b2:	90 01       	movw	r18, r0
    40b4:	80 58       	subi	r24, 0x80	; 128
    40b6:	56 95       	lsr	r21
    40b8:	97 95       	ror	r25
    40ba:	28 f4       	brcc	.+10     	; 0x40c6 <sqrt+0x2c>
    40bc:	80 5c       	subi	r24, 0xC0	; 192
    40be:	66 0f       	add	r22, r22
    40c0:	77 1f       	adc	r23, r23
    40c2:	88 1f       	adc	r24, r24
    40c4:	20 f0       	brcs	.+8      	; 0x40ce <sqrt+0x34>
    40c6:	26 17       	cp	r18, r22
    40c8:	37 07       	cpc	r19, r23
    40ca:	48 07       	cpc	r20, r24
    40cc:	30 f4       	brcc	.+12     	; 0x40da <sqrt+0x40>
    40ce:	62 1b       	sub	r22, r18
    40d0:	73 0b       	sbc	r23, r19
    40d2:	84 0b       	sbc	r24, r20
    40d4:	20 29       	or	r18, r0
    40d6:	31 29       	or	r19, r1
    40d8:	4a 2b       	or	r20, r26
    40da:	a6 95       	lsr	r26
    40dc:	17 94       	ror	r1
    40de:	07 94       	ror	r0
    40e0:	20 25       	eor	r18, r0
    40e2:	31 25       	eor	r19, r1
    40e4:	4a 27       	eor	r20, r26
    40e6:	58 f7       	brcc	.-42     	; 0x40be <sqrt+0x24>
    40e8:	66 0f       	add	r22, r22
    40ea:	77 1f       	adc	r23, r23
    40ec:	88 1f       	adc	r24, r24
    40ee:	20 f0       	brcs	.+8      	; 0x40f8 <sqrt+0x5e>
    40f0:	26 17       	cp	r18, r22
    40f2:	37 07       	cpc	r19, r23
    40f4:	48 07       	cpc	r20, r24
    40f6:	30 f4       	brcc	.+12     	; 0x4104 <sqrt+0x6a>
    40f8:	62 0b       	sbc	r22, r18
    40fa:	73 0b       	sbc	r23, r19
    40fc:	84 0b       	sbc	r24, r20
    40fe:	20 0d       	add	r18, r0
    4100:	31 1d       	adc	r19, r1
    4102:	41 1d       	adc	r20, r1
    4104:	a0 95       	com	r26
    4106:	81 f7       	brne	.-32     	; 0x40e8 <sqrt+0x4e>
    4108:	b9 01       	movw	r22, r18
    410a:	84 2f       	mov	r24, r20
    410c:	91 58       	subi	r25, 0x81	; 129
    410e:	88 0f       	add	r24, r24
    4110:	96 95       	lsr	r25
    4112:	87 95       	ror	r24
    4114:	08 95       	ret

00004116 <square>:
    4116:	9b 01       	movw	r18, r22
    4118:	ac 01       	movw	r20, r24
    411a:	38 cf       	rjmp	.-400    	; 0x3f8c <__mulsf3>

0000411c <trunc>:
    411c:	ab de       	rcall	.-682    	; 0x3e74 <__fp_trunc>
    411e:	20 f0       	brcs	.+8      	; 0x4128 <trunc+0xc>
    4120:	9f 37       	cpi	r25, 0x7F	; 127
    4122:	08 f4       	brcc	.+2      	; 0x4126 <trunc+0xa>
    4124:	bf ce       	rjmp	.-642    	; 0x3ea4 <__fp_szero>
    4126:	14 ce       	rjmp	.-984    	; 0x3d50 <__fp_mintl>
    4128:	2e ce       	rjmp	.-932    	; 0x3d86 <__fp_mpack>

0000412a <__fp_norm2>:
    412a:	91 50       	subi	r25, 0x01	; 1
    412c:	50 40       	sbci	r21, 0x00	; 0
    412e:	66 0f       	add	r22, r22
    4130:	77 1f       	adc	r23, r23
    4132:	88 1f       	adc	r24, r24
    4134:	d2 f7       	brpl	.-12     	; 0x412a <__fp_norm2>
    4136:	08 95       	ret

00004138 <__mulsi3>:
    4138:	62 9f       	mul	r22, r18
    413a:	d0 01       	movw	r26, r0
    413c:	73 9f       	mul	r23, r19
    413e:	f0 01       	movw	r30, r0
    4140:	82 9f       	mul	r24, r18
    4142:	e0 0d       	add	r30, r0
    4144:	f1 1d       	adc	r31, r1
    4146:	64 9f       	mul	r22, r20
    4148:	e0 0d       	add	r30, r0
    414a:	f1 1d       	adc	r31, r1
    414c:	92 9f       	mul	r25, r18
    414e:	f0 0d       	add	r31, r0
    4150:	83 9f       	mul	r24, r19
    4152:	f0 0d       	add	r31, r0
    4154:	74 9f       	mul	r23, r20
    4156:	f0 0d       	add	r31, r0
    4158:	65 9f       	mul	r22, r21
    415a:	f0 0d       	add	r31, r0
    415c:	99 27       	eor	r25, r25
    415e:	72 9f       	mul	r23, r18
    4160:	b0 0d       	add	r27, r0
    4162:	e1 1d       	adc	r30, r1
    4164:	f9 1f       	adc	r31, r25
    4166:	63 9f       	mul	r22, r19
    4168:	b0 0d       	add	r27, r0
    416a:	e1 1d       	adc	r30, r1
    416c:	f9 1f       	adc	r31, r25
    416e:	bd 01       	movw	r22, r26
    4170:	cf 01       	movw	r24, r30
    4172:	11 24       	eor	r1, r1
    4174:	08 95       	ret

00004176 <__divmodhi4>:
    4176:	97 fb       	bst	r25, 7
    4178:	09 2e       	mov	r0, r25
    417a:	07 26       	eor	r0, r23
    417c:	0a d0       	rcall	.+20     	; 0x4192 <__divmodhi4_neg1>
    417e:	77 fd       	sbrc	r23, 7
    4180:	04 d0       	rcall	.+8      	; 0x418a <__divmodhi4_neg2>
    4182:	49 d0       	rcall	.+146    	; 0x4216 <__udivmodhi4>
    4184:	06 d0       	rcall	.+12     	; 0x4192 <__divmodhi4_neg1>
    4186:	00 20       	and	r0, r0
    4188:	1a f4       	brpl	.+6      	; 0x4190 <__divmodhi4_exit>

0000418a <__divmodhi4_neg2>:
    418a:	70 95       	com	r23
    418c:	61 95       	neg	r22
    418e:	7f 4f       	sbci	r23, 0xFF	; 255

00004190 <__divmodhi4_exit>:
    4190:	08 95       	ret

00004192 <__divmodhi4_neg1>:
    4192:	f6 f7       	brtc	.-4      	; 0x4190 <__divmodhi4_exit>
    4194:	90 95       	com	r25
    4196:	81 95       	neg	r24
    4198:	9f 4f       	sbci	r25, 0xFF	; 255
    419a:	08 95       	ret

0000419c <__udivmodsi4>:
    419c:	a1 e2       	ldi	r26, 0x21	; 33
    419e:	1a 2e       	mov	r1, r26
    41a0:	aa 1b       	sub	r26, r26
    41a2:	bb 1b       	sub	r27, r27
    41a4:	fd 01       	movw	r30, r26
    41a6:	0d c0       	rjmp	.+26     	; 0x41c2 <__udivmodsi4_ep>

000041a8 <__udivmodsi4_loop>:
    41a8:	aa 1f       	adc	r26, r26
    41aa:	bb 1f       	adc	r27, r27
    41ac:	ee 1f       	adc	r30, r30
    41ae:	ff 1f       	adc	r31, r31
    41b0:	a2 17       	cp	r26, r18
    41b2:	b3 07       	cpc	r27, r19
    41b4:	e4 07       	cpc	r30, r20
    41b6:	f5 07       	cpc	r31, r21
    41b8:	20 f0       	brcs	.+8      	; 0x41c2 <__udivmodsi4_ep>
    41ba:	a2 1b       	sub	r26, r18
    41bc:	b3 0b       	sbc	r27, r19
    41be:	e4 0b       	sbc	r30, r20
    41c0:	f5 0b       	sbc	r31, r21

000041c2 <__udivmodsi4_ep>:
    41c2:	66 1f       	adc	r22, r22
    41c4:	77 1f       	adc	r23, r23
    41c6:	88 1f       	adc	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	1a 94       	dec	r1
    41cc:	69 f7       	brne	.-38     	; 0x41a8 <__udivmodsi4_loop>
    41ce:	60 95       	com	r22
    41d0:	70 95       	com	r23
    41d2:	80 95       	com	r24
    41d4:	90 95       	com	r25
    41d6:	9b 01       	movw	r18, r22
    41d8:	ac 01       	movw	r20, r24
    41da:	bd 01       	movw	r22, r26
    41dc:	cf 01       	movw	r24, r30
    41de:	08 95       	ret

000041e0 <__divmodsi4>:
    41e0:	97 fb       	bst	r25, 7
    41e2:	09 2e       	mov	r0, r25
    41e4:	05 26       	eor	r0, r21
    41e6:	0e d0       	rcall	.+28     	; 0x4204 <__divmodsi4_neg1>
    41e8:	57 fd       	sbrc	r21, 7
    41ea:	04 d0       	rcall	.+8      	; 0x41f4 <__divmodsi4_neg2>
    41ec:	d7 df       	rcall	.-82     	; 0x419c <__udivmodsi4>
    41ee:	0a d0       	rcall	.+20     	; 0x4204 <__divmodsi4_neg1>
    41f0:	00 1c       	adc	r0, r0
    41f2:	38 f4       	brcc	.+14     	; 0x4202 <__divmodsi4_exit>

000041f4 <__divmodsi4_neg2>:
    41f4:	50 95       	com	r21
    41f6:	40 95       	com	r20
    41f8:	30 95       	com	r19
    41fa:	21 95       	neg	r18
    41fc:	3f 4f       	sbci	r19, 0xFF	; 255
    41fe:	4f 4f       	sbci	r20, 0xFF	; 255
    4200:	5f 4f       	sbci	r21, 0xFF	; 255

00004202 <__divmodsi4_exit>:
    4202:	08 95       	ret

00004204 <__divmodsi4_neg1>:
    4204:	f6 f7       	brtc	.-4      	; 0x4202 <__divmodsi4_exit>
    4206:	90 95       	com	r25
    4208:	80 95       	com	r24
    420a:	70 95       	com	r23
    420c:	61 95       	neg	r22
    420e:	7f 4f       	sbci	r23, 0xFF	; 255
    4210:	8f 4f       	sbci	r24, 0xFF	; 255
    4212:	9f 4f       	sbci	r25, 0xFF	; 255
    4214:	08 95       	ret

00004216 <__udivmodhi4>:
    4216:	aa 1b       	sub	r26, r26
    4218:	bb 1b       	sub	r27, r27
    421a:	51 e1       	ldi	r21, 0x11	; 17
    421c:	07 c0       	rjmp	.+14     	; 0x422c <__udivmodhi4_ep>

0000421e <__udivmodhi4_loop>:
    421e:	aa 1f       	adc	r26, r26
    4220:	bb 1f       	adc	r27, r27
    4222:	a6 17       	cp	r26, r22
    4224:	b7 07       	cpc	r27, r23
    4226:	10 f0       	brcs	.+4      	; 0x422c <__udivmodhi4_ep>
    4228:	a6 1b       	sub	r26, r22
    422a:	b7 0b       	sbc	r27, r23

0000422c <__udivmodhi4_ep>:
    422c:	88 1f       	adc	r24, r24
    422e:	99 1f       	adc	r25, r25
    4230:	5a 95       	dec	r21
    4232:	a9 f7       	brne	.-22     	; 0x421e <__udivmodhi4_loop>
    4234:	80 95       	com	r24
    4236:	90 95       	com	r25
    4238:	bc 01       	movw	r22, r24
    423a:	cd 01       	movw	r24, r26
    423c:	08 95       	ret

0000423e <strtod>:
    423e:	8f 92       	push	r8
    4240:	9f 92       	push	r9
    4242:	af 92       	push	r10
    4244:	bf 92       	push	r11
    4246:	cf 92       	push	r12
    4248:	df 92       	push	r13
    424a:	ef 92       	push	r14
    424c:	ff 92       	push	r15
    424e:	0f 93       	push	r16
    4250:	1f 93       	push	r17
    4252:	cf 93       	push	r28
    4254:	df 93       	push	r29
    4256:	ec 01       	movw	r28, r24
    4258:	5b 01       	movw	r10, r22
    425a:	61 15       	cp	r22, r1
    425c:	71 05       	cpc	r23, r1
    425e:	19 f0       	breq	.+6      	; 0x4266 <strtod+0x28>
    4260:	fb 01       	movw	r30, r22
    4262:	91 83       	std	Z+1, r25	; 0x01
    4264:	80 83       	st	Z, r24
    4266:	f9 90       	ld	r15, Y+
    4268:	8f 2d       	mov	r24, r15
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	0e 94 8d 22 	call	0x451a	; 0x451a <isspace>
    4270:	89 2b       	or	r24, r25
    4272:	c9 f7       	brne	.-14     	; 0x4266 <strtod+0x28>
    4274:	fd e2       	ldi	r31, 0x2D	; 45
    4276:	ff 16       	cp	r15, r31
    4278:	21 f4       	brne	.+8      	; 0x4282 <strtod+0x44>
    427a:	f9 90       	ld	r15, Y+
    427c:	ee 24       	eor	r14, r14
    427e:	e3 94       	inc	r14
    4280:	05 c0       	rjmp	.+10     	; 0x428c <strtod+0x4e>
    4282:	2b e2       	ldi	r18, 0x2B	; 43
    4284:	f2 16       	cp	r15, r18
    4286:	09 f4       	brne	.+2      	; 0x428a <strtod+0x4c>
    4288:	f9 90       	ld	r15, Y+
    428a:	ee 24       	eor	r14, r14
    428c:	8e 01       	movw	r16, r28
    428e:	01 50       	subi	r16, 0x01	; 1
    4290:	10 40       	sbci	r17, 0x00	; 0
    4292:	c8 01       	movw	r24, r16
    4294:	66 e3       	ldi	r22, 0x36	; 54
    4296:	75 e0       	ldi	r23, 0x05	; 5
    4298:	43 e0       	ldi	r20, 0x03	; 3
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	0e 94 95 22 	call	0x452a	; 0x452a <strncasecmp_P>
    42a0:	89 2b       	or	r24, r25
    42a2:	01 f5       	brne	.+64     	; 0x42e4 <strtod+0xa6>
    42a4:	8e 01       	movw	r16, r28
    42a6:	0e 5f       	subi	r16, 0xFE	; 254
    42a8:	1f 4f       	sbci	r17, 0xFF	; 255
    42aa:	c8 01       	movw	r24, r16
    42ac:	69 e3       	ldi	r22, 0x39	; 57
    42ae:	75 e0       	ldi	r23, 0x05	; 5
    42b0:	45 e0       	ldi	r20, 0x05	; 5
    42b2:	50 e0       	ldi	r21, 0x00	; 0
    42b4:	0e 94 95 22 	call	0x452a	; 0x452a <strncasecmp_P>
    42b8:	89 2b       	or	r24, r25
    42ba:	19 f4       	brne	.+6      	; 0x42c2 <strtod+0x84>
    42bc:	8e 01       	movw	r16, r28
    42be:	09 5f       	subi	r16, 0xF9	; 249
    42c0:	1f 4f       	sbci	r17, 0xFF	; 255
    42c2:	a1 14       	cp	r10, r1
    42c4:	b1 04       	cpc	r11, r1
    42c6:	19 f0       	breq	.+6      	; 0x42ce <strtod+0x90>
    42c8:	f5 01       	movw	r30, r10
    42ca:	11 83       	std	Z+1, r17	; 0x01
    42cc:	00 83       	st	Z, r16
    42ce:	e0 fc       	sbrc	r14, 0
    42d0:	04 c0       	rjmp	.+8      	; 0x42da <strtod+0x9c>
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	80 e8       	ldi	r24, 0x80	; 128
    42d8:	14 c0       	rjmp	.+40     	; 0x4302 <strtod+0xc4>
    42da:	70 e0       	ldi	r23, 0x00	; 0
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	80 e8       	ldi	r24, 0x80	; 128
    42e0:	6f ef       	ldi	r22, 0xFF	; 255
    42e2:	08 c1       	rjmp	.+528    	; 0x44f4 <strtod+0x2b6>
    42e4:	c8 01       	movw	r24, r16
    42e6:	6e e3       	ldi	r22, 0x3E	; 62
    42e8:	75 e0       	ldi	r23, 0x05	; 5
    42ea:	43 e0       	ldi	r20, 0x03	; 3
    42ec:	50 e0       	ldi	r21, 0x00	; 0
    42ee:	0e 94 95 22 	call	0x452a	; 0x452a <strncasecmp_P>
    42f2:	89 2b       	or	r24, r25
    42f4:	69 f4       	brne	.+26     	; 0x4310 <strtod+0xd2>
    42f6:	a1 14       	cp	r10, r1
    42f8:	b1 04       	cpc	r11, r1
    42fa:	29 f4       	brne	.+10     	; 0x4306 <strtod+0xc8>
    42fc:	70 e0       	ldi	r23, 0x00	; 0
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	80 ec       	ldi	r24, 0xC0	; 192
    4302:	6f e7       	ldi	r22, 0x7F	; 127
    4304:	f7 c0       	rjmp	.+494    	; 0x44f4 <strtod+0x2b6>
    4306:	22 96       	adiw	r28, 0x02	; 2
    4308:	f5 01       	movw	r30, r10
    430a:	d1 83       	std	Z+1, r29	; 0x01
    430c:	c0 83       	st	Z, r28
    430e:	f6 cf       	rjmp	.-20     	; 0x42fc <strtod+0xbe>
    4310:	88 24       	eor	r8, r8
    4312:	99 24       	eor	r9, r9
    4314:	40 e0       	ldi	r20, 0x00	; 0
    4316:	50 e0       	ldi	r21, 0x00	; 0
    4318:	60 e0       	ldi	r22, 0x00	; 0
    431a:	70 e0       	ldi	r23, 0x00	; 0
    431c:	ef 2d       	mov	r30, r15
    431e:	e0 53       	subi	r30, 0x30	; 48
    4320:	ea 30       	cpi	r30, 0x0A	; 10
    4322:	a0 f5       	brcc	.+104    	; 0x438c <strtod+0x14e>
    4324:	f2 e0       	ldi	r31, 0x02	; 2
    4326:	ef 2a       	or	r14, r31
    4328:	8e 2d       	mov	r24, r14
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	9c 01       	movw	r18, r24
    432e:	28 70       	andi	r18, 0x08	; 8
    4330:	30 70       	andi	r19, 0x00	; 0
    4332:	e2 fe       	sbrs	r14, 2
    4334:	06 c0       	rjmp	.+12     	; 0x4342 <strtod+0x104>
    4336:	23 2b       	or	r18, r19
    4338:	79 f5       	brne	.+94     	; 0x4398 <strtod+0x15a>
    433a:	08 94       	sec
    433c:	81 1c       	adc	r8, r1
    433e:	91 1c       	adc	r9, r1
    4340:	2b c0       	rjmp	.+86     	; 0x4398 <strtod+0x15a>
    4342:	23 2b       	or	r18, r19
    4344:	19 f0       	breq	.+6      	; 0x434c <strtod+0x10e>
    4346:	08 94       	sec
    4348:	81 08       	sbc	r8, r1
    434a:	91 08       	sbc	r9, r1
    434c:	db 01       	movw	r26, r22
    434e:	ca 01       	movw	r24, r20
    4350:	12 e0       	ldi	r17, 0x02	; 2
    4352:	88 0f       	add	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	aa 1f       	adc	r26, r26
    4358:	bb 1f       	adc	r27, r27
    435a:	1a 95       	dec	r17
    435c:	d1 f7       	brne	.-12     	; 0x4352 <strtod+0x114>
    435e:	48 0f       	add	r20, r24
    4360:	59 1f       	adc	r21, r25
    4362:	6a 1f       	adc	r22, r26
    4364:	7b 1f       	adc	r23, r27
    4366:	44 0f       	add	r20, r20
    4368:	55 1f       	adc	r21, r21
    436a:	66 1f       	adc	r22, r22
    436c:	77 1f       	adc	r23, r23
    436e:	4e 0f       	add	r20, r30
    4370:	51 1d       	adc	r21, r1
    4372:	61 1d       	adc	r22, r1
    4374:	71 1d       	adc	r23, r1
    4376:	48 39       	cpi	r20, 0x98	; 152
    4378:	29 e9       	ldi	r18, 0x99	; 153
    437a:	52 07       	cpc	r21, r18
    437c:	29 e9       	ldi	r18, 0x99	; 153
    437e:	62 07       	cpc	r22, r18
    4380:	29 e1       	ldi	r18, 0x19	; 25
    4382:	72 07       	cpc	r23, r18
    4384:	48 f0       	brcs	.+18     	; 0x4398 <strtod+0x15a>
    4386:	84 e0       	ldi	r24, 0x04	; 4
    4388:	e8 2a       	or	r14, r24
    438a:	06 c0       	rjmp	.+12     	; 0x4398 <strtod+0x15a>
    438c:	ee 3f       	cpi	r30, 0xFE	; 254
    438e:	31 f4       	brne	.+12     	; 0x439c <strtod+0x15e>
    4390:	e3 fc       	sbrc	r14, 3
    4392:	39 c0       	rjmp	.+114    	; 0x4406 <strtod+0x1c8>
    4394:	98 e0       	ldi	r25, 0x08	; 8
    4396:	e9 2a       	or	r14, r25
    4398:	f9 90       	ld	r15, Y+
    439a:	c0 cf       	rjmp	.-128    	; 0x431c <strtod+0xde>
    439c:	e5 33       	cpi	r30, 0x35	; 53
    439e:	11 f0       	breq	.+4      	; 0x43a4 <strtod+0x166>
    43a0:	e5 31       	cpi	r30, 0x15	; 21
    43a2:	89 f5       	brne	.+98     	; 0x4406 <strtod+0x1c8>
    43a4:	29 91       	ld	r18, Y+
    43a6:	2d 32       	cpi	r18, 0x2D	; 45
    43a8:	19 f4       	brne	.+6      	; 0x43b0 <strtod+0x172>
    43aa:	e0 e1       	ldi	r30, 0x10	; 16
    43ac:	ee 2a       	or	r14, r30
    43ae:	05 c0       	rjmp	.+10     	; 0x43ba <strtod+0x17c>
    43b0:	2b 32       	cpi	r18, 0x2B	; 43
    43b2:	19 f0       	breq	.+6      	; 0x43ba <strtod+0x17c>
    43b4:	81 e0       	ldi	r24, 0x01	; 1
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	03 c0       	rjmp	.+6      	; 0x43c0 <strtod+0x182>
    43ba:	29 91       	ld	r18, Y+
    43bc:	82 e0       	ldi	r24, 0x02	; 2
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	e2 2f       	mov	r30, r18
    43c2:	e0 53       	subi	r30, 0x30	; 48
    43c4:	ea 30       	cpi	r30, 0x0A	; 10
    43c6:	18 f0       	brcs	.+6      	; 0x43ce <strtod+0x190>
    43c8:	c8 1b       	sub	r28, r24
    43ca:	d9 0b       	sbc	r29, r25
    43cc:	1c c0       	rjmp	.+56     	; 0x4406 <strtod+0x1c8>
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	fc e0       	ldi	r31, 0x0C	; 12
    43d4:	20 38       	cpi	r18, 0x80	; 128
    43d6:	3f 07       	cpc	r19, r31
    43d8:	5c f4       	brge	.+22     	; 0x43f0 <strtod+0x1b2>
    43da:	c9 01       	movw	r24, r18
    43dc:	88 0f       	add	r24, r24
    43de:	99 1f       	adc	r25, r25
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	28 0f       	add	r18, r24
    43e6:	39 1f       	adc	r19, r25
    43e8:	22 0f       	add	r18, r18
    43ea:	33 1f       	adc	r19, r19
    43ec:	2e 0f       	add	r18, r30
    43ee:	31 1d       	adc	r19, r1
    43f0:	e9 91       	ld	r30, Y+
    43f2:	e0 53       	subi	r30, 0x30	; 48
    43f4:	ea 30       	cpi	r30, 0x0A	; 10
    43f6:	68 f3       	brcs	.-38     	; 0x43d2 <strtod+0x194>
    43f8:	e4 fe       	sbrs	r14, 4
    43fa:	03 c0       	rjmp	.+6      	; 0x4402 <strtod+0x1c4>
    43fc:	30 95       	com	r19
    43fe:	21 95       	neg	r18
    4400:	3f 4f       	sbci	r19, 0xFF	; 255
    4402:	82 0e       	add	r8, r18
    4404:	93 1e       	adc	r9, r19
    4406:	ce 2c       	mov	r12, r14
    4408:	dd 24       	eor	r13, r13
    440a:	e1 fe       	sbrs	r14, 1
    440c:	07 c0       	rjmp	.+14     	; 0x441c <strtod+0x1de>
    440e:	a1 14       	cp	r10, r1
    4410:	b1 04       	cpc	r11, r1
    4412:	21 f0       	breq	.+8      	; 0x441c <strtod+0x1de>
    4414:	21 97       	sbiw	r28, 0x01	; 1
    4416:	f5 01       	movw	r30, r10
    4418:	d1 83       	std	Z+1, r29	; 0x01
    441a:	c0 83       	st	Z, r28
    441c:	cb 01       	movw	r24, r22
    441e:	ba 01       	movw	r22, r20
    4420:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <__floatunsisf>
    4424:	7b 01       	movw	r14, r22
    4426:	8c 01       	movw	r16, r24
    4428:	f3 e0       	ldi	r31, 0x03	; 3
    442a:	cf 22       	and	r12, r31
    442c:	dd 24       	eor	r13, r13
    442e:	23 e0       	ldi	r18, 0x03	; 3
    4430:	c2 16       	cp	r12, r18
    4432:	d1 04       	cpc	r13, r1
    4434:	21 f4       	brne	.+8      	; 0x443e <strtod+0x200>
    4436:	17 fb       	bst	r17, 7
    4438:	10 95       	com	r17
    443a:	17 f9       	bld	r17, 7
    443c:	10 95       	com	r17
    443e:	57 01       	movw	r10, r14
    4440:	68 01       	movw	r12, r16
    4442:	c8 01       	movw	r24, r16
    4444:	b7 01       	movw	r22, r14
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 e0       	ldi	r20, 0x00	; 0
    444c:	50 e0       	ldi	r21, 0x00	; 0
    444e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__cmpsf2>
    4452:	88 23       	and	r24, r24
    4454:	09 f4       	brne	.+2      	; 0x4458 <strtod+0x21a>
    4456:	4a c0       	rjmp	.+148    	; 0x44ec <strtod+0x2ae>
    4458:	97 fe       	sbrs	r9, 7
    445a:	0d c0       	rjmp	.+26     	; 0x4476 <strtod+0x238>
    445c:	25 e5       	ldi	r18, 0x55	; 85
    445e:	e2 2e       	mov	r14, r18
    4460:	25 e0       	ldi	r18, 0x05	; 5
    4462:	f2 2e       	mov	r15, r18
    4464:	90 94       	com	r9
    4466:	81 94       	neg	r8
    4468:	91 08       	sbc	r9, r1
    446a:	93 94       	inc	r9
    446c:	c0 e2       	ldi	r28, 0x20	; 32
    446e:	d0 e0       	ldi	r29, 0x00	; 0
    4470:	00 e0       	ldi	r16, 0x00	; 0
    4472:	10 e0       	ldi	r17, 0x00	; 0
    4474:	12 c0       	rjmp	.+36     	; 0x449a <strtod+0x25c>
    4476:	9d e6       	ldi	r25, 0x6D	; 109
    4478:	e9 2e       	mov	r14, r25
    447a:	95 e0       	ldi	r25, 0x05	; 5
    447c:	f9 2e       	mov	r15, r25
    447e:	f6 cf       	rjmp	.-20     	; 0x446c <strtod+0x22e>
    4480:	f7 01       	movw	r30, r14
    4482:	25 91       	lpm	r18, Z+
    4484:	35 91       	lpm	r19, Z+
    4486:	45 91       	lpm	r20, Z+
    4488:	54 91       	lpm	r21, Z+
    448a:	c6 01       	movw	r24, r12
    448c:	b5 01       	movw	r22, r10
    448e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__mulsf3>
    4492:	5b 01       	movw	r10, r22
    4494:	6c 01       	movw	r12, r24
    4496:	8c 1a       	sub	r8, r28
    4498:	9d 0a       	sbc	r9, r29
    449a:	8c 16       	cp	r8, r28
    449c:	9d 06       	cpc	r9, r29
    449e:	84 f7       	brge	.-32     	; 0x4480 <strtod+0x242>
    44a0:	d5 95       	asr	r29
    44a2:	c7 95       	ror	r28
    44a4:	0f 5f       	subi	r16, 0xFF	; 255
    44a6:	1f 4f       	sbci	r17, 0xFF	; 255
    44a8:	06 30       	cpi	r16, 0x06	; 6
    44aa:	11 05       	cpc	r17, r1
    44ac:	29 f0       	breq	.+10     	; 0x44b8 <strtod+0x27a>
    44ae:	8c ef       	ldi	r24, 0xFC	; 252
    44b0:	9f ef       	ldi	r25, 0xFF	; 255
    44b2:	e8 0e       	add	r14, r24
    44b4:	f9 1e       	adc	r15, r25
    44b6:	f1 cf       	rjmp	.-30     	; 0x449a <strtod+0x25c>
    44b8:	c5 01       	movw	r24, r10
    44ba:	d6 01       	movw	r26, r12
    44bc:	7c 01       	movw	r14, r24
    44be:	8d 01       	movw	r16, r26
    44c0:	8c 2d       	mov	r24, r12
    44c2:	88 0f       	add	r24, r24
    44c4:	8d 2d       	mov	r24, r13
    44c6:	88 1f       	adc	r24, r24
    44c8:	8f 3f       	cpi	r24, 0xFF	; 255
    44ca:	51 f0       	breq	.+20     	; 0x44e0 <strtod+0x2a2>
    44cc:	c6 01       	movw	r24, r12
    44ce:	b5 01       	movw	r22, r10
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	40 e0       	ldi	r20, 0x00	; 0
    44d6:	50 e0       	ldi	r21, 0x00	; 0
    44d8:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__cmpsf2>
    44dc:	88 23       	and	r24, r24
    44de:	31 f4       	brne	.+12     	; 0x44ec <strtod+0x2ae>
    44e0:	82 e2       	ldi	r24, 0x22	; 34
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	90 93 9c 06 	sts	0x069C, r25
    44e8:	80 93 9b 06 	sts	0x069B, r24
    44ec:	7e 2d       	mov	r23, r14
    44ee:	9f 2d       	mov	r25, r15
    44f0:	80 2f       	mov	r24, r16
    44f2:	61 2f       	mov	r22, r17
    44f4:	27 2f       	mov	r18, r23
    44f6:	39 2f       	mov	r19, r25
    44f8:	48 2f       	mov	r20, r24
    44fa:	56 2f       	mov	r21, r22
    44fc:	b9 01       	movw	r22, r18
    44fe:	ca 01       	movw	r24, r20
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	1f 91       	pop	r17
    4506:	0f 91       	pop	r16
    4508:	ff 90       	pop	r15
    450a:	ef 90       	pop	r14
    450c:	df 90       	pop	r13
    450e:	cf 90       	pop	r12
    4510:	bf 90       	pop	r11
    4512:	af 90       	pop	r10
    4514:	9f 90       	pop	r9
    4516:	8f 90       	pop	r8
    4518:	08 95       	ret

0000451a <isspace>:
    451a:	91 11       	cpse	r25, r1
    451c:	1e c0       	rjmp	.+60     	; 0x455a <__ctype_isfalse>
    451e:	80 32       	cpi	r24, 0x20	; 32
    4520:	19 f0       	breq	.+6      	; 0x4528 <isspace+0xe>
    4522:	89 50       	subi	r24, 0x09	; 9
    4524:	85 50       	subi	r24, 0x05	; 5
    4526:	d0 f7       	brcc	.-12     	; 0x451c <isspace+0x2>
    4528:	08 95       	ret

0000452a <strncasecmp_P>:
    452a:	fb 01       	movw	r30, r22
    452c:	dc 01       	movw	r26, r24
    452e:	41 50       	subi	r20, 0x01	; 1
    4530:	50 40       	sbci	r21, 0x00	; 0
    4532:	88 f0       	brcs	.+34     	; 0x4556 <strncasecmp_P+0x2c>
    4534:	8d 91       	ld	r24, X+
    4536:	81 34       	cpi	r24, 0x41	; 65
    4538:	1c f0       	brlt	.+6      	; 0x4540 <strncasecmp_P+0x16>
    453a:	8b 35       	cpi	r24, 0x5B	; 91
    453c:	0c f4       	brge	.+2      	; 0x4540 <strncasecmp_P+0x16>
    453e:	80 5e       	subi	r24, 0xE0	; 224
    4540:	65 91       	lpm	r22, Z+
    4542:	61 34       	cpi	r22, 0x41	; 65
    4544:	1c f0       	brlt	.+6      	; 0x454c <strncasecmp_P+0x22>
    4546:	6b 35       	cpi	r22, 0x5B	; 91
    4548:	0c f4       	brge	.+2      	; 0x454c <strncasecmp_P+0x22>
    454a:	60 5e       	subi	r22, 0xE0	; 224
    454c:	86 1b       	sub	r24, r22
    454e:	61 11       	cpse	r22, r1
    4550:	71 f3       	breq	.-36     	; 0x452e <strncasecmp_P+0x4>
    4552:	99 0b       	sbc	r25, r25
    4554:	08 95       	ret
    4556:	88 1b       	sub	r24, r24
    4558:	fc cf       	rjmp	.-8      	; 0x4552 <strncasecmp_P+0x28>

0000455a <__ctype_isfalse>:
    455a:	99 27       	eor	r25, r25
    455c:	88 27       	eor	r24, r24

0000455e <__ctype_istrue>:
    455e:	08 95       	ret

00004560 <_exit>:
    4560:	f8 94       	cli

00004562 <__stop_program>:
    4562:	ff cf       	rjmp	.-2      	; 0x4562 <__stop_program>
