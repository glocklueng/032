
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000534a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000330  00800200  00800200  000053be  2**0
                  ALLOC
  2 .debug_aranges 00000430  00000000  00000000  000053be  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000007c3  00000000  00000000  000057ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003c4c  00000000  00000000  00005fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000126a  00000000  00000000  00009bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003321  00000000  00000000  0000ae67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000680  00000000  00000000  0000e188  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000d55  00000000  00000000  0000e808  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000021a4  00000000  00000000  0000f55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fb0  00000000  00000000  00011701  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 27 03 	jmp	0x64e	; 0x64e <__ctors_end>
       4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
       8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
       c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      10:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      14:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      18:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      1c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      20:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      24:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      28:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      2c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      30:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      34:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      38:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      3c:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__vector_15>
      40:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      44:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__vector_17>
      48:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      4c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      50:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      54:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      58:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      5c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      60:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      64:	0c 94 01 20 	jmp	0x4002	; 0x4002 <__vector_25>
      68:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      6c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      70:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      74:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      78:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      7c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      80:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      84:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      88:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      8c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      90:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      94:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      98:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      9c:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      a0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      a4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      a8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      ac:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      b0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      b4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      b8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      bc:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      c0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      c4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      c8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      cc:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      d0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      d4:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      d8:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      dc:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      e0:	0c 94 48 03 	jmp	0x690	; 0x690 <__bad_interrupt>
      e4:	08 08       	sbc	r0, r8
      e6:	0b 08       	sbc	r0, r11
      e8:	0e 08       	sbc	r0, r14
      ea:	12 08       	sbc	r1, r2
      ec:	e1 07       	cpc	r30, r17
      ee:	2c 06       	cpc	r2, r28
      f0:	2c 06       	cpc	r2, r28
      f2:	2c 06       	cpc	r2, r28
      f4:	2c 06       	cpc	r2, r28
      f6:	2c 06       	cpc	r2, r28
      f8:	2c 06       	cpc	r2, r28
      fa:	2c 06       	cpc	r2, r28
      fc:	2c 06       	cpc	r2, r28
      fe:	2c 06       	cpc	r2, r28
     100:	2c 06       	cpc	r2, r28
     102:	2c 06       	cpc	r2, r28
     104:	2c 06       	cpc	r2, r28
     106:	e4 07       	cpc	r30, r20
     108:	ec 07       	cpc	r30, r28
     10a:	f4 07       	cpc	r31, r20
     10c:	fc 07       	cpc	r31, r28
     10e:	ff 07       	cpc	r31, r31
     110:	2c 06       	cpc	r2, r28
     112:	2c 06       	cpc	r2, r28
     114:	2c 06       	cpc	r2, r28
     116:	2c 06       	cpc	r2, r28
     118:	2c 06       	cpc	r2, r28
     11a:	2c 06       	cpc	r2, r28
     11c:	02 08       	sbc	r0, r2
     11e:	2c 06       	cpc	r2, r28
     120:	02 08       	sbc	r0, r2
     122:	2c 06       	cpc	r2, r28
     124:	2c 06       	cpc	r2, r28
     126:	2c 06       	cpc	r2, r28
     128:	2c 06       	cpc	r2, r28
     12a:	2c 06       	cpc	r2, r28
     12c:	2c 06       	cpc	r2, r28
     12e:	2c 06       	cpc	r2, r28
     130:	2c 06       	cpc	r2, r28
     132:	2c 06       	cpc	r2, r28
     134:	2c 06       	cpc	r2, r28
     136:	2c 06       	cpc	r2, r28
     138:	2c 06       	cpc	r2, r28
     13a:	2c 06       	cpc	r2, r28
     13c:	2c 06       	cpc	r2, r28
     13e:	2c 06       	cpc	r2, r28
     140:	2c 06       	cpc	r2, r28
     142:	2c 06       	cpc	r2, r28
     144:	2c 06       	cpc	r2, r28
     146:	2c 06       	cpc	r2, r28
     148:	2c 06       	cpc	r2, r28
     14a:	2c 06       	cpc	r2, r28
     14c:	2c 06       	cpc	r2, r28
     14e:	05 08       	sbc	r0, r5
     150:	2c 06       	cpc	r2, r28
     152:	2c 06       	cpc	r2, r28
     154:	2c 06       	cpc	r2, r28
     156:	2c 06       	cpc	r2, r28
     158:	2c 06       	cpc	r2, r28
     15a:	2c 06       	cpc	r2, r28
     15c:	2c 06       	cpc	r2, r28
     15e:	2c 06       	cpc	r2, r28
     160:	2c 06       	cpc	r2, r28
     162:	2c 06       	cpc	r2, r28
     164:	2c 06       	cpc	r2, r28
     166:	2c 06       	cpc	r2, r28
     168:	2c 06       	cpc	r2, r28
     16a:	2c 06       	cpc	r2, r28
     16c:	2c 06       	cpc	r2, r28
     16e:	2c 06       	cpc	r2, r28
     170:	2c 06       	cpc	r2, r28
     172:	2c 06       	cpc	r2, r28
     174:	2c 06       	cpc	r2, r28
     176:	2c 06       	cpc	r2, r28
     178:	2c 06       	cpc	r2, r28
     17a:	2c 06       	cpc	r2, r28
     17c:	2c 06       	cpc	r2, r28
     17e:	2c 06       	cpc	r2, r28
     180:	2c 06       	cpc	r2, r28
     182:	2c 06       	cpc	r2, r28
     184:	1c 08       	sbc	r1, r12
     186:	2c 06       	cpc	r2, r28
     188:	2c 06       	cpc	r2, r28
     18a:	2c 06       	cpc	r2, r28
     18c:	2c 06       	cpc	r2, r28
     18e:	2c 06       	cpc	r2, r28
     190:	2c 06       	cpc	r2, r28
     192:	2c 06       	cpc	r2, r28
     194:	2c 06       	cpc	r2, r28
     196:	2c 06       	cpc	r2, r28
     198:	20 08       	sbc	r2, r0
     19a:	23 08       	sbc	r2, r3
     19c:	26 08       	sbc	r2, r6
     19e:	16 08       	sbc	r1, r6
     1a0:	19 08       	sbc	r1, r9
     1a2:	de 07       	cpc	r29, r30
     1a4:	de 07       	cpc	r29, r30
     1a6:	da 07       	cpc	r29, r26
     1a8:	d3 07       	cpc	r29, r19
     1aa:	ce 07       	cpc	r28, r30
     1ac:	c9 07       	cpc	r28, r25
     1ae:	2c 06       	cpc	r2, r28
     1b0:	2c 06       	cpc	r2, r28
     1b2:	c2 07       	cpc	r28, r18
     1b4:	bd 07       	cpc	r27, r29
     1b6:	b8 07       	cpc	r27, r24
     1b8:	b3 07       	cpc	r27, r19
     1ba:	ae 07       	cpc	r26, r30
     1bc:	a9 07       	cpc	r26, r25
     1be:	a4 07       	cpc	r26, r20
     1c0:	9f 07       	cpc	r25, r31
     1c2:	9a 07       	cpc	r25, r26
     1c4:	95 07       	cpc	r25, r21
     1c6:	90 07       	cpc	r25, r16
     1c8:	8b 07       	cpc	r24, r27
     1ca:	86 07       	cpc	r24, r22
     1cc:	2c 06       	cpc	r2, r28
     1ce:	2c 06       	cpc	r2, r28
     1d0:	2c 06       	cpc	r2, r28
     1d2:	2c 06       	cpc	r2, r28
     1d4:	2c 06       	cpc	r2, r28
     1d6:	2c 06       	cpc	r2, r28
     1d8:	2c 06       	cpc	r2, r28
     1da:	2c 06       	cpc	r2, r28
     1dc:	2c 06       	cpc	r2, r28
     1de:	da 07       	cpc	r29, r26
     1e0:	2c 06       	cpc	r2, r28
     1e2:	2c 06       	cpc	r2, r28
     1e4:	2c 06       	cpc	r2, r28
     1e6:	2c 06       	cpc	r2, r28
     1e8:	2c 06       	cpc	r2, r28
     1ea:	2c 06       	cpc	r2, r28
     1ec:	2c 06       	cpc	r2, r28
     1ee:	2c 06       	cpc	r2, r28
     1f0:	2c 06       	cpc	r2, r28
     1f2:	2c 06       	cpc	r2, r28
     1f4:	2c 06       	cpc	r2, r28
     1f6:	2c 06       	cpc	r2, r28
     1f8:	2c 06       	cpc	r2, r28
     1fa:	2c 06       	cpc	r2, r28
     1fc:	2c 06       	cpc	r2, r28
     1fe:	2c 06       	cpc	r2, r28
     200:	2c 06       	cpc	r2, r28
     202:	2c 06       	cpc	r2, r28
     204:	2c 06       	cpc	r2, r28
     206:	2c 06       	cpc	r2, r28
     208:	2c 06       	cpc	r2, r28
     20a:	2c 06       	cpc	r2, r28
     20c:	2c 06       	cpc	r2, r28
     20e:	2c 06       	cpc	r2, r28
     210:	2c 06       	cpc	r2, r28
     212:	2c 06       	cpc	r2, r28
     214:	2c 06       	cpc	r2, r28
     216:	2c 06       	cpc	r2, r28
     218:	2c 06       	cpc	r2, r28
     21a:	da 07       	cpc	r29, r26
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.1854>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.1852>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.1850>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1848>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1846>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1844>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1842>:
     273:	0d 0a 00                                            ...

00000276 <__c.1840>:
     276:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000281 <__c.1838>:
     281:	0d 0a 00                                            ...

00000284 <__c.1836>:
     284:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

00000291 <__c.1609>:
     291:	5b 4e 53 4c 5d 20 70 69 63 6b 6f 42 65 61 72 20     [NSL] pickoBear 
     2a1:	6f 6b 0a 0d 00                                      ok...

000002a6 <__c.1669>:
     2a6:	0a 0d 00                                            ...

000002a9 <__c.1667>:
     2a9:	65 72 72 6f 72 3a 20 00                             error: .

000002b1 <__c.1664>:
     2b1:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     2c1:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

000002cf <__c.1661>:
     2cf:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     2df:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

000002ee <__c.1658>:
     2ee:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     2fe:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

0000030f <__c.1655>:
     30f:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     31f:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

0000032a <__c.1651>:
     32a:	6f 6b 0a 0d 00                                      ok...

0000032f <__c.1648>:
     32f:	4e 6f 74 20 68 6f 6d 65 64 0a 0d 00                 Not homed...

0000033b <__c.1677>:
     33b:	0d 0a 00                                            ...

0000033e <__c.1675>:
     33e:	0d 0a 4f 70 65 6e 50 6e 50 2f 47 72 62 6c 20 30     ..OpenPnP/Grbl 0
     34e:	2e 37 36 00                                         .76.

00000352 <__c.1734>:
     352:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
     362:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
     372:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
     382:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

0000038d <__c.1732>:
     38d:	27 24 27 20 74 6f 20 64 75 6d 70 20 63 75 72 72     '$' to dump curr
     39d:	65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a 00        ent settings...

000003ac <__c.1724>:
     3ac:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     3bc:	6e 67 0d 0a 00                                      ng...

000003c1 <__c.1722>:
     3c1:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     3d1:	72 0d 0a 00                                         r...

000003d5 <__c.1679>:
     3d5:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     3e5:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     3f5:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     405:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     415:	0d 0a 00                                            ...

00000418 <__c.1677>:
     418:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     428:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     438:	61 62 6c 65 64 29 0d 0a 00                          abled)...

00000441 <__c.1675>:
     441:	24 31 30 30 30 20 3d 20 00                          $1000 = .

0000044a <__c.1673>:
     44a:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     45a:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     46a:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     47a:	2f 6d 69 6e 29 0d 0a 00                             /min)...

00000482 <__c.1671>:
     482:	24 39 20 3d 20 00                                   $9 = .

00000488 <__c.1669>:
     488:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     498:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000004a6 <__c.1667>:
     4a6:	24 38 20 3d 20 00                                   $8 = .

000004ac <__c.1665>:
     4ac:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     4bc:	29 0d 0a 00                                         )...

000004c0 <__c.1663>:
     4c0:	24 37 20 3d 20 00                                   $7 = .

000004c6 <__c.1661>:
     4c6:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     4d6:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

000004e4 <__c.1659>:
     4e4:	24 36 20 3d 20 00                                   $6 = .

000004ea <__c.1657>:
     4ea:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     4fa:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000508 <__c.1655>:
     508:	24 35 20 3d 20 00                                   $5 = .

0000050e <__c.1653>:
     50e:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     51e:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

0000052b <__c.1651>:
     52b:	24 34 20 3d 20 00                                   $4 = .

00000531 <__c.1649>:
     531:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     541:	0a 00                                               ..

00000543 <__c.1647>:
     543:	24 33 20 3d 20 00                                   $3 = .

00000549 <__c.1645>:
     549:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

00000559 <__c.1643>:
     559:	24 32 20 3d 20 00                                   $2 = .

0000055f <__c.1641>:
     55f:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

0000056f <__c.1639>:
     56f:	24 31 20 3d 20 00                                   $1 = .

00000575 <__c.1637>:
     575:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

00000585 <__c.1635>:
     585:	24 30 20 3d 20 00                                   $0 = .

0000058b <__c.1633>:
     58b:	0d 0a 00                                            ...

0000058e <__c.1631>:
     58e:	30 2e 37 36 00                                      0.76.

00000593 <__c.1629>:
     593:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

0000059f <__c.2140>:
     59f:	70 69 63 6b 6f 62 65 61 72 20 69 73 20 6e 6f 74     pickobear is not
     5af:	20 68 6f 6d 65 64 0d 0a 00                           homed...

000005b8 <__c.2138>:
     5b8:	70 69 63 6b 6f 62 65 61 72 20 69 73 20 68 6f 6d     pickobear is hom
     5c8:	65 64 0d 0a 00                                      ed...

000005cd <__c.2132>:
     5cd:	68 6f 6d 69 6e 67 0d 0a 00                          homing...

000005d6 <__c.2016>:
     5d6:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000005e0 <__c.2034>:
     5e0:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

000005ea <__c.1813>:
     5ea:	48 65 61 64 20 64 6f 77 6e 0a 0d 00                 Head down...

000005f6 <__c.1806>:
     5f6:	76 61 63 75 75 6d 20 63 68 61 6e 67 65 0a 0d 00     vacuum change...

00000606 <__c.1798>:
     606:	61 74 63 20 63 68 61 6e 67 65 0a 0d 00              atc change...

00000613 <pstr_inf>:
     613:	49 4e 46                                            INF

00000616 <pstr_inity>:
     616:	49 4e 49 54 59                                      INITY

0000061b <pstr_nan>:
     61b:	4e 41 4e                                            NAN

0000061e <pwr_m10>:
     61e:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     62e:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000636 <pwr_p10>:
     636:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     646:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000064e <__ctors_end>:
     64e:	11 24       	eor	r1, r1
     650:	1f be       	out	0x3f, r1	; 63
     652:	cf ef       	ldi	r28, 0xFF	; 255
     654:	d1 e2       	ldi	r29, 0x21	; 33
     656:	de bf       	out	0x3e, r29	; 62
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	00 e0       	ldi	r16, 0x00	; 0
     65c:	0c bf       	out	0x3c, r16	; 60

0000065e <__do_copy_data>:
     65e:	12 e0       	ldi	r17, 0x02	; 2
     660:	a0 e0       	ldi	r26, 0x00	; 0
     662:	b2 e0       	ldi	r27, 0x02	; 2
     664:	ea e4       	ldi	r30, 0x4A	; 74
     666:	f3 e5       	ldi	r31, 0x53	; 83
     668:	00 e0       	ldi	r16, 0x00	; 0
     66a:	0b bf       	out	0x3b, r16	; 59
     66c:	02 c0       	rjmp	.+4      	; 0x672 <__do_copy_data+0x14>
     66e:	07 90       	elpm	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	a0 30       	cpi	r26, 0x00	; 0
     674:	b1 07       	cpc	r27, r17
     676:	d9 f7       	brne	.-10     	; 0x66e <__do_copy_data+0x10>

00000678 <__do_clear_bss>:
     678:	15 e0       	ldi	r17, 0x05	; 5
     67a:	a0 e0       	ldi	r26, 0x00	; 0
     67c:	b2 e0       	ldi	r27, 0x02	; 2
     67e:	01 c0       	rjmp	.+2      	; 0x682 <.do_clear_bss_start>

00000680 <.do_clear_bss_loop>:
     680:	1d 92       	st	X+, r1

00000682 <.do_clear_bss_start>:
     682:	a0 33       	cpi	r26, 0x30	; 48
     684:	b1 07       	cpc	r27, r17
     686:	e1 f7       	brne	.-8      	; 0x680 <.do_clear_bss_loop>
     688:	0e 94 78 09 	call	0x12f0	; 0x12f0 <main>
     68c:	0c 94 a3 29 	jmp	0x5346	; 0x5346 <_exit>

00000690 <__bad_interrupt>:
     690:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000694 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     694:	24 9a       	sbi	0x04, 4	; 4
}
     696:	08 95       	ret

00000698 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     698:	89 2b       	or	r24, r25
     69a:	11 f4       	brne	.+4      	; 0x6a0 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     69c:	2c 98       	cbi	0x05, 4	; 5
     69e:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     6a0:	2c 9a       	sbi	0x05, 4	; 5
     6a2:	08 95       	ret

000006a4 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6a4:	f9 99       	sbic	0x1f, 1	; 31
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     6a8:	92 bd       	out	0x22, r25	; 34
     6aa:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     6b0:	80 b5       	in	r24, 0x20	; 32
}
     6b2:	08 95       	ret

000006b4 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     6b4:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6b6:	f9 99       	sbic	0x1f, 1	; 31
     6b8:	fe cf       	rjmp	.-4      	; 0x6b6 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     6ba:	92 bd       	out	0x22, r25	; 34
     6bc:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     6c2:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     6c4:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     6c6:	89 2f       	mov	r24, r25
     6c8:	86 23       	and	r24, r22
     6ca:	41 f0       	breq	.+16     	; 0x6dc <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     6cc:	6f 3f       	cpi	r22, 0xFF	; 255
     6ce:	71 f0       	breq	.+28     	; 0x6ec <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     6d0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     6d6:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6d8:	78 94       	sei
}
     6da:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     6dc:	99 23       	and	r25, r25
     6de:	e1 f3       	breq	.-8      	; 0x6d8 <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6e0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6e2:	84 e2       	ldi	r24, 0x24	; 36
     6e4:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     6e6:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     6e8:	78 94       	sei
}
     6ea:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6ec:	84 e1       	ldi	r24, 0x14	; 20
     6ee:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     6f0:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6f2:	78 94       	sei
}
     6f4:	08 95       	ret

000006f6 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     6f6:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     6f8:	41 15       	cp	r20, r1
     6fa:	51 05       	cpc	r21, r1
     6fc:	c9 f1       	breq	.+114    	; 0x770 <memcpy_from_eeprom_with_checksum+0x7a>
     6fe:	a0 e0       	ldi	r26, 0x00	; 0
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     704:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     706:	c9 01       	movw	r24, r18
     708:	86 0f       	add	r24, r22
     70a:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     70c:	f9 99       	sbic	0x1f, 1	; 31
     70e:	fe cf       	rjmp	.-4      	; 0x70c <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     710:	92 bd       	out	0x22, r25	; 34
     712:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     714:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     716:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     718:	aa 23       	and	r26, r26
     71a:	59 f0       	breq	.+22     	; 0x732 <memcpy_from_eeprom_with_checksum+0x3c>
     71c:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     71e:	a8 2f       	mov	r26, r24
     720:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     722:	90 83       	st	Z, r25
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     728:	24 17       	cp	r18, r20
     72a:	35 07       	cpc	r19, r21
     72c:	71 f0       	breq	.+28     	; 0x74a <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     72e:	31 96       	adiw	r30, 0x01	; 1
     730:	ea cf       	rjmp	.-44     	; 0x706 <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     732:	8a 2f       	mov	r24, r26
     734:	88 1f       	adc	r24, r24
     736:	88 27       	eor	r24, r24
     738:	88 1f       	adc	r24, r24
    checksum += data;    
     73a:	a8 2f       	mov	r26, r24
     73c:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     73e:	90 83       	st	Z, r25
     740:	2f 5f       	subi	r18, 0xFF	; 255
     742:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     744:	24 17       	cp	r18, r20
     746:	35 07       	cpc	r19, r21
     748:	91 f7       	brne	.-28     	; 0x72e <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     74a:	62 0f       	add	r22, r18
     74c:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     74e:	f9 99       	sbic	0x1f, 1	; 31
     750:	fe cf       	rjmp	.-4      	; 0x74e <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     752:	72 bd       	out	0x22, r23	; 34
     754:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     75a:	80 b5       	in	r24, 0x20	; 32
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	a8 17       	cp	r26, r24
     762:	11 f0       	breq	.+4      	; 0x768 <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     764:	c9 01       	movw	r24, r18
     766:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     768:	21 e0       	ldi	r18, 0x01	; 1
     76a:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     76c:	c9 01       	movw	r24, r18
     76e:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     770:	a0 e0       	ldi	r26, 0x00	; 0
     772:	ed cf       	rjmp	.-38     	; 0x74e <memcpy_from_eeprom_with_checksum+0x58>

00000774 <memcpy_to_eeprom_with_checksum>:
}

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     774:	df 92       	push	r13
     776:	ef 92       	push	r14
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	ec 01       	movw	r28, r24
     784:	db 01       	movw	r26, r22
     786:	8a 01       	movw	r16, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     788:	41 15       	cp	r20, r1
     78a:	51 05       	cpc	r21, r1
     78c:	09 f4       	brne	.+2      	; 0x790 <memcpy_to_eeprom_with_checksum+0x1c>
     78e:	62 c0       	rjmp	.+196    	; 0x854 <memcpy_to_eeprom_with_checksum+0xe0>
     790:	9c 01       	movw	r18, r24
     792:	fa 01       	movw	r30, r20
     794:	70 e0       	ldi	r23, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
     796:	91 e0       	ldi	r25, 0x01	; 1
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     798:	54 e2       	ldi	r21, 0x24	; 36
     79a:	e5 2e       	mov	r14, r21
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     79c:	44 e1       	ldi	r20, 0x14	; 20
     79e:	d4 2e       	mov	r13, r20
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	f8 2e       	mov	r15, r24


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     7a4:	77 23       	and	r23, r23
     7a6:	f1 f0       	breq	.+60     	; 0x7e4 <memcpy_to_eeprom_with_checksum+0x70>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
    checksum += *source;
     7aa:	6c 91       	ld	r22, X
     7ac:	78 2f       	mov	r23, r24
     7ae:	76 0f       	add	r23, r22
    eeprom_put_char(destination++, *(source++)); 
     7b0:	a9 01       	movw	r20, r18
     7b2:	4f 5f       	subi	r20, 0xFF	; 255
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     7b6:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7b8:	f9 99       	sbic	0x1f, 1	; 31
     7ba:	fe cf       	rjmp	.-4      	; 0x7b8 <memcpy_to_eeprom_with_checksum+0x44>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     7bc:	32 bd       	out	0x22, r19	; 34
     7be:	21 bd       	out	0x21, r18	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7c0:	9f bb       	out	0x1f, r25	; 31
	old_value = EEDR; // Get old EEPROM value.
     7c2:	20 b5       	in	r18, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     7c4:	26 27       	eor	r18, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     7c6:	82 2f       	mov	r24, r18
     7c8:	86 23       	and	r24, r22
     7ca:	89 f0       	breq	.+34     	; 0x7ee <memcpy_to_eeprom_with_checksum+0x7a>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     7cc:	6f 3f       	cpi	r22, 0xFF	; 255
     7ce:	a1 f1       	breq	.+104    	; 0x838 <memcpy_to_eeprom_with_checksum+0xc4>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     7d0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     7d2:	ff ba       	out	0x1f, r15	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     7d4:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     7d6:	78 94       	sei
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	89 f0       	breq	.+34     	; 0x7fe <memcpy_to_eeprom_with_checksum+0x8a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     7dc:	11 96       	adiw	r26, 0x01	; 1
     7de:	9a 01       	movw	r18, r20


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     7e0:	77 23       	and	r23, r23
     7e2:	11 f7       	brne	.-60     	; 0x7a8 <memcpy_to_eeprom_with_checksum+0x34>
     7e4:	87 2f       	mov	r24, r23
     7e6:	88 1f       	adc	r24, r24
     7e8:	88 27       	eor	r24, r24
     7ea:	88 1f       	adc	r24, r24
     7ec:	de cf       	rjmp	.-68     	; 0x7aa <memcpy_to_eeprom_with_checksum+0x36>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     7ee:	22 23       	and	r18, r18
     7f0:	91 f3       	breq	.-28     	; 0x7d6 <memcpy_to_eeprom_with_checksum+0x62>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     7f2:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     7f4:	ef ba       	out	0x1f, r14	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     7f6:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     7f8:	78 94       	sei
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	79 f7       	brne	.-34     	; 0x7dc <memcpy_to_eeprom_with_checksum+0x68>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     7fe:	c0 0f       	add	r28, r16
     800:	d1 1f       	adc	r29, r17
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     802:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     804:	f9 99       	sbic	0x1f, 1	; 31
     806:	fe cf       	rjmp	.-4      	; 0x804 <memcpy_to_eeprom_with_checksum+0x90>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     808:	d2 bd       	out	0x22, r29	; 34
     80a:	c1 bd       	out	0x21, r28	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     810:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     812:	97 27       	eor	r25, r23
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     814:	89 2f       	mov	r24, r25
     816:	87 23       	and	r24, r23
     818:	91 f0       	breq	.+36     	; 0x83e <memcpy_to_eeprom_with_checksum+0xca>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     81a:	7f 3f       	cpi	r23, 0xFF	; 255
     81c:	b9 f0       	breq	.+46     	; 0x84c <memcpy_to_eeprom_with_checksum+0xd8>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     81e:	70 bd       	out	0x20, r23	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     824:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     826:	78 94       	sei
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     838:	df ba       	out	0x1f, r13	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     83a:	f9 9a       	sbi	0x1f, 1	; 31
     83c:	cc cf       	rjmp	.-104    	; 0x7d6 <memcpy_to_eeprom_with_checksum+0x62>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     83e:	99 23       	and	r25, r25
     840:	91 f3       	breq	.-28     	; 0x826 <memcpy_to_eeprom_with_checksum+0xb2>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     842:	70 bd       	out	0x20, r23	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     844:	84 e2       	ldi	r24, 0x24	; 36
     846:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     848:	f9 9a       	sbi	0x1f, 1	; 31
     84a:	ed cf       	rjmp	.-38     	; 0x826 <memcpy_to_eeprom_with_checksum+0xb2>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     84c:	84 e1       	ldi	r24, 0x14	; 20
     84e:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     850:	f9 9a       	sbi	0x1f, 1	; 31
     852:	e9 cf       	rjmp	.-46     	; 0x826 <memcpy_to_eeprom_with_checksum+0xb2>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	d5 cf       	rjmp	.-86     	; 0x802 <memcpy_to_eeprom_with_checksum+0x8e>

00000858 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     858:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     85c:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     860:	40 93 27 02 	sts	0x0227, r20
}
     864:	08 95       	ret

00000866 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     866:	af 92       	push	r10
     868:	bf 92       	push	r11
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	df 93       	push	r29
     878:	cf 93       	push	r28
     87a:	0f 92       	push	r0
     87c:	0f 92       	push	r0
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	6c 01       	movw	r12, r24
     884:	5b 01       	movw	r10, r22
     886:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     888:	fb 01       	movw	r30, r22
     88a:	00 81       	ld	r16, Z
     88c:	11 81       	ldd	r17, Z+1	; 0x01
     88e:	08 0f       	add	r16, r24
     890:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     892:	c8 01       	movw	r24, r16
     894:	be 01       	movw	r22, r28
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	0e 94 12 28 	call	0x5024	; 0x5024 <strtod>
     89e:	f7 01       	movw	r30, r14
     8a0:	60 83       	st	Z, r22
     8a2:	71 83       	std	Z+1, r23	; 0x01
     8a4:	82 83       	std	Z+2, r24	; 0x02
     8a6:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	80 17       	cp	r24, r16
     8ae:	91 07       	cpc	r25, r17
     8b0:	a9 f0       	breq	.+42     	; 0x8dc <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     8b2:	8c 19       	sub	r24, r12
     8b4:	9d 09       	sbc	r25, r13
     8b6:	f5 01       	movw	r30, r10
     8b8:	91 83       	std	Z+1, r25	; 0x01
     8ba:	80 83       	st	Z, r24
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     8c0:	c9 01       	movw	r24, r18
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	bf 90       	pop	r11
     8d8:	af 90       	pop	r10
     8da:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 00 02 	sts	0x0200, r24
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	ec cf       	rjmp	.-40     	; 0x8c0 <read_double+0x5a>

000008e8 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     8e8:	88 e2       	ldi	r24, 0x28	; 40
     8ea:	e0 e0       	ldi	r30, 0x00	; 0
     8ec:	f2 e0       	ldi	r31, 0x02	; 2
     8ee:	df 01       	movw	r26, r30
     8f0:	1d 92       	st	X+, r1
     8f2:	8a 95       	dec	r24
     8f4:	e9 f7       	brne	.-6      	; 0x8f0 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     8f6:	60 91 1a 05 	lds	r22, 0x051A
     8fa:	70 91 1b 05 	lds	r23, 0x051B
     8fe:	80 91 1c 05 	lds	r24, 0x051C
     902:	90 91 1d 05 	lds	r25, 0x051D
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e7       	ldi	r20, 0x70	; 112
     90c:	52 e4       	ldi	r21, 0x42	; 66
     90e:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
     912:	60 93 0a 02 	sts	0x020A, r22
     916:	70 93 0b 02 	sts	0x020B, r23
     91a:	80 93 0c 02 	sts	0x020C, r24
     91e:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     922:	60 91 1e 05 	lds	r22, 0x051E
     926:	70 91 1f 05 	lds	r23, 0x051F
     92a:	80 91 20 05 	lds	r24, 0x0520
     92e:	90 91 21 05 	lds	r25, 0x0521
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e7       	ldi	r20, 0x70	; 112
     938:	52 e4       	ldi	r21, 0x42	; 66
     93a:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
     93e:	60 93 0e 02 	sts	0x020E, r22
     942:	70 93 0f 02 	sts	0x020F, r23
     946:	80 93 10 02 	sts	0x0210, r24
     94a:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     94e:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     95e:	90 93 04 02 	sts	0x0204, r25
}
     962:	08 95       	ret

00000964 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
     964:	af 92       	push	r10
     966:	bf 92       	push	r11
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	79 01       	movw	r14, r18
     976:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
     978:	5f 77       	andi	r21, 0x7F	; 127
     97a:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
     97e:	0e 94 49 24 	call	0x4892	; 0x4892 <atan>
     982:	5b 01       	movw	r10, r22
     984:	6c 01       	movw	r12, r24
  if (y>0) {
     986:	c8 01       	movw	r24, r16
     988:	b7 01       	movw	r22, r14
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
     996:	18 16       	cp	r1, r24
     998:	5c f4       	brge	.+22     	; 0x9b0 <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
     99a:	b5 01       	movw	r22, r10
     99c:	c6 01       	movw	r24, r12
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	df 90       	pop	r13
     9a8:	cf 90       	pop	r12
     9aa:	bf 90       	pop	r11
     9ac:	af 90       	pop	r10
     9ae:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
     9b0:	c6 01       	movw	r24, r12
     9b2:	b5 01       	movw	r22, r10
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
     9c0:	18 16       	cp	r1, r24
     9c2:	5c f4       	brge	.+22     	; 0x9da <theta+0x76>
    {
      return(M_PI-theta);
     9c4:	6b ed       	ldi	r22, 0xDB	; 219
     9c6:	7f e0       	ldi	r23, 0x0F	; 15
     9c8:	89 e4       	ldi	r24, 0x49	; 73
     9ca:	90 e4       	ldi	r25, 0x40	; 64
     9cc:	a6 01       	movw	r20, r12
     9ce:	95 01       	movw	r18, r10
     9d0:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
     9d4:	5b 01       	movw	r10, r22
     9d6:	6c 01       	movw	r12, r24
     9d8:	e0 cf       	rjmp	.-64     	; 0x99a <theta+0x36>
    } else {
      return(-M_PI-theta);
     9da:	6b ed       	ldi	r22, 0xDB	; 219
     9dc:	7f e0       	ldi	r23, 0x0F	; 15
     9de:	89 e4       	ldi	r24, 0x49	; 73
     9e0:	90 ec       	ldi	r25, 0xC0	; 192
     9e2:	a6 01       	movw	r20, r12
     9e4:	95 01       	movw	r18, r10
     9e6:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
     9ea:	5b 01       	movw	r10, r22
     9ec:	6c 01       	movw	r12, r24
     9ee:	d5 cf       	rjmp	.-86     	; 0x99a <theta+0x36>

000009f0 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	0f 92       	push	r0
     a06:	0f 92       	push	r0
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	5b 01       	movw	r10, r22
     a0e:	6a 01       	movw	r12, r20
     a10:	79 01       	movw	r14, r18
  if (line[*char_counter] == 0) {
     a12:	d9 01       	movw	r26, r18
     a14:	ed 91       	ld	r30, X+
     a16:	fc 91       	ld	r31, X
     a18:	e4 0f       	add	r30, r20
     a1a:	f5 1f       	adc	r31, r21
     a1c:	e0 81       	ld	r30, Z
     a1e:	ee 23       	and	r30, r30
     a20:	41 f0       	breq	.+16     	; 0xa32 <next_statement+0x42>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     a22:	dc 01       	movw	r26, r24
     a24:	ec 93       	st	X, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     a26:	e1 54       	subi	r30, 0x41	; 65
     a28:	ea 31       	cpi	r30, 0x1A	; 26
     a2a:	98 f0       	brcs	.+38     	; 0xa52 <next_statement+0x62>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	80 93 00 02 	sts	0x0200, r24
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     a36:	c9 01       	movw	r24, r18
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     a52:	f9 01       	movw	r30, r18
     a54:	80 81       	ld	r24, Z
     a56:	91 81       	ldd	r25, Z+1	; 0x01
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	91 83       	std	Z+1, r25	; 0x01
     a5c:	80 83       	st	Z, r24

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
     a5e:	8a 01       	movw	r16, r20
     a60:	08 0f       	add	r16, r24
     a62:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     a64:	c8 01       	movw	r24, r16
     a66:	be 01       	movw	r22, r28
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	0e 94 12 28 	call	0x5024	; 0x5024 <strtod>
     a70:	d5 01       	movw	r26, r10
     a72:	6d 93       	st	X+, r22
     a74:	7d 93       	st	X+, r23
     a76:	8d 93       	st	X+, r24
     a78:	9c 93       	st	X, r25
     a7a:	13 97       	sbiw	r26, 0x03	; 3
  if(end == start) { 
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	9a 81       	ldd	r25, Y+2	; 0x02
     a80:	08 17       	cp	r16, r24
     a82:	19 07       	cpc	r17, r25
     a84:	41 f0       	breq	.+16     	; 0xa96 <next_statement+0xa6>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     a86:	8c 19       	sub	r24, r12
     a88:	9d 09       	sbc	r25, r13
     a8a:	f7 01       	movw	r30, r14
     a8c:	91 83       	std	Z+1, r25	; 0x01
     a8e:	80 83       	st	Z, r24
     a90:	21 e0       	ldi	r18, 0x01	; 1
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	d0 cf       	rjmp	.-96     	; 0xa36 <next_statement+0x46>
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 00 02 	sts	0x0200, r24
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	ca cf       	rjmp	.-108    	; 0xa36 <next_statement+0x46>

00000aa2 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	e3 97       	sbiw	r28, 0x33	; 51
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	4c 01       	movw	r8, r24
  int char_counter = 0;  
     ad8:	1a 82       	std	Y+2, r1	; 0x02
     ada:	19 82       	std	Y+1, r1	; 0x01
  double target[4], offset[4];  
  
  double p = 0, r = 0;
  int int_value;
  
  clear_vector(target);
     adc:	ce 01       	movw	r24, r28
     ade:	09 96       	adiw	r24, 0x09	; 9
     ae0:	9b ab       	std	Y+51, r25	; 0x33
     ae2:	8a ab       	std	Y+50, r24	; 0x32
     ae4:	80 e1       	ldi	r24, 0x10	; 16
     ae6:	aa a9       	ldd	r26, Y+50	; 0x32
     ae8:	bb a9       	ldd	r27, Y+51	; 0x33
     aea:	e8 2f       	mov	r30, r24
     aec:	1d 92       	st	X+, r1
     aee:	ea 95       	dec	r30
     af0:	e9 f7       	brne	.-6      	; 0xaec <gc_execute_line+0x4a>
  clear_vector(offset);
     af2:	e9 e1       	ldi	r30, 0x19	; 25
     af4:	6e 2e       	mov	r6, r30
     af6:	71 2c       	mov	r7, r1
     af8:	6c 0e       	add	r6, r28
     afa:	7d 1e       	adc	r7, r29
     afc:	d3 01       	movw	r26, r6
     afe:	1d 92       	st	X+, r1
     b00:	8a 95       	dec	r24
     b02:	e9 f7       	brne	.-6      	; 0xafe <gc_execute_line+0x5c>

  gc.status_code = GCSTATUS_OK;
     b04:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     b08:	f4 01       	movw	r30, r8
     b0a:	80 81       	ld	r24, Z
     b0c:	88 32       	cpi	r24, 0x28	; 40
     b0e:	09 f4       	brne	.+2      	; 0xb12 <gc_execute_line+0x70>
     b10:	a9 c0       	rjmp	.+338    	; 0xc64 <gc_execute_line+0x1c2>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     b12:	8f 32       	cpi	r24, 0x2F	; 47
     b14:	09 f4       	brne	.+2      	; 0xb18 <gc_execute_line+0x76>
     b16:	61 c0       	rjmp	.+194    	; 0xbda <gc_execute_line+0x138>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     b18:	84 32       	cpi	r24, 0x24	; 36
     b1a:	b1 f1       	breq	.+108    	; 0xb88 <gc_execute_line+0xe6>
     b1c:	1e a6       	std	Y+46, r1	; 0x2e
     b1e:	1d a6       	std	Y+45, r1	; 0x2d
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
     b20:	73 e0       	ldi	r23, 0x03	; 3
     b22:	47 2e       	mov	r4, r23
     b24:	51 2c       	mov	r5, r1
     b26:	4c 0e       	add	r4, r28
     b28:	5d 1e       	adc	r5, r29
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     b2a:	22 24       	eor	r2, r2
     b2c:	2a 94       	dec	r2
     b2e:	32 2c       	mov	r3, r2
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     b30:	ee 24       	eor	r14, r14
     b32:	e3 94       	inc	r14

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
  if (line[*char_counter] == 0) {
     b34:	29 81       	ldd	r18, Y+1	; 0x01
     b36:	3a 81       	ldd	r19, Y+2	; 0x02
     b38:	f4 01       	movw	r30, r8
     b3a:	e2 0f       	add	r30, r18
     b3c:	f3 1f       	adc	r31, r19
     b3e:	f0 80       	ld	r15, Z
     b40:	ff 20       	and	r15, r15
     b42:	09 f4       	brne	.+2      	; 0xb46 <gc_execute_line+0xa4>
     b44:	9d c0       	rjmp	.+314    	; 0xc80 <gc_execute_line+0x1de>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
     b46:	8f 2d       	mov	r24, r15
     b48:	81 54       	subi	r24, 0x41	; 65
     b4a:	8a 31       	cpi	r24, 0x1A	; 26
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <gc_execute_line+0xae>
     b4e:	4b c0       	rjmp	.+150    	; 0xbe6 <gc_execute_line+0x144>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	80 93 00 02 	sts	0x0200, r24
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     b56:	e3 96       	adiw	r28, 0x33	; 51
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	7f 90       	pop	r7
     b7c:	6f 90       	pop	r6
     b7e:	5f 90       	pop	r5
     b80:	4f 90       	pop	r4
     b82:	3f 90       	pop	r3
     b84:	2f 90       	pop	r2
     b86:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     b90:	84 01       	movw	r16, r8
     b92:	0f 5f       	subi	r16, 0xFF	; 255
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	d4 01       	movw	r26, r8
     b98:	11 96       	adiw	r26, 0x01	; 1
     b9a:	8c 91       	ld	r24, X
     b9c:	88 23       	and	r24, r24
     b9e:	09 f4       	brne	.+2      	; 0xba2 <gc_execute_line+0x100>
     ba0:	5f c0       	rjmp	.+190    	; 0xc60 <gc_execute_line+0x1be>
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
     ba2:	c8 01       	movw	r24, r16
     ba4:	be 01       	movw	r22, r28
     ba6:	6d 5f       	subi	r22, 0xFD	; 253
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	0e 94 12 28 	call	0x5024	; 0x5024 <strtod>
     bae:	6b 01       	movw	r12, r22
     bb0:	7c 01       	movw	r14, r24
  if(end == start) { 
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	08 17       	cp	r16, r24
     bb8:	19 07       	cpc	r17, r25
     bba:	09 f4       	brne	.+2      	; 0xbbe <gc_execute_line+0x11c>
     bbc:	3e c3       	rjmp	.+1660   	; 0x123a <gc_execute_line+0x798>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     bbe:	88 19       	sub	r24, r8
     bc0:	99 09       	sbc	r25, r9
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	9c 01       	movw	r18, r24
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     bc8:	f4 01       	movw	r30, r8
     bca:	e2 0f       	add	r30, r18
     bcc:	f3 1f       	adc	r31, r19
     bce:	80 81       	ld	r24, Z
     bd0:	8d 33       	cpi	r24, 0x3D	; 61
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <gc_execute_line+0x134>
     bd4:	e9 c2       	rjmp	.+1490   	; 0x11a8 <gc_execute_line+0x706>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	be cf       	rjmp	.-132    	; 0xb56 <gc_execute_line+0xb4>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9a 83       	std	Y+2, r25	; 0x02
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	9b cf       	rjmp	.-202    	; 0xb1c <gc_execute_line+0x7a>
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     be6:	c9 01       	movw	r24, r18
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
     bee:	84 01       	movw	r16, r8
     bf0:	08 0f       	add	r16, r24
     bf2:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     bf4:	c8 01       	movw	r24, r16
     bf6:	b2 01       	movw	r22, r4
     bf8:	0e 94 12 28 	call	0x5024	; 0x5024 <strtod>
  if(end == start) { 
     bfc:	2b 81       	ldd	r18, Y+3	; 0x03
     bfe:	3c 81       	ldd	r19, Y+4	; 0x04
     c00:	02 17       	cp	r16, r18
     c02:	13 07       	cpc	r17, r19
     c04:	89 f1       	breq	.+98     	; 0xc68 <gc_execute_line+0x1c6>
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
     c06:	6d 83       	std	Y+5, r22	; 0x05
     c08:	7e 83       	std	Y+6, r23	; 0x06
     c0a:	8f 83       	std	Y+7, r24	; 0x07
     c0c:	98 87       	std	Y+8, r25	; 0x08
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     c0e:	28 19       	sub	r18, r8
     c10:	39 09       	sbc	r19, r9
     c12:	3a 83       	std	Y+2, r19	; 0x02
     c14:	29 83       	std	Y+1, r18	; 0x01
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     c16:	0e 94 81 27 	call	0x4f02	; 0x4f02 <trunc>
     c1a:	5b 01       	movw	r10, r22
     c1c:	6c 01       	movw	r12, r24
     c1e:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
     c22:	87 2f       	mov	r24, r23

    switch(letter) {
     c24:	a7 e4       	ldi	r26, 0x47	; 71
     c26:	fa 16       	cp	r15, r26
     c28:	91 f0       	breq	.+36     	; 0xc4e <gc_execute_line+0x1ac>
     c2a:	af 15       	cp	r26, r15
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <gc_execute_line+0x18e>
     c2e:	0b c1       	rjmp	.+534    	; 0xe46 <gc_execute_line+0x3a4>
     c30:	ed e4       	ldi	r30, 0x4D	; 77
     c32:	fe 16       	cp	r15, r30
     c34:	09 f4       	brne	.+2      	; 0xc38 <gc_execute_line+0x196>
     c36:	43 c1       	rjmp	.+646    	; 0xebe <gc_execute_line+0x41c>
     c38:	f4 e5       	ldi	r31, 0x54	; 84
     c3a:	ff 16       	cp	r15, r31
     c3c:	09 f0       	breq	.+2      	; 0xc40 <gc_execute_line+0x19e>
     c3e:	06 c1       	rjmp	.+524    	; 0xe4c <gc_execute_line+0x3aa>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     c40:	c6 01       	movw	r24, r12
     c42:	b5 01       	movw	r22, r10
     c44:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__fixunssfsi>
     c48:	60 93 22 02 	sts	0x0222, r22
     c4c:	ff c0       	rjmp	.+510    	; 0xe4c <gc_execute_line+0x3aa>
			}

	       break;

      case 'G':
      switch(int_value) {
     c4e:	e6 2f       	mov	r30, r22
     c50:	f8 2f       	mov	r31, r24
     c52:	ef 35       	cpi	r30, 0x5F	; 95
     c54:	f1 05       	cpc	r31, r1
     c56:	60 f0       	brcs	.+24     	; 0xc70 <gc_execute_line+0x1ce>
	// vacuum
		case 19: vacuum(1);break;
		case 20: vacuum(0);break;


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	80 93 00 02 	sts	0x0200, r24
     c5e:	7b cf       	rjmp	.-266    	; 0xb56 <gc_execute_line+0xb4>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c60:	0e 94 ed 17 	call	0x2fda	; 0x2fda <settings_dump>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	77 cf       	rjmp	.-274    	; 0xb56 <gc_execute_line+0xb4>
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 00 02 	sts	0x0200, r24
     c6e:	73 cf       	rjmp	.-282    	; 0xb56 <gc_execute_line+0xb4>
			}

	       break;

      case 'G':
      switch(int_value) {
     c70:	ee 58       	subi	r30, 0x8E	; 142
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	05 90       	lpm	r0, Z+
     c7a:	f4 91       	lpm	r31, Z+
     c7c:	e0 2d       	mov	r30, r0
     c7e:	19 94       	eijmp
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     c80:	80 91 00 02 	lds	r24, 0x0200
     c84:	88 23       	and	r24, r24
     c86:	09 f0       	breq	.+2      	; 0xc8a <gc_execute_line+0x1e8>
     c88:	66 cf       	rjmp	.-308    	; 0xb56 <gc_execute_line+0xb4>

  char_counter = 0;
     c8a:	1a 82       	std	Y+2, r1	; 0x02
     c8c:	19 82       	std	Y+1, r1	; 0x01
  clear_vector(offset);
     c8e:	80 e1       	ldi	r24, 0x10	; 16
     c90:	d3 01       	movw	r26, r6
     c92:	1d 92       	st	X+, r1
     c94:	8a 95       	dec	r24
     c96:	e9 f7       	brne	.-6      	; 0xc92 <gc_execute_line+0x1f0>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     c98:	de 01       	movw	r26, r28
     c9a:	19 96       	adiw	r26, 0x09	; 9
     c9c:	e2 e1       	ldi	r30, 0x12	; 18
     c9e:	f2 e0       	ldi	r31, 0x02	; 2
     ca0:	80 e1       	ldi	r24, 0x10	; 16
     ca2:	01 90       	ld	r0, Z+
     ca4:	0d 92       	st	X+, r0
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <gc_execute_line+0x200>
     caa:	aa 24       	eor	r10, r10
     cac:	1f a6       	std	Y+47, r1	; 0x2f
     cae:	b0 e8       	ldi	r27, 0x80	; 128
     cb0:	b8 ab       	std	Y+48, r27	; 0x30
     cb2:	ef eb       	ldi	r30, 0xBF	; 191
     cb4:	e9 ab       	std	Y+49, r30	; 0x31
     cb6:	0f 2e       	mov	r0, r31
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	2f 2e       	mov	r2, r31
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	3f 2e       	mov	r3, r31
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	4f 2e       	mov	r4, r31
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	5f 2e       	mov	r5, r31
     cc8:	f0 2d       	mov	r31, r0
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
     cca:	3e 01       	movw	r6, r28
     ccc:	08 94       	sec
     cce:	61 1c       	adc	r6, r1
     cd0:	71 1c       	adc	r7, r1

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
  if (line[*char_counter] == 0) {
     cd2:	29 81       	ldd	r18, Y+1	; 0x01
     cd4:	3a 81       	ldd	r19, Y+2	; 0x02
     cd6:	f4 01       	movw	r30, r8
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	b0 80       	ld	r11, Z
     cde:	bb 20       	and	r11, r11
     ce0:	09 f4       	brne	.+2      	; 0xce4 <gc_execute_line+0x242>
     ce2:	48 c0       	rjmp	.+144    	; 0xd74 <gc_execute_line+0x2d2>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
     ce4:	8b 2d       	mov	r24, r11
     ce6:	81 54       	subi	r24, 0x41	; 65
     ce8:	8a 31       	cpi	r24, 0x1A	; 26
     cea:	08 f0       	brcs	.+2      	; 0xcee <gc_execute_line+0x24c>
     cec:	31 cf       	rjmp	.-414    	; 0xb50 <gc_execute_line+0xae>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     cee:	c9 01       	movw	r24, r18
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	89 83       	std	Y+1, r24	; 0x01

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
     cf6:	84 01       	movw	r16, r8
     cf8:	08 0f       	add	r16, r24
     cfa:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     cfc:	c8 01       	movw	r24, r16
     cfe:	be 01       	movw	r22, r28
     d00:	6d 5f       	subi	r22, 0xFD	; 253
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	0e 94 12 28 	call	0x5024	; 0x5024 <strtod>
     d08:	6b 01       	movw	r12, r22
     d0a:	7c 01       	movw	r14, r24
  if(end == start) { 
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	9c 81       	ldd	r25, Y+4	; 0x04
     d10:	08 17       	cp	r16, r24
     d12:	19 07       	cpc	r17, r25
     d14:	09 f4       	brne	.+2      	; 0xd18 <gc_execute_line+0x276>
     d16:	a8 cf       	rjmp	.-176    	; 0xc68 <gc_execute_line+0x1c6>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     d18:	88 19       	sub	r24, r8
     d1a:	99 09       	sbc	r25, r9
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
}

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     d20:	80 91 03 02 	lds	r24, 0x0203
     d24:	88 23       	and	r24, r24
     d26:	09 f0       	breq	.+2      	; 0xd2a <gc_execute_line+0x288>
     d28:	a1 c1       	rjmp	.+834    	; 0x106c <gc_execute_line+0x5ca>
     d2a:	a7 01       	movw	r20, r14
     d2c:	96 01       	movw	r18, r12
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
     d2e:	cd 82       	std	Y+5, r12	; 0x05
     d30:	de 82       	std	Y+6, r13	; 0x06
     d32:	ef 82       	std	Y+7, r14	; 0x07
     d34:	f8 86       	std	Y+8, r15	; 0x08

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     d36:	fb e4       	ldi	r31, 0x4B	; 75
     d38:	fb 15       	cp	r31, r11
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <gc_execute_line+0x29c>
     d3c:	8a c1       	rjmp	.+788    	; 0x1052 <gc_execute_line+0x5b0>
     d3e:	89 e4       	ldi	r24, 0x49	; 73
     d40:	b8 16       	cp	r11, r24
     d42:	08 f4       	brcc	.+2      	; 0xd46 <gc_execute_line+0x2a4>
     d44:	9e c1       	rjmp	.+828    	; 0x1082 <gc_execute_line+0x5e0>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     d46:	eb 2d       	mov	r30, r11
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	e9 54       	subi	r30, 0x49	; 73
     d4c:	f0 40       	sbci	r31, 0x00	; 0
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	e6 0d       	add	r30, r6
     d58:	f7 1d       	adc	r31, r7
     d5a:	20 8f       	std	Z+24, r18	; 0x18
     d5c:	31 8f       	std	Z+25, r19	; 0x19
     d5e:	42 8f       	std	Z+26, r20	; 0x1a
     d60:	53 8f       	std	Z+27, r21	; 0x1b

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
  if (line[*char_counter] == 0) {
     d62:	29 81       	ldd	r18, Y+1	; 0x01
     d64:	3a 81       	ldd	r19, Y+2	; 0x02
     d66:	f4 01       	movw	r30, r8
     d68:	e2 0f       	add	r30, r18
     d6a:	f3 1f       	adc	r31, r19
     d6c:	b0 80       	ld	r11, Z
     d6e:	bb 20       	and	r11, r11
     d70:	09 f0       	breq	.+2      	; 0xd74 <gc_execute_line+0x2d2>
     d72:	b8 cf       	rjmp	.-144    	; 0xce4 <gc_execute_line+0x242>
      break;      
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     d74:	80 91 00 02 	lds	r24, 0x0200
     d78:	88 23       	and	r24, r24
     d7a:	09 f0       	breq	.+2      	; 0xd7e <gc_execute_line+0x2dc>
     d7c:	ec ce       	rjmp	.-552    	; 0xb56 <gc_execute_line+0xb4>
    
  // Update spindle state
  if (gc.spindle_direction) {
     d7e:	80 91 06 02 	lds	r24, 0x0206
     d82:	90 91 07 02 	lds	r25, 0x0207
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	09 f4       	brne	.+2      	; 0xd8c <gc_execute_line+0x2ea>
     d8a:	06 c2       	rjmp	.+1036   	; 0x1198 <gc_execute_line+0x6f6>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
     d8c:	40 91 23 02 	lds	r20, 0x0223
     d90:	50 91 24 02 	lds	r21, 0x0224
     d94:	66 27       	eor	r22, r22
     d96:	57 fd       	sbrc	r21, 7
     d98:	60 95       	com	r22
     d9a:	76 2f       	mov	r23, r22
     d9c:	0e 94 06 1a 	call	0x340c	; 0x340c <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
     da0:	80 91 08 02 	lds	r24, 0x0208
     da4:	90 91 09 02 	lds	r25, 0x0209
     da8:	89 2b       	or	r24, r25
     daa:	09 f4       	brne	.+2      	; 0xdae <gc_execute_line+0x30c>
     dac:	f8 c1       	rjmp	.+1008   	; 0x119e <gc_execute_line+0x6fc>
  	coolant_flood(TRUE);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 4c 03 	call	0x698	; 0x698 <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
     db6:	8d a5       	ldd	r24, Y+45	; 0x2d
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	09 f4       	brne	.+2      	; 0xdbe <gc_execute_line+0x31c>
     dbc:	31 c2       	rjmp	.+1122   	; 0x1220 <gc_execute_line+0x77e>
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <gc_execute_line+0x322>
     dc2:	16 c2       	rjmp	.+1068   	; 0x11f0 <gc_execute_line+0x74e>
    case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     dc4:	80 91 01 02 	lds	r24, 0x0201
     dc8:	88 23       	and	r24, r24
     dca:	09 f0       	breq	.+2      	; 0xdce <gc_execute_line+0x32c>
     dcc:	3f c2       	rjmp	.+1150   	; 0x124c <gc_execute_line+0x7aa>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <gc_execute_line+0x32e>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <gc_execute_line+0x330>
     dd2:	69 85       	ldd	r22, Y+9	; 0x09
     dd4:	7a 85       	ldd	r23, Y+10	; 0x0a
     dd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     dd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dda:	2d 85       	ldd	r18, Y+13	; 0x0d
     ddc:	3e 85       	ldd	r19, Y+14	; 0x0e
     dde:	4f 85       	ldd	r20, Y+15	; 0x0f
     de0:	58 89       	ldd	r21, Y+16	; 0x10
     de2:	e9 88       	ldd	r14, Y+17	; 0x11
     de4:	fa 88       	ldd	r15, Y+18	; 0x12
     de6:	0b 89       	ldd	r16, Y+19	; 0x13
     de8:	1c 89       	ldd	r17, Y+20	; 0x14
     dea:	ad 88       	ldd	r10, Y+21	; 0x15
     dec:	be 88       	ldd	r11, Y+22	; 0x16
     dee:	cf 88       	ldd	r12, Y+23	; 0x17
     df0:	d8 8c       	ldd	r13, Y+24	; 0x18
     df2:	60 90 0e 02 	lds	r6, 0x020E
     df6:	70 90 0f 02 	lds	r7, 0x020F
     dfa:	80 90 10 02 	lds	r8, 0x0210
     dfe:	90 90 11 02 	lds	r9, 0x0211
     e02:	ad b7       	in	r26, 0x3d	; 61
     e04:	be b7       	in	r27, 0x3e	; 62
     e06:	11 96       	adiw	r26, 0x01	; 1
     e08:	6d 92       	st	X+, r6
     e0a:	7d 92       	st	X+, r7
     e0c:	8d 92       	st	X+, r8
     e0e:	9c 92       	st	X, r9
     e10:	14 97       	sbiw	r26, 0x04	; 4
     e12:	16 96       	adiw	r26, 0x06	; 6
     e14:	1c 92       	st	X, r1
     e16:	1e 92       	st	-X, r1
     e18:	15 97       	sbiw	r26, 0x05	; 5
     e1a:	0e 94 1a 12 	call	0x2434	; 0x2434 <plan_buffer_line>
     e1e:	ed b7       	in	r30, 0x3d	; 61
     e20:	fe b7       	in	r31, 0x3e	; 62
     e22:	36 96       	adiw	r30, 0x06	; 6
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	fe bf       	out	0x3e, r31	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
     e2e:	a2 e1       	ldi	r26, 0x12	; 18
     e30:	b2 e0       	ldi	r27, 0x02	; 2
     e32:	fe 01       	movw	r30, r28
     e34:	39 96       	adiw	r30, 0x09	; 9
     e36:	80 e1       	ldi	r24, 0x10	; 16
     e38:	01 90       	ld	r0, Z+
     e3a:	0d 92       	st	X+, r0
     e3c:	81 50       	subi	r24, 0x01	; 1
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <gc_execute_line+0x396>

  return(gc.status_code);
     e40:	80 91 00 02 	lds	r24, 0x0200
     e44:	88 ce       	rjmp	.-752    	; 0xb56 <gc_execute_line+0xb4>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     e46:	b4 e4       	ldi	r27, 0x44	; 68
     e48:	fb 16       	cp	r15, r27
     e4a:	31 f0       	breq	.+12     	; 0xe58 <gc_execute_line+0x3b6>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }
    if(gc.status_code) { break; }
     e4c:	80 91 00 02 	lds	r24, 0x0200
     e50:	88 23       	and	r24, r24
     e52:	09 f4       	brne	.+2      	; 0xe56 <gc_execute_line+0x3b4>
     e54:	6f ce       	rjmp	.-802    	; 0xb34 <gc_execute_line+0x92>
     e56:	7f ce       	rjmp	.-770    	; 0xb56 <gc_execute_line+0xb4>
	      	printPgmString(PSTR("PIND limits = "));
		  	printBinary( ch );
	      	printPgmString(PSTR("\r\n"));
#endif

	      	printPgmString(PSTR("head down = "));
     e58:	84 e8       	ldi	r24, 0x84	; 132
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
			printInteger( is_head_down() );
     e60:	0e 94 53 23 	call	0x46a6	; 0x46a6 <is_head_down>
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     e72:	81 e8       	ldi	r24, 0x81	; 129
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     e7a:	86 e7       	ldi	r24, 0x76	; 118
     e7c:	92 e0       	ldi	r25, 0x02	; 2
     e7e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
			printInteger( is_rotated() );
     e82:	0e 94 56 23 	call	0x46ac	; 0x46ac <is_rotated>
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     e94:	83 e7       	ldi	r24, 0x73	; 115
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>




			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     e9c:	4b 99       	sbic	0x09, 3	; 9
     e9e:	31 c0       	rjmp	.+98     	; 0xf02 <gc_execute_line+0x460>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     ea0:	4a 99       	sbic	0x09, 2	; 9
     ea2:	2a c0       	rjmp	.+84     	; 0xef8 <gc_execute_line+0x456>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     ea4:	48 99       	sbic	0x09, 0	; 9
     ea6:	23 c0       	rjmp	.+70     	; 0xeee <gc_execute_line+0x44c>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     ea8:	49 99       	sbic	0x09, 1	; 9
     eaa:	1c c0       	rjmp	.+56     	; 0xee4 <gc_execute_line+0x442>
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
     eac:	04 99       	sbic	0x00, 4	; 0
     eae:	15 c0       	rjmp	.+42     	; 0xeda <gc_execute_line+0x438>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     eb0:	90 9b       	sbis	0x12, 0	; 18
     eb2:	cc cf       	rjmp	.-104    	; 0xe4c <gc_execute_line+0x3aa>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     eb4:	89 e4       	ldi	r24, 0x49	; 73
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
     ebc:	c7 cf       	rjmp	.-114    	; 0xe4c <gc_execute_line+0x3aa>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     ebe:	e6 2f       	mov	r30, r22
     ec0:	f8 2f       	mov	r31, r24
     ec2:	ed 33       	cpi	r30, 0x3D	; 61
     ec4:	f1 05       	cpc	r31, r1
     ec6:	08 f0       	brcs	.+2      	; 0xeca <gc_execute_line+0x428>
     ec8:	c7 ce       	rjmp	.-626    	; 0xc58 <gc_execute_line+0x1b6>
     eca:	ef 52       	subi	r30, 0x2F	; 47
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	05 90       	lpm	r0, Z+
     ed4:	f4 91       	lpm	r31, Z+
     ed6:	e0 2d       	mov	r30, r0
     ed8:	19 94       	eijmp
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));
     eda:	82 e5       	ldi	r24, 0x52	; 82
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
     ee2:	e6 cf       	rjmp	.-52     	; 0xeb0 <gc_execute_line+0x40e>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));
     ee4:	8b e5       	ldi	r24, 0x5B	; 91
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
     eec:	df cf       	rjmp	.-66     	; 0xeac <gc_execute_line+0x40a>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
     eee:	81 e6       	ldi	r24, 0x61	; 97
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
     ef6:	d8 cf       	rjmp	.-80     	; 0xea8 <gc_execute_line+0x406>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));
     ef8:	87 e6       	ldi	r24, 0x67	; 103
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
     f00:	d1 cf       	rjmp	.-94     	; 0xea4 <gc_execute_line+0x402>




			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
     f02:	8d e6       	ldi	r24, 0x6D	; 109
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
     f0a:	ca cf       	rjmp	.-108    	; 0xea0 <gc_execute_line+0x3fe>
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;
	// vacuum
		case 19: vacuum(1);break;
		case 20: vacuum(0);break;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 7e 23 	call	0x46fc	; 0x46fc <vacuum>
     f14:	9b cf       	rjmp	.-202    	; 0xe4c <gc_execute_line+0x3aa>
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;
	// vacuum
		case 19: vacuum(1);break;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 7e 23 	call	0x46fc	; 0x46fc <vacuum>
     f1e:	96 cf       	rjmp	.-212    	; 0xe4c <gc_execute_line+0x3aa>
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;
     f20:	86 e0       	ldi	r24, 0x06	; 6
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 df 23 	call	0x47be	; 0x47be <atc_change>
     f28:	91 cf       	rjmp	.-222    	; 0xe4c <gc_execute_line+0x3aa>
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
     f2a:	85 e0       	ldi	r24, 0x05	; 5
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 df 23 	call	0x47be	; 0x47be <atc_change>
     f32:	8c cf       	rjmp	.-232    	; 0xe4c <gc_execute_line+0x3aa>
	// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
     f34:	84 e0       	ldi	r24, 0x04	; 4
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 df 23 	call	0x47be	; 0x47be <atc_change>
     f3c:	87 cf       	rjmp	.-242    	; 0xe4c <gc_execute_line+0x3aa>
        case 11: head_down(0);break;
	// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 df 23 	call	0x47be	; 0x47be <atc_change>
     f46:	82 cf       	rjmp	.-252    	; 0xe4c <gc_execute_line+0x3aa>
        case 10: head_down(1);break;
        case 11: head_down(0);break;
	// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 df 23 	call	0x47be	; 0x47be <atc_change>
     f50:	7d cf       	rjmp	.-262    	; 0xe4c <gc_execute_line+0x3aa>
	// head control
        case 10: head_down(1);break;
        case 11: head_down(0);break;
	// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 df 23 	call	0x47be	; 0x47be <atc_change>
     f5a:	78 cf       	rjmp	.-272    	; 0xe4c <gc_execute_line+0x3aa>
        case 9: gc.coolant_flood = 0; break;
	// head control
        case 10: head_down(1);break;
        case 11: head_down(0);break;
	// atc
		case 12: atc_change(0);break;
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 df 23 	call	0x47be	; 0x47be <atc_change>
     f64:	73 cf       	rjmp	.-282    	; 0xe4c <gc_execute_line+0x3aa>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
	// head control
        case 10: head_down(1);break;
        case 11: head_down(0);break;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 59 23 	call	0x46b2	; 0x46b2 <head_down>
     f6e:	6e cf       	rjmp	.-292    	; 0xe4c <gc_execute_line+0x3aa>
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
	// head control
        case 10: head_down(1);break;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 59 23 	call	0x46b2	; 0x46b2 <head_down>
     f78:	69 cf       	rjmp	.-302    	; 0xe4c <gc_execute_line+0x3aa>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
     f7a:	10 92 09 02 	sts	0x0209, r1
     f7e:	10 92 08 02 	sts	0x0208, r1
     f82:	64 cf       	rjmp	.-312    	; 0xe4c <gc_execute_line+0x3aa>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	90 93 09 02 	sts	0x0209, r25
     f8c:	80 93 08 02 	sts	0x0208, r24
     f90:	5d cf       	rjmp	.-326    	; 0xe4c <gc_execute_line+0x3aa>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
     f92:	10 92 07 02 	sts	0x0207, r1
     f96:	10 92 06 02 	sts	0x0206, r1
     f9a:	58 cf       	rjmp	.-336    	; 0xe4c <gc_execute_line+0x3aa>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     f9c:	30 92 07 02 	sts	0x0207, r3
     fa0:	20 92 06 02 	sts	0x0206, r2
     fa4:	53 cf       	rjmp	.-346    	; 0xe4c <gc_execute_line+0x3aa>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	90 93 07 02 	sts	0x0207, r25
     fae:	80 93 06 02 	sts	0x0206, r24
     fb2:	4c cf       	rjmp	.-360    	; 0xe4c <gc_execute_line+0x3aa>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	90 93 05 02 	sts	0x0205, r25
     fba:	48 cf       	rjmp	.-368    	; 0xe4c <gc_execute_line+0x3aa>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     fbc:	e0 92 05 02 	sts	0x0205, r14
     fc0:	45 cf       	rjmp	.-374    	; 0xe4c <gc_execute_line+0x3aa>
			}

	       break;

      case 'G':
      switch(int_value) {
     fc2:	e1 e0       	ldi	r30, 0x01	; 1
     fc4:	ed a7       	std	Y+45, r30	; 0x2d
     fc6:	42 cf       	rjmp	.-380    	; 0xe4c <gc_execute_line+0x3aa>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     fc8:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     fcc:	e0 92 26 02 	sts	0x0226, r14
  gc.plane_axis_2 = axis_2;
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	90 93 27 02 	sts	0x0227, r25
     fd6:	3a cf       	rjmp	.-396    	; 0xe4c <gc_execute_line+0x3aa>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     fd8:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     fdc:	a2 e0       	ldi	r26, 0x02	; 2
     fde:	a0 93 26 02 	sts	0x0226, r26
  gc.plane_axis_2 = axis_2;
     fe2:	e0 92 27 02 	sts	0x0227, r14
     fe6:	32 cf       	rjmp	.-412    	; 0xe4c <gc_execute_line+0x3aa>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     fe8:	e0 92 25 02 	sts	0x0225, r14
  gc.plane_axis_1 = axis_1;
     fec:	b2 e0       	ldi	r27, 0x02	; 2
     fee:	b0 93 26 02 	sts	0x0226, r27
  gc.plane_axis_2 = axis_2;
     ff2:	10 92 27 02 	sts	0x0227, r1
     ff6:	2a cf       	rjmp	.-428    	; 0xe4c <gc_execute_line+0x3aa>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     ff8:	e0 92 03 02 	sts	0x0203, r14
     ffc:	27 cf       	rjmp	.-434    	; 0xe4c <gc_execute_line+0x3aa>
        case 21: gc.inches_mode = FALSE; break;
     ffe:	10 92 03 02 	sts	0x0203, r1
    1002:	24 cf       	rjmp	.-440    	; 0xe4c <gc_execute_line+0x3aa>
			}

	       break;

      case 'G':
      switch(int_value) {
    1004:	b2 e0       	ldi	r27, 0x02	; 2
    1006:	bd a7       	std	Y+45, r27	; 0x2d
    1008:	21 cf       	rjmp	.-446    	; 0xe4c <gc_execute_line+0x3aa>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
    100a:	e1 e0       	ldi	r30, 0x01	; 1
    100c:	ee a7       	std	Y+46, r30	; 0x2e
    100e:	1e cf       	rjmp	.-452    	; 0xe4c <gc_execute_line+0x3aa>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
    1010:	10 92 01 02 	sts	0x0201, r1
    1014:	1b cf       	rjmp	.-458    	; 0xe4c <gc_execute_line+0x3aa>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
    1016:	e0 92 01 02 	sts	0x0201, r14
    101a:	18 cf       	rjmp	.-464    	; 0xe4c <gc_execute_line+0x3aa>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
    101c:	f2 e0       	ldi	r31, 0x02	; 2
    101e:	f0 93 01 02 	sts	0x0201, r31
    1022:	14 cf       	rjmp	.-472    	; 0xe4c <gc_execute_line+0x3aa>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
    1024:	83 e0       	ldi	r24, 0x03	; 3
    1026:	80 93 01 02 	sts	0x0201, r24
    102a:	10 cf       	rjmp	.-480    	; 0xe4c <gc_execute_line+0x3aa>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
    102c:	e0 92 02 02 	sts	0x0202, r14
    1030:	0d cf       	rjmp	.-486    	; 0xe4c <gc_execute_line+0x3aa>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
    1032:	10 92 02 02 	sts	0x0202, r1
    1036:	0a cf       	rjmp	.-492    	; 0xe4c <gc_execute_line+0x3aa>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
    1038:	f4 e0       	ldi	r31, 0x04	; 4
    103a:	f0 93 01 02 	sts	0x0201, r31
    103e:	06 cf       	rjmp	.-500    	; 0xe4c <gc_execute_line+0x3aa>
        case 90: gc.absolute_mode = TRUE; break;
    1040:	e0 92 04 02 	sts	0x0204, r14
    1044:	03 cf       	rjmp	.-506    	; 0xe4c <gc_execute_line+0x3aa>
        case 91: gc.absolute_mode = FALSE; break;
    1046:	10 92 04 02 	sts	0x0204, r1
    104a:	00 cf       	rjmp	.-512    	; 0xe4c <gc_execute_line+0x3aa>
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	8d a7       	std	Y+45, r24	; 0x2d
    1050:	fd ce       	rjmp	.-518    	; 0xe4c <gc_execute_line+0x3aa>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1052:	b3 e5       	ldi	r27, 0x53	; 83
    1054:	bb 16       	cp	r11, r27
    1056:	09 f4       	brne	.+2      	; 0x105a <gc_execute_line+0x5b8>
    1058:	4a c0       	rjmp	.+148    	; 0x10ee <gc_execute_line+0x64c>
    105a:	bb 15       	cp	r27, r11
    105c:	18 f1       	brcs	.+70     	; 0x10a4 <gc_execute_line+0x602>
    105e:	e0 e5       	ldi	r30, 0x50	; 80
    1060:	be 16       	cp	r11, r30
    1062:	09 f0       	breq	.+2      	; 0x1066 <gc_execute_line+0x5c4>
    1064:	36 ce       	rjmp	.-916    	; 0xcd2 <gc_execute_line+0x230>
    1066:	16 01       	movw	r2, r12
    1068:	27 01       	movw	r4, r14
    106a:	33 ce       	rjmp	.-922    	; 0xcd2 <gc_execute_line+0x230>
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
}

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    106c:	c7 01       	movw	r24, r14
    106e:	b6 01       	movw	r22, r12
    1070:	23 e3       	ldi	r18, 0x33	; 51
    1072:	33 e3       	ldi	r19, 0x33	; 51
    1074:	4b ec       	ldi	r20, 0xCB	; 203
    1076:	51 e4       	ldi	r21, 0x41	; 65
    1078:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    107c:	9b 01       	movw	r18, r22
    107e:	ac 01       	movw	r20, r24
    1080:	56 ce       	rjmp	.-852    	; 0xd2e <gc_execute_line+0x28c>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1082:	93 e4       	ldi	r25, 0x43	; 67
    1084:	b9 16       	cp	r11, r25
    1086:	e1 f1       	breq	.+120    	; 0x1100 <gc_execute_line+0x65e>
    1088:	a6 e4       	ldi	r26, 0x46	; 70
    108a:	ba 16       	cp	r11, r26
    108c:	09 f0       	breq	.+2      	; 0x1090 <gc_execute_line+0x5ee>
    108e:	21 ce       	rjmp	.-958    	; 0xcd2 <gc_execute_line+0x230>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    1090:	80 91 02 02 	lds	r24, 0x0202
    1094:	88 23       	and	r24, r24
    1096:	09 f4       	brne	.+2      	; 0x109a <gc_execute_line+0x5f8>
    1098:	59 c0       	rjmp	.+178    	; 0x114c <gc_execute_line+0x6aa>
    109a:	a2 2e       	mov	r10, r18
    109c:	3f a7       	std	Y+47, r19	; 0x2f
    109e:	48 ab       	std	Y+48, r20	; 0x30
    10a0:	59 ab       	std	Y+49, r21	; 0x31
    10a2:	17 ce       	rjmp	.-978    	; 0xcd2 <gc_execute_line+0x230>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    10a4:	8b 2d       	mov	r24, r11
    10a6:	88 55       	subi	r24, 0x58	; 88
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <gc_execute_line+0x60c>
    10ac:	12 ce       	rjmp	.-988    	; 0xcd2 <gc_execute_line+0x230>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    10ae:	80 91 04 02 	lds	r24, 0x0204
    10b2:	88 23       	and	r24, r24
    10b4:	b9 f5       	brne	.+110    	; 0x1124 <gc_execute_line+0x682>
    10b6:	fe a5       	ldd	r31, Y+46	; 0x2e
    10b8:	ff 23       	and	r31, r31
    10ba:	a1 f5       	brne	.+104    	; 0x1124 <gc_execute_line+0x682>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    10bc:	0b 2d       	mov	r16, r11
    10be:	10 e0       	ldi	r17, 0x00	; 0
    10c0:	08 55       	subi	r16, 0x58	; 88
    10c2:	10 40       	sbci	r17, 0x00	; 0
    10c4:	00 0f       	add	r16, r16
    10c6:	11 1f       	adc	r17, r17
    10c8:	00 0f       	add	r16, r16
    10ca:	11 1f       	adc	r17, r17
    10cc:	06 0d       	add	r16, r6
    10ce:	17 1d       	adc	r17, r7
    10d0:	d8 01       	movw	r26, r16
    10d2:	18 96       	adiw	r26, 0x08	; 8
    10d4:	6d 91       	ld	r22, X+
    10d6:	7d 91       	ld	r23, X+
    10d8:	8d 91       	ld	r24, X+
    10da:	9c 91       	ld	r25, X
    10dc:	1b 97       	sbiw	r26, 0x0b	; 11
    10de:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    10e2:	f8 01       	movw	r30, r16
    10e4:	60 87       	std	Z+8, r22	; 0x08
    10e6:	71 87       	std	Z+9, r23	; 0x09
    10e8:	82 87       	std	Z+10, r24	; 0x0a
    10ea:	93 87       	std	Z+11, r25	; 0x0b
    10ec:	f2 cd       	rjmp	.-1052   	; 0xcd2 <gc_execute_line+0x230>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    10ee:	c7 01       	movw	r24, r14
    10f0:	b6 01       	movw	r22, r12
    10f2:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    10f6:	70 93 24 02 	sts	0x0224, r23
    10fa:	60 93 23 02 	sts	0x0223, r22
    10fe:	e9 cd       	rjmp	.-1070   	; 0xcd2 <gc_execute_line+0x230>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    1100:	80 91 04 02 	lds	r24, 0x0204
    1104:	88 23       	and	r24, r24
    1106:	e9 f4       	brne	.+58     	; 0x1142 <gc_execute_line+0x6a0>
    1108:	fe a5       	ldd	r31, Y+46	; 0x2e
    110a:	ff 23       	and	r31, r31
    110c:	d1 f4       	brne	.+52     	; 0x1142 <gc_execute_line+0x6a0>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
    110e:	6d 89       	ldd	r22, Y+21	; 0x15
    1110:	7e 89       	ldd	r23, Y+22	; 0x16
    1112:	8f 89       	ldd	r24, Y+23	; 0x17
    1114:	98 8d       	ldd	r25, Y+24	; 0x18
    1116:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    111a:	6d 8b       	std	Y+21, r22	; 0x15
    111c:	7e 8b       	std	Y+22, r23	; 0x16
    111e:	8f 8b       	std	Y+23, r24	; 0x17
    1120:	98 8f       	std	Y+24, r25	; 0x18
    1122:	d7 cd       	rjmp	.-1106   	; 0xcd2 <gc_execute_line+0x230>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    1124:	eb 2d       	mov	r30, r11
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	e8 55       	subi	r30, 0x58	; 88
    112a:	f0 40       	sbci	r31, 0x00	; 0
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	e6 0d       	add	r30, r6
    1136:	f7 1d       	adc	r31, r7
    1138:	20 87       	std	Z+8, r18	; 0x08
    113a:	31 87       	std	Z+9, r19	; 0x09
    113c:	42 87       	std	Z+10, r20	; 0x0a
    113e:	53 87       	std	Z+11, r21	; 0x0b
    1140:	c8 cd       	rjmp	.-1136   	; 0xcd2 <gc_execute_line+0x230>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
    1142:	2d 8b       	std	Y+21, r18	; 0x15
    1144:	3e 8b       	std	Y+22, r19	; 0x16
    1146:	4f 8b       	std	Y+23, r20	; 0x17
    1148:	58 8f       	std	Y+24, r21	; 0x18
    114a:	c3 cd       	rjmp	.-1146   	; 0xcd2 <gc_execute_line+0x230>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    114c:	80 91 01 02 	lds	r24, 0x0201
    1150:	88 23       	and	r24, r24
    1152:	89 f4       	brne	.+34     	; 0x1176 <gc_execute_line+0x6d4>
          gc.seek_rate = unit_converted_value/60;
    1154:	ca 01       	movw	r24, r20
    1156:	b9 01       	movw	r22, r18
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e7       	ldi	r20, 0x70	; 112
    115e:	52 e4       	ldi	r21, 0x42	; 66
    1160:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1164:	60 93 0e 02 	sts	0x020E, r22
    1168:	70 93 0f 02 	sts	0x020F, r23
    116c:	80 93 10 02 	sts	0x0210, r24
    1170:	90 93 11 02 	sts	0x0211, r25
    1174:	ae cd       	rjmp	.-1188   	; 0xcd2 <gc_execute_line+0x230>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
    1176:	ca 01       	movw	r24, r20
    1178:	b9 01       	movw	r22, r18
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e7       	ldi	r20, 0x70	; 112
    1180:	52 e4       	ldi	r21, 0x42	; 66
    1182:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1186:	60 93 0a 02 	sts	0x020A, r22
    118a:	70 93 0b 02 	sts	0x020B, r23
    118e:	80 93 0c 02 	sts	0x020C, r24
    1192:	90 93 0d 02 	sts	0x020D, r25
    1196:	9d cd       	rjmp	.-1222   	; 0xcd2 <gc_execute_line+0x230>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    1198:	0e 94 16 1a 	call	0x342c	; 0x342c <spindle_stop>
    119c:	01 ce       	rjmp	.-1022   	; 0xda0 <gc_execute_line+0x2fe>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 4c 03 	call	0x698	; 0x698 <coolant_flood>
    11a6:	07 ce       	rjmp	.-1010   	; 0xdb6 <gc_execute_line+0x314>
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	3a 83       	std	Y+2, r19	; 0x02
    11ae:	29 83       	std	Y+1, r18	; 0x01
    read_double(line, &char_counter, &value);
    11b0:	c4 01       	movw	r24, r8
    11b2:	be 01       	movw	r22, r28
    11b4:	6f 5f       	subi	r22, 0xFF	; 255
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	ae 01       	movw	r20, r28
    11ba:	4b 5f       	subi	r20, 0xFB	; 251
    11bc:	5f 4f       	sbci	r21, 0xFF	; 255
    11be:	0e 94 33 04 	call	0x866	; 0x866 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    11c2:	e9 81       	ldd	r30, Y+1	; 0x01
    11c4:	fa 81       	ldd	r31, Y+2	; 0x02
    11c6:	e8 0d       	add	r30, r8
    11c8:	f9 1d       	adc	r31, r9
    11ca:	80 81       	ld	r24, Z
    11cc:	88 23       	and	r24, r24
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <gc_execute_line+0x730>
    11d0:	02 cd       	rjmp	.-1532   	; 0xbd6 <gc_execute_line+0x134>
    settings_store_setting(p, value);
    11d2:	c7 01       	movw	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	4d 81       	ldd	r20, Y+5	; 0x05
    11e0:	5e 81       	ldd	r21, Y+6	; 0x06
    11e2:	6f 81       	ldd	r22, Y+7	; 0x07
    11e4:	78 85       	ldd	r23, Y+8	; 0x08
    11e6:	0e 94 c1 18 	call	0x3182	; 0x3182 <settings_store_setting>
    return(gc.status_code);
    11ea:	80 91 00 02 	lds	r24, 0x0200
    11ee:	b3 cc       	rjmp	.-1690   	; 0xb56 <gc_execute_line+0xb4>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	49 f1       	breq	.+82     	; 0x1246 <gc_execute_line+0x7a4>
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	09 f0       	breq	.+2      	; 0x11fa <gc_execute_line+0x758>
    11f8:	1a ce       	rjmp	.-972    	; 0xe2e <gc_execute_line+0x38c>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    11fa:	69 85       	ldd	r22, Y+9	; 0x09
    11fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    11fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1200:	9c 85       	ldd	r25, Y+12	; 0x0c
    1202:	2d 85       	ldd	r18, Y+13	; 0x0d
    1204:	3e 85       	ldd	r19, Y+14	; 0x0e
    1206:	4f 85       	ldd	r20, Y+15	; 0x0f
    1208:	58 89       	ldd	r21, Y+16	; 0x10
    120a:	e9 88       	ldd	r14, Y+17	; 0x11
    120c:	fa 88       	ldd	r15, Y+18	; 0x12
    120e:	0b 89       	ldd	r16, Y+19	; 0x13
    1210:	1c 89       	ldd	r17, Y+20	; 0x14
    1212:	ad 88       	ldd	r10, Y+21	; 0x15
    1214:	be 88       	ldd	r11, Y+22	; 0x16
    1216:	cf 88       	ldd	r12, Y+23	; 0x17
    1218:	d8 8c       	ldd	r13, Y+24	; 0x18
    121a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <plan_set_current>
    121e:	07 ce       	rjmp	.-1010   	; 0xe2e <gc_execute_line+0x38c>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    1220:	c2 01       	movw	r24, r4
    1222:	b1 01       	movw	r22, r2
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	4a e7       	ldi	r20, 0x7A	; 122
    122a:	54 e4       	ldi	r21, 0x44	; 68
    122c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1230:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__fixunssfsi>
    1234:	0e 94 a1 09 	call	0x1342	; 0x1342 <mc_dwell>
    1238:	fa cd       	rjmp	.-1036   	; 0xe2e <gc_execute_line+0x38c>
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 00 02 	sts	0x0200, r24
    1240:	29 81       	ldd	r18, Y+1	; 0x01
    1242:	3a 81       	ldd	r19, Y+2	; 0x02
    1244:	c1 cc       	rjmp	.-1662   	; 0xbc8 <gc_execute_line+0x126>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    1246:	0e 94 9e 09 	call	0x133c	; 0x133c <mc_go_home>
    124a:	f1 cd       	rjmp	.-1054   	; 0xe2e <gc_execute_line+0x38c>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	09 f0       	breq	.+2      	; 0x1252 <gc_execute_line+0x7b0>
    1250:	ee cd       	rjmp	.-1060   	; 0xe2e <gc_execute_line+0x38c>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	ab 85       	ldd	r26, Y+11	; 0x0b
    1258:	bc 85       	ldd	r27, Y+12	; 0x0c
    125a:	89 a7       	std	Y+41, r24	; 0x29
    125c:	9a a7       	std	Y+42, r25	; 0x2a
    125e:	ab a7       	std	Y+43, r26	; 0x2b
    1260:	bc a7       	std	Y+44, r27	; 0x2c
    1262:	2d 84       	ldd	r2, Y+13	; 0x0d
    1264:	3e 84       	ldd	r3, Y+14	; 0x0e
    1266:	4f 84       	ldd	r4, Y+15	; 0x0f
    1268:	58 88       	ldd	r5, Y+16	; 0x10
    126a:	e9 88       	ldd	r14, Y+17	; 0x11
    126c:	fa 88       	ldd	r15, Y+18	; 0x12
    126e:	0b 89       	ldd	r16, Y+19	; 0x13
    1270:	1c 89       	ldd	r17, Y+20	; 0x14
    1272:	6d 88       	ldd	r6, Y+21	; 0x15
    1274:	7e 88       	ldd	r7, Y+22	; 0x16
    1276:	8f 88       	ldd	r8, Y+23	; 0x17
    1278:	98 8c       	ldd	r9, Y+24	; 0x18
    127a:	60 91 02 02 	lds	r22, 0x0202
    127e:	66 23       	and	r22, r22
    1280:	59 f4       	brne	.+22     	; 0x1298 <gc_execute_line+0x7f6>
    1282:	a0 90 0a 02 	lds	r10, 0x020A
    1286:	90 91 0b 02 	lds	r25, 0x020B
    128a:	9f a7       	std	Y+47, r25	; 0x2f
    128c:	a0 91 0c 02 	lds	r26, 0x020C
    1290:	a8 ab       	std	Y+48, r26	; 0x30
    1292:	b0 91 0d 02 	lds	r27, 0x020D
    1296:	b9 ab       	std	Y+49, r27	; 0x31
    1298:	00 d0       	rcall	.+0      	; 0x129a <gc_execute_line+0x7f8>
    129a:	00 d0       	rcall	.+0      	; 0x129c <gc_execute_line+0x7fa>
    129c:	cd b6       	in	r12, 0x3d	; 61
    129e:	de b6       	in	r13, 0x3e	; 62
    12a0:	08 94       	sec
    12a2:	c1 1c       	adc	r12, r1
    12a4:	d1 1c       	adc	r13, r1
    12a6:	2a 2d       	mov	r18, r10
    12a8:	3f a5       	ldd	r19, Y+47	; 0x2f
    12aa:	48 a9       	ldd	r20, Y+48	; 0x30
    12ac:	59 a9       	ldd	r21, Y+49	; 0x31
    12ae:	c9 01       	movw	r24, r18
    12b0:	da 01       	movw	r26, r20
    12b2:	ed b7       	in	r30, 0x3d	; 61
    12b4:	fe b7       	in	r31, 0x3e	; 62
    12b6:	81 83       	std	Z+1, r24	; 0x01
    12b8:	92 83       	std	Z+2, r25	; 0x02
    12ba:	a3 83       	std	Z+3, r26	; 0x03
    12bc:	b4 83       	std	Z+4, r27	; 0x04
    12be:	d6 01       	movw	r26, r12
    12c0:	14 96       	adiw	r26, 0x04	; 4
    12c2:	6c 93       	st	X, r22
    12c4:	14 97       	sbiw	r26, 0x04	; 4
    12c6:	15 96       	adiw	r26, 0x05	; 5
    12c8:	1c 92       	st	X, r1
    12ca:	69 a5       	ldd	r22, Y+41	; 0x29
    12cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    12ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    12d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12d2:	a2 01       	movw	r20, r4
    12d4:	91 01       	movw	r18, r2
    12d6:	64 01       	movw	r12, r8
    12d8:	53 01       	movw	r10, r6
    12da:	0e 94 1a 12 	call	0x2434	; 0x2434 <plan_buffer_line>
    12de:	ed b7       	in	r30, 0x3d	; 61
    12e0:	fe b7       	in	r31, 0x3e	; 62
    12e2:	36 96       	adiw	r30, 0x06	; 6
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	fe bf       	out	0x3e, r31	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	ed bf       	out	0x3d, r30	; 61
    12ee:	9f cd       	rjmp	.-1218   	; 0xe2e <gc_execute_line+0x38c>

000012f0 <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  sp_init();        
    12f0:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <sp_init>
  settings_init();  
    12f4:	0e 94 4a 19 	call	0x3294	; 0x3294 <settings_init>
  plan_init();      
    12f8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <plan_init>
  st_init();        
    12fc:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <st_init>
  limits_init();
    1300:	0e 94 57 1b 	call	0x36ae	; 0x36ae <limits_init>
  spindle_init();   
    1304:	0e 94 ff 19 	call	0x33fe	; 0x33fe <spindle_init>
  coolant_init();
    1308:	0e 94 4a 03 	call	0x694	; 0x694 <coolant_init>
  atc_init();
    130c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <atc_init>
  head_init();
    1310:	0e 94 49 23 	call	0x4692	; 0x4692 <head_init>
  vacuum_init();
    1314:	0e 94 73 23 	call	0x46e6	; 0x46e6 <vacuum_init>
  panel_init();
    1318:	0e 94 98 23 	call	0x4730	; 0x4730 <panel_init>
  gc_init();
    131c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("[NSL] pickoBear ok\n\r"));
    1320:	81 e9       	ldi	r24, 0x91	; 145
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>

  for(;;){
    sleep_mode(); // Wait for it ...
    1328:	83 b7       	in	r24, 0x33	; 51
    132a:	81 60       	ori	r24, 0x01	; 1
    132c:	83 bf       	out	0x33, r24	; 51
    132e:	88 95       	sleep
    1330:	83 b7       	in	r24, 0x33	; 51
    1332:	8e 7f       	andi	r24, 0xFE	; 254
    1334:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
    1336:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <sp_process>
    133a:	f6 cf       	rjmp	.-20     	; 0x1328 <main+0x38>

0000133c <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    133c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <st_go_home>
}
    1340:	08 95       	ret

00001342 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1342:	af 92       	push	r10
    1344:	bf 92       	push	r11
    1346:	cf 92       	push	r12
    1348:	df 92       	push	r13
    134a:	ef 92       	push	r14
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	7b 01       	movw	r14, r22
    1354:	8c 01       	movw	r16, r24
  st_synchronize();
    1356:	0e 94 80 1b 	call	0x3700	; 0x3700 <st_synchronize>
  _delay_ms(milliseconds);
    135a:	c8 01       	movw	r24, r16
    135c:	b7 01       	movw	r22, r14
    135e:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__floatunsisf>
    1362:	5b 01       	movw	r10, r22
    1364:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4a e7       	ldi	r20, 0x7A	; 122
    136c:	55 e4       	ldi	r21, 0x45	; 69
    136e:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1372:	7b 01       	movw	r14, r22
    1374:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    1382:	88 23       	and	r24, r24
    1384:	7c f1       	brlt	.+94     	; 0x13e4 <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    1386:	c8 01       	movw	r24, r16
    1388:	b7 01       	movw	r22, r14
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	57 e4       	ldi	r21, 0x47	; 71
    1392:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
    1396:	18 16       	cp	r1, r24
    1398:	ac f4       	brge	.+42     	; 0x13c4 <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139a:	c6 01       	movw	r24, r12
    139c:	b5 01       	movw	r22, r10
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e2       	ldi	r20, 0x20	; 32
    13a4:	51 e4       	ldi	r21, 0x41	; 65
    13a6:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    13aa:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__fixunssfsi>
    13ae:	cb 01       	movw	r24, r22
		while(__ticks)
    13b0:	67 2b       	or	r22, r23
    13b2:	79 f0       	breq	.+30     	; 0x13d2 <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b4:	20 e9       	ldi	r18, 0x90	; 144
    13b6:	31 e0       	ldi	r19, 0x01	; 1
    13b8:	f9 01       	movw	r30, r18
    13ba:	31 97       	sbiw	r30, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	d9 f7       	brne	.-10     	; 0x13b8 <mc_dwell+0x76>
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c4:	c8 01       	movw	r24, r16
    13c6:	b7 01       	movw	r22, r14
    13c8:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__fixunssfsi>
    13cc:	cb 01       	movw	r24, r22
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <mc_dwell+0x8c>
}
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	f1 cf       	rjmp	.-30     	; 0x13cc <mc_dwell+0x8a>

000013ea <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    13ea:	fc 01       	movw	r30, r24
    13ec:	60 91 2a 05 	lds	r22, 0x052A
    13f0:	70 91 2b 05 	lds	r23, 0x052B
    13f4:	80 91 2c 05 	lds	r24, 0x052C
    13f8:	90 91 2d 05 	lds	r25, 0x052D
    13fc:	21 a5       	ldd	r18, Z+41	; 0x29
    13fe:	32 a5       	ldd	r19, Z+42	; 0x2a
    1400:	43 a5       	ldd	r20, Z+43	; 0x2b
    1402:	54 a5       	ldd	r21, Z+44	; 0x2c
    1404:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    1408:	08 95       	ret

0000140a <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    140a:	80 91 a9 03 	lds	r24, 0x03A9
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	08 95       	ret

00001412 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1412:	20 91 95 03 	lds	r18, 0x0395
    1416:	30 91 96 03 	lds	r19, 0x0396
    141a:	80 91 97 03 	lds	r24, 0x0397
    141e:	90 91 98 03 	lds	r25, 0x0398
    1422:	28 17       	cp	r18, r24
    1424:	39 07       	cpc	r19, r25
    1426:	69 f0       	breq	.+26     	; 0x1442 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1428:	80 91 97 03 	lds	r24, 0x0397
    142c:	90 91 98 03 	lds	r25, 0x0398
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	65 e0       	ldi	r22, 0x05	; 5
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    143a:	90 93 98 03 	sts	0x0398, r25
    143e:	80 93 97 03 	sts	0x0397, r24
    1442:	08 95       	ret

00001444 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1444:	20 91 95 03 	lds	r18, 0x0395
    1448:	30 91 96 03 	lds	r19, 0x0396
    144c:	80 91 97 03 	lds	r24, 0x0397
    1450:	90 91 98 03 	lds	r25, 0x0398
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	d1 f0       	breq	.+52     	; 0x148e <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    145a:	20 91 97 03 	lds	r18, 0x0397
    145e:	30 91 98 03 	lds	r19, 0x0398
    1462:	c9 01       	movw	r24, r18
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	ac 01       	movw	r20, r24
    1472:	44 0f       	add	r20, r20
    1474:	55 1f       	adc	r21, r21
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	44 0f       	add	r20, r20
    147c:	55 1f       	adc	r21, r21
    147e:	48 0f       	add	r20, r24
    1480:	59 1f       	adc	r21, r25
    1482:	42 0f       	add	r20, r18
    1484:	53 1f       	adc	r21, r19
    1486:	48 5d       	subi	r20, 0xD8	; 216
    1488:	5d 4f       	sbci	r21, 0xFD	; 253
}
    148a:	ca 01       	movw	r24, r20
    148c:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    1492:	ca 01       	movw	r24, r20
    1494:	08 95       	ret

00001496 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1496:	4f 92       	push	r4
    1498:	5f 92       	push	r5
    149a:	6f 92       	push	r6
    149c:	7f 92       	push	r7
    149e:	8f 92       	push	r8
    14a0:	9f 92       	push	r9
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	ec 01       	movw	r28, r24
    14b8:	4b 01       	movw	r8, r22
  if(!current) { return; }
    14ba:	61 15       	cp	r22, r1
    14bc:	71 05       	cpc	r23, r1
    14be:	99 f0       	breq	.+38     	; 0x14e6 <planner_forward_pass_kernel+0x50>
  if(previous) {
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	89 f0       	breq	.+34     	; 0x14e6 <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    14c4:	e9 a8       	ldd	r14, Y+49	; 0x31
    14c6:	fa a8       	ldd	r15, Y+50	; 0x32
    14c8:	0b a9       	ldd	r16, Y+51	; 0x33
    14ca:	1c a9       	ldd	r17, Y+52	; 0x34
    14cc:	fb 01       	movw	r30, r22
    14ce:	41 a8       	ldd	r4, Z+49	; 0x31
    14d0:	52 a8       	ldd	r5, Z+50	; 0x32
    14d2:	63 a8       	ldd	r6, Z+51	; 0x33
    14d4:	74 a8       	ldd	r7, Z+52	; 0x34
    14d6:	c8 01       	movw	r24, r16
    14d8:	b7 01       	movw	r22, r14
    14da:	a3 01       	movw	r20, r6
    14dc:	92 01       	movw	r18, r4
    14de:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    14e2:	88 23       	and	r24, r24
    14e4:	8c f0       	brlt	.+34     	; 0x1508 <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	7f 90       	pop	r7
    1500:	6f 90       	pop	r6
    1502:	5f 90       	pop	r5
    1504:	4f 90       	pop	r4
    1506:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1508:	f4 01       	movw	r30, r8
    150a:	a1 a4       	ldd	r10, Z+41	; 0x29
    150c:	b2 a4       	ldd	r11, Z+42	; 0x2a
    150e:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1510:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1512:	c8 01       	movw	r24, r16
    1514:	b7 01       	movw	r22, r14
    1516:	a6 01       	movw	r20, r12
    1518:	95 01       	movw	r18, r10
    151a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1522:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1526:	7b 01       	movw	r14, r22
    1528:	8c 01       	movw	r16, r24
    152a:	20 91 26 05 	lds	r18, 0x0526
    152e:	30 91 27 05 	lds	r19, 0x0527
    1532:	40 91 28 05 	lds	r20, 0x0528
    1536:	50 91 29 05 	lds	r21, 0x0529
    153a:	50 58       	subi	r21, 0x80	; 128
    153c:	ca 01       	movw	r24, r20
    153e:	b9 01       	movw	r22, r18
    1540:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e7       	ldi	r20, 0x70	; 112
    154a:	52 e4       	ldi	r21, 0x42	; 66
    154c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e7       	ldi	r20, 0x70	; 112
    1556:	52 ec       	ldi	r21, 0xC2	; 194
    1558:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    155c:	2d a5       	ldd	r18, Y+45	; 0x2d
    155e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1560:	4f a5       	ldd	r20, Y+47	; 0x2f
    1562:	58 a9       	ldd	r21, Y+48	; 0x30
    1564:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	c8 01       	movw	r24, r16
    156e:	b7 01       	movw	r22, r14
    1570:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1574:	0e 94 40 27 	call	0x4e80	; 0x4e80 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1578:	a6 01       	movw	r20, r12
    157a:	95 01       	movw	r18, r10
    157c:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1580:	7b 01       	movw	r14, r22
    1582:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1584:	c3 01       	movw	r24, r6
    1586:	b2 01       	movw	r22, r4
    1588:	a8 01       	movw	r20, r16
    158a:	97 01       	movw	r18, r14
    158c:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
    1590:	18 16       	cp	r1, r24
    1592:	0c f0       	brlt	.+2      	; 0x1596 <planner_forward_pass_kernel+0x100>
    1594:	a8 cf       	rjmp	.-176    	; 0x14e6 <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    1596:	f4 01       	movw	r30, r8
    1598:	e1 aa       	std	Z+49, r14	; 0x31
    159a:	f2 aa       	std	Z+50, r15	; 0x32
    159c:	03 ab       	std	Z+51, r16	; 0x33
    159e:	14 ab       	std	Z+52, r17	; 0x34
    15a0:	a2 cf       	rjmp	.-188    	; 0x14e6 <planner_forward_pass_kernel+0x50>

000015a2 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    15a2:	2f 92       	push	r2
    15a4:	3f 92       	push	r3
    15a6:	4f 92       	push	r4
    15a8:	5f 92       	push	r5
    15aa:	6f 92       	push	r6
    15ac:	7f 92       	push	r7
    15ae:	8f 92       	push	r8
    15b0:	9f 92       	push	r9
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	3b 01       	movw	r6, r22
    15c4:	4c 01       	movw	r8, r24
    15c6:	19 01       	movw	r2, r18
    15c8:	2a 01       	movw	r4, r20
	st_synchronize();
    15ca:	0e 94 80 1b 	call	0x3700	; 0x3700 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    15ce:	c4 01       	movw	r24, r8
    15d0:	b3 01       	movw	r22, r6
    15d2:	20 91 08 05 	lds	r18, 0x0508
    15d6:	30 91 09 05 	lds	r19, 0x0509
    15da:	40 91 0a 05 	lds	r20, 0x050A
    15de:	50 91 0b 05 	lds	r21, 0x050B
    15e2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    15e6:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    15ea:	e9 e9       	ldi	r30, 0x99	; 153
    15ec:	8e 2e       	mov	r8, r30
    15ee:	e3 e0       	ldi	r30, 0x03	; 3
    15f0:	9e 2e       	mov	r9, r30
    15f2:	60 93 99 03 	sts	0x0399, r22
    15f6:	70 93 9a 03 	sts	0x039A, r23
    15fa:	80 93 9b 03 	sts	0x039B, r24
    15fe:	90 93 9c 03 	sts	0x039C, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1602:	c2 01       	movw	r24, r4
    1604:	b1 01       	movw	r22, r2
    1606:	20 91 0c 05 	lds	r18, 0x050C
    160a:	30 91 0d 05 	lds	r19, 0x050D
    160e:	40 91 0e 05 	lds	r20, 0x050E
    1612:	50 91 0f 05 	lds	r21, 0x050F
    1616:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    161a:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    161e:	f4 01       	movw	r30, r8
    1620:	34 96       	adiw	r30, 0x04	; 4
    1622:	60 93 9d 03 	sts	0x039D, r22
    1626:	71 83       	std	Z+1, r23	; 0x01
    1628:	82 83       	std	Z+2, r24	; 0x02
    162a:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    162c:	c8 01       	movw	r24, r16
    162e:	b7 01       	movw	r22, r14
    1630:	20 91 10 05 	lds	r18, 0x0510
    1634:	30 91 11 05 	lds	r19, 0x0511
    1638:	40 91 12 05 	lds	r20, 0x0512
    163c:	50 91 13 05 	lds	r21, 0x0513
    1640:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1644:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    1648:	f4 01       	movw	r30, r8
    164a:	38 96       	adiw	r30, 0x08	; 8
    164c:	60 93 a1 03 	sts	0x03A1, r22
    1650:	71 83       	std	Z+1, r23	; 0x01
    1652:	82 83       	std	Z+2, r24	; 0x02
    1654:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1656:	c6 01       	movw	r24, r12
    1658:	b5 01       	movw	r22, r10
    165a:	20 91 14 05 	lds	r18, 0x0514
    165e:	30 91 15 05 	lds	r19, 0x0515
    1662:	40 91 16 05 	lds	r20, 0x0516
    1666:	50 91 17 05 	lds	r21, 0x0517
    166a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    166e:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    1672:	2c e0       	ldi	r18, 0x0C	; 12
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	82 0e       	add	r8, r18
    1678:	93 1e       	adc	r9, r19
    167a:	60 93 a5 03 	sts	0x03A5, r22
    167e:	f4 01       	movw	r30, r8
    1680:	71 83       	std	Z+1, r23	; 0x01
    1682:	82 83       	std	Z+2, r24	; 0x02
    1684:	93 83       	std	Z+3, r25	; 0x03
}
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	df 90       	pop	r13
    1690:	cf 90       	pop	r12
    1692:	bf 90       	pop	r11
    1694:	af 90       	pop	r10
    1696:	9f 90       	pop	r9
    1698:	8f 90       	pop	r8
    169a:	7f 90       	pop	r7
    169c:	6f 90       	pop	r6
    169e:	5f 90       	pop	r5
    16a0:	4f 90       	pop	r4
    16a2:	3f 90       	pop	r3
    16a4:	2f 90       	pop	r2
    16a6:	08 95       	ret

000016a8 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	80 91 a9 03 	lds	r24, 0x03A9
    16b4:	81 11       	cpse	r24, r1
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	20 97       	sbiw	r28, 0x00	; 0
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <plan_set_acceleration_manager_enabled+0x18>
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	98 17       	cp	r25, r24
    16c2:	31 f0       	breq	.+12     	; 0x16d0 <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    16c4:	0e 94 80 1b 	call	0x3700	; 0x3700 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    16c8:	10 92 a9 03 	sts	0x03A9, r1
    16cc:	cd 2b       	or	r28, r29
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 93 a9 03 	sts	0x03A9, r24
  }
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    16e2:	2f 92       	push	r2
    16e4:	3f 92       	push	r3
    16e6:	4f 92       	push	r4
    16e8:	5f 92       	push	r5
    16ea:	6f 92       	push	r6
    16ec:	7f 92       	push	r7
    16ee:	8f 92       	push	r8
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	62 97       	sbiw	r28, 0x12	; 18
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	9a 8b       	std	Y+18, r25	; 0x12
    1718:	89 8b       	std	Y+17, r24	; 0x11
    171a:	6a 01       	movw	r12, r20
    171c:	7b 01       	movw	r14, r22
    171e:	18 01       	movw	r2, r16
    1720:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1722:	fc 01       	movw	r30, r24
    1724:	65 89       	ldd	r22, Z+21	; 0x15
    1726:	76 89       	ldd	r23, Z+22	; 0x16
    1728:	87 89       	ldd	r24, Z+23	; 0x17
    172a:	90 8d       	ldd	r25, Z+24	; 0x18
    172c:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__floatunsisf>
    1730:	3b 01       	movw	r6, r22
    1732:	4c 01       	movw	r8, r24
    1734:	a7 01       	movw	r20, r14
    1736:	96 01       	movw	r18, r12
    1738:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    173c:	0e 94 71 24 	call	0x48e2	; 0x48e2 <ceil>
    1740:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__fixunssfsi>
    1744:	7b 01       	movw	r14, r22
    1746:	8c 01       	movw	r16, r24
    1748:	e9 89       	ldd	r30, Y+17	; 0x11
    174a:	fa 89       	ldd	r31, Y+18	; 0x12
    174c:	65 ab       	std	Z+53, r22	; 0x35
    174e:	76 ab       	std	Z+54, r23	; 0x36
    1750:	87 ab       	std	Z+55, r24	; 0x37
    1752:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1754:	c4 01       	movw	r24, r8
    1756:	b3 01       	movw	r22, r6
    1758:	a2 01       	movw	r20, r4
    175a:	91 01       	movw	r18, r2
    175c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1760:	0e 94 71 24 	call	0x48e2	; 0x48e2 <ceil>
    1764:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__fixunssfsi>
    1768:	1b 01       	movw	r2, r22
    176a:	2c 01       	movw	r4, r24
    176c:	e9 89       	ldd	r30, Y+17	; 0x11
    176e:	fa 89       	ldd	r31, Y+18	; 0x12
    1770:	61 af       	std	Z+57, r22	; 0x39
    1772:	72 af       	std	Z+58, r23	; 0x3a
    1774:	83 af       	std	Z+59, r24	; 0x3b
    1776:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1778:	fd 96       	adiw	r30, 0x3d	; 61
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	fd 97       	sbiw	r30, 0x3d	; 61
    1784:	fa 8b       	std	Y+18, r31	; 0x12
    1786:	e9 8b       	std	Y+17, r30	; 0x11
    1788:	28 e2       	ldi	r18, 0x28	; 40
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__mulsi3>
    1794:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e7       	ldi	r20, 0x70	; 112
    179e:	52 e4       	ldi	r21, 0x42	; 66
    17a0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    17a4:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    17a8:	5b 01       	movw	r10, r22
    17aa:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    17ac:	c8 01       	movw	r24, r16
    17ae:	b7 01       	movw	r22, r14
    17b0:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__floatunsisf>
    17b4:	7b 01       	movw	r14, r22
    17b6:	8c 01       	movw	r16, r24
    17b8:	c6 01       	movw	r24, r12
    17ba:	b5 01       	movw	r22, r10
    17bc:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    17c0:	6d 83       	std	Y+5, r22	; 0x05
    17c2:	7e 83       	std	Y+6, r23	; 0x06
    17c4:	8f 83       	std	Y+7, r24	; 0x07
    17c6:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    17c8:	c4 01       	movw	r24, r8
    17ca:	b3 01       	movw	r22, r6
    17cc:	a4 01       	movw	r20, r8
    17ce:	93 01       	movw	r18, r6
    17d0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    17d4:	3b 01       	movw	r6, r22
    17d6:	4c 01       	movw	r8, r24
    17d8:	c8 01       	movw	r24, r16
    17da:	b7 01       	movw	r22, r14
    17dc:	a8 01       	movw	r20, r16
    17de:	97 01       	movw	r18, r14
    17e0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    17e4:	69 87       	std	Y+9, r22	; 0x09
    17e6:	7a 87       	std	Y+10, r23	; 0x0a
    17e8:	8b 87       	std	Y+11, r24	; 0x0b
    17ea:	9c 87       	std	Y+12, r25	; 0x0c
    17ec:	6d 81       	ldd	r22, Y+5	; 0x05
    17ee:	7e 81       	ldd	r23, Y+6	; 0x06
    17f0:	8f 81       	ldd	r24, Y+7	; 0x07
    17f2:	98 85       	ldd	r25, Y+8	; 0x08
    17f4:	9b 01       	movw	r18, r22
    17f6:	ac 01       	movw	r20, r24
    17f8:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    17fc:	6d 87       	std	Y+13, r22	; 0x0d
    17fe:	7e 87       	std	Y+14, r23	; 0x0e
    1800:	8f 87       	std	Y+15, r24	; 0x0f
    1802:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1804:	c4 01       	movw	r24, r8
    1806:	b3 01       	movw	r22, r6
    1808:	29 85       	ldd	r18, Y+9	; 0x09
    180a:	3a 85       	ldd	r19, Y+10	; 0x0a
    180c:	4b 85       	ldd	r20, Y+11	; 0x0b
    180e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1810:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
    1814:	2d 85       	ldd	r18, Y+13	; 0x0d
    1816:	3e 85       	ldd	r19, Y+14	; 0x0e
    1818:	4f 85       	ldd	r20, Y+15	; 0x0f
    181a:	58 89       	ldd	r21, Y+16	; 0x10
    181c:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1820:	0e 94 71 24 	call	0x48e2	; 0x48e2 <ceil>
    1824:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    1828:	69 83       	std	Y+1, r22	; 0x01
    182a:	7a 83       	std	Y+2, r23	; 0x02
    182c:	8b 83       	std	Y+3, r24	; 0x03
    182e:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1830:	c2 01       	movw	r24, r4
    1832:	b1 01       	movw	r22, r2
    1834:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__floatunsisf>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    183c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1840:	1b 01       	movw	r2, r22
    1842:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1844:	a4 01       	movw	r20, r8
    1846:	93 01       	movw	r18, r6
    1848:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
    184c:	7b 01       	movw	r14, r22
    184e:	8c 01       	movw	r16, r24
    1850:	d0 94       	com	r13
    1852:	c0 94       	com	r12
    1854:	b0 94       	com	r11
    1856:	a0 94       	com	r10
    1858:	a1 1c       	adc	r10, r1
    185a:	b1 1c       	adc	r11, r1
    185c:	c1 1c       	adc	r12, r1
    185e:	d1 1c       	adc	r13, r1
    1860:	c6 01       	movw	r24, r12
    1862:	b5 01       	movw	r22, r10
    1864:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    1868:	9b 01       	movw	r18, r22
    186a:	ac 01       	movw	r20, r24
    186c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1870:	9b 01       	movw	r18, r22
    1872:	ac 01       	movw	r20, r24
    1874:	c8 01       	movw	r24, r16
    1876:	b7 01       	movw	r22, r14
    1878:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    187c:	0e 94 5e 25 	call	0x4abc	; 0x4abc <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1880:	e9 89       	ldd	r30, Y+17	; 0x11
    1882:	fa 89       	ldd	r31, Y+18	; 0x12
    1884:	a1 88       	ldd	r10, Z+17	; 0x11
    1886:	b2 88       	ldd	r11, Z+18	; 0x12
    1888:	c3 88       	ldd	r12, Z+19	; 0x13
    188a:	d4 88       	ldd	r13, Z+20	; 0x14
    188c:	86 01       	movw	r16, r12
    188e:	75 01       	movw	r14, r10
    1890:	29 81       	ldd	r18, Y+1	; 0x01
    1892:	3a 81       	ldd	r19, Y+2	; 0x02
    1894:	4b 81       	ldd	r20, Y+3	; 0x03
    1896:	5c 81       	ldd	r21, Y+4	; 0x04
    1898:	e2 1a       	sub	r14, r18
    189a:	f3 0a       	sbc	r15, r19
    189c:	04 0b       	sbc	r16, r20
    189e:	15 0b       	sbc	r17, r21
    18a0:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    18a4:	a8 01       	movw	r20, r16
    18a6:	97 01       	movw	r18, r14
    18a8:	26 1b       	sub	r18, r22
    18aa:	37 0b       	sbc	r19, r23
    18ac:	48 0b       	sbc	r20, r24
    18ae:	59 0b       	sbc	r21, r25
    18b0:	da 01       	movw	r26, r20
    18b2:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    18b4:	57 fd       	sbrc	r21, 7
    18b6:	30 c0       	rjmp	.+96     	; 0x1918 <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    18b8:	49 89       	ldd	r20, Y+17	; 0x11
    18ba:	5a 89       	ldd	r21, Y+18	; 0x12
    18bc:	4f 5b       	subi	r20, 0xBF	; 191
    18be:	5f 4f       	sbci	r21, 0xFF	; 255
    18c0:	fa 01       	movw	r30, r20
    18c2:	29 81       	ldd	r18, Y+1	; 0x01
    18c4:	3a 81       	ldd	r19, Y+2	; 0x02
    18c6:	4b 81       	ldd	r20, Y+3	; 0x03
    18c8:	5c 81       	ldd	r21, Y+4	; 0x04
    18ca:	21 93       	st	Z+, r18
    18cc:	31 93       	st	Z+, r19
    18ce:	41 93       	st	Z+, r20
    18d0:	51 93       	st	Z+, r21
    18d2:	fa 8b       	std	Y+18, r31	; 0x12
    18d4:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    18d6:	82 0f       	add	r24, r18
    18d8:	93 1f       	adc	r25, r19
    18da:	a4 1f       	adc	r26, r20
    18dc:	b5 1f       	adc	r27, r21
    18de:	80 83       	st	Z, r24
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	a2 83       	std	Z+2, r26	; 0x02
    18e4:	b3 83       	std	Z+3, r27	; 0x03
}                    
    18e6:	62 96       	adiw	r28, 0x12	; 18
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	bf 90       	pop	r11
    1904:	af 90       	pop	r10
    1906:	9f 90       	pop	r9
    1908:	8f 90       	pop	r8
    190a:	7f 90       	pop	r7
    190c:	6f 90       	pop	r6
    190e:	5f 90       	pop	r5
    1910:	4f 90       	pop	r4
    1912:	3f 90       	pop	r3
    1914:	2f 90       	pop	r2
    1916:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    1918:	c6 01       	movw	r24, r12
    191a:	b5 01       	movw	r22, r10
    191c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    1920:	2d 85       	ldd	r18, Y+13	; 0x0d
    1922:	3e 85       	ldd	r19, Y+14	; 0x0e
    1924:	4f 85       	ldd	r20, Y+15	; 0x0f
    1926:	58 89       	ldd	r21, Y+16	; 0x10
    1928:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    192c:	29 85       	ldd	r18, Y+9	; 0x09
    192e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1930:	4b 85       	ldd	r20, Y+11	; 0x0b
    1932:	5c 85       	ldd	r21, Y+12	; 0x0c
    1934:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
    1938:	9b 01       	movw	r18, r22
    193a:	ac 01       	movw	r20, r24
    193c:	c2 01       	movw	r24, r4
    193e:	b1 01       	movw	r22, r2
    1940:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1944:	7b 01       	movw	r14, r22
    1946:	8c 01       	movw	r16, r24
    1948:	6d 81       	ldd	r22, Y+5	; 0x05
    194a:	7e 81       	ldd	r23, Y+6	; 0x06
    194c:	8f 81       	ldd	r24, Y+7	; 0x07
    194e:	98 85       	ldd	r25, Y+8	; 0x08
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	50 e4       	ldi	r21, 0x40	; 64
    1958:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	c8 01       	movw	r24, r16
    1962:	b7 01       	movw	r22, r14
    1964:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1968:	0e 94 71 24 	call	0x48e2	; 0x48e2 <ceil>
    196c:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    1970:	69 83       	std	Y+1, r22	; 0x01
    1972:	7a 83       	std	Y+2, r23	; 0x02
    1974:	8b 83       	std	Y+3, r24	; 0x03
    1976:	9c 83       	std	Y+4, r25	; 0x04
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e0       	ldi	r26, 0x00	; 0
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	9b cf       	rjmp	.-202    	; 0x18b8 <calculate_trapezoid_for_block+0x1d6>

00001982 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1982:	10 92 96 03 	sts	0x0396, r1
    1986:	10 92 95 03 	sts	0x0395, r1
  block_buffer_tail = 0;
    198a:	10 92 98 03 	sts	0x0398, r1
    198e:	10 92 97 03 	sts	0x0397, r1
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1992:	80 91 a9 03 	lds	r24, 0x03A9
    1996:	88 23       	and	r24, r24
    1998:	29 f4       	brne	.+10     	; 0x19a4 <plan_init+0x22>
    st_synchronize();
    199a:	0e 94 80 1b 	call	0x3700	; 0x3700 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	80 93 a9 03 	sts	0x03A9, r24

void plan_init() {
  block_buffer_head = 0;
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
    19a4:	80 e1       	ldi	r24, 0x10	; 16
    19a6:	e9 e9       	ldi	r30, 0x99	; 153
    19a8:	f3 e0       	ldi	r31, 0x03	; 3
    19aa:	df 01       	movw	r26, r30
    19ac:	1d 92       	st	X+, r1
    19ae:	8a 95       	dec	r24
    19b0:	e9 f7       	brne	.-6      	; 0x19ac <plan_init+0x2a>
}
    19b2:	08 95       	ret

000019b4 <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    19c4:	80 91 97 03 	lds	r24, 0x0397
    19c8:	90 91 98 03 	lds	r25, 0x0398
    19cc:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    19ce:	e8 2e       	mov	r14, r24
    19d0:	ff 24       	eor	r15, r15
    19d2:	e7 fc       	sbrc	r14, 7
    19d4:	f0 94       	com	r15
    19d6:	80 91 95 03 	lds	r24, 0x0395
    19da:	90 91 96 03 	lds	r25, 0x0396
    19de:	e8 16       	cp	r14, r24
    19e0:	f9 06       	cpc	r15, r25
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <planner_recalculate_trapezoids+0x32>
    19e4:	4b c0       	rjmp	.+150    	; 0x1a7c <planner_recalculate_trapezoids+0xc8>
    19e6:	e0 e0       	ldi	r30, 0x00	; 0
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <planner_recalculate_trapezoids+0x3a>
    19ec:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    19ee:	89 e4       	ldi	r24, 0x49	; 73
    19f0:	28 02       	muls	r18, r24
    19f2:	e0 01       	movw	r28, r0
    19f4:	11 24       	eor	r1, r1
    19f6:	c8 5d       	subi	r28, 0xD8	; 216
    19f8:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    19fa:	30 97       	sbiw	r30, 0x00	; 0
    19fc:	59 f0       	breq	.+22     	; 0x1a14 <planner_recalculate_trapezoids+0x60>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    19fe:	41 a9       	ldd	r20, Z+49	; 0x31
    1a00:	52 a9       	ldd	r21, Z+50	; 0x32
    1a02:	63 a9       	ldd	r22, Z+51	; 0x33
    1a04:	74 a9       	ldd	r23, Z+52	; 0x34
    1a06:	09 a9       	ldd	r16, Y+49	; 0x31
    1a08:	1a a9       	ldd	r17, Y+50	; 0x32
    1a0a:	2b a9       	ldd	r18, Y+51	; 0x33
    1a0c:	3c a9       	ldd	r19, Y+52	; 0x34
    1a0e:	cf 01       	movw	r24, r30
    1a10:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1a14:	c7 01       	movw	r24, r14
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	65 e0       	ldi	r22, 0x05	; 5
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    1a20:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1a22:	e8 2e       	mov	r14, r24
    1a24:	ff 24       	eor	r15, r15
    1a26:	e7 fc       	sbrc	r14, 7
    1a28:	f0 94       	com	r15
    1a2a:	80 91 95 03 	lds	r24, 0x0395
    1a2e:	90 91 96 03 	lds	r25, 0x0396
    1a32:	e8 16       	cp	r14, r24
    1a34:	f9 06       	cpc	r15, r25
    1a36:	d1 f6       	brne	.-76     	; 0x19ec <planner_recalculate_trapezoids+0x38>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1a38:	c9 a8       	ldd	r12, Y+49	; 0x31
    1a3a:	da a8       	ldd	r13, Y+50	; 0x32
    1a3c:	eb a8       	ldd	r14, Y+51	; 0x33
    1a3e:	fc a8       	ldd	r15, Y+52	; 0x34
    1a40:	60 91 2a 05 	lds	r22, 0x052A
    1a44:	70 91 2b 05 	lds	r23, 0x052B
    1a48:	80 91 2c 05 	lds	r24, 0x052C
    1a4c:	90 91 2d 05 	lds	r25, 0x052D
    1a50:	29 a5       	ldd	r18, Y+41	; 0x29
    1a52:	3a a5       	ldd	r19, Y+42	; 0x2a
    1a54:	4b a5       	ldd	r20, Y+43	; 0x2b
    1a56:	5c a5       	ldd	r21, Y+44	; 0x2c
    1a58:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1a5c:	8b 01       	movw	r16, r22
    1a5e:	9c 01       	movw	r18, r24
    1a60:	ce 01       	movw	r24, r28
    1a62:	b7 01       	movw	r22, r14
    1a64:	a6 01       	movw	r20, r12
    1a66:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <calculate_trapezoid_for_block>
}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1a7c:	c0 e0       	ldi	r28, 0x00	; 0
    1a7e:	d0 e0       	ldi	r29, 0x00	; 0
    1a80:	db cf       	rjmp	.-74     	; 0x1a38 <planner_recalculate_trapezoids+0x84>

00001a82 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1a82:	2f 92       	push	r2
    1a84:	3f 92       	push	r3
    1a86:	4f 92       	push	r4
    1a88:	5f 92       	push	r5
    1a8a:	6f 92       	push	r6
    1a8c:	7f 92       	push	r7
    1a8e:	8f 92       	push	r8
    1a90:	9f 92       	push	r9
    1a92:	af 92       	push	r10
    1a94:	bf 92       	push	r11
    1a96:	cf 92       	push	r12
    1a98:	df 92       	push	r13
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <planner_reverse_pass_kernel+0x26>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <planner_reverse_pass_kernel+0x28>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	8c 01       	movw	r16, r24
    1ab0:	7e 83       	std	Y+6, r23	; 0x06
    1ab2:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1ab4:	67 2b       	or	r22, r23
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <planner_reverse_pass_kernel+0x38>
    1ab8:	a5 c0       	rjmp	.+330    	; 0x1c04 <planner_reverse_pass_kernel+0x182>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1aba:	41 15       	cp	r20, r1
    1abc:	51 05       	cpc	r21, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <planner_reverse_pass_kernel+0x40>
    1ac0:	27 c1       	rjmp	.+590    	; 0x1d10 <planner_reverse_pass_kernel+0x28e>
    exit_factor = next->entry_factor;
    1ac2:	da 01       	movw	r26, r20
    1ac4:	d1 96       	adiw	r26, 0x31	; 49
    1ac6:	8d 91       	ld	r24, X+
    1ac8:	9d 91       	ld	r25, X+
    1aca:	0d 90       	ld	r0, X+
    1acc:	bc 91       	ld	r27, X
    1ace:	a0 2d       	mov	r26, r0
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	ab 83       	std	Y+3, r26	; 0x03
    1ad6:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1ad8:	01 15       	cp	r16, r1
    1ada:	11 05       	cpc	r17, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <planner_reverse_pass_kernel+0x5e>
    1ade:	05 c1       	rjmp	.+522    	; 0x1cea <planner_reverse_pass_kernel+0x268>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	61 8d       	ldd	r22, Z+25	; 0x19
    1ae4:	72 8d       	ldd	r23, Z+26	; 0x1a
    1ae6:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ae8:	94 8d       	ldd	r25, Z+28	; 0x1c
    1aea:	ad 81       	ldd	r26, Y+5	; 0x05
    1aec:	be 81       	ldd	r27, Y+6	; 0x06
    1aee:	59 96       	adiw	r26, 0x19	; 25
    1af0:	2d 91       	ld	r18, X+
    1af2:	3d 91       	ld	r19, X+
    1af4:	4d 91       	ld	r20, X+
    1af6:	5c 91       	ld	r21, X
    1af8:	5c 97       	sbiw	r26, 0x1c	; 28
    1afa:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
    1afe:	9b 01       	movw	r18, r22
    1b00:	ac 01       	movw	r20, r24
    1b02:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1b06:	1b 01       	movw	r2, r22
    1b08:	2c 01       	movw	r4, r24
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	65 8d       	ldd	r22, Z+29	; 0x1d
    1b0e:	76 8d       	ldd	r23, Z+30	; 0x1e
    1b10:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b12:	90 a1       	ldd	r25, Z+32	; 0x20
    1b14:	ad 81       	ldd	r26, Y+5	; 0x05
    1b16:	be 81       	ldd	r27, Y+6	; 0x06
    1b18:	5d 96       	adiw	r26, 0x1d	; 29
    1b1a:	2d 91       	ld	r18, X+
    1b1c:	3d 91       	ld	r19, X+
    1b1e:	4d 91       	ld	r20, X+
    1b20:	5c 91       	ld	r21, X
    1b22:	90 97       	sbiw	r26, 0x20	; 32
    1b24:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
    1b28:	9b 01       	movw	r18, r22
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1b30:	3b 01       	movw	r6, r22
    1b32:	4c 01       	movw	r8, r24
    1b34:	f8 01       	movw	r30, r16
    1b36:	61 a1       	ldd	r22, Z+33	; 0x21
    1b38:	72 a1       	ldd	r23, Z+34	; 0x22
    1b3a:	83 a1       	ldd	r24, Z+35	; 0x23
    1b3c:	94 a1       	ldd	r25, Z+36	; 0x24
    1b3e:	ad 81       	ldd	r26, Y+5	; 0x05
    1b40:	be 81       	ldd	r27, Y+6	; 0x06
    1b42:	91 96       	adiw	r26, 0x21	; 33
    1b44:	2d 91       	ld	r18, X+
    1b46:	3d 91       	ld	r19, X+
    1b48:	4d 91       	ld	r20, X+
    1b4a:	5c 91       	ld	r21, X
    1b4c:	94 97       	sbiw	r26, 0x24	; 36
    1b4e:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
    1b52:	9b 01       	movw	r18, r22
    1b54:	ac 01       	movw	r20, r24
    1b56:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1b5a:	5b 01       	movw	r10, r22
    1b5c:	6c 01       	movw	r12, r24
    1b5e:	f8 01       	movw	r30, r16
    1b60:	65 a1       	ldd	r22, Z+37	; 0x25
    1b62:	76 a1       	ldd	r23, Z+38	; 0x26
    1b64:	87 a1       	ldd	r24, Z+39	; 0x27
    1b66:	90 a5       	ldd	r25, Z+40	; 0x28
    1b68:	ad 81       	ldd	r26, Y+5	; 0x05
    1b6a:	be 81       	ldd	r27, Y+6	; 0x06
    1b6c:	95 96       	adiw	r26, 0x25	; 37
    1b6e:	2d 91       	ld	r18, X+
    1b70:	3d 91       	ld	r19, X+
    1b72:	4d 91       	ld	r20, X+
    1b74:	5c 91       	ld	r21, X
    1b76:	98 97       	sbiw	r26, 0x28	; 40
    1b78:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <__subsf3>
    1b7c:	9b 01       	movw	r18, r22
    1b7e:	ac 01       	movw	r20, r24
    1b80:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1b84:	7b 01       	movw	r14, r22
    1b86:	8c 01       	movw	r16, r24
    1b88:	c2 01       	movw	r24, r4
    1b8a:	b1 01       	movw	r22, r2
    1b8c:	a4 01       	movw	r20, r8
    1b8e:	93 01       	movw	r18, r6
    1b90:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1b94:	a6 01       	movw	r20, r12
    1b96:	95 01       	movw	r18, r10
    1b98:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1b9c:	a8 01       	movw	r20, r16
    1b9e:	97 01       	movw	r18, r14
    1ba0:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1ba4:	0e 94 40 27 	call	0x4e80	; 0x4e80 <sqrt>
    1ba8:	5b 01       	movw	r10, r22
    1baa:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1bac:	e0 90 2a 05 	lds	r14, 0x052A
    1bb0:	f0 90 2b 05 	lds	r15, 0x052B
    1bb4:	00 91 2c 05 	lds	r16, 0x052C
    1bb8:	10 91 2d 05 	lds	r17, 0x052D
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	b7 01       	movw	r22, r14
    1bc0:	a6 01       	movw	r20, r12
    1bc2:	95 01       	movw	r18, r10
    1bc4:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    1bc8:	87 fd       	sbrc	r24, 7
    1bca:	35 c0       	rjmp	.+106    	; 0x1c36 <planner_reverse_pass_kernel+0x1b4>
    1bcc:	0f 2e       	mov	r0, r31
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	6f 2e       	mov	r6, r31
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	7f 2e       	mov	r7, r31
    1bd6:	f0 e8       	ldi	r31, 0x80	; 128
    1bd8:	8f 2e       	mov	r8, r31
    1bda:	ff e3       	ldi	r31, 0x3F	; 63
    1bdc:	9f 2e       	mov	r9, r31
    1bde:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1be0:	c4 01       	movw	r24, r8
    1be2:	b3 01       	movw	r22, r6
    1be4:	29 81       	ldd	r18, Y+1	; 0x01
    1be6:	3a 81       	ldd	r19, Y+2	; 0x02
    1be8:	4b 81       	ldd	r20, Y+3	; 0x03
    1bea:	5c 81       	ldd	r21, Y+4	; 0x04
    1bec:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	54 f1       	brlt	.+84     	; 0x1c48 <planner_reverse_pass_kernel+0x1c6>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1bf4:	ad 81       	ldd	r26, Y+5	; 0x05
    1bf6:	be 81       	ldd	r27, Y+6	; 0x06
    1bf8:	d1 96       	adiw	r26, 0x31	; 49
    1bfa:	6d 92       	st	X+, r6
    1bfc:	7d 92       	st	X+, r7
    1bfe:	8d 92       	st	X+, r8
    1c00:	9c 92       	st	X, r9
    1c02:	d4 97       	sbiw	r26, 0x34	; 52
}
    1c04:	26 96       	adiw	r28, 0x06	; 6
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	df 90       	pop	r13
    1c1e:	cf 90       	pop	r12
    1c20:	bf 90       	pop	r11
    1c22:	af 90       	pop	r10
    1c24:	9f 90       	pop	r9
    1c26:	8f 90       	pop	r8
    1c28:	7f 90       	pop	r7
    1c2a:	6f 90       	pop	r6
    1c2c:	5f 90       	pop	r5
    1c2e:	4f 90       	pop	r4
    1c30:	3f 90       	pop	r3
    1c32:	2f 90       	pop	r2
    1c34:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1c36:	c8 01       	movw	r24, r16
    1c38:	b7 01       	movw	r22, r14
    1c3a:	a6 01       	movw	r20, r12
    1c3c:	95 01       	movw	r18, r10
    1c3e:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1c42:	3b 01       	movw	r6, r22
    1c44:	4c 01       	movw	r8, r24
    1c46:	cc cf       	rjmp	.-104    	; 0x1be0 <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1c48:	ed 81       	ldd	r30, Y+5	; 0x05
    1c4a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c4c:	a1 a4       	ldd	r10, Z+41	; 0x29
    1c4e:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1c50:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1c52:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1c54:	c6 01       	movw	r24, r12
    1c56:	b5 01       	movw	r22, r10
    1c58:	29 81       	ldd	r18, Y+1	; 0x01
    1c5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c5c:	4b 81       	ldd	r20, Y+3	; 0x03
    1c5e:	5c 81       	ldd	r21, Y+4	; 0x04
    1c60:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1c64:	9b 01       	movw	r18, r22
    1c66:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1c68:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1c6c:	7b 01       	movw	r14, r22
    1c6e:	8c 01       	movw	r16, r24
    1c70:	20 91 26 05 	lds	r18, 0x0526
    1c74:	30 91 27 05 	lds	r19, 0x0527
    1c78:	40 91 28 05 	lds	r20, 0x0528
    1c7c:	50 91 29 05 	lds	r21, 0x0529
    1c80:	50 58       	subi	r21, 0x80	; 128
    1c82:	ca 01       	movw	r24, r20
    1c84:	b9 01       	movw	r22, r18
    1c86:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e7       	ldi	r20, 0x70	; 112
    1c90:	52 e4       	ldi	r21, 0x42	; 66
    1c92:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e7       	ldi	r20, 0x70	; 112
    1c9c:	52 ec       	ldi	r21, 0xC2	; 194
    1c9e:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1ca2:	ad 81       	ldd	r26, Y+5	; 0x05
    1ca4:	be 81       	ldd	r27, Y+6	; 0x06
    1ca6:	9d 96       	adiw	r26, 0x2d	; 45
    1ca8:	2d 91       	ld	r18, X+
    1caa:	3d 91       	ld	r19, X+
    1cac:	4d 91       	ld	r20, X+
    1cae:	5c 91       	ld	r21, X
    1cb0:	d0 97       	sbiw	r26, 0x30	; 48
    1cb2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	ac 01       	movw	r20, r24
    1cba:	c8 01       	movw	r24, r16
    1cbc:	b7 01       	movw	r22, r14
    1cbe:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1cc2:	0e 94 40 27 	call	0x4e80	; 0x4e80 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1cc6:	a6 01       	movw	r20, r12
    1cc8:	95 01       	movw	r18, r10
    1cca:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1cce:	7b 01       	movw	r14, r22
    1cd0:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1cd2:	c4 01       	movw	r24, r8
    1cd4:	b3 01       	movw	r22, r6
    1cd6:	a8 01       	movw	r20, r16
    1cd8:	97 01       	movw	r18, r14
    1cda:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	0c f0       	brlt	.+2      	; 0x1ce4 <planner_reverse_pass_kernel+0x262>
    1ce2:	88 cf       	rjmp	.-240    	; 0x1bf4 <planner_reverse_pass_kernel+0x172>
    1ce4:	37 01       	movw	r6, r14
    1ce6:	48 01       	movw	r8, r16
    1ce8:	85 cf       	rjmp	.-246    	; 0x1bf4 <planner_reverse_pass_kernel+0x172>
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
    1cea:	60 91 2a 05 	lds	r22, 0x052A
    1cee:	70 91 2b 05 	lds	r23, 0x052B
    1cf2:	80 91 2c 05 	lds	r24, 0x052C
    1cf6:	90 91 2d 05 	lds	r25, 0x052D
    1cfa:	ed 81       	ldd	r30, Y+5	; 0x05
    1cfc:	fe 81       	ldd	r31, Y+6	; 0x06
    1cfe:	21 a5       	ldd	r18, Z+41	; 0x29
    1d00:	32 a5       	ldd	r19, Z+42	; 0x2a
    1d02:	43 a5       	ldd	r20, Z+43	; 0x2b
    1d04:	54 a5       	ldd	r21, Z+44	; 0x2c
    1d06:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1d0a:	3b 01       	movw	r6, r22
    1d0c:	4c 01       	movw	r8, r24
    1d0e:	72 cf       	rjmp	.-284    	; 0x1bf4 <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	0e 94 f5 09 	call	0x13ea	; 0x13ea <factor_for_safe_speed>
    1d18:	69 83       	std	Y+1, r22	; 0x01
    1d1a:	7a 83       	std	Y+2, r23	; 0x02
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	db ce       	rjmp	.-586    	; 0x1ad8 <planner_reverse_pass_kernel+0x56>

00001d22 <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1d22:	cf 92       	push	r12
    1d24:	df 92       	push	r13
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1d30:	80 91 95 03 	lds	r24, 0x0395
    1d34:	90 91 96 03 	lds	r25, 0x0396
    1d38:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d3a:	20 91 97 03 	lds	r18, 0x0397
    1d3e:	30 91 98 03 	lds	r19, 0x0398
    1d42:	99 27       	eor	r25, r25
    1d44:	87 fd       	sbrc	r24, 7
    1d46:	90 95       	com	r25
    1d48:	82 17       	cp	r24, r18
    1d4a:	93 07       	cpc	r25, r19
    1d4c:	b9 f1       	breq	.+110    	; 0x1dbc <planner_reverse_pass+0x9a>
    1d4e:	00 e0       	ldi	r16, 0x00	; 0
    1d50:	10 e0       	ldi	r17, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	19 c0       	rjmp	.+50     	; 0x1d8a <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1d58:	8f 2d       	mov	r24, r15
    1d5a:	99 e4       	ldi	r25, 0x49	; 73
    1d5c:	89 02       	muls	r24, r25
    1d5e:	b0 01       	movw	r22, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	cf 2c       	mov	r12, r15
    1d64:	dd 24       	eor	r13, r13
    1d66:	c7 fc       	sbrc	r12, 7
    1d68:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1d6a:	eb 01       	movw	r28, r22
    1d6c:	c8 5d       	subi	r28, 0xD8	; 216
    1d6e:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1d70:	ce 01       	movw	r24, r28
    1d72:	b8 01       	movw	r22, r16
    1d74:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d78:	80 91 97 03 	lds	r24, 0x0397
    1d7c:	90 91 98 03 	lds	r25, 0x0398
    1d80:	a8 01       	movw	r20, r16
    1d82:	8c 15       	cp	r24, r12
    1d84:	9d 05       	cpc	r25, r13
    1d86:	61 f0       	breq	.+24     	; 0x1da0 <planner_reverse_pass+0x7e>
    1d88:	8e 01       	movw	r16, r28
    block_index--;
    1d8a:	fa 94       	dec	r15
    if(block_index < 0) {
    1d8c:	f7 fe       	sbrs	r15, 7
    1d8e:	e4 cf       	rjmp	.-56     	; 0x1d58 <planner_reverse_pass+0x36>
    1d90:	a4 e0       	ldi	r26, 0x04	; 4
    1d92:	fa 2e       	mov	r15, r26
    1d94:	64 e2       	ldi	r22, 0x24	; 36
    1d96:	71 e0       	ldi	r23, 0x01	; 1
    1d98:	f4 e0       	ldi	r31, 0x04	; 4
    1d9a:	cf 2e       	mov	r12, r31
    1d9c:	d1 2c       	mov	r13, r1
    1d9e:	e5 cf       	rjmp	.-54     	; 0x1d6a <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1da0:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	be 01       	movw	r22, r28
    1da8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <planner_reverse_pass_kernel>
}
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    1dba:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1dbc:	c0 e0       	ldi	r28, 0x00	; 0
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	ee cf       	rjmp	.-36     	; 0x1da2 <planner_reverse_pass+0x80>

00001dc6 <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    1dc6:	2f 92       	push	r2
    1dc8:	3f 92       	push	r3
    1dca:	4f 92       	push	r4
    1dcc:	5f 92       	push	r5
    1dce:	6f 92       	push	r6
    1dd0:	7f 92       	push	r7
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	28 97       	sbiw	r28, 0x08	; 8
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
  int8_t block_index = block_buffer_tail;
    1dfa:	80 91 97 03 	lds	r24, 0x0397
    1dfe:	90 91 98 03 	lds	r25, 0x0398
    1e02:	28 2f       	mov	r18, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1e04:	48 2e       	mov	r4, r24
    1e06:	55 24       	eor	r5, r5
    1e08:	47 fc       	sbrc	r4, 7
    1e0a:	50 94       	com	r5
    1e0c:	80 91 95 03 	lds	r24, 0x0395
    1e10:	90 91 96 03 	lds	r25, 0x0396
    1e14:	48 16       	cp	r4, r24
    1e16:	59 06       	cpc	r5, r25
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <planner_forward_pass+0x56>
    1e1a:	08 c1       	rjmp	.+528    	; 0x202c <planner_forward_pass+0x266>
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1e1c:	80 91 26 05 	lds	r24, 0x0526
    1e20:	90 91 27 05 	lds	r25, 0x0527
    1e24:	a0 91 28 05 	lds	r26, 0x0528
    1e28:	b0 91 29 05 	lds	r27, 0x0529
    1e2c:	ac 01       	movw	r20, r24
    1e2e:	bd 01       	movw	r22, r26
    1e30:	70 58       	subi	r23, 0x80	; 128
    1e32:	49 83       	std	Y+1, r20	; 0x01
    1e34:	5a 83       	std	Y+2, r21	; 0x02
    1e36:	6b 83       	std	Y+3, r22	; 0x03
    1e38:	7c 83       	std	Y+4, r23	; 0x04
    1e3a:	88 24       	eor	r8, r8
    1e3c:	99 24       	eor	r9, r9
    1e3e:	22 24       	eor	r2, r2
    1e40:	33 24       	eor	r3, r3
    1e42:	15 c0       	rjmp	.+42     	; 0x1e6e <planner_forward_pass+0xa8>
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1e44:	c2 01       	movw	r24, r4
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	65 e0       	ldi	r22, 0x05	; 5
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    1e50:	28 2f       	mov	r18, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1e52:	48 2e       	mov	r4, r24
    1e54:	55 24       	eor	r5, r5
    1e56:	47 fc       	sbrc	r4, 7
    1e58:	50 94       	com	r5
    1e5a:	80 91 95 03 	lds	r24, 0x0395
    1e5e:	90 91 96 03 	lds	r25, 0x0396
    1e62:	14 01       	movw	r2, r8
    1e64:	48 16       	cp	r4, r24
    1e66:	59 06       	cpc	r5, r25
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <planner_forward_pass+0xa6>
    1e6a:	78 c0       	rjmp	.+240    	; 0x1f5c <planner_forward_pass+0x196>
    1e6c:	43 01       	movw	r8, r6
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    1e6e:	59 e4       	ldi	r21, 0x49	; 73
    1e70:	25 02       	muls	r18, r21
    1e72:	30 01       	movw	r6, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	68 e2       	ldi	r22, 0x28	; 40
    1e78:	72 e0       	ldi	r23, 0x02	; 2
    1e7a:	66 0e       	add	r6, r22
    1e7c:	77 1e       	adc	r7, r23
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
  if(!current) { return; }
    1e7e:	81 14       	cp	r8, r1
    1e80:	91 04       	cpc	r9, r1
    1e82:	01 f3       	breq	.-64     	; 0x1e44 <planner_forward_pass+0x7e>
  if(previous) {
    1e84:	21 14       	cp	r2, r1
    1e86:	31 04       	cpc	r3, r1
    1e88:	e9 f2       	breq	.-70     	; 0x1e44 <planner_forward_pass+0x7e>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1e8a:	d1 01       	movw	r26, r2
    1e8c:	d1 96       	adiw	r26, 0x31	; 49
    1e8e:	ed 90       	ld	r14, X+
    1e90:	fd 90       	ld	r15, X+
    1e92:	0d 91       	ld	r16, X+
    1e94:	1c 91       	ld	r17, X
    1e96:	d4 97       	sbiw	r26, 0x34	; 52
    1e98:	d4 01       	movw	r26, r8
    1e9a:	d1 96       	adiw	r26, 0x31	; 49
    1e9c:	4d 91       	ld	r20, X+
    1e9e:	5d 91       	ld	r21, X+
    1ea0:	6d 91       	ld	r22, X+
    1ea2:	7c 91       	ld	r23, X
    1ea4:	d4 97       	sbiw	r26, 0x34	; 52
    1ea6:	4d 83       	std	Y+5, r20	; 0x05
    1ea8:	5e 83       	std	Y+6, r21	; 0x06
    1eaa:	6f 83       	std	Y+7, r22	; 0x07
    1eac:	78 87       	std	Y+8, r23	; 0x08
    1eae:	c8 01       	movw	r24, r16
    1eb0:	b7 01       	movw	r22, r14
    1eb2:	2d 81       	ldd	r18, Y+5	; 0x05
    1eb4:	3e 81       	ldd	r19, Y+6	; 0x06
    1eb6:	4f 81       	ldd	r20, Y+7	; 0x07
    1eb8:	58 85       	ldd	r21, Y+8	; 0x08
    1eba:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	0c f6       	brge	.-126    	; 0x1e44 <planner_forward_pass+0x7e>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1ec2:	f4 01       	movw	r30, r8
    1ec4:	a1 a4       	ldd	r10, Z+41	; 0x29
    1ec6:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1ec8:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1eca:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1ecc:	c8 01       	movw	r24, r16
    1ece:	b7 01       	movw	r22, r14
    1ed0:	a6 01       	movw	r20, r12
    1ed2:	95 01       	movw	r18, r10
    1ed4:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1ed8:	9b 01       	movw	r18, r22
    1eda:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1edc:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1ee0:	7b 01       	movw	r14, r22
    1ee2:	8c 01       	movw	r16, r24
    1ee4:	69 81       	ldd	r22, Y+1	; 0x01
    1ee6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	9b 01       	movw	r18, r22
    1eee:	ac 01       	movw	r20, r24
    1ef0:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e7       	ldi	r20, 0x70	; 112
    1efa:	52 e4       	ldi	r21, 0x42	; 66
    1efc:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e7       	ldi	r20, 0x70	; 112
    1f06:	52 ec       	ldi	r21, 0xC2	; 194
    1f08:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1f0c:	d1 01       	movw	r26, r2
    1f0e:	9d 96       	adiw	r26, 0x2d	; 45
    1f10:	2d 91       	ld	r18, X+
    1f12:	3d 91       	ld	r19, X+
    1f14:	4d 91       	ld	r20, X+
    1f16:	5c 91       	ld	r21, X
    1f18:	d0 97       	sbiw	r26, 0x30	; 48
    1f1a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1f1e:	9b 01       	movw	r18, r22
    1f20:	ac 01       	movw	r20, r24
    1f22:	c8 01       	movw	r24, r16
    1f24:	b7 01       	movw	r22, r14
    1f26:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1f2a:	0e 94 40 27 	call	0x4e80	; 0x4e80 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1f2e:	a6 01       	movw	r20, r12
    1f30:	95 01       	movw	r18, r10
    1f32:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    1f36:	7b 01       	movw	r14, r22
    1f38:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1f3a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f3c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f40:	98 85       	ldd	r25, Y+8	; 0x08
    1f42:	a8 01       	movw	r20, r16
    1f44:	97 01       	movw	r18, r14
    1f46:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	0c f0       	brlt	.+2      	; 0x1f50 <planner_forward_pass+0x18a>
    1f4e:	7a cf       	rjmp	.-268    	; 0x1e44 <planner_forward_pass+0x7e>
        current->entry_factor = max_entry_factor;
    1f50:	f4 01       	movw	r30, r8
    1f52:	e1 aa       	std	Z+49, r14	; 0x31
    1f54:	f2 aa       	std	Z+50, r15	; 0x32
    1f56:	03 ab       	std	Z+51, r16	; 0x33
    1f58:	14 ab       	std	Z+52, r17	; 0x34
    1f5a:	74 cf       	rjmp	.-280    	; 0x1e44 <planner_forward_pass+0x7e>
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
  if(!current) { return; }
    1f5c:	61 14       	cp	r6, r1
    1f5e:	71 04       	cpc	r7, r1
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <planner_forward_pass+0x19e>
    1f62:	64 c0       	rjmp	.+200    	; 0x202c <planner_forward_pass+0x266>
  if(previous) {
    1f64:	81 14       	cp	r8, r1
    1f66:	91 04       	cpc	r9, r1
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <planner_forward_pass+0x1a6>
    1f6a:	60 c0       	rjmp	.+192    	; 0x202c <planner_forward_pass+0x266>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1f6c:	d4 01       	movw	r26, r8
    1f6e:	d1 96       	adiw	r26, 0x31	; 49
    1f70:	ed 90       	ld	r14, X+
    1f72:	fd 90       	ld	r15, X+
    1f74:	0d 91       	ld	r16, X+
    1f76:	1c 91       	ld	r17, X
    1f78:	d4 97       	sbiw	r26, 0x34	; 52
    1f7a:	f3 01       	movw	r30, r6
    1f7c:	21 a8       	ldd	r2, Z+49	; 0x31
    1f7e:	32 a8       	ldd	r3, Z+50	; 0x32
    1f80:	43 a8       	ldd	r4, Z+51	; 0x33
    1f82:	54 a8       	ldd	r5, Z+52	; 0x34
    1f84:	c8 01       	movw	r24, r16
    1f86:	b7 01       	movw	r22, r14
    1f88:	a2 01       	movw	r20, r4
    1f8a:	91 01       	movw	r18, r2
    1f8c:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	0c f0       	brlt	.+2      	; 0x1f96 <planner_forward_pass+0x1d0>
    1f94:	4b c0       	rjmp	.+150    	; 0x202c <planner_forward_pass+0x266>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1f96:	d3 01       	movw	r26, r6
    1f98:	99 96       	adiw	r26, 0x29	; 41
    1f9a:	ad 90       	ld	r10, X+
    1f9c:	bd 90       	ld	r11, X+
    1f9e:	cd 90       	ld	r12, X+
    1fa0:	dc 90       	ld	r13, X
    1fa2:	9c 97       	sbiw	r26, 0x2c	; 44
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	b7 01       	movw	r22, r14
    1fa8:	a6 01       	movw	r20, r12
    1faa:	95 01       	movw	r18, r10
    1fac:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1fb0:	9b 01       	movw	r18, r22
    1fb2:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1fb4:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1fb8:	7b 01       	movw	r14, r22
    1fba:	8c 01       	movw	r16, r24
    1fbc:	69 81       	ldd	r22, Y+1	; 0x01
    1fbe:	7a 81       	ldd	r23, Y+2	; 0x02
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e7       	ldi	r20, 0x70	; 112
    1fd2:	52 e4       	ldi	r21, 0x42	; 66
    1fd4:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e7       	ldi	r20, 0x70	; 112
    1fde:	52 ec       	ldi	r21, 0xC2	; 194
    1fe0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1fe4:	f4 01       	movw	r30, r8
    1fe6:	25 a5       	ldd	r18, Z+45	; 0x2d
    1fe8:	36 a5       	ldd	r19, Z+46	; 0x2e
    1fea:	47 a5       	ldd	r20, Z+47	; 0x2f
    1fec:	50 a9       	ldd	r21, Z+48	; 0x30
    1fee:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    1ff2:	9b 01       	movw	r18, r22
    1ff4:	ac 01       	movw	r20, r24
    1ff6:	c8 01       	movw	r24, r16
    1ff8:	b7 01       	movw	r22, r14
    1ffa:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    1ffe:	0e 94 40 27 	call	0x4e80	; 0x4e80 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    2002:	a6 01       	movw	r20, r12
    2004:	95 01       	movw	r18, r10
    2006:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    200a:	7b 01       	movw	r14, r22
    200c:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    200e:	c2 01       	movw	r24, r4
    2010:	b1 01       	movw	r22, r2
    2012:	a8 01       	movw	r20, r16
    2014:	97 01       	movw	r18, r14
    2016:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
    201a:	18 16       	cp	r1, r24
    201c:	3c f4       	brge	.+14     	; 0x202c <planner_forward_pass+0x266>
        current->entry_factor = max_entry_factor;
    201e:	d3 01       	movw	r26, r6
    2020:	d1 96       	adiw	r26, 0x31	; 49
    2022:	ed 92       	st	X+, r14
    2024:	fd 92       	st	X+, r15
    2026:	0d 93       	st	X+, r16
    2028:	1c 93       	st	X, r17
    202a:	d4 97       	sbiw	r26, 0x34	; 52
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
}
    202c:	28 96       	adiw	r28, 0x08	; 8
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
    2044:	df 90       	pop	r13
    2046:	cf 90       	pop	r12
    2048:	bf 90       	pop	r11
    204a:	af 90       	pop	r10
    204c:	9f 90       	pop	r9
    204e:	8f 90       	pop	r8
    2050:	7f 90       	pop	r7
    2052:	6f 90       	pop	r6
    2054:	5f 90       	pop	r5
    2056:	4f 90       	pop	r4
    2058:	3f 90       	pop	r3
    205a:	2f 90       	pop	r2
    205c:	08 95       	ret

0000205e <planner_recalculate>:
// be performed using only the one, true constant acceleration, and where no junction jerk is jerkier than 
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
    205e:	2f 92       	push	r2
    2060:	3f 92       	push	r3
    2062:	4f 92       	push	r4
    2064:	5f 92       	push	r5
    2066:	6f 92       	push	r6
    2068:	7f 92       	push	r7
    206a:	8f 92       	push	r8
    206c:	9f 92       	push	r9
    206e:	af 92       	push	r10
    2070:	bf 92       	push	r11
    2072:	cf 92       	push	r12
    2074:	df 92       	push	r13
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	28 97       	sbiw	r28, 0x08	; 8
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
    2092:	80 91 95 03 	lds	r24, 0x0395
    2096:	90 91 96 03 	lds	r25, 0x0396
    209a:	18 2f       	mov	r17, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    209c:	20 91 97 03 	lds	r18, 0x0397
    20a0:	30 91 98 03 	lds	r19, 0x0398
    20a4:	99 27       	eor	r25, r25
    20a6:	87 fd       	sbrc	r24, 7
    20a8:	90 95       	com	r25
    20aa:	82 17       	cp	r24, r18
    20ac:	93 07       	cpc	r25, r19
    20ae:	51 f1       	breq	.+84     	; 0x2104 <planner_recalculate+0xa6>
    20b0:	ee 24       	eor	r14, r14
    20b2:	ff 24       	eor	r15, r15
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    block_index--;
    if(block_index < 0) {
    20b8:	09 e4       	ldi	r16, 0x49	; 73
    20ba:	1a c0       	rjmp	.+52     	; 0x20f0 <planner_recalculate+0x92>
    20bc:	10 02       	muls	r17, r16
    20be:	b0 01       	movw	r22, r0
    20c0:	11 24       	eor	r1, r1
    20c2:	c1 2e       	mov	r12, r17
    20c4:	dd 24       	eor	r13, r13
    20c6:	c7 fc       	sbrc	r12, 7
    20c8:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    20ca:	b8 e2       	ldi	r27, 0x28	; 40
    20cc:	8b 2e       	mov	r8, r27
    20ce:	b2 e0       	ldi	r27, 0x02	; 2
    20d0:	9b 2e       	mov	r9, r27
    20d2:	86 0e       	add	r8, r22
    20d4:	97 1e       	adc	r9, r23
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    20d6:	c4 01       	movw	r24, r8
    20d8:	b7 01       	movw	r22, r14
    20da:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    20de:	80 91 97 03 	lds	r24, 0x0397
    20e2:	90 91 98 03 	lds	r25, 0x0398
    20e6:	8c 15       	cp	r24, r12
    20e8:	9d 05       	cpc	r25, r13
    20ea:	81 f0       	breq	.+32     	; 0x210c <planner_recalculate+0xae>
    20ec:	a7 01       	movw	r20, r14
    20ee:	74 01       	movw	r14, r8
    block_index--;
    20f0:	11 50       	subi	r17, 0x01	; 1
    if(block_index < 0) {
    20f2:	17 ff       	sbrs	r17, 7
    20f4:	e3 cf       	rjmp	.-58     	; 0x20bc <planner_recalculate+0x5e>
    20f6:	14 e0       	ldi	r17, 0x04	; 4
    20f8:	64 e2       	ldi	r22, 0x24	; 36
    20fa:	71 e0       	ldi	r23, 0x01	; 1
    20fc:	84 e0       	ldi	r24, 0x04	; 4
    20fe:	c8 2e       	mov	r12, r24
    2100:	d1 2c       	mov	r13, r1
    2102:	e3 cf       	rjmp	.-58     	; 0x20ca <planner_recalculate+0x6c>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    2104:	88 24       	eor	r8, r8
    2106:	99 24       	eor	r9, r9
    2108:	ee 24       	eor	r14, r14
    210a:	ff 24       	eor	r15, r15
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	b4 01       	movw	r22, r8
    2112:	a7 01       	movw	r20, r14
    2114:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <planner_reverse_pass_kernel>
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
    2118:	80 91 97 03 	lds	r24, 0x0397
    211c:	90 91 98 03 	lds	r25, 0x0398
    2120:	28 2f       	mov	r18, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    2122:	48 2e       	mov	r4, r24
    2124:	55 24       	eor	r5, r5
    2126:	47 fc       	sbrc	r4, 7
    2128:	50 94       	com	r5
    212a:	80 91 95 03 	lds	r24, 0x0395
    212e:	90 91 96 03 	lds	r25, 0x0396
    2132:	48 16       	cp	r4, r24
    2134:	59 06       	cpc	r5, r25
    2136:	09 f4       	brne	.+2      	; 0x213a <planner_recalculate+0xdc>
    2138:	08 c1       	rjmp	.+528    	; 0x234a <__stack+0x14b>
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    213a:	80 91 26 05 	lds	r24, 0x0526
    213e:	90 91 27 05 	lds	r25, 0x0527
    2142:	a0 91 28 05 	lds	r26, 0x0528
    2146:	b0 91 29 05 	lds	r27, 0x0529
    214a:	ac 01       	movw	r20, r24
    214c:	bd 01       	movw	r22, r26
    214e:	70 58       	subi	r23, 0x80	; 128
    2150:	49 83       	std	Y+1, r20	; 0x01
    2152:	5a 83       	std	Y+2, r21	; 0x02
    2154:	6b 83       	std	Y+3, r22	; 0x03
    2156:	7c 83       	std	Y+4, r23	; 0x04
    2158:	22 24       	eor	r2, r2
    215a:	33 24       	eor	r3, r3
    215c:	88 24       	eor	r8, r8
    215e:	99 24       	eor	r9, r9
    2160:	15 c0       	rjmp	.+42     	; 0x218c <planner_recalculate+0x12e>
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    2162:	c2 01       	movw	r24, r4
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	65 e0       	ldi	r22, 0x05	; 5
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    216e:	28 2f       	mov	r18, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    2170:	48 2e       	mov	r4, r24
    2172:	55 24       	eor	r5, r5
    2174:	47 fc       	sbrc	r4, 7
    2176:	50 94       	com	r5
    2178:	80 91 95 03 	lds	r24, 0x0395
    217c:	90 91 96 03 	lds	r25, 0x0396
    2180:	48 16       	cp	r4, r24
    2182:	59 06       	cpc	r5, r25
    2184:	09 f4       	brne	.+2      	; 0x2188 <planner_recalculate+0x12a>
    2186:	79 c0       	rjmp	.+242    	; 0x227a <__stack+0x7b>
    2188:	14 01       	movw	r2, r8
    218a:	43 01       	movw	r8, r6
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    218c:	59 e4       	ldi	r21, 0x49	; 73
    218e:	25 02       	muls	r18, r21
    2190:	30 01       	movw	r6, r0
    2192:	11 24       	eor	r1, r1
    2194:	68 e2       	ldi	r22, 0x28	; 40
    2196:	72 e0       	ldi	r23, 0x02	; 2
    2198:	66 0e       	add	r6, r22
    219a:	77 1e       	adc	r7, r23
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
  if(!current) { return; }
    219c:	81 14       	cp	r8, r1
    219e:	91 04       	cpc	r9, r1
    21a0:	01 f3       	breq	.-64     	; 0x2162 <planner_recalculate+0x104>
  if(previous) {
    21a2:	21 14       	cp	r2, r1
    21a4:	31 04       	cpc	r3, r1
    21a6:	e9 f2       	breq	.-70     	; 0x2162 <planner_recalculate+0x104>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    21a8:	d1 01       	movw	r26, r2
    21aa:	d1 96       	adiw	r26, 0x31	; 49
    21ac:	ed 90       	ld	r14, X+
    21ae:	fd 90       	ld	r15, X+
    21b0:	0d 91       	ld	r16, X+
    21b2:	1c 91       	ld	r17, X
    21b4:	d4 97       	sbiw	r26, 0x34	; 52
    21b6:	d4 01       	movw	r26, r8
    21b8:	d1 96       	adiw	r26, 0x31	; 49
    21ba:	4d 91       	ld	r20, X+
    21bc:	5d 91       	ld	r21, X+
    21be:	6d 91       	ld	r22, X+
    21c0:	7c 91       	ld	r23, X
    21c2:	d4 97       	sbiw	r26, 0x34	; 52
    21c4:	4d 83       	std	Y+5, r20	; 0x05
    21c6:	5e 83       	std	Y+6, r21	; 0x06
    21c8:	6f 83       	std	Y+7, r22	; 0x07
    21ca:	78 87       	std	Y+8, r23	; 0x08
    21cc:	c8 01       	movw	r24, r16
    21ce:	b7 01       	movw	r22, r14
    21d0:	2d 81       	ldd	r18, Y+5	; 0x05
    21d2:	3e 81       	ldd	r19, Y+6	; 0x06
    21d4:	4f 81       	ldd	r20, Y+7	; 0x07
    21d6:	58 85       	ldd	r21, Y+8	; 0x08
    21d8:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    21dc:	88 23       	and	r24, r24
    21de:	0c f6       	brge	.-126    	; 0x2162 <planner_recalculate+0x104>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    21e0:	f4 01       	movw	r30, r8
    21e2:	a1 a4       	ldd	r10, Z+41	; 0x29
    21e4:	b2 a4       	ldd	r11, Z+42	; 0x2a
    21e6:	c3 a4       	ldd	r12, Z+43	; 0x2b
    21e8:	d4 a4       	ldd	r13, Z+44	; 0x2c
    21ea:	c8 01       	movw	r24, r16
    21ec:	b7 01       	movw	r22, r14
    21ee:	a6 01       	movw	r20, r12
    21f0:	95 01       	movw	r18, r10
    21f2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    21f6:	9b 01       	movw	r18, r22
    21f8:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    21fa:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    21fe:	7b 01       	movw	r14, r22
    2200:	8c 01       	movw	r16, r24
    2202:	69 81       	ldd	r22, Y+1	; 0x01
    2204:	7a 81       	ldd	r23, Y+2	; 0x02
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	9b 01       	movw	r18, r22
    220c:	ac 01       	movw	r20, r24
    220e:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e7       	ldi	r20, 0x70	; 112
    2218:	52 e4       	ldi	r21, 0x42	; 66
    221a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e7       	ldi	r20, 0x70	; 112
    2224:	52 ec       	ldi	r21, 0xC2	; 194
    2226:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    222a:	d1 01       	movw	r26, r2
    222c:	9d 96       	adiw	r26, 0x2d	; 45
    222e:	2d 91       	ld	r18, X+
    2230:	3d 91       	ld	r19, X+
    2232:	4d 91       	ld	r20, X+
    2234:	5c 91       	ld	r21, X
    2236:	d0 97       	sbiw	r26, 0x30	; 48
    2238:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    223c:	9b 01       	movw	r18, r22
    223e:	ac 01       	movw	r20, r24
    2240:	c8 01       	movw	r24, r16
    2242:	b7 01       	movw	r22, r14
    2244:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    2248:	0e 94 40 27 	call	0x4e80	; 0x4e80 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    224c:	a6 01       	movw	r20, r12
    224e:	95 01       	movw	r18, r10
    2250:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2254:	7b 01       	movw	r14, r22
    2256:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    2258:	6d 81       	ldd	r22, Y+5	; 0x05
    225a:	7e 81       	ldd	r23, Y+6	; 0x06
    225c:	8f 81       	ldd	r24, Y+7	; 0x07
    225e:	98 85       	ldd	r25, Y+8	; 0x08
    2260:	a8 01       	movw	r20, r16
    2262:	97 01       	movw	r18, r14
    2264:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
    2268:	18 16       	cp	r1, r24
    226a:	0c f0       	brlt	.+2      	; 0x226e <__stack+0x6f>
    226c:	7a cf       	rjmp	.-268    	; 0x2162 <planner_recalculate+0x104>
        current->entry_factor = max_entry_factor;
    226e:	f4 01       	movw	r30, r8
    2270:	e1 aa       	std	Z+49, r14	; 0x31
    2272:	f2 aa       	std	Z+50, r15	; 0x32
    2274:	03 ab       	std	Z+51, r16	; 0x33
    2276:	14 ab       	std	Z+52, r17	; 0x34
    2278:	74 cf       	rjmp	.-280    	; 0x2162 <planner_recalculate+0x104>
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
  if(!current) { return; }
    227a:	61 14       	cp	r6, r1
    227c:	71 04       	cpc	r7, r1
    227e:	09 f4       	brne	.+2      	; 0x2282 <__stack+0x83>
    2280:	64 c0       	rjmp	.+200    	; 0x234a <__stack+0x14b>
  if(previous) {
    2282:	81 14       	cp	r8, r1
    2284:	91 04       	cpc	r9, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <__stack+0x8b>
    2288:	60 c0       	rjmp	.+192    	; 0x234a <__stack+0x14b>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    228a:	d4 01       	movw	r26, r8
    228c:	d1 96       	adiw	r26, 0x31	; 49
    228e:	ed 90       	ld	r14, X+
    2290:	fd 90       	ld	r15, X+
    2292:	0d 91       	ld	r16, X+
    2294:	1c 91       	ld	r17, X
    2296:	d4 97       	sbiw	r26, 0x34	; 52
    2298:	f3 01       	movw	r30, r6
    229a:	21 a8       	ldd	r2, Z+49	; 0x31
    229c:	32 a8       	ldd	r3, Z+50	; 0x32
    229e:	43 a8       	ldd	r4, Z+51	; 0x33
    22a0:	54 a8       	ldd	r5, Z+52	; 0x34
    22a2:	c8 01       	movw	r24, r16
    22a4:	b7 01       	movw	r22, r14
    22a6:	a2 01       	movw	r20, r4
    22a8:	91 01       	movw	r18, r2
    22aa:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	0c f0       	brlt	.+2      	; 0x22b4 <__stack+0xb5>
    22b2:	4b c0       	rjmp	.+150    	; 0x234a <__stack+0x14b>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    22b4:	d3 01       	movw	r26, r6
    22b6:	99 96       	adiw	r26, 0x29	; 41
    22b8:	ad 90       	ld	r10, X+
    22ba:	bd 90       	ld	r11, X+
    22bc:	cd 90       	ld	r12, X+
    22be:	dc 90       	ld	r13, X
    22c0:	9c 97       	sbiw	r26, 0x2c	; 44
    22c2:	c8 01       	movw	r24, r16
    22c4:	b7 01       	movw	r22, r14
    22c6:	a6 01       	movw	r20, r12
    22c8:	95 01       	movw	r18, r10
    22ca:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    22ce:	9b 01       	movw	r18, r22
    22d0:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    22d2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    22d6:	7b 01       	movw	r14, r22
    22d8:	8c 01       	movw	r16, r24
    22da:	69 81       	ldd	r22, Y+1	; 0x01
    22dc:	7a 81       	ldd	r23, Y+2	; 0x02
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	9b 01       	movw	r18, r22
    22e4:	ac 01       	movw	r20, r24
    22e6:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e7       	ldi	r20, 0x70	; 112
    22f0:	52 e4       	ldi	r21, 0x42	; 66
    22f2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e7       	ldi	r20, 0x70	; 112
    22fc:	52 ec       	ldi	r21, 0xC2	; 194
    22fe:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    2302:	f4 01       	movw	r30, r8
    2304:	25 a5       	ldd	r18, Z+45	; 0x2d
    2306:	36 a5       	ldd	r19, Z+46	; 0x2e
    2308:	47 a5       	ldd	r20, Z+47	; 0x2f
    230a:	50 a9       	ldd	r21, Z+48	; 0x30
    230c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	c8 01       	movw	r24, r16
    2316:	b7 01       	movw	r22, r14
    2318:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    231c:	0e 94 40 27 	call	0x4e80	; 0x4e80 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    2320:	a6 01       	movw	r20, r12
    2322:	95 01       	movw	r18, r10
    2324:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2328:	7b 01       	movw	r14, r22
    232a:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    232c:	c2 01       	movw	r24, r4
    232e:	b1 01       	movw	r22, r2
    2330:	a8 01       	movw	r20, r16
    2332:	97 01       	movw	r18, r14
    2334:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__gesf2>
    2338:	18 16       	cp	r1, r24
    233a:	3c f4       	brge	.+14     	; 0x234a <__stack+0x14b>
        current->entry_factor = max_entry_factor;
    233c:	d3 01       	movw	r26, r6
    233e:	d1 96       	adiw	r26, 0x31	; 49
    2340:	ed 92       	st	X+, r14
    2342:	fd 92       	st	X+, r15
    2344:	0d 93       	st	X+, r16
    2346:	1c 93       	st	X, r17
    2348:	d4 97       	sbiw	r26, 0x34	; 52

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
    234a:	80 91 97 03 	lds	r24, 0x0397
    234e:	90 91 98 03 	lds	r25, 0x0398
    2352:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2354:	e8 2e       	mov	r14, r24
    2356:	ff 24       	eor	r15, r15
    2358:	e7 fc       	sbrc	r14, 7
    235a:	f0 94       	com	r15
    235c:	80 91 95 03 	lds	r24, 0x0395
    2360:	90 91 96 03 	lds	r25, 0x0396
    2364:	e8 16       	cp	r14, r24
    2366:	f9 06       	cpc	r15, r25
    2368:	09 f4       	brne	.+2      	; 0x236c <__stack+0x16d>
    236a:	61 c0       	rjmp	.+194    	; 0x242e <__stack+0x22f>
    236c:	e0 e0       	ldi	r30, 0x00	; 0
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <__stack+0x175>
    2372:	f4 01       	movw	r30, r8
    current = next;
    next = &block_buffer[block_index];
    2374:	b9 e4       	ldi	r27, 0x49	; 73
    2376:	2b 02       	muls	r18, r27
    2378:	40 01       	movw	r8, r0
    237a:	11 24       	eor	r1, r1
    237c:	48 e2       	ldi	r20, 0x28	; 40
    237e:	52 e0       	ldi	r21, 0x02	; 2
    2380:	84 0e       	add	r8, r20
    2382:	95 1e       	adc	r9, r21
    if (current) {
    2384:	30 97       	sbiw	r30, 0x00	; 0
    2386:	71 f0       	breq	.+28     	; 0x23a4 <__stack+0x1a5>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    2388:	41 a9       	ldd	r20, Z+49	; 0x31
    238a:	52 a9       	ldd	r21, Z+50	; 0x32
    238c:	63 a9       	ldd	r22, Z+51	; 0x33
    238e:	74 a9       	ldd	r23, Z+52	; 0x34
    2390:	d4 01       	movw	r26, r8
    2392:	d1 96       	adiw	r26, 0x31	; 49
    2394:	0d 91       	ld	r16, X+
    2396:	1d 91       	ld	r17, X+
    2398:	2d 91       	ld	r18, X+
    239a:	3c 91       	ld	r19, X
    239c:	d4 97       	sbiw	r26, 0x34	; 52
    239e:	cf 01       	movw	r24, r30
    23a0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    23a4:	c7 01       	movw	r24, r14
    23a6:	01 96       	adiw	r24, 0x01	; 1
    23a8:	65 e0       	ldi	r22, 0x05	; 5
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    23b0:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    23b2:	e8 2e       	mov	r14, r24
    23b4:	ff 24       	eor	r15, r15
    23b6:	e7 fc       	sbrc	r14, 7
    23b8:	f0 94       	com	r15
    23ba:	80 91 95 03 	lds	r24, 0x0395
    23be:	90 91 96 03 	lds	r25, 0x0396
    23c2:	e8 16       	cp	r14, r24
    23c4:	f9 06       	cpc	r15, r25
    23c6:	a9 f6       	brne	.-86     	; 0x2372 <__stack+0x173>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    23c8:	f4 01       	movw	r30, r8
    23ca:	c1 a8       	ldd	r12, Z+49	; 0x31
    23cc:	d2 a8       	ldd	r13, Z+50	; 0x32
    23ce:	e3 a8       	ldd	r14, Z+51	; 0x33
    23d0:	f4 a8       	ldd	r15, Z+52	; 0x34
    23d2:	60 91 2a 05 	lds	r22, 0x052A
    23d6:	70 91 2b 05 	lds	r23, 0x052B
    23da:	80 91 2c 05 	lds	r24, 0x052C
    23de:	90 91 2d 05 	lds	r25, 0x052D
    23e2:	21 a5       	ldd	r18, Z+41	; 0x29
    23e4:	32 a5       	ldd	r19, Z+42	; 0x2a
    23e6:	43 a5       	ldd	r20, Z+43	; 0x2b
    23e8:	54 a5       	ldd	r21, Z+44	; 0x2c
    23ea:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    23ee:	8b 01       	movw	r16, r22
    23f0:	9c 01       	movw	r18, r24
    23f2:	c4 01       	movw	r24, r8
    23f4:	b7 01       	movw	r22, r14
    23f6:	a6 01       	movw	r20, r12
    23f8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <calculate_trapezoid_for_block>

void planner_recalculate() {     
  planner_reverse_pass();
  planner_forward_pass();
  planner_recalculate_trapezoids();
}
    23fc:	28 96       	adiw	r28, 0x08	; 8
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	ff 90       	pop	r15
    2412:	ef 90       	pop	r14
    2414:	df 90       	pop	r13
    2416:	cf 90       	pop	r12
    2418:	bf 90       	pop	r11
    241a:	af 90       	pop	r10
    241c:	9f 90       	pop	r9
    241e:	8f 90       	pop	r8
    2420:	7f 90       	pop	r7
    2422:	6f 90       	pop	r6
    2424:	5f 90       	pop	r5
    2426:	4f 90       	pop	r4
    2428:	3f 90       	pop	r3
    242a:	2f 90       	pop	r2
    242c:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    242e:	88 24       	eor	r8, r8
    2430:	99 24       	eor	r9, r9
    2432:	ca cf       	rjmp	.-108    	; 0x23c8 <__stack+0x1c9>

00002434 <plan_buffer_line>:


// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
    2434:	2f 92       	push	r2
    2436:	3f 92       	push	r3
    2438:	4f 92       	push	r4
    243a:	5f 92       	push	r5
    243c:	6f 92       	push	r6
    243e:	7f 92       	push	r7
    2440:	8f 92       	push	r8
    2442:	9f 92       	push	r9
    2444:	af 92       	push	r10
    2446:	bf 92       	push	r11
    2448:	cf 92       	push	r12
    244a:	df 92       	push	r13
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	c4 55       	subi	r28, 0x54	; 84
    245e:	d0 40       	sbci	r29, 0x00	; 0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	2b 96       	adiw	r28, 0x0b	; 11
    246c:	2c af       	std	Y+60, r18	; 0x3c
    246e:	3d af       	std	Y+61, r19	; 0x3d
    2470:	4e af       	std	Y+62, r20	; 0x3e
    2472:	5f af       	std	Y+63, r21	; 0x3f
    2474:	2b 97       	sbiw	r28, 0x0b	; 11
    2476:	2f 96       	adiw	r28, 0x0f	; 15
    2478:	ec ae       	std	Y+60, r14	; 0x3c
    247a:	fd ae       	std	Y+61, r15	; 0x3d
    247c:	0e af       	std	Y+62, r16	; 0x3e
    247e:	1f af       	std	Y+63, r17	; 0x3f
    2480:	2f 97       	sbiw	r28, 0x0f	; 15
    2482:	63 96       	adiw	r28, 0x13	; 19
    2484:	ac ae       	std	Y+60, r10	; 0x3c
    2486:	bd ae       	std	Y+61, r11	; 0x3d
    2488:	ce ae       	std	Y+62, r12	; 0x3e
    248a:	df ae       	std	Y+63, r13	; 0x3f
    248c:	63 97       	sbiw	r28, 0x13	; 19
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    248e:	20 91 08 05 	lds	r18, 0x0508
    2492:	30 91 09 05 	lds	r19, 0x0509
    2496:	40 91 0a 05 	lds	r20, 0x050A
    249a:	50 91 0b 05 	lds	r21, 0x050B
    249e:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    24a2:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    24a6:	7b 01       	movw	r14, r22
    24a8:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    24aa:	20 91 0c 05 	lds	r18, 0x050C
    24ae:	30 91 0d 05 	lds	r19, 0x050D
    24b2:	40 91 0e 05 	lds	r20, 0x050E
    24b6:	50 91 0f 05 	lds	r21, 0x050F
    24ba:	27 96       	adiw	r28, 0x07	; 7
    24bc:	2c af       	std	Y+60, r18	; 0x3c
    24be:	3d af       	std	Y+61, r19	; 0x3d
    24c0:	4e af       	std	Y+62, r20	; 0x3e
    24c2:	5f af       	std	Y+63, r21	; 0x3f
    24c4:	27 97       	sbiw	r28, 0x07	; 7
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    24c6:	20 90 10 05 	lds	r2, 0x0510
    24ca:	30 90 11 05 	lds	r3, 0x0511
    24ce:	40 90 12 05 	lds	r4, 0x0512
    24d2:	50 90 13 05 	lds	r5, 0x0513
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    24d6:	60 90 14 05 	lds	r6, 0x0514
    24da:	70 90 15 05 	lds	r7, 0x0515
    24de:	80 90 16 05 	lds	r8, 0x0516
    24e2:	90 90 17 05 	lds	r9, 0x0517
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    24e6:	80 91 95 03 	lds	r24, 0x0395
    24ea:	90 91 96 03 	lds	r25, 0x0396
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	65 e0       	ldi	r22, 0x05	; 5
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    24f8:	64 96       	adiw	r28, 0x14	; 20
    24fa:	8f af       	std	Y+63, r24	; 0x3f
    24fc:	64 97       	sbiw	r28, 0x14	; 20
    24fe:	65 96       	adiw	r28, 0x15	; 21
    2500:	9f af       	std	Y+63, r25	; 0x3f
    2502:	65 97       	sbiw	r28, 0x15	; 21
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    2504:	20 91 97 03 	lds	r18, 0x0397
    2508:	30 91 98 03 	lds	r19, 0x0398
    250c:	65 96       	adiw	r28, 0x15	; 21
    250e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2510:	5f ad       	ldd	r21, Y+63	; 0x3f
    2512:	65 97       	sbiw	r28, 0x15	; 21
    2514:	24 17       	cp	r18, r20
    2516:	35 07       	cpc	r19, r21
    2518:	71 f4       	brne	.+28     	; 0x2536 <plan_buffer_line+0x102>
    251a:	83 b7       	in	r24, 0x33	; 51
    251c:	81 60       	ori	r24, 0x01	; 1
    251e:	83 bf       	out	0x33, r24	; 51
    2520:	88 95       	sleep
    2522:	83 b7       	in	r24, 0x33	; 51
    2524:	8e 7f       	andi	r24, 0xFE	; 254
    2526:	83 bf       	out	0x33, r24	; 51
    2528:	80 91 97 03 	lds	r24, 0x0397
    252c:	90 91 98 03 	lds	r25, 0x0398
    2530:	82 17       	cp	r24, r18
    2532:	93 07       	cpc	r25, r19
    2534:	91 f3       	breq	.-28     	; 0x251a <plan_buffer_line+0xe6>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    2536:	20 91 95 03 	lds	r18, 0x0395
    253a:	30 91 96 03 	lds	r19, 0x0396
    253e:	c9 01       	movw	r24, r18
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	bc 01       	movw	r22, r24
    254e:	66 0f       	add	r22, r22
    2550:	77 1f       	adc	r23, r23
    2552:	66 0f       	add	r22, r22
    2554:	77 1f       	adc	r23, r23
    2556:	66 0f       	add	r22, r22
    2558:	77 1f       	adc	r23, r23
    255a:	68 0f       	add	r22, r24
    255c:	79 1f       	adc	r23, r25
    255e:	62 0f       	add	r22, r18
    2560:	73 1f       	adc	r23, r19
    2562:	68 5d       	subi	r22, 0xD8	; 216
    2564:	7d 4f       	sbci	r23, 0xFD	; 253
    2566:	23 96       	adiw	r28, 0x03	; 3
    2568:	7f af       	std	Y+63, r23	; 0x3f
    256a:	6e af       	std	Y+62, r22	; 0x3e
    256c:	23 97       	sbiw	r28, 0x03	; 3
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    256e:	80 91 99 03 	lds	r24, 0x0399
    2572:	90 91 9a 03 	lds	r25, 0x039A
    2576:	a0 91 9b 03 	lds	r26, 0x039B
    257a:	b0 91 9c 03 	lds	r27, 0x039C
    257e:	57 01       	movw	r10, r14
    2580:	68 01       	movw	r12, r16
    2582:	a8 1a       	sub	r10, r24
    2584:	b9 0a       	sbc	r11, r25
    2586:	ca 0a       	sbc	r12, r26
    2588:	db 0a       	sbc	r13, r27
    258a:	d7 fc       	sbrc	r13, 7
    258c:	69 c3       	rjmp	.+1746   	; 0x2c60 <plan_buffer_line+0x82c>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    258e:	c4 01       	movw	r24, r8
    2590:	b3 01       	movw	r22, r6
    2592:	63 96       	adiw	r28, 0x13	; 19
    2594:	2c ad       	ldd	r18, Y+60	; 0x3c
    2596:	3d ad       	ldd	r19, Y+61	; 0x3d
    2598:	4e ad       	ldd	r20, Y+62	; 0x3e
    259a:	5f ad       	ldd	r21, Y+63	; 0x3f
    259c:	63 97       	sbiw	r28, 0x13	; 19
    259e:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    25a2:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    25a6:	6d 87       	std	Y+13, r22	; 0x0d
    25a8:	7e 87       	std	Y+14, r23	; 0x0e
    25aa:	8f 87       	std	Y+15, r24	; 0x0f
    25ac:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    25ae:	c2 01       	movw	r24, r4
    25b0:	b1 01       	movw	r22, r2
    25b2:	2f 96       	adiw	r28, 0x0f	; 15
    25b4:	2c ad       	ldd	r18, Y+60	; 0x3c
    25b6:	3d ad       	ldd	r19, Y+61	; 0x3d
    25b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    25ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    25bc:	2f 97       	sbiw	r28, 0x0f	; 15
    25be:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    25c2:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    25c6:	69 87       	std	Y+9, r22	; 0x09
    25c8:	7a 87       	std	Y+10, r23	; 0x0a
    25ca:	8b 87       	std	Y+11, r24	; 0x0b
    25cc:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    25ce:	27 96       	adiw	r28, 0x07	; 7
    25d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    25d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    25d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    25d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    25d8:	27 97       	sbiw	r28, 0x07	; 7
    25da:	2b 96       	adiw	r28, 0x0b	; 11
    25dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    25de:	3d ad       	ldd	r19, Y+61	; 0x3d
    25e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    25e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    25e4:	2b 97       	sbiw	r28, 0x0b	; 11
    25e6:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    25ea:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    25ee:	6d 83       	std	Y+5, r22	; 0x05
    25f0:	7e 83       	std	Y+6, r23	; 0x06
    25f2:	8f 83       	std	Y+7, r24	; 0x07
    25f4:	98 87       	std	Y+8, r25	; 0x08
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    25f6:	e9 82       	std	Y+1, r14	; 0x01
    25f8:	fa 82       	std	Y+2, r15	; 0x02
    25fa:	0b 83       	std	Y+3, r16	; 0x03
    25fc:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    25fe:	23 96       	adiw	r28, 0x03	; 3
    2600:	ae ad       	ldd	r26, Y+62	; 0x3e
    2602:	bf ad       	ldd	r27, Y+63	; 0x3f
    2604:	23 97       	sbiw	r28, 0x03	; 3
    2606:	ad 92       	st	X+, r10
    2608:	bd 92       	st	X+, r11
    260a:	cd 92       	st	X+, r12
    260c:	dc 92       	st	X, r13
    260e:	13 97       	sbiw	r26, 0x03	; 3
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2610:	ad 80       	ldd	r10, Y+5	; 0x05
    2612:	be 80       	ldd	r11, Y+6	; 0x06
    2614:	cf 80       	ldd	r12, Y+7	; 0x07
    2616:	d8 84       	ldd	r13, Y+8	; 0x08
    2618:	80 91 9d 03 	lds	r24, 0x039D
    261c:	90 91 9e 03 	lds	r25, 0x039E
    2620:	a0 91 9f 03 	lds	r26, 0x039F
    2624:	b0 91 a0 03 	lds	r27, 0x03A0
    2628:	a6 01       	movw	r20, r12
    262a:	95 01       	movw	r18, r10
    262c:	28 1b       	sub	r18, r24
    262e:	39 0b       	sbc	r19, r25
    2630:	4a 0b       	sbc	r20, r26
    2632:	5b 0b       	sbc	r21, r27
    2634:	da 01       	movw	r26, r20
    2636:	c9 01       	movw	r24, r18
    2638:	57 fd       	sbrc	r21, 7
    263a:	0a c3       	rjmp	.+1556   	; 0x2c50 <plan_buffer_line+0x81c>
    263c:	23 96       	adiw	r28, 0x03	; 3
    263e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2640:	ff ad       	ldd	r31, Y+63	; 0x3f
    2642:	23 97       	sbiw	r28, 0x03	; 3
    2644:	84 83       	std	Z+4, r24	; 0x04
    2646:	95 83       	std	Z+5, r25	; 0x05
    2648:	a6 83       	std	Z+6, r26	; 0x06
    264a:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    264c:	69 84       	ldd	r6, Y+9	; 0x09
    264e:	7a 84       	ldd	r7, Y+10	; 0x0a
    2650:	8b 84       	ldd	r8, Y+11	; 0x0b
    2652:	9c 84       	ldd	r9, Y+12	; 0x0c
    2654:	80 91 a1 03 	lds	r24, 0x03A1
    2658:	90 91 a2 03 	lds	r25, 0x03A2
    265c:	a0 91 a3 03 	lds	r26, 0x03A3
    2660:	b0 91 a4 03 	lds	r27, 0x03A4
    2664:	a4 01       	movw	r20, r8
    2666:	93 01       	movw	r18, r6
    2668:	28 1b       	sub	r18, r24
    266a:	39 0b       	sbc	r19, r25
    266c:	4a 0b       	sbc	r20, r26
    266e:	5b 0b       	sbc	r21, r27
    2670:	da 01       	movw	r26, r20
    2672:	c9 01       	movw	r24, r18
    2674:	57 fd       	sbrc	r21, 7
    2676:	e0 c2       	rjmp	.+1472   	; 0x2c38 <plan_buffer_line+0x804>
    2678:	80 87       	std	Z+8, r24	; 0x08
    267a:	91 87       	std	Z+9, r25	; 0x09
    267c:	a2 87       	std	Z+10, r26	; 0x0a
    267e:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2680:	2d 84       	ldd	r2, Y+13	; 0x0d
    2682:	3e 84       	ldd	r3, Y+14	; 0x0e
    2684:	4f 84       	ldd	r4, Y+15	; 0x0f
    2686:	58 88       	ldd	r5, Y+16	; 0x10
    2688:	80 91 a5 03 	lds	r24, 0x03A5
    268c:	90 91 a6 03 	lds	r25, 0x03A6
    2690:	a0 91 a7 03 	lds	r26, 0x03A7
    2694:	b0 91 a8 03 	lds	r27, 0x03A8
    2698:	82 01       	movw	r16, r4
    269a:	71 01       	movw	r14, r2
    269c:	e8 1a       	sub	r14, r24
    269e:	f9 0a       	sbc	r15, r25
    26a0:	0a 0b       	sbc	r16, r26
    26a2:	1b 0b       	sbc	r17, r27
    26a4:	17 fd       	sbrc	r17, 7
    26a6:	bf c2       	rjmp	.+1406   	; 0x2c26 <plan_buffer_line+0x7f2>
    26a8:	23 96       	adiw	r28, 0x03	; 3
    26aa:	ae ad       	ldd	r26, Y+62	; 0x3e
    26ac:	bf ad       	ldd	r27, Y+63	; 0x3f
    26ae:	23 97       	sbiw	r28, 0x03	; 3
    26b0:	1c 96       	adiw	r26, 0x0c	; 12
    26b2:	ed 92       	st	X+, r14
    26b4:	fd 92       	st	X+, r15
    26b6:	0d 93       	st	X+, r16
    26b8:	1c 93       	st	X, r17
    26ba:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    26bc:	18 96       	adiw	r26, 0x08	; 8
    26be:	2d 91       	ld	r18, X+
    26c0:	3d 91       	ld	r19, X+
    26c2:	4d 91       	ld	r20, X+
    26c4:	5c 91       	ld	r21, X
    26c6:	1b 97       	sbiw	r26, 0x0b	; 11
    26c8:	fd 01       	movw	r30, r26
    26ca:	84 81       	ldd	r24, Z+4	; 0x04
    26cc:	95 81       	ldd	r25, Z+5	; 0x05
    26ce:	a6 81       	ldd	r26, Z+6	; 0x06
    26d0:	b7 81       	ldd	r27, Z+7	; 0x07
    26d2:	82 17       	cp	r24, r18
    26d4:	93 07       	cpc	r25, r19
    26d6:	a4 07       	cpc	r26, r20
    26d8:	b5 07       	cpc	r27, r21
    26da:	10 f4       	brcc	.+4      	; 0x26e0 <plan_buffer_line+0x2ac>
    26dc:	da 01       	movw	r26, r20
    26de:	c9 01       	movw	r24, r18
    26e0:	23 96       	adiw	r28, 0x03	; 3
    26e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    26e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    26e6:	23 97       	sbiw	r28, 0x03	; 3
    26e8:	20 81       	ld	r18, Z
    26ea:	31 81       	ldd	r19, Z+1	; 0x01
    26ec:	42 81       	ldd	r20, Z+2	; 0x02
    26ee:	53 81       	ldd	r21, Z+3	; 0x03
    26f0:	82 17       	cp	r24, r18
    26f2:	93 07       	cpc	r25, r19
    26f4:	a4 07       	cpc	r26, r20
    26f6:	b5 07       	cpc	r27, r21
    26f8:	10 f4       	brcc	.+4      	; 0x26fe <plan_buffer_line+0x2ca>
    26fa:	da 01       	movw	r26, r20
    26fc:	c9 01       	movw	r24, r18
    26fe:	8e 15       	cp	r24, r14
    2700:	9f 05       	cpc	r25, r15
    2702:	a0 07       	cpc	r26, r16
    2704:	b1 07       	cpc	r27, r17
    2706:	10 f4       	brcc	.+4      	; 0x270c <plan_buffer_line+0x2d8>
    2708:	d8 01       	movw	r26, r16
    270a:	c7 01       	movw	r24, r14
    270c:	23 96       	adiw	r28, 0x03	; 3
    270e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2710:	ff ad       	ldd	r31, Y+63	; 0x3f
    2712:	23 97       	sbiw	r28, 0x03	; 3
    2714:	81 8b       	std	Z+17, r24	; 0x11
    2716:	92 8b       	std	Z+18, r25	; 0x12
    2718:	a3 8b       	std	Z+19, r26	; 0x13
    271a:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	a1 05       	cpc	r26, r1
    2720:	b1 05       	cpc	r27, r1
    2722:	d1 f4       	brne	.+52     	; 0x2758 <plan_buffer_line+0x324>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    2724:	cc 5a       	subi	r28, 0xAC	; 172
    2726:	df 4f       	sbci	r29, 0xFF	; 255
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	1f 91       	pop	r17
    2738:	0f 91       	pop	r16
    273a:	ff 90       	pop	r15
    273c:	ef 90       	pop	r14
    273e:	df 90       	pop	r13
    2740:	cf 90       	pop	r12
    2742:	bf 90       	pop	r11
    2744:	af 90       	pop	r10
    2746:	9f 90       	pop	r9
    2748:	8f 90       	pop	r8
    274a:	7f 90       	pop	r7
    274c:	6f 90       	pop	r6
    274e:	5f 90       	pop	r5
    2750:	4f 90       	pop	r4
    2752:	3f 90       	pop	r3
    2754:	2f 90       	pop	r2
    2756:	08 95       	ret
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2758:	29 81       	ldd	r18, Y+1	; 0x01
    275a:	3a 81       	ldd	r19, Y+2	; 0x02
    275c:	4b 81       	ldd	r20, Y+3	; 0x03
    275e:	5c 81       	ldd	r21, Y+4	; 0x04
    2760:	29 a7       	std	Y+41, r18	; 0x29
    2762:	3a a7       	std	Y+42, r19	; 0x2a
    2764:	4b a7       	std	Y+43, r20	; 0x2b
    2766:	5c a7       	std	Y+44, r21	; 0x2c
    2768:	40 91 99 03 	lds	r20, 0x0399
    276c:	50 91 9a 03 	lds	r21, 0x039A
    2770:	60 91 9b 03 	lds	r22, 0x039B
    2774:	70 91 9c 03 	lds	r23, 0x039C
    2778:	4d a7       	std	Y+45, r20	; 0x2d
    277a:	5e a7       	std	Y+46, r21	; 0x2e
    277c:	6f a7       	std	Y+47, r22	; 0x2f
    277e:	78 ab       	std	Y+48, r23	; 0x30
    2780:	69 a5       	ldd	r22, Y+41	; 0x29
    2782:	7a a5       	ldd	r23, Y+42	; 0x2a
    2784:	8b a5       	ldd	r24, Y+43	; 0x2b
    2786:	9c a5       	ldd	r25, Y+44	; 0x2c
    2788:	2d a5       	ldd	r18, Y+45	; 0x2d
    278a:	3e a5       	ldd	r19, Y+46	; 0x2e
    278c:	4f a5       	ldd	r20, Y+47	; 0x2f
    278e:	58 a9       	ldd	r21, Y+48	; 0x30
    2790:	62 1b       	sub	r22, r18
    2792:	73 0b       	sbc	r23, r19
    2794:	84 0b       	sbc	r24, r20
    2796:	95 0b       	sbc	r25, r21
    2798:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    279c:	20 91 08 05 	lds	r18, 0x0508
    27a0:	30 91 09 05 	lds	r19, 0x0509
    27a4:	40 91 0a 05 	lds	r20, 0x050A
    27a8:	50 91 0b 05 	lds	r21, 0x050B
    27ac:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    27b0:	21 96       	adiw	r28, 0x01	; 1
    27b2:	6c af       	std	Y+60, r22	; 0x3c
    27b4:	7d af       	std	Y+61, r23	; 0x3d
    27b6:	8e af       	std	Y+62, r24	; 0x3e
    27b8:	9f af       	std	Y+63, r25	; 0x3f
    27ba:	21 97       	sbiw	r28, 0x01	; 1
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    27bc:	ad a2       	std	Y+37, r10	; 0x25
    27be:	be a2       	std	Y+38, r11	; 0x26
    27c0:	cf a2       	std	Y+39, r12	; 0x27
    27c2:	d8 a6       	std	Y+40, r13	; 0x28
    27c4:	40 91 9d 03 	lds	r20, 0x039D
    27c8:	50 91 9e 03 	lds	r21, 0x039E
    27cc:	60 91 9f 03 	lds	r22, 0x039F
    27d0:	70 91 a0 03 	lds	r23, 0x03A0
    27d4:	49 a3       	std	Y+33, r20	; 0x21
    27d6:	5a a3       	std	Y+34, r21	; 0x22
    27d8:	6b a3       	std	Y+35, r22	; 0x23
    27da:	7c a3       	std	Y+36, r23	; 0x24
    27dc:	c6 01       	movw	r24, r12
    27de:	b5 01       	movw	r22, r10
    27e0:	29 a1       	ldd	r18, Y+33	; 0x21
    27e2:	3a a1       	ldd	r19, Y+34	; 0x22
    27e4:	4b a1       	ldd	r20, Y+35	; 0x23
    27e6:	5c a1       	ldd	r21, Y+36	; 0x24
    27e8:	62 1b       	sub	r22, r18
    27ea:	73 0b       	sbc	r23, r19
    27ec:	84 0b       	sbc	r24, r20
    27ee:	95 0b       	sbc	r25, r21
    27f0:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    27f4:	20 91 0c 05 	lds	r18, 0x050C
    27f8:	30 91 0d 05 	lds	r19, 0x050D
    27fc:	40 91 0e 05 	lds	r20, 0x050E
    2800:	50 91 0f 05 	lds	r21, 0x050F
    2804:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2808:	69 af       	std	Y+57, r22	; 0x39
    280a:	7a af       	std	Y+58, r23	; 0x3a
    280c:	8b af       	std	Y+59, r24	; 0x3b
    280e:	9c af       	std	Y+60, r25	; 0x3c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    2810:	6d 8e       	std	Y+29, r6	; 0x1d
    2812:	7e 8e       	std	Y+30, r7	; 0x1e
    2814:	8f 8e       	std	Y+31, r8	; 0x1f
    2816:	98 a2       	std	Y+32, r9	; 0x20
    2818:	40 91 a1 03 	lds	r20, 0x03A1
    281c:	50 91 a2 03 	lds	r21, 0x03A2
    2820:	60 91 a3 03 	lds	r22, 0x03A3
    2824:	70 91 a4 03 	lds	r23, 0x03A4
    2828:	49 8f       	std	Y+25, r20	; 0x19
    282a:	5a 8f       	std	Y+26, r21	; 0x1a
    282c:	6b 8f       	std	Y+27, r22	; 0x1b
    282e:	7c 8f       	std	Y+28, r23	; 0x1c
    2830:	c4 01       	movw	r24, r8
    2832:	b3 01       	movw	r22, r6
    2834:	29 8d       	ldd	r18, Y+25	; 0x19
    2836:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2838:	4b 8d       	ldd	r20, Y+27	; 0x1b
    283a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    283c:	62 1b       	sub	r22, r18
    283e:	73 0b       	sbc	r23, r19
    2840:	84 0b       	sbc	r24, r20
    2842:	95 0b       	sbc	r25, r21
    2844:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    2848:	20 91 10 05 	lds	r18, 0x0510
    284c:	30 91 11 05 	lds	r19, 0x0511
    2850:	40 91 12 05 	lds	r20, 0x0512
    2854:	50 91 13 05 	lds	r21, 0x0513
    2858:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    285c:	6d ab       	std	Y+53, r22	; 0x35
    285e:	7e ab       	std	Y+54, r23	; 0x36
    2860:	8f ab       	std	Y+55, r24	; 0x37
    2862:	98 af       	std	Y+56, r25	; 0x38
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2864:	2d 8a       	std	Y+21, r2	; 0x15
    2866:	3e 8a       	std	Y+22, r3	; 0x16
    2868:	4f 8a       	std	Y+23, r4	; 0x17
    286a:	58 8e       	std	Y+24, r5	; 0x18
    286c:	40 91 a5 03 	lds	r20, 0x03A5
    2870:	50 91 a6 03 	lds	r21, 0x03A6
    2874:	60 91 a7 03 	lds	r22, 0x03A7
    2878:	70 91 a8 03 	lds	r23, 0x03A8
    287c:	49 8b       	std	Y+17, r20	; 0x11
    287e:	5a 8b       	std	Y+18, r21	; 0x12
    2880:	6b 8b       	std	Y+19, r22	; 0x13
    2882:	7c 8b       	std	Y+20, r23	; 0x14
    2884:	c2 01       	movw	r24, r4
    2886:	b1 01       	movw	r22, r2
    2888:	29 89       	ldd	r18, Y+17	; 0x11
    288a:	3a 89       	ldd	r19, Y+18	; 0x12
    288c:	4b 89       	ldd	r20, Y+19	; 0x13
    288e:	5c 89       	ldd	r21, Y+20	; 0x14
    2890:	62 1b       	sub	r22, r18
    2892:	73 0b       	sbc	r23, r19
    2894:	84 0b       	sbc	r24, r20
    2896:	95 0b       	sbc	r25, r21
    2898:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    289c:	20 91 14 05 	lds	r18, 0x0514
    28a0:	30 91 15 05 	lds	r19, 0x0515
    28a4:	40 91 16 05 	lds	r20, 0x0516
    28a8:	50 91 17 05 	lds	r21, 0x0517
    28ac:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    28b0:	69 ab       	std	Y+49, r22	; 0x31
    28b2:	7a ab       	std	Y+50, r23	; 0x32
    28b4:	8b ab       	std	Y+51, r24	; 0x33
    28b6:	9c ab       	std	Y+52, r25	; 0x34
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    28b8:	21 96       	adiw	r28, 0x01	; 1
    28ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    28bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    28be:	8e ad       	ldd	r24, Y+62	; 0x3e
    28c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    28c2:	21 97       	sbiw	r28, 0x01	; 1
    28c4:	0e 94 7e 27 	call	0x4efc	; 0x4efc <square>
    28c8:	3b 01       	movw	r6, r22
    28ca:	4c 01       	movw	r8, r24
    28cc:	69 ad       	ldd	r22, Y+57	; 0x39
    28ce:	7a ad       	ldd	r23, Y+58	; 0x3a
    28d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    28d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    28d4:	0e 94 7e 27 	call	0x4efc	; 0x4efc <square>
    28d8:	7b 01       	movw	r14, r22
    28da:	8c 01       	movw	r16, r24
    28dc:	6d a9       	ldd	r22, Y+53	; 0x35
    28de:	7e a9       	ldd	r23, Y+54	; 0x36
    28e0:	8f a9       	ldd	r24, Y+55	; 0x37
    28e2:	98 ad       	ldd	r25, Y+56	; 0x38
    28e4:	0e 94 7e 27 	call	0x4efc	; 0x4efc <square>
    28e8:	5b 01       	movw	r10, r22
    28ea:	6c 01       	movw	r12, r24
    28ec:	69 a9       	ldd	r22, Y+49	; 0x31
    28ee:	7a a9       	ldd	r23, Y+50	; 0x32
    28f0:	8b a9       	ldd	r24, Y+51	; 0x33
    28f2:	9c a9       	ldd	r25, Y+52	; 0x34
    28f4:	0e 94 7e 27 	call	0x4efc	; 0x4efc <square>
    28f8:	1b 01       	movw	r2, r22
    28fa:	2c 01       	movw	r4, r24
    28fc:	c4 01       	movw	r24, r8
    28fe:	b3 01       	movw	r22, r6
    2900:	a8 01       	movw	r20, r16
    2902:	97 01       	movw	r18, r14
    2904:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    2908:	a6 01       	movw	r20, r12
    290a:	95 01       	movw	r18, r10
    290c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    2910:	a2 01       	movw	r20, r4
    2912:	91 01       	movw	r18, r2
    2914:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__addsf3>
    2918:	0e 94 40 27 	call	0x4e80	; 0x4e80 <sqrt>
    291c:	23 96       	adiw	r28, 0x03	; 3
    291e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2920:	bf ad       	ldd	r27, Y+63	; 0x3f
    2922:	23 97       	sbiw	r28, 0x03	; 3
    2924:	9d 96       	adiw	r26, 0x2d	; 45
    2926:	6d 93       	st	X+, r22
    2928:	7d 93       	st	X+, r23
    292a:	8d 93       	st	X+, r24
    292c:	9c 93       	st	X, r25
    292e:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    2930:	e0 96       	adiw	r28, 0x30	; 48
    2932:	ee ad       	ldd	r30, Y+62	; 0x3e
    2934:	ff ad       	ldd	r31, Y+63	; 0x3f
    2936:	e0 97       	sbiw	r28, 0x30	; 48
    2938:	ef 2b       	or	r30, r31
    293a:	09 f4       	brne	.+2      	; 0x293e <plan_buffer_line+0x50a>
    293c:	9a c1       	rjmp	.+820    	; 0x2c72 <plan_buffer_line+0x83e>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    293e:	60 ec       	ldi	r22, 0xC0	; 192
    2940:	71 ee       	ldi	r23, 0xE1	; 225
    2942:	84 e6       	ldi	r24, 0x64	; 100
    2944:	9c e4       	ldi	r25, 0x4C	; 76
    2946:	ae 96       	adiw	r28, 0x2e	; 46
    2948:	2c ad       	ldd	r18, Y+60	; 0x3c
    294a:	3d ad       	ldd	r19, Y+61	; 0x3d
    294c:	4e ad       	ldd	r20, Y+62	; 0x3e
    294e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2950:	ae 97       	sbiw	r28, 0x2e	; 46
    2952:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2956:	0e 94 56 26 	call	0x4cac	; 0x4cac <lround>
    295a:	ac 01       	movw	r20, r24
    295c:	cb 01       	movw	r24, r22
    295e:	da 01       	movw	r26, r20
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2964:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__floatunsisf>
    2968:	9b 01       	movw	r18, r22
    296a:	ac 01       	movw	r20, r24
    296c:	60 ec       	ldi	r22, 0xC0	; 192
    296e:	71 ee       	ldi	r23, 0xE1	; 225
    2970:	84 e6       	ldi	r24, 0x64	; 100
    2972:	9c e4       	ldi	r25, 0x4C	; 76
    2974:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2978:	7b 01       	movw	r14, r22
    297a:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    297c:	21 96       	adiw	r28, 0x01	; 1
    297e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2980:	7d ad       	ldd	r23, Y+61	; 0x3d
    2982:	8e ad       	ldd	r24, Y+62	; 0x3e
    2984:	9f ad       	ldd	r25, Y+63	; 0x3f
    2986:	21 97       	sbiw	r28, 0x01	; 1
    2988:	a8 01       	movw	r20, r16
    298a:	97 01       	movw	r18, r14
    298c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    2990:	23 96       	adiw	r28, 0x03	; 3
    2992:	ae ad       	ldd	r26, Y+62	; 0x3e
    2994:	bf ad       	ldd	r27, Y+63	; 0x3f
    2996:	23 97       	sbiw	r28, 0x03	; 3
    2998:	59 96       	adiw	r26, 0x19	; 25
    299a:	6d 93       	st	X+, r22
    299c:	7d 93       	st	X+, r23
    299e:	8d 93       	st	X+, r24
    29a0:	9c 93       	st	X, r25
    29a2:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    29a4:	69 ad       	ldd	r22, Y+57	; 0x39
    29a6:	7a ad       	ldd	r23, Y+58	; 0x3a
    29a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    29aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    29ac:	a8 01       	movw	r20, r16
    29ae:	97 01       	movw	r18, r14
    29b0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    29b4:	23 96       	adiw	r28, 0x03	; 3
    29b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    29b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    29ba:	23 97       	sbiw	r28, 0x03	; 3
    29bc:	65 8f       	std	Z+29, r22	; 0x1d
    29be:	76 8f       	std	Z+30, r23	; 0x1e
    29c0:	87 8f       	std	Z+31, r24	; 0x1f
    29c2:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    29c4:	6d a9       	ldd	r22, Y+53	; 0x35
    29c6:	7e a9       	ldd	r23, Y+54	; 0x36
    29c8:	8f a9       	ldd	r24, Y+55	; 0x37
    29ca:	98 ad       	ldd	r25, Y+56	; 0x38
    29cc:	a8 01       	movw	r20, r16
    29ce:	97 01       	movw	r18, r14
    29d0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    29d4:	23 96       	adiw	r28, 0x03	; 3
    29d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    29d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    29da:	23 97       	sbiw	r28, 0x03	; 3
    29dc:	91 96       	adiw	r26, 0x21	; 33
    29de:	6d 93       	st	X+, r22
    29e0:	7d 93       	st	X+, r23
    29e2:	8d 93       	st	X+, r24
    29e4:	9c 93       	st	X, r25
    29e6:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    29e8:	69 a9       	ldd	r22, Y+49	; 0x31
    29ea:	7a a9       	ldd	r23, Y+50	; 0x32
    29ec:	8b a9       	ldd	r24, Y+51	; 0x33
    29ee:	9c a9       	ldd	r25, Y+52	; 0x34
    29f0:	a8 01       	movw	r20, r16
    29f2:	97 01       	movw	r18, r14
    29f4:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    29f8:	23 96       	adiw	r28, 0x03	; 3
    29fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    29fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    29fe:	23 97       	sbiw	r28, 0x03	; 3
    2a00:	65 a3       	std	Z+37, r22	; 0x25
    2a02:	76 a3       	std	Z+38, r23	; 0x26
    2a04:	87 a3       	std	Z+39, r24	; 0x27
    2a06:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    2a08:	65 a5       	ldd	r22, Z+45	; 0x2d
    2a0a:	76 a5       	ldd	r23, Z+46	; 0x2e
    2a0c:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a0e:	90 a9       	ldd	r25, Z+48	; 0x30
    2a10:	a8 01       	movw	r20, r16
    2a12:	97 01       	movw	r18, r14
    2a14:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    2a18:	1b 01       	movw	r2, r22
    2a1a:	2c 01       	movw	r4, r24
    2a1c:	23 96       	adiw	r28, 0x03	; 3
    2a1e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a20:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a22:	23 97       	sbiw	r28, 0x03	; 3
    2a24:	99 96       	adiw	r26, 0x29	; 41
    2a26:	6d 93       	st	X+, r22
    2a28:	7d 93       	st	X+, r23
    2a2a:	8d 93       	st	X+, r24
    2a2c:	9c 93       	st	X, r25
    2a2e:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    2a30:	51 96       	adiw	r26, 0x11	; 17
    2a32:	6d 91       	ld	r22, X+
    2a34:	7d 91       	ld	r23, X+
    2a36:	8d 91       	ld	r24, X+
    2a38:	9c 91       	ld	r25, X
    2a3a:	54 97       	sbiw	r26, 0x14	; 20
    2a3c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    2a40:	5b 01       	movw	r10, r22
    2a42:	6c 01       	movw	r12, r24
    2a44:	a8 01       	movw	r20, r16
    2a46:	97 01       	movw	r18, r14
    2a48:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    2a4c:	0e 94 71 24 	call	0x48e2	; 0x48e2 <ceil>
    2a50:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__fixunssfsi>
    2a54:	3b 01       	movw	r6, r22
    2a56:	4c 01       	movw	r8, r24
    2a58:	23 96       	adiw	r28, 0x03	; 3
    2a5a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a5c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a5e:	23 97       	sbiw	r28, 0x03	; 3
    2a60:	65 8b       	std	Z+21, r22	; 0x15
    2a62:	76 8b       	std	Z+22, r23	; 0x16
    2a64:	87 8b       	std	Z+23, r24	; 0x17
    2a66:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 e0       	ldi	r26, 0x00	; 0
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	81 ab       	std	Z+49, r24	; 0x31
    2a72:	92 ab       	std	Z+50, r25	; 0x32
    2a74:	a3 ab       	std	Z+51, r26	; 0x33
    2a76:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2a78:	60 91 26 05 	lds	r22, 0x0526
    2a7c:	70 91 27 05 	lds	r23, 0x0527
    2a80:	80 91 28 05 	lds	r24, 0x0528
    2a84:	90 91 29 05 	lds	r25, 0x0529
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e7       	ldi	r20, 0x70	; 112
    2a8e:	52 e4       	ldi	r21, 0x42	; 66
    2a90:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e2       	ldi	r20, 0x20	; 32
    2a9a:	52 e4       	ldi	r21, 0x42	; 66
    2a9c:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2aa0:	7b 01       	movw	r14, r22
    2aa2:	8c 01       	movw	r16, r24
    2aa4:	23 96       	adiw	r28, 0x03	; 3
    2aa6:	ae ad       	ldd	r26, Y+62	; 0x3e
    2aa8:	bf ad       	ldd	r27, Y+63	; 0x3f
    2aaa:	23 97       	sbiw	r28, 0x03	; 3
    2aac:	9d 96       	adiw	r26, 0x2d	; 45
    2aae:	6d 91       	ld	r22, X+
    2ab0:	7d 91       	ld	r23, X+
    2ab2:	8d 91       	ld	r24, X+
    2ab4:	9c 91       	ld	r25, X
    2ab6:	d0 97       	sbiw	r26, 0x30	; 48
    2ab8:	a6 01       	movw	r20, r12
    2aba:	95 01       	movw	r18, r10
    2abc:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2ac0:	9b 01       	movw	r18, r22
    2ac2:	ac 01       	movw	r20, r24
    2ac4:	c8 01       	movw	r24, r16
    2ac6:	b7 01       	movw	r22, r14
    2ac8:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2acc:	0e 94 71 24 	call	0x48e2	; 0x48e2 <ceil>
    2ad0:	23 96       	adiw	r28, 0x03	; 3
    2ad2:	0e ad       	ldd	r16, Y+62	; 0x3e
    2ad4:	1f ad       	ldd	r17, Y+63	; 0x3f
    2ad6:	23 97       	sbiw	r28, 0x03	; 3
    2ad8:	03 5c       	subi	r16, 0xC3	; 195
    2ada:	1f 4f       	sbci	r17, 0xFF	; 255
    2adc:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	60 83       	st	Z, r22
    2ae4:	71 83       	std	Z+1, r23	; 0x01
    2ae6:	82 83       	std	Z+2, r24	; 0x02
    2ae8:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    2aea:	20 91 a9 03 	lds	r18, 0x03A9
    2aee:	22 23       	and	r18, r18
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <plan_buffer_line+0x6c0>
    2af2:	ce c0       	rjmp	.+412    	; 0x2c90 <plan_buffer_line+0x85c>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    2af4:	23 96       	adiw	r28, 0x03	; 3
    2af6:	ae ad       	ldd	r26, Y+62	; 0x3e
    2af8:	bf ad       	ldd	r27, Y+63	; 0x3f
    2afa:	23 97       	sbiw	r28, 0x03	; 3
    2afc:	d5 96       	adiw	r26, 0x35	; 53
    2afe:	6d 92       	st	X+, r6
    2b00:	7d 92       	st	X+, r7
    2b02:	8d 92       	st	X+, r8
    2b04:	9c 92       	st	X, r9
    2b06:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    2b08:	fd 01       	movw	r30, r26
    2b0a:	61 ae       	std	Z+57, r6	; 0x39
    2b0c:	72 ae       	std	Z+58, r7	; 0x3a
    2b0e:	83 ae       	std	Z+59, r8	; 0x3b
    2b10:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    2b12:	ef 5b       	subi	r30, 0xBF	; 191
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	10 82       	st	Z, r1
    2b18:	11 82       	std	Z+1, r1	; 0x01
    2b1a:	12 82       	std	Z+2, r1	; 0x02
    2b1c:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    2b1e:	ad 01       	movw	r20, r26
    2b20:	4b 5b       	subi	r20, 0xBB	; 187
    2b22:	5f 4f       	sbci	r21, 0xFF	; 255
    2b24:	fd 01       	movw	r30, r26
    2b26:	81 89       	ldd	r24, Z+17	; 0x11
    2b28:	92 89       	ldd	r25, Z+18	; 0x12
    2b2a:	a3 89       	ldd	r26, Z+19	; 0x13
    2b2c:	b4 89       	ldd	r27, Z+20	; 0x14
    2b2e:	fa 01       	movw	r30, r20
    2b30:	80 83       	st	Z, r24
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	a2 83       	std	Z+2, r26	; 0x02
    2b36:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    2b38:	d8 01       	movw	r26, r16
    2b3a:	1d 92       	st	X+, r1
    2b3c:	1d 92       	st	X+, r1
    2b3e:	1d 92       	st	X+, r1
    2b40:	1c 92       	st	X, r1
    2b42:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    2b44:	23 96       	adiw	r28, 0x03	; 3
    2b46:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b48:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b4a:	23 97       	sbiw	r28, 0x03	; 3
    2b4c:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    2b4e:	4d a5       	ldd	r20, Y+45	; 0x2d
    2b50:	5e a5       	ldd	r21, Y+46	; 0x2e
    2b52:	6f a5       	ldd	r22, Y+47	; 0x2f
    2b54:	78 a9       	ldd	r23, Y+48	; 0x30
    2b56:	89 a5       	ldd	r24, Y+41	; 0x29
    2b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5a:	ab a5       	ldd	r26, Y+43	; 0x2b
    2b5c:	bc a5       	ldd	r27, Y+44	; 0x2c
    2b5e:	84 17       	cp	r24, r20
    2b60:	95 07       	cpc	r25, r21
    2b62:	a6 07       	cpc	r26, r22
    2b64:	b7 07       	cpc	r27, r23
    2b66:	14 f4       	brge	.+4      	; 0x2b6c <plan_buffer_line+0x738>
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2b6c:	4d a1       	ldd	r20, Y+37	; 0x25
    2b6e:	5e a1       	ldd	r21, Y+38	; 0x26
    2b70:	6f a1       	ldd	r22, Y+39	; 0x27
    2b72:	78 a5       	ldd	r23, Y+40	; 0x28
    2b74:	89 a1       	ldd	r24, Y+33	; 0x21
    2b76:	9a a1       	ldd	r25, Y+34	; 0x22
    2b78:	ab a1       	ldd	r26, Y+35	; 0x23
    2b7a:	bc a1       	ldd	r27, Y+36	; 0x24
    2b7c:	48 17       	cp	r20, r24
    2b7e:	59 07       	cpc	r21, r25
    2b80:	6a 07       	cpc	r22, r26
    2b82:	7b 07       	cpc	r23, r27
    2b84:	54 f4       	brge	.+20     	; 0x2b9a <plan_buffer_line+0x766>
    2b86:	23 96       	adiw	r28, 0x03	; 3
    2b88:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b8a:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b8c:	23 97       	sbiw	r28, 0x03	; 3
    2b8e:	50 96       	adiw	r26, 0x10	; 16
    2b90:	8c 91       	ld	r24, X
    2b92:	50 97       	sbiw	r26, 0x10	; 16
    2b94:	88 60       	ori	r24, 0x08	; 8
    2b96:	50 96       	adiw	r26, 0x10	; 16
    2b98:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2b9a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2b9c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2b9e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ba0:	78 a1       	ldd	r23, Y+32	; 0x20
    2ba2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ba4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ba6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2ba8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2baa:	48 17       	cp	r20, r24
    2bac:	59 07       	cpc	r21, r25
    2bae:	6a 07       	cpc	r22, r26
    2bb0:	7b 07       	cpc	r23, r27
    2bb2:	54 f4       	brge	.+20     	; 0x2bc8 <plan_buffer_line+0x794>
    2bb4:	23 96       	adiw	r28, 0x03	; 3
    2bb6:	ae ad       	ldd	r26, Y+62	; 0x3e
    2bb8:	bf ad       	ldd	r27, Y+63	; 0x3f
    2bba:	23 97       	sbiw	r28, 0x03	; 3
    2bbc:	50 96       	adiw	r26, 0x10	; 16
    2bbe:	8c 91       	ld	r24, X
    2bc0:	50 97       	sbiw	r26, 0x10	; 16
    2bc2:	80 64       	ori	r24, 0x40	; 64
    2bc4:	50 96       	adiw	r26, 0x10	; 16
    2bc6:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2bc8:	4d 89       	ldd	r20, Y+21	; 0x15
    2bca:	5e 89       	ldd	r21, Y+22	; 0x16
    2bcc:	6f 89       	ldd	r22, Y+23	; 0x17
    2bce:	78 8d       	ldd	r23, Y+24	; 0x18
    2bd0:	89 89       	ldd	r24, Y+17	; 0x11
    2bd2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd4:	ab 89       	ldd	r26, Y+19	; 0x13
    2bd6:	bc 89       	ldd	r27, Y+20	; 0x14
    2bd8:	48 17       	cp	r20, r24
    2bda:	59 07       	cpc	r21, r25
    2bdc:	6a 07       	cpc	r22, r26
    2bde:	7b 07       	cpc	r23, r27
    2be0:	54 f4       	brge	.+20     	; 0x2bf6 <plan_buffer_line+0x7c2>
    2be2:	23 96       	adiw	r28, 0x03	; 3
    2be4:	ae ad       	ldd	r26, Y+62	; 0x3e
    2be6:	bf ad       	ldd	r27, Y+63	; 0x3f
    2be8:	23 97       	sbiw	r28, 0x03	; 3
    2bea:	50 96       	adiw	r26, 0x10	; 16
    2bec:	8c 91       	ld	r24, X
    2bee:	50 97       	sbiw	r26, 0x10	; 16
    2bf0:	80 68       	ori	r24, 0x80	; 128
    2bf2:	50 96       	adiw	r26, 0x10	; 16
    2bf4:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    2bf6:	65 96       	adiw	r28, 0x15	; 21
    2bf8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bfa:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bfc:	65 97       	sbiw	r28, 0x15	; 21
    2bfe:	f0 93 96 03 	sts	0x0396, r31
    2c02:	e0 93 95 03 	sts	0x0395, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    2c06:	a9 e9       	ldi	r26, 0x99	; 153
    2c08:	b3 e0       	ldi	r27, 0x03	; 3
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	31 96       	adiw	r30, 0x01	; 1
    2c0e:	80 e1       	ldi	r24, 0x10	; 16
    2c10:	01 90       	ld	r0, Z+
    2c12:	0d 92       	st	X+, r0
    2c14:	81 50       	subi	r24, 0x01	; 1
    2c16:	e1 f7       	brne	.-8      	; 0x2c10 <plan_buffer_line+0x7dc>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2c18:	22 23       	and	r18, r18
    2c1a:	11 f0       	breq	.+4      	; 0x2c20 <plan_buffer_line+0x7ec>
    2c1c:	0e 94 2f 10 	call	0x205e	; 0x205e <planner_recalculate>
  st_wake_up();
    2c20:	0e 94 1c 1a 	call	0x3438	; 0x3438 <st_wake_up>
    2c24:	7f cd       	rjmp	.-1282   	; 0x2724 <plan_buffer_line+0x2f0>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2c26:	10 95       	com	r17
    2c28:	00 95       	com	r16
    2c2a:	f0 94       	com	r15
    2c2c:	e0 94       	com	r14
    2c2e:	e1 1c       	adc	r14, r1
    2c30:	f1 1c       	adc	r15, r1
    2c32:	01 1d       	adc	r16, r1
    2c34:	11 1d       	adc	r17, r1
    2c36:	38 cd       	rjmp	.-1424   	; 0x26a8 <plan_buffer_line+0x274>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2c38:	b0 95       	com	r27
    2c3a:	a0 95       	com	r26
    2c3c:	90 95       	com	r25
    2c3e:	81 95       	neg	r24
    2c40:	9f 4f       	sbci	r25, 0xFF	; 255
    2c42:	af 4f       	sbci	r26, 0xFF	; 255
    2c44:	bf 4f       	sbci	r27, 0xFF	; 255
    2c46:	23 96       	adiw	r28, 0x03	; 3
    2c48:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c4a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c4c:	23 97       	sbiw	r28, 0x03	; 3
    2c4e:	14 cd       	rjmp	.-1496   	; 0x2678 <plan_buffer_line+0x244>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2c50:	b0 95       	com	r27
    2c52:	a0 95       	com	r26
    2c54:	90 95       	com	r25
    2c56:	81 95       	neg	r24
    2c58:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5a:	af 4f       	sbci	r26, 0xFF	; 255
    2c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c5e:	ee cc       	rjmp	.-1572   	; 0x263c <plan_buffer_line+0x208>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2c60:	d0 94       	com	r13
    2c62:	c0 94       	com	r12
    2c64:	b0 94       	com	r11
    2c66:	a0 94       	com	r10
    2c68:	a1 1c       	adc	r10, r1
    2c6a:	b1 1c       	adc	r11, r1
    2c6c:	c1 1c       	adc	r12, r1
    2c6e:	d1 1c       	adc	r13, r1
    2c70:	8e cc       	rjmp	.-1764   	; 0x258e <plan_buffer_line+0x15a>
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2c72:	ae 96       	adiw	r28, 0x2e	; 46
    2c74:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c76:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c78:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c7c:	ae 97       	sbiw	r28, 0x2e	; 46
    2c7e:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	34 e2       	ldi	r19, 0x24	; 36
    2c86:	44 e7       	ldi	r20, 0x74	; 116
    2c88:	59 e4       	ldi	r21, 0x49	; 73
    2c8a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    2c8e:	63 ce       	rjmp	.-826    	; 0x2956 <plan_buffer_line+0x522>
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
    2c90:	60 91 2a 05 	lds	r22, 0x052A
    2c94:	70 91 2b 05 	lds	r23, 0x052B
    2c98:	80 91 2c 05 	lds	r24, 0x052C
    2c9c:	90 91 2d 05 	lds	r25, 0x052D
    2ca0:	a2 01       	movw	r20, r4
    2ca2:	91 01       	movw	r18, r2
    2ca4:	0e 94 88 24 	call	0x4910	; 0x4910 <__divsf3>
    2ca8:	8b 01       	movw	r16, r22
    2caa:	9c 01       	movw	r18, r24
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    2cac:	23 96       	adiw	r28, 0x03	; 3
    2cae:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cb2:	23 97       	sbiw	r28, 0x03	; 3
    2cb4:	a8 01       	movw	r20, r16
    2cb6:	b9 01       	movw	r22, r18
    2cb8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <calculate_trapezoid_for_block>
    2cbc:	29 81       	ldd	r18, Y+1	; 0x01
    2cbe:	3a 81       	ldd	r19, Y+2	; 0x02
    2cc0:	4b 81       	ldd	r20, Y+3	; 0x03
    2cc2:	5c 81       	ldd	r21, Y+4	; 0x04
    2cc4:	29 a7       	std	Y+41, r18	; 0x29
    2cc6:	3a a7       	std	Y+42, r19	; 0x2a
    2cc8:	4b a7       	std	Y+43, r20	; 0x2b
    2cca:	5c a7       	std	Y+44, r21	; 0x2c
    2ccc:	40 91 99 03 	lds	r20, 0x0399
    2cd0:	50 91 9a 03 	lds	r21, 0x039A
    2cd4:	60 91 9b 03 	lds	r22, 0x039B
    2cd8:	70 91 9c 03 	lds	r23, 0x039C
    2cdc:	4d a7       	std	Y+45, r20	; 0x2d
    2cde:	5e a7       	std	Y+46, r21	; 0x2e
    2ce0:	6f a7       	std	Y+47, r22	; 0x2f
    2ce2:	78 ab       	std	Y+48, r23	; 0x30
    2ce4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ce6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cea:	98 85       	ldd	r25, Y+8	; 0x08
    2cec:	6d a3       	std	Y+37, r22	; 0x25
    2cee:	7e a3       	std	Y+38, r23	; 0x26
    2cf0:	8f a3       	std	Y+39, r24	; 0x27
    2cf2:	98 a7       	std	Y+40, r25	; 0x28
    2cf4:	80 91 9d 03 	lds	r24, 0x039D
    2cf8:	90 91 9e 03 	lds	r25, 0x039E
    2cfc:	a0 91 9f 03 	lds	r26, 0x039F
    2d00:	b0 91 a0 03 	lds	r27, 0x03A0
    2d04:	89 a3       	std	Y+33, r24	; 0x21
    2d06:	9a a3       	std	Y+34, r25	; 0x22
    2d08:	ab a3       	std	Y+35, r26	; 0x23
    2d0a:	bc a3       	std	Y+36, r27	; 0x24
    2d0c:	29 85       	ldd	r18, Y+9	; 0x09
    2d0e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d10:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d12:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d14:	2d 8f       	std	Y+29, r18	; 0x1d
    2d16:	3e 8f       	std	Y+30, r19	; 0x1e
    2d18:	4f 8f       	std	Y+31, r20	; 0x1f
    2d1a:	58 a3       	std	Y+32, r21	; 0x20
    2d1c:	40 91 a1 03 	lds	r20, 0x03A1
    2d20:	50 91 a2 03 	lds	r21, 0x03A2
    2d24:	60 91 a3 03 	lds	r22, 0x03A3
    2d28:	70 91 a4 03 	lds	r23, 0x03A4
    2d2c:	49 8f       	std	Y+25, r20	; 0x19
    2d2e:	5a 8f       	std	Y+26, r21	; 0x1a
    2d30:	6b 8f       	std	Y+27, r22	; 0x1b
    2d32:	7c 8f       	std	Y+28, r23	; 0x1c
    2d34:	6d 85       	ldd	r22, Y+13	; 0x0d
    2d36:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3a:	98 89       	ldd	r25, Y+16	; 0x10
    2d3c:	6d 8b       	std	Y+21, r22	; 0x15
    2d3e:	7e 8b       	std	Y+22, r23	; 0x16
    2d40:	8f 8b       	std	Y+23, r24	; 0x17
    2d42:	98 8f       	std	Y+24, r25	; 0x18
    2d44:	80 91 a5 03 	lds	r24, 0x03A5
    2d48:	90 91 a6 03 	lds	r25, 0x03A6
    2d4c:	a0 91 a7 03 	lds	r26, 0x03A7
    2d50:	b0 91 a8 03 	lds	r27, 0x03A8
    2d54:	89 8b       	std	Y+17, r24	; 0x11
    2d56:	9a 8b       	std	Y+18, r25	; 0x12
    2d58:	ab 8b       	std	Y+19, r26	; 0x13
    2d5a:	bc 8b       	std	Y+20, r27	; 0x14
    2d5c:	20 91 a9 03 	lds	r18, 0x03A9
    2d60:	f1 ce       	rjmp	.-542    	; 0x2b44 <plan_buffer_line+0x710>

00002d62 <sp_process>:
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    2d62:	1f 93       	push	r17
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2d64:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <serialRead>
    2d68:	98 2f       	mov	r25, r24
    2d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d6c:	e1 f0       	breq	.+56     	; 0x2da6 <sp_process+0x44>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    2d6e:	20 91 dc 03 	lds	r18, 0x03DC
    2d72:	22 23       	and	r18, r18
    2d74:	21 f0       	breq	.+8      	; 0x2d7e <sp_process+0x1c>
    2d76:	9a 30       	cpi	r25, 0x0A	; 10
    2d78:	c1 f0       	breq	.+48     	; 0x2daa <sp_process+0x48>
    2d7a:	9d 30       	cpi	r25, 0x0D	; 13
    2d7c:	b1 f0       	breq	.+44     	; 0x2daa <sp_process+0x48>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    2d7e:	91 32       	cpi	r25, 0x21	; 33
    2d80:	8c f3       	brlt	.-30     	; 0x2d64 <sp_process+0x2>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2d82:	89 2f       	mov	r24, r25
    2d84:	81 56       	subi	r24, 0x61	; 97
    2d86:	8a 31       	cpi	r24, 0x1A	; 26
    2d88:	48 f5       	brcc	.+82     	; 0x2ddc <sp_process+0x7a>
      line[char_counter++] = c-'a'+'A';
    2d8a:	e2 2f       	mov	r30, r18
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	e6 55       	subi	r30, 0x56	; 86
    2d90:	fc 4f       	sbci	r31, 0xFC	; 252
    2d92:	90 52       	subi	r25, 0x20	; 32
    2d94:	90 83       	st	Z, r25
    2d96:	2f 5f       	subi	r18, 0xFF	; 255
    2d98:	20 93 dc 03 	sts	0x03DC, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2d9c:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <serialRead>
    2da0:	98 2f       	mov	r25, r24
    2da2:	8f 3f       	cpi	r24, 0xFF	; 255
    2da4:	21 f7       	brne	.-56     	; 0x2d6e <sp_process+0xc>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2da6:	1f 91       	pop	r17
    2da8:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    2daa:	e2 2f       	mov	r30, r18
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	e6 55       	subi	r30, 0x56	; 86
    2db0:	fc 4f       	sbci	r31, 0xFC	; 252
    2db2:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2db4:	8a ea       	ldi	r24, 0xAA	; 170
    2db6:	93 e0       	ldi	r25, 0x03	; 3
    2db8:	0e 94 51 05 	call	0xaa2	; 0xaa2 <gc_execute_line>
    2dbc:	18 2f       	mov	r17, r24
static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code) {

	if( gHomed == FALSE ) {
    2dbe:	80 91 dd 03 	lds	r24, 0x03DD
    2dc2:	88 23       	and	r24, r24
    2dc4:	59 f1       	breq	.+86     	; 0x2e1c <sp_process+0xba>
    	printPgmString(PSTR("Not homed\n\r"));
	}


  switch(status_code) {          
    2dc6:	12 30       	cpi	r17, 0x02	; 2
    2dc8:	79 f1       	breq	.+94     	; 0x2e28 <sp_process+0xc6>
    2dca:	13 30       	cpi	r17, 0x03	; 3
    2dcc:	80 f4       	brcc	.+32     	; 0x2dee <sp_process+0x8c>
    2dce:	11 23       	and	r17, r17
    2dd0:	81 f5       	brne	.+96     	; 0x2e32 <sp_process+0xd0>
    case GCSTATUS_OK:
    printPgmString(PSTR("ok\n\r")); break;
    2dd2:	8a e2       	ldi	r24, 0x2A	; 42
    2dd4:	93 e0       	ldi	r25, 0x03	; 3
    2dd6:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    2dda:	1d c0       	rjmp	.+58     	; 0x2e16 <sp_process+0xb4>
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    2ddc:	e2 2f       	mov	r30, r18
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	e6 55       	subi	r30, 0x56	; 86
    2de2:	fc 4f       	sbci	r31, 0xFC	; 252
    2de4:	90 83       	st	Z, r25
    2de6:	2f 5f       	subi	r18, 0xFF	; 255
    2de8:	20 93 dc 03 	sts	0x03DC, r18
    2dec:	bb cf       	rjmp	.-138    	; 0x2d64 <sp_process+0x2>
	if( gHomed == FALSE ) {
    	printPgmString(PSTR("Not homed\n\r"));
	}


  switch(status_code) {          
    2dee:	13 30       	cpi	r17, 0x03	; 3
    2df0:	61 f1       	breq	.+88     	; 0x2e4a <sp_process+0xe8>
    2df2:	14 30       	cpi	r17, 0x04	; 4
    2df4:	29 f1       	breq	.+74     	; 0x2e40 <sp_process+0xde>
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    printPgmString(PSTR("error: Unsupported statement\n\r")); break;
    case GCSTATUS_FLOATING_POINT_ERROR:
    printPgmString(PSTR("error: Floating point error\n\r")); break;
    default:
    printPgmString(PSTR("error: "));
    2df6:	89 ea       	ldi	r24, 0xA9	; 169
    2df8:	92 e0       	ldi	r25, 0x02	; 2
    2dfa:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    printInteger(status_code);
    2dfe:	61 2f       	mov	r22, r17
    2e00:	70 e0       	ldi	r23, 0x00	; 0
    2e02:	88 27       	eor	r24, r24
    2e04:	77 fd       	sbrc	r23, 7
    2e06:	80 95       	com	r24
    2e08:	98 2f       	mov	r25, r24
    2e0a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <printInteger>
    printPgmString(PSTR("\n\r"));
    2e0e:	86 ea       	ldi	r24, 0xA6	; 166
    2e10:	92 e0       	ldi	r25, 0x02	; 2
    2e12:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2e16:	10 92 dc 03 	sts	0x03DC, r1
    2e1a:	a4 cf       	rjmp	.-184    	; 0x2d64 <sp_process+0x2>
static uint8_t char_counter;

static void status_message(int status_code) {

	if( gHomed == FALSE ) {
    	printPgmString(PSTR("Not homed\n\r"));
    2e1c:	8f e2       	ldi	r24, 0x2F	; 47
    2e1e:	93 e0       	ldi	r25, 0x03	; 3
    2e20:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
	}


  switch(status_code) {          
    2e24:	12 30       	cpi	r17, 0x02	; 2
    2e26:	89 f6       	brne	.-94     	; 0x2dca <sp_process+0x68>
    case GCSTATUS_OK:
    printPgmString(PSTR("ok\n\r")); break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    printPgmString(PSTR("error: Bad number format\n\r")); break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    printPgmString(PSTR("error: Expected command letter\n\r")); break;
    2e28:	8e ee       	ldi	r24, 0xEE	; 238
    2e2a:	92 e0       	ldi	r25, 0x02	; 2
    2e2c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    2e30:	f2 cf       	rjmp	.-28     	; 0x2e16 <sp_process+0xb4>
	if( gHomed == FALSE ) {
    	printPgmString(PSTR("Not homed\n\r"));
	}


  switch(status_code) {          
    2e32:	11 30       	cpi	r17, 0x01	; 1
    2e34:	01 f7       	brne	.-64     	; 0x2df6 <sp_process+0x94>
    case GCSTATUS_OK:
    printPgmString(PSTR("ok\n\r")); break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    printPgmString(PSTR("error: Bad number format\n\r")); break;
    2e36:	8f e0       	ldi	r24, 0x0F	; 15
    2e38:	93 e0       	ldi	r25, 0x03	; 3
    2e3a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    2e3e:	eb cf       	rjmp	.-42     	; 0x2e16 <sp_process+0xb4>
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    printPgmString(PSTR("error: Expected command letter\n\r")); break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    printPgmString(PSTR("error: Unsupported statement\n\r")); break;
    case GCSTATUS_FLOATING_POINT_ERROR:
    printPgmString(PSTR("error: Floating point error\n\r")); break;
    2e40:	81 eb       	ldi	r24, 0xB1	; 177
    2e42:	92 e0       	ldi	r25, 0x02	; 2
    2e44:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    2e48:	e6 cf       	rjmp	.-52     	; 0x2e16 <sp_process+0xb4>
    case GCSTATUS_BAD_NUMBER_FORMAT:
    printPgmString(PSTR("error: Bad number format\n\r")); break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    printPgmString(PSTR("error: Expected command letter\n\r")); break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    printPgmString(PSTR("error: Unsupported statement\n\r")); break;
    2e4a:	8f ec       	ldi	r24, 0xCF	; 207
    2e4c:	92 e0       	ldi	r25, 0x02	; 2
    2e4e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    2e52:	e1 cf       	rjmp	.-62     	; 0x2e16 <sp_process+0xb4>

00002e54 <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    2e54:	60 e0       	ldi	r22, 0x00	; 0
    2e56:	76 e9       	ldi	r23, 0x96	; 150
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <beginSerial>
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
    2e60:	8e e3       	ldi	r24, 0x3E	; 62
    2e62:	93 e0       	ldi	r25, 0x03	; 3
    2e64:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printPgmString(PSTR("\r\n"));  
    2e68:	8b e3       	ldi	r24, 0x3B	; 59
    2e6a:	93 e0       	ldi	r25, 0x03	; 3
    2e6c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
}
    2e70:	08 95       	ret

00002e72 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2e72:	84 ef       	ldi	r24, 0xF4	; 244
    2e74:	99 ef       	ldi	r25, 0xF9	; 249
    2e76:	ac e3       	ldi	r26, 0x3C	; 60
    2e78:	b4 e4       	ldi	r27, 0x44	; 68
    2e7a:	80 93 08 05 	sts	0x0508, r24
    2e7e:	90 93 09 05 	sts	0x0509, r25
    2e82:	a0 93 0a 05 	sts	0x050A, r26
    2e86:	b0 93 0b 05 	sts	0x050B, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2e8a:	80 93 0c 05 	sts	0x050C, r24
    2e8e:	90 93 0d 05 	sts	0x050D, r25
    2e92:	a0 93 0e 05 	sts	0x050E, r26
    2e96:	b0 93 0f 05 	sts	0x050F, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2e9a:	80 93 10 05 	sts	0x0510, r24
    2e9e:	90 93 11 05 	sts	0x0511, r25
    2ea2:	a0 93 12 05 	sts	0x0512, r26
    2ea6:	b0 93 13 05 	sts	0x0513, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2eaa:	81 ec       	ldi	r24, 0xC1	; 193
    2eac:	9a ec       	ldi	r25, 0xCA	; 202
    2eae:	a1 e3       	ldi	r26, 0x31	; 49
    2eb0:	b2 e4       	ldi	r27, 0x42	; 66
    2eb2:	80 93 14 05 	sts	0x0514, r24
    2eb6:	90 93 15 05 	sts	0x0515, r25
    2eba:	a0 93 16 05 	sts	0x0516, r26
    2ebe:	b0 93 17 05 	sts	0x0517, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2ec2:	88 e0       	ldi	r24, 0x08	; 8
    2ec4:	80 93 19 05 	sts	0x0519, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	a0 ef       	ldi	r26, 0xF0	; 240
    2ece:	b3 e4       	ldi	r27, 0x43	; 67
    2ed0:	80 93 1a 05 	sts	0x051A, r24
    2ed4:	90 93 1b 05 	sts	0x051B, r25
    2ed8:	a0 93 1c 05 	sts	0x051C, r26
    2edc:	b0 93 1d 05 	sts	0x051D, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2ee0:	80 93 1e 05 	sts	0x051E, r24
    2ee4:	90 93 1f 05 	sts	0x051F, r25
    2ee8:	a0 93 20 05 	sts	0x0520, r26
    2eec:	b0 93 21 05 	sts	0x0521, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2ef0:	8a e9       	ldi	r24, 0x9A	; 154
    2ef2:	99 e9       	ldi	r25, 0x99	; 153
    2ef4:	a9 e9       	ldi	r26, 0x99	; 153
    2ef6:	b0 e4       	ldi	r27, 0x40	; 64
    2ef8:	80 93 26 05 	sts	0x0526, r24
    2efc:	90 93 27 05 	sts	0x0527, r25
    2f00:	a0 93 28 05 	sts	0x0528, r26
    2f04:	b0 93 29 05 	sts	0x0529, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2f08:	8d ec       	ldi	r24, 0xCD	; 205
    2f0a:	9c ec       	ldi	r25, 0xCC	; 204
    2f0c:	ac ec       	ldi	r26, 0xCC	; 204
    2f0e:	bd e3       	ldi	r27, 0x3D	; 61
    2f10:	80 93 22 05 	sts	0x0522, r24
    2f14:	90 93 23 05 	sts	0x0523, r25
    2f18:	a0 93 24 05 	sts	0x0524, r26
    2f1c:	b0 93 25 05 	sts	0x0525, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	a8 e4       	ldi	r26, 0x48	; 72
    2f26:	b2 e4       	ldi	r27, 0x42	; 66
    2f28:	80 93 2a 05 	sts	0x052A, r24
    2f2c:	90 93 2b 05 	sts	0x052B, r25
    2f30:	a0 93 2c 05 	sts	0x052C, r26
    2f34:	b0 93 2d 05 	sts	0x052D, r27
}
    2f38:	08 95       	ret

00002f3a <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2f42:	87 36       	cpi	r24, 0x67	; 103
    2f44:	31 f0       	breq	.+12     	; 0x2f52 <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	a9 f0       	breq	.+42     	; 0x2f74 <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2f4e:	c9 01       	movw	r24, r18
    2f50:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2f52:	88 e0       	ldi	r24, 0x08	; 8
    2f54:	95 e0       	ldi	r25, 0x05	; 5
    2f56:	61 e0       	ldi	r22, 0x01	; 1
    2f58:	70 e0       	ldi	r23, 0x00	; 0
    2f5a:	46 e2       	ldi	r20, 0x26	; 38
    2f5c:	50 e0       	ldi	r21, 0x00	; 0
    2f5e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <memcpy_from_eeprom_with_checksum>
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	89 2b       	or	r24, r25
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <read_settings+0x30>
    2f68:	21 e0       	ldi	r18, 0x01	; 1
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	28 27       	eor	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2f70:	c9 01       	movw	r24, r18
    2f72:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2f74:	88 e0       	ldi	r24, 0x08	; 8
    2f76:	95 e0       	ldi	r25, 0x05	; 5
    2f78:	61 e0       	ldi	r22, 0x01	; 1
    2f7a:	70 e0       	ldi	r23, 0x00	; 0
    2f7c:	4b e1       	ldi	r20, 0x1B	; 27
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <memcpy_from_eeprom_with_checksum>
    2f84:	89 2b       	or	r24, r25
    2f86:	09 f3       	breq	.-62     	; 0x2f4a <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2f88:	8a e9       	ldi	r24, 0x9A	; 154
    2f8a:	99 e9       	ldi	r25, 0x99	; 153
    2f8c:	a9 e9       	ldi	r26, 0x99	; 153
    2f8e:	b0 e4       	ldi	r27, 0x40	; 64
    2f90:	80 93 26 05 	sts	0x0526, r24
    2f94:	90 93 27 05 	sts	0x0527, r25
    2f98:	a0 93 28 05 	sts	0x0528, r26
    2f9c:	b0 93 29 05 	sts	0x0529, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	a8 e4       	ldi	r26, 0x48	; 72
    2fa6:	b2 e4       	ldi	r27, 0x42	; 66
    2fa8:	80 93 2a 05 	sts	0x052A, r24
    2fac:	90 93 2b 05 	sts	0x052B, r25
    2fb0:	a0 93 2c 05 	sts	0x052C, r26
    2fb4:	b0 93 2d 05 	sts	0x052D, r27
    2fb8:	21 e0       	ldi	r18, 0x01	; 1
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	c8 cf       	rjmp	.-112    	; 0x2f4e <read_settings+0x14>

00002fbe <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	67 e6       	ldi	r22, 0x67	; 103
    2fc4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	68 e0       	ldi	r22, 0x08	; 8
    2fce:	75 e0       	ldi	r23, 0x05	; 5
    2fd0:	46 e2       	ldi	r20, 0x26	; 38
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	0e 94 ba 03 	call	0x774	; 0x774 <memcpy_to_eeprom_with_checksum>
}
    2fd8:	08 95       	ret

00002fda <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2fda:	83 e9       	ldi	r24, 0x93	; 147
    2fdc:	95 e0       	ldi	r25, 0x05	; 5
    2fde:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2fe2:	8e e8       	ldi	r24, 0x8E	; 142
    2fe4:	95 e0       	ldi	r25, 0x05	; 5
    2fe6:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printPgmString(PSTR("\r\n"));
    2fea:	8b e8       	ldi	r24, 0x8B	; 139
    2fec:	95 e0       	ldi	r25, 0x05	; 5
    2fee:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2ff2:	85 e8       	ldi	r24, 0x85	; 133
    2ff4:	95 e0       	ldi	r25, 0x05	; 5
    2ff6:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2ffa:	60 91 08 05 	lds	r22, 0x0508
    2ffe:	70 91 09 05 	lds	r23, 0x0509
    3002:	80 91 0a 05 	lds	r24, 0x050A
    3006:	90 91 0b 05 	lds	r25, 0x050B
    300a:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    300e:	85 e7       	ldi	r24, 0x75	; 117
    3010:	95 e0       	ldi	r25, 0x05	; 5
    3012:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    3016:	8f e6       	ldi	r24, 0x6F	; 111
    3018:	95 e0       	ldi	r25, 0x05	; 5
    301a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    301e:	60 91 0c 05 	lds	r22, 0x050C
    3022:	70 91 0d 05 	lds	r23, 0x050D
    3026:	80 91 0e 05 	lds	r24, 0x050E
    302a:	90 91 0f 05 	lds	r25, 0x050F
    302e:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    3032:	8f e5       	ldi	r24, 0x5F	; 95
    3034:	95 e0       	ldi	r25, 0x05	; 5
    3036:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    303a:	89 e5       	ldi	r24, 0x59	; 89
    303c:	95 e0       	ldi	r25, 0x05	; 5
    303e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    3042:	60 91 10 05 	lds	r22, 0x0510
    3046:	70 91 11 05 	lds	r23, 0x0511
    304a:	80 91 12 05 	lds	r24, 0x0512
    304e:	90 91 13 05 	lds	r25, 0x0513
    3052:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    3056:	89 e4       	ldi	r24, 0x49	; 73
    3058:	95 e0       	ldi	r25, 0x05	; 5
    305a:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    305e:	83 e4       	ldi	r24, 0x43	; 67
    3060:	95 e0       	ldi	r25, 0x05	; 5
    3062:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    3066:	60 91 14 05 	lds	r22, 0x0514
    306a:	70 91 15 05 	lds	r23, 0x0515
    306e:	80 91 16 05 	lds	r24, 0x0516
    3072:	90 91 17 05 	lds	r25, 0x0517
    3076:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    307a:	81 e3       	ldi	r24, 0x31	; 49
    307c:	95 e0       	ldi	r25, 0x05	; 5
    307e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    3082:	8b e2       	ldi	r24, 0x2B	; 43
    3084:	95 e0       	ldi	r25, 0x05	; 5
    3086:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printInteger(settings.pulse_microseconds);
    308a:	60 91 19 05 	lds	r22, 0x0519
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    3098:	8e e0       	ldi	r24, 0x0E	; 14
    309a:	95 e0       	ldi	r25, 0x05	; 5
    309c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    30a0:	88 e0       	ldi	r24, 0x08	; 8
    30a2:	95 e0       	ldi	r25, 0x05	; 5
    30a4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.default_feed_rate);
    30a8:	60 91 1a 05 	lds	r22, 0x051A
    30ac:	70 91 1b 05 	lds	r23, 0x051B
    30b0:	80 91 1c 05 	lds	r24, 0x051C
    30b4:	90 91 1d 05 	lds	r25, 0x051D
    30b8:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    30bc:	8a ee       	ldi	r24, 0xEA	; 234
    30be:	94 e0       	ldi	r25, 0x04	; 4
    30c0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    30c4:	84 ee       	ldi	r24, 0xE4	; 228
    30c6:	94 e0       	ldi	r25, 0x04	; 4
    30c8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.default_seek_rate);
    30cc:	60 91 1e 05 	lds	r22, 0x051E
    30d0:	70 91 1f 05 	lds	r23, 0x051F
    30d4:	80 91 20 05 	lds	r24, 0x0520
    30d8:	90 91 21 05 	lds	r25, 0x0521
    30dc:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    30e0:	86 ec       	ldi	r24, 0xC6	; 198
    30e2:	94 e0       	ldi	r25, 0x04	; 4
    30e4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    30e8:	80 ec       	ldi	r24, 0xC0	; 192
    30ea:	94 e0       	ldi	r25, 0x04	; 4
    30ec:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    30f0:	60 91 22 05 	lds	r22, 0x0522
    30f4:	70 91 23 05 	lds	r23, 0x0523
    30f8:	80 91 24 05 	lds	r24, 0x0524
    30fc:	90 91 25 05 	lds	r25, 0x0525
    3100:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    3104:	8c ea       	ldi	r24, 0xAC	; 172
    3106:	94 e0       	ldi	r25, 0x04	; 4
    3108:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    310c:	86 ea       	ldi	r24, 0xA6	; 166
    310e:	94 e0       	ldi	r25, 0x04	; 4
    3110:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.acceleration);
    3114:	60 91 26 05 	lds	r22, 0x0526
    3118:	70 91 27 05 	lds	r23, 0x0527
    311c:	80 91 28 05 	lds	r24, 0x0528
    3120:	90 91 29 05 	lds	r25, 0x0529
    3124:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    3128:	88 e8       	ldi	r24, 0x88	; 136
    312a:	94 e0       	ldi	r25, 0x04	; 4
    312c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    3130:	82 e8       	ldi	r24, 0x82	; 130
    3132:	94 e0       	ldi	r25, 0x04	; 4
    3134:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printFloat(settings.max_jerk);
    3138:	60 91 2a 05 	lds	r22, 0x052A
    313c:	70 91 2b 05 	lds	r23, 0x052B
    3140:	80 91 2c 05 	lds	r24, 0x052C
    3144:	90 91 2d 05 	lds	r25, 0x052D
    3148:	0e 94 0f 22 	call	0x441e	; 0x441e <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    314c:	8a e4       	ldi	r24, 0x4A	; 74
    314e:	94 e0       	ldi	r25, 0x04	; 4
    3150:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    3154:	81 e4       	ldi	r24, 0x41	; 65
    3156:	94 e0       	ldi	r25, 0x04	; 4
    3158:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  printInteger(st_is_enabled());
    315c:	0e 94 35 1a 	call	0x346a	; 0x346a <st_is_enabled>
    3160:	aa 27       	eor	r26, r26
    3162:	97 fd       	sbrc	r25, 7
    3164:	a0 95       	com	r26
    3166:	ba 2f       	mov	r27, r26
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    3170:	88 e1       	ldi	r24, 0x18	; 24
    3172:	94 e0       	ldi	r25, 0x04	; 4
    3174:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    3178:	85 ed       	ldi	r24, 0xD5	; 213
    317a:	93 e0       	ldi	r25, 0x03	; 3
    317c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
}
    3180:	08 95       	ret

00003182 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    3182:	fc 01       	movw	r30, r24
  switch(parameter) {
    3184:	86 30       	cpi	r24, 0x06	; 6
    3186:	91 05       	cpc	r25, r1
    3188:	09 f4       	brne	.+2      	; 0x318c <settings_store_setting+0xa>
    318a:	5f c0       	rjmp	.+190    	; 0x324a <settings_store_setting+0xc8>
    318c:	87 30       	cpi	r24, 0x07	; 7
    318e:	91 05       	cpc	r25, r1
    3190:	a4 f0       	brlt	.+40     	; 0x31ba <settings_store_setting+0x38>
    3192:	88 30       	cpi	r24, 0x08	; 8
    3194:	91 05       	cpc	r25, r1
    3196:	09 f4       	brne	.+2      	; 0x319a <settings_store_setting+0x18>
    3198:	46 c0       	rjmp	.+140    	; 0x3226 <settings_store_setting+0xa4>
    319a:	88 30       	cpi	r24, 0x08	; 8
    319c:	91 05       	cpc	r25, r1
    319e:	d4 f1       	brlt	.+116    	; 0x3214 <settings_store_setting+0x92>
    31a0:	89 30       	cpi	r24, 0x09	; 9
    31a2:	91 05       	cpc	r25, r1
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <settings_store_setting+0x26>
    31a6:	67 c0       	rjmp	.+206    	; 0x3276 <settings_store_setting+0xf4>
    31a8:	e8 5e       	subi	r30, 0xE8	; 232
    31aa:	f3 40       	sbci	r31, 0x03	; 3
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <settings_store_setting+0x2e>
    31ae:	56 c0       	rjmp	.+172    	; 0x325c <settings_store_setting+0xda>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    31b0:	81 ec       	ldi	r24, 0xC1	; 193
    31b2:	93 e0       	ldi	r25, 0x03	; 3
    31b4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    31b8:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    31ba:	84 30       	cpi	r24, 0x04	; 4
    31bc:	91 05       	cpc	r25, r1
    31be:	e1 f1       	breq	.+120    	; 0x3238 <settings_store_setting+0xb6>
    31c0:	85 30       	cpi	r24, 0x05	; 5
    31c2:	91 05       	cpc	r25, r1
    31c4:	f4 f4       	brge	.+60     	; 0x3202 <settings_store_setting+0x80>
    31c6:	97 fd       	sbrc	r25, 7
    31c8:	f3 cf       	rjmp	.-26     	; 0x31b0 <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    31ca:	ee 0f       	add	r30, r30
    31cc:	ff 1f       	adc	r31, r31
    31ce:	ee 0f       	add	r30, r30
    31d0:	ff 1f       	adc	r31, r31
    31d2:	e8 5f       	subi	r30, 0xF8	; 248
    31d4:	fa 4f       	sbci	r31, 0xFA	; 250
    31d6:	40 83       	st	Z, r20
    31d8:	51 83       	std	Z+1, r21	; 0x01
    31da:	62 83       	std	Z+2, r22	; 0x02
    31dc:	73 83       	std	Z+3, r23	; 0x03
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	67 e6       	ldi	r22, 0x67	; 103
    31e4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	68 e0       	ldi	r22, 0x08	; 8
    31ee:	75 e0       	ldi	r23, 0x05	; 5
    31f0:	46 e2       	ldi	r20, 0x26	; 38
    31f2:	50 e0       	ldi	r21, 0x00	; 0
    31f4:	0e 94 ba 03 	call	0x774	; 0x774 <memcpy_to_eeprom_with_checksum>
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
  printPgmString(PSTR("Stored new setting\r\n"));
    31f8:	8c ea       	ldi	r24, 0xAC	; 172
    31fa:	93 e0       	ldi	r25, 0x03	; 3
    31fc:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    3200:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    3202:	40 93 1a 05 	sts	0x051A, r20
    3206:	50 93 1b 05 	sts	0x051B, r21
    320a:	60 93 1c 05 	sts	0x051C, r22
    320e:	70 93 1d 05 	sts	0x051D, r23
    3212:	e5 cf       	rjmp	.-54     	; 0x31de <settings_store_setting+0x5c>
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    3214:	40 93 22 05 	sts	0x0522, r20
    3218:	50 93 23 05 	sts	0x0523, r21
    321c:	60 93 24 05 	sts	0x0524, r22
    3220:	70 93 25 05 	sts	0x0525, r23
    3224:	dc cf       	rjmp	.-72     	; 0x31de <settings_store_setting+0x5c>
    case 8: settings.acceleration = value; break;
    3226:	40 93 26 05 	sts	0x0526, r20
    322a:	50 93 27 05 	sts	0x0527, r21
    322e:	60 93 28 05 	sts	0x0528, r22
    3232:	70 93 29 05 	sts	0x0529, r23
    3236:	d3 cf       	rjmp	.-90     	; 0x31de <settings_store_setting+0x5c>
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    3238:	cb 01       	movw	r24, r22
    323a:	ba 01       	movw	r22, r20
    323c:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <round>
    3240:	0e 94 f5 24 	call	0x49ea	; 0x49ea <__fixunssfsi>
    3244:	60 93 19 05 	sts	0x0519, r22
    3248:	ca cf       	rjmp	.-108    	; 0x31de <settings_store_setting+0x5c>
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    324a:	40 93 1e 05 	sts	0x051E, r20
    324e:	50 93 1f 05 	sts	0x051F, r21
    3252:	60 93 20 05 	sts	0x0520, r22
    3256:	70 93 21 05 	sts	0x0521, r23
    325a:	c1 cf       	rjmp	.-126    	; 0x31de <settings_store_setting+0x5c>
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    325c:	cb 01       	movw	r24, r22
    325e:	ba 01       	movw	r22, r20
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    326c:	88 23       	and	r24, r24
    326e:	79 f0       	breq	.+30     	; 0x328e <settings_store_setting+0x10c>
    3270:	0e 94 31 1a 	call	0x3462	; 0x3462 <st_enable>
    3274:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    3276:	db 01       	movw	r26, r22
    3278:	ca 01       	movw	r24, r20
    327a:	bf 77       	andi	r27, 0x7F	; 127
    327c:	80 93 2a 05 	sts	0x052A, r24
    3280:	90 93 2b 05 	sts	0x052B, r25
    3284:	a0 93 2c 05 	sts	0x052C, r26
    3288:	b0 93 2d 05 	sts	0x052D, r27
    328c:	a8 cf       	rjmp	.-176    	; 0x31de <settings_store_setting+0x5c>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    328e:	0e 94 33 1a 	call	0x3466	; 0x3466 <st_disable>
    3292:	08 95       	ret

00003294 <settings_init>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	0e 94 52 03 	call	0x6a4	; 0x6a4 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    329c:	87 36       	cpi	r24, 0x67	; 103
    329e:	09 f4       	brne	.+2      	; 0x32a2 <settings_init+0xe>
    32a0:	7a c0       	rjmp	.+244    	; 0x3396 <settings_init+0x102>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <settings_init+0x14>
    32a6:	87 c0       	rjmp	.+270    	; 0x33b6 <settings_init+0x122>
// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    32a8:	82 e5       	ldi	r24, 0x52	; 82
    32aa:	93 e0       	ldi	r25, 0x03	; 3
    32ac:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    32b0:	84 ef       	ldi	r24, 0xF4	; 244
    32b2:	99 ef       	ldi	r25, 0xF9	; 249
    32b4:	ac e3       	ldi	r26, 0x3C	; 60
    32b6:	b4 e4       	ldi	r27, 0x44	; 68
    32b8:	80 93 08 05 	sts	0x0508, r24
    32bc:	90 93 09 05 	sts	0x0509, r25
    32c0:	a0 93 0a 05 	sts	0x050A, r26
    32c4:	b0 93 0b 05 	sts	0x050B, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    32c8:	80 93 0c 05 	sts	0x050C, r24
    32cc:	90 93 0d 05 	sts	0x050D, r25
    32d0:	a0 93 0e 05 	sts	0x050E, r26
    32d4:	b0 93 0f 05 	sts	0x050F, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    32d8:	80 93 10 05 	sts	0x0510, r24
    32dc:	90 93 11 05 	sts	0x0511, r25
    32e0:	a0 93 12 05 	sts	0x0512, r26
    32e4:	b0 93 13 05 	sts	0x0513, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    32e8:	81 ec       	ldi	r24, 0xC1	; 193
    32ea:	9a ec       	ldi	r25, 0xCA	; 202
    32ec:	a1 e3       	ldi	r26, 0x31	; 49
    32ee:	b2 e4       	ldi	r27, 0x42	; 66
    32f0:	80 93 14 05 	sts	0x0514, r24
    32f4:	90 93 15 05 	sts	0x0515, r25
    32f8:	a0 93 16 05 	sts	0x0516, r26
    32fc:	b0 93 17 05 	sts	0x0517, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    3300:	88 e0       	ldi	r24, 0x08	; 8
    3302:	80 93 19 05 	sts	0x0519, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	a0 ef       	ldi	r26, 0xF0	; 240
    330c:	b3 e4       	ldi	r27, 0x43	; 67
    330e:	80 93 1a 05 	sts	0x051A, r24
    3312:	90 93 1b 05 	sts	0x051B, r25
    3316:	a0 93 1c 05 	sts	0x051C, r26
    331a:	b0 93 1d 05 	sts	0x051D, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    331e:	80 93 1e 05 	sts	0x051E, r24
    3322:	90 93 1f 05 	sts	0x051F, r25
    3326:	a0 93 20 05 	sts	0x0520, r26
    332a:	b0 93 21 05 	sts	0x0521, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    332e:	8a e9       	ldi	r24, 0x9A	; 154
    3330:	99 e9       	ldi	r25, 0x99	; 153
    3332:	a9 e9       	ldi	r26, 0x99	; 153
    3334:	b0 e4       	ldi	r27, 0x40	; 64
    3336:	80 93 26 05 	sts	0x0526, r24
    333a:	90 93 27 05 	sts	0x0527, r25
    333e:	a0 93 28 05 	sts	0x0528, r26
    3342:	b0 93 29 05 	sts	0x0529, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    3346:	8d ec       	ldi	r24, 0xCD	; 205
    3348:	9c ec       	ldi	r25, 0xCC	; 204
    334a:	ac ec       	ldi	r26, 0xCC	; 204
    334c:	bd e3       	ldi	r27, 0x3D	; 61
    334e:	80 93 22 05 	sts	0x0522, r24
    3352:	90 93 23 05 	sts	0x0523, r25
    3356:	a0 93 24 05 	sts	0x0524, r26
    335a:	b0 93 25 05 	sts	0x0525, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	a8 e4       	ldi	r26, 0x48	; 72
    3364:	b2 e4       	ldi	r27, 0x42	; 66
    3366:	80 93 2a 05 	sts	0x052A, r24
    336a:	90 93 2b 05 	sts	0x052B, r25
    336e:	a0 93 2c 05 	sts	0x052C, r26
    3372:	b0 93 2d 05 	sts	0x052D, r27
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	67 e6       	ldi	r22, 0x67	; 103
    337c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	68 e0       	ldi	r22, 0x08	; 8
    3386:	75 e0       	ldi	r23, 0x05	; 5
    3388:	46 e2       	ldi	r20, 0x26	; 38
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	0e 94 ba 03 	call	0x774	; 0x774 <memcpy_to_eeprom_with_checksum>
    printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    write_settings();
    settings_dump();
    3390:	0e 94 ed 17 	call	0x2fda	; 0x2fda <settings_dump>
    3394:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    3396:	88 e0       	ldi	r24, 0x08	; 8
    3398:	95 e0       	ldi	r25, 0x05	; 5
    339a:	61 e0       	ldi	r22, 0x01	; 1
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	46 e2       	ldi	r20, 0x26	; 38
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <memcpy_from_eeprom_with_checksum>
    33a6:	89 2b       	or	r24, r25
    33a8:	09 f4       	brne	.+2      	; 0x33ac <settings_init+0x118>
    33aa:	7e cf       	rjmp	.-260    	; 0x32a8 <settings_init+0x14>
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    printPgmString(PSTR("'$' to dump current settings\r\n"));
    33ac:	8d e8       	ldi	r24, 0x8D	; 141
    33ae:	93 e0       	ldi	r25, 0x03	; 3
    33b0:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    33b4:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    33b6:	88 e0       	ldi	r24, 0x08	; 8
    33b8:	95 e0       	ldi	r25, 0x05	; 5
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	70 e0       	ldi	r23, 0x00	; 0
    33be:	4b e1       	ldi	r20, 0x1B	; 27
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <memcpy_from_eeprom_with_checksum>
    33c6:	89 2b       	or	r24, r25
    33c8:	09 f4       	brne	.+2      	; 0x33cc <settings_init+0x138>
    33ca:	6e cf       	rjmp	.-292    	; 0x32a8 <settings_init+0x14>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    33cc:	8a e9       	ldi	r24, 0x9A	; 154
    33ce:	99 e9       	ldi	r25, 0x99	; 153
    33d0:	a9 e9       	ldi	r26, 0x99	; 153
    33d2:	b0 e4       	ldi	r27, 0x40	; 64
    33d4:	80 93 26 05 	sts	0x0526, r24
    33d8:	90 93 27 05 	sts	0x0527, r25
    33dc:	a0 93 28 05 	sts	0x0528, r26
    33e0:	b0 93 29 05 	sts	0x0529, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	a8 e4       	ldi	r26, 0x48	; 72
    33ea:	b2 e4       	ldi	r27, 0x42	; 66
    33ec:	80 93 2a 05 	sts	0x052A, r24
    33f0:	90 93 2b 05 	sts	0x052B, r25
    33f4:	a0 93 2c 05 	sts	0x052C, r26
    33f8:	b0 93 2d 05 	sts	0x052D, r27
    33fc:	d7 cf       	rjmp	.-82     	; 0x33ac <settings_init+0x118>

000033fe <spindle_init>:

#include <avr/io.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    33fe:	e1 e0       	ldi	r30, 0x01	; 1
    3400:	f1 e0       	ldi	r31, 0x01	; 1
    3402:	80 81       	ld	r24, Z
    3404:	80 64       	ori	r24, 0x40	; 64
    3406:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    3408:	27 9a       	sbi	0x04, 7	; 4
}
    340a:	08 95       	ret

0000340c <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    340c:	97 fd       	sbrc	r25, 7
    340e:	07 c0       	rjmp	.+14     	; 0x341e <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    3410:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    3412:	80 91 02 01 	lds	r24, 0x0102
    3416:	80 64       	ori	r24, 0x40	; 64
    3418:	80 93 02 01 	sts	0x0102, r24
}
    341c:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    341e:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    3420:	80 91 02 01 	lds	r24, 0x0102
    3424:	80 64       	ori	r24, 0x40	; 64
    3426:	80 93 02 01 	sts	0x0102, r24
}
    342a:	08 95       	ret

0000342c <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    342c:	e2 e0       	ldi	r30, 0x02	; 2
    342e:	f1 e0       	ldi	r31, 0x01	; 1
    3430:	80 81       	ld	r24, Z
    3432:	8f 7b       	andi	r24, 0xBF	; 191
    3434:	80 83       	st	Z, r24
}
    3436:	08 95       	ret

00003438 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    3438:	ef e6       	ldi	r30, 0x6F	; 111
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	82 60       	ori	r24, 0x02	; 2
    3440:	80 83       	st	Z, r24
}
    3442:	08 95       	ret

00003444 <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    3444:	1f 92       	push	r1
    3446:	0f 92       	push	r0
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	0f 92       	push	r0
    344c:	11 24       	eor	r1, r1
    344e:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    3450:	81 b3       	in	r24, 0x11	; 17
    3452:	8a 7c       	andi	r24, 0xCA	; 202
    3454:	81 bb       	out	0x11, r24	; 17
}
    3456:	8f 91       	pop	r24
    3458:	0f 90       	pop	r0
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	0f 90       	pop	r0
    345e:	1f 90       	pop	r1
    3460:	18 95       	reti

00003462 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3462:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    3464:	08 95       	ret

00003466 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3466:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    3468:	08 95       	ret

0000346a <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    346a:	3c 99       	sbic	0x07, 4	; 7
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <st_is_enabled+0xc>
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    3472:	c9 01       	movw	r24, r18
    3474:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    3476:	88 b1       	in	r24, 0x08	; 8
    3478:	82 95       	swap	r24
    347a:	8f 70       	andi	r24, 0x0F	; 15
    347c:	80 95       	com	r24
    347e:	81 70       	andi	r24, 0x01	; 1
    3480:	28 2f       	mov	r18, r24
    3482:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    3484:	c9 01       	movw	r24, r18
    3486:	08 95       	ret

00003488 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    3488:	60 30       	cpi	r22, 0x00	; 0
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	72 07       	cpc	r23, r18
    348e:	21 e0       	ldi	r18, 0x01	; 1
    3490:	82 07       	cpc	r24, r18
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	92 07       	cpc	r25, r18
    3496:	08 f4       	brcc	.+2      	; 0x349a <config_step_timer+0x12>
    3498:	5c c0       	rjmp	.+184    	; 0x3552 <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    349a:	60 30       	cpi	r22, 0x00	; 0
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	72 07       	cpc	r23, r18
    34a0:	28 e0       	ldi	r18, 0x08	; 8
    34a2:	82 07       	cpc	r24, r18
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	92 07       	cpc	r25, r18
    34a8:	78 f1       	brcs	.+94     	; 0x3508 <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    34aa:	60 30       	cpi	r22, 0x00	; 0
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	72 07       	cpc	r23, r18
    34b0:	20 e4       	ldi	r18, 0x40	; 64
    34b2:	82 07       	cpc	r24, r18
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	92 07       	cpc	r25, r18
    34b8:	08 f4       	brcc	.+2      	; 0x34bc <config_step_timer+0x34>
    34ba:	51 c0       	rjmp	.+162    	; 0x355e <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    34bc:	60 30       	cpi	r22, 0x00	; 0
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	72 07       	cpc	r23, r18
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	82 07       	cpc	r24, r18
    34c6:	21 e0       	ldi	r18, 0x01	; 1
    34c8:	92 07       	cpc	r25, r18
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <config_step_timer+0x46>
    34cc:	6d c0       	rjmp	.+218    	; 0x35a8 <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    34ce:	60 30       	cpi	r22, 0x00	; 0
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	72 07       	cpc	r23, r18
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	82 07       	cpc	r24, r18
    34d8:	24 e0       	ldi	r18, 0x04	; 4
    34da:	92 07       	cpc	r25, r18
    34dc:	08 f0       	brcs	.+2      	; 0x34e0 <config_step_timer+0x58>
    34de:	71 c0       	rjmp	.+226    	; 0x35c2 <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    34e0:	2a e0       	ldi	r18, 0x0A	; 10
    34e2:	96 95       	lsr	r25
    34e4:	87 95       	ror	r24
    34e6:	77 95       	ror	r23
    34e8:	67 95       	ror	r22
    34ea:	2a 95       	dec	r18
    34ec:	d1 f7       	brne	.-12     	; 0x34e2 <config_step_timer+0x5a>
    34ee:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    34f0:	9b 01       	movw	r18, r22
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	8a e0       	ldi	r24, 0x0A	; 10
    34f8:	22 0f       	add	r18, r18
    34fa:	33 1f       	adc	r19, r19
    34fc:	44 1f       	adc	r20, r20
    34fe:	55 1f       	adc	r21, r21
    3500:	8a 95       	dec	r24
    3502:	d1 f7       	brne	.-12     	; 0x34f8 <config_step_timer+0x70>
    3504:	95 e0       	ldi	r25, 0x05	; 5
    3506:	18 c0       	rjmp	.+48     	; 0x3538 <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    3508:	23 e0       	ldi	r18, 0x03	; 3
    350a:	96 95       	lsr	r25
    350c:	87 95       	ror	r24
    350e:	77 95       	ror	r23
    3510:	67 95       	ror	r22
    3512:	2a 95       	dec	r18
    3514:	d1 f7       	brne	.-12     	; 0x350a <config_step_timer+0x82>
    3516:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    3518:	9b 01       	movw	r18, r22
    351a:	40 e0       	ldi	r20, 0x00	; 0
    351c:	50 e0       	ldi	r21, 0x00	; 0
    351e:	22 0f       	add	r18, r18
    3520:	33 1f       	adc	r19, r19
    3522:	44 1f       	adc	r20, r20
    3524:	55 1f       	adc	r21, r21
    3526:	22 0f       	add	r18, r18
    3528:	33 1f       	adc	r19, r19
    352a:	44 1f       	adc	r20, r20
    352c:	55 1f       	adc	r21, r21
    352e:	22 0f       	add	r18, r18
    3530:	33 1f       	adc	r19, r19
    3532:	44 1f       	adc	r20, r20
    3534:	55 1f       	adc	r21, r21
    3536:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3538:	80 91 81 00 	lds	r24, 0x0081
    353c:	88 7f       	andi	r24, 0xF8	; 248
    353e:	98 2b       	or	r25, r24
    3540:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    3544:	f0 93 89 00 	sts	0x0089, r31
    3548:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    354c:	b9 01       	movw	r22, r18
    354e:	ca 01       	movw	r24, r20
    3550:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    3552:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    3554:	9b 01       	movw	r18, r22
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	91 e0       	ldi	r25, 0x01	; 1
    355c:	ed cf       	rjmp	.-38     	; 0x3538 <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    355e:	b6 e0       	ldi	r27, 0x06	; 6
    3560:	96 95       	lsr	r25
    3562:	87 95       	ror	r24
    3564:	77 95       	ror	r23
    3566:	67 95       	ror	r22
    3568:	ba 95       	dec	r27
    356a:	d1 f7       	brne	.-12     	; 0x3560 <config_step_timer+0xd8>
    356c:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    356e:	9b 01       	movw	r18, r22
    3570:	40 e0       	ldi	r20, 0x00	; 0
    3572:	50 e0       	ldi	r21, 0x00	; 0
    3574:	22 0f       	add	r18, r18
    3576:	33 1f       	adc	r19, r19
    3578:	44 1f       	adc	r20, r20
    357a:	55 1f       	adc	r21, r21
    357c:	22 0f       	add	r18, r18
    357e:	33 1f       	adc	r19, r19
    3580:	44 1f       	adc	r20, r20
    3582:	55 1f       	adc	r21, r21
    3584:	22 0f       	add	r18, r18
    3586:	33 1f       	adc	r19, r19
    3588:	44 1f       	adc	r20, r20
    358a:	55 1f       	adc	r21, r21
    358c:	22 0f       	add	r18, r18
    358e:	33 1f       	adc	r19, r19
    3590:	44 1f       	adc	r20, r20
    3592:	55 1f       	adc	r21, r21
    3594:	22 0f       	add	r18, r18
    3596:	33 1f       	adc	r19, r19
    3598:	44 1f       	adc	r20, r20
    359a:	55 1f       	adc	r21, r21
    359c:	22 0f       	add	r18, r18
    359e:	33 1f       	adc	r19, r19
    35a0:	44 1f       	adc	r20, r20
    35a2:	55 1f       	adc	r21, r21
    35a4:	93 e0       	ldi	r25, 0x03	; 3
    35a6:	c8 cf       	rjmp	.-112    	; 0x3538 <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    35a8:	bb 27       	eor	r27, r27
    35aa:	a9 2f       	mov	r26, r25
    35ac:	98 2f       	mov	r25, r24
    35ae:	87 2f       	mov	r24, r23
    35b0:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    35b2:	a0 e0       	ldi	r26, 0x00	; 0
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	22 27       	eor	r18, r18
    35b8:	38 2f       	mov	r19, r24
    35ba:	49 2f       	mov	r20, r25
    35bc:	5a 2f       	mov	r21, r26
    35be:	94 e0       	ldi	r25, 0x04	; 4
    35c0:	bb cf       	rjmp	.-138    	; 0x3538 <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    35c2:	ef ef       	ldi	r30, 0xFF	; 255
    35c4:	ff ef       	ldi	r31, 0xFF	; 255
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	3c ef       	ldi	r19, 0xFC	; 252
    35ca:	40 e0       	ldi	r20, 0x00	; 0
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	95 e0       	ldi	r25, 0x05	; 5
    35d0:	b3 cf       	rjmp	.-154    	; 0x3538 <config_step_timer+0xb0>

000035d2 <moveLeft>:
enum {
	STOP,LEFT,RIGHT,FORWARD,BACK
};

void moveLeft( unsigned int distance ) 
{
    35d2:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    35d4:	81 b3       	in	r24, 0x11	; 17
    35d6:	85 73       	andi	r24, 0x35	; 53
    35d8:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    35da:	21 15       	cp	r18, r1
    35dc:	31 05       	cpc	r19, r1
    35de:	99 f0       	breq	.+38     	; 0x3606 <moveLeft+0x34>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35e0:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35e2:	40 e6       	ldi	r20, 0x60	; 96
    35e4:	54 e0       	ldi	r21, 0x04	; 4
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    35e6:	81 b3       	in	r24, 0x11	; 17
    35e8:	8a 7c       	andi	r24, 0xCA	; 202
    35ea:	81 60       	ori	r24, 0x01	; 1
    35ec:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35ee:	89 2f       	mov	r24, r25
    35f0:	8a 95       	dec	r24
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <moveLeft+0x1e>
	 _delay_us( 7 ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    35f4:	81 b3       	in	r24, 0x11	; 17
    35f6:	8a 7c       	andi	r24, 0xCA	; 202
    35f8:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35fa:	fa 01       	movw	r30, r20
    35fc:	31 97       	sbiw	r30, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <moveLeft+0x2a>
    3600:	21 50       	subi	r18, 0x01	; 1
    3602:	30 40       	sbci	r19, 0x00	; 0
void moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3604:	81 f7       	brne	.-32     	; 0x35e6 <moveLeft+0x14>
    3606:	08 95       	ret

00003608 <moveRight>:
	 _delay_us( 280 ) ;
  }
}

void moveRight( unsigned int distance ) 
{
    3608:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    360a:	81 b3       	in	r24, 0x11	; 17
    360c:	85 73       	andi	r24, 0x35	; 53
    360e:	82 60       	ori	r24, 0x02	; 2
    3610:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3612:	21 15       	cp	r18, r1
    3614:	31 05       	cpc	r19, r1
    3616:	99 f0       	breq	.+38     	; 0x363e <moveRight+0x36>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3618:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    361a:	40 e6       	ldi	r20, 0x60	; 96
    361c:	54 e0       	ldi	r21, 0x04	; 4
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    361e:	81 b3       	in	r24, 0x11	; 17
    3620:	8a 7c       	andi	r24, 0xCA	; 202
    3622:	81 60       	ori	r24, 0x01	; 1
    3624:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3626:	89 2f       	mov	r24, r25
    3628:	8a 95       	dec	r24
    362a:	f1 f7       	brne	.-4      	; 0x3628 <moveRight+0x20>
	 _delay_us( 7 ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    362c:	81 b3       	in	r24, 0x11	; 17
    362e:	8a 7c       	andi	r24, 0xCA	; 202
    3630:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3632:	fa 01       	movw	r30, r20
    3634:	31 97       	sbiw	r30, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <moveRight+0x2c>
    3638:	21 50       	subi	r18, 0x01	; 1
    363a:	30 40       	sbci	r19, 0x00	; 0
void moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    363c:	81 f7       	brne	.-32     	; 0x361e <moveRight+0x16>
    363e:	08 95       	ret

00003640 <moveForward>:
	 _delay_us( 280 ) ;
  }
}

void moveForward( unsigned int distance ) 
{
    3640:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3642:	81 b3       	in	r24, 0x11	; 17
    3644:	85 73       	andi	r24, 0x35	; 53
    3646:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3648:	21 15       	cp	r18, r1
    364a:	31 05       	cpc	r19, r1
    364c:	99 f0       	breq	.+38     	; 0x3674 <moveForward+0x34>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    364e:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3650:	40 e6       	ldi	r20, 0x60	; 96
    3652:	54 e0       	ldi	r21, 0x04	; 4
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3654:	81 b3       	in	r24, 0x11	; 17
    3656:	8a 7c       	andi	r24, 0xCA	; 202
    3658:	84 60       	ori	r24, 0x04	; 4
    365a:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    365c:	89 2f       	mov	r24, r25
    365e:	8a 95       	dec	r24
    3660:	f1 f7       	brne	.-4      	; 0x365e <moveForward+0x1e>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3662:	81 b3       	in	r24, 0x11	; 17
    3664:	8a 7c       	andi	r24, 0xCA	; 202
    3666:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3668:	fa 01       	movw	r30, r20
    366a:	31 97       	sbiw	r30, 0x01	; 1
    366c:	f1 f7       	brne	.-4      	; 0x366a <moveForward+0x2a>
    366e:	21 50       	subi	r18, 0x01	; 1
    3670:	30 40       	sbci	r19, 0x00	; 0
void moveForward( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3672:	81 f7       	brne	.-32     	; 0x3654 <moveForward+0x14>
    3674:	08 95       	ret

00003676 <moveBack>:
	 _delay_us( 280 ) ;
  }
}

void moveBack( unsigned int distance ) 
{
    3676:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    3678:	81 b3       	in	r24, 0x11	; 17
    367a:	85 73       	andi	r24, 0x35	; 53
    367c:	88 60       	ori	r24, 0x08	; 8
    367e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3680:	21 15       	cp	r18, r1
    3682:	31 05       	cpc	r19, r1
    3684:	99 f0       	breq	.+38     	; 0x36ac <moveBack+0x36>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3686:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3688:	40 e6       	ldi	r20, 0x60	; 96
    368a:	54 e0       	ldi	r21, 0x04	; 4
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    368c:	81 b3       	in	r24, 0x11	; 17
    368e:	8a 7c       	andi	r24, 0xCA	; 202
    3690:	84 60       	ori	r24, 0x04	; 4
    3692:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3694:	89 2f       	mov	r24, r25
    3696:	8a 95       	dec	r24
    3698:	f1 f7       	brne	.-4      	; 0x3696 <moveBack+0x20>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    369a:	81 b3       	in	r24, 0x11	; 17
    369c:	8a 7c       	andi	r24, 0xCA	; 202
    369e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36a0:	fa 01       	movw	r30, r20
    36a2:	31 97       	sbiw	r30, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <moveBack+0x2c>
    36a6:	21 50       	subi	r18, 0x01	; 1
    36a8:	30 40       	sbci	r19, 0x00	; 0
void moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    36aa:	81 f7       	brne	.-32     	; 0x368c <moveBack+0x16>
    36ac:	08 95       	ret

000036ae <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    36ae:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    36b0:	82 e0       	ldi	r24, 0x02	; 2
    36b2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    36b4:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    36b6:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    36b8:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    36ba:	9f e8       	ldi	r25, 0x8F	; 143
    36bc:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    36be:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    36c0:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    36c4:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    36c8:	3f ec       	ldi	r19, 0xCF	; 207
    36ca:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    36ce:	20 ef       	ldi	r18, 0xF0	; 240
    36d0:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    36d4:	8c e9       	ldi	r24, 0x9C	; 156
    36d6:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    36d8:	82 e2       	ldi	r24, 0x22	; 34
    36da:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    36dc:	83 e1       	ldi	r24, 0x13	; 19
    36de:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    36e0:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    36e2:	80 e3       	ldi	r24, 0x30	; 48
    36e4:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    36e6:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    36e8:	83 e2       	ldi	r24, 0x23	; 35
    36ea:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    36ec:	83 e0       	ldi	r24, 0x03	; 3
    36ee:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    36f2:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    36f6:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    36fa:	20 93 0b 01 	sts	0x010B, r18
}
    36fe:	08 95       	ret

00003700 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    3700:	07 c0       	rjmp	.+14     	; 0x3710 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    3702:	83 b7       	in	r24, 0x33	; 51
    3704:	81 60       	ori	r24, 0x01	; 1
    3706:	83 bf       	out	0x33, r24	; 51
    3708:	88 95       	sleep
    370a:	83 b7       	in	r24, 0x33	; 51
    370c:	8e 7f       	andi	r24, 0xFE	; 254
    370e:	83 bf       	out	0x33, r24	; 51
    3710:	0e 94 22 0a 	call	0x1444	; 0x1444 <plan_get_current_block>
    3714:	89 2b       	or	r24, r25
    3716:	a9 f7       	brne	.-22     	; 0x3702 <st_synchronize+0x2>
}
    3718:	08 95       	ret

0000371a <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    371a:	9b 01       	movw	r18, r22
    371c:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    371e:	20 3b       	cpi	r18, 0xB0	; 176
    3720:	84 e0       	ldi	r24, 0x04	; 4
    3722:	38 07       	cpc	r19, r24
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	48 07       	cpc	r20, r24
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	58 07       	cpc	r21, r24
    372c:	40 f4       	brcc	.+16     	; 0x373e <set_step_events_per_minute+0x24>
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    372e:	64 ed       	ldi	r22, 0xD4	; 212
    3730:	70 e3       	ldi	r23, 0x30	; 48
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	35 e3       	ldi	r19, 0x35	; 53
    3736:	4c e0       	ldi	r20, 0x0C	; 12
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	93 e0       	ldi	r25, 0x03	; 3
    373c:	15 c0       	rjmp	.+42     	; 0x3768 <set_step_events_per_minute+0x4e>
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	70 e7       	ldi	r23, 0x70	; 112
    3742:	88 e3       	ldi	r24, 0x38	; 56
    3744:	99 e3       	ldi	r25, 0x39	; 57
    3746:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    374a:	c9 01       	movw	r24, r18
    374c:	da 01       	movw	r26, r20
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    374e:	80 30       	cpi	r24, 0x00	; 0
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	92 07       	cpc	r25, r18
    3754:	21 e0       	ldi	r18, 0x01	; 1
    3756:	a2 07       	cpc	r26, r18
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	b2 07       	cpc	r27, r18
    375c:	c0 f4       	brcc	.+48     	; 0x378e <set_step_events_per_minute+0x74>
		ceiling = cycles;
    375e:	bc 01       	movw	r22, r24
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    3760:	9c 01       	movw	r18, r24
    3762:	40 e0       	ldi	r20, 0x00	; 0
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	91 e0       	ldi	r25, 0x01	; 1
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3768:	80 91 81 00 	lds	r24, 0x0081
    376c:	88 7f       	andi	r24, 0xF8	; 248
    376e:	98 2b       	or	r25, r24
    3770:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    3774:	70 93 89 00 	sts	0x0089, r23
    3778:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    377c:	20 93 f8 03 	sts	0x03F8, r18
    3780:	30 93 f9 03 	sts	0x03F9, r19
    3784:	40 93 fa 03 	sts	0x03FA, r20
    3788:	50 93 fb 03 	sts	0x03FB, r21
}
    378c:	08 95       	ret
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    378e:	80 30       	cpi	r24, 0x00	; 0
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	92 07       	cpc	r25, r18
    3794:	28 e0       	ldi	r18, 0x08	; 8
    3796:	a2 07       	cpc	r26, r18
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	b2 07       	cpc	r27, r18
    379c:	c8 f4       	brcc	.+50     	; 0x37d0 <set_step_events_per_minute+0xb6>
    ceiling = cycles >> 3;
    379e:	23 e0       	ldi	r18, 0x03	; 3
    37a0:	b6 95       	lsr	r27
    37a2:	a7 95       	ror	r26
    37a4:	97 95       	ror	r25
    37a6:	87 95       	ror	r24
    37a8:	2a 95       	dec	r18
    37aa:	d1 f7       	brne	.-12     	; 0x37a0 <set_step_events_per_minute+0x86>
    37ac:	bc 01       	movw	r22, r24
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    37ae:	9c 01       	movw	r18, r24
    37b0:	40 e0       	ldi	r20, 0x00	; 0
    37b2:	50 e0       	ldi	r21, 0x00	; 0
    37b4:	22 0f       	add	r18, r18
    37b6:	33 1f       	adc	r19, r19
    37b8:	44 1f       	adc	r20, r20
    37ba:	55 1f       	adc	r21, r21
    37bc:	22 0f       	add	r18, r18
    37be:	33 1f       	adc	r19, r19
    37c0:	44 1f       	adc	r20, r20
    37c2:	55 1f       	adc	r21, r21
    37c4:	22 0f       	add	r18, r18
    37c6:	33 1f       	adc	r19, r19
    37c8:	44 1f       	adc	r20, r20
    37ca:	55 1f       	adc	r21, r21
    37cc:	92 e0       	ldi	r25, 0x02	; 2
    37ce:	cc cf       	rjmp	.-104    	; 0x3768 <set_step_events_per_minute+0x4e>
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    37d0:	26 e0       	ldi	r18, 0x06	; 6
    37d2:	b6 95       	lsr	r27
    37d4:	a7 95       	ror	r26
    37d6:	97 95       	ror	r25
    37d8:	87 95       	ror	r24
    37da:	2a 95       	dec	r18
    37dc:	d1 f7       	brne	.-12     	; 0x37d2 <set_step_events_per_minute+0xb8>
    37de:	bc 01       	movw	r22, r24
    37e0:	9c 01       	movw	r18, r24
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	22 0f       	add	r18, r18
    37e8:	33 1f       	adc	r19, r19
    37ea:	44 1f       	adc	r20, r20
    37ec:	55 1f       	adc	r21, r21
    37ee:	22 0f       	add	r18, r18
    37f0:	33 1f       	adc	r19, r19
    37f2:	44 1f       	adc	r20, r20
    37f4:	55 1f       	adc	r21, r21
    37f6:	22 0f       	add	r18, r18
    37f8:	33 1f       	adc	r19, r19
    37fa:	44 1f       	adc	r20, r20
    37fc:	55 1f       	adc	r21, r21
    37fe:	22 0f       	add	r18, r18
    3800:	33 1f       	adc	r19, r19
    3802:	44 1f       	adc	r20, r20
    3804:	55 1f       	adc	r21, r21
    3806:	22 0f       	add	r18, r18
    3808:	33 1f       	adc	r19, r19
    380a:	44 1f       	adc	r20, r20
    380c:	55 1f       	adc	r21, r21
    380e:	22 0f       	add	r18, r18
    3810:	33 1f       	adc	r19, r19
    3812:	44 1f       	adc	r20, r20
    3814:	55 1f       	adc	r21, r21
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    3816:	93 e0       	ldi	r25, 0x03	; 3
    3818:	a7 cf       	rjmp	.-178    	; 0x3768 <set_step_events_per_minute+0x4e>

0000381a <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    381a:	1f 92       	push	r1
    381c:	0f 92       	push	r0
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	0f 92       	push	r0
    3822:	0b b6       	in	r0, 0x3b	; 59
    3824:	0f 92       	push	r0
    3826:	11 24       	eor	r1, r1
    3828:	ef 92       	push	r14
    382a:	ff 92       	push	r15
    382c:	0f 93       	push	r16
    382e:	1f 93       	push	r17
    3830:	2f 93       	push	r18
    3832:	3f 93       	push	r19
    3834:	4f 93       	push	r20
    3836:	5f 93       	push	r21
    3838:	6f 93       	push	r22
    383a:	7f 93       	push	r23
    383c:	8f 93       	push	r24
    383e:	9f 93       	push	r25
    3840:	af 93       	push	r26
    3842:	bf 93       	push	r27
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	ef 93       	push	r30
    384a:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

// don't move if the head is down  
  if( is_head_down() ) return;
    384c:	0e 94 53 23 	call	0x46a6	; 0x46a6 <is_head_down>
    3850:	89 2b       	or	r24, r25
    3852:	09 f0       	breq	.+2      	; 0x3856 <__vector_17+0x3c>
    3854:	aa c1       	rjmp	.+852    	; 0x3baa <__vector_17+0x390>

  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    3856:	80 91 f6 03 	lds	r24, 0x03F6
    385a:	90 91 f7 03 	lds	r25, 0x03F7
    385e:	89 2b       	or	r24, r25
    3860:	09 f0       	breq	.+2      	; 0x3864 <__vector_17+0x4a>
    3862:	a3 c1       	rjmp	.+838    	; 0x3baa <__vector_17+0x390>

  // Check limits
  if( LIMIT_PIN & 0xf ) {
    3864:	89 b1       	in	r24, 0x09	; 9
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	8f 70       	andi	r24, 0x0F	; 15
    386a:	90 70       	andi	r25, 0x00	; 0
    386c:	89 2b       	or	r24, r25
    386e:	09 f0       	breq	.+2      	; 0x3872 <__vector_17+0x58>
    3870:	b5 c1       	rjmp	.+874    	; 0x3bdc <__vector_17+0x3c2>
  	gHomed = FALSE ;
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    3872:	91 b3       	in	r25, 0x11	; 17
    3874:	80 91 e1 03 	lds	r24, 0x03E1
    3878:	8a 7c       	andi	r24, 0xCA	; 202
    387a:	95 73       	andi	r25, 0x35	; 53
    387c:	89 2b       	or	r24, r25
    387e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    3880:	81 b3       	in	r24, 0x11	; 17
    3882:	8a 7c       	andi	r24, 0xCA	; 202
    3884:	90 91 e0 03 	lds	r25, 0x03E0
    3888:	89 2b       	or	r24, r25
    388a:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    388c:	80 91 19 05 	lds	r24, 0x0519
    3890:	88 0f       	add	r24, r24
    3892:	84 50       	subi	r24, 0x04	; 4
    3894:	81 95       	neg	r24
    3896:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    389a:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	90 93 f7 03 	sts	0x03F7, r25
    38a4:	80 93 f6 03 	sts	0x03F6, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    38a8:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    38aa:	e0 91 de 03 	lds	r30, 0x03DE
    38ae:	f0 91 df 03 	lds	r31, 0x03DF
    38b2:	30 97       	sbiw	r30, 0x00	; 0
    38b4:	09 f4       	brne	.+2      	; 0x38b8 <__vector_17+0x9e>
    38b6:	e1 c1       	rjmp	.+962    	; 0x3c7a <__vector_17+0x460>
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    38b8:	80 89       	ldd	r24, Z+16	; 0x10
    38ba:	80 93 e1 03 	sts	0x03E1, r24
    out_bits = 0;
    38be:	10 92 e0 03 	sts	0x03E0, r1
    counter_x += current_block->steps_x;
    38c2:	20 91 e2 03 	lds	r18, 0x03E2
    38c6:	30 91 e3 03 	lds	r19, 0x03E3
    38ca:	40 91 e4 03 	lds	r20, 0x03E4
    38ce:	50 91 e5 03 	lds	r21, 0x03E5
    38d2:	80 81       	ld	r24, Z
    38d4:	91 81       	ldd	r25, Z+1	; 0x01
    38d6:	a2 81       	ldd	r26, Z+2	; 0x02
    38d8:	b3 81       	ldd	r27, Z+3	; 0x03
    38da:	28 0f       	add	r18, r24
    38dc:	39 1f       	adc	r19, r25
    38de:	4a 1f       	adc	r20, r26
    38e0:	5b 1f       	adc	r21, r27
    38e2:	20 93 e2 03 	sts	0x03E2, r18
    38e6:	30 93 e3 03 	sts	0x03E3, r19
    38ea:	40 93 e4 03 	sts	0x03E4, r20
    38ee:	50 93 e5 03 	sts	0x03E5, r21
    if (counter_x > 0) {
    38f2:	12 16       	cp	r1, r18
    38f4:	13 06       	cpc	r1, r19
    38f6:	14 06       	cpc	r1, r20
    38f8:	15 06       	cpc	r1, r21
    38fa:	0c f0       	brlt	.+2      	; 0x38fe <__vector_17+0xe4>
    38fc:	97 c1       	rjmp	.+814    	; 0x3c2c <__vector_17+0x412>
      out_bits |= (1<<X_STEP_BIT);
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	80 93 e0 03 	sts	0x03E0, r24
      counter_x -= current_block->step_event_count;
    3904:	e1 88       	ldd	r14, Z+17	; 0x11
    3906:	f2 88       	ldd	r15, Z+18	; 0x12
    3908:	03 89       	ldd	r16, Z+19	; 0x13
    390a:	14 89       	ldd	r17, Z+20	; 0x14
    390c:	2e 19       	sub	r18, r14
    390e:	3f 09       	sbc	r19, r15
    3910:	40 0b       	sbc	r20, r16
    3912:	51 0b       	sbc	r21, r17
    3914:	20 93 e2 03 	sts	0x03E2, r18
    3918:	30 93 e3 03 	sts	0x03E3, r19
    391c:	40 93 e4 03 	sts	0x03E4, r20
    3920:	50 93 e5 03 	sts	0x03E5, r21
    }
    counter_y += current_block->steps_y;
    3924:	20 91 e6 03 	lds	r18, 0x03E6
    3928:	30 91 e7 03 	lds	r19, 0x03E7
    392c:	40 91 e8 03 	lds	r20, 0x03E8
    3930:	50 91 e9 03 	lds	r21, 0x03E9
    3934:	84 81       	ldd	r24, Z+4	; 0x04
    3936:	95 81       	ldd	r25, Z+5	; 0x05
    3938:	a6 81       	ldd	r26, Z+6	; 0x06
    393a:	b7 81       	ldd	r27, Z+7	; 0x07
    393c:	28 0f       	add	r18, r24
    393e:	39 1f       	adc	r19, r25
    3940:	4a 1f       	adc	r20, r26
    3942:	5b 1f       	adc	r21, r27
    3944:	20 93 e6 03 	sts	0x03E6, r18
    3948:	30 93 e7 03 	sts	0x03E7, r19
    394c:	40 93 e8 03 	sts	0x03E8, r20
    3950:	50 93 e9 03 	sts	0x03E9, r21
    if (counter_y > 0) {
    3954:	12 16       	cp	r1, r18
    3956:	13 06       	cpc	r1, r19
    3958:	14 06       	cpc	r1, r20
    395a:	15 06       	cpc	r1, r21
    395c:	8c f4       	brge	.+34     	; 0x3980 <__vector_17+0x166>
      out_bits |= (1<<Y_STEP_BIT);
    395e:	80 91 e0 03 	lds	r24, 0x03E0
    3962:	84 60       	ori	r24, 0x04	; 4
    3964:	80 93 e0 03 	sts	0x03E0, r24
      counter_y -= current_block->step_event_count;
    3968:	2e 19       	sub	r18, r14
    396a:	3f 09       	sbc	r19, r15
    396c:	40 0b       	sbc	r20, r16
    396e:	51 0b       	sbc	r21, r17
    3970:	20 93 e6 03 	sts	0x03E6, r18
    3974:	30 93 e7 03 	sts	0x03E7, r19
    3978:	40 93 e8 03 	sts	0x03E8, r20
    397c:	50 93 e9 03 	sts	0x03E9, r21
    }
    counter_z += current_block->steps_z;
    3980:	20 91 ea 03 	lds	r18, 0x03EA
    3984:	30 91 eb 03 	lds	r19, 0x03EB
    3988:	40 91 ec 03 	lds	r20, 0x03EC
    398c:	50 91 ed 03 	lds	r21, 0x03ED
    3990:	80 85       	ldd	r24, Z+8	; 0x08
    3992:	91 85       	ldd	r25, Z+9	; 0x09
    3994:	a2 85       	ldd	r26, Z+10	; 0x0a
    3996:	b3 85       	ldd	r27, Z+11	; 0x0b
    3998:	28 0f       	add	r18, r24
    399a:	39 1f       	adc	r19, r25
    399c:	4a 1f       	adc	r20, r26
    399e:	5b 1f       	adc	r21, r27
    39a0:	20 93 ea 03 	sts	0x03EA, r18
    39a4:	30 93 eb 03 	sts	0x03EB, r19
    39a8:	40 93 ec 03 	sts	0x03EC, r20
    39ac:	50 93 ed 03 	sts	0x03ED, r21
    if (counter_z > 0) {
    39b0:	12 16       	cp	r1, r18
    39b2:	13 06       	cpc	r1, r19
    39b4:	14 06       	cpc	r1, r20
    39b6:	15 06       	cpc	r1, r21
    39b8:	8c f4       	brge	.+34     	; 0x39dc <__vector_17+0x1c2>
      out_bits |= (1<<Z_STEP_BIT);
    39ba:	80 91 e0 03 	lds	r24, 0x03E0
    39be:	80 61       	ori	r24, 0x10	; 16
    39c0:	80 93 e0 03 	sts	0x03E0, r24
      counter_z -= current_block->step_event_count;
    39c4:	2e 19       	sub	r18, r14
    39c6:	3f 09       	sbc	r19, r15
    39c8:	40 0b       	sbc	r20, r16
    39ca:	51 0b       	sbc	r21, r17
    39cc:	20 93 ea 03 	sts	0x03EA, r18
    39d0:	30 93 eb 03 	sts	0x03EB, r19
    39d4:	40 93 ec 03 	sts	0x03EC, r20
    39d8:	50 93 ed 03 	sts	0x03ED, r21
    }
    counter_c += current_block->steps_c;
    39dc:	20 91 ee 03 	lds	r18, 0x03EE
    39e0:	30 91 ef 03 	lds	r19, 0x03EF
    39e4:	40 91 f0 03 	lds	r20, 0x03F0
    39e8:	50 91 f1 03 	lds	r21, 0x03F1
    39ec:	84 85       	ldd	r24, Z+12	; 0x0c
    39ee:	95 85       	ldd	r25, Z+13	; 0x0d
    39f0:	a6 85       	ldd	r26, Z+14	; 0x0e
    39f2:	b7 85       	ldd	r27, Z+15	; 0x0f
    39f4:	28 0f       	add	r18, r24
    39f6:	39 1f       	adc	r19, r25
    39f8:	4a 1f       	adc	r20, r26
    39fa:	5b 1f       	adc	r21, r27
    39fc:	20 93 ee 03 	sts	0x03EE, r18
    3a00:	30 93 ef 03 	sts	0x03EF, r19
    3a04:	40 93 f0 03 	sts	0x03F0, r20
    3a08:	50 93 f1 03 	sts	0x03F1, r21
    if (counter_c > 0) {
    3a0c:	12 16       	cp	r1, r18
    3a0e:	13 06       	cpc	r1, r19
    3a10:	14 06       	cpc	r1, r20
    3a12:	15 06       	cpc	r1, r21
    3a14:	8c f4       	brge	.+34     	; 0x3a38 <__vector_17+0x21e>
      out_bits |= (1<<C_STEP_BIT);
    3a16:	80 91 e0 03 	lds	r24, 0x03E0
    3a1a:	80 62       	ori	r24, 0x20	; 32
    3a1c:	80 93 e0 03 	sts	0x03E0, r24
      counter_c -= current_block->step_event_count;
    3a20:	2e 19       	sub	r18, r14
    3a22:	3f 09       	sbc	r19, r15
    3a24:	40 0b       	sbc	r20, r16
    3a26:	51 0b       	sbc	r21, r17
    3a28:	20 93 ee 03 	sts	0x03EE, r18
    3a2c:	30 93 ef 03 	sts	0x03EF, r19
    3a30:	40 93 f0 03 	sts	0x03F0, r20
    3a34:	50 93 f1 03 	sts	0x03F1, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3a38:	80 91 f2 03 	lds	r24, 0x03F2
    3a3c:	90 91 f3 03 	lds	r25, 0x03F3
    3a40:	a0 91 f4 03 	lds	r26, 0x03F4
    3a44:	b0 91 f5 03 	lds	r27, 0x03F5
    3a48:	01 96       	adiw	r24, 0x01	; 1
    3a4a:	a1 1d       	adc	r26, r1
    3a4c:	b1 1d       	adc	r27, r1
    3a4e:	80 93 f2 03 	sts	0x03F2, r24
    3a52:	90 93 f3 03 	sts	0x03F3, r25
    3a56:	a0 93 f4 03 	sts	0x03F4, r26
    3a5a:	b0 93 f5 03 	sts	0x03F5, r27
    if (step_events_completed >= current_block->step_event_count) {
    3a5e:	8e 15       	cp	r24, r14
    3a60:	9f 05       	cpc	r25, r15
    3a62:	a0 07       	cpc	r26, r16
    3a64:	b1 07       	cpc	r27, r17
    3a66:	08 f0       	brcs	.+2      	; 0x3a6a <__vector_17+0x250>
    3a68:	e6 c0       	rjmp	.+460    	; 0x3c36 <__vector_17+0x41c>
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    3a6a:	80 91 e1 03 	lds	r24, 0x03E1
    3a6e:	9a e0       	ldi	r25, 0x0A	; 10
    3a70:	89 27       	eor	r24, r25
    3a72:	80 93 e1 03 	sts	0x03E1, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    3a76:	20 91 f8 03 	lds	r18, 0x03F8
    3a7a:	30 91 f9 03 	lds	r19, 0x03F9
    3a7e:	40 91 fa 03 	lds	r20, 0x03FA
    3a82:	50 91 fb 03 	lds	r21, 0x03FB
    3a86:	80 91 fc 03 	lds	r24, 0x03FC
    3a8a:	90 91 fd 03 	lds	r25, 0x03FD
    3a8e:	a0 91 fe 03 	lds	r26, 0x03FE
    3a92:	b0 91 ff 03 	lds	r27, 0x03FF
    3a96:	28 0f       	add	r18, r24
    3a98:	39 1f       	adc	r19, r25
    3a9a:	4a 1f       	adc	r20, r26
    3a9c:	5b 1f       	adc	r21, r27
    3a9e:	20 93 fc 03 	sts	0x03FC, r18
    3aa2:	30 93 fd 03 	sts	0x03FD, r19
    3aa6:	40 93 fe 03 	sts	0x03FE, r20
    3aaa:	50 93 ff 03 	sts	0x03FF, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    3aae:	21 38       	cpi	r18, 0x81	; 129
    3ab0:	0a e1       	ldi	r16, 0x1A	; 26
    3ab2:	30 07       	cpc	r19, r16
    3ab4:	06 e0       	ldi	r16, 0x06	; 6
    3ab6:	40 07       	cpc	r20, r16
    3ab8:	00 e0       	ldi	r16, 0x00	; 0
    3aba:	50 07       	cpc	r21, r16
    3abc:	08 f4       	brcc	.+2      	; 0x3ac0 <__vector_17+0x2a6>
    3abe:	71 c0       	rjmp	.+226    	; 0x3ba2 <__vector_17+0x388>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    3ac0:	20 58       	subi	r18, 0x80	; 128
    3ac2:	3a 41       	sbci	r19, 0x1A	; 26
    3ac4:	46 40       	sbci	r20, 0x06	; 6
    3ac6:	50 40       	sbci	r21, 0x00	; 0
    3ac8:	20 93 fc 03 	sts	0x03FC, r18
    3acc:	30 93 fd 03 	sts	0x03FD, r19
    3ad0:	40 93 fe 03 	sts	0x03FE, r20
    3ad4:	50 93 ff 03 	sts	0x03FF, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    3ad8:	e0 91 de 03 	lds	r30, 0x03DE
    3adc:	f0 91 df 03 	lds	r31, 0x03DF
    3ae0:	30 97       	sbiw	r30, 0x00	; 0
    3ae2:	09 f4       	brne	.+2      	; 0x3ae6 <__vector_17+0x2cc>
    3ae4:	5e c0       	rjmp	.+188    	; 0x3ba2 <__vector_17+0x388>
    if (step_events_completed < current_block->accelerate_until) {
    3ae6:	20 91 f2 03 	lds	r18, 0x03F2
    3aea:	30 91 f3 03 	lds	r19, 0x03F3
    3aee:	40 91 f4 03 	lds	r20, 0x03F4
    3af2:	50 91 f5 03 	lds	r21, 0x03F5
    3af6:	ef 5b       	subi	r30, 0xBF	; 191
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 81       	ld	r24, Z
    3afc:	91 81       	ldd	r25, Z+1	; 0x01
    3afe:	a2 81       	ldd	r26, Z+2	; 0x02
    3b00:	b3 81       	ldd	r27, Z+3	; 0x03
    3b02:	e1 54       	subi	r30, 0x41	; 65
    3b04:	f0 40       	sbci	r31, 0x00	; 0
    3b06:	28 17       	cp	r18, r24
    3b08:	39 07       	cpc	r19, r25
    3b0a:	4a 07       	cpc	r20, r26
    3b0c:	5b 07       	cpc	r21, r27
    3b0e:	08 f4       	brcc	.+2      	; 0x3b12 <__vector_17+0x2f8>
    3b10:	68 c0       	rjmp	.+208    	; 0x3be2 <__vector_17+0x3c8>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3b12:	eb 5b       	subi	r30, 0xBB	; 187
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	80 81       	ld	r24, Z
    3b18:	91 81       	ldd	r25, Z+1	; 0x01
    3b1a:	a2 81       	ldd	r26, Z+2	; 0x02
    3b1c:	b3 81       	ldd	r27, Z+3	; 0x03
    3b1e:	e5 54       	subi	r30, 0x45	; 69
    3b20:	f0 40       	sbci	r31, 0x00	; 0
    3b22:	82 17       	cp	r24, r18
    3b24:	93 07       	cpc	r25, r19
    3b26:	a4 07       	cpc	r26, r20
    3b28:	b5 07       	cpc	r27, r21
    3b2a:	08 f0       	brcs	.+2      	; 0x3b2e <__vector_17+0x314>
    3b2c:	8b c0       	rjmp	.+278    	; 0x3c44 <__vector_17+0x42a>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    3b2e:	fd 96       	adiw	r30, 0x3d	; 61
    3b30:	60 81       	ld	r22, Z
    3b32:	71 81       	ldd	r23, Z+1	; 0x01
    3b34:	82 81       	ldd	r24, Z+2	; 0x02
    3b36:	93 81       	ldd	r25, Z+3	; 0x03
    3b38:	fd 97       	sbiw	r30, 0x3d	; 61
    3b3a:	20 91 00 04 	lds	r18, 0x0400
    3b3e:	30 91 01 04 	lds	r19, 0x0401
    3b42:	40 91 02 04 	lds	r20, 0x0402
    3b46:	50 91 03 04 	lds	r21, 0x0403
    3b4a:	62 17       	cp	r22, r18
    3b4c:	73 07       	cpc	r23, r19
    3b4e:	84 07       	cpc	r24, r20
    3b50:	95 07       	cpc	r25, r21
    3b52:	80 f4       	brcc	.+32     	; 0x3b74 <__vector_17+0x35a>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3b54:	79 01       	movw	r14, r18
    3b56:	8a 01       	movw	r16, r20
    3b58:	e6 1a       	sub	r14, r22
    3b5a:	f7 0a       	sbc	r15, r23
    3b5c:	08 0b       	sbc	r16, r24
    3b5e:	19 0b       	sbc	r17, r25
    3b60:	e0 92 00 04 	sts	0x0400, r14
    3b64:	f0 92 01 04 	sts	0x0401, r15
    3b68:	00 93 02 04 	sts	0x0402, r16
    3b6c:	10 93 03 04 	sts	0x0403, r17
    3b70:	a8 01       	movw	r20, r16
    3b72:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    3b74:	81 ad       	ldd	r24, Z+57	; 0x39
    3b76:	92 ad       	ldd	r25, Z+58	; 0x3a
    3b78:	a3 ad       	ldd	r26, Z+59	; 0x3b
    3b7a:	b4 ad       	ldd	r27, Z+60	; 0x3c
    3b7c:	28 17       	cp	r18, r24
    3b7e:	39 07       	cpc	r19, r25
    3b80:	4a 07       	cpc	r20, r26
    3b82:	5b 07       	cpc	r21, r27
    3b84:	50 f4       	brcc	.+20     	; 0x3b9a <__vector_17+0x380>
        trapezoid_adjusted_rate = current_block->final_rate;
    3b86:	80 93 00 04 	sts	0x0400, r24
    3b8a:	90 93 01 04 	sts	0x0401, r25
    3b8e:	a0 93 02 04 	sts	0x0402, r26
    3b92:	b0 93 03 04 	sts	0x0403, r27
    3b96:	9c 01       	movw	r18, r24
    3b98:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3b9a:	ca 01       	movw	r24, r20
    3b9c:	b9 01       	movw	r22, r18
    3b9e:	0e 94 8d 1b 	call	0x371a	; 0x371a <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    3ba2:	10 92 f7 03 	sts	0x03F7, r1
    3ba6:	10 92 f6 03 	sts	0x03F6, r1
}
    3baa:	ff 91       	pop	r31
    3bac:	ef 91       	pop	r30
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	bf 91       	pop	r27
    3bb4:	af 91       	pop	r26
    3bb6:	9f 91       	pop	r25
    3bb8:	8f 91       	pop	r24
    3bba:	7f 91       	pop	r23
    3bbc:	6f 91       	pop	r22
    3bbe:	5f 91       	pop	r21
    3bc0:	4f 91       	pop	r20
    3bc2:	3f 91       	pop	r19
    3bc4:	2f 91       	pop	r18
    3bc6:	1f 91       	pop	r17
    3bc8:	0f 91       	pop	r16
    3bca:	ff 90       	pop	r15
    3bcc:	ef 90       	pop	r14
    3bce:	0f 90       	pop	r0
    3bd0:	0b be       	out	0x3b, r0	; 59
    3bd2:	0f 90       	pop	r0
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	0f 90       	pop	r0
    3bd8:	1f 90       	pop	r1
    3bda:	18 95       	reti

  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt

  // Check limits
  if( LIMIT_PIN & 0xf ) {
  	gHomed = FALSE ;
    3bdc:	10 92 dd 03 	sts	0x03DD, r1
    3be0:	e4 cf       	rjmp	.-56     	; 0x3baa <__vector_17+0x390>
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    if (step_events_completed < current_block->accelerate_until) {
      trapezoid_adjusted_rate += current_block->rate_delta;
    3be2:	fd 96       	adiw	r30, 0x3d	; 61
    3be4:	80 81       	ld	r24, Z
    3be6:	91 81       	ldd	r25, Z+1	; 0x01
    3be8:	a2 81       	ldd	r26, Z+2	; 0x02
    3bea:	b3 81       	ldd	r27, Z+3	; 0x03
    3bec:	fd 97       	sbiw	r30, 0x3d	; 61
    3bee:	20 91 00 04 	lds	r18, 0x0400
    3bf2:	30 91 01 04 	lds	r19, 0x0401
    3bf6:	40 91 02 04 	lds	r20, 0x0402
    3bfa:	50 91 03 04 	lds	r21, 0x0403
    3bfe:	28 0f       	add	r18, r24
    3c00:	39 1f       	adc	r19, r25
    3c02:	4a 1f       	adc	r20, r26
    3c04:	5b 1f       	adc	r21, r27
    3c06:	20 93 00 04 	sts	0x0400, r18
    3c0a:	30 93 01 04 	sts	0x0401, r19
    3c0e:	40 93 02 04 	sts	0x0402, r20
    3c12:	50 93 03 04 	sts	0x0403, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3c16:	85 89       	ldd	r24, Z+21	; 0x15
    3c18:	96 89       	ldd	r25, Z+22	; 0x16
    3c1a:	a7 89       	ldd	r26, Z+23	; 0x17
    3c1c:	b0 8d       	ldd	r27, Z+24	; 0x18
    3c1e:	82 17       	cp	r24, r18
    3c20:	93 07       	cpc	r25, r19
    3c22:	a4 07       	cpc	r26, r20
    3c24:	b5 07       	cpc	r27, r21
    3c26:	08 f0       	brcs	.+2      	; 0x3c2a <__vector_17+0x410>
    3c28:	b8 cf       	rjmp	.-144    	; 0x3b9a <__vector_17+0x380>
    3c2a:	ad cf       	rjmp	.-166    	; 0x3b86 <__vector_17+0x36c>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    3c2c:	e1 88       	ldd	r14, Z+17	; 0x11
    3c2e:	f2 88       	ldd	r15, Z+18	; 0x12
    3c30:	03 89       	ldd	r16, Z+19	; 0x13
    3c32:	14 89       	ldd	r17, Z+20	; 0x14
    3c34:	77 ce       	rjmp	.-786    	; 0x3924 <__vector_17+0x10a>
      counter_c -= current_block->step_event_count;
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    3c36:	10 92 df 03 	sts	0x03DF, r1
    3c3a:	10 92 de 03 	sts	0x03DE, r1
      plan_discard_current_block();
    3c3e:	0e 94 09 0a 	call	0x1412	; 0x1412 <plan_discard_current_block>
    3c42:	13 cf       	rjmp	.-474    	; 0x3a6a <__vector_17+0x250>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3c44:	25 89       	ldd	r18, Z+21	; 0x15
    3c46:	36 89       	ldd	r19, Z+22	; 0x16
    3c48:	47 89       	ldd	r20, Z+23	; 0x17
    3c4a:	50 8d       	ldd	r21, Z+24	; 0x18
    3c4c:	80 91 00 04 	lds	r24, 0x0400
    3c50:	90 91 01 04 	lds	r25, 0x0401
    3c54:	a0 91 02 04 	lds	r26, 0x0402
    3c58:	b0 91 03 04 	lds	r27, 0x0403
    3c5c:	28 17       	cp	r18, r24
    3c5e:	39 07       	cpc	r19, r25
    3c60:	4a 07       	cpc	r20, r26
    3c62:	5b 07       	cpc	r21, r27
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <__vector_17+0x44e>
    3c66:	9d cf       	rjmp	.-198    	; 0x3ba2 <__vector_17+0x388>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3c68:	20 93 00 04 	sts	0x0400, r18
    3c6c:	30 93 01 04 	sts	0x0401, r19
    3c70:	40 93 02 04 	sts	0x0402, r20
    3c74:	50 93 03 04 	sts	0x0403, r21
    3c78:	90 cf       	rjmp	.-224    	; 0x3b9a <__vector_17+0x380>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    3c7a:	0e 94 22 0a 	call	0x1444	; 0x1444 <plan_get_current_block>
    3c7e:	ec 01       	movw	r28, r24
    3c80:	90 93 df 03 	sts	0x03DF, r25
    3c84:	80 93 de 03 	sts	0x03DE, r24
    if (current_block != NULL) {
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <__vector_17+0x474>
    3c8c:	52 c0       	rjmp	.+164    	; 0x3d32 <__vector_17+0x518>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    3c90:	7e a9       	ldd	r23, Y+54	; 0x36
    3c92:	8f a9       	ldd	r24, Y+55	; 0x37
    3c94:	98 ad       	ldd	r25, Y+56	; 0x38
    3c96:	60 93 00 04 	sts	0x0400, r22
    3c9a:	70 93 01 04 	sts	0x0401, r23
    3c9e:	80 93 02 04 	sts	0x0402, r24
    3ca2:	90 93 03 04 	sts	0x0403, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    3ca6:	10 92 fc 03 	sts	0x03FC, r1
    3caa:	10 92 fd 03 	sts	0x03FD, r1
    3cae:	10 92 fe 03 	sts	0x03FE, r1
    3cb2:	10 92 ff 03 	sts	0x03FF, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    3cb6:	0e 94 8d 1b 	call	0x371a	; 0x371a <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    3cba:	89 89       	ldd	r24, Y+17	; 0x11
    3cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    3cbe:	ab 89       	ldd	r26, Y+19	; 0x13
    3cc0:	bc 89       	ldd	r27, Y+20	; 0x14
    3cc2:	b5 95       	asr	r27
    3cc4:	a7 95       	ror	r26
    3cc6:	97 95       	ror	r25
    3cc8:	87 95       	ror	r24
    3cca:	b0 95       	com	r27
    3ccc:	a0 95       	com	r26
    3cce:	90 95       	com	r25
    3cd0:	81 95       	neg	r24
    3cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd4:	af 4f       	sbci	r26, 0xFF	; 255
    3cd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd8:	80 93 e2 03 	sts	0x03E2, r24
    3cdc:	90 93 e3 03 	sts	0x03E3, r25
    3ce0:	a0 93 e4 03 	sts	0x03E4, r26
    3ce4:	b0 93 e5 03 	sts	0x03E5, r27
      counter_y = counter_x;
    3ce8:	80 93 e6 03 	sts	0x03E6, r24
    3cec:	90 93 e7 03 	sts	0x03E7, r25
    3cf0:	a0 93 e8 03 	sts	0x03E8, r26
    3cf4:	b0 93 e9 03 	sts	0x03E9, r27
      counter_z = counter_x;
    3cf8:	80 93 ea 03 	sts	0x03EA, r24
    3cfc:	90 93 eb 03 	sts	0x03EB, r25
    3d00:	a0 93 ec 03 	sts	0x03EC, r26
    3d04:	b0 93 ed 03 	sts	0x03ED, r27
      counter_c = counter_x;
    3d08:	80 93 ee 03 	sts	0x03EE, r24
    3d0c:	90 93 ef 03 	sts	0x03EF, r25
    3d10:	a0 93 f0 03 	sts	0x03F0, r26
    3d14:	b0 93 f1 03 	sts	0x03F1, r27
      step_events_completed = 0;
    3d18:	10 92 f2 03 	sts	0x03F2, r1
    3d1c:	10 92 f3 03 	sts	0x03F3, r1
    3d20:	10 92 f4 03 	sts	0x03F4, r1
    3d24:	10 92 f5 03 	sts	0x03F5, r1
    3d28:	e0 91 de 03 	lds	r30, 0x03DE
    3d2c:	f0 91 df 03 	lds	r31, 0x03DF
    3d30:	c3 cd       	rjmp	.-1146   	; 0x38b8 <__vector_17+0x9e>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    3d32:	80 91 6f 00 	lds	r24, 0x006F
    3d36:	8d 7f       	andi	r24, 0xFD	; 253
    3d38:	80 93 6f 00 	sts	0x006F, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    3d3c:	10 92 e0 03 	sts	0x03E0, r1
    3d40:	94 ce       	rjmp	.-728    	; 0x3a6a <__vector_17+0x250>

00003d42 <st_go_home>:
	// default direction is to go left and forward
	unsigned char xDir = LEFT;
	unsigned char yDir = FORWARD;

	// not homed
	gHomed = FALSE;
    3d42:	10 92 dd 03 	sts	0x03DD, r1

	// no interrupts
	cli();
    3d46:	f8 94       	cli

	printPgmString(PSTR("homing\r\n"));
    3d48:	8d ec       	ldi	r24, 0xCD	; 205
    3d4a:	95 e0       	ldi	r25, 0x05	; 5
    3d4c:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    3d50:	4b 99       	sbic	0x09, 3	; 9
    3d52:	66 c0       	rjmp	.+204    	; 0x3e20 <st_go_home+0xde>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    3d54:	48 99       	sbic	0x09, 0	; 9
    3d56:	41 c0       	rjmp	.+130    	; 0x3dda <st_go_home+0x98>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d58:	45 e2       	ldi	r20, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d5a:	20 e6       	ldi	r18, 0x60	; 96
    3d5c:	34 e0       	ldi	r19, 0x04	; 4

	// at here, we are definitely not in home, and also not in the XL2/Yl2 limits
	do {

		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    3d5e:	04 99       	sbic	0x00, 4	; 0
    3d60:	12 c0       	rjmp	.+36     	; 0x3d86 <st_go_home+0x44>
};

void moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3d62:	81 b3       	in	r24, 0x11	; 17
    3d64:	85 73       	andi	r24, 0x35	; 53
    3d66:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3d68:	81 b3       	in	r24, 0x11	; 17
    3d6a:	8a 7c       	andi	r24, 0xCA	; 202
    3d6c:	81 60       	ori	r24, 0x01	; 1
    3d6e:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d70:	84 2f       	mov	r24, r20
    3d72:	8a 95       	dec	r24
    3d74:	f1 f7       	brne	.-4      	; 0x3d72 <st_go_home+0x30>
	 _delay_us( 7 ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3d76:	81 b3       	in	r24, 0x11	; 17
    3d78:	8a 7c       	andi	r24, 0xCA	; 202
    3d7a:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d7c:	c9 01       	movw	r24, r18
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <st_go_home+0x3c>

	// at here, we are definitely not in home, and also not in the XL2/Yl2 limits
	do {

		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    3d82:	04 9b       	sbis	0x00, 4	; 0
    3d84:	ee cf       	rjmp	.-36     	; 0x3d62 <st_go_home+0x20>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d86:	45 e2       	ldi	r20, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d88:	20 e6       	ldi	r18, 0x60	; 96
    3d8a:	34 e0       	ldi	r19, 0x04	; 4


	}while( xDir != STOP );

	do {
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    3d8c:	90 9b       	sbis	0x12, 0	; 18
    3d8e:	0c c0       	rjmp	.+24     	; 0x3da8 <st_go_home+0x66>
			moveForward(1);
		}

	} while( yDir != STOP );

	sei();
    3d90:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )
    3d92:	89 b1       	in	r24, 0x09	; 9
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	8f 70       	andi	r24, 0x0F	; 15
    3d98:	90 70       	andi	r25, 0x00	; 0
    3d9a:	89 2b       	or	r24, r25
    3d9c:	b1 f0       	breq	.+44     	; 0x3dca <st_go_home+0x88>
		gHomed = TRUE ;
		printPgmString(PSTR("pickobear is homed\r\n"));
		return;
	}

	printPgmString(PSTR("pickobear is not homed\r\n"));
    3d9e:	8f e9       	ldi	r24, 0x9F	; 159
    3da0:	95 e0       	ldi	r25, 0x05	; 5
    3da2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    3da6:	08 95       	ret
}

void moveForward( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3da8:	81 b3       	in	r24, 0x11	; 17
    3daa:	85 73       	andi	r24, 0x35	; 53
    3dac:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3dae:	81 b3       	in	r24, 0x11	; 17
    3db0:	8a 7c       	andi	r24, 0xCA	; 202
    3db2:	84 60       	ori	r24, 0x04	; 4
    3db4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3db6:	84 2f       	mov	r24, r20
    3db8:	8a 95       	dec	r24
    3dba:	f1 f7       	brne	.-4      	; 0x3db8 <st_go_home+0x76>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3dbc:	81 b3       	in	r24, 0x11	; 17
    3dbe:	8a 7c       	andi	r24, 0xCA	; 202
    3dc0:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dc2:	c9 01       	movw	r24, r18
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <st_go_home+0x82>
    3dc8:	e1 cf       	rjmp	.-62     	; 0x3d8c <st_go_home+0x4a>
	sei();


  if( ( LIMIT_PIN & 0xf) == 0x0 )
   {
		gHomed = TRUE ;
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	80 93 dd 03 	sts	0x03DD, r24
		printPgmString(PSTR("pickobear is homed\r\n"));
    3dd0:	88 eb       	ldi	r24, 0xB8	; 184
    3dd2:	95 e0       	ldi	r25, 0x05	; 5
    3dd4:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
    3dd8:	08 95       	ret
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
		// no longer homed
		gHomed = FALSE;
    3dda:	10 92 dd 03 	sts	0x03DD, r1
		printPgmString(PSTR("yLimit1\r\n"));
    3dde:	80 ee       	ldi	r24, 0xE0	; 224
    3de0:	95 e0       	ldi	r25, 0x05	; 5
    3de2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
}

void moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    3de6:	81 b3       	in	r24, 0x11	; 17
    3de8:	85 73       	andi	r24, 0x35	; 53
    3dea:	88 60       	ori	r24, 0x08	; 8
    3dec:	81 bb       	out	0x11, r24	; 17
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3df2:	65 e2       	ldi	r22, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3df4:	40 e6       	ldi	r20, 0x60	; 96
    3df6:	54 e0       	ldi	r21, 0x04	; 4
  // Then pulse the stepping pins
  while(distance--) {
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3df8:	81 b3       	in	r24, 0x11	; 17
    3dfa:	8a 7c       	andi	r24, 0xCA	; 202
    3dfc:	84 60       	ori	r24, 0x04	; 4
    3dfe:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e00:	86 2f       	mov	r24, r22
    3e02:	8a 95       	dec	r24
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <st_go_home+0xc0>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3e06:	81 b3       	in	r24, 0x11	; 17
    3e08:	8a 7c       	andi	r24, 0xCA	; 202
    3e0a:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e0c:	ca 01       	movw	r24, r20
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	f1 f7       	brne	.-4      	; 0x3e0e <st_go_home+0xcc>
    3e12:	2f 5f       	subi	r18, 0xFF	; 255
    3e14:	3f 4f       	sbci	r19, 0xFF	; 255
void moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3e16:	83 e0       	ldi	r24, 0x03	; 3
    3e18:	28 3e       	cpi	r18, 0xE8	; 232
    3e1a:	38 07       	cpc	r19, r24
    3e1c:	69 f7       	brne	.-38     	; 0x3df8 <st_go_home+0xb6>
    3e1e:	9c cf       	rjmp	.-200    	; 0x3d58 <st_go_home+0x16>
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
		// no longer homed
		gHomed = FALSE;
    3e20:	10 92 dd 03 	sts	0x03DD, r1
		printPgmString(PSTR("xLimit1\r\n"));
    3e24:	86 ed       	ldi	r24, 0xD6	; 214
    3e26:	95 e0       	ldi	r25, 0x05	; 5
    3e28:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>
}

void moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    3e2c:	81 b3       	in	r24, 0x11	; 17
    3e2e:	85 73       	andi	r24, 0x35	; 53
    3e30:	82 60       	ori	r24, 0x02	; 2
    3e32:	81 bb       	out	0x11, r24	; 17
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e38:	65 e2       	ldi	r22, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e3a:	40 e6       	ldi	r20, 0x60	; 96
    3e3c:	54 e0       	ldi	r21, 0x04	; 4
  // Then pulse the stepping pins
  while(distance--) {
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3e3e:	81 b3       	in	r24, 0x11	; 17
    3e40:	8a 7c       	andi	r24, 0xCA	; 202
    3e42:	81 60       	ori	r24, 0x01	; 1
    3e44:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e46:	86 2f       	mov	r24, r22
    3e48:	8a 95       	dec	r24
    3e4a:	f1 f7       	brne	.-4      	; 0x3e48 <st_go_home+0x106>
	 _delay_us( 7 ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    3e4c:	81 b3       	in	r24, 0x11	; 17
    3e4e:	8a 7c       	andi	r24, 0xCA	; 202
    3e50:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e52:	ca 01       	movw	r24, r20
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	f1 f7       	brne	.-4      	; 0x3e54 <st_go_home+0x112>
    3e58:	2f 5f       	subi	r18, 0xFF	; 255
    3e5a:	3f 4f       	sbci	r19, 0xFF	; 255
void moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3e5c:	83 e0       	ldi	r24, 0x03	; 3
    3e5e:	28 3e       	cpi	r18, 0xE8	; 232
    3e60:	38 07       	cpc	r19, r24
    3e62:	69 f7       	brne	.-38     	; 0x3e3e <st_go_home+0xfc>
    3e64:	77 cf       	rjmp	.-274    	; 0x3d54 <st_go_home+0x12>

00003e66 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    3e66:	80 b3       	in	r24, 0x10	; 16
    3e68:	85 63       	ori	r24, 0x35	; 53
    3e6a:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    3e6c:	80 b3       	in	r24, 0x10	; 16
    3e6e:	8a 6c       	ori	r24, 0xCA	; 202
    3e70:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    3e72:	81 b3       	in	r24, 0x11	; 17
    3e74:	8a 7c       	andi	r24, 0xCA	; 202
    3e76:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    3e78:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3e7a:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    3e7c:	a1 e8       	ldi	r26, 0x81	; 129
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	8c 91       	ld	r24, X
    3e82:	8f 7e       	andi	r24, 0xEF	; 239
    3e84:	8c 93       	st	X, r24
	TCCR1B |=  (1<<WGM12);
    3e86:	8c 91       	ld	r24, X
    3e88:	88 60       	ori	r24, 0x08	; 8
    3e8a:	8c 93       	st	X, r24
	TCCR1A &= ~(1<<WGM11); 
    3e8c:	e0 e8       	ldi	r30, 0x80	; 128
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	80 81       	ld	r24, Z
    3e92:	8d 7f       	andi	r24, 0xFD	; 253
    3e94:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    3e96:	80 81       	ld	r24, Z
    3e98:	8e 7f       	andi	r24, 0xFE	; 254
    3e9a:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    3e9c:	80 81       	ld	r24, Z
    3e9e:	8f 73       	andi	r24, 0x3F	; 63
    3ea0:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    3ea2:	80 81       	ld	r24, Z
    3ea4:	8f 7c       	andi	r24, 0xCF	; 207
    3ea6:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    3ea8:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3eac:	82 e0       	ldi	r24, 0x02	; 2
    3eae:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    3eb2:	e0 e7       	ldi	r30, 0x70	; 112
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	80 81       	ld	r24, Z
    3eb8:	81 60       	ori	r24, 0x01	; 1
    3eba:	80 83       	st	Z, r24
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3ebc:	8c 91       	ld	r24, X
    3ebe:	88 7f       	andi	r24, 0xF8	; 248
    3ec0:	82 60       	ori	r24, 0x02	; 2
    3ec2:	8c 93       	st	X, r24
  // Set ceiling
  OCR1A = ceiling;
    3ec4:	80 e2       	ldi	r24, 0x20	; 32
    3ec6:	9e e4       	ldi	r25, 0x4E	; 78
    3ec8:	90 93 89 00 	sts	0x0089, r25
    3ecc:	80 93 88 00 	sts	0x0088, r24
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	91 e7       	ldi	r25, 0x71	; 113
    3ed4:	a2 e0       	ldi	r26, 0x02	; 2
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	80 93 f8 03 	sts	0x03F8, r24
    3edc:	90 93 f9 03 	sts	0x03F9, r25
    3ee0:	a0 93 fa 03 	sts	0x03FA, r26
    3ee4:	b0 93 fb 03 	sts	0x03FB, r27
  TCCR2A = 0;         // Normal operation
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
  TIMSK2 |= (1<<TOIE2);      
  
  set_step_events_per_minute(6000);
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    3ee8:	ef e6       	ldi	r30, 0x6F	; 111
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	80 81       	ld	r24, Z
    3eee:	8d 7f       	andi	r24, 0xFD	; 253
    3ef0:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    3ef2:	10 92 fc 03 	sts	0x03FC, r1
    3ef6:	10 92 fd 03 	sts	0x03FD, r1
    3efa:	10 92 fe 03 	sts	0x03FE, r1
    3efe:	10 92 ff 03 	sts	0x03FF, r1
  
  sei();
    3f02:	78 94       	sei
}
    3f04:	08 95       	ret

00003f06 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3f06:	ef 92       	push	r14
    3f08:	ff 92       	push	r15
    3f0a:	0f 93       	push	r16
    3f0c:	1f 93       	push	r17
    3f0e:	7b 01       	movw	r14, r22
    3f10:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    3f12:	22 e0       	ldi	r18, 0x02	; 2
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	40 e0       	ldi	r20, 0x00	; 0
    3f18:	50 e0       	ldi	r21, 0x00	; 0
    3f1a:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__divmodsi4>
    3f1e:	20 5c       	subi	r18, 0xC0	; 192
    3f20:	3d 4b       	sbci	r19, 0xBD	; 189
    3f22:	40 4f       	sbci	r20, 0xF0	; 240
    3f24:	5f 4f       	sbci	r21, 0xFF	; 255
    3f26:	ca 01       	movw	r24, r20
    3f28:	b9 01       	movw	r22, r18
    3f2a:	a8 01       	movw	r20, r16
    3f2c:	97 01       	movw	r18, r14
    3f2e:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    3f32:	c9 01       	movw	r24, r18
    3f34:	da 01       	movw	r26, r20
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	a1 09       	sbc	r26, r1
    3f3a:	b1 09       	sbc	r27, r1
    3f3c:	29 2f       	mov	r18, r25
    3f3e:	3a 2f       	mov	r19, r26
    3f40:	4b 2f       	mov	r20, r27
    3f42:	55 27       	eor	r21, r21
    3f44:	01 96       	adiw	r24, 0x01	; 1
    3f46:	a1 1d       	adc	r26, r1
    3f48:	b1 1d       	adc	r27, r1
    3f4a:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3f4e:	81 50       	subi	r24, 0x01	; 1
    3f50:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3f54:	e0 ec       	ldi	r30, 0xC0	; 192
    3f56:	f0 e0       	ldi	r31, 0x00	; 0
    3f58:	80 81       	ld	r24, Z
    3f5a:	8d 7f       	andi	r24, 0xFD	; 253
    3f5c:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    3f5e:	e1 ec       	ldi	r30, 0xC1	; 193
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	80 61       	ori	r24, 0x10	; 16
    3f66:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3f68:	80 81       	ld	r24, Z
    3f6a:	88 60       	ori	r24, 0x08	; 8
    3f6c:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3f6e:	80 81       	ld	r24, Z
    3f70:	80 68       	ori	r24, 0x80	; 128
    3f72:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3f74:	1f 91       	pop	r17
    3f76:	0f 91       	pop	r16
    3f78:	ff 90       	pop	r15
    3f7a:	ef 90       	pop	r14
    3f7c:	08 95       	ret

00003f7e <serialWrite>:

void serialWrite(unsigned char c)
{
    3f7e:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3f80:	80 91 c0 00 	lds	r24, 0x00C0
    3f84:	85 ff       	sbrs	r24, 5
    3f86:	fc cf       	rjmp	.-8      	; 0x3f80 <serialWrite+0x2>
		;
	UDR0 = c;
    3f88:	90 93 c6 00 	sts	0x00C6, r25
}
    3f8c:	08 95       	ret

00003f8e <serialAvailable>:

int serialAvailable()
{
    3f8e:	80 91 04 04 	lds	r24, 0x0404
    3f92:	90 91 05 04 	lds	r25, 0x0405
    3f96:	80 50       	subi	r24, 0x00	; 0
    3f98:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9a:	20 91 06 04 	lds	r18, 0x0406
    3f9e:	30 91 07 04 	lds	r19, 0x0407
    3fa2:	82 1b       	sub	r24, r18
    3fa4:	93 0b       	sbc	r25, r19
    3fa6:	60 e0       	ldi	r22, 0x00	; 0
    3fa8:	71 e0       	ldi	r23, 0x01	; 1
    3faa:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3fae:	08 95       	ret

00003fb0 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3fb0:	40 91 06 04 	lds	r20, 0x0406
    3fb4:	50 91 07 04 	lds	r21, 0x0407
    3fb8:	80 91 04 04 	lds	r24, 0x0404
    3fbc:	90 91 05 04 	lds	r25, 0x0405
    3fc0:	84 17       	cp	r24, r20
    3fc2:	95 07       	cpc	r25, r21
    3fc4:	89 f0       	breq	.+34     	; 0x3fe8 <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3fc6:	fa 01       	movw	r30, r20
    3fc8:	e8 5f       	subi	r30, 0xF8	; 248
    3fca:	fb 4f       	sbci	r31, 0xFB	; 251
    3fcc:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3fce:	ca 01       	movw	r24, r20
    3fd0:	01 96       	adiw	r24, 0x01	; 1
    3fd2:	60 e0       	ldi	r22, 0x00	; 0
    3fd4:	71 e0       	ldi	r23, 0x01	; 1
    3fd6:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    3fda:	90 93 07 04 	sts	0x0407, r25
    3fde:	80 93 06 04 	sts	0x0406, r24
		return c;
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3fe4:	c9 01       	movw	r24, r18
    3fe6:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3fe8:	2f ef       	ldi	r18, 0xFF	; 255
    3fea:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3fec:	c9 01       	movw	r24, r18
    3fee:	08 95       	ret

00003ff0 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3ff0:	80 91 06 04 	lds	r24, 0x0406
    3ff4:	90 91 07 04 	lds	r25, 0x0407
    3ff8:	90 93 05 04 	sts	0x0405, r25
    3ffc:	80 93 04 04 	sts	0x0404, r24
}
    4000:	08 95       	ret

00004002 <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    4002:	1f 92       	push	r1
    4004:	0f 92       	push	r0
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	0f 92       	push	r0
    400a:	0b b6       	in	r0, 0x3b	; 59
    400c:	0f 92       	push	r0
    400e:	11 24       	eor	r1, r1
    4010:	2f 93       	push	r18
    4012:	3f 93       	push	r19
    4014:	4f 93       	push	r20
    4016:	5f 93       	push	r21
    4018:	6f 93       	push	r22
    401a:	7f 93       	push	r23
    401c:	8f 93       	push	r24
    401e:	9f 93       	push	r25
    4020:	af 93       	push	r26
    4022:	bf 93       	push	r27
    4024:	ef 93       	push	r30
    4026:	ff 93       	push	r31
	unsigned char c = UDR0;
    4028:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    402c:	e0 91 04 04 	lds	r30, 0x0404
    4030:	f0 91 05 04 	lds	r31, 0x0405
    4034:	cf 01       	movw	r24, r30
    4036:	01 96       	adiw	r24, 0x01	; 1
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	71 e0       	ldi	r23, 0x01	; 1
    403c:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__divmodhi4>
    4040:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    4042:	80 91 06 04 	lds	r24, 0x0406
    4046:	90 91 07 04 	lds	r25, 0x0407
    404a:	28 17       	cp	r18, r24
    404c:	39 07       	cpc	r19, r25
    404e:	39 f0       	breq	.+14     	; 0x405e <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    4050:	e8 5f       	subi	r30, 0xF8	; 248
    4052:	fb 4f       	sbci	r31, 0xFB	; 251
    4054:	40 83       	st	Z, r20
		rx_buffer_head = i;
    4056:	30 93 05 04 	sts	0x0405, r19
    405a:	20 93 04 04 	sts	0x0404, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    405e:	ff 91       	pop	r31
    4060:	ef 91       	pop	r30
    4062:	bf 91       	pop	r27
    4064:	af 91       	pop	r26
    4066:	9f 91       	pop	r25
    4068:	8f 91       	pop	r24
    406a:	7f 91       	pop	r23
    406c:	6f 91       	pop	r22
    406e:	5f 91       	pop	r21
    4070:	4f 91       	pop	r20
    4072:	3f 91       	pop	r19
    4074:	2f 91       	pop	r18
    4076:	0f 90       	pop	r0
    4078:	0b be       	out	0x3b, r0	; 59
    407a:	0f 90       	pop	r0
    407c:	0f be       	out	0x3f, r0	; 63
    407e:	0f 90       	pop	r0
    4080:	1f 90       	pop	r1
    4082:	18 95       	reti

00004084 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    4084:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4086:	80 91 c0 00 	lds	r24, 0x00C0
    408a:	85 ff       	sbrs	r24, 5
    408c:	fc cf       	rjmp	.-8      	; 0x4086 <printByte+0x2>
		;
	UDR0 = c;
    408e:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    4092:	08 95       	ret

00004094 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    4094:	fc 01       	movw	r30, r24
	while (*s)
    4096:	90 81       	ld	r25, Z
    4098:	99 23       	and	r25, r25
    409a:	51 f0       	breq	.+20     	; 0x40b0 <printString+0x1c>
		printByte(*s++);
    409c:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    409e:	80 91 c0 00 	lds	r24, 0x00C0
    40a2:	85 ff       	sbrs	r24, 5
    40a4:	fc cf       	rjmp	.-8      	; 0x409e <printString+0xa>
		;
	UDR0 = c;
    40a6:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    40aa:	90 81       	ld	r25, Z
    40ac:	99 23       	and	r25, r25
    40ae:	b1 f7       	brne	.-20     	; 0x409c <printString+0x8>
    40b0:	08 95       	ret

000040b2 <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    40b2:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    40b4:	94 91       	lpm	r25, Z+
    40b6:	99 23       	and	r25, r25
    40b8:	51 f0       	breq	.+20     	; 0x40ce <printPgmString+0x1c>
    40ba:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    40bc:	80 91 c0 00 	lds	r24, 0x00C0
    40c0:	85 ff       	sbrs	r24, 5
    40c2:	fc cf       	rjmp	.-8      	; 0x40bc <printPgmString+0xa>
		;
	UDR0 = c;
    40c4:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    40c8:	94 91       	lpm	r25, Z+
    40ca:	99 23       	and	r25, r25
    40cc:	b1 f7       	brne	.-20     	; 0x40ba <printPgmString+0x8>
    40ce:	08 95       	ret

000040d0 <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    40d0:	2f 92       	push	r2
    40d2:	3f 92       	push	r3
    40d4:	4f 92       	push	r4
    40d6:	5f 92       	push	r5
    40d8:	6f 92       	push	r6
    40da:	7f 92       	push	r7
    40dc:	8f 92       	push	r8
    40de:	9f 92       	push	r9
    40e0:	af 92       	push	r10
    40e2:	bf 92       	push	r11
    40e4:	cf 92       	push	r12
    40e6:	df 92       	push	r13
    40e8:	ef 92       	push	r14
    40ea:	ff 92       	push	r15
    40ec:	0f 93       	push	r16
    40ee:	1f 93       	push	r17
    40f0:	df 93       	push	r29
    40f2:	cf 93       	push	r28
    40f4:	cd b7       	in	r28, 0x3d	; 61
    40f6:	de b7       	in	r29, 0x3e	; 62
    40f8:	a0 97       	sbiw	r28, 0x20	; 32
    40fa:	0f b6       	in	r0, 0x3f	; 63
    40fc:	f8 94       	cli
    40fe:	de bf       	out	0x3e, r29	; 62
    4100:	0f be       	out	0x3f, r0	; 63
    4102:	cd bf       	out	0x3d, r28	; 61
    4104:	6b 01       	movw	r12, r22
    4106:	7c 01       	movw	r14, r24
    4108:	29 01       	movw	r4, r18
    410a:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    410c:	61 15       	cp	r22, r1
    410e:	71 05       	cpc	r23, r1
    4110:	81 05       	cpc	r24, r1
    4112:	91 05       	cpc	r25, r1
    4114:	09 f4       	brne	.+2      	; 0x4118 <printIntegerInBase+0x48>
    4116:	50 c0       	rjmp	.+160    	; 0x41b8 <printIntegerInBase+0xe8>
		printByte('0');
		return;
    4118:	88 24       	eor	r8, r8
    411a:	99 24       	eor	r9, r9
    411c:	54 01       	movw	r10, r8
    411e:	1e 01       	movw	r2, r28
    4120:	08 94       	sec
    4122:	21 1c       	adc	r2, r1
    4124:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    4126:	81 01       	movw	r16, r2
    4128:	08 0d       	add	r16, r8
    412a:	19 1d       	adc	r17, r9
    412c:	c7 01       	movw	r24, r14
    412e:	b6 01       	movw	r22, r12
    4130:	a3 01       	movw	r20, r6
    4132:	92 01       	movw	r18, r4
    4134:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    4138:	f8 01       	movw	r30, r16
    413a:	60 83       	st	Z, r22
    413c:	08 94       	sec
    413e:	81 1c       	adc	r8, r1
    4140:	91 1c       	adc	r9, r1
    4142:	a1 1c       	adc	r10, r1
    4144:	b1 1c       	adc	r11, r1
		n /= base;
    4146:	c7 01       	movw	r24, r14
    4148:	b6 01       	movw	r22, r12
    414a:	a3 01       	movw	r20, r6
    414c:	92 01       	movw	r18, r4
    414e:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    4152:	c9 01       	movw	r24, r18
    4154:	da 01       	movw	r26, r20
    4156:	6c 01       	movw	r12, r24
    4158:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    415a:	c1 14       	cp	r12, r1
    415c:	d1 04       	cpc	r13, r1
    415e:	e1 04       	cpc	r14, r1
    4160:	f1 04       	cpc	r15, r1
    4162:	09 f7       	brne	.-62     	; 0x4126 <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    4164:	81 14       	cp	r8, r1
    4166:	91 04       	cpc	r9, r1
    4168:	a1 04       	cpc	r10, r1
    416a:	b1 04       	cpc	r11, r1
    416c:	61 f1       	breq	.+88     	; 0x41c6 <printIntegerInBase+0xf6>
    416e:	91 01       	movw	r18, r2
    4170:	28 0d       	add	r18, r8
    4172:	39 1d       	adc	r19, r9
    4174:	d5 01       	movw	r26, r10
    4176:	c4 01       	movw	r24, r8
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	a1 09       	sbc	r26, r1
    417c:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    417e:	ac 01       	movw	r20, r24
    4180:	48 19       	sub	r20, r8
    4182:	59 09       	sbc	r21, r9
    4184:	fa 01       	movw	r30, r20
    4186:	e2 0f       	add	r30, r18
    4188:	f3 1f       	adc	r31, r19
    418a:	e0 81       	ld	r30, Z
    418c:	ea 30       	cpi	r30, 0x0A	; 10
    418e:	90 f4       	brcc	.+36     	; 0x41b4 <printIntegerInBase+0xe4>
    4190:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4192:	80 91 c0 00 	lds	r24, 0x00C0
    4196:	85 ff       	sbrs	r24, 5
    4198:	fc cf       	rjmp	.-8      	; 0x4192 <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    419a:	e0 93 c6 00 	sts	0x00C6, r30
    419e:	21 50       	subi	r18, 0x01	; 1
    41a0:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    41a2:	22 16       	cp	r2, r18
    41a4:	33 06       	cpc	r3, r19
    41a6:	79 f0       	breq	.+30     	; 0x41c6 <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    41a8:	fa 01       	movw	r30, r20
    41aa:	e2 0f       	add	r30, r18
    41ac:	f3 1f       	adc	r31, r19
    41ae:	e0 81       	ld	r30, Z
    41b0:	ea 30       	cpi	r30, 0x0A	; 10
    41b2:	70 f3       	brcs	.-36     	; 0x4190 <printIntegerInBase+0xc0>
    41b4:	e9 5c       	subi	r30, 0xC9	; 201
    41b6:	ed cf       	rjmp	.-38     	; 0x4192 <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    41b8:	80 91 c0 00 	lds	r24, 0x00C0
    41bc:	85 ff       	sbrs	r24, 5
    41be:	fc cf       	rjmp	.-8      	; 0x41b8 <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    41c0:	80 e3       	ldi	r24, 0x30	; 48
    41c2:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    41c6:	a0 96       	adiw	r28, 0x20	; 32
    41c8:	0f b6       	in	r0, 0x3f	; 63
    41ca:	f8 94       	cli
    41cc:	de bf       	out	0x3e, r29	; 62
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	cd bf       	out	0x3d, r28	; 61
    41d2:	cf 91       	pop	r28
    41d4:	df 91       	pop	r29
    41d6:	1f 91       	pop	r17
    41d8:	0f 91       	pop	r16
    41da:	ff 90       	pop	r15
    41dc:	ef 90       	pop	r14
    41de:	df 90       	pop	r13
    41e0:	cf 90       	pop	r12
    41e2:	bf 90       	pop	r11
    41e4:	af 90       	pop	r10
    41e6:	9f 90       	pop	r9
    41e8:	8f 90       	pop	r8
    41ea:	7f 90       	pop	r7
    41ec:	6f 90       	pop	r6
    41ee:	5f 90       	pop	r5
    41f0:	4f 90       	pop	r4
    41f2:	3f 90       	pop	r3
    41f4:	2f 90       	pop	r2
    41f6:	08 95       	ret

000041f8 <printInteger>:

void printInteger(long n)
{
    41f8:	6f 92       	push	r6
    41fa:	7f 92       	push	r7
    41fc:	8f 92       	push	r8
    41fe:	9f 92       	push	r9
    4200:	af 92       	push	r10
    4202:	bf 92       	push	r11
    4204:	cf 92       	push	r12
    4206:	df 92       	push	r13
    4208:	ef 92       	push	r14
    420a:	ff 92       	push	r15
    420c:	0f 93       	push	r16
    420e:	1f 93       	push	r17
    4210:	df 93       	push	r29
    4212:	cf 93       	push	r28
    4214:	cd b7       	in	r28, 0x3d	; 61
    4216:	de b7       	in	r29, 0x3e	; 62
    4218:	a0 97       	sbiw	r28, 0x20	; 32
    421a:	0f b6       	in	r0, 0x3f	; 63
    421c:	f8 94       	cli
    421e:	de bf       	out	0x3e, r29	; 62
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	cd bf       	out	0x3d, r28	; 61
    4224:	9b 01       	movw	r18, r22
    4226:	ac 01       	movw	r20, r24
	if (n < 0) {
    4228:	97 fd       	sbrc	r25, 7
    422a:	78 c0       	rjmp	.+240    	; 0x431c <printInteger+0x124>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    422c:	69 01       	movw	r12, r18
    422e:	7a 01       	movw	r14, r20
void printIntegerInBase(unsigned long n, unsigned long base)
{ 
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    4230:	21 15       	cp	r18, r1
    4232:	31 05       	cpc	r19, r1
    4234:	41 05       	cpc	r20, r1
    4236:	51 05       	cpc	r21, r1
    4238:	09 f4       	brne	.+2      	; 0x423c <printInteger+0x44>
    423a:	54 c0       	rjmp	.+168    	; 0x42e4 <printInteger+0xec>

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    423c:	88 24       	eor	r8, r8
    423e:	99 24       	eor	r9, r9
    4240:	54 01       	movw	r10, r8
    4242:	3e 01       	movw	r6, r28
    4244:	08 94       	sec
    4246:	61 1c       	adc	r6, r1
    4248:	71 1c       	adc	r7, r1
		printByte('0');
		return;
	} 

	while (n > 0) {
		buf[i++] = n % base;
    424a:	83 01       	movw	r16, r6
    424c:	08 0d       	add	r16, r8
    424e:	19 1d       	adc	r17, r9
    4250:	c7 01       	movw	r24, r14
    4252:	b6 01       	movw	r22, r12
    4254:	2a e0       	ldi	r18, 0x0A	; 10
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	40 e0       	ldi	r20, 0x00	; 0
    425a:	50 e0       	ldi	r21, 0x00	; 0
    425c:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    4260:	f8 01       	movw	r30, r16
    4262:	60 83       	st	Z, r22
    4264:	08 94       	sec
    4266:	81 1c       	adc	r8, r1
    4268:	91 1c       	adc	r9, r1
    426a:	a1 1c       	adc	r10, r1
    426c:	b1 1c       	adc	r11, r1
		n /= base;
    426e:	c7 01       	movw	r24, r14
    4270:	b6 01       	movw	r22, r12
    4272:	2a e0       	ldi	r18, 0x0A	; 10
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	50 e0       	ldi	r21, 0x00	; 0
    427a:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    427e:	c9 01       	movw	r24, r18
    4280:	da 01       	movw	r26, r20
    4282:	6c 01       	movw	r12, r24
    4284:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    4286:	c1 14       	cp	r12, r1
    4288:	d1 04       	cpc	r13, r1
    428a:	e1 04       	cpc	r14, r1
    428c:	f1 04       	cpc	r15, r1
    428e:	e9 f6       	brne	.-70     	; 0x424a <printInteger+0x52>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    4290:	81 14       	cp	r8, r1
    4292:	91 04       	cpc	r9, r1
    4294:	a1 04       	cpc	r10, r1
    4296:	b1 04       	cpc	r11, r1
    4298:	61 f1       	breq	.+88     	; 0x42f2 <printInteger+0xfa>
    429a:	93 01       	movw	r18, r6
    429c:	28 0d       	add	r18, r8
    429e:	39 1d       	adc	r19, r9
    42a0:	d5 01       	movw	r26, r10
    42a2:	c4 01       	movw	r24, r8
    42a4:	01 97       	sbiw	r24, 0x01	; 1
    42a6:	a1 09       	sbc	r26, r1
    42a8:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    42aa:	ac 01       	movw	r20, r24
    42ac:	48 19       	sub	r20, r8
    42ae:	59 09       	sbc	r21, r9
    42b0:	fa 01       	movw	r30, r20
    42b2:	e2 0f       	add	r30, r18
    42b4:	f3 1f       	adc	r31, r19
    42b6:	e0 81       	ld	r30, Z
    42b8:	ea 30       	cpi	r30, 0x0A	; 10
    42ba:	90 f4       	brcc	.+36     	; 0x42e0 <printInteger+0xe8>
    42bc:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    42be:	80 91 c0 00 	lds	r24, 0x00C0
    42c2:	85 ff       	sbrs	r24, 5
    42c4:	fc cf       	rjmp	.-8      	; 0x42be <printInteger+0xc6>
		;
	UDR0 = c;
    42c6:	e0 93 c6 00 	sts	0x00C6, r30
    42ca:	21 50       	subi	r18, 0x01	; 1
    42cc:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    42ce:	62 16       	cp	r6, r18
    42d0:	73 06       	cpc	r7, r19
    42d2:	79 f0       	breq	.+30     	; 0x42f2 <printInteger+0xfa>
		printByte(buf[i - 1] < 10 ?
    42d4:	fa 01       	movw	r30, r20
    42d6:	e2 0f       	add	r30, r18
    42d8:	f3 1f       	adc	r31, r19
    42da:	e0 81       	ld	r30, Z
    42dc:	ea 30       	cpi	r30, 0x0A	; 10
    42de:	70 f3       	brcs	.-36     	; 0x42bc <printInteger+0xc4>
    42e0:	e9 5c       	subi	r30, 0xC9	; 201
    42e2:	ed cf       	rjmp	.-38     	; 0x42be <printInteger+0xc6>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    42e4:	80 91 c0 00 	lds	r24, 0x00C0
    42e8:	85 ff       	sbrs	r24, 5
    42ea:	fc cf       	rjmp	.-8      	; 0x42e4 <printInteger+0xec>
		;
	UDR0 = c;
    42ec:	80 e3       	ldi	r24, 0x30	; 48
    42ee:	80 93 c6 00 	sts	0x00C6, r24
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
}
    42f2:	a0 96       	adiw	r28, 0x20	; 32
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
    42fe:	cf 91       	pop	r28
    4300:	df 91       	pop	r29
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	ff 90       	pop	r15
    4308:	ef 90       	pop	r14
    430a:	df 90       	pop	r13
    430c:	cf 90       	pop	r12
    430e:	bf 90       	pop	r11
    4310:	af 90       	pop	r10
    4312:	9f 90       	pop	r9
    4314:	8f 90       	pop	r8
    4316:	7f 90       	pop	r7
    4318:	6f 90       	pop	r6
    431a:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    431c:	80 91 c0 00 	lds	r24, 0x00C0
    4320:	85 ff       	sbrs	r24, 5
    4322:	fc cf       	rjmp	.-8      	; 0x431c <printInteger+0x124>
		;
	UDR0 = c;
    4324:	8d e2       	ldi	r24, 0x2D	; 45
    4326:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    432a:	50 95       	com	r21
    432c:	40 95       	com	r20
    432e:	30 95       	com	r19
    4330:	21 95       	neg	r18
    4332:	3f 4f       	sbci	r19, 0xFF	; 255
    4334:	4f 4f       	sbci	r20, 0xFF	; 255
    4336:	5f 4f       	sbci	r21, 0xFF	; 255
    4338:	79 cf       	rjmp	.-270    	; 0x422c <printInteger+0x34>

0000433a <printBinary>:
// {
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
    433a:	ef 92       	push	r14
    433c:	ff 92       	push	r15
    433e:	0f 93       	push	r16
    4340:	1f 93       	push	r17
    4342:	df 93       	push	r29
    4344:	cf 93       	push	r28
    4346:	cd b7       	in	r28, 0x3d	; 61
    4348:	de b7       	in	r29, 0x3e	; 62
    434a:	a0 97       	sbiw	r28, 0x20	; 32
    434c:	0f b6       	in	r0, 0x3f	; 63
    434e:	f8 94       	cli
    4350:	de bf       	out	0x3e, r29	; 62
    4352:	0f be       	out	0x3f, r0	; 63
    4354:	cd bf       	out	0x3d, r28	; 61
    4356:	9b 01       	movw	r18, r22
    4358:	ac 01       	movw	r20, r24
void printIntegerInBase(unsigned long n, unsigned long base)
{ 
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    435a:	61 15       	cp	r22, r1
    435c:	71 05       	cpc	r23, r1
    435e:	81 05       	cpc	r24, r1
    4360:	91 05       	cpc	r25, r1
    4362:	09 f4       	brne	.+2      	; 0x4366 <printBinary+0x2c>
    4364:	48 c0       	rjmp	.+144    	; 0x43f6 <printBinary+0xbc>

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    4366:	ee 24       	eor	r14, r14
    4368:	ff 24       	eor	r15, r15
    436a:	87 01       	movw	r16, r14
    436c:	be 01       	movw	r22, r28
    436e:	6f 5f       	subi	r22, 0xFF	; 255
    4370:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte('0');
		return;
	} 

	while (n > 0) {
		buf[i++] = n % base;
    4372:	fb 01       	movw	r30, r22
    4374:	ee 0d       	add	r30, r14
    4376:	ff 1d       	adc	r31, r15
    4378:	da 01       	movw	r26, r20
    437a:	c9 01       	movw	r24, r18
    437c:	81 70       	andi	r24, 0x01	; 1
    437e:	90 70       	andi	r25, 0x00	; 0
    4380:	a0 70       	andi	r26, 0x00	; 0
    4382:	b0 70       	andi	r27, 0x00	; 0
    4384:	80 83       	st	Z, r24
    4386:	08 94       	sec
    4388:	e1 1c       	adc	r14, r1
    438a:	f1 1c       	adc	r15, r1
    438c:	01 1d       	adc	r16, r1
    438e:	11 1d       	adc	r17, r1
		n /= base;
    4390:	56 95       	lsr	r21
    4392:	47 95       	ror	r20
    4394:	37 95       	ror	r19
    4396:	27 95       	ror	r18
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    4398:	21 15       	cp	r18, r1
    439a:	31 05       	cpc	r19, r1
    439c:	41 05       	cpc	r20, r1
    439e:	51 05       	cpc	r21, r1
    43a0:	41 f7       	brne	.-48     	; 0x4372 <printBinary+0x38>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    43a2:	e1 14       	cp	r14, r1
    43a4:	f1 04       	cpc	r15, r1
    43a6:	01 05       	cpc	r16, r1
    43a8:	11 05       	cpc	r17, r1
    43aa:	61 f1       	breq	.+88     	; 0x4404 <printBinary+0xca>
    43ac:	9b 01       	movw	r18, r22
    43ae:	2e 0d       	add	r18, r14
    43b0:	3f 1d       	adc	r19, r15
    43b2:	d8 01       	movw	r26, r16
    43b4:	c7 01       	movw	r24, r14
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	a1 09       	sbc	r26, r1
    43ba:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    43bc:	ac 01       	movw	r20, r24
    43be:	4e 19       	sub	r20, r14
    43c0:	5f 09       	sbc	r21, r15
    43c2:	fa 01       	movw	r30, r20
    43c4:	e2 0f       	add	r30, r18
    43c6:	f3 1f       	adc	r31, r19
    43c8:	e0 81       	ld	r30, Z
    43ca:	ea 30       	cpi	r30, 0x0A	; 10
    43cc:	90 f4       	brcc	.+36     	; 0x43f2 <printBinary+0xb8>
    43ce:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    43d0:	80 91 c0 00 	lds	r24, 0x00C0
    43d4:	85 ff       	sbrs	r24, 5
    43d6:	fc cf       	rjmp	.-8      	; 0x43d0 <printBinary+0x96>
		;
	UDR0 = c;
    43d8:	e0 93 c6 00 	sts	0x00C6, r30
    43dc:	21 50       	subi	r18, 0x01	; 1
    43de:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    43e0:	62 17       	cp	r22, r18
    43e2:	73 07       	cpc	r23, r19
    43e4:	79 f0       	breq	.+30     	; 0x4404 <printBinary+0xca>
		printByte(buf[i - 1] < 10 ?
    43e6:	fa 01       	movw	r30, r20
    43e8:	e2 0f       	add	r30, r18
    43ea:	f3 1f       	adc	r31, r19
    43ec:	e0 81       	ld	r30, Z
    43ee:	ea 30       	cpi	r30, 0x0A	; 10
    43f0:	70 f3       	brcs	.-36     	; 0x43ce <printBinary+0x94>
    43f2:	e9 5c       	subi	r30, 0xC9	; 201
    43f4:	ed cf       	rjmp	.-38     	; 0x43d0 <printBinary+0x96>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    43f6:	80 91 c0 00 	lds	r24, 0x00C0
    43fa:	85 ff       	sbrs	r24, 5
    43fc:	fc cf       	rjmp	.-8      	; 0x43f6 <printBinary+0xbc>
		;
	UDR0 = c;
    43fe:	80 e3       	ldi	r24, 0x30	; 48
    4400:	80 93 c6 00 	sts	0x00C6, r24
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
  }
    4404:	a0 96       	adiw	r28, 0x20	; 32
    4406:	0f b6       	in	r0, 0x3f	; 63
    4408:	f8 94       	cli
    440a:	de bf       	out	0x3e, r29	; 62
    440c:	0f be       	out	0x3f, r0	; 63
    440e:	cd bf       	out	0x3d, r28	; 61
    4410:	cf 91       	pop	r28
    4412:	df 91       	pop	r29
    4414:	1f 91       	pop	r17
    4416:	0f 91       	pop	r16
    4418:	ff 90       	pop	r15
    441a:	ef 90       	pop	r14
    441c:	08 95       	ret

0000441e <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    441e:	2f 92       	push	r2
    4420:	3f 92       	push	r3
    4422:	4f 92       	push	r4
    4424:	5f 92       	push	r5
    4426:	6f 92       	push	r6
    4428:	7f 92       	push	r7
    442a:	8f 92       	push	r8
    442c:	9f 92       	push	r9
    442e:	af 92       	push	r10
    4430:	bf 92       	push	r11
    4432:	cf 92       	push	r12
    4434:	df 92       	push	r13
    4436:	ef 92       	push	r14
    4438:	ff 92       	push	r15
    443a:	0f 93       	push	r16
    443c:	1f 93       	push	r17
    443e:	df 93       	push	r29
    4440:	cf 93       	push	r28
    4442:	cd b7       	in	r28, 0x3d	; 61
    4444:	de b7       	in	r29, 0x3e	; 62
    4446:	a4 97       	sbiw	r28, 0x24	; 36
    4448:	0f b6       	in	r0, 0x3f	; 63
    444a:	f8 94       	cli
    444c:	de bf       	out	0x3e, r29	; 62
    444e:	0f be       	out	0x3f, r0	; 63
    4450:	cd bf       	out	0x3d, r28	; 61
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    4452:	ae 01       	movw	r20, r28
    4454:	4f 5f       	subi	r20, 0xFF	; 255
    4456:	5f 4f       	sbci	r21, 0xFF	; 255
    4458:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <modf>
    445c:	1b 01       	movw	r2, r22
    445e:	2c 01       	movw	r4, r24
  printInteger(integer_part);
    4460:	69 81       	ldd	r22, Y+1	; 0x01
    4462:	7a 81       	ldd	r23, Y+2	; 0x02
    4464:	8b 81       	ldd	r24, Y+3	; 0x03
    4466:	9c 81       	ldd	r25, Y+4	; 0x04
    4468:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    446c:	9b 01       	movw	r18, r22
    446e:	ac 01       	movw	r20, r24
			'A' + buf[i - 1] - 10);
}

void printInteger(long n)
{
	if (n < 0) {
    4470:	97 fd       	sbrc	r25, 7
    4472:	d5 c0       	rjmp	.+426    	; 0x461e <printFloat+0x200>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    4474:	69 01       	movw	r12, r18
    4476:	7a 01       	movw	r14, r20
void printIntegerInBase(unsigned long n, unsigned long base)
{ 
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    4478:	21 15       	cp	r18, r1
    447a:	31 05       	cpc	r19, r1
    447c:	41 05       	cpc	r20, r1
    447e:	51 05       	cpc	r21, r1
    4480:	09 f4       	brne	.+2      	; 0x4484 <printFloat+0x66>
    4482:	c1 c0       	rjmp	.+386    	; 0x4606 <printFloat+0x1e8>

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    4484:	88 24       	eor	r8, r8
    4486:	99 24       	eor	r9, r9
    4488:	54 01       	movw	r10, r8
    448a:	a5 e0       	ldi	r26, 0x05	; 5
    448c:	6a 2e       	mov	r6, r26
    448e:	71 2c       	mov	r7, r1
    4490:	6c 0e       	add	r6, r28
    4492:	7d 1e       	adc	r7, r29
		printByte('0');
		return;
	} 

	while (n > 0) {
		buf[i++] = n % base;
    4494:	83 01       	movw	r16, r6
    4496:	08 0d       	add	r16, r8
    4498:	19 1d       	adc	r17, r9
    449a:	c7 01       	movw	r24, r14
    449c:	b6 01       	movw	r22, r12
    449e:	2a e0       	ldi	r18, 0x0A	; 10
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	40 e0       	ldi	r20, 0x00	; 0
    44a4:	50 e0       	ldi	r21, 0x00	; 0
    44a6:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    44aa:	f8 01       	movw	r30, r16
    44ac:	60 83       	st	Z, r22
    44ae:	08 94       	sec
    44b0:	81 1c       	adc	r8, r1
    44b2:	91 1c       	adc	r9, r1
    44b4:	a1 1c       	adc	r10, r1
    44b6:	b1 1c       	adc	r11, r1
		n /= base;
    44b8:	c7 01       	movw	r24, r14
    44ba:	b6 01       	movw	r22, r12
    44bc:	2a e0       	ldi	r18, 0x0A	; 10
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	40 e0       	ldi	r20, 0x00	; 0
    44c2:	50 e0       	ldi	r21, 0x00	; 0
    44c4:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    44c8:	c9 01       	movw	r24, r18
    44ca:	da 01       	movw	r26, r20
    44cc:	6c 01       	movw	r12, r24
    44ce:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    44d0:	c1 14       	cp	r12, r1
    44d2:	d1 04       	cpc	r13, r1
    44d4:	e1 04       	cpc	r14, r1
    44d6:	f1 04       	cpc	r15, r1
    44d8:	e9 f6       	brne	.-70     	; 0x4494 <printFloat+0x76>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    44da:	81 14       	cp	r8, r1
    44dc:	91 04       	cpc	r9, r1
    44de:	a1 04       	cpc	r10, r1
    44e0:	b1 04       	cpc	r11, r1
    44e2:	f1 f0       	breq	.+60     	; 0x4520 <printFloat+0x102>
    44e4:	93 01       	movw	r18, r6
    44e6:	28 0d       	add	r18, r8
    44e8:	39 1d       	adc	r19, r9
    44ea:	d5 01       	movw	r26, r10
    44ec:	c4 01       	movw	r24, r8
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	a1 09       	sbc	r26, r1
    44f2:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    44f4:	ac 01       	movw	r20, r24
    44f6:	48 19       	sub	r20, r8
    44f8:	59 09       	sbc	r21, r9
    44fa:	fa 01       	movw	r30, r20
    44fc:	e2 0f       	add	r30, r18
    44fe:	f3 1f       	adc	r31, r19
    4500:	e0 81       	ld	r30, Z
    4502:	ea 30       	cpi	r30, 0x0A	; 10
    4504:	08 f0       	brcs	.+2      	; 0x4508 <printFloat+0xea>
    4506:	ba c0       	rjmp	.+372    	; 0x467c <printFloat+0x25e>
    4508:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    450a:	80 91 c0 00 	lds	r24, 0x00C0
    450e:	85 ff       	sbrs	r24, 5
    4510:	fc cf       	rjmp	.-8      	; 0x450a <printFloat+0xec>
		;
	UDR0 = c;
    4512:	e0 93 c6 00 	sts	0x00C6, r30
    4516:	21 50       	subi	r18, 0x01	; 1
    4518:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    451a:	26 15       	cp	r18, r6
    451c:	37 05       	cpc	r19, r7
    451e:	69 f7       	brne	.-38     	; 0x44fa <printFloat+0xdc>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4520:	80 91 c0 00 	lds	r24, 0x00C0
    4524:	85 ff       	sbrs	r24, 5
    4526:	fc cf       	rjmp	.-8      	; 0x4520 <printFloat+0x102>
		;
	UDR0 = c;
    4528:	8e e2       	ldi	r24, 0x2E	; 46
    452a:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    452e:	c2 01       	movw	r24, r4
    4530:	b1 01       	movw	r22, r2
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	4a e7       	ldi	r20, 0x7A	; 122
    4538:	54 e4       	ldi	r21, 0x44	; 68
    453a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    453e:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <round>
	if (n < 0) {
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    4542:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__fixsfsi>
    4546:	6b 01       	movw	r12, r22
    4548:	7c 01       	movw	r14, r24
    454a:	97 fd       	sbrc	r25, 7
    454c:	99 c0       	rjmp	.+306    	; 0x4680 <printFloat+0x262>
void printIntegerInBase(unsigned long n, unsigned long base)
{ 
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    454e:	c1 14       	cp	r12, r1
    4550:	d1 04       	cpc	r13, r1
    4552:	e1 04       	cpc	r14, r1
    4554:	f1 04       	cpc	r15, r1
    4556:	09 f4       	brne	.+2      	; 0x455a <printFloat+0x13c>
    4558:	71 c0       	rjmp	.+226    	; 0x463c <printFloat+0x21e>

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    455a:	88 24       	eor	r8, r8
    455c:	99 24       	eor	r9, r9
    455e:	54 01       	movw	r10, r8
    4560:	f5 e0       	ldi	r31, 0x05	; 5
    4562:	6f 2e       	mov	r6, r31
    4564:	71 2c       	mov	r7, r1
    4566:	6c 0e       	add	r6, r28
    4568:	7d 1e       	adc	r7, r29
		printByte('0');
		return;
	} 

	while (n > 0) {
		buf[i++] = n % base;
    456a:	83 01       	movw	r16, r6
    456c:	08 0d       	add	r16, r8
    456e:	19 1d       	adc	r17, r9
    4570:	c7 01       	movw	r24, r14
    4572:	b6 01       	movw	r22, r12
    4574:	2a e0       	ldi	r18, 0x0A	; 10
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    4580:	f8 01       	movw	r30, r16
    4582:	60 83       	st	Z, r22
    4584:	08 94       	sec
    4586:	81 1c       	adc	r8, r1
    4588:	91 1c       	adc	r9, r1
    458a:	a1 1c       	adc	r10, r1
    458c:	b1 1c       	adc	r11, r1
		n /= base;
    458e:	c7 01       	movw	r24, r14
    4590:	b6 01       	movw	r22, r12
    4592:	2a e0       	ldi	r18, 0x0A	; 10
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	50 e0       	ldi	r21, 0x00	; 0
    459a:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__udivmodsi4>
    459e:	c9 01       	movw	r24, r18
    45a0:	da 01       	movw	r26, r20
    45a2:	6c 01       	movw	r12, r24
    45a4:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    45a6:	c1 14       	cp	r12, r1
    45a8:	d1 04       	cpc	r13, r1
    45aa:	e1 04       	cpc	r14, r1
    45ac:	f1 04       	cpc	r15, r1
    45ae:	e9 f6       	brne	.-70     	; 0x456a <printFloat+0x14c>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    45b0:	81 14       	cp	r8, r1
    45b2:	91 04       	cpc	r9, r1
    45b4:	a1 04       	cpc	r10, r1
    45b6:	b1 04       	cpc	r11, r1
    45b8:	09 f4       	brne	.+2      	; 0x45bc <printFloat+0x19e>
    45ba:	47 c0       	rjmp	.+142    	; 0x464a <printFloat+0x22c>
    45bc:	93 01       	movw	r18, r6
    45be:	28 0d       	add	r18, r8
    45c0:	39 1d       	adc	r19, r9
    45c2:	d5 01       	movw	r26, r10
    45c4:	c4 01       	movw	r24, r8
    45c6:	01 97       	sbiw	r24, 0x01	; 1
    45c8:	a1 09       	sbc	r26, r1
    45ca:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    45cc:	ac 01       	movw	r20, r24
    45ce:	48 19       	sub	r20, r8
    45d0:	59 09       	sbc	r21, r9
    45d2:	fa 01       	movw	r30, r20
    45d4:	e2 0f       	add	r30, r18
    45d6:	f3 1f       	adc	r31, r19
    45d8:	e0 81       	ld	r30, Z
    45da:	ea 30       	cpi	r30, 0x0A	; 10
    45dc:	90 f4       	brcc	.+36     	; 0x4602 <printFloat+0x1e4>
    45de:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    45e0:	80 91 c0 00 	lds	r24, 0x00C0
    45e4:	85 ff       	sbrs	r24, 5
    45e6:	fc cf       	rjmp	.-8      	; 0x45e0 <printFloat+0x1c2>
		;
	UDR0 = c;
    45e8:	e0 93 c6 00 	sts	0x00C6, r30
    45ec:	21 50       	subi	r18, 0x01	; 1
    45ee:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    45f0:	26 15       	cp	r18, r6
    45f2:	37 05       	cpc	r19, r7
    45f4:	51 f1       	breq	.+84     	; 0x464a <printFloat+0x22c>
		printByte(buf[i - 1] < 10 ?
    45f6:	fa 01       	movw	r30, r20
    45f8:	e2 0f       	add	r30, r18
    45fa:	f3 1f       	adc	r31, r19
    45fc:	e0 81       	ld	r30, Z
    45fe:	ea 30       	cpi	r30, 0x0A	; 10
    4600:	70 f3       	brcs	.-36     	; 0x45de <printFloat+0x1c0>
    4602:	e9 5c       	subi	r30, 0xC9	; 201
    4604:	ed cf       	rjmp	.-38     	; 0x45e0 <printFloat+0x1c2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4606:	80 91 c0 00 	lds	r24, 0x00C0
    460a:	85 ff       	sbrs	r24, 5
    460c:	fc cf       	rjmp	.-8      	; 0x4606 <printFloat+0x1e8>
		;
	UDR0 = c;
    460e:	80 e3       	ldi	r24, 0x30	; 48
    4610:	80 93 c6 00 	sts	0x00C6, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4614:	80 91 c0 00 	lds	r24, 0x00C0
    4618:	85 ff       	sbrs	r24, 5
    461a:	82 cf       	rjmp	.-252    	; 0x4520 <printFloat+0x102>
    461c:	85 cf       	rjmp	.-246    	; 0x4528 <printFloat+0x10a>
		;
	UDR0 = c;
    461e:	80 91 c0 00 	lds	r24, 0x00C0
    4622:	85 ff       	sbrs	r24, 5
    4624:	fc cf       	rjmp	.-8      	; 0x461e <printFloat+0x200>
    4626:	8d e2       	ldi	r24, 0x2D	; 45
    4628:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    462c:	50 95       	com	r21
    462e:	40 95       	com	r20
    4630:	30 95       	com	r19
    4632:	21 95       	neg	r18
    4634:	3f 4f       	sbci	r19, 0xFF	; 255
    4636:	4f 4f       	sbci	r20, 0xFF	; 255
    4638:	5f 4f       	sbci	r21, 0xFF	; 255
    463a:	1c cf       	rjmp	.-456    	; 0x4474 <printFloat+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    463c:	80 91 c0 00 	lds	r24, 0x00C0
    4640:	85 ff       	sbrs	r24, 5
    4642:	fc cf       	rjmp	.-8      	; 0x463c <printFloat+0x21e>
		;
	UDR0 = c;
    4644:	80 e3       	ldi	r24, 0x30	; 48
    4646:	80 93 c6 00 	sts	0x00C6, r24
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
}
    464a:	a4 96       	adiw	r28, 0x24	; 36
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	f8 94       	cli
    4650:	de bf       	out	0x3e, r29	; 62
    4652:	0f be       	out	0x3f, r0	; 63
    4654:	cd bf       	out	0x3d, r28	; 61
    4656:	cf 91       	pop	r28
    4658:	df 91       	pop	r29
    465a:	1f 91       	pop	r17
    465c:	0f 91       	pop	r16
    465e:	ff 90       	pop	r15
    4660:	ef 90       	pop	r14
    4662:	df 90       	pop	r13
    4664:	cf 90       	pop	r12
    4666:	bf 90       	pop	r11
    4668:	af 90       	pop	r10
    466a:	9f 90       	pop	r9
    466c:	8f 90       	pop	r8
    466e:	7f 90       	pop	r7
    4670:	6f 90       	pop	r6
    4672:	5f 90       	pop	r5
    4674:	4f 90       	pop	r4
    4676:	3f 90       	pop	r3
    4678:	2f 90       	pop	r2
    467a:	08 95       	ret
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
    467c:	e9 5c       	subi	r30, 0xC9	; 201
    467e:	45 cf       	rjmp	.-374    	; 0x450a <printFloat+0xec>
	if (n < 0) {
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    4680:	f0 94       	com	r15
    4682:	e0 94       	com	r14
    4684:	d0 94       	com	r13
    4686:	c0 94       	com	r12
    4688:	c1 1c       	adc	r12, r1
    468a:	d1 1c       	adc	r13, r1
    468c:	e1 1c       	adc	r14, r1
    468e:	f1 1c       	adc	r15, r1
    4690:	5e cf       	rjmp	.-324    	; 0x454e <printFloat+0x130>

00004692 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    4692:	ea e0       	ldi	r30, 0x0A	; 10
    4694:	f1 e0       	ldi	r31, 0x01	; 1
    4696:	80 81       	ld	r24, Z
    4698:	80 62       	ori	r24, 0x20	; 32
    469a:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    469c:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    469e:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    46a0:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    46a2:	41 9a       	sbi	0x08, 1	; 8
}
    46a4:	08 95       	ret

000046a6 <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST );
    46a6:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    46a8:	81 70       	andi	r24, 0x01	; 1
    46aa:	08 95       	ret

000046ac <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 );
    46ac:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    46ae:	82 70       	andi	r24, 0x02	; 2
    46b0:	08 95       	ret

000046b2 <head_down>:
	HEADDT_DDR  &= ~(_BV( D90 ));
	HEADDT_PORT |= (_BV( D90 ));
}

void head_down(int state)
{
    46b2:	0f 93       	push	r16
    46b4:	1f 93       	push	r17
    46b6:	8c 01       	movw	r16, r24
  printPgmString(PSTR("Head down\n\r"));
    46b8:	8a ee       	ldi	r24, 0xEA	; 234
    46ba:	95 e0       	ldi	r25, 0x05	; 5
    46bc:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>

// head down mode
  if( state == 1 ) {
    46c0:	01 30       	cpi	r16, 0x01	; 1
    46c2:	11 05       	cpc	r17, r1
    46c4:	41 f0       	breq	.+16     	; 0x46d6 <head_down+0x24>

	HEAD_PORT |= _BV( HEAD );
  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    46c6:	80 91 0b 01 	lds	r24, 0x010B
    46ca:	8f 7d       	andi	r24, 0xDF	; 223
    46cc:	80 93 0b 01 	sts	0x010B, r24
  }
}
    46d0:	1f 91       	pop	r17
    46d2:	0f 91       	pop	r16
    46d4:	08 95       	ret
  printPgmString(PSTR("Head down\n\r"));

// head down mode
  if( state == 1 ) {

	HEAD_PORT |= _BV( HEAD );
    46d6:	80 91 0b 01 	lds	r24, 0x010B
    46da:	80 62       	ori	r24, 0x20	; 32
    46dc:	80 93 0b 01 	sts	0x010B, r24
  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
  }
}
    46e0:	1f 91       	pop	r17
    46e2:	0f 91       	pop	r16
    46e4:	08 95       	ret

000046e6 <vacuum_init>:
#include "settings.h"

void vacuum_init()
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    46e6:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_DDR |= (_BV( TACSENSE ));
    46e8:	57 9a       	sbi	0x0a, 7	; 10

	// Vacuum on/off control
	HEAD_DDR |= _BV( VACUUM );
    46ea:	ea e0       	ldi	r30, 0x0A	; 10
    46ec:	f1 e0       	ldi	r31, 0x01	; 1
    46ee:	80 81       	ld	r24, Z
    46f0:	80 61       	ori	r24, 0x10	; 16
    46f2:	80 83       	st	Z, r24

}
    46f4:	08 95       	ret

000046f6 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_DDR, TACSENSE );
    46f6:	8a b1       	in	r24, 0x0a	; 10

	return state;
}
    46f8:	80 78       	andi	r24, 0x80	; 128
    46fa:	08 95       	ret

000046fc <vacuum>:

}

// switches vacuum on and off
void vacuum(int state)
{
    46fc:	0f 93       	push	r16
    46fe:	1f 93       	push	r17
    4700:	8c 01       	movw	r16, r24
  printPgmString(PSTR("vacuum change\n\r"));
    4702:	86 ef       	ldi	r24, 0xF6	; 246
    4704:	95 e0       	ldi	r25, 0x05	; 5
    4706:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>

  
// vacuum  on /off
  if( state == 1 ) {
    470a:	01 30       	cpi	r16, 0x01	; 1
    470c:	11 05       	cpc	r17, r1
    470e:	41 f0       	breq	.+16     	; 0x4720 <vacuum+0x24>
	HEAD_PORT |= _BV( VACUUM );
  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    4710:	80 91 0b 01 	lds	r24, 0x010B
    4714:	8f 7e       	andi	r24, 0xEF	; 239
    4716:	80 93 0b 01 	sts	0x010B, r24
  }
}
    471a:	1f 91       	pop	r17
    471c:	0f 91       	pop	r16
    471e:	08 95       	ret
  printPgmString(PSTR("vacuum change\n\r"));

  
// vacuum  on /off
  if( state == 1 ) {
	HEAD_PORT |= _BV( VACUUM );
    4720:	80 91 0b 01 	lds	r24, 0x010B
    4724:	80 61       	ori	r24, 0x10	; 16
    4726:	80 93 0b 01 	sts	0x010B, r24
  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
  }
}
    472a:	1f 91       	pop	r17
    472c:	0f 91       	pop	r16
    472e:	08 95       	ret

00004730 <panel_init>:

void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    4730:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    4732:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    4734:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    4736:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    4738:	6c 98       	cbi	0x0d, 4	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    473a:	74 9a       	sbi	0x0e, 4	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    473c:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    473e:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    4740:	a4 e0       	ldi	r26, 0x04	; 4
    4742:	b1 e0       	ldi	r27, 0x01	; 1
    4744:	8c 91       	ld	r24, X
    4746:	8e 7f       	andi	r24, 0xFE	; 254
    4748:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    474a:	e5 e0       	ldi	r30, 0x05	; 5
    474c:	f1 e0       	ldi	r31, 0x01	; 1
    474e:	80 81       	ld	r24, Z
    4750:	81 60       	ori	r24, 0x01	; 1
    4752:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    4754:	8c 91       	ld	r24, X
    4756:	8d 7f       	andi	r24, 0xFD	; 253
    4758:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    475a:	80 81       	ld	r24, Z
    475c:	82 60       	ori	r24, 0x02	; 2
    475e:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    4760:	a1 e0       	ldi	r26, 0x01	; 1
    4762:	b1 e0       	ldi	r27, 0x01	; 1
    4764:	8c 91       	ld	r24, X
    4766:	8e 7f       	andi	r24, 0xFE	; 254
    4768:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    476a:	e2 e0       	ldi	r30, 0x02	; 2
    476c:	f1 e0       	ldi	r31, 0x01	; 1
    476e:	80 81       	ld	r24, Z
    4770:	81 60       	ori	r24, 0x01	; 1
    4772:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    4774:	8c 91       	ld	r24, X
    4776:	8d 7f       	andi	r24, 0xFD	; 253
    4778:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    477a:	80 81       	ld	r24, Z
    477c:	82 60       	ori	r24, 0x02	; 2
    477e:	80 83       	st	Z, r24

}
    4780:	08 95       	ret

00004782 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_LEFT );
    4782:	83 b1       	in	r24, 0x03	; 3

	return state;
}
    4784:	80 72       	andi	r24, 0x20	; 32
    4786:	08 95       	ret

00004788 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT );
    4788:	82 b3       	in	r24, 0x12	; 18

	return state;
}
    478a:	80 72       	andi	r24, 0x20	; 32
    478c:	08 95       	ret

0000478e <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_BACK );
    478e:	80 91 03 01 	lds	r24, 0x0103

	return state;
}
    4792:	82 70       	andi	r24, 0x02	; 2
    4794:	08 95       	ret

00004796 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_FORWARD );
    4796:	8c b1       	in	r24, 0x0c	; 12

	return state;
}
    4798:	80 71       	andi	r24, 0x10	; 16
    479a:	08 95       	ret

0000479c <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD );
    479c:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    479e:	80 71       	andi	r24, 0x10	; 16
    47a0:	08 95       	ret

000047a2 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC );
    47a2:	80 91 00 01 	lds	r24, 0x0100

	return state;
}
    47a6:	81 70       	andi	r24, 0x01	; 1
    47a8:	08 95       	ret

000047aa <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST );
    47aa:	80 91 03 01 	lds	r24, 0x0103

	return state;
}
    47ae:	81 70       	andi	r24, 0x01	; 1
    47b0:	08 95       	ret

000047b2 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME );
    47b2:	83 b1       	in	r24, 0x03	; 3

	return state;
}
    47b4:	80 72       	andi	r24, 0x20	; 32
    47b6:	08 95       	ret

000047b8 <atc_init>:
#include "config.h"
#include "settings.h"

void atc_init()
{
}
    47b8:	08 95       	ret

000047ba <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	08 95       	ret

000047be <atc_change>:
}

// changes tool , 0 put back, 1-6 picks up
void atc_change(int tool)
{
  printPgmString(PSTR("atc change\n\r"));
    47be:	86 e0       	ldi	r24, 0x06	; 6
    47c0:	96 e0       	ldi	r25, 0x06	; 6
    47c2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <printPgmString>

}
    47c6:	08 95       	ret

000047c8 <__subsf3>:
    47c8:	50 58       	subi	r21, 0x80	; 128

000047ca <__addsf3>:
    47ca:	bb 27       	eor	r27, r27
    47cc:	aa 27       	eor	r26, r26
    47ce:	0e d0       	rcall	.+28     	; 0x47ec <__addsf3x>
    47d0:	11 c2       	rjmp	.+1058   	; 0x4bf4 <__fp_round>
    47d2:	02 d2       	rcall	.+1028   	; 0x4bd8 <__fp_pscA>
    47d4:	30 f0       	brcs	.+12     	; 0x47e2 <__addsf3+0x18>
    47d6:	07 d2       	rcall	.+1038   	; 0x4be6 <__fp_pscB>
    47d8:	20 f0       	brcs	.+8      	; 0x47e2 <__addsf3+0x18>
    47da:	31 f4       	brne	.+12     	; 0x47e8 <__addsf3+0x1e>
    47dc:	9f 3f       	cpi	r25, 0xFF	; 255
    47de:	11 f4       	brne	.+4      	; 0x47e4 <__addsf3+0x1a>
    47e0:	1e f4       	brtc	.+6      	; 0x47e8 <__addsf3+0x1e>
    47e2:	d2 c1       	rjmp	.+932    	; 0x4b88 <__fp_nan>
    47e4:	0e f4       	brtc	.+2      	; 0x47e8 <__addsf3+0x1e>
    47e6:	e0 95       	com	r30
    47e8:	e7 fb       	bst	r30, 7
    47ea:	9f c1       	rjmp	.+830    	; 0x4b2a <__fp_inf>

000047ec <__addsf3x>:
    47ec:	e9 2f       	mov	r30, r25
    47ee:	13 d2       	rcall	.+1062   	; 0x4c16 <__fp_split3>
    47f0:	80 f3       	brcs	.-32     	; 0x47d2 <__addsf3+0x8>
    47f2:	ba 17       	cp	r27, r26
    47f4:	62 07       	cpc	r22, r18
    47f6:	73 07       	cpc	r23, r19
    47f8:	84 07       	cpc	r24, r20
    47fa:	95 07       	cpc	r25, r21
    47fc:	18 f0       	brcs	.+6      	; 0x4804 <__addsf3x+0x18>
    47fe:	71 f4       	brne	.+28     	; 0x481c <__addsf3x+0x30>
    4800:	9e f5       	brtc	.+102    	; 0x4868 <__addsf3x+0x7c>
    4802:	42 c2       	rjmp	.+1156   	; 0x4c88 <__fp_zero>
    4804:	0e f4       	brtc	.+2      	; 0x4808 <__addsf3x+0x1c>
    4806:	e0 95       	com	r30
    4808:	0b 2e       	mov	r0, r27
    480a:	ba 2f       	mov	r27, r26
    480c:	a0 2d       	mov	r26, r0
    480e:	0b 01       	movw	r0, r22
    4810:	b9 01       	movw	r22, r18
    4812:	90 01       	movw	r18, r0
    4814:	0c 01       	movw	r0, r24
    4816:	ca 01       	movw	r24, r20
    4818:	a0 01       	movw	r20, r0
    481a:	11 24       	eor	r1, r1
    481c:	ff 27       	eor	r31, r31
    481e:	59 1b       	sub	r21, r25
    4820:	99 f0       	breq	.+38     	; 0x4848 <__addsf3x+0x5c>
    4822:	59 3f       	cpi	r21, 0xF9	; 249
    4824:	50 f4       	brcc	.+20     	; 0x483a <__addsf3x+0x4e>
    4826:	50 3e       	cpi	r21, 0xE0	; 224
    4828:	68 f1       	brcs	.+90     	; 0x4884 <__addsf3x+0x98>
    482a:	1a 16       	cp	r1, r26
    482c:	f0 40       	sbci	r31, 0x00	; 0
    482e:	a2 2f       	mov	r26, r18
    4830:	23 2f       	mov	r18, r19
    4832:	34 2f       	mov	r19, r20
    4834:	44 27       	eor	r20, r20
    4836:	58 5f       	subi	r21, 0xF8	; 248
    4838:	f3 cf       	rjmp	.-26     	; 0x4820 <__addsf3x+0x34>
    483a:	46 95       	lsr	r20
    483c:	37 95       	ror	r19
    483e:	27 95       	ror	r18
    4840:	a7 95       	ror	r26
    4842:	f0 40       	sbci	r31, 0x00	; 0
    4844:	53 95       	inc	r21
    4846:	c9 f7       	brne	.-14     	; 0x483a <__addsf3x+0x4e>
    4848:	7e f4       	brtc	.+30     	; 0x4868 <__addsf3x+0x7c>
    484a:	1f 16       	cp	r1, r31
    484c:	ba 0b       	sbc	r27, r26
    484e:	62 0b       	sbc	r22, r18
    4850:	73 0b       	sbc	r23, r19
    4852:	84 0b       	sbc	r24, r20
    4854:	ba f0       	brmi	.+46     	; 0x4884 <__addsf3x+0x98>
    4856:	91 50       	subi	r25, 0x01	; 1
    4858:	a1 f0       	breq	.+40     	; 0x4882 <__addsf3x+0x96>
    485a:	ff 0f       	add	r31, r31
    485c:	bb 1f       	adc	r27, r27
    485e:	66 1f       	adc	r22, r22
    4860:	77 1f       	adc	r23, r23
    4862:	88 1f       	adc	r24, r24
    4864:	c2 f7       	brpl	.-16     	; 0x4856 <__addsf3x+0x6a>
    4866:	0e c0       	rjmp	.+28     	; 0x4884 <__addsf3x+0x98>
    4868:	ba 0f       	add	r27, r26
    486a:	62 1f       	adc	r22, r18
    486c:	73 1f       	adc	r23, r19
    486e:	84 1f       	adc	r24, r20
    4870:	48 f4       	brcc	.+18     	; 0x4884 <__addsf3x+0x98>
    4872:	87 95       	ror	r24
    4874:	77 95       	ror	r23
    4876:	67 95       	ror	r22
    4878:	b7 95       	ror	r27
    487a:	f7 95       	ror	r31
    487c:	9e 3f       	cpi	r25, 0xFE	; 254
    487e:	08 f0       	brcs	.+2      	; 0x4882 <__addsf3x+0x96>
    4880:	b3 cf       	rjmp	.-154    	; 0x47e8 <__addsf3+0x1e>
    4882:	93 95       	inc	r25
    4884:	88 0f       	add	r24, r24
    4886:	08 f0       	brcs	.+2      	; 0x488a <__addsf3x+0x9e>
    4888:	99 27       	eor	r25, r25
    488a:	ee 0f       	add	r30, r30
    488c:	97 95       	ror	r25
    488e:	87 95       	ror	r24
    4890:	08 95       	ret

00004892 <atan>:
    4892:	df 93       	push	r29
    4894:	dd 27       	eor	r29, r29
    4896:	b9 2f       	mov	r27, r25
    4898:	bf 77       	andi	r27, 0x7F	; 127
    489a:	40 e8       	ldi	r20, 0x80	; 128
    489c:	5f e3       	ldi	r21, 0x3F	; 63
    489e:	16 16       	cp	r1, r22
    48a0:	17 06       	cpc	r1, r23
    48a2:	48 07       	cpc	r20, r24
    48a4:	5b 07       	cpc	r21, r27
    48a6:	10 f4       	brcc	.+4      	; 0x48ac <atan+0x1a>
    48a8:	d9 2f       	mov	r29, r25
    48aa:	f9 d1       	rcall	.+1010   	; 0x4c9e <inverse>
    48ac:	9f 93       	push	r25
    48ae:	8f 93       	push	r24
    48b0:	7f 93       	push	r23
    48b2:	6f 93       	push	r22
    48b4:	23 d3       	rcall	.+1606   	; 0x4efc <square>
    48b6:	ec e1       	ldi	r30, 0x1C	; 28
    48b8:	f2 e0       	ldi	r31, 0x02	; 2
    48ba:	69 d1       	rcall	.+722    	; 0x4b8e <__fp_powser>
    48bc:	9b d1       	rcall	.+822    	; 0x4bf4 <__fp_round>
    48be:	2f 91       	pop	r18
    48c0:	3f 91       	pop	r19
    48c2:	4f 91       	pop	r20
    48c4:	5f 91       	pop	r21
    48c6:	61 d2       	rcall	.+1218   	; 0x4d8a <__mulsf3x>
    48c8:	dd 23       	and	r29, r29
    48ca:	49 f0       	breq	.+18     	; 0x48de <atan+0x4c>
    48cc:	90 58       	subi	r25, 0x80	; 128
    48ce:	a2 ea       	ldi	r26, 0xA2	; 162
    48d0:	2a ed       	ldi	r18, 0xDA	; 218
    48d2:	3f e0       	ldi	r19, 0x0F	; 15
    48d4:	49 ec       	ldi	r20, 0xC9	; 201
    48d6:	5f e3       	ldi	r21, 0x3F	; 63
    48d8:	d0 78       	andi	r29, 0x80	; 128
    48da:	5d 27       	eor	r21, r29
    48dc:	87 df       	rcall	.-242    	; 0x47ec <__addsf3x>
    48de:	df 91       	pop	r29
    48e0:	89 c1       	rjmp	.+786    	; 0x4bf4 <__fp_round>

000048e2 <ceil>:
    48e2:	bb d1       	rcall	.+886    	; 0x4c5a <__fp_trunc>
    48e4:	80 f0       	brcs	.+32     	; 0x4906 <ceil+0x24>
    48e6:	9f 37       	cpi	r25, 0x7F	; 127
    48e8:	40 f4       	brcc	.+16     	; 0x48fa <ceil+0x18>
    48ea:	91 11       	cpse	r25, r1
    48ec:	0e f4       	brtc	.+2      	; 0x48f0 <ceil+0xe>
    48ee:	cd c1       	rjmp	.+922    	; 0x4c8a <__fp_szero>
    48f0:	60 e0       	ldi	r22, 0x00	; 0
    48f2:	70 e0       	ldi	r23, 0x00	; 0
    48f4:	80 e8       	ldi	r24, 0x80	; 128
    48f6:	9f e3       	ldi	r25, 0x3F	; 63
    48f8:	08 95       	ret
    48fa:	26 f0       	brts	.+8      	; 0x4904 <ceil+0x22>
    48fc:	1b 16       	cp	r1, r27
    48fe:	61 1d       	adc	r22, r1
    4900:	71 1d       	adc	r23, r1
    4902:	81 1d       	adc	r24, r1
    4904:	18 c1       	rjmp	.+560    	; 0x4b36 <__fp_mintl>
    4906:	32 c1       	rjmp	.+612    	; 0x4b6c <__fp_mpack>

00004908 <__cmpsf2>:
    4908:	ec d0       	rcall	.+472    	; 0x4ae2 <__fp_cmp>
    490a:	08 f4       	brcc	.+2      	; 0x490e <__cmpsf2+0x6>
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	08 95       	ret

00004910 <__divsf3>:
    4910:	0c d0       	rcall	.+24     	; 0x492a <__divsf3x>
    4912:	70 c1       	rjmp	.+736    	; 0x4bf4 <__fp_round>
    4914:	68 d1       	rcall	.+720    	; 0x4be6 <__fp_pscB>
    4916:	40 f0       	brcs	.+16     	; 0x4928 <__divsf3+0x18>
    4918:	5f d1       	rcall	.+702    	; 0x4bd8 <__fp_pscA>
    491a:	30 f0       	brcs	.+12     	; 0x4928 <__divsf3+0x18>
    491c:	21 f4       	brne	.+8      	; 0x4926 <__divsf3+0x16>
    491e:	5f 3f       	cpi	r21, 0xFF	; 255
    4920:	19 f0       	breq	.+6      	; 0x4928 <__divsf3+0x18>
    4922:	03 c1       	rjmp	.+518    	; 0x4b2a <__fp_inf>
    4924:	51 11       	cpse	r21, r1
    4926:	b1 c1       	rjmp	.+866    	; 0x4c8a <__fp_szero>
    4928:	2f c1       	rjmp	.+606    	; 0x4b88 <__fp_nan>

0000492a <__divsf3x>:
    492a:	75 d1       	rcall	.+746    	; 0x4c16 <__fp_split3>
    492c:	98 f3       	brcs	.-26     	; 0x4914 <__divsf3+0x4>

0000492e <__divsf3_pse>:
    492e:	99 23       	and	r25, r25
    4930:	c9 f3       	breq	.-14     	; 0x4924 <__divsf3+0x14>
    4932:	55 23       	and	r21, r21
    4934:	b1 f3       	breq	.-20     	; 0x4922 <__divsf3+0x12>
    4936:	95 1b       	sub	r25, r21
    4938:	55 0b       	sbc	r21, r21
    493a:	bb 27       	eor	r27, r27
    493c:	aa 27       	eor	r26, r26
    493e:	62 17       	cp	r22, r18
    4940:	73 07       	cpc	r23, r19
    4942:	84 07       	cpc	r24, r20
    4944:	38 f0       	brcs	.+14     	; 0x4954 <__divsf3_pse+0x26>
    4946:	9f 5f       	subi	r25, 0xFF	; 255
    4948:	5f 4f       	sbci	r21, 0xFF	; 255
    494a:	22 0f       	add	r18, r18
    494c:	33 1f       	adc	r19, r19
    494e:	44 1f       	adc	r20, r20
    4950:	aa 1f       	adc	r26, r26
    4952:	a9 f3       	breq	.-22     	; 0x493e <__divsf3_pse+0x10>
    4954:	33 d0       	rcall	.+102    	; 0x49bc <__divsf3_pse+0x8e>
    4956:	0e 2e       	mov	r0, r30
    4958:	3a f0       	brmi	.+14     	; 0x4968 <__divsf3_pse+0x3a>
    495a:	e0 e8       	ldi	r30, 0x80	; 128
    495c:	30 d0       	rcall	.+96     	; 0x49be <__divsf3_pse+0x90>
    495e:	91 50       	subi	r25, 0x01	; 1
    4960:	50 40       	sbci	r21, 0x00	; 0
    4962:	e6 95       	lsr	r30
    4964:	00 1c       	adc	r0, r0
    4966:	ca f7       	brpl	.-14     	; 0x495a <__divsf3_pse+0x2c>
    4968:	29 d0       	rcall	.+82     	; 0x49bc <__divsf3_pse+0x8e>
    496a:	fe 2f       	mov	r31, r30
    496c:	27 d0       	rcall	.+78     	; 0x49bc <__divsf3_pse+0x8e>
    496e:	66 0f       	add	r22, r22
    4970:	77 1f       	adc	r23, r23
    4972:	88 1f       	adc	r24, r24
    4974:	bb 1f       	adc	r27, r27
    4976:	26 17       	cp	r18, r22
    4978:	37 07       	cpc	r19, r23
    497a:	48 07       	cpc	r20, r24
    497c:	ab 07       	cpc	r26, r27
    497e:	b0 e8       	ldi	r27, 0x80	; 128
    4980:	09 f0       	breq	.+2      	; 0x4984 <__divsf3_pse+0x56>
    4982:	bb 0b       	sbc	r27, r27
    4984:	80 2d       	mov	r24, r0
    4986:	bf 01       	movw	r22, r30
    4988:	ff 27       	eor	r31, r31
    498a:	93 58       	subi	r25, 0x83	; 131
    498c:	5f 4f       	sbci	r21, 0xFF	; 255
    498e:	2a f0       	brmi	.+10     	; 0x499a <__divsf3_pse+0x6c>
    4990:	9e 3f       	cpi	r25, 0xFE	; 254
    4992:	51 05       	cpc	r21, r1
    4994:	68 f0       	brcs	.+26     	; 0x49b0 <__divsf3_pse+0x82>
    4996:	c9 c0       	rjmp	.+402    	; 0x4b2a <__fp_inf>
    4998:	78 c1       	rjmp	.+752    	; 0x4c8a <__fp_szero>
    499a:	5f 3f       	cpi	r21, 0xFF	; 255
    499c:	ec f3       	brlt	.-6      	; 0x4998 <__divsf3_pse+0x6a>
    499e:	98 3e       	cpi	r25, 0xE8	; 232
    49a0:	dc f3       	brlt	.-10     	; 0x4998 <__divsf3_pse+0x6a>
    49a2:	86 95       	lsr	r24
    49a4:	77 95       	ror	r23
    49a6:	67 95       	ror	r22
    49a8:	b7 95       	ror	r27
    49aa:	f7 95       	ror	r31
    49ac:	9f 5f       	subi	r25, 0xFF	; 255
    49ae:	c9 f7       	brne	.-14     	; 0x49a2 <__divsf3_pse+0x74>
    49b0:	88 0f       	add	r24, r24
    49b2:	91 1d       	adc	r25, r1
    49b4:	96 95       	lsr	r25
    49b6:	87 95       	ror	r24
    49b8:	97 f9       	bld	r25, 7
    49ba:	08 95       	ret
    49bc:	e1 e0       	ldi	r30, 0x01	; 1
    49be:	66 0f       	add	r22, r22
    49c0:	77 1f       	adc	r23, r23
    49c2:	88 1f       	adc	r24, r24
    49c4:	bb 1f       	adc	r27, r27
    49c6:	62 17       	cp	r22, r18
    49c8:	73 07       	cpc	r23, r19
    49ca:	84 07       	cpc	r24, r20
    49cc:	ba 07       	cpc	r27, r26
    49ce:	20 f0       	brcs	.+8      	; 0x49d8 <__divsf3_pse+0xaa>
    49d0:	62 1b       	sub	r22, r18
    49d2:	73 0b       	sbc	r23, r19
    49d4:	84 0b       	sbc	r24, r20
    49d6:	ba 0b       	sbc	r27, r26
    49d8:	ee 1f       	adc	r30, r30
    49da:	88 f7       	brcc	.-30     	; 0x49be <__divsf3_pse+0x90>
    49dc:	e0 95       	com	r30
    49de:	08 95       	ret

000049e0 <__fixsfsi>:
    49e0:	04 d0       	rcall	.+8      	; 0x49ea <__fixunssfsi>
    49e2:	68 94       	set
    49e4:	b1 11       	cpse	r27, r1
    49e6:	51 c1       	rjmp	.+674    	; 0x4c8a <__fp_szero>
    49e8:	08 95       	ret

000049ea <__fixunssfsi>:
    49ea:	1d d1       	rcall	.+570    	; 0x4c26 <__fp_splitA>
    49ec:	88 f0       	brcs	.+34     	; 0x4a10 <__fixunssfsi+0x26>
    49ee:	9f 57       	subi	r25, 0x7F	; 127
    49f0:	90 f0       	brcs	.+36     	; 0x4a16 <__fixunssfsi+0x2c>
    49f2:	b9 2f       	mov	r27, r25
    49f4:	99 27       	eor	r25, r25
    49f6:	b7 51       	subi	r27, 0x17	; 23
    49f8:	a0 f0       	brcs	.+40     	; 0x4a22 <__fixunssfsi+0x38>
    49fa:	d1 f0       	breq	.+52     	; 0x4a30 <__fixunssfsi+0x46>
    49fc:	66 0f       	add	r22, r22
    49fe:	77 1f       	adc	r23, r23
    4a00:	88 1f       	adc	r24, r24
    4a02:	99 1f       	adc	r25, r25
    4a04:	1a f0       	brmi	.+6      	; 0x4a0c <__fixunssfsi+0x22>
    4a06:	ba 95       	dec	r27
    4a08:	c9 f7       	brne	.-14     	; 0x49fc <__fixunssfsi+0x12>
    4a0a:	12 c0       	rjmp	.+36     	; 0x4a30 <__fixunssfsi+0x46>
    4a0c:	b1 30       	cpi	r27, 0x01	; 1
    4a0e:	81 f0       	breq	.+32     	; 0x4a30 <__fixunssfsi+0x46>
    4a10:	3b d1       	rcall	.+630    	; 0x4c88 <__fp_zero>
    4a12:	b1 e0       	ldi	r27, 0x01	; 1
    4a14:	08 95       	ret
    4a16:	38 c1       	rjmp	.+624    	; 0x4c88 <__fp_zero>
    4a18:	67 2f       	mov	r22, r23
    4a1a:	78 2f       	mov	r23, r24
    4a1c:	88 27       	eor	r24, r24
    4a1e:	b8 5f       	subi	r27, 0xF8	; 248
    4a20:	39 f0       	breq	.+14     	; 0x4a30 <__fixunssfsi+0x46>
    4a22:	b9 3f       	cpi	r27, 0xF9	; 249
    4a24:	cc f3       	brlt	.-14     	; 0x4a18 <__fixunssfsi+0x2e>
    4a26:	86 95       	lsr	r24
    4a28:	77 95       	ror	r23
    4a2a:	67 95       	ror	r22
    4a2c:	b3 95       	inc	r27
    4a2e:	d9 f7       	brne	.-10     	; 0x4a26 <__fixunssfsi+0x3c>
    4a30:	3e f4       	brtc	.+14     	; 0x4a40 <__fixunssfsi+0x56>
    4a32:	90 95       	com	r25
    4a34:	80 95       	com	r24
    4a36:	70 95       	com	r23
    4a38:	61 95       	neg	r22
    4a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a40:	08 95       	ret

00004a42 <__floatunsisf>:
    4a42:	e8 94       	clt
    4a44:	09 c0       	rjmp	.+18     	; 0x4a58 <__floatsisf+0x12>

00004a46 <__floatsisf>:
    4a46:	97 fb       	bst	r25, 7
    4a48:	3e f4       	brtc	.+14     	; 0x4a58 <__floatsisf+0x12>
    4a4a:	90 95       	com	r25
    4a4c:	80 95       	com	r24
    4a4e:	70 95       	com	r23
    4a50:	61 95       	neg	r22
    4a52:	7f 4f       	sbci	r23, 0xFF	; 255
    4a54:	8f 4f       	sbci	r24, 0xFF	; 255
    4a56:	9f 4f       	sbci	r25, 0xFF	; 255
    4a58:	99 23       	and	r25, r25
    4a5a:	a9 f0       	breq	.+42     	; 0x4a86 <__floatsisf+0x40>
    4a5c:	f9 2f       	mov	r31, r25
    4a5e:	96 e9       	ldi	r25, 0x96	; 150
    4a60:	bb 27       	eor	r27, r27
    4a62:	93 95       	inc	r25
    4a64:	f6 95       	lsr	r31
    4a66:	87 95       	ror	r24
    4a68:	77 95       	ror	r23
    4a6a:	67 95       	ror	r22
    4a6c:	b7 95       	ror	r27
    4a6e:	f1 11       	cpse	r31, r1
    4a70:	f8 cf       	rjmp	.-16     	; 0x4a62 <__floatsisf+0x1c>
    4a72:	fa f4       	brpl	.+62     	; 0x4ab2 <__floatsisf+0x6c>
    4a74:	bb 0f       	add	r27, r27
    4a76:	11 f4       	brne	.+4      	; 0x4a7c <__floatsisf+0x36>
    4a78:	60 ff       	sbrs	r22, 0
    4a7a:	1b c0       	rjmp	.+54     	; 0x4ab2 <__floatsisf+0x6c>
    4a7c:	6f 5f       	subi	r22, 0xFF	; 255
    4a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a80:	8f 4f       	sbci	r24, 0xFF	; 255
    4a82:	9f 4f       	sbci	r25, 0xFF	; 255
    4a84:	16 c0       	rjmp	.+44     	; 0x4ab2 <__floatsisf+0x6c>
    4a86:	88 23       	and	r24, r24
    4a88:	11 f0       	breq	.+4      	; 0x4a8e <__floatsisf+0x48>
    4a8a:	96 e9       	ldi	r25, 0x96	; 150
    4a8c:	11 c0       	rjmp	.+34     	; 0x4ab0 <__floatsisf+0x6a>
    4a8e:	77 23       	and	r23, r23
    4a90:	21 f0       	breq	.+8      	; 0x4a9a <__floatsisf+0x54>
    4a92:	9e e8       	ldi	r25, 0x8E	; 142
    4a94:	87 2f       	mov	r24, r23
    4a96:	76 2f       	mov	r23, r22
    4a98:	05 c0       	rjmp	.+10     	; 0x4aa4 <__floatsisf+0x5e>
    4a9a:	66 23       	and	r22, r22
    4a9c:	71 f0       	breq	.+28     	; 0x4aba <__floatsisf+0x74>
    4a9e:	96 e8       	ldi	r25, 0x86	; 134
    4aa0:	86 2f       	mov	r24, r22
    4aa2:	70 e0       	ldi	r23, 0x00	; 0
    4aa4:	60 e0       	ldi	r22, 0x00	; 0
    4aa6:	2a f0       	brmi	.+10     	; 0x4ab2 <__floatsisf+0x6c>
    4aa8:	9a 95       	dec	r25
    4aaa:	66 0f       	add	r22, r22
    4aac:	77 1f       	adc	r23, r23
    4aae:	88 1f       	adc	r24, r24
    4ab0:	da f7       	brpl	.-10     	; 0x4aa8 <__floatsisf+0x62>
    4ab2:	88 0f       	add	r24, r24
    4ab4:	96 95       	lsr	r25
    4ab6:	87 95       	ror	r24
    4ab8:	97 f9       	bld	r25, 7
    4aba:	08 95       	ret

00004abc <floor>:
    4abc:	ce d0       	rcall	.+412    	; 0x4c5a <__fp_trunc>
    4abe:	80 f0       	brcs	.+32     	; 0x4ae0 <floor+0x24>
    4ac0:	9f 37       	cpi	r25, 0x7F	; 127
    4ac2:	40 f4       	brcc	.+16     	; 0x4ad4 <floor+0x18>
    4ac4:	91 11       	cpse	r25, r1
    4ac6:	0e f0       	brts	.+2      	; 0x4aca <floor+0xe>
    4ac8:	e0 c0       	rjmp	.+448    	; 0x4c8a <__fp_szero>
    4aca:	60 e0       	ldi	r22, 0x00	; 0
    4acc:	70 e0       	ldi	r23, 0x00	; 0
    4ace:	80 e8       	ldi	r24, 0x80	; 128
    4ad0:	9f eb       	ldi	r25, 0xBF	; 191
    4ad2:	08 95       	ret
    4ad4:	26 f4       	brtc	.+8      	; 0x4ade <floor+0x22>
    4ad6:	1b 16       	cp	r1, r27
    4ad8:	61 1d       	adc	r22, r1
    4ada:	71 1d       	adc	r23, r1
    4adc:	81 1d       	adc	r24, r1
    4ade:	2b c0       	rjmp	.+86     	; 0x4b36 <__fp_mintl>
    4ae0:	45 c0       	rjmp	.+138    	; 0x4b6c <__fp_mpack>

00004ae2 <__fp_cmp>:
    4ae2:	99 0f       	add	r25, r25
    4ae4:	00 08       	sbc	r0, r0
    4ae6:	55 0f       	add	r21, r21
    4ae8:	aa 0b       	sbc	r26, r26
    4aea:	e0 e8       	ldi	r30, 0x80	; 128
    4aec:	fe ef       	ldi	r31, 0xFE	; 254
    4aee:	16 16       	cp	r1, r22
    4af0:	17 06       	cpc	r1, r23
    4af2:	e8 07       	cpc	r30, r24
    4af4:	f9 07       	cpc	r31, r25
    4af6:	c0 f0       	brcs	.+48     	; 0x4b28 <__fp_cmp+0x46>
    4af8:	12 16       	cp	r1, r18
    4afa:	13 06       	cpc	r1, r19
    4afc:	e4 07       	cpc	r30, r20
    4afe:	f5 07       	cpc	r31, r21
    4b00:	98 f0       	brcs	.+38     	; 0x4b28 <__fp_cmp+0x46>
    4b02:	62 1b       	sub	r22, r18
    4b04:	73 0b       	sbc	r23, r19
    4b06:	84 0b       	sbc	r24, r20
    4b08:	95 0b       	sbc	r25, r21
    4b0a:	39 f4       	brne	.+14     	; 0x4b1a <__fp_cmp+0x38>
    4b0c:	0a 26       	eor	r0, r26
    4b0e:	61 f0       	breq	.+24     	; 0x4b28 <__fp_cmp+0x46>
    4b10:	23 2b       	or	r18, r19
    4b12:	24 2b       	or	r18, r20
    4b14:	25 2b       	or	r18, r21
    4b16:	21 f4       	brne	.+8      	; 0x4b20 <__fp_cmp+0x3e>
    4b18:	08 95       	ret
    4b1a:	0a 26       	eor	r0, r26
    4b1c:	09 f4       	brne	.+2      	; 0x4b20 <__fp_cmp+0x3e>
    4b1e:	a1 40       	sbci	r26, 0x01	; 1
    4b20:	a6 95       	lsr	r26
    4b22:	8f ef       	ldi	r24, 0xFF	; 255
    4b24:	81 1d       	adc	r24, r1
    4b26:	81 1d       	adc	r24, r1
    4b28:	08 95       	ret

00004b2a <__fp_inf>:
    4b2a:	97 f9       	bld	r25, 7
    4b2c:	9f 67       	ori	r25, 0x7F	; 127
    4b2e:	80 e8       	ldi	r24, 0x80	; 128
    4b30:	70 e0       	ldi	r23, 0x00	; 0
    4b32:	60 e0       	ldi	r22, 0x00	; 0
    4b34:	08 95       	ret

00004b36 <__fp_mintl>:
    4b36:	88 23       	and	r24, r24
    4b38:	71 f4       	brne	.+28     	; 0x4b56 <__fp_mintl+0x20>
    4b3a:	77 23       	and	r23, r23
    4b3c:	21 f0       	breq	.+8      	; 0x4b46 <__fp_mintl+0x10>
    4b3e:	98 50       	subi	r25, 0x08	; 8
    4b40:	87 2b       	or	r24, r23
    4b42:	76 2f       	mov	r23, r22
    4b44:	07 c0       	rjmp	.+14     	; 0x4b54 <__fp_mintl+0x1e>
    4b46:	66 23       	and	r22, r22
    4b48:	11 f4       	brne	.+4      	; 0x4b4e <__fp_mintl+0x18>
    4b4a:	99 27       	eor	r25, r25
    4b4c:	0d c0       	rjmp	.+26     	; 0x4b68 <__fp_mintl+0x32>
    4b4e:	90 51       	subi	r25, 0x10	; 16
    4b50:	86 2b       	or	r24, r22
    4b52:	70 e0       	ldi	r23, 0x00	; 0
    4b54:	60 e0       	ldi	r22, 0x00	; 0
    4b56:	2a f0       	brmi	.+10     	; 0x4b62 <__fp_mintl+0x2c>
    4b58:	9a 95       	dec	r25
    4b5a:	66 0f       	add	r22, r22
    4b5c:	77 1f       	adc	r23, r23
    4b5e:	88 1f       	adc	r24, r24
    4b60:	da f7       	brpl	.-10     	; 0x4b58 <__fp_mintl+0x22>
    4b62:	88 0f       	add	r24, r24
    4b64:	96 95       	lsr	r25
    4b66:	87 95       	ror	r24
    4b68:	97 f9       	bld	r25, 7
    4b6a:	08 95       	ret

00004b6c <__fp_mpack>:
    4b6c:	9f 3f       	cpi	r25, 0xFF	; 255
    4b6e:	31 f0       	breq	.+12     	; 0x4b7c <__fp_mpack_finite+0xc>

00004b70 <__fp_mpack_finite>:
    4b70:	91 50       	subi	r25, 0x01	; 1
    4b72:	20 f4       	brcc	.+8      	; 0x4b7c <__fp_mpack_finite+0xc>
    4b74:	87 95       	ror	r24
    4b76:	77 95       	ror	r23
    4b78:	67 95       	ror	r22
    4b7a:	b7 95       	ror	r27
    4b7c:	88 0f       	add	r24, r24
    4b7e:	91 1d       	adc	r25, r1
    4b80:	96 95       	lsr	r25
    4b82:	87 95       	ror	r24
    4b84:	97 f9       	bld	r25, 7
    4b86:	08 95       	ret

00004b88 <__fp_nan>:
    4b88:	9f ef       	ldi	r25, 0xFF	; 255
    4b8a:	80 ec       	ldi	r24, 0xC0	; 192
    4b8c:	08 95       	ret

00004b8e <__fp_powser>:
    4b8e:	df 93       	push	r29
    4b90:	cf 93       	push	r28
    4b92:	1f 93       	push	r17
    4b94:	0f 93       	push	r16
    4b96:	ff 92       	push	r15
    4b98:	ef 92       	push	r14
    4b9a:	df 92       	push	r13
    4b9c:	7b 01       	movw	r14, r22
    4b9e:	8c 01       	movw	r16, r24
    4ba0:	68 94       	set
    4ba2:	05 c0       	rjmp	.+10     	; 0x4bae <__fp_powser+0x20>
    4ba4:	da 2e       	mov	r13, r26
    4ba6:	ef 01       	movw	r28, r30
    4ba8:	f0 d0       	rcall	.+480    	; 0x4d8a <__mulsf3x>
    4baa:	fe 01       	movw	r30, r28
    4bac:	e8 94       	clt
    4bae:	a5 91       	lpm	r26, Z+
    4bb0:	25 91       	lpm	r18, Z+
    4bb2:	35 91       	lpm	r19, Z+
    4bb4:	45 91       	lpm	r20, Z+
    4bb6:	55 91       	lpm	r21, Z+
    4bb8:	ae f3       	brts	.-22     	; 0x4ba4 <__fp_powser+0x16>
    4bba:	ef 01       	movw	r28, r30
    4bbc:	17 de       	rcall	.-978    	; 0x47ec <__addsf3x>
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	97 01       	movw	r18, r14
    4bc2:	a8 01       	movw	r20, r16
    4bc4:	da 94       	dec	r13
    4bc6:	79 f7       	brne	.-34     	; 0x4ba6 <__fp_powser+0x18>
    4bc8:	df 90       	pop	r13
    4bca:	ef 90       	pop	r14
    4bcc:	ff 90       	pop	r15
    4bce:	0f 91       	pop	r16
    4bd0:	1f 91       	pop	r17
    4bd2:	cf 91       	pop	r28
    4bd4:	df 91       	pop	r29
    4bd6:	08 95       	ret

00004bd8 <__fp_pscA>:
    4bd8:	00 24       	eor	r0, r0
    4bda:	0a 94       	dec	r0
    4bdc:	16 16       	cp	r1, r22
    4bde:	17 06       	cpc	r1, r23
    4be0:	18 06       	cpc	r1, r24
    4be2:	09 06       	cpc	r0, r25
    4be4:	08 95       	ret

00004be6 <__fp_pscB>:
    4be6:	00 24       	eor	r0, r0
    4be8:	0a 94       	dec	r0
    4bea:	12 16       	cp	r1, r18
    4bec:	13 06       	cpc	r1, r19
    4bee:	14 06       	cpc	r1, r20
    4bf0:	05 06       	cpc	r0, r21
    4bf2:	08 95       	ret

00004bf4 <__fp_round>:
    4bf4:	09 2e       	mov	r0, r25
    4bf6:	03 94       	inc	r0
    4bf8:	00 0c       	add	r0, r0
    4bfa:	11 f4       	brne	.+4      	; 0x4c00 <__fp_round+0xc>
    4bfc:	88 23       	and	r24, r24
    4bfe:	52 f0       	brmi	.+20     	; 0x4c14 <__fp_round+0x20>
    4c00:	bb 0f       	add	r27, r27
    4c02:	40 f4       	brcc	.+16     	; 0x4c14 <__fp_round+0x20>
    4c04:	bf 2b       	or	r27, r31
    4c06:	11 f4       	brne	.+4      	; 0x4c0c <__fp_round+0x18>
    4c08:	60 ff       	sbrs	r22, 0
    4c0a:	04 c0       	rjmp	.+8      	; 0x4c14 <__fp_round+0x20>
    4c0c:	6f 5f       	subi	r22, 0xFF	; 255
    4c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c10:	8f 4f       	sbci	r24, 0xFF	; 255
    4c12:	9f 4f       	sbci	r25, 0xFF	; 255
    4c14:	08 95       	ret

00004c16 <__fp_split3>:
    4c16:	57 fd       	sbrc	r21, 7
    4c18:	90 58       	subi	r25, 0x80	; 128
    4c1a:	44 0f       	add	r20, r20
    4c1c:	55 1f       	adc	r21, r21
    4c1e:	59 f0       	breq	.+22     	; 0x4c36 <__fp_splitA+0x10>
    4c20:	5f 3f       	cpi	r21, 0xFF	; 255
    4c22:	71 f0       	breq	.+28     	; 0x4c40 <__fp_splitA+0x1a>
    4c24:	47 95       	ror	r20

00004c26 <__fp_splitA>:
    4c26:	88 0f       	add	r24, r24
    4c28:	97 fb       	bst	r25, 7
    4c2a:	99 1f       	adc	r25, r25
    4c2c:	61 f0       	breq	.+24     	; 0x4c46 <__fp_splitA+0x20>
    4c2e:	9f 3f       	cpi	r25, 0xFF	; 255
    4c30:	79 f0       	breq	.+30     	; 0x4c50 <__fp_splitA+0x2a>
    4c32:	87 95       	ror	r24
    4c34:	08 95       	ret
    4c36:	12 16       	cp	r1, r18
    4c38:	13 06       	cpc	r1, r19
    4c3a:	14 06       	cpc	r1, r20
    4c3c:	55 1f       	adc	r21, r21
    4c3e:	f2 cf       	rjmp	.-28     	; 0x4c24 <__fp_split3+0xe>
    4c40:	46 95       	lsr	r20
    4c42:	f1 df       	rcall	.-30     	; 0x4c26 <__fp_splitA>
    4c44:	08 c0       	rjmp	.+16     	; 0x4c56 <__fp_splitA+0x30>
    4c46:	16 16       	cp	r1, r22
    4c48:	17 06       	cpc	r1, r23
    4c4a:	18 06       	cpc	r1, r24
    4c4c:	99 1f       	adc	r25, r25
    4c4e:	f1 cf       	rjmp	.-30     	; 0x4c32 <__fp_splitA+0xc>
    4c50:	86 95       	lsr	r24
    4c52:	71 05       	cpc	r23, r1
    4c54:	61 05       	cpc	r22, r1
    4c56:	08 94       	sec
    4c58:	08 95       	ret

00004c5a <__fp_trunc>:
    4c5a:	e5 df       	rcall	.-54     	; 0x4c26 <__fp_splitA>
    4c5c:	a0 f0       	brcs	.+40     	; 0x4c86 <__fp_trunc+0x2c>
    4c5e:	be e7       	ldi	r27, 0x7E	; 126
    4c60:	b9 17       	cp	r27, r25
    4c62:	88 f4       	brcc	.+34     	; 0x4c86 <__fp_trunc+0x2c>
    4c64:	bb 27       	eor	r27, r27
    4c66:	9f 38       	cpi	r25, 0x8F	; 143
    4c68:	60 f4       	brcc	.+24     	; 0x4c82 <__fp_trunc+0x28>
    4c6a:	16 16       	cp	r1, r22
    4c6c:	b1 1d       	adc	r27, r1
    4c6e:	67 2f       	mov	r22, r23
    4c70:	78 2f       	mov	r23, r24
    4c72:	88 27       	eor	r24, r24
    4c74:	98 5f       	subi	r25, 0xF8	; 248
    4c76:	f7 cf       	rjmp	.-18     	; 0x4c66 <__fp_trunc+0xc>
    4c78:	86 95       	lsr	r24
    4c7a:	77 95       	ror	r23
    4c7c:	67 95       	ror	r22
    4c7e:	b1 1d       	adc	r27, r1
    4c80:	93 95       	inc	r25
    4c82:	96 39       	cpi	r25, 0x96	; 150
    4c84:	c8 f3       	brcs	.-14     	; 0x4c78 <__fp_trunc+0x1e>
    4c86:	08 95       	ret

00004c88 <__fp_zero>:
    4c88:	e8 94       	clt

00004c8a <__fp_szero>:
    4c8a:	bb 27       	eor	r27, r27
    4c8c:	66 27       	eor	r22, r22
    4c8e:	77 27       	eor	r23, r23
    4c90:	cb 01       	movw	r24, r22
    4c92:	97 f9       	bld	r25, 7
    4c94:	08 95       	ret

00004c96 <__gesf2>:
    4c96:	25 df       	rcall	.-438    	; 0x4ae2 <__fp_cmp>
    4c98:	08 f4       	brcc	.+2      	; 0x4c9c <__gesf2+0x6>
    4c9a:	8f ef       	ldi	r24, 0xFF	; 255
    4c9c:	08 95       	ret

00004c9e <inverse>:
    4c9e:	9b 01       	movw	r18, r22
    4ca0:	ac 01       	movw	r20, r24
    4ca2:	60 e0       	ldi	r22, 0x00	; 0
    4ca4:	70 e0       	ldi	r23, 0x00	; 0
    4ca6:	80 e8       	ldi	r24, 0x80	; 128
    4ca8:	9f e3       	ldi	r25, 0x3F	; 63
    4caa:	32 ce       	rjmp	.-924    	; 0x4910 <__divsf3>

00004cac <lround>:
    4cac:	bc df       	rcall	.-136    	; 0x4c26 <__fp_splitA>
    4cae:	58 f1       	brcs	.+86     	; 0x4d06 <lround+0x5a>
    4cb0:	9e 57       	subi	r25, 0x7E	; 126
    4cb2:	58 f1       	brcs	.+86     	; 0x4d0a <lround+0x5e>
    4cb4:	98 51       	subi	r25, 0x18	; 24
    4cb6:	a0 f0       	brcs	.+40     	; 0x4ce0 <lround+0x34>
    4cb8:	e9 f0       	breq	.+58     	; 0x4cf4 <lround+0x48>
    4cba:	98 30       	cpi	r25, 0x08	; 8
    4cbc:	20 f5       	brcc	.+72     	; 0x4d06 <lround+0x5a>
    4cbe:	09 2e       	mov	r0, r25
    4cc0:	99 27       	eor	r25, r25
    4cc2:	66 0f       	add	r22, r22
    4cc4:	77 1f       	adc	r23, r23
    4cc6:	88 1f       	adc	r24, r24
    4cc8:	99 1f       	adc	r25, r25
    4cca:	0a 94       	dec	r0
    4ccc:	d1 f7       	brne	.-12     	; 0x4cc2 <lround+0x16>
    4cce:	12 c0       	rjmp	.+36     	; 0x4cf4 <lround+0x48>
    4cd0:	06 2e       	mov	r0, r22
    4cd2:	67 2f       	mov	r22, r23
    4cd4:	78 2f       	mov	r23, r24
    4cd6:	88 27       	eor	r24, r24
    4cd8:	98 5f       	subi	r25, 0xF8	; 248
    4cda:	11 f4       	brne	.+4      	; 0x4ce0 <lround+0x34>
    4cdc:	00 0c       	add	r0, r0
    4cde:	07 c0       	rjmp	.+14     	; 0x4cee <lround+0x42>
    4ce0:	99 3f       	cpi	r25, 0xF9	; 249
    4ce2:	b4 f3       	brlt	.-20     	; 0x4cd0 <lround+0x24>
    4ce4:	86 95       	lsr	r24
    4ce6:	77 95       	ror	r23
    4ce8:	67 95       	ror	r22
    4cea:	93 95       	inc	r25
    4cec:	d9 f7       	brne	.-10     	; 0x4ce4 <lround+0x38>
    4cee:	61 1d       	adc	r22, r1
    4cf0:	71 1d       	adc	r23, r1
    4cf2:	81 1d       	adc	r24, r1
    4cf4:	3e f4       	brtc	.+14     	; 0x4d04 <lround+0x58>
    4cf6:	90 95       	com	r25
    4cf8:	80 95       	com	r24
    4cfa:	70 95       	com	r23
    4cfc:	61 95       	neg	r22
    4cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    4d00:	8f 4f       	sbci	r24, 0xFF	; 255
    4d02:	9f 4f       	sbci	r25, 0xFF	; 255
    4d04:	08 95       	ret
    4d06:	68 94       	set
    4d08:	c0 cf       	rjmp	.-128    	; 0x4c8a <__fp_szero>
    4d0a:	be cf       	rjmp	.-132    	; 0x4c88 <__fp_zero>

00004d0c <modf>:
    4d0c:	fa 01       	movw	r30, r20
    4d0e:	dc 01       	movw	r26, r24
    4d10:	aa 0f       	add	r26, r26
    4d12:	bb 1f       	adc	r27, r27
    4d14:	9b 01       	movw	r18, r22
    4d16:	ac 01       	movw	r20, r24
    4d18:	bf 57       	subi	r27, 0x7F	; 127
    4d1a:	28 f4       	brcc	.+10     	; 0x4d26 <modf+0x1a>
    4d1c:	22 27       	eor	r18, r18
    4d1e:	33 27       	eor	r19, r19
    4d20:	44 27       	eor	r20, r20
    4d22:	50 78       	andi	r21, 0x80	; 128
    4d24:	1f c0       	rjmp	.+62     	; 0x4d64 <modf+0x58>
    4d26:	b7 51       	subi	r27, 0x17	; 23
    4d28:	88 f4       	brcc	.+34     	; 0x4d4c <modf+0x40>
    4d2a:	ab 2f       	mov	r26, r27
    4d2c:	00 24       	eor	r0, r0
    4d2e:	46 95       	lsr	r20
    4d30:	37 95       	ror	r19
    4d32:	27 95       	ror	r18
    4d34:	01 1c       	adc	r0, r1
    4d36:	a3 95       	inc	r26
    4d38:	d2 f3       	brmi	.-12     	; 0x4d2e <modf+0x22>
    4d3a:	00 20       	and	r0, r0
    4d3c:	69 f0       	breq	.+26     	; 0x4d58 <modf+0x4c>
    4d3e:	22 0f       	add	r18, r18
    4d40:	33 1f       	adc	r19, r19
    4d42:	44 1f       	adc	r20, r20
    4d44:	b3 95       	inc	r27
    4d46:	da f3       	brmi	.-10     	; 0x4d3e <modf+0x32>
    4d48:	0d d0       	rcall	.+26     	; 0x4d64 <modf+0x58>
    4d4a:	3e cd       	rjmp	.-1412   	; 0x47c8 <__subsf3>
    4d4c:	61 30       	cpi	r22, 0x01	; 1
    4d4e:	71 05       	cpc	r23, r1
    4d50:	a0 e8       	ldi	r26, 0x80	; 128
    4d52:	8a 07       	cpc	r24, r26
    4d54:	b9 46       	sbci	r27, 0x69	; 105
    4d56:	30 f4       	brcc	.+12     	; 0x4d64 <modf+0x58>
    4d58:	9b 01       	movw	r18, r22
    4d5a:	ac 01       	movw	r20, r24
    4d5c:	66 27       	eor	r22, r22
    4d5e:	77 27       	eor	r23, r23
    4d60:	88 27       	eor	r24, r24
    4d62:	90 78       	andi	r25, 0x80	; 128
    4d64:	30 96       	adiw	r30, 0x00	; 0
    4d66:	21 f0       	breq	.+8      	; 0x4d70 <modf+0x64>
    4d68:	20 83       	st	Z, r18
    4d6a:	31 83       	std	Z+1, r19	; 0x01
    4d6c:	42 83       	std	Z+2, r20	; 0x02
    4d6e:	53 83       	std	Z+3, r21	; 0x03
    4d70:	08 95       	ret

00004d72 <__mulsf3>:
    4d72:	0b d0       	rcall	.+22     	; 0x4d8a <__mulsf3x>
    4d74:	3f cf       	rjmp	.-386    	; 0x4bf4 <__fp_round>
    4d76:	30 df       	rcall	.-416    	; 0x4bd8 <__fp_pscA>
    4d78:	28 f0       	brcs	.+10     	; 0x4d84 <__mulsf3+0x12>
    4d7a:	35 df       	rcall	.-406    	; 0x4be6 <__fp_pscB>
    4d7c:	18 f0       	brcs	.+6      	; 0x4d84 <__mulsf3+0x12>
    4d7e:	95 23       	and	r25, r21
    4d80:	09 f0       	breq	.+2      	; 0x4d84 <__mulsf3+0x12>
    4d82:	d3 ce       	rjmp	.-602    	; 0x4b2a <__fp_inf>
    4d84:	01 cf       	rjmp	.-510    	; 0x4b88 <__fp_nan>
    4d86:	11 24       	eor	r1, r1
    4d88:	80 cf       	rjmp	.-256    	; 0x4c8a <__fp_szero>

00004d8a <__mulsf3x>:
    4d8a:	45 df       	rcall	.-374    	; 0x4c16 <__fp_split3>
    4d8c:	a0 f3       	brcs	.-24     	; 0x4d76 <__mulsf3+0x4>

00004d8e <__mulsf3_pse>:
    4d8e:	95 9f       	mul	r25, r21
    4d90:	d1 f3       	breq	.-12     	; 0x4d86 <__mulsf3+0x14>
    4d92:	95 0f       	add	r25, r21
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	55 1f       	adc	r21, r21
    4d98:	62 9f       	mul	r22, r18
    4d9a:	f0 01       	movw	r30, r0
    4d9c:	72 9f       	mul	r23, r18
    4d9e:	bb 27       	eor	r27, r27
    4da0:	f0 0d       	add	r31, r0
    4da2:	b1 1d       	adc	r27, r1
    4da4:	63 9f       	mul	r22, r19
    4da6:	aa 27       	eor	r26, r26
    4da8:	f0 0d       	add	r31, r0
    4daa:	b1 1d       	adc	r27, r1
    4dac:	aa 1f       	adc	r26, r26
    4dae:	64 9f       	mul	r22, r20
    4db0:	66 27       	eor	r22, r22
    4db2:	b0 0d       	add	r27, r0
    4db4:	a1 1d       	adc	r26, r1
    4db6:	66 1f       	adc	r22, r22
    4db8:	82 9f       	mul	r24, r18
    4dba:	22 27       	eor	r18, r18
    4dbc:	b0 0d       	add	r27, r0
    4dbe:	a1 1d       	adc	r26, r1
    4dc0:	62 1f       	adc	r22, r18
    4dc2:	73 9f       	mul	r23, r19
    4dc4:	b0 0d       	add	r27, r0
    4dc6:	a1 1d       	adc	r26, r1
    4dc8:	62 1f       	adc	r22, r18
    4dca:	83 9f       	mul	r24, r19
    4dcc:	a0 0d       	add	r26, r0
    4dce:	61 1d       	adc	r22, r1
    4dd0:	22 1f       	adc	r18, r18
    4dd2:	74 9f       	mul	r23, r20
    4dd4:	33 27       	eor	r19, r19
    4dd6:	a0 0d       	add	r26, r0
    4dd8:	61 1d       	adc	r22, r1
    4dda:	23 1f       	adc	r18, r19
    4ddc:	84 9f       	mul	r24, r20
    4dde:	60 0d       	add	r22, r0
    4de0:	21 1d       	adc	r18, r1
    4de2:	82 2f       	mov	r24, r18
    4de4:	76 2f       	mov	r23, r22
    4de6:	6a 2f       	mov	r22, r26
    4de8:	11 24       	eor	r1, r1
    4dea:	9f 57       	subi	r25, 0x7F	; 127
    4dec:	50 40       	sbci	r21, 0x00	; 0
    4dee:	8a f0       	brmi	.+34     	; 0x4e12 <__mulsf3_pse+0x84>
    4df0:	e1 f0       	breq	.+56     	; 0x4e2a <__mulsf3_pse+0x9c>
    4df2:	88 23       	and	r24, r24
    4df4:	4a f0       	brmi	.+18     	; 0x4e08 <__mulsf3_pse+0x7a>
    4df6:	ee 0f       	add	r30, r30
    4df8:	ff 1f       	adc	r31, r31
    4dfa:	bb 1f       	adc	r27, r27
    4dfc:	66 1f       	adc	r22, r22
    4dfe:	77 1f       	adc	r23, r23
    4e00:	88 1f       	adc	r24, r24
    4e02:	91 50       	subi	r25, 0x01	; 1
    4e04:	50 40       	sbci	r21, 0x00	; 0
    4e06:	a9 f7       	brne	.-22     	; 0x4df2 <__mulsf3_pse+0x64>
    4e08:	9e 3f       	cpi	r25, 0xFE	; 254
    4e0a:	51 05       	cpc	r21, r1
    4e0c:	70 f0       	brcs	.+28     	; 0x4e2a <__mulsf3_pse+0x9c>
    4e0e:	8d ce       	rjmp	.-742    	; 0x4b2a <__fp_inf>
    4e10:	3c cf       	rjmp	.-392    	; 0x4c8a <__fp_szero>
    4e12:	5f 3f       	cpi	r21, 0xFF	; 255
    4e14:	ec f3       	brlt	.-6      	; 0x4e10 <__mulsf3_pse+0x82>
    4e16:	98 3e       	cpi	r25, 0xE8	; 232
    4e18:	dc f3       	brlt	.-10     	; 0x4e10 <__mulsf3_pse+0x82>
    4e1a:	86 95       	lsr	r24
    4e1c:	77 95       	ror	r23
    4e1e:	67 95       	ror	r22
    4e20:	b7 95       	ror	r27
    4e22:	f7 95       	ror	r31
    4e24:	e7 95       	ror	r30
    4e26:	9f 5f       	subi	r25, 0xFF	; 255
    4e28:	c1 f7       	brne	.-16     	; 0x4e1a <__mulsf3_pse+0x8c>
    4e2a:	fe 2b       	or	r31, r30
    4e2c:	88 0f       	add	r24, r24
    4e2e:	91 1d       	adc	r25, r1
    4e30:	96 95       	lsr	r25
    4e32:	87 95       	ror	r24
    4e34:	97 f9       	bld	r25, 7
    4e36:	08 95       	ret

00004e38 <round>:
    4e38:	f6 de       	rcall	.-532    	; 0x4c26 <__fp_splitA>
    4e3a:	e0 f0       	brcs	.+56     	; 0x4e74 <round+0x3c>
    4e3c:	9e 37       	cpi	r25, 0x7E	; 126
    4e3e:	d8 f0       	brcs	.+54     	; 0x4e76 <round+0x3e>
    4e40:	96 39       	cpi	r25, 0x96	; 150
    4e42:	b8 f4       	brcc	.+46     	; 0x4e72 <round+0x3a>
    4e44:	9e 38       	cpi	r25, 0x8E	; 142
    4e46:	48 f4       	brcc	.+18     	; 0x4e5a <round+0x22>
    4e48:	67 2f       	mov	r22, r23
    4e4a:	78 2f       	mov	r23, r24
    4e4c:	88 27       	eor	r24, r24
    4e4e:	98 5f       	subi	r25, 0xF8	; 248
    4e50:	f9 cf       	rjmp	.-14     	; 0x4e44 <round+0xc>
    4e52:	86 95       	lsr	r24
    4e54:	77 95       	ror	r23
    4e56:	67 95       	ror	r22
    4e58:	93 95       	inc	r25
    4e5a:	95 39       	cpi	r25, 0x95	; 149
    4e5c:	d0 f3       	brcs	.-12     	; 0x4e52 <round+0x1a>
    4e5e:	b6 2f       	mov	r27, r22
    4e60:	b1 70       	andi	r27, 0x01	; 1
    4e62:	6b 0f       	add	r22, r27
    4e64:	71 1d       	adc	r23, r1
    4e66:	81 1d       	adc	r24, r1
    4e68:	20 f4       	brcc	.+8      	; 0x4e72 <round+0x3a>
    4e6a:	87 95       	ror	r24
    4e6c:	77 95       	ror	r23
    4e6e:	67 95       	ror	r22
    4e70:	93 95       	inc	r25
    4e72:	61 ce       	rjmp	.-830    	; 0x4b36 <__fp_mintl>
    4e74:	7b ce       	rjmp	.-778    	; 0x4b6c <__fp_mpack>
    4e76:	09 cf       	rjmp	.-494    	; 0x4c8a <__fp_szero>
    4e78:	11 f4       	brne	.+4      	; 0x4e7e <round+0x46>
    4e7a:	0e f4       	brtc	.+2      	; 0x4e7e <round+0x46>
    4e7c:	85 ce       	rjmp	.-758    	; 0x4b88 <__fp_nan>
    4e7e:	76 ce       	rjmp	.-788    	; 0x4b6c <__fp_mpack>

00004e80 <sqrt>:
    4e80:	d2 de       	rcall	.-604    	; 0x4c26 <__fp_splitA>
    4e82:	d0 f3       	brcs	.-12     	; 0x4e78 <round+0x40>
    4e84:	99 23       	and	r25, r25
    4e86:	d9 f3       	breq	.-10     	; 0x4e7e <round+0x46>
    4e88:	ce f3       	brts	.-14     	; 0x4e7c <round+0x44>
    4e8a:	9f 57       	subi	r25, 0x7F	; 127
    4e8c:	55 0b       	sbc	r21, r21
    4e8e:	87 ff       	sbrs	r24, 7
    4e90:	3f d0       	rcall	.+126    	; 0x4f10 <__fp_norm2>
    4e92:	00 24       	eor	r0, r0
    4e94:	a0 e6       	ldi	r26, 0x60	; 96
    4e96:	40 ea       	ldi	r20, 0xA0	; 160
    4e98:	90 01       	movw	r18, r0
    4e9a:	80 58       	subi	r24, 0x80	; 128
    4e9c:	56 95       	lsr	r21
    4e9e:	97 95       	ror	r25
    4ea0:	28 f4       	brcc	.+10     	; 0x4eac <sqrt+0x2c>
    4ea2:	80 5c       	subi	r24, 0xC0	; 192
    4ea4:	66 0f       	add	r22, r22
    4ea6:	77 1f       	adc	r23, r23
    4ea8:	88 1f       	adc	r24, r24
    4eaa:	20 f0       	brcs	.+8      	; 0x4eb4 <sqrt+0x34>
    4eac:	26 17       	cp	r18, r22
    4eae:	37 07       	cpc	r19, r23
    4eb0:	48 07       	cpc	r20, r24
    4eb2:	30 f4       	brcc	.+12     	; 0x4ec0 <sqrt+0x40>
    4eb4:	62 1b       	sub	r22, r18
    4eb6:	73 0b       	sbc	r23, r19
    4eb8:	84 0b       	sbc	r24, r20
    4eba:	20 29       	or	r18, r0
    4ebc:	31 29       	or	r19, r1
    4ebe:	4a 2b       	or	r20, r26
    4ec0:	a6 95       	lsr	r26
    4ec2:	17 94       	ror	r1
    4ec4:	07 94       	ror	r0
    4ec6:	20 25       	eor	r18, r0
    4ec8:	31 25       	eor	r19, r1
    4eca:	4a 27       	eor	r20, r26
    4ecc:	58 f7       	brcc	.-42     	; 0x4ea4 <sqrt+0x24>
    4ece:	66 0f       	add	r22, r22
    4ed0:	77 1f       	adc	r23, r23
    4ed2:	88 1f       	adc	r24, r24
    4ed4:	20 f0       	brcs	.+8      	; 0x4ede <sqrt+0x5e>
    4ed6:	26 17       	cp	r18, r22
    4ed8:	37 07       	cpc	r19, r23
    4eda:	48 07       	cpc	r20, r24
    4edc:	30 f4       	brcc	.+12     	; 0x4eea <sqrt+0x6a>
    4ede:	62 0b       	sbc	r22, r18
    4ee0:	73 0b       	sbc	r23, r19
    4ee2:	84 0b       	sbc	r24, r20
    4ee4:	20 0d       	add	r18, r0
    4ee6:	31 1d       	adc	r19, r1
    4ee8:	41 1d       	adc	r20, r1
    4eea:	a0 95       	com	r26
    4eec:	81 f7       	brne	.-32     	; 0x4ece <sqrt+0x4e>
    4eee:	b9 01       	movw	r22, r18
    4ef0:	84 2f       	mov	r24, r20
    4ef2:	91 58       	subi	r25, 0x81	; 129
    4ef4:	88 0f       	add	r24, r24
    4ef6:	96 95       	lsr	r25
    4ef8:	87 95       	ror	r24
    4efa:	08 95       	ret

00004efc <square>:
    4efc:	9b 01       	movw	r18, r22
    4efe:	ac 01       	movw	r20, r24
    4f00:	38 cf       	rjmp	.-400    	; 0x4d72 <__mulsf3>

00004f02 <trunc>:
    4f02:	ab de       	rcall	.-682    	; 0x4c5a <__fp_trunc>
    4f04:	20 f0       	brcs	.+8      	; 0x4f0e <trunc+0xc>
    4f06:	9f 37       	cpi	r25, 0x7F	; 127
    4f08:	08 f4       	brcc	.+2      	; 0x4f0c <trunc+0xa>
    4f0a:	bf ce       	rjmp	.-642    	; 0x4c8a <__fp_szero>
    4f0c:	14 ce       	rjmp	.-984    	; 0x4b36 <__fp_mintl>
    4f0e:	2e ce       	rjmp	.-932    	; 0x4b6c <__fp_mpack>

00004f10 <__fp_norm2>:
    4f10:	91 50       	subi	r25, 0x01	; 1
    4f12:	50 40       	sbci	r21, 0x00	; 0
    4f14:	66 0f       	add	r22, r22
    4f16:	77 1f       	adc	r23, r23
    4f18:	88 1f       	adc	r24, r24
    4f1a:	d2 f7       	brpl	.-12     	; 0x4f10 <__fp_norm2>
    4f1c:	08 95       	ret

00004f1e <__mulsi3>:
    4f1e:	62 9f       	mul	r22, r18
    4f20:	d0 01       	movw	r26, r0
    4f22:	73 9f       	mul	r23, r19
    4f24:	f0 01       	movw	r30, r0
    4f26:	82 9f       	mul	r24, r18
    4f28:	e0 0d       	add	r30, r0
    4f2a:	f1 1d       	adc	r31, r1
    4f2c:	64 9f       	mul	r22, r20
    4f2e:	e0 0d       	add	r30, r0
    4f30:	f1 1d       	adc	r31, r1
    4f32:	92 9f       	mul	r25, r18
    4f34:	f0 0d       	add	r31, r0
    4f36:	83 9f       	mul	r24, r19
    4f38:	f0 0d       	add	r31, r0
    4f3a:	74 9f       	mul	r23, r20
    4f3c:	f0 0d       	add	r31, r0
    4f3e:	65 9f       	mul	r22, r21
    4f40:	f0 0d       	add	r31, r0
    4f42:	99 27       	eor	r25, r25
    4f44:	72 9f       	mul	r23, r18
    4f46:	b0 0d       	add	r27, r0
    4f48:	e1 1d       	adc	r30, r1
    4f4a:	f9 1f       	adc	r31, r25
    4f4c:	63 9f       	mul	r22, r19
    4f4e:	b0 0d       	add	r27, r0
    4f50:	e1 1d       	adc	r30, r1
    4f52:	f9 1f       	adc	r31, r25
    4f54:	bd 01       	movw	r22, r26
    4f56:	cf 01       	movw	r24, r30
    4f58:	11 24       	eor	r1, r1
    4f5a:	08 95       	ret

00004f5c <__divmodhi4>:
    4f5c:	97 fb       	bst	r25, 7
    4f5e:	09 2e       	mov	r0, r25
    4f60:	07 26       	eor	r0, r23
    4f62:	0a d0       	rcall	.+20     	; 0x4f78 <__divmodhi4_neg1>
    4f64:	77 fd       	sbrc	r23, 7
    4f66:	04 d0       	rcall	.+8      	; 0x4f70 <__divmodhi4_neg2>
    4f68:	49 d0       	rcall	.+146    	; 0x4ffc <__udivmodhi4>
    4f6a:	06 d0       	rcall	.+12     	; 0x4f78 <__divmodhi4_neg1>
    4f6c:	00 20       	and	r0, r0
    4f6e:	1a f4       	brpl	.+6      	; 0x4f76 <__divmodhi4_exit>

00004f70 <__divmodhi4_neg2>:
    4f70:	70 95       	com	r23
    4f72:	61 95       	neg	r22
    4f74:	7f 4f       	sbci	r23, 0xFF	; 255

00004f76 <__divmodhi4_exit>:
    4f76:	08 95       	ret

00004f78 <__divmodhi4_neg1>:
    4f78:	f6 f7       	brtc	.-4      	; 0x4f76 <__divmodhi4_exit>
    4f7a:	90 95       	com	r25
    4f7c:	81 95       	neg	r24
    4f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f80:	08 95       	ret

00004f82 <__udivmodsi4>:
    4f82:	a1 e2       	ldi	r26, 0x21	; 33
    4f84:	1a 2e       	mov	r1, r26
    4f86:	aa 1b       	sub	r26, r26
    4f88:	bb 1b       	sub	r27, r27
    4f8a:	fd 01       	movw	r30, r26
    4f8c:	0d c0       	rjmp	.+26     	; 0x4fa8 <__udivmodsi4_ep>

00004f8e <__udivmodsi4_loop>:
    4f8e:	aa 1f       	adc	r26, r26
    4f90:	bb 1f       	adc	r27, r27
    4f92:	ee 1f       	adc	r30, r30
    4f94:	ff 1f       	adc	r31, r31
    4f96:	a2 17       	cp	r26, r18
    4f98:	b3 07       	cpc	r27, r19
    4f9a:	e4 07       	cpc	r30, r20
    4f9c:	f5 07       	cpc	r31, r21
    4f9e:	20 f0       	brcs	.+8      	; 0x4fa8 <__udivmodsi4_ep>
    4fa0:	a2 1b       	sub	r26, r18
    4fa2:	b3 0b       	sbc	r27, r19
    4fa4:	e4 0b       	sbc	r30, r20
    4fa6:	f5 0b       	sbc	r31, r21

00004fa8 <__udivmodsi4_ep>:
    4fa8:	66 1f       	adc	r22, r22
    4faa:	77 1f       	adc	r23, r23
    4fac:	88 1f       	adc	r24, r24
    4fae:	99 1f       	adc	r25, r25
    4fb0:	1a 94       	dec	r1
    4fb2:	69 f7       	brne	.-38     	; 0x4f8e <__udivmodsi4_loop>
    4fb4:	60 95       	com	r22
    4fb6:	70 95       	com	r23
    4fb8:	80 95       	com	r24
    4fba:	90 95       	com	r25
    4fbc:	9b 01       	movw	r18, r22
    4fbe:	ac 01       	movw	r20, r24
    4fc0:	bd 01       	movw	r22, r26
    4fc2:	cf 01       	movw	r24, r30
    4fc4:	08 95       	ret

00004fc6 <__divmodsi4>:
    4fc6:	97 fb       	bst	r25, 7
    4fc8:	09 2e       	mov	r0, r25
    4fca:	05 26       	eor	r0, r21
    4fcc:	0e d0       	rcall	.+28     	; 0x4fea <__divmodsi4_neg1>
    4fce:	57 fd       	sbrc	r21, 7
    4fd0:	04 d0       	rcall	.+8      	; 0x4fda <__divmodsi4_neg2>
    4fd2:	d7 df       	rcall	.-82     	; 0x4f82 <__udivmodsi4>
    4fd4:	0a d0       	rcall	.+20     	; 0x4fea <__divmodsi4_neg1>
    4fd6:	00 1c       	adc	r0, r0
    4fd8:	38 f4       	brcc	.+14     	; 0x4fe8 <__divmodsi4_exit>

00004fda <__divmodsi4_neg2>:
    4fda:	50 95       	com	r21
    4fdc:	40 95       	com	r20
    4fde:	30 95       	com	r19
    4fe0:	21 95       	neg	r18
    4fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe4:	4f 4f       	sbci	r20, 0xFF	; 255
    4fe6:	5f 4f       	sbci	r21, 0xFF	; 255

00004fe8 <__divmodsi4_exit>:
    4fe8:	08 95       	ret

00004fea <__divmodsi4_neg1>:
    4fea:	f6 f7       	brtc	.-4      	; 0x4fe8 <__divmodsi4_exit>
    4fec:	90 95       	com	r25
    4fee:	80 95       	com	r24
    4ff0:	70 95       	com	r23
    4ff2:	61 95       	neg	r22
    4ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    4ffa:	08 95       	ret

00004ffc <__udivmodhi4>:
    4ffc:	aa 1b       	sub	r26, r26
    4ffe:	bb 1b       	sub	r27, r27
    5000:	51 e1       	ldi	r21, 0x11	; 17
    5002:	07 c0       	rjmp	.+14     	; 0x5012 <__udivmodhi4_ep>

00005004 <__udivmodhi4_loop>:
    5004:	aa 1f       	adc	r26, r26
    5006:	bb 1f       	adc	r27, r27
    5008:	a6 17       	cp	r26, r22
    500a:	b7 07       	cpc	r27, r23
    500c:	10 f0       	brcs	.+4      	; 0x5012 <__udivmodhi4_ep>
    500e:	a6 1b       	sub	r26, r22
    5010:	b7 0b       	sbc	r27, r23

00005012 <__udivmodhi4_ep>:
    5012:	88 1f       	adc	r24, r24
    5014:	99 1f       	adc	r25, r25
    5016:	5a 95       	dec	r21
    5018:	a9 f7       	brne	.-22     	; 0x5004 <__udivmodhi4_loop>
    501a:	80 95       	com	r24
    501c:	90 95       	com	r25
    501e:	bc 01       	movw	r22, r24
    5020:	cd 01       	movw	r24, r26
    5022:	08 95       	ret

00005024 <strtod>:
    5024:	8f 92       	push	r8
    5026:	9f 92       	push	r9
    5028:	af 92       	push	r10
    502a:	bf 92       	push	r11
    502c:	cf 92       	push	r12
    502e:	df 92       	push	r13
    5030:	ef 92       	push	r14
    5032:	ff 92       	push	r15
    5034:	0f 93       	push	r16
    5036:	1f 93       	push	r17
    5038:	cf 93       	push	r28
    503a:	df 93       	push	r29
    503c:	ec 01       	movw	r28, r24
    503e:	5b 01       	movw	r10, r22
    5040:	61 15       	cp	r22, r1
    5042:	71 05       	cpc	r23, r1
    5044:	19 f0       	breq	.+6      	; 0x504c <strtod+0x28>
    5046:	fb 01       	movw	r30, r22
    5048:	91 83       	std	Z+1, r25	; 0x01
    504a:	80 83       	st	Z, r24
    504c:	f9 90       	ld	r15, Y+
    504e:	8f 2d       	mov	r24, r15
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	0e 94 80 29 	call	0x5300	; 0x5300 <isspace>
    5056:	89 2b       	or	r24, r25
    5058:	c9 f7       	brne	.-14     	; 0x504c <strtod+0x28>
    505a:	fd e2       	ldi	r31, 0x2D	; 45
    505c:	ff 16       	cp	r15, r31
    505e:	21 f4       	brne	.+8      	; 0x5068 <strtod+0x44>
    5060:	f9 90       	ld	r15, Y+
    5062:	ee 24       	eor	r14, r14
    5064:	e3 94       	inc	r14
    5066:	05 c0       	rjmp	.+10     	; 0x5072 <strtod+0x4e>
    5068:	2b e2       	ldi	r18, 0x2B	; 43
    506a:	f2 16       	cp	r15, r18
    506c:	09 f4       	brne	.+2      	; 0x5070 <strtod+0x4c>
    506e:	f9 90       	ld	r15, Y+
    5070:	ee 24       	eor	r14, r14
    5072:	8e 01       	movw	r16, r28
    5074:	01 50       	subi	r16, 0x01	; 1
    5076:	10 40       	sbci	r17, 0x00	; 0
    5078:	c8 01       	movw	r24, r16
    507a:	63 e1       	ldi	r22, 0x13	; 19
    507c:	76 e0       	ldi	r23, 0x06	; 6
    507e:	43 e0       	ldi	r20, 0x03	; 3
    5080:	50 e0       	ldi	r21, 0x00	; 0
    5082:	0e 94 88 29 	call	0x5310	; 0x5310 <strncasecmp_P>
    5086:	89 2b       	or	r24, r25
    5088:	01 f5       	brne	.+64     	; 0x50ca <strtod+0xa6>
    508a:	8e 01       	movw	r16, r28
    508c:	0e 5f       	subi	r16, 0xFE	; 254
    508e:	1f 4f       	sbci	r17, 0xFF	; 255
    5090:	c8 01       	movw	r24, r16
    5092:	66 e1       	ldi	r22, 0x16	; 22
    5094:	76 e0       	ldi	r23, 0x06	; 6
    5096:	45 e0       	ldi	r20, 0x05	; 5
    5098:	50 e0       	ldi	r21, 0x00	; 0
    509a:	0e 94 88 29 	call	0x5310	; 0x5310 <strncasecmp_P>
    509e:	89 2b       	or	r24, r25
    50a0:	19 f4       	brne	.+6      	; 0x50a8 <strtod+0x84>
    50a2:	8e 01       	movw	r16, r28
    50a4:	09 5f       	subi	r16, 0xF9	; 249
    50a6:	1f 4f       	sbci	r17, 0xFF	; 255
    50a8:	a1 14       	cp	r10, r1
    50aa:	b1 04       	cpc	r11, r1
    50ac:	19 f0       	breq	.+6      	; 0x50b4 <strtod+0x90>
    50ae:	f5 01       	movw	r30, r10
    50b0:	11 83       	std	Z+1, r17	; 0x01
    50b2:	00 83       	st	Z, r16
    50b4:	e0 fc       	sbrc	r14, 0
    50b6:	04 c0       	rjmp	.+8      	; 0x50c0 <strtod+0x9c>
    50b8:	70 e0       	ldi	r23, 0x00	; 0
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	80 e8       	ldi	r24, 0x80	; 128
    50be:	14 c0       	rjmp	.+40     	; 0x50e8 <strtod+0xc4>
    50c0:	70 e0       	ldi	r23, 0x00	; 0
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	80 e8       	ldi	r24, 0x80	; 128
    50c6:	6f ef       	ldi	r22, 0xFF	; 255
    50c8:	08 c1       	rjmp	.+528    	; 0x52da <strtod+0x2b6>
    50ca:	c8 01       	movw	r24, r16
    50cc:	6b e1       	ldi	r22, 0x1B	; 27
    50ce:	76 e0       	ldi	r23, 0x06	; 6
    50d0:	43 e0       	ldi	r20, 0x03	; 3
    50d2:	50 e0       	ldi	r21, 0x00	; 0
    50d4:	0e 94 88 29 	call	0x5310	; 0x5310 <strncasecmp_P>
    50d8:	89 2b       	or	r24, r25
    50da:	69 f4       	brne	.+26     	; 0x50f6 <strtod+0xd2>
    50dc:	a1 14       	cp	r10, r1
    50de:	b1 04       	cpc	r11, r1
    50e0:	29 f4       	brne	.+10     	; 0x50ec <strtod+0xc8>
    50e2:	70 e0       	ldi	r23, 0x00	; 0
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	80 ec       	ldi	r24, 0xC0	; 192
    50e8:	6f e7       	ldi	r22, 0x7F	; 127
    50ea:	f7 c0       	rjmp	.+494    	; 0x52da <strtod+0x2b6>
    50ec:	22 96       	adiw	r28, 0x02	; 2
    50ee:	f5 01       	movw	r30, r10
    50f0:	d1 83       	std	Z+1, r29	; 0x01
    50f2:	c0 83       	st	Z, r28
    50f4:	f6 cf       	rjmp	.-20     	; 0x50e2 <strtod+0xbe>
    50f6:	88 24       	eor	r8, r8
    50f8:	99 24       	eor	r9, r9
    50fa:	40 e0       	ldi	r20, 0x00	; 0
    50fc:	50 e0       	ldi	r21, 0x00	; 0
    50fe:	60 e0       	ldi	r22, 0x00	; 0
    5100:	70 e0       	ldi	r23, 0x00	; 0
    5102:	ef 2d       	mov	r30, r15
    5104:	e0 53       	subi	r30, 0x30	; 48
    5106:	ea 30       	cpi	r30, 0x0A	; 10
    5108:	a0 f5       	brcc	.+104    	; 0x5172 <strtod+0x14e>
    510a:	f2 e0       	ldi	r31, 0x02	; 2
    510c:	ef 2a       	or	r14, r31
    510e:	8e 2d       	mov	r24, r14
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	9c 01       	movw	r18, r24
    5114:	28 70       	andi	r18, 0x08	; 8
    5116:	30 70       	andi	r19, 0x00	; 0
    5118:	e2 fe       	sbrs	r14, 2
    511a:	06 c0       	rjmp	.+12     	; 0x5128 <strtod+0x104>
    511c:	23 2b       	or	r18, r19
    511e:	79 f5       	brne	.+94     	; 0x517e <strtod+0x15a>
    5120:	08 94       	sec
    5122:	81 1c       	adc	r8, r1
    5124:	91 1c       	adc	r9, r1
    5126:	2b c0       	rjmp	.+86     	; 0x517e <strtod+0x15a>
    5128:	23 2b       	or	r18, r19
    512a:	19 f0       	breq	.+6      	; 0x5132 <strtod+0x10e>
    512c:	08 94       	sec
    512e:	81 08       	sbc	r8, r1
    5130:	91 08       	sbc	r9, r1
    5132:	db 01       	movw	r26, r22
    5134:	ca 01       	movw	r24, r20
    5136:	12 e0       	ldi	r17, 0x02	; 2
    5138:	88 0f       	add	r24, r24
    513a:	99 1f       	adc	r25, r25
    513c:	aa 1f       	adc	r26, r26
    513e:	bb 1f       	adc	r27, r27
    5140:	1a 95       	dec	r17
    5142:	d1 f7       	brne	.-12     	; 0x5138 <strtod+0x114>
    5144:	48 0f       	add	r20, r24
    5146:	59 1f       	adc	r21, r25
    5148:	6a 1f       	adc	r22, r26
    514a:	7b 1f       	adc	r23, r27
    514c:	44 0f       	add	r20, r20
    514e:	55 1f       	adc	r21, r21
    5150:	66 1f       	adc	r22, r22
    5152:	77 1f       	adc	r23, r23
    5154:	4e 0f       	add	r20, r30
    5156:	51 1d       	adc	r21, r1
    5158:	61 1d       	adc	r22, r1
    515a:	71 1d       	adc	r23, r1
    515c:	48 39       	cpi	r20, 0x98	; 152
    515e:	29 e9       	ldi	r18, 0x99	; 153
    5160:	52 07       	cpc	r21, r18
    5162:	29 e9       	ldi	r18, 0x99	; 153
    5164:	62 07       	cpc	r22, r18
    5166:	29 e1       	ldi	r18, 0x19	; 25
    5168:	72 07       	cpc	r23, r18
    516a:	48 f0       	brcs	.+18     	; 0x517e <strtod+0x15a>
    516c:	84 e0       	ldi	r24, 0x04	; 4
    516e:	e8 2a       	or	r14, r24
    5170:	06 c0       	rjmp	.+12     	; 0x517e <strtod+0x15a>
    5172:	ee 3f       	cpi	r30, 0xFE	; 254
    5174:	31 f4       	brne	.+12     	; 0x5182 <strtod+0x15e>
    5176:	e3 fc       	sbrc	r14, 3
    5178:	39 c0       	rjmp	.+114    	; 0x51ec <strtod+0x1c8>
    517a:	98 e0       	ldi	r25, 0x08	; 8
    517c:	e9 2a       	or	r14, r25
    517e:	f9 90       	ld	r15, Y+
    5180:	c0 cf       	rjmp	.-128    	; 0x5102 <strtod+0xde>
    5182:	e5 33       	cpi	r30, 0x35	; 53
    5184:	11 f0       	breq	.+4      	; 0x518a <strtod+0x166>
    5186:	e5 31       	cpi	r30, 0x15	; 21
    5188:	89 f5       	brne	.+98     	; 0x51ec <strtod+0x1c8>
    518a:	29 91       	ld	r18, Y+
    518c:	2d 32       	cpi	r18, 0x2D	; 45
    518e:	19 f4       	brne	.+6      	; 0x5196 <strtod+0x172>
    5190:	e0 e1       	ldi	r30, 0x10	; 16
    5192:	ee 2a       	or	r14, r30
    5194:	05 c0       	rjmp	.+10     	; 0x51a0 <strtod+0x17c>
    5196:	2b 32       	cpi	r18, 0x2B	; 43
    5198:	19 f0       	breq	.+6      	; 0x51a0 <strtod+0x17c>
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	03 c0       	rjmp	.+6      	; 0x51a6 <strtod+0x182>
    51a0:	29 91       	ld	r18, Y+
    51a2:	82 e0       	ldi	r24, 0x02	; 2
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	e2 2f       	mov	r30, r18
    51a8:	e0 53       	subi	r30, 0x30	; 48
    51aa:	ea 30       	cpi	r30, 0x0A	; 10
    51ac:	18 f0       	brcs	.+6      	; 0x51b4 <strtod+0x190>
    51ae:	c8 1b       	sub	r28, r24
    51b0:	d9 0b       	sbc	r29, r25
    51b2:	1c c0       	rjmp	.+56     	; 0x51ec <strtod+0x1c8>
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	fc e0       	ldi	r31, 0x0C	; 12
    51ba:	20 38       	cpi	r18, 0x80	; 128
    51bc:	3f 07       	cpc	r19, r31
    51be:	5c f4       	brge	.+22     	; 0x51d6 <strtod+0x1b2>
    51c0:	c9 01       	movw	r24, r18
    51c2:	88 0f       	add	r24, r24
    51c4:	99 1f       	adc	r25, r25
    51c6:	88 0f       	add	r24, r24
    51c8:	99 1f       	adc	r25, r25
    51ca:	28 0f       	add	r18, r24
    51cc:	39 1f       	adc	r19, r25
    51ce:	22 0f       	add	r18, r18
    51d0:	33 1f       	adc	r19, r19
    51d2:	2e 0f       	add	r18, r30
    51d4:	31 1d       	adc	r19, r1
    51d6:	e9 91       	ld	r30, Y+
    51d8:	e0 53       	subi	r30, 0x30	; 48
    51da:	ea 30       	cpi	r30, 0x0A	; 10
    51dc:	68 f3       	brcs	.-38     	; 0x51b8 <strtod+0x194>
    51de:	e4 fe       	sbrs	r14, 4
    51e0:	03 c0       	rjmp	.+6      	; 0x51e8 <strtod+0x1c4>
    51e2:	30 95       	com	r19
    51e4:	21 95       	neg	r18
    51e6:	3f 4f       	sbci	r19, 0xFF	; 255
    51e8:	82 0e       	add	r8, r18
    51ea:	93 1e       	adc	r9, r19
    51ec:	ce 2c       	mov	r12, r14
    51ee:	dd 24       	eor	r13, r13
    51f0:	e1 fe       	sbrs	r14, 1
    51f2:	07 c0       	rjmp	.+14     	; 0x5202 <strtod+0x1de>
    51f4:	a1 14       	cp	r10, r1
    51f6:	b1 04       	cpc	r11, r1
    51f8:	21 f0       	breq	.+8      	; 0x5202 <strtod+0x1de>
    51fa:	21 97       	sbiw	r28, 0x01	; 1
    51fc:	f5 01       	movw	r30, r10
    51fe:	d1 83       	std	Z+1, r29	; 0x01
    5200:	c0 83       	st	Z, r28
    5202:	cb 01       	movw	r24, r22
    5204:	ba 01       	movw	r22, r20
    5206:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__floatunsisf>
    520a:	7b 01       	movw	r14, r22
    520c:	8c 01       	movw	r16, r24
    520e:	f3 e0       	ldi	r31, 0x03	; 3
    5210:	cf 22       	and	r12, r31
    5212:	dd 24       	eor	r13, r13
    5214:	23 e0       	ldi	r18, 0x03	; 3
    5216:	c2 16       	cp	r12, r18
    5218:	d1 04       	cpc	r13, r1
    521a:	21 f4       	brne	.+8      	; 0x5224 <strtod+0x200>
    521c:	17 fb       	bst	r17, 7
    521e:	10 95       	com	r17
    5220:	17 f9       	bld	r17, 7
    5222:	10 95       	com	r17
    5224:	57 01       	movw	r10, r14
    5226:	68 01       	movw	r12, r16
    5228:	c8 01       	movw	r24, r16
    522a:	b7 01       	movw	r22, r14
    522c:	20 e0       	ldi	r18, 0x00	; 0
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	40 e0       	ldi	r20, 0x00	; 0
    5232:	50 e0       	ldi	r21, 0x00	; 0
    5234:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    5238:	88 23       	and	r24, r24
    523a:	09 f4       	brne	.+2      	; 0x523e <strtod+0x21a>
    523c:	4a c0       	rjmp	.+148    	; 0x52d2 <strtod+0x2ae>
    523e:	97 fe       	sbrs	r9, 7
    5240:	0d c0       	rjmp	.+26     	; 0x525c <strtod+0x238>
    5242:	22 e3       	ldi	r18, 0x32	; 50
    5244:	e2 2e       	mov	r14, r18
    5246:	26 e0       	ldi	r18, 0x06	; 6
    5248:	f2 2e       	mov	r15, r18
    524a:	90 94       	com	r9
    524c:	81 94       	neg	r8
    524e:	91 08       	sbc	r9, r1
    5250:	93 94       	inc	r9
    5252:	c0 e2       	ldi	r28, 0x20	; 32
    5254:	d0 e0       	ldi	r29, 0x00	; 0
    5256:	00 e0       	ldi	r16, 0x00	; 0
    5258:	10 e0       	ldi	r17, 0x00	; 0
    525a:	12 c0       	rjmp	.+36     	; 0x5280 <strtod+0x25c>
    525c:	9a e4       	ldi	r25, 0x4A	; 74
    525e:	e9 2e       	mov	r14, r25
    5260:	96 e0       	ldi	r25, 0x06	; 6
    5262:	f9 2e       	mov	r15, r25
    5264:	f6 cf       	rjmp	.-20     	; 0x5252 <strtod+0x22e>
    5266:	f7 01       	movw	r30, r14
    5268:	25 91       	lpm	r18, Z+
    526a:	35 91       	lpm	r19, Z+
    526c:	45 91       	lpm	r20, Z+
    526e:	54 91       	lpm	r21, Z+
    5270:	c6 01       	movw	r24, r12
    5272:	b5 01       	movw	r22, r10
    5274:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__mulsf3>
    5278:	5b 01       	movw	r10, r22
    527a:	6c 01       	movw	r12, r24
    527c:	8c 1a       	sub	r8, r28
    527e:	9d 0a       	sbc	r9, r29
    5280:	8c 16       	cp	r8, r28
    5282:	9d 06       	cpc	r9, r29
    5284:	84 f7       	brge	.-32     	; 0x5266 <strtod+0x242>
    5286:	d5 95       	asr	r29
    5288:	c7 95       	ror	r28
    528a:	0f 5f       	subi	r16, 0xFF	; 255
    528c:	1f 4f       	sbci	r17, 0xFF	; 255
    528e:	06 30       	cpi	r16, 0x06	; 6
    5290:	11 05       	cpc	r17, r1
    5292:	29 f0       	breq	.+10     	; 0x529e <strtod+0x27a>
    5294:	8c ef       	ldi	r24, 0xFC	; 252
    5296:	9f ef       	ldi	r25, 0xFF	; 255
    5298:	e8 0e       	add	r14, r24
    529a:	f9 1e       	adc	r15, r25
    529c:	f1 cf       	rjmp	.-30     	; 0x5280 <strtod+0x25c>
    529e:	c5 01       	movw	r24, r10
    52a0:	d6 01       	movw	r26, r12
    52a2:	7c 01       	movw	r14, r24
    52a4:	8d 01       	movw	r16, r26
    52a6:	8c 2d       	mov	r24, r12
    52a8:	88 0f       	add	r24, r24
    52aa:	8d 2d       	mov	r24, r13
    52ac:	88 1f       	adc	r24, r24
    52ae:	8f 3f       	cpi	r24, 0xFF	; 255
    52b0:	51 f0       	breq	.+20     	; 0x52c6 <strtod+0x2a2>
    52b2:	c6 01       	movw	r24, r12
    52b4:	b5 01       	movw	r22, r10
    52b6:	20 e0       	ldi	r18, 0x00	; 0
    52b8:	30 e0       	ldi	r19, 0x00	; 0
    52ba:	40 e0       	ldi	r20, 0x00	; 0
    52bc:	50 e0       	ldi	r21, 0x00	; 0
    52be:	0e 94 84 24 	call	0x4908	; 0x4908 <__cmpsf2>
    52c2:	88 23       	and	r24, r24
    52c4:	31 f4       	brne	.+12     	; 0x52d2 <strtod+0x2ae>
    52c6:	82 e2       	ldi	r24, 0x22	; 34
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	90 93 2f 05 	sts	0x052F, r25
    52ce:	80 93 2e 05 	sts	0x052E, r24
    52d2:	7e 2d       	mov	r23, r14
    52d4:	9f 2d       	mov	r25, r15
    52d6:	80 2f       	mov	r24, r16
    52d8:	61 2f       	mov	r22, r17
    52da:	27 2f       	mov	r18, r23
    52dc:	39 2f       	mov	r19, r25
    52de:	48 2f       	mov	r20, r24
    52e0:	56 2f       	mov	r21, r22
    52e2:	b9 01       	movw	r22, r18
    52e4:	ca 01       	movw	r24, r20
    52e6:	df 91       	pop	r29
    52e8:	cf 91       	pop	r28
    52ea:	1f 91       	pop	r17
    52ec:	0f 91       	pop	r16
    52ee:	ff 90       	pop	r15
    52f0:	ef 90       	pop	r14
    52f2:	df 90       	pop	r13
    52f4:	cf 90       	pop	r12
    52f6:	bf 90       	pop	r11
    52f8:	af 90       	pop	r10
    52fa:	9f 90       	pop	r9
    52fc:	8f 90       	pop	r8
    52fe:	08 95       	ret

00005300 <isspace>:
    5300:	91 11       	cpse	r25, r1
    5302:	1e c0       	rjmp	.+60     	; 0x5340 <__ctype_isfalse>
    5304:	80 32       	cpi	r24, 0x20	; 32
    5306:	19 f0       	breq	.+6      	; 0x530e <isspace+0xe>
    5308:	89 50       	subi	r24, 0x09	; 9
    530a:	85 50       	subi	r24, 0x05	; 5
    530c:	d0 f7       	brcc	.-12     	; 0x5302 <isspace+0x2>
    530e:	08 95       	ret

00005310 <strncasecmp_P>:
    5310:	fb 01       	movw	r30, r22
    5312:	dc 01       	movw	r26, r24
    5314:	41 50       	subi	r20, 0x01	; 1
    5316:	50 40       	sbci	r21, 0x00	; 0
    5318:	88 f0       	brcs	.+34     	; 0x533c <strncasecmp_P+0x2c>
    531a:	8d 91       	ld	r24, X+
    531c:	81 34       	cpi	r24, 0x41	; 65
    531e:	1c f0       	brlt	.+6      	; 0x5326 <strncasecmp_P+0x16>
    5320:	8b 35       	cpi	r24, 0x5B	; 91
    5322:	0c f4       	brge	.+2      	; 0x5326 <strncasecmp_P+0x16>
    5324:	80 5e       	subi	r24, 0xE0	; 224
    5326:	65 91       	lpm	r22, Z+
    5328:	61 34       	cpi	r22, 0x41	; 65
    532a:	1c f0       	brlt	.+6      	; 0x5332 <strncasecmp_P+0x22>
    532c:	6b 35       	cpi	r22, 0x5B	; 91
    532e:	0c f4       	brge	.+2      	; 0x5332 <strncasecmp_P+0x22>
    5330:	60 5e       	subi	r22, 0xE0	; 224
    5332:	86 1b       	sub	r24, r22
    5334:	61 11       	cpse	r22, r1
    5336:	71 f3       	breq	.-36     	; 0x5314 <strncasecmp_P+0x4>
    5338:	99 0b       	sbc	r25, r25
    533a:	08 95       	ret
    533c:	88 1b       	sub	r24, r24
    533e:	fc cf       	rjmp	.-8      	; 0x5338 <strncasecmp_P+0x28>

00005340 <__ctype_isfalse>:
    5340:	99 27       	eor	r25, r25
    5342:	88 27       	eor	r24, r24

00005344 <__ctype_istrue>:
    5344:	08 95       	ret

00005346 <_exit>:
    5346:	f8 94       	cli

00005348 <__stop_program>:
    5348:	ff cf       	rjmp	.-2      	; 0x5348 <__stop_program>
