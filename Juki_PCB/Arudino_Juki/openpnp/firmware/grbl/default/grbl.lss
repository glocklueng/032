
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000437c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000330  00800200  00800200  000043f0  2**0
                  ALLOC
  2 .debug_aranges 00000478  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000830  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000032f7  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001298  00000000  00000000  0000838f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00002cc4  00000000  00000000  00009627  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000006f0  00000000  00000000  0000c2ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000da3  00000000  00000000  0000c9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001688  00000000  00000000  0000d77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000728  00000000  00000000  0000ee07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__ctors_end>
       4:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
       8:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
       c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      10:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      14:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      18:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      1c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      20:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      24:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      28:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      2c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      30:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      34:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      38:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      3c:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__vector_15>
      40:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      44:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__vector_17>
      48:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      4c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      50:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      54:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      58:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      5c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      60:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      64:	0c 94 3e 19 	jmp	0x327c	; 0x327c <__vector_25>
      68:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      6c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      70:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      74:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      78:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      7c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      80:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      84:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      88:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      8c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      90:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      94:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      98:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      9c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      a0:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      a4:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      a8:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      ac:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      b0:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      b4:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      b8:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      bc:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      c0:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      c4:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      c8:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      cc:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      d0:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      d4:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      d8:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      dc:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      e0:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__bad_interrupt>
      e4:	f4 05       	cpc	r31, r4
      e6:	f4 05       	cpc	r31, r4
      e8:	f7 05       	cpc	r31, r7
      ea:	fa 05       	cpc	r31, r10
      ec:	01 06       	cpc	r0, r17
      ee:	06 06       	cpc	r0, r22
      f0:	41 06       	cpc	r4, r17
      f2:	41 06       	cpc	r4, r17
      f4:	0b 06       	cpc	r0, r27
      f6:	12 06       	cpc	r1, r18
      f8:	17 06       	cpc	r1, r23
      fa:	1a 06       	cpc	r1, r26
      fc:	1f 06       	cpc	r1, r31
      fe:	22 06       	cpc	r2, r18
     100:	25 06       	cpc	r2, r21
     102:	28 06       	cpc	r2, r24
     104:	2b 06       	cpc	r2, r27
     106:	2e 06       	cpc	r2, r30
     108:	31 06       	cpc	r3, r17
     10a:	36 06       	cpc	r3, r22
     10c:	39 06       	cpc	r3, r25
     10e:	3e 06       	cpc	r3, r30
     110:	41 06       	cpc	r4, r17
     112:	41 06       	cpc	r4, r17
     114:	41 06       	cpc	r4, r17
     116:	41 06       	cpc	r4, r17
     118:	41 06       	cpc	r4, r17
     11a:	41 06       	cpc	r4, r17
     11c:	41 06       	cpc	r4, r17
     11e:	41 06       	cpc	r4, r17
     120:	f7 05       	cpc	r31, r7
     122:	41 06       	cpc	r4, r17
     124:	41 06       	cpc	r4, r17
     126:	41 06       	cpc	r4, r17
     128:	41 06       	cpc	r4, r17
     12a:	41 06       	cpc	r4, r17
     12c:	41 06       	cpc	r4, r17
     12e:	41 06       	cpc	r4, r17
     130:	41 06       	cpc	r4, r17
     132:	41 06       	cpc	r4, r17
     134:	41 06       	cpc	r4, r17
     136:	41 06       	cpc	r4, r17
     138:	41 06       	cpc	r4, r17
     13a:	41 06       	cpc	r4, r17
     13c:	41 06       	cpc	r4, r17
     13e:	41 06       	cpc	r4, r17
     140:	41 06       	cpc	r4, r17
     142:	41 06       	cpc	r4, r17
     144:	41 06       	cpc	r4, r17
     146:	41 06       	cpc	r4, r17
     148:	41 06       	cpc	r4, r17
     14a:	41 06       	cpc	r4, r17
     14c:	41 06       	cpc	r4, r17
     14e:	41 06       	cpc	r4, r17
     150:	41 06       	cpc	r4, r17
     152:	41 06       	cpc	r4, r17
     154:	41 06       	cpc	r4, r17
     156:	41 06       	cpc	r4, r17
     158:	41 06       	cpc	r4, r17
     15a:	41 06       	cpc	r4, r17
     15c:	f7 05       	cpc	r31, r7
     15e:	08 4a       	sbci	r16, 0xA8	; 168
     160:	d7 3b       	cpi	r29, 0xB7	; 183
     162:	3b ce       	rjmp	.-906    	; 0xfffffdda <__eeprom_end+0xff7efdda>
     164:	01 6e       	ori	r16, 0xE1	; 225
     166:	84 bc       	out	0x24, r8	; 36
     168:	bf fd       	.word	0xfdbf	; ????
     16a:	c1 2f       	mov	r28, r17
     16c:	3d 6c       	ori	r19, 0xCD	; 205
     16e:	74 31       	cpi	r23, 0x14	; 20
     170:	9a bd       	out	0x2a, r25	; 42
     172:	56 83       	std	Z+6, r21	; 0x06
     174:	3d da       	rcall	.-2950   	; 0xfffff5f0 <__eeprom_end+0xff7ef5f0>
     176:	3d 00       	.word	0x003d	; ????
     178:	c7 7f       	andi	r28, 0xF7	; 247
     17a:	11 be       	out	0x31, r1	; 49
     17c:	d9 e4       	ldi	r29, 0x49	; 73
     17e:	bb 4c       	sbci	r27, 0xCB	; 203
     180:	3e 91       	ld	r19, -X
     182:	6b aa       	std	Y+51, r6	; 0x33
     184:	aa be       	out	0x3a, r10	; 58
     186:	00 00       	nop
     188:	00 80       	ld	r0, Z
     18a:	3f 59       	subi	r19, 0x9F	; 159

0000018b <__c.1857>:
     18b:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000194 <__c.1855>:
     194:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000019d <__c.1853>:
     19d:	59 4c 32 0d 0a 00                                   YL2...

000001a3 <__c.1851>:
     1a3:	59 4c 31 0d 0a 00                                   YL1...

000001a9 <__c.1849>:
     1a9:	58 4c 32 0d 0a 00                                   XL2...

000001af <__c.1847>:
     1af:	58 4c 31 0d 0a 00                                   XL1...

000001b5 <__c.1845>:
     1b5:	0d 0a 00                                            ...

000001b8 <__c.1843>:
     1b8:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

000001c3 <__c.1841>:
     1c3:	0d 0a 00                                            ...

000001c6 <__c.1839>:
     1c6:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000001d3 <__c.1609>:
     1d3:	6f 6b 0a 0d 00                                      ok...

000001d8 <__c.1669>:
     1d8:	0a 0d 00                                            ...

000001db <__c.1667>:
     1db:	65 72 72 6f 72 3a 20 00                             error: .

000001e3 <__c.1664>:
     1e3:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     1f3:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

00000201 <__c.1661>:
     201:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     211:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

00000220 <__c.1658>:
     220:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     230:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

00000241 <__c.1655>:
     241:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     251:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

0000025c <__c.1651>:
     25c:	6f 6b 0a 0d 00                                      ok...

00000261 <__c.1648>:
     261:	4e 6f 74 20 68 6f 6d 65 64 0a 0d 00                 Not homed...

0000026d <__c.1677>:
     26d:	0d 0a 00                                            ...

00000270 <__c.1675>:
     270:	0d 0a 4f 70 65 6e 50 6e 50 2f 47 72 62 6c 20 30     ..OpenPnP/Grbl 0
     280:	2e 37 36 00                                         .76.

00000284 <__c.1736>:
     284:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
     294:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
     2a4:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
     2b4:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

000002bf <__c.1734>:
     2bf:	27 24 27 20 74 6f 20 64 75 6d 70 20 63 75 72 72     '$' to dump curr
     2cf:	65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a 00        ent settings...

000002de <__c.1726>:
     2de:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     2ee:	6e 67 0d 0a 00                                      ng...

000002f3 <__c.1724>:
     2f3:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     303:	72 0d 0a 00                                         r...

00000307 <__c.1681>:
     307:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     317:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     327:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     337:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     347:	0d 0a 00                                            ...

0000034a <__c.1679>:
     34a:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     35a:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     36a:	61 62 6c 65 64 29 0d 0a 00                          abled)...

00000373 <__c.1677>:
     373:	24 31 30 30 30 20 3d 20 00                          $1000 = .

0000037c <__c.1675>:
     37c:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     38c:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     39c:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     3ac:	2f 6d 69 6e 29 0d 0a 00                             /min)...

000003b4 <__c.1673>:
     3b4:	24 39 20 3d 20 00                                   $9 = .

000003ba <__c.1671>:
     3ba:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     3ca:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000003d8 <__c.1669>:
     3d8:	24 38 20 3d 20 00                                   $8 = .

000003de <__c.1667>:
     3de:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     3ee:	29 0d 0a 00                                         )...

000003f2 <__c.1665>:
     3f2:	24 37 20 3d 20 00                                   $7 = .

000003f8 <__c.1663>:
     3f8:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     408:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000416 <__c.1661>:
     416:	24 36 20 3d 20 00                                   $6 = .

0000041c <__c.1659>:
     41c:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     42c:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

0000043a <__c.1657>:
     43a:	24 35 20 3d 20 00                                   $5 = .

00000440 <__c.1655>:
     440:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     450:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

0000045d <__c.1653>:
     45d:	24 34 20 3d 20 00                                   $4 = .

00000463 <__c.1651>:
     463:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     473:	0a 00                                               ..

00000475 <__c.1649>:
     475:	24 33 20 3d 20 00                                   $3 = .

0000047b <__c.1647>:
     47b:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

0000048b <__c.1645>:
     48b:	24 32 20 3d 20 00                                   $2 = .

00000491 <__c.1643>:
     491:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

000004a1 <__c.1641>:
     4a1:	24 31 20 3d 20 00                                   $1 = .

000004a7 <__c.1639>:
     4a7:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000004b7 <__c.1637>:
     4b7:	24 30 20 3d 20 00                                   $0 = .

000004bd <__c.1635>:
     4bd:	0d 0a 00                                            ...

000004c0 <__c.1633>:
     4c0:	30 2e 37 36 00                                      0.76.

000004c5 <__c.1631>:
     4c5:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000004d1 <__c.2152>:
     4d1:	70 69 63 6b 6f 62 65 61 72 20 69 73 20 6e 6f 74     pickobear is not
     4e1:	20 68 6f 6d 65 64 0d 0a 00                           homed...

000004ea <__c.2150>:
     4ea:	70 69 63 6b 6f 62 65 61 72 20 69 73 20 68 6f 6d     pickobear is hom
     4fa:	65 64 0d 0a 00                                      ed...

000004ff <__c.2144>:
     4ff:	68 6f 6d 69 6e 67 0d 0a 00                          homing...

00000508 <__c.2028>:
     508:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

00000512 <__c.2046>:
     512:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

0000051c <__c.1819>:
     51c:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     52c:	0d 00                                               ..

0000052e <__c.1817>:
     52e:	64 62 67 3a 20 68 65 61 64 5f 64 6f 77 6e 0a 0d     dbg: head_down..
	...

0000053f <__c.1810>:
     53f:	76 61 63 75 75 6d 20 63 68 61 6e 67 65 0a 0d 00     vacuum change...

0000054f <pstr_inf>:
     54f:	49 4e 46                                            INF

00000552 <pstr_inity>:
     552:	49 4e 49 54 59                                      INITY

00000557 <pstr_nan>:
     557:	4e 41 4e                                            NAN

0000055a <pwr_m10>:
     55a:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     56a:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000572 <pwr_p10>:
     572:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     582:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000058a <__ctors_end>:
     58a:	11 24       	eor	r1, r1
     58c:	1f be       	out	0x3f, r1	; 63
     58e:	cf ef       	ldi	r28, 0xFF	; 255
     590:	d1 e2       	ldi	r29, 0x21	; 33
     592:	de bf       	out	0x3e, r29	; 62
     594:	cd bf       	out	0x3d, r28	; 61
     596:	00 e0       	ldi	r16, 0x00	; 0
     598:	0c bf       	out	0x3c, r16	; 60

0000059a <__do_copy_data>:
     59a:	12 e0       	ldi	r17, 0x02	; 2
     59c:	a0 e0       	ldi	r26, 0x00	; 0
     59e:	b2 e0       	ldi	r27, 0x02	; 2
     5a0:	ec e7       	ldi	r30, 0x7C	; 124
     5a2:	f3 e4       	ldi	r31, 0x43	; 67
     5a4:	00 e0       	ldi	r16, 0x00	; 0
     5a6:	0b bf       	out	0x3b, r16	; 59
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <__do_copy_data+0x14>
     5aa:	07 90       	elpm	r0, Z+
     5ac:	0d 92       	st	X+, r0
     5ae:	a0 30       	cpi	r26, 0x00	; 0
     5b0:	b1 07       	cpc	r27, r17
     5b2:	d9 f7       	brne	.-10     	; 0x5aa <__do_copy_data+0x10>

000005b4 <__do_clear_bss>:
     5b4:	15 e0       	ldi	r17, 0x05	; 5
     5b6:	a0 e0       	ldi	r26, 0x00	; 0
     5b8:	b2 e0       	ldi	r27, 0x02	; 2
     5ba:	01 c0       	rjmp	.+2      	; 0x5be <.do_clear_bss_start>

000005bc <.do_clear_bss_loop>:
     5bc:	1d 92       	st	X+, r1

000005be <.do_clear_bss_start>:
     5be:	a0 33       	cpi	r26, 0x30	; 48
     5c0:	b1 07       	cpc	r27, r17
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <.do_clear_bss_loop>
     5c4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <main>
     5c8:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <_exit>

000005cc <__bad_interrupt>:
     5cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005d0 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     5d0:	24 9a       	sbi	0x04, 4	; 4
}
     5d2:	08 95       	ret

000005d4 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     5d4:	89 2b       	or	r24, r25
     5d6:	11 f0       	breq	.+4      	; 0x5dc <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     5d8:	2c 9a       	sbi	0x05, 4	; 5
     5da:	08 95       	ret
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     5dc:	2c 98       	cbi	0x05, 4	; 5
     5de:	08 95       	ret

000005e0 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5e0:	f9 99       	sbic	0x1f, 1	; 31
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     5e4:	92 bd       	out	0x22, r25	; 34
     5e6:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     5ec:	80 b5       	in	r24, 0x20	; 32
}
     5ee:	08 95       	ret

000005f0 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     5f0:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5f2:	f9 99       	sbic	0x1f, 1	; 31
     5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     5f6:	92 bd       	out	0x22, r25	; 34
     5f8:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     5fe:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     600:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     602:	89 2f       	mov	r24, r25
     604:	86 23       	and	r24, r22
     606:	39 f0       	breq	.+14     	; 0x616 <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     608:	6f 3f       	cpi	r22, 0xFF	; 255
     60a:	19 f0       	breq	.+6      	; 0x612 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     60c:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	06 c0       	rjmp	.+12     	; 0x61e <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     612:	84 e1       	ldi	r24, 0x14	; 20
     614:	04 c0       	rjmp	.+8      	; 0x61e <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     616:	99 23       	and	r25, r25
     618:	21 f0       	breq	.+8      	; 0x622 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     61a:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     61c:	84 e2       	ldi	r24, 0x24	; 36
     61e:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     620:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     622:	78 94       	sei
}
     624:	08 95       	ret

00000626 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     626:	8f 92       	push	r8
     628:	9f 92       	push	r9
     62a:	af 92       	push	r10
     62c:	bf 92       	push	r11
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	df 93       	push	r29
     63a:	cf 93       	push	r28
     63c:	0f 92       	push	r0
     63e:	0f 92       	push	r0
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	5c 01       	movw	r10, r24
     646:	6b 01       	movw	r12, r22
     648:	7a 01       	movw	r14, r20
     64a:	4a 01       	movw	r8, r20
     64c:	00 e0       	ldi	r16, 0x00	; 0
     64e:	1e c0       	rjmp	.+60     	; 0x68c <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     650:	00 23       	and	r16, r16
     652:	19 f0       	breq	.+6      	; 0x65a <memcpy_to_eeprom_with_checksum+0x34>
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	08 c0       	rjmp	.+16     	; 0x66a <memcpy_to_eeprom_with_checksum+0x44>
     65a:	20 2f       	mov	r18, r16
     65c:	33 27       	eor	r19, r19
     65e:	27 fd       	sbrc	r18, 7
     660:	30 95       	com	r19
     662:	22 27       	eor	r18, r18
     664:	33 0f       	add	r19, r19
     666:	22 1f       	adc	r18, r18
     668:	33 27       	eor	r19, r19
    checksum += *source;
     66a:	f6 01       	movw	r30, r12
     66c:	61 91       	ld	r22, Z+
     66e:	6f 01       	movw	r12, r30
     670:	06 2f       	mov	r16, r22
     672:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     674:	9c 01       	movw	r18, r24
     676:	2f 5f       	subi	r18, 0xFF	; 255
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	3a 83       	std	Y+2, r19	; 0x02
     67c:	29 83       	std	Y+1, r18	; 0x01
     67e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     682:	08 94       	sec
     684:	81 08       	sbc	r8, r1
     686:	91 08       	sbc	r9, r1
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	9a 81       	ldd	r25, Y+2	; 0x02
     68c:	81 14       	cp	r8, r1
     68e:	91 04       	cpc	r9, r1
     690:	f9 f6       	brne	.-66     	; 0x650 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     692:	c7 01       	movw	r24, r14
     694:	8a 0d       	add	r24, r10
     696:	9b 1d       	adc	r25, r11
     698:	60 2f       	mov	r22, r16
     69a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <eeprom_put_char>
}
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	bf 90       	pop	r11
     6b2:	af 90       	pop	r10
     6b4:	9f 90       	pop	r9
     6b6:	8f 90       	pop	r8
     6b8:	08 95       	ret

000006ba <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	ec 01       	movw	r28, r24
     6c0:	fb 01       	movw	r30, r22
     6c2:	9a 01       	movw	r18, r20
     6c4:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     6c6:	b1 e0       	ldi	r27, 0x01	; 1
     6c8:	19 c0       	rjmp	.+50     	; 0x6fc <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6ca:	f9 99       	sbic	0x1f, 1	; 31
     6cc:	fe cf       	rjmp	.-4      	; 0x6ca <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     6ce:	f2 bd       	out	0x22, r31	; 34
     6d0:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6d2:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     6d4:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     6d6:	99 23       	and	r25, r25
     6d8:	19 f0       	breq	.+6      	; 0x6e0 <memcpy_from_eeprom_with_checksum+0x26>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 c0       	rjmp	.+16     	; 0x6f0 <memcpy_from_eeprom_with_checksum+0x36>
     6e0:	89 2f       	mov	r24, r25
     6e2:	99 27       	eor	r25, r25
     6e4:	87 fd       	sbrc	r24, 7
     6e6:	90 95       	com	r25
     6e8:	88 27       	eor	r24, r24
     6ea:	99 0f       	add	r25, r25
     6ec:	88 1f       	adc	r24, r24
     6ee:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     6f0:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     6f2:	9a 2f       	mov	r25, r26
     6f4:	98 0f       	add	r25, r24
    *(destination++) = data; 
     6f6:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     6f8:	21 50       	subi	r18, 0x01	; 1
     6fa:	30 40       	sbci	r19, 0x00	; 0
     6fc:	21 15       	cp	r18, r1
     6fe:	31 05       	cpc	r19, r1
     700:	21 f7       	brne	.-56     	; 0x6ca <memcpy_from_eeprom_with_checksum+0x10>
     702:	46 0f       	add	r20, r22
     704:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     706:	f9 99       	sbic	0x1f, 1	; 31
     708:	fe cf       	rjmp	.-4      	; 0x706 <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     70a:	52 bd       	out	0x22, r21	; 34
     70c:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     712:	80 b5       	in	r24, 0x20	; 32
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	98 17       	cp	r25, r24
     71a:	11 f4       	brne	.+4      	; 0x720 <memcpy_from_eeprom_with_checksum+0x66>
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     720:	c9 01       	movw	r24, r18
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     728:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     72c:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     730:	40 93 27 02 	sts	0x0227, r20
}
     734:	08 95       	ret

00000736 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	0f 92       	push	r0
     74c:	0f 92       	push	r0
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	6c 01       	movw	r12, r24
     754:	5b 01       	movw	r10, r22
     756:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     758:	fb 01       	movw	r30, r22
     75a:	00 81       	ld	r16, Z
     75c:	11 81       	ldd	r17, Z+1	; 0x01
     75e:	08 0f       	add	r16, r24
     760:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     762:	c8 01       	movw	r24, r16
     764:	be 01       	movw	r22, r28
     766:	6f 5f       	subi	r22, 0xFF	; 255
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	0e 94 2b 20 	call	0x4056	; 0x4056 <strtod>
     76e:	f7 01       	movw	r30, r14
     770:	60 83       	st	Z, r22
     772:	71 83       	std	Z+1, r23	; 0x01
     774:	82 83       	std	Z+2, r24	; 0x02
     776:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	80 17       	cp	r24, r16
     77e:	91 07       	cpc	r25, r17
     780:	31 f4       	brne	.+12     	; 0x78e <read_double+0x58>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 00 02 	sts	0x0200, r24
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	07 c0       	rjmp	.+14     	; 0x79c <read_double+0x66>
    return(0); 
  };

  *char_counter = end - line;
     78e:	8c 19       	sub	r24, r12
     790:	9d 09       	sbc	r25, r13
     792:	f5 01       	movw	r30, r10
     794:	91 83       	std	Z+1, r25	; 0x01
     796:	80 83       	st	Z, r24
     798:	21 e0       	ldi	r18, 0x01	; 1
     79a:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     79c:	c9 01       	movw	r24, r18
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	08 95       	ret

000007b8 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
     7c2:	8b 01       	movw	r16, r22
     7c4:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     7c6:	ed 91       	ld	r30, X+
     7c8:	fc 91       	ld	r31, X
     7ca:	11 97       	sbiw	r26, 0x01	; 1
     7cc:	e4 0f       	add	r30, r20
     7ce:	f5 1f       	adc	r31, r21
     7d0:	e0 81       	ld	r30, Z
     7d2:	ee 23       	and	r30, r30
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     7d6:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     7d8:	e1 54       	subi	r30, 0x41	; 65
     7da:	ea 31       	cpi	r30, 0x1A	; 26
     7dc:	30 f0       	brcs	.+12     	; 0x7ea <next_statement+0x32>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	80 93 00 02 	sts	0x0200, r24
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	10 c0       	rjmp	.+32     	; 0x80a <next_statement+0x52>
    return(0);
  }
  (*char_counter)++;
     7ea:	8d 91       	ld	r24, X+
     7ec:	9c 91       	ld	r25, X
     7ee:	11 97       	sbiw	r26, 0x01	; 1
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     7f6:	ca 01       	movw	r24, r20
     7f8:	b9 01       	movw	r22, r18
     7fa:	a8 01       	movw	r20, r16
     7fc:	0e 94 9b 03 	call	0x736	; 0x736 <read_double>
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	11 f0       	breq	.+4      	; 0x808 <next_statement+0x50>
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     80a:	c9 01       	movw	r24, r18
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     816:	88 e2       	ldi	r24, 0x28	; 40
     818:	e0 e0       	ldi	r30, 0x00	; 0
     81a:	f2 e0       	ldi	r31, 0x02	; 2
     81c:	df 01       	movw	r26, r30
     81e:	1d 92       	st	X+, r1
     820:	8a 95       	dec	r24
     822:	e9 f7       	brne	.-6      	; 0x81e <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     824:	60 91 1a 05 	lds	r22, 0x051A
     828:	70 91 1b 05 	lds	r23, 0x051B
     82c:	80 91 1c 05 	lds	r24, 0x051C
     830:	90 91 1d 05 	lds	r25, 0x051D
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e7       	ldi	r20, 0x70	; 112
     83a:	52 e4       	ldi	r21, 0x42	; 66
     83c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
     840:	60 93 0a 02 	sts	0x020A, r22
     844:	70 93 0b 02 	sts	0x020B, r23
     848:	80 93 0c 02 	sts	0x020C, r24
     84c:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     850:	60 91 1e 05 	lds	r22, 0x051E
     854:	70 91 1f 05 	lds	r23, 0x051F
     858:	80 91 20 05 	lds	r24, 0x0520
     85c:	90 91 21 05 	lds	r25, 0x0521
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	40 e7       	ldi	r20, 0x70	; 112
     866:	52 e4       	ldi	r21, 0x42	; 66
     868:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
     86c:	60 93 0e 02 	sts	0x020E, r22
     870:	70 93 0f 02 	sts	0x020F, r23
     874:	80 93 10 02 	sts	0x0210, r24
     878:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     87c:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     88c:	90 93 04 02 	sts	0x0204, r25
}
     890:	08 95       	ret

00000892 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     892:	2f 92       	push	r2
     894:	3f 92       	push	r3
     896:	4f 92       	push	r4
     898:	5f 92       	push	r5
     89a:	6f 92       	push	r6
     89c:	7f 92       	push	r7
     89e:	8f 92       	push	r8
     8a0:	9f 92       	push	r9
     8a2:	af 92       	push	r10
     8a4:	bf 92       	push	r11
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	df 93       	push	r29
     8b4:	cf 93       	push	r28
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	e2 97       	sbiw	r28, 0x32	; 50
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     8c8:	1b 82       	std	Y+3, r1	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	a0 e0       	ldi	r26, 0x00	; 0
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	88 87       	std	Y+8, r24	; 0x08
     8d6:	99 87       	std	Y+9, r25	; 0x09
     8d8:	aa 87       	std	Y+10, r26	; 0x0a
     8da:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     8dc:	80 e1       	ldi	r24, 0x10	; 16
     8de:	fe 01       	movw	r30, r28
     8e0:	3c 96       	adiw	r30, 0x0c	; 12
     8e2:	df 01       	movw	r26, r30
     8e4:	98 2f       	mov	r25, r24
     8e6:	1d 92       	st	X+, r1
     8e8:	9a 95       	dec	r25
     8ea:	e9 f7       	brne	.-6      	; 0x8e6 <gc_execute_line+0x54>
  clear_vector(offset);
     8ec:	fe 01       	movw	r30, r28
     8ee:	7c 96       	adiw	r30, 0x1c	; 28
     8f0:	df 01       	movw	r26, r30
     8f2:	1d 92       	st	X+, r1
     8f4:	8a 95       	dec	r24
     8f6:	e9 f7       	brne	.-6      	; 0x8f2 <gc_execute_line+0x60>

  gc.status_code = GCSTATUS_OK;
     8f8:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     8fc:	f5 01       	movw	r30, r10
     8fe:	80 81       	ld	r24, Z
     900:	88 32       	cpi	r24, 0x28	; 40
     902:	41 f1       	breq	.+80     	; 0x954 <gc_execute_line+0xc2>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     904:	8f 32       	cpi	r24, 0x2F	; 47
     906:	29 f4       	brne	.+10     	; 0x912 <gc_execute_line+0x80>
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	9b 81       	ldd	r25, Y+3	; 0x03
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	9b 83       	std	Y+3, r25	; 0x03
     910:	8a 83       	std	Y+2, r24	; 0x02
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     912:	d5 01       	movw	r26, r10
     914:	8c 91       	ld	r24, X
     916:	84 32       	cpi	r24, 0x24	; 36
     918:	99 f0       	breq	.+38     	; 0x940 <gc_execute_line+0xae>
     91a:	77 24       	eor	r7, r7
     91c:	1c a6       	std	Y+44, r1	; 0x2c
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     91e:	14 e0       	ldi	r17, 0x04	; 4
     920:	21 2e       	mov	r2, r17
     922:	31 2c       	mov	r3, r1
     924:	2c 0e       	add	r2, r28
     926:	3d 1e       	adc	r3, r29
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     928:	b3 e0       	ldi	r27, 0x03	; 3
     92a:	9b 2e       	mov	r9, r27
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     92c:	dd 24       	eor	r13, r13
     92e:	d3 94       	inc	r13
			}

	       break;

      case 'G':
      switch(int_value) {
     930:	a2 e0       	ldi	r26, 0x02	; 2
     932:	ca 2e       	mov	r12, r26
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     934:	f4 e0       	ldi	r31, 0x04	; 4
     936:	8f 2e       	mov	r8, r31
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     938:	44 24       	eor	r4, r4
     93a:	4a 94       	dec	r4
     93c:	54 2c       	mov	r5, r4
     93e:	ae c1       	rjmp	.+860    	; 0xc9c <gc_execute_line+0x40a>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	9b 83       	std	Y+3, r25	; 0x03
     946:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     948:	f5 01       	movw	r30, r10
     94a:	81 81       	ldd	r24, Z+1	; 0x01
     94c:	88 23       	and	r24, r24
     94e:	21 f4       	brne	.+8      	; 0x958 <gc_execute_line+0xc6>
     950:	0e 94 1e 13 	call	0x263c	; 0x263c <settings_dump>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	7b c3       	rjmp	.+1782   	; 0x104e <gc_execute_line+0x7bc>
    read_double(line, &char_counter, &p);
     958:	8e 01       	movw	r16, r28
     95a:	0e 5f       	subi	r16, 0xFE	; 254
     95c:	1f 4f       	sbci	r17, 0xFF	; 255
     95e:	c5 01       	movw	r24, r10
     960:	b8 01       	movw	r22, r16
     962:	ae 01       	movw	r20, r28
     964:	48 5f       	subi	r20, 0xF8	; 248
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	0e 94 9b 03 	call	0x736	; 0x736 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	9b 81       	ldd	r25, Y+3	; 0x03
     970:	f5 01       	movw	r30, r10
     972:	e8 0f       	add	r30, r24
     974:	f9 1f       	adc	r31, r25
     976:	20 81       	ld	r18, Z
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	9b 83       	std	Y+3, r25	; 0x03
     97c:	8a 83       	std	Y+2, r24	; 0x02
     97e:	2d 33       	cpi	r18, 0x3D	; 61
     980:	09 f0       	breq	.+2      	; 0x984 <gc_execute_line+0xf2>
     982:	64 c3       	rjmp	.+1736   	; 0x104c <gc_execute_line+0x7ba>
    read_double(line, &char_counter, &value);
     984:	c5 01       	movw	r24, r10
     986:	b8 01       	movw	r22, r16
     988:	ae 01       	movw	r20, r28
     98a:	4c 5f       	subi	r20, 0xFC	; 252
     98c:	5f 4f       	sbci	r21, 0xFF	; 255
     98e:	0e 94 9b 03 	call	0x736	; 0x736 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     992:	ea 81       	ldd	r30, Y+2	; 0x02
     994:	fb 81       	ldd	r31, Y+3	; 0x03
     996:	ea 0d       	add	r30, r10
     998:	fb 1d       	adc	r31, r11
     99a:	80 81       	ld	r24, Z
     99c:	88 23       	and	r24, r24
     99e:	09 f0       	breq	.+2      	; 0x9a2 <gc_execute_line+0x110>
     9a0:	55 c3       	rjmp	.+1706   	; 0x104c <gc_execute_line+0x7ba>
    settings_store_setting(p, value);
     9a2:	68 85       	ldd	r22, Y+8	; 0x08
     9a4:	79 85       	ldd	r23, Y+9	; 0x09
     9a6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9a8:	9b 85       	ldd	r25, Y+11	; 0x0b
     9aa:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	4c 81       	ldd	r20, Y+4	; 0x04
     9b4:	5d 81       	ldd	r21, Y+5	; 0x05
     9b6:	6e 81       	ldd	r22, Y+6	; 0x06
     9b8:	7f 81       	ldd	r23, Y+7	; 0x07
     9ba:	0e 94 a2 12 	call	0x2544	; 0x2544 <settings_store_setting>
     9be:	43 c3       	rjmp	.+1670   	; 0x1046 <gc_execute_line+0x7b4>
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     9c0:	6c 81       	ldd	r22, Y+4	; 0x04
     9c2:	7d 81       	ldd	r23, Y+5	; 0x05
     9c4:	8e 81       	ldd	r24, Y+6	; 0x06
     9c6:	9f 81       	ldd	r25, Y+7	; 0x07
     9c8:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <trunc>
     9cc:	7b 01       	movw	r14, r22
     9ce:	8c 01       	movw	r16, r24
     9d0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
     9d4:	fb 01       	movw	r30, r22

    switch(letter) {
     9d6:	29 81       	ldd	r18, Y+1	; 0x01
     9d8:	27 34       	cpi	r18, 0x47	; 71
     9da:	09 f4       	brne	.+2      	; 0x9de <gc_execute_line+0x14c>
     9dc:	54 c0       	rjmp	.+168    	; 0xa86 <gc_execute_line+0x1f4>
     9de:	28 34       	cpi	r18, 0x48	; 72
     9e0:	20 f4       	brcc	.+8      	; 0x9ea <gc_execute_line+0x158>
     9e2:	24 34       	cpi	r18, 0x44	; 68
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <gc_execute_line+0x156>
     9e6:	56 c1       	rjmp	.+684    	; 0xc94 <gc_execute_line+0x402>
     9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <gc_execute_line+0x166>
     9ea:	2d 34       	cpi	r18, 0x4D	; 77
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <gc_execute_line+0x15e>
     9ee:	f0 c0       	rjmp	.+480    	; 0xbd0 <gc_execute_line+0x33e>
     9f0:	24 35       	cpi	r18, 0x54	; 84
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <gc_execute_line+0x164>
     9f4:	4f c1       	rjmp	.+670    	; 0xc94 <gc_execute_line+0x402>
     9f6:	48 c1       	rjmp	.+656    	; 0xc88 <gc_execute_line+0x3f6>
	      	printPgmString(PSTR("PIND limits = "));
		  	printBinary( ch );
	      	printPgmString(PSTR("\r\n"));
#endif

	      	printPgmString(PSTR("head down = "));
     9f8:	86 ec       	ldi	r24, 0xC6	; 198
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
			printInteger( is_head_down() );
     a00:	0e 94 09 1b 	call	0x3612	; 0x3612 <is_head_down>
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	a0 e0       	ldi	r26, 0x00	; 0
     a08:	b0 e0       	ldi	r27, 0x00	; 0
     a0a:	bc 01       	movw	r22, r24
     a0c:	cd 01       	movw	r24, r26
     a0e:	0e 94 30 1a 	call	0x3460	; 0x3460 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     a12:	83 ec       	ldi	r24, 0xC3	; 195
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     a1a:	88 eb       	ldi	r24, 0xB8	; 184
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
			printInteger( is_rotated() );
     a22:	0e 94 0c 1b 	call	0x3618	; 0x3618 <is_rotated>
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	0e 94 30 1a 	call	0x3460	; 0x3460 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     a34:	85 eb       	ldi	r24, 0xB5	; 181
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>




			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     a3c:	4b 9b       	sbis	0x09, 3	; 9
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <gc_execute_line+0x1b6>
		      	printPgmString(PSTR("XL1\r\n"));
     a40:	8f ea       	ldi	r24, 0xAF	; 175
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     a48:	4a 9b       	sbis	0x09, 2	; 9
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <gc_execute_line+0x1c2>
		      	printPgmString(PSTR("XL2\r\n"));
     a4c:	89 ea       	ldi	r24, 0xA9	; 169
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     a54:	48 9b       	sbis	0x09, 0	; 9
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <gc_execute_line+0x1ce>
		      	printPgmString(PSTR("YL1\r\n"));
     a58:	83 ea       	ldi	r24, 0xA3	; 163
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     a60:	49 9b       	sbis	0x09, 1	; 9
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <gc_execute_line+0x1da>
		      	printPgmString(PSTR("YL2\r\n"));
     a64:	8d e9       	ldi	r24, 0x9D	; 157
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

			if( bit_is_set( XHM_PIN, X_HOME ) )
     a6c:	04 9b       	sbis	0x00, 4	; 0
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <gc_execute_line+0x1e6>
		      	printPgmString(PSTR("X_HOME\r\n"));
     a70:	84 e9       	ldi	r24, 0x94	; 148
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     a78:	90 9b       	sbis	0x12, 0	; 18
     a7a:	0c c1       	rjmp	.+536    	; 0xc94 <gc_execute_line+0x402>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     a7c:	8b e8       	ldi	r24, 0x8B	; 139
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
     a84:	07 c1       	rjmp	.+526    	; 0xc94 <gc_execute_line+0x402>
			}

	       break;

      case 'G':
      switch(int_value) {
     a86:	65 31       	cpi	r22, 0x15	; 21
     a88:	71 05       	cpc	r23, r1
     a8a:	09 f4       	brne	.+2      	; 0xa8e <gc_execute_line+0x1fc>
     a8c:	89 c0       	rjmp	.+274    	; 0xba0 <gc_execute_line+0x30e>
     a8e:	66 31       	cpi	r22, 0x16	; 22
     a90:	71 05       	cpc	r23, r1
     a92:	84 f5       	brge	.+96     	; 0xaf4 <gc_execute_line+0x262>
     a94:	64 30       	cpi	r22, 0x04	; 4
     a96:	71 05       	cpc	r23, r1
     a98:	09 f4       	brne	.+2      	; 0xa9c <gc_execute_line+0x20a>
     a9a:	5b c0       	rjmp	.+182    	; 0xb52 <gc_execute_line+0x2c0>
     a9c:	65 30       	cpi	r22, 0x05	; 5
     a9e:	71 05       	cpc	r23, r1
     aa0:	a4 f4       	brge	.+40     	; 0xaca <gc_execute_line+0x238>
     aa2:	61 30       	cpi	r22, 0x01	; 1
     aa4:	71 05       	cpc	r23, r1
     aa6:	09 f4       	brne	.+2      	; 0xaaa <gc_execute_line+0x218>
     aa8:	5a c0       	rjmp	.+180    	; 0xb5e <gc_execute_line+0x2cc>
     aaa:	62 30       	cpi	r22, 0x02	; 2
     aac:	71 05       	cpc	r23, r1
     aae:	24 f4       	brge	.+8      	; 0xab8 <gc_execute_line+0x226>
     ab0:	67 2b       	or	r22, r23
     ab2:	09 f4       	brne	.+2      	; 0xab6 <gc_execute_line+0x224>
     ab4:	51 c0       	rjmp	.+162    	; 0xb58 <gc_execute_line+0x2c6>
     ab6:	e5 c0       	rjmp	.+458    	; 0xc82 <gc_execute_line+0x3f0>
     ab8:	62 30       	cpi	r22, 0x02	; 2
     aba:	71 05       	cpc	r23, r1
     abc:	09 f4       	brne	.+2      	; 0xac0 <gc_execute_line+0x22e>
     abe:	52 c0       	rjmp	.+164    	; 0xb64 <gc_execute_line+0x2d2>
     ac0:	63 30       	cpi	r22, 0x03	; 3
     ac2:	71 05       	cpc	r23, r1
     ac4:	09 f0       	breq	.+2      	; 0xac8 <gc_execute_line+0x236>
     ac6:	dd c0       	rjmp	.+442    	; 0xc82 <gc_execute_line+0x3f0>
     ac8:	50 c0       	rjmp	.+160    	; 0xb6a <gc_execute_line+0x2d8>
     aca:	62 31       	cpi	r22, 0x12	; 18
     acc:	71 05       	cpc	r23, r1
     ace:	09 f4       	brne	.+2      	; 0xad2 <gc_execute_line+0x240>
     ad0:	56 c0       	rjmp	.+172    	; 0xb7e <gc_execute_line+0x2ec>
     ad2:	63 31       	cpi	r22, 0x13	; 19
     ad4:	71 05       	cpc	r23, r1
     ad6:	2c f4       	brge	.+10     	; 0xae2 <gc_execute_line+0x250>
     ad8:	61 31       	cpi	r22, 0x11	; 17
     ada:	71 05       	cpc	r23, r1
     adc:	09 f0       	breq	.+2      	; 0xae0 <gc_execute_line+0x24e>
     ade:	d1 c0       	rjmp	.+418    	; 0xc82 <gc_execute_line+0x3f0>
     ae0:	47 c0       	rjmp	.+142    	; 0xb70 <gc_execute_line+0x2de>
     ae2:	63 31       	cpi	r22, 0x13	; 19
     ae4:	71 05       	cpc	r23, r1
     ae6:	09 f4       	brne	.+2      	; 0xaea <gc_execute_line+0x258>
     ae8:	51 c0       	rjmp	.+162    	; 0xb8c <gc_execute_line+0x2fa>
     aea:	64 31       	cpi	r22, 0x14	; 20
     aec:	71 05       	cpc	r23, r1
     aee:	09 f0       	breq	.+2      	; 0xaf2 <gc_execute_line+0x260>
     af0:	c8 c0       	rjmp	.+400    	; 0xc82 <gc_execute_line+0x3f0>
     af2:	53 c0       	rjmp	.+166    	; 0xb9a <gc_execute_line+0x308>
     af4:	6a 35       	cpi	r22, 0x5A	; 90
     af6:	71 05       	cpc	r23, r1
     af8:	09 f4       	brne	.+2      	; 0xafc <gc_execute_line+0x26a>
     afa:	5b c0       	rjmp	.+182    	; 0xbb2 <gc_execute_line+0x320>
     afc:	6b 35       	cpi	r22, 0x5B	; 91
     afe:	71 05       	cpc	r23, r1
     b00:	a4 f4       	brge	.+40     	; 0xb2a <gc_execute_line+0x298>
     b02:	6e 31       	cpi	r22, 0x1E	; 30
     b04:	71 05       	cpc	r23, r1
     b06:	11 f1       	breq	.+68     	; 0xb4c <gc_execute_line+0x2ba>
     b08:	6f 31       	cpi	r22, 0x1F	; 31
     b0a:	71 05       	cpc	r23, r1
     b0c:	2c f4       	brge	.+10     	; 0xb18 <gc_execute_line+0x286>
     b0e:	6c 31       	cpi	r22, 0x1C	; 28
     b10:	71 05       	cpc	r23, r1
     b12:	09 f0       	breq	.+2      	; 0xb16 <gc_execute_line+0x284>
     b14:	b6 c0       	rjmp	.+364    	; 0xc82 <gc_execute_line+0x3f0>
     b16:	1a c0       	rjmp	.+52     	; 0xb4c <gc_execute_line+0x2ba>
     b18:	65 33       	cpi	r22, 0x35	; 53
     b1a:	71 05       	cpc	r23, r1
     b1c:	09 f4       	brne	.+2      	; 0xb20 <gc_execute_line+0x28e>
     b1e:	43 c0       	rjmp	.+134    	; 0xba6 <gc_execute_line+0x314>
     b20:	60 35       	cpi	r22, 0x50	; 80
     b22:	71 05       	cpc	r23, r1
     b24:	09 f0       	breq	.+2      	; 0xb28 <gc_execute_line+0x296>
     b26:	ad c0       	rjmp	.+346    	; 0xc82 <gc_execute_line+0x3f0>
     b28:	41 c0       	rjmp	.+130    	; 0xbac <gc_execute_line+0x31a>
     b2a:	6c 35       	cpi	r22, 0x5C	; 92
     b2c:	71 05       	cpc	r23, r1
     b2e:	09 f4       	brne	.+2      	; 0xb32 <gc_execute_line+0x2a0>
     b30:	46 c0       	rjmp	.+140    	; 0xbbe <gc_execute_line+0x32c>
     b32:	6c 35       	cpi	r22, 0x5C	; 92
     b34:	71 05       	cpc	r23, r1
     b36:	0c f4       	brge	.+2      	; 0xb3a <gc_execute_line+0x2a8>
     b38:	3f c0       	rjmp	.+126    	; 0xbb8 <gc_execute_line+0x326>
     b3a:	6d 35       	cpi	r22, 0x5D	; 93
     b3c:	71 05       	cpc	r23, r1
     b3e:	09 f4       	brne	.+2      	; 0xb42 <gc_execute_line+0x2b0>
     b40:	41 c0       	rjmp	.+130    	; 0xbc4 <gc_execute_line+0x332>
     b42:	6e 35       	cpi	r22, 0x5E	; 94
     b44:	71 05       	cpc	r23, r1
     b46:	09 f0       	breq	.+2      	; 0xb4a <gc_execute_line+0x2b8>
     b48:	9c c0       	rjmp	.+312    	; 0xc82 <gc_execute_line+0x3f0>
     b4a:	3f c0       	rjmp	.+126    	; 0xbca <gc_execute_line+0x338>
     b4c:	f2 e0       	ldi	r31, 0x02	; 2
     b4e:	fc a7       	std	Y+44, r31	; 0x2c
     b50:	a1 c0       	rjmp	.+322    	; 0xc94 <gc_execute_line+0x402>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	8c a7       	std	Y+44, r24	; 0x2c
     b56:	9e c0       	rjmp	.+316    	; 0xc94 <gc_execute_line+0x402>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     b58:	10 92 01 02 	sts	0x0201, r1
     b5c:	9b c0       	rjmp	.+310    	; 0xc94 <gc_execute_line+0x402>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     b5e:	d0 92 01 02 	sts	0x0201, r13
     b62:	98 c0       	rjmp	.+304    	; 0xc94 <gc_execute_line+0x402>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     b64:	c0 92 01 02 	sts	0x0201, r12
     b68:	95 c0       	rjmp	.+298    	; 0xc94 <gc_execute_line+0x402>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     b6a:	90 92 01 02 	sts	0x0201, r9
     b6e:	92 c0       	rjmp	.+292    	; 0xc94 <gc_execute_line+0x402>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b70:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     b74:	d0 92 26 02 	sts	0x0226, r13
  gc.plane_axis_2 = axis_2;
     b78:	c0 92 27 02 	sts	0x0227, r12
     b7c:	8b c0       	rjmp	.+278    	; 0xc94 <gc_execute_line+0x402>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b7e:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     b82:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     b86:	d0 92 27 02 	sts	0x0227, r13
     b8a:	84 c0       	rjmp	.+264    	; 0xc94 <gc_execute_line+0x402>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b8c:	d0 92 25 02 	sts	0x0225, r13
  gc.plane_axis_1 = axis_1;
     b90:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     b94:	10 92 27 02 	sts	0x0227, r1
     b98:	7d c0       	rjmp	.+250    	; 0xc94 <gc_execute_line+0x402>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     b9a:	d0 92 03 02 	sts	0x0203, r13
     b9e:	7a c0       	rjmp	.+244    	; 0xc94 <gc_execute_line+0x402>
        case 21: gc.inches_mode = FALSE; break;
     ba0:	10 92 03 02 	sts	0x0203, r1
     ba4:	77 c0       	rjmp	.+238    	; 0xc94 <gc_execute_line+0x402>
     ba6:	77 24       	eor	r7, r7
     ba8:	73 94       	inc	r7
     baa:	74 c0       	rjmp	.+232    	; 0xc94 <gc_execute_line+0x402>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     bac:	80 92 01 02 	sts	0x0201, r8
     bb0:	71 c0       	rjmp	.+226    	; 0xc94 <gc_execute_line+0x402>
        case 90: gc.absolute_mode = TRUE; break;
     bb2:	d0 92 04 02 	sts	0x0204, r13
     bb6:	6e c0       	rjmp	.+220    	; 0xc94 <gc_execute_line+0x402>
        case 91: gc.absolute_mode = FALSE; break;
     bb8:	10 92 04 02 	sts	0x0204, r1
     bbc:	6b c0       	rjmp	.+214    	; 0xc94 <gc_execute_line+0x402>
     bbe:	93 e0       	ldi	r25, 0x03	; 3
     bc0:	9c a7       	std	Y+44, r25	; 0x2c
     bc2:	68 c0       	rjmp	.+208    	; 0xc94 <gc_execute_line+0x402>
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     bc4:	d0 92 02 02 	sts	0x0202, r13
     bc8:	65 c0       	rjmp	.+202    	; 0xc94 <gc_execute_line+0x402>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     bca:	10 92 02 02 	sts	0x0202, r1
     bce:	62 c0       	rjmp	.+196    	; 0xc94 <gc_execute_line+0x402>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     bd0:	6d 33       	cpi	r22, 0x3D	; 61
     bd2:	71 05       	cpc	r23, r1
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <gc_execute_line+0x346>
     bd6:	55 c0       	rjmp	.+170    	; 0xc82 <gc_execute_line+0x3f0>
     bd8:	ee 58       	subi	r30, 0x8E	; 142
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	05 90       	lpm	r0, Z+
     be2:	f4 91       	lpm	r31, Z+
     be4:	e0 2d       	mov	r30, r0
     be6:	19 94       	eijmp
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     be8:	d0 92 05 02 	sts	0x0205, r13
     bec:	53 c0       	rjmp	.+166    	; 0xc94 <gc_execute_line+0x402>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     bee:	c0 92 05 02 	sts	0x0205, r12
     bf2:	50 c0       	rjmp	.+160    	; 0xc94 <gc_execute_line+0x402>
        case 3: gc.spindle_direction = 1; break;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	90 93 07 02 	sts	0x0207, r25
     bfc:	80 93 06 02 	sts	0x0206, r24
     c00:	49 c0       	rjmp	.+146    	; 0xc94 <gc_execute_line+0x402>
        case 4: gc.spindle_direction = -1; break;
     c02:	50 92 07 02 	sts	0x0207, r5
     c06:	40 92 06 02 	sts	0x0206, r4
     c0a:	44 c0       	rjmp	.+136    	; 0xc94 <gc_execute_line+0x402>
        case 5: gc.spindle_direction = 0; break;
     c0c:	10 92 07 02 	sts	0x0207, r1
     c10:	10 92 06 02 	sts	0x0206, r1
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <gc_execute_line+0x402>
        case 8: gc.coolant_flood = 1; break;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	90 93 09 02 	sts	0x0209, r25
     c1e:	80 93 08 02 	sts	0x0208, r24
     c22:	38 c0       	rjmp	.+112    	; 0xc94 <gc_execute_line+0x402>
        case 9: gc.coolant_flood = 0; break;
     c24:	10 92 09 02 	sts	0x0209, r1
     c28:	10 92 08 02 	sts	0x0208, r1
     c2c:	33 c0       	rjmp	.+102    	; 0xc94 <gc_execute_line+0x402>
	// head control
        case 10: head_down(1);break;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <gc_execute_line+0x3a6>
        case 11: head_down(0);break;
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 11 1b 	call	0x3622	; 0x3622 <head_down>
     c3c:	2b c0       	rjmp	.+86     	; 0xc94 <gc_execute_line+0x402>
	// atc
		case 12: atc_change(0);break;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	11 c0       	rjmp	.+34     	; 0xc66 <gc_execute_line+0x3d4>
		case 13: atc_change(1);break;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e c0       	rjmp	.+28     	; 0xc66 <gc_execute_line+0x3d4>
		case 14: atc_change(2);break;
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0b c0       	rjmp	.+22     	; 0xc66 <gc_execute_line+0x3d4>
		case 15: atc_change(3);break;
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	08 c0       	rjmp	.+16     	; 0xc66 <gc_execute_line+0x3d4>
		case 16: atc_change(4);break;
     c56:	84 e0       	ldi	r24, 0x04	; 4
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <gc_execute_line+0x3d4>
		case 17: atc_change(5);break;
     c5c:	85 e0       	ldi	r24, 0x05	; 5
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <gc_execute_line+0x3d4>
		case 18: atc_change(6);break;
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 a9 1a 	call	0x3552	; 0x3552 <atc_change>
     c6a:	14 c0       	rjmp	.+40     	; 0xc94 <gc_execute_line+0x402>
// vacuum
		case 19: vacuum(1);break;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <gc_execute_line+0x3e4>
		case 20: vacuum(0);break;
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 b4 1b 	call	0x3768	; 0x3768 <vacuum>
     c7a:	0c c0       	rjmp	.+24     	; 0xc94 <gc_execute_line+0x402>
// tape knock
		case 21: tape_knock();break;
     c7c:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <tape_knock>
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <gc_execute_line+0x402>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     c82:	90 92 00 02 	sts	0x0200, r9
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <gc_execute_line+0x402>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     c88:	c8 01       	movw	r24, r16
     c8a:	b7 01       	movw	r22, r14
     c8c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fixunssfsi>
     c90:	60 93 22 02 	sts	0x0222, r22
    }
    if(gc.status_code) { break; }
     c94:	80 91 00 02 	lds	r24, 0x0200
     c98:	88 23       	and	r24, r24
     c9a:	61 f4       	brne	.+24     	; 0xcb4 <gc_execute_line+0x422>
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	b1 01       	movw	r22, r2
     ca2:	a5 01       	movw	r20, r10
     ca4:	9e 01       	movw	r18, r28
     ca6:	2e 5f       	subi	r18, 0xFE	; 254
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <next_statement>
     cae:	89 2b       	or	r24, r25
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <gc_execute_line+0x422>
     cb2:	86 ce       	rjmp	.-756    	; 0x9c0 <gc_execute_line+0x12e>
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     cb4:	80 91 00 02 	lds	r24, 0x0200
     cb8:	88 23       	and	r24, r24
     cba:	09 f0       	breq	.+2      	; 0xcbe <gc_execute_line+0x42c>
     cbc:	c8 c1       	rjmp	.+912    	; 0x104e <gc_execute_line+0x7bc>

  char_counter = 0;
     cbe:	1b 82       	std	Y+3, r1	; 0x03
     cc0:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
     cc2:	80 e1       	ldi	r24, 0x10	; 16
     cc4:	fe 01       	movw	r30, r28
     cc6:	7c 96       	adiw	r30, 0x1c	; 28
     cc8:	df 01       	movw	r26, r30
     cca:	1d 92       	st	X+, r1
     ccc:	8a 95       	dec	r24
     cce:	e9 f7       	brne	.-6      	; 0xcca <gc_execute_line+0x438>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     cd0:	de 01       	movw	r26, r28
     cd2:	1c 96       	adiw	r26, 0x0c	; 12
     cd4:	e2 e1       	ldi	r30, 0x12	; 18
     cd6:	f2 e0       	ldi	r31, 0x02	; 2
     cd8:	80 e1       	ldi	r24, 0x10	; 16
     cda:	01 90       	ld	r0, Z+
     cdc:	0d 92       	st	X+, r0
     cde:	81 50       	subi	r24, 0x01	; 1
     ce0:	e1 f7       	brne	.-8      	; 0xcda <gc_execute_line+0x448>
     ce2:	1d a6       	std	Y+45, r1	; 0x2d
     ce4:	1e a6       	std	Y+46, r1	; 0x2e
     ce6:	b0 e8       	ldi	r27, 0x80	; 128
     ce8:	bf a7       	std	Y+47, r27	; 0x2f
     cea:	ef eb       	ldi	r30, 0xBF	; 191
     cec:	e8 ab       	std	Y+48, r30	; 0x30

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     cee:	e4 e0       	ldi	r30, 0x04	; 4
     cf0:	2e 2e       	mov	r2, r30
     cf2:	31 2c       	mov	r3, r1
     cf4:	2c 0e       	add	r2, r28
     cf6:	3d 1e       	adc	r3, r29
     cf8:	72 e0       	ldi	r23, 0x02	; 2
     cfa:	47 2e       	mov	r4, r23
     cfc:	51 2c       	mov	r5, r1
     cfe:	4c 0e       	add	r4, r28
     d00:	5d 1e       	adc	r5, r29
     d02:	4e 01       	movw	r8, r28
     d04:	08 94       	sec
     d06:	81 1c       	adc	r8, r1
     d08:	91 1c       	adc	r9, r1
     d0a:	bf c0       	rjmp	.+382    	; 0xe8a <gc_execute_line+0x5f8>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     d0c:	cc 80       	ldd	r12, Y+4	; 0x04
     d0e:	dd 80       	ldd	r13, Y+5	; 0x05
     d10:	ee 80       	ldd	r14, Y+6	; 0x06
     d12:	ff 80       	ldd	r15, Y+7	; 0x07
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
}

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     d14:	80 91 03 02 	lds	r24, 0x0203
     d18:	88 23       	and	r24, r24
     d1a:	19 f4       	brne	.+6      	; 0xd22 <gc_execute_line+0x490>
     d1c:	a7 01       	movw	r20, r14
     d1e:	96 01       	movw	r18, r12
     d20:	0a c0       	rjmp	.+20     	; 0xd36 <gc_execute_line+0x4a4>
     d22:	c7 01       	movw	r24, r14
     d24:	b6 01       	movw	r22, r12
     d26:	23 e3       	ldi	r18, 0x33	; 51
     d28:	33 e3       	ldi	r19, 0x33	; 51
     d2a:	4b ec       	ldi	r20, 0xCB	; 203
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     d36:	09 81       	ldd	r16, Y+1	; 0x01
     d38:	0c 34       	cpi	r16, 0x4C	; 76
     d3a:	50 f4       	brcc	.+20     	; 0xd50 <gc_execute_line+0x4be>
     d3c:	09 34       	cpi	r16, 0x49	; 73
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <gc_execute_line+0x4b0>
     d40:	45 c0       	rjmp	.+138    	; 0xdcc <gc_execute_line+0x53a>
     d42:	03 34       	cpi	r16, 0x43	; 67
     d44:	09 f4       	brne	.+2      	; 0xd48 <gc_execute_line+0x4b6>
     d46:	8c c0       	rjmp	.+280    	; 0xe60 <gc_execute_line+0x5ce>
     d48:	06 34       	cpi	r16, 0x46	; 70
     d4a:	09 f0       	breq	.+2      	; 0xd4e <gc_execute_line+0x4bc>
     d4c:	9e c0       	rjmp	.+316    	; 0xe8a <gc_execute_line+0x5f8>
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <gc_execute_line+0x4dc>
     d50:	03 35       	cpi	r16, 0x53	; 83
     d52:	09 f4       	brne	.+2      	; 0xd56 <gc_execute_line+0x4c4>
     d54:	4f c0       	rjmp	.+158    	; 0xdf4 <gc_execute_line+0x562>
     d56:	04 35       	cpi	r16, 0x54	; 84
     d58:	20 f4       	brcc	.+8      	; 0xd62 <gc_execute_line+0x4d0>
     d5a:	00 35       	cpi	r16, 0x50	; 80
     d5c:	09 f0       	breq	.+2      	; 0xd60 <gc_execute_line+0x4ce>
     d5e:	95 c0       	rjmp	.+298    	; 0xe8a <gc_execute_line+0x5f8>
     d60:	44 c0       	rjmp	.+136    	; 0xdea <gc_execute_line+0x558>
     d62:	80 2f       	mov	r24, r16
     d64:	88 55       	subi	r24, 0x58	; 88
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	08 f0       	brcs	.+2      	; 0xd6c <gc_execute_line+0x4da>
     d6a:	8f c0       	rjmp	.+286    	; 0xe8a <gc_execute_line+0x5f8>
     d6c:	4c c0       	rjmp	.+152    	; 0xe06 <gc_execute_line+0x574>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     d6e:	80 91 02 02 	lds	r24, 0x0202
     d72:	88 23       	and	r24, r24
     d74:	29 f0       	breq	.+10     	; 0xd80 <gc_execute_line+0x4ee>
     d76:	2d a7       	std	Y+45, r18	; 0x2d
     d78:	3e a7       	std	Y+46, r19	; 0x2e
     d7a:	4f a7       	std	Y+47, r20	; 0x2f
     d7c:	58 ab       	std	Y+48, r21	; 0x30
     d7e:	85 c0       	rjmp	.+266    	; 0xe8a <gc_execute_line+0x5f8>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     d80:	80 91 01 02 	lds	r24, 0x0201
     d84:	88 23       	and	r24, r24
     d86:	89 f4       	brne	.+34     	; 0xdaa <gc_execute_line+0x518>
          gc.seek_rate = unit_converted_value/60;
     d88:	ca 01       	movw	r24, r20
     d8a:	b9 01       	movw	r22, r18
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e7       	ldi	r20, 0x70	; 112
     d92:	52 e4       	ldi	r21, 0x42	; 66
     d94:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
     d98:	60 93 0e 02 	sts	0x020E, r22
     d9c:	70 93 0f 02 	sts	0x020F, r23
     da0:	80 93 10 02 	sts	0x0210, r24
     da4:	90 93 11 02 	sts	0x0211, r25
     da8:	70 c0       	rjmp	.+224    	; 0xe8a <gc_execute_line+0x5f8>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
     daa:	ca 01       	movw	r24, r20
     dac:	b9 01       	movw	r22, r18
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e7       	ldi	r20, 0x70	; 112
     db4:	52 e4       	ldi	r21, 0x42	; 66
     db6:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
     dba:	60 93 0a 02 	sts	0x020A, r22
     dbe:	70 93 0b 02 	sts	0x020B, r23
     dc2:	80 93 0c 02 	sts	0x020C, r24
     dc6:	90 93 0d 02 	sts	0x020D, r25
     dca:	5f c0       	rjmp	.+190    	; 0xe8a <gc_execute_line+0x5f8>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     dcc:	e0 2f       	mov	r30, r16
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	e9 54       	subi	r30, 0x49	; 73
     dd2:	f0 40       	sbci	r31, 0x00	; 0
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	e8 0d       	add	r30, r8
     dde:	f9 1d       	adc	r31, r9
     de0:	23 8f       	std	Z+27, r18	; 0x1b
     de2:	34 8f       	std	Z+28, r19	; 0x1c
     de4:	45 8f       	std	Z+29, r20	; 0x1d
     de6:	56 8f       	std	Z+30, r21	; 0x1e
     de8:	50 c0       	rjmp	.+160    	; 0xe8a <gc_execute_line+0x5f8>
      case 'P': p = value; break;
     dea:	c8 86       	std	Y+8, r12	; 0x08
     dec:	d9 86       	std	Y+9, r13	; 0x09
     dee:	ea 86       	std	Y+10, r14	; 0x0a
     df0:	fb 86       	std	Y+11, r15	; 0x0b
     df2:	4b c0       	rjmp	.+150    	; 0xe8a <gc_execute_line+0x5f8>
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
     df4:	c7 01       	movw	r24, r14
     df6:	b6 01       	movw	r22, r12
     df8:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
     dfc:	70 93 24 02 	sts	0x0224, r23
     e00:	60 93 23 02 	sts	0x0223, r22
     e04:	42 c0       	rjmp	.+132    	; 0xe8a <gc_execute_line+0x5f8>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
     e06:	80 91 04 02 	lds	r24, 0x0204
     e0a:	88 23       	and	r24, r24
     e0c:	11 f4       	brne	.+4      	; 0xe12 <gc_execute_line+0x580>
     e0e:	77 20       	and	r7, r7
     e10:	79 f0       	breq	.+30     	; 0xe30 <gc_execute_line+0x59e>
        target[letter - 'X'] = unit_converted_value;
     e12:	e0 2f       	mov	r30, r16
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	e8 55       	subi	r30, 0x58	; 88
     e18:	f0 40       	sbci	r31, 0x00	; 0
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	e8 0d       	add	r30, r8
     e24:	f9 1d       	adc	r31, r9
     e26:	23 87       	std	Z+11, r18	; 0x0b
     e28:	34 87       	std	Z+12, r19	; 0x0c
     e2a:	45 87       	std	Z+13, r20	; 0x0d
     e2c:	56 87       	std	Z+14, r21	; 0x0e
     e2e:	2d c0       	rjmp	.+90     	; 0xe8a <gc_execute_line+0x5f8>
      } else {
        target[letter - 'X'] += unit_converted_value;
     e30:	10 e0       	ldi	r17, 0x00	; 0
     e32:	08 55       	subi	r16, 0x58	; 88
     e34:	10 40       	sbci	r17, 0x00	; 0
     e36:	00 0f       	add	r16, r16
     e38:	11 1f       	adc	r17, r17
     e3a:	00 0f       	add	r16, r16
     e3c:	11 1f       	adc	r17, r17
     e3e:	08 0d       	add	r16, r8
     e40:	19 1d       	adc	r17, r9
     e42:	d8 01       	movw	r26, r16
     e44:	1b 96       	adiw	r26, 0x0b	; 11
     e46:	6d 91       	ld	r22, X+
     e48:	7d 91       	ld	r23, X+
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	1e 97       	sbiw	r26, 0x0e	; 14
     e50:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
     e54:	f8 01       	movw	r30, r16
     e56:	63 87       	std	Z+11, r22	; 0x0b
     e58:	74 87       	std	Z+12, r23	; 0x0c
     e5a:	85 87       	std	Z+13, r24	; 0x0d
     e5c:	96 87       	std	Z+14, r25	; 0x0e
     e5e:	15 c0       	rjmp	.+42     	; 0xe8a <gc_execute_line+0x5f8>
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
     e60:	80 91 04 02 	lds	r24, 0x0204
     e64:	88 23       	and	r24, r24
     e66:	11 f4       	brne	.+4      	; 0xe6c <gc_execute_line+0x5da>
     e68:	77 20       	and	r7, r7
     e6a:	29 f0       	breq	.+10     	; 0xe76 <gc_execute_line+0x5e4>
		target[C_AXIS] = unit_converted_value;
     e6c:	28 8f       	std	Y+24, r18	; 0x18
     e6e:	39 8f       	std	Y+25, r19	; 0x19
     e70:	4a 8f       	std	Y+26, r20	; 0x1a
     e72:	5b 8f       	std	Y+27, r21	; 0x1b
     e74:	0a c0       	rjmp	.+20     	; 0xe8a <gc_execute_line+0x5f8>
      } else {
        target[C_AXIS] += unit_converted_value;
     e76:	68 8d       	ldd	r22, Y+24	; 0x18
     e78:	79 8d       	ldd	r23, Y+25	; 0x19
     e7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e7e:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
     e82:	68 8f       	std	Y+24, r22	; 0x18
     e84:	79 8f       	std	Y+25, r23	; 0x19
     e86:	8a 8f       	std	Y+26, r24	; 0x1a
     e88:	9b 8f       	std	Y+27, r25	; 0x1b
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     e8a:	c4 01       	movw	r24, r8
     e8c:	b1 01       	movw	r22, r2
     e8e:	a5 01       	movw	r20, r10
     e90:	92 01       	movw	r18, r4
     e92:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <next_statement>
     e96:	89 2b       	or	r24, r25
     e98:	09 f0       	breq	.+2      	; 0xe9c <gc_execute_line+0x60a>
     e9a:	38 cf       	rjmp	.-400    	; 0xd0c <gc_execute_line+0x47a>
      break;      
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     e9c:	80 91 00 02 	lds	r24, 0x0200
     ea0:	88 23       	and	r24, r24
     ea2:	09 f0       	breq	.+2      	; 0xea6 <gc_execute_line+0x614>
     ea4:	d4 c0       	rjmp	.+424    	; 0x104e <gc_execute_line+0x7bc>
    
  // Update spindle state
  if (gc.spindle_direction) {
     ea6:	80 91 06 02 	lds	r24, 0x0206
     eaa:	90 91 07 02 	lds	r25, 0x0207
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	59 f0       	breq	.+22     	; 0xec8 <gc_execute_line+0x636>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
     eb2:	40 91 23 02 	lds	r20, 0x0223
     eb6:	50 91 24 02 	lds	r21, 0x0224
     eba:	66 27       	eor	r22, r22
     ebc:	57 fd       	sbrc	r21, 7
     ebe:	60 95       	com	r22
     ec0:	76 2f       	mov	r23, r22
     ec2:	0e 94 0d 14 	call	0x281a	; 0x281a <spindle_run>
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <gc_execute_line+0x63a>
  } else {
    spindle_stop();
     ec8:	0e 94 18 14 	call	0x2830	; 0x2830 <spindle_stop>
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
     ecc:	80 91 08 02 	lds	r24, 0x0208
     ed0:	90 91 09 02 	lds	r25, 0x0209
     ed4:	89 2b       	or	r24, r25
     ed6:	19 f0       	breq	.+6      	; 0xede <gc_execute_line+0x64c>
  	coolant_flood(TRUE);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <gc_execute_line+0x650>
  }
  else {
  	coolant_flood(FALSE);
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <coolant_flood>
  }
  
  // Perform any physical actions
  switch (next_action) {
     ee6:	fc a5       	ldd	r31, Y+44	; 0x2c
     ee8:	f1 30       	cpi	r31, 0x01	; 1
     eea:	59 f0       	breq	.+22     	; 0xf02 <gc_execute_line+0x670>
     eec:	f1 30       	cpi	r31, 0x01	; 1
     eee:	c0 f0       	brcs	.+48     	; 0xf20 <gc_execute_line+0x68e>
     ef0:	f2 30       	cpi	r31, 0x02	; 2
     ef2:	21 f0       	breq	.+8      	; 0xefc <gc_execute_line+0x66a>
     ef4:	f3 30       	cpi	r31, 0x03	; 3
     ef6:	09 f0       	breq	.+2      	; 0xefa <gc_execute_line+0x668>
     ef8:	9d c0       	rjmp	.+314    	; 0x1034 <gc_execute_line+0x7a2>
     efa:	8a c0       	rjmp	.+276    	; 0x1010 <gc_execute_line+0x77e>
    case NEXT_ACTION_GO_HOME: mc_go_home(); break;
     efc:	0e 94 a5 08 	call	0x114a	; 0x114a <mc_go_home>
     f00:	99 c0       	rjmp	.+306    	; 0x1034 <gc_execute_line+0x7a2>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
     f02:	68 85       	ldd	r22, Y+8	; 0x08
     f04:	79 85       	ldd	r23, Y+9	; 0x09
     f06:	8a 85       	ldd	r24, Y+10	; 0x0a
     f08:	9b 85       	ldd	r25, Y+11	; 0x0b
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a e7       	ldi	r20, 0x7A	; 122
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
     f16:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fixunssfsi>
     f1a:	0e 94 a8 08 	call	0x1150	; 0x1150 <mc_dwell>
     f1e:	8a c0       	rjmp	.+276    	; 0x1034 <gc_execute_line+0x7a2>
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     f20:	80 91 01 02 	lds	r24, 0x0201
     f24:	88 23       	and	r24, r24
     f26:	21 f0       	breq	.+8      	; 0xf30 <gc_execute_line+0x69e>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	09 f0       	breq	.+2      	; 0xf2e <gc_execute_line+0x69c>
     f2c:	83 c0       	rjmp	.+262    	; 0x1034 <gc_execute_line+0x7a2>
     f2e:	27 c0       	rjmp	.+78     	; 0xf7e <gc_execute_line+0x6ec>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
     f30:	00 d0       	rcall	.+0      	; 0xf32 <gc_execute_line+0x6a0>
     f32:	00 d0       	rcall	.+0      	; 0xf34 <gc_execute_line+0x6a2>
     f34:	6c 85       	ldd	r22, Y+12	; 0x0c
     f36:	7d 85       	ldd	r23, Y+13	; 0x0d
     f38:	8e 85       	ldd	r24, Y+14	; 0x0e
     f3a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f3c:	28 89       	ldd	r18, Y+16	; 0x10
     f3e:	39 89       	ldd	r19, Y+17	; 0x11
     f40:	4a 89       	ldd	r20, Y+18	; 0x12
     f42:	5b 89       	ldd	r21, Y+19	; 0x13
     f44:	ec 88       	ldd	r14, Y+20	; 0x14
     f46:	fd 88       	ldd	r15, Y+21	; 0x15
     f48:	0e 89       	ldd	r16, Y+22	; 0x16
     f4a:	1f 89       	ldd	r17, Y+23	; 0x17
     f4c:	a8 8c       	ldd	r10, Y+24	; 0x18
     f4e:	b9 8c       	ldd	r11, Y+25	; 0x19
     f50:	ca 8c       	ldd	r12, Y+26	; 0x1a
     f52:	db 8c       	ldd	r13, Y+27	; 0x1b
     f54:	60 90 0e 02 	lds	r6, 0x020E
     f58:	70 90 0f 02 	lds	r7, 0x020F
     f5c:	80 90 10 02 	lds	r8, 0x0210
     f60:	90 90 11 02 	lds	r9, 0x0211
     f64:	ad b7       	in	r26, 0x3d	; 61
     f66:	be b7       	in	r27, 0x3e	; 62
     f68:	11 96       	adiw	r26, 0x01	; 1
     f6a:	6d 92       	st	X+, r6
     f6c:	7d 92       	st	X+, r7
     f6e:	8d 92       	st	X+, r8
     f70:	9c 92       	st	X, r9
     f72:	14 97       	sbiw	r26, 0x04	; 4
     f74:	16 96       	adiw	r26, 0x06	; 6
     f76:	1c 92       	st	X, r1
     f78:	1e 92       	st	-X, r1
     f7a:	15 97       	sbiw	r26, 0x05	; 5
     f7c:	3e c0       	rjmp	.+124    	; 0xffa <gc_execute_line+0x768>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
     f7e:	2c 84       	ldd	r2, Y+12	; 0x0c
     f80:	3d 84       	ldd	r3, Y+13	; 0x0d
     f82:	4e 84       	ldd	r4, Y+14	; 0x0e
     f84:	5f 84       	ldd	r5, Y+15	; 0x0f
     f86:	68 88       	ldd	r6, Y+16	; 0x10
     f88:	79 88       	ldd	r7, Y+17	; 0x11
     f8a:	8a 88       	ldd	r8, Y+18	; 0x12
     f8c:	9b 88       	ldd	r9, Y+19	; 0x13
     f8e:	ec 88       	ldd	r14, Y+20	; 0x14
     f90:	fd 88       	ldd	r15, Y+21	; 0x15
     f92:	0e 89       	ldd	r16, Y+22	; 0x16
     f94:	1f 89       	ldd	r17, Y+23	; 0x17
     f96:	a8 8c       	ldd	r10, Y+24	; 0x18
     f98:	b9 8c       	ldd	r11, Y+25	; 0x19
     f9a:	ca 8c       	ldd	r12, Y+26	; 0x1a
     f9c:	db 8c       	ldd	r13, Y+27	; 0x1b
     f9e:	60 91 02 02 	lds	r22, 0x0202
     fa2:	66 23       	and	r22, r22
     fa4:	61 f4       	brne	.+24     	; 0xfbe <gc_execute_line+0x72c>
     fa6:	f0 91 0a 02 	lds	r31, 0x020A
     faa:	fd a7       	std	Y+45, r31	; 0x2d
     fac:	80 91 0b 02 	lds	r24, 0x020B
     fb0:	8e a7       	std	Y+46, r24	; 0x2e
     fb2:	90 91 0c 02 	lds	r25, 0x020C
     fb6:	9f a7       	std	Y+47, r25	; 0x2f
     fb8:	a0 91 0d 02 	lds	r26, 0x020D
     fbc:	a8 ab       	std	Y+48, r26	; 0x30
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <gc_execute_line+0x72e>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <gc_execute_line+0x730>
     fc2:	ed b7       	in	r30, 0x3d	; 61
     fc4:	fe b7       	in	r31, 0x3e	; 62
     fc6:	31 96       	adiw	r30, 0x01	; 1
     fc8:	fa ab       	std	Y+50, r31	; 0x32
     fca:	e9 ab       	std	Y+49, r30	; 0x31
     fcc:	2d a5       	ldd	r18, Y+45	; 0x2d
     fce:	3e a5       	ldd	r19, Y+46	; 0x2e
     fd0:	4f a5       	ldd	r20, Y+47	; 0x2f
     fd2:	58 a9       	ldd	r21, Y+48	; 0x30
     fd4:	c9 01       	movw	r24, r18
     fd6:	da 01       	movw	r26, r20
     fd8:	ed b7       	in	r30, 0x3d	; 61
     fda:	fe b7       	in	r31, 0x3e	; 62
     fdc:	81 83       	std	Z+1, r24	; 0x01
     fde:	92 83       	std	Z+2, r25	; 0x02
     fe0:	a3 83       	std	Z+3, r26	; 0x03
     fe2:	b4 83       	std	Z+4, r27	; 0x04
     fe4:	a9 a9       	ldd	r26, Y+49	; 0x31
     fe6:	ba a9       	ldd	r27, Y+50	; 0x32
     fe8:	14 96       	adiw	r26, 0x04	; 4
     fea:	6c 93       	st	X, r22
     fec:	14 97       	sbiw	r26, 0x04	; 4
     fee:	15 96       	adiw	r26, 0x05	; 5
     ff0:	1c 92       	st	X, r1
     ff2:	c2 01       	movw	r24, r4
     ff4:	b1 01       	movw	r22, r2
     ff6:	a4 01       	movw	r20, r8
     ff8:	93 01       	movw	r18, r6
     ffa:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <plan_buffer_line>
     ffe:	ed b7       	in	r30, 0x3d	; 61
    1000:	fe b7       	in	r31, 0x3e	; 62
    1002:	36 96       	adiw	r30, 0x06	; 6
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	fe bf       	out	0x3e, r31	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	ed bf       	out	0x3d, r30	; 61
    100e:	12 c0       	rjmp	.+36     	; 0x1034 <gc_execute_line+0x7a2>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1010:	6c 85       	ldd	r22, Y+12	; 0x0c
    1012:	7d 85       	ldd	r23, Y+13	; 0x0d
    1014:	8e 85       	ldd	r24, Y+14	; 0x0e
    1016:	9f 85       	ldd	r25, Y+15	; 0x0f
    1018:	28 89       	ldd	r18, Y+16	; 0x10
    101a:	39 89       	ldd	r19, Y+17	; 0x11
    101c:	4a 89       	ldd	r20, Y+18	; 0x12
    101e:	5b 89       	ldd	r21, Y+19	; 0x13
    1020:	ec 88       	ldd	r14, Y+20	; 0x14
    1022:	fd 88       	ldd	r15, Y+21	; 0x15
    1024:	0e 89       	ldd	r16, Y+22	; 0x16
    1026:	1f 89       	ldd	r17, Y+23	; 0x17
    1028:	a8 8c       	ldd	r10, Y+24	; 0x18
    102a:	b9 8c       	ldd	r11, Y+25	; 0x19
    102c:	ca 8c       	ldd	r12, Y+26	; 0x1a
    102e:	db 8c       	ldd	r13, Y+27	; 0x1b
    1030:	0e 94 0a 0a 	call	0x1414	; 0x1414 <plan_set_current>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    1034:	a2 e1       	ldi	r26, 0x12	; 18
    1036:	b2 e0       	ldi	r27, 0x02	; 2
    1038:	fe 01       	movw	r30, r28
    103a:	3c 96       	adiw	r30, 0x0c	; 12
    103c:	80 e1       	ldi	r24, 0x10	; 16
    103e:	01 90       	ld	r0, Z+
    1040:	0d 92       	st	X+, r0
    1042:	81 50       	subi	r24, 0x01	; 1
    1044:	e1 f7       	brne	.-8      	; 0x103e <gc_execute_line+0x7ac>

  return(gc.status_code);
    1046:	80 91 00 02 	lds	r24, 0x0200
    104a:	01 c0       	rjmp	.+2      	; 0x104e <gc_execute_line+0x7bc>
    104c:	83 e0       	ldi	r24, 0x03	; 3
}
    104e:	e2 96       	adiw	r28, 0x32	; 50
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	df 90       	pop	r13
    1068:	cf 90       	pop	r12
    106a:	bf 90       	pop	r11
    106c:	af 90       	pop	r10
    106e:	9f 90       	pop	r9
    1070:	8f 90       	pop	r8
    1072:	7f 90       	pop	r7
    1074:	6f 90       	pop	r6
    1076:	5f 90       	pop	r5
    1078:	4f 90       	pop	r4
    107a:	3f 90       	pop	r3
    107c:	2f 90       	pop	r2
    107e:	08 95       	ret

00001080 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	79 01       	movw	r14, r18
    1092:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    1094:	5f 77       	andi	r21, 0x7F	; 127
    1096:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    109a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <atan>
    109e:	5b 01       	movw	r10, r22
    10a0:	6c 01       	movw	r12, r24
  if (y>0) {
    10a2:	c8 01       	movw	r24, r16
    10a4:	b7 01       	movw	r22, r14
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__gesf2>
    10b2:	18 16       	cp	r1, r24
    10b4:	cc f0       	brlt	.+50     	; 0x10e8 <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
    10b6:	c6 01       	movw	r24, r12
    10b8:	b5 01       	movw	r22, r10
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__gesf2>
    10c6:	18 16       	cp	r1, r24
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <theta+0x54>
    {
      return(M_PI-theta);
    10ca:	6b ed       	ldi	r22, 0xDB	; 219
    10cc:	7f e0       	ldi	r23, 0x0F	; 15
    10ce:	89 e4       	ldi	r24, 0x49	; 73
    10d0:	90 e4       	ldi	r25, 0x40	; 64
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <theta+0x5c>
    } else {
      return(-M_PI-theta);
    10d4:	6b ed       	ldi	r22, 0xDB	; 219
    10d6:	7f e0       	ldi	r23, 0x0F	; 15
    10d8:	89 e4       	ldi	r24, 0x49	; 73
    10da:	90 ec       	ldi	r25, 0xC0	; 192
    10dc:	a6 01       	movw	r20, r12
    10de:	95 01       	movw	r18, r10
    10e0:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__subsf3>
    10e4:	5b 01       	movw	r10, r22
    10e6:	6c 01       	movw	r12, r24
    }
  }
}
    10e8:	b5 01       	movw	r22, r10
    10ea:	c6 01       	movw	r24, r12
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	08 95       	ret

000010fe <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  sp_init();        
    10fe:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <sp_init>
  settings_init();  
    1102:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <settings_init>
  plan_init();      
    1106:	0e 94 a7 0a 	call	0x154e	; 0x154e <plan_init>
  st_init();        
    110a:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <st_init>
  limits_init();
    110e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <limits_init>
  spindle_init();   
    1112:	0e 94 06 14 	call	0x280c	; 0x280c <spindle_init>
  coolant_init();
    1116:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <coolant_init>
  atc_init();
    111a:	0e 94 94 1a 	call	0x3528	; 0x3528 <atc_init>
  head_init();
    111e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <head_init>
  vacuum_init();
    1122:	0e 94 a1 1b 	call	0x3742	; 0x3742 <vacuum_init>
  panel_init();
    1126:	0e 94 41 1b 	call	0x3682	; 0x3682 <panel_init>
  gc_init();
    112a:	0e 94 0b 04 	call	0x816	; 0x816 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    112e:	83 ed       	ldi	r24, 0xD3	; 211
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    1136:	83 b7       	in	r24, 0x33	; 51
    1138:	81 60       	ori	r24, 0x01	; 1
    113a:	83 bf       	out	0x33, r24	; 51
    113c:	88 95       	sleep
    113e:	83 b7       	in	r24, 0x33	; 51
    1140:	8e 7f       	andi	r24, 0xFE	; 254
    1142:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
    1144:	0e 94 79 11 	call	0x22f2	; 0x22f2 <sp_process>
    1148:	f6 cf       	rjmp	.-20     	; 0x1136 <main+0x38>

0000114a <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    114a:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <st_go_home>
}
    114e:	08 95       	ret

00001150 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	7b 01       	movw	r14, r22
    1162:	8c 01       	movw	r16, r24
  st_synchronize();
    1164:	0e 94 11 16 	call	0x2c22	; 0x2c22 <st_synchronize>
  _delay_ms(milliseconds);
    1168:	c8 01       	movw	r24, r16
    116a:	b7 01       	movw	r22, r14
    116c:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__floatunsisf>
    1170:	5b 01       	movw	r10, r22
    1172:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	4a e7       	ldi	r20, 0x7A	; 122
    117a:	55 e4       	ldi	r21, 0x45	; 69
    117c:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1180:	7b 01       	movw	r14, r22
    1182:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 9d 1c 	call	0x393a	; 0x393a <__cmpsf2>
    1190:	88 23       	and	r24, r24
    1192:	1c f4       	brge	.+6      	; 0x119a <mc_dwell+0x4a>
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	24 c0       	rjmp	.+72     	; 0x11e2 <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    119a:	c8 01       	movw	r24, r16
    119c:	b7 01       	movw	r22, r14
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__gesf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	b4 f4       	brge	.+44     	; 0x11da <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	c6 01       	movw	r24, r12
    11b0:	b5 01       	movw	r22, r10
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    11be:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11c2:	80 e9       	ldi	r24, 0x90	; 144
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <mc_dwell+0x82>
    11c8:	fc 01       	movw	r30, r24
    11ca:	31 97       	sbiw	r30, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ce:	61 50       	subi	r22, 0x01	; 1
    11d0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d2:	61 15       	cp	r22, r1
    11d4:	71 05       	cpc	r23, r1
    11d6:	c1 f7       	brne	.-16     	; 0x11c8 <mc_dwell+0x78>
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11da:	c8 01       	movw	r24, r16
    11dc:	b7 01       	movw	r22, r14
    11de:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fixunssfsi>
    11e2:	cb 01       	movw	r24, r22
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <mc_dwell+0x94>
}
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	08 95       	ret

000011fa <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    11fa:	fc 01       	movw	r30, r24
    11fc:	60 91 2a 05 	lds	r22, 0x052A
    1200:	70 91 2b 05 	lds	r23, 0x052B
    1204:	80 91 2c 05 	lds	r24, 0x052C
    1208:	90 91 2d 05 	lds	r25, 0x052D
    120c:	21 a5       	ldd	r18, Z+41	; 0x29
    120e:	32 a5       	ldd	r19, Z+42	; 0x2a
    1210:	43 a5       	ldd	r20, Z+43	; 0x2b
    1212:	54 a5       	ldd	r21, Z+44	; 0x2c
    1214:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    1218:	08 95       	ret

0000121a <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    121a:	80 91 a9 03 	lds	r24, 0x03A9
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	08 95       	ret

00001222 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1222:	20 91 95 03 	lds	r18, 0x0395
    1226:	30 91 96 03 	lds	r19, 0x0396
    122a:	80 91 97 03 	lds	r24, 0x0397
    122e:	90 91 98 03 	lds	r25, 0x0398
    1232:	28 17       	cp	r18, r24
    1234:	39 07       	cpc	r19, r25
    1236:	69 f0       	breq	.+26     	; 0x1252 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1238:	80 91 97 03 	lds	r24, 0x0397
    123c:	90 91 98 03 	lds	r25, 0x0398
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	65 e0       	ldi	r22, 0x05	; 5
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodhi4>
    124a:	90 93 98 03 	sts	0x0398, r25
    124e:	80 93 97 03 	sts	0x0397, r24
    1252:	08 95       	ret

00001254 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1254:	20 91 95 03 	lds	r18, 0x0395
    1258:	30 91 96 03 	lds	r19, 0x0396
    125c:	80 91 97 03 	lds	r24, 0x0397
    1260:	90 91 98 03 	lds	r25, 0x0398
    1264:	28 17       	cp	r18, r24
    1266:	39 07       	cpc	r19, r25
    1268:	19 f4       	brne	.+6      	; 0x1270 <plan_get_current_block+0x1c>
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	0f c0       	rjmp	.+30     	; 0x128e <plan_get_current_block+0x3a>
  return(&block_buffer[block_buffer_tail]);
    1270:	20 91 97 03 	lds	r18, 0x0397
    1274:	30 91 98 03 	lds	r19, 0x0398
    1278:	89 e4       	ldi	r24, 0x49	; 73
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	28 9f       	mul	r18, r24
    127e:	a0 01       	movw	r20, r0
    1280:	29 9f       	mul	r18, r25
    1282:	50 0d       	add	r21, r0
    1284:	38 9f       	mul	r19, r24
    1286:	50 0d       	add	r21, r0
    1288:	11 24       	eor	r1, r1
    128a:	48 5d       	subi	r20, 0xD8	; 216
    128c:	5d 4f       	sbci	r21, 0xFD	; 253
}
    128e:	ca 01       	movw	r24, r20
    1290:	08 95       	ret

00001292 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1292:	4f 92       	push	r4
    1294:	5f 92       	push	r5
    1296:	6f 92       	push	r6
    1298:	7f 92       	push	r7
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
    12b4:	4b 01       	movw	r8, r22
  if(!current) { return; }
    12b6:	61 15       	cp	r22, r1
    12b8:	71 05       	cpc	r23, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <planner_forward_pass_kernel+0x2c>
    12bc:	5e c0       	rjmp	.+188    	; 0x137a <planner_forward_pass_kernel+0xe8>
  if(previous) {
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <planner_forward_pass_kernel+0x32>
    12c2:	5b c0       	rjmp	.+182    	; 0x137a <planner_forward_pass_kernel+0xe8>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    12c4:	e9 a8       	ldd	r14, Y+49	; 0x31
    12c6:	fa a8       	ldd	r15, Y+50	; 0x32
    12c8:	0b a9       	ldd	r16, Y+51	; 0x33
    12ca:	1c a9       	ldd	r17, Y+52	; 0x34
    12cc:	fb 01       	movw	r30, r22
    12ce:	41 a8       	ldd	r4, Z+49	; 0x31
    12d0:	52 a8       	ldd	r5, Z+50	; 0x32
    12d2:	63 a8       	ldd	r6, Z+51	; 0x33
    12d4:	74 a8       	ldd	r7, Z+52	; 0x34
    12d6:	c8 01       	movw	r24, r16
    12d8:	b7 01       	movw	r22, r14
    12da:	a3 01       	movw	r20, r6
    12dc:	92 01       	movw	r18, r4
    12de:	0e 94 9d 1c 	call	0x393a	; 0x393a <__cmpsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	0c f0       	brlt	.+2      	; 0x12e8 <planner_forward_pass_kernel+0x56>
    12e6:	49 c0       	rjmp	.+146    	; 0x137a <planner_forward_pass_kernel+0xe8>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    12e8:	f4 01       	movw	r30, r8
    12ea:	a1 a4       	ldd	r10, Z+41	; 0x29
    12ec:	b2 a4       	ldd	r11, Z+42	; 0x2a
    12ee:	c3 a4       	ldd	r12, Z+43	; 0x2b
    12f0:	d4 a4       	ldd	r13, Z+44	; 0x2c
    12f2:	c6 01       	movw	r24, r12
    12f4:	b5 01       	movw	r22, r10
    12f6:	a8 01       	movw	r20, r16
    12f8:	97 01       	movw	r18, r14
    12fa:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1302:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1306:	7b 01       	movw	r14, r22
    1308:	8c 01       	movw	r16, r24
    130a:	20 91 26 05 	lds	r18, 0x0526
    130e:	30 91 27 05 	lds	r19, 0x0527
    1312:	40 91 28 05 	lds	r20, 0x0528
    1316:	50 91 29 05 	lds	r21, 0x0529
    131a:	50 58       	subi	r21, 0x80	; 128
    131c:	ca 01       	movw	r24, r20
    131e:	b9 01       	movw	r22, r18
    1320:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e7       	ldi	r20, 0x70	; 112
    132a:	52 e4       	ldi	r21, 0x42	; 66
    132c:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e7       	ldi	r20, 0x70	; 112
    1336:	52 ec       	ldi	r21, 0xC2	; 194
    1338:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    133c:	2d a5       	ldd	r18, Y+45	; 0x2d
    133e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1340:	4f a5       	ldd	r20, Y+47	; 0x2f
    1342:	58 a9       	ldd	r21, Y+48	; 0x30
    1344:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	c8 01       	movw	r24, r16
    134e:	b7 01       	movw	r22, r14
    1350:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1354:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    1360:	7b 01       	movw	r14, r22
    1362:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1364:	a3 01       	movw	r20, r6
    1366:	92 01       	movw	r18, r4
    1368:	0e 94 9d 1c 	call	0x393a	; 0x393a <__cmpsf2>
    136c:	88 23       	and	r24, r24
    136e:	2c f4       	brge	.+10     	; 0x137a <planner_forward_pass_kernel+0xe8>
        current->entry_factor = max_entry_factor;
    1370:	f4 01       	movw	r30, r8
    1372:	e1 aa       	std	Z+49, r14	; 0x31
    1374:	f2 aa       	std	Z+50, r15	; 0x32
    1376:	03 ab       	std	Z+51, r16	; 0x33
    1378:	14 ab       	std	Z+52, r17	; 0x34
      }
    }
  }
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	bf 90       	pop	r11
    138c:	af 90       	pop	r10
    138e:	9f 90       	pop	r9
    1390:	8f 90       	pop	r8
    1392:	7f 90       	pop	r7
    1394:	6f 90       	pop	r6
    1396:	5f 90       	pop	r5
    1398:	4f 90       	pop	r4
    139a:	08 95       	ret

0000139c <planner_forward_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    13a8:	80 91 97 03 	lds	r24, 0x0397
    13ac:	90 91 98 03 	lds	r25, 0x0398
    13b0:	48 2f       	mov	r20, r24
    13b2:	c0 e0       	ldi	r28, 0x00	; 0
    13b4:	d0 e0       	ldi	r29, 0x00	; 0
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <planner_forward_pass+0x48>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    13bc:	89 e4       	ldi	r24, 0x49	; 73
    13be:	48 02       	muls	r20, r24
    13c0:	80 01       	movw	r16, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	08 5d       	subi	r16, 0xD8	; 216
    13c6:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    13c8:	c9 01       	movw	r24, r18
    13ca:	be 01       	movw	r22, r28
    13cc:	a8 01       	movw	r20, r16
    13ce:	0e 94 49 09 	call	0x1292	; 0x1292 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    13d2:	c7 01       	movw	r24, r14
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	65 e0       	ldi	r22, 0x05	; 5
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodhi4>
    13de:	48 2f       	mov	r20, r24
    13e0:	9e 01       	movw	r18, r28
    13e2:	e8 01       	movw	r28, r16
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    13e4:	e4 2e       	mov	r14, r20
    13e6:	ff 24       	eor	r15, r15
    13e8:	e7 fc       	sbrc	r14, 7
    13ea:	f0 94       	com	r15
    13ec:	80 91 95 03 	lds	r24, 0x0395
    13f0:	90 91 96 03 	lds	r25, 0x0396
    13f4:	e8 16       	cp	r14, r24
    13f6:	f9 06       	cpc	r15, r25
    13f8:	09 f7       	brne	.-62     	; 0x13bc <planner_forward_pass+0x20>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    13fa:	c9 01       	movw	r24, r18
    13fc:	be 01       	movw	r22, r28
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	0e 94 49 09 	call	0x1292	; 0x1292 <planner_forward_pass_kernel>
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	08 95       	ret

00001414 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1414:	2f 92       	push	r2
    1416:	3f 92       	push	r3
    1418:	4f 92       	push	r4
    141a:	5f 92       	push	r5
    141c:	6f 92       	push	r6
    141e:	7f 92       	push	r7
    1420:	8f 92       	push	r8
    1422:	9f 92       	push	r9
    1424:	af 92       	push	r10
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	3b 01       	movw	r6, r22
    1436:	4c 01       	movw	r8, r24
    1438:	19 01       	movw	r2, r18
    143a:	2a 01       	movw	r4, r20
	st_synchronize();
    143c:	0e 94 11 16 	call	0x2c22	; 0x2c22 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1440:	c4 01       	movw	r24, r8
    1442:	b3 01       	movw	r22, r6
    1444:	20 91 08 05 	lds	r18, 0x0508
    1448:	30 91 09 05 	lds	r19, 0x0509
    144c:	40 91 0a 05 	lds	r20, 0x050A
    1450:	50 91 0b 05 	lds	r21, 0x050B
    1454:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1458:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    145c:	29 e9       	ldi	r18, 0x99	; 153
    145e:	82 2e       	mov	r8, r18
    1460:	23 e0       	ldi	r18, 0x03	; 3
    1462:	92 2e       	mov	r9, r18
    1464:	60 93 99 03 	sts	0x0399, r22
    1468:	70 93 9a 03 	sts	0x039A, r23
    146c:	80 93 9b 03 	sts	0x039B, r24
    1470:	90 93 9c 03 	sts	0x039C, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1474:	c2 01       	movw	r24, r4
    1476:	b1 01       	movw	r22, r2
    1478:	20 91 0c 05 	lds	r18, 0x050C
    147c:	30 91 0d 05 	lds	r19, 0x050D
    1480:	40 91 0e 05 	lds	r20, 0x050E
    1484:	50 91 0f 05 	lds	r21, 0x050F
    1488:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    148c:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    1490:	f4 01       	movw	r30, r8
    1492:	34 96       	adiw	r30, 0x04	; 4
    1494:	60 93 9d 03 	sts	0x039D, r22
    1498:	71 83       	std	Z+1, r23	; 0x01
    149a:	82 83       	std	Z+2, r24	; 0x02
    149c:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    149e:	c8 01       	movw	r24, r16
    14a0:	b7 01       	movw	r22, r14
    14a2:	20 91 10 05 	lds	r18, 0x0510
    14a6:	30 91 11 05 	lds	r19, 0x0511
    14aa:	40 91 12 05 	lds	r20, 0x0512
    14ae:	50 91 13 05 	lds	r21, 0x0513
    14b2:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    14b6:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    14ba:	f4 01       	movw	r30, r8
    14bc:	38 96       	adiw	r30, 0x08	; 8
    14be:	60 93 a1 03 	sts	0x03A1, r22
    14c2:	71 83       	std	Z+1, r23	; 0x01
    14c4:	82 83       	std	Z+2, r24	; 0x02
    14c6:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    14c8:	c6 01       	movw	r24, r12
    14ca:	b5 01       	movw	r22, r10
    14cc:	20 91 14 05 	lds	r18, 0x0514
    14d0:	30 91 15 05 	lds	r19, 0x0515
    14d4:	40 91 16 05 	lds	r20, 0x0516
    14d8:	50 91 17 05 	lds	r21, 0x0517
    14dc:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    14e0:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    14e4:	2c e0       	ldi	r18, 0x0C	; 12
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	82 0e       	add	r8, r18
    14ea:	93 1e       	adc	r9, r19
    14ec:	60 93 a5 03 	sts	0x03A5, r22
    14f0:	f4 01       	movw	r30, r8
    14f2:	71 83       	std	Z+1, r23	; 0x01
    14f4:	82 83       	std	Z+2, r24	; 0x02
    14f6:	93 83       	std	Z+3, r25	; 0x03
}
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	df 90       	pop	r13
    1502:	cf 90       	pop	r12
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
    1508:	9f 90       	pop	r9
    150a:	8f 90       	pop	r8
    150c:	7f 90       	pop	r7
    150e:	6f 90       	pop	r6
    1510:	5f 90       	pop	r5
    1512:	4f 90       	pop	r4
    1514:	3f 90       	pop	r3
    1516:	2f 90       	pop	r2
    1518:	08 95       	ret

0000151a <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	80 91 a9 03 	lds	r24, 0x03A9
    1526:	81 11       	cpse	r24, r1
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	20 97       	sbiw	r28, 0x00	; 0
    152e:	09 f0       	breq	.+2      	; 0x1532 <plan_set_acceleration_manager_enabled+0x18>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	98 17       	cp	r25, r24
    1534:	49 f0       	breq	.+18     	; 0x1548 <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    1536:	0e 94 11 16 	call	0x2c22	; 0x2c22 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    153a:	10 92 a9 03 	sts	0x03A9, r1
    153e:	cd 2b       	or	r28, r29
    1540:	19 f0       	breq	.+6      	; 0x1548 <plan_set_acceleration_manager_enabled+0x2e>
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 a9 03 	sts	0x03A9, r24
  }
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    154e:	10 92 96 03 	sts	0x0396, r1
    1552:	10 92 95 03 	sts	0x0395, r1
  block_buffer_tail = 0;
    1556:	10 92 98 03 	sts	0x0398, r1
    155a:	10 92 97 03 	sts	0x0397, r1
  plan_set_acceleration_manager_enabled(TRUE);
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 8d 0a 	call	0x151a	; 0x151a <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1566:	80 e1       	ldi	r24, 0x10	; 16
    1568:	e9 e9       	ldi	r30, 0x99	; 153
    156a:	f3 e0       	ldi	r31, 0x03	; 3
    156c:	df 01       	movw	r26, r30
    156e:	1d 92       	st	X+, r1
    1570:	8a 95       	dec	r24
    1572:	e9 f7       	brne	.-6      	; 0x156e <plan_init+0x20>
}
    1574:	08 95       	ret

00001576 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1576:	2f 92       	push	r2
    1578:	3f 92       	push	r3
    157a:	4f 92       	push	r4
    157c:	5f 92       	push	r5
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <planner_reverse_pass_kernel+0x26>
    159c:	00 d0       	rcall	.+0      	; 0x159e <planner_reverse_pass_kernel+0x28>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	8c 01       	movw	r16, r24
    15a4:	7e 83       	std	Y+6, r23	; 0x06
    15a6:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    15a8:	67 2b       	or	r22, r23
    15aa:	09 f4       	brne	.+2      	; 0x15ae <planner_reverse_pass_kernel+0x38>
    15ac:	07 c1       	rjmp	.+526    	; 0x17bc <planner_reverse_pass_kernel+0x246>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    15ae:	41 15       	cp	r20, r1
    15b0:	51 05       	cpc	r21, r1
    15b2:	61 f0       	breq	.+24     	; 0x15cc <planner_reverse_pass_kernel+0x56>
    exit_factor = next->entry_factor;
    15b4:	da 01       	movw	r26, r20
    15b6:	d1 96       	adiw	r26, 0x31	; 49
    15b8:	8d 91       	ld	r24, X+
    15ba:	9d 91       	ld	r25, X+
    15bc:	0d 90       	ld	r0, X+
    15be:	bc 91       	ld	r27, X
    15c0:	a0 2d       	mov	r26, r0
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	ab 83       	std	Y+3, r26	; 0x03
    15c8:	bc 83       	std	Y+4, r27	; 0x04
    15ca:	08 c0       	rjmp	.+16     	; 0x15dc <planner_reverse_pass_kernel+0x66>
  } else {
    exit_factor = factor_for_safe_speed(current);
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <factor_for_safe_speed>
    15d4:	69 83       	std	Y+1, r22	; 0x01
    15d6:	7a 83       	std	Y+2, r23	; 0x02
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    15dc:	01 15       	cp	r16, r1
    15de:	11 05       	cpc	r17, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <planner_reverse_pass_kernel+0x6e>
    15e2:	e0 c0       	rjmp	.+448    	; 0x17a4 <planner_reverse_pass_kernel+0x22e>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    15e4:	f8 01       	movw	r30, r16
    15e6:	61 8d       	ldd	r22, Z+25	; 0x19
    15e8:	72 8d       	ldd	r23, Z+26	; 0x1a
    15ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    15ec:	94 8d       	ldd	r25, Z+28	; 0x1c
    15ee:	ad 81       	ldd	r26, Y+5	; 0x05
    15f0:	be 81       	ldd	r27, Y+6	; 0x06
    15f2:	59 96       	adiw	r26, 0x19	; 25
    15f4:	2d 91       	ld	r18, X+
    15f6:	3d 91       	ld	r19, X+
    15f8:	4d 91       	ld	r20, X+
    15fa:	5c 91       	ld	r21, X
    15fc:	5c 97       	sbiw	r26, 0x1c	; 28
    15fe:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__subsf3>
    1602:	9b 01       	movw	r18, r22
    1604:	ac 01       	movw	r20, r24
    1606:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    160a:	1b 01       	movw	r2, r22
    160c:	2c 01       	movw	r4, r24
    160e:	f8 01       	movw	r30, r16
    1610:	65 8d       	ldd	r22, Z+29	; 0x1d
    1612:	76 8d       	ldd	r23, Z+30	; 0x1e
    1614:	87 8d       	ldd	r24, Z+31	; 0x1f
    1616:	90 a1       	ldd	r25, Z+32	; 0x20
    1618:	ad 81       	ldd	r26, Y+5	; 0x05
    161a:	be 81       	ldd	r27, Y+6	; 0x06
    161c:	5d 96       	adiw	r26, 0x1d	; 29
    161e:	2d 91       	ld	r18, X+
    1620:	3d 91       	ld	r19, X+
    1622:	4d 91       	ld	r20, X+
    1624:	5c 91       	ld	r21, X
    1626:	90 97       	sbiw	r26, 0x20	; 32
    1628:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__subsf3>
    162c:	9b 01       	movw	r18, r22
    162e:	ac 01       	movw	r20, r24
    1630:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1634:	3b 01       	movw	r6, r22
    1636:	4c 01       	movw	r8, r24
    1638:	f8 01       	movw	r30, r16
    163a:	61 a1       	ldd	r22, Z+33	; 0x21
    163c:	72 a1       	ldd	r23, Z+34	; 0x22
    163e:	83 a1       	ldd	r24, Z+35	; 0x23
    1640:	94 a1       	ldd	r25, Z+36	; 0x24
    1642:	ad 81       	ldd	r26, Y+5	; 0x05
    1644:	be 81       	ldd	r27, Y+6	; 0x06
    1646:	91 96       	adiw	r26, 0x21	; 33
    1648:	2d 91       	ld	r18, X+
    164a:	3d 91       	ld	r19, X+
    164c:	4d 91       	ld	r20, X+
    164e:	5c 91       	ld	r21, X
    1650:	94 97       	sbiw	r26, 0x24	; 36
    1652:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__subsf3>
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    165e:	5b 01       	movw	r10, r22
    1660:	6c 01       	movw	r12, r24
    1662:	f8 01       	movw	r30, r16
    1664:	65 a1       	ldd	r22, Z+37	; 0x25
    1666:	76 a1       	ldd	r23, Z+38	; 0x26
    1668:	87 a1       	ldd	r24, Z+39	; 0x27
    166a:	90 a5       	ldd	r25, Z+40	; 0x28
    166c:	ad 81       	ldd	r26, Y+5	; 0x05
    166e:	be 81       	ldd	r27, Y+6	; 0x06
    1670:	95 96       	adiw	r26, 0x25	; 37
    1672:	2d 91       	ld	r18, X+
    1674:	3d 91       	ld	r19, X+
    1676:	4d 91       	ld	r20, X+
    1678:	5c 91       	ld	r21, X
    167a:	98 97       	sbiw	r26, 0x28	; 40
    167c:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__subsf3>
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1688:	7b 01       	movw	r14, r22
    168a:	8c 01       	movw	r16, r24
    168c:	c2 01       	movw	r24, r4
    168e:	b1 01       	movw	r22, r2
    1690:	a4 01       	movw	r20, r8
    1692:	93 01       	movw	r18, r6
    1694:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1698:	a6 01       	movw	r20, r12
    169a:	95 01       	movw	r18, r10
    169c:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    16a0:	a8 01       	movw	r20, r16
    16a2:	97 01       	movw	r18, r14
    16a4:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    16a8:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <sqrt>
    16ac:	5b 01       	movw	r10, r22
    16ae:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    16b0:	e0 90 2a 05 	lds	r14, 0x052A
    16b4:	f0 90 2b 05 	lds	r15, 0x052B
    16b8:	00 91 2c 05 	lds	r16, 0x052C
    16bc:	10 91 2d 05 	lds	r17, 0x052D
    16c0:	a8 01       	movw	r20, r16
    16c2:	97 01       	movw	r18, r14
    16c4:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__gesf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	5c f0       	brlt	.+22     	; 0x16e2 <planner_reverse_pass_kernel+0x16c>
    16cc:	0f 2e       	mov	r0, r31
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	6f 2e       	mov	r6, r31
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	7f 2e       	mov	r7, r31
    16d6:	f0 e8       	ldi	r31, 0x80	; 128
    16d8:	8f 2e       	mov	r8, r31
    16da:	ff e3       	ldi	r31, 0x3F	; 63
    16dc:	9f 2e       	mov	r9, r31
    16de:	f0 2d       	mov	r31, r0
    16e0:	08 c0       	rjmp	.+16     	; 0x16f2 <planner_reverse_pass_kernel+0x17c>
      entry_factor = (settings.max_jerk/jerk);
    16e2:	c8 01       	movw	r24, r16
    16e4:	b7 01       	movw	r22, r14
    16e6:	a6 01       	movw	r20, r12
    16e8:	95 01       	movw	r18, r10
    16ea:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    16ee:	3b 01       	movw	r6, r22
    16f0:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    16f2:	c4 01       	movw	r24, r8
    16f4:	b3 01       	movw	r22, r6
    16f6:	29 81       	ldd	r18, Y+1	; 0x01
    16f8:	3a 81       	ldd	r19, Y+2	; 0x02
    16fa:	4b 81       	ldd	r20, Y+3	; 0x03
    16fc:	5c 81       	ldd	r21, Y+4	; 0x04
    16fe:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__gesf2>
    1702:	18 16       	cp	r1, r24
    1704:	0c f0       	brlt	.+2      	; 0x1708 <planner_reverse_pass_kernel+0x192>
    1706:	54 c0       	rjmp	.+168    	; 0x17b0 <planner_reverse_pass_kernel+0x23a>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1708:	ed 81       	ldd	r30, Y+5	; 0x05
    170a:	fe 81       	ldd	r31, Y+6	; 0x06
    170c:	a1 a4       	ldd	r10, Z+41	; 0x29
    170e:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1710:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1712:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1714:	c6 01       	movw	r24, r12
    1716:	b5 01       	movw	r22, r10
    1718:	29 81       	ldd	r18, Y+1	; 0x01
    171a:	3a 81       	ldd	r19, Y+2	; 0x02
    171c:	4b 81       	ldd	r20, Y+3	; 0x03
    171e:	5c 81       	ldd	r21, Y+4	; 0x04
    1720:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1728:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    172c:	7b 01       	movw	r14, r22
    172e:	8c 01       	movw	r16, r24
    1730:	20 91 26 05 	lds	r18, 0x0526
    1734:	30 91 27 05 	lds	r19, 0x0527
    1738:	40 91 28 05 	lds	r20, 0x0528
    173c:	50 91 29 05 	lds	r21, 0x0529
    1740:	50 58       	subi	r21, 0x80	; 128
    1742:	ca 01       	movw	r24, r20
    1744:	b9 01       	movw	r22, r18
    1746:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e7       	ldi	r20, 0x70	; 112
    1750:	52 e4       	ldi	r21, 0x42	; 66
    1752:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e7       	ldi	r20, 0x70	; 112
    175c:	52 ec       	ldi	r21, 0xC2	; 194
    175e:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1762:	ad 81       	ldd	r26, Y+5	; 0x05
    1764:	be 81       	ldd	r27, Y+6	; 0x06
    1766:	9d 96       	adiw	r26, 0x2d	; 45
    1768:	2d 91       	ld	r18, X+
    176a:	3d 91       	ld	r19, X+
    176c:	4d 91       	ld	r20, X+
    176e:	5c 91       	ld	r21, X
    1770:	d0 97       	sbiw	r26, 0x30	; 48
    1772:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1776:	9b 01       	movw	r18, r22
    1778:	ac 01       	movw	r20, r24
    177a:	c8 01       	movw	r24, r16
    177c:	b7 01       	movw	r22, r14
    177e:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1782:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1786:	a6 01       	movw	r20, r12
    1788:	95 01       	movw	r18, r10
    178a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    178e:	7b 01       	movw	r14, r22
    1790:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1792:	a4 01       	movw	r20, r8
    1794:	93 01       	movw	r18, r6
    1796:	0e 94 9d 1c 	call	0x393a	; 0x393a <__cmpsf2>
    179a:	88 23       	and	r24, r24
    179c:	4c f4       	brge	.+18     	; 0x17b0 <planner_reverse_pass_kernel+0x23a>
    179e:	37 01       	movw	r6, r14
    17a0:	48 01       	movw	r8, r16
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <planner_reverse_pass_kernel+0x23a>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <factor_for_safe_speed>
    17ac:	3b 01       	movw	r6, r22
    17ae:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    17b0:	ed 81       	ldd	r30, Y+5	; 0x05
    17b2:	fe 81       	ldd	r31, Y+6	; 0x06
    17b4:	61 aa       	std	Z+49, r6	; 0x31
    17b6:	72 aa       	std	Z+50, r7	; 0x32
    17b8:	83 aa       	std	Z+51, r8	; 0x33
    17ba:	94 aa       	std	Z+52, r9	; 0x34
}
    17bc:	26 96       	adiw	r28, 0x06	; 6
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	9f 90       	pop	r9
    17de:	8f 90       	pop	r8
    17e0:	7f 90       	pop	r7
    17e2:	6f 90       	pop	r6
    17e4:	5f 90       	pop	r5
    17e6:	4f 90       	pop	r4
    17e8:	3f 90       	pop	r3
    17ea:	2f 90       	pop	r2
    17ec:	08 95       	ret

000017ee <planner_reverse_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    17f8:	80 91 95 03 	lds	r24, 0x0395
    17fc:	90 91 96 03 	lds	r25, 0x0396
    1800:	f8 2e       	mov	r15, r24
    1802:	c0 e0       	ldi	r28, 0x00	; 0
    1804:	d0 e0       	ldi	r29, 0x00	; 0
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	12 c0       	rjmp	.+36     	; 0x1830 <planner_reverse_pass+0x42>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    180c:	fa 94       	dec	r15
    if(block_index < 0) {
    180e:	f7 fe       	sbrs	r15, 7
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <planner_reverse_pass+0x28>
    1812:	34 e0       	ldi	r19, 0x04	; 4
    1814:	f3 2e       	mov	r15, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1816:	8f 2d       	mov	r24, r15
    1818:	99 e4       	ldi	r25, 0x49	; 73
    181a:	89 02       	muls	r24, r25
    181c:	80 01       	movw	r16, r0
    181e:	11 24       	eor	r1, r1
    1820:	08 5d       	subi	r16, 0xD8	; 216
    1822:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1824:	c8 01       	movw	r24, r16
    1826:	be 01       	movw	r22, r28
    1828:	0e 94 bb 0a 	call	0x1576	; 0x1576 <planner_reverse_pass_kernel>
    182c:	ae 01       	movw	r20, r28
    182e:	e8 01       	movw	r28, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1830:	20 91 97 03 	lds	r18, 0x0397
    1834:	30 91 98 03 	lds	r19, 0x0398
    1838:	8f 2d       	mov	r24, r15
    183a:	99 27       	eor	r25, r25
    183c:	87 fd       	sbrc	r24, 7
    183e:	90 95       	com	r25
    1840:	82 17       	cp	r24, r18
    1842:	93 07       	cpc	r25, r19
    1844:	19 f7       	brne	.-58     	; 0x180c <planner_reverse_pass+0x1e>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	be 01       	movw	r22, r28
    184c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <planner_reverse_pass_kernel>
}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	08 95       	ret

0000185c <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    185c:	2f 92       	push	r2
    185e:	3f 92       	push	r3
    1860:	4f 92       	push	r4
    1862:	5f 92       	push	r5
    1864:	6f 92       	push	r6
    1866:	7f 92       	push	r7
    1868:	8f 92       	push	r8
    186a:	9f 92       	push	r9
    186c:	af 92       	push	r10
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	62 97       	sbiw	r28, 0x12	; 18
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	9a 8b       	std	Y+18, r25	; 0x12
    1892:	89 8b       	std	Y+17, r24	; 0x11
    1894:	6a 01       	movw	r12, r20
    1896:	7b 01       	movw	r14, r22
    1898:	18 01       	movw	r2, r16
    189a:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    189c:	fc 01       	movw	r30, r24
    189e:	65 89       	ldd	r22, Z+21	; 0x15
    18a0:	76 89       	ldd	r23, Z+22	; 0x16
    18a2:	87 89       	ldd	r24, Z+23	; 0x17
    18a4:	90 8d       	ldd	r25, Z+24	; 0x18
    18a6:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__floatunsisf>
    18aa:	3b 01       	movw	r6, r22
    18ac:	4c 01       	movw	r8, r24
    18ae:	a7 01       	movw	r20, r14
    18b0:	96 01       	movw	r18, r12
    18b2:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    18b6:	0e 94 8a 1c 	call	0x3914	; 0x3914 <ceil>
    18ba:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fixunssfsi>
    18be:	7b 01       	movw	r14, r22
    18c0:	8c 01       	movw	r16, r24
    18c2:	e9 89       	ldd	r30, Y+17	; 0x11
    18c4:	fa 89       	ldd	r31, Y+18	; 0x12
    18c6:	65 ab       	std	Z+53, r22	; 0x35
    18c8:	76 ab       	std	Z+54, r23	; 0x36
    18ca:	87 ab       	std	Z+55, r24	; 0x37
    18cc:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    18ce:	c4 01       	movw	r24, r8
    18d0:	b3 01       	movw	r22, r6
    18d2:	a2 01       	movw	r20, r4
    18d4:	91 01       	movw	r18, r2
    18d6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    18da:	0e 94 8a 1c 	call	0x3914	; 0x3914 <ceil>
    18de:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fixunssfsi>
    18e2:	1b 01       	movw	r2, r22
    18e4:	2c 01       	movw	r4, r24
    18e6:	e9 89       	ldd	r30, Y+17	; 0x11
    18e8:	fa 89       	ldd	r31, Y+18	; 0x12
    18ea:	61 af       	std	Z+57, r22	; 0x39
    18ec:	72 af       	std	Z+58, r23	; 0x3a
    18ee:	83 af       	std	Z+59, r24	; 0x3b
    18f0:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    18f2:	fd 96       	adiw	r30, 0x3d	; 61
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	fd 97       	sbiw	r30, 0x3d	; 61
    18fe:	fa 8b       	std	Y+18, r31	; 0x12
    1900:	e9 8b       	std	Y+17, r30	; 0x11
    1902:	28 e2       	ldi	r18, 0x28	; 40
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__mulsi3>
    190e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e7       	ldi	r20, 0x70	; 112
    1918:	52 e4       	ldi	r21, 0x42	; 66
    191a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    191e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
    1922:	5b 01       	movw	r10, r22
    1924:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1926:	c8 01       	movw	r24, r16
    1928:	b7 01       	movw	r22, r14
    192a:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__floatunsisf>
    192e:	7b 01       	movw	r14, r22
    1930:	8c 01       	movw	r16, r24
    1932:	c6 01       	movw	r24, r12
    1934:	b5 01       	movw	r22, r10
    1936:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    193a:	6d 83       	std	Y+5, r22	; 0x05
    193c:	7e 83       	std	Y+6, r23	; 0x06
    193e:	8f 83       	std	Y+7, r24	; 0x07
    1940:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1942:	c4 01       	movw	r24, r8
    1944:	b3 01       	movw	r22, r6
    1946:	a4 01       	movw	r20, r8
    1948:	93 01       	movw	r18, r6
    194a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    194e:	3b 01       	movw	r6, r22
    1950:	4c 01       	movw	r8, r24
    1952:	c8 01       	movw	r24, r16
    1954:	b7 01       	movw	r22, r14
    1956:	a8 01       	movw	r20, r16
    1958:	97 01       	movw	r18, r14
    195a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    195e:	69 87       	std	Y+9, r22	; 0x09
    1960:	7a 87       	std	Y+10, r23	; 0x0a
    1962:	8b 87       	std	Y+11, r24	; 0x0b
    1964:	9c 87       	std	Y+12, r25	; 0x0c
    1966:	6d 81       	ldd	r22, Y+5	; 0x05
    1968:	7e 81       	ldd	r23, Y+6	; 0x06
    196a:	8f 81       	ldd	r24, Y+7	; 0x07
    196c:	98 85       	ldd	r25, Y+8	; 0x08
    196e:	9b 01       	movw	r18, r22
    1970:	ac 01       	movw	r20, r24
    1972:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1976:	6d 87       	std	Y+13, r22	; 0x0d
    1978:	7e 87       	std	Y+14, r23	; 0x0e
    197a:	8f 87       	std	Y+15, r24	; 0x0f
    197c:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    197e:	c4 01       	movw	r24, r8
    1980:	b3 01       	movw	r22, r6
    1982:	29 85       	ldd	r18, Y+9	; 0x09
    1984:	3a 85       	ldd	r19, Y+10	; 0x0a
    1986:	4b 85       	ldd	r20, Y+11	; 0x0b
    1988:	5c 85       	ldd	r21, Y+12	; 0x0c
    198a:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__subsf3>
    198e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1990:	3e 85       	ldd	r19, Y+14	; 0x0e
    1992:	4f 85       	ldd	r20, Y+15	; 0x0f
    1994:	58 89       	ldd	r21, Y+16	; 0x10
    1996:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    199a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <ceil>
    199e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
    19a2:	69 83       	std	Y+1, r22	; 0x01
    19a4:	7a 83       	std	Y+2, r23	; 0x02
    19a6:	8b 83       	std	Y+3, r24	; 0x03
    19a8:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    19aa:	c2 01       	movw	r24, r4
    19ac:	b1 01       	movw	r22, r2
    19ae:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__floatunsisf>
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    19b6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    19ba:	1b 01       	movw	r2, r22
    19bc:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    19be:	a4 01       	movw	r20, r8
    19c0:	93 01       	movw	r18, r6
    19c2:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__subsf3>
    19c6:	7b 01       	movw	r14, r22
    19c8:	8c 01       	movw	r16, r24
    19ca:	d0 94       	com	r13
    19cc:	c0 94       	com	r12
    19ce:	b0 94       	com	r11
    19d0:	a0 94       	com	r10
    19d2:	a1 1c       	adc	r10, r1
    19d4:	b1 1c       	adc	r11, r1
    19d6:	c1 1c       	adc	r12, r1
    19d8:	d1 1c       	adc	r13, r1
    19da:	c6 01       	movw	r24, r12
    19dc:	b5 01       	movw	r22, r10
    19de:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    19ea:	9b 01       	movw	r18, r22
    19ec:	ac 01       	movw	r20, r24
    19ee:	c8 01       	movw	r24, r16
    19f0:	b7 01       	movw	r22, r14
    19f2:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    19f6:	0e 94 77 1d 	call	0x3aee	; 0x3aee <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    19fa:	e9 89       	ldd	r30, Y+17	; 0x11
    19fc:	fa 89       	ldd	r31, Y+18	; 0x12
    19fe:	a1 88       	ldd	r10, Z+17	; 0x11
    1a00:	b2 88       	ldd	r11, Z+18	; 0x12
    1a02:	c3 88       	ldd	r12, Z+19	; 0x13
    1a04:	d4 88       	ldd	r13, Z+20	; 0x14
    1a06:	86 01       	movw	r16, r12
    1a08:	75 01       	movw	r14, r10
    1a0a:	29 81       	ldd	r18, Y+1	; 0x01
    1a0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a0e:	4b 81       	ldd	r20, Y+3	; 0x03
    1a10:	5c 81       	ldd	r21, Y+4	; 0x04
    1a12:	e2 1a       	sub	r14, r18
    1a14:	f3 0a       	sbc	r15, r19
    1a16:	04 0b       	sbc	r16, r20
    1a18:	15 0b       	sbc	r17, r21
    1a1a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
    1a1e:	a8 01       	movw	r20, r16
    1a20:	97 01       	movw	r18, r14
    1a22:	26 1b       	sub	r18, r22
    1a24:	37 0b       	sbc	r19, r23
    1a26:	48 0b       	sbc	r20, r24
    1a28:	59 0b       	sbc	r21, r25
    1a2a:	da 01       	movw	r26, r20
    1a2c:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1a2e:	57 ff       	sbrs	r21, 7
    1a30:	34 c0       	rjmp	.+104    	; 0x1a9a <calculate_trapezoid_for_block+0x23e>
    accelerate_steps = ceil(
    1a32:	c6 01       	movw	r24, r12
    1a34:	b5 01       	movw	r22, r10
    1a36:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    1a3a:	9b 01       	movw	r18, r22
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a40:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a44:	98 89       	ldd	r25, Y+16	; 0x10
    1a46:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1a4a:	29 85       	ldd	r18, Y+9	; 0x09
    1a4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a50:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a52:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__subsf3>
    1a56:	a2 01       	movw	r20, r4
    1a58:	91 01       	movw	r18, r2
    1a5a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1a5e:	7b 01       	movw	r14, r22
    1a60:	8c 01       	movw	r16, r24
    1a62:	6d 81       	ldd	r22, Y+5	; 0x05
    1a64:	7e 81       	ldd	r23, Y+6	; 0x06
    1a66:	8f 81       	ldd	r24, Y+7	; 0x07
    1a68:	98 85       	ldd	r25, Y+8	; 0x08
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	50 e4       	ldi	r21, 0x40	; 64
    1a72:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1a76:	9b 01       	movw	r18, r22
    1a78:	ac 01       	movw	r20, r24
    1a7a:	c8 01       	movw	r24, r16
    1a7c:	b7 01       	movw	r22, r14
    1a7e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    1a82:	0e 94 8a 1c 	call	0x3914	; 0x3914 <ceil>
    1a86:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
    1a8a:	69 83       	std	Y+1, r22	; 0x01
    1a8c:	7a 83       	std	Y+2, r23	; 0x02
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1a9a:	49 89       	ldd	r20, Y+17	; 0x11
    1a9c:	5a 89       	ldd	r21, Y+18	; 0x12
    1a9e:	4f 5b       	subi	r20, 0xBF	; 191
    1aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa2:	fa 01       	movw	r30, r20
    1aa4:	29 81       	ldd	r18, Y+1	; 0x01
    1aa6:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa8:	4b 81       	ldd	r20, Y+3	; 0x03
    1aaa:	5c 81       	ldd	r21, Y+4	; 0x04
    1aac:	21 93       	st	Z+, r18
    1aae:	31 93       	st	Z+, r19
    1ab0:	41 93       	st	Z+, r20
    1ab2:	51 93       	st	Z+, r21
    1ab4:	fa 8b       	std	Y+18, r31	; 0x12
    1ab6:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1ab8:	82 0f       	add	r24, r18
    1aba:	93 1f       	adc	r25, r19
    1abc:	a4 1f       	adc	r26, r20
    1abe:	b5 1f       	adc	r27, r21
    1ac0:	80 83       	st	Z, r24
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	a2 83       	std	Z+2, r26	; 0x02
    1ac6:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1ac8:	62 96       	adiw	r28, 0x12	; 18
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	bf 90       	pop	r11
    1ae6:	af 90       	pop	r10
    1ae8:	9f 90       	pop	r9
    1aea:	8f 90       	pop	r8
    1aec:	7f 90       	pop	r7
    1aee:	6f 90       	pop	r6
    1af0:	5f 90       	pop	r5
    1af2:	4f 90       	pop	r4
    1af4:	3f 90       	pop	r3
    1af6:	2f 90       	pop	r2
    1af8:	08 95       	ret

00001afa <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1b0a:	80 91 97 03 	lds	r24, 0x0397
    1b0e:	90 91 98 03 	lds	r25, 0x0398
    1b12:	28 2f       	mov	r18, r24
    1b14:	c0 e0       	ldi	r28, 0x00	; 0
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	1e c0       	rjmp	.+60     	; 0x1b56 <planner_recalculate_trapezoids+0x5c>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    1b1a:	89 e4       	ldi	r24, 0x49	; 73
    1b1c:	28 02       	muls	r18, r24
    1b1e:	70 01       	movw	r14, r0
    1b20:	11 24       	eor	r1, r1
    1b22:	e8 e2       	ldi	r30, 0x28	; 40
    1b24:	f2 e0       	ldi	r31, 0x02	; 2
    1b26:	ee 0e       	add	r14, r30
    1b28:	ff 1e       	adc	r15, r31
    if (current) {
    1b2a:	20 97       	sbiw	r28, 0x00	; 0
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <planner_recalculate_trapezoids+0x4c>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1b2e:	49 a9       	ldd	r20, Y+49	; 0x31
    1b30:	5a a9       	ldd	r21, Y+50	; 0x32
    1b32:	6b a9       	ldd	r22, Y+51	; 0x33
    1b34:	7c a9       	ldd	r23, Y+52	; 0x34
    1b36:	f7 01       	movw	r30, r14
    1b38:	01 a9       	ldd	r16, Z+49	; 0x31
    1b3a:	12 a9       	ldd	r17, Z+50	; 0x32
    1b3c:	23 a9       	ldd	r18, Z+51	; 0x33
    1b3e:	34 a9       	ldd	r19, Z+52	; 0x34
    1b40:	ce 01       	movw	r24, r28
    1b42:	0e 94 2e 0c 	call	0x185c	; 0x185c <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1b46:	c6 01       	movw	r24, r12
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	65 e0       	ldi	r22, 0x05	; 5
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodhi4>
    1b52:	28 2f       	mov	r18, r24
    1b54:	e7 01       	movw	r28, r14
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1b56:	c2 2e       	mov	r12, r18
    1b58:	dd 24       	eor	r13, r13
    1b5a:	c7 fc       	sbrc	r12, 7
    1b5c:	d0 94       	com	r13
    1b5e:	80 91 95 03 	lds	r24, 0x0395
    1b62:	90 91 96 03 	lds	r25, 0x0396
    1b66:	c8 16       	cp	r12, r24
    1b68:	d9 06       	cpc	r13, r25
    1b6a:	b9 f6       	brne	.-82     	; 0x1b1a <planner_recalculate_trapezoids+0x20>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <factor_for_safe_speed>
    1b72:	8b 01       	movw	r16, r22
    1b74:	9c 01       	movw	r18, r24
    1b76:	49 a9       	ldd	r20, Y+49	; 0x31
    1b78:	5a a9       	ldd	r21, Y+50	; 0x32
    1b7a:	6b a9       	ldd	r22, Y+51	; 0x33
    1b7c:	7c a9       	ldd	r23, Y+52	; 0x34
    1b7e:	ce 01       	movw	r24, r28
    1b80:	0e 94 2e 0c 	call	0x185c	; 0x185c <calculate_trapezoid_for_block>
}
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	df 90       	pop	r13
    1b92:	cf 90       	pop	r12
    1b94:	08 95       	ret

00001b96 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    1b96:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <planner_reverse_pass>
  planner_forward_pass();
    1b9a:	0e 94 ce 09 	call	0x139c	; 0x139c <planner_forward_pass>
  planner_recalculate_trapezoids();
    1b9e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <planner_recalculate_trapezoids>
}
    1ba2:	08 95       	ret

00001ba4 <plan_buffer_line>:


// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
    1ba4:	2f 92       	push	r2
    1ba6:	3f 92       	push	r3
    1ba8:	4f 92       	push	r4
    1baa:	5f 92       	push	r5
    1bac:	6f 92       	push	r6
    1bae:	7f 92       	push	r7
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	e4 97       	sbiw	r28, 0x34	; 52
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	2f a3       	std	Y+39, r18	; 0x27
    1bda:	38 a7       	std	Y+40, r19	; 0x28
    1bdc:	49 a7       	std	Y+41, r20	; 0x29
    1bde:	5a a7       	std	Y+42, r21	; 0x2a
    1be0:	eb a6       	std	Y+43, r14	; 0x2b
    1be2:	fc a6       	std	Y+44, r15	; 0x2c
    1be4:	0d a7       	std	Y+45, r16	; 0x2d
    1be6:	1e a7       	std	Y+46, r17	; 0x2e
    1be8:	af a6       	std	Y+47, r10	; 0x2f
    1bea:	b8 aa       	std	Y+48, r11	; 0x30
    1bec:	c9 aa       	std	Y+49, r12	; 0x31
    1bee:	da aa       	std	Y+50, r13	; 0x32
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1bf0:	20 91 08 05 	lds	r18, 0x0508
    1bf4:	30 91 09 05 	lds	r19, 0x0509
    1bf8:	40 91 0a 05 	lds	r20, 0x050A
    1bfc:	50 91 0b 05 	lds	r21, 0x050B
    1c00:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1c04:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    1c08:	7b 01       	movw	r14, r22
    1c0a:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1c0c:	20 91 0c 05 	lds	r18, 0x050C
    1c10:	30 91 0d 05 	lds	r19, 0x050D
    1c14:	40 91 0e 05 	lds	r20, 0x050E
    1c18:	50 91 0f 05 	lds	r21, 0x050F
    1c1c:	2b a3       	std	Y+35, r18	; 0x23
    1c1e:	3c a3       	std	Y+36, r19	; 0x24
    1c20:	4d a3       	std	Y+37, r20	; 0x25
    1c22:	5e a3       	std	Y+38, r21	; 0x26
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1c24:	20 90 10 05 	lds	r2, 0x0510
    1c28:	30 90 11 05 	lds	r3, 0x0511
    1c2c:	40 90 12 05 	lds	r4, 0x0512
    1c30:	50 90 13 05 	lds	r5, 0x0513
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1c34:	a0 90 14 05 	lds	r10, 0x0514
    1c38:	b0 90 15 05 	lds	r11, 0x0515
    1c3c:	c0 90 16 05 	lds	r12, 0x0516
    1c40:	d0 90 17 05 	lds	r13, 0x0517
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    1c44:	80 91 95 03 	lds	r24, 0x0395
    1c48:	90 91 96 03 	lds	r25, 0x0396
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	65 e0       	ldi	r22, 0x05	; 5
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodhi4>
    1c56:	8b ab       	std	Y+51, r24	; 0x33
    1c58:	9c ab       	std	Y+52, r25	; 0x34
    1c5a:	07 c0       	rjmp	.+14     	; 0x1c6a <plan_buffer_line+0xc6>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    1c5c:	83 b7       	in	r24, 0x33	; 51
    1c5e:	81 60       	ori	r24, 0x01	; 1
    1c60:	83 bf       	out	0x33, r24	; 51
    1c62:	88 95       	sleep
    1c64:	83 b7       	in	r24, 0x33	; 51
    1c66:	8e 7f       	andi	r24, 0xFE	; 254
    1c68:	83 bf       	out	0x33, r24	; 51
    1c6a:	80 91 97 03 	lds	r24, 0x0397
    1c6e:	90 91 98 03 	lds	r25, 0x0398
    1c72:	4b a9       	ldd	r20, Y+51	; 0x33
    1c74:	5c a9       	ldd	r21, Y+52	; 0x34
    1c76:	84 17       	cp	r24, r20
    1c78:	95 07       	cpc	r25, r21
    1c7a:	81 f3       	breq	.-32     	; 0x1c5c <plan_buffer_line+0xb8>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1c7c:	20 91 95 03 	lds	r18, 0x0395
    1c80:	30 91 96 03 	lds	r19, 0x0396
    1c84:	89 e4       	ldi	r24, 0x49	; 73
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	28 9f       	mul	r18, r24
    1c8a:	d0 01       	movw	r26, r0
    1c8c:	29 9f       	mul	r18, r25
    1c8e:	b0 0d       	add	r27, r0
    1c90:	38 9f       	mul	r19, r24
    1c92:	b0 0d       	add	r27, r0
    1c94:	11 24       	eor	r1, r1
    1c96:	a8 5d       	subi	r26, 0xD8	; 216
    1c98:	bd 4f       	sbci	r27, 0xFD	; 253
    1c9a:	ba a3       	std	Y+34, r27	; 0x22
    1c9c:	a9 a3       	std	Y+33, r26	; 0x21
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1c9e:	80 91 99 03 	lds	r24, 0x0399
    1ca2:	90 91 9a 03 	lds	r25, 0x039A
    1ca6:	a0 91 9b 03 	lds	r26, 0x039B
    1caa:	b0 91 9c 03 	lds	r27, 0x039C
    1cae:	37 01       	movw	r6, r14
    1cb0:	48 01       	movw	r8, r16
    1cb2:	68 1a       	sub	r6, r24
    1cb4:	79 0a       	sbc	r7, r25
    1cb6:	8a 0a       	sbc	r8, r26
    1cb8:	9b 0a       	sbc	r9, r27
    1cba:	97 fe       	sbrs	r9, 7
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <plan_buffer_line+0x12a>
    1cbe:	90 94       	com	r9
    1cc0:	80 94       	com	r8
    1cc2:	70 94       	com	r7
    1cc4:	60 94       	com	r6
    1cc6:	61 1c       	adc	r6, r1
    1cc8:	71 1c       	adc	r7, r1
    1cca:	81 1c       	adc	r8, r1
    1ccc:	91 1c       	adc	r9, r1
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1cce:	6f a5       	ldd	r22, Y+47	; 0x2f
    1cd0:	78 a9       	ldd	r23, Y+48	; 0x30
    1cd2:	89 a9       	ldd	r24, Y+49	; 0x31
    1cd4:	9a a9       	ldd	r25, Y+50	; 0x32
    1cd6:	a6 01       	movw	r20, r12
    1cd8:	95 01       	movw	r18, r10
    1cda:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1cde:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    1ce2:	6d 87       	std	Y+13, r22	; 0x0d
    1ce4:	7e 87       	std	Y+14, r23	; 0x0e
    1ce6:	8f 87       	std	Y+15, r24	; 0x0f
    1ce8:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1cea:	6b a5       	ldd	r22, Y+43	; 0x2b
    1cec:	7c a5       	ldd	r23, Y+44	; 0x2c
    1cee:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cf0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf2:	a2 01       	movw	r20, r4
    1cf4:	91 01       	movw	r18, r2
    1cf6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1cfa:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    1cfe:	69 87       	std	Y+9, r22	; 0x09
    1d00:	7a 87       	std	Y+10, r23	; 0x0a
    1d02:	8b 87       	std	Y+11, r24	; 0x0b
    1d04:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1d06:	6f a1       	ldd	r22, Y+39	; 0x27
    1d08:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0e:	2b a1       	ldd	r18, Y+35	; 0x23
    1d10:	3c a1       	ldd	r19, Y+36	; 0x24
    1d12:	4d a1       	ldd	r20, Y+37	; 0x25
    1d14:	5e a1       	ldd	r21, Y+38	; 0x26
    1d16:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1d1a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    1d1e:	6d 83       	std	Y+5, r22	; 0x05
    1d20:	7e 83       	std	Y+6, r23	; 0x06
    1d22:	8f 83       	std	Y+7, r24	; 0x07
    1d24:	98 87       	std	Y+8, r25	; 0x08
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1d26:	e9 82       	std	Y+1, r14	; 0x01
    1d28:	fa 82       	std	Y+2, r15	; 0x02
    1d2a:	0b 83       	std	Y+3, r16	; 0x03
    1d2c:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1d2e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1d30:	fa a1       	ldd	r31, Y+34	; 0x22
    1d32:	60 82       	st	Z, r6
    1d34:	71 82       	std	Z+1, r7	; 0x01
    1d36:	82 82       	std	Z+2, r8	; 0x02
    1d38:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    1d3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d3e:	4f 81       	ldd	r20, Y+7	; 0x07
    1d40:	58 85       	ldd	r21, Y+8	; 0x08
    1d42:	80 91 9d 03 	lds	r24, 0x039D
    1d46:	90 91 9e 03 	lds	r25, 0x039E
    1d4a:	a0 91 9f 03 	lds	r26, 0x039F
    1d4e:	b0 91 a0 03 	lds	r27, 0x03A0
    1d52:	28 1b       	sub	r18, r24
    1d54:	39 0b       	sbc	r19, r25
    1d56:	4a 0b       	sbc	r20, r26
    1d58:	5b 0b       	sbc	r21, r27
    1d5a:	57 ff       	sbrs	r21, 7
    1d5c:	07 c0       	rjmp	.+14     	; 0x1d6c <plan_buffer_line+0x1c8>
    1d5e:	50 95       	com	r21
    1d60:	40 95       	com	r20
    1d62:	30 95       	com	r19
    1d64:	21 95       	neg	r18
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	4f 4f       	sbci	r20, 0xFF	; 255
    1d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6c:	a9 a1       	ldd	r26, Y+33	; 0x21
    1d6e:	ba a1       	ldd	r27, Y+34	; 0x22
    1d70:	14 96       	adiw	r26, 0x04	; 4
    1d72:	2d 93       	st	X+, r18
    1d74:	3d 93       	st	X+, r19
    1d76:	4d 93       	st	X+, r20
    1d78:	5c 93       	st	X, r21
    1d7a:	17 97       	sbiw	r26, 0x07	; 7
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    1d7c:	a0 90 a1 03 	lds	r10, 0x03A1
    1d80:	b0 90 a2 03 	lds	r11, 0x03A2
    1d84:	c0 90 a3 03 	lds	r12, 0x03A3
    1d88:	d0 90 a4 03 	lds	r13, 0x03A4
    1d8c:	89 85       	ldd	r24, Y+9	; 0x09
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d92:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d94:	8a 19       	sub	r24, r10
    1d96:	9b 09       	sbc	r25, r11
    1d98:	ac 09       	sbc	r26, r12
    1d9a:	bd 09       	sbc	r27, r13
    1d9c:	b7 ff       	sbrs	r27, 7
    1d9e:	07 c0       	rjmp	.+14     	; 0x1dae <plan_buffer_line+0x20a>
    1da0:	b0 95       	com	r27
    1da2:	a0 95       	com	r26
    1da4:	90 95       	com	r25
    1da6:	81 95       	neg	r24
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	af 4f       	sbci	r26, 0xFF	; 255
    1dac:	bf 4f       	sbci	r27, 0xFF	; 255
    1dae:	e9 a1       	ldd	r30, Y+33	; 0x21
    1db0:	fa a1       	ldd	r31, Y+34	; 0x22
    1db2:	80 87       	std	Z+8, r24	; 0x08
    1db4:	91 87       	std	Z+9, r25	; 0x09
    1db6:	a2 87       	std	Z+10, r26	; 0x0a
    1db8:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    1dba:	60 90 a5 03 	lds	r6, 0x03A5
    1dbe:	70 90 a6 03 	lds	r7, 0x03A6
    1dc2:	80 90 a7 03 	lds	r8, 0x03A7
    1dc6:	90 90 a8 03 	lds	r9, 0x03A8
    1dca:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dcc:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dce:	4f 85       	ldd	r20, Y+15	; 0x0f
    1dd0:	58 89       	ldd	r21, Y+16	; 0x10
    1dd2:	26 19       	sub	r18, r6
    1dd4:	37 09       	sbc	r19, r7
    1dd6:	48 09       	sbc	r20, r8
    1dd8:	59 09       	sbc	r21, r9
    1dda:	57 ff       	sbrs	r21, 7
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <plan_buffer_line+0x248>
    1dde:	50 95       	com	r21
    1de0:	40 95       	com	r20
    1de2:	30 95       	com	r19
    1de4:	21 95       	neg	r18
    1de6:	3f 4f       	sbci	r19, 0xFF	; 255
    1de8:	4f 4f       	sbci	r20, 0xFF	; 255
    1dea:	5f 4f       	sbci	r21, 0xFF	; 255
    1dec:	a9 a1       	ldd	r26, Y+33	; 0x21
    1dee:	ba a1       	ldd	r27, Y+34	; 0x22
    1df0:	1c 96       	adiw	r26, 0x0c	; 12
    1df2:	2d 93       	st	X+, r18
    1df4:	3d 93       	st	X+, r19
    1df6:	4d 93       	st	X+, r20
    1df8:	5c 93       	st	X, r21
    1dfa:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    1dfc:	18 96       	adiw	r26, 0x08	; 8
    1dfe:	ed 90       	ld	r14, X+
    1e00:	fd 90       	ld	r15, X+
    1e02:	0d 91       	ld	r16, X+
    1e04:	1c 91       	ld	r17, X
    1e06:	1b 97       	sbiw	r26, 0x0b	; 11
    1e08:	fd 01       	movw	r30, r26
    1e0a:	84 81       	ldd	r24, Z+4	; 0x04
    1e0c:	95 81       	ldd	r25, Z+5	; 0x05
    1e0e:	a6 81       	ldd	r26, Z+6	; 0x06
    1e10:	b7 81       	ldd	r27, Z+7	; 0x07
    1e12:	8e 15       	cp	r24, r14
    1e14:	9f 05       	cpc	r25, r15
    1e16:	a0 07       	cpc	r26, r16
    1e18:	b1 07       	cpc	r27, r17
    1e1a:	10 f4       	brcc	.+4      	; 0x1e20 <plan_buffer_line+0x27c>
    1e1c:	d8 01       	movw	r26, r16
    1e1e:	c7 01       	movw	r24, r14
    1e20:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e22:	fa a1       	ldd	r31, Y+34	; 0x22
    1e24:	e0 80       	ld	r14, Z
    1e26:	f1 80       	ldd	r15, Z+1	; 0x01
    1e28:	02 81       	ldd	r16, Z+2	; 0x02
    1e2a:	13 81       	ldd	r17, Z+3	; 0x03
    1e2c:	8e 15       	cp	r24, r14
    1e2e:	9f 05       	cpc	r25, r15
    1e30:	a0 07       	cpc	r26, r16
    1e32:	b1 07       	cpc	r27, r17
    1e34:	10 f4       	brcc	.+4      	; 0x1e3a <plan_buffer_line+0x296>
    1e36:	d8 01       	movw	r26, r16
    1e38:	c7 01       	movw	r24, r14
    1e3a:	82 17       	cp	r24, r18
    1e3c:	93 07       	cpc	r25, r19
    1e3e:	a4 07       	cpc	r26, r20
    1e40:	b5 07       	cpc	r27, r21
    1e42:	10 f4       	brcc	.+4      	; 0x1e48 <plan_buffer_line+0x2a4>
    1e44:	da 01       	movw	r26, r20
    1e46:	c9 01       	movw	r24, r18
    1e48:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e4a:	fa a1       	ldd	r31, Y+34	; 0x22
    1e4c:	81 8b       	std	Z+17, r24	; 0x11
    1e4e:	92 8b       	std	Z+18, r25	; 0x12
    1e50:	a3 8b       	std	Z+19, r26	; 0x13
    1e52:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	a1 05       	cpc	r26, r1
    1e58:	b1 05       	cpc	r27, r1
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <plan_buffer_line+0x2ba>
    1e5c:	31 c2       	rjmp	.+1122   	; 0x22c0 <__stack+0xc1>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    1e5e:	69 81       	ldd	r22, Y+1	; 0x01
    1e60:	7a 81       	ldd	r23, Y+2	; 0x02
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	20 91 99 03 	lds	r18, 0x0399
    1e6a:	30 91 9a 03 	lds	r19, 0x039A
    1e6e:	40 91 9b 03 	lds	r20, 0x039B
    1e72:	50 91 9c 03 	lds	r21, 0x039C
    1e76:	62 1b       	sub	r22, r18
    1e78:	73 0b       	sbc	r23, r19
    1e7a:	84 0b       	sbc	r24, r20
    1e7c:	95 0b       	sbc	r25, r21
    1e7e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    1e82:	20 91 08 05 	lds	r18, 0x0508
    1e86:	30 91 09 05 	lds	r19, 0x0509
    1e8a:	40 91 0a 05 	lds	r20, 0x050A
    1e8e:	50 91 0b 05 	lds	r21, 0x050B
    1e92:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    1e96:	6d 8f       	std	Y+29, r22	; 0x1d
    1e98:	7e 8f       	std	Y+30, r23	; 0x1e
    1e9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e9c:	98 a3       	std	Y+32, r25	; 0x20
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    1e9e:	6d 81       	ldd	r22, Y+5	; 0x05
    1ea0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ea2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea4:	98 85       	ldd	r25, Y+8	; 0x08
    1ea6:	20 91 9d 03 	lds	r18, 0x039D
    1eaa:	30 91 9e 03 	lds	r19, 0x039E
    1eae:	40 91 9f 03 	lds	r20, 0x039F
    1eb2:	50 91 a0 03 	lds	r21, 0x03A0
    1eb6:	62 1b       	sub	r22, r18
    1eb8:	73 0b       	sbc	r23, r19
    1eba:	84 0b       	sbc	r24, r20
    1ebc:	95 0b       	sbc	r25, r21
    1ebe:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    1ec2:	20 91 0c 05 	lds	r18, 0x050C
    1ec6:	30 91 0d 05 	lds	r19, 0x050D
    1eca:	40 91 0e 05 	lds	r20, 0x050E
    1ece:	50 91 0f 05 	lds	r21, 0x050F
    1ed2:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    1ed6:	69 8f       	std	Y+25, r22	; 0x19
    1ed8:	7a 8f       	std	Y+26, r23	; 0x1a
    1eda:	8b 8f       	std	Y+27, r24	; 0x1b
    1edc:	9c 8f       	std	Y+28, r25	; 0x1c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    1ede:	69 85       	ldd	r22, Y+9	; 0x09
    1ee0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ee2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ee4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ee6:	6a 19       	sub	r22, r10
    1ee8:	7b 09       	sbc	r23, r11
    1eea:	8c 09       	sbc	r24, r12
    1eec:	9d 09       	sbc	r25, r13
    1eee:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    1ef2:	20 91 10 05 	lds	r18, 0x0510
    1ef6:	30 91 11 05 	lds	r19, 0x0511
    1efa:	40 91 12 05 	lds	r20, 0x0512
    1efe:	50 91 13 05 	lds	r21, 0x0513
    1f02:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    1f06:	6d 8b       	std	Y+21, r22	; 0x15
    1f08:	7e 8b       	std	Y+22, r23	; 0x16
    1f0a:	8f 8b       	std	Y+23, r24	; 0x17
    1f0c:	98 8f       	std	Y+24, r25	; 0x18
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    1f0e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f10:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f14:	98 89       	ldd	r25, Y+16	; 0x10
    1f16:	66 19       	sub	r22, r6
    1f18:	77 09       	sbc	r23, r7
    1f1a:	88 09       	sbc	r24, r8
    1f1c:	99 09       	sbc	r25, r9
    1f1e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    1f22:	20 91 14 05 	lds	r18, 0x0514
    1f26:	30 91 15 05 	lds	r19, 0x0515
    1f2a:	40 91 16 05 	lds	r20, 0x0516
    1f2e:	50 91 17 05 	lds	r21, 0x0517
    1f32:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    1f36:	69 8b       	std	Y+17, r22	; 0x11
    1f38:	7a 8b       	std	Y+18, r23	; 0x12
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    1f3e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f40:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1f42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f44:	98 a1       	ldd	r25, Y+32	; 0x20
    1f46:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <square>
    1f4a:	3b 01       	movw	r6, r22
    1f4c:	4c 01       	movw	r8, r24
    1f4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f56:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <square>
    1f5a:	7b 01       	movw	r14, r22
    1f5c:	8c 01       	movw	r16, r24
    1f5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f60:	7e 89       	ldd	r23, Y+22	; 0x16
    1f62:	8f 89       	ldd	r24, Y+23	; 0x17
    1f64:	98 8d       	ldd	r25, Y+24	; 0x18
    1f66:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <square>
    1f6a:	5b 01       	movw	r10, r22
    1f6c:	6c 01       	movw	r12, r24
    1f6e:	69 89       	ldd	r22, Y+17	; 0x11
    1f70:	7a 89       	ldd	r23, Y+18	; 0x12
    1f72:	8b 89       	ldd	r24, Y+19	; 0x13
    1f74:	9c 89       	ldd	r25, Y+20	; 0x14
    1f76:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <square>
    1f7a:	1b 01       	movw	r2, r22
    1f7c:	2c 01       	movw	r4, r24
    1f7e:	c4 01       	movw	r24, r8
    1f80:	b3 01       	movw	r22, r6
    1f82:	a8 01       	movw	r20, r16
    1f84:	97 01       	movw	r18, r14
    1f86:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1f8a:	a6 01       	movw	r20, r12
    1f8c:	95 01       	movw	r18, r10
    1f8e:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1f92:	a2 01       	movw	r20, r4
    1f94:	91 01       	movw	r18, r2
    1f96:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__addsf3>
    1f9a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <sqrt>
    1f9e:	9b 01       	movw	r18, r22
    1fa0:	ac 01       	movw	r20, r24
    1fa2:	a9 a1       	ldd	r26, Y+33	; 0x21
    1fa4:	ba a1       	ldd	r27, Y+34	; 0x22
    1fa6:	9d 96       	adiw	r26, 0x2d	; 45
    1fa8:	6d 93       	st	X+, r22
    1faa:	7d 93       	st	X+, r23
    1fac:	8d 93       	st	X+, r24
    1fae:	9c 93       	st	X, r25
    1fb0:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    1fb2:	60 96       	adiw	r28, 0x10	; 16
    1fb4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fb6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fb8:	60 97       	sbiw	r28, 0x10	; 16
    1fba:	89 2b       	or	r24, r25
    1fbc:	89 f4       	brne	.+34     	; 0x1fe0 <plan_buffer_line+0x43c>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	2e 96       	adiw	r28, 0x0e	; 14
    1fc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fca:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fcc:	2e 97       	sbiw	r28, 0x0e	; 14
    1fce:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	34 e2       	ldi	r19, 0x24	; 36
    1fd6:	44 e7       	ldi	r20, 0x74	; 116
    1fd8:	59 e4       	ldi	r21, 0x49	; 73
    1fda:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    1fde:	0c c0       	rjmp	.+24     	; 0x1ff8 <plan_buffer_line+0x454>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    1fe0:	60 ec       	ldi	r22, 0xC0	; 192
    1fe2:	71 ee       	ldi	r23, 0xE1	; 225
    1fe4:	84 e6       	ldi	r24, 0x64	; 100
    1fe6:	9c e4       	ldi	r25, 0x4C	; 76
    1fe8:	2e 96       	adiw	r28, 0x0e	; 14
    1fea:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fec:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fee:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ff0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ff2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ff4:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    1ff8:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <lround>
    1ffc:	ac 01       	movw	r20, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	da 01       	movw	r26, r20
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2006:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__floatunsisf>
    200a:	9b 01       	movw	r18, r22
    200c:	ac 01       	movw	r20, r24
    200e:	60 ec       	ldi	r22, 0xC0	; 192
    2010:	71 ee       	ldi	r23, 0xE1	; 225
    2012:	84 e6       	ldi	r24, 0x64	; 100
    2014:	9c e4       	ldi	r25, 0x4C	; 76
    2016:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    201a:	7b 01       	movw	r14, r22
    201c:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    201e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2020:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2022:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2024:	98 a1       	ldd	r25, Y+32	; 0x20
    2026:	a8 01       	movw	r20, r16
    2028:	97 01       	movw	r18, r14
    202a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    202e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2030:	fa a1       	ldd	r31, Y+34	; 0x22
    2032:	61 8f       	std	Z+25, r22	; 0x19
    2034:	72 8f       	std	Z+26, r23	; 0x1a
    2036:	83 8f       	std	Z+27, r24	; 0x1b
    2038:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_y = delta_y_mm * multiplier;
    203a:	69 8d       	ldd	r22, Y+25	; 0x19
    203c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2042:	a8 01       	movw	r20, r16
    2044:	97 01       	movw	r18, r14
    2046:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    204a:	a9 a1       	ldd	r26, Y+33	; 0x21
    204c:	ba a1       	ldd	r27, Y+34	; 0x22
    204e:	5d 96       	adiw	r26, 0x1d	; 29
    2050:	6d 93       	st	X+, r22
    2052:	7d 93       	st	X+, r23
    2054:	8d 93       	st	X+, r24
    2056:	9c 93       	st	X, r25
    2058:	90 97       	sbiw	r26, 0x20	; 32
  block->speed_z = delta_z_mm * multiplier;
    205a:	6d 89       	ldd	r22, Y+21	; 0x15
    205c:	7e 89       	ldd	r23, Y+22	; 0x16
    205e:	8f 89       	ldd	r24, Y+23	; 0x17
    2060:	98 8d       	ldd	r25, Y+24	; 0x18
    2062:	a8 01       	movw	r20, r16
    2064:	97 01       	movw	r18, r14
    2066:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    206a:	e9 a1       	ldd	r30, Y+33	; 0x21
    206c:	fa a1       	ldd	r31, Y+34	; 0x22
    206e:	61 a3       	std	Z+33, r22	; 0x21
    2070:	72 a3       	std	Z+34, r23	; 0x22
    2072:	83 a3       	std	Z+35, r24	; 0x23
    2074:	94 a3       	std	Z+36, r25	; 0x24
  block->speed_c = delta_c_mm * multiplier;
    2076:	69 89       	ldd	r22, Y+17	; 0x11
    2078:	7a 89       	ldd	r23, Y+18	; 0x12
    207a:	8b 89       	ldd	r24, Y+19	; 0x13
    207c:	9c 89       	ldd	r25, Y+20	; 0x14
    207e:	a8 01       	movw	r20, r16
    2080:	97 01       	movw	r18, r14
    2082:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    2086:	a9 a1       	ldd	r26, Y+33	; 0x21
    2088:	ba a1       	ldd	r27, Y+34	; 0x22
    208a:	95 96       	adiw	r26, 0x25	; 37
    208c:	6d 93       	st	X+, r22
    208e:	7d 93       	st	X+, r23
    2090:	8d 93       	st	X+, r24
    2092:	9c 93       	st	X, r25
    2094:	98 97       	sbiw	r26, 0x28	; 40
  block->nominal_speed = block->millimeters * multiplier;
    2096:	9d 96       	adiw	r26, 0x2d	; 45
    2098:	6d 91       	ld	r22, X+
    209a:	7d 91       	ld	r23, X+
    209c:	8d 91       	ld	r24, X+
    209e:	9c 91       	ld	r25, X
    20a0:	d0 97       	sbiw	r26, 0x30	; 48
    20a2:	a8 01       	movw	r20, r16
    20a4:	97 01       	movw	r18, r14
    20a6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    20aa:	e9 a1       	ldd	r30, Y+33	; 0x21
    20ac:	fa a1       	ldd	r31, Y+34	; 0x22
    20ae:	61 a7       	std	Z+41, r22	; 0x29
    20b0:	72 a7       	std	Z+42, r23	; 0x2a
    20b2:	83 a7       	std	Z+43, r24	; 0x2b
    20b4:	94 a7       	std	Z+44, r25	; 0x2c
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    20b6:	61 89       	ldd	r22, Z+17	; 0x11
    20b8:	72 89       	ldd	r23, Z+18	; 0x12
    20ba:	83 89       	ldd	r24, Z+19	; 0x13
    20bc:	94 89       	ldd	r25, Z+20	; 0x14
    20be:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__floatsisf>
    20c2:	5b 01       	movw	r10, r22
    20c4:	6c 01       	movw	r12, r24
    20c6:	a8 01       	movw	r20, r16
    20c8:	97 01       	movw	r18, r14
    20ca:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    20ce:	0e 94 8a 1c 	call	0x3914	; 0x3914 <ceil>
    20d2:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fixunssfsi>
    20d6:	3b 01       	movw	r6, r22
    20d8:	4c 01       	movw	r8, r24
    20da:	a9 a1       	ldd	r26, Y+33	; 0x21
    20dc:	ba a1       	ldd	r27, Y+34	; 0x22
    20de:	55 96       	adiw	r26, 0x15	; 21
    20e0:	6d 93       	st	X+, r22
    20e2:	7d 93       	st	X+, r23
    20e4:	8d 93       	st	X+, r24
    20e6:	9c 93       	st	X, r25
    20e8:	58 97       	sbiw	r26, 0x18	; 24
  block->entry_factor = 0.0;
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e0       	ldi	r26, 0x00	; 0
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e9 a1       	ldd	r30, Y+33	; 0x21
    20f4:	fa a1       	ldd	r31, Y+34	; 0x22
    20f6:	81 ab       	std	Z+49, r24	; 0x31
    20f8:	92 ab       	std	Z+50, r25	; 0x32
    20fa:	a3 ab       	std	Z+51, r26	; 0x33
    20fc:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    20fe:	60 91 26 05 	lds	r22, 0x0526
    2102:	70 91 27 05 	lds	r23, 0x0527
    2106:	80 91 28 05 	lds	r24, 0x0528
    210a:	90 91 29 05 	lds	r25, 0x0529
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e7       	ldi	r20, 0x70	; 112
    2114:	52 e4       	ldi	r21, 0x42	; 66
    2116:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	52 e4       	ldi	r21, 0x42	; 66
    2122:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    2126:	7b 01       	movw	r14, r22
    2128:	8c 01       	movw	r16, r24
    212a:	a9 a1       	ldd	r26, Y+33	; 0x21
    212c:	ba a1       	ldd	r27, Y+34	; 0x22
    212e:	9d 96       	adiw	r26, 0x2d	; 45
    2130:	6d 91       	ld	r22, X+
    2132:	7d 91       	ld	r23, X+
    2134:	8d 91       	ld	r24, X+
    2136:	9c 91       	ld	r25, X
    2138:	d0 97       	sbiw	r26, 0x30	; 48
    213a:	a6 01       	movw	r20, r12
    213c:	95 01       	movw	r18, r10
    213e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    2142:	9b 01       	movw	r18, r22
    2144:	ac 01       	movw	r20, r24
    2146:	c8 01       	movw	r24, r16
    2148:	b7 01       	movw	r22, r14
    214a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divsf3>
    214e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <ceil>
    2152:	09 a1       	ldd	r16, Y+33	; 0x21
    2154:	1a a1       	ldd	r17, Y+34	; 0x22
    2156:	03 5c       	subi	r16, 0xC3	; 195
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
    215e:	f8 01       	movw	r30, r16
    2160:	60 83       	st	Z, r22
    2162:	71 83       	std	Z+1, r23	; 0x01
    2164:	82 83       	std	Z+2, r24	; 0x02
    2166:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    2168:	80 91 a9 03 	lds	r24, 0x03A9
    216c:	88 23       	and	r24, r24
    216e:	69 f0       	breq	.+26     	; 0x218a <plan_buffer_line+0x5e6>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	9a a1       	ldd	r25, Y+34	; 0x22
    2174:	0e 94 fd 08 	call	0x11fa	; 0x11fa <factor_for_safe_speed>
    2178:	8b 01       	movw	r16, r22
    217a:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    217c:	89 a1       	ldd	r24, Y+33	; 0x21
    217e:	9a a1       	ldd	r25, Y+34	; 0x22
    2180:	b9 01       	movw	r22, r18
    2182:	a8 01       	movw	r20, r16
    2184:	0e 94 2e 0c 	call	0x185c	; 0x185c <calculate_trapezoid_for_block>
    2188:	26 c0       	rjmp	.+76     	; 0x21d6 <plan_buffer_line+0x632>
  } else {
    block->initial_rate = block->nominal_rate;
    218a:	a9 a1       	ldd	r26, Y+33	; 0x21
    218c:	ba a1       	ldd	r27, Y+34	; 0x22
    218e:	d5 96       	adiw	r26, 0x35	; 53
    2190:	6d 92       	st	X+, r6
    2192:	7d 92       	st	X+, r7
    2194:	8d 92       	st	X+, r8
    2196:	9c 92       	st	X, r9
    2198:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    219a:	fd 01       	movw	r30, r26
    219c:	61 ae       	std	Z+57, r6	; 0x39
    219e:	72 ae       	std	Z+58, r7	; 0x3a
    21a0:	83 ae       	std	Z+59, r8	; 0x3b
    21a2:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    21a4:	ef 5b       	subi	r30, 0xBF	; 191
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	10 82       	st	Z, r1
    21aa:	11 82       	std	Z+1, r1	; 0x01
    21ac:	12 82       	std	Z+2, r1	; 0x02
    21ae:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    21b0:	9d 01       	movw	r18, r26
    21b2:	2b 5b       	subi	r18, 0xBB	; 187
    21b4:	3f 4f       	sbci	r19, 0xFF	; 255
    21b6:	fd 01       	movw	r30, r26
    21b8:	81 89       	ldd	r24, Z+17	; 0x11
    21ba:	92 89       	ldd	r25, Z+18	; 0x12
    21bc:	a3 89       	ldd	r26, Z+19	; 0x13
    21be:	b4 89       	ldd	r27, Z+20	; 0x14
    21c0:	f9 01       	movw	r30, r18
    21c2:	80 83       	st	Z, r24
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	a2 83       	std	Z+2, r26	; 0x02
    21c8:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    21ca:	d8 01       	movw	r26, r16
    21cc:	1d 92       	st	X+, r1
    21ce:	1d 92       	st	X+, r1
    21d0:	1d 92       	st	X+, r1
    21d2:	1c 92       	st	X, r1
    21d4:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    21d6:	e9 a1       	ldd	r30, Y+33	; 0x21
    21d8:	fa a1       	ldd	r31, Y+34	; 0x22
    21da:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    21dc:	29 81       	ldd	r18, Y+1	; 0x01
    21de:	3a 81       	ldd	r19, Y+2	; 0x02
    21e0:	4b 81       	ldd	r20, Y+3	; 0x03
    21e2:	5c 81       	ldd	r21, Y+4	; 0x04
    21e4:	80 91 99 03 	lds	r24, 0x0399
    21e8:	90 91 9a 03 	lds	r25, 0x039A
    21ec:	a0 91 9b 03 	lds	r26, 0x039B
    21f0:	b0 91 9c 03 	lds	r27, 0x039C
    21f4:	28 17       	cp	r18, r24
    21f6:	39 07       	cpc	r19, r25
    21f8:	4a 07       	cpc	r20, r26
    21fa:	5b 07       	cpc	r21, r27
    21fc:	14 f4       	brge	.+4      	; 0x2202 <__stack+0x3>
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2202:	2d 81       	ldd	r18, Y+5	; 0x05
    2204:	3e 81       	ldd	r19, Y+6	; 0x06
    2206:	4f 81       	ldd	r20, Y+7	; 0x07
    2208:	58 85       	ldd	r21, Y+8	; 0x08
    220a:	80 91 9d 03 	lds	r24, 0x039D
    220e:	90 91 9e 03 	lds	r25, 0x039E
    2212:	a0 91 9f 03 	lds	r26, 0x039F
    2216:	b0 91 a0 03 	lds	r27, 0x03A0
    221a:	28 17       	cp	r18, r24
    221c:	39 07       	cpc	r19, r25
    221e:	4a 07       	cpc	r20, r26
    2220:	5b 07       	cpc	r21, r27
    2222:	44 f4       	brge	.+16     	; 0x2234 <__stack+0x35>
    2224:	a9 a1       	ldd	r26, Y+33	; 0x21
    2226:	ba a1       	ldd	r27, Y+34	; 0x22
    2228:	50 96       	adiw	r26, 0x10	; 16
    222a:	8c 91       	ld	r24, X
    222c:	50 97       	sbiw	r26, 0x10	; 16
    222e:	88 60       	ori	r24, 0x08	; 8
    2230:	50 96       	adiw	r26, 0x10	; 16
    2232:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2234:	29 85       	ldd	r18, Y+9	; 0x09
    2236:	3a 85       	ldd	r19, Y+10	; 0x0a
    2238:	4b 85       	ldd	r20, Y+11	; 0x0b
    223a:	5c 85       	ldd	r21, Y+12	; 0x0c
    223c:	80 91 a1 03 	lds	r24, 0x03A1
    2240:	90 91 a2 03 	lds	r25, 0x03A2
    2244:	a0 91 a3 03 	lds	r26, 0x03A3
    2248:	b0 91 a4 03 	lds	r27, 0x03A4
    224c:	28 17       	cp	r18, r24
    224e:	39 07       	cpc	r19, r25
    2250:	4a 07       	cpc	r20, r26
    2252:	5b 07       	cpc	r21, r27
    2254:	2c f4       	brge	.+10     	; 0x2260 <__stack+0x61>
    2256:	e9 a1       	ldd	r30, Y+33	; 0x21
    2258:	fa a1       	ldd	r31, Y+34	; 0x22
    225a:	80 89       	ldd	r24, Z+16	; 0x10
    225c:	80 64       	ori	r24, 0x40	; 64
    225e:	80 8b       	std	Z+16, r24	; 0x10
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2260:	2d 85       	ldd	r18, Y+13	; 0x0d
    2262:	3e 85       	ldd	r19, Y+14	; 0x0e
    2264:	4f 85       	ldd	r20, Y+15	; 0x0f
    2266:	58 89       	ldd	r21, Y+16	; 0x10
    2268:	80 91 a5 03 	lds	r24, 0x03A5
    226c:	90 91 a6 03 	lds	r25, 0x03A6
    2270:	a0 91 a7 03 	lds	r26, 0x03A7
    2274:	b0 91 a8 03 	lds	r27, 0x03A8
    2278:	28 17       	cp	r18, r24
    227a:	39 07       	cpc	r19, r25
    227c:	4a 07       	cpc	r20, r26
    227e:	5b 07       	cpc	r21, r27
    2280:	44 f4       	brge	.+16     	; 0x2292 <__stack+0x93>
    2282:	a9 a1       	ldd	r26, Y+33	; 0x21
    2284:	ba a1       	ldd	r27, Y+34	; 0x22
    2286:	50 96       	adiw	r26, 0x10	; 16
    2288:	8c 91       	ld	r24, X
    228a:	50 97       	sbiw	r26, 0x10	; 16
    228c:	80 68       	ori	r24, 0x80	; 128
    228e:	50 96       	adiw	r26, 0x10	; 16
    2290:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    2292:	eb a9       	ldd	r30, Y+51	; 0x33
    2294:	fc a9       	ldd	r31, Y+52	; 0x34
    2296:	f0 93 96 03 	sts	0x0396, r31
    229a:	e0 93 95 03 	sts	0x0395, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    229e:	a9 e9       	ldi	r26, 0x99	; 153
    22a0:	b3 e0       	ldi	r27, 0x03	; 3
    22a2:	fe 01       	movw	r30, r28
    22a4:	31 96       	adiw	r30, 0x01	; 1
    22a6:	80 e1       	ldi	r24, 0x10	; 16
    22a8:	01 90       	ld	r0, Z+
    22aa:	0d 92       	st	X+, r0
    22ac:	81 50       	subi	r24, 0x01	; 1
    22ae:	e1 f7       	brne	.-8      	; 0x22a8 <__stack+0xa9>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    22b0:	80 91 a9 03 	lds	r24, 0x03A9
    22b4:	88 23       	and	r24, r24
    22b6:	11 f0       	breq	.+4      	; 0x22bc <__stack+0xbd>
    22b8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <planner_recalculate>
  st_wake_up();
    22bc:	0e 94 1e 14 	call	0x283c	; 0x283c <st_wake_up>
}
    22c0:	e4 96       	adiw	r28, 0x34	; 52
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	bf 90       	pop	r11
    22de:	af 90       	pop	r10
    22e0:	9f 90       	pop	r9
    22e2:	8f 90       	pop	r8
    22e4:	7f 90       	pop	r7
    22e6:	6f 90       	pop	r6
    22e8:	5f 90       	pop	r5
    22ea:	4f 90       	pop	r4
    22ec:	3f 90       	pop	r3
    22ee:	2f 90       	pop	r2
    22f0:	08 95       	ret

000022f2 <sp_process>:
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    22f2:	1f 93       	push	r17
    22f4:	5d c0       	rjmp	.+186    	; 0x23b0 <sp_process+0xbe>
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    22f6:	e0 91 dc 03 	lds	r30, 0x03DC
    22fa:	ee 23       	and	r30, r30
    22fc:	09 f4       	brne	.+2      	; 0x2300 <sp_process+0xe>
    22fe:	46 c0       	rjmp	.+140    	; 0x238c <sp_process+0x9a>
    2300:	9a 30       	cpi	r25, 0x0A	; 10
    2302:	19 f0       	breq	.+6      	; 0x230a <sp_process+0x18>
    2304:	9d 30       	cpi	r25, 0x0D	; 13
    2306:	09 f0       	breq	.+2      	; 0x230a <sp_process+0x18>
    2308:	41 c0       	rjmp	.+130    	; 0x238c <sp_process+0x9a>
      line[char_counter] = 0; // terminate string
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	e6 55       	subi	r30, 0x56	; 86
    230e:	fc 4f       	sbci	r31, 0xFC	; 252
    2310:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2312:	8a ea       	ldi	r24, 0xAA	; 170
    2314:	93 e0       	ldi	r25, 0x03	; 3
    2316:	0e 94 49 04 	call	0x892	; 0x892 <gc_execute_line>
    231a:	18 2f       	mov	r17, r24
static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code) {

	if( gHomed == FALSE ) {
    231c:	80 91 dd 03 	lds	r24, 0x03DD
    2320:	88 23       	and	r24, r24
    2322:	21 f4       	brne	.+8      	; 0x232c <sp_process+0x3a>
    	printPgmString(PSTR("Not homed\n\r"));
    2324:	81 e6       	ldi	r24, 0x61	; 97
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
	}


  switch(status_code) {          
    232c:	12 30       	cpi	r17, 0x02	; 2
    232e:	91 f0       	breq	.+36     	; 0x2354 <sp_process+0x62>
    2330:	13 30       	cpi	r17, 0x03	; 3
    2332:	28 f4       	brcc	.+10     	; 0x233e <sp_process+0x4c>
    2334:	11 23       	and	r17, r17
    2336:	41 f0       	breq	.+16     	; 0x2348 <sp_process+0x56>
    2338:	11 30       	cpi	r17, 0x01	; 1
    233a:	a9 f4       	brne	.+42     	; 0x2366 <sp_process+0x74>
    233c:	08 c0       	rjmp	.+16     	; 0x234e <sp_process+0x5c>
    233e:	13 30       	cpi	r17, 0x03	; 3
    2340:	61 f0       	breq	.+24     	; 0x235a <sp_process+0x68>
    2342:	14 30       	cpi	r17, 0x04	; 4
    2344:	81 f4       	brne	.+32     	; 0x2366 <sp_process+0x74>
    2346:	0c c0       	rjmp	.+24     	; 0x2360 <sp_process+0x6e>
    case GCSTATUS_OK:
    printPgmString(PSTR("ok\n\r")); break;
    2348:	8c e5       	ldi	r24, 0x5C	; 92
    234a:	92 e0       	ldi	r25, 0x02	; 2
    234c:	1a c0       	rjmp	.+52     	; 0x2382 <sp_process+0x90>
    case GCSTATUS_BAD_NUMBER_FORMAT:
    printPgmString(PSTR("error: Bad number format\n\r")); break;
    234e:	81 e4       	ldi	r24, 0x41	; 65
    2350:	92 e0       	ldi	r25, 0x02	; 2
    2352:	17 c0       	rjmp	.+46     	; 0x2382 <sp_process+0x90>
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    printPgmString(PSTR("error: Expected command letter\n\r")); break;
    2354:	80 e2       	ldi	r24, 0x20	; 32
    2356:	92 e0       	ldi	r25, 0x02	; 2
    2358:	14 c0       	rjmp	.+40     	; 0x2382 <sp_process+0x90>
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    printPgmString(PSTR("error: Unsupported statement\n\r")); break;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	92 e0       	ldi	r25, 0x02	; 2
    235e:	11 c0       	rjmp	.+34     	; 0x2382 <sp_process+0x90>
    case GCSTATUS_FLOATING_POINT_ERROR:
    printPgmString(PSTR("error: Floating point error\n\r")); break;
    2360:	83 ee       	ldi	r24, 0xE3	; 227
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	0e c0       	rjmp	.+28     	; 0x2382 <sp_process+0x90>
    default:
    printPgmString(PSTR("error: "));
    2366:	8b ed       	ldi	r24, 0xDB	; 219
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
    printInteger(status_code);
    236e:	61 2f       	mov	r22, r17
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	88 27       	eor	r24, r24
    2374:	77 fd       	sbrc	r23, 7
    2376:	80 95       	com	r24
    2378:	98 2f       	mov	r25, r24
    237a:	0e 94 30 1a 	call	0x3460	; 0x3460 <printInteger>
    printPgmString(PSTR("\n\r"));
    237e:	88 ed       	ldi	r24, 0xD8	; 216
    2380:	91 e0       	ldi	r25, 0x01	; 1
    2382:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2386:	10 92 dc 03 	sts	0x03DC, r1
    238a:	12 c0       	rjmp	.+36     	; 0x23b0 <sp_process+0xbe>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    238c:	91 32       	cpi	r25, 0x21	; 33
    238e:	84 f0       	brlt	.+32     	; 0x23b0 <sp_process+0xbe>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2390:	89 2f       	mov	r24, r25
    2392:	81 56       	subi	r24, 0x61	; 97
    2394:	ae 2f       	mov	r26, r30
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	ef 5f       	subi	r30, 0xFF	; 255
    239a:	8a 31       	cpi	r24, 0x1A	; 26
    239c:	20 f4       	brcc	.+8      	; 0x23a6 <sp_process+0xb4>
      line[char_counter++] = c-'a'+'A';
    239e:	a6 55       	subi	r26, 0x56	; 86
    23a0:	bc 4f       	sbci	r27, 0xFC	; 252
    23a2:	90 52       	subi	r25, 0x20	; 32
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <sp_process+0xb8>
    } else {
      line[char_counter++] = c;
    23a6:	a6 55       	subi	r26, 0x56	; 86
    23a8:	bc 4f       	sbci	r27, 0xFC	; 252
    23aa:	9c 93       	st	X, r25
    23ac:	e0 93 dc 03 	sts	0x03DC, r30

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    23b0:	0e 94 16 19 	call	0x322c	; 0x322c <serialRead>
    23b4:	98 2f       	mov	r25, r24
    23b6:	8f 3f       	cpi	r24, 0xFF	; 255
    23b8:	09 f0       	breq	.+2      	; 0x23bc <sp_process+0xca>
    23ba:	9d cf       	rjmp	.-198    	; 0x22f6 <sp_process+0x4>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    23bc:	1f 91       	pop	r17
    23be:	08 95       	ret

000023c0 <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	76 e9       	ldi	r23, 0x96	; 150
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 c1 18 	call	0x3182	; 0x3182 <beginSerial>
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
    23cc:	80 e7       	ldi	r24, 0x70	; 112
    23ce:	92 e0       	ldi	r25, 0x02	; 2
    23d0:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printPgmString(PSTR("\r\n"));  
    23d4:	8d e6       	ldi	r24, 0x6D	; 109
    23d6:	92 e0       	ldi	r25, 0x02	; 2
    23d8:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
}
    23dc:	08 95       	ret

000023de <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    23de:	84 ef       	ldi	r24, 0xF4	; 244
    23e0:	99 ef       	ldi	r25, 0xF9	; 249
    23e2:	ac e3       	ldi	r26, 0x3C	; 60
    23e4:	b4 e4       	ldi	r27, 0x44	; 68
    23e6:	80 93 08 05 	sts	0x0508, r24
    23ea:	90 93 09 05 	sts	0x0509, r25
    23ee:	a0 93 0a 05 	sts	0x050A, r26
    23f2:	b0 93 0b 05 	sts	0x050B, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    23f6:	80 93 0c 05 	sts	0x050C, r24
    23fa:	90 93 0d 05 	sts	0x050D, r25
    23fe:	a0 93 0e 05 	sts	0x050E, r26
    2402:	b0 93 0f 05 	sts	0x050F, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2406:	80 93 10 05 	sts	0x0510, r24
    240a:	90 93 11 05 	sts	0x0511, r25
    240e:	a0 93 12 05 	sts	0x0512, r26
    2412:	b0 93 13 05 	sts	0x0513, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2416:	81 ec       	ldi	r24, 0xC1	; 193
    2418:	9a ec       	ldi	r25, 0xCA	; 202
    241a:	a1 e3       	ldi	r26, 0x31	; 49
    241c:	b2 e4       	ldi	r27, 0x42	; 66
    241e:	80 93 14 05 	sts	0x0514, r24
    2422:	90 93 15 05 	sts	0x0515, r25
    2426:	a0 93 16 05 	sts	0x0516, r26
    242a:	b0 93 17 05 	sts	0x0517, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    242e:	88 e0       	ldi	r24, 0x08	; 8
    2430:	80 93 19 05 	sts	0x0519, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	a0 ef       	ldi	r26, 0xF0	; 240
    243a:	b3 e4       	ldi	r27, 0x43	; 67
    243c:	80 93 1a 05 	sts	0x051A, r24
    2440:	90 93 1b 05 	sts	0x051B, r25
    2444:	a0 93 1c 05 	sts	0x051C, r26
    2448:	b0 93 1d 05 	sts	0x051D, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    244c:	80 93 1e 05 	sts	0x051E, r24
    2450:	90 93 1f 05 	sts	0x051F, r25
    2454:	a0 93 20 05 	sts	0x0520, r26
    2458:	b0 93 21 05 	sts	0x0521, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    245c:	8a e9       	ldi	r24, 0x9A	; 154
    245e:	99 e9       	ldi	r25, 0x99	; 153
    2460:	a9 e9       	ldi	r26, 0x99	; 153
    2462:	b0 e4       	ldi	r27, 0x40	; 64
    2464:	80 93 26 05 	sts	0x0526, r24
    2468:	90 93 27 05 	sts	0x0527, r25
    246c:	a0 93 28 05 	sts	0x0528, r26
    2470:	b0 93 29 05 	sts	0x0529, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2474:	8d ec       	ldi	r24, 0xCD	; 205
    2476:	9c ec       	ldi	r25, 0xCC	; 204
    2478:	ac ec       	ldi	r26, 0xCC	; 204
    247a:	bd e3       	ldi	r27, 0x3D	; 61
    247c:	80 93 22 05 	sts	0x0522, r24
    2480:	90 93 23 05 	sts	0x0523, r25
    2484:	a0 93 24 05 	sts	0x0524, r26
    2488:	b0 93 25 05 	sts	0x0525, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a8 e4       	ldi	r26, 0x48	; 72
    2492:	b2 e4       	ldi	r27, 0x42	; 66
    2494:	80 93 2a 05 	sts	0x052A, r24
    2498:	90 93 2b 05 	sts	0x052B, r25
    249c:	a0 93 2c 05 	sts	0x052C, r26
    24a0:	b0 93 2d 05 	sts	0x052D, r27
}
    24a4:	08 95       	ret

000024a6 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    24ae:	87 36       	cpi	r24, 0x67	; 103
    24b0:	81 f4       	brne	.+32     	; 0x24d2 <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    24b2:	88 e0       	ldi	r24, 0x08	; 8
    24b4:	95 e0       	ldi	r25, 0x05	; 5
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	46 e2       	ldi	r20, 0x26	; 38
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	0e 94 5d 03 	call	0x6ba	; 0x6ba <memcpy_from_eeprom_with_checksum>
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	89 2b       	or	r24, r25
    24c6:	09 f4       	brne	.+2      	; 0x24ca <read_settings+0x24>
    24c8:	21 e0       	ldi	r18, 0x01	; 1
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	28 27       	eor	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	29 c0       	rjmp	.+82     	; 0x2524 <read_settings+0x7e>
      return(FALSE);
    }
  } 
  else if (version == 1) {
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	29 f5       	brne	.+74     	; 0x2520 <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    24d6:	88 e0       	ldi	r24, 0x08	; 8
    24d8:	95 e0       	ldi	r25, 0x05	; 5
    24da:	61 e0       	ldi	r22, 0x01	; 1
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	4b e1       	ldi	r20, 0x1B	; 27
    24e0:	50 e0       	ldi	r21, 0x00	; 0
    24e2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <memcpy_from_eeprom_with_checksum>
    24e6:	89 2b       	or	r24, r25
    24e8:	d9 f0       	breq	.+54     	; 0x2520 <read_settings+0x7a>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    24ea:	8a e9       	ldi	r24, 0x9A	; 154
    24ec:	99 e9       	ldi	r25, 0x99	; 153
    24ee:	a9 e9       	ldi	r26, 0x99	; 153
    24f0:	b0 e4       	ldi	r27, 0x40	; 64
    24f2:	80 93 26 05 	sts	0x0526, r24
    24f6:	90 93 27 05 	sts	0x0527, r25
    24fa:	a0 93 28 05 	sts	0x0528, r26
    24fe:	b0 93 29 05 	sts	0x0529, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a8 e4       	ldi	r26, 0x48	; 72
    2508:	b2 e4       	ldi	r27, 0x42	; 66
    250a:	80 93 2a 05 	sts	0x052A, r24
    250e:	90 93 2b 05 	sts	0x052B, r25
    2512:	a0 93 2c 05 	sts	0x052C, r26
    2516:	b0 93 2d 05 	sts	0x052D, r27
    251a:	21 e0       	ldi	r18, 0x01	; 1
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <read_settings+0x7e>
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2524:	c9 01       	movw	r24, r18
    2526:	08 95       	ret

00002528 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	67 e6       	ldi	r22, 0x67	; 103
    252e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	68 e0       	ldi	r22, 0x08	; 8
    2538:	75 e0       	ldi	r23, 0x05	; 5
    253a:	46 e2       	ldi	r20, 0x26	; 38
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	0e 94 13 03 	call	0x626	; 0x626 <memcpy_to_eeprom_with_checksum>
}
    2542:	08 95       	ret

00002544 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2544:	fc 01       	movw	r30, r24
  switch(parameter) {
    2546:	86 30       	cpi	r24, 0x06	; 6
    2548:	91 05       	cpc	r25, r1
    254a:	b9 f1       	breq	.+110    	; 0x25ba <settings_store_setting+0x76>
    254c:	87 30       	cpi	r24, 0x07	; 7
    254e:	91 05       	cpc	r25, r1
    2550:	4c f4       	brge	.+18     	; 0x2564 <settings_store_setting+0x20>
    2552:	84 30       	cpi	r24, 0x04	; 4
    2554:	91 05       	cpc	r25, r1
    2556:	f9 f0       	breq	.+62     	; 0x2596 <settings_store_setting+0x52>
    2558:	85 30       	cpi	r24, 0x05	; 5
    255a:	91 05       	cpc	r25, r1
    255c:	2c f5       	brge	.+74     	; 0x25a8 <settings_store_setting+0x64>
    255e:	97 ff       	sbrs	r25, 7
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <settings_store_setting+0x3c>
    2562:	62 c0       	rjmp	.+196    	; 0x2628 <settings_store_setting+0xe4>
    2564:	88 30       	cpi	r24, 0x08	; 8
    2566:	91 05       	cpc	r25, r1
    2568:	d1 f1       	breq	.+116    	; 0x25de <settings_store_setting+0x9a>
    256a:	88 30       	cpi	r24, 0x08	; 8
    256c:	91 05       	cpc	r25, r1
    256e:	74 f1       	brlt	.+92     	; 0x25cc <settings_store_setting+0x88>
    2570:	89 30       	cpi	r24, 0x09	; 9
    2572:	91 05       	cpc	r25, r1
    2574:	e9 f1       	breq	.+122    	; 0x25f0 <settings_store_setting+0xac>
    2576:	e8 5e       	subi	r30, 0xE8	; 232
    2578:	f3 40       	sbci	r31, 0x03	; 3
    257a:	09 f0       	breq	.+2      	; 0x257e <settings_store_setting+0x3a>
    257c:	55 c0       	rjmp	.+170    	; 0x2628 <settings_store_setting+0xe4>
    257e:	44 c0       	rjmp	.+136    	; 0x2608 <settings_store_setting+0xc4>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2580:	ee 0f       	add	r30, r30
    2582:	ff 1f       	adc	r31, r31
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	e8 5f       	subi	r30, 0xF8	; 248
    258a:	fa 4f       	sbci	r31, 0xFA	; 250
    258c:	40 83       	st	Z, r20
    258e:	51 83       	std	Z+1, r21	; 0x01
    2590:	62 83       	std	Z+2, r22	; 0x02
    2592:	73 83       	std	Z+3, r23	; 0x03
    2594:	4c c0       	rjmp	.+152    	; 0x262e <settings_store_setting+0xea>
    case 4: settings.pulse_microseconds = round(value); break;
    2596:	cb 01       	movw	r24, r22
    2598:	ba 01       	movw	r22, r20
    259a:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <round>
    259e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fixunssfsi>
    25a2:	60 93 19 05 	sts	0x0519, r22
    25a6:	43 c0       	rjmp	.+134    	; 0x262e <settings_store_setting+0xea>
    case 5: settings.default_feed_rate = value; break;
    25a8:	40 93 1a 05 	sts	0x051A, r20
    25ac:	50 93 1b 05 	sts	0x051B, r21
    25b0:	60 93 1c 05 	sts	0x051C, r22
    25b4:	70 93 1d 05 	sts	0x051D, r23
    25b8:	3a c0       	rjmp	.+116    	; 0x262e <settings_store_setting+0xea>
    case 6: settings.default_seek_rate = value; break;
    25ba:	40 93 1e 05 	sts	0x051E, r20
    25be:	50 93 1f 05 	sts	0x051F, r21
    25c2:	60 93 20 05 	sts	0x0520, r22
    25c6:	70 93 21 05 	sts	0x0521, r23
    25ca:	31 c0       	rjmp	.+98     	; 0x262e <settings_store_setting+0xea>
    case 7: settings.mm_per_arc_segment = value; break;
    25cc:	40 93 22 05 	sts	0x0522, r20
    25d0:	50 93 23 05 	sts	0x0523, r21
    25d4:	60 93 24 05 	sts	0x0524, r22
    25d8:	70 93 25 05 	sts	0x0525, r23
    25dc:	28 c0       	rjmp	.+80     	; 0x262e <settings_store_setting+0xea>
    case 8: settings.acceleration = value; break;
    25de:	40 93 26 05 	sts	0x0526, r20
    25e2:	50 93 27 05 	sts	0x0527, r21
    25e6:	60 93 28 05 	sts	0x0528, r22
    25ea:	70 93 29 05 	sts	0x0529, r23
    25ee:	1f c0       	rjmp	.+62     	; 0x262e <settings_store_setting+0xea>
    case 9: settings.max_jerk = fabs(value); break;
    25f0:	db 01       	movw	r26, r22
    25f2:	ca 01       	movw	r24, r20
    25f4:	bf 77       	andi	r27, 0x7F	; 127
    25f6:	80 93 2a 05 	sts	0x052A, r24
    25fa:	90 93 2b 05 	sts	0x052B, r25
    25fe:	a0 93 2c 05 	sts	0x052C, r26
    2602:	b0 93 2d 05 	sts	0x052D, r27
    2606:	13 c0       	rjmp	.+38     	; 0x262e <settings_store_setting+0xea>
    case 1000:
	  if (!!value) st_enable();
    2608:	cb 01       	movw	r24, r22
    260a:	ba 01       	movw	r22, r20
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	0e 94 9d 1c 	call	0x393a	; 0x393a <__cmpsf2>
    2618:	88 23       	and	r24, r24
    261a:	19 f0       	breq	.+6      	; 0x2622 <settings_store_setting+0xde>
    261c:	0e 94 39 14 	call	0x2872	; 0x2872 <st_enable>
    2620:	08 95       	ret
      else st_disable();
    2622:	0e 94 3b 14 	call	0x2876	; 0x2876 <st_disable>
    2626:	08 95       	ret
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2628:	83 ef       	ldi	r24, 0xF3	; 243
    262a:	92 e0       	ldi	r25, 0x02	; 2
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <settings_store_setting+0xf2>
      return;
  }
  write_settings();
    262e:	0e 94 94 12 	call	0x2528	; 0x2528 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2632:	8e ed       	ldi	r24, 0xDE	; 222
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
    263a:	08 95       	ret

0000263c <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    263c:	85 ec       	ldi	r24, 0xC5	; 197
    263e:	94 e0       	ldi	r25, 0x04	; 4
    2640:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2644:	80 ec       	ldi	r24, 0xC0	; 192
    2646:	94 e0       	ldi	r25, 0x04	; 4
    2648:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printPgmString(PSTR("\r\n"));
    264c:	8d eb       	ldi	r24, 0xBD	; 189
    264e:	94 e0       	ldi	r25, 0x04	; 4
    2650:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2654:	87 eb       	ldi	r24, 0xB7	; 183
    2656:	94 e0       	ldi	r25, 0x04	; 4
    2658:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    265c:	60 91 08 05 	lds	r22, 0x0508
    2660:	70 91 09 05 	lds	r23, 0x0509
    2664:	80 91 0a 05 	lds	r24, 0x050A
    2668:	90 91 0b 05 	lds	r25, 0x050B
    266c:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2670:	87 ea       	ldi	r24, 0xA7	; 167
    2672:	94 e0       	ldi	r25, 0x04	; 4
    2674:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2678:	81 ea       	ldi	r24, 0xA1	; 161
    267a:	94 e0       	ldi	r25, 0x04	; 4
    267c:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2680:	60 91 0c 05 	lds	r22, 0x050C
    2684:	70 91 0d 05 	lds	r23, 0x050D
    2688:	80 91 0e 05 	lds	r24, 0x050E
    268c:	90 91 0f 05 	lds	r25, 0x050F
    2690:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2694:	81 e9       	ldi	r24, 0x91	; 145
    2696:	94 e0       	ldi	r25, 0x04	; 4
    2698:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    269c:	8b e8       	ldi	r24, 0x8B	; 139
    269e:	94 e0       	ldi	r25, 0x04	; 4
    26a0:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    26a4:	60 91 10 05 	lds	r22, 0x0510
    26a8:	70 91 11 05 	lds	r23, 0x0511
    26ac:	80 91 12 05 	lds	r24, 0x0512
    26b0:	90 91 13 05 	lds	r25, 0x0513
    26b4:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    26b8:	8b e7       	ldi	r24, 0x7B	; 123
    26ba:	94 e0       	ldi	r25, 0x04	; 4
    26bc:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    26c0:	85 e7       	ldi	r24, 0x75	; 117
    26c2:	94 e0       	ldi	r25, 0x04	; 4
    26c4:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    26c8:	60 91 14 05 	lds	r22, 0x0514
    26cc:	70 91 15 05 	lds	r23, 0x0515
    26d0:	80 91 16 05 	lds	r24, 0x0516
    26d4:	90 91 17 05 	lds	r25, 0x0517
    26d8:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    26dc:	83 e6       	ldi	r24, 0x63	; 99
    26de:	94 e0       	ldi	r25, 0x04	; 4
    26e0:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    26e4:	8d e5       	ldi	r24, 0x5D	; 93
    26e6:	94 e0       	ldi	r25, 0x04	; 4
    26e8:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printInteger(settings.pulse_microseconds);
    26ec:	60 91 19 05 	lds	r22, 0x0519
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 30 1a 	call	0x3460	; 0x3460 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    26fa:	80 e4       	ldi	r24, 0x40	; 64
    26fc:	94 e0       	ldi	r25, 0x04	; 4
    26fe:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2702:	8a e3       	ldi	r24, 0x3A	; 58
    2704:	94 e0       	ldi	r25, 0x04	; 4
    2706:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.default_feed_rate);
    270a:	60 91 1a 05 	lds	r22, 0x051A
    270e:	70 91 1b 05 	lds	r23, 0x051B
    2712:	80 91 1c 05 	lds	r24, 0x051C
    2716:	90 91 1d 05 	lds	r25, 0x051D
    271a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    271e:	8c e1       	ldi	r24, 0x1C	; 28
    2720:	94 e0       	ldi	r25, 0x04	; 4
    2722:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2726:	86 e1       	ldi	r24, 0x16	; 22
    2728:	94 e0       	ldi	r25, 0x04	; 4
    272a:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.default_seek_rate);
    272e:	60 91 1e 05 	lds	r22, 0x051E
    2732:	70 91 1f 05 	lds	r23, 0x051F
    2736:	80 91 20 05 	lds	r24, 0x0520
    273a:	90 91 21 05 	lds	r25, 0x0521
    273e:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2742:	88 ef       	ldi	r24, 0xF8	; 248
    2744:	93 e0       	ldi	r25, 0x03	; 3
    2746:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    274a:	82 ef       	ldi	r24, 0xF2	; 242
    274c:	93 e0       	ldi	r25, 0x03	; 3
    274e:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2752:	60 91 22 05 	lds	r22, 0x0522
    2756:	70 91 23 05 	lds	r23, 0x0523
    275a:	80 91 24 05 	lds	r24, 0x0524
    275e:	90 91 25 05 	lds	r25, 0x0525
    2762:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2766:	8e ed       	ldi	r24, 0xDE	; 222
    2768:	93 e0       	ldi	r25, 0x03	; 3
    276a:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    276e:	88 ed       	ldi	r24, 0xD8	; 216
    2770:	93 e0       	ldi	r25, 0x03	; 3
    2772:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.acceleration);
    2776:	60 91 26 05 	lds	r22, 0x0526
    277a:	70 91 27 05 	lds	r23, 0x0527
    277e:	80 91 28 05 	lds	r24, 0x0528
    2782:	90 91 29 05 	lds	r25, 0x0529
    2786:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    278a:	8a eb       	ldi	r24, 0xBA	; 186
    278c:	93 e0       	ldi	r25, 0x03	; 3
    278e:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2792:	84 eb       	ldi	r24, 0xB4	; 180
    2794:	93 e0       	ldi	r25, 0x03	; 3
    2796:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printFloat(settings.max_jerk);
    279a:	60 91 2a 05 	lds	r22, 0x052A
    279e:	70 91 2b 05 	lds	r23, 0x052B
    27a2:	80 91 2c 05 	lds	r24, 0x052C
    27a6:	90 91 2d 05 	lds	r25, 0x052D
    27aa:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    27ae:	8c e7       	ldi	r24, 0x7C	; 124
    27b0:	93 e0       	ldi	r25, 0x03	; 3
    27b2:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    27b6:	83 e7       	ldi	r24, 0x73	; 115
    27b8:	93 e0       	ldi	r25, 0x03	; 3
    27ba:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  printInteger(st_is_enabled());
    27be:	0e 94 3d 14 	call	0x287a	; 0x287a <st_is_enabled>
    27c2:	aa 27       	eor	r26, r26
    27c4:	97 fd       	sbrc	r25, 7
    27c6:	a0 95       	com	r26
    27c8:	ba 2f       	mov	r27, r26
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 30 1a 	call	0x3460	; 0x3460 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    27d2:	8a e4       	ldi	r24, 0x4A	; 74
    27d4:	93 e0       	ldi	r25, 0x03	; 3
    27d6:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    27da:	87 e0       	ldi	r24, 0x07	; 7
    27dc:	93 e0       	ldi	r25, 0x03	; 3
    27de:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
}
    27e2:	08 95       	ret

000027e4 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    27e4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <read_settings>
    27e8:	89 2b       	or	r24, r25
    27ea:	29 f0       	breq	.+10     	; 0x27f6 <settings_init+0x12>
    printPgmString(PSTR("'$' to dump current settings\r\n"));
    27ec:	8f eb       	ldi	r24, 0xBF	; 191
    27ee:	92 e0       	ldi	r25, 0x02	; 2
    27f0:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
    27f4:	08 95       	ret
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    27f6:	84 e8       	ldi	r24, 0x84	; 132
    27f8:	92 e0       	ldi	r25, 0x02	; 2
    27fa:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
    settings_reset();
    27fe:	0e 94 ef 11 	call	0x23de	; 0x23de <settings_reset>
    write_settings();
    2802:	0e 94 94 12 	call	0x2528	; 0x2528 <write_settings>
    settings_dump();
    2806:	0e 94 1e 13 	call	0x263c	; 0x263c <settings_dump>
    280a:	08 95       	ret

0000280c <spindle_init>:

#include <avr/io.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    280c:	e1 e0       	ldi	r30, 0x01	; 1
    280e:	f1 e0       	ldi	r31, 0x01	; 1
    2810:	80 81       	ld	r24, Z
    2812:	80 64       	ori	r24, 0x40	; 64
    2814:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2816:	27 9a       	sbi	0x04, 7	; 4
}
    2818:	08 95       	ret

0000281a <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    281a:	97 fd       	sbrc	r25, 7
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <spindle_run+0x8>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    281e:	2f 98       	cbi	0x05, 7	; 5
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <spindle_run+0xa>
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2822:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2824:	80 91 02 01 	lds	r24, 0x0102
    2828:	80 64       	ori	r24, 0x40	; 64
    282a:	80 93 02 01 	sts	0x0102, r24
}
    282e:	08 95       	ret

00002830 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2830:	e2 e0       	ldi	r30, 0x02	; 2
    2832:	f1 e0       	ldi	r31, 0x01	; 1
    2834:	80 81       	ld	r24, Z
    2836:	8f 7b       	andi	r24, 0xBF	; 191
    2838:	80 83       	st	Z, r24
}
    283a:	08 95       	ret

0000283c <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    283c:	ef e6       	ldi	r30, 0x6F	; 111
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	82 60       	ori	r24, 0x02	; 2
    2844:	80 83       	st	Z, r24
}
    2846:	08 95       	ret

00002848 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	90 93 f7 03 	sts	0x03F7, r25
    284e:	80 93 f6 03 	sts	0x03F6, r24
}
    2852:	08 95       	ret

00002854 <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2854:	1f 92       	push	r1
    2856:	0f 92       	push	r0
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	0f 92       	push	r0
    285c:	11 24       	eor	r1, r1
    285e:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2860:	81 b3       	in	r24, 0x11	; 17
    2862:	8a 7c       	andi	r24, 0xCA	; 202
    2864:	81 bb       	out	0x11, r24	; 17
}
    2866:	8f 91       	pop	r24
    2868:	0f 90       	pop	r0
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	0f 90       	pop	r0
    286e:	1f 90       	pop	r1
    2870:	18 95       	reti

00002872 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2872:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2874:	08 95       	ret

00002876 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2876:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2878:	08 95       	ret

0000287a <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    287a:	3c 99       	sbic	0x07, 4	; 7
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <st_is_enabled+0xa>
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	07 c0       	rjmp	.+14     	; 0x2892 <st_is_enabled+0x18>
    2884:	88 b1       	in	r24, 0x08	; 8
    2886:	82 95       	swap	r24
    2888:	8f 70       	andi	r24, 0x0F	; 15
    288a:	80 95       	com	r24
    288c:	81 70       	andi	r24, 0x01	; 1
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2892:	c9 01       	movw	r24, r18
    2894:	08 95       	ret

00002896 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2896:	60 30       	cpi	r22, 0x00	; 0
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	72 07       	cpc	r23, r18
    289c:	21 e0       	ldi	r18, 0x01	; 1
    289e:	82 07       	cpc	r24, r18
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	92 07       	cpc	r25, r18
    28a4:	30 f4       	brcc	.+12     	; 0x28b2 <config_step_timer+0x1c>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    28a6:	9b 01       	movw	r18, r22
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	e0 e0       	ldi	r30, 0x00	; 0
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	72 c0       	rjmp	.+228    	; 0x2996 <config_step_timer+0x100>
	} else if (cycles <= 0x7ffffL) {
    28b2:	60 30       	cpi	r22, 0x00	; 0
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	72 07       	cpc	r23, r18
    28b8:	28 e0       	ldi	r18, 0x08	; 8
    28ba:	82 07       	cpc	r24, r18
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	92 07       	cpc	r25, r18
    28c0:	a0 f4       	brcc	.+40     	; 0x28ea <config_step_timer+0x54>
    ceiling = cycles >> 3;
    28c2:	b3 e0       	ldi	r27, 0x03	; 3
    28c4:	96 95       	lsr	r25
    28c6:	87 95       	ror	r24
    28c8:	77 95       	ror	r23
    28ca:	67 95       	ror	r22
    28cc:	ba 95       	dec	r27
    28ce:	d1 f7       	brne	.-12     	; 0x28c4 <config_step_timer+0x2e>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    28d0:	9b 01       	movw	r18, r22
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	a3 e0       	ldi	r26, 0x03	; 3
    28d8:	22 0f       	add	r18, r18
    28da:	33 1f       	adc	r19, r19
    28dc:	44 1f       	adc	r20, r20
    28de:	55 1f       	adc	r21, r21
    28e0:	aa 95       	dec	r26
    28e2:	d1 f7       	brne	.-12     	; 0x28d8 <config_step_timer+0x42>
    28e4:	e1 e0       	ldi	r30, 0x01	; 1
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	56 c0       	rjmp	.+172    	; 0x2996 <config_step_timer+0x100>
	} else if (cycles <= 0x3fffffL) {
    28ea:	60 30       	cpi	r22, 0x00	; 0
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	72 07       	cpc	r23, r18
    28f0:	20 e4       	ldi	r18, 0x40	; 64
    28f2:	82 07       	cpc	r24, r18
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	92 07       	cpc	r25, r18
    28f8:	a0 f4       	brcc	.+40     	; 0x2922 <config_step_timer+0x8c>
		ceiling =  cycles >> 6;
    28fa:	f6 e0       	ldi	r31, 0x06	; 6
    28fc:	96 95       	lsr	r25
    28fe:	87 95       	ror	r24
    2900:	77 95       	ror	r23
    2902:	67 95       	ror	r22
    2904:	fa 95       	dec	r31
    2906:	d1 f7       	brne	.-12     	; 0x28fc <config_step_timer+0x66>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    2908:	9b 01       	movw	r18, r22
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	e6 e0       	ldi	r30, 0x06	; 6
    2910:	22 0f       	add	r18, r18
    2912:	33 1f       	adc	r19, r19
    2914:	44 1f       	adc	r20, r20
    2916:	55 1f       	adc	r21, r21
    2918:	ea 95       	dec	r30
    291a:	d1 f7       	brne	.-12     	; 0x2910 <config_step_timer+0x7a>
    291c:	e2 e0       	ldi	r30, 0x02	; 2
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	3a c0       	rjmp	.+116    	; 0x2996 <config_step_timer+0x100>
	} else if (cycles <= 0xffffffL) {
    2922:	60 30       	cpi	r22, 0x00	; 0
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	72 07       	cpc	r23, r18
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	82 07       	cpc	r24, r18
    292c:	21 e0       	ldi	r18, 0x01	; 1
    292e:	92 07       	cpc	r25, r18
    2930:	70 f4       	brcc	.+28     	; 0x294e <config_step_timer+0xb8>
		ceiling =  (cycles >> 8);
    2932:	bb 27       	eor	r27, r27
    2934:	a9 2f       	mov	r26, r25
    2936:	98 2f       	mov	r25, r24
    2938:	87 2f       	mov	r24, r23
    293a:	bc 01       	movw	r22, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    293c:	a0 e0       	ldi	r26, 0x00	; 0
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	22 27       	eor	r18, r18
    2942:	38 2f       	mov	r19, r24
    2944:	49 2f       	mov	r20, r25
    2946:	5a 2f       	mov	r21, r26
    2948:	e3 e0       	ldi	r30, 0x03	; 3
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	24 c0       	rjmp	.+72     	; 0x2996 <config_step_timer+0x100>
	} else if (cycles <= 0x3ffffffL) {
    294e:	60 30       	cpi	r22, 0x00	; 0
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	72 07       	cpc	r23, r18
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	82 07       	cpc	r24, r18
    2958:	24 e0       	ldi	r18, 0x04	; 4
    295a:	92 07       	cpc	r25, r18
    295c:	48 f0       	brcs	.+18     	; 0x2970 <config_step_timer+0xda>
    295e:	6f ef       	ldi	r22, 0xFF	; 255
    2960:	7f ef       	ldi	r23, 0xFF	; 255
    2962:	e4 e0       	ldi	r30, 0x04	; 4
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3c ef       	ldi	r19, 0xFC	; 252
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	13 c0       	rjmp	.+38     	; 0x2996 <config_step_timer+0x100>
		ceiling = (cycles >> 10);
    2970:	2a e0       	ldi	r18, 0x0A	; 10
    2972:	96 95       	lsr	r25
    2974:	87 95       	ror	r24
    2976:	77 95       	ror	r23
    2978:	67 95       	ror	r22
    297a:	2a 95       	dec	r18
    297c:	d1 f7       	brne	.-12     	; 0x2972 <config_step_timer+0xdc>
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    297e:	9b 01       	movw	r18, r22
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	8a e0       	ldi	r24, 0x0A	; 10
    2986:	22 0f       	add	r18, r18
    2988:	33 1f       	adc	r19, r19
    298a:	44 1f       	adc	r20, r20
    298c:	55 1f       	adc	r21, r21
    298e:	8a 95       	dec	r24
    2990:	d1 f7       	brne	.-12     	; 0x2986 <config_step_timer+0xf0>
    2992:	e4 e0       	ldi	r30, 0x04	; 4
    2994:	f0 e0       	ldi	r31, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    2996:	80 91 81 00 	lds	r24, 0x0081
    299a:	9e 2f       	mov	r25, r30
    299c:	9f 5f       	subi	r25, 0xFF	; 255
    299e:	88 7f       	andi	r24, 0xF8	; 248
    29a0:	98 2b       	or	r25, r24
    29a2:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    29a6:	70 93 89 00 	sts	0x0089, r23
    29aa:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}
    29ae:	b9 01       	movw	r22, r18
    29b0:	ca 01       	movw	r24, r20
    29b2:	08 95       	ret

000029b4 <set_step_events_per_minute>:

void set_step_events_per_minute(uint32_t steps_per_minute) {
    29b4:	9b 01       	movw	r18, r22
    29b6:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    29b8:	20 3b       	cpi	r18, 0xB0	; 176
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	38 07       	cpc	r19, r24
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	48 07       	cpc	r20, r24
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	58 07       	cpc	r21, r24
    29c6:	20 f4       	brcc	.+8      	; 0x29d0 <set_step_events_per_minute+0x1c>
    29c8:	20 eb       	ldi	r18, 0xB0	; 176
    29ca:	34 e0       	ldi	r19, 0x04	; 4
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	70 e7       	ldi	r23, 0x70	; 112
    29d4:	88 e3       	ldi	r24, 0x38	; 56
    29d6:	99 e3       	ldi	r25, 0x39	; 57
    29d8:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__udivmodsi4>
    29dc:	ca 01       	movw	r24, r20
    29de:	b9 01       	movw	r22, r18
    29e0:	0e 94 4b 14 	call	0x2896	; 0x2896 <config_step_timer>
    29e4:	60 93 f8 03 	sts	0x03F8, r22
    29e8:	70 93 f9 03 	sts	0x03F9, r23
    29ec:	80 93 fa 03 	sts	0x03FA, r24
    29f0:	90 93 fb 03 	sts	0x03FB, r25
}
    29f4:	08 95       	ret

000029f6 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    29f6:	80 b3       	in	r24, 0x10	; 16
    29f8:	85 63       	ori	r24, 0x35	; 53
    29fa:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    29fc:	80 b3       	in	r24, 0x10	; 16
    29fe:	8a 6c       	ori	r24, 0xCA	; 202
    2a00:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    2a02:	81 b3       	in	r24, 0x11	; 17
    2a04:	8a 7c       	andi	r24, 0xCA	; 202
    2a06:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2a08:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2a0a:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    2a0c:	e1 e8       	ldi	r30, 0x81	; 129
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	8f 7e       	andi	r24, 0xEF	; 239
    2a14:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2a16:	80 81       	ld	r24, Z
    2a18:	88 60       	ori	r24, 0x08	; 8
    2a1a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    2a1c:	e0 e8       	ldi	r30, 0x80	; 128
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	8d 7f       	andi	r24, 0xFD	; 253
    2a24:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2a26:	80 81       	ld	r24, Z
    2a28:	8e 7f       	andi	r24, 0xFE	; 254
    2a2a:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8f 73       	andi	r24, 0x3F	; 63
    2a30:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    2a32:	80 81       	ld	r24, Z
    2a34:	8f 7c       	andi	r24, 0xCF	; 207
    2a36:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    2a38:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    2a42:	e0 e7       	ldi	r30, 0x70	; 112
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	81 60       	ori	r24, 0x01	; 1
    2a4a:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    2a4c:	60 e7       	ldi	r22, 0x70	; 112
    2a4e:	77 e1       	ldi	r23, 0x17	; 23
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 da 14 	call	0x29b4	; 0x29b4 <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2a58:	ef e6       	ldi	r30, 0x6F	; 111
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	8d 7f       	andi	r24, 0xFD	; 253
    2a60:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    2a62:	10 92 fc 03 	sts	0x03FC, r1
    2a66:	10 92 fd 03 	sts	0x03FD, r1
    2a6a:	10 92 fe 03 	sts	0x03FE, r1
    2a6e:	10 92 ff 03 	sts	0x03FF, r1
  
  sei();
    2a72:	78 94       	sei
}
    2a74:	08 95       	ret

00002a76 <moveLeft>:
enum {
	STOP,LEFT,RIGHT,FORWARD,BACK
};

void moveLeft( unsigned int distance ) 
{
    2a76:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2a78:	81 b3       	in	r24, 0x11	; 17
    2a7a:	85 73       	andi	r24, 0x35	; 53
    2a7c:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a7e:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a80:	40 e6       	ldi	r20, 0x60	; 96
    2a82:	54 e0       	ldi	r21, 0x04	; 4
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <moveLeft+0x2e>
  // Then pulse the stepping pins
  while(distance--) {
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2a86:	81 b3       	in	r24, 0x11	; 17
    2a88:	8a 7c       	andi	r24, 0xCA	; 202
    2a8a:	81 60       	ori	r24, 0x01	; 1
    2a8c:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a8e:	89 2f       	mov	r24, r25
    2a90:	8a 95       	dec	r24
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <moveLeft+0x1a>
	 _delay_us( 7 ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2a94:	81 b3       	in	r24, 0x11	; 17
    2a96:	8a 7c       	andi	r24, 0xCA	; 202
    2a98:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a9a:	fa 01       	movw	r30, r20
    2a9c:	31 97       	sbiw	r30, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <moveLeft+0x26>
    2aa0:	21 50       	subi	r18, 0x01	; 1
    2aa2:	30 40       	sbci	r19, 0x00	; 0
void moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2aa4:	21 15       	cp	r18, r1
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	71 f7       	brne	.-36     	; 0x2a86 <moveLeft+0x10>
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
	 _delay_us( 7 ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( 280 ) ;
  }
}
    2aaa:	08 95       	ret

00002aac <moveRight>:

void moveRight( unsigned int distance ) 
{
    2aac:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    2aae:	81 b3       	in	r24, 0x11	; 17
    2ab0:	85 73       	andi	r24, 0x35	; 53
    2ab2:	82 60       	ori	r24, 0x02	; 2
    2ab4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ab6:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ab8:	40 e6       	ldi	r20, 0x60	; 96
    2aba:	54 e0       	ldi	r21, 0x04	; 4
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <moveRight+0x30>
  // Then pulse the stepping pins
  while(distance--) {
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2abe:	81 b3       	in	r24, 0x11	; 17
    2ac0:	8a 7c       	andi	r24, 0xCA	; 202
    2ac2:	81 60       	ori	r24, 0x01	; 1
    2ac4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ac6:	89 2f       	mov	r24, r25
    2ac8:	8a 95       	dec	r24
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <moveRight+0x1c>
	 _delay_us( 7 ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    2acc:	81 b3       	in	r24, 0x11	; 17
    2ace:	8a 7c       	andi	r24, 0xCA	; 202
    2ad0:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ad2:	fa 01       	movw	r30, r20
    2ad4:	31 97       	sbiw	r30, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <moveRight+0x28>
    2ad8:	21 50       	subi	r18, 0x01	; 1
    2ada:	30 40       	sbci	r19, 0x00	; 0
void moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2adc:	21 15       	cp	r18, r1
    2ade:	31 05       	cpc	r19, r1
    2ae0:	71 f7       	brne	.-36     	; 0x2abe <moveRight+0x12>
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
	 _delay_us( 7 ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( 280 ) ;
  }
}
    2ae2:	08 95       	ret

00002ae4 <moveForward>:

void moveForward( unsigned int distance ) 
{
    2ae4:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2ae6:	81 b3       	in	r24, 0x11	; 17
    2ae8:	85 73       	andi	r24, 0x35	; 53
    2aea:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aec:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2aee:	40 e6       	ldi	r20, 0x60	; 96
    2af0:	54 e0       	ldi	r21, 0x04	; 4
    2af2:	0f c0       	rjmp	.+30     	; 0x2b12 <moveForward+0x2e>
  // Then pulse the stepping pins
  while(distance--) {
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2af4:	81 b3       	in	r24, 0x11	; 17
    2af6:	8a 7c       	andi	r24, 0xCA	; 202
    2af8:	84 60       	ori	r24, 0x04	; 4
    2afa:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2afc:	89 2f       	mov	r24, r25
    2afe:	8a 95       	dec	r24
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <moveForward+0x1a>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2b02:	81 b3       	in	r24, 0x11	; 17
    2b04:	8a 7c       	andi	r24, 0xCA	; 202
    2b06:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b08:	fa 01       	movw	r30, r20
    2b0a:	31 97       	sbiw	r30, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <moveForward+0x26>
    2b0e:	21 50       	subi	r18, 0x01	; 1
    2b10:	30 40       	sbci	r19, 0x00	; 0
void moveForward( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2b12:	21 15       	cp	r18, r1
    2b14:	31 05       	cpc	r19, r1
    2b16:	71 f7       	brne	.-36     	; 0x2af4 <moveForward+0x10>
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( 280 ) ;
  }
}
    2b18:	08 95       	ret

00002b1a <moveBack>:

void moveBack( unsigned int distance ) 
{
    2b1a:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    2b1c:	81 b3       	in	r24, 0x11	; 17
    2b1e:	85 73       	andi	r24, 0x35	; 53
    2b20:	88 60       	ori	r24, 0x08	; 8
    2b22:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b24:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b26:	40 e6       	ldi	r20, 0x60	; 96
    2b28:	54 e0       	ldi	r21, 0x04	; 4
    2b2a:	0f c0       	rjmp	.+30     	; 0x2b4a <moveBack+0x30>
  // Then pulse the stepping pins
  while(distance--) {
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2b2c:	81 b3       	in	r24, 0x11	; 17
    2b2e:	8a 7c       	andi	r24, 0xCA	; 202
    2b30:	84 60       	ori	r24, 0x04	; 4
    2b32:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b34:	89 2f       	mov	r24, r25
    2b36:	8a 95       	dec	r24
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <moveBack+0x1c>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2b3a:	81 b3       	in	r24, 0x11	; 17
    2b3c:	8a 7c       	andi	r24, 0xCA	; 202
    2b3e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b40:	fa 01       	movw	r30, r20
    2b42:	31 97       	sbiw	r30, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <moveBack+0x28>
    2b46:	21 50       	subi	r18, 0x01	; 1
    2b48:	30 40       	sbci	r19, 0x00	; 0
void moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2b4a:	21 15       	cp	r18, r1
    2b4c:	31 05       	cpc	r19, r1
    2b4e:	71 f7       	brne	.-36     	; 0x2b2c <moveBack+0x12>
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( 280 ) ;
  }
}
    2b50:	08 95       	ret

00002b52 <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    2b52:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    2b58:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    2b5a:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    2b5c:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    2b5e:	9f e8       	ldi	r25, 0x8F	; 143
    2b60:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    2b62:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    2b64:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    2b68:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    2b6c:	3f ec       	ldi	r19, 0xCF	; 207
    2b6e:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    2b72:	20 ef       	ldi	r18, 0xF0	; 240
    2b74:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    2b78:	8c e9       	ldi	r24, 0x9C	; 156
    2b7a:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    2b7c:	82 e2       	ldi	r24, 0x22	; 34
    2b7e:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    2b80:	83 e1       	ldi	r24, 0x13	; 19
    2b82:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    2b84:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    2b86:	80 e3       	ldi	r24, 0x30	; 48
    2b88:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    2b8a:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    2b8c:	83 e2       	ldi	r24, 0x23	; 35
    2b8e:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    2b96:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    2b9a:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    2b9e:	20 93 0b 01 	sts	0x010B, r18
}
    2ba2:	08 95       	ret

00002ba4 <st_go_home>:
	// default direction is to go left and forward
	unsigned char xDir = LEFT;
	unsigned char yDir = FORWARD;

	// not homed
	gHomed = FALSE;
    2ba4:	10 92 dd 03 	sts	0x03DD, r1

	// no interrupts
	cli();
    2ba8:	f8 94       	cli

	printPgmString(PSTR("homing\r\n"));
    2baa:	8f ef       	ldi	r24, 0xFF	; 255
    2bac:	94 e0       	ldi	r25, 0x04	; 4
    2bae:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    2bb2:	4b 9b       	sbis	0x09, 3	; 9
    2bb4:	0a c0       	rjmp	.+20     	; 0x2bca <st_go_home+0x26>
		// no longer homed
		gHomed = FALSE;
    2bb6:	10 92 dd 03 	sts	0x03DD, r1
		printPgmString(PSTR("xLimit1\r\n"));
    2bba:	88 e0       	ldi	r24, 0x08	; 8
    2bbc:	95 e0       	ldi	r25, 0x05	; 5
    2bbe:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

	// If in left most limit, move to right > more than size of home and limit area
	if( xLimit1() ) {

		// move out far enough that the home and limit switches are passed
		moveRight( 1000 );
    2bc2:	88 ee       	ldi	r24, 0xE8	; 232
    2bc4:	93 e0       	ldi	r25, 0x03	; 3
    2bc6:	0e 94 56 15 	call	0x2aac	; 0x2aac <moveRight>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    2bca:	48 9b       	sbis	0x09, 0	; 9
    2bcc:	0a c0       	rjmp	.+20     	; 0x2be2 <st_go_home+0x3e>
		// no longer homed
		gHomed = FALSE;
    2bce:	10 92 dd 03 	sts	0x03DD, r1
		printPgmString(PSTR("yLimit1\r\n"));
    2bd2:	82 e1       	ldi	r24, 0x12	; 18
    2bd4:	95 e0       	ldi	r25, 0x05	; 5
    2bd6:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
	}

	// If in front most limit, move to right > more than size of home and limit area
	if( yLimit1() ) {
		// move out far enough that the home and limit switches are passed
		moveBack( 1000 );
    2bda:	88 ee       	ldi	r24, 0xE8	; 232
    2bdc:	93 e0       	ldi	r25, 0x03	; 3
    2bde:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <moveBack>

	// at here, we are definitely not in home, and also not in the XL2/Yl2 limits
	do {

		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    2be2:	04 99       	sbic	0x00, 4	; 0
    2be4:	05 c0       	rjmp	.+10     	; 0x2bf0 <st_go_home+0x4c>
			xDir = STOP;
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			moveLeft(1);
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <moveLeft>
    2bee:	f9 cf       	rjmp	.-14     	; 0x2be2 <st_go_home+0x3e>


	}while( xDir != STOP );

	do {
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    2bf0:	90 99       	sbic	0x12, 0	; 18
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <st_go_home+0x5a>
			yDir = STOP;
		}

		if ( yDir == FORWARD ) {
			moveForward(1);
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <moveForward>
    2bfc:	f9 cf       	rjmp	.-14     	; 0x2bf0 <st_go_home+0x4c>
		}

	} while( yDir != STOP );

	sei();
    2bfe:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )
    2c00:	89 b1       	in	r24, 0x09	; 9
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	8f 70       	andi	r24, 0x0F	; 15
    2c06:	90 70       	andi	r25, 0x00	; 0
    2c08:	89 2b       	or	r24, r25
    2c0a:	31 f4       	brne	.+12     	; 0x2c18 <st_go_home+0x74>
   {
		gHomed = TRUE ;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	80 93 dd 03 	sts	0x03DD, r24
		printPgmString(PSTR("pickobear is homed\r\n"));
    2c12:	8a ee       	ldi	r24, 0xEA	; 234
    2c14:	94 e0       	ldi	r25, 0x04	; 4
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <st_go_home+0x78>
		return;
	}

	printPgmString(PSTR("pickobear is not homed\r\n"));
    2c18:	81 ed       	ldi	r24, 0xD1	; 209
    2c1a:	94 e0       	ldi	r25, 0x04	; 4
    2c1c:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
    2c20:	08 95       	ret

00002c22 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    2c22:	07 c0       	rjmp	.+14     	; 0x2c32 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    2c24:	83 b7       	in	r24, 0x33	; 51
    2c26:	81 60       	ori	r24, 0x01	; 1
    2c28:	83 bf       	out	0x33, r24	; 51
    2c2a:	88 95       	sleep
    2c2c:	83 b7       	in	r24, 0x33	; 51
    2c2e:	8e 7f       	andi	r24, 0xFE	; 254
    2c30:	83 bf       	out	0x33, r24	; 51
    2c32:	0e 94 2a 09 	call	0x1254	; 0x1254 <plan_get_current_block>
    2c36:	89 2b       	or	r24, r25
    2c38:	a9 f7       	brne	.-22     	; 0x2c24 <st_synchronize+0x2>
}
    2c3a:	08 95       	ret

00002c3c <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    2c3c:	1f 92       	push	r1
    2c3e:	0f 92       	push	r0
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	0f 92       	push	r0
    2c44:	0b b6       	in	r0, 0x3b	; 59
    2c46:	0f 92       	push	r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	ef 92       	push	r14
    2c4c:	ff 92       	push	r15
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	2f 93       	push	r18
    2c54:	3f 93       	push	r19
    2c56:	4f 93       	push	r20
    2c58:	5f 93       	push	r21
    2c5a:	6f 93       	push	r22
    2c5c:	7f 93       	push	r23
    2c5e:	8f 93       	push	r24
    2c60:	9f 93       	push	r25
    2c62:	af 93       	push	r26
    2c64:	bf 93       	push	r27
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	ef 93       	push	r30
    2c6c:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

// don't move if the head is down  
  if( is_head_down() )
    2c6e:	0e 94 09 1b 	call	0x3612	; 0x3612 <is_head_down>
    2c72:	88 23       	and	r24, r24
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <__vector_17+0x3c>
    2c76:	6c c2       	rjmp	.+1240   	; 0x3150 <__vector_17+0x514>
  	return;

  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    2c78:	80 91 f6 03 	lds	r24, 0x03F6
    2c7c:	90 91 f7 03 	lds	r25, 0x03F7
    2c80:	89 2b       	or	r24, r25
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <__vector_17+0x4a>
    2c84:	65 c2       	rjmp	.+1226   	; 0x3150 <__vector_17+0x514>

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    2c86:	89 b1       	in	r24, 0x09	; 9
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	8f 70       	andi	r24, 0x0F	; 15
    2c8c:	90 70       	andi	r25, 0x00	; 0
    2c8e:	89 2b       	or	r24, r25
    2c90:	19 f0       	breq	.+6      	; 0x2c98 <__vector_17+0x5c>
  	gHomed = FALSE ;
    2c92:	10 92 dd 03 	sts	0x03DD, r1
    2c96:	5c c2       	rjmp	.+1208   	; 0x3150 <__vector_17+0x514>
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    2c98:	91 b3       	in	r25, 0x11	; 17
    2c9a:	80 91 e1 03 	lds	r24, 0x03E1
    2c9e:	8a 7c       	andi	r24, 0xCA	; 202
    2ca0:	95 73       	andi	r25, 0x35	; 53
    2ca2:	89 2b       	or	r24, r25
    2ca4:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    2ca6:	81 b3       	in	r24, 0x11	; 17
    2ca8:	8a 7c       	andi	r24, 0xCA	; 202
    2caa:	90 91 e0 03 	lds	r25, 0x03E0
    2cae:	89 2b       	or	r24, r25
    2cb0:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    2cb2:	80 91 19 05 	lds	r24, 0x0519
    2cb6:	88 0f       	add	r24, r24
    2cb8:	84 50       	subi	r24, 0x04	; 4
    2cba:	81 95       	neg	r24
    2cbc:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    2cc0:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	90 93 f7 03 	sts	0x03F7, r25
    2cca:	80 93 f6 03 	sts	0x03F6, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    2cce:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    2cd0:	80 91 de 03 	lds	r24, 0x03DE
    2cd4:	90 91 df 03 	lds	r25, 0x03DF
    2cd8:	89 2b       	or	r24, r25
    2cda:	09 f0       	breq	.+2      	; 0x2cde <__vector_17+0xa2>
    2cdc:	5d c0       	rjmp	.+186    	; 0x2d98 <__vector_17+0x15c>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    2cde:	0e 94 2a 09 	call	0x1254	; 0x1254 <plan_get_current_block>
    2ce2:	ec 01       	movw	r28, r24
    2ce4:	90 93 df 03 	sts	0x03DF, r25
    2ce8:	80 93 de 03 	sts	0x03DE, r24
    if (current_block != NULL) {
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <__vector_17+0xb6>
    2cf0:	4e c0       	rjmp	.+156    	; 0x2d8e <__vector_17+0x152>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    2cf2:	6d a9       	ldd	r22, Y+53	; 0x35
    2cf4:	7e a9       	ldd	r23, Y+54	; 0x36
    2cf6:	8f a9       	ldd	r24, Y+55	; 0x37
    2cf8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cfa:	60 93 00 04 	sts	0x0400, r22
    2cfe:	70 93 01 04 	sts	0x0401, r23
    2d02:	80 93 02 04 	sts	0x0402, r24
    2d06:	90 93 03 04 	sts	0x0403, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    2d0a:	10 92 fc 03 	sts	0x03FC, r1
    2d0e:	10 92 fd 03 	sts	0x03FD, r1
    2d12:	10 92 fe 03 	sts	0x03FE, r1
    2d16:	10 92 ff 03 	sts	0x03FF, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    2d1a:	0e 94 da 14 	call	0x29b4	; 0x29b4 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    2d1e:	89 89       	ldd	r24, Y+17	; 0x11
    2d20:	9a 89       	ldd	r25, Y+18	; 0x12
    2d22:	ab 89       	ldd	r26, Y+19	; 0x13
    2d24:	bc 89       	ldd	r27, Y+20	; 0x14
    2d26:	b5 95       	asr	r27
    2d28:	a7 95       	ror	r26
    2d2a:	97 95       	ror	r25
    2d2c:	87 95       	ror	r24
    2d2e:	b0 95       	com	r27
    2d30:	a0 95       	com	r26
    2d32:	90 95       	com	r25
    2d34:	81 95       	neg	r24
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	af 4f       	sbci	r26, 0xFF	; 255
    2d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3c:	80 93 e2 03 	sts	0x03E2, r24
    2d40:	90 93 e3 03 	sts	0x03E3, r25
    2d44:	a0 93 e4 03 	sts	0x03E4, r26
    2d48:	b0 93 e5 03 	sts	0x03E5, r27
      counter_y = counter_x;
    2d4c:	80 93 e6 03 	sts	0x03E6, r24
    2d50:	90 93 e7 03 	sts	0x03E7, r25
    2d54:	a0 93 e8 03 	sts	0x03E8, r26
    2d58:	b0 93 e9 03 	sts	0x03E9, r27
      counter_z = counter_x;
    2d5c:	80 93 ea 03 	sts	0x03EA, r24
    2d60:	90 93 eb 03 	sts	0x03EB, r25
    2d64:	a0 93 ec 03 	sts	0x03EC, r26
    2d68:	b0 93 ed 03 	sts	0x03ED, r27
      counter_c = counter_x;
    2d6c:	80 93 ee 03 	sts	0x03EE, r24
    2d70:	90 93 ef 03 	sts	0x03EF, r25
    2d74:	a0 93 f0 03 	sts	0x03F0, r26
    2d78:	b0 93 f1 03 	sts	0x03F1, r27
      step_events_completed = 0;
    2d7c:	10 92 f2 03 	sts	0x03F2, r1
    2d80:	10 92 f3 03 	sts	0x03F3, r1
    2d84:	10 92 f4 03 	sts	0x03F4, r1
    2d88:	10 92 f5 03 	sts	0x03F5, r1
    2d8c:	05 c0       	rjmp	.+10     	; 0x2d98 <__vector_17+0x15c>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    2d8e:	80 91 6f 00 	lds	r24, 0x006F
    2d92:	8d 7f       	andi	r24, 0xFD	; 253
    2d94:	80 93 6f 00 	sts	0x006F, r24
    }    
  } 

  if (current_block != NULL) {
    2d98:	e0 91 de 03 	lds	r30, 0x03DE
    2d9c:	f0 91 df 03 	lds	r31, 0x03DF
    2da0:	30 97       	sbiw	r30, 0x00	; 0
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <__vector_17+0x16a>
    2da4:	ee c0       	rjmp	.+476    	; 0x2f82 <__vector_17+0x346>
    dir_bits = current_block->direction_bits;
    2da6:	80 89       	ldd	r24, Z+16	; 0x10
    2da8:	80 93 e1 03 	sts	0x03E1, r24
    out_bits = 0;
    2dac:	10 92 e0 03 	sts	0x03E0, r1
    counter_x += current_block->steps_x;
    2db0:	20 91 e2 03 	lds	r18, 0x03E2
    2db4:	30 91 e3 03 	lds	r19, 0x03E3
    2db8:	40 91 e4 03 	lds	r20, 0x03E4
    2dbc:	50 91 e5 03 	lds	r21, 0x03E5
    2dc0:	80 81       	ld	r24, Z
    2dc2:	91 81       	ldd	r25, Z+1	; 0x01
    2dc4:	a2 81       	ldd	r26, Z+2	; 0x02
    2dc6:	b3 81       	ldd	r27, Z+3	; 0x03
    2dc8:	28 0f       	add	r18, r24
    2dca:	39 1f       	adc	r19, r25
    2dcc:	4a 1f       	adc	r20, r26
    2dce:	5b 1f       	adc	r21, r27
    2dd0:	20 93 e2 03 	sts	0x03E2, r18
    2dd4:	30 93 e3 03 	sts	0x03E3, r19
    2dd8:	40 93 e4 03 	sts	0x03E4, r20
    2ddc:	50 93 e5 03 	sts	0x03E5, r21
    if (counter_x > 0) {
    2de0:	12 16       	cp	r1, r18
    2de2:	13 06       	cpc	r1, r19
    2de4:	14 06       	cpc	r1, r20
    2de6:	15 06       	cpc	r1, r21
    2de8:	9c f4       	brge	.+38     	; 0x2e10 <__vector_17+0x1d4>
      out_bits |= (1<<X_STEP_BIT);
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	80 93 e0 03 	sts	0x03E0, r24
      counter_x -= current_block->step_event_count;
    2df0:	81 89       	ldd	r24, Z+17	; 0x11
    2df2:	92 89       	ldd	r25, Z+18	; 0x12
    2df4:	a3 89       	ldd	r26, Z+19	; 0x13
    2df6:	b4 89       	ldd	r27, Z+20	; 0x14
    2df8:	28 1b       	sub	r18, r24
    2dfa:	39 0b       	sbc	r19, r25
    2dfc:	4a 0b       	sbc	r20, r26
    2dfe:	5b 0b       	sbc	r21, r27
    2e00:	20 93 e2 03 	sts	0x03E2, r18
    2e04:	30 93 e3 03 	sts	0x03E3, r19
    2e08:	40 93 e4 03 	sts	0x03E4, r20
    2e0c:	50 93 e5 03 	sts	0x03E5, r21
    }
    counter_y += current_block->steps_y;
    2e10:	20 91 e6 03 	lds	r18, 0x03E6
    2e14:	30 91 e7 03 	lds	r19, 0x03E7
    2e18:	40 91 e8 03 	lds	r20, 0x03E8
    2e1c:	50 91 e9 03 	lds	r21, 0x03E9
    2e20:	84 81       	ldd	r24, Z+4	; 0x04
    2e22:	95 81       	ldd	r25, Z+5	; 0x05
    2e24:	a6 81       	ldd	r26, Z+6	; 0x06
    2e26:	b7 81       	ldd	r27, Z+7	; 0x07
    2e28:	28 0f       	add	r18, r24
    2e2a:	39 1f       	adc	r19, r25
    2e2c:	4a 1f       	adc	r20, r26
    2e2e:	5b 1f       	adc	r21, r27
    2e30:	20 93 e6 03 	sts	0x03E6, r18
    2e34:	30 93 e7 03 	sts	0x03E7, r19
    2e38:	40 93 e8 03 	sts	0x03E8, r20
    2e3c:	50 93 e9 03 	sts	0x03E9, r21
    if (counter_y > 0) {
    2e40:	12 16       	cp	r1, r18
    2e42:	13 06       	cpc	r1, r19
    2e44:	14 06       	cpc	r1, r20
    2e46:	15 06       	cpc	r1, r21
    2e48:	ac f4       	brge	.+42     	; 0x2e74 <__vector_17+0x238>
      out_bits |= (1<<Y_STEP_BIT);
    2e4a:	80 91 e0 03 	lds	r24, 0x03E0
    2e4e:	84 60       	ori	r24, 0x04	; 4
    2e50:	80 93 e0 03 	sts	0x03E0, r24
      counter_y -= current_block->step_event_count;
    2e54:	81 89       	ldd	r24, Z+17	; 0x11
    2e56:	92 89       	ldd	r25, Z+18	; 0x12
    2e58:	a3 89       	ldd	r26, Z+19	; 0x13
    2e5a:	b4 89       	ldd	r27, Z+20	; 0x14
    2e5c:	28 1b       	sub	r18, r24
    2e5e:	39 0b       	sbc	r19, r25
    2e60:	4a 0b       	sbc	r20, r26
    2e62:	5b 0b       	sbc	r21, r27
    2e64:	20 93 e6 03 	sts	0x03E6, r18
    2e68:	30 93 e7 03 	sts	0x03E7, r19
    2e6c:	40 93 e8 03 	sts	0x03E8, r20
    2e70:	50 93 e9 03 	sts	0x03E9, r21
    }
    counter_z += current_block->steps_z;
    2e74:	20 91 ea 03 	lds	r18, 0x03EA
    2e78:	30 91 eb 03 	lds	r19, 0x03EB
    2e7c:	40 91 ec 03 	lds	r20, 0x03EC
    2e80:	50 91 ed 03 	lds	r21, 0x03ED
    2e84:	80 85       	ldd	r24, Z+8	; 0x08
    2e86:	91 85       	ldd	r25, Z+9	; 0x09
    2e88:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e8a:	b3 85       	ldd	r27, Z+11	; 0x0b
    2e8c:	28 0f       	add	r18, r24
    2e8e:	39 1f       	adc	r19, r25
    2e90:	4a 1f       	adc	r20, r26
    2e92:	5b 1f       	adc	r21, r27
    2e94:	20 93 ea 03 	sts	0x03EA, r18
    2e98:	30 93 eb 03 	sts	0x03EB, r19
    2e9c:	40 93 ec 03 	sts	0x03EC, r20
    2ea0:	50 93 ed 03 	sts	0x03ED, r21
    if (counter_z > 0) {
    2ea4:	12 16       	cp	r1, r18
    2ea6:	13 06       	cpc	r1, r19
    2ea8:	14 06       	cpc	r1, r20
    2eaa:	15 06       	cpc	r1, r21
    2eac:	ac f4       	brge	.+42     	; 0x2ed8 <__vector_17+0x29c>
      out_bits |= (1<<Z_STEP_BIT);
    2eae:	80 91 e0 03 	lds	r24, 0x03E0
    2eb2:	80 61       	ori	r24, 0x10	; 16
    2eb4:	80 93 e0 03 	sts	0x03E0, r24
      counter_z -= current_block->step_event_count;
    2eb8:	81 89       	ldd	r24, Z+17	; 0x11
    2eba:	92 89       	ldd	r25, Z+18	; 0x12
    2ebc:	a3 89       	ldd	r26, Z+19	; 0x13
    2ebe:	b4 89       	ldd	r27, Z+20	; 0x14
    2ec0:	28 1b       	sub	r18, r24
    2ec2:	39 0b       	sbc	r19, r25
    2ec4:	4a 0b       	sbc	r20, r26
    2ec6:	5b 0b       	sbc	r21, r27
    2ec8:	20 93 ea 03 	sts	0x03EA, r18
    2ecc:	30 93 eb 03 	sts	0x03EB, r19
    2ed0:	40 93 ec 03 	sts	0x03EC, r20
    2ed4:	50 93 ed 03 	sts	0x03ED, r21
    }
    counter_c += current_block->steps_c;
    2ed8:	20 91 ee 03 	lds	r18, 0x03EE
    2edc:	30 91 ef 03 	lds	r19, 0x03EF
    2ee0:	40 91 f0 03 	lds	r20, 0x03F0
    2ee4:	50 91 f1 03 	lds	r21, 0x03F1
    2ee8:	84 85       	ldd	r24, Z+12	; 0x0c
    2eea:	95 85       	ldd	r25, Z+13	; 0x0d
    2eec:	a6 85       	ldd	r26, Z+14	; 0x0e
    2eee:	b7 85       	ldd	r27, Z+15	; 0x0f
    2ef0:	28 0f       	add	r18, r24
    2ef2:	39 1f       	adc	r19, r25
    2ef4:	4a 1f       	adc	r20, r26
    2ef6:	5b 1f       	adc	r21, r27
    2ef8:	20 93 ee 03 	sts	0x03EE, r18
    2efc:	30 93 ef 03 	sts	0x03EF, r19
    2f00:	40 93 f0 03 	sts	0x03F0, r20
    2f04:	50 93 f1 03 	sts	0x03F1, r21
    if (counter_c > 0) {
    2f08:	12 16       	cp	r1, r18
    2f0a:	13 06       	cpc	r1, r19
    2f0c:	14 06       	cpc	r1, r20
    2f0e:	15 06       	cpc	r1, r21
    2f10:	ac f4       	brge	.+42     	; 0x2f3c <__vector_17+0x300>
      out_bits |= (1<<C_STEP_BIT);
    2f12:	80 91 e0 03 	lds	r24, 0x03E0
    2f16:	80 62       	ori	r24, 0x20	; 32
    2f18:	80 93 e0 03 	sts	0x03E0, r24
      counter_c -= current_block->step_event_count;
    2f1c:	81 89       	ldd	r24, Z+17	; 0x11
    2f1e:	92 89       	ldd	r25, Z+18	; 0x12
    2f20:	a3 89       	ldd	r26, Z+19	; 0x13
    2f22:	b4 89       	ldd	r27, Z+20	; 0x14
    2f24:	28 1b       	sub	r18, r24
    2f26:	39 0b       	sbc	r19, r25
    2f28:	4a 0b       	sbc	r20, r26
    2f2a:	5b 0b       	sbc	r21, r27
    2f2c:	20 93 ee 03 	sts	0x03EE, r18
    2f30:	30 93 ef 03 	sts	0x03EF, r19
    2f34:	40 93 f0 03 	sts	0x03F0, r20
    2f38:	50 93 f1 03 	sts	0x03F1, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    2f3c:	80 91 f2 03 	lds	r24, 0x03F2
    2f40:	90 91 f3 03 	lds	r25, 0x03F3
    2f44:	a0 91 f4 03 	lds	r26, 0x03F4
    2f48:	b0 91 f5 03 	lds	r27, 0x03F5
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	a1 1d       	adc	r26, r1
    2f50:	b1 1d       	adc	r27, r1
    2f52:	80 93 f2 03 	sts	0x03F2, r24
    2f56:	90 93 f3 03 	sts	0x03F3, r25
    2f5a:	a0 93 f4 03 	sts	0x03F4, r26
    2f5e:	b0 93 f5 03 	sts	0x03F5, r27
    if (step_events_completed >= current_block->step_event_count) {
    2f62:	21 89       	ldd	r18, Z+17	; 0x11
    2f64:	32 89       	ldd	r19, Z+18	; 0x12
    2f66:	43 89       	ldd	r20, Z+19	; 0x13
    2f68:	54 89       	ldd	r21, Z+20	; 0x14
    2f6a:	82 17       	cp	r24, r18
    2f6c:	93 07       	cpc	r25, r19
    2f6e:	a4 07       	cpc	r26, r20
    2f70:	b5 07       	cpc	r27, r21
    2f72:	48 f0       	brcs	.+18     	; 0x2f86 <__vector_17+0x34a>
      current_block = NULL;
    2f74:	10 92 df 03 	sts	0x03DF, r1
    2f78:	10 92 de 03 	sts	0x03DE, r1
      plan_discard_current_block();
    2f7c:	0e 94 11 09 	call	0x1222	; 0x1222 <plan_discard_current_block>
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <__vector_17+0x34a>
    }
  } else {
    out_bits = 0;
    2f82:	10 92 e0 03 	sts	0x03E0, r1
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    2f86:	80 91 e1 03 	lds	r24, 0x03E1
    2f8a:	9a e0       	ldi	r25, 0x0A	; 10
    2f8c:	89 27       	eor	r24, r25
    2f8e:	80 93 e1 03 	sts	0x03E1, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    2f92:	20 91 f8 03 	lds	r18, 0x03F8
    2f96:	30 91 f9 03 	lds	r19, 0x03F9
    2f9a:	40 91 fa 03 	lds	r20, 0x03FA
    2f9e:	50 91 fb 03 	lds	r21, 0x03FB
    2fa2:	80 91 fc 03 	lds	r24, 0x03FC
    2fa6:	90 91 fd 03 	lds	r25, 0x03FD
    2faa:	a0 91 fe 03 	lds	r26, 0x03FE
    2fae:	b0 91 ff 03 	lds	r27, 0x03FF
    2fb2:	28 0f       	add	r18, r24
    2fb4:	39 1f       	adc	r19, r25
    2fb6:	4a 1f       	adc	r20, r26
    2fb8:	5b 1f       	adc	r21, r27
    2fba:	20 93 fc 03 	sts	0x03FC, r18
    2fbe:	30 93 fd 03 	sts	0x03FD, r19
    2fc2:	40 93 fe 03 	sts	0x03FE, r20
    2fc6:	50 93 ff 03 	sts	0x03FF, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    2fca:	21 38       	cpi	r18, 0x81	; 129
    2fcc:	8a e1       	ldi	r24, 0x1A	; 26
    2fce:	38 07       	cpc	r19, r24
    2fd0:	86 e0       	ldi	r24, 0x06	; 6
    2fd2:	48 07       	cpc	r20, r24
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	58 07       	cpc	r21, r24
    2fd8:	08 f4       	brcc	.+2      	; 0x2fdc <__vector_17+0x3a0>
    2fda:	b6 c0       	rjmp	.+364    	; 0x3148 <__vector_17+0x50c>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    2fdc:	20 58       	subi	r18, 0x80	; 128
    2fde:	3a 41       	sbci	r19, 0x1A	; 26
    2fe0:	46 40       	sbci	r20, 0x06	; 6
    2fe2:	50 40       	sbci	r21, 0x00	; 0
    2fe4:	20 93 fc 03 	sts	0x03FC, r18
    2fe8:	30 93 fd 03 	sts	0x03FD, r19
    2fec:	40 93 fe 03 	sts	0x03FE, r20
    2ff0:	50 93 ff 03 	sts	0x03FF, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    2ff4:	e0 91 de 03 	lds	r30, 0x03DE
    2ff8:	f0 91 df 03 	lds	r31, 0x03DF
    2ffc:	30 97       	sbiw	r30, 0x00	; 0
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <__vector_17+0x3c6>
    3000:	a3 c0       	rjmp	.+326    	; 0x3148 <__vector_17+0x50c>
    if (step_events_completed < current_block->accelerate_until) {
    3002:	e0 90 f2 03 	lds	r14, 0x03F2
    3006:	f0 90 f3 03 	lds	r15, 0x03F3
    300a:	00 91 f4 03 	lds	r16, 0x03F4
    300e:	10 91 f5 03 	lds	r17, 0x03F5
    3012:	ef 5b       	subi	r30, 0xBF	; 191
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	a2 81       	ldd	r26, Z+2	; 0x02
    301c:	b3 81       	ldd	r27, Z+3	; 0x03
    301e:	e1 54       	subi	r30, 0x41	; 65
    3020:	f0 40       	sbci	r31, 0x00	; 0
    3022:	e8 16       	cp	r14, r24
    3024:	f9 06       	cpc	r15, r25
    3026:	0a 07       	cpc	r16, r26
    3028:	1b 07       	cpc	r17, r27
    302a:	68 f5       	brcc	.+90     	; 0x3086 <__vector_17+0x44a>
      trapezoid_adjusted_rate += current_block->rate_delta;
    302c:	fd 96       	adiw	r30, 0x3d	; 61
    302e:	20 81       	ld	r18, Z
    3030:	31 81       	ldd	r19, Z+1	; 0x01
    3032:	42 81       	ldd	r20, Z+2	; 0x02
    3034:	53 81       	ldd	r21, Z+3	; 0x03
    3036:	fd 97       	sbiw	r30, 0x3d	; 61
    3038:	80 91 00 04 	lds	r24, 0x0400
    303c:	90 91 01 04 	lds	r25, 0x0401
    3040:	a0 91 02 04 	lds	r26, 0x0402
    3044:	b0 91 03 04 	lds	r27, 0x0403
    3048:	28 0f       	add	r18, r24
    304a:	39 1f       	adc	r19, r25
    304c:	4a 1f       	adc	r20, r26
    304e:	5b 1f       	adc	r21, r27
    3050:	20 93 00 04 	sts	0x0400, r18
    3054:	30 93 01 04 	sts	0x0401, r19
    3058:	40 93 02 04 	sts	0x0402, r20
    305c:	50 93 03 04 	sts	0x0403, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3060:	85 89       	ldd	r24, Z+21	; 0x15
    3062:	96 89       	ldd	r25, Z+22	; 0x16
    3064:	a7 89       	ldd	r26, Z+23	; 0x17
    3066:	b0 8d       	ldd	r27, Z+24	; 0x18
    3068:	82 17       	cp	r24, r18
    306a:	93 07       	cpc	r25, r19
    306c:	a4 07       	cpc	r26, r20
    306e:	b5 07       	cpc	r27, r21
    3070:	08 f0       	brcs	.+2      	; 0x3074 <__vector_17+0x438>
    3072:	4e c0       	rjmp	.+156    	; 0x3110 <__vector_17+0x4d4>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3074:	80 93 00 04 	sts	0x0400, r24
    3078:	90 93 01 04 	sts	0x0401, r25
    307c:	a0 93 02 04 	sts	0x0402, r26
    3080:	b0 93 03 04 	sts	0x0403, r27
    3084:	45 c0       	rjmp	.+138    	; 0x3110 <__vector_17+0x4d4>
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3086:	eb 5b       	subi	r30, 0xBB	; 187
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	a2 81       	ldd	r26, Z+2	; 0x02
    3090:	b3 81       	ldd	r27, Z+3	; 0x03
    3092:	e5 54       	subi	r30, 0x45	; 69
    3094:	f0 40       	sbci	r31, 0x00	; 0
    3096:	20 91 00 04 	lds	r18, 0x0400
    309a:	30 91 01 04 	lds	r19, 0x0401
    309e:	40 91 02 04 	lds	r20, 0x0402
    30a2:	50 91 03 04 	lds	r21, 0x0403
    30a6:	8e 15       	cp	r24, r14
    30a8:	9f 05       	cpc	r25, r15
    30aa:	a0 07       	cpc	r26, r16
    30ac:	b1 07       	cpc	r27, r17
    30ae:	c8 f5       	brcc	.+114    	; 0x3122 <__vector_17+0x4e6>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    30b0:	fd 96       	adiw	r30, 0x3d	; 61
    30b2:	80 81       	ld	r24, Z
    30b4:	91 81       	ldd	r25, Z+1	; 0x01
    30b6:	a2 81       	ldd	r26, Z+2	; 0x02
    30b8:	b3 81       	ldd	r27, Z+3	; 0x03
    30ba:	fd 97       	sbiw	r30, 0x3d	; 61
    30bc:	82 17       	cp	r24, r18
    30be:	93 07       	cpc	r25, r19
    30c0:	a4 07       	cpc	r26, r20
    30c2:	b5 07       	cpc	r27, r21
    30c4:	60 f4       	brcc	.+24     	; 0x30de <__vector_17+0x4a2>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    30c6:	28 1b       	sub	r18, r24
    30c8:	39 0b       	sbc	r19, r25
    30ca:	4a 0b       	sbc	r20, r26
    30cc:	5b 0b       	sbc	r21, r27
    30ce:	20 93 00 04 	sts	0x0400, r18
    30d2:	30 93 01 04 	sts	0x0401, r19
    30d6:	40 93 02 04 	sts	0x0402, r20
    30da:	50 93 03 04 	sts	0x0403, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    30de:	21 ad       	ldd	r18, Z+57	; 0x39
    30e0:	32 ad       	ldd	r19, Z+58	; 0x3a
    30e2:	43 ad       	ldd	r20, Z+59	; 0x3b
    30e4:	54 ad       	ldd	r21, Z+60	; 0x3c
    30e6:	80 91 00 04 	lds	r24, 0x0400
    30ea:	90 91 01 04 	lds	r25, 0x0401
    30ee:	a0 91 02 04 	lds	r26, 0x0402
    30f2:	b0 91 03 04 	lds	r27, 0x0403
    30f6:	82 17       	cp	r24, r18
    30f8:	93 07       	cpc	r25, r19
    30fa:	a4 07       	cpc	r26, r20
    30fc:	b5 07       	cpc	r27, r21
    30fe:	40 f4       	brcc	.+16     	; 0x3110 <__vector_17+0x4d4>
        trapezoid_adjusted_rate = current_block->final_rate;
    3100:	20 93 00 04 	sts	0x0400, r18
    3104:	30 93 01 04 	sts	0x0401, r19
    3108:	40 93 02 04 	sts	0x0402, r20
    310c:	50 93 03 04 	sts	0x0403, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    3110:	60 91 00 04 	lds	r22, 0x0400
    3114:	70 91 01 04 	lds	r23, 0x0401
    3118:	80 91 02 04 	lds	r24, 0x0402
    311c:	90 91 03 04 	lds	r25, 0x0403
    3120:	11 c0       	rjmp	.+34     	; 0x3144 <__vector_17+0x508>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3122:	65 89       	ldd	r22, Z+21	; 0x15
    3124:	76 89       	ldd	r23, Z+22	; 0x16
    3126:	87 89       	ldd	r24, Z+23	; 0x17
    3128:	90 8d       	ldd	r25, Z+24	; 0x18
    312a:	26 17       	cp	r18, r22
    312c:	37 07       	cpc	r19, r23
    312e:	48 07       	cpc	r20, r24
    3130:	59 07       	cpc	r21, r25
    3132:	51 f0       	breq	.+20     	; 0x3148 <__vector_17+0x50c>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3134:	60 93 00 04 	sts	0x0400, r22
    3138:	70 93 01 04 	sts	0x0401, r23
    313c:	80 93 02 04 	sts	0x0402, r24
    3140:	90 93 03 04 	sts	0x0403, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3144:	0e 94 da 14 	call	0x29b4	; 0x29b4 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    3148:	10 92 f7 03 	sts	0x03F7, r1
    314c:	10 92 f6 03 	sts	0x03F6, r1
}
    3150:	ff 91       	pop	r31
    3152:	ef 91       	pop	r30
    3154:	df 91       	pop	r29
    3156:	cf 91       	pop	r28
    3158:	bf 91       	pop	r27
    315a:	af 91       	pop	r26
    315c:	9f 91       	pop	r25
    315e:	8f 91       	pop	r24
    3160:	7f 91       	pop	r23
    3162:	6f 91       	pop	r22
    3164:	5f 91       	pop	r21
    3166:	4f 91       	pop	r20
    3168:	3f 91       	pop	r19
    316a:	2f 91       	pop	r18
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	0f 90       	pop	r0
    3176:	0b be       	out	0x3b, r0	; 59
    3178:	0f 90       	pop	r0
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	0f 90       	pop	r0
    317e:	1f 90       	pop	r1
    3180:	18 95       	reti

00003182 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3182:	ef 92       	push	r14
    3184:	ff 92       	push	r15
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	7b 01       	movw	r14, r22
    318c:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    318e:	22 e0       	ldi	r18, 0x02	; 2
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__divmodsi4>
    319a:	20 5c       	subi	r18, 0xC0	; 192
    319c:	3d 4b       	sbci	r19, 0xBD	; 189
    319e:	40 4f       	sbci	r20, 0xF0	; 240
    31a0:	5f 4f       	sbci	r21, 0xFF	; 255
    31a2:	ca 01       	movw	r24, r20
    31a4:	b9 01       	movw	r22, r18
    31a6:	a8 01       	movw	r20, r16
    31a8:	97 01       	movw	r18, r14
    31aa:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__udivmodsi4>
    31ae:	c9 01       	movw	r24, r18
    31b0:	da 01       	movw	r26, r20
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	a1 09       	sbc	r26, r1
    31b6:	b1 09       	sbc	r27, r1
    31b8:	29 2f       	mov	r18, r25
    31ba:	3a 2f       	mov	r19, r26
    31bc:	4b 2f       	mov	r20, r27
    31be:	55 27       	eor	r21, r21
    31c0:	01 96       	adiw	r24, 0x01	; 1
    31c2:	a1 1d       	adc	r26, r1
    31c4:	b1 1d       	adc	r27, r1
    31c6:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    31ca:	81 50       	subi	r24, 0x01	; 1
    31cc:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    31d0:	e0 ec       	ldi	r30, 0xC0	; 192
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8d 7f       	andi	r24, 0xFD	; 253
    31d8:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    31da:	e1 ec       	ldi	r30, 0xC1	; 193
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	80 61       	ori	r24, 0x10	; 16
    31e2:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    31e4:	80 81       	ld	r24, Z
    31e6:	88 60       	ori	r24, 0x08	; 8
    31e8:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    31ea:	80 81       	ld	r24, Z
    31ec:	80 68       	ori	r24, 0x80	; 128
    31ee:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	ff 90       	pop	r15
    31f6:	ef 90       	pop	r14
    31f8:	08 95       	ret

000031fa <serialWrite>:

void serialWrite(unsigned char c)
{
    31fa:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    31fc:	80 91 c0 00 	lds	r24, 0x00C0
    3200:	85 ff       	sbrs	r24, 5
    3202:	fc cf       	rjmp	.-8      	; 0x31fc <serialWrite+0x2>
		;
	UDR0 = c;
    3204:	90 93 c6 00 	sts	0x00C6, r25
}
    3208:	08 95       	ret

0000320a <serialAvailable>:

int serialAvailable()
{
    320a:	80 91 04 04 	lds	r24, 0x0404
    320e:	90 91 05 04 	lds	r25, 0x0405
    3212:	80 50       	subi	r24, 0x00	; 0
    3214:	9f 4f       	sbci	r25, 0xFF	; 255
    3216:	20 91 06 04 	lds	r18, 0x0406
    321a:	30 91 07 04 	lds	r19, 0x0407
    321e:	82 1b       	sub	r24, r18
    3220:	93 0b       	sbc	r25, r19
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	71 e0       	ldi	r23, 0x01	; 1
    3226:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    322a:	08 95       	ret

0000322c <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    322c:	40 91 06 04 	lds	r20, 0x0406
    3230:	50 91 07 04 	lds	r21, 0x0407
    3234:	80 91 04 04 	lds	r24, 0x0404
    3238:	90 91 05 04 	lds	r25, 0x0405
    323c:	84 17       	cp	r24, r20
    323e:	95 07       	cpc	r25, r21
    3240:	19 f4       	brne	.+6      	; 0x3248 <serialRead+0x1c>
    3242:	2f ef       	ldi	r18, 0xFF	; 255
    3244:	3f ef       	ldi	r19, 0xFF	; 255
    3246:	0f c0       	rjmp	.+30     	; 0x3266 <serialRead+0x3a>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3248:	fa 01       	movw	r30, r20
    324a:	e8 5f       	subi	r30, 0xF8	; 248
    324c:	fb 4f       	sbci	r31, 0xFB	; 251
    324e:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3250:	ca 01       	movw	r24, r20
    3252:	01 96       	adiw	r24, 0x01	; 1
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	71 e0       	ldi	r23, 0x01	; 1
    3258:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodhi4>
    325c:	90 93 07 04 	sts	0x0407, r25
    3260:	80 93 06 04 	sts	0x0406, r24
		return c;
    3264:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3266:	c9 01       	movw	r24, r18
    3268:	08 95       	ret

0000326a <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    326a:	80 91 06 04 	lds	r24, 0x0406
    326e:	90 91 07 04 	lds	r25, 0x0407
    3272:	90 93 05 04 	sts	0x0405, r25
    3276:	80 93 04 04 	sts	0x0404, r24
}
    327a:	08 95       	ret

0000327c <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    327c:	1f 92       	push	r1
    327e:	0f 92       	push	r0
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	0f 92       	push	r0
    3284:	0b b6       	in	r0, 0x3b	; 59
    3286:	0f 92       	push	r0
    3288:	11 24       	eor	r1, r1
    328a:	2f 93       	push	r18
    328c:	3f 93       	push	r19
    328e:	4f 93       	push	r20
    3290:	5f 93       	push	r21
    3292:	6f 93       	push	r22
    3294:	7f 93       	push	r23
    3296:	8f 93       	push	r24
    3298:	9f 93       	push	r25
    329a:	af 93       	push	r26
    329c:	bf 93       	push	r27
    329e:	ef 93       	push	r30
    32a0:	ff 93       	push	r31
	unsigned char c = UDR0;
    32a2:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    32a6:	e0 91 04 04 	lds	r30, 0x0404
    32aa:	f0 91 05 04 	lds	r31, 0x0405
    32ae:	cf 01       	movw	r24, r30
    32b0:	01 96       	adiw	r24, 0x01	; 1
    32b2:	60 e0       	ldi	r22, 0x00	; 0
    32b4:	71 e0       	ldi	r23, 0x01	; 1
    32b6:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodhi4>
    32ba:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    32bc:	80 91 06 04 	lds	r24, 0x0406
    32c0:	90 91 07 04 	lds	r25, 0x0407
    32c4:	28 17       	cp	r18, r24
    32c6:	39 07       	cpc	r19, r25
    32c8:	39 f0       	breq	.+14     	; 0x32d8 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    32ca:	e8 5f       	subi	r30, 0xF8	; 248
    32cc:	fb 4f       	sbci	r31, 0xFB	; 251
    32ce:	40 83       	st	Z, r20
		rx_buffer_head = i;
    32d0:	30 93 05 04 	sts	0x0405, r19
    32d4:	20 93 04 04 	sts	0x0404, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    32d8:	ff 91       	pop	r31
    32da:	ef 91       	pop	r30
    32dc:	bf 91       	pop	r27
    32de:	af 91       	pop	r26
    32e0:	9f 91       	pop	r25
    32e2:	8f 91       	pop	r24
    32e4:	7f 91       	pop	r23
    32e6:	6f 91       	pop	r22
    32e8:	5f 91       	pop	r21
    32ea:	4f 91       	pop	r20
    32ec:	3f 91       	pop	r19
    32ee:	2f 91       	pop	r18
    32f0:	0f 90       	pop	r0
    32f2:	0b be       	out	0x3b, r0	; 59
    32f4:	0f 90       	pop	r0
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	0f 90       	pop	r0
    32fa:	1f 90       	pop	r1
    32fc:	18 95       	reti

000032fe <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    32fe:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3300:	80 91 c0 00 	lds	r24, 0x00C0
    3304:	85 ff       	sbrs	r24, 5
    3306:	fc cf       	rjmp	.-8      	; 0x3300 <printByte+0x2>
		;
	UDR0 = c;
    3308:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    330c:	08 95       	ret

0000330e <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    330e:	fc 01       	movw	r30, r24
    3310:	07 c0       	rjmp	.+14     	; 0x3320 <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3312:	80 91 c0 00 	lds	r24, 0x00C0
    3316:	85 ff       	sbrs	r24, 5
    3318:	fc cf       	rjmp	.-8      	; 0x3312 <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
    331a:	31 96       	adiw	r30, 0x01	; 1

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    331c:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3320:	90 81       	ld	r25, Z
    3322:	99 23       	and	r25, r25
    3324:	b1 f7       	brne	.-20     	; 0x3312 <printString+0x4>
		printByte(*s++);
}
    3326:	08 95       	ret

00003328 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3328:	9c 01       	movw	r18, r24
    332a:	06 c0       	rjmp	.+12     	; 0x3338 <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    332c:	80 91 c0 00 	lds	r24, 0x00C0
    3330:	85 ff       	sbrs	r24, 5
    3332:	fc cf       	rjmp	.-8      	; 0x332c <printPgmString+0x4>
		;
	UDR0 = c;
    3334:	90 93 c6 00 	sts	0x00C6, r25
    3338:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    333a:	2f 5f       	subi	r18, 0xFF	; 255
    333c:	3f 4f       	sbci	r19, 0xFF	; 255
    333e:	94 91       	lpm	r25, Z+
    3340:	99 23       	and	r25, r25
    3342:	a1 f7       	brne	.-24     	; 0x332c <printPgmString+0x4>
		printByte(c);
}
    3344:	08 95       	ret

00003346 <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3346:	2f 92       	push	r2
    3348:	3f 92       	push	r3
    334a:	4f 92       	push	r4
    334c:	5f 92       	push	r5
    334e:	6f 92       	push	r6
    3350:	7f 92       	push	r7
    3352:	8f 92       	push	r8
    3354:	9f 92       	push	r9
    3356:	af 92       	push	r10
    3358:	bf 92       	push	r11
    335a:	cf 92       	push	r12
    335c:	df 92       	push	r13
    335e:	ef 92       	push	r14
    3360:	ff 92       	push	r15
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	a0 97       	sbiw	r28, 0x20	; 32
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	6b 01       	movw	r12, r22
    337c:	7c 01       	movw	r14, r24
    337e:	29 01       	movw	r4, r18
    3380:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3382:	61 15       	cp	r22, r1
    3384:	71 05       	cpc	r23, r1
    3386:	81 05       	cpc	r24, r1
    3388:	91 05       	cpc	r25, r1
    338a:	41 f4       	brne	.+16     	; 0x339c <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    338c:	80 91 c0 00 	lds	r24, 0x00C0
    3390:	85 ff       	sbrs	r24, 5
    3392:	fc cf       	rjmp	.-8      	; 0x338c <printIntegerInBase+0x46>
		;
	UDR0 = c;
    3394:	80 e3       	ldi	r24, 0x30	; 48
    3396:	80 93 c6 00 	sts	0x00C6, r24
    339a:	49 c0       	rjmp	.+146    	; 0x342e <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
    339c:	88 24       	eor	r8, r8
    339e:	99 24       	eor	r9, r9
    33a0:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
    33a2:	1e 01       	movw	r2, r28
    33a4:	08 94       	sec
    33a6:	21 1c       	adc	r2, r1
    33a8:	31 1c       	adc	r3, r1
    33aa:	81 01       	movw	r16, r2
    33ac:	08 0d       	add	r16, r8
    33ae:	19 1d       	adc	r17, r9
    33b0:	c7 01       	movw	r24, r14
    33b2:	b6 01       	movw	r22, r12
    33b4:	a3 01       	movw	r20, r6
    33b6:	92 01       	movw	r18, r4
    33b8:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__udivmodsi4>
    33bc:	f8 01       	movw	r30, r16
    33be:	60 83       	st	Z, r22
    33c0:	08 94       	sec
    33c2:	81 1c       	adc	r8, r1
    33c4:	91 1c       	adc	r9, r1
    33c6:	a1 1c       	adc	r10, r1
    33c8:	b1 1c       	adc	r11, r1
		n /= base;
    33ca:	c7 01       	movw	r24, r14
    33cc:	b6 01       	movw	r22, r12
    33ce:	a3 01       	movw	r20, r6
    33d0:	92 01       	movw	r18, r4
    33d2:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <__udivmodsi4>
    33d6:	c9 01       	movw	r24, r18
    33d8:	da 01       	movw	r26, r20
    33da:	6c 01       	movw	r12, r24
    33dc:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    33de:	c1 14       	cp	r12, r1
    33e0:	d1 04       	cpc	r13, r1
    33e2:	e1 04       	cpc	r14, r1
    33e4:	f1 04       	cpc	r15, r1
    33e6:	09 f7       	brne	.-62     	; 0x33aa <printIntegerInBase+0x64>
    33e8:	91 01       	movw	r18, r2
    33ea:	28 0d       	add	r18, r8
    33ec:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    33ee:	be 01       	movw	r22, r28
    33f0:	6f 5f       	subi	r22, 0xFF	; 255
    33f2:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
    33f4:	d5 01       	movw	r26, r10
    33f6:	c4 01       	movw	r24, r8
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	a1 09       	sbc	r26, r1
    33fc:	b1 09       	sbc	r27, r1
    33fe:	ac 01       	movw	r20, r24
    3400:	48 19       	sub	r20, r8
    3402:	59 09       	sbc	r21, r9
    3404:	11 c0       	rjmp	.+34     	; 0x3428 <printIntegerInBase+0xe2>
    3406:	fa 01       	movw	r30, r20
    3408:	e2 0f       	add	r30, r18
    340a:	f3 1f       	adc	r31, r19
    340c:	e0 81       	ld	r30, Z
    340e:	ea 30       	cpi	r30, 0x0A	; 10
    3410:	10 f4       	brcc	.+4      	; 0x3416 <printIntegerInBase+0xd0>
    3412:	e0 5d       	subi	r30, 0xD0	; 208
    3414:	01 c0       	rjmp	.+2      	; 0x3418 <printIntegerInBase+0xd2>
    3416:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3418:	80 91 c0 00 	lds	r24, 0x00C0
    341c:	85 ff       	sbrs	r24, 5
    341e:	fc cf       	rjmp	.-8      	; 0x3418 <printIntegerInBase+0xd2>
		;
	UDR0 = c;
    3420:	e0 93 c6 00 	sts	0x00C6, r30
    3424:	21 50       	subi	r18, 0x01	; 1
    3426:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3428:	62 17       	cp	r22, r18
    342a:	73 07       	cpc	r23, r19
    342c:	61 f7       	brne	.-40     	; 0x3406 <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    342e:	a0 96       	adiw	r28, 0x20	; 32
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	1f 91       	pop	r17
    3440:	0f 91       	pop	r16
    3442:	ff 90       	pop	r15
    3444:	ef 90       	pop	r14
    3446:	df 90       	pop	r13
    3448:	cf 90       	pop	r12
    344a:	bf 90       	pop	r11
    344c:	af 90       	pop	r10
    344e:	9f 90       	pop	r9
    3450:	8f 90       	pop	r8
    3452:	7f 90       	pop	r7
    3454:	6f 90       	pop	r6
    3456:	5f 90       	pop	r5
    3458:	4f 90       	pop	r4
    345a:	3f 90       	pop	r3
    345c:	2f 90       	pop	r2
    345e:	08 95       	ret

00003460 <printInteger>:

void printInteger(long n)
{
    3460:	9b 01       	movw	r18, r22
    3462:	ac 01       	movw	r20, r24
	if (n < 0) {
    3464:	97 ff       	sbrs	r25, 7
    3466:	0e c0       	rjmp	.+28     	; 0x3484 <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3468:	80 91 c0 00 	lds	r24, 0x00C0
    346c:	85 ff       	sbrs	r24, 5
    346e:	fc cf       	rjmp	.-8      	; 0x3468 <printInteger+0x8>
		;
	UDR0 = c;
    3470:	8d e2       	ldi	r24, 0x2D	; 45
    3472:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3476:	50 95       	com	r21
    3478:	40 95       	com	r20
    347a:	30 95       	com	r19
    347c:	21 95       	neg	r18
    347e:	3f 4f       	sbci	r19, 0xFF	; 255
    3480:	4f 4f       	sbci	r20, 0xFF	; 255
    3482:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
    3484:	ca 01       	movw	r24, r20
    3486:	b9 01       	movw	r22, r18
    3488:	2a e0       	ldi	r18, 0x0A	; 10
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	50 e0       	ldi	r21, 0x00	; 0
    3490:	0e 94 a3 19 	call	0x3346	; 0x3346 <printIntegerInBase>
}
    3494:	08 95       	ret

00003496 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3496:	22 e0       	ldi	r18, 0x02	; 2
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e0       	ldi	r20, 0x00	; 0
    349c:	50 e0       	ldi	r21, 0x00	; 0
    349e:	0e 94 a3 19 	call	0x3346	; 0x3346 <printIntegerInBase>
  }
    34a2:	08 95       	ret

000034a4 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    34a4:	ef 92       	push	r14
    34a6:	ff 92       	push	r15
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <printFloat+0xe>
    34b2:	0f 92       	push	r0
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    34b8:	ae 01       	movw	r20, r28
    34ba:	4f 5f       	subi	r20, 0xFF	; 255
    34bc:	5f 4f       	sbci	r21, 0xFF	; 255
    34be:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <modf>
    34c2:	7b 01       	movw	r14, r22
    34c4:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    34c6:	69 81       	ldd	r22, Y+1	; 0x01
    34c8:	7a 81       	ldd	r23, Y+2	; 0x02
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	9c 81       	ldd	r25, Y+4	; 0x04
    34ce:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
    34d2:	0e 94 30 1a 	call	0x3460	; 0x3460 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    34d6:	80 91 c0 00 	lds	r24, 0x00C0
    34da:	85 ff       	sbrs	r24, 5
    34dc:	fc cf       	rjmp	.-8      	; 0x34d6 <printFloat+0x32>
		;
	UDR0 = c;
    34de:	8e e2       	ldi	r24, 0x2E	; 46
    34e0:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    34e4:	c8 01       	movw	r24, r16
    34e6:	b7 01       	movw	r22, r14
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	4a e7       	ldi	r20, 0x7A	; 122
    34ee:	54 e4       	ldi	r21, 0x44	; 68
    34f0:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    34f4:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <round>
    34f8:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__fixsfsi>
    34fc:	97 ff       	sbrs	r25, 7
    34fe:	07 c0       	rjmp	.+14     	; 0x350e <printFloat+0x6a>
    3500:	90 95       	com	r25
    3502:	80 95       	com	r24
    3504:	70 95       	com	r23
    3506:	61 95       	neg	r22
    3508:	7f 4f       	sbci	r23, 0xFF	; 255
    350a:	8f 4f       	sbci	r24, 0xFF	; 255
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	0e 94 30 1a 	call	0x3460	; 0x3460 <printInteger>
}
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	cf 91       	pop	r28
    351c:	df 91       	pop	r29
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	ff 90       	pop	r15
    3524:	ef 90       	pop	r14
    3526:	08 95       	ret

00003528 <atc_init>:
#include "settings.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    3528:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    352a:	e7 e0       	ldi	r30, 0x07	; 7
    352c:	f1 e0       	ldi	r31, 0x01	; 1
    352e:	80 81       	ld	r24, Z
    3530:	81 60       	ori	r24, 0x01	; 1
    3532:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3534:	80 81       	ld	r24, Z
    3536:	82 60       	ori	r24, 0x02	; 2
    3538:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    353a:	80 81       	ld	r24, Z
    353c:	84 60       	ori	r24, 0x04	; 4
    353e:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3540:	80 81       	ld	r24, Z
    3542:	88 60       	ori	r24, 0x08	; 8
    3544:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3546:	80 81       	ld	r24, Z
    3548:	80 64       	ori	r24, 0x40	; 64
    354a:	80 83       	st	Z, r24

// initialise PORT as well

}
    354c:	08 95       	ret

0000354e <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	08 95       	ret

00003552 <atc_change>:
}


// changes tool , 0 put back, 1-6 picks up
void atc_change(int tool)
{
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	// make sure head is up before moving
	if( is_head_down() ) {
    3558:	0e 94 09 1b 	call	0x3612	; 0x3612 <is_head_down>
    355c:	89 2b       	or	r24, r25
    355e:	21 f0       	breq	.+8      	; 0x3568 <atc_change+0x16>
		head_down( FALSE ) ;
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e 94 11 1b 	call	0x3622	; 0x3622 <head_down>
	}

	// turn off toolchanger
	if( tool == 0 ) {
    3568:	20 97       	sbiw	r28, 0x00	; 0
    356a:	89 f0       	breq	.+34     	; 0x358e <atc_change+0x3c>
		SPARE_DDR |= _BV( SPARE2 );
		return;
	}
  
  	switch( tool ) {
    356c:	21 97       	sbiw	r28, 0x01	; 1
    356e:	a1 f4       	brne	.+40     	; 0x3598 <atc_change+0x46>
  	
		// select tool A
		case 1:
			SPARE_DDR |= _BV( SPARE3 );
    3570:	80 91 07 01 	lds	r24, 0x0107
    3574:	82 60       	ori	r24, 0x02	; 2
    3576:	80 93 07 01 	sts	0x0107, r24
			SPARE_DDR |= _BV( SPARE4 );
    357a:	80 91 07 01 	lds	r24, 0x0107
    357e:	84 60       	ori	r24, 0x04	; 4
    3580:	80 93 07 01 	sts	0x0107, r24
			SPARE_DDR |= _BV( SPARE5 );
    3584:	80 91 07 01 	lds	r24, 0x0107
    3588:	88 60       	ori	r24, 0x08	; 8
    358a:	80 93 07 01 	sts	0x0107, r24

			SPARE_DDR |= _BV( SPARE2 );
    358e:	80 91 07 01 	lds	r24, 0x0107
    3592:	81 60       	ori	r24, 0x01	; 1
    3594:	80 93 07 01 	sts	0x0107, r24
			// sets low 
	//		SPARE_DDR &= ~(_BV( SPARE3 ));

			break;
  }
}
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	08 95       	ret

0000359e <goto_vacpad>:

}

void goto_vacpad( void ) 
{
	if( is_head_down() ) {
    359e:	0e 94 09 1b 	call	0x3612	; 0x3612 <is_head_down>
    35a2:	89 2b       	or	r24, r25
    35a4:	21 f0       	breq	.+8      	; 0x35ae <goto_vacpad+0x10>
		head_down( FALSE) ;
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	0e 94 11 1b 	call	0x3622	; 0x3622 <head_down>
    35ae:	08 95       	ret

000035b0 <check_for_tool>:

// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	//move head up
	if( is_head_down() ) {
    35b0:	0e 94 09 1b 	call	0x3612	; 0x3612 <is_head_down>
    35b4:	89 2b       	or	r24, r25
    35b6:	21 f0       	breq	.+8      	; 0x35c0 <check_for_tool+0x10>
		head_down( FALSE) ;
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	0e 94 11 1b 	call	0x3622	; 0x3622 <head_down>
	}

	goto_vacpad();
    35c0:	0e 94 cf 1a 	call	0x359e	; 0x359e <goto_vacpad>
	
	head_down(TRUE);
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	0e 94 11 1b 	call	0x3622	; 0x3622 <head_down>
	
	vacuum(TRUE);
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0e 94 b4 1b 	call	0x3768	; 0x3768 <vacuum>


	if( vacuum_state() == TRUE )  {
    35d4:	0e 94 ae 1b 	call	0x375c	; 0x375c <vacuum_state>
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	31 f4       	brne	.+12     	; 0x35e8 <check_for_tool+0x38>
		head_down( FALSE) ;
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 11 1b 	call	0x3622	; 0x3622 <head_down>
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	08 95       	ret
		return TRUE;
	} else {
		head_down( FALSE) ;
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 11 1b 	call	0x3622	; 0x3622 <head_down>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	}
}
    35f2:	08 95       	ret

000035f4 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    35f4:	ea e0       	ldi	r30, 0x0A	; 10
    35f6:	f1 e0       	ldi	r31, 0x01	; 1
    35f8:	80 81       	ld	r24, Z
    35fa:	80 62       	ori	r24, 0x20	; 32
    35fc:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    35fe:	eb e0       	ldi	r30, 0x0B	; 11
    3600:	f1 e0       	ldi	r31, 0x01	; 1
    3602:	80 81       	ld	r24, Z
    3604:	80 62       	ori	r24, 0x20	; 32
    3606:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    3608:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    360a:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    360c:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    360e:	41 9a       	sbi	0x08, 1	; 8
}
    3610:	08 95       	ret

00003612 <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3612:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    3614:	81 70       	andi	r24, 0x01	; 1
    3616:	08 95       	ret

00003618 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?0:1;
    3618:	86 b1       	in	r24, 0x06	; 6
    361a:	86 95       	lsr	r24
    361c:	80 95       	com	r24

	return state;
}
    361e:	81 70       	andi	r24, 0x01	; 1
    3620:	08 95       	ret

00003622 <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}

// todo: don't allow head down while not homed?
void head_down(int state)
{
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	ec 01       	movw	r28, r24

 set_busy( TRUE );
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	0e 94 24 14 	call	0x2848	; 0x2848 <set_busy>

  printPgmString(PSTR("dbg: head_down\n\r"));
    3630:	8e e2       	ldi	r24, 0x2E	; 46
    3632:	95 e0       	ldi	r25, 0x05	; 5
    3634:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

// head down mode
  if( state == 0 ) {
    3638:	20 97       	sbiw	r28, 0x00	; 0
    363a:	21 f4       	brne	.+8      	; 0x3644 <head_down+0x22>

	HEAD_PORT |= _BV( HEAD );
    363c:	80 91 0b 01 	lds	r24, 0x010B
    3640:	80 62       	ori	r24, 0x20	; 32
    3642:	03 c0       	rjmp	.+6      	; 0x364a <head_down+0x28>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    3644:	80 91 0b 01 	lds	r24, 0x010B
    3648:	8f 7d       	andi	r24, 0xDF	; 223
    364a:	80 93 0b 01 	sts	0x010B, r24
    364e:	80 ed       	ldi	r24, 0xD0	; 208
    3650:	97 e0       	ldi	r25, 0x07	; 7
    3652:	20 e9       	ldi	r18, 0x90	; 144
    3654:	31 e0       	ldi	r19, 0x01	; 1
    3656:	f9 01       	movw	r30, r18
    3658:	31 97       	sbiw	r30, 0x01	; 1
    365a:	f1 f7       	brne	.-4      	; 0x3658 <head_down+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365e:	d9 f7       	brne	.-10     	; 0x3656 <head_down+0x34>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3660:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    3662:	81 70       	andi	r24, 0x01	; 1
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	8c 17       	cp	r24, r28
    3668:	9d 07       	cpc	r25, r29
    366a:	21 f0       	breq	.+8      	; 0x3674 <head_down+0x52>

	  printPgmString(PSTR("Head down error\n\r"));
    366c:	8c e1       	ldi	r24, 0x1C	; 28
    366e:	95 e0       	ldi	r25, 0x05	; 5
    3670:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>
  }

 set_busy( FALSE );
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	0e 94 24 14 	call	0x2848	; 0x2848 <set_busy>

}
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	08 95       	ret

00003682 <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    3682:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    3684:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    3686:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    3688:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    368a:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    368c:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    368e:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    3690:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    3692:	a4 e0       	ldi	r26, 0x04	; 4
    3694:	b1 e0       	ldi	r27, 0x01	; 1
    3696:	8c 91       	ld	r24, X
    3698:	8e 7f       	andi	r24, 0xFE	; 254
    369a:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    369c:	e5 e0       	ldi	r30, 0x05	; 5
    369e:	f1 e0       	ldi	r31, 0x01	; 1
    36a0:	80 81       	ld	r24, Z
    36a2:	81 60       	ori	r24, 0x01	; 1
    36a4:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    36a6:	8c 91       	ld	r24, X
    36a8:	8f 7e       	andi	r24, 0xEF	; 239
    36aa:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    36ac:	80 81       	ld	r24, Z
    36ae:	80 61       	ori	r24, 0x10	; 16
    36b0:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    36b2:	a1 e0       	ldi	r26, 0x01	; 1
    36b4:	b1 e0       	ldi	r27, 0x01	; 1
    36b6:	8c 91       	ld	r24, X
    36b8:	8e 7f       	andi	r24, 0xFE	; 254
    36ba:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    36bc:	e2 e0       	ldi	r30, 0x02	; 2
    36be:	f1 e0       	ldi	r31, 0x01	; 1
    36c0:	80 81       	ld	r24, Z
    36c2:	81 60       	ori	r24, 0x01	; 1
    36c4:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    36c6:	8c 91       	ld	r24, X
    36c8:	8d 7f       	andi	r24, 0xFD	; 253
    36ca:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    36cc:	80 81       	ld	r24, Z
    36ce:	82 60       	ori	r24, 0x02	; 2
    36d0:	80 83       	st	Z, r24

}
    36d2:	08 95       	ret

000036d4 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    36d4:	8c b1       	in	r24, 0x0c	; 12
    36d6:	82 95       	swap	r24
    36d8:	86 95       	lsr	r24
    36da:	87 70       	andi	r24, 0x07	; 7
    36dc:	80 95       	com	r24

	return state;
}
    36de:	81 70       	andi	r24, 0x01	; 1
    36e0:	08 95       	ret

000036e2 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    36e2:	82 b3       	in	r24, 0x12	; 18
    36e4:	82 95       	swap	r24
    36e6:	86 95       	lsr	r24
    36e8:	87 70       	andi	r24, 0x07	; 7
    36ea:	80 95       	com	r24

	return state;
}
    36ec:	81 70       	andi	r24, 0x01	; 1
    36ee:	08 95       	ret

000036f0 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    36f0:	8c b1       	in	r24, 0x0c	; 12
    36f2:	82 95       	swap	r24
    36f4:	8f 70       	andi	r24, 0x0F	; 15
    36f6:	80 95       	com	r24

	return state;
}
    36f8:	81 70       	andi	r24, 0x01	; 1
    36fa:	08 95       	ret

000036fc <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    36fc:	80 91 03 01 	lds	r24, 0x0103
    3700:	86 95       	lsr	r24
    3702:	80 95       	com	r24

	return state;
}
    3704:	81 70       	andi	r24, 0x01	; 1
    3706:	08 95       	ret

00003708 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    3708:	86 b1       	in	r24, 0x06	; 6
    370a:	82 95       	swap	r24
    370c:	8f 70       	andi	r24, 0x0F	; 15
    370e:	80 95       	com	r24

	return state;
}
    3710:	81 70       	andi	r24, 0x01	; 1
    3712:	08 95       	ret

00003714 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    3714:	80 91 00 01 	lds	r24, 0x0100
    3718:	80 95       	com	r24

	return state;
}
    371a:	81 70       	andi	r24, 0x01	; 1
    371c:	08 95       	ret

0000371e <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    371e:	80 91 03 01 	lds	r24, 0x0103
    3722:	80 95       	com	r24

	return state;
}
    3724:	81 70       	andi	r24, 0x01	; 1
    3726:	08 95       	ret

00003728 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    3728:	83 b1       	in	r24, 0x03	; 3
    372a:	82 95       	swap	r24
    372c:	86 95       	lsr	r24
    372e:	87 70       	andi	r24, 0x07	; 7
    3730:	80 95       	com	r24

	return state;
}
    3732:	81 70       	andi	r24, 0x01	; 1
    3734:	08 95       	ret

00003736 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    3736:	80 91 00 01 	lds	r24, 0x0100
    373a:	86 95       	lsr	r24
    373c:	80 95       	com	r24

	return state;
}
    373e:	81 70       	andi	r24, 0x01	; 1
    3740:	08 95       	ret

00003742 <vacuum_init>:
#include "settings.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    3742:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_DDR |= (_BV( TACSENSE ));
    3744:	57 9a       	sbi	0x0a, 7	; 10

	// Vacuum on/off control
	HEAD_DDR |= _BV( VACUUM );
    3746:	ea e0       	ldi	r30, 0x0A	; 10
    3748:	f1 e0       	ldi	r31, 0x01	; 1
    374a:	80 81       	ld	r24, Z
    374c:	80 61       	ori	r24, 0x10	; 16
    374e:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    3750:	eb e0       	ldi	r30, 0x0B	; 11
    3752:	f1 e0       	ldi	r31, 0x01	; 1
    3754:	80 81       	ld	r24, Z
    3756:	80 61       	ori	r24, 0x10	; 16
    3758:	80 83       	st	Z, r24

}
    375a:	08 95       	ret

0000375c <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_DDR, TACSENSE )?0:1;
    375c:	8a b1       	in	r24, 0x0a	; 10
    375e:	80 95       	com	r24

	return state;
}
    3760:	88 1f       	adc	r24, r24
    3762:	88 27       	eor	r24, r24
    3764:	88 1f       	adc	r24, r24
    3766:	08 95       	ret

00003768 <vacuum>:

}

// switches vacuum on and off
void vacuum(int state)
{
    3768:	0f 93       	push	r16
    376a:	1f 93       	push	r17
    376c:	8c 01       	movw	r16, r24
  printPgmString(PSTR("vacuum change\n\r"));
    376e:	8f e3       	ldi	r24, 0x3F	; 63
    3770:	95 e0       	ldi	r25, 0x05	; 5
    3772:	0e 94 94 19 	call	0x3328	; 0x3328 <printPgmString>

// vacuum  on / off
  if( state == 0 ) {
    3776:	01 2b       	or	r16, r17
    3778:	21 f4       	brne	.+8      	; 0x3782 <vacuum+0x1a>

	HEAD_PORT |= _BV( VACUUM );
    377a:	80 91 0b 01 	lds	r24, 0x010B
    377e:	80 61       	ori	r24, 0x10	; 16
    3780:	03 c0       	rjmp	.+6      	; 0x3788 <vacuum+0x20>

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    3782:	80 91 0b 01 	lds	r24, 0x010B
    3786:	8f 7e       	andi	r24, 0xEF	; 239
    3788:	80 93 0b 01 	sts	0x010B, r24
    378c:	88 e8       	ldi	r24, 0x88	; 136
    378e:	93 e1       	ldi	r25, 0x13	; 19
    3790:	20 e9       	ldi	r18, 0x90	; 144
    3792:	31 e0       	ldi	r19, 0x01	; 1
    3794:	f9 01       	movw	r30, r18
    3796:	31 97       	sbiw	r30, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <vacuum+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	d9 f7       	brne	.-10     	; 0x3794 <vacuum+0x2c>
  }

   // wait for air to get settled
   _delay_ms( AIR_SETTLE_TIME );

}
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	08 95       	ret

000037a4 <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    37a4:	e7 e0       	ldi	r30, 0x07	; 7
    37a6:	f1 e0       	ldi	r31, 0x01	; 1
    37a8:	80 81       	ld	r24, Z
    37aa:	80 68       	ori	r24, 0x80	; 128
    37ac:	80 83       	st	Z, r24
}
    37ae:	08 95       	ret

000037b0 <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

 set_busy( TRUE );
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	0e 94 24 14 	call	0x2848	; 0x2848 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    37b8:	80 91 08 01 	lds	r24, 0x0108
    37bc:	8f 77       	andi	r24, 0x7F	; 127
    37be:	80 93 08 01 	sts	0x0108, r24
    37c2:	80 ed       	ldi	r24, 0xD0	; 208
    37c4:	97 e0       	ldi	r25, 0x07	; 7
    37c6:	20 e9       	ldi	r18, 0x90	; 144
    37c8:	31 e0       	ldi	r19, 0x01	; 1
    37ca:	f9 01       	movw	r30, r18
    37cc:	31 97       	sbiw	r30, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <tape_knock+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d2:	d9 f7       	brne	.-10     	; 0x37ca <tape_knock+0x1a>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    37d4:	80 91 08 01 	lds	r24, 0x0108
    37d8:	80 68       	ori	r24, 0x80	; 128
    37da:	80 93 08 01 	sts	0x0108, r24
    37de:	80 ed       	ldi	r24, 0xD0	; 208
    37e0:	97 e0       	ldi	r25, 0x07	; 7
    37e2:	20 e9       	ldi	r18, 0x90	; 144
    37e4:	31 e0       	ldi	r19, 0x01	; 1
    37e6:	f9 01       	movw	r30, r18
    37e8:	31 97       	sbiw	r30, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <tape_knock+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ee:	d9 f7       	brne	.-10     	; 0x37e6 <tape_knock+0x36>

	_delay_ms( TAPE_KNOCK_SETTLE );

 set_busy( FALSE );
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 24 14 	call	0x2848	; 0x2848 <set_busy>
}
    37f8:	08 95       	ret

000037fa <__subsf3>:
    37fa:	50 58       	subi	r21, 0x80	; 128

000037fc <__addsf3>:
    37fc:	bb 27       	eor	r27, r27
    37fe:	aa 27       	eor	r26, r26
    3800:	0e d0       	rcall	.+28     	; 0x381e <__addsf3x>
    3802:	11 c2       	rjmp	.+1058   	; 0x3c26 <__fp_round>
    3804:	02 d2       	rcall	.+1028   	; 0x3c0a <__fp_pscA>
    3806:	30 f0       	brcs	.+12     	; 0x3814 <__addsf3+0x18>
    3808:	07 d2       	rcall	.+1038   	; 0x3c18 <__fp_pscB>
    380a:	20 f0       	brcs	.+8      	; 0x3814 <__addsf3+0x18>
    380c:	31 f4       	brne	.+12     	; 0x381a <__addsf3+0x1e>
    380e:	9f 3f       	cpi	r25, 0xFF	; 255
    3810:	11 f4       	brne	.+4      	; 0x3816 <__addsf3+0x1a>
    3812:	1e f4       	brtc	.+6      	; 0x381a <__addsf3+0x1e>
    3814:	d2 c1       	rjmp	.+932    	; 0x3bba <__fp_nan>
    3816:	0e f4       	brtc	.+2      	; 0x381a <__addsf3+0x1e>
    3818:	e0 95       	com	r30
    381a:	e7 fb       	bst	r30, 7
    381c:	9f c1       	rjmp	.+830    	; 0x3b5c <__fp_inf>

0000381e <__addsf3x>:
    381e:	e9 2f       	mov	r30, r25
    3820:	13 d2       	rcall	.+1062   	; 0x3c48 <__fp_split3>
    3822:	80 f3       	brcs	.-32     	; 0x3804 <__addsf3+0x8>
    3824:	ba 17       	cp	r27, r26
    3826:	62 07       	cpc	r22, r18
    3828:	73 07       	cpc	r23, r19
    382a:	84 07       	cpc	r24, r20
    382c:	95 07       	cpc	r25, r21
    382e:	18 f0       	brcs	.+6      	; 0x3836 <__addsf3x+0x18>
    3830:	71 f4       	brne	.+28     	; 0x384e <__addsf3x+0x30>
    3832:	9e f5       	brtc	.+102    	; 0x389a <__addsf3x+0x7c>
    3834:	42 c2       	rjmp	.+1156   	; 0x3cba <__fp_zero>
    3836:	0e f4       	brtc	.+2      	; 0x383a <__addsf3x+0x1c>
    3838:	e0 95       	com	r30
    383a:	0b 2e       	mov	r0, r27
    383c:	ba 2f       	mov	r27, r26
    383e:	a0 2d       	mov	r26, r0
    3840:	0b 01       	movw	r0, r22
    3842:	b9 01       	movw	r22, r18
    3844:	90 01       	movw	r18, r0
    3846:	0c 01       	movw	r0, r24
    3848:	ca 01       	movw	r24, r20
    384a:	a0 01       	movw	r20, r0
    384c:	11 24       	eor	r1, r1
    384e:	ff 27       	eor	r31, r31
    3850:	59 1b       	sub	r21, r25
    3852:	99 f0       	breq	.+38     	; 0x387a <__addsf3x+0x5c>
    3854:	59 3f       	cpi	r21, 0xF9	; 249
    3856:	50 f4       	brcc	.+20     	; 0x386c <__addsf3x+0x4e>
    3858:	50 3e       	cpi	r21, 0xE0	; 224
    385a:	68 f1       	brcs	.+90     	; 0x38b6 <__addsf3x+0x98>
    385c:	1a 16       	cp	r1, r26
    385e:	f0 40       	sbci	r31, 0x00	; 0
    3860:	a2 2f       	mov	r26, r18
    3862:	23 2f       	mov	r18, r19
    3864:	34 2f       	mov	r19, r20
    3866:	44 27       	eor	r20, r20
    3868:	58 5f       	subi	r21, 0xF8	; 248
    386a:	f3 cf       	rjmp	.-26     	; 0x3852 <__addsf3x+0x34>
    386c:	46 95       	lsr	r20
    386e:	37 95       	ror	r19
    3870:	27 95       	ror	r18
    3872:	a7 95       	ror	r26
    3874:	f0 40       	sbci	r31, 0x00	; 0
    3876:	53 95       	inc	r21
    3878:	c9 f7       	brne	.-14     	; 0x386c <__addsf3x+0x4e>
    387a:	7e f4       	brtc	.+30     	; 0x389a <__addsf3x+0x7c>
    387c:	1f 16       	cp	r1, r31
    387e:	ba 0b       	sbc	r27, r26
    3880:	62 0b       	sbc	r22, r18
    3882:	73 0b       	sbc	r23, r19
    3884:	84 0b       	sbc	r24, r20
    3886:	ba f0       	brmi	.+46     	; 0x38b6 <__addsf3x+0x98>
    3888:	91 50       	subi	r25, 0x01	; 1
    388a:	a1 f0       	breq	.+40     	; 0x38b4 <__addsf3x+0x96>
    388c:	ff 0f       	add	r31, r31
    388e:	bb 1f       	adc	r27, r27
    3890:	66 1f       	adc	r22, r22
    3892:	77 1f       	adc	r23, r23
    3894:	88 1f       	adc	r24, r24
    3896:	c2 f7       	brpl	.-16     	; 0x3888 <__addsf3x+0x6a>
    3898:	0e c0       	rjmp	.+28     	; 0x38b6 <__addsf3x+0x98>
    389a:	ba 0f       	add	r27, r26
    389c:	62 1f       	adc	r22, r18
    389e:	73 1f       	adc	r23, r19
    38a0:	84 1f       	adc	r24, r20
    38a2:	48 f4       	brcc	.+18     	; 0x38b6 <__addsf3x+0x98>
    38a4:	87 95       	ror	r24
    38a6:	77 95       	ror	r23
    38a8:	67 95       	ror	r22
    38aa:	b7 95       	ror	r27
    38ac:	f7 95       	ror	r31
    38ae:	9e 3f       	cpi	r25, 0xFE	; 254
    38b0:	08 f0       	brcs	.+2      	; 0x38b4 <__addsf3x+0x96>
    38b2:	b3 cf       	rjmp	.-154    	; 0x381a <__addsf3+0x1e>
    38b4:	93 95       	inc	r25
    38b6:	88 0f       	add	r24, r24
    38b8:	08 f0       	brcs	.+2      	; 0x38bc <__addsf3x+0x9e>
    38ba:	99 27       	eor	r25, r25
    38bc:	ee 0f       	add	r30, r30
    38be:	97 95       	ror	r25
    38c0:	87 95       	ror	r24
    38c2:	08 95       	ret

000038c4 <atan>:
    38c4:	df 93       	push	r29
    38c6:	dd 27       	eor	r29, r29
    38c8:	b9 2f       	mov	r27, r25
    38ca:	bf 77       	andi	r27, 0x7F	; 127
    38cc:	40 e8       	ldi	r20, 0x80	; 128
    38ce:	5f e3       	ldi	r21, 0x3F	; 63
    38d0:	16 16       	cp	r1, r22
    38d2:	17 06       	cpc	r1, r23
    38d4:	48 07       	cpc	r20, r24
    38d6:	5b 07       	cpc	r21, r27
    38d8:	10 f4       	brcc	.+4      	; 0x38de <atan+0x1a>
    38da:	d9 2f       	mov	r29, r25
    38dc:	f9 d1       	rcall	.+1010   	; 0x3cd0 <inverse>
    38de:	9f 93       	push	r25
    38e0:	8f 93       	push	r24
    38e2:	7f 93       	push	r23
    38e4:	6f 93       	push	r22
    38e6:	23 d3       	rcall	.+1606   	; 0x3f2e <square>
    38e8:	ee e5       	ldi	r30, 0x5E	; 94
    38ea:	f1 e0       	ldi	r31, 0x01	; 1
    38ec:	69 d1       	rcall	.+722    	; 0x3bc0 <__fp_powser>
    38ee:	9b d1       	rcall	.+822    	; 0x3c26 <__fp_round>
    38f0:	2f 91       	pop	r18
    38f2:	3f 91       	pop	r19
    38f4:	4f 91       	pop	r20
    38f6:	5f 91       	pop	r21
    38f8:	61 d2       	rcall	.+1218   	; 0x3dbc <__mulsf3x>
    38fa:	dd 23       	and	r29, r29
    38fc:	49 f0       	breq	.+18     	; 0x3910 <atan+0x4c>
    38fe:	90 58       	subi	r25, 0x80	; 128
    3900:	a2 ea       	ldi	r26, 0xA2	; 162
    3902:	2a ed       	ldi	r18, 0xDA	; 218
    3904:	3f e0       	ldi	r19, 0x0F	; 15
    3906:	49 ec       	ldi	r20, 0xC9	; 201
    3908:	5f e3       	ldi	r21, 0x3F	; 63
    390a:	d0 78       	andi	r29, 0x80	; 128
    390c:	5d 27       	eor	r21, r29
    390e:	87 df       	rcall	.-242    	; 0x381e <__addsf3x>
    3910:	df 91       	pop	r29
    3912:	89 c1       	rjmp	.+786    	; 0x3c26 <__fp_round>

00003914 <ceil>:
    3914:	bb d1       	rcall	.+886    	; 0x3c8c <__fp_trunc>
    3916:	80 f0       	brcs	.+32     	; 0x3938 <ceil+0x24>
    3918:	9f 37       	cpi	r25, 0x7F	; 127
    391a:	40 f4       	brcc	.+16     	; 0x392c <ceil+0x18>
    391c:	91 11       	cpse	r25, r1
    391e:	0e f4       	brtc	.+2      	; 0x3922 <ceil+0xe>
    3920:	cd c1       	rjmp	.+922    	; 0x3cbc <__fp_szero>
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	80 e8       	ldi	r24, 0x80	; 128
    3928:	9f e3       	ldi	r25, 0x3F	; 63
    392a:	08 95       	ret
    392c:	26 f0       	brts	.+8      	; 0x3936 <ceil+0x22>
    392e:	1b 16       	cp	r1, r27
    3930:	61 1d       	adc	r22, r1
    3932:	71 1d       	adc	r23, r1
    3934:	81 1d       	adc	r24, r1
    3936:	18 c1       	rjmp	.+560    	; 0x3b68 <__fp_mintl>
    3938:	32 c1       	rjmp	.+612    	; 0x3b9e <__fp_mpack>

0000393a <__cmpsf2>:
    393a:	ec d0       	rcall	.+472    	; 0x3b14 <__fp_cmp>
    393c:	08 f4       	brcc	.+2      	; 0x3940 <__cmpsf2+0x6>
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	08 95       	ret

00003942 <__divsf3>:
    3942:	0c d0       	rcall	.+24     	; 0x395c <__divsf3x>
    3944:	70 c1       	rjmp	.+736    	; 0x3c26 <__fp_round>
    3946:	68 d1       	rcall	.+720    	; 0x3c18 <__fp_pscB>
    3948:	40 f0       	brcs	.+16     	; 0x395a <__divsf3+0x18>
    394a:	5f d1       	rcall	.+702    	; 0x3c0a <__fp_pscA>
    394c:	30 f0       	brcs	.+12     	; 0x395a <__divsf3+0x18>
    394e:	21 f4       	brne	.+8      	; 0x3958 <__divsf3+0x16>
    3950:	5f 3f       	cpi	r21, 0xFF	; 255
    3952:	19 f0       	breq	.+6      	; 0x395a <__divsf3+0x18>
    3954:	03 c1       	rjmp	.+518    	; 0x3b5c <__fp_inf>
    3956:	51 11       	cpse	r21, r1
    3958:	b1 c1       	rjmp	.+866    	; 0x3cbc <__fp_szero>
    395a:	2f c1       	rjmp	.+606    	; 0x3bba <__fp_nan>

0000395c <__divsf3x>:
    395c:	75 d1       	rcall	.+746    	; 0x3c48 <__fp_split3>
    395e:	98 f3       	brcs	.-26     	; 0x3946 <__divsf3+0x4>

00003960 <__divsf3_pse>:
    3960:	99 23       	and	r25, r25
    3962:	c9 f3       	breq	.-14     	; 0x3956 <__divsf3+0x14>
    3964:	55 23       	and	r21, r21
    3966:	b1 f3       	breq	.-20     	; 0x3954 <__divsf3+0x12>
    3968:	95 1b       	sub	r25, r21
    396a:	55 0b       	sbc	r21, r21
    396c:	bb 27       	eor	r27, r27
    396e:	aa 27       	eor	r26, r26
    3970:	62 17       	cp	r22, r18
    3972:	73 07       	cpc	r23, r19
    3974:	84 07       	cpc	r24, r20
    3976:	38 f0       	brcs	.+14     	; 0x3986 <__divsf3_pse+0x26>
    3978:	9f 5f       	subi	r25, 0xFF	; 255
    397a:	5f 4f       	sbci	r21, 0xFF	; 255
    397c:	22 0f       	add	r18, r18
    397e:	33 1f       	adc	r19, r19
    3980:	44 1f       	adc	r20, r20
    3982:	aa 1f       	adc	r26, r26
    3984:	a9 f3       	breq	.-22     	; 0x3970 <__divsf3_pse+0x10>
    3986:	33 d0       	rcall	.+102    	; 0x39ee <__divsf3_pse+0x8e>
    3988:	0e 2e       	mov	r0, r30
    398a:	3a f0       	brmi	.+14     	; 0x399a <__divsf3_pse+0x3a>
    398c:	e0 e8       	ldi	r30, 0x80	; 128
    398e:	30 d0       	rcall	.+96     	; 0x39f0 <__divsf3_pse+0x90>
    3990:	91 50       	subi	r25, 0x01	; 1
    3992:	50 40       	sbci	r21, 0x00	; 0
    3994:	e6 95       	lsr	r30
    3996:	00 1c       	adc	r0, r0
    3998:	ca f7       	brpl	.-14     	; 0x398c <__divsf3_pse+0x2c>
    399a:	29 d0       	rcall	.+82     	; 0x39ee <__divsf3_pse+0x8e>
    399c:	fe 2f       	mov	r31, r30
    399e:	27 d0       	rcall	.+78     	; 0x39ee <__divsf3_pse+0x8e>
    39a0:	66 0f       	add	r22, r22
    39a2:	77 1f       	adc	r23, r23
    39a4:	88 1f       	adc	r24, r24
    39a6:	bb 1f       	adc	r27, r27
    39a8:	26 17       	cp	r18, r22
    39aa:	37 07       	cpc	r19, r23
    39ac:	48 07       	cpc	r20, r24
    39ae:	ab 07       	cpc	r26, r27
    39b0:	b0 e8       	ldi	r27, 0x80	; 128
    39b2:	09 f0       	breq	.+2      	; 0x39b6 <__divsf3_pse+0x56>
    39b4:	bb 0b       	sbc	r27, r27
    39b6:	80 2d       	mov	r24, r0
    39b8:	bf 01       	movw	r22, r30
    39ba:	ff 27       	eor	r31, r31
    39bc:	93 58       	subi	r25, 0x83	; 131
    39be:	5f 4f       	sbci	r21, 0xFF	; 255
    39c0:	2a f0       	brmi	.+10     	; 0x39cc <__divsf3_pse+0x6c>
    39c2:	9e 3f       	cpi	r25, 0xFE	; 254
    39c4:	51 05       	cpc	r21, r1
    39c6:	68 f0       	brcs	.+26     	; 0x39e2 <__divsf3_pse+0x82>
    39c8:	c9 c0       	rjmp	.+402    	; 0x3b5c <__fp_inf>
    39ca:	78 c1       	rjmp	.+752    	; 0x3cbc <__fp_szero>
    39cc:	5f 3f       	cpi	r21, 0xFF	; 255
    39ce:	ec f3       	brlt	.-6      	; 0x39ca <__divsf3_pse+0x6a>
    39d0:	98 3e       	cpi	r25, 0xE8	; 232
    39d2:	dc f3       	brlt	.-10     	; 0x39ca <__divsf3_pse+0x6a>
    39d4:	86 95       	lsr	r24
    39d6:	77 95       	ror	r23
    39d8:	67 95       	ror	r22
    39da:	b7 95       	ror	r27
    39dc:	f7 95       	ror	r31
    39de:	9f 5f       	subi	r25, 0xFF	; 255
    39e0:	c9 f7       	brne	.-14     	; 0x39d4 <__divsf3_pse+0x74>
    39e2:	88 0f       	add	r24, r24
    39e4:	91 1d       	adc	r25, r1
    39e6:	96 95       	lsr	r25
    39e8:	87 95       	ror	r24
    39ea:	97 f9       	bld	r25, 7
    39ec:	08 95       	ret
    39ee:	e1 e0       	ldi	r30, 0x01	; 1
    39f0:	66 0f       	add	r22, r22
    39f2:	77 1f       	adc	r23, r23
    39f4:	88 1f       	adc	r24, r24
    39f6:	bb 1f       	adc	r27, r27
    39f8:	62 17       	cp	r22, r18
    39fa:	73 07       	cpc	r23, r19
    39fc:	84 07       	cpc	r24, r20
    39fe:	ba 07       	cpc	r27, r26
    3a00:	20 f0       	brcs	.+8      	; 0x3a0a <__divsf3_pse+0xaa>
    3a02:	62 1b       	sub	r22, r18
    3a04:	73 0b       	sbc	r23, r19
    3a06:	84 0b       	sbc	r24, r20
    3a08:	ba 0b       	sbc	r27, r26
    3a0a:	ee 1f       	adc	r30, r30
    3a0c:	88 f7       	brcc	.-30     	; 0x39f0 <__divsf3_pse+0x90>
    3a0e:	e0 95       	com	r30
    3a10:	08 95       	ret

00003a12 <__fixsfsi>:
    3a12:	04 d0       	rcall	.+8      	; 0x3a1c <__fixunssfsi>
    3a14:	68 94       	set
    3a16:	b1 11       	cpse	r27, r1
    3a18:	51 c1       	rjmp	.+674    	; 0x3cbc <__fp_szero>
    3a1a:	08 95       	ret

00003a1c <__fixunssfsi>:
    3a1c:	1d d1       	rcall	.+570    	; 0x3c58 <__fp_splitA>
    3a1e:	88 f0       	brcs	.+34     	; 0x3a42 <__fixunssfsi+0x26>
    3a20:	9f 57       	subi	r25, 0x7F	; 127
    3a22:	90 f0       	brcs	.+36     	; 0x3a48 <__fixunssfsi+0x2c>
    3a24:	b9 2f       	mov	r27, r25
    3a26:	99 27       	eor	r25, r25
    3a28:	b7 51       	subi	r27, 0x17	; 23
    3a2a:	a0 f0       	brcs	.+40     	; 0x3a54 <__fixunssfsi+0x38>
    3a2c:	d1 f0       	breq	.+52     	; 0x3a62 <__fixunssfsi+0x46>
    3a2e:	66 0f       	add	r22, r22
    3a30:	77 1f       	adc	r23, r23
    3a32:	88 1f       	adc	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	1a f0       	brmi	.+6      	; 0x3a3e <__fixunssfsi+0x22>
    3a38:	ba 95       	dec	r27
    3a3a:	c9 f7       	brne	.-14     	; 0x3a2e <__fixunssfsi+0x12>
    3a3c:	12 c0       	rjmp	.+36     	; 0x3a62 <__fixunssfsi+0x46>
    3a3e:	b1 30       	cpi	r27, 0x01	; 1
    3a40:	81 f0       	breq	.+32     	; 0x3a62 <__fixunssfsi+0x46>
    3a42:	3b d1       	rcall	.+630    	; 0x3cba <__fp_zero>
    3a44:	b1 e0       	ldi	r27, 0x01	; 1
    3a46:	08 95       	ret
    3a48:	38 c1       	rjmp	.+624    	; 0x3cba <__fp_zero>
    3a4a:	67 2f       	mov	r22, r23
    3a4c:	78 2f       	mov	r23, r24
    3a4e:	88 27       	eor	r24, r24
    3a50:	b8 5f       	subi	r27, 0xF8	; 248
    3a52:	39 f0       	breq	.+14     	; 0x3a62 <__fixunssfsi+0x46>
    3a54:	b9 3f       	cpi	r27, 0xF9	; 249
    3a56:	cc f3       	brlt	.-14     	; 0x3a4a <__fixunssfsi+0x2e>
    3a58:	86 95       	lsr	r24
    3a5a:	77 95       	ror	r23
    3a5c:	67 95       	ror	r22
    3a5e:	b3 95       	inc	r27
    3a60:	d9 f7       	brne	.-10     	; 0x3a58 <__fixunssfsi+0x3c>
    3a62:	3e f4       	brtc	.+14     	; 0x3a72 <__fixunssfsi+0x56>
    3a64:	90 95       	com	r25
    3a66:	80 95       	com	r24
    3a68:	70 95       	com	r23
    3a6a:	61 95       	neg	r22
    3a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a70:	9f 4f       	sbci	r25, 0xFF	; 255
    3a72:	08 95       	ret

00003a74 <__floatunsisf>:
    3a74:	e8 94       	clt
    3a76:	09 c0       	rjmp	.+18     	; 0x3a8a <__floatsisf+0x12>

00003a78 <__floatsisf>:
    3a78:	97 fb       	bst	r25, 7
    3a7a:	3e f4       	brtc	.+14     	; 0x3a8a <__floatsisf+0x12>
    3a7c:	90 95       	com	r25
    3a7e:	80 95       	com	r24
    3a80:	70 95       	com	r23
    3a82:	61 95       	neg	r22
    3a84:	7f 4f       	sbci	r23, 0xFF	; 255
    3a86:	8f 4f       	sbci	r24, 0xFF	; 255
    3a88:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8a:	99 23       	and	r25, r25
    3a8c:	a9 f0       	breq	.+42     	; 0x3ab8 <__floatsisf+0x40>
    3a8e:	f9 2f       	mov	r31, r25
    3a90:	96 e9       	ldi	r25, 0x96	; 150
    3a92:	bb 27       	eor	r27, r27
    3a94:	93 95       	inc	r25
    3a96:	f6 95       	lsr	r31
    3a98:	87 95       	ror	r24
    3a9a:	77 95       	ror	r23
    3a9c:	67 95       	ror	r22
    3a9e:	b7 95       	ror	r27
    3aa0:	f1 11       	cpse	r31, r1
    3aa2:	f8 cf       	rjmp	.-16     	; 0x3a94 <__floatsisf+0x1c>
    3aa4:	fa f4       	brpl	.+62     	; 0x3ae4 <__floatsisf+0x6c>
    3aa6:	bb 0f       	add	r27, r27
    3aa8:	11 f4       	brne	.+4      	; 0x3aae <__floatsisf+0x36>
    3aaa:	60 ff       	sbrs	r22, 0
    3aac:	1b c0       	rjmp	.+54     	; 0x3ae4 <__floatsisf+0x6c>
    3aae:	6f 5f       	subi	r22, 0xFF	; 255
    3ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab6:	16 c0       	rjmp	.+44     	; 0x3ae4 <__floatsisf+0x6c>
    3ab8:	88 23       	and	r24, r24
    3aba:	11 f0       	breq	.+4      	; 0x3ac0 <__floatsisf+0x48>
    3abc:	96 e9       	ldi	r25, 0x96	; 150
    3abe:	11 c0       	rjmp	.+34     	; 0x3ae2 <__floatsisf+0x6a>
    3ac0:	77 23       	and	r23, r23
    3ac2:	21 f0       	breq	.+8      	; 0x3acc <__floatsisf+0x54>
    3ac4:	9e e8       	ldi	r25, 0x8E	; 142
    3ac6:	87 2f       	mov	r24, r23
    3ac8:	76 2f       	mov	r23, r22
    3aca:	05 c0       	rjmp	.+10     	; 0x3ad6 <__floatsisf+0x5e>
    3acc:	66 23       	and	r22, r22
    3ace:	71 f0       	breq	.+28     	; 0x3aec <__floatsisf+0x74>
    3ad0:	96 e8       	ldi	r25, 0x86	; 134
    3ad2:	86 2f       	mov	r24, r22
    3ad4:	70 e0       	ldi	r23, 0x00	; 0
    3ad6:	60 e0       	ldi	r22, 0x00	; 0
    3ad8:	2a f0       	brmi	.+10     	; 0x3ae4 <__floatsisf+0x6c>
    3ada:	9a 95       	dec	r25
    3adc:	66 0f       	add	r22, r22
    3ade:	77 1f       	adc	r23, r23
    3ae0:	88 1f       	adc	r24, r24
    3ae2:	da f7       	brpl	.-10     	; 0x3ada <__floatsisf+0x62>
    3ae4:	88 0f       	add	r24, r24
    3ae6:	96 95       	lsr	r25
    3ae8:	87 95       	ror	r24
    3aea:	97 f9       	bld	r25, 7
    3aec:	08 95       	ret

00003aee <floor>:
    3aee:	ce d0       	rcall	.+412    	; 0x3c8c <__fp_trunc>
    3af0:	80 f0       	brcs	.+32     	; 0x3b12 <floor+0x24>
    3af2:	9f 37       	cpi	r25, 0x7F	; 127
    3af4:	40 f4       	brcc	.+16     	; 0x3b06 <floor+0x18>
    3af6:	91 11       	cpse	r25, r1
    3af8:	0e f0       	brts	.+2      	; 0x3afc <floor+0xe>
    3afa:	e0 c0       	rjmp	.+448    	; 0x3cbc <__fp_szero>
    3afc:	60 e0       	ldi	r22, 0x00	; 0
    3afe:	70 e0       	ldi	r23, 0x00	; 0
    3b00:	80 e8       	ldi	r24, 0x80	; 128
    3b02:	9f eb       	ldi	r25, 0xBF	; 191
    3b04:	08 95       	ret
    3b06:	26 f4       	brtc	.+8      	; 0x3b10 <floor+0x22>
    3b08:	1b 16       	cp	r1, r27
    3b0a:	61 1d       	adc	r22, r1
    3b0c:	71 1d       	adc	r23, r1
    3b0e:	81 1d       	adc	r24, r1
    3b10:	2b c0       	rjmp	.+86     	; 0x3b68 <__fp_mintl>
    3b12:	45 c0       	rjmp	.+138    	; 0x3b9e <__fp_mpack>

00003b14 <__fp_cmp>:
    3b14:	99 0f       	add	r25, r25
    3b16:	00 08       	sbc	r0, r0
    3b18:	55 0f       	add	r21, r21
    3b1a:	aa 0b       	sbc	r26, r26
    3b1c:	e0 e8       	ldi	r30, 0x80	; 128
    3b1e:	fe ef       	ldi	r31, 0xFE	; 254
    3b20:	16 16       	cp	r1, r22
    3b22:	17 06       	cpc	r1, r23
    3b24:	e8 07       	cpc	r30, r24
    3b26:	f9 07       	cpc	r31, r25
    3b28:	c0 f0       	brcs	.+48     	; 0x3b5a <__fp_cmp+0x46>
    3b2a:	12 16       	cp	r1, r18
    3b2c:	13 06       	cpc	r1, r19
    3b2e:	e4 07       	cpc	r30, r20
    3b30:	f5 07       	cpc	r31, r21
    3b32:	98 f0       	brcs	.+38     	; 0x3b5a <__fp_cmp+0x46>
    3b34:	62 1b       	sub	r22, r18
    3b36:	73 0b       	sbc	r23, r19
    3b38:	84 0b       	sbc	r24, r20
    3b3a:	95 0b       	sbc	r25, r21
    3b3c:	39 f4       	brne	.+14     	; 0x3b4c <__fp_cmp+0x38>
    3b3e:	0a 26       	eor	r0, r26
    3b40:	61 f0       	breq	.+24     	; 0x3b5a <__fp_cmp+0x46>
    3b42:	23 2b       	or	r18, r19
    3b44:	24 2b       	or	r18, r20
    3b46:	25 2b       	or	r18, r21
    3b48:	21 f4       	brne	.+8      	; 0x3b52 <__fp_cmp+0x3e>
    3b4a:	08 95       	ret
    3b4c:	0a 26       	eor	r0, r26
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <__fp_cmp+0x3e>
    3b50:	a1 40       	sbci	r26, 0x01	; 1
    3b52:	a6 95       	lsr	r26
    3b54:	8f ef       	ldi	r24, 0xFF	; 255
    3b56:	81 1d       	adc	r24, r1
    3b58:	81 1d       	adc	r24, r1
    3b5a:	08 95       	ret

00003b5c <__fp_inf>:
    3b5c:	97 f9       	bld	r25, 7
    3b5e:	9f 67       	ori	r25, 0x7F	; 127
    3b60:	80 e8       	ldi	r24, 0x80	; 128
    3b62:	70 e0       	ldi	r23, 0x00	; 0
    3b64:	60 e0       	ldi	r22, 0x00	; 0
    3b66:	08 95       	ret

00003b68 <__fp_mintl>:
    3b68:	88 23       	and	r24, r24
    3b6a:	71 f4       	brne	.+28     	; 0x3b88 <__fp_mintl+0x20>
    3b6c:	77 23       	and	r23, r23
    3b6e:	21 f0       	breq	.+8      	; 0x3b78 <__fp_mintl+0x10>
    3b70:	98 50       	subi	r25, 0x08	; 8
    3b72:	87 2b       	or	r24, r23
    3b74:	76 2f       	mov	r23, r22
    3b76:	07 c0       	rjmp	.+14     	; 0x3b86 <__fp_mintl+0x1e>
    3b78:	66 23       	and	r22, r22
    3b7a:	11 f4       	brne	.+4      	; 0x3b80 <__fp_mintl+0x18>
    3b7c:	99 27       	eor	r25, r25
    3b7e:	0d c0       	rjmp	.+26     	; 0x3b9a <__fp_mintl+0x32>
    3b80:	90 51       	subi	r25, 0x10	; 16
    3b82:	86 2b       	or	r24, r22
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	60 e0       	ldi	r22, 0x00	; 0
    3b88:	2a f0       	brmi	.+10     	; 0x3b94 <__fp_mintl+0x2c>
    3b8a:	9a 95       	dec	r25
    3b8c:	66 0f       	add	r22, r22
    3b8e:	77 1f       	adc	r23, r23
    3b90:	88 1f       	adc	r24, r24
    3b92:	da f7       	brpl	.-10     	; 0x3b8a <__fp_mintl+0x22>
    3b94:	88 0f       	add	r24, r24
    3b96:	96 95       	lsr	r25
    3b98:	87 95       	ror	r24
    3b9a:	97 f9       	bld	r25, 7
    3b9c:	08 95       	ret

00003b9e <__fp_mpack>:
    3b9e:	9f 3f       	cpi	r25, 0xFF	; 255
    3ba0:	31 f0       	breq	.+12     	; 0x3bae <__fp_mpack_finite+0xc>

00003ba2 <__fp_mpack_finite>:
    3ba2:	91 50       	subi	r25, 0x01	; 1
    3ba4:	20 f4       	brcc	.+8      	; 0x3bae <__fp_mpack_finite+0xc>
    3ba6:	87 95       	ror	r24
    3ba8:	77 95       	ror	r23
    3baa:	67 95       	ror	r22
    3bac:	b7 95       	ror	r27
    3bae:	88 0f       	add	r24, r24
    3bb0:	91 1d       	adc	r25, r1
    3bb2:	96 95       	lsr	r25
    3bb4:	87 95       	ror	r24
    3bb6:	97 f9       	bld	r25, 7
    3bb8:	08 95       	ret

00003bba <__fp_nan>:
    3bba:	9f ef       	ldi	r25, 0xFF	; 255
    3bbc:	80 ec       	ldi	r24, 0xC0	; 192
    3bbe:	08 95       	ret

00003bc0 <__fp_powser>:
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	1f 93       	push	r17
    3bc6:	0f 93       	push	r16
    3bc8:	ff 92       	push	r15
    3bca:	ef 92       	push	r14
    3bcc:	df 92       	push	r13
    3bce:	7b 01       	movw	r14, r22
    3bd0:	8c 01       	movw	r16, r24
    3bd2:	68 94       	set
    3bd4:	05 c0       	rjmp	.+10     	; 0x3be0 <__fp_powser+0x20>
    3bd6:	da 2e       	mov	r13, r26
    3bd8:	ef 01       	movw	r28, r30
    3bda:	f0 d0       	rcall	.+480    	; 0x3dbc <__mulsf3x>
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e8 94       	clt
    3be0:	a5 91       	lpm	r26, Z+
    3be2:	25 91       	lpm	r18, Z+
    3be4:	35 91       	lpm	r19, Z+
    3be6:	45 91       	lpm	r20, Z+
    3be8:	55 91       	lpm	r21, Z+
    3bea:	ae f3       	brts	.-22     	; 0x3bd6 <__fp_powser+0x16>
    3bec:	ef 01       	movw	r28, r30
    3bee:	17 de       	rcall	.-978    	; 0x381e <__addsf3x>
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	97 01       	movw	r18, r14
    3bf4:	a8 01       	movw	r20, r16
    3bf6:	da 94       	dec	r13
    3bf8:	79 f7       	brne	.-34     	; 0x3bd8 <__fp_powser+0x18>
    3bfa:	df 90       	pop	r13
    3bfc:	ef 90       	pop	r14
    3bfe:	ff 90       	pop	r15
    3c00:	0f 91       	pop	r16
    3c02:	1f 91       	pop	r17
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <__fp_pscA>:
    3c0a:	00 24       	eor	r0, r0
    3c0c:	0a 94       	dec	r0
    3c0e:	16 16       	cp	r1, r22
    3c10:	17 06       	cpc	r1, r23
    3c12:	18 06       	cpc	r1, r24
    3c14:	09 06       	cpc	r0, r25
    3c16:	08 95       	ret

00003c18 <__fp_pscB>:
    3c18:	00 24       	eor	r0, r0
    3c1a:	0a 94       	dec	r0
    3c1c:	12 16       	cp	r1, r18
    3c1e:	13 06       	cpc	r1, r19
    3c20:	14 06       	cpc	r1, r20
    3c22:	05 06       	cpc	r0, r21
    3c24:	08 95       	ret

00003c26 <__fp_round>:
    3c26:	09 2e       	mov	r0, r25
    3c28:	03 94       	inc	r0
    3c2a:	00 0c       	add	r0, r0
    3c2c:	11 f4       	brne	.+4      	; 0x3c32 <__fp_round+0xc>
    3c2e:	88 23       	and	r24, r24
    3c30:	52 f0       	brmi	.+20     	; 0x3c46 <__fp_round+0x20>
    3c32:	bb 0f       	add	r27, r27
    3c34:	40 f4       	brcc	.+16     	; 0x3c46 <__fp_round+0x20>
    3c36:	bf 2b       	or	r27, r31
    3c38:	11 f4       	brne	.+4      	; 0x3c3e <__fp_round+0x18>
    3c3a:	60 ff       	sbrs	r22, 0
    3c3c:	04 c0       	rjmp	.+8      	; 0x3c46 <__fp_round+0x20>
    3c3e:	6f 5f       	subi	r22, 0xFF	; 255
    3c40:	7f 4f       	sbci	r23, 0xFF	; 255
    3c42:	8f 4f       	sbci	r24, 0xFF	; 255
    3c44:	9f 4f       	sbci	r25, 0xFF	; 255
    3c46:	08 95       	ret

00003c48 <__fp_split3>:
    3c48:	57 fd       	sbrc	r21, 7
    3c4a:	90 58       	subi	r25, 0x80	; 128
    3c4c:	44 0f       	add	r20, r20
    3c4e:	55 1f       	adc	r21, r21
    3c50:	59 f0       	breq	.+22     	; 0x3c68 <__fp_splitA+0x10>
    3c52:	5f 3f       	cpi	r21, 0xFF	; 255
    3c54:	71 f0       	breq	.+28     	; 0x3c72 <__fp_splitA+0x1a>
    3c56:	47 95       	ror	r20

00003c58 <__fp_splitA>:
    3c58:	88 0f       	add	r24, r24
    3c5a:	97 fb       	bst	r25, 7
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	61 f0       	breq	.+24     	; 0x3c78 <__fp_splitA+0x20>
    3c60:	9f 3f       	cpi	r25, 0xFF	; 255
    3c62:	79 f0       	breq	.+30     	; 0x3c82 <__fp_splitA+0x2a>
    3c64:	87 95       	ror	r24
    3c66:	08 95       	ret
    3c68:	12 16       	cp	r1, r18
    3c6a:	13 06       	cpc	r1, r19
    3c6c:	14 06       	cpc	r1, r20
    3c6e:	55 1f       	adc	r21, r21
    3c70:	f2 cf       	rjmp	.-28     	; 0x3c56 <__fp_split3+0xe>
    3c72:	46 95       	lsr	r20
    3c74:	f1 df       	rcall	.-30     	; 0x3c58 <__fp_splitA>
    3c76:	08 c0       	rjmp	.+16     	; 0x3c88 <__fp_splitA+0x30>
    3c78:	16 16       	cp	r1, r22
    3c7a:	17 06       	cpc	r1, r23
    3c7c:	18 06       	cpc	r1, r24
    3c7e:	99 1f       	adc	r25, r25
    3c80:	f1 cf       	rjmp	.-30     	; 0x3c64 <__fp_splitA+0xc>
    3c82:	86 95       	lsr	r24
    3c84:	71 05       	cpc	r23, r1
    3c86:	61 05       	cpc	r22, r1
    3c88:	08 94       	sec
    3c8a:	08 95       	ret

00003c8c <__fp_trunc>:
    3c8c:	e5 df       	rcall	.-54     	; 0x3c58 <__fp_splitA>
    3c8e:	a0 f0       	brcs	.+40     	; 0x3cb8 <__fp_trunc+0x2c>
    3c90:	be e7       	ldi	r27, 0x7E	; 126
    3c92:	b9 17       	cp	r27, r25
    3c94:	88 f4       	brcc	.+34     	; 0x3cb8 <__fp_trunc+0x2c>
    3c96:	bb 27       	eor	r27, r27
    3c98:	9f 38       	cpi	r25, 0x8F	; 143
    3c9a:	60 f4       	brcc	.+24     	; 0x3cb4 <__fp_trunc+0x28>
    3c9c:	16 16       	cp	r1, r22
    3c9e:	b1 1d       	adc	r27, r1
    3ca0:	67 2f       	mov	r22, r23
    3ca2:	78 2f       	mov	r23, r24
    3ca4:	88 27       	eor	r24, r24
    3ca6:	98 5f       	subi	r25, 0xF8	; 248
    3ca8:	f7 cf       	rjmp	.-18     	; 0x3c98 <__fp_trunc+0xc>
    3caa:	86 95       	lsr	r24
    3cac:	77 95       	ror	r23
    3cae:	67 95       	ror	r22
    3cb0:	b1 1d       	adc	r27, r1
    3cb2:	93 95       	inc	r25
    3cb4:	96 39       	cpi	r25, 0x96	; 150
    3cb6:	c8 f3       	brcs	.-14     	; 0x3caa <__fp_trunc+0x1e>
    3cb8:	08 95       	ret

00003cba <__fp_zero>:
    3cba:	e8 94       	clt

00003cbc <__fp_szero>:
    3cbc:	bb 27       	eor	r27, r27
    3cbe:	66 27       	eor	r22, r22
    3cc0:	77 27       	eor	r23, r23
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	97 f9       	bld	r25, 7
    3cc6:	08 95       	ret

00003cc8 <__gesf2>:
    3cc8:	25 df       	rcall	.-438    	; 0x3b14 <__fp_cmp>
    3cca:	08 f4       	brcc	.+2      	; 0x3cce <__gesf2+0x6>
    3ccc:	8f ef       	ldi	r24, 0xFF	; 255
    3cce:	08 95       	ret

00003cd0 <inverse>:
    3cd0:	9b 01       	movw	r18, r22
    3cd2:	ac 01       	movw	r20, r24
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	70 e0       	ldi	r23, 0x00	; 0
    3cd8:	80 e8       	ldi	r24, 0x80	; 128
    3cda:	9f e3       	ldi	r25, 0x3F	; 63
    3cdc:	32 ce       	rjmp	.-924    	; 0x3942 <__divsf3>

00003cde <lround>:
    3cde:	bc df       	rcall	.-136    	; 0x3c58 <__fp_splitA>
    3ce0:	58 f1       	brcs	.+86     	; 0x3d38 <lround+0x5a>
    3ce2:	9e 57       	subi	r25, 0x7E	; 126
    3ce4:	58 f1       	brcs	.+86     	; 0x3d3c <lround+0x5e>
    3ce6:	98 51       	subi	r25, 0x18	; 24
    3ce8:	a0 f0       	brcs	.+40     	; 0x3d12 <lround+0x34>
    3cea:	e9 f0       	breq	.+58     	; 0x3d26 <lround+0x48>
    3cec:	98 30       	cpi	r25, 0x08	; 8
    3cee:	20 f5       	brcc	.+72     	; 0x3d38 <lround+0x5a>
    3cf0:	09 2e       	mov	r0, r25
    3cf2:	99 27       	eor	r25, r25
    3cf4:	66 0f       	add	r22, r22
    3cf6:	77 1f       	adc	r23, r23
    3cf8:	88 1f       	adc	r24, r24
    3cfa:	99 1f       	adc	r25, r25
    3cfc:	0a 94       	dec	r0
    3cfe:	d1 f7       	brne	.-12     	; 0x3cf4 <lround+0x16>
    3d00:	12 c0       	rjmp	.+36     	; 0x3d26 <lround+0x48>
    3d02:	06 2e       	mov	r0, r22
    3d04:	67 2f       	mov	r22, r23
    3d06:	78 2f       	mov	r23, r24
    3d08:	88 27       	eor	r24, r24
    3d0a:	98 5f       	subi	r25, 0xF8	; 248
    3d0c:	11 f4       	brne	.+4      	; 0x3d12 <lround+0x34>
    3d0e:	00 0c       	add	r0, r0
    3d10:	07 c0       	rjmp	.+14     	; 0x3d20 <lround+0x42>
    3d12:	99 3f       	cpi	r25, 0xF9	; 249
    3d14:	b4 f3       	brlt	.-20     	; 0x3d02 <lround+0x24>
    3d16:	86 95       	lsr	r24
    3d18:	77 95       	ror	r23
    3d1a:	67 95       	ror	r22
    3d1c:	93 95       	inc	r25
    3d1e:	d9 f7       	brne	.-10     	; 0x3d16 <lround+0x38>
    3d20:	61 1d       	adc	r22, r1
    3d22:	71 1d       	adc	r23, r1
    3d24:	81 1d       	adc	r24, r1
    3d26:	3e f4       	brtc	.+14     	; 0x3d36 <lround+0x58>
    3d28:	90 95       	com	r25
    3d2a:	80 95       	com	r24
    3d2c:	70 95       	com	r23
    3d2e:	61 95       	neg	r22
    3d30:	7f 4f       	sbci	r23, 0xFF	; 255
    3d32:	8f 4f       	sbci	r24, 0xFF	; 255
    3d34:	9f 4f       	sbci	r25, 0xFF	; 255
    3d36:	08 95       	ret
    3d38:	68 94       	set
    3d3a:	c0 cf       	rjmp	.-128    	; 0x3cbc <__fp_szero>
    3d3c:	be cf       	rjmp	.-132    	; 0x3cba <__fp_zero>

00003d3e <modf>:
    3d3e:	fa 01       	movw	r30, r20
    3d40:	dc 01       	movw	r26, r24
    3d42:	aa 0f       	add	r26, r26
    3d44:	bb 1f       	adc	r27, r27
    3d46:	9b 01       	movw	r18, r22
    3d48:	ac 01       	movw	r20, r24
    3d4a:	bf 57       	subi	r27, 0x7F	; 127
    3d4c:	28 f4       	brcc	.+10     	; 0x3d58 <modf+0x1a>
    3d4e:	22 27       	eor	r18, r18
    3d50:	33 27       	eor	r19, r19
    3d52:	44 27       	eor	r20, r20
    3d54:	50 78       	andi	r21, 0x80	; 128
    3d56:	1f c0       	rjmp	.+62     	; 0x3d96 <modf+0x58>
    3d58:	b7 51       	subi	r27, 0x17	; 23
    3d5a:	88 f4       	brcc	.+34     	; 0x3d7e <modf+0x40>
    3d5c:	ab 2f       	mov	r26, r27
    3d5e:	00 24       	eor	r0, r0
    3d60:	46 95       	lsr	r20
    3d62:	37 95       	ror	r19
    3d64:	27 95       	ror	r18
    3d66:	01 1c       	adc	r0, r1
    3d68:	a3 95       	inc	r26
    3d6a:	d2 f3       	brmi	.-12     	; 0x3d60 <modf+0x22>
    3d6c:	00 20       	and	r0, r0
    3d6e:	69 f0       	breq	.+26     	; 0x3d8a <modf+0x4c>
    3d70:	22 0f       	add	r18, r18
    3d72:	33 1f       	adc	r19, r19
    3d74:	44 1f       	adc	r20, r20
    3d76:	b3 95       	inc	r27
    3d78:	da f3       	brmi	.-10     	; 0x3d70 <modf+0x32>
    3d7a:	0d d0       	rcall	.+26     	; 0x3d96 <modf+0x58>
    3d7c:	3e cd       	rjmp	.-1412   	; 0x37fa <__subsf3>
    3d7e:	61 30       	cpi	r22, 0x01	; 1
    3d80:	71 05       	cpc	r23, r1
    3d82:	a0 e8       	ldi	r26, 0x80	; 128
    3d84:	8a 07       	cpc	r24, r26
    3d86:	b9 46       	sbci	r27, 0x69	; 105
    3d88:	30 f4       	brcc	.+12     	; 0x3d96 <modf+0x58>
    3d8a:	9b 01       	movw	r18, r22
    3d8c:	ac 01       	movw	r20, r24
    3d8e:	66 27       	eor	r22, r22
    3d90:	77 27       	eor	r23, r23
    3d92:	88 27       	eor	r24, r24
    3d94:	90 78       	andi	r25, 0x80	; 128
    3d96:	30 96       	adiw	r30, 0x00	; 0
    3d98:	21 f0       	breq	.+8      	; 0x3da2 <modf+0x64>
    3d9a:	20 83       	st	Z, r18
    3d9c:	31 83       	std	Z+1, r19	; 0x01
    3d9e:	42 83       	std	Z+2, r20	; 0x02
    3da0:	53 83       	std	Z+3, r21	; 0x03
    3da2:	08 95       	ret

00003da4 <__mulsf3>:
    3da4:	0b d0       	rcall	.+22     	; 0x3dbc <__mulsf3x>
    3da6:	3f cf       	rjmp	.-386    	; 0x3c26 <__fp_round>
    3da8:	30 df       	rcall	.-416    	; 0x3c0a <__fp_pscA>
    3daa:	28 f0       	brcs	.+10     	; 0x3db6 <__mulsf3+0x12>
    3dac:	35 df       	rcall	.-406    	; 0x3c18 <__fp_pscB>
    3dae:	18 f0       	brcs	.+6      	; 0x3db6 <__mulsf3+0x12>
    3db0:	95 23       	and	r25, r21
    3db2:	09 f0       	breq	.+2      	; 0x3db6 <__mulsf3+0x12>
    3db4:	d3 ce       	rjmp	.-602    	; 0x3b5c <__fp_inf>
    3db6:	01 cf       	rjmp	.-510    	; 0x3bba <__fp_nan>
    3db8:	11 24       	eor	r1, r1
    3dba:	80 cf       	rjmp	.-256    	; 0x3cbc <__fp_szero>

00003dbc <__mulsf3x>:
    3dbc:	45 df       	rcall	.-374    	; 0x3c48 <__fp_split3>
    3dbe:	a0 f3       	brcs	.-24     	; 0x3da8 <__mulsf3+0x4>

00003dc0 <__mulsf3_pse>:
    3dc0:	95 9f       	mul	r25, r21
    3dc2:	d1 f3       	breq	.-12     	; 0x3db8 <__mulsf3+0x14>
    3dc4:	95 0f       	add	r25, r21
    3dc6:	50 e0       	ldi	r21, 0x00	; 0
    3dc8:	55 1f       	adc	r21, r21
    3dca:	62 9f       	mul	r22, r18
    3dcc:	f0 01       	movw	r30, r0
    3dce:	72 9f       	mul	r23, r18
    3dd0:	bb 27       	eor	r27, r27
    3dd2:	f0 0d       	add	r31, r0
    3dd4:	b1 1d       	adc	r27, r1
    3dd6:	63 9f       	mul	r22, r19
    3dd8:	aa 27       	eor	r26, r26
    3dda:	f0 0d       	add	r31, r0
    3ddc:	b1 1d       	adc	r27, r1
    3dde:	aa 1f       	adc	r26, r26
    3de0:	64 9f       	mul	r22, r20
    3de2:	66 27       	eor	r22, r22
    3de4:	b0 0d       	add	r27, r0
    3de6:	a1 1d       	adc	r26, r1
    3de8:	66 1f       	adc	r22, r22
    3dea:	82 9f       	mul	r24, r18
    3dec:	22 27       	eor	r18, r18
    3dee:	b0 0d       	add	r27, r0
    3df0:	a1 1d       	adc	r26, r1
    3df2:	62 1f       	adc	r22, r18
    3df4:	73 9f       	mul	r23, r19
    3df6:	b0 0d       	add	r27, r0
    3df8:	a1 1d       	adc	r26, r1
    3dfa:	62 1f       	adc	r22, r18
    3dfc:	83 9f       	mul	r24, r19
    3dfe:	a0 0d       	add	r26, r0
    3e00:	61 1d       	adc	r22, r1
    3e02:	22 1f       	adc	r18, r18
    3e04:	74 9f       	mul	r23, r20
    3e06:	33 27       	eor	r19, r19
    3e08:	a0 0d       	add	r26, r0
    3e0a:	61 1d       	adc	r22, r1
    3e0c:	23 1f       	adc	r18, r19
    3e0e:	84 9f       	mul	r24, r20
    3e10:	60 0d       	add	r22, r0
    3e12:	21 1d       	adc	r18, r1
    3e14:	82 2f       	mov	r24, r18
    3e16:	76 2f       	mov	r23, r22
    3e18:	6a 2f       	mov	r22, r26
    3e1a:	11 24       	eor	r1, r1
    3e1c:	9f 57       	subi	r25, 0x7F	; 127
    3e1e:	50 40       	sbci	r21, 0x00	; 0
    3e20:	8a f0       	brmi	.+34     	; 0x3e44 <__mulsf3_pse+0x84>
    3e22:	e1 f0       	breq	.+56     	; 0x3e5c <__mulsf3_pse+0x9c>
    3e24:	88 23       	and	r24, r24
    3e26:	4a f0       	brmi	.+18     	; 0x3e3a <__mulsf3_pse+0x7a>
    3e28:	ee 0f       	add	r30, r30
    3e2a:	ff 1f       	adc	r31, r31
    3e2c:	bb 1f       	adc	r27, r27
    3e2e:	66 1f       	adc	r22, r22
    3e30:	77 1f       	adc	r23, r23
    3e32:	88 1f       	adc	r24, r24
    3e34:	91 50       	subi	r25, 0x01	; 1
    3e36:	50 40       	sbci	r21, 0x00	; 0
    3e38:	a9 f7       	brne	.-22     	; 0x3e24 <__mulsf3_pse+0x64>
    3e3a:	9e 3f       	cpi	r25, 0xFE	; 254
    3e3c:	51 05       	cpc	r21, r1
    3e3e:	70 f0       	brcs	.+28     	; 0x3e5c <__mulsf3_pse+0x9c>
    3e40:	8d ce       	rjmp	.-742    	; 0x3b5c <__fp_inf>
    3e42:	3c cf       	rjmp	.-392    	; 0x3cbc <__fp_szero>
    3e44:	5f 3f       	cpi	r21, 0xFF	; 255
    3e46:	ec f3       	brlt	.-6      	; 0x3e42 <__mulsf3_pse+0x82>
    3e48:	98 3e       	cpi	r25, 0xE8	; 232
    3e4a:	dc f3       	brlt	.-10     	; 0x3e42 <__mulsf3_pse+0x82>
    3e4c:	86 95       	lsr	r24
    3e4e:	77 95       	ror	r23
    3e50:	67 95       	ror	r22
    3e52:	b7 95       	ror	r27
    3e54:	f7 95       	ror	r31
    3e56:	e7 95       	ror	r30
    3e58:	9f 5f       	subi	r25, 0xFF	; 255
    3e5a:	c1 f7       	brne	.-16     	; 0x3e4c <__mulsf3_pse+0x8c>
    3e5c:	fe 2b       	or	r31, r30
    3e5e:	88 0f       	add	r24, r24
    3e60:	91 1d       	adc	r25, r1
    3e62:	96 95       	lsr	r25
    3e64:	87 95       	ror	r24
    3e66:	97 f9       	bld	r25, 7
    3e68:	08 95       	ret

00003e6a <round>:
    3e6a:	f6 de       	rcall	.-532    	; 0x3c58 <__fp_splitA>
    3e6c:	e0 f0       	brcs	.+56     	; 0x3ea6 <round+0x3c>
    3e6e:	9e 37       	cpi	r25, 0x7E	; 126
    3e70:	d8 f0       	brcs	.+54     	; 0x3ea8 <round+0x3e>
    3e72:	96 39       	cpi	r25, 0x96	; 150
    3e74:	b8 f4       	brcc	.+46     	; 0x3ea4 <round+0x3a>
    3e76:	9e 38       	cpi	r25, 0x8E	; 142
    3e78:	48 f4       	brcc	.+18     	; 0x3e8c <round+0x22>
    3e7a:	67 2f       	mov	r22, r23
    3e7c:	78 2f       	mov	r23, r24
    3e7e:	88 27       	eor	r24, r24
    3e80:	98 5f       	subi	r25, 0xF8	; 248
    3e82:	f9 cf       	rjmp	.-14     	; 0x3e76 <round+0xc>
    3e84:	86 95       	lsr	r24
    3e86:	77 95       	ror	r23
    3e88:	67 95       	ror	r22
    3e8a:	93 95       	inc	r25
    3e8c:	95 39       	cpi	r25, 0x95	; 149
    3e8e:	d0 f3       	brcs	.-12     	; 0x3e84 <round+0x1a>
    3e90:	b6 2f       	mov	r27, r22
    3e92:	b1 70       	andi	r27, 0x01	; 1
    3e94:	6b 0f       	add	r22, r27
    3e96:	71 1d       	adc	r23, r1
    3e98:	81 1d       	adc	r24, r1
    3e9a:	20 f4       	brcc	.+8      	; 0x3ea4 <round+0x3a>
    3e9c:	87 95       	ror	r24
    3e9e:	77 95       	ror	r23
    3ea0:	67 95       	ror	r22
    3ea2:	93 95       	inc	r25
    3ea4:	61 ce       	rjmp	.-830    	; 0x3b68 <__fp_mintl>
    3ea6:	7b ce       	rjmp	.-778    	; 0x3b9e <__fp_mpack>
    3ea8:	09 cf       	rjmp	.-494    	; 0x3cbc <__fp_szero>
    3eaa:	11 f4       	brne	.+4      	; 0x3eb0 <round+0x46>
    3eac:	0e f4       	brtc	.+2      	; 0x3eb0 <round+0x46>
    3eae:	85 ce       	rjmp	.-758    	; 0x3bba <__fp_nan>
    3eb0:	76 ce       	rjmp	.-788    	; 0x3b9e <__fp_mpack>

00003eb2 <sqrt>:
    3eb2:	d2 de       	rcall	.-604    	; 0x3c58 <__fp_splitA>
    3eb4:	d0 f3       	brcs	.-12     	; 0x3eaa <round+0x40>
    3eb6:	99 23       	and	r25, r25
    3eb8:	d9 f3       	breq	.-10     	; 0x3eb0 <round+0x46>
    3eba:	ce f3       	brts	.-14     	; 0x3eae <round+0x44>
    3ebc:	9f 57       	subi	r25, 0x7F	; 127
    3ebe:	55 0b       	sbc	r21, r21
    3ec0:	87 ff       	sbrs	r24, 7
    3ec2:	3f d0       	rcall	.+126    	; 0x3f42 <__fp_norm2>
    3ec4:	00 24       	eor	r0, r0
    3ec6:	a0 e6       	ldi	r26, 0x60	; 96
    3ec8:	40 ea       	ldi	r20, 0xA0	; 160
    3eca:	90 01       	movw	r18, r0
    3ecc:	80 58       	subi	r24, 0x80	; 128
    3ece:	56 95       	lsr	r21
    3ed0:	97 95       	ror	r25
    3ed2:	28 f4       	brcc	.+10     	; 0x3ede <sqrt+0x2c>
    3ed4:	80 5c       	subi	r24, 0xC0	; 192
    3ed6:	66 0f       	add	r22, r22
    3ed8:	77 1f       	adc	r23, r23
    3eda:	88 1f       	adc	r24, r24
    3edc:	20 f0       	brcs	.+8      	; 0x3ee6 <sqrt+0x34>
    3ede:	26 17       	cp	r18, r22
    3ee0:	37 07       	cpc	r19, r23
    3ee2:	48 07       	cpc	r20, r24
    3ee4:	30 f4       	brcc	.+12     	; 0x3ef2 <sqrt+0x40>
    3ee6:	62 1b       	sub	r22, r18
    3ee8:	73 0b       	sbc	r23, r19
    3eea:	84 0b       	sbc	r24, r20
    3eec:	20 29       	or	r18, r0
    3eee:	31 29       	or	r19, r1
    3ef0:	4a 2b       	or	r20, r26
    3ef2:	a6 95       	lsr	r26
    3ef4:	17 94       	ror	r1
    3ef6:	07 94       	ror	r0
    3ef8:	20 25       	eor	r18, r0
    3efa:	31 25       	eor	r19, r1
    3efc:	4a 27       	eor	r20, r26
    3efe:	58 f7       	brcc	.-42     	; 0x3ed6 <sqrt+0x24>
    3f00:	66 0f       	add	r22, r22
    3f02:	77 1f       	adc	r23, r23
    3f04:	88 1f       	adc	r24, r24
    3f06:	20 f0       	brcs	.+8      	; 0x3f10 <sqrt+0x5e>
    3f08:	26 17       	cp	r18, r22
    3f0a:	37 07       	cpc	r19, r23
    3f0c:	48 07       	cpc	r20, r24
    3f0e:	30 f4       	brcc	.+12     	; 0x3f1c <sqrt+0x6a>
    3f10:	62 0b       	sbc	r22, r18
    3f12:	73 0b       	sbc	r23, r19
    3f14:	84 0b       	sbc	r24, r20
    3f16:	20 0d       	add	r18, r0
    3f18:	31 1d       	adc	r19, r1
    3f1a:	41 1d       	adc	r20, r1
    3f1c:	a0 95       	com	r26
    3f1e:	81 f7       	brne	.-32     	; 0x3f00 <sqrt+0x4e>
    3f20:	b9 01       	movw	r22, r18
    3f22:	84 2f       	mov	r24, r20
    3f24:	91 58       	subi	r25, 0x81	; 129
    3f26:	88 0f       	add	r24, r24
    3f28:	96 95       	lsr	r25
    3f2a:	87 95       	ror	r24
    3f2c:	08 95       	ret

00003f2e <square>:
    3f2e:	9b 01       	movw	r18, r22
    3f30:	ac 01       	movw	r20, r24
    3f32:	38 cf       	rjmp	.-400    	; 0x3da4 <__mulsf3>

00003f34 <trunc>:
    3f34:	ab de       	rcall	.-682    	; 0x3c8c <__fp_trunc>
    3f36:	20 f0       	brcs	.+8      	; 0x3f40 <trunc+0xc>
    3f38:	9f 37       	cpi	r25, 0x7F	; 127
    3f3a:	08 f4       	brcc	.+2      	; 0x3f3e <trunc+0xa>
    3f3c:	bf ce       	rjmp	.-642    	; 0x3cbc <__fp_szero>
    3f3e:	14 ce       	rjmp	.-984    	; 0x3b68 <__fp_mintl>
    3f40:	2e ce       	rjmp	.-932    	; 0x3b9e <__fp_mpack>

00003f42 <__fp_norm2>:
    3f42:	91 50       	subi	r25, 0x01	; 1
    3f44:	50 40       	sbci	r21, 0x00	; 0
    3f46:	66 0f       	add	r22, r22
    3f48:	77 1f       	adc	r23, r23
    3f4a:	88 1f       	adc	r24, r24
    3f4c:	d2 f7       	brpl	.-12     	; 0x3f42 <__fp_norm2>
    3f4e:	08 95       	ret

00003f50 <__mulsi3>:
    3f50:	62 9f       	mul	r22, r18
    3f52:	d0 01       	movw	r26, r0
    3f54:	73 9f       	mul	r23, r19
    3f56:	f0 01       	movw	r30, r0
    3f58:	82 9f       	mul	r24, r18
    3f5a:	e0 0d       	add	r30, r0
    3f5c:	f1 1d       	adc	r31, r1
    3f5e:	64 9f       	mul	r22, r20
    3f60:	e0 0d       	add	r30, r0
    3f62:	f1 1d       	adc	r31, r1
    3f64:	92 9f       	mul	r25, r18
    3f66:	f0 0d       	add	r31, r0
    3f68:	83 9f       	mul	r24, r19
    3f6a:	f0 0d       	add	r31, r0
    3f6c:	74 9f       	mul	r23, r20
    3f6e:	f0 0d       	add	r31, r0
    3f70:	65 9f       	mul	r22, r21
    3f72:	f0 0d       	add	r31, r0
    3f74:	99 27       	eor	r25, r25
    3f76:	72 9f       	mul	r23, r18
    3f78:	b0 0d       	add	r27, r0
    3f7a:	e1 1d       	adc	r30, r1
    3f7c:	f9 1f       	adc	r31, r25
    3f7e:	63 9f       	mul	r22, r19
    3f80:	b0 0d       	add	r27, r0
    3f82:	e1 1d       	adc	r30, r1
    3f84:	f9 1f       	adc	r31, r25
    3f86:	bd 01       	movw	r22, r26
    3f88:	cf 01       	movw	r24, r30
    3f8a:	11 24       	eor	r1, r1
    3f8c:	08 95       	ret

00003f8e <__divmodhi4>:
    3f8e:	97 fb       	bst	r25, 7
    3f90:	09 2e       	mov	r0, r25
    3f92:	07 26       	eor	r0, r23
    3f94:	0a d0       	rcall	.+20     	; 0x3faa <__divmodhi4_neg1>
    3f96:	77 fd       	sbrc	r23, 7
    3f98:	04 d0       	rcall	.+8      	; 0x3fa2 <__divmodhi4_neg2>
    3f9a:	49 d0       	rcall	.+146    	; 0x402e <__udivmodhi4>
    3f9c:	06 d0       	rcall	.+12     	; 0x3faa <__divmodhi4_neg1>
    3f9e:	00 20       	and	r0, r0
    3fa0:	1a f4       	brpl	.+6      	; 0x3fa8 <__divmodhi4_exit>

00003fa2 <__divmodhi4_neg2>:
    3fa2:	70 95       	com	r23
    3fa4:	61 95       	neg	r22
    3fa6:	7f 4f       	sbci	r23, 0xFF	; 255

00003fa8 <__divmodhi4_exit>:
    3fa8:	08 95       	ret

00003faa <__divmodhi4_neg1>:
    3faa:	f6 f7       	brtc	.-4      	; 0x3fa8 <__divmodhi4_exit>
    3fac:	90 95       	com	r25
    3fae:	81 95       	neg	r24
    3fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb2:	08 95       	ret

00003fb4 <__udivmodsi4>:
    3fb4:	a1 e2       	ldi	r26, 0x21	; 33
    3fb6:	1a 2e       	mov	r1, r26
    3fb8:	aa 1b       	sub	r26, r26
    3fba:	bb 1b       	sub	r27, r27
    3fbc:	fd 01       	movw	r30, r26
    3fbe:	0d c0       	rjmp	.+26     	; 0x3fda <__udivmodsi4_ep>

00003fc0 <__udivmodsi4_loop>:
    3fc0:	aa 1f       	adc	r26, r26
    3fc2:	bb 1f       	adc	r27, r27
    3fc4:	ee 1f       	adc	r30, r30
    3fc6:	ff 1f       	adc	r31, r31
    3fc8:	a2 17       	cp	r26, r18
    3fca:	b3 07       	cpc	r27, r19
    3fcc:	e4 07       	cpc	r30, r20
    3fce:	f5 07       	cpc	r31, r21
    3fd0:	20 f0       	brcs	.+8      	; 0x3fda <__udivmodsi4_ep>
    3fd2:	a2 1b       	sub	r26, r18
    3fd4:	b3 0b       	sbc	r27, r19
    3fd6:	e4 0b       	sbc	r30, r20
    3fd8:	f5 0b       	sbc	r31, r21

00003fda <__udivmodsi4_ep>:
    3fda:	66 1f       	adc	r22, r22
    3fdc:	77 1f       	adc	r23, r23
    3fde:	88 1f       	adc	r24, r24
    3fe0:	99 1f       	adc	r25, r25
    3fe2:	1a 94       	dec	r1
    3fe4:	69 f7       	brne	.-38     	; 0x3fc0 <__udivmodsi4_loop>
    3fe6:	60 95       	com	r22
    3fe8:	70 95       	com	r23
    3fea:	80 95       	com	r24
    3fec:	90 95       	com	r25
    3fee:	9b 01       	movw	r18, r22
    3ff0:	ac 01       	movw	r20, r24
    3ff2:	bd 01       	movw	r22, r26
    3ff4:	cf 01       	movw	r24, r30
    3ff6:	08 95       	ret

00003ff8 <__divmodsi4>:
    3ff8:	97 fb       	bst	r25, 7
    3ffa:	09 2e       	mov	r0, r25
    3ffc:	05 26       	eor	r0, r21
    3ffe:	0e d0       	rcall	.+28     	; 0x401c <__divmodsi4_neg1>
    4000:	57 fd       	sbrc	r21, 7
    4002:	04 d0       	rcall	.+8      	; 0x400c <__divmodsi4_neg2>
    4004:	d7 df       	rcall	.-82     	; 0x3fb4 <__udivmodsi4>
    4006:	0a d0       	rcall	.+20     	; 0x401c <__divmodsi4_neg1>
    4008:	00 1c       	adc	r0, r0
    400a:	38 f4       	brcc	.+14     	; 0x401a <__divmodsi4_exit>

0000400c <__divmodsi4_neg2>:
    400c:	50 95       	com	r21
    400e:	40 95       	com	r20
    4010:	30 95       	com	r19
    4012:	21 95       	neg	r18
    4014:	3f 4f       	sbci	r19, 0xFF	; 255
    4016:	4f 4f       	sbci	r20, 0xFF	; 255
    4018:	5f 4f       	sbci	r21, 0xFF	; 255

0000401a <__divmodsi4_exit>:
    401a:	08 95       	ret

0000401c <__divmodsi4_neg1>:
    401c:	f6 f7       	brtc	.-4      	; 0x401a <__divmodsi4_exit>
    401e:	90 95       	com	r25
    4020:	80 95       	com	r24
    4022:	70 95       	com	r23
    4024:	61 95       	neg	r22
    4026:	7f 4f       	sbci	r23, 0xFF	; 255
    4028:	8f 4f       	sbci	r24, 0xFF	; 255
    402a:	9f 4f       	sbci	r25, 0xFF	; 255
    402c:	08 95       	ret

0000402e <__udivmodhi4>:
    402e:	aa 1b       	sub	r26, r26
    4030:	bb 1b       	sub	r27, r27
    4032:	51 e1       	ldi	r21, 0x11	; 17
    4034:	07 c0       	rjmp	.+14     	; 0x4044 <__udivmodhi4_ep>

00004036 <__udivmodhi4_loop>:
    4036:	aa 1f       	adc	r26, r26
    4038:	bb 1f       	adc	r27, r27
    403a:	a6 17       	cp	r26, r22
    403c:	b7 07       	cpc	r27, r23
    403e:	10 f0       	brcs	.+4      	; 0x4044 <__udivmodhi4_ep>
    4040:	a6 1b       	sub	r26, r22
    4042:	b7 0b       	sbc	r27, r23

00004044 <__udivmodhi4_ep>:
    4044:	88 1f       	adc	r24, r24
    4046:	99 1f       	adc	r25, r25
    4048:	5a 95       	dec	r21
    404a:	a9 f7       	brne	.-22     	; 0x4036 <__udivmodhi4_loop>
    404c:	80 95       	com	r24
    404e:	90 95       	com	r25
    4050:	bc 01       	movw	r22, r24
    4052:	cd 01       	movw	r24, r26
    4054:	08 95       	ret

00004056 <strtod>:
    4056:	8f 92       	push	r8
    4058:	9f 92       	push	r9
    405a:	af 92       	push	r10
    405c:	bf 92       	push	r11
    405e:	cf 92       	push	r12
    4060:	df 92       	push	r13
    4062:	ef 92       	push	r14
    4064:	ff 92       	push	r15
    4066:	0f 93       	push	r16
    4068:	1f 93       	push	r17
    406a:	cf 93       	push	r28
    406c:	df 93       	push	r29
    406e:	ec 01       	movw	r28, r24
    4070:	5b 01       	movw	r10, r22
    4072:	61 15       	cp	r22, r1
    4074:	71 05       	cpc	r23, r1
    4076:	19 f0       	breq	.+6      	; 0x407e <strtod+0x28>
    4078:	fb 01       	movw	r30, r22
    407a:	91 83       	std	Z+1, r25	; 0x01
    407c:	80 83       	st	Z, r24
    407e:	f9 90       	ld	r15, Y+
    4080:	8f 2d       	mov	r24, r15
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	0e 94 99 21 	call	0x4332	; 0x4332 <isspace>
    4088:	89 2b       	or	r24, r25
    408a:	c9 f7       	brne	.-14     	; 0x407e <strtod+0x28>
    408c:	fd e2       	ldi	r31, 0x2D	; 45
    408e:	ff 16       	cp	r15, r31
    4090:	21 f4       	brne	.+8      	; 0x409a <strtod+0x44>
    4092:	f9 90       	ld	r15, Y+
    4094:	ee 24       	eor	r14, r14
    4096:	e3 94       	inc	r14
    4098:	05 c0       	rjmp	.+10     	; 0x40a4 <strtod+0x4e>
    409a:	2b e2       	ldi	r18, 0x2B	; 43
    409c:	f2 16       	cp	r15, r18
    409e:	09 f4       	brne	.+2      	; 0x40a2 <strtod+0x4c>
    40a0:	f9 90       	ld	r15, Y+
    40a2:	ee 24       	eor	r14, r14
    40a4:	8e 01       	movw	r16, r28
    40a6:	01 50       	subi	r16, 0x01	; 1
    40a8:	10 40       	sbci	r17, 0x00	; 0
    40aa:	c8 01       	movw	r24, r16
    40ac:	6f e4       	ldi	r22, 0x4F	; 79
    40ae:	75 e0       	ldi	r23, 0x05	; 5
    40b0:	43 e0       	ldi	r20, 0x03	; 3
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	0e 94 a1 21 	call	0x4342	; 0x4342 <strncasecmp_P>
    40b8:	89 2b       	or	r24, r25
    40ba:	01 f5       	brne	.+64     	; 0x40fc <strtod+0xa6>
    40bc:	8e 01       	movw	r16, r28
    40be:	0e 5f       	subi	r16, 0xFE	; 254
    40c0:	1f 4f       	sbci	r17, 0xFF	; 255
    40c2:	c8 01       	movw	r24, r16
    40c4:	62 e5       	ldi	r22, 0x52	; 82
    40c6:	75 e0       	ldi	r23, 0x05	; 5
    40c8:	45 e0       	ldi	r20, 0x05	; 5
    40ca:	50 e0       	ldi	r21, 0x00	; 0
    40cc:	0e 94 a1 21 	call	0x4342	; 0x4342 <strncasecmp_P>
    40d0:	89 2b       	or	r24, r25
    40d2:	19 f4       	brne	.+6      	; 0x40da <strtod+0x84>
    40d4:	8e 01       	movw	r16, r28
    40d6:	09 5f       	subi	r16, 0xF9	; 249
    40d8:	1f 4f       	sbci	r17, 0xFF	; 255
    40da:	a1 14       	cp	r10, r1
    40dc:	b1 04       	cpc	r11, r1
    40de:	19 f0       	breq	.+6      	; 0x40e6 <strtod+0x90>
    40e0:	f5 01       	movw	r30, r10
    40e2:	11 83       	std	Z+1, r17	; 0x01
    40e4:	00 83       	st	Z, r16
    40e6:	e0 fc       	sbrc	r14, 0
    40e8:	04 c0       	rjmp	.+8      	; 0x40f2 <strtod+0x9c>
    40ea:	70 e0       	ldi	r23, 0x00	; 0
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	80 e8       	ldi	r24, 0x80	; 128
    40f0:	14 c0       	rjmp	.+40     	; 0x411a <strtod+0xc4>
    40f2:	70 e0       	ldi	r23, 0x00	; 0
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	80 e8       	ldi	r24, 0x80	; 128
    40f8:	6f ef       	ldi	r22, 0xFF	; 255
    40fa:	08 c1       	rjmp	.+528    	; 0x430c <strtod+0x2b6>
    40fc:	c8 01       	movw	r24, r16
    40fe:	67 e5       	ldi	r22, 0x57	; 87
    4100:	75 e0       	ldi	r23, 0x05	; 5
    4102:	43 e0       	ldi	r20, 0x03	; 3
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	0e 94 a1 21 	call	0x4342	; 0x4342 <strncasecmp_P>
    410a:	89 2b       	or	r24, r25
    410c:	69 f4       	brne	.+26     	; 0x4128 <strtod+0xd2>
    410e:	a1 14       	cp	r10, r1
    4110:	b1 04       	cpc	r11, r1
    4112:	29 f4       	brne	.+10     	; 0x411e <strtod+0xc8>
    4114:	70 e0       	ldi	r23, 0x00	; 0
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	80 ec       	ldi	r24, 0xC0	; 192
    411a:	6f e7       	ldi	r22, 0x7F	; 127
    411c:	f7 c0       	rjmp	.+494    	; 0x430c <strtod+0x2b6>
    411e:	22 96       	adiw	r28, 0x02	; 2
    4120:	f5 01       	movw	r30, r10
    4122:	d1 83       	std	Z+1, r29	; 0x01
    4124:	c0 83       	st	Z, r28
    4126:	f6 cf       	rjmp	.-20     	; 0x4114 <strtod+0xbe>
    4128:	88 24       	eor	r8, r8
    412a:	99 24       	eor	r9, r9
    412c:	40 e0       	ldi	r20, 0x00	; 0
    412e:	50 e0       	ldi	r21, 0x00	; 0
    4130:	60 e0       	ldi	r22, 0x00	; 0
    4132:	70 e0       	ldi	r23, 0x00	; 0
    4134:	ef 2d       	mov	r30, r15
    4136:	e0 53       	subi	r30, 0x30	; 48
    4138:	ea 30       	cpi	r30, 0x0A	; 10
    413a:	a0 f5       	brcc	.+104    	; 0x41a4 <strtod+0x14e>
    413c:	f2 e0       	ldi	r31, 0x02	; 2
    413e:	ef 2a       	or	r14, r31
    4140:	8e 2d       	mov	r24, r14
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	9c 01       	movw	r18, r24
    4146:	28 70       	andi	r18, 0x08	; 8
    4148:	30 70       	andi	r19, 0x00	; 0
    414a:	e2 fe       	sbrs	r14, 2
    414c:	06 c0       	rjmp	.+12     	; 0x415a <strtod+0x104>
    414e:	23 2b       	or	r18, r19
    4150:	79 f5       	brne	.+94     	; 0x41b0 <strtod+0x15a>
    4152:	08 94       	sec
    4154:	81 1c       	adc	r8, r1
    4156:	91 1c       	adc	r9, r1
    4158:	2b c0       	rjmp	.+86     	; 0x41b0 <strtod+0x15a>
    415a:	23 2b       	or	r18, r19
    415c:	19 f0       	breq	.+6      	; 0x4164 <strtod+0x10e>
    415e:	08 94       	sec
    4160:	81 08       	sbc	r8, r1
    4162:	91 08       	sbc	r9, r1
    4164:	db 01       	movw	r26, r22
    4166:	ca 01       	movw	r24, r20
    4168:	12 e0       	ldi	r17, 0x02	; 2
    416a:	88 0f       	add	r24, r24
    416c:	99 1f       	adc	r25, r25
    416e:	aa 1f       	adc	r26, r26
    4170:	bb 1f       	adc	r27, r27
    4172:	1a 95       	dec	r17
    4174:	d1 f7       	brne	.-12     	; 0x416a <strtod+0x114>
    4176:	48 0f       	add	r20, r24
    4178:	59 1f       	adc	r21, r25
    417a:	6a 1f       	adc	r22, r26
    417c:	7b 1f       	adc	r23, r27
    417e:	44 0f       	add	r20, r20
    4180:	55 1f       	adc	r21, r21
    4182:	66 1f       	adc	r22, r22
    4184:	77 1f       	adc	r23, r23
    4186:	4e 0f       	add	r20, r30
    4188:	51 1d       	adc	r21, r1
    418a:	61 1d       	adc	r22, r1
    418c:	71 1d       	adc	r23, r1
    418e:	48 39       	cpi	r20, 0x98	; 152
    4190:	29 e9       	ldi	r18, 0x99	; 153
    4192:	52 07       	cpc	r21, r18
    4194:	29 e9       	ldi	r18, 0x99	; 153
    4196:	62 07       	cpc	r22, r18
    4198:	29 e1       	ldi	r18, 0x19	; 25
    419a:	72 07       	cpc	r23, r18
    419c:	48 f0       	brcs	.+18     	; 0x41b0 <strtod+0x15a>
    419e:	84 e0       	ldi	r24, 0x04	; 4
    41a0:	e8 2a       	or	r14, r24
    41a2:	06 c0       	rjmp	.+12     	; 0x41b0 <strtod+0x15a>
    41a4:	ee 3f       	cpi	r30, 0xFE	; 254
    41a6:	31 f4       	brne	.+12     	; 0x41b4 <strtod+0x15e>
    41a8:	e3 fc       	sbrc	r14, 3
    41aa:	39 c0       	rjmp	.+114    	; 0x421e <strtod+0x1c8>
    41ac:	98 e0       	ldi	r25, 0x08	; 8
    41ae:	e9 2a       	or	r14, r25
    41b0:	f9 90       	ld	r15, Y+
    41b2:	c0 cf       	rjmp	.-128    	; 0x4134 <strtod+0xde>
    41b4:	e5 33       	cpi	r30, 0x35	; 53
    41b6:	11 f0       	breq	.+4      	; 0x41bc <strtod+0x166>
    41b8:	e5 31       	cpi	r30, 0x15	; 21
    41ba:	89 f5       	brne	.+98     	; 0x421e <strtod+0x1c8>
    41bc:	29 91       	ld	r18, Y+
    41be:	2d 32       	cpi	r18, 0x2D	; 45
    41c0:	19 f4       	brne	.+6      	; 0x41c8 <strtod+0x172>
    41c2:	e0 e1       	ldi	r30, 0x10	; 16
    41c4:	ee 2a       	or	r14, r30
    41c6:	05 c0       	rjmp	.+10     	; 0x41d2 <strtod+0x17c>
    41c8:	2b 32       	cpi	r18, 0x2B	; 43
    41ca:	19 f0       	breq	.+6      	; 0x41d2 <strtod+0x17c>
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	03 c0       	rjmp	.+6      	; 0x41d8 <strtod+0x182>
    41d2:	29 91       	ld	r18, Y+
    41d4:	82 e0       	ldi	r24, 0x02	; 2
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	e2 2f       	mov	r30, r18
    41da:	e0 53       	subi	r30, 0x30	; 48
    41dc:	ea 30       	cpi	r30, 0x0A	; 10
    41de:	18 f0       	brcs	.+6      	; 0x41e6 <strtod+0x190>
    41e0:	c8 1b       	sub	r28, r24
    41e2:	d9 0b       	sbc	r29, r25
    41e4:	1c c0       	rjmp	.+56     	; 0x421e <strtod+0x1c8>
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	fc e0       	ldi	r31, 0x0C	; 12
    41ec:	20 38       	cpi	r18, 0x80	; 128
    41ee:	3f 07       	cpc	r19, r31
    41f0:	5c f4       	brge	.+22     	; 0x4208 <strtod+0x1b2>
    41f2:	c9 01       	movw	r24, r18
    41f4:	88 0f       	add	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	88 0f       	add	r24, r24
    41fa:	99 1f       	adc	r25, r25
    41fc:	28 0f       	add	r18, r24
    41fe:	39 1f       	adc	r19, r25
    4200:	22 0f       	add	r18, r18
    4202:	33 1f       	adc	r19, r19
    4204:	2e 0f       	add	r18, r30
    4206:	31 1d       	adc	r19, r1
    4208:	e9 91       	ld	r30, Y+
    420a:	e0 53       	subi	r30, 0x30	; 48
    420c:	ea 30       	cpi	r30, 0x0A	; 10
    420e:	68 f3       	brcs	.-38     	; 0x41ea <strtod+0x194>
    4210:	e4 fe       	sbrs	r14, 4
    4212:	03 c0       	rjmp	.+6      	; 0x421a <strtod+0x1c4>
    4214:	30 95       	com	r19
    4216:	21 95       	neg	r18
    4218:	3f 4f       	sbci	r19, 0xFF	; 255
    421a:	82 0e       	add	r8, r18
    421c:	93 1e       	adc	r9, r19
    421e:	ce 2c       	mov	r12, r14
    4220:	dd 24       	eor	r13, r13
    4222:	e1 fe       	sbrs	r14, 1
    4224:	07 c0       	rjmp	.+14     	; 0x4234 <strtod+0x1de>
    4226:	a1 14       	cp	r10, r1
    4228:	b1 04       	cpc	r11, r1
    422a:	21 f0       	breq	.+8      	; 0x4234 <strtod+0x1de>
    422c:	21 97       	sbiw	r28, 0x01	; 1
    422e:	f5 01       	movw	r30, r10
    4230:	d1 83       	std	Z+1, r29	; 0x01
    4232:	c0 83       	st	Z, r28
    4234:	cb 01       	movw	r24, r22
    4236:	ba 01       	movw	r22, r20
    4238:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__floatunsisf>
    423c:	7b 01       	movw	r14, r22
    423e:	8c 01       	movw	r16, r24
    4240:	f3 e0       	ldi	r31, 0x03	; 3
    4242:	cf 22       	and	r12, r31
    4244:	dd 24       	eor	r13, r13
    4246:	23 e0       	ldi	r18, 0x03	; 3
    4248:	c2 16       	cp	r12, r18
    424a:	d1 04       	cpc	r13, r1
    424c:	21 f4       	brne	.+8      	; 0x4256 <strtod+0x200>
    424e:	17 fb       	bst	r17, 7
    4250:	10 95       	com	r17
    4252:	17 f9       	bld	r17, 7
    4254:	10 95       	com	r17
    4256:	57 01       	movw	r10, r14
    4258:	68 01       	movw	r12, r16
    425a:	c8 01       	movw	r24, r16
    425c:	b7 01       	movw	r22, r14
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e0       	ldi	r20, 0x00	; 0
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	0e 94 9d 1c 	call	0x393a	; 0x393a <__cmpsf2>
    426a:	88 23       	and	r24, r24
    426c:	09 f4       	brne	.+2      	; 0x4270 <strtod+0x21a>
    426e:	4a c0       	rjmp	.+148    	; 0x4304 <strtod+0x2ae>
    4270:	97 fe       	sbrs	r9, 7
    4272:	0d c0       	rjmp	.+26     	; 0x428e <strtod+0x238>
    4274:	2e e6       	ldi	r18, 0x6E	; 110
    4276:	e2 2e       	mov	r14, r18
    4278:	25 e0       	ldi	r18, 0x05	; 5
    427a:	f2 2e       	mov	r15, r18
    427c:	90 94       	com	r9
    427e:	81 94       	neg	r8
    4280:	91 08       	sbc	r9, r1
    4282:	93 94       	inc	r9
    4284:	c0 e2       	ldi	r28, 0x20	; 32
    4286:	d0 e0       	ldi	r29, 0x00	; 0
    4288:	00 e0       	ldi	r16, 0x00	; 0
    428a:	10 e0       	ldi	r17, 0x00	; 0
    428c:	12 c0       	rjmp	.+36     	; 0x42b2 <strtod+0x25c>
    428e:	96 e8       	ldi	r25, 0x86	; 134
    4290:	e9 2e       	mov	r14, r25
    4292:	95 e0       	ldi	r25, 0x05	; 5
    4294:	f9 2e       	mov	r15, r25
    4296:	f6 cf       	rjmp	.-20     	; 0x4284 <strtod+0x22e>
    4298:	f7 01       	movw	r30, r14
    429a:	25 91       	lpm	r18, Z+
    429c:	35 91       	lpm	r19, Z+
    429e:	45 91       	lpm	r20, Z+
    42a0:	54 91       	lpm	r21, Z+
    42a2:	c6 01       	movw	r24, r12
    42a4:	b5 01       	movw	r22, r10
    42a6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
    42aa:	5b 01       	movw	r10, r22
    42ac:	6c 01       	movw	r12, r24
    42ae:	8c 1a       	sub	r8, r28
    42b0:	9d 0a       	sbc	r9, r29
    42b2:	8c 16       	cp	r8, r28
    42b4:	9d 06       	cpc	r9, r29
    42b6:	84 f7       	brge	.-32     	; 0x4298 <strtod+0x242>
    42b8:	d5 95       	asr	r29
    42ba:	c7 95       	ror	r28
    42bc:	0f 5f       	subi	r16, 0xFF	; 255
    42be:	1f 4f       	sbci	r17, 0xFF	; 255
    42c0:	06 30       	cpi	r16, 0x06	; 6
    42c2:	11 05       	cpc	r17, r1
    42c4:	29 f0       	breq	.+10     	; 0x42d0 <strtod+0x27a>
    42c6:	8c ef       	ldi	r24, 0xFC	; 252
    42c8:	9f ef       	ldi	r25, 0xFF	; 255
    42ca:	e8 0e       	add	r14, r24
    42cc:	f9 1e       	adc	r15, r25
    42ce:	f1 cf       	rjmp	.-30     	; 0x42b2 <strtod+0x25c>
    42d0:	c5 01       	movw	r24, r10
    42d2:	d6 01       	movw	r26, r12
    42d4:	7c 01       	movw	r14, r24
    42d6:	8d 01       	movw	r16, r26
    42d8:	8c 2d       	mov	r24, r12
    42da:	88 0f       	add	r24, r24
    42dc:	8d 2d       	mov	r24, r13
    42de:	88 1f       	adc	r24, r24
    42e0:	8f 3f       	cpi	r24, 0xFF	; 255
    42e2:	51 f0       	breq	.+20     	; 0x42f8 <strtod+0x2a2>
    42e4:	c6 01       	movw	r24, r12
    42e6:	b5 01       	movw	r22, r10
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	40 e0       	ldi	r20, 0x00	; 0
    42ee:	50 e0       	ldi	r21, 0x00	; 0
    42f0:	0e 94 9d 1c 	call	0x393a	; 0x393a <__cmpsf2>
    42f4:	88 23       	and	r24, r24
    42f6:	31 f4       	brne	.+12     	; 0x4304 <strtod+0x2ae>
    42f8:	82 e2       	ldi	r24, 0x22	; 34
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	90 93 2f 05 	sts	0x052F, r25
    4300:	80 93 2e 05 	sts	0x052E, r24
    4304:	7e 2d       	mov	r23, r14
    4306:	9f 2d       	mov	r25, r15
    4308:	80 2f       	mov	r24, r16
    430a:	61 2f       	mov	r22, r17
    430c:	27 2f       	mov	r18, r23
    430e:	39 2f       	mov	r19, r25
    4310:	48 2f       	mov	r20, r24
    4312:	56 2f       	mov	r21, r22
    4314:	b9 01       	movw	r22, r18
    4316:	ca 01       	movw	r24, r20
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	1f 91       	pop	r17
    431e:	0f 91       	pop	r16
    4320:	ff 90       	pop	r15
    4322:	ef 90       	pop	r14
    4324:	df 90       	pop	r13
    4326:	cf 90       	pop	r12
    4328:	bf 90       	pop	r11
    432a:	af 90       	pop	r10
    432c:	9f 90       	pop	r9
    432e:	8f 90       	pop	r8
    4330:	08 95       	ret

00004332 <isspace>:
    4332:	91 11       	cpse	r25, r1
    4334:	1e c0       	rjmp	.+60     	; 0x4372 <__ctype_isfalse>
    4336:	80 32       	cpi	r24, 0x20	; 32
    4338:	19 f0       	breq	.+6      	; 0x4340 <isspace+0xe>
    433a:	89 50       	subi	r24, 0x09	; 9
    433c:	85 50       	subi	r24, 0x05	; 5
    433e:	d0 f7       	brcc	.-12     	; 0x4334 <isspace+0x2>
    4340:	08 95       	ret

00004342 <strncasecmp_P>:
    4342:	fb 01       	movw	r30, r22
    4344:	dc 01       	movw	r26, r24
    4346:	41 50       	subi	r20, 0x01	; 1
    4348:	50 40       	sbci	r21, 0x00	; 0
    434a:	88 f0       	brcs	.+34     	; 0x436e <strncasecmp_P+0x2c>
    434c:	8d 91       	ld	r24, X+
    434e:	81 34       	cpi	r24, 0x41	; 65
    4350:	1c f0       	brlt	.+6      	; 0x4358 <strncasecmp_P+0x16>
    4352:	8b 35       	cpi	r24, 0x5B	; 91
    4354:	0c f4       	brge	.+2      	; 0x4358 <strncasecmp_P+0x16>
    4356:	80 5e       	subi	r24, 0xE0	; 224
    4358:	65 91       	lpm	r22, Z+
    435a:	61 34       	cpi	r22, 0x41	; 65
    435c:	1c f0       	brlt	.+6      	; 0x4364 <strncasecmp_P+0x22>
    435e:	6b 35       	cpi	r22, 0x5B	; 91
    4360:	0c f4       	brge	.+2      	; 0x4364 <strncasecmp_P+0x22>
    4362:	60 5e       	subi	r22, 0xE0	; 224
    4364:	86 1b       	sub	r24, r22
    4366:	61 11       	cpse	r22, r1
    4368:	71 f3       	breq	.-36     	; 0x4346 <strncasecmp_P+0x4>
    436a:	99 0b       	sbc	r25, r25
    436c:	08 95       	ret
    436e:	88 1b       	sub	r24, r24
    4370:	fc cf       	rjmp	.-8      	; 0x436a <strncasecmp_P+0x28>

00004372 <__ctype_isfalse>:
    4372:	99 27       	eor	r25, r25
    4374:	88 27       	eor	r24, r24

00004376 <__ctype_istrue>:
    4376:	08 95       	ret

00004378 <_exit>:
    4378:	f8 94       	cli

0000437a <__stop_program>:
    437a:	ff cf       	rjmp	.-2      	; 0x437a <__stop_program>
