
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000049e  00800200  00800200  00004dc0  2**0
                  ALLOC
  2 .debug_aranges 000004e0  00000000  00000000  00004dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000911  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003f92  00000000  00000000  00005bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000015a0  00000000  00000000  00009b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003725  00000000  00000000  0000b0e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000007c0  00000000  00000000  0000e808  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e5c  00000000  00000000  0000efc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001ed8  00000000  00000000  0000fe24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008b0  00000000  00000000  00011cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__ctors_end>
       4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
       8:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
       c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      10:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      14:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      18:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      1c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      20:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      24:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      28:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      2c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      30:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      34:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      38:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      3c:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__vector_15>
      40:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      44:	0c 94 36 18 	jmp	0x306c	; 0x306c <__vector_17>
      48:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      4c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      50:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      54:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      58:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      5c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      60:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      64:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__vector_25>
      68:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      6c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      70:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      74:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      78:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      7c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      80:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__vector_32>
      84:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      88:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      8c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      90:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      94:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      98:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      9c:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      a0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      a4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      a8:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      ac:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      b0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      b4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      b8:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      bc:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      c0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      c4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      c8:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      cc:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      d0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      d4:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      d8:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      dc:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      e0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__bad_interrupt>
      e4:	2c 07       	cpc	r18, r28
      e6:	2c 07       	cpc	r18, r28
      e8:	2f 07       	cpc	r18, r31
      ea:	32 07       	cpc	r19, r18
      ec:	39 07       	cpc	r19, r25
      ee:	3e 07       	cpc	r19, r30
      f0:	a1 07       	cpc	r26, r17
      f2:	a1 07       	cpc	r26, r17
      f4:	43 07       	cpc	r20, r19
      f6:	4a 07       	cpc	r20, r26
      f8:	4f 07       	cpc	r20, r31
      fa:	54 07       	cpc	r21, r20
      fc:	59 07       	cpc	r21, r25
      fe:	5c 07       	cpc	r21, r28
     100:	5f 07       	cpc	r21, r31
     102:	62 07       	cpc	r22, r18
     104:	65 07       	cpc	r22, r21
     106:	68 07       	cpc	r22, r24
     108:	6b 07       	cpc	r22, r27
     10a:	70 07       	cpc	r23, r16
     10c:	75 07       	cpc	r23, r21
     10e:	7a 07       	cpc	r23, r26
     110:	7d 07       	cpc	r23, r29
     112:	82 07       	cpc	r24, r18
     114:	87 07       	cpc	r24, r23
     116:	8e 07       	cpc	r24, r30
     118:	93 07       	cpc	r25, r19
     11a:	9a 07       	cpc	r25, r26
     11c:	a1 07       	cpc	r26, r17
     11e:	a1 07       	cpc	r26, r17
     120:	2f 07       	cpc	r18, r31
     122:	a1 07       	cpc	r26, r17
     124:	a1 07       	cpc	r26, r17
     126:	a1 07       	cpc	r26, r17
     128:	a1 07       	cpc	r26, r17
     12a:	a1 07       	cpc	r26, r17
     12c:	a1 07       	cpc	r26, r17
     12e:	a1 07       	cpc	r26, r17
     130:	a1 07       	cpc	r26, r17
     132:	a1 07       	cpc	r26, r17
     134:	a1 07       	cpc	r26, r17
     136:	a1 07       	cpc	r26, r17
     138:	a1 07       	cpc	r26, r17
     13a:	a1 07       	cpc	r26, r17
     13c:	a1 07       	cpc	r26, r17
     13e:	a1 07       	cpc	r26, r17
     140:	a1 07       	cpc	r26, r17
     142:	a1 07       	cpc	r26, r17
     144:	a1 07       	cpc	r26, r17
     146:	a1 07       	cpc	r26, r17
     148:	a1 07       	cpc	r26, r17
     14a:	a1 07       	cpc	r26, r17
     14c:	a1 07       	cpc	r26, r17
     14e:	a1 07       	cpc	r26, r17
     150:	a1 07       	cpc	r26, r17
     152:	a1 07       	cpc	r26, r17
     154:	a1 07       	cpc	r26, r17
     156:	a1 07       	cpc	r26, r17
     158:	a1 07       	cpc	r26, r17
     15a:	a1 07       	cpc	r26, r17
     15c:	2f 07       	cpc	r18, r31
     15e:	08 4a       	sbci	r16, 0xA8	; 168
     160:	d7 3b       	cpi	r29, 0xB7	; 183
     162:	3b ce       	rjmp	.-906    	; 0xfffffdda <__eeprom_end+0xff7efdda>
     164:	01 6e       	ori	r16, 0xE1	; 225
     166:	84 bc       	out	0x24, r8	; 36
     168:	bf fd       	.word	0xfdbf	; ????
     16a:	c1 2f       	mov	r28, r17
     16c:	3d 6c       	ori	r19, 0xCD	; 205
     16e:	74 31       	cpi	r23, 0x14	; 20
     170:	9a bd       	out	0x2a, r25	; 42
     172:	56 83       	std	Z+6, r21	; 0x06
     174:	3d da       	rcall	.-2950   	; 0xfffff5f0 <__eeprom_end+0xff7ef5f0>
     176:	3d 00       	.word	0x003d	; ????
     178:	c7 7f       	andi	r28, 0xF7	; 247
     17a:	11 be       	out	0x31, r1	; 49
     17c:	d9 e4       	ldi	r29, 0x49	; 73
     17e:	bb 4c       	sbci	r27, 0xCB	; 203
     180:	3e 91       	ld	r19, -X
     182:	6b aa       	std	Y+51, r6	; 0x33
     184:	aa be       	out	0x3a, r10	; 58
     186:	00 00       	nop
     188:	00 80       	ld	r0, Z
     18a:	3f 59       	subi	r19, 0x9F	; 159

0000018b <__c.1932>:
     18b:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000194 <__c.1930>:
     194:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000019d <__c.1928>:
     19d:	59 4c 32 0d 0a 00                                   YL2...

000001a3 <__c.1926>:
     1a3:	59 4c 31 0d 0a 00                                   YL1...

000001a9 <__c.1924>:
     1a9:	58 4c 32 0d 0a 00                                   XL2...

000001af <__c.1922>:
     1af:	58 4c 31 0d 0a 00                                   XL1...

000001b5 <__c.1920>:
     1b5:	0d 0a 00                                            ...

000001b8 <__c.1918>:
     1b8:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

000001c4 <__c.1916>:
     1c4:	0d 0a 00                                            ...

000001c7 <__c.1914>:
     1c7:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

000001d2 <__c.1912>:
     1d2:	0d 0a 00                                            ...

000001d5 <__c.1910>:
     1d5:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000001e5 <__c.1908>:
     1e5:	0d 0a 00                                            ...

000001e8 <__c.1906>:
     1e8:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000001f7 <__c.1904>:
     1f7:	0d 0a 00                                            ...

000001fa <__c.1902>:
     1fa:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

00000207 <__c.1900>:
     207:	0d 0a 00                                            ...

0000020a <__c.1898>:
     20a:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

00000219 <__c.1896>:
     219:	0d 0a 00                                            ...

0000021c <__c.1894>:
     21c:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

00000226 <__c.1892>:
     226:	0d 0a 00                                            ...

00000229 <__c.1890>:
     229:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     239:	3d 20 00                                            = .

0000023c <__c.1888>:
     23c:	0d 0a 00                                            ...

0000023f <__c.1886>:
     23f:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     24f:	20 00                                                .

00000251 <__c.1633>:
     251:	6f 6b 0a 0d 00                                      ok...

00000256 <__c.1678>:
     256:	0a 0d 00                                            ...

00000259 <__c.1676>:
     259:	65 72 72 6f 72 3a 20 00                             error: .

00000261 <__c.1673>:
     261:	65 72 72 6f 72 3a 20 4e 6f 74 20 68 6f 6d 65 64     error: Not homed
     271:	0a 0d 00                                            ...

00000274 <__c.1670>:
     274:	65 72 72 6f 72 3a 20 43 6f 6d 6d 61 6e 64 20 46     error: Command F
     284:	61 69 6c 65 64 0a 0d 00                             ailed...

0000028c <__c.1667>:
     28c:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     29c:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

000002aa <__c.1664>:
     2aa:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     2ba:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

000002c9 <__c.1661>:
     2c9:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     2d9:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

000002ea <__c.1658>:
     2ea:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     2fa:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

00000305 <__c.1654>:
     305:	6f 6b 0a 0d 00                                      ok...

0000030a <__c.1730>:
     30a:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     31a:	6e 67 0d 0a 00                                      ng...

0000031f <__c.1728>:
     31f:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     32f:	72 0d 0a 00                                         r...

00000333 <__c.1685>:
     333:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     343:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     353:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     363:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     373:	0d 0a 00                                            ...

00000376 <__c.1683>:
     376:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     386:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     396:	61 62 6c 65 64 29 0d 0a 00                          abled)...

0000039f <__c.1681>:
     39f:	24 31 30 30 30 20 3d 20 00                          $1000 = .

000003a8 <__c.1679>:
     3a8:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     3b8:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     3c8:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     3d8:	2f 6d 69 6e 29 0d 0a 00                             /min)...

000003e0 <__c.1677>:
     3e0:	24 39 20 3d 20 00                                   $9 = .

000003e6 <__c.1675>:
     3e6:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     3f6:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

00000404 <__c.1673>:
     404:	24 38 20 3d 20 00                                   $8 = .

0000040a <__c.1671>:
     40a:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     41a:	29 0d 0a 00                                         )...

0000041e <__c.1669>:
     41e:	24 37 20 3d 20 00                                   $7 = .

00000424 <__c.1667>:
     424:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     434:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000442 <__c.1665>:
     442:	24 36 20 3d 20 00                                   $6 = .

00000448 <__c.1663>:
     448:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     458:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000466 <__c.1661>:
     466:	24 35 20 3d 20 00                                   $5 = .

0000046c <__c.1659>:
     46c:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     47c:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

00000489 <__c.1657>:
     489:	24 34 20 3d 20 00                                   $4 = .

0000048f <__c.1655>:
     48f:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     49f:	0a 00                                               ..

000004a1 <__c.1653>:
     4a1:	24 33 20 3d 20 00                                   $3 = .

000004a7 <__c.1651>:
     4a7:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

000004b7 <__c.1649>:
     4b7:	24 32 20 3d 20 00                                   $2 = .

000004bd <__c.1647>:
     4bd:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

000004cd <__c.1645>:
     4cd:	24 31 20 3d 20 00                                   $1 = .

000004d3 <__c.1643>:
     4d3:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000004e3 <__c.1641>:
     4e3:	24 30 20 3d 20 00                                   $0 = .

000004e9 <__c.1639>:
     4e9:	0d 0a 00                                            ...

000004ec <__c.1637>:
     4ec:	30 2e 37 36 50 42 00                                0.76PB.

000004f3 <__c.1635>:
     4f3:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000004ff <__c.2182>:
     4ff:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

0000050d <__c.2042>:
     50d:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

00000517 <__c.2060>:
     517:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

00000521 <__c.1824>:
     521:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     531:	0d 00                                               ..

00000533 <__c.1859>:
     533:	6e 6f 0d 0a 00                                      no...

00000538 <__c.1857>:
     538:	79 65 73 0d 0a 00                                   yes...

0000053e <pstr_inf>:
     53e:	49 4e 46                                            INF

00000541 <pstr_inity>:
     541:	49 4e 49 54 59                                      INITY

00000546 <pstr_nan>:
     546:	4e 41 4e                                            NAN

00000549 <pwr_m10>:
     549:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     559:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000561 <pwr_p10>:
     561:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     571:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000057a <__ctors_end>:
     57a:	11 24       	eor	r1, r1
     57c:	1f be       	out	0x3f, r1	; 63
     57e:	cf ef       	ldi	r28, 0xFF	; 255
     580:	d1 e2       	ldi	r29, 0x21	; 33
     582:	de bf       	out	0x3e, r29	; 62
     584:	cd bf       	out	0x3d, r28	; 61
     586:	00 e0       	ldi	r16, 0x00	; 0
     588:	0c bf       	out	0x3c, r16	; 60

0000058a <__do_copy_data>:
     58a:	12 e0       	ldi	r17, 0x02	; 2
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b2 e0       	ldi	r27, 0x02	; 2
     590:	ec e4       	ldi	r30, 0x4C	; 76
     592:	fd e4       	ldi	r31, 0x4D	; 77
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	0b bf       	out	0x3b, r16	; 59
     598:	02 c0       	rjmp	.+4      	; 0x59e <__do_copy_data+0x14>
     59a:	07 90       	elpm	r0, Z+
     59c:	0d 92       	st	X+, r0
     59e:	a0 30       	cpi	r26, 0x00	; 0
     5a0:	b1 07       	cpc	r27, r17
     5a2:	d9 f7       	brne	.-10     	; 0x59a <__do_copy_data+0x10>

000005a4 <__do_clear_bss>:
     5a4:	16 e0       	ldi	r17, 0x06	; 6
     5a6:	a0 e0       	ldi	r26, 0x00	; 0
     5a8:	b2 e0       	ldi	r27, 0x02	; 2
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <.do_clear_bss_start>

000005ac <.do_clear_bss_loop>:
     5ac:	1d 92       	st	X+, r1

000005ae <.do_clear_bss_start>:
     5ae:	ae 39       	cpi	r26, 0x9E	; 158
     5b0:	b1 07       	cpc	r27, r17
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <.do_clear_bss_loop>
     5b4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <main>
     5b8:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <_exit>

000005bc <__bad_interrupt>:
     5bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005c0 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     5c0:	24 9a       	sbi	0x04, 4	; 4
}
     5c2:	08 95       	ret

000005c4 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     5c4:	89 2b       	or	r24, r25
     5c6:	11 f0       	breq	.+4      	; 0x5cc <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     5c8:	2c 9a       	sbi	0x05, 4	; 5
     5ca:	08 95       	ret
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     5cc:	2c 98       	cbi	0x05, 4	; 5
     5ce:	08 95       	ret

000005d0 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5d0:	f9 99       	sbic	0x1f, 1	; 31
     5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     5d4:	92 bd       	out	0x22, r25	; 34
     5d6:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     5dc:	80 b5       	in	r24, 0x20	; 32
}
     5de:	08 95       	ret

000005e0 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     5e0:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5e2:	f9 99       	sbic	0x1f, 1	; 31
     5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     5e6:	92 bd       	out	0x22, r25	; 34
     5e8:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     5ee:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     5f0:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     5f2:	89 2f       	mov	r24, r25
     5f4:	86 23       	and	r24, r22
     5f6:	39 f0       	breq	.+14     	; 0x606 <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     5f8:	6f 3f       	cpi	r22, 0xFF	; 255
     5fa:	19 f0       	breq	.+6      	; 0x602 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     5fc:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5fe:	84 e0       	ldi	r24, 0x04	; 4
     600:	06 c0       	rjmp	.+12     	; 0x60e <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     602:	84 e1       	ldi	r24, 0x14	; 20
     604:	04 c0       	rjmp	.+8      	; 0x60e <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     606:	99 23       	and	r25, r25
     608:	21 f0       	breq	.+8      	; 0x612 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     60a:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     60c:	84 e2       	ldi	r24, 0x24	; 36
     60e:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     610:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     612:	78 94       	sei
}
     614:	08 95       	ret

00000616 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	0f 92       	push	r0
     62e:	0f 92       	push	r0
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	5c 01       	movw	r10, r24
     636:	6b 01       	movw	r12, r22
     638:	7a 01       	movw	r14, r20
     63a:	4a 01       	movw	r8, r20
     63c:	00 e0       	ldi	r16, 0x00	; 0
     63e:	1e c0       	rjmp	.+60     	; 0x67c <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     640:	00 23       	and	r16, r16
     642:	19 f0       	breq	.+6      	; 0x64a <memcpy_to_eeprom_with_checksum+0x34>
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	08 c0       	rjmp	.+16     	; 0x65a <memcpy_to_eeprom_with_checksum+0x44>
     64a:	20 2f       	mov	r18, r16
     64c:	33 27       	eor	r19, r19
     64e:	27 fd       	sbrc	r18, 7
     650:	30 95       	com	r19
     652:	22 27       	eor	r18, r18
     654:	33 0f       	add	r19, r19
     656:	22 1f       	adc	r18, r18
     658:	33 27       	eor	r19, r19
    checksum += *source;
     65a:	f6 01       	movw	r30, r12
     65c:	61 91       	ld	r22, Z+
     65e:	6f 01       	movw	r12, r30
     660:	06 2f       	mov	r16, r22
     662:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     664:	9c 01       	movw	r18, r24
     666:	2f 5f       	subi	r18, 0xFF	; 255
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	3a 83       	std	Y+2, r19	; 0x02
     66c:	29 83       	std	Y+1, r18	; 0x01
     66e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     672:	08 94       	sec
     674:	81 08       	sbc	r8, r1
     676:	91 08       	sbc	r9, r1
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	9a 81       	ldd	r25, Y+2	; 0x02
     67c:	81 14       	cp	r8, r1
     67e:	91 04       	cpc	r9, r1
     680:	f9 f6       	brne	.-66     	; 0x640 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     682:	c7 01       	movw	r24, r14
     684:	8a 0d       	add	r24, r10
     686:	9b 1d       	adc	r25, r11
     688:	60 2f       	mov	r22, r16
     68a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <eeprom_put_char>
}
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	cf 91       	pop	r28
     694:	df 91       	pop	r29
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	bf 90       	pop	r11
     6a2:	af 90       	pop	r10
     6a4:	9f 90       	pop	r9
     6a6:	8f 90       	pop	r8
     6a8:	08 95       	ret

000006aa <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
     6b0:	fb 01       	movw	r30, r22
     6b2:	9a 01       	movw	r18, r20
     6b4:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     6b6:	b1 e0       	ldi	r27, 0x01	; 1
     6b8:	19 c0       	rjmp	.+50     	; 0x6ec <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6ba:	f9 99       	sbic	0x1f, 1	; 31
     6bc:	fe cf       	rjmp	.-4      	; 0x6ba <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     6be:	f2 bd       	out	0x22, r31	; 34
     6c0:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6c2:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     6c4:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     6c6:	99 23       	and	r25, r25
     6c8:	19 f0       	breq	.+6      	; 0x6d0 <memcpy_from_eeprom_with_checksum+0x26>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <memcpy_from_eeprom_with_checksum+0x36>
     6d0:	89 2f       	mov	r24, r25
     6d2:	99 27       	eor	r25, r25
     6d4:	87 fd       	sbrc	r24, 7
     6d6:	90 95       	com	r25
     6d8:	88 27       	eor	r24, r24
     6da:	99 0f       	add	r25, r25
     6dc:	88 1f       	adc	r24, r24
     6de:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     6e0:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     6e2:	9a 2f       	mov	r25, r26
     6e4:	98 0f       	add	r25, r24
    *(destination++) = data; 
     6e6:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     6e8:	21 50       	subi	r18, 0x01	; 1
     6ea:	30 40       	sbci	r19, 0x00	; 0
     6ec:	21 15       	cp	r18, r1
     6ee:	31 05       	cpc	r19, r1
     6f0:	21 f7       	brne	.-56     	; 0x6ba <memcpy_from_eeprom_with_checksum+0x10>
     6f2:	46 0f       	add	r20, r22
     6f4:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6f6:	f9 99       	sbic	0x1f, 1	; 31
     6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     6fa:	52 bd       	out	0x22, r21	; 34
     6fc:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     702:	80 b5       	in	r24, 0x20	; 32
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	98 17       	cp	r25, r24
     70a:	11 f4       	brne	.+4      	; 0x710 <memcpy_from_eeprom_with_checksum+0x66>
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     710:	c9 01       	movw	r24, r18
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     718:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     71c:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     720:	40 93 27 02 	sts	0x0227, r20
}
     724:	08 95       	ret

00000726 <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     726:	2f 92       	push	r2
     728:	3f 92       	push	r3
     72a:	4f 92       	push	r4
     72c:	5f 92       	push	r5
     72e:	6f 92       	push	r6
     730:	7f 92       	push	r7
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	28 97       	sbiw	r28, 0x08	; 8
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	2d 83       	std	Y+5, r18	; 0x05
     764:	3e 83       	std	Y+6, r19	; 0x06
     766:	4f 83       	std	Y+7, r20	; 0x07
     768:	58 87       	std	Y+8, r21	; 0x08
     76a:	37 01       	movw	r6, r14
     76c:	48 01       	movw	r8, r16
     76e:	15 01       	movw	r2, r10
     770:	26 01       	movw	r4, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e8       	ldi	r20, 0x80	; 128
     778:	5f eb       	ldi	r21, 0xBF	; 191
     77a:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
     77e:	88 23       	and	r24, r24
     780:	41 f4       	brne	.+16     	; 0x792 <gotoxy+0x6c>
     782:	60 90 12 02 	lds	r6, 0x0212
     786:	70 90 13 02 	lds	r7, 0x0213
     78a:	80 90 14 02 	lds	r8, 0x0214
     78e:	90 90 15 02 	lds	r9, 0x0215
  if( y == -1) c = gc.position[Y_AXIS] ;
     792:	6d 81       	ldd	r22, Y+5	; 0x05
     794:	7e 81       	ldd	r23, Y+6	; 0x06
     796:	8f 81       	ldd	r24, Y+7	; 0x07
     798:	98 85       	ldd	r25, Y+8	; 0x08
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e8       	ldi	r20, 0x80	; 128
     7a0:	5f eb       	ldi	r21, 0xBF	; 191
     7a2:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
     7a6:	88 23       	and	r24, r24
     7a8:	41 f4       	brne	.+16     	; 0x7ba <gotoxy+0x94>
     7aa:	20 90 16 02 	lds	r2, 0x0216
     7ae:	30 90 17 02 	lds	r3, 0x0217
     7b2:	40 90 18 02 	lds	r4, 0x0218
     7b6:	50 90 19 02 	lds	r5, 0x0219
  if( z == -1) z = gc.position[Z_AXIS] ;
     7ba:	c4 01       	movw	r24, r8
     7bc:	b3 01       	movw	r22, r6
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e8       	ldi	r20, 0x80	; 128
     7c4:	5f eb       	ldi	r21, 0xBF	; 191
     7c6:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
     7ca:	88 23       	and	r24, r24
     7cc:	41 f4       	brne	.+16     	; 0x7de <gotoxy+0xb8>
     7ce:	60 90 1a 02 	lds	r6, 0x021A
     7d2:	70 90 1b 02 	lds	r7, 0x021B
     7d6:	80 90 1c 02 	lds	r8, 0x021C
     7da:	90 90 1d 02 	lds	r9, 0x021D
  if( c == -1) c = gc.position[C_AXIS] ;
     7de:	c2 01       	movw	r24, r4
     7e0:	b1 01       	movw	r22, r2
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e8       	ldi	r20, 0x80	; 128
     7e8:	5f eb       	ldi	r21, 0xBF	; 191
     7ea:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
     7ee:	88 23       	and	r24, r24
     7f0:	41 f4       	brne	.+16     	; 0x802 <gotoxy+0xdc>
     7f2:	20 90 1e 02 	lds	r2, 0x021E
     7f6:	30 90 1f 02 	lds	r3, 0x021F
     7fa:	40 90 20 02 	lds	r4, 0x0220
     7fe:	50 90 21 02 	lds	r5, 0x0221

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     802:	00 d0       	rcall	.+0      	; 0x804 <gotoxy+0xde>
     804:	00 d0       	rcall	.+0      	; 0x806 <gotoxy+0xe0>
     806:	80 91 0e 02 	lds	r24, 0x020E
     80a:	90 91 0f 02 	lds	r25, 0x020F
     80e:	a0 91 10 02 	lds	r26, 0x0210
     812:	b0 91 11 02 	lds	r27, 0x0211
     816:	ed b7       	in	r30, 0x3d	; 61
     818:	fe b7       	in	r31, 0x3e	; 62
     81a:	81 83       	std	Z+1, r24	; 0x01
     81c:	92 83       	std	Z+2, r25	; 0x02
     81e:	a3 83       	std	Z+3, r26	; 0x03
     820:	b4 83       	std	Z+4, r27	; 0x04
     822:	16 82       	std	Z+6, r1	; 0x06
     824:	15 82       	std	Z+5, r1	; 0x05
     826:	69 81       	ldd	r22, Y+1	; 0x01
     828:	7a 81       	ldd	r23, Y+2	; 0x02
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	9c 81       	ldd	r25, Y+4	; 0x04
     82e:	2d 81       	ldd	r18, Y+5	; 0x05
     830:	3e 81       	ldd	r19, Y+6	; 0x06
     832:	4f 81       	ldd	r20, Y+7	; 0x07
     834:	58 85       	ldd	r21, Y+8	; 0x08
     836:	84 01       	movw	r16, r8
     838:	73 01       	movw	r14, r6
     83a:	62 01       	movw	r12, r4
     83c:	51 01       	movw	r10, r2
     83e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	ab 81       	ldd	r26, Y+3	; 0x03
     848:	bc 81       	ldd	r27, Y+4	; 0x04
     84a:	80 93 12 02 	sts	0x0212, r24
     84e:	90 93 13 02 	sts	0x0213, r25
     852:	a0 93 14 02 	sts	0x0214, r26
     856:	b0 93 15 02 	sts	0x0215, r27
   gc.position[Y_AXIS] = y;
     85a:	8d 81       	ldd	r24, Y+5	; 0x05
     85c:	9e 81       	ldd	r25, Y+6	; 0x06
     85e:	af 81       	ldd	r26, Y+7	; 0x07
     860:	b8 85       	ldd	r27, Y+8	; 0x08
     862:	80 93 16 02 	sts	0x0216, r24
     866:	90 93 17 02 	sts	0x0217, r25
     86a:	a0 93 18 02 	sts	0x0218, r26
     86e:	b0 93 19 02 	sts	0x0219, r27
   gc.position[Z_AXIS] = z;
     872:	60 92 1a 02 	sts	0x021A, r6
     876:	70 92 1b 02 	sts	0x021B, r7
     87a:	80 92 1c 02 	sts	0x021C, r8
     87e:	90 92 1d 02 	sts	0x021D, r9
   gc.position[C_AXIS] = c;
     882:	20 92 1e 02 	sts	0x021E, r2
     886:	30 92 1f 02 	sts	0x021F, r3
     88a:	40 92 20 02 	sts	0x0220, r4
     88e:	50 92 21 02 	sts	0x0221, r5
     892:	ad b7       	in	r26, 0x3d	; 61
     894:	be b7       	in	r27, 0x3e	; 62
     896:	16 96       	adiw	r26, 0x06	; 6
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	be bf       	out	0x3e, r27	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	ad bf       	out	0x3d, r26	; 61

}
     8a2:	28 96       	adiw	r28, 0x08	; 8
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	cf 91       	pop	r28
     8b0:	df 91       	pop	r29
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	bf 90       	pop	r11
     8c0:	af 90       	pop	r10
     8c2:	9f 90       	pop	r9
     8c4:	8f 90       	pop	r8
     8c6:	7f 90       	pop	r7
     8c8:	6f 90       	pop	r6
     8ca:	5f 90       	pop	r5
     8cc:	4f 90       	pop	r4
     8ce:	3f 90       	pop	r3
     8d0:	2f 90       	pop	r2
     8d2:	08 95       	ret

000008d4 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	df 93       	push	r29
     8e6:	cf 93       	push	r28
     8e8:	0f 92       	push	r0
     8ea:	0f 92       	push	r0
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	6c 01       	movw	r12, r24
     8f2:	5b 01       	movw	r10, r22
     8f4:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     8f6:	fb 01       	movw	r30, r22
     8f8:	00 81       	ld	r16, Z
     8fa:	11 81       	ldd	r17, Z+1	; 0x01
     8fc:	08 0f       	add	r16, r24
     8fe:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     900:	c8 01       	movw	r24, r16
     902:	be 01       	movw	r22, r28
     904:	6f 5f       	subi	r22, 0xFF	; 255
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	0e 94 13 25 	call	0x4a26	; 0x4a26 <strtod>
     90c:	f7 01       	movw	r30, r14
     90e:	60 83       	st	Z, r22
     910:	71 83       	std	Z+1, r23	; 0x01
     912:	82 83       	std	Z+2, r24	; 0x02
     914:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	80 17       	cp	r24, r16
     91c:	91 07       	cpc	r25, r17
     91e:	31 f4       	brne	.+12     	; 0x92c <read_double+0x58>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 00 02 	sts	0x0200, r24
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	07 c0       	rjmp	.+14     	; 0x93a <read_double+0x66>
    return(0); 
  };

  *char_counter = end - line;
     92c:	8c 19       	sub	r24, r12
     92e:	9d 09       	sbc	r25, r13
     930:	f5 01       	movw	r30, r10
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     93a:	c9 01       	movw	r24, r18
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	08 95       	ret

00000956 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	8b 01       	movw	r16, r22
     962:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     964:	ed 91       	ld	r30, X+
     966:	fc 91       	ld	r31, X
     968:	11 97       	sbiw	r26, 0x01	; 1
     96a:	e4 0f       	add	r30, r20
     96c:	f5 1f       	adc	r31, r21
     96e:	e0 81       	ld	r30, Z
     970:	ee 23       	and	r30, r30
     972:	39 f0       	breq	.+14     	; 0x982 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     974:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     976:	e1 54       	subi	r30, 0x41	; 65
     978:	ea 31       	cpi	r30, 0x1A	; 26
     97a:	30 f0       	brcs	.+12     	; 0x988 <next_statement+0x32>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	80 93 00 02 	sts	0x0200, r24
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	10 c0       	rjmp	.+32     	; 0x9a8 <next_statement+0x52>
    return(0);
  }
  (*char_counter)++;
     988:	8d 91       	ld	r24, X+
     98a:	9c 91       	ld	r25, X
     98c:	11 97       	sbiw	r26, 0x01	; 1
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	8d 93       	st	X+, r24
     992:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     994:	ca 01       	movw	r24, r20
     996:	b9 01       	movw	r22, r18
     998:	a8 01       	movw	r20, r16
     99a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <read_double>
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	11 f0       	breq	.+4      	; 0x9a6 <next_statement+0x50>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     9a8:	c9 01       	movw	r24, r18
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     9b4:	88 e2       	ldi	r24, 0x28	; 40
     9b6:	e0 e0       	ldi	r30, 0x00	; 0
     9b8:	f2 e0       	ldi	r31, 0x02	; 2
     9ba:	df 01       	movw	r26, r30
     9bc:	1d 92       	st	X+, r1
     9be:	8a 95       	dec	r24
     9c0:	e9 f7       	brne	.-6      	; 0x9bc <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     9c2:	60 91 87 06 	lds	r22, 0x0687
     9c6:	70 91 88 06 	lds	r23, 0x0688
     9ca:	80 91 89 06 	lds	r24, 0x0689
     9ce:	90 91 8a 06 	lds	r25, 0x068A
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e7       	ldi	r20, 0x70	; 112
     9d8:	52 e4       	ldi	r21, 0x42	; 66
     9da:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
     9de:	60 93 0a 02 	sts	0x020A, r22
     9e2:	70 93 0b 02 	sts	0x020B, r23
     9e6:	80 93 0c 02 	sts	0x020C, r24
     9ea:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     9ee:	60 91 8b 06 	lds	r22, 0x068B
     9f2:	70 91 8c 06 	lds	r23, 0x068C
     9f6:	80 91 8d 06 	lds	r24, 0x068D
     9fa:	90 91 8e 06 	lds	r25, 0x068E
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e7       	ldi	r20, 0x70	; 112
     a04:	52 e4       	ldi	r21, 0x42	; 66
     a06:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
     a0a:	60 93 0e 02 	sts	0x020E, r22
     a0e:	70 93 0f 02 	sts	0x020F, r23
     a12:	80 93 10 02 	sts	0x0210, r24
     a16:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     a1a:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     a2a:	90 93 04 02 	sts	0x0204, r25
}
     a2e:	08 95       	ret

00000a30 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     a30:	2f 92       	push	r2
     a32:	3f 92       	push	r3
     a34:	4f 92       	push	r4
     a36:	5f 92       	push	r5
     a38:	6f 92       	push	r6
     a3a:	7f 92       	push	r7
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	e2 97       	sbiw	r28, 0x32	; 50
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     a66:	1b 82       	std	Y+3, r1	; 0x03
     a68:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	88 87       	std	Y+8, r24	; 0x08
     a74:	99 87       	std	Y+9, r25	; 0x09
     a76:	aa 87       	std	Y+10, r26	; 0x0a
     a78:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     a7a:	80 e1       	ldi	r24, 0x10	; 16
     a7c:	fe 01       	movw	r30, r28
     a7e:	3c 96       	adiw	r30, 0x0c	; 12
     a80:	df 01       	movw	r26, r30
     a82:	98 2f       	mov	r25, r24
     a84:	1d 92       	st	X+, r1
     a86:	9a 95       	dec	r25
     a88:	e9 f7       	brne	.-6      	; 0xa84 <gc_execute_line+0x54>
  clear_vector(offset);
     a8a:	fe 01       	movw	r30, r28
     a8c:	7c 96       	adiw	r30, 0x1c	; 28
     a8e:	df 01       	movw	r26, r30
     a90:	1d 92       	st	X+, r1
     a92:	8a 95       	dec	r24
     a94:	e9 f7       	brne	.-6      	; 0xa90 <gc_execute_line+0x60>

  gc.status_code = GCSTATUS_OK;
     a96:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     a9a:	f5 01       	movw	r30, r10
     a9c:	80 81       	ld	r24, Z
     a9e:	88 32       	cpi	r24, 0x28	; 40
     aa0:	41 f1       	breq	.+80     	; 0xaf2 <gc_execute_line+0xc2>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     aa2:	8f 32       	cpi	r24, 0x2F	; 47
     aa4:	29 f4       	brne	.+10     	; 0xab0 <gc_execute_line+0x80>
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	9b 81       	ldd	r25, Y+3	; 0x03
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	9b 83       	std	Y+3, r25	; 0x03
     aae:	8a 83       	std	Y+2, r24	; 0x02
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     ab0:	d5 01       	movw	r26, r10
     ab2:	8c 91       	ld	r24, X
     ab4:	84 32       	cpi	r24, 0x24	; 36
     ab6:	99 f0       	breq	.+38     	; 0xade <gc_execute_line+0xae>
     ab8:	55 24       	eor	r5, r5
     aba:	1c a6       	std	Y+44, r1	; 0x2c
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     abc:	12 e0       	ldi	r17, 0x02	; 2
     abe:	21 2e       	mov	r2, r17
     ac0:	31 2c       	mov	r3, r1
     ac2:	2c 0e       	add	r2, r28
     ac4:	3d 1e       	adc	r3, r29
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     ac6:	b3 e0       	ldi	r27, 0x03	; 3
     ac8:	9b 2e       	mov	r9, r27
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     aca:	dd 24       	eor	r13, r13
     acc:	d3 94       	inc	r13
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     ace:	a2 e0       	ldi	r26, 0x02	; 2
     ad0:	ca 2e       	mov	r12, r26
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     ad2:	f4 e0       	ldi	r31, 0x04	; 4
     ad4:	8f 2e       	mov	r8, r31
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     ad6:	66 24       	eor	r6, r6
     ad8:	6a 94       	dec	r6
     ada:	76 2c       	mov	r7, r6
     adc:	3f c2       	rjmp	.+1150   	; 0xf5c <gc_execute_line+0x52c>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	9b 83       	std	Y+3, r25	; 0x03
     ae4:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     ae6:	f5 01       	movw	r30, r10
     ae8:	81 81       	ldd	r24, Z+1	; 0x01
     aea:	88 23       	and	r24, r24
     aec:	21 f4       	brne	.+8      	; 0xaf6 <gc_execute_line+0xc6>
     aee:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <settings_dump>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	2a c4       	rjmp	.+2132   	; 0x134a <gc_execute_line+0x91a>
    read_double(line, &char_counter, &p);
     af6:	8e 01       	movw	r16, r28
     af8:	0e 5f       	subi	r16, 0xFE	; 254
     afa:	1f 4f       	sbci	r17, 0xFF	; 255
     afc:	c5 01       	movw	r24, r10
     afe:	b8 01       	movw	r22, r16
     b00:	ae 01       	movw	r20, r28
     b02:	48 5f       	subi	r20, 0xF8	; 248
     b04:	5f 4f       	sbci	r21, 0xFF	; 255
     b06:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	9b 81       	ldd	r25, Y+3	; 0x03
     b0e:	f5 01       	movw	r30, r10
     b10:	e8 0f       	add	r30, r24
     b12:	f9 1f       	adc	r31, r25
     b14:	20 81       	ld	r18, Z
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	9b 83       	std	Y+3, r25	; 0x03
     b1a:	8a 83       	std	Y+2, r24	; 0x02
     b1c:	2d 33       	cpi	r18, 0x3D	; 61
     b1e:	09 f0       	breq	.+2      	; 0xb22 <gc_execute_line+0xf2>
     b20:	13 c4       	rjmp	.+2086   	; 0x1348 <gc_execute_line+0x918>
    read_double(line, &char_counter, &value);
     b22:	c5 01       	movw	r24, r10
     b24:	b8 01       	movw	r22, r16
     b26:	ae 01       	movw	r20, r28
     b28:	4c 5f       	subi	r20, 0xFC	; 252
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     b30:	ea 81       	ldd	r30, Y+2	; 0x02
     b32:	fb 81       	ldd	r31, Y+3	; 0x03
     b34:	ea 0d       	add	r30, r10
     b36:	fb 1d       	adc	r31, r11
     b38:	80 81       	ld	r24, Z
     b3a:	88 23       	and	r24, r24
     b3c:	09 f0       	breq	.+2      	; 0xb40 <gc_execute_line+0x110>
     b3e:	04 c4       	rjmp	.+2056   	; 0x1348 <gc_execute_line+0x918>
    settings_store_setting(p, value);
     b40:	68 85       	ldd	r22, Y+8	; 0x08
     b42:	79 85       	ldd	r23, Y+9	; 0x09
     b44:	8a 85       	ldd	r24, Y+10	; 0x0a
     b46:	9b 85       	ldd	r25, Y+11	; 0x0b
     b48:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	4c 81       	ldd	r20, Y+4	; 0x04
     b52:	5d 81       	ldd	r21, Y+5	; 0x05
     b54:	6e 81       	ldd	r22, Y+6	; 0x06
     b56:	7f 81       	ldd	r23, Y+7	; 0x07
     b58:	0e 94 58 14 	call	0x28b0	; 0x28b0 <settings_store_setting>
     b5c:	f2 c3       	rjmp	.+2020   	; 0x1342 <gc_execute_line+0x912>
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     b5e:	6c 81       	ldd	r22, Y+4	; 0x04
     b60:	7d 81       	ldd	r23, Y+5	; 0x05
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	0e 94 82 24 	call	0x4904	; 0x4904 <trunc>
     b6a:	7b 01       	movw	r14, r22
     b6c:	8c 01       	movw	r16, r24
     b6e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
     b72:	fb 01       	movw	r30, r22

    switch(letter) {
     b74:	29 81       	ldd	r18, Y+1	; 0x01
     b76:	27 34       	cpi	r18, 0x47	; 71
     b78:	09 f4       	brne	.+2      	; 0xb7c <gc_execute_line+0x14c>
     b7a:	c5 c0       	rjmp	.+394    	; 0xd06 <gc_execute_line+0x2d6>
     b7c:	28 34       	cpi	r18, 0x48	; 72
     b7e:	20 f4       	brcc	.+8      	; 0xb88 <gc_execute_line+0x158>
     b80:	24 34       	cpi	r18, 0x44	; 68
     b82:	09 f0       	breq	.+2      	; 0xb86 <gc_execute_line+0x156>
     b84:	e7 c1       	rjmp	.+974    	; 0xf54 <gc_execute_line+0x524>
     b86:	07 c0       	rjmp	.+14     	; 0xb96 <gc_execute_line+0x166>
     b88:	2d 34       	cpi	r18, 0x4D	; 77
     b8a:	09 f4       	brne	.+2      	; 0xb8e <gc_execute_line+0x15e>
     b8c:	59 c1       	rjmp	.+690    	; 0xe40 <gc_execute_line+0x410>
     b8e:	24 35       	cpi	r18, 0x54	; 84
     b90:	09 f0       	breq	.+2      	; 0xb94 <gc_execute_line+0x164>
     b92:	e0 c1       	rjmp	.+960    	; 0xf54 <gc_execute_line+0x524>
     b94:	d9 c1       	rjmp	.+946    	; 0xf48 <gc_execute_line+0x518>
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     b96:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     b98:	8f e3       	ldi	r24, 0x3F	; 63
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
		  	printBinary( DIRECTION_DDR );
     ba0:	60 b3       	in	r22, 0x10	; 16
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     bac:	8c e3       	ldi	r24, 0x3C	; 60
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     bb4:	89 e2       	ldi	r24, 0x29	; 41
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
		  	printBinary( DIRECTION_PORT );
     bbc:	61 b3       	in	r22, 0x11	; 17
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     bc8:	86 e2       	ldi	r24, 0x26	; 38
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

			ch = PORTD;
     bd0:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     bd2:	8c e1       	ldi	r24, 0x1C	; 28
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
		  	printBinary( ch );
     bda:	ff 24       	eor	r15, r15
     bdc:	00 e0       	ldi	r16, 0x00	; 0
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	c8 01       	movw	r24, r16
     be2:	b7 01       	movw	r22, r14
     be4:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     be8:	89 e1       	ldi	r24, 0x19	; 25
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

			ch = PIND;
     bf0:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     bf2:	8a e0       	ldi	r24, 0x0A	; 10
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
		  	printBinary( ch );
     bfa:	ff 24       	eor	r15, r15
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	10 e0       	ldi	r17, 0x00	; 0
     c00:	c8 01       	movw	r24, r16
     c02:	b7 01       	movw	r22, r14
     c04:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     c10:	8a ef       	ldi	r24, 0xFA	; 250
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			printInteger( is_head_down() );
     c18:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c2a:	87 ef       	ldi	r24, 0xF7	; 247
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     c32:	88 ee       	ldi	r24, 0xE8	; 232
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			printInteger( head_moving() );
     c3a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <head_moving>
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	a0 e0       	ldi	r26, 0x00	; 0
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	bc 01       	movw	r22, r24
     c46:	cd 01       	movw	r24, r26
     c48:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c4c:	85 ee       	ldi	r24, 0xE5	; 229
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     c54:	85 ed       	ldi	r24, 0xD5	; 213
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			printInteger( vacuum_state() );
     c5c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <vacuum_state>
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a0 e0       	ldi	r26, 0x00	; 0
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c6e:	82 ed       	ldi	r24, 0xD2	; 210
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     c76:	87 ec       	ldi	r24, 0xC7	; 199
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			printInteger( is_rotated() );
     c7e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <is_rotated>
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c90:	84 ec       	ldi	r24, 0xC4	; 196
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
     c98:	88 eb       	ldi	r24, 0xB8	; 184
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			printInteger( get_busy() );
     ca0:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <get_busy>
     ca4:	aa 27       	eor	r26, r26
     ca6:	97 fd       	sbrc	r25, 7
     ca8:	a0 95       	com	r26
     caa:	ba 2f       	mov	r27, r26
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     cb4:	85 eb       	ldi	r24, 0xB5	; 181
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     cbc:	4b 9b       	sbis	0x09, 3	; 9
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <gc_execute_line+0x298>
		      	printPgmString(PSTR("XL1\r\n"));
     cc0:	8f ea       	ldi	r24, 0xAF	; 175
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     cc8:	4a 9b       	sbis	0x09, 2	; 9
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <gc_execute_line+0x2a4>
		      	printPgmString(PSTR("XL2\r\n"));
     ccc:	89 ea       	ldi	r24, 0xA9	; 169
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     cd4:	48 9b       	sbis	0x09, 0	; 9
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <gc_execute_line+0x2b0>
		      	printPgmString(PSTR("YL1\r\n"));
     cd8:	83 ea       	ldi	r24, 0xA3	; 163
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     ce0:	49 9b       	sbis	0x09, 1	; 9
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <gc_execute_line+0x2bc>
		      	printPgmString(PSTR("YL2\r\n"));
     ce4:	8d e9       	ldi	r24, 0x9D	; 157
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

			if( bit_is_set( XHM_PIN, X_HOME ) )
     cec:	04 9b       	sbis	0x00, 4	; 0
     cee:	04 c0       	rjmp	.+8      	; 0xcf8 <gc_execute_line+0x2c8>
		      	printPgmString(PSTR("X_HOME\r\n"));
     cf0:	84 e9       	ldi	r24, 0x94	; 148
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     cf8:	90 9b       	sbis	0x12, 0	; 18
     cfa:	23 c3       	rjmp	.+1606   	; 0x1342 <gc_execute_line+0x912>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     cfc:	8b e8       	ldi	r24, 0x8B	; 139
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
     d04:	1e c3       	rjmp	.+1596   	; 0x1342 <gc_execute_line+0x912>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     d06:	65 31       	cpi	r22, 0x15	; 21
     d08:	71 05       	cpc	r23, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <gc_execute_line+0x2de>
     d0c:	82 c0       	rjmp	.+260    	; 0xe12 <gc_execute_line+0x3e2>
     d0e:	66 31       	cpi	r22, 0x16	; 22
     d10:	71 05       	cpc	r23, r1
     d12:	84 f5       	brge	.+96     	; 0xd74 <gc_execute_line+0x344>
     d14:	64 30       	cpi	r22, 0x04	; 4
     d16:	71 05       	cpc	r23, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <gc_execute_line+0x2ec>
     d1a:	10 c1       	rjmp	.+544    	; 0xf3c <gc_execute_line+0x50c>
     d1c:	65 30       	cpi	r22, 0x05	; 5
     d1e:	71 05       	cpc	r23, r1
     d20:	a4 f4       	brge	.+40     	; 0xd4a <gc_execute_line+0x31a>
     d22:	61 30       	cpi	r22, 0x01	; 1
     d24:	71 05       	cpc	r23, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <gc_execute_line+0x2fa>
     d28:	53 c0       	rjmp	.+166    	; 0xdd0 <gc_execute_line+0x3a0>
     d2a:	62 30       	cpi	r22, 0x02	; 2
     d2c:	71 05       	cpc	r23, r1
     d2e:	24 f4       	brge	.+8      	; 0xd38 <gc_execute_line+0x308>
     d30:	67 2b       	or	r22, r23
     d32:	09 f4       	brne	.+2      	; 0xd36 <gc_execute_line+0x306>
     d34:	4a c0       	rjmp	.+148    	; 0xdca <gc_execute_line+0x39a>
     d36:	05 c1       	rjmp	.+522    	; 0xf42 <gc_execute_line+0x512>
     d38:	62 30       	cpi	r22, 0x02	; 2
     d3a:	71 05       	cpc	r23, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <gc_execute_line+0x310>
     d3e:	4b c0       	rjmp	.+150    	; 0xdd6 <gc_execute_line+0x3a6>
     d40:	63 30       	cpi	r22, 0x03	; 3
     d42:	71 05       	cpc	r23, r1
     d44:	09 f0       	breq	.+2      	; 0xd48 <gc_execute_line+0x318>
     d46:	fd c0       	rjmp	.+506    	; 0xf42 <gc_execute_line+0x512>
     d48:	49 c0       	rjmp	.+146    	; 0xddc <gc_execute_line+0x3ac>
     d4a:	62 31       	cpi	r22, 0x12	; 18
     d4c:	71 05       	cpc	r23, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <gc_execute_line+0x322>
     d50:	4f c0       	rjmp	.+158    	; 0xdf0 <gc_execute_line+0x3c0>
     d52:	63 31       	cpi	r22, 0x13	; 19
     d54:	71 05       	cpc	r23, r1
     d56:	2c f4       	brge	.+10     	; 0xd62 <gc_execute_line+0x332>
     d58:	61 31       	cpi	r22, 0x11	; 17
     d5a:	71 05       	cpc	r23, r1
     d5c:	09 f0       	breq	.+2      	; 0xd60 <gc_execute_line+0x330>
     d5e:	f1 c0       	rjmp	.+482    	; 0xf42 <gc_execute_line+0x512>
     d60:	40 c0       	rjmp	.+128    	; 0xde2 <gc_execute_line+0x3b2>
     d62:	63 31       	cpi	r22, 0x13	; 19
     d64:	71 05       	cpc	r23, r1
     d66:	09 f4       	brne	.+2      	; 0xd6a <gc_execute_line+0x33a>
     d68:	4a c0       	rjmp	.+148    	; 0xdfe <gc_execute_line+0x3ce>
     d6a:	64 31       	cpi	r22, 0x14	; 20
     d6c:	71 05       	cpc	r23, r1
     d6e:	09 f0       	breq	.+2      	; 0xd72 <gc_execute_line+0x342>
     d70:	e8 c0       	rjmp	.+464    	; 0xf42 <gc_execute_line+0x512>
     d72:	4c c0       	rjmp	.+152    	; 0xe0c <gc_execute_line+0x3dc>
     d74:	6a 35       	cpi	r22, 0x5A	; 90
     d76:	71 05       	cpc	r23, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <gc_execute_line+0x34c>
     d7a:	54 c0       	rjmp	.+168    	; 0xe24 <gc_execute_line+0x3f4>
     d7c:	6b 35       	cpi	r22, 0x5B	; 91
     d7e:	71 05       	cpc	r23, r1
     d80:	9c f4       	brge	.+38     	; 0xda8 <gc_execute_line+0x378>
     d82:	6e 31       	cpi	r22, 0x1E	; 30
     d84:	71 05       	cpc	r23, r1
     d86:	f9 f0       	breq	.+62     	; 0xdc6 <gc_execute_line+0x396>
     d88:	6f 31       	cpi	r22, 0x1F	; 31
     d8a:	71 05       	cpc	r23, r1
     d8c:	2c f4       	brge	.+10     	; 0xd98 <gc_execute_line+0x368>
     d8e:	6c 31       	cpi	r22, 0x1C	; 28
     d90:	71 05       	cpc	r23, r1
     d92:	09 f0       	breq	.+2      	; 0xd96 <gc_execute_line+0x366>
     d94:	d6 c0       	rjmp	.+428    	; 0xf42 <gc_execute_line+0x512>
     d96:	17 c0       	rjmp	.+46     	; 0xdc6 <gc_execute_line+0x396>
     d98:	65 33       	cpi	r22, 0x35	; 53
     d9a:	71 05       	cpc	r23, r1
     d9c:	e9 f1       	breq	.+122    	; 0xe18 <gc_execute_line+0x3e8>
     d9e:	60 35       	cpi	r22, 0x50	; 80
     da0:	71 05       	cpc	r23, r1
     da2:	09 f0       	breq	.+2      	; 0xda6 <gc_execute_line+0x376>
     da4:	ce c0       	rjmp	.+412    	; 0xf42 <gc_execute_line+0x512>
     da6:	3b c0       	rjmp	.+118    	; 0xe1e <gc_execute_line+0x3ee>
     da8:	6c 35       	cpi	r22, 0x5C	; 92
     daa:	71 05       	cpc	r23, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <gc_execute_line+0x380>
     dae:	40 c0       	rjmp	.+128    	; 0xe30 <gc_execute_line+0x400>
     db0:	6c 35       	cpi	r22, 0x5C	; 92
     db2:	71 05       	cpc	r23, r1
     db4:	d4 f1       	brlt	.+116    	; 0xe2a <gc_execute_line+0x3fa>
     db6:	6d 35       	cpi	r22, 0x5D	; 93
     db8:	71 05       	cpc	r23, r1
     dba:	e1 f1       	breq	.+120    	; 0xe34 <gc_execute_line+0x404>
     dbc:	6e 35       	cpi	r22, 0x5E	; 94
     dbe:	71 05       	cpc	r23, r1
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <gc_execute_line+0x394>
     dc2:	bf c0       	rjmp	.+382    	; 0xf42 <gc_execute_line+0x512>
     dc4:	3a c0       	rjmp	.+116    	; 0xe3a <gc_execute_line+0x40a>
     dc6:	f2 e0       	ldi	r31, 0x02	; 2
     dc8:	b3 c0       	rjmp	.+358    	; 0xf30 <gc_execute_line+0x500>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     dca:	10 92 01 02 	sts	0x0201, r1
     dce:	c2 c0       	rjmp	.+388    	; 0xf54 <gc_execute_line+0x524>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     dd0:	d0 92 01 02 	sts	0x0201, r13
     dd4:	bf c0       	rjmp	.+382    	; 0xf54 <gc_execute_line+0x524>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     dd6:	c0 92 01 02 	sts	0x0201, r12
     dda:	bc c0       	rjmp	.+376    	; 0xf54 <gc_execute_line+0x524>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     ddc:	90 92 01 02 	sts	0x0201, r9
     de0:	b9 c0       	rjmp	.+370    	; 0xf54 <gc_execute_line+0x524>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     de2:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     de6:	d0 92 26 02 	sts	0x0226, r13
  gc.plane_axis_2 = axis_2;
     dea:	c0 92 27 02 	sts	0x0227, r12
     dee:	b2 c0       	rjmp	.+356    	; 0xf54 <gc_execute_line+0x524>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     df0:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     df4:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     df8:	d0 92 27 02 	sts	0x0227, r13
     dfc:	ab c0       	rjmp	.+342    	; 0xf54 <gc_execute_line+0x524>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     dfe:	d0 92 25 02 	sts	0x0225, r13
  gc.plane_axis_1 = axis_1;
     e02:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     e06:	10 92 27 02 	sts	0x0227, r1
     e0a:	a4 c0       	rjmp	.+328    	; 0xf54 <gc_execute_line+0x524>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     e0c:	d0 92 03 02 	sts	0x0203, r13
     e10:	a1 c0       	rjmp	.+322    	; 0xf54 <gc_execute_line+0x524>
        case 21: gc.inches_mode = FALSE; break;
     e12:	10 92 03 02 	sts	0x0203, r1
     e16:	9e c0       	rjmp	.+316    	; 0xf54 <gc_execute_line+0x524>
     e18:	55 24       	eor	r5, r5
     e1a:	53 94       	inc	r5
     e1c:	9b c0       	rjmp	.+310    	; 0xf54 <gc_execute_line+0x524>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     e1e:	80 92 01 02 	sts	0x0201, r8
     e22:	98 c0       	rjmp	.+304    	; 0xf54 <gc_execute_line+0x524>
        case 90: gc.absolute_mode = TRUE; break;
     e24:	d0 92 04 02 	sts	0x0204, r13
     e28:	95 c0       	rjmp	.+298    	; 0xf54 <gc_execute_line+0x524>
        case 91: gc.absolute_mode = FALSE; break;
     e2a:	10 92 04 02 	sts	0x0204, r1
     e2e:	92 c0       	rjmp	.+292    	; 0xf54 <gc_execute_line+0x524>
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	66 c0       	rjmp	.+204    	; 0xf00 <gc_execute_line+0x4d0>
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     e34:	d0 92 02 02 	sts	0x0202, r13
     e38:	8d c0       	rjmp	.+282    	; 0xf54 <gc_execute_line+0x524>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     e3a:	10 92 02 02 	sts	0x0202, r1
     e3e:	8a c0       	rjmp	.+276    	; 0xf54 <gc_execute_line+0x524>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e40:	6d 33       	cpi	r22, 0x3D	; 61
     e42:	71 05       	cpc	r23, r1
     e44:	08 f0       	brcs	.+2      	; 0xe48 <gc_execute_line+0x418>
     e46:	7d c0       	rjmp	.+250    	; 0xf42 <gc_execute_line+0x512>
     e48:	ee 58       	subi	r30, 0x8E	; 142
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	05 90       	lpm	r0, Z+
     e52:	f4 91       	lpm	r31, Z+
     e54:	e0 2d       	mov	r30, r0
     e56:	19 94       	eijmp
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     e58:	d0 92 05 02 	sts	0x0205, r13
     e5c:	7b c0       	rjmp	.+246    	; 0xf54 <gc_execute_line+0x524>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     e5e:	c0 92 05 02 	sts	0x0205, r12
     e62:	78 c0       	rjmp	.+240    	; 0xf54 <gc_execute_line+0x524>
        case 3: gc.spindle_direction = 1; break;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	90 93 07 02 	sts	0x0207, r25
     e6c:	80 93 06 02 	sts	0x0206, r24
     e70:	71 c0       	rjmp	.+226    	; 0xf54 <gc_execute_line+0x524>
        case 4: gc.spindle_direction = -1; break;
     e72:	70 92 07 02 	sts	0x0207, r7
     e76:	60 92 06 02 	sts	0x0206, r6
     e7a:	6c c0       	rjmp	.+216    	; 0xf54 <gc_execute_line+0x524>
        case 5: gc.spindle_direction = 0; break;
     e7c:	10 92 07 02 	sts	0x0207, r1
     e80:	10 92 06 02 	sts	0x0206, r1
     e84:	67 c0       	rjmp	.+206    	; 0xf54 <gc_execute_line+0x524>
        case 8: gc.coolant_flood = 1; break;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 09 02 	sts	0x0209, r25
     e8e:	80 93 08 02 	sts	0x0208, r24
     e92:	60 c0       	rjmp	.+192    	; 0xf54 <gc_execute_line+0x524>
        case 9: gc.coolant_flood = 0; break;
     e94:	10 92 09 02 	sts	0x0209, r1
     e98:	10 92 08 02 	sts	0x0208, r1
     e9c:	5b c0       	rjmp	.+182    	; 0xf54 <gc_execute_line+0x524>

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
     ea6:	30 c0       	rjmp	.+96     	; 0xf08 <gc_execute_line+0x4d8>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
     eb0:	32 c0       	rjmp	.+100    	; 0xf16 <gc_execute_line+0x4e6>

		// atc
		case 12: atc_change(0);break;
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	11 c0       	rjmp	.+34     	; 0xeda <gc_execute_line+0x4aa>
		case 13: atc_change(1);break;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <gc_execute_line+0x4aa>
		case 14: atc_change(2);break;
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <gc_execute_line+0x4aa>
		case 15: atc_change(3);break;
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <gc_execute_line+0x4aa>
		case 16: atc_change(4);break;
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	05 c0       	rjmp	.+10     	; 0xeda <gc_execute_line+0x4aa>
		case 17: atc_change(5);break;
     ed0:	85 e0       	ldi	r24, 0x05	; 5
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <gc_execute_line+0x4aa>
		case 18: atc_change(6);break;
     ed6:	86 e0       	ldi	r24, 0x06	; 6
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <atc_change>
     ede:	3a c0       	rjmp	.+116    	; 0xf54 <gc_execute_line+0x524>

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>
     ee8:	1b c0       	rjmp	.+54     	; 0xf20 <gc_execute_line+0x4f0>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>
     ef2:	1d c0       	rjmp	.+58     	; 0xf2e <gc_execute_line+0x4fe>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
     ef4:	0e 94 9b 20 	call	0x4136	; 0x4136 <tape_knock>
     ef8:	21 c0       	rjmp	.+66     	; 0xf3c <gc_execute_line+0x50c>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
     efa:	0e 94 61 20 	call	0x40c2	; 0x40c2 <vacuum_test>
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	9c a7       	std	Y+44, r25	; 0x2c
     f02:	28 c0       	rjmp	.+80     	; 0xf54 <gc_execute_line+0x524>
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
     f04:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <check_for_tool>
     f08:	a1 e0       	ldi	r26, 0x01	; 1
     f0a:	ac a7       	std	Y+44, r26	; 0x2c
     f0c:	23 c0       	rjmp	.+70     	; 0xf54 <gc_execute_line+0x524>
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
     f0e:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <goto_vacpad>
     f12:	80 93 00 02 	sts	0x0200, r24
     f16:	b1 e0       	ldi	r27, 0x01	; 1
     f18:	bc a7       	std	Y+44, r27	; 0x2c
     f1a:	1c c0       	rjmp	.+56     	; 0xf54 <gc_execute_line+0x524>
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
     f1c:	0e 94 61 20 	call	0x40c2	; 0x40c2 <vacuum_test>
     f20:	e1 e0       	ldi	r30, 0x01	; 1
     f22:	ec a7       	std	Y+44, r30	; 0x2c
     f24:	17 c0       	rjmp	.+46     	; 0xf54 <gc_execute_line+0x524>
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
     f26:	0e 94 c6 20 	call	0x418c	; 0x418c <pickup_part>
     f2a:	80 93 00 02 	sts	0x0200, r24
     f2e:	f1 e0       	ldi	r31, 0x01	; 1
     f30:	fc a7       	std	Y+44, r31	; 0x2c
     f32:	10 c0       	rjmp	.+32     	; 0xf54 <gc_execute_line+0x524>
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
     f34:	0e 94 71 20 	call	0x40e2	; 0x40e2 <putdown_part>
     f38:	80 93 00 02 	sts	0x0200, r24
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	8c a7       	std	Y+44, r24	; 0x2c
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <gc_execute_line+0x524>

        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     f42:	90 92 00 02 	sts	0x0200, r9
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <gc_execute_line+0x524>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     f48:	c8 01       	movw	r24, r16
     f4a:	b7 01       	movw	r22, r14
     f4c:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
     f50:	60 93 22 02 	sts	0x0222, r22
    }

    if(gc.status_code) { break; }
     f54:	80 91 00 02 	lds	r24, 0x0200
     f58:	88 23       	and	r24, r24
     f5a:	61 f4       	brne	.+24     	; 0xf74 <gc_execute_line+0x544>
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     f5c:	ce 01       	movw	r24, r28
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	be 01       	movw	r22, r28
     f62:	6c 5f       	subi	r22, 0xFC	; 252
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	a5 01       	movw	r20, r10
     f68:	91 01       	movw	r18, r2
     f6a:	0e 94 ab 04 	call	0x956	; 0x956 <next_statement>
     f6e:	89 2b       	or	r24, r25
     f70:	09 f0       	breq	.+2      	; 0xf74 <gc_execute_line+0x544>
     f72:	f5 cd       	rjmp	.-1046   	; 0xb5e <gc_execute_line+0x12e>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     f74:	80 91 00 02 	lds	r24, 0x0200
     f78:	88 23       	and	r24, r24
     f7a:	09 f0       	breq	.+2      	; 0xf7e <gc_execute_line+0x54e>
     f7c:	e6 c1       	rjmp	.+972    	; 0x134a <gc_execute_line+0x91a>

  char_counter = 0;
     f7e:	1b 82       	std	Y+3, r1	; 0x03
     f80:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
     f82:	80 e1       	ldi	r24, 0x10	; 16
     f84:	fe 01       	movw	r30, r28
     f86:	7c 96       	adiw	r30, 0x1c	; 28
     f88:	df 01       	movw	r26, r30
     f8a:	1d 92       	st	X+, r1
     f8c:	8a 95       	dec	r24
     f8e:	e9 f7       	brne	.-6      	; 0xf8a <gc_execute_line+0x55a>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     f90:	de 01       	movw	r26, r28
     f92:	1c 96       	adiw	r26, 0x0c	; 12
     f94:	e2 e1       	ldi	r30, 0x12	; 18
     f96:	f2 e0       	ldi	r31, 0x02	; 2
     f98:	80 e1       	ldi	r24, 0x10	; 16
     f9a:	01 90       	ld	r0, Z+
     f9c:	0d 92       	st	X+, r0
     f9e:	81 50       	subi	r24, 0x01	; 1
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <gc_execute_line+0x56a>
     fa2:	1d a6       	std	Y+45, r1	; 0x2d
     fa4:	1e a6       	std	Y+46, r1	; 0x2e
     fa6:	b0 e8       	ldi	r27, 0x80	; 128
     fa8:	bf a7       	std	Y+47, r27	; 0x2f
     faa:	ef eb       	ldi	r30, 0xBF	; 191
     fac:	e8 ab       	std	Y+48, r30	; 0x30
     fae:	66 24       	eor	r6, r6
     fb0:	77 24       	eor	r7, r7

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     fb2:	e2 e0       	ldi	r30, 0x02	; 2
     fb4:	2e 2e       	mov	r2, r30
     fb6:	31 2c       	mov	r3, r1
     fb8:	2c 0e       	add	r2, r28
     fba:	3d 1e       	adc	r3, r29
     fbc:	4e 01       	movw	r8, r28
     fbe:	08 94       	sec
     fc0:	81 1c       	adc	r8, r1
     fc2:	91 1c       	adc	r9, r1
	  case 'H':

		// amount to move
		head = unit_converted_value;
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
     fc4:	79 e0       	ldi	r23, 0x09	; 9
     fc6:	47 2e       	mov	r4, r23
     fc8:	c9 c0       	rjmp	.+402    	; 0x115c <gc_execute_line+0x72c>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     fca:	cc 80       	ldd	r12, Y+4	; 0x04
     fcc:	dd 80       	ldd	r13, Y+5	; 0x05
     fce:	ee 80       	ldd	r14, Y+6	; 0x06
     fd0:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     fd2:	80 91 03 02 	lds	r24, 0x0203
     fd6:	88 23       	and	r24, r24
     fd8:	19 f4       	brne	.+6      	; 0xfe0 <gc_execute_line+0x5b0>
     fda:	a7 01       	movw	r20, r14
     fdc:	96 01       	movw	r18, r12
     fde:	0a c0       	rjmp	.+20     	; 0xff4 <gc_execute_line+0x5c4>
     fe0:	c7 01       	movw	r24, r14
     fe2:	b6 01       	movw	r22, r12
     fe4:	23 e3       	ldi	r18, 0x33	; 51
     fe6:	33 e3       	ldi	r19, 0x33	; 51
     fe8:	4b ec       	ldi	r20, 0xCB	; 203
     fea:	51 e4       	ldi	r21, 0x41	; 65
     fec:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
     ff0:	9b 01       	movw	r18, r22
     ff2:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     ff4:	09 81       	ldd	r16, Y+1	; 0x01
     ff6:	0c 34       	cpi	r16, 0x4C	; 76
     ff8:	60 f4       	brcc	.+24     	; 0x1012 <gc_execute_line+0x5e2>
     ffa:	09 34       	cpi	r16, 0x49	; 73
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <gc_execute_line+0x5d0>
     ffe:	47 c0       	rjmp	.+142    	; 0x108e <gc_execute_line+0x65e>
    1000:	06 34       	cpi	r16, 0x46	; 70
    1002:	b1 f0       	breq	.+44     	; 0x1030 <gc_execute_line+0x600>
    1004:	08 34       	cpi	r16, 0x48	; 72
    1006:	09 f4       	brne	.+2      	; 0x100a <gc_execute_line+0x5da>
    1008:	a2 c0       	rjmp	.+324    	; 0x114e <gc_execute_line+0x71e>
    100a:	03 34       	cpi	r16, 0x43	; 67
    100c:	09 f0       	breq	.+2      	; 0x1010 <gc_execute_line+0x5e0>
    100e:	a6 c0       	rjmp	.+332    	; 0x115c <gc_execute_line+0x72c>
    1010:	88 c0       	rjmp	.+272    	; 0x1122 <gc_execute_line+0x6f2>
    1012:	03 35       	cpi	r16, 0x53	; 83
    1014:	09 f4       	brne	.+2      	; 0x1018 <gc_execute_line+0x5e8>
    1016:	4f c0       	rjmp	.+158    	; 0x10b6 <gc_execute_line+0x686>
    1018:	04 35       	cpi	r16, 0x54	; 84
    101a:	20 f4       	brcc	.+8      	; 0x1024 <gc_execute_line+0x5f4>
    101c:	00 35       	cpi	r16, 0x50	; 80
    101e:	09 f0       	breq	.+2      	; 0x1022 <gc_execute_line+0x5f2>
    1020:	9d c0       	rjmp	.+314    	; 0x115c <gc_execute_line+0x72c>
    1022:	44 c0       	rjmp	.+136    	; 0x10ac <gc_execute_line+0x67c>
    1024:	80 2f       	mov	r24, r16
    1026:	88 55       	subi	r24, 0x58	; 88
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	08 f0       	brcs	.+2      	; 0x102e <gc_execute_line+0x5fe>
    102c:	97 c0       	rjmp	.+302    	; 0x115c <gc_execute_line+0x72c>
    102e:	4c c0       	rjmp	.+152    	; 0x10c8 <gc_execute_line+0x698>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    1030:	80 91 02 02 	lds	r24, 0x0202
    1034:	88 23       	and	r24, r24
    1036:	29 f0       	breq	.+10     	; 0x1042 <gc_execute_line+0x612>
    1038:	2d a7       	std	Y+45, r18	; 0x2d
    103a:	3e a7       	std	Y+46, r19	; 0x2e
    103c:	4f a7       	std	Y+47, r20	; 0x2f
    103e:	58 ab       	std	Y+48, r21	; 0x30
    1040:	8d c0       	rjmp	.+282    	; 0x115c <gc_execute_line+0x72c>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    1042:	80 91 01 02 	lds	r24, 0x0201
    1046:	88 23       	and	r24, r24
    1048:	89 f4       	brne	.+34     	; 0x106c <gc_execute_line+0x63c>
          gc.seek_rate = unit_converted_value/60;
    104a:	ca 01       	movw	r24, r20
    104c:	b9 01       	movw	r22, r18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e7       	ldi	r20, 0x70	; 112
    1054:	52 e4       	ldi	r21, 0x42	; 66
    1056:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    105a:	60 93 0e 02 	sts	0x020E, r22
    105e:	70 93 0f 02 	sts	0x020F, r23
    1062:	80 93 10 02 	sts	0x0210, r24
    1066:	90 93 11 02 	sts	0x0211, r25
    106a:	78 c0       	rjmp	.+240    	; 0x115c <gc_execute_line+0x72c>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
    106c:	ca 01       	movw	r24, r20
    106e:	b9 01       	movw	r22, r18
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e7       	ldi	r20, 0x70	; 112
    1076:	52 e4       	ldi	r21, 0x42	; 66
    1078:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    107c:	60 93 0a 02 	sts	0x020A, r22
    1080:	70 93 0b 02 	sts	0x020B, r23
    1084:	80 93 0c 02 	sts	0x020C, r24
    1088:	90 93 0d 02 	sts	0x020D, r25
    108c:	67 c0       	rjmp	.+206    	; 0x115c <gc_execute_line+0x72c>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    108e:	e0 2f       	mov	r30, r16
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	e9 54       	subi	r30, 0x49	; 73
    1094:	f0 40       	sbci	r31, 0x00	; 0
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e8 0d       	add	r30, r8
    10a0:	f9 1d       	adc	r31, r9
    10a2:	23 8f       	std	Z+27, r18	; 0x1b
    10a4:	34 8f       	std	Z+28, r19	; 0x1c
    10a6:	45 8f       	std	Z+29, r20	; 0x1d
    10a8:	56 8f       	std	Z+30, r21	; 0x1e
    10aa:	58 c0       	rjmp	.+176    	; 0x115c <gc_execute_line+0x72c>
      case 'P': p = value; break;
    10ac:	c8 86       	std	Y+8, r12	; 0x08
    10ae:	d9 86       	std	Y+9, r13	; 0x09
    10b0:	ea 86       	std	Y+10, r14	; 0x0a
    10b2:	fb 86       	std	Y+11, r15	; 0x0b
    10b4:	53 c0       	rjmp	.+166    	; 0x115c <gc_execute_line+0x72c>
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    10b6:	c7 01       	movw	r24, r14
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
    10be:	70 93 24 02 	sts	0x0224, r23
    10c2:	60 93 23 02 	sts	0x0223, r22
    10c6:	4a c0       	rjmp	.+148    	; 0x115c <gc_execute_line+0x72c>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    10c8:	80 91 04 02 	lds	r24, 0x0204
    10cc:	88 23       	and	r24, r24
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <gc_execute_line+0x6a4>
    10d0:	55 20       	and	r5, r5
    10d2:	79 f0       	breq	.+30     	; 0x10f2 <gc_execute_line+0x6c2>
        target[letter - 'X'] = unit_converted_value;
    10d4:	e0 2f       	mov	r30, r16
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	e8 55       	subi	r30, 0x58	; 88
    10da:	f0 40       	sbci	r31, 0x00	; 0
    10dc:	ee 0f       	add	r30, r30
    10de:	ff 1f       	adc	r31, r31
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	e8 0d       	add	r30, r8
    10e6:	f9 1d       	adc	r31, r9
    10e8:	23 87       	std	Z+11, r18	; 0x0b
    10ea:	34 87       	std	Z+12, r19	; 0x0c
    10ec:	45 87       	std	Z+13, r20	; 0x0d
    10ee:	56 87       	std	Z+14, r21	; 0x0e
    10f0:	35 c0       	rjmp	.+106    	; 0x115c <gc_execute_line+0x72c>
      } else {
        target[letter - 'X'] += unit_converted_value;
    10f2:	10 e0       	ldi	r17, 0x00	; 0
    10f4:	08 55       	subi	r16, 0x58	; 88
    10f6:	10 40       	sbci	r17, 0x00	; 0
    10f8:	00 0f       	add	r16, r16
    10fa:	11 1f       	adc	r17, r17
    10fc:	00 0f       	add	r16, r16
    10fe:	11 1f       	adc	r17, r17
    1100:	08 0d       	add	r16, r8
    1102:	19 1d       	adc	r17, r9
    1104:	d8 01       	movw	r26, r16
    1106:	1b 96       	adiw	r26, 0x0b	; 11
    1108:	6d 91       	ld	r22, X+
    110a:	7d 91       	ld	r23, X+
    110c:	8d 91       	ld	r24, X+
    110e:	9c 91       	ld	r25, X
    1110:	1e 97       	sbiw	r26, 0x0e	; 14
    1112:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1116:	f8 01       	movw	r30, r16
    1118:	63 87       	std	Z+11, r22	; 0x0b
    111a:	74 87       	std	Z+12, r23	; 0x0c
    111c:	85 87       	std	Z+13, r24	; 0x0d
    111e:	96 87       	std	Z+14, r25	; 0x0e
    1120:	1d c0       	rjmp	.+58     	; 0x115c <gc_execute_line+0x72c>
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    1122:	80 91 04 02 	lds	r24, 0x0204
    1126:	88 23       	and	r24, r24
    1128:	11 f4       	brne	.+4      	; 0x112e <gc_execute_line+0x6fe>
    112a:	55 20       	and	r5, r5
    112c:	29 f0       	breq	.+10     	; 0x1138 <gc_execute_line+0x708>
		target[C_AXIS] = unit_converted_value;
    112e:	28 8f       	std	Y+24, r18	; 0x18
    1130:	39 8f       	std	Y+25, r19	; 0x19
    1132:	4a 8f       	std	Y+26, r20	; 0x1a
    1134:	5b 8f       	std	Y+27, r21	; 0x1b
    1136:	12 c0       	rjmp	.+36     	; 0x115c <gc_execute_line+0x72c>
      } else {
        target[C_AXIS] += unit_converted_value;
    1138:	68 8d       	ldd	r22, Y+24	; 0x18
    113a:	79 8d       	ldd	r23, Y+25	; 0x19
    113c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    113e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1140:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1144:	68 8f       	std	Y+24, r22	; 0x18
    1146:	79 8f       	std	Y+25, r23	; 0x19
    1148:	8a 8f       	std	Y+26, r24	; 0x1a
    114a:	9b 8f       	std	Y+27, r25	; 0x1b
    114c:	07 c0       	rjmp	.+14     	; 0x115c <gc_execute_line+0x72c>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    114e:	ca 01       	movw	r24, r20
    1150:	b9 01       	movw	r22, r18
    1152:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
    1156:	3b 01       	movw	r6, r22
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    1158:	40 92 01 02 	sts	0x0201, r4
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    115c:	c4 01       	movw	r24, r8
    115e:	be 01       	movw	r22, r28
    1160:	6c 5f       	subi	r22, 0xFC	; 252
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	a5 01       	movw	r20, r10
    1166:	91 01       	movw	r18, r2
    1168:	0e 94 ab 04 	call	0x956	; 0x956 <next_statement>
    116c:	89 2b       	or	r24, r25
    116e:	09 f0       	breq	.+2      	; 0x1172 <gc_execute_line+0x742>
    1170:	2c cf       	rjmp	.-424    	; 0xfca <gc_execute_line+0x59a>
		break;
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1172:	80 91 00 02 	lds	r24, 0x0200
    1176:	88 23       	and	r24, r24
    1178:	09 f0       	breq	.+2      	; 0x117c <gc_execute_line+0x74c>
    117a:	e7 c0       	rjmp	.+462    	; 0x134a <gc_execute_line+0x91a>
    
  // Update spindle state
  if (gc.spindle_direction) {
    117c:	80 91 06 02 	lds	r24, 0x0206
    1180:	90 91 07 02 	lds	r25, 0x0207
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	59 f0       	breq	.+22     	; 0x119e <gc_execute_line+0x76e>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    1188:	40 91 23 02 	lds	r20, 0x0223
    118c:	50 91 24 02 	lds	r21, 0x0224
    1190:	66 27       	eor	r22, r22
    1192:	57 fd       	sbrc	r21, 7
    1194:	60 95       	com	r22
    1196:	76 2f       	mov	r23, r22
    1198:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <spindle_run>
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <gc_execute_line+0x772>
  } else {
    spindle_stop();
    119e:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <spindle_stop>
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    11a2:	80 91 08 02 	lds	r24, 0x0208
    11a6:	90 91 09 02 	lds	r25, 0x0209
    11aa:	89 2b       	or	r24, r25
    11ac:	19 f0       	breq	.+6      	; 0x11b4 <gc_execute_line+0x784>
  	coolant_flood(TRUE);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <gc_execute_line+0x788>
  }
  else {
  	coolant_flood(FALSE);
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <coolant_flood>
  }
  
  // Perform any physical actions
  switch (next_action) {
    11bc:	fc a5       	ldd	r31, Y+44	; 0x2c
    11be:	f1 30       	cpi	r31, 0x01	; 1
    11c0:	91 f0       	breq	.+36     	; 0x11e6 <gc_execute_line+0x7b6>
    11c2:	f1 30       	cpi	r31, 0x01	; 1
    11c4:	f8 f0       	brcs	.+62     	; 0x1204 <gc_execute_line+0x7d4>
    11c6:	f2 30       	cpi	r31, 0x02	; 2
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <gc_execute_line+0x7a2>
    11ca:	f3 30       	cpi	r31, 0x03	; 3
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <gc_execute_line+0x7a0>
    11ce:	b0 c0       	rjmp	.+352    	; 0x1330 <gc_execute_line+0x900>
    11d0:	9d c0       	rjmp	.+314    	; 0x130c <gc_execute_line+0x8dc>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    11d2:	0e 94 2d 0a 	call	0x145a	; 0x145a <mc_go_home>
    11d6:	80 e1       	ldi	r24, 0x10	; 16
    11d8:	fe 01       	movw	r30, r28
    11da:	3c 96       	adiw	r30, 0x0c	; 12
    11dc:	df 01       	movw	r26, r30
    11de:	1d 92       	st	X+, r1
    11e0:	8a 95       	dec	r24
    11e2:	e9 f7       	brne	.-6      	; 0x11de <gc_execute_line+0x7ae>
    11e4:	a5 c0       	rjmp	.+330    	; 0x1330 <gc_execute_line+0x900>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    11e6:	68 85       	ldd	r22, Y+8	; 0x08
    11e8:	79 85       	ldd	r23, Y+9	; 0x09
    11ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4a e7       	ldi	r20, 0x7A	; 122
    11f4:	54 e4       	ldi	r21, 0x44	; 68
    11f6:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    11fa:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
    11fe:	0e 94 30 0a 	call	0x1460	; 0x1460 <mc_dwell>
    1202:	96 c0       	rjmp	.+300    	; 0x1330 <gc_execute_line+0x900>
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1204:	80 91 01 02 	lds	r24, 0x0201
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	99 f1       	breq	.+102    	; 0x1272 <gc_execute_line+0x842>
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	20 f0       	brcs	.+8      	; 0x1218 <gc_execute_line+0x7e8>
    1210:	89 30       	cpi	r24, 0x09	; 9
    1212:	09 f0       	breq	.+2      	; 0x1216 <gc_execute_line+0x7e6>
    1214:	8d c0       	rjmp	.+282    	; 0x1330 <gc_execute_line+0x900>
    1216:	76 c0       	rjmp	.+236    	; 0x1304 <gc_execute_line+0x8d4>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    1218:	00 d0       	rcall	.+0      	; 0x121a <gc_execute_line+0x7ea>
    121a:	00 d0       	rcall	.+0      	; 0x121c <gc_execute_line+0x7ec>
    121c:	6c 85       	ldd	r22, Y+12	; 0x0c
    121e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1220:	8e 85       	ldd	r24, Y+14	; 0x0e
    1222:	9f 85       	ldd	r25, Y+15	; 0x0f
    1224:	28 89       	ldd	r18, Y+16	; 0x10
    1226:	39 89       	ldd	r19, Y+17	; 0x11
    1228:	4a 89       	ldd	r20, Y+18	; 0x12
    122a:	5b 89       	ldd	r21, Y+19	; 0x13
    122c:	ec 88       	ldd	r14, Y+20	; 0x14
    122e:	fd 88       	ldd	r15, Y+21	; 0x15
    1230:	0e 89       	ldd	r16, Y+22	; 0x16
    1232:	1f 89       	ldd	r17, Y+23	; 0x17
    1234:	a8 8c       	ldd	r10, Y+24	; 0x18
    1236:	b9 8c       	ldd	r11, Y+25	; 0x19
    1238:	ca 8c       	ldd	r12, Y+26	; 0x1a
    123a:	db 8c       	ldd	r13, Y+27	; 0x1b
    123c:	60 90 0e 02 	lds	r6, 0x020E
    1240:	70 90 0f 02 	lds	r7, 0x020F
    1244:	80 90 10 02 	lds	r8, 0x0210
    1248:	90 90 11 02 	lds	r9, 0x0211
    124c:	ed b7       	in	r30, 0x3d	; 61
    124e:	fe b7       	in	r31, 0x3e	; 62
    1250:	61 82       	std	Z+1, r6	; 0x01
    1252:	72 82       	std	Z+2, r7	; 0x02
    1254:	83 82       	std	Z+3, r8	; 0x03
    1256:	94 82       	std	Z+4, r9	; 0x04
    1258:	16 82       	std	Z+6, r1	; 0x06
    125a:	15 82       	std	Z+5, r1	; 0x05
    125c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <plan_buffer_line>
    1260:	8d b7       	in	r24, 0x3d	; 61
    1262:	9e b7       	in	r25, 0x3e	; 62
    1264:	06 96       	adiw	r24, 0x06	; 6
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	9e bf       	out	0x3e, r25	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	8d bf       	out	0x3d, r24	; 61
    1270:	5f c0       	rjmp	.+190    	; 0x1330 <gc_execute_line+0x900>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    1272:	2c 84       	ldd	r2, Y+12	; 0x0c
    1274:	3d 84       	ldd	r3, Y+13	; 0x0d
    1276:	4e 84       	ldd	r4, Y+14	; 0x0e
    1278:	5f 84       	ldd	r5, Y+15	; 0x0f
    127a:	68 88       	ldd	r6, Y+16	; 0x10
    127c:	79 88       	ldd	r7, Y+17	; 0x11
    127e:	8a 88       	ldd	r8, Y+18	; 0x12
    1280:	9b 88       	ldd	r9, Y+19	; 0x13
    1282:	ec 88       	ldd	r14, Y+20	; 0x14
    1284:	fd 88       	ldd	r15, Y+21	; 0x15
    1286:	0e 89       	ldd	r16, Y+22	; 0x16
    1288:	1f 89       	ldd	r17, Y+23	; 0x17
    128a:	a8 8c       	ldd	r10, Y+24	; 0x18
    128c:	b9 8c       	ldd	r11, Y+25	; 0x19
    128e:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1290:	db 8c       	ldd	r13, Y+27	; 0x1b
    1292:	60 91 02 02 	lds	r22, 0x0202
    1296:	66 23       	and	r22, r22
    1298:	61 f4       	brne	.+24     	; 0x12b2 <gc_execute_line+0x882>
    129a:	90 91 0a 02 	lds	r25, 0x020A
    129e:	9d a7       	std	Y+45, r25	; 0x2d
    12a0:	a0 91 0b 02 	lds	r26, 0x020B
    12a4:	ae a7       	std	Y+46, r26	; 0x2e
    12a6:	b0 91 0c 02 	lds	r27, 0x020C
    12aa:	bf a7       	std	Y+47, r27	; 0x2f
    12ac:	e0 91 0d 02 	lds	r30, 0x020D
    12b0:	e8 ab       	std	Y+48, r30	; 0x30
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <gc_execute_line+0x884>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <gc_execute_line+0x886>
    12b6:	8d b7       	in	r24, 0x3d	; 61
    12b8:	9e b7       	in	r25, 0x3e	; 62
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	9a ab       	std	Y+50, r25	; 0x32
    12be:	89 ab       	std	Y+49, r24	; 0x31
    12c0:	2d a5       	ldd	r18, Y+45	; 0x2d
    12c2:	3e a5       	ldd	r19, Y+46	; 0x2e
    12c4:	4f a5       	ldd	r20, Y+47	; 0x2f
    12c6:	58 a9       	ldd	r21, Y+48	; 0x30
    12c8:	c9 01       	movw	r24, r18
    12ca:	da 01       	movw	r26, r20
    12cc:	ed b7       	in	r30, 0x3d	; 61
    12ce:	fe b7       	in	r31, 0x3e	; 62
    12d0:	81 83       	std	Z+1, r24	; 0x01
    12d2:	92 83       	std	Z+2, r25	; 0x02
    12d4:	a3 83       	std	Z+3, r26	; 0x03
    12d6:	b4 83       	std	Z+4, r27	; 0x04
    12d8:	a9 a9       	ldd	r26, Y+49	; 0x31
    12da:	ba a9       	ldd	r27, Y+50	; 0x32
    12dc:	14 96       	adiw	r26, 0x04	; 4
    12de:	6c 93       	st	X, r22
    12e0:	14 97       	sbiw	r26, 0x04	; 4
    12e2:	15 96       	adiw	r26, 0x05	; 5
    12e4:	1c 92       	st	X, r1
    12e6:	c2 01       	movw	r24, r4
    12e8:	b1 01       	movw	r22, r2
    12ea:	a4 01       	movw	r20, r8
    12ec:	93 01       	movw	r18, r6
    12ee:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <plan_buffer_line>
    12f2:	ed b7       	in	r30, 0x3d	; 61
    12f4:	fe b7       	in	r31, 0x3e	; 62
    12f6:	36 96       	adiw	r30, 0x06	; 6
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	fe bf       	out	0x3e, r31	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	ed bf       	out	0x3d, r30	; 61
    1302:	16 c0       	rjmp	.+44     	; 0x1330 <gc_execute_line+0x900>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    1304:	c3 01       	movw	r24, r6
    1306:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <rotate_head>
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <gc_execute_line+0x900>
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    130c:	6c 85       	ldd	r22, Y+12	; 0x0c
    130e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1310:	8e 85       	ldd	r24, Y+14	; 0x0e
    1312:	9f 85       	ldd	r25, Y+15	; 0x0f
    1314:	28 89       	ldd	r18, Y+16	; 0x10
    1316:	39 89       	ldd	r19, Y+17	; 0x11
    1318:	4a 89       	ldd	r20, Y+18	; 0x12
    131a:	5b 89       	ldd	r21, Y+19	; 0x13
    131c:	ec 88       	ldd	r14, Y+20	; 0x14
    131e:	fd 88       	ldd	r15, Y+21	; 0x15
    1320:	0e 89       	ldd	r16, Y+22	; 0x16
    1322:	1f 89       	ldd	r17, Y+23	; 0x17
    1324:	a8 8c       	ldd	r10, Y+24	; 0x18
    1326:	b9 8c       	ldd	r11, Y+25	; 0x19
    1328:	ca 8c       	ldd	r12, Y+26	; 0x1a
    132a:	db 8c       	ldd	r13, Y+27	; 0x1b
    132c:	0e 94 92 0b 	call	0x1724	; 0x1724 <plan_set_current>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    1330:	a2 e1       	ldi	r26, 0x12	; 18
    1332:	b2 e0       	ldi	r27, 0x02	; 2
    1334:	fe 01       	movw	r30, r28
    1336:	3c 96       	adiw	r30, 0x0c	; 12
    1338:	80 e1       	ldi	r24, 0x10	; 16
    133a:	01 90       	ld	r0, Z+
    133c:	0d 92       	st	X+, r0
    133e:	81 50       	subi	r24, 0x01	; 1
    1340:	e1 f7       	brne	.-8      	; 0x133a <gc_execute_line+0x90a>

  return(gc.status_code);
    1342:	80 91 00 02 	lds	r24, 0x0200
    1346:	01 c0       	rjmp	.+2      	; 0x134a <gc_execute_line+0x91a>
    1348:	83 e0       	ldi	r24, 0x03	; 3
}
    134a:	e2 96       	adiw	r28, 0x32	; 50
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	bf 90       	pop	r11
    1368:	af 90       	pop	r10
    136a:	9f 90       	pop	r9
    136c:	8f 90       	pop	r8
    136e:	7f 90       	pop	r7
    1370:	6f 90       	pop	r6
    1372:	5f 90       	pop	r5
    1374:	4f 90       	pop	r4
    1376:	3f 90       	pop	r3
    1378:	2f 90       	pop	r2
    137a:	08 95       	ret

0000137c <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    137c:	af 92       	push	r10
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	79 01       	movw	r14, r18
    138e:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    1390:	5f 77       	andi	r21, 0x7F	; 127
    1392:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    1396:	0e 94 4a 21 	call	0x4294	; 0x4294 <atan>
    139a:	5b 01       	movw	r10, r22
    139c:	6c 01       	movw	r12, r24
  if (y>0) {
    139e:	c8 01       	movw	r24, r16
    13a0:	b7 01       	movw	r22, r14
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	0e 94 4c 23 	call	0x4698	; 0x4698 <__gesf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	cc f0       	brlt	.+50     	; 0x13e4 <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
    13b2:	c6 01       	movw	r24, r12
    13b4:	b5 01       	movw	r22, r10
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	0e 94 4c 23 	call	0x4698	; 0x4698 <__gesf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <theta+0x54>
    {
      return(M_PI-theta);
    13c6:	6b ed       	ldi	r22, 0xDB	; 219
    13c8:	7f e0       	ldi	r23, 0x0F	; 15
    13ca:	89 e4       	ldi	r24, 0x49	; 73
    13cc:	90 e4       	ldi	r25, 0x40	; 64
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <theta+0x5c>
    } else {
      return(-M_PI-theta);
    13d0:	6b ed       	ldi	r22, 0xDB	; 219
    13d2:	7f e0       	ldi	r23, 0x0F	; 15
    13d4:	89 e4       	ldi	r24, 0x49	; 73
    13d6:	90 ec       	ldi	r25, 0xC0	; 192
    13d8:	a6 01       	movw	r20, r12
    13da:	95 01       	movw	r18, r10
    13dc:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__subsf3>
    13e0:	5b 01       	movw	r10, r22
    13e2:	6c 01       	movw	r12, r24
    }
  }
}
    13e4:	b5 01       	movw	r22, r10
    13e6:	c6 01       	movw	r24, r12
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	df 90       	pop	r13
    13f2:	cf 90       	pop	r12
    13f4:	bf 90       	pop	r11
    13f6:	af 90       	pop	r10
    13f8:	08 95       	ret

000013fa <main>:
// stepper interrupt ack to host
extern char ackHost;

int main(void)
{
  sp_init();        
    13fa:	0e 94 9a 13 	call	0x2734	; 0x2734 <sp_init>
  settings_init();  
    13fe:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <settings_init>
  plan_init();      
    1402:	0e 94 2f 0c 	call	0x185e	; 0x185e <plan_init>
  st_init();        
    1406:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <st_init>
  limits_init();
    140a:	0e 94 89 17 	call	0x2f12	; 0x2f12 <limits_init>
  spindle_init();   
    140e:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <spindle_init>
  coolant_init();
    1412:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <coolant_init>
  atc_init();
    1416:	0e 94 bd 1c 	call	0x397a	; 0x397a <atc_init>
  head_init();
    141a:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <head_init>
  vacuum_init();
    141e:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <vacuum_init>
  panel_init();
    1422:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <panel_init>
  gc_init();
    1426:	0e 94 da 04 	call	0x9b4	; 0x9b4 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    142a:	81 e5       	ldi	r24, 0x51	; 81
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    1432:	83 b7       	in	r24, 0x33	; 51
    1434:	81 60       	ori	r24, 0x01	; 1
    1436:	83 bf       	out	0x33, r24	; 51
    1438:	88 95       	sleep
    143a:	83 b7       	in	r24, 0x33	; 51
    143c:	8e 7f       	andi	r24, 0xFE	; 254
    143e:	83 bf       	out	0x33, r24	; 51
	
	if( ackHost != 0 ) {
    1440:	80 91 4a 05 	lds	r24, 0x054A
    1444:	88 23       	and	r24, r24
    1446:	21 f0       	breq	.+8      	; 0x1450 <main+0x56>
		serialWrite( ackHost );
    1448:	0e 94 26 1b 	call	0x364c	; 0x364c <serialWrite>
		ackHost = 0;
    144c:	10 92 4a 05 	sts	0x054A, r1
	}

    sp_process(); // ... process the serial protocol
    1450:	0e 94 15 13 	call	0x262a	; 0x262a <sp_process>

	process_panel(); // check the panel
    1454:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <process_panel>
    1458:	ec cf       	rjmp	.-40     	; 0x1432 <main+0x38>

0000145a <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    145a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <st_go_home>
}
    145e:	08 95       	ret

00001460 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	7b 01       	movw	r14, r22
    1472:	8c 01       	movw	r16, r24
  st_synchronize();
    1474:	0e 94 29 18 	call	0x3052	; 0x3052 <st_synchronize>
  _delay_ms(milliseconds);
    1478:	c8 01       	movw	r24, r16
    147a:	b7 01       	movw	r22, r14
    147c:	0e 94 22 22 	call	0x4444	; 0x4444 <__floatunsisf>
    1480:	5b 01       	movw	r10, r22
    1482:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a e7       	ldi	r20, 0x7A	; 122
    148a:	55 e4       	ldi	r21, 0x45	; 69
    148c:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1490:	7b 01       	movw	r14, r22
    1492:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	1c f4       	brge	.+6      	; 0x14aa <mc_dwell+0x4a>
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	24 c0       	rjmp	.+72     	; 0x14f2 <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    14aa:	c8 01       	movw	r24, r16
    14ac:	b7 01       	movw	r22, r14
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	3f ef       	ldi	r19, 0xFF	; 255
    14b2:	4f e7       	ldi	r20, 0x7F	; 127
    14b4:	57 e4       	ldi	r21, 0x47	; 71
    14b6:	0e 94 4c 23 	call	0x4698	; 0x4698 <__gesf2>
    14ba:	18 16       	cp	r1, r24
    14bc:	b4 f4       	brge	.+44     	; 0x14ea <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14be:	c6 01       	movw	r24, r12
    14c0:	b5 01       	movw	r22, r10
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e2       	ldi	r20, 0x20	; 32
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    14ce:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14d2:	80 e9       	ldi	r24, 0x90	; 144
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <mc_dwell+0x82>
    14d8:	fc 01       	movw	r30, r24
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	61 50       	subi	r22, 0x01	; 1
    14e0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e2:	61 15       	cp	r22, r1
    14e4:	71 05       	cpc	r23, r1
    14e6:	c1 f7       	brne	.-16     	; 0x14d8 <mc_dwell+0x78>
    14e8:	07 c0       	rjmp	.+14     	; 0x14f8 <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ea:	c8 01       	movw	r24, r16
    14ec:	b7 01       	movw	r22, r14
    14ee:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
    14f2:	cb 01       	movw	r24, r22
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <mc_dwell+0x94>
}
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	df 90       	pop	r13
    1502:	cf 90       	pop	r12
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
    1508:	08 95       	ret

0000150a <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    150a:	fc 01       	movw	r30, r24
    150c:	60 91 97 06 	lds	r22, 0x0697
    1510:	70 91 98 06 	lds	r23, 0x0698
    1514:	80 91 99 06 	lds	r24, 0x0699
    1518:	90 91 9a 06 	lds	r25, 0x069A
    151c:	21 a5       	ldd	r18, Z+41	; 0x29
    151e:	32 a5       	ldd	r19, Z+42	; 0x2a
    1520:	43 a5       	ldd	r20, Z+43	; 0x2b
    1522:	54 a5       	ldd	r21, Z+44	; 0x2c
    1524:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    1528:	08 95       	ret

0000152a <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    152a:	80 91 16 05 	lds	r24, 0x0516
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	08 95       	ret

00001532 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1532:	20 91 02 05 	lds	r18, 0x0502
    1536:	30 91 03 05 	lds	r19, 0x0503
    153a:	80 91 04 05 	lds	r24, 0x0504
    153e:	90 91 05 05 	lds	r25, 0x0505
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	69 f0       	breq	.+26     	; 0x1562 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1548:	80 91 04 05 	lds	r24, 0x0504
    154c:	90 91 05 05 	lds	r25, 0x0505
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	6a e0       	ldi	r22, 0x0A	; 10
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	0e 94 af 24 	call	0x495e	; 0x495e <__divmodhi4>
    155a:	90 93 05 05 	sts	0x0505, r25
    155e:	80 93 04 05 	sts	0x0504, r24
    1562:	08 95       	ret

00001564 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1564:	20 91 02 05 	lds	r18, 0x0502
    1568:	30 91 03 05 	lds	r19, 0x0503
    156c:	80 91 04 05 	lds	r24, 0x0504
    1570:	90 91 05 05 	lds	r25, 0x0505
    1574:	28 17       	cp	r18, r24
    1576:	39 07       	cpc	r19, r25
    1578:	19 f4       	brne	.+6      	; 0x1580 <plan_get_current_block+0x1c>
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	0f c0       	rjmp	.+30     	; 0x159e <plan_get_current_block+0x3a>
  return(&block_buffer[block_buffer_tail]);
    1580:	20 91 04 05 	lds	r18, 0x0504
    1584:	30 91 05 05 	lds	r19, 0x0505
    1588:	89 e4       	ldi	r24, 0x49	; 73
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	28 9f       	mul	r18, r24
    158e:	a0 01       	movw	r20, r0
    1590:	29 9f       	mul	r18, r25
    1592:	50 0d       	add	r21, r0
    1594:	38 9f       	mul	r19, r24
    1596:	50 0d       	add	r21, r0
    1598:	11 24       	eor	r1, r1
    159a:	48 5d       	subi	r20, 0xD8	; 216
    159c:	5d 4f       	sbci	r21, 0xFD	; 253
}
    159e:	ca 01       	movw	r24, r20
    15a0:	08 95       	ret

000015a2 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    15a2:	4f 92       	push	r4
    15a4:	5f 92       	push	r5
    15a6:	6f 92       	push	r6
    15a8:	7f 92       	push	r7
    15aa:	8f 92       	push	r8
    15ac:	9f 92       	push	r9
    15ae:	af 92       	push	r10
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	ec 01       	movw	r28, r24
    15c4:	4b 01       	movw	r8, r22
  if(!current) { return; }
    15c6:	61 15       	cp	r22, r1
    15c8:	71 05       	cpc	r23, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <planner_forward_pass_kernel+0x2c>
    15cc:	5e c0       	rjmp	.+188    	; 0x168a <planner_forward_pass_kernel+0xe8>
  if(previous) {
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <planner_forward_pass_kernel+0x32>
    15d2:	5b c0       	rjmp	.+182    	; 0x168a <planner_forward_pass_kernel+0xe8>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    15d4:	e9 a8       	ldd	r14, Y+49	; 0x31
    15d6:	fa a8       	ldd	r15, Y+50	; 0x32
    15d8:	0b a9       	ldd	r16, Y+51	; 0x33
    15da:	1c a9       	ldd	r17, Y+52	; 0x34
    15dc:	fb 01       	movw	r30, r22
    15de:	41 a8       	ldd	r4, Z+49	; 0x31
    15e0:	52 a8       	ldd	r5, Z+50	; 0x32
    15e2:	63 a8       	ldd	r6, Z+51	; 0x33
    15e4:	74 a8       	ldd	r7, Z+52	; 0x34
    15e6:	c8 01       	movw	r24, r16
    15e8:	b7 01       	movw	r22, r14
    15ea:	a3 01       	movw	r20, r6
    15ec:	92 01       	movw	r18, r4
    15ee:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
    15f2:	88 23       	and	r24, r24
    15f4:	0c f0       	brlt	.+2      	; 0x15f8 <planner_forward_pass_kernel+0x56>
    15f6:	49 c0       	rjmp	.+146    	; 0x168a <planner_forward_pass_kernel+0xe8>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    15f8:	f4 01       	movw	r30, r8
    15fa:	a1 a4       	ldd	r10, Z+41	; 0x29
    15fc:	b2 a4       	ldd	r11, Z+42	; 0x2a
    15fe:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1600:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1602:	c6 01       	movw	r24, r12
    1604:	b5 01       	movw	r22, r10
    1606:	a8 01       	movw	r20, r16
    1608:	97 01       	movw	r18, r14
    160a:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    160e:	9b 01       	movw	r18, r22
    1610:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1612:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1616:	7b 01       	movw	r14, r22
    1618:	8c 01       	movw	r16, r24
    161a:	20 91 93 06 	lds	r18, 0x0693
    161e:	30 91 94 06 	lds	r19, 0x0694
    1622:	40 91 95 06 	lds	r20, 0x0695
    1626:	50 91 96 06 	lds	r21, 0x0696
    162a:	50 58       	subi	r21, 0x80	; 128
    162c:	ca 01       	movw	r24, r20
    162e:	b9 01       	movw	r22, r18
    1630:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e7       	ldi	r20, 0x70	; 112
    163a:	52 e4       	ldi	r21, 0x42	; 66
    163c:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e7       	ldi	r20, 0x70	; 112
    1646:	52 ec       	ldi	r21, 0xC2	; 194
    1648:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    164c:	2d a5       	ldd	r18, Y+45	; 0x2d
    164e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1650:	4f a5       	ldd	r20, Y+47	; 0x2f
    1652:	58 a9       	ldd	r21, Y+48	; 0x30
    1654:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	c8 01       	movw	r24, r16
    165e:	b7 01       	movw	r22, r14
    1660:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1664:	0e 94 41 24 	call	0x4882	; 0x4882 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1668:	a6 01       	movw	r20, r12
    166a:	95 01       	movw	r18, r10
    166c:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    1670:	7b 01       	movw	r14, r22
    1672:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1674:	a3 01       	movw	r20, r6
    1676:	92 01       	movw	r18, r4
    1678:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
    167c:	88 23       	and	r24, r24
    167e:	2c f4       	brge	.+10     	; 0x168a <planner_forward_pass_kernel+0xe8>
        current->entry_factor = max_entry_factor;
    1680:	f4 01       	movw	r30, r8
    1682:	e1 aa       	std	Z+49, r14	; 0x31
    1684:	f2 aa       	std	Z+50, r15	; 0x32
    1686:	03 ab       	std	Z+51, r16	; 0x33
    1688:	14 ab       	std	Z+52, r17	; 0x34
      }
    }
  }
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	af 90       	pop	r10
    169e:	9f 90       	pop	r9
    16a0:	8f 90       	pop	r8
    16a2:	7f 90       	pop	r7
    16a4:	6f 90       	pop	r6
    16a6:	5f 90       	pop	r5
    16a8:	4f 90       	pop	r4
    16aa:	08 95       	ret

000016ac <planner_forward_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    16b8:	80 91 04 05 	lds	r24, 0x0504
    16bc:	90 91 05 05 	lds	r25, 0x0505
    16c0:	48 2f       	mov	r20, r24
    16c2:	c0 e0       	ldi	r28, 0x00	; 0
    16c4:	d0 e0       	ldi	r29, 0x00	; 0
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <planner_forward_pass+0x48>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    16cc:	89 e4       	ldi	r24, 0x49	; 73
    16ce:	48 02       	muls	r20, r24
    16d0:	80 01       	movw	r16, r0
    16d2:	11 24       	eor	r1, r1
    16d4:	08 5d       	subi	r16, 0xD8	; 216
    16d6:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    16d8:	c9 01       	movw	r24, r18
    16da:	be 01       	movw	r22, r28
    16dc:	a8 01       	movw	r20, r16
    16de:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    16e2:	c7 01       	movw	r24, r14
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	6a e0       	ldi	r22, 0x0A	; 10
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	0e 94 af 24 	call	0x495e	; 0x495e <__divmodhi4>
    16ee:	48 2f       	mov	r20, r24
    16f0:	9e 01       	movw	r18, r28
    16f2:	e8 01       	movw	r28, r16
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    16f4:	e4 2e       	mov	r14, r20
    16f6:	ff 24       	eor	r15, r15
    16f8:	e7 fc       	sbrc	r14, 7
    16fa:	f0 94       	com	r15
    16fc:	80 91 02 05 	lds	r24, 0x0502
    1700:	90 91 03 05 	lds	r25, 0x0503
    1704:	e8 16       	cp	r14, r24
    1706:	f9 06       	cpc	r15, r25
    1708:	09 f7       	brne	.-62     	; 0x16cc <planner_forward_pass+0x20>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    170a:	c9 01       	movw	r24, r18
    170c:	be 01       	movw	r22, r28
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <planner_forward_pass_kernel>
}
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	08 95       	ret

00001724 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1724:	2f 92       	push	r2
    1726:	3f 92       	push	r3
    1728:	4f 92       	push	r4
    172a:	5f 92       	push	r5
    172c:	6f 92       	push	r6
    172e:	7f 92       	push	r7
    1730:	8f 92       	push	r8
    1732:	9f 92       	push	r9
    1734:	af 92       	push	r10
    1736:	bf 92       	push	r11
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	3b 01       	movw	r6, r22
    1746:	4c 01       	movw	r8, r24
    1748:	19 01       	movw	r2, r18
    174a:	2a 01       	movw	r4, r20
	st_synchronize();
    174c:	0e 94 29 18 	call	0x3052	; 0x3052 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1750:	c4 01       	movw	r24, r8
    1752:	b3 01       	movw	r22, r6
    1754:	20 91 75 06 	lds	r18, 0x0675
    1758:	30 91 76 06 	lds	r19, 0x0676
    175c:	40 91 77 06 	lds	r20, 0x0677
    1760:	50 91 78 06 	lds	r21, 0x0678
    1764:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1768:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    176c:	26 e0       	ldi	r18, 0x06	; 6
    176e:	82 2e       	mov	r8, r18
    1770:	25 e0       	ldi	r18, 0x05	; 5
    1772:	92 2e       	mov	r9, r18
    1774:	60 93 06 05 	sts	0x0506, r22
    1778:	70 93 07 05 	sts	0x0507, r23
    177c:	80 93 08 05 	sts	0x0508, r24
    1780:	90 93 09 05 	sts	0x0509, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1784:	c2 01       	movw	r24, r4
    1786:	b1 01       	movw	r22, r2
    1788:	20 91 79 06 	lds	r18, 0x0679
    178c:	30 91 7a 06 	lds	r19, 0x067A
    1790:	40 91 7b 06 	lds	r20, 0x067B
    1794:	50 91 7c 06 	lds	r21, 0x067C
    1798:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    179c:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    17a0:	f4 01       	movw	r30, r8
    17a2:	34 96       	adiw	r30, 0x04	; 4
    17a4:	60 93 0a 05 	sts	0x050A, r22
    17a8:	71 83       	std	Z+1, r23	; 0x01
    17aa:	82 83       	std	Z+2, r24	; 0x02
    17ac:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    17ae:	c8 01       	movw	r24, r16
    17b0:	b7 01       	movw	r22, r14
    17b2:	20 91 7d 06 	lds	r18, 0x067D
    17b6:	30 91 7e 06 	lds	r19, 0x067E
    17ba:	40 91 7f 06 	lds	r20, 0x067F
    17be:	50 91 80 06 	lds	r21, 0x0680
    17c2:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    17c6:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    17ca:	f4 01       	movw	r30, r8
    17cc:	38 96       	adiw	r30, 0x08	; 8
    17ce:	60 93 0e 05 	sts	0x050E, r22
    17d2:	71 83       	std	Z+1, r23	; 0x01
    17d4:	82 83       	std	Z+2, r24	; 0x02
    17d6:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    17d8:	c6 01       	movw	r24, r12
    17da:	b5 01       	movw	r22, r10
    17dc:	20 91 81 06 	lds	r18, 0x0681
    17e0:	30 91 82 06 	lds	r19, 0x0682
    17e4:	40 91 83 06 	lds	r20, 0x0683
    17e8:	50 91 84 06 	lds	r21, 0x0684
    17ec:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    17f0:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    17f4:	2c e0       	ldi	r18, 0x0C	; 12
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	82 0e       	add	r8, r18
    17fa:	93 1e       	adc	r9, r19
    17fc:	60 93 12 05 	sts	0x0512, r22
    1800:	f4 01       	movw	r30, r8
    1802:	71 83       	std	Z+1, r23	; 0x01
    1804:	82 83       	std	Z+2, r24	; 0x02
    1806:	93 83       	std	Z+3, r25	; 0x03
}
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	bf 90       	pop	r11
    1816:	af 90       	pop	r10
    1818:	9f 90       	pop	r9
    181a:	8f 90       	pop	r8
    181c:	7f 90       	pop	r7
    181e:	6f 90       	pop	r6
    1820:	5f 90       	pop	r5
    1822:	4f 90       	pop	r4
    1824:	3f 90       	pop	r3
    1826:	2f 90       	pop	r2
    1828:	08 95       	ret

0000182a <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	80 91 16 05 	lds	r24, 0x0516
    1836:	81 11       	cpse	r24, r1
    1838:	91 e0       	ldi	r25, 0x01	; 1
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	20 97       	sbiw	r28, 0x00	; 0
    183e:	09 f0       	breq	.+2      	; 0x1842 <plan_set_acceleration_manager_enabled+0x18>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	98 17       	cp	r25, r24
    1844:	49 f0       	breq	.+18     	; 0x1858 <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    1846:	0e 94 29 18 	call	0x3052	; 0x3052 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    184a:	10 92 16 05 	sts	0x0516, r1
    184e:	cd 2b       	or	r28, r29
    1850:	19 f0       	breq	.+6      	; 0x1858 <plan_set_acceleration_manager_enabled+0x2e>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	80 93 16 05 	sts	0x0516, r24
  }
}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    185e:	10 92 03 05 	sts	0x0503, r1
    1862:	10 92 02 05 	sts	0x0502, r1
  block_buffer_tail = 0;
    1866:	10 92 05 05 	sts	0x0505, r1
    186a:	10 92 04 05 	sts	0x0504, r1
  plan_set_acceleration_manager_enabled(TRUE);
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 15 0c 	call	0x182a	; 0x182a <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1876:	80 e1       	ldi	r24, 0x10	; 16
    1878:	e6 e0       	ldi	r30, 0x06	; 6
    187a:	f5 e0       	ldi	r31, 0x05	; 5
    187c:	df 01       	movw	r26, r30
    187e:	1d 92       	st	X+, r1
    1880:	8a 95       	dec	r24
    1882:	e9 f7       	brne	.-6      	; 0x187e <plan_init+0x20>
}
    1884:	08 95       	ret

00001886 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1886:	2f 92       	push	r2
    1888:	3f 92       	push	r3
    188a:	4f 92       	push	r4
    188c:	5f 92       	push	r5
    188e:	6f 92       	push	r6
    1890:	7f 92       	push	r7
    1892:	8f 92       	push	r8
    1894:	9f 92       	push	r9
    1896:	af 92       	push	r10
    1898:	bf 92       	push	r11
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <planner_reverse_pass_kernel+0x26>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <planner_reverse_pass_kernel+0x28>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	8c 01       	movw	r16, r24
    18b4:	7e 83       	std	Y+6, r23	; 0x06
    18b6:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    18b8:	67 2b       	or	r22, r23
    18ba:	09 f4       	brne	.+2      	; 0x18be <planner_reverse_pass_kernel+0x38>
    18bc:	07 c1       	rjmp	.+526    	; 0x1acc <planner_reverse_pass_kernel+0x246>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    18be:	41 15       	cp	r20, r1
    18c0:	51 05       	cpc	r21, r1
    18c2:	61 f0       	breq	.+24     	; 0x18dc <planner_reverse_pass_kernel+0x56>
    exit_factor = next->entry_factor;
    18c4:	da 01       	movw	r26, r20
    18c6:	d1 96       	adiw	r26, 0x31	; 49
    18c8:	8d 91       	ld	r24, X+
    18ca:	9d 91       	ld	r25, X+
    18cc:	0d 90       	ld	r0, X+
    18ce:	bc 91       	ld	r27, X
    18d0:	a0 2d       	mov	r26, r0
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	ab 83       	std	Y+3, r26	; 0x03
    18d8:	bc 83       	std	Y+4, r27	; 0x04
    18da:	08 c0       	rjmp	.+16     	; 0x18ec <planner_reverse_pass_kernel+0x66>
  } else {
    exit_factor = factor_for_safe_speed(current);
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	0e 94 85 0a 	call	0x150a	; 0x150a <factor_for_safe_speed>
    18e4:	69 83       	std	Y+1, r22	; 0x01
    18e6:	7a 83       	std	Y+2, r23	; 0x02
    18e8:	8b 83       	std	Y+3, r24	; 0x03
    18ea:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    18ec:	01 15       	cp	r16, r1
    18ee:	11 05       	cpc	r17, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <planner_reverse_pass_kernel+0x6e>
    18f2:	e0 c0       	rjmp	.+448    	; 0x1ab4 <planner_reverse_pass_kernel+0x22e>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    18f4:	f8 01       	movw	r30, r16
    18f6:	61 8d       	ldd	r22, Z+25	; 0x19
    18f8:	72 8d       	ldd	r23, Z+26	; 0x1a
    18fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    18fc:	94 8d       	ldd	r25, Z+28	; 0x1c
    18fe:	ad 81       	ldd	r26, Y+5	; 0x05
    1900:	be 81       	ldd	r27, Y+6	; 0x06
    1902:	59 96       	adiw	r26, 0x19	; 25
    1904:	2d 91       	ld	r18, X+
    1906:	3d 91       	ld	r19, X+
    1908:	4d 91       	ld	r20, X+
    190a:	5c 91       	ld	r21, X
    190c:	5c 97       	sbiw	r26, 0x1c	; 28
    190e:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__subsf3>
    1912:	9b 01       	movw	r18, r22
    1914:	ac 01       	movw	r20, r24
    1916:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    191a:	1b 01       	movw	r2, r22
    191c:	2c 01       	movw	r4, r24
    191e:	f8 01       	movw	r30, r16
    1920:	65 8d       	ldd	r22, Z+29	; 0x1d
    1922:	76 8d       	ldd	r23, Z+30	; 0x1e
    1924:	87 8d       	ldd	r24, Z+31	; 0x1f
    1926:	90 a1       	ldd	r25, Z+32	; 0x20
    1928:	ad 81       	ldd	r26, Y+5	; 0x05
    192a:	be 81       	ldd	r27, Y+6	; 0x06
    192c:	5d 96       	adiw	r26, 0x1d	; 29
    192e:	2d 91       	ld	r18, X+
    1930:	3d 91       	ld	r19, X+
    1932:	4d 91       	ld	r20, X+
    1934:	5c 91       	ld	r21, X
    1936:	90 97       	sbiw	r26, 0x20	; 32
    1938:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__subsf3>
    193c:	9b 01       	movw	r18, r22
    193e:	ac 01       	movw	r20, r24
    1940:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1944:	3b 01       	movw	r6, r22
    1946:	4c 01       	movw	r8, r24
    1948:	f8 01       	movw	r30, r16
    194a:	61 a1       	ldd	r22, Z+33	; 0x21
    194c:	72 a1       	ldd	r23, Z+34	; 0x22
    194e:	83 a1       	ldd	r24, Z+35	; 0x23
    1950:	94 a1       	ldd	r25, Z+36	; 0x24
    1952:	ad 81       	ldd	r26, Y+5	; 0x05
    1954:	be 81       	ldd	r27, Y+6	; 0x06
    1956:	91 96       	adiw	r26, 0x21	; 33
    1958:	2d 91       	ld	r18, X+
    195a:	3d 91       	ld	r19, X+
    195c:	4d 91       	ld	r20, X+
    195e:	5c 91       	ld	r21, X
    1960:	94 97       	sbiw	r26, 0x24	; 36
    1962:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__subsf3>
    1966:	9b 01       	movw	r18, r22
    1968:	ac 01       	movw	r20, r24
    196a:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    196e:	5b 01       	movw	r10, r22
    1970:	6c 01       	movw	r12, r24
    1972:	f8 01       	movw	r30, r16
    1974:	65 a1       	ldd	r22, Z+37	; 0x25
    1976:	76 a1       	ldd	r23, Z+38	; 0x26
    1978:	87 a1       	ldd	r24, Z+39	; 0x27
    197a:	90 a5       	ldd	r25, Z+40	; 0x28
    197c:	ad 81       	ldd	r26, Y+5	; 0x05
    197e:	be 81       	ldd	r27, Y+6	; 0x06
    1980:	95 96       	adiw	r26, 0x25	; 37
    1982:	2d 91       	ld	r18, X+
    1984:	3d 91       	ld	r19, X+
    1986:	4d 91       	ld	r20, X+
    1988:	5c 91       	ld	r21, X
    198a:	98 97       	sbiw	r26, 0x28	; 40
    198c:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__subsf3>
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1998:	7b 01       	movw	r14, r22
    199a:	8c 01       	movw	r16, r24
    199c:	c2 01       	movw	r24, r4
    199e:	b1 01       	movw	r22, r2
    19a0:	a4 01       	movw	r20, r8
    19a2:	93 01       	movw	r18, r6
    19a4:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    19a8:	a6 01       	movw	r20, r12
    19aa:	95 01       	movw	r18, r10
    19ac:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    19b0:	a8 01       	movw	r20, r16
    19b2:	97 01       	movw	r18, r14
    19b4:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    19b8:	0e 94 41 24 	call	0x4882	; 0x4882 <sqrt>
    19bc:	5b 01       	movw	r10, r22
    19be:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    19c0:	e0 90 97 06 	lds	r14, 0x0697
    19c4:	f0 90 98 06 	lds	r15, 0x0698
    19c8:	00 91 99 06 	lds	r16, 0x0699
    19cc:	10 91 9a 06 	lds	r17, 0x069A
    19d0:	a8 01       	movw	r20, r16
    19d2:	97 01       	movw	r18, r14
    19d4:	0e 94 4c 23 	call	0x4698	; 0x4698 <__gesf2>
    19d8:	18 16       	cp	r1, r24
    19da:	5c f0       	brlt	.+22     	; 0x19f2 <planner_reverse_pass_kernel+0x16c>
    19dc:	0f 2e       	mov	r0, r31
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	6f 2e       	mov	r6, r31
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	7f 2e       	mov	r7, r31
    19e6:	f0 e8       	ldi	r31, 0x80	; 128
    19e8:	8f 2e       	mov	r8, r31
    19ea:	ff e3       	ldi	r31, 0x3F	; 63
    19ec:	9f 2e       	mov	r9, r31
    19ee:	f0 2d       	mov	r31, r0
    19f0:	08 c0       	rjmp	.+16     	; 0x1a02 <planner_reverse_pass_kernel+0x17c>
      entry_factor = (settings.max_jerk/jerk);
    19f2:	c8 01       	movw	r24, r16
    19f4:	b7 01       	movw	r22, r14
    19f6:	a6 01       	movw	r20, r12
    19f8:	95 01       	movw	r18, r10
    19fa:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    19fe:	3b 01       	movw	r6, r22
    1a00:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1a02:	c4 01       	movw	r24, r8
    1a04:	b3 01       	movw	r22, r6
    1a06:	29 81       	ldd	r18, Y+1	; 0x01
    1a08:	3a 81       	ldd	r19, Y+2	; 0x02
    1a0a:	4b 81       	ldd	r20, Y+3	; 0x03
    1a0c:	5c 81       	ldd	r21, Y+4	; 0x04
    1a0e:	0e 94 4c 23 	call	0x4698	; 0x4698 <__gesf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <planner_reverse_pass_kernel+0x192>
    1a16:	54 c0       	rjmp	.+168    	; 0x1ac0 <planner_reverse_pass_kernel+0x23a>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1a18:	ed 81       	ldd	r30, Y+5	; 0x05
    1a1a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a1c:	a1 a4       	ldd	r10, Z+41	; 0x29
    1a1e:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1a20:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1a22:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1a24:	c6 01       	movw	r24, r12
    1a26:	b5 01       	movw	r22, r10
    1a28:	29 81       	ldd	r18, Y+1	; 0x01
    1a2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a2c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a2e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a30:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1a34:	9b 01       	movw	r18, r22
    1a36:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1a38:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1a3c:	7b 01       	movw	r14, r22
    1a3e:	8c 01       	movw	r16, r24
    1a40:	20 91 93 06 	lds	r18, 0x0693
    1a44:	30 91 94 06 	lds	r19, 0x0694
    1a48:	40 91 95 06 	lds	r20, 0x0695
    1a4c:	50 91 96 06 	lds	r21, 0x0696
    1a50:	50 58       	subi	r21, 0x80	; 128
    1a52:	ca 01       	movw	r24, r20
    1a54:	b9 01       	movw	r22, r18
    1a56:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e7       	ldi	r20, 0x70	; 112
    1a60:	52 e4       	ldi	r21, 0x42	; 66
    1a62:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e7       	ldi	r20, 0x70	; 112
    1a6c:	52 ec       	ldi	r21, 0xC2	; 194
    1a6e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1a72:	ad 81       	ldd	r26, Y+5	; 0x05
    1a74:	be 81       	ldd	r27, Y+6	; 0x06
    1a76:	9d 96       	adiw	r26, 0x2d	; 45
    1a78:	2d 91       	ld	r18, X+
    1a7a:	3d 91       	ld	r19, X+
    1a7c:	4d 91       	ld	r20, X+
    1a7e:	5c 91       	ld	r21, X
    1a80:	d0 97       	sbiw	r26, 0x30	; 48
    1a82:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1a86:	9b 01       	movw	r18, r22
    1a88:	ac 01       	movw	r20, r24
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	b7 01       	movw	r22, r14
    1a8e:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1a92:	0e 94 41 24 	call	0x4882	; 0x4882 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1a96:	a6 01       	movw	r20, r12
    1a98:	95 01       	movw	r18, r10
    1a9a:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    1a9e:	7b 01       	movw	r14, r22
    1aa0:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1aa2:	a4 01       	movw	r20, r8
    1aa4:	93 01       	movw	r18, r6
    1aa6:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	4c f4       	brge	.+18     	; 0x1ac0 <planner_reverse_pass_kernel+0x23a>
    1aae:	37 01       	movw	r6, r14
    1ab0:	48 01       	movw	r8, r16
    1ab2:	06 c0       	rjmp	.+12     	; 0x1ac0 <planner_reverse_pass_kernel+0x23a>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	0e 94 85 0a 	call	0x150a	; 0x150a <factor_for_safe_speed>
    1abc:	3b 01       	movw	r6, r22
    1abe:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1ac0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ac4:	61 aa       	std	Z+49, r6	; 0x31
    1ac6:	72 aa       	std	Z+50, r7	; 0x32
    1ac8:	83 aa       	std	Z+51, r8	; 0x33
    1aca:	94 aa       	std	Z+52, r9	; 0x34
}
    1acc:	26 96       	adiw	r28, 0x06	; 6
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	bf 90       	pop	r11
    1aea:	af 90       	pop	r10
    1aec:	9f 90       	pop	r9
    1aee:	8f 90       	pop	r8
    1af0:	7f 90       	pop	r7
    1af2:	6f 90       	pop	r6
    1af4:	5f 90       	pop	r5
    1af6:	4f 90       	pop	r4
    1af8:	3f 90       	pop	r3
    1afa:	2f 90       	pop	r2
    1afc:	08 95       	ret

00001afe <planner_reverse_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1afe:	ff 92       	push	r15
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1b08:	80 91 02 05 	lds	r24, 0x0502
    1b0c:	90 91 03 05 	lds	r25, 0x0503
    1b10:	f8 2e       	mov	r15, r24
    1b12:	c0 e0       	ldi	r28, 0x00	; 0
    1b14:	d0 e0       	ldi	r29, 0x00	; 0
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	12 c0       	rjmp	.+36     	; 0x1b40 <planner_reverse_pass+0x42>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    1b1c:	fa 94       	dec	r15
    if(block_index < 0) {
    1b1e:	f7 fe       	sbrs	r15, 7
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <planner_reverse_pass+0x28>
    1b22:	39 e0       	ldi	r19, 0x09	; 9
    1b24:	f3 2e       	mov	r15, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1b26:	8f 2d       	mov	r24, r15
    1b28:	99 e4       	ldi	r25, 0x49	; 73
    1b2a:	89 02       	muls	r24, r25
    1b2c:	80 01       	movw	r16, r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	08 5d       	subi	r16, 0xD8	; 216
    1b32:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1b34:	c8 01       	movw	r24, r16
    1b36:	be 01       	movw	r22, r28
    1b38:	0e 94 43 0c 	call	0x1886	; 0x1886 <planner_reverse_pass_kernel>
    1b3c:	ae 01       	movw	r20, r28
    1b3e:	e8 01       	movw	r28, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1b40:	20 91 04 05 	lds	r18, 0x0504
    1b44:	30 91 05 05 	lds	r19, 0x0505
    1b48:	8f 2d       	mov	r24, r15
    1b4a:	99 27       	eor	r25, r25
    1b4c:	87 fd       	sbrc	r24, 7
    1b4e:	90 95       	com	r25
    1b50:	82 17       	cp	r24, r18
    1b52:	93 07       	cpc	r25, r19
    1b54:	19 f7       	brne	.-58     	; 0x1b1c <planner_reverse_pass+0x1e>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	be 01       	movw	r22, r28
    1b5c:	0e 94 43 0c 	call	0x1886	; 0x1886 <planner_reverse_pass_kernel>
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	08 95       	ret

00001b6c <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1b6c:	2f 92       	push	r2
    1b6e:	3f 92       	push	r3
    1b70:	4f 92       	push	r4
    1b72:	5f 92       	push	r5
    1b74:	6f 92       	push	r6
    1b76:	7f 92       	push	r7
    1b78:	8f 92       	push	r8
    1b7a:	9f 92       	push	r9
    1b7c:	af 92       	push	r10
    1b7e:	bf 92       	push	r11
    1b80:	cf 92       	push	r12
    1b82:	df 92       	push	r13
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	62 97       	sbiw	r28, 0x12	; 18
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	9a 8b       	std	Y+18, r25	; 0x12
    1ba2:	89 8b       	std	Y+17, r24	; 0x11
    1ba4:	6a 01       	movw	r12, r20
    1ba6:	7b 01       	movw	r14, r22
    1ba8:	18 01       	movw	r2, r16
    1baa:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1bac:	fc 01       	movw	r30, r24
    1bae:	65 89       	ldd	r22, Z+21	; 0x15
    1bb0:	76 89       	ldd	r23, Z+22	; 0x16
    1bb2:	87 89       	ldd	r24, Z+23	; 0x17
    1bb4:	90 8d       	ldd	r25, Z+24	; 0x18
    1bb6:	0e 94 22 22 	call	0x4444	; 0x4444 <__floatunsisf>
    1bba:	3b 01       	movw	r6, r22
    1bbc:	4c 01       	movw	r8, r24
    1bbe:	a7 01       	movw	r20, r14
    1bc0:	96 01       	movw	r18, r12
    1bc2:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1bc6:	0e 94 72 21 	call	0x42e4	; 0x42e4 <ceil>
    1bca:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
    1bce:	7b 01       	movw	r14, r22
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	e9 89       	ldd	r30, Y+17	; 0x11
    1bd4:	fa 89       	ldd	r31, Y+18	; 0x12
    1bd6:	65 ab       	std	Z+53, r22	; 0x35
    1bd8:	76 ab       	std	Z+54, r23	; 0x36
    1bda:	87 ab       	std	Z+55, r24	; 0x37
    1bdc:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1bde:	c4 01       	movw	r24, r8
    1be0:	b3 01       	movw	r22, r6
    1be2:	a2 01       	movw	r20, r4
    1be4:	91 01       	movw	r18, r2
    1be6:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1bea:	0e 94 72 21 	call	0x42e4	; 0x42e4 <ceil>
    1bee:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
    1bf2:	1b 01       	movw	r2, r22
    1bf4:	2c 01       	movw	r4, r24
    1bf6:	e9 89       	ldd	r30, Y+17	; 0x11
    1bf8:	fa 89       	ldd	r31, Y+18	; 0x12
    1bfa:	61 af       	std	Z+57, r22	; 0x39
    1bfc:	72 af       	std	Z+58, r23	; 0x3a
    1bfe:	83 af       	std	Z+59, r24	; 0x3b
    1c00:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1c02:	fd 96       	adiw	r30, 0x3d	; 61
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	fd 97       	sbiw	r30, 0x3d	; 61
    1c0e:	fa 8b       	std	Y+18, r31	; 0x12
    1c10:	e9 8b       	std	Y+17, r30	; 0x11
    1c12:	28 e2       	ldi	r18, 0x28	; 40
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	0e 94 90 24 	call	0x4920	; 0x4920 <__mulsi3>
    1c1e:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e7       	ldi	r20, 0x70	; 112
    1c28:	52 e4       	ldi	r21, 0x42	; 66
    1c2a:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1c2e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
    1c32:	5b 01       	movw	r10, r22
    1c34:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1c36:	c8 01       	movw	r24, r16
    1c38:	b7 01       	movw	r22, r14
    1c3a:	0e 94 22 22 	call	0x4444	; 0x4444 <__floatunsisf>
    1c3e:	7b 01       	movw	r14, r22
    1c40:	8c 01       	movw	r16, r24
    1c42:	c6 01       	movw	r24, r12
    1c44:	b5 01       	movw	r22, r10
    1c46:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    1c4a:	6d 83       	std	Y+5, r22	; 0x05
    1c4c:	7e 83       	std	Y+6, r23	; 0x06
    1c4e:	8f 83       	std	Y+7, r24	; 0x07
    1c50:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1c52:	c4 01       	movw	r24, r8
    1c54:	b3 01       	movw	r22, r6
    1c56:	a4 01       	movw	r20, r8
    1c58:	93 01       	movw	r18, r6
    1c5a:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1c5e:	3b 01       	movw	r6, r22
    1c60:	4c 01       	movw	r8, r24
    1c62:	c8 01       	movw	r24, r16
    1c64:	b7 01       	movw	r22, r14
    1c66:	a8 01       	movw	r20, r16
    1c68:	97 01       	movw	r18, r14
    1c6a:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1c6e:	69 87       	std	Y+9, r22	; 0x09
    1c70:	7a 87       	std	Y+10, r23	; 0x0a
    1c72:	8b 87       	std	Y+11, r24	; 0x0b
    1c74:	9c 87       	std	Y+12, r25	; 0x0c
    1c76:	6d 81       	ldd	r22, Y+5	; 0x05
    1c78:	7e 81       	ldd	r23, Y+6	; 0x06
    1c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7c:	98 85       	ldd	r25, Y+8	; 0x08
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1c86:	6d 87       	std	Y+13, r22	; 0x0d
    1c88:	7e 87       	std	Y+14, r23	; 0x0e
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
    1c8c:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1c8e:	c4 01       	movw	r24, r8
    1c90:	b3 01       	movw	r22, r6
    1c92:	29 85       	ldd	r18, Y+9	; 0x09
    1c94:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c96:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c98:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c9a:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__subsf3>
    1c9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ca0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ca2:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ca4:	58 89       	ldd	r21, Y+16	; 0x10
    1ca6:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    1caa:	0e 94 72 21 	call	0x42e4	; 0x42e4 <ceil>
    1cae:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
    1cb2:	69 83       	std	Y+1, r22	; 0x01
    1cb4:	7a 83       	std	Y+2, r23	; 0x02
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1cba:	c2 01       	movw	r24, r4
    1cbc:	b1 01       	movw	r22, r2
    1cbe:	0e 94 22 22 	call	0x4444	; 0x4444 <__floatunsisf>
    1cc2:	9b 01       	movw	r18, r22
    1cc4:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1cc6:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1cca:	1b 01       	movw	r2, r22
    1ccc:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1cce:	a4 01       	movw	r20, r8
    1cd0:	93 01       	movw	r18, r6
    1cd2:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__subsf3>
    1cd6:	7b 01       	movw	r14, r22
    1cd8:	8c 01       	movw	r16, r24
    1cda:	d0 94       	com	r13
    1cdc:	c0 94       	com	r12
    1cde:	b0 94       	com	r11
    1ce0:	a0 94       	com	r10
    1ce2:	a1 1c       	adc	r10, r1
    1ce4:	b1 1c       	adc	r11, r1
    1ce6:	c1 1c       	adc	r12, r1
    1ce8:	d1 1c       	adc	r13, r1
    1cea:	c6 01       	movw	r24, r12
    1cec:	b5 01       	movw	r22, r10
    1cee:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    1cf2:	9b 01       	movw	r18, r22
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	c8 01       	movw	r24, r16
    1d00:	b7 01       	movw	r22, r14
    1d02:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    1d06:	0e 94 5f 22 	call	0x44be	; 0x44be <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1d0a:	e9 89       	ldd	r30, Y+17	; 0x11
    1d0c:	fa 89       	ldd	r31, Y+18	; 0x12
    1d0e:	a1 88       	ldd	r10, Z+17	; 0x11
    1d10:	b2 88       	ldd	r11, Z+18	; 0x12
    1d12:	c3 88       	ldd	r12, Z+19	; 0x13
    1d14:	d4 88       	ldd	r13, Z+20	; 0x14
    1d16:	86 01       	movw	r16, r12
    1d18:	75 01       	movw	r14, r10
    1d1a:	29 81       	ldd	r18, Y+1	; 0x01
    1d1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d1e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d20:	5c 81       	ldd	r21, Y+4	; 0x04
    1d22:	e2 1a       	sub	r14, r18
    1d24:	f3 0a       	sbc	r15, r19
    1d26:	04 0b       	sbc	r16, r20
    1d28:	15 0b       	sbc	r17, r21
    1d2a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
    1d2e:	a8 01       	movw	r20, r16
    1d30:	97 01       	movw	r18, r14
    1d32:	26 1b       	sub	r18, r22
    1d34:	37 0b       	sbc	r19, r23
    1d36:	48 0b       	sbc	r20, r24
    1d38:	59 0b       	sbc	r21, r25
    1d3a:	da 01       	movw	r26, r20
    1d3c:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1d3e:	57 ff       	sbrs	r21, 7
    1d40:	34 c0       	rjmp	.+104    	; 0x1daa <calculate_trapezoid_for_block+0x23e>
    accelerate_steps = ceil(
    1d42:	c6 01       	movw	r24, r12
    1d44:	b5 01       	movw	r22, r10
    1d46:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    1d4a:	9b 01       	movw	r18, r22
    1d4c:	ac 01       	movw	r20, r24
    1d4e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d50:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d54:	98 89       	ldd	r25, Y+16	; 0x10
    1d56:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1d5a:	29 85       	ldd	r18, Y+9	; 0x09
    1d5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d60:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d62:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__subsf3>
    1d66:	a2 01       	movw	r20, r4
    1d68:	91 01       	movw	r18, r2
    1d6a:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    1d6e:	7b 01       	movw	r14, r22
    1d70:	8c 01       	movw	r16, r24
    1d72:	6d 81       	ldd	r22, Y+5	; 0x05
    1d74:	7e 81       	ldd	r23, Y+6	; 0x06
    1d76:	8f 81       	ldd	r24, Y+7	; 0x07
    1d78:	98 85       	ldd	r25, Y+8	; 0x08
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	50 e4       	ldi	r21, 0x40	; 64
    1d82:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1d86:	9b 01       	movw	r18, r22
    1d88:	ac 01       	movw	r20, r24
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	b7 01       	movw	r22, r14
    1d8e:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    1d92:	0e 94 72 21 	call	0x42e4	; 0x42e4 <ceil>
    1d96:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
    1d9a:	69 83       	std	Y+1, r22	; 0x01
    1d9c:	7a 83       	std	Y+2, r23	; 0x02
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 e0       	ldi	r26, 0x00	; 0
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1daa:	49 89       	ldd	r20, Y+17	; 0x11
    1dac:	5a 89       	ldd	r21, Y+18	; 0x12
    1dae:	4f 5b       	subi	r20, 0xBF	; 191
    1db0:	5f 4f       	sbci	r21, 0xFF	; 255
    1db2:	fa 01       	movw	r30, r20
    1db4:	29 81       	ldd	r18, Y+1	; 0x01
    1db6:	3a 81       	ldd	r19, Y+2	; 0x02
    1db8:	4b 81       	ldd	r20, Y+3	; 0x03
    1dba:	5c 81       	ldd	r21, Y+4	; 0x04
    1dbc:	21 93       	st	Z+, r18
    1dbe:	31 93       	st	Z+, r19
    1dc0:	41 93       	st	Z+, r20
    1dc2:	51 93       	st	Z+, r21
    1dc4:	fa 8b       	std	Y+18, r31	; 0x12
    1dc6:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1dc8:	82 0f       	add	r24, r18
    1dca:	93 1f       	adc	r25, r19
    1dcc:	a4 1f       	adc	r26, r20
    1dce:	b5 1f       	adc	r27, r21
    1dd0:	80 83       	st	Z, r24
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	a2 83       	std	Z+2, r26	; 0x02
    1dd6:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1dd8:	62 96       	adiw	r28, 0x12	; 18
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	df 90       	pop	r13
    1df2:	cf 90       	pop	r12
    1df4:	bf 90       	pop	r11
    1df6:	af 90       	pop	r10
    1df8:	9f 90       	pop	r9
    1dfa:	8f 90       	pop	r8
    1dfc:	7f 90       	pop	r7
    1dfe:	6f 90       	pop	r6
    1e00:	5f 90       	pop	r5
    1e02:	4f 90       	pop	r4
    1e04:	3f 90       	pop	r3
    1e06:	2f 90       	pop	r2
    1e08:	08 95       	ret

00001e0a <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1e1a:	80 91 04 05 	lds	r24, 0x0504
    1e1e:	90 91 05 05 	lds	r25, 0x0505
    1e22:	28 2f       	mov	r18, r24
    1e24:	c0 e0       	ldi	r28, 0x00	; 0
    1e26:	d0 e0       	ldi	r29, 0x00	; 0
    1e28:	1e c0       	rjmp	.+60     	; 0x1e66 <planner_recalculate_trapezoids+0x5c>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    1e2a:	89 e4       	ldi	r24, 0x49	; 73
    1e2c:	28 02       	muls	r18, r24
    1e2e:	70 01       	movw	r14, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	e8 e2       	ldi	r30, 0x28	; 40
    1e34:	f2 e0       	ldi	r31, 0x02	; 2
    1e36:	ee 0e       	add	r14, r30
    1e38:	ff 1e       	adc	r15, r31
    if (current) {
    1e3a:	20 97       	sbiw	r28, 0x00	; 0
    1e3c:	61 f0       	breq	.+24     	; 0x1e56 <planner_recalculate_trapezoids+0x4c>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1e3e:	49 a9       	ldd	r20, Y+49	; 0x31
    1e40:	5a a9       	ldd	r21, Y+50	; 0x32
    1e42:	6b a9       	ldd	r22, Y+51	; 0x33
    1e44:	7c a9       	ldd	r23, Y+52	; 0x34
    1e46:	f7 01       	movw	r30, r14
    1e48:	01 a9       	ldd	r16, Z+49	; 0x31
    1e4a:	12 a9       	ldd	r17, Z+50	; 0x32
    1e4c:	23 a9       	ldd	r18, Z+51	; 0x33
    1e4e:	34 a9       	ldd	r19, Z+52	; 0x34
    1e50:	ce 01       	movw	r24, r28
    1e52:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1e56:	c6 01       	movw	r24, r12
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	6a e0       	ldi	r22, 0x0A	; 10
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	0e 94 af 24 	call	0x495e	; 0x495e <__divmodhi4>
    1e62:	28 2f       	mov	r18, r24
    1e64:	e7 01       	movw	r28, r14
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1e66:	c2 2e       	mov	r12, r18
    1e68:	dd 24       	eor	r13, r13
    1e6a:	c7 fc       	sbrc	r12, 7
    1e6c:	d0 94       	com	r13
    1e6e:	80 91 02 05 	lds	r24, 0x0502
    1e72:	90 91 03 05 	lds	r25, 0x0503
    1e76:	c8 16       	cp	r12, r24
    1e78:	d9 06       	cpc	r13, r25
    1e7a:	b9 f6       	brne	.-82     	; 0x1e2a <planner_recalculate_trapezoids+0x20>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	0e 94 85 0a 	call	0x150a	; 0x150a <factor_for_safe_speed>
    1e82:	8b 01       	movw	r16, r22
    1e84:	9c 01       	movw	r18, r24
    1e86:	49 a9       	ldd	r20, Y+49	; 0x31
    1e88:	5a a9       	ldd	r21, Y+50	; 0x32
    1e8a:	6b a9       	ldd	r22, Y+51	; 0x33
    1e8c:	7c a9       	ldd	r23, Y+52	; 0x34
    1e8e:	ce 01       	movw	r24, r28
    1e90:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <calculate_trapezoid_for_block>
}
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	cf 90       	pop	r12
    1ea4:	08 95       	ret

00001ea6 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    1ea6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <planner_reverse_pass>
  planner_forward_pass();
    1eaa:	0e 94 56 0b 	call	0x16ac	; 0x16ac <planner_forward_pass>
  planner_recalculate_trapezoids();
    1eae:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <planner_recalculate_trapezoids>
}
    1eb2:	08 95       	ret

00001eb4 <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    1eb4:	2f 92       	push	r2
    1eb6:	3f 92       	push	r3
    1eb8:	4f 92       	push	r4
    1eba:	5f 92       	push	r5
    1ebc:	6f 92       	push	r6
    1ebe:	7f 92       	push	r7
    1ec0:	8f 92       	push	r8
    1ec2:	9f 92       	push	r9
    1ec4:	af 92       	push	r10
    1ec6:	bf 92       	push	r11
    1ec8:	cf 92       	push	r12
    1eca:	df 92       	push	r13
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	e4 97       	sbiw	r28, 0x34	; 52
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	3b 01       	movw	r6, r22
    1eea:	4c 01       	movw	r8, r24
    1eec:	2f a3       	std	Y+39, r18	; 0x27
    1eee:	38 a7       	std	Y+40, r19	; 0x28
    1ef0:	49 a7       	std	Y+41, r20	; 0x29
    1ef2:	5a a7       	std	Y+42, r21	; 0x2a
    1ef4:	eb a6       	std	Y+43, r14	; 0x2b
    1ef6:	fc a6       	std	Y+44, r15	; 0x2c
    1ef8:	0d a7       	std	Y+45, r16	; 0x2d
    1efa:	1e a7       	std	Y+46, r17	; 0x2e
    1efc:	af a6       	std	Y+47, r10	; 0x2f
    1efe:	b8 aa       	std	Y+48, r11	; 0x30
    1f00:	c9 aa       	std	Y+49, r12	; 0x31
    1f02:	da aa       	std	Y+50, r13	; 0x32
	printPgmString(PSTR("z = "));
	printFloat( z );
	printPgmString(PSTR("\r\n"));
#endif
  
  if( gHomed == FALSE ) 
    1f04:	80 91 4b 05 	lds	r24, 0x054B
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <plan_buffer_line+0x5a>
    1f0c:	75 c3       	rjmp	.+1770   	; 0x25f8 <__stack+0x3f9>
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1f0e:	c4 01       	movw	r24, r8
    1f10:	b3 01       	movw	r22, r6
    1f12:	20 91 75 06 	lds	r18, 0x0675
    1f16:	30 91 76 06 	lds	r19, 0x0676
    1f1a:	40 91 77 06 	lds	r20, 0x0677
    1f1e:	50 91 78 06 	lds	r21, 0x0678
    1f22:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    1f26:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    1f2a:	7b 01       	movw	r14, r22
    1f2c:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1f2e:	20 91 79 06 	lds	r18, 0x0679
    1f32:	30 91 7a 06 	lds	r19, 0x067A
    1f36:	40 91 7b 06 	lds	r20, 0x067B
    1f3a:	50 91 7c 06 	lds	r21, 0x067C
    1f3e:	2b a3       	std	Y+35, r18	; 0x23
    1f40:	3c a3       	std	Y+36, r19	; 0x24
    1f42:	4d a3       	std	Y+37, r20	; 0x25
    1f44:	5e a3       	std	Y+38, r21	; 0x26
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1f46:	20 90 7d 06 	lds	r2, 0x067D
    1f4a:	30 90 7e 06 	lds	r3, 0x067E
    1f4e:	40 90 7f 06 	lds	r4, 0x067F
    1f52:	50 90 80 06 	lds	r5, 0x0680
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1f56:	a0 90 81 06 	lds	r10, 0x0681
    1f5a:	b0 90 82 06 	lds	r11, 0x0682
    1f5e:	c0 90 83 06 	lds	r12, 0x0683
    1f62:	d0 90 84 06 	lds	r13, 0x0684
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    1f66:	80 91 02 05 	lds	r24, 0x0502
    1f6a:	90 91 03 05 	lds	r25, 0x0503
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	6a e0       	ldi	r22, 0x0A	; 10
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	0e 94 af 24 	call	0x495e	; 0x495e <__divmodhi4>
    1f78:	8b ab       	std	Y+51, r24	; 0x33
    1f7a:	9c ab       	std	Y+52, r25	; 0x34
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <plan_buffer_line+0xd8>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    1f7e:	83 b7       	in	r24, 0x33	; 51
    1f80:	81 60       	ori	r24, 0x01	; 1
    1f82:	83 bf       	out	0x33, r24	; 51
    1f84:	88 95       	sleep
    1f86:	83 b7       	in	r24, 0x33	; 51
    1f88:	8e 7f       	andi	r24, 0xFE	; 254
    1f8a:	83 bf       	out	0x33, r24	; 51
    1f8c:	80 91 04 05 	lds	r24, 0x0504
    1f90:	90 91 05 05 	lds	r25, 0x0505
    1f94:	4b a9       	ldd	r20, Y+51	; 0x33
    1f96:	5c a9       	ldd	r21, Y+52	; 0x34
    1f98:	84 17       	cp	r24, r20
    1f9a:	95 07       	cpc	r25, r21
    1f9c:	81 f3       	breq	.-32     	; 0x1f7e <plan_buffer_line+0xca>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1f9e:	20 91 02 05 	lds	r18, 0x0502
    1fa2:	30 91 03 05 	lds	r19, 0x0503
    1fa6:	89 e4       	ldi	r24, 0x49	; 73
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	28 9f       	mul	r18, r24
    1fac:	d0 01       	movw	r26, r0
    1fae:	29 9f       	mul	r18, r25
    1fb0:	b0 0d       	add	r27, r0
    1fb2:	38 9f       	mul	r19, r24
    1fb4:	b0 0d       	add	r27, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	a8 5d       	subi	r26, 0xD8	; 216
    1fba:	bd 4f       	sbci	r27, 0xFD	; 253
    1fbc:	ba a3       	std	Y+34, r27	; 0x22
    1fbe:	a9 a3       	std	Y+33, r26	; 0x21
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1fc0:	80 91 06 05 	lds	r24, 0x0506
    1fc4:	90 91 07 05 	lds	r25, 0x0507
    1fc8:	a0 91 08 05 	lds	r26, 0x0508
    1fcc:	b0 91 09 05 	lds	r27, 0x0509
    1fd0:	37 01       	movw	r6, r14
    1fd2:	48 01       	movw	r8, r16
    1fd4:	68 1a       	sub	r6, r24
    1fd6:	79 0a       	sbc	r7, r25
    1fd8:	8a 0a       	sbc	r8, r26
    1fda:	9b 0a       	sbc	r9, r27
    1fdc:	97 fe       	sbrs	r9, 7
    1fde:	08 c0       	rjmp	.+16     	; 0x1ff0 <plan_buffer_line+0x13c>
    1fe0:	90 94       	com	r9
    1fe2:	80 94       	com	r8
    1fe4:	70 94       	com	r7
    1fe6:	60 94       	com	r6
    1fe8:	61 1c       	adc	r6, r1
    1fea:	71 1c       	adc	r7, r1
    1fec:	81 1c       	adc	r8, r1
    1fee:	91 1c       	adc	r9, r1
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1ff0:	6f a5       	ldd	r22, Y+47	; 0x2f
    1ff2:	78 a9       	ldd	r23, Y+48	; 0x30
    1ff4:	89 a9       	ldd	r24, Y+49	; 0x31
    1ff6:	9a a9       	ldd	r25, Y+50	; 0x32
    1ff8:	a6 01       	movw	r20, r12
    1ffa:	95 01       	movw	r18, r10
    1ffc:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    2000:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    2004:	6d 87       	std	Y+13, r22	; 0x0d
    2006:	7e 87       	std	Y+14, r23	; 0x0e
    2008:	8f 87       	std	Y+15, r24	; 0x0f
    200a:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    200c:	6b a5       	ldd	r22, Y+43	; 0x2b
    200e:	7c a5       	ldd	r23, Y+44	; 0x2c
    2010:	8d a5       	ldd	r24, Y+45	; 0x2d
    2012:	9e a5       	ldd	r25, Y+46	; 0x2e
    2014:	a2 01       	movw	r20, r4
    2016:	91 01       	movw	r18, r2
    2018:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    201c:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    2020:	69 87       	std	Y+9, r22	; 0x09
    2022:	7a 87       	std	Y+10, r23	; 0x0a
    2024:	8b 87       	std	Y+11, r24	; 0x0b
    2026:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2028:	6f a1       	ldd	r22, Y+39	; 0x27
    202a:	78 a5       	ldd	r23, Y+40	; 0x28
    202c:	89 a5       	ldd	r24, Y+41	; 0x29
    202e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2030:	2b a1       	ldd	r18, Y+35	; 0x23
    2032:	3c a1       	ldd	r19, Y+36	; 0x24
    2034:	4d a1       	ldd	r20, Y+37	; 0x25
    2036:	5e a1       	ldd	r21, Y+38	; 0x26
    2038:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    203c:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    2040:	6d 83       	std	Y+5, r22	; 0x05
    2042:	7e 83       	std	Y+6, r23	; 0x06
    2044:	8f 83       	std	Y+7, r24	; 0x07
    2046:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    2048:	e9 82       	std	Y+1, r14	; 0x01
    204a:	fa 82       	std	Y+2, r15	; 0x02
    204c:	0b 83       	std	Y+3, r16	; 0x03
    204e:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2050:	e9 a1       	ldd	r30, Y+33	; 0x21
    2052:	fa a1       	ldd	r31, Y+34	; 0x22
    2054:	60 82       	st	Z, r6
    2056:	71 82       	std	Z+1, r7	; 0x01
    2058:	82 82       	std	Z+2, r8	; 0x02
    205a:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    205c:	2d 81       	ldd	r18, Y+5	; 0x05
    205e:	3e 81       	ldd	r19, Y+6	; 0x06
    2060:	4f 81       	ldd	r20, Y+7	; 0x07
    2062:	58 85       	ldd	r21, Y+8	; 0x08
    2064:	80 91 0a 05 	lds	r24, 0x050A
    2068:	90 91 0b 05 	lds	r25, 0x050B
    206c:	a0 91 0c 05 	lds	r26, 0x050C
    2070:	b0 91 0d 05 	lds	r27, 0x050D
    2074:	28 1b       	sub	r18, r24
    2076:	39 0b       	sbc	r19, r25
    2078:	4a 0b       	sbc	r20, r26
    207a:	5b 0b       	sbc	r21, r27
    207c:	57 ff       	sbrs	r21, 7
    207e:	07 c0       	rjmp	.+14     	; 0x208e <plan_buffer_line+0x1da>
    2080:	50 95       	com	r21
    2082:	40 95       	com	r20
    2084:	30 95       	com	r19
    2086:	21 95       	neg	r18
    2088:	3f 4f       	sbci	r19, 0xFF	; 255
    208a:	4f 4f       	sbci	r20, 0xFF	; 255
    208c:	5f 4f       	sbci	r21, 0xFF	; 255
    208e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2090:	ba a1       	ldd	r27, Y+34	; 0x22
    2092:	14 96       	adiw	r26, 0x04	; 4
    2094:	2d 93       	st	X+, r18
    2096:	3d 93       	st	X+, r19
    2098:	4d 93       	st	X+, r20
    209a:	5c 93       	st	X, r21
    209c:	17 97       	sbiw	r26, 0x07	; 7
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    209e:	29 85       	ldd	r18, Y+9	; 0x09
    20a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    20a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    20a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    20a6:	80 91 0e 05 	lds	r24, 0x050E
    20aa:	90 91 0f 05 	lds	r25, 0x050F
    20ae:	a0 91 10 05 	lds	r26, 0x0510
    20b2:	b0 91 11 05 	lds	r27, 0x0511
    20b6:	28 1b       	sub	r18, r24
    20b8:	39 0b       	sbc	r19, r25
    20ba:	4a 0b       	sbc	r20, r26
    20bc:	5b 0b       	sbc	r21, r27
    20be:	57 ff       	sbrs	r21, 7
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <plan_buffer_line+0x21c>
    20c2:	50 95       	com	r21
    20c4:	40 95       	com	r20
    20c6:	30 95       	com	r19
    20c8:	21 95       	neg	r18
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	4f 4f       	sbci	r20, 0xFF	; 255
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255
    20d0:	e9 a1       	ldd	r30, Y+33	; 0x21
    20d2:	fa a1       	ldd	r31, Y+34	; 0x22
    20d4:	20 87       	std	Z+8, r18	; 0x08
    20d6:	31 87       	std	Z+9, r19	; 0x09
    20d8:	42 87       	std	Z+10, r20	; 0x0a
    20da:	53 87       	std	Z+11, r21	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    20dc:	a0 90 12 05 	lds	r10, 0x0512
    20e0:	b0 90 13 05 	lds	r11, 0x0513
    20e4:	c0 90 14 05 	lds	r12, 0x0514
    20e8:	d0 90 15 05 	lds	r13, 0x0515
    20ec:	2d 85       	ldd	r18, Y+13	; 0x0d
    20ee:	3e 85       	ldd	r19, Y+14	; 0x0e
    20f0:	4f 85       	ldd	r20, Y+15	; 0x0f
    20f2:	58 89       	ldd	r21, Y+16	; 0x10
    20f4:	2a 19       	sub	r18, r10
    20f6:	3b 09       	sbc	r19, r11
    20f8:	4c 09       	sbc	r20, r12
    20fa:	5d 09       	sbc	r21, r13
    20fc:	57 ff       	sbrs	r21, 7
    20fe:	07 c0       	rjmp	.+14     	; 0x210e <plan_buffer_line+0x25a>
    2100:	50 95       	com	r21
    2102:	40 95       	com	r20
    2104:	30 95       	com	r19
    2106:	21 95       	neg	r18
    2108:	3f 4f       	sbci	r19, 0xFF	; 255
    210a:	4f 4f       	sbci	r20, 0xFF	; 255
    210c:	5f 4f       	sbci	r21, 0xFF	; 255
    210e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2110:	ba a1       	ldd	r27, Y+34	; 0x22
    2112:	1c 96       	adiw	r26, 0x0c	; 12
    2114:	2d 93       	st	X+, r18
    2116:	3d 93       	st	X+, r19
    2118:	4d 93       	st	X+, r20
    211a:	5c 93       	st	X, r21
    211c:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    211e:	18 96       	adiw	r26, 0x08	; 8
    2120:	ed 90       	ld	r14, X+
    2122:	fd 90       	ld	r15, X+
    2124:	0d 91       	ld	r16, X+
    2126:	1c 91       	ld	r17, X
    2128:	1b 97       	sbiw	r26, 0x0b	; 11
    212a:	fd 01       	movw	r30, r26
    212c:	84 81       	ldd	r24, Z+4	; 0x04
    212e:	95 81       	ldd	r25, Z+5	; 0x05
    2130:	a6 81       	ldd	r26, Z+6	; 0x06
    2132:	b7 81       	ldd	r27, Z+7	; 0x07
    2134:	8e 15       	cp	r24, r14
    2136:	9f 05       	cpc	r25, r15
    2138:	a0 07       	cpc	r26, r16
    213a:	b1 07       	cpc	r27, r17
    213c:	10 f4       	brcc	.+4      	; 0x2142 <plan_buffer_line+0x28e>
    213e:	d8 01       	movw	r26, r16
    2140:	c7 01       	movw	r24, r14
    2142:	e9 a1       	ldd	r30, Y+33	; 0x21
    2144:	fa a1       	ldd	r31, Y+34	; 0x22
    2146:	e0 80       	ld	r14, Z
    2148:	f1 80       	ldd	r15, Z+1	; 0x01
    214a:	02 81       	ldd	r16, Z+2	; 0x02
    214c:	13 81       	ldd	r17, Z+3	; 0x03
    214e:	8e 15       	cp	r24, r14
    2150:	9f 05       	cpc	r25, r15
    2152:	a0 07       	cpc	r26, r16
    2154:	b1 07       	cpc	r27, r17
    2156:	10 f4       	brcc	.+4      	; 0x215c <plan_buffer_line+0x2a8>
    2158:	d8 01       	movw	r26, r16
    215a:	c7 01       	movw	r24, r14
    215c:	82 17       	cp	r24, r18
    215e:	93 07       	cpc	r25, r19
    2160:	a4 07       	cpc	r26, r20
    2162:	b5 07       	cpc	r27, r21
    2164:	10 f4       	brcc	.+4      	; 0x216a <plan_buffer_line+0x2b6>
    2166:	da 01       	movw	r26, r20
    2168:	c9 01       	movw	r24, r18
    216a:	e9 a1       	ldd	r30, Y+33	; 0x21
    216c:	fa a1       	ldd	r31, Y+34	; 0x22
    216e:	81 8b       	std	Z+17, r24	; 0x11
    2170:	92 8b       	std	Z+18, r25	; 0x12
    2172:	a3 8b       	std	Z+19, r26	; 0x13
    2174:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	a1 05       	cpc	r26, r1
    217a:	b1 05       	cpc	r27, r1
    217c:	21 f4       	brne	.+8      	; 0x2186 <plan_buffer_line+0x2d2>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
#endif

// needs for ACK
 	serialWrite('X');
    217e:	88 e5       	ldi	r24, 0x58	; 88
    2180:	0e 94 26 1b 	call	0x364c	; 0x364c <serialWrite>
    2184:	39 c2       	rjmp	.+1138   	; 0x25f8 <__stack+0x3f9>
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2186:	69 81       	ldd	r22, Y+1	; 0x01
    2188:	7a 81       	ldd	r23, Y+2	; 0x02
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	20 91 06 05 	lds	r18, 0x0506
    2192:	30 91 07 05 	lds	r19, 0x0507
    2196:	40 91 08 05 	lds	r20, 0x0508
    219a:	50 91 09 05 	lds	r21, 0x0509
    219e:	62 1b       	sub	r22, r18
    21a0:	73 0b       	sbc	r23, r19
    21a2:	84 0b       	sbc	r24, r20
    21a4:	95 0b       	sbc	r25, r21
    21a6:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    21aa:	20 91 75 06 	lds	r18, 0x0675
    21ae:	30 91 76 06 	lds	r19, 0x0676
    21b2:	40 91 77 06 	lds	r20, 0x0677
    21b6:	50 91 78 06 	lds	r21, 0x0678
    21ba:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    21be:	6d 8f       	std	Y+29, r22	; 0x1d
    21c0:	7e 8f       	std	Y+30, r23	; 0x1e
    21c2:	8f 8f       	std	Y+31, r24	; 0x1f
    21c4:	98 a3       	std	Y+32, r25	; 0x20
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    21c6:	6d 81       	ldd	r22, Y+5	; 0x05
    21c8:	7e 81       	ldd	r23, Y+6	; 0x06
    21ca:	8f 81       	ldd	r24, Y+7	; 0x07
    21cc:	98 85       	ldd	r25, Y+8	; 0x08
    21ce:	20 91 0a 05 	lds	r18, 0x050A
    21d2:	30 91 0b 05 	lds	r19, 0x050B
    21d6:	40 91 0c 05 	lds	r20, 0x050C
    21da:	50 91 0d 05 	lds	r21, 0x050D
    21de:	62 1b       	sub	r22, r18
    21e0:	73 0b       	sbc	r23, r19
    21e2:	84 0b       	sbc	r24, r20
    21e4:	95 0b       	sbc	r25, r21
    21e6:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    21ea:	20 91 79 06 	lds	r18, 0x0679
    21ee:	30 91 7a 06 	lds	r19, 0x067A
    21f2:	40 91 7b 06 	lds	r20, 0x067B
    21f6:	50 91 7c 06 	lds	r21, 0x067C
    21fa:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    21fe:	69 8f       	std	Y+25, r22	; 0x19
    2200:	7a 8f       	std	Y+26, r23	; 0x1a
    2202:	8b 8f       	std	Y+27, r24	; 0x1b
    2204:	9c 8f       	std	Y+28, r25	; 0x1c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    2206:	69 85       	ldd	r22, Y+9	; 0x09
    2208:	7a 85       	ldd	r23, Y+10	; 0x0a
    220a:	8b 85       	ldd	r24, Y+11	; 0x0b
    220c:	9c 85       	ldd	r25, Y+12	; 0x0c
    220e:	20 91 0e 05 	lds	r18, 0x050E
    2212:	30 91 0f 05 	lds	r19, 0x050F
    2216:	40 91 10 05 	lds	r20, 0x0510
    221a:	50 91 11 05 	lds	r21, 0x0511
    221e:	62 1b       	sub	r22, r18
    2220:	73 0b       	sbc	r23, r19
    2222:	84 0b       	sbc	r24, r20
    2224:	95 0b       	sbc	r25, r21
    2226:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    222a:	20 91 7d 06 	lds	r18, 0x067D
    222e:	30 91 7e 06 	lds	r19, 0x067E
    2232:	40 91 7f 06 	lds	r20, 0x067F
    2236:	50 91 80 06 	lds	r21, 0x0680
    223a:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    223e:	6d 8b       	std	Y+21, r22	; 0x15
    2240:	7e 8b       	std	Y+22, r23	; 0x16
    2242:	8f 8b       	std	Y+23, r24	; 0x17
    2244:	98 8f       	std	Y+24, r25	; 0x18
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2246:	6d 85       	ldd	r22, Y+13	; 0x0d
    2248:	7e 85       	ldd	r23, Y+14	; 0x0e
    224a:	8f 85       	ldd	r24, Y+15	; 0x0f
    224c:	98 89       	ldd	r25, Y+16	; 0x10
    224e:	6a 19       	sub	r22, r10
    2250:	7b 09       	sbc	r23, r11
    2252:	8c 09       	sbc	r24, r12
    2254:	9d 09       	sbc	r25, r13
    2256:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    225a:	20 91 81 06 	lds	r18, 0x0681
    225e:	30 91 82 06 	lds	r19, 0x0682
    2262:	40 91 83 06 	lds	r20, 0x0683
    2266:	50 91 84 06 	lds	r21, 0x0684
    226a:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    226e:	69 8b       	std	Y+17, r22	; 0x11
    2270:	7a 8b       	std	Y+18, r23	; 0x12
    2272:	8b 8b       	std	Y+19, r24	; 0x13
    2274:	9c 8b       	std	Y+20, r25	; 0x14
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    2276:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2278:	7e 8d       	ldd	r23, Y+30	; 0x1e
    227a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    227c:	98 a1       	ldd	r25, Y+32	; 0x20
    227e:	0e 94 7f 24 	call	0x48fe	; 0x48fe <square>
    2282:	3b 01       	movw	r6, r22
    2284:	4c 01       	movw	r8, r24
    2286:	69 8d       	ldd	r22, Y+25	; 0x19
    2288:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228e:	0e 94 7f 24 	call	0x48fe	; 0x48fe <square>
    2292:	7b 01       	movw	r14, r22
    2294:	8c 01       	movw	r16, r24
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7e 89       	ldd	r23, Y+22	; 0x16
    229a:	8f 89       	ldd	r24, Y+23	; 0x17
    229c:	98 8d       	ldd	r25, Y+24	; 0x18
    229e:	0e 94 7f 24 	call	0x48fe	; 0x48fe <square>
    22a2:	5b 01       	movw	r10, r22
    22a4:	6c 01       	movw	r12, r24
    22a6:	69 89       	ldd	r22, Y+17	; 0x11
    22a8:	7a 89       	ldd	r23, Y+18	; 0x12
    22aa:	8b 89       	ldd	r24, Y+19	; 0x13
    22ac:	9c 89       	ldd	r25, Y+20	; 0x14
    22ae:	0e 94 7f 24 	call	0x48fe	; 0x48fe <square>
    22b2:	1b 01       	movw	r2, r22
    22b4:	2c 01       	movw	r4, r24
    22b6:	c4 01       	movw	r24, r8
    22b8:	b3 01       	movw	r22, r6
    22ba:	a8 01       	movw	r20, r16
    22bc:	97 01       	movw	r18, r14
    22be:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    22c2:	a6 01       	movw	r20, r12
    22c4:	95 01       	movw	r18, r10
    22c6:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    22ca:	a2 01       	movw	r20, r4
    22cc:	91 01       	movw	r18, r2
    22ce:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__addsf3>
    22d2:	0e 94 41 24 	call	0x4882	; 0x4882 <sqrt>
    22d6:	9b 01       	movw	r18, r22
    22d8:	ac 01       	movw	r20, r24
    22da:	a9 a1       	ldd	r26, Y+33	; 0x21
    22dc:	ba a1       	ldd	r27, Y+34	; 0x22
    22de:	9d 96       	adiw	r26, 0x2d	; 45
    22e0:	6d 93       	st	X+, r22
    22e2:	7d 93       	st	X+, r23
    22e4:	8d 93       	st	X+, r24
    22e6:	9c 93       	st	X, r25
    22e8:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    22ea:	60 96       	adiw	r28, 0x10	; 16
    22ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    22ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    22f0:	60 97       	sbiw	r28, 0x10	; 16
    22f2:	89 2b       	or	r24, r25
    22f4:	89 f4       	brne	.+34     	; 0x2318 <__stack+0x119>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    22f6:	ca 01       	movw	r24, r20
    22f8:	b9 01       	movw	r22, r18
    22fa:	2e 96       	adiw	r28, 0x0e	; 14
    22fc:	2c ad       	ldd	r18, Y+60	; 0x3c
    22fe:	3d ad       	ldd	r19, Y+61	; 0x3d
    2300:	4e ad       	ldd	r20, Y+62	; 0x3e
    2302:	5f ad       	ldd	r21, Y+63	; 0x3f
    2304:	2e 97       	sbiw	r28, 0x0e	; 14
    2306:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	34 e2       	ldi	r19, 0x24	; 36
    230e:	44 e7       	ldi	r20, 0x74	; 116
    2310:	59 e4       	ldi	r21, 0x49	; 73
    2312:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    2316:	0c c0       	rjmp	.+24     	; 0x2330 <__stack+0x131>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2318:	60 ec       	ldi	r22, 0xC0	; 192
    231a:	71 ee       	ldi	r23, 0xE1	; 225
    231c:	84 e6       	ldi	r24, 0x64	; 100
    231e:	9c e4       	ldi	r25, 0x4C	; 76
    2320:	2e 96       	adiw	r28, 0x0e	; 14
    2322:	2c ad       	ldd	r18, Y+60	; 0x3c
    2324:	3d ad       	ldd	r19, Y+61	; 0x3d
    2326:	4e ad       	ldd	r20, Y+62	; 0x3e
    2328:	5f ad       	ldd	r21, Y+63	; 0x3f
    232a:	2e 97       	sbiw	r28, 0x0e	; 14
    232c:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    2330:	0e 94 57 23 	call	0x46ae	; 0x46ae <lround>
    2334:	ac 01       	movw	r20, r24
    2336:	cb 01       	movw	r24, r22
    2338:	da 01       	movw	r26, r20
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    233e:	0e 94 22 22 	call	0x4444	; 0x4444 <__floatunsisf>
    2342:	9b 01       	movw	r18, r22
    2344:	ac 01       	movw	r20, r24
    2346:	60 ec       	ldi	r22, 0xC0	; 192
    2348:	71 ee       	ldi	r23, 0xE1	; 225
    234a:	84 e6       	ldi	r24, 0x64	; 100
    234c:	9c e4       	ldi	r25, 0x4C	; 76
    234e:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    2352:	7b 01       	movw	r14, r22
    2354:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2356:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2358:	7e 8d       	ldd	r23, Y+30	; 0x1e
    235a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    235c:	98 a1       	ldd	r25, Y+32	; 0x20
    235e:	a8 01       	movw	r20, r16
    2360:	97 01       	movw	r18, r14
    2362:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    2366:	e9 a1       	ldd	r30, Y+33	; 0x21
    2368:	fa a1       	ldd	r31, Y+34	; 0x22
    236a:	61 8f       	std	Z+25, r22	; 0x19
    236c:	72 8f       	std	Z+26, r23	; 0x1a
    236e:	83 8f       	std	Z+27, r24	; 0x1b
    2370:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_y = delta_y_mm * multiplier;
    2372:	69 8d       	ldd	r22, Y+25	; 0x19
    2374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237a:	a8 01       	movw	r20, r16
    237c:	97 01       	movw	r18, r14
    237e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    2382:	a9 a1       	ldd	r26, Y+33	; 0x21
    2384:	ba a1       	ldd	r27, Y+34	; 0x22
    2386:	5d 96       	adiw	r26, 0x1d	; 29
    2388:	6d 93       	st	X+, r22
    238a:	7d 93       	st	X+, r23
    238c:	8d 93       	st	X+, r24
    238e:	9c 93       	st	X, r25
    2390:	90 97       	sbiw	r26, 0x20	; 32
  block->speed_z = delta_z_mm * multiplier;
    2392:	6d 89       	ldd	r22, Y+21	; 0x15
    2394:	7e 89       	ldd	r23, Y+22	; 0x16
    2396:	8f 89       	ldd	r24, Y+23	; 0x17
    2398:	98 8d       	ldd	r25, Y+24	; 0x18
    239a:	a8 01       	movw	r20, r16
    239c:	97 01       	movw	r18, r14
    239e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    23a2:	e9 a1       	ldd	r30, Y+33	; 0x21
    23a4:	fa a1       	ldd	r31, Y+34	; 0x22
    23a6:	61 a3       	std	Z+33, r22	; 0x21
    23a8:	72 a3       	std	Z+34, r23	; 0x22
    23aa:	83 a3       	std	Z+35, r24	; 0x23
    23ac:	94 a3       	std	Z+36, r25	; 0x24
  block->speed_c = delta_c_mm * multiplier;
    23ae:	69 89       	ldd	r22, Y+17	; 0x11
    23b0:	7a 89       	ldd	r23, Y+18	; 0x12
    23b2:	8b 89       	ldd	r24, Y+19	; 0x13
    23b4:	9c 89       	ldd	r25, Y+20	; 0x14
    23b6:	a8 01       	movw	r20, r16
    23b8:	97 01       	movw	r18, r14
    23ba:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    23be:	a9 a1       	ldd	r26, Y+33	; 0x21
    23c0:	ba a1       	ldd	r27, Y+34	; 0x22
    23c2:	95 96       	adiw	r26, 0x25	; 37
    23c4:	6d 93       	st	X+, r22
    23c6:	7d 93       	st	X+, r23
    23c8:	8d 93       	st	X+, r24
    23ca:	9c 93       	st	X, r25
    23cc:	98 97       	sbiw	r26, 0x28	; 40
  block->nominal_speed = block->millimeters * multiplier;
    23ce:	9d 96       	adiw	r26, 0x2d	; 45
    23d0:	6d 91       	ld	r22, X+
    23d2:	7d 91       	ld	r23, X+
    23d4:	8d 91       	ld	r24, X+
    23d6:	9c 91       	ld	r25, X
    23d8:	d0 97       	sbiw	r26, 0x30	; 48
    23da:	a8 01       	movw	r20, r16
    23dc:	97 01       	movw	r18, r14
    23de:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    23e2:	e9 a1       	ldd	r30, Y+33	; 0x21
    23e4:	fa a1       	ldd	r31, Y+34	; 0x22
    23e6:	61 a7       	std	Z+41, r22	; 0x29
    23e8:	72 a7       	std	Z+42, r23	; 0x2a
    23ea:	83 a7       	std	Z+43, r24	; 0x2b
    23ec:	94 a7       	std	Z+44, r25	; 0x2c
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    23ee:	61 89       	ldd	r22, Z+17	; 0x11
    23f0:	72 89       	ldd	r23, Z+18	; 0x12
    23f2:	83 89       	ldd	r24, Z+19	; 0x13
    23f4:	94 89       	ldd	r25, Z+20	; 0x14
    23f6:	0e 94 24 22 	call	0x4448	; 0x4448 <__floatsisf>
    23fa:	5b 01       	movw	r10, r22
    23fc:	6c 01       	movw	r12, r24
    23fe:	a8 01       	movw	r20, r16
    2400:	97 01       	movw	r18, r14
    2402:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    2406:	0e 94 72 21 	call	0x42e4	; 0x42e4 <ceil>
    240a:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
    240e:	3b 01       	movw	r6, r22
    2410:	4c 01       	movw	r8, r24
    2412:	a9 a1       	ldd	r26, Y+33	; 0x21
    2414:	ba a1       	ldd	r27, Y+34	; 0x22
    2416:	55 96       	adiw	r26, 0x15	; 21
    2418:	6d 93       	st	X+, r22
    241a:	7d 93       	st	X+, r23
    241c:	8d 93       	st	X+, r24
    241e:	9c 93       	st	X, r25
    2420:	58 97       	sbiw	r26, 0x18	; 24
  block->entry_factor = 0.0;
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	a0 e0       	ldi	r26, 0x00	; 0
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e9 a1       	ldd	r30, Y+33	; 0x21
    242c:	fa a1       	ldd	r31, Y+34	; 0x22
    242e:	81 ab       	std	Z+49, r24	; 0x31
    2430:	92 ab       	std	Z+50, r25	; 0x32
    2432:	a3 ab       	std	Z+51, r26	; 0x33
    2434:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2436:	60 91 93 06 	lds	r22, 0x0693
    243a:	70 91 94 06 	lds	r23, 0x0694
    243e:	80 91 95 06 	lds	r24, 0x0695
    2442:	90 91 96 06 	lds	r25, 0x0696
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e7       	ldi	r20, 0x70	; 112
    244c:	52 e4       	ldi	r21, 0x42	; 66
    244e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	52 e4       	ldi	r21, 0x42	; 66
    245a:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    245e:	7b 01       	movw	r14, r22
    2460:	8c 01       	movw	r16, r24
    2462:	a9 a1       	ldd	r26, Y+33	; 0x21
    2464:	ba a1       	ldd	r27, Y+34	; 0x22
    2466:	9d 96       	adiw	r26, 0x2d	; 45
    2468:	6d 91       	ld	r22, X+
    246a:	7d 91       	ld	r23, X+
    246c:	8d 91       	ld	r24, X+
    246e:	9c 91       	ld	r25, X
    2470:	d0 97       	sbiw	r26, 0x30	; 48
    2472:	a6 01       	movw	r20, r12
    2474:	95 01       	movw	r18, r10
    2476:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    247a:	9b 01       	movw	r18, r22
    247c:	ac 01       	movw	r20, r24
    247e:	c8 01       	movw	r24, r16
    2480:	b7 01       	movw	r22, r14
    2482:	0e 94 89 21 	call	0x4312	; 0x4312 <__divsf3>
    2486:	0e 94 72 21 	call	0x42e4	; 0x42e4 <ceil>
    248a:	09 a1       	ldd	r16, Y+33	; 0x21
    248c:	1a a1       	ldd	r17, Y+34	; 0x22
    248e:	03 5c       	subi	r16, 0xC3	; 195
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
    2496:	f8 01       	movw	r30, r16
    2498:	60 83       	st	Z, r22
    249a:	71 83       	std	Z+1, r23	; 0x01
    249c:	82 83       	std	Z+2, r24	; 0x02
    249e:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    24a0:	80 91 16 05 	lds	r24, 0x0516
    24a4:	88 23       	and	r24, r24
    24a6:	69 f0       	breq	.+26     	; 0x24c2 <__stack+0x2c3>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    24a8:	89 a1       	ldd	r24, Y+33	; 0x21
    24aa:	9a a1       	ldd	r25, Y+34	; 0x22
    24ac:	0e 94 85 0a 	call	0x150a	; 0x150a <factor_for_safe_speed>
    24b0:	8b 01       	movw	r16, r22
    24b2:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    24b4:	89 a1       	ldd	r24, Y+33	; 0x21
    24b6:	9a a1       	ldd	r25, Y+34	; 0x22
    24b8:	b9 01       	movw	r22, r18
    24ba:	a8 01       	movw	r20, r16
    24bc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <calculate_trapezoid_for_block>
    24c0:	26 c0       	rjmp	.+76     	; 0x250e <__stack+0x30f>
  } else {
    block->initial_rate = block->nominal_rate;
    24c2:	a9 a1       	ldd	r26, Y+33	; 0x21
    24c4:	ba a1       	ldd	r27, Y+34	; 0x22
    24c6:	d5 96       	adiw	r26, 0x35	; 53
    24c8:	6d 92       	st	X+, r6
    24ca:	7d 92       	st	X+, r7
    24cc:	8d 92       	st	X+, r8
    24ce:	9c 92       	st	X, r9
    24d0:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    24d2:	fd 01       	movw	r30, r26
    24d4:	61 ae       	std	Z+57, r6	; 0x39
    24d6:	72 ae       	std	Z+58, r7	; 0x3a
    24d8:	83 ae       	std	Z+59, r8	; 0x3b
    24da:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    24dc:	ef 5b       	subi	r30, 0xBF	; 191
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	10 82       	st	Z, r1
    24e2:	11 82       	std	Z+1, r1	; 0x01
    24e4:	12 82       	std	Z+2, r1	; 0x02
    24e6:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    24e8:	9d 01       	movw	r18, r26
    24ea:	2b 5b       	subi	r18, 0xBB	; 187
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	fd 01       	movw	r30, r26
    24f0:	81 89       	ldd	r24, Z+17	; 0x11
    24f2:	92 89       	ldd	r25, Z+18	; 0x12
    24f4:	a3 89       	ldd	r26, Z+19	; 0x13
    24f6:	b4 89       	ldd	r27, Z+20	; 0x14
    24f8:	f9 01       	movw	r30, r18
    24fa:	80 83       	st	Z, r24
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	a2 83       	std	Z+2, r26	; 0x02
    2500:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    2502:	d8 01       	movw	r26, r16
    2504:	1d 92       	st	X+, r1
    2506:	1d 92       	st	X+, r1
    2508:	1d 92       	st	X+, r1
    250a:	1c 92       	st	X, r1
    250c:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    250e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2510:	fa a1       	ldd	r31, Y+34	; 0x22
    2512:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    2514:	29 81       	ldd	r18, Y+1	; 0x01
    2516:	3a 81       	ldd	r19, Y+2	; 0x02
    2518:	4b 81       	ldd	r20, Y+3	; 0x03
    251a:	5c 81       	ldd	r21, Y+4	; 0x04
    251c:	80 91 06 05 	lds	r24, 0x0506
    2520:	90 91 07 05 	lds	r25, 0x0507
    2524:	a0 91 08 05 	lds	r26, 0x0508
    2528:	b0 91 09 05 	lds	r27, 0x0509
    252c:	28 17       	cp	r18, r24
    252e:	39 07       	cpc	r19, r25
    2530:	4a 07       	cpc	r20, r26
    2532:	5b 07       	cpc	r21, r27
    2534:	14 f4       	brge	.+4      	; 0x253a <__stack+0x33b>
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    253a:	2d 81       	ldd	r18, Y+5	; 0x05
    253c:	3e 81       	ldd	r19, Y+6	; 0x06
    253e:	4f 81       	ldd	r20, Y+7	; 0x07
    2540:	58 85       	ldd	r21, Y+8	; 0x08
    2542:	80 91 0a 05 	lds	r24, 0x050A
    2546:	90 91 0b 05 	lds	r25, 0x050B
    254a:	a0 91 0c 05 	lds	r26, 0x050C
    254e:	b0 91 0d 05 	lds	r27, 0x050D
    2552:	28 17       	cp	r18, r24
    2554:	39 07       	cpc	r19, r25
    2556:	4a 07       	cpc	r20, r26
    2558:	5b 07       	cpc	r21, r27
    255a:	44 f4       	brge	.+16     	; 0x256c <__stack+0x36d>
    255c:	a9 a1       	ldd	r26, Y+33	; 0x21
    255e:	ba a1       	ldd	r27, Y+34	; 0x22
    2560:	50 96       	adiw	r26, 0x10	; 16
    2562:	8c 91       	ld	r24, X
    2564:	50 97       	sbiw	r26, 0x10	; 16
    2566:	88 60       	ori	r24, 0x08	; 8
    2568:	50 96       	adiw	r26, 0x10	; 16
    256a:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    256c:	29 85       	ldd	r18, Y+9	; 0x09
    256e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2570:	4b 85       	ldd	r20, Y+11	; 0x0b
    2572:	5c 85       	ldd	r21, Y+12	; 0x0c
    2574:	80 91 0e 05 	lds	r24, 0x050E
    2578:	90 91 0f 05 	lds	r25, 0x050F
    257c:	a0 91 10 05 	lds	r26, 0x0510
    2580:	b0 91 11 05 	lds	r27, 0x0511
    2584:	28 17       	cp	r18, r24
    2586:	39 07       	cpc	r19, r25
    2588:	4a 07       	cpc	r20, r26
    258a:	5b 07       	cpc	r21, r27
    258c:	2c f4       	brge	.+10     	; 0x2598 <__stack+0x399>
    258e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2590:	fa a1       	ldd	r31, Y+34	; 0x22
    2592:	80 89       	ldd	r24, Z+16	; 0x10
    2594:	80 64       	ori	r24, 0x40	; 64
    2596:	80 8b       	std	Z+16, r24	; 0x10
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2598:	2d 85       	ldd	r18, Y+13	; 0x0d
    259a:	3e 85       	ldd	r19, Y+14	; 0x0e
    259c:	4f 85       	ldd	r20, Y+15	; 0x0f
    259e:	58 89       	ldd	r21, Y+16	; 0x10
    25a0:	80 91 12 05 	lds	r24, 0x0512
    25a4:	90 91 13 05 	lds	r25, 0x0513
    25a8:	a0 91 14 05 	lds	r26, 0x0514
    25ac:	b0 91 15 05 	lds	r27, 0x0515
    25b0:	28 17       	cp	r18, r24
    25b2:	39 07       	cpc	r19, r25
    25b4:	4a 07       	cpc	r20, r26
    25b6:	5b 07       	cpc	r21, r27
    25b8:	44 f4       	brge	.+16     	; 0x25ca <__stack+0x3cb>
    25ba:	a9 a1       	ldd	r26, Y+33	; 0x21
    25bc:	ba a1       	ldd	r27, Y+34	; 0x22
    25be:	50 96       	adiw	r26, 0x10	; 16
    25c0:	8c 91       	ld	r24, X
    25c2:	50 97       	sbiw	r26, 0x10	; 16
    25c4:	80 68       	ori	r24, 0x80	; 128
    25c6:	50 96       	adiw	r26, 0x10	; 16
    25c8:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    25ca:	eb a9       	ldd	r30, Y+51	; 0x33
    25cc:	fc a9       	ldd	r31, Y+52	; 0x34
    25ce:	f0 93 03 05 	sts	0x0503, r31
    25d2:	e0 93 02 05 	sts	0x0502, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    25d6:	a6 e0       	ldi	r26, 0x06	; 6
    25d8:	b5 e0       	ldi	r27, 0x05	; 5
    25da:	fe 01       	movw	r30, r28
    25dc:	31 96       	adiw	r30, 0x01	; 1
    25de:	80 e1       	ldi	r24, 0x10	; 16
    25e0:	01 90       	ld	r0, Z+
    25e2:	0d 92       	st	X+, r0
    25e4:	81 50       	subi	r24, 0x01	; 1
    25e6:	e1 f7       	brne	.-8      	; 0x25e0 <__stack+0x3e1>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    25e8:	80 91 16 05 	lds	r24, 0x0516
    25ec:	88 23       	and	r24, r24
    25ee:	11 f0       	breq	.+4      	; 0x25f4 <__stack+0x3f5>
    25f0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <planner_recalculate>
  st_wake_up();
    25f4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <st_wake_up>
}
    25f8:	e4 96       	adiw	r28, 0x34	; 52
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	ff 90       	pop	r15
    260e:	ef 90       	pop	r14
    2610:	df 90       	pop	r13
    2612:	cf 90       	pop	r12
    2614:	bf 90       	pop	r11
    2616:	af 90       	pop	r10
    2618:	9f 90       	pop	r9
    261a:	8f 90       	pop	r8
    261c:	7f 90       	pop	r7
    261e:	6f 90       	pop	r6
    2620:	5f 90       	pop	r5
    2622:	4f 90       	pop	r4
    2624:	3f 90       	pop	r3
    2626:	2f 90       	pop	r2
    2628:	08 95       	ret

0000262a <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	79 c0       	rjmp	.+242    	; 0x2722 <sp_process+0xf8>
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    2630:	e0 91 49 05 	lds	r30, 0x0549
    2634:	ee 23       	and	r30, r30
    2636:	09 f4       	brne	.+2      	; 0x263a <sp_process+0x10>
    2638:	62 c0       	rjmp	.+196    	; 0x26fe <sp_process+0xd4>
    263a:	9a 30       	cpi	r25, 0x0A	; 10
    263c:	19 f0       	breq	.+6      	; 0x2644 <sp_process+0x1a>
    263e:	9d 30       	cpi	r25, 0x0D	; 13
    2640:	09 f0       	breq	.+2      	; 0x2644 <sp_process+0x1a>
    2642:	5d c0       	rjmp	.+186    	; 0x26fe <sp_process+0xd4>
      line[char_counter] = 0; // terminate string
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	e9 5e       	subi	r30, 0xE9	; 233
    2648:	fa 4f       	sbci	r31, 0xFA	; 250
    264a:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    264c:	87 e1       	ldi	r24, 0x17	; 23
    264e:	95 e0       	ldi	r25, 0x05	; 5
    2650:	0e 94 18 05 	call	0xa30	; 0xa30 <gc_execute_line>
    2654:	08 2f       	mov	r16, r24
static uint8_t char_counter;

static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    2656:	80 91 4b 05 	lds	r24, 0x054B
    265a:	88 23       	and	r24, r24
    265c:	31 f1       	breq	.+76     	; 0x26aa <sp_process+0x80>
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    265e:	03 30       	cpi	r16, 0x03	; 3
    2660:	c9 f0       	breq	.+50     	; 0x2694 <sp_process+0x6a>
    2662:	04 30       	cpi	r16, 0x04	; 4
    2664:	28 f4       	brcc	.+10     	; 0x2670 <sp_process+0x46>
    2666:	01 30       	cpi	r16, 0x01	; 1
    2668:	69 f0       	breq	.+26     	; 0x2684 <sp_process+0x5a>
    266a:	02 30       	cpi	r16, 0x02	; 2
    266c:	70 f4       	brcc	.+28     	; 0x268a <sp_process+0x60>
    266e:	07 c0       	rjmp	.+14     	; 0x267e <sp_process+0x54>
    2670:	05 30       	cpi	r16, 0x05	; 5
    2672:	b1 f0       	breq	.+44     	; 0x26a0 <sp_process+0x76>
    2674:	05 30       	cpi	r16, 0x05	; 5
    2676:	88 f0       	brcs	.+34     	; 0x269a <sp_process+0x70>
    2678:	03 36       	cpi	r16, 0x63	; 99
    267a:	d1 f4       	brne	.+52     	; 0x26b0 <sp_process+0x86>
    267c:	16 c0       	rjmp	.+44     	; 0x26aa <sp_process+0x80>
		case GCSTATUS_OK:
			printPgmString(PSTR("ok\n\r")); 
    267e:	85 e0       	ldi	r24, 0x05	; 5
    2680:	93 e0       	ldi	r25, 0x03	; 3
    2682:	05 c0       	rjmp	.+10     	; 0x268e <sp_process+0x64>
			break;
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n\r")); 
    2684:	8a ee       	ldi	r24, 0xEA	; 234
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	02 c0       	rjmp	.+4      	; 0x268e <sp_process+0x64>
			// typos are ok
			return;
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n\r")); 
    268a:	89 ec       	ldi	r24, 0xC9	; 201
    268c:	92 e0       	ldi	r25, 0x02	; 2
    268e:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
    2692:	32 c0       	rjmp	.+100    	; 0x26f8 <sp_process+0xce>
			// typos are ok
			return;
		case GCSTATUS_UNSUPPORTED_STATEMENT:
			printPgmString(PSTR("error: Unsupported statement\n\r")); 
    2694:	8a ea       	ldi	r24, 0xAA	; 170
    2696:	92 e0       	ldi	r25, 0x02	; 2
    2698:	fa cf       	rjmp	.-12     	; 0x268e <sp_process+0x64>
			// typos are ok
			return;

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n\r")); 
    269a:	8c e8       	ldi	r24, 0x8C	; 140
    269c:	92 e0       	ldi	r25, 0x02	; 2
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <sp_process+0x7a>
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n\r")); 
    26a0:	84 e7       	ldi	r24, 0x74	; 116
    26a2:	92 e0       	ldi	r25, 0x02	; 2
    26a4:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
    26a8:	15 c0       	rjmp	.+42     	; 0x26d4 <sp_process+0xaa>
			break;
		case GCSTATUS_NOT_HOMED:
			printPgmString(PSTR("error: Not homed\n\r")); 
    26aa:	81 e6       	ldi	r24, 0x61	; 97
    26ac:	92 e0       	ldi	r25, 0x02	; 2
    26ae:	fa cf       	rjmp	.-12     	; 0x26a4 <sp_process+0x7a>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    26b0:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case GCSTATUS_NOT_HOMED:
			printPgmString(PSTR("error: Not homed\n\r")); 
			break;
		default:
			printPgmString(PSTR("error: "));
    26b2:	89 e5       	ldi	r24, 0x59	; 89
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			printInteger(status_code);
    26ba:	b8 01       	movw	r22, r16
    26bc:	88 27       	eor	r24, r24
    26be:	77 fd       	sbrc	r23, 7
    26c0:	80 95       	com	r24
    26c2:	98 2f       	mov	r25, r24
    26c4:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
			printPgmString(PSTR("\n\r"));
    26c8:	86 e5       	ldi	r24, 0x56	; 86
    26ca:	92 e0       	ldi	r25, 0x02	; 2
    26cc:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    26d0:	01 2b       	or	r16, r17
    26d2:	91 f0       	breq	.+36     	; 0x26f8 <sp_process+0xce>

		vacuum(0);
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>
		head_down(0);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
		atc_fire(0);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    26ec:	10 92 4b 05 	sts	0x054B, r1

		// stops all but home
		set_busy(TRUE);
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    26f8:	10 92 49 05 	sts	0x0549, r1
    26fc:	12 c0       	rjmp	.+36     	; 0x2722 <sp_process+0xf8>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    26fe:	91 32       	cpi	r25, 0x21	; 33
    2700:	84 f0       	brlt	.+32     	; 0x2722 <sp_process+0xf8>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2702:	89 2f       	mov	r24, r25
    2704:	81 56       	subi	r24, 0x61	; 97
    2706:	ae 2f       	mov	r26, r30
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	ef 5f       	subi	r30, 0xFF	; 255
    270c:	8a 31       	cpi	r24, 0x1A	; 26
    270e:	20 f4       	brcc	.+8      	; 0x2718 <sp_process+0xee>
      line[char_counter++] = c-'a'+'A';
    2710:	a9 5e       	subi	r26, 0xE9	; 233
    2712:	ba 4f       	sbci	r27, 0xFA	; 250
    2714:	90 52       	subi	r25, 0x20	; 32
    2716:	02 c0       	rjmp	.+4      	; 0x271c <sp_process+0xf2>
    } else {
      line[char_counter++] = c;
    2718:	a9 5e       	subi	r26, 0xE9	; 233
    271a:	ba 4f       	sbci	r27, 0xFA	; 250
    271c:	9c 93       	st	X, r25
    271e:	e0 93 49 05 	sts	0x0549, r30

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2722:	0e 94 3f 1b 	call	0x367e	; 0x367e <serialRead>
    2726:	98 2f       	mov	r25, r24
    2728:	8f 3f       	cpi	r24, 0xFF	; 255
    272a:	09 f0       	breq	.+2      	; 0x272e <sp_process+0x104>
    272c:	81 cf       	rjmp	.-254    	; 0x2630 <sp_process+0x6>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	08 95       	ret

00002734 <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	76 e9       	ldi	r23, 0x96	; 150
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <beginSerial>
}
    2740:	08 95       	ret

00002742 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	ae e7       	ldi	r26, 0x7E	; 126
    2748:	b4 e4       	ldi	r27, 0x44	; 68
    274a:	80 93 75 06 	sts	0x0675, r24
    274e:	90 93 76 06 	sts	0x0676, r25
    2752:	a0 93 77 06 	sts	0x0677, r26
    2756:	b0 93 78 06 	sts	0x0678, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    275a:	80 93 79 06 	sts	0x0679, r24
    275e:	90 93 7a 06 	sts	0x067A, r25
    2762:	a0 93 7b 06 	sts	0x067B, r26
    2766:	b0 93 7c 06 	sts	0x067C, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    276a:	84 ef       	ldi	r24, 0xF4	; 244
    276c:	99 ef       	ldi	r25, 0xF9	; 249
    276e:	ac e3       	ldi	r26, 0x3C	; 60
    2770:	b4 e4       	ldi	r27, 0x44	; 68
    2772:	80 93 7d 06 	sts	0x067D, r24
    2776:	90 93 7e 06 	sts	0x067E, r25
    277a:	a0 93 7f 06 	sts	0x067F, r26
    277e:	b0 93 80 06 	sts	0x0680, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2782:	81 ec       	ldi	r24, 0xC1	; 193
    2784:	9a ec       	ldi	r25, 0xCA	; 202
    2786:	a1 e3       	ldi	r26, 0x31	; 49
    2788:	b2 e4       	ldi	r27, 0x42	; 66
    278a:	80 93 81 06 	sts	0x0681, r24
    278e:	90 93 82 06 	sts	0x0682, r25
    2792:	a0 93 83 06 	sts	0x0683, r26
    2796:	b0 93 84 06 	sts	0x0684, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    279a:	88 e0       	ldi	r24, 0x08	; 8
    279c:	80 93 86 06 	sts	0x0686, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 ef       	ldi	r26, 0xF0	; 240
    27a6:	b3 e4       	ldi	r27, 0x43	; 67
    27a8:	80 93 87 06 	sts	0x0687, r24
    27ac:	90 93 88 06 	sts	0x0688, r25
    27b0:	a0 93 89 06 	sts	0x0689, r26
    27b4:	b0 93 8a 06 	sts	0x068A, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    27b8:	80 93 8b 06 	sts	0x068B, r24
    27bc:	90 93 8c 06 	sts	0x068C, r25
    27c0:	a0 93 8d 06 	sts	0x068D, r26
    27c4:	b0 93 8e 06 	sts	0x068E, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    27c8:	8a e9       	ldi	r24, 0x9A	; 154
    27ca:	99 e9       	ldi	r25, 0x99	; 153
    27cc:	a9 e9       	ldi	r26, 0x99	; 153
    27ce:	b0 e4       	ldi	r27, 0x40	; 64
    27d0:	80 93 93 06 	sts	0x0693, r24
    27d4:	90 93 94 06 	sts	0x0694, r25
    27d8:	a0 93 95 06 	sts	0x0695, r26
    27dc:	b0 93 96 06 	sts	0x0696, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    27e0:	8d ec       	ldi	r24, 0xCD	; 205
    27e2:	9c ec       	ldi	r25, 0xCC	; 204
    27e4:	ac ec       	ldi	r26, 0xCC	; 204
    27e6:	bd e3       	ldi	r27, 0x3D	; 61
    27e8:	80 93 8f 06 	sts	0x068F, r24
    27ec:	90 93 90 06 	sts	0x0690, r25
    27f0:	a0 93 91 06 	sts	0x0691, r26
    27f4:	b0 93 92 06 	sts	0x0692, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a8 e4       	ldi	r26, 0x48	; 72
    27fe:	b2 e4       	ldi	r27, 0x42	; 66
    2800:	80 93 97 06 	sts	0x0697, r24
    2804:	90 93 98 06 	sts	0x0698, r25
    2808:	a0 93 99 06 	sts	0x0699, r26
    280c:	b0 93 9a 06 	sts	0x069A, r27
}
    2810:	08 95       	ret

00002812 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    281a:	87 36       	cpi	r24, 0x67	; 103
    281c:	81 f4       	brne	.+32     	; 0x283e <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    281e:	85 e7       	ldi	r24, 0x75	; 117
    2820:	96 e0       	ldi	r25, 0x06	; 6
    2822:	61 e0       	ldi	r22, 0x01	; 1
    2824:	70 e0       	ldi	r23, 0x00	; 0
    2826:	46 e2       	ldi	r20, 0x26	; 38
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	0e 94 55 03 	call	0x6aa	; 0x6aa <memcpy_from_eeprom_with_checksum>
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	89 2b       	or	r24, r25
    2832:	09 f4       	brne	.+2      	; 0x2836 <read_settings+0x24>
    2834:	21 e0       	ldi	r18, 0x01	; 1
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	28 27       	eor	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	29 c0       	rjmp	.+82     	; 0x2890 <read_settings+0x7e>
      return(FALSE);
    }
  } 
  else if (version == 1) {
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	29 f5       	brne	.+74     	; 0x288c <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2842:	85 e7       	ldi	r24, 0x75	; 117
    2844:	96 e0       	ldi	r25, 0x06	; 6
    2846:	61 e0       	ldi	r22, 0x01	; 1
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	4b e1       	ldi	r20, 0x1B	; 27
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	0e 94 55 03 	call	0x6aa	; 0x6aa <memcpy_from_eeprom_with_checksum>
    2852:	89 2b       	or	r24, r25
    2854:	d9 f0       	breq	.+54     	; 0x288c <read_settings+0x7a>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2856:	8a e9       	ldi	r24, 0x9A	; 154
    2858:	99 e9       	ldi	r25, 0x99	; 153
    285a:	a9 e9       	ldi	r26, 0x99	; 153
    285c:	b0 e4       	ldi	r27, 0x40	; 64
    285e:	80 93 93 06 	sts	0x0693, r24
    2862:	90 93 94 06 	sts	0x0694, r25
    2866:	a0 93 95 06 	sts	0x0695, r26
    286a:	b0 93 96 06 	sts	0x0696, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a8 e4       	ldi	r26, 0x48	; 72
    2874:	b2 e4       	ldi	r27, 0x42	; 66
    2876:	80 93 97 06 	sts	0x0697, r24
    287a:	90 93 98 06 	sts	0x0698, r25
    287e:	a0 93 99 06 	sts	0x0699, r26
    2882:	b0 93 9a 06 	sts	0x069A, r27
    2886:	21 e0       	ldi	r18, 0x01	; 1
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <read_settings+0x7e>
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2890:	c9 01       	movw	r24, r18
    2892:	08 95       	ret

00002894 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	67 e6       	ldi	r22, 0x67	; 103
    289a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	65 e7       	ldi	r22, 0x75	; 117
    28a4:	76 e0       	ldi	r23, 0x06	; 6
    28a6:	46 e2       	ldi	r20, 0x26	; 38
    28a8:	50 e0       	ldi	r21, 0x00	; 0
    28aa:	0e 94 0b 03 	call	0x616	; 0x616 <memcpy_to_eeprom_with_checksum>
}
    28ae:	08 95       	ret

000028b0 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    28b0:	fc 01       	movw	r30, r24
  switch(parameter) {
    28b2:	86 30       	cpi	r24, 0x06	; 6
    28b4:	91 05       	cpc	r25, r1
    28b6:	b9 f1       	breq	.+110    	; 0x2926 <settings_store_setting+0x76>
    28b8:	87 30       	cpi	r24, 0x07	; 7
    28ba:	91 05       	cpc	r25, r1
    28bc:	4c f4       	brge	.+18     	; 0x28d0 <settings_store_setting+0x20>
    28be:	84 30       	cpi	r24, 0x04	; 4
    28c0:	91 05       	cpc	r25, r1
    28c2:	f9 f0       	breq	.+62     	; 0x2902 <settings_store_setting+0x52>
    28c4:	85 30       	cpi	r24, 0x05	; 5
    28c6:	91 05       	cpc	r25, r1
    28c8:	2c f5       	brge	.+74     	; 0x2914 <settings_store_setting+0x64>
    28ca:	97 ff       	sbrs	r25, 7
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <settings_store_setting+0x3c>
    28ce:	62 c0       	rjmp	.+196    	; 0x2994 <settings_store_setting+0xe4>
    28d0:	88 30       	cpi	r24, 0x08	; 8
    28d2:	91 05       	cpc	r25, r1
    28d4:	d1 f1       	breq	.+116    	; 0x294a <settings_store_setting+0x9a>
    28d6:	88 30       	cpi	r24, 0x08	; 8
    28d8:	91 05       	cpc	r25, r1
    28da:	74 f1       	brlt	.+92     	; 0x2938 <settings_store_setting+0x88>
    28dc:	89 30       	cpi	r24, 0x09	; 9
    28de:	91 05       	cpc	r25, r1
    28e0:	e9 f1       	breq	.+122    	; 0x295c <settings_store_setting+0xac>
    28e2:	e8 5e       	subi	r30, 0xE8	; 232
    28e4:	f3 40       	sbci	r31, 0x03	; 3
    28e6:	09 f0       	breq	.+2      	; 0x28ea <settings_store_setting+0x3a>
    28e8:	55 c0       	rjmp	.+170    	; 0x2994 <settings_store_setting+0xe4>
    28ea:	44 c0       	rjmp	.+136    	; 0x2974 <settings_store_setting+0xc4>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    28ec:	ee 0f       	add	r30, r30
    28ee:	ff 1f       	adc	r31, r31
    28f0:	ee 0f       	add	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	eb 58       	subi	r30, 0x8B	; 139
    28f6:	f9 4f       	sbci	r31, 0xF9	; 249
    28f8:	40 83       	st	Z, r20
    28fa:	51 83       	std	Z+1, r21	; 0x01
    28fc:	62 83       	std	Z+2, r22	; 0x02
    28fe:	73 83       	std	Z+3, r23	; 0x03
    2900:	4c c0       	rjmp	.+152    	; 0x299a <settings_store_setting+0xea>
    case 4: settings.pulse_microseconds = round(value); break;
    2902:	cb 01       	movw	r24, r22
    2904:	ba 01       	movw	r22, r20
    2906:	0e 94 1d 24 	call	0x483a	; 0x483a <round>
    290a:	0e 94 f6 21 	call	0x43ec	; 0x43ec <__fixunssfsi>
    290e:	60 93 86 06 	sts	0x0686, r22
    2912:	43 c0       	rjmp	.+134    	; 0x299a <settings_store_setting+0xea>
    case 5: settings.default_feed_rate = value; break;
    2914:	40 93 87 06 	sts	0x0687, r20
    2918:	50 93 88 06 	sts	0x0688, r21
    291c:	60 93 89 06 	sts	0x0689, r22
    2920:	70 93 8a 06 	sts	0x068A, r23
    2924:	3a c0       	rjmp	.+116    	; 0x299a <settings_store_setting+0xea>
    case 6: settings.default_seek_rate = value; break;
    2926:	40 93 8b 06 	sts	0x068B, r20
    292a:	50 93 8c 06 	sts	0x068C, r21
    292e:	60 93 8d 06 	sts	0x068D, r22
    2932:	70 93 8e 06 	sts	0x068E, r23
    2936:	31 c0       	rjmp	.+98     	; 0x299a <settings_store_setting+0xea>
    case 7: settings.mm_per_arc_segment = value; break;
    2938:	40 93 8f 06 	sts	0x068F, r20
    293c:	50 93 90 06 	sts	0x0690, r21
    2940:	60 93 91 06 	sts	0x0691, r22
    2944:	70 93 92 06 	sts	0x0692, r23
    2948:	28 c0       	rjmp	.+80     	; 0x299a <settings_store_setting+0xea>
    case 8: settings.acceleration = value; break;
    294a:	40 93 93 06 	sts	0x0693, r20
    294e:	50 93 94 06 	sts	0x0694, r21
    2952:	60 93 95 06 	sts	0x0695, r22
    2956:	70 93 96 06 	sts	0x0696, r23
    295a:	1f c0       	rjmp	.+62     	; 0x299a <settings_store_setting+0xea>
    case 9: settings.max_jerk = fabs(value); break;
    295c:	db 01       	movw	r26, r22
    295e:	ca 01       	movw	r24, r20
    2960:	bf 77       	andi	r27, 0x7F	; 127
    2962:	80 93 97 06 	sts	0x0697, r24
    2966:	90 93 98 06 	sts	0x0698, r25
    296a:	a0 93 99 06 	sts	0x0699, r26
    296e:	b0 93 9a 06 	sts	0x069A, r27
    2972:	13 c0       	rjmp	.+38     	; 0x299a <settings_store_setting+0xea>
    case 1000:
	  if (!!value) st_enable();
    2974:	cb 01       	movw	r24, r22
    2976:	ba 01       	movw	r22, r20
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
    2984:	88 23       	and	r24, r24
    2986:	19 f0       	breq	.+6      	; 0x298e <settings_store_setting+0xde>
    2988:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <st_enable>
    298c:	08 95       	ret
      else st_disable();
    298e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <st_disable>
    2992:	08 95       	ret
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2994:	8f e1       	ldi	r24, 0x1F	; 31
    2996:	93 e0       	ldi	r25, 0x03	; 3
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <settings_store_setting+0xf2>
      return;
  }
  write_settings();
    299a:	0e 94 4a 14 	call	0x2894	; 0x2894 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    299e:	8a e0       	ldi	r24, 0x0A	; 10
    29a0:	93 e0       	ldi	r25, 0x03	; 3
    29a2:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
    29a6:	08 95       	ret

000029a8 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    29a8:	83 ef       	ldi	r24, 0xF3	; 243
    29aa:	94 e0       	ldi	r25, 0x04	; 4
    29ac:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    29b0:	8c ee       	ldi	r24, 0xEC	; 236
    29b2:	94 e0       	ldi	r25, 0x04	; 4
    29b4:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printPgmString(PSTR("\r\n"));
    29b8:	89 ee       	ldi	r24, 0xE9	; 233
    29ba:	94 e0       	ldi	r25, 0x04	; 4
    29bc:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    29c0:	83 ee       	ldi	r24, 0xE3	; 227
    29c2:	94 e0       	ldi	r25, 0x04	; 4
    29c4:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    29c8:	60 91 75 06 	lds	r22, 0x0675
    29cc:	70 91 76 06 	lds	r23, 0x0676
    29d0:	80 91 77 06 	lds	r24, 0x0677
    29d4:	90 91 78 06 	lds	r25, 0x0678
    29d8:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    29dc:	83 ed       	ldi	r24, 0xD3	; 211
    29de:	94 e0       	ldi	r25, 0x04	; 4
    29e0:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    29e4:	8d ec       	ldi	r24, 0xCD	; 205
    29e6:	94 e0       	ldi	r25, 0x04	; 4
    29e8:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    29ec:	60 91 79 06 	lds	r22, 0x0679
    29f0:	70 91 7a 06 	lds	r23, 0x067A
    29f4:	80 91 7b 06 	lds	r24, 0x067B
    29f8:	90 91 7c 06 	lds	r25, 0x067C
    29fc:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2a00:	8d eb       	ldi	r24, 0xBD	; 189
    2a02:	94 e0       	ldi	r25, 0x04	; 4
    2a04:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2a08:	87 eb       	ldi	r24, 0xB7	; 183
    2a0a:	94 e0       	ldi	r25, 0x04	; 4
    2a0c:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2a10:	60 91 7d 06 	lds	r22, 0x067D
    2a14:	70 91 7e 06 	lds	r23, 0x067E
    2a18:	80 91 7f 06 	lds	r24, 0x067F
    2a1c:	90 91 80 06 	lds	r25, 0x0680
    2a20:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2a24:	87 ea       	ldi	r24, 0xA7	; 167
    2a26:	94 e0       	ldi	r25, 0x04	; 4
    2a28:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2a2c:	81 ea       	ldi	r24, 0xA1	; 161
    2a2e:	94 e0       	ldi	r25, 0x04	; 4
    2a30:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2a34:	60 91 81 06 	lds	r22, 0x0681
    2a38:	70 91 82 06 	lds	r23, 0x0682
    2a3c:	80 91 83 06 	lds	r24, 0x0683
    2a40:	90 91 84 06 	lds	r25, 0x0684
    2a44:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2a48:	8f e8       	ldi	r24, 0x8F	; 143
    2a4a:	94 e0       	ldi	r25, 0x04	; 4
    2a4c:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2a50:	89 e8       	ldi	r24, 0x89	; 137
    2a52:	94 e0       	ldi	r25, 0x04	; 4
    2a54:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printInteger(settings.pulse_microseconds);
    2a58:	60 91 86 06 	lds	r22, 0x0686
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2a66:	8c e6       	ldi	r24, 0x6C	; 108
    2a68:	94 e0       	ldi	r25, 0x04	; 4
    2a6a:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2a6e:	86 e6       	ldi	r24, 0x66	; 102
    2a70:	94 e0       	ldi	r25, 0x04	; 4
    2a72:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.default_feed_rate);
    2a76:	60 91 87 06 	lds	r22, 0x0687
    2a7a:	70 91 88 06 	lds	r23, 0x0688
    2a7e:	80 91 89 06 	lds	r24, 0x0689
    2a82:	90 91 8a 06 	lds	r25, 0x068A
    2a86:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2a8a:	88 e4       	ldi	r24, 0x48	; 72
    2a8c:	94 e0       	ldi	r25, 0x04	; 4
    2a8e:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2a92:	82 e4       	ldi	r24, 0x42	; 66
    2a94:	94 e0       	ldi	r25, 0x04	; 4
    2a96:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.default_seek_rate);
    2a9a:	60 91 8b 06 	lds	r22, 0x068B
    2a9e:	70 91 8c 06 	lds	r23, 0x068C
    2aa2:	80 91 8d 06 	lds	r24, 0x068D
    2aa6:	90 91 8e 06 	lds	r25, 0x068E
    2aaa:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2aae:	84 e2       	ldi	r24, 0x24	; 36
    2ab0:	94 e0       	ldi	r25, 0x04	; 4
    2ab2:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2ab6:	8e e1       	ldi	r24, 0x1E	; 30
    2ab8:	94 e0       	ldi	r25, 0x04	; 4
    2aba:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2abe:	60 91 8f 06 	lds	r22, 0x068F
    2ac2:	70 91 90 06 	lds	r23, 0x0690
    2ac6:	80 91 91 06 	lds	r24, 0x0691
    2aca:	90 91 92 06 	lds	r25, 0x0692
    2ace:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2ad2:	8a e0       	ldi	r24, 0x0A	; 10
    2ad4:	94 e0       	ldi	r25, 0x04	; 4
    2ad6:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2ada:	84 e0       	ldi	r24, 0x04	; 4
    2adc:	94 e0       	ldi	r25, 0x04	; 4
    2ade:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.acceleration);
    2ae2:	60 91 93 06 	lds	r22, 0x0693
    2ae6:	70 91 94 06 	lds	r23, 0x0694
    2aea:	80 91 95 06 	lds	r24, 0x0695
    2aee:	90 91 96 06 	lds	r25, 0x0696
    2af2:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2af6:	86 ee       	ldi	r24, 0xE6	; 230
    2af8:	93 e0       	ldi	r25, 0x03	; 3
    2afa:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2afe:	80 ee       	ldi	r24, 0xE0	; 224
    2b00:	93 e0       	ldi	r25, 0x03	; 3
    2b02:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printFloat(settings.max_jerk);
    2b06:	60 91 97 06 	lds	r22, 0x0697
    2b0a:	70 91 98 06 	lds	r23, 0x0698
    2b0e:	80 91 99 06 	lds	r24, 0x0699
    2b12:	90 91 9a 06 	lds	r25, 0x069A
    2b16:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2b1a:	88 ea       	ldi	r24, 0xA8	; 168
    2b1c:	93 e0       	ldi	r25, 0x03	; 3
    2b1e:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2b22:	8f e9       	ldi	r24, 0x9F	; 159
    2b24:	93 e0       	ldi	r25, 0x03	; 3
    2b26:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
  printInteger(st_is_enabled());
    2b2a:	0e 94 02 16 	call	0x2c04	; 0x2c04 <st_is_enabled>
    2b2e:	aa 27       	eor	r26, r26
    2b30:	97 fd       	sbrc	r25, 7
    2b32:	a0 95       	com	r26
    2b34:	ba 2f       	mov	r27, r26
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2b3e:	86 e7       	ldi	r24, 0x76	; 118
    2b40:	93 e0       	ldi	r25, 0x03	; 3
    2b42:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2b46:	83 e3       	ldi	r24, 0x33	; 51
    2b48:	93 e0       	ldi	r25, 0x03	; 3
    2b4a:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
}
    2b4e:	08 95       	ret

00002b50 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2b50:	0e 94 09 14 	call	0x2812	; 0x2812 <read_settings>
    2b54:	89 2b       	or	r24, r25
    2b56:	31 f4       	brne	.+12     	; 0x2b64 <settings_init+0x14>
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2b58:	0e 94 a1 13 	call	0x2742	; 0x2742 <settings_reset>
    write_settings();
    2b5c:	0e 94 4a 14 	call	0x2894	; 0x2894 <write_settings>
    settings_dump();
    2b60:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <settings_dump>
    2b64:	08 95       	ret

00002b66 <spindle_init>:
#include <avr/io.h>
#include <avr/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2b66:	e1 e0       	ldi	r30, 0x01	; 1
    2b68:	f1 e0       	ldi	r31, 0x01	; 1
    2b6a:	80 81       	ld	r24, Z
    2b6c:	80 64       	ori	r24, 0x40	; 64
    2b6e:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2b70:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2b72:	3e 9a       	sbi	0x07, 6	; 7

}
    2b74:	08 95       	ret

00002b76 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2b76:	97 fd       	sbrc	r25, 7
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <spindle_run+0x8>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2b7a:	2f 98       	cbi	0x05, 7	; 5
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <spindle_run+0xa>
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2b7e:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2b80:	80 91 02 01 	lds	r24, 0x0102
    2b84:	80 64       	ori	r24, 0x40	; 64
    2b86:	80 93 02 01 	sts	0x0102, r24
}
    2b8a:	08 95       	ret

00002b8c <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2b8c:	e2 e0       	ldi	r30, 0x02	; 2
    2b8e:	f1 e0       	ldi	r31, 0x01	; 1
    2b90:	80 81       	ld	r24, Z
    2b92:	8f 7b       	andi	r24, 0xBF	; 191
    2b94:	80 83       	st	Z, r24
}
    2b96:	08 95       	ret

00002b98 <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b98:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b9a:	40 e7       	ldi	r20, 0x70	; 112
    2b9c:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2b9e:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ba0:	23 2f       	mov	r18, r19
    2ba2:	2a 95       	dec	r18
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2ba6:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ba8:	fa 01       	movw	r30, r20
    2baa:	31 97       	sbiw	r30, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	2f ef       	ldi	r18, 0xFF	; 255
    2bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb4:	92 07       	cpc	r25, r18
    2bb6:	99 f7       	brne	.-26     	; 0x2b9e <rotate_head+0x6>

}
    2bb8:	08 95       	ret

00002bba <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2bba:	ef e6       	ldi	r30, 0x6F	; 111
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	82 60       	ori	r24, 0x02	; 2
    2bc2:	80 83       	st	Z, r24
}
    2bc4:	08 95       	ret

00002bc6 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	90 93 64 05 	sts	0x0564, r25
    2bcc:	80 93 63 05 	sts	0x0563, r24
}
    2bd0:	08 95       	ret

00002bd2 <get_busy>:

int get_busy( void ) 
{
	return busy;
    2bd2:	20 91 63 05 	lds	r18, 0x0563
    2bd6:	30 91 64 05 	lds	r19, 0x0564
}
    2bda:	c9 01       	movw	r24, r18
    2bdc:	08 95       	ret

00002bde <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2bde:	1f 92       	push	r1
    2be0:	0f 92       	push	r0
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	0f 92       	push	r0
    2be6:	11 24       	eor	r1, r1
    2be8:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2bea:	81 b3       	in	r24, 0x11	; 17
    2bec:	8a 7c       	andi	r24, 0xCA	; 202
    2bee:	81 bb       	out	0x11, r24	; 17
}
    2bf0:	8f 91       	pop	r24
    2bf2:	0f 90       	pop	r0
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	0f 90       	pop	r0
    2bf8:	1f 90       	pop	r1
    2bfa:	18 95       	reti

00002bfc <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2bfc:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2bfe:	08 95       	ret

00002c00 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2c00:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2c02:	08 95       	ret

00002c04 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2c04:	3c 99       	sbic	0x07, 4	; 7
    2c06:	03 c0       	rjmp	.+6      	; 0x2c0e <st_is_enabled+0xa>
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	07 c0       	rjmp	.+14     	; 0x2c1c <st_is_enabled+0x18>
    2c0e:	88 b1       	in	r24, 0x08	; 8
    2c10:	82 95       	swap	r24
    2c12:	8f 70       	andi	r24, 0x0F	; 15
    2c14:	80 95       	com	r24
    2c16:	81 70       	andi	r24, 0x01	; 1
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2c1c:	c9 01       	movw	r24, r18
    2c1e:	08 95       	ret

00002c20 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2c20:	60 30       	cpi	r22, 0x00	; 0
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	72 07       	cpc	r23, r18
    2c26:	21 e0       	ldi	r18, 0x01	; 1
    2c28:	82 07       	cpc	r24, r18
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	92 07       	cpc	r25, r18
    2c2e:	30 f4       	brcc	.+12     	; 0x2c3c <config_step_timer+0x1c>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    2c30:	9b 01       	movw	r18, r22
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	e0 e0       	ldi	r30, 0x00	; 0
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	72 c0       	rjmp	.+228    	; 0x2d20 <config_step_timer+0x100>
	} else if (cycles <= 0x7ffffL) {
    2c3c:	60 30       	cpi	r22, 0x00	; 0
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	72 07       	cpc	r23, r18
    2c42:	28 e0       	ldi	r18, 0x08	; 8
    2c44:	82 07       	cpc	r24, r18
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	92 07       	cpc	r25, r18
    2c4a:	a0 f4       	brcc	.+40     	; 0x2c74 <config_step_timer+0x54>
    ceiling = cycles >> 3;
    2c4c:	b3 e0       	ldi	r27, 0x03	; 3
    2c4e:	96 95       	lsr	r25
    2c50:	87 95       	ror	r24
    2c52:	77 95       	ror	r23
    2c54:	67 95       	ror	r22
    2c56:	ba 95       	dec	r27
    2c58:	d1 f7       	brne	.-12     	; 0x2c4e <config_step_timer+0x2e>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2c5a:	9b 01       	movw	r18, r22
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	a3 e0       	ldi	r26, 0x03	; 3
    2c62:	22 0f       	add	r18, r18
    2c64:	33 1f       	adc	r19, r19
    2c66:	44 1f       	adc	r20, r20
    2c68:	55 1f       	adc	r21, r21
    2c6a:	aa 95       	dec	r26
    2c6c:	d1 f7       	brne	.-12     	; 0x2c62 <config_step_timer+0x42>
    2c6e:	e1 e0       	ldi	r30, 0x01	; 1
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	56 c0       	rjmp	.+172    	; 0x2d20 <config_step_timer+0x100>
	} else if (cycles <= 0x3fffffL) {
    2c74:	60 30       	cpi	r22, 0x00	; 0
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	72 07       	cpc	r23, r18
    2c7a:	20 e4       	ldi	r18, 0x40	; 64
    2c7c:	82 07       	cpc	r24, r18
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	92 07       	cpc	r25, r18
    2c82:	a0 f4       	brcc	.+40     	; 0x2cac <config_step_timer+0x8c>
		ceiling =  cycles >> 6;
    2c84:	f6 e0       	ldi	r31, 0x06	; 6
    2c86:	96 95       	lsr	r25
    2c88:	87 95       	ror	r24
    2c8a:	77 95       	ror	r23
    2c8c:	67 95       	ror	r22
    2c8e:	fa 95       	dec	r31
    2c90:	d1 f7       	brne	.-12     	; 0x2c86 <config_step_timer+0x66>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    2c92:	9b 01       	movw	r18, r22
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	50 e0       	ldi	r21, 0x00	; 0
    2c98:	e6 e0       	ldi	r30, 0x06	; 6
    2c9a:	22 0f       	add	r18, r18
    2c9c:	33 1f       	adc	r19, r19
    2c9e:	44 1f       	adc	r20, r20
    2ca0:	55 1f       	adc	r21, r21
    2ca2:	ea 95       	dec	r30
    2ca4:	d1 f7       	brne	.-12     	; 0x2c9a <config_step_timer+0x7a>
    2ca6:	e2 e0       	ldi	r30, 0x02	; 2
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	3a c0       	rjmp	.+116    	; 0x2d20 <config_step_timer+0x100>
	} else if (cycles <= 0xffffffL) {
    2cac:	60 30       	cpi	r22, 0x00	; 0
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	72 07       	cpc	r23, r18
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	82 07       	cpc	r24, r18
    2cb6:	21 e0       	ldi	r18, 0x01	; 1
    2cb8:	92 07       	cpc	r25, r18
    2cba:	70 f4       	brcc	.+28     	; 0x2cd8 <config_step_timer+0xb8>
		ceiling =  (cycles >> 8);
    2cbc:	bb 27       	eor	r27, r27
    2cbe:	a9 2f       	mov	r26, r25
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	87 2f       	mov	r24, r23
    2cc4:	bc 01       	movw	r22, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    2cc6:	a0 e0       	ldi	r26, 0x00	; 0
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	22 27       	eor	r18, r18
    2ccc:	38 2f       	mov	r19, r24
    2cce:	49 2f       	mov	r20, r25
    2cd0:	5a 2f       	mov	r21, r26
    2cd2:	e3 e0       	ldi	r30, 0x03	; 3
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	24 c0       	rjmp	.+72     	; 0x2d20 <config_step_timer+0x100>
	} else if (cycles <= 0x3ffffffL) {
    2cd8:	60 30       	cpi	r22, 0x00	; 0
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	72 07       	cpc	r23, r18
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	82 07       	cpc	r24, r18
    2ce2:	24 e0       	ldi	r18, 0x04	; 4
    2ce4:	92 07       	cpc	r25, r18
    2ce6:	48 f0       	brcs	.+18     	; 0x2cfa <config_step_timer+0xda>
    2ce8:	6f ef       	ldi	r22, 0xFF	; 255
    2cea:	7f ef       	ldi	r23, 0xFF	; 255
    2cec:	e4 e0       	ldi	r30, 0x04	; 4
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	3c ef       	ldi	r19, 0xFC	; 252
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	13 c0       	rjmp	.+38     	; 0x2d20 <config_step_timer+0x100>
		ceiling = (cycles >> 10);
    2cfa:	2a e0       	ldi	r18, 0x0A	; 10
    2cfc:	96 95       	lsr	r25
    2cfe:	87 95       	ror	r24
    2d00:	77 95       	ror	r23
    2d02:	67 95       	ror	r22
    2d04:	2a 95       	dec	r18
    2d06:	d1 f7       	brne	.-12     	; 0x2cfc <config_step_timer+0xdc>
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    2d08:	9b 01       	movw	r18, r22
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	8a e0       	ldi	r24, 0x0A	; 10
    2d10:	22 0f       	add	r18, r18
    2d12:	33 1f       	adc	r19, r19
    2d14:	44 1f       	adc	r20, r20
    2d16:	55 1f       	adc	r21, r21
    2d18:	8a 95       	dec	r24
    2d1a:	d1 f7       	brne	.-12     	; 0x2d10 <config_step_timer+0xf0>
    2d1c:	e4 e0       	ldi	r30, 0x04	; 4
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    2d20:	80 91 81 00 	lds	r24, 0x0081
    2d24:	9e 2f       	mov	r25, r30
    2d26:	9f 5f       	subi	r25, 0xFF	; 255
    2d28:	88 7f       	andi	r24, 0xF8	; 248
    2d2a:	98 2b       	or	r25, r24
    2d2c:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    2d30:	70 93 89 00 	sts	0x0089, r23
    2d34:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}
    2d38:	b9 01       	movw	r22, r18
    2d3a:	ca 01       	movw	r24, r20
    2d3c:	08 95       	ret

00002d3e <set_step_events_per_minute>:

void set_step_events_per_minute(uint32_t steps_per_minute) {
    2d3e:	9b 01       	movw	r18, r22
    2d40:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    2d42:	20 3b       	cpi	r18, 0xB0	; 176
    2d44:	84 e0       	ldi	r24, 0x04	; 4
    2d46:	38 07       	cpc	r19, r24
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	48 07       	cpc	r20, r24
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	58 07       	cpc	r21, r24
    2d50:	20 f4       	brcc	.+8      	; 0x2d5a <set_step_events_per_minute+0x1c>
    2d52:	20 eb       	ldi	r18, 0xB0	; 176
    2d54:	34 e0       	ldi	r19, 0x04	; 4
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	70 e7       	ldi	r23, 0x70	; 112
    2d5e:	88 e3       	ldi	r24, 0x38	; 56
    2d60:	99 e3       	ldi	r25, 0x39	; 57
    2d62:	0e 94 c2 24 	call	0x4984	; 0x4984 <__udivmodsi4>
    2d66:	ca 01       	movw	r24, r20
    2d68:	b9 01       	movw	r22, r18
    2d6a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <config_step_timer>
    2d6e:	60 93 65 05 	sts	0x0565, r22
    2d72:	70 93 66 05 	sts	0x0566, r23
    2d76:	80 93 67 05 	sts	0x0567, r24
    2d7a:	90 93 68 05 	sts	0x0568, r25
}
    2d7e:	08 95       	ret

00002d80 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    2d80:	80 b3       	in	r24, 0x10	; 16
    2d82:	85 63       	ori	r24, 0x35	; 53
    2d84:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    2d86:	80 b3       	in	r24, 0x10	; 16
    2d88:	8a 6c       	ori	r24, 0xCA	; 202
    2d8a:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    2d8c:	81 b3       	in	r24, 0x11	; 17
    2d8e:	8a 7c       	andi	r24, 0xCA	; 202
    2d90:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2d92:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2d94:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    2d96:	e1 e8       	ldi	r30, 0x81	; 129
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	8f 7e       	andi	r24, 0xEF	; 239
    2d9e:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2da0:	80 81       	ld	r24, Z
    2da2:	88 60       	ori	r24, 0x08	; 8
    2da4:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    2da6:	e0 e8       	ldi	r30, 0x80	; 128
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	8d 7f       	andi	r24, 0xFD	; 253
    2dae:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2db0:	80 81       	ld	r24, Z
    2db2:	8e 7f       	andi	r24, 0xFE	; 254
    2db4:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    2db6:	80 81       	ld	r24, Z
    2db8:	8f 73       	andi	r24, 0x3F	; 63
    2dba:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8f 7c       	andi	r24, 0xCF	; 207
    2dc0:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    2dc2:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    2dcc:	e0 e7       	ldi	r30, 0x70	; 112
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	81 60       	ori	r24, 0x01	; 1
    2dd4:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    2dd6:	60 e7       	ldi	r22, 0x70	; 112
    2dd8:	77 e1       	ldi	r23, 0x17	; 23
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2de2:	ef e6       	ldi	r30, 0x6F	; 111
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	8d 7f       	andi	r24, 0xFD	; 253
    2dea:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    2dec:	10 92 69 05 	sts	0x0569, r1
    2df0:	10 92 6a 05 	sts	0x056A, r1
    2df4:	10 92 6b 05 	sts	0x056B, r1
    2df8:	10 92 6c 05 	sts	0x056C, r1
  
  sei();
    2dfc:	78 94       	sei
}
    2dfe:	08 95       	ret

00002e00 <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    2e00:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2e02:	81 b3       	in	r24, 0x11	; 17
    2e04:	85 73       	andi	r24, 0x35	; 53
    2e06:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e08:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e0a:	40 e6       	ldi	r20, 0x60	; 96
    2e0c:	54 e0       	ldi	r21, 0x04	; 4
    2e0e:	13 c0       	rjmp	.+38     	; 0x2e36 <moveLeft+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    2e10:	21 50       	subi	r18, 0x01	; 1
    2e12:	30 40       	sbci	r19, 0x00	; 0
    2e14:	4b 9b       	sbis	0x09, 3	; 9
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <moveLeft+0x1c>
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	08 95       	ret
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2e1c:	81 b3       	in	r24, 0x11	; 17
    2e1e:	8a 7c       	andi	r24, 0xCA	; 202
    2e20:	81 60       	ori	r24, 0x01	; 1
    2e22:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e24:	89 2f       	mov	r24, r25
    2e26:	8a 95       	dec	r24
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <moveLeft+0x26>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2e2a:	81 b3       	in	r24, 0x11	; 17
    2e2c:	8a 7c       	andi	r24, 0xCA	; 202
    2e2e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e30:	fa 01       	movw	r30, r20
    2e32:	31 97       	sbiw	r30, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <moveLeft+0x32>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2e36:	21 15       	cp	r18, r1
    2e38:	31 05       	cpc	r19, r1
    2e3a:	51 f7       	brne	.-44     	; 0x2e10 <moveLeft+0x10>
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    2e3e:	08 95       	ret

00002e40 <moveRight>:

unsigned char moveRight( unsigned int distance ) 
{
    2e40:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    2e42:	81 b3       	in	r24, 0x11	; 17
    2e44:	85 73       	andi	r24, 0x35	; 53
    2e46:	82 60       	ori	r24, 0x02	; 2
    2e48:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e4a:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e4c:	40 e6       	ldi	r20, 0x60	; 96
    2e4e:	54 e0       	ldi	r21, 0x04	; 4
    2e50:	13 c0       	rjmp	.+38     	; 0x2e78 <moveRight+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    2e52:	21 50       	subi	r18, 0x01	; 1
    2e54:	30 40       	sbci	r19, 0x00	; 0
    2e56:	4a 9b       	sbis	0x09, 2	; 9
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <moveRight+0x1e>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	08 95       	ret
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2e5e:	81 b3       	in	r24, 0x11	; 17
    2e60:	8a 7c       	andi	r24, 0xCA	; 202
    2e62:	81 60       	ori	r24, 0x01	; 1
    2e64:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e66:	89 2f       	mov	r24, r25
    2e68:	8a 95       	dec	r24
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <moveRight+0x28>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    2e6c:	81 b3       	in	r24, 0x11	; 17
    2e6e:	8a 7c       	andi	r24, 0xCA	; 202
    2e70:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e72:	fa 01       	movw	r30, r20
    2e74:	31 97       	sbiw	r30, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <moveRight+0x34>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2e78:	21 15       	cp	r18, r1
    2e7a:	31 05       	cpc	r19, r1
    2e7c:	51 f7       	brne	.-44     	; 0x2e52 <moveRight+0x12>
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2e80:	08 95       	ret

00002e82 <moveForward>:

unsigned char moveForward( unsigned int distance ) 
{
    2e82:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2e84:	81 b3       	in	r24, 0x11	; 17
    2e86:	85 73       	andi	r24, 0x35	; 53
    2e88:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e8a:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e8c:	40 e6       	ldi	r20, 0x60	; 96
    2e8e:	54 e0       	ldi	r21, 0x04	; 4
    2e90:	13 c0       	rjmp	.+38     	; 0x2eb8 <moveForward+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    2e92:	21 50       	subi	r18, 0x01	; 1
    2e94:	30 40       	sbci	r19, 0x00	; 0
    2e96:	48 9b       	sbis	0x09, 0	; 9
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <moveForward+0x1c>
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	08 95       	ret
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2e9e:	81 b3       	in	r24, 0x11	; 17
    2ea0:	8a 7c       	andi	r24, 0xCA	; 202
    2ea2:	84 60       	ori	r24, 0x04	; 4
    2ea4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ea6:	89 2f       	mov	r24, r25
    2ea8:	8a 95       	dec	r24
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <moveForward+0x26>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2eac:	81 b3       	in	r24, 0x11	; 17
    2eae:	8a 7c       	andi	r24, 0xCA	; 202
    2eb0:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eb2:	fa 01       	movw	r30, r20
    2eb4:	31 97       	sbiw	r30, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <moveForward+0x32>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2eb8:	21 15       	cp	r18, r1
    2eba:	31 05       	cpc	r19, r1
    2ebc:	51 f7       	brne	.-44     	; 0x2e92 <moveForward+0x10>
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2ec0:	08 95       	ret

00002ec2 <moveBack>:

unsigned char moveBack( unsigned int distance ) 
{
    2ec2:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    2ec4:	81 b3       	in	r24, 0x11	; 17
    2ec6:	85 73       	andi	r24, 0x35	; 53
    2ec8:	88 60       	ori	r24, 0x08	; 8
    2eca:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ecc:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ece:	40 e6       	ldi	r20, 0x60	; 96
    2ed0:	54 e0       	ldi	r21, 0x04	; 4
    2ed2:	13 c0       	rjmp	.+38     	; 0x2efa <moveBack+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    2ed4:	21 50       	subi	r18, 0x01	; 1
    2ed6:	30 40       	sbci	r19, 0x00	; 0
    2ed8:	49 9b       	sbis	0x09, 1	; 9
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <moveBack+0x1e>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	08 95       	ret
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2ee0:	81 b3       	in	r24, 0x11	; 17
    2ee2:	8a 7c       	andi	r24, 0xCA	; 202
    2ee4:	84 60       	ori	r24, 0x04	; 4
    2ee6:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ee8:	89 2f       	mov	r24, r25
    2eea:	8a 95       	dec	r24
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <moveBack+0x28>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2eee:	81 b3       	in	r24, 0x11	; 17
    2ef0:	8a 7c       	andi	r24, 0xCA	; 202
    2ef2:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ef4:	fa 01       	movw	r30, r20
    2ef6:	31 97       	sbiw	r30, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <moveBack+0x34>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2efa:	21 15       	cp	r18, r1
    2efc:	31 05       	cpc	r19, r1
    2efe:	51 f7       	brne	.-44     	; 0x2ed4 <moveBack+0x12>
    2f00:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    2f02:	08 95       	ret

00002f04 <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    2f04:	80 91 6f 00 	lds	r24, 0x006F
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	96 95       	lsr	r25
    2f0c:	87 95       	ror	r24
}
    2f0e:	81 70       	andi	r24, 0x01	; 1
    2f10:	08 95       	ret

00002f12 <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    2f12:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    2f18:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    2f1a:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    2f1c:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    2f1e:	9f e8       	ldi	r25, 0x8F	; 143
    2f20:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    2f22:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    2f24:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    2f28:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    2f2c:	3f ec       	ldi	r19, 0xCF	; 207
    2f2e:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    2f32:	20 ef       	ldi	r18, 0xF0	; 240
    2f34:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    2f38:	8c e9       	ldi	r24, 0x9C	; 156
    2f3a:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    2f3c:	82 e2       	ldi	r24, 0x22	; 34
    2f3e:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    2f40:	83 e1       	ldi	r24, 0x13	; 19
    2f42:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    2f44:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    2f46:	80 e3       	ldi	r24, 0x30	; 48
    2f48:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    2f4a:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    2f4c:	83 e2       	ldi	r24, 0x23	; 35
    2f4e:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    2f56:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    2f5a:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    2f5e:	20 93 0b 01 	sts	0x010B, r18
}
    2f62:	08 95       	ret

00002f64 <st_go_home>:

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    2f64:	10 92 4b 05 	sts	0x054B, r1

// reset position machine thinks we are at.
	plan_init();
    2f68:	0e 94 2f 0c 	call	0x185e	; 0x185e <plan_init>
	gc_init();
    2f6c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <gc_init>



	// if head down, set head up
	if( is_head_down() ) {
    2f70:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    2f74:	88 23       	and	r24, r24
    2f76:	69 f0       	breq	.+26     	; 0x2f92 <st_go_home+0x2e>
		head_down(0);
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
		
		//check again
		if(is_head_down() ){
    2f80:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    2f84:	88 23       	and	r24, r24
    2f86:	29 f0       	breq	.+10     	; 0x2f92 <st_go_home+0x2e>
			printPgmString(PSTR("home failed\r\n"));
    2f88:	8f ef       	ldi	r24, 0xFF	; 255
    2f8a:	94 e0       	ldi	r25, 0x04	; 4
    2f8c:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
    2f90:	08 95       	ret
			return;
		}

	}
	cli();
    2f92:	f8 94       	cli
	// tool changer off
	atc_fire(0);	
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <atc_fire>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    2f9c:	4b 9b       	sbis	0x09, 3	; 9
    2f9e:	17 c0       	rjmp	.+46     	; 0x2fce <st_go_home+0x6a>
		// no longer homed
		gHomed = FALSE;
    2fa0:	10 92 4b 05 	sts	0x054B, r1
		printPgmString(PSTR("xLimit1\r\n"));
    2fa4:	8d e0       	ldi	r24, 0x0D	; 13
    2fa6:	95 e0       	ldi	r25, 0x05	; 5
    2fa8:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    2fac:	88 ee       	ldi	r24, 0xE8	; 232
    2fae:	93 e0       	ldi	r25, 0x03	; 3
    2fb0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <moveRight>
    2fb4:	88 23       	and	r24, r24
    2fb6:	11 f4       	brne	.+4      	; 0x2fbc <st_go_home+0x58>
			sei();
    2fb8:	78 94       	sei
    2fba:	08 95       	ret
			return;
    2fbc:	80 ed       	ldi	r24, 0xD0	; 208
    2fbe:	97 e0       	ldi	r25, 0x07	; 7
    2fc0:	20 e9       	ldi	r18, 0x90	; 144
    2fc2:	31 e0       	ldi	r19, 0x01	; 1
    2fc4:	f9 01       	movw	r30, r18
    2fc6:	31 97       	sbiw	r30, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <st_go_home+0x62>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fcc:	d9 f7       	brne	.-10     	; 0x2fc4 <st_go_home+0x60>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    2fce:	48 9b       	sbis	0x09, 0	; 9
    2fd0:	17 c0       	rjmp	.+46     	; 0x3000 <st_go_home+0x9c>
		// no longer homed
		gHomed = FALSE;
    2fd2:	10 92 4b 05 	sts	0x054B, r1
		printPgmString(PSTR("yLimit1\r\n"));
    2fd6:	87 e1       	ldi	r24, 0x17	; 23
    2fd8:	95 e0       	ldi	r25, 0x05	; 5
    2fda:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    2fde:	88 ee       	ldi	r24, 0xE8	; 232
    2fe0:	93 e0       	ldi	r25, 0x03	; 3
    2fe2:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <moveBack>
    2fe6:	88 23       	and	r24, r24
    2fe8:	11 f4       	brne	.+4      	; 0x2fee <st_go_home+0x8a>
			sei();
    2fea:	78 94       	sei
    2fec:	08 95       	ret
			return;
    2fee:	80 ed       	ldi	r24, 0xD0	; 208
    2ff0:	97 e0       	ldi	r25, 0x07	; 7
    2ff2:	20 e9       	ldi	r18, 0x90	; 144
    2ff4:	31 e0       	ldi	r19, 0x01	; 1
    2ff6:	f9 01       	movw	r30, r18
    2ff8:	31 97       	sbiw	r30, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <st_go_home+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffe:	d9 f7       	brne	.-10     	; 0x2ff6 <st_go_home+0x92>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    3000:	04 99       	sbic	0x00, 4	; 0
    3002:	07 c0       	rjmp	.+14     	; 0x3012 <st_go_home+0xae>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0e 94 00 17 	call	0x2e00	; 0x2e00 <moveLeft>
    300c:	88 23       	and	r24, r24
    300e:	c1 f7       	brne	.-16     	; 0x3000 <st_go_home+0x9c>
    3010:	11 c0       	rjmp	.+34     	; 0x3034 <st_go_home+0xd0>
    3012:	80 ed       	ldi	r24, 0xD0	; 208
    3014:	97 e0       	ldi	r25, 0x07	; 7
    3016:	20 e9       	ldi	r18, 0x90	; 144
    3018:	31 e0       	ldi	r19, 0x01	; 1
    301a:	f9 01       	movw	r30, r18
    301c:	31 97       	sbiw	r30, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <st_go_home+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	d9 f7       	brne	.-10     	; 0x301a <st_go_home+0xb6>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    3024:	90 99       	sbic	0x12, 0	; 18
    3026:	06 c0       	rjmp	.+12     	; 0x3034 <st_go_home+0xd0>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <moveForward>
    3030:	88 23       	and	r24, r24
    3032:	c1 f7       	brne	.-16     	; 0x3024 <st_go_home+0xc0>
	printPgmString(PSTR("\r\n"));
#endif

error:;

	sei();
    3034:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    3036:	89 b1       	in	r24, 0x09	; 9
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	8f 70       	andi	r24, 0x0F	; 15
    303c:	90 70       	andi	r25, 0x00	; 0
    303e:	89 2b       	or	r24, r25
    3040:	39 f4       	brne	.+14     	; 0x3050 <st_go_home+0xec>
		gHomed = TRUE ;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	80 93 4b 05 	sts	0x054B, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    3048:	10 92 64 05 	sts	0x0564, r1
    304c:	10 92 63 05 	sts	0x0563, r1
    3050:	08 95       	ret

00003052 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    3052:	07 c0       	rjmp	.+14     	; 0x3062 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    3054:	83 b7       	in	r24, 0x33	; 51
    3056:	81 60       	ori	r24, 0x01	; 1
    3058:	83 bf       	out	0x33, r24	; 51
    305a:	88 95       	sleep
    305c:	83 b7       	in	r24, 0x33	; 51
    305e:	8e 7f       	andi	r24, 0xFE	; 254
    3060:	83 bf       	out	0x33, r24	; 51
    3062:	0e 94 b2 0a 	call	0x1564	; 0x1564 <plan_get_current_block>
    3066:	89 2b       	or	r24, r25
    3068:	a9 f7       	brne	.-22     	; 0x3054 <st_synchronize+0x2>
}
    306a:	08 95       	ret

0000306c <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    306c:	1f 92       	push	r1
    306e:	0f 92       	push	r0
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	0f 92       	push	r0
    3074:	0b b6       	in	r0, 0x3b	; 59
    3076:	0f 92       	push	r0
    3078:	11 24       	eor	r1, r1
    307a:	ef 92       	push	r14
    307c:	ff 92       	push	r15
    307e:	0f 93       	push	r16
    3080:	1f 93       	push	r17
    3082:	2f 93       	push	r18
    3084:	3f 93       	push	r19
    3086:	4f 93       	push	r20
    3088:	5f 93       	push	r21
    308a:	6f 93       	push	r22
    308c:	7f 93       	push	r23
    308e:	8f 93       	push	r24
    3090:	9f 93       	push	r25
    3092:	af 93       	push	r26
    3094:	bf 93       	push	r27
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	ef 93       	push	r30
    309c:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    309e:	80 91 4b 05 	lds	r24, 0x054B
    30a2:	88 23       	and	r24, r24
    30a4:	11 f4       	brne	.+4      	; 0x30aa <__vector_17+0x3e>
		// set ack
		ackHost = 'H';
    30a6:	88 e4       	ldi	r24, 0x48	; 72
    30a8:	15 c0       	rjmp	.+42     	; 0x30d4 <__vector_17+0x68>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

// don't move if the head is down, this one is ok to let it keep running  
  if( is_head_down() ) {
    30aa:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    30ae:	88 23       	and	r24, r24
    30b0:	09 f0       	breq	.+2      	; 0x30b4 <__vector_17+0x48>
    30b2:	77 c2       	rjmp	.+1262   	; 0x35a2 <__vector_17+0x536>
  	return;
 }

  if(busy){ 
    30b4:	80 91 63 05 	lds	r24, 0x0563
    30b8:	90 91 64 05 	lds	r25, 0x0564
    30bc:	89 2b       	or	r24, r25
    30be:	09 f0       	breq	.+2      	; 0x30c2 <__vector_17+0x56>
    30c0:	70 c2       	rjmp	.+1248   	; 0x35a2 <__vector_17+0x536>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    30c2:	89 b1       	in	r24, 0x09	; 9
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	8f 70       	andi	r24, 0x0F	; 15
    30c8:	90 70       	andi	r25, 0x00	; 0
    30ca:	89 2b       	or	r24, r25
    30cc:	59 f0       	breq	.+22     	; 0x30e4 <__vector_17+0x78>
	gHomed = FALSE ;
    30ce:	10 92 4b 05 	sts	0x054B, r1
		// set ack
	  ackHost = 'L';
    30d2:	8c e4       	ldi	r24, 0x4C	; 76
    30d4:	80 93 4a 05 	sts	0x054A, r24
	DISABLE_STEPPER_DRIVER_INTERRUPT();
    30d8:	80 91 6f 00 	lds	r24, 0x006F
    30dc:	8d 7f       	andi	r24, 0xFD	; 253
    30de:	80 93 6f 00 	sts	0x006F, r24
    30e2:	5f c2       	rjmp	.+1214   	; 0x35a2 <__vector_17+0x536>
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    30e4:	91 b3       	in	r25, 0x11	; 17
    30e6:	80 91 9b 06 	lds	r24, 0x069B
    30ea:	8a 7c       	andi	r24, 0xCA	; 202
    30ec:	95 73       	andi	r25, 0x35	; 53
    30ee:	89 2b       	or	r24, r25
    30f0:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    30f2:	81 b3       	in	r24, 0x11	; 17
    30f4:	8a 7c       	andi	r24, 0xCA	; 202
    30f6:	90 91 4e 05 	lds	r25, 0x054E
    30fa:	89 2b       	or	r24, r25
    30fc:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    30fe:	80 91 86 06 	lds	r24, 0x0686
    3102:	88 0f       	add	r24, r24
    3104:	84 50       	subi	r24, 0x04	; 4
    3106:	81 95       	neg	r24
    3108:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    310c:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	90 93 64 05 	sts	0x0564, r25
    3116:	80 93 63 05 	sts	0x0563, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    311a:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    311c:	80 91 4c 05 	lds	r24, 0x054C
    3120:	90 91 4d 05 	lds	r25, 0x054D
    3124:	89 2b       	or	r24, r25
    3126:	09 f0       	breq	.+2      	; 0x312a <__vector_17+0xbe>
    3128:	60 c0       	rjmp	.+192    	; 0x31ea <__vector_17+0x17e>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    312a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <plan_get_current_block>
    312e:	ec 01       	movw	r28, r24
    3130:	90 93 4d 05 	sts	0x054D, r25
    3134:	80 93 4c 05 	sts	0x054C, r24
    if (current_block != NULL) {
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	09 f4       	brne	.+2      	; 0x313e <__vector_17+0xd2>
    313c:	4e c0       	rjmp	.+156    	; 0x31da <__vector_17+0x16e>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    313e:	6d a9       	ldd	r22, Y+53	; 0x35
    3140:	7e a9       	ldd	r23, Y+54	; 0x36
    3142:	8f a9       	ldd	r24, Y+55	; 0x37
    3144:	98 ad       	ldd	r25, Y+56	; 0x38
    3146:	60 93 6d 05 	sts	0x056D, r22
    314a:	70 93 6e 05 	sts	0x056E, r23
    314e:	80 93 6f 05 	sts	0x056F, r24
    3152:	90 93 70 05 	sts	0x0570, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    3156:	10 92 69 05 	sts	0x0569, r1
    315a:	10 92 6a 05 	sts	0x056A, r1
    315e:	10 92 6b 05 	sts	0x056B, r1
    3162:	10 92 6c 05 	sts	0x056C, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    3166:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    316a:	89 89       	ldd	r24, Y+17	; 0x11
    316c:	9a 89       	ldd	r25, Y+18	; 0x12
    316e:	ab 89       	ldd	r26, Y+19	; 0x13
    3170:	bc 89       	ldd	r27, Y+20	; 0x14
    3172:	b5 95       	asr	r27
    3174:	a7 95       	ror	r26
    3176:	97 95       	ror	r25
    3178:	87 95       	ror	r24
    317a:	b0 95       	com	r27
    317c:	a0 95       	com	r26
    317e:	90 95       	com	r25
    3180:	81 95       	neg	r24
    3182:	9f 4f       	sbci	r25, 0xFF	; 255
    3184:	af 4f       	sbci	r26, 0xFF	; 255
    3186:	bf 4f       	sbci	r27, 0xFF	; 255
    3188:	80 93 4f 05 	sts	0x054F, r24
    318c:	90 93 50 05 	sts	0x0550, r25
    3190:	a0 93 51 05 	sts	0x0551, r26
    3194:	b0 93 52 05 	sts	0x0552, r27
      counter_y = counter_x;
    3198:	80 93 53 05 	sts	0x0553, r24
    319c:	90 93 54 05 	sts	0x0554, r25
    31a0:	a0 93 55 05 	sts	0x0555, r26
    31a4:	b0 93 56 05 	sts	0x0556, r27
      counter_z = counter_x;
    31a8:	80 93 57 05 	sts	0x0557, r24
    31ac:	90 93 58 05 	sts	0x0558, r25
    31b0:	a0 93 59 05 	sts	0x0559, r26
    31b4:	b0 93 5a 05 	sts	0x055A, r27
      counter_c = counter_x;
    31b8:	80 93 5b 05 	sts	0x055B, r24
    31bc:	90 93 5c 05 	sts	0x055C, r25
    31c0:	a0 93 5d 05 	sts	0x055D, r26
    31c4:	b0 93 5e 05 	sts	0x055E, r27
      step_events_completed = 0;
    31c8:	10 92 5f 05 	sts	0x055F, r1
    31cc:	10 92 60 05 	sts	0x0560, r1
    31d0:	10 92 61 05 	sts	0x0561, r1
    31d4:	10 92 62 05 	sts	0x0562, r1
    31d8:	08 c0       	rjmp	.+16     	; 0x31ea <__vector_17+0x17e>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    31da:	80 91 6f 00 	lds	r24, 0x006F
    31de:	8d 7f       	andi	r24, 0xFD	; 253
    31e0:	80 93 6f 00 	sts	0x006F, r24

		// set ack
	  ackHost = 'X';
    31e4:	88 e5       	ldi	r24, 0x58	; 88
    31e6:	80 93 4a 05 	sts	0x054A, r24

    }    
  } 

  if (current_block != NULL) {
    31ea:	e0 91 4c 05 	lds	r30, 0x054C
    31ee:	f0 91 4d 05 	lds	r31, 0x054D
    31f2:	30 97       	sbiw	r30, 0x00	; 0
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <__vector_17+0x18c>
    31f6:	ee c0       	rjmp	.+476    	; 0x33d4 <__vector_17+0x368>
    dir_bits = current_block->direction_bits;
    31f8:	80 89       	ldd	r24, Z+16	; 0x10
    31fa:	80 93 9b 06 	sts	0x069B, r24
    out_bits = 0;
    31fe:	10 92 4e 05 	sts	0x054E, r1
    counter_x += current_block->steps_x;
    3202:	20 91 4f 05 	lds	r18, 0x054F
    3206:	30 91 50 05 	lds	r19, 0x0550
    320a:	40 91 51 05 	lds	r20, 0x0551
    320e:	50 91 52 05 	lds	r21, 0x0552
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	a2 81       	ldd	r26, Z+2	; 0x02
    3218:	b3 81       	ldd	r27, Z+3	; 0x03
    321a:	28 0f       	add	r18, r24
    321c:	39 1f       	adc	r19, r25
    321e:	4a 1f       	adc	r20, r26
    3220:	5b 1f       	adc	r21, r27
    3222:	20 93 4f 05 	sts	0x054F, r18
    3226:	30 93 50 05 	sts	0x0550, r19
    322a:	40 93 51 05 	sts	0x0551, r20
    322e:	50 93 52 05 	sts	0x0552, r21
    if (counter_x > 0) {
    3232:	12 16       	cp	r1, r18
    3234:	13 06       	cpc	r1, r19
    3236:	14 06       	cpc	r1, r20
    3238:	15 06       	cpc	r1, r21
    323a:	9c f4       	brge	.+38     	; 0x3262 <__vector_17+0x1f6>
      out_bits |= (1<<X_STEP_BIT);
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	80 93 4e 05 	sts	0x054E, r24
      counter_x -= current_block->step_event_count;
    3242:	81 89       	ldd	r24, Z+17	; 0x11
    3244:	92 89       	ldd	r25, Z+18	; 0x12
    3246:	a3 89       	ldd	r26, Z+19	; 0x13
    3248:	b4 89       	ldd	r27, Z+20	; 0x14
    324a:	28 1b       	sub	r18, r24
    324c:	39 0b       	sbc	r19, r25
    324e:	4a 0b       	sbc	r20, r26
    3250:	5b 0b       	sbc	r21, r27
    3252:	20 93 4f 05 	sts	0x054F, r18
    3256:	30 93 50 05 	sts	0x0550, r19
    325a:	40 93 51 05 	sts	0x0551, r20
    325e:	50 93 52 05 	sts	0x0552, r21
    }
    counter_y += current_block->steps_y;
    3262:	20 91 53 05 	lds	r18, 0x0553
    3266:	30 91 54 05 	lds	r19, 0x0554
    326a:	40 91 55 05 	lds	r20, 0x0555
    326e:	50 91 56 05 	lds	r21, 0x0556
    3272:	84 81       	ldd	r24, Z+4	; 0x04
    3274:	95 81       	ldd	r25, Z+5	; 0x05
    3276:	a6 81       	ldd	r26, Z+6	; 0x06
    3278:	b7 81       	ldd	r27, Z+7	; 0x07
    327a:	28 0f       	add	r18, r24
    327c:	39 1f       	adc	r19, r25
    327e:	4a 1f       	adc	r20, r26
    3280:	5b 1f       	adc	r21, r27
    3282:	20 93 53 05 	sts	0x0553, r18
    3286:	30 93 54 05 	sts	0x0554, r19
    328a:	40 93 55 05 	sts	0x0555, r20
    328e:	50 93 56 05 	sts	0x0556, r21
    if (counter_y > 0) {
    3292:	12 16       	cp	r1, r18
    3294:	13 06       	cpc	r1, r19
    3296:	14 06       	cpc	r1, r20
    3298:	15 06       	cpc	r1, r21
    329a:	ac f4       	brge	.+42     	; 0x32c6 <__vector_17+0x25a>
      out_bits |= (1<<Y_STEP_BIT);
    329c:	80 91 4e 05 	lds	r24, 0x054E
    32a0:	84 60       	ori	r24, 0x04	; 4
    32a2:	80 93 4e 05 	sts	0x054E, r24
      counter_y -= current_block->step_event_count;
    32a6:	81 89       	ldd	r24, Z+17	; 0x11
    32a8:	92 89       	ldd	r25, Z+18	; 0x12
    32aa:	a3 89       	ldd	r26, Z+19	; 0x13
    32ac:	b4 89       	ldd	r27, Z+20	; 0x14
    32ae:	28 1b       	sub	r18, r24
    32b0:	39 0b       	sbc	r19, r25
    32b2:	4a 0b       	sbc	r20, r26
    32b4:	5b 0b       	sbc	r21, r27
    32b6:	20 93 53 05 	sts	0x0553, r18
    32ba:	30 93 54 05 	sts	0x0554, r19
    32be:	40 93 55 05 	sts	0x0555, r20
    32c2:	50 93 56 05 	sts	0x0556, r21
    }
    counter_z += current_block->steps_z;
    32c6:	20 91 57 05 	lds	r18, 0x0557
    32ca:	30 91 58 05 	lds	r19, 0x0558
    32ce:	40 91 59 05 	lds	r20, 0x0559
    32d2:	50 91 5a 05 	lds	r21, 0x055A
    32d6:	80 85       	ldd	r24, Z+8	; 0x08
    32d8:	91 85       	ldd	r25, Z+9	; 0x09
    32da:	a2 85       	ldd	r26, Z+10	; 0x0a
    32dc:	b3 85       	ldd	r27, Z+11	; 0x0b
    32de:	28 0f       	add	r18, r24
    32e0:	39 1f       	adc	r19, r25
    32e2:	4a 1f       	adc	r20, r26
    32e4:	5b 1f       	adc	r21, r27
    32e6:	20 93 57 05 	sts	0x0557, r18
    32ea:	30 93 58 05 	sts	0x0558, r19
    32ee:	40 93 59 05 	sts	0x0559, r20
    32f2:	50 93 5a 05 	sts	0x055A, r21
    if (counter_z > 0) {
    32f6:	12 16       	cp	r1, r18
    32f8:	13 06       	cpc	r1, r19
    32fa:	14 06       	cpc	r1, r20
    32fc:	15 06       	cpc	r1, r21
    32fe:	ac f4       	brge	.+42     	; 0x332a <__vector_17+0x2be>
      out_bits |= (1<<Z_STEP_BIT);
    3300:	80 91 4e 05 	lds	r24, 0x054E
    3304:	80 61       	ori	r24, 0x10	; 16
    3306:	80 93 4e 05 	sts	0x054E, r24
      counter_z -= current_block->step_event_count;
    330a:	81 89       	ldd	r24, Z+17	; 0x11
    330c:	92 89       	ldd	r25, Z+18	; 0x12
    330e:	a3 89       	ldd	r26, Z+19	; 0x13
    3310:	b4 89       	ldd	r27, Z+20	; 0x14
    3312:	28 1b       	sub	r18, r24
    3314:	39 0b       	sbc	r19, r25
    3316:	4a 0b       	sbc	r20, r26
    3318:	5b 0b       	sbc	r21, r27
    331a:	20 93 57 05 	sts	0x0557, r18
    331e:	30 93 58 05 	sts	0x0558, r19
    3322:	40 93 59 05 	sts	0x0559, r20
    3326:	50 93 5a 05 	sts	0x055A, r21
    }
    counter_c += current_block->steps_c;
    332a:	20 91 5b 05 	lds	r18, 0x055B
    332e:	30 91 5c 05 	lds	r19, 0x055C
    3332:	40 91 5d 05 	lds	r20, 0x055D
    3336:	50 91 5e 05 	lds	r21, 0x055E
    333a:	84 85       	ldd	r24, Z+12	; 0x0c
    333c:	95 85       	ldd	r25, Z+13	; 0x0d
    333e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3340:	b7 85       	ldd	r27, Z+15	; 0x0f
    3342:	28 0f       	add	r18, r24
    3344:	39 1f       	adc	r19, r25
    3346:	4a 1f       	adc	r20, r26
    3348:	5b 1f       	adc	r21, r27
    334a:	20 93 5b 05 	sts	0x055B, r18
    334e:	30 93 5c 05 	sts	0x055C, r19
    3352:	40 93 5d 05 	sts	0x055D, r20
    3356:	50 93 5e 05 	sts	0x055E, r21
    if (counter_c > 0) {
    335a:	12 16       	cp	r1, r18
    335c:	13 06       	cpc	r1, r19
    335e:	14 06       	cpc	r1, r20
    3360:	15 06       	cpc	r1, r21
    3362:	ac f4       	brge	.+42     	; 0x338e <__vector_17+0x322>
      out_bits |= (1<<C_STEP_BIT);
    3364:	80 91 4e 05 	lds	r24, 0x054E
    3368:	80 62       	ori	r24, 0x20	; 32
    336a:	80 93 4e 05 	sts	0x054E, r24
      counter_c -= current_block->step_event_count;
    336e:	81 89       	ldd	r24, Z+17	; 0x11
    3370:	92 89       	ldd	r25, Z+18	; 0x12
    3372:	a3 89       	ldd	r26, Z+19	; 0x13
    3374:	b4 89       	ldd	r27, Z+20	; 0x14
    3376:	28 1b       	sub	r18, r24
    3378:	39 0b       	sbc	r19, r25
    337a:	4a 0b       	sbc	r20, r26
    337c:	5b 0b       	sbc	r21, r27
    337e:	20 93 5b 05 	sts	0x055B, r18
    3382:	30 93 5c 05 	sts	0x055C, r19
    3386:	40 93 5d 05 	sts	0x055D, r20
    338a:	50 93 5e 05 	sts	0x055E, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    338e:	80 91 5f 05 	lds	r24, 0x055F
    3392:	90 91 60 05 	lds	r25, 0x0560
    3396:	a0 91 61 05 	lds	r26, 0x0561
    339a:	b0 91 62 05 	lds	r27, 0x0562
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	a1 1d       	adc	r26, r1
    33a2:	b1 1d       	adc	r27, r1
    33a4:	80 93 5f 05 	sts	0x055F, r24
    33a8:	90 93 60 05 	sts	0x0560, r25
    33ac:	a0 93 61 05 	sts	0x0561, r26
    33b0:	b0 93 62 05 	sts	0x0562, r27
    if (step_events_completed >= current_block->step_event_count) {
    33b4:	21 89       	ldd	r18, Z+17	; 0x11
    33b6:	32 89       	ldd	r19, Z+18	; 0x12
    33b8:	43 89       	ldd	r20, Z+19	; 0x13
    33ba:	54 89       	ldd	r21, Z+20	; 0x14
    33bc:	82 17       	cp	r24, r18
    33be:	93 07       	cpc	r25, r19
    33c0:	a4 07       	cpc	r26, r20
    33c2:	b5 07       	cpc	r27, r21
    33c4:	48 f0       	brcs	.+18     	; 0x33d8 <__vector_17+0x36c>
      current_block = NULL;
    33c6:	10 92 4d 05 	sts	0x054D, r1
    33ca:	10 92 4c 05 	sts	0x054C, r1
      plan_discard_current_block();
    33ce:	0e 94 99 0a 	call	0x1532	; 0x1532 <plan_discard_current_block>
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <__vector_17+0x36c>
    }
  } else {
    out_bits = 0;
    33d4:	10 92 4e 05 	sts	0x054E, r1
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    33d8:	80 91 9b 06 	lds	r24, 0x069B
    33dc:	9a e0       	ldi	r25, 0x0A	; 10
    33de:	89 27       	eor	r24, r25
    33e0:	80 93 9b 06 	sts	0x069B, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    33e4:	20 91 65 05 	lds	r18, 0x0565
    33e8:	30 91 66 05 	lds	r19, 0x0566
    33ec:	40 91 67 05 	lds	r20, 0x0567
    33f0:	50 91 68 05 	lds	r21, 0x0568
    33f4:	80 91 69 05 	lds	r24, 0x0569
    33f8:	90 91 6a 05 	lds	r25, 0x056A
    33fc:	a0 91 6b 05 	lds	r26, 0x056B
    3400:	b0 91 6c 05 	lds	r27, 0x056C
    3404:	28 0f       	add	r18, r24
    3406:	39 1f       	adc	r19, r25
    3408:	4a 1f       	adc	r20, r26
    340a:	5b 1f       	adc	r21, r27
    340c:	20 93 69 05 	sts	0x0569, r18
    3410:	30 93 6a 05 	sts	0x056A, r19
    3414:	40 93 6b 05 	sts	0x056B, r20
    3418:	50 93 6c 05 	sts	0x056C, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    341c:	21 38       	cpi	r18, 0x81	; 129
    341e:	8a e1       	ldi	r24, 0x1A	; 26
    3420:	38 07       	cpc	r19, r24
    3422:	86 e0       	ldi	r24, 0x06	; 6
    3424:	48 07       	cpc	r20, r24
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	58 07       	cpc	r21, r24
    342a:	08 f4       	brcc	.+2      	; 0x342e <__vector_17+0x3c2>
    342c:	b6 c0       	rjmp	.+364    	; 0x359a <__vector_17+0x52e>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    342e:	20 58       	subi	r18, 0x80	; 128
    3430:	3a 41       	sbci	r19, 0x1A	; 26
    3432:	46 40       	sbci	r20, 0x06	; 6
    3434:	50 40       	sbci	r21, 0x00	; 0
    3436:	20 93 69 05 	sts	0x0569, r18
    343a:	30 93 6a 05 	sts	0x056A, r19
    343e:	40 93 6b 05 	sts	0x056B, r20
    3442:	50 93 6c 05 	sts	0x056C, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    3446:	e0 91 4c 05 	lds	r30, 0x054C
    344a:	f0 91 4d 05 	lds	r31, 0x054D
    344e:	30 97       	sbiw	r30, 0x00	; 0
    3450:	09 f4       	brne	.+2      	; 0x3454 <__vector_17+0x3e8>
    3452:	a3 c0       	rjmp	.+326    	; 0x359a <__vector_17+0x52e>
    if (step_events_completed < current_block->accelerate_until) {
    3454:	e0 90 5f 05 	lds	r14, 0x055F
    3458:	f0 90 60 05 	lds	r15, 0x0560
    345c:	00 91 61 05 	lds	r16, 0x0561
    3460:	10 91 62 05 	lds	r17, 0x0562
    3464:	ef 5b       	subi	r30, 0xBF	; 191
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	80 81       	ld	r24, Z
    346a:	91 81       	ldd	r25, Z+1	; 0x01
    346c:	a2 81       	ldd	r26, Z+2	; 0x02
    346e:	b3 81       	ldd	r27, Z+3	; 0x03
    3470:	e1 54       	subi	r30, 0x41	; 65
    3472:	f0 40       	sbci	r31, 0x00	; 0
    3474:	e8 16       	cp	r14, r24
    3476:	f9 06       	cpc	r15, r25
    3478:	0a 07       	cpc	r16, r26
    347a:	1b 07       	cpc	r17, r27
    347c:	68 f5       	brcc	.+90     	; 0x34d8 <__vector_17+0x46c>
      trapezoid_adjusted_rate += current_block->rate_delta;
    347e:	fd 96       	adiw	r30, 0x3d	; 61
    3480:	20 81       	ld	r18, Z
    3482:	31 81       	ldd	r19, Z+1	; 0x01
    3484:	42 81       	ldd	r20, Z+2	; 0x02
    3486:	53 81       	ldd	r21, Z+3	; 0x03
    3488:	fd 97       	sbiw	r30, 0x3d	; 61
    348a:	80 91 6d 05 	lds	r24, 0x056D
    348e:	90 91 6e 05 	lds	r25, 0x056E
    3492:	a0 91 6f 05 	lds	r26, 0x056F
    3496:	b0 91 70 05 	lds	r27, 0x0570
    349a:	28 0f       	add	r18, r24
    349c:	39 1f       	adc	r19, r25
    349e:	4a 1f       	adc	r20, r26
    34a0:	5b 1f       	adc	r21, r27
    34a2:	20 93 6d 05 	sts	0x056D, r18
    34a6:	30 93 6e 05 	sts	0x056E, r19
    34aa:	40 93 6f 05 	sts	0x056F, r20
    34ae:	50 93 70 05 	sts	0x0570, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    34b2:	85 89       	ldd	r24, Z+21	; 0x15
    34b4:	96 89       	ldd	r25, Z+22	; 0x16
    34b6:	a7 89       	ldd	r26, Z+23	; 0x17
    34b8:	b0 8d       	ldd	r27, Z+24	; 0x18
    34ba:	82 17       	cp	r24, r18
    34bc:	93 07       	cpc	r25, r19
    34be:	a4 07       	cpc	r26, r20
    34c0:	b5 07       	cpc	r27, r21
    34c2:	08 f0       	brcs	.+2      	; 0x34c6 <__vector_17+0x45a>
    34c4:	4e c0       	rjmp	.+156    	; 0x3562 <__vector_17+0x4f6>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    34c6:	80 93 6d 05 	sts	0x056D, r24
    34ca:	90 93 6e 05 	sts	0x056E, r25
    34ce:	a0 93 6f 05 	sts	0x056F, r26
    34d2:	b0 93 70 05 	sts	0x0570, r27
    34d6:	45 c0       	rjmp	.+138    	; 0x3562 <__vector_17+0x4f6>
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    34d8:	eb 5b       	subi	r30, 0xBB	; 187
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	91 81       	ldd	r25, Z+1	; 0x01
    34e0:	a2 81       	ldd	r26, Z+2	; 0x02
    34e2:	b3 81       	ldd	r27, Z+3	; 0x03
    34e4:	e5 54       	subi	r30, 0x45	; 69
    34e6:	f0 40       	sbci	r31, 0x00	; 0
    34e8:	20 91 6d 05 	lds	r18, 0x056D
    34ec:	30 91 6e 05 	lds	r19, 0x056E
    34f0:	40 91 6f 05 	lds	r20, 0x056F
    34f4:	50 91 70 05 	lds	r21, 0x0570
    34f8:	8e 15       	cp	r24, r14
    34fa:	9f 05       	cpc	r25, r15
    34fc:	a0 07       	cpc	r26, r16
    34fe:	b1 07       	cpc	r27, r17
    3500:	c8 f5       	brcc	.+114    	; 0x3574 <__vector_17+0x508>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    3502:	fd 96       	adiw	r30, 0x3d	; 61
    3504:	80 81       	ld	r24, Z
    3506:	91 81       	ldd	r25, Z+1	; 0x01
    3508:	a2 81       	ldd	r26, Z+2	; 0x02
    350a:	b3 81       	ldd	r27, Z+3	; 0x03
    350c:	fd 97       	sbiw	r30, 0x3d	; 61
    350e:	82 17       	cp	r24, r18
    3510:	93 07       	cpc	r25, r19
    3512:	a4 07       	cpc	r26, r20
    3514:	b5 07       	cpc	r27, r21
    3516:	60 f4       	brcc	.+24     	; 0x3530 <__vector_17+0x4c4>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3518:	28 1b       	sub	r18, r24
    351a:	39 0b       	sbc	r19, r25
    351c:	4a 0b       	sbc	r20, r26
    351e:	5b 0b       	sbc	r21, r27
    3520:	20 93 6d 05 	sts	0x056D, r18
    3524:	30 93 6e 05 	sts	0x056E, r19
    3528:	40 93 6f 05 	sts	0x056F, r20
    352c:	50 93 70 05 	sts	0x0570, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    3530:	21 ad       	ldd	r18, Z+57	; 0x39
    3532:	32 ad       	ldd	r19, Z+58	; 0x3a
    3534:	43 ad       	ldd	r20, Z+59	; 0x3b
    3536:	54 ad       	ldd	r21, Z+60	; 0x3c
    3538:	80 91 6d 05 	lds	r24, 0x056D
    353c:	90 91 6e 05 	lds	r25, 0x056E
    3540:	a0 91 6f 05 	lds	r26, 0x056F
    3544:	b0 91 70 05 	lds	r27, 0x0570
    3548:	82 17       	cp	r24, r18
    354a:	93 07       	cpc	r25, r19
    354c:	a4 07       	cpc	r26, r20
    354e:	b5 07       	cpc	r27, r21
    3550:	40 f4       	brcc	.+16     	; 0x3562 <__vector_17+0x4f6>
        trapezoid_adjusted_rate = current_block->final_rate;
    3552:	20 93 6d 05 	sts	0x056D, r18
    3556:	30 93 6e 05 	sts	0x056E, r19
    355a:	40 93 6f 05 	sts	0x056F, r20
    355e:	50 93 70 05 	sts	0x0570, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    3562:	60 91 6d 05 	lds	r22, 0x056D
    3566:	70 91 6e 05 	lds	r23, 0x056E
    356a:	80 91 6f 05 	lds	r24, 0x056F
    356e:	90 91 70 05 	lds	r25, 0x0570
    3572:	11 c0       	rjmp	.+34     	; 0x3596 <__vector_17+0x52a>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3574:	65 89       	ldd	r22, Z+21	; 0x15
    3576:	76 89       	ldd	r23, Z+22	; 0x16
    3578:	87 89       	ldd	r24, Z+23	; 0x17
    357a:	90 8d       	ldd	r25, Z+24	; 0x18
    357c:	26 17       	cp	r18, r22
    357e:	37 07       	cpc	r19, r23
    3580:	48 07       	cpc	r20, r24
    3582:	59 07       	cpc	r21, r25
    3584:	51 f0       	breq	.+20     	; 0x359a <__vector_17+0x52e>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3586:	60 93 6d 05 	sts	0x056D, r22
    358a:	70 93 6e 05 	sts	0x056E, r23
    358e:	80 93 6f 05 	sts	0x056F, r24
    3592:	90 93 70 05 	sts	0x0570, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3596:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    359a:	10 92 64 05 	sts	0x0564, r1
    359e:	10 92 63 05 	sts	0x0563, r1
}
    35a2:	ff 91       	pop	r31
    35a4:	ef 91       	pop	r30
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	bf 91       	pop	r27
    35ac:	af 91       	pop	r26
    35ae:	9f 91       	pop	r25
    35b0:	8f 91       	pop	r24
    35b2:	7f 91       	pop	r23
    35b4:	6f 91       	pop	r22
    35b6:	5f 91       	pop	r21
    35b8:	4f 91       	pop	r20
    35ba:	3f 91       	pop	r19
    35bc:	2f 91       	pop	r18
    35be:	1f 91       	pop	r17
    35c0:	0f 91       	pop	r16
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	0f 90       	pop	r0
    35c8:	0b be       	out	0x3b, r0	; 59
    35ca:	0f 90       	pop	r0
    35cc:	0f be       	out	0x3f, r0	; 63
    35ce:	0f 90       	pop	r0
    35d0:	1f 90       	pop	r1
    35d2:	18 95       	reti

000035d4 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    35d4:	ef 92       	push	r14
    35d6:	ff 92       	push	r15
    35d8:	0f 93       	push	r16
    35da:	1f 93       	push	r17
    35dc:	7b 01       	movw	r14, r22
    35de:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    35e0:	22 e0       	ldi	r18, 0x02	; 2
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e0       	ldi	r20, 0x00	; 0
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__divmodsi4>
    35ec:	20 5c       	subi	r18, 0xC0	; 192
    35ee:	3d 4b       	sbci	r19, 0xBD	; 189
    35f0:	40 4f       	sbci	r20, 0xF0	; 240
    35f2:	5f 4f       	sbci	r21, 0xFF	; 255
    35f4:	ca 01       	movw	r24, r20
    35f6:	b9 01       	movw	r22, r18
    35f8:	a8 01       	movw	r20, r16
    35fa:	97 01       	movw	r18, r14
    35fc:	0e 94 c2 24 	call	0x4984	; 0x4984 <__udivmodsi4>
    3600:	c9 01       	movw	r24, r18
    3602:	da 01       	movw	r26, r20
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	a1 09       	sbc	r26, r1
    3608:	b1 09       	sbc	r27, r1
    360a:	29 2f       	mov	r18, r25
    360c:	3a 2f       	mov	r19, r26
    360e:	4b 2f       	mov	r20, r27
    3610:	55 27       	eor	r21, r21
    3612:	01 96       	adiw	r24, 0x01	; 1
    3614:	a1 1d       	adc	r26, r1
    3616:	b1 1d       	adc	r27, r1
    3618:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    361c:	81 50       	subi	r24, 0x01	; 1
    361e:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3622:	e0 ec       	ldi	r30, 0xC0	; 192
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	8d 7f       	andi	r24, 0xFD	; 253
    362a:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    362c:	e1 ec       	ldi	r30, 0xC1	; 193
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	80 61       	ori	r24, 0x10	; 16
    3634:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3636:	80 81       	ld	r24, Z
    3638:	88 60       	ori	r24, 0x08	; 8
    363a:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    363c:	80 81       	ld	r24, Z
    363e:	80 68       	ori	r24, 0x80	; 128
    3640:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	ff 90       	pop	r15
    3648:	ef 90       	pop	r14
    364a:	08 95       	ret

0000364c <serialWrite>:

void serialWrite(unsigned char c)
{
    364c:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    364e:	80 91 c0 00 	lds	r24, 0x00C0
    3652:	85 ff       	sbrs	r24, 5
    3654:	fc cf       	rjmp	.-8      	; 0x364e <serialWrite+0x2>
		;
	UDR0 = c;
    3656:	90 93 c6 00 	sts	0x00C6, r25
}
    365a:	08 95       	ret

0000365c <serialAvailable>:

int serialAvailable()
{
    365c:	80 91 71 05 	lds	r24, 0x0571
    3660:	90 91 72 05 	lds	r25, 0x0572
    3664:	80 50       	subi	r24, 0x00	; 0
    3666:	9f 4f       	sbci	r25, 0xFF	; 255
    3668:	20 91 73 05 	lds	r18, 0x0573
    366c:	30 91 74 05 	lds	r19, 0x0574
    3670:	82 1b       	sub	r24, r18
    3672:	93 0b       	sbc	r25, r19
    3674:	60 e0       	ldi	r22, 0x00	; 0
    3676:	71 e0       	ldi	r23, 0x01	; 1
    3678:	0e 94 af 24 	call	0x495e	; 0x495e <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    367c:	08 95       	ret

0000367e <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    367e:	40 91 73 05 	lds	r20, 0x0573
    3682:	50 91 74 05 	lds	r21, 0x0574
    3686:	80 91 71 05 	lds	r24, 0x0571
    368a:	90 91 72 05 	lds	r25, 0x0572
    368e:	84 17       	cp	r24, r20
    3690:	95 07       	cpc	r25, r21
    3692:	19 f4       	brne	.+6      	; 0x369a <serialRead+0x1c>
    3694:	2f ef       	ldi	r18, 0xFF	; 255
    3696:	3f ef       	ldi	r19, 0xFF	; 255
    3698:	0f c0       	rjmp	.+30     	; 0x36b8 <serialRead+0x3a>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    369a:	fa 01       	movw	r30, r20
    369c:	eb 58       	subi	r30, 0x8B	; 139
    369e:	fa 4f       	sbci	r31, 0xFA	; 250
    36a0:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    36a2:	ca 01       	movw	r24, r20
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	71 e0       	ldi	r23, 0x01	; 1
    36aa:	0e 94 af 24 	call	0x495e	; 0x495e <__divmodhi4>
    36ae:	90 93 74 05 	sts	0x0574, r25
    36b2:	80 93 73 05 	sts	0x0573, r24
		return c;
    36b6:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    36b8:	c9 01       	movw	r24, r18
    36ba:	08 95       	ret

000036bc <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    36bc:	80 91 73 05 	lds	r24, 0x0573
    36c0:	90 91 74 05 	lds	r25, 0x0574
    36c4:	90 93 72 05 	sts	0x0572, r25
    36c8:	80 93 71 05 	sts	0x0571, r24
}
    36cc:	08 95       	ret

000036ce <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    36ce:	1f 92       	push	r1
    36d0:	0f 92       	push	r0
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	0f 92       	push	r0
    36d6:	0b b6       	in	r0, 0x3b	; 59
    36d8:	0f 92       	push	r0
    36da:	11 24       	eor	r1, r1
    36dc:	2f 93       	push	r18
    36de:	3f 93       	push	r19
    36e0:	4f 93       	push	r20
    36e2:	5f 93       	push	r21
    36e4:	6f 93       	push	r22
    36e6:	7f 93       	push	r23
    36e8:	8f 93       	push	r24
    36ea:	9f 93       	push	r25
    36ec:	af 93       	push	r26
    36ee:	bf 93       	push	r27
    36f0:	ef 93       	push	r30
    36f2:	ff 93       	push	r31
	unsigned char c = UDR0;
    36f4:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    36f8:	e0 91 71 05 	lds	r30, 0x0571
    36fc:	f0 91 72 05 	lds	r31, 0x0572
    3700:	cf 01       	movw	r24, r30
    3702:	01 96       	adiw	r24, 0x01	; 1
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	71 e0       	ldi	r23, 0x01	; 1
    3708:	0e 94 af 24 	call	0x495e	; 0x495e <__divmodhi4>
    370c:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    370e:	80 91 73 05 	lds	r24, 0x0573
    3712:	90 91 74 05 	lds	r25, 0x0574
    3716:	28 17       	cp	r18, r24
    3718:	39 07       	cpc	r19, r25
    371a:	39 f0       	breq	.+14     	; 0x372a <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    371c:	eb 58       	subi	r30, 0x8B	; 139
    371e:	fa 4f       	sbci	r31, 0xFA	; 250
    3720:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3722:	30 93 72 05 	sts	0x0572, r19
    3726:	20 93 71 05 	sts	0x0571, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    372a:	ff 91       	pop	r31
    372c:	ef 91       	pop	r30
    372e:	bf 91       	pop	r27
    3730:	af 91       	pop	r26
    3732:	9f 91       	pop	r25
    3734:	8f 91       	pop	r24
    3736:	7f 91       	pop	r23
    3738:	6f 91       	pop	r22
    373a:	5f 91       	pop	r21
    373c:	4f 91       	pop	r20
    373e:	3f 91       	pop	r19
    3740:	2f 91       	pop	r18
    3742:	0f 90       	pop	r0
    3744:	0b be       	out	0x3b, r0	; 59
    3746:	0f 90       	pop	r0
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	0f 90       	pop	r0
    374c:	1f 90       	pop	r1
    374e:	18 95       	reti

00003750 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3750:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3752:	80 91 c0 00 	lds	r24, 0x00C0
    3756:	85 ff       	sbrs	r24, 5
    3758:	fc cf       	rjmp	.-8      	; 0x3752 <printByte+0x2>
		;
	UDR0 = c;
    375a:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    375e:	08 95       	ret

00003760 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3760:	fc 01       	movw	r30, r24
    3762:	07 c0       	rjmp	.+14     	; 0x3772 <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3764:	80 91 c0 00 	lds	r24, 0x00C0
    3768:	85 ff       	sbrs	r24, 5
    376a:	fc cf       	rjmp	.-8      	; 0x3764 <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
    376c:	31 96       	adiw	r30, 0x01	; 1

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    376e:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3772:	90 81       	ld	r25, Z
    3774:	99 23       	and	r25, r25
    3776:	b1 f7       	brne	.-20     	; 0x3764 <printString+0x4>
		printByte(*s++);
}
    3778:	08 95       	ret

0000377a <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    377a:	9c 01       	movw	r18, r24
    377c:	06 c0       	rjmp	.+12     	; 0x378a <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    377e:	80 91 c0 00 	lds	r24, 0x00C0
    3782:	85 ff       	sbrs	r24, 5
    3784:	fc cf       	rjmp	.-8      	; 0x377e <printPgmString+0x4>
		;
	UDR0 = c;
    3786:	90 93 c6 00 	sts	0x00C6, r25
    378a:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    378c:	2f 5f       	subi	r18, 0xFF	; 255
    378e:	3f 4f       	sbci	r19, 0xFF	; 255
    3790:	94 91       	lpm	r25, Z+
    3792:	99 23       	and	r25, r25
    3794:	a1 f7       	brne	.-24     	; 0x377e <printPgmString+0x4>
		printByte(c);
}
    3796:	08 95       	ret

00003798 <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3798:	2f 92       	push	r2
    379a:	3f 92       	push	r3
    379c:	4f 92       	push	r4
    379e:	5f 92       	push	r5
    37a0:	6f 92       	push	r6
    37a2:	7f 92       	push	r7
    37a4:	8f 92       	push	r8
    37a6:	9f 92       	push	r9
    37a8:	af 92       	push	r10
    37aa:	bf 92       	push	r11
    37ac:	cf 92       	push	r12
    37ae:	df 92       	push	r13
    37b0:	ef 92       	push	r14
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
    37c0:	a0 97       	sbiw	r28, 0x20	; 32
    37c2:	0f b6       	in	r0, 0x3f	; 63
    37c4:	f8 94       	cli
    37c6:	de bf       	out	0x3e, r29	; 62
    37c8:	0f be       	out	0x3f, r0	; 63
    37ca:	cd bf       	out	0x3d, r28	; 61
    37cc:	6b 01       	movw	r12, r22
    37ce:	7c 01       	movw	r14, r24
    37d0:	29 01       	movw	r4, r18
    37d2:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    37d4:	61 15       	cp	r22, r1
    37d6:	71 05       	cpc	r23, r1
    37d8:	81 05       	cpc	r24, r1
    37da:	91 05       	cpc	r25, r1
    37dc:	41 f4       	brne	.+16     	; 0x37ee <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    37de:	80 91 c0 00 	lds	r24, 0x00C0
    37e2:	85 ff       	sbrs	r24, 5
    37e4:	fc cf       	rjmp	.-8      	; 0x37de <printIntegerInBase+0x46>
		;
	UDR0 = c;
    37e6:	80 e3       	ldi	r24, 0x30	; 48
    37e8:	80 93 c6 00 	sts	0x00C6, r24
    37ec:	49 c0       	rjmp	.+146    	; 0x3880 <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
    37ee:	88 24       	eor	r8, r8
    37f0:	99 24       	eor	r9, r9
    37f2:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
    37f4:	1e 01       	movw	r2, r28
    37f6:	08 94       	sec
    37f8:	21 1c       	adc	r2, r1
    37fa:	31 1c       	adc	r3, r1
    37fc:	81 01       	movw	r16, r2
    37fe:	08 0d       	add	r16, r8
    3800:	19 1d       	adc	r17, r9
    3802:	c7 01       	movw	r24, r14
    3804:	b6 01       	movw	r22, r12
    3806:	a3 01       	movw	r20, r6
    3808:	92 01       	movw	r18, r4
    380a:	0e 94 c2 24 	call	0x4984	; 0x4984 <__udivmodsi4>
    380e:	f8 01       	movw	r30, r16
    3810:	60 83       	st	Z, r22
    3812:	08 94       	sec
    3814:	81 1c       	adc	r8, r1
    3816:	91 1c       	adc	r9, r1
    3818:	a1 1c       	adc	r10, r1
    381a:	b1 1c       	adc	r11, r1
		n /= base;
    381c:	c7 01       	movw	r24, r14
    381e:	b6 01       	movw	r22, r12
    3820:	a3 01       	movw	r20, r6
    3822:	92 01       	movw	r18, r4
    3824:	0e 94 c2 24 	call	0x4984	; 0x4984 <__udivmodsi4>
    3828:	c9 01       	movw	r24, r18
    382a:	da 01       	movw	r26, r20
    382c:	6c 01       	movw	r12, r24
    382e:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3830:	c1 14       	cp	r12, r1
    3832:	d1 04       	cpc	r13, r1
    3834:	e1 04       	cpc	r14, r1
    3836:	f1 04       	cpc	r15, r1
    3838:	09 f7       	brne	.-62     	; 0x37fc <printIntegerInBase+0x64>
    383a:	91 01       	movw	r18, r2
    383c:	28 0d       	add	r18, r8
    383e:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3840:	be 01       	movw	r22, r28
    3842:	6f 5f       	subi	r22, 0xFF	; 255
    3844:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
    3846:	d5 01       	movw	r26, r10
    3848:	c4 01       	movw	r24, r8
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	a1 09       	sbc	r26, r1
    384e:	b1 09       	sbc	r27, r1
    3850:	ac 01       	movw	r20, r24
    3852:	48 19       	sub	r20, r8
    3854:	59 09       	sbc	r21, r9
    3856:	11 c0       	rjmp	.+34     	; 0x387a <printIntegerInBase+0xe2>
    3858:	fa 01       	movw	r30, r20
    385a:	e2 0f       	add	r30, r18
    385c:	f3 1f       	adc	r31, r19
    385e:	e0 81       	ld	r30, Z
    3860:	ea 30       	cpi	r30, 0x0A	; 10
    3862:	10 f4       	brcc	.+4      	; 0x3868 <printIntegerInBase+0xd0>
    3864:	e0 5d       	subi	r30, 0xD0	; 208
    3866:	01 c0       	rjmp	.+2      	; 0x386a <printIntegerInBase+0xd2>
    3868:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    386a:	80 91 c0 00 	lds	r24, 0x00C0
    386e:	85 ff       	sbrs	r24, 5
    3870:	fc cf       	rjmp	.-8      	; 0x386a <printIntegerInBase+0xd2>
		;
	UDR0 = c;
    3872:	e0 93 c6 00 	sts	0x00C6, r30
    3876:	21 50       	subi	r18, 0x01	; 1
    3878:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    387a:	62 17       	cp	r22, r18
    387c:	73 07       	cpc	r23, r19
    387e:	61 f7       	brne	.-40     	; 0x3858 <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3880:	a0 96       	adiw	r28, 0x20	; 32
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	ff 90       	pop	r15
    3896:	ef 90       	pop	r14
    3898:	df 90       	pop	r13
    389a:	cf 90       	pop	r12
    389c:	bf 90       	pop	r11
    389e:	af 90       	pop	r10
    38a0:	9f 90       	pop	r9
    38a2:	8f 90       	pop	r8
    38a4:	7f 90       	pop	r7
    38a6:	6f 90       	pop	r6
    38a8:	5f 90       	pop	r5
    38aa:	4f 90       	pop	r4
    38ac:	3f 90       	pop	r3
    38ae:	2f 90       	pop	r2
    38b0:	08 95       	ret

000038b2 <printInteger>:

void printInteger(long n)
{
    38b2:	9b 01       	movw	r18, r22
    38b4:	ac 01       	movw	r20, r24
	if (n < 0) {
    38b6:	97 ff       	sbrs	r25, 7
    38b8:	0e c0       	rjmp	.+28     	; 0x38d6 <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    38ba:	80 91 c0 00 	lds	r24, 0x00C0
    38be:	85 ff       	sbrs	r24, 5
    38c0:	fc cf       	rjmp	.-8      	; 0x38ba <printInteger+0x8>
		;
	UDR0 = c;
    38c2:	8d e2       	ldi	r24, 0x2D	; 45
    38c4:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    38c8:	50 95       	com	r21
    38ca:	40 95       	com	r20
    38cc:	30 95       	com	r19
    38ce:	21 95       	neg	r18
    38d0:	3f 4f       	sbci	r19, 0xFF	; 255
    38d2:	4f 4f       	sbci	r20, 0xFF	; 255
    38d4:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
    38d6:	ca 01       	movw	r24, r20
    38d8:	b9 01       	movw	r22, r18
    38da:	2a e0       	ldi	r18, 0x0A	; 10
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	0e 94 cc 1b 	call	0x3798	; 0x3798 <printIntegerInBase>
}
    38e6:	08 95       	ret

000038e8 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    38e8:	22 e0       	ldi	r18, 0x02	; 2
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	50 e0       	ldi	r21, 0x00	; 0
    38f0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <printIntegerInBase>
  }
    38f4:	08 95       	ret

000038f6 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    38f6:	ef 92       	push	r14
    38f8:	ff 92       	push	r15
    38fa:	0f 93       	push	r16
    38fc:	1f 93       	push	r17
    38fe:	df 93       	push	r29
    3900:	cf 93       	push	r28
    3902:	00 d0       	rcall	.+0      	; 0x3904 <printFloat+0xe>
    3904:	0f 92       	push	r0
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    390a:	ae 01       	movw	r20, r28
    390c:	4f 5f       	subi	r20, 0xFF	; 255
    390e:	5f 4f       	sbci	r21, 0xFF	; 255
    3910:	0e 94 87 23 	call	0x470e	; 0x470e <modf>
    3914:	7b 01       	movw	r14, r22
    3916:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3918:	69 81       	ldd	r22, Y+1	; 0x01
    391a:	7a 81       	ldd	r23, Y+2	; 0x02
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	9c 81       	ldd	r25, Y+4	; 0x04
    3920:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
    3924:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3928:	80 91 c0 00 	lds	r24, 0x00C0
    392c:	85 ff       	sbrs	r24, 5
    392e:	fc cf       	rjmp	.-8      	; 0x3928 <printFloat+0x32>
		;
	UDR0 = c;
    3930:	8e e2       	ldi	r24, 0x2E	; 46
    3932:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3936:	c8 01       	movw	r24, r16
    3938:	b7 01       	movw	r22, r14
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	4a e7       	ldi	r20, 0x7A	; 122
    3940:	54 e4       	ldi	r21, 0x44	; 68
    3942:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    3946:	0e 94 1d 24 	call	0x483a	; 0x483a <round>
    394a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fixsfsi>
    394e:	97 ff       	sbrs	r25, 7
    3950:	07 c0       	rjmp	.+14     	; 0x3960 <printFloat+0x6a>
    3952:	90 95       	com	r25
    3954:	80 95       	com	r24
    3956:	70 95       	com	r23
    3958:	61 95       	neg	r22
    395a:	7f 4f       	sbci	r23, 0xFF	; 255
    395c:	8f 4f       	sbci	r24, 0xFF	; 255
    395e:	9f 4f       	sbci	r25, 0xFF	; 255
    3960:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <printInteger>
}
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	ff 90       	pop	r15
    3976:	ef 90       	pop	r14
    3978:	08 95       	ret

0000397a <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    397a:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    397c:	e7 e0       	ldi	r30, 0x07	; 7
    397e:	f1 e0       	ldi	r31, 0x01	; 1
    3980:	80 81       	ld	r24, Z
    3982:	81 60       	ori	r24, 0x01	; 1
    3984:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3986:	80 81       	ld	r24, Z
    3988:	82 60       	ori	r24, 0x02	; 2
    398a:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    398c:	80 81       	ld	r24, Z
    398e:	84 60       	ori	r24, 0x04	; 4
    3990:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3992:	80 81       	ld	r24, Z
    3994:	88 60       	ori	r24, 0x08	; 8
    3996:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3998:	80 81       	ld	r24, Z
    399a:	80 64       	ori	r24, 0x40	; 64
    399c:	80 83       	st	Z, r24

// initialise PORT as well

}
    399e:	08 95       	ret

000039a0 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	08 95       	ret

000039a4 <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    39aa:	80 91 4b 05 	lds	r24, 0x054B
    39ae:	88 23       	and	r24, r24
    39b0:	09 f4       	brne	.+2      	; 0x39b4 <atc_fire+0x10>
    39b2:	8d c0       	rjmp	.+282    	; 0x3ace <atc_fire+0x12a>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    39ba:	20 97       	sbiw	r28, 0x00	; 0
    39bc:	c1 f4       	brne	.+48     	; 0x39ee <atc_fire+0x4a>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    39be:	80 91 08 01 	lds	r24, 0x0108
    39c2:	81 60       	ori	r24, 0x01	; 1
    39c4:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    39c8:	80 91 08 01 	lds	r24, 0x0108
    39cc:	82 60       	ori	r24, 0x02	; 2
    39ce:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    39d2:	80 91 08 01 	lds	r24, 0x0108
    39d6:	84 60       	ori	r24, 0x04	; 4
    39d8:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    39dc:	80 91 08 01 	lds	r24, 0x0108
    39e0:	88 60       	ori	r24, 0x08	; 8
    39e2:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <set_busy>
    39ec:	70 c0       	rjmp	.+224    	; 0x3ace <atc_fire+0x12a>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    39ee:	80 91 08 01 	lds	r24, 0x0108
    39f2:	81 60       	ori	r24, 0x01	; 1
    39f4:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    39f8:	c3 30       	cpi	r28, 0x03	; 3
    39fa:	d1 05       	cpc	r29, r1
    39fc:	09 f1       	breq	.+66     	; 0x3a40 <atc_fire+0x9c>
    39fe:	c4 30       	cpi	r28, 0x04	; 4
    3a00:	d1 05       	cpc	r29, r1
    3a02:	3c f4       	brge	.+14     	; 0x3a12 <atc_fire+0x6e>
    3a04:	c1 30       	cpi	r28, 0x01	; 1
    3a06:	d1 05       	cpc	r29, r1
    3a08:	71 f0       	breq	.+28     	; 0x3a26 <atc_fire+0x82>
    3a0a:	22 97       	sbiw	r28, 0x02	; 2
    3a0c:	09 f0       	breq	.+2      	; 0x3a10 <atc_fire+0x6c>
    3a0e:	51 c0       	rjmp	.+162    	; 0x3ab2 <atc_fire+0x10e>
    3a10:	13 c0       	rjmp	.+38     	; 0x3a38 <atc_fire+0x94>
    3a12:	c5 30       	cpi	r28, 0x05	; 5
    3a14:	d1 05       	cpc	r29, r1
    3a16:	59 f1       	breq	.+86     	; 0x3a6e <atc_fire+0xca>
    3a18:	c5 30       	cpi	r28, 0x05	; 5
    3a1a:	d1 05       	cpc	r29, r1
    3a1c:	fc f0       	brlt	.+62     	; 0x3a5c <atc_fire+0xb8>
    3a1e:	26 97       	sbiw	r28, 0x06	; 6
    3a20:	09 f0       	breq	.+2      	; 0x3a24 <atc_fire+0x80>
    3a22:	47 c0       	rjmp	.+142    	; 0x3ab2 <atc_fire+0x10e>
    3a24:	32 c0       	rjmp	.+100    	; 0x3a8a <atc_fire+0xe6>
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3a26:	80 91 08 01 	lds	r24, 0x0108
    3a2a:	8d 7f       	andi	r24, 0xFD	; 253
    3a2c:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3a30:	80 91 08 01 	lds	r24, 0x0108
    3a34:	8b 7f       	andi	r24, 0xFB	; 251
    3a36:	0c c0       	rjmp	.+24     	; 0x3a50 <atc_fire+0xac>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3a38:	80 91 08 01 	lds	r24, 0x0108
    3a3c:	8d 7f       	andi	r24, 0xFD	; 253
    3a3e:	28 c0       	rjmp	.+80     	; 0x3a90 <atc_fire+0xec>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3a40:	80 91 08 01 	lds	r24, 0x0108
    3a44:	8d 7f       	andi	r24, 0xFD	; 253
    3a46:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3a4a:	80 91 08 01 	lds	r24, 0x0108
    3a4e:	84 60       	ori	r24, 0x04	; 4
    3a50:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3a54:	80 91 08 01 	lds	r24, 0x0108
    3a58:	87 7f       	andi	r24, 0xF7	; 247
    3a5a:	24 c0       	rjmp	.+72     	; 0x3aa4 <atc_fire+0x100>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3a5c:	80 91 08 01 	lds	r24, 0x0108
    3a60:	8d 7f       	andi	r24, 0xFD	; 253
    3a62:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3a66:	80 91 08 01 	lds	r24, 0x0108
    3a6a:	84 60       	ori	r24, 0x04	; 4
    3a6c:	16 c0       	rjmp	.+44     	; 0x3a9a <atc_fire+0xf6>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    3a6e:	80 91 08 01 	lds	r24, 0x0108
    3a72:	82 60       	ori	r24, 0x02	; 2
    3a74:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3a78:	80 91 08 01 	lds	r24, 0x0108
    3a7c:	8b 7f       	andi	r24, 0xFB	; 251
    3a7e:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    3a82:	80 91 08 01 	lds	r24, 0x0108
    3a86:	87 7f       	andi	r24, 0xF7	; 247
    3a88:	12 c0       	rjmp	.+36     	; 0x3aae <atc_fire+0x10a>
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3a8a:	80 91 08 01 	lds	r24, 0x0108
    3a8e:	82 60       	ori	r24, 0x02	; 2
    3a90:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3a94:	80 91 08 01 	lds	r24, 0x0108
    3a98:	8b 7f       	andi	r24, 0xFB	; 251
    3a9a:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3a9e:	80 91 08 01 	lds	r24, 0x0108
    3aa2:	88 60       	ori	r24, 0x08	; 8
    3aa4:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3aa8:	80 91 08 01 	lds	r24, 0x0108
    3aac:	8e 7f       	andi	r24, 0xFE	; 254
    3aae:	80 93 08 01 	sts	0x0108, r24
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3ab2:	80 91 08 01 	lds	r24, 0x0108
    3ab6:	8e 7f       	andi	r24, 0xFE	; 254
    3ab8:	80 93 08 01 	sts	0x0108, r24
    3abc:	88 ee       	ldi	r24, 0xE8	; 232
    3abe:	93 e0       	ldi	r25, 0x03	; 3
    3ac0:	20 e9       	ldi	r18, 0x90	; 144
    3ac2:	31 e0       	ldi	r19, 0x01	; 1
    3ac4:	f9 01       	movw	r30, r18
    3ac6:	31 97       	sbiw	r30, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <atc_fire+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	d9 f7       	brne	.-10     	; 0x3ac4 <atc_fire+0x120>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	08 95       	ret

00003ad4 <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    3ad4:	1f 93       	push	r17
    3ad6:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3ad8:	80 91 4b 05 	lds	r24, 0x054B
    3adc:	88 23       	and	r24, r24
    3ade:	11 f4       	brne	.+4      	; 0x3ae4 <DropTool+0x10>
    3ae0:	83 e6       	ldi	r24, 0x63	; 99
    3ae2:	15 c0       	rjmp	.+42     	; 0x3b0e <DropTool+0x3a>
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3aec:	88 23       	and	r24, r24
    3aee:	11 f4       	brne	.+4      	; 0x3af4 <DropTool+0x20>
    3af0:	85 e0       	ldi	r24, 0x05	; 5
    3af2:	0d c0       	rjmp	.+26     	; 0x3b0e <DropTool+0x3a>
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    3af4:	81 2f       	mov	r24, r17
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <atc_fire>

	// head back up
	head_down( 0 );
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3b0e:	1f 91       	pop	r17
    3b10:	08 95       	ret

00003b12 <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    3b12:	1f 93       	push	r17
    3b14:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3b16:	80 91 4b 05 	lds	r24, 0x054B
    3b1a:	88 23       	and	r24, r24
    3b1c:	11 f4       	brne	.+4      	; 0x3b22 <PickupTool+0x10>
    3b1e:	83 e6       	ldi	r24, 0x63	; 99
    3b20:	19 c0       	rjmp	.+50     	; 0x3b54 <PickupTool+0x42>
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3b2a:	88 23       	and	r24, r24
    3b2c:	11 f4       	brne	.+4      	; 0x3b32 <PickupTool+0x20>
    3b2e:	85 e0       	ldi	r24, 0x05	; 5
    3b30:	11 c0       	rjmp	.+34     	; 0x3b54 <PickupTool+0x42>
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    3b32:	81 2f       	mov	r24, r17
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <atc_change>

	// head back up
	head_down( 0 );
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3b42:	80 e9       	ldi	r24, 0x90	; 144
    3b44:	91 e0       	ldi	r25, 0x01	; 1
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	f1 f7       	brne	.-4      	; 0x3b46 <PickupTool+0x34>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <atc_change>
    3b52:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3b54:	1f 91       	pop	r17
    3b56:	08 95       	ret

00003b58 <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    3b58:	cf 93       	push	r28
    3b5a:	df 93       	push	r29
    3b5c:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3b5e:	80 91 4b 05 	lds	r24, 0x054B
    3b62:	88 23       	and	r24, r24
    3b64:	11 f4       	brne	.+4      	; 0x3b6a <atc_change+0x12>
    3b66:	83 e6       	ldi	r24, 0x63	; 99
    3b68:	0f c0       	rjmp	.+30     	; 0x3b88 <atc_change+0x30>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    3b6a:	cf 3f       	cpi	r28, 0xFF	; 255
    3b6c:	d1 05       	cpc	r29, r1
    3b6e:	59 f0       	breq	.+22     	; 0x3b86 <atc_change+0x2e>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    3b70:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <run_vacuum_test>
    3b74:	88 23       	and	r24, r24
    3b76:	21 f4       	brne	.+8      	; 0x3b80 <atc_change+0x28>
		PickupTool(tool);
    3b78:	8c 2f       	mov	r24, r28
    3b7a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <PickupTool>
    3b7e:	03 c0       	rjmp	.+6      	; 0x3b86 <atc_change+0x2e>
	} else { 
		DropTool(tool);
    3b80:	8c 2f       	mov	r24, r28
    3b82:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <DropTool>
    3b86:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	08 95       	ret

00003b8e <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    3b8e:	80 91 4b 05 	lds	r24, 0x054B
    3b92:	88 23       	and	r24, r24
    3b94:	11 f4       	brne	.+4      	; 0x3b9a <check_for_tool+0xc>
    3b96:	83 e6       	ldi	r24, 0x63	; 99
    3b98:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    3b9a:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    3b9e:	88 23       	and	r24, r24
    3ba0:	21 f0       	breq	.+8      	; 0x3baa <check_for_tool+0x1c>
		head_down( FALSE) ;
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
	}

	goto_vacpad();
    3baa:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <goto_vacpad>
	
	head_down(TRUE);
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
	
	vacuum(TRUE);
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>

	if( vacuum_state() == TRUE )  {
    3bbe:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <vacuum_state>
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	31 f4       	brne	.+12     	; 0x3bd2 <check_for_tool+0x44>
		head_down( FALSE) ;
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	08 95       	ret
		return TRUE;
	} else {
		head_down( FALSE) ;
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    3bdc:	08 95       	ret

00003bde <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    3bde:	ea e0       	ldi	r30, 0x0A	; 10
    3be0:	f1 e0       	ldi	r31, 0x01	; 1
    3be2:	80 81       	ld	r24, Z
    3be4:	80 62       	ori	r24, 0x20	; 32
    3be6:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    3be8:	eb e0       	ldi	r30, 0x0B	; 11
    3bea:	f1 e0       	ldi	r31, 0x01	; 1
    3bec:	80 81       	ld	r24, Z
    3bee:	80 62       	ori	r24, 0x20	; 32
    3bf0:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    3bf2:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    3bf4:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    3bf6:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    3bf8:	41 9a       	sbi	0x08, 1	; 8
}
    3bfa:	08 95       	ret

00003bfc <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3bfc:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    3bfe:	81 70       	andi	r24, 0x01	; 1
    3c00:	08 95       	ret

00003c02 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    3c02:	86 b1       	in	r24, 0x06	; 6
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	96 95       	lsr	r25
    3c08:	87 95       	ror	r24

	return state;
}
    3c0a:	81 70       	andi	r24, 0x01	; 1
    3c0c:	08 95       	ret

00003c0e <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}

// todo: don't allow head down while not homed?
char head_down(int state)
{
    3c0e:	cf 93       	push	r28
    3c10:	df 93       	push	r29
    3c12:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    3c14:	80 91 4b 05 	lds	r24, 0x054B
    3c18:	88 23       	and	r24, r24
    3c1a:	49 f1       	breq	.+82     	; 0x3c6e <head_down+0x60>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <set_busy>

// head down mode
  if( state == 0 ) {
    3c24:	20 97       	sbiw	r28, 0x00	; 0
    3c26:	21 f4       	brne	.+8      	; 0x3c30 <head_down+0x22>

	HEAD_PORT |= _BV( HEAD );
    3c28:	80 91 0b 01 	lds	r24, 0x010B
    3c2c:	80 62       	ori	r24, 0x20	; 32
    3c2e:	03 c0       	rjmp	.+6      	; 0x3c36 <head_down+0x28>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    3c30:	80 91 0b 01 	lds	r24, 0x010B
    3c34:	8f 7d       	andi	r24, 0xDF	; 223
    3c36:	80 93 0b 01 	sts	0x010B, r24
    3c3a:	80 ed       	ldi	r24, 0xD0	; 208
    3c3c:	97 e0       	ldi	r25, 0x07	; 7
    3c3e:	20 e9       	ldi	r18, 0x90	; 144
    3c40:	31 e0       	ldi	r19, 0x01	; 1
    3c42:	f9 01       	movw	r30, r18
    3c44:	31 97       	sbiw	r30, 0x01	; 1
    3c46:	f1 f7       	brne	.-4      	; 0x3c44 <head_down+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c48:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4a:	d9 f7       	brne	.-10     	; 0x3c42 <head_down+0x34>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3c4c:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    3c4e:	81 70       	andi	r24, 0x01	; 1
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	8c 17       	cp	r24, r28
    3c54:	9d 07       	cpc	r25, r29
    3c56:	31 f0       	breq	.+12     	; 0x3c64 <head_down+0x56>

	  printPgmString(PSTR("Head down error\n\r"));
    3c58:	81 e2       	ldi	r24, 0x21	; 33
    3c5a:	95 e0       	ldi	r25, 0x05	; 5
    3c5c:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	05 c0       	rjmp	.+10     	; 0x3c6e <head_down+0x60>
	  
	  return 0;
  }

 	set_busy( FALSE );
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <set_busy>
    3c6c:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	08 95       	ret

00003c74 <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    3c74:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    3c76:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    3c78:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    3c7a:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    3c7c:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    3c7e:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    3c80:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    3c82:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    3c84:	a4 e0       	ldi	r26, 0x04	; 4
    3c86:	b1 e0       	ldi	r27, 0x01	; 1
    3c88:	8c 91       	ld	r24, X
    3c8a:	8e 7f       	andi	r24, 0xFE	; 254
    3c8c:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    3c8e:	e5 e0       	ldi	r30, 0x05	; 5
    3c90:	f1 e0       	ldi	r31, 0x01	; 1
    3c92:	80 81       	ld	r24, Z
    3c94:	81 60       	ori	r24, 0x01	; 1
    3c96:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    3c98:	8c 91       	ld	r24, X
    3c9a:	8f 7e       	andi	r24, 0xEF	; 239
    3c9c:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    3c9e:	80 81       	ld	r24, Z
    3ca0:	80 61       	ori	r24, 0x10	; 16
    3ca2:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    3ca4:	a1 e0       	ldi	r26, 0x01	; 1
    3ca6:	b1 e0       	ldi	r27, 0x01	; 1
    3ca8:	8c 91       	ld	r24, X
    3caa:	8e 7f       	andi	r24, 0xFE	; 254
    3cac:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    3cae:	e2 e0       	ldi	r30, 0x02	; 2
    3cb0:	f1 e0       	ldi	r31, 0x01	; 1
    3cb2:	80 81       	ld	r24, Z
    3cb4:	81 60       	ori	r24, 0x01	; 1
    3cb6:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    3cb8:	8c 91       	ld	r24, X
    3cba:	8d 7f       	andi	r24, 0xFD	; 253
    3cbc:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    3cbe:	80 81       	ld	r24, Z
    3cc0:	82 60       	ori	r24, 0x02	; 2
    3cc2:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    3cc4:	e0 e9       	ldi	r30, 0x90	; 144
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	80 81       	ld	r24, Z
    3cca:	82 60       	ori	r24, 0x02	; 2
    3ccc:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    3cce:	8c e7       	ldi	r24, 0x7C	; 124
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	90 93 99 00 	sts	0x0099, r25
    3cd6:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    3cda:	10 92 95 00 	sts	0x0095, r1
    3cde:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    3ce2:	84 e0       	ldi	r24, 0x04	; 4
    3ce4:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    3ce8:	e1 e7       	ldi	r30, 0x71	; 113
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	80 81       	ld	r24, Z
    3cee:	82 60       	ori	r24, 0x02	; 2
    3cf0:	80 83       	st	Z, r24

}
    3cf2:	08 95       	ret

00003cf4 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    3cf4:	8c b1       	in	r24, 0x0c	; 12
    3cf6:	82 95       	swap	r24
    3cf8:	86 95       	lsr	r24
    3cfa:	87 70       	andi	r24, 0x07	; 7
    3cfc:	80 95       	com	r24

	return state;
}
    3cfe:	81 70       	andi	r24, 0x01	; 1
    3d00:	08 95       	ret

00003d02 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    3d02:	82 b3       	in	r24, 0x12	; 18
    3d04:	82 95       	swap	r24
    3d06:	86 95       	lsr	r24
    3d08:	87 70       	andi	r24, 0x07	; 7
    3d0a:	80 95       	com	r24

	return state;
}
    3d0c:	81 70       	andi	r24, 0x01	; 1
    3d0e:	08 95       	ret

00003d10 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    3d10:	8c b1       	in	r24, 0x0c	; 12
    3d12:	82 95       	swap	r24
    3d14:	8f 70       	andi	r24, 0x0F	; 15
    3d16:	80 95       	com	r24

	return state;
}
    3d18:	81 70       	andi	r24, 0x01	; 1
    3d1a:	08 95       	ret

00003d1c <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    3d1c:	80 91 03 01 	lds	r24, 0x0103
    3d20:	86 95       	lsr	r24
    3d22:	80 95       	com	r24

	return state;
}
    3d24:	81 70       	andi	r24, 0x01	; 1
    3d26:	08 95       	ret

00003d28 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    3d28:	86 b1       	in	r24, 0x06	; 6
    3d2a:	82 95       	swap	r24
    3d2c:	8f 70       	andi	r24, 0x0F	; 15
    3d2e:	80 95       	com	r24

	return state;
}
    3d30:	81 70       	andi	r24, 0x01	; 1
    3d32:	08 95       	ret

00003d34 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    3d34:	80 91 00 01 	lds	r24, 0x0100
    3d38:	80 95       	com	r24

	return state;
}
    3d3a:	81 70       	andi	r24, 0x01	; 1
    3d3c:	08 95       	ret

00003d3e <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    3d3e:	80 91 03 01 	lds	r24, 0x0103
    3d42:	80 95       	com	r24

	return state;
}
    3d44:	81 70       	andi	r24, 0x01	; 1
    3d46:	08 95       	ret

00003d48 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    3d48:	83 b1       	in	r24, 0x03	; 3
    3d4a:	82 95       	swap	r24
    3d4c:	86 95       	lsr	r24
    3d4e:	87 70       	andi	r24, 0x07	; 7
    3d50:	80 95       	com	r24

	return state;
}
    3d52:	81 70       	andi	r24, 0x01	; 1
    3d54:	08 95       	ret

00003d56 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    3d56:	80 91 00 01 	lds	r24, 0x0100
    3d5a:	86 95       	lsr	r24
    3d5c:	80 95       	com	r24

	return state;
}
    3d5e:	81 70       	andi	r24, 0x01	; 1
    3d60:	08 95       	ret

00003d62 <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    3d62:	1f 92       	push	r1
    3d64:	0f 92       	push	r0
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	0f 92       	push	r0
    3d6a:	11 24       	eor	r1, r1
	return;
}
    3d6c:	0f 90       	pop	r0
    3d6e:	0f be       	out	0x3f, r0	; 63
    3d70:	0f 90       	pop	r0
    3d72:	1f 90       	pop	r1
    3d74:	18 95       	reti

00003d76 <process_panel>:
}

void process_panel(void ) 
{

	if( is_phome() ) mc_go_home();
    3d76:	1d 99       	sbic	0x03, 5	; 3
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <process_panel+0x8>
    3d7a:	0e 94 2d 0a 	call	0x145a	; 0x145a <mc_go_home>
    3d7e:	08 95       	ret

00003d80 <vacuum_init>:
#include "settings.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    3d80:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    3d82:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    3d84:	ea e0       	ldi	r30, 0x0A	; 10
    3d86:	f1 e0       	ldi	r31, 0x01	; 1
    3d88:	80 81       	ld	r24, Z
    3d8a:	80 61       	ori	r24, 0x10	; 16
    3d8c:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    3d8e:	eb e0       	ldi	r30, 0x0B	; 11
    3d90:	f1 e0       	ldi	r31, 0x01	; 1
    3d92:	80 81       	ld	r24, Z
    3d94:	80 61       	ori	r24, 0x10	; 16
    3d96:	80 83       	st	Z, r24

}
    3d98:	08 95       	ret

00003d9a <vacuum>:

// switches vacuum on and off
void vacuum(int state)
{
    3d9a:	9c 01       	movw	r18, r24
	if( gHomed == FALSE ) return;
    3d9c:	80 91 4b 05 	lds	r24, 0x054B
    3da0:	88 23       	and	r24, r24
    3da2:	a1 f0       	breq	.+40     	; 0x3dcc <vacuum+0x32>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    3da4:	23 2b       	or	r18, r19
    3da6:	21 f4       	brne	.+8      	; 0x3db0 <vacuum+0x16>

	HEAD_PORT |= _BV( VACUUM );
    3da8:	80 91 0b 01 	lds	r24, 0x010B
    3dac:	80 61       	ori	r24, 0x10	; 16
    3dae:	03 c0       	rjmp	.+6      	; 0x3db6 <vacuum+0x1c>

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    3db0:	80 91 0b 01 	lds	r24, 0x010B
    3db4:	8f 7e       	andi	r24, 0xEF	; 239
    3db6:	80 93 0b 01 	sts	0x010B, r24
    3dba:	88 e8       	ldi	r24, 0x88	; 136
    3dbc:	93 e1       	ldi	r25, 0x13	; 19
    3dbe:	20 e9       	ldi	r18, 0x90	; 144
    3dc0:	31 e0       	ldi	r19, 0x01	; 1
    3dc2:	f9 01       	movw	r30, r18
    3dc4:	31 97       	sbiw	r30, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <vacuum+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dca:	d9 f7       	brne	.-10     	; 0x3dc2 <vacuum+0x28>
    3dcc:	08 95       	ret

00003dce <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    3dce:	89 b1       	in	r24, 0x09	; 9
    3dd0:	80 95       	com	r24

	return state;
}
    3dd2:	88 1f       	adc	r24, r24
    3dd4:	88 27       	eor	r24, r24
    3dd6:	88 1f       	adc	r24, r24
    3dd8:	08 95       	ret

00003dda <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    3dda:	af 92       	push	r10
    3ddc:	bf 92       	push	r11
    3dde:	cf 92       	push	r12
    3de0:	df 92       	push	r13
    3de2:	ef 92       	push	r14
    3de4:	ff 92       	push	r15
    3de6:	0f 93       	push	r16
    3de8:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    3dea:	80 91 4b 05 	lds	r24, 0x054B
    3dee:	88 23       	and	r24, r24
    3df0:	11 f4       	brne	.+4      	; 0x3df6 <run_vacuum_test+0x1c>
    3df2:	83 e6       	ldi	r24, 0x63	; 99
    3df4:	23 c0       	rjmp	.+70     	; 0x3e3c <run_vacuum_test+0x62>
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    3dfe:	63 ec       	ldi	r22, 0xC3	; 195
    3e00:	73 ed       	ldi	r23, 0xD3	; 211
    3e02:	81 e4       	ldi	r24, 0x41	; 65
    3e04:	91 e4       	ldi	r25, 0x41	; 65
    3e06:	2a e1       	ldi	r18, 0x1A	; 26
    3e08:	3b e8       	ldi	r19, 0x8B	; 139
    3e0a:	4d e9       	ldi	r20, 0x9D	; 157
    3e0c:	50 e4       	ldi	r21, 0x40	; 64
    3e0e:	0f 2e       	mov	r0, r31
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	ef 2e       	mov	r14, r31
    3e14:	f0 e0       	ldi	r31, 0x00	; 0
    3e16:	ff 2e       	mov	r15, r31
    3e18:	f0 e8       	ldi	r31, 0x80	; 128
    3e1a:	0f 2f       	mov	r16, r31
    3e1c:	ff eb       	ldi	r31, 0xBF	; 191
    3e1e:	1f 2f       	mov	r17, r31
    3e20:	f0 2d       	mov	r31, r0
    3e22:	57 01       	movw	r10, r14
    3e24:	68 01       	movw	r12, r16
    3e26:	0e 94 93 03 	call	0x726	; 0x726 <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    3e2a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <head_moving>
    3e2e:	89 2b       	or	r24, r25
    3e30:	e1 f7       	brne	.-8      	; 0x3e2a <run_vacuum_test+0x50>
    3e32:	80 e9       	ldi	r24, 0x90	; 144
    3e34:	91 e0       	ldi	r25, 0x01	; 1
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	f1 f7       	brne	.-4      	; 0x3e36 <run_vacuum_test+0x5c>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    3e3c:	1f 91       	pop	r17
    3e3e:	0f 91       	pop	r16
    3e40:	ff 90       	pop	r15
    3e42:	ef 90       	pop	r14
    3e44:	df 90       	pop	r13
    3e46:	cf 90       	pop	r12
    3e48:	bf 90       	pop	r11
    3e4a:	af 90       	pop	r10
    3e4c:	08 95       	ret

00003e4e <goto_vacpad>:

unsigned char goto_vacpad( void ) 
{
    3e4e:	8f 92       	push	r8
    3e50:	9f 92       	push	r9
    3e52:	af 92       	push	r10
    3e54:	bf 92       	push	r11
    3e56:	cf 92       	push	r12
    3e58:	df 92       	push	r13
    3e5a:	ef 92       	push	r14
    3e5c:	ff 92       	push	r15
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    3e62:	80 91 4b 05 	lds	r24, 0x054B
    3e66:	88 23       	and	r24, r24
    3e68:	11 f4       	brne	.+4      	; 0x3e6e <goto_vacpad+0x20>
    3e6a:	83 e6       	ldi	r24, 0x63	; 99
    3e6c:	1f c1       	rjmp	.+574    	; 0x40ac <goto_vacpad+0x25e>
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
    3e6e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    3e72:	88 23       	and	r24, r24
    3e74:	21 f0       	breq	.+8      	; 0x3e7e <goto_vacpad+0x30>
		head_down( FALSE )  ;
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    3e7e:	63 ec       	ldi	r22, 0xC3	; 195
    3e80:	73 ed       	ldi	r23, 0xD3	; 211
    3e82:	81 e4       	ldi	r24, 0x41	; 65
    3e84:	91 e4       	ldi	r25, 0x41	; 65
    3e86:	2a e1       	ldi	r18, 0x1A	; 26
    3e88:	3b e8       	ldi	r19, 0x8B	; 139
    3e8a:	4d e9       	ldi	r20, 0x9D	; 157
    3e8c:	50 e4       	ldi	r21, 0x40	; 64
    3e8e:	0f 2e       	mov	r0, r31
    3e90:	f0 e0       	ldi	r31, 0x00	; 0
    3e92:	ef 2e       	mov	r14, r31
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	ff 2e       	mov	r15, r31
    3e98:	f0 e8       	ldi	r31, 0x80	; 128
    3e9a:	0f 2f       	mov	r16, r31
    3e9c:	ff eb       	ldi	r31, 0xBF	; 191
    3e9e:	1f 2f       	mov	r17, r31
    3ea0:	f0 2d       	mov	r31, r0
    3ea2:	57 01       	movw	r10, r14
    3ea4:	68 01       	movw	r12, r16
    3ea6:	0e 94 93 03 	call	0x726	; 0x726 <gotoxy>

	while( head_moving() );	
    3eaa:	0e 94 82 17 	call	0x2f04	; 0x2f04 <head_moving>
    3eae:	89 2b       	or	r24, r25
    3eb0:	e1 f7       	brne	.-8      	; 0x3eaa <goto_vacpad+0x5c>
    3eb2:	80 e9       	ldi	r24, 0x90	; 144
    3eb4:	91 e0       	ldi	r25, 0x01	; 1
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <goto_vacpad+0x68>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>
    3ec2:	88 e8       	ldi	r24, 0x88	; 136
    3ec4:	93 e1       	ldi	r25, 0x13	; 19
    3ec6:	20 e9       	ldi	r18, 0x90	; 144
    3ec8:	31 e0       	ldi	r19, 0x01	; 1
    3eca:	f9 01       	movw	r30, r18
    3ecc:	31 97       	sbiw	r30, 0x01	; 1
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <goto_vacpad+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed2:	d9 f7       	brne	.-10     	; 0x3eca <goto_vacpad+0x7c>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3edc:	88 23       	and	r24, r24
    3ede:	09 f4       	brne	.+2      	; 0x3ee2 <goto_vacpad+0x94>
    3ee0:	d0 c0       	rjmp	.+416    	; 0x4082 <goto_vacpad+0x234>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    3ee2:	80 e1       	ldi	r24, 0x10	; 16
    3ee4:	97 e2       	ldi	r25, 0x27	; 39
    3ee6:	20 e9       	ldi	r18, 0x90	; 144
    3ee8:	31 e0       	ldi	r19, 0x01	; 1
    3eea:	f9 01       	movw	r30, r18
    3eec:	31 97       	sbiw	r30, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <goto_vacpad+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef2:	d9 f7       	brne	.-10     	; 0x3eea <goto_vacpad+0x9c>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    3ef4:	89 b0       	in	r8, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3f06:	88 23       	and	r24, r24
    3f08:	09 f4       	brne	.+2      	; 0x3f0c <goto_vacpad+0xbe>
    3f0a:	cf c0       	rjmp	.+414    	; 0x40aa <goto_vacpad+0x25c>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    3f0c:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    3f10:	88 23       	and	r24, r24
    3f12:	e1 f7       	brne	.-8      	; 0x3f0c <goto_vacpad+0xbe>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    3f14:	6d e3       	ldi	r22, 0x3D	; 61
    3f16:	7b e9       	ldi	r23, 0x9B	; 155
    3f18:	8d e4       	ldi	r24, 0x4D	; 77
    3f1a:	91 e4       	ldi	r25, 0x41	; 65
    3f1c:	2c ed       	ldi	r18, 0xDC	; 220
    3f1e:	38 e6       	ldi	r19, 0x68	; 104
    3f20:	44 e9       	ldi	r20, 0x94	; 148
    3f22:	50 e4       	ldi	r21, 0x40	; 64
    3f24:	0f 2e       	mov	r0, r31
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	ef 2e       	mov	r14, r31
    3f2a:	f0 e0       	ldi	r31, 0x00	; 0
    3f2c:	ff 2e       	mov	r15, r31
    3f2e:	f0 e8       	ldi	r31, 0x80	; 128
    3f30:	0f 2f       	mov	r16, r31
    3f32:	ff eb       	ldi	r31, 0xBF	; 191
    3f34:	1f 2f       	mov	r17, r31
    3f36:	f0 2d       	mov	r31, r0
    3f38:	57 01       	movw	r10, r14
    3f3a:	68 01       	movw	r12, r16
    3f3c:	0e 94 93 03 	call	0x726	; 0x726 <gotoxy>

	while( head_moving() );	
    3f40:	0e 94 82 17 	call	0x2f04	; 0x2f04 <head_moving>
    3f44:	89 2b       	or	r24, r25
    3f46:	e1 f7       	brne	.-8      	; 0x3f40 <goto_vacpad+0xf2>
    3f48:	80 e9       	ldi	r24, 0x90	; 144
    3f4a:	91 e0       	ldi	r25, 0x01	; 1
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	f1 f7       	brne	.-4      	; 0x3f4c <goto_vacpad+0xfe>
    3f50:	80 ea       	ldi	r24, 0xA0	; 160
    3f52:	9f e0       	ldi	r25, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f54:	20 e9       	ldi	r18, 0x90	; 144
    3f56:	31 e0       	ldi	r19, 0x01	; 1
    3f58:	f9 01       	movw	r30, r18
    3f5a:	31 97       	sbiw	r30, 0x01	; 1
    3f5c:	f1 f7       	brne	.-4      	; 0x3f5a <goto_vacpad+0x10c>
    3f5e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f60:	d9 f7       	brne	.-10     	; 0x3f58 <goto_vacpad+0x10a>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3f6a:	88 23       	and	r24, r24
    3f6c:	09 f4       	brne	.+2      	; 0x3f70 <goto_vacpad+0x122>
    3f6e:	9d c0       	rjmp	.+314    	; 0x40aa <goto_vacpad+0x25c>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    3f70:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    3f74:	88 23       	and	r24, r24
    3f76:	e1 f3       	breq	.-8      	; 0x3f70 <goto_vacpad+0x122>
    3f78:	80 e1       	ldi	r24, 0x10	; 16
    3f7a:	97 e2       	ldi	r25, 0x27	; 39
    3f7c:	20 e9       	ldi	r18, 0x90	; 144
    3f7e:	31 e0       	ldi	r19, 0x01	; 1
    3f80:	f9 01       	movw	r30, r18
    3f82:	31 97       	sbiw	r30, 0x01	; 1
    3f84:	f1 f7       	brne	.-4      	; 0x3f82 <goto_vacpad+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f88:	d9 f7       	brne	.-10     	; 0x3f80 <goto_vacpad+0x132>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <atc_fire>
    3f92:	80 e4       	ldi	r24, 0x40	; 64
    3f94:	9f e1       	ldi	r25, 0x1F	; 31
    3f96:	20 e9       	ldi	r18, 0x90	; 144
    3f98:	31 e0       	ldi	r19, 0x01	; 1
    3f9a:	f9 01       	movw	r30, r18
    3f9c:	31 97       	sbiw	r30, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <goto_vacpad+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa2:	d9 f7       	brne	.-10     	; 0x3f9a <goto_vacpad+0x14c>
    3fa4:	99 24       	eor	r9, r9
    3fa6:	87 fc       	sbrc	r8, 7
    3fa8:	07 c0       	rjmp	.+14     	; 0x3fb8 <goto_vacpad+0x16a>
    3faa:	99 24       	eor	r9, r9
    3fac:	93 94       	inc	r9

		// tool changer off
		atc_fire ( 0 );
		
		// head up
		if( head_down( 0 ) == 0 ) {
    3fae:	28 e8       	ldi	r18, 0x88	; 136
    3fb0:	33 e1       	ldi	r19, 0x13	; 19
    3fb2:	40 e9       	ldi	r20, 0x90	; 144
    3fb4:	51 e0       	ldi	r21, 0x01	; 1
    3fb6:	05 c0       	rjmp	.+10     	; 0x3fc2 <goto_vacpad+0x174>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <atc_fire>
    3fc0:	06 c0       	rjmp	.+12     	; 0x3fce <goto_vacpad+0x180>
    3fc2:	ca 01       	movw	r24, r20
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <goto_vacpad+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc8:	21 50       	subi	r18, 0x01	; 1
    3fca:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fcc:	d1 f7       	brne	.-12     	; 0x3fc2 <goto_vacpad+0x174>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    3fd6:	88 23       	and	r24, r24
    3fd8:	09 f4       	brne	.+2      	; 0x3fdc <goto_vacpad+0x18e>
    3fda:	67 c0       	rjmp	.+206    	; 0x40aa <goto_vacpad+0x25c>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    3fdc:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    3fe0:	81 30       	cpi	r24, 0x01	; 1
    3fe2:	e1 f3       	breq	.-8      	; 0x3fdc <goto_vacpad+0x18e>
    3fe4:	88 e9       	ldi	r24, 0x98	; 152
    3fe6:	9a e3       	ldi	r25, 0x3A	; 58
    3fe8:	20 e9       	ldi	r18, 0x90	; 144
    3fea:	31 e0       	ldi	r19, 0x01	; 1
    3fec:	f9 01       	movw	r30, r18
    3fee:	31 97       	sbiw	r30, 0x01	; 1
    3ff0:	f1 f7       	brne	.-4      	; 0x3fee <goto_vacpad+0x1a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff4:	d9 f7       	brne	.-10     	; 0x3fec <goto_vacpad+0x19e>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    3ff6:	63 ec       	ldi	r22, 0xC3	; 195
    3ff8:	73 ed       	ldi	r23, 0xD3	; 211
    3ffa:	81 e4       	ldi	r24, 0x41	; 65
    3ffc:	91 e4       	ldi	r25, 0x41	; 65
    3ffe:	2a e1       	ldi	r18, 0x1A	; 26
    4000:	3b e8       	ldi	r19, 0x8B	; 139
    4002:	4d e9       	ldi	r20, 0x9D	; 157
    4004:	50 e4       	ldi	r21, 0x40	; 64
    4006:	0f 2e       	mov	r0, r31
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	ef 2e       	mov	r14, r31
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	ff 2e       	mov	r15, r31
    4010:	f0 e8       	ldi	r31, 0x80	; 128
    4012:	0f 2f       	mov	r16, r31
    4014:	ff eb       	ldi	r31, 0xBF	; 191
    4016:	1f 2f       	mov	r17, r31
    4018:	f0 2d       	mov	r31, r0
    401a:	57 01       	movw	r10, r14
    401c:	68 01       	movw	r12, r16
    401e:	0e 94 93 03 	call	0x726	; 0x726 <gotoxy>

	while( head_moving() );	
    4022:	0e 94 82 17 	call	0x2f04	; 0x2f04 <head_moving>
    4026:	89 2b       	or	r24, r25
    4028:	e1 f7       	brne	.-8      	; 0x4022 <goto_vacpad+0x1d4>
    402a:	80 e9       	ldi	r24, 0x90	; 144
    402c:	91 e0       	ldi	r25, 0x01	; 1
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <goto_vacpad+0x1e0>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>
    403a:	88 e8       	ldi	r24, 0x88	; 136
    403c:	93 e1       	ldi	r25, 0x13	; 19
    403e:	20 e9       	ldi	r18, 0x90	; 144
    4040:	31 e0       	ldi	r19, 0x01	; 1
    4042:	f9 01       	movw	r30, r18
    4044:	31 97       	sbiw	r30, 0x01	; 1
    4046:	f1 f7       	brne	.-4      	; 0x4044 <goto_vacpad+0x1f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4048:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404a:	d9 f7       	brne	.-10     	; 0x4042 <goto_vacpad+0x1f4>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    4054:	88 23       	and	r24, r24
    4056:	a9 f0       	breq	.+42     	; 0x4082 <goto_vacpad+0x234>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4058:	80 e1       	ldi	r24, 0x10	; 16
    405a:	97 e2       	ldi	r25, 0x27	; 39
    405c:	20 e9       	ldi	r18, 0x90	; 144
    405e:	31 e0       	ldi	r19, 0x01	; 1
    4060:	f9 01       	movw	r30, r18
    4062:	31 97       	sbiw	r30, 0x01	; 1
    4064:	f1 f7       	brne	.-4      	; 0x4062 <goto_vacpad+0x214>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4066:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4068:	d9 f7       	brne	.-10     	; 0x4060 <goto_vacpad+0x212>
	}

   _delay_ms( 1000 );

	// check vacuum
	if( vacuum_state() ) {
    406a:	4f 99       	sbic	0x09, 7	; 9
    406c:	03 c0       	rjmp	.+6      	; 0x4074 <goto_vacpad+0x226>
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    406e:	99 20       	and	r9, r9
    4070:	69 f0       	breq	.+26     	; 0x408c <goto_vacpad+0x23e>
    4072:	03 c0       	rjmp	.+6      	; 0x407a <goto_vacpad+0x22c>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	98 16       	cp	r9, r24
    4078:	49 f0       	breq	.+18     	; 0x408c <goto_vacpad+0x23e>
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
#endif

			head_down(0);
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
			vacuum( 0 );
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>
    408a:	0f c0       	rjmp	.+30     	; 0x40aa <goto_vacpad+0x25c>
		}

	}	

// vacuum off
	vacuum( 0 );
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    409c:	88 23       	and	r24, r24
    409e:	29 f0       	breq	.+10     	; 0x40aa <goto_vacpad+0x25c>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    40a0:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    40a4:	88 23       	and	r24, r24
    40a6:	e1 f7       	brne	.-8      	; 0x40a0 <goto_vacpad+0x252>
    40a8:	01 c0       	rjmp	.+2      	; 0x40ac <goto_vacpad+0x25e>
    40aa:	85 e0       	ldi	r24, 0x05	; 5
	
	return GCSTATUS_OK;

}
    40ac:	1f 91       	pop	r17
    40ae:	0f 91       	pop	r16
    40b0:	ff 90       	pop	r15
    40b2:	ef 90       	pop	r14
    40b4:	df 90       	pop	r13
    40b6:	cf 90       	pop	r12
    40b8:	bf 90       	pop	r11
    40ba:	af 90       	pop	r10
    40bc:	9f 90       	pop	r9
    40be:	8f 90       	pop	r8
    40c0:	08 95       	ret

000040c2 <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    40c2:	4f 99       	sbic	0x09, 7	; 9
    40c4:	03 c0       	rjmp	.+6      	; 0x40cc <vacuum_test+0xa>
		
		printPgmString(PSTR("yes\r\n"));
    40c6:	88 e3       	ldi	r24, 0x38	; 56
    40c8:	95 e0       	ldi	r25, 0x05	; 5
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <vacuum_test+0xe>
	} else {
		printPgmString(PSTR("no\r\n"));
    40cc:	83 e3       	ldi	r24, 0x33	; 51
    40ce:	95 e0       	ldi	r25, 0x05	; 5
    40d0:	0e 94 bd 1b 	call	0x377a	; 0x377a <printPgmString>
    40d4:	08 95       	ret

000040d6 <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    40d6:	e7 e0       	ldi	r30, 0x07	; 7
    40d8:	f1 e0       	ldi	r31, 0x01	; 1
    40da:	80 81       	ld	r24, Z
    40dc:	80 68       	ori	r24, 0x80	; 128
    40de:	80 83       	st	Z, r24
}
    40e0:	08 95       	ret

000040e2 <putdown_part>:

}

char putdown_part ( void )
{
	if( is_head_down() ){
    40e2:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    40e6:	88 23       	and	r24, r24
    40e8:	11 f0       	breq	.+4      	; 0x40ee <putdown_part+0xc>
    40ea:	85 e0       	ldi	r24, 0x05	; 5
    40ec:	08 95       	ret


#endif

	// wait til head stops
	while( head_moving() );
    40ee:	0e 94 82 17 	call	0x2f04	; 0x2f04 <head_moving>
    40f2:	88 23       	and	r24, r24
    40f4:	e1 f7       	brne	.-8      	; 0x40ee <putdown_part+0xc>
    40f6:	88 ee       	ldi	r24, 0xE8	; 232
    40f8:	93 e0       	ldi	r25, 0x03	; 3
    40fa:	20 e9       	ldi	r18, 0x90	; 144
    40fc:	31 e0       	ldi	r19, 0x01	; 1
    40fe:	f9 01       	movw	r30, r18
    4100:	31 97       	sbiw	r30, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <putdown_part+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4106:	d9 f7       	brne	.-10     	; 0x40fe <putdown_part+0x1c>

	_delay_ms( 100 );

	// push head down
	head_down( 1 );
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    4110:	84 ec       	ldi	r24, 0xC4	; 196
    4112:	99 e0       	ldi	r25, 0x09	; 9
    4114:	20 e9       	ldi	r18, 0x90	; 144
    4116:	31 e0       	ldi	r19, 0x01	; 1
    4118:	f9 01       	movw	r30, r18
    411a:	31 97       	sbiw	r30, 0x01	; 1
    411c:	f1 f7       	brne	.-4      	; 0x411a <putdown_part+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4120:	d9 f7       	brne	.-10     	; 0x4118 <putdown_part+0x36>

	_delay_ms( 250 );

	// vacuum off
	vacuum ( 0 );
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>

	// head up
	head_down ( 0 ) ;
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    4132:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    4134:	08 95       	ret

00004136 <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    4136:	80 91 4b 05 	lds	r24, 0x054B
    413a:	88 23       	and	r24, r24
    413c:	31 f1       	breq	.+76     	; 0x418a <tape_knock+0x54>
   		return ;
   	}


	while( head_moving() );
    413e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <head_moving>
    4142:	88 23       	and	r24, r24
    4144:	e1 f7       	brne	.-8      	; 0x413e <tape_knock+0x8>

	set_busy( TRUE );
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    414c:	80 91 08 01 	lds	r24, 0x0108
    4150:	8f 77       	andi	r24, 0x7F	; 127
    4152:	80 93 08 01 	sts	0x0108, r24
    4156:	80 ed       	ldi	r24, 0xD0	; 208
    4158:	97 e0       	ldi	r25, 0x07	; 7
    415a:	20 e9       	ldi	r18, 0x90	; 144
    415c:	31 e0       	ldi	r19, 0x01	; 1
    415e:	f9 01       	movw	r30, r18
    4160:	31 97       	sbiw	r30, 0x01	; 1
    4162:	f1 f7       	brne	.-4      	; 0x4160 <tape_knock+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4164:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4166:	d9 f7       	brne	.-10     	; 0x415e <tape_knock+0x28>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    4168:	80 91 08 01 	lds	r24, 0x0108
    416c:	80 68       	ori	r24, 0x80	; 128
    416e:	80 93 08 01 	sts	0x0108, r24
    4172:	80 ed       	ldi	r24, 0xD0	; 208
    4174:	97 e0       	ldi	r25, 0x07	; 7
    4176:	20 e9       	ldi	r18, 0x90	; 144
    4178:	31 e0       	ldi	r19, 0x01	; 1
    417a:	f9 01       	movw	r30, r18
    417c:	31 97       	sbiw	r30, 0x01	; 1
    417e:	f1 f7       	brne	.-4      	; 0x417c <tape_knock+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4180:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4182:	d9 f7       	brne	.-10     	; 0x417a <tape_knock+0x44>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <set_busy>
    418a:	08 95       	ret

0000418c <pickup_part>:
}


char pickup_part ( void ) 
{
	if( is_head_down() ){
    418c:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <is_head_down>
    4190:	88 23       	and	r24, r24
    4192:	11 f0       	breq	.+4      	; 0x4198 <pickup_part+0xc>
    4194:	85 e0       	ldi	r24, 0x05	; 5
    4196:	08 95       	ret
	 Sleep( 500 );

#endif

	// advance part, waits til head has done
	tape_knock();
    4198:	0e 94 9b 20 	call	0x4136	; 0x4136 <tape_knock>

	// vacuum on
	vacuum ( 1 );
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <vacuum>

	// push head down
	head_down( 1 );
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    41ac:	88 e8       	ldi	r24, 0x88	; 136
    41ae:	93 e1       	ldi	r25, 0x13	; 19
    41b0:	20 e9       	ldi	r18, 0x90	; 144
    41b2:	31 e0       	ldi	r19, 0x01	; 1
    41b4:	f9 01       	movw	r30, r18
    41b6:	31 97       	sbiw	r30, 0x01	; 1
    41b8:	f1 f7       	brne	.-4      	; 0x41b6 <pickup_part+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41bc:	d9 f7       	brne	.-10     	; 0x41b4 <pickup_part+0x28>

	_delay_ms( 500 );

	// head up
	head_down ( 0 ) ;
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <head_down>
    41c6:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    41c8:	08 95       	ret

000041ca <__subsf3>:
    41ca:	50 58       	subi	r21, 0x80	; 128

000041cc <__addsf3>:
    41cc:	bb 27       	eor	r27, r27
    41ce:	aa 27       	eor	r26, r26
    41d0:	0e d0       	rcall	.+28     	; 0x41ee <__addsf3x>
    41d2:	11 c2       	rjmp	.+1058   	; 0x45f6 <__fp_round>
    41d4:	02 d2       	rcall	.+1028   	; 0x45da <__fp_pscA>
    41d6:	30 f0       	brcs	.+12     	; 0x41e4 <__addsf3+0x18>
    41d8:	07 d2       	rcall	.+1038   	; 0x45e8 <__fp_pscB>
    41da:	20 f0       	brcs	.+8      	; 0x41e4 <__addsf3+0x18>
    41dc:	31 f4       	brne	.+12     	; 0x41ea <__addsf3+0x1e>
    41de:	9f 3f       	cpi	r25, 0xFF	; 255
    41e0:	11 f4       	brne	.+4      	; 0x41e6 <__addsf3+0x1a>
    41e2:	1e f4       	brtc	.+6      	; 0x41ea <__addsf3+0x1e>
    41e4:	d2 c1       	rjmp	.+932    	; 0x458a <__fp_nan>
    41e6:	0e f4       	brtc	.+2      	; 0x41ea <__addsf3+0x1e>
    41e8:	e0 95       	com	r30
    41ea:	e7 fb       	bst	r30, 7
    41ec:	9f c1       	rjmp	.+830    	; 0x452c <__fp_inf>

000041ee <__addsf3x>:
    41ee:	e9 2f       	mov	r30, r25
    41f0:	13 d2       	rcall	.+1062   	; 0x4618 <__fp_split3>
    41f2:	80 f3       	brcs	.-32     	; 0x41d4 <__addsf3+0x8>
    41f4:	ba 17       	cp	r27, r26
    41f6:	62 07       	cpc	r22, r18
    41f8:	73 07       	cpc	r23, r19
    41fa:	84 07       	cpc	r24, r20
    41fc:	95 07       	cpc	r25, r21
    41fe:	18 f0       	brcs	.+6      	; 0x4206 <__addsf3x+0x18>
    4200:	71 f4       	brne	.+28     	; 0x421e <__addsf3x+0x30>
    4202:	9e f5       	brtc	.+102    	; 0x426a <__addsf3x+0x7c>
    4204:	42 c2       	rjmp	.+1156   	; 0x468a <__fp_zero>
    4206:	0e f4       	brtc	.+2      	; 0x420a <__addsf3x+0x1c>
    4208:	e0 95       	com	r30
    420a:	0b 2e       	mov	r0, r27
    420c:	ba 2f       	mov	r27, r26
    420e:	a0 2d       	mov	r26, r0
    4210:	0b 01       	movw	r0, r22
    4212:	b9 01       	movw	r22, r18
    4214:	90 01       	movw	r18, r0
    4216:	0c 01       	movw	r0, r24
    4218:	ca 01       	movw	r24, r20
    421a:	a0 01       	movw	r20, r0
    421c:	11 24       	eor	r1, r1
    421e:	ff 27       	eor	r31, r31
    4220:	59 1b       	sub	r21, r25
    4222:	99 f0       	breq	.+38     	; 0x424a <__addsf3x+0x5c>
    4224:	59 3f       	cpi	r21, 0xF9	; 249
    4226:	50 f4       	brcc	.+20     	; 0x423c <__addsf3x+0x4e>
    4228:	50 3e       	cpi	r21, 0xE0	; 224
    422a:	68 f1       	brcs	.+90     	; 0x4286 <__addsf3x+0x98>
    422c:	1a 16       	cp	r1, r26
    422e:	f0 40       	sbci	r31, 0x00	; 0
    4230:	a2 2f       	mov	r26, r18
    4232:	23 2f       	mov	r18, r19
    4234:	34 2f       	mov	r19, r20
    4236:	44 27       	eor	r20, r20
    4238:	58 5f       	subi	r21, 0xF8	; 248
    423a:	f3 cf       	rjmp	.-26     	; 0x4222 <__addsf3x+0x34>
    423c:	46 95       	lsr	r20
    423e:	37 95       	ror	r19
    4240:	27 95       	ror	r18
    4242:	a7 95       	ror	r26
    4244:	f0 40       	sbci	r31, 0x00	; 0
    4246:	53 95       	inc	r21
    4248:	c9 f7       	brne	.-14     	; 0x423c <__addsf3x+0x4e>
    424a:	7e f4       	brtc	.+30     	; 0x426a <__addsf3x+0x7c>
    424c:	1f 16       	cp	r1, r31
    424e:	ba 0b       	sbc	r27, r26
    4250:	62 0b       	sbc	r22, r18
    4252:	73 0b       	sbc	r23, r19
    4254:	84 0b       	sbc	r24, r20
    4256:	ba f0       	brmi	.+46     	; 0x4286 <__addsf3x+0x98>
    4258:	91 50       	subi	r25, 0x01	; 1
    425a:	a1 f0       	breq	.+40     	; 0x4284 <__addsf3x+0x96>
    425c:	ff 0f       	add	r31, r31
    425e:	bb 1f       	adc	r27, r27
    4260:	66 1f       	adc	r22, r22
    4262:	77 1f       	adc	r23, r23
    4264:	88 1f       	adc	r24, r24
    4266:	c2 f7       	brpl	.-16     	; 0x4258 <__addsf3x+0x6a>
    4268:	0e c0       	rjmp	.+28     	; 0x4286 <__addsf3x+0x98>
    426a:	ba 0f       	add	r27, r26
    426c:	62 1f       	adc	r22, r18
    426e:	73 1f       	adc	r23, r19
    4270:	84 1f       	adc	r24, r20
    4272:	48 f4       	brcc	.+18     	; 0x4286 <__addsf3x+0x98>
    4274:	87 95       	ror	r24
    4276:	77 95       	ror	r23
    4278:	67 95       	ror	r22
    427a:	b7 95       	ror	r27
    427c:	f7 95       	ror	r31
    427e:	9e 3f       	cpi	r25, 0xFE	; 254
    4280:	08 f0       	brcs	.+2      	; 0x4284 <__addsf3x+0x96>
    4282:	b3 cf       	rjmp	.-154    	; 0x41ea <__addsf3+0x1e>
    4284:	93 95       	inc	r25
    4286:	88 0f       	add	r24, r24
    4288:	08 f0       	brcs	.+2      	; 0x428c <__addsf3x+0x9e>
    428a:	99 27       	eor	r25, r25
    428c:	ee 0f       	add	r30, r30
    428e:	97 95       	ror	r25
    4290:	87 95       	ror	r24
    4292:	08 95       	ret

00004294 <atan>:
    4294:	df 93       	push	r29
    4296:	dd 27       	eor	r29, r29
    4298:	b9 2f       	mov	r27, r25
    429a:	bf 77       	andi	r27, 0x7F	; 127
    429c:	40 e8       	ldi	r20, 0x80	; 128
    429e:	5f e3       	ldi	r21, 0x3F	; 63
    42a0:	16 16       	cp	r1, r22
    42a2:	17 06       	cpc	r1, r23
    42a4:	48 07       	cpc	r20, r24
    42a6:	5b 07       	cpc	r21, r27
    42a8:	10 f4       	brcc	.+4      	; 0x42ae <atan+0x1a>
    42aa:	d9 2f       	mov	r29, r25
    42ac:	f9 d1       	rcall	.+1010   	; 0x46a0 <inverse>
    42ae:	9f 93       	push	r25
    42b0:	8f 93       	push	r24
    42b2:	7f 93       	push	r23
    42b4:	6f 93       	push	r22
    42b6:	23 d3       	rcall	.+1606   	; 0x48fe <square>
    42b8:	ee e5       	ldi	r30, 0x5E	; 94
    42ba:	f1 e0       	ldi	r31, 0x01	; 1
    42bc:	69 d1       	rcall	.+722    	; 0x4590 <__fp_powser>
    42be:	9b d1       	rcall	.+822    	; 0x45f6 <__fp_round>
    42c0:	2f 91       	pop	r18
    42c2:	3f 91       	pop	r19
    42c4:	4f 91       	pop	r20
    42c6:	5f 91       	pop	r21
    42c8:	61 d2       	rcall	.+1218   	; 0x478c <__mulsf3x>
    42ca:	dd 23       	and	r29, r29
    42cc:	49 f0       	breq	.+18     	; 0x42e0 <atan+0x4c>
    42ce:	90 58       	subi	r25, 0x80	; 128
    42d0:	a2 ea       	ldi	r26, 0xA2	; 162
    42d2:	2a ed       	ldi	r18, 0xDA	; 218
    42d4:	3f e0       	ldi	r19, 0x0F	; 15
    42d6:	49 ec       	ldi	r20, 0xC9	; 201
    42d8:	5f e3       	ldi	r21, 0x3F	; 63
    42da:	d0 78       	andi	r29, 0x80	; 128
    42dc:	5d 27       	eor	r21, r29
    42de:	87 df       	rcall	.-242    	; 0x41ee <__addsf3x>
    42e0:	df 91       	pop	r29
    42e2:	89 c1       	rjmp	.+786    	; 0x45f6 <__fp_round>

000042e4 <ceil>:
    42e4:	bb d1       	rcall	.+886    	; 0x465c <__fp_trunc>
    42e6:	80 f0       	brcs	.+32     	; 0x4308 <ceil+0x24>
    42e8:	9f 37       	cpi	r25, 0x7F	; 127
    42ea:	40 f4       	brcc	.+16     	; 0x42fc <ceil+0x18>
    42ec:	91 11       	cpse	r25, r1
    42ee:	0e f4       	brtc	.+2      	; 0x42f2 <ceil+0xe>
    42f0:	cd c1       	rjmp	.+922    	; 0x468c <__fp_szero>
    42f2:	60 e0       	ldi	r22, 0x00	; 0
    42f4:	70 e0       	ldi	r23, 0x00	; 0
    42f6:	80 e8       	ldi	r24, 0x80	; 128
    42f8:	9f e3       	ldi	r25, 0x3F	; 63
    42fa:	08 95       	ret
    42fc:	26 f0       	brts	.+8      	; 0x4306 <ceil+0x22>
    42fe:	1b 16       	cp	r1, r27
    4300:	61 1d       	adc	r22, r1
    4302:	71 1d       	adc	r23, r1
    4304:	81 1d       	adc	r24, r1
    4306:	18 c1       	rjmp	.+560    	; 0x4538 <__fp_mintl>
    4308:	32 c1       	rjmp	.+612    	; 0x456e <__fp_mpack>

0000430a <__cmpsf2>:
    430a:	ec d0       	rcall	.+472    	; 0x44e4 <__fp_cmp>
    430c:	08 f4       	brcc	.+2      	; 0x4310 <__cmpsf2+0x6>
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	08 95       	ret

00004312 <__divsf3>:
    4312:	0c d0       	rcall	.+24     	; 0x432c <__divsf3x>
    4314:	70 c1       	rjmp	.+736    	; 0x45f6 <__fp_round>
    4316:	68 d1       	rcall	.+720    	; 0x45e8 <__fp_pscB>
    4318:	40 f0       	brcs	.+16     	; 0x432a <__divsf3+0x18>
    431a:	5f d1       	rcall	.+702    	; 0x45da <__fp_pscA>
    431c:	30 f0       	brcs	.+12     	; 0x432a <__divsf3+0x18>
    431e:	21 f4       	brne	.+8      	; 0x4328 <__divsf3+0x16>
    4320:	5f 3f       	cpi	r21, 0xFF	; 255
    4322:	19 f0       	breq	.+6      	; 0x432a <__divsf3+0x18>
    4324:	03 c1       	rjmp	.+518    	; 0x452c <__fp_inf>
    4326:	51 11       	cpse	r21, r1
    4328:	b1 c1       	rjmp	.+866    	; 0x468c <__fp_szero>
    432a:	2f c1       	rjmp	.+606    	; 0x458a <__fp_nan>

0000432c <__divsf3x>:
    432c:	75 d1       	rcall	.+746    	; 0x4618 <__fp_split3>
    432e:	98 f3       	brcs	.-26     	; 0x4316 <__divsf3+0x4>

00004330 <__divsf3_pse>:
    4330:	99 23       	and	r25, r25
    4332:	c9 f3       	breq	.-14     	; 0x4326 <__divsf3+0x14>
    4334:	55 23       	and	r21, r21
    4336:	b1 f3       	breq	.-20     	; 0x4324 <__divsf3+0x12>
    4338:	95 1b       	sub	r25, r21
    433a:	55 0b       	sbc	r21, r21
    433c:	bb 27       	eor	r27, r27
    433e:	aa 27       	eor	r26, r26
    4340:	62 17       	cp	r22, r18
    4342:	73 07       	cpc	r23, r19
    4344:	84 07       	cpc	r24, r20
    4346:	38 f0       	brcs	.+14     	; 0x4356 <__divsf3_pse+0x26>
    4348:	9f 5f       	subi	r25, 0xFF	; 255
    434a:	5f 4f       	sbci	r21, 0xFF	; 255
    434c:	22 0f       	add	r18, r18
    434e:	33 1f       	adc	r19, r19
    4350:	44 1f       	adc	r20, r20
    4352:	aa 1f       	adc	r26, r26
    4354:	a9 f3       	breq	.-22     	; 0x4340 <__divsf3_pse+0x10>
    4356:	33 d0       	rcall	.+102    	; 0x43be <__divsf3_pse+0x8e>
    4358:	0e 2e       	mov	r0, r30
    435a:	3a f0       	brmi	.+14     	; 0x436a <__divsf3_pse+0x3a>
    435c:	e0 e8       	ldi	r30, 0x80	; 128
    435e:	30 d0       	rcall	.+96     	; 0x43c0 <__divsf3_pse+0x90>
    4360:	91 50       	subi	r25, 0x01	; 1
    4362:	50 40       	sbci	r21, 0x00	; 0
    4364:	e6 95       	lsr	r30
    4366:	00 1c       	adc	r0, r0
    4368:	ca f7       	brpl	.-14     	; 0x435c <__divsf3_pse+0x2c>
    436a:	29 d0       	rcall	.+82     	; 0x43be <__divsf3_pse+0x8e>
    436c:	fe 2f       	mov	r31, r30
    436e:	27 d0       	rcall	.+78     	; 0x43be <__divsf3_pse+0x8e>
    4370:	66 0f       	add	r22, r22
    4372:	77 1f       	adc	r23, r23
    4374:	88 1f       	adc	r24, r24
    4376:	bb 1f       	adc	r27, r27
    4378:	26 17       	cp	r18, r22
    437a:	37 07       	cpc	r19, r23
    437c:	48 07       	cpc	r20, r24
    437e:	ab 07       	cpc	r26, r27
    4380:	b0 e8       	ldi	r27, 0x80	; 128
    4382:	09 f0       	breq	.+2      	; 0x4386 <__divsf3_pse+0x56>
    4384:	bb 0b       	sbc	r27, r27
    4386:	80 2d       	mov	r24, r0
    4388:	bf 01       	movw	r22, r30
    438a:	ff 27       	eor	r31, r31
    438c:	93 58       	subi	r25, 0x83	; 131
    438e:	5f 4f       	sbci	r21, 0xFF	; 255
    4390:	2a f0       	brmi	.+10     	; 0x439c <__divsf3_pse+0x6c>
    4392:	9e 3f       	cpi	r25, 0xFE	; 254
    4394:	51 05       	cpc	r21, r1
    4396:	68 f0       	brcs	.+26     	; 0x43b2 <__divsf3_pse+0x82>
    4398:	c9 c0       	rjmp	.+402    	; 0x452c <__fp_inf>
    439a:	78 c1       	rjmp	.+752    	; 0x468c <__fp_szero>
    439c:	5f 3f       	cpi	r21, 0xFF	; 255
    439e:	ec f3       	brlt	.-6      	; 0x439a <__divsf3_pse+0x6a>
    43a0:	98 3e       	cpi	r25, 0xE8	; 232
    43a2:	dc f3       	brlt	.-10     	; 0x439a <__divsf3_pse+0x6a>
    43a4:	86 95       	lsr	r24
    43a6:	77 95       	ror	r23
    43a8:	67 95       	ror	r22
    43aa:	b7 95       	ror	r27
    43ac:	f7 95       	ror	r31
    43ae:	9f 5f       	subi	r25, 0xFF	; 255
    43b0:	c9 f7       	brne	.-14     	; 0x43a4 <__divsf3_pse+0x74>
    43b2:	88 0f       	add	r24, r24
    43b4:	91 1d       	adc	r25, r1
    43b6:	96 95       	lsr	r25
    43b8:	87 95       	ror	r24
    43ba:	97 f9       	bld	r25, 7
    43bc:	08 95       	ret
    43be:	e1 e0       	ldi	r30, 0x01	; 1
    43c0:	66 0f       	add	r22, r22
    43c2:	77 1f       	adc	r23, r23
    43c4:	88 1f       	adc	r24, r24
    43c6:	bb 1f       	adc	r27, r27
    43c8:	62 17       	cp	r22, r18
    43ca:	73 07       	cpc	r23, r19
    43cc:	84 07       	cpc	r24, r20
    43ce:	ba 07       	cpc	r27, r26
    43d0:	20 f0       	brcs	.+8      	; 0x43da <__divsf3_pse+0xaa>
    43d2:	62 1b       	sub	r22, r18
    43d4:	73 0b       	sbc	r23, r19
    43d6:	84 0b       	sbc	r24, r20
    43d8:	ba 0b       	sbc	r27, r26
    43da:	ee 1f       	adc	r30, r30
    43dc:	88 f7       	brcc	.-30     	; 0x43c0 <__divsf3_pse+0x90>
    43de:	e0 95       	com	r30
    43e0:	08 95       	ret

000043e2 <__fixsfsi>:
    43e2:	04 d0       	rcall	.+8      	; 0x43ec <__fixunssfsi>
    43e4:	68 94       	set
    43e6:	b1 11       	cpse	r27, r1
    43e8:	51 c1       	rjmp	.+674    	; 0x468c <__fp_szero>
    43ea:	08 95       	ret

000043ec <__fixunssfsi>:
    43ec:	1d d1       	rcall	.+570    	; 0x4628 <__fp_splitA>
    43ee:	88 f0       	brcs	.+34     	; 0x4412 <__fixunssfsi+0x26>
    43f0:	9f 57       	subi	r25, 0x7F	; 127
    43f2:	90 f0       	brcs	.+36     	; 0x4418 <__fixunssfsi+0x2c>
    43f4:	b9 2f       	mov	r27, r25
    43f6:	99 27       	eor	r25, r25
    43f8:	b7 51       	subi	r27, 0x17	; 23
    43fa:	a0 f0       	brcs	.+40     	; 0x4424 <__fixunssfsi+0x38>
    43fc:	d1 f0       	breq	.+52     	; 0x4432 <__fixunssfsi+0x46>
    43fe:	66 0f       	add	r22, r22
    4400:	77 1f       	adc	r23, r23
    4402:	88 1f       	adc	r24, r24
    4404:	99 1f       	adc	r25, r25
    4406:	1a f0       	brmi	.+6      	; 0x440e <__fixunssfsi+0x22>
    4408:	ba 95       	dec	r27
    440a:	c9 f7       	brne	.-14     	; 0x43fe <__fixunssfsi+0x12>
    440c:	12 c0       	rjmp	.+36     	; 0x4432 <__fixunssfsi+0x46>
    440e:	b1 30       	cpi	r27, 0x01	; 1
    4410:	81 f0       	breq	.+32     	; 0x4432 <__fixunssfsi+0x46>
    4412:	3b d1       	rcall	.+630    	; 0x468a <__fp_zero>
    4414:	b1 e0       	ldi	r27, 0x01	; 1
    4416:	08 95       	ret
    4418:	38 c1       	rjmp	.+624    	; 0x468a <__fp_zero>
    441a:	67 2f       	mov	r22, r23
    441c:	78 2f       	mov	r23, r24
    441e:	88 27       	eor	r24, r24
    4420:	b8 5f       	subi	r27, 0xF8	; 248
    4422:	39 f0       	breq	.+14     	; 0x4432 <__fixunssfsi+0x46>
    4424:	b9 3f       	cpi	r27, 0xF9	; 249
    4426:	cc f3       	brlt	.-14     	; 0x441a <__fixunssfsi+0x2e>
    4428:	86 95       	lsr	r24
    442a:	77 95       	ror	r23
    442c:	67 95       	ror	r22
    442e:	b3 95       	inc	r27
    4430:	d9 f7       	brne	.-10     	; 0x4428 <__fixunssfsi+0x3c>
    4432:	3e f4       	brtc	.+14     	; 0x4442 <__fixunssfsi+0x56>
    4434:	90 95       	com	r25
    4436:	80 95       	com	r24
    4438:	70 95       	com	r23
    443a:	61 95       	neg	r22
    443c:	7f 4f       	sbci	r23, 0xFF	; 255
    443e:	8f 4f       	sbci	r24, 0xFF	; 255
    4440:	9f 4f       	sbci	r25, 0xFF	; 255
    4442:	08 95       	ret

00004444 <__floatunsisf>:
    4444:	e8 94       	clt
    4446:	09 c0       	rjmp	.+18     	; 0x445a <__floatsisf+0x12>

00004448 <__floatsisf>:
    4448:	97 fb       	bst	r25, 7
    444a:	3e f4       	brtc	.+14     	; 0x445a <__floatsisf+0x12>
    444c:	90 95       	com	r25
    444e:	80 95       	com	r24
    4450:	70 95       	com	r23
    4452:	61 95       	neg	r22
    4454:	7f 4f       	sbci	r23, 0xFF	; 255
    4456:	8f 4f       	sbci	r24, 0xFF	; 255
    4458:	9f 4f       	sbci	r25, 0xFF	; 255
    445a:	99 23       	and	r25, r25
    445c:	a9 f0       	breq	.+42     	; 0x4488 <__floatsisf+0x40>
    445e:	f9 2f       	mov	r31, r25
    4460:	96 e9       	ldi	r25, 0x96	; 150
    4462:	bb 27       	eor	r27, r27
    4464:	93 95       	inc	r25
    4466:	f6 95       	lsr	r31
    4468:	87 95       	ror	r24
    446a:	77 95       	ror	r23
    446c:	67 95       	ror	r22
    446e:	b7 95       	ror	r27
    4470:	f1 11       	cpse	r31, r1
    4472:	f8 cf       	rjmp	.-16     	; 0x4464 <__floatsisf+0x1c>
    4474:	fa f4       	brpl	.+62     	; 0x44b4 <__floatsisf+0x6c>
    4476:	bb 0f       	add	r27, r27
    4478:	11 f4       	brne	.+4      	; 0x447e <__floatsisf+0x36>
    447a:	60 ff       	sbrs	r22, 0
    447c:	1b c0       	rjmp	.+54     	; 0x44b4 <__floatsisf+0x6c>
    447e:	6f 5f       	subi	r22, 0xFF	; 255
    4480:	7f 4f       	sbci	r23, 0xFF	; 255
    4482:	8f 4f       	sbci	r24, 0xFF	; 255
    4484:	9f 4f       	sbci	r25, 0xFF	; 255
    4486:	16 c0       	rjmp	.+44     	; 0x44b4 <__floatsisf+0x6c>
    4488:	88 23       	and	r24, r24
    448a:	11 f0       	breq	.+4      	; 0x4490 <__floatsisf+0x48>
    448c:	96 e9       	ldi	r25, 0x96	; 150
    448e:	11 c0       	rjmp	.+34     	; 0x44b2 <__floatsisf+0x6a>
    4490:	77 23       	and	r23, r23
    4492:	21 f0       	breq	.+8      	; 0x449c <__floatsisf+0x54>
    4494:	9e e8       	ldi	r25, 0x8E	; 142
    4496:	87 2f       	mov	r24, r23
    4498:	76 2f       	mov	r23, r22
    449a:	05 c0       	rjmp	.+10     	; 0x44a6 <__floatsisf+0x5e>
    449c:	66 23       	and	r22, r22
    449e:	71 f0       	breq	.+28     	; 0x44bc <__floatsisf+0x74>
    44a0:	96 e8       	ldi	r25, 0x86	; 134
    44a2:	86 2f       	mov	r24, r22
    44a4:	70 e0       	ldi	r23, 0x00	; 0
    44a6:	60 e0       	ldi	r22, 0x00	; 0
    44a8:	2a f0       	brmi	.+10     	; 0x44b4 <__floatsisf+0x6c>
    44aa:	9a 95       	dec	r25
    44ac:	66 0f       	add	r22, r22
    44ae:	77 1f       	adc	r23, r23
    44b0:	88 1f       	adc	r24, r24
    44b2:	da f7       	brpl	.-10     	; 0x44aa <__floatsisf+0x62>
    44b4:	88 0f       	add	r24, r24
    44b6:	96 95       	lsr	r25
    44b8:	87 95       	ror	r24
    44ba:	97 f9       	bld	r25, 7
    44bc:	08 95       	ret

000044be <floor>:
    44be:	ce d0       	rcall	.+412    	; 0x465c <__fp_trunc>
    44c0:	80 f0       	brcs	.+32     	; 0x44e2 <floor+0x24>
    44c2:	9f 37       	cpi	r25, 0x7F	; 127
    44c4:	40 f4       	brcc	.+16     	; 0x44d6 <floor+0x18>
    44c6:	91 11       	cpse	r25, r1
    44c8:	0e f0       	brts	.+2      	; 0x44cc <floor+0xe>
    44ca:	e0 c0       	rjmp	.+448    	; 0x468c <__fp_szero>
    44cc:	60 e0       	ldi	r22, 0x00	; 0
    44ce:	70 e0       	ldi	r23, 0x00	; 0
    44d0:	80 e8       	ldi	r24, 0x80	; 128
    44d2:	9f eb       	ldi	r25, 0xBF	; 191
    44d4:	08 95       	ret
    44d6:	26 f4       	brtc	.+8      	; 0x44e0 <floor+0x22>
    44d8:	1b 16       	cp	r1, r27
    44da:	61 1d       	adc	r22, r1
    44dc:	71 1d       	adc	r23, r1
    44de:	81 1d       	adc	r24, r1
    44e0:	2b c0       	rjmp	.+86     	; 0x4538 <__fp_mintl>
    44e2:	45 c0       	rjmp	.+138    	; 0x456e <__fp_mpack>

000044e4 <__fp_cmp>:
    44e4:	99 0f       	add	r25, r25
    44e6:	00 08       	sbc	r0, r0
    44e8:	55 0f       	add	r21, r21
    44ea:	aa 0b       	sbc	r26, r26
    44ec:	e0 e8       	ldi	r30, 0x80	; 128
    44ee:	fe ef       	ldi	r31, 0xFE	; 254
    44f0:	16 16       	cp	r1, r22
    44f2:	17 06       	cpc	r1, r23
    44f4:	e8 07       	cpc	r30, r24
    44f6:	f9 07       	cpc	r31, r25
    44f8:	c0 f0       	brcs	.+48     	; 0x452a <__fp_cmp+0x46>
    44fa:	12 16       	cp	r1, r18
    44fc:	13 06       	cpc	r1, r19
    44fe:	e4 07       	cpc	r30, r20
    4500:	f5 07       	cpc	r31, r21
    4502:	98 f0       	brcs	.+38     	; 0x452a <__fp_cmp+0x46>
    4504:	62 1b       	sub	r22, r18
    4506:	73 0b       	sbc	r23, r19
    4508:	84 0b       	sbc	r24, r20
    450a:	95 0b       	sbc	r25, r21
    450c:	39 f4       	brne	.+14     	; 0x451c <__fp_cmp+0x38>
    450e:	0a 26       	eor	r0, r26
    4510:	61 f0       	breq	.+24     	; 0x452a <__fp_cmp+0x46>
    4512:	23 2b       	or	r18, r19
    4514:	24 2b       	or	r18, r20
    4516:	25 2b       	or	r18, r21
    4518:	21 f4       	brne	.+8      	; 0x4522 <__fp_cmp+0x3e>
    451a:	08 95       	ret
    451c:	0a 26       	eor	r0, r26
    451e:	09 f4       	brne	.+2      	; 0x4522 <__fp_cmp+0x3e>
    4520:	a1 40       	sbci	r26, 0x01	; 1
    4522:	a6 95       	lsr	r26
    4524:	8f ef       	ldi	r24, 0xFF	; 255
    4526:	81 1d       	adc	r24, r1
    4528:	81 1d       	adc	r24, r1
    452a:	08 95       	ret

0000452c <__fp_inf>:
    452c:	97 f9       	bld	r25, 7
    452e:	9f 67       	ori	r25, 0x7F	; 127
    4530:	80 e8       	ldi	r24, 0x80	; 128
    4532:	70 e0       	ldi	r23, 0x00	; 0
    4534:	60 e0       	ldi	r22, 0x00	; 0
    4536:	08 95       	ret

00004538 <__fp_mintl>:
    4538:	88 23       	and	r24, r24
    453a:	71 f4       	brne	.+28     	; 0x4558 <__fp_mintl+0x20>
    453c:	77 23       	and	r23, r23
    453e:	21 f0       	breq	.+8      	; 0x4548 <__fp_mintl+0x10>
    4540:	98 50       	subi	r25, 0x08	; 8
    4542:	87 2b       	or	r24, r23
    4544:	76 2f       	mov	r23, r22
    4546:	07 c0       	rjmp	.+14     	; 0x4556 <__fp_mintl+0x1e>
    4548:	66 23       	and	r22, r22
    454a:	11 f4       	brne	.+4      	; 0x4550 <__fp_mintl+0x18>
    454c:	99 27       	eor	r25, r25
    454e:	0d c0       	rjmp	.+26     	; 0x456a <__fp_mintl+0x32>
    4550:	90 51       	subi	r25, 0x10	; 16
    4552:	86 2b       	or	r24, r22
    4554:	70 e0       	ldi	r23, 0x00	; 0
    4556:	60 e0       	ldi	r22, 0x00	; 0
    4558:	2a f0       	brmi	.+10     	; 0x4564 <__fp_mintl+0x2c>
    455a:	9a 95       	dec	r25
    455c:	66 0f       	add	r22, r22
    455e:	77 1f       	adc	r23, r23
    4560:	88 1f       	adc	r24, r24
    4562:	da f7       	brpl	.-10     	; 0x455a <__fp_mintl+0x22>
    4564:	88 0f       	add	r24, r24
    4566:	96 95       	lsr	r25
    4568:	87 95       	ror	r24
    456a:	97 f9       	bld	r25, 7
    456c:	08 95       	ret

0000456e <__fp_mpack>:
    456e:	9f 3f       	cpi	r25, 0xFF	; 255
    4570:	31 f0       	breq	.+12     	; 0x457e <__fp_mpack_finite+0xc>

00004572 <__fp_mpack_finite>:
    4572:	91 50       	subi	r25, 0x01	; 1
    4574:	20 f4       	brcc	.+8      	; 0x457e <__fp_mpack_finite+0xc>
    4576:	87 95       	ror	r24
    4578:	77 95       	ror	r23
    457a:	67 95       	ror	r22
    457c:	b7 95       	ror	r27
    457e:	88 0f       	add	r24, r24
    4580:	91 1d       	adc	r25, r1
    4582:	96 95       	lsr	r25
    4584:	87 95       	ror	r24
    4586:	97 f9       	bld	r25, 7
    4588:	08 95       	ret

0000458a <__fp_nan>:
    458a:	9f ef       	ldi	r25, 0xFF	; 255
    458c:	80 ec       	ldi	r24, 0xC0	; 192
    458e:	08 95       	ret

00004590 <__fp_powser>:
    4590:	df 93       	push	r29
    4592:	cf 93       	push	r28
    4594:	1f 93       	push	r17
    4596:	0f 93       	push	r16
    4598:	ff 92       	push	r15
    459a:	ef 92       	push	r14
    459c:	df 92       	push	r13
    459e:	7b 01       	movw	r14, r22
    45a0:	8c 01       	movw	r16, r24
    45a2:	68 94       	set
    45a4:	05 c0       	rjmp	.+10     	; 0x45b0 <__fp_powser+0x20>
    45a6:	da 2e       	mov	r13, r26
    45a8:	ef 01       	movw	r28, r30
    45aa:	f0 d0       	rcall	.+480    	; 0x478c <__mulsf3x>
    45ac:	fe 01       	movw	r30, r28
    45ae:	e8 94       	clt
    45b0:	a5 91       	lpm	r26, Z+
    45b2:	25 91       	lpm	r18, Z+
    45b4:	35 91       	lpm	r19, Z+
    45b6:	45 91       	lpm	r20, Z+
    45b8:	55 91       	lpm	r21, Z+
    45ba:	ae f3       	brts	.-22     	; 0x45a6 <__fp_powser+0x16>
    45bc:	ef 01       	movw	r28, r30
    45be:	17 de       	rcall	.-978    	; 0x41ee <__addsf3x>
    45c0:	fe 01       	movw	r30, r28
    45c2:	97 01       	movw	r18, r14
    45c4:	a8 01       	movw	r20, r16
    45c6:	da 94       	dec	r13
    45c8:	79 f7       	brne	.-34     	; 0x45a8 <__fp_powser+0x18>
    45ca:	df 90       	pop	r13
    45cc:	ef 90       	pop	r14
    45ce:	ff 90       	pop	r15
    45d0:	0f 91       	pop	r16
    45d2:	1f 91       	pop	r17
    45d4:	cf 91       	pop	r28
    45d6:	df 91       	pop	r29
    45d8:	08 95       	ret

000045da <__fp_pscA>:
    45da:	00 24       	eor	r0, r0
    45dc:	0a 94       	dec	r0
    45de:	16 16       	cp	r1, r22
    45e0:	17 06       	cpc	r1, r23
    45e2:	18 06       	cpc	r1, r24
    45e4:	09 06       	cpc	r0, r25
    45e6:	08 95       	ret

000045e8 <__fp_pscB>:
    45e8:	00 24       	eor	r0, r0
    45ea:	0a 94       	dec	r0
    45ec:	12 16       	cp	r1, r18
    45ee:	13 06       	cpc	r1, r19
    45f0:	14 06       	cpc	r1, r20
    45f2:	05 06       	cpc	r0, r21
    45f4:	08 95       	ret

000045f6 <__fp_round>:
    45f6:	09 2e       	mov	r0, r25
    45f8:	03 94       	inc	r0
    45fa:	00 0c       	add	r0, r0
    45fc:	11 f4       	brne	.+4      	; 0x4602 <__fp_round+0xc>
    45fe:	88 23       	and	r24, r24
    4600:	52 f0       	brmi	.+20     	; 0x4616 <__fp_round+0x20>
    4602:	bb 0f       	add	r27, r27
    4604:	40 f4       	brcc	.+16     	; 0x4616 <__fp_round+0x20>
    4606:	bf 2b       	or	r27, r31
    4608:	11 f4       	brne	.+4      	; 0x460e <__fp_round+0x18>
    460a:	60 ff       	sbrs	r22, 0
    460c:	04 c0       	rjmp	.+8      	; 0x4616 <__fp_round+0x20>
    460e:	6f 5f       	subi	r22, 0xFF	; 255
    4610:	7f 4f       	sbci	r23, 0xFF	; 255
    4612:	8f 4f       	sbci	r24, 0xFF	; 255
    4614:	9f 4f       	sbci	r25, 0xFF	; 255
    4616:	08 95       	ret

00004618 <__fp_split3>:
    4618:	57 fd       	sbrc	r21, 7
    461a:	90 58       	subi	r25, 0x80	; 128
    461c:	44 0f       	add	r20, r20
    461e:	55 1f       	adc	r21, r21
    4620:	59 f0       	breq	.+22     	; 0x4638 <__fp_splitA+0x10>
    4622:	5f 3f       	cpi	r21, 0xFF	; 255
    4624:	71 f0       	breq	.+28     	; 0x4642 <__fp_splitA+0x1a>
    4626:	47 95       	ror	r20

00004628 <__fp_splitA>:
    4628:	88 0f       	add	r24, r24
    462a:	97 fb       	bst	r25, 7
    462c:	99 1f       	adc	r25, r25
    462e:	61 f0       	breq	.+24     	; 0x4648 <__fp_splitA+0x20>
    4630:	9f 3f       	cpi	r25, 0xFF	; 255
    4632:	79 f0       	breq	.+30     	; 0x4652 <__fp_splitA+0x2a>
    4634:	87 95       	ror	r24
    4636:	08 95       	ret
    4638:	12 16       	cp	r1, r18
    463a:	13 06       	cpc	r1, r19
    463c:	14 06       	cpc	r1, r20
    463e:	55 1f       	adc	r21, r21
    4640:	f2 cf       	rjmp	.-28     	; 0x4626 <__fp_split3+0xe>
    4642:	46 95       	lsr	r20
    4644:	f1 df       	rcall	.-30     	; 0x4628 <__fp_splitA>
    4646:	08 c0       	rjmp	.+16     	; 0x4658 <__fp_splitA+0x30>
    4648:	16 16       	cp	r1, r22
    464a:	17 06       	cpc	r1, r23
    464c:	18 06       	cpc	r1, r24
    464e:	99 1f       	adc	r25, r25
    4650:	f1 cf       	rjmp	.-30     	; 0x4634 <__fp_splitA+0xc>
    4652:	86 95       	lsr	r24
    4654:	71 05       	cpc	r23, r1
    4656:	61 05       	cpc	r22, r1
    4658:	08 94       	sec
    465a:	08 95       	ret

0000465c <__fp_trunc>:
    465c:	e5 df       	rcall	.-54     	; 0x4628 <__fp_splitA>
    465e:	a0 f0       	brcs	.+40     	; 0x4688 <__fp_trunc+0x2c>
    4660:	be e7       	ldi	r27, 0x7E	; 126
    4662:	b9 17       	cp	r27, r25
    4664:	88 f4       	brcc	.+34     	; 0x4688 <__fp_trunc+0x2c>
    4666:	bb 27       	eor	r27, r27
    4668:	9f 38       	cpi	r25, 0x8F	; 143
    466a:	60 f4       	brcc	.+24     	; 0x4684 <__fp_trunc+0x28>
    466c:	16 16       	cp	r1, r22
    466e:	b1 1d       	adc	r27, r1
    4670:	67 2f       	mov	r22, r23
    4672:	78 2f       	mov	r23, r24
    4674:	88 27       	eor	r24, r24
    4676:	98 5f       	subi	r25, 0xF8	; 248
    4678:	f7 cf       	rjmp	.-18     	; 0x4668 <__fp_trunc+0xc>
    467a:	86 95       	lsr	r24
    467c:	77 95       	ror	r23
    467e:	67 95       	ror	r22
    4680:	b1 1d       	adc	r27, r1
    4682:	93 95       	inc	r25
    4684:	96 39       	cpi	r25, 0x96	; 150
    4686:	c8 f3       	brcs	.-14     	; 0x467a <__fp_trunc+0x1e>
    4688:	08 95       	ret

0000468a <__fp_zero>:
    468a:	e8 94       	clt

0000468c <__fp_szero>:
    468c:	bb 27       	eor	r27, r27
    468e:	66 27       	eor	r22, r22
    4690:	77 27       	eor	r23, r23
    4692:	cb 01       	movw	r24, r22
    4694:	97 f9       	bld	r25, 7
    4696:	08 95       	ret

00004698 <__gesf2>:
    4698:	25 df       	rcall	.-438    	; 0x44e4 <__fp_cmp>
    469a:	08 f4       	brcc	.+2      	; 0x469e <__gesf2+0x6>
    469c:	8f ef       	ldi	r24, 0xFF	; 255
    469e:	08 95       	ret

000046a0 <inverse>:
    46a0:	9b 01       	movw	r18, r22
    46a2:	ac 01       	movw	r20, r24
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	70 e0       	ldi	r23, 0x00	; 0
    46a8:	80 e8       	ldi	r24, 0x80	; 128
    46aa:	9f e3       	ldi	r25, 0x3F	; 63
    46ac:	32 ce       	rjmp	.-924    	; 0x4312 <__divsf3>

000046ae <lround>:
    46ae:	bc df       	rcall	.-136    	; 0x4628 <__fp_splitA>
    46b0:	58 f1       	brcs	.+86     	; 0x4708 <lround+0x5a>
    46b2:	9e 57       	subi	r25, 0x7E	; 126
    46b4:	58 f1       	brcs	.+86     	; 0x470c <lround+0x5e>
    46b6:	98 51       	subi	r25, 0x18	; 24
    46b8:	a0 f0       	brcs	.+40     	; 0x46e2 <lround+0x34>
    46ba:	e9 f0       	breq	.+58     	; 0x46f6 <lround+0x48>
    46bc:	98 30       	cpi	r25, 0x08	; 8
    46be:	20 f5       	brcc	.+72     	; 0x4708 <lround+0x5a>
    46c0:	09 2e       	mov	r0, r25
    46c2:	99 27       	eor	r25, r25
    46c4:	66 0f       	add	r22, r22
    46c6:	77 1f       	adc	r23, r23
    46c8:	88 1f       	adc	r24, r24
    46ca:	99 1f       	adc	r25, r25
    46cc:	0a 94       	dec	r0
    46ce:	d1 f7       	brne	.-12     	; 0x46c4 <lround+0x16>
    46d0:	12 c0       	rjmp	.+36     	; 0x46f6 <lround+0x48>
    46d2:	06 2e       	mov	r0, r22
    46d4:	67 2f       	mov	r22, r23
    46d6:	78 2f       	mov	r23, r24
    46d8:	88 27       	eor	r24, r24
    46da:	98 5f       	subi	r25, 0xF8	; 248
    46dc:	11 f4       	brne	.+4      	; 0x46e2 <lround+0x34>
    46de:	00 0c       	add	r0, r0
    46e0:	07 c0       	rjmp	.+14     	; 0x46f0 <lround+0x42>
    46e2:	99 3f       	cpi	r25, 0xF9	; 249
    46e4:	b4 f3       	brlt	.-20     	; 0x46d2 <lround+0x24>
    46e6:	86 95       	lsr	r24
    46e8:	77 95       	ror	r23
    46ea:	67 95       	ror	r22
    46ec:	93 95       	inc	r25
    46ee:	d9 f7       	brne	.-10     	; 0x46e6 <lround+0x38>
    46f0:	61 1d       	adc	r22, r1
    46f2:	71 1d       	adc	r23, r1
    46f4:	81 1d       	adc	r24, r1
    46f6:	3e f4       	brtc	.+14     	; 0x4706 <lround+0x58>
    46f8:	90 95       	com	r25
    46fa:	80 95       	com	r24
    46fc:	70 95       	com	r23
    46fe:	61 95       	neg	r22
    4700:	7f 4f       	sbci	r23, 0xFF	; 255
    4702:	8f 4f       	sbci	r24, 0xFF	; 255
    4704:	9f 4f       	sbci	r25, 0xFF	; 255
    4706:	08 95       	ret
    4708:	68 94       	set
    470a:	c0 cf       	rjmp	.-128    	; 0x468c <__fp_szero>
    470c:	be cf       	rjmp	.-132    	; 0x468a <__fp_zero>

0000470e <modf>:
    470e:	fa 01       	movw	r30, r20
    4710:	dc 01       	movw	r26, r24
    4712:	aa 0f       	add	r26, r26
    4714:	bb 1f       	adc	r27, r27
    4716:	9b 01       	movw	r18, r22
    4718:	ac 01       	movw	r20, r24
    471a:	bf 57       	subi	r27, 0x7F	; 127
    471c:	28 f4       	brcc	.+10     	; 0x4728 <modf+0x1a>
    471e:	22 27       	eor	r18, r18
    4720:	33 27       	eor	r19, r19
    4722:	44 27       	eor	r20, r20
    4724:	50 78       	andi	r21, 0x80	; 128
    4726:	1f c0       	rjmp	.+62     	; 0x4766 <modf+0x58>
    4728:	b7 51       	subi	r27, 0x17	; 23
    472a:	88 f4       	brcc	.+34     	; 0x474e <modf+0x40>
    472c:	ab 2f       	mov	r26, r27
    472e:	00 24       	eor	r0, r0
    4730:	46 95       	lsr	r20
    4732:	37 95       	ror	r19
    4734:	27 95       	ror	r18
    4736:	01 1c       	adc	r0, r1
    4738:	a3 95       	inc	r26
    473a:	d2 f3       	brmi	.-12     	; 0x4730 <modf+0x22>
    473c:	00 20       	and	r0, r0
    473e:	69 f0       	breq	.+26     	; 0x475a <modf+0x4c>
    4740:	22 0f       	add	r18, r18
    4742:	33 1f       	adc	r19, r19
    4744:	44 1f       	adc	r20, r20
    4746:	b3 95       	inc	r27
    4748:	da f3       	brmi	.-10     	; 0x4740 <modf+0x32>
    474a:	0d d0       	rcall	.+26     	; 0x4766 <modf+0x58>
    474c:	3e cd       	rjmp	.-1412   	; 0x41ca <__subsf3>
    474e:	61 30       	cpi	r22, 0x01	; 1
    4750:	71 05       	cpc	r23, r1
    4752:	a0 e8       	ldi	r26, 0x80	; 128
    4754:	8a 07       	cpc	r24, r26
    4756:	b9 46       	sbci	r27, 0x69	; 105
    4758:	30 f4       	brcc	.+12     	; 0x4766 <modf+0x58>
    475a:	9b 01       	movw	r18, r22
    475c:	ac 01       	movw	r20, r24
    475e:	66 27       	eor	r22, r22
    4760:	77 27       	eor	r23, r23
    4762:	88 27       	eor	r24, r24
    4764:	90 78       	andi	r25, 0x80	; 128
    4766:	30 96       	adiw	r30, 0x00	; 0
    4768:	21 f0       	breq	.+8      	; 0x4772 <modf+0x64>
    476a:	20 83       	st	Z, r18
    476c:	31 83       	std	Z+1, r19	; 0x01
    476e:	42 83       	std	Z+2, r20	; 0x02
    4770:	53 83       	std	Z+3, r21	; 0x03
    4772:	08 95       	ret

00004774 <__mulsf3>:
    4774:	0b d0       	rcall	.+22     	; 0x478c <__mulsf3x>
    4776:	3f cf       	rjmp	.-386    	; 0x45f6 <__fp_round>
    4778:	30 df       	rcall	.-416    	; 0x45da <__fp_pscA>
    477a:	28 f0       	brcs	.+10     	; 0x4786 <__mulsf3+0x12>
    477c:	35 df       	rcall	.-406    	; 0x45e8 <__fp_pscB>
    477e:	18 f0       	brcs	.+6      	; 0x4786 <__mulsf3+0x12>
    4780:	95 23       	and	r25, r21
    4782:	09 f0       	breq	.+2      	; 0x4786 <__mulsf3+0x12>
    4784:	d3 ce       	rjmp	.-602    	; 0x452c <__fp_inf>
    4786:	01 cf       	rjmp	.-510    	; 0x458a <__fp_nan>
    4788:	11 24       	eor	r1, r1
    478a:	80 cf       	rjmp	.-256    	; 0x468c <__fp_szero>

0000478c <__mulsf3x>:
    478c:	45 df       	rcall	.-374    	; 0x4618 <__fp_split3>
    478e:	a0 f3       	brcs	.-24     	; 0x4778 <__mulsf3+0x4>

00004790 <__mulsf3_pse>:
    4790:	95 9f       	mul	r25, r21
    4792:	d1 f3       	breq	.-12     	; 0x4788 <__mulsf3+0x14>
    4794:	95 0f       	add	r25, r21
    4796:	50 e0       	ldi	r21, 0x00	; 0
    4798:	55 1f       	adc	r21, r21
    479a:	62 9f       	mul	r22, r18
    479c:	f0 01       	movw	r30, r0
    479e:	72 9f       	mul	r23, r18
    47a0:	bb 27       	eor	r27, r27
    47a2:	f0 0d       	add	r31, r0
    47a4:	b1 1d       	adc	r27, r1
    47a6:	63 9f       	mul	r22, r19
    47a8:	aa 27       	eor	r26, r26
    47aa:	f0 0d       	add	r31, r0
    47ac:	b1 1d       	adc	r27, r1
    47ae:	aa 1f       	adc	r26, r26
    47b0:	64 9f       	mul	r22, r20
    47b2:	66 27       	eor	r22, r22
    47b4:	b0 0d       	add	r27, r0
    47b6:	a1 1d       	adc	r26, r1
    47b8:	66 1f       	adc	r22, r22
    47ba:	82 9f       	mul	r24, r18
    47bc:	22 27       	eor	r18, r18
    47be:	b0 0d       	add	r27, r0
    47c0:	a1 1d       	adc	r26, r1
    47c2:	62 1f       	adc	r22, r18
    47c4:	73 9f       	mul	r23, r19
    47c6:	b0 0d       	add	r27, r0
    47c8:	a1 1d       	adc	r26, r1
    47ca:	62 1f       	adc	r22, r18
    47cc:	83 9f       	mul	r24, r19
    47ce:	a0 0d       	add	r26, r0
    47d0:	61 1d       	adc	r22, r1
    47d2:	22 1f       	adc	r18, r18
    47d4:	74 9f       	mul	r23, r20
    47d6:	33 27       	eor	r19, r19
    47d8:	a0 0d       	add	r26, r0
    47da:	61 1d       	adc	r22, r1
    47dc:	23 1f       	adc	r18, r19
    47de:	84 9f       	mul	r24, r20
    47e0:	60 0d       	add	r22, r0
    47e2:	21 1d       	adc	r18, r1
    47e4:	82 2f       	mov	r24, r18
    47e6:	76 2f       	mov	r23, r22
    47e8:	6a 2f       	mov	r22, r26
    47ea:	11 24       	eor	r1, r1
    47ec:	9f 57       	subi	r25, 0x7F	; 127
    47ee:	50 40       	sbci	r21, 0x00	; 0
    47f0:	8a f0       	brmi	.+34     	; 0x4814 <__mulsf3_pse+0x84>
    47f2:	e1 f0       	breq	.+56     	; 0x482c <__mulsf3_pse+0x9c>
    47f4:	88 23       	and	r24, r24
    47f6:	4a f0       	brmi	.+18     	; 0x480a <__mulsf3_pse+0x7a>
    47f8:	ee 0f       	add	r30, r30
    47fa:	ff 1f       	adc	r31, r31
    47fc:	bb 1f       	adc	r27, r27
    47fe:	66 1f       	adc	r22, r22
    4800:	77 1f       	adc	r23, r23
    4802:	88 1f       	adc	r24, r24
    4804:	91 50       	subi	r25, 0x01	; 1
    4806:	50 40       	sbci	r21, 0x00	; 0
    4808:	a9 f7       	brne	.-22     	; 0x47f4 <__mulsf3_pse+0x64>
    480a:	9e 3f       	cpi	r25, 0xFE	; 254
    480c:	51 05       	cpc	r21, r1
    480e:	70 f0       	brcs	.+28     	; 0x482c <__mulsf3_pse+0x9c>
    4810:	8d ce       	rjmp	.-742    	; 0x452c <__fp_inf>
    4812:	3c cf       	rjmp	.-392    	; 0x468c <__fp_szero>
    4814:	5f 3f       	cpi	r21, 0xFF	; 255
    4816:	ec f3       	brlt	.-6      	; 0x4812 <__mulsf3_pse+0x82>
    4818:	98 3e       	cpi	r25, 0xE8	; 232
    481a:	dc f3       	brlt	.-10     	; 0x4812 <__mulsf3_pse+0x82>
    481c:	86 95       	lsr	r24
    481e:	77 95       	ror	r23
    4820:	67 95       	ror	r22
    4822:	b7 95       	ror	r27
    4824:	f7 95       	ror	r31
    4826:	e7 95       	ror	r30
    4828:	9f 5f       	subi	r25, 0xFF	; 255
    482a:	c1 f7       	brne	.-16     	; 0x481c <__mulsf3_pse+0x8c>
    482c:	fe 2b       	or	r31, r30
    482e:	88 0f       	add	r24, r24
    4830:	91 1d       	adc	r25, r1
    4832:	96 95       	lsr	r25
    4834:	87 95       	ror	r24
    4836:	97 f9       	bld	r25, 7
    4838:	08 95       	ret

0000483a <round>:
    483a:	f6 de       	rcall	.-532    	; 0x4628 <__fp_splitA>
    483c:	e0 f0       	brcs	.+56     	; 0x4876 <round+0x3c>
    483e:	9e 37       	cpi	r25, 0x7E	; 126
    4840:	d8 f0       	brcs	.+54     	; 0x4878 <round+0x3e>
    4842:	96 39       	cpi	r25, 0x96	; 150
    4844:	b8 f4       	brcc	.+46     	; 0x4874 <round+0x3a>
    4846:	9e 38       	cpi	r25, 0x8E	; 142
    4848:	48 f4       	brcc	.+18     	; 0x485c <round+0x22>
    484a:	67 2f       	mov	r22, r23
    484c:	78 2f       	mov	r23, r24
    484e:	88 27       	eor	r24, r24
    4850:	98 5f       	subi	r25, 0xF8	; 248
    4852:	f9 cf       	rjmp	.-14     	; 0x4846 <round+0xc>
    4854:	86 95       	lsr	r24
    4856:	77 95       	ror	r23
    4858:	67 95       	ror	r22
    485a:	93 95       	inc	r25
    485c:	95 39       	cpi	r25, 0x95	; 149
    485e:	d0 f3       	brcs	.-12     	; 0x4854 <round+0x1a>
    4860:	b6 2f       	mov	r27, r22
    4862:	b1 70       	andi	r27, 0x01	; 1
    4864:	6b 0f       	add	r22, r27
    4866:	71 1d       	adc	r23, r1
    4868:	81 1d       	adc	r24, r1
    486a:	20 f4       	brcc	.+8      	; 0x4874 <round+0x3a>
    486c:	87 95       	ror	r24
    486e:	77 95       	ror	r23
    4870:	67 95       	ror	r22
    4872:	93 95       	inc	r25
    4874:	61 ce       	rjmp	.-830    	; 0x4538 <__fp_mintl>
    4876:	7b ce       	rjmp	.-778    	; 0x456e <__fp_mpack>
    4878:	09 cf       	rjmp	.-494    	; 0x468c <__fp_szero>
    487a:	11 f4       	brne	.+4      	; 0x4880 <round+0x46>
    487c:	0e f4       	brtc	.+2      	; 0x4880 <round+0x46>
    487e:	85 ce       	rjmp	.-758    	; 0x458a <__fp_nan>
    4880:	76 ce       	rjmp	.-788    	; 0x456e <__fp_mpack>

00004882 <sqrt>:
    4882:	d2 de       	rcall	.-604    	; 0x4628 <__fp_splitA>
    4884:	d0 f3       	brcs	.-12     	; 0x487a <round+0x40>
    4886:	99 23       	and	r25, r25
    4888:	d9 f3       	breq	.-10     	; 0x4880 <round+0x46>
    488a:	ce f3       	brts	.-14     	; 0x487e <round+0x44>
    488c:	9f 57       	subi	r25, 0x7F	; 127
    488e:	55 0b       	sbc	r21, r21
    4890:	87 ff       	sbrs	r24, 7
    4892:	3f d0       	rcall	.+126    	; 0x4912 <__fp_norm2>
    4894:	00 24       	eor	r0, r0
    4896:	a0 e6       	ldi	r26, 0x60	; 96
    4898:	40 ea       	ldi	r20, 0xA0	; 160
    489a:	90 01       	movw	r18, r0
    489c:	80 58       	subi	r24, 0x80	; 128
    489e:	56 95       	lsr	r21
    48a0:	97 95       	ror	r25
    48a2:	28 f4       	brcc	.+10     	; 0x48ae <sqrt+0x2c>
    48a4:	80 5c       	subi	r24, 0xC0	; 192
    48a6:	66 0f       	add	r22, r22
    48a8:	77 1f       	adc	r23, r23
    48aa:	88 1f       	adc	r24, r24
    48ac:	20 f0       	brcs	.+8      	; 0x48b6 <sqrt+0x34>
    48ae:	26 17       	cp	r18, r22
    48b0:	37 07       	cpc	r19, r23
    48b2:	48 07       	cpc	r20, r24
    48b4:	30 f4       	brcc	.+12     	; 0x48c2 <sqrt+0x40>
    48b6:	62 1b       	sub	r22, r18
    48b8:	73 0b       	sbc	r23, r19
    48ba:	84 0b       	sbc	r24, r20
    48bc:	20 29       	or	r18, r0
    48be:	31 29       	or	r19, r1
    48c0:	4a 2b       	or	r20, r26
    48c2:	a6 95       	lsr	r26
    48c4:	17 94       	ror	r1
    48c6:	07 94       	ror	r0
    48c8:	20 25       	eor	r18, r0
    48ca:	31 25       	eor	r19, r1
    48cc:	4a 27       	eor	r20, r26
    48ce:	58 f7       	brcc	.-42     	; 0x48a6 <sqrt+0x24>
    48d0:	66 0f       	add	r22, r22
    48d2:	77 1f       	adc	r23, r23
    48d4:	88 1f       	adc	r24, r24
    48d6:	20 f0       	brcs	.+8      	; 0x48e0 <sqrt+0x5e>
    48d8:	26 17       	cp	r18, r22
    48da:	37 07       	cpc	r19, r23
    48dc:	48 07       	cpc	r20, r24
    48de:	30 f4       	brcc	.+12     	; 0x48ec <sqrt+0x6a>
    48e0:	62 0b       	sbc	r22, r18
    48e2:	73 0b       	sbc	r23, r19
    48e4:	84 0b       	sbc	r24, r20
    48e6:	20 0d       	add	r18, r0
    48e8:	31 1d       	adc	r19, r1
    48ea:	41 1d       	adc	r20, r1
    48ec:	a0 95       	com	r26
    48ee:	81 f7       	brne	.-32     	; 0x48d0 <sqrt+0x4e>
    48f0:	b9 01       	movw	r22, r18
    48f2:	84 2f       	mov	r24, r20
    48f4:	91 58       	subi	r25, 0x81	; 129
    48f6:	88 0f       	add	r24, r24
    48f8:	96 95       	lsr	r25
    48fa:	87 95       	ror	r24
    48fc:	08 95       	ret

000048fe <square>:
    48fe:	9b 01       	movw	r18, r22
    4900:	ac 01       	movw	r20, r24
    4902:	38 cf       	rjmp	.-400    	; 0x4774 <__mulsf3>

00004904 <trunc>:
    4904:	ab de       	rcall	.-682    	; 0x465c <__fp_trunc>
    4906:	20 f0       	brcs	.+8      	; 0x4910 <trunc+0xc>
    4908:	9f 37       	cpi	r25, 0x7F	; 127
    490a:	08 f4       	brcc	.+2      	; 0x490e <trunc+0xa>
    490c:	bf ce       	rjmp	.-642    	; 0x468c <__fp_szero>
    490e:	14 ce       	rjmp	.-984    	; 0x4538 <__fp_mintl>
    4910:	2e ce       	rjmp	.-932    	; 0x456e <__fp_mpack>

00004912 <__fp_norm2>:
    4912:	91 50       	subi	r25, 0x01	; 1
    4914:	50 40       	sbci	r21, 0x00	; 0
    4916:	66 0f       	add	r22, r22
    4918:	77 1f       	adc	r23, r23
    491a:	88 1f       	adc	r24, r24
    491c:	d2 f7       	brpl	.-12     	; 0x4912 <__fp_norm2>
    491e:	08 95       	ret

00004920 <__mulsi3>:
    4920:	62 9f       	mul	r22, r18
    4922:	d0 01       	movw	r26, r0
    4924:	73 9f       	mul	r23, r19
    4926:	f0 01       	movw	r30, r0
    4928:	82 9f       	mul	r24, r18
    492a:	e0 0d       	add	r30, r0
    492c:	f1 1d       	adc	r31, r1
    492e:	64 9f       	mul	r22, r20
    4930:	e0 0d       	add	r30, r0
    4932:	f1 1d       	adc	r31, r1
    4934:	92 9f       	mul	r25, r18
    4936:	f0 0d       	add	r31, r0
    4938:	83 9f       	mul	r24, r19
    493a:	f0 0d       	add	r31, r0
    493c:	74 9f       	mul	r23, r20
    493e:	f0 0d       	add	r31, r0
    4940:	65 9f       	mul	r22, r21
    4942:	f0 0d       	add	r31, r0
    4944:	99 27       	eor	r25, r25
    4946:	72 9f       	mul	r23, r18
    4948:	b0 0d       	add	r27, r0
    494a:	e1 1d       	adc	r30, r1
    494c:	f9 1f       	adc	r31, r25
    494e:	63 9f       	mul	r22, r19
    4950:	b0 0d       	add	r27, r0
    4952:	e1 1d       	adc	r30, r1
    4954:	f9 1f       	adc	r31, r25
    4956:	bd 01       	movw	r22, r26
    4958:	cf 01       	movw	r24, r30
    495a:	11 24       	eor	r1, r1
    495c:	08 95       	ret

0000495e <__divmodhi4>:
    495e:	97 fb       	bst	r25, 7
    4960:	09 2e       	mov	r0, r25
    4962:	07 26       	eor	r0, r23
    4964:	0a d0       	rcall	.+20     	; 0x497a <__divmodhi4_neg1>
    4966:	77 fd       	sbrc	r23, 7
    4968:	04 d0       	rcall	.+8      	; 0x4972 <__divmodhi4_neg2>
    496a:	49 d0       	rcall	.+146    	; 0x49fe <__udivmodhi4>
    496c:	06 d0       	rcall	.+12     	; 0x497a <__divmodhi4_neg1>
    496e:	00 20       	and	r0, r0
    4970:	1a f4       	brpl	.+6      	; 0x4978 <__divmodhi4_exit>

00004972 <__divmodhi4_neg2>:
    4972:	70 95       	com	r23
    4974:	61 95       	neg	r22
    4976:	7f 4f       	sbci	r23, 0xFF	; 255

00004978 <__divmodhi4_exit>:
    4978:	08 95       	ret

0000497a <__divmodhi4_neg1>:
    497a:	f6 f7       	brtc	.-4      	; 0x4978 <__divmodhi4_exit>
    497c:	90 95       	com	r25
    497e:	81 95       	neg	r24
    4980:	9f 4f       	sbci	r25, 0xFF	; 255
    4982:	08 95       	ret

00004984 <__udivmodsi4>:
    4984:	a1 e2       	ldi	r26, 0x21	; 33
    4986:	1a 2e       	mov	r1, r26
    4988:	aa 1b       	sub	r26, r26
    498a:	bb 1b       	sub	r27, r27
    498c:	fd 01       	movw	r30, r26
    498e:	0d c0       	rjmp	.+26     	; 0x49aa <__udivmodsi4_ep>

00004990 <__udivmodsi4_loop>:
    4990:	aa 1f       	adc	r26, r26
    4992:	bb 1f       	adc	r27, r27
    4994:	ee 1f       	adc	r30, r30
    4996:	ff 1f       	adc	r31, r31
    4998:	a2 17       	cp	r26, r18
    499a:	b3 07       	cpc	r27, r19
    499c:	e4 07       	cpc	r30, r20
    499e:	f5 07       	cpc	r31, r21
    49a0:	20 f0       	brcs	.+8      	; 0x49aa <__udivmodsi4_ep>
    49a2:	a2 1b       	sub	r26, r18
    49a4:	b3 0b       	sbc	r27, r19
    49a6:	e4 0b       	sbc	r30, r20
    49a8:	f5 0b       	sbc	r31, r21

000049aa <__udivmodsi4_ep>:
    49aa:	66 1f       	adc	r22, r22
    49ac:	77 1f       	adc	r23, r23
    49ae:	88 1f       	adc	r24, r24
    49b0:	99 1f       	adc	r25, r25
    49b2:	1a 94       	dec	r1
    49b4:	69 f7       	brne	.-38     	; 0x4990 <__udivmodsi4_loop>
    49b6:	60 95       	com	r22
    49b8:	70 95       	com	r23
    49ba:	80 95       	com	r24
    49bc:	90 95       	com	r25
    49be:	9b 01       	movw	r18, r22
    49c0:	ac 01       	movw	r20, r24
    49c2:	bd 01       	movw	r22, r26
    49c4:	cf 01       	movw	r24, r30
    49c6:	08 95       	ret

000049c8 <__divmodsi4>:
    49c8:	97 fb       	bst	r25, 7
    49ca:	09 2e       	mov	r0, r25
    49cc:	05 26       	eor	r0, r21
    49ce:	0e d0       	rcall	.+28     	; 0x49ec <__divmodsi4_neg1>
    49d0:	57 fd       	sbrc	r21, 7
    49d2:	04 d0       	rcall	.+8      	; 0x49dc <__divmodsi4_neg2>
    49d4:	d7 df       	rcall	.-82     	; 0x4984 <__udivmodsi4>
    49d6:	0a d0       	rcall	.+20     	; 0x49ec <__divmodsi4_neg1>
    49d8:	00 1c       	adc	r0, r0
    49da:	38 f4       	brcc	.+14     	; 0x49ea <__divmodsi4_exit>

000049dc <__divmodsi4_neg2>:
    49dc:	50 95       	com	r21
    49de:	40 95       	com	r20
    49e0:	30 95       	com	r19
    49e2:	21 95       	neg	r18
    49e4:	3f 4f       	sbci	r19, 0xFF	; 255
    49e6:	4f 4f       	sbci	r20, 0xFF	; 255
    49e8:	5f 4f       	sbci	r21, 0xFF	; 255

000049ea <__divmodsi4_exit>:
    49ea:	08 95       	ret

000049ec <__divmodsi4_neg1>:
    49ec:	f6 f7       	brtc	.-4      	; 0x49ea <__divmodsi4_exit>
    49ee:	90 95       	com	r25
    49f0:	80 95       	com	r24
    49f2:	70 95       	com	r23
    49f4:	61 95       	neg	r22
    49f6:	7f 4f       	sbci	r23, 0xFF	; 255
    49f8:	8f 4f       	sbci	r24, 0xFF	; 255
    49fa:	9f 4f       	sbci	r25, 0xFF	; 255
    49fc:	08 95       	ret

000049fe <__udivmodhi4>:
    49fe:	aa 1b       	sub	r26, r26
    4a00:	bb 1b       	sub	r27, r27
    4a02:	51 e1       	ldi	r21, 0x11	; 17
    4a04:	07 c0       	rjmp	.+14     	; 0x4a14 <__udivmodhi4_ep>

00004a06 <__udivmodhi4_loop>:
    4a06:	aa 1f       	adc	r26, r26
    4a08:	bb 1f       	adc	r27, r27
    4a0a:	a6 17       	cp	r26, r22
    4a0c:	b7 07       	cpc	r27, r23
    4a0e:	10 f0       	brcs	.+4      	; 0x4a14 <__udivmodhi4_ep>
    4a10:	a6 1b       	sub	r26, r22
    4a12:	b7 0b       	sbc	r27, r23

00004a14 <__udivmodhi4_ep>:
    4a14:	88 1f       	adc	r24, r24
    4a16:	99 1f       	adc	r25, r25
    4a18:	5a 95       	dec	r21
    4a1a:	a9 f7       	brne	.-22     	; 0x4a06 <__udivmodhi4_loop>
    4a1c:	80 95       	com	r24
    4a1e:	90 95       	com	r25
    4a20:	bc 01       	movw	r22, r24
    4a22:	cd 01       	movw	r24, r26
    4a24:	08 95       	ret

00004a26 <strtod>:
    4a26:	8f 92       	push	r8
    4a28:	9f 92       	push	r9
    4a2a:	af 92       	push	r10
    4a2c:	bf 92       	push	r11
    4a2e:	cf 92       	push	r12
    4a30:	df 92       	push	r13
    4a32:	ef 92       	push	r14
    4a34:	ff 92       	push	r15
    4a36:	0f 93       	push	r16
    4a38:	1f 93       	push	r17
    4a3a:	cf 93       	push	r28
    4a3c:	df 93       	push	r29
    4a3e:	ec 01       	movw	r28, r24
    4a40:	5b 01       	movw	r10, r22
    4a42:	61 15       	cp	r22, r1
    4a44:	71 05       	cpc	r23, r1
    4a46:	19 f0       	breq	.+6      	; 0x4a4e <strtod+0x28>
    4a48:	fb 01       	movw	r30, r22
    4a4a:	91 83       	std	Z+1, r25	; 0x01
    4a4c:	80 83       	st	Z, r24
    4a4e:	f9 90       	ld	r15, Y+
    4a50:	8f 2d       	mov	r24, r15
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	0e 94 81 26 	call	0x4d02	; 0x4d02 <isspace>
    4a58:	89 2b       	or	r24, r25
    4a5a:	c9 f7       	brne	.-14     	; 0x4a4e <strtod+0x28>
    4a5c:	fd e2       	ldi	r31, 0x2D	; 45
    4a5e:	ff 16       	cp	r15, r31
    4a60:	21 f4       	brne	.+8      	; 0x4a6a <strtod+0x44>
    4a62:	f9 90       	ld	r15, Y+
    4a64:	ee 24       	eor	r14, r14
    4a66:	e3 94       	inc	r14
    4a68:	05 c0       	rjmp	.+10     	; 0x4a74 <strtod+0x4e>
    4a6a:	2b e2       	ldi	r18, 0x2B	; 43
    4a6c:	f2 16       	cp	r15, r18
    4a6e:	09 f4       	brne	.+2      	; 0x4a72 <strtod+0x4c>
    4a70:	f9 90       	ld	r15, Y+
    4a72:	ee 24       	eor	r14, r14
    4a74:	8e 01       	movw	r16, r28
    4a76:	01 50       	subi	r16, 0x01	; 1
    4a78:	10 40       	sbci	r17, 0x00	; 0
    4a7a:	c8 01       	movw	r24, r16
    4a7c:	6e e3       	ldi	r22, 0x3E	; 62
    4a7e:	75 e0       	ldi	r23, 0x05	; 5
    4a80:	43 e0       	ldi	r20, 0x03	; 3
    4a82:	50 e0       	ldi	r21, 0x00	; 0
    4a84:	0e 94 89 26 	call	0x4d12	; 0x4d12 <strncasecmp_P>
    4a88:	89 2b       	or	r24, r25
    4a8a:	01 f5       	brne	.+64     	; 0x4acc <strtod+0xa6>
    4a8c:	8e 01       	movw	r16, r28
    4a8e:	0e 5f       	subi	r16, 0xFE	; 254
    4a90:	1f 4f       	sbci	r17, 0xFF	; 255
    4a92:	c8 01       	movw	r24, r16
    4a94:	61 e4       	ldi	r22, 0x41	; 65
    4a96:	75 e0       	ldi	r23, 0x05	; 5
    4a98:	45 e0       	ldi	r20, 0x05	; 5
    4a9a:	50 e0       	ldi	r21, 0x00	; 0
    4a9c:	0e 94 89 26 	call	0x4d12	; 0x4d12 <strncasecmp_P>
    4aa0:	89 2b       	or	r24, r25
    4aa2:	19 f4       	brne	.+6      	; 0x4aaa <strtod+0x84>
    4aa4:	8e 01       	movw	r16, r28
    4aa6:	09 5f       	subi	r16, 0xF9	; 249
    4aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aaa:	a1 14       	cp	r10, r1
    4aac:	b1 04       	cpc	r11, r1
    4aae:	19 f0       	breq	.+6      	; 0x4ab6 <strtod+0x90>
    4ab0:	f5 01       	movw	r30, r10
    4ab2:	11 83       	std	Z+1, r17	; 0x01
    4ab4:	00 83       	st	Z, r16
    4ab6:	e0 fc       	sbrc	r14, 0
    4ab8:	04 c0       	rjmp	.+8      	; 0x4ac2 <strtod+0x9c>
    4aba:	70 e0       	ldi	r23, 0x00	; 0
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	80 e8       	ldi	r24, 0x80	; 128
    4ac0:	14 c0       	rjmp	.+40     	; 0x4aea <strtod+0xc4>
    4ac2:	70 e0       	ldi	r23, 0x00	; 0
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	80 e8       	ldi	r24, 0x80	; 128
    4ac8:	6f ef       	ldi	r22, 0xFF	; 255
    4aca:	08 c1       	rjmp	.+528    	; 0x4cdc <strtod+0x2b6>
    4acc:	c8 01       	movw	r24, r16
    4ace:	66 e4       	ldi	r22, 0x46	; 70
    4ad0:	75 e0       	ldi	r23, 0x05	; 5
    4ad2:	43 e0       	ldi	r20, 0x03	; 3
    4ad4:	50 e0       	ldi	r21, 0x00	; 0
    4ad6:	0e 94 89 26 	call	0x4d12	; 0x4d12 <strncasecmp_P>
    4ada:	89 2b       	or	r24, r25
    4adc:	69 f4       	brne	.+26     	; 0x4af8 <strtod+0xd2>
    4ade:	a1 14       	cp	r10, r1
    4ae0:	b1 04       	cpc	r11, r1
    4ae2:	29 f4       	brne	.+10     	; 0x4aee <strtod+0xc8>
    4ae4:	70 e0       	ldi	r23, 0x00	; 0
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	80 ec       	ldi	r24, 0xC0	; 192
    4aea:	6f e7       	ldi	r22, 0x7F	; 127
    4aec:	f7 c0       	rjmp	.+494    	; 0x4cdc <strtod+0x2b6>
    4aee:	22 96       	adiw	r28, 0x02	; 2
    4af0:	f5 01       	movw	r30, r10
    4af2:	d1 83       	std	Z+1, r29	; 0x01
    4af4:	c0 83       	st	Z, r28
    4af6:	f6 cf       	rjmp	.-20     	; 0x4ae4 <strtod+0xbe>
    4af8:	88 24       	eor	r8, r8
    4afa:	99 24       	eor	r9, r9
    4afc:	40 e0       	ldi	r20, 0x00	; 0
    4afe:	50 e0       	ldi	r21, 0x00	; 0
    4b00:	60 e0       	ldi	r22, 0x00	; 0
    4b02:	70 e0       	ldi	r23, 0x00	; 0
    4b04:	ef 2d       	mov	r30, r15
    4b06:	e0 53       	subi	r30, 0x30	; 48
    4b08:	ea 30       	cpi	r30, 0x0A	; 10
    4b0a:	a0 f5       	brcc	.+104    	; 0x4b74 <strtod+0x14e>
    4b0c:	f2 e0       	ldi	r31, 0x02	; 2
    4b0e:	ef 2a       	or	r14, r31
    4b10:	8e 2d       	mov	r24, r14
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	9c 01       	movw	r18, r24
    4b16:	28 70       	andi	r18, 0x08	; 8
    4b18:	30 70       	andi	r19, 0x00	; 0
    4b1a:	e2 fe       	sbrs	r14, 2
    4b1c:	06 c0       	rjmp	.+12     	; 0x4b2a <strtod+0x104>
    4b1e:	23 2b       	or	r18, r19
    4b20:	79 f5       	brne	.+94     	; 0x4b80 <strtod+0x15a>
    4b22:	08 94       	sec
    4b24:	81 1c       	adc	r8, r1
    4b26:	91 1c       	adc	r9, r1
    4b28:	2b c0       	rjmp	.+86     	; 0x4b80 <strtod+0x15a>
    4b2a:	23 2b       	or	r18, r19
    4b2c:	19 f0       	breq	.+6      	; 0x4b34 <strtod+0x10e>
    4b2e:	08 94       	sec
    4b30:	81 08       	sbc	r8, r1
    4b32:	91 08       	sbc	r9, r1
    4b34:	db 01       	movw	r26, r22
    4b36:	ca 01       	movw	r24, r20
    4b38:	12 e0       	ldi	r17, 0x02	; 2
    4b3a:	88 0f       	add	r24, r24
    4b3c:	99 1f       	adc	r25, r25
    4b3e:	aa 1f       	adc	r26, r26
    4b40:	bb 1f       	adc	r27, r27
    4b42:	1a 95       	dec	r17
    4b44:	d1 f7       	brne	.-12     	; 0x4b3a <strtod+0x114>
    4b46:	48 0f       	add	r20, r24
    4b48:	59 1f       	adc	r21, r25
    4b4a:	6a 1f       	adc	r22, r26
    4b4c:	7b 1f       	adc	r23, r27
    4b4e:	44 0f       	add	r20, r20
    4b50:	55 1f       	adc	r21, r21
    4b52:	66 1f       	adc	r22, r22
    4b54:	77 1f       	adc	r23, r23
    4b56:	4e 0f       	add	r20, r30
    4b58:	51 1d       	adc	r21, r1
    4b5a:	61 1d       	adc	r22, r1
    4b5c:	71 1d       	adc	r23, r1
    4b5e:	48 39       	cpi	r20, 0x98	; 152
    4b60:	29 e9       	ldi	r18, 0x99	; 153
    4b62:	52 07       	cpc	r21, r18
    4b64:	29 e9       	ldi	r18, 0x99	; 153
    4b66:	62 07       	cpc	r22, r18
    4b68:	29 e1       	ldi	r18, 0x19	; 25
    4b6a:	72 07       	cpc	r23, r18
    4b6c:	48 f0       	brcs	.+18     	; 0x4b80 <strtod+0x15a>
    4b6e:	84 e0       	ldi	r24, 0x04	; 4
    4b70:	e8 2a       	or	r14, r24
    4b72:	06 c0       	rjmp	.+12     	; 0x4b80 <strtod+0x15a>
    4b74:	ee 3f       	cpi	r30, 0xFE	; 254
    4b76:	31 f4       	brne	.+12     	; 0x4b84 <strtod+0x15e>
    4b78:	e3 fc       	sbrc	r14, 3
    4b7a:	39 c0       	rjmp	.+114    	; 0x4bee <strtod+0x1c8>
    4b7c:	98 e0       	ldi	r25, 0x08	; 8
    4b7e:	e9 2a       	or	r14, r25
    4b80:	f9 90       	ld	r15, Y+
    4b82:	c0 cf       	rjmp	.-128    	; 0x4b04 <strtod+0xde>
    4b84:	e5 33       	cpi	r30, 0x35	; 53
    4b86:	11 f0       	breq	.+4      	; 0x4b8c <strtod+0x166>
    4b88:	e5 31       	cpi	r30, 0x15	; 21
    4b8a:	89 f5       	brne	.+98     	; 0x4bee <strtod+0x1c8>
    4b8c:	29 91       	ld	r18, Y+
    4b8e:	2d 32       	cpi	r18, 0x2D	; 45
    4b90:	19 f4       	brne	.+6      	; 0x4b98 <strtod+0x172>
    4b92:	e0 e1       	ldi	r30, 0x10	; 16
    4b94:	ee 2a       	or	r14, r30
    4b96:	05 c0       	rjmp	.+10     	; 0x4ba2 <strtod+0x17c>
    4b98:	2b 32       	cpi	r18, 0x2B	; 43
    4b9a:	19 f0       	breq	.+6      	; 0x4ba2 <strtod+0x17c>
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	03 c0       	rjmp	.+6      	; 0x4ba8 <strtod+0x182>
    4ba2:	29 91       	ld	r18, Y+
    4ba4:	82 e0       	ldi	r24, 0x02	; 2
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	e2 2f       	mov	r30, r18
    4baa:	e0 53       	subi	r30, 0x30	; 48
    4bac:	ea 30       	cpi	r30, 0x0A	; 10
    4bae:	18 f0       	brcs	.+6      	; 0x4bb6 <strtod+0x190>
    4bb0:	c8 1b       	sub	r28, r24
    4bb2:	d9 0b       	sbc	r29, r25
    4bb4:	1c c0       	rjmp	.+56     	; 0x4bee <strtod+0x1c8>
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	fc e0       	ldi	r31, 0x0C	; 12
    4bbc:	20 38       	cpi	r18, 0x80	; 128
    4bbe:	3f 07       	cpc	r19, r31
    4bc0:	5c f4       	brge	.+22     	; 0x4bd8 <strtod+0x1b2>
    4bc2:	c9 01       	movw	r24, r18
    4bc4:	88 0f       	add	r24, r24
    4bc6:	99 1f       	adc	r25, r25
    4bc8:	88 0f       	add	r24, r24
    4bca:	99 1f       	adc	r25, r25
    4bcc:	28 0f       	add	r18, r24
    4bce:	39 1f       	adc	r19, r25
    4bd0:	22 0f       	add	r18, r18
    4bd2:	33 1f       	adc	r19, r19
    4bd4:	2e 0f       	add	r18, r30
    4bd6:	31 1d       	adc	r19, r1
    4bd8:	e9 91       	ld	r30, Y+
    4bda:	e0 53       	subi	r30, 0x30	; 48
    4bdc:	ea 30       	cpi	r30, 0x0A	; 10
    4bde:	68 f3       	brcs	.-38     	; 0x4bba <strtod+0x194>
    4be0:	e4 fe       	sbrs	r14, 4
    4be2:	03 c0       	rjmp	.+6      	; 0x4bea <strtod+0x1c4>
    4be4:	30 95       	com	r19
    4be6:	21 95       	neg	r18
    4be8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bea:	82 0e       	add	r8, r18
    4bec:	93 1e       	adc	r9, r19
    4bee:	ce 2c       	mov	r12, r14
    4bf0:	dd 24       	eor	r13, r13
    4bf2:	e1 fe       	sbrs	r14, 1
    4bf4:	07 c0       	rjmp	.+14     	; 0x4c04 <strtod+0x1de>
    4bf6:	a1 14       	cp	r10, r1
    4bf8:	b1 04       	cpc	r11, r1
    4bfa:	21 f0       	breq	.+8      	; 0x4c04 <strtod+0x1de>
    4bfc:	21 97       	sbiw	r28, 0x01	; 1
    4bfe:	f5 01       	movw	r30, r10
    4c00:	d1 83       	std	Z+1, r29	; 0x01
    4c02:	c0 83       	st	Z, r28
    4c04:	cb 01       	movw	r24, r22
    4c06:	ba 01       	movw	r22, r20
    4c08:	0e 94 22 22 	call	0x4444	; 0x4444 <__floatunsisf>
    4c0c:	7b 01       	movw	r14, r22
    4c0e:	8c 01       	movw	r16, r24
    4c10:	f3 e0       	ldi	r31, 0x03	; 3
    4c12:	cf 22       	and	r12, r31
    4c14:	dd 24       	eor	r13, r13
    4c16:	23 e0       	ldi	r18, 0x03	; 3
    4c18:	c2 16       	cp	r12, r18
    4c1a:	d1 04       	cpc	r13, r1
    4c1c:	21 f4       	brne	.+8      	; 0x4c26 <strtod+0x200>
    4c1e:	17 fb       	bst	r17, 7
    4c20:	10 95       	com	r17
    4c22:	17 f9       	bld	r17, 7
    4c24:	10 95       	com	r17
    4c26:	57 01       	movw	r10, r14
    4c28:	68 01       	movw	r12, r16
    4c2a:	c8 01       	movw	r24, r16
    4c2c:	b7 01       	movw	r22, r14
    4c2e:	20 e0       	ldi	r18, 0x00	; 0
    4c30:	30 e0       	ldi	r19, 0x00	; 0
    4c32:	40 e0       	ldi	r20, 0x00	; 0
    4c34:	50 e0       	ldi	r21, 0x00	; 0
    4c36:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
    4c3a:	88 23       	and	r24, r24
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <strtod+0x21a>
    4c3e:	4a c0       	rjmp	.+148    	; 0x4cd4 <strtod+0x2ae>
    4c40:	97 fe       	sbrs	r9, 7
    4c42:	0d c0       	rjmp	.+26     	; 0x4c5e <strtod+0x238>
    4c44:	2d e5       	ldi	r18, 0x5D	; 93
    4c46:	e2 2e       	mov	r14, r18
    4c48:	25 e0       	ldi	r18, 0x05	; 5
    4c4a:	f2 2e       	mov	r15, r18
    4c4c:	90 94       	com	r9
    4c4e:	81 94       	neg	r8
    4c50:	91 08       	sbc	r9, r1
    4c52:	93 94       	inc	r9
    4c54:	c0 e2       	ldi	r28, 0x20	; 32
    4c56:	d0 e0       	ldi	r29, 0x00	; 0
    4c58:	00 e0       	ldi	r16, 0x00	; 0
    4c5a:	10 e0       	ldi	r17, 0x00	; 0
    4c5c:	12 c0       	rjmp	.+36     	; 0x4c82 <strtod+0x25c>
    4c5e:	95 e7       	ldi	r25, 0x75	; 117
    4c60:	e9 2e       	mov	r14, r25
    4c62:	95 e0       	ldi	r25, 0x05	; 5
    4c64:	f9 2e       	mov	r15, r25
    4c66:	f6 cf       	rjmp	.-20     	; 0x4c54 <strtod+0x22e>
    4c68:	f7 01       	movw	r30, r14
    4c6a:	25 91       	lpm	r18, Z+
    4c6c:	35 91       	lpm	r19, Z+
    4c6e:	45 91       	lpm	r20, Z+
    4c70:	54 91       	lpm	r21, Z+
    4c72:	c6 01       	movw	r24, r12
    4c74:	b5 01       	movw	r22, r10
    4c76:	0e 94 ba 23 	call	0x4774	; 0x4774 <__mulsf3>
    4c7a:	5b 01       	movw	r10, r22
    4c7c:	6c 01       	movw	r12, r24
    4c7e:	8c 1a       	sub	r8, r28
    4c80:	9d 0a       	sbc	r9, r29
    4c82:	8c 16       	cp	r8, r28
    4c84:	9d 06       	cpc	r9, r29
    4c86:	84 f7       	brge	.-32     	; 0x4c68 <strtod+0x242>
    4c88:	d5 95       	asr	r29
    4c8a:	c7 95       	ror	r28
    4c8c:	0f 5f       	subi	r16, 0xFF	; 255
    4c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c90:	06 30       	cpi	r16, 0x06	; 6
    4c92:	11 05       	cpc	r17, r1
    4c94:	29 f0       	breq	.+10     	; 0x4ca0 <strtod+0x27a>
    4c96:	8c ef       	ldi	r24, 0xFC	; 252
    4c98:	9f ef       	ldi	r25, 0xFF	; 255
    4c9a:	e8 0e       	add	r14, r24
    4c9c:	f9 1e       	adc	r15, r25
    4c9e:	f1 cf       	rjmp	.-30     	; 0x4c82 <strtod+0x25c>
    4ca0:	c5 01       	movw	r24, r10
    4ca2:	d6 01       	movw	r26, r12
    4ca4:	7c 01       	movw	r14, r24
    4ca6:	8d 01       	movw	r16, r26
    4ca8:	8c 2d       	mov	r24, r12
    4caa:	88 0f       	add	r24, r24
    4cac:	8d 2d       	mov	r24, r13
    4cae:	88 1f       	adc	r24, r24
    4cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    4cb2:	51 f0       	breq	.+20     	; 0x4cc8 <strtod+0x2a2>
    4cb4:	c6 01       	movw	r24, r12
    4cb6:	b5 01       	movw	r22, r10
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	40 e0       	ldi	r20, 0x00	; 0
    4cbe:	50 e0       	ldi	r21, 0x00	; 0
    4cc0:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpsf2>
    4cc4:	88 23       	and	r24, r24
    4cc6:	31 f4       	brne	.+12     	; 0x4cd4 <strtod+0x2ae>
    4cc8:	82 e2       	ldi	r24, 0x22	; 34
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	90 93 9d 06 	sts	0x069D, r25
    4cd0:	80 93 9c 06 	sts	0x069C, r24
    4cd4:	7e 2d       	mov	r23, r14
    4cd6:	9f 2d       	mov	r25, r15
    4cd8:	80 2f       	mov	r24, r16
    4cda:	61 2f       	mov	r22, r17
    4cdc:	27 2f       	mov	r18, r23
    4cde:	39 2f       	mov	r19, r25
    4ce0:	48 2f       	mov	r20, r24
    4ce2:	56 2f       	mov	r21, r22
    4ce4:	b9 01       	movw	r22, r18
    4ce6:	ca 01       	movw	r24, r20
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	1f 91       	pop	r17
    4cee:	0f 91       	pop	r16
    4cf0:	ff 90       	pop	r15
    4cf2:	ef 90       	pop	r14
    4cf4:	df 90       	pop	r13
    4cf6:	cf 90       	pop	r12
    4cf8:	bf 90       	pop	r11
    4cfa:	af 90       	pop	r10
    4cfc:	9f 90       	pop	r9
    4cfe:	8f 90       	pop	r8
    4d00:	08 95       	ret

00004d02 <isspace>:
    4d02:	91 11       	cpse	r25, r1
    4d04:	1e c0       	rjmp	.+60     	; 0x4d42 <__ctype_isfalse>
    4d06:	80 32       	cpi	r24, 0x20	; 32
    4d08:	19 f0       	breq	.+6      	; 0x4d10 <isspace+0xe>
    4d0a:	89 50       	subi	r24, 0x09	; 9
    4d0c:	85 50       	subi	r24, 0x05	; 5
    4d0e:	d0 f7       	brcc	.-12     	; 0x4d04 <isspace+0x2>
    4d10:	08 95       	ret

00004d12 <strncasecmp_P>:
    4d12:	fb 01       	movw	r30, r22
    4d14:	dc 01       	movw	r26, r24
    4d16:	41 50       	subi	r20, 0x01	; 1
    4d18:	50 40       	sbci	r21, 0x00	; 0
    4d1a:	88 f0       	brcs	.+34     	; 0x4d3e <strncasecmp_P+0x2c>
    4d1c:	8d 91       	ld	r24, X+
    4d1e:	81 34       	cpi	r24, 0x41	; 65
    4d20:	1c f0       	brlt	.+6      	; 0x4d28 <strncasecmp_P+0x16>
    4d22:	8b 35       	cpi	r24, 0x5B	; 91
    4d24:	0c f4       	brge	.+2      	; 0x4d28 <strncasecmp_P+0x16>
    4d26:	80 5e       	subi	r24, 0xE0	; 224
    4d28:	65 91       	lpm	r22, Z+
    4d2a:	61 34       	cpi	r22, 0x41	; 65
    4d2c:	1c f0       	brlt	.+6      	; 0x4d34 <strncasecmp_P+0x22>
    4d2e:	6b 35       	cpi	r22, 0x5B	; 91
    4d30:	0c f4       	brge	.+2      	; 0x4d34 <strncasecmp_P+0x22>
    4d32:	60 5e       	subi	r22, 0xE0	; 224
    4d34:	86 1b       	sub	r24, r22
    4d36:	61 11       	cpse	r22, r1
    4d38:	71 f3       	breq	.-36     	; 0x4d16 <strncasecmp_P+0x4>
    4d3a:	99 0b       	sbc	r25, r25
    4d3c:	08 95       	ret
    4d3e:	88 1b       	sub	r24, r24
    4d40:	fc cf       	rjmp	.-8      	; 0x4d3a <strncasecmp_P+0x28>

00004d42 <__ctype_isfalse>:
    4d42:	99 27       	eor	r25, r25
    4d44:	88 27       	eor	r24, r24

00004d46 <__ctype_istrue>:
    4d46:	08 95       	ret

00004d48 <_exit>:
    4d48:	f8 94       	cli

00004d4a <__stop_program>:
    4d4a:	ff cf       	rjmp	.-2      	; 0x4d4a <__stop_program>
