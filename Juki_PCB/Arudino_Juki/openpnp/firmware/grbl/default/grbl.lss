
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004632  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000049d  00800200  00800200  000046a6  2**0
                  ALLOC
  2 .debug_aranges 00000478  00000000  00000000  000046a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000083d  00000000  00000000  00004b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000035c3  00000000  00000000  0000535b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001318  00000000  00000000  0000891e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00002fa8  00000000  00000000  00009c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000006f0  00000000  00000000  0000cbe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000daa  00000000  00000000  0000d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000195c  00000000  00000000  0000e07a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000740  00000000  00000000  0000f9d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__ctors_end>
       4:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
       8:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
       c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      10:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      14:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      18:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      1c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      20:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      24:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      28:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      2c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      30:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      34:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      38:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      3c:	0c 94 a5 14 	jmp	0x294a	; 0x294a <__vector_15>
      40:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      44:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <__vector_17>
      48:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      4c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      50:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      54:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      58:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      5c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      60:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      64:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__vector_25>
      68:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      6c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      70:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      74:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      78:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      7c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      80:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      84:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      88:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      8c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      90:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      94:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      98:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      9c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      a0:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      a4:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      a8:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      ac:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      b0:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      b4:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      b8:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      bc:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      c0:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      c4:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      c8:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      cc:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      d0:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      d4:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      d8:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      dc:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      e0:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      e4:	4a 06       	cpc	r4, r26
      e6:	4a 06       	cpc	r4, r26
      e8:	4d 06       	cpc	r4, r29
      ea:	50 06       	cpc	r5, r16
      ec:	53 06       	cpc	r5, r19
      ee:	5a 06       	cpc	r5, r26
      f0:	95 06       	cpc	r9, r21
      f2:	95 06       	cpc	r9, r21
      f4:	5f 06       	cpc	r5, r31
      f6:	66 06       	cpc	r6, r22
      f8:	6b 06       	cpc	r6, r27
      fa:	6e 06       	cpc	r6, r30
      fc:	73 06       	cpc	r7, r19
      fe:	76 06       	cpc	r7, r22
     100:	79 06       	cpc	r7, r25
     102:	7c 06       	cpc	r7, r28
     104:	7f 06       	cpc	r7, r31
     106:	82 06       	cpc	r8, r18
     108:	85 06       	cpc	r8, r21
     10a:	8a 06       	cpc	r8, r26
     10c:	8d 06       	cpc	r8, r29
     10e:	92 06       	cpc	r9, r18
     110:	95 06       	cpc	r9, r21
     112:	95 06       	cpc	r9, r21
     114:	95 06       	cpc	r9, r21
     116:	95 06       	cpc	r9, r21
     118:	95 06       	cpc	r9, r21
     11a:	95 06       	cpc	r9, r21
     11c:	95 06       	cpc	r9, r21
     11e:	95 06       	cpc	r9, r21
     120:	4d 06       	cpc	r4, r29
     122:	95 06       	cpc	r9, r21
     124:	95 06       	cpc	r9, r21
     126:	95 06       	cpc	r9, r21
     128:	95 06       	cpc	r9, r21
     12a:	95 06       	cpc	r9, r21
     12c:	95 06       	cpc	r9, r21
     12e:	95 06       	cpc	r9, r21
     130:	95 06       	cpc	r9, r21
     132:	95 06       	cpc	r9, r21
     134:	95 06       	cpc	r9, r21
     136:	95 06       	cpc	r9, r21
     138:	95 06       	cpc	r9, r21
     13a:	95 06       	cpc	r9, r21
     13c:	95 06       	cpc	r9, r21
     13e:	95 06       	cpc	r9, r21
     140:	95 06       	cpc	r9, r21
     142:	95 06       	cpc	r9, r21
     144:	95 06       	cpc	r9, r21
     146:	95 06       	cpc	r9, r21
     148:	95 06       	cpc	r9, r21
     14a:	95 06       	cpc	r9, r21
     14c:	95 06       	cpc	r9, r21
     14e:	95 06       	cpc	r9, r21
     150:	95 06       	cpc	r9, r21
     152:	95 06       	cpc	r9, r21
     154:	95 06       	cpc	r9, r21
     156:	95 06       	cpc	r9, r21
     158:	95 06       	cpc	r9, r21
     15a:	95 06       	cpc	r9, r21
     15c:	4d 06       	cpc	r4, r29
     15e:	08 4a       	sbci	r16, 0xA8	; 168
     160:	d7 3b       	cpi	r29, 0xB7	; 183
     162:	3b ce       	rjmp	.-906    	; 0xfffffdda <__eeprom_end+0xff7efdda>
     164:	01 6e       	ori	r16, 0xE1	; 225
     166:	84 bc       	out	0x24, r8	; 36
     168:	bf fd       	.word	0xfdbf	; ????
     16a:	c1 2f       	mov	r28, r17
     16c:	3d 6c       	ori	r19, 0xCD	; 205
     16e:	74 31       	cpi	r23, 0x14	; 20
     170:	9a bd       	out	0x2a, r25	; 42
     172:	56 83       	std	Z+6, r21	; 0x06
     174:	3d da       	rcall	.-2950   	; 0xfffff5f0 <__eeprom_end+0xff7ef5f0>
     176:	3d 00       	.word	0x003d	; ????
     178:	c7 7f       	andi	r28, 0xF7	; 247
     17a:	11 be       	out	0x31, r1	; 49
     17c:	d9 e4       	ldi	r29, 0x49	; 73
     17e:	bb 4c       	sbci	r27, 0xCB	; 203
     180:	3e 91       	ld	r19, -X
     182:	6b aa       	std	Y+51, r6	; 0x33
     184:	aa be       	out	0x3a, r10	; 58
     186:	00 00       	nop
     188:	00 80       	ld	r0, Z
     18a:	3f 59       	subi	r19, 0x9F	; 159

0000018b <__c.1875>:
     18b:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000194 <__c.1873>:
     194:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000019d <__c.1871>:
     19d:	59 4c 32 0d 0a 00                                   YL2...

000001a3 <__c.1869>:
     1a3:	59 4c 31 0d 0a 00                                   YL1...

000001a9 <__c.1867>:
     1a9:	58 4c 32 0d 0a 00                                   XL2...

000001af <__c.1865>:
     1af:	58 4c 31 0d 0a 00                                   XL1...

000001b5 <__c.1863>:
     1b5:	0d 0a 00                                            ...

000001b8 <__c.1861>:
     1b8:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

000001c3 <__c.1859>:
     1c3:	0d 0a 00                                            ...

000001c6 <__c.1857>:
     1c6:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000001d3 <__c.1855>:
     1d3:	0d 0a 00                                            ...

000001d6 <__c.1853>:
     1d6:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

000001e5 <__c.1851>:
     1e5:	0d 0a 00                                            ...

000001e8 <__c.1849>:
     1e8:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

000001f2 <__c.1847>:
     1f2:	0d 0a 00                                            ...

000001f5 <__c.1845>:
     1f5:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     205:	3d 20 00                                            = .

00000208 <__c.1843>:
     208:	0d 0a 00                                            ...

0000020b <__c.1841>:
     20b:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     21b:	20 00                                                .

0000021d <__c.1609>:
     21d:	6f 6b 0a 0d 00                                      ok...

00000222 <__c.1669>:
     222:	0a 0d 00                                            ...

00000225 <__c.1667>:
     225:	65 72 72 6f 72 3a 20 00                             error: .

0000022d <__c.1664>:
     22d:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     23d:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

0000024b <__c.1661>:
     24b:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     25b:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

0000026a <__c.1658>:
     26a:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     27a:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

0000028b <__c.1655>:
     28b:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     29b:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

000002a6 <__c.1651>:
     2a6:	6f 6b 0a 0d 00                                      ok...

000002ab <__c.1648>:
     2ab:	0d 0a 4e 6f 74 20 68 6f 6d 65 64 0a 0d 00           ..Not homed...

000002b9 <__c.1677>:
     2b9:	0d 0a 00                                            ...

000002bc <__c.1675>:
     2bc:	0d 0a 4f 70 65 6e 50 6e 50 2f 47 72 62 6c 20 30     ..OpenPnP/Grbl 0
     2cc:	2e 37 36 50 42 00                                   .76PB.

000002d2 <__c.1736>:
     2d2:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
     2e2:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
     2f2:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
     302:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

0000030d <__c.1734>:
     30d:	27 24 27 20 74 6f 20 64 75 6d 70 20 63 75 72 72     '$' to dump curr
     31d:	65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a 00        ent settings...

0000032c <__c.1726>:
     32c:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     33c:	6e 67 0d 0a 00                                      ng...

00000341 <__c.1724>:
     341:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     351:	72 0d 0a 00                                         r...

00000355 <__c.1681>:
     355:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     365:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     375:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     385:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     395:	0d 0a 00                                            ...

00000398 <__c.1679>:
     398:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     3a8:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     3b8:	61 62 6c 65 64 29 0d 0a 00                          abled)...

000003c1 <__c.1677>:
     3c1:	24 31 30 30 30 20 3d 20 00                          $1000 = .

000003ca <__c.1675>:
     3ca:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     3da:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     3ea:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     3fa:	2f 6d 69 6e 29 0d 0a 00                             /min)...

00000402 <__c.1673>:
     402:	24 39 20 3d 20 00                                   $9 = .

00000408 <__c.1671>:
     408:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     418:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

00000426 <__c.1669>:
     426:	24 38 20 3d 20 00                                   $8 = .

0000042c <__c.1667>:
     42c:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     43c:	29 0d 0a 00                                         )...

00000440 <__c.1665>:
     440:	24 37 20 3d 20 00                                   $7 = .

00000446 <__c.1663>:
     446:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     456:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000464 <__c.1661>:
     464:	24 36 20 3d 20 00                                   $6 = .

0000046a <__c.1659>:
     46a:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     47a:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000488 <__c.1657>:
     488:	24 35 20 3d 20 00                                   $5 = .

0000048e <__c.1655>:
     48e:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     49e:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

000004ab <__c.1653>:
     4ab:	24 34 20 3d 20 00                                   $4 = .

000004b1 <__c.1651>:
     4b1:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     4c1:	0a 00                                               ..

000004c3 <__c.1649>:
     4c3:	24 33 20 3d 20 00                                   $3 = .

000004c9 <__c.1647>:
     4c9:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

000004d9 <__c.1645>:
     4d9:	24 32 20 3d 20 00                                   $2 = .

000004df <__c.1643>:
     4df:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

000004ef <__c.1641>:
     4ef:	24 31 20 3d 20 00                                   $1 = .

000004f5 <__c.1639>:
     4f5:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

00000505 <__c.1637>:
     505:	24 30 20 3d 20 00                                   $0 = .

0000050b <__c.1635>:
     50b:	0d 0a 00                                            ...

0000050e <__c.1633>:
     50e:	30 2e 37 36 50 42 00                                0.76PB.

00000515 <__c.1631>:
     515:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

00000521 <__c.2184>:
     521:	0d 0a 00                                            ...

00000524 <__c.2182>:
     524:	0d 0a 66 6f 72 77 61 72 64 20 63 6f 75 6e 74 20     ..forward count 
     534:	3d 20 00                                            = .

00000537 <__c.2177>:
     537:	0d 0a 00                                            ...

0000053a <__c.2175>:
     53a:	0d 0a 6c 65 66 74 20 63 6f 75 6e 74 20 3d 20 00     ..left count = .

0000054a <__c.2169>:
     54a:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

00000558 <__c.2029>:
     558:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

00000562 <__c.2047>:
     562:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

0000056c <__c.1817>:
     56c:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     57c:	0d 00                                               ..

0000057e <pstr_inf>:
     57e:	49 4e 46                                            INF

00000581 <pstr_inity>:
     581:	49 4e 49 54 59                                      INITY

00000586 <pstr_nan>:
     586:	4e 41 4e                                            NAN

00000589 <pwr_m10>:
     589:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     599:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000005a1 <pwr_p10>:
     5a1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     5b1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000005ba <__ctors_end>:
     5ba:	11 24       	eor	r1, r1
     5bc:	1f be       	out	0x3f, r1	; 63
     5be:	cf ef       	ldi	r28, 0xFF	; 255
     5c0:	d1 e2       	ldi	r29, 0x21	; 33
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	00 e0       	ldi	r16, 0x00	; 0
     5c8:	0c bf       	out	0x3c, r16	; 60

000005ca <__do_copy_data>:
     5ca:	12 e0       	ldi	r17, 0x02	; 2
     5cc:	a0 e0       	ldi	r26, 0x00	; 0
     5ce:	b2 e0       	ldi	r27, 0x02	; 2
     5d0:	e2 e3       	ldi	r30, 0x32	; 50
     5d2:	f6 e4       	ldi	r31, 0x46	; 70
     5d4:	00 e0       	ldi	r16, 0x00	; 0
     5d6:	0b bf       	out	0x3b, r16	; 59
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__do_copy_data+0x14>
     5da:	07 90       	elpm	r0, Z+
     5dc:	0d 92       	st	X+, r0
     5de:	a0 30       	cpi	r26, 0x00	; 0
     5e0:	b1 07       	cpc	r27, r17
     5e2:	d9 f7       	brne	.-10     	; 0x5da <__do_copy_data+0x10>

000005e4 <__do_clear_bss>:
     5e4:	16 e0       	ldi	r17, 0x06	; 6
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b2 e0       	ldi	r27, 0x02	; 2
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <.do_clear_bss_start>

000005ec <.do_clear_bss_loop>:
     5ec:	1d 92       	st	X+, r1

000005ee <.do_clear_bss_start>:
     5ee:	ad 39       	cpi	r26, 0x9D	; 157
     5f0:	b1 07       	cpc	r27, r17
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <.do_clear_bss_loop>
     5f4:	0e 94 df 08 	call	0x11be	; 0x11be <main>
     5f8:	0c 94 17 23 	jmp	0x462e	; 0x462e <_exit>

000005fc <__bad_interrupt>:
     5fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000600 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     600:	24 9a       	sbi	0x04, 4	; 4
}
     602:	08 95       	ret

00000604 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     604:	89 2b       	or	r24, r25
     606:	11 f0       	breq	.+4      	; 0x60c <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     608:	2c 9a       	sbi	0x05, 4	; 5
     60a:	08 95       	ret
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     60c:	2c 98       	cbi	0x05, 4	; 5
     60e:	08 95       	ret

00000610 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     610:	f9 99       	sbic	0x1f, 1	; 31
     612:	fe cf       	rjmp	.-4      	; 0x610 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     614:	92 bd       	out	0x22, r25	; 34
     616:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     61c:	80 b5       	in	r24, 0x20	; 32
}
     61e:	08 95       	ret

00000620 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     620:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     622:	f9 99       	sbic	0x1f, 1	; 31
     624:	fe cf       	rjmp	.-4      	; 0x622 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     626:	92 bd       	out	0x22, r25	; 34
     628:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     62e:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     630:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     632:	89 2f       	mov	r24, r25
     634:	86 23       	and	r24, r22
     636:	39 f0       	breq	.+14     	; 0x646 <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     638:	6f 3f       	cpi	r22, 0xFF	; 255
     63a:	19 f0       	breq	.+6      	; 0x642 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     63c:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	06 c0       	rjmp	.+12     	; 0x64e <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     642:	84 e1       	ldi	r24, 0x14	; 20
     644:	04 c0       	rjmp	.+8      	; 0x64e <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     646:	99 23       	and	r25, r25
     648:	21 f0       	breq	.+8      	; 0x652 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     64a:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     64c:	84 e2       	ldi	r24, 0x24	; 36
     64e:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     650:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     652:	78 94       	sei
}
     654:	08 95       	ret

00000656 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     656:	8f 92       	push	r8
     658:	9f 92       	push	r9
     65a:	af 92       	push	r10
     65c:	bf 92       	push	r11
     65e:	cf 92       	push	r12
     660:	df 92       	push	r13
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	0f 92       	push	r0
     66e:	0f 92       	push	r0
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	5c 01       	movw	r10, r24
     676:	6b 01       	movw	r12, r22
     678:	7a 01       	movw	r14, r20
     67a:	4a 01       	movw	r8, r20
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	1e c0       	rjmp	.+60     	; 0x6bc <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     680:	00 23       	and	r16, r16
     682:	19 f0       	breq	.+6      	; 0x68a <memcpy_to_eeprom_with_checksum+0x34>
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	08 c0       	rjmp	.+16     	; 0x69a <memcpy_to_eeprom_with_checksum+0x44>
     68a:	20 2f       	mov	r18, r16
     68c:	33 27       	eor	r19, r19
     68e:	27 fd       	sbrc	r18, 7
     690:	30 95       	com	r19
     692:	22 27       	eor	r18, r18
     694:	33 0f       	add	r19, r19
     696:	22 1f       	adc	r18, r18
     698:	33 27       	eor	r19, r19
    checksum += *source;
     69a:	f6 01       	movw	r30, r12
     69c:	61 91       	ld	r22, Z+
     69e:	6f 01       	movw	r12, r30
     6a0:	06 2f       	mov	r16, r22
     6a2:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     6a4:	9c 01       	movw	r18, r24
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	3a 83       	std	Y+2, r19	; 0x02
     6ac:	29 83       	std	Y+1, r18	; 0x01
     6ae:	0e 94 10 03 	call	0x620	; 0x620 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6b2:	08 94       	sec
     6b4:	81 08       	sbc	r8, r1
     6b6:	91 08       	sbc	r9, r1
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	81 14       	cp	r8, r1
     6be:	91 04       	cpc	r9, r1
     6c0:	f9 f6       	brne	.-66     	; 0x680 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     6c2:	c7 01       	movw	r24, r14
     6c4:	8a 0d       	add	r24, r10
     6c6:	9b 1d       	adc	r25, r11
     6c8:	60 2f       	mov	r22, r16
     6ca:	0e 94 10 03 	call	0x620	; 0x620 <eeprom_put_char>
}
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	cf 91       	pop	r28
     6d4:	df 91       	pop	r29
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	cf 90       	pop	r12
     6e0:	bf 90       	pop	r11
     6e2:	af 90       	pop	r10
     6e4:	9f 90       	pop	r9
     6e6:	8f 90       	pop	r8
     6e8:	08 95       	ret

000006ea <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	ec 01       	movw	r28, r24
     6f0:	fb 01       	movw	r30, r22
     6f2:	9a 01       	movw	r18, r20
     6f4:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     6f6:	b1 e0       	ldi	r27, 0x01	; 1
     6f8:	19 c0       	rjmp	.+50     	; 0x72c <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6fa:	f9 99       	sbic	0x1f, 1	; 31
     6fc:	fe cf       	rjmp	.-4      	; 0x6fa <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     6fe:	f2 bd       	out	0x22, r31	; 34
     700:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     702:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     704:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     706:	99 23       	and	r25, r25
     708:	19 f0       	breq	.+6      	; 0x710 <memcpy_from_eeprom_with_checksum+0x26>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	08 c0       	rjmp	.+16     	; 0x720 <memcpy_from_eeprom_with_checksum+0x36>
     710:	89 2f       	mov	r24, r25
     712:	99 27       	eor	r25, r25
     714:	87 fd       	sbrc	r24, 7
     716:	90 95       	com	r25
     718:	88 27       	eor	r24, r24
     71a:	99 0f       	add	r25, r25
     71c:	88 1f       	adc	r24, r24
     71e:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     720:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     722:	9a 2f       	mov	r25, r26
     724:	98 0f       	add	r25, r24
    *(destination++) = data; 
     726:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	30 40       	sbci	r19, 0x00	; 0
     72c:	21 15       	cp	r18, r1
     72e:	31 05       	cpc	r19, r1
     730:	21 f7       	brne	.-56     	; 0x6fa <memcpy_from_eeprom_with_checksum+0x10>
     732:	46 0f       	add	r20, r22
     734:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     736:	f9 99       	sbic	0x1f, 1	; 31
     738:	fe cf       	rjmp	.-4      	; 0x736 <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     73a:	52 bd       	out	0x22, r21	; 34
     73c:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     742:	80 b5       	in	r24, 0x20	; 32
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	98 17       	cp	r25, r24
     74a:	11 f4       	brne	.+4      	; 0x750 <memcpy_from_eeprom_with_checksum+0x66>
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     750:	c9 01       	movw	r24, r18
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     758:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     75c:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     760:	40 93 27 02 	sts	0x0227, r20
}
     764:	08 95       	ret

00000766 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     766:	af 92       	push	r10
     768:	bf 92       	push	r11
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	0f 92       	push	r0
     77c:	0f 92       	push	r0
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	6c 01       	movw	r12, r24
     784:	5b 01       	movw	r10, r22
     786:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     788:	fb 01       	movw	r30, r22
     78a:	00 81       	ld	r16, Z
     78c:	11 81       	ldd	r17, Z+1	; 0x01
     78e:	08 0f       	add	r16, r24
     790:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     792:	c8 01       	movw	r24, r16
     794:	be 01       	movw	r22, r28
     796:	6f 5f       	subi	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	0e 94 86 21 	call	0x430c	; 0x430c <strtod>
     79e:	f7 01       	movw	r30, r14
     7a0:	60 83       	st	Z, r22
     7a2:	71 83       	std	Z+1, r23	; 0x01
     7a4:	82 83       	std	Z+2, r24	; 0x02
     7a6:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	80 17       	cp	r24, r16
     7ae:	91 07       	cpc	r25, r17
     7b0:	31 f4       	brne	.+12     	; 0x7be <read_double+0x58>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	80 93 00 02 	sts	0x0200, r24
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	07 c0       	rjmp	.+14     	; 0x7cc <read_double+0x66>
    return(0); 
  };

  *char_counter = end - line;
     7be:	8c 19       	sub	r24, r12
     7c0:	9d 09       	sbc	r25, r13
     7c2:	f5 01       	movw	r30, r10
     7c4:	91 83       	std	Z+1, r25	; 0x01
     7c6:	80 83       	st	Z, r24
     7c8:	21 e0       	ldi	r18, 0x01	; 1
     7ca:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     7cc:	c9 01       	movw	r24, r18
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	cf 91       	pop	r28
     7d4:	df 91       	pop	r29
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	af 90       	pop	r10
     7e6:	08 95       	ret

000007e8 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	8b 01       	movw	r16, r22
     7f4:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     7f6:	ed 91       	ld	r30, X+
     7f8:	fc 91       	ld	r31, X
     7fa:	11 97       	sbiw	r26, 0x01	; 1
     7fc:	e4 0f       	add	r30, r20
     7fe:	f5 1f       	adc	r31, r21
     800:	e0 81       	ld	r30, Z
     802:	ee 23       	and	r30, r30
     804:	39 f0       	breq	.+14     	; 0x814 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     806:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     808:	e1 54       	subi	r30, 0x41	; 65
     80a:	ea 31       	cpi	r30, 0x1A	; 26
     80c:	30 f0       	brcs	.+12     	; 0x81a <next_statement+0x32>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	80 93 00 02 	sts	0x0200, r24
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	10 c0       	rjmp	.+32     	; 0x83a <next_statement+0x52>
    return(0);
  }
  (*char_counter)++;
     81a:	8d 91       	ld	r24, X+
     81c:	9c 91       	ld	r25, X
     81e:	11 97       	sbiw	r26, 0x01	; 1
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	8d 93       	st	X+, r24
     824:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     826:	ca 01       	movw	r24, r20
     828:	b9 01       	movw	r22, r18
     82a:	a8 01       	movw	r20, r16
     82c:	0e 94 b3 03 	call	0x766	; 0x766 <read_double>
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	11 f0       	breq	.+4      	; 0x838 <next_statement+0x50>
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     83a:	c9 01       	movw	r24, r18
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret

00000846 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     846:	88 e2       	ldi	r24, 0x28	; 40
     848:	e0 e0       	ldi	r30, 0x00	; 0
     84a:	f2 e0       	ldi	r31, 0x02	; 2
     84c:	df 01       	movw	r26, r30
     84e:	1d 92       	st	X+, r1
     850:	8a 95       	dec	r24
     852:	e9 f7       	brne	.-6      	; 0x84e <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     854:	60 91 86 06 	lds	r22, 0x0686
     858:	70 91 87 06 	lds	r23, 0x0687
     85c:	80 91 88 06 	lds	r24, 0x0688
     860:	90 91 89 06 	lds	r25, 0x0689
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e7       	ldi	r20, 0x70	; 112
     86a:	52 e4       	ldi	r21, 0x42	; 66
     86c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
     870:	60 93 0a 02 	sts	0x020A, r22
     874:	70 93 0b 02 	sts	0x020B, r23
     878:	80 93 0c 02 	sts	0x020C, r24
     87c:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     880:	60 91 8a 06 	lds	r22, 0x068A
     884:	70 91 8b 06 	lds	r23, 0x068B
     888:	80 91 8c 06 	lds	r24, 0x068C
     88c:	90 91 8d 06 	lds	r25, 0x068D
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e7       	ldi	r20, 0x70	; 112
     896:	52 e4       	ldi	r21, 0x42	; 66
     898:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
     89c:	60 93 0e 02 	sts	0x020E, r22
     8a0:	70 93 0f 02 	sts	0x020F, r23
     8a4:	80 93 10 02 	sts	0x0210, r24
     8a8:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     8ac:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     8bc:	90 93 04 02 	sts	0x0204, r25
}
     8c0:	08 95       	ret

000008c2 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     8c2:	2f 92       	push	r2
     8c4:	3f 92       	push	r3
     8c6:	4f 92       	push	r4
     8c8:	5f 92       	push	r5
     8ca:	6f 92       	push	r6
     8cc:	7f 92       	push	r7
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	e2 97       	sbiw	r28, 0x32	; 50
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     8f8:	1b 82       	std	Y+3, r1	; 0x03
     8fa:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	88 87       	std	Y+8, r24	; 0x08
     906:	99 87       	std	Y+9, r25	; 0x09
     908:	aa 87       	std	Y+10, r26	; 0x0a
     90a:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     90c:	80 e1       	ldi	r24, 0x10	; 16
     90e:	fe 01       	movw	r30, r28
     910:	3c 96       	adiw	r30, 0x0c	; 12
     912:	df 01       	movw	r26, r30
     914:	98 2f       	mov	r25, r24
     916:	1d 92       	st	X+, r1
     918:	9a 95       	dec	r25
     91a:	e9 f7       	brne	.-6      	; 0x916 <gc_execute_line+0x54>
  clear_vector(offset);
     91c:	fe 01       	movw	r30, r28
     91e:	7c 96       	adiw	r30, 0x1c	; 28
     920:	df 01       	movw	r26, r30
     922:	1d 92       	st	X+, r1
     924:	8a 95       	dec	r24
     926:	e9 f7       	brne	.-6      	; 0x922 <gc_execute_line+0x60>

  gc.status_code = GCSTATUS_OK;
     928:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     92c:	f5 01       	movw	r30, r10
     92e:	80 81       	ld	r24, Z
     930:	88 32       	cpi	r24, 0x28	; 40
     932:	49 f1       	breq	.+82     	; 0x986 <gc_execute_line+0xc4>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     934:	8f 32       	cpi	r24, 0x2F	; 47
     936:	29 f4       	brne	.+10     	; 0x942 <gc_execute_line+0x80>
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	9b 81       	ldd	r25, Y+3	; 0x03
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	9b 83       	std	Y+3, r25	; 0x03
     940:	8a 83       	std	Y+2, r24	; 0x02
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     942:	d5 01       	movw	r26, r10
     944:	8c 91       	ld	r24, X
     946:	84 32       	cpi	r24, 0x24	; 36
     948:	a1 f0       	breq	.+40     	; 0x972 <gc_execute_line+0xb0>
     94a:	77 24       	eor	r7, r7
     94c:	1c a6       	std	Y+44, r1	; 0x2c
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     94e:	12 e0       	ldi	r17, 0x02	; 2
     950:	41 2e       	mov	r4, r17
     952:	51 2c       	mov	r5, r1
     954:	4c 0e       	add	r4, r28
     956:	5d 1e       	adc	r5, r29
     958:	1e 01       	movw	r2, r28
     95a:	08 94       	sec
     95c:	21 1c       	adc	r2, r1
     95e:	31 1c       	adc	r3, r1
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     960:	b3 e0       	ldi	r27, 0x03	; 3
     962:	9b 2e       	mov	r9, r27
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     964:	dd 24       	eor	r13, r13
     966:	d3 94       	inc	r13
			}

	       break;

      case 'G':
      switch(int_value) {
     968:	a2 e0       	ldi	r26, 0x02	; 2
     96a:	ca 2e       	mov	r12, r26
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	8f 2e       	mov	r8, r31
     970:	e9 c1       	rjmp	.+978    	; 0xd44 <gc_execute_line+0x482>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	9b 83       	std	Y+3, r25	; 0x03
     978:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     97a:	f5 01       	movw	r30, r10
     97c:	81 81       	ldd	r24, Z+1	; 0x01
     97e:	88 23       	and	r24, r24
     980:	21 f4       	brne	.+8      	; 0x98a <gc_execute_line+0xc8>
     982:	0e 94 99 13 	call	0x2732	; 0x2732 <settings_dump>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	c2 c3       	rjmp	.+1924   	; 0x110e <gc_execute_line+0x84c>
    read_double(line, &char_counter, &p);
     98a:	8e 01       	movw	r16, r28
     98c:	0e 5f       	subi	r16, 0xFE	; 254
     98e:	1f 4f       	sbci	r17, 0xFF	; 255
     990:	c5 01       	movw	r24, r10
     992:	b8 01       	movw	r22, r16
     994:	ae 01       	movw	r20, r28
     996:	48 5f       	subi	r20, 0xF8	; 248
     998:	5f 4f       	sbci	r21, 0xFF	; 255
     99a:	0e 94 b3 03 	call	0x766	; 0x766 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	9b 81       	ldd	r25, Y+3	; 0x03
     9a2:	f5 01       	movw	r30, r10
     9a4:	e8 0f       	add	r30, r24
     9a6:	f9 1f       	adc	r31, r25
     9a8:	20 81       	ld	r18, Z
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	9b 83       	std	Y+3, r25	; 0x03
     9ae:	8a 83       	std	Y+2, r24	; 0x02
     9b0:	2d 33       	cpi	r18, 0x3D	; 61
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <gc_execute_line+0xf4>
     9b4:	ab c3       	rjmp	.+1878   	; 0x110c <gc_execute_line+0x84a>
    read_double(line, &char_counter, &value);
     9b6:	c5 01       	movw	r24, r10
     9b8:	b8 01       	movw	r22, r16
     9ba:	ae 01       	movw	r20, r28
     9bc:	4c 5f       	subi	r20, 0xFC	; 252
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	0e 94 b3 03 	call	0x766	; 0x766 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     9c4:	ea 81       	ldd	r30, Y+2	; 0x02
     9c6:	fb 81       	ldd	r31, Y+3	; 0x03
     9c8:	ea 0d       	add	r30, r10
     9ca:	fb 1d       	adc	r31, r11
     9cc:	80 81       	ld	r24, Z
     9ce:	88 23       	and	r24, r24
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <gc_execute_line+0x112>
     9d2:	9c c3       	rjmp	.+1848   	; 0x110c <gc_execute_line+0x84a>
    settings_store_setting(p, value);
     9d4:	68 85       	ldd	r22, Y+8	; 0x08
     9d6:	79 85       	ldd	r23, Y+9	; 0x09
     9d8:	8a 85       	ldd	r24, Y+10	; 0x0a
     9da:	9b 85       	ldd	r25, Y+11	; 0x0b
     9dc:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	4c 81       	ldd	r20, Y+4	; 0x04
     9e6:	5d 81       	ldd	r21, Y+5	; 0x05
     9e8:	6e 81       	ldd	r22, Y+6	; 0x06
     9ea:	7f 81       	ldd	r23, Y+7	; 0x07
     9ec:	0e 94 1d 13 	call	0x263a	; 0x263a <settings_store_setting>
     9f0:	8a c3       	rjmp	.+1812   	; 0x1106 <gc_execute_line+0x844>
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     9f2:	6c 81       	ldd	r22, Y+4	; 0x04
     9f4:	7d 81       	ldd	r23, Y+5	; 0x05
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	9f 81       	ldd	r25, Y+7	; 0x07
     9fa:	0e 94 f5 20 	call	0x41ea	; 0x41ea <trunc>
     9fe:	7b 01       	movw	r14, r22
     a00:	8c 01       	movw	r16, r24
     a02:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
     a06:	fb 01       	movw	r30, r22

    switch(letter) {
     a08:	29 81       	ldd	r18, Y+1	; 0x01
     a0a:	27 34       	cpi	r18, 0x47	; 71
     a0c:	09 f4       	brne	.+2      	; 0xa10 <gc_execute_line+0x14e>
     a0e:	91 c0       	rjmp	.+290    	; 0xb32 <gc_execute_line+0x270>
     a10:	28 34       	cpi	r18, 0x48	; 72
     a12:	20 f4       	brcc	.+8      	; 0xa1c <gc_execute_line+0x15a>
     a14:	24 34       	cpi	r18, 0x44	; 68
     a16:	09 f0       	breq	.+2      	; 0xa1a <gc_execute_line+0x158>
     a18:	91 c1       	rjmp	.+802    	; 0xd3c <gc_execute_line+0x47a>
     a1a:	07 c0       	rjmp	.+14     	; 0xa2a <gc_execute_line+0x168>
     a1c:	2d 34       	cpi	r18, 0x4D	; 77
     a1e:	09 f4       	brne	.+2      	; 0xa22 <gc_execute_line+0x160>
     a20:	2d c1       	rjmp	.+602    	; 0xc7c <gc_execute_line+0x3ba>
     a22:	24 35       	cpi	r18, 0x54	; 84
     a24:	09 f0       	breq	.+2      	; 0xa28 <gc_execute_line+0x166>
     a26:	8a c1       	rjmp	.+788    	; 0xd3c <gc_execute_line+0x47a>
     a28:	83 c1       	rjmp	.+774    	; 0xd30 <gc_execute_line+0x46e>
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     a2a:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     a2c:	8b e0       	ldi	r24, 0x0B	; 11
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
		  	printBinary( DIRECTION_DDR );
     a34:	60 b3       	in	r22, 0x10	; 16
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 3c 1b 	call	0x3678	; 0x3678 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     a40:	88 e0       	ldi	r24, 0x08	; 8
     a42:	92 e0       	ldi	r25, 0x02	; 2
     a44:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     a48:	85 ef       	ldi	r24, 0xF5	; 245
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
		  	printBinary( DIRECTION_PORT );
     a50:	61 b3       	in	r22, 0x11	; 17
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 3c 1b 	call	0x3678	; 0x3678 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     a5c:	82 ef       	ldi	r24, 0xF2	; 242
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

			ch = PORTD;
     a64:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     a66:	88 ee       	ldi	r24, 0xE8	; 232
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
		  	printBinary( ch );
     a6e:	ff 24       	eor	r15, r15
     a70:	00 e0       	ldi	r16, 0x00	; 0
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	c8 01       	movw	r24, r16
     a76:	b7 01       	movw	r22, r14
     a78:	0e 94 3c 1b 	call	0x3678	; 0x3678 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     a7c:	85 ee       	ldi	r24, 0xE5	; 229
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

			ch = PIND;
     a84:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     a86:	86 ed       	ldi	r24, 0xD6	; 214
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
		  	printBinary( ch );
     a8e:	ff 24       	eor	r15, r15
     a90:	00 e0       	ldi	r16, 0x00	; 0
     a92:	10 e0       	ldi	r17, 0x00	; 0
     a94:	c8 01       	movw	r24, r16
     a96:	b7 01       	movw	r22, r14
     a98:	0e 94 3c 1b 	call	0x3678	; 0x3678 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     a9c:	83 ed       	ldi	r24, 0xD3	; 211
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     aa4:	86 ec       	ldi	r24, 0xC6	; 198
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
			printInteger( is_head_down() );
     aac:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <is_head_down>
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	bc 01       	movw	r22, r24
     ab8:	cd 01       	movw	r24, r26
     aba:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     abe:	83 ec       	ldi	r24, 0xC3	; 195
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     ac6:	88 eb       	ldi	r24, 0xB8	; 184
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
			printInteger( is_rotated() );
     ace:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <is_rotated>
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	bc 01       	movw	r22, r24
     ada:	cd 01       	movw	r24, r26
     adc:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     ae0:	85 eb       	ldi	r24, 0xB5	; 181
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     ae8:	4b 9b       	sbis	0x09, 3	; 9
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <gc_execute_line+0x232>
		      	printPgmString(PSTR("XL1\r\n"));
     aec:	8f ea       	ldi	r24, 0xAF	; 175
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     af4:	4a 9b       	sbis	0x09, 2	; 9
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <gc_execute_line+0x23e>
		      	printPgmString(PSTR("XL2\r\n"));
     af8:	89 ea       	ldi	r24, 0xA9	; 169
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     b00:	48 9b       	sbis	0x09, 0	; 9
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <gc_execute_line+0x24a>
		      	printPgmString(PSTR("YL1\r\n"));
     b04:	83 ea       	ldi	r24, 0xA3	; 163
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     b0c:	49 9b       	sbis	0x09, 1	; 9
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <gc_execute_line+0x256>
		      	printPgmString(PSTR("YL2\r\n"));
     b10:	8d e9       	ldi	r24, 0x9D	; 157
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

			if( bit_is_set( XHM_PIN, X_HOME ) )
     b18:	04 9b       	sbis	0x00, 4	; 0
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <gc_execute_line+0x262>
		      	printPgmString(PSTR("X_HOME\r\n"));
     b1c:	84 e9       	ldi	r24, 0x94	; 148
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     b24:	90 9b       	sbis	0x12, 0	; 18
     b26:	0a c1       	rjmp	.+532    	; 0xd3c <gc_execute_line+0x47a>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     b28:	8b e8       	ldi	r24, 0x8B	; 139
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
     b30:	05 c1       	rjmp	.+522    	; 0xd3c <gc_execute_line+0x47a>
			}

	       break;

      case 'G':
      switch(int_value) {
     b32:	65 31       	cpi	r22, 0x15	; 21
     b34:	71 05       	cpc	r23, r1
     b36:	09 f4       	brne	.+2      	; 0xb3a <gc_execute_line+0x278>
     b38:	89 c0       	rjmp	.+274    	; 0xc4c <gc_execute_line+0x38a>
     b3a:	66 31       	cpi	r22, 0x16	; 22
     b3c:	71 05       	cpc	r23, r1
     b3e:	84 f5       	brge	.+96     	; 0xba0 <gc_execute_line+0x2de>
     b40:	64 30       	cpi	r22, 0x04	; 4
     b42:	71 05       	cpc	r23, r1
     b44:	09 f4       	brne	.+2      	; 0xb48 <gc_execute_line+0x286>
     b46:	5b c0       	rjmp	.+182    	; 0xbfe <gc_execute_line+0x33c>
     b48:	65 30       	cpi	r22, 0x05	; 5
     b4a:	71 05       	cpc	r23, r1
     b4c:	a4 f4       	brge	.+40     	; 0xb76 <gc_execute_line+0x2b4>
     b4e:	61 30       	cpi	r22, 0x01	; 1
     b50:	71 05       	cpc	r23, r1
     b52:	09 f4       	brne	.+2      	; 0xb56 <gc_execute_line+0x294>
     b54:	5a c0       	rjmp	.+180    	; 0xc0a <gc_execute_line+0x348>
     b56:	62 30       	cpi	r22, 0x02	; 2
     b58:	71 05       	cpc	r23, r1
     b5a:	24 f4       	brge	.+8      	; 0xb64 <gc_execute_line+0x2a2>
     b5c:	67 2b       	or	r22, r23
     b5e:	09 f4       	brne	.+2      	; 0xb62 <gc_execute_line+0x2a0>
     b60:	51 c0       	rjmp	.+162    	; 0xc04 <gc_execute_line+0x342>
     b62:	e3 c0       	rjmp	.+454    	; 0xd2a <gc_execute_line+0x468>
     b64:	62 30       	cpi	r22, 0x02	; 2
     b66:	71 05       	cpc	r23, r1
     b68:	09 f4       	brne	.+2      	; 0xb6c <gc_execute_line+0x2aa>
     b6a:	52 c0       	rjmp	.+164    	; 0xc10 <gc_execute_line+0x34e>
     b6c:	63 30       	cpi	r22, 0x03	; 3
     b6e:	71 05       	cpc	r23, r1
     b70:	09 f0       	breq	.+2      	; 0xb74 <gc_execute_line+0x2b2>
     b72:	db c0       	rjmp	.+438    	; 0xd2a <gc_execute_line+0x468>
     b74:	50 c0       	rjmp	.+160    	; 0xc16 <gc_execute_line+0x354>
     b76:	62 31       	cpi	r22, 0x12	; 18
     b78:	71 05       	cpc	r23, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <gc_execute_line+0x2bc>
     b7c:	56 c0       	rjmp	.+172    	; 0xc2a <gc_execute_line+0x368>
     b7e:	63 31       	cpi	r22, 0x13	; 19
     b80:	71 05       	cpc	r23, r1
     b82:	2c f4       	brge	.+10     	; 0xb8e <gc_execute_line+0x2cc>
     b84:	61 31       	cpi	r22, 0x11	; 17
     b86:	71 05       	cpc	r23, r1
     b88:	09 f0       	breq	.+2      	; 0xb8c <gc_execute_line+0x2ca>
     b8a:	cf c0       	rjmp	.+414    	; 0xd2a <gc_execute_line+0x468>
     b8c:	47 c0       	rjmp	.+142    	; 0xc1c <gc_execute_line+0x35a>
     b8e:	63 31       	cpi	r22, 0x13	; 19
     b90:	71 05       	cpc	r23, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <gc_execute_line+0x2d4>
     b94:	51 c0       	rjmp	.+162    	; 0xc38 <gc_execute_line+0x376>
     b96:	64 31       	cpi	r22, 0x14	; 20
     b98:	71 05       	cpc	r23, r1
     b9a:	09 f0       	breq	.+2      	; 0xb9e <gc_execute_line+0x2dc>
     b9c:	c6 c0       	rjmp	.+396    	; 0xd2a <gc_execute_line+0x468>
     b9e:	53 c0       	rjmp	.+166    	; 0xc46 <gc_execute_line+0x384>
     ba0:	6a 35       	cpi	r22, 0x5A	; 90
     ba2:	71 05       	cpc	r23, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <gc_execute_line+0x2e6>
     ba6:	5b c0       	rjmp	.+182    	; 0xc5e <gc_execute_line+0x39c>
     ba8:	6b 35       	cpi	r22, 0x5B	; 91
     baa:	71 05       	cpc	r23, r1
     bac:	a4 f4       	brge	.+40     	; 0xbd6 <gc_execute_line+0x314>
     bae:	6e 31       	cpi	r22, 0x1E	; 30
     bb0:	71 05       	cpc	r23, r1
     bb2:	11 f1       	breq	.+68     	; 0xbf8 <gc_execute_line+0x336>
     bb4:	6f 31       	cpi	r22, 0x1F	; 31
     bb6:	71 05       	cpc	r23, r1
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <gc_execute_line+0x302>
     bba:	6c 31       	cpi	r22, 0x1C	; 28
     bbc:	71 05       	cpc	r23, r1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <gc_execute_line+0x300>
     bc0:	b4 c0       	rjmp	.+360    	; 0xd2a <gc_execute_line+0x468>
     bc2:	1a c0       	rjmp	.+52     	; 0xbf8 <gc_execute_line+0x336>
     bc4:	65 33       	cpi	r22, 0x35	; 53
     bc6:	71 05       	cpc	r23, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <gc_execute_line+0x30a>
     bca:	43 c0       	rjmp	.+134    	; 0xc52 <gc_execute_line+0x390>
     bcc:	60 35       	cpi	r22, 0x50	; 80
     bce:	71 05       	cpc	r23, r1
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <gc_execute_line+0x312>
     bd2:	ab c0       	rjmp	.+342    	; 0xd2a <gc_execute_line+0x468>
     bd4:	41 c0       	rjmp	.+130    	; 0xc58 <gc_execute_line+0x396>
     bd6:	6c 35       	cpi	r22, 0x5C	; 92
     bd8:	71 05       	cpc	r23, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <gc_execute_line+0x31c>
     bdc:	46 c0       	rjmp	.+140    	; 0xc6a <gc_execute_line+0x3a8>
     bde:	6c 35       	cpi	r22, 0x5C	; 92
     be0:	71 05       	cpc	r23, r1
     be2:	0c f4       	brge	.+2      	; 0xbe6 <gc_execute_line+0x324>
     be4:	3f c0       	rjmp	.+126    	; 0xc64 <gc_execute_line+0x3a2>
     be6:	6d 35       	cpi	r22, 0x5D	; 93
     be8:	71 05       	cpc	r23, r1
     bea:	09 f4       	brne	.+2      	; 0xbee <gc_execute_line+0x32c>
     bec:	41 c0       	rjmp	.+130    	; 0xc70 <gc_execute_line+0x3ae>
     bee:	6e 35       	cpi	r22, 0x5E	; 94
     bf0:	71 05       	cpc	r23, r1
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <gc_execute_line+0x334>
     bf4:	9a c0       	rjmp	.+308    	; 0xd2a <gc_execute_line+0x468>
     bf6:	3f c0       	rjmp	.+126    	; 0xc76 <gc_execute_line+0x3b4>
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
     bfa:	fc a7       	std	Y+44, r31	; 0x2c
     bfc:	9f c0       	rjmp	.+318    	; 0xd3c <gc_execute_line+0x47a>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	8c a7       	std	Y+44, r24	; 0x2c
     c02:	9c c0       	rjmp	.+312    	; 0xd3c <gc_execute_line+0x47a>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     c04:	10 92 01 02 	sts	0x0201, r1
     c08:	99 c0       	rjmp	.+306    	; 0xd3c <gc_execute_line+0x47a>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     c0a:	d0 92 01 02 	sts	0x0201, r13
     c0e:	96 c0       	rjmp	.+300    	; 0xd3c <gc_execute_line+0x47a>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     c10:	c0 92 01 02 	sts	0x0201, r12
     c14:	93 c0       	rjmp	.+294    	; 0xd3c <gc_execute_line+0x47a>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     c16:	90 92 01 02 	sts	0x0201, r9
     c1a:	90 c0       	rjmp	.+288    	; 0xd3c <gc_execute_line+0x47a>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     c1c:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     c20:	d0 92 26 02 	sts	0x0226, r13
  gc.plane_axis_2 = axis_2;
     c24:	c0 92 27 02 	sts	0x0227, r12
     c28:	89 c0       	rjmp	.+274    	; 0xd3c <gc_execute_line+0x47a>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     c2a:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     c2e:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     c32:	d0 92 27 02 	sts	0x0227, r13
     c36:	82 c0       	rjmp	.+260    	; 0xd3c <gc_execute_line+0x47a>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     c38:	d0 92 25 02 	sts	0x0225, r13
  gc.plane_axis_1 = axis_1;
     c3c:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     c40:	10 92 27 02 	sts	0x0227, r1
     c44:	7b c0       	rjmp	.+246    	; 0xd3c <gc_execute_line+0x47a>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     c46:	d0 92 03 02 	sts	0x0203, r13
     c4a:	78 c0       	rjmp	.+240    	; 0xd3c <gc_execute_line+0x47a>
        case 21: gc.inches_mode = FALSE; break;
     c4c:	10 92 03 02 	sts	0x0203, r1
     c50:	75 c0       	rjmp	.+234    	; 0xd3c <gc_execute_line+0x47a>
     c52:	77 24       	eor	r7, r7
     c54:	73 94       	inc	r7
     c56:	72 c0       	rjmp	.+228    	; 0xd3c <gc_execute_line+0x47a>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     c58:	80 92 01 02 	sts	0x0201, r8
     c5c:	6f c0       	rjmp	.+222    	; 0xd3c <gc_execute_line+0x47a>
        case 90: gc.absolute_mode = TRUE; break;
     c5e:	d0 92 04 02 	sts	0x0204, r13
     c62:	6c c0       	rjmp	.+216    	; 0xd3c <gc_execute_line+0x47a>
        case 91: gc.absolute_mode = FALSE; break;
     c64:	10 92 04 02 	sts	0x0204, r1
     c68:	69 c0       	rjmp	.+210    	; 0xd3c <gc_execute_line+0x47a>
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	9c a7       	std	Y+44, r25	; 0x2c
     c6e:	66 c0       	rjmp	.+204    	; 0xd3c <gc_execute_line+0x47a>
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     c70:	d0 92 02 02 	sts	0x0202, r13
     c74:	63 c0       	rjmp	.+198    	; 0xd3c <gc_execute_line+0x47a>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     c76:	10 92 02 02 	sts	0x0202, r1
     c7a:	60 c0       	rjmp	.+192    	; 0xd3c <gc_execute_line+0x47a>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     c7c:	6d 33       	cpi	r22, 0x3D	; 61
     c7e:	71 05       	cpc	r23, r1
     c80:	08 f0       	brcs	.+2      	; 0xc84 <gc_execute_line+0x3c2>
     c82:	53 c0       	rjmp	.+166    	; 0xd2a <gc_execute_line+0x468>
     c84:	ee 58       	subi	r30, 0x8E	; 142
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	05 90       	lpm	r0, Z+
     c8e:	f4 91       	lpm	r31, Z+
     c90:	e0 2d       	mov	r30, r0
     c92:	19 94       	eijmp
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     c94:	d0 92 05 02 	sts	0x0205, r13
     c98:	51 c0       	rjmp	.+162    	; 0xd3c <gc_execute_line+0x47a>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     c9a:	c0 92 05 02 	sts	0x0205, r12
     c9e:	4e c0       	rjmp	.+156    	; 0xd3c <gc_execute_line+0x47a>
        case 3: gc.spindle_direction = 1; break;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <gc_execute_line+0x3e8>
        case 4: gc.spindle_direction = -1; break;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	9f ef       	ldi	r25, 0xFF	; 255
     caa:	90 93 07 02 	sts	0x0207, r25
     cae:	80 93 06 02 	sts	0x0206, r24
     cb2:	44 c0       	rjmp	.+136    	; 0xd3c <gc_execute_line+0x47a>
        case 5: gc.spindle_direction = 0; break;
     cb4:	10 92 07 02 	sts	0x0207, r1
     cb8:	10 92 06 02 	sts	0x0206, r1
     cbc:	3f c0       	rjmp	.+126    	; 0xd3c <gc_execute_line+0x47a>
        case 8: gc.coolant_flood = 1; break;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	90 93 09 02 	sts	0x0209, r25
     cc6:	80 93 08 02 	sts	0x0208, r24
     cca:	38 c0       	rjmp	.+112    	; 0xd3c <gc_execute_line+0x47a>
        case 9: gc.coolant_flood = 0; break;
     ccc:	10 92 09 02 	sts	0x0209, r1
     cd0:	10 92 08 02 	sts	0x0208, r1
     cd4:	33 c0       	rjmp	.+102    	; 0xd3c <gc_execute_line+0x47a>
	// head control
        case 10: head_down(1);break;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <gc_execute_line+0x41e>
        case 11: head_down(0);break;
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <head_down>
     ce4:	2b c0       	rjmp	.+86     	; 0xd3c <gc_execute_line+0x47a>
	// atc
		case 12: atc_change(0);break;
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	11 c0       	rjmp	.+34     	; 0xd0e <gc_execute_line+0x44c>
		case 13: atc_change(1);break;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e c0       	rjmp	.+28     	; 0xd0e <gc_execute_line+0x44c>
		case 14: atc_change(2);break;
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0b c0       	rjmp	.+22     	; 0xd0e <gc_execute_line+0x44c>
		case 15: atc_change(3);break;
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <gc_execute_line+0x44c>
		case 16: atc_change(4);break;
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	05 c0       	rjmp	.+10     	; 0xd0e <gc_execute_line+0x44c>
		case 17: atc_change(5);break;
     d04:	85 e0       	ldi	r24, 0x05	; 5
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <gc_execute_line+0x44c>
		case 18: atc_change(6);break;
     d0a:	86 e0       	ldi	r24, 0x06	; 6
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 9a 1b 	call	0x3734	; 0x3734 <atc_change>
     d12:	14 c0       	rjmp	.+40     	; 0xd3c <gc_execute_line+0x47a>
// vacuum
		case 19: vacuum(1);break;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <gc_execute_line+0x45c>
		case 20: vacuum(0);break;
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <vacuum>
     d22:	0c c0       	rjmp	.+24     	; 0xd3c <gc_execute_line+0x47a>
// tape knock
		case 21: tape_knock();break;
     d24:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <tape_knock>
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <gc_execute_line+0x47a>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     d2a:	90 92 00 02 	sts	0x0200, r9
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <gc_execute_line+0x47a>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     d30:	c8 01       	movw	r24, r16
     d32:	b7 01       	movw	r22, r14
     d34:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__fixunssfsi>
     d38:	60 93 22 02 	sts	0x0222, r22
    }
    if(gc.status_code) { break; }
     d3c:	80 91 00 02 	lds	r24, 0x0200
     d40:	88 23       	and	r24, r24
     d42:	59 f4       	brne	.+22     	; 0xd5a <gc_execute_line+0x498>
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     d44:	c1 01       	movw	r24, r2
     d46:	be 01       	movw	r22, r28
     d48:	6c 5f       	subi	r22, 0xFC	; 252
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	a5 01       	movw	r20, r10
     d4e:	92 01       	movw	r18, r4
     d50:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <next_statement>
     d54:	89 2b       	or	r24, r25
     d56:	09 f0       	breq	.+2      	; 0xd5a <gc_execute_line+0x498>
     d58:	4c ce       	rjmp	.-872    	; 0x9f2 <gc_execute_line+0x130>
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     d5a:	80 91 00 02 	lds	r24, 0x0200
     d5e:	88 23       	and	r24, r24
     d60:	09 f0       	breq	.+2      	; 0xd64 <gc_execute_line+0x4a2>
     d62:	d5 c1       	rjmp	.+938    	; 0x110e <gc_execute_line+0x84c>

  char_counter = 0;
     d64:	1b 82       	std	Y+3, r1	; 0x03
     d66:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
     d68:	80 e1       	ldi	r24, 0x10	; 16
     d6a:	fe 01       	movw	r30, r28
     d6c:	7c 96       	adiw	r30, 0x1c	; 28
     d6e:	df 01       	movw	r26, r30
     d70:	1d 92       	st	X+, r1
     d72:	8a 95       	dec	r24
     d74:	e9 f7       	brne	.-6      	; 0xd70 <gc_execute_line+0x4ae>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     d76:	de 01       	movw	r26, r28
     d78:	1c 96       	adiw	r26, 0x0c	; 12
     d7a:	e2 e1       	ldi	r30, 0x12	; 18
     d7c:	f2 e0       	ldi	r31, 0x02	; 2
     d7e:	80 e1       	ldi	r24, 0x10	; 16
     d80:	01 90       	ld	r0, Z+
     d82:	0d 92       	st	X+, r0
     d84:	81 50       	subi	r24, 0x01	; 1
     d86:	e1 f7       	brne	.-8      	; 0xd80 <gc_execute_line+0x4be>
     d88:	1d a6       	std	Y+45, r1	; 0x2d
     d8a:	1e a6       	std	Y+46, r1	; 0x2e
     d8c:	b0 e8       	ldi	r27, 0x80	; 128
     d8e:	bf a7       	std	Y+47, r27	; 0x2f
     d90:	ef eb       	ldi	r30, 0xBF	; 191
     d92:	e8 ab       	std	Y+48, r30	; 0x30

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     d94:	e4 e0       	ldi	r30, 0x04	; 4
     d96:	2e 2e       	mov	r2, r30
     d98:	31 2c       	mov	r3, r1
     d9a:	2c 0e       	add	r2, r28
     d9c:	3d 1e       	adc	r3, r29
     d9e:	72 e0       	ldi	r23, 0x02	; 2
     da0:	47 2e       	mov	r4, r23
     da2:	51 2c       	mov	r5, r1
     da4:	4c 0e       	add	r4, r28
     da6:	5d 1e       	adc	r5, r29
     da8:	4e 01       	movw	r8, r28
     daa:	08 94       	sec
     dac:	81 1c       	adc	r8, r1
     dae:	91 1c       	adc	r9, r1
     db0:	bf c0       	rjmp	.+382    	; 0xf30 <gc_execute_line+0x66e>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     db2:	cc 80       	ldd	r12, Y+4	; 0x04
     db4:	dd 80       	ldd	r13, Y+5	; 0x05
     db6:	ee 80       	ldd	r14, Y+6	; 0x06
     db8:	ff 80       	ldd	r15, Y+7	; 0x07
  gc.absolute_mode = TRUE;
}
extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     dba:	80 91 03 02 	lds	r24, 0x0203
     dbe:	88 23       	and	r24, r24
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <gc_execute_line+0x506>
     dc2:	a7 01       	movw	r20, r14
     dc4:	96 01       	movw	r18, r12
     dc6:	0a c0       	rjmp	.+20     	; 0xddc <gc_execute_line+0x51a>
     dc8:	c7 01       	movw	r24, r14
     dca:	b6 01       	movw	r22, r12
     dcc:	23 e3       	ldi	r18, 0x33	; 51
     dce:	33 e3       	ldi	r19, 0x33	; 51
     dd0:	4b ec       	ldi	r20, 0xCB	; 203
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     ddc:	09 81       	ldd	r16, Y+1	; 0x01
     dde:	0c 34       	cpi	r16, 0x4C	; 76
     de0:	50 f4       	brcc	.+20     	; 0xdf6 <gc_execute_line+0x534>
     de2:	09 34       	cpi	r16, 0x49	; 73
     de4:	08 f0       	brcs	.+2      	; 0xde8 <gc_execute_line+0x526>
     de6:	45 c0       	rjmp	.+138    	; 0xe72 <gc_execute_line+0x5b0>
     de8:	03 34       	cpi	r16, 0x43	; 67
     dea:	09 f4       	brne	.+2      	; 0xdee <gc_execute_line+0x52c>
     dec:	8c c0       	rjmp	.+280    	; 0xf06 <gc_execute_line+0x644>
     dee:	06 34       	cpi	r16, 0x46	; 70
     df0:	09 f0       	breq	.+2      	; 0xdf4 <gc_execute_line+0x532>
     df2:	9e c0       	rjmp	.+316    	; 0xf30 <gc_execute_line+0x66e>
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <gc_execute_line+0x552>
     df6:	03 35       	cpi	r16, 0x53	; 83
     df8:	09 f4       	brne	.+2      	; 0xdfc <gc_execute_line+0x53a>
     dfa:	4f c0       	rjmp	.+158    	; 0xe9a <gc_execute_line+0x5d8>
     dfc:	04 35       	cpi	r16, 0x54	; 84
     dfe:	20 f4       	brcc	.+8      	; 0xe08 <gc_execute_line+0x546>
     e00:	00 35       	cpi	r16, 0x50	; 80
     e02:	09 f0       	breq	.+2      	; 0xe06 <gc_execute_line+0x544>
     e04:	95 c0       	rjmp	.+298    	; 0xf30 <gc_execute_line+0x66e>
     e06:	44 c0       	rjmp	.+136    	; 0xe90 <gc_execute_line+0x5ce>
     e08:	80 2f       	mov	r24, r16
     e0a:	88 55       	subi	r24, 0x58	; 88
     e0c:	83 30       	cpi	r24, 0x03	; 3
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <gc_execute_line+0x550>
     e10:	8f c0       	rjmp	.+286    	; 0xf30 <gc_execute_line+0x66e>
     e12:	4c c0       	rjmp	.+152    	; 0xeac <gc_execute_line+0x5ea>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     e14:	80 91 02 02 	lds	r24, 0x0202
     e18:	88 23       	and	r24, r24
     e1a:	29 f0       	breq	.+10     	; 0xe26 <gc_execute_line+0x564>
     e1c:	2d a7       	std	Y+45, r18	; 0x2d
     e1e:	3e a7       	std	Y+46, r19	; 0x2e
     e20:	4f a7       	std	Y+47, r20	; 0x2f
     e22:	58 ab       	std	Y+48, r21	; 0x30
     e24:	85 c0       	rjmp	.+266    	; 0xf30 <gc_execute_line+0x66e>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     e26:	80 91 01 02 	lds	r24, 0x0201
     e2a:	88 23       	and	r24, r24
     e2c:	89 f4       	brne	.+34     	; 0xe50 <gc_execute_line+0x58e>
          gc.seek_rate = unit_converted_value/60;
     e2e:	ca 01       	movw	r24, r20
     e30:	b9 01       	movw	r22, r18
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e7       	ldi	r20, 0x70	; 112
     e38:	52 e4       	ldi	r21, 0x42	; 66
     e3a:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
     e3e:	60 93 0e 02 	sts	0x020E, r22
     e42:	70 93 0f 02 	sts	0x020F, r23
     e46:	80 93 10 02 	sts	0x0210, r24
     e4a:	90 93 11 02 	sts	0x0211, r25
     e4e:	70 c0       	rjmp	.+224    	; 0xf30 <gc_execute_line+0x66e>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
     e50:	ca 01       	movw	r24, r20
     e52:	b9 01       	movw	r22, r18
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e7       	ldi	r20, 0x70	; 112
     e5a:	52 e4       	ldi	r21, 0x42	; 66
     e5c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
     e60:	60 93 0a 02 	sts	0x020A, r22
     e64:	70 93 0b 02 	sts	0x020B, r23
     e68:	80 93 0c 02 	sts	0x020C, r24
     e6c:	90 93 0d 02 	sts	0x020D, r25
     e70:	5f c0       	rjmp	.+190    	; 0xf30 <gc_execute_line+0x66e>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     e72:	e0 2f       	mov	r30, r16
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	e9 54       	subi	r30, 0x49	; 73
     e78:	f0 40       	sbci	r31, 0x00	; 0
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	e8 0d       	add	r30, r8
     e84:	f9 1d       	adc	r31, r9
     e86:	23 8f       	std	Z+27, r18	; 0x1b
     e88:	34 8f       	std	Z+28, r19	; 0x1c
     e8a:	45 8f       	std	Z+29, r20	; 0x1d
     e8c:	56 8f       	std	Z+30, r21	; 0x1e
     e8e:	50 c0       	rjmp	.+160    	; 0xf30 <gc_execute_line+0x66e>
      case 'P': p = value; break;
     e90:	c8 86       	std	Y+8, r12	; 0x08
     e92:	d9 86       	std	Y+9, r13	; 0x09
     e94:	ea 86       	std	Y+10, r14	; 0x0a
     e96:	fb 86       	std	Y+11, r15	; 0x0b
     e98:	4b c0       	rjmp	.+150    	; 0xf30 <gc_execute_line+0x66e>
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
     e9a:	c7 01       	movw	r24, r14
     e9c:	b6 01       	movw	r22, r12
     e9e:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
     ea2:	70 93 24 02 	sts	0x0224, r23
     ea6:	60 93 23 02 	sts	0x0223, r22
     eaa:	42 c0       	rjmp	.+132    	; 0xf30 <gc_execute_line+0x66e>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
     eac:	80 91 04 02 	lds	r24, 0x0204
     eb0:	88 23       	and	r24, r24
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <gc_execute_line+0x5f6>
     eb4:	77 20       	and	r7, r7
     eb6:	79 f0       	breq	.+30     	; 0xed6 <gc_execute_line+0x614>
        target[letter - 'X'] = unit_converted_value;
     eb8:	e0 2f       	mov	r30, r16
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	e8 55       	subi	r30, 0x58	; 88
     ebe:	f0 40       	sbci	r31, 0x00	; 0
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	ee 0f       	add	r30, r30
     ec6:	ff 1f       	adc	r31, r31
     ec8:	e8 0d       	add	r30, r8
     eca:	f9 1d       	adc	r31, r9
     ecc:	23 87       	std	Z+11, r18	; 0x0b
     ece:	34 87       	std	Z+12, r19	; 0x0c
     ed0:	45 87       	std	Z+13, r20	; 0x0d
     ed2:	56 87       	std	Z+14, r21	; 0x0e
     ed4:	2d c0       	rjmp	.+90     	; 0xf30 <gc_execute_line+0x66e>
      } else {
        target[letter - 'X'] += unit_converted_value;
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	08 55       	subi	r16, 0x58	; 88
     eda:	10 40       	sbci	r17, 0x00	; 0
     edc:	00 0f       	add	r16, r16
     ede:	11 1f       	adc	r17, r17
     ee0:	00 0f       	add	r16, r16
     ee2:	11 1f       	adc	r17, r17
     ee4:	08 0d       	add	r16, r8
     ee6:	19 1d       	adc	r17, r9
     ee8:	d8 01       	movw	r26, r16
     eea:	1b 96       	adiw	r26, 0x0b	; 11
     eec:	6d 91       	ld	r22, X+
     eee:	7d 91       	ld	r23, X+
     ef0:	8d 91       	ld	r24, X+
     ef2:	9c 91       	ld	r25, X
     ef4:	1e 97       	sbiw	r26, 0x0e	; 14
     ef6:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
     efa:	f8 01       	movw	r30, r16
     efc:	63 87       	std	Z+11, r22	; 0x0b
     efe:	74 87       	std	Z+12, r23	; 0x0c
     f00:	85 87       	std	Z+13, r24	; 0x0d
     f02:	96 87       	std	Z+14, r25	; 0x0e
     f04:	15 c0       	rjmp	.+42     	; 0xf30 <gc_execute_line+0x66e>
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
     f06:	80 91 04 02 	lds	r24, 0x0204
     f0a:	88 23       	and	r24, r24
     f0c:	11 f4       	brne	.+4      	; 0xf12 <gc_execute_line+0x650>
     f0e:	77 20       	and	r7, r7
     f10:	29 f0       	breq	.+10     	; 0xf1c <gc_execute_line+0x65a>
		target[C_AXIS] = unit_converted_value;
     f12:	28 8f       	std	Y+24, r18	; 0x18
     f14:	39 8f       	std	Y+25, r19	; 0x19
     f16:	4a 8f       	std	Y+26, r20	; 0x1a
     f18:	5b 8f       	std	Y+27, r21	; 0x1b
     f1a:	0a c0       	rjmp	.+20     	; 0xf30 <gc_execute_line+0x66e>
      } else {
        target[C_AXIS] += unit_converted_value;
     f1c:	68 8d       	ldd	r22, Y+24	; 0x18
     f1e:	79 8d       	ldd	r23, Y+25	; 0x19
     f20:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f22:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f24:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
     f28:	68 8f       	std	Y+24, r22	; 0x18
     f2a:	79 8f       	std	Y+25, r23	; 0x19
     f2c:	8a 8f       	std	Y+26, r24	; 0x1a
     f2e:	9b 8f       	std	Y+27, r25	; 0x1b
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     f30:	c4 01       	movw	r24, r8
     f32:	b1 01       	movw	r22, r2
     f34:	a5 01       	movw	r20, r10
     f36:	92 01       	movw	r18, r4
     f38:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <next_statement>
     f3c:	89 2b       	or	r24, r25
     f3e:	09 f0       	breq	.+2      	; 0xf42 <gc_execute_line+0x680>
     f40:	38 cf       	rjmp	.-400    	; 0xdb2 <gc_execute_line+0x4f0>
      break;      
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     f42:	80 91 00 02 	lds	r24, 0x0200
     f46:	88 23       	and	r24, r24
     f48:	09 f0       	breq	.+2      	; 0xf4c <gc_execute_line+0x68a>
     f4a:	e1 c0       	rjmp	.+450    	; 0x110e <gc_execute_line+0x84c>
    
  // Update spindle state
  if (gc.spindle_direction) {
     f4c:	80 91 06 02 	lds	r24, 0x0206
     f50:	90 91 07 02 	lds	r25, 0x0207
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	59 f0       	breq	.+22     	; 0xf6e <gc_execute_line+0x6ac>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
     f58:	40 91 23 02 	lds	r20, 0x0223
     f5c:	50 91 24 02 	lds	r21, 0x0224
     f60:	66 27       	eor	r22, r22
     f62:	57 fd       	sbrc	r21, 7
     f64:	60 95       	com	r22
     f66:	76 2f       	mov	r23, r22
     f68:	0e 94 88 14 	call	0x2910	; 0x2910 <spindle_run>
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <gc_execute_line+0x6b0>
  } else {
    spindle_stop();
     f6e:	0e 94 93 14 	call	0x2926	; 0x2926 <spindle_stop>
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
     f72:	80 91 08 02 	lds	r24, 0x0208
     f76:	90 91 09 02 	lds	r25, 0x0209
     f7a:	89 2b       	or	r24, r25
     f7c:	19 f0       	breq	.+6      	; 0xf84 <gc_execute_line+0x6c2>
  	coolant_flood(TRUE);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <gc_execute_line+0x6c6>
  }
  else {
  	coolant_flood(FALSE);
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 02 03 	call	0x604	; 0x604 <coolant_flood>
  }
  
  // Perform any physical actions
  switch (next_action) {
     f8c:	fc a5       	ldd	r31, Y+44	; 0x2c
     f8e:	f1 30       	cpi	r31, 0x01	; 1
     f90:	91 f0       	breq	.+36     	; 0xfb6 <gc_execute_line+0x6f4>
     f92:	f1 30       	cpi	r31, 0x01	; 1
     f94:	f8 f0       	brcs	.+62     	; 0xfd4 <gc_execute_line+0x712>
     f96:	f2 30       	cpi	r31, 0x02	; 2
     f98:	21 f0       	breq	.+8      	; 0xfa2 <gc_execute_line+0x6e0>
     f9a:	f3 30       	cpi	r31, 0x03	; 3
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <gc_execute_line+0x6de>
     f9e:	aa c0       	rjmp	.+340    	; 0x10f4 <gc_execute_line+0x832>
     fa0:	97 c0       	rjmp	.+302    	; 0x10d0 <gc_execute_line+0x80e>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
     fa2:	0e 94 05 09 	call	0x120a	; 0x120a <mc_go_home>
     fa6:	80 e1       	ldi	r24, 0x10	; 16
     fa8:	fe 01       	movw	r30, r28
     faa:	3c 96       	adiw	r30, 0x0c	; 12
     fac:	df 01       	movw	r26, r30
     fae:	1d 92       	st	X+, r1
     fb0:	8a 95       	dec	r24
     fb2:	e9 f7       	brne	.-6      	; 0xfae <gc_execute_line+0x6ec>
     fb4:	9f c0       	rjmp	.+318    	; 0x10f4 <gc_execute_line+0x832>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
     fb6:	68 85       	ldd	r22, Y+8	; 0x08
     fb8:	79 85       	ldd	r23, Y+9	; 0x09
     fba:	8a 85       	ldd	r24, Y+10	; 0x0a
     fbc:	9b 85       	ldd	r25, Y+11	; 0x0b
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a e7       	ldi	r20, 0x7A	; 122
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     fca:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__fixunssfsi>
     fce:	0e 94 08 09 	call	0x1210	; 0x1210 <mc_dwell>
     fd2:	90 c0       	rjmp	.+288    	; 0x10f4 <gc_execute_line+0x832>
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     fd4:	80 91 01 02 	lds	r24, 0x0201
     fd8:	88 23       	and	r24, r24
     fda:	21 f0       	breq	.+8      	; 0xfe4 <gc_execute_line+0x722>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <gc_execute_line+0x720>
     fe0:	89 c0       	rjmp	.+274    	; 0x10f4 <gc_execute_line+0x832>
     fe2:	2d c0       	rjmp	.+90     	; 0x103e <gc_execute_line+0x77c>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <gc_execute_line+0x724>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <gc_execute_line+0x726>
     fe8:	6c 85       	ldd	r22, Y+12	; 0x0c
     fea:	7d 85       	ldd	r23, Y+13	; 0x0d
     fec:	8e 85       	ldd	r24, Y+14	; 0x0e
     fee:	9f 85       	ldd	r25, Y+15	; 0x0f
     ff0:	28 89       	ldd	r18, Y+16	; 0x10
     ff2:	39 89       	ldd	r19, Y+17	; 0x11
     ff4:	4a 89       	ldd	r20, Y+18	; 0x12
     ff6:	5b 89       	ldd	r21, Y+19	; 0x13
     ff8:	ec 88       	ldd	r14, Y+20	; 0x14
     ffa:	fd 88       	ldd	r15, Y+21	; 0x15
     ffc:	0e 89       	ldd	r16, Y+22	; 0x16
     ffe:	1f 89       	ldd	r17, Y+23	; 0x17
    1000:	a8 8c       	ldd	r10, Y+24	; 0x18
    1002:	b9 8c       	ldd	r11, Y+25	; 0x19
    1004:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1006:	db 8c       	ldd	r13, Y+27	; 0x1b
    1008:	60 90 0e 02 	lds	r6, 0x020E
    100c:	70 90 0f 02 	lds	r7, 0x020F
    1010:	80 90 10 02 	lds	r8, 0x0210
    1014:	90 90 11 02 	lds	r9, 0x0211
    1018:	ed b7       	in	r30, 0x3d	; 61
    101a:	fe b7       	in	r31, 0x3e	; 62
    101c:	61 82       	std	Z+1, r6	; 0x01
    101e:	72 82       	std	Z+2, r7	; 0x02
    1020:	83 82       	std	Z+3, r8	; 0x03
    1022:	94 82       	std	Z+4, r9	; 0x04
    1024:	16 82       	std	Z+6, r1	; 0x06
    1026:	15 82       	std	Z+5, r1	; 0x05
    1028:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <plan_buffer_line>
    102c:	8d b7       	in	r24, 0x3d	; 61
    102e:	9e b7       	in	r25, 0x3e	; 62
    1030:	06 96       	adiw	r24, 0x06	; 6
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	9e bf       	out	0x3e, r25	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	8d bf       	out	0x3d, r24	; 61
    103c:	5b c0       	rjmp	.+182    	; 0x10f4 <gc_execute_line+0x832>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    103e:	2c 84       	ldd	r2, Y+12	; 0x0c
    1040:	3d 84       	ldd	r3, Y+13	; 0x0d
    1042:	4e 84       	ldd	r4, Y+14	; 0x0e
    1044:	5f 84       	ldd	r5, Y+15	; 0x0f
    1046:	68 88       	ldd	r6, Y+16	; 0x10
    1048:	79 88       	ldd	r7, Y+17	; 0x11
    104a:	8a 88       	ldd	r8, Y+18	; 0x12
    104c:	9b 88       	ldd	r9, Y+19	; 0x13
    104e:	ec 88       	ldd	r14, Y+20	; 0x14
    1050:	fd 88       	ldd	r15, Y+21	; 0x15
    1052:	0e 89       	ldd	r16, Y+22	; 0x16
    1054:	1f 89       	ldd	r17, Y+23	; 0x17
    1056:	a8 8c       	ldd	r10, Y+24	; 0x18
    1058:	b9 8c       	ldd	r11, Y+25	; 0x19
    105a:	ca 8c       	ldd	r12, Y+26	; 0x1a
    105c:	db 8c       	ldd	r13, Y+27	; 0x1b
    105e:	60 91 02 02 	lds	r22, 0x0202
    1062:	66 23       	and	r22, r22
    1064:	61 f4       	brne	.+24     	; 0x107e <gc_execute_line+0x7bc>
    1066:	90 91 0a 02 	lds	r25, 0x020A
    106a:	9d a7       	std	Y+45, r25	; 0x2d
    106c:	a0 91 0b 02 	lds	r26, 0x020B
    1070:	ae a7       	std	Y+46, r26	; 0x2e
    1072:	b0 91 0c 02 	lds	r27, 0x020C
    1076:	bf a7       	std	Y+47, r27	; 0x2f
    1078:	e0 91 0d 02 	lds	r30, 0x020D
    107c:	e8 ab       	std	Y+48, r30	; 0x30
    107e:	00 d0       	rcall	.+0      	; 0x1080 <gc_execute_line+0x7be>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <gc_execute_line+0x7c0>
    1082:	8d b7       	in	r24, 0x3d	; 61
    1084:	9e b7       	in	r25, 0x3e	; 62
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	9a ab       	std	Y+50, r25	; 0x32
    108a:	89 ab       	std	Y+49, r24	; 0x31
    108c:	2d a5       	ldd	r18, Y+45	; 0x2d
    108e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1090:	4f a5       	ldd	r20, Y+47	; 0x2f
    1092:	58 a9       	ldd	r21, Y+48	; 0x30
    1094:	c9 01       	movw	r24, r18
    1096:	da 01       	movw	r26, r20
    1098:	ed b7       	in	r30, 0x3d	; 61
    109a:	fe b7       	in	r31, 0x3e	; 62
    109c:	81 83       	std	Z+1, r24	; 0x01
    109e:	92 83       	std	Z+2, r25	; 0x02
    10a0:	a3 83       	std	Z+3, r26	; 0x03
    10a2:	b4 83       	std	Z+4, r27	; 0x04
    10a4:	a9 a9       	ldd	r26, Y+49	; 0x31
    10a6:	ba a9       	ldd	r27, Y+50	; 0x32
    10a8:	14 96       	adiw	r26, 0x04	; 4
    10aa:	6c 93       	st	X, r22
    10ac:	14 97       	sbiw	r26, 0x04	; 4
    10ae:	15 96       	adiw	r26, 0x05	; 5
    10b0:	1c 92       	st	X, r1
    10b2:	c2 01       	movw	r24, r4
    10b4:	b1 01       	movw	r22, r2
    10b6:	a4 01       	movw	r20, r8
    10b8:	93 01       	movw	r18, r6
    10ba:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <plan_buffer_line>
    10be:	ed b7       	in	r30, 0x3d	; 61
    10c0:	fe b7       	in	r31, 0x3e	; 62
    10c2:	36 96       	adiw	r30, 0x06	; 6
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	fe bf       	out	0x3e, r31	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	ed bf       	out	0x3d, r30	; 61
    10ce:	12 c0       	rjmp	.+36     	; 0x10f4 <gc_execute_line+0x832>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    10d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    10d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    10d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    10d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    10d8:	28 89       	ldd	r18, Y+16	; 0x10
    10da:	39 89       	ldd	r19, Y+17	; 0x11
    10dc:	4a 89       	ldd	r20, Y+18	; 0x12
    10de:	5b 89       	ldd	r21, Y+19	; 0x13
    10e0:	ec 88       	ldd	r14, Y+20	; 0x14
    10e2:	fd 88       	ldd	r15, Y+21	; 0x15
    10e4:	0e 89       	ldd	r16, Y+22	; 0x16
    10e6:	1f 89       	ldd	r17, Y+23	; 0x17
    10e8:	a8 8c       	ldd	r10, Y+24	; 0x18
    10ea:	b9 8c       	ldd	r11, Y+25	; 0x19
    10ec:	ca 8c       	ldd	r12, Y+26	; 0x1a
    10ee:	db 8c       	ldd	r13, Y+27	; 0x1b
    10f0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <plan_set_current>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    10f4:	a2 e1       	ldi	r26, 0x12	; 18
    10f6:	b2 e0       	ldi	r27, 0x02	; 2
    10f8:	fe 01       	movw	r30, r28
    10fa:	3c 96       	adiw	r30, 0x0c	; 12
    10fc:	80 e1       	ldi	r24, 0x10	; 16
    10fe:	01 90       	ld	r0, Z+
    1100:	0d 92       	st	X+, r0
    1102:	81 50       	subi	r24, 0x01	; 1
    1104:	e1 f7       	brne	.-8      	; 0x10fe <gc_execute_line+0x83c>

  return(gc.status_code);
    1106:	80 91 00 02 	lds	r24, 0x0200
    110a:	01 c0       	rjmp	.+2      	; 0x110e <gc_execute_line+0x84c>
    110c:	83 e0       	ldi	r24, 0x03	; 3
}
    110e:	e2 96       	adiw	r28, 0x32	; 50
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	bf 90       	pop	r11
    112c:	af 90       	pop	r10
    112e:	9f 90       	pop	r9
    1130:	8f 90       	pop	r8
    1132:	7f 90       	pop	r7
    1134:	6f 90       	pop	r6
    1136:	5f 90       	pop	r5
    1138:	4f 90       	pop	r4
    113a:	3f 90       	pop	r3
    113c:	2f 90       	pop	r2
    113e:	08 95       	ret

00001140 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	79 01       	movw	r14, r18
    1152:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    1154:	5f 77       	andi	r21, 0x7F	; 127
    1156:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    115a:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <atan>
    115e:	5b 01       	movw	r10, r22
    1160:	6c 01       	movw	r12, r24
  if (y>0) {
    1162:	c8 01       	movw	r24, r16
    1164:	b7 01       	movw	r22, r14
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__gesf2>
    1172:	18 16       	cp	r1, r24
    1174:	cc f0       	brlt	.+50     	; 0x11a8 <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
    1176:	c6 01       	movw	r24, r12
    1178:	b5 01       	movw	r22, r10
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__gesf2>
    1186:	18 16       	cp	r1, r24
    1188:	2c f4       	brge	.+10     	; 0x1194 <theta+0x54>
    {
      return(M_PI-theta);
    118a:	6b ed       	ldi	r22, 0xDB	; 219
    118c:	7f e0       	ldi	r23, 0x0F	; 15
    118e:	89 e4       	ldi	r24, 0x49	; 73
    1190:	90 e4       	ldi	r25, 0x40	; 64
    1192:	04 c0       	rjmp	.+8      	; 0x119c <theta+0x5c>
    } else {
      return(-M_PI-theta);
    1194:	6b ed       	ldi	r22, 0xDB	; 219
    1196:	7f e0       	ldi	r23, 0x0F	; 15
    1198:	89 e4       	ldi	r24, 0x49	; 73
    119a:	90 ec       	ldi	r25, 0xC0	; 192
    119c:	a6 01       	movw	r20, r12
    119e:	95 01       	movw	r18, r10
    11a0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__subsf3>
    11a4:	5b 01       	movw	r10, r22
    11a6:	6c 01       	movw	r12, r24
    }
  }
}
    11a8:	b5 01       	movw	r22, r10
    11aa:	c6 01       	movw	r24, r12
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	bf 90       	pop	r11
    11ba:	af 90       	pop	r10
    11bc:	08 95       	ret

000011be <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  sp_init();        
    11be:	0e 94 57 12 	call	0x24ae	; 0x24ae <sp_init>
  settings_init();  
    11c2:	0e 94 6d 14 	call	0x28da	; 0x28da <settings_init>
  plan_init();      
    11c6:	0e 94 07 0b 	call	0x160e	; 0x160e <plan_init>
  st_init();        
    11ca:	0e 94 76 15 	call	0x2aec	; 0x2aec <st_init>
  limits_init();
    11ce:	0e 94 38 16 	call	0x2c70	; 0x2c70 <limits_init>
  spindle_init();   
    11d2:	0e 94 81 14 	call	0x2902	; 0x2902 <spindle_init>
  coolant_init();
    11d6:	0e 94 00 03 	call	0x600	; 0x600 <coolant_init>
  atc_init();
    11da:	0e 94 85 1b 	call	0x370a	; 0x370a <atc_init>
  head_init();
    11de:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <head_init>
  vacuum_init();
    11e2:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <vacuum_init>
  panel_init();
    11e6:	0e 94 a5 1c 	call	0x394a	; 0x394a <panel_init>
  gc_init();
    11ea:	0e 94 23 04 	call	0x846	; 0x846 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    11ee:	8d e1       	ldi	r24, 0x1D	; 29
    11f0:	92 e0       	ldi	r25, 0x02	; 2
    11f2:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    11f6:	83 b7       	in	r24, 0x33	; 51
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	83 bf       	out	0x33, r24	; 51
    11fc:	88 95       	sleep
    11fe:	83 b7       	in	r24, 0x33	; 51
    1200:	8e 7f       	andi	r24, 0xFE	; 254
    1202:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
    1204:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <sp_process>
    1208:	f6 cf       	rjmp	.-20     	; 0x11f6 <main+0x38>

0000120a <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    120a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <st_go_home>
}
    120e:	08 95       	ret

00001210 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1210:	af 92       	push	r10
    1212:	bf 92       	push	r11
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	7b 01       	movw	r14, r22
    1222:	8c 01       	movw	r16, r24
  st_synchronize();
    1224:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <st_synchronize>
  _delay_ms(milliseconds);
    1228:	c8 01       	movw	r24, r16
    122a:	b7 01       	movw	r22, r14
    122c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__floatunsisf>
    1230:	5b 01       	movw	r10, r22
    1232:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a e7       	ldi	r20, 0x7A	; 122
    123a:	55 e4       	ldi	r21, 0x45	; 69
    123c:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1240:	7b 01       	movw	r14, r22
    1242:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__cmpsf2>
    1250:	88 23       	and	r24, r24
    1252:	1c f4       	brge	.+6      	; 0x125a <mc_dwell+0x4a>
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	24 c0       	rjmp	.+72     	; 0x12a2 <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    125a:	c8 01       	movw	r24, r16
    125c:	b7 01       	movw	r22, r14
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	4f e7       	ldi	r20, 0x7F	; 127
    1264:	57 e4       	ldi	r21, 0x47	; 71
    1266:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__gesf2>
    126a:	18 16       	cp	r1, r24
    126c:	b4 f4       	brge	.+44     	; 0x129a <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126e:	c6 01       	movw	r24, r12
    1270:	b5 01       	movw	r22, r10
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e2       	ldi	r20, 0x20	; 32
    1278:	51 e4       	ldi	r21, 0x41	; 65
    127a:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    127e:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1282:	80 e9       	ldi	r24, 0x90	; 144
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <mc_dwell+0x82>
    1288:	fc 01       	movw	r30, r24
    128a:	31 97       	sbiw	r30, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128e:	61 50       	subi	r22, 0x01	; 1
    1290:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1292:	61 15       	cp	r22, r1
    1294:	71 05       	cpc	r23, r1
    1296:	c1 f7       	brne	.-16     	; 0x1288 <mc_dwell+0x78>
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	c8 01       	movw	r24, r16
    129c:	b7 01       	movw	r22, r14
    129e:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__fixunssfsi>
    12a2:	cb 01       	movw	r24, r22
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <mc_dwell+0x94>
}
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	bf 90       	pop	r11
    12b6:	af 90       	pop	r10
    12b8:	08 95       	ret

000012ba <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    12ba:	fc 01       	movw	r30, r24
    12bc:	60 91 96 06 	lds	r22, 0x0696
    12c0:	70 91 97 06 	lds	r23, 0x0697
    12c4:	80 91 98 06 	lds	r24, 0x0698
    12c8:	90 91 99 06 	lds	r25, 0x0699
    12cc:	21 a5       	ldd	r18, Z+41	; 0x29
    12ce:	32 a5       	ldd	r19, Z+42	; 0x2a
    12d0:	43 a5       	ldd	r20, Z+43	; 0x2b
    12d2:	54 a5       	ldd	r21, Z+44	; 0x2c
    12d4:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    12d8:	08 95       	ret

000012da <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    12da:	80 91 16 05 	lds	r24, 0x0516
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	08 95       	ret

000012e2 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    12e2:	20 91 02 05 	lds	r18, 0x0502
    12e6:	30 91 03 05 	lds	r19, 0x0503
    12ea:	80 91 04 05 	lds	r24, 0x0504
    12ee:	90 91 05 05 	lds	r25, 0x0505
    12f2:	28 17       	cp	r18, r24
    12f4:	39 07       	cpc	r19, r25
    12f6:	69 f0       	breq	.+26     	; 0x1312 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    12f8:	80 91 04 05 	lds	r24, 0x0504
    12fc:	90 91 05 05 	lds	r25, 0x0505
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	6a e0       	ldi	r22, 0x0A	; 10
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	0e 94 22 21 	call	0x4244	; 0x4244 <__divmodhi4>
    130a:	90 93 05 05 	sts	0x0505, r25
    130e:	80 93 04 05 	sts	0x0504, r24
    1312:	08 95       	ret

00001314 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1314:	20 91 02 05 	lds	r18, 0x0502
    1318:	30 91 03 05 	lds	r19, 0x0503
    131c:	80 91 04 05 	lds	r24, 0x0504
    1320:	90 91 05 05 	lds	r25, 0x0505
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	19 f4       	brne	.+6      	; 0x1330 <plan_get_current_block+0x1c>
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	0f c0       	rjmp	.+30     	; 0x134e <plan_get_current_block+0x3a>
  return(&block_buffer[block_buffer_tail]);
    1330:	20 91 04 05 	lds	r18, 0x0504
    1334:	30 91 05 05 	lds	r19, 0x0505
    1338:	89 e4       	ldi	r24, 0x49	; 73
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	28 9f       	mul	r18, r24
    133e:	a0 01       	movw	r20, r0
    1340:	29 9f       	mul	r18, r25
    1342:	50 0d       	add	r21, r0
    1344:	38 9f       	mul	r19, r24
    1346:	50 0d       	add	r21, r0
    1348:	11 24       	eor	r1, r1
    134a:	48 5d       	subi	r20, 0xD8	; 216
    134c:	5d 4f       	sbci	r21, 0xFD	; 253
}
    134e:	ca 01       	movw	r24, r20
    1350:	08 95       	ret

00001352 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1352:	4f 92       	push	r4
    1354:	5f 92       	push	r5
    1356:	6f 92       	push	r6
    1358:	7f 92       	push	r7
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	ec 01       	movw	r28, r24
    1374:	4b 01       	movw	r8, r22
  if(!current) { return; }
    1376:	61 15       	cp	r22, r1
    1378:	71 05       	cpc	r23, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <planner_forward_pass_kernel+0x2c>
    137c:	5e c0       	rjmp	.+188    	; 0x143a <planner_forward_pass_kernel+0xe8>
  if(previous) {
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	09 f4       	brne	.+2      	; 0x1384 <planner_forward_pass_kernel+0x32>
    1382:	5b c0       	rjmp	.+182    	; 0x143a <planner_forward_pass_kernel+0xe8>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1384:	e9 a8       	ldd	r14, Y+49	; 0x31
    1386:	fa a8       	ldd	r15, Y+50	; 0x32
    1388:	0b a9       	ldd	r16, Y+51	; 0x33
    138a:	1c a9       	ldd	r17, Y+52	; 0x34
    138c:	fb 01       	movw	r30, r22
    138e:	41 a8       	ldd	r4, Z+49	; 0x31
    1390:	52 a8       	ldd	r5, Z+50	; 0x32
    1392:	63 a8       	ldd	r6, Z+51	; 0x33
    1394:	74 a8       	ldd	r7, Z+52	; 0x34
    1396:	c8 01       	movw	r24, r16
    1398:	b7 01       	movw	r22, r14
    139a:	a3 01       	movw	r20, r6
    139c:	92 01       	movw	r18, r4
    139e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__cmpsf2>
    13a2:	88 23       	and	r24, r24
    13a4:	0c f0       	brlt	.+2      	; 0x13a8 <planner_forward_pass_kernel+0x56>
    13a6:	49 c0       	rjmp	.+146    	; 0x143a <planner_forward_pass_kernel+0xe8>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    13a8:	f4 01       	movw	r30, r8
    13aa:	a1 a4       	ldd	r10, Z+41	; 0x29
    13ac:	b2 a4       	ldd	r11, Z+42	; 0x2a
    13ae:	c3 a4       	ldd	r12, Z+43	; 0x2b
    13b0:	d4 a4       	ldd	r13, Z+44	; 0x2c
    13b2:	c6 01       	movw	r24, r12
    13b4:	b5 01       	movw	r22, r10
    13b6:	a8 01       	movw	r20, r16
    13b8:	97 01       	movw	r18, r14
    13ba:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    13be:	9b 01       	movw	r18, r22
    13c0:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    13c2:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    13c6:	7b 01       	movw	r14, r22
    13c8:	8c 01       	movw	r16, r24
    13ca:	20 91 92 06 	lds	r18, 0x0692
    13ce:	30 91 93 06 	lds	r19, 0x0693
    13d2:	40 91 94 06 	lds	r20, 0x0694
    13d6:	50 91 95 06 	lds	r21, 0x0695
    13da:	50 58       	subi	r21, 0x80	; 128
    13dc:	ca 01       	movw	r24, r20
    13de:	b9 01       	movw	r22, r18
    13e0:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e7       	ldi	r20, 0x70	; 112
    13ea:	52 e4       	ldi	r21, 0x42	; 66
    13ec:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e7       	ldi	r20, 0x70	; 112
    13f6:	52 ec       	ldi	r21, 0xC2	; 194
    13f8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    13fc:	2d a5       	ldd	r18, Y+45	; 0x2d
    13fe:	3e a5       	ldd	r19, Y+46	; 0x2e
    1400:	4f a5       	ldd	r20, Y+47	; 0x2f
    1402:	58 a9       	ldd	r21, Y+48	; 0x30
    1404:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	c8 01       	movw	r24, r16
    140e:	b7 01       	movw	r22, r14
    1410:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    1414:	0e 94 b4 20 	call	0x4168	; 0x4168 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1418:	a6 01       	movw	r20, r12
    141a:	95 01       	movw	r18, r10
    141c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    1420:	7b 01       	movw	r14, r22
    1422:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1424:	a3 01       	movw	r20, r6
    1426:	92 01       	movw	r18, r4
    1428:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__cmpsf2>
    142c:	88 23       	and	r24, r24
    142e:	2c f4       	brge	.+10     	; 0x143a <planner_forward_pass_kernel+0xe8>
        current->entry_factor = max_entry_factor;
    1430:	f4 01       	movw	r30, r8
    1432:	e1 aa       	std	Z+49, r14	; 0x31
    1434:	f2 aa       	std	Z+50, r15	; 0x32
    1436:	03 ab       	std	Z+51, r16	; 0x33
    1438:	14 ab       	std	Z+52, r17	; 0x34
      }
    }
  }
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	bf 90       	pop	r11
    144c:	af 90       	pop	r10
    144e:	9f 90       	pop	r9
    1450:	8f 90       	pop	r8
    1452:	7f 90       	pop	r7
    1454:	6f 90       	pop	r6
    1456:	5f 90       	pop	r5
    1458:	4f 90       	pop	r4
    145a:	08 95       	ret

0000145c <planner_forward_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1468:	80 91 04 05 	lds	r24, 0x0504
    146c:	90 91 05 05 	lds	r25, 0x0505
    1470:	48 2f       	mov	r20, r24
    1472:	c0 e0       	ldi	r28, 0x00	; 0
    1474:	d0 e0       	ldi	r29, 0x00	; 0
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	14 c0       	rjmp	.+40     	; 0x14a4 <planner_forward_pass+0x48>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    147c:	89 e4       	ldi	r24, 0x49	; 73
    147e:	48 02       	muls	r20, r24
    1480:	80 01       	movw	r16, r0
    1482:	11 24       	eor	r1, r1
    1484:	08 5d       	subi	r16, 0xD8	; 216
    1486:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    1488:	c9 01       	movw	r24, r18
    148a:	be 01       	movw	r22, r28
    148c:	a8 01       	movw	r20, r16
    148e:	0e 94 a9 09 	call	0x1352	; 0x1352 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1492:	c7 01       	movw	r24, r14
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	6a e0       	ldi	r22, 0x0A	; 10
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	0e 94 22 21 	call	0x4244	; 0x4244 <__divmodhi4>
    149e:	48 2f       	mov	r20, r24
    14a0:	9e 01       	movw	r18, r28
    14a2:	e8 01       	movw	r28, r16
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    14a4:	e4 2e       	mov	r14, r20
    14a6:	ff 24       	eor	r15, r15
    14a8:	e7 fc       	sbrc	r14, 7
    14aa:	f0 94       	com	r15
    14ac:	80 91 02 05 	lds	r24, 0x0502
    14b0:	90 91 03 05 	lds	r25, 0x0503
    14b4:	e8 16       	cp	r14, r24
    14b6:	f9 06       	cpc	r15, r25
    14b8:	09 f7       	brne	.-62     	; 0x147c <planner_forward_pass+0x20>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    14ba:	c9 01       	movw	r24, r18
    14bc:	be 01       	movw	r22, r28
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	0e 94 a9 09 	call	0x1352	; 0x1352 <planner_forward_pass_kernel>
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	08 95       	ret

000014d4 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    14d4:	2f 92       	push	r2
    14d6:	3f 92       	push	r3
    14d8:	4f 92       	push	r4
    14da:	5f 92       	push	r5
    14dc:	6f 92       	push	r6
    14de:	7f 92       	push	r7
    14e0:	8f 92       	push	r8
    14e2:	9f 92       	push	r9
    14e4:	af 92       	push	r10
    14e6:	bf 92       	push	r11
    14e8:	cf 92       	push	r12
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	3b 01       	movw	r6, r22
    14f6:	4c 01       	movw	r8, r24
    14f8:	19 01       	movw	r2, r18
    14fa:	2a 01       	movw	r4, r20
	st_synchronize();
    14fc:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1500:	c4 01       	movw	r24, r8
    1502:	b3 01       	movw	r22, r6
    1504:	20 91 74 06 	lds	r18, 0x0674
    1508:	30 91 75 06 	lds	r19, 0x0675
    150c:	40 91 76 06 	lds	r20, 0x0676
    1510:	50 91 77 06 	lds	r21, 0x0677
    1514:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1518:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    151c:	26 e0       	ldi	r18, 0x06	; 6
    151e:	82 2e       	mov	r8, r18
    1520:	25 e0       	ldi	r18, 0x05	; 5
    1522:	92 2e       	mov	r9, r18
    1524:	60 93 06 05 	sts	0x0506, r22
    1528:	70 93 07 05 	sts	0x0507, r23
    152c:	80 93 08 05 	sts	0x0508, r24
    1530:	90 93 09 05 	sts	0x0509, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1534:	c2 01       	movw	r24, r4
    1536:	b1 01       	movw	r22, r2
    1538:	20 91 78 06 	lds	r18, 0x0678
    153c:	30 91 79 06 	lds	r19, 0x0679
    1540:	40 91 7a 06 	lds	r20, 0x067A
    1544:	50 91 7b 06 	lds	r21, 0x067B
    1548:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    154c:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    1550:	f4 01       	movw	r30, r8
    1552:	34 96       	adiw	r30, 0x04	; 4
    1554:	60 93 0a 05 	sts	0x050A, r22
    1558:	71 83       	std	Z+1, r23	; 0x01
    155a:	82 83       	std	Z+2, r24	; 0x02
    155c:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    155e:	c8 01       	movw	r24, r16
    1560:	b7 01       	movw	r22, r14
    1562:	20 91 7c 06 	lds	r18, 0x067C
    1566:	30 91 7d 06 	lds	r19, 0x067D
    156a:	40 91 7e 06 	lds	r20, 0x067E
    156e:	50 91 7f 06 	lds	r21, 0x067F
    1572:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1576:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    157a:	f4 01       	movw	r30, r8
    157c:	38 96       	adiw	r30, 0x08	; 8
    157e:	60 93 0e 05 	sts	0x050E, r22
    1582:	71 83       	std	Z+1, r23	; 0x01
    1584:	82 83       	std	Z+2, r24	; 0x02
    1586:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1588:	c6 01       	movw	r24, r12
    158a:	b5 01       	movw	r22, r10
    158c:	20 91 80 06 	lds	r18, 0x0680
    1590:	30 91 81 06 	lds	r19, 0x0681
    1594:	40 91 82 06 	lds	r20, 0x0682
    1598:	50 91 83 06 	lds	r21, 0x0683
    159c:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    15a0:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    15a4:	2c e0       	ldi	r18, 0x0C	; 12
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	82 0e       	add	r8, r18
    15aa:	93 1e       	adc	r9, r19
    15ac:	60 93 12 05 	sts	0x0512, r22
    15b0:	f4 01       	movw	r30, r8
    15b2:	71 83       	std	Z+1, r23	; 0x01
    15b4:	82 83       	std	Z+2, r24	; 0x02
    15b6:	93 83       	std	Z+3, r25	; 0x03
}
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	7f 90       	pop	r7
    15ce:	6f 90       	pop	r6
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	3f 90       	pop	r3
    15d6:	2f 90       	pop	r2
    15d8:	08 95       	ret

000015da <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	80 91 16 05 	lds	r24, 0x0516
    15e6:	81 11       	cpse	r24, r1
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	20 97       	sbiw	r28, 0x00	; 0
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <plan_set_acceleration_manager_enabled+0x18>
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	98 17       	cp	r25, r24
    15f4:	49 f0       	breq	.+18     	; 0x1608 <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    15f6:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    15fa:	10 92 16 05 	sts	0x0516, r1
    15fe:	cd 2b       	or	r28, r29
    1600:	19 f0       	breq	.+6      	; 0x1608 <plan_set_acceleration_manager_enabled+0x2e>
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 16 05 	sts	0x0516, r24
  }
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	08 95       	ret

0000160e <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    160e:	10 92 03 05 	sts	0x0503, r1
    1612:	10 92 02 05 	sts	0x0502, r1
  block_buffer_tail = 0;
    1616:	10 92 05 05 	sts	0x0505, r1
    161a:	10 92 04 05 	sts	0x0504, r1
  plan_set_acceleration_manager_enabled(TRUE);
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 ed 0a 	call	0x15da	; 0x15da <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1626:	80 e1       	ldi	r24, 0x10	; 16
    1628:	e6 e0       	ldi	r30, 0x06	; 6
    162a:	f5 e0       	ldi	r31, 0x05	; 5
    162c:	df 01       	movw	r26, r30
    162e:	1d 92       	st	X+, r1
    1630:	8a 95       	dec	r24
    1632:	e9 f7       	brne	.-6      	; 0x162e <plan_init+0x20>
}
    1634:	08 95       	ret

00001636 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1636:	2f 92       	push	r2
    1638:	3f 92       	push	r3
    163a:	4f 92       	push	r4
    163c:	5f 92       	push	r5
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <planner_reverse_pass_kernel+0x26>
    165c:	00 d0       	rcall	.+0      	; 0x165e <planner_reverse_pass_kernel+0x28>
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	8c 01       	movw	r16, r24
    1664:	7e 83       	std	Y+6, r23	; 0x06
    1666:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1668:	67 2b       	or	r22, r23
    166a:	09 f4       	brne	.+2      	; 0x166e <planner_reverse_pass_kernel+0x38>
    166c:	07 c1       	rjmp	.+526    	; 0x187c <planner_reverse_pass_kernel+0x246>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    166e:	41 15       	cp	r20, r1
    1670:	51 05       	cpc	r21, r1
    1672:	61 f0       	breq	.+24     	; 0x168c <planner_reverse_pass_kernel+0x56>
    exit_factor = next->entry_factor;
    1674:	da 01       	movw	r26, r20
    1676:	d1 96       	adiw	r26, 0x31	; 49
    1678:	8d 91       	ld	r24, X+
    167a:	9d 91       	ld	r25, X+
    167c:	0d 90       	ld	r0, X+
    167e:	bc 91       	ld	r27, X
    1680:	a0 2d       	mov	r26, r0
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	ab 83       	std	Y+3, r26	; 0x03
    1688:	bc 83       	std	Y+4, r27	; 0x04
    168a:	08 c0       	rjmp	.+16     	; 0x169c <planner_reverse_pass_kernel+0x66>
  } else {
    exit_factor = factor_for_safe_speed(current);
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	0e 94 5d 09 	call	0x12ba	; 0x12ba <factor_for_safe_speed>
    1694:	69 83       	std	Y+1, r22	; 0x01
    1696:	7a 83       	std	Y+2, r23	; 0x02
    1698:	8b 83       	std	Y+3, r24	; 0x03
    169a:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    169c:	01 15       	cp	r16, r1
    169e:	11 05       	cpc	r17, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <planner_reverse_pass_kernel+0x6e>
    16a2:	e0 c0       	rjmp	.+448    	; 0x1864 <planner_reverse_pass_kernel+0x22e>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    16a4:	f8 01       	movw	r30, r16
    16a6:	61 8d       	ldd	r22, Z+25	; 0x19
    16a8:	72 8d       	ldd	r23, Z+26	; 0x1a
    16aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    16ac:	94 8d       	ldd	r25, Z+28	; 0x1c
    16ae:	ad 81       	ldd	r26, Y+5	; 0x05
    16b0:	be 81       	ldd	r27, Y+6	; 0x06
    16b2:	59 96       	adiw	r26, 0x19	; 25
    16b4:	2d 91       	ld	r18, X+
    16b6:	3d 91       	ld	r19, X+
    16b8:	4d 91       	ld	r20, X+
    16ba:	5c 91       	ld	r21, X
    16bc:	5c 97       	sbiw	r26, 0x1c	; 28
    16be:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__subsf3>
    16c2:	9b 01       	movw	r18, r22
    16c4:	ac 01       	movw	r20, r24
    16c6:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    16ca:	1b 01       	movw	r2, r22
    16cc:	2c 01       	movw	r4, r24
    16ce:	f8 01       	movw	r30, r16
    16d0:	65 8d       	ldd	r22, Z+29	; 0x1d
    16d2:	76 8d       	ldd	r23, Z+30	; 0x1e
    16d4:	87 8d       	ldd	r24, Z+31	; 0x1f
    16d6:	90 a1       	ldd	r25, Z+32	; 0x20
    16d8:	ad 81       	ldd	r26, Y+5	; 0x05
    16da:	be 81       	ldd	r27, Y+6	; 0x06
    16dc:	5d 96       	adiw	r26, 0x1d	; 29
    16de:	2d 91       	ld	r18, X+
    16e0:	3d 91       	ld	r19, X+
    16e2:	4d 91       	ld	r20, X+
    16e4:	5c 91       	ld	r21, X
    16e6:	90 97       	sbiw	r26, 0x20	; 32
    16e8:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__subsf3>
    16ec:	9b 01       	movw	r18, r22
    16ee:	ac 01       	movw	r20, r24
    16f0:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    16f4:	3b 01       	movw	r6, r22
    16f6:	4c 01       	movw	r8, r24
    16f8:	f8 01       	movw	r30, r16
    16fa:	61 a1       	ldd	r22, Z+33	; 0x21
    16fc:	72 a1       	ldd	r23, Z+34	; 0x22
    16fe:	83 a1       	ldd	r24, Z+35	; 0x23
    1700:	94 a1       	ldd	r25, Z+36	; 0x24
    1702:	ad 81       	ldd	r26, Y+5	; 0x05
    1704:	be 81       	ldd	r27, Y+6	; 0x06
    1706:	91 96       	adiw	r26, 0x21	; 33
    1708:	2d 91       	ld	r18, X+
    170a:	3d 91       	ld	r19, X+
    170c:	4d 91       	ld	r20, X+
    170e:	5c 91       	ld	r21, X
    1710:	94 97       	sbiw	r26, 0x24	; 36
    1712:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__subsf3>
    1716:	9b 01       	movw	r18, r22
    1718:	ac 01       	movw	r20, r24
    171a:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    171e:	5b 01       	movw	r10, r22
    1720:	6c 01       	movw	r12, r24
    1722:	f8 01       	movw	r30, r16
    1724:	65 a1       	ldd	r22, Z+37	; 0x25
    1726:	76 a1       	ldd	r23, Z+38	; 0x26
    1728:	87 a1       	ldd	r24, Z+39	; 0x27
    172a:	90 a5       	ldd	r25, Z+40	; 0x28
    172c:	ad 81       	ldd	r26, Y+5	; 0x05
    172e:	be 81       	ldd	r27, Y+6	; 0x06
    1730:	95 96       	adiw	r26, 0x25	; 37
    1732:	2d 91       	ld	r18, X+
    1734:	3d 91       	ld	r19, X+
    1736:	4d 91       	ld	r20, X+
    1738:	5c 91       	ld	r21, X
    173a:	98 97       	sbiw	r26, 0x28	; 40
    173c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__subsf3>
    1740:	9b 01       	movw	r18, r22
    1742:	ac 01       	movw	r20, r24
    1744:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1748:	7b 01       	movw	r14, r22
    174a:	8c 01       	movw	r16, r24
    174c:	c2 01       	movw	r24, r4
    174e:	b1 01       	movw	r22, r2
    1750:	a4 01       	movw	r20, r8
    1752:	93 01       	movw	r18, r6
    1754:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    1758:	a6 01       	movw	r20, r12
    175a:	95 01       	movw	r18, r10
    175c:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    1760:	a8 01       	movw	r20, r16
    1762:	97 01       	movw	r18, r14
    1764:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    1768:	0e 94 b4 20 	call	0x4168	; 0x4168 <sqrt>
    176c:	5b 01       	movw	r10, r22
    176e:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1770:	e0 90 96 06 	lds	r14, 0x0696
    1774:	f0 90 97 06 	lds	r15, 0x0697
    1778:	00 91 98 06 	lds	r16, 0x0698
    177c:	10 91 99 06 	lds	r17, 0x0699
    1780:	a8 01       	movw	r20, r16
    1782:	97 01       	movw	r18, r14
    1784:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__gesf2>
    1788:	18 16       	cp	r1, r24
    178a:	5c f0       	brlt	.+22     	; 0x17a2 <planner_reverse_pass_kernel+0x16c>
    178c:	0f 2e       	mov	r0, r31
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	6f 2e       	mov	r6, r31
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	7f 2e       	mov	r7, r31
    1796:	f0 e8       	ldi	r31, 0x80	; 128
    1798:	8f 2e       	mov	r8, r31
    179a:	ff e3       	ldi	r31, 0x3F	; 63
    179c:	9f 2e       	mov	r9, r31
    179e:	f0 2d       	mov	r31, r0
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <planner_reverse_pass_kernel+0x17c>
      entry_factor = (settings.max_jerk/jerk);
    17a2:	c8 01       	movw	r24, r16
    17a4:	b7 01       	movw	r22, r14
    17a6:	a6 01       	movw	r20, r12
    17a8:	95 01       	movw	r18, r10
    17aa:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    17ae:	3b 01       	movw	r6, r22
    17b0:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    17b2:	c4 01       	movw	r24, r8
    17b4:	b3 01       	movw	r22, r6
    17b6:	29 81       	ldd	r18, Y+1	; 0x01
    17b8:	3a 81       	ldd	r19, Y+2	; 0x02
    17ba:	4b 81       	ldd	r20, Y+3	; 0x03
    17bc:	5c 81       	ldd	r21, Y+4	; 0x04
    17be:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__gesf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	0c f0       	brlt	.+2      	; 0x17c8 <planner_reverse_pass_kernel+0x192>
    17c6:	54 c0       	rjmp	.+168    	; 0x1870 <planner_reverse_pass_kernel+0x23a>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    17c8:	ed 81       	ldd	r30, Y+5	; 0x05
    17ca:	fe 81       	ldd	r31, Y+6	; 0x06
    17cc:	a1 a4       	ldd	r10, Z+41	; 0x29
    17ce:	b2 a4       	ldd	r11, Z+42	; 0x2a
    17d0:	c3 a4       	ldd	r12, Z+43	; 0x2b
    17d2:	d4 a4       	ldd	r13, Z+44	; 0x2c
    17d4:	c6 01       	movw	r24, r12
    17d6:	b5 01       	movw	r22, r10
    17d8:	29 81       	ldd	r18, Y+1	; 0x01
    17da:	3a 81       	ldd	r19, Y+2	; 0x02
    17dc:	4b 81       	ldd	r20, Y+3	; 0x03
    17de:	5c 81       	ldd	r21, Y+4	; 0x04
    17e0:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    17e4:	9b 01       	movw	r18, r22
    17e6:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    17e8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    17ec:	7b 01       	movw	r14, r22
    17ee:	8c 01       	movw	r16, r24
    17f0:	20 91 92 06 	lds	r18, 0x0692
    17f4:	30 91 93 06 	lds	r19, 0x0693
    17f8:	40 91 94 06 	lds	r20, 0x0694
    17fc:	50 91 95 06 	lds	r21, 0x0695
    1800:	50 58       	subi	r21, 0x80	; 128
    1802:	ca 01       	movw	r24, r20
    1804:	b9 01       	movw	r22, r18
    1806:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e7       	ldi	r20, 0x70	; 112
    1810:	52 e4       	ldi	r21, 0x42	; 66
    1812:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e7       	ldi	r20, 0x70	; 112
    181c:	52 ec       	ldi	r21, 0xC2	; 194
    181e:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1822:	ad 81       	ldd	r26, Y+5	; 0x05
    1824:	be 81       	ldd	r27, Y+6	; 0x06
    1826:	9d 96       	adiw	r26, 0x2d	; 45
    1828:	2d 91       	ld	r18, X+
    182a:	3d 91       	ld	r19, X+
    182c:	4d 91       	ld	r20, X+
    182e:	5c 91       	ld	r21, X
    1830:	d0 97       	sbiw	r26, 0x30	; 48
    1832:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1836:	9b 01       	movw	r18, r22
    1838:	ac 01       	movw	r20, r24
    183a:	c8 01       	movw	r24, r16
    183c:	b7 01       	movw	r22, r14
    183e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    1842:	0e 94 b4 20 	call	0x4168	; 0x4168 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1846:	a6 01       	movw	r20, r12
    1848:	95 01       	movw	r18, r10
    184a:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    184e:	7b 01       	movw	r14, r22
    1850:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1852:	a4 01       	movw	r20, r8
    1854:	93 01       	movw	r18, r6
    1856:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__cmpsf2>
    185a:	88 23       	and	r24, r24
    185c:	4c f4       	brge	.+18     	; 0x1870 <planner_reverse_pass_kernel+0x23a>
    185e:	37 01       	movw	r6, r14
    1860:	48 01       	movw	r8, r16
    1862:	06 c0       	rjmp	.+12     	; 0x1870 <planner_reverse_pass_kernel+0x23a>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	0e 94 5d 09 	call	0x12ba	; 0x12ba <factor_for_safe_speed>
    186c:	3b 01       	movw	r6, r22
    186e:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1870:	ed 81       	ldd	r30, Y+5	; 0x05
    1872:	fe 81       	ldd	r31, Y+6	; 0x06
    1874:	61 aa       	std	Z+49, r6	; 0x31
    1876:	72 aa       	std	Z+50, r7	; 0x32
    1878:	83 aa       	std	Z+51, r8	; 0x33
    187a:	94 aa       	std	Z+52, r9	; 0x34
}
    187c:	26 96       	adiw	r28, 0x06	; 6
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	9f 90       	pop	r9
    189e:	8f 90       	pop	r8
    18a0:	7f 90       	pop	r7
    18a2:	6f 90       	pop	r6
    18a4:	5f 90       	pop	r5
    18a6:	4f 90       	pop	r4
    18a8:	3f 90       	pop	r3
    18aa:	2f 90       	pop	r2
    18ac:	08 95       	ret

000018ae <planner_reverse_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    18b8:	80 91 02 05 	lds	r24, 0x0502
    18bc:	90 91 03 05 	lds	r25, 0x0503
    18c0:	f8 2e       	mov	r15, r24
    18c2:	c0 e0       	ldi	r28, 0x00	; 0
    18c4:	d0 e0       	ldi	r29, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	12 c0       	rjmp	.+36     	; 0x18f0 <planner_reverse_pass+0x42>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    18cc:	fa 94       	dec	r15
    if(block_index < 0) {
    18ce:	f7 fe       	sbrs	r15, 7
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <planner_reverse_pass+0x28>
    18d2:	39 e0       	ldi	r19, 0x09	; 9
    18d4:	f3 2e       	mov	r15, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    18d6:	8f 2d       	mov	r24, r15
    18d8:	99 e4       	ldi	r25, 0x49	; 73
    18da:	89 02       	muls	r24, r25
    18dc:	80 01       	movw	r16, r0
    18de:	11 24       	eor	r1, r1
    18e0:	08 5d       	subi	r16, 0xD8	; 216
    18e2:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    18e4:	c8 01       	movw	r24, r16
    18e6:	be 01       	movw	r22, r28
    18e8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <planner_reverse_pass_kernel>
    18ec:	ae 01       	movw	r20, r28
    18ee:	e8 01       	movw	r28, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    18f0:	20 91 04 05 	lds	r18, 0x0504
    18f4:	30 91 05 05 	lds	r19, 0x0505
    18f8:	8f 2d       	mov	r24, r15
    18fa:	99 27       	eor	r25, r25
    18fc:	87 fd       	sbrc	r24, 7
    18fe:	90 95       	com	r25
    1900:	82 17       	cp	r24, r18
    1902:	93 07       	cpc	r25, r19
    1904:	19 f7       	brne	.-58     	; 0x18cc <planner_reverse_pass+0x1e>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	be 01       	movw	r22, r28
    190c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <planner_reverse_pass_kernel>
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	08 95       	ret

0000191c <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    191c:	2f 92       	push	r2
    191e:	3f 92       	push	r3
    1920:	4f 92       	push	r4
    1922:	5f 92       	push	r5
    1924:	6f 92       	push	r6
    1926:	7f 92       	push	r7
    1928:	8f 92       	push	r8
    192a:	9f 92       	push	r9
    192c:	af 92       	push	r10
    192e:	bf 92       	push	r11
    1930:	cf 92       	push	r12
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	62 97       	sbiw	r28, 0x12	; 18
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	9a 8b       	std	Y+18, r25	; 0x12
    1952:	89 8b       	std	Y+17, r24	; 0x11
    1954:	6a 01       	movw	r12, r20
    1956:	7b 01       	movw	r14, r22
    1958:	18 01       	movw	r2, r16
    195a:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    195c:	fc 01       	movw	r30, r24
    195e:	65 89       	ldd	r22, Z+21	; 0x15
    1960:	76 89       	ldd	r23, Z+22	; 0x16
    1962:	87 89       	ldd	r24, Z+23	; 0x17
    1964:	90 8d       	ldd	r25, Z+24	; 0x18
    1966:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__floatunsisf>
    196a:	3b 01       	movw	r6, r22
    196c:	4c 01       	movw	r8, r24
    196e:	a7 01       	movw	r20, r14
    1970:	96 01       	movw	r18, r12
    1972:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1976:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <ceil>
    197a:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__fixunssfsi>
    197e:	7b 01       	movw	r14, r22
    1980:	8c 01       	movw	r16, r24
    1982:	e9 89       	ldd	r30, Y+17	; 0x11
    1984:	fa 89       	ldd	r31, Y+18	; 0x12
    1986:	65 ab       	std	Z+53, r22	; 0x35
    1988:	76 ab       	std	Z+54, r23	; 0x36
    198a:	87 ab       	std	Z+55, r24	; 0x37
    198c:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    198e:	c4 01       	movw	r24, r8
    1990:	b3 01       	movw	r22, r6
    1992:	a2 01       	movw	r20, r4
    1994:	91 01       	movw	r18, r2
    1996:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    199a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <ceil>
    199e:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__fixunssfsi>
    19a2:	1b 01       	movw	r2, r22
    19a4:	2c 01       	movw	r4, r24
    19a6:	e9 89       	ldd	r30, Y+17	; 0x11
    19a8:	fa 89       	ldd	r31, Y+18	; 0x12
    19aa:	61 af       	std	Z+57, r22	; 0x39
    19ac:	72 af       	std	Z+58, r23	; 0x3a
    19ae:	83 af       	std	Z+59, r24	; 0x3b
    19b0:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    19b2:	fd 96       	adiw	r30, 0x3d	; 61
    19b4:	60 81       	ld	r22, Z
    19b6:	71 81       	ldd	r23, Z+1	; 0x01
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	fd 97       	sbiw	r30, 0x3d	; 61
    19be:	fa 8b       	std	Y+18, r31	; 0x12
    19c0:	e9 8b       	std	Y+17, r30	; 0x11
    19c2:	28 e2       	ldi	r18, 0x28	; 40
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	0e 94 03 21 	call	0x4206	; 0x4206 <__mulsi3>
    19ce:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e7       	ldi	r20, 0x70	; 112
    19d8:	52 e4       	ldi	r21, 0x42	; 66
    19da:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    19de:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
    19e2:	5b 01       	movw	r10, r22
    19e4:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    19e6:	c8 01       	movw	r24, r16
    19e8:	b7 01       	movw	r22, r14
    19ea:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__floatunsisf>
    19ee:	7b 01       	movw	r14, r22
    19f0:	8c 01       	movw	r16, r24
    19f2:	c6 01       	movw	r24, r12
    19f4:	b5 01       	movw	r22, r10
    19f6:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    19fa:	6d 83       	std	Y+5, r22	; 0x05
    19fc:	7e 83       	std	Y+6, r23	; 0x06
    19fe:	8f 83       	std	Y+7, r24	; 0x07
    1a00:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1a02:	c4 01       	movw	r24, r8
    1a04:	b3 01       	movw	r22, r6
    1a06:	a4 01       	movw	r20, r8
    1a08:	93 01       	movw	r18, r6
    1a0a:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1a0e:	3b 01       	movw	r6, r22
    1a10:	4c 01       	movw	r8, r24
    1a12:	c8 01       	movw	r24, r16
    1a14:	b7 01       	movw	r22, r14
    1a16:	a8 01       	movw	r20, r16
    1a18:	97 01       	movw	r18, r14
    1a1a:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1a1e:	69 87       	std	Y+9, r22	; 0x09
    1a20:	7a 87       	std	Y+10, r23	; 0x0a
    1a22:	8b 87       	std	Y+11, r24	; 0x0b
    1a24:	9c 87       	std	Y+12, r25	; 0x0c
    1a26:	6d 81       	ldd	r22, Y+5	; 0x05
    1a28:	7e 81       	ldd	r23, Y+6	; 0x06
    1a2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a2c:	98 85       	ldd	r25, Y+8	; 0x08
    1a2e:	9b 01       	movw	r18, r22
    1a30:	ac 01       	movw	r20, r24
    1a32:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    1a36:	6d 87       	std	Y+13, r22	; 0x0d
    1a38:	7e 87       	std	Y+14, r23	; 0x0e
    1a3a:	8f 87       	std	Y+15, r24	; 0x0f
    1a3c:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1a3e:	c4 01       	movw	r24, r8
    1a40:	b3 01       	movw	r22, r6
    1a42:	29 85       	ldd	r18, Y+9	; 0x09
    1a44:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a46:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a48:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a4a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__subsf3>
    1a4e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a50:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a52:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a54:	58 89       	ldd	r21, Y+16	; 0x10
    1a56:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    1a5a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <ceil>
    1a5e:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
    1a62:	69 83       	std	Y+1, r22	; 0x01
    1a64:	7a 83       	std	Y+2, r23	; 0x02
    1a66:	8b 83       	std	Y+3, r24	; 0x03
    1a68:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1a6a:	c2 01       	movw	r24, r4
    1a6c:	b1 01       	movw	r22, r2
    1a6e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__floatunsisf>
    1a72:	9b 01       	movw	r18, r22
    1a74:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1a76:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1a7a:	1b 01       	movw	r2, r22
    1a7c:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1a7e:	a4 01       	movw	r20, r8
    1a80:	93 01       	movw	r18, r6
    1a82:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__subsf3>
    1a86:	7b 01       	movw	r14, r22
    1a88:	8c 01       	movw	r16, r24
    1a8a:	d0 94       	com	r13
    1a8c:	c0 94       	com	r12
    1a8e:	b0 94       	com	r11
    1a90:	a0 94       	com	r10
    1a92:	a1 1c       	adc	r10, r1
    1a94:	b1 1c       	adc	r11, r1
    1a96:	c1 1c       	adc	r12, r1
    1a98:	d1 1c       	adc	r13, r1
    1a9a:	c6 01       	movw	r24, r12
    1a9c:	b5 01       	movw	r22, r10
    1a9e:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    1aa2:	9b 01       	movw	r18, r22
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    1aaa:	9b 01       	movw	r18, r22
    1aac:	ac 01       	movw	r20, r24
    1aae:	c8 01       	movw	r24, r16
    1ab0:	b7 01       	movw	r22, r14
    1ab2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    1ab6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1aba:	e9 89       	ldd	r30, Y+17	; 0x11
    1abc:	fa 89       	ldd	r31, Y+18	; 0x12
    1abe:	a1 88       	ldd	r10, Z+17	; 0x11
    1ac0:	b2 88       	ldd	r11, Z+18	; 0x12
    1ac2:	c3 88       	ldd	r12, Z+19	; 0x13
    1ac4:	d4 88       	ldd	r13, Z+20	; 0x14
    1ac6:	86 01       	movw	r16, r12
    1ac8:	75 01       	movw	r14, r10
    1aca:	29 81       	ldd	r18, Y+1	; 0x01
    1acc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ace:	4b 81       	ldd	r20, Y+3	; 0x03
    1ad0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ad2:	e2 1a       	sub	r14, r18
    1ad4:	f3 0a       	sbc	r15, r19
    1ad6:	04 0b       	sbc	r16, r20
    1ad8:	15 0b       	sbc	r17, r21
    1ada:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
    1ade:	a8 01       	movw	r20, r16
    1ae0:	97 01       	movw	r18, r14
    1ae2:	26 1b       	sub	r18, r22
    1ae4:	37 0b       	sbc	r19, r23
    1ae6:	48 0b       	sbc	r20, r24
    1ae8:	59 0b       	sbc	r21, r25
    1aea:	da 01       	movw	r26, r20
    1aec:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1aee:	57 ff       	sbrs	r21, 7
    1af0:	34 c0       	rjmp	.+104    	; 0x1b5a <calculate_trapezoid_for_block+0x23e>
    accelerate_steps = ceil(
    1af2:	c6 01       	movw	r24, r12
    1af4:	b5 01       	movw	r22, r10
    1af6:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    1afa:	9b 01       	movw	r18, r22
    1afc:	ac 01       	movw	r20, r24
    1afe:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b00:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b04:	98 89       	ldd	r25, Y+16	; 0x10
    1b06:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1b0a:	29 85       	ldd	r18, Y+9	; 0x09
    1b0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b0e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b10:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b12:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__subsf3>
    1b16:	a2 01       	movw	r20, r4
    1b18:	91 01       	movw	r18, r2
    1b1a:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    1b1e:	7b 01       	movw	r14, r22
    1b20:	8c 01       	movw	r16, r24
    1b22:	6d 81       	ldd	r22, Y+5	; 0x05
    1b24:	7e 81       	ldd	r23, Y+6	; 0x06
    1b26:	8f 81       	ldd	r24, Y+7	; 0x07
    1b28:	98 85       	ldd	r25, Y+8	; 0x08
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e8       	ldi	r20, 0x80	; 128
    1b30:	50 e4       	ldi	r21, 0x40	; 64
    1b32:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	c8 01       	movw	r24, r16
    1b3c:	b7 01       	movw	r22, r14
    1b3e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    1b42:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <ceil>
    1b46:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
    1b4a:	69 83       	std	Y+1, r22	; 0x01
    1b4c:	7a 83       	std	Y+2, r23	; 0x02
    1b4e:	8b 83       	std	Y+3, r24	; 0x03
    1b50:	9c 83       	std	Y+4, r25	; 0x04
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1b5a:	49 89       	ldd	r20, Y+17	; 0x11
    1b5c:	5a 89       	ldd	r21, Y+18	; 0x12
    1b5e:	4f 5b       	subi	r20, 0xBF	; 191
    1b60:	5f 4f       	sbci	r21, 0xFF	; 255
    1b62:	fa 01       	movw	r30, r20
    1b64:	29 81       	ldd	r18, Y+1	; 0x01
    1b66:	3a 81       	ldd	r19, Y+2	; 0x02
    1b68:	4b 81       	ldd	r20, Y+3	; 0x03
    1b6a:	5c 81       	ldd	r21, Y+4	; 0x04
    1b6c:	21 93       	st	Z+, r18
    1b6e:	31 93       	st	Z+, r19
    1b70:	41 93       	st	Z+, r20
    1b72:	51 93       	st	Z+, r21
    1b74:	fa 8b       	std	Y+18, r31	; 0x12
    1b76:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1b78:	82 0f       	add	r24, r18
    1b7a:	93 1f       	adc	r25, r19
    1b7c:	a4 1f       	adc	r26, r20
    1b7e:	b5 1f       	adc	r27, r21
    1b80:	80 83       	st	Z, r24
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	a2 83       	std	Z+2, r26	; 0x02
    1b86:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1b88:	62 96       	adiw	r28, 0x12	; 18
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	df 90       	pop	r13
    1ba2:	cf 90       	pop	r12
    1ba4:	bf 90       	pop	r11
    1ba6:	af 90       	pop	r10
    1ba8:	9f 90       	pop	r9
    1baa:	8f 90       	pop	r8
    1bac:	7f 90       	pop	r7
    1bae:	6f 90       	pop	r6
    1bb0:	5f 90       	pop	r5
    1bb2:	4f 90       	pop	r4
    1bb4:	3f 90       	pop	r3
    1bb6:	2f 90       	pop	r2
    1bb8:	08 95       	ret

00001bba <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1bca:	80 91 04 05 	lds	r24, 0x0504
    1bce:	90 91 05 05 	lds	r25, 0x0505
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	c0 e0       	ldi	r28, 0x00	; 0
    1bd6:	d0 e0       	ldi	r29, 0x00	; 0
    1bd8:	1e c0       	rjmp	.+60     	; 0x1c16 <planner_recalculate_trapezoids+0x5c>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    1bda:	89 e4       	ldi	r24, 0x49	; 73
    1bdc:	28 02       	muls	r18, r24
    1bde:	70 01       	movw	r14, r0
    1be0:	11 24       	eor	r1, r1
    1be2:	e8 e2       	ldi	r30, 0x28	; 40
    1be4:	f2 e0       	ldi	r31, 0x02	; 2
    1be6:	ee 0e       	add	r14, r30
    1be8:	ff 1e       	adc	r15, r31
    if (current) {
    1bea:	20 97       	sbiw	r28, 0x00	; 0
    1bec:	61 f0       	breq	.+24     	; 0x1c06 <planner_recalculate_trapezoids+0x4c>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1bee:	49 a9       	ldd	r20, Y+49	; 0x31
    1bf0:	5a a9       	ldd	r21, Y+50	; 0x32
    1bf2:	6b a9       	ldd	r22, Y+51	; 0x33
    1bf4:	7c a9       	ldd	r23, Y+52	; 0x34
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	01 a9       	ldd	r16, Z+49	; 0x31
    1bfa:	12 a9       	ldd	r17, Z+50	; 0x32
    1bfc:	23 a9       	ldd	r18, Z+51	; 0x33
    1bfe:	34 a9       	ldd	r19, Z+52	; 0x34
    1c00:	ce 01       	movw	r24, r28
    1c02:	0e 94 8e 0c 	call	0x191c	; 0x191c <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1c06:	c6 01       	movw	r24, r12
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	6a e0       	ldi	r22, 0x0A	; 10
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	0e 94 22 21 	call	0x4244	; 0x4244 <__divmodhi4>
    1c12:	28 2f       	mov	r18, r24
    1c14:	e7 01       	movw	r28, r14
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1c16:	c2 2e       	mov	r12, r18
    1c18:	dd 24       	eor	r13, r13
    1c1a:	c7 fc       	sbrc	r12, 7
    1c1c:	d0 94       	com	r13
    1c1e:	80 91 02 05 	lds	r24, 0x0502
    1c22:	90 91 03 05 	lds	r25, 0x0503
    1c26:	c8 16       	cp	r12, r24
    1c28:	d9 06       	cpc	r13, r25
    1c2a:	b9 f6       	brne	.-82     	; 0x1bda <planner_recalculate_trapezoids+0x20>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <factor_for_safe_speed>
    1c32:	8b 01       	movw	r16, r22
    1c34:	9c 01       	movw	r18, r24
    1c36:	49 a9       	ldd	r20, Y+49	; 0x31
    1c38:	5a a9       	ldd	r21, Y+50	; 0x32
    1c3a:	6b a9       	ldd	r22, Y+51	; 0x33
    1c3c:	7c a9       	ldd	r23, Y+52	; 0x34
    1c3e:	ce 01       	movw	r24, r28
    1c40:	0e 94 8e 0c 	call	0x191c	; 0x191c <calculate_trapezoid_for_block>
}
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	df 90       	pop	r13
    1c52:	cf 90       	pop	r12
    1c54:	08 95       	ret

00001c56 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    1c56:	0e 94 57 0c 	call	0x18ae	; 0x18ae <planner_reverse_pass>
  planner_forward_pass();
    1c5a:	0e 94 2e 0a 	call	0x145c	; 0x145c <planner_forward_pass>
  planner_recalculate_trapezoids();
    1c5e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <planner_recalculate_trapezoids>
}
    1c62:	08 95       	ret

00001c64 <plan_buffer_line>:


// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
    1c64:	2f 92       	push	r2
    1c66:	3f 92       	push	r3
    1c68:	4f 92       	push	r4
    1c6a:	5f 92       	push	r5
    1c6c:	6f 92       	push	r6
    1c6e:	7f 92       	push	r7
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	e4 97       	sbiw	r28, 0x34	; 52
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	3b 01       	movw	r6, r22
    1c9a:	4c 01       	movw	r8, r24
    1c9c:	2f a3       	std	Y+39, r18	; 0x27
    1c9e:	38 a7       	std	Y+40, r19	; 0x28
    1ca0:	49 a7       	std	Y+41, r20	; 0x29
    1ca2:	5a a7       	std	Y+42, r21	; 0x2a
    1ca4:	eb a6       	std	Y+43, r14	; 0x2b
    1ca6:	fc a6       	std	Y+44, r15	; 0x2c
    1ca8:	0d a7       	std	Y+45, r16	; 0x2d
    1caa:	1e a7       	std	Y+46, r17	; 0x2e
    1cac:	af a6       	std	Y+47, r10	; 0x2f
    1cae:	b8 aa       	std	Y+48, r11	; 0x30
    1cb0:	c9 aa       	std	Y+49, r12	; 0x31
    1cb2:	da aa       	std	Y+50, r13	; 0x32
  
  
  if( gHomed == FALSE ) 
    1cb4:	80 91 4a 05 	lds	r24, 0x054A
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <plan_buffer_line+0x5a>
    1cbc:	72 c3       	rjmp	.+1764   	; 0x23a2 <__stack+0x1a3>
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1cbe:	c4 01       	movw	r24, r8
    1cc0:	b3 01       	movw	r22, r6
    1cc2:	20 91 74 06 	lds	r18, 0x0674
    1cc6:	30 91 75 06 	lds	r19, 0x0675
    1cca:	40 91 76 06 	lds	r20, 0x0676
    1cce:	50 91 77 06 	lds	r21, 0x0677
    1cd2:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1cd6:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    1cda:	7b 01       	movw	r14, r22
    1cdc:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1cde:	20 91 78 06 	lds	r18, 0x0678
    1ce2:	30 91 79 06 	lds	r19, 0x0679
    1ce6:	40 91 7a 06 	lds	r20, 0x067A
    1cea:	50 91 7b 06 	lds	r21, 0x067B
    1cee:	2b a3       	std	Y+35, r18	; 0x23
    1cf0:	3c a3       	std	Y+36, r19	; 0x24
    1cf2:	4d a3       	std	Y+37, r20	; 0x25
    1cf4:	5e a3       	std	Y+38, r21	; 0x26
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1cf6:	20 90 7c 06 	lds	r2, 0x067C
    1cfa:	30 90 7d 06 	lds	r3, 0x067D
    1cfe:	40 90 7e 06 	lds	r4, 0x067E
    1d02:	50 90 7f 06 	lds	r5, 0x067F
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1d06:	a0 90 80 06 	lds	r10, 0x0680
    1d0a:	b0 90 81 06 	lds	r11, 0x0681
    1d0e:	c0 90 82 06 	lds	r12, 0x0682
    1d12:	d0 90 83 06 	lds	r13, 0x0683
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    1d16:	80 91 02 05 	lds	r24, 0x0502
    1d1a:	90 91 03 05 	lds	r25, 0x0503
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	6a e0       	ldi	r22, 0x0A	; 10
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	0e 94 22 21 	call	0x4244	; 0x4244 <__divmodhi4>
    1d28:	8b ab       	std	Y+51, r24	; 0x33
    1d2a:	9c ab       	std	Y+52, r25	; 0x34
    1d2c:	07 c0       	rjmp	.+14     	; 0x1d3c <plan_buffer_line+0xd8>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    1d2e:	83 b7       	in	r24, 0x33	; 51
    1d30:	81 60       	ori	r24, 0x01	; 1
    1d32:	83 bf       	out	0x33, r24	; 51
    1d34:	88 95       	sleep
    1d36:	83 b7       	in	r24, 0x33	; 51
    1d38:	8e 7f       	andi	r24, 0xFE	; 254
    1d3a:	83 bf       	out	0x33, r24	; 51
    1d3c:	80 91 04 05 	lds	r24, 0x0504
    1d40:	90 91 05 05 	lds	r25, 0x0505
    1d44:	4b a9       	ldd	r20, Y+51	; 0x33
    1d46:	5c a9       	ldd	r21, Y+52	; 0x34
    1d48:	84 17       	cp	r24, r20
    1d4a:	95 07       	cpc	r25, r21
    1d4c:	81 f3       	breq	.-32     	; 0x1d2e <plan_buffer_line+0xca>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1d4e:	20 91 02 05 	lds	r18, 0x0502
    1d52:	30 91 03 05 	lds	r19, 0x0503
    1d56:	89 e4       	ldi	r24, 0x49	; 73
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	28 9f       	mul	r18, r24
    1d5c:	d0 01       	movw	r26, r0
    1d5e:	29 9f       	mul	r18, r25
    1d60:	b0 0d       	add	r27, r0
    1d62:	38 9f       	mul	r19, r24
    1d64:	b0 0d       	add	r27, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	a8 5d       	subi	r26, 0xD8	; 216
    1d6a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d6c:	ba a3       	std	Y+34, r27	; 0x22
    1d6e:	a9 a3       	std	Y+33, r26	; 0x21
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1d70:	80 91 06 05 	lds	r24, 0x0506
    1d74:	90 91 07 05 	lds	r25, 0x0507
    1d78:	a0 91 08 05 	lds	r26, 0x0508
    1d7c:	b0 91 09 05 	lds	r27, 0x0509
    1d80:	37 01       	movw	r6, r14
    1d82:	48 01       	movw	r8, r16
    1d84:	68 1a       	sub	r6, r24
    1d86:	79 0a       	sbc	r7, r25
    1d88:	8a 0a       	sbc	r8, r26
    1d8a:	9b 0a       	sbc	r9, r27
    1d8c:	97 fe       	sbrs	r9, 7
    1d8e:	08 c0       	rjmp	.+16     	; 0x1da0 <plan_buffer_line+0x13c>
    1d90:	90 94       	com	r9
    1d92:	80 94       	com	r8
    1d94:	70 94       	com	r7
    1d96:	60 94       	com	r6
    1d98:	61 1c       	adc	r6, r1
    1d9a:	71 1c       	adc	r7, r1
    1d9c:	81 1c       	adc	r8, r1
    1d9e:	91 1c       	adc	r9, r1
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1da0:	6f a5       	ldd	r22, Y+47	; 0x2f
    1da2:	78 a9       	ldd	r23, Y+48	; 0x30
    1da4:	89 a9       	ldd	r24, Y+49	; 0x31
    1da6:	9a a9       	ldd	r25, Y+50	; 0x32
    1da8:	a6 01       	movw	r20, r12
    1daa:	95 01       	movw	r18, r10
    1dac:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1db0:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    1db4:	6d 87       	std	Y+13, r22	; 0x0d
    1db6:	7e 87       	std	Y+14, r23	; 0x0e
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
    1dba:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1dbc:	6b a5       	ldd	r22, Y+43	; 0x2b
    1dbe:	7c a5       	ldd	r23, Y+44	; 0x2c
    1dc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc4:	a2 01       	movw	r20, r4
    1dc6:	91 01       	movw	r18, r2
    1dc8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1dcc:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    1dd0:	69 87       	std	Y+9, r22	; 0x09
    1dd2:	7a 87       	std	Y+10, r23	; 0x0a
    1dd4:	8b 87       	std	Y+11, r24	; 0x0b
    1dd6:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1dd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dda:	78 a5       	ldd	r23, Y+40	; 0x28
    1ddc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de0:	2b a1       	ldd	r18, Y+35	; 0x23
    1de2:	3c a1       	ldd	r19, Y+36	; 0x24
    1de4:	4d a1       	ldd	r20, Y+37	; 0x25
    1de6:	5e a1       	ldd	r21, Y+38	; 0x26
    1de8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    1dec:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    1df0:	6d 83       	std	Y+5, r22	; 0x05
    1df2:	7e 83       	std	Y+6, r23	; 0x06
    1df4:	8f 83       	std	Y+7, r24	; 0x07
    1df6:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1df8:	e9 82       	std	Y+1, r14	; 0x01
    1dfa:	fa 82       	std	Y+2, r15	; 0x02
    1dfc:	0b 83       	std	Y+3, r16	; 0x03
    1dfe:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1e00:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e02:	fa a1       	ldd	r31, Y+34	; 0x22
    1e04:	60 82       	st	Z, r6
    1e06:	71 82       	std	Z+1, r7	; 0x01
    1e08:	82 82       	std	Z+2, r8	; 0x02
    1e0a:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    1e0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e10:	4f 81       	ldd	r20, Y+7	; 0x07
    1e12:	58 85       	ldd	r21, Y+8	; 0x08
    1e14:	80 91 0a 05 	lds	r24, 0x050A
    1e18:	90 91 0b 05 	lds	r25, 0x050B
    1e1c:	a0 91 0c 05 	lds	r26, 0x050C
    1e20:	b0 91 0d 05 	lds	r27, 0x050D
    1e24:	28 1b       	sub	r18, r24
    1e26:	39 0b       	sbc	r19, r25
    1e28:	4a 0b       	sbc	r20, r26
    1e2a:	5b 0b       	sbc	r21, r27
    1e2c:	57 ff       	sbrs	r21, 7
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <plan_buffer_line+0x1da>
    1e30:	50 95       	com	r21
    1e32:	40 95       	com	r20
    1e34:	30 95       	com	r19
    1e36:	21 95       	neg	r18
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3e:	a9 a1       	ldd	r26, Y+33	; 0x21
    1e40:	ba a1       	ldd	r27, Y+34	; 0x22
    1e42:	14 96       	adiw	r26, 0x04	; 4
    1e44:	2d 93       	st	X+, r18
    1e46:	3d 93       	st	X+, r19
    1e48:	4d 93       	st	X+, r20
    1e4a:	5c 93       	st	X, r21
    1e4c:	17 97       	sbiw	r26, 0x07	; 7
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    1e4e:	29 85       	ldd	r18, Y+9	; 0x09
    1e50:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e52:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e54:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e56:	80 91 0e 05 	lds	r24, 0x050E
    1e5a:	90 91 0f 05 	lds	r25, 0x050F
    1e5e:	a0 91 10 05 	lds	r26, 0x0510
    1e62:	b0 91 11 05 	lds	r27, 0x0511
    1e66:	28 1b       	sub	r18, r24
    1e68:	39 0b       	sbc	r19, r25
    1e6a:	4a 0b       	sbc	r20, r26
    1e6c:	5b 0b       	sbc	r21, r27
    1e6e:	57 ff       	sbrs	r21, 7
    1e70:	07 c0       	rjmp	.+14     	; 0x1e80 <plan_buffer_line+0x21c>
    1e72:	50 95       	com	r21
    1e74:	40 95       	com	r20
    1e76:	30 95       	com	r19
    1e78:	21 95       	neg	r18
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e80:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e82:	fa a1       	ldd	r31, Y+34	; 0x22
    1e84:	20 87       	std	Z+8, r18	; 0x08
    1e86:	31 87       	std	Z+9, r19	; 0x09
    1e88:	42 87       	std	Z+10, r20	; 0x0a
    1e8a:	53 87       	std	Z+11, r21	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    1e8c:	a0 90 12 05 	lds	r10, 0x0512
    1e90:	b0 90 13 05 	lds	r11, 0x0513
    1e94:	c0 90 14 05 	lds	r12, 0x0514
    1e98:	d0 90 15 05 	lds	r13, 0x0515
    1e9c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e9e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ea0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ea2:	58 89       	ldd	r21, Y+16	; 0x10
    1ea4:	2a 19       	sub	r18, r10
    1ea6:	3b 09       	sbc	r19, r11
    1ea8:	4c 09       	sbc	r20, r12
    1eaa:	5d 09       	sbc	r21, r13
    1eac:	57 ff       	sbrs	r21, 7
    1eae:	07 c0       	rjmp	.+14     	; 0x1ebe <plan_buffer_line+0x25a>
    1eb0:	50 95       	com	r21
    1eb2:	40 95       	com	r20
    1eb4:	30 95       	com	r19
    1eb6:	21 95       	neg	r18
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	4f 4f       	sbci	r20, 0xFF	; 255
    1ebc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebe:	a9 a1       	ldd	r26, Y+33	; 0x21
    1ec0:	ba a1       	ldd	r27, Y+34	; 0x22
    1ec2:	1c 96       	adiw	r26, 0x0c	; 12
    1ec4:	2d 93       	st	X+, r18
    1ec6:	3d 93       	st	X+, r19
    1ec8:	4d 93       	st	X+, r20
    1eca:	5c 93       	st	X, r21
    1ecc:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    1ece:	18 96       	adiw	r26, 0x08	; 8
    1ed0:	ed 90       	ld	r14, X+
    1ed2:	fd 90       	ld	r15, X+
    1ed4:	0d 91       	ld	r16, X+
    1ed6:	1c 91       	ld	r17, X
    1ed8:	1b 97       	sbiw	r26, 0x0b	; 11
    1eda:	fd 01       	movw	r30, r26
    1edc:	84 81       	ldd	r24, Z+4	; 0x04
    1ede:	95 81       	ldd	r25, Z+5	; 0x05
    1ee0:	a6 81       	ldd	r26, Z+6	; 0x06
    1ee2:	b7 81       	ldd	r27, Z+7	; 0x07
    1ee4:	8e 15       	cp	r24, r14
    1ee6:	9f 05       	cpc	r25, r15
    1ee8:	a0 07       	cpc	r26, r16
    1eea:	b1 07       	cpc	r27, r17
    1eec:	10 f4       	brcc	.+4      	; 0x1ef2 <plan_buffer_line+0x28e>
    1eee:	d8 01       	movw	r26, r16
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	e9 a1       	ldd	r30, Y+33	; 0x21
    1ef4:	fa a1       	ldd	r31, Y+34	; 0x22
    1ef6:	e0 80       	ld	r14, Z
    1ef8:	f1 80       	ldd	r15, Z+1	; 0x01
    1efa:	02 81       	ldd	r16, Z+2	; 0x02
    1efc:	13 81       	ldd	r17, Z+3	; 0x03
    1efe:	8e 15       	cp	r24, r14
    1f00:	9f 05       	cpc	r25, r15
    1f02:	a0 07       	cpc	r26, r16
    1f04:	b1 07       	cpc	r27, r17
    1f06:	10 f4       	brcc	.+4      	; 0x1f0c <plan_buffer_line+0x2a8>
    1f08:	d8 01       	movw	r26, r16
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	82 17       	cp	r24, r18
    1f0e:	93 07       	cpc	r25, r19
    1f10:	a4 07       	cpc	r26, r20
    1f12:	b5 07       	cpc	r27, r21
    1f14:	10 f4       	brcc	.+4      	; 0x1f1a <plan_buffer_line+0x2b6>
    1f16:	da 01       	movw	r26, r20
    1f18:	c9 01       	movw	r24, r18
    1f1a:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f1c:	fa a1       	ldd	r31, Y+34	; 0x22
    1f1e:	81 8b       	std	Z+17, r24	; 0x11
    1f20:	92 8b       	std	Z+18, r25	; 0x12
    1f22:	a3 8b       	std	Z+19, r26	; 0x13
    1f24:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	a1 05       	cpc	r26, r1
    1f2a:	b1 05       	cpc	r27, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <plan_buffer_line+0x2cc>
    1f2e:	39 c2       	rjmp	.+1138   	; 0x23a2 <__stack+0x1a3>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    1f30:	69 81       	ldd	r22, Y+1	; 0x01
    1f32:	7a 81       	ldd	r23, Y+2	; 0x02
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	20 91 06 05 	lds	r18, 0x0506
    1f3c:	30 91 07 05 	lds	r19, 0x0507
    1f40:	40 91 08 05 	lds	r20, 0x0508
    1f44:	50 91 09 05 	lds	r21, 0x0509
    1f48:	62 1b       	sub	r22, r18
    1f4a:	73 0b       	sbc	r23, r19
    1f4c:	84 0b       	sbc	r24, r20
    1f4e:	95 0b       	sbc	r25, r21
    1f50:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    1f54:	20 91 74 06 	lds	r18, 0x0674
    1f58:	30 91 75 06 	lds	r19, 0x0675
    1f5c:	40 91 76 06 	lds	r20, 0x0676
    1f60:	50 91 77 06 	lds	r21, 0x0677
    1f64:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    1f68:	6d 8f       	std	Y+29, r22	; 0x1d
    1f6a:	7e 8f       	std	Y+30, r23	; 0x1e
    1f6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f6e:	98 a3       	std	Y+32, r25	; 0x20
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    1f70:	6d 81       	ldd	r22, Y+5	; 0x05
    1f72:	7e 81       	ldd	r23, Y+6	; 0x06
    1f74:	8f 81       	ldd	r24, Y+7	; 0x07
    1f76:	98 85       	ldd	r25, Y+8	; 0x08
    1f78:	20 91 0a 05 	lds	r18, 0x050A
    1f7c:	30 91 0b 05 	lds	r19, 0x050B
    1f80:	40 91 0c 05 	lds	r20, 0x050C
    1f84:	50 91 0d 05 	lds	r21, 0x050D
    1f88:	62 1b       	sub	r22, r18
    1f8a:	73 0b       	sbc	r23, r19
    1f8c:	84 0b       	sbc	r24, r20
    1f8e:	95 0b       	sbc	r25, r21
    1f90:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    1f94:	20 91 78 06 	lds	r18, 0x0678
    1f98:	30 91 79 06 	lds	r19, 0x0679
    1f9c:	40 91 7a 06 	lds	r20, 0x067A
    1fa0:	50 91 7b 06 	lds	r21, 0x067B
    1fa4:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    1fa8:	69 8f       	std	Y+25, r22	; 0x19
    1faa:	7a 8f       	std	Y+26, r23	; 0x1a
    1fac:	8b 8f       	std	Y+27, r24	; 0x1b
    1fae:	9c 8f       	std	Y+28, r25	; 0x1c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    1fb0:	69 85       	ldd	r22, Y+9	; 0x09
    1fb2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fb8:	20 91 0e 05 	lds	r18, 0x050E
    1fbc:	30 91 0f 05 	lds	r19, 0x050F
    1fc0:	40 91 10 05 	lds	r20, 0x0510
    1fc4:	50 91 11 05 	lds	r21, 0x0511
    1fc8:	62 1b       	sub	r22, r18
    1fca:	73 0b       	sbc	r23, r19
    1fcc:	84 0b       	sbc	r24, r20
    1fce:	95 0b       	sbc	r25, r21
    1fd0:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    1fd4:	20 91 7c 06 	lds	r18, 0x067C
    1fd8:	30 91 7d 06 	lds	r19, 0x067D
    1fdc:	40 91 7e 06 	lds	r20, 0x067E
    1fe0:	50 91 7f 06 	lds	r21, 0x067F
    1fe4:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    1fe8:	6d 8b       	std	Y+21, r22	; 0x15
    1fea:	7e 8b       	std	Y+22, r23	; 0x16
    1fec:	8f 8b       	std	Y+23, r24	; 0x17
    1fee:	98 8f       	std	Y+24, r25	; 0x18
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    1ff0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ff2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff6:	98 89       	ldd	r25, Y+16	; 0x10
    1ff8:	6a 19       	sub	r22, r10
    1ffa:	7b 09       	sbc	r23, r11
    1ffc:	8c 09       	sbc	r24, r12
    1ffe:	9d 09       	sbc	r25, r13
    2000:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    2004:	20 91 80 06 	lds	r18, 0x0680
    2008:	30 91 81 06 	lds	r19, 0x0681
    200c:	40 91 82 06 	lds	r20, 0x0682
    2010:	50 91 83 06 	lds	r21, 0x0683
    2014:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    2018:	69 8b       	std	Y+17, r22	; 0x11
    201a:	7a 8b       	std	Y+18, r23	; 0x12
    201c:	8b 8b       	std	Y+19, r24	; 0x13
    201e:	9c 8b       	std	Y+20, r25	; 0x14
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    2020:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2022:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2024:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2026:	98 a1       	ldd	r25, Y+32	; 0x20
    2028:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <square>
    202c:	3b 01       	movw	r6, r22
    202e:	4c 01       	movw	r8, r24
    2030:	69 8d       	ldd	r22, Y+25	; 0x19
    2032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2038:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <square>
    203c:	7b 01       	movw	r14, r22
    203e:	8c 01       	movw	r16, r24
    2040:	6d 89       	ldd	r22, Y+21	; 0x15
    2042:	7e 89       	ldd	r23, Y+22	; 0x16
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	98 8d       	ldd	r25, Y+24	; 0x18
    2048:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <square>
    204c:	5b 01       	movw	r10, r22
    204e:	6c 01       	movw	r12, r24
    2050:	69 89       	ldd	r22, Y+17	; 0x11
    2052:	7a 89       	ldd	r23, Y+18	; 0x12
    2054:	8b 89       	ldd	r24, Y+19	; 0x13
    2056:	9c 89       	ldd	r25, Y+20	; 0x14
    2058:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <square>
    205c:	1b 01       	movw	r2, r22
    205e:	2c 01       	movw	r4, r24
    2060:	c4 01       	movw	r24, r8
    2062:	b3 01       	movw	r22, r6
    2064:	a8 01       	movw	r20, r16
    2066:	97 01       	movw	r18, r14
    2068:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    206c:	a6 01       	movw	r20, r12
    206e:	95 01       	movw	r18, r10
    2070:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    2074:	a2 01       	movw	r20, r4
    2076:	91 01       	movw	r18, r2
    2078:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3>
    207c:	0e 94 b4 20 	call	0x4168	; 0x4168 <sqrt>
    2080:	9b 01       	movw	r18, r22
    2082:	ac 01       	movw	r20, r24
    2084:	a9 a1       	ldd	r26, Y+33	; 0x21
    2086:	ba a1       	ldd	r27, Y+34	; 0x22
    2088:	9d 96       	adiw	r26, 0x2d	; 45
    208a:	6d 93       	st	X+, r22
    208c:	7d 93       	st	X+, r23
    208e:	8d 93       	st	X+, r24
    2090:	9c 93       	st	X, r25
    2092:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    2094:	60 96       	adiw	r28, 0x10	; 16
    2096:	8e ad       	ldd	r24, Y+62	; 0x3e
    2098:	9f ad       	ldd	r25, Y+63	; 0x3f
    209a:	60 97       	sbiw	r28, 0x10	; 16
    209c:	89 2b       	or	r24, r25
    209e:	89 f4       	brne	.+34     	; 0x20c2 <plan_buffer_line+0x45e>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    20a0:	ca 01       	movw	r24, r20
    20a2:	b9 01       	movw	r22, r18
    20a4:	2e 96       	adiw	r28, 0x0e	; 14
    20a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    20a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    20aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    20ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    20ae:	2e 97       	sbiw	r28, 0x0e	; 14
    20b0:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	34 e2       	ldi	r19, 0x24	; 36
    20b8:	44 e7       	ldi	r20, 0x74	; 116
    20ba:	59 e4       	ldi	r21, 0x49	; 73
    20bc:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    20c0:	0c c0       	rjmp	.+24     	; 0x20da <plan_buffer_line+0x476>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    20c2:	60 ec       	ldi	r22, 0xC0	; 192
    20c4:	71 ee       	ldi	r23, 0xE1	; 225
    20c6:	84 e6       	ldi	r24, 0x64	; 100
    20c8:	9c e4       	ldi	r25, 0x4C	; 76
    20ca:	2e 96       	adiw	r28, 0x0e	; 14
    20cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    20ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    20d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    20d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    20d4:	2e 97       	sbiw	r28, 0x0e	; 14
    20d6:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    20da:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <lround>
    20de:	ac 01       	movw	r20, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	da 01       	movw	r26, r20
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    20e8:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__floatunsisf>
    20ec:	9b 01       	movw	r18, r22
    20ee:	ac 01       	movw	r20, r24
    20f0:	60 ec       	ldi	r22, 0xC0	; 192
    20f2:	71 ee       	ldi	r23, 0xE1	; 225
    20f4:	84 e6       	ldi	r24, 0x64	; 100
    20f6:	9c e4       	ldi	r25, 0x4C	; 76
    20f8:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    20fc:	7b 01       	movw	r14, r22
    20fe:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2100:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2102:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2104:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2106:	98 a1       	ldd	r25, Y+32	; 0x20
    2108:	a8 01       	movw	r20, r16
    210a:	97 01       	movw	r18, r14
    210c:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    2110:	e9 a1       	ldd	r30, Y+33	; 0x21
    2112:	fa a1       	ldd	r31, Y+34	; 0x22
    2114:	61 8f       	std	Z+25, r22	; 0x19
    2116:	72 8f       	std	Z+26, r23	; 0x1a
    2118:	83 8f       	std	Z+27, r24	; 0x1b
    211a:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_y = delta_y_mm * multiplier;
    211c:	69 8d       	ldd	r22, Y+25	; 0x19
    211e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2120:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2122:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2124:	a8 01       	movw	r20, r16
    2126:	97 01       	movw	r18, r14
    2128:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    212c:	a9 a1       	ldd	r26, Y+33	; 0x21
    212e:	ba a1       	ldd	r27, Y+34	; 0x22
    2130:	5d 96       	adiw	r26, 0x1d	; 29
    2132:	6d 93       	st	X+, r22
    2134:	7d 93       	st	X+, r23
    2136:	8d 93       	st	X+, r24
    2138:	9c 93       	st	X, r25
    213a:	90 97       	sbiw	r26, 0x20	; 32
  block->speed_z = delta_z_mm * multiplier;
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	a8 01       	movw	r20, r16
    2146:	97 01       	movw	r18, r14
    2148:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    214c:	e9 a1       	ldd	r30, Y+33	; 0x21
    214e:	fa a1       	ldd	r31, Y+34	; 0x22
    2150:	61 a3       	std	Z+33, r22	; 0x21
    2152:	72 a3       	std	Z+34, r23	; 0x22
    2154:	83 a3       	std	Z+35, r24	; 0x23
    2156:	94 a3       	std	Z+36, r25	; 0x24
  block->speed_c = delta_c_mm * multiplier;
    2158:	69 89       	ldd	r22, Y+17	; 0x11
    215a:	7a 89       	ldd	r23, Y+18	; 0x12
    215c:	8b 89       	ldd	r24, Y+19	; 0x13
    215e:	9c 89       	ldd	r25, Y+20	; 0x14
    2160:	a8 01       	movw	r20, r16
    2162:	97 01       	movw	r18, r14
    2164:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    2168:	a9 a1       	ldd	r26, Y+33	; 0x21
    216a:	ba a1       	ldd	r27, Y+34	; 0x22
    216c:	95 96       	adiw	r26, 0x25	; 37
    216e:	6d 93       	st	X+, r22
    2170:	7d 93       	st	X+, r23
    2172:	8d 93       	st	X+, r24
    2174:	9c 93       	st	X, r25
    2176:	98 97       	sbiw	r26, 0x28	; 40
  block->nominal_speed = block->millimeters * multiplier;
    2178:	9d 96       	adiw	r26, 0x2d	; 45
    217a:	6d 91       	ld	r22, X+
    217c:	7d 91       	ld	r23, X+
    217e:	8d 91       	ld	r24, X+
    2180:	9c 91       	ld	r25, X
    2182:	d0 97       	sbiw	r26, 0x30	; 48
    2184:	a8 01       	movw	r20, r16
    2186:	97 01       	movw	r18, r14
    2188:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    218c:	e9 a1       	ldd	r30, Y+33	; 0x21
    218e:	fa a1       	ldd	r31, Y+34	; 0x22
    2190:	61 a7       	std	Z+41, r22	; 0x29
    2192:	72 a7       	std	Z+42, r23	; 0x2a
    2194:	83 a7       	std	Z+43, r24	; 0x2b
    2196:	94 a7       	std	Z+44, r25	; 0x2c
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    2198:	61 89       	ldd	r22, Z+17	; 0x11
    219a:	72 89       	ldd	r23, Z+18	; 0x12
    219c:	83 89       	ldd	r24, Z+19	; 0x13
    219e:	94 89       	ldd	r25, Z+20	; 0x14
    21a0:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__floatsisf>
    21a4:	5b 01       	movw	r10, r22
    21a6:	6c 01       	movw	r12, r24
    21a8:	a8 01       	movw	r20, r16
    21aa:	97 01       	movw	r18, r14
    21ac:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    21b0:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <ceil>
    21b4:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__fixunssfsi>
    21b8:	3b 01       	movw	r6, r22
    21ba:	4c 01       	movw	r8, r24
    21bc:	a9 a1       	ldd	r26, Y+33	; 0x21
    21be:	ba a1       	ldd	r27, Y+34	; 0x22
    21c0:	55 96       	adiw	r26, 0x15	; 21
    21c2:	6d 93       	st	X+, r22
    21c4:	7d 93       	st	X+, r23
    21c6:	8d 93       	st	X+, r24
    21c8:	9c 93       	st	X, r25
    21ca:	58 97       	sbiw	r26, 0x18	; 24
  block->entry_factor = 0.0;
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e0       	ldi	r26, 0x00	; 0
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e9 a1       	ldd	r30, Y+33	; 0x21
    21d6:	fa a1       	ldd	r31, Y+34	; 0x22
    21d8:	81 ab       	std	Z+49, r24	; 0x31
    21da:	92 ab       	std	Z+50, r25	; 0x32
    21dc:	a3 ab       	std	Z+51, r26	; 0x33
    21de:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    21e0:	60 91 92 06 	lds	r22, 0x0692
    21e4:	70 91 93 06 	lds	r23, 0x0693
    21e8:	80 91 94 06 	lds	r24, 0x0694
    21ec:	90 91 95 06 	lds	r25, 0x0695
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e7       	ldi	r20, 0x70	; 112
    21f6:	52 e4       	ldi	r21, 0x42	; 66
    21f8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e2       	ldi	r20, 0x20	; 32
    2202:	52 e4       	ldi	r21, 0x42	; 66
    2204:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    2208:	7b 01       	movw	r14, r22
    220a:	8c 01       	movw	r16, r24
    220c:	a9 a1       	ldd	r26, Y+33	; 0x21
    220e:	ba a1       	ldd	r27, Y+34	; 0x22
    2210:	9d 96       	adiw	r26, 0x2d	; 45
    2212:	6d 91       	ld	r22, X+
    2214:	7d 91       	ld	r23, X+
    2216:	8d 91       	ld	r24, X+
    2218:	9c 91       	ld	r25, X
    221a:	d0 97       	sbiw	r26, 0x30	; 48
    221c:	a6 01       	movw	r20, r12
    221e:	95 01       	movw	r18, r10
    2220:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    2224:	9b 01       	movw	r18, r22
    2226:	ac 01       	movw	r20, r24
    2228:	c8 01       	movw	r24, r16
    222a:	b7 01       	movw	r22, r14
    222c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__divsf3>
    2230:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <ceil>
    2234:	09 a1       	ldd	r16, Y+33	; 0x21
    2236:	1a a1       	ldd	r17, Y+34	; 0x22
    2238:	03 5c       	subi	r16, 0xC3	; 195
    223a:	1f 4f       	sbci	r17, 0xFF	; 255
    223c:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
    2240:	f8 01       	movw	r30, r16
    2242:	60 83       	st	Z, r22
    2244:	71 83       	std	Z+1, r23	; 0x01
    2246:	82 83       	std	Z+2, r24	; 0x02
    2248:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    224a:	80 91 16 05 	lds	r24, 0x0516
    224e:	88 23       	and	r24, r24
    2250:	69 f0       	breq	.+26     	; 0x226c <__stack+0x6d>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    2252:	89 a1       	ldd	r24, Y+33	; 0x21
    2254:	9a a1       	ldd	r25, Y+34	; 0x22
    2256:	0e 94 5d 09 	call	0x12ba	; 0x12ba <factor_for_safe_speed>
    225a:	8b 01       	movw	r16, r22
    225c:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    225e:	89 a1       	ldd	r24, Y+33	; 0x21
    2260:	9a a1       	ldd	r25, Y+34	; 0x22
    2262:	b9 01       	movw	r22, r18
    2264:	a8 01       	movw	r20, r16
    2266:	0e 94 8e 0c 	call	0x191c	; 0x191c <calculate_trapezoid_for_block>
    226a:	26 c0       	rjmp	.+76     	; 0x22b8 <__stack+0xb9>
  } else {
    block->initial_rate = block->nominal_rate;
    226c:	a9 a1       	ldd	r26, Y+33	; 0x21
    226e:	ba a1       	ldd	r27, Y+34	; 0x22
    2270:	d5 96       	adiw	r26, 0x35	; 53
    2272:	6d 92       	st	X+, r6
    2274:	7d 92       	st	X+, r7
    2276:	8d 92       	st	X+, r8
    2278:	9c 92       	st	X, r9
    227a:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    227c:	fd 01       	movw	r30, r26
    227e:	61 ae       	std	Z+57, r6	; 0x39
    2280:	72 ae       	std	Z+58, r7	; 0x3a
    2282:	83 ae       	std	Z+59, r8	; 0x3b
    2284:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    2286:	ef 5b       	subi	r30, 0xBF	; 191
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	10 82       	st	Z, r1
    228c:	11 82       	std	Z+1, r1	; 0x01
    228e:	12 82       	std	Z+2, r1	; 0x02
    2290:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    2292:	9d 01       	movw	r18, r26
    2294:	2b 5b       	subi	r18, 0xBB	; 187
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	fd 01       	movw	r30, r26
    229a:	81 89       	ldd	r24, Z+17	; 0x11
    229c:	92 89       	ldd	r25, Z+18	; 0x12
    229e:	a3 89       	ldd	r26, Z+19	; 0x13
    22a0:	b4 89       	ldd	r27, Z+20	; 0x14
    22a2:	f9 01       	movw	r30, r18
    22a4:	80 83       	st	Z, r24
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	a2 83       	std	Z+2, r26	; 0x02
    22aa:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    22ac:	d8 01       	movw	r26, r16
    22ae:	1d 92       	st	X+, r1
    22b0:	1d 92       	st	X+, r1
    22b2:	1d 92       	st	X+, r1
    22b4:	1c 92       	st	X, r1
    22b6:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    22b8:	e9 a1       	ldd	r30, Y+33	; 0x21
    22ba:	fa a1       	ldd	r31, Y+34	; 0x22
    22bc:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    22be:	29 81       	ldd	r18, Y+1	; 0x01
    22c0:	3a 81       	ldd	r19, Y+2	; 0x02
    22c2:	4b 81       	ldd	r20, Y+3	; 0x03
    22c4:	5c 81       	ldd	r21, Y+4	; 0x04
    22c6:	80 91 06 05 	lds	r24, 0x0506
    22ca:	90 91 07 05 	lds	r25, 0x0507
    22ce:	a0 91 08 05 	lds	r26, 0x0508
    22d2:	b0 91 09 05 	lds	r27, 0x0509
    22d6:	28 17       	cp	r18, r24
    22d8:	39 07       	cpc	r19, r25
    22da:	4a 07       	cpc	r20, r26
    22dc:	5b 07       	cpc	r21, r27
    22de:	14 f4       	brge	.+4      	; 0x22e4 <__stack+0xe5>
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    22e4:	2d 81       	ldd	r18, Y+5	; 0x05
    22e6:	3e 81       	ldd	r19, Y+6	; 0x06
    22e8:	4f 81       	ldd	r20, Y+7	; 0x07
    22ea:	58 85       	ldd	r21, Y+8	; 0x08
    22ec:	80 91 0a 05 	lds	r24, 0x050A
    22f0:	90 91 0b 05 	lds	r25, 0x050B
    22f4:	a0 91 0c 05 	lds	r26, 0x050C
    22f8:	b0 91 0d 05 	lds	r27, 0x050D
    22fc:	28 17       	cp	r18, r24
    22fe:	39 07       	cpc	r19, r25
    2300:	4a 07       	cpc	r20, r26
    2302:	5b 07       	cpc	r21, r27
    2304:	44 f4       	brge	.+16     	; 0x2316 <__stack+0x117>
    2306:	a9 a1       	ldd	r26, Y+33	; 0x21
    2308:	ba a1       	ldd	r27, Y+34	; 0x22
    230a:	50 96       	adiw	r26, 0x10	; 16
    230c:	8c 91       	ld	r24, X
    230e:	50 97       	sbiw	r26, 0x10	; 16
    2310:	88 60       	ori	r24, 0x08	; 8
    2312:	50 96       	adiw	r26, 0x10	; 16
    2314:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2316:	29 85       	ldd	r18, Y+9	; 0x09
    2318:	3a 85       	ldd	r19, Y+10	; 0x0a
    231a:	4b 85       	ldd	r20, Y+11	; 0x0b
    231c:	5c 85       	ldd	r21, Y+12	; 0x0c
    231e:	80 91 0e 05 	lds	r24, 0x050E
    2322:	90 91 0f 05 	lds	r25, 0x050F
    2326:	a0 91 10 05 	lds	r26, 0x0510
    232a:	b0 91 11 05 	lds	r27, 0x0511
    232e:	28 17       	cp	r18, r24
    2330:	39 07       	cpc	r19, r25
    2332:	4a 07       	cpc	r20, r26
    2334:	5b 07       	cpc	r21, r27
    2336:	2c f4       	brge	.+10     	; 0x2342 <__stack+0x143>
    2338:	e9 a1       	ldd	r30, Y+33	; 0x21
    233a:	fa a1       	ldd	r31, Y+34	; 0x22
    233c:	80 89       	ldd	r24, Z+16	; 0x10
    233e:	80 64       	ori	r24, 0x40	; 64
    2340:	80 8b       	std	Z+16, r24	; 0x10
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2342:	2d 85       	ldd	r18, Y+13	; 0x0d
    2344:	3e 85       	ldd	r19, Y+14	; 0x0e
    2346:	4f 85       	ldd	r20, Y+15	; 0x0f
    2348:	58 89       	ldd	r21, Y+16	; 0x10
    234a:	80 91 12 05 	lds	r24, 0x0512
    234e:	90 91 13 05 	lds	r25, 0x0513
    2352:	a0 91 14 05 	lds	r26, 0x0514
    2356:	b0 91 15 05 	lds	r27, 0x0515
    235a:	28 17       	cp	r18, r24
    235c:	39 07       	cpc	r19, r25
    235e:	4a 07       	cpc	r20, r26
    2360:	5b 07       	cpc	r21, r27
    2362:	44 f4       	brge	.+16     	; 0x2374 <__stack+0x175>
    2364:	a9 a1       	ldd	r26, Y+33	; 0x21
    2366:	ba a1       	ldd	r27, Y+34	; 0x22
    2368:	50 96       	adiw	r26, 0x10	; 16
    236a:	8c 91       	ld	r24, X
    236c:	50 97       	sbiw	r26, 0x10	; 16
    236e:	80 68       	ori	r24, 0x80	; 128
    2370:	50 96       	adiw	r26, 0x10	; 16
    2372:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    2374:	eb a9       	ldd	r30, Y+51	; 0x33
    2376:	fc a9       	ldd	r31, Y+52	; 0x34
    2378:	f0 93 03 05 	sts	0x0503, r31
    237c:	e0 93 02 05 	sts	0x0502, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    2380:	a6 e0       	ldi	r26, 0x06	; 6
    2382:	b5 e0       	ldi	r27, 0x05	; 5
    2384:	fe 01       	movw	r30, r28
    2386:	31 96       	adiw	r30, 0x01	; 1
    2388:	80 e1       	ldi	r24, 0x10	; 16
    238a:	01 90       	ld	r0, Z+
    238c:	0d 92       	st	X+, r0
    238e:	81 50       	subi	r24, 0x01	; 1
    2390:	e1 f7       	brne	.-8      	; 0x238a <__stack+0x18b>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2392:	80 91 16 05 	lds	r24, 0x0516
    2396:	88 23       	and	r24, r24
    2398:	11 f0       	breq	.+4      	; 0x239e <__stack+0x19f>
    239a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <planner_recalculate>
  st_wake_up();
    239e:	0e 94 99 14 	call	0x2932	; 0x2932 <st_wake_up>
}
    23a2:	e4 96       	adiw	r28, 0x34	; 52
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	df 90       	pop	r13
    23bc:	cf 90       	pop	r12
    23be:	bf 90       	pop	r11
    23c0:	af 90       	pop	r10
    23c2:	9f 90       	pop	r9
    23c4:	8f 90       	pop	r8
    23c6:	7f 90       	pop	r7
    23c8:	6f 90       	pop	r6
    23ca:	5f 90       	pop	r5
    23cc:	4f 90       	pop	r4
    23ce:	3f 90       	pop	r3
    23d0:	2f 90       	pop	r2
    23d2:	08 95       	ret

000023d4 <sp_process>:
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	61 c0       	rjmp	.+194    	; 0x249c <sp_process+0xc8>
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    23da:	e0 91 49 05 	lds	r30, 0x0549
    23de:	ee 23       	and	r30, r30
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <sp_process+0x10>
    23e2:	4a c0       	rjmp	.+148    	; 0x2478 <sp_process+0xa4>
    23e4:	9a 30       	cpi	r25, 0x0A	; 10
    23e6:	19 f0       	breq	.+6      	; 0x23ee <sp_process+0x1a>
    23e8:	9d 30       	cpi	r25, 0x0D	; 13
    23ea:	09 f0       	breq	.+2      	; 0x23ee <sp_process+0x1a>
    23ec:	45 c0       	rjmp	.+138    	; 0x2478 <sp_process+0xa4>
      line[char_counter] = 0; // terminate string
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	e9 5e       	subi	r30, 0xE9	; 233
    23f2:	fa 4f       	sbci	r31, 0xFA	; 250
    23f4:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    23f6:	87 e1       	ldi	r24, 0x17	; 23
    23f8:	95 e0       	ldi	r25, 0x05	; 5
    23fa:	0e 94 61 04 	call	0x8c2	; 0x8c2 <gc_execute_line>
    23fe:	68 2f       	mov	r22, r24
static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code)
{
	if( gHomed == FALSE ) {
    2400:	80 91 4a 05 	lds	r24, 0x054A
    2404:	88 23       	and	r24, r24
    2406:	39 f4       	brne	.+14     	; 0x2416 <sp_process+0x42>
    	printPgmString(PSTR("\r\nNot homed\n\r"));status_code = 99;
    2408:	8b ea       	ldi	r24, 0xAB	; 171
    240a:	92 e0       	ldi	r25, 0x02	; 2
    240c:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
    2410:	c3 e6       	ldi	r28, 0x63	; 99
    2412:	d0 e0       	ldi	r29, 0x00	; 0
    2414:	1f c0       	rjmp	.+62     	; 0x2454 <sp_process+0x80>
	}

  switch(status_code) {          
    2416:	62 30       	cpi	r22, 0x02	; 2
    2418:	91 f0       	breq	.+36     	; 0x243e <sp_process+0x6a>
    241a:	63 30       	cpi	r22, 0x03	; 3
    241c:	28 f4       	brcc	.+10     	; 0x2428 <sp_process+0x54>
    241e:	66 23       	and	r22, r22
    2420:	41 f0       	breq	.+16     	; 0x2432 <sp_process+0x5e>
    2422:	61 30       	cpi	r22, 0x01	; 1
    2424:	a9 f4       	brne	.+42     	; 0x2450 <sp_process+0x7c>
    2426:	08 c0       	rjmp	.+16     	; 0x2438 <sp_process+0x64>
    2428:	63 30       	cpi	r22, 0x03	; 3
    242a:	61 f0       	breq	.+24     	; 0x2444 <sp_process+0x70>
    242c:	64 30       	cpi	r22, 0x04	; 4
    242e:	81 f4       	brne	.+32     	; 0x2450 <sp_process+0x7c>
    2430:	0c c0       	rjmp	.+24     	; 0x244a <sp_process+0x76>
    case GCSTATUS_OK:
    	printPgmString(PSTR("ok\n\r")); 
    2432:	86 ea       	ldi	r24, 0xA6	; 166
    2434:	92 e0       	ldi	r25, 0x02	; 2
    2436:	1b c0       	rjmp	.+54     	; 0x246e <sp_process+0x9a>
		break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    	printPgmString(PSTR("error: Bad number format\n\r")); 
    2438:	8b e8       	ldi	r24, 0x8B	; 139
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	18 c0       	rjmp	.+48     	; 0x246e <sp_process+0x9a>
		break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    	printPgmString(PSTR("error: Expected command letter\n\r")); 
    243e:	8a e6       	ldi	r24, 0x6A	; 106
    2440:	92 e0       	ldi	r25, 0x02	; 2
    2442:	15 c0       	rjmp	.+42     	; 0x246e <sp_process+0x9a>
		break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    	printPgmString(PSTR("error: Unsupported statement\n\r")); 
    2444:	8b e4       	ldi	r24, 0x4B	; 75
    2446:	92 e0       	ldi	r25, 0x02	; 2
    2448:	12 c0       	rjmp	.+36     	; 0x246e <sp_process+0x9a>
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
    244a:	8d e2       	ldi	r24, 0x2D	; 45
    244c:	92 e0       	ldi	r25, 0x02	; 2
    244e:	0f c0       	rjmp	.+30     	; 0x246e <sp_process+0x9a>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    2450:	c6 2f       	mov	r28, r22
    2452:	d0 e0       	ldi	r29, 0x00	; 0
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
		break;
    default:
    	printPgmString(PSTR("error: "));
    2454:	85 e2       	ldi	r24, 0x25	; 37
    2456:	92 e0       	ldi	r25, 0x02	; 2
    2458:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
    	printInteger(status_code);
    245c:	be 01       	movw	r22, r28
    245e:	88 27       	eor	r24, r24
    2460:	77 fd       	sbrc	r23, 7
    2462:	80 95       	com	r24
    2464:	98 2f       	mov	r25, r24
    2466:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
    	printPgmString(PSTR("\n\r"));
    246a:	82 e2       	ldi	r24, 0x22	; 34
    246c:	92 e0       	ldi	r25, 0x02	; 2
    246e:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2472:	10 92 49 05 	sts	0x0549, r1
    2476:	12 c0       	rjmp	.+36     	; 0x249c <sp_process+0xc8>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    2478:	91 32       	cpi	r25, 0x21	; 33
    247a:	84 f0       	brlt	.+32     	; 0x249c <sp_process+0xc8>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    247c:	89 2f       	mov	r24, r25
    247e:	81 56       	subi	r24, 0x61	; 97
    2480:	ae 2f       	mov	r26, r30
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	ef 5f       	subi	r30, 0xFF	; 255
    2486:	8a 31       	cpi	r24, 0x1A	; 26
    2488:	20 f4       	brcc	.+8      	; 0x2492 <sp_process+0xbe>
      line[char_counter++] = c-'a'+'A';
    248a:	a9 5e       	subi	r26, 0xE9	; 233
    248c:	ba 4f       	sbci	r27, 0xFA	; 250
    248e:	90 52       	subi	r25, 0x20	; 32
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <sp_process+0xc2>
    } else {
      line[char_counter++] = c;
    2492:	a9 5e       	subi	r26, 0xE9	; 233
    2494:	ba 4f       	sbci	r27, 0xFA	; 250
    2496:	9c 93       	st	X, r25
    2498:	e0 93 49 05 	sts	0x0549, r30

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    249c:	0e 94 07 1a 	call	0x340e	; 0x340e <serialRead>
    24a0:	98 2f       	mov	r25, r24
    24a2:	8f 3f       	cpi	r24, 0xFF	; 255
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <sp_process+0xd4>
    24a6:	99 cf       	rjmp	.-206    	; 0x23da <sp_process+0x6>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	76 e9       	ldi	r23, 0x96	; 150
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 b2 19 	call	0x3364	; 0x3364 <beginSerial>
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
    24ba:	8c eb       	ldi	r24, 0xBC	; 188
    24bc:	92 e0       	ldi	r25, 0x02	; 2
    24be:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printPgmString(PSTR("\r\n"));  
    24c2:	89 eb       	ldi	r24, 0xB9	; 185
    24c4:	92 e0       	ldi	r25, 0x02	; 2
    24c6:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
}
    24ca:	08 95       	ret

000024cc <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	ae e7       	ldi	r26, 0x7E	; 126
    24d2:	b4 e4       	ldi	r27, 0x44	; 68
    24d4:	80 93 74 06 	sts	0x0674, r24
    24d8:	90 93 75 06 	sts	0x0675, r25
    24dc:	a0 93 76 06 	sts	0x0676, r26
    24e0:	b0 93 77 06 	sts	0x0677, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    24e4:	80 93 78 06 	sts	0x0678, r24
    24e8:	90 93 79 06 	sts	0x0679, r25
    24ec:	a0 93 7a 06 	sts	0x067A, r26
    24f0:	b0 93 7b 06 	sts	0x067B, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    24f4:	84 ef       	ldi	r24, 0xF4	; 244
    24f6:	99 ef       	ldi	r25, 0xF9	; 249
    24f8:	ac e3       	ldi	r26, 0x3C	; 60
    24fa:	b4 e4       	ldi	r27, 0x44	; 68
    24fc:	80 93 7c 06 	sts	0x067C, r24
    2500:	90 93 7d 06 	sts	0x067D, r25
    2504:	a0 93 7e 06 	sts	0x067E, r26
    2508:	b0 93 7f 06 	sts	0x067F, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    250c:	81 ec       	ldi	r24, 0xC1	; 193
    250e:	9a ec       	ldi	r25, 0xCA	; 202
    2510:	a1 e3       	ldi	r26, 0x31	; 49
    2512:	b2 e4       	ldi	r27, 0x42	; 66
    2514:	80 93 80 06 	sts	0x0680, r24
    2518:	90 93 81 06 	sts	0x0681, r25
    251c:	a0 93 82 06 	sts	0x0682, r26
    2520:	b0 93 83 06 	sts	0x0683, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2524:	88 e0       	ldi	r24, 0x08	; 8
    2526:	80 93 85 06 	sts	0x0685, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 ef       	ldi	r26, 0xF0	; 240
    2530:	b3 e4       	ldi	r27, 0x43	; 67
    2532:	80 93 86 06 	sts	0x0686, r24
    2536:	90 93 87 06 	sts	0x0687, r25
    253a:	a0 93 88 06 	sts	0x0688, r26
    253e:	b0 93 89 06 	sts	0x0689, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2542:	80 93 8a 06 	sts	0x068A, r24
    2546:	90 93 8b 06 	sts	0x068B, r25
    254a:	a0 93 8c 06 	sts	0x068C, r26
    254e:	b0 93 8d 06 	sts	0x068D, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2552:	8a e9       	ldi	r24, 0x9A	; 154
    2554:	99 e9       	ldi	r25, 0x99	; 153
    2556:	a9 e9       	ldi	r26, 0x99	; 153
    2558:	b0 e4       	ldi	r27, 0x40	; 64
    255a:	80 93 92 06 	sts	0x0692, r24
    255e:	90 93 93 06 	sts	0x0693, r25
    2562:	a0 93 94 06 	sts	0x0694, r26
    2566:	b0 93 95 06 	sts	0x0695, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    256a:	8d ec       	ldi	r24, 0xCD	; 205
    256c:	9c ec       	ldi	r25, 0xCC	; 204
    256e:	ac ec       	ldi	r26, 0xCC	; 204
    2570:	bd e3       	ldi	r27, 0x3D	; 61
    2572:	80 93 8e 06 	sts	0x068E, r24
    2576:	90 93 8f 06 	sts	0x068F, r25
    257a:	a0 93 90 06 	sts	0x0690, r26
    257e:	b0 93 91 06 	sts	0x0691, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a8 e4       	ldi	r26, 0x48	; 72
    2588:	b2 e4       	ldi	r27, 0x42	; 66
    258a:	80 93 96 06 	sts	0x0696, r24
    258e:	90 93 97 06 	sts	0x0697, r25
    2592:	a0 93 98 06 	sts	0x0698, r26
    2596:	b0 93 99 06 	sts	0x0699, r27
}
    259a:	08 95       	ret

0000259c <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    25a4:	87 36       	cpi	r24, 0x67	; 103
    25a6:	81 f4       	brne	.+32     	; 0x25c8 <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    25a8:	84 e7       	ldi	r24, 0x74	; 116
    25aa:	96 e0       	ldi	r25, 0x06	; 6
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	46 e2       	ldi	r20, 0x26	; 38
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	0e 94 75 03 	call	0x6ea	; 0x6ea <memcpy_from_eeprom_with_checksum>
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	89 2b       	or	r24, r25
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <read_settings+0x24>
    25be:	21 e0       	ldi	r18, 0x01	; 1
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	28 27       	eor	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	29 c0       	rjmp	.+82     	; 0x261a <read_settings+0x7e>
      return(FALSE);
    }
  } 
  else if (version == 1) {
    25c8:	81 30       	cpi	r24, 0x01	; 1
    25ca:	29 f5       	brne	.+74     	; 0x2616 <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    25cc:	84 e7       	ldi	r24, 0x74	; 116
    25ce:	96 e0       	ldi	r25, 0x06	; 6
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	4b e1       	ldi	r20, 0x1B	; 27
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	0e 94 75 03 	call	0x6ea	; 0x6ea <memcpy_from_eeprom_with_checksum>
    25dc:	89 2b       	or	r24, r25
    25de:	d9 f0       	breq	.+54     	; 0x2616 <read_settings+0x7a>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    25e0:	8a e9       	ldi	r24, 0x9A	; 154
    25e2:	99 e9       	ldi	r25, 0x99	; 153
    25e4:	a9 e9       	ldi	r26, 0x99	; 153
    25e6:	b0 e4       	ldi	r27, 0x40	; 64
    25e8:	80 93 92 06 	sts	0x0692, r24
    25ec:	90 93 93 06 	sts	0x0693, r25
    25f0:	a0 93 94 06 	sts	0x0694, r26
    25f4:	b0 93 95 06 	sts	0x0695, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a8 e4       	ldi	r26, 0x48	; 72
    25fe:	b2 e4       	ldi	r27, 0x42	; 66
    2600:	80 93 96 06 	sts	0x0696, r24
    2604:	90 93 97 06 	sts	0x0697, r25
    2608:	a0 93 98 06 	sts	0x0698, r26
    260c:	b0 93 99 06 	sts	0x0699, r27
    2610:	21 e0       	ldi	r18, 0x01	; 1
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	02 c0       	rjmp	.+4      	; 0x261a <read_settings+0x7e>
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    261a:	c9 01       	movw	r24, r18
    261c:	08 95       	ret

0000261e <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	67 e6       	ldi	r22, 0x67	; 103
    2624:	0e 94 10 03 	call	0x620	; 0x620 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	64 e7       	ldi	r22, 0x74	; 116
    262e:	76 e0       	ldi	r23, 0x06	; 6
    2630:	46 e2       	ldi	r20, 0x26	; 38
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	0e 94 2b 03 	call	0x656	; 0x656 <memcpy_to_eeprom_with_checksum>
}
    2638:	08 95       	ret

0000263a <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    263a:	fc 01       	movw	r30, r24
  switch(parameter) {
    263c:	86 30       	cpi	r24, 0x06	; 6
    263e:	91 05       	cpc	r25, r1
    2640:	b9 f1       	breq	.+110    	; 0x26b0 <settings_store_setting+0x76>
    2642:	87 30       	cpi	r24, 0x07	; 7
    2644:	91 05       	cpc	r25, r1
    2646:	4c f4       	brge	.+18     	; 0x265a <settings_store_setting+0x20>
    2648:	84 30       	cpi	r24, 0x04	; 4
    264a:	91 05       	cpc	r25, r1
    264c:	f9 f0       	breq	.+62     	; 0x268c <settings_store_setting+0x52>
    264e:	85 30       	cpi	r24, 0x05	; 5
    2650:	91 05       	cpc	r25, r1
    2652:	2c f5       	brge	.+74     	; 0x269e <settings_store_setting+0x64>
    2654:	97 ff       	sbrs	r25, 7
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <settings_store_setting+0x3c>
    2658:	62 c0       	rjmp	.+196    	; 0x271e <settings_store_setting+0xe4>
    265a:	88 30       	cpi	r24, 0x08	; 8
    265c:	91 05       	cpc	r25, r1
    265e:	d1 f1       	breq	.+116    	; 0x26d4 <settings_store_setting+0x9a>
    2660:	88 30       	cpi	r24, 0x08	; 8
    2662:	91 05       	cpc	r25, r1
    2664:	74 f1       	brlt	.+92     	; 0x26c2 <settings_store_setting+0x88>
    2666:	89 30       	cpi	r24, 0x09	; 9
    2668:	91 05       	cpc	r25, r1
    266a:	e9 f1       	breq	.+122    	; 0x26e6 <settings_store_setting+0xac>
    266c:	e8 5e       	subi	r30, 0xE8	; 232
    266e:	f3 40       	sbci	r31, 0x03	; 3
    2670:	09 f0       	breq	.+2      	; 0x2674 <settings_store_setting+0x3a>
    2672:	55 c0       	rjmp	.+170    	; 0x271e <settings_store_setting+0xe4>
    2674:	44 c0       	rjmp	.+136    	; 0x26fe <settings_store_setting+0xc4>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	ec 58       	subi	r30, 0x8C	; 140
    2680:	f9 4f       	sbci	r31, 0xF9	; 249
    2682:	40 83       	st	Z, r20
    2684:	51 83       	std	Z+1, r21	; 0x01
    2686:	62 83       	std	Z+2, r22	; 0x02
    2688:	73 83       	std	Z+3, r23	; 0x03
    268a:	4c c0       	rjmp	.+152    	; 0x2724 <settings_store_setting+0xea>
    case 4: settings.pulse_microseconds = round(value); break;
    268c:	cb 01       	movw	r24, r22
    268e:	ba 01       	movw	r22, r20
    2690:	0e 94 90 20 	call	0x4120	; 0x4120 <round>
    2694:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__fixunssfsi>
    2698:	60 93 85 06 	sts	0x0685, r22
    269c:	43 c0       	rjmp	.+134    	; 0x2724 <settings_store_setting+0xea>
    case 5: settings.default_feed_rate = value; break;
    269e:	40 93 86 06 	sts	0x0686, r20
    26a2:	50 93 87 06 	sts	0x0687, r21
    26a6:	60 93 88 06 	sts	0x0688, r22
    26aa:	70 93 89 06 	sts	0x0689, r23
    26ae:	3a c0       	rjmp	.+116    	; 0x2724 <settings_store_setting+0xea>
    case 6: settings.default_seek_rate = value; break;
    26b0:	40 93 8a 06 	sts	0x068A, r20
    26b4:	50 93 8b 06 	sts	0x068B, r21
    26b8:	60 93 8c 06 	sts	0x068C, r22
    26bc:	70 93 8d 06 	sts	0x068D, r23
    26c0:	31 c0       	rjmp	.+98     	; 0x2724 <settings_store_setting+0xea>
    case 7: settings.mm_per_arc_segment = value; break;
    26c2:	40 93 8e 06 	sts	0x068E, r20
    26c6:	50 93 8f 06 	sts	0x068F, r21
    26ca:	60 93 90 06 	sts	0x0690, r22
    26ce:	70 93 91 06 	sts	0x0691, r23
    26d2:	28 c0       	rjmp	.+80     	; 0x2724 <settings_store_setting+0xea>
    case 8: settings.acceleration = value; break;
    26d4:	40 93 92 06 	sts	0x0692, r20
    26d8:	50 93 93 06 	sts	0x0693, r21
    26dc:	60 93 94 06 	sts	0x0694, r22
    26e0:	70 93 95 06 	sts	0x0695, r23
    26e4:	1f c0       	rjmp	.+62     	; 0x2724 <settings_store_setting+0xea>
    case 9: settings.max_jerk = fabs(value); break;
    26e6:	db 01       	movw	r26, r22
    26e8:	ca 01       	movw	r24, r20
    26ea:	bf 77       	andi	r27, 0x7F	; 127
    26ec:	80 93 96 06 	sts	0x0696, r24
    26f0:	90 93 97 06 	sts	0x0697, r25
    26f4:	a0 93 98 06 	sts	0x0698, r26
    26f8:	b0 93 99 06 	sts	0x0699, r27
    26fc:	13 c0       	rjmp	.+38     	; 0x2724 <settings_store_setting+0xea>
    case 1000:
	  if (!!value) st_enable();
    26fe:	cb 01       	movw	r24, r22
    2700:	ba 01       	movw	r22, r20
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__cmpsf2>
    270e:	88 23       	and	r24, r24
    2710:	19 f0       	breq	.+6      	; 0x2718 <settings_store_setting+0xde>
    2712:	0e 94 b4 14 	call	0x2968	; 0x2968 <st_enable>
    2716:	08 95       	ret
      else st_disable();
    2718:	0e 94 b6 14 	call	0x296c	; 0x296c <st_disable>
    271c:	08 95       	ret
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    271e:	81 e4       	ldi	r24, 0x41	; 65
    2720:	93 e0       	ldi	r25, 0x03	; 3
    2722:	04 c0       	rjmp	.+8      	; 0x272c <settings_store_setting+0xf2>
      return;
  }
  write_settings();
    2724:	0e 94 0f 13 	call	0x261e	; 0x261e <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2728:	8c e2       	ldi	r24, 0x2C	; 44
    272a:	93 e0       	ldi	r25, 0x03	; 3
    272c:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
    2730:	08 95       	ret

00002732 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2732:	85 e1       	ldi	r24, 0x15	; 21
    2734:	95 e0       	ldi	r25, 0x05	; 5
    2736:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    273a:	8e e0       	ldi	r24, 0x0E	; 14
    273c:	95 e0       	ldi	r25, 0x05	; 5
    273e:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printPgmString(PSTR("\r\n"));
    2742:	8b e0       	ldi	r24, 0x0B	; 11
    2744:	95 e0       	ldi	r25, 0x05	; 5
    2746:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    274a:	85 e0       	ldi	r24, 0x05	; 5
    274c:	95 e0       	ldi	r25, 0x05	; 5
    274e:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2752:	60 91 74 06 	lds	r22, 0x0674
    2756:	70 91 75 06 	lds	r23, 0x0675
    275a:	80 91 76 06 	lds	r24, 0x0676
    275e:	90 91 77 06 	lds	r25, 0x0677
    2762:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2766:	85 ef       	ldi	r24, 0xF5	; 245
    2768:	94 e0       	ldi	r25, 0x04	; 4
    276a:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    276e:	8f ee       	ldi	r24, 0xEF	; 239
    2770:	94 e0       	ldi	r25, 0x04	; 4
    2772:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2776:	60 91 78 06 	lds	r22, 0x0678
    277a:	70 91 79 06 	lds	r23, 0x0679
    277e:	80 91 7a 06 	lds	r24, 0x067A
    2782:	90 91 7b 06 	lds	r25, 0x067B
    2786:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    278a:	8f ed       	ldi	r24, 0xDF	; 223
    278c:	94 e0       	ldi	r25, 0x04	; 4
    278e:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2792:	89 ed       	ldi	r24, 0xD9	; 217
    2794:	94 e0       	ldi	r25, 0x04	; 4
    2796:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    279a:	60 91 7c 06 	lds	r22, 0x067C
    279e:	70 91 7d 06 	lds	r23, 0x067D
    27a2:	80 91 7e 06 	lds	r24, 0x067E
    27a6:	90 91 7f 06 	lds	r25, 0x067F
    27aa:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    27ae:	89 ec       	ldi	r24, 0xC9	; 201
    27b0:	94 e0       	ldi	r25, 0x04	; 4
    27b2:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    27b6:	83 ec       	ldi	r24, 0xC3	; 195
    27b8:	94 e0       	ldi	r25, 0x04	; 4
    27ba:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    27be:	60 91 80 06 	lds	r22, 0x0680
    27c2:	70 91 81 06 	lds	r23, 0x0681
    27c6:	80 91 82 06 	lds	r24, 0x0682
    27ca:	90 91 83 06 	lds	r25, 0x0683
    27ce:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    27d2:	81 eb       	ldi	r24, 0xB1	; 177
    27d4:	94 e0       	ldi	r25, 0x04	; 4
    27d6:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    27da:	8b ea       	ldi	r24, 0xAB	; 171
    27dc:	94 e0       	ldi	r25, 0x04	; 4
    27de:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printInteger(settings.pulse_microseconds);
    27e2:	60 91 85 06 	lds	r22, 0x0685
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    27f0:	8e e8       	ldi	r24, 0x8E	; 142
    27f2:	94 e0       	ldi	r25, 0x04	; 4
    27f4:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    27f8:	88 e8       	ldi	r24, 0x88	; 136
    27fa:	94 e0       	ldi	r25, 0x04	; 4
    27fc:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.default_feed_rate);
    2800:	60 91 86 06 	lds	r22, 0x0686
    2804:	70 91 87 06 	lds	r23, 0x0687
    2808:	80 91 88 06 	lds	r24, 0x0688
    280c:	90 91 89 06 	lds	r25, 0x0689
    2810:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2814:	8a e6       	ldi	r24, 0x6A	; 106
    2816:	94 e0       	ldi	r25, 0x04	; 4
    2818:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    281c:	84 e6       	ldi	r24, 0x64	; 100
    281e:	94 e0       	ldi	r25, 0x04	; 4
    2820:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.default_seek_rate);
    2824:	60 91 8a 06 	lds	r22, 0x068A
    2828:	70 91 8b 06 	lds	r23, 0x068B
    282c:	80 91 8c 06 	lds	r24, 0x068C
    2830:	90 91 8d 06 	lds	r25, 0x068D
    2834:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2838:	86 e4       	ldi	r24, 0x46	; 70
    283a:	94 e0       	ldi	r25, 0x04	; 4
    283c:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2840:	80 e4       	ldi	r24, 0x40	; 64
    2842:	94 e0       	ldi	r25, 0x04	; 4
    2844:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2848:	60 91 8e 06 	lds	r22, 0x068E
    284c:	70 91 8f 06 	lds	r23, 0x068F
    2850:	80 91 90 06 	lds	r24, 0x0690
    2854:	90 91 91 06 	lds	r25, 0x0691
    2858:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    285c:	8c e2       	ldi	r24, 0x2C	; 44
    285e:	94 e0       	ldi	r25, 0x04	; 4
    2860:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2864:	86 e2       	ldi	r24, 0x26	; 38
    2866:	94 e0       	ldi	r25, 0x04	; 4
    2868:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.acceleration);
    286c:	60 91 92 06 	lds	r22, 0x0692
    2870:	70 91 93 06 	lds	r23, 0x0693
    2874:	80 91 94 06 	lds	r24, 0x0694
    2878:	90 91 95 06 	lds	r25, 0x0695
    287c:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2880:	88 e0       	ldi	r24, 0x08	; 8
    2882:	94 e0       	ldi	r25, 0x04	; 4
    2884:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	94 e0       	ldi	r25, 0x04	; 4
    288c:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printFloat(settings.max_jerk);
    2890:	60 91 96 06 	lds	r22, 0x0696
    2894:	70 91 97 06 	lds	r23, 0x0697
    2898:	80 91 98 06 	lds	r24, 0x0698
    289c:	90 91 99 06 	lds	r25, 0x0699
    28a0:	0e 94 43 1b 	call	0x3686	; 0x3686 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    28a4:	8a ec       	ldi	r24, 0xCA	; 202
    28a6:	93 e0       	ldi	r25, 0x03	; 3
    28a8:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    28ac:	81 ec       	ldi	r24, 0xC1	; 193
    28ae:	93 e0       	ldi	r25, 0x03	; 3
    28b0:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  printInteger(st_is_enabled());
    28b4:	0e 94 b8 14 	call	0x2970	; 0x2970 <st_is_enabled>
    28b8:	aa 27       	eor	r26, r26
    28ba:	97 fd       	sbrc	r25, 7
    28bc:	a0 95       	com	r26
    28be:	ba 2f       	mov	r27, r26
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    28c8:	88 e9       	ldi	r24, 0x98	; 152
    28ca:	93 e0       	ldi	r25, 0x03	; 3
    28cc:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    28d0:	85 e5       	ldi	r24, 0x55	; 85
    28d2:	93 e0       	ldi	r25, 0x03	; 3
    28d4:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
}
    28d8:	08 95       	ret

000028da <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    28da:	0e 94 ce 12 	call	0x259c	; 0x259c <read_settings>
    28de:	89 2b       	or	r24, r25
    28e0:	29 f0       	breq	.+10     	; 0x28ec <settings_init+0x12>
    printPgmString(PSTR("'$' to dump current settings\r\n"));
    28e2:	8d e0       	ldi	r24, 0x0D	; 13
    28e4:	93 e0       	ldi	r25, 0x03	; 3
    28e6:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
    28ea:	08 95       	ret
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    28ec:	82 ed       	ldi	r24, 0xD2	; 210
    28ee:	92 e0       	ldi	r25, 0x02	; 2
    28f0:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
    settings_reset();
    28f4:	0e 94 66 12 	call	0x24cc	; 0x24cc <settings_reset>
    write_settings();
    28f8:	0e 94 0f 13 	call	0x261e	; 0x261e <write_settings>
    settings_dump();
    28fc:	0e 94 99 13 	call	0x2732	; 0x2732 <settings_dump>
    2900:	08 95       	ret

00002902 <spindle_init>:

#include <avr/io.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2902:	e1 e0       	ldi	r30, 0x01	; 1
    2904:	f1 e0       	ldi	r31, 0x01	; 1
    2906:	80 81       	ld	r24, Z
    2908:	80 64       	ori	r24, 0x40	; 64
    290a:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    290c:	27 9a       	sbi	0x04, 7	; 4
}
    290e:	08 95       	ret

00002910 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2910:	97 fd       	sbrc	r25, 7
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <spindle_run+0x8>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2914:	2f 98       	cbi	0x05, 7	; 5
    2916:	01 c0       	rjmp	.+2      	; 0x291a <spindle_run+0xa>
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2918:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    291a:	80 91 02 01 	lds	r24, 0x0102
    291e:	80 64       	ori	r24, 0x40	; 64
    2920:	80 93 02 01 	sts	0x0102, r24
}
    2924:	08 95       	ret

00002926 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2926:	e2 e0       	ldi	r30, 0x02	; 2
    2928:	f1 e0       	ldi	r31, 0x01	; 1
    292a:	80 81       	ld	r24, Z
    292c:	8f 7b       	andi	r24, 0xBF	; 191
    292e:	80 83       	st	Z, r24
}
    2930:	08 95       	ret

00002932 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2932:	ef e6       	ldi	r30, 0x6F	; 111
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	82 60       	ori	r24, 0x02	; 2
    293a:	80 83       	st	Z, r24
}
    293c:	08 95       	ret

0000293e <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	90 93 63 05 	sts	0x0563, r25
    2944:	80 93 62 05 	sts	0x0562, r24
}
    2948:	08 95       	ret

0000294a <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    294a:	1f 92       	push	r1
    294c:	0f 92       	push	r0
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	0f 92       	push	r0
    2952:	11 24       	eor	r1, r1
    2954:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2956:	81 b3       	in	r24, 0x11	; 17
    2958:	8a 7c       	andi	r24, 0xCA	; 202
    295a:	81 bb       	out	0x11, r24	; 17
}
    295c:	8f 91       	pop	r24
    295e:	0f 90       	pop	r0
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	0f 90       	pop	r0
    2964:	1f 90       	pop	r1
    2966:	18 95       	reti

00002968 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2968:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    296a:	08 95       	ret

0000296c <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    296c:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    296e:	08 95       	ret

00002970 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2970:	3c 99       	sbic	0x07, 4	; 7
    2972:	03 c0       	rjmp	.+6      	; 0x297a <st_is_enabled+0xa>
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	07 c0       	rjmp	.+14     	; 0x2988 <st_is_enabled+0x18>
    297a:	88 b1       	in	r24, 0x08	; 8
    297c:	82 95       	swap	r24
    297e:	8f 70       	andi	r24, 0x0F	; 15
    2980:	80 95       	com	r24
    2982:	81 70       	andi	r24, 0x01	; 1
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2988:	c9 01       	movw	r24, r18
    298a:	08 95       	ret

0000298c <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    298c:	60 30       	cpi	r22, 0x00	; 0
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	72 07       	cpc	r23, r18
    2992:	21 e0       	ldi	r18, 0x01	; 1
    2994:	82 07       	cpc	r24, r18
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	92 07       	cpc	r25, r18
    299a:	30 f4       	brcc	.+12     	; 0x29a8 <config_step_timer+0x1c>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    299c:	9b 01       	movw	r18, r22
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	50 e0       	ldi	r21, 0x00	; 0
    29a2:	e0 e0       	ldi	r30, 0x00	; 0
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	72 c0       	rjmp	.+228    	; 0x2a8c <config_step_timer+0x100>
	} else if (cycles <= 0x7ffffL) {
    29a8:	60 30       	cpi	r22, 0x00	; 0
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	72 07       	cpc	r23, r18
    29ae:	28 e0       	ldi	r18, 0x08	; 8
    29b0:	82 07       	cpc	r24, r18
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	92 07       	cpc	r25, r18
    29b6:	a0 f4       	brcc	.+40     	; 0x29e0 <config_step_timer+0x54>
    ceiling = cycles >> 3;
    29b8:	b3 e0       	ldi	r27, 0x03	; 3
    29ba:	96 95       	lsr	r25
    29bc:	87 95       	ror	r24
    29be:	77 95       	ror	r23
    29c0:	67 95       	ror	r22
    29c2:	ba 95       	dec	r27
    29c4:	d1 f7       	brne	.-12     	; 0x29ba <config_step_timer+0x2e>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    29c6:	9b 01       	movw	r18, r22
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	50 e0       	ldi	r21, 0x00	; 0
    29cc:	a3 e0       	ldi	r26, 0x03	; 3
    29ce:	22 0f       	add	r18, r18
    29d0:	33 1f       	adc	r19, r19
    29d2:	44 1f       	adc	r20, r20
    29d4:	55 1f       	adc	r21, r21
    29d6:	aa 95       	dec	r26
    29d8:	d1 f7       	brne	.-12     	; 0x29ce <config_step_timer+0x42>
    29da:	e1 e0       	ldi	r30, 0x01	; 1
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	56 c0       	rjmp	.+172    	; 0x2a8c <config_step_timer+0x100>
	} else if (cycles <= 0x3fffffL) {
    29e0:	60 30       	cpi	r22, 0x00	; 0
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	72 07       	cpc	r23, r18
    29e6:	20 e4       	ldi	r18, 0x40	; 64
    29e8:	82 07       	cpc	r24, r18
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	92 07       	cpc	r25, r18
    29ee:	a0 f4       	brcc	.+40     	; 0x2a18 <config_step_timer+0x8c>
		ceiling =  cycles >> 6;
    29f0:	f6 e0       	ldi	r31, 0x06	; 6
    29f2:	96 95       	lsr	r25
    29f4:	87 95       	ror	r24
    29f6:	77 95       	ror	r23
    29f8:	67 95       	ror	r22
    29fa:	fa 95       	dec	r31
    29fc:	d1 f7       	brne	.-12     	; 0x29f2 <config_step_timer+0x66>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    29fe:	9b 01       	movw	r18, r22
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	50 e0       	ldi	r21, 0x00	; 0
    2a04:	e6 e0       	ldi	r30, 0x06	; 6
    2a06:	22 0f       	add	r18, r18
    2a08:	33 1f       	adc	r19, r19
    2a0a:	44 1f       	adc	r20, r20
    2a0c:	55 1f       	adc	r21, r21
    2a0e:	ea 95       	dec	r30
    2a10:	d1 f7       	brne	.-12     	; 0x2a06 <config_step_timer+0x7a>
    2a12:	e2 e0       	ldi	r30, 0x02	; 2
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	3a c0       	rjmp	.+116    	; 0x2a8c <config_step_timer+0x100>
	} else if (cycles <= 0xffffffL) {
    2a18:	60 30       	cpi	r22, 0x00	; 0
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	72 07       	cpc	r23, r18
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	82 07       	cpc	r24, r18
    2a22:	21 e0       	ldi	r18, 0x01	; 1
    2a24:	92 07       	cpc	r25, r18
    2a26:	70 f4       	brcc	.+28     	; 0x2a44 <config_step_timer+0xb8>
		ceiling =  (cycles >> 8);
    2a28:	bb 27       	eor	r27, r27
    2a2a:	a9 2f       	mov	r26, r25
    2a2c:	98 2f       	mov	r25, r24
    2a2e:	87 2f       	mov	r24, r23
    2a30:	bc 01       	movw	r22, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    2a32:	a0 e0       	ldi	r26, 0x00	; 0
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	22 27       	eor	r18, r18
    2a38:	38 2f       	mov	r19, r24
    2a3a:	49 2f       	mov	r20, r25
    2a3c:	5a 2f       	mov	r21, r26
    2a3e:	e3 e0       	ldi	r30, 0x03	; 3
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	24 c0       	rjmp	.+72     	; 0x2a8c <config_step_timer+0x100>
	} else if (cycles <= 0x3ffffffL) {
    2a44:	60 30       	cpi	r22, 0x00	; 0
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	72 07       	cpc	r23, r18
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	82 07       	cpc	r24, r18
    2a4e:	24 e0       	ldi	r18, 0x04	; 4
    2a50:	92 07       	cpc	r25, r18
    2a52:	48 f0       	brcs	.+18     	; 0x2a66 <config_step_timer+0xda>
    2a54:	6f ef       	ldi	r22, 0xFF	; 255
    2a56:	7f ef       	ldi	r23, 0xFF	; 255
    2a58:	e4 e0       	ldi	r30, 0x04	; 4
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	3c ef       	ldi	r19, 0xFC	; 252
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	13 c0       	rjmp	.+38     	; 0x2a8c <config_step_timer+0x100>
		ceiling = (cycles >> 10);
    2a66:	2a e0       	ldi	r18, 0x0A	; 10
    2a68:	96 95       	lsr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	77 95       	ror	r23
    2a6e:	67 95       	ror	r22
    2a70:	2a 95       	dec	r18
    2a72:	d1 f7       	brne	.-12     	; 0x2a68 <config_step_timer+0xdc>
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    2a74:	9b 01       	movw	r18, r22
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	8a e0       	ldi	r24, 0x0A	; 10
    2a7c:	22 0f       	add	r18, r18
    2a7e:	33 1f       	adc	r19, r19
    2a80:	44 1f       	adc	r20, r20
    2a82:	55 1f       	adc	r21, r21
    2a84:	8a 95       	dec	r24
    2a86:	d1 f7       	brne	.-12     	; 0x2a7c <config_step_timer+0xf0>
    2a88:	e4 e0       	ldi	r30, 0x04	; 4
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    2a8c:	80 91 81 00 	lds	r24, 0x0081
    2a90:	9e 2f       	mov	r25, r30
    2a92:	9f 5f       	subi	r25, 0xFF	; 255
    2a94:	88 7f       	andi	r24, 0xF8	; 248
    2a96:	98 2b       	or	r25, r24
    2a98:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    2a9c:	70 93 89 00 	sts	0x0089, r23
    2aa0:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}
    2aa4:	b9 01       	movw	r22, r18
    2aa6:	ca 01       	movw	r24, r20
    2aa8:	08 95       	ret

00002aaa <set_step_events_per_minute>:

void set_step_events_per_minute(uint32_t steps_per_minute) {
    2aaa:	9b 01       	movw	r18, r22
    2aac:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    2aae:	20 3b       	cpi	r18, 0xB0	; 176
    2ab0:	84 e0       	ldi	r24, 0x04	; 4
    2ab2:	38 07       	cpc	r19, r24
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	48 07       	cpc	r20, r24
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	58 07       	cpc	r21, r24
    2abc:	20 f4       	brcc	.+8      	; 0x2ac6 <set_step_events_per_minute+0x1c>
    2abe:	20 eb       	ldi	r18, 0xB0	; 176
    2ac0:	34 e0       	ldi	r19, 0x04	; 4
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	70 e7       	ldi	r23, 0x70	; 112
    2aca:	88 e3       	ldi	r24, 0x38	; 56
    2acc:	99 e3       	ldi	r25, 0x39	; 57
    2ace:	0e 94 35 21 	call	0x426a	; 0x426a <__udivmodsi4>
    2ad2:	ca 01       	movw	r24, r20
    2ad4:	b9 01       	movw	r22, r18
    2ad6:	0e 94 c6 14 	call	0x298c	; 0x298c <config_step_timer>
    2ada:	60 93 64 05 	sts	0x0564, r22
    2ade:	70 93 65 05 	sts	0x0565, r23
    2ae2:	80 93 66 05 	sts	0x0566, r24
    2ae6:	90 93 67 05 	sts	0x0567, r25
}
    2aea:	08 95       	ret

00002aec <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    2aec:	80 b3       	in	r24, 0x10	; 16
    2aee:	85 63       	ori	r24, 0x35	; 53
    2af0:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    2af2:	80 b3       	in	r24, 0x10	; 16
    2af4:	8a 6c       	ori	r24, 0xCA	; 202
    2af6:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    2af8:	81 b3       	in	r24, 0x11	; 17
    2afa:	8a 7c       	andi	r24, 0xCA	; 202
    2afc:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2afe:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2b00:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    2b02:	e1 e8       	ldi	r30, 0x81	; 129
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	8f 7e       	andi	r24, 0xEF	; 239
    2b0a:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 60       	ori	r24, 0x08	; 8
    2b10:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    2b12:	e0 e8       	ldi	r30, 0x80	; 128
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	8d 7f       	andi	r24, 0xFD	; 253
    2b1a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2b1c:	80 81       	ld	r24, Z
    2b1e:	8e 7f       	andi	r24, 0xFE	; 254
    2b20:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    2b22:	80 81       	ld	r24, Z
    2b24:	8f 73       	andi	r24, 0x3F	; 63
    2b26:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    2b28:	80 81       	ld	r24, Z
    2b2a:	8f 7c       	andi	r24, 0xCF	; 207
    2b2c:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    2b2e:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    2b38:	e0 e7       	ldi	r30, 0x70	; 112
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	81 60       	ori	r24, 0x01	; 1
    2b40:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    2b42:	60 e7       	ldi	r22, 0x70	; 112
    2b44:	77 e1       	ldi	r23, 0x17	; 23
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2b4e:	ef e6       	ldi	r30, 0x6F	; 111
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	8d 7f       	andi	r24, 0xFD	; 253
    2b56:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    2b58:	10 92 68 05 	sts	0x0568, r1
    2b5c:	10 92 69 05 	sts	0x0569, r1
    2b60:	10 92 6a 05 	sts	0x056A, r1
    2b64:	10 92 6b 05 	sts	0x056B, r1
  
  sei();
    2b68:	78 94       	sei
}
    2b6a:	08 95       	ret

00002b6c <moveLeft>:

#define PULSE_LENGTH	( 10 )
#define PULSE_OFF_LENGTH ( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    2b6c:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2b6e:	81 b3       	in	r24, 0x11	; 17
    2b70:	85 73       	andi	r24, 0x35	; 53
    2b72:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b74:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b76:	40 e6       	ldi	r20, 0x60	; 96
    2b78:	54 e0       	ldi	r21, 0x04	; 4
    2b7a:	13 c0       	rjmp	.+38     	; 0x2ba2 <moveLeft+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    2b7c:	21 50       	subi	r18, 0x01	; 1
    2b7e:	30 40       	sbci	r19, 0x00	; 0
    2b80:	4b 9b       	sbis	0x09, 3	; 9
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <moveLeft+0x1c>
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	08 95       	ret
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2b88:	81 b3       	in	r24, 0x11	; 17
    2b8a:	8a 7c       	andi	r24, 0xCA	; 202
    2b8c:	81 60       	ori	r24, 0x01	; 1
    2b8e:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b90:	89 2f       	mov	r24, r25
    2b92:	8a 95       	dec	r24
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <moveLeft+0x26>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2b96:	81 b3       	in	r24, 0x11	; 17
    2b98:	8a 7c       	andi	r24, 0xCA	; 202
    2b9a:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b9c:	fa 01       	movw	r30, r20
    2b9e:	31 97       	sbiw	r30, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <moveLeft+0x32>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2ba2:	21 15       	cp	r18, r1
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	51 f7       	brne	.-44     	; 0x2b7c <moveLeft+0x10>
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    2baa:	08 95       	ret

00002bac <moveRight>:

unsigned char moveRight( unsigned int distance ) 
{
    2bac:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    2bae:	81 b3       	in	r24, 0x11	; 17
    2bb0:	85 73       	andi	r24, 0x35	; 53
    2bb2:	82 60       	ori	r24, 0x02	; 2
    2bb4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bb6:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bb8:	40 e6       	ldi	r20, 0x60	; 96
    2bba:	54 e0       	ldi	r21, 0x04	; 4
    2bbc:	13 c0       	rjmp	.+38     	; 0x2be4 <moveRight+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    2bbe:	21 50       	subi	r18, 0x01	; 1
    2bc0:	30 40       	sbci	r19, 0x00	; 0
    2bc2:	4a 9b       	sbis	0x09, 2	; 9
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <moveRight+0x1e>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	08 95       	ret
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2bca:	81 b3       	in	r24, 0x11	; 17
    2bcc:	8a 7c       	andi	r24, 0xCA	; 202
    2bce:	81 60       	ori	r24, 0x01	; 1
    2bd0:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	8a 95       	dec	r24
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <moveRight+0x28>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    2bd8:	81 b3       	in	r24, 0x11	; 17
    2bda:	8a 7c       	andi	r24, 0xCA	; 202
    2bdc:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bde:	fa 01       	movw	r30, r20
    2be0:	31 97       	sbiw	r30, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <moveRight+0x34>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2be4:	21 15       	cp	r18, r1
    2be6:	31 05       	cpc	r19, r1
    2be8:	51 f7       	brne	.-44     	; 0x2bbe <moveRight+0x12>
    2bea:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2bec:	08 95       	ret

00002bee <moveForward>:

unsigned char moveForward( unsigned int distance ) 
{
    2bee:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2bf0:	81 b3       	in	r24, 0x11	; 17
    2bf2:	85 73       	andi	r24, 0x35	; 53
    2bf4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bf6:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bf8:	40 e6       	ldi	r20, 0x60	; 96
    2bfa:	54 e0       	ldi	r21, 0x04	; 4
    2bfc:	13 c0       	rjmp	.+38     	; 0x2c24 <moveForward+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    2bfe:	21 50       	subi	r18, 0x01	; 1
    2c00:	30 40       	sbci	r19, 0x00	; 0
    2c02:	48 9b       	sbis	0x09, 0	; 9
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <moveForward+0x1c>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	08 95       	ret
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2c0a:	81 b3       	in	r24, 0x11	; 17
    2c0c:	8a 7c       	andi	r24, 0xCA	; 202
    2c0e:	84 60       	ori	r24, 0x04	; 4
    2c10:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c12:	89 2f       	mov	r24, r25
    2c14:	8a 95       	dec	r24
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <moveForward+0x26>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2c18:	81 b3       	in	r24, 0x11	; 17
    2c1a:	8a 7c       	andi	r24, 0xCA	; 202
    2c1c:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c1e:	fa 01       	movw	r30, r20
    2c20:	31 97       	sbiw	r30, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <moveForward+0x32>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2c24:	21 15       	cp	r18, r1
    2c26:	31 05       	cpc	r19, r1
    2c28:	51 f7       	brne	.-44     	; 0x2bfe <moveForward+0x10>
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2c2c:	08 95       	ret

00002c2e <moveBack>:

unsigned char moveBack( unsigned int distance ) 
{
    2c2e:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    2c30:	81 b3       	in	r24, 0x11	; 17
    2c32:	85 73       	andi	r24, 0x35	; 53
    2c34:	88 60       	ori	r24, 0x08	; 8
    2c36:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c38:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c3a:	40 e6       	ldi	r20, 0x60	; 96
    2c3c:	54 e0       	ldi	r21, 0x04	; 4
    2c3e:	13 c0       	rjmp	.+38     	; 0x2c66 <moveBack+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    2c40:	21 50       	subi	r18, 0x01	; 1
    2c42:	30 40       	sbci	r19, 0x00	; 0
    2c44:	49 9b       	sbis	0x09, 1	; 9
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <moveBack+0x1e>
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	08 95       	ret
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2c4c:	81 b3       	in	r24, 0x11	; 17
    2c4e:	8a 7c       	andi	r24, 0xCA	; 202
    2c50:	84 60       	ori	r24, 0x04	; 4
    2c52:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c54:	89 2f       	mov	r24, r25
    2c56:	8a 95       	dec	r24
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <moveBack+0x28>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2c5a:	81 b3       	in	r24, 0x11	; 17
    2c5c:	8a 7c       	andi	r24, 0xCA	; 202
    2c5e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c60:	fa 01       	movw	r30, r20
    2c62:	31 97       	sbiw	r30, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <moveBack+0x34>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2c66:	21 15       	cp	r18, r1
    2c68:	31 05       	cpc	r19, r1
    2c6a:	51 f7       	brne	.-44     	; 0x2c40 <moveBack+0x12>
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    2c6e:	08 95       	ret

00002c70 <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    2c70:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    2c76:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    2c78:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    2c7a:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    2c7c:	9f e8       	ldi	r25, 0x8F	; 143
    2c7e:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    2c80:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    2c82:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    2c86:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    2c8a:	3f ec       	ldi	r19, 0xCF	; 207
    2c8c:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    2c90:	20 ef       	ldi	r18, 0xF0	; 240
    2c92:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    2c96:	8c e9       	ldi	r24, 0x9C	; 156
    2c98:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    2c9a:	82 e2       	ldi	r24, 0x22	; 34
    2c9c:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    2c9e:	83 e1       	ldi	r24, 0x13	; 19
    2ca0:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    2ca2:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    2ca4:	80 e3       	ldi	r24, 0x30	; 48
    2ca6:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    2ca8:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    2caa:	83 e2       	ldi	r24, 0x23	; 35
    2cac:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    2cae:	83 e0       	ldi	r24, 0x03	; 3
    2cb0:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    2cb4:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    2cb8:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    2cbc:	20 93 0b 01 	sts	0x010B, r18
}
    2cc0:	08 95       	ret

00002cc2 <st_go_home>:
  }
  return TRUE;
}

void st_go_home(void)
{
    2cc2:	1f 93       	push	r17
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    2cc8:	10 92 4a 05 	sts	0x054A, r1

// reset position machine thinks we are at.
	plan_init();
    2ccc:	0e 94 07 0b 	call	0x160e	; 0x160e <plan_init>
	gc_init();
    2cd0:	0e 94 23 04 	call	0x846	; 0x846 <gc_init>

	// no interrupts
	cli();
    2cd4:	f8 94       	cli

	// if head down, set head up
	if( is_head_down() ) {
    2cd6:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <is_head_down>
    2cda:	88 23       	and	r24, r24
    2cdc:	69 f0       	breq	.+26     	; 0x2cf8 <st_go_home+0x36>
		head_down(0);
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <head_down>
		
		//check again
		if(is_head_down() ){
    2ce6:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <is_head_down>
    2cea:	88 23       	and	r24, r24
    2cec:	29 f0       	breq	.+10     	; 0x2cf8 <st_go_home+0x36>
			printPgmString(PSTR("home failed\r\n"));
    2cee:	8a e4       	ldi	r24, 0x4A	; 74
    2cf0:	95 e0       	ldi	r25, 0x05	; 5
    2cf2:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
    2cf6:	7d c0       	rjmp	.+250    	; 0x2df2 <st_go_home+0x130>
		}

	}

	// tool changer off
	atc_change(0);	
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 9a 1b 	call	0x3734	; 0x3734 <atc_change>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    2d00:	4b 9b       	sbis	0x09, 3	; 9
    2d02:	16 c0       	rjmp	.+44     	; 0x2d30 <st_go_home+0x6e>
		// no longer homed
		gHomed = FALSE;
    2d04:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("xLimit1\r\n"));
    2d08:	88 e5       	ldi	r24, 0x58	; 88
    2d0a:	95 e0       	ldi	r25, 0x05	; 5
    2d0c:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    2d10:	88 ee       	ldi	r24, 0xE8	; 232
    2d12:	93 e0       	ldi	r25, 0x03	; 3
    2d14:	0e 94 d6 15 	call	0x2bac	; 0x2bac <moveRight>
    2d18:	88 23       	and	r24, r24
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <st_go_home+0x5c>
    2d1c:	6a c0       	rjmp	.+212    	; 0x2df2 <st_go_home+0x130>
			return;
    2d1e:	80 ed       	ldi	r24, 0xD0	; 208
    2d20:	97 e0       	ldi	r25, 0x07	; 7
    2d22:	20 e9       	ldi	r18, 0x90	; 144
    2d24:	31 e0       	ldi	r19, 0x01	; 1
    2d26:	f9 01       	movw	r30, r18
    2d28:	31 97       	sbiw	r30, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <st_go_home+0x66>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2e:	d9 f7       	brne	.-10     	; 0x2d26 <st_go_home+0x64>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    2d30:	48 9b       	sbis	0x09, 0	; 9
    2d32:	16 c0       	rjmp	.+44     	; 0x2d60 <st_go_home+0x9e>
		// no longer homed
		gHomed = FALSE;
    2d34:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("yLimit1\r\n"));
    2d38:	82 e6       	ldi	r24, 0x62	; 98
    2d3a:	95 e0       	ldi	r25, 0x05	; 5
    2d3c:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    2d40:	88 ee       	ldi	r24, 0xE8	; 232
    2d42:	93 e0       	ldi	r25, 0x03	; 3
    2d44:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <moveBack>
    2d48:	88 23       	and	r24, r24
    2d4a:	09 f4       	brne	.+2      	; 0x2d4e <st_go_home+0x8c>
    2d4c:	52 c0       	rjmp	.+164    	; 0x2df2 <st_go_home+0x130>
			return;
    2d4e:	80 ed       	ldi	r24, 0xD0	; 208
    2d50:	97 e0       	ldi	r25, 0x07	; 7
    2d52:	20 e9       	ldi	r18, 0x90	; 144
    2d54:	31 e0       	ldi	r19, 0x01	; 1
    2d56:	f9 01       	movw	r30, r18
    2d58:	31 97       	sbiw	r30, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <st_go_home+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	d9 f7       	brne	.-10     	; 0x2d56 <st_go_home+0x94>
    2d60:	11 e0       	ldi	r17, 0x01	; 1
    2d62:	c0 e0       	ldi	r28, 0x00	; 0
    2d64:	d0 e0       	ldi	r29, 0x00	; 0

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    2d66:	04 9b       	sbis	0x00, 4	; 0
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <st_go_home+0xac>
    2d6a:	10 e0       	ldi	r17, 0x00	; 0
    2d6c:	08 c0       	rjmp	.+16     	; 0x2d7e <st_go_home+0xbc>
			xDir = STOP;
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
    2d6e:	11 30       	cpi	r17, 0x01	; 1
    2d70:	31 f4       	brne	.+12     	; 0x2d7e <st_go_home+0xbc>
			if( moveLeft(1) == 0 ) 
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <moveLeft>
    2d7a:	88 23       	and	r24, r24
    2d7c:	81 f1       	breq	.+96     	; 0x2dde <st_go_home+0x11c>
				goto error;
		}

			counter ++;
    2d7e:	21 96       	adiw	r28, 0x01	; 1

	}while( xDir != STOP );
    2d80:	11 23       	and	r17, r17
    2d82:	89 f7       	brne	.-30     	; 0x2d66 <st_go_home+0xa4>

	printPgmString(PSTR("\r\nleft count = "));
    2d84:	8a e3       	ldi	r24, 0x3A	; 58
    2d86:	95 e0       	ldi	r25, 0x05	; 5
    2d88:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
	printInteger( counter ) ;
    2d8c:	be 01       	movw	r22, r28
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
	printPgmString(PSTR("\r\n"));
    2d96:	87 e3       	ldi	r24, 0x37	; 55
    2d98:	95 e0       	ldi	r25, 0x05	; 5
    2d9a:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
    2d9e:	80 ed       	ldi	r24, 0xD0	; 208
    2da0:	97 e0       	ldi	r25, 0x07	; 7
    2da2:	20 e9       	ldi	r18, 0x90	; 144
    2da4:	31 e0       	ldi	r19, 0x01	; 1
    2da6:	f9 01       	movw	r30, r18
    2da8:	31 97       	sbiw	r30, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <st_go_home+0xe6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	d9 f7       	brne	.-10     	; 0x2da6 <st_go_home+0xe4>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    2db0:	90 99       	sbic	0x12, 0	; 18
    2db2:	07 c0       	rjmp	.+14     	; 0x2dc2 <st_go_home+0x100>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <moveForward>
    2dbc:	88 23       	and	r24, r24
    2dbe:	c1 f7       	brne	.-16     	; 0x2db0 <st_go_home+0xee>
    2dc0:	0e c0       	rjmp	.+28     	; 0x2dde <st_go_home+0x11c>
			counter ++;
		}

	} while( yDir != STOP );

	printPgmString(PSTR("\r\nforward count = "));
    2dc2:	84 e2       	ldi	r24, 0x24	; 36
    2dc4:	95 e0       	ldi	r25, 0x05	; 5
    2dc6:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
	printInteger( counter ) ;
    2dca:	60 e0       	ldi	r22, 0x00	; 0
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
	printPgmString(PSTR("\r\n"));
    2dd6:	81 e2       	ldi	r24, 0x21	; 33
    2dd8:	95 e0       	ldi	r25, 0x05	; 5
    2dda:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>

error:;



	sei();
    2dde:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    2de0:	89 b1       	in	r24, 0x09	; 9
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	8f 70       	andi	r24, 0x0F	; 15
    2de6:	90 70       	andi	r25, 0x00	; 0
    2de8:	89 2b       	or	r24, r25
    2dea:	19 f4       	brne	.+6      	; 0x2df2 <st_go_home+0x130>
		gHomed = TRUE ;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	80 93 4a 05 	sts	0x054A, r24

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\npickobear is not homed\r\n"));
#endif

}
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	08 95       	ret

00002dfa <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    2dfa:	07 c0       	rjmp	.+14     	; 0x2e0a <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    2dfc:	83 b7       	in	r24, 0x33	; 51
    2dfe:	81 60       	ori	r24, 0x01	; 1
    2e00:	83 bf       	out	0x33, r24	; 51
    2e02:	88 95       	sleep
    2e04:	83 b7       	in	r24, 0x33	; 51
    2e06:	8e 7f       	andi	r24, 0xFE	; 254
    2e08:	83 bf       	out	0x33, r24	; 51
    2e0a:	0e 94 8a 09 	call	0x1314	; 0x1314 <plan_get_current_block>
    2e0e:	89 2b       	or	r24, r25
    2e10:	a9 f7       	brne	.-22     	; 0x2dfc <st_synchronize+0x2>
}
    2e12:	08 95       	ret

00002e14 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    2e14:	1f 92       	push	r1
    2e16:	0f 92       	push	r0
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	0f 92       	push	r0
    2e1c:	0b b6       	in	r0, 0x3b	; 59
    2e1e:	0f 92       	push	r0
    2e20:	11 24       	eor	r1, r1
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	2f 93       	push	r18
    2e2c:	3f 93       	push	r19
    2e2e:	4f 93       	push	r20
    2e30:	5f 93       	push	r21
    2e32:	6f 93       	push	r22
    2e34:	7f 93       	push	r23
    2e36:	8f 93       	push	r24
    2e38:	9f 93       	push	r25
    2e3a:	af 93       	push	r26
    2e3c:	bf 93       	push	r27
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	ef 93       	push	r30
    2e44:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE ) 
    2e46:	80 91 4a 05 	lds	r24, 0x054A
    2e4a:	88 23       	and	r24, r24
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <__vector_17+0x3c>
    2e4e:	71 c2       	rjmp	.+1250   	; 0x3332 <__vector_17+0x51e>
		return;

// don't move if the head is down  
  if( is_head_down() )
    2e50:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <is_head_down>
    2e54:	88 23       	and	r24, r24
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <__vector_17+0x46>
    2e58:	6c c2       	rjmp	.+1240   	; 0x3332 <__vector_17+0x51e>
  	return;

  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    2e5a:	80 91 62 05 	lds	r24, 0x0562
    2e5e:	90 91 63 05 	lds	r25, 0x0563
    2e62:	89 2b       	or	r24, r25
    2e64:	09 f0       	breq	.+2      	; 0x2e68 <__vector_17+0x54>
    2e66:	65 c2       	rjmp	.+1226   	; 0x3332 <__vector_17+0x51e>

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    2e68:	89 b1       	in	r24, 0x09	; 9
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	8f 70       	andi	r24, 0x0F	; 15
    2e6e:	90 70       	andi	r25, 0x00	; 0
    2e70:	89 2b       	or	r24, r25
    2e72:	19 f0       	breq	.+6      	; 0x2e7a <__vector_17+0x66>
  	gHomed = FALSE ;
    2e74:	10 92 4a 05 	sts	0x054A, r1
    2e78:	5c c2       	rjmp	.+1208   	; 0x3332 <__vector_17+0x51e>
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    2e7a:	91 b3       	in	r25, 0x11	; 17
    2e7c:	80 91 9a 06 	lds	r24, 0x069A
    2e80:	8a 7c       	andi	r24, 0xCA	; 202
    2e82:	95 73       	andi	r25, 0x35	; 53
    2e84:	89 2b       	or	r24, r25
    2e86:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    2e88:	81 b3       	in	r24, 0x11	; 17
    2e8a:	8a 7c       	andi	r24, 0xCA	; 202
    2e8c:	90 91 4d 05 	lds	r25, 0x054D
    2e90:	89 2b       	or	r24, r25
    2e92:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    2e94:	80 91 85 06 	lds	r24, 0x0685
    2e98:	88 0f       	add	r24, r24
    2e9a:	84 50       	subi	r24, 0x04	; 4
    2e9c:	81 95       	neg	r24
    2e9e:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    2ea2:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	90 93 63 05 	sts	0x0563, r25
    2eac:	80 93 62 05 	sts	0x0562, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    2eb0:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    2eb2:	80 91 4b 05 	lds	r24, 0x054B
    2eb6:	90 91 4c 05 	lds	r25, 0x054C
    2eba:	89 2b       	or	r24, r25
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <__vector_17+0xac>
    2ebe:	5d c0       	rjmp	.+186    	; 0x2f7a <__vector_17+0x166>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    2ec0:	0e 94 8a 09 	call	0x1314	; 0x1314 <plan_get_current_block>
    2ec4:	ec 01       	movw	r28, r24
    2ec6:	90 93 4c 05 	sts	0x054C, r25
    2eca:	80 93 4b 05 	sts	0x054B, r24
    if (current_block != NULL) {
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <__vector_17+0xc0>
    2ed2:	4e c0       	rjmp	.+156    	; 0x2f70 <__vector_17+0x15c>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    2ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    2eda:	98 ad       	ldd	r25, Y+56	; 0x38
    2edc:	60 93 6c 05 	sts	0x056C, r22
    2ee0:	70 93 6d 05 	sts	0x056D, r23
    2ee4:	80 93 6e 05 	sts	0x056E, r24
    2ee8:	90 93 6f 05 	sts	0x056F, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    2eec:	10 92 68 05 	sts	0x0568, r1
    2ef0:	10 92 69 05 	sts	0x0569, r1
    2ef4:	10 92 6a 05 	sts	0x056A, r1
    2ef8:	10 92 6b 05 	sts	0x056B, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    2efc:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    2f00:	89 89       	ldd	r24, Y+17	; 0x11
    2f02:	9a 89       	ldd	r25, Y+18	; 0x12
    2f04:	ab 89       	ldd	r26, Y+19	; 0x13
    2f06:	bc 89       	ldd	r27, Y+20	; 0x14
    2f08:	b5 95       	asr	r27
    2f0a:	a7 95       	ror	r26
    2f0c:	97 95       	ror	r25
    2f0e:	87 95       	ror	r24
    2f10:	b0 95       	com	r27
    2f12:	a0 95       	com	r26
    2f14:	90 95       	com	r25
    2f16:	81 95       	neg	r24
    2f18:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1a:	af 4f       	sbci	r26, 0xFF	; 255
    2f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1e:	80 93 4e 05 	sts	0x054E, r24
    2f22:	90 93 4f 05 	sts	0x054F, r25
    2f26:	a0 93 50 05 	sts	0x0550, r26
    2f2a:	b0 93 51 05 	sts	0x0551, r27
      counter_y = counter_x;
    2f2e:	80 93 52 05 	sts	0x0552, r24
    2f32:	90 93 53 05 	sts	0x0553, r25
    2f36:	a0 93 54 05 	sts	0x0554, r26
    2f3a:	b0 93 55 05 	sts	0x0555, r27
      counter_z = counter_x;
    2f3e:	80 93 56 05 	sts	0x0556, r24
    2f42:	90 93 57 05 	sts	0x0557, r25
    2f46:	a0 93 58 05 	sts	0x0558, r26
    2f4a:	b0 93 59 05 	sts	0x0559, r27
      counter_c = counter_x;
    2f4e:	80 93 5a 05 	sts	0x055A, r24
    2f52:	90 93 5b 05 	sts	0x055B, r25
    2f56:	a0 93 5c 05 	sts	0x055C, r26
    2f5a:	b0 93 5d 05 	sts	0x055D, r27
      step_events_completed = 0;
    2f5e:	10 92 5e 05 	sts	0x055E, r1
    2f62:	10 92 5f 05 	sts	0x055F, r1
    2f66:	10 92 60 05 	sts	0x0560, r1
    2f6a:	10 92 61 05 	sts	0x0561, r1
    2f6e:	05 c0       	rjmp	.+10     	; 0x2f7a <__vector_17+0x166>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    2f70:	80 91 6f 00 	lds	r24, 0x006F
    2f74:	8d 7f       	andi	r24, 0xFD	; 253
    2f76:	80 93 6f 00 	sts	0x006F, r24
    }    
  } 

  if (current_block != NULL) {
    2f7a:	e0 91 4b 05 	lds	r30, 0x054B
    2f7e:	f0 91 4c 05 	lds	r31, 0x054C
    2f82:	30 97       	sbiw	r30, 0x00	; 0
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__vector_17+0x174>
    2f86:	ee c0       	rjmp	.+476    	; 0x3164 <__vector_17+0x350>
    dir_bits = current_block->direction_bits;
    2f88:	80 89       	ldd	r24, Z+16	; 0x10
    2f8a:	80 93 9a 06 	sts	0x069A, r24
    out_bits = 0;
    2f8e:	10 92 4d 05 	sts	0x054D, r1
    counter_x += current_block->steps_x;
    2f92:	20 91 4e 05 	lds	r18, 0x054E
    2f96:	30 91 4f 05 	lds	r19, 0x054F
    2f9a:	40 91 50 05 	lds	r20, 0x0550
    2f9e:	50 91 51 05 	lds	r21, 0x0551
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	a2 81       	ldd	r26, Z+2	; 0x02
    2fa8:	b3 81       	ldd	r27, Z+3	; 0x03
    2faa:	28 0f       	add	r18, r24
    2fac:	39 1f       	adc	r19, r25
    2fae:	4a 1f       	adc	r20, r26
    2fb0:	5b 1f       	adc	r21, r27
    2fb2:	20 93 4e 05 	sts	0x054E, r18
    2fb6:	30 93 4f 05 	sts	0x054F, r19
    2fba:	40 93 50 05 	sts	0x0550, r20
    2fbe:	50 93 51 05 	sts	0x0551, r21
    if (counter_x > 0) {
    2fc2:	12 16       	cp	r1, r18
    2fc4:	13 06       	cpc	r1, r19
    2fc6:	14 06       	cpc	r1, r20
    2fc8:	15 06       	cpc	r1, r21
    2fca:	9c f4       	brge	.+38     	; 0x2ff2 <__vector_17+0x1de>
      out_bits |= (1<<X_STEP_BIT);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	80 93 4d 05 	sts	0x054D, r24
      counter_x -= current_block->step_event_count;
    2fd2:	81 89       	ldd	r24, Z+17	; 0x11
    2fd4:	92 89       	ldd	r25, Z+18	; 0x12
    2fd6:	a3 89       	ldd	r26, Z+19	; 0x13
    2fd8:	b4 89       	ldd	r27, Z+20	; 0x14
    2fda:	28 1b       	sub	r18, r24
    2fdc:	39 0b       	sbc	r19, r25
    2fde:	4a 0b       	sbc	r20, r26
    2fe0:	5b 0b       	sbc	r21, r27
    2fe2:	20 93 4e 05 	sts	0x054E, r18
    2fe6:	30 93 4f 05 	sts	0x054F, r19
    2fea:	40 93 50 05 	sts	0x0550, r20
    2fee:	50 93 51 05 	sts	0x0551, r21
    }
    counter_y += current_block->steps_y;
    2ff2:	20 91 52 05 	lds	r18, 0x0552
    2ff6:	30 91 53 05 	lds	r19, 0x0553
    2ffa:	40 91 54 05 	lds	r20, 0x0554
    2ffe:	50 91 55 05 	lds	r21, 0x0555
    3002:	84 81       	ldd	r24, Z+4	; 0x04
    3004:	95 81       	ldd	r25, Z+5	; 0x05
    3006:	a6 81       	ldd	r26, Z+6	; 0x06
    3008:	b7 81       	ldd	r27, Z+7	; 0x07
    300a:	28 0f       	add	r18, r24
    300c:	39 1f       	adc	r19, r25
    300e:	4a 1f       	adc	r20, r26
    3010:	5b 1f       	adc	r21, r27
    3012:	20 93 52 05 	sts	0x0552, r18
    3016:	30 93 53 05 	sts	0x0553, r19
    301a:	40 93 54 05 	sts	0x0554, r20
    301e:	50 93 55 05 	sts	0x0555, r21
    if (counter_y > 0) {
    3022:	12 16       	cp	r1, r18
    3024:	13 06       	cpc	r1, r19
    3026:	14 06       	cpc	r1, r20
    3028:	15 06       	cpc	r1, r21
    302a:	ac f4       	brge	.+42     	; 0x3056 <__vector_17+0x242>
      out_bits |= (1<<Y_STEP_BIT);
    302c:	80 91 4d 05 	lds	r24, 0x054D
    3030:	84 60       	ori	r24, 0x04	; 4
    3032:	80 93 4d 05 	sts	0x054D, r24
      counter_y -= current_block->step_event_count;
    3036:	81 89       	ldd	r24, Z+17	; 0x11
    3038:	92 89       	ldd	r25, Z+18	; 0x12
    303a:	a3 89       	ldd	r26, Z+19	; 0x13
    303c:	b4 89       	ldd	r27, Z+20	; 0x14
    303e:	28 1b       	sub	r18, r24
    3040:	39 0b       	sbc	r19, r25
    3042:	4a 0b       	sbc	r20, r26
    3044:	5b 0b       	sbc	r21, r27
    3046:	20 93 52 05 	sts	0x0552, r18
    304a:	30 93 53 05 	sts	0x0553, r19
    304e:	40 93 54 05 	sts	0x0554, r20
    3052:	50 93 55 05 	sts	0x0555, r21
    }
    counter_z += current_block->steps_z;
    3056:	20 91 56 05 	lds	r18, 0x0556
    305a:	30 91 57 05 	lds	r19, 0x0557
    305e:	40 91 58 05 	lds	r20, 0x0558
    3062:	50 91 59 05 	lds	r21, 0x0559
    3066:	80 85       	ldd	r24, Z+8	; 0x08
    3068:	91 85       	ldd	r25, Z+9	; 0x09
    306a:	a2 85       	ldd	r26, Z+10	; 0x0a
    306c:	b3 85       	ldd	r27, Z+11	; 0x0b
    306e:	28 0f       	add	r18, r24
    3070:	39 1f       	adc	r19, r25
    3072:	4a 1f       	adc	r20, r26
    3074:	5b 1f       	adc	r21, r27
    3076:	20 93 56 05 	sts	0x0556, r18
    307a:	30 93 57 05 	sts	0x0557, r19
    307e:	40 93 58 05 	sts	0x0558, r20
    3082:	50 93 59 05 	sts	0x0559, r21
    if (counter_z > 0) {
    3086:	12 16       	cp	r1, r18
    3088:	13 06       	cpc	r1, r19
    308a:	14 06       	cpc	r1, r20
    308c:	15 06       	cpc	r1, r21
    308e:	ac f4       	brge	.+42     	; 0x30ba <__vector_17+0x2a6>
      out_bits |= (1<<Z_STEP_BIT);
    3090:	80 91 4d 05 	lds	r24, 0x054D
    3094:	80 61       	ori	r24, 0x10	; 16
    3096:	80 93 4d 05 	sts	0x054D, r24
      counter_z -= current_block->step_event_count;
    309a:	81 89       	ldd	r24, Z+17	; 0x11
    309c:	92 89       	ldd	r25, Z+18	; 0x12
    309e:	a3 89       	ldd	r26, Z+19	; 0x13
    30a0:	b4 89       	ldd	r27, Z+20	; 0x14
    30a2:	28 1b       	sub	r18, r24
    30a4:	39 0b       	sbc	r19, r25
    30a6:	4a 0b       	sbc	r20, r26
    30a8:	5b 0b       	sbc	r21, r27
    30aa:	20 93 56 05 	sts	0x0556, r18
    30ae:	30 93 57 05 	sts	0x0557, r19
    30b2:	40 93 58 05 	sts	0x0558, r20
    30b6:	50 93 59 05 	sts	0x0559, r21
    }
    counter_c += current_block->steps_c;
    30ba:	20 91 5a 05 	lds	r18, 0x055A
    30be:	30 91 5b 05 	lds	r19, 0x055B
    30c2:	40 91 5c 05 	lds	r20, 0x055C
    30c6:	50 91 5d 05 	lds	r21, 0x055D
    30ca:	84 85       	ldd	r24, Z+12	; 0x0c
    30cc:	95 85       	ldd	r25, Z+13	; 0x0d
    30ce:	a6 85       	ldd	r26, Z+14	; 0x0e
    30d0:	b7 85       	ldd	r27, Z+15	; 0x0f
    30d2:	28 0f       	add	r18, r24
    30d4:	39 1f       	adc	r19, r25
    30d6:	4a 1f       	adc	r20, r26
    30d8:	5b 1f       	adc	r21, r27
    30da:	20 93 5a 05 	sts	0x055A, r18
    30de:	30 93 5b 05 	sts	0x055B, r19
    30e2:	40 93 5c 05 	sts	0x055C, r20
    30e6:	50 93 5d 05 	sts	0x055D, r21
    if (counter_c > 0) {
    30ea:	12 16       	cp	r1, r18
    30ec:	13 06       	cpc	r1, r19
    30ee:	14 06       	cpc	r1, r20
    30f0:	15 06       	cpc	r1, r21
    30f2:	ac f4       	brge	.+42     	; 0x311e <__vector_17+0x30a>
      out_bits |= (1<<C_STEP_BIT);
    30f4:	80 91 4d 05 	lds	r24, 0x054D
    30f8:	80 62       	ori	r24, 0x20	; 32
    30fa:	80 93 4d 05 	sts	0x054D, r24
      counter_c -= current_block->step_event_count;
    30fe:	81 89       	ldd	r24, Z+17	; 0x11
    3100:	92 89       	ldd	r25, Z+18	; 0x12
    3102:	a3 89       	ldd	r26, Z+19	; 0x13
    3104:	b4 89       	ldd	r27, Z+20	; 0x14
    3106:	28 1b       	sub	r18, r24
    3108:	39 0b       	sbc	r19, r25
    310a:	4a 0b       	sbc	r20, r26
    310c:	5b 0b       	sbc	r21, r27
    310e:	20 93 5a 05 	sts	0x055A, r18
    3112:	30 93 5b 05 	sts	0x055B, r19
    3116:	40 93 5c 05 	sts	0x055C, r20
    311a:	50 93 5d 05 	sts	0x055D, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    311e:	80 91 5e 05 	lds	r24, 0x055E
    3122:	90 91 5f 05 	lds	r25, 0x055F
    3126:	a0 91 60 05 	lds	r26, 0x0560
    312a:	b0 91 61 05 	lds	r27, 0x0561
    312e:	01 96       	adiw	r24, 0x01	; 1
    3130:	a1 1d       	adc	r26, r1
    3132:	b1 1d       	adc	r27, r1
    3134:	80 93 5e 05 	sts	0x055E, r24
    3138:	90 93 5f 05 	sts	0x055F, r25
    313c:	a0 93 60 05 	sts	0x0560, r26
    3140:	b0 93 61 05 	sts	0x0561, r27
    if (step_events_completed >= current_block->step_event_count) {
    3144:	21 89       	ldd	r18, Z+17	; 0x11
    3146:	32 89       	ldd	r19, Z+18	; 0x12
    3148:	43 89       	ldd	r20, Z+19	; 0x13
    314a:	54 89       	ldd	r21, Z+20	; 0x14
    314c:	82 17       	cp	r24, r18
    314e:	93 07       	cpc	r25, r19
    3150:	a4 07       	cpc	r26, r20
    3152:	b5 07       	cpc	r27, r21
    3154:	48 f0       	brcs	.+18     	; 0x3168 <__vector_17+0x354>
      current_block = NULL;
    3156:	10 92 4c 05 	sts	0x054C, r1
    315a:	10 92 4b 05 	sts	0x054B, r1
      plan_discard_current_block();
    315e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <plan_discard_current_block>
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <__vector_17+0x354>
    }
  } else {
    out_bits = 0;
    3164:	10 92 4d 05 	sts	0x054D, r1
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    3168:	80 91 9a 06 	lds	r24, 0x069A
    316c:	9a e0       	ldi	r25, 0x0A	; 10
    316e:	89 27       	eor	r24, r25
    3170:	80 93 9a 06 	sts	0x069A, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    3174:	20 91 64 05 	lds	r18, 0x0564
    3178:	30 91 65 05 	lds	r19, 0x0565
    317c:	40 91 66 05 	lds	r20, 0x0566
    3180:	50 91 67 05 	lds	r21, 0x0567
    3184:	80 91 68 05 	lds	r24, 0x0568
    3188:	90 91 69 05 	lds	r25, 0x0569
    318c:	a0 91 6a 05 	lds	r26, 0x056A
    3190:	b0 91 6b 05 	lds	r27, 0x056B
    3194:	28 0f       	add	r18, r24
    3196:	39 1f       	adc	r19, r25
    3198:	4a 1f       	adc	r20, r26
    319a:	5b 1f       	adc	r21, r27
    319c:	20 93 68 05 	sts	0x0568, r18
    31a0:	30 93 69 05 	sts	0x0569, r19
    31a4:	40 93 6a 05 	sts	0x056A, r20
    31a8:	50 93 6b 05 	sts	0x056B, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    31ac:	21 38       	cpi	r18, 0x81	; 129
    31ae:	8a e1       	ldi	r24, 0x1A	; 26
    31b0:	38 07       	cpc	r19, r24
    31b2:	86 e0       	ldi	r24, 0x06	; 6
    31b4:	48 07       	cpc	r20, r24
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	58 07       	cpc	r21, r24
    31ba:	08 f4       	brcc	.+2      	; 0x31be <__vector_17+0x3aa>
    31bc:	b6 c0       	rjmp	.+364    	; 0x332a <__vector_17+0x516>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    31be:	20 58       	subi	r18, 0x80	; 128
    31c0:	3a 41       	sbci	r19, 0x1A	; 26
    31c2:	46 40       	sbci	r20, 0x06	; 6
    31c4:	50 40       	sbci	r21, 0x00	; 0
    31c6:	20 93 68 05 	sts	0x0568, r18
    31ca:	30 93 69 05 	sts	0x0569, r19
    31ce:	40 93 6a 05 	sts	0x056A, r20
    31d2:	50 93 6b 05 	sts	0x056B, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    31d6:	e0 91 4b 05 	lds	r30, 0x054B
    31da:	f0 91 4c 05 	lds	r31, 0x054C
    31de:	30 97       	sbiw	r30, 0x00	; 0
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <__vector_17+0x3d0>
    31e2:	a3 c0       	rjmp	.+326    	; 0x332a <__vector_17+0x516>
    if (step_events_completed < current_block->accelerate_until) {
    31e4:	e0 90 5e 05 	lds	r14, 0x055E
    31e8:	f0 90 5f 05 	lds	r15, 0x055F
    31ec:	00 91 60 05 	lds	r16, 0x0560
    31f0:	10 91 61 05 	lds	r17, 0x0561
    31f4:	ef 5b       	subi	r30, 0xBF	; 191
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 81       	ld	r24, Z
    31fa:	91 81       	ldd	r25, Z+1	; 0x01
    31fc:	a2 81       	ldd	r26, Z+2	; 0x02
    31fe:	b3 81       	ldd	r27, Z+3	; 0x03
    3200:	e1 54       	subi	r30, 0x41	; 65
    3202:	f0 40       	sbci	r31, 0x00	; 0
    3204:	e8 16       	cp	r14, r24
    3206:	f9 06       	cpc	r15, r25
    3208:	0a 07       	cpc	r16, r26
    320a:	1b 07       	cpc	r17, r27
    320c:	68 f5       	brcc	.+90     	; 0x3268 <__vector_17+0x454>
      trapezoid_adjusted_rate += current_block->rate_delta;
    320e:	fd 96       	adiw	r30, 0x3d	; 61
    3210:	20 81       	ld	r18, Z
    3212:	31 81       	ldd	r19, Z+1	; 0x01
    3214:	42 81       	ldd	r20, Z+2	; 0x02
    3216:	53 81       	ldd	r21, Z+3	; 0x03
    3218:	fd 97       	sbiw	r30, 0x3d	; 61
    321a:	80 91 6c 05 	lds	r24, 0x056C
    321e:	90 91 6d 05 	lds	r25, 0x056D
    3222:	a0 91 6e 05 	lds	r26, 0x056E
    3226:	b0 91 6f 05 	lds	r27, 0x056F
    322a:	28 0f       	add	r18, r24
    322c:	39 1f       	adc	r19, r25
    322e:	4a 1f       	adc	r20, r26
    3230:	5b 1f       	adc	r21, r27
    3232:	20 93 6c 05 	sts	0x056C, r18
    3236:	30 93 6d 05 	sts	0x056D, r19
    323a:	40 93 6e 05 	sts	0x056E, r20
    323e:	50 93 6f 05 	sts	0x056F, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3242:	85 89       	ldd	r24, Z+21	; 0x15
    3244:	96 89       	ldd	r25, Z+22	; 0x16
    3246:	a7 89       	ldd	r26, Z+23	; 0x17
    3248:	b0 8d       	ldd	r27, Z+24	; 0x18
    324a:	82 17       	cp	r24, r18
    324c:	93 07       	cpc	r25, r19
    324e:	a4 07       	cpc	r26, r20
    3250:	b5 07       	cpc	r27, r21
    3252:	08 f0       	brcs	.+2      	; 0x3256 <__vector_17+0x442>
    3254:	4e c0       	rjmp	.+156    	; 0x32f2 <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3256:	80 93 6c 05 	sts	0x056C, r24
    325a:	90 93 6d 05 	sts	0x056D, r25
    325e:	a0 93 6e 05 	sts	0x056E, r26
    3262:	b0 93 6f 05 	sts	0x056F, r27
    3266:	45 c0       	rjmp	.+138    	; 0x32f2 <__vector_17+0x4de>
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3268:	eb 5b       	subi	r30, 0xBB	; 187
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	a2 81       	ldd	r26, Z+2	; 0x02
    3272:	b3 81       	ldd	r27, Z+3	; 0x03
    3274:	e5 54       	subi	r30, 0x45	; 69
    3276:	f0 40       	sbci	r31, 0x00	; 0
    3278:	20 91 6c 05 	lds	r18, 0x056C
    327c:	30 91 6d 05 	lds	r19, 0x056D
    3280:	40 91 6e 05 	lds	r20, 0x056E
    3284:	50 91 6f 05 	lds	r21, 0x056F
    3288:	8e 15       	cp	r24, r14
    328a:	9f 05       	cpc	r25, r15
    328c:	a0 07       	cpc	r26, r16
    328e:	b1 07       	cpc	r27, r17
    3290:	c8 f5       	brcc	.+114    	; 0x3304 <__vector_17+0x4f0>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    3292:	fd 96       	adiw	r30, 0x3d	; 61
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	a2 81       	ldd	r26, Z+2	; 0x02
    329a:	b3 81       	ldd	r27, Z+3	; 0x03
    329c:	fd 97       	sbiw	r30, 0x3d	; 61
    329e:	82 17       	cp	r24, r18
    32a0:	93 07       	cpc	r25, r19
    32a2:	a4 07       	cpc	r26, r20
    32a4:	b5 07       	cpc	r27, r21
    32a6:	60 f4       	brcc	.+24     	; 0x32c0 <__vector_17+0x4ac>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    32a8:	28 1b       	sub	r18, r24
    32aa:	39 0b       	sbc	r19, r25
    32ac:	4a 0b       	sbc	r20, r26
    32ae:	5b 0b       	sbc	r21, r27
    32b0:	20 93 6c 05 	sts	0x056C, r18
    32b4:	30 93 6d 05 	sts	0x056D, r19
    32b8:	40 93 6e 05 	sts	0x056E, r20
    32bc:	50 93 6f 05 	sts	0x056F, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    32c0:	21 ad       	ldd	r18, Z+57	; 0x39
    32c2:	32 ad       	ldd	r19, Z+58	; 0x3a
    32c4:	43 ad       	ldd	r20, Z+59	; 0x3b
    32c6:	54 ad       	ldd	r21, Z+60	; 0x3c
    32c8:	80 91 6c 05 	lds	r24, 0x056C
    32cc:	90 91 6d 05 	lds	r25, 0x056D
    32d0:	a0 91 6e 05 	lds	r26, 0x056E
    32d4:	b0 91 6f 05 	lds	r27, 0x056F
    32d8:	82 17       	cp	r24, r18
    32da:	93 07       	cpc	r25, r19
    32dc:	a4 07       	cpc	r26, r20
    32de:	b5 07       	cpc	r27, r21
    32e0:	40 f4       	brcc	.+16     	; 0x32f2 <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->final_rate;
    32e2:	20 93 6c 05 	sts	0x056C, r18
    32e6:	30 93 6d 05 	sts	0x056D, r19
    32ea:	40 93 6e 05 	sts	0x056E, r20
    32ee:	50 93 6f 05 	sts	0x056F, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    32f2:	60 91 6c 05 	lds	r22, 0x056C
    32f6:	70 91 6d 05 	lds	r23, 0x056D
    32fa:	80 91 6e 05 	lds	r24, 0x056E
    32fe:	90 91 6f 05 	lds	r25, 0x056F
    3302:	11 c0       	rjmp	.+34     	; 0x3326 <__vector_17+0x512>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3304:	65 89       	ldd	r22, Z+21	; 0x15
    3306:	76 89       	ldd	r23, Z+22	; 0x16
    3308:	87 89       	ldd	r24, Z+23	; 0x17
    330a:	90 8d       	ldd	r25, Z+24	; 0x18
    330c:	26 17       	cp	r18, r22
    330e:	37 07       	cpc	r19, r23
    3310:	48 07       	cpc	r20, r24
    3312:	59 07       	cpc	r21, r25
    3314:	51 f0       	breq	.+20     	; 0x332a <__vector_17+0x516>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3316:	60 93 6c 05 	sts	0x056C, r22
    331a:	70 93 6d 05 	sts	0x056D, r23
    331e:	80 93 6e 05 	sts	0x056E, r24
    3322:	90 93 6f 05 	sts	0x056F, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3326:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    332a:	10 92 63 05 	sts	0x0563, r1
    332e:	10 92 62 05 	sts	0x0562, r1
}
    3332:	ff 91       	pop	r31
    3334:	ef 91       	pop	r30
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	bf 91       	pop	r27
    333c:	af 91       	pop	r26
    333e:	9f 91       	pop	r25
    3340:	8f 91       	pop	r24
    3342:	7f 91       	pop	r23
    3344:	6f 91       	pop	r22
    3346:	5f 91       	pop	r21
    3348:	4f 91       	pop	r20
    334a:	3f 91       	pop	r19
    334c:	2f 91       	pop	r18
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ff 90       	pop	r15
    3354:	ef 90       	pop	r14
    3356:	0f 90       	pop	r0
    3358:	0b be       	out	0x3b, r0	; 59
    335a:	0f 90       	pop	r0
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	0f 90       	pop	r0
    3360:	1f 90       	pop	r1
    3362:	18 95       	reti

00003364 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	7b 01       	movw	r14, r22
    336e:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    3370:	22 e0       	ldi	r18, 0x02	; 2
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	50 e0       	ldi	r21, 0x00	; 0
    3378:	0e 94 57 21 	call	0x42ae	; 0x42ae <__divmodsi4>
    337c:	20 5c       	subi	r18, 0xC0	; 192
    337e:	3d 4b       	sbci	r19, 0xBD	; 189
    3380:	40 4f       	sbci	r20, 0xF0	; 240
    3382:	5f 4f       	sbci	r21, 0xFF	; 255
    3384:	ca 01       	movw	r24, r20
    3386:	b9 01       	movw	r22, r18
    3388:	a8 01       	movw	r20, r16
    338a:	97 01       	movw	r18, r14
    338c:	0e 94 35 21 	call	0x426a	; 0x426a <__udivmodsi4>
    3390:	c9 01       	movw	r24, r18
    3392:	da 01       	movw	r26, r20
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	a1 09       	sbc	r26, r1
    3398:	b1 09       	sbc	r27, r1
    339a:	29 2f       	mov	r18, r25
    339c:	3a 2f       	mov	r19, r26
    339e:	4b 2f       	mov	r20, r27
    33a0:	55 27       	eor	r21, r21
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	a1 1d       	adc	r26, r1
    33a6:	b1 1d       	adc	r27, r1
    33a8:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    33ac:	81 50       	subi	r24, 0x01	; 1
    33ae:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    33b2:	e0 ec       	ldi	r30, 0xC0	; 192
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	8d 7f       	andi	r24, 0xFD	; 253
    33ba:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    33bc:	e1 ec       	ldi	r30, 0xC1	; 193
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	80 61       	ori	r24, 0x10	; 16
    33c4:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    33c6:	80 81       	ld	r24, Z
    33c8:	88 60       	ori	r24, 0x08	; 8
    33ca:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    33cc:	80 81       	ld	r24, Z
    33ce:	80 68       	ori	r24, 0x80	; 128
    33d0:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	08 95       	ret

000033dc <serialWrite>:

void serialWrite(unsigned char c)
{
    33dc:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    33de:	80 91 c0 00 	lds	r24, 0x00C0
    33e2:	85 ff       	sbrs	r24, 5
    33e4:	fc cf       	rjmp	.-8      	; 0x33de <serialWrite+0x2>
		;
	UDR0 = c;
    33e6:	90 93 c6 00 	sts	0x00C6, r25
}
    33ea:	08 95       	ret

000033ec <serialAvailable>:

int serialAvailable()
{
    33ec:	80 91 70 05 	lds	r24, 0x0570
    33f0:	90 91 71 05 	lds	r25, 0x0571
    33f4:	80 50       	subi	r24, 0x00	; 0
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	20 91 72 05 	lds	r18, 0x0572
    33fc:	30 91 73 05 	lds	r19, 0x0573
    3400:	82 1b       	sub	r24, r18
    3402:	93 0b       	sbc	r25, r19
    3404:	60 e0       	ldi	r22, 0x00	; 0
    3406:	71 e0       	ldi	r23, 0x01	; 1
    3408:	0e 94 22 21 	call	0x4244	; 0x4244 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    340c:	08 95       	ret

0000340e <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    340e:	40 91 72 05 	lds	r20, 0x0572
    3412:	50 91 73 05 	lds	r21, 0x0573
    3416:	80 91 70 05 	lds	r24, 0x0570
    341a:	90 91 71 05 	lds	r25, 0x0571
    341e:	84 17       	cp	r24, r20
    3420:	95 07       	cpc	r25, r21
    3422:	19 f4       	brne	.+6      	; 0x342a <serialRead+0x1c>
    3424:	2f ef       	ldi	r18, 0xFF	; 255
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	0f c0       	rjmp	.+30     	; 0x3448 <serialRead+0x3a>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    342a:	fa 01       	movw	r30, r20
    342c:	ec 58       	subi	r30, 0x8C	; 140
    342e:	fa 4f       	sbci	r31, 0xFA	; 250
    3430:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3432:	ca 01       	movw	r24, r20
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	60 e0       	ldi	r22, 0x00	; 0
    3438:	71 e0       	ldi	r23, 0x01	; 1
    343a:	0e 94 22 21 	call	0x4244	; 0x4244 <__divmodhi4>
    343e:	90 93 73 05 	sts	0x0573, r25
    3442:	80 93 72 05 	sts	0x0572, r24
		return c;
    3446:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3448:	c9 01       	movw	r24, r18
    344a:	08 95       	ret

0000344c <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    344c:	80 91 72 05 	lds	r24, 0x0572
    3450:	90 91 73 05 	lds	r25, 0x0573
    3454:	90 93 71 05 	sts	0x0571, r25
    3458:	80 93 70 05 	sts	0x0570, r24
}
    345c:	08 95       	ret

0000345e <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    345e:	1f 92       	push	r1
    3460:	0f 92       	push	r0
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	0f 92       	push	r0
    3466:	0b b6       	in	r0, 0x3b	; 59
    3468:	0f 92       	push	r0
    346a:	11 24       	eor	r1, r1
    346c:	2f 93       	push	r18
    346e:	3f 93       	push	r19
    3470:	4f 93       	push	r20
    3472:	5f 93       	push	r21
    3474:	6f 93       	push	r22
    3476:	7f 93       	push	r23
    3478:	8f 93       	push	r24
    347a:	9f 93       	push	r25
    347c:	af 93       	push	r26
    347e:	bf 93       	push	r27
    3480:	ef 93       	push	r30
    3482:	ff 93       	push	r31
	unsigned char c = UDR0;
    3484:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3488:	e0 91 70 05 	lds	r30, 0x0570
    348c:	f0 91 71 05 	lds	r31, 0x0571
    3490:	cf 01       	movw	r24, r30
    3492:	01 96       	adiw	r24, 0x01	; 1
    3494:	60 e0       	ldi	r22, 0x00	; 0
    3496:	71 e0       	ldi	r23, 0x01	; 1
    3498:	0e 94 22 21 	call	0x4244	; 0x4244 <__divmodhi4>
    349c:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    349e:	80 91 72 05 	lds	r24, 0x0572
    34a2:	90 91 73 05 	lds	r25, 0x0573
    34a6:	28 17       	cp	r18, r24
    34a8:	39 07       	cpc	r19, r25
    34aa:	39 f0       	breq	.+14     	; 0x34ba <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    34ac:	ec 58       	subi	r30, 0x8C	; 140
    34ae:	fa 4f       	sbci	r31, 0xFA	; 250
    34b0:	40 83       	st	Z, r20
		rx_buffer_head = i;
    34b2:	30 93 71 05 	sts	0x0571, r19
    34b6:	20 93 70 05 	sts	0x0570, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    34ba:	ff 91       	pop	r31
    34bc:	ef 91       	pop	r30
    34be:	bf 91       	pop	r27
    34c0:	af 91       	pop	r26
    34c2:	9f 91       	pop	r25
    34c4:	8f 91       	pop	r24
    34c6:	7f 91       	pop	r23
    34c8:	6f 91       	pop	r22
    34ca:	5f 91       	pop	r21
    34cc:	4f 91       	pop	r20
    34ce:	3f 91       	pop	r19
    34d0:	2f 91       	pop	r18
    34d2:	0f 90       	pop	r0
    34d4:	0b be       	out	0x3b, r0	; 59
    34d6:	0f 90       	pop	r0
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	0f 90       	pop	r0
    34dc:	1f 90       	pop	r1
    34de:	18 95       	reti

000034e0 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    34e0:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    34e2:	80 91 c0 00 	lds	r24, 0x00C0
    34e6:	85 ff       	sbrs	r24, 5
    34e8:	fc cf       	rjmp	.-8      	; 0x34e2 <printByte+0x2>
		;
	UDR0 = c;
    34ea:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    34ee:	08 95       	ret

000034f0 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    34f0:	fc 01       	movw	r30, r24
    34f2:	07 c0       	rjmp	.+14     	; 0x3502 <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    34f4:	80 91 c0 00 	lds	r24, 0x00C0
    34f8:	85 ff       	sbrs	r24, 5
    34fa:	fc cf       	rjmp	.-8      	; 0x34f4 <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
    34fc:	31 96       	adiw	r30, 0x01	; 1

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    34fe:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3502:	90 81       	ld	r25, Z
    3504:	99 23       	and	r25, r25
    3506:	b1 f7       	brne	.-20     	; 0x34f4 <printString+0x4>
		printByte(*s++);
}
    3508:	08 95       	ret

0000350a <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    350a:	9c 01       	movw	r18, r24
    350c:	06 c0       	rjmp	.+12     	; 0x351a <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    350e:	80 91 c0 00 	lds	r24, 0x00C0
    3512:	85 ff       	sbrs	r24, 5
    3514:	fc cf       	rjmp	.-8      	; 0x350e <printPgmString+0x4>
		;
	UDR0 = c;
    3516:	90 93 c6 00 	sts	0x00C6, r25
    351a:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    351c:	2f 5f       	subi	r18, 0xFF	; 255
    351e:	3f 4f       	sbci	r19, 0xFF	; 255
    3520:	94 91       	lpm	r25, Z+
    3522:	99 23       	and	r25, r25
    3524:	a1 f7       	brne	.-24     	; 0x350e <printPgmString+0x4>
		printByte(c);
}
    3526:	08 95       	ret

00003528 <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3528:	2f 92       	push	r2
    352a:	3f 92       	push	r3
    352c:	4f 92       	push	r4
    352e:	5f 92       	push	r5
    3530:	6f 92       	push	r6
    3532:	7f 92       	push	r7
    3534:	8f 92       	push	r8
    3536:	9f 92       	push	r9
    3538:	af 92       	push	r10
    353a:	bf 92       	push	r11
    353c:	cf 92       	push	r12
    353e:	df 92       	push	r13
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	a0 97       	sbiw	r28, 0x20	; 32
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	6b 01       	movw	r12, r22
    355e:	7c 01       	movw	r14, r24
    3560:	29 01       	movw	r4, r18
    3562:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3564:	61 15       	cp	r22, r1
    3566:	71 05       	cpc	r23, r1
    3568:	81 05       	cpc	r24, r1
    356a:	91 05       	cpc	r25, r1
    356c:	41 f4       	brne	.+16     	; 0x357e <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    356e:	80 91 c0 00 	lds	r24, 0x00C0
    3572:	85 ff       	sbrs	r24, 5
    3574:	fc cf       	rjmp	.-8      	; 0x356e <printIntegerInBase+0x46>
		;
	UDR0 = c;
    3576:	80 e3       	ldi	r24, 0x30	; 48
    3578:	80 93 c6 00 	sts	0x00C6, r24
    357c:	49 c0       	rjmp	.+146    	; 0x3610 <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
    357e:	88 24       	eor	r8, r8
    3580:	99 24       	eor	r9, r9
    3582:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3584:	1e 01       	movw	r2, r28
    3586:	08 94       	sec
    3588:	21 1c       	adc	r2, r1
    358a:	31 1c       	adc	r3, r1
    358c:	81 01       	movw	r16, r2
    358e:	08 0d       	add	r16, r8
    3590:	19 1d       	adc	r17, r9
    3592:	c7 01       	movw	r24, r14
    3594:	b6 01       	movw	r22, r12
    3596:	a3 01       	movw	r20, r6
    3598:	92 01       	movw	r18, r4
    359a:	0e 94 35 21 	call	0x426a	; 0x426a <__udivmodsi4>
    359e:	f8 01       	movw	r30, r16
    35a0:	60 83       	st	Z, r22
    35a2:	08 94       	sec
    35a4:	81 1c       	adc	r8, r1
    35a6:	91 1c       	adc	r9, r1
    35a8:	a1 1c       	adc	r10, r1
    35aa:	b1 1c       	adc	r11, r1
		n /= base;
    35ac:	c7 01       	movw	r24, r14
    35ae:	b6 01       	movw	r22, r12
    35b0:	a3 01       	movw	r20, r6
    35b2:	92 01       	movw	r18, r4
    35b4:	0e 94 35 21 	call	0x426a	; 0x426a <__udivmodsi4>
    35b8:	c9 01       	movw	r24, r18
    35ba:	da 01       	movw	r26, r20
    35bc:	6c 01       	movw	r12, r24
    35be:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    35c0:	c1 14       	cp	r12, r1
    35c2:	d1 04       	cpc	r13, r1
    35c4:	e1 04       	cpc	r14, r1
    35c6:	f1 04       	cpc	r15, r1
    35c8:	09 f7       	brne	.-62     	; 0x358c <printIntegerInBase+0x64>
    35ca:	91 01       	movw	r18, r2
    35cc:	28 0d       	add	r18, r8
    35ce:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    35d0:	be 01       	movw	r22, r28
    35d2:	6f 5f       	subi	r22, 0xFF	; 255
    35d4:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
    35d6:	d5 01       	movw	r26, r10
    35d8:	c4 01       	movw	r24, r8
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	a1 09       	sbc	r26, r1
    35de:	b1 09       	sbc	r27, r1
    35e0:	ac 01       	movw	r20, r24
    35e2:	48 19       	sub	r20, r8
    35e4:	59 09       	sbc	r21, r9
    35e6:	11 c0       	rjmp	.+34     	; 0x360a <printIntegerInBase+0xe2>
    35e8:	fa 01       	movw	r30, r20
    35ea:	e2 0f       	add	r30, r18
    35ec:	f3 1f       	adc	r31, r19
    35ee:	e0 81       	ld	r30, Z
    35f0:	ea 30       	cpi	r30, 0x0A	; 10
    35f2:	10 f4       	brcc	.+4      	; 0x35f8 <printIntegerInBase+0xd0>
    35f4:	e0 5d       	subi	r30, 0xD0	; 208
    35f6:	01 c0       	rjmp	.+2      	; 0x35fa <printIntegerInBase+0xd2>
    35f8:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    35fa:	80 91 c0 00 	lds	r24, 0x00C0
    35fe:	85 ff       	sbrs	r24, 5
    3600:	fc cf       	rjmp	.-8      	; 0x35fa <printIntegerInBase+0xd2>
		;
	UDR0 = c;
    3602:	e0 93 c6 00 	sts	0x00C6, r30
    3606:	21 50       	subi	r18, 0x01	; 1
    3608:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    360a:	62 17       	cp	r22, r18
    360c:	73 07       	cpc	r23, r19
    360e:	61 f7       	brne	.-40     	; 0x35e8 <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3610:	a0 96       	adiw	r28, 0x20	; 32
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    3624:	ff 90       	pop	r15
    3626:	ef 90       	pop	r14
    3628:	df 90       	pop	r13
    362a:	cf 90       	pop	r12
    362c:	bf 90       	pop	r11
    362e:	af 90       	pop	r10
    3630:	9f 90       	pop	r9
    3632:	8f 90       	pop	r8
    3634:	7f 90       	pop	r7
    3636:	6f 90       	pop	r6
    3638:	5f 90       	pop	r5
    363a:	4f 90       	pop	r4
    363c:	3f 90       	pop	r3
    363e:	2f 90       	pop	r2
    3640:	08 95       	ret

00003642 <printInteger>:

void printInteger(long n)
{
    3642:	9b 01       	movw	r18, r22
    3644:	ac 01       	movw	r20, r24
	if (n < 0) {
    3646:	97 ff       	sbrs	r25, 7
    3648:	0e c0       	rjmp	.+28     	; 0x3666 <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    364a:	80 91 c0 00 	lds	r24, 0x00C0
    364e:	85 ff       	sbrs	r24, 5
    3650:	fc cf       	rjmp	.-8      	; 0x364a <printInteger+0x8>
		;
	UDR0 = c;
    3652:	8d e2       	ldi	r24, 0x2D	; 45
    3654:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3658:	50 95       	com	r21
    365a:	40 95       	com	r20
    365c:	30 95       	com	r19
    365e:	21 95       	neg	r18
    3660:	3f 4f       	sbci	r19, 0xFF	; 255
    3662:	4f 4f       	sbci	r20, 0xFF	; 255
    3664:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
    3666:	ca 01       	movw	r24, r20
    3668:	b9 01       	movw	r22, r18
    366a:	2a e0       	ldi	r18, 0x0A	; 10
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	40 e0       	ldi	r20, 0x00	; 0
    3670:	50 e0       	ldi	r21, 0x00	; 0
    3672:	0e 94 94 1a 	call	0x3528	; 0x3528 <printIntegerInBase>
}
    3676:	08 95       	ret

00003678 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3678:	22 e0       	ldi	r18, 0x02	; 2
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	0e 94 94 1a 	call	0x3528	; 0x3528 <printIntegerInBase>
  }
    3684:	08 95       	ret

00003686 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	00 d0       	rcall	.+0      	; 0x3694 <printFloat+0xe>
    3694:	0f 92       	push	r0
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    369a:	ae 01       	movw	r20, r28
    369c:	4f 5f       	subi	r20, 0xFF	; 255
    369e:	5f 4f       	sbci	r21, 0xFF	; 255
    36a0:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <modf>
    36a4:	7b 01       	movw	r14, r22
    36a6:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    36a8:	69 81       	ldd	r22, Y+1	; 0x01
    36aa:	7a 81       	ldd	r23, Y+2	; 0x02
    36ac:	8b 81       	ldd	r24, Y+3	; 0x03
    36ae:	9c 81       	ldd	r25, Y+4	; 0x04
    36b0:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
    36b4:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    36b8:	80 91 c0 00 	lds	r24, 0x00C0
    36bc:	85 ff       	sbrs	r24, 5
    36be:	fc cf       	rjmp	.-8      	; 0x36b8 <printFloat+0x32>
		;
	UDR0 = c;
    36c0:	8e e2       	ldi	r24, 0x2E	; 46
    36c2:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    36c6:	c8 01       	movw	r24, r16
    36c8:	b7 01       	movw	r22, r14
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	4a e7       	ldi	r20, 0x7A	; 122
    36d0:	54 e4       	ldi	r21, 0x44	; 68
    36d2:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    36d6:	0e 94 90 20 	call	0x4120	; 0x4120 <round>
    36da:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__fixsfsi>
    36de:	97 ff       	sbrs	r25, 7
    36e0:	07 c0       	rjmp	.+14     	; 0x36f0 <printFloat+0x6a>
    36e2:	90 95       	com	r25
    36e4:	80 95       	com	r24
    36e6:	70 95       	com	r23
    36e8:	61 95       	neg	r22
    36ea:	7f 4f       	sbci	r23, 0xFF	; 255
    36ec:	8f 4f       	sbci	r24, 0xFF	; 255
    36ee:	9f 4f       	sbci	r25, 0xFF	; 255
    36f0:	0e 94 21 1b 	call	0x3642	; 0x3642 <printInteger>
}
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
    3704:	ff 90       	pop	r15
    3706:	ef 90       	pop	r14
    3708:	08 95       	ret

0000370a <atc_init>:
#include "settings.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    370a:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    370c:	e7 e0       	ldi	r30, 0x07	; 7
    370e:	f1 e0       	ldi	r31, 0x01	; 1
    3710:	80 81       	ld	r24, Z
    3712:	81 60       	ori	r24, 0x01	; 1
    3714:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3716:	80 81       	ld	r24, Z
    3718:	82 60       	ori	r24, 0x02	; 2
    371a:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    371c:	80 81       	ld	r24, Z
    371e:	84 60       	ori	r24, 0x04	; 4
    3720:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3722:	80 81       	ld	r24, Z
    3724:	88 60       	ori	r24, 0x08	; 8
    3726:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3728:	80 81       	ld	r24, Z
    372a:	80 64       	ori	r24, 0x40	; 64
    372c:	80 83       	st	Z, r24

// initialise PORT as well

}
    372e:	08 95       	ret

00003730 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	08 95       	ret

00003734 <atc_change>:



// changes tool , 0 put back, 1-6 picks up
void atc_change(int tool)
{
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	0e 94 9f 14 	call	0x293e	; 0x293e <set_busy>

	// make sure head is up before moving
	if( is_head_down() ) {
    3742:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <is_head_down>
    3746:	89 2b       	or	r24, r25
    3748:	21 f0       	breq	.+8      	; 0x3752 <atc_change+0x1e>
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("TOOL headup\n\r"));
#endif
		head_down( FALSE ) ;
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <head_down>
	}

	// turn off toolchanger
	if( tool == 0 ) {
    3752:	20 97       	sbiw	r28, 0x00	; 0
    3754:	c9 f4       	brne	.+50     	; 0x3788 <atc_change+0x54>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3756:	80 91 08 01 	lds	r24, 0x0108
    375a:	81 60       	ori	r24, 0x01	; 1
    375c:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3760:	80 91 08 01 	lds	r24, 0x0108
    3764:	82 60       	ori	r24, 0x02	; 2
    3766:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    376a:	80 91 08 01 	lds	r24, 0x0108
    376e:	84 60       	ori	r24, 0x04	; 4
    3770:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3774:	80 91 08 01 	lds	r24, 0x0108
    3778:	88 60       	ori	r24, 0x08	; 8
    377a:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 9f 14 	call	0x293e	; 0x293e <set_busy>
    3786:	70 c0       	rjmp	.+224    	; 0x3868 <atc_change+0x134>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3788:	80 91 08 01 	lds	r24, 0x0108
    378c:	81 60       	ori	r24, 0x01	; 1
    378e:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3792:	c3 30       	cpi	r28, 0x03	; 3
    3794:	d1 05       	cpc	r29, r1
    3796:	09 f1       	breq	.+66     	; 0x37da <atc_change+0xa6>
    3798:	c4 30       	cpi	r28, 0x04	; 4
    379a:	d1 05       	cpc	r29, r1
    379c:	3c f4       	brge	.+14     	; 0x37ac <atc_change+0x78>
    379e:	c1 30       	cpi	r28, 0x01	; 1
    37a0:	d1 05       	cpc	r29, r1
    37a2:	71 f0       	breq	.+28     	; 0x37c0 <atc_change+0x8c>
    37a4:	22 97       	sbiw	r28, 0x02	; 2
    37a6:	09 f0       	breq	.+2      	; 0x37aa <atc_change+0x76>
    37a8:	51 c0       	rjmp	.+162    	; 0x384c <atc_change+0x118>
    37aa:	13 c0       	rjmp	.+38     	; 0x37d2 <atc_change+0x9e>
    37ac:	c5 30       	cpi	r28, 0x05	; 5
    37ae:	d1 05       	cpc	r29, r1
    37b0:	59 f1       	breq	.+86     	; 0x3808 <atc_change+0xd4>
    37b2:	c5 30       	cpi	r28, 0x05	; 5
    37b4:	d1 05       	cpc	r29, r1
    37b6:	fc f0       	brlt	.+62     	; 0x37f6 <atc_change+0xc2>
    37b8:	26 97       	sbiw	r28, 0x06	; 6
    37ba:	09 f0       	breq	.+2      	; 0x37be <atc_change+0x8a>
    37bc:	47 c0       	rjmp	.+142    	; 0x384c <atc_change+0x118>
    37be:	32 c0       	rjmp	.+100    	; 0x3824 <atc_change+0xf0>
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    37c0:	80 91 08 01 	lds	r24, 0x0108
    37c4:	8d 7f       	andi	r24, 0xFD	; 253
    37c6:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    37ca:	80 91 08 01 	lds	r24, 0x0108
    37ce:	8b 7f       	andi	r24, 0xFB	; 251
    37d0:	0c c0       	rjmp	.+24     	; 0x37ea <atc_change+0xb6>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    37d2:	80 91 08 01 	lds	r24, 0x0108
    37d6:	8d 7f       	andi	r24, 0xFD	; 253
    37d8:	28 c0       	rjmp	.+80     	; 0x382a <atc_change+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    37da:	80 91 08 01 	lds	r24, 0x0108
    37de:	8d 7f       	andi	r24, 0xFD	; 253
    37e0:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    37e4:	80 91 08 01 	lds	r24, 0x0108
    37e8:	84 60       	ori	r24, 0x04	; 4
    37ea:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    37ee:	80 91 08 01 	lds	r24, 0x0108
    37f2:	87 7f       	andi	r24, 0xF7	; 247
    37f4:	24 c0       	rjmp	.+72     	; 0x383e <atc_change+0x10a>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    37f6:	80 91 08 01 	lds	r24, 0x0108
    37fa:	8d 7f       	andi	r24, 0xFD	; 253
    37fc:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3800:	80 91 08 01 	lds	r24, 0x0108
    3804:	84 60       	ori	r24, 0x04	; 4
    3806:	16 c0       	rjmp	.+44     	; 0x3834 <atc_change+0x100>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    3808:	80 91 08 01 	lds	r24, 0x0108
    380c:	82 60       	ori	r24, 0x02	; 2
    380e:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3812:	80 91 08 01 	lds	r24, 0x0108
    3816:	8b 7f       	andi	r24, 0xFB	; 251
    3818:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    381c:	80 91 08 01 	lds	r24, 0x0108
    3820:	87 7f       	andi	r24, 0xF7	; 247
    3822:	12 c0       	rjmp	.+36     	; 0x3848 <atc_change+0x114>
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3824:	80 91 08 01 	lds	r24, 0x0108
    3828:	82 60       	ori	r24, 0x02	; 2
    382a:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    382e:	80 91 08 01 	lds	r24, 0x0108
    3832:	8b 7f       	andi	r24, 0xFB	; 251
    3834:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3838:	80 91 08 01 	lds	r24, 0x0108
    383c:	88 60       	ori	r24, 0x08	; 8
    383e:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3842:	80 91 08 01 	lds	r24, 0x0108
    3846:	8e 7f       	andi	r24, 0xFE	; 254
    3848:	80 93 08 01 	sts	0x0108, r24
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    384c:	80 91 08 01 	lds	r24, 0x0108
    3850:	8e 7f       	andi	r24, 0xFE	; 254
    3852:	80 93 08 01 	sts	0x0108, r24
    3856:	88 ee       	ldi	r24, 0xE8	; 232
    3858:	93 e0       	ldi	r25, 0x03	; 3
    385a:	20 e9       	ldi	r18, 0x90	; 144
    385c:	31 e0       	ldi	r19, 0x01	; 1
    385e:	f9 01       	movw	r30, r18
    3860:	31 97       	sbiw	r30, 0x01	; 1
    3862:	f1 f7       	brne	.-4      	; 0x3860 <atc_change+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3864:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3866:	d9 f7       	brne	.-10     	; 0x385e <atc_change+0x12a>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	08 95       	ret

0000386e <goto_vacpad>:

}

void goto_vacpad( void ) 
{
	if( is_head_down() ) {
    386e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <is_head_down>
    3872:	89 2b       	or	r24, r25
    3874:	21 f0       	breq	.+8      	; 0x387e <goto_vacpad+0x10>
		head_down( FALSE) ;
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <head_down>
    387e:	08 95       	ret

00003880 <check_for_tool>:

// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	//move head up
	if( is_head_down() ) {
    3880:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <is_head_down>
    3884:	89 2b       	or	r24, r25
    3886:	21 f0       	breq	.+8      	; 0x3890 <check_for_tool+0x10>
		head_down( FALSE) ;
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <head_down>
	}

	goto_vacpad();
    3890:	0e 94 37 1c 	call	0x386e	; 0x386e <goto_vacpad>
	
	head_down(TRUE);
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <head_down>
	
	vacuum(TRUE);
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <vacuum>

	if( vacuum_state() == TRUE )  {
    38a4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <vacuum_state>
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	31 f4       	brne	.+12     	; 0x38b8 <check_for_tool+0x38>
		head_down( FALSE) ;
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <head_down>
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	08 95       	ret
		return TRUE;
	} else {
		head_down( FALSE) ;
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <head_down>
    38c0:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE;
	}
}
    38c2:	08 95       	ret

000038c4 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    38c4:	ea e0       	ldi	r30, 0x0A	; 10
    38c6:	f1 e0       	ldi	r31, 0x01	; 1
    38c8:	80 81       	ld	r24, Z
    38ca:	80 62       	ori	r24, 0x20	; 32
    38cc:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    38ce:	eb e0       	ldi	r30, 0x0B	; 11
    38d0:	f1 e0       	ldi	r31, 0x01	; 1
    38d2:	80 81       	ld	r24, Z
    38d4:	80 62       	ori	r24, 0x20	; 32
    38d6:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    38d8:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    38da:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    38dc:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    38de:	41 9a       	sbi	0x08, 1	; 8
}
    38e0:	08 95       	ret

000038e2 <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    38e2:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    38e4:	81 70       	andi	r24, 0x01	; 1
    38e6:	08 95       	ret

000038e8 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?0:1;
    38e8:	86 b1       	in	r24, 0x06	; 6
    38ea:	86 95       	lsr	r24
    38ec:	80 95       	com	r24

	return state;
}
    38ee:	81 70       	andi	r24, 0x01	; 1
    38f0:	08 95       	ret

000038f2 <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}

// todo: don't allow head down while not homed?
void head_down(int state)
{
    38f2:	cf 93       	push	r28
    38f4:	df 93       	push	r29
    38f6:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	0e 94 9f 14 	call	0x293e	; 0x293e <set_busy>

// head down mode
  if( state == 0 ) {
    3900:	20 97       	sbiw	r28, 0x00	; 0
    3902:	21 f4       	brne	.+8      	; 0x390c <head_down+0x1a>

	HEAD_PORT |= _BV( HEAD );
    3904:	80 91 0b 01 	lds	r24, 0x010B
    3908:	80 62       	ori	r24, 0x20	; 32
    390a:	03 c0       	rjmp	.+6      	; 0x3912 <head_down+0x20>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    390c:	80 91 0b 01 	lds	r24, 0x010B
    3910:	8f 7d       	andi	r24, 0xDF	; 223
    3912:	80 93 0b 01 	sts	0x010B, r24
    3916:	80 ed       	ldi	r24, 0xD0	; 208
    3918:	97 e0       	ldi	r25, 0x07	; 7
    391a:	20 e9       	ldi	r18, 0x90	; 144
    391c:	31 e0       	ldi	r19, 0x01	; 1
    391e:	f9 01       	movw	r30, r18
    3920:	31 97       	sbiw	r30, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <head_down+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3924:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3926:	d9 f7       	brne	.-10     	; 0x391e <head_down+0x2c>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3928:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    392a:	81 70       	andi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	8c 17       	cp	r24, r28
    3930:	9d 07       	cpc	r25, r29
    3932:	21 f0       	breq	.+8      	; 0x393c <head_down+0x4a>

	  printPgmString(PSTR("Head down error\n\r"));
    3934:	8c e6       	ldi	r24, 0x6C	; 108
    3936:	95 e0       	ldi	r25, 0x05	; 5
    3938:	0e 94 85 1a 	call	0x350a	; 0x350a <printPgmString>
  }

 set_busy( FALSE );
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	0e 94 9f 14 	call	0x293e	; 0x293e <set_busy>

}
    3944:	df 91       	pop	r29
    3946:	cf 91       	pop	r28
    3948:	08 95       	ret

0000394a <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    394a:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    394c:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    394e:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    3950:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    3952:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    3954:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    3956:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    3958:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    395a:	a4 e0       	ldi	r26, 0x04	; 4
    395c:	b1 e0       	ldi	r27, 0x01	; 1
    395e:	8c 91       	ld	r24, X
    3960:	8e 7f       	andi	r24, 0xFE	; 254
    3962:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    3964:	e5 e0       	ldi	r30, 0x05	; 5
    3966:	f1 e0       	ldi	r31, 0x01	; 1
    3968:	80 81       	ld	r24, Z
    396a:	81 60       	ori	r24, 0x01	; 1
    396c:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    396e:	8c 91       	ld	r24, X
    3970:	8f 7e       	andi	r24, 0xEF	; 239
    3972:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    3974:	80 81       	ld	r24, Z
    3976:	80 61       	ori	r24, 0x10	; 16
    3978:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    397a:	a1 e0       	ldi	r26, 0x01	; 1
    397c:	b1 e0       	ldi	r27, 0x01	; 1
    397e:	8c 91       	ld	r24, X
    3980:	8e 7f       	andi	r24, 0xFE	; 254
    3982:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    3984:	e2 e0       	ldi	r30, 0x02	; 2
    3986:	f1 e0       	ldi	r31, 0x01	; 1
    3988:	80 81       	ld	r24, Z
    398a:	81 60       	ori	r24, 0x01	; 1
    398c:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    398e:	8c 91       	ld	r24, X
    3990:	8d 7f       	andi	r24, 0xFD	; 253
    3992:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    3994:	80 81       	ld	r24, Z
    3996:	82 60       	ori	r24, 0x02	; 2
    3998:	80 83       	st	Z, r24

}
    399a:	08 95       	ret

0000399c <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    399c:	8c b1       	in	r24, 0x0c	; 12
    399e:	82 95       	swap	r24
    39a0:	86 95       	lsr	r24
    39a2:	87 70       	andi	r24, 0x07	; 7
    39a4:	80 95       	com	r24

	return state;
}
    39a6:	81 70       	andi	r24, 0x01	; 1
    39a8:	08 95       	ret

000039aa <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    39aa:	82 b3       	in	r24, 0x12	; 18
    39ac:	82 95       	swap	r24
    39ae:	86 95       	lsr	r24
    39b0:	87 70       	andi	r24, 0x07	; 7
    39b2:	80 95       	com	r24

	return state;
}
    39b4:	81 70       	andi	r24, 0x01	; 1
    39b6:	08 95       	ret

000039b8 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    39b8:	8c b1       	in	r24, 0x0c	; 12
    39ba:	82 95       	swap	r24
    39bc:	8f 70       	andi	r24, 0x0F	; 15
    39be:	80 95       	com	r24

	return state;
}
    39c0:	81 70       	andi	r24, 0x01	; 1
    39c2:	08 95       	ret

000039c4 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    39c4:	80 91 03 01 	lds	r24, 0x0103
    39c8:	86 95       	lsr	r24
    39ca:	80 95       	com	r24

	return state;
}
    39cc:	81 70       	andi	r24, 0x01	; 1
    39ce:	08 95       	ret

000039d0 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    39d0:	86 b1       	in	r24, 0x06	; 6
    39d2:	82 95       	swap	r24
    39d4:	8f 70       	andi	r24, 0x0F	; 15
    39d6:	80 95       	com	r24

	return state;
}
    39d8:	81 70       	andi	r24, 0x01	; 1
    39da:	08 95       	ret

000039dc <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    39dc:	80 91 00 01 	lds	r24, 0x0100
    39e0:	80 95       	com	r24

	return state;
}
    39e2:	81 70       	andi	r24, 0x01	; 1
    39e4:	08 95       	ret

000039e6 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    39e6:	80 91 03 01 	lds	r24, 0x0103
    39ea:	80 95       	com	r24

	return state;
}
    39ec:	81 70       	andi	r24, 0x01	; 1
    39ee:	08 95       	ret

000039f0 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    39f0:	83 b1       	in	r24, 0x03	; 3
    39f2:	82 95       	swap	r24
    39f4:	86 95       	lsr	r24
    39f6:	87 70       	andi	r24, 0x07	; 7
    39f8:	80 95       	com	r24

	return state;
}
    39fa:	81 70       	andi	r24, 0x01	; 1
    39fc:	08 95       	ret

000039fe <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    39fe:	80 91 00 01 	lds	r24, 0x0100
    3a02:	86 95       	lsr	r24
    3a04:	80 95       	com	r24

	return state;
}
    3a06:	81 70       	andi	r24, 0x01	; 1
    3a08:	08 95       	ret

00003a0a <vacuum_init>:
#include "settings.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    3a0a:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_DDR |= (_BV( TACSENSE ));
    3a0c:	57 9a       	sbi	0x0a, 7	; 10

	// Vacuum on/off control
	HEAD_DDR |= _BV( VACUUM );
    3a0e:	ea e0       	ldi	r30, 0x0A	; 10
    3a10:	f1 e0       	ldi	r31, 0x01	; 1
    3a12:	80 81       	ld	r24, Z
    3a14:	80 61       	ori	r24, 0x10	; 16
    3a16:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    3a18:	eb e0       	ldi	r30, 0x0B	; 11
    3a1a:	f1 e0       	ldi	r31, 0x01	; 1
    3a1c:	80 81       	ld	r24, Z
    3a1e:	80 61       	ori	r24, 0x10	; 16
    3a20:	80 83       	st	Z, r24

}
    3a22:	08 95       	ret

00003a24 <vacuum>:
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    3a24:	89 2b       	or	r24, r25
    3a26:	21 f4       	brne	.+8      	; 0x3a30 <vacuum+0xc>

	HEAD_PORT |= _BV( VACUUM );
    3a28:	80 91 0b 01 	lds	r24, 0x010B
    3a2c:	80 61       	ori	r24, 0x10	; 16
    3a2e:	03 c0       	rjmp	.+6      	; 0x3a36 <vacuum+0x12>

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    3a30:	80 91 0b 01 	lds	r24, 0x010B
    3a34:	8f 7e       	andi	r24, 0xEF	; 239
    3a36:	80 93 0b 01 	sts	0x010B, r24
    3a3a:	88 e8       	ldi	r24, 0x88	; 136
    3a3c:	93 e1       	ldi	r25, 0x13	; 19
    3a3e:	20 e9       	ldi	r18, 0x90	; 144
    3a40:	31 e0       	ldi	r19, 0x01	; 1
    3a42:	f9 01       	movw	r30, r18
    3a44:	31 97       	sbiw	r30, 0x01	; 1
    3a46:	f1 f7       	brne	.-4      	; 0x3a44 <vacuum+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a48:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4a:	d9 f7       	brne	.-10     	; 0x3a42 <vacuum+0x1e>
  }

   // wait for air to get settled
   _delay_ms( AIR_SETTLE_TIME );

}
    3a4c:	08 95       	ret

00003a4e <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_DDR, TACSENSE )?0:1;
    3a4e:	8a b1       	in	r24, 0x0a	; 10
    3a50:	80 95       	com	r24

	return state;
}
    3a52:	88 1f       	adc	r24, r24
    3a54:	88 27       	eor	r24, r24
    3a56:	88 1f       	adc	r24, r24
    3a58:	08 95       	ret

00003a5a <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    3a5a:	e7 e0       	ldi	r30, 0x07	; 7
    3a5c:	f1 e0       	ldi	r31, 0x01	; 1
    3a5e:	80 81       	ld	r24, Z
    3a60:	80 68       	ori	r24, 0x80	; 128
    3a62:	80 83       	st	Z, r24
}
    3a64:	08 95       	ret

00003a66 <tape_knock>:
{
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

 set_busy( TRUE );
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	0e 94 9f 14 	call	0x293e	; 0x293e <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    3a6e:	80 91 08 01 	lds	r24, 0x0108
    3a72:	8f 77       	andi	r24, 0x7F	; 127
    3a74:	80 93 08 01 	sts	0x0108, r24
    3a78:	80 ed       	ldi	r24, 0xD0	; 208
    3a7a:	97 e0       	ldi	r25, 0x07	; 7
    3a7c:	20 e9       	ldi	r18, 0x90	; 144
    3a7e:	31 e0       	ldi	r19, 0x01	; 1
    3a80:	f9 01       	movw	r30, r18
    3a82:	31 97       	sbiw	r30, 0x01	; 1
    3a84:	f1 f7       	brne	.-4      	; 0x3a82 <tape_knock+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a88:	d9 f7       	brne	.-10     	; 0x3a80 <tape_knock+0x1a>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    3a8a:	80 91 08 01 	lds	r24, 0x0108
    3a8e:	80 68       	ori	r24, 0x80	; 128
    3a90:	80 93 08 01 	sts	0x0108, r24
    3a94:	80 ed       	ldi	r24, 0xD0	; 208
    3a96:	97 e0       	ldi	r25, 0x07	; 7
    3a98:	20 e9       	ldi	r18, 0x90	; 144
    3a9a:	31 e0       	ldi	r19, 0x01	; 1
    3a9c:	f9 01       	movw	r30, r18
    3a9e:	31 97       	sbiw	r30, 0x01	; 1
    3aa0:	f1 f7       	brne	.-4      	; 0x3a9e <tape_knock+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa4:	d9 f7       	brne	.-10     	; 0x3a9c <tape_knock+0x36>

	_delay_ms( TAPE_KNOCK_SETTLE );

 set_busy( FALSE );
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	0e 94 9f 14 	call	0x293e	; 0x293e <set_busy>
}
    3aae:	08 95       	ret

00003ab0 <__subsf3>:
    3ab0:	50 58       	subi	r21, 0x80	; 128

00003ab2 <__addsf3>:
    3ab2:	bb 27       	eor	r27, r27
    3ab4:	aa 27       	eor	r26, r26
    3ab6:	0e d0       	rcall	.+28     	; 0x3ad4 <__addsf3x>
    3ab8:	11 c2       	rjmp	.+1058   	; 0x3edc <__fp_round>
    3aba:	02 d2       	rcall	.+1028   	; 0x3ec0 <__fp_pscA>
    3abc:	30 f0       	brcs	.+12     	; 0x3aca <__addsf3+0x18>
    3abe:	07 d2       	rcall	.+1038   	; 0x3ece <__fp_pscB>
    3ac0:	20 f0       	brcs	.+8      	; 0x3aca <__addsf3+0x18>
    3ac2:	31 f4       	brne	.+12     	; 0x3ad0 <__addsf3+0x1e>
    3ac4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ac6:	11 f4       	brne	.+4      	; 0x3acc <__addsf3+0x1a>
    3ac8:	1e f4       	brtc	.+6      	; 0x3ad0 <__addsf3+0x1e>
    3aca:	d2 c1       	rjmp	.+932    	; 0x3e70 <__fp_nan>
    3acc:	0e f4       	brtc	.+2      	; 0x3ad0 <__addsf3+0x1e>
    3ace:	e0 95       	com	r30
    3ad0:	e7 fb       	bst	r30, 7
    3ad2:	9f c1       	rjmp	.+830    	; 0x3e12 <__fp_inf>

00003ad4 <__addsf3x>:
    3ad4:	e9 2f       	mov	r30, r25
    3ad6:	13 d2       	rcall	.+1062   	; 0x3efe <__fp_split3>
    3ad8:	80 f3       	brcs	.-32     	; 0x3aba <__addsf3+0x8>
    3ada:	ba 17       	cp	r27, r26
    3adc:	62 07       	cpc	r22, r18
    3ade:	73 07       	cpc	r23, r19
    3ae0:	84 07       	cpc	r24, r20
    3ae2:	95 07       	cpc	r25, r21
    3ae4:	18 f0       	brcs	.+6      	; 0x3aec <__addsf3x+0x18>
    3ae6:	71 f4       	brne	.+28     	; 0x3b04 <__addsf3x+0x30>
    3ae8:	9e f5       	brtc	.+102    	; 0x3b50 <__addsf3x+0x7c>
    3aea:	42 c2       	rjmp	.+1156   	; 0x3f70 <__fp_zero>
    3aec:	0e f4       	brtc	.+2      	; 0x3af0 <__addsf3x+0x1c>
    3aee:	e0 95       	com	r30
    3af0:	0b 2e       	mov	r0, r27
    3af2:	ba 2f       	mov	r27, r26
    3af4:	a0 2d       	mov	r26, r0
    3af6:	0b 01       	movw	r0, r22
    3af8:	b9 01       	movw	r22, r18
    3afa:	90 01       	movw	r18, r0
    3afc:	0c 01       	movw	r0, r24
    3afe:	ca 01       	movw	r24, r20
    3b00:	a0 01       	movw	r20, r0
    3b02:	11 24       	eor	r1, r1
    3b04:	ff 27       	eor	r31, r31
    3b06:	59 1b       	sub	r21, r25
    3b08:	99 f0       	breq	.+38     	; 0x3b30 <__addsf3x+0x5c>
    3b0a:	59 3f       	cpi	r21, 0xF9	; 249
    3b0c:	50 f4       	brcc	.+20     	; 0x3b22 <__addsf3x+0x4e>
    3b0e:	50 3e       	cpi	r21, 0xE0	; 224
    3b10:	68 f1       	brcs	.+90     	; 0x3b6c <__addsf3x+0x98>
    3b12:	1a 16       	cp	r1, r26
    3b14:	f0 40       	sbci	r31, 0x00	; 0
    3b16:	a2 2f       	mov	r26, r18
    3b18:	23 2f       	mov	r18, r19
    3b1a:	34 2f       	mov	r19, r20
    3b1c:	44 27       	eor	r20, r20
    3b1e:	58 5f       	subi	r21, 0xF8	; 248
    3b20:	f3 cf       	rjmp	.-26     	; 0x3b08 <__addsf3x+0x34>
    3b22:	46 95       	lsr	r20
    3b24:	37 95       	ror	r19
    3b26:	27 95       	ror	r18
    3b28:	a7 95       	ror	r26
    3b2a:	f0 40       	sbci	r31, 0x00	; 0
    3b2c:	53 95       	inc	r21
    3b2e:	c9 f7       	brne	.-14     	; 0x3b22 <__addsf3x+0x4e>
    3b30:	7e f4       	brtc	.+30     	; 0x3b50 <__addsf3x+0x7c>
    3b32:	1f 16       	cp	r1, r31
    3b34:	ba 0b       	sbc	r27, r26
    3b36:	62 0b       	sbc	r22, r18
    3b38:	73 0b       	sbc	r23, r19
    3b3a:	84 0b       	sbc	r24, r20
    3b3c:	ba f0       	brmi	.+46     	; 0x3b6c <__addsf3x+0x98>
    3b3e:	91 50       	subi	r25, 0x01	; 1
    3b40:	a1 f0       	breq	.+40     	; 0x3b6a <__addsf3x+0x96>
    3b42:	ff 0f       	add	r31, r31
    3b44:	bb 1f       	adc	r27, r27
    3b46:	66 1f       	adc	r22, r22
    3b48:	77 1f       	adc	r23, r23
    3b4a:	88 1f       	adc	r24, r24
    3b4c:	c2 f7       	brpl	.-16     	; 0x3b3e <__addsf3x+0x6a>
    3b4e:	0e c0       	rjmp	.+28     	; 0x3b6c <__addsf3x+0x98>
    3b50:	ba 0f       	add	r27, r26
    3b52:	62 1f       	adc	r22, r18
    3b54:	73 1f       	adc	r23, r19
    3b56:	84 1f       	adc	r24, r20
    3b58:	48 f4       	brcc	.+18     	; 0x3b6c <__addsf3x+0x98>
    3b5a:	87 95       	ror	r24
    3b5c:	77 95       	ror	r23
    3b5e:	67 95       	ror	r22
    3b60:	b7 95       	ror	r27
    3b62:	f7 95       	ror	r31
    3b64:	9e 3f       	cpi	r25, 0xFE	; 254
    3b66:	08 f0       	brcs	.+2      	; 0x3b6a <__addsf3x+0x96>
    3b68:	b3 cf       	rjmp	.-154    	; 0x3ad0 <__addsf3+0x1e>
    3b6a:	93 95       	inc	r25
    3b6c:	88 0f       	add	r24, r24
    3b6e:	08 f0       	brcs	.+2      	; 0x3b72 <__addsf3x+0x9e>
    3b70:	99 27       	eor	r25, r25
    3b72:	ee 0f       	add	r30, r30
    3b74:	97 95       	ror	r25
    3b76:	87 95       	ror	r24
    3b78:	08 95       	ret

00003b7a <atan>:
    3b7a:	df 93       	push	r29
    3b7c:	dd 27       	eor	r29, r29
    3b7e:	b9 2f       	mov	r27, r25
    3b80:	bf 77       	andi	r27, 0x7F	; 127
    3b82:	40 e8       	ldi	r20, 0x80	; 128
    3b84:	5f e3       	ldi	r21, 0x3F	; 63
    3b86:	16 16       	cp	r1, r22
    3b88:	17 06       	cpc	r1, r23
    3b8a:	48 07       	cpc	r20, r24
    3b8c:	5b 07       	cpc	r21, r27
    3b8e:	10 f4       	brcc	.+4      	; 0x3b94 <atan+0x1a>
    3b90:	d9 2f       	mov	r29, r25
    3b92:	f9 d1       	rcall	.+1010   	; 0x3f86 <inverse>
    3b94:	9f 93       	push	r25
    3b96:	8f 93       	push	r24
    3b98:	7f 93       	push	r23
    3b9a:	6f 93       	push	r22
    3b9c:	23 d3       	rcall	.+1606   	; 0x41e4 <square>
    3b9e:	ee e5       	ldi	r30, 0x5E	; 94
    3ba0:	f1 e0       	ldi	r31, 0x01	; 1
    3ba2:	69 d1       	rcall	.+722    	; 0x3e76 <__fp_powser>
    3ba4:	9b d1       	rcall	.+822    	; 0x3edc <__fp_round>
    3ba6:	2f 91       	pop	r18
    3ba8:	3f 91       	pop	r19
    3baa:	4f 91       	pop	r20
    3bac:	5f 91       	pop	r21
    3bae:	61 d2       	rcall	.+1218   	; 0x4072 <__mulsf3x>
    3bb0:	dd 23       	and	r29, r29
    3bb2:	49 f0       	breq	.+18     	; 0x3bc6 <atan+0x4c>
    3bb4:	90 58       	subi	r25, 0x80	; 128
    3bb6:	a2 ea       	ldi	r26, 0xA2	; 162
    3bb8:	2a ed       	ldi	r18, 0xDA	; 218
    3bba:	3f e0       	ldi	r19, 0x0F	; 15
    3bbc:	49 ec       	ldi	r20, 0xC9	; 201
    3bbe:	5f e3       	ldi	r21, 0x3F	; 63
    3bc0:	d0 78       	andi	r29, 0x80	; 128
    3bc2:	5d 27       	eor	r21, r29
    3bc4:	87 df       	rcall	.-242    	; 0x3ad4 <__addsf3x>
    3bc6:	df 91       	pop	r29
    3bc8:	89 c1       	rjmp	.+786    	; 0x3edc <__fp_round>

00003bca <ceil>:
    3bca:	bb d1       	rcall	.+886    	; 0x3f42 <__fp_trunc>
    3bcc:	80 f0       	brcs	.+32     	; 0x3bee <ceil+0x24>
    3bce:	9f 37       	cpi	r25, 0x7F	; 127
    3bd0:	40 f4       	brcc	.+16     	; 0x3be2 <ceil+0x18>
    3bd2:	91 11       	cpse	r25, r1
    3bd4:	0e f4       	brtc	.+2      	; 0x3bd8 <ceil+0xe>
    3bd6:	cd c1       	rjmp	.+922    	; 0x3f72 <__fp_szero>
    3bd8:	60 e0       	ldi	r22, 0x00	; 0
    3bda:	70 e0       	ldi	r23, 0x00	; 0
    3bdc:	80 e8       	ldi	r24, 0x80	; 128
    3bde:	9f e3       	ldi	r25, 0x3F	; 63
    3be0:	08 95       	ret
    3be2:	26 f0       	brts	.+8      	; 0x3bec <ceil+0x22>
    3be4:	1b 16       	cp	r1, r27
    3be6:	61 1d       	adc	r22, r1
    3be8:	71 1d       	adc	r23, r1
    3bea:	81 1d       	adc	r24, r1
    3bec:	18 c1       	rjmp	.+560    	; 0x3e1e <__fp_mintl>
    3bee:	32 c1       	rjmp	.+612    	; 0x3e54 <__fp_mpack>

00003bf0 <__cmpsf2>:
    3bf0:	ec d0       	rcall	.+472    	; 0x3dca <__fp_cmp>
    3bf2:	08 f4       	brcc	.+2      	; 0x3bf6 <__cmpsf2+0x6>
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	08 95       	ret

00003bf8 <__divsf3>:
    3bf8:	0c d0       	rcall	.+24     	; 0x3c12 <__divsf3x>
    3bfa:	70 c1       	rjmp	.+736    	; 0x3edc <__fp_round>
    3bfc:	68 d1       	rcall	.+720    	; 0x3ece <__fp_pscB>
    3bfe:	40 f0       	brcs	.+16     	; 0x3c10 <__divsf3+0x18>
    3c00:	5f d1       	rcall	.+702    	; 0x3ec0 <__fp_pscA>
    3c02:	30 f0       	brcs	.+12     	; 0x3c10 <__divsf3+0x18>
    3c04:	21 f4       	brne	.+8      	; 0x3c0e <__divsf3+0x16>
    3c06:	5f 3f       	cpi	r21, 0xFF	; 255
    3c08:	19 f0       	breq	.+6      	; 0x3c10 <__divsf3+0x18>
    3c0a:	03 c1       	rjmp	.+518    	; 0x3e12 <__fp_inf>
    3c0c:	51 11       	cpse	r21, r1
    3c0e:	b1 c1       	rjmp	.+866    	; 0x3f72 <__fp_szero>
    3c10:	2f c1       	rjmp	.+606    	; 0x3e70 <__fp_nan>

00003c12 <__divsf3x>:
    3c12:	75 d1       	rcall	.+746    	; 0x3efe <__fp_split3>
    3c14:	98 f3       	brcs	.-26     	; 0x3bfc <__divsf3+0x4>

00003c16 <__divsf3_pse>:
    3c16:	99 23       	and	r25, r25
    3c18:	c9 f3       	breq	.-14     	; 0x3c0c <__divsf3+0x14>
    3c1a:	55 23       	and	r21, r21
    3c1c:	b1 f3       	breq	.-20     	; 0x3c0a <__divsf3+0x12>
    3c1e:	95 1b       	sub	r25, r21
    3c20:	55 0b       	sbc	r21, r21
    3c22:	bb 27       	eor	r27, r27
    3c24:	aa 27       	eor	r26, r26
    3c26:	62 17       	cp	r22, r18
    3c28:	73 07       	cpc	r23, r19
    3c2a:	84 07       	cpc	r24, r20
    3c2c:	38 f0       	brcs	.+14     	; 0x3c3c <__divsf3_pse+0x26>
    3c2e:	9f 5f       	subi	r25, 0xFF	; 255
    3c30:	5f 4f       	sbci	r21, 0xFF	; 255
    3c32:	22 0f       	add	r18, r18
    3c34:	33 1f       	adc	r19, r19
    3c36:	44 1f       	adc	r20, r20
    3c38:	aa 1f       	adc	r26, r26
    3c3a:	a9 f3       	breq	.-22     	; 0x3c26 <__divsf3_pse+0x10>
    3c3c:	33 d0       	rcall	.+102    	; 0x3ca4 <__divsf3_pse+0x8e>
    3c3e:	0e 2e       	mov	r0, r30
    3c40:	3a f0       	brmi	.+14     	; 0x3c50 <__divsf3_pse+0x3a>
    3c42:	e0 e8       	ldi	r30, 0x80	; 128
    3c44:	30 d0       	rcall	.+96     	; 0x3ca6 <__divsf3_pse+0x90>
    3c46:	91 50       	subi	r25, 0x01	; 1
    3c48:	50 40       	sbci	r21, 0x00	; 0
    3c4a:	e6 95       	lsr	r30
    3c4c:	00 1c       	adc	r0, r0
    3c4e:	ca f7       	brpl	.-14     	; 0x3c42 <__divsf3_pse+0x2c>
    3c50:	29 d0       	rcall	.+82     	; 0x3ca4 <__divsf3_pse+0x8e>
    3c52:	fe 2f       	mov	r31, r30
    3c54:	27 d0       	rcall	.+78     	; 0x3ca4 <__divsf3_pse+0x8e>
    3c56:	66 0f       	add	r22, r22
    3c58:	77 1f       	adc	r23, r23
    3c5a:	88 1f       	adc	r24, r24
    3c5c:	bb 1f       	adc	r27, r27
    3c5e:	26 17       	cp	r18, r22
    3c60:	37 07       	cpc	r19, r23
    3c62:	48 07       	cpc	r20, r24
    3c64:	ab 07       	cpc	r26, r27
    3c66:	b0 e8       	ldi	r27, 0x80	; 128
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <__divsf3_pse+0x56>
    3c6a:	bb 0b       	sbc	r27, r27
    3c6c:	80 2d       	mov	r24, r0
    3c6e:	bf 01       	movw	r22, r30
    3c70:	ff 27       	eor	r31, r31
    3c72:	93 58       	subi	r25, 0x83	; 131
    3c74:	5f 4f       	sbci	r21, 0xFF	; 255
    3c76:	2a f0       	brmi	.+10     	; 0x3c82 <__divsf3_pse+0x6c>
    3c78:	9e 3f       	cpi	r25, 0xFE	; 254
    3c7a:	51 05       	cpc	r21, r1
    3c7c:	68 f0       	brcs	.+26     	; 0x3c98 <__divsf3_pse+0x82>
    3c7e:	c9 c0       	rjmp	.+402    	; 0x3e12 <__fp_inf>
    3c80:	78 c1       	rjmp	.+752    	; 0x3f72 <__fp_szero>
    3c82:	5f 3f       	cpi	r21, 0xFF	; 255
    3c84:	ec f3       	brlt	.-6      	; 0x3c80 <__divsf3_pse+0x6a>
    3c86:	98 3e       	cpi	r25, 0xE8	; 232
    3c88:	dc f3       	brlt	.-10     	; 0x3c80 <__divsf3_pse+0x6a>
    3c8a:	86 95       	lsr	r24
    3c8c:	77 95       	ror	r23
    3c8e:	67 95       	ror	r22
    3c90:	b7 95       	ror	r27
    3c92:	f7 95       	ror	r31
    3c94:	9f 5f       	subi	r25, 0xFF	; 255
    3c96:	c9 f7       	brne	.-14     	; 0x3c8a <__divsf3_pse+0x74>
    3c98:	88 0f       	add	r24, r24
    3c9a:	91 1d       	adc	r25, r1
    3c9c:	96 95       	lsr	r25
    3c9e:	87 95       	ror	r24
    3ca0:	97 f9       	bld	r25, 7
    3ca2:	08 95       	ret
    3ca4:	e1 e0       	ldi	r30, 0x01	; 1
    3ca6:	66 0f       	add	r22, r22
    3ca8:	77 1f       	adc	r23, r23
    3caa:	88 1f       	adc	r24, r24
    3cac:	bb 1f       	adc	r27, r27
    3cae:	62 17       	cp	r22, r18
    3cb0:	73 07       	cpc	r23, r19
    3cb2:	84 07       	cpc	r24, r20
    3cb4:	ba 07       	cpc	r27, r26
    3cb6:	20 f0       	brcs	.+8      	; 0x3cc0 <__divsf3_pse+0xaa>
    3cb8:	62 1b       	sub	r22, r18
    3cba:	73 0b       	sbc	r23, r19
    3cbc:	84 0b       	sbc	r24, r20
    3cbe:	ba 0b       	sbc	r27, r26
    3cc0:	ee 1f       	adc	r30, r30
    3cc2:	88 f7       	brcc	.-30     	; 0x3ca6 <__divsf3_pse+0x90>
    3cc4:	e0 95       	com	r30
    3cc6:	08 95       	ret

00003cc8 <__fixsfsi>:
    3cc8:	04 d0       	rcall	.+8      	; 0x3cd2 <__fixunssfsi>
    3cca:	68 94       	set
    3ccc:	b1 11       	cpse	r27, r1
    3cce:	51 c1       	rjmp	.+674    	; 0x3f72 <__fp_szero>
    3cd0:	08 95       	ret

00003cd2 <__fixunssfsi>:
    3cd2:	1d d1       	rcall	.+570    	; 0x3f0e <__fp_splitA>
    3cd4:	88 f0       	brcs	.+34     	; 0x3cf8 <__fixunssfsi+0x26>
    3cd6:	9f 57       	subi	r25, 0x7F	; 127
    3cd8:	90 f0       	brcs	.+36     	; 0x3cfe <__fixunssfsi+0x2c>
    3cda:	b9 2f       	mov	r27, r25
    3cdc:	99 27       	eor	r25, r25
    3cde:	b7 51       	subi	r27, 0x17	; 23
    3ce0:	a0 f0       	brcs	.+40     	; 0x3d0a <__fixunssfsi+0x38>
    3ce2:	d1 f0       	breq	.+52     	; 0x3d18 <__fixunssfsi+0x46>
    3ce4:	66 0f       	add	r22, r22
    3ce6:	77 1f       	adc	r23, r23
    3ce8:	88 1f       	adc	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	1a f0       	brmi	.+6      	; 0x3cf4 <__fixunssfsi+0x22>
    3cee:	ba 95       	dec	r27
    3cf0:	c9 f7       	brne	.-14     	; 0x3ce4 <__fixunssfsi+0x12>
    3cf2:	12 c0       	rjmp	.+36     	; 0x3d18 <__fixunssfsi+0x46>
    3cf4:	b1 30       	cpi	r27, 0x01	; 1
    3cf6:	81 f0       	breq	.+32     	; 0x3d18 <__fixunssfsi+0x46>
    3cf8:	3b d1       	rcall	.+630    	; 0x3f70 <__fp_zero>
    3cfa:	b1 e0       	ldi	r27, 0x01	; 1
    3cfc:	08 95       	ret
    3cfe:	38 c1       	rjmp	.+624    	; 0x3f70 <__fp_zero>
    3d00:	67 2f       	mov	r22, r23
    3d02:	78 2f       	mov	r23, r24
    3d04:	88 27       	eor	r24, r24
    3d06:	b8 5f       	subi	r27, 0xF8	; 248
    3d08:	39 f0       	breq	.+14     	; 0x3d18 <__fixunssfsi+0x46>
    3d0a:	b9 3f       	cpi	r27, 0xF9	; 249
    3d0c:	cc f3       	brlt	.-14     	; 0x3d00 <__fixunssfsi+0x2e>
    3d0e:	86 95       	lsr	r24
    3d10:	77 95       	ror	r23
    3d12:	67 95       	ror	r22
    3d14:	b3 95       	inc	r27
    3d16:	d9 f7       	brne	.-10     	; 0x3d0e <__fixunssfsi+0x3c>
    3d18:	3e f4       	brtc	.+14     	; 0x3d28 <__fixunssfsi+0x56>
    3d1a:	90 95       	com	r25
    3d1c:	80 95       	com	r24
    3d1e:	70 95       	com	r23
    3d20:	61 95       	neg	r22
    3d22:	7f 4f       	sbci	r23, 0xFF	; 255
    3d24:	8f 4f       	sbci	r24, 0xFF	; 255
    3d26:	9f 4f       	sbci	r25, 0xFF	; 255
    3d28:	08 95       	ret

00003d2a <__floatunsisf>:
    3d2a:	e8 94       	clt
    3d2c:	09 c0       	rjmp	.+18     	; 0x3d40 <__floatsisf+0x12>

00003d2e <__floatsisf>:
    3d2e:	97 fb       	bst	r25, 7
    3d30:	3e f4       	brtc	.+14     	; 0x3d40 <__floatsisf+0x12>
    3d32:	90 95       	com	r25
    3d34:	80 95       	com	r24
    3d36:	70 95       	com	r23
    3d38:	61 95       	neg	r22
    3d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d40:	99 23       	and	r25, r25
    3d42:	a9 f0       	breq	.+42     	; 0x3d6e <__floatsisf+0x40>
    3d44:	f9 2f       	mov	r31, r25
    3d46:	96 e9       	ldi	r25, 0x96	; 150
    3d48:	bb 27       	eor	r27, r27
    3d4a:	93 95       	inc	r25
    3d4c:	f6 95       	lsr	r31
    3d4e:	87 95       	ror	r24
    3d50:	77 95       	ror	r23
    3d52:	67 95       	ror	r22
    3d54:	b7 95       	ror	r27
    3d56:	f1 11       	cpse	r31, r1
    3d58:	f8 cf       	rjmp	.-16     	; 0x3d4a <__floatsisf+0x1c>
    3d5a:	fa f4       	brpl	.+62     	; 0x3d9a <__floatsisf+0x6c>
    3d5c:	bb 0f       	add	r27, r27
    3d5e:	11 f4       	brne	.+4      	; 0x3d64 <__floatsisf+0x36>
    3d60:	60 ff       	sbrs	r22, 0
    3d62:	1b c0       	rjmp	.+54     	; 0x3d9a <__floatsisf+0x6c>
    3d64:	6f 5f       	subi	r22, 0xFF	; 255
    3d66:	7f 4f       	sbci	r23, 0xFF	; 255
    3d68:	8f 4f       	sbci	r24, 0xFF	; 255
    3d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6c:	16 c0       	rjmp	.+44     	; 0x3d9a <__floatsisf+0x6c>
    3d6e:	88 23       	and	r24, r24
    3d70:	11 f0       	breq	.+4      	; 0x3d76 <__floatsisf+0x48>
    3d72:	96 e9       	ldi	r25, 0x96	; 150
    3d74:	11 c0       	rjmp	.+34     	; 0x3d98 <__floatsisf+0x6a>
    3d76:	77 23       	and	r23, r23
    3d78:	21 f0       	breq	.+8      	; 0x3d82 <__floatsisf+0x54>
    3d7a:	9e e8       	ldi	r25, 0x8E	; 142
    3d7c:	87 2f       	mov	r24, r23
    3d7e:	76 2f       	mov	r23, r22
    3d80:	05 c0       	rjmp	.+10     	; 0x3d8c <__floatsisf+0x5e>
    3d82:	66 23       	and	r22, r22
    3d84:	71 f0       	breq	.+28     	; 0x3da2 <__floatsisf+0x74>
    3d86:	96 e8       	ldi	r25, 0x86	; 134
    3d88:	86 2f       	mov	r24, r22
    3d8a:	70 e0       	ldi	r23, 0x00	; 0
    3d8c:	60 e0       	ldi	r22, 0x00	; 0
    3d8e:	2a f0       	brmi	.+10     	; 0x3d9a <__floatsisf+0x6c>
    3d90:	9a 95       	dec	r25
    3d92:	66 0f       	add	r22, r22
    3d94:	77 1f       	adc	r23, r23
    3d96:	88 1f       	adc	r24, r24
    3d98:	da f7       	brpl	.-10     	; 0x3d90 <__floatsisf+0x62>
    3d9a:	88 0f       	add	r24, r24
    3d9c:	96 95       	lsr	r25
    3d9e:	87 95       	ror	r24
    3da0:	97 f9       	bld	r25, 7
    3da2:	08 95       	ret

00003da4 <floor>:
    3da4:	ce d0       	rcall	.+412    	; 0x3f42 <__fp_trunc>
    3da6:	80 f0       	brcs	.+32     	; 0x3dc8 <floor+0x24>
    3da8:	9f 37       	cpi	r25, 0x7F	; 127
    3daa:	40 f4       	brcc	.+16     	; 0x3dbc <floor+0x18>
    3dac:	91 11       	cpse	r25, r1
    3dae:	0e f0       	brts	.+2      	; 0x3db2 <floor+0xe>
    3db0:	e0 c0       	rjmp	.+448    	; 0x3f72 <__fp_szero>
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	80 e8       	ldi	r24, 0x80	; 128
    3db8:	9f eb       	ldi	r25, 0xBF	; 191
    3dba:	08 95       	ret
    3dbc:	26 f4       	brtc	.+8      	; 0x3dc6 <floor+0x22>
    3dbe:	1b 16       	cp	r1, r27
    3dc0:	61 1d       	adc	r22, r1
    3dc2:	71 1d       	adc	r23, r1
    3dc4:	81 1d       	adc	r24, r1
    3dc6:	2b c0       	rjmp	.+86     	; 0x3e1e <__fp_mintl>
    3dc8:	45 c0       	rjmp	.+138    	; 0x3e54 <__fp_mpack>

00003dca <__fp_cmp>:
    3dca:	99 0f       	add	r25, r25
    3dcc:	00 08       	sbc	r0, r0
    3dce:	55 0f       	add	r21, r21
    3dd0:	aa 0b       	sbc	r26, r26
    3dd2:	e0 e8       	ldi	r30, 0x80	; 128
    3dd4:	fe ef       	ldi	r31, 0xFE	; 254
    3dd6:	16 16       	cp	r1, r22
    3dd8:	17 06       	cpc	r1, r23
    3dda:	e8 07       	cpc	r30, r24
    3ddc:	f9 07       	cpc	r31, r25
    3dde:	c0 f0       	brcs	.+48     	; 0x3e10 <__fp_cmp+0x46>
    3de0:	12 16       	cp	r1, r18
    3de2:	13 06       	cpc	r1, r19
    3de4:	e4 07       	cpc	r30, r20
    3de6:	f5 07       	cpc	r31, r21
    3de8:	98 f0       	brcs	.+38     	; 0x3e10 <__fp_cmp+0x46>
    3dea:	62 1b       	sub	r22, r18
    3dec:	73 0b       	sbc	r23, r19
    3dee:	84 0b       	sbc	r24, r20
    3df0:	95 0b       	sbc	r25, r21
    3df2:	39 f4       	brne	.+14     	; 0x3e02 <__fp_cmp+0x38>
    3df4:	0a 26       	eor	r0, r26
    3df6:	61 f0       	breq	.+24     	; 0x3e10 <__fp_cmp+0x46>
    3df8:	23 2b       	or	r18, r19
    3dfa:	24 2b       	or	r18, r20
    3dfc:	25 2b       	or	r18, r21
    3dfe:	21 f4       	brne	.+8      	; 0x3e08 <__fp_cmp+0x3e>
    3e00:	08 95       	ret
    3e02:	0a 26       	eor	r0, r26
    3e04:	09 f4       	brne	.+2      	; 0x3e08 <__fp_cmp+0x3e>
    3e06:	a1 40       	sbci	r26, 0x01	; 1
    3e08:	a6 95       	lsr	r26
    3e0a:	8f ef       	ldi	r24, 0xFF	; 255
    3e0c:	81 1d       	adc	r24, r1
    3e0e:	81 1d       	adc	r24, r1
    3e10:	08 95       	ret

00003e12 <__fp_inf>:
    3e12:	97 f9       	bld	r25, 7
    3e14:	9f 67       	ori	r25, 0x7F	; 127
    3e16:	80 e8       	ldi	r24, 0x80	; 128
    3e18:	70 e0       	ldi	r23, 0x00	; 0
    3e1a:	60 e0       	ldi	r22, 0x00	; 0
    3e1c:	08 95       	ret

00003e1e <__fp_mintl>:
    3e1e:	88 23       	and	r24, r24
    3e20:	71 f4       	brne	.+28     	; 0x3e3e <__fp_mintl+0x20>
    3e22:	77 23       	and	r23, r23
    3e24:	21 f0       	breq	.+8      	; 0x3e2e <__fp_mintl+0x10>
    3e26:	98 50       	subi	r25, 0x08	; 8
    3e28:	87 2b       	or	r24, r23
    3e2a:	76 2f       	mov	r23, r22
    3e2c:	07 c0       	rjmp	.+14     	; 0x3e3c <__fp_mintl+0x1e>
    3e2e:	66 23       	and	r22, r22
    3e30:	11 f4       	brne	.+4      	; 0x3e36 <__fp_mintl+0x18>
    3e32:	99 27       	eor	r25, r25
    3e34:	0d c0       	rjmp	.+26     	; 0x3e50 <__fp_mintl+0x32>
    3e36:	90 51       	subi	r25, 0x10	; 16
    3e38:	86 2b       	or	r24, r22
    3e3a:	70 e0       	ldi	r23, 0x00	; 0
    3e3c:	60 e0       	ldi	r22, 0x00	; 0
    3e3e:	2a f0       	brmi	.+10     	; 0x3e4a <__fp_mintl+0x2c>
    3e40:	9a 95       	dec	r25
    3e42:	66 0f       	add	r22, r22
    3e44:	77 1f       	adc	r23, r23
    3e46:	88 1f       	adc	r24, r24
    3e48:	da f7       	brpl	.-10     	; 0x3e40 <__fp_mintl+0x22>
    3e4a:	88 0f       	add	r24, r24
    3e4c:	96 95       	lsr	r25
    3e4e:	87 95       	ror	r24
    3e50:	97 f9       	bld	r25, 7
    3e52:	08 95       	ret

00003e54 <__fp_mpack>:
    3e54:	9f 3f       	cpi	r25, 0xFF	; 255
    3e56:	31 f0       	breq	.+12     	; 0x3e64 <__fp_mpack_finite+0xc>

00003e58 <__fp_mpack_finite>:
    3e58:	91 50       	subi	r25, 0x01	; 1
    3e5a:	20 f4       	brcc	.+8      	; 0x3e64 <__fp_mpack_finite+0xc>
    3e5c:	87 95       	ror	r24
    3e5e:	77 95       	ror	r23
    3e60:	67 95       	ror	r22
    3e62:	b7 95       	ror	r27
    3e64:	88 0f       	add	r24, r24
    3e66:	91 1d       	adc	r25, r1
    3e68:	96 95       	lsr	r25
    3e6a:	87 95       	ror	r24
    3e6c:	97 f9       	bld	r25, 7
    3e6e:	08 95       	ret

00003e70 <__fp_nan>:
    3e70:	9f ef       	ldi	r25, 0xFF	; 255
    3e72:	80 ec       	ldi	r24, 0xC0	; 192
    3e74:	08 95       	ret

00003e76 <__fp_powser>:
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	1f 93       	push	r17
    3e7c:	0f 93       	push	r16
    3e7e:	ff 92       	push	r15
    3e80:	ef 92       	push	r14
    3e82:	df 92       	push	r13
    3e84:	7b 01       	movw	r14, r22
    3e86:	8c 01       	movw	r16, r24
    3e88:	68 94       	set
    3e8a:	05 c0       	rjmp	.+10     	; 0x3e96 <__fp_powser+0x20>
    3e8c:	da 2e       	mov	r13, r26
    3e8e:	ef 01       	movw	r28, r30
    3e90:	f0 d0       	rcall	.+480    	; 0x4072 <__mulsf3x>
    3e92:	fe 01       	movw	r30, r28
    3e94:	e8 94       	clt
    3e96:	a5 91       	lpm	r26, Z+
    3e98:	25 91       	lpm	r18, Z+
    3e9a:	35 91       	lpm	r19, Z+
    3e9c:	45 91       	lpm	r20, Z+
    3e9e:	55 91       	lpm	r21, Z+
    3ea0:	ae f3       	brts	.-22     	; 0x3e8c <__fp_powser+0x16>
    3ea2:	ef 01       	movw	r28, r30
    3ea4:	17 de       	rcall	.-978    	; 0x3ad4 <__addsf3x>
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	97 01       	movw	r18, r14
    3eaa:	a8 01       	movw	r20, r16
    3eac:	da 94       	dec	r13
    3eae:	79 f7       	brne	.-34     	; 0x3e8e <__fp_powser+0x18>
    3eb0:	df 90       	pop	r13
    3eb2:	ef 90       	pop	r14
    3eb4:	ff 90       	pop	r15
    3eb6:	0f 91       	pop	r16
    3eb8:	1f 91       	pop	r17
    3eba:	cf 91       	pop	r28
    3ebc:	df 91       	pop	r29
    3ebe:	08 95       	ret

00003ec0 <__fp_pscA>:
    3ec0:	00 24       	eor	r0, r0
    3ec2:	0a 94       	dec	r0
    3ec4:	16 16       	cp	r1, r22
    3ec6:	17 06       	cpc	r1, r23
    3ec8:	18 06       	cpc	r1, r24
    3eca:	09 06       	cpc	r0, r25
    3ecc:	08 95       	ret

00003ece <__fp_pscB>:
    3ece:	00 24       	eor	r0, r0
    3ed0:	0a 94       	dec	r0
    3ed2:	12 16       	cp	r1, r18
    3ed4:	13 06       	cpc	r1, r19
    3ed6:	14 06       	cpc	r1, r20
    3ed8:	05 06       	cpc	r0, r21
    3eda:	08 95       	ret

00003edc <__fp_round>:
    3edc:	09 2e       	mov	r0, r25
    3ede:	03 94       	inc	r0
    3ee0:	00 0c       	add	r0, r0
    3ee2:	11 f4       	brne	.+4      	; 0x3ee8 <__fp_round+0xc>
    3ee4:	88 23       	and	r24, r24
    3ee6:	52 f0       	brmi	.+20     	; 0x3efc <__fp_round+0x20>
    3ee8:	bb 0f       	add	r27, r27
    3eea:	40 f4       	brcc	.+16     	; 0x3efc <__fp_round+0x20>
    3eec:	bf 2b       	or	r27, r31
    3eee:	11 f4       	brne	.+4      	; 0x3ef4 <__fp_round+0x18>
    3ef0:	60 ff       	sbrs	r22, 0
    3ef2:	04 c0       	rjmp	.+8      	; 0x3efc <__fp_round+0x20>
    3ef4:	6f 5f       	subi	r22, 0xFF	; 255
    3ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    3efa:	9f 4f       	sbci	r25, 0xFF	; 255
    3efc:	08 95       	ret

00003efe <__fp_split3>:
    3efe:	57 fd       	sbrc	r21, 7
    3f00:	90 58       	subi	r25, 0x80	; 128
    3f02:	44 0f       	add	r20, r20
    3f04:	55 1f       	adc	r21, r21
    3f06:	59 f0       	breq	.+22     	; 0x3f1e <__fp_splitA+0x10>
    3f08:	5f 3f       	cpi	r21, 0xFF	; 255
    3f0a:	71 f0       	breq	.+28     	; 0x3f28 <__fp_splitA+0x1a>
    3f0c:	47 95       	ror	r20

00003f0e <__fp_splitA>:
    3f0e:	88 0f       	add	r24, r24
    3f10:	97 fb       	bst	r25, 7
    3f12:	99 1f       	adc	r25, r25
    3f14:	61 f0       	breq	.+24     	; 0x3f2e <__fp_splitA+0x20>
    3f16:	9f 3f       	cpi	r25, 0xFF	; 255
    3f18:	79 f0       	breq	.+30     	; 0x3f38 <__fp_splitA+0x2a>
    3f1a:	87 95       	ror	r24
    3f1c:	08 95       	ret
    3f1e:	12 16       	cp	r1, r18
    3f20:	13 06       	cpc	r1, r19
    3f22:	14 06       	cpc	r1, r20
    3f24:	55 1f       	adc	r21, r21
    3f26:	f2 cf       	rjmp	.-28     	; 0x3f0c <__fp_split3+0xe>
    3f28:	46 95       	lsr	r20
    3f2a:	f1 df       	rcall	.-30     	; 0x3f0e <__fp_splitA>
    3f2c:	08 c0       	rjmp	.+16     	; 0x3f3e <__fp_splitA+0x30>
    3f2e:	16 16       	cp	r1, r22
    3f30:	17 06       	cpc	r1, r23
    3f32:	18 06       	cpc	r1, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	f1 cf       	rjmp	.-30     	; 0x3f1a <__fp_splitA+0xc>
    3f38:	86 95       	lsr	r24
    3f3a:	71 05       	cpc	r23, r1
    3f3c:	61 05       	cpc	r22, r1
    3f3e:	08 94       	sec
    3f40:	08 95       	ret

00003f42 <__fp_trunc>:
    3f42:	e5 df       	rcall	.-54     	; 0x3f0e <__fp_splitA>
    3f44:	a0 f0       	brcs	.+40     	; 0x3f6e <__fp_trunc+0x2c>
    3f46:	be e7       	ldi	r27, 0x7E	; 126
    3f48:	b9 17       	cp	r27, r25
    3f4a:	88 f4       	brcc	.+34     	; 0x3f6e <__fp_trunc+0x2c>
    3f4c:	bb 27       	eor	r27, r27
    3f4e:	9f 38       	cpi	r25, 0x8F	; 143
    3f50:	60 f4       	brcc	.+24     	; 0x3f6a <__fp_trunc+0x28>
    3f52:	16 16       	cp	r1, r22
    3f54:	b1 1d       	adc	r27, r1
    3f56:	67 2f       	mov	r22, r23
    3f58:	78 2f       	mov	r23, r24
    3f5a:	88 27       	eor	r24, r24
    3f5c:	98 5f       	subi	r25, 0xF8	; 248
    3f5e:	f7 cf       	rjmp	.-18     	; 0x3f4e <__fp_trunc+0xc>
    3f60:	86 95       	lsr	r24
    3f62:	77 95       	ror	r23
    3f64:	67 95       	ror	r22
    3f66:	b1 1d       	adc	r27, r1
    3f68:	93 95       	inc	r25
    3f6a:	96 39       	cpi	r25, 0x96	; 150
    3f6c:	c8 f3       	brcs	.-14     	; 0x3f60 <__fp_trunc+0x1e>
    3f6e:	08 95       	ret

00003f70 <__fp_zero>:
    3f70:	e8 94       	clt

00003f72 <__fp_szero>:
    3f72:	bb 27       	eor	r27, r27
    3f74:	66 27       	eor	r22, r22
    3f76:	77 27       	eor	r23, r23
    3f78:	cb 01       	movw	r24, r22
    3f7a:	97 f9       	bld	r25, 7
    3f7c:	08 95       	ret

00003f7e <__gesf2>:
    3f7e:	25 df       	rcall	.-438    	; 0x3dca <__fp_cmp>
    3f80:	08 f4       	brcc	.+2      	; 0x3f84 <__gesf2+0x6>
    3f82:	8f ef       	ldi	r24, 0xFF	; 255
    3f84:	08 95       	ret

00003f86 <inverse>:
    3f86:	9b 01       	movw	r18, r22
    3f88:	ac 01       	movw	r20, r24
    3f8a:	60 e0       	ldi	r22, 0x00	; 0
    3f8c:	70 e0       	ldi	r23, 0x00	; 0
    3f8e:	80 e8       	ldi	r24, 0x80	; 128
    3f90:	9f e3       	ldi	r25, 0x3F	; 63
    3f92:	32 ce       	rjmp	.-924    	; 0x3bf8 <__divsf3>

00003f94 <lround>:
    3f94:	bc df       	rcall	.-136    	; 0x3f0e <__fp_splitA>
    3f96:	58 f1       	brcs	.+86     	; 0x3fee <lround+0x5a>
    3f98:	9e 57       	subi	r25, 0x7E	; 126
    3f9a:	58 f1       	brcs	.+86     	; 0x3ff2 <lround+0x5e>
    3f9c:	98 51       	subi	r25, 0x18	; 24
    3f9e:	a0 f0       	brcs	.+40     	; 0x3fc8 <lround+0x34>
    3fa0:	e9 f0       	breq	.+58     	; 0x3fdc <lround+0x48>
    3fa2:	98 30       	cpi	r25, 0x08	; 8
    3fa4:	20 f5       	brcc	.+72     	; 0x3fee <lround+0x5a>
    3fa6:	09 2e       	mov	r0, r25
    3fa8:	99 27       	eor	r25, r25
    3faa:	66 0f       	add	r22, r22
    3fac:	77 1f       	adc	r23, r23
    3fae:	88 1f       	adc	r24, r24
    3fb0:	99 1f       	adc	r25, r25
    3fb2:	0a 94       	dec	r0
    3fb4:	d1 f7       	brne	.-12     	; 0x3faa <lround+0x16>
    3fb6:	12 c0       	rjmp	.+36     	; 0x3fdc <lround+0x48>
    3fb8:	06 2e       	mov	r0, r22
    3fba:	67 2f       	mov	r22, r23
    3fbc:	78 2f       	mov	r23, r24
    3fbe:	88 27       	eor	r24, r24
    3fc0:	98 5f       	subi	r25, 0xF8	; 248
    3fc2:	11 f4       	brne	.+4      	; 0x3fc8 <lround+0x34>
    3fc4:	00 0c       	add	r0, r0
    3fc6:	07 c0       	rjmp	.+14     	; 0x3fd6 <lround+0x42>
    3fc8:	99 3f       	cpi	r25, 0xF9	; 249
    3fca:	b4 f3       	brlt	.-20     	; 0x3fb8 <lround+0x24>
    3fcc:	86 95       	lsr	r24
    3fce:	77 95       	ror	r23
    3fd0:	67 95       	ror	r22
    3fd2:	93 95       	inc	r25
    3fd4:	d9 f7       	brne	.-10     	; 0x3fcc <lround+0x38>
    3fd6:	61 1d       	adc	r22, r1
    3fd8:	71 1d       	adc	r23, r1
    3fda:	81 1d       	adc	r24, r1
    3fdc:	3e f4       	brtc	.+14     	; 0x3fec <lround+0x58>
    3fde:	90 95       	com	r25
    3fe0:	80 95       	com	r24
    3fe2:	70 95       	com	r23
    3fe4:	61 95       	neg	r22
    3fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fea:	9f 4f       	sbci	r25, 0xFF	; 255
    3fec:	08 95       	ret
    3fee:	68 94       	set
    3ff0:	c0 cf       	rjmp	.-128    	; 0x3f72 <__fp_szero>
    3ff2:	be cf       	rjmp	.-132    	; 0x3f70 <__fp_zero>

00003ff4 <modf>:
    3ff4:	fa 01       	movw	r30, r20
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	aa 0f       	add	r26, r26
    3ffa:	bb 1f       	adc	r27, r27
    3ffc:	9b 01       	movw	r18, r22
    3ffe:	ac 01       	movw	r20, r24
    4000:	bf 57       	subi	r27, 0x7F	; 127
    4002:	28 f4       	brcc	.+10     	; 0x400e <modf+0x1a>
    4004:	22 27       	eor	r18, r18
    4006:	33 27       	eor	r19, r19
    4008:	44 27       	eor	r20, r20
    400a:	50 78       	andi	r21, 0x80	; 128
    400c:	1f c0       	rjmp	.+62     	; 0x404c <modf+0x58>
    400e:	b7 51       	subi	r27, 0x17	; 23
    4010:	88 f4       	brcc	.+34     	; 0x4034 <modf+0x40>
    4012:	ab 2f       	mov	r26, r27
    4014:	00 24       	eor	r0, r0
    4016:	46 95       	lsr	r20
    4018:	37 95       	ror	r19
    401a:	27 95       	ror	r18
    401c:	01 1c       	adc	r0, r1
    401e:	a3 95       	inc	r26
    4020:	d2 f3       	brmi	.-12     	; 0x4016 <modf+0x22>
    4022:	00 20       	and	r0, r0
    4024:	69 f0       	breq	.+26     	; 0x4040 <modf+0x4c>
    4026:	22 0f       	add	r18, r18
    4028:	33 1f       	adc	r19, r19
    402a:	44 1f       	adc	r20, r20
    402c:	b3 95       	inc	r27
    402e:	da f3       	brmi	.-10     	; 0x4026 <modf+0x32>
    4030:	0d d0       	rcall	.+26     	; 0x404c <modf+0x58>
    4032:	3e cd       	rjmp	.-1412   	; 0x3ab0 <__subsf3>
    4034:	61 30       	cpi	r22, 0x01	; 1
    4036:	71 05       	cpc	r23, r1
    4038:	a0 e8       	ldi	r26, 0x80	; 128
    403a:	8a 07       	cpc	r24, r26
    403c:	b9 46       	sbci	r27, 0x69	; 105
    403e:	30 f4       	brcc	.+12     	; 0x404c <modf+0x58>
    4040:	9b 01       	movw	r18, r22
    4042:	ac 01       	movw	r20, r24
    4044:	66 27       	eor	r22, r22
    4046:	77 27       	eor	r23, r23
    4048:	88 27       	eor	r24, r24
    404a:	90 78       	andi	r25, 0x80	; 128
    404c:	30 96       	adiw	r30, 0x00	; 0
    404e:	21 f0       	breq	.+8      	; 0x4058 <modf+0x64>
    4050:	20 83       	st	Z, r18
    4052:	31 83       	std	Z+1, r19	; 0x01
    4054:	42 83       	std	Z+2, r20	; 0x02
    4056:	53 83       	std	Z+3, r21	; 0x03
    4058:	08 95       	ret

0000405a <__mulsf3>:
    405a:	0b d0       	rcall	.+22     	; 0x4072 <__mulsf3x>
    405c:	3f cf       	rjmp	.-386    	; 0x3edc <__fp_round>
    405e:	30 df       	rcall	.-416    	; 0x3ec0 <__fp_pscA>
    4060:	28 f0       	brcs	.+10     	; 0x406c <__mulsf3+0x12>
    4062:	35 df       	rcall	.-406    	; 0x3ece <__fp_pscB>
    4064:	18 f0       	brcs	.+6      	; 0x406c <__mulsf3+0x12>
    4066:	95 23       	and	r25, r21
    4068:	09 f0       	breq	.+2      	; 0x406c <__mulsf3+0x12>
    406a:	d3 ce       	rjmp	.-602    	; 0x3e12 <__fp_inf>
    406c:	01 cf       	rjmp	.-510    	; 0x3e70 <__fp_nan>
    406e:	11 24       	eor	r1, r1
    4070:	80 cf       	rjmp	.-256    	; 0x3f72 <__fp_szero>

00004072 <__mulsf3x>:
    4072:	45 df       	rcall	.-374    	; 0x3efe <__fp_split3>
    4074:	a0 f3       	brcs	.-24     	; 0x405e <__mulsf3+0x4>

00004076 <__mulsf3_pse>:
    4076:	95 9f       	mul	r25, r21
    4078:	d1 f3       	breq	.-12     	; 0x406e <__mulsf3+0x14>
    407a:	95 0f       	add	r25, r21
    407c:	50 e0       	ldi	r21, 0x00	; 0
    407e:	55 1f       	adc	r21, r21
    4080:	62 9f       	mul	r22, r18
    4082:	f0 01       	movw	r30, r0
    4084:	72 9f       	mul	r23, r18
    4086:	bb 27       	eor	r27, r27
    4088:	f0 0d       	add	r31, r0
    408a:	b1 1d       	adc	r27, r1
    408c:	63 9f       	mul	r22, r19
    408e:	aa 27       	eor	r26, r26
    4090:	f0 0d       	add	r31, r0
    4092:	b1 1d       	adc	r27, r1
    4094:	aa 1f       	adc	r26, r26
    4096:	64 9f       	mul	r22, r20
    4098:	66 27       	eor	r22, r22
    409a:	b0 0d       	add	r27, r0
    409c:	a1 1d       	adc	r26, r1
    409e:	66 1f       	adc	r22, r22
    40a0:	82 9f       	mul	r24, r18
    40a2:	22 27       	eor	r18, r18
    40a4:	b0 0d       	add	r27, r0
    40a6:	a1 1d       	adc	r26, r1
    40a8:	62 1f       	adc	r22, r18
    40aa:	73 9f       	mul	r23, r19
    40ac:	b0 0d       	add	r27, r0
    40ae:	a1 1d       	adc	r26, r1
    40b0:	62 1f       	adc	r22, r18
    40b2:	83 9f       	mul	r24, r19
    40b4:	a0 0d       	add	r26, r0
    40b6:	61 1d       	adc	r22, r1
    40b8:	22 1f       	adc	r18, r18
    40ba:	74 9f       	mul	r23, r20
    40bc:	33 27       	eor	r19, r19
    40be:	a0 0d       	add	r26, r0
    40c0:	61 1d       	adc	r22, r1
    40c2:	23 1f       	adc	r18, r19
    40c4:	84 9f       	mul	r24, r20
    40c6:	60 0d       	add	r22, r0
    40c8:	21 1d       	adc	r18, r1
    40ca:	82 2f       	mov	r24, r18
    40cc:	76 2f       	mov	r23, r22
    40ce:	6a 2f       	mov	r22, r26
    40d0:	11 24       	eor	r1, r1
    40d2:	9f 57       	subi	r25, 0x7F	; 127
    40d4:	50 40       	sbci	r21, 0x00	; 0
    40d6:	8a f0       	brmi	.+34     	; 0x40fa <__mulsf3_pse+0x84>
    40d8:	e1 f0       	breq	.+56     	; 0x4112 <__mulsf3_pse+0x9c>
    40da:	88 23       	and	r24, r24
    40dc:	4a f0       	brmi	.+18     	; 0x40f0 <__mulsf3_pse+0x7a>
    40de:	ee 0f       	add	r30, r30
    40e0:	ff 1f       	adc	r31, r31
    40e2:	bb 1f       	adc	r27, r27
    40e4:	66 1f       	adc	r22, r22
    40e6:	77 1f       	adc	r23, r23
    40e8:	88 1f       	adc	r24, r24
    40ea:	91 50       	subi	r25, 0x01	; 1
    40ec:	50 40       	sbci	r21, 0x00	; 0
    40ee:	a9 f7       	brne	.-22     	; 0x40da <__mulsf3_pse+0x64>
    40f0:	9e 3f       	cpi	r25, 0xFE	; 254
    40f2:	51 05       	cpc	r21, r1
    40f4:	70 f0       	brcs	.+28     	; 0x4112 <__mulsf3_pse+0x9c>
    40f6:	8d ce       	rjmp	.-742    	; 0x3e12 <__fp_inf>
    40f8:	3c cf       	rjmp	.-392    	; 0x3f72 <__fp_szero>
    40fa:	5f 3f       	cpi	r21, 0xFF	; 255
    40fc:	ec f3       	brlt	.-6      	; 0x40f8 <__mulsf3_pse+0x82>
    40fe:	98 3e       	cpi	r25, 0xE8	; 232
    4100:	dc f3       	brlt	.-10     	; 0x40f8 <__mulsf3_pse+0x82>
    4102:	86 95       	lsr	r24
    4104:	77 95       	ror	r23
    4106:	67 95       	ror	r22
    4108:	b7 95       	ror	r27
    410a:	f7 95       	ror	r31
    410c:	e7 95       	ror	r30
    410e:	9f 5f       	subi	r25, 0xFF	; 255
    4110:	c1 f7       	brne	.-16     	; 0x4102 <__mulsf3_pse+0x8c>
    4112:	fe 2b       	or	r31, r30
    4114:	88 0f       	add	r24, r24
    4116:	91 1d       	adc	r25, r1
    4118:	96 95       	lsr	r25
    411a:	87 95       	ror	r24
    411c:	97 f9       	bld	r25, 7
    411e:	08 95       	ret

00004120 <round>:
    4120:	f6 de       	rcall	.-532    	; 0x3f0e <__fp_splitA>
    4122:	e0 f0       	brcs	.+56     	; 0x415c <round+0x3c>
    4124:	9e 37       	cpi	r25, 0x7E	; 126
    4126:	d8 f0       	brcs	.+54     	; 0x415e <round+0x3e>
    4128:	96 39       	cpi	r25, 0x96	; 150
    412a:	b8 f4       	brcc	.+46     	; 0x415a <round+0x3a>
    412c:	9e 38       	cpi	r25, 0x8E	; 142
    412e:	48 f4       	brcc	.+18     	; 0x4142 <round+0x22>
    4130:	67 2f       	mov	r22, r23
    4132:	78 2f       	mov	r23, r24
    4134:	88 27       	eor	r24, r24
    4136:	98 5f       	subi	r25, 0xF8	; 248
    4138:	f9 cf       	rjmp	.-14     	; 0x412c <round+0xc>
    413a:	86 95       	lsr	r24
    413c:	77 95       	ror	r23
    413e:	67 95       	ror	r22
    4140:	93 95       	inc	r25
    4142:	95 39       	cpi	r25, 0x95	; 149
    4144:	d0 f3       	brcs	.-12     	; 0x413a <round+0x1a>
    4146:	b6 2f       	mov	r27, r22
    4148:	b1 70       	andi	r27, 0x01	; 1
    414a:	6b 0f       	add	r22, r27
    414c:	71 1d       	adc	r23, r1
    414e:	81 1d       	adc	r24, r1
    4150:	20 f4       	brcc	.+8      	; 0x415a <round+0x3a>
    4152:	87 95       	ror	r24
    4154:	77 95       	ror	r23
    4156:	67 95       	ror	r22
    4158:	93 95       	inc	r25
    415a:	61 ce       	rjmp	.-830    	; 0x3e1e <__fp_mintl>
    415c:	7b ce       	rjmp	.-778    	; 0x3e54 <__fp_mpack>
    415e:	09 cf       	rjmp	.-494    	; 0x3f72 <__fp_szero>
    4160:	11 f4       	brne	.+4      	; 0x4166 <round+0x46>
    4162:	0e f4       	brtc	.+2      	; 0x4166 <round+0x46>
    4164:	85 ce       	rjmp	.-758    	; 0x3e70 <__fp_nan>
    4166:	76 ce       	rjmp	.-788    	; 0x3e54 <__fp_mpack>

00004168 <sqrt>:
    4168:	d2 de       	rcall	.-604    	; 0x3f0e <__fp_splitA>
    416a:	d0 f3       	brcs	.-12     	; 0x4160 <round+0x40>
    416c:	99 23       	and	r25, r25
    416e:	d9 f3       	breq	.-10     	; 0x4166 <round+0x46>
    4170:	ce f3       	brts	.-14     	; 0x4164 <round+0x44>
    4172:	9f 57       	subi	r25, 0x7F	; 127
    4174:	55 0b       	sbc	r21, r21
    4176:	87 ff       	sbrs	r24, 7
    4178:	3f d0       	rcall	.+126    	; 0x41f8 <__fp_norm2>
    417a:	00 24       	eor	r0, r0
    417c:	a0 e6       	ldi	r26, 0x60	; 96
    417e:	40 ea       	ldi	r20, 0xA0	; 160
    4180:	90 01       	movw	r18, r0
    4182:	80 58       	subi	r24, 0x80	; 128
    4184:	56 95       	lsr	r21
    4186:	97 95       	ror	r25
    4188:	28 f4       	brcc	.+10     	; 0x4194 <sqrt+0x2c>
    418a:	80 5c       	subi	r24, 0xC0	; 192
    418c:	66 0f       	add	r22, r22
    418e:	77 1f       	adc	r23, r23
    4190:	88 1f       	adc	r24, r24
    4192:	20 f0       	brcs	.+8      	; 0x419c <sqrt+0x34>
    4194:	26 17       	cp	r18, r22
    4196:	37 07       	cpc	r19, r23
    4198:	48 07       	cpc	r20, r24
    419a:	30 f4       	brcc	.+12     	; 0x41a8 <sqrt+0x40>
    419c:	62 1b       	sub	r22, r18
    419e:	73 0b       	sbc	r23, r19
    41a0:	84 0b       	sbc	r24, r20
    41a2:	20 29       	or	r18, r0
    41a4:	31 29       	or	r19, r1
    41a6:	4a 2b       	or	r20, r26
    41a8:	a6 95       	lsr	r26
    41aa:	17 94       	ror	r1
    41ac:	07 94       	ror	r0
    41ae:	20 25       	eor	r18, r0
    41b0:	31 25       	eor	r19, r1
    41b2:	4a 27       	eor	r20, r26
    41b4:	58 f7       	brcc	.-42     	; 0x418c <sqrt+0x24>
    41b6:	66 0f       	add	r22, r22
    41b8:	77 1f       	adc	r23, r23
    41ba:	88 1f       	adc	r24, r24
    41bc:	20 f0       	brcs	.+8      	; 0x41c6 <sqrt+0x5e>
    41be:	26 17       	cp	r18, r22
    41c0:	37 07       	cpc	r19, r23
    41c2:	48 07       	cpc	r20, r24
    41c4:	30 f4       	brcc	.+12     	; 0x41d2 <sqrt+0x6a>
    41c6:	62 0b       	sbc	r22, r18
    41c8:	73 0b       	sbc	r23, r19
    41ca:	84 0b       	sbc	r24, r20
    41cc:	20 0d       	add	r18, r0
    41ce:	31 1d       	adc	r19, r1
    41d0:	41 1d       	adc	r20, r1
    41d2:	a0 95       	com	r26
    41d4:	81 f7       	brne	.-32     	; 0x41b6 <sqrt+0x4e>
    41d6:	b9 01       	movw	r22, r18
    41d8:	84 2f       	mov	r24, r20
    41da:	91 58       	subi	r25, 0x81	; 129
    41dc:	88 0f       	add	r24, r24
    41de:	96 95       	lsr	r25
    41e0:	87 95       	ror	r24
    41e2:	08 95       	ret

000041e4 <square>:
    41e4:	9b 01       	movw	r18, r22
    41e6:	ac 01       	movw	r20, r24
    41e8:	38 cf       	rjmp	.-400    	; 0x405a <__mulsf3>

000041ea <trunc>:
    41ea:	ab de       	rcall	.-682    	; 0x3f42 <__fp_trunc>
    41ec:	20 f0       	brcs	.+8      	; 0x41f6 <trunc+0xc>
    41ee:	9f 37       	cpi	r25, 0x7F	; 127
    41f0:	08 f4       	brcc	.+2      	; 0x41f4 <trunc+0xa>
    41f2:	bf ce       	rjmp	.-642    	; 0x3f72 <__fp_szero>
    41f4:	14 ce       	rjmp	.-984    	; 0x3e1e <__fp_mintl>
    41f6:	2e ce       	rjmp	.-932    	; 0x3e54 <__fp_mpack>

000041f8 <__fp_norm2>:
    41f8:	91 50       	subi	r25, 0x01	; 1
    41fa:	50 40       	sbci	r21, 0x00	; 0
    41fc:	66 0f       	add	r22, r22
    41fe:	77 1f       	adc	r23, r23
    4200:	88 1f       	adc	r24, r24
    4202:	d2 f7       	brpl	.-12     	; 0x41f8 <__fp_norm2>
    4204:	08 95       	ret

00004206 <__mulsi3>:
    4206:	62 9f       	mul	r22, r18
    4208:	d0 01       	movw	r26, r0
    420a:	73 9f       	mul	r23, r19
    420c:	f0 01       	movw	r30, r0
    420e:	82 9f       	mul	r24, r18
    4210:	e0 0d       	add	r30, r0
    4212:	f1 1d       	adc	r31, r1
    4214:	64 9f       	mul	r22, r20
    4216:	e0 0d       	add	r30, r0
    4218:	f1 1d       	adc	r31, r1
    421a:	92 9f       	mul	r25, r18
    421c:	f0 0d       	add	r31, r0
    421e:	83 9f       	mul	r24, r19
    4220:	f0 0d       	add	r31, r0
    4222:	74 9f       	mul	r23, r20
    4224:	f0 0d       	add	r31, r0
    4226:	65 9f       	mul	r22, r21
    4228:	f0 0d       	add	r31, r0
    422a:	99 27       	eor	r25, r25
    422c:	72 9f       	mul	r23, r18
    422e:	b0 0d       	add	r27, r0
    4230:	e1 1d       	adc	r30, r1
    4232:	f9 1f       	adc	r31, r25
    4234:	63 9f       	mul	r22, r19
    4236:	b0 0d       	add	r27, r0
    4238:	e1 1d       	adc	r30, r1
    423a:	f9 1f       	adc	r31, r25
    423c:	bd 01       	movw	r22, r26
    423e:	cf 01       	movw	r24, r30
    4240:	11 24       	eor	r1, r1
    4242:	08 95       	ret

00004244 <__divmodhi4>:
    4244:	97 fb       	bst	r25, 7
    4246:	09 2e       	mov	r0, r25
    4248:	07 26       	eor	r0, r23
    424a:	0a d0       	rcall	.+20     	; 0x4260 <__divmodhi4_neg1>
    424c:	77 fd       	sbrc	r23, 7
    424e:	04 d0       	rcall	.+8      	; 0x4258 <__divmodhi4_neg2>
    4250:	49 d0       	rcall	.+146    	; 0x42e4 <__udivmodhi4>
    4252:	06 d0       	rcall	.+12     	; 0x4260 <__divmodhi4_neg1>
    4254:	00 20       	and	r0, r0
    4256:	1a f4       	brpl	.+6      	; 0x425e <__divmodhi4_exit>

00004258 <__divmodhi4_neg2>:
    4258:	70 95       	com	r23
    425a:	61 95       	neg	r22
    425c:	7f 4f       	sbci	r23, 0xFF	; 255

0000425e <__divmodhi4_exit>:
    425e:	08 95       	ret

00004260 <__divmodhi4_neg1>:
    4260:	f6 f7       	brtc	.-4      	; 0x425e <__divmodhi4_exit>
    4262:	90 95       	com	r25
    4264:	81 95       	neg	r24
    4266:	9f 4f       	sbci	r25, 0xFF	; 255
    4268:	08 95       	ret

0000426a <__udivmodsi4>:
    426a:	a1 e2       	ldi	r26, 0x21	; 33
    426c:	1a 2e       	mov	r1, r26
    426e:	aa 1b       	sub	r26, r26
    4270:	bb 1b       	sub	r27, r27
    4272:	fd 01       	movw	r30, r26
    4274:	0d c0       	rjmp	.+26     	; 0x4290 <__udivmodsi4_ep>

00004276 <__udivmodsi4_loop>:
    4276:	aa 1f       	adc	r26, r26
    4278:	bb 1f       	adc	r27, r27
    427a:	ee 1f       	adc	r30, r30
    427c:	ff 1f       	adc	r31, r31
    427e:	a2 17       	cp	r26, r18
    4280:	b3 07       	cpc	r27, r19
    4282:	e4 07       	cpc	r30, r20
    4284:	f5 07       	cpc	r31, r21
    4286:	20 f0       	brcs	.+8      	; 0x4290 <__udivmodsi4_ep>
    4288:	a2 1b       	sub	r26, r18
    428a:	b3 0b       	sbc	r27, r19
    428c:	e4 0b       	sbc	r30, r20
    428e:	f5 0b       	sbc	r31, r21

00004290 <__udivmodsi4_ep>:
    4290:	66 1f       	adc	r22, r22
    4292:	77 1f       	adc	r23, r23
    4294:	88 1f       	adc	r24, r24
    4296:	99 1f       	adc	r25, r25
    4298:	1a 94       	dec	r1
    429a:	69 f7       	brne	.-38     	; 0x4276 <__udivmodsi4_loop>
    429c:	60 95       	com	r22
    429e:	70 95       	com	r23
    42a0:	80 95       	com	r24
    42a2:	90 95       	com	r25
    42a4:	9b 01       	movw	r18, r22
    42a6:	ac 01       	movw	r20, r24
    42a8:	bd 01       	movw	r22, r26
    42aa:	cf 01       	movw	r24, r30
    42ac:	08 95       	ret

000042ae <__divmodsi4>:
    42ae:	97 fb       	bst	r25, 7
    42b0:	09 2e       	mov	r0, r25
    42b2:	05 26       	eor	r0, r21
    42b4:	0e d0       	rcall	.+28     	; 0x42d2 <__divmodsi4_neg1>
    42b6:	57 fd       	sbrc	r21, 7
    42b8:	04 d0       	rcall	.+8      	; 0x42c2 <__divmodsi4_neg2>
    42ba:	d7 df       	rcall	.-82     	; 0x426a <__udivmodsi4>
    42bc:	0a d0       	rcall	.+20     	; 0x42d2 <__divmodsi4_neg1>
    42be:	00 1c       	adc	r0, r0
    42c0:	38 f4       	brcc	.+14     	; 0x42d0 <__divmodsi4_exit>

000042c2 <__divmodsi4_neg2>:
    42c2:	50 95       	com	r21
    42c4:	40 95       	com	r20
    42c6:	30 95       	com	r19
    42c8:	21 95       	neg	r18
    42ca:	3f 4f       	sbci	r19, 0xFF	; 255
    42cc:	4f 4f       	sbci	r20, 0xFF	; 255
    42ce:	5f 4f       	sbci	r21, 0xFF	; 255

000042d0 <__divmodsi4_exit>:
    42d0:	08 95       	ret

000042d2 <__divmodsi4_neg1>:
    42d2:	f6 f7       	brtc	.-4      	; 0x42d0 <__divmodsi4_exit>
    42d4:	90 95       	com	r25
    42d6:	80 95       	com	r24
    42d8:	70 95       	com	r23
    42da:	61 95       	neg	r22
    42dc:	7f 4f       	sbci	r23, 0xFF	; 255
    42de:	8f 4f       	sbci	r24, 0xFF	; 255
    42e0:	9f 4f       	sbci	r25, 0xFF	; 255
    42e2:	08 95       	ret

000042e4 <__udivmodhi4>:
    42e4:	aa 1b       	sub	r26, r26
    42e6:	bb 1b       	sub	r27, r27
    42e8:	51 e1       	ldi	r21, 0x11	; 17
    42ea:	07 c0       	rjmp	.+14     	; 0x42fa <__udivmodhi4_ep>

000042ec <__udivmodhi4_loop>:
    42ec:	aa 1f       	adc	r26, r26
    42ee:	bb 1f       	adc	r27, r27
    42f0:	a6 17       	cp	r26, r22
    42f2:	b7 07       	cpc	r27, r23
    42f4:	10 f0       	brcs	.+4      	; 0x42fa <__udivmodhi4_ep>
    42f6:	a6 1b       	sub	r26, r22
    42f8:	b7 0b       	sbc	r27, r23

000042fa <__udivmodhi4_ep>:
    42fa:	88 1f       	adc	r24, r24
    42fc:	99 1f       	adc	r25, r25
    42fe:	5a 95       	dec	r21
    4300:	a9 f7       	brne	.-22     	; 0x42ec <__udivmodhi4_loop>
    4302:	80 95       	com	r24
    4304:	90 95       	com	r25
    4306:	bc 01       	movw	r22, r24
    4308:	cd 01       	movw	r24, r26
    430a:	08 95       	ret

0000430c <strtod>:
    430c:	8f 92       	push	r8
    430e:	9f 92       	push	r9
    4310:	af 92       	push	r10
    4312:	bf 92       	push	r11
    4314:	cf 92       	push	r12
    4316:	df 92       	push	r13
    4318:	ef 92       	push	r14
    431a:	ff 92       	push	r15
    431c:	0f 93       	push	r16
    431e:	1f 93       	push	r17
    4320:	cf 93       	push	r28
    4322:	df 93       	push	r29
    4324:	ec 01       	movw	r28, r24
    4326:	5b 01       	movw	r10, r22
    4328:	61 15       	cp	r22, r1
    432a:	71 05       	cpc	r23, r1
    432c:	19 f0       	breq	.+6      	; 0x4334 <strtod+0x28>
    432e:	fb 01       	movw	r30, r22
    4330:	91 83       	std	Z+1, r25	; 0x01
    4332:	80 83       	st	Z, r24
    4334:	f9 90       	ld	r15, Y+
    4336:	8f 2d       	mov	r24, r15
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <isspace>
    433e:	89 2b       	or	r24, r25
    4340:	c9 f7       	brne	.-14     	; 0x4334 <strtod+0x28>
    4342:	fd e2       	ldi	r31, 0x2D	; 45
    4344:	ff 16       	cp	r15, r31
    4346:	21 f4       	brne	.+8      	; 0x4350 <strtod+0x44>
    4348:	f9 90       	ld	r15, Y+
    434a:	ee 24       	eor	r14, r14
    434c:	e3 94       	inc	r14
    434e:	05 c0       	rjmp	.+10     	; 0x435a <strtod+0x4e>
    4350:	2b e2       	ldi	r18, 0x2B	; 43
    4352:	f2 16       	cp	r15, r18
    4354:	09 f4       	brne	.+2      	; 0x4358 <strtod+0x4c>
    4356:	f9 90       	ld	r15, Y+
    4358:	ee 24       	eor	r14, r14
    435a:	8e 01       	movw	r16, r28
    435c:	01 50       	subi	r16, 0x01	; 1
    435e:	10 40       	sbci	r17, 0x00	; 0
    4360:	c8 01       	movw	r24, r16
    4362:	6e e7       	ldi	r22, 0x7E	; 126
    4364:	75 e0       	ldi	r23, 0x05	; 5
    4366:	43 e0       	ldi	r20, 0x03	; 3
    4368:	50 e0       	ldi	r21, 0x00	; 0
    436a:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <strncasecmp_P>
    436e:	89 2b       	or	r24, r25
    4370:	01 f5       	brne	.+64     	; 0x43b2 <strtod+0xa6>
    4372:	8e 01       	movw	r16, r28
    4374:	0e 5f       	subi	r16, 0xFE	; 254
    4376:	1f 4f       	sbci	r17, 0xFF	; 255
    4378:	c8 01       	movw	r24, r16
    437a:	61 e8       	ldi	r22, 0x81	; 129
    437c:	75 e0       	ldi	r23, 0x05	; 5
    437e:	45 e0       	ldi	r20, 0x05	; 5
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <strncasecmp_P>
    4386:	89 2b       	or	r24, r25
    4388:	19 f4       	brne	.+6      	; 0x4390 <strtod+0x84>
    438a:	8e 01       	movw	r16, r28
    438c:	09 5f       	subi	r16, 0xF9	; 249
    438e:	1f 4f       	sbci	r17, 0xFF	; 255
    4390:	a1 14       	cp	r10, r1
    4392:	b1 04       	cpc	r11, r1
    4394:	19 f0       	breq	.+6      	; 0x439c <strtod+0x90>
    4396:	f5 01       	movw	r30, r10
    4398:	11 83       	std	Z+1, r17	; 0x01
    439a:	00 83       	st	Z, r16
    439c:	e0 fc       	sbrc	r14, 0
    439e:	04 c0       	rjmp	.+8      	; 0x43a8 <strtod+0x9c>
    43a0:	70 e0       	ldi	r23, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	80 e8       	ldi	r24, 0x80	; 128
    43a6:	14 c0       	rjmp	.+40     	; 0x43d0 <strtod+0xc4>
    43a8:	70 e0       	ldi	r23, 0x00	; 0
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	80 e8       	ldi	r24, 0x80	; 128
    43ae:	6f ef       	ldi	r22, 0xFF	; 255
    43b0:	08 c1       	rjmp	.+528    	; 0x45c2 <strtod+0x2b6>
    43b2:	c8 01       	movw	r24, r16
    43b4:	66 e8       	ldi	r22, 0x86	; 134
    43b6:	75 e0       	ldi	r23, 0x05	; 5
    43b8:	43 e0       	ldi	r20, 0x03	; 3
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <strncasecmp_P>
    43c0:	89 2b       	or	r24, r25
    43c2:	69 f4       	brne	.+26     	; 0x43de <strtod+0xd2>
    43c4:	a1 14       	cp	r10, r1
    43c6:	b1 04       	cpc	r11, r1
    43c8:	29 f4       	brne	.+10     	; 0x43d4 <strtod+0xc8>
    43ca:	70 e0       	ldi	r23, 0x00	; 0
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	80 ec       	ldi	r24, 0xC0	; 192
    43d0:	6f e7       	ldi	r22, 0x7F	; 127
    43d2:	f7 c0       	rjmp	.+494    	; 0x45c2 <strtod+0x2b6>
    43d4:	22 96       	adiw	r28, 0x02	; 2
    43d6:	f5 01       	movw	r30, r10
    43d8:	d1 83       	std	Z+1, r29	; 0x01
    43da:	c0 83       	st	Z, r28
    43dc:	f6 cf       	rjmp	.-20     	; 0x43ca <strtod+0xbe>
    43de:	88 24       	eor	r8, r8
    43e0:	99 24       	eor	r9, r9
    43e2:	40 e0       	ldi	r20, 0x00	; 0
    43e4:	50 e0       	ldi	r21, 0x00	; 0
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	70 e0       	ldi	r23, 0x00	; 0
    43ea:	ef 2d       	mov	r30, r15
    43ec:	e0 53       	subi	r30, 0x30	; 48
    43ee:	ea 30       	cpi	r30, 0x0A	; 10
    43f0:	a0 f5       	brcc	.+104    	; 0x445a <strtod+0x14e>
    43f2:	f2 e0       	ldi	r31, 0x02	; 2
    43f4:	ef 2a       	or	r14, r31
    43f6:	8e 2d       	mov	r24, r14
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	9c 01       	movw	r18, r24
    43fc:	28 70       	andi	r18, 0x08	; 8
    43fe:	30 70       	andi	r19, 0x00	; 0
    4400:	e2 fe       	sbrs	r14, 2
    4402:	06 c0       	rjmp	.+12     	; 0x4410 <strtod+0x104>
    4404:	23 2b       	or	r18, r19
    4406:	79 f5       	brne	.+94     	; 0x4466 <strtod+0x15a>
    4408:	08 94       	sec
    440a:	81 1c       	adc	r8, r1
    440c:	91 1c       	adc	r9, r1
    440e:	2b c0       	rjmp	.+86     	; 0x4466 <strtod+0x15a>
    4410:	23 2b       	or	r18, r19
    4412:	19 f0       	breq	.+6      	; 0x441a <strtod+0x10e>
    4414:	08 94       	sec
    4416:	81 08       	sbc	r8, r1
    4418:	91 08       	sbc	r9, r1
    441a:	db 01       	movw	r26, r22
    441c:	ca 01       	movw	r24, r20
    441e:	12 e0       	ldi	r17, 0x02	; 2
    4420:	88 0f       	add	r24, r24
    4422:	99 1f       	adc	r25, r25
    4424:	aa 1f       	adc	r26, r26
    4426:	bb 1f       	adc	r27, r27
    4428:	1a 95       	dec	r17
    442a:	d1 f7       	brne	.-12     	; 0x4420 <strtod+0x114>
    442c:	48 0f       	add	r20, r24
    442e:	59 1f       	adc	r21, r25
    4430:	6a 1f       	adc	r22, r26
    4432:	7b 1f       	adc	r23, r27
    4434:	44 0f       	add	r20, r20
    4436:	55 1f       	adc	r21, r21
    4438:	66 1f       	adc	r22, r22
    443a:	77 1f       	adc	r23, r23
    443c:	4e 0f       	add	r20, r30
    443e:	51 1d       	adc	r21, r1
    4440:	61 1d       	adc	r22, r1
    4442:	71 1d       	adc	r23, r1
    4444:	48 39       	cpi	r20, 0x98	; 152
    4446:	29 e9       	ldi	r18, 0x99	; 153
    4448:	52 07       	cpc	r21, r18
    444a:	29 e9       	ldi	r18, 0x99	; 153
    444c:	62 07       	cpc	r22, r18
    444e:	29 e1       	ldi	r18, 0x19	; 25
    4450:	72 07       	cpc	r23, r18
    4452:	48 f0       	brcs	.+18     	; 0x4466 <strtod+0x15a>
    4454:	84 e0       	ldi	r24, 0x04	; 4
    4456:	e8 2a       	or	r14, r24
    4458:	06 c0       	rjmp	.+12     	; 0x4466 <strtod+0x15a>
    445a:	ee 3f       	cpi	r30, 0xFE	; 254
    445c:	31 f4       	brne	.+12     	; 0x446a <strtod+0x15e>
    445e:	e3 fc       	sbrc	r14, 3
    4460:	39 c0       	rjmp	.+114    	; 0x44d4 <strtod+0x1c8>
    4462:	98 e0       	ldi	r25, 0x08	; 8
    4464:	e9 2a       	or	r14, r25
    4466:	f9 90       	ld	r15, Y+
    4468:	c0 cf       	rjmp	.-128    	; 0x43ea <strtod+0xde>
    446a:	e5 33       	cpi	r30, 0x35	; 53
    446c:	11 f0       	breq	.+4      	; 0x4472 <strtod+0x166>
    446e:	e5 31       	cpi	r30, 0x15	; 21
    4470:	89 f5       	brne	.+98     	; 0x44d4 <strtod+0x1c8>
    4472:	29 91       	ld	r18, Y+
    4474:	2d 32       	cpi	r18, 0x2D	; 45
    4476:	19 f4       	brne	.+6      	; 0x447e <strtod+0x172>
    4478:	e0 e1       	ldi	r30, 0x10	; 16
    447a:	ee 2a       	or	r14, r30
    447c:	05 c0       	rjmp	.+10     	; 0x4488 <strtod+0x17c>
    447e:	2b 32       	cpi	r18, 0x2B	; 43
    4480:	19 f0       	breq	.+6      	; 0x4488 <strtod+0x17c>
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	03 c0       	rjmp	.+6      	; 0x448e <strtod+0x182>
    4488:	29 91       	ld	r18, Y+
    448a:	82 e0       	ldi	r24, 0x02	; 2
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	e2 2f       	mov	r30, r18
    4490:	e0 53       	subi	r30, 0x30	; 48
    4492:	ea 30       	cpi	r30, 0x0A	; 10
    4494:	18 f0       	brcs	.+6      	; 0x449c <strtod+0x190>
    4496:	c8 1b       	sub	r28, r24
    4498:	d9 0b       	sbc	r29, r25
    449a:	1c c0       	rjmp	.+56     	; 0x44d4 <strtod+0x1c8>
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	fc e0       	ldi	r31, 0x0C	; 12
    44a2:	20 38       	cpi	r18, 0x80	; 128
    44a4:	3f 07       	cpc	r19, r31
    44a6:	5c f4       	brge	.+22     	; 0x44be <strtod+0x1b2>
    44a8:	c9 01       	movw	r24, r18
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	88 0f       	add	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	28 0f       	add	r18, r24
    44b4:	39 1f       	adc	r19, r25
    44b6:	22 0f       	add	r18, r18
    44b8:	33 1f       	adc	r19, r19
    44ba:	2e 0f       	add	r18, r30
    44bc:	31 1d       	adc	r19, r1
    44be:	e9 91       	ld	r30, Y+
    44c0:	e0 53       	subi	r30, 0x30	; 48
    44c2:	ea 30       	cpi	r30, 0x0A	; 10
    44c4:	68 f3       	brcs	.-38     	; 0x44a0 <strtod+0x194>
    44c6:	e4 fe       	sbrs	r14, 4
    44c8:	03 c0       	rjmp	.+6      	; 0x44d0 <strtod+0x1c4>
    44ca:	30 95       	com	r19
    44cc:	21 95       	neg	r18
    44ce:	3f 4f       	sbci	r19, 0xFF	; 255
    44d0:	82 0e       	add	r8, r18
    44d2:	93 1e       	adc	r9, r19
    44d4:	ce 2c       	mov	r12, r14
    44d6:	dd 24       	eor	r13, r13
    44d8:	e1 fe       	sbrs	r14, 1
    44da:	07 c0       	rjmp	.+14     	; 0x44ea <strtod+0x1de>
    44dc:	a1 14       	cp	r10, r1
    44de:	b1 04       	cpc	r11, r1
    44e0:	21 f0       	breq	.+8      	; 0x44ea <strtod+0x1de>
    44e2:	21 97       	sbiw	r28, 0x01	; 1
    44e4:	f5 01       	movw	r30, r10
    44e6:	d1 83       	std	Z+1, r29	; 0x01
    44e8:	c0 83       	st	Z, r28
    44ea:	cb 01       	movw	r24, r22
    44ec:	ba 01       	movw	r22, r20
    44ee:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__floatunsisf>
    44f2:	7b 01       	movw	r14, r22
    44f4:	8c 01       	movw	r16, r24
    44f6:	f3 e0       	ldi	r31, 0x03	; 3
    44f8:	cf 22       	and	r12, r31
    44fa:	dd 24       	eor	r13, r13
    44fc:	23 e0       	ldi	r18, 0x03	; 3
    44fe:	c2 16       	cp	r12, r18
    4500:	d1 04       	cpc	r13, r1
    4502:	21 f4       	brne	.+8      	; 0x450c <strtod+0x200>
    4504:	17 fb       	bst	r17, 7
    4506:	10 95       	com	r17
    4508:	17 f9       	bld	r17, 7
    450a:	10 95       	com	r17
    450c:	57 01       	movw	r10, r14
    450e:	68 01       	movw	r12, r16
    4510:	c8 01       	movw	r24, r16
    4512:	b7 01       	movw	r22, r14
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	50 e0       	ldi	r21, 0x00	; 0
    451c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__cmpsf2>
    4520:	88 23       	and	r24, r24
    4522:	09 f4       	brne	.+2      	; 0x4526 <strtod+0x21a>
    4524:	4a c0       	rjmp	.+148    	; 0x45ba <strtod+0x2ae>
    4526:	97 fe       	sbrs	r9, 7
    4528:	0d c0       	rjmp	.+26     	; 0x4544 <strtod+0x238>
    452a:	2d e9       	ldi	r18, 0x9D	; 157
    452c:	e2 2e       	mov	r14, r18
    452e:	25 e0       	ldi	r18, 0x05	; 5
    4530:	f2 2e       	mov	r15, r18
    4532:	90 94       	com	r9
    4534:	81 94       	neg	r8
    4536:	91 08       	sbc	r9, r1
    4538:	93 94       	inc	r9
    453a:	c0 e2       	ldi	r28, 0x20	; 32
    453c:	d0 e0       	ldi	r29, 0x00	; 0
    453e:	00 e0       	ldi	r16, 0x00	; 0
    4540:	10 e0       	ldi	r17, 0x00	; 0
    4542:	12 c0       	rjmp	.+36     	; 0x4568 <strtod+0x25c>
    4544:	95 eb       	ldi	r25, 0xB5	; 181
    4546:	e9 2e       	mov	r14, r25
    4548:	95 e0       	ldi	r25, 0x05	; 5
    454a:	f9 2e       	mov	r15, r25
    454c:	f6 cf       	rjmp	.-20     	; 0x453a <strtod+0x22e>
    454e:	f7 01       	movw	r30, r14
    4550:	25 91       	lpm	r18, Z+
    4552:	35 91       	lpm	r19, Z+
    4554:	45 91       	lpm	r20, Z+
    4556:	54 91       	lpm	r21, Z+
    4558:	c6 01       	movw	r24, r12
    455a:	b5 01       	movw	r22, r10
    455c:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    4560:	5b 01       	movw	r10, r22
    4562:	6c 01       	movw	r12, r24
    4564:	8c 1a       	sub	r8, r28
    4566:	9d 0a       	sbc	r9, r29
    4568:	8c 16       	cp	r8, r28
    456a:	9d 06       	cpc	r9, r29
    456c:	84 f7       	brge	.-32     	; 0x454e <strtod+0x242>
    456e:	d5 95       	asr	r29
    4570:	c7 95       	ror	r28
    4572:	0f 5f       	subi	r16, 0xFF	; 255
    4574:	1f 4f       	sbci	r17, 0xFF	; 255
    4576:	06 30       	cpi	r16, 0x06	; 6
    4578:	11 05       	cpc	r17, r1
    457a:	29 f0       	breq	.+10     	; 0x4586 <strtod+0x27a>
    457c:	8c ef       	ldi	r24, 0xFC	; 252
    457e:	9f ef       	ldi	r25, 0xFF	; 255
    4580:	e8 0e       	add	r14, r24
    4582:	f9 1e       	adc	r15, r25
    4584:	f1 cf       	rjmp	.-30     	; 0x4568 <strtod+0x25c>
    4586:	c5 01       	movw	r24, r10
    4588:	d6 01       	movw	r26, r12
    458a:	7c 01       	movw	r14, r24
    458c:	8d 01       	movw	r16, r26
    458e:	8c 2d       	mov	r24, r12
    4590:	88 0f       	add	r24, r24
    4592:	8d 2d       	mov	r24, r13
    4594:	88 1f       	adc	r24, r24
    4596:	8f 3f       	cpi	r24, 0xFF	; 255
    4598:	51 f0       	breq	.+20     	; 0x45ae <strtod+0x2a2>
    459a:	c6 01       	movw	r24, r12
    459c:	b5 01       	movw	r22, r10
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	40 e0       	ldi	r20, 0x00	; 0
    45a4:	50 e0       	ldi	r21, 0x00	; 0
    45a6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__cmpsf2>
    45aa:	88 23       	and	r24, r24
    45ac:	31 f4       	brne	.+12     	; 0x45ba <strtod+0x2ae>
    45ae:	82 e2       	ldi	r24, 0x22	; 34
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	90 93 9c 06 	sts	0x069C, r25
    45b6:	80 93 9b 06 	sts	0x069B, r24
    45ba:	7e 2d       	mov	r23, r14
    45bc:	9f 2d       	mov	r25, r15
    45be:	80 2f       	mov	r24, r16
    45c0:	61 2f       	mov	r22, r17
    45c2:	27 2f       	mov	r18, r23
    45c4:	39 2f       	mov	r19, r25
    45c6:	48 2f       	mov	r20, r24
    45c8:	56 2f       	mov	r21, r22
    45ca:	b9 01       	movw	r22, r18
    45cc:	ca 01       	movw	r24, r20
    45ce:	df 91       	pop	r29
    45d0:	cf 91       	pop	r28
    45d2:	1f 91       	pop	r17
    45d4:	0f 91       	pop	r16
    45d6:	ff 90       	pop	r15
    45d8:	ef 90       	pop	r14
    45da:	df 90       	pop	r13
    45dc:	cf 90       	pop	r12
    45de:	bf 90       	pop	r11
    45e0:	af 90       	pop	r10
    45e2:	9f 90       	pop	r9
    45e4:	8f 90       	pop	r8
    45e6:	08 95       	ret

000045e8 <isspace>:
    45e8:	91 11       	cpse	r25, r1
    45ea:	1e c0       	rjmp	.+60     	; 0x4628 <__ctype_isfalse>
    45ec:	80 32       	cpi	r24, 0x20	; 32
    45ee:	19 f0       	breq	.+6      	; 0x45f6 <isspace+0xe>
    45f0:	89 50       	subi	r24, 0x09	; 9
    45f2:	85 50       	subi	r24, 0x05	; 5
    45f4:	d0 f7       	brcc	.-12     	; 0x45ea <isspace+0x2>
    45f6:	08 95       	ret

000045f8 <strncasecmp_P>:
    45f8:	fb 01       	movw	r30, r22
    45fa:	dc 01       	movw	r26, r24
    45fc:	41 50       	subi	r20, 0x01	; 1
    45fe:	50 40       	sbci	r21, 0x00	; 0
    4600:	88 f0       	brcs	.+34     	; 0x4624 <strncasecmp_P+0x2c>
    4602:	8d 91       	ld	r24, X+
    4604:	81 34       	cpi	r24, 0x41	; 65
    4606:	1c f0       	brlt	.+6      	; 0x460e <strncasecmp_P+0x16>
    4608:	8b 35       	cpi	r24, 0x5B	; 91
    460a:	0c f4       	brge	.+2      	; 0x460e <strncasecmp_P+0x16>
    460c:	80 5e       	subi	r24, 0xE0	; 224
    460e:	65 91       	lpm	r22, Z+
    4610:	61 34       	cpi	r22, 0x41	; 65
    4612:	1c f0       	brlt	.+6      	; 0x461a <strncasecmp_P+0x22>
    4614:	6b 35       	cpi	r22, 0x5B	; 91
    4616:	0c f4       	brge	.+2      	; 0x461a <strncasecmp_P+0x22>
    4618:	60 5e       	subi	r22, 0xE0	; 224
    461a:	86 1b       	sub	r24, r22
    461c:	61 11       	cpse	r22, r1
    461e:	71 f3       	breq	.-36     	; 0x45fc <strncasecmp_P+0x4>
    4620:	99 0b       	sbc	r25, r25
    4622:	08 95       	ret
    4624:	88 1b       	sub	r24, r24
    4626:	fc cf       	rjmp	.-8      	; 0x4620 <strncasecmp_P+0x28>

00004628 <__ctype_isfalse>:
    4628:	99 27       	eor	r25, r25
    462a:	88 27       	eor	r24, r24

0000462c <__ctype_istrue>:
    462c:	08 95       	ret

0000462e <_exit>:
    462e:	f8 94       	cli

00004630 <__stop_program>:
    4630:	ff cf       	rjmp	.-2      	; 0x4630 <__stop_program>
