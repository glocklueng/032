
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000053da  0000546e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000053da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a4  00800204  00800204  00005472  2**0
                  ALLOC
  3 .debug_aranges 00000500  00000000  00000000  00005472  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000954  00000000  00000000  00005972  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000414c  00000000  00000000  000062c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001652  00000000  00000000  0000a412  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c98  00000000  00000000  0000ba64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000800  00000000  00000000  0000f6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ec6  00000000  00000000  0000fefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023f0  00000000  00000000  00010dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009f0  00000000  00000000  000131b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1c 03 	jmp	0x638	; 0x638 <__ctors_end>
       4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
       8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
       c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      10:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      14:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      18:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      1c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      20:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      24:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      28:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      2c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      30:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      34:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      38:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      3c:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_15>
      40:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      44:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__vector_17>
      48:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      4c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      50:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      54:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      58:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      5c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      60:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      64:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__vector_25>
      68:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      6c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      70:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      74:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      78:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      7c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      80:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <__vector_32>
      84:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      88:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      8c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      90:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      94:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      98:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      9c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      a0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      a4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      a8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      ac:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      b0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      b4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      b8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      bc:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      c0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      c4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      c8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      cc:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      d0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      d4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      d8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      dc:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      e0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      e4:	72 07       	cpc	r23, r18
      e6:	6e 07       	cpc	r22, r30
      e8:	6a 07       	cpc	r22, r26
      ea:	66 07       	cpc	r22, r22
      ec:	5a 07       	cpc	r21, r26
      ee:	fd 06       	cpc	r15, r29
      f0:	fd 06       	cpc	r15, r29
      f2:	fd 06       	cpc	r15, r29
      f4:	fd 06       	cpc	r15, r29
      f6:	fd 06       	cpc	r15, r29
      f8:	fd 06       	cpc	r15, r29
      fa:	fd 06       	cpc	r15, r29
      fc:	fd 06       	cpc	r15, r29
      fe:	fd 06       	cpc	r15, r29
     100:	fd 06       	cpc	r15, r29
     102:	fd 06       	cpc	r15, r29
     104:	fd 06       	cpc	r15, r29
     106:	5d 07       	cpc	r21, r29
     108:	93 07       	cpc	r25, r19
     10a:	8a 07       	cpc	r24, r26
     10c:	86 07       	cpc	r24, r22
     10e:	83 07       	cpc	r24, r19
     110:	fd 06       	cpc	r15, r29
     112:	fd 06       	cpc	r15, r29
     114:	fd 06       	cpc	r15, r29
     116:	fd 06       	cpc	r15, r29
     118:	fd 06       	cpc	r15, r29
     11a:	fd 06       	cpc	r15, r29
     11c:	80 07       	cpc	r24, r16
     11e:	fd 06       	cpc	r15, r29
     120:	80 07       	cpc	r24, r16
     122:	fd 06       	cpc	r15, r29
     124:	fd 06       	cpc	r15, r29
     126:	fd 06       	cpc	r15, r29
     128:	fd 06       	cpc	r15, r29
     12a:	fd 06       	cpc	r15, r29
     12c:	fd 06       	cpc	r15, r29
     12e:	fd 06       	cpc	r15, r29
     130:	fd 06       	cpc	r15, r29
     132:	fd 06       	cpc	r15, r29
     134:	fd 06       	cpc	r15, r29
     136:	fd 06       	cpc	r15, r29
     138:	fd 06       	cpc	r15, r29
     13a:	fd 06       	cpc	r15, r29
     13c:	fd 06       	cpc	r15, r29
     13e:	fd 06       	cpc	r15, r29
     140:	fd 06       	cpc	r15, r29
     142:	fd 06       	cpc	r15, r29
     144:	fd 06       	cpc	r15, r29
     146:	fd 06       	cpc	r15, r29
     148:	fd 06       	cpc	r15, r29
     14a:	fd 06       	cpc	r15, r29
     14c:	fd 06       	cpc	r15, r29
     14e:	7d 07       	cpc	r23, r29
     150:	fd 06       	cpc	r15, r29
     152:	fd 06       	cpc	r15, r29
     154:	fd 06       	cpc	r15, r29
     156:	fd 06       	cpc	r15, r29
     158:	fd 06       	cpc	r15, r29
     15a:	fd 06       	cpc	r15, r29
     15c:	fd 06       	cpc	r15, r29
     15e:	fd 06       	cpc	r15, r29
     160:	fd 06       	cpc	r15, r29
     162:	fd 06       	cpc	r15, r29
     164:	fd 06       	cpc	r15, r29
     166:	fd 06       	cpc	r15, r29
     168:	fd 06       	cpc	r15, r29
     16a:	fd 06       	cpc	r15, r29
     16c:	fd 06       	cpc	r15, r29
     16e:	fd 06       	cpc	r15, r29
     170:	fd 06       	cpc	r15, r29
     172:	fd 06       	cpc	r15, r29
     174:	fd 06       	cpc	r15, r29
     176:	fd 06       	cpc	r15, r29
     178:	fd 06       	cpc	r15, r29
     17a:	fd 06       	cpc	r15, r29
     17c:	fd 06       	cpc	r15, r29
     17e:	fd 06       	cpc	r15, r29
     180:	fd 06       	cpc	r15, r29
     182:	fd 06       	cpc	r15, r29
     184:	79 07       	cpc	r23, r25
     186:	fd 06       	cpc	r15, r29
     188:	fd 06       	cpc	r15, r29
     18a:	fd 06       	cpc	r15, r29
     18c:	fd 06       	cpc	r15, r29
     18e:	fd 06       	cpc	r15, r29
     190:	fd 06       	cpc	r15, r29
     192:	fd 06       	cpc	r15, r29
     194:	fd 06       	cpc	r15, r29
     196:	fd 06       	cpc	r15, r29
     198:	75 07       	cpc	r23, r21
     19a:	a6 07       	cpc	r26, r22
     19c:	a3 07       	cpc	r26, r19
     19e:	9f 07       	cpc	r25, r31
     1a0:	9c 07       	cpc	r25, r28
     1a2:	bb 07       	cpc	r27, r27
     1a4:	bb 07       	cpc	r27, r27
     1a6:	b7 07       	cpc	r27, r23
     1a8:	b0 07       	cpc	r27, r16
     1aa:	a9 07       	cpc	r26, r25
     1ac:	e8 07       	cpc	r30, r24
     1ae:	fd 06       	cpc	r15, r29
     1b0:	fd 06       	cpc	r15, r29
     1b2:	e1 07       	cpc	r30, r17
     1b4:	dc 07       	cpc	r29, r28
     1b6:	d5 07       	cpc	r29, r21
     1b8:	ce 07       	cpc	r28, r30
     1ba:	c9 07       	cpc	r28, r25
     1bc:	c4 07       	cpc	r28, r20
     1be:	bf 07       	cpc	r27, r31
     1c0:	14 08       	sbc	r1, r4
     1c2:	0f 08       	sbc	r0, r15
     1c4:	0a 08       	sbc	r0, r10
     1c6:	05 08       	sbc	r0, r5
     1c8:	fe 07       	cpc	r31, r30
     1ca:	f7 07       	cpc	r31, r23
     1cc:	f2 07       	cpc	r31, r18
     1ce:	ed 07       	cpc	r30, r29
     1d0:	3d 08       	sbc	r3, r13
     1d2:	36 08       	sbc	r3, r6
     1d4:	31 08       	sbc	r3, r1
     1d6:	2a 08       	sbc	r2, r10
     1d8:	19 08       	sbc	r1, r9
     1da:	56 07       	cpc	r21, r22
     1dc:	20 08       	sbc	r2, r0
     1de:	b7 07       	cpc	r27, r23
     1e0:	fd 06       	cpc	r15, r29
     1e2:	fd 06       	cpc	r15, r29
     1e4:	fd 06       	cpc	r15, r29
     1e6:	fd 06       	cpc	r15, r29
     1e8:	fd 06       	cpc	r15, r29
     1ea:	fd 06       	cpc	r15, r29
     1ec:	fd 06       	cpc	r15, r29
     1ee:	fd 06       	cpc	r15, r29
     1f0:	fd 06       	cpc	r15, r29
     1f2:	fd 06       	cpc	r15, r29
     1f4:	fd 06       	cpc	r15, r29
     1f6:	fd 06       	cpc	r15, r29
     1f8:	fd 06       	cpc	r15, r29
     1fa:	fd 06       	cpc	r15, r29
     1fc:	fd 06       	cpc	r15, r29
     1fe:	fd 06       	cpc	r15, r29
     200:	fd 06       	cpc	r15, r29
     202:	fd 06       	cpc	r15, r29
     204:	fd 06       	cpc	r15, r29
     206:	fd 06       	cpc	r15, r29
     208:	fd 06       	cpc	r15, r29
     20a:	fd 06       	cpc	r15, r29
     20c:	fd 06       	cpc	r15, r29
     20e:	fd 06       	cpc	r15, r29
     210:	fd 06       	cpc	r15, r29
     212:	fd 06       	cpc	r15, r29
     214:	fd 06       	cpc	r15, r29
     216:	fd 06       	cpc	r15, r29
     218:	fd 06       	cpc	r15, r29
     21a:	b7 07       	cpc	r27, r23
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.1946>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.1944>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.1942>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1940>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1938>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1936>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1934>:
     273:	0d 0a 00                                            ...

00000276 <__c.1932>:
     276:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

00000282 <__c.1930>:
     282:	0d 0a 00                                            ...

00000285 <__c.1928>:
     285:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000290 <__c.1926>:
     290:	0d 0a 00                                            ...

00000293 <__c.1924>:
     293:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000002a3 <__c.1922>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1920>:
     2a6:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000002b5 <__c.1918>:
     2b5:	0d 0a 00                                            ...

000002b8 <__c.1916>:
     2b8:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000002c5 <__c.1914>:
     2c5:	0d 0a 00                                            ...

000002c8 <__c.1912>:
     2c8:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

000002d7 <__c.1910>:
     2d7:	0d 0a 00                                            ...

000002da <__c.1908>:
     2da:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

000002e4 <__c.1906>:
     2e4:	0d 0a 00                                            ...

000002e7 <__c.1904>:
     2e7:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     2f7:	3d 20 00                                            = .

000002fa <__c.1902>:
     2fa:	0d 0a 00                                            ...

000002fd <__c.1900>:
     2fd:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     30d:	20 00                                                .

0000030f <__c.1639>:
     30f:	6f 6b 0a 0d 00                                      ok...

00000314 <__c.1725>:
     314:	0a 0d 00                                            ...

00000317 <__c.1723>:
     317:	65 72 72 6f 72 3a 20 00                             error: .

0000031f <__c.1719>:
     31f:	65 72 72 6f 72 3a 20 4e 6f 74 20 68 6f 6d 65 64     error: Not homed
     32f:	0a 0d 00                                            ...

00000332 <__c.1716>:
     332:	65 72 72 6f 72 3a 20 43 6f 6d 6d 61 6e 64 20 46     error: Command F
     342:	61 69 6c 65 64 0a 0d 00                             ailed...

0000034a <__c.1713>:
     34a:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     35a:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

00000368 <__c.1710>:
     368:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     378:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

00000387 <__c.1707>:
     387:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     397:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

000003a8 <__c.1704>:
     3a8:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     3b8:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

000003c3 <__c.1700>:
     3c3:	6f 6b 0a 0d 00                                      ok...

000003c8 <__c.1734>:
     3c8:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     3d8:	6e 67 0d 0a 00                                      ng...

000003dd <__c.1732>:
     3dd:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     3ed:	72 0d 0a 00                                         r...

000003f1 <__c.1689>:
     3f1:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     401:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     411:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     421:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     431:	0d 0a 00                                            ...

00000434 <__c.1687>:
     434:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     444:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     454:	61 62 6c 65 64 29 0d 0a 00                          abled)...

0000045d <__c.1685>:
     45d:	24 31 30 30 30 20 3d 20 00                          $1000 = .

00000466 <__c.1683>:
     466:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     476:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     486:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     496:	2f 6d 69 6e 29 0d 0a 00                             /min)...

0000049e <__c.1681>:
     49e:	24 39 20 3d 20 00                                   $9 = .

000004a4 <__c.1679>:
     4a4:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     4b4:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000004c2 <__c.1677>:
     4c2:	24 38 20 3d 20 00                                   $8 = .

000004c8 <__c.1675>:
     4c8:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     4d8:	29 0d 0a 00                                         )...

000004dc <__c.1673>:
     4dc:	24 37 20 3d 20 00                                   $7 = .

000004e2 <__c.1671>:
     4e2:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     4f2:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000500 <__c.1669>:
     500:	24 36 20 3d 20 00                                   $6 = .

00000506 <__c.1667>:
     506:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     516:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000524 <__c.1665>:
     524:	24 35 20 3d 20 00                                   $5 = .

0000052a <__c.1663>:
     52a:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     53a:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

00000547 <__c.1661>:
     547:	24 34 20 3d 20 00                                   $4 = .

0000054d <__c.1659>:
     54d:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     55d:	0a 00                                               ..

0000055f <__c.1657>:
     55f:	24 33 20 3d 20 00                                   $3 = .

00000565 <__c.1655>:
     565:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

00000575 <__c.1653>:
     575:	24 32 20 3d 20 00                                   $2 = .

0000057b <__c.1651>:
     57b:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

0000058b <__c.1649>:
     58b:	24 31 20 3d 20 00                                   $1 = .

00000591 <__c.1647>:
     591:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000005a1 <__c.1645>:
     5a1:	24 30 20 3d 20 00                                   $0 = .

000005a7 <__c.1643>:
     5a7:	0d 0a 00                                            ...

000005aa <__c.1641>:
     5aa:	30 2e 37 36 50 42 00                                0.76PB.

000005b1 <__c.1639>:
     5b1:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000005bd <__c.2207>:
     5bd:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

000005cb <__c.2068>:
     5cb:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000005d5 <__c.2086>:
     5d5:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

000005df <__c.1843>:
     5df:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     5ef:	0d 00                                               ..

000005f1 <__c.1878>:
     5f1:	6e 6f 0d 0a 00                                      no...

000005f6 <__c.1876>:
     5f6:	79 65 73 0d 0a 00                                   yes...

000005fc <pstr_inf>:
     5fc:	49 4e 46                                            INF

000005ff <pstr_inity>:
     5ff:	49 4e 49 54 59                                      INITY

00000604 <pstr_nan>:
     604:	4e 41 4e                                            NAN

00000607 <pwr_m10>:
     607:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     617:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000061f <pwr_p10>:
     61f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     62f:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000638 <__ctors_end>:
     638:	11 24       	eor	r1, r1
     63a:	1f be       	out	0x3f, r1	; 63
     63c:	cf ef       	ldi	r28, 0xFF	; 255
     63e:	d1 e2       	ldi	r29, 0x21	; 33
     640:	de bf       	out	0x3e, r29	; 62
     642:	cd bf       	out	0x3d, r28	; 61
     644:	00 e0       	ldi	r16, 0x00	; 0
     646:	0c bf       	out	0x3c, r16	; 60

00000648 <__do_copy_data>:
     648:	12 e0       	ldi	r17, 0x02	; 2
     64a:	a0 e0       	ldi	r26, 0x00	; 0
     64c:	b2 e0       	ldi	r27, 0x02	; 2
     64e:	ea ed       	ldi	r30, 0xDA	; 218
     650:	f3 e5       	ldi	r31, 0x53	; 83
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	0b bf       	out	0x3b, r16	; 59
     656:	02 c0       	rjmp	.+4      	; 0x65c <__do_copy_data+0x14>
     658:	07 90       	elpm	r0, Z+
     65a:	0d 92       	st	X+, r0
     65c:	a4 30       	cpi	r26, 0x04	; 4
     65e:	b1 07       	cpc	r27, r17
     660:	d9 f7       	brne	.-10     	; 0x658 <__do_copy_data+0x10>

00000662 <__do_clear_bss>:
     662:	16 e0       	ldi	r17, 0x06	; 6
     664:	a4 e0       	ldi	r26, 0x04	; 4
     666:	b2 e0       	ldi	r27, 0x02	; 2
     668:	01 c0       	rjmp	.+2      	; 0x66c <.do_clear_bss_start>

0000066a <.do_clear_bss_loop>:
     66a:	1d 92       	st	X+, r1

0000066c <.do_clear_bss_start>:
     66c:	a8 3a       	cpi	r26, 0xA8	; 168
     66e:	b1 07       	cpc	r27, r17
     670:	e1 f7       	brne	.-8      	; 0x66a <.do_clear_bss_loop>
     672:	0e 94 8f 0a 	call	0x151e	; 0x151e <main>
     676:	0c 94 eb 29 	jmp	0x53d6	; 0x53d6 <_exit>

0000067a <__bad_interrupt>:
     67a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000067e <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     67e:	24 9a       	sbi	0x04, 4	; 4
}
     680:	08 95       	ret

00000682 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     682:	89 2b       	or	r24, r25
     684:	11 f4       	brne	.+4      	; 0x68a <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     686:	2c 98       	cbi	0x05, 4	; 5
     688:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     68a:	2c 9a       	sbi	0x05, 4	; 5
     68c:	08 95       	ret

0000068e <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     68e:	f9 99       	sbic	0x1f, 1	; 31
     690:	fe cf       	rjmp	.-4      	; 0x68e <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     692:	92 bd       	out	0x22, r25	; 34
     694:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     69a:	80 b5       	in	r24, 0x20	; 32
}
     69c:	08 95       	ret

0000069e <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     69e:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6a0:	f9 99       	sbic	0x1f, 1	; 31
     6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     6a4:	92 bd       	out	0x22, r25	; 34
     6a6:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     6ac:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     6ae:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     6b0:	89 2f       	mov	r24, r25
     6b2:	86 23       	and	r24, r22
     6b4:	39 f0       	breq	.+14     	; 0x6c4 <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     6b6:	6f 3f       	cpi	r22, 0xFF	; 255
     6b8:	19 f0       	breq	.+6      	; 0x6c0 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     6ba:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6bc:	84 e0       	ldi	r24, 0x04	; 4
     6be:	06 c0       	rjmp	.+12     	; 0x6cc <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6c0:	84 e1       	ldi	r24, 0x14	; 20
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     6c4:	99 23       	and	r25, r25
     6c6:	21 f0       	breq	.+8      	; 0x6d0 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6c8:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6ca:	84 e2       	ldi	r24, 0x24	; 36
     6cc:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     6ce:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     6d0:	78 94       	sei
}
     6d2:	08 95       	ret

000006d4 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	0f 92       	push	r0
     6ec:	0f 92       	push	r0
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	5c 01       	movw	r10, r24
     6f4:	6b 01       	movw	r12, r22
     6f6:	7a 01       	movw	r14, r20
     6f8:	4a 01       	movw	r8, r20
     6fa:	00 e0       	ldi	r16, 0x00	; 0
     6fc:	1e c0       	rjmp	.+60     	; 0x73a <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     6fe:	00 23       	and	r16, r16
     700:	19 f0       	breq	.+6      	; 0x708 <memcpy_to_eeprom_with_checksum+0x34>
     702:	21 e0       	ldi	r18, 0x01	; 1
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	08 c0       	rjmp	.+16     	; 0x718 <memcpy_to_eeprom_with_checksum+0x44>
     708:	20 2f       	mov	r18, r16
     70a:	33 27       	eor	r19, r19
     70c:	27 fd       	sbrc	r18, 7
     70e:	30 95       	com	r19
     710:	22 27       	eor	r18, r18
     712:	33 0f       	add	r19, r19
     714:	22 1f       	adc	r18, r18
     716:	33 27       	eor	r19, r19
    checksum += *source;
     718:	f6 01       	movw	r30, r12
     71a:	61 91       	ld	r22, Z+
     71c:	6f 01       	movw	r12, r30
     71e:	06 2f       	mov	r16, r22
     720:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     722:	9c 01       	movw	r18, r24
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	3a 83       	std	Y+2, r19	; 0x02
     72a:	29 83       	std	Y+1, r18	; 0x01
     72c:	0e 94 4f 03 	call	0x69e	; 0x69e <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     730:	08 94       	sec
     732:	81 08       	sbc	r8, r1
     734:	91 08       	sbc	r9, r1
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	9a 81       	ldd	r25, Y+2	; 0x02
     73a:	81 14       	cp	r8, r1
     73c:	91 04       	cpc	r9, r1
     73e:	f9 f6       	brne	.-66     	; 0x6fe <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     740:	c7 01       	movw	r24, r14
     742:	8a 0d       	add	r24, r10
     744:	9b 1d       	adc	r25, r11
     746:	60 2f       	mov	r22, r16
     748:	0e 94 4f 03 	call	0x69e	; 0x69e <eeprom_put_char>
}
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	08 95       	ret

00000768 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
     76e:	fb 01       	movw	r30, r22
     770:	9a 01       	movw	r18, r20
     772:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     774:	b1 e0       	ldi	r27, 0x01	; 1
     776:	19 c0       	rjmp	.+50     	; 0x7aa <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     778:	f9 99       	sbic	0x1f, 1	; 31
     77a:	fe cf       	rjmp	.-4      	; 0x778 <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     77c:	f2 bd       	out	0x22, r31	; 34
     77e:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     780:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     782:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     784:	99 23       	and	r25, r25
     786:	19 f0       	breq	.+6      	; 0x78e <memcpy_from_eeprom_with_checksum+0x26>
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	08 c0       	rjmp	.+16     	; 0x79e <memcpy_from_eeprom_with_checksum+0x36>
     78e:	89 2f       	mov	r24, r25
     790:	99 27       	eor	r25, r25
     792:	87 fd       	sbrc	r24, 7
     794:	90 95       	com	r25
     796:	88 27       	eor	r24, r24
     798:	99 0f       	add	r25, r25
     79a:	88 1f       	adc	r24, r24
     79c:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     79e:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     7a0:	9a 2f       	mov	r25, r26
     7a2:	98 0f       	add	r25, r24
    *(destination++) = data; 
     7a4:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7a6:	21 50       	subi	r18, 0x01	; 1
     7a8:	30 40       	sbci	r19, 0x00	; 0
     7aa:	21 15       	cp	r18, r1
     7ac:	31 05       	cpc	r19, r1
     7ae:	21 f7       	brne	.-56     	; 0x778 <memcpy_from_eeprom_with_checksum+0x10>
     7b0:	46 0f       	add	r20, r22
     7b2:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7b4:	f9 99       	sbic	0x1f, 1	; 31
     7b6:	fe cf       	rjmp	.-4      	; 0x7b4 <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     7b8:	52 bd       	out	0x22, r21	; 34
     7ba:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     7c0:	80 b5       	in	r24, 0x20	; 32
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	98 17       	cp	r25, r24
     7c8:	11 f4       	brne	.+4      	; 0x7ce <memcpy_from_eeprom_with_checksum+0x66>
     7ca:	21 e0       	ldi	r18, 0x01	; 1
     7cc:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7ce:	c9 01       	movw	r24, r18
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     7d6:	80 93 2d 02 	sts	0x022D, r24
  gc.plane_axis_1 = axis_1;
     7da:	60 93 2e 02 	sts	0x022E, r22
  gc.plane_axis_2 = axis_2;
     7de:	40 93 2f 02 	sts	0x022F, r20
}
     7e2:	08 95       	ret

000007e4 <set_feeder_x>:

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
     7e4:	60 93 04 02 	sts	0x0204, r22
     7e8:	70 93 05 02 	sts	0x0205, r23
     7ec:	80 93 06 02 	sts	0x0206, r24
     7f0:	90 93 07 02 	sts	0x0207, r25
}
     7f4:	08 95       	ret

000007f6 <set_feeder_y>:

void set_feeder_y( double y )
{
	feeder_x_pos = y;
     7f6:	60 93 04 02 	sts	0x0204, r22
     7fa:	70 93 05 02 	sts	0x0205, r23
     7fe:	80 93 06 02 	sts	0x0206, r24
     802:	90 93 07 02 	sts	0x0207, r25
}
     806:	08 95       	ret

00000808 <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     808:	2f 92       	push	r2
     80a:	3f 92       	push	r3
     80c:	4f 92       	push	r4
     80e:	5f 92       	push	r5
     810:	6f 92       	push	r6
     812:	7f 92       	push	r7
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	df 93       	push	r29
     82a:	cf 93       	push	r28
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	28 97       	sbiw	r28, 0x08	; 8
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	69 83       	std	Y+1, r22	; 0x01
     83e:	7a 83       	std	Y+2, r23	; 0x02
     840:	8b 83       	std	Y+3, r24	; 0x03
     842:	9c 83       	std	Y+4, r25	; 0x04
     844:	2d 83       	std	Y+5, r18	; 0x05
     846:	3e 83       	std	Y+6, r19	; 0x06
     848:	4f 83       	std	Y+7, r20	; 0x07
     84a:	58 87       	std	Y+8, r21	; 0x08
     84c:	17 01       	movw	r2, r14
     84e:	28 01       	movw	r4, r16
     850:	35 01       	movw	r6, r10
     852:	46 01       	movw	r8, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e8       	ldi	r20, 0x80	; 128
     85a:	5f eb       	ldi	r21, 0xBF	; 191
     85c:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
     860:	88 23       	and	r24, r24
     862:	41 f4       	brne	.+16     	; 0x874 <gotoxy+0x6c>
     864:	20 90 1a 02 	lds	r2, 0x021A
     868:	30 90 1b 02 	lds	r3, 0x021B
     86c:	40 90 1c 02 	lds	r4, 0x021C
     870:	50 90 1d 02 	lds	r5, 0x021D
  if( y == -1) c = gc.position[Y_AXIS] ;
     874:	6d 81       	ldd	r22, Y+5	; 0x05
     876:	7e 81       	ldd	r23, Y+6	; 0x06
     878:	8f 81       	ldd	r24, Y+7	; 0x07
     87a:	98 85       	ldd	r25, Y+8	; 0x08
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	5f eb       	ldi	r21, 0xBF	; 191
     884:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
     888:	88 23       	and	r24, r24
     88a:	41 f4       	brne	.+16     	; 0x89c <gotoxy+0x94>
     88c:	60 90 1e 02 	lds	r6, 0x021E
     890:	70 90 1f 02 	lds	r7, 0x021F
     894:	80 90 20 02 	lds	r8, 0x0220
     898:	90 90 21 02 	lds	r9, 0x0221
  if( z == -1) z = gc.position[Z_AXIS] ;
     89c:	c2 01       	movw	r24, r4
     89e:	b1 01       	movw	r22, r2
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e8       	ldi	r20, 0x80	; 128
     8a6:	5f eb       	ldi	r21, 0xBF	; 191
     8a8:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
     8ac:	88 23       	and	r24, r24
     8ae:	41 f4       	brne	.+16     	; 0x8c0 <gotoxy+0xb8>
     8b0:	20 90 22 02 	lds	r2, 0x0222
     8b4:	30 90 23 02 	lds	r3, 0x0223
     8b8:	40 90 24 02 	lds	r4, 0x0224
     8bc:	50 90 25 02 	lds	r5, 0x0225
  if( c == -1) c = gc.position[C_AXIS] ;
     8c0:	c4 01       	movw	r24, r8
     8c2:	b3 01       	movw	r22, r6
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e8       	ldi	r20, 0x80	; 128
     8ca:	5f eb       	ldi	r21, 0xBF	; 191
     8cc:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
     8d0:	88 23       	and	r24, r24
     8d2:	41 f4       	brne	.+16     	; 0x8e4 <gotoxy+0xdc>
     8d4:	60 90 26 02 	lds	r6, 0x0226
     8d8:	70 90 27 02 	lds	r7, 0x0227
     8dc:	80 90 28 02 	lds	r8, 0x0228
     8e0:	90 90 29 02 	lds	r9, 0x0229

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <gotoxy+0xde>
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <gotoxy+0xe0>
     8e8:	80 91 16 02 	lds	r24, 0x0216
     8ec:	90 91 17 02 	lds	r25, 0x0217
     8f0:	a0 91 18 02 	lds	r26, 0x0218
     8f4:	b0 91 19 02 	lds	r27, 0x0219
     8f8:	ed b7       	in	r30, 0x3d	; 61
     8fa:	fe b7       	in	r31, 0x3e	; 62
     8fc:	81 83       	std	Z+1, r24	; 0x01
     8fe:	92 83       	std	Z+2, r25	; 0x02
     900:	a3 83       	std	Z+3, r26	; 0x03
     902:	b4 83       	std	Z+4, r27	; 0x04
     904:	16 82       	std	Z+6, r1	; 0x06
     906:	15 82       	std	Z+5, r1	; 0x05
     908:	69 81       	ldd	r22, Y+1	; 0x01
     90a:	7a 81       	ldd	r23, Y+2	; 0x02
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	2d 81       	ldd	r18, Y+5	; 0x05
     912:	3e 81       	ldd	r19, Y+6	; 0x06
     914:	4f 81       	ldd	r20, Y+7	; 0x07
     916:	58 85       	ldd	r21, Y+8	; 0x08
     918:	82 01       	movw	r16, r4
     91a:	71 01       	movw	r14, r2
     91c:	64 01       	movw	r12, r8
     91e:	53 01       	movw	r10, r6
     920:	0e 94 34 10 	call	0x2068	; 0x2068 <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	9a 81       	ldd	r25, Y+2	; 0x02
     928:	ab 81       	ldd	r26, Y+3	; 0x03
     92a:	bc 81       	ldd	r27, Y+4	; 0x04
     92c:	80 93 1a 02 	sts	0x021A, r24
     930:	90 93 1b 02 	sts	0x021B, r25
     934:	a0 93 1c 02 	sts	0x021C, r26
     938:	b0 93 1d 02 	sts	0x021D, r27
   gc.position[Y_AXIS] = y;
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	9e 81       	ldd	r25, Y+6	; 0x06
     940:	af 81       	ldd	r26, Y+7	; 0x07
     942:	b8 85       	ldd	r27, Y+8	; 0x08
     944:	80 93 1e 02 	sts	0x021E, r24
     948:	90 93 1f 02 	sts	0x021F, r25
     94c:	a0 93 20 02 	sts	0x0220, r26
     950:	b0 93 21 02 	sts	0x0221, r27
   gc.position[Z_AXIS] = z;
     954:	20 92 22 02 	sts	0x0222, r2
     958:	30 92 23 02 	sts	0x0223, r3
     95c:	40 92 24 02 	sts	0x0224, r4
     960:	50 92 25 02 	sts	0x0225, r5
   gc.position[C_AXIS] = c;
     964:	60 92 26 02 	sts	0x0226, r6
     968:	70 92 27 02 	sts	0x0227, r7
     96c:	80 92 28 02 	sts	0x0228, r8
     970:	90 92 29 02 	sts	0x0229, r9
     974:	ad b7       	in	r26, 0x3d	; 61
     976:	be b7       	in	r27, 0x3e	; 62
     978:	16 96       	adiw	r26, 0x06	; 6
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	be bf       	out	0x3e, r27	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	ad bf       	out	0x3d, r26	; 61

}
     984:	28 96       	adiw	r28, 0x08	; 8
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	bf 90       	pop	r11
     9a2:	af 90       	pop	r10
     9a4:	9f 90       	pop	r9
     9a6:	8f 90       	pop	r8
     9a8:	7f 90       	pop	r7
     9aa:	6f 90       	pop	r6
     9ac:	5f 90       	pop	r5
     9ae:	4f 90       	pop	r4
     9b0:	3f 90       	pop	r3
     9b2:	2f 90       	pop	r2
     9b4:	08 95       	ret

000009b6 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	0f 92       	push	r0
     9cc:	0f 92       	push	r0
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	6c 01       	movw	r12, r24
     9d4:	5b 01       	movw	r10, r22
     9d6:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     9d8:	fb 01       	movw	r30, r22
     9da:	00 81       	ld	r16, Z
     9dc:	11 81       	ldd	r17, Z+1	; 0x01
     9de:	08 0f       	add	r16, r24
     9e0:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     9e2:	c8 01       	movw	r24, r16
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <strtod>
     9ee:	f7 01       	movw	r30, r14
     9f0:	60 83       	st	Z, r22
     9f2:	71 83       	std	Z+1, r23	; 0x01
     9f4:	82 83       	std	Z+2, r24	; 0x02
     9f6:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	80 17       	cp	r24, r16
     9fe:	91 07       	cpc	r25, r17
     a00:	a9 f0       	breq	.+42     	; 0xa2c <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     a02:	8c 19       	sub	r24, r12
     a04:	9d 09       	sbc	r25, r13
     a06:	f5 01       	movw	r30, r10
     a08:	91 83       	std	Z+1, r25	; 0x01
     a0a:	80 83       	st	Z, r24
     a0c:	21 e0       	ldi	r18, 0x01	; 1
     a0e:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     a10:	c9 01       	movw	r24, r18
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	cf 91       	pop	r28
     a18:	df 91       	pop	r29
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	bf 90       	pop	r11
     a28:	af 90       	pop	r10
     a2a:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 08 02 	sts	0x0208, r24
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	ec cf       	rjmp	.-40     	; 0xa10 <read_double+0x5a>

00000a38 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	ec 01       	movw	r28, r24
     a42:	8b 01       	movw	r16, r22
     a44:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     a46:	ed 91       	ld	r30, X+
     a48:	fc 91       	ld	r31, X
     a4a:	11 97       	sbiw	r26, 0x01	; 1
     a4c:	e4 0f       	add	r30, r20
     a4e:	f5 1f       	adc	r31, r21
     a50:	e0 81       	ld	r30, Z
     a52:	ee 23       	and	r30, r30
     a54:	39 f0       	breq	.+14     	; 0xa64 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     a56:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     a58:	e1 54       	subi	r30, 0x41	; 65
     a5a:	ea 31       	cpi	r30, 0x1A	; 26
     a5c:	58 f0       	brcs	.+22     	; 0xa74 <next_statement+0x3c>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	80 93 08 02 	sts	0x0208, r24
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     a68:	c9 01       	movw	r24, r18
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	11 97       	sbiw	r26, 0x01	; 1
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	8d 93       	st	X+, r24
     a7e:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     a80:	ca 01       	movw	r24, r20
     a82:	b9 01       	movw	r22, r18
     a84:	a8 01       	movw	r20, r16
     a86:	0e 94 db 04 	call	0x9b6	; 0x9b6 <read_double>
     a8a:	00 97       	sbiw	r24, 0x00	; 0
     a8c:	11 f0       	breq	.+4      	; 0xa92 <next_statement+0x5a>
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     a94:	c9 01       	movw	r24, r18
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     aa0:	88 e2       	ldi	r24, 0x28	; 40
     aa2:	e8 e0       	ldi	r30, 0x08	; 8
     aa4:	f2 e0       	ldi	r31, 0x02	; 2
     aa6:	df 01       	movw	r26, r30
     aa8:	1d 92       	st	X+, r1
     aaa:	8a 95       	dec	r24
     aac:	e9 f7       	brne	.-6      	; 0xaa8 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     aae:	60 91 91 06 	lds	r22, 0x0691
     ab2:	70 91 92 06 	lds	r23, 0x0692
     ab6:	80 91 93 06 	lds	r24, 0x0693
     aba:	90 91 94 06 	lds	r25, 0x0694
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e7       	ldi	r20, 0x70	; 112
     ac4:	52 e4       	ldi	r21, 0x42	; 66
     ac6:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
     aca:	60 93 12 02 	sts	0x0212, r22
     ace:	70 93 13 02 	sts	0x0213, r23
     ad2:	80 93 14 02 	sts	0x0214, r24
     ad6:	90 93 15 02 	sts	0x0215, r25
  gc.seek_rate = settings.default_seek_rate/60;
     ada:	60 91 95 06 	lds	r22, 0x0695
     ade:	70 91 96 06 	lds	r23, 0x0696
     ae2:	80 91 97 06 	lds	r24, 0x0697
     ae6:	90 91 98 06 	lds	r25, 0x0698
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e7       	ldi	r20, 0x70	; 112
     af0:	52 e4       	ldi	r21, 0x42	; 66
     af2:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
     af6:	60 93 16 02 	sts	0x0216, r22
     afa:	70 93 17 02 	sts	0x0217, r23
     afe:	80 93 18 02 	sts	0x0218, r24
     b02:	90 93 19 02 	sts	0x0219, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b06:	10 92 2d 02 	sts	0x022D, r1
  gc.plane_axis_1 = axis_1;
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	90 93 2e 02 	sts	0x022E, r25
  gc.plane_axis_2 = axis_2;
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	80 93 2f 02 	sts	0x022F, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     b16:	90 93 0c 02 	sts	0x020C, r25
}
     b1a:	08 95       	ret

00000b1c <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     b1c:	2f 92       	push	r2
     b1e:	3f 92       	push	r3
     b20:	4f 92       	push	r4
     b22:	5f 92       	push	r5
     b24:	6f 92       	push	r6
     b26:	7f 92       	push	r7
     b28:	8f 92       	push	r8
     b2a:	9f 92       	push	r9
     b2c:	af 92       	push	r10
     b2e:	bf 92       	push	r11
     b30:	cf 92       	push	r12
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	e7 97       	sbiw	r28, 0x37	; 55
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     b52:	1b 82       	std	Y+3, r1	; 0x03
     b54:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	88 87       	std	Y+8, r24	; 0x08
     b60:	99 87       	std	Y+9, r25	; 0x09
     b62:	aa 87       	std	Y+10, r26	; 0x0a
     b64:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     b66:	ac e0       	ldi	r26, 0x0C	; 12
     b68:	2a 2e       	mov	r2, r26
     b6a:	31 2c       	mov	r3, r1
     b6c:	2c 0e       	add	r2, r28
     b6e:	3d 1e       	adc	r3, r29
     b70:	80 e1       	ldi	r24, 0x10	; 16
     b72:	d1 01       	movw	r26, r2
     b74:	e8 2f       	mov	r30, r24
     b76:	1d 92       	st	X+, r1
     b78:	ea 95       	dec	r30
     b7a:	e9 f7       	brne	.-6      	; 0xb76 <gc_execute_line+0x5a>
  clear_vector(offset);
     b7c:	fc e1       	ldi	r31, 0x1C	; 28
     b7e:	cf 2e       	mov	r12, r31
     b80:	d1 2c       	mov	r13, r1
     b82:	cc 0e       	add	r12, r28
     b84:	dd 1e       	adc	r13, r29
     b86:	d6 01       	movw	r26, r12
     b88:	1d 92       	st	X+, r1
     b8a:	8a 95       	dec	r24
     b8c:	e9 f7       	brne	.-6      	; 0xb88 <gc_execute_line+0x6c>

  gc.status_code = GCSTATUS_OK;
     b8e:	10 92 08 02 	sts	0x0208, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     b92:	f5 01       	movw	r30, r10
     b94:	80 81       	ld	r24, Z
     b96:	88 32       	cpi	r24, 0x28	; 40
     b98:	09 f4       	brne	.+2      	; 0xb9c <gc_execute_line+0x80>
     b9a:	86 c0       	rjmp	.+268    	; 0xca8 <gc_execute_line+0x18c>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     b9c:	8f 32       	cpi	r24, 0x2F	; 47
     b9e:	09 f4       	brne	.+2      	; 0xba2 <gc_execute_line+0x86>
     ba0:	6e c0       	rjmp	.+220    	; 0xc7e <gc_execute_line+0x162>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     ba2:	84 32       	cpi	r24, 0x24	; 36
     ba4:	09 f4       	brne	.+2      	; 0xba8 <gc_execute_line+0x8c>
     ba6:	4a c0       	rjmp	.+148    	; 0xc3c <gc_execute_line+0x120>
     ba8:	19 aa       	std	Y+49, r1	; 0x31
     baa:	18 aa       	std	Y+48, r1	; 0x30
     bac:	e2 e0       	ldi	r30, 0x02	; 2
     bae:	6e 2e       	mov	r6, r30
     bb0:	71 2c       	mov	r7, r1
     bb2:	6c 0e       	add	r6, r28
     bb4:	7d 1e       	adc	r7, r29
     bb6:	74 e0       	ldi	r23, 0x04	; 4
     bb8:	47 2e       	mov	r4, r23
     bba:	51 2c       	mov	r5, r1
     bbc:	4c 0e       	add	r4, r28
     bbe:	5d 1e       	adc	r5, r29
     bc0:	4e 01       	movw	r8, r28
     bc2:	08 94       	sec
     bc4:	81 1c       	adc	r8, r1
     bc6:	91 1c       	adc	r9, r1
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     bc8:	c4 01       	movw	r24, r8
     bca:	b2 01       	movw	r22, r4
     bcc:	a5 01       	movw	r20, r10
     bce:	93 01       	movw	r18, r6
     bd0:	0e 94 1c 05 	call	0xa38	; 0xa38 <next_statement>
     bd4:	89 2b       	or	r24, r25
     bd6:	09 f4       	brne	.+2      	; 0xbda <gc_execute_line+0xbe>
     bd8:	55 c2       	rjmp	.+1194   	; 0x1084 <gc_execute_line+0x568>
    int_value = trunc(value);
     bda:	6c 81       	ldd	r22, Y+4	; 0x04
     bdc:	7d 81       	ldd	r23, Y+5	; 0x05
     bde:	8e 81       	ldd	r24, Y+6	; 0x06
     be0:	9f 81       	ldd	r25, Y+7	; 0x07
     be2:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <trunc>
     be6:	7b 01       	movw	r14, r22
     be8:	8c 01       	movw	r16, r24
     bea:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>

    switch(letter) {
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	27 34       	cpi	r18, 0x47	; 71
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <gc_execute_line+0xda>
     bf4:	06 c1       	rjmp	.+524    	; 0xe02 <gc_execute_line+0x2e6>
     bf6:	28 34       	cpi	r18, 0x48	; 72
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <gc_execute_line+0xe0>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <gc_execute_line+0x16e>
     bfc:	24 34       	cpi	r18, 0x44	; 68
     bfe:	09 f4       	brne	.+2      	; 0xc02 <gc_execute_line+0xe6>
     c00:	55 c0       	rjmp	.+170    	; 0xcac <gc_execute_line+0x190>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }

    if(gc.status_code) { break; }
     c02:	80 91 08 02 	lds	r24, 0x0208
     c06:	88 23       	and	r24, r24
     c08:	f9 f2       	breq	.-66     	; 0xbc8 <gc_execute_line+0xac>
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     c0a:	e7 96       	adiw	r28, 0x37	; 55
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	bf 90       	pop	r11
     c28:	af 90       	pop	r10
     c2a:	9f 90       	pop	r9
     c2c:	8f 90       	pop	r8
     c2e:	7f 90       	pop	r7
     c30:	6f 90       	pop	r6
     c32:	5f 90       	pop	r5
     c34:	4f 90       	pop	r4
     c36:	3f 90       	pop	r3
     c38:	2f 90       	pop	r2
     c3a:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c44:	d5 01       	movw	r26, r10
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	8c 91       	ld	r24, X
     c4a:	88 23       	and	r24, r24
     c4c:	59 f1       	breq	.+86     	; 0xca4 <gc_execute_line+0x188>
    read_double(line, &char_counter, &p);
     c4e:	8e 01       	movw	r16, r28
     c50:	0e 5f       	subi	r16, 0xFE	; 254
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	c5 01       	movw	r24, r10
     c56:	b8 01       	movw	r22, r16
     c58:	ae 01       	movw	r20, r28
     c5a:	48 5f       	subi	r20, 0xF8	; 248
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	f5 01       	movw	r30, r10
     c68:	e8 0f       	add	r30, r24
     c6a:	f9 1f       	adc	r31, r25
     c6c:	20 81       	ld	r18, Z
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	9b 83       	std	Y+3, r25	; 0x03
     c72:	8a 83       	std	Y+2, r24	; 0x02
     c74:	2d 33       	cpi	r18, 0x3D	; 61
     c76:	09 f4       	brne	.+2      	; 0xc7a <gc_execute_line+0x15e>
     c78:	f9 c0       	rjmp	.+498    	; 0xe6c <gc_execute_line+0x350>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	c6 cf       	rjmp	.-116    	; 0xc0a <gc_execute_line+0xee>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	9b 83       	std	Y+3, r25	; 0x03
     c86:	8a 83       	std	Y+2, r24	; 0x02
     c88:	8f cf       	rjmp	.-226    	; 0xba8 <gc_execute_line+0x8c>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     c8a:	2d 34       	cpi	r18, 0x4D	; 77
     c8c:	09 f4       	brne	.+2      	; 0xc90 <gc_execute_line+0x174>
     c8e:	b0 c0       	rjmp	.+352    	; 0xdf0 <gc_execute_line+0x2d4>
     c90:	24 35       	cpi	r18, 0x54	; 84
     c92:	09 f0       	breq	.+2      	; 0xc96 <gc_execute_line+0x17a>
     c94:	b6 cf       	rjmp	.-148    	; 0xc02 <gc_execute_line+0xe6>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     c96:	c8 01       	movw	r24, r16
     c98:	b7 01       	movw	r22, r14
     c9a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
     c9e:	60 93 2a 02 	sts	0x022A, r22
     ca2:	af cf       	rjmp	.-162    	; 0xc02 <gc_execute_line+0xe6>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     ca4:	0e 94 65 16 	call	0x2cca	; 0x2cca <settings_dump>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	af cf       	rjmp	.-162    	; 0xc0a <gc_execute_line+0xee>
    switch(letter) {
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     cac:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     cae:	8d ef       	ldi	r24, 0xFD	; 253
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
		  	printBinary( DIRECTION_DDR );
     cb6:	60 b3       	in	r22, 0x10	; 16
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cc2:	8a ef       	ldi	r24, 0xFA	; 250
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     cca:	87 ee       	ldi	r24, 0xE7	; 231
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
		  	printBinary( DIRECTION_PORT );
     cd2:	61 b3       	in	r22, 0x11	; 17
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cde:	84 ee       	ldi	r24, 0xE4	; 228
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

			ch = PORTD;
     ce6:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     ce8:	8a ed       	ldi	r24, 0xDA	; 218
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
		  	printBinary( ch );
     cf0:	ff 24       	eor	r15, r15
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 e0       	ldi	r17, 0x00	; 0
     cf6:	c8 01       	movw	r24, r16
     cf8:	b7 01       	movw	r22, r14
     cfa:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cfe:	87 ed       	ldi	r24, 0xD7	; 215
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

			ch = PIND;
     d06:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     d08:	88 ec       	ldi	r24, 0xC8	; 200
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
		  	printBinary( ch );
     d10:	ff 24       	eor	r15, r15
     d12:	00 e0       	ldi	r16, 0x00	; 0
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	c8 01       	movw	r24, r16
     d18:	b7 01       	movw	r22, r14
     d1a:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d1e:	85 ec       	ldi	r24, 0xC5	; 197
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     d26:	88 eb       	ldi	r24, 0xB8	; 184
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
			printInteger( is_head_down() );
     d2e:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a0 e0       	ldi	r26, 0x00	; 0
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d40:	85 eb       	ldi	r24, 0xB5	; 181
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     d48:	86 ea       	ldi	r24, 0xA6	; 166
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
			printInteger( head_moving() );
     d50:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d62:	83 ea       	ldi	r24, 0xA3	; 163
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     d6a:	83 e9       	ldi	r24, 0x93	; 147
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
			printInteger( vacuum_state() );
     d72:	0e 94 2d 21 	call	0x425a	; 0x425a <vacuum_state>
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d84:	80 e9       	ldi	r24, 0x90	; 144
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     d8c:	85 e8       	ldi	r24, 0x85	; 133
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
			printInteger( is_rotated() );
     d94:	0e 94 0b 20 	call	0x4016	; 0x4016 <is_rotated>
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a0 e0       	ldi	r26, 0x00	; 0
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     da6:	82 e8       	ldi	r24, 0x82	; 130
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
     dae:	86 e7       	ldi	r24, 0x76	; 118
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
			printInteger( get_busy() );
     db6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <get_busy>
     dba:	aa 27       	eor	r26, r26
     dbc:	97 fd       	sbrc	r25, 7
     dbe:	a0 95       	com	r26
     dc0:	ba 2f       	mov	r27, r26
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dca:	83 e7       	ldi	r24, 0x73	; 115
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     dd2:	4b 99       	sbic	0x09, 3	; 9
     dd4:	46 c0       	rjmp	.+140    	; 0xe62 <gc_execute_line+0x346>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     dd6:	4a 99       	sbic	0x09, 2	; 9
     dd8:	3f c0       	rjmp	.+126    	; 0xe58 <gc_execute_line+0x33c>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     dda:	48 99       	sbic	0x09, 0	; 9
     ddc:	38 c0       	rjmp	.+112    	; 0xe4e <gc_execute_line+0x332>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     dde:	49 99       	sbic	0x09, 1	; 9
     de0:	31 c0       	rjmp	.+98     	; 0xe44 <gc_execute_line+0x328>
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
     de2:	04 99       	sbic	0x00, 4	; 0
     de4:	2a c0       	rjmp	.+84     	; 0xe3a <gc_execute_line+0x31e>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     de6:	90 99       	sbic	0x12, 0	; 18
     de8:	21 c0       	rjmp	.+66     	; 0xe2c <gc_execute_line+0x310>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     dea:	80 91 08 02 	lds	r24, 0x0208
     dee:	0d cf       	rjmp	.-486    	; 0xc0a <gc_execute_line+0xee>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     df0:	e6 2f       	mov	r30, r22
     df2:	f7 2f       	mov	r31, r23
     df4:	ed 33       	cpi	r30, 0x3D	; 61
     df6:	f1 05       	cpc	r31, r1
     df8:	88 f0       	brcs	.+34     	; 0xe1c <gc_execute_line+0x300>
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;

		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	80 93 08 02 	sts	0x0208, r24
     e00:	f4 cf       	rjmp	.-24     	; 0xdea <gc_execute_line+0x2ce>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     e02:	e6 2f       	mov	r30, r22
     e04:	f7 2f       	mov	r31, r23
     e06:	ef 35       	cpi	r30, 0x5F	; 95
     e08:	f1 05       	cpc	r31, r1
     e0a:	b8 f7       	brcc	.-18     	; 0xdfa <gc_execute_line+0x2de>
     e0c:	ee 58       	subi	r30, 0x8E	; 142
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	05 90       	lpm	r0, Z+
     e16:	f4 91       	lpm	r31, Z+
     e18:	e0 2d       	mov	r30, r0
     e1a:	19 94       	eijmp
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e1c:	ef 52       	subi	r30, 0x2F	; 47
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	05 90       	lpm	r0, Z+
     e26:	f4 91       	lpm	r31, Z+
     e28:	e0 2d       	mov	r30, r0
     e2a:	19 94       	eijmp

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
		      	printPgmString(PSTR("Y_HOME\r\n"));
     e2c:	89 e4       	ldi	r24, 0x49	; 73
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     e34:	80 91 08 02 	lds	r24, 0x0208
     e38:	e8 ce       	rjmp	.-560    	; 0xc0a <gc_execute_line+0xee>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));
     e3a:	82 e5       	ldi	r24, 0x52	; 82
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
     e42:	d1 cf       	rjmp	.-94     	; 0xde6 <gc_execute_line+0x2ca>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));
     e44:	8b e5       	ldi	r24, 0x5B	; 91
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
     e4c:	ca cf       	rjmp	.-108    	; 0xde2 <gc_execute_line+0x2c6>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
     e4e:	81 e6       	ldi	r24, 0x61	; 97
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
     e56:	c3 cf       	rjmp	.-122    	; 0xdde <gc_execute_line+0x2c2>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));
     e58:	87 e6       	ldi	r24, 0x67	; 103
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
     e60:	bc cf       	rjmp	.-136    	; 0xdda <gc_execute_line+0x2be>
			printInteger( get_busy() );
	      	printPgmString(PSTR("\r\n"));


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
     e62:	8d e6       	ldi	r24, 0x6D	; 109
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
     e6a:	b5 cf       	rjmp	.-150    	; 0xdd6 <gc_execute_line+0x2ba>
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    read_double(line, &char_counter, &value);
     e6c:	c5 01       	movw	r24, r10
     e6e:	b8 01       	movw	r22, r16
     e70:	ae 01       	movw	r20, r28
     e72:	4c 5f       	subi	r20, 0xFC	; 252
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
     e76:	0e 94 db 04 	call	0x9b6	; 0x9b6 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     e7a:	ea 81       	ldd	r30, Y+2	; 0x02
     e7c:	fb 81       	ldd	r31, Y+3	; 0x03
     e7e:	ea 0d       	add	r30, r10
     e80:	fb 1d       	adc	r31, r11
     e82:	80 81       	ld	r24, Z
     e84:	88 23       	and	r24, r24
     e86:	09 f0       	breq	.+2      	; 0xe8a <gc_execute_line+0x36e>
     e88:	f8 ce       	rjmp	.-528    	; 0xc7a <gc_execute_line+0x15e>
    settings_store_setting(p, value);
     e8a:	68 85       	ldd	r22, Y+8	; 0x08
     e8c:	79 85       	ldd	r23, Y+9	; 0x09
     e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e90:	9b 85       	ldd	r25, Y+11	; 0x0b
     e92:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	4c 81       	ldd	r20, Y+4	; 0x04
     e9c:	5d 81       	ldd	r21, Y+5	; 0x05
     e9e:	6e 81       	ldd	r22, Y+6	; 0x06
     ea0:	7f 81       	ldd	r23, Y+7	; 0x07
     ea2:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <settings_store_setting>
    return(gc.status_code);
     ea6:	80 91 08 02 	lds	r24, 0x0208
     eaa:	af ce       	rjmp	.-674    	; 0xc0a <gc_execute_line+0xee>
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
     eac:	0e 94 c0 22 	call	0x4580	; 0x4580 <test_mode>
     eb0:	80 93 08 02 	sts	0x0208, r24
     eb4:	e1 e0       	ldi	r30, 0x01	; 1
     eb6:	e8 ab       	std	Y+48, r30	; 0x30
     eb8:	a4 ce       	rjmp	.-696    	; 0xc02 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     eba:	10 92 2d 02 	sts	0x022D, r1
  gc.plane_axis_1 = axis_1;
     ebe:	a1 e0       	ldi	r26, 0x01	; 1
     ec0:	a0 93 2e 02 	sts	0x022E, r26
  gc.plane_axis_2 = axis_2;
     ec4:	b2 e0       	ldi	r27, 0x02	; 2
     ec6:	b0 93 2f 02 	sts	0x022F, r27
     eca:	9b ce       	rjmp	.-714    	; 0xc02 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	90 93 09 02 	sts	0x0209, r25
     ed2:	97 ce       	rjmp	.-722    	; 0xc02 <gc_execute_line+0xe6>
      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	80 93 09 02 	sts	0x0209, r24
     eda:	93 ce       	rjmp	.-730    	; 0xc02 <gc_execute_line+0xe6>
	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	f0 93 09 02 	sts	0x0209, r31
     ee2:	8f ce       	rjmp	.-738    	; 0xc02 <gc_execute_line+0xe6>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     ee4:	10 92 09 02 	sts	0x0209, r1
     ee8:	8c ce       	rjmp	.-744    	; 0xc02 <gc_execute_line+0xe6>
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     eea:	f1 e0       	ldi	r31, 0x01	; 1
     eec:	f0 93 0c 02 	sts	0x020C, r31
     ef0:	88 ce       	rjmp	.-752    	; 0xc02 <gc_execute_line+0xe6>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     ef2:	e4 e0       	ldi	r30, 0x04	; 4
     ef4:	e0 93 09 02 	sts	0x0209, r30
     ef8:	84 ce       	rjmp	.-760    	; 0xc02 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     efa:	b1 e0       	ldi	r27, 0x01	; 1
     efc:	b9 ab       	std	Y+49, r27	; 0x31
     efe:	81 ce       	rjmp	.-766    	; 0xc02 <gc_execute_line+0xe6>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     f00:	b2 e0       	ldi	r27, 0x02	; 2
     f02:	b8 ab       	std	Y+48, r27	; 0x30
     f04:	7e ce       	rjmp	.-772    	; 0xc02 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f06:	10 92 0b 02 	sts	0x020B, r1
     f0a:	7b ce       	rjmp	.-778    	; 0xc02 <gc_execute_line+0xe6>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     f0c:	a1 e0       	ldi	r26, 0x01	; 1
     f0e:	a0 93 0b 02 	sts	0x020B, r26
     f12:	77 ce       	rjmp	.-786    	; 0xc02 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 2d 02 	sts	0x022D, r24
  gc.plane_axis_1 = axis_1;
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	90 93 2e 02 	sts	0x022E, r25
  gc.plane_axis_2 = axis_2;
     f20:	10 92 2f 02 	sts	0x022F, r1
     f24:	6e ce       	rjmp	.-804    	; 0xc02 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f26:	10 92 2d 02 	sts	0x022D, r1
  gc.plane_axis_1 = axis_1;
     f2a:	e2 e0       	ldi	r30, 0x02	; 2
     f2c:	e0 93 2e 02 	sts	0x022E, r30
  gc.plane_axis_2 = axis_2;
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	f0 93 2f 02 	sts	0x022F, r31
     f36:	65 ce       	rjmp	.-822    	; 0xc02 <gc_execute_line+0xe6>
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     f38:	10 92 0a 02 	sts	0x020A, r1
     f3c:	62 ce       	rjmp	.-828    	; 0xc02 <gc_execute_line+0xe6>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	90 93 0a 02 	sts	0x020A, r25
     f44:	5e ce       	rjmp	.-836    	; 0xc02 <gc_execute_line+0xe6>
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	88 ab       	std	Y+48, r24	; 0x30
     f4a:	5b ce       	rjmp	.-842    	; 0xc02 <gc_execute_line+0xe6>
     f4c:	10 92 0c 02 	sts	0x020C, r1
     f50:	58 ce       	rjmp	.-848    	; 0xc02 <gc_execute_line+0xe6>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     f52:	ef ef       	ldi	r30, 0xFF	; 255
     f54:	ff ef       	ldi	r31, 0xFF	; 255
     f56:	f0 93 0f 02 	sts	0x020F, r31
     f5a:	e0 93 0e 02 	sts	0x020E, r30
     f5e:	51 ce       	rjmp	.-862    	; 0xc02 <gc_execute_line+0xe6>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	90 93 0f 02 	sts	0x020F, r25
     f68:	80 93 0e 02 	sts	0x020E, r24
     f6c:	4a ce       	rjmp	.-876    	; 0xc02 <gc_execute_line+0xe6>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     f6e:	b2 e0       	ldi	r27, 0x02	; 2
     f70:	b0 93 0d 02 	sts	0x020D, r27
     f74:	46 ce       	rjmp	.-884    	; 0xc02 <gc_execute_line+0xe6>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     f76:	a1 e0       	ldi	r26, 0x01	; 1
     f78:	a0 93 0d 02 	sts	0x020D, r26
     f7c:	42 ce       	rjmp	.-892    	; 0xc02 <gc_execute_line+0xe6>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>
     f86:	3d ce       	rjmp	.-902    	; 0xc02 <gc_execute_line+0xe6>
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>
     f90:	38 ce       	rjmp	.-912    	; 0xc02 <gc_execute_line+0xe6>
		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);break;
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>
     f9a:	33 ce       	rjmp	.-922    	; 0xc02 <gc_execute_line+0xe6>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	88 ab       	std	Y+48, r24	; 0x30
     fa8:	2c ce       	rjmp	.-936    	; 0xc02 <gc_execute_line+0xe6>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
     fb2:	f1 e0       	ldi	r31, 0x01	; 1
     fb4:	f8 ab       	std	Y+48, r31	; 0x30
     fb6:	25 ce       	rjmp	.-950    	; 0xc02 <gc_execute_line+0xe6>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
     fb8:	10 92 11 02 	sts	0x0211, r1
     fbc:	10 92 10 02 	sts	0x0210, r1
     fc0:	20 ce       	rjmp	.-960    	; 0xc02 <gc_execute_line+0xe6>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 11 02 	sts	0x0211, r25
     fca:	80 93 10 02 	sts	0x0210, r24
     fce:	19 ce       	rjmp	.-974    	; 0xc02 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
     fd0:	10 92 0f 02 	sts	0x020F, r1
     fd4:	10 92 0e 02 	sts	0x020E, r1
     fd8:	14 ce       	rjmp	.-984    	; 0xc02 <gc_execute_line+0xe6>
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
     fda:	0e 94 32 23 	call	0x4664	; 0x4664 <vacuum_test>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	e8 ab       	std	Y+48, r30	; 0x30
     fe2:	0f ce       	rjmp	.-994    	; 0xc02 <gc_execute_line+0xe6>
		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
     fe4:	0e 94 70 23 	call	0x46e0	; 0x46e0 <tape_knock>
     fe8:	b1 e0       	ldi	r27, 0x01	; 1
     fea:	b8 ab       	std	Y+48, r27	; 0x30
     fec:	0a ce       	rjmp	.-1004   	; 0xc02 <gc_execute_line+0xe6>
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
     ff6:	a1 e0       	ldi	r26, 0x01	; 1
     ff8:	a8 ab       	std	Y+48, r26	; 0x30
     ffa:	03 ce       	rjmp	.-1018   	; 0xc02 <gc_execute_line+0xe6>
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	98 ab       	std	Y+48, r25	; 0x30
    1008:	fc cd       	rjmp	.-1032   	; 0xc02 <gc_execute_line+0xe6>
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>
    1012:	f7 cd       	rjmp	.-1042   	; 0xc02 <gc_execute_line+0xe6>
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
    1014:	85 e0       	ldi	r24, 0x05	; 5
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>
    101c:	f2 cd       	rjmp	.-1052   	; 0xc02 <gc_execute_line+0xe6>
		// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>
    1026:	ed cd       	rjmp	.-1062   	; 0xc02 <gc_execute_line+0xe6>

		// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>
    1030:	e8 cd       	rjmp	.-1072   	; 0xc02 <gc_execute_line+0xe6>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
    1032:	0e 94 44 23 	call	0x4688	; 0x4688 <putdown_part>
    1036:	80 93 08 02 	sts	0x0208, r24
    103a:	b1 e0       	ldi	r27, 0x01	; 1
    103c:	b8 ab       	std	Y+48, r27	; 0x30
    103e:	e1 cd       	rjmp	.-1086   	; 0xc02 <gc_execute_line+0xe6>
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;

		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;
    1040:	f6 e0       	ldi	r31, 0x06	; 6
    1042:	f0 93 08 02 	sts	0x0208, r31
    1046:	0e 94 7f 19 	call	0x32fe	; 0x32fe <get_limit_bits>
    104a:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <serialWrite>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	88 ab       	std	Y+48, r24	; 0x30
    1052:	d7 cd       	rjmp	.-1106   	; 0xc02 <gc_execute_line+0xe6>
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
    1054:	0e 94 9d 23 	call	0x473a	; 0x473a <pickup_part>
    1058:	80 93 08 02 	sts	0x0208, r24
    105c:	a1 e0       	ldi	r26, 0x01	; 1
    105e:	a8 ab       	std	Y+48, r26	; 0x30
    1060:	d0 cd       	rjmp	.-1120   	; 0xc02 <gc_execute_line+0xe6>
		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
    1062:	0e 94 32 23 	call	0x4664	; 0x4664 <vacuum_test>
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	98 ab       	std	Y+48, r25	; 0x30
    106a:	cb cd       	rjmp	.-1130   	; 0xc02 <gc_execute_line+0xe6>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
    106c:	0e 94 6d 21 	call	0x42da	; 0x42da <goto_vacpad>
    1070:	80 93 08 02 	sts	0x0208, r24
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	88 ab       	std	Y+48, r24	; 0x30
    1078:	c4 cd       	rjmp	.-1144   	; 0xc02 <gc_execute_line+0xe6>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
    107a:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <check_for_tool>
    107e:	f1 e0       	ldi	r31, 0x01	; 1
    1080:	f8 ab       	std	Y+48, r31	; 0x30
    1082:	bf cd       	rjmp	.-1154   	; 0xc02 <gc_execute_line+0xe6>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1084:	80 91 08 02 	lds	r24, 0x0208
    1088:	88 23       	and	r24, r24
    108a:	09 f0       	breq	.+2      	; 0x108e <gc_execute_line+0x572>
    108c:	be cd       	rjmp	.-1156   	; 0xc0a <gc_execute_line+0xee>

  char_counter = 0;
    108e:	1b 82       	std	Y+3, r1	; 0x03
    1090:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
    1092:	80 e1       	ldi	r24, 0x10	; 16
    1094:	d6 01       	movw	r26, r12
    1096:	1d 92       	st	X+, r1
    1098:	8a 95       	dec	r24
    109a:	e9 f7       	brne	.-6      	; 0x1096 <gc_execute_line+0x57a>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
    109c:	d1 01       	movw	r26, r2
    109e:	ea e1       	ldi	r30, 0x1A	; 26
    10a0:	f2 e0       	ldi	r31, 0x02	; 2
    10a2:	80 e1       	ldi	r24, 0x10	; 16
    10a4:	01 90       	ld	r0, Z+
    10a6:	0d 92       	st	X+, r0
    10a8:	81 50       	subi	r24, 0x01	; 1
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <gc_execute_line+0x588>
    10ac:	1c aa       	std	Y+52, r1	; 0x34
    10ae:	1d aa       	std	Y+53, r1	; 0x35
    10b0:	b0 e8       	ldi	r27, 0x80	; 128
    10b2:	be ab       	std	Y+54, r27	; 0x36
    10b4:	ef eb       	ldi	r30, 0xBF	; 191
    10b6:	ef ab       	std	Y+55, r30	; 0x37
    10b8:	1b aa       	std	Y+51, r1	; 0x33
    10ba:	1a aa       	std	Y+50, r1	; 0x32

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    10bc:	c4 01       	movw	r24, r8
    10be:	b2 01       	movw	r22, r4
    10c0:	a5 01       	movw	r20, r10
    10c2:	93 01       	movw	r18, r6
    10c4:	0e 94 1c 05 	call	0xa38	; 0xa38 <next_statement>
    10c8:	89 2b       	or	r24, r25
    10ca:	09 f4       	brne	.+2      	; 0x10ce <gc_execute_line+0x5b2>
    10cc:	ed c0       	rjmp	.+474    	; 0x12a8 <gc_execute_line+0x78c>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    10ce:	cc 80       	ldd	r12, Y+4	; 0x04
    10d0:	dd 80       	ldd	r13, Y+5	; 0x05
    10d2:	ee 80       	ldd	r14, Y+6	; 0x06
    10d4:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    10d6:	80 91 0b 02 	lds	r24, 0x020B
    10da:	88 23       	and	r24, r24
    10dc:	d9 f4       	brne	.+54     	; 0x1114 <gc_execute_line+0x5f8>
    10de:	a7 01       	movw	r20, r14
    10e0:	96 01       	movw	r18, r12

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    10e2:	09 81       	ldd	r16, Y+1	; 0x01
    10e4:	0d 34       	cpi	r16, 0x4D	; 77
    10e6:	19 f1       	breq	.+70     	; 0x112e <gc_execute_line+0x612>
    10e8:	0e 34       	cpi	r16, 0x4E	; 78
    10ea:	60 f5       	brcc	.+88     	; 0x1144 <gc_execute_line+0x628>
    10ec:	08 34       	cpi	r16, 0x48	; 72
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <gc_execute_line+0x5d6>
    10f0:	7a c0       	rjmp	.+244    	; 0x11e6 <gc_execute_line+0x6ca>
    10f2:	09 34       	cpi	r16, 0x49	; 73
    10f4:	b8 f5       	brcc	.+110    	; 0x1164 <gc_execute_line+0x648>
    10f6:	03 34       	cpi	r16, 0x43	; 67
    10f8:	09 f4       	brne	.+2      	; 0x10fc <gc_execute_line+0x5e0>
    10fa:	8a c0       	rjmp	.+276    	; 0x1210 <gc_execute_line+0x6f4>
    10fc:	06 34       	cpi	r16, 0x46	; 70
    10fe:	f1 f6       	brne	.-68     	; 0x10bc <gc_execute_line+0x5a0>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    1100:	80 91 0a 02 	lds	r24, 0x020A
    1104:	88 23       	and	r24, r24
    1106:	09 f4       	brne	.+2      	; 0x110a <gc_execute_line+0x5ee>
    1108:	a9 c0       	rjmp	.+338    	; 0x125c <gc_execute_line+0x740>
    110a:	2c ab       	std	Y+52, r18	; 0x34
    110c:	3d ab       	std	Y+53, r19	; 0x35
    110e:	4e ab       	std	Y+54, r20	; 0x36
    1110:	5f ab       	std	Y+55, r21	; 0x37
    1112:	d4 cf       	rjmp	.-88     	; 0x10bc <gc_execute_line+0x5a0>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1114:	c7 01       	movw	r24, r14
    1116:	b6 01       	movw	r22, r12
    1118:	23 e3       	ldi	r18, 0x33	; 51
    111a:	33 e3       	ldi	r19, 0x33	; 51
    111c:	4b ec       	ldi	r20, 0xCB	; 203
    111e:	51 e4       	ldi	r21, 0x41	; 65
    1120:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1124:	9b 01       	movw	r18, r22
    1126:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1128:	09 81       	ldd	r16, Y+1	; 0x01
    112a:	0d 34       	cpi	r16, 0x4D	; 77
    112c:	e9 f6       	brne	.-70     	; 0x10e8 <gc_execute_line+0x5cc>
	feeder_x_pos = x;
}

void set_feeder_y( double y )
{
	feeder_x_pos = y;
    112e:	20 93 04 02 	sts	0x0204, r18
    1132:	30 93 05 02 	sts	0x0205, r19
    1136:	40 93 06 02 	sts	0x0206, r20
    113a:	50 93 07 02 	sts	0x0207, r21
    113e:	a1 e0       	ldi	r26, 0x01	; 1
    1140:	a8 ab       	std	Y+48, r26	; 0x30
    1142:	bc cf       	rjmp	.-136    	; 0x10bc <gc_execute_line+0x5a0>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1144:	03 35       	cpi	r16, 0x53	; 83
    1146:	09 f4       	brne	.+2      	; 0x114a <gc_execute_line+0x62e>
    1148:	45 c0       	rjmp	.+138    	; 0x11d4 <gc_execute_line+0x6b8>
    114a:	04 35       	cpi	r16, 0x54	; 84
    114c:	e8 f4       	brcc	.+58     	; 0x1188 <gc_execute_line+0x66c>
    114e:	0e 34       	cpi	r16, 0x4E	; 78
    1150:	09 f4       	brne	.+2      	; 0x1154 <gc_execute_line+0x638>
    1152:	53 c0       	rjmp	.+166    	; 0x11fa <gc_execute_line+0x6de>
    1154:	00 35       	cpi	r16, 0x50	; 80
    1156:	09 f0       	breq	.+2      	; 0x115a <gc_execute_line+0x63e>
    1158:	b1 cf       	rjmp	.-158    	; 0x10bc <gc_execute_line+0x5a0>
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
    115a:	c8 86       	std	Y+8, r12	; 0x08
    115c:	d9 86       	std	Y+9, r13	; 0x09
    115e:	ea 86       	std	Y+10, r14	; 0x0a
    1160:	fb 86       	std	Y+11, r15	; 0x0b
    1162:	ac cf       	rjmp	.-168    	; 0x10bc <gc_execute_line+0x5a0>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1164:	0c 34       	cpi	r16, 0x4C	; 76
    1166:	08 f0       	brcs	.+2      	; 0x116a <gc_execute_line+0x64e>
    1168:	a9 cf       	rjmp	.-174    	; 0x10bc <gc_execute_line+0x5a0>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    116a:	e0 2f       	mov	r30, r16
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	e9 54       	subi	r30, 0x49	; 73
    1170:	f0 40       	sbci	r31, 0x00	; 0
    1172:	ee 0f       	add	r30, r30
    1174:	ff 1f       	adc	r31, r31
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	e8 0d       	add	r30, r8
    117c:	f9 1d       	adc	r31, r9
    117e:	23 8f       	std	Z+27, r18	; 0x1b
    1180:	34 8f       	std	Z+28, r19	; 0x1c
    1182:	45 8f       	std	Z+29, r20	; 0x1d
    1184:	56 8f       	std	Z+30, r21	; 0x1e
    1186:	9a cf       	rjmp	.-204    	; 0x10bc <gc_execute_line+0x5a0>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1188:	80 2f       	mov	r24, r16
    118a:	88 55       	subi	r24, 0x58	; 88
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	08 f0       	brcs	.+2      	; 0x1192 <gc_execute_line+0x676>
    1190:	95 cf       	rjmp	.-214    	; 0x10bc <gc_execute_line+0x5a0>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    1192:	80 91 0c 02 	lds	r24, 0x020C
    1196:	88 23       	and	r24, r24
    1198:	09 f0       	breq	.+2      	; 0x119c <gc_execute_line+0x680>
    119a:	4c c0       	rjmp	.+152    	; 0x1234 <gc_execute_line+0x718>
    119c:	f9 a9       	ldd	r31, Y+49	; 0x31
    119e:	ff 23       	and	r31, r31
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <gc_execute_line+0x688>
    11a2:	48 c0       	rjmp	.+144    	; 0x1234 <gc_execute_line+0x718>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	08 55       	subi	r16, 0x58	; 88
    11a8:	10 40       	sbci	r17, 0x00	; 0
    11aa:	00 0f       	add	r16, r16
    11ac:	11 1f       	adc	r17, r17
    11ae:	00 0f       	add	r16, r16
    11b0:	11 1f       	adc	r17, r17
    11b2:	08 0d       	add	r16, r8
    11b4:	19 1d       	adc	r17, r9
    11b6:	d8 01       	movw	r26, r16
    11b8:	1b 96       	adiw	r26, 0x0b	; 11
    11ba:	6d 91       	ld	r22, X+
    11bc:	7d 91       	ld	r23, X+
    11be:	8d 91       	ld	r24, X+
    11c0:	9c 91       	ld	r25, X
    11c2:	1e 97       	sbiw	r26, 0x0e	; 14
    11c4:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    11c8:	f8 01       	movw	r30, r16
    11ca:	63 87       	std	Z+11, r22	; 0x0b
    11cc:	74 87       	std	Z+12, r23	; 0x0c
    11ce:	85 87       	std	Z+13, r24	; 0x0d
    11d0:	96 87       	std	Z+14, r25	; 0x0e
    11d2:	74 cf       	rjmp	.-280    	; 0x10bc <gc_execute_line+0x5a0>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    11d4:	c7 01       	movw	r24, r14
    11d6:	b6 01       	movw	r22, r12
    11d8:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
    11dc:	70 93 2c 02 	sts	0x022C, r23
    11e0:	60 93 2b 02 	sts	0x022B, r22
    11e4:	6b cf       	rjmp	.-298    	; 0x10bc <gc_execute_line+0x5a0>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    11e6:	ca 01       	movw	r24, r20
    11e8:	b9 01       	movw	r22, r18
    11ea:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
    11ee:	7b ab       	std	Y+51, r23	; 0x33
    11f0:	6a ab       	std	Y+50, r22	; 0x32
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    11f2:	89 e0       	ldi	r24, 0x09	; 9
    11f4:	80 93 09 02 	sts	0x0209, r24
    11f8:	61 cf       	rjmp	.-318    	; 0x10bc <gc_execute_line+0x5a0>

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
    11fa:	20 93 04 02 	sts	0x0204, r18
    11fe:	30 93 05 02 	sts	0x0205, r19
    1202:	40 93 06 02 	sts	0x0206, r20
    1206:	50 93 07 02 	sts	0x0207, r21
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	98 ab       	std	Y+48, r25	; 0x30
    120e:	56 cf       	rjmp	.-340    	; 0x10bc <gc_execute_line+0x5a0>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    1210:	80 91 0c 02 	lds	r24, 0x020C
    1214:	88 23       	and	r24, r24
    1216:	e9 f4       	brne	.+58     	; 0x1252 <gc_execute_line+0x736>
    1218:	f9 a9       	ldd	r31, Y+49	; 0x31
    121a:	ff 23       	and	r31, r31
    121c:	d1 f4       	brne	.+52     	; 0x1252 <gc_execute_line+0x736>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
    121e:	68 8d       	ldd	r22, Y+24	; 0x18
    1220:	79 8d       	ldd	r23, Y+25	; 0x19
    1222:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1224:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1226:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    122a:	68 8f       	std	Y+24, r22	; 0x18
    122c:	79 8f       	std	Y+25, r23	; 0x19
    122e:	8a 8f       	std	Y+26, r24	; 0x1a
    1230:	9b 8f       	std	Y+27, r25	; 0x1b
    1232:	44 cf       	rjmp	.-376    	; 0x10bc <gc_execute_line+0x5a0>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    1234:	e0 2f       	mov	r30, r16
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	e8 55       	subi	r30, 0x58	; 88
    123a:	f0 40       	sbci	r31, 0x00	; 0
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	e8 0d       	add	r30, r8
    1246:	f9 1d       	adc	r31, r9
    1248:	23 87       	std	Z+11, r18	; 0x0b
    124a:	34 87       	std	Z+12, r19	; 0x0c
    124c:	45 87       	std	Z+13, r20	; 0x0d
    124e:	56 87       	std	Z+14, r21	; 0x0e
    1250:	35 cf       	rjmp	.-406    	; 0x10bc <gc_execute_line+0x5a0>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
    1252:	28 8f       	std	Y+24, r18	; 0x18
    1254:	39 8f       	std	Y+25, r19	; 0x19
    1256:	4a 8f       	std	Y+26, r20	; 0x1a
    1258:	5b 8f       	std	Y+27, r21	; 0x1b
    125a:	30 cf       	rjmp	.-416    	; 0x10bc <gc_execute_line+0x5a0>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    125c:	80 91 09 02 	lds	r24, 0x0209
    1260:	88 23       	and	r24, r24
    1262:	89 f4       	brne	.+34     	; 0x1286 <gc_execute_line+0x76a>
          gc.seek_rate = unit_converted_value/60;
    1264:	ca 01       	movw	r24, r20
    1266:	b9 01       	movw	r22, r18
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e7       	ldi	r20, 0x70	; 112
    126e:	52 e4       	ldi	r21, 0x42	; 66
    1270:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    1274:	60 93 16 02 	sts	0x0216, r22
    1278:	70 93 17 02 	sts	0x0217, r23
    127c:	80 93 18 02 	sts	0x0218, r24
    1280:	90 93 19 02 	sts	0x0219, r25
    1284:	1b cf       	rjmp	.-458    	; 0x10bc <gc_execute_line+0x5a0>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
    1286:	ca 01       	movw	r24, r20
    1288:	b9 01       	movw	r22, r18
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e7       	ldi	r20, 0x70	; 112
    1290:	52 e4       	ldi	r21, 0x42	; 66
    1292:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    1296:	60 93 12 02 	sts	0x0212, r22
    129a:	70 93 13 02 	sts	0x0213, r23
    129e:	80 93 14 02 	sts	0x0214, r24
    12a2:	90 93 15 02 	sts	0x0215, r25
    12a6:	0a cf       	rjmp	.-492    	; 0x10bc <gc_execute_line+0x5a0>

    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    12a8:	80 91 08 02 	lds	r24, 0x0208
    12ac:	88 23       	and	r24, r24
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <gc_execute_line+0x796>
    12b0:	ac cc       	rjmp	.-1704   	; 0xc0a <gc_execute_line+0xee>
    
  // Update spindle state
  if (gc.spindle_direction) {
    12b2:	80 91 0e 02 	lds	r24, 0x020E
    12b6:	90 91 0f 02 	lds	r25, 0x020F
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <gc_execute_line+0x7a4>
    12be:	5d c0       	rjmp	.+186    	; 0x137a <gc_execute_line+0x85e>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    12c0:	40 91 2b 02 	lds	r20, 0x022B
    12c4:	50 91 2c 02 	lds	r21, 0x022C
    12c8:	66 27       	eor	r22, r22
    12ca:	57 fd       	sbrc	r21, 7
    12cc:	60 95       	com	r22
    12ce:	76 2f       	mov	r23, r22
    12d0:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    12d4:	80 91 10 02 	lds	r24, 0x0210
    12d8:	90 91 11 02 	lds	r25, 0x0211
    12dc:	89 2b       	or	r24, r25
    12de:	09 f4       	brne	.+2      	; 0x12e2 <gc_execute_line+0x7c6>
    12e0:	4f c0       	rjmp	.+158    	; 0x1380 <gc_execute_line+0x864>
  	coolant_flood(TRUE);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 41 03 	call	0x682	; 0x682 <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    12ea:	b8 a9       	ldd	r27, Y+48	; 0x30
    12ec:	b1 30       	cpi	r27, 0x01	; 1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <gc_execute_line+0x7d6>
    12f0:	63 c0       	rjmp	.+198    	; 0x13b8 <gc_execute_line+0x89c>
    12f2:	b1 30       	cpi	r27, 0x01	; 1
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <gc_execute_line+0x7dc>
    12f6:	49 c0       	rjmp	.+146    	; 0x138a <gc_execute_line+0x86e>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    12f8:	80 91 09 02 	lds	r24, 0x0209
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	09 f4       	brne	.+2      	; 0x1302 <gc_execute_line+0x7e6>
    1300:	7a c0       	rjmp	.+244    	; 0x13f6 <gc_execute_line+0x8da>
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	08 f0       	brcs	.+2      	; 0x1308 <gc_execute_line+0x7ec>
    1306:	6f c0       	rjmp	.+222    	; 0x13e6 <gc_execute_line+0x8ca>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    1308:	00 d0       	rcall	.+0      	; 0x130a <gc_execute_line+0x7ee>
    130a:	00 d0       	rcall	.+0      	; 0x130c <gc_execute_line+0x7f0>
    130c:	6c 85       	ldd	r22, Y+12	; 0x0c
    130e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1310:	8e 85       	ldd	r24, Y+14	; 0x0e
    1312:	9f 85       	ldd	r25, Y+15	; 0x0f
    1314:	28 89       	ldd	r18, Y+16	; 0x10
    1316:	39 89       	ldd	r19, Y+17	; 0x11
    1318:	4a 89       	ldd	r20, Y+18	; 0x12
    131a:	5b 89       	ldd	r21, Y+19	; 0x13
    131c:	ec 88       	ldd	r14, Y+20	; 0x14
    131e:	fd 88       	ldd	r15, Y+21	; 0x15
    1320:	0e 89       	ldd	r16, Y+22	; 0x16
    1322:	1f 89       	ldd	r17, Y+23	; 0x17
    1324:	a8 8c       	ldd	r10, Y+24	; 0x18
    1326:	b9 8c       	ldd	r11, Y+25	; 0x19
    1328:	ca 8c       	ldd	r12, Y+26	; 0x1a
    132a:	db 8c       	ldd	r13, Y+27	; 0x1b
    132c:	60 90 16 02 	lds	r6, 0x0216
    1330:	70 90 17 02 	lds	r7, 0x0217
    1334:	80 90 18 02 	lds	r8, 0x0218
    1338:	90 90 19 02 	lds	r9, 0x0219
    133c:	ad b7       	in	r26, 0x3d	; 61
    133e:	be b7       	in	r27, 0x3e	; 62
    1340:	11 96       	adiw	r26, 0x01	; 1
    1342:	6d 92       	st	X+, r6
    1344:	7d 92       	st	X+, r7
    1346:	8d 92       	st	X+, r8
    1348:	9c 92       	st	X, r9
    134a:	14 97       	sbiw	r26, 0x04	; 4
    134c:	16 96       	adiw	r26, 0x06	; 6
    134e:	1c 92       	st	X, r1
    1350:	1e 92       	st	-X, r1
    1352:	15 97       	sbiw	r26, 0x05	; 5
    1354:	0e 94 34 10 	call	0x2068	; 0x2068 <plan_buffer_line>
    1358:	ed b7       	in	r30, 0x3d	; 61
    135a:	fe b7       	in	r31, 0x3e	; 62
    135c:	36 96       	adiw	r30, 0x06	; 6
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	fe bf       	out	0x3e, r31	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    1368:	aa e1       	ldi	r26, 0x1A	; 26
    136a:	b2 e0       	ldi	r27, 0x02	; 2
    136c:	f1 01       	movw	r30, r2
    136e:	80 e1       	ldi	r24, 0x10	; 16
    1370:	01 90       	ld	r0, Z+
    1372:	0d 92       	st	X+, r0
    1374:	81 50       	subi	r24, 0x01	; 1
    1376:	e1 f7       	brne	.-8      	; 0x1370 <gc_execute_line+0x854>
    1378:	38 cd       	rjmp	.-1424   	; 0xdea <gc_execute_line+0x2ce>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    137a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <spindle_stop>
    137e:	aa cf       	rjmp	.-172    	; 0x12d4 <gc_execute_line+0x7b8>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 41 03 	call	0x682	; 0x682 <coolant_flood>
    1388:	b0 cf       	rjmp	.-160    	; 0x12ea <gc_execute_line+0x7ce>
  }
  
  // Perform any physical actions
  switch (next_action) {
    138a:	b2 30       	cpi	r27, 0x02	; 2
    138c:	21 f1       	breq	.+72     	; 0x13d6 <gc_execute_line+0x8ba>
    138e:	b3 30       	cpi	r27, 0x03	; 3
    1390:	59 f7       	brne	.-42     	; 0x1368 <gc_execute_line+0x84c>
	  rotate_head( head);
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1392:	6c 85       	ldd	r22, Y+12	; 0x0c
    1394:	7d 85       	ldd	r23, Y+13	; 0x0d
    1396:	8e 85       	ldd	r24, Y+14	; 0x0e
    1398:	9f 85       	ldd	r25, Y+15	; 0x0f
    139a:	28 89       	ldd	r18, Y+16	; 0x10
    139c:	39 89       	ldd	r19, Y+17	; 0x11
    139e:	4a 89       	ldd	r20, Y+18	; 0x12
    13a0:	5b 89       	ldd	r21, Y+19	; 0x13
    13a2:	ec 88       	ldd	r14, Y+20	; 0x14
    13a4:	fd 88       	ldd	r15, Y+21	; 0x15
    13a6:	0e 89       	ldd	r16, Y+22	; 0x16
    13a8:	1f 89       	ldd	r17, Y+23	; 0x17
    13aa:	a8 8c       	ldd	r10, Y+24	; 0x18
    13ac:	b9 8c       	ldd	r11, Y+25	; 0x19
    13ae:	ca 8c       	ldd	r12, Y+26	; 0x1a
    13b0:	db 8c       	ldd	r13, Y+27	; 0x1b
    13b2:	0e 94 40 0c 	call	0x1880	; 0x1880 <plan_set_current>
    13b6:	d8 cf       	rjmp	.-80     	; 0x1368 <gc_execute_line+0x84c>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    13b8:	68 85       	ldd	r22, Y+8	; 0x08
    13ba:	79 85       	ldd	r23, Y+9	; 0x09
    13bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13be:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a e7       	ldi	r20, 0x7A	; 122
    13c6:	54 e4       	ldi	r21, 0x44	; 68
    13c8:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    13cc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
    13d0:	0e 94 c3 0a 	call	0x1586	; 0x1586 <mc_dwell>
    13d4:	c9 cf       	rjmp	.-110    	; 0x1368 <gc_execute_line+0x84c>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    13d6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <mc_go_home>
    13da:	80 e1       	ldi	r24, 0x10	; 16
    13dc:	f1 01       	movw	r30, r2
    13de:	11 92       	st	Z+, r1
    13e0:	8a 95       	dec	r24
    13e2:	e9 f7       	brne	.-6      	; 0x13de <gc_execute_line+0x8c2>
    13e4:	c1 cf       	rjmp	.-126    	; 0x1368 <gc_execute_line+0x84c>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    13e6:	89 30       	cpi	r24, 0x09	; 9
    13e8:	09 f0       	breq	.+2      	; 0x13ec <gc_execute_line+0x8d0>
    13ea:	be cf       	rjmp	.-132    	; 0x1368 <gc_execute_line+0x84c>
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    13ec:	8a a9       	ldd	r24, Y+50	; 0x32
    13ee:	9b a9       	ldd	r25, Y+51	; 0x33
    13f0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <rotate_head>
    13f4:	b9 cf       	rjmp	.-142    	; 0x1368 <gc_execute_line+0x84c>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    13f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    13fa:	ae 85       	ldd	r26, Y+14	; 0x0e
    13fc:	bf 85       	ldd	r27, Y+15	; 0x0f
    13fe:	8c a7       	std	Y+44, r24	; 0x2c
    1400:	9d a7       	std	Y+45, r25	; 0x2d
    1402:	ae a7       	std	Y+46, r26	; 0x2e
    1404:	bf a7       	std	Y+47, r27	; 0x2f
    1406:	68 88       	ldd	r6, Y+16	; 0x10
    1408:	79 88       	ldd	r7, Y+17	; 0x11
    140a:	8a 88       	ldd	r8, Y+18	; 0x12
    140c:	9b 88       	ldd	r9, Y+19	; 0x13
    140e:	ec 88       	ldd	r14, Y+20	; 0x14
    1410:	fd 88       	ldd	r15, Y+21	; 0x15
    1412:	0e 89       	ldd	r16, Y+22	; 0x16
    1414:	1f 89       	ldd	r17, Y+23	; 0x17
    1416:	a8 8c       	ldd	r10, Y+24	; 0x18
    1418:	b9 8c       	ldd	r11, Y+25	; 0x19
    141a:	ca 8c       	ldd	r12, Y+26	; 0x1a
    141c:	db 8c       	ldd	r13, Y+27	; 0x1b
    141e:	60 91 0a 02 	lds	r22, 0x020A
    1422:	66 23       	and	r22, r22
    1424:	61 f4       	brne	.+24     	; 0x143e <gc_execute_line+0x922>
    1426:	90 91 12 02 	lds	r25, 0x0212
    142a:	9c ab       	std	Y+52, r25	; 0x34
    142c:	a0 91 13 02 	lds	r26, 0x0213
    1430:	ad ab       	std	Y+53, r26	; 0x35
    1432:	b0 91 14 02 	lds	r27, 0x0214
    1436:	be ab       	std	Y+54, r27	; 0x36
    1438:	e0 91 15 02 	lds	r30, 0x0215
    143c:	ef ab       	std	Y+55, r30	; 0x37
    143e:	00 d0       	rcall	.+0      	; 0x1440 <gc_execute_line+0x924>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <gc_execute_line+0x926>
    1442:	4d b6       	in	r4, 0x3d	; 61
    1444:	5e b6       	in	r5, 0x3e	; 62
    1446:	08 94       	sec
    1448:	41 1c       	adc	r4, r1
    144a:	51 1c       	adc	r5, r1
    144c:	2c a9       	ldd	r18, Y+52	; 0x34
    144e:	3d a9       	ldd	r19, Y+53	; 0x35
    1450:	4e a9       	ldd	r20, Y+54	; 0x36
    1452:	5f a9       	ldd	r21, Y+55	; 0x37
    1454:	c9 01       	movw	r24, r18
    1456:	da 01       	movw	r26, r20
    1458:	ed b7       	in	r30, 0x3d	; 61
    145a:	fe b7       	in	r31, 0x3e	; 62
    145c:	81 83       	std	Z+1, r24	; 0x01
    145e:	92 83       	std	Z+2, r25	; 0x02
    1460:	a3 83       	std	Z+3, r26	; 0x03
    1462:	b4 83       	std	Z+4, r27	; 0x04
    1464:	d2 01       	movw	r26, r4
    1466:	14 96       	adiw	r26, 0x04	; 4
    1468:	6c 93       	st	X, r22
    146a:	14 97       	sbiw	r26, 0x04	; 4
    146c:	15 96       	adiw	r26, 0x05	; 5
    146e:	1c 92       	st	X, r1
    1470:	6c a5       	ldd	r22, Y+44	; 0x2c
    1472:	7d a5       	ldd	r23, Y+45	; 0x2d
    1474:	8e a5       	ldd	r24, Y+46	; 0x2e
    1476:	9f a5       	ldd	r25, Y+47	; 0x2f
    1478:	a4 01       	movw	r20, r8
    147a:	93 01       	movw	r18, r6
    147c:	0e 94 34 10 	call	0x2068	; 0x2068 <plan_buffer_line>
    1480:	ed b7       	in	r30, 0x3d	; 61
    1482:	fe b7       	in	r31, 0x3e	; 62
    1484:	36 96       	adiw	r30, 0x06	; 6
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	fe bf       	out	0x3e, r31	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	ed bf       	out	0x3d, r30	; 61
    1490:	6b cf       	rjmp	.-298    	; 0x1368 <gc_execute_line+0x84c>

00001492 <theta>:


// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1492:	af 92       	push	r10
    1494:	bf 92       	push	r11
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	79 01       	movw	r14, r18
    14a4:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    14a6:	5f 77       	andi	r21, 0x7F	; 127
    14a8:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    14ac:	0e 94 26 24 	call	0x484c	; 0x484c <atan>
    14b0:	5b 01       	movw	r10, r22
    14b2:	6c 01       	movw	r12, r24
  if (y>0) {
    14b4:	c8 01       	movw	r24, r16
    14b6:	b7 01       	movw	r22, r14
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__gesf2>
    14c4:	18 16       	cp	r1, r24
    14c6:	5c f4       	brge	.+22     	; 0x14de <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
    14c8:	b5 01       	movw	r22, r10
    14ca:	c6 01       	movw	r24, r12
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
    14de:	c6 01       	movw	r24, r12
    14e0:	b5 01       	movw	r22, r10
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__gesf2>
    14ee:	18 16       	cp	r1, r24
    14f0:	5c f4       	brge	.+22     	; 0x1508 <theta+0x76>
    {
      return(M_PI-theta);
    14f2:	6b ed       	ldi	r22, 0xDB	; 219
    14f4:	7f e0       	ldi	r23, 0x0F	; 15
    14f6:	89 e4       	ldi	r24, 0x49	; 73
    14f8:	90 e4       	ldi	r25, 0x40	; 64
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1502:	5b 01       	movw	r10, r22
    1504:	6c 01       	movw	r12, r24
    1506:	e0 cf       	rjmp	.-64     	; 0x14c8 <theta+0x36>
    } else {
      return(-M_PI-theta);
    1508:	6b ed       	ldi	r22, 0xDB	; 219
    150a:	7f e0       	ldi	r23, 0x0F	; 15
    150c:	89 e4       	ldi	r24, 0x49	; 73
    150e:	90 ec       	ldi	r25, 0xC0	; 192
    1510:	a6 01       	movw	r20, r12
    1512:	95 01       	movw	r18, r10
    1514:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1518:	5b 01       	movw	r10, r22
    151a:	6c 01       	movw	r12, r24
    151c:	d5 cf       	rjmp	.-86     	; 0x14c8 <theta+0x36>

0000151e <main>:
// stepper interrupt ack to host
extern char ackHost;

int main(void)
{
  sp_init();        
    151e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <sp_init>
  settings_init();  
    1522:	0e 94 39 17 	call	0x2e72	; 0x2e72 <settings_init>
  plan_init();      
    1526:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <plan_init>
  st_init();        
    152a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <st_init>
  limits_init();
    152e:	0e 94 56 19 	call	0x32ac	; 0x32ac <limits_init>
  spindle_init();   
    1532:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <spindle_init>
  coolant_init();
    1536:	0e 94 3f 03 	call	0x67e	; 0x67e <coolant_init>
  atc_init();
    153a:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <atc_init>
  head_init();
    153e:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <head_init>
  vacuum_init();
    1542:	0e 94 01 21 	call	0x4202	; 0x4202 <vacuum_init>
  panel_init();
    1546:	0e 94 4d 20 	call	0x409a	; 0x409a <panel_init>
  gc_init();
    154a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    154e:	8f e0       	ldi	r24, 0x0F	; 15
    1550:	93 e0       	ldi	r25, 0x03	; 3
    1552:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <main+0x42>
	if( ackHost != 0 ) {
		serialWrite( ackHost );
		ackHost = 0;
	}

    sp_process(); // ... process the serial protocol
    1558:	0e 94 6d 14 	call	0x28da	; 0x28da <sp_process>

	process_panel(); // check the panel
    155c:	0e 94 ce 20 	call	0x419c	; 0x419c <process_panel>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    1560:	83 b7       	in	r24, 0x33	; 51
    1562:	81 60       	ori	r24, 0x01	; 1
    1564:	83 bf       	out	0x33, r24	; 51
    1566:	88 95       	sleep
    1568:	83 b7       	in	r24, 0x33	; 51
    156a:	8e 7f       	andi	r24, 0xFE	; 254
    156c:	83 bf       	out	0x33, r24	; 51
	
	if( ackHost != 0 ) {
    156e:	80 91 52 05 	lds	r24, 0x0552
    1572:	88 23       	and	r24, r24
    1574:	89 f3       	breq	.-30     	; 0x1558 <main+0x3a>
		serialWrite( ackHost );
    1576:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <serialWrite>
		ackHost = 0;
    157a:	10 92 52 05 	sts	0x0552, r1
    157e:	ec cf       	rjmp	.-40     	; 0x1558 <main+0x3a>

00001580 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    1580:	0e 94 8f 19 	call	0x331e	; 0x331e <st_go_home>
}
    1584:	08 95       	ret

00001586 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	7b 01       	movw	r14, r22
    1598:	8c 01       	movw	r16, r24
  st_synchronize();
    159a:	0e 94 0d 1a 	call	0x341a	; 0x341a <st_synchronize>
  _delay_ms(milliseconds);
    159e:	c8 01       	movw	r24, r16
    15a0:	b7 01       	movw	r22, r14
    15a2:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__floatunsisf>
    15a6:	5b 01       	movw	r10, r22
    15a8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a e7       	ldi	r20, 0x7A	; 122
    15b0:	55 e4       	ldi	r21, 0x45	; 69
    15b2:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    15b6:	7b 01       	movw	r14, r22
    15b8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	7c f1       	brlt	.+94     	; 0x1628 <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    15ca:	c8 01       	movw	r24, r16
    15cc:	b7 01       	movw	r22, r14
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__gesf2>
    15da:	18 16       	cp	r1, r24
    15dc:	ac f4       	brge	.+42     	; 0x1608 <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	c6 01       	movw	r24, r12
    15e0:	b5 01       	movw	r22, r10
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e2       	ldi	r20, 0x20	; 32
    15e8:	51 e4       	ldi	r21, 0x41	; 65
    15ea:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    15ee:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
    15f2:	cb 01       	movw	r24, r22
		while(__ticks)
    15f4:	67 2b       	or	r22, r23
    15f6:	79 f0       	breq	.+30     	; 0x1616 <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15f8:	20 e9       	ldi	r18, 0x90	; 144
    15fa:	31 e0       	ldi	r19, 0x01	; 1
    15fc:	f9 01       	movw	r30, r18
    15fe:	31 97       	sbiw	r30, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	d9 f7       	brne	.-10     	; 0x15fc <mc_dwell+0x76>
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1608:	c8 01       	movw	r24, r16
    160a:	b7 01       	movw	r22, r14
    160c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
    1610:	cb 01       	movw	r24, r22
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <mc_dwell+0x8c>
}
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	bf 90       	pop	r11
    1624:	af 90       	pop	r10
    1626:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	f1 cf       	rjmp	.-30     	; 0x1610 <mc_dwell+0x8a>

0000162e <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    162e:	fc 01       	movw	r30, r24
    1630:	60 91 a1 06 	lds	r22, 0x06A1
    1634:	70 91 a2 06 	lds	r23, 0x06A2
    1638:	80 91 a3 06 	lds	r24, 0x06A3
    163c:	90 91 a4 06 	lds	r25, 0x06A4
    1640:	21 a5       	ldd	r18, Z+41	; 0x29
    1642:	32 a5       	ldd	r19, Z+42	; 0x2a
    1644:	43 a5       	ldd	r20, Z+43	; 0x2b
    1646:	54 a5       	ldd	r21, Z+44	; 0x2c
    1648:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    164c:	08 95       	ret

0000164e <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    164e:	80 91 1e 05 	lds	r24, 0x051E
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	08 95       	ret

00001656 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1656:	20 91 0a 05 	lds	r18, 0x050A
    165a:	30 91 0b 05 	lds	r19, 0x050B
    165e:	80 91 0c 05 	lds	r24, 0x050C
    1662:	90 91 0d 05 	lds	r25, 0x050D
    1666:	28 17       	cp	r18, r24
    1668:	39 07       	cpc	r19, r25
    166a:	69 f0       	breq	.+26     	; 0x1686 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    166c:	80 91 0c 05 	lds	r24, 0x050C
    1670:	90 91 0d 05 	lds	r25, 0x050D
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	6a e0       	ldi	r22, 0x0A	; 10
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
    167e:	90 93 0d 05 	sts	0x050D, r25
    1682:	80 93 0c 05 	sts	0x050C, r24
    1686:	08 95       	ret

00001688 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1688:	20 91 0a 05 	lds	r18, 0x050A
    168c:	30 91 0b 05 	lds	r19, 0x050B
    1690:	80 91 0c 05 	lds	r24, 0x050C
    1694:	90 91 0d 05 	lds	r25, 0x050D
    1698:	28 17       	cp	r18, r24
    169a:	39 07       	cpc	r19, r25
    169c:	d1 f0       	breq	.+52     	; 0x16d2 <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    169e:	20 91 0c 05 	lds	r18, 0x050C
    16a2:	30 91 0d 05 	lds	r19, 0x050D
    16a6:	c9 01       	movw	r24, r18
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	ac 01       	movw	r20, r24
    16b6:	44 0f       	add	r20, r20
    16b8:	55 1f       	adc	r21, r21
    16ba:	44 0f       	add	r20, r20
    16bc:	55 1f       	adc	r21, r21
    16be:	44 0f       	add	r20, r20
    16c0:	55 1f       	adc	r21, r21
    16c2:	48 0f       	add	r20, r24
    16c4:	59 1f       	adc	r21, r25
    16c6:	42 0f       	add	r20, r18
    16c8:	53 1f       	adc	r21, r19
    16ca:	40 5d       	subi	r20, 0xD0	; 208
    16cc:	5d 4f       	sbci	r21, 0xFD	; 253
}
    16ce:	ca 01       	movw	r24, r20
    16d0:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    16d6:	ca 01       	movw	r24, r20
    16d8:	08 95       	ret

000016da <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    16da:	4f 92       	push	r4
    16dc:	5f 92       	push	r5
    16de:	6f 92       	push	r6
    16e0:	7f 92       	push	r7
    16e2:	8f 92       	push	r8
    16e4:	9f 92       	push	r9
    16e6:	af 92       	push	r10
    16e8:	bf 92       	push	r11
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	ec 01       	movw	r28, r24
    16fc:	4b 01       	movw	r8, r22
  if(!current) { return; }
    16fe:	61 15       	cp	r22, r1
    1700:	71 05       	cpc	r23, r1
    1702:	99 f0       	breq	.+38     	; 0x172a <planner_forward_pass_kernel+0x50>
  if(previous) {
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	89 f0       	breq	.+34     	; 0x172a <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1708:	e9 a8       	ldd	r14, Y+49	; 0x31
    170a:	fa a8       	ldd	r15, Y+50	; 0x32
    170c:	0b a9       	ldd	r16, Y+51	; 0x33
    170e:	1c a9       	ldd	r17, Y+52	; 0x34
    1710:	fb 01       	movw	r30, r22
    1712:	41 a8       	ldd	r4, Z+49	; 0x31
    1714:	52 a8       	ldd	r5, Z+50	; 0x32
    1716:	63 a8       	ldd	r6, Z+51	; 0x33
    1718:	74 a8       	ldd	r7, Z+52	; 0x34
    171a:	c8 01       	movw	r24, r16
    171c:	b7 01       	movw	r22, r14
    171e:	a3 01       	movw	r20, r6
    1720:	92 01       	movw	r18, r4
    1722:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
    1726:	88 23       	and	r24, r24
    1728:	8c f0       	brlt	.+34     	; 0x174c <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	9f 90       	pop	r9
    1740:	8f 90       	pop	r8
    1742:	7f 90       	pop	r7
    1744:	6f 90       	pop	r6
    1746:	5f 90       	pop	r5
    1748:	4f 90       	pop	r4
    174a:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    174c:	f4 01       	movw	r30, r8
    174e:	a1 a4       	ldd	r10, Z+41	; 0x29
    1750:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1752:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1754:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1756:	c8 01       	movw	r24, r16
    1758:	b7 01       	movw	r22, r14
    175a:	a6 01       	movw	r20, r12
    175c:	95 01       	movw	r18, r10
    175e:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1762:	9b 01       	movw	r18, r22
    1764:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1766:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    176a:	7b 01       	movw	r14, r22
    176c:	8c 01       	movw	r16, r24
    176e:	20 91 9d 06 	lds	r18, 0x069D
    1772:	30 91 9e 06 	lds	r19, 0x069E
    1776:	40 91 9f 06 	lds	r20, 0x069F
    177a:	50 91 a0 06 	lds	r21, 0x06A0
    177e:	50 58       	subi	r21, 0x80	; 128
    1780:	ca 01       	movw	r24, r20
    1782:	b9 01       	movw	r22, r18
    1784:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e7       	ldi	r20, 0x70	; 112
    178e:	52 e4       	ldi	r21, 0x42	; 66
    1790:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e7       	ldi	r20, 0x70	; 112
    179a:	52 ec       	ldi	r21, 0xC2	; 194
    179c:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    17a0:	2d a5       	ldd	r18, Y+45	; 0x2d
    17a2:	3e a5       	ldd	r19, Y+46	; 0x2e
    17a4:	4f a5       	ldd	r20, Y+47	; 0x2f
    17a6:	58 a9       	ldd	r21, Y+48	; 0x30
    17a8:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    17ac:	9b 01       	movw	r18, r22
    17ae:	ac 01       	movw	r20, r24
    17b0:	c8 01       	movw	r24, r16
    17b2:	b7 01       	movw	r22, r14
    17b4:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    17b8:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    17bc:	a6 01       	movw	r20, r12
    17be:	95 01       	movw	r18, r10
    17c0:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    17c4:	7b 01       	movw	r14, r22
    17c6:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    17c8:	c3 01       	movw	r24, r6
    17ca:	b2 01       	movw	r22, r4
    17cc:	a8 01       	movw	r20, r16
    17ce:	97 01       	movw	r18, r14
    17d0:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__gesf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	0c f0       	brlt	.+2      	; 0x17da <planner_forward_pass_kernel+0x100>
    17d8:	a8 cf       	rjmp	.-176    	; 0x172a <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    17da:	f4 01       	movw	r30, r8
    17dc:	e1 aa       	std	Z+49, r14	; 0x31
    17de:	f2 aa       	std	Z+50, r15	; 0x32
    17e0:	03 ab       	std	Z+51, r16	; 0x33
    17e2:	14 ab       	std	Z+52, r17	; 0x34
    17e4:	a2 cf       	rjmp	.-188    	; 0x172a <planner_forward_pass_kernel+0x50>

000017e6 <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    17f2:	80 91 0c 05 	lds	r24, 0x050C
    17f6:	90 91 0d 05 	lds	r25, 0x050D
    17fa:	48 2f       	mov	r20, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    17fc:	08 2f       	mov	r16, r24
    17fe:	11 27       	eor	r17, r17
    1800:	07 fd       	sbrc	r16, 7
    1802:	10 95       	com	r17
    1804:	80 91 0a 05 	lds	r24, 0x050A
    1808:	90 91 0b 05 	lds	r25, 0x050B
    180c:	08 17       	cp	r16, r24
    180e:	19 07       	cpc	r17, r25
    1810:	91 f1       	breq	.+100    	; 0x1876 <planner_forward_pass+0x90>
    1812:	ee 24       	eor	r14, r14
    1814:	ff 24       	eor	r15, r15
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	01 c0       	rjmp	.+2      	; 0x181e <planner_forward_pass+0x38>
    181c:	7e 01       	movw	r14, r28
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    181e:	89 e4       	ldi	r24, 0x49	; 73
    1820:	48 02       	muls	r20, r24
    1822:	e0 01       	movw	r28, r0
    1824:	11 24       	eor	r1, r1
    1826:	c0 5d       	subi	r28, 0xD0	; 208
    1828:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    182a:	c9 01       	movw	r24, r18
    182c:	b7 01       	movw	r22, r14
    182e:	ae 01       	movw	r20, r28
    1830:	0e 94 6d 0b 	call	0x16da	; 0x16da <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1834:	c8 01       	movw	r24, r16
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	6a e0       	ldi	r22, 0x0A	; 10
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
    1840:	48 2f       	mov	r20, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1842:	08 2f       	mov	r16, r24
    1844:	11 27       	eor	r17, r17
    1846:	07 fd       	sbrc	r16, 7
    1848:	10 95       	com	r17
    184a:	80 91 0a 05 	lds	r24, 0x050A
    184e:	90 91 0b 05 	lds	r25, 0x050B
    1852:	97 01       	movw	r18, r14
    1854:	08 17       	cp	r16, r24
    1856:	19 07       	cpc	r17, r25
    1858:	09 f7       	brne	.-62     	; 0x181c <planner_forward_pass+0x36>
    185a:	b7 01       	movw	r22, r14
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    185c:	cb 01       	movw	r24, r22
    185e:	be 01       	movw	r22, r28
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	0e 94 6d 0b 	call	0x16da	; 0x16da <planner_forward_pass_kernel>
}
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	ff 90       	pop	r15
    1872:	ef 90       	pop	r14
    1874:	08 95       	ret
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1876:	c0 e0       	ldi	r28, 0x00	; 0
    1878:	d0 e0       	ldi	r29, 0x00	; 0
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	ee cf       	rjmp	.-36     	; 0x185c <planner_forward_pass+0x76>

00001880 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1880:	2f 92       	push	r2
    1882:	3f 92       	push	r3
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	3b 01       	movw	r6, r22
    18a2:	4c 01       	movw	r8, r24
    18a4:	19 01       	movw	r2, r18
    18a6:	2a 01       	movw	r4, r20
	st_synchronize();
    18a8:	0e 94 0d 1a 	call	0x341a	; 0x341a <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    18ac:	c4 01       	movw	r24, r8
    18ae:	b3 01       	movw	r22, r6
    18b0:	20 91 7f 06 	lds	r18, 0x067F
    18b4:	30 91 80 06 	lds	r19, 0x0680
    18b8:	40 91 81 06 	lds	r20, 0x0681
    18bc:	50 91 82 06 	lds	r21, 0x0682
    18c0:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    18c4:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    18c8:	ee e0       	ldi	r30, 0x0E	; 14
    18ca:	8e 2e       	mov	r8, r30
    18cc:	e5 e0       	ldi	r30, 0x05	; 5
    18ce:	9e 2e       	mov	r9, r30
    18d0:	60 93 0e 05 	sts	0x050E, r22
    18d4:	70 93 0f 05 	sts	0x050F, r23
    18d8:	80 93 10 05 	sts	0x0510, r24
    18dc:	90 93 11 05 	sts	0x0511, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    18e0:	c2 01       	movw	r24, r4
    18e2:	b1 01       	movw	r22, r2
    18e4:	20 91 83 06 	lds	r18, 0x0683
    18e8:	30 91 84 06 	lds	r19, 0x0684
    18ec:	40 91 85 06 	lds	r20, 0x0685
    18f0:	50 91 86 06 	lds	r21, 0x0686
    18f4:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    18f8:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    18fc:	f4 01       	movw	r30, r8
    18fe:	34 96       	adiw	r30, 0x04	; 4
    1900:	60 93 12 05 	sts	0x0512, r22
    1904:	71 83       	std	Z+1, r23	; 0x01
    1906:	82 83       	std	Z+2, r24	; 0x02
    1908:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    190a:	c8 01       	movw	r24, r16
    190c:	b7 01       	movw	r22, r14
    190e:	20 91 87 06 	lds	r18, 0x0687
    1912:	30 91 88 06 	lds	r19, 0x0688
    1916:	40 91 89 06 	lds	r20, 0x0689
    191a:	50 91 8a 06 	lds	r21, 0x068A
    191e:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1922:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    1926:	f4 01       	movw	r30, r8
    1928:	38 96       	adiw	r30, 0x08	; 8
    192a:	60 93 16 05 	sts	0x0516, r22
    192e:	71 83       	std	Z+1, r23	; 0x01
    1930:	82 83       	std	Z+2, r24	; 0x02
    1932:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1934:	c6 01       	movw	r24, r12
    1936:	b5 01       	movw	r22, r10
    1938:	20 91 8b 06 	lds	r18, 0x068B
    193c:	30 91 8c 06 	lds	r19, 0x068C
    1940:	40 91 8d 06 	lds	r20, 0x068D
    1944:	50 91 8e 06 	lds	r21, 0x068E
    1948:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    194c:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    1950:	2c e0       	ldi	r18, 0x0C	; 12
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	82 0e       	add	r8, r18
    1956:	93 1e       	adc	r9, r19
    1958:	60 93 1a 05 	sts	0x051A, r22
    195c:	f4 01       	movw	r30, r8
    195e:	71 83       	std	Z+1, r23	; 0x01
    1960:	82 83       	std	Z+2, r24	; 0x02
    1962:	93 83       	std	Z+3, r25	; 0x03
}
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	cf 90       	pop	r12
    1970:	bf 90       	pop	r11
    1972:	af 90       	pop	r10
    1974:	9f 90       	pop	r9
    1976:	8f 90       	pop	r8
    1978:	7f 90       	pop	r7
    197a:	6f 90       	pop	r6
    197c:	5f 90       	pop	r5
    197e:	4f 90       	pop	r4
    1980:	3f 90       	pop	r3
    1982:	2f 90       	pop	r2
    1984:	08 95       	ret

00001986 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	80 91 1e 05 	lds	r24, 0x051E
    1992:	81 11       	cpse	r24, r1
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	20 97       	sbiw	r28, 0x00	; 0
    199a:	09 f0       	breq	.+2      	; 0x199e <plan_set_acceleration_manager_enabled+0x18>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	98 17       	cp	r25, r24
    19a0:	31 f0       	breq	.+12     	; 0x19ae <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    19a2:	0e 94 0d 1a 	call	0x341a	; 0x341a <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    19a6:	10 92 1e 05 	sts	0x051E, r1
    19aa:	cd 2b       	or	r28, r29
    19ac:	19 f4       	brne	.+6      	; 0x19b4 <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	80 93 1e 05 	sts	0x051E, r24
  }
}
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	08 95       	ret

000019c0 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    19c0:	10 92 0b 05 	sts	0x050B, r1
    19c4:	10 92 0a 05 	sts	0x050A, r1
  block_buffer_tail = 0;
    19c8:	10 92 0d 05 	sts	0x050D, r1
    19cc:	10 92 0c 05 	sts	0x050C, r1
  plan_set_acceleration_manager_enabled(TRUE);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    19d8:	80 e1       	ldi	r24, 0x10	; 16
    19da:	ee e0       	ldi	r30, 0x0E	; 14
    19dc:	f5 e0       	ldi	r31, 0x05	; 5
    19de:	df 01       	movw	r26, r30
    19e0:	1d 92       	st	X+, r1
    19e2:	8a 95       	dec	r24
    19e4:	e9 f7       	brne	.-6      	; 0x19e0 <plan_init+0x20>
}
    19e6:	08 95       	ret

000019e8 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    19e8:	2f 92       	push	r2
    19ea:	3f 92       	push	r3
    19ec:	4f 92       	push	r4
    19ee:	5f 92       	push	r5
    19f0:	6f 92       	push	r6
    19f2:	7f 92       	push	r7
    19f4:	8f 92       	push	r8
    19f6:	9f 92       	push	r9
    19f8:	af 92       	push	r10
    19fa:	bf 92       	push	r11
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <planner_reverse_pass_kernel+0x26>
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <planner_reverse_pass_kernel+0x28>
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	8c 01       	movw	r16, r24
    1a16:	7e 83       	std	Y+6, r23	; 0x06
    1a18:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1a1a:	67 2b       	or	r22, r23
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <planner_reverse_pass_kernel+0x38>
    1a1e:	a3 c0       	rjmp	.+326    	; 0x1b66 <planner_reverse_pass_kernel+0x17e>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1a20:	41 15       	cp	r20, r1
    1a22:	51 05       	cpc	r21, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <planner_reverse_pass_kernel+0x40>
    1a26:	19 c1       	rjmp	.+562    	; 0x1c5a <planner_reverse_pass_kernel+0x272>
    exit_factor = next->entry_factor;
    1a28:	da 01       	movw	r26, r20
    1a2a:	d1 96       	adiw	r26, 0x31	; 49
    1a2c:	8d 91       	ld	r24, X+
    1a2e:	9d 91       	ld	r25, X+
    1a30:	0d 90       	ld	r0, X+
    1a32:	bc 91       	ld	r27, X
    1a34:	a0 2d       	mov	r26, r0
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	ab 83       	std	Y+3, r26	; 0x03
    1a3c:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1a3e:	01 15       	cp	r16, r1
    1a40:	11 05       	cpc	r17, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <planner_reverse_pass_kernel+0x5e>
    1a44:	03 c1       	rjmp	.+518    	; 0x1c4c <planner_reverse_pass_kernel+0x264>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1a46:	f8 01       	movw	r30, r16
    1a48:	61 8d       	ldd	r22, Z+25	; 0x19
    1a4a:	72 8d       	ldd	r23, Z+26	; 0x1a
    1a4c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a4e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1a50:	ad 81       	ldd	r26, Y+5	; 0x05
    1a52:	be 81       	ldd	r27, Y+6	; 0x06
    1a54:	59 96       	adiw	r26, 0x19	; 25
    1a56:	2d 91       	ld	r18, X+
    1a58:	3d 91       	ld	r19, X+
    1a5a:	4d 91       	ld	r20, X+
    1a5c:	5c 91       	ld	r21, X
    1a5e:	5c 97       	sbiw	r26, 0x1c	; 28
    1a60:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1a64:	9b 01       	movw	r18, r22
    1a66:	ac 01       	movw	r20, r24
    1a68:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1a6c:	1b 01       	movw	r2, r22
    1a6e:	2c 01       	movw	r4, r24
    1a70:	f8 01       	movw	r30, r16
    1a72:	65 8d       	ldd	r22, Z+29	; 0x1d
    1a74:	76 8d       	ldd	r23, Z+30	; 0x1e
    1a76:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a78:	90 a1       	ldd	r25, Z+32	; 0x20
    1a7a:	ad 81       	ldd	r26, Y+5	; 0x05
    1a7c:	be 81       	ldd	r27, Y+6	; 0x06
    1a7e:	5d 96       	adiw	r26, 0x1d	; 29
    1a80:	2d 91       	ld	r18, X+
    1a82:	3d 91       	ld	r19, X+
    1a84:	4d 91       	ld	r20, X+
    1a86:	5c 91       	ld	r21, X
    1a88:	90 97       	sbiw	r26, 0x20	; 32
    1a8a:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
    1a92:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1a96:	3b 01       	movw	r6, r22
    1a98:	4c 01       	movw	r8, r24
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	61 a1       	ldd	r22, Z+33	; 0x21
    1a9e:	72 a1       	ldd	r23, Z+34	; 0x22
    1aa0:	83 a1       	ldd	r24, Z+35	; 0x23
    1aa2:	94 a1       	ldd	r25, Z+36	; 0x24
    1aa4:	ad 81       	ldd	r26, Y+5	; 0x05
    1aa6:	be 81       	ldd	r27, Y+6	; 0x06
    1aa8:	91 96       	adiw	r26, 0x21	; 33
    1aaa:	2d 91       	ld	r18, X+
    1aac:	3d 91       	ld	r19, X+
    1aae:	4d 91       	ld	r20, X+
    1ab0:	5c 91       	ld	r21, X
    1ab2:	94 97       	sbiw	r26, 0x24	; 36
    1ab4:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1ab8:	9b 01       	movw	r18, r22
    1aba:	ac 01       	movw	r20, r24
    1abc:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1ac0:	5b 01       	movw	r10, r22
    1ac2:	6c 01       	movw	r12, r24
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	65 a1       	ldd	r22, Z+37	; 0x25
    1ac8:	76 a1       	ldd	r23, Z+38	; 0x26
    1aca:	87 a1       	ldd	r24, Z+39	; 0x27
    1acc:	90 a5       	ldd	r25, Z+40	; 0x28
    1ace:	ad 81       	ldd	r26, Y+5	; 0x05
    1ad0:	be 81       	ldd	r27, Y+6	; 0x06
    1ad2:	95 96       	adiw	r26, 0x25	; 37
    1ad4:	2d 91       	ld	r18, X+
    1ad6:	3d 91       	ld	r19, X+
    1ad8:	4d 91       	ld	r20, X+
    1ada:	5c 91       	ld	r21, X
    1adc:	98 97       	sbiw	r26, 0x28	; 40
    1ade:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1aea:	7b 01       	movw	r14, r22
    1aec:	8c 01       	movw	r16, r24
    1aee:	c2 01       	movw	r24, r4
    1af0:	b1 01       	movw	r22, r2
    1af2:	a4 01       	movw	r20, r8
    1af4:	93 01       	movw	r18, r6
    1af6:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1afa:	a6 01       	movw	r20, r12
    1afc:	95 01       	movw	r18, r10
    1afe:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1b02:	a8 01       	movw	r20, r16
    1b04:	97 01       	movw	r18, r14
    1b06:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1b0a:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <sqrt>
    1b0e:	5b 01       	movw	r10, r22
    1b10:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1b12:	e0 90 a1 06 	lds	r14, 0x06A1
    1b16:	f0 90 a2 06 	lds	r15, 0x06A2
    1b1a:	00 91 a3 06 	lds	r16, 0x06A3
    1b1e:	10 91 a4 06 	lds	r17, 0x06A4
    1b22:	c8 01       	movw	r24, r16
    1b24:	b7 01       	movw	r22, r14
    1b26:	a6 01       	movw	r20, r12
    1b28:	95 01       	movw	r18, r10
    1b2a:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
    1b2e:	87 fd       	sbrc	r24, 7
    1b30:	33 c0       	rjmp	.+102    	; 0x1b98 <planner_reverse_pass_kernel+0x1b0>
    1b32:	0f 2e       	mov	r0, r31
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	6f 2e       	mov	r6, r31
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	7f 2e       	mov	r7, r31
    1b3c:	f0 e8       	ldi	r31, 0x80	; 128
    1b3e:	8f 2e       	mov	r8, r31
    1b40:	ff e3       	ldi	r31, 0x3F	; 63
    1b42:	9f 2e       	mov	r9, r31
    1b44:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1b46:	c4 01       	movw	r24, r8
    1b48:	b3 01       	movw	r22, r6
    1b4a:	29 81       	ldd	r18, Y+1	; 0x01
    1b4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b4e:	4b 81       	ldd	r20, Y+3	; 0x03
    1b50:	5c 81       	ldd	r21, Y+4	; 0x04
    1b52:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__gesf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	44 f1       	brlt	.+80     	; 0x1baa <planner_reverse_pass_kernel+0x1c2>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1b5a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b5c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b5e:	61 aa       	std	Z+49, r6	; 0x31
    1b60:	72 aa       	std	Z+50, r7	; 0x32
    1b62:	83 aa       	std	Z+51, r8	; 0x33
    1b64:	94 aa       	std	Z+52, r9	; 0x34
}
    1b66:	26 96       	adiw	r28, 0x06	; 6
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	9f 90       	pop	r9
    1b88:	8f 90       	pop	r8
    1b8a:	7f 90       	pop	r7
    1b8c:	6f 90       	pop	r6
    1b8e:	5f 90       	pop	r5
    1b90:	4f 90       	pop	r4
    1b92:	3f 90       	pop	r3
    1b94:	2f 90       	pop	r2
    1b96:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1b98:	c8 01       	movw	r24, r16
    1b9a:	b7 01       	movw	r22, r14
    1b9c:	a6 01       	movw	r20, r12
    1b9e:	95 01       	movw	r18, r10
    1ba0:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    1ba4:	3b 01       	movw	r6, r22
    1ba6:	4c 01       	movw	r8, r24
    1ba8:	ce cf       	rjmp	.-100    	; 0x1b46 <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1baa:	ed 81       	ldd	r30, Y+5	; 0x05
    1bac:	fe 81       	ldd	r31, Y+6	; 0x06
    1bae:	a1 a4       	ldd	r10, Z+41	; 0x29
    1bb0:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1bb2:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1bb4:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1bb6:	c6 01       	movw	r24, r12
    1bb8:	b5 01       	movw	r22, r10
    1bba:	29 81       	ldd	r18, Y+1	; 0x01
    1bbc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bbe:	4b 81       	ldd	r20, Y+3	; 0x03
    1bc0:	5c 81       	ldd	r21, Y+4	; 0x04
    1bc2:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1bca:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1bce:	7b 01       	movw	r14, r22
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	20 91 9d 06 	lds	r18, 0x069D
    1bd6:	30 91 9e 06 	lds	r19, 0x069E
    1bda:	40 91 9f 06 	lds	r20, 0x069F
    1bde:	50 91 a0 06 	lds	r21, 0x06A0
    1be2:	50 58       	subi	r21, 0x80	; 128
    1be4:	ca 01       	movw	r24, r20
    1be6:	b9 01       	movw	r22, r18
    1be8:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e7       	ldi	r20, 0x70	; 112
    1bf2:	52 e4       	ldi	r21, 0x42	; 66
    1bf4:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e7       	ldi	r20, 0x70	; 112
    1bfe:	52 ec       	ldi	r21, 0xC2	; 194
    1c00:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1c04:	ad 81       	ldd	r26, Y+5	; 0x05
    1c06:	be 81       	ldd	r27, Y+6	; 0x06
    1c08:	9d 96       	adiw	r26, 0x2d	; 45
    1c0a:	2d 91       	ld	r18, X+
    1c0c:	3d 91       	ld	r19, X+
    1c0e:	4d 91       	ld	r20, X+
    1c10:	5c 91       	ld	r21, X
    1c12:	d0 97       	sbiw	r26, 0x30	; 48
    1c14:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1c18:	9b 01       	movw	r18, r22
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	c8 01       	movw	r24, r16
    1c1e:	b7 01       	movw	r22, r14
    1c20:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1c24:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1c28:	a6 01       	movw	r20, r12
    1c2a:	95 01       	movw	r18, r10
    1c2c:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    1c30:	7b 01       	movw	r14, r22
    1c32:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1c34:	c4 01       	movw	r24, r8
    1c36:	b3 01       	movw	r22, r6
    1c38:	a8 01       	movw	r20, r16
    1c3a:	97 01       	movw	r18, r14
    1c3c:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__gesf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	0c f0       	brlt	.+2      	; 0x1c46 <planner_reverse_pass_kernel+0x25e>
    1c44:	8a cf       	rjmp	.-236    	; 0x1b5a <planner_reverse_pass_kernel+0x172>
    1c46:	37 01       	movw	r6, r14
    1c48:	48 01       	movw	r8, r16
    1c4a:	87 cf       	rjmp	.-242    	; 0x1b5a <planner_reverse_pass_kernel+0x172>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	0e 94 17 0b 	call	0x162e	; 0x162e <factor_for_safe_speed>
    1c54:	3b 01       	movw	r6, r22
    1c56:	4c 01       	movw	r8, r24
    1c58:	80 cf       	rjmp	.-256    	; 0x1b5a <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	0e 94 17 0b 	call	0x162e	; 0x162e <factor_for_safe_speed>
    1c62:	69 83       	std	Y+1, r22	; 0x01
    1c64:	7a 83       	std	Y+2, r23	; 0x02
    1c66:	8b 83       	std	Y+3, r24	; 0x03
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	e9 ce       	rjmp	.-558    	; 0x1a3e <planner_reverse_pass_kernel+0x56>

00001c6c <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ff 92       	push	r15
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1c7a:	80 91 0a 05 	lds	r24, 0x050A
    1c7e:	90 91 0b 05 	lds	r25, 0x050B
    1c82:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1c84:	20 91 0c 05 	lds	r18, 0x050C
    1c88:	30 91 0d 05 	lds	r19, 0x050D
    1c8c:	99 27       	eor	r25, r25
    1c8e:	87 fd       	sbrc	r24, 7
    1c90:	90 95       	com	r25
    1c92:	82 17       	cp	r24, r18
    1c94:	93 07       	cpc	r25, r19
    1c96:	b9 f1       	breq	.+110    	; 0x1d06 <planner_reverse_pass+0x9a>
    1c98:	00 e0       	ldi	r16, 0x00	; 0
    1c9a:	10 e0       	ldi	r17, 0x00	; 0
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	19 c0       	rjmp	.+50     	; 0x1cd4 <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1ca2:	8f 2d       	mov	r24, r15
    1ca4:	99 e4       	ldi	r25, 0x49	; 73
    1ca6:	89 02       	muls	r24, r25
    1ca8:	b0 01       	movw	r22, r0
    1caa:	11 24       	eor	r1, r1
    1cac:	cf 2c       	mov	r12, r15
    1cae:	dd 24       	eor	r13, r13
    1cb0:	c7 fc       	sbrc	r12, 7
    1cb2:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1cb4:	eb 01       	movw	r28, r22
    1cb6:	c0 5d       	subi	r28, 0xD0	; 208
    1cb8:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1cba:	ce 01       	movw	r24, r28
    1cbc:	b8 01       	movw	r22, r16
    1cbe:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1cc2:	80 91 0c 05 	lds	r24, 0x050C
    1cc6:	90 91 0d 05 	lds	r25, 0x050D
    1cca:	a8 01       	movw	r20, r16
    1ccc:	8c 15       	cp	r24, r12
    1cce:	9d 05       	cpc	r25, r13
    1cd0:	61 f0       	breq	.+24     	; 0x1cea <planner_reverse_pass+0x7e>
    1cd2:	8e 01       	movw	r16, r28
    block_index--;
    1cd4:	fa 94       	dec	r15
    if(block_index < 0) {
    1cd6:	f7 fe       	sbrs	r15, 7
    1cd8:	e4 cf       	rjmp	.-56     	; 0x1ca2 <planner_reverse_pass+0x36>
    1cda:	a9 e0       	ldi	r26, 0x09	; 9
    1cdc:	fa 2e       	mov	r15, r26
    1cde:	61 e9       	ldi	r22, 0x91	; 145
    1ce0:	72 e0       	ldi	r23, 0x02	; 2
    1ce2:	f9 e0       	ldi	r31, 0x09	; 9
    1ce4:	cf 2e       	mov	r12, r31
    1ce6:	d1 2c       	mov	r13, r1
    1ce8:	e5 cf       	rjmp	.-54     	; 0x1cb4 <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1cea:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	be 01       	movw	r22, r28
    1cf2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <planner_reverse_pass_kernel>
}
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d06:	c0 e0       	ldi	r28, 0x00	; 0
    1d08:	d0 e0       	ldi	r29, 0x00	; 0
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	ee cf       	rjmp	.-36     	; 0x1cec <planner_reverse_pass+0x80>

00001d10 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1d10:	2f 92       	push	r2
    1d12:	3f 92       	push	r3
    1d14:	4f 92       	push	r4
    1d16:	5f 92       	push	r5
    1d18:	6f 92       	push	r6
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	62 97       	sbiw	r28, 0x12	; 18
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	9a 8b       	std	Y+18, r25	; 0x12
    1d46:	89 8b       	std	Y+17, r24	; 0x11
    1d48:	6a 01       	movw	r12, r20
    1d4a:	7b 01       	movw	r14, r22
    1d4c:	18 01       	movw	r2, r16
    1d4e:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1d50:	fc 01       	movw	r30, r24
    1d52:	65 89       	ldd	r22, Z+21	; 0x15
    1d54:	76 89       	ldd	r23, Z+22	; 0x16
    1d56:	87 89       	ldd	r24, Z+23	; 0x17
    1d58:	90 8d       	ldd	r25, Z+24	; 0x18
    1d5a:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__floatunsisf>
    1d5e:	3b 01       	movw	r6, r22
    1d60:	4c 01       	movw	r8, r24
    1d62:	a7 01       	movw	r20, r14
    1d64:	96 01       	movw	r18, r12
    1d66:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1d6a:	0e 94 4e 24 	call	0x489c	; 0x489c <ceil>
    1d6e:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
    1d72:	7b 01       	movw	r14, r22
    1d74:	8c 01       	movw	r16, r24
    1d76:	e9 89       	ldd	r30, Y+17	; 0x11
    1d78:	fa 89       	ldd	r31, Y+18	; 0x12
    1d7a:	65 ab       	std	Z+53, r22	; 0x35
    1d7c:	76 ab       	std	Z+54, r23	; 0x36
    1d7e:	87 ab       	std	Z+55, r24	; 0x37
    1d80:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1d82:	c4 01       	movw	r24, r8
    1d84:	b3 01       	movw	r22, r6
    1d86:	a2 01       	movw	r20, r4
    1d88:	91 01       	movw	r18, r2
    1d8a:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1d8e:	0e 94 4e 24 	call	0x489c	; 0x489c <ceil>
    1d92:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
    1d96:	1b 01       	movw	r2, r22
    1d98:	2c 01       	movw	r4, r24
    1d9a:	e9 89       	ldd	r30, Y+17	; 0x11
    1d9c:	fa 89       	ldd	r31, Y+18	; 0x12
    1d9e:	61 af       	std	Z+57, r22	; 0x39
    1da0:	72 af       	std	Z+58, r23	; 0x3a
    1da2:	83 af       	std	Z+59, r24	; 0x3b
    1da4:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1da6:	fd 96       	adiw	r30, 0x3d	; 61
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	fd 97       	sbiw	r30, 0x3d	; 61
    1db2:	fa 8b       	std	Y+18, r31	; 0x12
    1db4:	e9 8b       	std	Y+17, r30	; 0x11
    1db6:	28 e2       	ldi	r18, 0x28	; 40
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__mulsi3>
    1dc2:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e7       	ldi	r20, 0x70	; 112
    1dcc:	52 e4       	ldi	r21, 0x42	; 66
    1dce:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1dd2:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
    1dd6:	5b 01       	movw	r10, r22
    1dd8:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1dda:	c8 01       	movw	r24, r16
    1ddc:	b7 01       	movw	r22, r14
    1dde:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__floatunsisf>
    1de2:	7b 01       	movw	r14, r22
    1de4:	8c 01       	movw	r16, r24
    1de6:	c6 01       	movw	r24, r12
    1de8:	b5 01       	movw	r22, r10
    1dea:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    1dee:	6d 83       	std	Y+5, r22	; 0x05
    1df0:	7e 83       	std	Y+6, r23	; 0x06
    1df2:	8f 83       	std	Y+7, r24	; 0x07
    1df4:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1df6:	c4 01       	movw	r24, r8
    1df8:	b3 01       	movw	r22, r6
    1dfa:	a4 01       	movw	r20, r8
    1dfc:	93 01       	movw	r18, r6
    1dfe:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1e02:	3b 01       	movw	r6, r22
    1e04:	4c 01       	movw	r8, r24
    1e06:	c8 01       	movw	r24, r16
    1e08:	b7 01       	movw	r22, r14
    1e0a:	a8 01       	movw	r20, r16
    1e0c:	97 01       	movw	r18, r14
    1e0e:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1e12:	69 87       	std	Y+9, r22	; 0x09
    1e14:	7a 87       	std	Y+10, r23	; 0x0a
    1e16:	8b 87       	std	Y+11, r24	; 0x0b
    1e18:	9c 87       	std	Y+12, r25	; 0x0c
    1e1a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e1c:	7e 81       	ldd	r23, Y+6	; 0x06
    1e1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e20:	98 85       	ldd	r25, Y+8	; 0x08
    1e22:	9b 01       	movw	r18, r22
    1e24:	ac 01       	movw	r20, r24
    1e26:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1e2a:	6d 87       	std	Y+13, r22	; 0x0d
    1e2c:	7e 87       	std	Y+14, r23	; 0x0e
    1e2e:	8f 87       	std	Y+15, r24	; 0x0f
    1e30:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1e32:	c4 01       	movw	r24, r8
    1e34:	b3 01       	movw	r22, r6
    1e36:	29 85       	ldd	r18, Y+9	; 0x09
    1e38:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e3a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e3c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e3e:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1e42:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e44:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e46:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e48:	58 89       	ldd	r21, Y+16	; 0x10
    1e4a:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    1e4e:	0e 94 4e 24 	call	0x489c	; 0x489c <ceil>
    1e52:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1e5e:	c2 01       	movw	r24, r4
    1e60:	b1 01       	movw	r22, r2
    1e62:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__floatunsisf>
    1e66:	9b 01       	movw	r18, r22
    1e68:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1e6a:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1e6e:	1b 01       	movw	r2, r22
    1e70:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1e72:	a4 01       	movw	r20, r8
    1e74:	93 01       	movw	r18, r6
    1e76:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1e7a:	7b 01       	movw	r14, r22
    1e7c:	8c 01       	movw	r16, r24
    1e7e:	d0 94       	com	r13
    1e80:	c0 94       	com	r12
    1e82:	b0 94       	com	r11
    1e84:	a0 94       	com	r10
    1e86:	a1 1c       	adc	r10, r1
    1e88:	b1 1c       	adc	r11, r1
    1e8a:	c1 1c       	adc	r12, r1
    1e8c:	d1 1c       	adc	r13, r1
    1e8e:	c6 01       	movw	r24, r12
    1e90:	b5 01       	movw	r22, r10
    1e92:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    1e96:	9b 01       	movw	r18, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1e9e:	9b 01       	movw	r18, r22
    1ea0:	ac 01       	movw	r20, r24
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	b7 01       	movw	r22, r14
    1ea6:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    1eaa:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1eae:	e9 89       	ldd	r30, Y+17	; 0x11
    1eb0:	fa 89       	ldd	r31, Y+18	; 0x12
    1eb2:	a1 88       	ldd	r10, Z+17	; 0x11
    1eb4:	b2 88       	ldd	r11, Z+18	; 0x12
    1eb6:	c3 88       	ldd	r12, Z+19	; 0x13
    1eb8:	d4 88       	ldd	r13, Z+20	; 0x14
    1eba:	86 01       	movw	r16, r12
    1ebc:	75 01       	movw	r14, r10
    1ebe:	29 81       	ldd	r18, Y+1	; 0x01
    1ec0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ec2:	4b 81       	ldd	r20, Y+3	; 0x03
    1ec4:	5c 81       	ldd	r21, Y+4	; 0x04
    1ec6:	e2 1a       	sub	r14, r18
    1ec8:	f3 0a       	sbc	r15, r19
    1eca:	04 0b       	sbc	r16, r20
    1ecc:	15 0b       	sbc	r17, r21
    1ece:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
    1ed2:	a8 01       	movw	r20, r16
    1ed4:	97 01       	movw	r18, r14
    1ed6:	26 1b       	sub	r18, r22
    1ed8:	37 0b       	sbc	r19, r23
    1eda:	48 0b       	sbc	r20, r24
    1edc:	59 0b       	sbc	r21, r25
    1ede:	da 01       	movw	r26, r20
    1ee0:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1ee2:	57 fd       	sbrc	r21, 7
    1ee4:	30 c0       	rjmp	.+96     	; 0x1f46 <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1ee6:	49 89       	ldd	r20, Y+17	; 0x11
    1ee8:	5a 89       	ldd	r21, Y+18	; 0x12
    1eea:	4f 5b       	subi	r20, 0xBF	; 191
    1eec:	5f 4f       	sbci	r21, 0xFF	; 255
    1eee:	fa 01       	movw	r30, r20
    1ef0:	29 81       	ldd	r18, Y+1	; 0x01
    1ef2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ef6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ef8:	21 93       	st	Z+, r18
    1efa:	31 93       	st	Z+, r19
    1efc:	41 93       	st	Z+, r20
    1efe:	51 93       	st	Z+, r21
    1f00:	fa 8b       	std	Y+18, r31	; 0x12
    1f02:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	a4 1f       	adc	r26, r20
    1f0a:	b5 1f       	adc	r27, r21
    1f0c:	80 83       	st	Z, r24
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	a2 83       	std	Z+2, r26	; 0x02
    1f12:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1f14:	62 96       	adiw	r28, 0x12	; 18
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	df 90       	pop	r13
    1f2e:	cf 90       	pop	r12
    1f30:	bf 90       	pop	r11
    1f32:	af 90       	pop	r10
    1f34:	9f 90       	pop	r9
    1f36:	8f 90       	pop	r8
    1f38:	7f 90       	pop	r7
    1f3a:	6f 90       	pop	r6
    1f3c:	5f 90       	pop	r5
    1f3e:	4f 90       	pop	r4
    1f40:	3f 90       	pop	r3
    1f42:	2f 90       	pop	r2
    1f44:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    1f46:	c6 01       	movw	r24, r12
    1f48:	b5 01       	movw	r22, r10
    1f4a:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    1f4e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f50:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f52:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f54:	58 89       	ldd	r21, Y+16	; 0x10
    1f56:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1f5a:	29 85       	ldd	r18, Y+9	; 0x09
    1f5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f60:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f62:	0e 94 c1 23 	call	0x4782	; 0x4782 <__subsf3>
    1f66:	9b 01       	movw	r18, r22
    1f68:	ac 01       	movw	r20, r24
    1f6a:	c2 01       	movw	r24, r4
    1f6c:	b1 01       	movw	r22, r2
    1f6e:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    1f72:	7b 01       	movw	r14, r22
    1f74:	8c 01       	movw	r16, r24
    1f76:	6d 81       	ldd	r22, Y+5	; 0x05
    1f78:	7e 81       	ldd	r23, Y+6	; 0x06
    1f7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7c:	98 85       	ldd	r25, Y+8	; 0x08
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	50 e4       	ldi	r21, 0x40	; 64
    1f86:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    1f8a:	9b 01       	movw	r18, r22
    1f8c:	ac 01       	movw	r20, r24
    1f8e:	c8 01       	movw	r24, r16
    1f90:	b7 01       	movw	r22, r14
    1f92:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    1f96:	0e 94 4e 24 	call	0x489c	; 0x489c <ceil>
    1f9a:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
    1f9e:	69 83       	std	Y+1, r22	; 0x01
    1fa0:	7a 83       	std	Y+2, r23	; 0x02
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	9c 83       	std	Y+4, r25	; 0x04
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a0 e0       	ldi	r26, 0x00	; 0
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	9b cf       	rjmp	.-202    	; 0x1ee6 <calculate_trapezoid_for_block+0x1d6>

00001fb0 <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1fbc:	80 91 0c 05 	lds	r24, 0x050C
    1fc0:	90 91 0d 05 	lds	r25, 0x050D
    1fc4:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1fc6:	e8 2e       	mov	r14, r24
    1fc8:	ff 24       	eor	r15, r15
    1fca:	e7 fc       	sbrc	r14, 7
    1fcc:	f0 94       	com	r15
    1fce:	80 91 0a 05 	lds	r24, 0x050A
    1fd2:	90 91 0b 05 	lds	r25, 0x050B
    1fd6:	e8 16       	cp	r14, r24
    1fd8:	f9 06       	cpc	r15, r25
    1fda:	e1 f1       	breq	.+120    	; 0x2054 <planner_recalculate_trapezoids+0xa4>
    1fdc:	e0 e0       	ldi	r30, 0x00	; 0
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	01 c0       	rjmp	.+2      	; 0x1fe4 <planner_recalculate_trapezoids+0x34>
    1fe2:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    1fe4:	89 e4       	ldi	r24, 0x49	; 73
    1fe6:	28 02       	muls	r18, r24
    1fe8:	e0 01       	movw	r28, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	c0 5d       	subi	r28, 0xD0	; 208
    1fee:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    1ff0:	30 97       	sbiw	r30, 0x00	; 0
    1ff2:	59 f0       	breq	.+22     	; 0x200a <planner_recalculate_trapezoids+0x5a>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1ff4:	41 a9       	ldd	r20, Z+49	; 0x31
    1ff6:	52 a9       	ldd	r21, Z+50	; 0x32
    1ff8:	63 a9       	ldd	r22, Z+51	; 0x33
    1ffa:	74 a9       	ldd	r23, Z+52	; 0x34
    1ffc:	09 a9       	ldd	r16, Y+49	; 0x31
    1ffe:	1a a9       	ldd	r17, Y+50	; 0x32
    2000:	2b a9       	ldd	r18, Y+51	; 0x33
    2002:	3c a9       	ldd	r19, Y+52	; 0x34
    2004:	cf 01       	movw	r24, r30
    2006:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    200a:	c7 01       	movw	r24, r14
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	6a e0       	ldi	r22, 0x0A	; 10
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
    2016:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2018:	e8 2e       	mov	r14, r24
    201a:	ff 24       	eor	r15, r15
    201c:	e7 fc       	sbrc	r14, 7
    201e:	f0 94       	com	r15
    2020:	80 91 0a 05 	lds	r24, 0x050A
    2024:	90 91 0b 05 	lds	r25, 0x050B
    2028:	e8 16       	cp	r14, r24
    202a:	f9 06       	cpc	r15, r25
    202c:	d1 f6       	brne	.-76     	; 0x1fe2 <planner_recalculate_trapezoids+0x32>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    202e:	ce 01       	movw	r24, r28
    2030:	0e 94 17 0b 	call	0x162e	; 0x162e <factor_for_safe_speed>
    2034:	8b 01       	movw	r16, r22
    2036:	9c 01       	movw	r18, r24
    2038:	49 a9       	ldd	r20, Y+49	; 0x31
    203a:	5a a9       	ldd	r21, Y+50	; 0x32
    203c:	6b a9       	ldd	r22, Y+51	; 0x33
    203e:	7c a9       	ldd	r23, Y+52	; 0x34
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <calculate_trapezoid_for_block>
}
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2054:	c0 e0       	ldi	r28, 0x00	; 0
    2056:	d0 e0       	ldi	r29, 0x00	; 0
    2058:	ea cf       	rjmp	.-44     	; 0x202e <planner_recalculate_trapezoids+0x7e>

0000205a <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    205a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <planner_reverse_pass>
  planner_forward_pass();
    205e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <planner_forward_pass>
  planner_recalculate_trapezoids();
    2062:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <planner_recalculate_trapezoids>
}
    2066:	08 95       	ret

00002068 <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    2068:	2f 92       	push	r2
    206a:	3f 92       	push	r3
    206c:	4f 92       	push	r4
    206e:	5f 92       	push	r5
    2070:	6f 92       	push	r6
    2072:	7f 92       	push	r7
    2074:	8f 92       	push	r8
    2076:	9f 92       	push	r9
    2078:	af 92       	push	r10
    207a:	bf 92       	push	r11
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	cc 54       	subi	r28, 0x4C	; 76
    2092:	d0 40       	sbci	r29, 0x00	; 0
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	3b 01       	movw	r6, r22
    20a0:	4c 01       	movw	r8, r24
    20a2:	23 96       	adiw	r28, 0x03	; 3
    20a4:	2c af       	std	Y+60, r18	; 0x3c
    20a6:	3d af       	std	Y+61, r19	; 0x3d
    20a8:	4e af       	std	Y+62, r20	; 0x3e
    20aa:	5f af       	std	Y+63, r21	; 0x3f
    20ac:	23 97       	sbiw	r28, 0x03	; 3
    20ae:	27 96       	adiw	r28, 0x07	; 7
    20b0:	ec ae       	std	Y+60, r14	; 0x3c
    20b2:	fd ae       	std	Y+61, r15	; 0x3d
    20b4:	0e af       	std	Y+62, r16	; 0x3e
    20b6:	1f af       	std	Y+63, r17	; 0x3f
    20b8:	27 97       	sbiw	r28, 0x07	; 7
	printPgmString(PSTR("z = "));
	printFloat( z );
	printPgmString(PSTR("\r\n"));
#endif
  
  if( gHomed == FALSE ) 
    20ba:	80 91 53 05 	lds	r24, 0x0553
    20be:	88 23       	and	r24, r24
    20c0:	d1 f4       	brne	.+52     	; 0x20f6 <plan_buffer_line+0x8e>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    20c2:	c4 5b       	subi	r28, 0xB4	; 180
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	df 90       	pop	r13
    20de:	cf 90       	pop	r12
    20e0:	bf 90       	pop	r11
    20e2:	af 90       	pop	r10
    20e4:	9f 90       	pop	r9
    20e6:	8f 90       	pop	r8
    20e8:	7f 90       	pop	r7
    20ea:	6f 90       	pop	r6
    20ec:	5f 90       	pop	r5
    20ee:	4f 90       	pop	r4
    20f0:	3f 90       	pop	r3
    20f2:	2f 90       	pop	r2
    20f4:	08 95       	ret
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    20f6:	c4 01       	movw	r24, r8
    20f8:	b3 01       	movw	r22, r6
    20fa:	20 91 7f 06 	lds	r18, 0x067F
    20fe:	30 91 80 06 	lds	r19, 0x0680
    2102:	40 91 81 06 	lds	r20, 0x0681
    2106:	50 91 82 06 	lds	r21, 0x0682
    210a:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    210e:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    2112:	7b 01       	movw	r14, r22
    2114:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2116:	20 91 83 06 	lds	r18, 0x0683
    211a:	30 91 84 06 	lds	r19, 0x0684
    211e:	40 91 85 06 	lds	r20, 0x0685
    2122:	50 91 86 06 	lds	r21, 0x0686
    2126:	2b af       	std	Y+59, r18	; 0x3b
    2128:	3c af       	std	Y+60, r19	; 0x3c
    212a:	4d af       	std	Y+61, r20	; 0x3d
    212c:	5e af       	std	Y+62, r21	; 0x3e
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    212e:	40 91 87 06 	lds	r20, 0x0687
    2132:	50 91 88 06 	lds	r21, 0x0688
    2136:	60 91 89 06 	lds	r22, 0x0689
    213a:	70 91 8a 06 	lds	r23, 0x068A
    213e:	4f ab       	std	Y+55, r20	; 0x37
    2140:	58 af       	std	Y+56, r21	; 0x38
    2142:	69 af       	std	Y+57, r22	; 0x39
    2144:	7a af       	std	Y+58, r23	; 0x3a
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    2146:	20 90 8b 06 	lds	r2, 0x068B
    214a:	30 90 8c 06 	lds	r3, 0x068C
    214e:	40 90 8d 06 	lds	r4, 0x068D
    2152:	50 90 8e 06 	lds	r5, 0x068E
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    2156:	80 91 0a 05 	lds	r24, 0x050A
    215a:	90 91 0b 05 	lds	r25, 0x050B
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	6a e0       	ldi	r22, 0x0A	; 10
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
    2168:	28 96       	adiw	r28, 0x08	; 8
    216a:	8f af       	std	Y+63, r24	; 0x3f
    216c:	28 97       	sbiw	r28, 0x08	; 8
    216e:	29 96       	adiw	r28, 0x09	; 9
    2170:	9f af       	std	Y+63, r25	; 0x3f
    2172:	29 97       	sbiw	r28, 0x09	; 9
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    2174:	20 91 0c 05 	lds	r18, 0x050C
    2178:	30 91 0d 05 	lds	r19, 0x050D
    217c:	29 96       	adiw	r28, 0x09	; 9
    217e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2180:	7f ad       	ldd	r23, Y+63	; 0x3f
    2182:	29 97       	sbiw	r28, 0x09	; 9
    2184:	26 17       	cp	r18, r22
    2186:	37 07       	cpc	r19, r23
    2188:	71 f4       	brne	.+28     	; 0x21a6 <plan_buffer_line+0x13e>
    218a:	83 b7       	in	r24, 0x33	; 51
    218c:	81 60       	ori	r24, 0x01	; 1
    218e:	83 bf       	out	0x33, r24	; 51
    2190:	88 95       	sleep
    2192:	83 b7       	in	r24, 0x33	; 51
    2194:	8e 7f       	andi	r24, 0xFE	; 254
    2196:	83 bf       	out	0x33, r24	; 51
    2198:	80 91 0c 05 	lds	r24, 0x050C
    219c:	90 91 0d 05 	lds	r25, 0x050D
    21a0:	82 17       	cp	r24, r18
    21a2:	93 07       	cpc	r25, r19
    21a4:	91 f3       	breq	.-28     	; 0x218a <plan_buffer_line+0x122>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    21a6:	20 91 0a 05 	lds	r18, 0x050A
    21aa:	30 91 0b 05 	lds	r19, 0x050B
    21ae:	c9 01       	movw	r24, r18
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	dc 01       	movw	r26, r24
    21be:	aa 0f       	add	r26, r26
    21c0:	bb 1f       	adc	r27, r27
    21c2:	aa 0f       	add	r26, r26
    21c4:	bb 1f       	adc	r27, r27
    21c6:	aa 0f       	add	r26, r26
    21c8:	bb 1f       	adc	r27, r27
    21ca:	a8 0f       	add	r26, r24
    21cc:	b9 1f       	adc	r27, r25
    21ce:	a2 0f       	add	r26, r18
    21d0:	b3 1f       	adc	r27, r19
    21d2:	a0 5d       	subi	r26, 0xD0	; 208
    21d4:	bd 4f       	sbci	r27, 0xFD	; 253
    21d6:	be ab       	std	Y+54, r27	; 0x36
    21d8:	ad ab       	std	Y+53, r26	; 0x35
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    21da:	80 91 0e 05 	lds	r24, 0x050E
    21de:	90 91 0f 05 	lds	r25, 0x050F
    21e2:	a0 91 10 05 	lds	r26, 0x0510
    21e6:	b0 91 11 05 	lds	r27, 0x0511
    21ea:	37 01       	movw	r6, r14
    21ec:	48 01       	movw	r8, r16
    21ee:	68 1a       	sub	r6, r24
    21f0:	79 0a       	sbc	r7, r25
    21f2:	8a 0a       	sbc	r8, r26
    21f4:	9b 0a       	sbc	r9, r27
    21f6:	97 fc       	sbrc	r9, 7
    21f8:	2c c3       	rjmp	.+1624   	; 0x2852 <__stack+0x653>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    21fa:	c2 01       	movw	r24, r4
    21fc:	b1 01       	movw	r22, r2
    21fe:	a6 01       	movw	r20, r12
    2200:	95 01       	movw	r18, r10
    2202:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    2206:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    220a:	6d 87       	std	Y+13, r22	; 0x0d
    220c:	7e 87       	std	Y+14, r23	; 0x0e
    220e:	8f 87       	std	Y+15, r24	; 0x0f
    2210:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2212:	6f a9       	ldd	r22, Y+55	; 0x37
    2214:	78 ad       	ldd	r23, Y+56	; 0x38
    2216:	89 ad       	ldd	r24, Y+57	; 0x39
    2218:	9a ad       	ldd	r25, Y+58	; 0x3a
    221a:	27 96       	adiw	r28, 0x07	; 7
    221c:	2c ad       	ldd	r18, Y+60	; 0x3c
    221e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2220:	4e ad       	ldd	r20, Y+62	; 0x3e
    2222:	5f ad       	ldd	r21, Y+63	; 0x3f
    2224:	27 97       	sbiw	r28, 0x07	; 7
    2226:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    222a:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    222e:	69 87       	std	Y+9, r22	; 0x09
    2230:	7a 87       	std	Y+10, r23	; 0x0a
    2232:	8b 87       	std	Y+11, r24	; 0x0b
    2234:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2236:	6b ad       	ldd	r22, Y+59	; 0x3b
    2238:	7c ad       	ldd	r23, Y+60	; 0x3c
    223a:	8d ad       	ldd	r24, Y+61	; 0x3d
    223c:	9e ad       	ldd	r25, Y+62	; 0x3e
    223e:	23 96       	adiw	r28, 0x03	; 3
    2240:	2c ad       	ldd	r18, Y+60	; 0x3c
    2242:	3d ad       	ldd	r19, Y+61	; 0x3d
    2244:	4e ad       	ldd	r20, Y+62	; 0x3e
    2246:	5f ad       	ldd	r21, Y+63	; 0x3f
    2248:	23 97       	sbiw	r28, 0x03	; 3
    224a:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    224e:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    2252:	6d 83       	std	Y+5, r22	; 0x05
    2254:	7e 83       	std	Y+6, r23	; 0x06
    2256:	8f 83       	std	Y+7, r24	; 0x07
    2258:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    225a:	e9 82       	std	Y+1, r14	; 0x01
    225c:	fa 82       	std	Y+2, r15	; 0x02
    225e:	0b 83       	std	Y+3, r16	; 0x03
    2260:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2262:	ed a9       	ldd	r30, Y+53	; 0x35
    2264:	fe a9       	ldd	r31, Y+54	; 0x36
    2266:	60 82       	st	Z, r6
    2268:	71 82       	std	Z+1, r7	; 0x01
    226a:	82 82       	std	Z+2, r8	; 0x02
    226c:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    226e:	ad 80       	ldd	r10, Y+5	; 0x05
    2270:	be 80       	ldd	r11, Y+6	; 0x06
    2272:	cf 80       	ldd	r12, Y+7	; 0x07
    2274:	d8 84       	ldd	r13, Y+8	; 0x08
    2276:	80 91 12 05 	lds	r24, 0x0512
    227a:	90 91 13 05 	lds	r25, 0x0513
    227e:	a0 91 14 05 	lds	r26, 0x0514
    2282:	b0 91 15 05 	lds	r27, 0x0515
    2286:	a6 01       	movw	r20, r12
    2288:	95 01       	movw	r18, r10
    228a:	28 1b       	sub	r18, r24
    228c:	39 0b       	sbc	r19, r25
    228e:	4a 0b       	sbc	r20, r26
    2290:	5b 0b       	sbc	r21, r27
    2292:	da 01       	movw	r26, r20
    2294:	c9 01       	movw	r24, r18
    2296:	57 fd       	sbrc	r21, 7
    2298:	d4 c2       	rjmp	.+1448   	; 0x2842 <__stack+0x643>
    229a:	ed a9       	ldd	r30, Y+53	; 0x35
    229c:	fe a9       	ldd	r31, Y+54	; 0x36
    229e:	84 83       	std	Z+4, r24	; 0x04
    22a0:	95 83       	std	Z+5, r25	; 0x05
    22a2:	a6 83       	std	Z+6, r26	; 0x06
    22a4:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    22a6:	20 90 16 05 	lds	r2, 0x0516
    22aa:	30 90 17 05 	lds	r3, 0x0517
    22ae:	40 90 18 05 	lds	r4, 0x0518
    22b2:	50 90 19 05 	lds	r5, 0x0519
    22b6:	69 84       	ldd	r6, Y+9	; 0x09
    22b8:	7a 84       	ldd	r7, Y+10	; 0x0a
    22ba:	8b 84       	ldd	r8, Y+11	; 0x0b
    22bc:	9c 84       	ldd	r9, Y+12	; 0x0c
    22be:	d4 01       	movw	r26, r8
    22c0:	c3 01       	movw	r24, r6
    22c2:	82 19       	sub	r24, r2
    22c4:	93 09       	sbc	r25, r3
    22c6:	a4 09       	sbc	r26, r4
    22c8:	b5 09       	sbc	r27, r5
    22ca:	b7 fd       	sbrc	r27, 7
    22cc:	b2 c2       	rjmp	.+1380   	; 0x2832 <__stack+0x633>
    22ce:	ed a9       	ldd	r30, Y+53	; 0x35
    22d0:	fe a9       	ldd	r31, Y+54	; 0x36
    22d2:	80 87       	std	Z+8, r24	; 0x08
    22d4:	91 87       	std	Z+9, r25	; 0x09
    22d6:	a2 87       	std	Z+10, r26	; 0x0a
    22d8:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    22da:	20 91 1a 05 	lds	r18, 0x051A
    22de:	30 91 1b 05 	lds	r19, 0x051B
    22e2:	40 91 1c 05 	lds	r20, 0x051C
    22e6:	50 91 1d 05 	lds	r21, 0x051D
    22ea:	29 8b       	std	Y+17, r18	; 0x11
    22ec:	3a 8b       	std	Y+18, r19	; 0x12
    22ee:	4b 8b       	std	Y+19, r20	; 0x13
    22f0:	5c 8b       	std	Y+20, r21	; 0x14
    22f2:	4d 85       	ldd	r20, Y+13	; 0x0d
    22f4:	5e 85       	ldd	r21, Y+14	; 0x0e
    22f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    22f8:	78 89       	ldd	r23, Y+16	; 0x10
    22fa:	2d 96       	adiw	r28, 0x0d	; 13
    22fc:	4c af       	std	Y+60, r20	; 0x3c
    22fe:	5d af       	std	Y+61, r21	; 0x3d
    2300:	6e af       	std	Y+62, r22	; 0x3e
    2302:	7f af       	std	Y+63, r23	; 0x3f
    2304:	2d 97       	sbiw	r28, 0x0d	; 13
    2306:	7a 01       	movw	r14, r20
    2308:	8b 01       	movw	r16, r22
    230a:	69 89       	ldd	r22, Y+17	; 0x11
    230c:	7a 89       	ldd	r23, Y+18	; 0x12
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	e6 1a       	sub	r14, r22
    2314:	f7 0a       	sbc	r15, r23
    2316:	08 0b       	sbc	r16, r24
    2318:	19 0b       	sbc	r17, r25
    231a:	17 fd       	sbrc	r17, 7
    231c:	81 c2       	rjmp	.+1282   	; 0x2820 <__stack+0x621>
    231e:	ad a9       	ldd	r26, Y+53	; 0x35
    2320:	be a9       	ldd	r27, Y+54	; 0x36
    2322:	1c 96       	adiw	r26, 0x0c	; 12
    2324:	ed 92       	st	X+, r14
    2326:	fd 92       	st	X+, r15
    2328:	0d 93       	st	X+, r16
    232a:	1c 93       	st	X, r17
    232c:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    232e:	18 96       	adiw	r26, 0x08	; 8
    2330:	2d 91       	ld	r18, X+
    2332:	3d 91       	ld	r19, X+
    2334:	4d 91       	ld	r20, X+
    2336:	5c 91       	ld	r21, X
    2338:	1b 97       	sbiw	r26, 0x0b	; 11
    233a:	fd 01       	movw	r30, r26
    233c:	84 81       	ldd	r24, Z+4	; 0x04
    233e:	95 81       	ldd	r25, Z+5	; 0x05
    2340:	a6 81       	ldd	r26, Z+6	; 0x06
    2342:	b7 81       	ldd	r27, Z+7	; 0x07
    2344:	82 17       	cp	r24, r18
    2346:	93 07       	cpc	r25, r19
    2348:	a4 07       	cpc	r26, r20
    234a:	b5 07       	cpc	r27, r21
    234c:	08 f4       	brcc	.+2      	; 0x2350 <__stack+0x151>
    234e:	54 c2       	rjmp	.+1192   	; 0x27f8 <__stack+0x5f9>
    2350:	ed a9       	ldd	r30, Y+53	; 0x35
    2352:	fe a9       	ldd	r31, Y+54	; 0x36
    2354:	20 81       	ld	r18, Z
    2356:	31 81       	ldd	r19, Z+1	; 0x01
    2358:	42 81       	ldd	r20, Z+2	; 0x02
    235a:	53 81       	ldd	r21, Z+3	; 0x03
    235c:	82 17       	cp	r24, r18
    235e:	93 07       	cpc	r25, r19
    2360:	a4 07       	cpc	r26, r20
    2362:	b5 07       	cpc	r27, r21
    2364:	08 f4       	brcc	.+2      	; 0x2368 <__stack+0x169>
    2366:	3f c2       	rjmp	.+1150   	; 0x27e6 <__stack+0x5e7>
    2368:	8e 15       	cp	r24, r14
    236a:	9f 05       	cpc	r25, r15
    236c:	a0 07       	cpc	r26, r16
    236e:	b1 07       	cpc	r27, r17
    2370:	08 f4       	brcc	.+2      	; 0x2374 <__stack+0x175>
    2372:	36 c2       	rjmp	.+1132   	; 0x27e0 <__stack+0x5e1>
    2374:	ed a9       	ldd	r30, Y+53	; 0x35
    2376:	fe a9       	ldd	r31, Y+54	; 0x36
    2378:	81 8b       	std	Z+17, r24	; 0x11
    237a:	92 8b       	std	Z+18, r25	; 0x12
    237c:	a3 8b       	std	Z+19, r26	; 0x13
    237e:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	a1 05       	cpc	r26, r1
    2384:	b1 05       	cpc	r27, r1
    2386:	09 f4       	brne	.+2      	; 0x238a <__stack+0x18b>
    2388:	3a c2       	rjmp	.+1140   	; 0x27fe <__stack+0x5ff>
// needs for ACK
 	serialWrite('X');
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    238a:	29 81       	ldd	r18, Y+1	; 0x01
    238c:	3a 81       	ldd	r19, Y+2	; 0x02
    238e:	4b 81       	ldd	r20, Y+3	; 0x03
    2390:	5c 81       	ldd	r21, Y+4	; 0x04
    2392:	2d 8f       	std	Y+29, r18	; 0x1d
    2394:	3e 8f       	std	Y+30, r19	; 0x1e
    2396:	4f 8f       	std	Y+31, r20	; 0x1f
    2398:	58 a3       	std	Y+32, r21	; 0x20
    239a:	80 91 0e 05 	lds	r24, 0x050E
    239e:	90 91 0f 05 	lds	r25, 0x050F
    23a2:	a0 91 10 05 	lds	r26, 0x0510
    23a6:	b0 91 11 05 	lds	r27, 0x0511
    23aa:	28 1b       	sub	r18, r24
    23ac:	39 0b       	sbc	r19, r25
    23ae:	4a 0b       	sbc	r20, r26
    23b0:	5b 0b       	sbc	r21, r27
    23b2:	ca 01       	movw	r24, r20
    23b4:	b9 01       	movw	r22, r18
    23b6:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    23ba:	20 91 7f 06 	lds	r18, 0x067F
    23be:	30 91 80 06 	lds	r19, 0x0680
    23c2:	40 91 81 06 	lds	r20, 0x0681
    23c6:	50 91 82 06 	lds	r21, 0x0682
    23ca:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    23ce:	69 ab       	std	Y+49, r22	; 0x31
    23d0:	7a ab       	std	Y+50, r23	; 0x32
    23d2:	8b ab       	std	Y+51, r24	; 0x33
    23d4:	9c ab       	std	Y+52, r25	; 0x34
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    23d6:	a9 a2       	std	Y+33, r10	; 0x21
    23d8:	ba a2       	std	Y+34, r11	; 0x22
    23da:	cb a2       	std	Y+35, r12	; 0x23
    23dc:	dc a2       	std	Y+36, r13	; 0x24
    23de:	80 91 12 05 	lds	r24, 0x0512
    23e2:	90 91 13 05 	lds	r25, 0x0513
    23e6:	a0 91 14 05 	lds	r26, 0x0514
    23ea:	b0 91 15 05 	lds	r27, 0x0515
    23ee:	a6 01       	movw	r20, r12
    23f0:	95 01       	movw	r18, r10
    23f2:	28 1b       	sub	r18, r24
    23f4:	39 0b       	sbc	r19, r25
    23f6:	4a 0b       	sbc	r20, r26
    23f8:	5b 0b       	sbc	r21, r27
    23fa:	ca 01       	movw	r24, r20
    23fc:	b9 01       	movw	r22, r18
    23fe:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    2402:	20 91 83 06 	lds	r18, 0x0683
    2406:	30 91 84 06 	lds	r19, 0x0684
    240a:	40 91 85 06 	lds	r20, 0x0685
    240e:	50 91 86 06 	lds	r21, 0x0686
    2412:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    2416:	6d a7       	std	Y+45, r22	; 0x2d
    2418:	7e a7       	std	Y+46, r23	; 0x2e
    241a:	8f a7       	std	Y+47, r24	; 0x2f
    241c:	98 ab       	std	Y+48, r25	; 0x30
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    241e:	69 8e       	std	Y+25, r6	; 0x19
    2420:	7a 8e       	std	Y+26, r7	; 0x1a
    2422:	8b 8e       	std	Y+27, r8	; 0x1b
    2424:	9c 8e       	std	Y+28, r9	; 0x1c
    2426:	c4 01       	movw	r24, r8
    2428:	b3 01       	movw	r22, r6
    242a:	62 19       	sub	r22, r2
    242c:	73 09       	sbc	r23, r3
    242e:	84 09       	sbc	r24, r4
    2430:	95 09       	sbc	r25, r5
    2432:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    2436:	20 91 87 06 	lds	r18, 0x0687
    243a:	30 91 88 06 	lds	r19, 0x0688
    243e:	40 91 89 06 	lds	r20, 0x0689
    2442:	50 91 8a 06 	lds	r21, 0x068A
    2446:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    244a:	69 a7       	std	Y+41, r22	; 0x29
    244c:	7a a7       	std	Y+42, r23	; 0x2a
    244e:	8b a7       	std	Y+43, r24	; 0x2b
    2450:	9c a7       	std	Y+44, r25	; 0x2c
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2452:	2d 96       	adiw	r28, 0x0d	; 13
    2454:	4c ad       	ldd	r20, Y+60	; 0x3c
    2456:	5d ad       	ldd	r21, Y+61	; 0x3d
    2458:	6e ad       	ldd	r22, Y+62	; 0x3e
    245a:	7f ad       	ldd	r23, Y+63	; 0x3f
    245c:	2d 97       	sbiw	r28, 0x0d	; 13
    245e:	4d 8b       	std	Y+21, r20	; 0x15
    2460:	5e 8b       	std	Y+22, r21	; 0x16
    2462:	6f 8b       	std	Y+23, r22	; 0x17
    2464:	78 8f       	std	Y+24, r23	; 0x18
    2466:	cb 01       	movw	r24, r22
    2468:	ba 01       	movw	r22, r20
    246a:	29 89       	ldd	r18, Y+17	; 0x11
    246c:	3a 89       	ldd	r19, Y+18	; 0x12
    246e:	4b 89       	ldd	r20, Y+19	; 0x13
    2470:	5c 89       	ldd	r21, Y+20	; 0x14
    2472:	62 1b       	sub	r22, r18
    2474:	73 0b       	sbc	r23, r19
    2476:	84 0b       	sbc	r24, r20
    2478:	95 0b       	sbc	r25, r21
    247a:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    247e:	20 91 8b 06 	lds	r18, 0x068B
    2482:	30 91 8c 06 	lds	r19, 0x068C
    2486:	40 91 8d 06 	lds	r20, 0x068D
    248a:	50 91 8e 06 	lds	r21, 0x068E
    248e:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    2492:	6d a3       	std	Y+37, r22	; 0x25
    2494:	7e a3       	std	Y+38, r23	; 0x26
    2496:	8f a3       	std	Y+39, r24	; 0x27
    2498:	98 a7       	std	Y+40, r25	; 0x28
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    249a:	69 a9       	ldd	r22, Y+49	; 0x31
    249c:	7a a9       	ldd	r23, Y+50	; 0x32
    249e:	8b a9       	ldd	r24, Y+51	; 0x33
    24a0:	9c a9       	ldd	r25, Y+52	; 0x34
    24a2:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <square>
    24a6:	3b 01       	movw	r6, r22
    24a8:	4c 01       	movw	r8, r24
    24aa:	6d a5       	ldd	r22, Y+45	; 0x2d
    24ac:	7e a5       	ldd	r23, Y+46	; 0x2e
    24ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b0:	98 a9       	ldd	r25, Y+48	; 0x30
    24b2:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <square>
    24b6:	7b 01       	movw	r14, r22
    24b8:	8c 01       	movw	r16, r24
    24ba:	69 a5       	ldd	r22, Y+41	; 0x29
    24bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    24be:	8b a5       	ldd	r24, Y+43	; 0x2b
    24c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24c2:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <square>
    24c6:	5b 01       	movw	r10, r22
    24c8:	6c 01       	movw	r12, r24
    24ca:	6d a1       	ldd	r22, Y+37	; 0x25
    24cc:	7e a1       	ldd	r23, Y+38	; 0x26
    24ce:	8f a1       	ldd	r24, Y+39	; 0x27
    24d0:	98 a5       	ldd	r25, Y+40	; 0x28
    24d2:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <square>
    24d6:	1b 01       	movw	r2, r22
    24d8:	2c 01       	movw	r4, r24
    24da:	c4 01       	movw	r24, r8
    24dc:	b3 01       	movw	r22, r6
    24de:	a8 01       	movw	r20, r16
    24e0:	97 01       	movw	r18, r14
    24e2:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    24e6:	a6 01       	movw	r20, r12
    24e8:	95 01       	movw	r18, r10
    24ea:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    24ee:	a2 01       	movw	r20, r4
    24f0:	91 01       	movw	r18, r2
    24f2:	0e 94 c2 23 	call	0x4784	; 0x4784 <__addsf3>
    24f6:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <sqrt>
    24fa:	ad a9       	ldd	r26, Y+53	; 0x35
    24fc:	be a9       	ldd	r27, Y+54	; 0x36
    24fe:	9d 96       	adiw	r26, 0x2d	; 45
    2500:	6d 93       	st	X+, r22
    2502:	7d 93       	st	X+, r23
    2504:	8d 93       	st	X+, r24
    2506:	9c 93       	st	X, r25
    2508:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    250a:	a8 96       	adiw	r28, 0x28	; 40
    250c:	ee ad       	ldd	r30, Y+62	; 0x3e
    250e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2510:	a8 97       	sbiw	r28, 0x28	; 40
    2512:	ef 2b       	or	r30, r31
    2514:	09 f0       	breq	.+2      	; 0x2518 <__stack+0x319>
    2516:	77 c1       	rjmp	.+750    	; 0x2806 <__stack+0x607>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2518:	a6 96       	adiw	r28, 0x26	; 38
    251a:	2c ad       	ldd	r18, Y+60	; 0x3c
    251c:	3d ad       	ldd	r19, Y+61	; 0x3d
    251e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2520:	5f ad       	ldd	r21, Y+63	; 0x3f
    2522:	a6 97       	sbiw	r28, 0x26	; 38
    2524:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	34 e2       	ldi	r19, 0x24	; 36
    252c:	44 e7       	ldi	r20, 0x74	; 116
    252e:	59 e4       	ldi	r21, 0x49	; 73
    2530:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2534:	0e 94 33 26 	call	0x4c66	; 0x4c66 <lround>
    2538:	ac 01       	movw	r20, r24
    253a:	cb 01       	movw	r24, r22
    253c:	da 01       	movw	r26, r20
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2542:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__floatunsisf>
    2546:	9b 01       	movw	r18, r22
    2548:	ac 01       	movw	r20, r24
    254a:	60 ec       	ldi	r22, 0xC0	; 192
    254c:	71 ee       	ldi	r23, 0xE1	; 225
    254e:	84 e6       	ldi	r24, 0x64	; 100
    2550:	9c e4       	ldi	r25, 0x4C	; 76
    2552:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    2556:	7b 01       	movw	r14, r22
    2558:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    255a:	69 a9       	ldd	r22, Y+49	; 0x31
    255c:	7a a9       	ldd	r23, Y+50	; 0x32
    255e:	8b a9       	ldd	r24, Y+51	; 0x33
    2560:	9c a9       	ldd	r25, Y+52	; 0x34
    2562:	a8 01       	movw	r20, r16
    2564:	97 01       	movw	r18, r14
    2566:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    256a:	ad a9       	ldd	r26, Y+53	; 0x35
    256c:	be a9       	ldd	r27, Y+54	; 0x36
    256e:	59 96       	adiw	r26, 0x19	; 25
    2570:	6d 93       	st	X+, r22
    2572:	7d 93       	st	X+, r23
    2574:	8d 93       	st	X+, r24
    2576:	9c 93       	st	X, r25
    2578:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    257a:	6d a5       	ldd	r22, Y+45	; 0x2d
    257c:	7e a5       	ldd	r23, Y+46	; 0x2e
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	a8 01       	movw	r20, r16
    2584:	97 01       	movw	r18, r14
    2586:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    258a:	ed a9       	ldd	r30, Y+53	; 0x35
    258c:	fe a9       	ldd	r31, Y+54	; 0x36
    258e:	65 8f       	std	Z+29, r22	; 0x1d
    2590:	76 8f       	std	Z+30, r23	; 0x1e
    2592:	87 8f       	std	Z+31, r24	; 0x1f
    2594:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    2596:	69 a5       	ldd	r22, Y+41	; 0x29
    2598:	7a a5       	ldd	r23, Y+42	; 0x2a
    259a:	8b a5       	ldd	r24, Y+43	; 0x2b
    259c:	9c a5       	ldd	r25, Y+44	; 0x2c
    259e:	a8 01       	movw	r20, r16
    25a0:	97 01       	movw	r18, r14
    25a2:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    25a6:	ad a9       	ldd	r26, Y+53	; 0x35
    25a8:	be a9       	ldd	r27, Y+54	; 0x36
    25aa:	91 96       	adiw	r26, 0x21	; 33
    25ac:	6d 93       	st	X+, r22
    25ae:	7d 93       	st	X+, r23
    25b0:	8d 93       	st	X+, r24
    25b2:	9c 93       	st	X, r25
    25b4:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    25b6:	6d a1       	ldd	r22, Y+37	; 0x25
    25b8:	7e a1       	ldd	r23, Y+38	; 0x26
    25ba:	8f a1       	ldd	r24, Y+39	; 0x27
    25bc:	98 a5       	ldd	r25, Y+40	; 0x28
    25be:	a8 01       	movw	r20, r16
    25c0:	97 01       	movw	r18, r14
    25c2:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    25c6:	ed a9       	ldd	r30, Y+53	; 0x35
    25c8:	fe a9       	ldd	r31, Y+54	; 0x36
    25ca:	65 a3       	std	Z+37, r22	; 0x25
    25cc:	76 a3       	std	Z+38, r23	; 0x26
    25ce:	87 a3       	std	Z+39, r24	; 0x27
    25d0:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    25d2:	65 a5       	ldd	r22, Z+45	; 0x2d
    25d4:	76 a5       	ldd	r23, Z+46	; 0x2e
    25d6:	87 a5       	ldd	r24, Z+47	; 0x2f
    25d8:	90 a9       	ldd	r25, Z+48	; 0x30
    25da:	a8 01       	movw	r20, r16
    25dc:	97 01       	movw	r18, r14
    25de:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    25e2:	ad a9       	ldd	r26, Y+53	; 0x35
    25e4:	be a9       	ldd	r27, Y+54	; 0x36
    25e6:	99 96       	adiw	r26, 0x29	; 41
    25e8:	6d 93       	st	X+, r22
    25ea:	7d 93       	st	X+, r23
    25ec:	8d 93       	st	X+, r24
    25ee:	9c 93       	st	X, r25
    25f0:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    25f2:	51 96       	adiw	r26, 0x11	; 17
    25f4:	6d 91       	ld	r22, X+
    25f6:	7d 91       	ld	r23, X+
    25f8:	8d 91       	ld	r24, X+
    25fa:	9c 91       	ld	r25, X
    25fc:	54 97       	sbiw	r26, 0x14	; 20
    25fe:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    2602:	5b 01       	movw	r10, r22
    2604:	6c 01       	movw	r12, r24
    2606:	a8 01       	movw	r20, r16
    2608:	97 01       	movw	r18, r14
    260a:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    260e:	0e 94 4e 24 	call	0x489c	; 0x489c <ceil>
    2612:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
    2616:	3b 01       	movw	r6, r22
    2618:	4c 01       	movw	r8, r24
    261a:	ed a9       	ldd	r30, Y+53	; 0x35
    261c:	fe a9       	ldd	r31, Y+54	; 0x36
    261e:	65 8b       	std	Z+21, r22	; 0x15
    2620:	76 8b       	std	Z+22, r23	; 0x16
    2622:	87 8b       	std	Z+23, r24	; 0x17
    2624:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	81 ab       	std	Z+49, r24	; 0x31
    2630:	92 ab       	std	Z+50, r25	; 0x32
    2632:	a3 ab       	std	Z+51, r26	; 0x33
    2634:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2636:	60 91 9d 06 	lds	r22, 0x069D
    263a:	70 91 9e 06 	lds	r23, 0x069E
    263e:	80 91 9f 06 	lds	r24, 0x069F
    2642:	90 91 a0 06 	lds	r25, 0x06A0
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e7       	ldi	r20, 0x70	; 112
    264c:	52 e4       	ldi	r21, 0x42	; 66
    264e:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e2       	ldi	r20, 0x20	; 32
    2658:	52 e4       	ldi	r21, 0x42	; 66
    265a:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    265e:	7b 01       	movw	r14, r22
    2660:	8c 01       	movw	r16, r24
    2662:	ad a9       	ldd	r26, Y+53	; 0x35
    2664:	be a9       	ldd	r27, Y+54	; 0x36
    2666:	9d 96       	adiw	r26, 0x2d	; 45
    2668:	6d 91       	ld	r22, X+
    266a:	7d 91       	ld	r23, X+
    266c:	8d 91       	ld	r24, X+
    266e:	9c 91       	ld	r25, X
    2670:	d0 97       	sbiw	r26, 0x30	; 48
    2672:	a6 01       	movw	r20, r12
    2674:	95 01       	movw	r18, r10
    2676:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    267a:	9b 01       	movw	r18, r22
    267c:	ac 01       	movw	r20, r24
    267e:	c8 01       	movw	r24, r16
    2680:	b7 01       	movw	r22, r14
    2682:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    2686:	0e 94 4e 24 	call	0x489c	; 0x489c <ceil>
    268a:	0d a9       	ldd	r16, Y+53	; 0x35
    268c:	1e a9       	ldd	r17, Y+54	; 0x36
    268e:	03 5c       	subi	r16, 0xC3	; 195
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
    2696:	f8 01       	movw	r30, r16
    2698:	60 83       	st	Z, r22
    269a:	71 83       	std	Z+1, r23	; 0x01
    269c:	82 83       	std	Z+2, r24	; 0x02
    269e:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    26a0:	20 91 1e 05 	lds	r18, 0x051E
    26a4:	22 23       	and	r18, r18
    26a6:	09 f0       	breq	.+2      	; 0x26aa <__stack+0x4ab>
    26a8:	dd c0       	rjmp	.+442    	; 0x2864 <__stack+0x665>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    26aa:	ad a9       	ldd	r26, Y+53	; 0x35
    26ac:	be a9       	ldd	r27, Y+54	; 0x36
    26ae:	d5 96       	adiw	r26, 0x35	; 53
    26b0:	6d 92       	st	X+, r6
    26b2:	7d 92       	st	X+, r7
    26b4:	8d 92       	st	X+, r8
    26b6:	9c 92       	st	X, r9
    26b8:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    26ba:	fd 01       	movw	r30, r26
    26bc:	61 ae       	std	Z+57, r6	; 0x39
    26be:	72 ae       	std	Z+58, r7	; 0x3a
    26c0:	83 ae       	std	Z+59, r8	; 0x3b
    26c2:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    26c4:	ef 5b       	subi	r30, 0xBF	; 191
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	10 82       	st	Z, r1
    26ca:	11 82       	std	Z+1, r1	; 0x01
    26cc:	12 82       	std	Z+2, r1	; 0x02
    26ce:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    26d0:	ad 01       	movw	r20, r26
    26d2:	4b 5b       	subi	r20, 0xBB	; 187
    26d4:	5f 4f       	sbci	r21, 0xFF	; 255
    26d6:	fd 01       	movw	r30, r26
    26d8:	81 89       	ldd	r24, Z+17	; 0x11
    26da:	92 89       	ldd	r25, Z+18	; 0x12
    26dc:	a3 89       	ldd	r26, Z+19	; 0x13
    26de:	b4 89       	ldd	r27, Z+20	; 0x14
    26e0:	fa 01       	movw	r30, r20
    26e2:	80 83       	st	Z, r24
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	a2 83       	std	Z+2, r26	; 0x02
    26e8:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    26ea:	d8 01       	movw	r26, r16
    26ec:	1d 92       	st	X+, r1
    26ee:	1d 92       	st	X+, r1
    26f0:	1d 92       	st	X+, r1
    26f2:	1c 92       	st	X, r1
    26f4:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    26f6:	ed a9       	ldd	r30, Y+53	; 0x35
    26f8:	fe a9       	ldd	r31, Y+54	; 0x36
    26fa:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    26fc:	80 91 0e 05 	lds	r24, 0x050E
    2700:	90 91 0f 05 	lds	r25, 0x050F
    2704:	a0 91 10 05 	lds	r26, 0x0510
    2708:	b0 91 11 05 	lds	r27, 0x0511
    270c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    270e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2710:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2712:	78 a1       	ldd	r23, Y+32	; 0x20
    2714:	48 17       	cp	r20, r24
    2716:	59 07       	cpc	r21, r25
    2718:	6a 07       	cpc	r22, r26
    271a:	7b 07       	cpc	r23, r27
    271c:	14 f4       	brge	.+4      	; 0x2722 <__stack+0x523>
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2722:	80 91 12 05 	lds	r24, 0x0512
    2726:	90 91 13 05 	lds	r25, 0x0513
    272a:	a0 91 14 05 	lds	r26, 0x0514
    272e:	b0 91 15 05 	lds	r27, 0x0515
    2732:	49 a1       	ldd	r20, Y+33	; 0x21
    2734:	5a a1       	ldd	r21, Y+34	; 0x22
    2736:	6b a1       	ldd	r22, Y+35	; 0x23
    2738:	7c a1       	ldd	r23, Y+36	; 0x24
    273a:	48 17       	cp	r20, r24
    273c:	59 07       	cpc	r21, r25
    273e:	6a 07       	cpc	r22, r26
    2740:	7b 07       	cpc	r23, r27
    2742:	44 f4       	brge	.+16     	; 0x2754 <__stack+0x555>
    2744:	ad a9       	ldd	r26, Y+53	; 0x35
    2746:	be a9       	ldd	r27, Y+54	; 0x36
    2748:	50 96       	adiw	r26, 0x10	; 16
    274a:	8c 91       	ld	r24, X
    274c:	50 97       	sbiw	r26, 0x10	; 16
    274e:	88 60       	ori	r24, 0x08	; 8
    2750:	50 96       	adiw	r26, 0x10	; 16
    2752:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2754:	80 91 16 05 	lds	r24, 0x0516
    2758:	90 91 17 05 	lds	r25, 0x0517
    275c:	a0 91 18 05 	lds	r26, 0x0518
    2760:	b0 91 19 05 	lds	r27, 0x0519
    2764:	49 8d       	ldd	r20, Y+25	; 0x19
    2766:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2768:	6b 8d       	ldd	r22, Y+27	; 0x1b
    276a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    276c:	48 17       	cp	r20, r24
    276e:	59 07       	cpc	r21, r25
    2770:	6a 07       	cpc	r22, r26
    2772:	7b 07       	cpc	r23, r27
    2774:	44 f4       	brge	.+16     	; 0x2786 <__stack+0x587>
    2776:	ad a9       	ldd	r26, Y+53	; 0x35
    2778:	be a9       	ldd	r27, Y+54	; 0x36
    277a:	50 96       	adiw	r26, 0x10	; 16
    277c:	8c 91       	ld	r24, X
    277e:	50 97       	sbiw	r26, 0x10	; 16
    2780:	80 64       	ori	r24, 0x40	; 64
    2782:	50 96       	adiw	r26, 0x10	; 16
    2784:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2786:	4d 89       	ldd	r20, Y+21	; 0x15
    2788:	5e 89       	ldd	r21, Y+22	; 0x16
    278a:	6f 89       	ldd	r22, Y+23	; 0x17
    278c:	78 8d       	ldd	r23, Y+24	; 0x18
    278e:	89 89       	ldd	r24, Y+17	; 0x11
    2790:	9a 89       	ldd	r25, Y+18	; 0x12
    2792:	ab 89       	ldd	r26, Y+19	; 0x13
    2794:	bc 89       	ldd	r27, Y+20	; 0x14
    2796:	48 17       	cp	r20, r24
    2798:	59 07       	cpc	r21, r25
    279a:	6a 07       	cpc	r22, r26
    279c:	7b 07       	cpc	r23, r27
    279e:	44 f4       	brge	.+16     	; 0x27b0 <__stack+0x5b1>
    27a0:	ad a9       	ldd	r26, Y+53	; 0x35
    27a2:	be a9       	ldd	r27, Y+54	; 0x36
    27a4:	50 96       	adiw	r26, 0x10	; 16
    27a6:	8c 91       	ld	r24, X
    27a8:	50 97       	sbiw	r26, 0x10	; 16
    27aa:	80 68       	ori	r24, 0x80	; 128
    27ac:	50 96       	adiw	r26, 0x10	; 16
    27ae:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    27b0:	29 96       	adiw	r28, 0x09	; 9
    27b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    27b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    27b6:	29 97       	sbiw	r28, 0x09	; 9
    27b8:	f0 93 0b 05 	sts	0x050B, r31
    27bc:	e0 93 0a 05 	sts	0x050A, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    27c0:	ae e0       	ldi	r26, 0x0E	; 14
    27c2:	b5 e0       	ldi	r27, 0x05	; 5
    27c4:	fe 01       	movw	r30, r28
    27c6:	31 96       	adiw	r30, 0x01	; 1
    27c8:	80 e1       	ldi	r24, 0x10	; 16
    27ca:	01 90       	ld	r0, Z+
    27cc:	0d 92       	st	X+, r0
    27ce:	81 50       	subi	r24, 0x01	; 1
    27d0:	e1 f7       	brne	.-8      	; 0x27ca <__stack+0x5cb>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    27d2:	22 23       	and	r18, r18
    27d4:	11 f0       	breq	.+4      	; 0x27da <__stack+0x5db>
    27d6:	0e 94 2d 10 	call	0x205a	; 0x205a <planner_recalculate>
  st_wake_up();
    27da:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <st_wake_up>
    27de:	71 cc       	rjmp	.-1822   	; 0x20c2 <plan_buffer_line+0x5a>
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    27e0:	d8 01       	movw	r26, r16
    27e2:	c7 01       	movw	r24, r14
    27e4:	c7 cd       	rjmp	.-1138   	; 0x2374 <__stack+0x175>
    27e6:	da 01       	movw	r26, r20
    27e8:	c9 01       	movw	r24, r18
    27ea:	8e 15       	cp	r24, r14
    27ec:	9f 05       	cpc	r25, r15
    27ee:	a0 07       	cpc	r26, r16
    27f0:	b1 07       	cpc	r27, r17
    27f2:	08 f0       	brcs	.+2      	; 0x27f6 <__stack+0x5f7>
    27f4:	bf cd       	rjmp	.-1154   	; 0x2374 <__stack+0x175>
    27f6:	f4 cf       	rjmp	.-24     	; 0x27e0 <__stack+0x5e1>
    27f8:	da 01       	movw	r26, r20
    27fa:	c9 01       	movw	r24, r18
    27fc:	a9 cd       	rjmp	.-1198   	; 0x2350 <__stack+0x151>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
#endif

// needs for ACK
 	serialWrite('X');
    27fe:	88 e5       	ldi	r24, 0x58	; 88
    2800:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <serialWrite>
    2804:	5e cc       	rjmp	.-1860   	; 0x20c2 <plan_buffer_line+0x5a>
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2806:	60 ec       	ldi	r22, 0xC0	; 192
    2808:	71 ee       	ldi	r23, 0xE1	; 225
    280a:	84 e6       	ldi	r24, 0x64	; 100
    280c:	9c e4       	ldi	r25, 0x4C	; 76
    280e:	a6 96       	adiw	r28, 0x26	; 38
    2810:	2c ad       	ldd	r18, Y+60	; 0x3c
    2812:	3d ad       	ldd	r19, Y+61	; 0x3d
    2814:	4e ad       	ldd	r20, Y+62	; 0x3e
    2816:	5f ad       	ldd	r21, Y+63	; 0x3f
    2818:	a6 97       	sbiw	r28, 0x26	; 38
    281a:	0e 94 65 24 	call	0x48ca	; 0x48ca <__divsf3>
    281e:	8a ce       	rjmp	.-748    	; 0x2534 <__stack+0x335>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2820:	10 95       	com	r17
    2822:	00 95       	com	r16
    2824:	f0 94       	com	r15
    2826:	e0 94       	com	r14
    2828:	e1 1c       	adc	r14, r1
    282a:	f1 1c       	adc	r15, r1
    282c:	01 1d       	adc	r16, r1
    282e:	11 1d       	adc	r17, r1
    2830:	76 cd       	rjmp	.-1300   	; 0x231e <__stack+0x11f>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2832:	b0 95       	com	r27
    2834:	a0 95       	com	r26
    2836:	90 95       	com	r25
    2838:	81 95       	neg	r24
    283a:	9f 4f       	sbci	r25, 0xFF	; 255
    283c:	af 4f       	sbci	r26, 0xFF	; 255
    283e:	bf 4f       	sbci	r27, 0xFF	; 255
    2840:	46 cd       	rjmp	.-1396   	; 0x22ce <__stack+0xcf>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2842:	b0 95       	com	r27
    2844:	a0 95       	com	r26
    2846:	90 95       	com	r25
    2848:	81 95       	neg	r24
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
    284c:	af 4f       	sbci	r26, 0xFF	; 255
    284e:	bf 4f       	sbci	r27, 0xFF	; 255
    2850:	24 cd       	rjmp	.-1464   	; 0x229a <__stack+0x9b>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2852:	90 94       	com	r9
    2854:	80 94       	com	r8
    2856:	70 94       	com	r7
    2858:	60 94       	com	r6
    285a:	61 1c       	adc	r6, r1
    285c:	71 1c       	adc	r7, r1
    285e:	81 1c       	adc	r8, r1
    2860:	91 1c       	adc	r9, r1
    2862:	cb cc       	rjmp	.-1642   	; 0x21fa <plan_buffer_line+0x192>
  block->rate_delta = ceil(
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    2864:	8d a9       	ldd	r24, Y+53	; 0x35
    2866:	9e a9       	ldd	r25, Y+54	; 0x36
    2868:	0e 94 17 0b 	call	0x162e	; 0x162e <factor_for_safe_speed>
    286c:	8b 01       	movw	r16, r22
    286e:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    2870:	8d a9       	ldd	r24, Y+53	; 0x35
    2872:	9e a9       	ldd	r25, Y+54	; 0x36
    2874:	b9 01       	movw	r22, r18
    2876:	a8 01       	movw	r20, r16
    2878:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <calculate_trapezoid_for_block>
    287c:	29 81       	ldd	r18, Y+1	; 0x01
    287e:	3a 81       	ldd	r19, Y+2	; 0x02
    2880:	4b 81       	ldd	r20, Y+3	; 0x03
    2882:	5c 81       	ldd	r21, Y+4	; 0x04
    2884:	2d 8f       	std	Y+29, r18	; 0x1d
    2886:	3e 8f       	std	Y+30, r19	; 0x1e
    2888:	4f 8f       	std	Y+31, r20	; 0x1f
    288a:	58 a3       	std	Y+32, r21	; 0x20
    288c:	4d 81       	ldd	r20, Y+5	; 0x05
    288e:	5e 81       	ldd	r21, Y+6	; 0x06
    2890:	6f 81       	ldd	r22, Y+7	; 0x07
    2892:	78 85       	ldd	r23, Y+8	; 0x08
    2894:	49 a3       	std	Y+33, r20	; 0x21
    2896:	5a a3       	std	Y+34, r21	; 0x22
    2898:	6b a3       	std	Y+35, r22	; 0x23
    289a:	7c a3       	std	Y+36, r23	; 0x24
    289c:	69 85       	ldd	r22, Y+9	; 0x09
    289e:	7a 85       	ldd	r23, Y+10	; 0x0a
    28a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    28a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    28a4:	69 8f       	std	Y+25, r22	; 0x19
    28a6:	7a 8f       	std	Y+26, r23	; 0x1a
    28a8:	8b 8f       	std	Y+27, r24	; 0x1b
    28aa:	9c 8f       	std	Y+28, r25	; 0x1c
    28ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b0:	af 85       	ldd	r26, Y+15	; 0x0f
    28b2:	b8 89       	ldd	r27, Y+16	; 0x10
    28b4:	8d 8b       	std	Y+21, r24	; 0x15
    28b6:	9e 8b       	std	Y+22, r25	; 0x16
    28b8:	af 8b       	std	Y+23, r26	; 0x17
    28ba:	b8 8f       	std	Y+24, r27	; 0x18
    28bc:	20 91 1a 05 	lds	r18, 0x051A
    28c0:	30 91 1b 05 	lds	r19, 0x051B
    28c4:	40 91 1c 05 	lds	r20, 0x051C
    28c8:	50 91 1d 05 	lds	r21, 0x051D
    28cc:	29 8b       	std	Y+17, r18	; 0x11
    28ce:	3a 8b       	std	Y+18, r19	; 0x12
    28d0:	4b 8b       	std	Y+19, r20	; 0x13
    28d2:	5c 8b       	std	Y+20, r21	; 0x14
    28d4:	20 91 1e 05 	lds	r18, 0x051E
    28d8:	0e cf       	rjmp	.-484    	; 0x26f6 <__stack+0x4f7>

000028da <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    28da:	0f 93       	push	r16
    28dc:	1f 93       	push	r17
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    28de:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <serialRead>
    28e2:	98 2f       	mov	r25, r24
    28e4:	8f 3f       	cpi	r24, 0xFF	; 255
    28e6:	e1 f0       	breq	.+56     	; 0x2920 <sp_process+0x46>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    28e8:	20 91 51 05 	lds	r18, 0x0551
    28ec:	22 23       	and	r18, r18
    28ee:	21 f0       	breq	.+8      	; 0x28f8 <sp_process+0x1e>
    28f0:	9a 30       	cpi	r25, 0x0A	; 10
    28f2:	c9 f0       	breq	.+50     	; 0x2926 <sp_process+0x4c>
    28f4:	9d 30       	cpi	r25, 0x0D	; 13
    28f6:	b9 f0       	breq	.+46     	; 0x2926 <sp_process+0x4c>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    28f8:	91 32       	cpi	r25, 0x21	; 33
    28fa:	8c f3       	brlt	.-30     	; 0x28de <sp_process+0x4>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    28fc:	89 2f       	mov	r24, r25
    28fe:	81 56       	subi	r24, 0x61	; 97
    2900:	8a 31       	cpi	r24, 0x1A	; 26
    2902:	b8 f5       	brcc	.+110    	; 0x2972 <sp_process+0x98>
      line[char_counter++] = c-'a'+'A';
    2904:	e2 2f       	mov	r30, r18
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	e1 5e       	subi	r30, 0xE1	; 225
    290a:	fa 4f       	sbci	r31, 0xFA	; 250
    290c:	90 52       	subi	r25, 0x20	; 32
    290e:	90 83       	st	Z, r25
    2910:	2f 5f       	subi	r18, 0xFF	; 255
    2912:	20 93 51 05 	sts	0x0551, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2916:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <serialRead>
    291a:	98 2f       	mov	r25, r24
    291c:	8f 3f       	cpi	r24, 0xFF	; 255
    291e:	21 f7       	brne	.-56     	; 0x28e8 <sp_process+0xe>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    2926:	e2 2f       	mov	r30, r18
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	e1 5e       	subi	r30, 0xE1	; 225
    292c:	fa 4f       	sbci	r31, 0xFA	; 250
    292e:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2930:	8f e1       	ldi	r24, 0x1F	; 31
    2932:	95 e0       	ldi	r25, 0x05	; 5
    2934:	0e 94 8e 05 	call	0xb1c	; 0xb1c <gc_execute_line>
    2938:	08 2f       	mov	r16, r24
static uint8_t char_counter;

static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    293a:	80 91 53 05 	lds	r24, 0x0553
    293e:	88 23       	and	r24, r24
    2940:	09 f5       	brne	.+66     	; 0x2984 <sp_process+0xaa>
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n\r")); 
			break;
		case GCSTATUS_NOT_HOMED:
			printPgmString(PSTR("error: Not homed\n\r")); 
    2942:	8f e1       	ldi	r24, 0x1F	; 31
    2944:	93 e0       	ldi	r25, 0x03	; 3
    2946:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {

		vacuum(0);
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
		head_down(0);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
		atc_fire(0);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    2962:	10 92 53 05 	sts	0x0553, r1

		// stops all but home
		set_busy(TRUE);
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    296c:	10 92 51 05 	sts	0x0551, r1
    2970:	b6 cf       	rjmp	.-148    	; 0x28de <sp_process+0x4>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    2972:	e2 2f       	mov	r30, r18
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	e1 5e       	subi	r30, 0xE1	; 225
    2978:	fa 4f       	sbci	r31, 0xFA	; 250
    297a:	90 83       	st	Z, r25
    297c:	2f 5f       	subi	r18, 0xFF	; 255
    297e:	20 93 51 05 	sts	0x0551, r18
    2982:	ad cf       	rjmp	.-166    	; 0x28de <sp_process+0x4>
	// Always override
	if( gHomed == FALSE ) {
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    2984:	03 30       	cpi	r16, 0x03	; 3
    2986:	d1 f1       	breq	.+116    	; 0x29fc <sp_process+0x122>
    2988:	04 30       	cpi	r16, 0x04	; 4
    298a:	d8 f0       	brcs	.+54     	; 0x29c2 <sp_process+0xe8>
    298c:	05 30       	cpi	r16, 0x05	; 5
    298e:	89 f1       	breq	.+98     	; 0x29f2 <sp_process+0x118>
    2990:	05 30       	cpi	r16, 0x05	; 5
    2992:	00 f1       	brcs	.+64     	; 0x29d4 <sp_process+0xfa>
    2994:	06 30       	cpi	r16, 0x06	; 6
    2996:	51 f3       	breq	.-44     	; 0x296c <sp_process+0x92>
    2998:	03 36       	cpi	r16, 0x63	; 99
    299a:	99 f2       	breq	.-90     	; 0x2942 <sp_process+0x68>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    299c:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case GCSTATUS_NO_ACK:
			return;
			break;
		default:
			printPgmString(PSTR("error: "));
    299e:	87 e1       	ldi	r24, 0x17	; 23
    29a0:	93 e0       	ldi	r25, 0x03	; 3
    29a2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
			printInteger(status_code);
    29a6:	b8 01       	movw	r22, r16
    29a8:	88 27       	eor	r24, r24
    29aa:	77 fd       	sbrc	r23, 7
    29ac:	80 95       	com	r24
    29ae:	98 2f       	mov	r25, r24
    29b0:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
			printPgmString(PSTR("\n\r"));
    29b4:	84 e1       	ldi	r24, 0x14	; 20
    29b6:	93 e0       	ldi	r25, 0x03	; 3
    29b8:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    29bc:	01 2b       	or	r16, r17
    29be:	b1 f2       	breq	.-84     	; 0x296c <sp_process+0x92>
    29c0:	c4 cf       	rjmp	.-120    	; 0x294a <sp_process+0x70>
	// Always override
	if( gHomed == FALSE ) {
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    29c2:	01 30       	cpi	r16, 0x01	; 1
    29c4:	89 f0       	breq	.+34     	; 0x29e8 <sp_process+0x10e>
    29c6:	02 30       	cpi	r16, 0x02	; 2
    29c8:	50 f0       	brcs	.+20     	; 0x29de <sp_process+0x104>
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n\r")); 
			// typos are ok
			return;
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n\r")); 
    29ca:	87 e8       	ldi	r24, 0x87	; 135
    29cc:	93 e0       	ldi	r25, 0x03	; 3
    29ce:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    29d2:	cc cf       	rjmp	.-104    	; 0x296c <sp_process+0x92>
			printPgmString(PSTR("error: Unsupported statement\n\r")); 
			// typos are ok
			return;

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n\r")); 
    29d4:	8a e4       	ldi	r24, 0x4A	; 74
    29d6:	93 e0       	ldi	r25, 0x03	; 3
    29d8:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    29dc:	b6 cf       	rjmp	.-148    	; 0x294a <sp_process+0x70>
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
		case GCSTATUS_OK:
			printPgmString(PSTR("ok\n\r")); 
    29de:	83 ec       	ldi	r24, 0xC3	; 195
    29e0:	93 e0       	ldi	r25, 0x03	; 3
    29e2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    29e6:	c2 cf       	rjmp	.-124    	; 0x296c <sp_process+0x92>
			break;
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n\r")); 
    29e8:	88 ea       	ldi	r24, 0xA8	; 168
    29ea:	93 e0       	ldi	r25, 0x03	; 3
    29ec:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    29f0:	bd cf       	rjmp	.-134    	; 0x296c <sp_process+0x92>

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n\r")); 
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n\r")); 
    29f2:	82 e3       	ldi	r24, 0x32	; 50
    29f4:	93 e0       	ldi	r25, 0x03	; 3
    29f6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    29fa:	a7 cf       	rjmp	.-178    	; 0x294a <sp_process+0x70>
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n\r")); 
			// typos are ok
			return;
		case GCSTATUS_UNSUPPORTED_STATEMENT:
			printPgmString(PSTR("error: Unsupported statement\n\r")); 
    29fc:	88 e6       	ldi	r24, 0x68	; 104
    29fe:	93 e0       	ldi	r25, 0x03	; 3
    2a00:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2a04:	b3 cf       	rjmp	.-154    	; 0x296c <sp_process+0x92>

00002a06 <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	76 e9       	ldi	r23, 0x96	; 150
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <beginSerial>
}
    2a12:	08 95       	ret

00002a14 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	ae e7       	ldi	r26, 0x7E	; 126
    2a1a:	b4 e4       	ldi	r27, 0x44	; 68
    2a1c:	80 93 7f 06 	sts	0x067F, r24
    2a20:	90 93 80 06 	sts	0x0680, r25
    2a24:	a0 93 81 06 	sts	0x0681, r26
    2a28:	b0 93 82 06 	sts	0x0682, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2a2c:	80 93 83 06 	sts	0x0683, r24
    2a30:	90 93 84 06 	sts	0x0684, r25
    2a34:	a0 93 85 06 	sts	0x0685, r26
    2a38:	b0 93 86 06 	sts	0x0686, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2a3c:	84 ef       	ldi	r24, 0xF4	; 244
    2a3e:	99 ef       	ldi	r25, 0xF9	; 249
    2a40:	ac e3       	ldi	r26, 0x3C	; 60
    2a42:	b4 e4       	ldi	r27, 0x44	; 68
    2a44:	80 93 87 06 	sts	0x0687, r24
    2a48:	90 93 88 06 	sts	0x0688, r25
    2a4c:	a0 93 89 06 	sts	0x0689, r26
    2a50:	b0 93 8a 06 	sts	0x068A, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2a54:	81 ec       	ldi	r24, 0xC1	; 193
    2a56:	9a ec       	ldi	r25, 0xCA	; 202
    2a58:	a1 e3       	ldi	r26, 0x31	; 49
    2a5a:	b2 e4       	ldi	r27, 0x42	; 66
    2a5c:	80 93 8b 06 	sts	0x068B, r24
    2a60:	90 93 8c 06 	sts	0x068C, r25
    2a64:	a0 93 8d 06 	sts	0x068D, r26
    2a68:	b0 93 8e 06 	sts	0x068E, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2a6c:	88 e0       	ldi	r24, 0x08	; 8
    2a6e:	80 93 90 06 	sts	0x0690, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a0 ef       	ldi	r26, 0xF0	; 240
    2a78:	b3 e4       	ldi	r27, 0x43	; 67
    2a7a:	80 93 91 06 	sts	0x0691, r24
    2a7e:	90 93 92 06 	sts	0x0692, r25
    2a82:	a0 93 93 06 	sts	0x0693, r26
    2a86:	b0 93 94 06 	sts	0x0694, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2a8a:	80 93 95 06 	sts	0x0695, r24
    2a8e:	90 93 96 06 	sts	0x0696, r25
    2a92:	a0 93 97 06 	sts	0x0697, r26
    2a96:	b0 93 98 06 	sts	0x0698, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2a9a:	8a e9       	ldi	r24, 0x9A	; 154
    2a9c:	99 e9       	ldi	r25, 0x99	; 153
    2a9e:	a9 e9       	ldi	r26, 0x99	; 153
    2aa0:	b0 e4       	ldi	r27, 0x40	; 64
    2aa2:	80 93 9d 06 	sts	0x069D, r24
    2aa6:	90 93 9e 06 	sts	0x069E, r25
    2aaa:	a0 93 9f 06 	sts	0x069F, r26
    2aae:	b0 93 a0 06 	sts	0x06A0, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2ab2:	8d ec       	ldi	r24, 0xCD	; 205
    2ab4:	9c ec       	ldi	r25, 0xCC	; 204
    2ab6:	ac ec       	ldi	r26, 0xCC	; 204
    2ab8:	bd e3       	ldi	r27, 0x3D	; 61
    2aba:	80 93 99 06 	sts	0x0699, r24
    2abe:	90 93 9a 06 	sts	0x069A, r25
    2ac2:	a0 93 9b 06 	sts	0x069B, r26
    2ac6:	b0 93 9c 06 	sts	0x069C, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a8 e4       	ldi	r26, 0x48	; 72
    2ad0:	b2 e4       	ldi	r27, 0x42	; 66
    2ad2:	80 93 a1 06 	sts	0x06A1, r24
    2ad6:	90 93 a2 06 	sts	0x06A2, r25
    2ada:	a0 93 a3 06 	sts	0x06A3, r26
    2ade:	b0 93 a4 06 	sts	0x06A4, r27
}
    2ae2:	08 95       	ret

00002ae4 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 47 03 	call	0x68e	; 0x68e <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2aec:	87 36       	cpi	r24, 0x67	; 103
    2aee:	31 f0       	breq	.+12     	; 0x2afc <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	a9 f0       	breq	.+42     	; 0x2b1e <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2af8:	c9 01       	movw	r24, r18
    2afa:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2afc:	8f e7       	ldi	r24, 0x7F	; 127
    2afe:	96 e0       	ldi	r25, 0x06	; 6
    2b00:	61 e0       	ldi	r22, 0x01	; 1
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	46 e2       	ldi	r20, 0x26	; 38
    2b06:	50 e0       	ldi	r21, 0x00	; 0
    2b08:	0e 94 b4 03 	call	0x768	; 0x768 <memcpy_from_eeprom_with_checksum>
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	89 2b       	or	r24, r25
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <read_settings+0x30>
    2b12:	21 e0       	ldi	r18, 0x01	; 1
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	28 27       	eor	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2b1a:	c9 01       	movw	r24, r18
    2b1c:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2b1e:	8f e7       	ldi	r24, 0x7F	; 127
    2b20:	96 e0       	ldi	r25, 0x06	; 6
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	4b e1       	ldi	r20, 0x1B	; 27
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	0e 94 b4 03 	call	0x768	; 0x768 <memcpy_from_eeprom_with_checksum>
    2b2e:	89 2b       	or	r24, r25
    2b30:	09 f3       	breq	.-62     	; 0x2af4 <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2b32:	8a e9       	ldi	r24, 0x9A	; 154
    2b34:	99 e9       	ldi	r25, 0x99	; 153
    2b36:	a9 e9       	ldi	r26, 0x99	; 153
    2b38:	b0 e4       	ldi	r27, 0x40	; 64
    2b3a:	80 93 9d 06 	sts	0x069D, r24
    2b3e:	90 93 9e 06 	sts	0x069E, r25
    2b42:	a0 93 9f 06 	sts	0x069F, r26
    2b46:	b0 93 a0 06 	sts	0x06A0, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a8 e4       	ldi	r26, 0x48	; 72
    2b50:	b2 e4       	ldi	r27, 0x42	; 66
    2b52:	80 93 a1 06 	sts	0x06A1, r24
    2b56:	90 93 a2 06 	sts	0x06A2, r25
    2b5a:	a0 93 a3 06 	sts	0x06A3, r26
    2b5e:	b0 93 a4 06 	sts	0x06A4, r27
    2b62:	21 e0       	ldi	r18, 0x01	; 1
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	c8 cf       	rjmp	.-112    	; 0x2af8 <read_settings+0x14>

00002b68 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	67 e6       	ldi	r22, 0x67	; 103
    2b6e:	0e 94 4f 03 	call	0x69e	; 0x69e <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	6f e7       	ldi	r22, 0x7F	; 127
    2b78:	76 e0       	ldi	r23, 0x06	; 6
    2b7a:	46 e2       	ldi	r20, 0x26	; 38
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <memcpy_to_eeprom_with_checksum>
}
    2b82:	08 95       	ret

00002b84 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2b84:	fc 01       	movw	r30, r24
  switch(parameter) {
    2b86:	86 30       	cpi	r24, 0x06	; 6
    2b88:	91 05       	cpc	r25, r1
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <settings_store_setting+0xa>
    2b8c:	6d c0       	rjmp	.+218    	; 0x2c68 <settings_store_setting+0xe4>
    2b8e:	87 30       	cpi	r24, 0x07	; 7
    2b90:	91 05       	cpc	r25, r1
    2b92:	a4 f0       	brlt	.+40     	; 0x2bbc <settings_store_setting+0x38>
    2b94:	88 30       	cpi	r24, 0x08	; 8
    2b96:	91 05       	cpc	r25, r1
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <settings_store_setting+0x18>
    2b9a:	48 c0       	rjmp	.+144    	; 0x2c2c <settings_store_setting+0xa8>
    2b9c:	88 30       	cpi	r24, 0x08	; 8
    2b9e:	91 05       	cpc	r25, r1
    2ba0:	b4 f1       	brlt	.+108    	; 0x2c0e <settings_store_setting+0x8a>
    2ba2:	89 30       	cpi	r24, 0x09	; 9
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <settings_store_setting+0x26>
    2ba8:	7b c0       	rjmp	.+246    	; 0x2ca0 <settings_store_setting+0x11c>
    2baa:	e8 5e       	subi	r30, 0xE8	; 232
    2bac:	f3 40       	sbci	r31, 0x03	; 3
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <settings_store_setting+0x2e>
    2bb0:	6a c0       	rjmp	.+212    	; 0x2c86 <settings_store_setting+0x102>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2bb2:	8d ed       	ldi	r24, 0xDD	; 221
    2bb4:	93 e0       	ldi	r25, 0x03	; 3
    2bb6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2bba:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    2bbc:	84 30       	cpi	r24, 0x04	; 4
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <settings_store_setting+0x40>
    2bc2:	43 c0       	rjmp	.+134    	; 0x2c4a <settings_store_setting+0xc6>
    2bc4:	85 30       	cpi	r24, 0x05	; 5
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	9c f4       	brge	.+38     	; 0x2bf0 <settings_store_setting+0x6c>
    2bca:	97 fd       	sbrc	r25, 7
    2bcc:	f2 cf       	rjmp	.-28     	; 0x2bb2 <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2bce:	ee 0f       	add	r30, r30
    2bd0:	ff 1f       	adc	r31, r31
    2bd2:	ee 0f       	add	r30, r30
    2bd4:	ff 1f       	adc	r31, r31
    2bd6:	e1 58       	subi	r30, 0x81	; 129
    2bd8:	f9 4f       	sbci	r31, 0xF9	; 249
    2bda:	40 83       	st	Z, r20
    2bdc:	51 83       	std	Z+1, r21	; 0x01
    2bde:	62 83       	std	Z+2, r22	; 0x02
    2be0:	73 83       	std	Z+3, r23	; 0x03
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2be2:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	93 e0       	ldi	r25, 0x03	; 3
    2bea:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2bee:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    2bf0:	40 93 91 06 	sts	0x0691, r20
    2bf4:	50 93 92 06 	sts	0x0692, r21
    2bf8:	60 93 93 06 	sts	0x0693, r22
    2bfc:	70 93 94 06 	sts	0x0694, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c00:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c04:	88 ec       	ldi	r24, 0xC8	; 200
    2c06:	93 e0       	ldi	r25, 0x03	; 3
    2c08:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2c0c:	08 95       	ret
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    2c0e:	40 93 99 06 	sts	0x0699, r20
    2c12:	50 93 9a 06 	sts	0x069A, r21
    2c16:	60 93 9b 06 	sts	0x069B, r22
    2c1a:	70 93 9c 06 	sts	0x069C, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c1e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c22:	88 ec       	ldi	r24, 0xC8	; 200
    2c24:	93 e0       	ldi	r25, 0x03	; 3
    2c26:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2c2a:	08 95       	ret
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    2c2c:	40 93 9d 06 	sts	0x069D, r20
    2c30:	50 93 9e 06 	sts	0x069E, r21
    2c34:	60 93 9f 06 	sts	0x069F, r22
    2c38:	70 93 a0 06 	sts	0x06A0, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c3c:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c40:	88 ec       	ldi	r24, 0xC8	; 200
    2c42:	93 e0       	ldi	r25, 0x03	; 3
    2c44:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2c48:	08 95       	ret
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	ba 01       	movw	r22, r20
    2c4e:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <round>
    2c52:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__fixunssfsi>
    2c56:	60 93 90 06 	sts	0x0690, r22
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c5a:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c5e:	88 ec       	ldi	r24, 0xC8	; 200
    2c60:	93 e0       	ldi	r25, 0x03	; 3
    2c62:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2c66:	08 95       	ret
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    2c68:	40 93 95 06 	sts	0x0695, r20
    2c6c:	50 93 96 06 	sts	0x0696, r21
    2c70:	60 93 97 06 	sts	0x0697, r22
    2c74:	70 93 98 06 	sts	0x0698, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c78:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c7c:	88 ec       	ldi	r24, 0xC8	; 200
    2c7e:	93 e0       	ldi	r25, 0x03	; 3
    2c80:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2c84:	08 95       	ret
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    2c86:	cb 01       	movw	r24, r22
    2c88:	ba 01       	movw	r22, r20
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
    2c96:	88 23       	and	r24, r24
    2c98:	a9 f0       	breq	.+42     	; 0x2cc4 <settings_store_setting+0x140>
    2c9a:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <st_enable>
    2c9e:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    2ca0:	db 01       	movw	r26, r22
    2ca2:	ca 01       	movw	r24, r20
    2ca4:	bf 77       	andi	r27, 0x7F	; 127
    2ca6:	80 93 a1 06 	sts	0x06A1, r24
    2caa:	90 93 a2 06 	sts	0x06A2, r25
    2cae:	a0 93 a3 06 	sts	0x06A3, r26
    2cb2:	b0 93 a4 06 	sts	0x06A4, r27
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2cb6:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2cba:	88 ec       	ldi	r24, 0xC8	; 200
    2cbc:	93 e0       	ldi	r25, 0x03	; 3
    2cbe:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    2cc2:	08 95       	ret
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    2cc4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <st_disable>
    2cc8:	08 95       	ret

00002cca <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2cca:	81 eb       	ldi	r24, 0xB1	; 177
    2ccc:	95 e0       	ldi	r25, 0x05	; 5
    2cce:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2cd2:	8a ea       	ldi	r24, 0xAA	; 170
    2cd4:	95 e0       	ldi	r25, 0x05	; 5
    2cd6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printPgmString(PSTR("\r\n"));
    2cda:	87 ea       	ldi	r24, 0xA7	; 167
    2cdc:	95 e0       	ldi	r25, 0x05	; 5
    2cde:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2ce2:	81 ea       	ldi	r24, 0xA1	; 161
    2ce4:	95 e0       	ldi	r25, 0x05	; 5
    2ce6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2cea:	60 91 7f 06 	lds	r22, 0x067F
    2cee:	70 91 80 06 	lds	r23, 0x0680
    2cf2:	80 91 81 06 	lds	r24, 0x0681
    2cf6:	90 91 82 06 	lds	r25, 0x0682
    2cfa:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2cfe:	81 e9       	ldi	r24, 0x91	; 145
    2d00:	95 e0       	ldi	r25, 0x05	; 5
    2d02:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2d06:	8b e8       	ldi	r24, 0x8B	; 139
    2d08:	95 e0       	ldi	r25, 0x05	; 5
    2d0a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2d0e:	60 91 83 06 	lds	r22, 0x0683
    2d12:	70 91 84 06 	lds	r23, 0x0684
    2d16:	80 91 85 06 	lds	r24, 0x0685
    2d1a:	90 91 86 06 	lds	r25, 0x0686
    2d1e:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2d22:	8b e7       	ldi	r24, 0x7B	; 123
    2d24:	95 e0       	ldi	r25, 0x05	; 5
    2d26:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2d2a:	85 e7       	ldi	r24, 0x75	; 117
    2d2c:	95 e0       	ldi	r25, 0x05	; 5
    2d2e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2d32:	60 91 87 06 	lds	r22, 0x0687
    2d36:	70 91 88 06 	lds	r23, 0x0688
    2d3a:	80 91 89 06 	lds	r24, 0x0689
    2d3e:	90 91 8a 06 	lds	r25, 0x068A
    2d42:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2d46:	85 e6       	ldi	r24, 0x65	; 101
    2d48:	95 e0       	ldi	r25, 0x05	; 5
    2d4a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2d4e:	8f e5       	ldi	r24, 0x5F	; 95
    2d50:	95 e0       	ldi	r25, 0x05	; 5
    2d52:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2d56:	60 91 8b 06 	lds	r22, 0x068B
    2d5a:	70 91 8c 06 	lds	r23, 0x068C
    2d5e:	80 91 8d 06 	lds	r24, 0x068D
    2d62:	90 91 8e 06 	lds	r25, 0x068E
    2d66:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2d6a:	8d e4       	ldi	r24, 0x4D	; 77
    2d6c:	95 e0       	ldi	r25, 0x05	; 5
    2d6e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2d72:	87 e4       	ldi	r24, 0x47	; 71
    2d74:	95 e0       	ldi	r25, 0x05	; 5
    2d76:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printInteger(settings.pulse_microseconds);
    2d7a:	60 91 90 06 	lds	r22, 0x0690
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2d88:	8a e2       	ldi	r24, 0x2A	; 42
    2d8a:	95 e0       	ldi	r25, 0x05	; 5
    2d8c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2d90:	84 e2       	ldi	r24, 0x24	; 36
    2d92:	95 e0       	ldi	r25, 0x05	; 5
    2d94:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.default_feed_rate);
    2d98:	60 91 91 06 	lds	r22, 0x0691
    2d9c:	70 91 92 06 	lds	r23, 0x0692
    2da0:	80 91 93 06 	lds	r24, 0x0693
    2da4:	90 91 94 06 	lds	r25, 0x0694
    2da8:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2dac:	86 e0       	ldi	r24, 0x06	; 6
    2dae:	95 e0       	ldi	r25, 0x05	; 5
    2db0:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	95 e0       	ldi	r25, 0x05	; 5
    2db8:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.default_seek_rate);
    2dbc:	60 91 95 06 	lds	r22, 0x0695
    2dc0:	70 91 96 06 	lds	r23, 0x0696
    2dc4:	80 91 97 06 	lds	r24, 0x0697
    2dc8:	90 91 98 06 	lds	r25, 0x0698
    2dcc:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2dd0:	82 ee       	ldi	r24, 0xE2	; 226
    2dd2:	94 e0       	ldi	r25, 0x04	; 4
    2dd4:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2dd8:	8c ed       	ldi	r24, 0xDC	; 220
    2dda:	94 e0       	ldi	r25, 0x04	; 4
    2ddc:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2de0:	60 91 99 06 	lds	r22, 0x0699
    2de4:	70 91 9a 06 	lds	r23, 0x069A
    2de8:	80 91 9b 06 	lds	r24, 0x069B
    2dec:	90 91 9c 06 	lds	r25, 0x069C
    2df0:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2df4:	88 ec       	ldi	r24, 0xC8	; 200
    2df6:	94 e0       	ldi	r25, 0x04	; 4
    2df8:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2dfc:	82 ec       	ldi	r24, 0xC2	; 194
    2dfe:	94 e0       	ldi	r25, 0x04	; 4
    2e00:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.acceleration);
    2e04:	60 91 9d 06 	lds	r22, 0x069D
    2e08:	70 91 9e 06 	lds	r23, 0x069E
    2e0c:	80 91 9f 06 	lds	r24, 0x069F
    2e10:	90 91 a0 06 	lds	r25, 0x06A0
    2e14:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2e18:	84 ea       	ldi	r24, 0xA4	; 164
    2e1a:	94 e0       	ldi	r25, 0x04	; 4
    2e1c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2e20:	8e e9       	ldi	r24, 0x9E	; 158
    2e22:	94 e0       	ldi	r25, 0x04	; 4
    2e24:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printFloat(settings.max_jerk);
    2e28:	60 91 a1 06 	lds	r22, 0x06A1
    2e2c:	70 91 a2 06 	lds	r23, 0x06A2
    2e30:	80 91 a3 06 	lds	r24, 0x06A3
    2e34:	90 91 a4 06 	lds	r25, 0x06A4
    2e38:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2e3c:	86 e6       	ldi	r24, 0x66	; 102
    2e3e:	94 e0       	ldi	r25, 0x04	; 4
    2e40:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2e44:	8d e5       	ldi	r24, 0x5D	; 93
    2e46:	94 e0       	ldi	r25, 0x04	; 4
    2e48:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
  printInteger(st_is_enabled());
    2e4c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <st_is_enabled>
    2e50:	aa 27       	eor	r26, r26
    2e52:	97 fd       	sbrc	r25, 7
    2e54:	a0 95       	com	r26
    2e56:	ba 2f       	mov	r27, r26
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2e60:	84 e3       	ldi	r24, 0x34	; 52
    2e62:	94 e0       	ldi	r25, 0x04	; 4
    2e64:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2e68:	81 ef       	ldi	r24, 0xF1	; 241
    2e6a:	93 e0       	ldi	r25, 0x03	; 3
    2e6c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
}
    2e70:	08 95       	ret

00002e72 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2e72:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <read_settings>
    2e76:	89 2b       	or	r24, r25
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <settings_init+0xa>
    2e7a:	08 95       	ret
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2e7c:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <settings_reset>
    write_settings();
    2e80:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <write_settings>
    settings_dump();
    2e84:	0e 94 65 16 	call	0x2cca	; 0x2cca <settings_dump>
    2e88:	08 95       	ret

00002e8a <spindle_init>:
#include <avr/io.h>
#include <avr/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2e8a:	e1 e0       	ldi	r30, 0x01	; 1
    2e8c:	f1 e0       	ldi	r31, 0x01	; 1
    2e8e:	80 81       	ld	r24, Z
    2e90:	80 64       	ori	r24, 0x40	; 64
    2e92:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2e94:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2e96:	3e 9a       	sbi	0x07, 6	; 7

}
    2e98:	08 95       	ret

00002e9a <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2e9a:	97 fd       	sbrc	r25, 7
    2e9c:	07 c0       	rjmp	.+14     	; 0x2eac <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2e9e:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2ea0:	80 91 02 01 	lds	r24, 0x0102
    2ea4:	80 64       	ori	r24, 0x40	; 64
    2ea6:	80 93 02 01 	sts	0x0102, r24
}
    2eaa:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2eac:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2eae:	80 91 02 01 	lds	r24, 0x0102
    2eb2:	80 64       	ori	r24, 0x40	; 64
    2eb4:	80 93 02 01 	sts	0x0102, r24
}
    2eb8:	08 95       	ret

00002eba <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2eba:	e2 e0       	ldi	r30, 0x02	; 2
    2ebc:	f1 e0       	ldi	r31, 0x01	; 1
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8f 7b       	andi	r24, 0xBF	; 191
    2ec2:	80 83       	st	Z, r24
}
    2ec4:	08 95       	ret

00002ec6 <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ec6:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ec8:	40 e7       	ldi	r20, 0x70	; 112
    2eca:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2ecc:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ece:	23 2f       	mov	r18, r19
    2ed0:	2a 95       	dec	r18
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2ed4:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ed6:	fa 01       	movw	r30, r20
    2ed8:	31 97       	sbiw	r30, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	2f ef       	ldi	r18, 0xFF	; 255
    2ee0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ee2:	92 07       	cpc	r25, r18
    2ee4:	99 f7       	brne	.-26     	; 0x2ecc <rotate_head+0x6>

}
    2ee6:	08 95       	ret

00002ee8 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2ee8:	ef e6       	ldi	r30, 0x6F	; 111
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	82 60       	ori	r24, 0x02	; 2
    2ef0:	80 83       	st	Z, r24
}
    2ef2:	08 95       	ret

00002ef4 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	90 93 6c 05 	sts	0x056C, r25
    2efa:	80 93 6b 05 	sts	0x056B, r24
}
    2efe:	08 95       	ret

00002f00 <get_busy>:

int get_busy( void ) 
{
	return busy;
    2f00:	20 91 6b 05 	lds	r18, 0x056B
    2f04:	30 91 6c 05 	lds	r19, 0x056C
}
    2f08:	c9 01       	movw	r24, r18
    2f0a:	08 95       	ret

00002f0c <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2f18:	81 b3       	in	r24, 0x11	; 17
    2f1a:	85 63       	ori	r24, 0x35	; 53
    2f1c:	81 bb       	out	0x11, r24	; 17
}
    2f1e:	8f 91       	pop	r24
    2f20:	0f 90       	pop	r0
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	0f 90       	pop	r0
    2f26:	1f 90       	pop	r1
    2f28:	18 95       	reti

00002f2a <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f2a:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2f2c:	08 95       	ret

00002f2e <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f2e:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2f30:	08 95       	ret

00002f32 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2f32:	3c 99       	sbic	0x07, 4	; 7
    2f34:	04 c0       	rjmp	.+8      	; 0x2f3e <st_is_enabled+0xc>
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2f3a:	c9 01       	movw	r24, r18
    2f3c:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2f3e:	88 b1       	in	r24, 0x08	; 8
    2f40:	82 95       	swap	r24
    2f42:	8f 70       	andi	r24, 0x0F	; 15
    2f44:	80 95       	com	r24
    2f46:	81 70       	andi	r24, 0x01	; 1
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2f4c:	c9 01       	movw	r24, r18
    2f4e:	08 95       	ret

00002f50 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2f50:	60 30       	cpi	r22, 0x00	; 0
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	72 07       	cpc	r23, r18
    2f56:	21 e0       	ldi	r18, 0x01	; 1
    2f58:	82 07       	cpc	r24, r18
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	92 07       	cpc	r25, r18
    2f5e:	08 f4       	brcc	.+2      	; 0x2f62 <config_step_timer+0x12>
    2f60:	5c c0       	rjmp	.+184    	; 0x301a <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    2f62:	60 30       	cpi	r22, 0x00	; 0
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	72 07       	cpc	r23, r18
    2f68:	28 e0       	ldi	r18, 0x08	; 8
    2f6a:	82 07       	cpc	r24, r18
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	92 07       	cpc	r25, r18
    2f70:	78 f1       	brcs	.+94     	; 0x2fd0 <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    2f72:	60 30       	cpi	r22, 0x00	; 0
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	72 07       	cpc	r23, r18
    2f78:	20 e4       	ldi	r18, 0x40	; 64
    2f7a:	82 07       	cpc	r24, r18
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	92 07       	cpc	r25, r18
    2f80:	08 f4       	brcc	.+2      	; 0x2f84 <config_step_timer+0x34>
    2f82:	51 c0       	rjmp	.+162    	; 0x3026 <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    2f84:	60 30       	cpi	r22, 0x00	; 0
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	72 07       	cpc	r23, r18
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	82 07       	cpc	r24, r18
    2f8e:	21 e0       	ldi	r18, 0x01	; 1
    2f90:	92 07       	cpc	r25, r18
    2f92:	08 f4       	brcc	.+2      	; 0x2f96 <config_step_timer+0x46>
    2f94:	6d c0       	rjmp	.+218    	; 0x3070 <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    2f96:	60 30       	cpi	r22, 0x00	; 0
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	72 07       	cpc	r23, r18
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	82 07       	cpc	r24, r18
    2fa0:	24 e0       	ldi	r18, 0x04	; 4
    2fa2:	92 07       	cpc	r25, r18
    2fa4:	08 f0       	brcs	.+2      	; 0x2fa8 <config_step_timer+0x58>
    2fa6:	71 c0       	rjmp	.+226    	; 0x308a <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    2fa8:	2a e0       	ldi	r18, 0x0A	; 10
    2faa:	96 95       	lsr	r25
    2fac:	87 95       	ror	r24
    2fae:	77 95       	ror	r23
    2fb0:	67 95       	ror	r22
    2fb2:	2a 95       	dec	r18
    2fb4:	d1 f7       	brne	.-12     	; 0x2faa <config_step_timer+0x5a>
    2fb6:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    2fb8:	9b 01       	movw	r18, r22
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	8a e0       	ldi	r24, 0x0A	; 10
    2fc0:	22 0f       	add	r18, r18
    2fc2:	33 1f       	adc	r19, r19
    2fc4:	44 1f       	adc	r20, r20
    2fc6:	55 1f       	adc	r21, r21
    2fc8:	8a 95       	dec	r24
    2fca:	d1 f7       	brne	.-12     	; 0x2fc0 <config_step_timer+0x70>
    2fcc:	95 e0       	ldi	r25, 0x05	; 5
    2fce:	18 c0       	rjmp	.+48     	; 0x3000 <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    2fd0:	23 e0       	ldi	r18, 0x03	; 3
    2fd2:	96 95       	lsr	r25
    2fd4:	87 95       	ror	r24
    2fd6:	77 95       	ror	r23
    2fd8:	67 95       	ror	r22
    2fda:	2a 95       	dec	r18
    2fdc:	d1 f7       	brne	.-12     	; 0x2fd2 <config_step_timer+0x82>
    2fde:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2fe0:	9b 01       	movw	r18, r22
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	22 0f       	add	r18, r18
    2fe8:	33 1f       	adc	r19, r19
    2fea:	44 1f       	adc	r20, r20
    2fec:	55 1f       	adc	r21, r21
    2fee:	22 0f       	add	r18, r18
    2ff0:	33 1f       	adc	r19, r19
    2ff2:	44 1f       	adc	r20, r20
    2ff4:	55 1f       	adc	r21, r21
    2ff6:	22 0f       	add	r18, r18
    2ff8:	33 1f       	adc	r19, r19
    2ffa:	44 1f       	adc	r20, r20
    2ffc:	55 1f       	adc	r21, r21
    2ffe:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3000:	80 91 81 00 	lds	r24, 0x0081
    3004:	88 7f       	andi	r24, 0xF8	; 248
    3006:	98 2b       	or	r25, r24
    3008:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    300c:	f0 93 89 00 	sts	0x0089, r31
    3010:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    3014:	b9 01       	movw	r22, r18
    3016:	ca 01       	movw	r24, r20
    3018:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    301a:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    301c:	9b 01       	movw	r18, r22
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	91 e0       	ldi	r25, 0x01	; 1
    3024:	ed cf       	rjmp	.-38     	; 0x3000 <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    3026:	b6 e0       	ldi	r27, 0x06	; 6
    3028:	96 95       	lsr	r25
    302a:	87 95       	ror	r24
    302c:	77 95       	ror	r23
    302e:	67 95       	ror	r22
    3030:	ba 95       	dec	r27
    3032:	d1 f7       	brne	.-12     	; 0x3028 <config_step_timer+0xd8>
    3034:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    3036:	9b 01       	movw	r18, r22
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	22 0f       	add	r18, r18
    303e:	33 1f       	adc	r19, r19
    3040:	44 1f       	adc	r20, r20
    3042:	55 1f       	adc	r21, r21
    3044:	22 0f       	add	r18, r18
    3046:	33 1f       	adc	r19, r19
    3048:	44 1f       	adc	r20, r20
    304a:	55 1f       	adc	r21, r21
    304c:	22 0f       	add	r18, r18
    304e:	33 1f       	adc	r19, r19
    3050:	44 1f       	adc	r20, r20
    3052:	55 1f       	adc	r21, r21
    3054:	22 0f       	add	r18, r18
    3056:	33 1f       	adc	r19, r19
    3058:	44 1f       	adc	r20, r20
    305a:	55 1f       	adc	r21, r21
    305c:	22 0f       	add	r18, r18
    305e:	33 1f       	adc	r19, r19
    3060:	44 1f       	adc	r20, r20
    3062:	55 1f       	adc	r21, r21
    3064:	22 0f       	add	r18, r18
    3066:	33 1f       	adc	r19, r19
    3068:	44 1f       	adc	r20, r20
    306a:	55 1f       	adc	r21, r21
    306c:	93 e0       	ldi	r25, 0x03	; 3
    306e:	c8 cf       	rjmp	.-112    	; 0x3000 <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    3070:	bb 27       	eor	r27, r27
    3072:	a9 2f       	mov	r26, r25
    3074:	98 2f       	mov	r25, r24
    3076:	87 2f       	mov	r24, r23
    3078:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    307a:	a0 e0       	ldi	r26, 0x00	; 0
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	22 27       	eor	r18, r18
    3080:	38 2f       	mov	r19, r24
    3082:	49 2f       	mov	r20, r25
    3084:	5a 2f       	mov	r21, r26
    3086:	94 e0       	ldi	r25, 0x04	; 4
    3088:	bb cf       	rjmp	.-138    	; 0x3000 <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    308a:	ef ef       	ldi	r30, 0xFF	; 255
    308c:	ff ef       	ldi	r31, 0xFF	; 255
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	3c ef       	ldi	r19, 0xFC	; 252
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	50 e0       	ldi	r21, 0x00	; 0
    3096:	95 e0       	ldi	r25, 0x05	; 5
    3098:	b3 cf       	rjmp	.-154    	; 0x3000 <config_step_timer+0xb0>

0000309a <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    309a:	9b 01       	movw	r18, r22
    309c:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    309e:	20 3b       	cpi	r18, 0xB0	; 176
    30a0:	84 e0       	ldi	r24, 0x04	; 4
    30a2:	38 07       	cpc	r19, r24
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	48 07       	cpc	r20, r24
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	58 07       	cpc	r21, r24
    30ac:	78 f4       	brcc	.+30     	; 0x30cc <set_step_events_per_minute+0x32>
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	75 e3       	ldi	r23, 0x35	; 53
    30b2:	8c e0       	ldi	r24, 0x0C	; 12
    30b4:	90 e0       	ldi	r25, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    30b6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <config_step_timer>
    30ba:	60 93 6d 05 	sts	0x056D, r22
    30be:	70 93 6e 05 	sts	0x056E, r23
    30c2:	80 93 6f 05 	sts	0x056F, r24
    30c6:	90 93 70 05 	sts	0x0570, r25
}
    30ca:	08 95       	ret
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    30cc:	60 e0       	ldi	r22, 0x00	; 0
    30ce:	70 e7       	ldi	r23, 0x70	; 112
    30d0:	88 e3       	ldi	r24, 0x38	; 56
    30d2:	99 e3       	ldi	r25, 0x39	; 57
    30d4:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__udivmodsi4>
    30d8:	c9 01       	movw	r24, r18
    30da:	da 01       	movw	r26, r20
    30dc:	bc 01       	movw	r22, r24
    30de:	cd 01       	movw	r24, r26
    30e0:	ea cf       	rjmp	.-44     	; 0x30b6 <set_step_events_per_minute+0x1c>

000030e2 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    30e2:	80 b3       	in	r24, 0x10	; 16
    30e4:	85 63       	ori	r24, 0x35	; 53
    30e6:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    30e8:	80 b3       	in	r24, 0x10	; 16
    30ea:	8a 6c       	ori	r24, 0xCA	; 202
    30ec:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    30ee:	81 b3       	in	r24, 0x11	; 17
    30f0:	85 63       	ori	r24, 0x35	; 53
    30f2:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    30f4:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    30f6:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    30f8:	e1 e8       	ldi	r30, 0x81	; 129
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	8f 7e       	andi	r24, 0xEF	; 239
    3100:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    3102:	80 81       	ld	r24, Z
    3104:	88 60       	ori	r24, 0x08	; 8
    3106:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    3108:	e0 e8       	ldi	r30, 0x80	; 128
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	8d 7f       	andi	r24, 0xFD	; 253
    3110:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    3112:	80 81       	ld	r24, Z
    3114:	8e 7f       	andi	r24, 0xFE	; 254
    3116:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    3118:	80 81       	ld	r24, Z
    311a:	8f 73       	andi	r24, 0x3F	; 63
    311c:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    311e:	80 81       	ld	r24, Z
    3120:	8f 7c       	andi	r24, 0xCF	; 207
    3122:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    3124:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    312e:	e0 e7       	ldi	r30, 0x70	; 112
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	81 60       	ori	r24, 0x01	; 1
    3136:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    3138:	60 e7       	ldi	r22, 0x70	; 112
    313a:	77 e1       	ldi	r23, 0x17	; 23
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 4d 18 	call	0x309a	; 0x309a <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    3144:	ef e6       	ldi	r30, 0x6F	; 111
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	8d 7f       	andi	r24, 0xFD	; 253
    314c:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    314e:	10 92 71 05 	sts	0x0571, r1
    3152:	10 92 72 05 	sts	0x0572, r1
    3156:	10 92 73 05 	sts	0x0573, r1
    315a:	10 92 74 05 	sts	0x0574, r1
  
  sei();
    315e:	78 94       	sei
}
    3160:	08 95       	ret

00003162 <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    3162:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3164:	81 b3       	in	r24, 0x11	; 17
    3166:	85 73       	andi	r24, 0x35	; 53
    3168:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    316a:	21 15       	cp	r18, r1
    316c:	31 05       	cpc	r19, r1
    316e:	e1 f0       	breq	.+56     	; 0x31a8 <moveLeft+0x46>

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    3170:	4b 99       	sbic	0x09, 3	; 9
    3172:	1c c0       	rjmp	.+56     	; 0x31ac <moveLeft+0x4a>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3174:	21 50       	subi	r18, 0x01	; 1
    3176:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3178:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    317a:	40 e6       	ldi	r20, 0x60	; 96
    317c:	54 e0       	ldi	r21, 0x04	; 4
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <moveLeft+0x26>

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    3180:	21 50       	subi	r18, 0x01	; 1
    3182:	30 40       	sbci	r19, 0x00	; 0
    3184:	4b 99       	sbic	0x09, 3	; 9
    3186:	12 c0       	rjmp	.+36     	; 0x31ac <moveLeft+0x4a>
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3188:	81 b3       	in	r24, 0x11	; 17
    318a:	8a 7c       	andi	r24, 0xCA	; 202
    318c:	81 60       	ori	r24, 0x01	; 1
    318e:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3190:	89 2f       	mov	r24, r25
    3192:	8a 95       	dec	r24
    3194:	f1 f7       	brne	.-4      	; 0x3192 <moveLeft+0x30>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3196:	81 b3       	in	r24, 0x11	; 17
    3198:	8a 7c       	andi	r24, 0xCA	; 202
    319a:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    319c:	fa 01       	movw	r30, r20
    319e:	31 97       	sbiw	r30, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <moveLeft+0x3c>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31a2:	21 15       	cp	r18, r1
    31a4:	31 05       	cpc	r19, r1
    31a6:	61 f7       	brne	.-40     	; 0x3180 <moveLeft+0x1e>
    31a8:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    31aa:	08 95       	ret
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	08 95       	ret

000031b0 <moveRight>:

	return TRUE;
}

unsigned char moveRight( unsigned int distance ) 
{
    31b0:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    31b2:	81 b3       	in	r24, 0x11	; 17
    31b4:	85 73       	andi	r24, 0x35	; 53
    31b6:	82 60       	ori	r24, 0x02	; 2
    31b8:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    31ba:	21 15       	cp	r18, r1
    31bc:	31 05       	cpc	r19, r1
    31be:	e1 f0       	breq	.+56     	; 0x31f8 <moveRight+0x48>

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    31c0:	4a 99       	sbic	0x09, 2	; 9
    31c2:	1c c0       	rjmp	.+56     	; 0x31fc <moveRight+0x4c>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31c4:	21 50       	subi	r18, 0x01	; 1
    31c6:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31c8:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31ca:	40 e6       	ldi	r20, 0x60	; 96
    31cc:	54 e0       	ldi	r21, 0x04	; 4
    31ce:	04 c0       	rjmp	.+8      	; 0x31d8 <moveRight+0x28>

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    31d0:	21 50       	subi	r18, 0x01	; 1
    31d2:	30 40       	sbci	r19, 0x00	; 0
    31d4:	4a 99       	sbic	0x09, 2	; 9
    31d6:	12 c0       	rjmp	.+36     	; 0x31fc <moveRight+0x4c>
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    31d8:	81 b3       	in	r24, 0x11	; 17
    31da:	8a 7c       	andi	r24, 0xCA	; 202
    31dc:	81 60       	ori	r24, 0x01	; 1
    31de:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31e0:	89 2f       	mov	r24, r25
    31e2:	8a 95       	dec	r24
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <moveRight+0x32>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    31e6:	81 b3       	in	r24, 0x11	; 17
    31e8:	8a 7c       	andi	r24, 0xCA	; 202
    31ea:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31ec:	fa 01       	movw	r30, r20
    31ee:	31 97       	sbiw	r30, 0x01	; 1
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <moveRight+0x3e>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31f2:	21 15       	cp	r18, r1
    31f4:	31 05       	cpc	r19, r1
    31f6:	61 f7       	brne	.-40     	; 0x31d0 <moveRight+0x20>
    31f8:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    31fa:	08 95       	ret
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	08 95       	ret

00003200 <moveForward>:
  }
	return TRUE;
}

unsigned char moveForward( unsigned int distance ) 
{
    3200:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3202:	81 b3       	in	r24, 0x11	; 17
    3204:	85 73       	andi	r24, 0x35	; 53
    3206:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3208:	21 15       	cp	r18, r1
    320a:	31 05       	cpc	r19, r1
    320c:	e1 f0       	breq	.+56     	; 0x3246 <moveForward+0x46>

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    320e:	48 99       	sbic	0x09, 0	; 9
    3210:	1c c0       	rjmp	.+56     	; 0x324a <moveForward+0x4a>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3212:	21 50       	subi	r18, 0x01	; 1
    3214:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3216:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3218:	40 e6       	ldi	r20, 0x60	; 96
    321a:	54 e0       	ldi	r21, 0x04	; 4
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <moveForward+0x26>

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    321e:	21 50       	subi	r18, 0x01	; 1
    3220:	30 40       	sbci	r19, 0x00	; 0
    3222:	48 99       	sbic	0x09, 0	; 9
    3224:	12 c0       	rjmp	.+36     	; 0x324a <moveForward+0x4a>
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3226:	81 b3       	in	r24, 0x11	; 17
    3228:	8a 7c       	andi	r24, 0xCA	; 202
    322a:	84 60       	ori	r24, 0x04	; 4
    322c:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    322e:	89 2f       	mov	r24, r25
    3230:	8a 95       	dec	r24
    3232:	f1 f7       	brne	.-4      	; 0x3230 <moveForward+0x30>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3234:	81 b3       	in	r24, 0x11	; 17
    3236:	8a 7c       	andi	r24, 0xCA	; 202
    3238:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    323a:	fa 01       	movw	r30, r20
    323c:	31 97       	sbiw	r30, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <moveForward+0x3c>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3240:	21 15       	cp	r18, r1
    3242:	31 05       	cpc	r19, r1
    3244:	61 f7       	brne	.-40     	; 0x321e <moveForward+0x1e>
    3246:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3248:	08 95       	ret


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	08 95       	ret

0000324e <moveBack>:
  }
	return TRUE;
}

unsigned char moveBack( unsigned int distance ) 
{
    324e:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    3250:	81 b3       	in	r24, 0x11	; 17
    3252:	85 73       	andi	r24, 0x35	; 53
    3254:	88 60       	ori	r24, 0x08	; 8
    3256:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3258:	21 15       	cp	r18, r1
    325a:	31 05       	cpc	r19, r1
    325c:	e1 f0       	breq	.+56     	; 0x3296 <moveBack+0x48>

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    325e:	49 99       	sbic	0x09, 1	; 9
    3260:	1c c0       	rjmp	.+56     	; 0x329a <moveBack+0x4c>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3262:	21 50       	subi	r18, 0x01	; 1
    3264:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3266:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3268:	40 e6       	ldi	r20, 0x60	; 96
    326a:	54 e0       	ldi	r21, 0x04	; 4
    326c:	04 c0       	rjmp	.+8      	; 0x3276 <moveBack+0x28>

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    326e:	21 50       	subi	r18, 0x01	; 1
    3270:	30 40       	sbci	r19, 0x00	; 0
    3272:	49 99       	sbic	0x09, 1	; 9
    3274:	12 c0       	rjmp	.+36     	; 0x329a <moveBack+0x4c>
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3276:	81 b3       	in	r24, 0x11	; 17
    3278:	8a 7c       	andi	r24, 0xCA	; 202
    327a:	84 60       	ori	r24, 0x04	; 4
    327c:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    327e:	89 2f       	mov	r24, r25
    3280:	8a 95       	dec	r24
    3282:	f1 f7       	brne	.-4      	; 0x3280 <moveBack+0x32>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3284:	81 b3       	in	r24, 0x11	; 17
    3286:	8a 7c       	andi	r24, 0xCA	; 202
    3288:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    328a:	fa 01       	movw	r30, r20
    328c:	31 97       	sbiw	r30, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <moveBack+0x3e>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3290:	21 15       	cp	r18, r1
    3292:	31 05       	cpc	r19, r1
    3294:	61 f7       	brne	.-40     	; 0x326e <moveBack+0x20>
    3296:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3298:	08 95       	ret
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	08 95       	ret

0000329e <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    329e:	80 91 6f 00 	lds	r24, 0x006F
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	96 95       	lsr	r25
    32a6:	87 95       	ror	r24
}
    32a8:	81 70       	andi	r24, 0x01	; 1
    32aa:	08 95       	ret

000032ac <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    32ac:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    32b2:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    32b4:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    32b6:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    32b8:	9f e8       	ldi	r25, 0x8F	; 143
    32ba:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    32bc:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    32be:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    32c2:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    32c6:	3f ec       	ldi	r19, 0xCF	; 207
    32c8:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    32cc:	20 ef       	ldi	r18, 0xF0	; 240
    32ce:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    32d2:	8c e9       	ldi	r24, 0x9C	; 156
    32d4:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    32d6:	82 e2       	ldi	r24, 0x22	; 34
    32d8:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    32da:	83 e1       	ldi	r24, 0x13	; 19
    32dc:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    32de:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    32e0:	80 e3       	ldi	r24, 0x30	; 48
    32e2:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    32e4:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    32e6:	83 e2       	ldi	r24, 0x23	; 35
    32e8:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    32ea:	83 e0       	ldi	r24, 0x03	; 3
    32ec:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    32f0:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    32f4:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    32f8:	20 93 0b 01 	sts	0x010B, r18
}
    32fc:	08 95       	ret

000032fe <get_limit_bits>:

unsigned char get_limit_bits( void )
{
	unsigned char ret = 0;

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    32fe:	4b 9b       	sbis	0x09, 3	; 9
    3300:	0c c0       	rjmp	.+24     	; 0x331a <get_limit_bits+0x1c>
    3302:	82 e0       	ldi	r24, 0x02	; 2
      	ret |= _BV( 1 ) ;

	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
    3304:	4a 99       	sbic	0x09, 2	; 9
      	ret |= _BV( 2 ) ;
    3306:	84 60       	ori	r24, 0x04	; 4

	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
    3308:	48 99       	sbic	0x09, 0	; 9
      	ret |= _BV( 3 ) ;
    330a:	88 60       	ori	r24, 0x08	; 8

	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
    330c:	49 99       	sbic	0x09, 1	; 9
      	ret |= _BV( 4 ) ;
    330e:	80 61       	ori	r24, 0x10	; 16

	if( bit_is_set( XHM_PIN, X_HOME ) )
    3310:	04 99       	sbic	0x00, 4	; 0
      	ret |= _BV( 5 ) ;
    3312:	80 62       	ori	r24, 0x20	; 32

	if( bit_is_set( YHM_PIN, Y_HOME ) )
    3314:	90 99       	sbic	0x12, 0	; 18
      	ret |= _BV( 6) ;
    3316:	80 64       	ori	r24, 0x40	; 64

	return ret;

}
    3318:	08 95       	ret

unsigned char get_limit_bits( void )
{
	unsigned char ret = 0;

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	f3 cf       	rjmp	.-26     	; 0x3304 <get_limit_bits+0x6>

0000331e <st_go_home>:

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    331e:	10 92 53 05 	sts	0x0553, r1

// reset position machine thinks we are at.
	plan_init();
    3322:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <plan_init>
	gc_init();
    3326:	0e 94 50 05 	call	0xaa0	; 0xaa0 <gc_init>



	// if head down, set head up
	if( is_head_down() ) {
    332a:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    332e:	88 23       	and	r24, r24
    3330:	49 f0       	breq	.+18     	; 0x3344 <st_go_home+0x26>
		head_down(0);
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
		
		//check again
		if(is_head_down() ){
    333a:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    333e:	88 23       	and	r24, r24
    3340:	09 f0       	breq	.+2      	; 0x3344 <st_go_home+0x26>
    3342:	62 c0       	rjmp	.+196    	; 0x3408 <st_go_home+0xea>
			printPgmString(PSTR("home failed\r\n"));
			return;
		}

	}
	cli();
    3344:	f8 94       	cli
	// tool changer off
	atc_fire(0);	
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <atc_fire>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    334e:	4b 99       	sbic	0x09, 3	; 9
    3350:	2c c0       	rjmp	.+88     	; 0x33aa <st_go_home+0x8c>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    3352:	48 99       	sbic	0x09, 0	; 9
    3354:	42 c0       	rjmp	.+132    	; 0x33da <st_go_home+0xbc>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    3356:	04 99       	sbic	0x00, 4	; 0
    3358:	15 c0       	rjmp	.+42     	; 0x3384 <st_go_home+0x66>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 94 b1 18 	call	0x3162	; 0x3162 <moveLeft>
    3362:	88 23       	and	r24, r24
    3364:	c1 f7       	brne	.-16     	; 0x3356 <st_go_home+0x38>
	printPgmString(PSTR("\r\n"));
#endif

error:;

	sei();
    3366:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    3368:	89 b1       	in	r24, 0x09	; 9
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	8f 70       	andi	r24, 0x0F	; 15
    336e:	90 70       	andi	r25, 0x00	; 0
    3370:	89 2b       	or	r24, r25
    3372:	39 f4       	brne	.+14     	; 0x3382 <st_go_home+0x64>
		gHomed = TRUE ;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	80 93 53 05 	sts	0x0553, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    337a:	10 92 6c 05 	sts	0x056C, r1
    337e:	10 92 6b 05 	sts	0x056B, r1
    3382:	08 95       	ret
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    3384:	20 ed       	ldi	r18, 0xD0	; 208
    3386:	37 e0       	ldi	r19, 0x07	; 7
    3388:	40 e9       	ldi	r20, 0x90	; 144
    338a:	51 e0       	ldi	r21, 0x01	; 1
    338c:	ca 01       	movw	r24, r20
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <st_go_home+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	21 50       	subi	r18, 0x01	; 1
    3394:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3396:	d1 f7       	brne	.-12     	; 0x338c <st_go_home+0x6e>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    3398:	90 99       	sbic	0x12, 0	; 18
    339a:	e5 cf       	rjmp	.-54     	; 0x3366 <st_go_home+0x48>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	0e 94 00 19 	call	0x3200	; 0x3200 <moveForward>
    33a4:	88 23       	and	r24, r24
    33a6:	c1 f7       	brne	.-16     	; 0x3398 <st_go_home+0x7a>
    33a8:	de cf       	rjmp	.-68     	; 0x3366 <st_go_home+0x48>
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
		// no longer homed
		gHomed = FALSE;
    33aa:	10 92 53 05 	sts	0x0553, r1
		printPgmString(PSTR("xLimit1\r\n"));
    33ae:	8b ec       	ldi	r24, 0xCB	; 203
    33b0:	95 e0       	ldi	r25, 0x05	; 5
    33b2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    33b6:	88 ee       	ldi	r24, 0xE8	; 232
    33b8:	93 e0       	ldi	r25, 0x03	; 3
    33ba:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <moveRight>
    33be:	88 23       	and	r24, r24
    33c0:	41 f1       	breq	.+80     	; 0x3412 <st_go_home+0xf4>
			sei();
			return;
    33c2:	20 ed       	ldi	r18, 0xD0	; 208
    33c4:	37 e0       	ldi	r19, 0x07	; 7
    33c6:	40 e9       	ldi	r20, 0x90	; 144
    33c8:	51 e0       	ldi	r21, 0x01	; 1
    33ca:	ca 01       	movw	r24, r20
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <st_go_home+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d0:	21 50       	subi	r18, 0x01	; 1
    33d2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d4:	d1 f7       	brne	.-12     	; 0x33ca <st_go_home+0xac>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    33d6:	48 9b       	sbis	0x09, 0	; 9
    33d8:	be cf       	rjmp	.-132    	; 0x3356 <st_go_home+0x38>
		// no longer homed
		gHomed = FALSE;
    33da:	10 92 53 05 	sts	0x0553, r1
		printPgmString(PSTR("yLimit1\r\n"));
    33de:	85 ed       	ldi	r24, 0xD5	; 213
    33e0:	95 e0       	ldi	r25, 0x05	; 5
    33e2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    33e6:	88 ee       	ldi	r24, 0xE8	; 232
    33e8:	93 e0       	ldi	r25, 0x03	; 3
    33ea:	0e 94 27 19 	call	0x324e	; 0x324e <moveBack>
    33ee:	88 23       	and	r24, r24
    33f0:	91 f0       	breq	.+36     	; 0x3416 <st_go_home+0xf8>
			sei();
			return;
    33f2:	20 ed       	ldi	r18, 0xD0	; 208
    33f4:	37 e0       	ldi	r19, 0x07	; 7
    33f6:	40 e9       	ldi	r20, 0x90	; 144
    33f8:	51 e0       	ldi	r21, 0x01	; 1
    33fa:	ca 01       	movw	r24, r20
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <st_go_home+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3400:	21 50       	subi	r18, 0x01	; 1
    3402:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3404:	d1 f7       	brne	.-12     	; 0x33fa <st_go_home+0xdc>
    3406:	a7 cf       	rjmp	.-178    	; 0x3356 <st_go_home+0x38>
	if( is_head_down() ) {
		head_down(0);
		
		//check again
		if(is_head_down() ){
			printPgmString(PSTR("home failed\r\n"));
    3408:	8d eb       	ldi	r24, 0xBD	; 189
    340a:	95 e0       	ldi	r25, 0x05	; 5
    340c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    3410:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
			sei();
    3412:	78 94       	sei
    3414:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
			sei();
    3416:	78 94       	sei
    3418:	08 95       	ret

0000341a <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    341a:	07 c0       	rjmp	.+14     	; 0x342a <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    341c:	83 b7       	in	r24, 0x33	; 51
    341e:	81 60       	ori	r24, 0x01	; 1
    3420:	83 bf       	out	0x33, r24	; 51
    3422:	88 95       	sleep
    3424:	83 b7       	in	r24, 0x33	; 51
    3426:	8e 7f       	andi	r24, 0xFE	; 254
    3428:	83 bf       	out	0x33, r24	; 51
    342a:	0e 94 44 0b 	call	0x1688	; 0x1688 <plan_get_current_block>
    342e:	89 2b       	or	r24, r25
    3430:	a9 f7       	brne	.-22     	; 0x341c <st_synchronize+0x2>
}
    3432:	08 95       	ret

00003434 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    3434:	1f 92       	push	r1
    3436:	0f 92       	push	r0
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	0f 92       	push	r0
    343c:	0b b6       	in	r0, 0x3b	; 59
    343e:	0f 92       	push	r0
    3440:	11 24       	eor	r1, r1
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	2f 93       	push	r18
    344c:	3f 93       	push	r19
    344e:	4f 93       	push	r20
    3450:	5f 93       	push	r21
    3452:	6f 93       	push	r22
    3454:	7f 93       	push	r23
    3456:	8f 93       	push	r24
    3458:	9f 93       	push	r25
    345a:	af 93       	push	r26
    345c:	bf 93       	push	r27
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	ef 93       	push	r30
    3464:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    3466:	80 91 53 05 	lds	r24, 0x0553
    346a:	88 23       	and	r24, r24
    346c:	09 f5       	brne	.+66     	; 0x34b0 <__vector_17+0x7c>
		// set ack
		ackHost = 'H';
    346e:	88 e4       	ldi	r24, 0x48	; 72
    3470:	80 93 52 05 	sts	0x0552, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    3474:	80 91 6f 00 	lds	r24, 0x006F
    3478:	8d 7f       	andi	r24, 0xFD	; 253
    347a:	80 93 6f 00 	sts	0x006F, r24
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
}
    347e:	ff 91       	pop	r31
    3480:	ef 91       	pop	r30
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	bf 91       	pop	r27
    3488:	af 91       	pop	r26
    348a:	9f 91       	pop	r25
    348c:	8f 91       	pop	r24
    348e:	7f 91       	pop	r23
    3490:	6f 91       	pop	r22
    3492:	5f 91       	pop	r21
    3494:	4f 91       	pop	r20
    3496:	3f 91       	pop	r19
    3498:	2f 91       	pop	r18
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	ff 90       	pop	r15
    34a0:	ef 90       	pop	r14
    34a2:	0f 90       	pop	r0
    34a4:	0b be       	out	0x3b, r0	; 59
    34a6:	0f 90       	pop	r0
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	0f 90       	pop	r0
    34ac:	1f 90       	pop	r1
    34ae:	18 95       	reti
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

// don't move if the head is down, this one is ok to let it keep running  
  if( is_head_down() ) {
    34b0:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    34b4:	88 23       	and	r24, r24
    34b6:	19 f7       	brne	.-58     	; 0x347e <__vector_17+0x4a>
  	return;
 }

  if(busy){ 
    34b8:	80 91 6b 05 	lds	r24, 0x056B
    34bc:	90 91 6c 05 	lds	r25, 0x056C
    34c0:	89 2b       	or	r24, r25
    34c2:	e9 f6       	brne	.-70     	; 0x347e <__vector_17+0x4a>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    34c4:	89 b1       	in	r24, 0x09	; 9
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	8f 70       	andi	r24, 0x0F	; 15
    34ca:	90 70       	andi	r25, 0x00	; 0
    34cc:	89 2b       	or	r24, r25
    34ce:	09 f0       	breq	.+2      	; 0x34d2 <__vector_17+0x9e>
    34d0:	91 c1       	rjmp	.+802    	; 0x37f4 <__vector_17+0x3c0>
	DISABLE_STEPPER_DRIVER_INTERRUPT();
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    34d2:	91 b3       	in	r25, 0x11	; 17
    34d4:	80 91 a5 06 	lds	r24, 0x06A5
    34d8:	8a 7c       	andi	r24, 0xCA	; 202
    34da:	95 73       	andi	r25, 0x35	; 53
    34dc:	89 2b       	or	r24, r25
    34de:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    34e0:	81 b3       	in	r24, 0x11	; 17
    34e2:	8a 7c       	andi	r24, 0xCA	; 202
    34e4:	90 91 56 05 	lds	r25, 0x0556
    34e8:	89 2b       	or	r24, r25
    34ea:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    34ec:	80 91 90 06 	lds	r24, 0x0690
    34f0:	88 0f       	add	r24, r24
    34f2:	84 50       	subi	r24, 0x04	; 4
    34f4:	81 95       	neg	r24
    34f6:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    34fa:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	90 93 6c 05 	sts	0x056C, r25
    3504:	80 93 6b 05 	sts	0x056B, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    3508:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    350a:	e0 91 54 05 	lds	r30, 0x0554
    350e:	f0 91 55 05 	lds	r31, 0x0555
    3512:	30 97       	sbiw	r30, 0x00	; 0
    3514:	09 f4       	brne	.+2      	; 0x3518 <__vector_17+0xe4>
    3516:	d6 c1       	rjmp	.+940    	; 0x38c4 <__vector_17+0x490>

    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    3518:	80 89       	ldd	r24, Z+16	; 0x10
    351a:	80 93 a5 06 	sts	0x06A5, r24
    out_bits = 0;
    351e:	10 92 56 05 	sts	0x0556, r1
    counter_x += current_block->steps_x;
    3522:	20 91 57 05 	lds	r18, 0x0557
    3526:	30 91 58 05 	lds	r19, 0x0558
    352a:	40 91 59 05 	lds	r20, 0x0559
    352e:	50 91 5a 05 	lds	r21, 0x055A
    3532:	80 81       	ld	r24, Z
    3534:	91 81       	ldd	r25, Z+1	; 0x01
    3536:	a2 81       	ldd	r26, Z+2	; 0x02
    3538:	b3 81       	ldd	r27, Z+3	; 0x03
    353a:	28 0f       	add	r18, r24
    353c:	39 1f       	adc	r19, r25
    353e:	4a 1f       	adc	r20, r26
    3540:	5b 1f       	adc	r21, r27
    3542:	20 93 57 05 	sts	0x0557, r18
    3546:	30 93 58 05 	sts	0x0558, r19
    354a:	40 93 59 05 	sts	0x0559, r20
    354e:	50 93 5a 05 	sts	0x055A, r21
    if (counter_x > 0) {
    3552:	12 16       	cp	r1, r18
    3554:	13 06       	cpc	r1, r19
    3556:	14 06       	cpc	r1, r20
    3558:	15 06       	cpc	r1, r21
    355a:	0c f0       	brlt	.+2      	; 0x355e <__vector_17+0x12a>
    355c:	46 c1       	rjmp	.+652    	; 0x37ea <__vector_17+0x3b6>
      out_bits |= (1<<X_STEP_BIT);
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	80 93 56 05 	sts	0x0556, r24
      counter_x -= current_block->step_event_count;
    3564:	e1 88       	ldd	r14, Z+17	; 0x11
    3566:	f2 88       	ldd	r15, Z+18	; 0x12
    3568:	03 89       	ldd	r16, Z+19	; 0x13
    356a:	14 89       	ldd	r17, Z+20	; 0x14
    356c:	2e 19       	sub	r18, r14
    356e:	3f 09       	sbc	r19, r15
    3570:	40 0b       	sbc	r20, r16
    3572:	51 0b       	sbc	r21, r17
    3574:	20 93 57 05 	sts	0x0557, r18
    3578:	30 93 58 05 	sts	0x0558, r19
    357c:	40 93 59 05 	sts	0x0559, r20
    3580:	50 93 5a 05 	sts	0x055A, r21
    }
    counter_y += current_block->steps_y;
    3584:	20 91 5b 05 	lds	r18, 0x055B
    3588:	30 91 5c 05 	lds	r19, 0x055C
    358c:	40 91 5d 05 	lds	r20, 0x055D
    3590:	50 91 5e 05 	lds	r21, 0x055E
    3594:	84 81       	ldd	r24, Z+4	; 0x04
    3596:	95 81       	ldd	r25, Z+5	; 0x05
    3598:	a6 81       	ldd	r26, Z+6	; 0x06
    359a:	b7 81       	ldd	r27, Z+7	; 0x07
    359c:	28 0f       	add	r18, r24
    359e:	39 1f       	adc	r19, r25
    35a0:	4a 1f       	adc	r20, r26
    35a2:	5b 1f       	adc	r21, r27
    35a4:	20 93 5b 05 	sts	0x055B, r18
    35a8:	30 93 5c 05 	sts	0x055C, r19
    35ac:	40 93 5d 05 	sts	0x055D, r20
    35b0:	50 93 5e 05 	sts	0x055E, r21
    if (counter_y > 0) {
    35b4:	12 16       	cp	r1, r18
    35b6:	13 06       	cpc	r1, r19
    35b8:	14 06       	cpc	r1, r20
    35ba:	15 06       	cpc	r1, r21
    35bc:	8c f4       	brge	.+34     	; 0x35e0 <__vector_17+0x1ac>
      out_bits |= (1<<Y_STEP_BIT);
    35be:	80 91 56 05 	lds	r24, 0x0556
    35c2:	84 60       	ori	r24, 0x04	; 4
    35c4:	80 93 56 05 	sts	0x0556, r24
      counter_y -= current_block->step_event_count;
    35c8:	2e 19       	sub	r18, r14
    35ca:	3f 09       	sbc	r19, r15
    35cc:	40 0b       	sbc	r20, r16
    35ce:	51 0b       	sbc	r21, r17
    35d0:	20 93 5b 05 	sts	0x055B, r18
    35d4:	30 93 5c 05 	sts	0x055C, r19
    35d8:	40 93 5d 05 	sts	0x055D, r20
    35dc:	50 93 5e 05 	sts	0x055E, r21
    }
    counter_z += current_block->steps_z;
    35e0:	20 91 5f 05 	lds	r18, 0x055F
    35e4:	30 91 60 05 	lds	r19, 0x0560
    35e8:	40 91 61 05 	lds	r20, 0x0561
    35ec:	50 91 62 05 	lds	r21, 0x0562
    35f0:	80 85       	ldd	r24, Z+8	; 0x08
    35f2:	91 85       	ldd	r25, Z+9	; 0x09
    35f4:	a2 85       	ldd	r26, Z+10	; 0x0a
    35f6:	b3 85       	ldd	r27, Z+11	; 0x0b
    35f8:	28 0f       	add	r18, r24
    35fa:	39 1f       	adc	r19, r25
    35fc:	4a 1f       	adc	r20, r26
    35fe:	5b 1f       	adc	r21, r27
    3600:	20 93 5f 05 	sts	0x055F, r18
    3604:	30 93 60 05 	sts	0x0560, r19
    3608:	40 93 61 05 	sts	0x0561, r20
    360c:	50 93 62 05 	sts	0x0562, r21
    if (counter_z > 0) {
    3610:	12 16       	cp	r1, r18
    3612:	13 06       	cpc	r1, r19
    3614:	14 06       	cpc	r1, r20
    3616:	15 06       	cpc	r1, r21
    3618:	8c f4       	brge	.+34     	; 0x363c <__vector_17+0x208>
      out_bits |= (1<<Z_STEP_BIT);
    361a:	80 91 56 05 	lds	r24, 0x0556
    361e:	80 61       	ori	r24, 0x10	; 16
    3620:	80 93 56 05 	sts	0x0556, r24
      counter_z -= current_block->step_event_count;
    3624:	2e 19       	sub	r18, r14
    3626:	3f 09       	sbc	r19, r15
    3628:	40 0b       	sbc	r20, r16
    362a:	51 0b       	sbc	r21, r17
    362c:	20 93 5f 05 	sts	0x055F, r18
    3630:	30 93 60 05 	sts	0x0560, r19
    3634:	40 93 61 05 	sts	0x0561, r20
    3638:	50 93 62 05 	sts	0x0562, r21
    }
    counter_c += current_block->steps_c;
    363c:	20 91 63 05 	lds	r18, 0x0563
    3640:	30 91 64 05 	lds	r19, 0x0564
    3644:	40 91 65 05 	lds	r20, 0x0565
    3648:	50 91 66 05 	lds	r21, 0x0566
    364c:	84 85       	ldd	r24, Z+12	; 0x0c
    364e:	95 85       	ldd	r25, Z+13	; 0x0d
    3650:	a6 85       	ldd	r26, Z+14	; 0x0e
    3652:	b7 85       	ldd	r27, Z+15	; 0x0f
    3654:	28 0f       	add	r18, r24
    3656:	39 1f       	adc	r19, r25
    3658:	4a 1f       	adc	r20, r26
    365a:	5b 1f       	adc	r21, r27
    365c:	20 93 63 05 	sts	0x0563, r18
    3660:	30 93 64 05 	sts	0x0564, r19
    3664:	40 93 65 05 	sts	0x0565, r20
    3668:	50 93 66 05 	sts	0x0566, r21
    if (counter_c > 0) {
    366c:	12 16       	cp	r1, r18
    366e:	13 06       	cpc	r1, r19
    3670:	14 06       	cpc	r1, r20
    3672:	15 06       	cpc	r1, r21
    3674:	8c f4       	brge	.+34     	; 0x3698 <__vector_17+0x264>
      out_bits |= (1<<C_STEP_BIT);
    3676:	80 91 56 05 	lds	r24, 0x0556
    367a:	80 62       	ori	r24, 0x20	; 32
    367c:	80 93 56 05 	sts	0x0556, r24
      counter_c -= current_block->step_event_count;
    3680:	2e 19       	sub	r18, r14
    3682:	3f 09       	sbc	r19, r15
    3684:	40 0b       	sbc	r20, r16
    3686:	51 0b       	sbc	r21, r17
    3688:	20 93 63 05 	sts	0x0563, r18
    368c:	30 93 64 05 	sts	0x0564, r19
    3690:	40 93 65 05 	sts	0x0565, r20
    3694:	50 93 66 05 	sts	0x0566, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3698:	80 91 67 05 	lds	r24, 0x0567
    369c:	90 91 68 05 	lds	r25, 0x0568
    36a0:	a0 91 69 05 	lds	r26, 0x0569
    36a4:	b0 91 6a 05 	lds	r27, 0x056A
    36a8:	01 96       	adiw	r24, 0x01	; 1
    36aa:	a1 1d       	adc	r26, r1
    36ac:	b1 1d       	adc	r27, r1
    36ae:	80 93 67 05 	sts	0x0567, r24
    36b2:	90 93 68 05 	sts	0x0568, r25
    36b6:	a0 93 69 05 	sts	0x0569, r26
    36ba:	b0 93 6a 05 	sts	0x056A, r27
    if (step_events_completed >= current_block->step_event_count) {
    36be:	8e 15       	cp	r24, r14
    36c0:	9f 05       	cpc	r25, r15
    36c2:	a0 07       	cpc	r26, r16
    36c4:	b1 07       	cpc	r27, r17
    36c6:	08 f0       	brcs	.+2      	; 0x36ca <__vector_17+0x296>
    36c8:	a0 c0       	rjmp	.+320    	; 0x380a <__vector_17+0x3d6>
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
    36ca:	80 91 56 05 	lds	r24, 0x0556
    36ce:	95 e3       	ldi	r25, 0x35	; 53
    36d0:	89 27       	eor	r24, r25
    36d2:	80 93 56 05 	sts	0x0556, r24
  dir_bits ^= DIRECTION_INVERT_MASK;
    36d6:	80 91 a5 06 	lds	r24, 0x06A5
    36da:	9a e0       	ldi	r25, 0x0A	; 10
    36dc:	89 27       	eor	r24, r25
    36de:	80 93 a5 06 	sts	0x06A5, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    36e2:	20 91 6d 05 	lds	r18, 0x056D
    36e6:	30 91 6e 05 	lds	r19, 0x056E
    36ea:	40 91 6f 05 	lds	r20, 0x056F
    36ee:	50 91 70 05 	lds	r21, 0x0570
    36f2:	80 91 71 05 	lds	r24, 0x0571
    36f6:	90 91 72 05 	lds	r25, 0x0572
    36fa:	a0 91 73 05 	lds	r26, 0x0573
    36fe:	b0 91 74 05 	lds	r27, 0x0574
    3702:	28 0f       	add	r18, r24
    3704:	39 1f       	adc	r19, r25
    3706:	4a 1f       	adc	r20, r26
    3708:	5b 1f       	adc	r21, r27
    370a:	20 93 71 05 	sts	0x0571, r18
    370e:	30 93 72 05 	sts	0x0572, r19
    3712:	40 93 73 05 	sts	0x0573, r20
    3716:	50 93 74 05 	sts	0x0574, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    371a:	21 38       	cpi	r18, 0x81	; 129
    371c:	0a e1       	ldi	r16, 0x1A	; 26
    371e:	30 07       	cpc	r19, r16
    3720:	06 e0       	ldi	r16, 0x06	; 6
    3722:	40 07       	cpc	r20, r16
    3724:	00 e0       	ldi	r16, 0x00	; 0
    3726:	50 07       	cpc	r21, r16
    3728:	08 f4       	brcc	.+2      	; 0x372c <__vector_17+0x2f8>
    372a:	5a c0       	rjmp	.+180    	; 0x37e0 <__vector_17+0x3ac>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    372c:	20 58       	subi	r18, 0x80	; 128
    372e:	3a 41       	sbci	r19, 0x1A	; 26
    3730:	46 40       	sbci	r20, 0x06	; 6
    3732:	50 40       	sbci	r21, 0x00	; 0
    3734:	20 93 71 05 	sts	0x0571, r18
    3738:	30 93 72 05 	sts	0x0572, r19
    373c:	40 93 73 05 	sts	0x0573, r20
    3740:	50 93 74 05 	sts	0x0574, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static inline void trapezoid_generator_tick() {     
  if (current_block) {
    3744:	e0 91 54 05 	lds	r30, 0x0554
    3748:	f0 91 55 05 	lds	r31, 0x0555
    374c:	30 97       	sbiw	r30, 0x00	; 0
    374e:	09 f4       	brne	.+2      	; 0x3752 <__vector_17+0x31e>
    3750:	47 c0       	rjmp	.+142    	; 0x37e0 <__vector_17+0x3ac>
    if (step_events_completed < current_block->accelerate_until) {
    3752:	20 91 67 05 	lds	r18, 0x0567
    3756:	30 91 68 05 	lds	r19, 0x0568
    375a:	40 91 69 05 	lds	r20, 0x0569
    375e:	50 91 6a 05 	lds	r21, 0x056A
    3762:	ef 5b       	subi	r30, 0xBF	; 191
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	80 81       	ld	r24, Z
    3768:	91 81       	ldd	r25, Z+1	; 0x01
    376a:	a2 81       	ldd	r26, Z+2	; 0x02
    376c:	b3 81       	ldd	r27, Z+3	; 0x03
    376e:	e1 54       	subi	r30, 0x41	; 65
    3770:	f0 40       	sbci	r31, 0x00	; 0
    3772:	28 17       	cp	r18, r24
    3774:	39 07       	cpc	r19, r25
    3776:	4a 07       	cpc	r20, r26
    3778:	5b 07       	cpc	r21, r27
    377a:	08 f0       	brcs	.+2      	; 0x377e <__vector_17+0x34a>
    377c:	4d c0       	rjmp	.+154    	; 0x3818 <__vector_17+0x3e4>
      trapezoid_adjusted_rate += current_block->rate_delta;
    377e:	fd 96       	adiw	r30, 0x3d	; 61
    3780:	80 81       	ld	r24, Z
    3782:	91 81       	ldd	r25, Z+1	; 0x01
    3784:	a2 81       	ldd	r26, Z+2	; 0x02
    3786:	b3 81       	ldd	r27, Z+3	; 0x03
    3788:	fd 97       	sbiw	r30, 0x3d	; 61
    378a:	20 91 75 05 	lds	r18, 0x0575
    378e:	30 91 76 05 	lds	r19, 0x0576
    3792:	40 91 77 05 	lds	r20, 0x0577
    3796:	50 91 78 05 	lds	r21, 0x0578
    379a:	28 0f       	add	r18, r24
    379c:	39 1f       	adc	r19, r25
    379e:	4a 1f       	adc	r20, r26
    37a0:	5b 1f       	adc	r21, r27
    37a2:	20 93 75 05 	sts	0x0575, r18
    37a6:	30 93 76 05 	sts	0x0576, r19
    37aa:	40 93 77 05 	sts	0x0577, r20
    37ae:	50 93 78 05 	sts	0x0578, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    37b2:	85 89       	ldd	r24, Z+21	; 0x15
    37b4:	96 89       	ldd	r25, Z+22	; 0x16
    37b6:	a7 89       	ldd	r26, Z+23	; 0x17
    37b8:	b0 8d       	ldd	r27, Z+24	; 0x18
    37ba:	82 17       	cp	r24, r18
    37bc:	93 07       	cpc	r25, r19
    37be:	a4 07       	cpc	r26, r20
    37c0:	b5 07       	cpc	r27, r21
    37c2:	50 f4       	brcc	.+20     	; 0x37d8 <__vector_17+0x3a4>
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
        trapezoid_adjusted_rate -= current_block->rate_delta;
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
        trapezoid_adjusted_rate = current_block->final_rate;
    37c4:	80 93 75 05 	sts	0x0575, r24
    37c8:	90 93 76 05 	sts	0x0576, r25
    37cc:	a0 93 77 05 	sts	0x0577, r26
    37d0:	b0 93 78 05 	sts	0x0578, r27
    37d4:	9c 01       	movw	r18, r24
    37d6:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    37d8:	ca 01       	movw	r24, r20
    37da:	b9 01       	movw	r22, r18
    37dc:	0e 94 4d 18 	call	0x309a	; 0x309a <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    37e0:	10 92 6c 05 	sts	0x056C, r1
    37e4:	10 92 6b 05 	sts	0x056B, r1
    37e8:	4a ce       	rjmp	.-876    	; 0x347e <__vector_17+0x4a>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    37ea:	e1 88       	ldd	r14, Z+17	; 0x11
    37ec:	f2 88       	ldd	r15, Z+18	; 0x12
    37ee:	03 89       	ldd	r16, Z+19	; 0x13
    37f0:	14 89       	ldd	r17, Z+20	; 0x14
    37f2:	c8 ce       	rjmp	.-624    	; 0x3584 <__vector_17+0x150>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
	gHomed = FALSE ;
    37f4:	10 92 53 05 	sts	0x0553, r1
		// set ack
	  ackHost = 'L';
    37f8:	8c e4       	ldi	r24, 0x4C	; 76
    37fa:	80 93 52 05 	sts	0x0552, r24
	DISABLE_STEPPER_DRIVER_INTERRUPT();
    37fe:	80 91 6f 00 	lds	r24, 0x006F
    3802:	8d 7f       	andi	r24, 0xFD	; 253
    3804:	80 93 6f 00 	sts	0x006F, r24
    3808:	3a ce       	rjmp	.-908    	; 0x347e <__vector_17+0x4a>
      counter_c -= current_block->step_event_count;
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    380a:	10 92 55 05 	sts	0x0555, r1
    380e:	10 92 54 05 	sts	0x0554, r1
      plan_discard_current_block();
    3812:	0e 94 2b 0b 	call	0x1656	; 0x1656 <plan_discard_current_block>
    3816:	59 cf       	rjmp	.-334    	; 0x36ca <__vector_17+0x296>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3818:	eb 5b       	subi	r30, 0xBB	; 187
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	91 81       	ldd	r25, Z+1	; 0x01
    3820:	a2 81       	ldd	r26, Z+2	; 0x02
    3822:	b3 81       	ldd	r27, Z+3	; 0x03
    3824:	e5 54       	subi	r30, 0x45	; 69
    3826:	f0 40       	sbci	r31, 0x00	; 0
    3828:	82 17       	cp	r24, r18
    382a:	93 07       	cpc	r25, r19
    382c:	a4 07       	cpc	r26, r20
    382e:	b5 07       	cpc	r27, r21
    3830:	70 f5       	brcc	.+92     	; 0x388e <__vector_17+0x45a>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    3832:	fd 96       	adiw	r30, 0x3d	; 61
    3834:	60 81       	ld	r22, Z
    3836:	71 81       	ldd	r23, Z+1	; 0x01
    3838:	82 81       	ldd	r24, Z+2	; 0x02
    383a:	93 81       	ldd	r25, Z+3	; 0x03
    383c:	fd 97       	sbiw	r30, 0x3d	; 61
    383e:	20 91 75 05 	lds	r18, 0x0575
    3842:	30 91 76 05 	lds	r19, 0x0576
    3846:	40 91 77 05 	lds	r20, 0x0577
    384a:	50 91 78 05 	lds	r21, 0x0578
    384e:	62 17       	cp	r22, r18
    3850:	73 07       	cpc	r23, r19
    3852:	84 07       	cpc	r24, r20
    3854:	95 07       	cpc	r25, r21
    3856:	80 f4       	brcc	.+32     	; 0x3878 <__vector_17+0x444>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3858:	79 01       	movw	r14, r18
    385a:	8a 01       	movw	r16, r20
    385c:	e6 1a       	sub	r14, r22
    385e:	f7 0a       	sbc	r15, r23
    3860:	08 0b       	sbc	r16, r24
    3862:	19 0b       	sbc	r17, r25
    3864:	e0 92 75 05 	sts	0x0575, r14
    3868:	f0 92 76 05 	sts	0x0576, r15
    386c:	00 93 77 05 	sts	0x0577, r16
    3870:	10 93 78 05 	sts	0x0578, r17
    3874:	a8 01       	movw	r20, r16
    3876:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    3878:	81 ad       	ldd	r24, Z+57	; 0x39
    387a:	92 ad       	ldd	r25, Z+58	; 0x3a
    387c:	a3 ad       	ldd	r26, Z+59	; 0x3b
    387e:	b4 ad       	ldd	r27, Z+60	; 0x3c
    3880:	28 17       	cp	r18, r24
    3882:	39 07       	cpc	r19, r25
    3884:	4a 07       	cpc	r20, r26
    3886:	5b 07       	cpc	r21, r27
    3888:	08 f0       	brcs	.+2      	; 0x388c <__vector_17+0x458>
    388a:	a6 cf       	rjmp	.-180    	; 0x37d8 <__vector_17+0x3a4>
    388c:	9b cf       	rjmp	.-202    	; 0x37c4 <__vector_17+0x390>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    388e:	25 89       	ldd	r18, Z+21	; 0x15
    3890:	36 89       	ldd	r19, Z+22	; 0x16
    3892:	47 89       	ldd	r20, Z+23	; 0x17
    3894:	50 8d       	ldd	r21, Z+24	; 0x18
    3896:	80 91 75 05 	lds	r24, 0x0575
    389a:	90 91 76 05 	lds	r25, 0x0576
    389e:	a0 91 77 05 	lds	r26, 0x0577
    38a2:	b0 91 78 05 	lds	r27, 0x0578
    38a6:	28 17       	cp	r18, r24
    38a8:	39 07       	cpc	r19, r25
    38aa:	4a 07       	cpc	r20, r26
    38ac:	5b 07       	cpc	r21, r27
    38ae:	09 f4       	brne	.+2      	; 0x38b2 <__vector_17+0x47e>
    38b0:	97 cf       	rjmp	.-210    	; 0x37e0 <__vector_17+0x3ac>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    38b2:	20 93 75 05 	sts	0x0575, r18
    38b6:	30 93 76 05 	sts	0x0576, r19
    38ba:	40 93 77 05 	sts	0x0577, r20
    38be:	50 93 78 05 	sts	0x0578, r21
    38c2:	8a cf       	rjmp	.-236    	; 0x37d8 <__vector_17+0x3a4>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    38c4:	0e 94 44 0b 	call	0x1688	; 0x1688 <plan_get_current_block>
    38c8:	ec 01       	movw	r28, r24
    38ca:	90 93 55 05 	sts	0x0555, r25
    38ce:	80 93 54 05 	sts	0x0554, r24
    if (current_block != NULL) {
    38d2:	00 97       	sbiw	r24, 0x00	; 0
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <__vector_17+0x4a4>
    38d6:	52 c0       	rjmp	.+164    	; 0x397c <__vector_17+0x548>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    38d8:	6d a9       	ldd	r22, Y+53	; 0x35
    38da:	7e a9       	ldd	r23, Y+54	; 0x36
    38dc:	8f a9       	ldd	r24, Y+55	; 0x37
    38de:	98 ad       	ldd	r25, Y+56	; 0x38
    38e0:	60 93 75 05 	sts	0x0575, r22
    38e4:	70 93 76 05 	sts	0x0576, r23
    38e8:	80 93 77 05 	sts	0x0577, r24
    38ec:	90 93 78 05 	sts	0x0578, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    38f0:	10 92 71 05 	sts	0x0571, r1
    38f4:	10 92 72 05 	sts	0x0572, r1
    38f8:	10 92 73 05 	sts	0x0573, r1
    38fc:	10 92 74 05 	sts	0x0574, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    3900:	0e 94 4d 18 	call	0x309a	; 0x309a <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    3904:	89 89       	ldd	r24, Y+17	; 0x11
    3906:	9a 89       	ldd	r25, Y+18	; 0x12
    3908:	ab 89       	ldd	r26, Y+19	; 0x13
    390a:	bc 89       	ldd	r27, Y+20	; 0x14
    390c:	b5 95       	asr	r27
    390e:	a7 95       	ror	r26
    3910:	97 95       	ror	r25
    3912:	87 95       	ror	r24
    3914:	b0 95       	com	r27
    3916:	a0 95       	com	r26
    3918:	90 95       	com	r25
    391a:	81 95       	neg	r24
    391c:	9f 4f       	sbci	r25, 0xFF	; 255
    391e:	af 4f       	sbci	r26, 0xFF	; 255
    3920:	bf 4f       	sbci	r27, 0xFF	; 255
    3922:	80 93 57 05 	sts	0x0557, r24
    3926:	90 93 58 05 	sts	0x0558, r25
    392a:	a0 93 59 05 	sts	0x0559, r26
    392e:	b0 93 5a 05 	sts	0x055A, r27
      counter_y = counter_x;
    3932:	80 93 5b 05 	sts	0x055B, r24
    3936:	90 93 5c 05 	sts	0x055C, r25
    393a:	a0 93 5d 05 	sts	0x055D, r26
    393e:	b0 93 5e 05 	sts	0x055E, r27
      counter_z = counter_x;
    3942:	80 93 5f 05 	sts	0x055F, r24
    3946:	90 93 60 05 	sts	0x0560, r25
    394a:	a0 93 61 05 	sts	0x0561, r26
    394e:	b0 93 62 05 	sts	0x0562, r27
      counter_c = counter_x;
    3952:	80 93 63 05 	sts	0x0563, r24
    3956:	90 93 64 05 	sts	0x0564, r25
    395a:	a0 93 65 05 	sts	0x0565, r26
    395e:	b0 93 66 05 	sts	0x0566, r27
      step_events_completed = 0;
    3962:	10 92 67 05 	sts	0x0567, r1
    3966:	10 92 68 05 	sts	0x0568, r1
    396a:	10 92 69 05 	sts	0x0569, r1
    396e:	10 92 6a 05 	sts	0x056A, r1
    3972:	e0 91 54 05 	lds	r30, 0x0554
    3976:	f0 91 55 05 	lds	r31, 0x0555
    397a:	ce cd       	rjmp	.-1124   	; 0x3518 <__vector_17+0xe4>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    397c:	80 91 6f 00 	lds	r24, 0x006F
    3980:	8d 7f       	andi	r24, 0xFD	; 253
    3982:	80 93 6f 00 	sts	0x006F, r24

		// set ack
	  ackHost = 'X';
    3986:	88 e5       	ldi	r24, 0x58	; 88
    3988:	80 93 52 05 	sts	0x0552, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    398c:	10 92 56 05 	sts	0x0556, r1
    3990:	9c ce       	rjmp	.-712    	; 0x36ca <__vector_17+0x296>

00003992 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3992:	ef 92       	push	r14
    3994:	ff 92       	push	r15
    3996:	0f 93       	push	r16
    3998:	1f 93       	push	r17
    399a:	7b 01       	movw	r14, r22
    399c:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    399e:	22 e0       	ldi	r18, 0x02	; 2
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__divmodsi4>
    39aa:	20 5c       	subi	r18, 0xC0	; 192
    39ac:	3d 4b       	sbci	r19, 0xBD	; 189
    39ae:	40 4f       	sbci	r20, 0xF0	; 240
    39b0:	5f 4f       	sbci	r21, 0xFF	; 255
    39b2:	ca 01       	movw	r24, r20
    39b4:	b9 01       	movw	r22, r18
    39b6:	a8 01       	movw	r20, r16
    39b8:	97 01       	movw	r18, r14
    39ba:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__udivmodsi4>
    39be:	c9 01       	movw	r24, r18
    39c0:	da 01       	movw	r26, r20
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	a1 09       	sbc	r26, r1
    39c6:	b1 09       	sbc	r27, r1
    39c8:	29 2f       	mov	r18, r25
    39ca:	3a 2f       	mov	r19, r26
    39cc:	4b 2f       	mov	r20, r27
    39ce:	55 27       	eor	r21, r21
    39d0:	01 96       	adiw	r24, 0x01	; 1
    39d2:	a1 1d       	adc	r26, r1
    39d4:	b1 1d       	adc	r27, r1
    39d6:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    39da:	81 50       	subi	r24, 0x01	; 1
    39dc:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    39e0:	e0 ec       	ldi	r30, 0xC0	; 192
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	8d 7f       	andi	r24, 0xFD	; 253
    39e8:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    39ea:	e1 ec       	ldi	r30, 0xC1	; 193
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	80 61       	ori	r24, 0x10	; 16
    39f2:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    39f4:	80 81       	ld	r24, Z
    39f6:	88 60       	ori	r24, 0x08	; 8
    39f8:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    39fa:	80 81       	ld	r24, Z
    39fc:	80 68       	ori	r24, 0x80	; 128
    39fe:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3a00:	1f 91       	pop	r17
    3a02:	0f 91       	pop	r16
    3a04:	ff 90       	pop	r15
    3a06:	ef 90       	pop	r14
    3a08:	08 95       	ret

00003a0a <serialWrite>:

void serialWrite(unsigned char c)
{
    3a0a:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3a0c:	80 91 c0 00 	lds	r24, 0x00C0
    3a10:	85 ff       	sbrs	r24, 5
    3a12:	fc cf       	rjmp	.-8      	; 0x3a0c <serialWrite+0x2>
		;
	UDR0 = c;
    3a14:	90 93 c6 00 	sts	0x00C6, r25
}
    3a18:	08 95       	ret

00003a1a <serialAvailable>:

int serialAvailable()
{
    3a1a:	80 91 79 05 	lds	r24, 0x0579
    3a1e:	90 91 7a 05 	lds	r25, 0x057A
    3a22:	80 50       	subi	r24, 0x00	; 0
    3a24:	9f 4f       	sbci	r25, 0xFF	; 255
    3a26:	20 91 7b 05 	lds	r18, 0x057B
    3a2a:	30 91 7c 05 	lds	r19, 0x057C
    3a2e:	82 1b       	sub	r24, r18
    3a30:	93 0b       	sbc	r25, r19
    3a32:	60 e0       	ldi	r22, 0x00	; 0
    3a34:	71 e0       	ldi	r23, 0x01	; 1
    3a36:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3a3a:	08 95       	ret

00003a3c <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3a3c:	40 91 7b 05 	lds	r20, 0x057B
    3a40:	50 91 7c 05 	lds	r21, 0x057C
    3a44:	80 91 79 05 	lds	r24, 0x0579
    3a48:	90 91 7a 05 	lds	r25, 0x057A
    3a4c:	84 17       	cp	r24, r20
    3a4e:	95 07       	cpc	r25, r21
    3a50:	89 f0       	breq	.+34     	; 0x3a74 <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3a52:	fa 01       	movw	r30, r20
    3a54:	e3 58       	subi	r30, 0x83	; 131
    3a56:	fa 4f       	sbci	r31, 0xFA	; 250
    3a58:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3a5a:	ca 01       	movw	r24, r20
    3a5c:	01 96       	adiw	r24, 0x01	; 1
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	71 e0       	ldi	r23, 0x01	; 1
    3a62:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
    3a66:	90 93 7c 05 	sts	0x057C, r25
    3a6a:	80 93 7b 05 	sts	0x057B, r24
		return c;
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3a70:	c9 01       	movw	r24, r18
    3a72:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3a74:	2f ef       	ldi	r18, 0xFF	; 255
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3a78:	c9 01       	movw	r24, r18
    3a7a:	08 95       	ret

00003a7c <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3a7c:	80 91 7b 05 	lds	r24, 0x057B
    3a80:	90 91 7c 05 	lds	r25, 0x057C
    3a84:	90 93 7a 05 	sts	0x057A, r25
    3a88:	80 93 79 05 	sts	0x0579, r24
}
    3a8c:	08 95       	ret

00003a8e <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3a8e:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3a90:	80 91 c0 00 	lds	r24, 0x00C0
    3a94:	85 ff       	sbrs	r24, 5
    3a96:	fc cf       	rjmp	.-8      	; 0x3a90 <printByte+0x2>
		;
	UDR0 = c;
    3a98:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3a9c:	08 95       	ret

00003a9e <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3a9e:	fc 01       	movw	r30, r24
	while (*s)
    3aa0:	90 81       	ld	r25, Z
    3aa2:	99 23       	and	r25, r25
    3aa4:	51 f0       	breq	.+20     	; 0x3aba <printString+0x1c>
		printByte(*s++);
    3aa6:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3aa8:	80 91 c0 00 	lds	r24, 0x00C0
    3aac:	85 ff       	sbrs	r24, 5
    3aae:	fc cf       	rjmp	.-8      	; 0x3aa8 <printString+0xa>
		;
	UDR0 = c;
    3ab0:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3ab4:	90 81       	ld	r25, Z
    3ab6:	99 23       	and	r25, r25
    3ab8:	b1 f7       	brne	.-20     	; 0x3aa6 <printString+0x8>
    3aba:	08 95       	ret

00003abc <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3abc:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3abe:	94 91       	lpm	r25, Z+
    3ac0:	99 23       	and	r25, r25
    3ac2:	51 f0       	breq	.+20     	; 0x3ad8 <printPgmString+0x1c>
    3ac4:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3ac6:	80 91 c0 00 	lds	r24, 0x00C0
    3aca:	85 ff       	sbrs	r24, 5
    3acc:	fc cf       	rjmp	.-8      	; 0x3ac6 <printPgmString+0xa>
		;
	UDR0 = c;
    3ace:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3ad2:	94 91       	lpm	r25, Z+
    3ad4:	99 23       	and	r25, r25
    3ad6:	b1 f7       	brne	.-20     	; 0x3ac4 <printPgmString+0x8>
    3ad8:	08 95       	ret

00003ada <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3ada:	2f 92       	push	r2
    3adc:	3f 92       	push	r3
    3ade:	4f 92       	push	r4
    3ae0:	5f 92       	push	r5
    3ae2:	6f 92       	push	r6
    3ae4:	7f 92       	push	r7
    3ae6:	8f 92       	push	r8
    3ae8:	9f 92       	push	r9
    3aea:	af 92       	push	r10
    3aec:	bf 92       	push	r11
    3aee:	cf 92       	push	r12
    3af0:	df 92       	push	r13
    3af2:	ef 92       	push	r14
    3af4:	ff 92       	push	r15
    3af6:	0f 93       	push	r16
    3af8:	1f 93       	push	r17
    3afa:	df 93       	push	r29
    3afc:	cf 93       	push	r28
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	a0 97       	sbiw	r28, 0x20	; 32
    3b04:	0f b6       	in	r0, 0x3f	; 63
    3b06:	f8 94       	cli
    3b08:	de bf       	out	0x3e, r29	; 62
    3b0a:	0f be       	out	0x3f, r0	; 63
    3b0c:	cd bf       	out	0x3d, r28	; 61
    3b0e:	6b 01       	movw	r12, r22
    3b10:	7c 01       	movw	r14, r24
    3b12:	29 01       	movw	r4, r18
    3b14:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3b16:	61 15       	cp	r22, r1
    3b18:	71 05       	cpc	r23, r1
    3b1a:	81 05       	cpc	r24, r1
    3b1c:	91 05       	cpc	r25, r1
    3b1e:	09 f4       	brne	.+2      	; 0x3b22 <printIntegerInBase+0x48>
    3b20:	50 c0       	rjmp	.+160    	; 0x3bc2 <printIntegerInBase+0xe8>
		printByte('0');
		return;
    3b22:	88 24       	eor	r8, r8
    3b24:	99 24       	eor	r9, r9
    3b26:	54 01       	movw	r10, r8
    3b28:	1e 01       	movw	r2, r28
    3b2a:	08 94       	sec
    3b2c:	21 1c       	adc	r2, r1
    3b2e:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3b30:	81 01       	movw	r16, r2
    3b32:	08 0d       	add	r16, r8
    3b34:	19 1d       	adc	r17, r9
    3b36:	c7 01       	movw	r24, r14
    3b38:	b6 01       	movw	r22, r12
    3b3a:	a3 01       	movw	r20, r6
    3b3c:	92 01       	movw	r18, r4
    3b3e:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__udivmodsi4>
    3b42:	f8 01       	movw	r30, r16
    3b44:	60 83       	st	Z, r22
    3b46:	08 94       	sec
    3b48:	81 1c       	adc	r8, r1
    3b4a:	91 1c       	adc	r9, r1
    3b4c:	a1 1c       	adc	r10, r1
    3b4e:	b1 1c       	adc	r11, r1
		n /= base;
    3b50:	c7 01       	movw	r24, r14
    3b52:	b6 01       	movw	r22, r12
    3b54:	a3 01       	movw	r20, r6
    3b56:	92 01       	movw	r18, r4
    3b58:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__udivmodsi4>
    3b5c:	c9 01       	movw	r24, r18
    3b5e:	da 01       	movw	r26, r20
    3b60:	6c 01       	movw	r12, r24
    3b62:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3b64:	c1 14       	cp	r12, r1
    3b66:	d1 04       	cpc	r13, r1
    3b68:	e1 04       	cpc	r14, r1
    3b6a:	f1 04       	cpc	r15, r1
    3b6c:	09 f7       	brne	.-62     	; 0x3b30 <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3b6e:	81 14       	cp	r8, r1
    3b70:	91 04       	cpc	r9, r1
    3b72:	a1 04       	cpc	r10, r1
    3b74:	b1 04       	cpc	r11, r1
    3b76:	61 f1       	breq	.+88     	; 0x3bd0 <printIntegerInBase+0xf6>
    3b78:	91 01       	movw	r18, r2
    3b7a:	28 0d       	add	r18, r8
    3b7c:	39 1d       	adc	r19, r9
    3b7e:	d5 01       	movw	r26, r10
    3b80:	c4 01       	movw	r24, r8
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	a1 09       	sbc	r26, r1
    3b86:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    3b88:	ac 01       	movw	r20, r24
    3b8a:	48 19       	sub	r20, r8
    3b8c:	59 09       	sbc	r21, r9
    3b8e:	fa 01       	movw	r30, r20
    3b90:	e2 0f       	add	r30, r18
    3b92:	f3 1f       	adc	r31, r19
    3b94:	e0 81       	ld	r30, Z
    3b96:	ea 30       	cpi	r30, 0x0A	; 10
    3b98:	90 f4       	brcc	.+36     	; 0x3bbe <printIntegerInBase+0xe4>
    3b9a:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3b9c:	80 91 c0 00 	lds	r24, 0x00C0
    3ba0:	85 ff       	sbrs	r24, 5
    3ba2:	fc cf       	rjmp	.-8      	; 0x3b9c <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    3ba4:	e0 93 c6 00 	sts	0x00C6, r30
    3ba8:	21 50       	subi	r18, 0x01	; 1
    3baa:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3bac:	22 16       	cp	r2, r18
    3bae:	33 06       	cpc	r3, r19
    3bb0:	79 f0       	breq	.+30     	; 0x3bd0 <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    3bb2:	fa 01       	movw	r30, r20
    3bb4:	e2 0f       	add	r30, r18
    3bb6:	f3 1f       	adc	r31, r19
    3bb8:	e0 81       	ld	r30, Z
    3bba:	ea 30       	cpi	r30, 0x0A	; 10
    3bbc:	70 f3       	brcs	.-36     	; 0x3b9a <printIntegerInBase+0xc0>
    3bbe:	e9 5c       	subi	r30, 0xC9	; 201
    3bc0:	ed cf       	rjmp	.-38     	; 0x3b9c <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3bc2:	80 91 c0 00 	lds	r24, 0x00C0
    3bc6:	85 ff       	sbrs	r24, 5
    3bc8:	fc cf       	rjmp	.-8      	; 0x3bc2 <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    3bca:	80 e3       	ldi	r24, 0x30	; 48
    3bcc:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3bd0:	a0 96       	adiw	r28, 0x20	; 32
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	f8 94       	cli
    3bd6:	de bf       	out	0x3e, r29	; 62
    3bd8:	0f be       	out	0x3f, r0	; 63
    3bda:	cd bf       	out	0x3d, r28	; 61
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	1f 91       	pop	r17
    3be2:	0f 91       	pop	r16
    3be4:	ff 90       	pop	r15
    3be6:	ef 90       	pop	r14
    3be8:	df 90       	pop	r13
    3bea:	cf 90       	pop	r12
    3bec:	bf 90       	pop	r11
    3bee:	af 90       	pop	r10
    3bf0:	9f 90       	pop	r9
    3bf2:	8f 90       	pop	r8
    3bf4:	7f 90       	pop	r7
    3bf6:	6f 90       	pop	r6
    3bf8:	5f 90       	pop	r5
    3bfa:	4f 90       	pop	r4
    3bfc:	3f 90       	pop	r3
    3bfe:	2f 90       	pop	r2
    3c00:	08 95       	ret

00003c02 <printInteger>:

void printInteger(long n)
{
    3c02:	9b 01       	movw	r18, r22
    3c04:	ac 01       	movw	r20, r24
	if (n < 0) {
    3c06:	97 fd       	sbrc	r25, 7
    3c08:	09 c0       	rjmp	.+18     	; 0x3c1c <printInteger+0x1a>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    3c0a:	ca 01       	movw	r24, r20
    3c0c:	b9 01       	movw	r22, r18
    3c0e:	2a e0       	ldi	r18, 0x0A	; 10
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <printIntegerInBase>
}
    3c1a:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c1c:	80 91 c0 00 	lds	r24, 0x00C0
    3c20:	85 ff       	sbrs	r24, 5
    3c22:	fc cf       	rjmp	.-8      	; 0x3c1c <printInteger+0x1a>
		;
	UDR0 = c;
    3c24:	8d e2       	ldi	r24, 0x2D	; 45
    3c26:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3c2a:	50 95       	com	r21
    3c2c:	40 95       	com	r20
    3c2e:	30 95       	com	r19
    3c30:	21 95       	neg	r18
    3c32:	3f 4f       	sbci	r19, 0xFF	; 255
    3c34:	4f 4f       	sbci	r20, 0xFF	; 255
    3c36:	5f 4f       	sbci	r21, 0xFF	; 255
    3c38:	e8 cf       	rjmp	.-48     	; 0x3c0a <printInteger+0x8>

00003c3a <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3c3a:	22 e0       	ldi	r18, 0x02	; 2
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e0       	ldi	r20, 0x00	; 0
    3c40:	50 e0       	ldi	r21, 0x00	; 0
    3c42:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <printIntegerInBase>
  }
    3c46:	08 95       	ret

00003c48 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3c48:	ef 92       	push	r14
    3c4a:	ff 92       	push	r15
    3c4c:	0f 93       	push	r16
    3c4e:	1f 93       	push	r17
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	00 d0       	rcall	.+0      	; 0x3c56 <printFloat+0xe>
    3c56:	0f 92       	push	r0
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3c5c:	ae 01       	movw	r20, r28
    3c5e:	4f 5f       	subi	r20, 0xFF	; 255
    3c60:	5f 4f       	sbci	r21, 0xFF	; 255
    3c62:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <modf>
    3c66:	7b 01       	movw	r14, r22
    3c68:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3c6a:	69 81       	ldd	r22, Y+1	; 0x01
    3c6c:	7a 81       	ldd	r23, Y+2	; 0x02
    3c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c70:	9c 81       	ldd	r25, Y+4	; 0x04
    3c72:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
    3c76:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c7a:	80 91 c0 00 	lds	r24, 0x00C0
    3c7e:	85 ff       	sbrs	r24, 5
    3c80:	fc cf       	rjmp	.-8      	; 0x3c7a <printFloat+0x32>
		;
	UDR0 = c;
    3c82:	8e e2       	ldi	r24, 0x2E	; 46
    3c84:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3c88:	c8 01       	movw	r24, r16
    3c8a:	b7 01       	movw	r22, r14
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	4a e7       	ldi	r20, 0x7A	; 122
    3c92:	54 e4       	ldi	r21, 0x44	; 68
    3c94:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    3c98:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <round>
    3c9c:	0e 94 cd 24 	call	0x499a	; 0x499a <__fixsfsi>
    3ca0:	97 fd       	sbrc	r25, 7
    3ca2:	0d c0       	rjmp	.+26     	; 0x3cbe <printFloat+0x76>
    3ca4:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <printInteger>
}
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	08 95       	ret
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3cbe:	90 95       	com	r25
    3cc0:	80 95       	com	r24
    3cc2:	70 95       	com	r23
    3cc4:	61 95       	neg	r22
    3cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    3cca:	9f 4f       	sbci	r25, 0xFF	; 255
    3ccc:	eb cf       	rjmp	.-42     	; 0x3ca4 <printFloat+0x5c>

00003cce <__vector_25>:
	rx_buffer_head = rx_buffer_tail;
}

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3cce:	1f 92       	push	r1
    3cd0:	0f 92       	push	r0
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	0f 92       	push	r0
    3cd6:	0b b6       	in	r0, 0x3b	; 59
    3cd8:	0f 92       	push	r0
    3cda:	11 24       	eor	r1, r1
    3cdc:	2f 93       	push	r18
    3cde:	3f 93       	push	r19
    3ce0:	4f 93       	push	r20
    3ce2:	5f 93       	push	r21
    3ce4:	6f 93       	push	r22
    3ce6:	7f 93       	push	r23
    3ce8:	8f 93       	push	r24
    3cea:	9f 93       	push	r25
    3cec:	af 93       	push	r26
    3cee:	bf 93       	push	r27
    3cf0:	ef 93       	push	r30
    3cf2:	ff 93       	push	r31
	unsigned char c = UDR0;
    3cf4:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3cf8:	e0 91 79 05 	lds	r30, 0x0579
    3cfc:	f0 91 7a 05 	lds	r31, 0x057A
    3d00:	cf 01       	movw	r24, r30
    3d02:	01 96       	adiw	r24, 0x01	; 1
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	71 e0       	ldi	r23, 0x01	; 1
    3d08:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
    3d0c:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3d0e:	80 91 7b 05 	lds	r24, 0x057B
    3d12:	90 91 7c 05 	lds	r25, 0x057C
    3d16:	28 17       	cp	r18, r24
    3d18:	39 07       	cpc	r19, r25
    3d1a:	39 f0       	breq	.+14     	; 0x3d2a <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3d1c:	e3 58       	subi	r30, 0x83	; 131
    3d1e:	fa 4f       	sbci	r31, 0xFA	; 250
    3d20:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3d22:	30 93 7a 05 	sts	0x057A, r19
    3d26:	20 93 79 05 	sts	0x0579, r18
	}

	if( c == 0x0ff ) {
    3d2a:	4f 3f       	cpi	r20, 0xFF	; 255
    3d2c:	99 f0       	breq	.+38     	; 0x3d54 <__vector_25+0x86>
		gHomed = 0 ;
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3d2e:	ff 91       	pop	r31
    3d30:	ef 91       	pop	r30
    3d32:	bf 91       	pop	r27
    3d34:	af 91       	pop	r26
    3d36:	9f 91       	pop	r25
    3d38:	8f 91       	pop	r24
    3d3a:	7f 91       	pop	r23
    3d3c:	6f 91       	pop	r22
    3d3e:	5f 91       	pop	r21
    3d40:	4f 91       	pop	r20
    3d42:	3f 91       	pop	r19
    3d44:	2f 91       	pop	r18
    3d46:	0f 90       	pop	r0
    3d48:	0b be       	out	0x3b, r0	; 59
    3d4a:	0f 90       	pop	r0
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	0f 90       	pop	r0
    3d50:	1f 90       	pop	r1
    3d52:	18 95       	reti
		rx_buffer_head = i;
	}

	if( c == 0x0ff ) {
		// shut off servo interrupt
		cli();
    3d54:	f8 94       	cli
		st_disable();
    3d56:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <st_disable>
		// not homed
		gHomed = 0 ;
    3d5a:	10 92 53 05 	sts	0x0553, r1
    3d5e:	e7 cf       	rjmp	.-50     	; 0x3d2e <__vector_25+0x60>

00003d60 <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    3d60:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    3d62:	e7 e0       	ldi	r30, 0x07	; 7
    3d64:	f1 e0       	ldi	r31, 0x01	; 1
    3d66:	80 81       	ld	r24, Z
    3d68:	81 60       	ori	r24, 0x01	; 1
    3d6a:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3d6c:	80 81       	ld	r24, Z
    3d6e:	82 60       	ori	r24, 0x02	; 2
    3d70:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3d72:	80 81       	ld	r24, Z
    3d74:	84 60       	ori	r24, 0x04	; 4
    3d76:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3d78:	80 81       	ld	r24, Z
    3d7a:	88 60       	ori	r24, 0x08	; 8
    3d7c:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3d7e:	80 81       	ld	r24, Z
    3d80:	80 64       	ori	r24, 0x40	; 64
    3d82:	80 83       	st	Z, r24

// initialise PORT as well

}
    3d84:	08 95       	ret

00003d86 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	08 95       	ret

00003d8a <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3d90:	80 91 53 05 	lds	r24, 0x0553
    3d94:	88 23       	and	r24, r24
    3d96:	19 f4       	brne	.+6      	; 0x3d9e <atc_fire+0x14>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3d98:	df 91       	pop	r29
    3d9a:	cf 91       	pop	r28
    3d9c:	08 95       	ret

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    3da4:	20 97       	sbiw	r28, 0x00	; 0
    3da6:	29 f1       	breq	.+74     	; 0x3df2 <atc_fire+0x68>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3da8:	80 91 08 01 	lds	r24, 0x0108
    3dac:	81 60       	ori	r24, 0x01	; 1
    3dae:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3db2:	c3 30       	cpi	r28, 0x03	; 3
    3db4:	d1 05       	cpc	r29, r1
    3db6:	09 f4       	brne	.+2      	; 0x3dba <atc_fire+0x30>
    3db8:	46 c0       	rjmp	.+140    	; 0x3e46 <atc_fire+0xbc>
    3dba:	c4 30       	cpi	r28, 0x04	; 4
    3dbc:	d1 05       	cpc	r29, r1
    3dbe:	8c f5       	brge	.+98     	; 0x3e22 <atc_fire+0x98>
    3dc0:	c1 30       	cpi	r28, 0x01	; 1
    3dc2:	d1 05       	cpc	r29, r1
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <atc_fire+0x3e>
    3dc6:	6d c0       	rjmp	.+218    	; 0x3ea2 <atc_fire+0x118>
    3dc8:	22 97       	sbiw	r28, 0x02	; 2
    3dca:	09 f4       	brne	.+2      	; 0x3dce <atc_fire+0x44>
    3dcc:	66 c0       	rjmp	.+204    	; 0x3e9a <atc_fire+0x110>
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3dce:	80 91 08 01 	lds	r24, 0x0108
    3dd2:	8e 7f       	andi	r24, 0xFE	; 254
    3dd4:	80 93 08 01 	sts	0x0108, r24
    3dd8:	28 ee       	ldi	r18, 0xE8	; 232
    3dda:	33 e0       	ldi	r19, 0x03	; 3
    3ddc:	40 e9       	ldi	r20, 0x90	; 144
    3dde:	51 e0       	ldi	r21, 0x01	; 1
    3de0:	ca 01       	movw	r24, r20
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <atc_fire+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de6:	21 50       	subi	r18, 0x01	; 1
    3de8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dea:	d1 f7       	brne	.-12     	; 0x3de0 <atc_fire+0x56>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3dec:	df 91       	pop	r29
    3dee:	cf 91       	pop	r28
    3df0:	08 95       	ret

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3df2:	80 91 08 01 	lds	r24, 0x0108
    3df6:	81 60       	ori	r24, 0x01	; 1
    3df8:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3dfc:	80 91 08 01 	lds	r24, 0x0108
    3e00:	82 60       	ori	r24, 0x02	; 2
    3e02:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e06:	80 91 08 01 	lds	r24, 0x0108
    3e0a:	84 60       	ori	r24, 0x04	; 4
    3e0c:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3e10:	80 91 08 01 	lds	r24, 0x0108
    3e14:	88 60       	ori	r24, 0x08	; 8
    3e16:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <set_busy>
    3e20:	bb cf       	rjmp	.-138    	; 0x3d98 <atc_fire+0xe>
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3e22:	c5 30       	cpi	r28, 0x05	; 5
    3e24:	d1 05       	cpc	r29, r1
    3e26:	09 f4       	brne	.+2      	; 0x3e2a <atc_fire+0xa0>
    3e28:	45 c0       	rjmp	.+138    	; 0x3eb4 <atc_fire+0x12a>
    3e2a:	c5 30       	cpi	r28, 0x05	; 5
    3e2c:	d1 05       	cpc	r29, r1
    3e2e:	04 f1       	brlt	.+64     	; 0x3e70 <atc_fire+0xe6>
    3e30:	26 97       	sbiw	r28, 0x06	; 6
    3e32:	69 f6       	brne	.-102    	; 0x3dce <atc_fire+0x44>
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3e34:	80 91 08 01 	lds	r24, 0x0108
    3e38:	82 60       	ori	r24, 0x02	; 2
    3e3a:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e3e:	80 91 08 01 	lds	r24, 0x0108
    3e42:	8b 7f       	andi	r24, 0xFB	; 251
    3e44:	1d c0       	rjmp	.+58     	; 0x3e80 <atc_fire+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e46:	80 91 08 01 	lds	r24, 0x0108
    3e4a:	8d 7f       	andi	r24, 0xFD	; 253
    3e4c:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e50:	80 91 08 01 	lds	r24, 0x0108
    3e54:	84 60       	ori	r24, 0x04	; 4
    3e56:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3e5a:	80 91 08 01 	lds	r24, 0x0108
    3e5e:	87 7f       	andi	r24, 0xF7	; 247
    3e60:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e64:	80 91 08 01 	lds	r24, 0x0108
    3e68:	8e 7f       	andi	r24, 0xFE	; 254
    3e6a:	80 93 08 01 	sts	0x0108, r24
    3e6e:	af cf       	rjmp	.-162    	; 0x3dce <atc_fire+0x44>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e70:	80 91 08 01 	lds	r24, 0x0108
    3e74:	8d 7f       	andi	r24, 0xFD	; 253
    3e76:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e7a:	80 91 08 01 	lds	r24, 0x0108
    3e7e:	84 60       	ori	r24, 0x04	; 4
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e80:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3e84:	80 91 08 01 	lds	r24, 0x0108
    3e88:	88 60       	ori	r24, 0x08	; 8
    3e8a:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e8e:	80 91 08 01 	lds	r24, 0x0108
    3e92:	8e 7f       	andi	r24, 0xFE	; 254
    3e94:	80 93 08 01 	sts	0x0108, r24
    3e98:	9a cf       	rjmp	.-204    	; 0x3dce <atc_fire+0x44>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e9a:	80 91 08 01 	lds	r24, 0x0108
    3e9e:	8d 7f       	andi	r24, 0xFD	; 253
    3ea0:	cc cf       	rjmp	.-104    	; 0x3e3a <atc_fire+0xb0>
 */
 	switch( tool ) {
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3ea2:	80 91 08 01 	lds	r24, 0x0108
    3ea6:	8d 7f       	andi	r24, 0xFD	; 253
    3ea8:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3eac:	80 91 08 01 	lds	r24, 0x0108
    3eb0:	8b 7f       	andi	r24, 0xFB	; 251
    3eb2:	d1 cf       	rjmp	.-94     	; 0x3e56 <atc_fire+0xcc>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    3eb4:	80 91 08 01 	lds	r24, 0x0108
    3eb8:	82 60       	ori	r24, 0x02	; 2
    3eba:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3ebe:	80 91 08 01 	lds	r24, 0x0108
    3ec2:	8b 7f       	andi	r24, 0xFB	; 251
    3ec4:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    3ec8:	80 91 08 01 	lds	r24, 0x0108
    3ecc:	87 7f       	andi	r24, 0xF7	; 247
    3ece:	80 93 08 01 	sts	0x0108, r24
    3ed2:	7d cf       	rjmp	.-262    	; 0x3dce <atc_fire+0x44>

00003ed4 <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    3ed4:	1f 93       	push	r17
    3ed6:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3ed8:	80 91 53 05 	lds	r24, 0x0553
    3edc:	88 23       	and	r24, r24
    3ede:	19 f4       	brne	.+6      	; 0x3ee6 <DropTool+0x12>
    3ee0:	83 e6       	ldi	r24, 0x63	; 99
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3ee2:	1f 91       	pop	r17
    3ee4:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    3eee:	88 23       	and	r24, r24
    3ef0:	19 f4       	brne	.+6      	; 0x3ef8 <DropTool+0x24>
    3ef2:	85 e0       	ldi	r24, 0x05	; 5
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3ef4:	1f 91       	pop	r17
    3ef6:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    3ef8:	81 2f       	mov	r24, r17
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <atc_fire>

	// head back up
	head_down( 0 );
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    3f10:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3f12:	1f 91       	pop	r17
    3f14:	08 95       	ret

00003f16 <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    3f16:	1f 93       	push	r17
    3f18:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3f1a:	80 91 53 05 	lds	r24, 0x0553
    3f1e:	88 23       	and	r24, r24
    3f20:	19 f4       	brne	.+6      	; 0x3f28 <PickupTool+0x12>
    3f22:	83 e6       	ldi	r24, 0x63	; 99
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3f24:	1f 91       	pop	r17
    3f26:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    3f30:	88 23       	and	r24, r24
    3f32:	19 f4       	brne	.+6      	; 0x3f3a <PickupTool+0x24>
    3f34:	85 e0       	ldi	r24, 0x05	; 5
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3f36:	1f 91       	pop	r17
    3f38:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    3f3a:	81 2f       	mov	r24, r17
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>

	// head back up
	head_down( 0 );
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    3f4a:	80 e9       	ldi	r24, 0x90	; 144
    3f4c:	91 e0       	ldi	r25, 0x01	; 1
    3f4e:	01 97       	sbiw	r24, 0x01	; 1
    3f50:	f1 f7       	brne	.-4      	; 0x3f4e <PickupTool+0x38>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <atc_change>
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3f5c:	1f 91       	pop	r17
    3f5e:	08 95       	ret

00003f60 <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    3f60:	cf 93       	push	r28
    3f62:	df 93       	push	r29
    3f64:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3f66:	80 91 53 05 	lds	r24, 0x0553
    3f6a:	88 23       	and	r24, r24
    3f6c:	71 f0       	breq	.+28     	; 0x3f8a <atc_change+0x2a>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    3f6e:	cf 3f       	cpi	r28, 0xFF	; 255
    3f70:	d1 05       	cpc	r29, r1
    3f72:	39 f0       	breq	.+14     	; 0x3f82 <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    3f74:	0e 94 33 21 	call	0x4266	; 0x4266 <run_vacuum_test>
    3f78:	88 23       	and	r24, r24
    3f7a:	59 f0       	breq	.+22     	; 0x3f92 <atc_change+0x32>
		PickupTool(tool);
	} else { 
		DropTool(tool);
    3f7c:	8c 2f       	mov	r24, r28
    3f7e:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <DropTool>
    3f82:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	08 95       	ret

*/

unsigned char atc_change(int tool)
{
	if( gHomed == FALSE  ){ 
    3f8a:	83 e6       	ldi	r24, 0x63	; 99
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	08 95       	ret
	if( tool == toolId ) {
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
		PickupTool(tool);
    3f92:	8c 2f       	mov	r24, r28
    3f94:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <PickupTool>
    3f98:	80 e0       	ldi	r24, 0x00	; 0
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    3f9a:	df 91       	pop	r29
    3f9c:	cf 91       	pop	r28
    3f9e:	08 95       	ret

00003fa0 <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    3fa0:	80 91 53 05 	lds	r24, 0x0553
    3fa4:	88 23       	and	r24, r24
    3fa6:	11 f4       	brne	.+4      	; 0x3fac <check_for_tool+0xc>
    3fa8:	83 e6       	ldi	r24, 0x63	; 99
    3faa:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    3fac:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    3fb0:	88 23       	and	r24, r24
    3fb2:	a1 f4       	brne	.+40     	; 0x3fdc <check_for_tool+0x3c>
		head_down( FALSE) ;
	}

	goto_vacpad();
    3fb4:	0e 94 6d 21 	call	0x42da	; 0x42da <goto_vacpad>
	
	head_down(TRUE);
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
	
	vacuum(TRUE);
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>

	if( vacuum_state() == TRUE )  {
    3fc8:	0e 94 2d 21 	call	0x425a	; 0x425a <vacuum_state>
    3fcc:	81 30       	cpi	r24, 0x01	; 1
    3fce:	59 f0       	breq	.+22     	; 0x3fe6 <check_for_tool+0x46>
		head_down( FALSE) ;
		return TRUE;
	} else {
		head_down( FALSE) ;
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    3fda:	08 95       	ret
	}


	//move head up
	if( is_head_down() ) {
		head_down( FALSE) ;
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    3fe4:	e7 cf       	rjmp	.-50     	; 0x3fb4 <check_for_tool+0x14>
	head_down(TRUE);
	
	vacuum(TRUE);

	if( vacuum_state() == TRUE )  {
		head_down( FALSE) ;
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	08 95       	ret

00003ff2 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    3ff2:	ea e0       	ldi	r30, 0x0A	; 10
    3ff4:	f1 e0       	ldi	r31, 0x01	; 1
    3ff6:	80 81       	ld	r24, Z
    3ff8:	80 62       	ori	r24, 0x20	; 32
    3ffa:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    3ffc:	eb e0       	ldi	r30, 0x0B	; 11
    3ffe:	f1 e0       	ldi	r31, 0x01	; 1
    4000:	80 81       	ld	r24, Z
    4002:	80 62       	ori	r24, 0x20	; 32
    4004:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    4006:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    4008:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    400a:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    400c:	41 9a       	sbi	0x08, 1	; 8
}
    400e:	08 95       	ret

00004010 <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    4010:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    4012:	81 70       	andi	r24, 0x01	; 1
    4014:	08 95       	ret

00004016 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    4016:	86 b1       	in	r24, 0x06	; 6
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	96 95       	lsr	r25
    401c:	87 95       	ror	r24

	return state;
}
    401e:	81 70       	andi	r24, 0x01	; 1
    4020:	08 95       	ret

00004022 <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}


char head_down(int state)
{
    4022:	cf 93       	push	r28
    4024:	df 93       	push	r29
    4026:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    4028:	80 91 53 05 	lds	r24, 0x0553
    402c:	88 23       	and	r24, r24
    402e:	19 f1       	breq	.+70     	; 0x4076 <head_down+0x54>
		return 0;
	}

	// wait til head stops
	while( head_moving() );
    4030:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
    4034:	88 23       	and	r24, r24
    4036:	e1 f7       	brne	.-8      	; 0x4030 <head_down+0xe>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <set_busy>

// head down mode
  if( state == 0 ) {
    403e:	20 97       	sbiw	r28, 0x00	; 0
    4040:	e9 f0       	breq	.+58     	; 0x407c <head_down+0x5a>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    4042:	80 91 0b 01 	lds	r24, 0x010B
    4046:	8f 7d       	andi	r24, 0xDF	; 223
    4048:	80 93 0b 01 	sts	0x010B, r24
    404c:	20 ed       	ldi	r18, 0xD0	; 208
    404e:	37 e0       	ldi	r19, 0x07	; 7
    4050:	40 e9       	ldi	r20, 0x90	; 144
    4052:	51 e0       	ldi	r21, 0x01	; 1
    4054:	ca 01       	movw	r24, r20
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	f1 f7       	brne	.-4      	; 0x4056 <head_down+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    405a:	21 50       	subi	r18, 0x01	; 1
    405c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405e:	d1 f7       	brne	.-12     	; 0x4054 <head_down+0x32>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    4060:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    4062:	81 70       	andi	r24, 0x01	; 1
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	8c 17       	cp	r24, r28
    4068:	9d 07       	cpc	r25, r29
    406a:	81 f0       	breq	.+32     	; 0x408c <head_down+0x6a>

	  printPgmString(PSTR("Head down error\n\r"));
    406c:	8f ed       	ldi	r24, 0xDF	; 223
    406e:	95 e0       	ldi	r25, 0x05	; 5
    4070:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    4074:	80 e0       	ldi	r24, 0x00	; 0
  }

 	set_busy( FALSE );

	return 1;
}
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	08 95       	ret
	set_busy( TRUE );

// head down mode
  if( state == 0 ) {

	HEAD_PORT |= _BV( HEAD );
    407c:	80 91 0b 01 	lds	r24, 0x010B
    4080:	80 62       	ori	r24, 0x20	; 32
    4082:	80 93 0b 01 	sts	0x010B, r24
    4086:	20 ed       	ldi	r18, 0xD0	; 208
    4088:	37 e0       	ldi	r19, 0x07	; 7
    408a:	e2 cf       	rjmp	.-60     	; 0x4050 <head_down+0x2e>
	  printPgmString(PSTR("Head down error\n\r"));
	  
	  return 0;
  }

 	set_busy( FALSE );
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <set_busy>
    4092:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	08 95       	ret

0000409a <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    409a:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    409c:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    409e:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    40a0:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    40a2:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    40a4:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    40a6:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    40a8:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    40aa:	a4 e0       	ldi	r26, 0x04	; 4
    40ac:	b1 e0       	ldi	r27, 0x01	; 1
    40ae:	8c 91       	ld	r24, X
    40b0:	8e 7f       	andi	r24, 0xFE	; 254
    40b2:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    40b4:	e5 e0       	ldi	r30, 0x05	; 5
    40b6:	f1 e0       	ldi	r31, 0x01	; 1
    40b8:	80 81       	ld	r24, Z
    40ba:	81 60       	ori	r24, 0x01	; 1
    40bc:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    40be:	8c 91       	ld	r24, X
    40c0:	8f 7e       	andi	r24, 0xEF	; 239
    40c2:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    40c4:	80 81       	ld	r24, Z
    40c6:	80 61       	ori	r24, 0x10	; 16
    40c8:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    40ca:	a1 e0       	ldi	r26, 0x01	; 1
    40cc:	b1 e0       	ldi	r27, 0x01	; 1
    40ce:	8c 91       	ld	r24, X
    40d0:	8e 7f       	andi	r24, 0xFE	; 254
    40d2:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    40d4:	e2 e0       	ldi	r30, 0x02	; 2
    40d6:	f1 e0       	ldi	r31, 0x01	; 1
    40d8:	80 81       	ld	r24, Z
    40da:	81 60       	ori	r24, 0x01	; 1
    40dc:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    40de:	8c 91       	ld	r24, X
    40e0:	8d 7f       	andi	r24, 0xFD	; 253
    40e2:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    40e4:	80 81       	ld	r24, Z
    40e6:	82 60       	ori	r24, 0x02	; 2
    40e8:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    40ea:	e0 e9       	ldi	r30, 0x90	; 144
    40ec:	f0 e0       	ldi	r31, 0x00	; 0
    40ee:	80 81       	ld	r24, Z
    40f0:	82 60       	ori	r24, 0x02	; 2
    40f2:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    40f4:	8c e7       	ldi	r24, 0x7C	; 124
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	90 93 99 00 	sts	0x0099, r25
    40fc:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    4100:	10 92 95 00 	sts	0x0095, r1
    4104:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    4108:	84 e0       	ldi	r24, 0x04	; 4
    410a:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    410e:	e1 e7       	ldi	r30, 0x71	; 113
    4110:	f0 e0       	ldi	r31, 0x00	; 0
    4112:	80 81       	ld	r24, Z
    4114:	82 60       	ori	r24, 0x02	; 2
    4116:	80 83       	st	Z, r24

}
    4118:	08 95       	ret

0000411a <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    411a:	8c b1       	in	r24, 0x0c	; 12
    411c:	82 95       	swap	r24
    411e:	86 95       	lsr	r24
    4120:	87 70       	andi	r24, 0x07	; 7
    4122:	80 95       	com	r24

	return state;
}
    4124:	81 70       	andi	r24, 0x01	; 1
    4126:	08 95       	ret

00004128 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    4128:	82 b3       	in	r24, 0x12	; 18
    412a:	82 95       	swap	r24
    412c:	86 95       	lsr	r24
    412e:	87 70       	andi	r24, 0x07	; 7
    4130:	80 95       	com	r24

	return state;
}
    4132:	81 70       	andi	r24, 0x01	; 1
    4134:	08 95       	ret

00004136 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    4136:	8c b1       	in	r24, 0x0c	; 12
    4138:	82 95       	swap	r24
    413a:	8f 70       	andi	r24, 0x0F	; 15
    413c:	80 95       	com	r24

	return state;
}
    413e:	81 70       	andi	r24, 0x01	; 1
    4140:	08 95       	ret

00004142 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    4142:	80 91 03 01 	lds	r24, 0x0103
    4146:	86 95       	lsr	r24
    4148:	80 95       	com	r24

	return state;
}
    414a:	81 70       	andi	r24, 0x01	; 1
    414c:	08 95       	ret

0000414e <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    414e:	86 b1       	in	r24, 0x06	; 6
    4150:	82 95       	swap	r24
    4152:	8f 70       	andi	r24, 0x0F	; 15
    4154:	80 95       	com	r24

	return state;
}
    4156:	81 70       	andi	r24, 0x01	; 1
    4158:	08 95       	ret

0000415a <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    415a:	80 91 00 01 	lds	r24, 0x0100
    415e:	80 95       	com	r24

	return state;
}
    4160:	81 70       	andi	r24, 0x01	; 1
    4162:	08 95       	ret

00004164 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    4164:	80 91 03 01 	lds	r24, 0x0103
    4168:	80 95       	com	r24

	return state;
}
    416a:	81 70       	andi	r24, 0x01	; 1
    416c:	08 95       	ret

0000416e <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    416e:	83 b1       	in	r24, 0x03	; 3
    4170:	82 95       	swap	r24
    4172:	86 95       	lsr	r24
    4174:	87 70       	andi	r24, 0x07	; 7
    4176:	80 95       	com	r24

	return state;
}
    4178:	81 70       	andi	r24, 0x01	; 1
    417a:	08 95       	ret

0000417c <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    417c:	80 91 00 01 	lds	r24, 0x0100
    4180:	86 95       	lsr	r24
    4182:	80 95       	com	r24

	return state;
}
    4184:	81 70       	andi	r24, 0x01	; 1
    4186:	08 95       	ret

00004188 <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    4188:	1f 92       	push	r1
    418a:	0f 92       	push	r0
    418c:	0f b6       	in	r0, 0x3f	; 63
    418e:	0f 92       	push	r0
    4190:	11 24       	eor	r1, r1
	return;
}
    4192:	0f 90       	pop	r0
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	0f 90       	pop	r0
    4198:	1f 90       	pop	r1
    419a:	18 95       	reti

0000419c <process_panel>:
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    419c:	1d 9b       	sbis	0x03, 5	; 3
    419e:	20 c0       	rjmp	.+64     	; 0x41e0 <process_panel+0x44>

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    41a0:	80 91 00 01 	lds	r24, 0x0100
    41a4:	80 ff       	sbrs	r24, 0
    41a6:	0b c0       	rjmp	.+22     	; 0x41be <process_panel+0x22>
	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
    41a8:	80 91 7e 06 	lds	r24, 0x067E
    41ac:	81 30       	cpi	r24, 0x01	; 1
    41ae:	d9 f0       	breq	.+54     	; 0x41e6 <process_panel+0x4a>
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    41b0:	34 9b       	sbis	0x06, 4	; 6
    41b2:	0e c0       	rjmp	.+28     	; 0x41d0 <process_panel+0x34>
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
    41b4:	80 91 7d 06 	lds	r24, 0x067D
    41b8:	81 30       	cpi	r24, 0x01	; 1
    41ba:	e1 f0       	breq	.+56     	; 0x41f4 <process_panel+0x58>
    41bc:	08 95       	ret
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	80 93 7e 06 	sts	0x067E, r24
		vacuum(1);
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
	} else if(bvac == 1 ) {
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    41cc:	34 99       	sbic	0x06, 4	; 6
    41ce:	f2 cf       	rjmp	.-28     	; 0x41b4 <process_panel+0x18>
		bhead = 1;
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	80 93 7d 06 	sts	0x067D, r24
		head_down(1);
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    41de:	08 95       	ret
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    41e0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <mc_go_home>
    41e4:	dd cf       	rjmp	.-70     	; 0x41a0 <process_panel+0x4>

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
		bvac = 0;
    41e6:	10 92 7e 06 	sts	0x067E, r1
		vacuum(0);
    41ea:	80 e0       	ldi	r24, 0x00	; 0
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
    41f2:	de cf       	rjmp	.-68     	; 0x41b0 <process_panel+0x14>

	if( is_phead() ) {
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
		bhead = 0;
    41f4:	10 92 7d 06 	sts	0x067D, r1
		head_down(0);
    41f8:	80 e0       	ldi	r24, 0x00	; 0
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    4200:	08 95       	ret

00004202 <vacuum_init>:
#include "stepper.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    4202:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    4204:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    4206:	ea e0       	ldi	r30, 0x0A	; 10
    4208:	f1 e0       	ldi	r31, 0x01	; 1
    420a:	80 81       	ld	r24, Z
    420c:	80 61       	ori	r24, 0x10	; 16
    420e:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    4210:	eb e0       	ldi	r30, 0x0B	; 11
    4212:	f1 e0       	ldi	r31, 0x01	; 1
    4214:	80 81       	ld	r24, Z
    4216:	80 61       	ori	r24, 0x10	; 16
    4218:	80 83       	st	Z, r24

}
    421a:	08 95       	ret

0000421c <vacuum>:

// switches vacuum on and off
void vacuum(int state)
{
    421c:	9c 01       	movw	r18, r24
	if( gHomed == FALSE ) return;
    421e:	80 91 53 05 	lds	r24, 0x0553
    4222:	88 23       	and	r24, r24
    4224:	89 f0       	breq	.+34     	; 0x4248 <vacuum+0x2c>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    4226:	23 2b       	or	r18, r19
    4228:	81 f0       	breq	.+32     	; 0x424a <vacuum+0x2e>

	HEAD_PORT |= _BV( VACUUM );

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    422a:	80 91 0b 01 	lds	r24, 0x010B
    422e:	8f 7e       	andi	r24, 0xEF	; 239
    4230:	80 93 0b 01 	sts	0x010B, r24
    4234:	28 e8       	ldi	r18, 0x88	; 136
    4236:	33 e1       	ldi	r19, 0x13	; 19
    4238:	40 e9       	ldi	r20, 0x90	; 144
    423a:	51 e0       	ldi	r21, 0x01	; 1
    423c:	ca 01       	movw	r24, r20
    423e:	01 97       	sbiw	r24, 0x01	; 1
    4240:	f1 f7       	brne	.-4      	; 0x423e <vacuum+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4242:	21 50       	subi	r18, 0x01	; 1
    4244:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4246:	d1 f7       	brne	.-12     	; 0x423c <vacuum+0x20>
    4248:	08 95       	ret
#endif

// vacuum  on / off
  if( state == 0 ) {

	HEAD_PORT |= _BV( VACUUM );
    424a:	80 91 0b 01 	lds	r24, 0x010B
    424e:	80 61       	ori	r24, 0x10	; 16
    4250:	80 93 0b 01 	sts	0x010B, r24
    4254:	28 e8       	ldi	r18, 0x88	; 136
    4256:	33 e1       	ldi	r19, 0x13	; 19
    4258:	ef cf       	rjmp	.-34     	; 0x4238 <vacuum+0x1c>

0000425a <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    425a:	89 b1       	in	r24, 0x09	; 9
    425c:	80 95       	com	r24

	return state;
}
    425e:	88 1f       	adc	r24, r24
    4260:	88 27       	eor	r24, r24
    4262:	88 1f       	adc	r24, r24
    4264:	08 95       	ret

00004266 <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    4266:	af 92       	push	r10
    4268:	bf 92       	push	r11
    426a:	cf 92       	push	r12
    426c:	df 92       	push	r13
    426e:	ef 92       	push	r14
    4270:	ff 92       	push	r15
    4272:	0f 93       	push	r16
    4274:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    4276:	80 91 53 05 	lds	r24, 0x0553
    427a:	88 23       	and	r24, r24
    427c:	51 f4       	brne	.+20     	; 0x4292 <run_vacuum_test+0x2c>
    427e:	83 e6       	ldi	r24, 0x63	; 99
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	ff 90       	pop	r15
    4286:	ef 90       	pop	r14
    4288:	df 90       	pop	r13
    428a:	cf 90       	pop	r12
    428c:	bf 90       	pop	r11
    428e:	af 90       	pop	r10
    4290:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    429a:	63 ec       	ldi	r22, 0xC3	; 195
    429c:	73 ed       	ldi	r23, 0xD3	; 211
    429e:	81 e4       	ldi	r24, 0x41	; 65
    42a0:	91 e4       	ldi	r25, 0x41	; 65
    42a2:	2a e1       	ldi	r18, 0x1A	; 26
    42a4:	3b e8       	ldi	r19, 0x8B	; 139
    42a6:	4d e9       	ldi	r20, 0x9D	; 157
    42a8:	50 e4       	ldi	r21, 0x40	; 64
    42aa:	0f 2e       	mov	r0, r31
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	ef 2e       	mov	r14, r31
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	ff 2e       	mov	r15, r31
    42b4:	f0 e8       	ldi	r31, 0x80	; 128
    42b6:	0f 2f       	mov	r16, r31
    42b8:	ff eb       	ldi	r31, 0xBF	; 191
    42ba:	1f 2f       	mov	r17, r31
    42bc:	f0 2d       	mov	r31, r0
    42be:	57 01       	movw	r10, r14
    42c0:	68 01       	movw	r12, r16
    42c2:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    42c6:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
    42ca:	88 23       	and	r24, r24
    42cc:	e1 f7       	brne	.-8      	; 0x42c6 <run_vacuum_test+0x60>
    42ce:	80 e9       	ldi	r24, 0x90	; 144
    42d0:	91 e0       	ldi	r25, 0x01	; 1
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	f1 f7       	brne	.-4      	; 0x42d2 <run_vacuum_test+0x6c>
    42d6:	80 e0       	ldi	r24, 0x00	; 0
    42d8:	d3 cf       	rjmp	.-90     	; 0x4280 <run_vacuum_test+0x1a>

000042da <goto_vacpad>:
	return GCSTATUS_OK;

}

unsigned char goto_vacpad( void ) 
{
    42da:	8f 92       	push	r8
    42dc:	9f 92       	push	r9
    42de:	af 92       	push	r10
    42e0:	bf 92       	push	r11
    42e2:	cf 92       	push	r12
    42e4:	df 92       	push	r13
    42e6:	ef 92       	push	r14
    42e8:	ff 92       	push	r15
    42ea:	0f 93       	push	r16
    42ec:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    42ee:	80 91 53 05 	lds	r24, 0x0553
    42f2:	88 23       	and	r24, r24
    42f4:	61 f4       	brne	.+24     	; 0x430e <goto_vacpad+0x34>
    42f6:	83 e6       	ldi	r24, 0x63	; 99

	while( is_head_down() ) ;
	
	return GCSTATUS_OK;

}
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	ff 90       	pop	r15
    42fe:	ef 90       	pop	r14
    4300:	df 90       	pop	r13
    4302:	cf 90       	pop	r12
    4304:	bf 90       	pop	r11
    4306:	af 90       	pop	r10
    4308:	9f 90       	pop	r9
    430a:	8f 90       	pop	r8
    430c:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
    430e:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    4312:	88 23       	and	r24, r24
    4314:	09 f0       	breq	.+2      	; 0x4318 <goto_vacpad+0x3e>
    4316:	20 c1       	rjmp	.+576    	; 0x4558 <goto_vacpad+0x27e>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4318:	63 ec       	ldi	r22, 0xC3	; 195
    431a:	73 ed       	ldi	r23, 0xD3	; 211
    431c:	81 e4       	ldi	r24, 0x41	; 65
    431e:	91 e4       	ldi	r25, 0x41	; 65
    4320:	2a e1       	ldi	r18, 0x1A	; 26
    4322:	3b e8       	ldi	r19, 0x8B	; 139
    4324:	4d e9       	ldi	r20, 0x9D	; 157
    4326:	50 e4       	ldi	r21, 0x40	; 64
    4328:	0f 2e       	mov	r0, r31
    432a:	f0 e0       	ldi	r31, 0x00	; 0
    432c:	ef 2e       	mov	r14, r31
    432e:	f0 e0       	ldi	r31, 0x00	; 0
    4330:	ff 2e       	mov	r15, r31
    4332:	f0 e8       	ldi	r31, 0x80	; 128
    4334:	0f 2f       	mov	r16, r31
    4336:	ff eb       	ldi	r31, 0xBF	; 191
    4338:	1f 2f       	mov	r17, r31
    433a:	f0 2d       	mov	r31, r0
    433c:	57 01       	movw	r10, r14
    433e:	68 01       	movw	r12, r16
    4340:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>

	while( head_moving() );	
    4344:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
    4348:	88 23       	and	r24, r24
    434a:	e1 f7       	brne	.-8      	; 0x4344 <goto_vacpad+0x6a>
    434c:	80 e9       	ldi	r24, 0x90	; 144
    434e:	91 e0       	ldi	r25, 0x01	; 1
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	f1 f7       	brne	.-4      	; 0x4350 <goto_vacpad+0x76>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
    435c:	28 e8       	ldi	r18, 0x88	; 136
    435e:	33 e1       	ldi	r19, 0x13	; 19
    4360:	40 e9       	ldi	r20, 0x90	; 144
    4362:	51 e0       	ldi	r21, 0x01	; 1
    4364:	ca 01       	movw	r24, r20
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <goto_vacpad+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436a:	21 50       	subi	r18, 0x01	; 1
    436c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    436e:	d1 f7       	brne	.-12     	; 0x4364 <goto_vacpad+0x8a>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    4378:	88 23       	and	r24, r24
    437a:	09 f4       	brne	.+2      	; 0x437e <goto_vacpad+0xa4>
    437c:	e7 c0       	rjmp	.+462    	; 0x454c <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    437e:	20 e1       	ldi	r18, 0x10	; 16
    4380:	37 e2       	ldi	r19, 0x27	; 39
    4382:	40 e9       	ldi	r20, 0x90	; 144
    4384:	51 e0       	ldi	r21, 0x01	; 1
    4386:	ca 01       	movw	r24, r20
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	f1 f7       	brne	.-4      	; 0x4388 <goto_vacpad+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438c:	21 50       	subi	r18, 0x01	; 1
    438e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4390:	d1 f7       	brne	.-12     	; 0x4386 <goto_vacpad+0xac>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    4392:	99 b0       	in	r9, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    43a4:	88 23       	and	r24, r24
    43a6:	09 f4       	brne	.+2      	; 0x43aa <goto_vacpad+0xd0>
    43a8:	c8 c0       	rjmp	.+400    	; 0x453a <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    43aa:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    43ae:	88 23       	and	r24, r24
    43b0:	e1 f7       	brne	.-8      	; 0x43aa <goto_vacpad+0xd0>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    43b2:	6d e3       	ldi	r22, 0x3D	; 61
    43b4:	7b e9       	ldi	r23, 0x9B	; 155
    43b6:	8d e4       	ldi	r24, 0x4D	; 77
    43b8:	91 e4       	ldi	r25, 0x41	; 65
    43ba:	2c ed       	ldi	r18, 0xDC	; 220
    43bc:	38 e6       	ldi	r19, 0x68	; 104
    43be:	44 e9       	ldi	r20, 0x94	; 148
    43c0:	50 e4       	ldi	r21, 0x40	; 64
    43c2:	0f 2e       	mov	r0, r31
    43c4:	f0 e0       	ldi	r31, 0x00	; 0
    43c6:	ef 2e       	mov	r14, r31
    43c8:	f0 e0       	ldi	r31, 0x00	; 0
    43ca:	ff 2e       	mov	r15, r31
    43cc:	f0 e8       	ldi	r31, 0x80	; 128
    43ce:	0f 2f       	mov	r16, r31
    43d0:	ff eb       	ldi	r31, 0xBF	; 191
    43d2:	1f 2f       	mov	r17, r31
    43d4:	f0 2d       	mov	r31, r0
    43d6:	57 01       	movw	r10, r14
    43d8:	68 01       	movw	r12, r16
    43da:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>

	while( head_moving() );	
    43de:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
    43e2:	88 23       	and	r24, r24
    43e4:	e1 f7       	brne	.-8      	; 0x43de <goto_vacpad+0x104>
    43e6:	80 e9       	ldi	r24, 0x90	; 144
    43e8:	91 e0       	ldi	r25, 0x01	; 1
    43ea:	01 97       	sbiw	r24, 0x01	; 1
    43ec:	f1 f7       	brne	.-4      	; 0x43ea <goto_vacpad+0x110>
    43ee:	20 ea       	ldi	r18, 0xA0	; 160
    43f0:	3f e0       	ldi	r19, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f2:	40 e9       	ldi	r20, 0x90	; 144
    43f4:	51 e0       	ldi	r21, 0x01	; 1
    43f6:	ca 01       	movw	r24, r20
    43f8:	01 97       	sbiw	r24, 0x01	; 1
    43fa:	f1 f7       	brne	.-4      	; 0x43f8 <goto_vacpad+0x11e>
    43fc:	21 50       	subi	r18, 0x01	; 1
    43fe:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4400:	d1 f7       	brne	.-12     	; 0x43f6 <goto_vacpad+0x11c>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    440a:	88 23       	and	r24, r24
    440c:	09 f4       	brne	.+2      	; 0x4410 <goto_vacpad+0x136>
    440e:	95 c0       	rjmp	.+298    	; 0x453a <goto_vacpad+0x260>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    4410:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    4414:	88 23       	and	r24, r24
    4416:	e1 f3       	breq	.-8      	; 0x4410 <goto_vacpad+0x136>
    4418:	20 e1       	ldi	r18, 0x10	; 16
    441a:	37 e2       	ldi	r19, 0x27	; 39
    441c:	40 e9       	ldi	r20, 0x90	; 144
    441e:	51 e0       	ldi	r21, 0x01	; 1
    4420:	ca 01       	movw	r24, r20
    4422:	01 97       	sbiw	r24, 0x01	; 1
    4424:	f1 f7       	brne	.-4      	; 0x4422 <goto_vacpad+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4426:	21 50       	subi	r18, 0x01	; 1
    4428:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    442a:	d1 f7       	brne	.-12     	; 0x4420 <goto_vacpad+0x146>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <atc_fire>
    4434:	20 e4       	ldi	r18, 0x40	; 64
    4436:	3f e1       	ldi	r19, 0x1F	; 31
    4438:	40 e9       	ldi	r20, 0x90	; 144
    443a:	51 e0       	ldi	r21, 0x01	; 1
    443c:	ca 01       	movw	r24, r20
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <goto_vacpad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4442:	21 50       	subi	r18, 0x01	; 1
    4444:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4446:	d1 f7       	brne	.-12     	; 0x443c <goto_vacpad+0x162>
    4448:	88 24       	eor	r8, r8
    444a:	97 fc       	sbrc	r9, 7
    444c:	6b c0       	rjmp	.+214    	; 0x4524 <goto_vacpad+0x24a>
    444e:	88 24       	eor	r8, r8
    4450:	83 94       	inc	r8

		// tool changer off
		atc_fire ( 0 );
		
		// head up
		if( head_down( 0 ) == 0 ) {
    4452:	28 e8       	ldi	r18, 0x88	; 136
    4454:	33 e1       	ldi	r19, 0x13	; 19
    4456:	40 e9       	ldi	r20, 0x90	; 144
    4458:	51 e0       	ldi	r21, 0x01	; 1
    445a:	ca 01       	movw	r24, r20
    445c:	01 97       	sbiw	r24, 0x01	; 1
    445e:	f1 f7       	brne	.-4      	; 0x445c <goto_vacpad+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4460:	21 50       	subi	r18, 0x01	; 1
    4462:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4464:	d1 f7       	brne	.-12     	; 0x445a <goto_vacpad+0x180>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    446e:	88 23       	and	r24, r24
    4470:	09 f4       	brne	.+2      	; 0x4474 <goto_vacpad+0x19a>
    4472:	63 c0       	rjmp	.+198    	; 0x453a <goto_vacpad+0x260>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    4474:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    4478:	81 30       	cpi	r24, 0x01	; 1
    447a:	e1 f3       	breq	.-8      	; 0x4474 <goto_vacpad+0x19a>
    447c:	28 e9       	ldi	r18, 0x98	; 152
    447e:	3a e3       	ldi	r19, 0x3A	; 58
    4480:	40 e9       	ldi	r20, 0x90	; 144
    4482:	51 e0       	ldi	r21, 0x01	; 1
    4484:	ca 01       	movw	r24, r20
    4486:	01 97       	sbiw	r24, 0x01	; 1
    4488:	f1 f7       	brne	.-4      	; 0x4486 <goto_vacpad+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    448a:	21 50       	subi	r18, 0x01	; 1
    448c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    448e:	d1 f7       	brne	.-12     	; 0x4484 <goto_vacpad+0x1aa>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4490:	63 ec       	ldi	r22, 0xC3	; 195
    4492:	73 ed       	ldi	r23, 0xD3	; 211
    4494:	81 e4       	ldi	r24, 0x41	; 65
    4496:	91 e4       	ldi	r25, 0x41	; 65
    4498:	2a e1       	ldi	r18, 0x1A	; 26
    449a:	3b e8       	ldi	r19, 0x8B	; 139
    449c:	4d e9       	ldi	r20, 0x9D	; 157
    449e:	50 e4       	ldi	r21, 0x40	; 64
    44a0:	0f 2e       	mov	r0, r31
    44a2:	f0 e0       	ldi	r31, 0x00	; 0
    44a4:	ef 2e       	mov	r14, r31
    44a6:	f0 e0       	ldi	r31, 0x00	; 0
    44a8:	ff 2e       	mov	r15, r31
    44aa:	f0 e8       	ldi	r31, 0x80	; 128
    44ac:	0f 2f       	mov	r16, r31
    44ae:	ff eb       	ldi	r31, 0xBF	; 191
    44b0:	1f 2f       	mov	r17, r31
    44b2:	f0 2d       	mov	r31, r0
    44b4:	57 01       	movw	r10, r14
    44b6:	68 01       	movw	r12, r16
    44b8:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>

	while( head_moving() );	
    44bc:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
    44c0:	88 23       	and	r24, r24
    44c2:	e1 f7       	brne	.-8      	; 0x44bc <goto_vacpad+0x1e2>
    44c4:	80 e9       	ldi	r24, 0x90	; 144
    44c6:	91 e0       	ldi	r25, 0x01	; 1
    44c8:	01 97       	sbiw	r24, 0x01	; 1
    44ca:	f1 f7       	brne	.-4      	; 0x44c8 <goto_vacpad+0x1ee>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
    44d4:	28 e8       	ldi	r18, 0x88	; 136
    44d6:	33 e1       	ldi	r19, 0x13	; 19
    44d8:	40 e9       	ldi	r20, 0x90	; 144
    44da:	51 e0       	ldi	r21, 0x01	; 1
    44dc:	ca 01       	movw	r24, r20
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	f1 f7       	brne	.-4      	; 0x44de <goto_vacpad+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44e2:	21 50       	subi	r18, 0x01	; 1
    44e4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e6:	d1 f7       	brne	.-12     	; 0x44dc <goto_vacpad+0x202>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    44f0:	88 23       	and	r24, r24
    44f2:	61 f1       	breq	.+88     	; 0x454c <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    44f4:	20 e1       	ldi	r18, 0x10	; 16
    44f6:	37 e2       	ldi	r19, 0x27	; 39
    44f8:	40 e9       	ldi	r20, 0x90	; 144
    44fa:	51 e0       	ldi	r21, 0x01	; 1
    44fc:	ca 01       	movw	r24, r20
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	f1 f7       	brne	.-4      	; 0x44fe <goto_vacpad+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4502:	21 50       	subi	r18, 0x01	; 1
    4504:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4506:	d1 f7       	brne	.-12     	; 0x44fc <goto_vacpad+0x222>

   _delay_ms( 1000 );


	// check vacuum
	if( vacuum_state() ) {
    4508:	4f 99       	sbic	0x09, 7	; 9
    450a:	19 c0       	rjmp	.+50     	; 0x453e <goto_vacpad+0x264>
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    450c:	88 20       	and	r8, r8
    450e:	49 f1       	breq	.+82     	; 0x4562 <goto_vacpad+0x288>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup failed\r\n"));
#endif

// oops
		head_down(0);
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
		vacuum( 0 );
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
    4520:	85 e0       	ldi	r24, 0x05	; 5
    4522:	ea ce       	rjmp	.-556    	; 0x42f8 <goto_vacpad+0x1e>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <atc_fire>
		
		// head up
		if( head_down( 0 ) == 0 ) {
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    4534:	88 23       	and	r24, r24
    4536:	09 f0       	breq	.+2      	; 0x453a <goto_vacpad+0x260>
    4538:	9d cf       	rjmp	.-198    	; 0x4474 <goto_vacpad+0x19a>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    453a:	85 e0       	ldi	r24, 0x05	; 5
    453c:	dd ce       	rjmp	.-582    	; 0x42f8 <goto_vacpad+0x1e>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	88 16       	cp	r8, r24
    4542:	79 f0       	breq	.+30     	; 0x4562 <goto_vacpad+0x288>
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
#endif

			head_down(0);
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
			vacuum( 0 );
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>
    4554:	85 e0       	ldi	r24, 0x05	; 5
    4556:	d0 ce       	rjmp	.-608    	; 0x42f8 <goto_vacpad+0x1e>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    4560:	db ce       	rjmp	.-586    	; 0x4318 <goto_vacpad+0x3e>
		}

	}	

// vacuum off
	vacuum( 0 );
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    4572:	88 23       	and	r24, r24
    4574:	11 f3       	breq	.-60     	; 0x453a <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4576:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    457a:	88 23       	and	r24, r24
    457c:	e1 f7       	brne	.-8      	; 0x4576 <goto_vacpad+0x29c>
    457e:	bc ce       	rjmp	.-648    	; 0x42f8 <goto_vacpad+0x1e>

00004580 <test_mode>:
	return GCSTATUS_OK;

}

unsigned char test_mode(void)
{
    4580:	8f 92       	push	r8
    4582:	9f 92       	push	r9
    4584:	af 92       	push	r10
    4586:	bf 92       	push	r11
    4588:	cf 92       	push	r12
    458a:	df 92       	push	r13
    458c:	ef 92       	push	r14
    458e:	ff 92       	push	r15
    4590:	0f 93       	push	r16
    4592:	1f 93       	push	r17
    4594:	cf 93       	push	r28
    4596:	df 93       	push	r29
	int i;
	double x,y;

	if( gHomed == FALSE ) {
    4598:	80 91 53 05 	lds	r24, 0x0553
    459c:	88 23       	and	r24, r24
    459e:	71 f4       	brne	.+28     	; 0x45bc <test_mode+0x3c>
    45a0:	83 e6       	ldi	r24, 0x63	; 99

	}

	return GCSTATUS_OK;

}
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	1f 91       	pop	r17
    45a8:	0f 91       	pop	r16
    45aa:	ff 90       	pop	r15
    45ac:	ef 90       	pop	r14
    45ae:	df 90       	pop	r13
    45b0:	cf 90       	pop	r12
    45b2:	bf 90       	pop	r11
    45b4:	af 90       	pop	r10
    45b6:	9f 90       	pop	r9
    45b8:	8f 90       	pop	r8
    45ba:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
    45bc:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    45c0:	88 23       	and	r24, r24
    45c2:	09 f0       	breq	.+2      	; 0x45c6 <test_mode+0x46>
    45c4:	4a c0       	rjmp	.+148    	; 0x465a <test_mode+0xda>
		head_down( FALSE )  ;
    45c6:	88 24       	eor	r8, r8
    45c8:	99 24       	eor	r9, r9
    45ca:	c0 e9       	ldi	r28, 0x90	; 144
    45cc:	d1 e0       	ldi	r29, 0x01	; 1
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
	
		x = rand() %12;
    45ce:	0e 94 4a 28 	call	0x5094	; 0x5094 <rand>
    45d2:	8c 01       	movw	r16, r24
		y = rand() %14 ;
    45d4:	0e 94 4a 28 	call	0x5094	; 0x5094 <rand>
    45d8:	6c 01       	movw	r12, r24

		gotoxy( x,y ,-1,-1) ;
    45da:	c8 01       	movw	r24, r16
    45dc:	6c e0       	ldi	r22, 0x0C	; 12
    45de:	70 e0       	ldi	r23, 0x00	; 0
    45e0:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
    45e4:	aa 27       	eor	r26, r26
    45e6:	97 fd       	sbrc	r25, 7
    45e8:	a0 95       	com	r26
    45ea:	ba 2f       	mov	r27, r26
    45ec:	bc 01       	movw	r22, r24
    45ee:	cd 01       	movw	r24, r26
    45f0:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    45f4:	7b 01       	movw	r14, r22
    45f6:	8c 01       	movw	r16, r24
    45f8:	c6 01       	movw	r24, r12
    45fa:	6e e0       	ldi	r22, 0x0E	; 14
    45fc:	70 e0       	ldi	r23, 0x00	; 0
    45fe:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divmodhi4>
    4602:	aa 27       	eor	r26, r26
    4604:	97 fd       	sbrc	r25, 7
    4606:	a0 95       	com	r26
    4608:	ba 2f       	mov	r27, r26
    460a:	bc 01       	movw	r22, r24
    460c:	cd 01       	movw	r24, r26
    460e:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__floatsisf>
    4612:	9b 01       	movw	r18, r22
    4614:	ac 01       	movw	r20, r24
    4616:	c8 01       	movw	r24, r16
    4618:	b7 01       	movw	r22, r14
    461a:	0f 2e       	mov	r0, r31
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	ef 2e       	mov	r14, r31
    4620:	f0 e0       	ldi	r31, 0x00	; 0
    4622:	ff 2e       	mov	r15, r31
    4624:	f0 e8       	ldi	r31, 0x80	; 128
    4626:	0f 2f       	mov	r16, r31
    4628:	ff eb       	ldi	r31, 0xBF	; 191
    462a:	1f 2f       	mov	r17, r31
    462c:	f0 2d       	mov	r31, r0
    462e:	57 01       	movw	r10, r14
    4630:	68 01       	movw	r12, r16
    4632:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>
    4636:	28 e8       	ldi	r18, 0x88	; 136
    4638:	33 e1       	ldi	r19, 0x13	; 19
    463a:	ce 01       	movw	r24, r28
    463c:	01 97       	sbiw	r24, 0x01	; 1
    463e:	f1 f7       	brne	.-4      	; 0x463c <test_mode+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4640:	21 50       	subi	r18, 0x01	; 1
    4642:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4644:	d1 f7       	brne	.-12     	; 0x463a <test_mode+0xba>
	if( is_head_down() ) {
		head_down( FALSE )  ;
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
    4646:	08 94       	sec
    4648:	81 1c       	adc	r8, r1
    464a:	91 1c       	adc	r9, r1
    464c:	88 ec       	ldi	r24, 0xC8	; 200
    464e:	88 16       	cp	r8, r24
    4650:	91 04       	cpc	r9, r1
    4652:	09 f0       	breq	.+2      	; 0x4656 <test_mode+0xd6>
    4654:	bc cf       	rjmp	.-136    	; 0x45ce <test_mode+0x4e>
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	a4 cf       	rjmp	.-184    	; 0x45a2 <test_mode+0x22>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    4662:	b1 cf       	rjmp	.-158    	; 0x45c6 <test_mode+0x46>

00004664 <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    4664:	4f 99       	sbic	0x09, 7	; 9
    4666:	05 c0       	rjmp	.+10     	; 0x4672 <vacuum_test+0xe>
		
		printPgmString(PSTR("yes\r\n"));
    4668:	86 ef       	ldi	r24, 0xF6	; 246
    466a:	95 e0       	ldi	r25, 0x05	; 5
    466c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    4670:	08 95       	ret
	} else {
		printPgmString(PSTR("no\r\n"));
    4672:	81 ef       	ldi	r24, 0xF1	; 241
    4674:	95 e0       	ldi	r25, 0x05	; 5
    4676:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <printPgmString>
    467a:	08 95       	ret

0000467c <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    467c:	e7 e0       	ldi	r30, 0x07	; 7
    467e:	f1 e0       	ldi	r31, 0x01	; 1
    4680:	80 81       	ld	r24, Z
    4682:	80 68       	ori	r24, 0x80	; 128
    4684:	80 83       	st	Z, r24
}
    4686:	08 95       	ret

00004688 <putdown_part>:
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    4688:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    468c:	88 23       	and	r24, r24
    468e:	31 f5       	brne	.+76     	; 0x46dc <putdown_part+0x54>
		return GCSTATUS_FAILED_COMMAND;
	}

	// wait til head stops
	while( head_moving() );
    4690:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
    4694:	88 23       	and	r24, r24
    4696:	e1 f7       	brne	.-8      	; 0x4690 <putdown_part+0x8>
    4698:	28 ee       	ldi	r18, 0xE8	; 232
    469a:	33 e0       	ldi	r19, 0x03	; 3
    469c:	40 e9       	ldi	r20, 0x90	; 144
    469e:	51 e0       	ldi	r21, 0x01	; 1
    46a0:	ca 01       	movw	r24, r20
    46a2:	01 97       	sbiw	r24, 0x01	; 1
    46a4:	f1 f7       	brne	.-4      	; 0x46a2 <putdown_part+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a6:	21 50       	subi	r18, 0x01	; 1
    46a8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46aa:	d1 f7       	brne	.-12     	; 0x46a0 <putdown_part+0x18>
	}

#endif

	// push head down
	head_down( 1 );
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    46b4:	24 ec       	ldi	r18, 0xC4	; 196
    46b6:	39 e0       	ldi	r19, 0x09	; 9
    46b8:	40 e9       	ldi	r20, 0x90	; 144
    46ba:	51 e0       	ldi	r21, 0x01	; 1
    46bc:	ca 01       	movw	r24, r20
    46be:	01 97       	sbiw	r24, 0x01	; 1
    46c0:	f1 f7       	brne	.-4      	; 0x46be <putdown_part+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c2:	21 50       	subi	r18, 0x01	; 1
    46c4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c6:	d1 f7       	brne	.-12     	; 0x46bc <putdown_part+0x34>

	// settle after head down ( probably doesn't need it  )
	_delay_ms( 250 );

	// vacuum off
	vacuum ( 0 );
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>

	// head up
	head_down ( 0 ) ;
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    46d8:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    46da:	08 95       	ret
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    46dc:	85 e0       	ldi	r24, 0x05	; 5
    46de:	08 95       	ret

000046e0 <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    46e0:	80 91 53 05 	lds	r24, 0x0553
    46e4:	88 23       	and	r24, r24
    46e6:	41 f1       	breq	.+80     	; 0x4738 <tape_knock+0x58>
   		return ;
   	}


	while( head_moving() );
    46e8:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
    46ec:	88 23       	and	r24, r24
    46ee:	e1 f7       	brne	.-8      	; 0x46e8 <tape_knock+0x8>

	set_busy( TRUE );
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    46f6:	80 91 08 01 	lds	r24, 0x0108
    46fa:	8f 77       	andi	r24, 0x7F	; 127
    46fc:	80 93 08 01 	sts	0x0108, r24
    4700:	20 ed       	ldi	r18, 0xD0	; 208
    4702:	37 e0       	ldi	r19, 0x07	; 7
    4704:	40 e9       	ldi	r20, 0x90	; 144
    4706:	51 e0       	ldi	r21, 0x01	; 1
    4708:	ca 01       	movw	r24, r20
    470a:	01 97       	sbiw	r24, 0x01	; 1
    470c:	f1 f7       	brne	.-4      	; 0x470a <tape_knock+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    470e:	21 50       	subi	r18, 0x01	; 1
    4710:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4712:	d1 f7       	brne	.-12     	; 0x4708 <tape_knock+0x28>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    4714:	80 91 08 01 	lds	r24, 0x0108
    4718:	80 68       	ori	r24, 0x80	; 128
    471a:	80 93 08 01 	sts	0x0108, r24
    471e:	20 ed       	ldi	r18, 0xD0	; 208
    4720:	37 e0       	ldi	r19, 0x07	; 7
    4722:	40 e9       	ldi	r20, 0x90	; 144
    4724:	51 e0       	ldi	r21, 0x01	; 1
    4726:	ca 01       	movw	r24, r20
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	f1 f7       	brne	.-4      	; 0x4728 <tape_knock+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    472c:	21 50       	subi	r18, 0x01	; 1
    472e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4730:	d1 f7       	brne	.-12     	; 0x4726 <tape_knock+0x46>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <set_busy>
    4738:	08 95       	ret

0000473a <pickup_part>:
char pickup_part ( void ) 
{
	unsigned char failedCounter;

	// wait til head stops
	while( head_moving() );
    473a:	0e 94 4f 19 	call	0x329e	; 0x329e <head_moving>
    473e:	88 23       	and	r24, r24
    4740:	e1 f7       	brne	.-8      	; 0x473a <pickup_part>

	// count number of pickup fails
	failedCounter = 0 ;

	if( is_head_down() ){
    4742:	0e 94 08 20 	call	0x4010	; 0x4010 <is_head_down>
    4746:	88 23       	and	r24, r24
    4748:	11 f0       	breq	.+4      	; 0x474e <pickup_part+0x14>
    474a:	85 e0       	ldi	r24, 0x05	; 5
    474c:	08 95       	ret

	//for(;;)  (oops!)
	{

		// advance part, waits til head has done
		tape_knock();
    474e:	0e 94 70 23 	call	0x46e0	; 0x46e0 <tape_knock>

		// vacuum on
		vacuum ( 1 );
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	0e 94 0e 21 	call	0x421c	; 0x421c <vacuum>

		// push head down
		head_down( 1 );
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    4762:	28 e8       	ldi	r18, 0x88	; 136
    4764:	33 e1       	ldi	r19, 0x13	; 19
    4766:	40 e9       	ldi	r20, 0x90	; 144
    4768:	51 e0       	ldi	r21, 0x01	; 1
    476a:	ca 01       	movw	r24, r20
    476c:	01 97       	sbiw	r24, 0x01	; 1
    476e:	f1 f7       	brne	.-4      	; 0x476c <pickup_part+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4770:	21 50       	subi	r18, 0x01	; 1
    4772:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4774:	d1 f7       	brne	.-12     	; 0x476a <pickup_part+0x30>

		//settle (probably doesn't need this)
		_delay_ms( 500 );

		// head up
		head_down ( 0 ) ;
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	0e 94 11 20 	call	0x4022	; 0x4022 <head_down>
    477e:	80 e0       	ldi	r24, 0x00	; 0

	}

	return GCSTATUS_OK;

}
    4780:	08 95       	ret

00004782 <__subsf3>:
    4782:	50 58       	subi	r21, 0x80	; 128

00004784 <__addsf3>:
    4784:	bb 27       	eor	r27, r27
    4786:	aa 27       	eor	r26, r26
    4788:	0e d0       	rcall	.+28     	; 0x47a6 <__addsf3x>
    478a:	11 c2       	rjmp	.+1058   	; 0x4bae <__fp_round>
    478c:	02 d2       	rcall	.+1028   	; 0x4b92 <__fp_pscA>
    478e:	30 f0       	brcs	.+12     	; 0x479c <__addsf3+0x18>
    4790:	07 d2       	rcall	.+1038   	; 0x4ba0 <__fp_pscB>
    4792:	20 f0       	brcs	.+8      	; 0x479c <__addsf3+0x18>
    4794:	31 f4       	brne	.+12     	; 0x47a2 <__addsf3+0x1e>
    4796:	9f 3f       	cpi	r25, 0xFF	; 255
    4798:	11 f4       	brne	.+4      	; 0x479e <__addsf3+0x1a>
    479a:	1e f4       	brtc	.+6      	; 0x47a2 <__addsf3+0x1e>
    479c:	d2 c1       	rjmp	.+932    	; 0x4b42 <__fp_nan>
    479e:	0e f4       	brtc	.+2      	; 0x47a2 <__addsf3+0x1e>
    47a0:	e0 95       	com	r30
    47a2:	e7 fb       	bst	r30, 7
    47a4:	9f c1       	rjmp	.+830    	; 0x4ae4 <__fp_inf>

000047a6 <__addsf3x>:
    47a6:	e9 2f       	mov	r30, r25
    47a8:	13 d2       	rcall	.+1062   	; 0x4bd0 <__fp_split3>
    47aa:	80 f3       	brcs	.-32     	; 0x478c <__addsf3+0x8>
    47ac:	ba 17       	cp	r27, r26
    47ae:	62 07       	cpc	r22, r18
    47b0:	73 07       	cpc	r23, r19
    47b2:	84 07       	cpc	r24, r20
    47b4:	95 07       	cpc	r25, r21
    47b6:	18 f0       	brcs	.+6      	; 0x47be <__addsf3x+0x18>
    47b8:	71 f4       	brne	.+28     	; 0x47d6 <__addsf3x+0x30>
    47ba:	9e f5       	brtc	.+102    	; 0x4822 <__addsf3x+0x7c>
    47bc:	42 c2       	rjmp	.+1156   	; 0x4c42 <__fp_zero>
    47be:	0e f4       	brtc	.+2      	; 0x47c2 <__addsf3x+0x1c>
    47c0:	e0 95       	com	r30
    47c2:	0b 2e       	mov	r0, r27
    47c4:	ba 2f       	mov	r27, r26
    47c6:	a0 2d       	mov	r26, r0
    47c8:	0b 01       	movw	r0, r22
    47ca:	b9 01       	movw	r22, r18
    47cc:	90 01       	movw	r18, r0
    47ce:	0c 01       	movw	r0, r24
    47d0:	ca 01       	movw	r24, r20
    47d2:	a0 01       	movw	r20, r0
    47d4:	11 24       	eor	r1, r1
    47d6:	ff 27       	eor	r31, r31
    47d8:	59 1b       	sub	r21, r25
    47da:	99 f0       	breq	.+38     	; 0x4802 <__addsf3x+0x5c>
    47dc:	59 3f       	cpi	r21, 0xF9	; 249
    47de:	50 f4       	brcc	.+20     	; 0x47f4 <__addsf3x+0x4e>
    47e0:	50 3e       	cpi	r21, 0xE0	; 224
    47e2:	68 f1       	brcs	.+90     	; 0x483e <__addsf3x+0x98>
    47e4:	1a 16       	cp	r1, r26
    47e6:	f0 40       	sbci	r31, 0x00	; 0
    47e8:	a2 2f       	mov	r26, r18
    47ea:	23 2f       	mov	r18, r19
    47ec:	34 2f       	mov	r19, r20
    47ee:	44 27       	eor	r20, r20
    47f0:	58 5f       	subi	r21, 0xF8	; 248
    47f2:	f3 cf       	rjmp	.-26     	; 0x47da <__addsf3x+0x34>
    47f4:	46 95       	lsr	r20
    47f6:	37 95       	ror	r19
    47f8:	27 95       	ror	r18
    47fa:	a7 95       	ror	r26
    47fc:	f0 40       	sbci	r31, 0x00	; 0
    47fe:	53 95       	inc	r21
    4800:	c9 f7       	brne	.-14     	; 0x47f4 <__addsf3x+0x4e>
    4802:	7e f4       	brtc	.+30     	; 0x4822 <__addsf3x+0x7c>
    4804:	1f 16       	cp	r1, r31
    4806:	ba 0b       	sbc	r27, r26
    4808:	62 0b       	sbc	r22, r18
    480a:	73 0b       	sbc	r23, r19
    480c:	84 0b       	sbc	r24, r20
    480e:	ba f0       	brmi	.+46     	; 0x483e <__addsf3x+0x98>
    4810:	91 50       	subi	r25, 0x01	; 1
    4812:	a1 f0       	breq	.+40     	; 0x483c <__addsf3x+0x96>
    4814:	ff 0f       	add	r31, r31
    4816:	bb 1f       	adc	r27, r27
    4818:	66 1f       	adc	r22, r22
    481a:	77 1f       	adc	r23, r23
    481c:	88 1f       	adc	r24, r24
    481e:	c2 f7       	brpl	.-16     	; 0x4810 <__addsf3x+0x6a>
    4820:	0e c0       	rjmp	.+28     	; 0x483e <__addsf3x+0x98>
    4822:	ba 0f       	add	r27, r26
    4824:	62 1f       	adc	r22, r18
    4826:	73 1f       	adc	r23, r19
    4828:	84 1f       	adc	r24, r20
    482a:	48 f4       	brcc	.+18     	; 0x483e <__addsf3x+0x98>
    482c:	87 95       	ror	r24
    482e:	77 95       	ror	r23
    4830:	67 95       	ror	r22
    4832:	b7 95       	ror	r27
    4834:	f7 95       	ror	r31
    4836:	9e 3f       	cpi	r25, 0xFE	; 254
    4838:	08 f0       	brcs	.+2      	; 0x483c <__addsf3x+0x96>
    483a:	b3 cf       	rjmp	.-154    	; 0x47a2 <__addsf3+0x1e>
    483c:	93 95       	inc	r25
    483e:	88 0f       	add	r24, r24
    4840:	08 f0       	brcs	.+2      	; 0x4844 <__addsf3x+0x9e>
    4842:	99 27       	eor	r25, r25
    4844:	ee 0f       	add	r30, r30
    4846:	97 95       	ror	r25
    4848:	87 95       	ror	r24
    484a:	08 95       	ret

0000484c <atan>:
    484c:	df 93       	push	r29
    484e:	dd 27       	eor	r29, r29
    4850:	b9 2f       	mov	r27, r25
    4852:	bf 77       	andi	r27, 0x7F	; 127
    4854:	40 e8       	ldi	r20, 0x80	; 128
    4856:	5f e3       	ldi	r21, 0x3F	; 63
    4858:	16 16       	cp	r1, r22
    485a:	17 06       	cpc	r1, r23
    485c:	48 07       	cpc	r20, r24
    485e:	5b 07       	cpc	r21, r27
    4860:	10 f4       	brcc	.+4      	; 0x4866 <atan+0x1a>
    4862:	d9 2f       	mov	r29, r25
    4864:	f9 d1       	rcall	.+1010   	; 0x4c58 <inverse>
    4866:	9f 93       	push	r25
    4868:	8f 93       	push	r24
    486a:	7f 93       	push	r23
    486c:	6f 93       	push	r22
    486e:	23 d3       	rcall	.+1606   	; 0x4eb6 <square>
    4870:	ec e1       	ldi	r30, 0x1C	; 28
    4872:	f2 e0       	ldi	r31, 0x02	; 2
    4874:	69 d1       	rcall	.+722    	; 0x4b48 <__fp_powser>
    4876:	9b d1       	rcall	.+822    	; 0x4bae <__fp_round>
    4878:	2f 91       	pop	r18
    487a:	3f 91       	pop	r19
    487c:	4f 91       	pop	r20
    487e:	5f 91       	pop	r21
    4880:	61 d2       	rcall	.+1218   	; 0x4d44 <__mulsf3x>
    4882:	dd 23       	and	r29, r29
    4884:	49 f0       	breq	.+18     	; 0x4898 <atan+0x4c>
    4886:	90 58       	subi	r25, 0x80	; 128
    4888:	a2 ea       	ldi	r26, 0xA2	; 162
    488a:	2a ed       	ldi	r18, 0xDA	; 218
    488c:	3f e0       	ldi	r19, 0x0F	; 15
    488e:	49 ec       	ldi	r20, 0xC9	; 201
    4890:	5f e3       	ldi	r21, 0x3F	; 63
    4892:	d0 78       	andi	r29, 0x80	; 128
    4894:	5d 27       	eor	r21, r29
    4896:	87 df       	rcall	.-242    	; 0x47a6 <__addsf3x>
    4898:	df 91       	pop	r29
    489a:	89 c1       	rjmp	.+786    	; 0x4bae <__fp_round>

0000489c <ceil>:
    489c:	bb d1       	rcall	.+886    	; 0x4c14 <__fp_trunc>
    489e:	80 f0       	brcs	.+32     	; 0x48c0 <ceil+0x24>
    48a0:	9f 37       	cpi	r25, 0x7F	; 127
    48a2:	40 f4       	brcc	.+16     	; 0x48b4 <ceil+0x18>
    48a4:	91 11       	cpse	r25, r1
    48a6:	0e f4       	brtc	.+2      	; 0x48aa <ceil+0xe>
    48a8:	cd c1       	rjmp	.+922    	; 0x4c44 <__fp_szero>
    48aa:	60 e0       	ldi	r22, 0x00	; 0
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	80 e8       	ldi	r24, 0x80	; 128
    48b0:	9f e3       	ldi	r25, 0x3F	; 63
    48b2:	08 95       	ret
    48b4:	26 f0       	brts	.+8      	; 0x48be <ceil+0x22>
    48b6:	1b 16       	cp	r1, r27
    48b8:	61 1d       	adc	r22, r1
    48ba:	71 1d       	adc	r23, r1
    48bc:	81 1d       	adc	r24, r1
    48be:	18 c1       	rjmp	.+560    	; 0x4af0 <__fp_mintl>
    48c0:	32 c1       	rjmp	.+612    	; 0x4b26 <__fp_mpack>

000048c2 <__cmpsf2>:
    48c2:	ec d0       	rcall	.+472    	; 0x4a9c <__fp_cmp>
    48c4:	08 f4       	brcc	.+2      	; 0x48c8 <__cmpsf2+0x6>
    48c6:	81 e0       	ldi	r24, 0x01	; 1
    48c8:	08 95       	ret

000048ca <__divsf3>:
    48ca:	0c d0       	rcall	.+24     	; 0x48e4 <__divsf3x>
    48cc:	70 c1       	rjmp	.+736    	; 0x4bae <__fp_round>
    48ce:	68 d1       	rcall	.+720    	; 0x4ba0 <__fp_pscB>
    48d0:	40 f0       	brcs	.+16     	; 0x48e2 <__divsf3+0x18>
    48d2:	5f d1       	rcall	.+702    	; 0x4b92 <__fp_pscA>
    48d4:	30 f0       	brcs	.+12     	; 0x48e2 <__divsf3+0x18>
    48d6:	21 f4       	brne	.+8      	; 0x48e0 <__divsf3+0x16>
    48d8:	5f 3f       	cpi	r21, 0xFF	; 255
    48da:	19 f0       	breq	.+6      	; 0x48e2 <__divsf3+0x18>
    48dc:	03 c1       	rjmp	.+518    	; 0x4ae4 <__fp_inf>
    48de:	51 11       	cpse	r21, r1
    48e0:	b1 c1       	rjmp	.+866    	; 0x4c44 <__fp_szero>
    48e2:	2f c1       	rjmp	.+606    	; 0x4b42 <__fp_nan>

000048e4 <__divsf3x>:
    48e4:	75 d1       	rcall	.+746    	; 0x4bd0 <__fp_split3>
    48e6:	98 f3       	brcs	.-26     	; 0x48ce <__divsf3+0x4>

000048e8 <__divsf3_pse>:
    48e8:	99 23       	and	r25, r25
    48ea:	c9 f3       	breq	.-14     	; 0x48de <__divsf3+0x14>
    48ec:	55 23       	and	r21, r21
    48ee:	b1 f3       	breq	.-20     	; 0x48dc <__divsf3+0x12>
    48f0:	95 1b       	sub	r25, r21
    48f2:	55 0b       	sbc	r21, r21
    48f4:	bb 27       	eor	r27, r27
    48f6:	aa 27       	eor	r26, r26
    48f8:	62 17       	cp	r22, r18
    48fa:	73 07       	cpc	r23, r19
    48fc:	84 07       	cpc	r24, r20
    48fe:	38 f0       	brcs	.+14     	; 0x490e <__divsf3_pse+0x26>
    4900:	9f 5f       	subi	r25, 0xFF	; 255
    4902:	5f 4f       	sbci	r21, 0xFF	; 255
    4904:	22 0f       	add	r18, r18
    4906:	33 1f       	adc	r19, r19
    4908:	44 1f       	adc	r20, r20
    490a:	aa 1f       	adc	r26, r26
    490c:	a9 f3       	breq	.-22     	; 0x48f8 <__divsf3_pse+0x10>
    490e:	33 d0       	rcall	.+102    	; 0x4976 <__divsf3_pse+0x8e>
    4910:	0e 2e       	mov	r0, r30
    4912:	3a f0       	brmi	.+14     	; 0x4922 <__divsf3_pse+0x3a>
    4914:	e0 e8       	ldi	r30, 0x80	; 128
    4916:	30 d0       	rcall	.+96     	; 0x4978 <__divsf3_pse+0x90>
    4918:	91 50       	subi	r25, 0x01	; 1
    491a:	50 40       	sbci	r21, 0x00	; 0
    491c:	e6 95       	lsr	r30
    491e:	00 1c       	adc	r0, r0
    4920:	ca f7       	brpl	.-14     	; 0x4914 <__divsf3_pse+0x2c>
    4922:	29 d0       	rcall	.+82     	; 0x4976 <__divsf3_pse+0x8e>
    4924:	fe 2f       	mov	r31, r30
    4926:	27 d0       	rcall	.+78     	; 0x4976 <__divsf3_pse+0x8e>
    4928:	66 0f       	add	r22, r22
    492a:	77 1f       	adc	r23, r23
    492c:	88 1f       	adc	r24, r24
    492e:	bb 1f       	adc	r27, r27
    4930:	26 17       	cp	r18, r22
    4932:	37 07       	cpc	r19, r23
    4934:	48 07       	cpc	r20, r24
    4936:	ab 07       	cpc	r26, r27
    4938:	b0 e8       	ldi	r27, 0x80	; 128
    493a:	09 f0       	breq	.+2      	; 0x493e <__divsf3_pse+0x56>
    493c:	bb 0b       	sbc	r27, r27
    493e:	80 2d       	mov	r24, r0
    4940:	bf 01       	movw	r22, r30
    4942:	ff 27       	eor	r31, r31
    4944:	93 58       	subi	r25, 0x83	; 131
    4946:	5f 4f       	sbci	r21, 0xFF	; 255
    4948:	2a f0       	brmi	.+10     	; 0x4954 <__divsf3_pse+0x6c>
    494a:	9e 3f       	cpi	r25, 0xFE	; 254
    494c:	51 05       	cpc	r21, r1
    494e:	68 f0       	brcs	.+26     	; 0x496a <__divsf3_pse+0x82>
    4950:	c9 c0       	rjmp	.+402    	; 0x4ae4 <__fp_inf>
    4952:	78 c1       	rjmp	.+752    	; 0x4c44 <__fp_szero>
    4954:	5f 3f       	cpi	r21, 0xFF	; 255
    4956:	ec f3       	brlt	.-6      	; 0x4952 <__divsf3_pse+0x6a>
    4958:	98 3e       	cpi	r25, 0xE8	; 232
    495a:	dc f3       	brlt	.-10     	; 0x4952 <__divsf3_pse+0x6a>
    495c:	86 95       	lsr	r24
    495e:	77 95       	ror	r23
    4960:	67 95       	ror	r22
    4962:	b7 95       	ror	r27
    4964:	f7 95       	ror	r31
    4966:	9f 5f       	subi	r25, 0xFF	; 255
    4968:	c9 f7       	brne	.-14     	; 0x495c <__divsf3_pse+0x74>
    496a:	88 0f       	add	r24, r24
    496c:	91 1d       	adc	r25, r1
    496e:	96 95       	lsr	r25
    4970:	87 95       	ror	r24
    4972:	97 f9       	bld	r25, 7
    4974:	08 95       	ret
    4976:	e1 e0       	ldi	r30, 0x01	; 1
    4978:	66 0f       	add	r22, r22
    497a:	77 1f       	adc	r23, r23
    497c:	88 1f       	adc	r24, r24
    497e:	bb 1f       	adc	r27, r27
    4980:	62 17       	cp	r22, r18
    4982:	73 07       	cpc	r23, r19
    4984:	84 07       	cpc	r24, r20
    4986:	ba 07       	cpc	r27, r26
    4988:	20 f0       	brcs	.+8      	; 0x4992 <__divsf3_pse+0xaa>
    498a:	62 1b       	sub	r22, r18
    498c:	73 0b       	sbc	r23, r19
    498e:	84 0b       	sbc	r24, r20
    4990:	ba 0b       	sbc	r27, r26
    4992:	ee 1f       	adc	r30, r30
    4994:	88 f7       	brcc	.-30     	; 0x4978 <__divsf3_pse+0x90>
    4996:	e0 95       	com	r30
    4998:	08 95       	ret

0000499a <__fixsfsi>:
    499a:	04 d0       	rcall	.+8      	; 0x49a4 <__fixunssfsi>
    499c:	68 94       	set
    499e:	b1 11       	cpse	r27, r1
    49a0:	51 c1       	rjmp	.+674    	; 0x4c44 <__fp_szero>
    49a2:	08 95       	ret

000049a4 <__fixunssfsi>:
    49a4:	1d d1       	rcall	.+570    	; 0x4be0 <__fp_splitA>
    49a6:	88 f0       	brcs	.+34     	; 0x49ca <__fixunssfsi+0x26>
    49a8:	9f 57       	subi	r25, 0x7F	; 127
    49aa:	90 f0       	brcs	.+36     	; 0x49d0 <__fixunssfsi+0x2c>
    49ac:	b9 2f       	mov	r27, r25
    49ae:	99 27       	eor	r25, r25
    49b0:	b7 51       	subi	r27, 0x17	; 23
    49b2:	a0 f0       	brcs	.+40     	; 0x49dc <__fixunssfsi+0x38>
    49b4:	d1 f0       	breq	.+52     	; 0x49ea <__fixunssfsi+0x46>
    49b6:	66 0f       	add	r22, r22
    49b8:	77 1f       	adc	r23, r23
    49ba:	88 1f       	adc	r24, r24
    49bc:	99 1f       	adc	r25, r25
    49be:	1a f0       	brmi	.+6      	; 0x49c6 <__fixunssfsi+0x22>
    49c0:	ba 95       	dec	r27
    49c2:	c9 f7       	brne	.-14     	; 0x49b6 <__fixunssfsi+0x12>
    49c4:	12 c0       	rjmp	.+36     	; 0x49ea <__fixunssfsi+0x46>
    49c6:	b1 30       	cpi	r27, 0x01	; 1
    49c8:	81 f0       	breq	.+32     	; 0x49ea <__fixunssfsi+0x46>
    49ca:	3b d1       	rcall	.+630    	; 0x4c42 <__fp_zero>
    49cc:	b1 e0       	ldi	r27, 0x01	; 1
    49ce:	08 95       	ret
    49d0:	38 c1       	rjmp	.+624    	; 0x4c42 <__fp_zero>
    49d2:	67 2f       	mov	r22, r23
    49d4:	78 2f       	mov	r23, r24
    49d6:	88 27       	eor	r24, r24
    49d8:	b8 5f       	subi	r27, 0xF8	; 248
    49da:	39 f0       	breq	.+14     	; 0x49ea <__fixunssfsi+0x46>
    49dc:	b9 3f       	cpi	r27, 0xF9	; 249
    49de:	cc f3       	brlt	.-14     	; 0x49d2 <__fixunssfsi+0x2e>
    49e0:	86 95       	lsr	r24
    49e2:	77 95       	ror	r23
    49e4:	67 95       	ror	r22
    49e6:	b3 95       	inc	r27
    49e8:	d9 f7       	brne	.-10     	; 0x49e0 <__fixunssfsi+0x3c>
    49ea:	3e f4       	brtc	.+14     	; 0x49fa <__fixunssfsi+0x56>
    49ec:	90 95       	com	r25
    49ee:	80 95       	com	r24
    49f0:	70 95       	com	r23
    49f2:	61 95       	neg	r22
    49f4:	7f 4f       	sbci	r23, 0xFF	; 255
    49f6:	8f 4f       	sbci	r24, 0xFF	; 255
    49f8:	9f 4f       	sbci	r25, 0xFF	; 255
    49fa:	08 95       	ret

000049fc <__floatunsisf>:
    49fc:	e8 94       	clt
    49fe:	09 c0       	rjmp	.+18     	; 0x4a12 <__floatsisf+0x12>

00004a00 <__floatsisf>:
    4a00:	97 fb       	bst	r25, 7
    4a02:	3e f4       	brtc	.+14     	; 0x4a12 <__floatsisf+0x12>
    4a04:	90 95       	com	r25
    4a06:	80 95       	com	r24
    4a08:	70 95       	com	r23
    4a0a:	61 95       	neg	r22
    4a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a10:	9f 4f       	sbci	r25, 0xFF	; 255
    4a12:	99 23       	and	r25, r25
    4a14:	a9 f0       	breq	.+42     	; 0x4a40 <__floatsisf+0x40>
    4a16:	f9 2f       	mov	r31, r25
    4a18:	96 e9       	ldi	r25, 0x96	; 150
    4a1a:	bb 27       	eor	r27, r27
    4a1c:	93 95       	inc	r25
    4a1e:	f6 95       	lsr	r31
    4a20:	87 95       	ror	r24
    4a22:	77 95       	ror	r23
    4a24:	67 95       	ror	r22
    4a26:	b7 95       	ror	r27
    4a28:	f1 11       	cpse	r31, r1
    4a2a:	f8 cf       	rjmp	.-16     	; 0x4a1c <__floatsisf+0x1c>
    4a2c:	fa f4       	brpl	.+62     	; 0x4a6c <__floatsisf+0x6c>
    4a2e:	bb 0f       	add	r27, r27
    4a30:	11 f4       	brne	.+4      	; 0x4a36 <__floatsisf+0x36>
    4a32:	60 ff       	sbrs	r22, 0
    4a34:	1b c0       	rjmp	.+54     	; 0x4a6c <__floatsisf+0x6c>
    4a36:	6f 5f       	subi	r22, 0xFF	; 255
    4a38:	7f 4f       	sbci	r23, 0xFF	; 255
    4a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3e:	16 c0       	rjmp	.+44     	; 0x4a6c <__floatsisf+0x6c>
    4a40:	88 23       	and	r24, r24
    4a42:	11 f0       	breq	.+4      	; 0x4a48 <__floatsisf+0x48>
    4a44:	96 e9       	ldi	r25, 0x96	; 150
    4a46:	11 c0       	rjmp	.+34     	; 0x4a6a <__floatsisf+0x6a>
    4a48:	77 23       	and	r23, r23
    4a4a:	21 f0       	breq	.+8      	; 0x4a54 <__floatsisf+0x54>
    4a4c:	9e e8       	ldi	r25, 0x8E	; 142
    4a4e:	87 2f       	mov	r24, r23
    4a50:	76 2f       	mov	r23, r22
    4a52:	05 c0       	rjmp	.+10     	; 0x4a5e <__floatsisf+0x5e>
    4a54:	66 23       	and	r22, r22
    4a56:	71 f0       	breq	.+28     	; 0x4a74 <__floatsisf+0x74>
    4a58:	96 e8       	ldi	r25, 0x86	; 134
    4a5a:	86 2f       	mov	r24, r22
    4a5c:	70 e0       	ldi	r23, 0x00	; 0
    4a5e:	60 e0       	ldi	r22, 0x00	; 0
    4a60:	2a f0       	brmi	.+10     	; 0x4a6c <__floatsisf+0x6c>
    4a62:	9a 95       	dec	r25
    4a64:	66 0f       	add	r22, r22
    4a66:	77 1f       	adc	r23, r23
    4a68:	88 1f       	adc	r24, r24
    4a6a:	da f7       	brpl	.-10     	; 0x4a62 <__floatsisf+0x62>
    4a6c:	88 0f       	add	r24, r24
    4a6e:	96 95       	lsr	r25
    4a70:	87 95       	ror	r24
    4a72:	97 f9       	bld	r25, 7
    4a74:	08 95       	ret

00004a76 <floor>:
    4a76:	ce d0       	rcall	.+412    	; 0x4c14 <__fp_trunc>
    4a78:	80 f0       	brcs	.+32     	; 0x4a9a <floor+0x24>
    4a7a:	9f 37       	cpi	r25, 0x7F	; 127
    4a7c:	40 f4       	brcc	.+16     	; 0x4a8e <floor+0x18>
    4a7e:	91 11       	cpse	r25, r1
    4a80:	0e f0       	brts	.+2      	; 0x4a84 <floor+0xe>
    4a82:	e0 c0       	rjmp	.+448    	; 0x4c44 <__fp_szero>
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	70 e0       	ldi	r23, 0x00	; 0
    4a88:	80 e8       	ldi	r24, 0x80	; 128
    4a8a:	9f eb       	ldi	r25, 0xBF	; 191
    4a8c:	08 95       	ret
    4a8e:	26 f4       	brtc	.+8      	; 0x4a98 <floor+0x22>
    4a90:	1b 16       	cp	r1, r27
    4a92:	61 1d       	adc	r22, r1
    4a94:	71 1d       	adc	r23, r1
    4a96:	81 1d       	adc	r24, r1
    4a98:	2b c0       	rjmp	.+86     	; 0x4af0 <__fp_mintl>
    4a9a:	45 c0       	rjmp	.+138    	; 0x4b26 <__fp_mpack>

00004a9c <__fp_cmp>:
    4a9c:	99 0f       	add	r25, r25
    4a9e:	00 08       	sbc	r0, r0
    4aa0:	55 0f       	add	r21, r21
    4aa2:	aa 0b       	sbc	r26, r26
    4aa4:	e0 e8       	ldi	r30, 0x80	; 128
    4aa6:	fe ef       	ldi	r31, 0xFE	; 254
    4aa8:	16 16       	cp	r1, r22
    4aaa:	17 06       	cpc	r1, r23
    4aac:	e8 07       	cpc	r30, r24
    4aae:	f9 07       	cpc	r31, r25
    4ab0:	c0 f0       	brcs	.+48     	; 0x4ae2 <__fp_cmp+0x46>
    4ab2:	12 16       	cp	r1, r18
    4ab4:	13 06       	cpc	r1, r19
    4ab6:	e4 07       	cpc	r30, r20
    4ab8:	f5 07       	cpc	r31, r21
    4aba:	98 f0       	brcs	.+38     	; 0x4ae2 <__fp_cmp+0x46>
    4abc:	62 1b       	sub	r22, r18
    4abe:	73 0b       	sbc	r23, r19
    4ac0:	84 0b       	sbc	r24, r20
    4ac2:	95 0b       	sbc	r25, r21
    4ac4:	39 f4       	brne	.+14     	; 0x4ad4 <__fp_cmp+0x38>
    4ac6:	0a 26       	eor	r0, r26
    4ac8:	61 f0       	breq	.+24     	; 0x4ae2 <__fp_cmp+0x46>
    4aca:	23 2b       	or	r18, r19
    4acc:	24 2b       	or	r18, r20
    4ace:	25 2b       	or	r18, r21
    4ad0:	21 f4       	brne	.+8      	; 0x4ada <__fp_cmp+0x3e>
    4ad2:	08 95       	ret
    4ad4:	0a 26       	eor	r0, r26
    4ad6:	09 f4       	brne	.+2      	; 0x4ada <__fp_cmp+0x3e>
    4ad8:	a1 40       	sbci	r26, 0x01	; 1
    4ada:	a6 95       	lsr	r26
    4adc:	8f ef       	ldi	r24, 0xFF	; 255
    4ade:	81 1d       	adc	r24, r1
    4ae0:	81 1d       	adc	r24, r1
    4ae2:	08 95       	ret

00004ae4 <__fp_inf>:
    4ae4:	97 f9       	bld	r25, 7
    4ae6:	9f 67       	ori	r25, 0x7F	; 127
    4ae8:	80 e8       	ldi	r24, 0x80	; 128
    4aea:	70 e0       	ldi	r23, 0x00	; 0
    4aec:	60 e0       	ldi	r22, 0x00	; 0
    4aee:	08 95       	ret

00004af0 <__fp_mintl>:
    4af0:	88 23       	and	r24, r24
    4af2:	71 f4       	brne	.+28     	; 0x4b10 <__fp_mintl+0x20>
    4af4:	77 23       	and	r23, r23
    4af6:	21 f0       	breq	.+8      	; 0x4b00 <__fp_mintl+0x10>
    4af8:	98 50       	subi	r25, 0x08	; 8
    4afa:	87 2b       	or	r24, r23
    4afc:	76 2f       	mov	r23, r22
    4afe:	07 c0       	rjmp	.+14     	; 0x4b0e <__fp_mintl+0x1e>
    4b00:	66 23       	and	r22, r22
    4b02:	11 f4       	brne	.+4      	; 0x4b08 <__fp_mintl+0x18>
    4b04:	99 27       	eor	r25, r25
    4b06:	0d c0       	rjmp	.+26     	; 0x4b22 <__fp_mintl+0x32>
    4b08:	90 51       	subi	r25, 0x10	; 16
    4b0a:	86 2b       	or	r24, r22
    4b0c:	70 e0       	ldi	r23, 0x00	; 0
    4b0e:	60 e0       	ldi	r22, 0x00	; 0
    4b10:	2a f0       	brmi	.+10     	; 0x4b1c <__fp_mintl+0x2c>
    4b12:	9a 95       	dec	r25
    4b14:	66 0f       	add	r22, r22
    4b16:	77 1f       	adc	r23, r23
    4b18:	88 1f       	adc	r24, r24
    4b1a:	da f7       	brpl	.-10     	; 0x4b12 <__fp_mintl+0x22>
    4b1c:	88 0f       	add	r24, r24
    4b1e:	96 95       	lsr	r25
    4b20:	87 95       	ror	r24
    4b22:	97 f9       	bld	r25, 7
    4b24:	08 95       	ret

00004b26 <__fp_mpack>:
    4b26:	9f 3f       	cpi	r25, 0xFF	; 255
    4b28:	31 f0       	breq	.+12     	; 0x4b36 <__fp_mpack_finite+0xc>

00004b2a <__fp_mpack_finite>:
    4b2a:	91 50       	subi	r25, 0x01	; 1
    4b2c:	20 f4       	brcc	.+8      	; 0x4b36 <__fp_mpack_finite+0xc>
    4b2e:	87 95       	ror	r24
    4b30:	77 95       	ror	r23
    4b32:	67 95       	ror	r22
    4b34:	b7 95       	ror	r27
    4b36:	88 0f       	add	r24, r24
    4b38:	91 1d       	adc	r25, r1
    4b3a:	96 95       	lsr	r25
    4b3c:	87 95       	ror	r24
    4b3e:	97 f9       	bld	r25, 7
    4b40:	08 95       	ret

00004b42 <__fp_nan>:
    4b42:	9f ef       	ldi	r25, 0xFF	; 255
    4b44:	80 ec       	ldi	r24, 0xC0	; 192
    4b46:	08 95       	ret

00004b48 <__fp_powser>:
    4b48:	df 93       	push	r29
    4b4a:	cf 93       	push	r28
    4b4c:	1f 93       	push	r17
    4b4e:	0f 93       	push	r16
    4b50:	ff 92       	push	r15
    4b52:	ef 92       	push	r14
    4b54:	df 92       	push	r13
    4b56:	7b 01       	movw	r14, r22
    4b58:	8c 01       	movw	r16, r24
    4b5a:	68 94       	set
    4b5c:	05 c0       	rjmp	.+10     	; 0x4b68 <__fp_powser+0x20>
    4b5e:	da 2e       	mov	r13, r26
    4b60:	ef 01       	movw	r28, r30
    4b62:	f0 d0       	rcall	.+480    	; 0x4d44 <__mulsf3x>
    4b64:	fe 01       	movw	r30, r28
    4b66:	e8 94       	clt
    4b68:	a5 91       	lpm	r26, Z+
    4b6a:	25 91       	lpm	r18, Z+
    4b6c:	35 91       	lpm	r19, Z+
    4b6e:	45 91       	lpm	r20, Z+
    4b70:	55 91       	lpm	r21, Z+
    4b72:	ae f3       	brts	.-22     	; 0x4b5e <__fp_powser+0x16>
    4b74:	ef 01       	movw	r28, r30
    4b76:	17 de       	rcall	.-978    	; 0x47a6 <__addsf3x>
    4b78:	fe 01       	movw	r30, r28
    4b7a:	97 01       	movw	r18, r14
    4b7c:	a8 01       	movw	r20, r16
    4b7e:	da 94       	dec	r13
    4b80:	79 f7       	brne	.-34     	; 0x4b60 <__fp_powser+0x18>
    4b82:	df 90       	pop	r13
    4b84:	ef 90       	pop	r14
    4b86:	ff 90       	pop	r15
    4b88:	0f 91       	pop	r16
    4b8a:	1f 91       	pop	r17
    4b8c:	cf 91       	pop	r28
    4b8e:	df 91       	pop	r29
    4b90:	08 95       	ret

00004b92 <__fp_pscA>:
    4b92:	00 24       	eor	r0, r0
    4b94:	0a 94       	dec	r0
    4b96:	16 16       	cp	r1, r22
    4b98:	17 06       	cpc	r1, r23
    4b9a:	18 06       	cpc	r1, r24
    4b9c:	09 06       	cpc	r0, r25
    4b9e:	08 95       	ret

00004ba0 <__fp_pscB>:
    4ba0:	00 24       	eor	r0, r0
    4ba2:	0a 94       	dec	r0
    4ba4:	12 16       	cp	r1, r18
    4ba6:	13 06       	cpc	r1, r19
    4ba8:	14 06       	cpc	r1, r20
    4baa:	05 06       	cpc	r0, r21
    4bac:	08 95       	ret

00004bae <__fp_round>:
    4bae:	09 2e       	mov	r0, r25
    4bb0:	03 94       	inc	r0
    4bb2:	00 0c       	add	r0, r0
    4bb4:	11 f4       	brne	.+4      	; 0x4bba <__fp_round+0xc>
    4bb6:	88 23       	and	r24, r24
    4bb8:	52 f0       	brmi	.+20     	; 0x4bce <__fp_round+0x20>
    4bba:	bb 0f       	add	r27, r27
    4bbc:	40 f4       	brcc	.+16     	; 0x4bce <__fp_round+0x20>
    4bbe:	bf 2b       	or	r27, r31
    4bc0:	11 f4       	brne	.+4      	; 0x4bc6 <__fp_round+0x18>
    4bc2:	60 ff       	sbrs	r22, 0
    4bc4:	04 c0       	rjmp	.+8      	; 0x4bce <__fp_round+0x20>
    4bc6:	6f 5f       	subi	r22, 0xFF	; 255
    4bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4bca:	8f 4f       	sbci	r24, 0xFF	; 255
    4bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    4bce:	08 95       	ret

00004bd0 <__fp_split3>:
    4bd0:	57 fd       	sbrc	r21, 7
    4bd2:	90 58       	subi	r25, 0x80	; 128
    4bd4:	44 0f       	add	r20, r20
    4bd6:	55 1f       	adc	r21, r21
    4bd8:	59 f0       	breq	.+22     	; 0x4bf0 <__fp_splitA+0x10>
    4bda:	5f 3f       	cpi	r21, 0xFF	; 255
    4bdc:	71 f0       	breq	.+28     	; 0x4bfa <__fp_splitA+0x1a>
    4bde:	47 95       	ror	r20

00004be0 <__fp_splitA>:
    4be0:	88 0f       	add	r24, r24
    4be2:	97 fb       	bst	r25, 7
    4be4:	99 1f       	adc	r25, r25
    4be6:	61 f0       	breq	.+24     	; 0x4c00 <__fp_splitA+0x20>
    4be8:	9f 3f       	cpi	r25, 0xFF	; 255
    4bea:	79 f0       	breq	.+30     	; 0x4c0a <__fp_splitA+0x2a>
    4bec:	87 95       	ror	r24
    4bee:	08 95       	ret
    4bf0:	12 16       	cp	r1, r18
    4bf2:	13 06       	cpc	r1, r19
    4bf4:	14 06       	cpc	r1, r20
    4bf6:	55 1f       	adc	r21, r21
    4bf8:	f2 cf       	rjmp	.-28     	; 0x4bde <__fp_split3+0xe>
    4bfa:	46 95       	lsr	r20
    4bfc:	f1 df       	rcall	.-30     	; 0x4be0 <__fp_splitA>
    4bfe:	08 c0       	rjmp	.+16     	; 0x4c10 <__fp_splitA+0x30>
    4c00:	16 16       	cp	r1, r22
    4c02:	17 06       	cpc	r1, r23
    4c04:	18 06       	cpc	r1, r24
    4c06:	99 1f       	adc	r25, r25
    4c08:	f1 cf       	rjmp	.-30     	; 0x4bec <__fp_splitA+0xc>
    4c0a:	86 95       	lsr	r24
    4c0c:	71 05       	cpc	r23, r1
    4c0e:	61 05       	cpc	r22, r1
    4c10:	08 94       	sec
    4c12:	08 95       	ret

00004c14 <__fp_trunc>:
    4c14:	e5 df       	rcall	.-54     	; 0x4be0 <__fp_splitA>
    4c16:	a0 f0       	brcs	.+40     	; 0x4c40 <__fp_trunc+0x2c>
    4c18:	be e7       	ldi	r27, 0x7E	; 126
    4c1a:	b9 17       	cp	r27, r25
    4c1c:	88 f4       	brcc	.+34     	; 0x4c40 <__fp_trunc+0x2c>
    4c1e:	bb 27       	eor	r27, r27
    4c20:	9f 38       	cpi	r25, 0x8F	; 143
    4c22:	60 f4       	brcc	.+24     	; 0x4c3c <__fp_trunc+0x28>
    4c24:	16 16       	cp	r1, r22
    4c26:	b1 1d       	adc	r27, r1
    4c28:	67 2f       	mov	r22, r23
    4c2a:	78 2f       	mov	r23, r24
    4c2c:	88 27       	eor	r24, r24
    4c2e:	98 5f       	subi	r25, 0xF8	; 248
    4c30:	f7 cf       	rjmp	.-18     	; 0x4c20 <__fp_trunc+0xc>
    4c32:	86 95       	lsr	r24
    4c34:	77 95       	ror	r23
    4c36:	67 95       	ror	r22
    4c38:	b1 1d       	adc	r27, r1
    4c3a:	93 95       	inc	r25
    4c3c:	96 39       	cpi	r25, 0x96	; 150
    4c3e:	c8 f3       	brcs	.-14     	; 0x4c32 <__fp_trunc+0x1e>
    4c40:	08 95       	ret

00004c42 <__fp_zero>:
    4c42:	e8 94       	clt

00004c44 <__fp_szero>:
    4c44:	bb 27       	eor	r27, r27
    4c46:	66 27       	eor	r22, r22
    4c48:	77 27       	eor	r23, r23
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	97 f9       	bld	r25, 7
    4c4e:	08 95       	ret

00004c50 <__gesf2>:
    4c50:	25 df       	rcall	.-438    	; 0x4a9c <__fp_cmp>
    4c52:	08 f4       	brcc	.+2      	; 0x4c56 <__gesf2+0x6>
    4c54:	8f ef       	ldi	r24, 0xFF	; 255
    4c56:	08 95       	ret

00004c58 <inverse>:
    4c58:	9b 01       	movw	r18, r22
    4c5a:	ac 01       	movw	r20, r24
    4c5c:	60 e0       	ldi	r22, 0x00	; 0
    4c5e:	70 e0       	ldi	r23, 0x00	; 0
    4c60:	80 e8       	ldi	r24, 0x80	; 128
    4c62:	9f e3       	ldi	r25, 0x3F	; 63
    4c64:	32 ce       	rjmp	.-924    	; 0x48ca <__divsf3>

00004c66 <lround>:
    4c66:	bc df       	rcall	.-136    	; 0x4be0 <__fp_splitA>
    4c68:	58 f1       	brcs	.+86     	; 0x4cc0 <lround+0x5a>
    4c6a:	9e 57       	subi	r25, 0x7E	; 126
    4c6c:	58 f1       	brcs	.+86     	; 0x4cc4 <lround+0x5e>
    4c6e:	98 51       	subi	r25, 0x18	; 24
    4c70:	a0 f0       	brcs	.+40     	; 0x4c9a <lround+0x34>
    4c72:	e9 f0       	breq	.+58     	; 0x4cae <lround+0x48>
    4c74:	98 30       	cpi	r25, 0x08	; 8
    4c76:	20 f5       	brcc	.+72     	; 0x4cc0 <lround+0x5a>
    4c78:	09 2e       	mov	r0, r25
    4c7a:	99 27       	eor	r25, r25
    4c7c:	66 0f       	add	r22, r22
    4c7e:	77 1f       	adc	r23, r23
    4c80:	88 1f       	adc	r24, r24
    4c82:	99 1f       	adc	r25, r25
    4c84:	0a 94       	dec	r0
    4c86:	d1 f7       	brne	.-12     	; 0x4c7c <lround+0x16>
    4c88:	12 c0       	rjmp	.+36     	; 0x4cae <lround+0x48>
    4c8a:	06 2e       	mov	r0, r22
    4c8c:	67 2f       	mov	r22, r23
    4c8e:	78 2f       	mov	r23, r24
    4c90:	88 27       	eor	r24, r24
    4c92:	98 5f       	subi	r25, 0xF8	; 248
    4c94:	11 f4       	brne	.+4      	; 0x4c9a <lround+0x34>
    4c96:	00 0c       	add	r0, r0
    4c98:	07 c0       	rjmp	.+14     	; 0x4ca8 <lround+0x42>
    4c9a:	99 3f       	cpi	r25, 0xF9	; 249
    4c9c:	b4 f3       	brlt	.-20     	; 0x4c8a <lround+0x24>
    4c9e:	86 95       	lsr	r24
    4ca0:	77 95       	ror	r23
    4ca2:	67 95       	ror	r22
    4ca4:	93 95       	inc	r25
    4ca6:	d9 f7       	brne	.-10     	; 0x4c9e <lround+0x38>
    4ca8:	61 1d       	adc	r22, r1
    4caa:	71 1d       	adc	r23, r1
    4cac:	81 1d       	adc	r24, r1
    4cae:	3e f4       	brtc	.+14     	; 0x4cbe <lround+0x58>
    4cb0:	90 95       	com	r25
    4cb2:	80 95       	com	r24
    4cb4:	70 95       	com	r23
    4cb6:	61 95       	neg	r22
    4cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cba:	8f 4f       	sbci	r24, 0xFF	; 255
    4cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4cbe:	08 95       	ret
    4cc0:	68 94       	set
    4cc2:	c0 cf       	rjmp	.-128    	; 0x4c44 <__fp_szero>
    4cc4:	be cf       	rjmp	.-132    	; 0x4c42 <__fp_zero>

00004cc6 <modf>:
    4cc6:	fa 01       	movw	r30, r20
    4cc8:	dc 01       	movw	r26, r24
    4cca:	aa 0f       	add	r26, r26
    4ccc:	bb 1f       	adc	r27, r27
    4cce:	9b 01       	movw	r18, r22
    4cd0:	ac 01       	movw	r20, r24
    4cd2:	bf 57       	subi	r27, 0x7F	; 127
    4cd4:	28 f4       	brcc	.+10     	; 0x4ce0 <modf+0x1a>
    4cd6:	22 27       	eor	r18, r18
    4cd8:	33 27       	eor	r19, r19
    4cda:	44 27       	eor	r20, r20
    4cdc:	50 78       	andi	r21, 0x80	; 128
    4cde:	1f c0       	rjmp	.+62     	; 0x4d1e <modf+0x58>
    4ce0:	b7 51       	subi	r27, 0x17	; 23
    4ce2:	88 f4       	brcc	.+34     	; 0x4d06 <modf+0x40>
    4ce4:	ab 2f       	mov	r26, r27
    4ce6:	00 24       	eor	r0, r0
    4ce8:	46 95       	lsr	r20
    4cea:	37 95       	ror	r19
    4cec:	27 95       	ror	r18
    4cee:	01 1c       	adc	r0, r1
    4cf0:	a3 95       	inc	r26
    4cf2:	d2 f3       	brmi	.-12     	; 0x4ce8 <modf+0x22>
    4cf4:	00 20       	and	r0, r0
    4cf6:	69 f0       	breq	.+26     	; 0x4d12 <modf+0x4c>
    4cf8:	22 0f       	add	r18, r18
    4cfa:	33 1f       	adc	r19, r19
    4cfc:	44 1f       	adc	r20, r20
    4cfe:	b3 95       	inc	r27
    4d00:	da f3       	brmi	.-10     	; 0x4cf8 <modf+0x32>
    4d02:	0d d0       	rcall	.+26     	; 0x4d1e <modf+0x58>
    4d04:	3e cd       	rjmp	.-1412   	; 0x4782 <__subsf3>
    4d06:	61 30       	cpi	r22, 0x01	; 1
    4d08:	71 05       	cpc	r23, r1
    4d0a:	a0 e8       	ldi	r26, 0x80	; 128
    4d0c:	8a 07       	cpc	r24, r26
    4d0e:	b9 46       	sbci	r27, 0x69	; 105
    4d10:	30 f4       	brcc	.+12     	; 0x4d1e <modf+0x58>
    4d12:	9b 01       	movw	r18, r22
    4d14:	ac 01       	movw	r20, r24
    4d16:	66 27       	eor	r22, r22
    4d18:	77 27       	eor	r23, r23
    4d1a:	88 27       	eor	r24, r24
    4d1c:	90 78       	andi	r25, 0x80	; 128
    4d1e:	30 96       	adiw	r30, 0x00	; 0
    4d20:	21 f0       	breq	.+8      	; 0x4d2a <modf+0x64>
    4d22:	20 83       	st	Z, r18
    4d24:	31 83       	std	Z+1, r19	; 0x01
    4d26:	42 83       	std	Z+2, r20	; 0x02
    4d28:	53 83       	std	Z+3, r21	; 0x03
    4d2a:	08 95       	ret

00004d2c <__mulsf3>:
    4d2c:	0b d0       	rcall	.+22     	; 0x4d44 <__mulsf3x>
    4d2e:	3f cf       	rjmp	.-386    	; 0x4bae <__fp_round>
    4d30:	30 df       	rcall	.-416    	; 0x4b92 <__fp_pscA>
    4d32:	28 f0       	brcs	.+10     	; 0x4d3e <__mulsf3+0x12>
    4d34:	35 df       	rcall	.-406    	; 0x4ba0 <__fp_pscB>
    4d36:	18 f0       	brcs	.+6      	; 0x4d3e <__mulsf3+0x12>
    4d38:	95 23       	and	r25, r21
    4d3a:	09 f0       	breq	.+2      	; 0x4d3e <__mulsf3+0x12>
    4d3c:	d3 ce       	rjmp	.-602    	; 0x4ae4 <__fp_inf>
    4d3e:	01 cf       	rjmp	.-510    	; 0x4b42 <__fp_nan>
    4d40:	11 24       	eor	r1, r1
    4d42:	80 cf       	rjmp	.-256    	; 0x4c44 <__fp_szero>

00004d44 <__mulsf3x>:
    4d44:	45 df       	rcall	.-374    	; 0x4bd0 <__fp_split3>
    4d46:	a0 f3       	brcs	.-24     	; 0x4d30 <__mulsf3+0x4>

00004d48 <__mulsf3_pse>:
    4d48:	95 9f       	mul	r25, r21
    4d4a:	d1 f3       	breq	.-12     	; 0x4d40 <__mulsf3+0x14>
    4d4c:	95 0f       	add	r25, r21
    4d4e:	50 e0       	ldi	r21, 0x00	; 0
    4d50:	55 1f       	adc	r21, r21
    4d52:	62 9f       	mul	r22, r18
    4d54:	f0 01       	movw	r30, r0
    4d56:	72 9f       	mul	r23, r18
    4d58:	bb 27       	eor	r27, r27
    4d5a:	f0 0d       	add	r31, r0
    4d5c:	b1 1d       	adc	r27, r1
    4d5e:	63 9f       	mul	r22, r19
    4d60:	aa 27       	eor	r26, r26
    4d62:	f0 0d       	add	r31, r0
    4d64:	b1 1d       	adc	r27, r1
    4d66:	aa 1f       	adc	r26, r26
    4d68:	64 9f       	mul	r22, r20
    4d6a:	66 27       	eor	r22, r22
    4d6c:	b0 0d       	add	r27, r0
    4d6e:	a1 1d       	adc	r26, r1
    4d70:	66 1f       	adc	r22, r22
    4d72:	82 9f       	mul	r24, r18
    4d74:	22 27       	eor	r18, r18
    4d76:	b0 0d       	add	r27, r0
    4d78:	a1 1d       	adc	r26, r1
    4d7a:	62 1f       	adc	r22, r18
    4d7c:	73 9f       	mul	r23, r19
    4d7e:	b0 0d       	add	r27, r0
    4d80:	a1 1d       	adc	r26, r1
    4d82:	62 1f       	adc	r22, r18
    4d84:	83 9f       	mul	r24, r19
    4d86:	a0 0d       	add	r26, r0
    4d88:	61 1d       	adc	r22, r1
    4d8a:	22 1f       	adc	r18, r18
    4d8c:	74 9f       	mul	r23, r20
    4d8e:	33 27       	eor	r19, r19
    4d90:	a0 0d       	add	r26, r0
    4d92:	61 1d       	adc	r22, r1
    4d94:	23 1f       	adc	r18, r19
    4d96:	84 9f       	mul	r24, r20
    4d98:	60 0d       	add	r22, r0
    4d9a:	21 1d       	adc	r18, r1
    4d9c:	82 2f       	mov	r24, r18
    4d9e:	76 2f       	mov	r23, r22
    4da0:	6a 2f       	mov	r22, r26
    4da2:	11 24       	eor	r1, r1
    4da4:	9f 57       	subi	r25, 0x7F	; 127
    4da6:	50 40       	sbci	r21, 0x00	; 0
    4da8:	8a f0       	brmi	.+34     	; 0x4dcc <__mulsf3_pse+0x84>
    4daa:	e1 f0       	breq	.+56     	; 0x4de4 <__mulsf3_pse+0x9c>
    4dac:	88 23       	and	r24, r24
    4dae:	4a f0       	brmi	.+18     	; 0x4dc2 <__mulsf3_pse+0x7a>
    4db0:	ee 0f       	add	r30, r30
    4db2:	ff 1f       	adc	r31, r31
    4db4:	bb 1f       	adc	r27, r27
    4db6:	66 1f       	adc	r22, r22
    4db8:	77 1f       	adc	r23, r23
    4dba:	88 1f       	adc	r24, r24
    4dbc:	91 50       	subi	r25, 0x01	; 1
    4dbe:	50 40       	sbci	r21, 0x00	; 0
    4dc0:	a9 f7       	brne	.-22     	; 0x4dac <__mulsf3_pse+0x64>
    4dc2:	9e 3f       	cpi	r25, 0xFE	; 254
    4dc4:	51 05       	cpc	r21, r1
    4dc6:	70 f0       	brcs	.+28     	; 0x4de4 <__mulsf3_pse+0x9c>
    4dc8:	8d ce       	rjmp	.-742    	; 0x4ae4 <__fp_inf>
    4dca:	3c cf       	rjmp	.-392    	; 0x4c44 <__fp_szero>
    4dcc:	5f 3f       	cpi	r21, 0xFF	; 255
    4dce:	ec f3       	brlt	.-6      	; 0x4dca <__mulsf3_pse+0x82>
    4dd0:	98 3e       	cpi	r25, 0xE8	; 232
    4dd2:	dc f3       	brlt	.-10     	; 0x4dca <__mulsf3_pse+0x82>
    4dd4:	86 95       	lsr	r24
    4dd6:	77 95       	ror	r23
    4dd8:	67 95       	ror	r22
    4dda:	b7 95       	ror	r27
    4ddc:	f7 95       	ror	r31
    4dde:	e7 95       	ror	r30
    4de0:	9f 5f       	subi	r25, 0xFF	; 255
    4de2:	c1 f7       	brne	.-16     	; 0x4dd4 <__mulsf3_pse+0x8c>
    4de4:	fe 2b       	or	r31, r30
    4de6:	88 0f       	add	r24, r24
    4de8:	91 1d       	adc	r25, r1
    4dea:	96 95       	lsr	r25
    4dec:	87 95       	ror	r24
    4dee:	97 f9       	bld	r25, 7
    4df0:	08 95       	ret

00004df2 <round>:
    4df2:	f6 de       	rcall	.-532    	; 0x4be0 <__fp_splitA>
    4df4:	e0 f0       	brcs	.+56     	; 0x4e2e <round+0x3c>
    4df6:	9e 37       	cpi	r25, 0x7E	; 126
    4df8:	d8 f0       	brcs	.+54     	; 0x4e30 <round+0x3e>
    4dfa:	96 39       	cpi	r25, 0x96	; 150
    4dfc:	b8 f4       	brcc	.+46     	; 0x4e2c <round+0x3a>
    4dfe:	9e 38       	cpi	r25, 0x8E	; 142
    4e00:	48 f4       	brcc	.+18     	; 0x4e14 <round+0x22>
    4e02:	67 2f       	mov	r22, r23
    4e04:	78 2f       	mov	r23, r24
    4e06:	88 27       	eor	r24, r24
    4e08:	98 5f       	subi	r25, 0xF8	; 248
    4e0a:	f9 cf       	rjmp	.-14     	; 0x4dfe <round+0xc>
    4e0c:	86 95       	lsr	r24
    4e0e:	77 95       	ror	r23
    4e10:	67 95       	ror	r22
    4e12:	93 95       	inc	r25
    4e14:	95 39       	cpi	r25, 0x95	; 149
    4e16:	d0 f3       	brcs	.-12     	; 0x4e0c <round+0x1a>
    4e18:	b6 2f       	mov	r27, r22
    4e1a:	b1 70       	andi	r27, 0x01	; 1
    4e1c:	6b 0f       	add	r22, r27
    4e1e:	71 1d       	adc	r23, r1
    4e20:	81 1d       	adc	r24, r1
    4e22:	20 f4       	brcc	.+8      	; 0x4e2c <round+0x3a>
    4e24:	87 95       	ror	r24
    4e26:	77 95       	ror	r23
    4e28:	67 95       	ror	r22
    4e2a:	93 95       	inc	r25
    4e2c:	61 ce       	rjmp	.-830    	; 0x4af0 <__fp_mintl>
    4e2e:	7b ce       	rjmp	.-778    	; 0x4b26 <__fp_mpack>
    4e30:	09 cf       	rjmp	.-494    	; 0x4c44 <__fp_szero>
    4e32:	11 f4       	brne	.+4      	; 0x4e38 <round+0x46>
    4e34:	0e f4       	brtc	.+2      	; 0x4e38 <round+0x46>
    4e36:	85 ce       	rjmp	.-758    	; 0x4b42 <__fp_nan>
    4e38:	76 ce       	rjmp	.-788    	; 0x4b26 <__fp_mpack>

00004e3a <sqrt>:
    4e3a:	d2 de       	rcall	.-604    	; 0x4be0 <__fp_splitA>
    4e3c:	d0 f3       	brcs	.-12     	; 0x4e32 <round+0x40>
    4e3e:	99 23       	and	r25, r25
    4e40:	d9 f3       	breq	.-10     	; 0x4e38 <round+0x46>
    4e42:	ce f3       	brts	.-14     	; 0x4e36 <round+0x44>
    4e44:	9f 57       	subi	r25, 0x7F	; 127
    4e46:	55 0b       	sbc	r21, r21
    4e48:	87 ff       	sbrs	r24, 7
    4e4a:	3f d0       	rcall	.+126    	; 0x4eca <__fp_norm2>
    4e4c:	00 24       	eor	r0, r0
    4e4e:	a0 e6       	ldi	r26, 0x60	; 96
    4e50:	40 ea       	ldi	r20, 0xA0	; 160
    4e52:	90 01       	movw	r18, r0
    4e54:	80 58       	subi	r24, 0x80	; 128
    4e56:	56 95       	lsr	r21
    4e58:	97 95       	ror	r25
    4e5a:	28 f4       	brcc	.+10     	; 0x4e66 <sqrt+0x2c>
    4e5c:	80 5c       	subi	r24, 0xC0	; 192
    4e5e:	66 0f       	add	r22, r22
    4e60:	77 1f       	adc	r23, r23
    4e62:	88 1f       	adc	r24, r24
    4e64:	20 f0       	brcs	.+8      	; 0x4e6e <sqrt+0x34>
    4e66:	26 17       	cp	r18, r22
    4e68:	37 07       	cpc	r19, r23
    4e6a:	48 07       	cpc	r20, r24
    4e6c:	30 f4       	brcc	.+12     	; 0x4e7a <sqrt+0x40>
    4e6e:	62 1b       	sub	r22, r18
    4e70:	73 0b       	sbc	r23, r19
    4e72:	84 0b       	sbc	r24, r20
    4e74:	20 29       	or	r18, r0
    4e76:	31 29       	or	r19, r1
    4e78:	4a 2b       	or	r20, r26
    4e7a:	a6 95       	lsr	r26
    4e7c:	17 94       	ror	r1
    4e7e:	07 94       	ror	r0
    4e80:	20 25       	eor	r18, r0
    4e82:	31 25       	eor	r19, r1
    4e84:	4a 27       	eor	r20, r26
    4e86:	58 f7       	brcc	.-42     	; 0x4e5e <sqrt+0x24>
    4e88:	66 0f       	add	r22, r22
    4e8a:	77 1f       	adc	r23, r23
    4e8c:	88 1f       	adc	r24, r24
    4e8e:	20 f0       	brcs	.+8      	; 0x4e98 <sqrt+0x5e>
    4e90:	26 17       	cp	r18, r22
    4e92:	37 07       	cpc	r19, r23
    4e94:	48 07       	cpc	r20, r24
    4e96:	30 f4       	brcc	.+12     	; 0x4ea4 <sqrt+0x6a>
    4e98:	62 0b       	sbc	r22, r18
    4e9a:	73 0b       	sbc	r23, r19
    4e9c:	84 0b       	sbc	r24, r20
    4e9e:	20 0d       	add	r18, r0
    4ea0:	31 1d       	adc	r19, r1
    4ea2:	41 1d       	adc	r20, r1
    4ea4:	a0 95       	com	r26
    4ea6:	81 f7       	brne	.-32     	; 0x4e88 <sqrt+0x4e>
    4ea8:	b9 01       	movw	r22, r18
    4eaa:	84 2f       	mov	r24, r20
    4eac:	91 58       	subi	r25, 0x81	; 129
    4eae:	88 0f       	add	r24, r24
    4eb0:	96 95       	lsr	r25
    4eb2:	87 95       	ror	r24
    4eb4:	08 95       	ret

00004eb6 <square>:
    4eb6:	9b 01       	movw	r18, r22
    4eb8:	ac 01       	movw	r20, r24
    4eba:	38 cf       	rjmp	.-400    	; 0x4d2c <__mulsf3>

00004ebc <trunc>:
    4ebc:	ab de       	rcall	.-682    	; 0x4c14 <__fp_trunc>
    4ebe:	20 f0       	brcs	.+8      	; 0x4ec8 <trunc+0xc>
    4ec0:	9f 37       	cpi	r25, 0x7F	; 127
    4ec2:	08 f4       	brcc	.+2      	; 0x4ec6 <trunc+0xa>
    4ec4:	bf ce       	rjmp	.-642    	; 0x4c44 <__fp_szero>
    4ec6:	14 ce       	rjmp	.-984    	; 0x4af0 <__fp_mintl>
    4ec8:	2e ce       	rjmp	.-932    	; 0x4b26 <__fp_mpack>

00004eca <__fp_norm2>:
    4eca:	91 50       	subi	r25, 0x01	; 1
    4ecc:	50 40       	sbci	r21, 0x00	; 0
    4ece:	66 0f       	add	r22, r22
    4ed0:	77 1f       	adc	r23, r23
    4ed2:	88 1f       	adc	r24, r24
    4ed4:	d2 f7       	brpl	.-12     	; 0x4eca <__fp_norm2>
    4ed6:	08 95       	ret

00004ed8 <__mulsi3>:
    4ed8:	62 9f       	mul	r22, r18
    4eda:	d0 01       	movw	r26, r0
    4edc:	73 9f       	mul	r23, r19
    4ede:	f0 01       	movw	r30, r0
    4ee0:	82 9f       	mul	r24, r18
    4ee2:	e0 0d       	add	r30, r0
    4ee4:	f1 1d       	adc	r31, r1
    4ee6:	64 9f       	mul	r22, r20
    4ee8:	e0 0d       	add	r30, r0
    4eea:	f1 1d       	adc	r31, r1
    4eec:	92 9f       	mul	r25, r18
    4eee:	f0 0d       	add	r31, r0
    4ef0:	83 9f       	mul	r24, r19
    4ef2:	f0 0d       	add	r31, r0
    4ef4:	74 9f       	mul	r23, r20
    4ef6:	f0 0d       	add	r31, r0
    4ef8:	65 9f       	mul	r22, r21
    4efa:	f0 0d       	add	r31, r0
    4efc:	99 27       	eor	r25, r25
    4efe:	72 9f       	mul	r23, r18
    4f00:	b0 0d       	add	r27, r0
    4f02:	e1 1d       	adc	r30, r1
    4f04:	f9 1f       	adc	r31, r25
    4f06:	63 9f       	mul	r22, r19
    4f08:	b0 0d       	add	r27, r0
    4f0a:	e1 1d       	adc	r30, r1
    4f0c:	f9 1f       	adc	r31, r25
    4f0e:	bd 01       	movw	r22, r26
    4f10:	cf 01       	movw	r24, r30
    4f12:	11 24       	eor	r1, r1
    4f14:	08 95       	ret

00004f16 <__divmodhi4>:
    4f16:	97 fb       	bst	r25, 7
    4f18:	09 2e       	mov	r0, r25
    4f1a:	07 26       	eor	r0, r23
    4f1c:	0a d0       	rcall	.+20     	; 0x4f32 <__divmodhi4_neg1>
    4f1e:	77 fd       	sbrc	r23, 7
    4f20:	04 d0       	rcall	.+8      	; 0x4f2a <__divmodhi4_neg2>
    4f22:	49 d0       	rcall	.+146    	; 0x4fb6 <__udivmodhi4>
    4f24:	06 d0       	rcall	.+12     	; 0x4f32 <__divmodhi4_neg1>
    4f26:	00 20       	and	r0, r0
    4f28:	1a f4       	brpl	.+6      	; 0x4f30 <__divmodhi4_exit>

00004f2a <__divmodhi4_neg2>:
    4f2a:	70 95       	com	r23
    4f2c:	61 95       	neg	r22
    4f2e:	7f 4f       	sbci	r23, 0xFF	; 255

00004f30 <__divmodhi4_exit>:
    4f30:	08 95       	ret

00004f32 <__divmodhi4_neg1>:
    4f32:	f6 f7       	brtc	.-4      	; 0x4f30 <__divmodhi4_exit>
    4f34:	90 95       	com	r25
    4f36:	81 95       	neg	r24
    4f38:	9f 4f       	sbci	r25, 0xFF	; 255
    4f3a:	08 95       	ret

00004f3c <__udivmodsi4>:
    4f3c:	a1 e2       	ldi	r26, 0x21	; 33
    4f3e:	1a 2e       	mov	r1, r26
    4f40:	aa 1b       	sub	r26, r26
    4f42:	bb 1b       	sub	r27, r27
    4f44:	fd 01       	movw	r30, r26
    4f46:	0d c0       	rjmp	.+26     	; 0x4f62 <__udivmodsi4_ep>

00004f48 <__udivmodsi4_loop>:
    4f48:	aa 1f       	adc	r26, r26
    4f4a:	bb 1f       	adc	r27, r27
    4f4c:	ee 1f       	adc	r30, r30
    4f4e:	ff 1f       	adc	r31, r31
    4f50:	a2 17       	cp	r26, r18
    4f52:	b3 07       	cpc	r27, r19
    4f54:	e4 07       	cpc	r30, r20
    4f56:	f5 07       	cpc	r31, r21
    4f58:	20 f0       	brcs	.+8      	; 0x4f62 <__udivmodsi4_ep>
    4f5a:	a2 1b       	sub	r26, r18
    4f5c:	b3 0b       	sbc	r27, r19
    4f5e:	e4 0b       	sbc	r30, r20
    4f60:	f5 0b       	sbc	r31, r21

00004f62 <__udivmodsi4_ep>:
    4f62:	66 1f       	adc	r22, r22
    4f64:	77 1f       	adc	r23, r23
    4f66:	88 1f       	adc	r24, r24
    4f68:	99 1f       	adc	r25, r25
    4f6a:	1a 94       	dec	r1
    4f6c:	69 f7       	brne	.-38     	; 0x4f48 <__udivmodsi4_loop>
    4f6e:	60 95       	com	r22
    4f70:	70 95       	com	r23
    4f72:	80 95       	com	r24
    4f74:	90 95       	com	r25
    4f76:	9b 01       	movw	r18, r22
    4f78:	ac 01       	movw	r20, r24
    4f7a:	bd 01       	movw	r22, r26
    4f7c:	cf 01       	movw	r24, r30
    4f7e:	08 95       	ret

00004f80 <__divmodsi4>:
    4f80:	97 fb       	bst	r25, 7
    4f82:	09 2e       	mov	r0, r25
    4f84:	05 26       	eor	r0, r21
    4f86:	0e d0       	rcall	.+28     	; 0x4fa4 <__divmodsi4_neg1>
    4f88:	57 fd       	sbrc	r21, 7
    4f8a:	04 d0       	rcall	.+8      	; 0x4f94 <__divmodsi4_neg2>
    4f8c:	d7 df       	rcall	.-82     	; 0x4f3c <__udivmodsi4>
    4f8e:	0a d0       	rcall	.+20     	; 0x4fa4 <__divmodsi4_neg1>
    4f90:	00 1c       	adc	r0, r0
    4f92:	38 f4       	brcc	.+14     	; 0x4fa2 <__divmodsi4_exit>

00004f94 <__divmodsi4_neg2>:
    4f94:	50 95       	com	r21
    4f96:	40 95       	com	r20
    4f98:	30 95       	com	r19
    4f9a:	21 95       	neg	r18
    4f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f9e:	4f 4f       	sbci	r20, 0xFF	; 255
    4fa0:	5f 4f       	sbci	r21, 0xFF	; 255

00004fa2 <__divmodsi4_exit>:
    4fa2:	08 95       	ret

00004fa4 <__divmodsi4_neg1>:
    4fa4:	f6 f7       	brtc	.-4      	; 0x4fa2 <__divmodsi4_exit>
    4fa6:	90 95       	com	r25
    4fa8:	80 95       	com	r24
    4faa:	70 95       	com	r23
    4fac:	61 95       	neg	r22
    4fae:	7f 4f       	sbci	r23, 0xFF	; 255
    4fb0:	8f 4f       	sbci	r24, 0xFF	; 255
    4fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb4:	08 95       	ret

00004fb6 <__udivmodhi4>:
    4fb6:	aa 1b       	sub	r26, r26
    4fb8:	bb 1b       	sub	r27, r27
    4fba:	51 e1       	ldi	r21, 0x11	; 17
    4fbc:	07 c0       	rjmp	.+14     	; 0x4fcc <__udivmodhi4_ep>

00004fbe <__udivmodhi4_loop>:
    4fbe:	aa 1f       	adc	r26, r26
    4fc0:	bb 1f       	adc	r27, r27
    4fc2:	a6 17       	cp	r26, r22
    4fc4:	b7 07       	cpc	r27, r23
    4fc6:	10 f0       	brcs	.+4      	; 0x4fcc <__udivmodhi4_ep>
    4fc8:	a6 1b       	sub	r26, r22
    4fca:	b7 0b       	sbc	r27, r23

00004fcc <__udivmodhi4_ep>:
    4fcc:	88 1f       	adc	r24, r24
    4fce:	99 1f       	adc	r25, r25
    4fd0:	5a 95       	dec	r21
    4fd2:	a9 f7       	brne	.-22     	; 0x4fbe <__udivmodhi4_loop>
    4fd4:	80 95       	com	r24
    4fd6:	90 95       	com	r25
    4fd8:	bc 01       	movw	r22, r24
    4fda:	cd 01       	movw	r24, r26
    4fdc:	08 95       	ret

00004fde <do_rand>:
    4fde:	af 92       	push	r10
    4fe0:	bf 92       	push	r11
    4fe2:	cf 92       	push	r12
    4fe4:	df 92       	push	r13
    4fe6:	ef 92       	push	r14
    4fe8:	ff 92       	push	r15
    4fea:	0f 93       	push	r16
    4fec:	1f 93       	push	r17
    4fee:	cf 93       	push	r28
    4ff0:	df 93       	push	r29
    4ff2:	ec 01       	movw	r28, r24
    4ff4:	a8 80       	ld	r10, Y
    4ff6:	b9 80       	ldd	r11, Y+1	; 0x01
    4ff8:	ca 80       	ldd	r12, Y+2	; 0x02
    4ffa:	db 80       	ldd	r13, Y+3	; 0x03
    4ffc:	a1 14       	cp	r10, r1
    4ffe:	b1 04       	cpc	r11, r1
    5000:	c1 04       	cpc	r12, r1
    5002:	d1 04       	cpc	r13, r1
    5004:	41 f4       	brne	.+16     	; 0x5016 <do_rand+0x38>
    5006:	84 e2       	ldi	r24, 0x24	; 36
    5008:	a8 2e       	mov	r10, r24
    500a:	89 ed       	ldi	r24, 0xD9	; 217
    500c:	b8 2e       	mov	r11, r24
    500e:	8b e5       	ldi	r24, 0x5B	; 91
    5010:	c8 2e       	mov	r12, r24
    5012:	87 e0       	ldi	r24, 0x07	; 7
    5014:	d8 2e       	mov	r13, r24
    5016:	c6 01       	movw	r24, r12
    5018:	b5 01       	movw	r22, r10
    501a:	2d e1       	ldi	r18, 0x1D	; 29
    501c:	33 ef       	ldi	r19, 0xF3	; 243
    501e:	41 e0       	ldi	r20, 0x01	; 1
    5020:	50 e0       	ldi	r21, 0x00	; 0
    5022:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__divmodsi4>
    5026:	27 ea       	ldi	r18, 0xA7	; 167
    5028:	31 e4       	ldi	r19, 0x41	; 65
    502a:	40 e0       	ldi	r20, 0x00	; 0
    502c:	50 e0       	ldi	r21, 0x00	; 0
    502e:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__mulsi3>
    5032:	7b 01       	movw	r14, r22
    5034:	8c 01       	movw	r16, r24
    5036:	c6 01       	movw	r24, r12
    5038:	b5 01       	movw	r22, r10
    503a:	2d e1       	ldi	r18, 0x1D	; 29
    503c:	33 ef       	ldi	r19, 0xF3	; 243
    503e:	41 e0       	ldi	r20, 0x01	; 1
    5040:	50 e0       	ldi	r21, 0x00	; 0
    5042:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__divmodsi4>
    5046:	ca 01       	movw	r24, r20
    5048:	b9 01       	movw	r22, r18
    504a:	2c ee       	ldi	r18, 0xEC	; 236
    504c:	34 ef       	ldi	r19, 0xF4	; 244
    504e:	4f ef       	ldi	r20, 0xFF	; 255
    5050:	5f ef       	ldi	r21, 0xFF	; 255
    5052:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__mulsi3>
    5056:	6e 0d       	add	r22, r14
    5058:	7f 1d       	adc	r23, r15
    505a:	80 1f       	adc	r24, r16
    505c:	91 1f       	adc	r25, r17
    505e:	97 ff       	sbrs	r25, 7
    5060:	04 c0       	rjmp	.+8      	; 0x506a <do_rand+0x8c>
    5062:	61 50       	subi	r22, 0x01	; 1
    5064:	70 40       	sbci	r23, 0x00	; 0
    5066:	80 40       	sbci	r24, 0x00	; 0
    5068:	90 48       	sbci	r25, 0x80	; 128
    506a:	68 83       	st	Y, r22
    506c:	79 83       	std	Y+1, r23	; 0x01
    506e:	8a 83       	std	Y+2, r24	; 0x02
    5070:	9b 83       	std	Y+3, r25	; 0x03
    5072:	9b 01       	movw	r18, r22
    5074:	3f 77       	andi	r19, 0x7F	; 127
    5076:	c9 01       	movw	r24, r18
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	1f 91       	pop	r17
    507e:	0f 91       	pop	r16
    5080:	ff 90       	pop	r15
    5082:	ef 90       	pop	r14
    5084:	df 90       	pop	r13
    5086:	cf 90       	pop	r12
    5088:	bf 90       	pop	r11
    508a:	af 90       	pop	r10
    508c:	08 95       	ret

0000508e <rand_r>:
    508e:	0e 94 ef 27 	call	0x4fde	; 0x4fde <do_rand>
    5092:	08 95       	ret

00005094 <rand>:
    5094:	80 e0       	ldi	r24, 0x00	; 0
    5096:	92 e0       	ldi	r25, 0x02	; 2
    5098:	0e 94 ef 27 	call	0x4fde	; 0x4fde <do_rand>
    509c:	08 95       	ret

0000509e <srand>:
    509e:	a0 e0       	ldi	r26, 0x00	; 0
    50a0:	b0 e0       	ldi	r27, 0x00	; 0
    50a2:	80 93 00 02 	sts	0x0200, r24
    50a6:	90 93 01 02 	sts	0x0201, r25
    50aa:	a0 93 02 02 	sts	0x0202, r26
    50ae:	b0 93 03 02 	sts	0x0203, r27
    50b2:	08 95       	ret

000050b4 <strtod>:
    50b4:	8f 92       	push	r8
    50b6:	9f 92       	push	r9
    50b8:	af 92       	push	r10
    50ba:	bf 92       	push	r11
    50bc:	cf 92       	push	r12
    50be:	df 92       	push	r13
    50c0:	ef 92       	push	r14
    50c2:	ff 92       	push	r15
    50c4:	0f 93       	push	r16
    50c6:	1f 93       	push	r17
    50c8:	cf 93       	push	r28
    50ca:	df 93       	push	r29
    50cc:	ec 01       	movw	r28, r24
    50ce:	5b 01       	movw	r10, r22
    50d0:	61 15       	cp	r22, r1
    50d2:	71 05       	cpc	r23, r1
    50d4:	19 f0       	breq	.+6      	; 0x50dc <strtod+0x28>
    50d6:	fb 01       	movw	r30, r22
    50d8:	91 83       	std	Z+1, r25	; 0x01
    50da:	80 83       	st	Z, r24
    50dc:	f9 90       	ld	r15, Y+
    50de:	8f 2d       	mov	r24, r15
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	0e 94 c8 29 	call	0x5390	; 0x5390 <isspace>
    50e6:	89 2b       	or	r24, r25
    50e8:	c9 f7       	brne	.-14     	; 0x50dc <strtod+0x28>
    50ea:	fd e2       	ldi	r31, 0x2D	; 45
    50ec:	ff 16       	cp	r15, r31
    50ee:	21 f4       	brne	.+8      	; 0x50f8 <strtod+0x44>
    50f0:	f9 90       	ld	r15, Y+
    50f2:	ee 24       	eor	r14, r14
    50f4:	e3 94       	inc	r14
    50f6:	05 c0       	rjmp	.+10     	; 0x5102 <strtod+0x4e>
    50f8:	2b e2       	ldi	r18, 0x2B	; 43
    50fa:	f2 16       	cp	r15, r18
    50fc:	09 f4       	brne	.+2      	; 0x5100 <strtod+0x4c>
    50fe:	f9 90       	ld	r15, Y+
    5100:	ee 24       	eor	r14, r14
    5102:	8e 01       	movw	r16, r28
    5104:	01 50       	subi	r16, 0x01	; 1
    5106:	10 40       	sbci	r17, 0x00	; 0
    5108:	c8 01       	movw	r24, r16
    510a:	6c ef       	ldi	r22, 0xFC	; 252
    510c:	75 e0       	ldi	r23, 0x05	; 5
    510e:	43 e0       	ldi	r20, 0x03	; 3
    5110:	50 e0       	ldi	r21, 0x00	; 0
    5112:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <strncasecmp_P>
    5116:	89 2b       	or	r24, r25
    5118:	01 f5       	brne	.+64     	; 0x515a <strtod+0xa6>
    511a:	8e 01       	movw	r16, r28
    511c:	0e 5f       	subi	r16, 0xFE	; 254
    511e:	1f 4f       	sbci	r17, 0xFF	; 255
    5120:	c8 01       	movw	r24, r16
    5122:	6f ef       	ldi	r22, 0xFF	; 255
    5124:	75 e0       	ldi	r23, 0x05	; 5
    5126:	45 e0       	ldi	r20, 0x05	; 5
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <strncasecmp_P>
    512e:	89 2b       	or	r24, r25
    5130:	19 f4       	brne	.+6      	; 0x5138 <strtod+0x84>
    5132:	8e 01       	movw	r16, r28
    5134:	09 5f       	subi	r16, 0xF9	; 249
    5136:	1f 4f       	sbci	r17, 0xFF	; 255
    5138:	a1 14       	cp	r10, r1
    513a:	b1 04       	cpc	r11, r1
    513c:	19 f0       	breq	.+6      	; 0x5144 <strtod+0x90>
    513e:	f5 01       	movw	r30, r10
    5140:	11 83       	std	Z+1, r17	; 0x01
    5142:	00 83       	st	Z, r16
    5144:	e0 fc       	sbrc	r14, 0
    5146:	04 c0       	rjmp	.+8      	; 0x5150 <strtod+0x9c>
    5148:	70 e0       	ldi	r23, 0x00	; 0
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	80 e8       	ldi	r24, 0x80	; 128
    514e:	14 c0       	rjmp	.+40     	; 0x5178 <strtod+0xc4>
    5150:	70 e0       	ldi	r23, 0x00	; 0
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	80 e8       	ldi	r24, 0x80	; 128
    5156:	6f ef       	ldi	r22, 0xFF	; 255
    5158:	08 c1       	rjmp	.+528    	; 0x536a <strtod+0x2b6>
    515a:	c8 01       	movw	r24, r16
    515c:	64 e0       	ldi	r22, 0x04	; 4
    515e:	76 e0       	ldi	r23, 0x06	; 6
    5160:	43 e0       	ldi	r20, 0x03	; 3
    5162:	50 e0       	ldi	r21, 0x00	; 0
    5164:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <strncasecmp_P>
    5168:	89 2b       	or	r24, r25
    516a:	69 f4       	brne	.+26     	; 0x5186 <strtod+0xd2>
    516c:	a1 14       	cp	r10, r1
    516e:	b1 04       	cpc	r11, r1
    5170:	29 f4       	brne	.+10     	; 0x517c <strtod+0xc8>
    5172:	70 e0       	ldi	r23, 0x00	; 0
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	80 ec       	ldi	r24, 0xC0	; 192
    5178:	6f e7       	ldi	r22, 0x7F	; 127
    517a:	f7 c0       	rjmp	.+494    	; 0x536a <strtod+0x2b6>
    517c:	22 96       	adiw	r28, 0x02	; 2
    517e:	f5 01       	movw	r30, r10
    5180:	d1 83       	std	Z+1, r29	; 0x01
    5182:	c0 83       	st	Z, r28
    5184:	f6 cf       	rjmp	.-20     	; 0x5172 <strtod+0xbe>
    5186:	88 24       	eor	r8, r8
    5188:	99 24       	eor	r9, r9
    518a:	40 e0       	ldi	r20, 0x00	; 0
    518c:	50 e0       	ldi	r21, 0x00	; 0
    518e:	60 e0       	ldi	r22, 0x00	; 0
    5190:	70 e0       	ldi	r23, 0x00	; 0
    5192:	ef 2d       	mov	r30, r15
    5194:	e0 53       	subi	r30, 0x30	; 48
    5196:	ea 30       	cpi	r30, 0x0A	; 10
    5198:	a0 f5       	brcc	.+104    	; 0x5202 <strtod+0x14e>
    519a:	f2 e0       	ldi	r31, 0x02	; 2
    519c:	ef 2a       	or	r14, r31
    519e:	8e 2d       	mov	r24, r14
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	9c 01       	movw	r18, r24
    51a4:	28 70       	andi	r18, 0x08	; 8
    51a6:	30 70       	andi	r19, 0x00	; 0
    51a8:	e2 fe       	sbrs	r14, 2
    51aa:	06 c0       	rjmp	.+12     	; 0x51b8 <strtod+0x104>
    51ac:	23 2b       	or	r18, r19
    51ae:	79 f5       	brne	.+94     	; 0x520e <strtod+0x15a>
    51b0:	08 94       	sec
    51b2:	81 1c       	adc	r8, r1
    51b4:	91 1c       	adc	r9, r1
    51b6:	2b c0       	rjmp	.+86     	; 0x520e <strtod+0x15a>
    51b8:	23 2b       	or	r18, r19
    51ba:	19 f0       	breq	.+6      	; 0x51c2 <strtod+0x10e>
    51bc:	08 94       	sec
    51be:	81 08       	sbc	r8, r1
    51c0:	91 08       	sbc	r9, r1
    51c2:	db 01       	movw	r26, r22
    51c4:	ca 01       	movw	r24, r20
    51c6:	12 e0       	ldi	r17, 0x02	; 2
    51c8:	88 0f       	add	r24, r24
    51ca:	99 1f       	adc	r25, r25
    51cc:	aa 1f       	adc	r26, r26
    51ce:	bb 1f       	adc	r27, r27
    51d0:	1a 95       	dec	r17
    51d2:	d1 f7       	brne	.-12     	; 0x51c8 <strtod+0x114>
    51d4:	48 0f       	add	r20, r24
    51d6:	59 1f       	adc	r21, r25
    51d8:	6a 1f       	adc	r22, r26
    51da:	7b 1f       	adc	r23, r27
    51dc:	44 0f       	add	r20, r20
    51de:	55 1f       	adc	r21, r21
    51e0:	66 1f       	adc	r22, r22
    51e2:	77 1f       	adc	r23, r23
    51e4:	4e 0f       	add	r20, r30
    51e6:	51 1d       	adc	r21, r1
    51e8:	61 1d       	adc	r22, r1
    51ea:	71 1d       	adc	r23, r1
    51ec:	48 39       	cpi	r20, 0x98	; 152
    51ee:	29 e9       	ldi	r18, 0x99	; 153
    51f0:	52 07       	cpc	r21, r18
    51f2:	29 e9       	ldi	r18, 0x99	; 153
    51f4:	62 07       	cpc	r22, r18
    51f6:	29 e1       	ldi	r18, 0x19	; 25
    51f8:	72 07       	cpc	r23, r18
    51fa:	48 f0       	brcs	.+18     	; 0x520e <strtod+0x15a>
    51fc:	84 e0       	ldi	r24, 0x04	; 4
    51fe:	e8 2a       	or	r14, r24
    5200:	06 c0       	rjmp	.+12     	; 0x520e <strtod+0x15a>
    5202:	ee 3f       	cpi	r30, 0xFE	; 254
    5204:	31 f4       	brne	.+12     	; 0x5212 <strtod+0x15e>
    5206:	e3 fc       	sbrc	r14, 3
    5208:	39 c0       	rjmp	.+114    	; 0x527c <strtod+0x1c8>
    520a:	98 e0       	ldi	r25, 0x08	; 8
    520c:	e9 2a       	or	r14, r25
    520e:	f9 90       	ld	r15, Y+
    5210:	c0 cf       	rjmp	.-128    	; 0x5192 <strtod+0xde>
    5212:	e5 33       	cpi	r30, 0x35	; 53
    5214:	11 f0       	breq	.+4      	; 0x521a <strtod+0x166>
    5216:	e5 31       	cpi	r30, 0x15	; 21
    5218:	89 f5       	brne	.+98     	; 0x527c <strtod+0x1c8>
    521a:	29 91       	ld	r18, Y+
    521c:	2d 32       	cpi	r18, 0x2D	; 45
    521e:	19 f4       	brne	.+6      	; 0x5226 <strtod+0x172>
    5220:	e0 e1       	ldi	r30, 0x10	; 16
    5222:	ee 2a       	or	r14, r30
    5224:	05 c0       	rjmp	.+10     	; 0x5230 <strtod+0x17c>
    5226:	2b 32       	cpi	r18, 0x2B	; 43
    5228:	19 f0       	breq	.+6      	; 0x5230 <strtod+0x17c>
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	03 c0       	rjmp	.+6      	; 0x5236 <strtod+0x182>
    5230:	29 91       	ld	r18, Y+
    5232:	82 e0       	ldi	r24, 0x02	; 2
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	e2 2f       	mov	r30, r18
    5238:	e0 53       	subi	r30, 0x30	; 48
    523a:	ea 30       	cpi	r30, 0x0A	; 10
    523c:	18 f0       	brcs	.+6      	; 0x5244 <strtod+0x190>
    523e:	c8 1b       	sub	r28, r24
    5240:	d9 0b       	sbc	r29, r25
    5242:	1c c0       	rjmp	.+56     	; 0x527c <strtod+0x1c8>
    5244:	20 e0       	ldi	r18, 0x00	; 0
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	fc e0       	ldi	r31, 0x0C	; 12
    524a:	20 38       	cpi	r18, 0x80	; 128
    524c:	3f 07       	cpc	r19, r31
    524e:	5c f4       	brge	.+22     	; 0x5266 <strtod+0x1b2>
    5250:	c9 01       	movw	r24, r18
    5252:	88 0f       	add	r24, r24
    5254:	99 1f       	adc	r25, r25
    5256:	88 0f       	add	r24, r24
    5258:	99 1f       	adc	r25, r25
    525a:	28 0f       	add	r18, r24
    525c:	39 1f       	adc	r19, r25
    525e:	22 0f       	add	r18, r18
    5260:	33 1f       	adc	r19, r19
    5262:	2e 0f       	add	r18, r30
    5264:	31 1d       	adc	r19, r1
    5266:	e9 91       	ld	r30, Y+
    5268:	e0 53       	subi	r30, 0x30	; 48
    526a:	ea 30       	cpi	r30, 0x0A	; 10
    526c:	68 f3       	brcs	.-38     	; 0x5248 <strtod+0x194>
    526e:	e4 fe       	sbrs	r14, 4
    5270:	03 c0       	rjmp	.+6      	; 0x5278 <strtod+0x1c4>
    5272:	30 95       	com	r19
    5274:	21 95       	neg	r18
    5276:	3f 4f       	sbci	r19, 0xFF	; 255
    5278:	82 0e       	add	r8, r18
    527a:	93 1e       	adc	r9, r19
    527c:	ce 2c       	mov	r12, r14
    527e:	dd 24       	eor	r13, r13
    5280:	e1 fe       	sbrs	r14, 1
    5282:	07 c0       	rjmp	.+14     	; 0x5292 <strtod+0x1de>
    5284:	a1 14       	cp	r10, r1
    5286:	b1 04       	cpc	r11, r1
    5288:	21 f0       	breq	.+8      	; 0x5292 <strtod+0x1de>
    528a:	21 97       	sbiw	r28, 0x01	; 1
    528c:	f5 01       	movw	r30, r10
    528e:	d1 83       	std	Z+1, r29	; 0x01
    5290:	c0 83       	st	Z, r28
    5292:	cb 01       	movw	r24, r22
    5294:	ba 01       	movw	r22, r20
    5296:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__floatunsisf>
    529a:	7b 01       	movw	r14, r22
    529c:	8c 01       	movw	r16, r24
    529e:	f3 e0       	ldi	r31, 0x03	; 3
    52a0:	cf 22       	and	r12, r31
    52a2:	dd 24       	eor	r13, r13
    52a4:	23 e0       	ldi	r18, 0x03	; 3
    52a6:	c2 16       	cp	r12, r18
    52a8:	d1 04       	cpc	r13, r1
    52aa:	21 f4       	brne	.+8      	; 0x52b4 <strtod+0x200>
    52ac:	17 fb       	bst	r17, 7
    52ae:	10 95       	com	r17
    52b0:	17 f9       	bld	r17, 7
    52b2:	10 95       	com	r17
    52b4:	57 01       	movw	r10, r14
    52b6:	68 01       	movw	r12, r16
    52b8:	c8 01       	movw	r24, r16
    52ba:	b7 01       	movw	r22, r14
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	40 e0       	ldi	r20, 0x00	; 0
    52c2:	50 e0       	ldi	r21, 0x00	; 0
    52c4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
    52c8:	88 23       	and	r24, r24
    52ca:	09 f4       	brne	.+2      	; 0x52ce <strtod+0x21a>
    52cc:	4a c0       	rjmp	.+148    	; 0x5362 <strtod+0x2ae>
    52ce:	97 fe       	sbrs	r9, 7
    52d0:	0d c0       	rjmp	.+26     	; 0x52ec <strtod+0x238>
    52d2:	2b e1       	ldi	r18, 0x1B	; 27
    52d4:	e2 2e       	mov	r14, r18
    52d6:	26 e0       	ldi	r18, 0x06	; 6
    52d8:	f2 2e       	mov	r15, r18
    52da:	90 94       	com	r9
    52dc:	81 94       	neg	r8
    52de:	91 08       	sbc	r9, r1
    52e0:	93 94       	inc	r9
    52e2:	c0 e2       	ldi	r28, 0x20	; 32
    52e4:	d0 e0       	ldi	r29, 0x00	; 0
    52e6:	00 e0       	ldi	r16, 0x00	; 0
    52e8:	10 e0       	ldi	r17, 0x00	; 0
    52ea:	12 c0       	rjmp	.+36     	; 0x5310 <strtod+0x25c>
    52ec:	93 e3       	ldi	r25, 0x33	; 51
    52ee:	e9 2e       	mov	r14, r25
    52f0:	96 e0       	ldi	r25, 0x06	; 6
    52f2:	f9 2e       	mov	r15, r25
    52f4:	f6 cf       	rjmp	.-20     	; 0x52e2 <strtod+0x22e>
    52f6:	f7 01       	movw	r30, r14
    52f8:	25 91       	lpm	r18, Z+
    52fa:	35 91       	lpm	r19, Z+
    52fc:	45 91       	lpm	r20, Z+
    52fe:	54 91       	lpm	r21, Z+
    5300:	c6 01       	movw	r24, r12
    5302:	b5 01       	movw	r22, r10
    5304:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__mulsf3>
    5308:	5b 01       	movw	r10, r22
    530a:	6c 01       	movw	r12, r24
    530c:	8c 1a       	sub	r8, r28
    530e:	9d 0a       	sbc	r9, r29
    5310:	8c 16       	cp	r8, r28
    5312:	9d 06       	cpc	r9, r29
    5314:	84 f7       	brge	.-32     	; 0x52f6 <strtod+0x242>
    5316:	d5 95       	asr	r29
    5318:	c7 95       	ror	r28
    531a:	0f 5f       	subi	r16, 0xFF	; 255
    531c:	1f 4f       	sbci	r17, 0xFF	; 255
    531e:	06 30       	cpi	r16, 0x06	; 6
    5320:	11 05       	cpc	r17, r1
    5322:	29 f0       	breq	.+10     	; 0x532e <strtod+0x27a>
    5324:	8c ef       	ldi	r24, 0xFC	; 252
    5326:	9f ef       	ldi	r25, 0xFF	; 255
    5328:	e8 0e       	add	r14, r24
    532a:	f9 1e       	adc	r15, r25
    532c:	f1 cf       	rjmp	.-30     	; 0x5310 <strtod+0x25c>
    532e:	c5 01       	movw	r24, r10
    5330:	d6 01       	movw	r26, r12
    5332:	7c 01       	movw	r14, r24
    5334:	8d 01       	movw	r16, r26
    5336:	8c 2d       	mov	r24, r12
    5338:	88 0f       	add	r24, r24
    533a:	8d 2d       	mov	r24, r13
    533c:	88 1f       	adc	r24, r24
    533e:	8f 3f       	cpi	r24, 0xFF	; 255
    5340:	51 f0       	breq	.+20     	; 0x5356 <strtod+0x2a2>
    5342:	c6 01       	movw	r24, r12
    5344:	b5 01       	movw	r22, r10
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	40 e0       	ldi	r20, 0x00	; 0
    534c:	50 e0       	ldi	r21, 0x00	; 0
    534e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__cmpsf2>
    5352:	88 23       	and	r24, r24
    5354:	31 f4       	brne	.+12     	; 0x5362 <strtod+0x2ae>
    5356:	82 e2       	ldi	r24, 0x22	; 34
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	90 93 a7 06 	sts	0x06A7, r25
    535e:	80 93 a6 06 	sts	0x06A6, r24
    5362:	7e 2d       	mov	r23, r14
    5364:	9f 2d       	mov	r25, r15
    5366:	80 2f       	mov	r24, r16
    5368:	61 2f       	mov	r22, r17
    536a:	27 2f       	mov	r18, r23
    536c:	39 2f       	mov	r19, r25
    536e:	48 2f       	mov	r20, r24
    5370:	56 2f       	mov	r21, r22
    5372:	b9 01       	movw	r22, r18
    5374:	ca 01       	movw	r24, r20
    5376:	df 91       	pop	r29
    5378:	cf 91       	pop	r28
    537a:	1f 91       	pop	r17
    537c:	0f 91       	pop	r16
    537e:	ff 90       	pop	r15
    5380:	ef 90       	pop	r14
    5382:	df 90       	pop	r13
    5384:	cf 90       	pop	r12
    5386:	bf 90       	pop	r11
    5388:	af 90       	pop	r10
    538a:	9f 90       	pop	r9
    538c:	8f 90       	pop	r8
    538e:	08 95       	ret

00005390 <isspace>:
    5390:	91 11       	cpse	r25, r1
    5392:	1e c0       	rjmp	.+60     	; 0x53d0 <__ctype_isfalse>
    5394:	80 32       	cpi	r24, 0x20	; 32
    5396:	19 f0       	breq	.+6      	; 0x539e <isspace+0xe>
    5398:	89 50       	subi	r24, 0x09	; 9
    539a:	85 50       	subi	r24, 0x05	; 5
    539c:	d0 f7       	brcc	.-12     	; 0x5392 <isspace+0x2>
    539e:	08 95       	ret

000053a0 <strncasecmp_P>:
    53a0:	fb 01       	movw	r30, r22
    53a2:	dc 01       	movw	r26, r24
    53a4:	41 50       	subi	r20, 0x01	; 1
    53a6:	50 40       	sbci	r21, 0x00	; 0
    53a8:	88 f0       	brcs	.+34     	; 0x53cc <strncasecmp_P+0x2c>
    53aa:	8d 91       	ld	r24, X+
    53ac:	81 34       	cpi	r24, 0x41	; 65
    53ae:	1c f0       	brlt	.+6      	; 0x53b6 <strncasecmp_P+0x16>
    53b0:	8b 35       	cpi	r24, 0x5B	; 91
    53b2:	0c f4       	brge	.+2      	; 0x53b6 <strncasecmp_P+0x16>
    53b4:	80 5e       	subi	r24, 0xE0	; 224
    53b6:	65 91       	lpm	r22, Z+
    53b8:	61 34       	cpi	r22, 0x41	; 65
    53ba:	1c f0       	brlt	.+6      	; 0x53c2 <strncasecmp_P+0x22>
    53bc:	6b 35       	cpi	r22, 0x5B	; 91
    53be:	0c f4       	brge	.+2      	; 0x53c2 <strncasecmp_P+0x22>
    53c0:	60 5e       	subi	r22, 0xE0	; 224
    53c2:	86 1b       	sub	r24, r22
    53c4:	61 11       	cpse	r22, r1
    53c6:	71 f3       	breq	.-36     	; 0x53a4 <strncasecmp_P+0x4>
    53c8:	99 0b       	sbc	r25, r25
    53ca:	08 95       	ret
    53cc:	88 1b       	sub	r24, r24
    53ce:	fc cf       	rjmp	.-8      	; 0x53c8 <strncasecmp_P+0x28>

000053d0 <__ctype_isfalse>:
    53d0:	99 27       	eor	r25, r25
    53d2:	88 27       	eor	r24, r24

000053d4 <__ctype_istrue>:
    53d4:	08 95       	ret

000053d6 <_exit>:
    53d6:	f8 94       	cli

000053d8 <__stop_program>:
    53d8:	ff cf       	rjmp	.-2      	; 0x53d8 <__stop_program>
