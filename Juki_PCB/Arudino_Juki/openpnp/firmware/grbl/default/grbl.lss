
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000330  00800200  00800200  00005122  2**0
                  ALLOC
  2 .debug_aranges 00000338  00000000  00000000  00005122  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000670  00000000  00000000  0000545a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000036fa  00000000  00000000  00005aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000fcd  00000000  00000000  000091c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00002dc6  00000000  00000000  0000a191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000510  00000000  00000000  0000cf58  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000c5b  00000000  00000000  0000d468  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000218c  00000000  00000000  0000e0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ed0  00000000  00000000  0001024f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__ctors_end>
       4:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
       8:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
       c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      10:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      14:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      18:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      1c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      20:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      24:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      28:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      2c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      30:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      34:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      38:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      3c:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__vector_15>
      40:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      44:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__vector_17>
      48:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      4c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      50:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      54:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      58:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      5c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      60:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      64:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__vector_25>
      68:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      6c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      70:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      74:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      78:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      7c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      80:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      84:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      88:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      8c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      90:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      94:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      98:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      9c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      a0:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      a4:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      a8:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      ac:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      b0:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      b4:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      b8:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      bc:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      c0:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      c4:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      c8:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      cc:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      d0:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      d4:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      d8:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      dc:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      e0:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__bad_interrupt>
      e4:	63 07       	cpc	r22, r19
      e6:	66 07       	cpc	r22, r22
      e8:	69 07       	cpc	r22, r25
      ea:	6d 07       	cpc	r22, r29
      ec:	3c 07       	cpc	r19, r28
      ee:	ca 05       	cpc	r28, r10
      f0:	ca 05       	cpc	r28, r10
      f2:	ca 05       	cpc	r28, r10
      f4:	ca 05       	cpc	r28, r10
      f6:	ca 05       	cpc	r28, r10
      f8:	ca 05       	cpc	r28, r10
      fa:	ca 05       	cpc	r28, r10
      fc:	ca 05       	cpc	r28, r10
      fe:	ca 05       	cpc	r28, r10
     100:	ca 05       	cpc	r28, r10
     102:	ca 05       	cpc	r28, r10
     104:	ca 05       	cpc	r28, r10
     106:	3f 07       	cpc	r19, r31
     108:	47 07       	cpc	r20, r23
     10a:	4f 07       	cpc	r20, r31
     10c:	57 07       	cpc	r21, r23
     10e:	5a 07       	cpc	r21, r26
     110:	ca 05       	cpc	r28, r10
     112:	ca 05       	cpc	r28, r10
     114:	ca 05       	cpc	r28, r10
     116:	ca 05       	cpc	r28, r10
     118:	ca 05       	cpc	r28, r10
     11a:	ca 05       	cpc	r28, r10
     11c:	5d 07       	cpc	r21, r29
     11e:	ca 05       	cpc	r28, r10
     120:	5d 07       	cpc	r21, r29
     122:	ca 05       	cpc	r28, r10
     124:	ca 05       	cpc	r28, r10
     126:	ca 05       	cpc	r28, r10
     128:	ca 05       	cpc	r28, r10
     12a:	ca 05       	cpc	r28, r10
     12c:	ca 05       	cpc	r28, r10
     12e:	ca 05       	cpc	r28, r10
     130:	ca 05       	cpc	r28, r10
     132:	ca 05       	cpc	r28, r10
     134:	ca 05       	cpc	r28, r10
     136:	ca 05       	cpc	r28, r10
     138:	ca 05       	cpc	r28, r10
     13a:	ca 05       	cpc	r28, r10
     13c:	ca 05       	cpc	r28, r10
     13e:	ca 05       	cpc	r28, r10
     140:	ca 05       	cpc	r28, r10
     142:	ca 05       	cpc	r28, r10
     144:	ca 05       	cpc	r28, r10
     146:	ca 05       	cpc	r28, r10
     148:	ca 05       	cpc	r28, r10
     14a:	ca 05       	cpc	r28, r10
     14c:	ca 05       	cpc	r28, r10
     14e:	60 07       	cpc	r22, r16
     150:	ca 05       	cpc	r28, r10
     152:	ca 05       	cpc	r28, r10
     154:	ca 05       	cpc	r28, r10
     156:	ca 05       	cpc	r28, r10
     158:	ca 05       	cpc	r28, r10
     15a:	ca 05       	cpc	r28, r10
     15c:	ca 05       	cpc	r28, r10
     15e:	ca 05       	cpc	r28, r10
     160:	ca 05       	cpc	r28, r10
     162:	ca 05       	cpc	r28, r10
     164:	ca 05       	cpc	r28, r10
     166:	ca 05       	cpc	r28, r10
     168:	ca 05       	cpc	r28, r10
     16a:	ca 05       	cpc	r28, r10
     16c:	ca 05       	cpc	r28, r10
     16e:	ca 05       	cpc	r28, r10
     170:	ca 05       	cpc	r28, r10
     172:	ca 05       	cpc	r28, r10
     174:	ca 05       	cpc	r28, r10
     176:	ca 05       	cpc	r28, r10
     178:	ca 05       	cpc	r28, r10
     17a:	ca 05       	cpc	r28, r10
     17c:	ca 05       	cpc	r28, r10
     17e:	ca 05       	cpc	r28, r10
     180:	ca 05       	cpc	r28, r10
     182:	ca 05       	cpc	r28, r10
     184:	77 07       	cpc	r23, r23
     186:	ca 05       	cpc	r28, r10
     188:	ca 05       	cpc	r28, r10
     18a:	ca 05       	cpc	r28, r10
     18c:	ca 05       	cpc	r28, r10
     18e:	ca 05       	cpc	r28, r10
     190:	ca 05       	cpc	r28, r10
     192:	ca 05       	cpc	r28, r10
     194:	ca 05       	cpc	r28, r10
     196:	ca 05       	cpc	r28, r10
     198:	7b 07       	cpc	r23, r27
     19a:	7e 07       	cpc	r23, r30
     19c:	81 07       	cpc	r24, r17
     19e:	71 07       	cpc	r23, r17
     1a0:	74 07       	cpc	r23, r20
     1a2:	08 4a       	sbci	r16, 0xA8	; 168
     1a4:	d7 3b       	cpi	r29, 0xB7	; 183
     1a6:	3b ce       	rjmp	.-906    	; 0xfffffe1e <__eeprom_end+0xff7efe1e>
     1a8:	01 6e       	ori	r16, 0xE1	; 225
     1aa:	84 bc       	out	0x24, r8	; 36
     1ac:	bf fd       	.word	0xfdbf	; ????
     1ae:	c1 2f       	mov	r28, r17
     1b0:	3d 6c       	ori	r19, 0xCD	; 205
     1b2:	74 31       	cpi	r23, 0x14	; 20
     1b4:	9a bd       	out	0x2a, r25	; 42
     1b6:	56 83       	std	Z+6, r21	; 0x06
     1b8:	3d da       	rcall	.-2950   	; 0xfffff634 <__eeprom_end+0xff7ef634>
     1ba:	3d 00       	.word	0x003d	; ????
     1bc:	c7 7f       	andi	r28, 0xF7	; 247
     1be:	11 be       	out	0x31, r1	; 49
     1c0:	d9 e4       	ldi	r29, 0x49	; 73
     1c2:	bb 4c       	sbci	r27, 0xCB	; 203
     1c4:	3e 91       	ld	r19, -X
     1c6:	6b aa       	std	Y+51, r6	; 0x33
     1c8:	aa be       	out	0x3a, r10	; 58
     1ca:	00 00       	nop
     1cc:	00 80       	ld	r0, Z
     1ce:	3f 59       	subi	r19, 0x9F	; 159

000001cf <__c.1839>:
     1cf:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

000001d8 <__c.1837>:
     1d8:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

000001e1 <__c.1835>:
     1e1:	59 4c 32 0d 0a 00                                   YL2...

000001e7 <__c.1833>:
     1e7:	59 4c 31 0d 0a 00                                   YL1...

000001ed <__c.1831>:
     1ed:	58 4c 32 0d 0a 00                                   XL2...

000001f3 <__c.1829>:
     1f3:	58 4c 31 0d 0a 00                                   XL1...

000001f9 <__c.1570>:
     1f9:	5b 4e 53 4c 5d 20 70 69 63 6b 6f 42 65 61 72 20     [NSL] pickoBear 
     209:	6f 6b 0a 0d 00                                      ok...

0000020e <__c.1669>:
     20e:	0a 0d 00                                            ...

00000211 <__c.1667>:
     211:	65 72 72 6f 72 3a 20 00                             error: .

00000219 <__c.1664>:
     219:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     229:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

00000237 <__c.1661>:
     237:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     247:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

00000256 <__c.1658>:
     256:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     266:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

00000277 <__c.1655>:
     277:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     287:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

00000292 <__c.1651>:
     292:	6f 6b 0a 0d 00                                      ok...

00000297 <__c.1648>:
     297:	4e 6f 74 20 68 6f 6d 65 64 0a 0d 00                 Not homed...

000002a3 <__c.1677>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1675>:
     2a6:	0d 0a 4f 70 65 6e 50 6e 50 2f 47 72 62 6c 20 30     ..OpenPnP/Grbl 0
     2b6:	2e 37 36 00                                         .76.

000002ba <__c.1734>:
     2ba:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
     2ca:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
     2da:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
     2ea:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

000002f5 <__c.1732>:
     2f5:	27 24 27 20 74 6f 20 64 75 6d 70 20 63 75 72 72     '$' to dump curr
     305:	65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a 00        ent settings...

00000314 <__c.1724>:
     314:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     324:	6e 67 0d 0a 00                                      ng...

00000329 <__c.1722>:
     329:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     339:	72 0d 0a 00                                         r...

0000033d <__c.1679>:
     33d:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     34d:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     35d:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     36d:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     37d:	0d 0a 00                                            ...

00000380 <__c.1677>:
     380:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     390:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     3a0:	61 62 6c 65 64 29 0d 0a 00                          abled)...

000003a9 <__c.1675>:
     3a9:	24 31 30 30 30 20 3d 20 00                          $1000 = .

000003b2 <__c.1673>:
     3b2:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     3c2:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     3d2:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     3e2:	2f 6d 69 6e 29 0d 0a 00                             /min)...

000003ea <__c.1671>:
     3ea:	24 39 20 3d 20 00                                   $9 = .

000003f0 <__c.1669>:
     3f0:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     400:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

0000040e <__c.1667>:
     40e:	24 38 20 3d 20 00                                   $8 = .

00000414 <__c.1665>:
     414:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     424:	29 0d 0a 00                                         )...

00000428 <__c.1663>:
     428:	24 37 20 3d 20 00                                   $7 = .

0000042e <__c.1661>:
     42e:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     43e:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

0000044c <__c.1659>:
     44c:	24 36 20 3d 20 00                                   $6 = .

00000452 <__c.1657>:
     452:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     462:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000470 <__c.1655>:
     470:	24 35 20 3d 20 00                                   $5 = .

00000476 <__c.1653>:
     476:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     486:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

00000493 <__c.1651>:
     493:	24 34 20 3d 20 00                                   $4 = .

00000499 <__c.1649>:
     499:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     4a9:	0a 00                                               ..

000004ab <__c.1647>:
     4ab:	24 33 20 3d 20 00                                   $3 = .

000004b1 <__c.1645>:
     4b1:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

000004c1 <__c.1643>:
     4c1:	24 32 20 3d 20 00                                   $2 = .

000004c7 <__c.1641>:
     4c7:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

000004d7 <__c.1639>:
     4d7:	24 31 20 3d 20 00                                   $1 = .

000004dd <__c.1637>:
     4dd:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000004ed <__c.1635>:
     4ed:	24 30 20 3d 20 00                                   $0 = .

000004f3 <__c.1633>:
     4f3:	0d 0a 00                                            ...

000004f6 <__c.1631>:
     4f6:	30 2e 37 36 00                                      0.76.

000004fb <__c.1629>:
     4fb:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

00000507 <__c.2138>:
     507:	70 69 63 6b 6f 62 65 61 72 20 69 73 20 6e 6f 74     pickobear is not
     517:	20 68 6f 6d 65 64 0d 0a 00                           homed...

00000520 <__c.2136>:
     520:	70 69 63 6b 6f 62 65 61 72 20 69 73 20 68 6f 6d     pickobear is hom
     530:	65 64 0d 0a 00                                      ed...

00000535 <__c.2130>:
     535:	68 6f 6d 69 6e 67 0d 0a 00                          homing...

0000053e <__c.2014>:
     53e:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

00000548 <__c.2032>:
     548:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

00000552 <pstr_inf>:
     552:	49 4e 46                                            INF

00000555 <pstr_inity>:
     555:	49 4e 49 54 59                                      INITY

0000055a <pstr_nan>:
     55a:	4e 41 4e                                            NAN

0000055d <pwr_m10>:
     55d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     56d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000575 <pwr_p10>:
     575:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     585:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000058e <__ctors_end>:
     58e:	11 24       	eor	r1, r1
     590:	1f be       	out	0x3f, r1	; 63
     592:	cf ef       	ldi	r28, 0xFF	; 255
     594:	d1 e2       	ldi	r29, 0x21	; 33
     596:	de bf       	out	0x3e, r29	; 62
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	00 e0       	ldi	r16, 0x00	; 0
     59c:	0c bf       	out	0x3c, r16	; 60

0000059e <__do_copy_data>:
     59e:	12 e0       	ldi	r17, 0x02	; 2
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b2 e0       	ldi	r27, 0x02	; 2
     5a4:	ee ea       	ldi	r30, 0xAE	; 174
     5a6:	f0 e5       	ldi	r31, 0x50	; 80
     5a8:	00 e0       	ldi	r16, 0x00	; 0
     5aa:	0b bf       	out	0x3b, r16	; 59
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__do_copy_data+0x14>
     5ae:	07 90       	elpm	r0, Z+
     5b0:	0d 92       	st	X+, r0
     5b2:	a0 30       	cpi	r26, 0x00	; 0
     5b4:	b1 07       	cpc	r27, r17
     5b6:	d9 f7       	brne	.-10     	; 0x5ae <__do_copy_data+0x10>

000005b8 <__do_clear_bss>:
     5b8:	15 e0       	ldi	r17, 0x05	; 5
     5ba:	a0 e0       	ldi	r26, 0x00	; 0
     5bc:	b2 e0       	ldi	r27, 0x02	; 2
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <.do_clear_bss_start>

000005c0 <.do_clear_bss_loop>:
     5c0:	1d 92       	st	X+, r1

000005c2 <.do_clear_bss_start>:
     5c2:	a0 33       	cpi	r26, 0x30	; 48
     5c4:	b1 07       	cpc	r27, r17
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <.do_clear_bss_loop>
     5c8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <main>
     5cc:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <_exit>

000005d0 <__bad_interrupt>:
     5d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005d4 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     5d4:	24 9a       	sbi	0x04, 4	; 4
}
     5d6:	08 95       	ret

000005d8 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     5d8:	89 2b       	or	r24, r25
     5da:	11 f4       	brne	.+4      	; 0x5e0 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     5dc:	2c 98       	cbi	0x05, 4	; 5
     5de:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     5e0:	2c 9a       	sbi	0x05, 4	; 5
     5e2:	08 95       	ret

000005e4 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5e4:	f9 99       	sbic	0x1f, 1	; 31
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     5e8:	92 bd       	out	0x22, r25	; 34
     5ea:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     5f0:	80 b5       	in	r24, 0x20	; 32
}
     5f2:	08 95       	ret

000005f4 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     5f4:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5f6:	f9 99       	sbic	0x1f, 1	; 31
     5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     5fa:	92 bd       	out	0x22, r25	; 34
     5fc:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     602:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     604:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     606:	89 2f       	mov	r24, r25
     608:	86 23       	and	r24, r22
     60a:	41 f0       	breq	.+16     	; 0x61c <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     60c:	6f 3f       	cpi	r22, 0xFF	; 255
     60e:	71 f0       	breq	.+28     	; 0x62c <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     610:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     612:	84 e0       	ldi	r24, 0x04	; 4
     614:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     616:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     618:	78 94       	sei
}
     61a:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     61c:	99 23       	and	r25, r25
     61e:	e1 f3       	breq	.-8      	; 0x618 <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     620:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     622:	84 e2       	ldi	r24, 0x24	; 36
     624:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     626:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     628:	78 94       	sei
}
     62a:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     62c:	84 e1       	ldi	r24, 0x14	; 20
     62e:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     630:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     632:	78 94       	sei
}
     634:	08 95       	ret

00000636 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     636:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     638:	41 15       	cp	r20, r1
     63a:	51 05       	cpc	r21, r1
     63c:	c9 f1       	breq	.+114    	; 0x6b0 <memcpy_from_eeprom_with_checksum+0x7a>
     63e:	a0 e0       	ldi	r26, 0x00	; 0
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     644:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     646:	c9 01       	movw	r24, r18
     648:	86 0f       	add	r24, r22
     64a:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     64c:	f9 99       	sbic	0x1f, 1	; 31
     64e:	fe cf       	rjmp	.-4      	; 0x64c <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     650:	92 bd       	out	0x22, r25	; 34
     652:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     654:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     656:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     658:	aa 23       	and	r26, r26
     65a:	59 f0       	breq	.+22     	; 0x672 <memcpy_from_eeprom_with_checksum+0x3c>
     65c:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     65e:	a8 2f       	mov	r26, r24
     660:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     662:	90 83       	st	Z, r25
     664:	2f 5f       	subi	r18, 0xFF	; 255
     666:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     668:	24 17       	cp	r18, r20
     66a:	35 07       	cpc	r19, r21
     66c:	71 f0       	breq	.+28     	; 0x68a <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     66e:	31 96       	adiw	r30, 0x01	; 1
     670:	ea cf       	rjmp	.-44     	; 0x646 <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     672:	8a 2f       	mov	r24, r26
     674:	88 1f       	adc	r24, r24
     676:	88 27       	eor	r24, r24
     678:	88 1f       	adc	r24, r24
    checksum += data;    
     67a:	a8 2f       	mov	r26, r24
     67c:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     67e:	90 83       	st	Z, r25
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     684:	24 17       	cp	r18, r20
     686:	35 07       	cpc	r19, r21
     688:	91 f7       	brne	.-28     	; 0x66e <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     68a:	62 0f       	add	r22, r18
     68c:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     68e:	f9 99       	sbic	0x1f, 1	; 31
     690:	fe cf       	rjmp	.-4      	; 0x68e <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     692:	72 bd       	out	0x22, r23	; 34
     694:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     69a:	80 b5       	in	r24, 0x20	; 32
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a8 17       	cp	r26, r24
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     6a4:	c9 01       	movw	r24, r18
     6a6:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     6ac:	c9 01       	movw	r24, r18
     6ae:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     6b0:	a0 e0       	ldi	r26, 0x00	; 0
     6b2:	ed cf       	rjmp	.-38     	; 0x68e <memcpy_from_eeprom_with_checksum+0x58>

000006b4 <memcpy_to_eeprom_with_checksum>:
}

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	db 01       	movw	r26, r22
     6c6:	8a 01       	movw	r16, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6c8:	41 15       	cp	r20, r1
     6ca:	51 05       	cpc	r21, r1
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <memcpy_to_eeprom_with_checksum+0x1c>
     6ce:	62 c0       	rjmp	.+196    	; 0x794 <memcpy_to_eeprom_with_checksum+0xe0>
     6d0:	9c 01       	movw	r18, r24
     6d2:	fa 01       	movw	r30, r20
     6d4:	70 e0       	ldi	r23, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
     6d6:	91 e0       	ldi	r25, 0x01	; 1
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6d8:	54 e2       	ldi	r21, 0x24	; 36
     6da:	e5 2e       	mov	r14, r21
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6dc:	44 e1       	ldi	r20, 0x14	; 20
     6de:	d4 2e       	mov	r13, r20
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	f8 2e       	mov	r15, r24


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     6e4:	77 23       	and	r23, r23
     6e6:	f1 f0       	breq	.+60     	; 0x724 <memcpy_to_eeprom_with_checksum+0x70>
     6e8:	81 e0       	ldi	r24, 0x01	; 1
    checksum += *source;
     6ea:	6c 91       	ld	r22, X
     6ec:	78 2f       	mov	r23, r24
     6ee:	76 0f       	add	r23, r22
    eeprom_put_char(destination++, *(source++)); 
     6f0:	a9 01       	movw	r20, r18
     6f2:	4f 5f       	subi	r20, 0xFF	; 255
     6f4:	5f 4f       	sbci	r21, 0xFF	; 255
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     6f6:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6f8:	f9 99       	sbic	0x1f, 1	; 31
     6fa:	fe cf       	rjmp	.-4      	; 0x6f8 <memcpy_to_eeprom_with_checksum+0x44>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     6fc:	32 bd       	out	0x22, r19	; 34
     6fe:	21 bd       	out	0x21, r18	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     700:	9f bb       	out	0x1f, r25	; 31
	old_value = EEDR; // Get old EEPROM value.
     702:	20 b5       	in	r18, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     704:	26 27       	eor	r18, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     706:	82 2f       	mov	r24, r18
     708:	86 23       	and	r24, r22
     70a:	89 f0       	breq	.+34     	; 0x72e <memcpy_to_eeprom_with_checksum+0x7a>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     70c:	6f 3f       	cpi	r22, 0xFF	; 255
     70e:	a1 f1       	breq	.+104    	; 0x778 <memcpy_to_eeprom_with_checksum+0xc4>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     710:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     712:	ff ba       	out	0x1f, r15	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     714:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     716:	78 94       	sei
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	89 f0       	breq	.+34     	; 0x73e <memcpy_to_eeprom_with_checksum+0x8a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     71c:	11 96       	adiw	r26, 0x01	; 1
     71e:	9a 01       	movw	r18, r20


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     720:	77 23       	and	r23, r23
     722:	11 f7       	brne	.-60     	; 0x6e8 <memcpy_to_eeprom_with_checksum+0x34>
     724:	87 2f       	mov	r24, r23
     726:	88 1f       	adc	r24, r24
     728:	88 27       	eor	r24, r24
     72a:	88 1f       	adc	r24, r24
     72c:	de cf       	rjmp	.-68     	; 0x6ea <memcpy_to_eeprom_with_checksum+0x36>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     72e:	22 23       	and	r18, r18
     730:	91 f3       	breq	.-28     	; 0x716 <memcpy_to_eeprom_with_checksum+0x62>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     732:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     734:	ef ba       	out	0x1f, r14	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     736:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     738:	78 94       	sei
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	79 f7       	brne	.-34     	; 0x71c <memcpy_to_eeprom_with_checksum+0x68>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     73e:	c0 0f       	add	r28, r16
     740:	d1 1f       	adc	r29, r17
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     742:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     744:	f9 99       	sbic	0x1f, 1	; 31
     746:	fe cf       	rjmp	.-4      	; 0x744 <memcpy_to_eeprom_with_checksum+0x90>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     748:	d2 bd       	out	0x22, r29	; 34
     74a:	c1 bd       	out	0x21, r28	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     750:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     752:	97 27       	eor	r25, r23
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     754:	89 2f       	mov	r24, r25
     756:	87 23       	and	r24, r23
     758:	91 f0       	breq	.+36     	; 0x77e <memcpy_to_eeprom_with_checksum+0xca>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     75a:	7f 3f       	cpi	r23, 0xFF	; 255
     75c:	b9 f0       	breq	.+46     	; 0x78c <memcpy_to_eeprom_with_checksum+0xd8>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     75e:	70 bd       	out	0x20, r23	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     760:	84 e0       	ldi	r24, 0x04	; 4
     762:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     764:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     766:	78 94       	sei
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     778:	df ba       	out	0x1f, r13	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     77a:	f9 9a       	sbi	0x1f, 1	; 31
     77c:	cc cf       	rjmp	.-104    	; 0x716 <memcpy_to_eeprom_with_checksum+0x62>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     77e:	99 23       	and	r25, r25
     780:	91 f3       	breq	.-28     	; 0x766 <memcpy_to_eeprom_with_checksum+0xb2>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     782:	70 bd       	out	0x20, r23	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     784:	84 e2       	ldi	r24, 0x24	; 36
     786:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     788:	f9 9a       	sbi	0x1f, 1	; 31
     78a:	ed cf       	rjmp	.-38     	; 0x766 <memcpy_to_eeprom_with_checksum+0xb2>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     78c:	84 e1       	ldi	r24, 0x14	; 20
     78e:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     790:	f9 9a       	sbi	0x1f, 1	; 31
     792:	e9 cf       	rjmp	.-46     	; 0x766 <memcpy_to_eeprom_with_checksum+0xb2>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	d5 cf       	rjmp	.-86     	; 0x742 <memcpy_to_eeprom_with_checksum+0x8e>

00000798 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     798:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     79c:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     7a0:	40 93 27 02 	sts	0x0227, r20
}
     7a4:	08 95       	ret

000007a6 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     7a6:	af 92       	push	r10
     7a8:	bf 92       	push	r11
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	0f 92       	push	r0
     7bc:	0f 92       	push	r0
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	6c 01       	movw	r12, r24
     7c4:	5b 01       	movw	r10, r22
     7c6:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     7c8:	fb 01       	movw	r30, r22
     7ca:	00 81       	ld	r16, Z
     7cc:	11 81       	ldd	r17, Z+1	; 0x01
     7ce:	08 0f       	add	r16, r24
     7d0:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     7d2:	c8 01       	movw	r24, r16
     7d4:	be 01       	movw	r22, r28
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <strtod>
     7de:	f7 01       	movw	r30, r14
     7e0:	60 83       	st	Z, r22
     7e2:	71 83       	std	Z+1, r23	; 0x01
     7e4:	82 83       	std	Z+2, r24	; 0x02
     7e6:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	80 17       	cp	r24, r16
     7ee:	91 07       	cpc	r25, r17
     7f0:	a9 f0       	breq	.+42     	; 0x81c <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     7f2:	8c 19       	sub	r24, r12
     7f4:	9d 09       	sbc	r25, r13
     7f6:	f5 01       	movw	r30, r10
     7f8:	91 83       	std	Z+1, r25	; 0x01
     7fa:	80 83       	st	Z, r24
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     800:	c9 01       	movw	r24, r18
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	cf 91       	pop	r28
     808:	df 91       	pop	r29
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	bf 90       	pop	r11
     818:	af 90       	pop	r10
     81a:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 00 02 	sts	0x0200, r24
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	ec cf       	rjmp	.-40     	; 0x800 <read_double+0x5a>

00000828 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     828:	88 e2       	ldi	r24, 0x28	; 40
     82a:	e0 e0       	ldi	r30, 0x00	; 0
     82c:	f2 e0       	ldi	r31, 0x02	; 2
     82e:	df 01       	movw	r26, r30
     830:	1d 92       	st	X+, r1
     832:	8a 95       	dec	r24
     834:	e9 f7       	brne	.-6      	; 0x830 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     836:	60 91 1a 05 	lds	r22, 0x051A
     83a:	70 91 1b 05 	lds	r23, 0x051B
     83e:	80 91 1c 05 	lds	r24, 0x051C
     842:	90 91 1d 05 	lds	r25, 0x051D
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e7       	ldi	r20, 0x70	; 112
     84c:	52 e4       	ldi	r21, 0x42	; 66
     84e:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
     852:	60 93 0a 02 	sts	0x020A, r22
     856:	70 93 0b 02 	sts	0x020B, r23
     85a:	80 93 0c 02 	sts	0x020C, r24
     85e:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     862:	60 91 1e 05 	lds	r22, 0x051E
     866:	70 91 1f 05 	lds	r23, 0x051F
     86a:	80 91 20 05 	lds	r24, 0x0520
     86e:	90 91 21 05 	lds	r25, 0x0521
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e7       	ldi	r20, 0x70	; 112
     878:	52 e4       	ldi	r21, 0x42	; 66
     87a:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
     87e:	60 93 0e 02 	sts	0x020E, r22
     882:	70 93 0f 02 	sts	0x020F, r23
     886:	80 93 10 02 	sts	0x0210, r24
     88a:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     88e:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     89e:	90 93 04 02 	sts	0x0204, r25
}
     8a2:	08 95       	ret

000008a4 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	79 01       	movw	r14, r18
     8b6:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
     8b8:	5f 77       	andi	r21, 0x7F	; 127
     8ba:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
     8be:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <atan>
     8c2:	5b 01       	movw	r10, r22
     8c4:	6c 01       	movw	r12, r24
  if (y>0) {
     8c6:	c8 01       	movw	r24, r16
     8c8:	b7 01       	movw	r22, r14
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
     8d6:	18 16       	cp	r1, r24
     8d8:	5c f4       	brge	.+22     	; 0x8f0 <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
     8da:	b5 01       	movw	r22, r10
     8dc:	c6 01       	movw	r24, r12
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
     8f0:	c6 01       	movw	r24, r12
     8f2:	b5 01       	movw	r22, r10
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
     900:	18 16       	cp	r1, r24
     902:	5c f4       	brge	.+22     	; 0x91a <theta+0x76>
    {
      return(M_PI-theta);
     904:	6b ed       	ldi	r22, 0xDB	; 219
     906:	7f e0       	ldi	r23, 0x0F	; 15
     908:	89 e4       	ldi	r24, 0x49	; 73
     90a:	90 e4       	ldi	r25, 0x40	; 64
     90c:	a6 01       	movw	r20, r12
     90e:	95 01       	movw	r18, r10
     910:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
     914:	5b 01       	movw	r10, r22
     916:	6c 01       	movw	r12, r24
     918:	e0 cf       	rjmp	.-64     	; 0x8da <theta+0x36>
    } else {
      return(-M_PI-theta);
     91a:	6b ed       	ldi	r22, 0xDB	; 219
     91c:	7f e0       	ldi	r23, 0x0F	; 15
     91e:	89 e4       	ldi	r24, 0x49	; 73
     920:	90 ec       	ldi	r25, 0xC0	; 192
     922:	a6 01       	movw	r20, r12
     924:	95 01       	movw	r18, r10
     926:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
     92a:	5b 01       	movw	r10, r22
     92c:	6c 01       	movw	r12, r24
     92e:	d5 cf       	rjmp	.-86     	; 0x8da <theta+0x36>

00000930 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     930:	af 92       	push	r10
     932:	bf 92       	push	r11
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	df 93       	push	r29
     942:	cf 93       	push	r28
     944:	0f 92       	push	r0
     946:	0f 92       	push	r0
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	5b 01       	movw	r10, r22
     94e:	6a 01       	movw	r12, r20
     950:	79 01       	movw	r14, r18
  if (line[*char_counter] == 0) {
     952:	d9 01       	movw	r26, r18
     954:	ed 91       	ld	r30, X+
     956:	fc 91       	ld	r31, X
     958:	e4 0f       	add	r30, r20
     95a:	f5 1f       	adc	r31, r21
     95c:	e0 81       	ld	r30, Z
     95e:	ee 23       	and	r30, r30
     960:	41 f0       	breq	.+16     	; 0x972 <next_statement+0x42>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     962:	dc 01       	movw	r26, r24
     964:	ec 93       	st	X, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     966:	e1 54       	subi	r30, 0x41	; 65
     968:	ea 31       	cpi	r30, 0x1A	; 26
     96a:	98 f0       	brcs	.+38     	; 0x992 <next_statement+0x62>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	80 93 00 02 	sts	0x0200, r24
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     976:	c9 01       	movw	r24, r18
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     992:	f9 01       	movw	r30, r18
     994:	80 81       	ld	r24, Z
     996:	91 81       	ldd	r25, Z+1	; 0x01
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
     99e:	8a 01       	movw	r16, r20
     9a0:	08 0f       	add	r16, r24
     9a2:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     9a4:	c8 01       	movw	r24, r16
     9a6:	be 01       	movw	r22, r28
     9a8:	6f 5f       	subi	r22, 0xFF	; 255
     9aa:	7f 4f       	sbci	r23, 0xFF	; 255
     9ac:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <strtod>
     9b0:	d5 01       	movw	r26, r10
     9b2:	6d 93       	st	X+, r22
     9b4:	7d 93       	st	X+, r23
     9b6:	8d 93       	st	X+, r24
     9b8:	9c 93       	st	X, r25
     9ba:	13 97       	sbiw	r26, 0x03	; 3
  if(end == start) { 
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	08 17       	cp	r16, r24
     9c2:	19 07       	cpc	r17, r25
     9c4:	41 f0       	breq	.+16     	; 0x9d6 <next_statement+0xa6>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     9c6:	8c 19       	sub	r24, r12
     9c8:	9d 09       	sbc	r25, r13
     9ca:	f7 01       	movw	r30, r14
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
     9d0:	21 e0       	ldi	r18, 0x01	; 1
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	d0 cf       	rjmp	.-96     	; 0x976 <next_statement+0x46>
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 00 02 	sts	0x0200, r24
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	ca cf       	rjmp	.-108    	; 0x976 <next_statement+0x46>

000009e2 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     9e2:	2f 92       	push	r2
     9e4:	3f 92       	push	r3
     9e6:	4f 92       	push	r4
     9e8:	5f 92       	push	r5
     9ea:	6f 92       	push	r6
     9ec:	7f 92       	push	r7
     9ee:	8f 92       	push	r8
     9f0:	9f 92       	push	r9
     9f2:	af 92       	push	r10
     9f4:	bf 92       	push	r11
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	e3 97       	sbiw	r28, 0x33	; 51
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	4c 01       	movw	r8, r24
  int char_counter = 0;  
     a18:	1a 82       	std	Y+2, r1	; 0x02
     a1a:	19 82       	std	Y+1, r1	; 0x01
  double target[4], offset[4];  
  
  double p = 0, r = 0;
  int int_value;
  
  clear_vector(target);
     a1c:	ce 01       	movw	r24, r28
     a1e:	09 96       	adiw	r24, 0x09	; 9
     a20:	9b ab       	std	Y+51, r25	; 0x33
     a22:	8a ab       	std	Y+50, r24	; 0x32
     a24:	80 e1       	ldi	r24, 0x10	; 16
     a26:	aa a9       	ldd	r26, Y+50	; 0x32
     a28:	bb a9       	ldd	r27, Y+51	; 0x33
     a2a:	e8 2f       	mov	r30, r24
     a2c:	1d 92       	st	X+, r1
     a2e:	ea 95       	dec	r30
     a30:	e9 f7       	brne	.-6      	; 0xa2c <gc_execute_line+0x4a>
  clear_vector(offset);
     a32:	e9 e1       	ldi	r30, 0x19	; 25
     a34:	6e 2e       	mov	r6, r30
     a36:	71 2c       	mov	r7, r1
     a38:	6c 0e       	add	r6, r28
     a3a:	7d 1e       	adc	r7, r29
     a3c:	d3 01       	movw	r26, r6
     a3e:	1d 92       	st	X+, r1
     a40:	8a 95       	dec	r24
     a42:	e9 f7       	brne	.-6      	; 0xa3e <gc_execute_line+0x5c>

  gc.status_code = GCSTATUS_OK;
     a44:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     a48:	f4 01       	movw	r30, r8
     a4a:	80 81       	ld	r24, Z
     a4c:	88 32       	cpi	r24, 0x28	; 40
     a4e:	09 f4       	brne	.+2      	; 0xa52 <gc_execute_line+0x70>
     a50:	a7 c0       	rjmp	.+334    	; 0xba0 <gc_execute_line+0x1be>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     a52:	8f 32       	cpi	r24, 0x2F	; 47
     a54:	09 f4       	brne	.+2      	; 0xa58 <gc_execute_line+0x76>
     a56:	61 c0       	rjmp	.+194    	; 0xb1a <gc_execute_line+0x138>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     a58:	84 32       	cpi	r24, 0x24	; 36
     a5a:	b1 f1       	breq	.+108    	; 0xac8 <gc_execute_line+0xe6>
     a5c:	1e a6       	std	Y+46, r1	; 0x2e
     a5e:	1d a6       	std	Y+45, r1	; 0x2d
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
     a60:	73 e0       	ldi	r23, 0x03	; 3
     a62:	47 2e       	mov	r4, r23
     a64:	51 2c       	mov	r5, r1
     a66:	4c 0e       	add	r4, r28
     a68:	5d 1e       	adc	r5, r29
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     a6a:	22 24       	eor	r2, r2
     a6c:	2a 94       	dec	r2
     a6e:	32 2c       	mov	r3, r2
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     a70:	ee 24       	eor	r14, r14
     a72:	e3 94       	inc	r14

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
  if (line[*char_counter] == 0) {
     a74:	29 81       	ldd	r18, Y+1	; 0x01
     a76:	3a 81       	ldd	r19, Y+2	; 0x02
     a78:	f4 01       	movw	r30, r8
     a7a:	e2 0f       	add	r30, r18
     a7c:	f3 1f       	adc	r31, r19
     a7e:	f0 80       	ld	r15, Z
     a80:	ff 20       	and	r15, r15
     a82:	09 f4       	brne	.+2      	; 0xa86 <gc_execute_line+0xa4>
     a84:	9b c0       	rjmp	.+310    	; 0xbbc <gc_execute_line+0x1da>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
     a86:	8f 2d       	mov	r24, r15
     a88:	81 54       	subi	r24, 0x41	; 65
     a8a:	8a 31       	cpi	r24, 0x1A	; 26
     a8c:	08 f4       	brcc	.+2      	; 0xa90 <gc_execute_line+0xae>
     a8e:	4b c0       	rjmp	.+150    	; 0xb26 <gc_execute_line+0x144>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	80 93 00 02 	sts	0x0200, r24
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     a96:	e3 96       	adiw	r28, 0x33	; 51
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	cf 91       	pop	r28
     aa4:	df 91       	pop	r29
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	7f 90       	pop	r7
     abc:	6f 90       	pop	r6
     abe:	5f 90       	pop	r5
     ac0:	4f 90       	pop	r4
     ac2:	3f 90       	pop	r3
     ac4:	2f 90       	pop	r2
     ac6:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	9a 83       	std	Y+2, r25	; 0x02
     ace:	89 83       	std	Y+1, r24	; 0x01
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     ad0:	84 01       	movw	r16, r8
     ad2:	0f 5f       	subi	r16, 0xFF	; 255
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	d4 01       	movw	r26, r8
     ad8:	11 96       	adiw	r26, 0x01	; 1
     ada:	8c 91       	ld	r24, X
     adc:	88 23       	and	r24, r24
     ade:	09 f4       	brne	.+2      	; 0xae2 <gc_execute_line+0x100>
     ae0:	5d c0       	rjmp	.+186    	; 0xb9c <gc_execute_line+0x1ba>
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
     ae2:	c8 01       	movw	r24, r16
     ae4:	be 01       	movw	r22, r28
     ae6:	6d 5f       	subi	r22, 0xFD	; 253
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <strtod>
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
  if(end == start) { 
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	08 17       	cp	r16, r24
     af8:	19 07       	cpc	r17, r25
     afa:	09 f4       	brne	.+2      	; 0xafe <gc_execute_line+0x11c>
     afc:	f9 c2       	rjmp	.+1522   	; 0x10f0 <gc_execute_line+0x70e>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     afe:	88 19       	sub	r24, r8
     b00:	99 09       	sbc	r25, r9
     b02:	9a 83       	std	Y+2, r25	; 0x02
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	9c 01       	movw	r18, r24
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     b08:	f4 01       	movw	r30, r8
     b0a:	e2 0f       	add	r30, r18
     b0c:	f3 1f       	adc	r31, r19
     b0e:	80 81       	ld	r24, Z
     b10:	8d 33       	cpi	r24, 0x3D	; 61
     b12:	09 f4       	brne	.+2      	; 0xb16 <gc_execute_line+0x134>
     b14:	a4 c2       	rjmp	.+1352   	; 0x105e <gc_execute_line+0x67c>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	be cf       	rjmp	.-132    	; 0xa96 <gc_execute_line+0xb4>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	9a 81       	ldd	r25, Y+2	; 0x02
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	9b cf       	rjmp	.-202    	; 0xa5c <gc_execute_line+0x7a>
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     b26:	c9 01       	movw	r24, r18
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	89 83       	std	Y+1, r24	; 0x01

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
     b2e:	84 01       	movw	r16, r8
     b30:	08 0f       	add	r16, r24
     b32:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     b34:	c8 01       	movw	r24, r16
     b36:	b2 01       	movw	r22, r4
     b38:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <strtod>
  if(end == start) { 
     b3c:	2b 81       	ldd	r18, Y+3	; 0x03
     b3e:	3c 81       	ldd	r19, Y+4	; 0x04
     b40:	02 17       	cp	r16, r18
     b42:	13 07       	cpc	r17, r19
     b44:	79 f1       	breq	.+94     	; 0xba4 <gc_execute_line+0x1c2>
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
     b46:	6d 83       	std	Y+5, r22	; 0x05
     b48:	7e 83       	std	Y+6, r23	; 0x06
     b4a:	8f 83       	std	Y+7, r24	; 0x07
     b4c:	98 87       	std	Y+8, r25	; 0x08
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     b4e:	28 19       	sub	r18, r8
     b50:	39 09       	sbc	r19, r9
     b52:	3a 83       	std	Y+2, r19	; 0x02
     b54:	29 83       	std	Y+1, r18	; 0x01
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     b56:	0e 94 33 26 	call	0x4c66	; 0x4c66 <trunc>
     b5a:	5b 01       	movw	r10, r22
     b5c:	6c 01       	movw	r12, r24
     b5e:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
     b62:	fb 01       	movw	r30, r22

    switch(letter) {
     b64:	87 e4       	ldi	r24, 0x47	; 71
     b66:	f8 16       	cp	r15, r24
     b68:	91 f0       	breq	.+36     	; 0xb8e <gc_execute_line+0x1ac>
     b6a:	8f 15       	cp	r24, r15
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <gc_execute_line+0x18e>
     b6e:	09 c1       	rjmp	.+530    	; 0xd82 <gc_execute_line+0x3a0>
     b70:	ad e4       	ldi	r26, 0x4D	; 77
     b72:	fa 16       	cp	r15, r26
     b74:	09 f4       	brne	.+2      	; 0xb78 <gc_execute_line+0x196>
     b76:	1f c1       	rjmp	.+574    	; 0xdb6 <gc_execute_line+0x3d4>
     b78:	b4 e5       	ldi	r27, 0x54	; 84
     b7a:	fb 16       	cp	r15, r27
     b7c:	09 f0       	breq	.+2      	; 0xb80 <gc_execute_line+0x19e>
     b7e:	04 c1       	rjmp	.+520    	; 0xd88 <gc_execute_line+0x3a6>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	0e 94 a7 23 	call	0x474e	; 0x474e <__fixunssfsi>
     b88:	60 93 22 02 	sts	0x0222, r22
     b8c:	fd c0       	rjmp	.+506    	; 0xd88 <gc_execute_line+0x3a6>
			}

	       break;

      case 'G':
      switch(int_value) {
     b8e:	ef 35       	cpi	r30, 0x5F	; 95
     b90:	f1 05       	cpc	r31, r1
     b92:	60 f0       	brcs	.+24     	; 0xbac <gc_execute_line+0x1ca>
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	80 93 00 02 	sts	0x0200, r24
     b9a:	7d cf       	rjmp	.-262    	; 0xa96 <gc_execute_line+0xb4>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     b9c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <settings_dump>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	79 cf       	rjmp	.-270    	; 0xa96 <gc_execute_line+0xb4>
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 00 02 	sts	0x0200, r24
     baa:	75 cf       	rjmp	.-278    	; 0xa96 <gc_execute_line+0xb4>
			}

	       break;

      case 'G':
      switch(int_value) {
     bac:	ee 58       	subi	r30, 0x8E	; 142
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	05 90       	lpm	r0, Z+
     bb6:	f4 91       	lpm	r31, Z+
     bb8:	e0 2d       	mov	r30, r0
     bba:	19 94       	eijmp
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     bbc:	80 91 00 02 	lds	r24, 0x0200
     bc0:	88 23       	and	r24, r24
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <gc_execute_line+0x1e4>
     bc4:	68 cf       	rjmp	.-304    	; 0xa96 <gc_execute_line+0xb4>

  char_counter = 0;
     bc6:	1a 82       	std	Y+2, r1	; 0x02
     bc8:	19 82       	std	Y+1, r1	; 0x01
  clear_vector(offset);
     bca:	80 e1       	ldi	r24, 0x10	; 16
     bcc:	f3 01       	movw	r30, r6
     bce:	11 92       	st	Z+, r1
     bd0:	8a 95       	dec	r24
     bd2:	e9 f7       	brne	.-6      	; 0xbce <gc_execute_line+0x1ec>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     bd4:	de 01       	movw	r26, r28
     bd6:	19 96       	adiw	r26, 0x09	; 9
     bd8:	e2 e1       	ldi	r30, 0x12	; 18
     bda:	f2 e0       	ldi	r31, 0x02	; 2
     bdc:	80 e1       	ldi	r24, 0x10	; 16
     bde:	01 90       	ld	r0, Z+
     be0:	0d 92       	st	X+, r0
     be2:	81 50       	subi	r24, 0x01	; 1
     be4:	e1 f7       	brne	.-8      	; 0xbde <gc_execute_line+0x1fc>
     be6:	aa 24       	eor	r10, r10
     be8:	1f a6       	std	Y+47, r1	; 0x2f
     bea:	f0 e8       	ldi	r31, 0x80	; 128
     bec:	f8 ab       	std	Y+48, r31	; 0x30
     bee:	8f eb       	ldi	r24, 0xBF	; 191
     bf0:	89 ab       	std	Y+49, r24	; 0x31
     bf2:	0f 2e       	mov	r0, r31
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	2f 2e       	mov	r2, r31
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	3f 2e       	mov	r3, r31
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	4f 2e       	mov	r4, r31
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	5f 2e       	mov	r5, r31
     c04:	f0 2d       	mov	r31, r0
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
     c06:	3e 01       	movw	r6, r28
     c08:	08 94       	sec
     c0a:	61 1c       	adc	r6, r1
     c0c:	71 1c       	adc	r7, r1

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
  if (line[*char_counter] == 0) {
     c0e:	29 81       	ldd	r18, Y+1	; 0x01
     c10:	3a 81       	ldd	r19, Y+2	; 0x02
     c12:	f4 01       	movw	r30, r8
     c14:	e2 0f       	add	r30, r18
     c16:	f3 1f       	adc	r31, r19
     c18:	b0 80       	ld	r11, Z
     c1a:	bb 20       	and	r11, r11
     c1c:	09 f4       	brne	.+2      	; 0xc20 <gc_execute_line+0x23e>
     c1e:	48 c0       	rjmp	.+144    	; 0xcb0 <gc_execute_line+0x2ce>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
     c20:	8b 2d       	mov	r24, r11
     c22:	81 54       	subi	r24, 0x41	; 65
     c24:	8a 31       	cpi	r24, 0x1A	; 26
     c26:	08 f0       	brcs	.+2      	; 0xc2a <gc_execute_line+0x248>
     c28:	33 cf       	rjmp	.-410    	; 0xa90 <gc_execute_line+0xae>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     c2a:	c9 01       	movw	r24, r18
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
     c32:	84 01       	movw	r16, r8
     c34:	08 0f       	add	r16, r24
     c36:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     c38:	c8 01       	movw	r24, r16
     c3a:	be 01       	movw	r22, r28
     c3c:	6d 5f       	subi	r22, 0xFD	; 253
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <strtod>
     c44:	6b 01       	movw	r12, r22
     c46:	7c 01       	movw	r14, r24
  if(end == start) { 
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	9c 81       	ldd	r25, Y+4	; 0x04
     c4c:	08 17       	cp	r16, r24
     c4e:	19 07       	cpc	r17, r25
     c50:	09 f4       	brne	.+2      	; 0xc54 <gc_execute_line+0x272>
     c52:	a8 cf       	rjmp	.-176    	; 0xba4 <gc_execute_line+0x1c2>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     c54:	88 19       	sub	r24, r8
     c56:	99 09       	sbc	r25, r9
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
}

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     c5c:	80 91 03 02 	lds	r24, 0x0203
     c60:	88 23       	and	r24, r24
     c62:	09 f0       	breq	.+2      	; 0xc66 <gc_execute_line+0x284>
     c64:	5e c1       	rjmp	.+700    	; 0xf22 <gc_execute_line+0x540>
     c66:	a7 01       	movw	r20, r14
     c68:	96 01       	movw	r18, r12
                     double *double_ptr)  //!< pointer to double to be read                  
{
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
     c6a:	cd 82       	std	Y+5, r12	; 0x05
     c6c:	de 82       	std	Y+6, r13	; 0x06
     c6e:	ef 82       	std	Y+7, r14	; 0x07
     c70:	f8 86       	std	Y+8, r15	; 0x08

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     c72:	9b e4       	ldi	r25, 0x4B	; 75
     c74:	9b 15       	cp	r25, r11
     c76:	08 f4       	brcc	.+2      	; 0xc7a <gc_execute_line+0x298>
     c78:	47 c1       	rjmp	.+654    	; 0xf08 <gc_execute_line+0x526>
     c7a:	a9 e4       	ldi	r26, 0x49	; 73
     c7c:	ba 16       	cp	r11, r26
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <gc_execute_line+0x2a0>
     c80:	5b c1       	rjmp	.+694    	; 0xf38 <gc_execute_line+0x556>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     c82:	eb 2d       	mov	r30, r11
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	e9 54       	subi	r30, 0x49	; 73
     c88:	f0 40       	sbci	r31, 0x00	; 0
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	e6 0d       	add	r30, r6
     c94:	f7 1d       	adc	r31, r7
     c96:	20 8f       	std	Z+24, r18	; 0x18
     c98:	31 8f       	std	Z+25, r19	; 0x19
     c9a:	42 8f       	std	Z+26, r20	; 0x1a
     c9c:	53 8f       	std	Z+27, r21	; 0x1b

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
  if (line[*char_counter] == 0) {
     c9e:	29 81       	ldd	r18, Y+1	; 0x01
     ca0:	3a 81       	ldd	r19, Y+2	; 0x02
     ca2:	f4 01       	movw	r30, r8
     ca4:	e2 0f       	add	r30, r18
     ca6:	f3 1f       	adc	r31, r19
     ca8:	b0 80       	ld	r11, Z
     caa:	bb 20       	and	r11, r11
     cac:	09 f0       	breq	.+2      	; 0xcb0 <gc_execute_line+0x2ce>
     cae:	b8 cf       	rjmp	.-144    	; 0xc20 <gc_execute_line+0x23e>
      break;      
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     cb0:	80 91 00 02 	lds	r24, 0x0200
     cb4:	88 23       	and	r24, r24
     cb6:	09 f0       	breq	.+2      	; 0xcba <gc_execute_line+0x2d8>
     cb8:	ee ce       	rjmp	.-548    	; 0xa96 <gc_execute_line+0xb4>
    
  // Update spindle state
  if (gc.spindle_direction) {
     cba:	80 91 06 02 	lds	r24, 0x0206
     cbe:	90 91 07 02 	lds	r25, 0x0207
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <gc_execute_line+0x2e6>
     cc6:	c3 c1       	rjmp	.+902    	; 0x104e <gc_execute_line+0x66c>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
     cc8:	40 91 23 02 	lds	r20, 0x0223
     ccc:	50 91 24 02 	lds	r21, 0x0224
     cd0:	66 27       	eor	r22, r22
     cd2:	57 fd       	sbrc	r21, 7
     cd4:	60 95       	com	r22
     cd6:	76 2f       	mov	r23, r22
     cd8:	0e 94 59 19 	call	0x32b2	; 0x32b2 <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
     cdc:	80 91 08 02 	lds	r24, 0x0208
     ce0:	90 91 09 02 	lds	r25, 0x0209
     ce4:	89 2b       	or	r24, r25
     ce6:	09 f4       	brne	.+2      	; 0xcea <gc_execute_line+0x308>
     ce8:	b5 c1       	rjmp	.+874    	; 0x1054 <gc_execute_line+0x672>
  	coolant_flood(TRUE);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
     cf2:	8d a5       	ldd	r24, Y+45	; 0x2d
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <gc_execute_line+0x318>
     cf8:	ee c1       	rjmp	.+988    	; 0x10d6 <gc_execute_line+0x6f4>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <gc_execute_line+0x31e>
     cfe:	d3 c1       	rjmp	.+934    	; 0x10a6 <gc_execute_line+0x6c4>
    case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     d00:	80 91 01 02 	lds	r24, 0x0201
     d04:	88 23       	and	r24, r24
     d06:	09 f0       	breq	.+2      	; 0xd0a <gc_execute_line+0x328>
     d08:	fc c1       	rjmp	.+1016   	; 0x1102 <gc_execute_line+0x720>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <gc_execute_line+0x32a>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <gc_execute_line+0x32c>
     d0e:	69 85       	ldd	r22, Y+9	; 0x09
     d10:	7a 85       	ldd	r23, Y+10	; 0x0a
     d12:	8b 85       	ldd	r24, Y+11	; 0x0b
     d14:	9c 85       	ldd	r25, Y+12	; 0x0c
     d16:	2d 85       	ldd	r18, Y+13	; 0x0d
     d18:	3e 85       	ldd	r19, Y+14	; 0x0e
     d1a:	4f 85       	ldd	r20, Y+15	; 0x0f
     d1c:	58 89       	ldd	r21, Y+16	; 0x10
     d1e:	e9 88       	ldd	r14, Y+17	; 0x11
     d20:	fa 88       	ldd	r15, Y+18	; 0x12
     d22:	0b 89       	ldd	r16, Y+19	; 0x13
     d24:	1c 89       	ldd	r17, Y+20	; 0x14
     d26:	ad 88       	ldd	r10, Y+21	; 0x15
     d28:	be 88       	ldd	r11, Y+22	; 0x16
     d2a:	cf 88       	ldd	r12, Y+23	; 0x17
     d2c:	d8 8c       	ldd	r13, Y+24	; 0x18
     d2e:	60 90 0e 02 	lds	r6, 0x020E
     d32:	70 90 0f 02 	lds	r7, 0x020F
     d36:	80 90 10 02 	lds	r8, 0x0210
     d3a:	90 90 11 02 	lds	r9, 0x0211
     d3e:	ad b7       	in	r26, 0x3d	; 61
     d40:	be b7       	in	r27, 0x3e	; 62
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	6d 92       	st	X+, r6
     d46:	7d 92       	st	X+, r7
     d48:	8d 92       	st	X+, r8
     d4a:	9c 92       	st	X, r9
     d4c:	14 97       	sbiw	r26, 0x04	; 4
     d4e:	16 96       	adiw	r26, 0x06	; 6
     d50:	1c 92       	st	X, r1
     d52:	1e 92       	st	-X, r1
     d54:	15 97       	sbiw	r26, 0x05	; 5
     d56:	0e 94 6d 11 	call	0x22da	; 0x22da <plan_buffer_line>
     d5a:	ed b7       	in	r30, 0x3d	; 61
     d5c:	fe b7       	in	r31, 0x3e	; 62
     d5e:	36 96       	adiw	r30, 0x06	; 6
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	fe bf       	out	0x3e, r31	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
     d6a:	a2 e1       	ldi	r26, 0x12	; 18
     d6c:	b2 e0       	ldi	r27, 0x02	; 2
     d6e:	fe 01       	movw	r30, r28
     d70:	39 96       	adiw	r30, 0x09	; 9
     d72:	80 e1       	ldi	r24, 0x10	; 16
     d74:	01 90       	ld	r0, Z+
     d76:	0d 92       	st	X+, r0
     d78:	81 50       	subi	r24, 0x01	; 1
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <gc_execute_line+0x392>

  return(gc.status_code);
     d7c:	80 91 00 02 	lds	r24, 0x0200
     d80:	8a ce       	rjmp	.-748    	; 0xa96 <gc_execute_line+0xb4>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     d82:	94 e4       	ldi	r25, 0x44	; 68
     d84:	f9 16       	cp	r15, r25
     d86:	31 f0       	breq	.+12     	; 0xd94 <gc_execute_line+0x3b2>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }
    if(gc.status_code) { break; }
     d88:	80 91 00 02 	lds	r24, 0x0200
     d8c:	88 23       	and	r24, r24
     d8e:	09 f4       	brne	.+2      	; 0xd92 <gc_execute_line+0x3b0>
     d90:	71 ce       	rjmp	.-798    	; 0xa74 <gc_execute_line+0x92>
     d92:	81 ce       	rjmp	.-766    	; 0xa96 <gc_execute_line+0xb4>
		  	printBinary( ch );
	      	printPgmString(PSTR("\r\n"));
#endif


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     d94:	4b 99       	sbic	0x09, 3	; 9
     d96:	50 c0       	rjmp	.+160    	; 0xe38 <gc_execute_line+0x456>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     d98:	4a 99       	sbic	0x09, 2	; 9
     d9a:	49 c0       	rjmp	.+146    	; 0xe2e <gc_execute_line+0x44c>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     d9c:	48 99       	sbic	0x09, 0	; 9
     d9e:	42 c0       	rjmp	.+132    	; 0xe24 <gc_execute_line+0x442>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     da0:	49 99       	sbic	0x09, 1	; 9
     da2:	3b c0       	rjmp	.+118    	; 0xe1a <gc_execute_line+0x438>
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
     da4:	04 99       	sbic	0x00, 4	; 0
     da6:	34 c0       	rjmp	.+104    	; 0xe10 <gc_execute_line+0x42e>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     da8:	90 9b       	sbis	0x12, 0	; 18
     daa:	ee cf       	rjmp	.-36     	; 0xd88 <gc_execute_line+0x3a6>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     dac:	8f ec       	ldi	r24, 0xCF	; 207
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
     db4:	e9 cf       	rjmp	.-46     	; 0xd88 <gc_execute_line+0x3a6>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     db6:	e4 30       	cpi	r30, 0x04	; 4
     db8:	f1 05       	cpc	r31, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <gc_execute_line+0x3dc>
     dbc:	4c c0       	rjmp	.+152    	; 0xe56 <gc_execute_line+0x474>
     dbe:	e5 30       	cpi	r30, 0x05	; 5
     dc0:	f1 05       	cpc	r31, r1
     dc2:	6c f4       	brge	.+26     	; 0xdde <gc_execute_line+0x3fc>
     dc4:	e2 30       	cpi	r30, 0x02	; 2
     dc6:	f1 05       	cpc	r31, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <gc_execute_line+0x3ea>
     dca:	41 c0       	rjmp	.+130    	; 0xe4e <gc_execute_line+0x46c>
     dcc:	e3 30       	cpi	r30, 0x03	; 3
     dce:	f1 05       	cpc	r31, r1
     dd0:	0c f0       	brlt	.+2      	; 0xdd4 <gc_execute_line+0x3f2>
     dd2:	46 c0       	rjmp	.+140    	; 0xe60 <gc_execute_line+0x47e>
     dd4:	f7 fd       	sbrc	r31, 7
     dd6:	de ce       	rjmp	.-580    	; 0xb94 <gc_execute_line+0x1b2>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     dd8:	e0 92 05 02 	sts	0x0205, r14
     ddc:	d5 cf       	rjmp	.-86     	; 0xd88 <gc_execute_line+0x3a6>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     dde:	e9 30       	cpi	r30, 0x09	; 9
     de0:	f1 05       	cpc	r31, r1
     de2:	09 f4       	brne	.+2      	; 0xde6 <gc_execute_line+0x404>
     de4:	44 c0       	rjmp	.+136    	; 0xe6e <gc_execute_line+0x48c>
     de6:	ea 30       	cpi	r30, 0x0A	; 10
     de8:	f1 05       	cpc	r31, r1
     dea:	5c f5       	brge	.+86     	; 0xe42 <gc_execute_line+0x460>
     dec:	e5 30       	cpi	r30, 0x05	; 5
     dee:	f1 05       	cpc	r31, r1
     df0:	51 f0       	breq	.+20     	; 0xe06 <gc_execute_line+0x424>
     df2:	38 97       	sbiw	r30, 0x08	; 8
     df4:	09 f0       	breq	.+2      	; 0xdf8 <gc_execute_line+0x416>
     df6:	ce ce       	rjmp	.-612    	; 0xb94 <gc_execute_line+0x1b2>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
     df8:	e1 e0       	ldi	r30, 0x01	; 1
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	f0 93 09 02 	sts	0x0209, r31
     e00:	e0 93 08 02 	sts	0x0208, r30
     e04:	c1 cf       	rjmp	.-126    	; 0xd88 <gc_execute_line+0x3a6>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
     e06:	10 92 07 02 	sts	0x0207, r1
     e0a:	10 92 06 02 	sts	0x0206, r1
     e0e:	bc cf       	rjmp	.-136    	; 0xd88 <gc_execute_line+0x3a6>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));
     e10:	88 ed       	ldi	r24, 0xD8	; 216
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
     e18:	c7 cf       	rjmp	.-114    	; 0xda8 <gc_execute_line+0x3c6>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));
     e1a:	81 ee       	ldi	r24, 0xE1	; 225
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
     e22:	c0 cf       	rjmp	.-128    	; 0xda4 <gc_execute_line+0x3c2>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
     e24:	87 ee       	ldi	r24, 0xE7	; 231
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
     e2c:	b9 cf       	rjmp	.-142    	; 0xda0 <gc_execute_line+0x3be>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));
     e2e:	8d ee       	ldi	r24, 0xED	; 237
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
     e36:	b2 cf       	rjmp	.-156    	; 0xd9c <gc_execute_line+0x3ba>
	      	printPgmString(PSTR("\r\n"));
#endif


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
     e38:	83 ef       	ldi	r24, 0xF3	; 243
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
     e40:	ab cf       	rjmp	.-170    	; 0xd98 <gc_execute_line+0x3b6>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e42:	ee 31       	cpi	r30, 0x1E	; 30
     e44:	f1 05       	cpc	r31, r1
     e46:	19 f0       	breq	.+6      	; 0xe4e <gc_execute_line+0x46c>
     e48:	fc 97       	sbiw	r30, 0x3c	; 60
     e4a:	09 f0       	breq	.+2      	; 0xe4e <gc_execute_line+0x46c>
     e4c:	a3 ce       	rjmp	.-698    	; 0xb94 <gc_execute_line+0x1b2>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	90 93 05 02 	sts	0x0205, r25
     e54:	99 cf       	rjmp	.-206    	; 0xd88 <gc_execute_line+0x3a6>
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     e56:	30 92 07 02 	sts	0x0207, r3
     e5a:	20 92 06 02 	sts	0x0206, r2
     e5e:	94 cf       	rjmp	.-216    	; 0xd88 <gc_execute_line+0x3a6>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     e60:	a1 e0       	ldi	r26, 0x01	; 1
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	b0 93 07 02 	sts	0x0207, r27
     e68:	a0 93 06 02 	sts	0x0206, r26
     e6c:	8d cf       	rjmp	.-230    	; 0xd88 <gc_execute_line+0x3a6>
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
     e6e:	10 92 09 02 	sts	0x0209, r1
     e72:	10 92 08 02 	sts	0x0208, r1
     e76:	88 cf       	rjmp	.-240    	; 0xd88 <gc_execute_line+0x3a6>
			}

	       break;

      case 'G':
      switch(int_value) {
     e78:	e1 e0       	ldi	r30, 0x01	; 1
     e7a:	ed a7       	std	Y+45, r30	; 0x2d
     e7c:	85 cf       	rjmp	.-246    	; 0xd88 <gc_execute_line+0x3a6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     e7e:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     e82:	e0 92 26 02 	sts	0x0226, r14
  gc.plane_axis_2 = axis_2;
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	90 93 27 02 	sts	0x0227, r25
     e8c:	7d cf       	rjmp	.-262    	; 0xd88 <gc_execute_line+0x3a6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     e8e:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     e92:	a2 e0       	ldi	r26, 0x02	; 2
     e94:	a0 93 26 02 	sts	0x0226, r26
  gc.plane_axis_2 = axis_2;
     e98:	e0 92 27 02 	sts	0x0227, r14
     e9c:	75 cf       	rjmp	.-278    	; 0xd88 <gc_execute_line+0x3a6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     e9e:	e0 92 25 02 	sts	0x0225, r14
  gc.plane_axis_1 = axis_1;
     ea2:	b2 e0       	ldi	r27, 0x02	; 2
     ea4:	b0 93 26 02 	sts	0x0226, r27
  gc.plane_axis_2 = axis_2;
     ea8:	10 92 27 02 	sts	0x0227, r1
     eac:	6d cf       	rjmp	.-294    	; 0xd88 <gc_execute_line+0x3a6>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     eae:	e0 92 03 02 	sts	0x0203, r14
     eb2:	6a cf       	rjmp	.-300    	; 0xd88 <gc_execute_line+0x3a6>
        case 21: gc.inches_mode = FALSE; break;
     eb4:	10 92 03 02 	sts	0x0203, r1
     eb8:	67 cf       	rjmp	.-306    	; 0xd88 <gc_execute_line+0x3a6>
			}

	       break;

      case 'G':
      switch(int_value) {
     eba:	b2 e0       	ldi	r27, 0x02	; 2
     ebc:	bd a7       	std	Y+45, r27	; 0x2d
     ebe:	64 cf       	rjmp	.-312    	; 0xd88 <gc_execute_line+0x3a6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     ec0:	e1 e0       	ldi	r30, 0x01	; 1
     ec2:	ee a7       	std	Y+46, r30	; 0x2e
     ec4:	61 cf       	rjmp	.-318    	; 0xd88 <gc_execute_line+0x3a6>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     ec6:	10 92 01 02 	sts	0x0201, r1
     eca:	5e cf       	rjmp	.-324    	; 0xd88 <gc_execute_line+0x3a6>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     ecc:	e0 92 01 02 	sts	0x0201, r14
     ed0:	5b cf       	rjmp	.-330    	; 0xd88 <gc_execute_line+0x3a6>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     ed2:	f2 e0       	ldi	r31, 0x02	; 2
     ed4:	f0 93 01 02 	sts	0x0201, r31
     ed8:	57 cf       	rjmp	.-338    	; 0xd88 <gc_execute_line+0x3a6>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	80 93 01 02 	sts	0x0201, r24
     ee0:	53 cf       	rjmp	.-346    	; 0xd88 <gc_execute_line+0x3a6>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     ee2:	e0 92 02 02 	sts	0x0202, r14
     ee6:	50 cf       	rjmp	.-352    	; 0xd88 <gc_execute_line+0x3a6>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     ee8:	10 92 02 02 	sts	0x0202, r1
     eec:	4d cf       	rjmp	.-358    	; 0xd88 <gc_execute_line+0x3a6>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     eee:	f4 e0       	ldi	r31, 0x04	; 4
     ef0:	f0 93 01 02 	sts	0x0201, r31
     ef4:	49 cf       	rjmp	.-366    	; 0xd88 <gc_execute_line+0x3a6>
        case 90: gc.absolute_mode = TRUE; break;
     ef6:	e0 92 04 02 	sts	0x0204, r14
     efa:	46 cf       	rjmp	.-372    	; 0xd88 <gc_execute_line+0x3a6>
        case 91: gc.absolute_mode = FALSE; break;
     efc:	10 92 04 02 	sts	0x0204, r1
     f00:	43 cf       	rjmp	.-378    	; 0xd88 <gc_execute_line+0x3a6>
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	8d a7       	std	Y+45, r24	; 0x2d
     f06:	40 cf       	rjmp	.-384    	; 0xd88 <gc_execute_line+0x3a6>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     f08:	f3 e5       	ldi	r31, 0x53	; 83
     f0a:	bf 16       	cp	r11, r31
     f0c:	09 f4       	brne	.+2      	; 0xf10 <gc_execute_line+0x52e>
     f0e:	4a c0       	rjmp	.+148    	; 0xfa4 <gc_execute_line+0x5c2>
     f10:	fb 15       	cp	r31, r11
     f12:	18 f1       	brcs	.+70     	; 0xf5a <gc_execute_line+0x578>
     f14:	80 e5       	ldi	r24, 0x50	; 80
     f16:	b8 16       	cp	r11, r24
     f18:	09 f0       	breq	.+2      	; 0xf1c <gc_execute_line+0x53a>
     f1a:	79 ce       	rjmp	.-782    	; 0xc0e <gc_execute_line+0x22c>
     f1c:	16 01       	movw	r2, r12
     f1e:	27 01       	movw	r4, r14
     f20:	76 ce       	rjmp	.-788    	; 0xc0e <gc_execute_line+0x22c>
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
}

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     f22:	c7 01       	movw	r24, r14
     f24:	b6 01       	movw	r22, r12
     f26:	23 e3       	ldi	r18, 0x33	; 51
     f28:	33 e3       	ldi	r19, 0x33	; 51
     f2a:	4b ec       	ldi	r20, 0xCB	; 203
     f2c:	51 e4       	ldi	r21, 0x41	; 65
     f2e:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	99 ce       	rjmp	.-718    	; 0xc6a <gc_execute_line+0x288>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     f38:	b3 e4       	ldi	r27, 0x43	; 67
     f3a:	bb 16       	cp	r11, r27
     f3c:	e1 f1       	breq	.+120    	; 0xfb6 <gc_execute_line+0x5d4>
     f3e:	e6 e4       	ldi	r30, 0x46	; 70
     f40:	be 16       	cp	r11, r30
     f42:	09 f0       	breq	.+2      	; 0xf46 <gc_execute_line+0x564>
     f44:	64 ce       	rjmp	.-824    	; 0xc0e <gc_execute_line+0x22c>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     f46:	80 91 02 02 	lds	r24, 0x0202
     f4a:	88 23       	and	r24, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <gc_execute_line+0x56e>
     f4e:	59 c0       	rjmp	.+178    	; 0x1002 <gc_execute_line+0x620>
     f50:	a2 2e       	mov	r10, r18
     f52:	3f a7       	std	Y+47, r19	; 0x2f
     f54:	48 ab       	std	Y+48, r20	; 0x30
     f56:	59 ab       	std	Y+49, r21	; 0x31
     f58:	5a ce       	rjmp	.-844    	; 0xc0e <gc_execute_line+0x22c>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     f5a:	8b 2d       	mov	r24, r11
     f5c:	88 55       	subi	r24, 0x58	; 88
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	08 f0       	brcs	.+2      	; 0xf64 <gc_execute_line+0x582>
     f62:	55 ce       	rjmp	.-854    	; 0xc0e <gc_execute_line+0x22c>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
     f64:	80 91 04 02 	lds	r24, 0x0204
     f68:	88 23       	and	r24, r24
     f6a:	b9 f5       	brne	.+110    	; 0xfda <gc_execute_line+0x5f8>
     f6c:	9e a5       	ldd	r25, Y+46	; 0x2e
     f6e:	99 23       	and	r25, r25
     f70:	a1 f5       	brne	.+104    	; 0xfda <gc_execute_line+0x5f8>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
     f72:	0b 2d       	mov	r16, r11
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	08 55       	subi	r16, 0x58	; 88
     f78:	10 40       	sbci	r17, 0x00	; 0
     f7a:	00 0f       	add	r16, r16
     f7c:	11 1f       	adc	r17, r17
     f7e:	00 0f       	add	r16, r16
     f80:	11 1f       	adc	r17, r17
     f82:	06 0d       	add	r16, r6
     f84:	17 1d       	adc	r17, r7
     f86:	d8 01       	movw	r26, r16
     f88:	18 96       	adiw	r26, 0x08	; 8
     f8a:	6d 91       	ld	r22, X+
     f8c:	7d 91       	ld	r23, X+
     f8e:	8d 91       	ld	r24, X+
     f90:	9c 91       	ld	r25, X
     f92:	1b 97       	sbiw	r26, 0x0b	; 11
     f94:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
     f98:	f8 01       	movw	r30, r16
     f9a:	60 87       	std	Z+8, r22	; 0x08
     f9c:	71 87       	std	Z+9, r23	; 0x09
     f9e:	82 87       	std	Z+10, r24	; 0x0a
     fa0:	93 87       	std	Z+11, r25	; 0x0b
     fa2:	35 ce       	rjmp	.-918    	; 0xc0e <gc_execute_line+0x22c>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
     fa4:	c7 01       	movw	r24, r14
     fa6:	b6 01       	movw	r22, r12
     fa8:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
     fac:	70 93 24 02 	sts	0x0224, r23
     fb0:	60 93 23 02 	sts	0x0223, r22
     fb4:	2c ce       	rjmp	.-936    	; 0xc0e <gc_execute_line+0x22c>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
     fb6:	80 91 04 02 	lds	r24, 0x0204
     fba:	88 23       	and	r24, r24
     fbc:	e9 f4       	brne	.+58     	; 0xff8 <gc_execute_line+0x616>
     fbe:	fe a5       	ldd	r31, Y+46	; 0x2e
     fc0:	ff 23       	and	r31, r31
     fc2:	d1 f4       	brne	.+52     	; 0xff8 <gc_execute_line+0x616>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
     fc4:	6d 89       	ldd	r22, Y+21	; 0x15
     fc6:	7e 89       	ldd	r23, Y+22	; 0x16
     fc8:	8f 89       	ldd	r24, Y+23	; 0x17
     fca:	98 8d       	ldd	r25, Y+24	; 0x18
     fcc:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
     fd0:	6d 8b       	std	Y+21, r22	; 0x15
     fd2:	7e 8b       	std	Y+22, r23	; 0x16
     fd4:	8f 8b       	std	Y+23, r24	; 0x17
     fd6:	98 8f       	std	Y+24, r25	; 0x18
     fd8:	1a ce       	rjmp	.-972    	; 0xc0e <gc_execute_line+0x22c>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
     fda:	eb 2d       	mov	r30, r11
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	e8 55       	subi	r30, 0x58	; 88
     fe0:	f0 40       	sbci	r31, 0x00	; 0
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	e6 0d       	add	r30, r6
     fec:	f7 1d       	adc	r31, r7
     fee:	20 87       	std	Z+8, r18	; 0x08
     ff0:	31 87       	std	Z+9, r19	; 0x09
     ff2:	42 87       	std	Z+10, r20	; 0x0a
     ff4:	53 87       	std	Z+11, r21	; 0x0b
     ff6:	0b ce       	rjmp	.-1002   	; 0xc0e <gc_execute_line+0x22c>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
     ff8:	2d 8b       	std	Y+21, r18	; 0x15
     ffa:	3e 8b       	std	Y+22, r19	; 0x16
     ffc:	4f 8b       	std	Y+23, r20	; 0x17
     ffe:	58 8f       	std	Y+24, r21	; 0x18
    1000:	06 ce       	rjmp	.-1012   	; 0xc0e <gc_execute_line+0x22c>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    1002:	80 91 01 02 	lds	r24, 0x0201
    1006:	88 23       	and	r24, r24
    1008:	89 f4       	brne	.+34     	; 0x102c <gc_execute_line+0x64a>
          gc.seek_rate = unit_converted_value/60;
    100a:	ca 01       	movw	r24, r20
    100c:	b9 01       	movw	r22, r18
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e7       	ldi	r20, 0x70	; 112
    1014:	52 e4       	ldi	r21, 0x42	; 66
    1016:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    101a:	60 93 0e 02 	sts	0x020E, r22
    101e:	70 93 0f 02 	sts	0x020F, r23
    1022:	80 93 10 02 	sts	0x0210, r24
    1026:	90 93 11 02 	sts	0x0211, r25
    102a:	f1 cd       	rjmp	.-1054   	; 0xc0e <gc_execute_line+0x22c>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
    102c:	ca 01       	movw	r24, r20
    102e:	b9 01       	movw	r22, r18
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e7       	ldi	r20, 0x70	; 112
    1036:	52 e4       	ldi	r21, 0x42	; 66
    1038:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    103c:	60 93 0a 02 	sts	0x020A, r22
    1040:	70 93 0b 02 	sts	0x020B, r23
    1044:	80 93 0c 02 	sts	0x020C, r24
    1048:	90 93 0d 02 	sts	0x020D, r25
    104c:	e0 cd       	rjmp	.-1088   	; 0xc0e <gc_execute_line+0x22c>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    104e:	0e 94 69 19 	call	0x32d2	; 0x32d2 <spindle_stop>
    1052:	44 ce       	rjmp	.-888    	; 0xcdc <gc_execute_line+0x2fa>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <coolant_flood>
    105c:	4a ce       	rjmp	.-876    	; 0xcf2 <gc_execute_line+0x310>
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    105e:	2f 5f       	subi	r18, 0xFF	; 255
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	3a 83       	std	Y+2, r19	; 0x02
    1064:	29 83       	std	Y+1, r18	; 0x01
    read_double(line, &char_counter, &value);
    1066:	c4 01       	movw	r24, r8
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	ae 01       	movw	r20, r28
    1070:	4b 5f       	subi	r20, 0xFB	; 251
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    1078:	e9 81       	ldd	r30, Y+1	; 0x01
    107a:	fa 81       	ldd	r31, Y+2	; 0x02
    107c:	e8 0d       	add	r30, r8
    107e:	f9 1d       	adc	r31, r9
    1080:	80 81       	ld	r24, Z
    1082:	88 23       	and	r24, r24
    1084:	09 f0       	breq	.+2      	; 0x1088 <gc_execute_line+0x6a6>
    1086:	47 cd       	rjmp	.-1394   	; 0xb16 <gc_execute_line+0x134>
    settings_store_setting(p, value);
    1088:	c7 01       	movw	r24, r14
    108a:	b6 01       	movw	r22, r12
    108c:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	4d 81       	ldd	r20, Y+5	; 0x05
    1096:	5e 81       	ldd	r21, Y+6	; 0x06
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	0e 94 14 18 	call	0x3028	; 0x3028 <settings_store_setting>
    return(gc.status_code);
    10a0:	80 91 00 02 	lds	r24, 0x0200
    10a4:	f8 cc       	rjmp	.-1552   	; 0xa96 <gc_execute_line+0xb4>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	49 f1       	breq	.+82     	; 0x10fc <gc_execute_line+0x71a>
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <gc_execute_line+0x6ce>
    10ae:	5d ce       	rjmp	.-838    	; 0xd6a <gc_execute_line+0x388>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    10b0:	69 85       	ldd	r22, Y+9	; 0x09
    10b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    10ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    10bc:	4f 85       	ldd	r20, Y+15	; 0x0f
    10be:	58 89       	ldd	r21, Y+16	; 0x10
    10c0:	e9 88       	ldd	r14, Y+17	; 0x11
    10c2:	fa 88       	ldd	r15, Y+18	; 0x12
    10c4:	0b 89       	ldd	r16, Y+19	; 0x13
    10c6:	1c 89       	ldd	r17, Y+20	; 0x14
    10c8:	ad 88       	ldd	r10, Y+21	; 0x15
    10ca:	be 88       	ldd	r11, Y+22	; 0x16
    10cc:	cf 88       	ldd	r12, Y+23	; 0x17
    10ce:	d8 8c       	ldd	r13, Y+24	; 0x18
    10d0:	0e 94 24 0a 	call	0x1448	; 0x1448 <plan_set_current>
    10d4:	4a ce       	rjmp	.-876    	; 0xd6a <gc_execute_line+0x388>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    10d6:	c2 01       	movw	r24, r4
    10d8:	b1 01       	movw	r22, r2
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a e7       	ldi	r20, 0x7A	; 122
    10e0:	54 e4       	ldi	r21, 0x44	; 68
    10e2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    10e6:	0e 94 a7 23 	call	0x474e	; 0x474e <__fixunssfsi>
    10ea:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <mc_dwell>
    10ee:	3d ce       	rjmp	.-902    	; 0xd6a <gc_execute_line+0x388>
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 00 02 	sts	0x0200, r24
    10f6:	29 81       	ldd	r18, Y+1	; 0x01
    10f8:	3a 81       	ldd	r19, Y+2	; 0x02
    10fa:	06 cd       	rjmp	.-1524   	; 0xb08 <gc_execute_line+0x126>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    10fc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <mc_go_home>
    1100:	34 ce       	rjmp	.-920    	; 0xd6a <gc_execute_line+0x388>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	09 f0       	breq	.+2      	; 0x1108 <gc_execute_line+0x726>
    1106:	31 ce       	rjmp	.-926    	; 0xd6a <gc_execute_line+0x388>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    1108:	89 85       	ldd	r24, Y+9	; 0x09
    110a:	9a 85       	ldd	r25, Y+10	; 0x0a
    110c:	ab 85       	ldd	r26, Y+11	; 0x0b
    110e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1110:	89 a7       	std	Y+41, r24	; 0x29
    1112:	9a a7       	std	Y+42, r25	; 0x2a
    1114:	ab a7       	std	Y+43, r26	; 0x2b
    1116:	bc a7       	std	Y+44, r27	; 0x2c
    1118:	2d 84       	ldd	r2, Y+13	; 0x0d
    111a:	3e 84       	ldd	r3, Y+14	; 0x0e
    111c:	4f 84       	ldd	r4, Y+15	; 0x0f
    111e:	58 88       	ldd	r5, Y+16	; 0x10
    1120:	e9 88       	ldd	r14, Y+17	; 0x11
    1122:	fa 88       	ldd	r15, Y+18	; 0x12
    1124:	0b 89       	ldd	r16, Y+19	; 0x13
    1126:	1c 89       	ldd	r17, Y+20	; 0x14
    1128:	6d 88       	ldd	r6, Y+21	; 0x15
    112a:	7e 88       	ldd	r7, Y+22	; 0x16
    112c:	8f 88       	ldd	r8, Y+23	; 0x17
    112e:	98 8c       	ldd	r9, Y+24	; 0x18
    1130:	60 91 02 02 	lds	r22, 0x0202
    1134:	66 23       	and	r22, r22
    1136:	59 f4       	brne	.+22     	; 0x114e <gc_execute_line+0x76c>
    1138:	a0 90 0a 02 	lds	r10, 0x020A
    113c:	90 91 0b 02 	lds	r25, 0x020B
    1140:	9f a7       	std	Y+47, r25	; 0x2f
    1142:	a0 91 0c 02 	lds	r26, 0x020C
    1146:	a8 ab       	std	Y+48, r26	; 0x30
    1148:	b0 91 0d 02 	lds	r27, 0x020D
    114c:	b9 ab       	std	Y+49, r27	; 0x31
    114e:	00 d0       	rcall	.+0      	; 0x1150 <gc_execute_line+0x76e>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <gc_execute_line+0x770>
    1152:	cd b6       	in	r12, 0x3d	; 61
    1154:	de b6       	in	r13, 0x3e	; 62
    1156:	08 94       	sec
    1158:	c1 1c       	adc	r12, r1
    115a:	d1 1c       	adc	r13, r1
    115c:	2a 2d       	mov	r18, r10
    115e:	3f a5       	ldd	r19, Y+47	; 0x2f
    1160:	48 a9       	ldd	r20, Y+48	; 0x30
    1162:	59 a9       	ldd	r21, Y+49	; 0x31
    1164:	c9 01       	movw	r24, r18
    1166:	da 01       	movw	r26, r20
    1168:	ed b7       	in	r30, 0x3d	; 61
    116a:	fe b7       	in	r31, 0x3e	; 62
    116c:	81 83       	std	Z+1, r24	; 0x01
    116e:	92 83       	std	Z+2, r25	; 0x02
    1170:	a3 83       	std	Z+3, r26	; 0x03
    1172:	b4 83       	std	Z+4, r27	; 0x04
    1174:	d6 01       	movw	r26, r12
    1176:	14 96       	adiw	r26, 0x04	; 4
    1178:	6c 93       	st	X, r22
    117a:	14 97       	sbiw	r26, 0x04	; 4
    117c:	15 96       	adiw	r26, 0x05	; 5
    117e:	1c 92       	st	X, r1
    1180:	69 a5       	ldd	r22, Y+41	; 0x29
    1182:	7a a5       	ldd	r23, Y+42	; 0x2a
    1184:	8b a5       	ldd	r24, Y+43	; 0x2b
    1186:	9c a5       	ldd	r25, Y+44	; 0x2c
    1188:	a2 01       	movw	r20, r4
    118a:	91 01       	movw	r18, r2
    118c:	64 01       	movw	r12, r8
    118e:	53 01       	movw	r10, r6
    1190:	0e 94 6d 11 	call	0x22da	; 0x22da <plan_buffer_line>
    1194:	ed b7       	in	r30, 0x3d	; 61
    1196:	fe b7       	in	r31, 0x3e	; 62
    1198:	36 96       	adiw	r30, 0x06	; 6
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	fe bf       	out	0x3e, r31	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	ed bf       	out	0x3d, r30	; 61
    11a4:	e2 cd       	rjmp	.-1084   	; 0xd6a <gc_execute_line+0x388>

000011a6 <main>:
// #endif

int main(void)
{
	int i;
  sp_init();        
    11a6:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <sp_init>
  settings_init();  
    11aa:	0e 94 9d 18 	call	0x313a	; 0x313a <settings_init>
  plan_init();      
    11ae:	0e 94 14 0c 	call	0x1828	; 0x1828 <plan_init>
  st_init();        
    11b2:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <st_init>
  limits_init();
    11b6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <limits_init>
  spindle_init();   
    11ba:	0e 94 52 19 	call	0x32a4	; 0x32a4 <spindle_init>
  coolant_init();
    11be:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <coolant_init>
  gc_init();
    11c2:	0e 94 14 04 	call	0x828	; 0x828 <gc_init>
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("[NSL] pickoBear ok\n\r"));
    11c6:	89 ef       	ldi	r24, 0xF9	; 249
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>

  for(;;){
    sleep_mode(); // Wait for it ...
    11ce:	83 b7       	in	r24, 0x33	; 51
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	83 bf       	out	0x33, r24	; 51
    11d4:	88 95       	sleep
    11d6:	83 b7       	in	r24, 0x33	; 51
    11d8:	8e 7f       	andi	r24, 0xFE	; 254
    11da:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
    11dc:	0e 94 04 16 	call	0x2c08	; 0x2c08 <sp_process>
    11e0:	f6 cf       	rjmp	.-20     	; 0x11ce <main+0x28>

000011e2 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    11e2:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <st_go_home>
}
    11e6:	08 95       	ret

000011e8 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	7b 01       	movw	r14, r22
    11fa:	8c 01       	movw	r16, r24
  st_synchronize();
    11fc:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <st_synchronize>
  _delay_ms(milliseconds);
    1200:	c8 01       	movw	r24, r16
    1202:	b7 01       	movw	r22, r14
    1204:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatunsisf>
    1208:	5b 01       	movw	r10, r22
    120a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	4a e7       	ldi	r20, 0x7A	; 122
    1212:	55 e4       	ldi	r21, 0x45	; 69
    1214:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1218:	7b 01       	movw	r14, r22
    121a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    1228:	88 23       	and	r24, r24
    122a:	7c f1       	brlt	.+94     	; 0x128a <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    122c:	c8 01       	movw	r24, r16
    122e:	b7 01       	movw	r22, r14
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	3f ef       	ldi	r19, 0xFF	; 255
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	57 e4       	ldi	r21, 0x47	; 71
    1238:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
    123c:	18 16       	cp	r1, r24
    123e:	ac f4       	brge	.+42     	; 0x126a <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1240:	c6 01       	movw	r24, r12
    1242:	b5 01       	movw	r22, r10
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e2       	ldi	r20, 0x20	; 32
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1250:	0e 94 a7 23 	call	0x474e	; 0x474e <__fixunssfsi>
    1254:	cb 01       	movw	r24, r22
		while(__ticks)
    1256:	67 2b       	or	r22, r23
    1258:	79 f0       	breq	.+30     	; 0x1278 <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    125a:	20 e9       	ldi	r18, 0x90	; 144
    125c:	31 e0       	ldi	r19, 0x01	; 1
    125e:	f9 01       	movw	r30, r18
    1260:	31 97       	sbiw	r30, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1266:	d9 f7       	brne	.-10     	; 0x125e <mc_dwell+0x76>
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	c8 01       	movw	r24, r16
    126c:	b7 01       	movw	r22, r14
    126e:	0e 94 a7 23 	call	0x474e	; 0x474e <__fixunssfsi>
    1272:	cb 01       	movw	r24, r22
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <mc_dwell+0x8c>
}
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	bf 90       	pop	r11
    1286:	af 90       	pop	r10
    1288:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	f1 cf       	rjmp	.-30     	; 0x1272 <mc_dwell+0x8a>

00001290 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    1290:	fc 01       	movw	r30, r24
    1292:	60 91 2a 05 	lds	r22, 0x052A
    1296:	70 91 2b 05 	lds	r23, 0x052B
    129a:	80 91 2c 05 	lds	r24, 0x052C
    129e:	90 91 2d 05 	lds	r25, 0x052D
    12a2:	21 a5       	ldd	r18, Z+41	; 0x29
    12a4:	32 a5       	ldd	r19, Z+42	; 0x2a
    12a6:	43 a5       	ldd	r20, Z+43	; 0x2b
    12a8:	54 a5       	ldd	r21, Z+44	; 0x2c
    12aa:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    12ae:	08 95       	ret

000012b0 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    12b0:	80 91 a9 03 	lds	r24, 0x03A9
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	08 95       	ret

000012b8 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    12b8:	20 91 95 03 	lds	r18, 0x0395
    12bc:	30 91 96 03 	lds	r19, 0x0396
    12c0:	80 91 97 03 	lds	r24, 0x0397
    12c4:	90 91 98 03 	lds	r25, 0x0398
    12c8:	28 17       	cp	r18, r24
    12ca:	39 07       	cpc	r19, r25
    12cc:	69 f0       	breq	.+26     	; 0x12e8 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    12ce:	80 91 97 03 	lds	r24, 0x0397
    12d2:	90 91 98 03 	lds	r25, 0x0398
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	65 e0       	ldi	r22, 0x05	; 5
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
    12e0:	90 93 98 03 	sts	0x0398, r25
    12e4:	80 93 97 03 	sts	0x0397, r24
    12e8:	08 95       	ret

000012ea <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    12ea:	20 91 95 03 	lds	r18, 0x0395
    12ee:	30 91 96 03 	lds	r19, 0x0396
    12f2:	80 91 97 03 	lds	r24, 0x0397
    12f6:	90 91 98 03 	lds	r25, 0x0398
    12fa:	28 17       	cp	r18, r24
    12fc:	39 07       	cpc	r19, r25
    12fe:	d1 f0       	breq	.+52     	; 0x1334 <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    1300:	20 91 97 03 	lds	r18, 0x0397
    1304:	30 91 98 03 	lds	r19, 0x0398
    1308:	c9 01       	movw	r24, r18
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	ac 01       	movw	r20, r24
    1318:	44 0f       	add	r20, r20
    131a:	55 1f       	adc	r21, r21
    131c:	44 0f       	add	r20, r20
    131e:	55 1f       	adc	r21, r21
    1320:	44 0f       	add	r20, r20
    1322:	55 1f       	adc	r21, r21
    1324:	48 0f       	add	r20, r24
    1326:	59 1f       	adc	r21, r25
    1328:	42 0f       	add	r20, r18
    132a:	53 1f       	adc	r21, r19
    132c:	48 5d       	subi	r20, 0xD8	; 216
    132e:	5d 4f       	sbci	r21, 0xFD	; 253
}
    1330:	ca 01       	movw	r24, r20
    1332:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    1338:	ca 01       	movw	r24, r20
    133a:	08 95       	ret

0000133c <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    133c:	4f 92       	push	r4
    133e:	5f 92       	push	r5
    1340:	6f 92       	push	r6
    1342:	7f 92       	push	r7
    1344:	8f 92       	push	r8
    1346:	9f 92       	push	r9
    1348:	af 92       	push	r10
    134a:	bf 92       	push	r11
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	ec 01       	movw	r28, r24
    135e:	4b 01       	movw	r8, r22
  if(!current) { return; }
    1360:	61 15       	cp	r22, r1
    1362:	71 05       	cpc	r23, r1
    1364:	99 f0       	breq	.+38     	; 0x138c <planner_forward_pass_kernel+0x50>
  if(previous) {
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	89 f0       	breq	.+34     	; 0x138c <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    136a:	e9 a8       	ldd	r14, Y+49	; 0x31
    136c:	fa a8       	ldd	r15, Y+50	; 0x32
    136e:	0b a9       	ldd	r16, Y+51	; 0x33
    1370:	1c a9       	ldd	r17, Y+52	; 0x34
    1372:	fb 01       	movw	r30, r22
    1374:	41 a8       	ldd	r4, Z+49	; 0x31
    1376:	52 a8       	ldd	r5, Z+50	; 0x32
    1378:	63 a8       	ldd	r6, Z+51	; 0x33
    137a:	74 a8       	ldd	r7, Z+52	; 0x34
    137c:	c8 01       	movw	r24, r16
    137e:	b7 01       	movw	r22, r14
    1380:	a3 01       	movw	r20, r6
    1382:	92 01       	movw	r18, r4
    1384:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    1388:	88 23       	and	r24, r24
    138a:	8c f0       	brlt	.+34     	; 0x13ae <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	9f 90       	pop	r9
    13a2:	8f 90       	pop	r8
    13a4:	7f 90       	pop	r7
    13a6:	6f 90       	pop	r6
    13a8:	5f 90       	pop	r5
    13aa:	4f 90       	pop	r4
    13ac:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    13ae:	f4 01       	movw	r30, r8
    13b0:	a1 a4       	ldd	r10, Z+41	; 0x29
    13b2:	b2 a4       	ldd	r11, Z+42	; 0x2a
    13b4:	c3 a4       	ldd	r12, Z+43	; 0x2b
    13b6:	d4 a4       	ldd	r13, Z+44	; 0x2c
    13b8:	c8 01       	movw	r24, r16
    13ba:	b7 01       	movw	r22, r14
    13bc:	a6 01       	movw	r20, r12
    13be:	95 01       	movw	r18, r10
    13c0:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    13c8:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    13cc:	7b 01       	movw	r14, r22
    13ce:	8c 01       	movw	r16, r24
    13d0:	20 91 26 05 	lds	r18, 0x0526
    13d4:	30 91 27 05 	lds	r19, 0x0527
    13d8:	40 91 28 05 	lds	r20, 0x0528
    13dc:	50 91 29 05 	lds	r21, 0x0529
    13e0:	50 58       	subi	r21, 0x80	; 128
    13e2:	ca 01       	movw	r24, r20
    13e4:	b9 01       	movw	r22, r18
    13e6:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e7       	ldi	r20, 0x70	; 112
    13f0:	52 e4       	ldi	r21, 0x42	; 66
    13f2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e7       	ldi	r20, 0x70	; 112
    13fc:	52 ec       	ldi	r21, 0xC2	; 194
    13fe:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1402:	2d a5       	ldd	r18, Y+45	; 0x2d
    1404:	3e a5       	ldd	r19, Y+46	; 0x2e
    1406:	4f a5       	ldd	r20, Y+47	; 0x2f
    1408:	58 a9       	ldd	r21, Y+48	; 0x30
    140a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    140e:	9b 01       	movw	r18, r22
    1410:	ac 01       	movw	r20, r24
    1412:	c8 01       	movw	r24, r16
    1414:	b7 01       	movw	r22, r14
    1416:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    141a:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    141e:	a6 01       	movw	r20, r12
    1420:	95 01       	movw	r18, r10
    1422:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    1426:	7b 01       	movw	r14, r22
    1428:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    142a:	c3 01       	movw	r24, r6
    142c:	b2 01       	movw	r22, r4
    142e:	a8 01       	movw	r20, r16
    1430:	97 01       	movw	r18, r14
    1432:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
    1436:	18 16       	cp	r1, r24
    1438:	0c f0       	brlt	.+2      	; 0x143c <planner_forward_pass_kernel+0x100>
    143a:	a8 cf       	rjmp	.-176    	; 0x138c <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    143c:	f4 01       	movw	r30, r8
    143e:	e1 aa       	std	Z+49, r14	; 0x31
    1440:	f2 aa       	std	Z+50, r15	; 0x32
    1442:	03 ab       	std	Z+51, r16	; 0x33
    1444:	14 ab       	std	Z+52, r17	; 0x34
    1446:	a2 cf       	rjmp	.-188    	; 0x138c <planner_forward_pass_kernel+0x50>

00001448 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1448:	2f 92       	push	r2
    144a:	3f 92       	push	r3
    144c:	4f 92       	push	r4
    144e:	5f 92       	push	r5
    1450:	6f 92       	push	r6
    1452:	7f 92       	push	r7
    1454:	8f 92       	push	r8
    1456:	9f 92       	push	r9
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	3b 01       	movw	r6, r22
    146a:	4c 01       	movw	r8, r24
    146c:	19 01       	movw	r2, r18
    146e:	2a 01       	movw	r4, r20
	st_synchronize();
    1470:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1474:	c4 01       	movw	r24, r8
    1476:	b3 01       	movw	r22, r6
    1478:	20 91 08 05 	lds	r18, 0x0508
    147c:	30 91 09 05 	lds	r19, 0x0509
    1480:	40 91 0a 05 	lds	r20, 0x050A
    1484:	50 91 0b 05 	lds	r21, 0x050B
    1488:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    148c:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    1490:	e9 e9       	ldi	r30, 0x99	; 153
    1492:	8e 2e       	mov	r8, r30
    1494:	e3 e0       	ldi	r30, 0x03	; 3
    1496:	9e 2e       	mov	r9, r30
    1498:	60 93 99 03 	sts	0x0399, r22
    149c:	70 93 9a 03 	sts	0x039A, r23
    14a0:	80 93 9b 03 	sts	0x039B, r24
    14a4:	90 93 9c 03 	sts	0x039C, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    14a8:	c2 01       	movw	r24, r4
    14aa:	b1 01       	movw	r22, r2
    14ac:	20 91 0c 05 	lds	r18, 0x050C
    14b0:	30 91 0d 05 	lds	r19, 0x050D
    14b4:	40 91 0e 05 	lds	r20, 0x050E
    14b8:	50 91 0f 05 	lds	r21, 0x050F
    14bc:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    14c0:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    14c4:	f4 01       	movw	r30, r8
    14c6:	34 96       	adiw	r30, 0x04	; 4
    14c8:	60 93 9d 03 	sts	0x039D, r22
    14cc:	71 83       	std	Z+1, r23	; 0x01
    14ce:	82 83       	std	Z+2, r24	; 0x02
    14d0:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    14d2:	c8 01       	movw	r24, r16
    14d4:	b7 01       	movw	r22, r14
    14d6:	20 91 10 05 	lds	r18, 0x0510
    14da:	30 91 11 05 	lds	r19, 0x0511
    14de:	40 91 12 05 	lds	r20, 0x0512
    14e2:	50 91 13 05 	lds	r21, 0x0513
    14e6:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    14ea:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    14ee:	f4 01       	movw	r30, r8
    14f0:	38 96       	adiw	r30, 0x08	; 8
    14f2:	60 93 a1 03 	sts	0x03A1, r22
    14f6:	71 83       	std	Z+1, r23	; 0x01
    14f8:	82 83       	std	Z+2, r24	; 0x02
    14fa:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    14fc:	c6 01       	movw	r24, r12
    14fe:	b5 01       	movw	r22, r10
    1500:	20 91 14 05 	lds	r18, 0x0514
    1504:	30 91 15 05 	lds	r19, 0x0515
    1508:	40 91 16 05 	lds	r20, 0x0516
    150c:	50 91 17 05 	lds	r21, 0x0517
    1510:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1514:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    1518:	2c e0       	ldi	r18, 0x0C	; 12
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	82 0e       	add	r8, r18
    151e:	93 1e       	adc	r9, r19
    1520:	60 93 a5 03 	sts	0x03A5, r22
    1524:	f4 01       	movw	r30, r8
    1526:	71 83       	std	Z+1, r23	; 0x01
    1528:	82 83       	std	Z+2, r24	; 0x02
    152a:	93 83       	std	Z+3, r25	; 0x03
}
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	5f 90       	pop	r5
    1546:	4f 90       	pop	r4
    1548:	3f 90       	pop	r3
    154a:	2f 90       	pop	r2
    154c:	08 95       	ret

0000154e <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	80 91 a9 03 	lds	r24, 0x03A9
    155a:	81 11       	cpse	r24, r1
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	20 97       	sbiw	r28, 0x00	; 0
    1562:	09 f0       	breq	.+2      	; 0x1566 <plan_set_acceleration_manager_enabled+0x18>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	98 17       	cp	r25, r24
    1568:	31 f0       	breq	.+12     	; 0x1576 <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    156a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    156e:	10 92 a9 03 	sts	0x03A9, r1
    1572:	cd 2b       	or	r28, r29
    1574:	19 f4       	brne	.+6      	; 0x157c <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 a9 03 	sts	0x03A9, r24
  }
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	08 95       	ret

00001588 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1588:	2f 92       	push	r2
    158a:	3f 92       	push	r3
    158c:	4f 92       	push	r4
    158e:	5f 92       	push	r5
    1590:	6f 92       	push	r6
    1592:	7f 92       	push	r7
    1594:	8f 92       	push	r8
    1596:	9f 92       	push	r9
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	cf 92       	push	r12
    159e:	df 92       	push	r13
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	62 97       	sbiw	r28, 0x12	; 18
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	9a 8b       	std	Y+18, r25	; 0x12
    15be:	89 8b       	std	Y+17, r24	; 0x11
    15c0:	6a 01       	movw	r12, r20
    15c2:	7b 01       	movw	r14, r22
    15c4:	18 01       	movw	r2, r16
    15c6:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    15c8:	fc 01       	movw	r30, r24
    15ca:	65 89       	ldd	r22, Z+21	; 0x15
    15cc:	76 89       	ldd	r23, Z+22	; 0x16
    15ce:	87 89       	ldd	r24, Z+23	; 0x17
    15d0:	90 8d       	ldd	r25, Z+24	; 0x18
    15d2:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatunsisf>
    15d6:	3b 01       	movw	r6, r22
    15d8:	4c 01       	movw	r8, r24
    15da:	a7 01       	movw	r20, r14
    15dc:	96 01       	movw	r18, r12
    15de:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    15e2:	0e 94 23 23 	call	0x4646	; 0x4646 <ceil>
    15e6:	0e 94 a7 23 	call	0x474e	; 0x474e <__fixunssfsi>
    15ea:	7b 01       	movw	r14, r22
    15ec:	8c 01       	movw	r16, r24
    15ee:	e9 89       	ldd	r30, Y+17	; 0x11
    15f0:	fa 89       	ldd	r31, Y+18	; 0x12
    15f2:	65 ab       	std	Z+53, r22	; 0x35
    15f4:	76 ab       	std	Z+54, r23	; 0x36
    15f6:	87 ab       	std	Z+55, r24	; 0x37
    15f8:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    15fa:	c4 01       	movw	r24, r8
    15fc:	b3 01       	movw	r22, r6
    15fe:	a2 01       	movw	r20, r4
    1600:	91 01       	movw	r18, r2
    1602:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1606:	0e 94 23 23 	call	0x4646	; 0x4646 <ceil>
    160a:	0e 94 a7 23 	call	0x474e	; 0x474e <__fixunssfsi>
    160e:	1b 01       	movw	r2, r22
    1610:	2c 01       	movw	r4, r24
    1612:	e9 89       	ldd	r30, Y+17	; 0x11
    1614:	fa 89       	ldd	r31, Y+18	; 0x12
    1616:	61 af       	std	Z+57, r22	; 0x39
    1618:	72 af       	std	Z+58, r23	; 0x3a
    161a:	83 af       	std	Z+59, r24	; 0x3b
    161c:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    161e:	fd 96       	adiw	r30, 0x3d	; 61
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	fd 97       	sbiw	r30, 0x3d	; 61
    162a:	fa 8b       	std	Y+18, r31	; 0x12
    162c:	e9 8b       	std	Y+17, r30	; 0x11
    162e:	28 e2       	ldi	r18, 0x28	; 40
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__mulsi3>
    163a:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e7       	ldi	r20, 0x70	; 112
    1644:	52 e4       	ldi	r21, 0x42	; 66
    1646:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    164a:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
    164e:	5b 01       	movw	r10, r22
    1650:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1652:	c8 01       	movw	r24, r16
    1654:	b7 01       	movw	r22, r14
    1656:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatunsisf>
    165a:	7b 01       	movw	r14, r22
    165c:	8c 01       	movw	r16, r24
    165e:	c6 01       	movw	r24, r12
    1660:	b5 01       	movw	r22, r10
    1662:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    1666:	6d 83       	std	Y+5, r22	; 0x05
    1668:	7e 83       	std	Y+6, r23	; 0x06
    166a:	8f 83       	std	Y+7, r24	; 0x07
    166c:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    166e:	c4 01       	movw	r24, r8
    1670:	b3 01       	movw	r22, r6
    1672:	a4 01       	movw	r20, r8
    1674:	93 01       	movw	r18, r6
    1676:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    167a:	3b 01       	movw	r6, r22
    167c:	4c 01       	movw	r8, r24
    167e:	c8 01       	movw	r24, r16
    1680:	b7 01       	movw	r22, r14
    1682:	a8 01       	movw	r20, r16
    1684:	97 01       	movw	r18, r14
    1686:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    168a:	69 87       	std	Y+9, r22	; 0x09
    168c:	7a 87       	std	Y+10, r23	; 0x0a
    168e:	8b 87       	std	Y+11, r24	; 0x0b
    1690:	9c 87       	std	Y+12, r25	; 0x0c
    1692:	6d 81       	ldd	r22, Y+5	; 0x05
    1694:	7e 81       	ldd	r23, Y+6	; 0x06
    1696:	8f 81       	ldd	r24, Y+7	; 0x07
    1698:	98 85       	ldd	r25, Y+8	; 0x08
    169a:	9b 01       	movw	r18, r22
    169c:	ac 01       	movw	r20, r24
    169e:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    16a2:	6d 87       	std	Y+13, r22	; 0x0d
    16a4:	7e 87       	std	Y+14, r23	; 0x0e
    16a6:	8f 87       	std	Y+15, r24	; 0x0f
    16a8:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    16aa:	c4 01       	movw	r24, r8
    16ac:	b3 01       	movw	r22, r6
    16ae:	29 85       	ldd	r18, Y+9	; 0x09
    16b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b2:	4b 85       	ldd	r20, Y+11	; 0x0b
    16b4:	5c 85       	ldd	r21, Y+12	; 0x0c
    16b6:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    16ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    16bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    16be:	4f 85       	ldd	r20, Y+15	; 0x0f
    16c0:	58 89       	ldd	r21, Y+16	; 0x10
    16c2:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    16c6:	0e 94 23 23 	call	0x4646	; 0x4646 <ceil>
    16ca:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
    16ce:	69 83       	std	Y+1, r22	; 0x01
    16d0:	7a 83       	std	Y+2, r23	; 0x02
    16d2:	8b 83       	std	Y+3, r24	; 0x03
    16d4:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    16d6:	c2 01       	movw	r24, r4
    16d8:	b1 01       	movw	r22, r2
    16da:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatunsisf>
    16de:	9b 01       	movw	r18, r22
    16e0:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    16e2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    16e6:	1b 01       	movw	r2, r22
    16e8:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    16ea:	a4 01       	movw	r20, r8
    16ec:	93 01       	movw	r18, r6
    16ee:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    16f2:	7b 01       	movw	r14, r22
    16f4:	8c 01       	movw	r16, r24
    16f6:	d0 94       	com	r13
    16f8:	c0 94       	com	r12
    16fa:	b0 94       	com	r11
    16fc:	a0 94       	com	r10
    16fe:	a1 1c       	adc	r10, r1
    1700:	b1 1c       	adc	r11, r1
    1702:	c1 1c       	adc	r12, r1
    1704:	d1 1c       	adc	r13, r1
    1706:	c6 01       	movw	r24, r12
    1708:	b5 01       	movw	r22, r10
    170a:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1716:	9b 01       	movw	r18, r22
    1718:	ac 01       	movw	r20, r24
    171a:	c8 01       	movw	r24, r16
    171c:	b7 01       	movw	r22, r14
    171e:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    1722:	0e 94 10 24 	call	0x4820	; 0x4820 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1726:	e9 89       	ldd	r30, Y+17	; 0x11
    1728:	fa 89       	ldd	r31, Y+18	; 0x12
    172a:	a1 88       	ldd	r10, Z+17	; 0x11
    172c:	b2 88       	ldd	r11, Z+18	; 0x12
    172e:	c3 88       	ldd	r12, Z+19	; 0x13
    1730:	d4 88       	ldd	r13, Z+20	; 0x14
    1732:	86 01       	movw	r16, r12
    1734:	75 01       	movw	r14, r10
    1736:	29 81       	ldd	r18, Y+1	; 0x01
    1738:	3a 81       	ldd	r19, Y+2	; 0x02
    173a:	4b 81       	ldd	r20, Y+3	; 0x03
    173c:	5c 81       	ldd	r21, Y+4	; 0x04
    173e:	e2 1a       	sub	r14, r18
    1740:	f3 0a       	sbc	r15, r19
    1742:	04 0b       	sbc	r16, r20
    1744:	15 0b       	sbc	r17, r21
    1746:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
    174a:	a8 01       	movw	r20, r16
    174c:	97 01       	movw	r18, r14
    174e:	26 1b       	sub	r18, r22
    1750:	37 0b       	sbc	r19, r23
    1752:	48 0b       	sbc	r20, r24
    1754:	59 0b       	sbc	r21, r25
    1756:	da 01       	movw	r26, r20
    1758:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    175a:	57 fd       	sbrc	r21, 7
    175c:	30 c0       	rjmp	.+96     	; 0x17be <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    175e:	49 89       	ldd	r20, Y+17	; 0x11
    1760:	5a 89       	ldd	r21, Y+18	; 0x12
    1762:	4f 5b       	subi	r20, 0xBF	; 191
    1764:	5f 4f       	sbci	r21, 0xFF	; 255
    1766:	fa 01       	movw	r30, r20
    1768:	29 81       	ldd	r18, Y+1	; 0x01
    176a:	3a 81       	ldd	r19, Y+2	; 0x02
    176c:	4b 81       	ldd	r20, Y+3	; 0x03
    176e:	5c 81       	ldd	r21, Y+4	; 0x04
    1770:	21 93       	st	Z+, r18
    1772:	31 93       	st	Z+, r19
    1774:	41 93       	st	Z+, r20
    1776:	51 93       	st	Z+, r21
    1778:	fa 8b       	std	Y+18, r31	; 0x12
    177a:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    177c:	82 0f       	add	r24, r18
    177e:	93 1f       	adc	r25, r19
    1780:	a4 1f       	adc	r26, r20
    1782:	b5 1f       	adc	r27, r21
    1784:	80 83       	st	Z, r24
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	a2 83       	std	Z+2, r26	; 0x02
    178a:	b3 83       	std	Z+3, r27	; 0x03
}                    
    178c:	62 96       	adiw	r28, 0x12	; 18
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	ff 90       	pop	r15
    17a2:	ef 90       	pop	r14
    17a4:	df 90       	pop	r13
    17a6:	cf 90       	pop	r12
    17a8:	bf 90       	pop	r11
    17aa:	af 90       	pop	r10
    17ac:	9f 90       	pop	r9
    17ae:	8f 90       	pop	r8
    17b0:	7f 90       	pop	r7
    17b2:	6f 90       	pop	r6
    17b4:	5f 90       	pop	r5
    17b6:	4f 90       	pop	r4
    17b8:	3f 90       	pop	r3
    17ba:	2f 90       	pop	r2
    17bc:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    17be:	c6 01       	movw	r24, r12
    17c0:	b5 01       	movw	r22, r10
    17c2:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    17c6:	2d 85       	ldd	r18, Y+13	; 0x0d
    17c8:	3e 85       	ldd	r19, Y+14	; 0x0e
    17ca:	4f 85       	ldd	r20, Y+15	; 0x0f
    17cc:	58 89       	ldd	r21, Y+16	; 0x10
    17ce:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    17d2:	29 85       	ldd	r18, Y+9	; 0x09
    17d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17d6:	4b 85       	ldd	r20, Y+11	; 0x0b
    17d8:	5c 85       	ldd	r21, Y+12	; 0x0c
    17da:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	c2 01       	movw	r24, r4
    17e4:	b1 01       	movw	r22, r2
    17e6:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    17ea:	7b 01       	movw	r14, r22
    17ec:	8c 01       	movw	r16, r24
    17ee:	6d 81       	ldd	r22, Y+5	; 0x05
    17f0:	7e 81       	ldd	r23, Y+6	; 0x06
    17f2:	8f 81       	ldd	r24, Y+7	; 0x07
    17f4:	98 85       	ldd	r25, Y+8	; 0x08
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	50 e4       	ldi	r21, 0x40	; 64
    17fe:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1802:	9b 01       	movw	r18, r22
    1804:	ac 01       	movw	r20, r24
    1806:	c8 01       	movw	r24, r16
    1808:	b7 01       	movw	r22, r14
    180a:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    180e:	0e 94 23 23 	call	0x4646	; 0x4646 <ceil>
    1812:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
    1816:	69 83       	std	Y+1, r22	; 0x01
    1818:	7a 83       	std	Y+2, r23	; 0x02
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	9b cf       	rjmp	.-202    	; 0x175e <calculate_trapezoid_for_block+0x1d6>

00001828 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1828:	10 92 96 03 	sts	0x0396, r1
    182c:	10 92 95 03 	sts	0x0395, r1
  block_buffer_tail = 0;
    1830:	10 92 98 03 	sts	0x0398, r1
    1834:	10 92 97 03 	sts	0x0397, r1
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1838:	80 91 a9 03 	lds	r24, 0x03A9
    183c:	88 23       	and	r24, r24
    183e:	29 f4       	brne	.+10     	; 0x184a <plan_init+0x22>
    st_synchronize();
    1840:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	80 93 a9 03 	sts	0x03A9, r24

void plan_init() {
  block_buffer_head = 0;
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
    184a:	80 e1       	ldi	r24, 0x10	; 16
    184c:	e9 e9       	ldi	r30, 0x99	; 153
    184e:	f3 e0       	ldi	r31, 0x03	; 3
    1850:	df 01       	movw	r26, r30
    1852:	1d 92       	st	X+, r1
    1854:	8a 95       	dec	r24
    1856:	e9 f7       	brne	.-6      	; 0x1852 <plan_init+0x2a>
}
    1858:	08 95       	ret

0000185a <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    185a:	cf 92       	push	r12
    185c:	df 92       	push	r13
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    186a:	80 91 97 03 	lds	r24, 0x0397
    186e:	90 91 98 03 	lds	r25, 0x0398
    1872:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1874:	e8 2e       	mov	r14, r24
    1876:	ff 24       	eor	r15, r15
    1878:	e7 fc       	sbrc	r14, 7
    187a:	f0 94       	com	r15
    187c:	80 91 95 03 	lds	r24, 0x0395
    1880:	90 91 96 03 	lds	r25, 0x0396
    1884:	e8 16       	cp	r14, r24
    1886:	f9 06       	cpc	r15, r25
    1888:	09 f4       	brne	.+2      	; 0x188c <planner_recalculate_trapezoids+0x32>
    188a:	4b c0       	rjmp	.+150    	; 0x1922 <planner_recalculate_trapezoids+0xc8>
    188c:	e0 e0       	ldi	r30, 0x00	; 0
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <planner_recalculate_trapezoids+0x3a>
    1892:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    1894:	89 e4       	ldi	r24, 0x49	; 73
    1896:	28 02       	muls	r18, r24
    1898:	e0 01       	movw	r28, r0
    189a:	11 24       	eor	r1, r1
    189c:	c8 5d       	subi	r28, 0xD8	; 216
    189e:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    18a0:	30 97       	sbiw	r30, 0x00	; 0
    18a2:	59 f0       	breq	.+22     	; 0x18ba <planner_recalculate_trapezoids+0x60>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    18a4:	41 a9       	ldd	r20, Z+49	; 0x31
    18a6:	52 a9       	ldd	r21, Z+50	; 0x32
    18a8:	63 a9       	ldd	r22, Z+51	; 0x33
    18aa:	74 a9       	ldd	r23, Z+52	; 0x34
    18ac:	09 a9       	ldd	r16, Y+49	; 0x31
    18ae:	1a a9       	ldd	r17, Y+50	; 0x32
    18b0:	2b a9       	ldd	r18, Y+51	; 0x33
    18b2:	3c a9       	ldd	r19, Y+52	; 0x34
    18b4:	cf 01       	movw	r24, r30
    18b6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    18ba:	c7 01       	movw	r24, r14
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	65 e0       	ldi	r22, 0x05	; 5
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
    18c6:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    18c8:	e8 2e       	mov	r14, r24
    18ca:	ff 24       	eor	r15, r15
    18cc:	e7 fc       	sbrc	r14, 7
    18ce:	f0 94       	com	r15
    18d0:	80 91 95 03 	lds	r24, 0x0395
    18d4:	90 91 96 03 	lds	r25, 0x0396
    18d8:	e8 16       	cp	r14, r24
    18da:	f9 06       	cpc	r15, r25
    18dc:	d1 f6       	brne	.-76     	; 0x1892 <planner_recalculate_trapezoids+0x38>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    18de:	c9 a8       	ldd	r12, Y+49	; 0x31
    18e0:	da a8       	ldd	r13, Y+50	; 0x32
    18e2:	eb a8       	ldd	r14, Y+51	; 0x33
    18e4:	fc a8       	ldd	r15, Y+52	; 0x34
    18e6:	60 91 2a 05 	lds	r22, 0x052A
    18ea:	70 91 2b 05 	lds	r23, 0x052B
    18ee:	80 91 2c 05 	lds	r24, 0x052C
    18f2:	90 91 2d 05 	lds	r25, 0x052D
    18f6:	29 a5       	ldd	r18, Y+41	; 0x29
    18f8:	3a a5       	ldd	r19, Y+42	; 0x2a
    18fa:	4b a5       	ldd	r20, Y+43	; 0x2b
    18fc:	5c a5       	ldd	r21, Y+44	; 0x2c
    18fe:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    1902:	8b 01       	movw	r16, r22
    1904:	9c 01       	movw	r18, r24
    1906:	ce 01       	movw	r24, r28
    1908:	b7 01       	movw	r22, r14
    190a:	a6 01       	movw	r20, r12
    190c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <calculate_trapezoid_for_block>
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1922:	c0 e0       	ldi	r28, 0x00	; 0
    1924:	d0 e0       	ldi	r29, 0x00	; 0
    1926:	db cf       	rjmp	.-74     	; 0x18de <planner_recalculate_trapezoids+0x84>

00001928 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1928:	2f 92       	push	r2
    192a:	3f 92       	push	r3
    192c:	4f 92       	push	r4
    192e:	5f 92       	push	r5
    1930:	6f 92       	push	r6
    1932:	7f 92       	push	r7
    1934:	8f 92       	push	r8
    1936:	9f 92       	push	r9
    1938:	af 92       	push	r10
    193a:	bf 92       	push	r11
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <planner_reverse_pass_kernel+0x26>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <planner_reverse_pass_kernel+0x28>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	8c 01       	movw	r16, r24
    1956:	7e 83       	std	Y+6, r23	; 0x06
    1958:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    195a:	67 2b       	or	r22, r23
    195c:	09 f4       	brne	.+2      	; 0x1960 <planner_reverse_pass_kernel+0x38>
    195e:	a5 c0       	rjmp	.+330    	; 0x1aaa <planner_reverse_pass_kernel+0x182>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1960:	41 15       	cp	r20, r1
    1962:	51 05       	cpc	r21, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <planner_reverse_pass_kernel+0x40>
    1966:	27 c1       	rjmp	.+590    	; 0x1bb6 <planner_reverse_pass_kernel+0x28e>
    exit_factor = next->entry_factor;
    1968:	da 01       	movw	r26, r20
    196a:	d1 96       	adiw	r26, 0x31	; 49
    196c:	8d 91       	ld	r24, X+
    196e:	9d 91       	ld	r25, X+
    1970:	0d 90       	ld	r0, X+
    1972:	bc 91       	ld	r27, X
    1974:	a0 2d       	mov	r26, r0
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	ab 83       	std	Y+3, r26	; 0x03
    197c:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    197e:	01 15       	cp	r16, r1
    1980:	11 05       	cpc	r17, r1
    1982:	09 f4       	brne	.+2      	; 0x1986 <planner_reverse_pass_kernel+0x5e>
    1984:	05 c1       	rjmp	.+522    	; 0x1b90 <planner_reverse_pass_kernel+0x268>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1986:	f8 01       	movw	r30, r16
    1988:	61 8d       	ldd	r22, Z+25	; 0x19
    198a:	72 8d       	ldd	r23, Z+26	; 0x1a
    198c:	83 8d       	ldd	r24, Z+27	; 0x1b
    198e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1990:	ad 81       	ldd	r26, Y+5	; 0x05
    1992:	be 81       	ldd	r27, Y+6	; 0x06
    1994:	59 96       	adiw	r26, 0x19	; 25
    1996:	2d 91       	ld	r18, X+
    1998:	3d 91       	ld	r19, X+
    199a:	4d 91       	ld	r20, X+
    199c:	5c 91       	ld	r21, X
    199e:	5c 97       	sbiw	r26, 0x1c	; 28
    19a0:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    19a4:	9b 01       	movw	r18, r22
    19a6:	ac 01       	movw	r20, r24
    19a8:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    19ac:	1b 01       	movw	r2, r22
    19ae:	2c 01       	movw	r4, r24
    19b0:	f8 01       	movw	r30, r16
    19b2:	65 8d       	ldd	r22, Z+29	; 0x1d
    19b4:	76 8d       	ldd	r23, Z+30	; 0x1e
    19b6:	87 8d       	ldd	r24, Z+31	; 0x1f
    19b8:	90 a1       	ldd	r25, Z+32	; 0x20
    19ba:	ad 81       	ldd	r26, Y+5	; 0x05
    19bc:	be 81       	ldd	r27, Y+6	; 0x06
    19be:	5d 96       	adiw	r26, 0x1d	; 29
    19c0:	2d 91       	ld	r18, X+
    19c2:	3d 91       	ld	r19, X+
    19c4:	4d 91       	ld	r20, X+
    19c6:	5c 91       	ld	r21, X
    19c8:	90 97       	sbiw	r26, 0x20	; 32
    19ca:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    19d6:	3b 01       	movw	r6, r22
    19d8:	4c 01       	movw	r8, r24
    19da:	f8 01       	movw	r30, r16
    19dc:	61 a1       	ldd	r22, Z+33	; 0x21
    19de:	72 a1       	ldd	r23, Z+34	; 0x22
    19e0:	83 a1       	ldd	r24, Z+35	; 0x23
    19e2:	94 a1       	ldd	r25, Z+36	; 0x24
    19e4:	ad 81       	ldd	r26, Y+5	; 0x05
    19e6:	be 81       	ldd	r27, Y+6	; 0x06
    19e8:	91 96       	adiw	r26, 0x21	; 33
    19ea:	2d 91       	ld	r18, X+
    19ec:	3d 91       	ld	r19, X+
    19ee:	4d 91       	ld	r20, X+
    19f0:	5c 91       	ld	r21, X
    19f2:	94 97       	sbiw	r26, 0x24	; 36
    19f4:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1a00:	5b 01       	movw	r10, r22
    1a02:	6c 01       	movw	r12, r24
    1a04:	f8 01       	movw	r30, r16
    1a06:	65 a1       	ldd	r22, Z+37	; 0x25
    1a08:	76 a1       	ldd	r23, Z+38	; 0x26
    1a0a:	87 a1       	ldd	r24, Z+39	; 0x27
    1a0c:	90 a5       	ldd	r25, Z+40	; 0x28
    1a0e:	ad 81       	ldd	r26, Y+5	; 0x05
    1a10:	be 81       	ldd	r27, Y+6	; 0x06
    1a12:	95 96       	adiw	r26, 0x25	; 37
    1a14:	2d 91       	ld	r18, X+
    1a16:	3d 91       	ld	r19, X+
    1a18:	4d 91       	ld	r20, X+
    1a1a:	5c 91       	ld	r21, X
    1a1c:	98 97       	sbiw	r26, 0x28	; 40
    1a1e:	0e 94 96 22 	call	0x452c	; 0x452c <__subsf3>
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1a2a:	7b 01       	movw	r14, r22
    1a2c:	8c 01       	movw	r16, r24
    1a2e:	c2 01       	movw	r24, r4
    1a30:	b1 01       	movw	r22, r2
    1a32:	a4 01       	movw	r20, r8
    1a34:	93 01       	movw	r18, r6
    1a36:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1a3a:	a6 01       	movw	r20, r12
    1a3c:	95 01       	movw	r18, r10
    1a3e:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1a42:	a8 01       	movw	r20, r16
    1a44:	97 01       	movw	r18, r14
    1a46:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1a4a:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <sqrt>
    1a4e:	5b 01       	movw	r10, r22
    1a50:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1a52:	e0 90 2a 05 	lds	r14, 0x052A
    1a56:	f0 90 2b 05 	lds	r15, 0x052B
    1a5a:	00 91 2c 05 	lds	r16, 0x052C
    1a5e:	10 91 2d 05 	lds	r17, 0x052D
    1a62:	c8 01       	movw	r24, r16
    1a64:	b7 01       	movw	r22, r14
    1a66:	a6 01       	movw	r20, r12
    1a68:	95 01       	movw	r18, r10
    1a6a:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    1a6e:	87 fd       	sbrc	r24, 7
    1a70:	35 c0       	rjmp	.+106    	; 0x1adc <planner_reverse_pass_kernel+0x1b4>
    1a72:	0f 2e       	mov	r0, r31
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	6f 2e       	mov	r6, r31
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	7f 2e       	mov	r7, r31
    1a7c:	f0 e8       	ldi	r31, 0x80	; 128
    1a7e:	8f 2e       	mov	r8, r31
    1a80:	ff e3       	ldi	r31, 0x3F	; 63
    1a82:	9f 2e       	mov	r9, r31
    1a84:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1a86:	c4 01       	movw	r24, r8
    1a88:	b3 01       	movw	r22, r6
    1a8a:	29 81       	ldd	r18, Y+1	; 0x01
    1a8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a8e:	4b 81       	ldd	r20, Y+3	; 0x03
    1a90:	5c 81       	ldd	r21, Y+4	; 0x04
    1a92:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	54 f1       	brlt	.+84     	; 0x1aee <planner_reverse_pass_kernel+0x1c6>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1a9a:	ad 81       	ldd	r26, Y+5	; 0x05
    1a9c:	be 81       	ldd	r27, Y+6	; 0x06
    1a9e:	d1 96       	adiw	r26, 0x31	; 49
    1aa0:	6d 92       	st	X+, r6
    1aa2:	7d 92       	st	X+, r7
    1aa4:	8d 92       	st	X+, r8
    1aa6:	9c 92       	st	X, r9
    1aa8:	d4 97       	sbiw	r26, 0x34	; 52
}
    1aaa:	26 96       	adiw	r28, 0x06	; 6
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	bf 90       	pop	r11
    1ac8:	af 90       	pop	r10
    1aca:	9f 90       	pop	r9
    1acc:	8f 90       	pop	r8
    1ace:	7f 90       	pop	r7
    1ad0:	6f 90       	pop	r6
    1ad2:	5f 90       	pop	r5
    1ad4:	4f 90       	pop	r4
    1ad6:	3f 90       	pop	r3
    1ad8:	2f 90       	pop	r2
    1ada:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1adc:	c8 01       	movw	r24, r16
    1ade:	b7 01       	movw	r22, r14
    1ae0:	a6 01       	movw	r20, r12
    1ae2:	95 01       	movw	r18, r10
    1ae4:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    1ae8:	3b 01       	movw	r6, r22
    1aea:	4c 01       	movw	r8, r24
    1aec:	cc cf       	rjmp	.-104    	; 0x1a86 <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1aee:	ed 81       	ldd	r30, Y+5	; 0x05
    1af0:	fe 81       	ldd	r31, Y+6	; 0x06
    1af2:	a1 a4       	ldd	r10, Z+41	; 0x29
    1af4:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1af6:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1af8:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1afa:	c6 01       	movw	r24, r12
    1afc:	b5 01       	movw	r22, r10
    1afe:	29 81       	ldd	r18, Y+1	; 0x01
    1b00:	3a 81       	ldd	r19, Y+2	; 0x02
    1b02:	4b 81       	ldd	r20, Y+3	; 0x03
    1b04:	5c 81       	ldd	r21, Y+4	; 0x04
    1b06:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1b0e:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1b12:	7b 01       	movw	r14, r22
    1b14:	8c 01       	movw	r16, r24
    1b16:	20 91 26 05 	lds	r18, 0x0526
    1b1a:	30 91 27 05 	lds	r19, 0x0527
    1b1e:	40 91 28 05 	lds	r20, 0x0528
    1b22:	50 91 29 05 	lds	r21, 0x0529
    1b26:	50 58       	subi	r21, 0x80	; 128
    1b28:	ca 01       	movw	r24, r20
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e7       	ldi	r20, 0x70	; 112
    1b36:	52 e4       	ldi	r21, 0x42	; 66
    1b38:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e7       	ldi	r20, 0x70	; 112
    1b42:	52 ec       	ldi	r21, 0xC2	; 194
    1b44:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1b48:	ad 81       	ldd	r26, Y+5	; 0x05
    1b4a:	be 81       	ldd	r27, Y+6	; 0x06
    1b4c:	9d 96       	adiw	r26, 0x2d	; 45
    1b4e:	2d 91       	ld	r18, X+
    1b50:	3d 91       	ld	r19, X+
    1b52:	4d 91       	ld	r20, X+
    1b54:	5c 91       	ld	r21, X
    1b56:	d0 97       	sbiw	r26, 0x30	; 48
    1b58:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1b5c:	9b 01       	movw	r18, r22
    1b5e:	ac 01       	movw	r20, r24
    1b60:	c8 01       	movw	r24, r16
    1b62:	b7 01       	movw	r22, r14
    1b64:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1b68:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1b6c:	a6 01       	movw	r20, r12
    1b6e:	95 01       	movw	r18, r10
    1b70:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    1b74:	7b 01       	movw	r14, r22
    1b76:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1b78:	c4 01       	movw	r24, r8
    1b7a:	b3 01       	movw	r22, r6
    1b7c:	a8 01       	movw	r20, r16
    1b7e:	97 01       	movw	r18, r14
    1b80:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
    1b84:	18 16       	cp	r1, r24
    1b86:	0c f0       	brlt	.+2      	; 0x1b8a <planner_reverse_pass_kernel+0x262>
    1b88:	88 cf       	rjmp	.-240    	; 0x1a9a <planner_reverse_pass_kernel+0x172>
    1b8a:	37 01       	movw	r6, r14
    1b8c:	48 01       	movw	r8, r16
    1b8e:	85 cf       	rjmp	.-246    	; 0x1a9a <planner_reverse_pass_kernel+0x172>
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
    1b90:	60 91 2a 05 	lds	r22, 0x052A
    1b94:	70 91 2b 05 	lds	r23, 0x052B
    1b98:	80 91 2c 05 	lds	r24, 0x052C
    1b9c:	90 91 2d 05 	lds	r25, 0x052D
    1ba0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ba2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ba4:	21 a5       	ldd	r18, Z+41	; 0x29
    1ba6:	32 a5       	ldd	r19, Z+42	; 0x2a
    1ba8:	43 a5       	ldd	r20, Z+43	; 0x2b
    1baa:	54 a5       	ldd	r21, Z+44	; 0x2c
    1bac:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    1bb0:	3b 01       	movw	r6, r22
    1bb2:	4c 01       	movw	r8, r24
    1bb4:	72 cf       	rjmp	.-284    	; 0x1a9a <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	0e 94 48 09 	call	0x1290	; 0x1290 <factor_for_safe_speed>
    1bbe:	69 83       	std	Y+1, r22	; 0x01
    1bc0:	7a 83       	std	Y+2, r23	; 0x02
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	db ce       	rjmp	.-586    	; 0x197e <planner_reverse_pass_kernel+0x56>

00001bc8 <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1bd6:	80 91 95 03 	lds	r24, 0x0395
    1bda:	90 91 96 03 	lds	r25, 0x0396
    1bde:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1be0:	20 91 97 03 	lds	r18, 0x0397
    1be4:	30 91 98 03 	lds	r19, 0x0398
    1be8:	99 27       	eor	r25, r25
    1bea:	87 fd       	sbrc	r24, 7
    1bec:	90 95       	com	r25
    1bee:	82 17       	cp	r24, r18
    1bf0:	93 07       	cpc	r25, r19
    1bf2:	b9 f1       	breq	.+110    	; 0x1c62 <planner_reverse_pass+0x9a>
    1bf4:	00 e0       	ldi	r16, 0x00	; 0
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	19 c0       	rjmp	.+50     	; 0x1c30 <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1bfe:	8f 2d       	mov	r24, r15
    1c00:	99 e4       	ldi	r25, 0x49	; 73
    1c02:	89 02       	muls	r24, r25
    1c04:	b0 01       	movw	r22, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	cf 2c       	mov	r12, r15
    1c0a:	dd 24       	eor	r13, r13
    1c0c:	c7 fc       	sbrc	r12, 7
    1c0e:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1c10:	eb 01       	movw	r28, r22
    1c12:	c8 5d       	subi	r28, 0xD8	; 216
    1c14:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1c16:	ce 01       	movw	r24, r28
    1c18:	b8 01       	movw	r22, r16
    1c1a:	0e 94 94 0c 	call	0x1928	; 0x1928 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1c1e:	80 91 97 03 	lds	r24, 0x0397
    1c22:	90 91 98 03 	lds	r25, 0x0398
    1c26:	a8 01       	movw	r20, r16
    1c28:	8c 15       	cp	r24, r12
    1c2a:	9d 05       	cpc	r25, r13
    1c2c:	61 f0       	breq	.+24     	; 0x1c46 <planner_reverse_pass+0x7e>
    1c2e:	8e 01       	movw	r16, r28
    block_index--;
    1c30:	fa 94       	dec	r15
    if(block_index < 0) {
    1c32:	f7 fe       	sbrs	r15, 7
    1c34:	e4 cf       	rjmp	.-56     	; 0x1bfe <planner_reverse_pass+0x36>
    1c36:	a4 e0       	ldi	r26, 0x04	; 4
    1c38:	fa 2e       	mov	r15, r26
    1c3a:	64 e2       	ldi	r22, 0x24	; 36
    1c3c:	71 e0       	ldi	r23, 0x01	; 1
    1c3e:	f4 e0       	ldi	r31, 0x04	; 4
    1c40:	cf 2e       	mov	r12, r31
    1c42:	d1 2c       	mov	r13, r1
    1c44:	e5 cf       	rjmp	.-54     	; 0x1c10 <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1c46:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	be 01       	movw	r22, r28
    1c4e:	0e 94 94 0c 	call	0x1928	; 0x1928 <planner_reverse_pass_kernel>
}
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	df 90       	pop	r13
    1c5e:	cf 90       	pop	r12
    1c60:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1c62:	c0 e0       	ldi	r28, 0x00	; 0
    1c64:	d0 e0       	ldi	r29, 0x00	; 0
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	ee cf       	rjmp	.-36     	; 0x1c48 <planner_reverse_pass+0x80>

00001c6c <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    1c6c:	2f 92       	push	r2
    1c6e:	3f 92       	push	r3
    1c70:	4f 92       	push	r4
    1c72:	5f 92       	push	r5
    1c74:	6f 92       	push	r6
    1c76:	7f 92       	push	r7
    1c78:	8f 92       	push	r8
    1c7a:	9f 92       	push	r9
    1c7c:	af 92       	push	r10
    1c7e:	bf 92       	push	r11
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	28 97       	sbiw	r28, 0x08	; 8
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
  int8_t block_index = block_buffer_tail;
    1ca0:	80 91 97 03 	lds	r24, 0x0397
    1ca4:	90 91 98 03 	lds	r25, 0x0398
    1ca8:	28 2f       	mov	r18, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1caa:	48 2e       	mov	r4, r24
    1cac:	55 24       	eor	r5, r5
    1cae:	47 fc       	sbrc	r4, 7
    1cb0:	50 94       	com	r5
    1cb2:	80 91 95 03 	lds	r24, 0x0395
    1cb6:	90 91 96 03 	lds	r25, 0x0396
    1cba:	48 16       	cp	r4, r24
    1cbc:	59 06       	cpc	r5, r25
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <planner_forward_pass+0x56>
    1cc0:	08 c1       	rjmp	.+528    	; 0x1ed2 <planner_forward_pass+0x266>
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1cc2:	80 91 26 05 	lds	r24, 0x0526
    1cc6:	90 91 27 05 	lds	r25, 0x0527
    1cca:	a0 91 28 05 	lds	r26, 0x0528
    1cce:	b0 91 29 05 	lds	r27, 0x0529
    1cd2:	ac 01       	movw	r20, r24
    1cd4:	bd 01       	movw	r22, r26
    1cd6:	70 58       	subi	r23, 0x80	; 128
    1cd8:	49 83       	std	Y+1, r20	; 0x01
    1cda:	5a 83       	std	Y+2, r21	; 0x02
    1cdc:	6b 83       	std	Y+3, r22	; 0x03
    1cde:	7c 83       	std	Y+4, r23	; 0x04
    1ce0:	88 24       	eor	r8, r8
    1ce2:	99 24       	eor	r9, r9
    1ce4:	22 24       	eor	r2, r2
    1ce6:	33 24       	eor	r3, r3
    1ce8:	15 c0       	rjmp	.+42     	; 0x1d14 <planner_forward_pass+0xa8>
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1cea:	c2 01       	movw	r24, r4
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	65 e0       	ldi	r22, 0x05	; 5
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
    1cf6:	28 2f       	mov	r18, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1cf8:	48 2e       	mov	r4, r24
    1cfa:	55 24       	eor	r5, r5
    1cfc:	47 fc       	sbrc	r4, 7
    1cfe:	50 94       	com	r5
    1d00:	80 91 95 03 	lds	r24, 0x0395
    1d04:	90 91 96 03 	lds	r25, 0x0396
    1d08:	14 01       	movw	r2, r8
    1d0a:	48 16       	cp	r4, r24
    1d0c:	59 06       	cpc	r5, r25
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <planner_forward_pass+0xa6>
    1d10:	78 c0       	rjmp	.+240    	; 0x1e02 <planner_forward_pass+0x196>
    1d12:	43 01       	movw	r8, r6
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    1d14:	59 e4       	ldi	r21, 0x49	; 73
    1d16:	25 02       	muls	r18, r21
    1d18:	30 01       	movw	r6, r0
    1d1a:	11 24       	eor	r1, r1
    1d1c:	68 e2       	ldi	r22, 0x28	; 40
    1d1e:	72 e0       	ldi	r23, 0x02	; 2
    1d20:	66 0e       	add	r6, r22
    1d22:	77 1e       	adc	r7, r23
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
  if(!current) { return; }
    1d24:	81 14       	cp	r8, r1
    1d26:	91 04       	cpc	r9, r1
    1d28:	01 f3       	breq	.-64     	; 0x1cea <planner_forward_pass+0x7e>
  if(previous) {
    1d2a:	21 14       	cp	r2, r1
    1d2c:	31 04       	cpc	r3, r1
    1d2e:	e9 f2       	breq	.-70     	; 0x1cea <planner_forward_pass+0x7e>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1d30:	d1 01       	movw	r26, r2
    1d32:	d1 96       	adiw	r26, 0x31	; 49
    1d34:	ed 90       	ld	r14, X+
    1d36:	fd 90       	ld	r15, X+
    1d38:	0d 91       	ld	r16, X+
    1d3a:	1c 91       	ld	r17, X
    1d3c:	d4 97       	sbiw	r26, 0x34	; 52
    1d3e:	d4 01       	movw	r26, r8
    1d40:	d1 96       	adiw	r26, 0x31	; 49
    1d42:	4d 91       	ld	r20, X+
    1d44:	5d 91       	ld	r21, X+
    1d46:	6d 91       	ld	r22, X+
    1d48:	7c 91       	ld	r23, X
    1d4a:	d4 97       	sbiw	r26, 0x34	; 52
    1d4c:	4d 83       	std	Y+5, r20	; 0x05
    1d4e:	5e 83       	std	Y+6, r21	; 0x06
    1d50:	6f 83       	std	Y+7, r22	; 0x07
    1d52:	78 87       	std	Y+8, r23	; 0x08
    1d54:	c8 01       	movw	r24, r16
    1d56:	b7 01       	movw	r22, r14
    1d58:	2d 81       	ldd	r18, Y+5	; 0x05
    1d5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d5c:	4f 81       	ldd	r20, Y+7	; 0x07
    1d5e:	58 85       	ldd	r21, Y+8	; 0x08
    1d60:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	0c f6       	brge	.-126    	; 0x1cea <planner_forward_pass+0x7e>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1d68:	f4 01       	movw	r30, r8
    1d6a:	a1 a4       	ldd	r10, Z+41	; 0x29
    1d6c:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1d6e:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1d70:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1d72:	c8 01       	movw	r24, r16
    1d74:	b7 01       	movw	r22, r14
    1d76:	a6 01       	movw	r20, r12
    1d78:	95 01       	movw	r18, r10
    1d7a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1d7e:	9b 01       	movw	r18, r22
    1d80:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1d82:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1d86:	7b 01       	movw	r14, r22
    1d88:	8c 01       	movw	r16, r24
    1d8a:	69 81       	ldd	r22, Y+1	; 0x01
    1d8c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	9b 01       	movw	r18, r22
    1d94:	ac 01       	movw	r20, r24
    1d96:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e7       	ldi	r20, 0x70	; 112
    1da0:	52 e4       	ldi	r21, 0x42	; 66
    1da2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e7       	ldi	r20, 0x70	; 112
    1dac:	52 ec       	ldi	r21, 0xC2	; 194
    1dae:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1db2:	d1 01       	movw	r26, r2
    1db4:	9d 96       	adiw	r26, 0x2d	; 45
    1db6:	2d 91       	ld	r18, X+
    1db8:	3d 91       	ld	r19, X+
    1dba:	4d 91       	ld	r20, X+
    1dbc:	5c 91       	ld	r21, X
    1dbe:	d0 97       	sbiw	r26, 0x30	; 48
    1dc0:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1dc4:	9b 01       	movw	r18, r22
    1dc6:	ac 01       	movw	r20, r24
    1dc8:	c8 01       	movw	r24, r16
    1dca:	b7 01       	movw	r22, r14
    1dcc:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1dd0:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1dd4:	a6 01       	movw	r20, r12
    1dd6:	95 01       	movw	r18, r10
    1dd8:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    1ddc:	7b 01       	movw	r14, r22
    1dde:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1de0:	6d 81       	ldd	r22, Y+5	; 0x05
    1de2:	7e 81       	ldd	r23, Y+6	; 0x06
    1de4:	8f 81       	ldd	r24, Y+7	; 0x07
    1de6:	98 85       	ldd	r25, Y+8	; 0x08
    1de8:	a8 01       	movw	r20, r16
    1dea:	97 01       	movw	r18, r14
    1dec:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	0c f0       	brlt	.+2      	; 0x1df6 <planner_forward_pass+0x18a>
    1df4:	7a cf       	rjmp	.-268    	; 0x1cea <planner_forward_pass+0x7e>
        current->entry_factor = max_entry_factor;
    1df6:	f4 01       	movw	r30, r8
    1df8:	e1 aa       	std	Z+49, r14	; 0x31
    1dfa:	f2 aa       	std	Z+50, r15	; 0x32
    1dfc:	03 ab       	std	Z+51, r16	; 0x33
    1dfe:	14 ab       	std	Z+52, r17	; 0x34
    1e00:	74 cf       	rjmp	.-280    	; 0x1cea <planner_forward_pass+0x7e>
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
  if(!current) { return; }
    1e02:	61 14       	cp	r6, r1
    1e04:	71 04       	cpc	r7, r1
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <planner_forward_pass+0x19e>
    1e08:	64 c0       	rjmp	.+200    	; 0x1ed2 <planner_forward_pass+0x266>
  if(previous) {
    1e0a:	81 14       	cp	r8, r1
    1e0c:	91 04       	cpc	r9, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <planner_forward_pass+0x1a6>
    1e10:	60 c0       	rjmp	.+192    	; 0x1ed2 <planner_forward_pass+0x266>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1e12:	d4 01       	movw	r26, r8
    1e14:	d1 96       	adiw	r26, 0x31	; 49
    1e16:	ed 90       	ld	r14, X+
    1e18:	fd 90       	ld	r15, X+
    1e1a:	0d 91       	ld	r16, X+
    1e1c:	1c 91       	ld	r17, X
    1e1e:	d4 97       	sbiw	r26, 0x34	; 52
    1e20:	f3 01       	movw	r30, r6
    1e22:	21 a8       	ldd	r2, Z+49	; 0x31
    1e24:	32 a8       	ldd	r3, Z+50	; 0x32
    1e26:	43 a8       	ldd	r4, Z+51	; 0x33
    1e28:	54 a8       	ldd	r5, Z+52	; 0x34
    1e2a:	c8 01       	movw	r24, r16
    1e2c:	b7 01       	movw	r22, r14
    1e2e:	a2 01       	movw	r20, r4
    1e30:	91 01       	movw	r18, r2
    1e32:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	0c f0       	brlt	.+2      	; 0x1e3c <planner_forward_pass+0x1d0>
    1e3a:	4b c0       	rjmp	.+150    	; 0x1ed2 <planner_forward_pass+0x266>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1e3c:	d3 01       	movw	r26, r6
    1e3e:	99 96       	adiw	r26, 0x29	; 41
    1e40:	ad 90       	ld	r10, X+
    1e42:	bd 90       	ld	r11, X+
    1e44:	cd 90       	ld	r12, X+
    1e46:	dc 90       	ld	r13, X
    1e48:	9c 97       	sbiw	r26, 0x2c	; 44
    1e4a:	c8 01       	movw	r24, r16
    1e4c:	b7 01       	movw	r22, r14
    1e4e:	a6 01       	movw	r20, r12
    1e50:	95 01       	movw	r18, r10
    1e52:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1e56:	9b 01       	movw	r18, r22
    1e58:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1e5a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1e5e:	7b 01       	movw	r14, r22
    1e60:	8c 01       	movw	r16, r24
    1e62:	69 81       	ldd	r22, Y+1	; 0x01
    1e64:	7a 81       	ldd	r23, Y+2	; 0x02
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	9b 01       	movw	r18, r22
    1e6c:	ac 01       	movw	r20, r24
    1e6e:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e7       	ldi	r20, 0x70	; 112
    1e78:	52 e4       	ldi	r21, 0x42	; 66
    1e7a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e7       	ldi	r20, 0x70	; 112
    1e84:	52 ec       	ldi	r21, 0xC2	; 194
    1e86:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1e8a:	f4 01       	movw	r30, r8
    1e8c:	25 a5       	ldd	r18, Z+45	; 0x2d
    1e8e:	36 a5       	ldd	r19, Z+46	; 0x2e
    1e90:	47 a5       	ldd	r20, Z+47	; 0x2f
    1e92:	50 a9       	ldd	r21, Z+48	; 0x30
    1e94:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    1e98:	9b 01       	movw	r18, r22
    1e9a:	ac 01       	movw	r20, r24
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	b7 01       	movw	r22, r14
    1ea0:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    1ea4:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1ea8:	a6 01       	movw	r20, r12
    1eaa:	95 01       	movw	r18, r10
    1eac:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    1eb0:	7b 01       	movw	r14, r22
    1eb2:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1eb4:	c2 01       	movw	r24, r4
    1eb6:	b1 01       	movw	r22, r2
    1eb8:	a8 01       	movw	r20, r16
    1eba:	97 01       	movw	r18, r14
    1ebc:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
    1ec0:	18 16       	cp	r1, r24
    1ec2:	3c f4       	brge	.+14     	; 0x1ed2 <planner_forward_pass+0x266>
        current->entry_factor = max_entry_factor;
    1ec4:	d3 01       	movw	r26, r6
    1ec6:	d1 96       	adiw	r26, 0x31	; 49
    1ec8:	ed 92       	st	X+, r14
    1eca:	fd 92       	st	X+, r15
    1ecc:	0d 93       	st	X+, r16
    1ece:	1c 93       	st	X, r17
    1ed0:	d4 97       	sbiw	r26, 0x34	; 52
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
}
    1ed2:	28 96       	adiw	r28, 0x08	; 8
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	df 90       	pop	r13
    1eec:	cf 90       	pop	r12
    1eee:	bf 90       	pop	r11
    1ef0:	af 90       	pop	r10
    1ef2:	9f 90       	pop	r9
    1ef4:	8f 90       	pop	r8
    1ef6:	7f 90       	pop	r7
    1ef8:	6f 90       	pop	r6
    1efa:	5f 90       	pop	r5
    1efc:	4f 90       	pop	r4
    1efe:	3f 90       	pop	r3
    1f00:	2f 90       	pop	r2
    1f02:	08 95       	ret

00001f04 <planner_recalculate>:
// be performed using only the one, true constant acceleration, and where no junction jerk is jerkier than 
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
    1f04:	2f 92       	push	r2
    1f06:	3f 92       	push	r3
    1f08:	4f 92       	push	r4
    1f0a:	5f 92       	push	r5
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	28 97       	sbiw	r28, 0x08	; 8
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
    1f38:	80 91 95 03 	lds	r24, 0x0395
    1f3c:	90 91 96 03 	lds	r25, 0x0396
    1f40:	18 2f       	mov	r17, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1f42:	20 91 97 03 	lds	r18, 0x0397
    1f46:	30 91 98 03 	lds	r19, 0x0398
    1f4a:	99 27       	eor	r25, r25
    1f4c:	87 fd       	sbrc	r24, 7
    1f4e:	90 95       	com	r25
    1f50:	82 17       	cp	r24, r18
    1f52:	93 07       	cpc	r25, r19
    1f54:	51 f1       	breq	.+84     	; 0x1faa <planner_recalculate+0xa6>
    1f56:	ee 24       	eor	r14, r14
    1f58:	ff 24       	eor	r15, r15
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    block_index--;
    if(block_index < 0) {
    1f5e:	09 e4       	ldi	r16, 0x49	; 73
    1f60:	1a c0       	rjmp	.+52     	; 0x1f96 <planner_recalculate+0x92>
    1f62:	10 02       	muls	r17, r16
    1f64:	b0 01       	movw	r22, r0
    1f66:	11 24       	eor	r1, r1
    1f68:	c1 2e       	mov	r12, r17
    1f6a:	dd 24       	eor	r13, r13
    1f6c:	c7 fc       	sbrc	r12, 7
    1f6e:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1f70:	b8 e2       	ldi	r27, 0x28	; 40
    1f72:	8b 2e       	mov	r8, r27
    1f74:	b2 e0       	ldi	r27, 0x02	; 2
    1f76:	9b 2e       	mov	r9, r27
    1f78:	86 0e       	add	r8, r22
    1f7a:	97 1e       	adc	r9, r23
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1f7c:	c4 01       	movw	r24, r8
    1f7e:	b7 01       	movw	r22, r14
    1f80:	0e 94 94 0c 	call	0x1928	; 0x1928 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1f84:	80 91 97 03 	lds	r24, 0x0397
    1f88:	90 91 98 03 	lds	r25, 0x0398
    1f8c:	8c 15       	cp	r24, r12
    1f8e:	9d 05       	cpc	r25, r13
    1f90:	81 f0       	breq	.+32     	; 0x1fb2 <planner_recalculate+0xae>
    1f92:	a7 01       	movw	r20, r14
    1f94:	74 01       	movw	r14, r8
    block_index--;
    1f96:	11 50       	subi	r17, 0x01	; 1
    if(block_index < 0) {
    1f98:	17 ff       	sbrs	r17, 7
    1f9a:	e3 cf       	rjmp	.-58     	; 0x1f62 <planner_recalculate+0x5e>
    1f9c:	14 e0       	ldi	r17, 0x04	; 4
    1f9e:	64 e2       	ldi	r22, 0x24	; 36
    1fa0:	71 e0       	ldi	r23, 0x01	; 1
    1fa2:	84 e0       	ldi	r24, 0x04	; 4
    1fa4:	c8 2e       	mov	r12, r24
    1fa6:	d1 2c       	mov	r13, r1
    1fa8:	e3 cf       	rjmp	.-58     	; 0x1f70 <planner_recalculate+0x6c>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1faa:	88 24       	eor	r8, r8
    1fac:	99 24       	eor	r9, r9
    1fae:	ee 24       	eor	r14, r14
    1fb0:	ff 24       	eor	r15, r15
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	b4 01       	movw	r22, r8
    1fb8:	a7 01       	movw	r20, r14
    1fba:	0e 94 94 0c 	call	0x1928	; 0x1928 <planner_reverse_pass_kernel>
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
    1fbe:	80 91 97 03 	lds	r24, 0x0397
    1fc2:	90 91 98 03 	lds	r25, 0x0398
    1fc6:	28 2f       	mov	r18, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1fc8:	48 2e       	mov	r4, r24
    1fca:	55 24       	eor	r5, r5
    1fcc:	47 fc       	sbrc	r4, 7
    1fce:	50 94       	com	r5
    1fd0:	80 91 95 03 	lds	r24, 0x0395
    1fd4:	90 91 96 03 	lds	r25, 0x0396
    1fd8:	48 16       	cp	r4, r24
    1fda:	59 06       	cpc	r5, r25
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <planner_recalculate+0xdc>
    1fde:	08 c1       	rjmp	.+528    	; 0x21f0 <planner_recalculate+0x2ec>
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1fe0:	80 91 26 05 	lds	r24, 0x0526
    1fe4:	90 91 27 05 	lds	r25, 0x0527
    1fe8:	a0 91 28 05 	lds	r26, 0x0528
    1fec:	b0 91 29 05 	lds	r27, 0x0529
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	bd 01       	movw	r22, r26
    1ff4:	70 58       	subi	r23, 0x80	; 128
    1ff6:	49 83       	std	Y+1, r20	; 0x01
    1ff8:	5a 83       	std	Y+2, r21	; 0x02
    1ffa:	6b 83       	std	Y+3, r22	; 0x03
    1ffc:	7c 83       	std	Y+4, r23	; 0x04
    1ffe:	22 24       	eor	r2, r2
    2000:	33 24       	eor	r3, r3
    2002:	88 24       	eor	r8, r8
    2004:	99 24       	eor	r9, r9
    2006:	15 c0       	rjmp	.+42     	; 0x2032 <planner_recalculate+0x12e>
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    2008:	c2 01       	movw	r24, r4
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	65 e0       	ldi	r22, 0x05	; 5
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
    2014:	28 2f       	mov	r18, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    2016:	48 2e       	mov	r4, r24
    2018:	55 24       	eor	r5, r5
    201a:	47 fc       	sbrc	r4, 7
    201c:	50 94       	com	r5
    201e:	80 91 95 03 	lds	r24, 0x0395
    2022:	90 91 96 03 	lds	r25, 0x0396
    2026:	48 16       	cp	r4, r24
    2028:	59 06       	cpc	r5, r25
    202a:	09 f4       	brne	.+2      	; 0x202e <planner_recalculate+0x12a>
    202c:	79 c0       	rjmp	.+242    	; 0x2120 <planner_recalculate+0x21c>
    202e:	14 01       	movw	r2, r8
    2030:	43 01       	movw	r8, r6
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    2032:	59 e4       	ldi	r21, 0x49	; 73
    2034:	25 02       	muls	r18, r21
    2036:	30 01       	movw	r6, r0
    2038:	11 24       	eor	r1, r1
    203a:	68 e2       	ldi	r22, 0x28	; 40
    203c:	72 e0       	ldi	r23, 0x02	; 2
    203e:	66 0e       	add	r6, r22
    2040:	77 1e       	adc	r7, r23
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
  if(!current) { return; }
    2042:	81 14       	cp	r8, r1
    2044:	91 04       	cpc	r9, r1
    2046:	01 f3       	breq	.-64     	; 0x2008 <planner_recalculate+0x104>
  if(previous) {
    2048:	21 14       	cp	r2, r1
    204a:	31 04       	cpc	r3, r1
    204c:	e9 f2       	breq	.-70     	; 0x2008 <planner_recalculate+0x104>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    204e:	d1 01       	movw	r26, r2
    2050:	d1 96       	adiw	r26, 0x31	; 49
    2052:	ed 90       	ld	r14, X+
    2054:	fd 90       	ld	r15, X+
    2056:	0d 91       	ld	r16, X+
    2058:	1c 91       	ld	r17, X
    205a:	d4 97       	sbiw	r26, 0x34	; 52
    205c:	d4 01       	movw	r26, r8
    205e:	d1 96       	adiw	r26, 0x31	; 49
    2060:	4d 91       	ld	r20, X+
    2062:	5d 91       	ld	r21, X+
    2064:	6d 91       	ld	r22, X+
    2066:	7c 91       	ld	r23, X
    2068:	d4 97       	sbiw	r26, 0x34	; 52
    206a:	4d 83       	std	Y+5, r20	; 0x05
    206c:	5e 83       	std	Y+6, r21	; 0x06
    206e:	6f 83       	std	Y+7, r22	; 0x07
    2070:	78 87       	std	Y+8, r23	; 0x08
    2072:	c8 01       	movw	r24, r16
    2074:	b7 01       	movw	r22, r14
    2076:	2d 81       	ldd	r18, Y+5	; 0x05
    2078:	3e 81       	ldd	r19, Y+6	; 0x06
    207a:	4f 81       	ldd	r20, Y+7	; 0x07
    207c:	58 85       	ldd	r21, Y+8	; 0x08
    207e:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    2082:	88 23       	and	r24, r24
    2084:	0c f6       	brge	.-126    	; 0x2008 <planner_recalculate+0x104>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    2086:	f4 01       	movw	r30, r8
    2088:	a1 a4       	ldd	r10, Z+41	; 0x29
    208a:	b2 a4       	ldd	r11, Z+42	; 0x2a
    208c:	c3 a4       	ldd	r12, Z+43	; 0x2b
    208e:	d4 a4       	ldd	r13, Z+44	; 0x2c
    2090:	c8 01       	movw	r24, r16
    2092:	b7 01       	movw	r22, r14
    2094:	a6 01       	movw	r20, r12
    2096:	95 01       	movw	r18, r10
    2098:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    209c:	9b 01       	movw	r18, r22
    209e:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    20a0:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    20a4:	7b 01       	movw	r14, r22
    20a6:	8c 01       	movw	r16, r24
    20a8:	69 81       	ldd	r22, Y+1	; 0x01
    20aa:	7a 81       	ldd	r23, Y+2	; 0x02
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	9b 01       	movw	r18, r22
    20b2:	ac 01       	movw	r20, r24
    20b4:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e7       	ldi	r20, 0x70	; 112
    20be:	52 e4       	ldi	r21, 0x42	; 66
    20c0:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e7       	ldi	r20, 0x70	; 112
    20ca:	52 ec       	ldi	r21, 0xC2	; 194
    20cc:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    20d0:	d1 01       	movw	r26, r2
    20d2:	9d 96       	adiw	r26, 0x2d	; 45
    20d4:	2d 91       	ld	r18, X+
    20d6:	3d 91       	ld	r19, X+
    20d8:	4d 91       	ld	r20, X+
    20da:	5c 91       	ld	r21, X
    20dc:	d0 97       	sbiw	r26, 0x30	; 48
    20de:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    20e2:	9b 01       	movw	r18, r22
    20e4:	ac 01       	movw	r20, r24
    20e6:	c8 01       	movw	r24, r16
    20e8:	b7 01       	movw	r22, r14
    20ea:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    20ee:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    20f2:	a6 01       	movw	r20, r12
    20f4:	95 01       	movw	r18, r10
    20f6:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    20fa:	7b 01       	movw	r14, r22
    20fc:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    20fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2100:	7e 81       	ldd	r23, Y+6	; 0x06
    2102:	8f 81       	ldd	r24, Y+7	; 0x07
    2104:	98 85       	ldd	r25, Y+8	; 0x08
    2106:	a8 01       	movw	r20, r16
    2108:	97 01       	movw	r18, r14
    210a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
    210e:	18 16       	cp	r1, r24
    2110:	0c f0       	brlt	.+2      	; 0x2114 <planner_recalculate+0x210>
    2112:	7a cf       	rjmp	.-268    	; 0x2008 <planner_recalculate+0x104>
        current->entry_factor = max_entry_factor;
    2114:	f4 01       	movw	r30, r8
    2116:	e1 aa       	std	Z+49, r14	; 0x31
    2118:	f2 aa       	std	Z+50, r15	; 0x32
    211a:	03 ab       	std	Z+51, r16	; 0x33
    211c:	14 ab       	std	Z+52, r17	; 0x34
    211e:	74 cf       	rjmp	.-280    	; 0x2008 <planner_recalculate+0x104>
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
  if(!current) { return; }
    2120:	61 14       	cp	r6, r1
    2122:	71 04       	cpc	r7, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <planner_recalculate+0x224>
    2126:	64 c0       	rjmp	.+200    	; 0x21f0 <planner_recalculate+0x2ec>
  if(previous) {
    2128:	81 14       	cp	r8, r1
    212a:	91 04       	cpc	r9, r1
    212c:	09 f4       	brne	.+2      	; 0x2130 <planner_recalculate+0x22c>
    212e:	60 c0       	rjmp	.+192    	; 0x21f0 <planner_recalculate+0x2ec>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    2130:	d4 01       	movw	r26, r8
    2132:	d1 96       	adiw	r26, 0x31	; 49
    2134:	ed 90       	ld	r14, X+
    2136:	fd 90       	ld	r15, X+
    2138:	0d 91       	ld	r16, X+
    213a:	1c 91       	ld	r17, X
    213c:	d4 97       	sbiw	r26, 0x34	; 52
    213e:	f3 01       	movw	r30, r6
    2140:	21 a8       	ldd	r2, Z+49	; 0x31
    2142:	32 a8       	ldd	r3, Z+50	; 0x32
    2144:	43 a8       	ldd	r4, Z+51	; 0x33
    2146:	54 a8       	ldd	r5, Z+52	; 0x34
    2148:	c8 01       	movw	r24, r16
    214a:	b7 01       	movw	r22, r14
    214c:	a2 01       	movw	r20, r4
    214e:	91 01       	movw	r18, r2
    2150:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    2154:	88 23       	and	r24, r24
    2156:	0c f0       	brlt	.+2      	; 0x215a <planner_recalculate+0x256>
    2158:	4b c0       	rjmp	.+150    	; 0x21f0 <planner_recalculate+0x2ec>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    215a:	d3 01       	movw	r26, r6
    215c:	99 96       	adiw	r26, 0x29	; 41
    215e:	ad 90       	ld	r10, X+
    2160:	bd 90       	ld	r11, X+
    2162:	cd 90       	ld	r12, X+
    2164:	dc 90       	ld	r13, X
    2166:	9c 97       	sbiw	r26, 0x2c	; 44
    2168:	c8 01       	movw	r24, r16
    216a:	b7 01       	movw	r22, r14
    216c:	a6 01       	movw	r20, r12
    216e:	95 01       	movw	r18, r10
    2170:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    2174:	9b 01       	movw	r18, r22
    2176:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    2178:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    217c:	7b 01       	movw	r14, r22
    217e:	8c 01       	movw	r16, r24
    2180:	69 81       	ldd	r22, Y+1	; 0x01
    2182:	7a 81       	ldd	r23, Y+2	; 0x02
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	9c 81       	ldd	r25, Y+4	; 0x04
    2188:	9b 01       	movw	r18, r22
    218a:	ac 01       	movw	r20, r24
    218c:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e7       	ldi	r20, 0x70	; 112
    2196:	52 e4       	ldi	r21, 0x42	; 66
    2198:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e7       	ldi	r20, 0x70	; 112
    21a2:	52 ec       	ldi	r21, 0xC2	; 194
    21a4:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    21a8:	f4 01       	movw	r30, r8
    21aa:	25 a5       	ldd	r18, Z+45	; 0x2d
    21ac:	36 a5       	ldd	r19, Z+46	; 0x2e
    21ae:	47 a5       	ldd	r20, Z+47	; 0x2f
    21b0:	50 a9       	ldd	r21, Z+48	; 0x30
    21b2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    21b6:	9b 01       	movw	r18, r22
    21b8:	ac 01       	movw	r20, r24
    21ba:	c8 01       	movw	r24, r16
    21bc:	b7 01       	movw	r22, r14
    21be:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    21c2:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    21c6:	a6 01       	movw	r20, r12
    21c8:	95 01       	movw	r18, r10
    21ca:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    21ce:	7b 01       	movw	r14, r22
    21d0:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    21d2:	c2 01       	movw	r24, r4
    21d4:	b1 01       	movw	r22, r2
    21d6:	a8 01       	movw	r20, r16
    21d8:	97 01       	movw	r18, r14
    21da:	0e 94 fd 24 	call	0x49fa	; 0x49fa <__gesf2>
    21de:	18 16       	cp	r1, r24
    21e0:	3c f4       	brge	.+14     	; 0x21f0 <planner_recalculate+0x2ec>
        current->entry_factor = max_entry_factor;
    21e2:	d3 01       	movw	r26, r6
    21e4:	d1 96       	adiw	r26, 0x31	; 49
    21e6:	ed 92       	st	X+, r14
    21e8:	fd 92       	st	X+, r15
    21ea:	0d 93       	st	X+, r16
    21ec:	1c 93       	st	X, r17
    21ee:	d4 97       	sbiw	r26, 0x34	; 52

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
    21f0:	80 91 97 03 	lds	r24, 0x0397
    21f4:	90 91 98 03 	lds	r25, 0x0398
    21f8:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    21fa:	e8 2e       	mov	r14, r24
    21fc:	ff 24       	eor	r15, r15
    21fe:	e7 fc       	sbrc	r14, 7
    2200:	f0 94       	com	r15
    2202:	80 91 95 03 	lds	r24, 0x0395
    2206:	90 91 96 03 	lds	r25, 0x0396
    220a:	e8 16       	cp	r14, r24
    220c:	f9 06       	cpc	r15, r25
    220e:	09 f4       	brne	.+2      	; 0x2212 <__stack+0x13>
    2210:	61 c0       	rjmp	.+194    	; 0x22d4 <__stack+0xd5>
    2212:	e0 e0       	ldi	r30, 0x00	; 0
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	01 c0       	rjmp	.+2      	; 0x221a <__stack+0x1b>
    2218:	f4 01       	movw	r30, r8
    current = next;
    next = &block_buffer[block_index];
    221a:	b9 e4       	ldi	r27, 0x49	; 73
    221c:	2b 02       	muls	r18, r27
    221e:	40 01       	movw	r8, r0
    2220:	11 24       	eor	r1, r1
    2222:	48 e2       	ldi	r20, 0x28	; 40
    2224:	52 e0       	ldi	r21, 0x02	; 2
    2226:	84 0e       	add	r8, r20
    2228:	95 1e       	adc	r9, r21
    if (current) {
    222a:	30 97       	sbiw	r30, 0x00	; 0
    222c:	71 f0       	breq	.+28     	; 0x224a <__stack+0x4b>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    222e:	41 a9       	ldd	r20, Z+49	; 0x31
    2230:	52 a9       	ldd	r21, Z+50	; 0x32
    2232:	63 a9       	ldd	r22, Z+51	; 0x33
    2234:	74 a9       	ldd	r23, Z+52	; 0x34
    2236:	d4 01       	movw	r26, r8
    2238:	d1 96       	adiw	r26, 0x31	; 49
    223a:	0d 91       	ld	r16, X+
    223c:	1d 91       	ld	r17, X+
    223e:	2d 91       	ld	r18, X+
    2240:	3c 91       	ld	r19, X
    2242:	d4 97       	sbiw	r26, 0x34	; 52
    2244:	cf 01       	movw	r24, r30
    2246:	0e 94 c4 0a 	call	0x1588	; 0x1588 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    224a:	c7 01       	movw	r24, r14
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	65 e0       	ldi	r22, 0x05	; 5
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
    2256:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2258:	e8 2e       	mov	r14, r24
    225a:	ff 24       	eor	r15, r15
    225c:	e7 fc       	sbrc	r14, 7
    225e:	f0 94       	com	r15
    2260:	80 91 95 03 	lds	r24, 0x0395
    2264:	90 91 96 03 	lds	r25, 0x0396
    2268:	e8 16       	cp	r14, r24
    226a:	f9 06       	cpc	r15, r25
    226c:	a9 f6       	brne	.-86     	; 0x2218 <__stack+0x19>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    226e:	f4 01       	movw	r30, r8
    2270:	c1 a8       	ldd	r12, Z+49	; 0x31
    2272:	d2 a8       	ldd	r13, Z+50	; 0x32
    2274:	e3 a8       	ldd	r14, Z+51	; 0x33
    2276:	f4 a8       	ldd	r15, Z+52	; 0x34
    2278:	60 91 2a 05 	lds	r22, 0x052A
    227c:	70 91 2b 05 	lds	r23, 0x052B
    2280:	80 91 2c 05 	lds	r24, 0x052C
    2284:	90 91 2d 05 	lds	r25, 0x052D
    2288:	21 a5       	ldd	r18, Z+41	; 0x29
    228a:	32 a5       	ldd	r19, Z+42	; 0x2a
    228c:	43 a5       	ldd	r20, Z+43	; 0x2b
    228e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2290:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2294:	8b 01       	movw	r16, r22
    2296:	9c 01       	movw	r18, r24
    2298:	c4 01       	movw	r24, r8
    229a:	b7 01       	movw	r22, r14
    229c:	a6 01       	movw	r20, r12
    229e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <calculate_trapezoid_for_block>

void planner_recalculate() {     
  planner_reverse_pass();
  planner_forward_pass();
  planner_recalculate_trapezoids();
}
    22a2:	28 96       	adiw	r28, 0x08	; 8
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	df 90       	pop	r13
    22bc:	cf 90       	pop	r12
    22be:	bf 90       	pop	r11
    22c0:	af 90       	pop	r10
    22c2:	9f 90       	pop	r9
    22c4:	8f 90       	pop	r8
    22c6:	7f 90       	pop	r7
    22c8:	6f 90       	pop	r6
    22ca:	5f 90       	pop	r5
    22cc:	4f 90       	pop	r4
    22ce:	3f 90       	pop	r3
    22d0:	2f 90       	pop	r2
    22d2:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    22d4:	88 24       	eor	r8, r8
    22d6:	99 24       	eor	r9, r9
    22d8:	ca cf       	rjmp	.-108    	; 0x226e <__stack+0x6f>

000022da <plan_buffer_line>:


// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
    22da:	2f 92       	push	r2
    22dc:	3f 92       	push	r3
    22de:	4f 92       	push	r4
    22e0:	5f 92       	push	r5
    22e2:	6f 92       	push	r6
    22e4:	7f 92       	push	r7
    22e6:	8f 92       	push	r8
    22e8:	9f 92       	push	r9
    22ea:	af 92       	push	r10
    22ec:	bf 92       	push	r11
    22ee:	cf 92       	push	r12
    22f0:	df 92       	push	r13
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	c4 55       	subi	r28, 0x54	; 84
    2304:	d0 40       	sbci	r29, 0x00	; 0
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	2b 96       	adiw	r28, 0x0b	; 11
    2312:	2c af       	std	Y+60, r18	; 0x3c
    2314:	3d af       	std	Y+61, r19	; 0x3d
    2316:	4e af       	std	Y+62, r20	; 0x3e
    2318:	5f af       	std	Y+63, r21	; 0x3f
    231a:	2b 97       	sbiw	r28, 0x0b	; 11
    231c:	2f 96       	adiw	r28, 0x0f	; 15
    231e:	ec ae       	std	Y+60, r14	; 0x3c
    2320:	fd ae       	std	Y+61, r15	; 0x3d
    2322:	0e af       	std	Y+62, r16	; 0x3e
    2324:	1f af       	std	Y+63, r17	; 0x3f
    2326:	2f 97       	sbiw	r28, 0x0f	; 15
    2328:	63 96       	adiw	r28, 0x13	; 19
    232a:	ac ae       	std	Y+60, r10	; 0x3c
    232c:	bd ae       	std	Y+61, r11	; 0x3d
    232e:	ce ae       	std	Y+62, r12	; 0x3e
    2330:	df ae       	std	Y+63, r13	; 0x3f
    2332:	63 97       	sbiw	r28, 0x13	; 19
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    2334:	20 91 08 05 	lds	r18, 0x0508
    2338:	30 91 09 05 	lds	r19, 0x0509
    233c:	40 91 0a 05 	lds	r20, 0x050A
    2340:	50 91 0b 05 	lds	r21, 0x050B
    2344:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    2348:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    234c:	7b 01       	movw	r14, r22
    234e:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2350:	20 91 0c 05 	lds	r18, 0x050C
    2354:	30 91 0d 05 	lds	r19, 0x050D
    2358:	40 91 0e 05 	lds	r20, 0x050E
    235c:	50 91 0f 05 	lds	r21, 0x050F
    2360:	27 96       	adiw	r28, 0x07	; 7
    2362:	2c af       	std	Y+60, r18	; 0x3c
    2364:	3d af       	std	Y+61, r19	; 0x3d
    2366:	4e af       	std	Y+62, r20	; 0x3e
    2368:	5f af       	std	Y+63, r21	; 0x3f
    236a:	27 97       	sbiw	r28, 0x07	; 7
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    236c:	20 90 10 05 	lds	r2, 0x0510
    2370:	30 90 11 05 	lds	r3, 0x0511
    2374:	40 90 12 05 	lds	r4, 0x0512
    2378:	50 90 13 05 	lds	r5, 0x0513
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    237c:	60 90 14 05 	lds	r6, 0x0514
    2380:	70 90 15 05 	lds	r7, 0x0515
    2384:	80 90 16 05 	lds	r8, 0x0516
    2388:	90 90 17 05 	lds	r9, 0x0517
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    238c:	80 91 95 03 	lds	r24, 0x0395
    2390:	90 91 96 03 	lds	r25, 0x0396
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	65 e0       	ldi	r22, 0x05	; 5
    2398:	70 e0       	ldi	r23, 0x00	; 0
    239a:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
    239e:	64 96       	adiw	r28, 0x14	; 20
    23a0:	8f af       	std	Y+63, r24	; 0x3f
    23a2:	64 97       	sbiw	r28, 0x14	; 20
    23a4:	65 96       	adiw	r28, 0x15	; 21
    23a6:	9f af       	std	Y+63, r25	; 0x3f
    23a8:	65 97       	sbiw	r28, 0x15	; 21
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    23aa:	20 91 97 03 	lds	r18, 0x0397
    23ae:	30 91 98 03 	lds	r19, 0x0398
    23b2:	65 96       	adiw	r28, 0x15	; 21
    23b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    23b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    23b8:	65 97       	sbiw	r28, 0x15	; 21
    23ba:	24 17       	cp	r18, r20
    23bc:	35 07       	cpc	r19, r21
    23be:	71 f4       	brne	.+28     	; 0x23dc <plan_buffer_line+0x102>
    23c0:	83 b7       	in	r24, 0x33	; 51
    23c2:	81 60       	ori	r24, 0x01	; 1
    23c4:	83 bf       	out	0x33, r24	; 51
    23c6:	88 95       	sleep
    23c8:	83 b7       	in	r24, 0x33	; 51
    23ca:	8e 7f       	andi	r24, 0xFE	; 254
    23cc:	83 bf       	out	0x33, r24	; 51
    23ce:	80 91 97 03 	lds	r24, 0x0397
    23d2:	90 91 98 03 	lds	r25, 0x0398
    23d6:	82 17       	cp	r24, r18
    23d8:	93 07       	cpc	r25, r19
    23da:	91 f3       	breq	.-28     	; 0x23c0 <plan_buffer_line+0xe6>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    23dc:	20 91 95 03 	lds	r18, 0x0395
    23e0:	30 91 96 03 	lds	r19, 0x0396
    23e4:	c9 01       	movw	r24, r18
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	bc 01       	movw	r22, r24
    23f4:	66 0f       	add	r22, r22
    23f6:	77 1f       	adc	r23, r23
    23f8:	66 0f       	add	r22, r22
    23fa:	77 1f       	adc	r23, r23
    23fc:	66 0f       	add	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	68 0f       	add	r22, r24
    2402:	79 1f       	adc	r23, r25
    2404:	62 0f       	add	r22, r18
    2406:	73 1f       	adc	r23, r19
    2408:	68 5d       	subi	r22, 0xD8	; 216
    240a:	7d 4f       	sbci	r23, 0xFD	; 253
    240c:	23 96       	adiw	r28, 0x03	; 3
    240e:	7f af       	std	Y+63, r23	; 0x3f
    2410:	6e af       	std	Y+62, r22	; 0x3e
    2412:	23 97       	sbiw	r28, 0x03	; 3
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2414:	80 91 99 03 	lds	r24, 0x0399
    2418:	90 91 9a 03 	lds	r25, 0x039A
    241c:	a0 91 9b 03 	lds	r26, 0x039B
    2420:	b0 91 9c 03 	lds	r27, 0x039C
    2424:	57 01       	movw	r10, r14
    2426:	68 01       	movw	r12, r16
    2428:	a8 1a       	sub	r10, r24
    242a:	b9 0a       	sbc	r11, r25
    242c:	ca 0a       	sbc	r12, r26
    242e:	db 0a       	sbc	r13, r27
    2430:	d7 fc       	sbrc	r13, 7
    2432:	69 c3       	rjmp	.+1746   	; 0x2b06 <plan_buffer_line+0x82c>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    2434:	c4 01       	movw	r24, r8
    2436:	b3 01       	movw	r22, r6
    2438:	63 96       	adiw	r28, 0x13	; 19
    243a:	2c ad       	ldd	r18, Y+60	; 0x3c
    243c:	3d ad       	ldd	r19, Y+61	; 0x3d
    243e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2440:	5f ad       	ldd	r21, Y+63	; 0x3f
    2442:	63 97       	sbiw	r28, 0x13	; 19
    2444:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    2448:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    244c:	6d 87       	std	Y+13, r22	; 0x0d
    244e:	7e 87       	std	Y+14, r23	; 0x0e
    2450:	8f 87       	std	Y+15, r24	; 0x0f
    2452:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2454:	c2 01       	movw	r24, r4
    2456:	b1 01       	movw	r22, r2
    2458:	2f 96       	adiw	r28, 0x0f	; 15
    245a:	2c ad       	ldd	r18, Y+60	; 0x3c
    245c:	3d ad       	ldd	r19, Y+61	; 0x3d
    245e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2460:	5f ad       	ldd	r21, Y+63	; 0x3f
    2462:	2f 97       	sbiw	r28, 0x0f	; 15
    2464:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    2468:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    246c:	69 87       	std	Y+9, r22	; 0x09
    246e:	7a 87       	std	Y+10, r23	; 0x0a
    2470:	8b 87       	std	Y+11, r24	; 0x0b
    2472:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2474:	27 96       	adiw	r28, 0x07	; 7
    2476:	6c ad       	ldd	r22, Y+60	; 0x3c
    2478:	7d ad       	ldd	r23, Y+61	; 0x3d
    247a:	8e ad       	ldd	r24, Y+62	; 0x3e
    247c:	9f ad       	ldd	r25, Y+63	; 0x3f
    247e:	27 97       	sbiw	r28, 0x07	; 7
    2480:	2b 96       	adiw	r28, 0x0b	; 11
    2482:	2c ad       	ldd	r18, Y+60	; 0x3c
    2484:	3d ad       	ldd	r19, Y+61	; 0x3d
    2486:	4e ad       	ldd	r20, Y+62	; 0x3e
    2488:	5f ad       	ldd	r21, Y+63	; 0x3f
    248a:	2b 97       	sbiw	r28, 0x0b	; 11
    248c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    2490:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    2494:	6d 83       	std	Y+5, r22	; 0x05
    2496:	7e 83       	std	Y+6, r23	; 0x06
    2498:	8f 83       	std	Y+7, r24	; 0x07
    249a:	98 87       	std	Y+8, r25	; 0x08
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    249c:	e9 82       	std	Y+1, r14	; 0x01
    249e:	fa 82       	std	Y+2, r15	; 0x02
    24a0:	0b 83       	std	Y+3, r16	; 0x03
    24a2:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    24a4:	23 96       	adiw	r28, 0x03	; 3
    24a6:	ae ad       	ldd	r26, Y+62	; 0x3e
    24a8:	bf ad       	ldd	r27, Y+63	; 0x3f
    24aa:	23 97       	sbiw	r28, 0x03	; 3
    24ac:	ad 92       	st	X+, r10
    24ae:	bd 92       	st	X+, r11
    24b0:	cd 92       	st	X+, r12
    24b2:	dc 92       	st	X, r13
    24b4:	13 97       	sbiw	r26, 0x03	; 3
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    24b6:	ad 80       	ldd	r10, Y+5	; 0x05
    24b8:	be 80       	ldd	r11, Y+6	; 0x06
    24ba:	cf 80       	ldd	r12, Y+7	; 0x07
    24bc:	d8 84       	ldd	r13, Y+8	; 0x08
    24be:	80 91 9d 03 	lds	r24, 0x039D
    24c2:	90 91 9e 03 	lds	r25, 0x039E
    24c6:	a0 91 9f 03 	lds	r26, 0x039F
    24ca:	b0 91 a0 03 	lds	r27, 0x03A0
    24ce:	a6 01       	movw	r20, r12
    24d0:	95 01       	movw	r18, r10
    24d2:	28 1b       	sub	r18, r24
    24d4:	39 0b       	sbc	r19, r25
    24d6:	4a 0b       	sbc	r20, r26
    24d8:	5b 0b       	sbc	r21, r27
    24da:	da 01       	movw	r26, r20
    24dc:	c9 01       	movw	r24, r18
    24de:	57 fd       	sbrc	r21, 7
    24e0:	0a c3       	rjmp	.+1556   	; 0x2af6 <plan_buffer_line+0x81c>
    24e2:	23 96       	adiw	r28, 0x03	; 3
    24e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    24e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    24e8:	23 97       	sbiw	r28, 0x03	; 3
    24ea:	84 83       	std	Z+4, r24	; 0x04
    24ec:	95 83       	std	Z+5, r25	; 0x05
    24ee:	a6 83       	std	Z+6, r26	; 0x06
    24f0:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    24f2:	69 84       	ldd	r6, Y+9	; 0x09
    24f4:	7a 84       	ldd	r7, Y+10	; 0x0a
    24f6:	8b 84       	ldd	r8, Y+11	; 0x0b
    24f8:	9c 84       	ldd	r9, Y+12	; 0x0c
    24fa:	80 91 a1 03 	lds	r24, 0x03A1
    24fe:	90 91 a2 03 	lds	r25, 0x03A2
    2502:	a0 91 a3 03 	lds	r26, 0x03A3
    2506:	b0 91 a4 03 	lds	r27, 0x03A4
    250a:	a4 01       	movw	r20, r8
    250c:	93 01       	movw	r18, r6
    250e:	28 1b       	sub	r18, r24
    2510:	39 0b       	sbc	r19, r25
    2512:	4a 0b       	sbc	r20, r26
    2514:	5b 0b       	sbc	r21, r27
    2516:	da 01       	movw	r26, r20
    2518:	c9 01       	movw	r24, r18
    251a:	57 fd       	sbrc	r21, 7
    251c:	e0 c2       	rjmp	.+1472   	; 0x2ade <plan_buffer_line+0x804>
    251e:	80 87       	std	Z+8, r24	; 0x08
    2520:	91 87       	std	Z+9, r25	; 0x09
    2522:	a2 87       	std	Z+10, r26	; 0x0a
    2524:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2526:	2d 84       	ldd	r2, Y+13	; 0x0d
    2528:	3e 84       	ldd	r3, Y+14	; 0x0e
    252a:	4f 84       	ldd	r4, Y+15	; 0x0f
    252c:	58 88       	ldd	r5, Y+16	; 0x10
    252e:	80 91 a5 03 	lds	r24, 0x03A5
    2532:	90 91 a6 03 	lds	r25, 0x03A6
    2536:	a0 91 a7 03 	lds	r26, 0x03A7
    253a:	b0 91 a8 03 	lds	r27, 0x03A8
    253e:	82 01       	movw	r16, r4
    2540:	71 01       	movw	r14, r2
    2542:	e8 1a       	sub	r14, r24
    2544:	f9 0a       	sbc	r15, r25
    2546:	0a 0b       	sbc	r16, r26
    2548:	1b 0b       	sbc	r17, r27
    254a:	17 fd       	sbrc	r17, 7
    254c:	bf c2       	rjmp	.+1406   	; 0x2acc <plan_buffer_line+0x7f2>
    254e:	23 96       	adiw	r28, 0x03	; 3
    2550:	ae ad       	ldd	r26, Y+62	; 0x3e
    2552:	bf ad       	ldd	r27, Y+63	; 0x3f
    2554:	23 97       	sbiw	r28, 0x03	; 3
    2556:	1c 96       	adiw	r26, 0x0c	; 12
    2558:	ed 92       	st	X+, r14
    255a:	fd 92       	st	X+, r15
    255c:	0d 93       	st	X+, r16
    255e:	1c 93       	st	X, r17
    2560:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    2562:	18 96       	adiw	r26, 0x08	; 8
    2564:	2d 91       	ld	r18, X+
    2566:	3d 91       	ld	r19, X+
    2568:	4d 91       	ld	r20, X+
    256a:	5c 91       	ld	r21, X
    256c:	1b 97       	sbiw	r26, 0x0b	; 11
    256e:	fd 01       	movw	r30, r26
    2570:	84 81       	ldd	r24, Z+4	; 0x04
    2572:	95 81       	ldd	r25, Z+5	; 0x05
    2574:	a6 81       	ldd	r26, Z+6	; 0x06
    2576:	b7 81       	ldd	r27, Z+7	; 0x07
    2578:	82 17       	cp	r24, r18
    257a:	93 07       	cpc	r25, r19
    257c:	a4 07       	cpc	r26, r20
    257e:	b5 07       	cpc	r27, r21
    2580:	10 f4       	brcc	.+4      	; 0x2586 <plan_buffer_line+0x2ac>
    2582:	da 01       	movw	r26, r20
    2584:	c9 01       	movw	r24, r18
    2586:	23 96       	adiw	r28, 0x03	; 3
    2588:	ee ad       	ldd	r30, Y+62	; 0x3e
    258a:	ff ad       	ldd	r31, Y+63	; 0x3f
    258c:	23 97       	sbiw	r28, 0x03	; 3
    258e:	20 81       	ld	r18, Z
    2590:	31 81       	ldd	r19, Z+1	; 0x01
    2592:	42 81       	ldd	r20, Z+2	; 0x02
    2594:	53 81       	ldd	r21, Z+3	; 0x03
    2596:	82 17       	cp	r24, r18
    2598:	93 07       	cpc	r25, r19
    259a:	a4 07       	cpc	r26, r20
    259c:	b5 07       	cpc	r27, r21
    259e:	10 f4       	brcc	.+4      	; 0x25a4 <plan_buffer_line+0x2ca>
    25a0:	da 01       	movw	r26, r20
    25a2:	c9 01       	movw	r24, r18
    25a4:	8e 15       	cp	r24, r14
    25a6:	9f 05       	cpc	r25, r15
    25a8:	a0 07       	cpc	r26, r16
    25aa:	b1 07       	cpc	r27, r17
    25ac:	10 f4       	brcc	.+4      	; 0x25b2 <plan_buffer_line+0x2d8>
    25ae:	d8 01       	movw	r26, r16
    25b0:	c7 01       	movw	r24, r14
    25b2:	23 96       	adiw	r28, 0x03	; 3
    25b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    25b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    25b8:	23 97       	sbiw	r28, 0x03	; 3
    25ba:	81 8b       	std	Z+17, r24	; 0x11
    25bc:	92 8b       	std	Z+18, r25	; 0x12
    25be:	a3 8b       	std	Z+19, r26	; 0x13
    25c0:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	a1 05       	cpc	r26, r1
    25c6:	b1 05       	cpc	r27, r1
    25c8:	d1 f4       	brne	.+52     	; 0x25fe <plan_buffer_line+0x324>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    25ca:	cc 5a       	subi	r28, 0xAC	; 172
    25cc:	df 4f       	sbci	r29, 0xFF	; 255
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	ff 90       	pop	r15
    25e2:	ef 90       	pop	r14
    25e4:	df 90       	pop	r13
    25e6:	cf 90       	pop	r12
    25e8:	bf 90       	pop	r11
    25ea:	af 90       	pop	r10
    25ec:	9f 90       	pop	r9
    25ee:	8f 90       	pop	r8
    25f0:	7f 90       	pop	r7
    25f2:	6f 90       	pop	r6
    25f4:	5f 90       	pop	r5
    25f6:	4f 90       	pop	r4
    25f8:	3f 90       	pop	r3
    25fa:	2f 90       	pop	r2
    25fc:	08 95       	ret
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    25fe:	29 81       	ldd	r18, Y+1	; 0x01
    2600:	3a 81       	ldd	r19, Y+2	; 0x02
    2602:	4b 81       	ldd	r20, Y+3	; 0x03
    2604:	5c 81       	ldd	r21, Y+4	; 0x04
    2606:	29 a7       	std	Y+41, r18	; 0x29
    2608:	3a a7       	std	Y+42, r19	; 0x2a
    260a:	4b a7       	std	Y+43, r20	; 0x2b
    260c:	5c a7       	std	Y+44, r21	; 0x2c
    260e:	40 91 99 03 	lds	r20, 0x0399
    2612:	50 91 9a 03 	lds	r21, 0x039A
    2616:	60 91 9b 03 	lds	r22, 0x039B
    261a:	70 91 9c 03 	lds	r23, 0x039C
    261e:	4d a7       	std	Y+45, r20	; 0x2d
    2620:	5e a7       	std	Y+46, r21	; 0x2e
    2622:	6f a7       	std	Y+47, r22	; 0x2f
    2624:	78 ab       	std	Y+48, r23	; 0x30
    2626:	69 a5       	ldd	r22, Y+41	; 0x29
    2628:	7a a5       	ldd	r23, Y+42	; 0x2a
    262a:	8b a5       	ldd	r24, Y+43	; 0x2b
    262c:	9c a5       	ldd	r25, Y+44	; 0x2c
    262e:	2d a5       	ldd	r18, Y+45	; 0x2d
    2630:	3e a5       	ldd	r19, Y+46	; 0x2e
    2632:	4f a5       	ldd	r20, Y+47	; 0x2f
    2634:	58 a9       	ldd	r21, Y+48	; 0x30
    2636:	62 1b       	sub	r22, r18
    2638:	73 0b       	sbc	r23, r19
    263a:	84 0b       	sbc	r24, r20
    263c:	95 0b       	sbc	r25, r21
    263e:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    2642:	20 91 08 05 	lds	r18, 0x0508
    2646:	30 91 09 05 	lds	r19, 0x0509
    264a:	40 91 0a 05 	lds	r20, 0x050A
    264e:	50 91 0b 05 	lds	r21, 0x050B
    2652:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2656:	21 96       	adiw	r28, 0x01	; 1
    2658:	6c af       	std	Y+60, r22	; 0x3c
    265a:	7d af       	std	Y+61, r23	; 0x3d
    265c:	8e af       	std	Y+62, r24	; 0x3e
    265e:	9f af       	std	Y+63, r25	; 0x3f
    2660:	21 97       	sbiw	r28, 0x01	; 1
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    2662:	ad a2       	std	Y+37, r10	; 0x25
    2664:	be a2       	std	Y+38, r11	; 0x26
    2666:	cf a2       	std	Y+39, r12	; 0x27
    2668:	d8 a6       	std	Y+40, r13	; 0x28
    266a:	40 91 9d 03 	lds	r20, 0x039D
    266e:	50 91 9e 03 	lds	r21, 0x039E
    2672:	60 91 9f 03 	lds	r22, 0x039F
    2676:	70 91 a0 03 	lds	r23, 0x03A0
    267a:	49 a3       	std	Y+33, r20	; 0x21
    267c:	5a a3       	std	Y+34, r21	; 0x22
    267e:	6b a3       	std	Y+35, r22	; 0x23
    2680:	7c a3       	std	Y+36, r23	; 0x24
    2682:	c6 01       	movw	r24, r12
    2684:	b5 01       	movw	r22, r10
    2686:	29 a1       	ldd	r18, Y+33	; 0x21
    2688:	3a a1       	ldd	r19, Y+34	; 0x22
    268a:	4b a1       	ldd	r20, Y+35	; 0x23
    268c:	5c a1       	ldd	r21, Y+36	; 0x24
    268e:	62 1b       	sub	r22, r18
    2690:	73 0b       	sbc	r23, r19
    2692:	84 0b       	sbc	r24, r20
    2694:	95 0b       	sbc	r25, r21
    2696:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    269a:	20 91 0c 05 	lds	r18, 0x050C
    269e:	30 91 0d 05 	lds	r19, 0x050D
    26a2:	40 91 0e 05 	lds	r20, 0x050E
    26a6:	50 91 0f 05 	lds	r21, 0x050F
    26aa:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    26ae:	69 af       	std	Y+57, r22	; 0x39
    26b0:	7a af       	std	Y+58, r23	; 0x3a
    26b2:	8b af       	std	Y+59, r24	; 0x3b
    26b4:	9c af       	std	Y+60, r25	; 0x3c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    26b6:	6d 8e       	std	Y+29, r6	; 0x1d
    26b8:	7e 8e       	std	Y+30, r7	; 0x1e
    26ba:	8f 8e       	std	Y+31, r8	; 0x1f
    26bc:	98 a2       	std	Y+32, r9	; 0x20
    26be:	40 91 a1 03 	lds	r20, 0x03A1
    26c2:	50 91 a2 03 	lds	r21, 0x03A2
    26c6:	60 91 a3 03 	lds	r22, 0x03A3
    26ca:	70 91 a4 03 	lds	r23, 0x03A4
    26ce:	49 8f       	std	Y+25, r20	; 0x19
    26d0:	5a 8f       	std	Y+26, r21	; 0x1a
    26d2:	6b 8f       	std	Y+27, r22	; 0x1b
    26d4:	7c 8f       	std	Y+28, r23	; 0x1c
    26d6:	c4 01       	movw	r24, r8
    26d8:	b3 01       	movw	r22, r6
    26da:	29 8d       	ldd	r18, Y+25	; 0x19
    26dc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    26de:	4b 8d       	ldd	r20, Y+27	; 0x1b
    26e0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    26e2:	62 1b       	sub	r22, r18
    26e4:	73 0b       	sbc	r23, r19
    26e6:	84 0b       	sbc	r24, r20
    26e8:	95 0b       	sbc	r25, r21
    26ea:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    26ee:	20 91 10 05 	lds	r18, 0x0510
    26f2:	30 91 11 05 	lds	r19, 0x0511
    26f6:	40 91 12 05 	lds	r20, 0x0512
    26fa:	50 91 13 05 	lds	r21, 0x0513
    26fe:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2702:	6d ab       	std	Y+53, r22	; 0x35
    2704:	7e ab       	std	Y+54, r23	; 0x36
    2706:	8f ab       	std	Y+55, r24	; 0x37
    2708:	98 af       	std	Y+56, r25	; 0x38
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    270a:	2d 8a       	std	Y+21, r2	; 0x15
    270c:	3e 8a       	std	Y+22, r3	; 0x16
    270e:	4f 8a       	std	Y+23, r4	; 0x17
    2710:	58 8e       	std	Y+24, r5	; 0x18
    2712:	40 91 a5 03 	lds	r20, 0x03A5
    2716:	50 91 a6 03 	lds	r21, 0x03A6
    271a:	60 91 a7 03 	lds	r22, 0x03A7
    271e:	70 91 a8 03 	lds	r23, 0x03A8
    2722:	49 8b       	std	Y+17, r20	; 0x11
    2724:	5a 8b       	std	Y+18, r21	; 0x12
    2726:	6b 8b       	std	Y+19, r22	; 0x13
    2728:	7c 8b       	std	Y+20, r23	; 0x14
    272a:	c2 01       	movw	r24, r4
    272c:	b1 01       	movw	r22, r2
    272e:	29 89       	ldd	r18, Y+17	; 0x11
    2730:	3a 89       	ldd	r19, Y+18	; 0x12
    2732:	4b 89       	ldd	r20, Y+19	; 0x13
    2734:	5c 89       	ldd	r21, Y+20	; 0x14
    2736:	62 1b       	sub	r22, r18
    2738:	73 0b       	sbc	r23, r19
    273a:	84 0b       	sbc	r24, r20
    273c:	95 0b       	sbc	r25, r21
    273e:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    2742:	20 91 14 05 	lds	r18, 0x0514
    2746:	30 91 15 05 	lds	r19, 0x0515
    274a:	40 91 16 05 	lds	r20, 0x0516
    274e:	50 91 17 05 	lds	r21, 0x0517
    2752:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2756:	69 ab       	std	Y+49, r22	; 0x31
    2758:	7a ab       	std	Y+50, r23	; 0x32
    275a:	8b ab       	std	Y+51, r24	; 0x33
    275c:	9c ab       	std	Y+52, r25	; 0x34
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    275e:	21 96       	adiw	r28, 0x01	; 1
    2760:	6c ad       	ldd	r22, Y+60	; 0x3c
    2762:	7d ad       	ldd	r23, Y+61	; 0x3d
    2764:	8e ad       	ldd	r24, Y+62	; 0x3e
    2766:	9f ad       	ldd	r25, Y+63	; 0x3f
    2768:	21 97       	sbiw	r28, 0x01	; 1
    276a:	0e 94 30 26 	call	0x4c60	; 0x4c60 <square>
    276e:	3b 01       	movw	r6, r22
    2770:	4c 01       	movw	r8, r24
    2772:	69 ad       	ldd	r22, Y+57	; 0x39
    2774:	7a ad       	ldd	r23, Y+58	; 0x3a
    2776:	8b ad       	ldd	r24, Y+59	; 0x3b
    2778:	9c ad       	ldd	r25, Y+60	; 0x3c
    277a:	0e 94 30 26 	call	0x4c60	; 0x4c60 <square>
    277e:	7b 01       	movw	r14, r22
    2780:	8c 01       	movw	r16, r24
    2782:	6d a9       	ldd	r22, Y+53	; 0x35
    2784:	7e a9       	ldd	r23, Y+54	; 0x36
    2786:	8f a9       	ldd	r24, Y+55	; 0x37
    2788:	98 ad       	ldd	r25, Y+56	; 0x38
    278a:	0e 94 30 26 	call	0x4c60	; 0x4c60 <square>
    278e:	5b 01       	movw	r10, r22
    2790:	6c 01       	movw	r12, r24
    2792:	69 a9       	ldd	r22, Y+49	; 0x31
    2794:	7a a9       	ldd	r23, Y+50	; 0x32
    2796:	8b a9       	ldd	r24, Y+51	; 0x33
    2798:	9c a9       	ldd	r25, Y+52	; 0x34
    279a:	0e 94 30 26 	call	0x4c60	; 0x4c60 <square>
    279e:	1b 01       	movw	r2, r22
    27a0:	2c 01       	movw	r4, r24
    27a2:	c4 01       	movw	r24, r8
    27a4:	b3 01       	movw	r22, r6
    27a6:	a8 01       	movw	r20, r16
    27a8:	97 01       	movw	r18, r14
    27aa:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    27ae:	a6 01       	movw	r20, r12
    27b0:	95 01       	movw	r18, r10
    27b2:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    27b6:	a2 01       	movw	r20, r4
    27b8:	91 01       	movw	r18, r2
    27ba:	0e 94 97 22 	call	0x452e	; 0x452e <__addsf3>
    27be:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <sqrt>
    27c2:	23 96       	adiw	r28, 0x03	; 3
    27c4:	ae ad       	ldd	r26, Y+62	; 0x3e
    27c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    27c8:	23 97       	sbiw	r28, 0x03	; 3
    27ca:	9d 96       	adiw	r26, 0x2d	; 45
    27cc:	6d 93       	st	X+, r22
    27ce:	7d 93       	st	X+, r23
    27d0:	8d 93       	st	X+, r24
    27d2:	9c 93       	st	X, r25
    27d4:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    27d6:	e0 96       	adiw	r28, 0x30	; 48
    27d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    27da:	ff ad       	ldd	r31, Y+63	; 0x3f
    27dc:	e0 97       	sbiw	r28, 0x30	; 48
    27de:	ef 2b       	or	r30, r31
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <plan_buffer_line+0x50a>
    27e2:	9a c1       	rjmp	.+820    	; 0x2b18 <plan_buffer_line+0x83e>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    27e4:	60 ec       	ldi	r22, 0xC0	; 192
    27e6:	71 ee       	ldi	r23, 0xE1	; 225
    27e8:	84 e6       	ldi	r24, 0x64	; 100
    27ea:	9c e4       	ldi	r25, 0x4C	; 76
    27ec:	ae 96       	adiw	r28, 0x2e	; 46
    27ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    27f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    27f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    27f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    27f6:	ae 97       	sbiw	r28, 0x2e	; 46
    27f8:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    27fc:	0e 94 08 25 	call	0x4a10	; 0x4a10 <lround>
    2800:	ac 01       	movw	r20, r24
    2802:	cb 01       	movw	r24, r22
    2804:	da 01       	movw	r26, r20
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    280a:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatunsisf>
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	60 ec       	ldi	r22, 0xC0	; 192
    2814:	71 ee       	ldi	r23, 0xE1	; 225
    2816:	84 e6       	ldi	r24, 0x64	; 100
    2818:	9c e4       	ldi	r25, 0x4C	; 76
    281a:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    281e:	7b 01       	movw	r14, r22
    2820:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2822:	21 96       	adiw	r28, 0x01	; 1
    2824:	6c ad       	ldd	r22, Y+60	; 0x3c
    2826:	7d ad       	ldd	r23, Y+61	; 0x3d
    2828:	8e ad       	ldd	r24, Y+62	; 0x3e
    282a:	9f ad       	ldd	r25, Y+63	; 0x3f
    282c:	21 97       	sbiw	r28, 0x01	; 1
    282e:	a8 01       	movw	r20, r16
    2830:	97 01       	movw	r18, r14
    2832:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    2836:	23 96       	adiw	r28, 0x03	; 3
    2838:	ae ad       	ldd	r26, Y+62	; 0x3e
    283a:	bf ad       	ldd	r27, Y+63	; 0x3f
    283c:	23 97       	sbiw	r28, 0x03	; 3
    283e:	59 96       	adiw	r26, 0x19	; 25
    2840:	6d 93       	st	X+, r22
    2842:	7d 93       	st	X+, r23
    2844:	8d 93       	st	X+, r24
    2846:	9c 93       	st	X, r25
    2848:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    284a:	69 ad       	ldd	r22, Y+57	; 0x39
    284c:	7a ad       	ldd	r23, Y+58	; 0x3a
    284e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2850:	9c ad       	ldd	r25, Y+60	; 0x3c
    2852:	a8 01       	movw	r20, r16
    2854:	97 01       	movw	r18, r14
    2856:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    285a:	23 96       	adiw	r28, 0x03	; 3
    285c:	ee ad       	ldd	r30, Y+62	; 0x3e
    285e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2860:	23 97       	sbiw	r28, 0x03	; 3
    2862:	65 8f       	std	Z+29, r22	; 0x1d
    2864:	76 8f       	std	Z+30, r23	; 0x1e
    2866:	87 8f       	std	Z+31, r24	; 0x1f
    2868:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    286a:	6d a9       	ldd	r22, Y+53	; 0x35
    286c:	7e a9       	ldd	r23, Y+54	; 0x36
    286e:	8f a9       	ldd	r24, Y+55	; 0x37
    2870:	98 ad       	ldd	r25, Y+56	; 0x38
    2872:	a8 01       	movw	r20, r16
    2874:	97 01       	movw	r18, r14
    2876:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    287a:	23 96       	adiw	r28, 0x03	; 3
    287c:	ae ad       	ldd	r26, Y+62	; 0x3e
    287e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2880:	23 97       	sbiw	r28, 0x03	; 3
    2882:	91 96       	adiw	r26, 0x21	; 33
    2884:	6d 93       	st	X+, r22
    2886:	7d 93       	st	X+, r23
    2888:	8d 93       	st	X+, r24
    288a:	9c 93       	st	X, r25
    288c:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    288e:	69 a9       	ldd	r22, Y+49	; 0x31
    2890:	7a a9       	ldd	r23, Y+50	; 0x32
    2892:	8b a9       	ldd	r24, Y+51	; 0x33
    2894:	9c a9       	ldd	r25, Y+52	; 0x34
    2896:	a8 01       	movw	r20, r16
    2898:	97 01       	movw	r18, r14
    289a:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    289e:	23 96       	adiw	r28, 0x03	; 3
    28a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    28a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    28a4:	23 97       	sbiw	r28, 0x03	; 3
    28a6:	65 a3       	std	Z+37, r22	; 0x25
    28a8:	76 a3       	std	Z+38, r23	; 0x26
    28aa:	87 a3       	std	Z+39, r24	; 0x27
    28ac:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    28ae:	65 a5       	ldd	r22, Z+45	; 0x2d
    28b0:	76 a5       	ldd	r23, Z+46	; 0x2e
    28b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    28b4:	90 a9       	ldd	r25, Z+48	; 0x30
    28b6:	a8 01       	movw	r20, r16
    28b8:	97 01       	movw	r18, r14
    28ba:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    28be:	1b 01       	movw	r2, r22
    28c0:	2c 01       	movw	r4, r24
    28c2:	23 96       	adiw	r28, 0x03	; 3
    28c4:	ae ad       	ldd	r26, Y+62	; 0x3e
    28c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    28c8:	23 97       	sbiw	r28, 0x03	; 3
    28ca:	99 96       	adiw	r26, 0x29	; 41
    28cc:	6d 93       	st	X+, r22
    28ce:	7d 93       	st	X+, r23
    28d0:	8d 93       	st	X+, r24
    28d2:	9c 93       	st	X, r25
    28d4:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    28d6:	51 96       	adiw	r26, 0x11	; 17
    28d8:	6d 91       	ld	r22, X+
    28da:	7d 91       	ld	r23, X+
    28dc:	8d 91       	ld	r24, X+
    28de:	9c 91       	ld	r25, X
    28e0:	54 97       	sbiw	r26, 0x14	; 20
    28e2:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__floatsisf>
    28e6:	5b 01       	movw	r10, r22
    28e8:	6c 01       	movw	r12, r24
    28ea:	a8 01       	movw	r20, r16
    28ec:	97 01       	movw	r18, r14
    28ee:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    28f2:	0e 94 23 23 	call	0x4646	; 0x4646 <ceil>
    28f6:	0e 94 a7 23 	call	0x474e	; 0x474e <__fixunssfsi>
    28fa:	3b 01       	movw	r6, r22
    28fc:	4c 01       	movw	r8, r24
    28fe:	23 96       	adiw	r28, 0x03	; 3
    2900:	ee ad       	ldd	r30, Y+62	; 0x3e
    2902:	ff ad       	ldd	r31, Y+63	; 0x3f
    2904:	23 97       	sbiw	r28, 0x03	; 3
    2906:	65 8b       	std	Z+21, r22	; 0x15
    2908:	76 8b       	std	Z+22, r23	; 0x16
    290a:	87 8b       	std	Z+23, r24	; 0x17
    290c:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	a0 e0       	ldi	r26, 0x00	; 0
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	81 ab       	std	Z+49, r24	; 0x31
    2918:	92 ab       	std	Z+50, r25	; 0x32
    291a:	a3 ab       	std	Z+51, r26	; 0x33
    291c:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    291e:	60 91 26 05 	lds	r22, 0x0526
    2922:	70 91 27 05 	lds	r23, 0x0527
    2926:	80 91 28 05 	lds	r24, 0x0528
    292a:	90 91 29 05 	lds	r25, 0x0529
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e7       	ldi	r20, 0x70	; 112
    2934:	52 e4       	ldi	r21, 0x42	; 66
    2936:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	52 e4       	ldi	r21, 0x42	; 66
    2942:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2946:	7b 01       	movw	r14, r22
    2948:	8c 01       	movw	r16, r24
    294a:	23 96       	adiw	r28, 0x03	; 3
    294c:	ae ad       	ldd	r26, Y+62	; 0x3e
    294e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2950:	23 97       	sbiw	r28, 0x03	; 3
    2952:	9d 96       	adiw	r26, 0x2d	; 45
    2954:	6d 91       	ld	r22, X+
    2956:	7d 91       	ld	r23, X+
    2958:	8d 91       	ld	r24, X+
    295a:	9c 91       	ld	r25, X
    295c:	d0 97       	sbiw	r26, 0x30	; 48
    295e:	a6 01       	movw	r20, r12
    2960:	95 01       	movw	r18, r10
    2962:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2966:	9b 01       	movw	r18, r22
    2968:	ac 01       	movw	r20, r24
    296a:	c8 01       	movw	r24, r16
    296c:	b7 01       	movw	r22, r14
    296e:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2972:	0e 94 23 23 	call	0x4646	; 0x4646 <ceil>
    2976:	23 96       	adiw	r28, 0x03	; 3
    2978:	0e ad       	ldd	r16, Y+62	; 0x3e
    297a:	1f ad       	ldd	r17, Y+63	; 0x3f
    297c:	23 97       	sbiw	r28, 0x03	; 3
    297e:	03 5c       	subi	r16, 0xC3	; 195
    2980:	1f 4f       	sbci	r17, 0xFF	; 255
    2982:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
    2986:	f8 01       	movw	r30, r16
    2988:	60 83       	st	Z, r22
    298a:	71 83       	std	Z+1, r23	; 0x01
    298c:	82 83       	std	Z+2, r24	; 0x02
    298e:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    2990:	20 91 a9 03 	lds	r18, 0x03A9
    2994:	22 23       	and	r18, r18
    2996:	09 f0       	breq	.+2      	; 0x299a <plan_buffer_line+0x6c0>
    2998:	ce c0       	rjmp	.+412    	; 0x2b36 <plan_buffer_line+0x85c>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    299a:	23 96       	adiw	r28, 0x03	; 3
    299c:	ae ad       	ldd	r26, Y+62	; 0x3e
    299e:	bf ad       	ldd	r27, Y+63	; 0x3f
    29a0:	23 97       	sbiw	r28, 0x03	; 3
    29a2:	d5 96       	adiw	r26, 0x35	; 53
    29a4:	6d 92       	st	X+, r6
    29a6:	7d 92       	st	X+, r7
    29a8:	8d 92       	st	X+, r8
    29aa:	9c 92       	st	X, r9
    29ac:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    29ae:	fd 01       	movw	r30, r26
    29b0:	61 ae       	std	Z+57, r6	; 0x39
    29b2:	72 ae       	std	Z+58, r7	; 0x3a
    29b4:	83 ae       	std	Z+59, r8	; 0x3b
    29b6:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    29b8:	ef 5b       	subi	r30, 0xBF	; 191
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	10 82       	st	Z, r1
    29be:	11 82       	std	Z+1, r1	; 0x01
    29c0:	12 82       	std	Z+2, r1	; 0x02
    29c2:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    29c4:	ad 01       	movw	r20, r26
    29c6:	4b 5b       	subi	r20, 0xBB	; 187
    29c8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ca:	fd 01       	movw	r30, r26
    29cc:	81 89       	ldd	r24, Z+17	; 0x11
    29ce:	92 89       	ldd	r25, Z+18	; 0x12
    29d0:	a3 89       	ldd	r26, Z+19	; 0x13
    29d2:	b4 89       	ldd	r27, Z+20	; 0x14
    29d4:	fa 01       	movw	r30, r20
    29d6:	80 83       	st	Z, r24
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	a2 83       	std	Z+2, r26	; 0x02
    29dc:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    29de:	d8 01       	movw	r26, r16
    29e0:	1d 92       	st	X+, r1
    29e2:	1d 92       	st	X+, r1
    29e4:	1d 92       	st	X+, r1
    29e6:	1c 92       	st	X, r1
    29e8:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    29ea:	23 96       	adiw	r28, 0x03	; 3
    29ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    29ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    29f0:	23 97       	sbiw	r28, 0x03	; 3
    29f2:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    29f4:	4d a5       	ldd	r20, Y+45	; 0x2d
    29f6:	5e a5       	ldd	r21, Y+46	; 0x2e
    29f8:	6f a5       	ldd	r22, Y+47	; 0x2f
    29fa:	78 a9       	ldd	r23, Y+48	; 0x30
    29fc:	89 a5       	ldd	r24, Y+41	; 0x29
    29fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a00:	ab a5       	ldd	r26, Y+43	; 0x2b
    2a02:	bc a5       	ldd	r27, Y+44	; 0x2c
    2a04:	84 17       	cp	r24, r20
    2a06:	95 07       	cpc	r25, r21
    2a08:	a6 07       	cpc	r26, r22
    2a0a:	b7 07       	cpc	r27, r23
    2a0c:	14 f4       	brge	.+4      	; 0x2a12 <plan_buffer_line+0x738>
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2a12:	4d a1       	ldd	r20, Y+37	; 0x25
    2a14:	5e a1       	ldd	r21, Y+38	; 0x26
    2a16:	6f a1       	ldd	r22, Y+39	; 0x27
    2a18:	78 a5       	ldd	r23, Y+40	; 0x28
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	ab a1       	ldd	r26, Y+35	; 0x23
    2a20:	bc a1       	ldd	r27, Y+36	; 0x24
    2a22:	48 17       	cp	r20, r24
    2a24:	59 07       	cpc	r21, r25
    2a26:	6a 07       	cpc	r22, r26
    2a28:	7b 07       	cpc	r23, r27
    2a2a:	54 f4       	brge	.+20     	; 0x2a40 <plan_buffer_line+0x766>
    2a2c:	23 96       	adiw	r28, 0x03	; 3
    2a2e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a30:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a32:	23 97       	sbiw	r28, 0x03	; 3
    2a34:	50 96       	adiw	r26, 0x10	; 16
    2a36:	8c 91       	ld	r24, X
    2a38:	50 97       	sbiw	r26, 0x10	; 16
    2a3a:	88 60       	ori	r24, 0x08	; 8
    2a3c:	50 96       	adiw	r26, 0x10	; 16
    2a3e:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2a40:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2a42:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2a44:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a46:	78 a1       	ldd	r23, Y+32	; 0x20
    2a48:	89 8d       	ldd	r24, Y+25	; 0x19
    2a4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a4c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2a4e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2a50:	48 17       	cp	r20, r24
    2a52:	59 07       	cpc	r21, r25
    2a54:	6a 07       	cpc	r22, r26
    2a56:	7b 07       	cpc	r23, r27
    2a58:	54 f4       	brge	.+20     	; 0x2a6e <plan_buffer_line+0x794>
    2a5a:	23 96       	adiw	r28, 0x03	; 3
    2a5c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a5e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a60:	23 97       	sbiw	r28, 0x03	; 3
    2a62:	50 96       	adiw	r26, 0x10	; 16
    2a64:	8c 91       	ld	r24, X
    2a66:	50 97       	sbiw	r26, 0x10	; 16
    2a68:	80 64       	ori	r24, 0x40	; 64
    2a6a:	50 96       	adiw	r26, 0x10	; 16
    2a6c:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2a6e:	4d 89       	ldd	r20, Y+21	; 0x15
    2a70:	5e 89       	ldd	r21, Y+22	; 0x16
    2a72:	6f 89       	ldd	r22, Y+23	; 0x17
    2a74:	78 8d       	ldd	r23, Y+24	; 0x18
    2a76:	89 89       	ldd	r24, Y+17	; 0x11
    2a78:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7a:	ab 89       	ldd	r26, Y+19	; 0x13
    2a7c:	bc 89       	ldd	r27, Y+20	; 0x14
    2a7e:	48 17       	cp	r20, r24
    2a80:	59 07       	cpc	r21, r25
    2a82:	6a 07       	cpc	r22, r26
    2a84:	7b 07       	cpc	r23, r27
    2a86:	54 f4       	brge	.+20     	; 0x2a9c <plan_buffer_line+0x7c2>
    2a88:	23 96       	adiw	r28, 0x03	; 3
    2a8a:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a8c:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a8e:	23 97       	sbiw	r28, 0x03	; 3
    2a90:	50 96       	adiw	r26, 0x10	; 16
    2a92:	8c 91       	ld	r24, X
    2a94:	50 97       	sbiw	r26, 0x10	; 16
    2a96:	80 68       	ori	r24, 0x80	; 128
    2a98:	50 96       	adiw	r26, 0x10	; 16
    2a9a:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    2a9c:	65 96       	adiw	r28, 0x15	; 21
    2a9e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2aa0:	ff ad       	ldd	r31, Y+63	; 0x3f
    2aa2:	65 97       	sbiw	r28, 0x15	; 21
    2aa4:	f0 93 96 03 	sts	0x0396, r31
    2aa8:	e0 93 95 03 	sts	0x0395, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    2aac:	a9 e9       	ldi	r26, 0x99	; 153
    2aae:	b3 e0       	ldi	r27, 0x03	; 3
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	31 96       	adiw	r30, 0x01	; 1
    2ab4:	80 e1       	ldi	r24, 0x10	; 16
    2ab6:	01 90       	ld	r0, Z+
    2ab8:	0d 92       	st	X+, r0
    2aba:	81 50       	subi	r24, 0x01	; 1
    2abc:	e1 f7       	brne	.-8      	; 0x2ab6 <plan_buffer_line+0x7dc>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2abe:	22 23       	and	r18, r18
    2ac0:	11 f0       	breq	.+4      	; 0x2ac6 <plan_buffer_line+0x7ec>
    2ac2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <planner_recalculate>
  st_wake_up();
    2ac6:	0e 94 6f 19 	call	0x32de	; 0x32de <st_wake_up>
    2aca:	7f cd       	rjmp	.-1282   	; 0x25ca <plan_buffer_line+0x2f0>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2acc:	10 95       	com	r17
    2ace:	00 95       	com	r16
    2ad0:	f0 94       	com	r15
    2ad2:	e0 94       	com	r14
    2ad4:	e1 1c       	adc	r14, r1
    2ad6:	f1 1c       	adc	r15, r1
    2ad8:	01 1d       	adc	r16, r1
    2ada:	11 1d       	adc	r17, r1
    2adc:	38 cd       	rjmp	.-1424   	; 0x254e <plan_buffer_line+0x274>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2ade:	b0 95       	com	r27
    2ae0:	a0 95       	com	r26
    2ae2:	90 95       	com	r25
    2ae4:	81 95       	neg	r24
    2ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae8:	af 4f       	sbci	r26, 0xFF	; 255
    2aea:	bf 4f       	sbci	r27, 0xFF	; 255
    2aec:	23 96       	adiw	r28, 0x03	; 3
    2aee:	ee ad       	ldd	r30, Y+62	; 0x3e
    2af0:	ff ad       	ldd	r31, Y+63	; 0x3f
    2af2:	23 97       	sbiw	r28, 0x03	; 3
    2af4:	14 cd       	rjmp	.-1496   	; 0x251e <plan_buffer_line+0x244>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2af6:	b0 95       	com	r27
    2af8:	a0 95       	com	r26
    2afa:	90 95       	com	r25
    2afc:	81 95       	neg	r24
    2afe:	9f 4f       	sbci	r25, 0xFF	; 255
    2b00:	af 4f       	sbci	r26, 0xFF	; 255
    2b02:	bf 4f       	sbci	r27, 0xFF	; 255
    2b04:	ee cc       	rjmp	.-1572   	; 0x24e2 <plan_buffer_line+0x208>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2b06:	d0 94       	com	r13
    2b08:	c0 94       	com	r12
    2b0a:	b0 94       	com	r11
    2b0c:	a0 94       	com	r10
    2b0e:	a1 1c       	adc	r10, r1
    2b10:	b1 1c       	adc	r11, r1
    2b12:	c1 1c       	adc	r12, r1
    2b14:	d1 1c       	adc	r13, r1
    2b16:	8e cc       	rjmp	.-1764   	; 0x2434 <plan_buffer_line+0x15a>
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2b18:	ae 96       	adiw	r28, 0x2e	; 46
    2b1a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b1c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b1e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b20:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b22:	ae 97       	sbiw	r28, 0x2e	; 46
    2b24:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	34 e2       	ldi	r19, 0x24	; 36
    2b2c:	44 e7       	ldi	r20, 0x74	; 116
    2b2e:	59 e4       	ldi	r21, 0x49	; 73
    2b30:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    2b34:	63 ce       	rjmp	.-826    	; 0x27fc <plan_buffer_line+0x522>
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
    2b36:	60 91 2a 05 	lds	r22, 0x052A
    2b3a:	70 91 2b 05 	lds	r23, 0x052B
    2b3e:	80 91 2c 05 	lds	r24, 0x052C
    2b42:	90 91 2d 05 	lds	r25, 0x052D
    2b46:	a2 01       	movw	r20, r4
    2b48:	91 01       	movw	r18, r2
    2b4a:	0e 94 3a 23 	call	0x4674	; 0x4674 <__divsf3>
    2b4e:	8b 01       	movw	r16, r22
    2b50:	9c 01       	movw	r18, r24
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    2b52:	23 96       	adiw	r28, 0x03	; 3
    2b54:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b56:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b58:	23 97       	sbiw	r28, 0x03	; 3
    2b5a:	a8 01       	movw	r20, r16
    2b5c:	b9 01       	movw	r22, r18
    2b5e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <calculate_trapezoid_for_block>
    2b62:	29 81       	ldd	r18, Y+1	; 0x01
    2b64:	3a 81       	ldd	r19, Y+2	; 0x02
    2b66:	4b 81       	ldd	r20, Y+3	; 0x03
    2b68:	5c 81       	ldd	r21, Y+4	; 0x04
    2b6a:	29 a7       	std	Y+41, r18	; 0x29
    2b6c:	3a a7       	std	Y+42, r19	; 0x2a
    2b6e:	4b a7       	std	Y+43, r20	; 0x2b
    2b70:	5c a7       	std	Y+44, r21	; 0x2c
    2b72:	40 91 99 03 	lds	r20, 0x0399
    2b76:	50 91 9a 03 	lds	r21, 0x039A
    2b7a:	60 91 9b 03 	lds	r22, 0x039B
    2b7e:	70 91 9c 03 	lds	r23, 0x039C
    2b82:	4d a7       	std	Y+45, r20	; 0x2d
    2b84:	5e a7       	std	Y+46, r21	; 0x2e
    2b86:	6f a7       	std	Y+47, r22	; 0x2f
    2b88:	78 ab       	std	Y+48, r23	; 0x30
    2b8a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b8c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b90:	98 85       	ldd	r25, Y+8	; 0x08
    2b92:	6d a3       	std	Y+37, r22	; 0x25
    2b94:	7e a3       	std	Y+38, r23	; 0x26
    2b96:	8f a3       	std	Y+39, r24	; 0x27
    2b98:	98 a7       	std	Y+40, r25	; 0x28
    2b9a:	80 91 9d 03 	lds	r24, 0x039D
    2b9e:	90 91 9e 03 	lds	r25, 0x039E
    2ba2:	a0 91 9f 03 	lds	r26, 0x039F
    2ba6:	b0 91 a0 03 	lds	r27, 0x03A0
    2baa:	89 a3       	std	Y+33, r24	; 0x21
    2bac:	9a a3       	std	Y+34, r25	; 0x22
    2bae:	ab a3       	std	Y+35, r26	; 0x23
    2bb0:	bc a3       	std	Y+36, r27	; 0x24
    2bb2:	29 85       	ldd	r18, Y+9	; 0x09
    2bb4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bb6:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bb8:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bba:	2d 8f       	std	Y+29, r18	; 0x1d
    2bbc:	3e 8f       	std	Y+30, r19	; 0x1e
    2bbe:	4f 8f       	std	Y+31, r20	; 0x1f
    2bc0:	58 a3       	std	Y+32, r21	; 0x20
    2bc2:	40 91 a1 03 	lds	r20, 0x03A1
    2bc6:	50 91 a2 03 	lds	r21, 0x03A2
    2bca:	60 91 a3 03 	lds	r22, 0x03A3
    2bce:	70 91 a4 03 	lds	r23, 0x03A4
    2bd2:	49 8f       	std	Y+25, r20	; 0x19
    2bd4:	5a 8f       	std	Y+26, r21	; 0x1a
    2bd6:	6b 8f       	std	Y+27, r22	; 0x1b
    2bd8:	7c 8f       	std	Y+28, r23	; 0x1c
    2bda:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bdc:	7e 85       	ldd	r23, Y+14	; 0x0e
    2bde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be0:	98 89       	ldd	r25, Y+16	; 0x10
    2be2:	6d 8b       	std	Y+21, r22	; 0x15
    2be4:	7e 8b       	std	Y+22, r23	; 0x16
    2be6:	8f 8b       	std	Y+23, r24	; 0x17
    2be8:	98 8f       	std	Y+24, r25	; 0x18
    2bea:	80 91 a5 03 	lds	r24, 0x03A5
    2bee:	90 91 a6 03 	lds	r25, 0x03A6
    2bf2:	a0 91 a7 03 	lds	r26, 0x03A7
    2bf6:	b0 91 a8 03 	lds	r27, 0x03A8
    2bfa:	89 8b       	std	Y+17, r24	; 0x11
    2bfc:	9a 8b       	std	Y+18, r25	; 0x12
    2bfe:	ab 8b       	std	Y+19, r26	; 0x13
    2c00:	bc 8b       	std	Y+20, r27	; 0x14
    2c02:	20 91 a9 03 	lds	r18, 0x03A9
    2c06:	f1 ce       	rjmp	.-542    	; 0x29ea <plan_buffer_line+0x710>

00002c08 <sp_process>:
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    2c08:	1f 93       	push	r17
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2c0a:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <serialRead>
    2c0e:	98 2f       	mov	r25, r24
    2c10:	8f 3f       	cpi	r24, 0xFF	; 255
    2c12:	e1 f0       	breq	.+56     	; 0x2c4c <sp_process+0x44>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    2c14:	20 91 dc 03 	lds	r18, 0x03DC
    2c18:	22 23       	and	r18, r18
    2c1a:	21 f0       	breq	.+8      	; 0x2c24 <sp_process+0x1c>
    2c1c:	9a 30       	cpi	r25, 0x0A	; 10
    2c1e:	c1 f0       	breq	.+48     	; 0x2c50 <sp_process+0x48>
    2c20:	9d 30       	cpi	r25, 0x0D	; 13
    2c22:	b1 f0       	breq	.+44     	; 0x2c50 <sp_process+0x48>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    2c24:	91 32       	cpi	r25, 0x21	; 33
    2c26:	8c f3       	brlt	.-30     	; 0x2c0a <sp_process+0x2>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2c28:	89 2f       	mov	r24, r25
    2c2a:	81 56       	subi	r24, 0x61	; 97
    2c2c:	8a 31       	cpi	r24, 0x1A	; 26
    2c2e:	48 f5       	brcc	.+82     	; 0x2c82 <sp_process+0x7a>
      line[char_counter++] = c-'a'+'A';
    2c30:	e2 2f       	mov	r30, r18
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	e6 55       	subi	r30, 0x56	; 86
    2c36:	fc 4f       	sbci	r31, 0xFC	; 252
    2c38:	90 52       	subi	r25, 0x20	; 32
    2c3a:	90 83       	st	Z, r25
    2c3c:	2f 5f       	subi	r18, 0xFF	; 255
    2c3e:	20 93 dc 03 	sts	0x03DC, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2c42:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <serialRead>
    2c46:	98 2f       	mov	r25, r24
    2c48:	8f 3f       	cpi	r24, 0xFF	; 255
    2c4a:	21 f7       	brne	.-56     	; 0x2c14 <sp_process+0xc>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2c4c:	1f 91       	pop	r17
    2c4e:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    2c50:	e2 2f       	mov	r30, r18
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	e6 55       	subi	r30, 0x56	; 86
    2c56:	fc 4f       	sbci	r31, 0xFC	; 252
    2c58:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2c5a:	8a ea       	ldi	r24, 0xAA	; 170
    2c5c:	93 e0       	ldi	r25, 0x03	; 3
    2c5e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <gc_execute_line>
    2c62:	18 2f       	mov	r17, r24
static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code) {

	if( gHomed == FALSE ) {
    2c64:	80 91 dd 03 	lds	r24, 0x03DD
    2c68:	88 23       	and	r24, r24
    2c6a:	59 f1       	breq	.+86     	; 0x2cc2 <sp_process+0xba>
    	printPgmString(PSTR("Not homed\n\r"));
	}


  switch(status_code) {          
    2c6c:	12 30       	cpi	r17, 0x02	; 2
    2c6e:	79 f1       	breq	.+94     	; 0x2cce <sp_process+0xc6>
    2c70:	13 30       	cpi	r17, 0x03	; 3
    2c72:	80 f4       	brcc	.+32     	; 0x2c94 <sp_process+0x8c>
    2c74:	11 23       	and	r17, r17
    2c76:	81 f5       	brne	.+96     	; 0x2cd8 <sp_process+0xd0>
    case GCSTATUS_OK:
    printPgmString(PSTR("ok\n\r")); break;
    2c78:	82 e9       	ldi	r24, 0x92	; 146
    2c7a:	92 e0       	ldi	r25, 0x02	; 2
    2c7c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    2c80:	1d c0       	rjmp	.+58     	; 0x2cbc <sp_process+0xb4>
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    2c82:	e2 2f       	mov	r30, r18
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	e6 55       	subi	r30, 0x56	; 86
    2c88:	fc 4f       	sbci	r31, 0xFC	; 252
    2c8a:	90 83       	st	Z, r25
    2c8c:	2f 5f       	subi	r18, 0xFF	; 255
    2c8e:	20 93 dc 03 	sts	0x03DC, r18
    2c92:	bb cf       	rjmp	.-138    	; 0x2c0a <sp_process+0x2>
	if( gHomed == FALSE ) {
    	printPgmString(PSTR("Not homed\n\r"));
	}


  switch(status_code) {          
    2c94:	13 30       	cpi	r17, 0x03	; 3
    2c96:	61 f1       	breq	.+88     	; 0x2cf0 <sp_process+0xe8>
    2c98:	14 30       	cpi	r17, 0x04	; 4
    2c9a:	29 f1       	breq	.+74     	; 0x2ce6 <sp_process+0xde>
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    printPgmString(PSTR("error: Unsupported statement\n\r")); break;
    case GCSTATUS_FLOATING_POINT_ERROR:
    printPgmString(PSTR("error: Floating point error\n\r")); break;
    default:
    printPgmString(PSTR("error: "));
    2c9c:	81 e1       	ldi	r24, 0x11	; 17
    2c9e:	92 e0       	ldi	r25, 0x02	; 2
    2ca0:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    printInteger(status_code);
    2ca4:	61 2f       	mov	r22, r17
    2ca6:	70 e0       	ldi	r23, 0x00	; 0
    2ca8:	88 27       	eor	r24, r24
    2caa:	77 fd       	sbrc	r23, 7
    2cac:	80 95       	com	r24
    2cae:	98 2f       	mov	r25, r24
    2cb0:	0e 94 49 20 	call	0x4092	; 0x4092 <printInteger>
    printPgmString(PSTR("\n\r"));
    2cb4:	8e e0       	ldi	r24, 0x0E	; 14
    2cb6:	92 e0       	ldi	r25, 0x02	; 2
    2cb8:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2cbc:	10 92 dc 03 	sts	0x03DC, r1
    2cc0:	a4 cf       	rjmp	.-184    	; 0x2c0a <sp_process+0x2>
static uint8_t char_counter;

static void status_message(int status_code) {

	if( gHomed == FALSE ) {
    	printPgmString(PSTR("Not homed\n\r"));
    2cc2:	87 e9       	ldi	r24, 0x97	; 151
    2cc4:	92 e0       	ldi	r25, 0x02	; 2
    2cc6:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
	}


  switch(status_code) {          
    2cca:	12 30       	cpi	r17, 0x02	; 2
    2ccc:	89 f6       	brne	.-94     	; 0x2c70 <sp_process+0x68>
    case GCSTATUS_OK:
    printPgmString(PSTR("ok\n\r")); break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    printPgmString(PSTR("error: Bad number format\n\r")); break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    printPgmString(PSTR("error: Expected command letter\n\r")); break;
    2cce:	86 e5       	ldi	r24, 0x56	; 86
    2cd0:	92 e0       	ldi	r25, 0x02	; 2
    2cd2:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    2cd6:	f2 cf       	rjmp	.-28     	; 0x2cbc <sp_process+0xb4>
	if( gHomed == FALSE ) {
    	printPgmString(PSTR("Not homed\n\r"));
	}


  switch(status_code) {          
    2cd8:	11 30       	cpi	r17, 0x01	; 1
    2cda:	01 f7       	brne	.-64     	; 0x2c9c <sp_process+0x94>
    case GCSTATUS_OK:
    printPgmString(PSTR("ok\n\r")); break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    printPgmString(PSTR("error: Bad number format\n\r")); break;
    2cdc:	87 e7       	ldi	r24, 0x77	; 119
    2cde:	92 e0       	ldi	r25, 0x02	; 2
    2ce0:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    2ce4:	eb cf       	rjmp	.-42     	; 0x2cbc <sp_process+0xb4>
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    printPgmString(PSTR("error: Expected command letter\n\r")); break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    printPgmString(PSTR("error: Unsupported statement\n\r")); break;
    case GCSTATUS_FLOATING_POINT_ERROR:
    printPgmString(PSTR("error: Floating point error\n\r")); break;
    2ce6:	89 e1       	ldi	r24, 0x19	; 25
    2ce8:	92 e0       	ldi	r25, 0x02	; 2
    2cea:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    2cee:	e6 cf       	rjmp	.-52     	; 0x2cbc <sp_process+0xb4>
    case GCSTATUS_BAD_NUMBER_FORMAT:
    printPgmString(PSTR("error: Bad number format\n\r")); break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    printPgmString(PSTR("error: Expected command letter\n\r")); break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    printPgmString(PSTR("error: Unsupported statement\n\r")); break;
    2cf0:	87 e3       	ldi	r24, 0x37	; 55
    2cf2:	92 e0       	ldi	r25, 0x02	; 2
    2cf4:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    2cf8:	e1 cf       	rjmp	.-62     	; 0x2cbc <sp_process+0xb4>

00002cfa <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	76 e9       	ldi	r23, 0x96	; 150
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <beginSerial>
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
    2d06:	86 ea       	ldi	r24, 0xA6	; 166
    2d08:	92 e0       	ldi	r25, 0x02	; 2
    2d0a:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printPgmString(PSTR("\r\n"));  
    2d0e:	83 ea       	ldi	r24, 0xA3	; 163
    2d10:	92 e0       	ldi	r25, 0x02	; 2
    2d12:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
}
    2d16:	08 95       	ret

00002d18 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2d18:	84 ef       	ldi	r24, 0xF4	; 244
    2d1a:	99 ef       	ldi	r25, 0xF9	; 249
    2d1c:	ac e3       	ldi	r26, 0x3C	; 60
    2d1e:	b4 e4       	ldi	r27, 0x44	; 68
    2d20:	80 93 08 05 	sts	0x0508, r24
    2d24:	90 93 09 05 	sts	0x0509, r25
    2d28:	a0 93 0a 05 	sts	0x050A, r26
    2d2c:	b0 93 0b 05 	sts	0x050B, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2d30:	80 93 0c 05 	sts	0x050C, r24
    2d34:	90 93 0d 05 	sts	0x050D, r25
    2d38:	a0 93 0e 05 	sts	0x050E, r26
    2d3c:	b0 93 0f 05 	sts	0x050F, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2d40:	80 93 10 05 	sts	0x0510, r24
    2d44:	90 93 11 05 	sts	0x0511, r25
    2d48:	a0 93 12 05 	sts	0x0512, r26
    2d4c:	b0 93 13 05 	sts	0x0513, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2d50:	81 ec       	ldi	r24, 0xC1	; 193
    2d52:	9a ec       	ldi	r25, 0xCA	; 202
    2d54:	a1 e3       	ldi	r26, 0x31	; 49
    2d56:	b2 e4       	ldi	r27, 0x42	; 66
    2d58:	80 93 14 05 	sts	0x0514, r24
    2d5c:	90 93 15 05 	sts	0x0515, r25
    2d60:	a0 93 16 05 	sts	0x0516, r26
    2d64:	b0 93 17 05 	sts	0x0517, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2d68:	88 e0       	ldi	r24, 0x08	; 8
    2d6a:	80 93 19 05 	sts	0x0519, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	a0 ef       	ldi	r26, 0xF0	; 240
    2d74:	b3 e4       	ldi	r27, 0x43	; 67
    2d76:	80 93 1a 05 	sts	0x051A, r24
    2d7a:	90 93 1b 05 	sts	0x051B, r25
    2d7e:	a0 93 1c 05 	sts	0x051C, r26
    2d82:	b0 93 1d 05 	sts	0x051D, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2d86:	80 93 1e 05 	sts	0x051E, r24
    2d8a:	90 93 1f 05 	sts	0x051F, r25
    2d8e:	a0 93 20 05 	sts	0x0520, r26
    2d92:	b0 93 21 05 	sts	0x0521, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2d96:	8a e9       	ldi	r24, 0x9A	; 154
    2d98:	99 e9       	ldi	r25, 0x99	; 153
    2d9a:	a9 e9       	ldi	r26, 0x99	; 153
    2d9c:	b0 e4       	ldi	r27, 0x40	; 64
    2d9e:	80 93 26 05 	sts	0x0526, r24
    2da2:	90 93 27 05 	sts	0x0527, r25
    2da6:	a0 93 28 05 	sts	0x0528, r26
    2daa:	b0 93 29 05 	sts	0x0529, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2dae:	8d ec       	ldi	r24, 0xCD	; 205
    2db0:	9c ec       	ldi	r25, 0xCC	; 204
    2db2:	ac ec       	ldi	r26, 0xCC	; 204
    2db4:	bd e3       	ldi	r27, 0x3D	; 61
    2db6:	80 93 22 05 	sts	0x0522, r24
    2dba:	90 93 23 05 	sts	0x0523, r25
    2dbe:	a0 93 24 05 	sts	0x0524, r26
    2dc2:	b0 93 25 05 	sts	0x0525, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	a8 e4       	ldi	r26, 0x48	; 72
    2dcc:	b2 e4       	ldi	r27, 0x42	; 66
    2dce:	80 93 2a 05 	sts	0x052A, r24
    2dd2:	90 93 2b 05 	sts	0x052B, r25
    2dd6:	a0 93 2c 05 	sts	0x052C, r26
    2dda:	b0 93 2d 05 	sts	0x052D, r27
}
    2dde:	08 95       	ret

00002de0 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2de8:	87 36       	cpi	r24, 0x67	; 103
    2dea:	31 f0       	breq	.+12     	; 0x2df8 <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2dec:	81 30       	cpi	r24, 0x01	; 1
    2dee:	a9 f0       	breq	.+42     	; 0x2e1a <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2df4:	c9 01       	movw	r24, r18
    2df6:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2df8:	88 e0       	ldi	r24, 0x08	; 8
    2dfa:	95 e0       	ldi	r25, 0x05	; 5
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	46 e2       	ldi	r20, 0x26	; 38
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	0e 94 1b 03 	call	0x636	; 0x636 <memcpy_from_eeprom_with_checksum>
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	89 2b       	or	r24, r25
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <read_settings+0x30>
    2e0e:	21 e0       	ldi	r18, 0x01	; 1
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	28 27       	eor	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2e16:	c9 01       	movw	r24, r18
    2e18:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2e1a:	88 e0       	ldi	r24, 0x08	; 8
    2e1c:	95 e0       	ldi	r25, 0x05	; 5
    2e1e:	61 e0       	ldi	r22, 0x01	; 1
    2e20:	70 e0       	ldi	r23, 0x00	; 0
    2e22:	4b e1       	ldi	r20, 0x1B	; 27
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	0e 94 1b 03 	call	0x636	; 0x636 <memcpy_from_eeprom_with_checksum>
    2e2a:	89 2b       	or	r24, r25
    2e2c:	09 f3       	breq	.-62     	; 0x2df0 <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2e2e:	8a e9       	ldi	r24, 0x9A	; 154
    2e30:	99 e9       	ldi	r25, 0x99	; 153
    2e32:	a9 e9       	ldi	r26, 0x99	; 153
    2e34:	b0 e4       	ldi	r27, 0x40	; 64
    2e36:	80 93 26 05 	sts	0x0526, r24
    2e3a:	90 93 27 05 	sts	0x0527, r25
    2e3e:	a0 93 28 05 	sts	0x0528, r26
    2e42:	b0 93 29 05 	sts	0x0529, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a8 e4       	ldi	r26, 0x48	; 72
    2e4c:	b2 e4       	ldi	r27, 0x42	; 66
    2e4e:	80 93 2a 05 	sts	0x052A, r24
    2e52:	90 93 2b 05 	sts	0x052B, r25
    2e56:	a0 93 2c 05 	sts	0x052C, r26
    2e5a:	b0 93 2d 05 	sts	0x052D, r27
    2e5e:	21 e0       	ldi	r18, 0x01	; 1
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	c8 cf       	rjmp	.-112    	; 0x2df4 <read_settings+0x14>

00002e64 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	67 e6       	ldi	r22, 0x67	; 103
    2e6a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	68 e0       	ldi	r22, 0x08	; 8
    2e74:	75 e0       	ldi	r23, 0x05	; 5
    2e76:	46 e2       	ldi	r20, 0x26	; 38
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <memcpy_to_eeprom_with_checksum>
}
    2e7e:	08 95       	ret

00002e80 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2e80:	8b ef       	ldi	r24, 0xFB	; 251
    2e82:	94 e0       	ldi	r25, 0x04	; 4
    2e84:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2e88:	86 ef       	ldi	r24, 0xF6	; 246
    2e8a:	94 e0       	ldi	r25, 0x04	; 4
    2e8c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printPgmString(PSTR("\r\n"));
    2e90:	83 ef       	ldi	r24, 0xF3	; 243
    2e92:	94 e0       	ldi	r25, 0x04	; 4
    2e94:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2e98:	8d ee       	ldi	r24, 0xED	; 237
    2e9a:	94 e0       	ldi	r25, 0x04	; 4
    2e9c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2ea0:	60 91 08 05 	lds	r22, 0x0508
    2ea4:	70 91 09 05 	lds	r23, 0x0509
    2ea8:	80 91 0a 05 	lds	r24, 0x050A
    2eac:	90 91 0b 05 	lds	r25, 0x050B
    2eb0:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2eb4:	8d ed       	ldi	r24, 0xDD	; 221
    2eb6:	94 e0       	ldi	r25, 0x04	; 4
    2eb8:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2ebc:	87 ed       	ldi	r24, 0xD7	; 215
    2ebe:	94 e0       	ldi	r25, 0x04	; 4
    2ec0:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2ec4:	60 91 0c 05 	lds	r22, 0x050C
    2ec8:	70 91 0d 05 	lds	r23, 0x050D
    2ecc:	80 91 0e 05 	lds	r24, 0x050E
    2ed0:	90 91 0f 05 	lds	r25, 0x050F
    2ed4:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2ed8:	87 ec       	ldi	r24, 0xC7	; 199
    2eda:	94 e0       	ldi	r25, 0x04	; 4
    2edc:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2ee0:	81 ec       	ldi	r24, 0xC1	; 193
    2ee2:	94 e0       	ldi	r25, 0x04	; 4
    2ee4:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2ee8:	60 91 10 05 	lds	r22, 0x0510
    2eec:	70 91 11 05 	lds	r23, 0x0511
    2ef0:	80 91 12 05 	lds	r24, 0x0512
    2ef4:	90 91 13 05 	lds	r25, 0x0513
    2ef8:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2efc:	81 eb       	ldi	r24, 0xB1	; 177
    2efe:	94 e0       	ldi	r25, 0x04	; 4
    2f00:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2f04:	8b ea       	ldi	r24, 0xAB	; 171
    2f06:	94 e0       	ldi	r25, 0x04	; 4
    2f08:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2f0c:	60 91 14 05 	lds	r22, 0x0514
    2f10:	70 91 15 05 	lds	r23, 0x0515
    2f14:	80 91 16 05 	lds	r24, 0x0516
    2f18:	90 91 17 05 	lds	r25, 0x0517
    2f1c:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2f20:	89 e9       	ldi	r24, 0x99	; 153
    2f22:	94 e0       	ldi	r25, 0x04	; 4
    2f24:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2f28:	83 e9       	ldi	r24, 0x93	; 147
    2f2a:	94 e0       	ldi	r25, 0x04	; 4
    2f2c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printInteger(settings.pulse_microseconds);
    2f30:	60 91 19 05 	lds	r22, 0x0519
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	0e 94 49 20 	call	0x4092	; 0x4092 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2f3e:	86 e7       	ldi	r24, 0x76	; 118
    2f40:	94 e0       	ldi	r25, 0x04	; 4
    2f42:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2f46:	80 e7       	ldi	r24, 0x70	; 112
    2f48:	94 e0       	ldi	r25, 0x04	; 4
    2f4a:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.default_feed_rate);
    2f4e:	60 91 1a 05 	lds	r22, 0x051A
    2f52:	70 91 1b 05 	lds	r23, 0x051B
    2f56:	80 91 1c 05 	lds	r24, 0x051C
    2f5a:	90 91 1d 05 	lds	r25, 0x051D
    2f5e:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2f62:	82 e5       	ldi	r24, 0x52	; 82
    2f64:	94 e0       	ldi	r25, 0x04	; 4
    2f66:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2f6a:	8c e4       	ldi	r24, 0x4C	; 76
    2f6c:	94 e0       	ldi	r25, 0x04	; 4
    2f6e:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.default_seek_rate);
    2f72:	60 91 1e 05 	lds	r22, 0x051E
    2f76:	70 91 1f 05 	lds	r23, 0x051F
    2f7a:	80 91 20 05 	lds	r24, 0x0520
    2f7e:	90 91 21 05 	lds	r25, 0x0521
    2f82:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2f86:	8e e2       	ldi	r24, 0x2E	; 46
    2f88:	94 e0       	ldi	r25, 0x04	; 4
    2f8a:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2f8e:	88 e2       	ldi	r24, 0x28	; 40
    2f90:	94 e0       	ldi	r25, 0x04	; 4
    2f92:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2f96:	60 91 22 05 	lds	r22, 0x0522
    2f9a:	70 91 23 05 	lds	r23, 0x0523
    2f9e:	80 91 24 05 	lds	r24, 0x0524
    2fa2:	90 91 25 05 	lds	r25, 0x0525
    2fa6:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2faa:	84 e1       	ldi	r24, 0x14	; 20
    2fac:	94 e0       	ldi	r25, 0x04	; 4
    2fae:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2fb2:	8e e0       	ldi	r24, 0x0E	; 14
    2fb4:	94 e0       	ldi	r25, 0x04	; 4
    2fb6:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.acceleration);
    2fba:	60 91 26 05 	lds	r22, 0x0526
    2fbe:	70 91 27 05 	lds	r23, 0x0527
    2fc2:	80 91 28 05 	lds	r24, 0x0528
    2fc6:	90 91 29 05 	lds	r25, 0x0529
    2fca:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2fce:	80 ef       	ldi	r24, 0xF0	; 240
    2fd0:	93 e0       	ldi	r25, 0x03	; 3
    2fd2:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2fd6:	8a ee       	ldi	r24, 0xEA	; 234
    2fd8:	93 e0       	ldi	r25, 0x03	; 3
    2fda:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printFloat(settings.max_jerk);
    2fde:	60 91 2a 05 	lds	r22, 0x052A
    2fe2:	70 91 2b 05 	lds	r23, 0x052B
    2fe6:	80 91 2c 05 	lds	r24, 0x052C
    2fea:	90 91 2d 05 	lds	r25, 0x052D
    2fee:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2ff2:	82 eb       	ldi	r24, 0xB2	; 178
    2ff4:	93 e0       	ldi	r25, 0x03	; 3
    2ff6:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2ffa:	89 ea       	ldi	r24, 0xA9	; 169
    2ffc:	93 e0       	ldi	r25, 0x03	; 3
    2ffe:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  printInteger(st_is_enabled());
    3002:	0e 94 88 19 	call	0x3310	; 0x3310 <st_is_enabled>
    3006:	aa 27       	eor	r26, r26
    3008:	97 fd       	sbrc	r25, 7
    300a:	a0 95       	com	r26
    300c:	ba 2f       	mov	r27, r26
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	0e 94 49 20 	call	0x4092	; 0x4092 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    3016:	80 e8       	ldi	r24, 0x80	; 128
    3018:	93 e0       	ldi	r25, 0x03	; 3
    301a:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    301e:	8d e3       	ldi	r24, 0x3D	; 61
    3020:	93 e0       	ldi	r25, 0x03	; 3
    3022:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
}
    3026:	08 95       	ret

00003028 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    3028:	fc 01       	movw	r30, r24
  switch(parameter) {
    302a:	86 30       	cpi	r24, 0x06	; 6
    302c:	91 05       	cpc	r25, r1
    302e:	09 f4       	brne	.+2      	; 0x3032 <settings_store_setting+0xa>
    3030:	5f c0       	rjmp	.+190    	; 0x30f0 <settings_store_setting+0xc8>
    3032:	87 30       	cpi	r24, 0x07	; 7
    3034:	91 05       	cpc	r25, r1
    3036:	a4 f0       	brlt	.+40     	; 0x3060 <settings_store_setting+0x38>
    3038:	88 30       	cpi	r24, 0x08	; 8
    303a:	91 05       	cpc	r25, r1
    303c:	09 f4       	brne	.+2      	; 0x3040 <settings_store_setting+0x18>
    303e:	46 c0       	rjmp	.+140    	; 0x30cc <settings_store_setting+0xa4>
    3040:	88 30       	cpi	r24, 0x08	; 8
    3042:	91 05       	cpc	r25, r1
    3044:	d4 f1       	brlt	.+116    	; 0x30ba <settings_store_setting+0x92>
    3046:	89 30       	cpi	r24, 0x09	; 9
    3048:	91 05       	cpc	r25, r1
    304a:	09 f4       	brne	.+2      	; 0x304e <settings_store_setting+0x26>
    304c:	67 c0       	rjmp	.+206    	; 0x311c <settings_store_setting+0xf4>
    304e:	e8 5e       	subi	r30, 0xE8	; 232
    3050:	f3 40       	sbci	r31, 0x03	; 3
    3052:	09 f4       	brne	.+2      	; 0x3056 <settings_store_setting+0x2e>
    3054:	56 c0       	rjmp	.+172    	; 0x3102 <settings_store_setting+0xda>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    3056:	89 e2       	ldi	r24, 0x29	; 41
    3058:	93 e0       	ldi	r25, 0x03	; 3
    305a:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    305e:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    3060:	84 30       	cpi	r24, 0x04	; 4
    3062:	91 05       	cpc	r25, r1
    3064:	e1 f1       	breq	.+120    	; 0x30de <settings_store_setting+0xb6>
    3066:	85 30       	cpi	r24, 0x05	; 5
    3068:	91 05       	cpc	r25, r1
    306a:	f4 f4       	brge	.+60     	; 0x30a8 <settings_store_setting+0x80>
    306c:	97 fd       	sbrc	r25, 7
    306e:	f3 cf       	rjmp	.-26     	; 0x3056 <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    3070:	ee 0f       	add	r30, r30
    3072:	ff 1f       	adc	r31, r31
    3074:	ee 0f       	add	r30, r30
    3076:	ff 1f       	adc	r31, r31
    3078:	e8 5f       	subi	r30, 0xF8	; 248
    307a:	fa 4f       	sbci	r31, 0xFA	; 250
    307c:	40 83       	st	Z, r20
    307e:	51 83       	std	Z+1, r21	; 0x01
    3080:	62 83       	std	Z+2, r22	; 0x02
    3082:	73 83       	std	Z+3, r23	; 0x03
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	67 e6       	ldi	r22, 0x67	; 103
    308a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	68 e0       	ldi	r22, 0x08	; 8
    3094:	75 e0       	ldi	r23, 0x05	; 5
    3096:	46 e2       	ldi	r20, 0x26	; 38
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <memcpy_to_eeprom_with_checksum>
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
  printPgmString(PSTR("Stored new setting\r\n"));
    309e:	84 e1       	ldi	r24, 0x14	; 20
    30a0:	93 e0       	ldi	r25, 0x03	; 3
    30a2:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    30a6:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    30a8:	40 93 1a 05 	sts	0x051A, r20
    30ac:	50 93 1b 05 	sts	0x051B, r21
    30b0:	60 93 1c 05 	sts	0x051C, r22
    30b4:	70 93 1d 05 	sts	0x051D, r23
    30b8:	e5 cf       	rjmp	.-54     	; 0x3084 <settings_store_setting+0x5c>
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    30ba:	40 93 22 05 	sts	0x0522, r20
    30be:	50 93 23 05 	sts	0x0523, r21
    30c2:	60 93 24 05 	sts	0x0524, r22
    30c6:	70 93 25 05 	sts	0x0525, r23
    30ca:	dc cf       	rjmp	.-72     	; 0x3084 <settings_store_setting+0x5c>
    case 8: settings.acceleration = value; break;
    30cc:	40 93 26 05 	sts	0x0526, r20
    30d0:	50 93 27 05 	sts	0x0527, r21
    30d4:	60 93 28 05 	sts	0x0528, r22
    30d8:	70 93 29 05 	sts	0x0529, r23
    30dc:	d3 cf       	rjmp	.-90     	; 0x3084 <settings_store_setting+0x5c>
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    30de:	cb 01       	movw	r24, r22
    30e0:	ba 01       	movw	r22, r20
    30e2:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <round>
    30e6:	0e 94 a7 23 	call	0x474e	; 0x474e <__fixunssfsi>
    30ea:	60 93 19 05 	sts	0x0519, r22
    30ee:	ca cf       	rjmp	.-108    	; 0x3084 <settings_store_setting+0x5c>
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    30f0:	40 93 1e 05 	sts	0x051E, r20
    30f4:	50 93 1f 05 	sts	0x051F, r21
    30f8:	60 93 20 05 	sts	0x0520, r22
    30fc:	70 93 21 05 	sts	0x0521, r23
    3100:	c1 cf       	rjmp	.-126    	; 0x3084 <settings_store_setting+0x5c>
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    3102:	cb 01       	movw	r24, r22
    3104:	ba 01       	movw	r22, r20
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e0       	ldi	r20, 0x00	; 0
    310c:	50 e0       	ldi	r21, 0x00	; 0
    310e:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    3112:	88 23       	and	r24, r24
    3114:	79 f0       	breq	.+30     	; 0x3134 <settings_store_setting+0x10c>
    3116:	0e 94 84 19 	call	0x3308	; 0x3308 <st_enable>
    311a:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    311c:	db 01       	movw	r26, r22
    311e:	ca 01       	movw	r24, r20
    3120:	bf 77       	andi	r27, 0x7F	; 127
    3122:	80 93 2a 05 	sts	0x052A, r24
    3126:	90 93 2b 05 	sts	0x052B, r25
    312a:	a0 93 2c 05 	sts	0x052C, r26
    312e:	b0 93 2d 05 	sts	0x052D, r27
    3132:	a8 cf       	rjmp	.-176    	; 0x3084 <settings_store_setting+0x5c>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    3134:	0e 94 86 19 	call	0x330c	; 0x330c <st_disable>
    3138:	08 95       	ret

0000313a <settings_init>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    3142:	87 36       	cpi	r24, 0x67	; 103
    3144:	09 f4       	brne	.+2      	; 0x3148 <settings_init+0xe>
    3146:	7a c0       	rjmp	.+244    	; 0x323c <settings_init+0x102>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	09 f4       	brne	.+2      	; 0x314e <settings_init+0x14>
    314c:	87 c0       	rjmp	.+270    	; 0x325c <settings_init+0x122>
// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    314e:	8a eb       	ldi	r24, 0xBA	; 186
    3150:	92 e0       	ldi	r25, 0x02	; 2
    3152:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    3156:	84 ef       	ldi	r24, 0xF4	; 244
    3158:	99 ef       	ldi	r25, 0xF9	; 249
    315a:	ac e3       	ldi	r26, 0x3C	; 60
    315c:	b4 e4       	ldi	r27, 0x44	; 68
    315e:	80 93 08 05 	sts	0x0508, r24
    3162:	90 93 09 05 	sts	0x0509, r25
    3166:	a0 93 0a 05 	sts	0x050A, r26
    316a:	b0 93 0b 05 	sts	0x050B, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    316e:	80 93 0c 05 	sts	0x050C, r24
    3172:	90 93 0d 05 	sts	0x050D, r25
    3176:	a0 93 0e 05 	sts	0x050E, r26
    317a:	b0 93 0f 05 	sts	0x050F, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    317e:	80 93 10 05 	sts	0x0510, r24
    3182:	90 93 11 05 	sts	0x0511, r25
    3186:	a0 93 12 05 	sts	0x0512, r26
    318a:	b0 93 13 05 	sts	0x0513, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    318e:	81 ec       	ldi	r24, 0xC1	; 193
    3190:	9a ec       	ldi	r25, 0xCA	; 202
    3192:	a1 e3       	ldi	r26, 0x31	; 49
    3194:	b2 e4       	ldi	r27, 0x42	; 66
    3196:	80 93 14 05 	sts	0x0514, r24
    319a:	90 93 15 05 	sts	0x0515, r25
    319e:	a0 93 16 05 	sts	0x0516, r26
    31a2:	b0 93 17 05 	sts	0x0517, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    31a6:	88 e0       	ldi	r24, 0x08	; 8
    31a8:	80 93 19 05 	sts	0x0519, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	a0 ef       	ldi	r26, 0xF0	; 240
    31b2:	b3 e4       	ldi	r27, 0x43	; 67
    31b4:	80 93 1a 05 	sts	0x051A, r24
    31b8:	90 93 1b 05 	sts	0x051B, r25
    31bc:	a0 93 1c 05 	sts	0x051C, r26
    31c0:	b0 93 1d 05 	sts	0x051D, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    31c4:	80 93 1e 05 	sts	0x051E, r24
    31c8:	90 93 1f 05 	sts	0x051F, r25
    31cc:	a0 93 20 05 	sts	0x0520, r26
    31d0:	b0 93 21 05 	sts	0x0521, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    31d4:	8a e9       	ldi	r24, 0x9A	; 154
    31d6:	99 e9       	ldi	r25, 0x99	; 153
    31d8:	a9 e9       	ldi	r26, 0x99	; 153
    31da:	b0 e4       	ldi	r27, 0x40	; 64
    31dc:	80 93 26 05 	sts	0x0526, r24
    31e0:	90 93 27 05 	sts	0x0527, r25
    31e4:	a0 93 28 05 	sts	0x0528, r26
    31e8:	b0 93 29 05 	sts	0x0529, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    31ec:	8d ec       	ldi	r24, 0xCD	; 205
    31ee:	9c ec       	ldi	r25, 0xCC	; 204
    31f0:	ac ec       	ldi	r26, 0xCC	; 204
    31f2:	bd e3       	ldi	r27, 0x3D	; 61
    31f4:	80 93 22 05 	sts	0x0522, r24
    31f8:	90 93 23 05 	sts	0x0523, r25
    31fc:	a0 93 24 05 	sts	0x0524, r26
    3200:	b0 93 25 05 	sts	0x0525, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	a8 e4       	ldi	r26, 0x48	; 72
    320a:	b2 e4       	ldi	r27, 0x42	; 66
    320c:	80 93 2a 05 	sts	0x052A, r24
    3210:	90 93 2b 05 	sts	0x052B, r25
    3214:	a0 93 2c 05 	sts	0x052C, r26
    3218:	b0 93 2d 05 	sts	0x052D, r27
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	67 e6       	ldi	r22, 0x67	; 103
    3222:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	68 e0       	ldi	r22, 0x08	; 8
    322c:	75 e0       	ldi	r23, 0x05	; 5
    322e:	46 e2       	ldi	r20, 0x26	; 38
    3230:	50 e0       	ldi	r21, 0x00	; 0
    3232:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <memcpy_to_eeprom_with_checksum>
    printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    write_settings();
    settings_dump();
    3236:	0e 94 40 17 	call	0x2e80	; 0x2e80 <settings_dump>
    323a:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    323c:	88 e0       	ldi	r24, 0x08	; 8
    323e:	95 e0       	ldi	r25, 0x05	; 5
    3240:	61 e0       	ldi	r22, 0x01	; 1
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	46 e2       	ldi	r20, 0x26	; 38
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	0e 94 1b 03 	call	0x636	; 0x636 <memcpy_from_eeprom_with_checksum>
    324c:	89 2b       	or	r24, r25
    324e:	09 f4       	brne	.+2      	; 0x3252 <settings_init+0x118>
    3250:	7e cf       	rjmp	.-260    	; 0x314e <settings_init+0x14>
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    printPgmString(PSTR("'$' to dump current settings\r\n"));
    3252:	85 ef       	ldi	r24, 0xF5	; 245
    3254:	92 e0       	ldi	r25, 0x02	; 2
    3256:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    325a:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    325c:	88 e0       	ldi	r24, 0x08	; 8
    325e:	95 e0       	ldi	r25, 0x05	; 5
    3260:	61 e0       	ldi	r22, 0x01	; 1
    3262:	70 e0       	ldi	r23, 0x00	; 0
    3264:	4b e1       	ldi	r20, 0x1B	; 27
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	0e 94 1b 03 	call	0x636	; 0x636 <memcpy_from_eeprom_with_checksum>
    326c:	89 2b       	or	r24, r25
    326e:	09 f4       	brne	.+2      	; 0x3272 <settings_init+0x138>
    3270:	6e cf       	rjmp	.-292    	; 0x314e <settings_init+0x14>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    3272:	8a e9       	ldi	r24, 0x9A	; 154
    3274:	99 e9       	ldi	r25, 0x99	; 153
    3276:	a9 e9       	ldi	r26, 0x99	; 153
    3278:	b0 e4       	ldi	r27, 0x40	; 64
    327a:	80 93 26 05 	sts	0x0526, r24
    327e:	90 93 27 05 	sts	0x0527, r25
    3282:	a0 93 28 05 	sts	0x0528, r26
    3286:	b0 93 29 05 	sts	0x0529, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	a8 e4       	ldi	r26, 0x48	; 72
    3290:	b2 e4       	ldi	r27, 0x42	; 66
    3292:	80 93 2a 05 	sts	0x052A, r24
    3296:	90 93 2b 05 	sts	0x052B, r25
    329a:	a0 93 2c 05 	sts	0x052C, r26
    329e:	b0 93 2d 05 	sts	0x052D, r27
    32a2:	d7 cf       	rjmp	.-82     	; 0x3252 <settings_init+0x118>

000032a4 <spindle_init>:

#include <avr/io.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    32a4:	e1 e0       	ldi	r30, 0x01	; 1
    32a6:	f1 e0       	ldi	r31, 0x01	; 1
    32a8:	80 81       	ld	r24, Z
    32aa:	80 64       	ori	r24, 0x40	; 64
    32ac:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    32ae:	27 9a       	sbi	0x04, 7	; 4
}
    32b0:	08 95       	ret

000032b2 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    32b2:	97 fd       	sbrc	r25, 7
    32b4:	07 c0       	rjmp	.+14     	; 0x32c4 <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    32b6:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    32b8:	80 91 02 01 	lds	r24, 0x0102
    32bc:	80 64       	ori	r24, 0x40	; 64
    32be:	80 93 02 01 	sts	0x0102, r24
}
    32c2:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    32c4:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    32c6:	80 91 02 01 	lds	r24, 0x0102
    32ca:	80 64       	ori	r24, 0x40	; 64
    32cc:	80 93 02 01 	sts	0x0102, r24
}
    32d0:	08 95       	ret

000032d2 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    32d2:	e2 e0       	ldi	r30, 0x02	; 2
    32d4:	f1 e0       	ldi	r31, 0x01	; 1
    32d6:	80 81       	ld	r24, Z
    32d8:	8f 7b       	andi	r24, 0xBF	; 191
    32da:	80 83       	st	Z, r24
}
    32dc:	08 95       	ret

000032de <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    32de:	ef e6       	ldi	r30, 0x6F	; 111
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	82 60       	ori	r24, 0x02	; 2
    32e6:	80 83       	st	Z, r24
}
    32e8:	08 95       	ret

000032ea <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    32ea:	1f 92       	push	r1
    32ec:	0f 92       	push	r0
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	0f 92       	push	r0
    32f2:	11 24       	eor	r1, r1
    32f4:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    32f6:	81 b3       	in	r24, 0x11	; 17
    32f8:	8a 7c       	andi	r24, 0xCA	; 202
    32fa:	81 bb       	out	0x11, r24	; 17
}
    32fc:	8f 91       	pop	r24
    32fe:	0f 90       	pop	r0
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	0f 90       	pop	r0
    3304:	1f 90       	pop	r1
    3306:	18 95       	reti

00003308 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3308:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    330a:	08 95       	ret

0000330c <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    330c:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    330e:	08 95       	ret

00003310 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    3310:	3c 99       	sbic	0x07, 4	; 7
    3312:	04 c0       	rjmp	.+8      	; 0x331c <st_is_enabled+0xc>
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    3318:	c9 01       	movw	r24, r18
    331a:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    331c:	88 b1       	in	r24, 0x08	; 8
    331e:	82 95       	swap	r24
    3320:	8f 70       	andi	r24, 0x0F	; 15
    3322:	80 95       	com	r24
    3324:	81 70       	andi	r24, 0x01	; 1
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    332a:	c9 01       	movw	r24, r18
    332c:	08 95       	ret

0000332e <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    332e:	60 30       	cpi	r22, 0x00	; 0
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	72 07       	cpc	r23, r18
    3334:	21 e0       	ldi	r18, 0x01	; 1
    3336:	82 07       	cpc	r24, r18
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	92 07       	cpc	r25, r18
    333c:	08 f4       	brcc	.+2      	; 0x3340 <config_step_timer+0x12>
    333e:	5c c0       	rjmp	.+184    	; 0x33f8 <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    3340:	60 30       	cpi	r22, 0x00	; 0
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	72 07       	cpc	r23, r18
    3346:	28 e0       	ldi	r18, 0x08	; 8
    3348:	82 07       	cpc	r24, r18
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	92 07       	cpc	r25, r18
    334e:	78 f1       	brcs	.+94     	; 0x33ae <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    3350:	60 30       	cpi	r22, 0x00	; 0
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	72 07       	cpc	r23, r18
    3356:	20 e4       	ldi	r18, 0x40	; 64
    3358:	82 07       	cpc	r24, r18
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	92 07       	cpc	r25, r18
    335e:	08 f4       	brcc	.+2      	; 0x3362 <config_step_timer+0x34>
    3360:	51 c0       	rjmp	.+162    	; 0x3404 <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    3362:	60 30       	cpi	r22, 0x00	; 0
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	72 07       	cpc	r23, r18
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	82 07       	cpc	r24, r18
    336c:	21 e0       	ldi	r18, 0x01	; 1
    336e:	92 07       	cpc	r25, r18
    3370:	08 f4       	brcc	.+2      	; 0x3374 <config_step_timer+0x46>
    3372:	6d c0       	rjmp	.+218    	; 0x344e <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    3374:	60 30       	cpi	r22, 0x00	; 0
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	72 07       	cpc	r23, r18
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	82 07       	cpc	r24, r18
    337e:	24 e0       	ldi	r18, 0x04	; 4
    3380:	92 07       	cpc	r25, r18
    3382:	08 f0       	brcs	.+2      	; 0x3386 <config_step_timer+0x58>
    3384:	71 c0       	rjmp	.+226    	; 0x3468 <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    3386:	2a e0       	ldi	r18, 0x0A	; 10
    3388:	96 95       	lsr	r25
    338a:	87 95       	ror	r24
    338c:	77 95       	ror	r23
    338e:	67 95       	ror	r22
    3390:	2a 95       	dec	r18
    3392:	d1 f7       	brne	.-12     	; 0x3388 <config_step_timer+0x5a>
    3394:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    3396:	9b 01       	movw	r18, r22
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	8a e0       	ldi	r24, 0x0A	; 10
    339e:	22 0f       	add	r18, r18
    33a0:	33 1f       	adc	r19, r19
    33a2:	44 1f       	adc	r20, r20
    33a4:	55 1f       	adc	r21, r21
    33a6:	8a 95       	dec	r24
    33a8:	d1 f7       	brne	.-12     	; 0x339e <config_step_timer+0x70>
    33aa:	95 e0       	ldi	r25, 0x05	; 5
    33ac:	18 c0       	rjmp	.+48     	; 0x33de <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    33ae:	23 e0       	ldi	r18, 0x03	; 3
    33b0:	96 95       	lsr	r25
    33b2:	87 95       	ror	r24
    33b4:	77 95       	ror	r23
    33b6:	67 95       	ror	r22
    33b8:	2a 95       	dec	r18
    33ba:	d1 f7       	brne	.-12     	; 0x33b0 <config_step_timer+0x82>
    33bc:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    33be:	9b 01       	movw	r18, r22
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	50 e0       	ldi	r21, 0x00	; 0
    33c4:	22 0f       	add	r18, r18
    33c6:	33 1f       	adc	r19, r19
    33c8:	44 1f       	adc	r20, r20
    33ca:	55 1f       	adc	r21, r21
    33cc:	22 0f       	add	r18, r18
    33ce:	33 1f       	adc	r19, r19
    33d0:	44 1f       	adc	r20, r20
    33d2:	55 1f       	adc	r21, r21
    33d4:	22 0f       	add	r18, r18
    33d6:	33 1f       	adc	r19, r19
    33d8:	44 1f       	adc	r20, r20
    33da:	55 1f       	adc	r21, r21
    33dc:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    33de:	80 91 81 00 	lds	r24, 0x0081
    33e2:	88 7f       	andi	r24, 0xF8	; 248
    33e4:	98 2b       	or	r25, r24
    33e6:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    33ea:	f0 93 89 00 	sts	0x0089, r31
    33ee:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    33f2:	b9 01       	movw	r22, r18
    33f4:	ca 01       	movw	r24, r20
    33f6:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    33f8:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    33fa:	9b 01       	movw	r18, r22
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	91 e0       	ldi	r25, 0x01	; 1
    3402:	ed cf       	rjmp	.-38     	; 0x33de <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    3404:	b6 e0       	ldi	r27, 0x06	; 6
    3406:	96 95       	lsr	r25
    3408:	87 95       	ror	r24
    340a:	77 95       	ror	r23
    340c:	67 95       	ror	r22
    340e:	ba 95       	dec	r27
    3410:	d1 f7       	brne	.-12     	; 0x3406 <config_step_timer+0xd8>
    3412:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    3414:	9b 01       	movw	r18, r22
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	50 e0       	ldi	r21, 0x00	; 0
    341a:	22 0f       	add	r18, r18
    341c:	33 1f       	adc	r19, r19
    341e:	44 1f       	adc	r20, r20
    3420:	55 1f       	adc	r21, r21
    3422:	22 0f       	add	r18, r18
    3424:	33 1f       	adc	r19, r19
    3426:	44 1f       	adc	r20, r20
    3428:	55 1f       	adc	r21, r21
    342a:	22 0f       	add	r18, r18
    342c:	33 1f       	adc	r19, r19
    342e:	44 1f       	adc	r20, r20
    3430:	55 1f       	adc	r21, r21
    3432:	22 0f       	add	r18, r18
    3434:	33 1f       	adc	r19, r19
    3436:	44 1f       	adc	r20, r20
    3438:	55 1f       	adc	r21, r21
    343a:	22 0f       	add	r18, r18
    343c:	33 1f       	adc	r19, r19
    343e:	44 1f       	adc	r20, r20
    3440:	55 1f       	adc	r21, r21
    3442:	22 0f       	add	r18, r18
    3444:	33 1f       	adc	r19, r19
    3446:	44 1f       	adc	r20, r20
    3448:	55 1f       	adc	r21, r21
    344a:	93 e0       	ldi	r25, 0x03	; 3
    344c:	c8 cf       	rjmp	.-112    	; 0x33de <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    344e:	bb 27       	eor	r27, r27
    3450:	a9 2f       	mov	r26, r25
    3452:	98 2f       	mov	r25, r24
    3454:	87 2f       	mov	r24, r23
    3456:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    3458:	a0 e0       	ldi	r26, 0x00	; 0
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	22 27       	eor	r18, r18
    345e:	38 2f       	mov	r19, r24
    3460:	49 2f       	mov	r20, r25
    3462:	5a 2f       	mov	r21, r26
    3464:	94 e0       	ldi	r25, 0x04	; 4
    3466:	bb cf       	rjmp	.-138    	; 0x33de <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    3468:	ef ef       	ldi	r30, 0xFF	; 255
    346a:	ff ef       	ldi	r31, 0xFF	; 255
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	3c ef       	ldi	r19, 0xFC	; 252
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	95 e0       	ldi	r25, 0x05	; 5
    3476:	b3 cf       	rjmp	.-154    	; 0x33de <config_step_timer+0xb0>

00003478 <moveLeft>:
enum {
	STOP,LEFT,RIGHT,FORWARD,BACK
};

void moveLeft( unsigned int distance ) 
{
    3478:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    347a:	81 b3       	in	r24, 0x11	; 17
    347c:	85 73       	andi	r24, 0x35	; 53
    347e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3480:	21 15       	cp	r18, r1
    3482:	31 05       	cpc	r19, r1
    3484:	99 f0       	breq	.+38     	; 0x34ac <moveLeft+0x34>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3486:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3488:	40 e6       	ldi	r20, 0x60	; 96
    348a:	54 e0       	ldi	r21, 0x04	; 4
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    348c:	81 b3       	in	r24, 0x11	; 17
    348e:	8a 7c       	andi	r24, 0xCA	; 202
    3490:	81 60       	ori	r24, 0x01	; 1
    3492:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3494:	89 2f       	mov	r24, r25
    3496:	8a 95       	dec	r24
    3498:	f1 f7       	brne	.-4      	; 0x3496 <moveLeft+0x1e>
	 _delay_us( 7 ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    349a:	81 b3       	in	r24, 0x11	; 17
    349c:	8a 7c       	andi	r24, 0xCA	; 202
    349e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34a0:	fa 01       	movw	r30, r20
    34a2:	31 97       	sbiw	r30, 0x01	; 1
    34a4:	f1 f7       	brne	.-4      	; 0x34a2 <moveLeft+0x2a>
    34a6:	21 50       	subi	r18, 0x01	; 1
    34a8:	30 40       	sbci	r19, 0x00	; 0
void moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    34aa:	81 f7       	brne	.-32     	; 0x348c <moveLeft+0x14>
    34ac:	08 95       	ret

000034ae <moveRight>:
	 _delay_us( 280 ) ;
  }
}

void moveRight( unsigned int distance ) 
{
    34ae:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    34b0:	81 b3       	in	r24, 0x11	; 17
    34b2:	85 73       	andi	r24, 0x35	; 53
    34b4:	82 60       	ori	r24, 0x02	; 2
    34b6:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    34b8:	21 15       	cp	r18, r1
    34ba:	31 05       	cpc	r19, r1
    34bc:	99 f0       	breq	.+38     	; 0x34e4 <moveRight+0x36>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34be:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34c0:	40 e6       	ldi	r20, 0x60	; 96
    34c2:	54 e0       	ldi	r21, 0x04	; 4
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    34c4:	81 b3       	in	r24, 0x11	; 17
    34c6:	8a 7c       	andi	r24, 0xCA	; 202
    34c8:	81 60       	ori	r24, 0x01	; 1
    34ca:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34cc:	89 2f       	mov	r24, r25
    34ce:	8a 95       	dec	r24
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <moveRight+0x20>
	 _delay_us( 7 ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    34d2:	81 b3       	in	r24, 0x11	; 17
    34d4:	8a 7c       	andi	r24, 0xCA	; 202
    34d6:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34d8:	fa 01       	movw	r30, r20
    34da:	31 97       	sbiw	r30, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <moveRight+0x2c>
    34de:	21 50       	subi	r18, 0x01	; 1
    34e0:	30 40       	sbci	r19, 0x00	; 0
void moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    34e2:	81 f7       	brne	.-32     	; 0x34c4 <moveRight+0x16>
    34e4:	08 95       	ret

000034e6 <moveForward>:
	 _delay_us( 280 ) ;
  }
}

void moveForward( unsigned int distance ) 
{
    34e6:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    34e8:	81 b3       	in	r24, 0x11	; 17
    34ea:	85 73       	andi	r24, 0x35	; 53
    34ec:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    34ee:	21 15       	cp	r18, r1
    34f0:	31 05       	cpc	r19, r1
    34f2:	99 f0       	breq	.+38     	; 0x351a <moveForward+0x34>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34f4:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34f6:	40 e6       	ldi	r20, 0x60	; 96
    34f8:	54 e0       	ldi	r21, 0x04	; 4
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    34fa:	81 b3       	in	r24, 0x11	; 17
    34fc:	8a 7c       	andi	r24, 0xCA	; 202
    34fe:	84 60       	ori	r24, 0x04	; 4
    3500:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3502:	89 2f       	mov	r24, r25
    3504:	8a 95       	dec	r24
    3506:	f1 f7       	brne	.-4      	; 0x3504 <moveForward+0x1e>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3508:	81 b3       	in	r24, 0x11	; 17
    350a:	8a 7c       	andi	r24, 0xCA	; 202
    350c:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    350e:	fa 01       	movw	r30, r20
    3510:	31 97       	sbiw	r30, 0x01	; 1
    3512:	f1 f7       	brne	.-4      	; 0x3510 <moveForward+0x2a>
    3514:	21 50       	subi	r18, 0x01	; 1
    3516:	30 40       	sbci	r19, 0x00	; 0
void moveForward( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3518:	81 f7       	brne	.-32     	; 0x34fa <moveForward+0x14>
    351a:	08 95       	ret

0000351c <moveBack>:
	 _delay_us( 280 ) ;
  }
}

void moveBack( unsigned int distance ) 
{
    351c:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    351e:	81 b3       	in	r24, 0x11	; 17
    3520:	85 73       	andi	r24, 0x35	; 53
    3522:	88 60       	ori	r24, 0x08	; 8
    3524:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3526:	21 15       	cp	r18, r1
    3528:	31 05       	cpc	r19, r1
    352a:	99 f0       	breq	.+38     	; 0x3552 <moveBack+0x36>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    352c:	95 e2       	ldi	r25, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    352e:	40 e6       	ldi	r20, 0x60	; 96
    3530:	54 e0       	ldi	r21, 0x04	; 4
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3532:	81 b3       	in	r24, 0x11	; 17
    3534:	8a 7c       	andi	r24, 0xCA	; 202
    3536:	84 60       	ori	r24, 0x04	; 4
    3538:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    353a:	89 2f       	mov	r24, r25
    353c:	8a 95       	dec	r24
    353e:	f1 f7       	brne	.-4      	; 0x353c <moveBack+0x20>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3540:	81 b3       	in	r24, 0x11	; 17
    3542:	8a 7c       	andi	r24, 0xCA	; 202
    3544:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3546:	fa 01       	movw	r30, r20
    3548:	31 97       	sbiw	r30, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <moveBack+0x2c>
    354c:	21 50       	subi	r18, 0x01	; 1
    354e:	30 40       	sbci	r19, 0x00	; 0
void moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3550:	81 f7       	brne	.-32     	; 0x3532 <moveBack+0x16>
    3552:	08 95       	ret

00003554 <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    3554:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    3556:	82 e0       	ldi	r24, 0x02	; 2
    3558:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    355a:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    355c:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    355e:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    3560:	9f e8       	ldi	r25, 0x8F	; 143
    3562:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    3564:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    3566:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    356a:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    356e:	3f ec       	ldi	r19, 0xCF	; 207
    3570:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    3574:	20 ef       	ldi	r18, 0xF0	; 240
    3576:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    357a:	8c e9       	ldi	r24, 0x9C	; 156
    357c:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    357e:	82 e2       	ldi	r24, 0x22	; 34
    3580:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    3582:	83 e1       	ldi	r24, 0x13	; 19
    3584:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    3586:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    3588:	80 e3       	ldi	r24, 0x30	; 48
    358a:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    358c:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    358e:	83 e2       	ldi	r24, 0x23	; 35
    3590:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    3592:	83 e0       	ldi	r24, 0x03	; 3
    3594:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    3598:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    359c:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    35a0:	20 93 0b 01 	sts	0x010B, r18
}
    35a4:	08 95       	ret

000035a6 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    35a6:	07 c0       	rjmp	.+14     	; 0x35b6 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    35a8:	83 b7       	in	r24, 0x33	; 51
    35aa:	81 60       	ori	r24, 0x01	; 1
    35ac:	83 bf       	out	0x33, r24	; 51
    35ae:	88 95       	sleep
    35b0:	83 b7       	in	r24, 0x33	; 51
    35b2:	8e 7f       	andi	r24, 0xFE	; 254
    35b4:	83 bf       	out	0x33, r24	; 51
    35b6:	0e 94 75 09 	call	0x12ea	; 0x12ea <plan_get_current_block>
    35ba:	89 2b       	or	r24, r25
    35bc:	a9 f7       	brne	.-22     	; 0x35a8 <st_synchronize+0x2>
}
    35be:	08 95       	ret

000035c0 <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    35c0:	9b 01       	movw	r18, r22
    35c2:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    35c4:	20 3b       	cpi	r18, 0xB0	; 176
    35c6:	84 e0       	ldi	r24, 0x04	; 4
    35c8:	38 07       	cpc	r19, r24
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	48 07       	cpc	r20, r24
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	58 07       	cpc	r21, r24
    35d2:	40 f4       	brcc	.+16     	; 0x35e4 <set_step_events_per_minute+0x24>
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    35d4:	64 ed       	ldi	r22, 0xD4	; 212
    35d6:	70 e3       	ldi	r23, 0x30	; 48
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	35 e3       	ldi	r19, 0x35	; 53
    35dc:	4c e0       	ldi	r20, 0x0C	; 12
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	93 e0       	ldi	r25, 0x03	; 3
    35e2:	15 c0       	rjmp	.+42     	; 0x360e <set_step_events_per_minute+0x4e>
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    35e4:	60 e0       	ldi	r22, 0x00	; 0
    35e6:	70 e7       	ldi	r23, 0x70	; 112
    35e8:	88 e3       	ldi	r24, 0x38	; 56
    35ea:	99 e3       	ldi	r25, 0x39	; 57
    35ec:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    35f0:	c9 01       	movw	r24, r18
    35f2:	da 01       	movw	r26, r20
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    35f4:	80 30       	cpi	r24, 0x00	; 0
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	92 07       	cpc	r25, r18
    35fa:	21 e0       	ldi	r18, 0x01	; 1
    35fc:	a2 07       	cpc	r26, r18
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	b2 07       	cpc	r27, r18
    3602:	c0 f4       	brcc	.+48     	; 0x3634 <set_step_events_per_minute+0x74>
		ceiling = cycles;
    3604:	bc 01       	movw	r22, r24
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    3606:	9c 01       	movw	r18, r24
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	50 e0       	ldi	r21, 0x00	; 0
    360c:	91 e0       	ldi	r25, 0x01	; 1
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    360e:	80 91 81 00 	lds	r24, 0x0081
    3612:	88 7f       	andi	r24, 0xF8	; 248
    3614:	98 2b       	or	r25, r24
    3616:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    361a:	70 93 89 00 	sts	0x0089, r23
    361e:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    3622:	20 93 f8 03 	sts	0x03F8, r18
    3626:	30 93 f9 03 	sts	0x03F9, r19
    362a:	40 93 fa 03 	sts	0x03FA, r20
    362e:	50 93 fb 03 	sts	0x03FB, r21
}
    3632:	08 95       	ret
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    3634:	80 30       	cpi	r24, 0x00	; 0
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	92 07       	cpc	r25, r18
    363a:	28 e0       	ldi	r18, 0x08	; 8
    363c:	a2 07       	cpc	r26, r18
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	b2 07       	cpc	r27, r18
    3642:	c8 f4       	brcc	.+50     	; 0x3676 <set_step_events_per_minute+0xb6>
    ceiling = cycles >> 3;
    3644:	23 e0       	ldi	r18, 0x03	; 3
    3646:	b6 95       	lsr	r27
    3648:	a7 95       	ror	r26
    364a:	97 95       	ror	r25
    364c:	87 95       	ror	r24
    364e:	2a 95       	dec	r18
    3650:	d1 f7       	brne	.-12     	; 0x3646 <set_step_events_per_minute+0x86>
    3652:	bc 01       	movw	r22, r24
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    3654:	9c 01       	movw	r18, r24
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	22 0f       	add	r18, r18
    365c:	33 1f       	adc	r19, r19
    365e:	44 1f       	adc	r20, r20
    3660:	55 1f       	adc	r21, r21
    3662:	22 0f       	add	r18, r18
    3664:	33 1f       	adc	r19, r19
    3666:	44 1f       	adc	r20, r20
    3668:	55 1f       	adc	r21, r21
    366a:	22 0f       	add	r18, r18
    366c:	33 1f       	adc	r19, r19
    366e:	44 1f       	adc	r20, r20
    3670:	55 1f       	adc	r21, r21
    3672:	92 e0       	ldi	r25, 0x02	; 2
    3674:	cc cf       	rjmp	.-104    	; 0x360e <set_step_events_per_minute+0x4e>
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    3676:	26 e0       	ldi	r18, 0x06	; 6
    3678:	b6 95       	lsr	r27
    367a:	a7 95       	ror	r26
    367c:	97 95       	ror	r25
    367e:	87 95       	ror	r24
    3680:	2a 95       	dec	r18
    3682:	d1 f7       	brne	.-12     	; 0x3678 <set_step_events_per_minute+0xb8>
    3684:	bc 01       	movw	r22, r24
    3686:	9c 01       	movw	r18, r24
    3688:	40 e0       	ldi	r20, 0x00	; 0
    368a:	50 e0       	ldi	r21, 0x00	; 0
    368c:	22 0f       	add	r18, r18
    368e:	33 1f       	adc	r19, r19
    3690:	44 1f       	adc	r20, r20
    3692:	55 1f       	adc	r21, r21
    3694:	22 0f       	add	r18, r18
    3696:	33 1f       	adc	r19, r19
    3698:	44 1f       	adc	r20, r20
    369a:	55 1f       	adc	r21, r21
    369c:	22 0f       	add	r18, r18
    369e:	33 1f       	adc	r19, r19
    36a0:	44 1f       	adc	r20, r20
    36a2:	55 1f       	adc	r21, r21
    36a4:	22 0f       	add	r18, r18
    36a6:	33 1f       	adc	r19, r19
    36a8:	44 1f       	adc	r20, r20
    36aa:	55 1f       	adc	r21, r21
    36ac:	22 0f       	add	r18, r18
    36ae:	33 1f       	adc	r19, r19
    36b0:	44 1f       	adc	r20, r20
    36b2:	55 1f       	adc	r21, r21
    36b4:	22 0f       	add	r18, r18
    36b6:	33 1f       	adc	r19, r19
    36b8:	44 1f       	adc	r20, r20
    36ba:	55 1f       	adc	r21, r21
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    36bc:	93 e0       	ldi	r25, 0x03	; 3
    36be:	a7 cf       	rjmp	.-178    	; 0x360e <set_step_events_per_minute+0x4e>

000036c0 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    36c0:	1f 92       	push	r1
    36c2:	0f 92       	push	r0
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	0f 92       	push	r0
    36c8:	0b b6       	in	r0, 0x3b	; 59
    36ca:	0f 92       	push	r0
    36cc:	11 24       	eor	r1, r1
    36ce:	ef 92       	push	r14
    36d0:	ff 92       	push	r15
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	2f 93       	push	r18
    36d8:	3f 93       	push	r19
    36da:	4f 93       	push	r20
    36dc:	5f 93       	push	r21
    36de:	6f 93       	push	r22
    36e0:	7f 93       	push	r23
    36e2:	8f 93       	push	r24
    36e4:	9f 93       	push	r25
    36e6:	af 93       	push	r26
    36e8:	bf 93       	push	r27
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	ef 93       	push	r30
    36f0:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it
  
  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    36f2:	80 91 f6 03 	lds	r24, 0x03F6
    36f6:	90 91 f7 03 	lds	r25, 0x03F7
    36fa:	89 2b       	or	r24, r25
    36fc:	09 f0       	breq	.+2      	; 0x3700 <__vector_17+0x40>
    36fe:	82 c1       	rjmp	.+772    	; 0x3a04 <__vector_17+0x344>

  // Check limits
  if( LIMIT_PIN & 0xf ) {
    3700:	89 b1       	in	r24, 0x09	; 9
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	8f 70       	andi	r24, 0x0F	; 15
    3706:	90 70       	andi	r25, 0x00	; 0
    3708:	89 2b       	or	r24, r25
    370a:	09 f0       	breq	.+2      	; 0x370e <__vector_17+0x4e>
    370c:	94 c1       	rjmp	.+808    	; 0x3a36 <__vector_17+0x376>
  	gHomed = FALSE ;
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    370e:	91 b3       	in	r25, 0x11	; 17
    3710:	80 91 e1 03 	lds	r24, 0x03E1
    3714:	8a 7c       	andi	r24, 0xCA	; 202
    3716:	95 73       	andi	r25, 0x35	; 53
    3718:	89 2b       	or	r24, r25
    371a:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    371c:	81 b3       	in	r24, 0x11	; 17
    371e:	8a 7c       	andi	r24, 0xCA	; 202
    3720:	90 91 e0 03 	lds	r25, 0x03E0
    3724:	89 2b       	or	r24, r25
    3726:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    3728:	80 91 19 05 	lds	r24, 0x0519
    372c:	88 0f       	add	r24, r24
    372e:	84 50       	subi	r24, 0x04	; 4
    3730:	81 95       	neg	r24
    3732:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    3736:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	90 93 f7 03 	sts	0x03F7, r25
    3740:	80 93 f6 03 	sts	0x03F6, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    3744:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    3746:	e0 91 de 03 	lds	r30, 0x03DE
    374a:	f0 91 df 03 	lds	r31, 0x03DF
    374e:	30 97       	sbiw	r30, 0x00	; 0
    3750:	09 f4       	brne	.+2      	; 0x3754 <__vector_17+0x94>
    3752:	e0 c1       	rjmp	.+960    	; 0x3b14 <__vector_17+0x454>
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    3754:	80 89       	ldd	r24, Z+16	; 0x10
    3756:	80 93 e1 03 	sts	0x03E1, r24
    out_bits = 0;
    375a:	10 92 e0 03 	sts	0x03E0, r1
    counter_x += current_block->steps_x;
    375e:	20 91 e2 03 	lds	r18, 0x03E2
    3762:	30 91 e3 03 	lds	r19, 0x03E3
    3766:	40 91 e4 03 	lds	r20, 0x03E4
    376a:	50 91 e5 03 	lds	r21, 0x03E5
    376e:	80 81       	ld	r24, Z
    3770:	91 81       	ldd	r25, Z+1	; 0x01
    3772:	a2 81       	ldd	r26, Z+2	; 0x02
    3774:	b3 81       	ldd	r27, Z+3	; 0x03
    3776:	28 0f       	add	r18, r24
    3778:	39 1f       	adc	r19, r25
    377a:	4a 1f       	adc	r20, r26
    377c:	5b 1f       	adc	r21, r27
    377e:	20 93 e2 03 	sts	0x03E2, r18
    3782:	30 93 e3 03 	sts	0x03E3, r19
    3786:	40 93 e4 03 	sts	0x03E4, r20
    378a:	50 93 e5 03 	sts	0x03E5, r21
    if (counter_x > 0) {
    378e:	12 16       	cp	r1, r18
    3790:	13 06       	cpc	r1, r19
    3792:	14 06       	cpc	r1, r20
    3794:	15 06       	cpc	r1, r21
    3796:	0c f0       	brlt	.+2      	; 0x379a <__vector_17+0xda>
    3798:	51 c1       	rjmp	.+674    	; 0x3a3c <__vector_17+0x37c>
      out_bits |= (1<<X_STEP_BIT);
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	80 93 e0 03 	sts	0x03E0, r24
      counter_x -= current_block->step_event_count;
    37a0:	e1 88       	ldd	r14, Z+17	; 0x11
    37a2:	f2 88       	ldd	r15, Z+18	; 0x12
    37a4:	03 89       	ldd	r16, Z+19	; 0x13
    37a6:	14 89       	ldd	r17, Z+20	; 0x14
    37a8:	2e 19       	sub	r18, r14
    37aa:	3f 09       	sbc	r19, r15
    37ac:	40 0b       	sbc	r20, r16
    37ae:	51 0b       	sbc	r21, r17
    37b0:	20 93 e2 03 	sts	0x03E2, r18
    37b4:	30 93 e3 03 	sts	0x03E3, r19
    37b8:	40 93 e4 03 	sts	0x03E4, r20
    37bc:	50 93 e5 03 	sts	0x03E5, r21
    }
    counter_y += current_block->steps_y;
    37c0:	20 91 e6 03 	lds	r18, 0x03E6
    37c4:	30 91 e7 03 	lds	r19, 0x03E7
    37c8:	40 91 e8 03 	lds	r20, 0x03E8
    37cc:	50 91 e9 03 	lds	r21, 0x03E9
    37d0:	84 81       	ldd	r24, Z+4	; 0x04
    37d2:	95 81       	ldd	r25, Z+5	; 0x05
    37d4:	a6 81       	ldd	r26, Z+6	; 0x06
    37d6:	b7 81       	ldd	r27, Z+7	; 0x07
    37d8:	28 0f       	add	r18, r24
    37da:	39 1f       	adc	r19, r25
    37dc:	4a 1f       	adc	r20, r26
    37de:	5b 1f       	adc	r21, r27
    37e0:	20 93 e6 03 	sts	0x03E6, r18
    37e4:	30 93 e7 03 	sts	0x03E7, r19
    37e8:	40 93 e8 03 	sts	0x03E8, r20
    37ec:	50 93 e9 03 	sts	0x03E9, r21
    if (counter_y > 0) {
    37f0:	12 16       	cp	r1, r18
    37f2:	13 06       	cpc	r1, r19
    37f4:	14 06       	cpc	r1, r20
    37f6:	15 06       	cpc	r1, r21
    37f8:	8c f4       	brge	.+34     	; 0x381c <__vector_17+0x15c>
      out_bits |= (1<<Y_STEP_BIT);
    37fa:	80 91 e0 03 	lds	r24, 0x03E0
    37fe:	84 60       	ori	r24, 0x04	; 4
    3800:	80 93 e0 03 	sts	0x03E0, r24
      counter_y -= current_block->step_event_count;
    3804:	2e 19       	sub	r18, r14
    3806:	3f 09       	sbc	r19, r15
    3808:	40 0b       	sbc	r20, r16
    380a:	51 0b       	sbc	r21, r17
    380c:	20 93 e6 03 	sts	0x03E6, r18
    3810:	30 93 e7 03 	sts	0x03E7, r19
    3814:	40 93 e8 03 	sts	0x03E8, r20
    3818:	50 93 e9 03 	sts	0x03E9, r21
    }
    counter_z += current_block->steps_z;
    381c:	20 91 ea 03 	lds	r18, 0x03EA
    3820:	30 91 eb 03 	lds	r19, 0x03EB
    3824:	40 91 ec 03 	lds	r20, 0x03EC
    3828:	50 91 ed 03 	lds	r21, 0x03ED
    382c:	80 85       	ldd	r24, Z+8	; 0x08
    382e:	91 85       	ldd	r25, Z+9	; 0x09
    3830:	a2 85       	ldd	r26, Z+10	; 0x0a
    3832:	b3 85       	ldd	r27, Z+11	; 0x0b
    3834:	28 0f       	add	r18, r24
    3836:	39 1f       	adc	r19, r25
    3838:	4a 1f       	adc	r20, r26
    383a:	5b 1f       	adc	r21, r27
    383c:	20 93 ea 03 	sts	0x03EA, r18
    3840:	30 93 eb 03 	sts	0x03EB, r19
    3844:	40 93 ec 03 	sts	0x03EC, r20
    3848:	50 93 ed 03 	sts	0x03ED, r21
    if (counter_z > 0) {
    384c:	12 16       	cp	r1, r18
    384e:	13 06       	cpc	r1, r19
    3850:	14 06       	cpc	r1, r20
    3852:	15 06       	cpc	r1, r21
    3854:	8c f4       	brge	.+34     	; 0x3878 <__vector_17+0x1b8>
      out_bits |= (1<<Z_STEP_BIT);
    3856:	80 91 e0 03 	lds	r24, 0x03E0
    385a:	80 61       	ori	r24, 0x10	; 16
    385c:	80 93 e0 03 	sts	0x03E0, r24
      counter_z -= current_block->step_event_count;
    3860:	2e 19       	sub	r18, r14
    3862:	3f 09       	sbc	r19, r15
    3864:	40 0b       	sbc	r20, r16
    3866:	51 0b       	sbc	r21, r17
    3868:	20 93 ea 03 	sts	0x03EA, r18
    386c:	30 93 eb 03 	sts	0x03EB, r19
    3870:	40 93 ec 03 	sts	0x03EC, r20
    3874:	50 93 ed 03 	sts	0x03ED, r21
    }
    counter_c += current_block->steps_c;
    3878:	20 91 ee 03 	lds	r18, 0x03EE
    387c:	30 91 ef 03 	lds	r19, 0x03EF
    3880:	40 91 f0 03 	lds	r20, 0x03F0
    3884:	50 91 f1 03 	lds	r21, 0x03F1
    3888:	84 85       	ldd	r24, Z+12	; 0x0c
    388a:	95 85       	ldd	r25, Z+13	; 0x0d
    388c:	a6 85       	ldd	r26, Z+14	; 0x0e
    388e:	b7 85       	ldd	r27, Z+15	; 0x0f
    3890:	28 0f       	add	r18, r24
    3892:	39 1f       	adc	r19, r25
    3894:	4a 1f       	adc	r20, r26
    3896:	5b 1f       	adc	r21, r27
    3898:	20 93 ee 03 	sts	0x03EE, r18
    389c:	30 93 ef 03 	sts	0x03EF, r19
    38a0:	40 93 f0 03 	sts	0x03F0, r20
    38a4:	50 93 f1 03 	sts	0x03F1, r21
    if (counter_c > 0) {
    38a8:	12 16       	cp	r1, r18
    38aa:	13 06       	cpc	r1, r19
    38ac:	14 06       	cpc	r1, r20
    38ae:	15 06       	cpc	r1, r21
    38b0:	8c f4       	brge	.+34     	; 0x38d4 <__vector_17+0x214>
      out_bits |= (1<<C_STEP_BIT);
    38b2:	80 91 e0 03 	lds	r24, 0x03E0
    38b6:	80 62       	ori	r24, 0x20	; 32
    38b8:	80 93 e0 03 	sts	0x03E0, r24
      counter_c -= current_block->step_event_count;
    38bc:	2e 19       	sub	r18, r14
    38be:	3f 09       	sbc	r19, r15
    38c0:	40 0b       	sbc	r20, r16
    38c2:	51 0b       	sbc	r21, r17
    38c4:	20 93 ee 03 	sts	0x03EE, r18
    38c8:	30 93 ef 03 	sts	0x03EF, r19
    38cc:	40 93 f0 03 	sts	0x03F0, r20
    38d0:	50 93 f1 03 	sts	0x03F1, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    38d4:	80 91 f2 03 	lds	r24, 0x03F2
    38d8:	90 91 f3 03 	lds	r25, 0x03F3
    38dc:	a0 91 f4 03 	lds	r26, 0x03F4
    38e0:	b0 91 f5 03 	lds	r27, 0x03F5
    38e4:	01 96       	adiw	r24, 0x01	; 1
    38e6:	a1 1d       	adc	r26, r1
    38e8:	b1 1d       	adc	r27, r1
    38ea:	80 93 f2 03 	sts	0x03F2, r24
    38ee:	90 93 f3 03 	sts	0x03F3, r25
    38f2:	a0 93 f4 03 	sts	0x03F4, r26
    38f6:	b0 93 f5 03 	sts	0x03F5, r27
    if (step_events_completed >= current_block->step_event_count) {
    38fa:	8e 15       	cp	r24, r14
    38fc:	9f 05       	cpc	r25, r15
    38fe:	a0 07       	cpc	r26, r16
    3900:	b1 07       	cpc	r27, r17
    3902:	08 f0       	brcs	.+2      	; 0x3906 <__vector_17+0x246>
    3904:	a0 c0       	rjmp	.+320    	; 0x3a46 <__vector_17+0x386>
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    3906:	80 91 e1 03 	lds	r24, 0x03E1
    390a:	9a e0       	ldi	r25, 0x0A	; 10
    390c:	89 27       	eor	r24, r25
    390e:	80 93 e1 03 	sts	0x03E1, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    3912:	20 91 f8 03 	lds	r18, 0x03F8
    3916:	30 91 f9 03 	lds	r19, 0x03F9
    391a:	40 91 fa 03 	lds	r20, 0x03FA
    391e:	50 91 fb 03 	lds	r21, 0x03FB
    3922:	80 91 fc 03 	lds	r24, 0x03FC
    3926:	90 91 fd 03 	lds	r25, 0x03FD
    392a:	a0 91 fe 03 	lds	r26, 0x03FE
    392e:	b0 91 ff 03 	lds	r27, 0x03FF
    3932:	28 0f       	add	r18, r24
    3934:	39 1f       	adc	r19, r25
    3936:	4a 1f       	adc	r20, r26
    3938:	5b 1f       	adc	r21, r27
    393a:	20 93 fc 03 	sts	0x03FC, r18
    393e:	30 93 fd 03 	sts	0x03FD, r19
    3942:	40 93 fe 03 	sts	0x03FE, r20
    3946:	50 93 ff 03 	sts	0x03FF, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    394a:	21 38       	cpi	r18, 0x81	; 129
    394c:	0a e1       	ldi	r16, 0x1A	; 26
    394e:	30 07       	cpc	r19, r16
    3950:	06 e0       	ldi	r16, 0x06	; 6
    3952:	40 07       	cpc	r20, r16
    3954:	00 e0       	ldi	r16, 0x00	; 0
    3956:	50 07       	cpc	r21, r16
    3958:	08 f4       	brcc	.+2      	; 0x395c <__vector_17+0x29c>
    395a:	50 c0       	rjmp	.+160    	; 0x39fc <__vector_17+0x33c>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    395c:	20 58       	subi	r18, 0x80	; 128
    395e:	3a 41       	sbci	r19, 0x1A	; 26
    3960:	46 40       	sbci	r20, 0x06	; 6
    3962:	50 40       	sbci	r21, 0x00	; 0
    3964:	20 93 fc 03 	sts	0x03FC, r18
    3968:	30 93 fd 03 	sts	0x03FD, r19
    396c:	40 93 fe 03 	sts	0x03FE, r20
    3970:	50 93 ff 03 	sts	0x03FF, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    3974:	e0 91 de 03 	lds	r30, 0x03DE
    3978:	f0 91 df 03 	lds	r31, 0x03DF
    397c:	30 97       	sbiw	r30, 0x00	; 0
    397e:	f1 f1       	breq	.+124    	; 0x39fc <__vector_17+0x33c>
    if (step_events_completed < current_block->accelerate_until) {
    3980:	20 91 f2 03 	lds	r18, 0x03F2
    3984:	30 91 f3 03 	lds	r19, 0x03F3
    3988:	40 91 f4 03 	lds	r20, 0x03F4
    398c:	50 91 f5 03 	lds	r21, 0x03F5
    3990:	ef 5b       	subi	r30, 0xBF	; 191
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	80 81       	ld	r24, Z
    3996:	91 81       	ldd	r25, Z+1	; 0x01
    3998:	a2 81       	ldd	r26, Z+2	; 0x02
    399a:	b3 81       	ldd	r27, Z+3	; 0x03
    399c:	e1 54       	subi	r30, 0x41	; 65
    399e:	f0 40       	sbci	r31, 0x00	; 0
    39a0:	28 17       	cp	r18, r24
    39a2:	39 07       	cpc	r19, r25
    39a4:	4a 07       	cpc	r20, r26
    39a6:	5b 07       	cpc	r21, r27
    39a8:	08 f0       	brcs	.+2      	; 0x39ac <__vector_17+0x2ec>
    39aa:	54 c0       	rjmp	.+168    	; 0x3a54 <__vector_17+0x394>
      trapezoid_adjusted_rate += current_block->rate_delta;
    39ac:	fd 96       	adiw	r30, 0x3d	; 61
    39ae:	80 81       	ld	r24, Z
    39b0:	91 81       	ldd	r25, Z+1	; 0x01
    39b2:	a2 81       	ldd	r26, Z+2	; 0x02
    39b4:	b3 81       	ldd	r27, Z+3	; 0x03
    39b6:	fd 97       	sbiw	r30, 0x3d	; 61
    39b8:	20 91 00 04 	lds	r18, 0x0400
    39bc:	30 91 01 04 	lds	r19, 0x0401
    39c0:	40 91 02 04 	lds	r20, 0x0402
    39c4:	50 91 03 04 	lds	r21, 0x0403
    39c8:	28 0f       	add	r18, r24
    39ca:	39 1f       	adc	r19, r25
    39cc:	4a 1f       	adc	r20, r26
    39ce:	5b 1f       	adc	r21, r27
    39d0:	20 93 00 04 	sts	0x0400, r18
    39d4:	30 93 01 04 	sts	0x0401, r19
    39d8:	40 93 02 04 	sts	0x0402, r20
    39dc:	50 93 03 04 	sts	0x0403, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    39e0:	85 89       	ldd	r24, Z+21	; 0x15
    39e2:	96 89       	ldd	r25, Z+22	; 0x16
    39e4:	a7 89       	ldd	r26, Z+23	; 0x17
    39e6:	b0 8d       	ldd	r27, Z+24	; 0x18
    39e8:	82 17       	cp	r24, r18
    39ea:	93 07       	cpc	r25, r19
    39ec:	a4 07       	cpc	r26, r20
    39ee:	b5 07       	cpc	r27, r21
    39f0:	08 f4       	brcc	.+2      	; 0x39f4 <__vector_17+0x334>
    39f2:	6a c0       	rjmp	.+212    	; 0x3ac8 <__vector_17+0x408>
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    39f4:	ca 01       	movw	r24, r20
    39f6:	b9 01       	movw	r22, r18
    39f8:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    39fc:	10 92 f7 03 	sts	0x03F7, r1
    3a00:	10 92 f6 03 	sts	0x03F6, r1
}
    3a04:	ff 91       	pop	r31
    3a06:	ef 91       	pop	r30
    3a08:	df 91       	pop	r29
    3a0a:	cf 91       	pop	r28
    3a0c:	bf 91       	pop	r27
    3a0e:	af 91       	pop	r26
    3a10:	9f 91       	pop	r25
    3a12:	8f 91       	pop	r24
    3a14:	7f 91       	pop	r23
    3a16:	6f 91       	pop	r22
    3a18:	5f 91       	pop	r21
    3a1a:	4f 91       	pop	r20
    3a1c:	3f 91       	pop	r19
    3a1e:	2f 91       	pop	r18
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	0f 90       	pop	r0
    3a2a:	0b be       	out	0x3b, r0	; 59
    3a2c:	0f 90       	pop	r0
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	0f 90       	pop	r0
    3a32:	1f 90       	pop	r1
    3a34:	18 95       	reti
  
  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt

  // Check limits
  if( LIMIT_PIN & 0xf ) {
  	gHomed = FALSE ;
    3a36:	10 92 dd 03 	sts	0x03DD, r1
    3a3a:	e4 cf       	rjmp	.-56     	; 0x3a04 <__vector_17+0x344>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    3a3c:	e1 88       	ldd	r14, Z+17	; 0x11
    3a3e:	f2 88       	ldd	r15, Z+18	; 0x12
    3a40:	03 89       	ldd	r16, Z+19	; 0x13
    3a42:	14 89       	ldd	r17, Z+20	; 0x14
    3a44:	bd ce       	rjmp	.-646    	; 0x37c0 <__vector_17+0x100>
      counter_c -= current_block->step_event_count;
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    3a46:	10 92 df 03 	sts	0x03DF, r1
    3a4a:	10 92 de 03 	sts	0x03DE, r1
      plan_discard_current_block();
    3a4e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <plan_discard_current_block>
    3a52:	59 cf       	rjmp	.-334    	; 0x3906 <__vector_17+0x246>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3a54:	eb 5b       	subi	r30, 0xBB	; 187
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	a2 81       	ldd	r26, Z+2	; 0x02
    3a5e:	b3 81       	ldd	r27, Z+3	; 0x03
    3a60:	e5 54       	subi	r30, 0x45	; 69
    3a62:	f0 40       	sbci	r31, 0x00	; 0
    3a64:	82 17       	cp	r24, r18
    3a66:	93 07       	cpc	r25, r19
    3a68:	a4 07       	cpc	r26, r20
    3a6a:	b5 07       	cpc	r27, r21
    3a6c:	c0 f5       	brcc	.+112    	; 0x3ade <__vector_17+0x41e>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    3a6e:	fd 96       	adiw	r30, 0x3d	; 61
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	93 81       	ldd	r25, Z+3	; 0x03
    3a78:	fd 97       	sbiw	r30, 0x3d	; 61
    3a7a:	20 91 00 04 	lds	r18, 0x0400
    3a7e:	30 91 01 04 	lds	r19, 0x0401
    3a82:	40 91 02 04 	lds	r20, 0x0402
    3a86:	50 91 03 04 	lds	r21, 0x0403
    3a8a:	62 17       	cp	r22, r18
    3a8c:	73 07       	cpc	r23, r19
    3a8e:	84 07       	cpc	r24, r20
    3a90:	95 07       	cpc	r25, r21
    3a92:	80 f4       	brcc	.+32     	; 0x3ab4 <__vector_17+0x3f4>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3a94:	79 01       	movw	r14, r18
    3a96:	8a 01       	movw	r16, r20
    3a98:	e6 1a       	sub	r14, r22
    3a9a:	f7 0a       	sbc	r15, r23
    3a9c:	08 0b       	sbc	r16, r24
    3a9e:	19 0b       	sbc	r17, r25
    3aa0:	e0 92 00 04 	sts	0x0400, r14
    3aa4:	f0 92 01 04 	sts	0x0401, r15
    3aa8:	00 93 02 04 	sts	0x0402, r16
    3aac:	10 93 03 04 	sts	0x0403, r17
    3ab0:	a8 01       	movw	r20, r16
    3ab2:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    3ab4:	81 ad       	ldd	r24, Z+57	; 0x39
    3ab6:	92 ad       	ldd	r25, Z+58	; 0x3a
    3ab8:	a3 ad       	ldd	r26, Z+59	; 0x3b
    3aba:	b4 ad       	ldd	r27, Z+60	; 0x3c
    3abc:	28 17       	cp	r18, r24
    3abe:	39 07       	cpc	r19, r25
    3ac0:	4a 07       	cpc	r20, r26
    3ac2:	5b 07       	cpc	r21, r27
    3ac4:	08 f0       	brcs	.+2      	; 0x3ac8 <__vector_17+0x408>
    3ac6:	96 cf       	rjmp	.-212    	; 0x39f4 <__vector_17+0x334>
        trapezoid_adjusted_rate = current_block->final_rate;
    3ac8:	80 93 00 04 	sts	0x0400, r24
    3acc:	90 93 01 04 	sts	0x0401, r25
    3ad0:	a0 93 02 04 	sts	0x0402, r26
    3ad4:	b0 93 03 04 	sts	0x0403, r27
    3ad8:	9c 01       	movw	r18, r24
    3ada:	ad 01       	movw	r20, r26
    3adc:	8b cf       	rjmp	.-234    	; 0x39f4 <__vector_17+0x334>
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3ade:	25 89       	ldd	r18, Z+21	; 0x15
    3ae0:	36 89       	ldd	r19, Z+22	; 0x16
    3ae2:	47 89       	ldd	r20, Z+23	; 0x17
    3ae4:	50 8d       	ldd	r21, Z+24	; 0x18
    3ae6:	80 91 00 04 	lds	r24, 0x0400
    3aea:	90 91 01 04 	lds	r25, 0x0401
    3aee:	a0 91 02 04 	lds	r26, 0x0402
    3af2:	b0 91 03 04 	lds	r27, 0x0403
    3af6:	28 17       	cp	r18, r24
    3af8:	39 07       	cpc	r19, r25
    3afa:	4a 07       	cpc	r20, r26
    3afc:	5b 07       	cpc	r21, r27
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <__vector_17+0x442>
    3b00:	7d cf       	rjmp	.-262    	; 0x39fc <__vector_17+0x33c>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3b02:	20 93 00 04 	sts	0x0400, r18
    3b06:	30 93 01 04 	sts	0x0401, r19
    3b0a:	40 93 02 04 	sts	0x0402, r20
    3b0e:	50 93 03 04 	sts	0x0403, r21
    3b12:	70 cf       	rjmp	.-288    	; 0x39f4 <__vector_17+0x334>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    3b14:	0e 94 75 09 	call	0x12ea	; 0x12ea <plan_get_current_block>
    3b18:	ec 01       	movw	r28, r24
    3b1a:	90 93 df 03 	sts	0x03DF, r25
    3b1e:	80 93 de 03 	sts	0x03DE, r24
    if (current_block != NULL) {
    3b22:	00 97       	sbiw	r24, 0x00	; 0
    3b24:	09 f4       	brne	.+2      	; 0x3b28 <__vector_17+0x468>
    3b26:	52 c0       	rjmp	.+164    	; 0x3bcc <__vector_17+0x50c>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3b28:	6d a9       	ldd	r22, Y+53	; 0x35
    3b2a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b2c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b2e:	98 ad       	ldd	r25, Y+56	; 0x38
    3b30:	60 93 00 04 	sts	0x0400, r22
    3b34:	70 93 01 04 	sts	0x0401, r23
    3b38:	80 93 02 04 	sts	0x0402, r24
    3b3c:	90 93 03 04 	sts	0x0403, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    3b40:	10 92 fc 03 	sts	0x03FC, r1
    3b44:	10 92 fd 03 	sts	0x03FD, r1
    3b48:	10 92 fe 03 	sts	0x03FE, r1
    3b4c:	10 92 ff 03 	sts	0x03FF, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    3b50:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    3b54:	89 89       	ldd	r24, Y+17	; 0x11
    3b56:	9a 89       	ldd	r25, Y+18	; 0x12
    3b58:	ab 89       	ldd	r26, Y+19	; 0x13
    3b5a:	bc 89       	ldd	r27, Y+20	; 0x14
    3b5c:	b5 95       	asr	r27
    3b5e:	a7 95       	ror	r26
    3b60:	97 95       	ror	r25
    3b62:	87 95       	ror	r24
    3b64:	b0 95       	com	r27
    3b66:	a0 95       	com	r26
    3b68:	90 95       	com	r25
    3b6a:	81 95       	neg	r24
    3b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6e:	af 4f       	sbci	r26, 0xFF	; 255
    3b70:	bf 4f       	sbci	r27, 0xFF	; 255
    3b72:	80 93 e2 03 	sts	0x03E2, r24
    3b76:	90 93 e3 03 	sts	0x03E3, r25
    3b7a:	a0 93 e4 03 	sts	0x03E4, r26
    3b7e:	b0 93 e5 03 	sts	0x03E5, r27
      counter_y = counter_x;
    3b82:	80 93 e6 03 	sts	0x03E6, r24
    3b86:	90 93 e7 03 	sts	0x03E7, r25
    3b8a:	a0 93 e8 03 	sts	0x03E8, r26
    3b8e:	b0 93 e9 03 	sts	0x03E9, r27
      counter_z = counter_x;
    3b92:	80 93 ea 03 	sts	0x03EA, r24
    3b96:	90 93 eb 03 	sts	0x03EB, r25
    3b9a:	a0 93 ec 03 	sts	0x03EC, r26
    3b9e:	b0 93 ed 03 	sts	0x03ED, r27
      counter_c = counter_x;
    3ba2:	80 93 ee 03 	sts	0x03EE, r24
    3ba6:	90 93 ef 03 	sts	0x03EF, r25
    3baa:	a0 93 f0 03 	sts	0x03F0, r26
    3bae:	b0 93 f1 03 	sts	0x03F1, r27
      step_events_completed = 0;
    3bb2:	10 92 f2 03 	sts	0x03F2, r1
    3bb6:	10 92 f3 03 	sts	0x03F3, r1
    3bba:	10 92 f4 03 	sts	0x03F4, r1
    3bbe:	10 92 f5 03 	sts	0x03F5, r1
    3bc2:	e0 91 de 03 	lds	r30, 0x03DE
    3bc6:	f0 91 df 03 	lds	r31, 0x03DF
    3bca:	c4 cd       	rjmp	.-1144   	; 0x3754 <__vector_17+0x94>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    3bcc:	80 91 6f 00 	lds	r24, 0x006F
    3bd0:	8d 7f       	andi	r24, 0xFD	; 253
    3bd2:	80 93 6f 00 	sts	0x006F, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    3bd6:	10 92 e0 03 	sts	0x03E0, r1
    3bda:	95 ce       	rjmp	.-726    	; 0x3906 <__vector_17+0x246>

00003bdc <st_go_home>:
	// default direction is to go left and forward
	unsigned char xDir = LEFT;
	unsigned char yDir = FORWARD;

	// not homed
	gHomed = FALSE;
    3bdc:	10 92 dd 03 	sts	0x03DD, r1

	// no interrupts
	cli();
    3be0:	f8 94       	cli

	printPgmString(PSTR("homing\r\n"));
    3be2:	85 e3       	ldi	r24, 0x35	; 53
    3be4:	95 e0       	ldi	r25, 0x05	; 5
    3be6:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    3bea:	4b 99       	sbic	0x09, 3	; 9
    3bec:	66 c0       	rjmp	.+204    	; 0x3cba <st_go_home+0xde>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    3bee:	48 99       	sbic	0x09, 0	; 9
    3bf0:	41 c0       	rjmp	.+130    	; 0x3c74 <st_go_home+0x98>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bf2:	45 e2       	ldi	r20, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bf4:	20 e6       	ldi	r18, 0x60	; 96
    3bf6:	34 e0       	ldi	r19, 0x04	; 4

	// at here, we are definitely not in home, and also not in the XL2/Yl2 limits
	do {

		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    3bf8:	04 99       	sbic	0x00, 4	; 0
    3bfa:	12 c0       	rjmp	.+36     	; 0x3c20 <st_go_home+0x44>
};

void moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3bfc:	81 b3       	in	r24, 0x11	; 17
    3bfe:	85 73       	andi	r24, 0x35	; 53
    3c00:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3c02:	81 b3       	in	r24, 0x11	; 17
    3c04:	8a 7c       	andi	r24, 0xCA	; 202
    3c06:	81 60       	ori	r24, 0x01	; 1
    3c08:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c0a:	84 2f       	mov	r24, r20
    3c0c:	8a 95       	dec	r24
    3c0e:	f1 f7       	brne	.-4      	; 0x3c0c <st_go_home+0x30>
	 _delay_us( 7 ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3c10:	81 b3       	in	r24, 0x11	; 17
    3c12:	8a 7c       	andi	r24, 0xCA	; 202
    3c14:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c16:	c9 01       	movw	r24, r18
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <st_go_home+0x3c>

	// at here, we are definitely not in home, and also not in the XL2/Yl2 limits
	do {

		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    3c1c:	04 9b       	sbis	0x00, 4	; 0
    3c1e:	ee cf       	rjmp	.-36     	; 0x3bfc <st_go_home+0x20>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c20:	45 e2       	ldi	r20, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c22:	20 e6       	ldi	r18, 0x60	; 96
    3c24:	34 e0       	ldi	r19, 0x04	; 4


	}while( xDir != STOP );

	do {
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    3c26:	90 9b       	sbis	0x12, 0	; 18
    3c28:	0c c0       	rjmp	.+24     	; 0x3c42 <st_go_home+0x66>
			moveForward(1);
		}

	} while( yDir != STOP );

	sei();
    3c2a:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )
    3c2c:	89 b1       	in	r24, 0x09	; 9
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	8f 70       	andi	r24, 0x0F	; 15
    3c32:	90 70       	andi	r25, 0x00	; 0
    3c34:	89 2b       	or	r24, r25
    3c36:	b1 f0       	breq	.+44     	; 0x3c64 <st_go_home+0x88>
		gHomed = TRUE ;
		printPgmString(PSTR("pickobear is homed\r\n"));
		return;
	}

	printPgmString(PSTR("pickobear is not homed\r\n"));
    3c38:	87 e0       	ldi	r24, 0x07	; 7
    3c3a:	95 e0       	ldi	r25, 0x05	; 5
    3c3c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    3c40:	08 95       	ret
}

void moveForward( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3c42:	81 b3       	in	r24, 0x11	; 17
    3c44:	85 73       	andi	r24, 0x35	; 53
    3c46:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3c48:	81 b3       	in	r24, 0x11	; 17
    3c4a:	8a 7c       	andi	r24, 0xCA	; 202
    3c4c:	84 60       	ori	r24, 0x04	; 4
    3c4e:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c50:	84 2f       	mov	r24, r20
    3c52:	8a 95       	dec	r24
    3c54:	f1 f7       	brne	.-4      	; 0x3c52 <st_go_home+0x76>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3c56:	81 b3       	in	r24, 0x11	; 17
    3c58:	8a 7c       	andi	r24, 0xCA	; 202
    3c5a:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c5c:	c9 01       	movw	r24, r18
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	f1 f7       	brne	.-4      	; 0x3c5e <st_go_home+0x82>
    3c62:	e1 cf       	rjmp	.-62     	; 0x3c26 <st_go_home+0x4a>
	sei();


  if( ( LIMIT_PIN & 0xf) == 0x0 )
   {
		gHomed = TRUE ;
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	80 93 dd 03 	sts	0x03DD, r24
		printPgmString(PSTR("pickobear is homed\r\n"));
    3c6a:	80 e2       	ldi	r24, 0x20	; 32
    3c6c:	95 e0       	ldi	r25, 0x05	; 5
    3c6e:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
    3c72:	08 95       	ret
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
		// no longer homed
		gHomed = FALSE;
    3c74:	10 92 dd 03 	sts	0x03DD, r1
		printPgmString(PSTR("yLimit1\r\n"));
    3c78:	88 e4       	ldi	r24, 0x48	; 72
    3c7a:	95 e0       	ldi	r25, 0x05	; 5
    3c7c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
}

void moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    3c80:	81 b3       	in	r24, 0x11	; 17
    3c82:	85 73       	andi	r24, 0x35	; 53
    3c84:	88 60       	ori	r24, 0x08	; 8
    3c86:	81 bb       	out	0x11, r24	; 17
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c8c:	65 e2       	ldi	r22, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c8e:	40 e6       	ldi	r20, 0x60	; 96
    3c90:	54 e0       	ldi	r21, 0x04	; 4
  // Then pulse the stepping pins
  while(distance--) {
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3c92:	81 b3       	in	r24, 0x11	; 17
    3c94:	8a 7c       	andi	r24, 0xCA	; 202
    3c96:	84 60       	ori	r24, 0x04	; 4
    3c98:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c9a:	86 2f       	mov	r24, r22
    3c9c:	8a 95       	dec	r24
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <st_go_home+0xc0>
	 _delay_us( 7 ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3ca0:	81 b3       	in	r24, 0x11	; 17
    3ca2:	8a 7c       	andi	r24, 0xCA	; 202
    3ca4:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ca6:	ca 01       	movw	r24, r20
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	f1 f7       	brne	.-4      	; 0x3ca8 <st_go_home+0xcc>
    3cac:	2f 5f       	subi	r18, 0xFF	; 255
    3cae:	3f 4f       	sbci	r19, 0xFF	; 255
void moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3cb0:	83 e0       	ldi	r24, 0x03	; 3
    3cb2:	28 3e       	cpi	r18, 0xE8	; 232
    3cb4:	38 07       	cpc	r19, r24
    3cb6:	69 f7       	brne	.-38     	; 0x3c92 <st_go_home+0xb6>
    3cb8:	9c cf       	rjmp	.-200    	; 0x3bf2 <st_go_home+0x16>
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
		// no longer homed
		gHomed = FALSE;
    3cba:	10 92 dd 03 	sts	0x03DD, r1
		printPgmString(PSTR("xLimit1\r\n"));
    3cbe:	8e e3       	ldi	r24, 0x3E	; 62
    3cc0:	95 e0       	ldi	r25, 0x05	; 5
    3cc2:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <printPgmString>
}

void moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    3cc6:	81 b3       	in	r24, 0x11	; 17
    3cc8:	85 73       	andi	r24, 0x35	; 53
    3cca:	82 60       	ori	r24, 0x02	; 2
    3ccc:	81 bb       	out	0x11, r24	; 17
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3cd2:	65 e2       	ldi	r22, 0x25	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cd4:	40 e6       	ldi	r20, 0x60	; 96
    3cd6:	54 e0       	ldi	r21, 0x04	; 4
  // Then pulse the stepping pins
  while(distance--) {
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3cd8:	81 b3       	in	r24, 0x11	; 17
    3cda:	8a 7c       	andi	r24, 0xCA	; 202
    3cdc:	81 60       	ori	r24, 0x01	; 1
    3cde:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ce0:	86 2f       	mov	r24, r22
    3ce2:	8a 95       	dec	r24
    3ce4:	f1 f7       	brne	.-4      	; 0x3ce2 <st_go_home+0x106>
	 _delay_us( 7 ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    3ce6:	81 b3       	in	r24, 0x11	; 17
    3ce8:	8a 7c       	andi	r24, 0xCA	; 202
    3cea:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cec:	ca 01       	movw	r24, r20
    3cee:	01 97       	sbiw	r24, 0x01	; 1
    3cf0:	f1 f7       	brne	.-4      	; 0x3cee <st_go_home+0x112>
    3cf2:	2f 5f       	subi	r18, 0xFF	; 255
    3cf4:	3f 4f       	sbci	r19, 0xFF	; 255
void moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3cf6:	83 e0       	ldi	r24, 0x03	; 3
    3cf8:	28 3e       	cpi	r18, 0xE8	; 232
    3cfa:	38 07       	cpc	r19, r24
    3cfc:	69 f7       	brne	.-38     	; 0x3cd8 <st_go_home+0xfc>
    3cfe:	77 cf       	rjmp	.-274    	; 0x3bee <st_go_home+0x12>

00003d00 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    3d00:	80 b3       	in	r24, 0x10	; 16
    3d02:	85 63       	ori	r24, 0x35	; 53
    3d04:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    3d06:	80 b3       	in	r24, 0x10	; 16
    3d08:	8a 6c       	ori	r24, 0xCA	; 202
    3d0a:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    3d0c:	81 b3       	in	r24, 0x11	; 17
    3d0e:	8a 7c       	andi	r24, 0xCA	; 202
    3d10:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    3d12:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3d14:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    3d16:	a1 e8       	ldi	r26, 0x81	; 129
    3d18:	b0 e0       	ldi	r27, 0x00	; 0
    3d1a:	8c 91       	ld	r24, X
    3d1c:	8f 7e       	andi	r24, 0xEF	; 239
    3d1e:	8c 93       	st	X, r24
	TCCR1B |=  (1<<WGM12);
    3d20:	8c 91       	ld	r24, X
    3d22:	88 60       	ori	r24, 0x08	; 8
    3d24:	8c 93       	st	X, r24
	TCCR1A &= ~(1<<WGM11); 
    3d26:	e0 e8       	ldi	r30, 0x80	; 128
    3d28:	f0 e0       	ldi	r31, 0x00	; 0
    3d2a:	80 81       	ld	r24, Z
    3d2c:	8d 7f       	andi	r24, 0xFD	; 253
    3d2e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    3d30:	80 81       	ld	r24, Z
    3d32:	8e 7f       	andi	r24, 0xFE	; 254
    3d34:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    3d36:	80 81       	ld	r24, Z
    3d38:	8f 73       	andi	r24, 0x3F	; 63
    3d3a:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    3d3c:	80 81       	ld	r24, Z
    3d3e:	8f 7c       	andi	r24, 0xCF	; 207
    3d40:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    3d42:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3d46:	82 e0       	ldi	r24, 0x02	; 2
    3d48:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    3d4c:	e0 e7       	ldi	r30, 0x70	; 112
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	81 60       	ori	r24, 0x01	; 1
    3d54:	80 83       	st	Z, r24
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3d56:	8c 91       	ld	r24, X
    3d58:	88 7f       	andi	r24, 0xF8	; 248
    3d5a:	82 60       	ori	r24, 0x02	; 2
    3d5c:	8c 93       	st	X, r24
  // Set ceiling
  OCR1A = ceiling;
    3d5e:	80 e2       	ldi	r24, 0x20	; 32
    3d60:	9e e4       	ldi	r25, 0x4E	; 78
    3d62:	90 93 89 00 	sts	0x0089, r25
    3d66:	80 93 88 00 	sts	0x0088, r24
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	91 e7       	ldi	r25, 0x71	; 113
    3d6e:	a2 e0       	ldi	r26, 0x02	; 2
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	80 93 f8 03 	sts	0x03F8, r24
    3d76:	90 93 f9 03 	sts	0x03F9, r25
    3d7a:	a0 93 fa 03 	sts	0x03FA, r26
    3d7e:	b0 93 fb 03 	sts	0x03FB, r27
  TCCR2A = 0;         // Normal operation
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
  TIMSK2 |= (1<<TOIE2);      
  
  set_step_events_per_minute(6000);
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    3d82:	ef e6       	ldi	r30, 0x6F	; 111
    3d84:	f0 e0       	ldi	r31, 0x00	; 0
    3d86:	80 81       	ld	r24, Z
    3d88:	8d 7f       	andi	r24, 0xFD	; 253
    3d8a:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    3d8c:	10 92 fc 03 	sts	0x03FC, r1
    3d90:	10 92 fd 03 	sts	0x03FD, r1
    3d94:	10 92 fe 03 	sts	0x03FE, r1
    3d98:	10 92 ff 03 	sts	0x03FF, r1
  
  sei();
    3d9c:	78 94       	sei
}
    3d9e:	08 95       	ret

00003da0 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3da0:	ef 92       	push	r14
    3da2:	ff 92       	push	r15
    3da4:	0f 93       	push	r16
    3da6:	1f 93       	push	r17
    3da8:	7b 01       	movw	r14, r22
    3daa:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    3dac:	22 e0       	ldi	r18, 0x02	; 2
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	40 e0       	ldi	r20, 0x00	; 0
    3db2:	50 e0       	ldi	r21, 0x00	; 0
    3db4:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <__divmodsi4>
    3db8:	20 5c       	subi	r18, 0xC0	; 192
    3dba:	3d 4b       	sbci	r19, 0xBD	; 189
    3dbc:	40 4f       	sbci	r20, 0xF0	; 240
    3dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc0:	ca 01       	movw	r24, r20
    3dc2:	b9 01       	movw	r22, r18
    3dc4:	a8 01       	movw	r20, r16
    3dc6:	97 01       	movw	r18, r14
    3dc8:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    3dcc:	c9 01       	movw	r24, r18
    3dce:	da 01       	movw	r26, r20
    3dd0:	01 97       	sbiw	r24, 0x01	; 1
    3dd2:	a1 09       	sbc	r26, r1
    3dd4:	b1 09       	sbc	r27, r1
    3dd6:	29 2f       	mov	r18, r25
    3dd8:	3a 2f       	mov	r19, r26
    3dda:	4b 2f       	mov	r20, r27
    3ddc:	55 27       	eor	r21, r21
    3dde:	01 96       	adiw	r24, 0x01	; 1
    3de0:	a1 1d       	adc	r26, r1
    3de2:	b1 1d       	adc	r27, r1
    3de4:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3de8:	81 50       	subi	r24, 0x01	; 1
    3dea:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3dee:	e0 ec       	ldi	r30, 0xC0	; 192
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	8d 7f       	andi	r24, 0xFD	; 253
    3df6:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    3df8:	e1 ec       	ldi	r30, 0xC1	; 193
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	80 61       	ori	r24, 0x10	; 16
    3e00:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3e02:	80 81       	ld	r24, Z
    3e04:	88 60       	ori	r24, 0x08	; 8
    3e06:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3e08:	80 81       	ld	r24, Z
    3e0a:	80 68       	ori	r24, 0x80	; 128
    3e0c:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	ff 90       	pop	r15
    3e14:	ef 90       	pop	r14
    3e16:	08 95       	ret

00003e18 <serialWrite>:

void serialWrite(unsigned char c)
{
    3e18:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3e1a:	80 91 c0 00 	lds	r24, 0x00C0
    3e1e:	85 ff       	sbrs	r24, 5
    3e20:	fc cf       	rjmp	.-8      	; 0x3e1a <serialWrite+0x2>
		;
	UDR0 = c;
    3e22:	90 93 c6 00 	sts	0x00C6, r25
}
    3e26:	08 95       	ret

00003e28 <serialAvailable>:

int serialAvailable()
{
    3e28:	80 91 04 04 	lds	r24, 0x0404
    3e2c:	90 91 05 04 	lds	r25, 0x0405
    3e30:	80 50       	subi	r24, 0x00	; 0
    3e32:	9f 4f       	sbci	r25, 0xFF	; 255
    3e34:	20 91 06 04 	lds	r18, 0x0406
    3e38:	30 91 07 04 	lds	r19, 0x0407
    3e3c:	82 1b       	sub	r24, r18
    3e3e:	93 0b       	sbc	r25, r19
    3e40:	60 e0       	ldi	r22, 0x00	; 0
    3e42:	71 e0       	ldi	r23, 0x01	; 1
    3e44:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3e48:	08 95       	ret

00003e4a <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3e4a:	40 91 06 04 	lds	r20, 0x0406
    3e4e:	50 91 07 04 	lds	r21, 0x0407
    3e52:	80 91 04 04 	lds	r24, 0x0404
    3e56:	90 91 05 04 	lds	r25, 0x0405
    3e5a:	84 17       	cp	r24, r20
    3e5c:	95 07       	cpc	r25, r21
    3e5e:	89 f0       	breq	.+34     	; 0x3e82 <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3e60:	fa 01       	movw	r30, r20
    3e62:	e8 5f       	subi	r30, 0xF8	; 248
    3e64:	fb 4f       	sbci	r31, 0xFB	; 251
    3e66:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3e68:	ca 01       	movw	r24, r20
    3e6a:	01 96       	adiw	r24, 0x01	; 1
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	71 e0       	ldi	r23, 0x01	; 1
    3e70:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
    3e74:	90 93 07 04 	sts	0x0407, r25
    3e78:	80 93 06 04 	sts	0x0406, r24
		return c;
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3e7e:	c9 01       	movw	r24, r18
    3e80:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3e82:	2f ef       	ldi	r18, 0xFF	; 255
    3e84:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3e86:	c9 01       	movw	r24, r18
    3e88:	08 95       	ret

00003e8a <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3e8a:	80 91 06 04 	lds	r24, 0x0406
    3e8e:	90 91 07 04 	lds	r25, 0x0407
    3e92:	90 93 05 04 	sts	0x0405, r25
    3e96:	80 93 04 04 	sts	0x0404, r24
}
    3e9a:	08 95       	ret

00003e9c <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3e9c:	1f 92       	push	r1
    3e9e:	0f 92       	push	r0
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	0f 92       	push	r0
    3ea4:	0b b6       	in	r0, 0x3b	; 59
    3ea6:	0f 92       	push	r0
    3ea8:	11 24       	eor	r1, r1
    3eaa:	2f 93       	push	r18
    3eac:	3f 93       	push	r19
    3eae:	4f 93       	push	r20
    3eb0:	5f 93       	push	r21
    3eb2:	6f 93       	push	r22
    3eb4:	7f 93       	push	r23
    3eb6:	8f 93       	push	r24
    3eb8:	9f 93       	push	r25
    3eba:	af 93       	push	r26
    3ebc:	bf 93       	push	r27
    3ebe:	ef 93       	push	r30
    3ec0:	ff 93       	push	r31
	unsigned char c = UDR0;
    3ec2:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3ec6:	e0 91 04 04 	lds	r30, 0x0404
    3eca:	f0 91 05 04 	lds	r31, 0x0405
    3ece:	cf 01       	movw	r24, r30
    3ed0:	01 96       	adiw	r24, 0x01	; 1
    3ed2:	60 e0       	ldi	r22, 0x00	; 0
    3ed4:	71 e0       	ldi	r23, 0x01	; 1
    3ed6:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <__divmodhi4>
    3eda:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3edc:	80 91 06 04 	lds	r24, 0x0406
    3ee0:	90 91 07 04 	lds	r25, 0x0407
    3ee4:	28 17       	cp	r18, r24
    3ee6:	39 07       	cpc	r19, r25
    3ee8:	39 f0       	breq	.+14     	; 0x3ef8 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3eea:	e8 5f       	subi	r30, 0xF8	; 248
    3eec:	fb 4f       	sbci	r31, 0xFB	; 251
    3eee:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3ef0:	30 93 05 04 	sts	0x0405, r19
    3ef4:	20 93 04 04 	sts	0x0404, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3ef8:	ff 91       	pop	r31
    3efa:	ef 91       	pop	r30
    3efc:	bf 91       	pop	r27
    3efe:	af 91       	pop	r26
    3f00:	9f 91       	pop	r25
    3f02:	8f 91       	pop	r24
    3f04:	7f 91       	pop	r23
    3f06:	6f 91       	pop	r22
    3f08:	5f 91       	pop	r21
    3f0a:	4f 91       	pop	r20
    3f0c:	3f 91       	pop	r19
    3f0e:	2f 91       	pop	r18
    3f10:	0f 90       	pop	r0
    3f12:	0b be       	out	0x3b, r0	; 59
    3f14:	0f 90       	pop	r0
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	0f 90       	pop	r0
    3f1a:	1f 90       	pop	r1
    3f1c:	18 95       	reti

00003f1e <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3f1e:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3f20:	80 91 c0 00 	lds	r24, 0x00C0
    3f24:	85 ff       	sbrs	r24, 5
    3f26:	fc cf       	rjmp	.-8      	; 0x3f20 <printByte+0x2>
		;
	UDR0 = c;
    3f28:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3f2c:	08 95       	ret

00003f2e <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3f2e:	fc 01       	movw	r30, r24
	while (*s)
    3f30:	90 81       	ld	r25, Z
    3f32:	99 23       	and	r25, r25
    3f34:	51 f0       	breq	.+20     	; 0x3f4a <printString+0x1c>
		printByte(*s++);
    3f36:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3f38:	80 91 c0 00 	lds	r24, 0x00C0
    3f3c:	85 ff       	sbrs	r24, 5
    3f3e:	fc cf       	rjmp	.-8      	; 0x3f38 <printString+0xa>
		;
	UDR0 = c;
    3f40:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3f44:	90 81       	ld	r25, Z
    3f46:	99 23       	and	r25, r25
    3f48:	b1 f7       	brne	.-20     	; 0x3f36 <printString+0x8>
    3f4a:	08 95       	ret

00003f4c <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3f4c:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3f4e:	94 91       	lpm	r25, Z+
    3f50:	99 23       	and	r25, r25
    3f52:	51 f0       	breq	.+20     	; 0x3f68 <printPgmString+0x1c>
    3f54:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3f56:	80 91 c0 00 	lds	r24, 0x00C0
    3f5a:	85 ff       	sbrs	r24, 5
    3f5c:	fc cf       	rjmp	.-8      	; 0x3f56 <printPgmString+0xa>
		;
	UDR0 = c;
    3f5e:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3f62:	94 91       	lpm	r25, Z+
    3f64:	99 23       	and	r25, r25
    3f66:	b1 f7       	brne	.-20     	; 0x3f54 <printPgmString+0x8>
    3f68:	08 95       	ret

00003f6a <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3f6a:	2f 92       	push	r2
    3f6c:	3f 92       	push	r3
    3f6e:	4f 92       	push	r4
    3f70:	5f 92       	push	r5
    3f72:	6f 92       	push	r6
    3f74:	7f 92       	push	r7
    3f76:	8f 92       	push	r8
    3f78:	9f 92       	push	r9
    3f7a:	af 92       	push	r10
    3f7c:	bf 92       	push	r11
    3f7e:	cf 92       	push	r12
    3f80:	df 92       	push	r13
    3f82:	ef 92       	push	r14
    3f84:	ff 92       	push	r15
    3f86:	0f 93       	push	r16
    3f88:	1f 93       	push	r17
    3f8a:	df 93       	push	r29
    3f8c:	cf 93       	push	r28
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	a0 97       	sbiw	r28, 0x20	; 32
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	6b 01       	movw	r12, r22
    3fa0:	7c 01       	movw	r14, r24
    3fa2:	29 01       	movw	r4, r18
    3fa4:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3fa6:	61 15       	cp	r22, r1
    3fa8:	71 05       	cpc	r23, r1
    3faa:	81 05       	cpc	r24, r1
    3fac:	91 05       	cpc	r25, r1
    3fae:	09 f4       	brne	.+2      	; 0x3fb2 <printIntegerInBase+0x48>
    3fb0:	50 c0       	rjmp	.+160    	; 0x4052 <printIntegerInBase+0xe8>
		printByte('0');
		return;
    3fb2:	88 24       	eor	r8, r8
    3fb4:	99 24       	eor	r9, r9
    3fb6:	54 01       	movw	r10, r8
    3fb8:	1e 01       	movw	r2, r28
    3fba:	08 94       	sec
    3fbc:	21 1c       	adc	r2, r1
    3fbe:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3fc0:	81 01       	movw	r16, r2
    3fc2:	08 0d       	add	r16, r8
    3fc4:	19 1d       	adc	r17, r9
    3fc6:	c7 01       	movw	r24, r14
    3fc8:	b6 01       	movw	r22, r12
    3fca:	a3 01       	movw	r20, r6
    3fcc:	92 01       	movw	r18, r4
    3fce:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    3fd2:	f8 01       	movw	r30, r16
    3fd4:	60 83       	st	Z, r22
    3fd6:	08 94       	sec
    3fd8:	81 1c       	adc	r8, r1
    3fda:	91 1c       	adc	r9, r1
    3fdc:	a1 1c       	adc	r10, r1
    3fde:	b1 1c       	adc	r11, r1
		n /= base;
    3fe0:	c7 01       	movw	r24, r14
    3fe2:	b6 01       	movw	r22, r12
    3fe4:	a3 01       	movw	r20, r6
    3fe6:	92 01       	movw	r18, r4
    3fe8:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    3fec:	c9 01       	movw	r24, r18
    3fee:	da 01       	movw	r26, r20
    3ff0:	6c 01       	movw	r12, r24
    3ff2:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3ff4:	c1 14       	cp	r12, r1
    3ff6:	d1 04       	cpc	r13, r1
    3ff8:	e1 04       	cpc	r14, r1
    3ffa:	f1 04       	cpc	r15, r1
    3ffc:	09 f7       	brne	.-62     	; 0x3fc0 <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3ffe:	81 14       	cp	r8, r1
    4000:	91 04       	cpc	r9, r1
    4002:	a1 04       	cpc	r10, r1
    4004:	b1 04       	cpc	r11, r1
    4006:	61 f1       	breq	.+88     	; 0x4060 <printIntegerInBase+0xf6>
    4008:	91 01       	movw	r18, r2
    400a:	28 0d       	add	r18, r8
    400c:	39 1d       	adc	r19, r9
    400e:	d5 01       	movw	r26, r10
    4010:	c4 01       	movw	r24, r8
    4012:	01 97       	sbiw	r24, 0x01	; 1
    4014:	a1 09       	sbc	r26, r1
    4016:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    4018:	ac 01       	movw	r20, r24
    401a:	48 19       	sub	r20, r8
    401c:	59 09       	sbc	r21, r9
    401e:	fa 01       	movw	r30, r20
    4020:	e2 0f       	add	r30, r18
    4022:	f3 1f       	adc	r31, r19
    4024:	e0 81       	ld	r30, Z
    4026:	ea 30       	cpi	r30, 0x0A	; 10
    4028:	90 f4       	brcc	.+36     	; 0x404e <printIntegerInBase+0xe4>
    402a:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    402c:	80 91 c0 00 	lds	r24, 0x00C0
    4030:	85 ff       	sbrs	r24, 5
    4032:	fc cf       	rjmp	.-8      	; 0x402c <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    4034:	e0 93 c6 00 	sts	0x00C6, r30
    4038:	21 50       	subi	r18, 0x01	; 1
    403a:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    403c:	22 16       	cp	r2, r18
    403e:	33 06       	cpc	r3, r19
    4040:	79 f0       	breq	.+30     	; 0x4060 <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    4042:	fa 01       	movw	r30, r20
    4044:	e2 0f       	add	r30, r18
    4046:	f3 1f       	adc	r31, r19
    4048:	e0 81       	ld	r30, Z
    404a:	ea 30       	cpi	r30, 0x0A	; 10
    404c:	70 f3       	brcs	.-36     	; 0x402a <printIntegerInBase+0xc0>
    404e:	e9 5c       	subi	r30, 0xC9	; 201
    4050:	ed cf       	rjmp	.-38     	; 0x402c <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4052:	80 91 c0 00 	lds	r24, 0x00C0
    4056:	85 ff       	sbrs	r24, 5
    4058:	fc cf       	rjmp	.-8      	; 0x4052 <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    405a:	80 e3       	ldi	r24, 0x30	; 48
    405c:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    4060:	a0 96       	adiw	r28, 0x20	; 32
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	f8 94       	cli
    4066:	de bf       	out	0x3e, r29	; 62
    4068:	0f be       	out	0x3f, r0	; 63
    406a:	cd bf       	out	0x3d, r28	; 61
    406c:	cf 91       	pop	r28
    406e:	df 91       	pop	r29
    4070:	1f 91       	pop	r17
    4072:	0f 91       	pop	r16
    4074:	ff 90       	pop	r15
    4076:	ef 90       	pop	r14
    4078:	df 90       	pop	r13
    407a:	cf 90       	pop	r12
    407c:	bf 90       	pop	r11
    407e:	af 90       	pop	r10
    4080:	9f 90       	pop	r9
    4082:	8f 90       	pop	r8
    4084:	7f 90       	pop	r7
    4086:	6f 90       	pop	r6
    4088:	5f 90       	pop	r5
    408a:	4f 90       	pop	r4
    408c:	3f 90       	pop	r3
    408e:	2f 90       	pop	r2
    4090:	08 95       	ret

00004092 <printInteger>:

void printInteger(long n)
{
    4092:	6f 92       	push	r6
    4094:	7f 92       	push	r7
    4096:	8f 92       	push	r8
    4098:	9f 92       	push	r9
    409a:	af 92       	push	r10
    409c:	bf 92       	push	r11
    409e:	cf 92       	push	r12
    40a0:	df 92       	push	r13
    40a2:	ef 92       	push	r14
    40a4:	ff 92       	push	r15
    40a6:	0f 93       	push	r16
    40a8:	1f 93       	push	r17
    40aa:	df 93       	push	r29
    40ac:	cf 93       	push	r28
    40ae:	cd b7       	in	r28, 0x3d	; 61
    40b0:	de b7       	in	r29, 0x3e	; 62
    40b2:	a0 97       	sbiw	r28, 0x20	; 32
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	f8 94       	cli
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	9b 01       	movw	r18, r22
    40c0:	ac 01       	movw	r20, r24
	if (n < 0) {
    40c2:	97 fd       	sbrc	r25, 7
    40c4:	78 c0       	rjmp	.+240    	; 0x41b6 <printInteger+0x124>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    40c6:	69 01       	movw	r12, r18
    40c8:	7a 01       	movw	r14, r20
void printIntegerInBase(unsigned long n, unsigned long base)
{ 
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    40ca:	21 15       	cp	r18, r1
    40cc:	31 05       	cpc	r19, r1
    40ce:	41 05       	cpc	r20, r1
    40d0:	51 05       	cpc	r21, r1
    40d2:	09 f4       	brne	.+2      	; 0x40d6 <printInteger+0x44>
    40d4:	54 c0       	rjmp	.+168    	; 0x417e <printInteger+0xec>

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    40d6:	88 24       	eor	r8, r8
    40d8:	99 24       	eor	r9, r9
    40da:	54 01       	movw	r10, r8
    40dc:	3e 01       	movw	r6, r28
    40de:	08 94       	sec
    40e0:	61 1c       	adc	r6, r1
    40e2:	71 1c       	adc	r7, r1
		printByte('0');
		return;
	} 

	while (n > 0) {
		buf[i++] = n % base;
    40e4:	83 01       	movw	r16, r6
    40e6:	08 0d       	add	r16, r8
    40e8:	19 1d       	adc	r17, r9
    40ea:	c7 01       	movw	r24, r14
    40ec:	b6 01       	movw	r22, r12
    40ee:	2a e0       	ldi	r18, 0x0A	; 10
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e0       	ldi	r20, 0x00	; 0
    40f4:	50 e0       	ldi	r21, 0x00	; 0
    40f6:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    40fa:	f8 01       	movw	r30, r16
    40fc:	60 83       	st	Z, r22
    40fe:	08 94       	sec
    4100:	81 1c       	adc	r8, r1
    4102:	91 1c       	adc	r9, r1
    4104:	a1 1c       	adc	r10, r1
    4106:	b1 1c       	adc	r11, r1
		n /= base;
    4108:	c7 01       	movw	r24, r14
    410a:	b6 01       	movw	r22, r12
    410c:	2a e0       	ldi	r18, 0x0A	; 10
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	40 e0       	ldi	r20, 0x00	; 0
    4112:	50 e0       	ldi	r21, 0x00	; 0
    4114:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    4118:	c9 01       	movw	r24, r18
    411a:	da 01       	movw	r26, r20
    411c:	6c 01       	movw	r12, r24
    411e:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    4120:	c1 14       	cp	r12, r1
    4122:	d1 04       	cpc	r13, r1
    4124:	e1 04       	cpc	r14, r1
    4126:	f1 04       	cpc	r15, r1
    4128:	e9 f6       	brne	.-70     	; 0x40e4 <printInteger+0x52>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    412a:	81 14       	cp	r8, r1
    412c:	91 04       	cpc	r9, r1
    412e:	a1 04       	cpc	r10, r1
    4130:	b1 04       	cpc	r11, r1
    4132:	61 f1       	breq	.+88     	; 0x418c <printInteger+0xfa>
    4134:	93 01       	movw	r18, r6
    4136:	28 0d       	add	r18, r8
    4138:	39 1d       	adc	r19, r9
    413a:	d5 01       	movw	r26, r10
    413c:	c4 01       	movw	r24, r8
    413e:	01 97       	sbiw	r24, 0x01	; 1
    4140:	a1 09       	sbc	r26, r1
    4142:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    4144:	ac 01       	movw	r20, r24
    4146:	48 19       	sub	r20, r8
    4148:	59 09       	sbc	r21, r9
    414a:	fa 01       	movw	r30, r20
    414c:	e2 0f       	add	r30, r18
    414e:	f3 1f       	adc	r31, r19
    4150:	e0 81       	ld	r30, Z
    4152:	ea 30       	cpi	r30, 0x0A	; 10
    4154:	90 f4       	brcc	.+36     	; 0x417a <printInteger+0xe8>
    4156:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4158:	80 91 c0 00 	lds	r24, 0x00C0
    415c:	85 ff       	sbrs	r24, 5
    415e:	fc cf       	rjmp	.-8      	; 0x4158 <printInteger+0xc6>
		;
	UDR0 = c;
    4160:	e0 93 c6 00 	sts	0x00C6, r30
    4164:	21 50       	subi	r18, 0x01	; 1
    4166:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    4168:	62 16       	cp	r6, r18
    416a:	73 06       	cpc	r7, r19
    416c:	79 f0       	breq	.+30     	; 0x418c <printInteger+0xfa>
		printByte(buf[i - 1] < 10 ?
    416e:	fa 01       	movw	r30, r20
    4170:	e2 0f       	add	r30, r18
    4172:	f3 1f       	adc	r31, r19
    4174:	e0 81       	ld	r30, Z
    4176:	ea 30       	cpi	r30, 0x0A	; 10
    4178:	70 f3       	brcs	.-36     	; 0x4156 <printInteger+0xc4>
    417a:	e9 5c       	subi	r30, 0xC9	; 201
    417c:	ed cf       	rjmp	.-38     	; 0x4158 <printInteger+0xc6>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    417e:	80 91 c0 00 	lds	r24, 0x00C0
    4182:	85 ff       	sbrs	r24, 5
    4184:	fc cf       	rjmp	.-8      	; 0x417e <printInteger+0xec>
		;
	UDR0 = c;
    4186:	80 e3       	ldi	r24, 0x30	; 48
    4188:	80 93 c6 00 	sts	0x00C6, r24
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
}
    418c:	a0 96       	adiw	r28, 0x20	; 32
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	f8 94       	cli
    4192:	de bf       	out	0x3e, r29	; 62
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	cf 91       	pop	r28
    419a:	df 91       	pop	r29
    419c:	1f 91       	pop	r17
    419e:	0f 91       	pop	r16
    41a0:	ff 90       	pop	r15
    41a2:	ef 90       	pop	r14
    41a4:	df 90       	pop	r13
    41a6:	cf 90       	pop	r12
    41a8:	bf 90       	pop	r11
    41aa:	af 90       	pop	r10
    41ac:	9f 90       	pop	r9
    41ae:	8f 90       	pop	r8
    41b0:	7f 90       	pop	r7
    41b2:	6f 90       	pop	r6
    41b4:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    41b6:	80 91 c0 00 	lds	r24, 0x00C0
    41ba:	85 ff       	sbrs	r24, 5
    41bc:	fc cf       	rjmp	.-8      	; 0x41b6 <printInteger+0x124>
		;
	UDR0 = c;
    41be:	8d e2       	ldi	r24, 0x2D	; 45
    41c0:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    41c4:	50 95       	com	r21
    41c6:	40 95       	com	r20
    41c8:	30 95       	com	r19
    41ca:	21 95       	neg	r18
    41cc:	3f 4f       	sbci	r19, 0xFF	; 255
    41ce:	4f 4f       	sbci	r20, 0xFF	; 255
    41d0:	5f 4f       	sbci	r21, 0xFF	; 255
    41d2:	79 cf       	rjmp	.-270    	; 0x40c6 <printInteger+0x34>

000041d4 <printBinary>:
// {
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
    41d4:	ef 92       	push	r14
    41d6:	ff 92       	push	r15
    41d8:	0f 93       	push	r16
    41da:	1f 93       	push	r17
    41dc:	df 93       	push	r29
    41de:	cf 93       	push	r28
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62
    41e4:	a0 97       	sbiw	r28, 0x20	; 32
    41e6:	0f b6       	in	r0, 0x3f	; 63
    41e8:	f8 94       	cli
    41ea:	de bf       	out	0x3e, r29	; 62
    41ec:	0f be       	out	0x3f, r0	; 63
    41ee:	cd bf       	out	0x3d, r28	; 61
    41f0:	9b 01       	movw	r18, r22
    41f2:	ac 01       	movw	r20, r24
void printIntegerInBase(unsigned long n, unsigned long base)
{ 
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    41f4:	61 15       	cp	r22, r1
    41f6:	71 05       	cpc	r23, r1
    41f8:	81 05       	cpc	r24, r1
    41fa:	91 05       	cpc	r25, r1
    41fc:	09 f4       	brne	.+2      	; 0x4200 <printBinary+0x2c>
    41fe:	48 c0       	rjmp	.+144    	; 0x4290 <printBinary+0xbc>

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    4200:	ee 24       	eor	r14, r14
    4202:	ff 24       	eor	r15, r15
    4204:	87 01       	movw	r16, r14
    4206:	be 01       	movw	r22, r28
    4208:	6f 5f       	subi	r22, 0xFF	; 255
    420a:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte('0');
		return;
	} 

	while (n > 0) {
		buf[i++] = n % base;
    420c:	fb 01       	movw	r30, r22
    420e:	ee 0d       	add	r30, r14
    4210:	ff 1d       	adc	r31, r15
    4212:	da 01       	movw	r26, r20
    4214:	c9 01       	movw	r24, r18
    4216:	81 70       	andi	r24, 0x01	; 1
    4218:	90 70       	andi	r25, 0x00	; 0
    421a:	a0 70       	andi	r26, 0x00	; 0
    421c:	b0 70       	andi	r27, 0x00	; 0
    421e:	80 83       	st	Z, r24
    4220:	08 94       	sec
    4222:	e1 1c       	adc	r14, r1
    4224:	f1 1c       	adc	r15, r1
    4226:	01 1d       	adc	r16, r1
    4228:	11 1d       	adc	r17, r1
		n /= base;
    422a:	56 95       	lsr	r21
    422c:	47 95       	ror	r20
    422e:	37 95       	ror	r19
    4230:	27 95       	ror	r18
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    4232:	21 15       	cp	r18, r1
    4234:	31 05       	cpc	r19, r1
    4236:	41 05       	cpc	r20, r1
    4238:	51 05       	cpc	r21, r1
    423a:	41 f7       	brne	.-48     	; 0x420c <printBinary+0x38>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    423c:	e1 14       	cp	r14, r1
    423e:	f1 04       	cpc	r15, r1
    4240:	01 05       	cpc	r16, r1
    4242:	11 05       	cpc	r17, r1
    4244:	61 f1       	breq	.+88     	; 0x429e <printBinary+0xca>
    4246:	9b 01       	movw	r18, r22
    4248:	2e 0d       	add	r18, r14
    424a:	3f 1d       	adc	r19, r15
    424c:	d8 01       	movw	r26, r16
    424e:	c7 01       	movw	r24, r14
    4250:	01 97       	sbiw	r24, 0x01	; 1
    4252:	a1 09       	sbc	r26, r1
    4254:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    4256:	ac 01       	movw	r20, r24
    4258:	4e 19       	sub	r20, r14
    425a:	5f 09       	sbc	r21, r15
    425c:	fa 01       	movw	r30, r20
    425e:	e2 0f       	add	r30, r18
    4260:	f3 1f       	adc	r31, r19
    4262:	e0 81       	ld	r30, Z
    4264:	ea 30       	cpi	r30, 0x0A	; 10
    4266:	90 f4       	brcc	.+36     	; 0x428c <printBinary+0xb8>
    4268:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    426a:	80 91 c0 00 	lds	r24, 0x00C0
    426e:	85 ff       	sbrs	r24, 5
    4270:	fc cf       	rjmp	.-8      	; 0x426a <printBinary+0x96>
		;
	UDR0 = c;
    4272:	e0 93 c6 00 	sts	0x00C6, r30
    4276:	21 50       	subi	r18, 0x01	; 1
    4278:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    427a:	62 17       	cp	r22, r18
    427c:	73 07       	cpc	r23, r19
    427e:	79 f0       	breq	.+30     	; 0x429e <printBinary+0xca>
		printByte(buf[i - 1] < 10 ?
    4280:	fa 01       	movw	r30, r20
    4282:	e2 0f       	add	r30, r18
    4284:	f3 1f       	adc	r31, r19
    4286:	e0 81       	ld	r30, Z
    4288:	ea 30       	cpi	r30, 0x0A	; 10
    428a:	70 f3       	brcs	.-36     	; 0x4268 <printBinary+0x94>
    428c:	e9 5c       	subi	r30, 0xC9	; 201
    428e:	ed cf       	rjmp	.-38     	; 0x426a <printBinary+0x96>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    4290:	80 91 c0 00 	lds	r24, 0x00C0
    4294:	85 ff       	sbrs	r24, 5
    4296:	fc cf       	rjmp	.-8      	; 0x4290 <printBinary+0xbc>
		;
	UDR0 = c;
    4298:	80 e3       	ldi	r24, 0x30	; 48
    429a:	80 93 c6 00 	sts	0x00C6, r24
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
  }
    429e:	a0 96       	adiw	r28, 0x20	; 32
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	1f 91       	pop	r17
    42b0:	0f 91       	pop	r16
    42b2:	ff 90       	pop	r15
    42b4:	ef 90       	pop	r14
    42b6:	08 95       	ret

000042b8 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    42b8:	2f 92       	push	r2
    42ba:	3f 92       	push	r3
    42bc:	4f 92       	push	r4
    42be:	5f 92       	push	r5
    42c0:	6f 92       	push	r6
    42c2:	7f 92       	push	r7
    42c4:	8f 92       	push	r8
    42c6:	9f 92       	push	r9
    42c8:	af 92       	push	r10
    42ca:	bf 92       	push	r11
    42cc:	cf 92       	push	r12
    42ce:	df 92       	push	r13
    42d0:	ef 92       	push	r14
    42d2:	ff 92       	push	r15
    42d4:	0f 93       	push	r16
    42d6:	1f 93       	push	r17
    42d8:	df 93       	push	r29
    42da:	cf 93       	push	r28
    42dc:	cd b7       	in	r28, 0x3d	; 61
    42de:	de b7       	in	r29, 0x3e	; 62
    42e0:	a4 97       	sbiw	r28, 0x24	; 36
    42e2:	0f b6       	in	r0, 0x3f	; 63
    42e4:	f8 94       	cli
    42e6:	de bf       	out	0x3e, r29	; 62
    42e8:	0f be       	out	0x3f, r0	; 63
    42ea:	cd bf       	out	0x3d, r28	; 61
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    42ec:	ae 01       	movw	r20, r28
    42ee:	4f 5f       	subi	r20, 0xFF	; 255
    42f0:	5f 4f       	sbci	r21, 0xFF	; 255
    42f2:	0e 94 38 25 	call	0x4a70	; 0x4a70 <modf>
    42f6:	1b 01       	movw	r2, r22
    42f8:	2c 01       	movw	r4, r24
  printInteger(integer_part);
    42fa:	69 81       	ldd	r22, Y+1	; 0x01
    42fc:	7a 81       	ldd	r23, Y+2	; 0x02
    42fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4300:	9c 81       	ldd	r25, Y+4	; 0x04
    4302:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
    4306:	9b 01       	movw	r18, r22
    4308:	ac 01       	movw	r20, r24
			'A' + buf[i - 1] - 10);
}

void printInteger(long n)
{
	if (n < 0) {
    430a:	97 fd       	sbrc	r25, 7
    430c:	d5 c0       	rjmp	.+426    	; 0x44b8 <printFloat+0x200>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    430e:	69 01       	movw	r12, r18
    4310:	7a 01       	movw	r14, r20
void printIntegerInBase(unsigned long n, unsigned long base)
{ 
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    4312:	21 15       	cp	r18, r1
    4314:	31 05       	cpc	r19, r1
    4316:	41 05       	cpc	r20, r1
    4318:	51 05       	cpc	r21, r1
    431a:	09 f4       	brne	.+2      	; 0x431e <printFloat+0x66>
    431c:	c1 c0       	rjmp	.+386    	; 0x44a0 <printFloat+0x1e8>

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    431e:	88 24       	eor	r8, r8
    4320:	99 24       	eor	r9, r9
    4322:	54 01       	movw	r10, r8
    4324:	a5 e0       	ldi	r26, 0x05	; 5
    4326:	6a 2e       	mov	r6, r26
    4328:	71 2c       	mov	r7, r1
    432a:	6c 0e       	add	r6, r28
    432c:	7d 1e       	adc	r7, r29
		printByte('0');
		return;
	} 

	while (n > 0) {
		buf[i++] = n % base;
    432e:	83 01       	movw	r16, r6
    4330:	08 0d       	add	r16, r8
    4332:	19 1d       	adc	r17, r9
    4334:	c7 01       	movw	r24, r14
    4336:	b6 01       	movw	r22, r12
    4338:	2a e0       	ldi	r18, 0x0A	; 10
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	50 e0       	ldi	r21, 0x00	; 0
    4340:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    4344:	f8 01       	movw	r30, r16
    4346:	60 83       	st	Z, r22
    4348:	08 94       	sec
    434a:	81 1c       	adc	r8, r1
    434c:	91 1c       	adc	r9, r1
    434e:	a1 1c       	adc	r10, r1
    4350:	b1 1c       	adc	r11, r1
		n /= base;
    4352:	c7 01       	movw	r24, r14
    4354:	b6 01       	movw	r22, r12
    4356:	2a e0       	ldi	r18, 0x0A	; 10
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e0       	ldi	r20, 0x00	; 0
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    4362:	c9 01       	movw	r24, r18
    4364:	da 01       	movw	r26, r20
    4366:	6c 01       	movw	r12, r24
    4368:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    436a:	c1 14       	cp	r12, r1
    436c:	d1 04       	cpc	r13, r1
    436e:	e1 04       	cpc	r14, r1
    4370:	f1 04       	cpc	r15, r1
    4372:	e9 f6       	brne	.-70     	; 0x432e <printFloat+0x76>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    4374:	81 14       	cp	r8, r1
    4376:	91 04       	cpc	r9, r1
    4378:	a1 04       	cpc	r10, r1
    437a:	b1 04       	cpc	r11, r1
    437c:	f1 f0       	breq	.+60     	; 0x43ba <printFloat+0x102>
    437e:	93 01       	movw	r18, r6
    4380:	28 0d       	add	r18, r8
    4382:	39 1d       	adc	r19, r9
    4384:	d5 01       	movw	r26, r10
    4386:	c4 01       	movw	r24, r8
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	a1 09       	sbc	r26, r1
    438c:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    438e:	ac 01       	movw	r20, r24
    4390:	48 19       	sub	r20, r8
    4392:	59 09       	sbc	r21, r9
    4394:	fa 01       	movw	r30, r20
    4396:	e2 0f       	add	r30, r18
    4398:	f3 1f       	adc	r31, r19
    439a:	e0 81       	ld	r30, Z
    439c:	ea 30       	cpi	r30, 0x0A	; 10
    439e:	08 f0       	brcs	.+2      	; 0x43a2 <printFloat+0xea>
    43a0:	ba c0       	rjmp	.+372    	; 0x4516 <printFloat+0x25e>
    43a2:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    43a4:	80 91 c0 00 	lds	r24, 0x00C0
    43a8:	85 ff       	sbrs	r24, 5
    43aa:	fc cf       	rjmp	.-8      	; 0x43a4 <printFloat+0xec>
		;
	UDR0 = c;
    43ac:	e0 93 c6 00 	sts	0x00C6, r30
    43b0:	21 50       	subi	r18, 0x01	; 1
    43b2:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    43b4:	26 15       	cp	r18, r6
    43b6:	37 05       	cpc	r19, r7
    43b8:	69 f7       	brne	.-38     	; 0x4394 <printFloat+0xdc>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    43ba:	80 91 c0 00 	lds	r24, 0x00C0
    43be:	85 ff       	sbrs	r24, 5
    43c0:	fc cf       	rjmp	.-8      	; 0x43ba <printFloat+0x102>
		;
	UDR0 = c;
    43c2:	8e e2       	ldi	r24, 0x2E	; 46
    43c4:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    43c8:	c2 01       	movw	r24, r4
    43ca:	b1 01       	movw	r22, r2
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	4a e7       	ldi	r20, 0x7A	; 122
    43d2:	54 e4       	ldi	r21, 0x44	; 68
    43d4:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    43d8:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <round>
	if (n < 0) {
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    43dc:	0e 94 a2 23 	call	0x4744	; 0x4744 <__fixsfsi>
    43e0:	6b 01       	movw	r12, r22
    43e2:	7c 01       	movw	r14, r24
    43e4:	97 fd       	sbrc	r25, 7
    43e6:	99 c0       	rjmp	.+306    	; 0x451a <printFloat+0x262>
void printIntegerInBase(unsigned long n, unsigned long base)
{ 
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    43e8:	c1 14       	cp	r12, r1
    43ea:	d1 04       	cpc	r13, r1
    43ec:	e1 04       	cpc	r14, r1
    43ee:	f1 04       	cpc	r15, r1
    43f0:	09 f4       	brne	.+2      	; 0x43f4 <printFloat+0x13c>
    43f2:	71 c0       	rjmp	.+226    	; 0x44d6 <printFloat+0x21e>

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    43f4:	88 24       	eor	r8, r8
    43f6:	99 24       	eor	r9, r9
    43f8:	54 01       	movw	r10, r8
    43fa:	f5 e0       	ldi	r31, 0x05	; 5
    43fc:	6f 2e       	mov	r6, r31
    43fe:	71 2c       	mov	r7, r1
    4400:	6c 0e       	add	r6, r28
    4402:	7d 1e       	adc	r7, r29
		printByte('0');
		return;
	} 

	while (n > 0) {
		buf[i++] = n % base;
    4404:	83 01       	movw	r16, r6
    4406:	08 0d       	add	r16, r8
    4408:	19 1d       	adc	r17, r9
    440a:	c7 01       	movw	r24, r14
    440c:	b6 01       	movw	r22, r12
    440e:	2a e0       	ldi	r18, 0x0A	; 10
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	40 e0       	ldi	r20, 0x00	; 0
    4414:	50 e0       	ldi	r21, 0x00	; 0
    4416:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    441a:	f8 01       	movw	r30, r16
    441c:	60 83       	st	Z, r22
    441e:	08 94       	sec
    4420:	81 1c       	adc	r8, r1
    4422:	91 1c       	adc	r9, r1
    4424:	a1 1c       	adc	r10, r1
    4426:	b1 1c       	adc	r11, r1
		n /= base;
    4428:	c7 01       	movw	r24, r14
    442a:	b6 01       	movw	r22, r12
    442c:	2a e0       	ldi	r18, 0x0A	; 10
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	40 e0       	ldi	r20, 0x00	; 0
    4432:	50 e0       	ldi	r21, 0x00	; 0
    4434:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodsi4>
    4438:	c9 01       	movw	r24, r18
    443a:	da 01       	movw	r26, r20
    443c:	6c 01       	movw	r12, r24
    443e:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    4440:	c1 14       	cp	r12, r1
    4442:	d1 04       	cpc	r13, r1
    4444:	e1 04       	cpc	r14, r1
    4446:	f1 04       	cpc	r15, r1
    4448:	e9 f6       	brne	.-70     	; 0x4404 <printFloat+0x14c>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    444a:	81 14       	cp	r8, r1
    444c:	91 04       	cpc	r9, r1
    444e:	a1 04       	cpc	r10, r1
    4450:	b1 04       	cpc	r11, r1
    4452:	09 f4       	brne	.+2      	; 0x4456 <printFloat+0x19e>
    4454:	47 c0       	rjmp	.+142    	; 0x44e4 <printFloat+0x22c>
    4456:	93 01       	movw	r18, r6
    4458:	28 0d       	add	r18, r8
    445a:	39 1d       	adc	r19, r9
    445c:	d5 01       	movw	r26, r10
    445e:	c4 01       	movw	r24, r8
    4460:	01 97       	sbiw	r24, 0x01	; 1
    4462:	a1 09       	sbc	r26, r1
    4464:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    4466:	ac 01       	movw	r20, r24
    4468:	48 19       	sub	r20, r8
    446a:	59 09       	sbc	r21, r9
    446c:	fa 01       	movw	r30, r20
    446e:	e2 0f       	add	r30, r18
    4470:	f3 1f       	adc	r31, r19
    4472:	e0 81       	ld	r30, Z
    4474:	ea 30       	cpi	r30, 0x0A	; 10
    4476:	90 f4       	brcc	.+36     	; 0x449c <printFloat+0x1e4>
    4478:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    447a:	80 91 c0 00 	lds	r24, 0x00C0
    447e:	85 ff       	sbrs	r24, 5
    4480:	fc cf       	rjmp	.-8      	; 0x447a <printFloat+0x1c2>
		;
	UDR0 = c;
    4482:	e0 93 c6 00 	sts	0x00C6, r30
    4486:	21 50       	subi	r18, 0x01	; 1
    4488:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    448a:	26 15       	cp	r18, r6
    448c:	37 05       	cpc	r19, r7
    448e:	51 f1       	breq	.+84     	; 0x44e4 <printFloat+0x22c>
		printByte(buf[i - 1] < 10 ?
    4490:	fa 01       	movw	r30, r20
    4492:	e2 0f       	add	r30, r18
    4494:	f3 1f       	adc	r31, r19
    4496:	e0 81       	ld	r30, Z
    4498:	ea 30       	cpi	r30, 0x0A	; 10
    449a:	70 f3       	brcs	.-36     	; 0x4478 <printFloat+0x1c0>
    449c:	e9 5c       	subi	r30, 0xC9	; 201
    449e:	ed cf       	rjmp	.-38     	; 0x447a <printFloat+0x1c2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    44a0:	80 91 c0 00 	lds	r24, 0x00C0
    44a4:	85 ff       	sbrs	r24, 5
    44a6:	fc cf       	rjmp	.-8      	; 0x44a0 <printFloat+0x1e8>
		;
	UDR0 = c;
    44a8:	80 e3       	ldi	r24, 0x30	; 48
    44aa:	80 93 c6 00 	sts	0x00C6, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    44ae:	80 91 c0 00 	lds	r24, 0x00C0
    44b2:	85 ff       	sbrs	r24, 5
    44b4:	82 cf       	rjmp	.-252    	; 0x43ba <printFloat+0x102>
    44b6:	85 cf       	rjmp	.-246    	; 0x43c2 <printFloat+0x10a>
		;
	UDR0 = c;
    44b8:	80 91 c0 00 	lds	r24, 0x00C0
    44bc:	85 ff       	sbrs	r24, 5
    44be:	fc cf       	rjmp	.-8      	; 0x44b8 <printFloat+0x200>
    44c0:	8d e2       	ldi	r24, 0x2D	; 45
    44c2:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    44c6:	50 95       	com	r21
    44c8:	40 95       	com	r20
    44ca:	30 95       	com	r19
    44cc:	21 95       	neg	r18
    44ce:	3f 4f       	sbci	r19, 0xFF	; 255
    44d0:	4f 4f       	sbci	r20, 0xFF	; 255
    44d2:	5f 4f       	sbci	r21, 0xFF	; 255
    44d4:	1c cf       	rjmp	.-456    	; 0x430e <printFloat+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    44d6:	80 91 c0 00 	lds	r24, 0x00C0
    44da:	85 ff       	sbrs	r24, 5
    44dc:	fc cf       	rjmp	.-8      	; 0x44d6 <printFloat+0x21e>
		;
	UDR0 = c;
    44de:	80 e3       	ldi	r24, 0x30	; 48
    44e0:	80 93 c6 00 	sts	0x00C6, r24
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
}
    44e4:	a4 96       	adiw	r28, 0x24	; 36
    44e6:	0f b6       	in	r0, 0x3f	; 63
    44e8:	f8 94       	cli
    44ea:	de bf       	out	0x3e, r29	; 62
    44ec:	0f be       	out	0x3f, r0	; 63
    44ee:	cd bf       	out	0x3d, r28	; 61
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	1f 91       	pop	r17
    44f6:	0f 91       	pop	r16
    44f8:	ff 90       	pop	r15
    44fa:	ef 90       	pop	r14
    44fc:	df 90       	pop	r13
    44fe:	cf 90       	pop	r12
    4500:	bf 90       	pop	r11
    4502:	af 90       	pop	r10
    4504:	9f 90       	pop	r9
    4506:	8f 90       	pop	r8
    4508:	7f 90       	pop	r7
    450a:	6f 90       	pop	r6
    450c:	5f 90       	pop	r5
    450e:	4f 90       	pop	r4
    4510:	3f 90       	pop	r3
    4512:	2f 90       	pop	r2
    4514:	08 95       	ret
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
    4516:	e9 5c       	subi	r30, 0xC9	; 201
    4518:	45 cf       	rjmp	.-374    	; 0x43a4 <printFloat+0xec>
	if (n < 0) {
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    451a:	f0 94       	com	r15
    451c:	e0 94       	com	r14
    451e:	d0 94       	com	r13
    4520:	c0 94       	com	r12
    4522:	c1 1c       	adc	r12, r1
    4524:	d1 1c       	adc	r13, r1
    4526:	e1 1c       	adc	r14, r1
    4528:	f1 1c       	adc	r15, r1
    452a:	5e cf       	rjmp	.-324    	; 0x43e8 <printFloat+0x130>

0000452c <__subsf3>:
    452c:	50 58       	subi	r21, 0x80	; 128

0000452e <__addsf3>:
    452e:	bb 27       	eor	r27, r27
    4530:	aa 27       	eor	r26, r26
    4532:	0e d0       	rcall	.+28     	; 0x4550 <__addsf3x>
    4534:	11 c2       	rjmp	.+1058   	; 0x4958 <__fp_round>
    4536:	02 d2       	rcall	.+1028   	; 0x493c <__fp_pscA>
    4538:	30 f0       	brcs	.+12     	; 0x4546 <__addsf3+0x18>
    453a:	07 d2       	rcall	.+1038   	; 0x494a <__fp_pscB>
    453c:	20 f0       	brcs	.+8      	; 0x4546 <__addsf3+0x18>
    453e:	31 f4       	brne	.+12     	; 0x454c <__addsf3+0x1e>
    4540:	9f 3f       	cpi	r25, 0xFF	; 255
    4542:	11 f4       	brne	.+4      	; 0x4548 <__addsf3+0x1a>
    4544:	1e f4       	brtc	.+6      	; 0x454c <__addsf3+0x1e>
    4546:	d2 c1       	rjmp	.+932    	; 0x48ec <__fp_nan>
    4548:	0e f4       	brtc	.+2      	; 0x454c <__addsf3+0x1e>
    454a:	e0 95       	com	r30
    454c:	e7 fb       	bst	r30, 7
    454e:	9f c1       	rjmp	.+830    	; 0x488e <__fp_inf>

00004550 <__addsf3x>:
    4550:	e9 2f       	mov	r30, r25
    4552:	13 d2       	rcall	.+1062   	; 0x497a <__fp_split3>
    4554:	80 f3       	brcs	.-32     	; 0x4536 <__addsf3+0x8>
    4556:	ba 17       	cp	r27, r26
    4558:	62 07       	cpc	r22, r18
    455a:	73 07       	cpc	r23, r19
    455c:	84 07       	cpc	r24, r20
    455e:	95 07       	cpc	r25, r21
    4560:	18 f0       	brcs	.+6      	; 0x4568 <__addsf3x+0x18>
    4562:	71 f4       	brne	.+28     	; 0x4580 <__addsf3x+0x30>
    4564:	9e f5       	brtc	.+102    	; 0x45cc <__addsf3x+0x7c>
    4566:	42 c2       	rjmp	.+1156   	; 0x49ec <__fp_zero>
    4568:	0e f4       	brtc	.+2      	; 0x456c <__addsf3x+0x1c>
    456a:	e0 95       	com	r30
    456c:	0b 2e       	mov	r0, r27
    456e:	ba 2f       	mov	r27, r26
    4570:	a0 2d       	mov	r26, r0
    4572:	0b 01       	movw	r0, r22
    4574:	b9 01       	movw	r22, r18
    4576:	90 01       	movw	r18, r0
    4578:	0c 01       	movw	r0, r24
    457a:	ca 01       	movw	r24, r20
    457c:	a0 01       	movw	r20, r0
    457e:	11 24       	eor	r1, r1
    4580:	ff 27       	eor	r31, r31
    4582:	59 1b       	sub	r21, r25
    4584:	99 f0       	breq	.+38     	; 0x45ac <__addsf3x+0x5c>
    4586:	59 3f       	cpi	r21, 0xF9	; 249
    4588:	50 f4       	brcc	.+20     	; 0x459e <__addsf3x+0x4e>
    458a:	50 3e       	cpi	r21, 0xE0	; 224
    458c:	68 f1       	brcs	.+90     	; 0x45e8 <__addsf3x+0x98>
    458e:	1a 16       	cp	r1, r26
    4590:	f0 40       	sbci	r31, 0x00	; 0
    4592:	a2 2f       	mov	r26, r18
    4594:	23 2f       	mov	r18, r19
    4596:	34 2f       	mov	r19, r20
    4598:	44 27       	eor	r20, r20
    459a:	58 5f       	subi	r21, 0xF8	; 248
    459c:	f3 cf       	rjmp	.-26     	; 0x4584 <__addsf3x+0x34>
    459e:	46 95       	lsr	r20
    45a0:	37 95       	ror	r19
    45a2:	27 95       	ror	r18
    45a4:	a7 95       	ror	r26
    45a6:	f0 40       	sbci	r31, 0x00	; 0
    45a8:	53 95       	inc	r21
    45aa:	c9 f7       	brne	.-14     	; 0x459e <__addsf3x+0x4e>
    45ac:	7e f4       	brtc	.+30     	; 0x45cc <__addsf3x+0x7c>
    45ae:	1f 16       	cp	r1, r31
    45b0:	ba 0b       	sbc	r27, r26
    45b2:	62 0b       	sbc	r22, r18
    45b4:	73 0b       	sbc	r23, r19
    45b6:	84 0b       	sbc	r24, r20
    45b8:	ba f0       	brmi	.+46     	; 0x45e8 <__addsf3x+0x98>
    45ba:	91 50       	subi	r25, 0x01	; 1
    45bc:	a1 f0       	breq	.+40     	; 0x45e6 <__addsf3x+0x96>
    45be:	ff 0f       	add	r31, r31
    45c0:	bb 1f       	adc	r27, r27
    45c2:	66 1f       	adc	r22, r22
    45c4:	77 1f       	adc	r23, r23
    45c6:	88 1f       	adc	r24, r24
    45c8:	c2 f7       	brpl	.-16     	; 0x45ba <__addsf3x+0x6a>
    45ca:	0e c0       	rjmp	.+28     	; 0x45e8 <__addsf3x+0x98>
    45cc:	ba 0f       	add	r27, r26
    45ce:	62 1f       	adc	r22, r18
    45d0:	73 1f       	adc	r23, r19
    45d2:	84 1f       	adc	r24, r20
    45d4:	48 f4       	brcc	.+18     	; 0x45e8 <__addsf3x+0x98>
    45d6:	87 95       	ror	r24
    45d8:	77 95       	ror	r23
    45da:	67 95       	ror	r22
    45dc:	b7 95       	ror	r27
    45de:	f7 95       	ror	r31
    45e0:	9e 3f       	cpi	r25, 0xFE	; 254
    45e2:	08 f0       	brcs	.+2      	; 0x45e6 <__addsf3x+0x96>
    45e4:	b3 cf       	rjmp	.-154    	; 0x454c <__addsf3+0x1e>
    45e6:	93 95       	inc	r25
    45e8:	88 0f       	add	r24, r24
    45ea:	08 f0       	brcs	.+2      	; 0x45ee <__addsf3x+0x9e>
    45ec:	99 27       	eor	r25, r25
    45ee:	ee 0f       	add	r30, r30
    45f0:	97 95       	ror	r25
    45f2:	87 95       	ror	r24
    45f4:	08 95       	ret

000045f6 <atan>:
    45f6:	df 93       	push	r29
    45f8:	dd 27       	eor	r29, r29
    45fa:	b9 2f       	mov	r27, r25
    45fc:	bf 77       	andi	r27, 0x7F	; 127
    45fe:	40 e8       	ldi	r20, 0x80	; 128
    4600:	5f e3       	ldi	r21, 0x3F	; 63
    4602:	16 16       	cp	r1, r22
    4604:	17 06       	cpc	r1, r23
    4606:	48 07       	cpc	r20, r24
    4608:	5b 07       	cpc	r21, r27
    460a:	10 f4       	brcc	.+4      	; 0x4610 <atan+0x1a>
    460c:	d9 2f       	mov	r29, r25
    460e:	f9 d1       	rcall	.+1010   	; 0x4a02 <inverse>
    4610:	9f 93       	push	r25
    4612:	8f 93       	push	r24
    4614:	7f 93       	push	r23
    4616:	6f 93       	push	r22
    4618:	23 d3       	rcall	.+1606   	; 0x4c60 <square>
    461a:	e2 ea       	ldi	r30, 0xA2	; 162
    461c:	f1 e0       	ldi	r31, 0x01	; 1
    461e:	69 d1       	rcall	.+722    	; 0x48f2 <__fp_powser>
    4620:	9b d1       	rcall	.+822    	; 0x4958 <__fp_round>
    4622:	2f 91       	pop	r18
    4624:	3f 91       	pop	r19
    4626:	4f 91       	pop	r20
    4628:	5f 91       	pop	r21
    462a:	61 d2       	rcall	.+1218   	; 0x4aee <__mulsf3x>
    462c:	dd 23       	and	r29, r29
    462e:	49 f0       	breq	.+18     	; 0x4642 <atan+0x4c>
    4630:	90 58       	subi	r25, 0x80	; 128
    4632:	a2 ea       	ldi	r26, 0xA2	; 162
    4634:	2a ed       	ldi	r18, 0xDA	; 218
    4636:	3f e0       	ldi	r19, 0x0F	; 15
    4638:	49 ec       	ldi	r20, 0xC9	; 201
    463a:	5f e3       	ldi	r21, 0x3F	; 63
    463c:	d0 78       	andi	r29, 0x80	; 128
    463e:	5d 27       	eor	r21, r29
    4640:	87 df       	rcall	.-242    	; 0x4550 <__addsf3x>
    4642:	df 91       	pop	r29
    4644:	89 c1       	rjmp	.+786    	; 0x4958 <__fp_round>

00004646 <ceil>:
    4646:	bb d1       	rcall	.+886    	; 0x49be <__fp_trunc>
    4648:	80 f0       	brcs	.+32     	; 0x466a <ceil+0x24>
    464a:	9f 37       	cpi	r25, 0x7F	; 127
    464c:	40 f4       	brcc	.+16     	; 0x465e <ceil+0x18>
    464e:	91 11       	cpse	r25, r1
    4650:	0e f4       	brtc	.+2      	; 0x4654 <ceil+0xe>
    4652:	cd c1       	rjmp	.+922    	; 0x49ee <__fp_szero>
    4654:	60 e0       	ldi	r22, 0x00	; 0
    4656:	70 e0       	ldi	r23, 0x00	; 0
    4658:	80 e8       	ldi	r24, 0x80	; 128
    465a:	9f e3       	ldi	r25, 0x3F	; 63
    465c:	08 95       	ret
    465e:	26 f0       	brts	.+8      	; 0x4668 <ceil+0x22>
    4660:	1b 16       	cp	r1, r27
    4662:	61 1d       	adc	r22, r1
    4664:	71 1d       	adc	r23, r1
    4666:	81 1d       	adc	r24, r1
    4668:	18 c1       	rjmp	.+560    	; 0x489a <__fp_mintl>
    466a:	32 c1       	rjmp	.+612    	; 0x48d0 <__fp_mpack>

0000466c <__cmpsf2>:
    466c:	ec d0       	rcall	.+472    	; 0x4846 <__fp_cmp>
    466e:	08 f4       	brcc	.+2      	; 0x4672 <__cmpsf2+0x6>
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	08 95       	ret

00004674 <__divsf3>:
    4674:	0c d0       	rcall	.+24     	; 0x468e <__divsf3x>
    4676:	70 c1       	rjmp	.+736    	; 0x4958 <__fp_round>
    4678:	68 d1       	rcall	.+720    	; 0x494a <__fp_pscB>
    467a:	40 f0       	brcs	.+16     	; 0x468c <__divsf3+0x18>
    467c:	5f d1       	rcall	.+702    	; 0x493c <__fp_pscA>
    467e:	30 f0       	brcs	.+12     	; 0x468c <__divsf3+0x18>
    4680:	21 f4       	brne	.+8      	; 0x468a <__divsf3+0x16>
    4682:	5f 3f       	cpi	r21, 0xFF	; 255
    4684:	19 f0       	breq	.+6      	; 0x468c <__divsf3+0x18>
    4686:	03 c1       	rjmp	.+518    	; 0x488e <__fp_inf>
    4688:	51 11       	cpse	r21, r1
    468a:	b1 c1       	rjmp	.+866    	; 0x49ee <__fp_szero>
    468c:	2f c1       	rjmp	.+606    	; 0x48ec <__fp_nan>

0000468e <__divsf3x>:
    468e:	75 d1       	rcall	.+746    	; 0x497a <__fp_split3>
    4690:	98 f3       	brcs	.-26     	; 0x4678 <__divsf3+0x4>

00004692 <__divsf3_pse>:
    4692:	99 23       	and	r25, r25
    4694:	c9 f3       	breq	.-14     	; 0x4688 <__divsf3+0x14>
    4696:	55 23       	and	r21, r21
    4698:	b1 f3       	breq	.-20     	; 0x4686 <__divsf3+0x12>
    469a:	95 1b       	sub	r25, r21
    469c:	55 0b       	sbc	r21, r21
    469e:	bb 27       	eor	r27, r27
    46a0:	aa 27       	eor	r26, r26
    46a2:	62 17       	cp	r22, r18
    46a4:	73 07       	cpc	r23, r19
    46a6:	84 07       	cpc	r24, r20
    46a8:	38 f0       	brcs	.+14     	; 0x46b8 <__divsf3_pse+0x26>
    46aa:	9f 5f       	subi	r25, 0xFF	; 255
    46ac:	5f 4f       	sbci	r21, 0xFF	; 255
    46ae:	22 0f       	add	r18, r18
    46b0:	33 1f       	adc	r19, r19
    46b2:	44 1f       	adc	r20, r20
    46b4:	aa 1f       	adc	r26, r26
    46b6:	a9 f3       	breq	.-22     	; 0x46a2 <__divsf3_pse+0x10>
    46b8:	33 d0       	rcall	.+102    	; 0x4720 <__divsf3_pse+0x8e>
    46ba:	0e 2e       	mov	r0, r30
    46bc:	3a f0       	brmi	.+14     	; 0x46cc <__divsf3_pse+0x3a>
    46be:	e0 e8       	ldi	r30, 0x80	; 128
    46c0:	30 d0       	rcall	.+96     	; 0x4722 <__divsf3_pse+0x90>
    46c2:	91 50       	subi	r25, 0x01	; 1
    46c4:	50 40       	sbci	r21, 0x00	; 0
    46c6:	e6 95       	lsr	r30
    46c8:	00 1c       	adc	r0, r0
    46ca:	ca f7       	brpl	.-14     	; 0x46be <__divsf3_pse+0x2c>
    46cc:	29 d0       	rcall	.+82     	; 0x4720 <__divsf3_pse+0x8e>
    46ce:	fe 2f       	mov	r31, r30
    46d0:	27 d0       	rcall	.+78     	; 0x4720 <__divsf3_pse+0x8e>
    46d2:	66 0f       	add	r22, r22
    46d4:	77 1f       	adc	r23, r23
    46d6:	88 1f       	adc	r24, r24
    46d8:	bb 1f       	adc	r27, r27
    46da:	26 17       	cp	r18, r22
    46dc:	37 07       	cpc	r19, r23
    46de:	48 07       	cpc	r20, r24
    46e0:	ab 07       	cpc	r26, r27
    46e2:	b0 e8       	ldi	r27, 0x80	; 128
    46e4:	09 f0       	breq	.+2      	; 0x46e8 <__divsf3_pse+0x56>
    46e6:	bb 0b       	sbc	r27, r27
    46e8:	80 2d       	mov	r24, r0
    46ea:	bf 01       	movw	r22, r30
    46ec:	ff 27       	eor	r31, r31
    46ee:	93 58       	subi	r25, 0x83	; 131
    46f0:	5f 4f       	sbci	r21, 0xFF	; 255
    46f2:	2a f0       	brmi	.+10     	; 0x46fe <__divsf3_pse+0x6c>
    46f4:	9e 3f       	cpi	r25, 0xFE	; 254
    46f6:	51 05       	cpc	r21, r1
    46f8:	68 f0       	brcs	.+26     	; 0x4714 <__divsf3_pse+0x82>
    46fa:	c9 c0       	rjmp	.+402    	; 0x488e <__fp_inf>
    46fc:	78 c1       	rjmp	.+752    	; 0x49ee <__fp_szero>
    46fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4700:	ec f3       	brlt	.-6      	; 0x46fc <__divsf3_pse+0x6a>
    4702:	98 3e       	cpi	r25, 0xE8	; 232
    4704:	dc f3       	brlt	.-10     	; 0x46fc <__divsf3_pse+0x6a>
    4706:	86 95       	lsr	r24
    4708:	77 95       	ror	r23
    470a:	67 95       	ror	r22
    470c:	b7 95       	ror	r27
    470e:	f7 95       	ror	r31
    4710:	9f 5f       	subi	r25, 0xFF	; 255
    4712:	c9 f7       	brne	.-14     	; 0x4706 <__divsf3_pse+0x74>
    4714:	88 0f       	add	r24, r24
    4716:	91 1d       	adc	r25, r1
    4718:	96 95       	lsr	r25
    471a:	87 95       	ror	r24
    471c:	97 f9       	bld	r25, 7
    471e:	08 95       	ret
    4720:	e1 e0       	ldi	r30, 0x01	; 1
    4722:	66 0f       	add	r22, r22
    4724:	77 1f       	adc	r23, r23
    4726:	88 1f       	adc	r24, r24
    4728:	bb 1f       	adc	r27, r27
    472a:	62 17       	cp	r22, r18
    472c:	73 07       	cpc	r23, r19
    472e:	84 07       	cpc	r24, r20
    4730:	ba 07       	cpc	r27, r26
    4732:	20 f0       	brcs	.+8      	; 0x473c <__divsf3_pse+0xaa>
    4734:	62 1b       	sub	r22, r18
    4736:	73 0b       	sbc	r23, r19
    4738:	84 0b       	sbc	r24, r20
    473a:	ba 0b       	sbc	r27, r26
    473c:	ee 1f       	adc	r30, r30
    473e:	88 f7       	brcc	.-30     	; 0x4722 <__divsf3_pse+0x90>
    4740:	e0 95       	com	r30
    4742:	08 95       	ret

00004744 <__fixsfsi>:
    4744:	04 d0       	rcall	.+8      	; 0x474e <__fixunssfsi>
    4746:	68 94       	set
    4748:	b1 11       	cpse	r27, r1
    474a:	51 c1       	rjmp	.+674    	; 0x49ee <__fp_szero>
    474c:	08 95       	ret

0000474e <__fixunssfsi>:
    474e:	1d d1       	rcall	.+570    	; 0x498a <__fp_splitA>
    4750:	88 f0       	brcs	.+34     	; 0x4774 <__fixunssfsi+0x26>
    4752:	9f 57       	subi	r25, 0x7F	; 127
    4754:	90 f0       	brcs	.+36     	; 0x477a <__fixunssfsi+0x2c>
    4756:	b9 2f       	mov	r27, r25
    4758:	99 27       	eor	r25, r25
    475a:	b7 51       	subi	r27, 0x17	; 23
    475c:	a0 f0       	brcs	.+40     	; 0x4786 <__fixunssfsi+0x38>
    475e:	d1 f0       	breq	.+52     	; 0x4794 <__fixunssfsi+0x46>
    4760:	66 0f       	add	r22, r22
    4762:	77 1f       	adc	r23, r23
    4764:	88 1f       	adc	r24, r24
    4766:	99 1f       	adc	r25, r25
    4768:	1a f0       	brmi	.+6      	; 0x4770 <__fixunssfsi+0x22>
    476a:	ba 95       	dec	r27
    476c:	c9 f7       	brne	.-14     	; 0x4760 <__fixunssfsi+0x12>
    476e:	12 c0       	rjmp	.+36     	; 0x4794 <__fixunssfsi+0x46>
    4770:	b1 30       	cpi	r27, 0x01	; 1
    4772:	81 f0       	breq	.+32     	; 0x4794 <__fixunssfsi+0x46>
    4774:	3b d1       	rcall	.+630    	; 0x49ec <__fp_zero>
    4776:	b1 e0       	ldi	r27, 0x01	; 1
    4778:	08 95       	ret
    477a:	38 c1       	rjmp	.+624    	; 0x49ec <__fp_zero>
    477c:	67 2f       	mov	r22, r23
    477e:	78 2f       	mov	r23, r24
    4780:	88 27       	eor	r24, r24
    4782:	b8 5f       	subi	r27, 0xF8	; 248
    4784:	39 f0       	breq	.+14     	; 0x4794 <__fixunssfsi+0x46>
    4786:	b9 3f       	cpi	r27, 0xF9	; 249
    4788:	cc f3       	brlt	.-14     	; 0x477c <__fixunssfsi+0x2e>
    478a:	86 95       	lsr	r24
    478c:	77 95       	ror	r23
    478e:	67 95       	ror	r22
    4790:	b3 95       	inc	r27
    4792:	d9 f7       	brne	.-10     	; 0x478a <__fixunssfsi+0x3c>
    4794:	3e f4       	brtc	.+14     	; 0x47a4 <__fixunssfsi+0x56>
    4796:	90 95       	com	r25
    4798:	80 95       	com	r24
    479a:	70 95       	com	r23
    479c:	61 95       	neg	r22
    479e:	7f 4f       	sbci	r23, 0xFF	; 255
    47a0:	8f 4f       	sbci	r24, 0xFF	; 255
    47a2:	9f 4f       	sbci	r25, 0xFF	; 255
    47a4:	08 95       	ret

000047a6 <__floatunsisf>:
    47a6:	e8 94       	clt
    47a8:	09 c0       	rjmp	.+18     	; 0x47bc <__floatsisf+0x12>

000047aa <__floatsisf>:
    47aa:	97 fb       	bst	r25, 7
    47ac:	3e f4       	brtc	.+14     	; 0x47bc <__floatsisf+0x12>
    47ae:	90 95       	com	r25
    47b0:	80 95       	com	r24
    47b2:	70 95       	com	r23
    47b4:	61 95       	neg	r22
    47b6:	7f 4f       	sbci	r23, 0xFF	; 255
    47b8:	8f 4f       	sbci	r24, 0xFF	; 255
    47ba:	9f 4f       	sbci	r25, 0xFF	; 255
    47bc:	99 23       	and	r25, r25
    47be:	a9 f0       	breq	.+42     	; 0x47ea <__floatsisf+0x40>
    47c0:	f9 2f       	mov	r31, r25
    47c2:	96 e9       	ldi	r25, 0x96	; 150
    47c4:	bb 27       	eor	r27, r27
    47c6:	93 95       	inc	r25
    47c8:	f6 95       	lsr	r31
    47ca:	87 95       	ror	r24
    47cc:	77 95       	ror	r23
    47ce:	67 95       	ror	r22
    47d0:	b7 95       	ror	r27
    47d2:	f1 11       	cpse	r31, r1
    47d4:	f8 cf       	rjmp	.-16     	; 0x47c6 <__floatsisf+0x1c>
    47d6:	fa f4       	brpl	.+62     	; 0x4816 <__floatsisf+0x6c>
    47d8:	bb 0f       	add	r27, r27
    47da:	11 f4       	brne	.+4      	; 0x47e0 <__floatsisf+0x36>
    47dc:	60 ff       	sbrs	r22, 0
    47de:	1b c0       	rjmp	.+54     	; 0x4816 <__floatsisf+0x6c>
    47e0:	6f 5f       	subi	r22, 0xFF	; 255
    47e2:	7f 4f       	sbci	r23, 0xFF	; 255
    47e4:	8f 4f       	sbci	r24, 0xFF	; 255
    47e6:	9f 4f       	sbci	r25, 0xFF	; 255
    47e8:	16 c0       	rjmp	.+44     	; 0x4816 <__floatsisf+0x6c>
    47ea:	88 23       	and	r24, r24
    47ec:	11 f0       	breq	.+4      	; 0x47f2 <__floatsisf+0x48>
    47ee:	96 e9       	ldi	r25, 0x96	; 150
    47f0:	11 c0       	rjmp	.+34     	; 0x4814 <__floatsisf+0x6a>
    47f2:	77 23       	and	r23, r23
    47f4:	21 f0       	breq	.+8      	; 0x47fe <__floatsisf+0x54>
    47f6:	9e e8       	ldi	r25, 0x8E	; 142
    47f8:	87 2f       	mov	r24, r23
    47fa:	76 2f       	mov	r23, r22
    47fc:	05 c0       	rjmp	.+10     	; 0x4808 <__floatsisf+0x5e>
    47fe:	66 23       	and	r22, r22
    4800:	71 f0       	breq	.+28     	; 0x481e <__floatsisf+0x74>
    4802:	96 e8       	ldi	r25, 0x86	; 134
    4804:	86 2f       	mov	r24, r22
    4806:	70 e0       	ldi	r23, 0x00	; 0
    4808:	60 e0       	ldi	r22, 0x00	; 0
    480a:	2a f0       	brmi	.+10     	; 0x4816 <__floatsisf+0x6c>
    480c:	9a 95       	dec	r25
    480e:	66 0f       	add	r22, r22
    4810:	77 1f       	adc	r23, r23
    4812:	88 1f       	adc	r24, r24
    4814:	da f7       	brpl	.-10     	; 0x480c <__floatsisf+0x62>
    4816:	88 0f       	add	r24, r24
    4818:	96 95       	lsr	r25
    481a:	87 95       	ror	r24
    481c:	97 f9       	bld	r25, 7
    481e:	08 95       	ret

00004820 <floor>:
    4820:	ce d0       	rcall	.+412    	; 0x49be <__fp_trunc>
    4822:	80 f0       	brcs	.+32     	; 0x4844 <floor+0x24>
    4824:	9f 37       	cpi	r25, 0x7F	; 127
    4826:	40 f4       	brcc	.+16     	; 0x4838 <floor+0x18>
    4828:	91 11       	cpse	r25, r1
    482a:	0e f0       	brts	.+2      	; 0x482e <floor+0xe>
    482c:	e0 c0       	rjmp	.+448    	; 0x49ee <__fp_szero>
    482e:	60 e0       	ldi	r22, 0x00	; 0
    4830:	70 e0       	ldi	r23, 0x00	; 0
    4832:	80 e8       	ldi	r24, 0x80	; 128
    4834:	9f eb       	ldi	r25, 0xBF	; 191
    4836:	08 95       	ret
    4838:	26 f4       	brtc	.+8      	; 0x4842 <floor+0x22>
    483a:	1b 16       	cp	r1, r27
    483c:	61 1d       	adc	r22, r1
    483e:	71 1d       	adc	r23, r1
    4840:	81 1d       	adc	r24, r1
    4842:	2b c0       	rjmp	.+86     	; 0x489a <__fp_mintl>
    4844:	45 c0       	rjmp	.+138    	; 0x48d0 <__fp_mpack>

00004846 <__fp_cmp>:
    4846:	99 0f       	add	r25, r25
    4848:	00 08       	sbc	r0, r0
    484a:	55 0f       	add	r21, r21
    484c:	aa 0b       	sbc	r26, r26
    484e:	e0 e8       	ldi	r30, 0x80	; 128
    4850:	fe ef       	ldi	r31, 0xFE	; 254
    4852:	16 16       	cp	r1, r22
    4854:	17 06       	cpc	r1, r23
    4856:	e8 07       	cpc	r30, r24
    4858:	f9 07       	cpc	r31, r25
    485a:	c0 f0       	brcs	.+48     	; 0x488c <__fp_cmp+0x46>
    485c:	12 16       	cp	r1, r18
    485e:	13 06       	cpc	r1, r19
    4860:	e4 07       	cpc	r30, r20
    4862:	f5 07       	cpc	r31, r21
    4864:	98 f0       	brcs	.+38     	; 0x488c <__fp_cmp+0x46>
    4866:	62 1b       	sub	r22, r18
    4868:	73 0b       	sbc	r23, r19
    486a:	84 0b       	sbc	r24, r20
    486c:	95 0b       	sbc	r25, r21
    486e:	39 f4       	brne	.+14     	; 0x487e <__fp_cmp+0x38>
    4870:	0a 26       	eor	r0, r26
    4872:	61 f0       	breq	.+24     	; 0x488c <__fp_cmp+0x46>
    4874:	23 2b       	or	r18, r19
    4876:	24 2b       	or	r18, r20
    4878:	25 2b       	or	r18, r21
    487a:	21 f4       	brne	.+8      	; 0x4884 <__fp_cmp+0x3e>
    487c:	08 95       	ret
    487e:	0a 26       	eor	r0, r26
    4880:	09 f4       	brne	.+2      	; 0x4884 <__fp_cmp+0x3e>
    4882:	a1 40       	sbci	r26, 0x01	; 1
    4884:	a6 95       	lsr	r26
    4886:	8f ef       	ldi	r24, 0xFF	; 255
    4888:	81 1d       	adc	r24, r1
    488a:	81 1d       	adc	r24, r1
    488c:	08 95       	ret

0000488e <__fp_inf>:
    488e:	97 f9       	bld	r25, 7
    4890:	9f 67       	ori	r25, 0x7F	; 127
    4892:	80 e8       	ldi	r24, 0x80	; 128
    4894:	70 e0       	ldi	r23, 0x00	; 0
    4896:	60 e0       	ldi	r22, 0x00	; 0
    4898:	08 95       	ret

0000489a <__fp_mintl>:
    489a:	88 23       	and	r24, r24
    489c:	71 f4       	brne	.+28     	; 0x48ba <__fp_mintl+0x20>
    489e:	77 23       	and	r23, r23
    48a0:	21 f0       	breq	.+8      	; 0x48aa <__fp_mintl+0x10>
    48a2:	98 50       	subi	r25, 0x08	; 8
    48a4:	87 2b       	or	r24, r23
    48a6:	76 2f       	mov	r23, r22
    48a8:	07 c0       	rjmp	.+14     	; 0x48b8 <__fp_mintl+0x1e>
    48aa:	66 23       	and	r22, r22
    48ac:	11 f4       	brne	.+4      	; 0x48b2 <__fp_mintl+0x18>
    48ae:	99 27       	eor	r25, r25
    48b0:	0d c0       	rjmp	.+26     	; 0x48cc <__fp_mintl+0x32>
    48b2:	90 51       	subi	r25, 0x10	; 16
    48b4:	86 2b       	or	r24, r22
    48b6:	70 e0       	ldi	r23, 0x00	; 0
    48b8:	60 e0       	ldi	r22, 0x00	; 0
    48ba:	2a f0       	brmi	.+10     	; 0x48c6 <__fp_mintl+0x2c>
    48bc:	9a 95       	dec	r25
    48be:	66 0f       	add	r22, r22
    48c0:	77 1f       	adc	r23, r23
    48c2:	88 1f       	adc	r24, r24
    48c4:	da f7       	brpl	.-10     	; 0x48bc <__fp_mintl+0x22>
    48c6:	88 0f       	add	r24, r24
    48c8:	96 95       	lsr	r25
    48ca:	87 95       	ror	r24
    48cc:	97 f9       	bld	r25, 7
    48ce:	08 95       	ret

000048d0 <__fp_mpack>:
    48d0:	9f 3f       	cpi	r25, 0xFF	; 255
    48d2:	31 f0       	breq	.+12     	; 0x48e0 <__fp_mpack_finite+0xc>

000048d4 <__fp_mpack_finite>:
    48d4:	91 50       	subi	r25, 0x01	; 1
    48d6:	20 f4       	brcc	.+8      	; 0x48e0 <__fp_mpack_finite+0xc>
    48d8:	87 95       	ror	r24
    48da:	77 95       	ror	r23
    48dc:	67 95       	ror	r22
    48de:	b7 95       	ror	r27
    48e0:	88 0f       	add	r24, r24
    48e2:	91 1d       	adc	r25, r1
    48e4:	96 95       	lsr	r25
    48e6:	87 95       	ror	r24
    48e8:	97 f9       	bld	r25, 7
    48ea:	08 95       	ret

000048ec <__fp_nan>:
    48ec:	9f ef       	ldi	r25, 0xFF	; 255
    48ee:	80 ec       	ldi	r24, 0xC0	; 192
    48f0:	08 95       	ret

000048f2 <__fp_powser>:
    48f2:	df 93       	push	r29
    48f4:	cf 93       	push	r28
    48f6:	1f 93       	push	r17
    48f8:	0f 93       	push	r16
    48fa:	ff 92       	push	r15
    48fc:	ef 92       	push	r14
    48fe:	df 92       	push	r13
    4900:	7b 01       	movw	r14, r22
    4902:	8c 01       	movw	r16, r24
    4904:	68 94       	set
    4906:	05 c0       	rjmp	.+10     	; 0x4912 <__fp_powser+0x20>
    4908:	da 2e       	mov	r13, r26
    490a:	ef 01       	movw	r28, r30
    490c:	f0 d0       	rcall	.+480    	; 0x4aee <__mulsf3x>
    490e:	fe 01       	movw	r30, r28
    4910:	e8 94       	clt
    4912:	a5 91       	lpm	r26, Z+
    4914:	25 91       	lpm	r18, Z+
    4916:	35 91       	lpm	r19, Z+
    4918:	45 91       	lpm	r20, Z+
    491a:	55 91       	lpm	r21, Z+
    491c:	ae f3       	brts	.-22     	; 0x4908 <__fp_powser+0x16>
    491e:	ef 01       	movw	r28, r30
    4920:	17 de       	rcall	.-978    	; 0x4550 <__addsf3x>
    4922:	fe 01       	movw	r30, r28
    4924:	97 01       	movw	r18, r14
    4926:	a8 01       	movw	r20, r16
    4928:	da 94       	dec	r13
    492a:	79 f7       	brne	.-34     	; 0x490a <__fp_powser+0x18>
    492c:	df 90       	pop	r13
    492e:	ef 90       	pop	r14
    4930:	ff 90       	pop	r15
    4932:	0f 91       	pop	r16
    4934:	1f 91       	pop	r17
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	08 95       	ret

0000493c <__fp_pscA>:
    493c:	00 24       	eor	r0, r0
    493e:	0a 94       	dec	r0
    4940:	16 16       	cp	r1, r22
    4942:	17 06       	cpc	r1, r23
    4944:	18 06       	cpc	r1, r24
    4946:	09 06       	cpc	r0, r25
    4948:	08 95       	ret

0000494a <__fp_pscB>:
    494a:	00 24       	eor	r0, r0
    494c:	0a 94       	dec	r0
    494e:	12 16       	cp	r1, r18
    4950:	13 06       	cpc	r1, r19
    4952:	14 06       	cpc	r1, r20
    4954:	05 06       	cpc	r0, r21
    4956:	08 95       	ret

00004958 <__fp_round>:
    4958:	09 2e       	mov	r0, r25
    495a:	03 94       	inc	r0
    495c:	00 0c       	add	r0, r0
    495e:	11 f4       	brne	.+4      	; 0x4964 <__fp_round+0xc>
    4960:	88 23       	and	r24, r24
    4962:	52 f0       	brmi	.+20     	; 0x4978 <__fp_round+0x20>
    4964:	bb 0f       	add	r27, r27
    4966:	40 f4       	brcc	.+16     	; 0x4978 <__fp_round+0x20>
    4968:	bf 2b       	or	r27, r31
    496a:	11 f4       	brne	.+4      	; 0x4970 <__fp_round+0x18>
    496c:	60 ff       	sbrs	r22, 0
    496e:	04 c0       	rjmp	.+8      	; 0x4978 <__fp_round+0x20>
    4970:	6f 5f       	subi	r22, 0xFF	; 255
    4972:	7f 4f       	sbci	r23, 0xFF	; 255
    4974:	8f 4f       	sbci	r24, 0xFF	; 255
    4976:	9f 4f       	sbci	r25, 0xFF	; 255
    4978:	08 95       	ret

0000497a <__fp_split3>:
    497a:	57 fd       	sbrc	r21, 7
    497c:	90 58       	subi	r25, 0x80	; 128
    497e:	44 0f       	add	r20, r20
    4980:	55 1f       	adc	r21, r21
    4982:	59 f0       	breq	.+22     	; 0x499a <__fp_splitA+0x10>
    4984:	5f 3f       	cpi	r21, 0xFF	; 255
    4986:	71 f0       	breq	.+28     	; 0x49a4 <__fp_splitA+0x1a>
    4988:	47 95       	ror	r20

0000498a <__fp_splitA>:
    498a:	88 0f       	add	r24, r24
    498c:	97 fb       	bst	r25, 7
    498e:	99 1f       	adc	r25, r25
    4990:	61 f0       	breq	.+24     	; 0x49aa <__fp_splitA+0x20>
    4992:	9f 3f       	cpi	r25, 0xFF	; 255
    4994:	79 f0       	breq	.+30     	; 0x49b4 <__fp_splitA+0x2a>
    4996:	87 95       	ror	r24
    4998:	08 95       	ret
    499a:	12 16       	cp	r1, r18
    499c:	13 06       	cpc	r1, r19
    499e:	14 06       	cpc	r1, r20
    49a0:	55 1f       	adc	r21, r21
    49a2:	f2 cf       	rjmp	.-28     	; 0x4988 <__fp_split3+0xe>
    49a4:	46 95       	lsr	r20
    49a6:	f1 df       	rcall	.-30     	; 0x498a <__fp_splitA>
    49a8:	08 c0       	rjmp	.+16     	; 0x49ba <__fp_splitA+0x30>
    49aa:	16 16       	cp	r1, r22
    49ac:	17 06       	cpc	r1, r23
    49ae:	18 06       	cpc	r1, r24
    49b0:	99 1f       	adc	r25, r25
    49b2:	f1 cf       	rjmp	.-30     	; 0x4996 <__fp_splitA+0xc>
    49b4:	86 95       	lsr	r24
    49b6:	71 05       	cpc	r23, r1
    49b8:	61 05       	cpc	r22, r1
    49ba:	08 94       	sec
    49bc:	08 95       	ret

000049be <__fp_trunc>:
    49be:	e5 df       	rcall	.-54     	; 0x498a <__fp_splitA>
    49c0:	a0 f0       	brcs	.+40     	; 0x49ea <__fp_trunc+0x2c>
    49c2:	be e7       	ldi	r27, 0x7E	; 126
    49c4:	b9 17       	cp	r27, r25
    49c6:	88 f4       	brcc	.+34     	; 0x49ea <__fp_trunc+0x2c>
    49c8:	bb 27       	eor	r27, r27
    49ca:	9f 38       	cpi	r25, 0x8F	; 143
    49cc:	60 f4       	brcc	.+24     	; 0x49e6 <__fp_trunc+0x28>
    49ce:	16 16       	cp	r1, r22
    49d0:	b1 1d       	adc	r27, r1
    49d2:	67 2f       	mov	r22, r23
    49d4:	78 2f       	mov	r23, r24
    49d6:	88 27       	eor	r24, r24
    49d8:	98 5f       	subi	r25, 0xF8	; 248
    49da:	f7 cf       	rjmp	.-18     	; 0x49ca <__fp_trunc+0xc>
    49dc:	86 95       	lsr	r24
    49de:	77 95       	ror	r23
    49e0:	67 95       	ror	r22
    49e2:	b1 1d       	adc	r27, r1
    49e4:	93 95       	inc	r25
    49e6:	96 39       	cpi	r25, 0x96	; 150
    49e8:	c8 f3       	brcs	.-14     	; 0x49dc <__fp_trunc+0x1e>
    49ea:	08 95       	ret

000049ec <__fp_zero>:
    49ec:	e8 94       	clt

000049ee <__fp_szero>:
    49ee:	bb 27       	eor	r27, r27
    49f0:	66 27       	eor	r22, r22
    49f2:	77 27       	eor	r23, r23
    49f4:	cb 01       	movw	r24, r22
    49f6:	97 f9       	bld	r25, 7
    49f8:	08 95       	ret

000049fa <__gesf2>:
    49fa:	25 df       	rcall	.-438    	; 0x4846 <__fp_cmp>
    49fc:	08 f4       	brcc	.+2      	; 0x4a00 <__gesf2+0x6>
    49fe:	8f ef       	ldi	r24, 0xFF	; 255
    4a00:	08 95       	ret

00004a02 <inverse>:
    4a02:	9b 01       	movw	r18, r22
    4a04:	ac 01       	movw	r20, r24
    4a06:	60 e0       	ldi	r22, 0x00	; 0
    4a08:	70 e0       	ldi	r23, 0x00	; 0
    4a0a:	80 e8       	ldi	r24, 0x80	; 128
    4a0c:	9f e3       	ldi	r25, 0x3F	; 63
    4a0e:	32 ce       	rjmp	.-924    	; 0x4674 <__divsf3>

00004a10 <lround>:
    4a10:	bc df       	rcall	.-136    	; 0x498a <__fp_splitA>
    4a12:	58 f1       	brcs	.+86     	; 0x4a6a <lround+0x5a>
    4a14:	9e 57       	subi	r25, 0x7E	; 126
    4a16:	58 f1       	brcs	.+86     	; 0x4a6e <lround+0x5e>
    4a18:	98 51       	subi	r25, 0x18	; 24
    4a1a:	a0 f0       	brcs	.+40     	; 0x4a44 <lround+0x34>
    4a1c:	e9 f0       	breq	.+58     	; 0x4a58 <lround+0x48>
    4a1e:	98 30       	cpi	r25, 0x08	; 8
    4a20:	20 f5       	brcc	.+72     	; 0x4a6a <lround+0x5a>
    4a22:	09 2e       	mov	r0, r25
    4a24:	99 27       	eor	r25, r25
    4a26:	66 0f       	add	r22, r22
    4a28:	77 1f       	adc	r23, r23
    4a2a:	88 1f       	adc	r24, r24
    4a2c:	99 1f       	adc	r25, r25
    4a2e:	0a 94       	dec	r0
    4a30:	d1 f7       	brne	.-12     	; 0x4a26 <lround+0x16>
    4a32:	12 c0       	rjmp	.+36     	; 0x4a58 <lround+0x48>
    4a34:	06 2e       	mov	r0, r22
    4a36:	67 2f       	mov	r22, r23
    4a38:	78 2f       	mov	r23, r24
    4a3a:	88 27       	eor	r24, r24
    4a3c:	98 5f       	subi	r25, 0xF8	; 248
    4a3e:	11 f4       	brne	.+4      	; 0x4a44 <lround+0x34>
    4a40:	00 0c       	add	r0, r0
    4a42:	07 c0       	rjmp	.+14     	; 0x4a52 <lround+0x42>
    4a44:	99 3f       	cpi	r25, 0xF9	; 249
    4a46:	b4 f3       	brlt	.-20     	; 0x4a34 <lround+0x24>
    4a48:	86 95       	lsr	r24
    4a4a:	77 95       	ror	r23
    4a4c:	67 95       	ror	r22
    4a4e:	93 95       	inc	r25
    4a50:	d9 f7       	brne	.-10     	; 0x4a48 <lround+0x38>
    4a52:	61 1d       	adc	r22, r1
    4a54:	71 1d       	adc	r23, r1
    4a56:	81 1d       	adc	r24, r1
    4a58:	3e f4       	brtc	.+14     	; 0x4a68 <lround+0x58>
    4a5a:	90 95       	com	r25
    4a5c:	80 95       	com	r24
    4a5e:	70 95       	com	r23
    4a60:	61 95       	neg	r22
    4a62:	7f 4f       	sbci	r23, 0xFF	; 255
    4a64:	8f 4f       	sbci	r24, 0xFF	; 255
    4a66:	9f 4f       	sbci	r25, 0xFF	; 255
    4a68:	08 95       	ret
    4a6a:	68 94       	set
    4a6c:	c0 cf       	rjmp	.-128    	; 0x49ee <__fp_szero>
    4a6e:	be cf       	rjmp	.-132    	; 0x49ec <__fp_zero>

00004a70 <modf>:
    4a70:	fa 01       	movw	r30, r20
    4a72:	dc 01       	movw	r26, r24
    4a74:	aa 0f       	add	r26, r26
    4a76:	bb 1f       	adc	r27, r27
    4a78:	9b 01       	movw	r18, r22
    4a7a:	ac 01       	movw	r20, r24
    4a7c:	bf 57       	subi	r27, 0x7F	; 127
    4a7e:	28 f4       	brcc	.+10     	; 0x4a8a <modf+0x1a>
    4a80:	22 27       	eor	r18, r18
    4a82:	33 27       	eor	r19, r19
    4a84:	44 27       	eor	r20, r20
    4a86:	50 78       	andi	r21, 0x80	; 128
    4a88:	1f c0       	rjmp	.+62     	; 0x4ac8 <modf+0x58>
    4a8a:	b7 51       	subi	r27, 0x17	; 23
    4a8c:	88 f4       	brcc	.+34     	; 0x4ab0 <modf+0x40>
    4a8e:	ab 2f       	mov	r26, r27
    4a90:	00 24       	eor	r0, r0
    4a92:	46 95       	lsr	r20
    4a94:	37 95       	ror	r19
    4a96:	27 95       	ror	r18
    4a98:	01 1c       	adc	r0, r1
    4a9a:	a3 95       	inc	r26
    4a9c:	d2 f3       	brmi	.-12     	; 0x4a92 <modf+0x22>
    4a9e:	00 20       	and	r0, r0
    4aa0:	69 f0       	breq	.+26     	; 0x4abc <modf+0x4c>
    4aa2:	22 0f       	add	r18, r18
    4aa4:	33 1f       	adc	r19, r19
    4aa6:	44 1f       	adc	r20, r20
    4aa8:	b3 95       	inc	r27
    4aaa:	da f3       	brmi	.-10     	; 0x4aa2 <modf+0x32>
    4aac:	0d d0       	rcall	.+26     	; 0x4ac8 <modf+0x58>
    4aae:	3e cd       	rjmp	.-1412   	; 0x452c <__subsf3>
    4ab0:	61 30       	cpi	r22, 0x01	; 1
    4ab2:	71 05       	cpc	r23, r1
    4ab4:	a0 e8       	ldi	r26, 0x80	; 128
    4ab6:	8a 07       	cpc	r24, r26
    4ab8:	b9 46       	sbci	r27, 0x69	; 105
    4aba:	30 f4       	brcc	.+12     	; 0x4ac8 <modf+0x58>
    4abc:	9b 01       	movw	r18, r22
    4abe:	ac 01       	movw	r20, r24
    4ac0:	66 27       	eor	r22, r22
    4ac2:	77 27       	eor	r23, r23
    4ac4:	88 27       	eor	r24, r24
    4ac6:	90 78       	andi	r25, 0x80	; 128
    4ac8:	30 96       	adiw	r30, 0x00	; 0
    4aca:	21 f0       	breq	.+8      	; 0x4ad4 <modf+0x64>
    4acc:	20 83       	st	Z, r18
    4ace:	31 83       	std	Z+1, r19	; 0x01
    4ad0:	42 83       	std	Z+2, r20	; 0x02
    4ad2:	53 83       	std	Z+3, r21	; 0x03
    4ad4:	08 95       	ret

00004ad6 <__mulsf3>:
    4ad6:	0b d0       	rcall	.+22     	; 0x4aee <__mulsf3x>
    4ad8:	3f cf       	rjmp	.-386    	; 0x4958 <__fp_round>
    4ada:	30 df       	rcall	.-416    	; 0x493c <__fp_pscA>
    4adc:	28 f0       	brcs	.+10     	; 0x4ae8 <__mulsf3+0x12>
    4ade:	35 df       	rcall	.-406    	; 0x494a <__fp_pscB>
    4ae0:	18 f0       	brcs	.+6      	; 0x4ae8 <__mulsf3+0x12>
    4ae2:	95 23       	and	r25, r21
    4ae4:	09 f0       	breq	.+2      	; 0x4ae8 <__mulsf3+0x12>
    4ae6:	d3 ce       	rjmp	.-602    	; 0x488e <__fp_inf>
    4ae8:	01 cf       	rjmp	.-510    	; 0x48ec <__fp_nan>
    4aea:	11 24       	eor	r1, r1
    4aec:	80 cf       	rjmp	.-256    	; 0x49ee <__fp_szero>

00004aee <__mulsf3x>:
    4aee:	45 df       	rcall	.-374    	; 0x497a <__fp_split3>
    4af0:	a0 f3       	brcs	.-24     	; 0x4ada <__mulsf3+0x4>

00004af2 <__mulsf3_pse>:
    4af2:	95 9f       	mul	r25, r21
    4af4:	d1 f3       	breq	.-12     	; 0x4aea <__mulsf3+0x14>
    4af6:	95 0f       	add	r25, r21
    4af8:	50 e0       	ldi	r21, 0x00	; 0
    4afa:	55 1f       	adc	r21, r21
    4afc:	62 9f       	mul	r22, r18
    4afe:	f0 01       	movw	r30, r0
    4b00:	72 9f       	mul	r23, r18
    4b02:	bb 27       	eor	r27, r27
    4b04:	f0 0d       	add	r31, r0
    4b06:	b1 1d       	adc	r27, r1
    4b08:	63 9f       	mul	r22, r19
    4b0a:	aa 27       	eor	r26, r26
    4b0c:	f0 0d       	add	r31, r0
    4b0e:	b1 1d       	adc	r27, r1
    4b10:	aa 1f       	adc	r26, r26
    4b12:	64 9f       	mul	r22, r20
    4b14:	66 27       	eor	r22, r22
    4b16:	b0 0d       	add	r27, r0
    4b18:	a1 1d       	adc	r26, r1
    4b1a:	66 1f       	adc	r22, r22
    4b1c:	82 9f       	mul	r24, r18
    4b1e:	22 27       	eor	r18, r18
    4b20:	b0 0d       	add	r27, r0
    4b22:	a1 1d       	adc	r26, r1
    4b24:	62 1f       	adc	r22, r18
    4b26:	73 9f       	mul	r23, r19
    4b28:	b0 0d       	add	r27, r0
    4b2a:	a1 1d       	adc	r26, r1
    4b2c:	62 1f       	adc	r22, r18
    4b2e:	83 9f       	mul	r24, r19
    4b30:	a0 0d       	add	r26, r0
    4b32:	61 1d       	adc	r22, r1
    4b34:	22 1f       	adc	r18, r18
    4b36:	74 9f       	mul	r23, r20
    4b38:	33 27       	eor	r19, r19
    4b3a:	a0 0d       	add	r26, r0
    4b3c:	61 1d       	adc	r22, r1
    4b3e:	23 1f       	adc	r18, r19
    4b40:	84 9f       	mul	r24, r20
    4b42:	60 0d       	add	r22, r0
    4b44:	21 1d       	adc	r18, r1
    4b46:	82 2f       	mov	r24, r18
    4b48:	76 2f       	mov	r23, r22
    4b4a:	6a 2f       	mov	r22, r26
    4b4c:	11 24       	eor	r1, r1
    4b4e:	9f 57       	subi	r25, 0x7F	; 127
    4b50:	50 40       	sbci	r21, 0x00	; 0
    4b52:	8a f0       	brmi	.+34     	; 0x4b76 <__mulsf3_pse+0x84>
    4b54:	e1 f0       	breq	.+56     	; 0x4b8e <__mulsf3_pse+0x9c>
    4b56:	88 23       	and	r24, r24
    4b58:	4a f0       	brmi	.+18     	; 0x4b6c <__mulsf3_pse+0x7a>
    4b5a:	ee 0f       	add	r30, r30
    4b5c:	ff 1f       	adc	r31, r31
    4b5e:	bb 1f       	adc	r27, r27
    4b60:	66 1f       	adc	r22, r22
    4b62:	77 1f       	adc	r23, r23
    4b64:	88 1f       	adc	r24, r24
    4b66:	91 50       	subi	r25, 0x01	; 1
    4b68:	50 40       	sbci	r21, 0x00	; 0
    4b6a:	a9 f7       	brne	.-22     	; 0x4b56 <__mulsf3_pse+0x64>
    4b6c:	9e 3f       	cpi	r25, 0xFE	; 254
    4b6e:	51 05       	cpc	r21, r1
    4b70:	70 f0       	brcs	.+28     	; 0x4b8e <__mulsf3_pse+0x9c>
    4b72:	8d ce       	rjmp	.-742    	; 0x488e <__fp_inf>
    4b74:	3c cf       	rjmp	.-392    	; 0x49ee <__fp_szero>
    4b76:	5f 3f       	cpi	r21, 0xFF	; 255
    4b78:	ec f3       	brlt	.-6      	; 0x4b74 <__mulsf3_pse+0x82>
    4b7a:	98 3e       	cpi	r25, 0xE8	; 232
    4b7c:	dc f3       	brlt	.-10     	; 0x4b74 <__mulsf3_pse+0x82>
    4b7e:	86 95       	lsr	r24
    4b80:	77 95       	ror	r23
    4b82:	67 95       	ror	r22
    4b84:	b7 95       	ror	r27
    4b86:	f7 95       	ror	r31
    4b88:	e7 95       	ror	r30
    4b8a:	9f 5f       	subi	r25, 0xFF	; 255
    4b8c:	c1 f7       	brne	.-16     	; 0x4b7e <__mulsf3_pse+0x8c>
    4b8e:	fe 2b       	or	r31, r30
    4b90:	88 0f       	add	r24, r24
    4b92:	91 1d       	adc	r25, r1
    4b94:	96 95       	lsr	r25
    4b96:	87 95       	ror	r24
    4b98:	97 f9       	bld	r25, 7
    4b9a:	08 95       	ret

00004b9c <round>:
    4b9c:	f6 de       	rcall	.-532    	; 0x498a <__fp_splitA>
    4b9e:	e0 f0       	brcs	.+56     	; 0x4bd8 <round+0x3c>
    4ba0:	9e 37       	cpi	r25, 0x7E	; 126
    4ba2:	d8 f0       	brcs	.+54     	; 0x4bda <round+0x3e>
    4ba4:	96 39       	cpi	r25, 0x96	; 150
    4ba6:	b8 f4       	brcc	.+46     	; 0x4bd6 <round+0x3a>
    4ba8:	9e 38       	cpi	r25, 0x8E	; 142
    4baa:	48 f4       	brcc	.+18     	; 0x4bbe <round+0x22>
    4bac:	67 2f       	mov	r22, r23
    4bae:	78 2f       	mov	r23, r24
    4bb0:	88 27       	eor	r24, r24
    4bb2:	98 5f       	subi	r25, 0xF8	; 248
    4bb4:	f9 cf       	rjmp	.-14     	; 0x4ba8 <round+0xc>
    4bb6:	86 95       	lsr	r24
    4bb8:	77 95       	ror	r23
    4bba:	67 95       	ror	r22
    4bbc:	93 95       	inc	r25
    4bbe:	95 39       	cpi	r25, 0x95	; 149
    4bc0:	d0 f3       	brcs	.-12     	; 0x4bb6 <round+0x1a>
    4bc2:	b6 2f       	mov	r27, r22
    4bc4:	b1 70       	andi	r27, 0x01	; 1
    4bc6:	6b 0f       	add	r22, r27
    4bc8:	71 1d       	adc	r23, r1
    4bca:	81 1d       	adc	r24, r1
    4bcc:	20 f4       	brcc	.+8      	; 0x4bd6 <round+0x3a>
    4bce:	87 95       	ror	r24
    4bd0:	77 95       	ror	r23
    4bd2:	67 95       	ror	r22
    4bd4:	93 95       	inc	r25
    4bd6:	61 ce       	rjmp	.-830    	; 0x489a <__fp_mintl>
    4bd8:	7b ce       	rjmp	.-778    	; 0x48d0 <__fp_mpack>
    4bda:	09 cf       	rjmp	.-494    	; 0x49ee <__fp_szero>
    4bdc:	11 f4       	brne	.+4      	; 0x4be2 <round+0x46>
    4bde:	0e f4       	brtc	.+2      	; 0x4be2 <round+0x46>
    4be0:	85 ce       	rjmp	.-758    	; 0x48ec <__fp_nan>
    4be2:	76 ce       	rjmp	.-788    	; 0x48d0 <__fp_mpack>

00004be4 <sqrt>:
    4be4:	d2 de       	rcall	.-604    	; 0x498a <__fp_splitA>
    4be6:	d0 f3       	brcs	.-12     	; 0x4bdc <round+0x40>
    4be8:	99 23       	and	r25, r25
    4bea:	d9 f3       	breq	.-10     	; 0x4be2 <round+0x46>
    4bec:	ce f3       	brts	.-14     	; 0x4be0 <round+0x44>
    4bee:	9f 57       	subi	r25, 0x7F	; 127
    4bf0:	55 0b       	sbc	r21, r21
    4bf2:	87 ff       	sbrs	r24, 7
    4bf4:	3f d0       	rcall	.+126    	; 0x4c74 <__fp_norm2>
    4bf6:	00 24       	eor	r0, r0
    4bf8:	a0 e6       	ldi	r26, 0x60	; 96
    4bfa:	40 ea       	ldi	r20, 0xA0	; 160
    4bfc:	90 01       	movw	r18, r0
    4bfe:	80 58       	subi	r24, 0x80	; 128
    4c00:	56 95       	lsr	r21
    4c02:	97 95       	ror	r25
    4c04:	28 f4       	brcc	.+10     	; 0x4c10 <sqrt+0x2c>
    4c06:	80 5c       	subi	r24, 0xC0	; 192
    4c08:	66 0f       	add	r22, r22
    4c0a:	77 1f       	adc	r23, r23
    4c0c:	88 1f       	adc	r24, r24
    4c0e:	20 f0       	brcs	.+8      	; 0x4c18 <sqrt+0x34>
    4c10:	26 17       	cp	r18, r22
    4c12:	37 07       	cpc	r19, r23
    4c14:	48 07       	cpc	r20, r24
    4c16:	30 f4       	brcc	.+12     	; 0x4c24 <sqrt+0x40>
    4c18:	62 1b       	sub	r22, r18
    4c1a:	73 0b       	sbc	r23, r19
    4c1c:	84 0b       	sbc	r24, r20
    4c1e:	20 29       	or	r18, r0
    4c20:	31 29       	or	r19, r1
    4c22:	4a 2b       	or	r20, r26
    4c24:	a6 95       	lsr	r26
    4c26:	17 94       	ror	r1
    4c28:	07 94       	ror	r0
    4c2a:	20 25       	eor	r18, r0
    4c2c:	31 25       	eor	r19, r1
    4c2e:	4a 27       	eor	r20, r26
    4c30:	58 f7       	brcc	.-42     	; 0x4c08 <sqrt+0x24>
    4c32:	66 0f       	add	r22, r22
    4c34:	77 1f       	adc	r23, r23
    4c36:	88 1f       	adc	r24, r24
    4c38:	20 f0       	brcs	.+8      	; 0x4c42 <sqrt+0x5e>
    4c3a:	26 17       	cp	r18, r22
    4c3c:	37 07       	cpc	r19, r23
    4c3e:	48 07       	cpc	r20, r24
    4c40:	30 f4       	brcc	.+12     	; 0x4c4e <sqrt+0x6a>
    4c42:	62 0b       	sbc	r22, r18
    4c44:	73 0b       	sbc	r23, r19
    4c46:	84 0b       	sbc	r24, r20
    4c48:	20 0d       	add	r18, r0
    4c4a:	31 1d       	adc	r19, r1
    4c4c:	41 1d       	adc	r20, r1
    4c4e:	a0 95       	com	r26
    4c50:	81 f7       	brne	.-32     	; 0x4c32 <sqrt+0x4e>
    4c52:	b9 01       	movw	r22, r18
    4c54:	84 2f       	mov	r24, r20
    4c56:	91 58       	subi	r25, 0x81	; 129
    4c58:	88 0f       	add	r24, r24
    4c5a:	96 95       	lsr	r25
    4c5c:	87 95       	ror	r24
    4c5e:	08 95       	ret

00004c60 <square>:
    4c60:	9b 01       	movw	r18, r22
    4c62:	ac 01       	movw	r20, r24
    4c64:	38 cf       	rjmp	.-400    	; 0x4ad6 <__mulsf3>

00004c66 <trunc>:
    4c66:	ab de       	rcall	.-682    	; 0x49be <__fp_trunc>
    4c68:	20 f0       	brcs	.+8      	; 0x4c72 <trunc+0xc>
    4c6a:	9f 37       	cpi	r25, 0x7F	; 127
    4c6c:	08 f4       	brcc	.+2      	; 0x4c70 <trunc+0xa>
    4c6e:	bf ce       	rjmp	.-642    	; 0x49ee <__fp_szero>
    4c70:	14 ce       	rjmp	.-984    	; 0x489a <__fp_mintl>
    4c72:	2e ce       	rjmp	.-932    	; 0x48d0 <__fp_mpack>

00004c74 <__fp_norm2>:
    4c74:	91 50       	subi	r25, 0x01	; 1
    4c76:	50 40       	sbci	r21, 0x00	; 0
    4c78:	66 0f       	add	r22, r22
    4c7a:	77 1f       	adc	r23, r23
    4c7c:	88 1f       	adc	r24, r24
    4c7e:	d2 f7       	brpl	.-12     	; 0x4c74 <__fp_norm2>
    4c80:	08 95       	ret

00004c82 <__mulsi3>:
    4c82:	62 9f       	mul	r22, r18
    4c84:	d0 01       	movw	r26, r0
    4c86:	73 9f       	mul	r23, r19
    4c88:	f0 01       	movw	r30, r0
    4c8a:	82 9f       	mul	r24, r18
    4c8c:	e0 0d       	add	r30, r0
    4c8e:	f1 1d       	adc	r31, r1
    4c90:	64 9f       	mul	r22, r20
    4c92:	e0 0d       	add	r30, r0
    4c94:	f1 1d       	adc	r31, r1
    4c96:	92 9f       	mul	r25, r18
    4c98:	f0 0d       	add	r31, r0
    4c9a:	83 9f       	mul	r24, r19
    4c9c:	f0 0d       	add	r31, r0
    4c9e:	74 9f       	mul	r23, r20
    4ca0:	f0 0d       	add	r31, r0
    4ca2:	65 9f       	mul	r22, r21
    4ca4:	f0 0d       	add	r31, r0
    4ca6:	99 27       	eor	r25, r25
    4ca8:	72 9f       	mul	r23, r18
    4caa:	b0 0d       	add	r27, r0
    4cac:	e1 1d       	adc	r30, r1
    4cae:	f9 1f       	adc	r31, r25
    4cb0:	63 9f       	mul	r22, r19
    4cb2:	b0 0d       	add	r27, r0
    4cb4:	e1 1d       	adc	r30, r1
    4cb6:	f9 1f       	adc	r31, r25
    4cb8:	bd 01       	movw	r22, r26
    4cba:	cf 01       	movw	r24, r30
    4cbc:	11 24       	eor	r1, r1
    4cbe:	08 95       	ret

00004cc0 <__divmodhi4>:
    4cc0:	97 fb       	bst	r25, 7
    4cc2:	09 2e       	mov	r0, r25
    4cc4:	07 26       	eor	r0, r23
    4cc6:	0a d0       	rcall	.+20     	; 0x4cdc <__divmodhi4_neg1>
    4cc8:	77 fd       	sbrc	r23, 7
    4cca:	04 d0       	rcall	.+8      	; 0x4cd4 <__divmodhi4_neg2>
    4ccc:	49 d0       	rcall	.+146    	; 0x4d60 <__udivmodhi4>
    4cce:	06 d0       	rcall	.+12     	; 0x4cdc <__divmodhi4_neg1>
    4cd0:	00 20       	and	r0, r0
    4cd2:	1a f4       	brpl	.+6      	; 0x4cda <__divmodhi4_exit>

00004cd4 <__divmodhi4_neg2>:
    4cd4:	70 95       	com	r23
    4cd6:	61 95       	neg	r22
    4cd8:	7f 4f       	sbci	r23, 0xFF	; 255

00004cda <__divmodhi4_exit>:
    4cda:	08 95       	ret

00004cdc <__divmodhi4_neg1>:
    4cdc:	f6 f7       	brtc	.-4      	; 0x4cda <__divmodhi4_exit>
    4cde:	90 95       	com	r25
    4ce0:	81 95       	neg	r24
    4ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce4:	08 95       	ret

00004ce6 <__udivmodsi4>:
    4ce6:	a1 e2       	ldi	r26, 0x21	; 33
    4ce8:	1a 2e       	mov	r1, r26
    4cea:	aa 1b       	sub	r26, r26
    4cec:	bb 1b       	sub	r27, r27
    4cee:	fd 01       	movw	r30, r26
    4cf0:	0d c0       	rjmp	.+26     	; 0x4d0c <__udivmodsi4_ep>

00004cf2 <__udivmodsi4_loop>:
    4cf2:	aa 1f       	adc	r26, r26
    4cf4:	bb 1f       	adc	r27, r27
    4cf6:	ee 1f       	adc	r30, r30
    4cf8:	ff 1f       	adc	r31, r31
    4cfa:	a2 17       	cp	r26, r18
    4cfc:	b3 07       	cpc	r27, r19
    4cfe:	e4 07       	cpc	r30, r20
    4d00:	f5 07       	cpc	r31, r21
    4d02:	20 f0       	brcs	.+8      	; 0x4d0c <__udivmodsi4_ep>
    4d04:	a2 1b       	sub	r26, r18
    4d06:	b3 0b       	sbc	r27, r19
    4d08:	e4 0b       	sbc	r30, r20
    4d0a:	f5 0b       	sbc	r31, r21

00004d0c <__udivmodsi4_ep>:
    4d0c:	66 1f       	adc	r22, r22
    4d0e:	77 1f       	adc	r23, r23
    4d10:	88 1f       	adc	r24, r24
    4d12:	99 1f       	adc	r25, r25
    4d14:	1a 94       	dec	r1
    4d16:	69 f7       	brne	.-38     	; 0x4cf2 <__udivmodsi4_loop>
    4d18:	60 95       	com	r22
    4d1a:	70 95       	com	r23
    4d1c:	80 95       	com	r24
    4d1e:	90 95       	com	r25
    4d20:	9b 01       	movw	r18, r22
    4d22:	ac 01       	movw	r20, r24
    4d24:	bd 01       	movw	r22, r26
    4d26:	cf 01       	movw	r24, r30
    4d28:	08 95       	ret

00004d2a <__divmodsi4>:
    4d2a:	97 fb       	bst	r25, 7
    4d2c:	09 2e       	mov	r0, r25
    4d2e:	05 26       	eor	r0, r21
    4d30:	0e d0       	rcall	.+28     	; 0x4d4e <__divmodsi4_neg1>
    4d32:	57 fd       	sbrc	r21, 7
    4d34:	04 d0       	rcall	.+8      	; 0x4d3e <__divmodsi4_neg2>
    4d36:	d7 df       	rcall	.-82     	; 0x4ce6 <__udivmodsi4>
    4d38:	0a d0       	rcall	.+20     	; 0x4d4e <__divmodsi4_neg1>
    4d3a:	00 1c       	adc	r0, r0
    4d3c:	38 f4       	brcc	.+14     	; 0x4d4c <__divmodsi4_exit>

00004d3e <__divmodsi4_neg2>:
    4d3e:	50 95       	com	r21
    4d40:	40 95       	com	r20
    4d42:	30 95       	com	r19
    4d44:	21 95       	neg	r18
    4d46:	3f 4f       	sbci	r19, 0xFF	; 255
    4d48:	4f 4f       	sbci	r20, 0xFF	; 255
    4d4a:	5f 4f       	sbci	r21, 0xFF	; 255

00004d4c <__divmodsi4_exit>:
    4d4c:	08 95       	ret

00004d4e <__divmodsi4_neg1>:
    4d4e:	f6 f7       	brtc	.-4      	; 0x4d4c <__divmodsi4_exit>
    4d50:	90 95       	com	r25
    4d52:	80 95       	com	r24
    4d54:	70 95       	com	r23
    4d56:	61 95       	neg	r22
    4d58:	7f 4f       	sbci	r23, 0xFF	; 255
    4d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d5e:	08 95       	ret

00004d60 <__udivmodhi4>:
    4d60:	aa 1b       	sub	r26, r26
    4d62:	bb 1b       	sub	r27, r27
    4d64:	51 e1       	ldi	r21, 0x11	; 17
    4d66:	07 c0       	rjmp	.+14     	; 0x4d76 <__udivmodhi4_ep>

00004d68 <__udivmodhi4_loop>:
    4d68:	aa 1f       	adc	r26, r26
    4d6a:	bb 1f       	adc	r27, r27
    4d6c:	a6 17       	cp	r26, r22
    4d6e:	b7 07       	cpc	r27, r23
    4d70:	10 f0       	brcs	.+4      	; 0x4d76 <__udivmodhi4_ep>
    4d72:	a6 1b       	sub	r26, r22
    4d74:	b7 0b       	sbc	r27, r23

00004d76 <__udivmodhi4_ep>:
    4d76:	88 1f       	adc	r24, r24
    4d78:	99 1f       	adc	r25, r25
    4d7a:	5a 95       	dec	r21
    4d7c:	a9 f7       	brne	.-22     	; 0x4d68 <__udivmodhi4_loop>
    4d7e:	80 95       	com	r24
    4d80:	90 95       	com	r25
    4d82:	bc 01       	movw	r22, r24
    4d84:	cd 01       	movw	r24, r26
    4d86:	08 95       	ret

00004d88 <strtod>:
    4d88:	8f 92       	push	r8
    4d8a:	9f 92       	push	r9
    4d8c:	af 92       	push	r10
    4d8e:	bf 92       	push	r11
    4d90:	cf 92       	push	r12
    4d92:	df 92       	push	r13
    4d94:	ef 92       	push	r14
    4d96:	ff 92       	push	r15
    4d98:	0f 93       	push	r16
    4d9a:	1f 93       	push	r17
    4d9c:	cf 93       	push	r28
    4d9e:	df 93       	push	r29
    4da0:	ec 01       	movw	r28, r24
    4da2:	5b 01       	movw	r10, r22
    4da4:	61 15       	cp	r22, r1
    4da6:	71 05       	cpc	r23, r1
    4da8:	19 f0       	breq	.+6      	; 0x4db0 <strtod+0x28>
    4daa:	fb 01       	movw	r30, r22
    4dac:	91 83       	std	Z+1, r25	; 0x01
    4dae:	80 83       	st	Z, r24
    4db0:	f9 90       	ld	r15, Y+
    4db2:	8f 2d       	mov	r24, r15
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	0e 94 32 28 	call	0x5064	; 0x5064 <isspace>
    4dba:	89 2b       	or	r24, r25
    4dbc:	c9 f7       	brne	.-14     	; 0x4db0 <strtod+0x28>
    4dbe:	fd e2       	ldi	r31, 0x2D	; 45
    4dc0:	ff 16       	cp	r15, r31
    4dc2:	21 f4       	brne	.+8      	; 0x4dcc <strtod+0x44>
    4dc4:	f9 90       	ld	r15, Y+
    4dc6:	ee 24       	eor	r14, r14
    4dc8:	e3 94       	inc	r14
    4dca:	05 c0       	rjmp	.+10     	; 0x4dd6 <strtod+0x4e>
    4dcc:	2b e2       	ldi	r18, 0x2B	; 43
    4dce:	f2 16       	cp	r15, r18
    4dd0:	09 f4       	brne	.+2      	; 0x4dd4 <strtod+0x4c>
    4dd2:	f9 90       	ld	r15, Y+
    4dd4:	ee 24       	eor	r14, r14
    4dd6:	8e 01       	movw	r16, r28
    4dd8:	01 50       	subi	r16, 0x01	; 1
    4dda:	10 40       	sbci	r17, 0x00	; 0
    4ddc:	c8 01       	movw	r24, r16
    4dde:	62 e5       	ldi	r22, 0x52	; 82
    4de0:	75 e0       	ldi	r23, 0x05	; 5
    4de2:	43 e0       	ldi	r20, 0x03	; 3
    4de4:	50 e0       	ldi	r21, 0x00	; 0
    4de6:	0e 94 3a 28 	call	0x5074	; 0x5074 <strncasecmp_P>
    4dea:	89 2b       	or	r24, r25
    4dec:	01 f5       	brne	.+64     	; 0x4e2e <strtod+0xa6>
    4dee:	8e 01       	movw	r16, r28
    4df0:	0e 5f       	subi	r16, 0xFE	; 254
    4df2:	1f 4f       	sbci	r17, 0xFF	; 255
    4df4:	c8 01       	movw	r24, r16
    4df6:	65 e5       	ldi	r22, 0x55	; 85
    4df8:	75 e0       	ldi	r23, 0x05	; 5
    4dfa:	45 e0       	ldi	r20, 0x05	; 5
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	0e 94 3a 28 	call	0x5074	; 0x5074 <strncasecmp_P>
    4e02:	89 2b       	or	r24, r25
    4e04:	19 f4       	brne	.+6      	; 0x4e0c <strtod+0x84>
    4e06:	8e 01       	movw	r16, r28
    4e08:	09 5f       	subi	r16, 0xF9	; 249
    4e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e0c:	a1 14       	cp	r10, r1
    4e0e:	b1 04       	cpc	r11, r1
    4e10:	19 f0       	breq	.+6      	; 0x4e18 <strtod+0x90>
    4e12:	f5 01       	movw	r30, r10
    4e14:	11 83       	std	Z+1, r17	; 0x01
    4e16:	00 83       	st	Z, r16
    4e18:	e0 fc       	sbrc	r14, 0
    4e1a:	04 c0       	rjmp	.+8      	; 0x4e24 <strtod+0x9c>
    4e1c:	70 e0       	ldi	r23, 0x00	; 0
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	80 e8       	ldi	r24, 0x80	; 128
    4e22:	14 c0       	rjmp	.+40     	; 0x4e4c <strtod+0xc4>
    4e24:	70 e0       	ldi	r23, 0x00	; 0
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	80 e8       	ldi	r24, 0x80	; 128
    4e2a:	6f ef       	ldi	r22, 0xFF	; 255
    4e2c:	08 c1       	rjmp	.+528    	; 0x503e <strtod+0x2b6>
    4e2e:	c8 01       	movw	r24, r16
    4e30:	6a e5       	ldi	r22, 0x5A	; 90
    4e32:	75 e0       	ldi	r23, 0x05	; 5
    4e34:	43 e0       	ldi	r20, 0x03	; 3
    4e36:	50 e0       	ldi	r21, 0x00	; 0
    4e38:	0e 94 3a 28 	call	0x5074	; 0x5074 <strncasecmp_P>
    4e3c:	89 2b       	or	r24, r25
    4e3e:	69 f4       	brne	.+26     	; 0x4e5a <strtod+0xd2>
    4e40:	a1 14       	cp	r10, r1
    4e42:	b1 04       	cpc	r11, r1
    4e44:	29 f4       	brne	.+10     	; 0x4e50 <strtod+0xc8>
    4e46:	70 e0       	ldi	r23, 0x00	; 0
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	80 ec       	ldi	r24, 0xC0	; 192
    4e4c:	6f e7       	ldi	r22, 0x7F	; 127
    4e4e:	f7 c0       	rjmp	.+494    	; 0x503e <strtod+0x2b6>
    4e50:	22 96       	adiw	r28, 0x02	; 2
    4e52:	f5 01       	movw	r30, r10
    4e54:	d1 83       	std	Z+1, r29	; 0x01
    4e56:	c0 83       	st	Z, r28
    4e58:	f6 cf       	rjmp	.-20     	; 0x4e46 <strtod+0xbe>
    4e5a:	88 24       	eor	r8, r8
    4e5c:	99 24       	eor	r9, r9
    4e5e:	40 e0       	ldi	r20, 0x00	; 0
    4e60:	50 e0       	ldi	r21, 0x00	; 0
    4e62:	60 e0       	ldi	r22, 0x00	; 0
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	ef 2d       	mov	r30, r15
    4e68:	e0 53       	subi	r30, 0x30	; 48
    4e6a:	ea 30       	cpi	r30, 0x0A	; 10
    4e6c:	a0 f5       	brcc	.+104    	; 0x4ed6 <strtod+0x14e>
    4e6e:	f2 e0       	ldi	r31, 0x02	; 2
    4e70:	ef 2a       	or	r14, r31
    4e72:	8e 2d       	mov	r24, r14
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	9c 01       	movw	r18, r24
    4e78:	28 70       	andi	r18, 0x08	; 8
    4e7a:	30 70       	andi	r19, 0x00	; 0
    4e7c:	e2 fe       	sbrs	r14, 2
    4e7e:	06 c0       	rjmp	.+12     	; 0x4e8c <strtod+0x104>
    4e80:	23 2b       	or	r18, r19
    4e82:	79 f5       	brne	.+94     	; 0x4ee2 <strtod+0x15a>
    4e84:	08 94       	sec
    4e86:	81 1c       	adc	r8, r1
    4e88:	91 1c       	adc	r9, r1
    4e8a:	2b c0       	rjmp	.+86     	; 0x4ee2 <strtod+0x15a>
    4e8c:	23 2b       	or	r18, r19
    4e8e:	19 f0       	breq	.+6      	; 0x4e96 <strtod+0x10e>
    4e90:	08 94       	sec
    4e92:	81 08       	sbc	r8, r1
    4e94:	91 08       	sbc	r9, r1
    4e96:	db 01       	movw	r26, r22
    4e98:	ca 01       	movw	r24, r20
    4e9a:	12 e0       	ldi	r17, 0x02	; 2
    4e9c:	88 0f       	add	r24, r24
    4e9e:	99 1f       	adc	r25, r25
    4ea0:	aa 1f       	adc	r26, r26
    4ea2:	bb 1f       	adc	r27, r27
    4ea4:	1a 95       	dec	r17
    4ea6:	d1 f7       	brne	.-12     	; 0x4e9c <strtod+0x114>
    4ea8:	48 0f       	add	r20, r24
    4eaa:	59 1f       	adc	r21, r25
    4eac:	6a 1f       	adc	r22, r26
    4eae:	7b 1f       	adc	r23, r27
    4eb0:	44 0f       	add	r20, r20
    4eb2:	55 1f       	adc	r21, r21
    4eb4:	66 1f       	adc	r22, r22
    4eb6:	77 1f       	adc	r23, r23
    4eb8:	4e 0f       	add	r20, r30
    4eba:	51 1d       	adc	r21, r1
    4ebc:	61 1d       	adc	r22, r1
    4ebe:	71 1d       	adc	r23, r1
    4ec0:	48 39       	cpi	r20, 0x98	; 152
    4ec2:	29 e9       	ldi	r18, 0x99	; 153
    4ec4:	52 07       	cpc	r21, r18
    4ec6:	29 e9       	ldi	r18, 0x99	; 153
    4ec8:	62 07       	cpc	r22, r18
    4eca:	29 e1       	ldi	r18, 0x19	; 25
    4ecc:	72 07       	cpc	r23, r18
    4ece:	48 f0       	brcs	.+18     	; 0x4ee2 <strtod+0x15a>
    4ed0:	84 e0       	ldi	r24, 0x04	; 4
    4ed2:	e8 2a       	or	r14, r24
    4ed4:	06 c0       	rjmp	.+12     	; 0x4ee2 <strtod+0x15a>
    4ed6:	ee 3f       	cpi	r30, 0xFE	; 254
    4ed8:	31 f4       	brne	.+12     	; 0x4ee6 <strtod+0x15e>
    4eda:	e3 fc       	sbrc	r14, 3
    4edc:	39 c0       	rjmp	.+114    	; 0x4f50 <strtod+0x1c8>
    4ede:	98 e0       	ldi	r25, 0x08	; 8
    4ee0:	e9 2a       	or	r14, r25
    4ee2:	f9 90       	ld	r15, Y+
    4ee4:	c0 cf       	rjmp	.-128    	; 0x4e66 <strtod+0xde>
    4ee6:	e5 33       	cpi	r30, 0x35	; 53
    4ee8:	11 f0       	breq	.+4      	; 0x4eee <strtod+0x166>
    4eea:	e5 31       	cpi	r30, 0x15	; 21
    4eec:	89 f5       	brne	.+98     	; 0x4f50 <strtod+0x1c8>
    4eee:	29 91       	ld	r18, Y+
    4ef0:	2d 32       	cpi	r18, 0x2D	; 45
    4ef2:	19 f4       	brne	.+6      	; 0x4efa <strtod+0x172>
    4ef4:	e0 e1       	ldi	r30, 0x10	; 16
    4ef6:	ee 2a       	or	r14, r30
    4ef8:	05 c0       	rjmp	.+10     	; 0x4f04 <strtod+0x17c>
    4efa:	2b 32       	cpi	r18, 0x2B	; 43
    4efc:	19 f0       	breq	.+6      	; 0x4f04 <strtod+0x17c>
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	03 c0       	rjmp	.+6      	; 0x4f0a <strtod+0x182>
    4f04:	29 91       	ld	r18, Y+
    4f06:	82 e0       	ldi	r24, 0x02	; 2
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	e2 2f       	mov	r30, r18
    4f0c:	e0 53       	subi	r30, 0x30	; 48
    4f0e:	ea 30       	cpi	r30, 0x0A	; 10
    4f10:	18 f0       	brcs	.+6      	; 0x4f18 <strtod+0x190>
    4f12:	c8 1b       	sub	r28, r24
    4f14:	d9 0b       	sbc	r29, r25
    4f16:	1c c0       	rjmp	.+56     	; 0x4f50 <strtod+0x1c8>
    4f18:	20 e0       	ldi	r18, 0x00	; 0
    4f1a:	30 e0       	ldi	r19, 0x00	; 0
    4f1c:	fc e0       	ldi	r31, 0x0C	; 12
    4f1e:	20 38       	cpi	r18, 0x80	; 128
    4f20:	3f 07       	cpc	r19, r31
    4f22:	5c f4       	brge	.+22     	; 0x4f3a <strtod+0x1b2>
    4f24:	c9 01       	movw	r24, r18
    4f26:	88 0f       	add	r24, r24
    4f28:	99 1f       	adc	r25, r25
    4f2a:	88 0f       	add	r24, r24
    4f2c:	99 1f       	adc	r25, r25
    4f2e:	28 0f       	add	r18, r24
    4f30:	39 1f       	adc	r19, r25
    4f32:	22 0f       	add	r18, r18
    4f34:	33 1f       	adc	r19, r19
    4f36:	2e 0f       	add	r18, r30
    4f38:	31 1d       	adc	r19, r1
    4f3a:	e9 91       	ld	r30, Y+
    4f3c:	e0 53       	subi	r30, 0x30	; 48
    4f3e:	ea 30       	cpi	r30, 0x0A	; 10
    4f40:	68 f3       	brcs	.-38     	; 0x4f1c <strtod+0x194>
    4f42:	e4 fe       	sbrs	r14, 4
    4f44:	03 c0       	rjmp	.+6      	; 0x4f4c <strtod+0x1c4>
    4f46:	30 95       	com	r19
    4f48:	21 95       	neg	r18
    4f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f4c:	82 0e       	add	r8, r18
    4f4e:	93 1e       	adc	r9, r19
    4f50:	ce 2c       	mov	r12, r14
    4f52:	dd 24       	eor	r13, r13
    4f54:	e1 fe       	sbrs	r14, 1
    4f56:	07 c0       	rjmp	.+14     	; 0x4f66 <strtod+0x1de>
    4f58:	a1 14       	cp	r10, r1
    4f5a:	b1 04       	cpc	r11, r1
    4f5c:	21 f0       	breq	.+8      	; 0x4f66 <strtod+0x1de>
    4f5e:	21 97       	sbiw	r28, 0x01	; 1
    4f60:	f5 01       	movw	r30, r10
    4f62:	d1 83       	std	Z+1, r29	; 0x01
    4f64:	c0 83       	st	Z, r28
    4f66:	cb 01       	movw	r24, r22
    4f68:	ba 01       	movw	r22, r20
    4f6a:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__floatunsisf>
    4f6e:	7b 01       	movw	r14, r22
    4f70:	8c 01       	movw	r16, r24
    4f72:	f3 e0       	ldi	r31, 0x03	; 3
    4f74:	cf 22       	and	r12, r31
    4f76:	dd 24       	eor	r13, r13
    4f78:	23 e0       	ldi	r18, 0x03	; 3
    4f7a:	c2 16       	cp	r12, r18
    4f7c:	d1 04       	cpc	r13, r1
    4f7e:	21 f4       	brne	.+8      	; 0x4f88 <strtod+0x200>
    4f80:	17 fb       	bst	r17, 7
    4f82:	10 95       	com	r17
    4f84:	17 f9       	bld	r17, 7
    4f86:	10 95       	com	r17
    4f88:	57 01       	movw	r10, r14
    4f8a:	68 01       	movw	r12, r16
    4f8c:	c8 01       	movw	r24, r16
    4f8e:	b7 01       	movw	r22, r14
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	40 e0       	ldi	r20, 0x00	; 0
    4f96:	50 e0       	ldi	r21, 0x00	; 0
    4f98:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    4f9c:	88 23       	and	r24, r24
    4f9e:	09 f4       	brne	.+2      	; 0x4fa2 <strtod+0x21a>
    4fa0:	4a c0       	rjmp	.+148    	; 0x5036 <strtod+0x2ae>
    4fa2:	97 fe       	sbrs	r9, 7
    4fa4:	0d c0       	rjmp	.+26     	; 0x4fc0 <strtod+0x238>
    4fa6:	21 e7       	ldi	r18, 0x71	; 113
    4fa8:	e2 2e       	mov	r14, r18
    4faa:	25 e0       	ldi	r18, 0x05	; 5
    4fac:	f2 2e       	mov	r15, r18
    4fae:	90 94       	com	r9
    4fb0:	81 94       	neg	r8
    4fb2:	91 08       	sbc	r9, r1
    4fb4:	93 94       	inc	r9
    4fb6:	c0 e2       	ldi	r28, 0x20	; 32
    4fb8:	d0 e0       	ldi	r29, 0x00	; 0
    4fba:	00 e0       	ldi	r16, 0x00	; 0
    4fbc:	10 e0       	ldi	r17, 0x00	; 0
    4fbe:	12 c0       	rjmp	.+36     	; 0x4fe4 <strtod+0x25c>
    4fc0:	99 e8       	ldi	r25, 0x89	; 137
    4fc2:	e9 2e       	mov	r14, r25
    4fc4:	95 e0       	ldi	r25, 0x05	; 5
    4fc6:	f9 2e       	mov	r15, r25
    4fc8:	f6 cf       	rjmp	.-20     	; 0x4fb6 <strtod+0x22e>
    4fca:	f7 01       	movw	r30, r14
    4fcc:	25 91       	lpm	r18, Z+
    4fce:	35 91       	lpm	r19, Z+
    4fd0:	45 91       	lpm	r20, Z+
    4fd2:	54 91       	lpm	r21, Z+
    4fd4:	c6 01       	movw	r24, r12
    4fd6:	b5 01       	movw	r22, r10
    4fd8:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <__mulsf3>
    4fdc:	5b 01       	movw	r10, r22
    4fde:	6c 01       	movw	r12, r24
    4fe0:	8c 1a       	sub	r8, r28
    4fe2:	9d 0a       	sbc	r9, r29
    4fe4:	8c 16       	cp	r8, r28
    4fe6:	9d 06       	cpc	r9, r29
    4fe8:	84 f7       	brge	.-32     	; 0x4fca <strtod+0x242>
    4fea:	d5 95       	asr	r29
    4fec:	c7 95       	ror	r28
    4fee:	0f 5f       	subi	r16, 0xFF	; 255
    4ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff2:	06 30       	cpi	r16, 0x06	; 6
    4ff4:	11 05       	cpc	r17, r1
    4ff6:	29 f0       	breq	.+10     	; 0x5002 <strtod+0x27a>
    4ff8:	8c ef       	ldi	r24, 0xFC	; 252
    4ffa:	9f ef       	ldi	r25, 0xFF	; 255
    4ffc:	e8 0e       	add	r14, r24
    4ffe:	f9 1e       	adc	r15, r25
    5000:	f1 cf       	rjmp	.-30     	; 0x4fe4 <strtod+0x25c>
    5002:	c5 01       	movw	r24, r10
    5004:	d6 01       	movw	r26, r12
    5006:	7c 01       	movw	r14, r24
    5008:	8d 01       	movw	r16, r26
    500a:	8c 2d       	mov	r24, r12
    500c:	88 0f       	add	r24, r24
    500e:	8d 2d       	mov	r24, r13
    5010:	88 1f       	adc	r24, r24
    5012:	8f 3f       	cpi	r24, 0xFF	; 255
    5014:	51 f0       	breq	.+20     	; 0x502a <strtod+0x2a2>
    5016:	c6 01       	movw	r24, r12
    5018:	b5 01       	movw	r22, r10
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	40 e0       	ldi	r20, 0x00	; 0
    5020:	50 e0       	ldi	r21, 0x00	; 0
    5022:	0e 94 36 23 	call	0x466c	; 0x466c <__cmpsf2>
    5026:	88 23       	and	r24, r24
    5028:	31 f4       	brne	.+12     	; 0x5036 <strtod+0x2ae>
    502a:	82 e2       	ldi	r24, 0x22	; 34
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	90 93 2f 05 	sts	0x052F, r25
    5032:	80 93 2e 05 	sts	0x052E, r24
    5036:	7e 2d       	mov	r23, r14
    5038:	9f 2d       	mov	r25, r15
    503a:	80 2f       	mov	r24, r16
    503c:	61 2f       	mov	r22, r17
    503e:	27 2f       	mov	r18, r23
    5040:	39 2f       	mov	r19, r25
    5042:	48 2f       	mov	r20, r24
    5044:	56 2f       	mov	r21, r22
    5046:	b9 01       	movw	r22, r18
    5048:	ca 01       	movw	r24, r20
    504a:	df 91       	pop	r29
    504c:	cf 91       	pop	r28
    504e:	1f 91       	pop	r17
    5050:	0f 91       	pop	r16
    5052:	ff 90       	pop	r15
    5054:	ef 90       	pop	r14
    5056:	df 90       	pop	r13
    5058:	cf 90       	pop	r12
    505a:	bf 90       	pop	r11
    505c:	af 90       	pop	r10
    505e:	9f 90       	pop	r9
    5060:	8f 90       	pop	r8
    5062:	08 95       	ret

00005064 <isspace>:
    5064:	91 11       	cpse	r25, r1
    5066:	1e c0       	rjmp	.+60     	; 0x50a4 <__ctype_isfalse>
    5068:	80 32       	cpi	r24, 0x20	; 32
    506a:	19 f0       	breq	.+6      	; 0x5072 <isspace+0xe>
    506c:	89 50       	subi	r24, 0x09	; 9
    506e:	85 50       	subi	r24, 0x05	; 5
    5070:	d0 f7       	brcc	.-12     	; 0x5066 <isspace+0x2>
    5072:	08 95       	ret

00005074 <strncasecmp_P>:
    5074:	fb 01       	movw	r30, r22
    5076:	dc 01       	movw	r26, r24
    5078:	41 50       	subi	r20, 0x01	; 1
    507a:	50 40       	sbci	r21, 0x00	; 0
    507c:	88 f0       	brcs	.+34     	; 0x50a0 <strncasecmp_P+0x2c>
    507e:	8d 91       	ld	r24, X+
    5080:	81 34       	cpi	r24, 0x41	; 65
    5082:	1c f0       	brlt	.+6      	; 0x508a <strncasecmp_P+0x16>
    5084:	8b 35       	cpi	r24, 0x5B	; 91
    5086:	0c f4       	brge	.+2      	; 0x508a <strncasecmp_P+0x16>
    5088:	80 5e       	subi	r24, 0xE0	; 224
    508a:	65 91       	lpm	r22, Z+
    508c:	61 34       	cpi	r22, 0x41	; 65
    508e:	1c f0       	brlt	.+6      	; 0x5096 <strncasecmp_P+0x22>
    5090:	6b 35       	cpi	r22, 0x5B	; 91
    5092:	0c f4       	brge	.+2      	; 0x5096 <strncasecmp_P+0x22>
    5094:	60 5e       	subi	r22, 0xE0	; 224
    5096:	86 1b       	sub	r24, r22
    5098:	61 11       	cpse	r22, r1
    509a:	71 f3       	breq	.-36     	; 0x5078 <strncasecmp_P+0x4>
    509c:	99 0b       	sbc	r25, r25
    509e:	08 95       	ret
    50a0:	88 1b       	sub	r24, r24
    50a2:	fc cf       	rjmp	.-8      	; 0x509c <strncasecmp_P+0x28>

000050a4 <__ctype_isfalse>:
    50a4:	99 27       	eor	r25, r25
    50a6:	88 27       	eor	r24, r24

000050a8 <__ctype_istrue>:
    50a8:	08 95       	ret

000050aa <_exit>:
    50aa:	f8 94       	cli

000050ac <__stop_program>:
    50ac:	ff cf       	rjmp	.-2      	; 0x50ac <__stop_program>
