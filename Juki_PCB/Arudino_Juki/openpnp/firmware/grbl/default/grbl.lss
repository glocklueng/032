
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000635a  000063ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000635a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f2  00800206  00800206  000063f4  2**0
                  ALLOC
  3 .debug_aranges 00000688  00000000  00000000  000063f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ccd  00000000  00000000  00006a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005488  00000000  00000000  00007749  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bc3  00000000  00000000  0000cbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004d9f  00000000  00000000  0000e794  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ab0  00000000  00000000  00013534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001618  00000000  00000000  00013fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000359a  00000000  00000000  000155fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb8  00000000  00000000  00018b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 03 	jmp	0x668	; 0x668 <__ctors_end>
       4:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
       8:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
       c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      10:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      14:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      18:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      1c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      20:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      24:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      28:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      2c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      30:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      34:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      38:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      3c:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__vector_15>
      40:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      44:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__vector_17>
      48:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      4c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      50:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      54:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      58:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      5c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      60:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      64:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__vector_25>
      68:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      6c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      70:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      74:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      78:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      7c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      80:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__vector_32>
      84:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      88:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      8c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      90:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      94:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      98:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      9c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      a0:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      a4:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      a8:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      ac:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      b0:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      b4:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      b8:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      bc:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      c0:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      c4:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      c8:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      cc:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      d0:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      d4:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      d8:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      dc:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      e0:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__bad_interrupt>
      e4:	8e 07       	cpc	r24, r30
      e6:	8a 07       	cpc	r24, r26
      e8:	9e 07       	cpc	r25, r30
      ea:	9a 07       	cpc	r25, r26
      ec:	87 07       	cpc	r24, r23
      ee:	2c 07       	cpc	r18, r28
      f0:	2c 07       	cpc	r18, r28
      f2:	2c 07       	cpc	r18, r28
      f4:	2c 07       	cpc	r18, r28
      f6:	2c 07       	cpc	r18, r28
      f8:	2c 07       	cpc	r18, r28
      fa:	2c 07       	cpc	r18, r28
      fc:	2c 07       	cpc	r18, r28
      fe:	2c 07       	cpc	r18, r28
     100:	2c 07       	cpc	r18, r28
     102:	2c 07       	cpc	r18, r28
     104:	2c 07       	cpc	r18, r28
     106:	91 07       	cpc	r25, r17
     108:	c0 07       	cpc	r28, r16
     10a:	b7 07       	cpc	r27, r23
     10c:	b3 07       	cpc	r27, r19
     10e:	b0 07       	cpc	r27, r16
     110:	2c 07       	cpc	r18, r28
     112:	2c 07       	cpc	r18, r28
     114:	2c 07       	cpc	r18, r28
     116:	2c 07       	cpc	r18, r28
     118:	2c 07       	cpc	r18, r28
     11a:	2c 07       	cpc	r18, r28
     11c:	ad 07       	cpc	r26, r29
     11e:	2c 07       	cpc	r18, r28
     120:	ad 07       	cpc	r26, r29
     122:	2c 07       	cpc	r18, r28
     124:	2c 07       	cpc	r18, r28
     126:	2c 07       	cpc	r18, r28
     128:	2c 07       	cpc	r18, r28
     12a:	2c 07       	cpc	r18, r28
     12c:	2c 07       	cpc	r18, r28
     12e:	2c 07       	cpc	r18, r28
     130:	2c 07       	cpc	r18, r28
     132:	2c 07       	cpc	r18, r28
     134:	2c 07       	cpc	r18, r28
     136:	2c 07       	cpc	r18, r28
     138:	2c 07       	cpc	r18, r28
     13a:	2c 07       	cpc	r18, r28
     13c:	2c 07       	cpc	r18, r28
     13e:	2c 07       	cpc	r18, r28
     140:	2c 07       	cpc	r18, r28
     142:	2c 07       	cpc	r18, r28
     144:	2c 07       	cpc	r18, r28
     146:	2c 07       	cpc	r18, r28
     148:	2c 07       	cpc	r18, r28
     14a:	2c 07       	cpc	r18, r28
     14c:	2c 07       	cpc	r18, r28
     14e:	aa 07       	cpc	r26, r26
     150:	2c 07       	cpc	r18, r28
     152:	2c 07       	cpc	r18, r28
     154:	2c 07       	cpc	r18, r28
     156:	2c 07       	cpc	r18, r28
     158:	2c 07       	cpc	r18, r28
     15a:	2c 07       	cpc	r18, r28
     15c:	2c 07       	cpc	r18, r28
     15e:	2c 07       	cpc	r18, r28
     160:	2c 07       	cpc	r18, r28
     162:	2c 07       	cpc	r18, r28
     164:	2c 07       	cpc	r18, r28
     166:	2c 07       	cpc	r18, r28
     168:	2c 07       	cpc	r18, r28
     16a:	2c 07       	cpc	r18, r28
     16c:	2c 07       	cpc	r18, r28
     16e:	2c 07       	cpc	r18, r28
     170:	2c 07       	cpc	r18, r28
     172:	2c 07       	cpc	r18, r28
     174:	2c 07       	cpc	r18, r28
     176:	2c 07       	cpc	r18, r28
     178:	2c 07       	cpc	r18, r28
     17a:	2c 07       	cpc	r18, r28
     17c:	2c 07       	cpc	r18, r28
     17e:	2c 07       	cpc	r18, r28
     180:	2c 07       	cpc	r18, r28
     182:	2c 07       	cpc	r18, r28
     184:	a6 07       	cpc	r26, r22
     186:	2c 07       	cpc	r18, r28
     188:	2c 07       	cpc	r18, r28
     18a:	2c 07       	cpc	r18, r28
     18c:	2c 07       	cpc	r18, r28
     18e:	2c 07       	cpc	r18, r28
     190:	2c 07       	cpc	r18, r28
     192:	2c 07       	cpc	r18, r28
     194:	2c 07       	cpc	r18, r28
     196:	2c 07       	cpc	r18, r28
     198:	a2 07       	cpc	r26, r18
     19a:	d3 07       	cpc	r29, r19
     19c:	d0 07       	cpc	r29, r16
     19e:	cc 07       	cpc	r28, r28
     1a0:	c9 07       	cpc	r28, r25
     1a2:	e8 07       	cpc	r30, r24
     1a4:	e8 07       	cpc	r30, r24
     1a6:	e4 07       	cpc	r30, r20
     1a8:	dd 07       	cpc	r29, r29
     1aa:	d6 07       	cpc	r29, r22
     1ac:	1b 08       	sbc	r1, r11
     1ae:	2c 07       	cpc	r18, r28
     1b0:	2c 07       	cpc	r18, r28
     1b2:	14 08       	sbc	r1, r4
     1b4:	0f 08       	sbc	r0, r15
     1b6:	08 08       	sbc	r0, r8
     1b8:	01 08       	sbc	r0, r1
     1ba:	fa 07       	cpc	r31, r26
     1bc:	f3 07       	cpc	r31, r19
     1be:	ec 07       	cpc	r30, r28
     1c0:	7b 08       	sbc	r7, r11
     1c2:	74 08       	sbc	r7, r4
     1c4:	6d 08       	sbc	r6, r13
     1c6:	66 08       	sbc	r6, r6
     1c8:	5f 08       	sbc	r5, r15
     1ca:	58 08       	sbc	r5, r8
     1cc:	53 08       	sbc	r5, r3
     1ce:	4e 08       	sbc	r4, r14
     1d0:	49 08       	sbc	r4, r9
     1d2:	42 08       	sbc	r4, r2
     1d4:	3d 08       	sbc	r3, r13
     1d6:	36 08       	sbc	r3, r6
     1d8:	83 07       	cpc	r24, r19
     1da:	2f 08       	sbc	r2, r15
     1dc:	25 08       	sbc	r2, r5
     1de:	e4 07       	cpc	r30, r20
     1e0:	20 08       	sbc	r2, r0
     1e2:	2c 07       	cpc	r18, r28
     1e4:	2c 07       	cpc	r18, r28
     1e6:	2c 07       	cpc	r18, r28
     1e8:	2c 07       	cpc	r18, r28
     1ea:	2c 07       	cpc	r18, r28
     1ec:	2c 07       	cpc	r18, r28
     1ee:	2c 07       	cpc	r18, r28
     1f0:	2c 07       	cpc	r18, r28
     1f2:	2c 07       	cpc	r18, r28
     1f4:	2c 07       	cpc	r18, r28
     1f6:	2c 07       	cpc	r18, r28
     1f8:	2c 07       	cpc	r18, r28
     1fa:	2c 07       	cpc	r18, r28
     1fc:	2c 07       	cpc	r18, r28
     1fe:	2c 07       	cpc	r18, r28
     200:	2c 07       	cpc	r18, r28
     202:	2c 07       	cpc	r18, r28
     204:	2c 07       	cpc	r18, r28
     206:	2c 07       	cpc	r18, r28
     208:	2c 07       	cpc	r18, r28
     20a:	2c 07       	cpc	r18, r28
     20c:	2c 07       	cpc	r18, r28
     20e:	2c 07       	cpc	r18, r28
     210:	2c 07       	cpc	r18, r28
     212:	2c 07       	cpc	r18, r28
     214:	2c 07       	cpc	r18, r28
     216:	2c 07       	cpc	r18, r28
     218:	2c 07       	cpc	r18, r28
     21a:	e4 07       	cpc	r30, r20
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.1950>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.1948>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.1946>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1944>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1942>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1940>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1938>:
     273:	0d 0a 00                                            ...

00000276 <__c.1936>:
     276:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

00000282 <__c.1934>:
     282:	0d 0a 00                                            ...

00000285 <__c.1932>:
     285:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000290 <__c.1930>:
     290:	0d 0a 00                                            ...

00000293 <__c.1928>:
     293:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000002a3 <__c.1926>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1924>:
     2a6:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000002b5 <__c.1922>:
     2b5:	0d 0a 00                                            ...

000002b8 <__c.1920>:
     2b8:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000002c5 <__c.1918>:
     2c5:	0d 0a 00                                            ...

000002c8 <__c.1916>:
     2c8:	74 6f 5f 6d 69 6c 6c 69 6d 65 74 65 72 73 28 31     to_millimeters(1
     2d8:	30 30 29 20 3d 20 00                                00) = .

000002df <__c.1914>:
     2df:	0d 0a 00                                            ...

000002e2 <__c.1912>:
     2e2:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

000002f1 <__c.1910>:
     2f1:	0d 0a 00                                            ...

000002f4 <__c.1908>:
     2f4:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

000002fe <__c.1906>:
     2fe:	0d 0a 00                                            ...

00000301 <__c.1904>:
     301:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     311:	3d 20 00                                            = .

00000314 <__c.1902>:
     314:	0d 0a 00                                            ...

00000317 <__c.1900>:
     317:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     327:	20 00                                                .

00000329 <__c.1639>:
     329:	6f 6b 0a 00                                         ok..

0000032d <__c.1725>:
     32d:	0a 00                                               ..

0000032f <__c.1723>:
     32f:	65 72 72 6f 72 3a 20 00                             error: .

00000337 <__c.1719>:
     337:	65 72 72 6f 72 3a 20 4e 6f 74 20 68 6f 6d 65 64     error: Not homed
     347:	0a 00                                               ..

00000349 <__c.1716>:
     349:	65 72 72 6f 72 3a 20 43 6f 6d 6d 61 6e 64 20 46     error: Command F
     359:	61 69 6c 65 64 0a 00                                ailed..

00000360 <__c.1713>:
     360:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     370:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 00              point error..

0000037d <__c.1710>:
     37d:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     38d:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 00           ed statement..

0000039b <__c.1707>:
     39b:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     3ab:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 00     command letter..

000003bb <__c.1704>:
     3bb:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     3cb:	72 20 66 6f 72 6d 61 74 0a 00                       r format..

000003d5 <__c.1700>:
     3d5:	6f 6b 0d 00                                         ok..

000003d9 <__c.1734>:
     3d9:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     3e9:	6e 67 0d 0a 00                                      ng...

000003ee <__c.1732>:
     3ee:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     3fe:	72 0d 0a 00                                         r...

00000402 <__c.1689>:
     402:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     412:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     422:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     432:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     442:	0d 0a 00                                            ...

00000445 <__c.1687>:
     445:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     455:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     465:	61 62 6c 65 64 29 0d 0a 00                          abled)...

0000046e <__c.1685>:
     46e:	24 31 30 30 30 20 3d 20 00                          $1000 = .

00000477 <__c.1683>:
     477:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     487:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     497:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     4a7:	2f 6d 69 6e 29 0d 0a 00                             /min)...

000004af <__c.1681>:
     4af:	24 39 20 3d 20 00                                   $9 = .

000004b5 <__c.1679>:
     4b5:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     4c5:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000004d3 <__c.1677>:
     4d3:	24 38 20 3d 20 00                                   $8 = .

000004d9 <__c.1675>:
     4d9:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     4e9:	29 0d 0a 00                                         )...

000004ed <__c.1673>:
     4ed:	24 37 20 3d 20 00                                   $7 = .

000004f3 <__c.1671>:
     4f3:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     503:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000511 <__c.1669>:
     511:	24 36 20 3d 20 00                                   $6 = .

00000517 <__c.1667>:
     517:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     527:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000535 <__c.1665>:
     535:	24 35 20 3d 20 00                                   $5 = .

0000053b <__c.1663>:
     53b:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     54b:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

00000558 <__c.1661>:
     558:	24 34 20 3d 20 00                                   $4 = .

0000055e <__c.1659>:
     55e:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     56e:	0a 00                                               ..

00000570 <__c.1657>:
     570:	24 33 20 3d 20 00                                   $3 = .

00000576 <__c.1655>:
     576:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

00000586 <__c.1653>:
     586:	24 32 20 3d 20 00                                   $2 = .

0000058c <__c.1651>:
     58c:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

0000059c <__c.1649>:
     59c:	24 31 20 3d 20 00                                   $1 = .

000005a2 <__c.1647>:
     5a2:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000005b2 <__c.1645>:
     5b2:	24 30 20 3d 20 00                                   $0 = .

000005b8 <__c.1643>:
     5b8:	0d 0a 00                                            ...

000005bb <__c.1641>:
     5bb:	30 2e 37 36 50 42 00                                0.76PB.

000005c2 <__c.1639>:
     5c2:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000005ce <__c.2207>:
     5ce:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

000005dc <__c.2068>:
     5dc:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000005e6 <__c.2086>:
     5e6:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

000005f0 <__c.1843>:
     5f0:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     600:	0d 00                                               ..

00000602 <__c.1878>:
     602:	6e 6f 0a 00                                         no..

00000606 <__c.1876>:
     606:	79 65 73 0a 00                                      yes..

0000060b <__c.1845>:
     60b:	45 72 72 6f 72 3a 20 4f 53 43 4f 4b 49 52 51 20     Error: OSCOKIRQ 
     61b:	66 61 69 6c 65 64 20 74 6f 20 61 73 73 65 72 74     failed to assert
     62b:	0a 00                                               ..

0000062d <pstr_inf>:
     62d:	49 4e 46                                            INF

00000630 <pstr_inity>:
     630:	49 4e 49 54 59                                      INITY

00000635 <pstr_nan>:
     635:	4e 41 4e                                            NAN

00000638 <pwr_m10>:
     638:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     648:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000650 <pwr_p10>:
     650:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     660:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000668 <__ctors_end>:
     668:	11 24       	eor	r1, r1
     66a:	1f be       	out	0x3f, r1	; 63
     66c:	cf ef       	ldi	r28, 0xFF	; 255
     66e:	d1 e2       	ldi	r29, 0x21	; 33
     670:	de bf       	out	0x3e, r29	; 62
     672:	cd bf       	out	0x3d, r28	; 61
     674:	00 e0       	ldi	r16, 0x00	; 0
     676:	0c bf       	out	0x3c, r16	; 60

00000678 <__do_copy_data>:
     678:	12 e0       	ldi	r17, 0x02	; 2
     67a:	a0 e0       	ldi	r26, 0x00	; 0
     67c:	b2 e0       	ldi	r27, 0x02	; 2
     67e:	ea e5       	ldi	r30, 0x5A	; 90
     680:	f3 e6       	ldi	r31, 0x63	; 99
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	0b bf       	out	0x3b, r16	; 59
     686:	02 c0       	rjmp	.+4      	; 0x68c <__do_copy_data+0x14>
     688:	07 90       	elpm	r0, Z+
     68a:	0d 92       	st	X+, r0
     68c:	a6 30       	cpi	r26, 0x06	; 6
     68e:	b1 07       	cpc	r27, r17
     690:	d9 f7       	brne	.-10     	; 0x688 <__do_copy_data+0x10>

00000692 <__do_clear_bss>:
     692:	16 e0       	ldi	r17, 0x06	; 6
     694:	a6 e0       	ldi	r26, 0x06	; 6
     696:	b2 e0       	ldi	r27, 0x02	; 2
     698:	01 c0       	rjmp	.+2      	; 0x69c <.do_clear_bss_start>

0000069a <.do_clear_bss_loop>:
     69a:	1d 92       	st	X+, r1

0000069c <.do_clear_bss_start>:
     69c:	a8 3f       	cpi	r26, 0xF8	; 248
     69e:	b1 07       	cpc	r27, r17
     6a0:	e1 f7       	brne	.-8      	; 0x69a <.do_clear_bss_loop>
     6a2:	0e 94 cf 0a 	call	0x159e	; 0x159e <main>
     6a6:	0c 94 ab 31 	jmp	0x6356	; 0x6356 <_exit>

000006aa <__bad_interrupt>:
     6aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006ae <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     6ae:	24 9a       	sbi	0x04, 4	; 4
}
     6b0:	08 95       	ret

000006b2 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     6b2:	89 2b       	or	r24, r25
     6b4:	11 f4       	brne	.+4      	; 0x6ba <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     6b6:	2c 98       	cbi	0x05, 4	; 5
     6b8:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     6ba:	2c 9a       	sbi	0x05, 4	; 5
     6bc:	08 95       	ret

000006be <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6be:	f9 99       	sbic	0x1f, 1	; 31
     6c0:	fe cf       	rjmp	.-4      	; 0x6be <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     6c2:	92 bd       	out	0x22, r25	; 34
     6c4:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     6ca:	80 b5       	in	r24, 0x20	; 32
}
     6cc:	08 95       	ret

000006ce <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     6ce:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6d0:	f9 99       	sbic	0x1f, 1	; 31
     6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     6d4:	92 bd       	out	0x22, r25	; 34
     6d6:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     6dc:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     6de:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     6e0:	89 2f       	mov	r24, r25
     6e2:	86 23       	and	r24, r22
     6e4:	41 f0       	breq	.+16     	; 0x6f6 <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     6e6:	6f 3f       	cpi	r22, 0xFF	; 255
     6e8:	71 f0       	breq	.+28     	; 0x706 <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     6ea:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     6f0:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6f2:	78 94       	sei
}
     6f4:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     6f6:	99 23       	and	r25, r25
     6f8:	e1 f3       	breq	.-8      	; 0x6f2 <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6fa:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6fc:	84 e2       	ldi	r24, 0x24	; 36
     6fe:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     700:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     702:	78 94       	sei
}
     704:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     706:	84 e1       	ldi	r24, 0x14	; 20
     708:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     70a:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     70c:	78 94       	sei
}
     70e:	08 95       	ret

00000710 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	6c 01       	movw	r12, r24
     724:	8b 01       	movw	r16, r22
     726:	5a 01       	movw	r10, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     728:	41 15       	cp	r20, r1
     72a:	51 05       	cpc	r21, r1
     72c:	59 f1       	breq	.+86     	; 0x784 <memcpy_to_eeprom_with_checksum+0x74>
     72e:	ff 24       	eor	r15, r15
     730:	c0 e0       	ldi	r28, 0x00	; 0
     732:	d0 e0       	ldi	r29, 0x00	; 0
     734:	0d c0       	rjmp	.+26     	; 0x750 <memcpy_to_eeprom_with_checksum+0x40>
    checksum = (checksum << 1) || (checksum >> 7);
     736:	21 e0       	ldi	r18, 0x01	; 1
    checksum += *source;
     738:	f8 01       	movw	r30, r16
     73a:	60 81       	ld	r22, Z
     73c:	f2 2e       	mov	r15, r18
     73e:	f6 0e       	add	r15, r22
    eeprom_put_char(destination++, *(source++)); 
     740:	0e 94 67 03 	call	0x6ce	; 0x6ce <eeprom_put_char>
     744:	21 96       	adiw	r28, 0x01	; 1
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     746:	ca 15       	cp	r28, r10
     748:	db 05       	cpc	r29, r11
     74a:	61 f0       	breq	.+24     	; 0x764 <memcpy_to_eeprom_with_checksum+0x54>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     74c:	0f 5f       	subi	r16, 0xFF	; 255
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     750:	ce 01       	movw	r24, r28
     752:	8c 0d       	add	r24, r12
     754:	9d 1d       	adc	r25, r13
    checksum = (checksum << 1) || (checksum >> 7);
     756:	ff 20       	and	r15, r15
     758:	71 f7       	brne	.-36     	; 0x736 <memcpy_to_eeprom_with_checksum+0x26>
     75a:	2f 2d       	mov	r18, r15
     75c:	22 1f       	adc	r18, r18
     75e:	22 27       	eor	r18, r18
     760:	22 1f       	adc	r18, r18
     762:	ea cf       	rjmp	.-44     	; 0x738 <memcpy_to_eeprom_with_checksum+0x28>
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     764:	cc 0e       	add	r12, r28
     766:	dd 1e       	adc	r13, r29
  }
  eeprom_put_char(destination, checksum);
     768:	c6 01       	movw	r24, r12
     76a:	6f 2d       	mov	r22, r15
     76c:	0e 94 67 03 	call	0x6ce	; 0x6ce <eeprom_put_char>
}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	08 95       	ret
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     784:	ff 24       	eor	r15, r15
     786:	f0 cf       	rjmp	.-32     	; 0x768 <memcpy_to_eeprom_with_checksum+0x58>

00000788 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     788:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     78a:	41 15       	cp	r20, r1
     78c:	51 05       	cpc	r21, r1
     78e:	c9 f1       	breq	.+114    	; 0x802 <memcpy_from_eeprom_with_checksum+0x7a>
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     796:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     798:	c9 01       	movw	r24, r18
     79a:	86 0f       	add	r24, r22
     79c:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     79e:	f9 99       	sbic	0x1f, 1	; 31
     7a0:	fe cf       	rjmp	.-4      	; 0x79e <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     7a2:	92 bd       	out	0x22, r25	; 34
     7a4:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7a6:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     7a8:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     7aa:	aa 23       	and	r26, r26
     7ac:	59 f0       	breq	.+22     	; 0x7c4 <memcpy_from_eeprom_with_checksum+0x3c>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     7b0:	a8 2f       	mov	r26, r24
     7b2:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     7b4:	90 83       	st	Z, r25
     7b6:	2f 5f       	subi	r18, 0xFF	; 255
     7b8:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7ba:	24 17       	cp	r18, r20
     7bc:	35 07       	cpc	r19, r21
     7be:	71 f0       	breq	.+28     	; 0x7dc <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     7c0:	31 96       	adiw	r30, 0x01	; 1
     7c2:	ea cf       	rjmp	.-44     	; 0x798 <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     7c4:	8a 2f       	mov	r24, r26
     7c6:	88 1f       	adc	r24, r24
     7c8:	88 27       	eor	r24, r24
     7ca:	88 1f       	adc	r24, r24
    checksum += data;    
     7cc:	a8 2f       	mov	r26, r24
     7ce:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     7d0:	90 83       	st	Z, r25
     7d2:	2f 5f       	subi	r18, 0xFF	; 255
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7d6:	24 17       	cp	r18, r20
     7d8:	35 07       	cpc	r19, r21
     7da:	91 f7       	brne	.-28     	; 0x7c0 <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     7dc:	62 0f       	add	r22, r18
     7de:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7e0:	f9 99       	sbic	0x1f, 1	; 31
     7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     7e4:	72 bd       	out	0x22, r23	; 34
     7e6:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     7ec:	80 b5       	in	r24, 0x20	; 32
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	a8 17       	cp	r26, r24
     7f4:	11 f0       	breq	.+4      	; 0x7fa <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7f6:	c9 01       	movw	r24, r18
     7f8:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7fe:	c9 01       	movw	r24, r18
     800:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	ed cf       	rjmp	.-38     	; 0x7e0 <memcpy_from_eeprom_with_checksum+0x58>

00000806 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     806:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     80a:	60 93 30 02 	sts	0x0230, r22
  gc.plane_axis_2 = axis_2;
     80e:	40 93 31 02 	sts	0x0231, r20
}
     812:	08 95       	ret

00000814 <set_feeder_x>:

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
     814:	60 93 06 02 	sts	0x0206, r22
     818:	70 93 07 02 	sts	0x0207, r23
     81c:	80 93 08 02 	sts	0x0208, r24
     820:	90 93 09 02 	sts	0x0209, r25
}
     824:	08 95       	ret

00000826 <set_feeder_y>:

void set_feeder_y( double y )
{
	feeder_x_pos = y;
     826:	60 93 06 02 	sts	0x0206, r22
     82a:	70 93 07 02 	sts	0x0207, r23
     82e:	80 93 08 02 	sts	0x0208, r24
     832:	90 93 09 02 	sts	0x0209, r25
}
     836:	08 95       	ret

00000838 <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     838:	2f 92       	push	r2
     83a:	3f 92       	push	r3
     83c:	4f 92       	push	r4
     83e:	5f 92       	push	r5
     840:	6f 92       	push	r6
     842:	7f 92       	push	r7
     844:	8f 92       	push	r8
     846:	9f 92       	push	r9
     848:	af 92       	push	r10
     84a:	bf 92       	push	r11
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	df 93       	push	r29
     85a:	cf 93       	push	r28
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	28 97       	sbiw	r28, 0x08	; 8
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	69 83       	std	Y+1, r22	; 0x01
     86e:	7a 83       	std	Y+2, r23	; 0x02
     870:	8b 83       	std	Y+3, r24	; 0x03
     872:	9c 83       	std	Y+4, r25	; 0x04
     874:	2d 83       	std	Y+5, r18	; 0x05
     876:	3e 83       	std	Y+6, r19	; 0x06
     878:	4f 83       	std	Y+7, r20	; 0x07
     87a:	58 87       	std	Y+8, r21	; 0x08
     87c:	17 01       	movw	r2, r14
     87e:	28 01       	movw	r4, r16
     880:	35 01       	movw	r6, r10
     882:	46 01       	movw	r8, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e8       	ldi	r20, 0x80	; 128
     88a:	5f eb       	ldi	r21, 0xBF	; 191
     88c:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
     890:	88 23       	and	r24, r24
     892:	41 f4       	brne	.+16     	; 0x8a4 <gotoxy+0x6c>
     894:	20 90 1c 02 	lds	r2, 0x021C
     898:	30 90 1d 02 	lds	r3, 0x021D
     89c:	40 90 1e 02 	lds	r4, 0x021E
     8a0:	50 90 1f 02 	lds	r5, 0x021F
  if( y == -1) c = gc.position[Y_AXIS] ;
     8a4:	6d 81       	ldd	r22, Y+5	; 0x05
     8a6:	7e 81       	ldd	r23, Y+6	; 0x06
     8a8:	8f 81       	ldd	r24, Y+7	; 0x07
     8aa:	98 85       	ldd	r25, Y+8	; 0x08
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e8       	ldi	r20, 0x80	; 128
     8b2:	5f eb       	ldi	r21, 0xBF	; 191
     8b4:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
     8b8:	88 23       	and	r24, r24
     8ba:	41 f4       	brne	.+16     	; 0x8cc <gotoxy+0x94>
     8bc:	60 90 20 02 	lds	r6, 0x0220
     8c0:	70 90 21 02 	lds	r7, 0x0221
     8c4:	80 90 22 02 	lds	r8, 0x0222
     8c8:	90 90 23 02 	lds	r9, 0x0223
  if( z == -1) z = gc.position[Z_AXIS] ;
     8cc:	c2 01       	movw	r24, r4
     8ce:	b1 01       	movw	r22, r2
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	5f eb       	ldi	r21, 0xBF	; 191
     8d8:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
     8dc:	88 23       	and	r24, r24
     8de:	41 f4       	brne	.+16     	; 0x8f0 <gotoxy+0xb8>
     8e0:	20 90 24 02 	lds	r2, 0x0224
     8e4:	30 90 25 02 	lds	r3, 0x0225
     8e8:	40 90 26 02 	lds	r4, 0x0226
     8ec:	50 90 27 02 	lds	r5, 0x0227
  if( c == -1) c = gc.position[C_AXIS] ;
     8f0:	c4 01       	movw	r24, r8
     8f2:	b3 01       	movw	r22, r6
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e8       	ldi	r20, 0x80	; 128
     8fa:	5f eb       	ldi	r21, 0xBF	; 191
     8fc:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
     900:	88 23       	and	r24, r24
     902:	41 f4       	brne	.+16     	; 0x914 <gotoxy+0xdc>
     904:	60 90 28 02 	lds	r6, 0x0228
     908:	70 90 29 02 	lds	r7, 0x0229
     90c:	80 90 2a 02 	lds	r8, 0x022A
     910:	90 90 2b 02 	lds	r9, 0x022B

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     914:	00 d0       	rcall	.+0      	; 0x916 <gotoxy+0xde>
     916:	00 d0       	rcall	.+0      	; 0x918 <gotoxy+0xe0>
     918:	80 91 18 02 	lds	r24, 0x0218
     91c:	90 91 19 02 	lds	r25, 0x0219
     920:	a0 91 1a 02 	lds	r26, 0x021A
     924:	b0 91 1b 02 	lds	r27, 0x021B
     928:	ed b7       	in	r30, 0x3d	; 61
     92a:	fe b7       	in	r31, 0x3e	; 62
     92c:	81 83       	std	Z+1, r24	; 0x01
     92e:	92 83       	std	Z+2, r25	; 0x02
     930:	a3 83       	std	Z+3, r26	; 0x03
     932:	b4 83       	std	Z+4, r27	; 0x04
     934:	16 82       	std	Z+6, r1	; 0x06
     936:	15 82       	std	Z+5, r1	; 0x05
     938:	69 81       	ldd	r22, Y+1	; 0x01
     93a:	7a 81       	ldd	r23, Y+2	; 0x02
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	2d 81       	ldd	r18, Y+5	; 0x05
     942:	3e 81       	ldd	r19, Y+6	; 0x06
     944:	4f 81       	ldd	r20, Y+7	; 0x07
     946:	58 85       	ldd	r21, Y+8	; 0x08
     948:	82 01       	movw	r16, r4
     94a:	71 01       	movw	r14, r2
     94c:	64 01       	movw	r12, r8
     94e:	53 01       	movw	r10, r6
     950:	0e 94 74 10 	call	0x20e8	; 0x20e8 <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	ab 81       	ldd	r26, Y+3	; 0x03
     95a:	bc 81       	ldd	r27, Y+4	; 0x04
     95c:	80 93 1c 02 	sts	0x021C, r24
     960:	90 93 1d 02 	sts	0x021D, r25
     964:	a0 93 1e 02 	sts	0x021E, r26
     968:	b0 93 1f 02 	sts	0x021F, r27
   gc.position[Y_AXIS] = y;
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	9e 81       	ldd	r25, Y+6	; 0x06
     970:	af 81       	ldd	r26, Y+7	; 0x07
     972:	b8 85       	ldd	r27, Y+8	; 0x08
     974:	80 93 20 02 	sts	0x0220, r24
     978:	90 93 21 02 	sts	0x0221, r25
     97c:	a0 93 22 02 	sts	0x0222, r26
     980:	b0 93 23 02 	sts	0x0223, r27
   gc.position[Z_AXIS] = z;
     984:	20 92 24 02 	sts	0x0224, r2
     988:	30 92 25 02 	sts	0x0225, r3
     98c:	40 92 26 02 	sts	0x0226, r4
     990:	50 92 27 02 	sts	0x0227, r5
   gc.position[C_AXIS] = c;
     994:	60 92 28 02 	sts	0x0228, r6
     998:	70 92 29 02 	sts	0x0229, r7
     99c:	80 92 2a 02 	sts	0x022A, r8
     9a0:	90 92 2b 02 	sts	0x022B, r9
     9a4:	ad b7       	in	r26, 0x3d	; 61
     9a6:	be b7       	in	r27, 0x3e	; 62
     9a8:	16 96       	adiw	r26, 0x06	; 6
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	be bf       	out	0x3e, r27	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	ad bf       	out	0x3d, r26	; 61

}
     9b4:	28 96       	adiw	r28, 0x08	; 8
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	bf 90       	pop	r11
     9d2:	af 90       	pop	r10
     9d4:	9f 90       	pop	r9
     9d6:	8f 90       	pop	r8
     9d8:	7f 90       	pop	r7
     9da:	6f 90       	pop	r6
     9dc:	5f 90       	pop	r5
     9de:	4f 90       	pop	r4
     9e0:	3f 90       	pop	r3
     9e2:	2f 90       	pop	r2
     9e4:	08 95       	ret

000009e6 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	df 93       	push	r29
     9f8:	cf 93       	push	r28
     9fa:	0f 92       	push	r0
     9fc:	0f 92       	push	r0
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	6c 01       	movw	r12, r24
     a04:	5b 01       	movw	r10, r22
     a06:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     a08:	fb 01       	movw	r30, r22
     a0a:	00 81       	ld	r16, Z
     a0c:	11 81       	ldd	r17, Z+1	; 0x01
     a0e:	08 0f       	add	r16, r24
     a10:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     a12:	c8 01       	movw	r24, r16
     a14:	be 01       	movw	r22, r28
     a16:	6f 5f       	subi	r22, 0xFF	; 255
     a18:	7f 4f       	sbci	r23, 0xFF	; 255
     a1a:	0e 94 1a 30 	call	0x6034	; 0x6034 <strtod>
     a1e:	f7 01       	movw	r30, r14
     a20:	60 83       	st	Z, r22
     a22:	71 83       	std	Z+1, r23	; 0x01
     a24:	82 83       	std	Z+2, r24	; 0x02
     a26:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	80 17       	cp	r24, r16
     a2e:	91 07       	cpc	r25, r17
     a30:	a9 f0       	breq	.+42     	; 0xa5c <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     a32:	8c 19       	sub	r24, r12
     a34:	9d 09       	sbc	r25, r13
     a36:	f5 01       	movw	r30, r10
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     a40:	c9 01       	movw	r24, r18
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 0a 02 	sts	0x020A, r24
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	ec cf       	rjmp	.-40     	; 0xa40 <read_double+0x5a>

00000a68 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	ec 01       	movw	r28, r24
     a72:	8b 01       	movw	r16, r22
     a74:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     a76:	ed 91       	ld	r30, X+
     a78:	fc 91       	ld	r31, X
     a7a:	11 97       	sbiw	r26, 0x01	; 1
     a7c:	e4 0f       	add	r30, r20
     a7e:	f5 1f       	adc	r31, r21
     a80:	e0 81       	ld	r30, Z
     a82:	ee 23       	and	r30, r30
     a84:	39 f0       	breq	.+14     	; 0xa94 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     a86:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     a88:	e1 54       	subi	r30, 0x41	; 65
     a8a:	ea 31       	cpi	r30, 0x1A	; 26
     a8c:	58 f0       	brcs	.+22     	; 0xaa4 <next_statement+0x3c>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	80 93 0a 02 	sts	0x020A, r24
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     a98:	c9 01       	movw	r24, r18
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     aa4:	8d 91       	ld	r24, X+
     aa6:	9c 91       	ld	r25, X
     aa8:	11 97       	sbiw	r26, 0x01	; 1
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	8d 93       	st	X+, r24
     aae:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     ab0:	ca 01       	movw	r24, r20
     ab2:	b9 01       	movw	r22, r18
     ab4:	a8 01       	movw	r20, r16
     ab6:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <read_double>
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	11 f0       	breq	.+4      	; 0xac2 <next_statement+0x5a>
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     ac4:	c9 01       	movw	r24, r18
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     ad0:	88 e2       	ldi	r24, 0x28	; 40
     ad2:	ea e0       	ldi	r30, 0x0A	; 10
     ad4:	f2 e0       	ldi	r31, 0x02	; 2
     ad6:	df 01       	movw	r26, r30
     ad8:	1d 92       	st	X+, r1
     ada:	8a 95       	dec	r24
     adc:	e9 f7       	brne	.-6      	; 0xad8 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     ade:	60 91 9f 06 	lds	r22, 0x069F
     ae2:	70 91 a0 06 	lds	r23, 0x06A0
     ae6:	80 91 a1 06 	lds	r24, 0x06A1
     aea:	90 91 a2 06 	lds	r25, 0x06A2
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e7       	ldi	r20, 0x70	; 112
     af4:	52 e4       	ldi	r21, 0x42	; 66
     af6:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
     afa:	60 93 14 02 	sts	0x0214, r22
     afe:	70 93 15 02 	sts	0x0215, r23
     b02:	80 93 16 02 	sts	0x0216, r24
     b06:	90 93 17 02 	sts	0x0217, r25
  gc.seek_rate = settings.default_seek_rate/60;
     b0a:	60 91 a3 06 	lds	r22, 0x06A3
     b0e:	70 91 a4 06 	lds	r23, 0x06A4
     b12:	80 91 a5 06 	lds	r24, 0x06A5
     b16:	90 91 a6 06 	lds	r25, 0x06A6
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e7       	ldi	r20, 0x70	; 112
     b20:	52 e4       	ldi	r21, 0x42	; 66
     b22:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
     b26:	60 93 18 02 	sts	0x0218, r22
     b2a:	70 93 19 02 	sts	0x0219, r23
     b2e:	80 93 1a 02 	sts	0x021A, r24
     b32:	90 93 1b 02 	sts	0x021B, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b36:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	80 93 31 02 	sts	0x0231, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     b46:	90 93 0e 02 	sts	0x020E, r25
}
     b4a:	08 95       	ret

00000b4c <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     b4c:	2f 92       	push	r2
     b4e:	3f 92       	push	r3
     b50:	4f 92       	push	r4
     b52:	5f 92       	push	r5
     b54:	6f 92       	push	r6
     b56:	7f 92       	push	r7
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	e7 97       	sbiw	r28, 0x37	; 55
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     b82:	1b 82       	std	Y+3, r1	; 0x03
     b84:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	88 87       	std	Y+8, r24	; 0x08
     b90:	99 87       	std	Y+9, r25	; 0x09
     b92:	aa 87       	std	Y+10, r26	; 0x0a
     b94:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     b96:	ac e0       	ldi	r26, 0x0C	; 12
     b98:	2a 2e       	mov	r2, r26
     b9a:	31 2c       	mov	r3, r1
     b9c:	2c 0e       	add	r2, r28
     b9e:	3d 1e       	adc	r3, r29
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	d1 01       	movw	r26, r2
     ba4:	e8 2f       	mov	r30, r24
     ba6:	1d 92       	st	X+, r1
     ba8:	ea 95       	dec	r30
     baa:	e9 f7       	brne	.-6      	; 0xba6 <gc_execute_line+0x5a>
  clear_vector(offset);
     bac:	fc e1       	ldi	r31, 0x1C	; 28
     bae:	cf 2e       	mov	r12, r31
     bb0:	d1 2c       	mov	r13, r1
     bb2:	cc 0e       	add	r12, r28
     bb4:	dd 1e       	adc	r13, r29
     bb6:	d6 01       	movw	r26, r12
     bb8:	1d 92       	st	X+, r1
     bba:	8a 95       	dec	r24
     bbc:	e9 f7       	brne	.-6      	; 0xbb8 <gc_execute_line+0x6c>

  gc.status_code = GCSTATUS_OK;
     bbe:	10 92 0a 02 	sts	0x020A, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     bc2:	f5 01       	movw	r30, r10
     bc4:	80 81       	ld	r24, Z
     bc6:	88 32       	cpi	r24, 0x28	; 40
     bc8:	09 f4       	brne	.+2      	; 0xbcc <gc_execute_line+0x80>
     bca:	86 c0       	rjmp	.+268    	; 0xcd8 <gc_execute_line+0x18c>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     bcc:	8f 32       	cpi	r24, 0x2F	; 47
     bce:	09 f4       	brne	.+2      	; 0xbd2 <gc_execute_line+0x86>
     bd0:	6e c0       	rjmp	.+220    	; 0xcae <gc_execute_line+0x162>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     bd2:	84 32       	cpi	r24, 0x24	; 36
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <gc_execute_line+0x8c>
     bd6:	4a c0       	rjmp	.+148    	; 0xc6c <gc_execute_line+0x120>
     bd8:	19 aa       	std	Y+49, r1	; 0x31
     bda:	18 aa       	std	Y+48, r1	; 0x30
     bdc:	e2 e0       	ldi	r30, 0x02	; 2
     bde:	6e 2e       	mov	r6, r30
     be0:	71 2c       	mov	r7, r1
     be2:	6c 0e       	add	r6, r28
     be4:	7d 1e       	adc	r7, r29
     be6:	74 e0       	ldi	r23, 0x04	; 4
     be8:	47 2e       	mov	r4, r23
     bea:	51 2c       	mov	r5, r1
     bec:	4c 0e       	add	r4, r28
     bee:	5d 1e       	adc	r5, r29
     bf0:	4e 01       	movw	r8, r28
     bf2:	08 94       	sec
     bf4:	81 1c       	adc	r8, r1
     bf6:	91 1c       	adc	r9, r1
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     bf8:	c4 01       	movw	r24, r8
     bfa:	b2 01       	movw	r22, r4
     bfc:	a5 01       	movw	r20, r10
     bfe:	93 01       	movw	r18, r6
     c00:	0e 94 34 05 	call	0xa68	; 0xa68 <next_statement>
     c04:	89 2b       	or	r24, r25
     c06:	09 f4       	brne	.+2      	; 0xc0a <gc_execute_line+0xbe>
     c08:	7d c2       	rjmp	.+1274   	; 0x1104 <gc_execute_line+0x5b8>
    int_value = trunc(value);
     c0a:	6c 81       	ldd	r22, Y+4	; 0x04
     c0c:	7d 81       	ldd	r23, Y+5	; 0x05
     c0e:	8e 81       	ldd	r24, Y+6	; 0x06
     c10:	9f 81       	ldd	r25, Y+7	; 0x07
     c12:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <trunc>
     c16:	7b 01       	movw	r14, r22
     c18:	8c 01       	movw	r16, r24
     c1a:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>

    switch(letter) {
     c1e:	29 81       	ldd	r18, Y+1	; 0x01
     c20:	27 34       	cpi	r18, 0x47	; 71
     c22:	09 f4       	brne	.+2      	; 0xc26 <gc_execute_line+0xda>
     c24:	1d c1       	rjmp	.+570    	; 0xe60 <gc_execute_line+0x314>
     c26:	28 34       	cpi	r18, 0x48	; 72
     c28:	08 f0       	brcs	.+2      	; 0xc2c <gc_execute_line+0xe0>
     c2a:	47 c0       	rjmp	.+142    	; 0xcba <gc_execute_line+0x16e>
     c2c:	24 34       	cpi	r18, 0x44	; 68
     c2e:	09 f4       	brne	.+2      	; 0xc32 <gc_execute_line+0xe6>
     c30:	55 c0       	rjmp	.+170    	; 0xcdc <gc_execute_line+0x190>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }

    if(gc.status_code) { break; }
     c32:	80 91 0a 02 	lds	r24, 0x020A
     c36:	88 23       	and	r24, r24
     c38:	f9 f2       	breq	.-66     	; 0xbf8 <gc_execute_line+0xac>
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     c3a:	e7 96       	adiw	r28, 0x37	; 55
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	7f 90       	pop	r7
     c60:	6f 90       	pop	r6
     c62:	5f 90       	pop	r5
     c64:	4f 90       	pop	r4
     c66:	3f 90       	pop	r3
     c68:	2f 90       	pop	r2
     c6a:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	9b 83       	std	Y+3, r25	; 0x03
     c72:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c74:	d5 01       	movw	r26, r10
     c76:	11 96       	adiw	r26, 0x01	; 1
     c78:	8c 91       	ld	r24, X
     c7a:	88 23       	and	r24, r24
     c7c:	59 f1       	breq	.+86     	; 0xcd4 <gc_execute_line+0x188>
    read_double(line, &char_counter, &p);
     c7e:	8e 01       	movw	r16, r28
     c80:	0e 5f       	subi	r16, 0xFE	; 254
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	c5 01       	movw	r24, r10
     c86:	b8 01       	movw	r22, r16
     c88:	ae 01       	movw	r20, r28
     c8a:	48 5f       	subi	r20, 0xF8	; 248
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	9b 81       	ldd	r25, Y+3	; 0x03
     c96:	f5 01       	movw	r30, r10
     c98:	e8 0f       	add	r30, r24
     c9a:	f9 1f       	adc	r31, r25
     c9c:	20 81       	ld	r18, Z
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	9b 83       	std	Y+3, r25	; 0x03
     ca2:	8a 83       	std	Y+2, r24	; 0x02
     ca4:	2d 33       	cpi	r18, 0x3D	; 61
     ca6:	09 f4       	brne	.+2      	; 0xcaa <gc_execute_line+0x15e>
     ca8:	0e c1       	rjmp	.+540    	; 0xec6 <gc_execute_line+0x37a>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	c6 cf       	rjmp	.-116    	; 0xc3a <gc_execute_line+0xee>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	9b 81       	ldd	r25, Y+3	; 0x03
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	9b 83       	std	Y+3, r25	; 0x03
     cb6:	8a 83       	std	Y+2, r24	; 0x02
     cb8:	8f cf       	rjmp	.-226    	; 0xbd8 <gc_execute_line+0x8c>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     cba:	2d 34       	cpi	r18, 0x4D	; 77
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <gc_execute_line+0x174>
     cbe:	c7 c0       	rjmp	.+398    	; 0xe4e <gc_execute_line+0x302>
     cc0:	24 35       	cpi	r18, 0x54	; 84
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <gc_execute_line+0x17a>
     cc4:	b6 cf       	rjmp	.-148    	; 0xc32 <gc_execute_line+0xe6>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     cc6:	c8 01       	movw	r24, r16
     cc8:	b7 01       	movw	r22, r14
     cca:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
     cce:	60 93 2c 02 	sts	0x022C, r22
     cd2:	af cf       	rjmp	.-162    	; 0xc32 <gc_execute_line+0xe6>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     cd4:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <settings_dump>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	af cf       	rjmp	.-162    	; 0xc3a <gc_execute_line+0xee>
    switch(letter) {
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     cdc:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     cde:	87 e1       	ldi	r24, 0x17	; 23
     ce0:	93 e0       	ldi	r25, 0x03	; 3
     ce2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
		  	printBinary( DIRECTION_DDR );
     ce6:	60 b3       	in	r22, 0x10	; 16
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cf2:	84 e1       	ldi	r24, 0x14	; 20
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
		  	printBinary( DIRECTION_PORT );
     d02:	61 b3       	in	r22, 0x11	; 17
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d0e:	8e ef       	ldi	r24, 0xFE	; 254
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

			ch = PORTD;
     d16:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     d18:	84 ef       	ldi	r24, 0xF4	; 244
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
		  	printBinary( ch );
     d20:	ff 24       	eor	r15, r15
     d22:	00 e0       	ldi	r16, 0x00	; 0
     d24:	10 e0       	ldi	r17, 0x00	; 0
     d26:	c8 01       	movw	r24, r16
     d28:	b7 01       	movw	r22, r14
     d2a:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d2e:	81 ef       	ldi	r24, 0xF1	; 241
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

			ch = PIND;
     d36:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     d38:	82 ee       	ldi	r24, 0xE2	; 226
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
		  	printBinary( ch );
     d40:	ff 24       	eor	r15, r15
     d42:	00 e0       	ldi	r16, 0x00	; 0
     d44:	10 e0       	ldi	r17, 0x00	; 0
     d46:	c8 01       	movw	r24, r16
     d48:	b7 01       	movw	r22, r14
     d4a:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d4e:	8f ed       	ldi	r24, 0xDF	; 223
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
#endif



	      	printPgmString(PSTR("to_millimeters(100) = "));
     d56:	88 ec       	ldi	r24, 0xC8	; 200
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     d5e:	80 91 0d 02 	lds	r24, 0x020D
     d62:	88 23       	and	r24, r24
     d64:	09 f0       	breq	.+2      	; 0xd68 <gc_execute_line+0x21c>
     d66:	91 c0       	rjmp	.+290    	; 0xe8a <gc_execute_line+0x33e>
     d68:	64 e6       	ldi	r22, 0x64	; 100
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
#endif



	      	printPgmString(PSTR("to_millimeters(100) = "));
			printInteger( to_millimeters(100) );
     d70:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d74:	85 ec       	ldi	r24, 0xC5	; 197
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

	      	printPgmString(PSTR("head down = "));
     d7c:	88 eb       	ldi	r24, 0xB8	; 184
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
			printInteger( is_head_down() );
     d84:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	a0 e0       	ldi	r26, 0x00	; 0
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	bc 01       	movw	r22, r24
     d90:	cd 01       	movw	r24, r26
     d92:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d96:	85 eb       	ldi	r24, 0xB5	; 181
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     d9e:	86 ea       	ldi	r24, 0xA6	; 166
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
			printInteger( head_moving() );
     da6:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	a0 e0       	ldi	r26, 0x00	; 0
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     db8:	83 ea       	ldi	r24, 0xA3	; 163
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     dc0:	83 e9       	ldi	r24, 0x93	; 147
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
			printInteger( vacuum_state() );
     dc8:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum_state>
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dda:	80 e9       	ldi	r24, 0x90	; 144
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     de2:	85 e8       	ldi	r24, 0x85	; 133
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
			printInteger( is_rotated() );
     dea:	0e 94 42 20 	call	0x4084	; 0x4084 <is_rotated>
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	bc 01       	movw	r22, r24
     df6:	cd 01       	movw	r24, r26
     df8:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dfc:	82 e8       	ldi	r24, 0x82	; 130
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
     e04:	86 e7       	ldi	r24, 0x76	; 118
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
			printInteger( get_busy() );
     e0c:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <get_busy>
     e10:	aa 27       	eor	r26, r26
     e12:	97 fd       	sbrc	r25, 7
     e14:	a0 95       	com	r26
     e16:	ba 2f       	mov	r27, r26
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     e20:	83 e7       	ldi	r24, 0x73	; 115
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     e28:	4b 99       	sbic	0x09, 3	; 9
     e2a:	34 c0       	rjmp	.+104    	; 0xe94 <gc_execute_line+0x348>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     e2c:	4a 99       	sbic	0x09, 2	; 9
     e2e:	46 c0       	rjmp	.+140    	; 0xebc <gc_execute_line+0x370>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     e30:	48 99       	sbic	0x09, 0	; 9
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <gc_execute_line+0x366>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     e34:	49 99       	sbic	0x09, 1	; 9
     e36:	38 c0       	rjmp	.+112    	; 0xea8 <gc_execute_line+0x35c>
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
     e38:	04 99       	sbic	0x00, 4	; 0
     e3a:	31 c0       	rjmp	.+98     	; 0xe9e <gc_execute_line+0x352>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     e3c:	90 9b       	sbis	0x12, 0	; 18
     e3e:	04 c0       	rjmp	.+8      	; 0xe48 <gc_execute_line+0x2fc>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     e40:	89 e4       	ldi	r24, 0x49	; 73
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     e48:	80 91 0a 02 	lds	r24, 0x020A
     e4c:	f6 ce       	rjmp	.-532    	; 0xc3a <gc_execute_line+0xee>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e4e:	e6 2f       	mov	r30, r22
     e50:	f7 2f       	mov	r31, r23
     e52:	ed 33       	cpi	r30, 0x3D	; 61
     e54:	f1 05       	cpc	r31, r1
     e56:	88 f0       	brcs	.+34     	; 0xe7a <gc_execute_line+0x32e>
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	80 93 0a 02 	sts	0x020A, r24
     e5e:	f4 cf       	rjmp	.-24     	; 0xe48 <gc_execute_line+0x2fc>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     e60:	e6 2f       	mov	r30, r22
     e62:	f7 2f       	mov	r31, r23
     e64:	ef 35       	cpi	r30, 0x5F	; 95
     e66:	f1 05       	cpc	r31, r1
     e68:	b8 f7       	brcc	.-18     	; 0xe58 <gc_execute_line+0x30c>
     e6a:	ee 58       	subi	r30, 0x8E	; 142
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	05 90       	lpm	r0, Z+
     e74:	f4 91       	lpm	r31, Z+
     e76:	e0 2d       	mov	r30, r0
     e78:	19 94       	eijmp
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e7a:	ef 52       	subi	r30, 0x2F	; 47
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	05 90       	lpm	r0, Z+
     e84:	f4 91       	lpm	r31, Z+
     e86:	e0 2d       	mov	r30, r0
     e88:	19 94       	eijmp
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     e8a:	6c ee       	ldi	r22, 0xEC	; 236
     e8c:	79 e0       	ldi	r23, 0x09	; 9
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	6e cf       	rjmp	.-292    	; 0xd70 <gc_execute_line+0x224>
			printInteger( get_busy() );
	      	printPgmString(PSTR("\r\n"));


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
     e94:	8d e6       	ldi	r24, 0x6D	; 109
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
     e9c:	c7 cf       	rjmp	.-114    	; 0xe2c <gc_execute_line+0x2e0>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));
     e9e:	82 e5       	ldi	r24, 0x52	; 82
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
     ea6:	ca cf       	rjmp	.-108    	; 0xe3c <gc_execute_line+0x2f0>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));
     ea8:	8b e5       	ldi	r24, 0x5B	; 91
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
     eb0:	c3 cf       	rjmp	.-122    	; 0xe38 <gc_execute_line+0x2ec>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
     eb2:	81 e6       	ldi	r24, 0x61	; 97
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
     eba:	bc cf       	rjmp	.-136    	; 0xe34 <gc_execute_line+0x2e8>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));
     ebc:	87 e6       	ldi	r24, 0x67	; 103
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
     ec4:	b5 cf       	rjmp	.-150    	; 0xe30 <gc_execute_line+0x2e4>
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    read_double(line, &char_counter, &value);
     ec6:	c5 01       	movw	r24, r10
     ec8:	b8 01       	movw	r22, r16
     eca:	ae 01       	movw	r20, r28
     ecc:	4c 5f       	subi	r20, 0xFC	; 252
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     ed4:	ea 81       	ldd	r30, Y+2	; 0x02
     ed6:	fb 81       	ldd	r31, Y+3	; 0x03
     ed8:	ea 0d       	add	r30, r10
     eda:	fb 1d       	adc	r31, r11
     edc:	80 81       	ld	r24, Z
     ede:	88 23       	and	r24, r24
     ee0:	09 f0       	breq	.+2      	; 0xee4 <gc_execute_line+0x398>
     ee2:	e3 ce       	rjmp	.-570    	; 0xcaa <gc_execute_line+0x15e>
    settings_store_setting(p, value);
     ee4:	68 85       	ldd	r22, Y+8	; 0x08
     ee6:	79 85       	ldd	r23, Y+9	; 0x09
     ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eea:	9b 85       	ldd	r25, Y+11	; 0x0b
     eec:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	4c 81       	ldd	r20, Y+4	; 0x04
     ef6:	5d 81       	ldd	r21, Y+5	; 0x05
     ef8:	6e 81       	ldd	r22, Y+6	; 0x06
     efa:	7f 81       	ldd	r23, Y+7	; 0x07
     efc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <settings_store_setting>
    return(gc.status_code);
     f00:	80 91 0a 02 	lds	r24, 0x020A
     f04:	9a ce       	rjmp	.-716    	; 0xc3a <gc_execute_line+0xee>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
     f06:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <putdown_part>
     f0a:	80 93 0a 02 	sts	0x020A, r24
     f0e:	e1 e0       	ldi	r30, 0x01	; 1
     f10:	e8 ab       	std	Y+48, r30	; 0x30
     f12:	8f ce       	rjmp	.-738    	; 0xc32 <gc_execute_line+0xe6>
	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     f14:	f1 e0       	ldi	r31, 0x01	; 1
     f16:	f0 93 0b 02 	sts	0x020B, r31
     f1a:	8b ce       	rjmp	.-746    	; 0xc32 <gc_execute_line+0xe6>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     f1c:	10 92 0b 02 	sts	0x020B, r1
     f20:	88 ce       	rjmp	.-752    	; 0xc32 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f22:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f26:	a1 e0       	ldi	r26, 0x01	; 1
     f28:	a0 93 30 02 	sts	0x0230, r26
  gc.plane_axis_2 = axis_2;
     f2c:	b2 e0       	ldi	r27, 0x02	; 2
     f2e:	b0 93 31 02 	sts	0x0231, r27
     f32:	7f ce       	rjmp	.-770    	; 0xc32 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	90 93 0b 02 	sts	0x020B, r25
     f3a:	7b ce       	rjmp	.-778    	; 0xc32 <gc_execute_line+0xe6>
      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	80 93 0b 02 	sts	0x020B, r24
     f42:	77 ce       	rjmp	.-786    	; 0xc32 <gc_execute_line+0xe6>
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     f44:	f1 e0       	ldi	r31, 0x01	; 1
     f46:	f0 93 0e 02 	sts	0x020E, r31
     f4a:	73 ce       	rjmp	.-794    	; 0xc32 <gc_execute_line+0xe6>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     f4c:	e4 e0       	ldi	r30, 0x04	; 4
     f4e:	e0 93 0b 02 	sts	0x020B, r30
     f52:	6f ce       	rjmp	.-802    	; 0xc32 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f54:	b1 e0       	ldi	r27, 0x01	; 1
     f56:	b9 ab       	std	Y+49, r27	; 0x31
     f58:	6c ce       	rjmp	.-808    	; 0xc32 <gc_execute_line+0xe6>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     f5a:	b2 e0       	ldi	r27, 0x02	; 2
     f5c:	b8 ab       	std	Y+48, r27	; 0x30
     f5e:	69 ce       	rjmp	.-814    	; 0xc32 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f60:	10 92 0d 02 	sts	0x020D, r1
     f64:	66 ce       	rjmp	.-820    	; 0xc32 <gc_execute_line+0xe6>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     f66:	a1 e0       	ldi	r26, 0x01	; 1
     f68:	a0 93 0d 02 	sts	0x020D, r26
     f6c:	62 ce       	rjmp	.-828    	; 0xc32 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     f7a:	10 92 31 02 	sts	0x0231, r1
     f7e:	59 ce       	rjmp	.-846    	; 0xc32 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f80:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f84:	e2 e0       	ldi	r30, 0x02	; 2
     f86:	e0 93 30 02 	sts	0x0230, r30
  gc.plane_axis_2 = axis_2;
     f8a:	f1 e0       	ldi	r31, 0x01	; 1
     f8c:	f0 93 31 02 	sts	0x0231, r31
     f90:	50 ce       	rjmp	.-864    	; 0xc32 <gc_execute_line+0xe6>
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     f92:	10 92 0c 02 	sts	0x020C, r1
     f96:	4d ce       	rjmp	.-870    	; 0xc32 <gc_execute_line+0xe6>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	90 93 0c 02 	sts	0x020C, r25
     f9e:	49 ce       	rjmp	.-878    	; 0xc32 <gc_execute_line+0xe6>
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	88 ab       	std	Y+48, r24	; 0x30
     fa4:	46 ce       	rjmp	.-884    	; 0xc32 <gc_execute_line+0xe6>
     fa6:	10 92 0e 02 	sts	0x020E, r1
     faa:	43 ce       	rjmp	.-890    	; 0xc32 <gc_execute_line+0xe6>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     fac:	ef ef       	ldi	r30, 0xFF	; 255
     fae:	ff ef       	ldi	r31, 0xFF	; 255
     fb0:	f0 93 11 02 	sts	0x0211, r31
     fb4:	e0 93 10 02 	sts	0x0210, r30
     fb8:	3c ce       	rjmp	.-904    	; 0xc32 <gc_execute_line+0xe6>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	90 93 11 02 	sts	0x0211, r25
     fc2:	80 93 10 02 	sts	0x0210, r24
     fc6:	35 ce       	rjmp	.-918    	; 0xc32 <gc_execute_line+0xe6>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     fc8:	b2 e0       	ldi	r27, 0x02	; 2
     fca:	b0 93 0f 02 	sts	0x020F, r27
     fce:	31 ce       	rjmp	.-926    	; 0xc32 <gc_execute_line+0xe6>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     fd0:	a1 e0       	ldi	r26, 0x01	; 1
     fd2:	a0 93 0f 02 	sts	0x020F, r26
     fd6:	2d ce       	rjmp	.-934    	; 0xc32 <gc_execute_line+0xe6>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>
     fe0:	b1 e0       	ldi	r27, 0x01	; 1
     fe2:	b8 ab       	std	Y+48, r27	; 0x30
     fe4:	26 ce       	rjmp	.-948    	; 0xc32 <gc_execute_line+0xe6>
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>
     fee:	a1 e0       	ldi	r26, 0x01	; 1
     ff0:	a8 ab       	std	Y+48, r26	; 0x30
     ff2:	1f ce       	rjmp	.-962    	; 0xc32 <gc_execute_line+0xe6>
		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	98 ab       	std	Y+48, r25	; 0x30
    1000:	18 ce       	rjmp	.-976    	; 0xc32 <gc_execute_line+0xe6>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	88 ab       	std	Y+48, r24	; 0x30
    100e:	11 ce       	rjmp	.-990    	; 0xc32 <gc_execute_line+0xe6>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    1018:	f1 e0       	ldi	r31, 0x01	; 1
    101a:	f8 ab       	std	Y+48, r31	; 0x30
    101c:	0a ce       	rjmp	.-1004   	; 0xc32 <gc_execute_line+0xe6>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
    101e:	10 92 13 02 	sts	0x0213, r1
    1022:	10 92 12 02 	sts	0x0212, r1
    1026:	05 ce       	rjmp	.-1014   	; 0xc32 <gc_execute_line+0xe6>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	90 93 13 02 	sts	0x0213, r25
    1030:	80 93 12 02 	sts	0x0212, r24
    1034:	fe cd       	rjmp	.-1028   	; 0xc32 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
    1036:	10 92 11 02 	sts	0x0211, r1
    103a:	10 92 10 02 	sts	0x0210, r1
    103e:	f9 cd       	rjmp	.-1038   	; 0xc32 <gc_execute_line+0xe6>
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;

		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;
    1040:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <settings_reset>
    1044:	a1 e0       	ldi	r26, 0x01	; 1
    1046:	a8 ab       	std	Y+48, r26	; 0x30
    1048:	f4 cd       	rjmp	.-1048   	; 0xc32 <gc_execute_line+0xe6>
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;

		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;
    104a:	86 e0       	ldi	r24, 0x06	; 6
    104c:	80 93 0a 02 	sts	0x020A, r24
    1050:	0e 94 b6 19 	call	0x336c	; 0x336c <get_limit_bits>
    1054:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <serialWrite>
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	98 ab       	std	Y+48, r25	; 0x30
    105c:	ea cd       	rjmp	.-1068   	; 0xc32 <gc_execute_line+0xe6>
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
    105e:	0e 94 f7 22 	call	0x45ee	; 0x45ee <test_mode>
    1062:	80 93 0a 02 	sts	0x020A, r24
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	f8 ab       	std	Y+48, r31	; 0x30
    106a:	e3 cd       	rjmp	.-1082   	; 0xc32 <gc_execute_line+0xe6>
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
    106c:	0e 94 de 23 	call	0x47bc	; 0x47bc <pickup_part>
    1070:	80 93 0a 02 	sts	0x020A, r24
    1074:	b1 e0       	ldi	r27, 0x01	; 1
    1076:	b8 ab       	std	Y+48, r27	; 0x30
    1078:	dc cd       	rjmp	.-1096   	; 0xc32 <gc_execute_line+0xe6>
		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
    107a:	0e 94 69 23 	call	0x46d2	; 0x46d2 <vacuum_test>
    107e:	a1 e0       	ldi	r26, 0x01	; 1
    1080:	a8 ab       	std	Y+48, r26	; 0x30
    1082:	d7 cd       	rjmp	.-1106   	; 0xc32 <gc_execute_line+0xe6>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
    1084:	0e 94 a4 21 	call	0x4348	; 0x4348 <goto_vacpad>
    1088:	80 93 0a 02 	sts	0x020A, r24
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	98 ab       	std	Y+48, r25	; 0x30
    1090:	d0 cd       	rjmp	.-1120   	; 0xc32 <gc_execute_line+0xe6>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
    1092:	0e 94 07 20 	call	0x400e	; 0x400e <check_for_tool>
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	88 ab       	std	Y+48, r24	; 0x30
    109a:	cb cd       	rjmp	.-1130   	; 0xc32 <gc_execute_line+0xe6>
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
    109c:	0e 94 69 23 	call	0x46d2	; 0x46d2 <vacuum_test>
    10a0:	f1 e0       	ldi	r31, 0x01	; 1
    10a2:	f8 ab       	std	Y+48, r31	; 0x30
    10a4:	c6 cd       	rjmp	.-1140   	; 0xc32 <gc_execute_line+0xe6>
		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
    10a6:	0e 94 b1 23 	call	0x4762	; 0x4762 <tape_knock>
    10aa:	e1 e0       	ldi	r30, 0x01	; 1
    10ac:	e8 ab       	std	Y+48, r30	; 0x30
    10ae:	c1 cd       	rjmp	.-1150   	; 0xc32 <gc_execute_line+0xe6>
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
    10b8:	b1 e0       	ldi	r27, 0x01	; 1
    10ba:	b8 ab       	std	Y+48, r27	; 0x30
    10bc:	ba cd       	rjmp	.-1164   	; 0xc32 <gc_execute_line+0xe6>
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
    10c6:	a1 e0       	ldi	r26, 0x01	; 1
    10c8:	a8 ab       	std	Y+48, r26	; 0x30
    10ca:	b3 cd       	rjmp	.-1178   	; 0xc32 <gc_execute_line+0xe6>
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;
    10cc:	86 e0       	ldi	r24, 0x06	; 6
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	98 ab       	std	Y+48, r25	; 0x30
    10d8:	ac cd       	rjmp	.-1192   	; 0xc32 <gc_execute_line+0xe6>
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
    10da:	85 e0       	ldi	r24, 0x05	; 5
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	88 ab       	std	Y+48, r24	; 0x30
    10e6:	a5 cd       	rjmp	.-1206   	; 0xc32 <gc_execute_line+0xe6>
		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
    10e8:	84 e0       	ldi	r24, 0x04	; 4
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>
    10f0:	f1 e0       	ldi	r31, 0x01	; 1
    10f2:	f8 ab       	std	Y+48, r31	; 0x30
    10f4:	9e cd       	rjmp	.-1220   	; 0xc32 <gc_execute_line+0xe6>

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>
    10fe:	e1 e0       	ldi	r30, 0x01	; 1
    1100:	e8 ab       	std	Y+48, r30	; 0x30
    1102:	97 cd       	rjmp	.-1234   	; 0xc32 <gc_execute_line+0xe6>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1104:	80 91 0a 02 	lds	r24, 0x020A
    1108:	88 23       	and	r24, r24
    110a:	09 f0       	breq	.+2      	; 0x110e <gc_execute_line+0x5c2>
    110c:	96 cd       	rjmp	.-1236   	; 0xc3a <gc_execute_line+0xee>

  char_counter = 0;
    110e:	1b 82       	std	Y+3, r1	; 0x03
    1110:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
    1112:	80 e1       	ldi	r24, 0x10	; 16
    1114:	f6 01       	movw	r30, r12
    1116:	11 92       	st	Z+, r1
    1118:	8a 95       	dec	r24
    111a:	e9 f7       	brne	.-6      	; 0x1116 <gc_execute_line+0x5ca>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
    111c:	d1 01       	movw	r26, r2
    111e:	ec e1       	ldi	r30, 0x1C	; 28
    1120:	f2 e0       	ldi	r31, 0x02	; 2
    1122:	80 e1       	ldi	r24, 0x10	; 16
    1124:	01 90       	ld	r0, Z+
    1126:	0d 92       	st	X+, r0
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	e1 f7       	brne	.-8      	; 0x1124 <gc_execute_line+0x5d8>
    112c:	1c aa       	std	Y+52, r1	; 0x34
    112e:	1d aa       	std	Y+53, r1	; 0x35
    1130:	f0 e8       	ldi	r31, 0x80	; 128
    1132:	fe ab       	std	Y+54, r31	; 0x36
    1134:	8f eb       	ldi	r24, 0xBF	; 191
    1136:	8f ab       	std	Y+55, r24	; 0x37
    1138:	1b aa       	std	Y+51, r1	; 0x33
    113a:	1a aa       	std	Y+50, r1	; 0x32

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    113c:	c4 01       	movw	r24, r8
    113e:	b2 01       	movw	r22, r4
    1140:	a5 01       	movw	r20, r10
    1142:	93 01       	movw	r18, r6
    1144:	0e 94 34 05 	call	0xa68	; 0xa68 <next_statement>
    1148:	89 2b       	or	r24, r25
    114a:	09 f4       	brne	.+2      	; 0x114e <gc_execute_line+0x602>
    114c:	ed c0       	rjmp	.+474    	; 0x1328 <gc_execute_line+0x7dc>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    114e:	cc 80       	ldd	r12, Y+4	; 0x04
    1150:	dd 80       	ldd	r13, Y+5	; 0x05
    1152:	ee 80       	ldd	r14, Y+6	; 0x06
    1154:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1156:	80 91 0d 02 	lds	r24, 0x020D
    115a:	88 23       	and	r24, r24
    115c:	d9 f4       	brne	.+54     	; 0x1194 <gc_execute_line+0x648>
    115e:	a7 01       	movw	r20, r14
    1160:	96 01       	movw	r18, r12

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1162:	09 81       	ldd	r16, Y+1	; 0x01
    1164:	0d 34       	cpi	r16, 0x4D	; 77
    1166:	19 f1       	breq	.+70     	; 0x11ae <gc_execute_line+0x662>
    1168:	0e 34       	cpi	r16, 0x4E	; 78
    116a:	60 f5       	brcc	.+88     	; 0x11c4 <gc_execute_line+0x678>
    116c:	08 34       	cpi	r16, 0x48	; 72
    116e:	09 f4       	brne	.+2      	; 0x1172 <gc_execute_line+0x626>
    1170:	7a c0       	rjmp	.+244    	; 0x1266 <gc_execute_line+0x71a>
    1172:	09 34       	cpi	r16, 0x49	; 73
    1174:	b8 f5       	brcc	.+110    	; 0x11e4 <gc_execute_line+0x698>
    1176:	03 34       	cpi	r16, 0x43	; 67
    1178:	09 f4       	brne	.+2      	; 0x117c <gc_execute_line+0x630>
    117a:	8a c0       	rjmp	.+276    	; 0x1290 <gc_execute_line+0x744>
    117c:	06 34       	cpi	r16, 0x46	; 70
    117e:	f1 f6       	brne	.-68     	; 0x113c <gc_execute_line+0x5f0>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    1180:	80 91 0c 02 	lds	r24, 0x020C
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <gc_execute_line+0x63e>
    1188:	a9 c0       	rjmp	.+338    	; 0x12dc <gc_execute_line+0x790>
    118a:	2c ab       	std	Y+52, r18	; 0x34
    118c:	3d ab       	std	Y+53, r19	; 0x35
    118e:	4e ab       	std	Y+54, r20	; 0x36
    1190:	5f ab       	std	Y+55, r21	; 0x37
    1192:	d4 cf       	rjmp	.-88     	; 0x113c <gc_execute_line+0x5f0>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1194:	c7 01       	movw	r24, r14
    1196:	b6 01       	movw	r22, r12
    1198:	23 e3       	ldi	r18, 0x33	; 51
    119a:	33 e3       	ldi	r19, 0x33	; 51
    119c:	4b ec       	ldi	r20, 0xCB	; 203
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11a8:	09 81       	ldd	r16, Y+1	; 0x01
    11aa:	0d 34       	cpi	r16, 0x4D	; 77
    11ac:	e9 f6       	brne	.-70     	; 0x1168 <gc_execute_line+0x61c>
	feeder_x_pos = x;
}

void set_feeder_y( double y )
{
	feeder_x_pos = y;
    11ae:	20 93 06 02 	sts	0x0206, r18
    11b2:	30 93 07 02 	sts	0x0207, r19
    11b6:	40 93 08 02 	sts	0x0208, r20
    11ba:	50 93 09 02 	sts	0x0209, r21
    11be:	a1 e0       	ldi	r26, 0x01	; 1
    11c0:	a8 ab       	std	Y+48, r26	; 0x30
    11c2:	bc cf       	rjmp	.-136    	; 0x113c <gc_execute_line+0x5f0>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11c4:	03 35       	cpi	r16, 0x53	; 83
    11c6:	09 f4       	brne	.+2      	; 0x11ca <gc_execute_line+0x67e>
    11c8:	45 c0       	rjmp	.+138    	; 0x1254 <gc_execute_line+0x708>
    11ca:	04 35       	cpi	r16, 0x54	; 84
    11cc:	e8 f4       	brcc	.+58     	; 0x1208 <gc_execute_line+0x6bc>
    11ce:	0e 34       	cpi	r16, 0x4E	; 78
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <gc_execute_line+0x688>
    11d2:	53 c0       	rjmp	.+166    	; 0x127a <gc_execute_line+0x72e>
    11d4:	00 35       	cpi	r16, 0x50	; 80
    11d6:	09 f0       	breq	.+2      	; 0x11da <gc_execute_line+0x68e>
    11d8:	b1 cf       	rjmp	.-158    	; 0x113c <gc_execute_line+0x5f0>
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
    11da:	c8 86       	std	Y+8, r12	; 0x08
    11dc:	d9 86       	std	Y+9, r13	; 0x09
    11de:	ea 86       	std	Y+10, r14	; 0x0a
    11e0:	fb 86       	std	Y+11, r15	; 0x0b
    11e2:	ac cf       	rjmp	.-168    	; 0x113c <gc_execute_line+0x5f0>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11e4:	0c 34       	cpi	r16, 0x4C	; 76
    11e6:	08 f0       	brcs	.+2      	; 0x11ea <gc_execute_line+0x69e>
    11e8:	a9 cf       	rjmp	.-174    	; 0x113c <gc_execute_line+0x5f0>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    11ea:	e0 2f       	mov	r30, r16
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	e9 54       	subi	r30, 0x49	; 73
    11f0:	f0 40       	sbci	r31, 0x00	; 0
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	e8 0d       	add	r30, r8
    11fc:	f9 1d       	adc	r31, r9
    11fe:	23 8f       	std	Z+27, r18	; 0x1b
    1200:	34 8f       	std	Z+28, r19	; 0x1c
    1202:	45 8f       	std	Z+29, r20	; 0x1d
    1204:	56 8f       	std	Z+30, r21	; 0x1e
    1206:	9a cf       	rjmp	.-204    	; 0x113c <gc_execute_line+0x5f0>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1208:	80 2f       	mov	r24, r16
    120a:	88 55       	subi	r24, 0x58	; 88
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	08 f0       	brcs	.+2      	; 0x1212 <gc_execute_line+0x6c6>
    1210:	95 cf       	rjmp	.-214    	; 0x113c <gc_execute_line+0x5f0>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    1212:	80 91 0e 02 	lds	r24, 0x020E
    1216:	88 23       	and	r24, r24
    1218:	09 f0       	breq	.+2      	; 0x121c <gc_execute_line+0x6d0>
    121a:	4c c0       	rjmp	.+152    	; 0x12b4 <gc_execute_line+0x768>
    121c:	99 a9       	ldd	r25, Y+49	; 0x31
    121e:	99 23       	and	r25, r25
    1220:	09 f0       	breq	.+2      	; 0x1224 <gc_execute_line+0x6d8>
    1222:	48 c0       	rjmp	.+144    	; 0x12b4 <gc_execute_line+0x768>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	08 55       	subi	r16, 0x58	; 88
    1228:	10 40       	sbci	r17, 0x00	; 0
    122a:	00 0f       	add	r16, r16
    122c:	11 1f       	adc	r17, r17
    122e:	00 0f       	add	r16, r16
    1230:	11 1f       	adc	r17, r17
    1232:	08 0d       	add	r16, r8
    1234:	19 1d       	adc	r17, r9
    1236:	d8 01       	movw	r26, r16
    1238:	1b 96       	adiw	r26, 0x0b	; 11
    123a:	6d 91       	ld	r22, X+
    123c:	7d 91       	ld	r23, X+
    123e:	8d 91       	ld	r24, X+
    1240:	9c 91       	ld	r25, X
    1242:	1e 97       	sbiw	r26, 0x0e	; 14
    1244:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1248:	f8 01       	movw	r30, r16
    124a:	63 87       	std	Z+11, r22	; 0x0b
    124c:	74 87       	std	Z+12, r23	; 0x0c
    124e:	85 87       	std	Z+13, r24	; 0x0d
    1250:	96 87       	std	Z+14, r25	; 0x0e
    1252:	74 cf       	rjmp	.-280    	; 0x113c <gc_execute_line+0x5f0>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    1254:	c7 01       	movw	r24, r14
    1256:	b6 01       	movw	r22, r12
    1258:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
    125c:	70 93 2e 02 	sts	0x022E, r23
    1260:	60 93 2d 02 	sts	0x022D, r22
    1264:	6b cf       	rjmp	.-298    	; 0x113c <gc_execute_line+0x5f0>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    1266:	ca 01       	movw	r24, r20
    1268:	b9 01       	movw	r22, r18
    126a:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
    126e:	7b ab       	std	Y+51, r23	; 0x33
    1270:	6a ab       	std	Y+50, r22	; 0x32
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    1272:	89 e0       	ldi	r24, 0x09	; 9
    1274:	80 93 0b 02 	sts	0x020B, r24
    1278:	61 cf       	rjmp	.-318    	; 0x113c <gc_execute_line+0x5f0>

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
    127a:	20 93 06 02 	sts	0x0206, r18
    127e:	30 93 07 02 	sts	0x0207, r19
    1282:	40 93 08 02 	sts	0x0208, r20
    1286:	50 93 09 02 	sts	0x0209, r21
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	98 ab       	std	Y+48, r25	; 0x30
    128e:	56 cf       	rjmp	.-340    	; 0x113c <gc_execute_line+0x5f0>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    1290:	80 91 0e 02 	lds	r24, 0x020E
    1294:	88 23       	and	r24, r24
    1296:	e9 f4       	brne	.+58     	; 0x12d2 <gc_execute_line+0x786>
    1298:	f9 a9       	ldd	r31, Y+49	; 0x31
    129a:	ff 23       	and	r31, r31
    129c:	d1 f4       	brne	.+52     	; 0x12d2 <gc_execute_line+0x786>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
    129e:	68 8d       	ldd	r22, Y+24	; 0x18
    12a0:	79 8d       	ldd	r23, Y+25	; 0x19
    12a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12a6:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    12aa:	68 8f       	std	Y+24, r22	; 0x18
    12ac:	79 8f       	std	Y+25, r23	; 0x19
    12ae:	8a 8f       	std	Y+26, r24	; 0x1a
    12b0:	9b 8f       	std	Y+27, r25	; 0x1b
    12b2:	44 cf       	rjmp	.-376    	; 0x113c <gc_execute_line+0x5f0>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    12b4:	e0 2f       	mov	r30, r16
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	e8 55       	subi	r30, 0x58	; 88
    12ba:	f0 40       	sbci	r31, 0x00	; 0
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	e8 0d       	add	r30, r8
    12c6:	f9 1d       	adc	r31, r9
    12c8:	23 87       	std	Z+11, r18	; 0x0b
    12ca:	34 87       	std	Z+12, r19	; 0x0c
    12cc:	45 87       	std	Z+13, r20	; 0x0d
    12ce:	56 87       	std	Z+14, r21	; 0x0e
    12d0:	35 cf       	rjmp	.-406    	; 0x113c <gc_execute_line+0x5f0>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
    12d2:	28 8f       	std	Y+24, r18	; 0x18
    12d4:	39 8f       	std	Y+25, r19	; 0x19
    12d6:	4a 8f       	std	Y+26, r20	; 0x1a
    12d8:	5b 8f       	std	Y+27, r21	; 0x1b
    12da:	30 cf       	rjmp	.-416    	; 0x113c <gc_execute_line+0x5f0>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    12dc:	80 91 0b 02 	lds	r24, 0x020B
    12e0:	88 23       	and	r24, r24
    12e2:	89 f4       	brne	.+34     	; 0x1306 <gc_execute_line+0x7ba>
          gc.seek_rate = unit_converted_value/60;
    12e4:	ca 01       	movw	r24, r20
    12e6:	b9 01       	movw	r22, r18
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e7       	ldi	r20, 0x70	; 112
    12ee:	52 e4       	ldi	r21, 0x42	; 66
    12f0:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    12f4:	60 93 18 02 	sts	0x0218, r22
    12f8:	70 93 19 02 	sts	0x0219, r23
    12fc:	80 93 1a 02 	sts	0x021A, r24
    1300:	90 93 1b 02 	sts	0x021B, r25
    1304:	1b cf       	rjmp	.-458    	; 0x113c <gc_execute_line+0x5f0>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
    1306:	ca 01       	movw	r24, r20
    1308:	b9 01       	movw	r22, r18
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e7       	ldi	r20, 0x70	; 112
    1310:	52 e4       	ldi	r21, 0x42	; 66
    1312:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    1316:	60 93 14 02 	sts	0x0214, r22
    131a:	70 93 15 02 	sts	0x0215, r23
    131e:	80 93 16 02 	sts	0x0216, r24
    1322:	90 93 17 02 	sts	0x0217, r25
    1326:	0a cf       	rjmp	.-492    	; 0x113c <gc_execute_line+0x5f0>

    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1328:	80 91 0a 02 	lds	r24, 0x020A
    132c:	88 23       	and	r24, r24
    132e:	09 f0       	breq	.+2      	; 0x1332 <gc_execute_line+0x7e6>
    1330:	84 cc       	rjmp	.-1784   	; 0xc3a <gc_execute_line+0xee>
    
  // Update spindle state
  if (gc.spindle_direction) {
    1332:	80 91 10 02 	lds	r24, 0x0210
    1336:	90 91 11 02 	lds	r25, 0x0211
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	09 f4       	brne	.+2      	; 0x1340 <gc_execute_line+0x7f4>
    133e:	5d c0       	rjmp	.+186    	; 0x13fa <gc_execute_line+0x8ae>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    1340:	40 91 2d 02 	lds	r20, 0x022D
    1344:	50 91 2e 02 	lds	r21, 0x022E
    1348:	66 27       	eor	r22, r22
    134a:	57 fd       	sbrc	r21, 7
    134c:	60 95       	com	r22
    134e:	76 2f       	mov	r23, r22
    1350:	0e 94 84 17 	call	0x2f08	; 0x2f08 <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    1354:	80 91 12 02 	lds	r24, 0x0212
    1358:	90 91 13 02 	lds	r25, 0x0213
    135c:	89 2b       	or	r24, r25
    135e:	09 f4       	brne	.+2      	; 0x1362 <gc_execute_line+0x816>
    1360:	4f c0       	rjmp	.+158    	; 0x1400 <gc_execute_line+0x8b4>
  	coolant_flood(TRUE);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 59 03 	call	0x6b2	; 0x6b2 <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    136a:	b8 a9       	ldd	r27, Y+48	; 0x30
    136c:	b1 30       	cpi	r27, 0x01	; 1
    136e:	09 f4       	brne	.+2      	; 0x1372 <gc_execute_line+0x826>
    1370:	63 c0       	rjmp	.+198    	; 0x1438 <gc_execute_line+0x8ec>
    1372:	b1 30       	cpi	r27, 0x01	; 1
    1374:	08 f0       	brcs	.+2      	; 0x1378 <gc_execute_line+0x82c>
    1376:	49 c0       	rjmp	.+146    	; 0x140a <gc_execute_line+0x8be>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1378:	80 91 0b 02 	lds	r24, 0x020B
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	09 f4       	brne	.+2      	; 0x1382 <gc_execute_line+0x836>
    1380:	7a c0       	rjmp	.+244    	; 0x1476 <gc_execute_line+0x92a>
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	08 f0       	brcs	.+2      	; 0x1388 <gc_execute_line+0x83c>
    1386:	6f c0       	rjmp	.+222    	; 0x1466 <gc_execute_line+0x91a>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    1388:	00 d0       	rcall	.+0      	; 0x138a <gc_execute_line+0x83e>
    138a:	00 d0       	rcall	.+0      	; 0x138c <gc_execute_line+0x840>
    138c:	6c 85       	ldd	r22, Y+12	; 0x0c
    138e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1390:	8e 85       	ldd	r24, Y+14	; 0x0e
    1392:	9f 85       	ldd	r25, Y+15	; 0x0f
    1394:	28 89       	ldd	r18, Y+16	; 0x10
    1396:	39 89       	ldd	r19, Y+17	; 0x11
    1398:	4a 89       	ldd	r20, Y+18	; 0x12
    139a:	5b 89       	ldd	r21, Y+19	; 0x13
    139c:	ec 88       	ldd	r14, Y+20	; 0x14
    139e:	fd 88       	ldd	r15, Y+21	; 0x15
    13a0:	0e 89       	ldd	r16, Y+22	; 0x16
    13a2:	1f 89       	ldd	r17, Y+23	; 0x17
    13a4:	a8 8c       	ldd	r10, Y+24	; 0x18
    13a6:	b9 8c       	ldd	r11, Y+25	; 0x19
    13a8:	ca 8c       	ldd	r12, Y+26	; 0x1a
    13aa:	db 8c       	ldd	r13, Y+27	; 0x1b
    13ac:	60 90 18 02 	lds	r6, 0x0218
    13b0:	70 90 19 02 	lds	r7, 0x0219
    13b4:	80 90 1a 02 	lds	r8, 0x021A
    13b8:	90 90 1b 02 	lds	r9, 0x021B
    13bc:	ad b7       	in	r26, 0x3d	; 61
    13be:	be b7       	in	r27, 0x3e	; 62
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	6d 92       	st	X+, r6
    13c4:	7d 92       	st	X+, r7
    13c6:	8d 92       	st	X+, r8
    13c8:	9c 92       	st	X, r9
    13ca:	14 97       	sbiw	r26, 0x04	; 4
    13cc:	16 96       	adiw	r26, 0x06	; 6
    13ce:	1c 92       	st	X, r1
    13d0:	1e 92       	st	-X, r1
    13d2:	15 97       	sbiw	r26, 0x05	; 5
    13d4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <plan_buffer_line>
    13d8:	ed b7       	in	r30, 0x3d	; 61
    13da:	fe b7       	in	r31, 0x3e	; 62
    13dc:	36 96       	adiw	r30, 0x06	; 6
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	fe bf       	out	0x3e, r31	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    13e8:	ac e1       	ldi	r26, 0x1C	; 28
    13ea:	b2 e0       	ldi	r27, 0x02	; 2
    13ec:	f1 01       	movw	r30, r2
    13ee:	80 e1       	ldi	r24, 0x10	; 16
    13f0:	01 90       	ld	r0, Z+
    13f2:	0d 92       	st	X+, r0
    13f4:	81 50       	subi	r24, 0x01	; 1
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <gc_execute_line+0x8a4>
    13f8:	27 cd       	rjmp	.-1458   	; 0xe48 <gc_execute_line+0x2fc>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    13fa:	0e 94 94 17 	call	0x2f28	; 0x2f28 <spindle_stop>
    13fe:	aa cf       	rjmp	.-172    	; 0x1354 <gc_execute_line+0x808>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 59 03 	call	0x6b2	; 0x6b2 <coolant_flood>
    1408:	b0 cf       	rjmp	.-160    	; 0x136a <gc_execute_line+0x81e>
  }
  
  // Perform any physical actions
  switch (next_action) {
    140a:	b2 30       	cpi	r27, 0x02	; 2
    140c:	21 f1       	breq	.+72     	; 0x1456 <gc_execute_line+0x90a>
    140e:	b3 30       	cpi	r27, 0x03	; 3
    1410:	59 f7       	brne	.-42     	; 0x13e8 <gc_execute_line+0x89c>
	  rotate_head( head);
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1412:	6c 85       	ldd	r22, Y+12	; 0x0c
    1414:	7d 85       	ldd	r23, Y+13	; 0x0d
    1416:	8e 85       	ldd	r24, Y+14	; 0x0e
    1418:	9f 85       	ldd	r25, Y+15	; 0x0f
    141a:	28 89       	ldd	r18, Y+16	; 0x10
    141c:	39 89       	ldd	r19, Y+17	; 0x11
    141e:	4a 89       	ldd	r20, Y+18	; 0x12
    1420:	5b 89       	ldd	r21, Y+19	; 0x13
    1422:	ec 88       	ldd	r14, Y+20	; 0x14
    1424:	fd 88       	ldd	r15, Y+21	; 0x15
    1426:	0e 89       	ldd	r16, Y+22	; 0x16
    1428:	1f 89       	ldd	r17, Y+23	; 0x17
    142a:	a8 8c       	ldd	r10, Y+24	; 0x18
    142c:	b9 8c       	ldd	r11, Y+25	; 0x19
    142e:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1430:	db 8c       	ldd	r13, Y+27	; 0x1b
    1432:	0e 94 80 0c 	call	0x1900	; 0x1900 <plan_set_current>
    1436:	d8 cf       	rjmp	.-80     	; 0x13e8 <gc_execute_line+0x89c>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    1438:	68 85       	ldd	r22, Y+8	; 0x08
    143a:	79 85       	ldd	r23, Y+9	; 0x09
    143c:	8a 85       	ldd	r24, Y+10	; 0x0a
    143e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	4a e7       	ldi	r20, 0x7A	; 122
    1446:	54 e4       	ldi	r21, 0x44	; 68
    1448:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    144c:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
    1450:	0e 94 03 0b 	call	0x1606	; 0x1606 <mc_dwell>
    1454:	c9 cf       	rjmp	.-110    	; 0x13e8 <gc_execute_line+0x89c>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    1456:	0e 94 00 0b 	call	0x1600	; 0x1600 <mc_go_home>
    145a:	80 e1       	ldi	r24, 0x10	; 16
    145c:	f1 01       	movw	r30, r2
    145e:	11 92       	st	Z+, r1
    1460:	8a 95       	dec	r24
    1462:	e9 f7       	brne	.-6      	; 0x145e <gc_execute_line+0x912>
    1464:	c1 cf       	rjmp	.-126    	; 0x13e8 <gc_execute_line+0x89c>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1466:	89 30       	cpi	r24, 0x09	; 9
    1468:	09 f0       	breq	.+2      	; 0x146c <gc_execute_line+0x920>
    146a:	be cf       	rjmp	.-132    	; 0x13e8 <gc_execute_line+0x89c>
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    146c:	8a a9       	ldd	r24, Y+50	; 0x32
    146e:	9b a9       	ldd	r25, Y+51	; 0x33
    1470:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <rotate_head>
    1474:	b9 cf       	rjmp	.-142    	; 0x13e8 <gc_execute_line+0x89c>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    1476:	8c 85       	ldd	r24, Y+12	; 0x0c
    1478:	9d 85       	ldd	r25, Y+13	; 0x0d
    147a:	ae 85       	ldd	r26, Y+14	; 0x0e
    147c:	bf 85       	ldd	r27, Y+15	; 0x0f
    147e:	8c a7       	std	Y+44, r24	; 0x2c
    1480:	9d a7       	std	Y+45, r25	; 0x2d
    1482:	ae a7       	std	Y+46, r26	; 0x2e
    1484:	bf a7       	std	Y+47, r27	; 0x2f
    1486:	68 88       	ldd	r6, Y+16	; 0x10
    1488:	79 88       	ldd	r7, Y+17	; 0x11
    148a:	8a 88       	ldd	r8, Y+18	; 0x12
    148c:	9b 88       	ldd	r9, Y+19	; 0x13
    148e:	ec 88       	ldd	r14, Y+20	; 0x14
    1490:	fd 88       	ldd	r15, Y+21	; 0x15
    1492:	0e 89       	ldd	r16, Y+22	; 0x16
    1494:	1f 89       	ldd	r17, Y+23	; 0x17
    1496:	a8 8c       	ldd	r10, Y+24	; 0x18
    1498:	b9 8c       	ldd	r11, Y+25	; 0x19
    149a:	ca 8c       	ldd	r12, Y+26	; 0x1a
    149c:	db 8c       	ldd	r13, Y+27	; 0x1b
    149e:	60 91 0c 02 	lds	r22, 0x020C
    14a2:	66 23       	and	r22, r22
    14a4:	61 f4       	brne	.+24     	; 0x14be <gc_execute_line+0x972>
    14a6:	90 91 14 02 	lds	r25, 0x0214
    14aa:	9c ab       	std	Y+52, r25	; 0x34
    14ac:	a0 91 15 02 	lds	r26, 0x0215
    14b0:	ad ab       	std	Y+53, r26	; 0x35
    14b2:	b0 91 16 02 	lds	r27, 0x0216
    14b6:	be ab       	std	Y+54, r27	; 0x36
    14b8:	e0 91 17 02 	lds	r30, 0x0217
    14bc:	ef ab       	std	Y+55, r30	; 0x37
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <gc_execute_line+0x974>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <gc_execute_line+0x976>
    14c2:	4d b6       	in	r4, 0x3d	; 61
    14c4:	5e b6       	in	r5, 0x3e	; 62
    14c6:	08 94       	sec
    14c8:	41 1c       	adc	r4, r1
    14ca:	51 1c       	adc	r5, r1
    14cc:	2c a9       	ldd	r18, Y+52	; 0x34
    14ce:	3d a9       	ldd	r19, Y+53	; 0x35
    14d0:	4e a9       	ldd	r20, Y+54	; 0x36
    14d2:	5f a9       	ldd	r21, Y+55	; 0x37
    14d4:	c9 01       	movw	r24, r18
    14d6:	da 01       	movw	r26, r20
    14d8:	ed b7       	in	r30, 0x3d	; 61
    14da:	fe b7       	in	r31, 0x3e	; 62
    14dc:	81 83       	std	Z+1, r24	; 0x01
    14de:	92 83       	std	Z+2, r25	; 0x02
    14e0:	a3 83       	std	Z+3, r26	; 0x03
    14e2:	b4 83       	std	Z+4, r27	; 0x04
    14e4:	d2 01       	movw	r26, r4
    14e6:	14 96       	adiw	r26, 0x04	; 4
    14e8:	6c 93       	st	X, r22
    14ea:	14 97       	sbiw	r26, 0x04	; 4
    14ec:	15 96       	adiw	r26, 0x05	; 5
    14ee:	1c 92       	st	X, r1
    14f0:	6c a5       	ldd	r22, Y+44	; 0x2c
    14f2:	7d a5       	ldd	r23, Y+45	; 0x2d
    14f4:	8e a5       	ldd	r24, Y+46	; 0x2e
    14f6:	9f a5       	ldd	r25, Y+47	; 0x2f
    14f8:	a4 01       	movw	r20, r8
    14fa:	93 01       	movw	r18, r6
    14fc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <plan_buffer_line>
    1500:	ed b7       	in	r30, 0x3d	; 61
    1502:	fe b7       	in	r31, 0x3e	; 62
    1504:	36 96       	adiw	r30, 0x06	; 6
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	fe bf       	out	0x3e, r31	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	ed bf       	out	0x3d, r30	; 61
    1510:	6b cf       	rjmp	.-298    	; 0x13e8 <gc_execute_line+0x89c>

00001512 <theta>:


// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1512:	af 92       	push	r10
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	79 01       	movw	r14, r18
    1524:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    1526:	5f 77       	andi	r21, 0x7F	; 127
    1528:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    152c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <atan>
    1530:	5b 01       	movw	r10, r22
    1532:	6c 01       	movw	r12, r24
  if (y>0) {
    1534:	c8 01       	movw	r24, r16
    1536:	b7 01       	movw	r22, r14
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__gesf2>
    1544:	18 16       	cp	r1, r24
    1546:	5c f4       	brge	.+22     	; 0x155e <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
    1548:	b5 01       	movw	r22, r10
    154a:	c6 01       	movw	r24, r12
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	bf 90       	pop	r11
    155a:	af 90       	pop	r10
    155c:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
    155e:	c6 01       	movw	r24, r12
    1560:	b5 01       	movw	r22, r10
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__gesf2>
    156e:	18 16       	cp	r1, r24
    1570:	5c f4       	brge	.+22     	; 0x1588 <theta+0x76>
    {
      return(M_PI-theta);
    1572:	6b ed       	ldi	r22, 0xDB	; 219
    1574:	7f e0       	ldi	r23, 0x0F	; 15
    1576:	89 e4       	ldi	r24, 0x49	; 73
    1578:	90 e4       	ldi	r25, 0x40	; 64
    157a:	a6 01       	movw	r20, r12
    157c:	95 01       	movw	r18, r10
    157e:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1582:	5b 01       	movw	r10, r22
    1584:	6c 01       	movw	r12, r24
    1586:	e0 cf       	rjmp	.-64     	; 0x1548 <theta+0x36>
    } else {
      return(-M_PI-theta);
    1588:	6b ed       	ldi	r22, 0xDB	; 219
    158a:	7f e0       	ldi	r23, 0x0F	; 15
    158c:	89 e4       	ldi	r24, 0x49	; 73
    158e:	90 ec       	ldi	r25, 0xC0	; 192
    1590:	a6 01       	movw	r20, r12
    1592:	95 01       	movw	r18, r10
    1594:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1598:	5b 01       	movw	r10, r22
    159a:	6c 01       	movw	r12, r24
    159c:	d5 cf       	rjmp	.-86     	; 0x1548 <theta+0x36>

0000159e <main>:
// stepper interrupt ack to host
extern char ackHost;

int main(void)
{
  sp_init();        
    159e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <sp_init>
  settings_init();  
    15a2:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <settings_init>
  plan_init();      
    15a6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <plan_init>
  st_init();        
    15aa:	0e 94 a8 18 	call	0x3150	; 0x3150 <st_init>
  limits_init();
    15ae:	0e 94 8d 19 	call	0x331a	; 0x331a <limits_init>
  spindle_init();   
    15b2:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <spindle_init>
  coolant_init();
    15b6:	0e 94 57 03 	call	0x6ae	; 0x6ae <coolant_init>
  atc_init();
    15ba:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <atc_init>
  head_init();
    15be:	0e 94 30 20 	call	0x4060	; 0x4060 <head_init>
  vacuum_init();
    15c2:	0e 94 38 21 	call	0x4270	; 0x4270 <vacuum_init>
  panel_init();
    15c6:	0e 94 84 20 	call	0x4108	; 0x4108 <panel_init>
  gc_init();
    15ca:	0e 94 68 05 	call	0xad0	; 0xad0 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n"));
    15ce:	89 e2       	ldi	r24, 0x29	; 41
    15d0:	93 e0       	ldi	r25, 0x03	; 3
    15d2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <main+0x42>
	if( ackHost != 0 ) {
		serialWrite( ackHost );
		ackHost = 0;
	}

    sp_process(); // ... process the serial protocol
    15d8:	0e 94 a8 14 	call	0x2950	; 0x2950 <sp_process>

	process_panel(); // check the panel
    15dc:	0e 94 05 21 	call	0x420a	; 0x420a <process_panel>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    15e0:	83 b7       	in	r24, 0x33	; 51
    15e2:	81 60       	ori	r24, 0x01	; 1
    15e4:	83 bf       	out	0x33, r24	; 51
    15e6:	88 95       	sleep
    15e8:	83 b7       	in	r24, 0x33	; 51
    15ea:	8e 7f       	andi	r24, 0xFE	; 254
    15ec:	83 bf       	out	0x33, r24	; 51

	if( ackHost != 0 ) {
    15ee:	80 91 54 05 	lds	r24, 0x0554
    15f2:	88 23       	and	r24, r24
    15f4:	89 f3       	breq	.-30     	; 0x15d8 <main+0x3a>
		serialWrite( ackHost );
    15f6:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <serialWrite>
		ackHost = 0;
    15fa:	10 92 54 05 	sts	0x0554, r1
    15fe:	ec cf       	rjmp	.-40     	; 0x15d8 <main+0x3a>

00001600 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    1600:	0e 94 c6 19 	call	0x338c	; 0x338c <st_go_home>
}
    1604:	08 95       	ret

00001606 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	7b 01       	movw	r14, r22
    1618:	8c 01       	movw	r16, r24
  st_synchronize();
    161a:	0e 94 44 1a 	call	0x3488	; 0x3488 <st_synchronize>
  _delay_ms(milliseconds);
    161e:	c8 01       	movw	r24, r16
    1620:	b7 01       	movw	r22, r14
    1622:	0e 94 be 2c 	call	0x597c	; 0x597c <__floatunsisf>
    1626:	5b 01       	movw	r10, r22
    1628:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a e7       	ldi	r20, 0x7A	; 122
    1630:	55 e4       	ldi	r21, 0x45	; 69
    1632:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1636:	7b 01       	movw	r14, r22
    1638:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
    1646:	88 23       	and	r24, r24
    1648:	7c f1       	brlt	.+94     	; 0x16a8 <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    164a:	c8 01       	movw	r24, r16
    164c:	b7 01       	movw	r22, r14
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__gesf2>
    165a:	18 16       	cp	r1, r24
    165c:	ac f4       	brge	.+42     	; 0x1688 <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165e:	c6 01       	movw	r24, r12
    1660:	b5 01       	movw	r22, r10
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    166e:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
    1672:	cb 01       	movw	r24, r22
		while(__ticks)
    1674:	67 2b       	or	r22, r23
    1676:	79 f0       	breq	.+30     	; 0x1696 <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1678:	20 e9       	ldi	r18, 0x90	; 144
    167a:	31 e0       	ldi	r19, 0x01	; 1
    167c:	f9 01       	movw	r30, r18
    167e:	31 97       	sbiw	r30, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1682:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1684:	d9 f7       	brne	.-10     	; 0x167c <mc_dwell+0x76>
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	c8 01       	movw	r24, r16
    168a:	b7 01       	movw	r22, r14
    168c:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
    1690:	cb 01       	movw	r24, r22
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <mc_dwell+0x8c>
}
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
    169e:	df 90       	pop	r13
    16a0:	cf 90       	pop	r12
    16a2:	bf 90       	pop	r11
    16a4:	af 90       	pop	r10
    16a6:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	f1 cf       	rjmp	.-30     	; 0x1690 <mc_dwell+0x8a>

000016ae <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    16ae:	fc 01       	movw	r30, r24
    16b0:	60 91 af 06 	lds	r22, 0x06AF
    16b4:	70 91 b0 06 	lds	r23, 0x06B0
    16b8:	80 91 b1 06 	lds	r24, 0x06B1
    16bc:	90 91 b2 06 	lds	r25, 0x06B2
    16c0:	21 a5       	ldd	r18, Z+41	; 0x29
    16c2:	32 a5       	ldd	r19, Z+42	; 0x2a
    16c4:	43 a5       	ldd	r20, Z+43	; 0x2b
    16c6:	54 a5       	ldd	r21, Z+44	; 0x2c
    16c8:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    16cc:	08 95       	ret

000016ce <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    16ce:	80 91 20 05 	lds	r24, 0x0520
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	08 95       	ret

000016d6 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    16d6:	20 91 0c 05 	lds	r18, 0x050C
    16da:	30 91 0d 05 	lds	r19, 0x050D
    16de:	80 91 0e 05 	lds	r24, 0x050E
    16e2:	90 91 0f 05 	lds	r25, 0x050F
    16e6:	28 17       	cp	r18, r24
    16e8:	39 07       	cpc	r19, r25
    16ea:	69 f0       	breq	.+26     	; 0x1706 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    16ec:	80 91 0e 05 	lds	r24, 0x050E
    16f0:	90 91 0f 05 	lds	r25, 0x050F
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	6a e0       	ldi	r22, 0x0A	; 10
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
    16fe:	90 93 0f 05 	sts	0x050F, r25
    1702:	80 93 0e 05 	sts	0x050E, r24
    1706:	08 95       	ret

00001708 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1708:	20 91 0c 05 	lds	r18, 0x050C
    170c:	30 91 0d 05 	lds	r19, 0x050D
    1710:	80 91 0e 05 	lds	r24, 0x050E
    1714:	90 91 0f 05 	lds	r25, 0x050F
    1718:	28 17       	cp	r18, r24
    171a:	39 07       	cpc	r19, r25
    171c:	d1 f0       	breq	.+52     	; 0x1752 <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    171e:	20 91 0e 05 	lds	r18, 0x050E
    1722:	30 91 0f 05 	lds	r19, 0x050F
    1726:	c9 01       	movw	r24, r18
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	ac 01       	movw	r20, r24
    1736:	44 0f       	add	r20, r20
    1738:	55 1f       	adc	r21, r21
    173a:	44 0f       	add	r20, r20
    173c:	55 1f       	adc	r21, r21
    173e:	44 0f       	add	r20, r20
    1740:	55 1f       	adc	r21, r21
    1742:	48 0f       	add	r20, r24
    1744:	59 1f       	adc	r21, r25
    1746:	42 0f       	add	r20, r18
    1748:	53 1f       	adc	r21, r19
    174a:	4e 5c       	subi	r20, 0xCE	; 206
    174c:	5d 4f       	sbci	r21, 0xFD	; 253
}
    174e:	ca 01       	movw	r24, r20
    1750:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    1756:	ca 01       	movw	r24, r20
    1758:	08 95       	ret

0000175a <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    175a:	4f 92       	push	r4
    175c:	5f 92       	push	r5
    175e:	6f 92       	push	r6
    1760:	7f 92       	push	r7
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	ec 01       	movw	r28, r24
    177c:	4b 01       	movw	r8, r22
  if(!current) { return; }
    177e:	61 15       	cp	r22, r1
    1780:	71 05       	cpc	r23, r1
    1782:	99 f0       	breq	.+38     	; 0x17aa <planner_forward_pass_kernel+0x50>
  if(previous) {
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	89 f0       	breq	.+34     	; 0x17aa <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1788:	e9 a8       	ldd	r14, Y+49	; 0x31
    178a:	fa a8       	ldd	r15, Y+50	; 0x32
    178c:	0b a9       	ldd	r16, Y+51	; 0x33
    178e:	1c a9       	ldd	r17, Y+52	; 0x34
    1790:	fb 01       	movw	r30, r22
    1792:	41 a8       	ldd	r4, Z+49	; 0x31
    1794:	52 a8       	ldd	r5, Z+50	; 0x32
    1796:	63 a8       	ldd	r6, Z+51	; 0x33
    1798:	74 a8       	ldd	r7, Z+52	; 0x34
    179a:	c8 01       	movw	r24, r16
    179c:	b7 01       	movw	r22, r14
    179e:	a3 01       	movw	r20, r6
    17a0:	92 01       	movw	r18, r4
    17a2:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	8c f0       	brlt	.+34     	; 0x17cc <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	9f 90       	pop	r9
    17c0:	8f 90       	pop	r8
    17c2:	7f 90       	pop	r7
    17c4:	6f 90       	pop	r6
    17c6:	5f 90       	pop	r5
    17c8:	4f 90       	pop	r4
    17ca:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    17cc:	f4 01       	movw	r30, r8
    17ce:	a1 a4       	ldd	r10, Z+41	; 0x29
    17d0:	b2 a4       	ldd	r11, Z+42	; 0x2a
    17d2:	c3 a4       	ldd	r12, Z+43	; 0x2b
    17d4:	d4 a4       	ldd	r13, Z+44	; 0x2c
    17d6:	c8 01       	movw	r24, r16
    17d8:	b7 01       	movw	r22, r14
    17da:	a6 01       	movw	r20, r12
    17dc:	95 01       	movw	r18, r10
    17de:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    17e6:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    17ea:	7b 01       	movw	r14, r22
    17ec:	8c 01       	movw	r16, r24
    17ee:	20 91 ab 06 	lds	r18, 0x06AB
    17f2:	30 91 ac 06 	lds	r19, 0x06AC
    17f6:	40 91 ad 06 	lds	r20, 0x06AD
    17fa:	50 91 ae 06 	lds	r21, 0x06AE
    17fe:	50 58       	subi	r21, 0x80	; 128
    1800:	ca 01       	movw	r24, r20
    1802:	b9 01       	movw	r22, r18
    1804:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e7       	ldi	r20, 0x70	; 112
    180e:	52 e4       	ldi	r21, 0x42	; 66
    1810:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e7       	ldi	r20, 0x70	; 112
    181a:	52 ec       	ldi	r21, 0xC2	; 194
    181c:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1820:	2d a5       	ldd	r18, Y+45	; 0x2d
    1822:	3e a5       	ldd	r19, Y+46	; 0x2e
    1824:	4f a5       	ldd	r20, Y+47	; 0x2f
    1826:	58 a9       	ldd	r21, Y+48	; 0x30
    1828:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	c8 01       	movw	r24, r16
    1832:	b7 01       	movw	r22, r14
    1834:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1838:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    183c:	a6 01       	movw	r20, r12
    183e:	95 01       	movw	r18, r10
    1840:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    1844:	7b 01       	movw	r14, r22
    1846:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1848:	c3 01       	movw	r24, r6
    184a:	b2 01       	movw	r22, r4
    184c:	a8 01       	movw	r20, r16
    184e:	97 01       	movw	r18, r14
    1850:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__gesf2>
    1854:	18 16       	cp	r1, r24
    1856:	0c f0       	brlt	.+2      	; 0x185a <planner_forward_pass_kernel+0x100>
    1858:	a8 cf       	rjmp	.-176    	; 0x17aa <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    185a:	f4 01       	movw	r30, r8
    185c:	e1 aa       	std	Z+49, r14	; 0x31
    185e:	f2 aa       	std	Z+50, r15	; 0x32
    1860:	03 ab       	std	Z+51, r16	; 0x33
    1862:	14 ab       	std	Z+52, r17	; 0x34
    1864:	a2 cf       	rjmp	.-188    	; 0x17aa <planner_forward_pass_kernel+0x50>

00001866 <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1872:	80 91 0e 05 	lds	r24, 0x050E
    1876:	90 91 0f 05 	lds	r25, 0x050F
    187a:	48 2f       	mov	r20, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    187c:	08 2f       	mov	r16, r24
    187e:	11 27       	eor	r17, r17
    1880:	07 fd       	sbrc	r16, 7
    1882:	10 95       	com	r17
    1884:	80 91 0c 05 	lds	r24, 0x050C
    1888:	90 91 0d 05 	lds	r25, 0x050D
    188c:	08 17       	cp	r16, r24
    188e:	19 07       	cpc	r17, r25
    1890:	91 f1       	breq	.+100    	; 0x18f6 <planner_forward_pass+0x90>
    1892:	ee 24       	eor	r14, r14
    1894:	ff 24       	eor	r15, r15
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	01 c0       	rjmp	.+2      	; 0x189e <planner_forward_pass+0x38>
    189c:	7e 01       	movw	r14, r28
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    189e:	89 e4       	ldi	r24, 0x49	; 73
    18a0:	48 02       	muls	r20, r24
    18a2:	e0 01       	movw	r28, r0
    18a4:	11 24       	eor	r1, r1
    18a6:	ce 5c       	subi	r28, 0xCE	; 206
    18a8:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    18aa:	c9 01       	movw	r24, r18
    18ac:	b7 01       	movw	r22, r14
    18ae:	ae 01       	movw	r20, r28
    18b0:	0e 94 ad 0b 	call	0x175a	; 0x175a <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    18b4:	c8 01       	movw	r24, r16
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	6a e0       	ldi	r22, 0x0A	; 10
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
    18c0:	48 2f       	mov	r20, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    18c2:	08 2f       	mov	r16, r24
    18c4:	11 27       	eor	r17, r17
    18c6:	07 fd       	sbrc	r16, 7
    18c8:	10 95       	com	r17
    18ca:	80 91 0c 05 	lds	r24, 0x050C
    18ce:	90 91 0d 05 	lds	r25, 0x050D
    18d2:	97 01       	movw	r18, r14
    18d4:	08 17       	cp	r16, r24
    18d6:	19 07       	cpc	r17, r25
    18d8:	09 f7       	brne	.-62     	; 0x189c <planner_forward_pass+0x36>
    18da:	b7 01       	movw	r22, r14
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    18dc:	cb 01       	movw	r24, r22
    18de:	be 01       	movw	r22, r28
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	0e 94 ad 0b 	call	0x175a	; 0x175a <planner_forward_pass_kernel>
}
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	ff 90       	pop	r15
    18f2:	ef 90       	pop	r14
    18f4:	08 95       	ret
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    18f6:	c0 e0       	ldi	r28, 0x00	; 0
    18f8:	d0 e0       	ldi	r29, 0x00	; 0
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	ee cf       	rjmp	.-36     	; 0x18dc <planner_forward_pass+0x76>

00001900 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1900:	2f 92       	push	r2
    1902:	3f 92       	push	r3
    1904:	4f 92       	push	r4
    1906:	5f 92       	push	r5
    1908:	6f 92       	push	r6
    190a:	7f 92       	push	r7
    190c:	8f 92       	push	r8
    190e:	9f 92       	push	r9
    1910:	af 92       	push	r10
    1912:	bf 92       	push	r11
    1914:	cf 92       	push	r12
    1916:	df 92       	push	r13
    1918:	ef 92       	push	r14
    191a:	ff 92       	push	r15
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	3b 01       	movw	r6, r22
    1922:	4c 01       	movw	r8, r24
    1924:	19 01       	movw	r2, r18
    1926:	2a 01       	movw	r4, r20
	st_synchronize();
    1928:	0e 94 44 1a 	call	0x3488	; 0x3488 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    192c:	c4 01       	movw	r24, r8
    192e:	b3 01       	movw	r22, r6
    1930:	20 91 8d 06 	lds	r18, 0x068D
    1934:	30 91 8e 06 	lds	r19, 0x068E
    1938:	40 91 8f 06 	lds	r20, 0x068F
    193c:	50 91 90 06 	lds	r21, 0x0690
    1940:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1944:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    1948:	e0 e1       	ldi	r30, 0x10	; 16
    194a:	8e 2e       	mov	r8, r30
    194c:	e5 e0       	ldi	r30, 0x05	; 5
    194e:	9e 2e       	mov	r9, r30
    1950:	60 93 10 05 	sts	0x0510, r22
    1954:	70 93 11 05 	sts	0x0511, r23
    1958:	80 93 12 05 	sts	0x0512, r24
    195c:	90 93 13 05 	sts	0x0513, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1960:	c2 01       	movw	r24, r4
    1962:	b1 01       	movw	r22, r2
    1964:	20 91 91 06 	lds	r18, 0x0691
    1968:	30 91 92 06 	lds	r19, 0x0692
    196c:	40 91 93 06 	lds	r20, 0x0693
    1970:	50 91 94 06 	lds	r21, 0x0694
    1974:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1978:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    197c:	f4 01       	movw	r30, r8
    197e:	34 96       	adiw	r30, 0x04	; 4
    1980:	60 93 14 05 	sts	0x0514, r22
    1984:	71 83       	std	Z+1, r23	; 0x01
    1986:	82 83       	std	Z+2, r24	; 0x02
    1988:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    198a:	c8 01       	movw	r24, r16
    198c:	b7 01       	movw	r22, r14
    198e:	20 91 95 06 	lds	r18, 0x0695
    1992:	30 91 96 06 	lds	r19, 0x0696
    1996:	40 91 97 06 	lds	r20, 0x0697
    199a:	50 91 98 06 	lds	r21, 0x0698
    199e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    19a2:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    19a6:	f4 01       	movw	r30, r8
    19a8:	38 96       	adiw	r30, 0x08	; 8
    19aa:	60 93 18 05 	sts	0x0518, r22
    19ae:	71 83       	std	Z+1, r23	; 0x01
    19b0:	82 83       	std	Z+2, r24	; 0x02
    19b2:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    19b4:	c6 01       	movw	r24, r12
    19b6:	b5 01       	movw	r22, r10
    19b8:	20 91 99 06 	lds	r18, 0x0699
    19bc:	30 91 9a 06 	lds	r19, 0x069A
    19c0:	40 91 9b 06 	lds	r20, 0x069B
    19c4:	50 91 9c 06 	lds	r21, 0x069C
    19c8:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    19cc:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    19d0:	2c e0       	ldi	r18, 0x0C	; 12
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	82 0e       	add	r8, r18
    19d6:	93 1e       	adc	r9, r19
    19d8:	60 93 1c 05 	sts	0x051C, r22
    19dc:	f4 01       	movw	r30, r8
    19de:	71 83       	std	Z+1, r23	; 0x01
    19e0:	82 83       	std	Z+2, r24	; 0x02
    19e2:	93 83       	std	Z+3, r25	; 0x03
}
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	9f 90       	pop	r9
    19f6:	8f 90       	pop	r8
    19f8:	7f 90       	pop	r7
    19fa:	6f 90       	pop	r6
    19fc:	5f 90       	pop	r5
    19fe:	4f 90       	pop	r4
    1a00:	3f 90       	pop	r3
    1a02:	2f 90       	pop	r2
    1a04:	08 95       	ret

00001a06 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	80 91 20 05 	lds	r24, 0x0520
    1a12:	81 11       	cpse	r24, r1
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	20 97       	sbiw	r28, 0x00	; 0
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <plan_set_acceleration_manager_enabled+0x18>
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	98 17       	cp	r25, r24
    1a20:	31 f0       	breq	.+12     	; 0x1a2e <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    1a22:	0e 94 44 1a 	call	0x3488	; 0x3488 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    1a26:	10 92 20 05 	sts	0x0520, r1
    1a2a:	cd 2b       	or	r28, r29
    1a2c:	19 f4       	brne	.+6      	; 0x1a34 <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	80 93 20 05 	sts	0x0520, r24
  }
}
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

00001a40 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1a40:	10 92 0d 05 	sts	0x050D, r1
    1a44:	10 92 0c 05 	sts	0x050C, r1
  block_buffer_tail = 0;
    1a48:	10 92 0f 05 	sts	0x050F, r1
    1a4c:	10 92 0e 05 	sts	0x050E, r1
  plan_set_acceleration_manager_enabled(TRUE);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1a58:	80 e1       	ldi	r24, 0x10	; 16
    1a5a:	e0 e1       	ldi	r30, 0x10	; 16
    1a5c:	f5 e0       	ldi	r31, 0x05	; 5
    1a5e:	df 01       	movw	r26, r30
    1a60:	1d 92       	st	X+, r1
    1a62:	8a 95       	dec	r24
    1a64:	e9 f7       	brne	.-6      	; 0x1a60 <plan_init+0x20>
}
    1a66:	08 95       	ret

00001a68 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1a68:	2f 92       	push	r2
    1a6a:	3f 92       	push	r3
    1a6c:	4f 92       	push	r4
    1a6e:	5f 92       	push	r5
    1a70:	6f 92       	push	r6
    1a72:	7f 92       	push	r7
    1a74:	8f 92       	push	r8
    1a76:	9f 92       	push	r9
    1a78:	af 92       	push	r10
    1a7a:	bf 92       	push	r11
    1a7c:	cf 92       	push	r12
    1a7e:	df 92       	push	r13
    1a80:	ef 92       	push	r14
    1a82:	ff 92       	push	r15
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <planner_reverse_pass_kernel+0x26>
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <planner_reverse_pass_kernel+0x28>
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	8c 01       	movw	r16, r24
    1a96:	7e 83       	std	Y+6, r23	; 0x06
    1a98:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1a9a:	67 2b       	or	r22, r23
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <planner_reverse_pass_kernel+0x38>
    1a9e:	a3 c0       	rjmp	.+326    	; 0x1be6 <planner_reverse_pass_kernel+0x17e>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1aa0:	41 15       	cp	r20, r1
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <planner_reverse_pass_kernel+0x40>
    1aa6:	19 c1       	rjmp	.+562    	; 0x1cda <planner_reverse_pass_kernel+0x272>
    exit_factor = next->entry_factor;
    1aa8:	da 01       	movw	r26, r20
    1aaa:	d1 96       	adiw	r26, 0x31	; 49
    1aac:	8d 91       	ld	r24, X+
    1aae:	9d 91       	ld	r25, X+
    1ab0:	0d 90       	ld	r0, X+
    1ab2:	bc 91       	ld	r27, X
    1ab4:	a0 2d       	mov	r26, r0
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	ab 83       	std	Y+3, r26	; 0x03
    1abc:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1abe:	01 15       	cp	r16, r1
    1ac0:	11 05       	cpc	r17, r1
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <planner_reverse_pass_kernel+0x5e>
    1ac4:	03 c1       	rjmp	.+518    	; 0x1ccc <planner_reverse_pass_kernel+0x264>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	61 8d       	ldd	r22, Z+25	; 0x19
    1aca:	72 8d       	ldd	r23, Z+26	; 0x1a
    1acc:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ace:	94 8d       	ldd	r25, Z+28	; 0x1c
    1ad0:	ad 81       	ldd	r26, Y+5	; 0x05
    1ad2:	be 81       	ldd	r27, Y+6	; 0x06
    1ad4:	59 96       	adiw	r26, 0x19	; 25
    1ad6:	2d 91       	ld	r18, X+
    1ad8:	3d 91       	ld	r19, X+
    1ada:	4d 91       	ld	r20, X+
    1adc:	5c 91       	ld	r21, X
    1ade:	5c 97       	sbiw	r26, 0x1c	; 28
    1ae0:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1aec:	1b 01       	movw	r2, r22
    1aee:	2c 01       	movw	r4, r24
    1af0:	f8 01       	movw	r30, r16
    1af2:	65 8d       	ldd	r22, Z+29	; 0x1d
    1af4:	76 8d       	ldd	r23, Z+30	; 0x1e
    1af6:	87 8d       	ldd	r24, Z+31	; 0x1f
    1af8:	90 a1       	ldd	r25, Z+32	; 0x20
    1afa:	ad 81       	ldd	r26, Y+5	; 0x05
    1afc:	be 81       	ldd	r27, Y+6	; 0x06
    1afe:	5d 96       	adiw	r26, 0x1d	; 29
    1b00:	2d 91       	ld	r18, X+
    1b02:	3d 91       	ld	r19, X+
    1b04:	4d 91       	ld	r20, X+
    1b06:	5c 91       	ld	r21, X
    1b08:	90 97       	sbiw	r26, 0x20	; 32
    1b0a:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1b0e:	9b 01       	movw	r18, r22
    1b10:	ac 01       	movw	r20, r24
    1b12:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1b16:	3b 01       	movw	r6, r22
    1b18:	4c 01       	movw	r8, r24
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	61 a1       	ldd	r22, Z+33	; 0x21
    1b1e:	72 a1       	ldd	r23, Z+34	; 0x22
    1b20:	83 a1       	ldd	r24, Z+35	; 0x23
    1b22:	94 a1       	ldd	r25, Z+36	; 0x24
    1b24:	ad 81       	ldd	r26, Y+5	; 0x05
    1b26:	be 81       	ldd	r27, Y+6	; 0x06
    1b28:	91 96       	adiw	r26, 0x21	; 33
    1b2a:	2d 91       	ld	r18, X+
    1b2c:	3d 91       	ld	r19, X+
    1b2e:	4d 91       	ld	r20, X+
    1b30:	5c 91       	ld	r21, X
    1b32:	94 97       	sbiw	r26, 0x24	; 36
    1b34:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1b38:	9b 01       	movw	r18, r22
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1b40:	5b 01       	movw	r10, r22
    1b42:	6c 01       	movw	r12, r24
    1b44:	f8 01       	movw	r30, r16
    1b46:	65 a1       	ldd	r22, Z+37	; 0x25
    1b48:	76 a1       	ldd	r23, Z+38	; 0x26
    1b4a:	87 a1       	ldd	r24, Z+39	; 0x27
    1b4c:	90 a5       	ldd	r25, Z+40	; 0x28
    1b4e:	ad 81       	ldd	r26, Y+5	; 0x05
    1b50:	be 81       	ldd	r27, Y+6	; 0x06
    1b52:	95 96       	adiw	r26, 0x25	; 37
    1b54:	2d 91       	ld	r18, X+
    1b56:	3d 91       	ld	r19, X+
    1b58:	4d 91       	ld	r20, X+
    1b5a:	5c 91       	ld	r21, X
    1b5c:	98 97       	sbiw	r26, 0x28	; 40
    1b5e:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1b62:	9b 01       	movw	r18, r22
    1b64:	ac 01       	movw	r20, r24
    1b66:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1b6a:	7b 01       	movw	r14, r22
    1b6c:	8c 01       	movw	r16, r24
    1b6e:	c2 01       	movw	r24, r4
    1b70:	b1 01       	movw	r22, r2
    1b72:	a4 01       	movw	r20, r8
    1b74:	93 01       	movw	r18, r6
    1b76:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1b7a:	a6 01       	movw	r20, r12
    1b7c:	95 01       	movw	r18, r10
    1b7e:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1b82:	a8 01       	movw	r20, r16
    1b84:	97 01       	movw	r18, r14
    1b86:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1b8a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <sqrt>
    1b8e:	5b 01       	movw	r10, r22
    1b90:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1b92:	e0 90 af 06 	lds	r14, 0x06AF
    1b96:	f0 90 b0 06 	lds	r15, 0x06B0
    1b9a:	00 91 b1 06 	lds	r16, 0x06B1
    1b9e:	10 91 b2 06 	lds	r17, 0x06B2
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	a6 01       	movw	r20, r12
    1ba8:	95 01       	movw	r18, r10
    1baa:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
    1bae:	87 fd       	sbrc	r24, 7
    1bb0:	33 c0       	rjmp	.+102    	; 0x1c18 <planner_reverse_pass_kernel+0x1b0>
    1bb2:	0f 2e       	mov	r0, r31
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	6f 2e       	mov	r6, r31
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	7f 2e       	mov	r7, r31
    1bbc:	f0 e8       	ldi	r31, 0x80	; 128
    1bbe:	8f 2e       	mov	r8, r31
    1bc0:	ff e3       	ldi	r31, 0x3F	; 63
    1bc2:	9f 2e       	mov	r9, r31
    1bc4:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1bc6:	c4 01       	movw	r24, r8
    1bc8:	b3 01       	movw	r22, r6
    1bca:	29 81       	ldd	r18, Y+1	; 0x01
    1bcc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bce:	4b 81       	ldd	r20, Y+3	; 0x03
    1bd0:	5c 81       	ldd	r21, Y+4	; 0x04
    1bd2:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__gesf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	44 f1       	brlt	.+80     	; 0x1c2a <planner_reverse_pass_kernel+0x1c2>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1bda:	ed 81       	ldd	r30, Y+5	; 0x05
    1bdc:	fe 81       	ldd	r31, Y+6	; 0x06
    1bde:	61 aa       	std	Z+49, r6	; 0x31
    1be0:	72 aa       	std	Z+50, r7	; 0x32
    1be2:	83 aa       	std	Z+51, r8	; 0x33
    1be4:	94 aa       	std	Z+52, r9	; 0x34
}
    1be6:	26 96       	adiw	r28, 0x06	; 6
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	9f 90       	pop	r9
    1c08:	8f 90       	pop	r8
    1c0a:	7f 90       	pop	r7
    1c0c:	6f 90       	pop	r6
    1c0e:	5f 90       	pop	r5
    1c10:	4f 90       	pop	r4
    1c12:	3f 90       	pop	r3
    1c14:	2f 90       	pop	r2
    1c16:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1c18:	c8 01       	movw	r24, r16
    1c1a:	b7 01       	movw	r22, r14
    1c1c:	a6 01       	movw	r20, r12
    1c1e:	95 01       	movw	r18, r10
    1c20:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    1c24:	3b 01       	movw	r6, r22
    1c26:	4c 01       	movw	r8, r24
    1c28:	ce cf       	rjmp	.-100    	; 0x1bc6 <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1c2a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c2c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c2e:	a1 a4       	ldd	r10, Z+41	; 0x29
    1c30:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1c32:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1c34:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1c36:	c6 01       	movw	r24, r12
    1c38:	b5 01       	movw	r22, r10
    1c3a:	29 81       	ldd	r18, Y+1	; 0x01
    1c3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c3e:	4b 81       	ldd	r20, Y+3	; 0x03
    1c40:	5c 81       	ldd	r21, Y+4	; 0x04
    1c42:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1c4a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1c4e:	7b 01       	movw	r14, r22
    1c50:	8c 01       	movw	r16, r24
    1c52:	20 91 ab 06 	lds	r18, 0x06AB
    1c56:	30 91 ac 06 	lds	r19, 0x06AC
    1c5a:	40 91 ad 06 	lds	r20, 0x06AD
    1c5e:	50 91 ae 06 	lds	r21, 0x06AE
    1c62:	50 58       	subi	r21, 0x80	; 128
    1c64:	ca 01       	movw	r24, r20
    1c66:	b9 01       	movw	r22, r18
    1c68:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e7       	ldi	r20, 0x70	; 112
    1c72:	52 e4       	ldi	r21, 0x42	; 66
    1c74:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e7       	ldi	r20, 0x70	; 112
    1c7e:	52 ec       	ldi	r21, 0xC2	; 194
    1c80:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1c84:	ad 81       	ldd	r26, Y+5	; 0x05
    1c86:	be 81       	ldd	r27, Y+6	; 0x06
    1c88:	9d 96       	adiw	r26, 0x2d	; 45
    1c8a:	2d 91       	ld	r18, X+
    1c8c:	3d 91       	ld	r19, X+
    1c8e:	4d 91       	ld	r20, X+
    1c90:	5c 91       	ld	r21, X
    1c92:	d0 97       	sbiw	r26, 0x30	; 48
    1c94:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1c98:	9b 01       	movw	r18, r22
    1c9a:	ac 01       	movw	r20, r24
    1c9c:	c8 01       	movw	r24, r16
    1c9e:	b7 01       	movw	r22, r14
    1ca0:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1ca4:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1ca8:	a6 01       	movw	r20, r12
    1caa:	95 01       	movw	r18, r10
    1cac:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    1cb0:	7b 01       	movw	r14, r22
    1cb2:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1cb4:	c4 01       	movw	r24, r8
    1cb6:	b3 01       	movw	r22, r6
    1cb8:	a8 01       	movw	r20, r16
    1cba:	97 01       	movw	r18, r14
    1cbc:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__gesf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	0c f0       	brlt	.+2      	; 0x1cc6 <planner_reverse_pass_kernel+0x25e>
    1cc4:	8a cf       	rjmp	.-236    	; 0x1bda <planner_reverse_pass_kernel+0x172>
    1cc6:	37 01       	movw	r6, r14
    1cc8:	48 01       	movw	r8, r16
    1cca:	87 cf       	rjmp	.-242    	; 0x1bda <planner_reverse_pass_kernel+0x172>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	0e 94 57 0b 	call	0x16ae	; 0x16ae <factor_for_safe_speed>
    1cd4:	3b 01       	movw	r6, r22
    1cd6:	4c 01       	movw	r8, r24
    1cd8:	80 cf       	rjmp	.-256    	; 0x1bda <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	0e 94 57 0b 	call	0x16ae	; 0x16ae <factor_for_safe_speed>
    1ce2:	69 83       	std	Y+1, r22	; 0x01
    1ce4:	7a 83       	std	Y+2, r23	; 0x02
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	e9 ce       	rjmp	.-558    	; 0x1abe <planner_reverse_pass_kernel+0x56>

00001cec <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1cfa:	80 91 0c 05 	lds	r24, 0x050C
    1cfe:	90 91 0d 05 	lds	r25, 0x050D
    1d02:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d04:	20 91 0e 05 	lds	r18, 0x050E
    1d08:	30 91 0f 05 	lds	r19, 0x050F
    1d0c:	99 27       	eor	r25, r25
    1d0e:	87 fd       	sbrc	r24, 7
    1d10:	90 95       	com	r25
    1d12:	82 17       	cp	r24, r18
    1d14:	93 07       	cpc	r25, r19
    1d16:	b9 f1       	breq	.+110    	; 0x1d86 <planner_reverse_pass+0x9a>
    1d18:	00 e0       	ldi	r16, 0x00	; 0
    1d1a:	10 e0       	ldi	r17, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	19 c0       	rjmp	.+50     	; 0x1d54 <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1d22:	8f 2d       	mov	r24, r15
    1d24:	99 e4       	ldi	r25, 0x49	; 73
    1d26:	89 02       	muls	r24, r25
    1d28:	b0 01       	movw	r22, r0
    1d2a:	11 24       	eor	r1, r1
    1d2c:	cf 2c       	mov	r12, r15
    1d2e:	dd 24       	eor	r13, r13
    1d30:	c7 fc       	sbrc	r12, 7
    1d32:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1d34:	eb 01       	movw	r28, r22
    1d36:	ce 5c       	subi	r28, 0xCE	; 206
    1d38:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	b8 01       	movw	r22, r16
    1d3e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d42:	80 91 0e 05 	lds	r24, 0x050E
    1d46:	90 91 0f 05 	lds	r25, 0x050F
    1d4a:	a8 01       	movw	r20, r16
    1d4c:	8c 15       	cp	r24, r12
    1d4e:	9d 05       	cpc	r25, r13
    1d50:	61 f0       	breq	.+24     	; 0x1d6a <planner_reverse_pass+0x7e>
    1d52:	8e 01       	movw	r16, r28
    block_index--;
    1d54:	fa 94       	dec	r15
    if(block_index < 0) {
    1d56:	f7 fe       	sbrs	r15, 7
    1d58:	e4 cf       	rjmp	.-56     	; 0x1d22 <planner_reverse_pass+0x36>
    1d5a:	a9 e0       	ldi	r26, 0x09	; 9
    1d5c:	fa 2e       	mov	r15, r26
    1d5e:	61 e9       	ldi	r22, 0x91	; 145
    1d60:	72 e0       	ldi	r23, 0x02	; 2
    1d62:	f9 e0       	ldi	r31, 0x09	; 9
    1d64:	cf 2e       	mov	r12, r31
    1d66:	d1 2c       	mov	r13, r1
    1d68:	e5 cf       	rjmp	.-54     	; 0x1d34 <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d6a:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	be 01       	movw	r22, r28
    1d72:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <planner_reverse_pass_kernel>
}
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d86:	c0 e0       	ldi	r28, 0x00	; 0
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	ee cf       	rjmp	.-36     	; 0x1d6c <planner_reverse_pass+0x80>

00001d90 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1d90:	2f 92       	push	r2
    1d92:	3f 92       	push	r3
    1d94:	4f 92       	push	r4
    1d96:	5f 92       	push	r5
    1d98:	6f 92       	push	r6
    1d9a:	7f 92       	push	r7
    1d9c:	8f 92       	push	r8
    1d9e:	9f 92       	push	r9
    1da0:	af 92       	push	r10
    1da2:	bf 92       	push	r11
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	62 97       	sbiw	r28, 0x12	; 18
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	9a 8b       	std	Y+18, r25	; 0x12
    1dc6:	89 8b       	std	Y+17, r24	; 0x11
    1dc8:	6a 01       	movw	r12, r20
    1dca:	7b 01       	movw	r14, r22
    1dcc:	18 01       	movw	r2, r16
    1dce:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	65 89       	ldd	r22, Z+21	; 0x15
    1dd4:	76 89       	ldd	r23, Z+22	; 0x16
    1dd6:	87 89       	ldd	r24, Z+23	; 0x17
    1dd8:	90 8d       	ldd	r25, Z+24	; 0x18
    1dda:	0e 94 be 2c 	call	0x597c	; 0x597c <__floatunsisf>
    1dde:	3b 01       	movw	r6, r22
    1de0:	4c 01       	movw	r8, r24
    1de2:	a7 01       	movw	r20, r14
    1de4:	96 01       	movw	r18, r12
    1de6:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1dea:	0e 94 0e 2c 	call	0x581c	; 0x581c <ceil>
    1dee:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
    1df2:	7b 01       	movw	r14, r22
    1df4:	8c 01       	movw	r16, r24
    1df6:	e9 89       	ldd	r30, Y+17	; 0x11
    1df8:	fa 89       	ldd	r31, Y+18	; 0x12
    1dfa:	65 ab       	std	Z+53, r22	; 0x35
    1dfc:	76 ab       	std	Z+54, r23	; 0x36
    1dfe:	87 ab       	std	Z+55, r24	; 0x37
    1e00:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1e02:	c4 01       	movw	r24, r8
    1e04:	b3 01       	movw	r22, r6
    1e06:	a2 01       	movw	r20, r4
    1e08:	91 01       	movw	r18, r2
    1e0a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1e0e:	0e 94 0e 2c 	call	0x581c	; 0x581c <ceil>
    1e12:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
    1e16:	1b 01       	movw	r2, r22
    1e18:	2c 01       	movw	r4, r24
    1e1a:	e9 89       	ldd	r30, Y+17	; 0x11
    1e1c:	fa 89       	ldd	r31, Y+18	; 0x12
    1e1e:	61 af       	std	Z+57, r22	; 0x39
    1e20:	72 af       	std	Z+58, r23	; 0x3a
    1e22:	83 af       	std	Z+59, r24	; 0x3b
    1e24:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1e26:	fd 96       	adiw	r30, 0x3d	; 61
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	fd 97       	sbiw	r30, 0x3d	; 61
    1e32:	fa 8b       	std	Y+18, r31	; 0x12
    1e34:	e9 8b       	std	Y+17, r30	; 0x11
    1e36:	28 e2       	ldi	r18, 0x28	; 40
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__mulsi3>
    1e42:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e7       	ldi	r20, 0x70	; 112
    1e4c:	52 e4       	ldi	r21, 0x42	; 66
    1e4e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1e52:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
    1e56:	5b 01       	movw	r10, r22
    1e58:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1e5a:	c8 01       	movw	r24, r16
    1e5c:	b7 01       	movw	r22, r14
    1e5e:	0e 94 be 2c 	call	0x597c	; 0x597c <__floatunsisf>
    1e62:	7b 01       	movw	r14, r22
    1e64:	8c 01       	movw	r16, r24
    1e66:	c6 01       	movw	r24, r12
    1e68:	b5 01       	movw	r22, r10
    1e6a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    1e6e:	6d 83       	std	Y+5, r22	; 0x05
    1e70:	7e 83       	std	Y+6, r23	; 0x06
    1e72:	8f 83       	std	Y+7, r24	; 0x07
    1e74:	98 87       	std	Y+8, r25	; 0x08


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1e76:	c4 01       	movw	r24, r8
    1e78:	b3 01       	movw	r22, r6
    1e7a:	a4 01       	movw	r20, r8
    1e7c:	93 01       	movw	r18, r6
    1e7e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1e82:	3b 01       	movw	r6, r22
    1e84:	4c 01       	movw	r8, r24
    1e86:	c8 01       	movw	r24, r16
    1e88:	b7 01       	movw	r22, r14
    1e8a:	a8 01       	movw	r20, r16
    1e8c:	97 01       	movw	r18, r14
    1e8e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1e92:	69 87       	std	Y+9, r22	; 0x09
    1e94:	7a 87       	std	Y+10, r23	; 0x0a
    1e96:	8b 87       	std	Y+11, r24	; 0x0b
    1e98:	9c 87       	std	Y+12, r25	; 0x0c
    1e9a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e9c:	7e 81       	ldd	r23, Y+6	; 0x06
    1e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea0:	98 85       	ldd	r25, Y+8	; 0x08
    1ea2:	9b 01       	movw	r18, r22
    1ea4:	ac 01       	movw	r20, r24
    1ea6:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1eaa:	6d 87       	std	Y+13, r22	; 0x0d
    1eac:	7e 87       	std	Y+14, r23	; 0x0e
    1eae:	8f 87       	std	Y+15, r24	; 0x0f
    1eb0:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1eb2:	c4 01       	movw	r24, r8
    1eb4:	b3 01       	movw	r22, r6
    1eb6:	29 85       	ldd	r18, Y+9	; 0x09
    1eb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1eba:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ebc:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ebe:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1ec2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ec4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ec6:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ec8:	58 89       	ldd	r21, Y+16	; 0x10
    1eca:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    1ece:	0e 94 0e 2c 	call	0x581c	; 0x581c <ceil>
    1ed2:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
    1ed6:	69 83       	std	Y+1, r22	; 0x01
    1ed8:	7a 83       	std	Y+2, r23	; 0x02
    1eda:	8b 83       	std	Y+3, r24	; 0x03
    1edc:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1ede:	c2 01       	movw	r24, r4
    1ee0:	b1 01       	movw	r22, r2
    1ee2:	0e 94 be 2c 	call	0x597c	; 0x597c <__floatunsisf>
    1ee6:	9b 01       	movw	r18, r22
    1ee8:	ac 01       	movw	r20, r24


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1eea:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1eee:	1b 01       	movw	r2, r22
    1ef0:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1ef2:	a4 01       	movw	r20, r8
    1ef4:	93 01       	movw	r18, r6
    1ef6:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1efa:	7b 01       	movw	r14, r22
    1efc:	8c 01       	movw	r16, r24
    1efe:	d0 94       	com	r13
    1f00:	c0 94       	com	r12
    1f02:	b0 94       	com	r11
    1f04:	a0 94       	com	r10
    1f06:	a1 1c       	adc	r10, r1
    1f08:	b1 1c       	adc	r11, r1
    1f0a:	c1 1c       	adc	r12, r1
    1f0c:	d1 1c       	adc	r13, r1
    1f0e:	c6 01       	movw	r24, r12
    1f10:	b5 01       	movw	r22, r10
    1f12:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    1f16:	9b 01       	movw	r18, r22
    1f18:	ac 01       	movw	r20, r24
    1f1a:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1f1e:	9b 01       	movw	r18, r22
    1f20:	ac 01       	movw	r20, r24
    1f22:	c8 01       	movw	r24, r16
    1f24:	b7 01       	movw	r22, r14
    1f26:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    1f2a:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1f2e:	e9 89       	ldd	r30, Y+17	; 0x11
    1f30:	fa 89       	ldd	r31, Y+18	; 0x12
    1f32:	a1 88       	ldd	r10, Z+17	; 0x11
    1f34:	b2 88       	ldd	r11, Z+18	; 0x12
    1f36:	c3 88       	ldd	r12, Z+19	; 0x13
    1f38:	d4 88       	ldd	r13, Z+20	; 0x14
    1f3a:	86 01       	movw	r16, r12
    1f3c:	75 01       	movw	r14, r10
    1f3e:	29 81       	ldd	r18, Y+1	; 0x01
    1f40:	3a 81       	ldd	r19, Y+2	; 0x02
    1f42:	4b 81       	ldd	r20, Y+3	; 0x03
    1f44:	5c 81       	ldd	r21, Y+4	; 0x04
    1f46:	e2 1a       	sub	r14, r18
    1f48:	f3 0a       	sbc	r15, r19
    1f4a:	04 0b       	sbc	r16, r20
    1f4c:	15 0b       	sbc	r17, r21
    1f4e:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
    1f52:	a8 01       	movw	r20, r16
    1f54:	97 01       	movw	r18, r14
    1f56:	26 1b       	sub	r18, r22
    1f58:	37 0b       	sbc	r19, r23
    1f5a:	48 0b       	sbc	r20, r24
    1f5c:	59 0b       	sbc	r21, r25
    1f5e:	da 01       	movw	r26, r20
    1f60:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1f62:	57 fd       	sbrc	r21, 7
    1f64:	30 c0       	rjmp	.+96     	; 0x1fc6 <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1f66:	49 89       	ldd	r20, Y+17	; 0x11
    1f68:	5a 89       	ldd	r21, Y+18	; 0x12
    1f6a:	4f 5b       	subi	r20, 0xBF	; 191
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6e:	fa 01       	movw	r30, r20
    1f70:	29 81       	ldd	r18, Y+1	; 0x01
    1f72:	3a 81       	ldd	r19, Y+2	; 0x02
    1f74:	4b 81       	ldd	r20, Y+3	; 0x03
    1f76:	5c 81       	ldd	r21, Y+4	; 0x04
    1f78:	21 93       	st	Z+, r18
    1f7a:	31 93       	st	Z+, r19
    1f7c:	41 93       	st	Z+, r20
    1f7e:	51 93       	st	Z+, r21
    1f80:	fa 8b       	std	Y+18, r31	; 0x12
    1f82:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1f84:	82 0f       	add	r24, r18
    1f86:	93 1f       	adc	r25, r19
    1f88:	a4 1f       	adc	r26, r20
    1f8a:	b5 1f       	adc	r27, r21
    1f8c:	80 83       	st	Z, r24
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	a2 83       	std	Z+2, r26	; 0x02
    1f92:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1f94:	62 96       	adiw	r28, 0x12	; 18
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	cf 90       	pop	r12
    1fb0:	bf 90       	pop	r11
    1fb2:	af 90       	pop	r10
    1fb4:	9f 90       	pop	r9
    1fb6:	8f 90       	pop	r8
    1fb8:	7f 90       	pop	r7
    1fba:	6f 90       	pop	r6
    1fbc:	5f 90       	pop	r5
    1fbe:	4f 90       	pop	r4
    1fc0:	3f 90       	pop	r3
    1fc2:	2f 90       	pop	r2
    1fc4:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    1fc6:	c6 01       	movw	r24, r12
    1fc8:	b5 01       	movw	r22, r10
    1fca:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    1fce:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fd0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fd2:	4f 85       	ldd	r20, Y+15	; 0x0f
    1fd4:	58 89       	ldd	r21, Y+16	; 0x10
    1fd6:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    1fda:	29 85       	ldd	r18, Y+9	; 0x09
    1fdc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fde:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fe0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fe2:	0e 94 81 2b 	call	0x5702	; 0x5702 <__subsf3>
    1fe6:	9b 01       	movw	r18, r22
    1fe8:	ac 01       	movw	r20, r24
    1fea:	c2 01       	movw	r24, r4
    1fec:	b1 01       	movw	r22, r2
    1fee:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    1ff2:	7b 01       	movw	r14, r22
    1ff4:	8c 01       	movw	r16, r24
    1ff6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ff8:	7e 81       	ldd	r23, Y+6	; 0x06
    1ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffc:	98 85       	ldd	r25, Y+8	; 0x08
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	50 e4       	ldi	r21, 0x40	; 64
    2006:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    200a:	9b 01       	movw	r18, r22
    200c:	ac 01       	movw	r20, r24
    200e:	c8 01       	movw	r24, r16
    2010:	b7 01       	movw	r22, r14
    2012:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    2016:	0e 94 0e 2c 	call	0x581c	; 0x581c <ceil>
    201a:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
    201e:	69 83       	std	Y+1, r22	; 0x01
    2020:	7a 83       	std	Y+2, r23	; 0x02
    2022:	8b 83       	std	Y+3, r24	; 0x03
    2024:	9c 83       	std	Y+4, r25	; 0x04
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	9b cf       	rjmp	.-202    	; 0x1f66 <calculate_trapezoid_for_block+0x1d6>

00002030 <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    203c:	80 91 0e 05 	lds	r24, 0x050E
    2040:	90 91 0f 05 	lds	r25, 0x050F
    2044:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2046:	e8 2e       	mov	r14, r24
    2048:	ff 24       	eor	r15, r15
    204a:	e7 fc       	sbrc	r14, 7
    204c:	f0 94       	com	r15
    204e:	80 91 0c 05 	lds	r24, 0x050C
    2052:	90 91 0d 05 	lds	r25, 0x050D
    2056:	e8 16       	cp	r14, r24
    2058:	f9 06       	cpc	r15, r25
    205a:	e1 f1       	breq	.+120    	; 0x20d4 <planner_recalculate_trapezoids+0xa4>
    205c:	e0 e0       	ldi	r30, 0x00	; 0
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <planner_recalculate_trapezoids+0x34>
    2062:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    2064:	89 e4       	ldi	r24, 0x49	; 73
    2066:	28 02       	muls	r18, r24
    2068:	e0 01       	movw	r28, r0
    206a:	11 24       	eor	r1, r1
    206c:	ce 5c       	subi	r28, 0xCE	; 206
    206e:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    2070:	30 97       	sbiw	r30, 0x00	; 0
    2072:	59 f0       	breq	.+22     	; 0x208a <planner_recalculate_trapezoids+0x5a>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    2074:	41 a9       	ldd	r20, Z+49	; 0x31
    2076:	52 a9       	ldd	r21, Z+50	; 0x32
    2078:	63 a9       	ldd	r22, Z+51	; 0x33
    207a:	74 a9       	ldd	r23, Z+52	; 0x34
    207c:	09 a9       	ldd	r16, Y+49	; 0x31
    207e:	1a a9       	ldd	r17, Y+50	; 0x32
    2080:	2b a9       	ldd	r18, Y+51	; 0x33
    2082:	3c a9       	ldd	r19, Y+52	; 0x34
    2084:	cf 01       	movw	r24, r30
    2086:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    208a:	c7 01       	movw	r24, r14
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	6a e0       	ldi	r22, 0x0A	; 10
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
    2096:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2098:	e8 2e       	mov	r14, r24
    209a:	ff 24       	eor	r15, r15
    209c:	e7 fc       	sbrc	r14, 7
    209e:	f0 94       	com	r15
    20a0:	80 91 0c 05 	lds	r24, 0x050C
    20a4:	90 91 0d 05 	lds	r25, 0x050D
    20a8:	e8 16       	cp	r14, r24
    20aa:	f9 06       	cpc	r15, r25
    20ac:	d1 f6       	brne	.-76     	; 0x2062 <planner_recalculate_trapezoids+0x32>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    20ae:	ce 01       	movw	r24, r28
    20b0:	0e 94 57 0b 	call	0x16ae	; 0x16ae <factor_for_safe_speed>
    20b4:	8b 01       	movw	r16, r22
    20b6:	9c 01       	movw	r18, r24
    20b8:	49 a9       	ldd	r20, Y+49	; 0x31
    20ba:	5a a9       	ldd	r21, Y+50	; 0x32
    20bc:	6b a9       	ldd	r22, Y+51	; 0x33
    20be:	7c a9       	ldd	r23, Y+52	; 0x34
    20c0:	ce 01       	movw	r24, r28
    20c2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <calculate_trapezoid_for_block>
}
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	ff 90       	pop	r15
    20d0:	ef 90       	pop	r14
    20d2:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    20d4:	c0 e0       	ldi	r28, 0x00	; 0
    20d6:	d0 e0       	ldi	r29, 0x00	; 0
    20d8:	ea cf       	rjmp	.-44     	; 0x20ae <planner_recalculate_trapezoids+0x7e>

000020da <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    20da:	0e 94 76 0e 	call	0x1cec	; 0x1cec <planner_reverse_pass>
  planner_forward_pass();
    20de:	0e 94 33 0c 	call	0x1866	; 0x1866 <planner_forward_pass>
  planner_recalculate_trapezoids();
    20e2:	0e 94 18 10 	call	0x2030	; 0x2030 <planner_recalculate_trapezoids>
}
    20e6:	08 95       	ret

000020e8 <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    20e8:	2f 92       	push	r2
    20ea:	3f 92       	push	r3
    20ec:	4f 92       	push	r4
    20ee:	5f 92       	push	r5
    20f0:	6f 92       	push	r6
    20f2:	7f 92       	push	r7
    20f4:	8f 92       	push	r8
    20f6:	9f 92       	push	r9
    20f8:	af 92       	push	r10
    20fa:	bf 92       	push	r11
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	cc 54       	subi	r28, 0x4C	; 76
    2112:	d0 40       	sbci	r29, 0x00	; 0
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	3b 01       	movw	r6, r22
    2120:	4c 01       	movw	r8, r24
    2122:	23 96       	adiw	r28, 0x03	; 3
    2124:	2c af       	std	Y+60, r18	; 0x3c
    2126:	3d af       	std	Y+61, r19	; 0x3d
    2128:	4e af       	std	Y+62, r20	; 0x3e
    212a:	5f af       	std	Y+63, r21	; 0x3f
    212c:	23 97       	sbiw	r28, 0x03	; 3
    212e:	27 96       	adiw	r28, 0x07	; 7
    2130:	ec ae       	std	Y+60, r14	; 0x3c
    2132:	fd ae       	std	Y+61, r15	; 0x3d
    2134:	0e af       	std	Y+62, r16	; 0x3e
    2136:	1f af       	std	Y+63, r17	; 0x3f
    2138:	27 97       	sbiw	r28, 0x07	; 7
	printPgmString(PSTR("z = "));
	printFloat( z );
	printPgmString(PSTR("\r\n"));
#endif
  
  if( gHomed == FALSE ) 
    213a:	80 91 55 05 	lds	r24, 0x0555
    213e:	88 23       	and	r24, r24
    2140:	d1 f4       	brne	.+52     	; 0x2176 <plan_buffer_line+0x8e>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    2142:	c4 5b       	subi	r28, 0xB4	; 180
    2144:	df 4f       	sbci	r29, 0xFF	; 255
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	df 90       	pop	r13
    215e:	cf 90       	pop	r12
    2160:	bf 90       	pop	r11
    2162:	af 90       	pop	r10
    2164:	9f 90       	pop	r9
    2166:	8f 90       	pop	r8
    2168:	7f 90       	pop	r7
    216a:	6f 90       	pop	r6
    216c:	5f 90       	pop	r5
    216e:	4f 90       	pop	r4
    2170:	3f 90       	pop	r3
    2172:	2f 90       	pop	r2
    2174:	08 95       	ret
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    2176:	c4 01       	movw	r24, r8
    2178:	b3 01       	movw	r22, r6
    217a:	20 91 8d 06 	lds	r18, 0x068D
    217e:	30 91 8e 06 	lds	r19, 0x068E
    2182:	40 91 8f 06 	lds	r20, 0x068F
    2186:	50 91 90 06 	lds	r21, 0x0690
    218a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    218e:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    2192:	7b 01       	movw	r14, r22
    2194:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2196:	20 91 91 06 	lds	r18, 0x0691
    219a:	30 91 92 06 	lds	r19, 0x0692
    219e:	40 91 93 06 	lds	r20, 0x0693
    21a2:	50 91 94 06 	lds	r21, 0x0694
    21a6:	2b af       	std	Y+59, r18	; 0x3b
    21a8:	3c af       	std	Y+60, r19	; 0x3c
    21aa:	4d af       	std	Y+61, r20	; 0x3d
    21ac:	5e af       	std	Y+62, r21	; 0x3e
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    21ae:	40 91 95 06 	lds	r20, 0x0695
    21b2:	50 91 96 06 	lds	r21, 0x0696
    21b6:	60 91 97 06 	lds	r22, 0x0697
    21ba:	70 91 98 06 	lds	r23, 0x0698
    21be:	4f ab       	std	Y+55, r20	; 0x37
    21c0:	58 af       	std	Y+56, r21	; 0x38
    21c2:	69 af       	std	Y+57, r22	; 0x39
    21c4:	7a af       	std	Y+58, r23	; 0x3a
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    21c6:	20 90 99 06 	lds	r2, 0x0699
    21ca:	30 90 9a 06 	lds	r3, 0x069A
    21ce:	40 90 9b 06 	lds	r4, 0x069B
    21d2:	50 90 9c 06 	lds	r5, 0x069C
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    21d6:	80 91 0c 05 	lds	r24, 0x050C
    21da:	90 91 0d 05 	lds	r25, 0x050D
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	6a e0       	ldi	r22, 0x0A	; 10
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
    21e8:	28 96       	adiw	r28, 0x08	; 8
    21ea:	8f af       	std	Y+63, r24	; 0x3f
    21ec:	28 97       	sbiw	r28, 0x08	; 8
    21ee:	29 96       	adiw	r28, 0x09	; 9
    21f0:	9f af       	std	Y+63, r25	; 0x3f
    21f2:	29 97       	sbiw	r28, 0x09	; 9
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    21f4:	20 91 0e 05 	lds	r18, 0x050E
    21f8:	30 91 0f 05 	lds	r19, 0x050F
    21fc:	29 96       	adiw	r28, 0x09	; 9
    21fe:	6e ad       	ldd	r22, Y+62	; 0x3e
    2200:	7f ad       	ldd	r23, Y+63	; 0x3f
    2202:	29 97       	sbiw	r28, 0x09	; 9
    2204:	26 17       	cp	r18, r22
    2206:	37 07       	cpc	r19, r23
    2208:	71 f4       	brne	.+28     	; 0x2226 <__stack+0x27>
    220a:	83 b7       	in	r24, 0x33	; 51
    220c:	81 60       	ori	r24, 0x01	; 1
    220e:	83 bf       	out	0x33, r24	; 51
    2210:	88 95       	sleep
    2212:	83 b7       	in	r24, 0x33	; 51
    2214:	8e 7f       	andi	r24, 0xFE	; 254
    2216:	83 bf       	out	0x33, r24	; 51
    2218:	80 91 0e 05 	lds	r24, 0x050E
    221c:	90 91 0f 05 	lds	r25, 0x050F
    2220:	82 17       	cp	r24, r18
    2222:	93 07       	cpc	r25, r19
    2224:	91 f3       	breq	.-28     	; 0x220a <__stack+0xb>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    2226:	20 91 0c 05 	lds	r18, 0x050C
    222a:	30 91 0d 05 	lds	r19, 0x050D
    222e:	c9 01       	movw	r24, r18
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	dc 01       	movw	r26, r24
    223e:	aa 0f       	add	r26, r26
    2240:	bb 1f       	adc	r27, r27
    2242:	aa 0f       	add	r26, r26
    2244:	bb 1f       	adc	r27, r27
    2246:	aa 0f       	add	r26, r26
    2248:	bb 1f       	adc	r27, r27
    224a:	a8 0f       	add	r26, r24
    224c:	b9 1f       	adc	r27, r25
    224e:	a2 0f       	add	r26, r18
    2250:	b3 1f       	adc	r27, r19
    2252:	ae 5c       	subi	r26, 0xCE	; 206
    2254:	bd 4f       	sbci	r27, 0xFD	; 253
    2256:	be ab       	std	Y+54, r27	; 0x36
    2258:	ad ab       	std	Y+53, r26	; 0x35
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    225a:	80 91 10 05 	lds	r24, 0x0510
    225e:	90 91 11 05 	lds	r25, 0x0511
    2262:	a0 91 12 05 	lds	r26, 0x0512
    2266:	b0 91 13 05 	lds	r27, 0x0513
    226a:	37 01       	movw	r6, r14
    226c:	48 01       	movw	r8, r16
    226e:	68 1a       	sub	r6, r24
    2270:	79 0a       	sbc	r7, r25
    2272:	8a 0a       	sbc	r8, r26
    2274:	9b 0a       	sbc	r9, r27
    2276:	97 fc       	sbrc	r9, 7
    2278:	0a c3       	rjmp	.+1556   	; 0x288e <__stack+0x68f>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    227a:	c2 01       	movw	r24, r4
    227c:	b1 01       	movw	r22, r2
    227e:	a6 01       	movw	r20, r12
    2280:	95 01       	movw	r18, r10
    2282:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    2286:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    228a:	6d 87       	std	Y+13, r22	; 0x0d
    228c:	7e 87       	std	Y+14, r23	; 0x0e
    228e:	8f 87       	std	Y+15, r24	; 0x0f
    2290:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2292:	6f a9       	ldd	r22, Y+55	; 0x37
    2294:	78 ad       	ldd	r23, Y+56	; 0x38
    2296:	89 ad       	ldd	r24, Y+57	; 0x39
    2298:	9a ad       	ldd	r25, Y+58	; 0x3a
    229a:	27 96       	adiw	r28, 0x07	; 7
    229c:	2c ad       	ldd	r18, Y+60	; 0x3c
    229e:	3d ad       	ldd	r19, Y+61	; 0x3d
    22a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    22a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    22a4:	27 97       	sbiw	r28, 0x07	; 7
    22a6:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    22aa:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    22ae:	69 87       	std	Y+9, r22	; 0x09
    22b0:	7a 87       	std	Y+10, r23	; 0x0a
    22b2:	8b 87       	std	Y+11, r24	; 0x0b
    22b4:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    22b6:	6b ad       	ldd	r22, Y+59	; 0x3b
    22b8:	7c ad       	ldd	r23, Y+60	; 0x3c
    22ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    22bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    22be:	23 96       	adiw	r28, 0x03	; 3
    22c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    22c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    22c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    22c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    22c8:	23 97       	sbiw	r28, 0x03	; 3
    22ca:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    22ce:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    22d2:	6d 83       	std	Y+5, r22	; 0x05
    22d4:	7e 83       	std	Y+6, r23	; 0x06
    22d6:	8f 83       	std	Y+7, r24	; 0x07
    22d8:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    22da:	e9 82       	std	Y+1, r14	; 0x01
    22dc:	fa 82       	std	Y+2, r15	; 0x02
    22de:	0b 83       	std	Y+3, r16	; 0x03
    22e0:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    22e2:	ed a9       	ldd	r30, Y+53	; 0x35
    22e4:	fe a9       	ldd	r31, Y+54	; 0x36
    22e6:	60 82       	st	Z, r6
    22e8:	71 82       	std	Z+1, r7	; 0x01
    22ea:	82 82       	std	Z+2, r8	; 0x02
    22ec:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    22ee:	ad 80       	ldd	r10, Y+5	; 0x05
    22f0:	be 80       	ldd	r11, Y+6	; 0x06
    22f2:	cf 80       	ldd	r12, Y+7	; 0x07
    22f4:	d8 84       	ldd	r13, Y+8	; 0x08
    22f6:	80 91 14 05 	lds	r24, 0x0514
    22fa:	90 91 15 05 	lds	r25, 0x0515
    22fe:	a0 91 16 05 	lds	r26, 0x0516
    2302:	b0 91 17 05 	lds	r27, 0x0517
    2306:	a6 01       	movw	r20, r12
    2308:	95 01       	movw	r18, r10
    230a:	28 1b       	sub	r18, r24
    230c:	39 0b       	sbc	r19, r25
    230e:	4a 0b       	sbc	r20, r26
    2310:	5b 0b       	sbc	r21, r27
    2312:	da 01       	movw	r26, r20
    2314:	c9 01       	movw	r24, r18
    2316:	57 fd       	sbrc	r21, 7
    2318:	cb c2       	rjmp	.+1430   	; 0x28b0 <__stack+0x6b1>
    231a:	ed a9       	ldd	r30, Y+53	; 0x35
    231c:	fe a9       	ldd	r31, Y+54	; 0x36
    231e:	84 83       	std	Z+4, r24	; 0x04
    2320:	95 83       	std	Z+5, r25	; 0x05
    2322:	a6 83       	std	Z+6, r26	; 0x06
    2324:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2326:	20 90 18 05 	lds	r2, 0x0518
    232a:	30 90 19 05 	lds	r3, 0x0519
    232e:	40 90 1a 05 	lds	r4, 0x051A
    2332:	50 90 1b 05 	lds	r5, 0x051B
    2336:	69 84       	ldd	r6, Y+9	; 0x09
    2338:	7a 84       	ldd	r7, Y+10	; 0x0a
    233a:	8b 84       	ldd	r8, Y+11	; 0x0b
    233c:	9c 84       	ldd	r9, Y+12	; 0x0c
    233e:	d4 01       	movw	r26, r8
    2340:	c3 01       	movw	r24, r6
    2342:	82 19       	sub	r24, r2
    2344:	93 09       	sbc	r25, r3
    2346:	a4 09       	sbc	r26, r4
    2348:	b5 09       	sbc	r27, r5
    234a:	b7 fd       	sbrc	r27, 7
    234c:	a9 c2       	rjmp	.+1362   	; 0x28a0 <__stack+0x6a1>
    234e:	ed a9       	ldd	r30, Y+53	; 0x35
    2350:	fe a9       	ldd	r31, Y+54	; 0x36
    2352:	80 87       	std	Z+8, r24	; 0x08
    2354:	91 87       	std	Z+9, r25	; 0x09
    2356:	a2 87       	std	Z+10, r26	; 0x0a
    2358:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    235a:	20 91 1c 05 	lds	r18, 0x051C
    235e:	30 91 1d 05 	lds	r19, 0x051D
    2362:	40 91 1e 05 	lds	r20, 0x051E
    2366:	50 91 1f 05 	lds	r21, 0x051F
    236a:	29 8b       	std	Y+17, r18	; 0x11
    236c:	3a 8b       	std	Y+18, r19	; 0x12
    236e:	4b 8b       	std	Y+19, r20	; 0x13
    2370:	5c 8b       	std	Y+20, r21	; 0x14
    2372:	4d 85       	ldd	r20, Y+13	; 0x0d
    2374:	5e 85       	ldd	r21, Y+14	; 0x0e
    2376:	6f 85       	ldd	r22, Y+15	; 0x0f
    2378:	78 89       	ldd	r23, Y+16	; 0x10
    237a:	2d 96       	adiw	r28, 0x0d	; 13
    237c:	4c af       	std	Y+60, r20	; 0x3c
    237e:	5d af       	std	Y+61, r21	; 0x3d
    2380:	6e af       	std	Y+62, r22	; 0x3e
    2382:	7f af       	std	Y+63, r23	; 0x3f
    2384:	2d 97       	sbiw	r28, 0x0d	; 13
    2386:	7a 01       	movw	r14, r20
    2388:	8b 01       	movw	r16, r22
    238a:	69 89       	ldd	r22, Y+17	; 0x11
    238c:	7a 89       	ldd	r23, Y+18	; 0x12
    238e:	8b 89       	ldd	r24, Y+19	; 0x13
    2390:	9c 89       	ldd	r25, Y+20	; 0x14
    2392:	e6 1a       	sub	r14, r22
    2394:	f7 0a       	sbc	r15, r23
    2396:	08 0b       	sbc	r16, r24
    2398:	19 0b       	sbc	r17, r25
    239a:	17 fd       	sbrc	r17, 7
    239c:	6f c2       	rjmp	.+1246   	; 0x287c <__stack+0x67d>
    239e:	ad a9       	ldd	r26, Y+53	; 0x35
    23a0:	be a9       	ldd	r27, Y+54	; 0x36
    23a2:	1c 96       	adiw	r26, 0x0c	; 12
    23a4:	ed 92       	st	X+, r14
    23a6:	fd 92       	st	X+, r15
    23a8:	0d 93       	st	X+, r16
    23aa:	1c 93       	st	X, r17
    23ac:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    23ae:	18 96       	adiw	r26, 0x08	; 8
    23b0:	2d 91       	ld	r18, X+
    23b2:	3d 91       	ld	r19, X+
    23b4:	4d 91       	ld	r20, X+
    23b6:	5c 91       	ld	r21, X
    23b8:	1b 97       	sbiw	r26, 0x0b	; 11
    23ba:	fd 01       	movw	r30, r26
    23bc:	84 81       	ldd	r24, Z+4	; 0x04
    23be:	95 81       	ldd	r25, Z+5	; 0x05
    23c0:	a6 81       	ldd	r26, Z+6	; 0x06
    23c2:	b7 81       	ldd	r27, Z+7	; 0x07
    23c4:	82 17       	cp	r24, r18
    23c6:	93 07       	cpc	r25, r19
    23c8:	a4 07       	cpc	r26, r20
    23ca:	b5 07       	cpc	r27, r21
    23cc:	48 f1       	brcs	.+82     	; 0x2420 <__stack+0x221>
    23ce:	ed a9       	ldd	r30, Y+53	; 0x35
    23d0:	fe a9       	ldd	r31, Y+54	; 0x36
    23d2:	20 81       	ld	r18, Z
    23d4:	31 81       	ldd	r19, Z+1	; 0x01
    23d6:	42 81       	ldd	r20, Z+2	; 0x02
    23d8:	53 81       	ldd	r21, Z+3	; 0x03
    23da:	82 17       	cp	r24, r18
    23dc:	93 07       	cpc	r25, r19
    23de:	a4 07       	cpc	r26, r20
    23e0:	b5 07       	cpc	r27, r21
    23e2:	b0 f0       	brcs	.+44     	; 0x2410 <__stack+0x211>
    23e4:	8e 15       	cp	r24, r14
    23e6:	9f 05       	cpc	r25, r15
    23e8:	a0 07       	cpc	r26, r16
    23ea:	b1 07       	cpc	r27, r17
    23ec:	70 f0       	brcs	.+28     	; 0x240a <__stack+0x20b>
    23ee:	ed a9       	ldd	r30, Y+53	; 0x35
    23f0:	fe a9       	ldd	r31, Y+54	; 0x36
    23f2:	81 8b       	std	Z+17, r24	; 0x11
    23f4:	92 8b       	std	Z+18, r25	; 0x12
    23f6:	a3 8b       	std	Z+19, r26	; 0x13
    23f8:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	a1 05       	cpc	r26, r1
    23fe:	b1 05       	cpc	r27, r1
    2400:	91 f4       	brne	.+36     	; 0x2426 <__stack+0x227>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
#endif

// needs for GUI ACK
 	ackHost = 'X';
    2402:	88 e5       	ldi	r24, 0x58	; 88
    2404:	80 93 54 05 	sts	0x0554, r24
    2408:	9c ce       	rjmp	.-712    	; 0x2142 <plan_buffer_line+0x5a>
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    240a:	d8 01       	movw	r26, r16
    240c:	c7 01       	movw	r24, r14
    240e:	ef cf       	rjmp	.-34     	; 0x23ee <__stack+0x1ef>
    2410:	da 01       	movw	r26, r20
    2412:	c9 01       	movw	r24, r18
    2414:	8e 15       	cp	r24, r14
    2416:	9f 05       	cpc	r25, r15
    2418:	a0 07       	cpc	r26, r16
    241a:	b1 07       	cpc	r27, r17
    241c:	40 f7       	brcc	.-48     	; 0x23ee <__stack+0x1ef>
    241e:	f5 cf       	rjmp	.-22     	; 0x240a <__stack+0x20b>
    2420:	da 01       	movw	r26, r20
    2422:	c9 01       	movw	r24, r18
    2424:	d4 cf       	rjmp	.-88     	; 0x23ce <__stack+0x1cf>
// needs for GUI ACK
 	ackHost = 'X';
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2426:	29 81       	ldd	r18, Y+1	; 0x01
    2428:	3a 81       	ldd	r19, Y+2	; 0x02
    242a:	4b 81       	ldd	r20, Y+3	; 0x03
    242c:	5c 81       	ldd	r21, Y+4	; 0x04
    242e:	2d 8f       	std	Y+29, r18	; 0x1d
    2430:	3e 8f       	std	Y+30, r19	; 0x1e
    2432:	4f 8f       	std	Y+31, r20	; 0x1f
    2434:	58 a3       	std	Y+32, r21	; 0x20
    2436:	80 91 10 05 	lds	r24, 0x0510
    243a:	90 91 11 05 	lds	r25, 0x0511
    243e:	a0 91 12 05 	lds	r26, 0x0512
    2442:	b0 91 13 05 	lds	r27, 0x0513
    2446:	28 1b       	sub	r18, r24
    2448:	39 0b       	sbc	r19, r25
    244a:	4a 0b       	sbc	r20, r26
    244c:	5b 0b       	sbc	r21, r27
    244e:	ca 01       	movw	r24, r20
    2450:	b9 01       	movw	r22, r18
    2452:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    2456:	20 91 8d 06 	lds	r18, 0x068D
    245a:	30 91 8e 06 	lds	r19, 0x068E
    245e:	40 91 8f 06 	lds	r20, 0x068F
    2462:	50 91 90 06 	lds	r21, 0x0690
    2466:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    246a:	69 ab       	std	Y+49, r22	; 0x31
    246c:	7a ab       	std	Y+50, r23	; 0x32
    246e:	8b ab       	std	Y+51, r24	; 0x33
    2470:	9c ab       	std	Y+52, r25	; 0x34
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    2472:	a9 a2       	std	Y+33, r10	; 0x21
    2474:	ba a2       	std	Y+34, r11	; 0x22
    2476:	cb a2       	std	Y+35, r12	; 0x23
    2478:	dc a2       	std	Y+36, r13	; 0x24
    247a:	80 91 14 05 	lds	r24, 0x0514
    247e:	90 91 15 05 	lds	r25, 0x0515
    2482:	a0 91 16 05 	lds	r26, 0x0516
    2486:	b0 91 17 05 	lds	r27, 0x0517
    248a:	a6 01       	movw	r20, r12
    248c:	95 01       	movw	r18, r10
    248e:	28 1b       	sub	r18, r24
    2490:	39 0b       	sbc	r19, r25
    2492:	4a 0b       	sbc	r20, r26
    2494:	5b 0b       	sbc	r21, r27
    2496:	ca 01       	movw	r24, r20
    2498:	b9 01       	movw	r22, r18
    249a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    249e:	20 91 91 06 	lds	r18, 0x0691
    24a2:	30 91 92 06 	lds	r19, 0x0692
    24a6:	40 91 93 06 	lds	r20, 0x0693
    24aa:	50 91 94 06 	lds	r21, 0x0694
    24ae:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    24b2:	6d a7       	std	Y+45, r22	; 0x2d
    24b4:	7e a7       	std	Y+46, r23	; 0x2e
    24b6:	8f a7       	std	Y+47, r24	; 0x2f
    24b8:	98 ab       	std	Y+48, r25	; 0x30
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    24ba:	69 8e       	std	Y+25, r6	; 0x19
    24bc:	7a 8e       	std	Y+26, r7	; 0x1a
    24be:	8b 8e       	std	Y+27, r8	; 0x1b
    24c0:	9c 8e       	std	Y+28, r9	; 0x1c
    24c2:	c4 01       	movw	r24, r8
    24c4:	b3 01       	movw	r22, r6
    24c6:	62 19       	sub	r22, r2
    24c8:	73 09       	sbc	r23, r3
    24ca:	84 09       	sbc	r24, r4
    24cc:	95 09       	sbc	r25, r5
    24ce:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    24d2:	20 91 95 06 	lds	r18, 0x0695
    24d6:	30 91 96 06 	lds	r19, 0x0696
    24da:	40 91 97 06 	lds	r20, 0x0697
    24de:	50 91 98 06 	lds	r21, 0x0698
    24e2:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    24e6:	69 a7       	std	Y+41, r22	; 0x29
    24e8:	7a a7       	std	Y+42, r23	; 0x2a
    24ea:	8b a7       	std	Y+43, r24	; 0x2b
    24ec:	9c a7       	std	Y+44, r25	; 0x2c
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    24ee:	2d 96       	adiw	r28, 0x0d	; 13
    24f0:	4c ad       	ldd	r20, Y+60	; 0x3c
    24f2:	5d ad       	ldd	r21, Y+61	; 0x3d
    24f4:	6e ad       	ldd	r22, Y+62	; 0x3e
    24f6:	7f ad       	ldd	r23, Y+63	; 0x3f
    24f8:	2d 97       	sbiw	r28, 0x0d	; 13
    24fa:	4d 8b       	std	Y+21, r20	; 0x15
    24fc:	5e 8b       	std	Y+22, r21	; 0x16
    24fe:	6f 8b       	std	Y+23, r22	; 0x17
    2500:	78 8f       	std	Y+24, r23	; 0x18
    2502:	cb 01       	movw	r24, r22
    2504:	ba 01       	movw	r22, r20
    2506:	29 89       	ldd	r18, Y+17	; 0x11
    2508:	3a 89       	ldd	r19, Y+18	; 0x12
    250a:	4b 89       	ldd	r20, Y+19	; 0x13
    250c:	5c 89       	ldd	r21, Y+20	; 0x14
    250e:	62 1b       	sub	r22, r18
    2510:	73 0b       	sbc	r23, r19
    2512:	84 0b       	sbc	r24, r20
    2514:	95 0b       	sbc	r25, r21
    2516:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    251a:	20 91 99 06 	lds	r18, 0x0699
    251e:	30 91 9a 06 	lds	r19, 0x069A
    2522:	40 91 9b 06 	lds	r20, 0x069B
    2526:	50 91 9c 06 	lds	r21, 0x069C
    252a:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    252e:	6d a3       	std	Y+37, r22	; 0x25
    2530:	7e a3       	std	Y+38, r23	; 0x26
    2532:	8f a3       	std	Y+39, r24	; 0x27
    2534:	98 a7       	std	Y+40, r25	; 0x28
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    2536:	69 a9       	ldd	r22, Y+49	; 0x31
    2538:	7a a9       	ldd	r23, Y+50	; 0x32
    253a:	8b a9       	ldd	r24, Y+51	; 0x33
    253c:	9c a9       	ldd	r25, Y+52	; 0x34
    253e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <square>
    2542:	3b 01       	movw	r6, r22
    2544:	4c 01       	movw	r8, r24
    2546:	6d a5       	ldd	r22, Y+45	; 0x2d
    2548:	7e a5       	ldd	r23, Y+46	; 0x2e
    254a:	8f a5       	ldd	r24, Y+47	; 0x2f
    254c:	98 a9       	ldd	r25, Y+48	; 0x30
    254e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <square>
    2552:	7b 01       	movw	r14, r22
    2554:	8c 01       	movw	r16, r24
    2556:	69 a5       	ldd	r22, Y+41	; 0x29
    2558:	7a a5       	ldd	r23, Y+42	; 0x2a
    255a:	8b a5       	ldd	r24, Y+43	; 0x2b
    255c:	9c a5       	ldd	r25, Y+44	; 0x2c
    255e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <square>
    2562:	5b 01       	movw	r10, r22
    2564:	6c 01       	movw	r12, r24
    2566:	6d a1       	ldd	r22, Y+37	; 0x25
    2568:	7e a1       	ldd	r23, Y+38	; 0x26
    256a:	8f a1       	ldd	r24, Y+39	; 0x27
    256c:	98 a5       	ldd	r25, Y+40	; 0x28
    256e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <square>
    2572:	1b 01       	movw	r2, r22
    2574:	2c 01       	movw	r4, r24
    2576:	c4 01       	movw	r24, r8
    2578:	b3 01       	movw	r22, r6
    257a:	a8 01       	movw	r20, r16
    257c:	97 01       	movw	r18, r14
    257e:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    2582:	a6 01       	movw	r20, r12
    2584:	95 01       	movw	r18, r10
    2586:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    258a:	a2 01       	movw	r20, r4
    258c:	91 01       	movw	r18, r2
    258e:	0e 94 82 2b 	call	0x5704	; 0x5704 <__addsf3>
    2592:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <sqrt>
    2596:	ad a9       	ldd	r26, Y+53	; 0x35
    2598:	be a9       	ldd	r27, Y+54	; 0x36
    259a:	9d 96       	adiw	r26, 0x2d	; 45
    259c:	6d 93       	st	X+, r22
    259e:	7d 93       	st	X+, r23
    25a0:	8d 93       	st	X+, r24
    25a2:	9c 93       	st	X, r25
    25a4:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    25a6:	a8 96       	adiw	r28, 0x28	; 40
    25a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    25aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    25ac:	a8 97       	sbiw	r28, 0x28	; 40
    25ae:	ef 2b       	or	r30, r31
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <__stack+0x3b5>
    25b2:	86 c1       	rjmp	.+780    	; 0x28c0 <__stack+0x6c1>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    25b4:	a6 96       	adiw	r28, 0x26	; 38
    25b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    25b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    25ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    25bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    25be:	a6 97       	sbiw	r28, 0x26	; 38
    25c0:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	34 e2       	ldi	r19, 0x24	; 36
    25c8:	44 e7       	ldi	r20, 0x74	; 116
    25ca:	59 e4       	ldi	r21, 0x49	; 73
    25cc:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    25d0:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <lround>
    25d4:	ac 01       	movw	r20, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	da 01       	movw	r26, r20
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    25de:	0e 94 be 2c 	call	0x597c	; 0x597c <__floatunsisf>
    25e2:	9b 01       	movw	r18, r22
    25e4:	ac 01       	movw	r20, r24
    25e6:	60 ec       	ldi	r22, 0xC0	; 192
    25e8:	71 ee       	ldi	r23, 0xE1	; 225
    25ea:	84 e6       	ldi	r24, 0x64	; 100
    25ec:	9c e4       	ldi	r25, 0x4C	; 76
    25ee:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    25f2:	7b 01       	movw	r14, r22
    25f4:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    25f6:	69 a9       	ldd	r22, Y+49	; 0x31
    25f8:	7a a9       	ldd	r23, Y+50	; 0x32
    25fa:	8b a9       	ldd	r24, Y+51	; 0x33
    25fc:	9c a9       	ldd	r25, Y+52	; 0x34
    25fe:	a8 01       	movw	r20, r16
    2600:	97 01       	movw	r18, r14
    2602:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    2606:	ad a9       	ldd	r26, Y+53	; 0x35
    2608:	be a9       	ldd	r27, Y+54	; 0x36
    260a:	59 96       	adiw	r26, 0x19	; 25
    260c:	6d 93       	st	X+, r22
    260e:	7d 93       	st	X+, r23
    2610:	8d 93       	st	X+, r24
    2612:	9c 93       	st	X, r25
    2614:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    2616:	6d a5       	ldd	r22, Y+45	; 0x2d
    2618:	7e a5       	ldd	r23, Y+46	; 0x2e
    261a:	8f a5       	ldd	r24, Y+47	; 0x2f
    261c:	98 a9       	ldd	r25, Y+48	; 0x30
    261e:	a8 01       	movw	r20, r16
    2620:	97 01       	movw	r18, r14
    2622:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    2626:	ed a9       	ldd	r30, Y+53	; 0x35
    2628:	fe a9       	ldd	r31, Y+54	; 0x36
    262a:	65 8f       	std	Z+29, r22	; 0x1d
    262c:	76 8f       	std	Z+30, r23	; 0x1e
    262e:	87 8f       	std	Z+31, r24	; 0x1f
    2630:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    2632:	69 a5       	ldd	r22, Y+41	; 0x29
    2634:	7a a5       	ldd	r23, Y+42	; 0x2a
    2636:	8b a5       	ldd	r24, Y+43	; 0x2b
    2638:	9c a5       	ldd	r25, Y+44	; 0x2c
    263a:	a8 01       	movw	r20, r16
    263c:	97 01       	movw	r18, r14
    263e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    2642:	ad a9       	ldd	r26, Y+53	; 0x35
    2644:	be a9       	ldd	r27, Y+54	; 0x36
    2646:	91 96       	adiw	r26, 0x21	; 33
    2648:	6d 93       	st	X+, r22
    264a:	7d 93       	st	X+, r23
    264c:	8d 93       	st	X+, r24
    264e:	9c 93       	st	X, r25
    2650:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    2652:	6d a1       	ldd	r22, Y+37	; 0x25
    2654:	7e a1       	ldd	r23, Y+38	; 0x26
    2656:	8f a1       	ldd	r24, Y+39	; 0x27
    2658:	98 a5       	ldd	r25, Y+40	; 0x28
    265a:	a8 01       	movw	r20, r16
    265c:	97 01       	movw	r18, r14
    265e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    2662:	ed a9       	ldd	r30, Y+53	; 0x35
    2664:	fe a9       	ldd	r31, Y+54	; 0x36
    2666:	65 a3       	std	Z+37, r22	; 0x25
    2668:	76 a3       	std	Z+38, r23	; 0x26
    266a:	87 a3       	std	Z+39, r24	; 0x27
    266c:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    266e:	65 a5       	ldd	r22, Z+45	; 0x2d
    2670:	76 a5       	ldd	r23, Z+46	; 0x2e
    2672:	87 a5       	ldd	r24, Z+47	; 0x2f
    2674:	90 a9       	ldd	r25, Z+48	; 0x30
    2676:	a8 01       	movw	r20, r16
    2678:	97 01       	movw	r18, r14
    267a:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    267e:	ad a9       	ldd	r26, Y+53	; 0x35
    2680:	be a9       	ldd	r27, Y+54	; 0x36
    2682:	99 96       	adiw	r26, 0x29	; 41
    2684:	6d 93       	st	X+, r22
    2686:	7d 93       	st	X+, r23
    2688:	8d 93       	st	X+, r24
    268a:	9c 93       	st	X, r25
    268c:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    268e:	51 96       	adiw	r26, 0x11	; 17
    2690:	6d 91       	ld	r22, X+
    2692:	7d 91       	ld	r23, X+
    2694:	8d 91       	ld	r24, X+
    2696:	9c 91       	ld	r25, X
    2698:	54 97       	sbiw	r26, 0x14	; 20
    269a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    269e:	5b 01       	movw	r10, r22
    26a0:	6c 01       	movw	r12, r24
    26a2:	a8 01       	movw	r20, r16
    26a4:	97 01       	movw	r18, r14
    26a6:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    26aa:	0e 94 0e 2c 	call	0x581c	; 0x581c <ceil>
    26ae:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
    26b2:	3b 01       	movw	r6, r22
    26b4:	4c 01       	movw	r8, r24
    26b6:	ed a9       	ldd	r30, Y+53	; 0x35
    26b8:	fe a9       	ldd	r31, Y+54	; 0x36
    26ba:	65 8b       	std	Z+21, r22	; 0x15
    26bc:	76 8b       	std	Z+22, r23	; 0x16
    26be:	87 8b       	std	Z+23, r24	; 0x17
    26c0:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	81 ab       	std	Z+49, r24	; 0x31
    26cc:	92 ab       	std	Z+50, r25	; 0x32
    26ce:	a3 ab       	std	Z+51, r26	; 0x33
    26d0:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    26d2:	60 91 ab 06 	lds	r22, 0x06AB
    26d6:	70 91 ac 06 	lds	r23, 0x06AC
    26da:	80 91 ad 06 	lds	r24, 0x06AD
    26de:	90 91 ae 06 	lds	r25, 0x06AE
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e7       	ldi	r20, 0x70	; 112
    26e8:	52 e4       	ldi	r21, 0x42	; 66
    26ea:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e2       	ldi	r20, 0x20	; 32
    26f4:	52 e4       	ldi	r21, 0x42	; 66
    26f6:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    26fa:	7b 01       	movw	r14, r22
    26fc:	8c 01       	movw	r16, r24
    26fe:	ad a9       	ldd	r26, Y+53	; 0x35
    2700:	be a9       	ldd	r27, Y+54	; 0x36
    2702:	9d 96       	adiw	r26, 0x2d	; 45
    2704:	6d 91       	ld	r22, X+
    2706:	7d 91       	ld	r23, X+
    2708:	8d 91       	ld	r24, X+
    270a:	9c 91       	ld	r25, X
    270c:	d0 97       	sbiw	r26, 0x30	; 48
    270e:	a6 01       	movw	r20, r12
    2710:	95 01       	movw	r18, r10
    2712:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    2716:	9b 01       	movw	r18, r22
    2718:	ac 01       	movw	r20, r24
    271a:	c8 01       	movw	r24, r16
    271c:	b7 01       	movw	r22, r14
    271e:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    2722:	0e 94 0e 2c 	call	0x581c	; 0x581c <ceil>
    2726:	0d a9       	ldd	r16, Y+53	; 0x35
    2728:	1e a9       	ldd	r17, Y+54	; 0x36
    272a:	03 5c       	subi	r16, 0xC3	; 195
    272c:	1f 4f       	sbci	r17, 0xFF	; 255
    272e:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
    2732:	f8 01       	movw	r30, r16
    2734:	60 83       	st	Z, r22
    2736:	71 83       	std	Z+1, r23	; 0x01
    2738:	82 83       	std	Z+2, r24	; 0x02
    273a:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    273c:	20 91 20 05 	lds	r18, 0x0520
    2740:	22 23       	and	r18, r18
    2742:	09 f0       	breq	.+2      	; 0x2746 <__stack+0x547>
    2744:	ca c0       	rjmp	.+404    	; 0x28da <__stack+0x6db>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    2746:	ad a9       	ldd	r26, Y+53	; 0x35
    2748:	be a9       	ldd	r27, Y+54	; 0x36
    274a:	d5 96       	adiw	r26, 0x35	; 53
    274c:	6d 92       	st	X+, r6
    274e:	7d 92       	st	X+, r7
    2750:	8d 92       	st	X+, r8
    2752:	9c 92       	st	X, r9
    2754:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    2756:	fd 01       	movw	r30, r26
    2758:	61 ae       	std	Z+57, r6	; 0x39
    275a:	72 ae       	std	Z+58, r7	; 0x3a
    275c:	83 ae       	std	Z+59, r8	; 0x3b
    275e:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    2760:	ef 5b       	subi	r30, 0xBF	; 191
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	10 82       	st	Z, r1
    2766:	11 82       	std	Z+1, r1	; 0x01
    2768:	12 82       	std	Z+2, r1	; 0x02
    276a:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    276c:	ad 01       	movw	r20, r26
    276e:	4b 5b       	subi	r20, 0xBB	; 187
    2770:	5f 4f       	sbci	r21, 0xFF	; 255
    2772:	fd 01       	movw	r30, r26
    2774:	81 89       	ldd	r24, Z+17	; 0x11
    2776:	92 89       	ldd	r25, Z+18	; 0x12
    2778:	a3 89       	ldd	r26, Z+19	; 0x13
    277a:	b4 89       	ldd	r27, Z+20	; 0x14
    277c:	fa 01       	movw	r30, r20
    277e:	80 83       	st	Z, r24
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	a2 83       	std	Z+2, r26	; 0x02
    2784:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    2786:	d8 01       	movw	r26, r16
    2788:	1d 92       	st	X+, r1
    278a:	1d 92       	st	X+, r1
    278c:	1d 92       	st	X+, r1
    278e:	1c 92       	st	X, r1
    2790:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    2792:	ed a9       	ldd	r30, Y+53	; 0x35
    2794:	fe a9       	ldd	r31, Y+54	; 0x36
    2796:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    2798:	80 91 10 05 	lds	r24, 0x0510
    279c:	90 91 11 05 	lds	r25, 0x0511
    27a0:	a0 91 12 05 	lds	r26, 0x0512
    27a4:	b0 91 13 05 	lds	r27, 0x0513
    27a8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    27aa:	5e 8d       	ldd	r21, Y+30	; 0x1e
    27ac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27ae:	78 a1       	ldd	r23, Y+32	; 0x20
    27b0:	48 17       	cp	r20, r24
    27b2:	59 07       	cpc	r21, r25
    27b4:	6a 07       	cpc	r22, r26
    27b6:	7b 07       	cpc	r23, r27
    27b8:	14 f4       	brge	.+4      	; 0x27be <__stack+0x5bf>
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    27be:	80 91 14 05 	lds	r24, 0x0514
    27c2:	90 91 15 05 	lds	r25, 0x0515
    27c6:	a0 91 16 05 	lds	r26, 0x0516
    27ca:	b0 91 17 05 	lds	r27, 0x0517
    27ce:	49 a1       	ldd	r20, Y+33	; 0x21
    27d0:	5a a1       	ldd	r21, Y+34	; 0x22
    27d2:	6b a1       	ldd	r22, Y+35	; 0x23
    27d4:	7c a1       	ldd	r23, Y+36	; 0x24
    27d6:	48 17       	cp	r20, r24
    27d8:	59 07       	cpc	r21, r25
    27da:	6a 07       	cpc	r22, r26
    27dc:	7b 07       	cpc	r23, r27
    27de:	44 f4       	brge	.+16     	; 0x27f0 <__stack+0x5f1>
    27e0:	ad a9       	ldd	r26, Y+53	; 0x35
    27e2:	be a9       	ldd	r27, Y+54	; 0x36
    27e4:	50 96       	adiw	r26, 0x10	; 16
    27e6:	8c 91       	ld	r24, X
    27e8:	50 97       	sbiw	r26, 0x10	; 16
    27ea:	88 60       	ori	r24, 0x08	; 8
    27ec:	50 96       	adiw	r26, 0x10	; 16
    27ee:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    27f0:	80 91 18 05 	lds	r24, 0x0518
    27f4:	90 91 19 05 	lds	r25, 0x0519
    27f8:	a0 91 1a 05 	lds	r26, 0x051A
    27fc:	b0 91 1b 05 	lds	r27, 0x051B
    2800:	49 8d       	ldd	r20, Y+25	; 0x19
    2802:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2804:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2806:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2808:	48 17       	cp	r20, r24
    280a:	59 07       	cpc	r21, r25
    280c:	6a 07       	cpc	r22, r26
    280e:	7b 07       	cpc	r23, r27
    2810:	44 f4       	brge	.+16     	; 0x2822 <__stack+0x623>
    2812:	ad a9       	ldd	r26, Y+53	; 0x35
    2814:	be a9       	ldd	r27, Y+54	; 0x36
    2816:	50 96       	adiw	r26, 0x10	; 16
    2818:	8c 91       	ld	r24, X
    281a:	50 97       	sbiw	r26, 0x10	; 16
    281c:	80 64       	ori	r24, 0x40	; 64
    281e:	50 96       	adiw	r26, 0x10	; 16
    2820:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2822:	4d 89       	ldd	r20, Y+21	; 0x15
    2824:	5e 89       	ldd	r21, Y+22	; 0x16
    2826:	6f 89       	ldd	r22, Y+23	; 0x17
    2828:	78 8d       	ldd	r23, Y+24	; 0x18
    282a:	89 89       	ldd	r24, Y+17	; 0x11
    282c:	9a 89       	ldd	r25, Y+18	; 0x12
    282e:	ab 89       	ldd	r26, Y+19	; 0x13
    2830:	bc 89       	ldd	r27, Y+20	; 0x14
    2832:	48 17       	cp	r20, r24
    2834:	59 07       	cpc	r21, r25
    2836:	6a 07       	cpc	r22, r26
    2838:	7b 07       	cpc	r23, r27
    283a:	44 f4       	brge	.+16     	; 0x284c <__stack+0x64d>
    283c:	ad a9       	ldd	r26, Y+53	; 0x35
    283e:	be a9       	ldd	r27, Y+54	; 0x36
    2840:	50 96       	adiw	r26, 0x10	; 16
    2842:	8c 91       	ld	r24, X
    2844:	50 97       	sbiw	r26, 0x10	; 16
    2846:	80 68       	ori	r24, 0x80	; 128
    2848:	50 96       	adiw	r26, 0x10	; 16
    284a:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    284c:	29 96       	adiw	r28, 0x09	; 9
    284e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2850:	ff ad       	ldd	r31, Y+63	; 0x3f
    2852:	29 97       	sbiw	r28, 0x09	; 9
    2854:	f0 93 0d 05 	sts	0x050D, r31
    2858:	e0 93 0c 05 	sts	0x050C, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    285c:	a0 e1       	ldi	r26, 0x10	; 16
    285e:	b5 e0       	ldi	r27, 0x05	; 5
    2860:	fe 01       	movw	r30, r28
    2862:	31 96       	adiw	r30, 0x01	; 1
    2864:	80 e1       	ldi	r24, 0x10	; 16
    2866:	01 90       	ld	r0, Z+
    2868:	0d 92       	st	X+, r0
    286a:	81 50       	subi	r24, 0x01	; 1
    286c:	e1 f7       	brne	.-8      	; 0x2866 <__stack+0x667>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    286e:	22 23       	and	r18, r18
    2870:	11 f0       	breq	.+4      	; 0x2876 <__stack+0x677>
    2872:	0e 94 6d 10 	call	0x20da	; 0x20da <planner_recalculate>
  st_wake_up();
    2876:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <st_wake_up>
    287a:	63 cc       	rjmp	.-1850   	; 0x2142 <plan_buffer_line+0x5a>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    287c:	10 95       	com	r17
    287e:	00 95       	com	r16
    2880:	f0 94       	com	r15
    2882:	e0 94       	com	r14
    2884:	e1 1c       	adc	r14, r1
    2886:	f1 1c       	adc	r15, r1
    2888:	01 1d       	adc	r16, r1
    288a:	11 1d       	adc	r17, r1
    288c:	88 cd       	rjmp	.-1264   	; 0x239e <__stack+0x19f>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    288e:	90 94       	com	r9
    2890:	80 94       	com	r8
    2892:	70 94       	com	r7
    2894:	60 94       	com	r6
    2896:	61 1c       	adc	r6, r1
    2898:	71 1c       	adc	r7, r1
    289a:	81 1c       	adc	r8, r1
    289c:	91 1c       	adc	r9, r1
    289e:	ed cc       	rjmp	.-1574   	; 0x227a <__stack+0x7b>
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    28a0:	b0 95       	com	r27
    28a2:	a0 95       	com	r26
    28a4:	90 95       	com	r25
    28a6:	81 95       	neg	r24
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	af 4f       	sbci	r26, 0xFF	; 255
    28ac:	bf 4f       	sbci	r27, 0xFF	; 255
    28ae:	4f cd       	rjmp	.-1378   	; 0x234e <__stack+0x14f>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    28b0:	b0 95       	com	r27
    28b2:	a0 95       	com	r26
    28b4:	90 95       	com	r25
    28b6:	81 95       	neg	r24
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	af 4f       	sbci	r26, 0xFF	; 255
    28bc:	bf 4f       	sbci	r27, 0xFF	; 255
    28be:	2d cd       	rjmp	.-1446   	; 0x231a <__stack+0x11b>
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    28c0:	60 ec       	ldi	r22, 0xC0	; 192
    28c2:	71 ee       	ldi	r23, 0xE1	; 225
    28c4:	84 e6       	ldi	r24, 0x64	; 100
    28c6:	9c e4       	ldi	r25, 0x4C	; 76
    28c8:	a6 96       	adiw	r28, 0x26	; 38
    28ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    28cc:	3d ad       	ldd	r19, Y+61	; 0x3d
    28ce:	4e ad       	ldd	r20, Y+62	; 0x3e
    28d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    28d2:	a6 97       	sbiw	r28, 0x26	; 38
    28d4:	0e 94 25 2c 	call	0x584a	; 0x584a <__divsf3>
    28d8:	7b ce       	rjmp	.-778    	; 0x25d0 <__stack+0x3d1>
  block->rate_delta = ceil(
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    28da:	8d a9       	ldd	r24, Y+53	; 0x35
    28dc:	9e a9       	ldd	r25, Y+54	; 0x36
    28de:	0e 94 57 0b 	call	0x16ae	; 0x16ae <factor_for_safe_speed>
    28e2:	8b 01       	movw	r16, r22
    28e4:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    28e6:	8d a9       	ldd	r24, Y+53	; 0x35
    28e8:	9e a9       	ldd	r25, Y+54	; 0x36
    28ea:	b9 01       	movw	r22, r18
    28ec:	a8 01       	movw	r20, r16
    28ee:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <calculate_trapezoid_for_block>
    28f2:	29 81       	ldd	r18, Y+1	; 0x01
    28f4:	3a 81       	ldd	r19, Y+2	; 0x02
    28f6:	4b 81       	ldd	r20, Y+3	; 0x03
    28f8:	5c 81       	ldd	r21, Y+4	; 0x04
    28fa:	2d 8f       	std	Y+29, r18	; 0x1d
    28fc:	3e 8f       	std	Y+30, r19	; 0x1e
    28fe:	4f 8f       	std	Y+31, r20	; 0x1f
    2900:	58 a3       	std	Y+32, r21	; 0x20
    2902:	4d 81       	ldd	r20, Y+5	; 0x05
    2904:	5e 81       	ldd	r21, Y+6	; 0x06
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	49 a3       	std	Y+33, r20	; 0x21
    290c:	5a a3       	std	Y+34, r21	; 0x22
    290e:	6b a3       	std	Y+35, r22	; 0x23
    2910:	7c a3       	std	Y+36, r23	; 0x24
    2912:	69 85       	ldd	r22, Y+9	; 0x09
    2914:	7a 85       	ldd	r23, Y+10	; 0x0a
    2916:	8b 85       	ldd	r24, Y+11	; 0x0b
    2918:	9c 85       	ldd	r25, Y+12	; 0x0c
    291a:	69 8f       	std	Y+25, r22	; 0x19
    291c:	7a 8f       	std	Y+26, r23	; 0x1a
    291e:	8b 8f       	std	Y+27, r24	; 0x1b
    2920:	9c 8f       	std	Y+28, r25	; 0x1c
    2922:	8d 85       	ldd	r24, Y+13	; 0x0d
    2924:	9e 85       	ldd	r25, Y+14	; 0x0e
    2926:	af 85       	ldd	r26, Y+15	; 0x0f
    2928:	b8 89       	ldd	r27, Y+16	; 0x10
    292a:	8d 8b       	std	Y+21, r24	; 0x15
    292c:	9e 8b       	std	Y+22, r25	; 0x16
    292e:	af 8b       	std	Y+23, r26	; 0x17
    2930:	b8 8f       	std	Y+24, r27	; 0x18
    2932:	20 91 1c 05 	lds	r18, 0x051C
    2936:	30 91 1d 05 	lds	r19, 0x051D
    293a:	40 91 1e 05 	lds	r20, 0x051E
    293e:	50 91 1f 05 	lds	r21, 0x051F
    2942:	29 8b       	std	Y+17, r18	; 0x11
    2944:	3a 8b       	std	Y+18, r19	; 0x12
    2946:	4b 8b       	std	Y+19, r20	; 0x13
    2948:	5c 8b       	std	Y+20, r21	; 0x14
    294a:	20 91 20 05 	lds	r18, 0x0520
    294e:	21 cf       	rjmp	.-446    	; 0x2792 <__stack+0x593>

00002950 <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2954:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <serialRead>
    2958:	98 2f       	mov	r25, r24
    295a:	8f 3f       	cpi	r24, 0xFF	; 255
    295c:	e1 f0       	breq	.+56     	; 0x2996 <sp_process+0x46>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    295e:	20 91 53 05 	lds	r18, 0x0553
    2962:	22 23       	and	r18, r18
    2964:	21 f0       	breq	.+8      	; 0x296e <sp_process+0x1e>
    2966:	9a 30       	cpi	r25, 0x0A	; 10
    2968:	c9 f0       	breq	.+50     	; 0x299c <sp_process+0x4c>
    296a:	9d 30       	cpi	r25, 0x0D	; 13
    296c:	b9 f0       	breq	.+46     	; 0x299c <sp_process+0x4c>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    296e:	91 32       	cpi	r25, 0x21	; 33
    2970:	8c f3       	brlt	.-30     	; 0x2954 <sp_process+0x4>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2972:	89 2f       	mov	r24, r25
    2974:	81 56       	subi	r24, 0x61	; 97
    2976:	8a 31       	cpi	r24, 0x1A	; 26
    2978:	b8 f5       	brcc	.+110    	; 0x29e8 <sp_process+0x98>
      line[char_counter++] = c-'a'+'A';
    297a:	e2 2f       	mov	r30, r18
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	ef 5d       	subi	r30, 0xDF	; 223
    2980:	fa 4f       	sbci	r31, 0xFA	; 250
    2982:	90 52       	subi	r25, 0x20	; 32
    2984:	90 83       	st	Z, r25
    2986:	2f 5f       	subi	r18, 0xFF	; 255
    2988:	20 93 53 05 	sts	0x0553, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    298c:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <serialRead>
    2990:	98 2f       	mov	r25, r24
    2992:	8f 3f       	cpi	r24, 0xFF	; 255
    2994:	21 f7       	brne	.-56     	; 0x295e <sp_process+0xe>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    299c:	e2 2f       	mov	r30, r18
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	ef 5d       	subi	r30, 0xDF	; 223
    29a2:	fa 4f       	sbci	r31, 0xFA	; 250
    29a4:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    29a6:	81 e2       	ldi	r24, 0x21	; 33
    29a8:	95 e0       	ldi	r25, 0x05	; 5
    29aa:	0e 94 a6 05 	call	0xb4c	; 0xb4c <gc_execute_line>
    29ae:	08 2f       	mov	r16, r24
static uint8_t char_counter;

static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    29b0:	80 91 55 05 	lds	r24, 0x0555
    29b4:	88 23       	and	r24, r24
    29b6:	09 f5       	brne	.+66     	; 0x29fa <sp_process+0xaa>
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n")); 
			break;
		case GCSTATUS_NOT_HOMED:
			printPgmString(PSTR("error: Not homed\n")); 
    29b8:	87 e3       	ldi	r24, 0x37	; 55
    29ba:	93 e0       	ldi	r25, 0x03	; 3
    29bc:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {

		vacuum(0);
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
		head_down(0);
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
		atc_fire(0);
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    29d8:	10 92 55 05 	sts	0x0555, r1

		// stops all but home
		set_busy(TRUE);
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    29e2:	10 92 53 05 	sts	0x0553, r1
    29e6:	b6 cf       	rjmp	.-148    	; 0x2954 <sp_process+0x4>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    29e8:	e2 2f       	mov	r30, r18
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	ef 5d       	subi	r30, 0xDF	; 223
    29ee:	fa 4f       	sbci	r31, 0xFA	; 250
    29f0:	90 83       	st	Z, r25
    29f2:	2f 5f       	subi	r18, 0xFF	; 255
    29f4:	20 93 53 05 	sts	0x0553, r18
    29f8:	ad cf       	rjmp	.-166    	; 0x2954 <sp_process+0x4>
	// Always override
	if( gHomed == FALSE ) {
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    29fa:	03 30       	cpi	r16, 0x03	; 3
    29fc:	d1 f1       	breq	.+116    	; 0x2a72 <sp_process+0x122>
    29fe:	04 30       	cpi	r16, 0x04	; 4
    2a00:	d8 f0       	brcs	.+54     	; 0x2a38 <sp_process+0xe8>
    2a02:	05 30       	cpi	r16, 0x05	; 5
    2a04:	89 f1       	breq	.+98     	; 0x2a68 <sp_process+0x118>
    2a06:	05 30       	cpi	r16, 0x05	; 5
    2a08:	00 f1       	brcs	.+64     	; 0x2a4a <sp_process+0xfa>
    2a0a:	06 30       	cpi	r16, 0x06	; 6
    2a0c:	51 f3       	breq	.-44     	; 0x29e2 <sp_process+0x92>
    2a0e:	03 36       	cpi	r16, 0x63	; 99
    2a10:	99 f2       	breq	.-90     	; 0x29b8 <sp_process+0x68>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    2a12:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case GCSTATUS_NO_ACK:
			return;
			break;
		default:
			printPgmString(PSTR("error: "));
    2a14:	8f e2       	ldi	r24, 0x2F	; 47
    2a16:	93 e0       	ldi	r25, 0x03	; 3
    2a18:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
			printInteger(status_code);
    2a1c:	b8 01       	movw	r22, r16
    2a1e:	88 27       	eor	r24, r24
    2a20:	77 fd       	sbrc	r23, 7
    2a22:	80 95       	com	r24
    2a24:	98 2f       	mov	r25, r24
    2a26:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
			printPgmString(PSTR("\n"));
    2a2a:	8d e2       	ldi	r24, 0x2D	; 45
    2a2c:	93 e0       	ldi	r25, 0x03	; 3
    2a2e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    2a32:	01 2b       	or	r16, r17
    2a34:	b1 f2       	breq	.-84     	; 0x29e2 <sp_process+0x92>
    2a36:	c4 cf       	rjmp	.-120    	; 0x29c0 <sp_process+0x70>
	// Always override
	if( gHomed == FALSE ) {
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    2a38:	01 30       	cpi	r16, 0x01	; 1
    2a3a:	89 f0       	breq	.+34     	; 0x2a5e <sp_process+0x10e>
    2a3c:	02 30       	cpi	r16, 0x02	; 2
    2a3e:	50 f0       	brcs	.+20     	; 0x2a54 <sp_process+0x104>
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n")); 
			// typos are ok
			return;
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n")); 
    2a40:	8b e9       	ldi	r24, 0x9B	; 155
    2a42:	93 e0       	ldi	r25, 0x03	; 3
    2a44:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2a48:	cc cf       	rjmp	.-104    	; 0x29e2 <sp_process+0x92>
			printPgmString(PSTR("error: Unsupported statement\n")); 
			// typos are ok
			return;

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n")); 
    2a4a:	80 e6       	ldi	r24, 0x60	; 96
    2a4c:	93 e0       	ldi	r25, 0x03	; 3
    2a4e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2a52:	b6 cf       	rjmp	.-148    	; 0x29c0 <sp_process+0x70>
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
		case GCSTATUS_OK:
			printPgmString(PSTR("ok\r")); 
    2a54:	85 ed       	ldi	r24, 0xD5	; 213
    2a56:	93 e0       	ldi	r25, 0x03	; 3
    2a58:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2a5c:	c2 cf       	rjmp	.-124    	; 0x29e2 <sp_process+0x92>
			break;
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n")); 
    2a5e:	8b eb       	ldi	r24, 0xBB	; 187
    2a60:	93 e0       	ldi	r25, 0x03	; 3
    2a62:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2a66:	bd cf       	rjmp	.-134    	; 0x29e2 <sp_process+0x92>

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n")); 
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n")); 
    2a68:	89 e4       	ldi	r24, 0x49	; 73
    2a6a:	93 e0       	ldi	r25, 0x03	; 3
    2a6c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2a70:	a7 cf       	rjmp	.-178    	; 0x29c0 <sp_process+0x70>
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n")); 
			// typos are ok
			return;
		case GCSTATUS_UNSUPPORTED_STATEMENT:
			printPgmString(PSTR("error: Unsupported statement\n")); 
    2a72:	8d e7       	ldi	r24, 0x7D	; 125
    2a74:	93 e0       	ldi	r25, 0x03	; 3
    2a76:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2a7a:	b3 cf       	rjmp	.-154    	; 0x29e2 <sp_process+0x92>

00002a7c <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	76 e9       	ldi	r23, 0x96	; 150
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <beginSerial>
}
    2a88:	08 95       	ret

00002a8a <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 e2       	ldi	r26, 0x20	; 32
    2a90:	b2 e4       	ldi	r27, 0x42	; 66
    2a92:	80 93 8d 06 	sts	0x068D, r24
    2a96:	90 93 8e 06 	sts	0x068E, r25
    2a9a:	a0 93 8f 06 	sts	0x068F, r26
    2a9e:	b0 93 90 06 	sts	0x0690, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2aa2:	80 93 91 06 	sts	0x0691, r24
    2aa6:	90 93 92 06 	sts	0x0692, r25
    2aaa:	a0 93 93 06 	sts	0x0693, r26
    2aae:	b0 93 94 06 	sts	0x0694, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2ab2:	80 93 95 06 	sts	0x0695, r24
    2ab6:	90 93 96 06 	sts	0x0696, r25
    2aba:	a0 93 97 06 	sts	0x0697, r26
    2abe:	b0 93 98 06 	sts	0x0698, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2ac2:	80 93 99 06 	sts	0x0699, r24
    2ac6:	90 93 9a 06 	sts	0x069A, r25
    2aca:	a0 93 9b 06 	sts	0x069B, r26
    2ace:	b0 93 9c 06 	sts	0x069C, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2ad2:	86 e0       	ldi	r24, 0x06	; 6
    2ad4:	80 93 9e 06 	sts	0x069E, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a6 e9       	ldi	r26, 0x96	; 150
    2ade:	b5 e4       	ldi	r27, 0x45	; 69
    2ae0:	80 93 9f 06 	sts	0x069F, r24
    2ae4:	90 93 a0 06 	sts	0x06A0, r25
    2ae8:	a0 93 a1 06 	sts	0x06A1, r26
    2aec:	b0 93 a2 06 	sts	0x06A2, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	a0 ef       	ldi	r26, 0xF0	; 240
    2af6:	b3 e4       	ldi	r27, 0x43	; 67
    2af8:	80 93 a3 06 	sts	0x06A3, r24
    2afc:	90 93 a4 06 	sts	0x06A4, r25
    2b00:	a0 93 a5 06 	sts	0x06A5, r26
    2b04:	b0 93 a6 06 	sts	0x06A6, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e4       	ldi	r26, 0x40	; 64
    2b0e:	b2 e4       	ldi	r27, 0x42	; 66
    2b10:	80 93 ab 06 	sts	0x06AB, r24
    2b14:	90 93 ac 06 	sts	0x06AC, r25
    2b18:	a0 93 ad 06 	sts	0x06AD, r26
    2b1c:	b0 93 ae 06 	sts	0x06AE, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2b20:	8d ec       	ldi	r24, 0xCD	; 205
    2b22:	9c ec       	ldi	r25, 0xCC	; 204
    2b24:	ac ec       	ldi	r26, 0xCC	; 204
    2b26:	bd e3       	ldi	r27, 0x3D	; 61
    2b28:	80 93 a7 06 	sts	0x06A7, r24
    2b2c:	90 93 a8 06 	sts	0x06A8, r25
    2b30:	a0 93 a9 06 	sts	0x06A9, r26
    2b34:	b0 93 aa 06 	sts	0x06AA, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a8 e4       	ldi	r26, 0x48	; 72
    2b3e:	b2 e4       	ldi	r27, 0x42	; 66
    2b40:	80 93 af 06 	sts	0x06AF, r24
    2b44:	90 93 b0 06 	sts	0x06B0, r25
    2b48:	a0 93 b1 06 	sts	0x06B1, r26
    2b4c:	b0 93 b2 06 	sts	0x06B2, r27
}
    2b50:	08 95       	ret

00002b52 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 5f 03 	call	0x6be	; 0x6be <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2b5a:	87 36       	cpi	r24, 0x67	; 103
    2b5c:	31 f0       	breq	.+12     	; 0x2b6a <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2b5e:	81 30       	cpi	r24, 0x01	; 1
    2b60:	a9 f0       	breq	.+42     	; 0x2b8c <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2b66:	c9 01       	movw	r24, r18
    2b68:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2b6a:	8d e8       	ldi	r24, 0x8D	; 141
    2b6c:	96 e0       	ldi	r25, 0x06	; 6
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	70 e0       	ldi	r23, 0x00	; 0
    2b72:	46 e2       	ldi	r20, 0x26	; 38
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	0e 94 c4 03 	call	0x788	; 0x788 <memcpy_from_eeprom_with_checksum>
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	89 2b       	or	r24, r25
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <read_settings+0x30>
    2b80:	21 e0       	ldi	r18, 0x01	; 1
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	28 27       	eor	r18, r24
    2b86:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2b88:	c9 01       	movw	r24, r18
    2b8a:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2b8c:	8d e8       	ldi	r24, 0x8D	; 141
    2b8e:	96 e0       	ldi	r25, 0x06	; 6
    2b90:	61 e0       	ldi	r22, 0x01	; 1
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	4b e1       	ldi	r20, 0x1B	; 27
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	0e 94 c4 03 	call	0x788	; 0x788 <memcpy_from_eeprom_with_checksum>
    2b9c:	89 2b       	or	r24, r25
    2b9e:	09 f3       	breq	.-62     	; 0x2b62 <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a0 e4       	ldi	r26, 0x40	; 64
    2ba6:	b2 e4       	ldi	r27, 0x42	; 66
    2ba8:	80 93 ab 06 	sts	0x06AB, r24
    2bac:	90 93 ac 06 	sts	0x06AC, r25
    2bb0:	a0 93 ad 06 	sts	0x06AD, r26
    2bb4:	b0 93 ae 06 	sts	0x06AE, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	a8 e4       	ldi	r26, 0x48	; 72
    2bbe:	b2 e4       	ldi	r27, 0x42	; 66
    2bc0:	80 93 af 06 	sts	0x06AF, r24
    2bc4:	90 93 b0 06 	sts	0x06B0, r25
    2bc8:	a0 93 b1 06 	sts	0x06B1, r26
    2bcc:	b0 93 b2 06 	sts	0x06B2, r27
    2bd0:	21 e0       	ldi	r18, 0x01	; 1
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	c8 cf       	rjmp	.-112    	; 0x2b66 <read_settings+0x14>

00002bd6 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	67 e6       	ldi	r22, 0x67	; 103
    2bdc:	0e 94 67 03 	call	0x6ce	; 0x6ce <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	6d e8       	ldi	r22, 0x8D	; 141
    2be6:	76 e0       	ldi	r23, 0x06	; 6
    2be8:	46 e2       	ldi	r20, 0x26	; 38
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	0e 94 88 03 	call	0x710	; 0x710 <memcpy_to_eeprom_with_checksum>
}
    2bf0:	08 95       	ret

00002bf2 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2bf2:	fc 01       	movw	r30, r24
  switch(parameter) {
    2bf4:	86 30       	cpi	r24, 0x06	; 6
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <settings_store_setting+0xa>
    2bfa:	6d c0       	rjmp	.+218    	; 0x2cd6 <settings_store_setting+0xe4>
    2bfc:	87 30       	cpi	r24, 0x07	; 7
    2bfe:	91 05       	cpc	r25, r1
    2c00:	a4 f0       	brlt	.+40     	; 0x2c2a <settings_store_setting+0x38>
    2c02:	88 30       	cpi	r24, 0x08	; 8
    2c04:	91 05       	cpc	r25, r1
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <settings_store_setting+0x18>
    2c08:	48 c0       	rjmp	.+144    	; 0x2c9a <settings_store_setting+0xa8>
    2c0a:	88 30       	cpi	r24, 0x08	; 8
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	b4 f1       	brlt	.+108    	; 0x2c7c <settings_store_setting+0x8a>
    2c10:	89 30       	cpi	r24, 0x09	; 9
    2c12:	91 05       	cpc	r25, r1
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <settings_store_setting+0x26>
    2c16:	7b c0       	rjmp	.+246    	; 0x2d0e <settings_store_setting+0x11c>
    2c18:	e8 5e       	subi	r30, 0xE8	; 232
    2c1a:	f3 40       	sbci	r31, 0x03	; 3
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <settings_store_setting+0x2e>
    2c1e:	6a c0       	rjmp	.+212    	; 0x2cf4 <settings_store_setting+0x102>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2c20:	8e ee       	ldi	r24, 0xEE	; 238
    2c22:	93 e0       	ldi	r25, 0x03	; 3
    2c24:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2c28:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    2c2a:	84 30       	cpi	r24, 0x04	; 4
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <settings_store_setting+0x40>
    2c30:	43 c0       	rjmp	.+134    	; 0x2cb8 <settings_store_setting+0xc6>
    2c32:	85 30       	cpi	r24, 0x05	; 5
    2c34:	91 05       	cpc	r25, r1
    2c36:	9c f4       	brge	.+38     	; 0x2c5e <settings_store_setting+0x6c>
    2c38:	97 fd       	sbrc	r25, 7
    2c3a:	f2 cf       	rjmp	.-28     	; 0x2c20 <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2c3c:	ee 0f       	add	r30, r30
    2c3e:	ff 1f       	adc	r31, r31
    2c40:	ee 0f       	add	r30, r30
    2c42:	ff 1f       	adc	r31, r31
    2c44:	e3 57       	subi	r30, 0x73	; 115
    2c46:	f9 4f       	sbci	r31, 0xF9	; 249
    2c48:	40 83       	st	Z, r20
    2c4a:	51 83       	std	Z+1, r21	; 0x01
    2c4c:	62 83       	std	Z+2, r22	; 0x02
    2c4e:	73 83       	std	Z+3, r23	; 0x03
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c50:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c54:	89 ed       	ldi	r24, 0xD9	; 217
    2c56:	93 e0       	ldi	r25, 0x03	; 3
    2c58:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2c5c:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    2c5e:	40 93 9f 06 	sts	0x069F, r20
    2c62:	50 93 a0 06 	sts	0x06A0, r21
    2c66:	60 93 a1 06 	sts	0x06A1, r22
    2c6a:	70 93 a2 06 	sts	0x06A2, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c6e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c72:	89 ed       	ldi	r24, 0xD9	; 217
    2c74:	93 e0       	ldi	r25, 0x03	; 3
    2c76:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2c7a:	08 95       	ret
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    2c7c:	40 93 a7 06 	sts	0x06A7, r20
    2c80:	50 93 a8 06 	sts	0x06A8, r21
    2c84:	60 93 a9 06 	sts	0x06A9, r22
    2c88:	70 93 aa 06 	sts	0x06AA, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c8c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c90:	89 ed       	ldi	r24, 0xD9	; 217
    2c92:	93 e0       	ldi	r25, 0x03	; 3
    2c94:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2c98:	08 95       	ret
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    2c9a:	40 93 ab 06 	sts	0x06AB, r20
    2c9e:	50 93 ac 06 	sts	0x06AC, r21
    2ca2:	60 93 ad 06 	sts	0x06AD, r22
    2ca6:	70 93 ae 06 	sts	0x06AE, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2caa:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2cae:	89 ed       	ldi	r24, 0xD9	; 217
    2cb0:	93 e0       	ldi	r25, 0x03	; 3
    2cb2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2cb6:	08 95       	ret
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    2cb8:	cb 01       	movw	r24, r22
    2cba:	ba 01       	movw	r22, r20
    2cbc:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <round>
    2cc0:	0e 94 92 2c 	call	0x5924	; 0x5924 <__fixunssfsi>
    2cc4:	60 93 9e 06 	sts	0x069E, r22
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2cc8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2ccc:	89 ed       	ldi	r24, 0xD9	; 217
    2cce:	93 e0       	ldi	r25, 0x03	; 3
    2cd0:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2cd4:	08 95       	ret
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    2cd6:	40 93 a3 06 	sts	0x06A3, r20
    2cda:	50 93 a4 06 	sts	0x06A4, r21
    2cde:	60 93 a5 06 	sts	0x06A5, r22
    2ce2:	70 93 a6 06 	sts	0x06A6, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2ce6:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2cea:	89 ed       	ldi	r24, 0xD9	; 217
    2cec:	93 e0       	ldi	r25, 0x03	; 3
    2cee:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2cf2:	08 95       	ret
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	ba 01       	movw	r22, r20
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e0       	ldi	r20, 0x00	; 0
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	a9 f0       	breq	.+42     	; 0x2d32 <settings_store_setting+0x140>
    2d08:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <st_enable>
    2d0c:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    2d0e:	db 01       	movw	r26, r22
    2d10:	ca 01       	movw	r24, r20
    2d12:	bf 77       	andi	r27, 0x7F	; 127
    2d14:	80 93 af 06 	sts	0x06AF, r24
    2d18:	90 93 b0 06 	sts	0x06B0, r25
    2d1c:	a0 93 b1 06 	sts	0x06B1, r26
    2d20:	b0 93 b2 06 	sts	0x06B2, r27
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2d24:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d28:	89 ed       	ldi	r24, 0xD9	; 217
    2d2a:	93 e0       	ldi	r25, 0x03	; 3
    2d2c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    2d30:	08 95       	ret
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    2d32:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <st_disable>
    2d36:	08 95       	ret

00002d38 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2d38:	82 ec       	ldi	r24, 0xC2	; 194
    2d3a:	95 e0       	ldi	r25, 0x05	; 5
    2d3c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2d40:	8b eb       	ldi	r24, 0xBB	; 187
    2d42:	95 e0       	ldi	r25, 0x05	; 5
    2d44:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printPgmString(PSTR("\r\n"));
    2d48:	88 eb       	ldi	r24, 0xB8	; 184
    2d4a:	95 e0       	ldi	r25, 0x05	; 5
    2d4c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2d50:	82 eb       	ldi	r24, 0xB2	; 178
    2d52:	95 e0       	ldi	r25, 0x05	; 5
    2d54:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2d58:	60 91 8d 06 	lds	r22, 0x068D
    2d5c:	70 91 8e 06 	lds	r23, 0x068E
    2d60:	80 91 8f 06 	lds	r24, 0x068F
    2d64:	90 91 90 06 	lds	r25, 0x0690
    2d68:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2d6c:	82 ea       	ldi	r24, 0xA2	; 162
    2d6e:	95 e0       	ldi	r25, 0x05	; 5
    2d70:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2d74:	8c e9       	ldi	r24, 0x9C	; 156
    2d76:	95 e0       	ldi	r25, 0x05	; 5
    2d78:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2d7c:	60 91 91 06 	lds	r22, 0x0691
    2d80:	70 91 92 06 	lds	r23, 0x0692
    2d84:	80 91 93 06 	lds	r24, 0x0693
    2d88:	90 91 94 06 	lds	r25, 0x0694
    2d8c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2d90:	8c e8       	ldi	r24, 0x8C	; 140
    2d92:	95 e0       	ldi	r25, 0x05	; 5
    2d94:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2d98:	86 e8       	ldi	r24, 0x86	; 134
    2d9a:	95 e0       	ldi	r25, 0x05	; 5
    2d9c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2da0:	60 91 95 06 	lds	r22, 0x0695
    2da4:	70 91 96 06 	lds	r23, 0x0696
    2da8:	80 91 97 06 	lds	r24, 0x0697
    2dac:	90 91 98 06 	lds	r25, 0x0698
    2db0:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2db4:	86 e7       	ldi	r24, 0x76	; 118
    2db6:	95 e0       	ldi	r25, 0x05	; 5
    2db8:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2dbc:	80 e7       	ldi	r24, 0x70	; 112
    2dbe:	95 e0       	ldi	r25, 0x05	; 5
    2dc0:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2dc4:	60 91 99 06 	lds	r22, 0x0699
    2dc8:	70 91 9a 06 	lds	r23, 0x069A
    2dcc:	80 91 9b 06 	lds	r24, 0x069B
    2dd0:	90 91 9c 06 	lds	r25, 0x069C
    2dd4:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2dd8:	8e e5       	ldi	r24, 0x5E	; 94
    2dda:	95 e0       	ldi	r25, 0x05	; 5
    2ddc:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2de0:	88 e5       	ldi	r24, 0x58	; 88
    2de2:	95 e0       	ldi	r25, 0x05	; 5
    2de4:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printInteger(settings.pulse_microseconds);
    2de8:	60 91 9e 06 	lds	r22, 0x069E
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2df6:	8b e3       	ldi	r24, 0x3B	; 59
    2df8:	95 e0       	ldi	r25, 0x05	; 5
    2dfa:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2dfe:	85 e3       	ldi	r24, 0x35	; 53
    2e00:	95 e0       	ldi	r25, 0x05	; 5
    2e02:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.default_feed_rate);
    2e06:	60 91 9f 06 	lds	r22, 0x069F
    2e0a:	70 91 a0 06 	lds	r23, 0x06A0
    2e0e:	80 91 a1 06 	lds	r24, 0x06A1
    2e12:	90 91 a2 06 	lds	r25, 0x06A2
    2e16:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2e1a:	87 e1       	ldi	r24, 0x17	; 23
    2e1c:	95 e0       	ldi	r25, 0x05	; 5
    2e1e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2e22:	81 e1       	ldi	r24, 0x11	; 17
    2e24:	95 e0       	ldi	r25, 0x05	; 5
    2e26:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.default_seek_rate);
    2e2a:	60 91 a3 06 	lds	r22, 0x06A3
    2e2e:	70 91 a4 06 	lds	r23, 0x06A4
    2e32:	80 91 a5 06 	lds	r24, 0x06A5
    2e36:	90 91 a6 06 	lds	r25, 0x06A6
    2e3a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2e3e:	83 ef       	ldi	r24, 0xF3	; 243
    2e40:	94 e0       	ldi	r25, 0x04	; 4
    2e42:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2e46:	8d ee       	ldi	r24, 0xED	; 237
    2e48:	94 e0       	ldi	r25, 0x04	; 4
    2e4a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2e4e:	60 91 a7 06 	lds	r22, 0x06A7
    2e52:	70 91 a8 06 	lds	r23, 0x06A8
    2e56:	80 91 a9 06 	lds	r24, 0x06A9
    2e5a:	90 91 aa 06 	lds	r25, 0x06AA
    2e5e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2e62:	89 ed       	ldi	r24, 0xD9	; 217
    2e64:	94 e0       	ldi	r25, 0x04	; 4
    2e66:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2e6a:	83 ed       	ldi	r24, 0xD3	; 211
    2e6c:	94 e0       	ldi	r25, 0x04	; 4
    2e6e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.acceleration);
    2e72:	60 91 ab 06 	lds	r22, 0x06AB
    2e76:	70 91 ac 06 	lds	r23, 0x06AC
    2e7a:	80 91 ad 06 	lds	r24, 0x06AD
    2e7e:	90 91 ae 06 	lds	r25, 0x06AE
    2e82:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2e86:	85 eb       	ldi	r24, 0xB5	; 181
    2e88:	94 e0       	ldi	r25, 0x04	; 4
    2e8a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2e8e:	8f ea       	ldi	r24, 0xAF	; 175
    2e90:	94 e0       	ldi	r25, 0x04	; 4
    2e92:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printFloat(settings.max_jerk);
    2e96:	60 91 af 06 	lds	r22, 0x06AF
    2e9a:	70 91 b0 06 	lds	r23, 0x06B0
    2e9e:	80 91 b1 06 	lds	r24, 0x06B1
    2ea2:	90 91 b2 06 	lds	r25, 0x06B2
    2ea6:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2eaa:	87 e7       	ldi	r24, 0x77	; 119
    2eac:	94 e0       	ldi	r25, 0x04	; 4
    2eae:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2eb2:	8e e6       	ldi	r24, 0x6E	; 110
    2eb4:	94 e0       	ldi	r25, 0x04	; 4
    2eb6:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
  printInteger(st_is_enabled());
    2eba:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <st_is_enabled>
    2ebe:	aa 27       	eor	r26, r26
    2ec0:	97 fd       	sbrc	r25, 7
    2ec2:	a0 95       	com	r26
    2ec4:	ba 2f       	mov	r27, r26
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2ece:	85 e4       	ldi	r24, 0x45	; 69
    2ed0:	94 e0       	ldi	r25, 0x04	; 4
    2ed2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2ed6:	82 e0       	ldi	r24, 0x02	; 2
    2ed8:	94 e0       	ldi	r25, 0x04	; 4
    2eda:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
}
    2ede:	08 95       	ret

00002ee0 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2ee0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <read_settings>
    2ee4:	89 2b       	or	r24, r25
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <settings_init+0xa>
    2ee8:	08 95       	ret
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2eea:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <settings_reset>
    write_settings();
    2eee:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <write_settings>
    settings_dump();
    2ef2:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <settings_dump>
    2ef6:	08 95       	ret

00002ef8 <spindle_init>:
#include <avr/io.h>
#include <avr/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2ef8:	e1 e0       	ldi	r30, 0x01	; 1
    2efa:	f1 e0       	ldi	r31, 0x01	; 1
    2efc:	80 81       	ld	r24, Z
    2efe:	80 64       	ori	r24, 0x40	; 64
    2f00:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2f02:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2f04:	3e 9a       	sbi	0x07, 6	; 7

}
    2f06:	08 95       	ret

00002f08 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2f08:	97 fd       	sbrc	r25, 7
    2f0a:	07 c0       	rjmp	.+14     	; 0x2f1a <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2f0c:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2f0e:	80 91 02 01 	lds	r24, 0x0102
    2f12:	80 64       	ori	r24, 0x40	; 64
    2f14:	80 93 02 01 	sts	0x0102, r24
}
    2f18:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2f1a:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2f1c:	80 91 02 01 	lds	r24, 0x0102
    2f20:	80 64       	ori	r24, 0x40	; 64
    2f22:	80 93 02 01 	sts	0x0102, r24
}
    2f26:	08 95       	ret

00002f28 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2f28:	e2 e0       	ldi	r30, 0x02	; 2
    2f2a:	f1 e0       	ldi	r31, 0x01	; 1
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8f 7b       	andi	r24, 0xBF	; 191
    2f30:	80 83       	st	Z, r24
}
    2f32:	08 95       	ret

00002f34 <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f34:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f36:	40 e7       	ldi	r20, 0x70	; 112
    2f38:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2f3a:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f3c:	23 2f       	mov	r18, r19
    2f3e:	2a 95       	dec	r18
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2f42:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f44:	fa 01       	movw	r30, r20
    2f46:	31 97       	sbiw	r30, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	2f ef       	ldi	r18, 0xFF	; 255
    2f4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2f50:	92 07       	cpc	r25, r18
    2f52:	99 f7       	brne	.-26     	; 0x2f3a <rotate_head+0x6>

}
    2f54:	08 95       	ret

00002f56 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2f56:	ef e6       	ldi	r30, 0x6F	; 111
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	82 60       	ori	r24, 0x02	; 2
    2f5e:	80 83       	st	Z, r24
}
    2f60:	08 95       	ret

00002f62 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	90 93 6e 05 	sts	0x056E, r25
    2f68:	80 93 6d 05 	sts	0x056D, r24
}
    2f6c:	08 95       	ret

00002f6e <get_busy>:

int get_busy( void ) 
{
	return busy;
    2f6e:	20 91 6d 05 	lds	r18, 0x056D
    2f72:	30 91 6e 05 	lds	r19, 0x056E
}
    2f76:	c9 01       	movw	r24, r18
    2f78:	08 95       	ret

00002f7a <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2f7a:	1f 92       	push	r1
    2f7c:	0f 92       	push	r0
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	0f 92       	push	r0
    2f82:	11 24       	eor	r1, r1
    2f84:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2f86:	81 b3       	in	r24, 0x11	; 17
    2f88:	85 63       	ori	r24, 0x35	; 53
    2f8a:	81 bb       	out	0x11, r24	; 17
}
    2f8c:	8f 91       	pop	r24
    2f8e:	0f 90       	pop	r0
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	0f 90       	pop	r0
    2f94:	1f 90       	pop	r1
    2f96:	18 95       	reti

00002f98 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f98:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2f9a:	08 95       	ret

00002f9c <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f9c:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2f9e:	08 95       	ret

00002fa0 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2fa0:	3c 99       	sbic	0x07, 4	; 7
    2fa2:	04 c0       	rjmp	.+8      	; 0x2fac <st_is_enabled+0xc>
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2fa8:	c9 01       	movw	r24, r18
    2faa:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2fac:	88 b1       	in	r24, 0x08	; 8
    2fae:	82 95       	swap	r24
    2fb0:	8f 70       	andi	r24, 0x0F	; 15
    2fb2:	80 95       	com	r24
    2fb4:	81 70       	andi	r24, 0x01	; 1
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2fba:	c9 01       	movw	r24, r18
    2fbc:	08 95       	ret

00002fbe <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2fbe:	60 30       	cpi	r22, 0x00	; 0
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	72 07       	cpc	r23, r18
    2fc4:	21 e0       	ldi	r18, 0x01	; 1
    2fc6:	82 07       	cpc	r24, r18
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	92 07       	cpc	r25, r18
    2fcc:	08 f4       	brcc	.+2      	; 0x2fd0 <config_step_timer+0x12>
    2fce:	5c c0       	rjmp	.+184    	; 0x3088 <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    2fd0:	60 30       	cpi	r22, 0x00	; 0
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	72 07       	cpc	r23, r18
    2fd6:	28 e0       	ldi	r18, 0x08	; 8
    2fd8:	82 07       	cpc	r24, r18
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	92 07       	cpc	r25, r18
    2fde:	78 f1       	brcs	.+94     	; 0x303e <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    2fe0:	60 30       	cpi	r22, 0x00	; 0
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	72 07       	cpc	r23, r18
    2fe6:	20 e4       	ldi	r18, 0x40	; 64
    2fe8:	82 07       	cpc	r24, r18
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	92 07       	cpc	r25, r18
    2fee:	08 f4       	brcc	.+2      	; 0x2ff2 <config_step_timer+0x34>
    2ff0:	51 c0       	rjmp	.+162    	; 0x3094 <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    2ff2:	60 30       	cpi	r22, 0x00	; 0
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	72 07       	cpc	r23, r18
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	82 07       	cpc	r24, r18
    2ffc:	21 e0       	ldi	r18, 0x01	; 1
    2ffe:	92 07       	cpc	r25, r18
    3000:	08 f4       	brcc	.+2      	; 0x3004 <config_step_timer+0x46>
    3002:	6d c0       	rjmp	.+218    	; 0x30de <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    3004:	60 30       	cpi	r22, 0x00	; 0
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	72 07       	cpc	r23, r18
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	82 07       	cpc	r24, r18
    300e:	24 e0       	ldi	r18, 0x04	; 4
    3010:	92 07       	cpc	r25, r18
    3012:	08 f0       	brcs	.+2      	; 0x3016 <config_step_timer+0x58>
    3014:	71 c0       	rjmp	.+226    	; 0x30f8 <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    3016:	2a e0       	ldi	r18, 0x0A	; 10
    3018:	96 95       	lsr	r25
    301a:	87 95       	ror	r24
    301c:	77 95       	ror	r23
    301e:	67 95       	ror	r22
    3020:	2a 95       	dec	r18
    3022:	d1 f7       	brne	.-12     	; 0x3018 <config_step_timer+0x5a>
    3024:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    3026:	9b 01       	movw	r18, r22
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	50 e0       	ldi	r21, 0x00	; 0
    302c:	8a e0       	ldi	r24, 0x0A	; 10
    302e:	22 0f       	add	r18, r18
    3030:	33 1f       	adc	r19, r19
    3032:	44 1f       	adc	r20, r20
    3034:	55 1f       	adc	r21, r21
    3036:	8a 95       	dec	r24
    3038:	d1 f7       	brne	.-12     	; 0x302e <config_step_timer+0x70>
    303a:	95 e0       	ldi	r25, 0x05	; 5
    303c:	18 c0       	rjmp	.+48     	; 0x306e <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    303e:	23 e0       	ldi	r18, 0x03	; 3
    3040:	96 95       	lsr	r25
    3042:	87 95       	ror	r24
    3044:	77 95       	ror	r23
    3046:	67 95       	ror	r22
    3048:	2a 95       	dec	r18
    304a:	d1 f7       	brne	.-12     	; 0x3040 <config_step_timer+0x82>
    304c:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    304e:	9b 01       	movw	r18, r22
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	22 0f       	add	r18, r18
    3056:	33 1f       	adc	r19, r19
    3058:	44 1f       	adc	r20, r20
    305a:	55 1f       	adc	r21, r21
    305c:	22 0f       	add	r18, r18
    305e:	33 1f       	adc	r19, r19
    3060:	44 1f       	adc	r20, r20
    3062:	55 1f       	adc	r21, r21
    3064:	22 0f       	add	r18, r18
    3066:	33 1f       	adc	r19, r19
    3068:	44 1f       	adc	r20, r20
    306a:	55 1f       	adc	r21, r21
    306c:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    306e:	80 91 81 00 	lds	r24, 0x0081
    3072:	88 7f       	andi	r24, 0xF8	; 248
    3074:	98 2b       	or	r25, r24
    3076:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    307a:	f0 93 89 00 	sts	0x0089, r31
    307e:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    3082:	b9 01       	movw	r22, r18
    3084:	ca 01       	movw	r24, r20
    3086:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    3088:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    308a:	9b 01       	movw	r18, r22
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	50 e0       	ldi	r21, 0x00	; 0
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	ed cf       	rjmp	.-38     	; 0x306e <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    3094:	b6 e0       	ldi	r27, 0x06	; 6
    3096:	96 95       	lsr	r25
    3098:	87 95       	ror	r24
    309a:	77 95       	ror	r23
    309c:	67 95       	ror	r22
    309e:	ba 95       	dec	r27
    30a0:	d1 f7       	brne	.-12     	; 0x3096 <config_step_timer+0xd8>
    30a2:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    30a4:	9b 01       	movw	r18, r22
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	22 0f       	add	r18, r18
    30ac:	33 1f       	adc	r19, r19
    30ae:	44 1f       	adc	r20, r20
    30b0:	55 1f       	adc	r21, r21
    30b2:	22 0f       	add	r18, r18
    30b4:	33 1f       	adc	r19, r19
    30b6:	44 1f       	adc	r20, r20
    30b8:	55 1f       	adc	r21, r21
    30ba:	22 0f       	add	r18, r18
    30bc:	33 1f       	adc	r19, r19
    30be:	44 1f       	adc	r20, r20
    30c0:	55 1f       	adc	r21, r21
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	44 1f       	adc	r20, r20
    30c8:	55 1f       	adc	r21, r21
    30ca:	22 0f       	add	r18, r18
    30cc:	33 1f       	adc	r19, r19
    30ce:	44 1f       	adc	r20, r20
    30d0:	55 1f       	adc	r21, r21
    30d2:	22 0f       	add	r18, r18
    30d4:	33 1f       	adc	r19, r19
    30d6:	44 1f       	adc	r20, r20
    30d8:	55 1f       	adc	r21, r21
    30da:	93 e0       	ldi	r25, 0x03	; 3
    30dc:	c8 cf       	rjmp	.-112    	; 0x306e <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    30de:	bb 27       	eor	r27, r27
    30e0:	a9 2f       	mov	r26, r25
    30e2:	98 2f       	mov	r25, r24
    30e4:	87 2f       	mov	r24, r23
    30e6:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    30e8:	a0 e0       	ldi	r26, 0x00	; 0
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	22 27       	eor	r18, r18
    30ee:	38 2f       	mov	r19, r24
    30f0:	49 2f       	mov	r20, r25
    30f2:	5a 2f       	mov	r21, r26
    30f4:	94 e0       	ldi	r25, 0x04	; 4
    30f6:	bb cf       	rjmp	.-138    	; 0x306e <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    30f8:	ef ef       	ldi	r30, 0xFF	; 255
    30fa:	ff ef       	ldi	r31, 0xFF	; 255
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	3c ef       	ldi	r19, 0xFC	; 252
    3100:	40 e0       	ldi	r20, 0x00	; 0
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	95 e0       	ldi	r25, 0x05	; 5
    3106:	b3 cf       	rjmp	.-154    	; 0x306e <config_step_timer+0xb0>

00003108 <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    3108:	9b 01       	movw	r18, r22
    310a:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    310c:	20 3b       	cpi	r18, 0xB0	; 176
    310e:	84 e0       	ldi	r24, 0x04	; 4
    3110:	38 07       	cpc	r19, r24
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	48 07       	cpc	r20, r24
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	58 07       	cpc	r21, r24
    311a:	78 f4       	brcc	.+30     	; 0x313a <set_step_events_per_minute+0x32>
    311c:	60 e0       	ldi	r22, 0x00	; 0
    311e:	75 e3       	ldi	r23, 0x35	; 53
    3120:	8c e0       	ldi	r24, 0x0C	; 12
    3122:	90 e0       	ldi	r25, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    3124:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <config_step_timer>
    3128:	60 93 6f 05 	sts	0x056F, r22
    312c:	70 93 70 05 	sts	0x0570, r23
    3130:	80 93 71 05 	sts	0x0571, r24
    3134:	90 93 72 05 	sts	0x0572, r25
}
    3138:	08 95       	ret
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	70 e7       	ldi	r23, 0x70	; 112
    313e:	88 e3       	ldi	r24, 0x38	; 56
    3140:	99 e3       	ldi	r25, 0x39	; 57
    3142:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__udivmodsi4>
    3146:	c9 01       	movw	r24, r18
    3148:	da 01       	movw	r26, r20
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	ea cf       	rjmp	.-44     	; 0x3124 <set_step_events_per_minute+0x1c>

00003150 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    3150:	80 b3       	in	r24, 0x10	; 16
    3152:	85 63       	ori	r24, 0x35	; 53
    3154:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    3156:	80 b3       	in	r24, 0x10	; 16
    3158:	8a 6c       	ori	r24, 0xCA	; 202
    315a:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    315c:	81 b3       	in	r24, 0x11	; 17
    315e:	85 63       	ori	r24, 0x35	; 53
    3160:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    3162:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3164:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    3166:	e1 e8       	ldi	r30, 0x81	; 129
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	8f 7e       	andi	r24, 0xEF	; 239
    316e:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    3170:	80 81       	ld	r24, Z
    3172:	88 60       	ori	r24, 0x08	; 8
    3174:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    3176:	e0 e8       	ldi	r30, 0x80	; 128
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	8d 7f       	andi	r24, 0xFD	; 253
    317e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    3180:	80 81       	ld	r24, Z
    3182:	8e 7f       	andi	r24, 0xFE	; 254
    3184:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    3186:	80 81       	ld	r24, Z
    3188:	8f 73       	andi	r24, 0x3F	; 63
    318a:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    318c:	80 81       	ld	r24, Z
    318e:	8f 7c       	andi	r24, 0xCF	; 207
    3190:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    3192:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    319c:	e0 e7       	ldi	r30, 0x70	; 112
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	81 60       	ori	r24, 0x01	; 1
    31a4:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    31a6:	60 e7       	ldi	r22, 0x70	; 112
    31a8:	77 e1       	ldi	r23, 0x17	; 23
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 84 18 	call	0x3108	; 0x3108 <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    31b2:	ef e6       	ldi	r30, 0x6F	; 111
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	8d 7f       	andi	r24, 0xFD	; 253
    31ba:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    31bc:	10 92 73 05 	sts	0x0573, r1
    31c0:	10 92 74 05 	sts	0x0574, r1
    31c4:	10 92 75 05 	sts	0x0575, r1
    31c8:	10 92 76 05 	sts	0x0576, r1
  
  sei();
    31cc:	78 94       	sei
}
    31ce:	08 95       	ret

000031d0 <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    31d0:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    31d2:	81 b3       	in	r24, 0x11	; 17
    31d4:	85 73       	andi	r24, 0x35	; 53
    31d6:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    31d8:	21 15       	cp	r18, r1
    31da:	31 05       	cpc	r19, r1
    31dc:	e1 f0       	breq	.+56     	; 0x3216 <moveLeft+0x46>

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    31de:	4b 99       	sbic	0x09, 3	; 9
    31e0:	1c c0       	rjmp	.+56     	; 0x321a <moveLeft+0x4a>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31e2:	21 50       	subi	r18, 0x01	; 1
    31e4:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31e6:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31e8:	40 e6       	ldi	r20, 0x60	; 96
    31ea:	54 e0       	ldi	r21, 0x04	; 4
    31ec:	04 c0       	rjmp	.+8      	; 0x31f6 <moveLeft+0x26>

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    31ee:	21 50       	subi	r18, 0x01	; 1
    31f0:	30 40       	sbci	r19, 0x00	; 0
    31f2:	4b 99       	sbic	0x09, 3	; 9
    31f4:	12 c0       	rjmp	.+36     	; 0x321a <moveLeft+0x4a>
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    31f6:	81 b3       	in	r24, 0x11	; 17
    31f8:	8a 7c       	andi	r24, 0xCA	; 202
    31fa:	81 60       	ori	r24, 0x01	; 1
    31fc:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31fe:	89 2f       	mov	r24, r25
    3200:	8a 95       	dec	r24
    3202:	f1 f7       	brne	.-4      	; 0x3200 <moveLeft+0x30>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3204:	81 b3       	in	r24, 0x11	; 17
    3206:	8a 7c       	andi	r24, 0xCA	; 202
    3208:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    320a:	fa 01       	movw	r30, r20
    320c:	31 97       	sbiw	r30, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <moveLeft+0x3c>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3210:	21 15       	cp	r18, r1
    3212:	31 05       	cpc	r19, r1
    3214:	61 f7       	brne	.-40     	; 0x31ee <moveLeft+0x1e>
    3216:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    3218:	08 95       	ret
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	08 95       	ret

0000321e <moveRight>:

	return TRUE;
}

unsigned char moveRight( unsigned int distance ) 
{
    321e:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    3220:	81 b3       	in	r24, 0x11	; 17
    3222:	85 73       	andi	r24, 0x35	; 53
    3224:	82 60       	ori	r24, 0x02	; 2
    3226:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3228:	21 15       	cp	r18, r1
    322a:	31 05       	cpc	r19, r1
    322c:	e1 f0       	breq	.+56     	; 0x3266 <moveRight+0x48>

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    322e:	4a 99       	sbic	0x09, 2	; 9
    3230:	1c c0       	rjmp	.+56     	; 0x326a <moveRight+0x4c>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3232:	21 50       	subi	r18, 0x01	; 1
    3234:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3236:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3238:	40 e6       	ldi	r20, 0x60	; 96
    323a:	54 e0       	ldi	r21, 0x04	; 4
    323c:	04 c0       	rjmp	.+8      	; 0x3246 <moveRight+0x28>

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    323e:	21 50       	subi	r18, 0x01	; 1
    3240:	30 40       	sbci	r19, 0x00	; 0
    3242:	4a 99       	sbic	0x09, 2	; 9
    3244:	12 c0       	rjmp	.+36     	; 0x326a <moveRight+0x4c>
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3246:	81 b3       	in	r24, 0x11	; 17
    3248:	8a 7c       	andi	r24, 0xCA	; 202
    324a:	81 60       	ori	r24, 0x01	; 1
    324c:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    324e:	89 2f       	mov	r24, r25
    3250:	8a 95       	dec	r24
    3252:	f1 f7       	brne	.-4      	; 0x3250 <moveRight+0x32>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    3254:	81 b3       	in	r24, 0x11	; 17
    3256:	8a 7c       	andi	r24, 0xCA	; 202
    3258:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    325a:	fa 01       	movw	r30, r20
    325c:	31 97       	sbiw	r30, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <moveRight+0x3e>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3260:	21 15       	cp	r18, r1
    3262:	31 05       	cpc	r19, r1
    3264:	61 f7       	brne	.-40     	; 0x323e <moveRight+0x20>
    3266:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3268:	08 95       	ret
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	08 95       	ret

0000326e <moveForward>:
  }
	return TRUE;
}

unsigned char moveForward( unsigned int distance ) 
{
    326e:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3270:	81 b3       	in	r24, 0x11	; 17
    3272:	85 73       	andi	r24, 0x35	; 53
    3274:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3276:	21 15       	cp	r18, r1
    3278:	31 05       	cpc	r19, r1
    327a:	e1 f0       	breq	.+56     	; 0x32b4 <moveForward+0x46>

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    327c:	48 99       	sbic	0x09, 0	; 9
    327e:	1c c0       	rjmp	.+56     	; 0x32b8 <moveForward+0x4a>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3280:	21 50       	subi	r18, 0x01	; 1
    3282:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3284:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3286:	40 e6       	ldi	r20, 0x60	; 96
    3288:	54 e0       	ldi	r21, 0x04	; 4
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <moveForward+0x26>

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    328c:	21 50       	subi	r18, 0x01	; 1
    328e:	30 40       	sbci	r19, 0x00	; 0
    3290:	48 99       	sbic	0x09, 0	; 9
    3292:	12 c0       	rjmp	.+36     	; 0x32b8 <moveForward+0x4a>
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3294:	81 b3       	in	r24, 0x11	; 17
    3296:	8a 7c       	andi	r24, 0xCA	; 202
    3298:	84 60       	ori	r24, 0x04	; 4
    329a:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    329c:	89 2f       	mov	r24, r25
    329e:	8a 95       	dec	r24
    32a0:	f1 f7       	brne	.-4      	; 0x329e <moveForward+0x30>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    32a2:	81 b3       	in	r24, 0x11	; 17
    32a4:	8a 7c       	andi	r24, 0xCA	; 202
    32a6:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32a8:	fa 01       	movw	r30, r20
    32aa:	31 97       	sbiw	r30, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <moveForward+0x3c>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32ae:	21 15       	cp	r18, r1
    32b0:	31 05       	cpc	r19, r1
    32b2:	61 f7       	brne	.-40     	; 0x328c <moveForward+0x1e>
    32b4:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    32b6:	08 95       	ret


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	08 95       	ret

000032bc <moveBack>:
  }
	return TRUE;
}

unsigned char moveBack( unsigned int distance ) 
{
    32bc:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    32be:	81 b3       	in	r24, 0x11	; 17
    32c0:	85 73       	andi	r24, 0x35	; 53
    32c2:	88 60       	ori	r24, 0x08	; 8
    32c4:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    32c6:	21 15       	cp	r18, r1
    32c8:	31 05       	cpc	r19, r1
    32ca:	e1 f0       	breq	.+56     	; 0x3304 <moveBack+0x48>

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    32cc:	49 99       	sbic	0x09, 1	; 9
    32ce:	1c c0       	rjmp	.+56     	; 0x3308 <moveBack+0x4c>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32d0:	21 50       	subi	r18, 0x01	; 1
    32d2:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32d4:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32d6:	40 e6       	ldi	r20, 0x60	; 96
    32d8:	54 e0       	ldi	r21, 0x04	; 4
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <moveBack+0x28>

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    32dc:	21 50       	subi	r18, 0x01	; 1
    32de:	30 40       	sbci	r19, 0x00	; 0
    32e0:	49 99       	sbic	0x09, 1	; 9
    32e2:	12 c0       	rjmp	.+36     	; 0x3308 <moveBack+0x4c>
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    32e4:	81 b3       	in	r24, 0x11	; 17
    32e6:	8a 7c       	andi	r24, 0xCA	; 202
    32e8:	84 60       	ori	r24, 0x04	; 4
    32ea:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32ec:	89 2f       	mov	r24, r25
    32ee:	8a 95       	dec	r24
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <moveBack+0x32>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    32f2:	81 b3       	in	r24, 0x11	; 17
    32f4:	8a 7c       	andi	r24, 0xCA	; 202
    32f6:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32f8:	fa 01       	movw	r30, r20
    32fa:	31 97       	sbiw	r30, 0x01	; 1
    32fc:	f1 f7       	brne	.-4      	; 0x32fa <moveBack+0x3e>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    32fe:	21 15       	cp	r18, r1
    3300:	31 05       	cpc	r19, r1
    3302:	61 f7       	brne	.-40     	; 0x32dc <moveBack+0x20>
    3304:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3306:	08 95       	ret
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	08 95       	ret

0000330c <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    330c:	80 91 6f 00 	lds	r24, 0x006F
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	96 95       	lsr	r25
    3314:	87 95       	ror	r24
}
    3316:	81 70       	andi	r24, 0x01	; 1
    3318:	08 95       	ret

0000331a <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    331a:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    331c:	82 e0       	ldi	r24, 0x02	; 2
    331e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    3320:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    3322:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    3324:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    3326:	9f e8       	ldi	r25, 0x8F	; 143
    3328:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    332a:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    332c:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    3330:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    3334:	3f ec       	ldi	r19, 0xCF	; 207
    3336:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    333a:	20 ef       	ldi	r18, 0xF0	; 240
    333c:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    3340:	8c e9       	ldi	r24, 0x9C	; 156
    3342:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    3344:	82 e2       	ldi	r24, 0x22	; 34
    3346:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    3348:	83 e1       	ldi	r24, 0x13	; 19
    334a:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    334c:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    334e:	80 e3       	ldi	r24, 0x30	; 48
    3350:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    3352:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    3354:	83 e2       	ldi	r24, 0x23	; 35
    3356:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    3358:	83 e0       	ldi	r24, 0x03	; 3
    335a:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    335e:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    3362:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    3366:	20 93 0b 01 	sts	0x010B, r18
}
    336a:	08 95       	ret

0000336c <get_limit_bits>:
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    336c:	4b 9b       	sbis	0x09, 3	; 9
    336e:	0c c0       	rjmp	.+24     	; 0x3388 <get_limit_bits+0x1c>
    3370:	82 e8       	ldi	r24, 0x82	; 130
      	ret |= _BV( 1 ) ;

	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
    3372:	4a 99       	sbic	0x09, 2	; 9
      	ret |= _BV( 2 ) ;
    3374:	84 60       	ori	r24, 0x04	; 4

	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
    3376:	48 99       	sbic	0x09, 0	; 9
      	ret |= _BV( 3 ) ;
    3378:	88 60       	ori	r24, 0x08	; 8

	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
    337a:	49 99       	sbic	0x09, 1	; 9
      	ret |= _BV( 4 ) ;
    337c:	80 61       	ori	r24, 0x10	; 16

	if( bit_is_set( XHM_PIN, X_HOME ) )
    337e:	04 99       	sbic	0x00, 4	; 0
      	ret |= _BV( 5 ) ;
    3380:	80 62       	ori	r24, 0x20	; 32

	if( bit_is_set( YHM_PIN, Y_HOME ) )
    3382:	90 99       	sbic	0x12, 0	; 18
      	ret |= _BV( 6) ;
    3384:	80 64       	ori	r24, 0x40	; 64

	return ret;

}
    3386:	08 95       	ret
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    3388:	80 e8       	ldi	r24, 0x80	; 128
    338a:	f3 cf       	rjmp	.-26     	; 0x3372 <get_limit_bits+0x6>

0000338c <st_go_home>:

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    338c:	10 92 55 05 	sts	0x0555, r1

// reset position machine thinks we are at.
	plan_init();
    3390:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <plan_init>
	gc_init();
    3394:	0e 94 68 05 	call	0xad0	; 0xad0 <gc_init>

	// if head down, set head up
	if( is_head_down() ) {
    3398:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    339c:	88 23       	and	r24, r24
    339e:	49 f0       	breq	.+18     	; 0x33b2 <st_go_home+0x26>
		head_down(0);
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
		
		//check again
		if(is_head_down() ){
    33a8:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    33ac:	88 23       	and	r24, r24
    33ae:	09 f0       	breq	.+2      	; 0x33b2 <st_go_home+0x26>
    33b0:	62 c0       	rjmp	.+196    	; 0x3476 <st_go_home+0xea>
			return;
		}

	}

	cli();
    33b2:	f8 94       	cli

	// tool changer all down
	atc_fire(0);	
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atc_fire>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    33bc:	4b 99       	sbic	0x09, 3	; 9
    33be:	2c c0       	rjmp	.+88     	; 0x3418 <st_go_home+0x8c>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    33c0:	48 99       	sbic	0x09, 0	; 9
    33c2:	42 c0       	rjmp	.+132    	; 0x3448 <st_go_home+0xbc>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    33c4:	04 99       	sbic	0x00, 4	; 0
    33c6:	15 c0       	rjmp	.+42     	; 0x33f2 <st_go_home+0x66>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <moveLeft>
    33d0:	88 23       	and	r24, r24
    33d2:	c1 f7       	brne	.-16     	; 0x33c4 <st_go_home+0x38>
	printPgmString(PSTR("\r\n"));
#endif

error:;

	sei();
    33d4:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    33d6:	89 b1       	in	r24, 0x09	; 9
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	8f 70       	andi	r24, 0x0F	; 15
    33dc:	90 70       	andi	r25, 0x00	; 0
    33de:	89 2b       	or	r24, r25
    33e0:	39 f4       	brne	.+14     	; 0x33f0 <st_go_home+0x64>
		gHomed = TRUE ;
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	80 93 55 05 	sts	0x0555, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    33e8:	10 92 6e 05 	sts	0x056E, r1
    33ec:	10 92 6d 05 	sts	0x056D, r1
    33f0:	08 95       	ret
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    33f2:	20 ed       	ldi	r18, 0xD0	; 208
    33f4:	37 e0       	ldi	r19, 0x07	; 7
    33f6:	40 e9       	ldi	r20, 0x90	; 144
    33f8:	51 e0       	ldi	r21, 0x01	; 1
    33fa:	ca 01       	movw	r24, r20
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <st_go_home+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3400:	21 50       	subi	r18, 0x01	; 1
    3402:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3404:	d1 f7       	brne	.-12     	; 0x33fa <st_go_home+0x6e>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    3406:	90 99       	sbic	0x12, 0	; 18
    3408:	e5 cf       	rjmp	.-54     	; 0x33d4 <st_go_home+0x48>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0e 94 37 19 	call	0x326e	; 0x326e <moveForward>
    3412:	88 23       	and	r24, r24
    3414:	c1 f7       	brne	.-16     	; 0x3406 <st_go_home+0x7a>
    3416:	de cf       	rjmp	.-68     	; 0x33d4 <st_go_home+0x48>
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
		// no longer homed
		gHomed = FALSE;
    3418:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("xLimit1\r\n"));
    341c:	8c ed       	ldi	r24, 0xDC	; 220
    341e:	95 e0       	ldi	r25, 0x05	; 5
    3420:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    3424:	88 ee       	ldi	r24, 0xE8	; 232
    3426:	93 e0       	ldi	r25, 0x03	; 3
    3428:	0e 94 0f 19 	call	0x321e	; 0x321e <moveRight>
    342c:	88 23       	and	r24, r24
    342e:	41 f1       	breq	.+80     	; 0x3480 <st_go_home+0xf4>
			sei();
			return;
    3430:	20 ed       	ldi	r18, 0xD0	; 208
    3432:	37 e0       	ldi	r19, 0x07	; 7
    3434:	40 e9       	ldi	r20, 0x90	; 144
    3436:	51 e0       	ldi	r21, 0x01	; 1
    3438:	ca 01       	movw	r24, r20
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <st_go_home+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343e:	21 50       	subi	r18, 0x01	; 1
    3440:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3442:	d1 f7       	brne	.-12     	; 0x3438 <st_go_home+0xac>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    3444:	48 9b       	sbis	0x09, 0	; 9
    3446:	be cf       	rjmp	.-132    	; 0x33c4 <st_go_home+0x38>
		// no longer homed
		gHomed = FALSE;
    3448:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("yLimit1\r\n"));
    344c:	86 ee       	ldi	r24, 0xE6	; 230
    344e:	95 e0       	ldi	r25, 0x05	; 5
    3450:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    3454:	88 ee       	ldi	r24, 0xE8	; 232
    3456:	93 e0       	ldi	r25, 0x03	; 3
    3458:	0e 94 5e 19 	call	0x32bc	; 0x32bc <moveBack>
    345c:	88 23       	and	r24, r24
    345e:	91 f0       	breq	.+36     	; 0x3484 <st_go_home+0xf8>
			sei();
			return;
    3460:	20 ed       	ldi	r18, 0xD0	; 208
    3462:	37 e0       	ldi	r19, 0x07	; 7
    3464:	40 e9       	ldi	r20, 0x90	; 144
    3466:	51 e0       	ldi	r21, 0x01	; 1
    3468:	ca 01       	movw	r24, r20
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <st_go_home+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346e:	21 50       	subi	r18, 0x01	; 1
    3470:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	d1 f7       	brne	.-12     	; 0x3468 <st_go_home+0xdc>
    3474:	a7 cf       	rjmp	.-178    	; 0x33c4 <st_go_home+0x38>
	if( is_head_down() ) {
		head_down(0);
		
		//check again
		if(is_head_down() ){
			printPgmString(PSTR("home failed\r\n"));
    3476:	8e ec       	ldi	r24, 0xCE	; 206
    3478:	95 e0       	ldi	r25, 0x05	; 5
    347a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    347e:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
			sei();
    3480:	78 94       	sei
    3482:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
			sei();
    3484:	78 94       	sei
    3486:	08 95       	ret

00003488 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    3488:	07 c0       	rjmp	.+14     	; 0x3498 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    348a:	83 b7       	in	r24, 0x33	; 51
    348c:	81 60       	ori	r24, 0x01	; 1
    348e:	83 bf       	out	0x33, r24	; 51
    3490:	88 95       	sleep
    3492:	83 b7       	in	r24, 0x33	; 51
    3494:	8e 7f       	andi	r24, 0xFE	; 254
    3496:	83 bf       	out	0x33, r24	; 51
    3498:	0e 94 84 0b 	call	0x1708	; 0x1708 <plan_get_current_block>
    349c:	89 2b       	or	r24, r25
    349e:	a9 f7       	brne	.-22     	; 0x348a <st_synchronize+0x2>
}
    34a0:	08 95       	ret

000034a2 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    34a2:	1f 92       	push	r1
    34a4:	0f 92       	push	r0
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	0f 92       	push	r0
    34aa:	0b b6       	in	r0, 0x3b	; 59
    34ac:	0f 92       	push	r0
    34ae:	11 24       	eor	r1, r1
    34b0:	ef 92       	push	r14
    34b2:	ff 92       	push	r15
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	2f 93       	push	r18
    34ba:	3f 93       	push	r19
    34bc:	4f 93       	push	r20
    34be:	5f 93       	push	r21
    34c0:	6f 93       	push	r22
    34c2:	7f 93       	push	r23
    34c4:	8f 93       	push	r24
    34c6:	9f 93       	push	r25
    34c8:	af 93       	push	r26
    34ca:	bf 93       	push	r27
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	ef 93       	push	r30
    34d2:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    34d4:	80 91 55 05 	lds	r24, 0x0555
    34d8:	88 23       	and	r24, r24
    34da:	09 f5       	brne	.+66     	; 0x351e <__vector_17+0x7c>
		// set ack
		ackHost = 'H';
    34dc:	88 e4       	ldi	r24, 0x48	; 72
    34de:	80 93 54 05 	sts	0x0554, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    34e2:	80 91 6f 00 	lds	r24, 0x006F
    34e6:	8d 7f       	andi	r24, 0xFD	; 253
    34e8:	80 93 6f 00 	sts	0x006F, r24
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
}
    34ec:	ff 91       	pop	r31
    34ee:	ef 91       	pop	r30
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	bf 91       	pop	r27
    34f6:	af 91       	pop	r26
    34f8:	9f 91       	pop	r25
    34fa:	8f 91       	pop	r24
    34fc:	7f 91       	pop	r23
    34fe:	6f 91       	pop	r22
    3500:	5f 91       	pop	r21
    3502:	4f 91       	pop	r20
    3504:	3f 91       	pop	r19
    3506:	2f 91       	pop	r18
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	ff 90       	pop	r15
    350e:	ef 90       	pop	r14
    3510:	0f 90       	pop	r0
    3512:	0b be       	out	0x3b, r0	; 59
    3514:	0f 90       	pop	r0
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	0f 90       	pop	r0
    351a:	1f 90       	pop	r1
    351c:	18 95       	reti
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

// don't move if the head is down, this one is ok to let it keep running  
  if( is_head_down() ) {
    351e:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    3522:	88 23       	and	r24, r24
    3524:	19 f7       	brne	.-58     	; 0x34ec <__vector_17+0x4a>
  	return;
 }

  if(busy){ 
    3526:	80 91 6d 05 	lds	r24, 0x056D
    352a:	90 91 6e 05 	lds	r25, 0x056E
    352e:	89 2b       	or	r24, r25
    3530:	e9 f6       	brne	.-70     	; 0x34ec <__vector_17+0x4a>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    3532:	89 b1       	in	r24, 0x09	; 9
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	8f 70       	andi	r24, 0x0F	; 15
    3538:	90 70       	andi	r25, 0x00	; 0
    353a:	89 2b       	or	r24, r25
    353c:	09 f0       	breq	.+2      	; 0x3540 <__vector_17+0x9e>
    353e:	91 c1       	rjmp	.+802    	; 0x3862 <__vector_17+0x3c0>
	DISABLE_STEPPER_DRIVER_INTERRUPT();
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    3540:	91 b3       	in	r25, 0x11	; 17
    3542:	80 91 b3 06 	lds	r24, 0x06B3
    3546:	8a 7c       	andi	r24, 0xCA	; 202
    3548:	95 73       	andi	r25, 0x35	; 53
    354a:	89 2b       	or	r24, r25
    354c:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    354e:	81 b3       	in	r24, 0x11	; 17
    3550:	8a 7c       	andi	r24, 0xCA	; 202
    3552:	90 91 58 05 	lds	r25, 0x0558
    3556:	89 2b       	or	r24, r25
    3558:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    355a:	80 91 9e 06 	lds	r24, 0x069E
    355e:	88 0f       	add	r24, r24
    3560:	84 50       	subi	r24, 0x04	; 4
    3562:	81 95       	neg	r24
    3564:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    3568:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	90 93 6e 05 	sts	0x056E, r25
    3572:	80 93 6d 05 	sts	0x056D, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    3576:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    3578:	e0 91 56 05 	lds	r30, 0x0556
    357c:	f0 91 57 05 	lds	r31, 0x0557
    3580:	30 97       	sbiw	r30, 0x00	; 0
    3582:	09 f4       	brne	.+2      	; 0x3586 <__vector_17+0xe4>
    3584:	d6 c1       	rjmp	.+940    	; 0x3932 <__vector_17+0x490>

    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    3586:	80 89       	ldd	r24, Z+16	; 0x10
    3588:	80 93 b3 06 	sts	0x06B3, r24
    out_bits = 0;
    358c:	10 92 58 05 	sts	0x0558, r1
    counter_x += current_block->steps_x;
    3590:	20 91 59 05 	lds	r18, 0x0559
    3594:	30 91 5a 05 	lds	r19, 0x055A
    3598:	40 91 5b 05 	lds	r20, 0x055B
    359c:	50 91 5c 05 	lds	r21, 0x055C
    35a0:	80 81       	ld	r24, Z
    35a2:	91 81       	ldd	r25, Z+1	; 0x01
    35a4:	a2 81       	ldd	r26, Z+2	; 0x02
    35a6:	b3 81       	ldd	r27, Z+3	; 0x03
    35a8:	28 0f       	add	r18, r24
    35aa:	39 1f       	adc	r19, r25
    35ac:	4a 1f       	adc	r20, r26
    35ae:	5b 1f       	adc	r21, r27
    35b0:	20 93 59 05 	sts	0x0559, r18
    35b4:	30 93 5a 05 	sts	0x055A, r19
    35b8:	40 93 5b 05 	sts	0x055B, r20
    35bc:	50 93 5c 05 	sts	0x055C, r21
    if (counter_x > 0) {
    35c0:	12 16       	cp	r1, r18
    35c2:	13 06       	cpc	r1, r19
    35c4:	14 06       	cpc	r1, r20
    35c6:	15 06       	cpc	r1, r21
    35c8:	0c f0       	brlt	.+2      	; 0x35cc <__vector_17+0x12a>
    35ca:	46 c1       	rjmp	.+652    	; 0x3858 <__vector_17+0x3b6>
      out_bits |= (1<<X_STEP_BIT);
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	80 93 58 05 	sts	0x0558, r24
      counter_x -= current_block->step_event_count;
    35d2:	e1 88       	ldd	r14, Z+17	; 0x11
    35d4:	f2 88       	ldd	r15, Z+18	; 0x12
    35d6:	03 89       	ldd	r16, Z+19	; 0x13
    35d8:	14 89       	ldd	r17, Z+20	; 0x14
    35da:	2e 19       	sub	r18, r14
    35dc:	3f 09       	sbc	r19, r15
    35de:	40 0b       	sbc	r20, r16
    35e0:	51 0b       	sbc	r21, r17
    35e2:	20 93 59 05 	sts	0x0559, r18
    35e6:	30 93 5a 05 	sts	0x055A, r19
    35ea:	40 93 5b 05 	sts	0x055B, r20
    35ee:	50 93 5c 05 	sts	0x055C, r21
    }
    counter_y += current_block->steps_y;
    35f2:	20 91 5d 05 	lds	r18, 0x055D
    35f6:	30 91 5e 05 	lds	r19, 0x055E
    35fa:	40 91 5f 05 	lds	r20, 0x055F
    35fe:	50 91 60 05 	lds	r21, 0x0560
    3602:	84 81       	ldd	r24, Z+4	; 0x04
    3604:	95 81       	ldd	r25, Z+5	; 0x05
    3606:	a6 81       	ldd	r26, Z+6	; 0x06
    3608:	b7 81       	ldd	r27, Z+7	; 0x07
    360a:	28 0f       	add	r18, r24
    360c:	39 1f       	adc	r19, r25
    360e:	4a 1f       	adc	r20, r26
    3610:	5b 1f       	adc	r21, r27
    3612:	20 93 5d 05 	sts	0x055D, r18
    3616:	30 93 5e 05 	sts	0x055E, r19
    361a:	40 93 5f 05 	sts	0x055F, r20
    361e:	50 93 60 05 	sts	0x0560, r21
    if (counter_y > 0) {
    3622:	12 16       	cp	r1, r18
    3624:	13 06       	cpc	r1, r19
    3626:	14 06       	cpc	r1, r20
    3628:	15 06       	cpc	r1, r21
    362a:	8c f4       	brge	.+34     	; 0x364e <__vector_17+0x1ac>
      out_bits |= (1<<Y_STEP_BIT);
    362c:	80 91 58 05 	lds	r24, 0x0558
    3630:	84 60       	ori	r24, 0x04	; 4
    3632:	80 93 58 05 	sts	0x0558, r24
      counter_y -= current_block->step_event_count;
    3636:	2e 19       	sub	r18, r14
    3638:	3f 09       	sbc	r19, r15
    363a:	40 0b       	sbc	r20, r16
    363c:	51 0b       	sbc	r21, r17
    363e:	20 93 5d 05 	sts	0x055D, r18
    3642:	30 93 5e 05 	sts	0x055E, r19
    3646:	40 93 5f 05 	sts	0x055F, r20
    364a:	50 93 60 05 	sts	0x0560, r21
    }
    counter_z += current_block->steps_z;
    364e:	20 91 61 05 	lds	r18, 0x0561
    3652:	30 91 62 05 	lds	r19, 0x0562
    3656:	40 91 63 05 	lds	r20, 0x0563
    365a:	50 91 64 05 	lds	r21, 0x0564
    365e:	80 85       	ldd	r24, Z+8	; 0x08
    3660:	91 85       	ldd	r25, Z+9	; 0x09
    3662:	a2 85       	ldd	r26, Z+10	; 0x0a
    3664:	b3 85       	ldd	r27, Z+11	; 0x0b
    3666:	28 0f       	add	r18, r24
    3668:	39 1f       	adc	r19, r25
    366a:	4a 1f       	adc	r20, r26
    366c:	5b 1f       	adc	r21, r27
    366e:	20 93 61 05 	sts	0x0561, r18
    3672:	30 93 62 05 	sts	0x0562, r19
    3676:	40 93 63 05 	sts	0x0563, r20
    367a:	50 93 64 05 	sts	0x0564, r21
    if (counter_z > 0) {
    367e:	12 16       	cp	r1, r18
    3680:	13 06       	cpc	r1, r19
    3682:	14 06       	cpc	r1, r20
    3684:	15 06       	cpc	r1, r21
    3686:	8c f4       	brge	.+34     	; 0x36aa <__vector_17+0x208>
      out_bits |= (1<<Z_STEP_BIT);
    3688:	80 91 58 05 	lds	r24, 0x0558
    368c:	80 61       	ori	r24, 0x10	; 16
    368e:	80 93 58 05 	sts	0x0558, r24
      counter_z -= current_block->step_event_count;
    3692:	2e 19       	sub	r18, r14
    3694:	3f 09       	sbc	r19, r15
    3696:	40 0b       	sbc	r20, r16
    3698:	51 0b       	sbc	r21, r17
    369a:	20 93 61 05 	sts	0x0561, r18
    369e:	30 93 62 05 	sts	0x0562, r19
    36a2:	40 93 63 05 	sts	0x0563, r20
    36a6:	50 93 64 05 	sts	0x0564, r21
    }
    counter_c += current_block->steps_c;
    36aa:	20 91 65 05 	lds	r18, 0x0565
    36ae:	30 91 66 05 	lds	r19, 0x0566
    36b2:	40 91 67 05 	lds	r20, 0x0567
    36b6:	50 91 68 05 	lds	r21, 0x0568
    36ba:	84 85       	ldd	r24, Z+12	; 0x0c
    36bc:	95 85       	ldd	r25, Z+13	; 0x0d
    36be:	a6 85       	ldd	r26, Z+14	; 0x0e
    36c0:	b7 85       	ldd	r27, Z+15	; 0x0f
    36c2:	28 0f       	add	r18, r24
    36c4:	39 1f       	adc	r19, r25
    36c6:	4a 1f       	adc	r20, r26
    36c8:	5b 1f       	adc	r21, r27
    36ca:	20 93 65 05 	sts	0x0565, r18
    36ce:	30 93 66 05 	sts	0x0566, r19
    36d2:	40 93 67 05 	sts	0x0567, r20
    36d6:	50 93 68 05 	sts	0x0568, r21
    if (counter_c > 0) {
    36da:	12 16       	cp	r1, r18
    36dc:	13 06       	cpc	r1, r19
    36de:	14 06       	cpc	r1, r20
    36e0:	15 06       	cpc	r1, r21
    36e2:	8c f4       	brge	.+34     	; 0x3706 <__vector_17+0x264>
      out_bits |= (1<<C_STEP_BIT);
    36e4:	80 91 58 05 	lds	r24, 0x0558
    36e8:	80 62       	ori	r24, 0x20	; 32
    36ea:	80 93 58 05 	sts	0x0558, r24
      counter_c -= current_block->step_event_count;
    36ee:	2e 19       	sub	r18, r14
    36f0:	3f 09       	sbc	r19, r15
    36f2:	40 0b       	sbc	r20, r16
    36f4:	51 0b       	sbc	r21, r17
    36f6:	20 93 65 05 	sts	0x0565, r18
    36fa:	30 93 66 05 	sts	0x0566, r19
    36fe:	40 93 67 05 	sts	0x0567, r20
    3702:	50 93 68 05 	sts	0x0568, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3706:	80 91 69 05 	lds	r24, 0x0569
    370a:	90 91 6a 05 	lds	r25, 0x056A
    370e:	a0 91 6b 05 	lds	r26, 0x056B
    3712:	b0 91 6c 05 	lds	r27, 0x056C
    3716:	01 96       	adiw	r24, 0x01	; 1
    3718:	a1 1d       	adc	r26, r1
    371a:	b1 1d       	adc	r27, r1
    371c:	80 93 69 05 	sts	0x0569, r24
    3720:	90 93 6a 05 	sts	0x056A, r25
    3724:	a0 93 6b 05 	sts	0x056B, r26
    3728:	b0 93 6c 05 	sts	0x056C, r27
    if (step_events_completed >= current_block->step_event_count) {
    372c:	8e 15       	cp	r24, r14
    372e:	9f 05       	cpc	r25, r15
    3730:	a0 07       	cpc	r26, r16
    3732:	b1 07       	cpc	r27, r17
    3734:	08 f0       	brcs	.+2      	; 0x3738 <__vector_17+0x296>
    3736:	a0 c0       	rjmp	.+320    	; 0x3878 <__vector_17+0x3d6>
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
    3738:	80 91 58 05 	lds	r24, 0x0558
    373c:	95 e3       	ldi	r25, 0x35	; 53
    373e:	89 27       	eor	r24, r25
    3740:	80 93 58 05 	sts	0x0558, r24
  dir_bits ^= DIRECTION_INVERT_MASK;
    3744:	80 91 b3 06 	lds	r24, 0x06B3
    3748:	9a ec       	ldi	r25, 0xCA	; 202
    374a:	89 27       	eor	r24, r25
    374c:	80 93 b3 06 	sts	0x06B3, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    3750:	20 91 6f 05 	lds	r18, 0x056F
    3754:	30 91 70 05 	lds	r19, 0x0570
    3758:	40 91 71 05 	lds	r20, 0x0571
    375c:	50 91 72 05 	lds	r21, 0x0572
    3760:	80 91 73 05 	lds	r24, 0x0573
    3764:	90 91 74 05 	lds	r25, 0x0574
    3768:	a0 91 75 05 	lds	r26, 0x0575
    376c:	b0 91 76 05 	lds	r27, 0x0576
    3770:	28 0f       	add	r18, r24
    3772:	39 1f       	adc	r19, r25
    3774:	4a 1f       	adc	r20, r26
    3776:	5b 1f       	adc	r21, r27
    3778:	20 93 73 05 	sts	0x0573, r18
    377c:	30 93 74 05 	sts	0x0574, r19
    3780:	40 93 75 05 	sts	0x0575, r20
    3784:	50 93 76 05 	sts	0x0576, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    3788:	21 38       	cpi	r18, 0x81	; 129
    378a:	0a e1       	ldi	r16, 0x1A	; 26
    378c:	30 07       	cpc	r19, r16
    378e:	06 e0       	ldi	r16, 0x06	; 6
    3790:	40 07       	cpc	r20, r16
    3792:	00 e0       	ldi	r16, 0x00	; 0
    3794:	50 07       	cpc	r21, r16
    3796:	08 f4       	brcc	.+2      	; 0x379a <__vector_17+0x2f8>
    3798:	5a c0       	rjmp	.+180    	; 0x384e <__vector_17+0x3ac>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    379a:	20 58       	subi	r18, 0x80	; 128
    379c:	3a 41       	sbci	r19, 0x1A	; 26
    379e:	46 40       	sbci	r20, 0x06	; 6
    37a0:	50 40       	sbci	r21, 0x00	; 0
    37a2:	20 93 73 05 	sts	0x0573, r18
    37a6:	30 93 74 05 	sts	0x0574, r19
    37aa:	40 93 75 05 	sts	0x0575, r20
    37ae:	50 93 76 05 	sts	0x0576, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static inline void trapezoid_generator_tick() {     
  if (current_block) {
    37b2:	e0 91 56 05 	lds	r30, 0x0556
    37b6:	f0 91 57 05 	lds	r31, 0x0557
    37ba:	30 97       	sbiw	r30, 0x00	; 0
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <__vector_17+0x31e>
    37be:	47 c0       	rjmp	.+142    	; 0x384e <__vector_17+0x3ac>
    if (step_events_completed < current_block->accelerate_until) {
    37c0:	20 91 69 05 	lds	r18, 0x0569
    37c4:	30 91 6a 05 	lds	r19, 0x056A
    37c8:	40 91 6b 05 	lds	r20, 0x056B
    37cc:	50 91 6c 05 	lds	r21, 0x056C
    37d0:	ef 5b       	subi	r30, 0xBF	; 191
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	80 81       	ld	r24, Z
    37d6:	91 81       	ldd	r25, Z+1	; 0x01
    37d8:	a2 81       	ldd	r26, Z+2	; 0x02
    37da:	b3 81       	ldd	r27, Z+3	; 0x03
    37dc:	e1 54       	subi	r30, 0x41	; 65
    37de:	f0 40       	sbci	r31, 0x00	; 0
    37e0:	28 17       	cp	r18, r24
    37e2:	39 07       	cpc	r19, r25
    37e4:	4a 07       	cpc	r20, r26
    37e6:	5b 07       	cpc	r21, r27
    37e8:	08 f0       	brcs	.+2      	; 0x37ec <__vector_17+0x34a>
    37ea:	4d c0       	rjmp	.+154    	; 0x3886 <__vector_17+0x3e4>
      trapezoid_adjusted_rate += current_block->rate_delta;
    37ec:	fd 96       	adiw	r30, 0x3d	; 61
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	a2 81       	ldd	r26, Z+2	; 0x02
    37f4:	b3 81       	ldd	r27, Z+3	; 0x03
    37f6:	fd 97       	sbiw	r30, 0x3d	; 61
    37f8:	20 91 77 05 	lds	r18, 0x0577
    37fc:	30 91 78 05 	lds	r19, 0x0578
    3800:	40 91 79 05 	lds	r20, 0x0579
    3804:	50 91 7a 05 	lds	r21, 0x057A
    3808:	28 0f       	add	r18, r24
    380a:	39 1f       	adc	r19, r25
    380c:	4a 1f       	adc	r20, r26
    380e:	5b 1f       	adc	r21, r27
    3810:	20 93 77 05 	sts	0x0577, r18
    3814:	30 93 78 05 	sts	0x0578, r19
    3818:	40 93 79 05 	sts	0x0579, r20
    381c:	50 93 7a 05 	sts	0x057A, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3820:	85 89       	ldd	r24, Z+21	; 0x15
    3822:	96 89       	ldd	r25, Z+22	; 0x16
    3824:	a7 89       	ldd	r26, Z+23	; 0x17
    3826:	b0 8d       	ldd	r27, Z+24	; 0x18
    3828:	82 17       	cp	r24, r18
    382a:	93 07       	cpc	r25, r19
    382c:	a4 07       	cpc	r26, r20
    382e:	b5 07       	cpc	r27, r21
    3830:	50 f4       	brcc	.+20     	; 0x3846 <__vector_17+0x3a4>
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
        trapezoid_adjusted_rate -= current_block->rate_delta;
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
        trapezoid_adjusted_rate = current_block->final_rate;
    3832:	80 93 77 05 	sts	0x0577, r24
    3836:	90 93 78 05 	sts	0x0578, r25
    383a:	a0 93 79 05 	sts	0x0579, r26
    383e:	b0 93 7a 05 	sts	0x057A, r27
    3842:	9c 01       	movw	r18, r24
    3844:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3846:	ca 01       	movw	r24, r20
    3848:	b9 01       	movw	r22, r18
    384a:	0e 94 84 18 	call	0x3108	; 0x3108 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    384e:	10 92 6e 05 	sts	0x056E, r1
    3852:	10 92 6d 05 	sts	0x056D, r1
    3856:	4a ce       	rjmp	.-876    	; 0x34ec <__vector_17+0x4a>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    3858:	e1 88       	ldd	r14, Z+17	; 0x11
    385a:	f2 88       	ldd	r15, Z+18	; 0x12
    385c:	03 89       	ldd	r16, Z+19	; 0x13
    385e:	14 89       	ldd	r17, Z+20	; 0x14
    3860:	c8 ce       	rjmp	.-624    	; 0x35f2 <__vector_17+0x150>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
	gHomed = FALSE ;
    3862:	10 92 55 05 	sts	0x0555, r1
		// set ack
	  ackHost = 'L';
    3866:	8c e4       	ldi	r24, 0x4C	; 76
    3868:	80 93 54 05 	sts	0x0554, r24
	DISABLE_STEPPER_DRIVER_INTERRUPT();
    386c:	80 91 6f 00 	lds	r24, 0x006F
    3870:	8d 7f       	andi	r24, 0xFD	; 253
    3872:	80 93 6f 00 	sts	0x006F, r24
    3876:	3a ce       	rjmp	.-908    	; 0x34ec <__vector_17+0x4a>
      counter_c -= current_block->step_event_count;
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    3878:	10 92 57 05 	sts	0x0557, r1
    387c:	10 92 56 05 	sts	0x0556, r1
      plan_discard_current_block();
    3880:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <plan_discard_current_block>
    3884:	59 cf       	rjmp	.-334    	; 0x3738 <__vector_17+0x296>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3886:	eb 5b       	subi	r30, 0xBB	; 187
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	a2 81       	ldd	r26, Z+2	; 0x02
    3890:	b3 81       	ldd	r27, Z+3	; 0x03
    3892:	e5 54       	subi	r30, 0x45	; 69
    3894:	f0 40       	sbci	r31, 0x00	; 0
    3896:	82 17       	cp	r24, r18
    3898:	93 07       	cpc	r25, r19
    389a:	a4 07       	cpc	r26, r20
    389c:	b5 07       	cpc	r27, r21
    389e:	70 f5       	brcc	.+92     	; 0x38fc <__vector_17+0x45a>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    38a0:	fd 96       	adiw	r30, 0x3d	; 61
    38a2:	60 81       	ld	r22, Z
    38a4:	71 81       	ldd	r23, Z+1	; 0x01
    38a6:	82 81       	ldd	r24, Z+2	; 0x02
    38a8:	93 81       	ldd	r25, Z+3	; 0x03
    38aa:	fd 97       	sbiw	r30, 0x3d	; 61
    38ac:	20 91 77 05 	lds	r18, 0x0577
    38b0:	30 91 78 05 	lds	r19, 0x0578
    38b4:	40 91 79 05 	lds	r20, 0x0579
    38b8:	50 91 7a 05 	lds	r21, 0x057A
    38bc:	62 17       	cp	r22, r18
    38be:	73 07       	cpc	r23, r19
    38c0:	84 07       	cpc	r24, r20
    38c2:	95 07       	cpc	r25, r21
    38c4:	80 f4       	brcc	.+32     	; 0x38e6 <__vector_17+0x444>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    38c6:	79 01       	movw	r14, r18
    38c8:	8a 01       	movw	r16, r20
    38ca:	e6 1a       	sub	r14, r22
    38cc:	f7 0a       	sbc	r15, r23
    38ce:	08 0b       	sbc	r16, r24
    38d0:	19 0b       	sbc	r17, r25
    38d2:	e0 92 77 05 	sts	0x0577, r14
    38d6:	f0 92 78 05 	sts	0x0578, r15
    38da:	00 93 79 05 	sts	0x0579, r16
    38de:	10 93 7a 05 	sts	0x057A, r17
    38e2:	a8 01       	movw	r20, r16
    38e4:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    38e6:	81 ad       	ldd	r24, Z+57	; 0x39
    38e8:	92 ad       	ldd	r25, Z+58	; 0x3a
    38ea:	a3 ad       	ldd	r26, Z+59	; 0x3b
    38ec:	b4 ad       	ldd	r27, Z+60	; 0x3c
    38ee:	28 17       	cp	r18, r24
    38f0:	39 07       	cpc	r19, r25
    38f2:	4a 07       	cpc	r20, r26
    38f4:	5b 07       	cpc	r21, r27
    38f6:	08 f0       	brcs	.+2      	; 0x38fa <__vector_17+0x458>
    38f8:	a6 cf       	rjmp	.-180    	; 0x3846 <__vector_17+0x3a4>
    38fa:	9b cf       	rjmp	.-202    	; 0x3832 <__vector_17+0x390>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    38fc:	25 89       	ldd	r18, Z+21	; 0x15
    38fe:	36 89       	ldd	r19, Z+22	; 0x16
    3900:	47 89       	ldd	r20, Z+23	; 0x17
    3902:	50 8d       	ldd	r21, Z+24	; 0x18
    3904:	80 91 77 05 	lds	r24, 0x0577
    3908:	90 91 78 05 	lds	r25, 0x0578
    390c:	a0 91 79 05 	lds	r26, 0x0579
    3910:	b0 91 7a 05 	lds	r27, 0x057A
    3914:	28 17       	cp	r18, r24
    3916:	39 07       	cpc	r19, r25
    3918:	4a 07       	cpc	r20, r26
    391a:	5b 07       	cpc	r21, r27
    391c:	09 f4       	brne	.+2      	; 0x3920 <__vector_17+0x47e>
    391e:	97 cf       	rjmp	.-210    	; 0x384e <__vector_17+0x3ac>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3920:	20 93 77 05 	sts	0x0577, r18
    3924:	30 93 78 05 	sts	0x0578, r19
    3928:	40 93 79 05 	sts	0x0579, r20
    392c:	50 93 7a 05 	sts	0x057A, r21
    3930:	8a cf       	rjmp	.-236    	; 0x3846 <__vector_17+0x3a4>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    3932:	0e 94 84 0b 	call	0x1708	; 0x1708 <plan_get_current_block>
    3936:	ec 01       	movw	r28, r24
    3938:	90 93 57 05 	sts	0x0557, r25
    393c:	80 93 56 05 	sts	0x0556, r24
    if (current_block != NULL) {
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	09 f4       	brne	.+2      	; 0x3946 <__vector_17+0x4a4>
    3944:	52 c0       	rjmp	.+164    	; 0x39ea <__vector_17+0x548>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3946:	6d a9       	ldd	r22, Y+53	; 0x35
    3948:	7e a9       	ldd	r23, Y+54	; 0x36
    394a:	8f a9       	ldd	r24, Y+55	; 0x37
    394c:	98 ad       	ldd	r25, Y+56	; 0x38
    394e:	60 93 77 05 	sts	0x0577, r22
    3952:	70 93 78 05 	sts	0x0578, r23
    3956:	80 93 79 05 	sts	0x0579, r24
    395a:	90 93 7a 05 	sts	0x057A, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    395e:	10 92 73 05 	sts	0x0573, r1
    3962:	10 92 74 05 	sts	0x0574, r1
    3966:	10 92 75 05 	sts	0x0575, r1
    396a:	10 92 76 05 	sts	0x0576, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    396e:	0e 94 84 18 	call	0x3108	; 0x3108 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    3972:	89 89       	ldd	r24, Y+17	; 0x11
    3974:	9a 89       	ldd	r25, Y+18	; 0x12
    3976:	ab 89       	ldd	r26, Y+19	; 0x13
    3978:	bc 89       	ldd	r27, Y+20	; 0x14
    397a:	b5 95       	asr	r27
    397c:	a7 95       	ror	r26
    397e:	97 95       	ror	r25
    3980:	87 95       	ror	r24
    3982:	b0 95       	com	r27
    3984:	a0 95       	com	r26
    3986:	90 95       	com	r25
    3988:	81 95       	neg	r24
    398a:	9f 4f       	sbci	r25, 0xFF	; 255
    398c:	af 4f       	sbci	r26, 0xFF	; 255
    398e:	bf 4f       	sbci	r27, 0xFF	; 255
    3990:	80 93 59 05 	sts	0x0559, r24
    3994:	90 93 5a 05 	sts	0x055A, r25
    3998:	a0 93 5b 05 	sts	0x055B, r26
    399c:	b0 93 5c 05 	sts	0x055C, r27
      counter_y = counter_x;
    39a0:	80 93 5d 05 	sts	0x055D, r24
    39a4:	90 93 5e 05 	sts	0x055E, r25
    39a8:	a0 93 5f 05 	sts	0x055F, r26
    39ac:	b0 93 60 05 	sts	0x0560, r27
      counter_z = counter_x;
    39b0:	80 93 61 05 	sts	0x0561, r24
    39b4:	90 93 62 05 	sts	0x0562, r25
    39b8:	a0 93 63 05 	sts	0x0563, r26
    39bc:	b0 93 64 05 	sts	0x0564, r27
      counter_c = counter_x;
    39c0:	80 93 65 05 	sts	0x0565, r24
    39c4:	90 93 66 05 	sts	0x0566, r25
    39c8:	a0 93 67 05 	sts	0x0567, r26
    39cc:	b0 93 68 05 	sts	0x0568, r27
      step_events_completed = 0;
    39d0:	10 92 69 05 	sts	0x0569, r1
    39d4:	10 92 6a 05 	sts	0x056A, r1
    39d8:	10 92 6b 05 	sts	0x056B, r1
    39dc:	10 92 6c 05 	sts	0x056C, r1
    39e0:	e0 91 56 05 	lds	r30, 0x0556
    39e4:	f0 91 57 05 	lds	r31, 0x0557
    39e8:	ce cd       	rjmp	.-1124   	; 0x3586 <__vector_17+0xe4>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    39ea:	80 91 6f 00 	lds	r24, 0x006F
    39ee:	8d 7f       	andi	r24, 0xFD	; 253
    39f0:	80 93 6f 00 	sts	0x006F, r24

		// set ack
	  ackHost = 'X';
    39f4:	88 e5       	ldi	r24, 0x58	; 88
    39f6:	80 93 54 05 	sts	0x0554, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    39fa:	10 92 58 05 	sts	0x0558, r1
    39fe:	9c ce       	rjmp	.-712    	; 0x3738 <__vector_17+0x296>

00003a00 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3a00:	ef 92       	push	r14
    3a02:	ff 92       	push	r15
    3a04:	0f 93       	push	r16
    3a06:	1f 93       	push	r17
    3a08:	7b 01       	movw	r14, r22
    3a0a:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    3a0c:	22 e0       	ldi	r18, 0x02	; 2
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e0       	ldi	r20, 0x00	; 0
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__divmodsi4>
    3a18:	20 5c       	subi	r18, 0xC0	; 192
    3a1a:	3d 4b       	sbci	r19, 0xBD	; 189
    3a1c:	40 4f       	sbci	r20, 0xF0	; 240
    3a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a20:	ca 01       	movw	r24, r20
    3a22:	b9 01       	movw	r22, r18
    3a24:	a8 01       	movw	r20, r16
    3a26:	97 01       	movw	r18, r14
    3a28:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__udivmodsi4>
    3a2c:	c9 01       	movw	r24, r18
    3a2e:	da 01       	movw	r26, r20
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	a1 09       	sbc	r26, r1
    3a34:	b1 09       	sbc	r27, r1
    3a36:	29 2f       	mov	r18, r25
    3a38:	3a 2f       	mov	r19, r26
    3a3a:	4b 2f       	mov	r20, r27
    3a3c:	55 27       	eor	r21, r21
    3a3e:	01 96       	adiw	r24, 0x01	; 1
    3a40:	a1 1d       	adc	r26, r1
    3a42:	b1 1d       	adc	r27, r1
    3a44:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3a48:	81 50       	subi	r24, 0x01	; 1
    3a4a:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3a4e:	e0 ec       	ldi	r30, 0xC0	; 192
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	80 81       	ld	r24, Z
    3a54:	8d 7f       	andi	r24, 0xFD	; 253
    3a56:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    3a58:	e1 ec       	ldi	r30, 0xC1	; 193
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	80 81       	ld	r24, Z
    3a5e:	80 61       	ori	r24, 0x10	; 16
    3a60:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3a62:	80 81       	ld	r24, Z
    3a64:	88 60       	ori	r24, 0x08	; 8
    3a66:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3a68:	80 81       	ld	r24, Z
    3a6a:	80 68       	ori	r24, 0x80	; 128
    3a6c:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	08 95       	ret

00003a78 <serialWrite>:

void serialWrite(unsigned char c)
{
    3a78:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3a7a:	80 91 c0 00 	lds	r24, 0x00C0
    3a7e:	85 ff       	sbrs	r24, 5
    3a80:	fc cf       	rjmp	.-8      	; 0x3a7a <serialWrite+0x2>
		;
	UDR0 = c;
    3a82:	90 93 c6 00 	sts	0x00C6, r25
}
    3a86:	08 95       	ret

00003a88 <serialAvailable>:

int serialAvailable()
{
    3a88:	80 91 7b 05 	lds	r24, 0x057B
    3a8c:	90 91 7c 05 	lds	r25, 0x057C
    3a90:	80 50       	subi	r24, 0x00	; 0
    3a92:	9f 4f       	sbci	r25, 0xFF	; 255
    3a94:	20 91 7d 05 	lds	r18, 0x057D
    3a98:	30 91 7e 05 	lds	r19, 0x057E
    3a9c:	82 1b       	sub	r24, r18
    3a9e:	93 0b       	sbc	r25, r19
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	71 e0       	ldi	r23, 0x01	; 1
    3aa4:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3aa8:	08 95       	ret

00003aaa <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3aaa:	40 91 7d 05 	lds	r20, 0x057D
    3aae:	50 91 7e 05 	lds	r21, 0x057E
    3ab2:	80 91 7b 05 	lds	r24, 0x057B
    3ab6:	90 91 7c 05 	lds	r25, 0x057C
    3aba:	84 17       	cp	r24, r20
    3abc:	95 07       	cpc	r25, r21
    3abe:	89 f0       	breq	.+34     	; 0x3ae2 <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3ac0:	fa 01       	movw	r30, r20
    3ac2:	e1 58       	subi	r30, 0x81	; 129
    3ac4:	fa 4f       	sbci	r31, 0xFA	; 250
    3ac6:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3ac8:	ca 01       	movw	r24, r20
    3aca:	01 96       	adiw	r24, 0x01	; 1
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	71 e0       	ldi	r23, 0x01	; 1
    3ad0:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
    3ad4:	90 93 7e 05 	sts	0x057E, r25
    3ad8:	80 93 7d 05 	sts	0x057D, r24
		return c;
    3adc:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3ade:	c9 01       	movw	r24, r18
    3ae0:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3ae2:	2f ef       	ldi	r18, 0xFF	; 255
    3ae4:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3ae6:	c9 01       	movw	r24, r18
    3ae8:	08 95       	ret

00003aea <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3aea:	80 91 7d 05 	lds	r24, 0x057D
    3aee:	90 91 7e 05 	lds	r25, 0x057E
    3af2:	90 93 7c 05 	sts	0x057C, r25
    3af6:	80 93 7b 05 	sts	0x057B, r24
}
    3afa:	08 95       	ret

00003afc <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3afc:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3afe:	80 91 c0 00 	lds	r24, 0x00C0
    3b02:	85 ff       	sbrs	r24, 5
    3b04:	fc cf       	rjmp	.-8      	; 0x3afe <printByte+0x2>
		;
	UDR0 = c;
    3b06:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3b0a:	08 95       	ret

00003b0c <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3b0c:	fc 01       	movw	r30, r24
	while (*s)
    3b0e:	90 81       	ld	r25, Z
    3b10:	99 23       	and	r25, r25
    3b12:	51 f0       	breq	.+20     	; 0x3b28 <printString+0x1c>
		printByte(*s++);
    3b14:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3b16:	80 91 c0 00 	lds	r24, 0x00C0
    3b1a:	85 ff       	sbrs	r24, 5
    3b1c:	fc cf       	rjmp	.-8      	; 0x3b16 <printString+0xa>
		;
	UDR0 = c;
    3b1e:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3b22:	90 81       	ld	r25, Z
    3b24:	99 23       	and	r25, r25
    3b26:	b1 f7       	brne	.-20     	; 0x3b14 <printString+0x8>
    3b28:	08 95       	ret

00003b2a <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3b2a:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3b2c:	94 91       	lpm	r25, Z+
    3b2e:	99 23       	and	r25, r25
    3b30:	51 f0       	breq	.+20     	; 0x3b46 <printPgmString+0x1c>
    3b32:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3b34:	80 91 c0 00 	lds	r24, 0x00C0
    3b38:	85 ff       	sbrs	r24, 5
    3b3a:	fc cf       	rjmp	.-8      	; 0x3b34 <printPgmString+0xa>
		;
	UDR0 = c;
    3b3c:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3b40:	94 91       	lpm	r25, Z+
    3b42:	99 23       	and	r25, r25
    3b44:	b1 f7       	brne	.-20     	; 0x3b32 <printPgmString+0x8>
    3b46:	08 95       	ret

00003b48 <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3b48:	2f 92       	push	r2
    3b4a:	3f 92       	push	r3
    3b4c:	4f 92       	push	r4
    3b4e:	5f 92       	push	r5
    3b50:	6f 92       	push	r6
    3b52:	7f 92       	push	r7
    3b54:	8f 92       	push	r8
    3b56:	9f 92       	push	r9
    3b58:	af 92       	push	r10
    3b5a:	bf 92       	push	r11
    3b5c:	cf 92       	push	r12
    3b5e:	df 92       	push	r13
    3b60:	ef 92       	push	r14
    3b62:	ff 92       	push	r15
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	a0 97       	sbiw	r28, 0x20	; 32
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	6b 01       	movw	r12, r22
    3b7e:	7c 01       	movw	r14, r24
    3b80:	29 01       	movw	r4, r18
    3b82:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3b84:	61 15       	cp	r22, r1
    3b86:	71 05       	cpc	r23, r1
    3b88:	81 05       	cpc	r24, r1
    3b8a:	91 05       	cpc	r25, r1
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <printIntegerInBase+0x48>
    3b8e:	50 c0       	rjmp	.+160    	; 0x3c30 <printIntegerInBase+0xe8>
		printByte('0');
		return;
    3b90:	88 24       	eor	r8, r8
    3b92:	99 24       	eor	r9, r9
    3b94:	54 01       	movw	r10, r8
    3b96:	1e 01       	movw	r2, r28
    3b98:	08 94       	sec
    3b9a:	21 1c       	adc	r2, r1
    3b9c:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3b9e:	81 01       	movw	r16, r2
    3ba0:	08 0d       	add	r16, r8
    3ba2:	19 1d       	adc	r17, r9
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	b6 01       	movw	r22, r12
    3ba8:	a3 01       	movw	r20, r6
    3baa:	92 01       	movw	r18, r4
    3bac:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__udivmodsi4>
    3bb0:	f8 01       	movw	r30, r16
    3bb2:	60 83       	st	Z, r22
    3bb4:	08 94       	sec
    3bb6:	81 1c       	adc	r8, r1
    3bb8:	91 1c       	adc	r9, r1
    3bba:	a1 1c       	adc	r10, r1
    3bbc:	b1 1c       	adc	r11, r1
		n /= base;
    3bbe:	c7 01       	movw	r24, r14
    3bc0:	b6 01       	movw	r22, r12
    3bc2:	a3 01       	movw	r20, r6
    3bc4:	92 01       	movw	r18, r4
    3bc6:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <__udivmodsi4>
    3bca:	c9 01       	movw	r24, r18
    3bcc:	da 01       	movw	r26, r20
    3bce:	6c 01       	movw	r12, r24
    3bd0:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3bd2:	c1 14       	cp	r12, r1
    3bd4:	d1 04       	cpc	r13, r1
    3bd6:	e1 04       	cpc	r14, r1
    3bd8:	f1 04       	cpc	r15, r1
    3bda:	09 f7       	brne	.-62     	; 0x3b9e <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3bdc:	81 14       	cp	r8, r1
    3bde:	91 04       	cpc	r9, r1
    3be0:	a1 04       	cpc	r10, r1
    3be2:	b1 04       	cpc	r11, r1
    3be4:	61 f1       	breq	.+88     	; 0x3c3e <printIntegerInBase+0xf6>
    3be6:	91 01       	movw	r18, r2
    3be8:	28 0d       	add	r18, r8
    3bea:	39 1d       	adc	r19, r9
    3bec:	d5 01       	movw	r26, r10
    3bee:	c4 01       	movw	r24, r8
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	a1 09       	sbc	r26, r1
    3bf4:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    3bf6:	ac 01       	movw	r20, r24
    3bf8:	48 19       	sub	r20, r8
    3bfa:	59 09       	sbc	r21, r9
    3bfc:	fa 01       	movw	r30, r20
    3bfe:	e2 0f       	add	r30, r18
    3c00:	f3 1f       	adc	r31, r19
    3c02:	e0 81       	ld	r30, Z
    3c04:	ea 30       	cpi	r30, 0x0A	; 10
    3c06:	90 f4       	brcc	.+36     	; 0x3c2c <printIntegerInBase+0xe4>
    3c08:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c0a:	80 91 c0 00 	lds	r24, 0x00C0
    3c0e:	85 ff       	sbrs	r24, 5
    3c10:	fc cf       	rjmp	.-8      	; 0x3c0a <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    3c12:	e0 93 c6 00 	sts	0x00C6, r30
    3c16:	21 50       	subi	r18, 0x01	; 1
    3c18:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3c1a:	22 16       	cp	r2, r18
    3c1c:	33 06       	cpc	r3, r19
    3c1e:	79 f0       	breq	.+30     	; 0x3c3e <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    3c20:	fa 01       	movw	r30, r20
    3c22:	e2 0f       	add	r30, r18
    3c24:	f3 1f       	adc	r31, r19
    3c26:	e0 81       	ld	r30, Z
    3c28:	ea 30       	cpi	r30, 0x0A	; 10
    3c2a:	70 f3       	brcs	.-36     	; 0x3c08 <printIntegerInBase+0xc0>
    3c2c:	e9 5c       	subi	r30, 0xC9	; 201
    3c2e:	ed cf       	rjmp	.-38     	; 0x3c0a <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c30:	80 91 c0 00 	lds	r24, 0x00C0
    3c34:	85 ff       	sbrs	r24, 5
    3c36:	fc cf       	rjmp	.-8      	; 0x3c30 <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    3c38:	80 e3       	ldi	r24, 0x30	; 48
    3c3a:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3c3e:	a0 96       	adiw	r28, 0x20	; 32
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	f8 94       	cli
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	cd bf       	out	0x3d, r28	; 61
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	1f 91       	pop	r17
    3c50:	0f 91       	pop	r16
    3c52:	ff 90       	pop	r15
    3c54:	ef 90       	pop	r14
    3c56:	df 90       	pop	r13
    3c58:	cf 90       	pop	r12
    3c5a:	bf 90       	pop	r11
    3c5c:	af 90       	pop	r10
    3c5e:	9f 90       	pop	r9
    3c60:	8f 90       	pop	r8
    3c62:	7f 90       	pop	r7
    3c64:	6f 90       	pop	r6
    3c66:	5f 90       	pop	r5
    3c68:	4f 90       	pop	r4
    3c6a:	3f 90       	pop	r3
    3c6c:	2f 90       	pop	r2
    3c6e:	08 95       	ret

00003c70 <printInteger>:

void printInteger(long n)
{
    3c70:	9b 01       	movw	r18, r22
    3c72:	ac 01       	movw	r20, r24
	if (n < 0) {
    3c74:	97 fd       	sbrc	r25, 7
    3c76:	09 c0       	rjmp	.+18     	; 0x3c8a <printInteger+0x1a>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    3c78:	ca 01       	movw	r24, r20
    3c7a:	b9 01       	movw	r22, r18
    3c7c:	2a e0       	ldi	r18, 0x0A	; 10
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	40 e0       	ldi	r20, 0x00	; 0
    3c82:	50 e0       	ldi	r21, 0x00	; 0
    3c84:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <printIntegerInBase>
}
    3c88:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c8a:	80 91 c0 00 	lds	r24, 0x00C0
    3c8e:	85 ff       	sbrs	r24, 5
    3c90:	fc cf       	rjmp	.-8      	; 0x3c8a <printInteger+0x1a>
		;
	UDR0 = c;
    3c92:	8d e2       	ldi	r24, 0x2D	; 45
    3c94:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3c98:	50 95       	com	r21
    3c9a:	40 95       	com	r20
    3c9c:	30 95       	com	r19
    3c9e:	21 95       	neg	r18
    3ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca2:	4f 4f       	sbci	r20, 0xFF	; 255
    3ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca6:	e8 cf       	rjmp	.-48     	; 0x3c78 <printInteger+0x8>

00003ca8 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3ca8:	22 e0       	ldi	r18, 0x02	; 2
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	50 e0       	ldi	r21, 0x00	; 0
    3cb0:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <printIntegerInBase>
  }
    3cb4:	08 95       	ret

00003cb6 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3cb6:	ef 92       	push	r14
    3cb8:	ff 92       	push	r15
    3cba:	0f 93       	push	r16
    3cbc:	1f 93       	push	r17
    3cbe:	df 93       	push	r29
    3cc0:	cf 93       	push	r28
    3cc2:	00 d0       	rcall	.+0      	; 0x3cc4 <printFloat+0xe>
    3cc4:	0f 92       	push	r0
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3cca:	ae 01       	movw	r20, r28
    3ccc:	4f 5f       	subi	r20, 0xFF	; 255
    3cce:	5f 4f       	sbci	r21, 0xFF	; 255
    3cd0:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <modf>
    3cd4:	7b 01       	movw	r14, r22
    3cd6:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3cd8:	69 81       	ldd	r22, Y+1	; 0x01
    3cda:	7a 81       	ldd	r23, Y+2	; 0x02
    3cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cde:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce0:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
    3ce4:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3ce8:	80 91 c0 00 	lds	r24, 0x00C0
    3cec:	85 ff       	sbrs	r24, 5
    3cee:	fc cf       	rjmp	.-8      	; 0x3ce8 <printFloat+0x32>
		;
	UDR0 = c;
    3cf0:	8e e2       	ldi	r24, 0x2E	; 46
    3cf2:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3cf6:	c8 01       	movw	r24, r16
    3cf8:	b7 01       	movw	r22, r14
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	4a e7       	ldi	r20, 0x7A	; 122
    3d00:	54 e4       	ldi	r21, 0x44	; 68
    3d02:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    3d06:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <round>
    3d0a:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
    3d0e:	97 fd       	sbrc	r25, 7
    3d10:	0d c0       	rjmp	.+26     	; 0x3d2c <printFloat+0x76>
    3d12:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <printInteger>
}
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	1f 91       	pop	r17
    3d24:	0f 91       	pop	r16
    3d26:	ff 90       	pop	r15
    3d28:	ef 90       	pop	r14
    3d2a:	08 95       	ret
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3d2c:	90 95       	com	r25
    3d2e:	80 95       	com	r24
    3d30:	70 95       	com	r23
    3d32:	61 95       	neg	r22
    3d34:	7f 4f       	sbci	r23, 0xFF	; 255
    3d36:	8f 4f       	sbci	r24, 0xFF	; 255
    3d38:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3a:	eb cf       	rjmp	.-42     	; 0x3d12 <printFloat+0x5c>

00003d3c <__vector_25>:
	rx_buffer_head = rx_buffer_tail;
}

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3d3c:	1f 92       	push	r1
    3d3e:	0f 92       	push	r0
    3d40:	0f b6       	in	r0, 0x3f	; 63
    3d42:	0f 92       	push	r0
    3d44:	0b b6       	in	r0, 0x3b	; 59
    3d46:	0f 92       	push	r0
    3d48:	11 24       	eor	r1, r1
    3d4a:	2f 93       	push	r18
    3d4c:	3f 93       	push	r19
    3d4e:	4f 93       	push	r20
    3d50:	5f 93       	push	r21
    3d52:	6f 93       	push	r22
    3d54:	7f 93       	push	r23
    3d56:	8f 93       	push	r24
    3d58:	9f 93       	push	r25
    3d5a:	af 93       	push	r26
    3d5c:	bf 93       	push	r27
    3d5e:	ef 93       	push	r30
    3d60:	ff 93       	push	r31
	unsigned char c = UDR0;
    3d62:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3d66:	e0 91 7b 05 	lds	r30, 0x057B
    3d6a:	f0 91 7c 05 	lds	r31, 0x057C
    3d6e:	cf 01       	movw	r24, r30
    3d70:	01 96       	adiw	r24, 0x01	; 1
    3d72:	60 e0       	ldi	r22, 0x00	; 0
    3d74:	71 e0       	ldi	r23, 0x01	; 1
    3d76:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
    3d7a:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3d7c:	80 91 7d 05 	lds	r24, 0x057D
    3d80:	90 91 7e 05 	lds	r25, 0x057E
    3d84:	28 17       	cp	r18, r24
    3d86:	39 07       	cpc	r19, r25
    3d88:	39 f0       	breq	.+14     	; 0x3d98 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3d8a:	e1 58       	subi	r30, 0x81	; 129
    3d8c:	fa 4f       	sbci	r31, 0xFA	; 250
    3d8e:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3d90:	30 93 7c 05 	sts	0x057C, r19
    3d94:	20 93 7b 05 	sts	0x057B, r18
	}

	if( c == 0x0ff ) {
    3d98:	4f 3f       	cpi	r20, 0xFF	; 255
    3d9a:	99 f0       	breq	.+38     	; 0x3dc2 <__vector_25+0x86>
		gHomed = 0 ;
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3d9c:	ff 91       	pop	r31
    3d9e:	ef 91       	pop	r30
    3da0:	bf 91       	pop	r27
    3da2:	af 91       	pop	r26
    3da4:	9f 91       	pop	r25
    3da6:	8f 91       	pop	r24
    3da8:	7f 91       	pop	r23
    3daa:	6f 91       	pop	r22
    3dac:	5f 91       	pop	r21
    3dae:	4f 91       	pop	r20
    3db0:	3f 91       	pop	r19
    3db2:	2f 91       	pop	r18
    3db4:	0f 90       	pop	r0
    3db6:	0b be       	out	0x3b, r0	; 59
    3db8:	0f 90       	pop	r0
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	0f 90       	pop	r0
    3dbe:	1f 90       	pop	r1
    3dc0:	18 95       	reti
		rx_buffer_head = i;
	}

	if( c == 0x0ff ) {
		// shut off servo interrupt
		cli();
    3dc2:	f8 94       	cli
		st_disable();
    3dc4:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <st_disable>
		// not homed
		gHomed = 0 ;
    3dc8:	10 92 55 05 	sts	0x0555, r1
    3dcc:	e7 cf       	rjmp	.-50     	; 0x3d9c <__vector_25+0x60>

00003dce <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    3dce:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    3dd0:	e7 e0       	ldi	r30, 0x07	; 7
    3dd2:	f1 e0       	ldi	r31, 0x01	; 1
    3dd4:	80 81       	ld	r24, Z
    3dd6:	81 60       	ori	r24, 0x01	; 1
    3dd8:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3dda:	80 81       	ld	r24, Z
    3ddc:	82 60       	ori	r24, 0x02	; 2
    3dde:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3de0:	80 81       	ld	r24, Z
    3de2:	84 60       	ori	r24, 0x04	; 4
    3de4:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3de6:	80 81       	ld	r24, Z
    3de8:	88 60       	ori	r24, 0x08	; 8
    3dea:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3dec:	80 81       	ld	r24, Z
    3dee:	80 64       	ori	r24, 0x40	; 64
    3df0:	80 83       	st	Z, r24

// initialise PORT as well

}
    3df2:	08 95       	ret

00003df4 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	08 95       	ret

00003df8 <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29
    3dfc:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3dfe:	80 91 55 05 	lds	r24, 0x0555
    3e02:	88 23       	and	r24, r24
    3e04:	19 f4       	brne	.+6      	; 0x3e0c <atc_fire+0x14>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	08 95       	ret

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    3e12:	20 97       	sbiw	r28, 0x00	; 0
    3e14:	29 f1       	breq	.+74     	; 0x3e60 <atc_fire+0x68>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e16:	80 91 08 01 	lds	r24, 0x0108
    3e1a:	81 60       	ori	r24, 0x01	; 1
    3e1c:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3e20:	c3 30       	cpi	r28, 0x03	; 3
    3e22:	d1 05       	cpc	r29, r1
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <atc_fire+0x30>
    3e26:	46 c0       	rjmp	.+140    	; 0x3eb4 <atc_fire+0xbc>
    3e28:	c4 30       	cpi	r28, 0x04	; 4
    3e2a:	d1 05       	cpc	r29, r1
    3e2c:	8c f5       	brge	.+98     	; 0x3e90 <atc_fire+0x98>
    3e2e:	c1 30       	cpi	r28, 0x01	; 1
    3e30:	d1 05       	cpc	r29, r1
    3e32:	09 f4       	brne	.+2      	; 0x3e36 <atc_fire+0x3e>
    3e34:	6d c0       	rjmp	.+218    	; 0x3f10 <atc_fire+0x118>
    3e36:	22 97       	sbiw	r28, 0x02	; 2
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <atc_fire+0x44>
    3e3a:	66 c0       	rjmp	.+204    	; 0x3f08 <atc_fire+0x110>
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e3c:	80 91 08 01 	lds	r24, 0x0108
    3e40:	8e 7f       	andi	r24, 0xFE	; 254
    3e42:	80 93 08 01 	sts	0x0108, r24
    3e46:	28 ee       	ldi	r18, 0xE8	; 232
    3e48:	33 e0       	ldi	r19, 0x03	; 3
    3e4a:	40 e9       	ldi	r20, 0x90	; 144
    3e4c:	51 e0       	ldi	r21, 0x01	; 1
    3e4e:	ca 01       	movw	r24, r20
    3e50:	01 97       	sbiw	r24, 0x01	; 1
    3e52:	f1 f7       	brne	.-4      	; 0x3e50 <atc_fire+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e54:	21 50       	subi	r18, 0x01	; 1
    3e56:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e58:	d1 f7       	brne	.-12     	; 0x3e4e <atc_fire+0x56>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3e5a:	df 91       	pop	r29
    3e5c:	cf 91       	pop	r28
    3e5e:	08 95       	ret

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e60:	80 91 08 01 	lds	r24, 0x0108
    3e64:	81 60       	ori	r24, 0x01	; 1
    3e66:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e6a:	80 91 08 01 	lds	r24, 0x0108
    3e6e:	82 60       	ori	r24, 0x02	; 2
    3e70:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e74:	80 91 08 01 	lds	r24, 0x0108
    3e78:	84 60       	ori	r24, 0x04	; 4
    3e7a:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3e7e:	80 91 08 01 	lds	r24, 0x0108
    3e82:	88 60       	ori	r24, 0x08	; 8
    3e84:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <set_busy>
    3e8e:	bb cf       	rjmp	.-138    	; 0x3e06 <atc_fire+0xe>
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3e90:	c5 30       	cpi	r28, 0x05	; 5
    3e92:	d1 05       	cpc	r29, r1
    3e94:	09 f4       	brne	.+2      	; 0x3e98 <atc_fire+0xa0>
    3e96:	45 c0       	rjmp	.+138    	; 0x3f22 <atc_fire+0x12a>
    3e98:	c5 30       	cpi	r28, 0x05	; 5
    3e9a:	d1 05       	cpc	r29, r1
    3e9c:	04 f1       	brlt	.+64     	; 0x3ede <atc_fire+0xe6>
    3e9e:	26 97       	sbiw	r28, 0x06	; 6
    3ea0:	69 f6       	brne	.-102    	; 0x3e3c <atc_fire+0x44>
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3ea2:	80 91 08 01 	lds	r24, 0x0108
    3ea6:	82 60       	ori	r24, 0x02	; 2
    3ea8:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3eac:	80 91 08 01 	lds	r24, 0x0108
    3eb0:	8b 7f       	andi	r24, 0xFB	; 251
    3eb2:	1d c0       	rjmp	.+58     	; 0x3eee <atc_fire+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3eb4:	80 91 08 01 	lds	r24, 0x0108
    3eb8:	8d 7f       	andi	r24, 0xFD	; 253
    3eba:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3ebe:	80 91 08 01 	lds	r24, 0x0108
    3ec2:	84 60       	ori	r24, 0x04	; 4
    3ec4:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3ec8:	80 91 08 01 	lds	r24, 0x0108
    3ecc:	87 7f       	andi	r24, 0xF7	; 247
    3ece:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3ed2:	80 91 08 01 	lds	r24, 0x0108
    3ed6:	8e 7f       	andi	r24, 0xFE	; 254
    3ed8:	80 93 08 01 	sts	0x0108, r24
    3edc:	af cf       	rjmp	.-162    	; 0x3e3c <atc_fire+0x44>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3ede:	80 91 08 01 	lds	r24, 0x0108
    3ee2:	8d 7f       	andi	r24, 0xFD	; 253
    3ee4:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3ee8:	80 91 08 01 	lds	r24, 0x0108
    3eec:	84 60       	ori	r24, 0x04	; 4
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3eee:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3ef2:	80 91 08 01 	lds	r24, 0x0108
    3ef6:	88 60       	ori	r24, 0x08	; 8
    3ef8:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3efc:	80 91 08 01 	lds	r24, 0x0108
    3f00:	8e 7f       	andi	r24, 0xFE	; 254
    3f02:	80 93 08 01 	sts	0x0108, r24
    3f06:	9a cf       	rjmp	.-204    	; 0x3e3c <atc_fire+0x44>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3f08:	80 91 08 01 	lds	r24, 0x0108
    3f0c:	8d 7f       	andi	r24, 0xFD	; 253
    3f0e:	cc cf       	rjmp	.-104    	; 0x3ea8 <atc_fire+0xb0>
 */
 	switch( tool ) {
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3f10:	80 91 08 01 	lds	r24, 0x0108
    3f14:	8d 7f       	andi	r24, 0xFD	; 253
    3f16:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3f1a:	80 91 08 01 	lds	r24, 0x0108
    3f1e:	8b 7f       	andi	r24, 0xFB	; 251
    3f20:	d1 cf       	rjmp	.-94     	; 0x3ec4 <atc_fire+0xcc>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    3f22:	80 91 08 01 	lds	r24, 0x0108
    3f26:	82 60       	ori	r24, 0x02	; 2
    3f28:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3f2c:	80 91 08 01 	lds	r24, 0x0108
    3f30:	8b 7f       	andi	r24, 0xFB	; 251
    3f32:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    3f36:	80 91 08 01 	lds	r24, 0x0108
    3f3a:	87 7f       	andi	r24, 0xF7	; 247
    3f3c:	80 93 08 01 	sts	0x0108, r24
    3f40:	7d cf       	rjmp	.-262    	; 0x3e3c <atc_fire+0x44>

00003f42 <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    3f42:	1f 93       	push	r17
    3f44:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3f46:	80 91 55 05 	lds	r24, 0x0555
    3f4a:	88 23       	and	r24, r24
    3f4c:	19 f4       	brne	.+6      	; 0x3f54 <DropTool+0x12>
    3f4e:	83 e6       	ldi	r24, 0x63	; 99
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3f50:	1f 91       	pop	r17
    3f52:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    3f5c:	88 23       	and	r24, r24
    3f5e:	19 f4       	brne	.+6      	; 0x3f66 <DropTool+0x24>
    3f60:	85 e0       	ldi	r24, 0x05	; 5
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3f62:	1f 91       	pop	r17
    3f64:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    3f66:	81 2f       	mov	r24, r17
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atc_fire>

	// head back up
	head_down( 0 );
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3f80:	1f 91       	pop	r17
    3f82:	08 95       	ret

00003f84 <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    3f84:	1f 93       	push	r17
    3f86:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3f88:	80 91 55 05 	lds	r24, 0x0555
    3f8c:	88 23       	and	r24, r24
    3f8e:	19 f4       	brne	.+6      	; 0x3f96 <PickupTool+0x12>
    3f90:	83 e6       	ldi	r24, 0x63	; 99
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3f92:	1f 91       	pop	r17
    3f94:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    3f9e:	88 23       	and	r24, r24
    3fa0:	19 f4       	brne	.+6      	; 0x3fa8 <PickupTool+0x24>
    3fa2:	85 e0       	ldi	r24, 0x05	; 5
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3fa4:	1f 91       	pop	r17
    3fa6:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    3fa8:	81 2f       	mov	r24, r17
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>

	// head back up
	head_down( 0 );
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    3fb8:	80 e9       	ldi	r24, 0x90	; 144
    3fba:	91 e0       	ldi	r25, 0x01	; 1
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	f1 f7       	brne	.-4      	; 0x3fbc <PickupTool+0x38>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <atc_change>
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3fca:	1f 91       	pop	r17
    3fcc:	08 95       	ret

00003fce <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3fd4:	80 91 55 05 	lds	r24, 0x0555
    3fd8:	88 23       	and	r24, r24
    3fda:	71 f0       	breq	.+28     	; 0x3ff8 <atc_change+0x2a>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    3fdc:	cf 3f       	cpi	r28, 0xFF	; 255
    3fde:	d1 05       	cpc	r29, r1
    3fe0:	39 f0       	breq	.+14     	; 0x3ff0 <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    3fe2:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <run_vacuum_test>
    3fe6:	88 23       	and	r24, r24
    3fe8:	59 f0       	breq	.+22     	; 0x4000 <atc_change+0x32>
		PickupTool(tool);
	} else { 
		DropTool(tool);
    3fea:	8c 2f       	mov	r24, r28
    3fec:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <DropTool>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	08 95       	ret

*/

unsigned char atc_change(int tool)
{
	if( gHomed == FALSE  ){ 
    3ff8:	83 e6       	ldi	r24, 0x63	; 99
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    3ffa:	df 91       	pop	r29
    3ffc:	cf 91       	pop	r28
    3ffe:	08 95       	ret
	if( tool == toolId ) {
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
		PickupTool(tool);
    4000:	8c 2f       	mov	r24, r28
    4002:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <PickupTool>
    4006:	80 e0       	ldi	r24, 0x00	; 0
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	08 95       	ret

0000400e <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    400e:	80 91 55 05 	lds	r24, 0x0555
    4012:	88 23       	and	r24, r24
    4014:	11 f4       	brne	.+4      	; 0x401a <check_for_tool+0xc>
    4016:	83 e6       	ldi	r24, 0x63	; 99
    4018:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    401a:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    401e:	88 23       	and	r24, r24
    4020:	a1 f4       	brne	.+40     	; 0x404a <check_for_tool+0x3c>
		head_down( FALSE) ;
	}

	goto_vacpad();
    4022:	0e 94 a4 21 	call	0x4348	; 0x4348 <goto_vacpad>
	
	head_down(TRUE);
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
	
	vacuum(TRUE);
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>

	if( vacuum_state() == TRUE )  {
    4036:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum_state>
    403a:	81 30       	cpi	r24, 0x01	; 1
    403c:	59 f0       	breq	.+22     	; 0x4054 <check_for_tool+0x46>
		head_down( FALSE) ;
		return TRUE;
	} else {
		head_down( FALSE) ;
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    4046:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    4048:	08 95       	ret
	}


	//move head up
	if( is_head_down() ) {
		head_down( FALSE) ;
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    4052:	e7 cf       	rjmp	.-50     	; 0x4022 <check_for_tool+0x14>
	head_down(TRUE);
	
	vacuum(TRUE);

	if( vacuum_state() == TRUE )  {
		head_down( FALSE) ;
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	08 95       	ret

00004060 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    4060:	ea e0       	ldi	r30, 0x0A	; 10
    4062:	f1 e0       	ldi	r31, 0x01	; 1
    4064:	80 81       	ld	r24, Z
    4066:	80 62       	ori	r24, 0x20	; 32
    4068:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    406a:	eb e0       	ldi	r30, 0x0B	; 11
    406c:	f1 e0       	ldi	r31, 0x01	; 1
    406e:	80 81       	ld	r24, Z
    4070:	80 62       	ori	r24, 0x20	; 32
    4072:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    4074:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    4076:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    4078:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    407a:	41 9a       	sbi	0x08, 1	; 8
}
    407c:	08 95       	ret

0000407e <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    407e:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    4080:	81 70       	andi	r24, 0x01	; 1
    4082:	08 95       	ret

00004084 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    4084:	86 b1       	in	r24, 0x06	; 6
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	96 95       	lsr	r25
    408a:	87 95       	ror	r24

	return state;
}
    408c:	81 70       	andi	r24, 0x01	; 1
    408e:	08 95       	ret

00004090 <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}


char head_down(int state)
{
    4090:	cf 93       	push	r28
    4092:	df 93       	push	r29
    4094:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    4096:	80 91 55 05 	lds	r24, 0x0555
    409a:	88 23       	and	r24, r24
    409c:	19 f1       	breq	.+70     	; 0x40e4 <head_down+0x54>
		return 0;
	}

	// wait til head stops
	while( head_moving() );
    409e:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
    40a2:	88 23       	and	r24, r24
    40a4:	e1 f7       	brne	.-8      	; 0x409e <head_down+0xe>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    40a6:	81 e0       	ldi	r24, 0x01	; 1
    40a8:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <set_busy>

// head down mode
  if( state == 0 ) {
    40ac:	20 97       	sbiw	r28, 0x00	; 0
    40ae:	e9 f0       	breq	.+58     	; 0x40ea <head_down+0x5a>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    40b0:	80 91 0b 01 	lds	r24, 0x010B
    40b4:	8f 7d       	andi	r24, 0xDF	; 223
    40b6:	80 93 0b 01 	sts	0x010B, r24
    40ba:	20 ed       	ldi	r18, 0xD0	; 208
    40bc:	37 e0       	ldi	r19, 0x07	; 7
    40be:	40 e9       	ldi	r20, 0x90	; 144
    40c0:	51 e0       	ldi	r21, 0x01	; 1
    40c2:	ca 01       	movw	r24, r20
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <head_down+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c8:	21 50       	subi	r18, 0x01	; 1
    40ca:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40cc:	d1 f7       	brne	.-12     	; 0x40c2 <head_down+0x32>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    40ce:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    40d0:	81 70       	andi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	8c 17       	cp	r24, r28
    40d6:	9d 07       	cpc	r25, r29
    40d8:	81 f0       	breq	.+32     	; 0x40fa <head_down+0x6a>

	  printPgmString(PSTR("Head down error\n\r"));
    40da:	80 ef       	ldi	r24, 0xF0	; 240
    40dc:	95 e0       	ldi	r25, 0x05	; 5
    40de:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    40e2:	80 e0       	ldi	r24, 0x00	; 0
  }

 	set_busy( FALSE );

	return 1;
}
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
    40e8:	08 95       	ret
	set_busy( TRUE );

// head down mode
  if( state == 0 ) {

	HEAD_PORT |= _BV( HEAD );
    40ea:	80 91 0b 01 	lds	r24, 0x010B
    40ee:	80 62       	ori	r24, 0x20	; 32
    40f0:	80 93 0b 01 	sts	0x010B, r24
    40f4:	20 ed       	ldi	r18, 0xD0	; 208
    40f6:	37 e0       	ldi	r19, 0x07	; 7
    40f8:	e2 cf       	rjmp	.-60     	; 0x40be <head_down+0x2e>
	  printPgmString(PSTR("Head down error\n\r"));
	  
	  return 0;
  }

 	set_busy( FALSE );
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <set_busy>
    4100:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    4102:	df 91       	pop	r29
    4104:	cf 91       	pop	r28
    4106:	08 95       	ret

00004108 <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    4108:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    410a:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    410c:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    410e:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    4110:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    4112:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    4114:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    4116:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    4118:	a4 e0       	ldi	r26, 0x04	; 4
    411a:	b1 e0       	ldi	r27, 0x01	; 1
    411c:	8c 91       	ld	r24, X
    411e:	8e 7f       	andi	r24, 0xFE	; 254
    4120:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    4122:	e5 e0       	ldi	r30, 0x05	; 5
    4124:	f1 e0       	ldi	r31, 0x01	; 1
    4126:	80 81       	ld	r24, Z
    4128:	81 60       	ori	r24, 0x01	; 1
    412a:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    412c:	8c 91       	ld	r24, X
    412e:	8f 7e       	andi	r24, 0xEF	; 239
    4130:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    4132:	80 81       	ld	r24, Z
    4134:	80 61       	ori	r24, 0x10	; 16
    4136:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    4138:	a1 e0       	ldi	r26, 0x01	; 1
    413a:	b1 e0       	ldi	r27, 0x01	; 1
    413c:	8c 91       	ld	r24, X
    413e:	8e 7f       	andi	r24, 0xFE	; 254
    4140:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    4142:	e2 e0       	ldi	r30, 0x02	; 2
    4144:	f1 e0       	ldi	r31, 0x01	; 1
    4146:	80 81       	ld	r24, Z
    4148:	81 60       	ori	r24, 0x01	; 1
    414a:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    414c:	8c 91       	ld	r24, X
    414e:	8d 7f       	andi	r24, 0xFD	; 253
    4150:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    4152:	80 81       	ld	r24, Z
    4154:	82 60       	ori	r24, 0x02	; 2
    4156:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    4158:	e0 e9       	ldi	r30, 0x90	; 144
    415a:	f0 e0       	ldi	r31, 0x00	; 0
    415c:	80 81       	ld	r24, Z
    415e:	82 60       	ori	r24, 0x02	; 2
    4160:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    4162:	8c e7       	ldi	r24, 0x7C	; 124
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	90 93 99 00 	sts	0x0099, r25
    416a:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    416e:	10 92 95 00 	sts	0x0095, r1
    4172:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    4176:	84 e0       	ldi	r24, 0x04	; 4
    4178:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    417c:	e1 e7       	ldi	r30, 0x71	; 113
    417e:	f0 e0       	ldi	r31, 0x00	; 0
    4180:	80 81       	ld	r24, Z
    4182:	82 60       	ori	r24, 0x02	; 2
    4184:	80 83       	st	Z, r24

}
    4186:	08 95       	ret

00004188 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    4188:	8c b1       	in	r24, 0x0c	; 12
    418a:	82 95       	swap	r24
    418c:	86 95       	lsr	r24
    418e:	87 70       	andi	r24, 0x07	; 7
    4190:	80 95       	com	r24

	return state;
}
    4192:	81 70       	andi	r24, 0x01	; 1
    4194:	08 95       	ret

00004196 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    4196:	82 b3       	in	r24, 0x12	; 18
    4198:	82 95       	swap	r24
    419a:	86 95       	lsr	r24
    419c:	87 70       	andi	r24, 0x07	; 7
    419e:	80 95       	com	r24

	return state;
}
    41a0:	81 70       	andi	r24, 0x01	; 1
    41a2:	08 95       	ret

000041a4 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    41a4:	8c b1       	in	r24, 0x0c	; 12
    41a6:	82 95       	swap	r24
    41a8:	8f 70       	andi	r24, 0x0F	; 15
    41aa:	80 95       	com	r24

	return state;
}
    41ac:	81 70       	andi	r24, 0x01	; 1
    41ae:	08 95       	ret

000041b0 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    41b0:	80 91 03 01 	lds	r24, 0x0103
    41b4:	86 95       	lsr	r24
    41b6:	80 95       	com	r24

	return state;
}
    41b8:	81 70       	andi	r24, 0x01	; 1
    41ba:	08 95       	ret

000041bc <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    41bc:	86 b1       	in	r24, 0x06	; 6
    41be:	82 95       	swap	r24
    41c0:	8f 70       	andi	r24, 0x0F	; 15
    41c2:	80 95       	com	r24

	return state;
}
    41c4:	81 70       	andi	r24, 0x01	; 1
    41c6:	08 95       	ret

000041c8 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    41c8:	80 91 00 01 	lds	r24, 0x0100
    41cc:	80 95       	com	r24

	return state;
}
    41ce:	81 70       	andi	r24, 0x01	; 1
    41d0:	08 95       	ret

000041d2 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    41d2:	80 91 03 01 	lds	r24, 0x0103
    41d6:	80 95       	com	r24

	return state;
}
    41d8:	81 70       	andi	r24, 0x01	; 1
    41da:	08 95       	ret

000041dc <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    41dc:	83 b1       	in	r24, 0x03	; 3
    41de:	82 95       	swap	r24
    41e0:	86 95       	lsr	r24
    41e2:	87 70       	andi	r24, 0x07	; 7
    41e4:	80 95       	com	r24

	return state;
}
    41e6:	81 70       	andi	r24, 0x01	; 1
    41e8:	08 95       	ret

000041ea <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    41ea:	80 91 00 01 	lds	r24, 0x0100
    41ee:	86 95       	lsr	r24
    41f0:	80 95       	com	r24

	return state;
}
    41f2:	81 70       	andi	r24, 0x01	; 1
    41f4:	08 95       	ret

000041f6 <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    41f6:	1f 92       	push	r1
    41f8:	0f 92       	push	r0
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	0f 92       	push	r0
    41fe:	11 24       	eor	r1, r1
	return;
}
    4200:	0f 90       	pop	r0
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	0f 90       	pop	r0
    4206:	1f 90       	pop	r1
    4208:	18 95       	reti

0000420a <process_panel>:
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    420a:	1d 9b       	sbis	0x03, 5	; 3
    420c:	20 c0       	rjmp	.+64     	; 0x424e <process_panel+0x44>

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    420e:	80 91 00 01 	lds	r24, 0x0100
    4212:	80 ff       	sbrs	r24, 0
    4214:	0b c0       	rjmp	.+22     	; 0x422c <process_panel+0x22>
	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
    4216:	80 91 80 06 	lds	r24, 0x0680
    421a:	81 30       	cpi	r24, 0x01	; 1
    421c:	d9 f0       	breq	.+54     	; 0x4254 <process_panel+0x4a>
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    421e:	34 9b       	sbis	0x06, 4	; 6
    4220:	0e c0       	rjmp	.+28     	; 0x423e <process_panel+0x34>
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
    4222:	80 91 7f 06 	lds	r24, 0x067F
    4226:	81 30       	cpi	r24, 0x01	; 1
    4228:	e1 f0       	breq	.+56     	; 0x4262 <process_panel+0x58>
    422a:	08 95       	ret
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	80 93 80 06 	sts	0x0680, r24
		vacuum(1);
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
	} else if(bvac == 1 ) {
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    423a:	34 99       	sbic	0x06, 4	; 6
    423c:	f2 cf       	rjmp	.-28     	; 0x4222 <process_panel+0x18>
		bhead = 1;
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	80 93 7f 06 	sts	0x067F, r24
		head_down(1);
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    424c:	08 95       	ret
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    424e:	0e 94 00 0b 	call	0x1600	; 0x1600 <mc_go_home>
    4252:	dd cf       	rjmp	.-70     	; 0x420e <process_panel+0x4>

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
		bvac = 0;
    4254:	10 92 80 06 	sts	0x0680, r1
		vacuum(0);
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
    4260:	de cf       	rjmp	.-68     	; 0x421e <process_panel+0x14>

	if( is_phead() ) {
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
		bhead = 0;
    4262:	10 92 7f 06 	sts	0x067F, r1
		head_down(0);
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    426e:	08 95       	ret

00004270 <vacuum_init>:
#include "stepper.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    4270:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    4272:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    4274:	ea e0       	ldi	r30, 0x0A	; 10
    4276:	f1 e0       	ldi	r31, 0x01	; 1
    4278:	80 81       	ld	r24, Z
    427a:	80 61       	ori	r24, 0x10	; 16
    427c:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    427e:	eb e0       	ldi	r30, 0x0B	; 11
    4280:	f1 e0       	ldi	r31, 0x01	; 1
    4282:	80 81       	ld	r24, Z
    4284:	80 61       	ori	r24, 0x10	; 16
    4286:	80 83       	st	Z, r24

}
    4288:	08 95       	ret

0000428a <vacuum>:

// switches vacuum on and off
void vacuum(int state)
{
    428a:	9c 01       	movw	r18, r24
	if( gHomed == FALSE ) return;
    428c:	80 91 55 05 	lds	r24, 0x0555
    4290:	88 23       	and	r24, r24
    4292:	89 f0       	breq	.+34     	; 0x42b6 <vacuum+0x2c>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    4294:	23 2b       	or	r18, r19
    4296:	81 f0       	breq	.+32     	; 0x42b8 <vacuum+0x2e>

	HEAD_PORT |= _BV( VACUUM );

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    4298:	80 91 0b 01 	lds	r24, 0x010B
    429c:	8f 7e       	andi	r24, 0xEF	; 239
    429e:	80 93 0b 01 	sts	0x010B, r24
    42a2:	28 e8       	ldi	r18, 0x88	; 136
    42a4:	33 e1       	ldi	r19, 0x13	; 19
    42a6:	40 e9       	ldi	r20, 0x90	; 144
    42a8:	51 e0       	ldi	r21, 0x01	; 1
    42aa:	ca 01       	movw	r24, r20
    42ac:	01 97       	sbiw	r24, 0x01	; 1
    42ae:	f1 f7       	brne	.-4      	; 0x42ac <vacuum+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b0:	21 50       	subi	r18, 0x01	; 1
    42b2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b4:	d1 f7       	brne	.-12     	; 0x42aa <vacuum+0x20>
    42b6:	08 95       	ret
#endif

// vacuum  on / off
  if( state == 0 ) {

	HEAD_PORT |= _BV( VACUUM );
    42b8:	80 91 0b 01 	lds	r24, 0x010B
    42bc:	80 61       	ori	r24, 0x10	; 16
    42be:	80 93 0b 01 	sts	0x010B, r24
    42c2:	28 e8       	ldi	r18, 0x88	; 136
    42c4:	33 e1       	ldi	r19, 0x13	; 19
    42c6:	ef cf       	rjmp	.-34     	; 0x42a6 <vacuum+0x1c>

000042c8 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    42c8:	89 b1       	in	r24, 0x09	; 9
    42ca:	80 95       	com	r24

	return state;
}
    42cc:	88 1f       	adc	r24, r24
    42ce:	88 27       	eor	r24, r24
    42d0:	88 1f       	adc	r24, r24
    42d2:	08 95       	ret

000042d4 <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    42d4:	af 92       	push	r10
    42d6:	bf 92       	push	r11
    42d8:	cf 92       	push	r12
    42da:	df 92       	push	r13
    42dc:	ef 92       	push	r14
    42de:	ff 92       	push	r15
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    42e4:	80 91 55 05 	lds	r24, 0x0555
    42e8:	88 23       	and	r24, r24
    42ea:	51 f4       	brne	.+20     	; 0x4300 <run_vacuum_test+0x2c>
    42ec:	83 e6       	ldi	r24, 0x63	; 99
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	ff 90       	pop	r15
    42f4:	ef 90       	pop	r14
    42f6:	df 90       	pop	r13
    42f8:	cf 90       	pop	r12
    42fa:	bf 90       	pop	r11
    42fc:	af 90       	pop	r10
    42fe:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    4300:	81 e0       	ldi	r24, 0x01	; 1
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4308:	63 ec       	ldi	r22, 0xC3	; 195
    430a:	73 ed       	ldi	r23, 0xD3	; 211
    430c:	81 e4       	ldi	r24, 0x41	; 65
    430e:	91 e4       	ldi	r25, 0x41	; 65
    4310:	2a e1       	ldi	r18, 0x1A	; 26
    4312:	3b e8       	ldi	r19, 0x8B	; 139
    4314:	4d e9       	ldi	r20, 0x9D	; 157
    4316:	50 e4       	ldi	r21, 0x40	; 64
    4318:	0f 2e       	mov	r0, r31
    431a:	f0 e0       	ldi	r31, 0x00	; 0
    431c:	ef 2e       	mov	r14, r31
    431e:	f0 e0       	ldi	r31, 0x00	; 0
    4320:	ff 2e       	mov	r15, r31
    4322:	f0 e8       	ldi	r31, 0x80	; 128
    4324:	0f 2f       	mov	r16, r31
    4326:	ff eb       	ldi	r31, 0xBF	; 191
    4328:	1f 2f       	mov	r17, r31
    432a:	f0 2d       	mov	r31, r0
    432c:	57 01       	movw	r10, r14
    432e:	68 01       	movw	r12, r16
    4330:	0e 94 1c 04 	call	0x838	; 0x838 <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    4334:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
    4338:	88 23       	and	r24, r24
    433a:	e1 f7       	brne	.-8      	; 0x4334 <run_vacuum_test+0x60>
    433c:	80 e9       	ldi	r24, 0x90	; 144
    433e:	91 e0       	ldi	r25, 0x01	; 1
    4340:	01 97       	sbiw	r24, 0x01	; 1
    4342:	f1 f7       	brne	.-4      	; 0x4340 <run_vacuum_test+0x6c>
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	d3 cf       	rjmp	.-90     	; 0x42ee <run_vacuum_test+0x1a>

00004348 <goto_vacpad>:
	return GCSTATUS_OK;

}

unsigned char goto_vacpad( void ) 
{
    4348:	8f 92       	push	r8
    434a:	9f 92       	push	r9
    434c:	af 92       	push	r10
    434e:	bf 92       	push	r11
    4350:	cf 92       	push	r12
    4352:	df 92       	push	r13
    4354:	ef 92       	push	r14
    4356:	ff 92       	push	r15
    4358:	0f 93       	push	r16
    435a:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    435c:	80 91 55 05 	lds	r24, 0x0555
    4360:	88 23       	and	r24, r24
    4362:	61 f4       	brne	.+24     	; 0x437c <goto_vacpad+0x34>
    4364:	83 e6       	ldi	r24, 0x63	; 99

	while( is_head_down() ) ;
	
	return GCSTATUS_OK;

}
    4366:	1f 91       	pop	r17
    4368:	0f 91       	pop	r16
    436a:	ff 90       	pop	r15
    436c:	ef 90       	pop	r14
    436e:	df 90       	pop	r13
    4370:	cf 90       	pop	r12
    4372:	bf 90       	pop	r11
    4374:	af 90       	pop	r10
    4376:	9f 90       	pop	r9
    4378:	8f 90       	pop	r8
    437a:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
    437c:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    4380:	88 23       	and	r24, r24
    4382:	09 f0       	breq	.+2      	; 0x4386 <goto_vacpad+0x3e>
    4384:	20 c1       	rjmp	.+576    	; 0x45c6 <goto_vacpad+0x27e>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4386:	63 ec       	ldi	r22, 0xC3	; 195
    4388:	73 ed       	ldi	r23, 0xD3	; 211
    438a:	81 e4       	ldi	r24, 0x41	; 65
    438c:	91 e4       	ldi	r25, 0x41	; 65
    438e:	2a e1       	ldi	r18, 0x1A	; 26
    4390:	3b e8       	ldi	r19, 0x8B	; 139
    4392:	4d e9       	ldi	r20, 0x9D	; 157
    4394:	50 e4       	ldi	r21, 0x40	; 64
    4396:	0f 2e       	mov	r0, r31
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	ef 2e       	mov	r14, r31
    439c:	f0 e0       	ldi	r31, 0x00	; 0
    439e:	ff 2e       	mov	r15, r31
    43a0:	f0 e8       	ldi	r31, 0x80	; 128
    43a2:	0f 2f       	mov	r16, r31
    43a4:	ff eb       	ldi	r31, 0xBF	; 191
    43a6:	1f 2f       	mov	r17, r31
    43a8:	f0 2d       	mov	r31, r0
    43aa:	57 01       	movw	r10, r14
    43ac:	68 01       	movw	r12, r16
    43ae:	0e 94 1c 04 	call	0x838	; 0x838 <gotoxy>

	while( head_moving() );	
    43b2:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
    43b6:	88 23       	and	r24, r24
    43b8:	e1 f7       	brne	.-8      	; 0x43b2 <goto_vacpad+0x6a>
    43ba:	80 e9       	ldi	r24, 0x90	; 144
    43bc:	91 e0       	ldi	r25, 0x01	; 1
    43be:	01 97       	sbiw	r24, 0x01	; 1
    43c0:	f1 f7       	brne	.-4      	; 0x43be <goto_vacpad+0x76>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
    43ca:	28 e8       	ldi	r18, 0x88	; 136
    43cc:	33 e1       	ldi	r19, 0x13	; 19
    43ce:	40 e9       	ldi	r20, 0x90	; 144
    43d0:	51 e0       	ldi	r21, 0x01	; 1
    43d2:	ca 01       	movw	r24, r20
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	f1 f7       	brne	.-4      	; 0x43d4 <goto_vacpad+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d8:	21 50       	subi	r18, 0x01	; 1
    43da:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43dc:	d1 f7       	brne	.-12     	; 0x43d2 <goto_vacpad+0x8a>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    43e6:	88 23       	and	r24, r24
    43e8:	09 f4       	brne	.+2      	; 0x43ec <goto_vacpad+0xa4>
    43ea:	e7 c0       	rjmp	.+462    	; 0x45ba <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    43ec:	20 e1       	ldi	r18, 0x10	; 16
    43ee:	37 e2       	ldi	r19, 0x27	; 39
    43f0:	40 e9       	ldi	r20, 0x90	; 144
    43f2:	51 e0       	ldi	r21, 0x01	; 1
    43f4:	ca 01       	movw	r24, r20
    43f6:	01 97       	sbiw	r24, 0x01	; 1
    43f8:	f1 f7       	brne	.-4      	; 0x43f6 <goto_vacpad+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43fa:	21 50       	subi	r18, 0x01	; 1
    43fc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43fe:	d1 f7       	brne	.-12     	; 0x43f4 <goto_vacpad+0xac>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    4400:	99 b0       	in	r9, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    4412:	88 23       	and	r24, r24
    4414:	09 f4       	brne	.+2      	; 0x4418 <goto_vacpad+0xd0>
    4416:	c8 c0       	rjmp	.+400    	; 0x45a8 <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4418:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    441c:	88 23       	and	r24, r24
    441e:	e1 f7       	brne	.-8      	; 0x4418 <goto_vacpad+0xd0>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    4420:	6d e3       	ldi	r22, 0x3D	; 61
    4422:	7b e9       	ldi	r23, 0x9B	; 155
    4424:	8d e4       	ldi	r24, 0x4D	; 77
    4426:	91 e4       	ldi	r25, 0x41	; 65
    4428:	2c ed       	ldi	r18, 0xDC	; 220
    442a:	38 e6       	ldi	r19, 0x68	; 104
    442c:	44 e9       	ldi	r20, 0x94	; 148
    442e:	50 e4       	ldi	r21, 0x40	; 64
    4430:	0f 2e       	mov	r0, r31
    4432:	f0 e0       	ldi	r31, 0x00	; 0
    4434:	ef 2e       	mov	r14, r31
    4436:	f0 e0       	ldi	r31, 0x00	; 0
    4438:	ff 2e       	mov	r15, r31
    443a:	f0 e8       	ldi	r31, 0x80	; 128
    443c:	0f 2f       	mov	r16, r31
    443e:	ff eb       	ldi	r31, 0xBF	; 191
    4440:	1f 2f       	mov	r17, r31
    4442:	f0 2d       	mov	r31, r0
    4444:	57 01       	movw	r10, r14
    4446:	68 01       	movw	r12, r16
    4448:	0e 94 1c 04 	call	0x838	; 0x838 <gotoxy>

	while( head_moving() );	
    444c:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
    4450:	88 23       	and	r24, r24
    4452:	e1 f7       	brne	.-8      	; 0x444c <goto_vacpad+0x104>
    4454:	80 e9       	ldi	r24, 0x90	; 144
    4456:	91 e0       	ldi	r25, 0x01	; 1
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	f1 f7       	brne	.-4      	; 0x4458 <goto_vacpad+0x110>
    445c:	20 ea       	ldi	r18, 0xA0	; 160
    445e:	3f e0       	ldi	r19, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4460:	40 e9       	ldi	r20, 0x90	; 144
    4462:	51 e0       	ldi	r21, 0x01	; 1
    4464:	ca 01       	movw	r24, r20
    4466:	01 97       	sbiw	r24, 0x01	; 1
    4468:	f1 f7       	brne	.-4      	; 0x4466 <goto_vacpad+0x11e>
    446a:	21 50       	subi	r18, 0x01	; 1
    446c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    446e:	d1 f7       	brne	.-12     	; 0x4464 <goto_vacpad+0x11c>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    4478:	88 23       	and	r24, r24
    447a:	09 f4       	brne	.+2      	; 0x447e <goto_vacpad+0x136>
    447c:	95 c0       	rjmp	.+298    	; 0x45a8 <goto_vacpad+0x260>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    447e:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    4482:	88 23       	and	r24, r24
    4484:	e1 f3       	breq	.-8      	; 0x447e <goto_vacpad+0x136>
    4486:	20 e1       	ldi	r18, 0x10	; 16
    4488:	37 e2       	ldi	r19, 0x27	; 39
    448a:	40 e9       	ldi	r20, 0x90	; 144
    448c:	51 e0       	ldi	r21, 0x01	; 1
    448e:	ca 01       	movw	r24, r20
    4490:	01 97       	sbiw	r24, 0x01	; 1
    4492:	f1 f7       	brne	.-4      	; 0x4490 <goto_vacpad+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4494:	21 50       	subi	r18, 0x01	; 1
    4496:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4498:	d1 f7       	brne	.-12     	; 0x448e <goto_vacpad+0x146>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atc_fire>
    44a2:	20 e4       	ldi	r18, 0x40	; 64
    44a4:	3f e1       	ldi	r19, 0x1F	; 31
    44a6:	40 e9       	ldi	r20, 0x90	; 144
    44a8:	51 e0       	ldi	r21, 0x01	; 1
    44aa:	ca 01       	movw	r24, r20
    44ac:	01 97       	sbiw	r24, 0x01	; 1
    44ae:	f1 f7       	brne	.-4      	; 0x44ac <goto_vacpad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b0:	21 50       	subi	r18, 0x01	; 1
    44b2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b4:	d1 f7       	brne	.-12     	; 0x44aa <goto_vacpad+0x162>
    44b6:	88 24       	eor	r8, r8
    44b8:	97 fc       	sbrc	r9, 7
    44ba:	6b c0       	rjmp	.+214    	; 0x4592 <goto_vacpad+0x24a>
    44bc:	88 24       	eor	r8, r8
    44be:	83 94       	inc	r8

		// tool changer off
		atc_fire ( 0 );
		
		// head up
		if( head_down( 0 ) == 0 ) {
    44c0:	28 e8       	ldi	r18, 0x88	; 136
    44c2:	33 e1       	ldi	r19, 0x13	; 19
    44c4:	40 e9       	ldi	r20, 0x90	; 144
    44c6:	51 e0       	ldi	r21, 0x01	; 1
    44c8:	ca 01       	movw	r24, r20
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	f1 f7       	brne	.-4      	; 0x44ca <goto_vacpad+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ce:	21 50       	subi	r18, 0x01	; 1
    44d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d2:	d1 f7       	brne	.-12     	; 0x44c8 <goto_vacpad+0x180>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    44d4:	80 e0       	ldi	r24, 0x00	; 0
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    44dc:	88 23       	and	r24, r24
    44de:	09 f4       	brne	.+2      	; 0x44e2 <goto_vacpad+0x19a>
    44e0:	63 c0       	rjmp	.+198    	; 0x45a8 <goto_vacpad+0x260>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    44e2:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    44e6:	81 30       	cpi	r24, 0x01	; 1
    44e8:	e1 f3       	breq	.-8      	; 0x44e2 <goto_vacpad+0x19a>
    44ea:	28 e9       	ldi	r18, 0x98	; 152
    44ec:	3a e3       	ldi	r19, 0x3A	; 58
    44ee:	40 e9       	ldi	r20, 0x90	; 144
    44f0:	51 e0       	ldi	r21, 0x01	; 1
    44f2:	ca 01       	movw	r24, r20
    44f4:	01 97       	sbiw	r24, 0x01	; 1
    44f6:	f1 f7       	brne	.-4      	; 0x44f4 <goto_vacpad+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f8:	21 50       	subi	r18, 0x01	; 1
    44fa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44fc:	d1 f7       	brne	.-12     	; 0x44f2 <goto_vacpad+0x1aa>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    44fe:	63 ec       	ldi	r22, 0xC3	; 195
    4500:	73 ed       	ldi	r23, 0xD3	; 211
    4502:	81 e4       	ldi	r24, 0x41	; 65
    4504:	91 e4       	ldi	r25, 0x41	; 65
    4506:	2a e1       	ldi	r18, 0x1A	; 26
    4508:	3b e8       	ldi	r19, 0x8B	; 139
    450a:	4d e9       	ldi	r20, 0x9D	; 157
    450c:	50 e4       	ldi	r21, 0x40	; 64
    450e:	0f 2e       	mov	r0, r31
    4510:	f0 e0       	ldi	r31, 0x00	; 0
    4512:	ef 2e       	mov	r14, r31
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	ff 2e       	mov	r15, r31
    4518:	f0 e8       	ldi	r31, 0x80	; 128
    451a:	0f 2f       	mov	r16, r31
    451c:	ff eb       	ldi	r31, 0xBF	; 191
    451e:	1f 2f       	mov	r17, r31
    4520:	f0 2d       	mov	r31, r0
    4522:	57 01       	movw	r10, r14
    4524:	68 01       	movw	r12, r16
    4526:	0e 94 1c 04 	call	0x838	; 0x838 <gotoxy>

	while( head_moving() );	
    452a:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
    452e:	88 23       	and	r24, r24
    4530:	e1 f7       	brne	.-8      	; 0x452a <goto_vacpad+0x1e2>
    4532:	80 e9       	ldi	r24, 0x90	; 144
    4534:	91 e0       	ldi	r25, 0x01	; 1
    4536:	01 97       	sbiw	r24, 0x01	; 1
    4538:	f1 f7       	brne	.-4      	; 0x4536 <goto_vacpad+0x1ee>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
    4542:	28 e8       	ldi	r18, 0x88	; 136
    4544:	33 e1       	ldi	r19, 0x13	; 19
    4546:	40 e9       	ldi	r20, 0x90	; 144
    4548:	51 e0       	ldi	r21, 0x01	; 1
    454a:	ca 01       	movw	r24, r20
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	f1 f7       	brne	.-4      	; 0x454c <goto_vacpad+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4550:	21 50       	subi	r18, 0x01	; 1
    4552:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4554:	d1 f7       	brne	.-12     	; 0x454a <goto_vacpad+0x202>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    455e:	88 23       	and	r24, r24
    4560:	61 f1       	breq	.+88     	; 0x45ba <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4562:	20 e1       	ldi	r18, 0x10	; 16
    4564:	37 e2       	ldi	r19, 0x27	; 39
    4566:	40 e9       	ldi	r20, 0x90	; 144
    4568:	51 e0       	ldi	r21, 0x01	; 1
    456a:	ca 01       	movw	r24, r20
    456c:	01 97       	sbiw	r24, 0x01	; 1
    456e:	f1 f7       	brne	.-4      	; 0x456c <goto_vacpad+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4570:	21 50       	subi	r18, 0x01	; 1
    4572:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4574:	d1 f7       	brne	.-12     	; 0x456a <goto_vacpad+0x222>

   _delay_ms( 1000 );


	// check vacuum
	if( vacuum_state() ) {
    4576:	4f 99       	sbic	0x09, 7	; 9
    4578:	19 c0       	rjmp	.+50     	; 0x45ac <goto_vacpad+0x264>
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    457a:	88 20       	and	r8, r8
    457c:	49 f1       	breq	.+82     	; 0x45d0 <goto_vacpad+0x288>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup failed\r\n"));
#endif

// oops
		head_down(0);
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
		vacuum( 0 );
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
    458e:	85 e0       	ldi	r24, 0x05	; 5
    4590:	ea ce       	rjmp	.-556    	; 0x4366 <goto_vacpad+0x1e>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <atc_fire>
		
		// head up
		if( head_down( 0 ) == 0 ) {
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    45a2:	88 23       	and	r24, r24
    45a4:	09 f0       	breq	.+2      	; 0x45a8 <goto_vacpad+0x260>
    45a6:	9d cf       	rjmp	.-198    	; 0x44e2 <goto_vacpad+0x19a>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    45a8:	85 e0       	ldi	r24, 0x05	; 5
    45aa:	dd ce       	rjmp	.-582    	; 0x4366 <goto_vacpad+0x1e>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    45ac:	81 e0       	ldi	r24, 0x01	; 1
    45ae:	88 16       	cp	r8, r24
    45b0:	79 f0       	breq	.+30     	; 0x45d0 <goto_vacpad+0x288>
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
#endif

			head_down(0);
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
			vacuum( 0 );
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>
    45c2:	85 e0       	ldi	r24, 0x05	; 5
    45c4:	d0 ce       	rjmp	.-608    	; 0x4366 <goto_vacpad+0x1e>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    45c6:	80 e0       	ldi	r24, 0x00	; 0
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    45ce:	db ce       	rjmp	.-586    	; 0x4386 <goto_vacpad+0x3e>
		}

	}	

// vacuum off
	vacuum( 0 );
    45d0:	80 e0       	ldi	r24, 0x00	; 0
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    45e0:	88 23       	and	r24, r24
    45e2:	11 f3       	breq	.-60     	; 0x45a8 <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    45e4:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    45e8:	88 23       	and	r24, r24
    45ea:	e1 f7       	brne	.-8      	; 0x45e4 <goto_vacpad+0x29c>
    45ec:	bc ce       	rjmp	.-648    	; 0x4366 <goto_vacpad+0x1e>

000045ee <test_mode>:
	return GCSTATUS_OK;

}

unsigned char test_mode(void)
{
    45ee:	8f 92       	push	r8
    45f0:	9f 92       	push	r9
    45f2:	af 92       	push	r10
    45f4:	bf 92       	push	r11
    45f6:	cf 92       	push	r12
    45f8:	df 92       	push	r13
    45fa:	ef 92       	push	r14
    45fc:	ff 92       	push	r15
    45fe:	0f 93       	push	r16
    4600:	1f 93       	push	r17
    4602:	cf 93       	push	r28
    4604:	df 93       	push	r29
	int i;
	double x,y;

	if( gHomed == FALSE ) {
    4606:	80 91 55 05 	lds	r24, 0x0555
    460a:	88 23       	and	r24, r24
    460c:	71 f4       	brne	.+28     	; 0x462a <test_mode+0x3c>
    460e:	83 e6       	ldi	r24, 0x63	; 99

	}

	return GCSTATUS_OK;

}
    4610:	df 91       	pop	r29
    4612:	cf 91       	pop	r28
    4614:	1f 91       	pop	r17
    4616:	0f 91       	pop	r16
    4618:	ff 90       	pop	r15
    461a:	ef 90       	pop	r14
    461c:	df 90       	pop	r13
    461e:	cf 90       	pop	r12
    4620:	bf 90       	pop	r11
    4622:	af 90       	pop	r10
    4624:	9f 90       	pop	r9
    4626:	8f 90       	pop	r8
    4628:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
    462a:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    462e:	88 23       	and	r24, r24
    4630:	09 f0       	breq	.+2      	; 0x4634 <test_mode+0x46>
    4632:	4a c0       	rjmp	.+148    	; 0x46c8 <test_mode+0xda>
		head_down( FALSE )  ;
    4634:	88 24       	eor	r8, r8
    4636:	99 24       	eor	r9, r9
    4638:	c0 e9       	ldi	r28, 0x90	; 144
    463a:	d1 e0       	ldi	r29, 0x01	; 1
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
	
		x = rand() %12;
    463c:	0e 94 0a 30 	call	0x6014	; 0x6014 <rand>
    4640:	8c 01       	movw	r16, r24
		y = rand() %14 ;
    4642:	0e 94 0a 30 	call	0x6014	; 0x6014 <rand>
    4646:	6c 01       	movw	r12, r24

		gotoxy( x,y ,-1,-1) ;
    4648:	c8 01       	movw	r24, r16
    464a:	6c e0       	ldi	r22, 0x0C	; 12
    464c:	70 e0       	ldi	r23, 0x00	; 0
    464e:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
    4652:	aa 27       	eor	r26, r26
    4654:	97 fd       	sbrc	r25, 7
    4656:	a0 95       	com	r26
    4658:	ba 2f       	mov	r27, r26
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    4662:	7b 01       	movw	r14, r22
    4664:	8c 01       	movw	r16, r24
    4666:	c6 01       	movw	r24, r12
    4668:	6e e0       	ldi	r22, 0x0E	; 14
    466a:	70 e0       	ldi	r23, 0x00	; 0
    466c:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__divmodhi4>
    4670:	aa 27       	eor	r26, r26
    4672:	97 fd       	sbrc	r25, 7
    4674:	a0 95       	com	r26
    4676:	ba 2f       	mov	r27, r26
    4678:	bc 01       	movw	r22, r24
    467a:	cd 01       	movw	r24, r26
    467c:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__floatsisf>
    4680:	9b 01       	movw	r18, r22
    4682:	ac 01       	movw	r20, r24
    4684:	c8 01       	movw	r24, r16
    4686:	b7 01       	movw	r22, r14
    4688:	0f 2e       	mov	r0, r31
    468a:	f0 e0       	ldi	r31, 0x00	; 0
    468c:	ef 2e       	mov	r14, r31
    468e:	f0 e0       	ldi	r31, 0x00	; 0
    4690:	ff 2e       	mov	r15, r31
    4692:	f0 e8       	ldi	r31, 0x80	; 128
    4694:	0f 2f       	mov	r16, r31
    4696:	ff eb       	ldi	r31, 0xBF	; 191
    4698:	1f 2f       	mov	r17, r31
    469a:	f0 2d       	mov	r31, r0
    469c:	57 01       	movw	r10, r14
    469e:	68 01       	movw	r12, r16
    46a0:	0e 94 1c 04 	call	0x838	; 0x838 <gotoxy>
    46a4:	28 e8       	ldi	r18, 0x88	; 136
    46a6:	33 e1       	ldi	r19, 0x13	; 19
    46a8:	ce 01       	movw	r24, r28
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	f1 f7       	brne	.-4      	; 0x46aa <test_mode+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ae:	21 50       	subi	r18, 0x01	; 1
    46b0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b2:	d1 f7       	brne	.-12     	; 0x46a8 <test_mode+0xba>
	if( is_head_down() ) {
		head_down( FALSE )  ;
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
    46b4:	08 94       	sec
    46b6:	81 1c       	adc	r8, r1
    46b8:	91 1c       	adc	r9, r1
    46ba:	88 ec       	ldi	r24, 0xC8	; 200
    46bc:	88 16       	cp	r8, r24
    46be:	91 04       	cpc	r9, r1
    46c0:	09 f0       	breq	.+2      	; 0x46c4 <test_mode+0xd6>
    46c2:	bc cf       	rjmp	.-136    	; 0x463c <test_mode+0x4e>
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	a4 cf       	rjmp	.-184    	; 0x4610 <test_mode+0x22>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    46c8:	80 e0       	ldi	r24, 0x00	; 0
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    46d0:	b1 cf       	rjmp	.-158    	; 0x4634 <test_mode+0x46>

000046d2 <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    46d2:	4f 99       	sbic	0x09, 7	; 9
    46d4:	05 c0       	rjmp	.+10     	; 0x46e0 <vacuum_test+0xe>
		
		printPgmString(PSTR("yes\n"));
    46d6:	86 e0       	ldi	r24, 0x06	; 6
    46d8:	96 e0       	ldi	r25, 0x06	; 6
    46da:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    46de:	08 95       	ret
	} else {
		printPgmString(PSTR("no\n"));
    46e0:	82 e0       	ldi	r24, 0x02	; 2
    46e2:	96 e0       	ldi	r25, 0x06	; 6
    46e4:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    46e8:	08 95       	ret

000046ea <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    46ea:	e7 e0       	ldi	r30, 0x07	; 7
    46ec:	f1 e0       	ldi	r31, 0x01	; 1
    46ee:	80 81       	ld	r24, Z
    46f0:	80 68       	ori	r24, 0x80	; 128
    46f2:	80 83       	st	Z, r24
}
    46f4:	08 95       	ret

000046f6 <putdown_part>:
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    46f6:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    46fa:	88 23       	and	r24, r24
    46fc:	81 f5       	brne	.+96     	; 0x475e <putdown_part+0x68>
		return GCSTATUS_FAILED_COMMAND;
	}

	// wait til head stops
	while( head_moving() );
    46fe:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
    4702:	88 23       	and	r24, r24
    4704:	e1 f7       	brne	.-8      	; 0x46fe <putdown_part+0x8>
    4706:	28 ee       	ldi	r18, 0xE8	; 232
    4708:	33 e0       	ldi	r19, 0x03	; 3
    470a:	40 e9       	ldi	r20, 0x90	; 144
    470c:	51 e0       	ldi	r21, 0x01	; 1
    470e:	ca 01       	movw	r24, r20
    4710:	01 97       	sbiw	r24, 0x01	; 1
    4712:	f1 f7       	brne	.-4      	; 0x4710 <putdown_part+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4714:	21 50       	subi	r18, 0x01	; 1
    4716:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4718:	d1 f7       	brne	.-12     	; 0x470e <putdown_part+0x18>
	}

#endif

	// push head down
	head_down( 1 );
    471a:	81 e0       	ldi	r24, 0x01	; 1
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    4722:	24 ec       	ldi	r18, 0xC4	; 196
    4724:	39 e0       	ldi	r19, 0x09	; 9
    4726:	40 e9       	ldi	r20, 0x90	; 144
    4728:	51 e0       	ldi	r21, 0x01	; 1
    472a:	ca 01       	movw	r24, r20
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	f1 f7       	brne	.-4      	; 0x472c <putdown_part+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4730:	21 50       	subi	r18, 0x01	; 1
    4732:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4734:	d1 f7       	brne	.-12     	; 0x472a <putdown_part+0x34>

	// settle after head down ( probably doesn't need it  )
	_delay_ms( 250 );

	// vacuum off
	vacuum ( 0 );
    4736:	80 e0       	ldi	r24, 0x00	; 0
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>

	// head up
	head_down ( 0 ) ;
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    4746:	28 e8       	ldi	r18, 0x88	; 136
    4748:	33 e1       	ldi	r19, 0x13	; 19
    474a:	40 e9       	ldi	r20, 0x90	; 144
    474c:	51 e0       	ldi	r21, 0x01	; 1
    474e:	ca 01       	movw	r24, r20
    4750:	01 97       	sbiw	r24, 0x01	; 1
    4752:	f1 f7       	brne	.-4      	; 0x4750 <putdown_part+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4754:	21 50       	subi	r18, 0x01	; 1
    4756:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4758:	d1 f7       	brne	.-12     	; 0x474e <putdown_part+0x58>
    475a:	80 e0       	ldi	r24, 0x00	; 0

	_delay_ms( 500 );

	return GCSTATUS_OK;

}
    475c:	08 95       	ret
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    475e:	85 e0       	ldi	r24, 0x05	; 5
    4760:	08 95       	ret

00004762 <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    4762:	80 91 55 05 	lds	r24, 0x0555
    4766:	88 23       	and	r24, r24
    4768:	41 f1       	breq	.+80     	; 0x47ba <tape_knock+0x58>
   		return ;
   	}


	while( head_moving() );
    476a:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
    476e:	88 23       	and	r24, r24
    4770:	e1 f7       	brne	.-8      	; 0x476a <tape_knock+0x8>

	set_busy( TRUE );
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    4778:	80 91 08 01 	lds	r24, 0x0108
    477c:	8f 77       	andi	r24, 0x7F	; 127
    477e:	80 93 08 01 	sts	0x0108, r24
    4782:	20 ed       	ldi	r18, 0xD0	; 208
    4784:	37 e0       	ldi	r19, 0x07	; 7
    4786:	40 e9       	ldi	r20, 0x90	; 144
    4788:	51 e0       	ldi	r21, 0x01	; 1
    478a:	ca 01       	movw	r24, r20
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <tape_knock+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4790:	21 50       	subi	r18, 0x01	; 1
    4792:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4794:	d1 f7       	brne	.-12     	; 0x478a <tape_knock+0x28>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    4796:	80 91 08 01 	lds	r24, 0x0108
    479a:	80 68       	ori	r24, 0x80	; 128
    479c:	80 93 08 01 	sts	0x0108, r24
    47a0:	20 ed       	ldi	r18, 0xD0	; 208
    47a2:	37 e0       	ldi	r19, 0x07	; 7
    47a4:	40 e9       	ldi	r20, 0x90	; 144
    47a6:	51 e0       	ldi	r21, 0x01	; 1
    47a8:	ca 01       	movw	r24, r20
    47aa:	01 97       	sbiw	r24, 0x01	; 1
    47ac:	f1 f7       	brne	.-4      	; 0x47aa <tape_knock+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ae:	21 50       	subi	r18, 0x01	; 1
    47b0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47b2:	d1 f7       	brne	.-12     	; 0x47a8 <tape_knock+0x46>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <set_busy>
    47ba:	08 95       	ret

000047bc <pickup_part>:
char pickup_part ( void ) 
{
	unsigned char failedCounter;

	// wait til head stops
	while( head_moving() );
    47bc:	0e 94 86 19 	call	0x330c	; 0x330c <head_moving>
    47c0:	88 23       	and	r24, r24
    47c2:	e1 f7       	brne	.-8      	; 0x47bc <pickup_part>

	// count number of pickup fails
	failedCounter = 0 ;

	if( is_head_down() ){
    47c4:	0e 94 3f 20 	call	0x407e	; 0x407e <is_head_down>
    47c8:	88 23       	and	r24, r24
    47ca:	11 f0       	breq	.+4      	; 0x47d0 <pickup_part+0x14>
    47cc:	85 e0       	ldi	r24, 0x05	; 5
    47ce:	08 95       	ret

	//for(;;)  (oops!)
	{

		// advance part, waits til head has done
		tape_knock();
    47d0:	0e 94 b1 23 	call	0x4762	; 0x4762 <tape_knock>

		// vacuum on
		vacuum ( 1 );
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	0e 94 45 21 	call	0x428a	; 0x428a <vacuum>

		// push head down
		head_down( 1 );
    47dc:	81 e0       	ldi	r24, 0x01	; 1
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    47e4:	28 e8       	ldi	r18, 0x88	; 136
    47e6:	33 e1       	ldi	r19, 0x13	; 19
    47e8:	40 e9       	ldi	r20, 0x90	; 144
    47ea:	51 e0       	ldi	r21, 0x01	; 1
    47ec:	ca 01       	movw	r24, r20
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <pickup_part+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47f2:	21 50       	subi	r18, 0x01	; 1
    47f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f6:	d1 f7       	brne	.-12     	; 0x47ec <pickup_part+0x30>

		//settle (probably doesn't need this)
		_delay_ms( 500 );

		// head up
		head_down ( 0 ) ;
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	0e 94 48 20 	call	0x4090	; 0x4090 <head_down>
    4800:	28 e8       	ldi	r18, 0x88	; 136
    4802:	33 e1       	ldi	r19, 0x13	; 19
    4804:	40 e9       	ldi	r20, 0x90	; 144
    4806:	51 e0       	ldi	r21, 0x01	; 1
    4808:	ca 01       	movw	r24, r20
    480a:	01 97       	sbiw	r24, 0x01	; 1
    480c:	f1 f7       	brne	.-4      	; 0x480a <pickup_part+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    480e:	21 50       	subi	r18, 0x01	; 1
    4810:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4812:	d1 f7       	brne	.-12     	; 0x4808 <pickup_part+0x4c>
    4814:	80 e0       	ldi	r24, 0x00	; 0

	_delay_ms( 500 );

	return GCSTATUS_OK;

}
    4816:	08 95       	ret

00004818 <millis>:
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4818:	20 91 88 06 	lds	r18, 0x0688
    481c:	30 91 89 06 	lds	r19, 0x0689
    4820:	40 91 8a 06 	lds	r20, 0x068A
    4824:	50 91 8b 06 	lds	r21, 0x068B
    4828:	2f 5f       	subi	r18, 0xFF	; 255
    482a:	3f 4f       	sbci	r19, 0xFF	; 255
    482c:	4f 4f       	sbci	r20, 0xFF	; 255
    482e:	5f 4f       	sbci	r21, 0xFF	; 255
    4830:	20 93 88 06 	sts	0x0688, r18
    4834:	30 93 89 06 	sts	0x0689, r19
    4838:	40 93 8a 06 	sts	0x068A, r20
    483c:	50 93 8b 06 	sts	0x068B, r21

	return counter;
}
    4840:	b9 01       	movw	r22, r18
    4842:	ca 01       	movw	r24, r20
    4844:	08 95       	ret

00004846 <digitalWrite>:

void digitalWrite( int a  ,int b)
{

}
    4846:	08 95       	ret

00004848 <USB_initEndPoint>:
 * Initialises a USB endpoint.
 * @param endpoint USB endpoint
 * @param address endpoint address
 */
void USB_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
    4848:	fc 01       	movw	r30, r24
	endpoint->address = address;
    484a:	60 83       	st	Z, r22
	endpoint->sendToggle = bmSNDTOG0;
    484c:	80 e4       	ldi	r24, 0x40	; 64
    484e:	84 83       	std	Z+4, r24	; 0x04
	endpoint->receiveToggle = bmRCVTOG0;
    4850:	80 e1       	ldi	r24, 0x10	; 16
    4852:	85 83       	std	Z+5, r24	; 0x05
}
    4854:	08 95       	ret

00004856 <USB_setEventHandler>:
 * Sets the global USB event callback function. Use this to catch global events like device connect/disconnect.
 * @param handler event handler function.
 */
void USB_setEventHandler(usb_eventHandler * handler)
{
	eventHandler = handler;
    4856:	90 93 87 06 	sts	0x0687, r25
    485a:	80 93 86 06 	sts	0x0686, r24
}
    485e:	08 95       	ret

00004860 <USB_fireEvent>:
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    4860:	e0 91 86 06 	lds	r30, 0x0686
    4864:	f0 91 87 06 	lds	r31, 0x0687
    4868:	19 95       	eicall
}
    486a:	08 95       	ret

0000486c <usb_getUsbTaskState>:

// private
uint8_t usb_getUsbTaskState()
{
	return (usb_task_state);
}
    486c:	80 91 00 02 	lds	r24, 0x0200
    4870:	08 95       	ret

00004872 <usb_setUsbTaskState>:

// private
void usb_setUsbTaskState(uint8_t state)
{
	usb_task_state = state;
    4872:	80 93 00 02 	sts	0x0200, r24
}
    4876:	08 95       	ret

00004878 <usb_getDevice>:
 * as address zero is reserver).
 * @param address USB device address
 * @return USB device struct or NULL on failure (address out of range)
 */
usb_device * usb_getDevice(uint8_t address)
{
    4878:	98 2f       	mov	r25, r24
	if (address>USB_NUMDEVICES+1) return NULL;
    487a:	84 30       	cpi	r24, 0x04	; 4
    487c:	40 f4       	brcc	.+16     	; 0x488e <usb_getDevice+0x16>

	return &(deviceTable[address]);
    487e:	86 e1       	ldi	r24, 0x16	; 22
    4880:	98 9f       	mul	r25, r24
    4882:	90 01       	movw	r18, r0
    4884:	11 24       	eor	r1, r1
    4886:	2c 54       	subi	r18, 0x4C	; 76
    4888:	39 4f       	sbci	r19, 0xF9	; 249
}
    488a:	c9 01       	movw	r24, r18
    488c:	08 95       	ret
 * @param address USB device address
 * @return USB device struct or NULL on failure (address out of range)
 */
usb_device * usb_getDevice(uint8_t address)
{
	if (address>USB_NUMDEVICES+1) return NULL;
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0

	return &(deviceTable[address]);
}
    4892:	c9 01       	movw	r24, r18
    4894:	08 95       	ret

00004896 <USB_write>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes written, or error code in case of failure.
 */
int USB_write(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data)
{
    4896:	2f 92       	push	r2
    4898:	3f 92       	push	r3
    489a:	4f 92       	push	r4
    489c:	5f 92       	push	r5
    489e:	6f 92       	push	r6
    48a0:	7f 92       	push	r7
    48a2:	8f 92       	push	r8
    48a4:	9f 92       	push	r9
    48a6:	af 92       	push	r10
    48a8:	bf 92       	push	r11
    48aa:	cf 92       	push	r12
    48ac:	df 92       	push	r13
    48ae:	ef 92       	push	r14
    48b0:	ff 92       	push	r15
    48b2:	0f 93       	push	r16
    48b4:	1f 93       	push	r17
    48b6:	cf 93       	push	r28
    48b8:	df 93       	push	r29
    48ba:	fc 01       	movw	r30, r24
    48bc:	7b 01       	movw	r14, r22
    48be:	ea 01       	movw	r28, r20
    48c0:	02 2f       	mov	r16, r18
    48c2:	93 2e       	mov	r9, r19
	uint8_t rcode = 0, retry_count;

	// Set device address.
	max3421e_write(MAX_REG_PERADDR, device->address);
    48c4:	80 ee       	ldi	r24, 0xE0	; 224
    48c6:	60 81       	ld	r22, Z
    48c8:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    48cc:	80 91 88 06 	lds	r24, 0x0688
    48d0:	90 91 89 06 	lds	r25, 0x0689
    48d4:	a0 91 8a 06 	lds	r26, 0x068A
    48d8:	b0 91 8b 06 	lds	r27, 0x068B
    48dc:	01 96       	adiw	r24, 0x01	; 1
    48de:	a1 1d       	adc	r26, r1
    48e0:	b1 1d       	adc	r27, r1
    48e2:	80 93 88 06 	sts	0x0688, r24
    48e6:	90 93 89 06 	sts	0x0689, r25
    48ea:	a0 93 8a 06 	sts	0x068A, r26
    48ee:	b0 93 8b 06 	sts	0x068B, r27

	unsigned int bytes_tosend, nak_count;
	unsigned int bytes_left = length;
	unsigned int nak_limit = USB_NAK_LIMIT;

	uint32_t timeout = millis() + USB_XFER_TIMEOUT;
    48f2:	28 e8       	ldi	r18, 0x88	; 136
    48f4:	a2 2e       	mov	r10, r18
    48f6:	23 e1       	ldi	r18, 0x13	; 19
    48f8:	b2 2e       	mov	r11, r18
    48fa:	c1 2c       	mov	r12, r1
    48fc:	d1 2c       	mov	r13, r1
    48fe:	a8 0e       	add	r10, r24
    4900:	b9 1e       	adc	r11, r25
    4902:	ca 1e       	adc	r12, r26
    4904:	db 1e       	adc	r13, r27

	uint8_t maxPacketSize = endpoint->maxPacketSize;
    4906:	f7 01       	movw	r30, r14
    4908:	12 81       	ldd	r17, Z+2	; 0x02

	// If maximum packet size is not set, return.
	if (!maxPacketSize) return 0xFE;
    490a:	11 23       	and	r17, r17
    490c:	b1 f4       	brne	.+44     	; 0x493a <USB_write+0xa4>
    490e:	ce ef       	ldi	r28, 0xFE	; 254
    4910:	d0 e0       	ldi	r29, 0x00	; 0

	endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle

	// Should be 0 in all cases.
	return (rcode);
}
    4912:	ce 01       	movw	r24, r28
    4914:	df 91       	pop	r29
    4916:	cf 91       	pop	r28
    4918:	1f 91       	pop	r17
    491a:	0f 91       	pop	r16
    491c:	ff 90       	pop	r15
    491e:	ef 90       	pop	r14
    4920:	df 90       	pop	r13
    4922:	cf 90       	pop	r12
    4924:	bf 90       	pop	r11
    4926:	af 90       	pop	r10
    4928:	9f 90       	pop	r9
    492a:	8f 90       	pop	r8
    492c:	7f 90       	pop	r7
    492e:	6f 90       	pop	r6
    4930:	5f 90       	pop	r5
    4932:	4f 90       	pop	r4
    4934:	3f 90       	pop	r3
    4936:	2f 90       	pop	r2
    4938:	08 95       	ret
	uint8_t maxPacketSize = endpoint->maxPacketSize;

	// If maximum packet size is not set, return.
	if (!maxPacketSize) return 0xFE;

	max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value
    493a:	88 ee       	ldi	r24, 0xE8	; 232
    493c:	f7 01       	movw	r30, r14
    493e:	64 81       	ldd	r22, Z+4	; 0x04
    4940:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

	while (bytes_left)
    4944:	20 97       	sbiw	r28, 0x00	; 0
    4946:	09 f4       	brne	.+2      	; 0x494a <USB_write+0xb4>
    4948:	a1 c0       	rjmp	.+322    	; 0x4a8c <USB_write+0x1f6>
    494a:	21 2e       	mov	r2, r17
    494c:	33 24       	eor	r3, r3
    494e:	80 2f       	mov	r24, r16
    4950:	99 2d       	mov	r25, r9
    4952:	9c 01       	movw	r18, r24
    4954:	49 01       	movw	r8, r18
    4956:	2e 01       	movw	r4, r28
	{
		retry_count = 0;
		nak_count = 0;

		bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    4958:	82 01       	movw	r16, r4
    495a:	24 14       	cp	r2, r4
    495c:	35 04       	cpc	r3, r5
    495e:	08 f4       	brcc	.+2      	; 0x4962 <USB_write+0xcc>
    4960:	93 c0       	rjmp	.+294    	; 0x4a88 <USB_write+0x1f2>

		// Filling output FIFO
		max3421e_writeMultiple(MAX_REG_SNDFIFO, bytes_tosend, data_p);
    4962:	60 2e       	mov	r6, r16
    4964:	80 e1       	ldi	r24, 0x10	; 16
    4966:	60 2f       	mov	r22, r16
    4968:	a4 01       	movw	r20, r8
    496a:	0e 94 4c 2a 	call	0x5498	; 0x5498 <max3421e_writeMultiple>

		// Set number of bytes to send.
		max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    496e:	88 e3       	ldi	r24, 0x38	; 56
    4970:	60 2f       	mov	r22, r16
    4972:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

		// Dispatch packet.
		max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address));
    4976:	f7 01       	movw	r30, r14
    4978:	60 81       	ld	r22, Z
    497a:	60 62       	ori	r22, 0x20	; 32
    497c:	80 ef       	ldi	r24, 0xF0	; 240
    497e:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

		// Wait for completion.
		while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    4982:	88 ec       	ldi	r24, 0xC8	; 200
    4984:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    4988:	87 ff       	sbrs	r24, 7
    498a:	fb cf       	rjmp	.-10     	; 0x4982 <USB_write+0xec>

		// Clear IRQ.
		max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    498c:	88 ec       	ldi	r24, 0xC8	; 200
    498e:	60 e8       	ldi	r22, 0x80	; 128
    4990:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

		rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4994:	88 ef       	ldi	r24, 0xF8	; 248
    4996:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    499a:	28 2f       	mov	r18, r24
    499c:	2f 70       	andi	r18, 0x0F	; 15

		while (rcode && (timeout > millis()))
    499e:	09 f4       	brne	.+2      	; 0x49a2 <USB_write+0x10c>
    49a0:	65 c0       	rjmp	.+202    	; 0x4a6c <USB_write+0x1d6>
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    49a2:	80 91 88 06 	lds	r24, 0x0688
    49a6:	90 91 89 06 	lds	r25, 0x0689
    49aa:	a0 91 8a 06 	lds	r26, 0x068A
    49ae:	b0 91 8b 06 	lds	r27, 0x068B
    49b2:	01 96       	adiw	r24, 0x01	; 1
    49b4:	a1 1d       	adc	r26, r1
    49b6:	b1 1d       	adc	r27, r1
    49b8:	80 93 88 06 	sts	0x0688, r24
    49bc:	90 93 89 06 	sts	0x0689, r25
    49c0:	a0 93 8a 06 	sts	0x068A, r26
    49c4:	b0 93 8b 06 	sts	0x068B, r27
		// Clear IRQ.
		max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

		rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

		while (rcode && (timeout > millis()))
    49c8:	8a 15       	cp	r24, r10
    49ca:	9b 05       	cpc	r25, r11
    49cc:	ac 05       	cpc	r26, r12
    49ce:	bd 05       	cpc	r27, r13
    49d0:	08 f0       	brcs	.+2      	; 0x49d4 <USB_write+0x13e>
    49d2:	4c c0       	rjmp	.+152    	; 0x4a6c <USB_write+0x1d6>
    49d4:	77 24       	eor	r7, r7
    49d6:	c0 e0       	ldi	r28, 0x00	; 0
    49d8:	d0 e0       	ldi	r29, 0x00	; 0
		{
			switch (rcode)
    49da:	24 30       	cpi	r18, 0x04	; 4
    49dc:	31 f0       	breq	.+12     	; 0x49ea <USB_write+0x154>
    49de:	2e 30       	cpi	r18, 0x0E	; 14
    49e0:	09 f4       	brne	.+2      	; 0x49e4 <USB_write+0x14e>
    49e2:	4a c0       	rjmp	.+148    	; 0x4a78 <USB_write+0x1e2>
				{
					return (rcode); //return TIMEOUT
				}
				break;
			default:
				return (rcode);
    49e4:	c2 2f       	mov	r28, r18
    49e6:	d0 e0       	ldi	r29, 0x00	; 0
    49e8:	94 cf       	rjmp	.-216    	; 0x4912 <USB_write+0x7c>
		while (rcode && (timeout > millis()))
		{
			switch (rcode)
			{
			case hrNAK:
				nak_count++;
    49ea:	21 96       	adiw	r28, 0x01	; 1
				if (nak_limit && (nak_count == USB_NAK_LIMIT))
    49ec:	fd e7       	ldi	r31, 0x7D	; 125
    49ee:	c0 30       	cpi	r28, 0x00	; 0
    49f0:	df 07       	cpc	r29, r31
    49f2:	09 f4       	brne	.+2      	; 0x49f6 <USB_write+0x160>
    49f4:	56 c0       	rjmp	.+172    	; 0x4aa2 <USB_write+0x20c>
			default:
				return (rcode);
			}

			// Process NAK according to Host out NAK bug.
			max3421e_write(MAX_REG_SNDBC, 0);
    49f6:	88 e3       	ldi	r24, 0x38	; 56
    49f8:	60 e0       	ldi	r22, 0x00	; 0
    49fa:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
			max3421e_write(MAX_REG_SNDFIFO, *data_p);
    49fe:	80 e1       	ldi	r24, 0x10	; 16
    4a00:	f4 01       	movw	r30, r8
    4a02:	60 81       	ld	r22, Z
    4a04:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
			max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    4a08:	88 e3       	ldi	r24, 0x38	; 56
    4a0a:	66 2d       	mov	r22, r6
    4a0c:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
			max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address)); //dispatch packet
    4a10:	f7 01       	movw	r30, r14
    4a12:	60 81       	ld	r22, Z
    4a14:	60 62       	ori	r22, 0x20	; 32
    4a16:	80 ef       	ldi	r24, 0xF0	; 240
    4a18:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

			// Wait for the completion interrupt.
			while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    4a1c:	88 ec       	ldi	r24, 0xC8	; 200
    4a1e:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    4a22:	87 ff       	sbrs	r24, 7
    4a24:	fb cf       	rjmp	.-10     	; 0x4a1c <USB_write+0x186>

			// Clear interrupt.
			max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4a26:	88 ec       	ldi	r24, 0xC8	; 200
    4a28:	60 e8       	ldi	r22, 0x80	; 128
    4a2a:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4a2e:	88 ef       	ldi	r24, 0xF8	; 248
    4a30:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    4a34:	28 2f       	mov	r18, r24
    4a36:	2f 70       	andi	r18, 0x0F	; 15
		// Clear IRQ.
		max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

		rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

		while (rcode && (timeout > millis()))
    4a38:	c9 f0       	breq	.+50     	; 0x4a6c <USB_write+0x1d6>
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4a3a:	80 91 88 06 	lds	r24, 0x0688
    4a3e:	90 91 89 06 	lds	r25, 0x0689
    4a42:	a0 91 8a 06 	lds	r26, 0x068A
    4a46:	b0 91 8b 06 	lds	r27, 0x068B
    4a4a:	01 96       	adiw	r24, 0x01	; 1
    4a4c:	a1 1d       	adc	r26, r1
    4a4e:	b1 1d       	adc	r27, r1
    4a50:	80 93 88 06 	sts	0x0688, r24
    4a54:	90 93 89 06 	sts	0x0689, r25
    4a58:	a0 93 8a 06 	sts	0x068A, r26
    4a5c:	b0 93 8b 06 	sts	0x068B, r27
		// Clear IRQ.
		max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

		rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

		while (rcode && (timeout > millis()))
    4a60:	8a 15       	cp	r24, r10
    4a62:	9b 05       	cpc	r25, r11
    4a64:	ac 05       	cpc	r26, r12
    4a66:	bd 05       	cpc	r27, r13
    4a68:	08 f4       	brcc	.+2      	; 0x4a6c <USB_write+0x1d6>
    4a6a:	b7 cf       	rjmp	.-146    	; 0x49da <USB_write+0x144>
			max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
		}

		bytes_left -= bytes_tosend;
    4a6c:	40 1a       	sub	r4, r16
    4a6e:	51 0a       	sbc	r5, r17
	// If maximum packet size is not set, return.
	if (!maxPacketSize) return 0xFE;

	max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

	while (bytes_left)
    4a70:	e9 f0       	breq	.+58     	; 0x4aac <USB_write+0x216>

			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
		}

		bytes_left -= bytes_tosend;
		data_p += bytes_tosend;
    4a72:	80 0e       	add	r8, r16
    4a74:	91 1e       	adc	r9, r17
    4a76:	70 cf       	rjmp	.-288    	; 0x4958 <USB_write+0xc2>
				{
					return (rcode); //return NAK
				}
				break;
			case hrTIMEOUT:
				retry_count++;
    4a78:	73 94       	inc	r7
				if (retry_count == USB_RETRY_LIMIT)
    4a7a:	83 e0       	ldi	r24, 0x03	; 3
    4a7c:	78 16       	cp	r7, r24
    4a7e:	09 f0       	breq	.+2      	; 0x4a82 <USB_write+0x1ec>
    4a80:	ba cf       	rjmp	.-140    	; 0x49f6 <USB_write+0x160>
    4a82:	ce e0       	ldi	r28, 0x0E	; 14
    4a84:	d0 e0       	ldi	r29, 0x00	; 0
    4a86:	45 cf       	rjmp	.-374    	; 0x4912 <USB_write+0x7c>
	while (bytes_left)
	{
		retry_count = 0;
		nak_count = 0;

		bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    4a88:	81 01       	movw	r16, r2
    4a8a:	6b cf       	rjmp	.-298    	; 0x4962 <USB_write+0xcc>
	// If maximum packet size is not set, return.
	if (!maxPacketSize) return 0xFE;

	max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

	while (bytes_left)
    4a8c:	c0 e0       	ldi	r28, 0x00	; 0
    4a8e:	d0 e0       	ldi	r29, 0x00	; 0

		bytes_left -= bytes_tosend;
		data_p += bytes_tosend;
	}

	endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    4a90:	88 ef       	ldi	r24, 0xF8	; 248
    4a92:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    4a96:	85 fd       	sbrc	r24, 5
    4a98:	07 c0       	rjmp	.+14     	; 0x4aa8 <USB_write+0x212>
    4a9a:	80 e4       	ldi	r24, 0x40	; 64
    4a9c:	f7 01       	movw	r30, r14
    4a9e:	84 83       	std	Z+4, r24	; 0x04
    4aa0:	38 cf       	rjmp	.-400    	; 0x4912 <USB_write+0x7c>
		{
			switch (rcode)
			{
			case hrNAK:
				nak_count++;
				if (nak_limit && (nak_count == USB_NAK_LIMIT))
    4aa2:	c4 e0       	ldi	r28, 0x04	; 4
    4aa4:	d0 e0       	ldi	r29, 0x00	; 0
    4aa6:	35 cf       	rjmp	.-406    	; 0x4912 <USB_write+0x7c>

		bytes_left -= bytes_tosend;
		data_p += bytes_tosend;
	}

	endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    4aa8:	80 e8       	ldi	r24, 0x80	; 128
    4aaa:	f8 cf       	rjmp	.-16     	; 0x4a9c <USB_write+0x206>

			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
		}

		bytes_left -= bytes_tosend;
		data_p += bytes_tosend;
    4aac:	c2 2f       	mov	r28, r18
    4aae:	d0 e0       	ldi	r29, 0x00	; 0
    4ab0:	ef cf       	rjmp	.-34     	; 0x4a90 <USB_write+0x1fa>

00004ab2 <USB_bulkWrite>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int USB_bulkWrite(usb_device * device, uint16_t length, uint8_t * data)
{
    4ab2:	fc 01       	movw	r30, r24
    4ab4:	db 01       	movw	r26, r22
    4ab6:	9a 01       	movw	r18, r20
	return USB_write(device, &(device->bulk_out) , length, data);
    4ab8:	3e 96       	adiw	r30, 0x0e	; 14
    4aba:	bf 01       	movw	r22, r30
    4abc:	ad 01       	movw	r20, r26
    4abe:	0e 94 4b 24 	call	0x4896	; 0x4896 <USB_write>
}
    4ac2:	08 95       	ret

00004ac4 <usb_dispatchPacket>:

	return &(deviceTable[address]);
}

int usb_dispatchPacket(uint8_t token, usb_endpoint * endpoint, unsigned int nakLimit)
{
    4ac4:	8f 92       	push	r8
    4ac6:	9f 92       	push	r9
    4ac8:	af 92       	push	r10
    4aca:	bf 92       	push	r11
    4acc:	cf 92       	push	r12
    4ace:	df 92       	push	r13
    4ad0:	ef 92       	push	r14
    4ad2:	ff 92       	push	r15
    4ad4:	0f 93       	push	r16
    4ad6:	1f 93       	push	r17
    4ad8:	cf 93       	push	r28
    4ada:	df 93       	push	r29
    4adc:	c8 2e       	mov	r12, r24
    4ade:	5b 01       	movw	r10, r22
    4ae0:	4a 01       	movw	r8, r20
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4ae2:	80 91 88 06 	lds	r24, 0x0688
    4ae6:	90 91 89 06 	lds	r25, 0x0689
    4aea:	a0 91 8a 06 	lds	r26, 0x068A
    4aee:	b0 91 8b 06 	lds	r27, 0x068B
    4af2:	7c 01       	movw	r14, r24
    4af4:	8d 01       	movw	r16, r26
    4af6:	01 96       	adiw	r24, 0x01	; 1
    4af8:	a1 1d       	adc	r26, r1
    4afa:	b1 1d       	adc	r27, r1
	return &(deviceTable[address]);
}

int usb_dispatchPacket(uint8_t token, usb_endpoint * endpoint, unsigned int nakLimit)
{
	uint32_t timeout = millis() + USB_XFER_TIMEOUT;
    4afc:	29 e8       	ldi	r18, 0x89	; 137
    4afe:	33 e1       	ldi	r19, 0x13	; 19
    4b00:	40 e0       	ldi	r20, 0x00	; 0
    4b02:	50 e0       	ldi	r21, 0x00	; 0
    4b04:	e2 0e       	add	r14, r18
    4b06:	f3 1e       	adc	r15, r19
    4b08:	04 1f       	adc	r16, r20
    4b0a:	15 1f       	adc	r17, r21
    4b0c:	20 e0       	ldi	r18, 0x00	; 0
    4b0e:	c0 e0       	ldi	r28, 0x00	; 0
    4b10:	d0 e0       	ldi	r29, 0x00	; 0
    4b12:	dd 24       	eor	r13, r13
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4b14:	01 96       	adiw	r24, 0x01	; 1
    4b16:	a1 1d       	adc	r26, r1
    4b18:	b1 1d       	adc	r27, r1
    4b1a:	80 93 88 06 	sts	0x0688, r24
    4b1e:	90 93 89 06 	sts	0x0689, r25
    4b22:	a0 93 8a 06 	sts	0x068A, r26
    4b26:	b0 93 8b 06 	sts	0x068B, r27
	uint8_t tmpdata;
	uint8_t rcode = 0;
	unsigned int nak_count = 0;
	char retry_count = 0;

	while (timeout > millis())
    4b2a:	8e 15       	cp	r24, r14
    4b2c:	9f 05       	cpc	r25, r15
    4b2e:	a0 07       	cpc	r26, r16
    4b30:	b1 07       	cpc	r27, r17
    4b32:	08 f0       	brcs	.+2      	; 0x4b36 <usb_dispatchPacket+0x72>
    4b34:	4c c0       	rjmp	.+152    	; 0x4bce <usb_dispatchPacket+0x10a>
	{
		// Analyze transfer result.

		// Launch the transfer.
		max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
    4b36:	f5 01       	movw	r30, r10
    4b38:	60 81       	ld	r22, Z
    4b3a:	6c 29       	or	r22, r12
    4b3c:	80 ef       	ldi	r24, 0xF0	; 240
    4b3e:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4b42:	80 91 88 06 	lds	r24, 0x0688
    4b46:	90 91 89 06 	lds	r25, 0x0689
    4b4a:	a0 91 8a 06 	lds	r26, 0x068A
    4b4e:	b0 91 8b 06 	lds	r27, 0x068B
    4b52:	01 96       	adiw	r24, 0x01	; 1
    4b54:	a1 1d       	adc	r26, r1
    4b56:	b1 1d       	adc	r27, r1
    4b58:	80 93 88 06 	sts	0x0688, r24
    4b5c:	90 93 89 06 	sts	0x0689, r25
    4b60:	a0 93 8a 06 	sts	0x068A, r26
    4b64:	b0 93 8b 06 	sts	0x068B, r27
		// Launch the transfer.
		max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
		rcode = 0xff;

		// Wait for interrupt
		while (timeout > millis())
    4b68:	8e 15       	cp	r24, r14
    4b6a:	9f 05       	cpc	r25, r15
    4b6c:	a0 07       	cpc	r26, r16
    4b6e:	b1 07       	cpc	r27, r17
    4b70:	08 f0       	brcs	.+2      	; 0x4b74 <usb_dispatchPacket+0xb0>
    4b72:	50 c0       	rjmp	.+160    	; 0x4c14 <usb_dispatchPacket+0x150>
		{
			tmpdata = max3421e_read(MAX_REG_HIRQ);
    4b74:	88 ec       	ldi	r24, 0xC8	; 200
    4b76:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
			if (tmpdata & bmHXFRDNIRQ)
    4b7a:	87 ff       	sbrs	r24, 7
    4b7c:	e2 cf       	rjmp	.-60     	; 0x4b42 <usb_dispatchPacket+0x7e>
			{
				// Clear the interrupt.
				max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4b7e:	88 ec       	ldi	r24, 0xC8	; 200
    4b80:	60 e8       	ldi	r22, 0x80	; 128
    4b82:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
    4b86:	20 e0       	ldi	r18, 0x00	; 0
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    4b88:	80 91 88 06 	lds	r24, 0x0688
    4b8c:	90 91 89 06 	lds	r25, 0x0689
    4b90:	a0 91 8a 06 	lds	r26, 0x068A
    4b94:	b0 91 8b 06 	lds	r27, 0x068B
    4b98:	01 96       	adiw	r24, 0x01	; 1
    4b9a:	a1 1d       	adc	r26, r1
    4b9c:	b1 1d       	adc	r27, r1
    4b9e:	80 93 88 06 	sts	0x0688, r24
    4ba2:	90 93 89 06 	sts	0x0689, r25
    4ba6:	a0 93 8a 06 	sts	0x068A, r26
    4baa:	b0 93 8b 06 	sts	0x068B, r27
		// Exit if timeout.
		if (rcode != 0x00)
			return (rcode);

		// Wait for HRSL
		while (timeout > millis())
    4bae:	8e 15       	cp	r24, r14
    4bb0:	9f 05       	cpc	r25, r15
    4bb2:	a0 07       	cpc	r26, r16
    4bb4:	b1 07       	cpc	r27, r17
    4bb6:	38 f4       	brcc	.+14     	; 0x4bc6 <usb_dispatchPacket+0x102>
		{
			rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4bb8:	88 ef       	ldi	r24, 0xF8	; 248
    4bba:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    4bbe:	28 2f       	mov	r18, r24
    4bc0:	2f 70       	andi	r18, 0x0F	; 15
			if (rcode != hrBUSY)
    4bc2:	21 30       	cpi	r18, 0x01	; 1
    4bc4:	09 f3       	breq	.-62     	; 0x4b88 <usb_dispatchPacket+0xc4>
//			else
//				serialPrintf("busy!\n");
		}


		switch (rcode)
    4bc6:	24 30       	cpi	r18, 0x04	; 4
    4bc8:	f1 f0       	breq	.+60     	; 0x4c06 <usb_dispatchPacket+0x142>
    4bca:	2e 30       	cpi	r18, 0x0E	; 14
    4bcc:	79 f0       	breq	.+30     	; 0x4bec <usb_dispatchPacket+0x128>
			default:
				return (rcode);
		}
	}

	return (rcode);
    4bce:	30 e0       	ldi	r19, 0x00	; 0
}
    4bd0:	c9 01       	movw	r24, r18
    4bd2:	df 91       	pop	r29
    4bd4:	cf 91       	pop	r28
    4bd6:	1f 91       	pop	r17
    4bd8:	0f 91       	pop	r16
    4bda:	ff 90       	pop	r15
    4bdc:	ef 90       	pop	r14
    4bde:	df 90       	pop	r13
    4be0:	cf 90       	pop	r12
    4be2:	bf 90       	pop	r11
    4be4:	af 90       	pop	r10
    4be6:	9f 90       	pop	r9
    4be8:	8f 90       	pop	r8
    4bea:	08 95       	ret
				nak_count++;
				if (nak_count == nakLimit)
					return (rcode);
				break;
			case hrTIMEOUT:
				retry_count++;
    4bec:	d3 94       	inc	r13
				if (retry_count == USB_RETRY_LIMIT)
    4bee:	f3 e0       	ldi	r31, 0x03	; 3
    4bf0:	df 16       	cp	r13, r31
    4bf2:	99 f0       	breq	.+38     	; 0x4c1a <usb_dispatchPacket+0x156>
    4bf4:	80 91 88 06 	lds	r24, 0x0688
    4bf8:	90 91 89 06 	lds	r25, 0x0689
    4bfc:	a0 91 8a 06 	lds	r26, 0x068A
    4c00:	b0 91 8b 06 	lds	r27, 0x068B
    4c04:	87 cf       	rjmp	.-242    	; 0x4b14 <usb_dispatchPacket+0x50>


		switch (rcode)
		{
			case hrNAK:
				nak_count++;
    4c06:	21 96       	adiw	r28, 0x01	; 1
				if (nak_count == nakLimit)
    4c08:	c8 15       	cp	r28, r8
    4c0a:	d9 05       	cpc	r29, r9
    4c0c:	99 f7       	brne	.-26     	; 0x4bf4 <usb_dispatchPacket+0x130>
    4c0e:	24 e0       	ldi	r18, 0x04	; 4
    4c10:	30 e0       	ldi	r19, 0x00	; 0
    4c12:	de cf       	rjmp	.-68     	; 0x4bd0 <usb_dispatchPacket+0x10c>
		// Launch the transfer.
		max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
		rcode = 0xff;

		// Wait for interrupt
		while (timeout > millis())
    4c14:	2f ef       	ldi	r18, 0xFF	; 255
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	db cf       	rjmp	.-74     	; 0x4bd0 <usb_dispatchPacket+0x10c>
				if (nak_count == nakLimit)
					return (rcode);
				break;
			case hrTIMEOUT:
				retry_count++;
				if (retry_count == USB_RETRY_LIMIT)
    4c1a:	2e e0       	ldi	r18, 0x0E	; 14
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	d8 cf       	rjmp	.-80     	; 0x4bd0 <usb_dispatchPacket+0x10c>

00004c20 <USB_read>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int USB_read(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data, unsigned int nakLimit)
{
    4c20:	6f 92       	push	r6
    4c22:	7f 92       	push	r7
    4c24:	8f 92       	push	r8
    4c26:	9f 92       	push	r9
    4c28:	af 92       	push	r10
    4c2a:	bf 92       	push	r11
    4c2c:	cf 92       	push	r12
    4c2e:	df 92       	push	r13
    4c30:	ef 92       	push	r14
    4c32:	ff 92       	push	r15
    4c34:	0f 93       	push	r16
    4c36:	1f 93       	push	r17
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	fc 01       	movw	r30, r24
    4c3e:	7b 01       	movw	r14, r22
    4c40:	3a 01       	movw	r6, r20
    4c42:	69 01       	movw	r12, r18
    4c44:	58 01       	movw	r10, r16
	uint16_t rcode, bytesRead;
	uint16_t maxPacketSize = endpoint->maxPacketSize;
    4c46:	db 01       	movw	r26, r22
    4c48:	12 96       	adiw	r26, 0x02	; 2
    4c4a:	8d 90       	ld	r8, X+
    4c4c:	9c 90       	ld	r9, X
    4c4e:	13 97       	sbiw	r26, 0x03	; 3

	unsigned int totalTransferred = 0;

	// Set device address.
	max3421e_write(MAX_REG_PERADDR, device->address);
    4c50:	80 ee       	ldi	r24, 0xE0	; 224
    4c52:	60 81       	ld	r22, Z
    4c54:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

	// Set toggle value.
	max3421e_write(MAX_REG_HCTL, endpoint->receiveToggle);
    4c58:	88 ee       	ldi	r24, 0xE8	; 232
    4c5a:	f7 01       	movw	r30, r14
    4c5c:	65 81       	ldd	r22, Z+5	; 0x05
    4c5e:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
    4c62:	c0 e0       	ldi	r28, 0x00	; 0
    4c64:	d0 e0       	ldi	r29, 0x00	; 0

	while (1)
	{

		// Start IN transfer
		rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);
    4c66:	80 e0       	ldi	r24, 0x00	; 0
    4c68:	b7 01       	movw	r22, r14
    4c6a:	a5 01       	movw	r20, r10
    4c6c:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <usb_dispatchPacket>

		if (rcode)
    4c70:	89 2b       	or	r24, r25
    4c72:	d1 f5       	brne	.+116    	; 0x4ce8 <USB_read+0xc8>

			return -1;
		}

		// Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
		if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    4c74:	88 ec       	ldi	r24, 0xC8	; 200
    4c76:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    4c7a:	82 ff       	sbrs	r24, 2
    4c7c:	38 c0       	rjmp	.+112    	; 0x4cee <USB_read+0xce>
			// TODO: the absence of RCVDAVIRQ indicates a toggle error. Need to add handling for that.
			return -2;
		}

		// Obtain the number of bytes in FIFO.
		bytesRead = max3421e_read(MAX_REG_RCVBC);
    4c7e:	80 e3       	ldi	r24, 0x30	; 48
    4c80:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    4c84:	68 2f       	mov	r22, r24
    4c86:	08 2f       	mov	r16, r24
    4c88:	10 e0       	ldi	r17, 0x00	; 0

		// Read the data from the FIFO.
		data = max3421e_readMultiple(MAX_REG_RCVFIFO, bytesRead, data);
    4c8a:	88 e0       	ldi	r24, 0x08	; 8
    4c8c:	a6 01       	movw	r20, r12
    4c8e:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <max3421e_readMultiple>
    4c92:	6c 01       	movw	r12, r24

		// Clear the interrupt to free the buffer.
		max3421e_write(MAX_REG_HIRQ, bmRCVDAVIRQ);
    4c94:	88 ec       	ldi	r24, 0xC8	; 200
    4c96:	64 e0       	ldi	r22, 0x04	; 4
    4c98:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

		totalTransferred += bytesRead;
    4c9c:	c0 0f       	add	r28, r16
    4c9e:	d1 1f       	adc	r29, r17

		// Check if we're done reading. Either we've received a 'short' packet (<maxPacketSize), or the
		// desired number of bytes has been transferred.
		if ((bytesRead < maxPacketSize) || (totalTransferred >= length))
    4ca0:	08 15       	cp	r16, r8
    4ca2:	19 05       	cpc	r17, r9
    4ca4:	18 f0       	brcs	.+6      	; 0x4cac <USB_read+0x8c>
    4ca6:	c6 15       	cp	r28, r6
    4ca8:	d7 05       	cpc	r29, r7
    4caa:	e8 f2       	brcs	.-70     	; 0x4c66 <USB_read+0x46>
		{
			// Remember the toggle value for the next transfer.
			if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
    4cac:	88 ef       	ldi	r24, 0xF8	; 248
    4cae:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    4cb2:	84 ff       	sbrs	r24, 4
    4cb4:	15 c0       	rjmp	.+42     	; 0x4ce0 <USB_read+0xc0>
				endpoint->receiveToggle = bmRCVTOG1;
    4cb6:	80 e2       	ldi	r24, 0x20	; 32
    4cb8:	d7 01       	movw	r26, r14
    4cba:	15 96       	adiw	r26, 0x05	; 5
    4cbc:	8c 93       	st	X, r24
			break;
		}
	}

	// Report success.
	return totalTransferred;
    4cbe:	9e 01       	movw	r18, r28
}
    4cc0:	c9 01       	movw	r24, r18
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	df 90       	pop	r13
    4cd0:	cf 90       	pop	r12
    4cd2:	bf 90       	pop	r11
    4cd4:	af 90       	pop	r10
    4cd6:	9f 90       	pop	r9
    4cd8:	8f 90       	pop	r8
    4cda:	7f 90       	pop	r7
    4cdc:	6f 90       	pop	r6
    4cde:	08 95       	ret
		{
			// Remember the toggle value for the next transfer.
			if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
				endpoint->receiveToggle = bmRCVTOG1;
			else
				endpoint->receiveToggle = bmRCVTOG0;
    4ce0:	80 e1       	ldi	r24, 0x10	; 16
    4ce2:	f7 01       	movw	r30, r14
    4ce4:	85 83       	std	Z+5, r24	; 0x05
    4ce6:	eb cf       	rjmp	.-42     	; 0x4cbe <USB_read+0x9e>
	{

		// Start IN transfer
		rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);

		if (rcode)
    4ce8:	2f ef       	ldi	r18, 0xFF	; 255
    4cea:	3f ef       	ldi	r19, 0xFF	; 255
    4cec:	e9 cf       	rjmp	.-46     	; 0x4cc0 <USB_read+0xa0>

			return -1;
		}

		// Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
		if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    4cee:	2e ef       	ldi	r18, 0xFE	; 254
    4cf0:	3f ef       	ldi	r19, 0xFF	; 255
    4cf2:	e6 cf       	rjmp	.-52     	; 0x4cc0 <USB_read+0xa0>

00004cf4 <USB_ctrlData>:
 * @param direction true for input, false for output.
 * @param length number of bytes to transfer.
 * @param data data buffer.
 */
uint8_t USB_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
    4cf4:	0f 93       	push	r16
    4cf6:	1f 93       	push	r17
    4cf8:	fc 01       	movw	r30, r24
	if (direction)
    4cfa:	66 23       	and	r22, r22
    4cfc:	51 f4       	brne	.+20     	; 0x4d12 <USB_ctrlData+0x1e>
		return USB_read(device, &(device->control), length, data, USB_NAK_LIMIT);

	} else
	{
		// OUT transfer
		device->control.sendToggle = bmSNDTOG1;
    4cfe:	80 e8       	ldi	r24, 0x80	; 128
    4d00:	86 83       	std	Z+6, r24	; 0x06
		return USB_write(device, &(device->control), length, data);
    4d02:	cf 01       	movw	r24, r30
    4d04:	32 96       	adiw	r30, 0x02	; 2
    4d06:	bf 01       	movw	r22, r30
    4d08:	0e 94 4b 24 	call	0x4896	; 0x4896 <USB_write>
	}
}
    4d0c:	1f 91       	pop	r17
    4d0e:	0f 91       	pop	r16
    4d10:	08 95       	ret
uint8_t USB_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
	if (direction)
	{
		// IN transfer
		device->control.receiveToggle = bmRCVTOG1;
    4d12:	80 e2       	ldi	r24, 0x20	; 32
    4d14:	87 83       	std	Z+7, r24	; 0x07
		return USB_read(device, &(device->control), length, data, USB_NAK_LIMIT);
    4d16:	cf 01       	movw	r24, r30
    4d18:	32 96       	adiw	r30, 0x02	; 2
    4d1a:	bf 01       	movw	r22, r30
    4d1c:	00 e0       	ldi	r16, 0x00	; 0
    4d1e:	1d e7       	ldi	r17, 0x7D	; 125
    4d20:	0e 94 10 26 	call	0x4c20	; 0x4c20 <USB_read>
	{
		// OUT transfer
		device->control.sendToggle = bmSNDTOG1;
		return USB_write(device, &(device->control), length, data);
	}
}
    4d24:	1f 91       	pop	r17
    4d26:	0f 91       	pop	r16
    4d28:	08 95       	ret

00004d2a <USB_controlRequest>:
		uint8_t valueLow,
		uint8_t valueHigh,
		uint16_t index,
		uint16_t length,
		uint8_t * data)
{
    4d2a:	5f 92       	push	r5
    4d2c:	6f 92       	push	r6
    4d2e:	7f 92       	push	r7
    4d30:	8f 92       	push	r8
    4d32:	9f 92       	push	r9
    4d34:	af 92       	push	r10
    4d36:	bf 92       	push	r11
    4d38:	cf 92       	push	r12
    4d3a:	df 92       	push	r13
    4d3c:	ef 92       	push	r14
    4d3e:	ff 92       	push	r15
    4d40:	0f 93       	push	r16
    4d42:	1f 93       	push	r17
    4d44:	df 93       	push	r29
    4d46:	cf 93       	push	r28
    4d48:	cd b7       	in	r28, 0x3d	; 61
    4d4a:	de b7       	in	r29, 0x3e	; 62
    4d4c:	28 97       	sbiw	r28, 0x08	; 8
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	f8 94       	cli
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	cd bf       	out	0x3d, r28	; 61
    4d58:	3c 01       	movw	r6, r24
    4d5a:	56 2e       	mov	r5, r22
    4d5c:	14 2f       	mov	r17, r20
    4d5e:	82 2e       	mov	r8, r18
	boolean direction = false; //request direction, IN or OUT
	uint8_t rcode;
	usb_setupPacket setup_pkt;

	// Set device address.
	max3421e_write(MAX_REG_PERADDR, device->address);
    4d60:	80 ee       	ldi	r24, 0xE0	; 224
    4d62:	f3 01       	movw	r30, r6
    4d64:	60 81       	ld	r22, Z
    4d66:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

	if (requestType & 0x80)
		direction = true; //determine request direction

	// Build setup packet.
	setup_pkt.bmRequestType = requestType;
    4d6a:	59 82       	std	Y+1, r5	; 0x01
	setup_pkt.bRequest = request;
    4d6c:	1a 83       	std	Y+2, r17	; 0x02
	setup_pkt.wValue = valueLow | (valueHigh << 8);
    4d6e:	90 2f       	mov	r25, r16
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	99 24       	eor	r9, r9
    4d74:	88 29       	or	r24, r8
    4d76:	99 29       	or	r25, r9
    4d78:	9c 83       	std	Y+4, r25	; 0x04
    4d7a:	8b 83       	std	Y+3, r24	; 0x03
	setup_pkt.wIndex = index;
    4d7c:	fe 82       	std	Y+6, r15	; 0x06
    4d7e:	ed 82       	std	Y+5, r14	; 0x05
	setup_pkt.wLength = length;
    4d80:	d8 86       	std	Y+8, r13	; 0x08
    4d82:	cf 82       	std	Y+7, r12	; 0x07

	// Write setup packet to the FIFO and dispatch
	max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
    4d84:	80 e2       	ldi	r24, 0x20	; 32
    4d86:	68 e0       	ldi	r22, 0x08	; 8
    4d88:	ae 01       	movw	r20, r28
    4d8a:	4f 5f       	subi	r20, 0xFF	; 255
    4d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d8e:	0e 94 4c 2a 	call	0x5498	; 0x5498 <max3421e_writeMultiple>
	rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);
    4d92:	83 01       	movw	r16, r6
    4d94:	0e 5f       	subi	r16, 0xFE	; 254
    4d96:	1f 4f       	sbci	r17, 0xFF	; 255
    4d98:	80 e1       	ldi	r24, 0x10	; 16
    4d9a:	b8 01       	movw	r22, r16
    4d9c:	40 e0       	ldi	r20, 0x00	; 0
    4d9e:	5d e7       	ldi	r21, 0x7D	; 125
    4da0:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <usb_dispatchPacket>

	// Print error in case of failure.
	if (rcode)
    4da4:	88 23       	and	r24, r24
    4da6:	c9 f0       	breq	.+50     	; 0x4dda <USB_controlRequest+0xb0>
    4da8:	2f ef       	ldi	r18, 0xFF	; 255
    4daa:	3f ef       	ldi	r19, 0xFF	; 255

	if (rcode)
		return -3;
	else
		return 0;
}
    4dac:	c9 01       	movw	r24, r18
    4dae:	28 96       	adiw	r28, 0x08	; 8
    4db0:	0f b6       	in	r0, 0x3f	; 63
    4db2:	f8 94       	cli
    4db4:	de bf       	out	0x3e, r29	; 62
    4db6:	0f be       	out	0x3f, r0	; 63
    4db8:	cd bf       	out	0x3d, r28	; 61
    4dba:	cf 91       	pop	r28
    4dbc:	df 91       	pop	r29
    4dbe:	1f 91       	pop	r17
    4dc0:	0f 91       	pop	r16
    4dc2:	ff 90       	pop	r15
    4dc4:	ef 90       	pop	r14
    4dc6:	df 90       	pop	r13
    4dc8:	cf 90       	pop	r12
    4dca:	bf 90       	pop	r11
    4dcc:	af 90       	pop	r10
    4dce:	9f 90       	pop	r9
    4dd0:	8f 90       	pop	r8
    4dd2:	7f 90       	pop	r7
    4dd4:	6f 90       	pop	r6
    4dd6:	5f 90       	pop	r5
    4dd8:	08 95       	ret
	// Write setup packet to the FIFO and dispatch
	max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
	rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);

	// Print error in case of failure.
	if (rcode)
    4dda:	f5 2c       	mov	r15, r5
    4ddc:	ff 1c       	adc	r15, r15
    4dde:	ff 24       	eor	r15, r15
    4de0:	ff 1c       	adc	r15, r15
//		serialPrintf("Setup packet error: 0x%02x\n", rcode);
		return -1;
	}

	// Data stage, if present
	if (data != NULL)
    4de2:	a1 14       	cp	r10, r1
    4de4:	b1 04       	cpc	r11, r1
    4de6:	31 f0       	breq	.+12     	; 0x4df4 <USB_controlRequest+0xca>
	{
		rcode = USB_ctrlData(device, direction, length, data);
    4de8:	c3 01       	movw	r24, r6
    4dea:	6f 2d       	mov	r22, r15
    4dec:	a6 01       	movw	r20, r12
    4dee:	95 01       	movw	r18, r10
    4df0:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <USB_ctrlData>
			return -2;
		}
	}

	// Status stage.
	if (direction)
    4df4:	ff 20       	and	r15, r15
    4df6:	59 f0       	breq	.+22     	; 0x4e0e <USB_controlRequest+0xe4>
		rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
    4df8:	80 ea       	ldi	r24, 0xA0	; 160
    4dfa:	b8 01       	movw	r22, r16
    4dfc:	40 e0       	ldi	r20, 0x00	; 0
    4dfe:	5d e7       	ldi	r21, 0x7D	; 125
    4e00:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <usb_dispatchPacket>
	else
		rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);

	if (rcode)
    4e04:	88 23       	and	r24, r24
    4e06:	51 f4       	brne	.+20     	; 0x4e1c <USB_controlRequest+0xf2>
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    4e0c:	cf cf       	rjmp	.-98     	; 0x4dac <USB_controlRequest+0x82>

	// Status stage.
	if (direction)
		rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
	else
		rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);
    4e0e:	80 e8       	ldi	r24, 0x80	; 128
    4e10:	b8 01       	movw	r22, r16
    4e12:	40 e0       	ldi	r20, 0x00	; 0
    4e14:	5d e7       	ldi	r21, 0x7D	; 125
    4e16:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <usb_dispatchPacket>
    4e1a:	f4 cf       	rjmp	.-24     	; 0x4e04 <USB_controlRequest+0xda>

	if (rcode)
    4e1c:	2d ef       	ldi	r18, 0xFD	; 253
    4e1e:	3f ef       	ldi	r19, 0xFF	; 255
    4e20:	c5 cf       	rjmp	.-118    	; 0x4dac <USB_controlRequest+0x82>

00004e22 <USB_setConfiguration>:
 * @param device USB device
 * @param configuration configuration number to switch to
 * @param error code. Negative on error or zero on success.
 */
int USB_setConfiguration(usb_device * device, uint8_t configuration)
{
    4e22:	af 92       	push	r10
    4e24:	bf 92       	push	r11
    4e26:	cf 92       	push	r12
    4e28:	df 92       	push	r13
    4e2a:	ef 92       	push	r14
    4e2c:	ff 92       	push	r15
    4e2e:	0f 93       	push	r16
    4e30:	26 2f       	mov	r18, r22
    return(USB_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, configuration, 0x00, 0x0000, 0x0000, NULL));
    4e32:	60 e0       	ldi	r22, 0x00	; 0
    4e34:	49 e0       	ldi	r20, 0x09	; 9
    4e36:	00 e0       	ldi	r16, 0x00	; 0
    4e38:	ee 24       	eor	r14, r14
    4e3a:	ff 24       	eor	r15, r15
    4e3c:	cc 24       	eor	r12, r12
    4e3e:	dd 24       	eor	r13, r13
    4e40:	aa 24       	eor	r10, r10
    4e42:	bb 24       	eor	r11, r11
    4e44:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <USB_controlRequest>
}
    4e48:	0f 91       	pop	r16
    4e4a:	ff 90       	pop	r15
    4e4c:	ef 90       	pop	r14
    4e4e:	df 90       	pop	r13
    4e50:	cf 90       	pop	r12
    4e52:	bf 90       	pop	r11
    4e54:	af 90       	pop	r10
    4e56:	08 95       	ret

00004e58 <USB_setAddress>:
 * @param device the 'zero' usb device (address 0, endpoint 0)
 * @param address the address to set for the newly connected device
 * @return 0 in case of success, error code otherwise
 */
int USB_setAddress(usb_device * device, uint8_t address)
{
    4e58:	af 92       	push	r10
    4e5a:	bf 92       	push	r11
    4e5c:	cf 92       	push	r12
    4e5e:	df 92       	push	r13
    4e60:	ef 92       	push	r14
    4e62:	ff 92       	push	r15
    4e64:	0f 93       	push	r16
    4e66:	26 2f       	mov	r18, r22
    return(USB_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	45 e0       	ldi	r20, 0x05	; 5
    4e6c:	00 e0       	ldi	r16, 0x00	; 0
    4e6e:	ee 24       	eor	r14, r14
    4e70:	ff 24       	eor	r15, r15
    4e72:	cc 24       	eor	r12, r12
    4e74:	dd 24       	eor	r13, r13
    4e76:	aa 24       	eor	r10, r10
    4e78:	bb 24       	eor	r11, r11
    4e7a:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <USB_controlRequest>
}
    4e7e:	0f 91       	pop	r16
    4e80:	ff 90       	pop	r15
    4e82:	ef 90       	pop	r14
    4e84:	df 90       	pop	r13
    4e86:	cf 90       	pop	r12
    4e88:	bf 90       	pop	r11
    4e8a:	af 90       	pop	r10
    4e8c:	08 95       	ret

00004e8e <USB_getConfigurationDescriptor>:
 * @param conf configuration number
 * @param length length of the data buffer. This method will not write beyond this boundary.
 * @return number of bytes read, or negative number in case of error.
 */
int USB_getConfigurationDescriptor(usb_device * device, uint8_t conf, uint16_t length, uint8_t * data)
{
    4e8e:	4f 92       	push	r4
    4e90:	5f 92       	push	r5
    4e92:	6f 92       	push	r6
    4e94:	7f 92       	push	r7
    4e96:	8f 92       	push	r8
    4e98:	9f 92       	push	r9
    4e9a:	af 92       	push	r10
    4e9c:	bf 92       	push	r11
    4e9e:	cf 92       	push	r12
    4ea0:	df 92       	push	r13
    4ea2:	ef 92       	push	r14
    4ea4:	ff 92       	push	r15
    4ea6:	0f 93       	push	r16
    4ea8:	1f 93       	push	r17
    4eaa:	cf 93       	push	r28
    4eac:	df 93       	push	r29
    4eae:	4c 01       	movw	r8, r24
    4eb0:	16 2f       	mov	r17, r22
    4eb2:	3a 01       	movw	r6, r20
    4eb4:	e9 01       	movw	r28, r18
	uint16_t descriptorLength;
	int rcode;

	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
    4eb6:	60 e8       	ldi	r22, 0x80	; 128
    4eb8:	46 e0       	ldi	r20, 0x06	; 6
    4eba:	21 2f       	mov	r18, r17
    4ebc:	02 e0       	ldi	r16, 0x02	; 2
    4ebe:	ee 24       	eor	r14, r14
    4ec0:	ff 24       	eor	r15, r15
    4ec2:	34 e0       	ldi	r19, 0x04	; 4
    4ec4:	c3 2e       	mov	r12, r19
    4ec6:	d1 2c       	mov	r13, r1
    4ec8:	5e 01       	movw	r10, r28
    4eca:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <USB_controlRequest>
	if (rcode) return -1;
    4ece:	89 2b       	or	r24, r25
    4ed0:	a1 f0       	breq	.+40     	; 0x4efa <USB_getConfigurationDescriptor+0x6c>
    4ed2:	2f ef       	ldi	r18, 0xFF	; 255
    4ed4:	3f ef       	ldi	r19, 0xFF	; 255
	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
	if (rcode) return -2;

	return length;
}
    4ed6:	c9 01       	movw	r24, r18
    4ed8:	df 91       	pop	r29
    4eda:	cf 91       	pop	r28
    4edc:	1f 91       	pop	r17
    4ede:	0f 91       	pop	r16
    4ee0:	ff 90       	pop	r15
    4ee2:	ef 90       	pop	r14
    4ee4:	df 90       	pop	r13
    4ee6:	cf 90       	pop	r12
    4ee8:	bf 90       	pop	r11
    4eea:	af 90       	pop	r10
    4eec:	9f 90       	pop	r9
    4eee:	8f 90       	pop	r8
    4ef0:	7f 90       	pop	r7
    4ef2:	6f 90       	pop	r6
    4ef4:	5f 90       	pop	r5
    4ef6:	4f 90       	pop	r4
    4ef8:	08 95       	ret
	uint16_t descriptorLength;
	int rcode;

	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
	if (rcode) return -1;
    4efa:	9b 81       	ldd	r25, Y+3	; 0x03
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	2a 81       	ldd	r18, Y+2	; 0x02
    4f00:	42 2e       	mov	r4, r18
    4f02:	55 24       	eor	r5, r5
    4f04:	48 2a       	or	r4, r24
    4f06:	59 2a       	or	r5, r25
    4f08:	64 14       	cp	r6, r4
    4f0a:	75 04       	cpc	r7, r5
    4f0c:	08 f4       	brcc	.+2      	; 0x4f10 <USB_getConfigurationDescriptor+0x82>
    4f0e:	23 01       	movw	r4, r6

	descriptorLength = (data[3] << 8) | data[2];
	if (descriptorLength<length) length = descriptorLength;

	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
    4f10:	c4 01       	movw	r24, r8
    4f12:	60 e8       	ldi	r22, 0x80	; 128
    4f14:	46 e0       	ldi	r20, 0x06	; 6
    4f16:	21 2f       	mov	r18, r17
    4f18:	02 e0       	ldi	r16, 0x02	; 2
    4f1a:	ee 24       	eor	r14, r14
    4f1c:	ff 24       	eor	r15, r15
    4f1e:	62 01       	movw	r12, r4
    4f20:	5e 01       	movw	r10, r28
    4f22:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <USB_controlRequest>
	if (rcode) return -2;
    4f26:	89 2b       	or	r24, r25
    4f28:	11 f4       	brne	.+4      	; 0x4f2e <USB_getConfigurationDescriptor+0xa0>

	return length;
    4f2a:	92 01       	movw	r18, r4
    4f2c:	d4 cf       	rjmp	.-88     	; 0x4ed6 <USB_getConfigurationDescriptor+0x48>
	descriptorLength = (data[3] << 8) | data[2];
	if (descriptorLength<length) length = descriptorLength;

	// Read the length of the configuration descriptor.
	rcode = (USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
	if (rcode) return -2;
    4f2e:	2e ef       	ldi	r18, 0xFE	; 254
    4f30:	3f ef       	ldi	r19, 0xFF	; 255
    4f32:	d1 cf       	rjmp	.-94     	; 0x4ed6 <USB_getConfigurationDescriptor+0x48>

00004f34 <USB_getDeviceDescriptor>:
 * @param device USB device
 * @param descriptor pointer to a usb_deviceDescriptor record that will be filled with the requested data.
 * @return 0 in case of success, error code otherwise
 */
int USB_getDeviceDescriptor(usb_device * device, usb_deviceDescriptor * descriptor)
{
    4f34:	af 92       	push	r10
    4f36:	bf 92       	push	r11
    4f38:	cf 92       	push	r12
    4f3a:	df 92       	push	r13
    4f3c:	ef 92       	push	r14
    4f3e:	ff 92       	push	r15
    4f40:	0f 93       	push	r16
    4f42:	5b 01       	movw	r10, r22
	return(USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, sizeof(usb_deviceDescriptor), (uint8_t *)descriptor));
    4f44:	60 e8       	ldi	r22, 0x80	; 128
    4f46:	46 e0       	ldi	r20, 0x06	; 6
    4f48:	20 e0       	ldi	r18, 0x00	; 0
    4f4a:	01 e0       	ldi	r16, 0x01	; 1
    4f4c:	ee 24       	eor	r14, r14
    4f4e:	ff 24       	eor	r15, r15
    4f50:	52 e1       	ldi	r21, 0x12	; 18
    4f52:	c5 2e       	mov	r12, r21
    4f54:	d1 2c       	mov	r13, r1
    4f56:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <USB_controlRequest>
}
    4f5a:	0f 91       	pop	r16
    4f5c:	ff 90       	pop	r15
    4f5e:	ef 90       	pop	r14
    4f60:	df 90       	pop	r13
    4f62:	cf 90       	pop	r12
    4f64:	bf 90       	pop	r11
    4f66:	af 90       	pop	r10
    4f68:	08 95       	ret

00004f6a <USB_getString>:
 * @param length buffer length.
 * @param str target buffer.
 * @return 0 on success, error code otherwise.
 */
int USB_getString(usb_device * device, uint8_t index, uint8_t languageId, uint16_t length, char * str)
{
    4f6a:	2f 92       	push	r2
    4f6c:	3f 92       	push	r3
    4f6e:	4f 92       	push	r4
    4f70:	5f 92       	push	r5
    4f72:	6f 92       	push	r6
    4f74:	7f 92       	push	r7
    4f76:	8f 92       	push	r8
    4f78:	9f 92       	push	r9
    4f7a:	af 92       	push	r10
    4f7c:	bf 92       	push	r11
    4f7e:	cf 92       	push	r12
    4f80:	df 92       	push	r13
    4f82:	ef 92       	push	r14
    4f84:	ff 92       	push	r15
    4f86:	0f 93       	push	r16
    4f88:	1f 93       	push	r17
    4f8a:	df 93       	push	r29
    4f8c:	cf 93       	push	r28
    4f8e:	0f 92       	push	r0
    4f90:	cd b7       	in	r28, 0x3d	; 61
    4f92:	de b7       	in	r29, 0x3e	; 62
    4f94:	3c 01       	movw	r6, r24
    4f96:	36 2e       	mov	r3, r22
    4f98:	24 2e       	mov	r2, r20
    4f9a:	49 01       	movw	r8, r18
    4f9c:	28 01       	movw	r4, r16
	uint8_t stringLength = 0;
    4f9e:	19 82       	std	Y+1, r1	; 0x01
	int i, ret = 0;

    // Get string length;
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    4fa0:	60 e8       	ldi	r22, 0x80	; 128
    4fa2:	46 e0       	ldi	r20, 0x06	; 6
    4fa4:	23 2d       	mov	r18, r3
    4fa6:	03 e0       	ldi	r16, 0x03	; 3
    4fa8:	e2 2c       	mov	r14, r2
    4faa:	ff 24       	eor	r15, r15
    4fac:	71 e0       	ldi	r23, 0x01	; 1
    4fae:	c7 2e       	mov	r12, r23
    4fb0:	d1 2c       	mov	r13, r1
    4fb2:	5e 01       	movw	r10, r28
    4fb4:	08 94       	sec
    4fb6:	a1 1c       	adc	r10, r1
    4fb8:	b1 1c       	adc	r11, r1
    4fba:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <USB_controlRequest>
    if (ret<0) return -1;
    4fbe:	97 ff       	sbrs	r25, 7
    4fc0:	17 c0       	rjmp	.+46     	; 0x4ff0 <USB_getString+0x86>
    4fc2:	2f ef       	ldi	r18, 0xFF	; 255
    4fc4:	3f ef       	ldi	r19, 0xFF	; 255
	stringLength = (stringLength - 2) / 2;
	for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
	str[stringLength] = 0;

	return 0;
}
    4fc6:	c9 01       	movw	r24, r18
    4fc8:	0f 90       	pop	r0
    4fca:	cf 91       	pop	r28
    4fcc:	df 91       	pop	r29
    4fce:	1f 91       	pop	r17
    4fd0:	0f 91       	pop	r16
    4fd2:	ff 90       	pop	r15
    4fd4:	ef 90       	pop	r14
    4fd6:	df 90       	pop	r13
    4fd8:	cf 90       	pop	r12
    4fda:	bf 90       	pop	r11
    4fdc:	af 90       	pop	r10
    4fde:	9f 90       	pop	r9
    4fe0:	8f 90       	pop	r8
    4fe2:	7f 90       	pop	r7
    4fe4:	6f 90       	pop	r6
    4fe6:	5f 90       	pop	r5
    4fe8:	4f 90       	pop	r4
    4fea:	3f 90       	pop	r3
    4fec:	2f 90       	pop	r2
    4fee:	08 95       	ret
    // Get string length;
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    4ff0:	c9 80       	ldd	r12, Y+1	; 0x01
    4ff2:	8c 2d       	mov	r24, r12
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	88 16       	cp	r8, r24
    4ff8:	99 06       	cpc	r9, r25
    4ffa:	80 f1       	brcs	.+96     	; 0x505c <USB_getString+0xf2>

	// Get the whole thing.
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    4ffc:	c3 01       	movw	r24, r6
    4ffe:	60 e8       	ldi	r22, 0x80	; 128
    5000:	46 e0       	ldi	r20, 0x06	; 6
    5002:	23 2d       	mov	r18, r3
    5004:	03 e0       	ldi	r16, 0x03	; 3
    5006:	e2 2c       	mov	r14, r2
    5008:	ff 24       	eor	r15, r15
    500a:	dd 24       	eor	r13, r13
    500c:	52 01       	movw	r10, r4
    500e:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <USB_controlRequest>
    if (ret<0) return -2;
    5012:	97 fd       	sbrc	r25, 7
    5014:	26 c0       	rjmp	.+76     	; 0x5062 <USB_getString+0xf8>

	// Convert to 8-bit ASCII
	stringLength = (stringLength - 2) / 2;
    5016:	89 81       	ldd	r24, Y+1	; 0x01
    5018:	28 2f       	mov	r18, r24
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	c9 01       	movw	r24, r18
    501e:	02 97       	sbiw	r24, 0x02	; 2
    5020:	97 fd       	sbrc	r25, 7
    5022:	22 c0       	rjmp	.+68     	; 0x5068 <USB_getString+0xfe>
    5024:	95 95       	asr	r25
    5026:	87 95       	ror	r24
    5028:	89 83       	std	Y+1, r24	; 0x01
	for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
    502a:	88 23       	and	r24, r24
    502c:	01 f1       	breq	.+64     	; 0x506e <USB_getString+0x104>
    502e:	b2 01       	movw	r22, r4
    5030:	f2 01       	movw	r30, r4
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	48 2f       	mov	r20, r24
    5038:	50 e0       	ldi	r21, 0x00	; 0
    503a:	2f 5f       	subi	r18, 0xFF	; 255
    503c:	3f 4f       	sbci	r19, 0xFF	; 255
    503e:	82 81       	ldd	r24, Z+2	; 0x02
    5040:	db 01       	movw	r26, r22
    5042:	8d 93       	st	X+, r24
    5044:	bd 01       	movw	r22, r26
    5046:	32 96       	adiw	r30, 0x02	; 2
    5048:	da 01       	movw	r26, r20
    504a:	24 17       	cp	r18, r20
    504c:	35 07       	cpc	r19, r21
    504e:	ac f3       	brlt	.-22     	; 0x503a <USB_getString+0xd0>
	str[stringLength] = 0;
    5050:	a4 0d       	add	r26, r4
    5052:	b5 1d       	adc	r27, r5
    5054:	1c 92       	st	X, r1
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	b5 cf       	rjmp	.-150    	; 0x4fc6 <USB_getString+0x5c>
    // Get string length;
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    505c:	c8 2c       	mov	r12, r8
    505e:	89 82       	std	Y+1, r8	; 0x01
    5060:	cd cf       	rjmp	.-102    	; 0x4ffc <USB_getString+0x92>

	// Get the whole thing.
	ret = USB_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    if (ret<0) return -2;
    5062:	2e ef       	ldi	r18, 0xFE	; 254
    5064:	3f ef       	ldi	r19, 0xFF	; 255
    5066:	af cf       	rjmp	.-162    	; 0x4fc6 <USB_getString+0x5c>

	// Convert to 8-bit ASCII
	stringLength = (stringLength - 2) / 2;
    5068:	c9 01       	movw	r24, r18
    506a:	01 97       	sbiw	r24, 0x01	; 1
    506c:	db cf       	rjmp	.-74     	; 0x5024 <USB_getString+0xba>
    506e:	a8 2f       	mov	r26, r24
    5070:	b0 e0       	ldi	r27, 0x00	; 0
    5072:	ee cf       	rjmp	.-36     	; 0x5050 <USB_getString+0xe6>

00005074 <USB_initDevice>:
 * @param USB device
 * @param configuration configuration to switch to
 * @return negative error code or zero on success.
 */
int USB_initDevice(usb_device * device, int configuration)
{
    5074:	ef 92       	push	r14
    5076:	ff 92       	push	r15
    5078:	0f 93       	push	r16
    507a:	1f 93       	push	r17
    507c:	df 93       	push	r29
    507e:	cf 93       	push	r28
    5080:	00 d0       	rcall	.+0      	; 0x5082 <USB_initDevice+0xe>
    5082:	0f 92       	push	r0
    5084:	cd b7       	in	r28, 0x3d	; 61
    5086:	de b7       	in	r29, 0x3e	; 62
    5088:	7c 01       	movw	r14, r24
	char buf[4];

	uint8_t rcode;

	// Set the configuration for this USB device.
	rcode = USB_setConfiguration(device, configuration);
    508a:	0e 94 11 27 	call	0x4e22	; 0x4e22 <USB_setConfiguration>
	if (rcode<0) return rcode;

	// Get the first supported language.
	rcode = USB_getString(device, 0, 0, 4, buf);
    508e:	c7 01       	movw	r24, r14
    5090:	60 e0       	ldi	r22, 0x00	; 0
    5092:	40 e0       	ldi	r20, 0x00	; 0
    5094:	24 e0       	ldi	r18, 0x04	; 4
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	8e 01       	movw	r16, r28
    509a:	0f 5f       	subi	r16, 0xFF	; 255
    509c:	1f 4f       	sbci	r17, 0xFF	; 255
    509e:	0e 94 b5 27 	call	0x4f6a	; 0x4f6a <USB_getString>
	if (rcode<0) return rcode;
    device->firstStringLanguage = (buf[3] << 8) | buf[2];
    50a2:	3c 81       	ldd	r19, Y+4	; 0x04
    50a4:	20 e0       	ldi	r18, 0x00	; 0
    50a6:	4b 81       	ldd	r20, Y+3	; 0x03
    50a8:	50 e0       	ldi	r21, 0x00	; 0
    50aa:	24 2b       	or	r18, r20
    50ac:	35 2b       	or	r19, r21
    50ae:	f7 01       	movw	r30, r14
    50b0:	35 8b       	std	Z+21, r19	; 0x15
    50b2:	24 8b       	std	Z+20, r18	; 0x14

    return rcode;
}
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	0f 90       	pop	r0
    50b8:	0f 90       	pop	r0
    50ba:	0f 90       	pop	r0
    50bc:	0f 90       	pop	r0
    50be:	cf 91       	pop	r28
    50c0:	df 91       	pop	r29
    50c2:	1f 91       	pop	r17
    50c4:	0f 91       	pop	r16
    50c6:	ff 90       	pop	r15
    50c8:	ef 90       	pop	r14
    50ca:	08 95       	ret

000050cc <USB_bulkRead>:
 * @param data target buffer.
 *
 * @return number of bytes read, or error code in case of failure.
 */
int USB_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
    50cc:	0f 93       	push	r16
    50ce:	1f 93       	push	r17
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	fc 01       	movw	r30, r24
    50d6:	db 01       	movw	r26, r22
    50d8:	ea 01       	movw	r28, r20
	return USB_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    50da:	22 23       	and	r18, r18
    50dc:	71 f4       	brne	.+28     	; 0x50fa <USB_bulkRead+0x2e>
    50de:	00 e0       	ldi	r16, 0x00	; 0
    50e0:	1d e7       	ldi	r17, 0x7D	; 125
    50e2:	cf 01       	movw	r24, r30
    50e4:	38 96       	adiw	r30, 0x08	; 8
    50e6:	bf 01       	movw	r22, r30
    50e8:	ad 01       	movw	r20, r26
    50ea:	9e 01       	movw	r18, r28
    50ec:	0e 94 10 26 	call	0x4c20	; 0x4c20 <USB_read>
}
    50f0:	df 91       	pop	r29
    50f2:	cf 91       	pop	r28
    50f4:	1f 91       	pop	r17
    50f6:	0f 91       	pop	r16
    50f8:	08 95       	ret
 *
 * @return number of bytes read, or error code in case of failure.
 */
int USB_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
	return USB_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    50fa:	01 e0       	ldi	r16, 0x01	; 1
    50fc:	10 e0       	ldi	r17, 0x00	; 0
    50fe:	f1 cf       	rjmp	.-30     	; 0x50e2 <USB_bulkRead+0x16>

00005100 <USB_init>:
/**
 * Initialises the USB layer.
 */
void USB_init(void)
{
 	max3421e_init();
    5100:	0e 94 3c 2b 	call	0x5678	; 0x5678 <max3421e_init>
	max3421e_powerOn();
    5104:	0e 94 13 2b 	call	0x5626	; 0x5626 <max3421e_powerOn>

	uint8_t i;

	// Initialise the USB state machine.
	usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    5108:	81 e1       	ldi	r24, 0x11	; 17
    510a:	80 93 00 02 	sts	0x0200, r24

	// Initialise the device table.
	for (i = 0; i < (USB_NUMDEVICES + 1); i++)
		deviceTable[i].active = false;
    510e:	10 92 b5 06 	sts	0x06B5, r1
    5112:	10 92 cb 06 	sts	0x06CB, r1
    5116:	10 92 e1 06 	sts	0x06E1, r1

	// Address 0 is used to configure devices and assign them an address when they are first plugged in
	deviceTable[0].address = 0;
    511a:	10 92 b4 06 	sts	0x06B4, r1
 * @param endpoint USB endpoint
 * @param address endpoint address
 */
void USB_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
	endpoint->address = address;
    511e:	10 92 b6 06 	sts	0x06B6, r1
	endpoint->sendToggle = bmSNDTOG0;
    5122:	80 e4       	ldi	r24, 0x40	; 64
    5124:	80 93 ba 06 	sts	0x06BA, r24
	endpoint->receiveToggle = bmRCVTOG0;
    5128:	80 e1       	ldi	r24, 0x10	; 16
    512a:	80 93 bb 06 	sts	0x06BB, r24

	// Address 0 is used to configure devices and assign them an address when they are first plugged in
	deviceTable[0].address = 0;
	USB_initEndPoint(&(deviceTable[0].control), 0);

}
    512e:	08 95       	ret

00005130 <USB_poll>:

/**
 * USB poll method. Performs enumeration/cleanup.
 */
void USB_poll()
{
    5130:	1f 93       	push	r17
    5132:	df 93       	push	r29
    5134:	cf 93       	push	r28
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
    513a:	62 97       	sbiw	r28, 0x12	; 18
    513c:	0f b6       	in	r0, 0x3f	; 63
    513e:	f8 94       	cli
    5140:	de bf       	out	0x3e, r29	; 62
    5142:	0f be       	out	0x3f, r0	; 63
    5144:	cd bf       	out	0x3d, r28	; 61
	uint8_t tmpdata;
	static unsigned long delay = 0;
	usb_deviceDescriptor deviceDescriptor;

	// Poll the MAX3421E device.
	max3421e_poll();
    5146:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <max3421e_poll>

	/* modify USB task state if Vbus changed */
	tmpdata = max3421e_getVbusState();
    514a:	0e 94 f5 29 	call	0x53ea	; 0x53ea <max3421e_getVbusState>

	switch (tmpdata)
    514e:	81 30       	cpi	r24, 0x01	; 1
    5150:	09 f4       	brne	.+2      	; 0x5154 <USB_poll+0x24>
    5152:	93 c0       	rjmp	.+294    	; 0x527a <USB_poll+0x14a>
    5154:	81 30       	cpi	r24, 0x01	; 1
    5156:	a0 f4       	brcc	.+40     	; 0x5180 <USB_poll+0x50>
	{
	case SE1: //illegal state
		usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
		break;
	case SE0: //disconnected
		if ((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    5158:	10 91 00 02 	lds	r17, 0x0200
    515c:	81 2f       	mov	r24, r17
    515e:	80 7f       	andi	r24, 0xF0	; 240
    5160:	80 31       	cpi	r24, 0x10	; 16
    5162:	91 f0       	breq	.+36     	; 0x5188 <USB_poll+0x58>
		{
			usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    5164:	81 e1       	ldi	r24, 0x11	; 17
    5166:	80 93 00 02 	sts	0x0200, r24
	case USB_DETACHED_SUBSTATE_INITIALIZE:

		// TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
		// devices.
		for (i = 1; i < USB_NUMDEVICES; i++)
			if (deviceTable[i].active)
    516a:	80 91 cb 06 	lds	r24, 0x06CB
    516e:	88 23       	and	r24, r24
    5170:	09 f0       	breq	.+2      	; 0x5174 <USB_poll+0x44>
    5172:	12 c1       	rjmp	.+548    	; 0x5398 <USB_poll+0x268>
				USB_fireEvent(&(deviceTable[i]), USB_DISCONNECT);

		USB_init();
    5174:	0e 94 80 28 	call	0x5100	; 0x5100 <USB_init>
		usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    5178:	82 e1       	ldi	r24, 0x12	; 18
    517a:	80 93 00 02 	sts	0x0200, r24
    517e:	80 c0       	rjmp	.+256    	; 0x5280 <USB_poll+0x150>
	max3421e_poll();

	/* modify USB task state if Vbus changed */
	tmpdata = max3421e_getVbusState();

	switch (tmpdata)
    5180:	84 30       	cpi	r24, 0x04	; 4
    5182:	d8 f1       	brcs	.+118    	; 0x51fa <USB_poll+0xca>
    5184:	10 91 00 02 	lds	r17, 0x0200
	}// switch( tmpdata

	//Serial.print("USB task state: ");
	//Serial.println( usb_task_state, HEX );

	switch (usb_task_state)
    5188:	10 34       	cpi	r17, 0x40	; 64
    518a:	09 f4       	brne	.+2      	; 0x518e <USB_poll+0x5e>
    518c:	8c c0       	rjmp	.+280    	; 0x52a6 <USB_poll+0x176>
    518e:	11 34       	cpi	r17, 0x41	; 65
    5190:	08 f4       	brcc	.+2      	; 0x5194 <USB_poll+0x64>
    5192:	80 c0       	rjmp	.+256    	; 0x5294 <USB_poll+0x164>
    5194:	10 36       	cpi	r17, 0x60	; 96
    5196:	09 f4       	brne	.+2      	; 0x519a <USB_poll+0x6a>
    5198:	b5 c0       	rjmp	.+362    	; 0x5304 <USB_poll+0x1d4>
    519a:	10 37       	cpi	r17, 0x70	; 112
    519c:	09 f4       	brne	.+2      	; 0x51a0 <USB_poll+0x70>
    519e:	d2 c0       	rjmp	.+420    	; 0x5344 <USB_poll+0x214>
    51a0:	10 35       	cpi	r17, 0x50	; 80
    51a2:	09 f0       	breq	.+2      	; 0x51a6 <USB_poll+0x76>
    51a4:	6d c0       	rjmp	.+218    	; 0x5280 <USB_poll+0x150>
			delay = millis() + 20; //20ms wait after reset per USB spec
		}
		break;

	case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
		if (max3421e_read(MAX_REG_HIRQ) & bmFRAMEIRQ)
    51a6:	88 ec       	ldi	r24, 0xC8	; 200
    51a8:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    51ac:	86 ff       	sbrs	r24, 6
    51ae:	68 c0       	rjmp	.+208    	; 0x5280 <USB_poll+0x150>
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    51b0:	80 91 88 06 	lds	r24, 0x0688
    51b4:	90 91 89 06 	lds	r25, 0x0689
    51b8:	a0 91 8a 06 	lds	r26, 0x068A
    51bc:	b0 91 8b 06 	lds	r27, 0x068B
    51c0:	01 96       	adiw	r24, 0x01	; 1
    51c2:	a1 1d       	adc	r26, r1
    51c4:	b1 1d       	adc	r27, r1
    51c6:	80 93 88 06 	sts	0x0688, r24
    51ca:	90 93 89 06 	sts	0x0689, r25
    51ce:	a0 93 8a 06 	sts	0x068A, r26
    51d2:	b0 93 8b 06 	sts	0x068B, r27
		break;

	case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
		if (max3421e_read(MAX_REG_HIRQ) & bmFRAMEIRQ)
		{ //when first SOF received we can continue
			if (delay < millis())
    51d6:	20 91 82 06 	lds	r18, 0x0682
    51da:	30 91 83 06 	lds	r19, 0x0683
    51de:	40 91 84 06 	lds	r20, 0x0684
    51e2:	50 91 85 06 	lds	r21, 0x0685
    51e6:	28 17       	cp	r18, r24
    51e8:	39 07       	cpc	r19, r25
    51ea:	4a 07       	cpc	r20, r26
    51ec:	5b 07       	cpc	r21, r27
    51ee:	08 f0       	brcs	.+2      	; 0x51f2 <USB_poll+0xc2>
    51f0:	47 c0       	rjmp	.+142    	; 0x5280 <USB_poll+0x150>
			{ //20ms passed
				usb_task_state
    51f2:	80 e6       	ldi	r24, 0x60	; 96
    51f4:	80 93 00 02 	sts	0x0200, r24
    51f8:	43 c0       	rjmp	.+134    	; 0x5280 <USB_poll+0x150>
			usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
		}
		break;
	case FSHOST: //attached
	case LSHOST:
		if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
    51fa:	10 91 00 02 	lds	r17, 0x0200
    51fe:	81 2f       	mov	r24, r17
    5200:	80 7f       	andi	r24, 0xF0	; 240
    5202:	80 31       	cpi	r24, 0x10	; 16
    5204:	09 f6       	brne	.-126    	; 0x5188 <USB_poll+0x58>
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    5206:	20 91 88 06 	lds	r18, 0x0688
    520a:	30 91 89 06 	lds	r19, 0x0689
    520e:	40 91 8a 06 	lds	r20, 0x068A
    5212:	50 91 8b 06 	lds	r21, 0x068B
    5216:	da 01       	movw	r26, r20
    5218:	c9 01       	movw	r24, r18
    521a:	2f 5f       	subi	r18, 0xFF	; 255
    521c:	3f 4f       	sbci	r19, 0xFF	; 255
    521e:	4f 4f       	sbci	r20, 0xFF	; 255
    5220:	5f 4f       	sbci	r21, 0xFF	; 255
		break;
	case FSHOST: //attached
	case LSHOST:
		if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
		{
			delay = millis() + USB_SETTLE_DELAY;
    5222:	87 53       	subi	r24, 0x37	; 55
    5224:	9f 4f       	sbci	r25, 0xFF	; 255
    5226:	af 4f       	sbci	r26, 0xFF	; 255
    5228:	bf 4f       	sbci	r27, 0xFF	; 255
    522a:	80 93 82 06 	sts	0x0682, r24
    522e:	90 93 83 06 	sts	0x0683, r25
    5232:	a0 93 84 06 	sts	0x0684, r26
    5236:	b0 93 85 06 	sts	0x0685, r27
			usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    523a:	80 e2       	ldi	r24, 0x20	; 32
    523c:	80 93 00 02 	sts	0x0200, r24
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    5240:	2f 5f       	subi	r18, 0xFF	; 255
    5242:	3f 4f       	sbci	r19, 0xFF	; 255
    5244:	4f 4f       	sbci	r20, 0xFF	; 255
    5246:	5f 4f       	sbci	r21, 0xFF	; 255
    5248:	20 93 88 06 	sts	0x0688, r18
    524c:	30 93 89 06 	sts	0x0689, r19
    5250:	40 93 8a 06 	sts	0x068A, r20
    5254:	50 93 8b 06 	sts	0x068B, r21
	case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
		break;
	case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
		break;
	case USB_ATTACHED_SUBSTATE_SETTLE: //setlle time for just attached device
		if (delay < millis())
    5258:	80 91 82 06 	lds	r24, 0x0682
    525c:	90 91 83 06 	lds	r25, 0x0683
    5260:	a0 91 84 06 	lds	r26, 0x0684
    5264:	b0 91 85 06 	lds	r27, 0x0685
    5268:	82 17       	cp	r24, r18
    526a:	93 07       	cpc	r25, r19
    526c:	a4 07       	cpc	r26, r20
    526e:	b5 07       	cpc	r27, r21
    5270:	38 f4       	brcc	.+14     	; 0x5280 <USB_poll+0x150>
		{
			usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    5272:	80 e3       	ldi	r24, 0x30	; 48
    5274:	80 93 00 02 	sts	0x0200, r24
    5278:	03 c0       	rjmp	.+6      	; 0x5280 <USB_poll+0x150>
	tmpdata = max3421e_getVbusState();

	switch (tmpdata)
	{
	case SE1: //illegal state
		usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    527a:	83 e1       	ldi	r24, 0x13	; 19
    527c:	80 93 00 02 	sts	0x0200, r24
	case USB_STATE_RUNNING:
		break;
	case USB_STATE_ERROR:
		break;
	}
}
    5280:	62 96       	adiw	r28, 0x12	; 18
    5282:	0f b6       	in	r0, 0x3f	; 63
    5284:	f8 94       	cli
    5286:	de bf       	out	0x3e, r29	; 62
    5288:	0f be       	out	0x3f, r0	; 63
    528a:	cd bf       	out	0x3d, r28	; 61
    528c:	cf 91       	pop	r28
    528e:	df 91       	pop	r29
    5290:	1f 91       	pop	r17
    5292:	08 95       	ret
	}// switch( tmpdata

	//Serial.print("USB task state: ");
	//Serial.println( usb_task_state, HEX );

	switch (usb_task_state)
    5294:	10 32       	cpi	r17, 0x20	; 32
    5296:	09 f4       	brne	.+2      	; 0x529a <USB_poll+0x16a>
    5298:	76 c0       	rjmp	.+236    	; 0x5386 <USB_poll+0x256>
    529a:	10 33       	cpi	r17, 0x30	; 48
    529c:	09 f4       	brne	.+2      	; 0x52a0 <USB_poll+0x170>
    529e:	4a c0       	rjmp	.+148    	; 0x5334 <USB_poll+0x204>
    52a0:	11 31       	cpi	r17, 0x11	; 17
    52a2:	71 f7       	brne	.-36     	; 0x5280 <USB_poll+0x150>
    52a4:	62 cf       	rjmp	.-316    	; 0x516a <USB_poll+0x3a>
		max3421e_write(MAX_REG_HCTL, bmBUSRST);
		usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
		break;

	case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
		if ((max3421e_read(MAX_REG_HCTL) & bmBUSRST) == 0)
    52a6:	88 ee       	ldi	r24, 0xE8	; 232
    52a8:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    52ac:	80 fd       	sbrc	r24, 0
    52ae:	e8 cf       	rjmp	.-48     	; 0x5280 <USB_poll+0x150>
		{
			tmpdata = max3421e_read(MAX_REG_MODE) | bmSOFKAENAB; //start SOF generation
    52b0:	88 ed       	ldi	r24, 0xD8	; 216
    52b2:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
			max3421e_write(MAX_REG_MODE, tmpdata);
    52b6:	68 2f       	mov	r22, r24
    52b8:	68 60       	ori	r22, 0x08	; 8
    52ba:	88 ed       	ldi	r24, 0xD8	; 216
    52bc:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
			//                  max3421e_regWr( rMODE, bmSOFKAENAB );
			usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    52c0:	80 e5       	ldi	r24, 0x50	; 80
    52c2:	80 93 00 02 	sts	0x0200, r24
// todo:
unsigned long millis( void )
{
	static unsigned long counter = 0;

	counter ++;
    52c6:	80 91 88 06 	lds	r24, 0x0688
    52ca:	90 91 89 06 	lds	r25, 0x0689
    52ce:	a0 91 8a 06 	lds	r26, 0x068A
    52d2:	b0 91 8b 06 	lds	r27, 0x068B
    52d6:	01 96       	adiw	r24, 0x01	; 1
    52d8:	a1 1d       	adc	r26, r1
    52da:	b1 1d       	adc	r27, r1
    52dc:	80 93 88 06 	sts	0x0688, r24
    52e0:	90 93 89 06 	sts	0x0689, r25
    52e4:	a0 93 8a 06 	sts	0x068A, r26
    52e8:	b0 93 8b 06 	sts	0x068B, r27
		{
			tmpdata = max3421e_read(MAX_REG_MODE) | bmSOFKAENAB; //start SOF generation
			max3421e_write(MAX_REG_MODE, tmpdata);
			//                  max3421e_regWr( rMODE, bmSOFKAENAB );
			usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
			delay = millis() + 20; //20ms wait after reset per USB spec
    52ec:	44 96       	adiw	r24, 0x14	; 20
    52ee:	a1 1d       	adc	r26, r1
    52f0:	b1 1d       	adc	r27, r1
    52f2:	80 93 82 06 	sts	0x0682, r24
    52f6:	90 93 83 06 	sts	0x0683, r25
    52fa:	a0 93 84 06 	sts	0x0684, r26
    52fe:	b0 93 85 06 	sts	0x0685, r27
    5302:	be cf       	rjmp	.-132    	; 0x5280 <USB_poll+0x150>
		break;

	case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
		// toggle( BPNT_0 );

		deviceTable[0].control.maxPacketSize = 8;
    5304:	88 e0       	ldi	r24, 0x08	; 8
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	90 93 b9 06 	sts	0x06B9, r25
    530c:	80 93 b8 06 	sts	0x06B8, r24

		rcode = USB_getDeviceDescriptor(&deviceTable[0], &deviceDescriptor);
    5310:	84 eb       	ldi	r24, 0xB4	; 180
    5312:	96 e0       	ldi	r25, 0x06	; 6
    5314:	be 01       	movw	r22, r28
    5316:	6f 5f       	subi	r22, 0xFF	; 255
    5318:	7f 4f       	sbci	r23, 0xFF	; 255
    531a:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <USB_getDeviceDescriptor>
		if (rcode == 0)
    531e:	88 23       	and	r24, r24
    5320:	61 f5       	brne	.+88     	; 0x537a <USB_poll+0x24a>
		{
			deviceTable[0].control.maxPacketSize = deviceDescriptor.bMaxPacketSize0;
    5322:	88 85       	ldd	r24, Y+8	; 0x08
    5324:	80 93 b8 06 	sts	0x06B8, r24
    5328:	10 92 b9 06 	sts	0x06B9, r1
			usb_task_state = USB_STATE_ADDRESSING;
    532c:	80 e7       	ldi	r24, 0x70	; 112
    532e:	80 93 00 02 	sts	0x0200, r24
    5332:	a6 cf       	rjmp	.-180    	; 0x5280 <USB_poll+0x150>
		}
		break;

	case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
		// Issue bus reset.
		max3421e_write(MAX_REG_HCTL, bmBUSRST);
    5334:	88 ee       	ldi	r24, 0xE8	; 232
    5336:	61 e0       	ldi	r22, 0x01	; 1
    5338:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
		usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    533c:	80 e4       	ldi	r24, 0x40	; 64
    533e:	80 93 00 02 	sts	0x0200, r24
    5342:	9e cf       	rjmp	.-196    	; 0x5280 <USB_poll+0x150>
	case USB_STATE_ADDRESSING:

		// Look for an empty spot
		for (i = 1; i < USB_NUMDEVICES; i++)
		{
			if (!deviceTable[i].active)
    5344:	80 91 cb 06 	lds	r24, 0x06CB
    5348:	88 23       	and	r24, r24
    534a:	79 f1       	breq	.+94     	; 0x53aa <USB_poll+0x27a>
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    534c:	e0 91 86 06 	lds	r30, 0x0686
    5350:	f0 91 87 06 	lds	r31, 0x0687
    5354:	80 ee       	ldi	r24, 0xE0	; 224
    5356:	96 e0       	ldi	r25, 0x06	; 6
    5358:	62 e0       	ldi	r22, 0x02	; 2
    535a:	19 95       	eicall
		if (usb_task_state == USB_STATE_ADDRESSING)
		{
			USB_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);

			// No vacant place in devtable
			usb_error = 0xfe;
    535c:	8e ef       	ldi	r24, 0xFE	; 254
    535e:	80 93 81 06 	sts	0x0681, r24
			usb_task_state = USB_STATE_ERROR;
    5362:	80 ea       	ldi	r24, 0xA0	; 160
    5364:	80 93 00 02 	sts	0x0200, r24
    5368:	8b cf       	rjmp	.-234    	; 0x5280 <USB_poll+0x150>
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    536a:	e0 91 86 06 	lds	r30, 0x0686
    536e:	f0 91 87 06 	lds	r31, 0x0687
    5372:	8a ec       	ldi	r24, 0xCA	; 202
    5374:	96 e0       	ldi	r25, 0x06	; 6
    5376:	62 e0       	ldi	r22, 0x02	; 2
    5378:	19 95       	eicall
				} else
				{
					USB_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);

					// TODO remove usb_error at some point?
					usb_error = USB_STATE_ADDRESSING;
    537a:	10 93 81 06 	sts	0x0681, r17
					usb_task_state = USB_STATE_ERROR;
    537e:	80 ea       	ldi	r24, 0xA0	; 160
    5380:	80 93 00 02 	sts	0x0200, r24
    5384:	7d cf       	rjmp	.-262    	; 0x5280 <USB_poll+0x150>
    5386:	20 91 88 06 	lds	r18, 0x0688
    538a:	30 91 89 06 	lds	r19, 0x0689
    538e:	40 91 8a 06 	lds	r20, 0x068A
    5392:	50 91 8b 06 	lds	r21, 0x068B
    5396:	54 cf       	rjmp	.-344    	; 0x5240 <USB_poll+0x110>
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    5398:	e0 91 86 06 	lds	r30, 0x0686
    539c:	f0 91 87 06 	lds	r31, 0x0687
    53a0:	8a ec       	ldi	r24, 0xCA	; 202
    53a2:	96 e0       	ldi	r25, 0x06	; 6
    53a4:	61 e0       	ldi	r22, 0x01	; 1
    53a6:	19 95       	eicall
    53a8:	e5 ce       	rjmp	.-566    	; 0x5174 <USB_poll+0x44>
			if (!deviceTable[i].active)
			{
				// Set correct MaxPktSize
				// deviceTable[i].epinfo = deviceTable[0].epinfo;

				deviceTable[i].address = i;
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	80 93 ca 06 	sts	0x06CA, r24
				deviceTable[i].active = true;
    53b0:	80 93 cb 06 	sts	0x06CB, r24
 * @param endpoint USB endpoint
 * @param address endpoint address
 */
void USB_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
	endpoint->address = address;
    53b4:	10 92 cc 06 	sts	0x06CC, r1
	endpoint->sendToggle = bmSNDTOG0;
    53b8:	80 e4       	ldi	r24, 0x40	; 64
    53ba:	80 93 d0 06 	sts	0x06D0, r24
	endpoint->receiveToggle = bmRCVTOG0;
    53be:	80 e1       	ldi	r24, 0x10	; 16
    53c0:	80 93 d1 06 	sts	0x06D1, r24
				deviceTable[i].active = true;

				USB_initEndPoint(&(deviceTable[i].control), 0);

				// temporary record until plugged with real device endpoint structure
				rcode = USB_setAddress(&deviceTable[0], i);
    53c4:	84 eb       	ldi	r24, 0xB4	; 180
    53c6:	96 e0       	ldi	r25, 0x06	; 6
    53c8:	61 e0       	ldi	r22, 0x01	; 1
    53ca:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <USB_setAddress>

				if (rcode == 0)
    53ce:	88 23       	and	r24, r24
    53d0:	61 f6       	brne	.-104    	; 0x536a <USB_poll+0x23a>
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void USB_fireEvent(usb_device * device, usb_eventType event)
{
	eventHandler(device, event);
    53d2:	e0 91 86 06 	lds	r30, 0x0686
    53d6:	f0 91 87 06 	lds	r31, 0x0687
    53da:	8a ec       	ldi	r24, 0xCA	; 202
    53dc:	96 e0       	ldi	r25, 0x06	; 6
    53de:	60 e0       	ldi	r22, 0x00	; 0
    53e0:	19 95       	eicall
				{
					USB_fireEvent(&deviceTable[i], USB_CONNECT);
					// usb_task_state = USB_STATE_CONFIGURING;
					// NB: I've bypassed the configuring state, because configuration should be handled
					// in the usb event handler.
					usb_task_state = USB_STATE_RUNNING;
    53e2:	80 e9       	ldi	r24, 0x90	; 144
    53e4:	80 93 00 02 	sts	0x0200, r24
    53e8:	4b cf       	rjmp	.-362    	; 0x5280 <USB_poll+0x150>

000053ea <max3421e_getVbusState>:
 * @return the status of Vbus.
 */
uint8_t max3421e_getVbusState()
{
	return vbusState;
}
    53ea:	80 91 8c 06 	lds	r24, 0x068C
    53ee:	08 95       	ret

000053f0 <max3421e_readMultiple>:
 * @param count number of bytes to read.
 * @param values target buffer.
 * @return pointer to the input buffer + count.
 */
uint8_t * max3421e_readMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
    53f0:	ef 92       	push	r14
    53f2:	ff 92       	push	r15
    53f4:	0f 93       	push	r16
    53f6:	1f 93       	push	r17
    53f8:	18 2f       	mov	r17, r24
    53fa:	06 2f       	mov	r16, r22
    53fc:	f4 2e       	mov	r15, r20
    53fe:	e5 2e       	mov	r14, r21
	// Pull slave-select high to initiate transfer.
	MAX_SS(0);
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	60 e0       	ldi	r22, 0x00	; 0
    5406:	70 e0       	ldi	r23, 0x00	; 0
    5408:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	// Send a command byte containing the register number.
	SPDR = reg;
    540c:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF))); //wait
    540e:	0d b4       	in	r0, 0x2d	; 45
    5410:	07 fe       	sbrs	r0, 7
    5412:	fd cf       	rjmp	.-6      	; 0x540e <max3421e_readMultiple+0x1e>

	// Read [count] bytes.
	while (count--)
    5414:	00 23       	and	r16, r16
    5416:	b1 f0       	breq	.+44     	; 0x5444 <max3421e_readMultiple+0x54>
    5418:	01 50       	subi	r16, 0x01	; 1
    541a:	8f 2d       	mov	r24, r15
    541c:	9e 2d       	mov	r25, r14
    541e:	fc 01       	movw	r30, r24
    5420:	60 2f       	mov	r22, r16
    5422:	70 e0       	ldi	r23, 0x00	; 0
    5424:	6f 5f       	subi	r22, 0xFF	; 255
    5426:	7f 4f       	sbci	r23, 0xFF	; 255
    5428:	6e 0f       	add	r22, r30
    542a:	7f 1f       	adc	r23, r31
	{
		// Send empty byte while reading.
		SPDR = 0;
    542c:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1 << SPIF)));
    542e:	0d b4       	in	r0, 0x2d	; 45
    5430:	07 fe       	sbrs	r0, 7
    5432:	fd cf       	rjmp	.-6      	; 0x542e <max3421e_readMultiple+0x3e>

		*values = SPDR;
    5434:	8e b5       	in	r24, 0x2e	; 46
    5436:	81 93       	st	Z+, r24
	// Send a command byte containing the register number.
	SPDR = reg;
	while (!(SPSR & (1 << SPIF))); //wait

	// Read [count] bytes.
	while (count--)
    5438:	e6 17       	cp	r30, r22
    543a:	f7 07       	cpc	r31, r23
    543c:	b9 f7       	brne	.-18     	; 0x542c <max3421e_readMultiple+0x3c>
    543e:	cf 01       	movw	r24, r30
    5440:	fe 2e       	mov	r15, r30
    5442:	e9 2e       	mov	r14, r25
		*values = SPDR;
		values++;
	}

	// Pull slave-select low to signal transfer complete.
	MAX_SS(1);
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	61 e0       	ldi	r22, 0x01	; 1
    544a:	70 e0       	ldi	r23, 0x00	; 0
    544c:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	// Return the byte array + count.
	return (values);
}
    5450:	8f 2d       	mov	r24, r15
    5452:	9e 2d       	mov	r25, r14
    5454:	1f 91       	pop	r17
    5456:	0f 91       	pop	r16
    5458:	ff 90       	pop	r15
    545a:	ef 90       	pop	r14
    545c:	08 95       	ret

0000545e <max3421e_read>:
 *
 * @param reg register address.
 * @return result value.
 */
uint8_t max3421e_read(uint8_t reg)
{
    545e:	1f 93       	push	r17
    5460:	18 2f       	mov	r17, r24
	// Pull slave-select high to initiate transfer.
	MAX_SS(0);
    5462:	80 e0       	ldi	r24, 0x00	; 0
    5464:	90 e0       	ldi	r25, 0x00	; 0
    5466:	60 e0       	ldi	r22, 0x00	; 0
    5468:	70 e0       	ldi	r23, 0x00	; 0
    546a:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	// Send a command byte containing the register number.
	SPDR = reg;
    546e:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF)));
    5470:	0d b4       	in	r0, 0x2d	; 45
    5472:	07 fe       	sbrs	r0, 7
    5474:	fd cf       	rjmp	.-6      	; 0x5470 <max3421e_read+0x12>

	// Send an empty byte while reading.
	SPDR = 0;
    5476:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1 << SPIF)));
    5478:	0d b4       	in	r0, 0x2d	; 45
    547a:	07 fe       	sbrs	r0, 7
    547c:	fd cf       	rjmp	.-6      	; 0x5478 <max3421e_read+0x1a>

	// Pull slave-select low to signal transfer complete.
	MAX_SS(1);
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	61 e0       	ldi	r22, 0x01	; 1
    5484:	70 e0       	ldi	r23, 0x00	; 0
    5486:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	// Return result byte.
	return (SPDR);
    548a:	8e b5       	in	r24, 0x2e	; 46
}
    548c:	1f 91       	pop	r17
    548e:	08 95       	ret

00005490 <max3421e_gpxInterruptHandler>:
 * GPX interrupt handler
 */
uint8_t max3421e_gpxInterruptHandler(void)
{
	//read GPIN IRQ register
	uint8_t interruptStatus = max3421e_read(MAX_REG_GPINIRQ);
    5490:	80 eb       	ldi	r24, 0xB0	; 176
    5492:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
	//        vbusPwr( ON );
	//        regWr( rGPINIRQ, bmGPINIRQ7 );
	//    }

	return (interruptStatus);
}
    5496:	08 95       	ret

00005498 <max3421e_writeMultiple>:
 * @param count number of bytes to write.
 * @param vaues input values.
 * @return a pointer to values, incremented by the number of bytes written (values + length).
 */
uint8_t * max3421e_writeMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
    5498:	ef 92       	push	r14
    549a:	ff 92       	push	r15
    549c:	0f 93       	push	r16
    549e:	1f 93       	push	r17
    54a0:	18 2f       	mov	r17, r24
    54a2:	06 2f       	mov	r16, r22
    54a4:	f4 2e       	mov	r15, r20
    54a6:	e5 2e       	mov	r14, r21
	// Pull slave select low to indicate start of transfer.
	MAX_SS(0);
    54a8:	80 e0       	ldi	r24, 0x00	; 0
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	60 e0       	ldi	r22, 0x00	; 0
    54ae:	70 e0       	ldi	r23, 0x00	; 0
    54b0:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	// Transfer command byte, 0x02 indicates write.
	SPDR = (reg | 0x02);
    54b4:	12 60       	ori	r17, 0x02	; 2
    54b6:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF)));
    54b8:	0d b4       	in	r0, 0x2d	; 45
    54ba:	07 fe       	sbrs	r0, 7
    54bc:	fd cf       	rjmp	.-6      	; 0x54b8 <max3421e_writeMultiple+0x20>

	// Transfer values.
	while (count--)
    54be:	00 23       	and	r16, r16
    54c0:	b1 f0       	breq	.+44     	; 0x54ee <max3421e_writeMultiple+0x56>
    54c2:	01 50       	subi	r16, 0x01	; 1
    54c4:	8f 2d       	mov	r24, r15
    54c6:	9e 2d       	mov	r25, r14
    54c8:	fc 01       	movw	r30, r24
    54ca:	60 2f       	mov	r22, r16
    54cc:	70 e0       	ldi	r23, 0x00	; 0
    54ce:	6f 5f       	subi	r22, 0xFF	; 255
    54d0:	7f 4f       	sbci	r23, 0xFF	; 255
    54d2:	6e 0f       	add	r22, r30
    54d4:	7f 1f       	adc	r23, r31
	{
		// Send next value byte.
		SPDR = (*values);
    54d6:	80 81       	ld	r24, Z
    54d8:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1 << SPIF)));
    54da:	0d b4       	in	r0, 0x2d	; 45
    54dc:	07 fe       	sbrs	r0, 7
    54de:	fd cf       	rjmp	.-6      	; 0x54da <max3421e_writeMultiple+0x42>

		values++;
    54e0:	31 96       	adiw	r30, 0x01	; 1
	// Transfer command byte, 0x02 indicates write.
	SPDR = (reg | 0x02);
	while (!(SPSR & (1 << SPIF)));

	// Transfer values.
	while (count--)
    54e2:	e6 17       	cp	r30, r22
    54e4:	f7 07       	cpc	r31, r23
    54e6:	b9 f7       	brne	.-18     	; 0x54d6 <max3421e_writeMultiple+0x3e>
    54e8:	cf 01       	movw	r24, r30
    54ea:	fe 2e       	mov	r15, r30
    54ec:	e9 2e       	mov	r14, r25

		values++;
	}

	// Pull slave select high to indicate end of transfer.
	MAX_SS(1);
    54ee:	80 e0       	ldi	r24, 0x00	; 0
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	61 e0       	ldi	r22, 0x01	; 1
    54f4:	70 e0       	ldi	r23, 0x00	; 0
    54f6:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	return (values);
}
    54fa:	8f 2d       	mov	r24, r15
    54fc:	9e 2d       	mov	r25, r14
    54fe:	1f 91       	pop	r17
    5500:	0f 91       	pop	r16
    5502:	ff 90       	pop	r15
    5504:	ef 90       	pop	r14
    5506:	08 95       	ret

00005508 <max3421e_write>:
 *
 * @param reg register address.
 * @param value value to write.
 */
void max3421e_write(uint8_t reg, uint8_t value)
{
    5508:	0f 93       	push	r16
    550a:	1f 93       	push	r17
    550c:	18 2f       	mov	r17, r24
    550e:	06 2f       	mov	r16, r22
	// Pull slave select low to indicate start of transfer.
	MAX_SS(0);
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	60 e0       	ldi	r22, 0x00	; 0
    5516:	70 e0       	ldi	r23, 0x00	; 0
    5518:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	// Transfer command byte, 0x02 indicates write.
	SPDR = (reg | 0x02);
    551c:	12 60       	ori	r17, 0x02	; 2
    551e:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF)));
    5520:	0d b4       	in	r0, 0x2d	; 45
    5522:	07 fe       	sbrs	r0, 7
    5524:	fd cf       	rjmp	.-6      	; 0x5520 <max3421e_write+0x18>

	// Transfer value byte.
	SPDR = value;
    5526:	0e bd       	out	0x2e, r16	; 46
	while (!(SPSR & (1 << SPIF)));
    5528:	0d b4       	in	r0, 0x2d	; 45
    552a:	07 fe       	sbrs	r0, 7
    552c:	fd cf       	rjmp	.-6      	; 0x5528 <max3421e_write+0x20>

	// Pull slave select high to indicate end of transfer.
	MAX_SS(1);
    552e:	80 e0       	ldi	r24, 0x00	; 0
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	61 e0       	ldi	r22, 0x01	; 1
    5534:	70 e0       	ldi	r23, 0x00	; 0
    5536:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	return;
}
    553a:	1f 91       	pop	r17
    553c:	0f 91       	pop	r16
    553e:	08 95       	ret

00005540 <max3421e_busprobe>:
 * Probes the bus to determine device presence and speed, and switches host to this speed.
 */
void max3421e_busprobe(void)
{
	uint8_t bus_sample;
	bus_sample = max3421e_read(MAX_REG_HRSL); //Get J,K status
    5540:	88 ef       	ldi	r24, 0xF8	; 248
    5542:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the uint8_t

	switch (bus_sample)
    5546:	80 7c       	andi	r24, 0xC0	; 192
    5548:	80 34       	cpi	r24, 0x40	; 64
    554a:	81 f0       	breq	.+32     	; 0x556c <max3421e_busprobe+0x2c>
    554c:	81 34       	cpi	r24, 0x41	; 65
    554e:	28 f0       	brcs	.+10     	; 0x555a <max3421e_busprobe+0x1a>
    5550:	80 38       	cpi	r24, 0x80	; 128
    5552:	c9 f0       	breq	.+50     	; 0x5586 <max3421e_busprobe+0x46>
    5554:	80 3c       	cpi	r24, 0xC0	; 192
    5556:	31 f0       	breq	.+12     	; 0x5564 <max3421e_busprobe+0x24>
    5558:	08 95       	ret
    555a:	88 23       	and	r24, r24
    555c:	09 f5       	brne	.+66     	; 0x55a0 <max3421e_busprobe+0x60>
		break;
	case (bmSE1): //illegal state
		vbusState = SE1;
		break;
	case (bmSE0): //disconnected state
		vbusState = SE0;
    555e:	10 92 8c 06 	sts	0x068C, r1
    5562:	08 95       	ret
			max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
			vbusState = FSHOST;
		}
		break;
	case (bmSE1): //illegal state
		vbusState = SE1;
    5564:	81 e0       	ldi	r24, 0x01	; 1
    5566:	80 93 8c 06 	sts	0x068C, r24
    556a:	08 95       	ret
			max3421e_write(MAX_REG_MODE, MODE_LS_HOST); //start low-speed host
			vbusState = LSHOST;
		}
		break;
	case (bmKSTATUS):
		if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    556c:	88 ed       	ldi	r24, 0xD8	; 216
    556e:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    5572:	81 fd       	sbrc	r24, 1
    5574:	0d c0       	rjmp	.+26     	; 0x5590 <max3421e_busprobe+0x50>
		{
			max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
    5576:	88 ed       	ldi	r24, 0xD8	; 216
    5578:	6b ec       	ldi	r22, 0xCB	; 203
    557a:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
			vbusState = LSHOST;
    557e:	83 e0       	ldi	r24, 0x03	; 3
    5580:	80 93 8c 06 	sts	0x068C, r24
    5584:	08 95       	ret

	switch (bus_sample)
	{
	//start full-speed or low-speed host
	case (bmJSTATUS):
		if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    5586:	88 ed       	ldi	r24, 0xD8	; 216
    5588:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    558c:	81 fd       	sbrc	r24, 1
    558e:	f3 cf       	rjmp	.-26     	; 0x5576 <max3421e_busprobe+0x36>
		{
			max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
			vbusState = LSHOST;
		} else
		{
			max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
    5590:	88 ed       	ldi	r24, 0xD8	; 216
    5592:	69 ec       	ldi	r22, 0xC9	; 201
    5594:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
			vbusState = FSHOST;
    5598:	82 e0       	ldi	r24, 0x02	; 2
    559a:	80 93 8c 06 	sts	0x068C, r24
    559e:	08 95       	ret
    55a0:	08 95       	ret

000055a2 <max3421e_interruptHandler>:

/**
 * Interrupt handler.
 */
uint8_t max3421e_interruptHandler(void)
{
    55a2:	1f 93       	push	r17
	uint8_t interruptStatus;
	uint8_t HIRQ_sendback = 0x00;

	// Determine interrupt source.
	interruptStatus = max3421e_read(MAX_REG_HIRQ);
    55a4:	88 ec       	ldi	r24, 0xC8	; 200
    55a6:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>

	if (interruptStatus & bmFRAMEIRQ)
    55aa:	86 fd       	sbrc	r24, 6
    55ac:	0d c0       	rjmp	.+26     	; 0x55c8 <max3421e_interruptHandler+0x26>
    55ae:	10 e0       	ldi	r17, 0x00	; 0
	{
		//->1ms SOF interrupt handler
		HIRQ_sendback |= bmFRAMEIRQ;
	}

	if (interruptStatus & bmCONDETIRQ)
    55b0:	85 ff       	sbrs	r24, 5
    55b2:	03 c0       	rjmp	.+6      	; 0x55ba <max3421e_interruptHandler+0x18>
	{
		max3421e_busprobe();
    55b4:	0e 94 a0 2a 	call	0x5540	; 0x5540 <max3421e_busprobe>

		HIRQ_sendback |= bmCONDETIRQ;
    55b8:	10 62       	ori	r17, 0x20	; 32
	}

	// End HIRQ interrupts handling, clear serviced IRQs
	max3421e_write(MAX_REG_HIRQ, HIRQ_sendback);
    55ba:	88 ec       	ldi	r24, 0xC8	; 200
    55bc:	61 2f       	mov	r22, r17
    55be:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

	return (HIRQ_sendback);
}
    55c2:	81 2f       	mov	r24, r17
    55c4:	1f 91       	pop	r17
    55c6:	08 95       	ret
	uint8_t HIRQ_sendback = 0x00;

	// Determine interrupt source.
	interruptStatus = max3421e_read(MAX_REG_HIRQ);

	if (interruptStatus & bmFRAMEIRQ)
    55c8:	10 e4       	ldi	r17, 0x40	; 64
    55ca:	f2 cf       	rjmp	.-28     	; 0x55b0 <max3421e_interruptHandler+0xe>

000055cc <max3421e_poll>:
/**
 * MAX3421 state change task and interrupt handler.
 * @return error code or 0 if successful.
 */
uint8_t max3421e_poll(void)
{
    55cc:	1f 93       	push	r17
	uint8_t rcode = 0;

	// Check interrupt.
	if (MAX_INT() == 0)
    55ce:	76 9b       	sbis	0x0e, 6	; 14
    55d0:	0a c0       	rjmp	.+20     	; 0x55e6 <max3421e_poll+0x1a>
    55d2:	10 e0       	ldi	r17, 0x00	; 0
		rcode = max3421e_interruptHandler();

	if (MAX_GPX() == 0)
    55d4:	80 91 05 01 	lds	r24, 0x0105
    55d8:	83 fd       	sbrc	r24, 3
    55da:	02 c0       	rjmp	.+4      	; 0x55e0 <max3421e_poll+0x14>
		max3421e_gpxInterruptHandler();
    55dc:	0e 94 48 2a 	call	0x5490	; 0x5490 <max3421e_gpxInterruptHandler>

	return (rcode);
}
    55e0:	81 2f       	mov	r24, r17
    55e2:	1f 91       	pop	r17
    55e4:	08 95       	ret
{
	uint8_t rcode = 0;

	// Check interrupt.
	if (MAX_INT() == 0)
		rcode = max3421e_interruptHandler();
    55e6:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <max3421e_interruptHandler>
    55ea:	18 2f       	mov	r17, r24
    55ec:	f3 cf       	rjmp	.-26     	; 0x55d4 <max3421e_poll+0x8>

000055ee <max3421e_reset>:
/**
 * Resets the max3412e. Sets the chip reset bit, SPI configuration is not affected.
 * @return true iff success.
 */
boolean max3421e_reset(void)
{
    55ee:	1f 93       	push	r17
	uint8_t tmp = 0;

	// Chip reset. This stops the oscillator
	max3421e_write(MAX_REG_USBCTL, bmCHIPRES);
    55f0:	88 e7       	ldi	r24, 0x78	; 120
    55f2:	60 e2       	ldi	r22, 0x20	; 32
    55f4:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

	// Remove the reset
	max3421e_write(MAX_REG_USBCTL, 0x00);
    55f8:	88 e7       	ldi	r24, 0x78	; 120
    55fa:	60 e0       	ldi	r22, 0x00	; 0
    55fc:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
    5600:	80 e4       	ldi	r24, 0x40	; 64
    5602:	9c e9       	ldi	r25, 0x9C	; 156
    5604:	01 97       	sbiw	r24, 0x01	; 1
    5606:	f1 f7       	brne	.-4      	; 0x5604 <max3421e_reset+0x16>
    5608:	10 e0       	ldi	r17, 0x00	; 0
    560a:	02 c0       	rjmp	.+4      	; 0x5610 <max3421e_reset+0x22>
    560c:	11 50       	subi	r17, 0x01	; 1
	// Wait until the PLL is stable
	while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
	{
		// Timeout after 256 attempts.
		tmp++;
		if (tmp == 0)
    560e:	41 f0       	breq	.+16     	; 0x5620 <max3421e_reset+0x32>
	max3421e_write(MAX_REG_USBCTL, 0x00);

	_delay_ms(10);

	// Wait until the PLL is stable
	while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    5610:	88 e6       	ldi	r24, 0x68	; 104
    5612:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    5616:	80 ff       	sbrs	r24, 0
    5618:	f9 cf       	rjmp	.-14     	; 0x560c <max3421e_reset+0x1e>
    561a:	81 e0       	ldi	r24, 0x01	; 1
			return (false);
	}

	// Success.
	return (true);
}
    561c:	1f 91       	pop	r17
    561e:	08 95       	ret
	// Wait until the PLL is stable
	while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
	{
		// Timeout after 256 attempts.
		tmp++;
		if (tmp == 0)
    5620:	80 e0       	ldi	r24, 0x00	; 0
			return (false);
	}

	// Success.
	return (true);
}
    5622:	1f 91       	pop	r17
    5624:	08 95       	ret

00005626 <max3421e_powerOn>:
 * Initialises the max3421e after power-on.
 */
void max3421e_powerOn(void)
{
	// Configure full-duplex SPI, interrupt pulse.
	max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
    5626:	88 e8       	ldi	r24, 0x88	; 136
    5628:	6a e1       	ldi	r22, 0x1A	; 26
    562a:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

	// Stop/start the oscillator.
	if (max3421e_reset() == false)
    562e:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <max3421e_reset>
    5632:	88 23       	and	r24, r24
    5634:	e1 f0       	breq	.+56     	; 0x566e <max3421e_powerOn+0x48>
		printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));

	// Configure host operation.
	max3421e_write(MAX_REG_MODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ ); // set pull-downs, Host, Separate GPIN IRQ on GPX
    5636:	88 ed       	ldi	r24, 0xD8	; 216
    5638:	61 ed       	ldi	r22, 0xD1	; 209
    563a:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
	max3421e_write(MAX_REG_HIEN, bmCONDETIE | bmFRAMEIE ); //connection detection
    563e:	80 ed       	ldi	r24, 0xD0	; 208
    5640:	60 e6       	ldi	r22, 0x60	; 96
    5642:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

	// Check if device is connected.
	max3421e_write(MAX_REG_HCTL, bmSAMPLEBUS ); // sample USB bus
    5646:	88 ee       	ldi	r24, 0xE8	; 232
    5648:	64 e0       	ldi	r22, 0x04	; 4
    564a:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
	while (!(max3421e_read(MAX_REG_HCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    564e:	88 ee       	ldi	r24, 0xE8	; 232
    5650:	0e 94 2f 2a 	call	0x545e	; 0x545e <max3421e_read>
    5654:	82 ff       	sbrs	r24, 2
    5656:	fb cf       	rjmp	.-10     	; 0x564e <max3421e_powerOn+0x28>

	max3421e_busprobe(); //check if anything is connected
    5658:	0e 94 a0 2a 	call	0x5540	; 0x5540 <max3421e_busprobe>
	max3421e_write(MAX_REG_HIRQ, bmCONDETIRQ ); //clear connection detect interrupt
    565c:	88 ec       	ldi	r24, 0xC8	; 200
    565e:	60 e2       	ldi	r22, 0x20	; 32
    5660:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>

	// Enable interrupt pin.
	max3421e_write(MAX_REG_CPUCTL, 0x01);
    5664:	80 e8       	ldi	r24, 0x80	; 128
    5666:	61 e0       	ldi	r22, 0x01	; 1
    5668:	0e 94 84 2a 	call	0x5508	; 0x5508 <max3421e_write>
}
    566c:	08 95       	ret
	// Configure full-duplex SPI, interrupt pulse.
	max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX

	// Stop/start the oscillator.
	if (max3421e_reset() == false)
		printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));
    566e:	8b e0       	ldi	r24, 0x0B	; 11
    5670:	96 e0       	ldi	r25, 0x06	; 6
    5672:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <printPgmString>
    5676:	df cf       	rjmp	.-66     	; 0x5636 <max3421e_powerOn+0x10>

00005678 <max3421e_init>:
 * Must be called before powerOn.
 */
void max3421e_init()
{

	SPI_begin();
    5678:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <SPI_begin>
	pinMode(PIN_MAX_GPX, INPUT);
	pinMode(PIN_MAX_RESET, OUTPUT);
*/


	DDRE &= ~ 0x40;
    567c:	6e 98       	cbi	0x0d, 6	; 13
	DDRJ &= ~ 0x08;
    567e:	e4 e0       	ldi	r30, 0x04	; 4
    5680:	f1 e0       	ldi	r31, 0x01	; 1
    5682:	80 81       	ld	r24, Z
    5684:	87 7f       	andi	r24, 0xF7	; 247
    5686:	80 83       	st	Z, r24
	DDRJ |= 0x04;
    5688:	80 81       	ld	r24, Z
    568a:	84 60       	ori	r24, 0x04	; 4
    568c:	80 83       	st	Z, r24

#endif
*/

	// Pull SPI !SS high
	MAX_SS(1);
    568e:	80 e0       	ldi	r24, 0x00	; 0
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	61 e0       	ldi	r22, 0x01	; 1
    5694:	70 e0       	ldi	r23, 0x00	; 0
    5696:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalWrite>

	// Reset
	MAX_RESET(1);
    569a:	e5 e0       	ldi	r30, 0x05	; 5
    569c:	f1 e0       	ldi	r31, 0x01	; 1
    569e:	80 81       	ld	r24, Z
    56a0:	84 60       	ori	r24, 0x04	; 4
    56a2:	80 83       	st	Z, r24
}
    56a4:	08 95       	ret

000056a6 <SPI_begin>:
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  
	SET_OUTPUT( DDRB, SCK  );
    56a6:	21 98       	cbi	0x04, 1	; 4
	SET_OUTPUT( DDRB, MOSI );
    56a8:	22 98       	cbi	0x04, 2	; 4
	SET_OUTPUT( DDRB, SS   );
    56aa:	20 98       	cbi	0x04, 0	; 4

	SET_LOW( PORTB, SCK  );
    56ac:	29 98       	cbi	0x05, 1	; 5
	SET_LOW( PORTB, MOSI );
    56ae:	2a 98       	cbi	0x05, 2	; 5
	SET_LOW( PORTB, SS   );
    56b0:	28 98       	cbi	0x05, 0	; 5
  //digitalWrite(SS, HIGH);

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    56b2:	8c b5       	in	r24, 0x2c	; 44
    56b4:	80 61       	ori	r24, 0x10	; 16
    56b6:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    56b8:	8c b5       	in	r24, 0x2c	; 44
    56ba:	80 64       	ori	r24, 0x40	; 64
    56bc:	8c bd       	out	0x2c, r24	; 44
}
    56be:	08 95       	ret

000056c0 <SPI_end>:

void SPI_end() {
  SPCR &= ~_BV(SPE);
    56c0:	8c b5       	in	r24, 0x2c	; 44
    56c2:	8f 7b       	andi	r24, 0xBF	; 191
    56c4:	8c bd       	out	0x2c, r24	; 44
}

void SPIClass_detachInterrupt() {
  SPCR &= ~_BV(SPIE);
}
}
    56c6:	08 95       	ret

000056c8 <SPI_setBitOrder>:

void SPI_setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    56c8:	88 23       	and	r24, r24
    56ca:	21 f0       	breq	.+8      	; 0x56d4 <SPI_setBitOrder+0xc>
    SPCR |= _BV(DORD);
  } else {
    SPCR &= ~(_BV(DORD));
    56cc:	8c b5       	in	r24, 0x2c	; 44
    56ce:	8f 7d       	andi	r24, 0xDF	; 223
    56d0:	8c bd       	out	0x2c, r24	; 44
    56d2:	08 95       	ret
}

void SPI_setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    SPCR |= _BV(DORD);
    56d4:	8c b5       	in	r24, 0x2c	; 44
    56d6:	80 62       	ori	r24, 0x20	; 32
    56d8:	8c bd       	out	0x2c, r24	; 44
    56da:	08 95       	ret

000056dc <SPI_setDataMode>:
  }
}

void SPI_setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    56dc:	9c b5       	in	r25, 0x2c	; 44
    56de:	93 7f       	andi	r25, 0xF3	; 243
    56e0:	98 2b       	or	r25, r24
    56e2:	9c bd       	out	0x2c, r25	; 44
}
    56e4:	08 95       	ret

000056e6 <SPI_setClockDivider>:

void SPI_setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    56e6:	9c b5       	in	r25, 0x2c	; 44
    56e8:	28 2f       	mov	r18, r24
    56ea:	23 70       	andi	r18, 0x03	; 3
    56ec:	9c 7f       	andi	r25, 0xFC	; 252
    56ee:	29 2b       	or	r18, r25
    56f0:	2c bd       	out	0x2c, r18	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    56f2:	9d b5       	in	r25, 0x2d	; 45
    56f4:	86 95       	lsr	r24
    56f6:	86 95       	lsr	r24
    56f8:	81 70       	andi	r24, 0x01	; 1
    56fa:	9e 7f       	andi	r25, 0xFE	; 254
    56fc:	98 2b       	or	r25, r24
    56fe:	9d bd       	out	0x2d, r25	; 45
}
    5700:	08 95       	ret

00005702 <__subsf3>:
    5702:	50 58       	subi	r21, 0x80	; 128

00005704 <__addsf3>:
    5704:	bb 27       	eor	r27, r27
    5706:	aa 27       	eor	r26, r26
    5708:	0e d0       	rcall	.+28     	; 0x5726 <__addsf3x>
    570a:	11 c2       	rjmp	.+1058   	; 0x5b2e <__fp_round>
    570c:	02 d2       	rcall	.+1028   	; 0x5b12 <__fp_pscA>
    570e:	30 f0       	brcs	.+12     	; 0x571c <__addsf3+0x18>
    5710:	07 d2       	rcall	.+1038   	; 0x5b20 <__fp_pscB>
    5712:	20 f0       	brcs	.+8      	; 0x571c <__addsf3+0x18>
    5714:	31 f4       	brne	.+12     	; 0x5722 <__addsf3+0x1e>
    5716:	9f 3f       	cpi	r25, 0xFF	; 255
    5718:	11 f4       	brne	.+4      	; 0x571e <__addsf3+0x1a>
    571a:	1e f4       	brtc	.+6      	; 0x5722 <__addsf3+0x1e>
    571c:	d2 c1       	rjmp	.+932    	; 0x5ac2 <__fp_nan>
    571e:	0e f4       	brtc	.+2      	; 0x5722 <__addsf3+0x1e>
    5720:	e0 95       	com	r30
    5722:	e7 fb       	bst	r30, 7
    5724:	9f c1       	rjmp	.+830    	; 0x5a64 <__fp_inf>

00005726 <__addsf3x>:
    5726:	e9 2f       	mov	r30, r25
    5728:	13 d2       	rcall	.+1062   	; 0x5b50 <__fp_split3>
    572a:	80 f3       	brcs	.-32     	; 0x570c <__addsf3+0x8>
    572c:	ba 17       	cp	r27, r26
    572e:	62 07       	cpc	r22, r18
    5730:	73 07       	cpc	r23, r19
    5732:	84 07       	cpc	r24, r20
    5734:	95 07       	cpc	r25, r21
    5736:	18 f0       	brcs	.+6      	; 0x573e <__addsf3x+0x18>
    5738:	71 f4       	brne	.+28     	; 0x5756 <__addsf3x+0x30>
    573a:	9e f5       	brtc	.+102    	; 0x57a2 <__addsf3x+0x7c>
    573c:	42 c2       	rjmp	.+1156   	; 0x5bc2 <__fp_zero>
    573e:	0e f4       	brtc	.+2      	; 0x5742 <__addsf3x+0x1c>
    5740:	e0 95       	com	r30
    5742:	0b 2e       	mov	r0, r27
    5744:	ba 2f       	mov	r27, r26
    5746:	a0 2d       	mov	r26, r0
    5748:	0b 01       	movw	r0, r22
    574a:	b9 01       	movw	r22, r18
    574c:	90 01       	movw	r18, r0
    574e:	0c 01       	movw	r0, r24
    5750:	ca 01       	movw	r24, r20
    5752:	a0 01       	movw	r20, r0
    5754:	11 24       	eor	r1, r1
    5756:	ff 27       	eor	r31, r31
    5758:	59 1b       	sub	r21, r25
    575a:	99 f0       	breq	.+38     	; 0x5782 <__addsf3x+0x5c>
    575c:	59 3f       	cpi	r21, 0xF9	; 249
    575e:	50 f4       	brcc	.+20     	; 0x5774 <__addsf3x+0x4e>
    5760:	50 3e       	cpi	r21, 0xE0	; 224
    5762:	68 f1       	brcs	.+90     	; 0x57be <__addsf3x+0x98>
    5764:	1a 16       	cp	r1, r26
    5766:	f0 40       	sbci	r31, 0x00	; 0
    5768:	a2 2f       	mov	r26, r18
    576a:	23 2f       	mov	r18, r19
    576c:	34 2f       	mov	r19, r20
    576e:	44 27       	eor	r20, r20
    5770:	58 5f       	subi	r21, 0xF8	; 248
    5772:	f3 cf       	rjmp	.-26     	; 0x575a <__addsf3x+0x34>
    5774:	46 95       	lsr	r20
    5776:	37 95       	ror	r19
    5778:	27 95       	ror	r18
    577a:	a7 95       	ror	r26
    577c:	f0 40       	sbci	r31, 0x00	; 0
    577e:	53 95       	inc	r21
    5780:	c9 f7       	brne	.-14     	; 0x5774 <__addsf3x+0x4e>
    5782:	7e f4       	brtc	.+30     	; 0x57a2 <__addsf3x+0x7c>
    5784:	1f 16       	cp	r1, r31
    5786:	ba 0b       	sbc	r27, r26
    5788:	62 0b       	sbc	r22, r18
    578a:	73 0b       	sbc	r23, r19
    578c:	84 0b       	sbc	r24, r20
    578e:	ba f0       	brmi	.+46     	; 0x57be <__addsf3x+0x98>
    5790:	91 50       	subi	r25, 0x01	; 1
    5792:	a1 f0       	breq	.+40     	; 0x57bc <__addsf3x+0x96>
    5794:	ff 0f       	add	r31, r31
    5796:	bb 1f       	adc	r27, r27
    5798:	66 1f       	adc	r22, r22
    579a:	77 1f       	adc	r23, r23
    579c:	88 1f       	adc	r24, r24
    579e:	c2 f7       	brpl	.-16     	; 0x5790 <__addsf3x+0x6a>
    57a0:	0e c0       	rjmp	.+28     	; 0x57be <__addsf3x+0x98>
    57a2:	ba 0f       	add	r27, r26
    57a4:	62 1f       	adc	r22, r18
    57a6:	73 1f       	adc	r23, r19
    57a8:	84 1f       	adc	r24, r20
    57aa:	48 f4       	brcc	.+18     	; 0x57be <__addsf3x+0x98>
    57ac:	87 95       	ror	r24
    57ae:	77 95       	ror	r23
    57b0:	67 95       	ror	r22
    57b2:	b7 95       	ror	r27
    57b4:	f7 95       	ror	r31
    57b6:	9e 3f       	cpi	r25, 0xFE	; 254
    57b8:	08 f0       	brcs	.+2      	; 0x57bc <__addsf3x+0x96>
    57ba:	b3 cf       	rjmp	.-154    	; 0x5722 <__addsf3+0x1e>
    57bc:	93 95       	inc	r25
    57be:	88 0f       	add	r24, r24
    57c0:	08 f0       	brcs	.+2      	; 0x57c4 <__addsf3x+0x9e>
    57c2:	99 27       	eor	r25, r25
    57c4:	ee 0f       	add	r30, r30
    57c6:	97 95       	ror	r25
    57c8:	87 95       	ror	r24
    57ca:	08 95       	ret

000057cc <atan>:
    57cc:	df 93       	push	r29
    57ce:	dd 27       	eor	r29, r29
    57d0:	b9 2f       	mov	r27, r25
    57d2:	bf 77       	andi	r27, 0x7F	; 127
    57d4:	40 e8       	ldi	r20, 0x80	; 128
    57d6:	5f e3       	ldi	r21, 0x3F	; 63
    57d8:	16 16       	cp	r1, r22
    57da:	17 06       	cpc	r1, r23
    57dc:	48 07       	cpc	r20, r24
    57de:	5b 07       	cpc	r21, r27
    57e0:	10 f4       	brcc	.+4      	; 0x57e6 <atan+0x1a>
    57e2:	d9 2f       	mov	r29, r25
    57e4:	f9 d1       	rcall	.+1010   	; 0x5bd8 <inverse>
    57e6:	9f 93       	push	r25
    57e8:	8f 93       	push	r24
    57ea:	7f 93       	push	r23
    57ec:	6f 93       	push	r22
    57ee:	23 d3       	rcall	.+1606   	; 0x5e36 <square>
    57f0:	ec e1       	ldi	r30, 0x1C	; 28
    57f2:	f2 e0       	ldi	r31, 0x02	; 2
    57f4:	69 d1       	rcall	.+722    	; 0x5ac8 <__fp_powser>
    57f6:	9b d1       	rcall	.+822    	; 0x5b2e <__fp_round>
    57f8:	2f 91       	pop	r18
    57fa:	3f 91       	pop	r19
    57fc:	4f 91       	pop	r20
    57fe:	5f 91       	pop	r21
    5800:	61 d2       	rcall	.+1218   	; 0x5cc4 <__mulsf3x>
    5802:	dd 23       	and	r29, r29
    5804:	49 f0       	breq	.+18     	; 0x5818 <atan+0x4c>
    5806:	90 58       	subi	r25, 0x80	; 128
    5808:	a2 ea       	ldi	r26, 0xA2	; 162
    580a:	2a ed       	ldi	r18, 0xDA	; 218
    580c:	3f e0       	ldi	r19, 0x0F	; 15
    580e:	49 ec       	ldi	r20, 0xC9	; 201
    5810:	5f e3       	ldi	r21, 0x3F	; 63
    5812:	d0 78       	andi	r29, 0x80	; 128
    5814:	5d 27       	eor	r21, r29
    5816:	87 df       	rcall	.-242    	; 0x5726 <__addsf3x>
    5818:	df 91       	pop	r29
    581a:	89 c1       	rjmp	.+786    	; 0x5b2e <__fp_round>

0000581c <ceil>:
    581c:	bb d1       	rcall	.+886    	; 0x5b94 <__fp_trunc>
    581e:	80 f0       	brcs	.+32     	; 0x5840 <ceil+0x24>
    5820:	9f 37       	cpi	r25, 0x7F	; 127
    5822:	40 f4       	brcc	.+16     	; 0x5834 <ceil+0x18>
    5824:	91 11       	cpse	r25, r1
    5826:	0e f4       	brtc	.+2      	; 0x582a <ceil+0xe>
    5828:	cd c1       	rjmp	.+922    	; 0x5bc4 <__fp_szero>
    582a:	60 e0       	ldi	r22, 0x00	; 0
    582c:	70 e0       	ldi	r23, 0x00	; 0
    582e:	80 e8       	ldi	r24, 0x80	; 128
    5830:	9f e3       	ldi	r25, 0x3F	; 63
    5832:	08 95       	ret
    5834:	26 f0       	brts	.+8      	; 0x583e <ceil+0x22>
    5836:	1b 16       	cp	r1, r27
    5838:	61 1d       	adc	r22, r1
    583a:	71 1d       	adc	r23, r1
    583c:	81 1d       	adc	r24, r1
    583e:	18 c1       	rjmp	.+560    	; 0x5a70 <__fp_mintl>
    5840:	32 c1       	rjmp	.+612    	; 0x5aa6 <__fp_mpack>

00005842 <__cmpsf2>:
    5842:	ec d0       	rcall	.+472    	; 0x5a1c <__fp_cmp>
    5844:	08 f4       	brcc	.+2      	; 0x5848 <__cmpsf2+0x6>
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	08 95       	ret

0000584a <__divsf3>:
    584a:	0c d0       	rcall	.+24     	; 0x5864 <__divsf3x>
    584c:	70 c1       	rjmp	.+736    	; 0x5b2e <__fp_round>
    584e:	68 d1       	rcall	.+720    	; 0x5b20 <__fp_pscB>
    5850:	40 f0       	brcs	.+16     	; 0x5862 <__divsf3+0x18>
    5852:	5f d1       	rcall	.+702    	; 0x5b12 <__fp_pscA>
    5854:	30 f0       	brcs	.+12     	; 0x5862 <__divsf3+0x18>
    5856:	21 f4       	brne	.+8      	; 0x5860 <__divsf3+0x16>
    5858:	5f 3f       	cpi	r21, 0xFF	; 255
    585a:	19 f0       	breq	.+6      	; 0x5862 <__divsf3+0x18>
    585c:	03 c1       	rjmp	.+518    	; 0x5a64 <__fp_inf>
    585e:	51 11       	cpse	r21, r1
    5860:	b1 c1       	rjmp	.+866    	; 0x5bc4 <__fp_szero>
    5862:	2f c1       	rjmp	.+606    	; 0x5ac2 <__fp_nan>

00005864 <__divsf3x>:
    5864:	75 d1       	rcall	.+746    	; 0x5b50 <__fp_split3>
    5866:	98 f3       	brcs	.-26     	; 0x584e <__divsf3+0x4>

00005868 <__divsf3_pse>:
    5868:	99 23       	and	r25, r25
    586a:	c9 f3       	breq	.-14     	; 0x585e <__divsf3+0x14>
    586c:	55 23       	and	r21, r21
    586e:	b1 f3       	breq	.-20     	; 0x585c <__divsf3+0x12>
    5870:	95 1b       	sub	r25, r21
    5872:	55 0b       	sbc	r21, r21
    5874:	bb 27       	eor	r27, r27
    5876:	aa 27       	eor	r26, r26
    5878:	62 17       	cp	r22, r18
    587a:	73 07       	cpc	r23, r19
    587c:	84 07       	cpc	r24, r20
    587e:	38 f0       	brcs	.+14     	; 0x588e <__divsf3_pse+0x26>
    5880:	9f 5f       	subi	r25, 0xFF	; 255
    5882:	5f 4f       	sbci	r21, 0xFF	; 255
    5884:	22 0f       	add	r18, r18
    5886:	33 1f       	adc	r19, r19
    5888:	44 1f       	adc	r20, r20
    588a:	aa 1f       	adc	r26, r26
    588c:	a9 f3       	breq	.-22     	; 0x5878 <__divsf3_pse+0x10>
    588e:	33 d0       	rcall	.+102    	; 0x58f6 <__divsf3_pse+0x8e>
    5890:	0e 2e       	mov	r0, r30
    5892:	3a f0       	brmi	.+14     	; 0x58a2 <__divsf3_pse+0x3a>
    5894:	e0 e8       	ldi	r30, 0x80	; 128
    5896:	30 d0       	rcall	.+96     	; 0x58f8 <__divsf3_pse+0x90>
    5898:	91 50       	subi	r25, 0x01	; 1
    589a:	50 40       	sbci	r21, 0x00	; 0
    589c:	e6 95       	lsr	r30
    589e:	00 1c       	adc	r0, r0
    58a0:	ca f7       	brpl	.-14     	; 0x5894 <__divsf3_pse+0x2c>
    58a2:	29 d0       	rcall	.+82     	; 0x58f6 <__divsf3_pse+0x8e>
    58a4:	fe 2f       	mov	r31, r30
    58a6:	27 d0       	rcall	.+78     	; 0x58f6 <__divsf3_pse+0x8e>
    58a8:	66 0f       	add	r22, r22
    58aa:	77 1f       	adc	r23, r23
    58ac:	88 1f       	adc	r24, r24
    58ae:	bb 1f       	adc	r27, r27
    58b0:	26 17       	cp	r18, r22
    58b2:	37 07       	cpc	r19, r23
    58b4:	48 07       	cpc	r20, r24
    58b6:	ab 07       	cpc	r26, r27
    58b8:	b0 e8       	ldi	r27, 0x80	; 128
    58ba:	09 f0       	breq	.+2      	; 0x58be <__divsf3_pse+0x56>
    58bc:	bb 0b       	sbc	r27, r27
    58be:	80 2d       	mov	r24, r0
    58c0:	bf 01       	movw	r22, r30
    58c2:	ff 27       	eor	r31, r31
    58c4:	93 58       	subi	r25, 0x83	; 131
    58c6:	5f 4f       	sbci	r21, 0xFF	; 255
    58c8:	2a f0       	brmi	.+10     	; 0x58d4 <__divsf3_pse+0x6c>
    58ca:	9e 3f       	cpi	r25, 0xFE	; 254
    58cc:	51 05       	cpc	r21, r1
    58ce:	68 f0       	brcs	.+26     	; 0x58ea <__divsf3_pse+0x82>
    58d0:	c9 c0       	rjmp	.+402    	; 0x5a64 <__fp_inf>
    58d2:	78 c1       	rjmp	.+752    	; 0x5bc4 <__fp_szero>
    58d4:	5f 3f       	cpi	r21, 0xFF	; 255
    58d6:	ec f3       	brlt	.-6      	; 0x58d2 <__divsf3_pse+0x6a>
    58d8:	98 3e       	cpi	r25, 0xE8	; 232
    58da:	dc f3       	brlt	.-10     	; 0x58d2 <__divsf3_pse+0x6a>
    58dc:	86 95       	lsr	r24
    58de:	77 95       	ror	r23
    58e0:	67 95       	ror	r22
    58e2:	b7 95       	ror	r27
    58e4:	f7 95       	ror	r31
    58e6:	9f 5f       	subi	r25, 0xFF	; 255
    58e8:	c9 f7       	brne	.-14     	; 0x58dc <__divsf3_pse+0x74>
    58ea:	88 0f       	add	r24, r24
    58ec:	91 1d       	adc	r25, r1
    58ee:	96 95       	lsr	r25
    58f0:	87 95       	ror	r24
    58f2:	97 f9       	bld	r25, 7
    58f4:	08 95       	ret
    58f6:	e1 e0       	ldi	r30, 0x01	; 1
    58f8:	66 0f       	add	r22, r22
    58fa:	77 1f       	adc	r23, r23
    58fc:	88 1f       	adc	r24, r24
    58fe:	bb 1f       	adc	r27, r27
    5900:	62 17       	cp	r22, r18
    5902:	73 07       	cpc	r23, r19
    5904:	84 07       	cpc	r24, r20
    5906:	ba 07       	cpc	r27, r26
    5908:	20 f0       	brcs	.+8      	; 0x5912 <__divsf3_pse+0xaa>
    590a:	62 1b       	sub	r22, r18
    590c:	73 0b       	sbc	r23, r19
    590e:	84 0b       	sbc	r24, r20
    5910:	ba 0b       	sbc	r27, r26
    5912:	ee 1f       	adc	r30, r30
    5914:	88 f7       	brcc	.-30     	; 0x58f8 <__divsf3_pse+0x90>
    5916:	e0 95       	com	r30
    5918:	08 95       	ret

0000591a <__fixsfsi>:
    591a:	04 d0       	rcall	.+8      	; 0x5924 <__fixunssfsi>
    591c:	68 94       	set
    591e:	b1 11       	cpse	r27, r1
    5920:	51 c1       	rjmp	.+674    	; 0x5bc4 <__fp_szero>
    5922:	08 95       	ret

00005924 <__fixunssfsi>:
    5924:	1d d1       	rcall	.+570    	; 0x5b60 <__fp_splitA>
    5926:	88 f0       	brcs	.+34     	; 0x594a <__fixunssfsi+0x26>
    5928:	9f 57       	subi	r25, 0x7F	; 127
    592a:	90 f0       	brcs	.+36     	; 0x5950 <__fixunssfsi+0x2c>
    592c:	b9 2f       	mov	r27, r25
    592e:	99 27       	eor	r25, r25
    5930:	b7 51       	subi	r27, 0x17	; 23
    5932:	a0 f0       	brcs	.+40     	; 0x595c <__fixunssfsi+0x38>
    5934:	d1 f0       	breq	.+52     	; 0x596a <__fixunssfsi+0x46>
    5936:	66 0f       	add	r22, r22
    5938:	77 1f       	adc	r23, r23
    593a:	88 1f       	adc	r24, r24
    593c:	99 1f       	adc	r25, r25
    593e:	1a f0       	brmi	.+6      	; 0x5946 <__fixunssfsi+0x22>
    5940:	ba 95       	dec	r27
    5942:	c9 f7       	brne	.-14     	; 0x5936 <__fixunssfsi+0x12>
    5944:	12 c0       	rjmp	.+36     	; 0x596a <__fixunssfsi+0x46>
    5946:	b1 30       	cpi	r27, 0x01	; 1
    5948:	81 f0       	breq	.+32     	; 0x596a <__fixunssfsi+0x46>
    594a:	3b d1       	rcall	.+630    	; 0x5bc2 <__fp_zero>
    594c:	b1 e0       	ldi	r27, 0x01	; 1
    594e:	08 95       	ret
    5950:	38 c1       	rjmp	.+624    	; 0x5bc2 <__fp_zero>
    5952:	67 2f       	mov	r22, r23
    5954:	78 2f       	mov	r23, r24
    5956:	88 27       	eor	r24, r24
    5958:	b8 5f       	subi	r27, 0xF8	; 248
    595a:	39 f0       	breq	.+14     	; 0x596a <__fixunssfsi+0x46>
    595c:	b9 3f       	cpi	r27, 0xF9	; 249
    595e:	cc f3       	brlt	.-14     	; 0x5952 <__fixunssfsi+0x2e>
    5960:	86 95       	lsr	r24
    5962:	77 95       	ror	r23
    5964:	67 95       	ror	r22
    5966:	b3 95       	inc	r27
    5968:	d9 f7       	brne	.-10     	; 0x5960 <__fixunssfsi+0x3c>
    596a:	3e f4       	brtc	.+14     	; 0x597a <__fixunssfsi+0x56>
    596c:	90 95       	com	r25
    596e:	80 95       	com	r24
    5970:	70 95       	com	r23
    5972:	61 95       	neg	r22
    5974:	7f 4f       	sbci	r23, 0xFF	; 255
    5976:	8f 4f       	sbci	r24, 0xFF	; 255
    5978:	9f 4f       	sbci	r25, 0xFF	; 255
    597a:	08 95       	ret

0000597c <__floatunsisf>:
    597c:	e8 94       	clt
    597e:	09 c0       	rjmp	.+18     	; 0x5992 <__floatsisf+0x12>

00005980 <__floatsisf>:
    5980:	97 fb       	bst	r25, 7
    5982:	3e f4       	brtc	.+14     	; 0x5992 <__floatsisf+0x12>
    5984:	90 95       	com	r25
    5986:	80 95       	com	r24
    5988:	70 95       	com	r23
    598a:	61 95       	neg	r22
    598c:	7f 4f       	sbci	r23, 0xFF	; 255
    598e:	8f 4f       	sbci	r24, 0xFF	; 255
    5990:	9f 4f       	sbci	r25, 0xFF	; 255
    5992:	99 23       	and	r25, r25
    5994:	a9 f0       	breq	.+42     	; 0x59c0 <__floatsisf+0x40>
    5996:	f9 2f       	mov	r31, r25
    5998:	96 e9       	ldi	r25, 0x96	; 150
    599a:	bb 27       	eor	r27, r27
    599c:	93 95       	inc	r25
    599e:	f6 95       	lsr	r31
    59a0:	87 95       	ror	r24
    59a2:	77 95       	ror	r23
    59a4:	67 95       	ror	r22
    59a6:	b7 95       	ror	r27
    59a8:	f1 11       	cpse	r31, r1
    59aa:	f8 cf       	rjmp	.-16     	; 0x599c <__floatsisf+0x1c>
    59ac:	fa f4       	brpl	.+62     	; 0x59ec <__floatsisf+0x6c>
    59ae:	bb 0f       	add	r27, r27
    59b0:	11 f4       	brne	.+4      	; 0x59b6 <__floatsisf+0x36>
    59b2:	60 ff       	sbrs	r22, 0
    59b4:	1b c0       	rjmp	.+54     	; 0x59ec <__floatsisf+0x6c>
    59b6:	6f 5f       	subi	r22, 0xFF	; 255
    59b8:	7f 4f       	sbci	r23, 0xFF	; 255
    59ba:	8f 4f       	sbci	r24, 0xFF	; 255
    59bc:	9f 4f       	sbci	r25, 0xFF	; 255
    59be:	16 c0       	rjmp	.+44     	; 0x59ec <__floatsisf+0x6c>
    59c0:	88 23       	and	r24, r24
    59c2:	11 f0       	breq	.+4      	; 0x59c8 <__floatsisf+0x48>
    59c4:	96 e9       	ldi	r25, 0x96	; 150
    59c6:	11 c0       	rjmp	.+34     	; 0x59ea <__floatsisf+0x6a>
    59c8:	77 23       	and	r23, r23
    59ca:	21 f0       	breq	.+8      	; 0x59d4 <__floatsisf+0x54>
    59cc:	9e e8       	ldi	r25, 0x8E	; 142
    59ce:	87 2f       	mov	r24, r23
    59d0:	76 2f       	mov	r23, r22
    59d2:	05 c0       	rjmp	.+10     	; 0x59de <__floatsisf+0x5e>
    59d4:	66 23       	and	r22, r22
    59d6:	71 f0       	breq	.+28     	; 0x59f4 <__floatsisf+0x74>
    59d8:	96 e8       	ldi	r25, 0x86	; 134
    59da:	86 2f       	mov	r24, r22
    59dc:	70 e0       	ldi	r23, 0x00	; 0
    59de:	60 e0       	ldi	r22, 0x00	; 0
    59e0:	2a f0       	brmi	.+10     	; 0x59ec <__floatsisf+0x6c>
    59e2:	9a 95       	dec	r25
    59e4:	66 0f       	add	r22, r22
    59e6:	77 1f       	adc	r23, r23
    59e8:	88 1f       	adc	r24, r24
    59ea:	da f7       	brpl	.-10     	; 0x59e2 <__floatsisf+0x62>
    59ec:	88 0f       	add	r24, r24
    59ee:	96 95       	lsr	r25
    59f0:	87 95       	ror	r24
    59f2:	97 f9       	bld	r25, 7
    59f4:	08 95       	ret

000059f6 <floor>:
    59f6:	ce d0       	rcall	.+412    	; 0x5b94 <__fp_trunc>
    59f8:	80 f0       	brcs	.+32     	; 0x5a1a <floor+0x24>
    59fa:	9f 37       	cpi	r25, 0x7F	; 127
    59fc:	40 f4       	brcc	.+16     	; 0x5a0e <floor+0x18>
    59fe:	91 11       	cpse	r25, r1
    5a00:	0e f0       	brts	.+2      	; 0x5a04 <floor+0xe>
    5a02:	e0 c0       	rjmp	.+448    	; 0x5bc4 <__fp_szero>
    5a04:	60 e0       	ldi	r22, 0x00	; 0
    5a06:	70 e0       	ldi	r23, 0x00	; 0
    5a08:	80 e8       	ldi	r24, 0x80	; 128
    5a0a:	9f eb       	ldi	r25, 0xBF	; 191
    5a0c:	08 95       	ret
    5a0e:	26 f4       	brtc	.+8      	; 0x5a18 <floor+0x22>
    5a10:	1b 16       	cp	r1, r27
    5a12:	61 1d       	adc	r22, r1
    5a14:	71 1d       	adc	r23, r1
    5a16:	81 1d       	adc	r24, r1
    5a18:	2b c0       	rjmp	.+86     	; 0x5a70 <__fp_mintl>
    5a1a:	45 c0       	rjmp	.+138    	; 0x5aa6 <__fp_mpack>

00005a1c <__fp_cmp>:
    5a1c:	99 0f       	add	r25, r25
    5a1e:	00 08       	sbc	r0, r0
    5a20:	55 0f       	add	r21, r21
    5a22:	aa 0b       	sbc	r26, r26
    5a24:	e0 e8       	ldi	r30, 0x80	; 128
    5a26:	fe ef       	ldi	r31, 0xFE	; 254
    5a28:	16 16       	cp	r1, r22
    5a2a:	17 06       	cpc	r1, r23
    5a2c:	e8 07       	cpc	r30, r24
    5a2e:	f9 07       	cpc	r31, r25
    5a30:	c0 f0       	brcs	.+48     	; 0x5a62 <__fp_cmp+0x46>
    5a32:	12 16       	cp	r1, r18
    5a34:	13 06       	cpc	r1, r19
    5a36:	e4 07       	cpc	r30, r20
    5a38:	f5 07       	cpc	r31, r21
    5a3a:	98 f0       	brcs	.+38     	; 0x5a62 <__fp_cmp+0x46>
    5a3c:	62 1b       	sub	r22, r18
    5a3e:	73 0b       	sbc	r23, r19
    5a40:	84 0b       	sbc	r24, r20
    5a42:	95 0b       	sbc	r25, r21
    5a44:	39 f4       	brne	.+14     	; 0x5a54 <__fp_cmp+0x38>
    5a46:	0a 26       	eor	r0, r26
    5a48:	61 f0       	breq	.+24     	; 0x5a62 <__fp_cmp+0x46>
    5a4a:	23 2b       	or	r18, r19
    5a4c:	24 2b       	or	r18, r20
    5a4e:	25 2b       	or	r18, r21
    5a50:	21 f4       	brne	.+8      	; 0x5a5a <__fp_cmp+0x3e>
    5a52:	08 95       	ret
    5a54:	0a 26       	eor	r0, r26
    5a56:	09 f4       	brne	.+2      	; 0x5a5a <__fp_cmp+0x3e>
    5a58:	a1 40       	sbci	r26, 0x01	; 1
    5a5a:	a6 95       	lsr	r26
    5a5c:	8f ef       	ldi	r24, 0xFF	; 255
    5a5e:	81 1d       	adc	r24, r1
    5a60:	81 1d       	adc	r24, r1
    5a62:	08 95       	ret

00005a64 <__fp_inf>:
    5a64:	97 f9       	bld	r25, 7
    5a66:	9f 67       	ori	r25, 0x7F	; 127
    5a68:	80 e8       	ldi	r24, 0x80	; 128
    5a6a:	70 e0       	ldi	r23, 0x00	; 0
    5a6c:	60 e0       	ldi	r22, 0x00	; 0
    5a6e:	08 95       	ret

00005a70 <__fp_mintl>:
    5a70:	88 23       	and	r24, r24
    5a72:	71 f4       	brne	.+28     	; 0x5a90 <__fp_mintl+0x20>
    5a74:	77 23       	and	r23, r23
    5a76:	21 f0       	breq	.+8      	; 0x5a80 <__fp_mintl+0x10>
    5a78:	98 50       	subi	r25, 0x08	; 8
    5a7a:	87 2b       	or	r24, r23
    5a7c:	76 2f       	mov	r23, r22
    5a7e:	07 c0       	rjmp	.+14     	; 0x5a8e <__fp_mintl+0x1e>
    5a80:	66 23       	and	r22, r22
    5a82:	11 f4       	brne	.+4      	; 0x5a88 <__fp_mintl+0x18>
    5a84:	99 27       	eor	r25, r25
    5a86:	0d c0       	rjmp	.+26     	; 0x5aa2 <__fp_mintl+0x32>
    5a88:	90 51       	subi	r25, 0x10	; 16
    5a8a:	86 2b       	or	r24, r22
    5a8c:	70 e0       	ldi	r23, 0x00	; 0
    5a8e:	60 e0       	ldi	r22, 0x00	; 0
    5a90:	2a f0       	brmi	.+10     	; 0x5a9c <__fp_mintl+0x2c>
    5a92:	9a 95       	dec	r25
    5a94:	66 0f       	add	r22, r22
    5a96:	77 1f       	adc	r23, r23
    5a98:	88 1f       	adc	r24, r24
    5a9a:	da f7       	brpl	.-10     	; 0x5a92 <__fp_mintl+0x22>
    5a9c:	88 0f       	add	r24, r24
    5a9e:	96 95       	lsr	r25
    5aa0:	87 95       	ror	r24
    5aa2:	97 f9       	bld	r25, 7
    5aa4:	08 95       	ret

00005aa6 <__fp_mpack>:
    5aa6:	9f 3f       	cpi	r25, 0xFF	; 255
    5aa8:	31 f0       	breq	.+12     	; 0x5ab6 <__fp_mpack_finite+0xc>

00005aaa <__fp_mpack_finite>:
    5aaa:	91 50       	subi	r25, 0x01	; 1
    5aac:	20 f4       	brcc	.+8      	; 0x5ab6 <__fp_mpack_finite+0xc>
    5aae:	87 95       	ror	r24
    5ab0:	77 95       	ror	r23
    5ab2:	67 95       	ror	r22
    5ab4:	b7 95       	ror	r27
    5ab6:	88 0f       	add	r24, r24
    5ab8:	91 1d       	adc	r25, r1
    5aba:	96 95       	lsr	r25
    5abc:	87 95       	ror	r24
    5abe:	97 f9       	bld	r25, 7
    5ac0:	08 95       	ret

00005ac2 <__fp_nan>:
    5ac2:	9f ef       	ldi	r25, 0xFF	; 255
    5ac4:	80 ec       	ldi	r24, 0xC0	; 192
    5ac6:	08 95       	ret

00005ac8 <__fp_powser>:
    5ac8:	df 93       	push	r29
    5aca:	cf 93       	push	r28
    5acc:	1f 93       	push	r17
    5ace:	0f 93       	push	r16
    5ad0:	ff 92       	push	r15
    5ad2:	ef 92       	push	r14
    5ad4:	df 92       	push	r13
    5ad6:	7b 01       	movw	r14, r22
    5ad8:	8c 01       	movw	r16, r24
    5ada:	68 94       	set
    5adc:	05 c0       	rjmp	.+10     	; 0x5ae8 <__fp_powser+0x20>
    5ade:	da 2e       	mov	r13, r26
    5ae0:	ef 01       	movw	r28, r30
    5ae2:	f0 d0       	rcall	.+480    	; 0x5cc4 <__mulsf3x>
    5ae4:	fe 01       	movw	r30, r28
    5ae6:	e8 94       	clt
    5ae8:	a5 91       	lpm	r26, Z+
    5aea:	25 91       	lpm	r18, Z+
    5aec:	35 91       	lpm	r19, Z+
    5aee:	45 91       	lpm	r20, Z+
    5af0:	55 91       	lpm	r21, Z+
    5af2:	ae f3       	brts	.-22     	; 0x5ade <__fp_powser+0x16>
    5af4:	ef 01       	movw	r28, r30
    5af6:	17 de       	rcall	.-978    	; 0x5726 <__addsf3x>
    5af8:	fe 01       	movw	r30, r28
    5afa:	97 01       	movw	r18, r14
    5afc:	a8 01       	movw	r20, r16
    5afe:	da 94       	dec	r13
    5b00:	79 f7       	brne	.-34     	; 0x5ae0 <__fp_powser+0x18>
    5b02:	df 90       	pop	r13
    5b04:	ef 90       	pop	r14
    5b06:	ff 90       	pop	r15
    5b08:	0f 91       	pop	r16
    5b0a:	1f 91       	pop	r17
    5b0c:	cf 91       	pop	r28
    5b0e:	df 91       	pop	r29
    5b10:	08 95       	ret

00005b12 <__fp_pscA>:
    5b12:	00 24       	eor	r0, r0
    5b14:	0a 94       	dec	r0
    5b16:	16 16       	cp	r1, r22
    5b18:	17 06       	cpc	r1, r23
    5b1a:	18 06       	cpc	r1, r24
    5b1c:	09 06       	cpc	r0, r25
    5b1e:	08 95       	ret

00005b20 <__fp_pscB>:
    5b20:	00 24       	eor	r0, r0
    5b22:	0a 94       	dec	r0
    5b24:	12 16       	cp	r1, r18
    5b26:	13 06       	cpc	r1, r19
    5b28:	14 06       	cpc	r1, r20
    5b2a:	05 06       	cpc	r0, r21
    5b2c:	08 95       	ret

00005b2e <__fp_round>:
    5b2e:	09 2e       	mov	r0, r25
    5b30:	03 94       	inc	r0
    5b32:	00 0c       	add	r0, r0
    5b34:	11 f4       	brne	.+4      	; 0x5b3a <__fp_round+0xc>
    5b36:	88 23       	and	r24, r24
    5b38:	52 f0       	brmi	.+20     	; 0x5b4e <__fp_round+0x20>
    5b3a:	bb 0f       	add	r27, r27
    5b3c:	40 f4       	brcc	.+16     	; 0x5b4e <__fp_round+0x20>
    5b3e:	bf 2b       	or	r27, r31
    5b40:	11 f4       	brne	.+4      	; 0x5b46 <__fp_round+0x18>
    5b42:	60 ff       	sbrs	r22, 0
    5b44:	04 c0       	rjmp	.+8      	; 0x5b4e <__fp_round+0x20>
    5b46:	6f 5f       	subi	r22, 0xFF	; 255
    5b48:	7f 4f       	sbci	r23, 0xFF	; 255
    5b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    5b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b4e:	08 95       	ret

00005b50 <__fp_split3>:
    5b50:	57 fd       	sbrc	r21, 7
    5b52:	90 58       	subi	r25, 0x80	; 128
    5b54:	44 0f       	add	r20, r20
    5b56:	55 1f       	adc	r21, r21
    5b58:	59 f0       	breq	.+22     	; 0x5b70 <__fp_splitA+0x10>
    5b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    5b5c:	71 f0       	breq	.+28     	; 0x5b7a <__fp_splitA+0x1a>
    5b5e:	47 95       	ror	r20

00005b60 <__fp_splitA>:
    5b60:	88 0f       	add	r24, r24
    5b62:	97 fb       	bst	r25, 7
    5b64:	99 1f       	adc	r25, r25
    5b66:	61 f0       	breq	.+24     	; 0x5b80 <__fp_splitA+0x20>
    5b68:	9f 3f       	cpi	r25, 0xFF	; 255
    5b6a:	79 f0       	breq	.+30     	; 0x5b8a <__fp_splitA+0x2a>
    5b6c:	87 95       	ror	r24
    5b6e:	08 95       	ret
    5b70:	12 16       	cp	r1, r18
    5b72:	13 06       	cpc	r1, r19
    5b74:	14 06       	cpc	r1, r20
    5b76:	55 1f       	adc	r21, r21
    5b78:	f2 cf       	rjmp	.-28     	; 0x5b5e <__fp_split3+0xe>
    5b7a:	46 95       	lsr	r20
    5b7c:	f1 df       	rcall	.-30     	; 0x5b60 <__fp_splitA>
    5b7e:	08 c0       	rjmp	.+16     	; 0x5b90 <__fp_splitA+0x30>
    5b80:	16 16       	cp	r1, r22
    5b82:	17 06       	cpc	r1, r23
    5b84:	18 06       	cpc	r1, r24
    5b86:	99 1f       	adc	r25, r25
    5b88:	f1 cf       	rjmp	.-30     	; 0x5b6c <__fp_splitA+0xc>
    5b8a:	86 95       	lsr	r24
    5b8c:	71 05       	cpc	r23, r1
    5b8e:	61 05       	cpc	r22, r1
    5b90:	08 94       	sec
    5b92:	08 95       	ret

00005b94 <__fp_trunc>:
    5b94:	e5 df       	rcall	.-54     	; 0x5b60 <__fp_splitA>
    5b96:	a0 f0       	brcs	.+40     	; 0x5bc0 <__fp_trunc+0x2c>
    5b98:	be e7       	ldi	r27, 0x7E	; 126
    5b9a:	b9 17       	cp	r27, r25
    5b9c:	88 f4       	brcc	.+34     	; 0x5bc0 <__fp_trunc+0x2c>
    5b9e:	bb 27       	eor	r27, r27
    5ba0:	9f 38       	cpi	r25, 0x8F	; 143
    5ba2:	60 f4       	brcc	.+24     	; 0x5bbc <__fp_trunc+0x28>
    5ba4:	16 16       	cp	r1, r22
    5ba6:	b1 1d       	adc	r27, r1
    5ba8:	67 2f       	mov	r22, r23
    5baa:	78 2f       	mov	r23, r24
    5bac:	88 27       	eor	r24, r24
    5bae:	98 5f       	subi	r25, 0xF8	; 248
    5bb0:	f7 cf       	rjmp	.-18     	; 0x5ba0 <__fp_trunc+0xc>
    5bb2:	86 95       	lsr	r24
    5bb4:	77 95       	ror	r23
    5bb6:	67 95       	ror	r22
    5bb8:	b1 1d       	adc	r27, r1
    5bba:	93 95       	inc	r25
    5bbc:	96 39       	cpi	r25, 0x96	; 150
    5bbe:	c8 f3       	brcs	.-14     	; 0x5bb2 <__fp_trunc+0x1e>
    5bc0:	08 95       	ret

00005bc2 <__fp_zero>:
    5bc2:	e8 94       	clt

00005bc4 <__fp_szero>:
    5bc4:	bb 27       	eor	r27, r27
    5bc6:	66 27       	eor	r22, r22
    5bc8:	77 27       	eor	r23, r23
    5bca:	cb 01       	movw	r24, r22
    5bcc:	97 f9       	bld	r25, 7
    5bce:	08 95       	ret

00005bd0 <__gesf2>:
    5bd0:	25 df       	rcall	.-438    	; 0x5a1c <__fp_cmp>
    5bd2:	08 f4       	brcc	.+2      	; 0x5bd6 <__gesf2+0x6>
    5bd4:	8f ef       	ldi	r24, 0xFF	; 255
    5bd6:	08 95       	ret

00005bd8 <inverse>:
    5bd8:	9b 01       	movw	r18, r22
    5bda:	ac 01       	movw	r20, r24
    5bdc:	60 e0       	ldi	r22, 0x00	; 0
    5bde:	70 e0       	ldi	r23, 0x00	; 0
    5be0:	80 e8       	ldi	r24, 0x80	; 128
    5be2:	9f e3       	ldi	r25, 0x3F	; 63
    5be4:	32 ce       	rjmp	.-924    	; 0x584a <__divsf3>

00005be6 <lround>:
    5be6:	bc df       	rcall	.-136    	; 0x5b60 <__fp_splitA>
    5be8:	58 f1       	brcs	.+86     	; 0x5c40 <lround+0x5a>
    5bea:	9e 57       	subi	r25, 0x7E	; 126
    5bec:	58 f1       	brcs	.+86     	; 0x5c44 <lround+0x5e>
    5bee:	98 51       	subi	r25, 0x18	; 24
    5bf0:	a0 f0       	brcs	.+40     	; 0x5c1a <lround+0x34>
    5bf2:	e9 f0       	breq	.+58     	; 0x5c2e <lround+0x48>
    5bf4:	98 30       	cpi	r25, 0x08	; 8
    5bf6:	20 f5       	brcc	.+72     	; 0x5c40 <lround+0x5a>
    5bf8:	09 2e       	mov	r0, r25
    5bfa:	99 27       	eor	r25, r25
    5bfc:	66 0f       	add	r22, r22
    5bfe:	77 1f       	adc	r23, r23
    5c00:	88 1f       	adc	r24, r24
    5c02:	99 1f       	adc	r25, r25
    5c04:	0a 94       	dec	r0
    5c06:	d1 f7       	brne	.-12     	; 0x5bfc <lround+0x16>
    5c08:	12 c0       	rjmp	.+36     	; 0x5c2e <lround+0x48>
    5c0a:	06 2e       	mov	r0, r22
    5c0c:	67 2f       	mov	r22, r23
    5c0e:	78 2f       	mov	r23, r24
    5c10:	88 27       	eor	r24, r24
    5c12:	98 5f       	subi	r25, 0xF8	; 248
    5c14:	11 f4       	brne	.+4      	; 0x5c1a <lround+0x34>
    5c16:	00 0c       	add	r0, r0
    5c18:	07 c0       	rjmp	.+14     	; 0x5c28 <lround+0x42>
    5c1a:	99 3f       	cpi	r25, 0xF9	; 249
    5c1c:	b4 f3       	brlt	.-20     	; 0x5c0a <lround+0x24>
    5c1e:	86 95       	lsr	r24
    5c20:	77 95       	ror	r23
    5c22:	67 95       	ror	r22
    5c24:	93 95       	inc	r25
    5c26:	d9 f7       	brne	.-10     	; 0x5c1e <lround+0x38>
    5c28:	61 1d       	adc	r22, r1
    5c2a:	71 1d       	adc	r23, r1
    5c2c:	81 1d       	adc	r24, r1
    5c2e:	3e f4       	brtc	.+14     	; 0x5c3e <lround+0x58>
    5c30:	90 95       	com	r25
    5c32:	80 95       	com	r24
    5c34:	70 95       	com	r23
    5c36:	61 95       	neg	r22
    5c38:	7f 4f       	sbci	r23, 0xFF	; 255
    5c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    5c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3e:	08 95       	ret
    5c40:	68 94       	set
    5c42:	c0 cf       	rjmp	.-128    	; 0x5bc4 <__fp_szero>
    5c44:	be cf       	rjmp	.-132    	; 0x5bc2 <__fp_zero>

00005c46 <modf>:
    5c46:	fa 01       	movw	r30, r20
    5c48:	dc 01       	movw	r26, r24
    5c4a:	aa 0f       	add	r26, r26
    5c4c:	bb 1f       	adc	r27, r27
    5c4e:	9b 01       	movw	r18, r22
    5c50:	ac 01       	movw	r20, r24
    5c52:	bf 57       	subi	r27, 0x7F	; 127
    5c54:	28 f4       	brcc	.+10     	; 0x5c60 <modf+0x1a>
    5c56:	22 27       	eor	r18, r18
    5c58:	33 27       	eor	r19, r19
    5c5a:	44 27       	eor	r20, r20
    5c5c:	50 78       	andi	r21, 0x80	; 128
    5c5e:	1f c0       	rjmp	.+62     	; 0x5c9e <modf+0x58>
    5c60:	b7 51       	subi	r27, 0x17	; 23
    5c62:	88 f4       	brcc	.+34     	; 0x5c86 <modf+0x40>
    5c64:	ab 2f       	mov	r26, r27
    5c66:	00 24       	eor	r0, r0
    5c68:	46 95       	lsr	r20
    5c6a:	37 95       	ror	r19
    5c6c:	27 95       	ror	r18
    5c6e:	01 1c       	adc	r0, r1
    5c70:	a3 95       	inc	r26
    5c72:	d2 f3       	brmi	.-12     	; 0x5c68 <modf+0x22>
    5c74:	00 20       	and	r0, r0
    5c76:	69 f0       	breq	.+26     	; 0x5c92 <modf+0x4c>
    5c78:	22 0f       	add	r18, r18
    5c7a:	33 1f       	adc	r19, r19
    5c7c:	44 1f       	adc	r20, r20
    5c7e:	b3 95       	inc	r27
    5c80:	da f3       	brmi	.-10     	; 0x5c78 <modf+0x32>
    5c82:	0d d0       	rcall	.+26     	; 0x5c9e <modf+0x58>
    5c84:	3e cd       	rjmp	.-1412   	; 0x5702 <__subsf3>
    5c86:	61 30       	cpi	r22, 0x01	; 1
    5c88:	71 05       	cpc	r23, r1
    5c8a:	a0 e8       	ldi	r26, 0x80	; 128
    5c8c:	8a 07       	cpc	r24, r26
    5c8e:	b9 46       	sbci	r27, 0x69	; 105
    5c90:	30 f4       	brcc	.+12     	; 0x5c9e <modf+0x58>
    5c92:	9b 01       	movw	r18, r22
    5c94:	ac 01       	movw	r20, r24
    5c96:	66 27       	eor	r22, r22
    5c98:	77 27       	eor	r23, r23
    5c9a:	88 27       	eor	r24, r24
    5c9c:	90 78       	andi	r25, 0x80	; 128
    5c9e:	30 96       	adiw	r30, 0x00	; 0
    5ca0:	21 f0       	breq	.+8      	; 0x5caa <modf+0x64>
    5ca2:	20 83       	st	Z, r18
    5ca4:	31 83       	std	Z+1, r19	; 0x01
    5ca6:	42 83       	std	Z+2, r20	; 0x02
    5ca8:	53 83       	std	Z+3, r21	; 0x03
    5caa:	08 95       	ret

00005cac <__mulsf3>:
    5cac:	0b d0       	rcall	.+22     	; 0x5cc4 <__mulsf3x>
    5cae:	3f cf       	rjmp	.-386    	; 0x5b2e <__fp_round>
    5cb0:	30 df       	rcall	.-416    	; 0x5b12 <__fp_pscA>
    5cb2:	28 f0       	brcs	.+10     	; 0x5cbe <__mulsf3+0x12>
    5cb4:	35 df       	rcall	.-406    	; 0x5b20 <__fp_pscB>
    5cb6:	18 f0       	brcs	.+6      	; 0x5cbe <__mulsf3+0x12>
    5cb8:	95 23       	and	r25, r21
    5cba:	09 f0       	breq	.+2      	; 0x5cbe <__mulsf3+0x12>
    5cbc:	d3 ce       	rjmp	.-602    	; 0x5a64 <__fp_inf>
    5cbe:	01 cf       	rjmp	.-510    	; 0x5ac2 <__fp_nan>
    5cc0:	11 24       	eor	r1, r1
    5cc2:	80 cf       	rjmp	.-256    	; 0x5bc4 <__fp_szero>

00005cc4 <__mulsf3x>:
    5cc4:	45 df       	rcall	.-374    	; 0x5b50 <__fp_split3>
    5cc6:	a0 f3       	brcs	.-24     	; 0x5cb0 <__mulsf3+0x4>

00005cc8 <__mulsf3_pse>:
    5cc8:	95 9f       	mul	r25, r21
    5cca:	d1 f3       	breq	.-12     	; 0x5cc0 <__mulsf3+0x14>
    5ccc:	95 0f       	add	r25, r21
    5cce:	50 e0       	ldi	r21, 0x00	; 0
    5cd0:	55 1f       	adc	r21, r21
    5cd2:	62 9f       	mul	r22, r18
    5cd4:	f0 01       	movw	r30, r0
    5cd6:	72 9f       	mul	r23, r18
    5cd8:	bb 27       	eor	r27, r27
    5cda:	f0 0d       	add	r31, r0
    5cdc:	b1 1d       	adc	r27, r1
    5cde:	63 9f       	mul	r22, r19
    5ce0:	aa 27       	eor	r26, r26
    5ce2:	f0 0d       	add	r31, r0
    5ce4:	b1 1d       	adc	r27, r1
    5ce6:	aa 1f       	adc	r26, r26
    5ce8:	64 9f       	mul	r22, r20
    5cea:	66 27       	eor	r22, r22
    5cec:	b0 0d       	add	r27, r0
    5cee:	a1 1d       	adc	r26, r1
    5cf0:	66 1f       	adc	r22, r22
    5cf2:	82 9f       	mul	r24, r18
    5cf4:	22 27       	eor	r18, r18
    5cf6:	b0 0d       	add	r27, r0
    5cf8:	a1 1d       	adc	r26, r1
    5cfa:	62 1f       	adc	r22, r18
    5cfc:	73 9f       	mul	r23, r19
    5cfe:	b0 0d       	add	r27, r0
    5d00:	a1 1d       	adc	r26, r1
    5d02:	62 1f       	adc	r22, r18
    5d04:	83 9f       	mul	r24, r19
    5d06:	a0 0d       	add	r26, r0
    5d08:	61 1d       	adc	r22, r1
    5d0a:	22 1f       	adc	r18, r18
    5d0c:	74 9f       	mul	r23, r20
    5d0e:	33 27       	eor	r19, r19
    5d10:	a0 0d       	add	r26, r0
    5d12:	61 1d       	adc	r22, r1
    5d14:	23 1f       	adc	r18, r19
    5d16:	84 9f       	mul	r24, r20
    5d18:	60 0d       	add	r22, r0
    5d1a:	21 1d       	adc	r18, r1
    5d1c:	82 2f       	mov	r24, r18
    5d1e:	76 2f       	mov	r23, r22
    5d20:	6a 2f       	mov	r22, r26
    5d22:	11 24       	eor	r1, r1
    5d24:	9f 57       	subi	r25, 0x7F	; 127
    5d26:	50 40       	sbci	r21, 0x00	; 0
    5d28:	8a f0       	brmi	.+34     	; 0x5d4c <__mulsf3_pse+0x84>
    5d2a:	e1 f0       	breq	.+56     	; 0x5d64 <__mulsf3_pse+0x9c>
    5d2c:	88 23       	and	r24, r24
    5d2e:	4a f0       	brmi	.+18     	; 0x5d42 <__mulsf3_pse+0x7a>
    5d30:	ee 0f       	add	r30, r30
    5d32:	ff 1f       	adc	r31, r31
    5d34:	bb 1f       	adc	r27, r27
    5d36:	66 1f       	adc	r22, r22
    5d38:	77 1f       	adc	r23, r23
    5d3a:	88 1f       	adc	r24, r24
    5d3c:	91 50       	subi	r25, 0x01	; 1
    5d3e:	50 40       	sbci	r21, 0x00	; 0
    5d40:	a9 f7       	brne	.-22     	; 0x5d2c <__mulsf3_pse+0x64>
    5d42:	9e 3f       	cpi	r25, 0xFE	; 254
    5d44:	51 05       	cpc	r21, r1
    5d46:	70 f0       	brcs	.+28     	; 0x5d64 <__mulsf3_pse+0x9c>
    5d48:	8d ce       	rjmp	.-742    	; 0x5a64 <__fp_inf>
    5d4a:	3c cf       	rjmp	.-392    	; 0x5bc4 <__fp_szero>
    5d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    5d4e:	ec f3       	brlt	.-6      	; 0x5d4a <__mulsf3_pse+0x82>
    5d50:	98 3e       	cpi	r25, 0xE8	; 232
    5d52:	dc f3       	brlt	.-10     	; 0x5d4a <__mulsf3_pse+0x82>
    5d54:	86 95       	lsr	r24
    5d56:	77 95       	ror	r23
    5d58:	67 95       	ror	r22
    5d5a:	b7 95       	ror	r27
    5d5c:	f7 95       	ror	r31
    5d5e:	e7 95       	ror	r30
    5d60:	9f 5f       	subi	r25, 0xFF	; 255
    5d62:	c1 f7       	brne	.-16     	; 0x5d54 <__mulsf3_pse+0x8c>
    5d64:	fe 2b       	or	r31, r30
    5d66:	88 0f       	add	r24, r24
    5d68:	91 1d       	adc	r25, r1
    5d6a:	96 95       	lsr	r25
    5d6c:	87 95       	ror	r24
    5d6e:	97 f9       	bld	r25, 7
    5d70:	08 95       	ret

00005d72 <round>:
    5d72:	f6 de       	rcall	.-532    	; 0x5b60 <__fp_splitA>
    5d74:	e0 f0       	brcs	.+56     	; 0x5dae <round+0x3c>
    5d76:	9e 37       	cpi	r25, 0x7E	; 126
    5d78:	d8 f0       	brcs	.+54     	; 0x5db0 <round+0x3e>
    5d7a:	96 39       	cpi	r25, 0x96	; 150
    5d7c:	b8 f4       	brcc	.+46     	; 0x5dac <round+0x3a>
    5d7e:	9e 38       	cpi	r25, 0x8E	; 142
    5d80:	48 f4       	brcc	.+18     	; 0x5d94 <round+0x22>
    5d82:	67 2f       	mov	r22, r23
    5d84:	78 2f       	mov	r23, r24
    5d86:	88 27       	eor	r24, r24
    5d88:	98 5f       	subi	r25, 0xF8	; 248
    5d8a:	f9 cf       	rjmp	.-14     	; 0x5d7e <round+0xc>
    5d8c:	86 95       	lsr	r24
    5d8e:	77 95       	ror	r23
    5d90:	67 95       	ror	r22
    5d92:	93 95       	inc	r25
    5d94:	95 39       	cpi	r25, 0x95	; 149
    5d96:	d0 f3       	brcs	.-12     	; 0x5d8c <round+0x1a>
    5d98:	b6 2f       	mov	r27, r22
    5d9a:	b1 70       	andi	r27, 0x01	; 1
    5d9c:	6b 0f       	add	r22, r27
    5d9e:	71 1d       	adc	r23, r1
    5da0:	81 1d       	adc	r24, r1
    5da2:	20 f4       	brcc	.+8      	; 0x5dac <round+0x3a>
    5da4:	87 95       	ror	r24
    5da6:	77 95       	ror	r23
    5da8:	67 95       	ror	r22
    5daa:	93 95       	inc	r25
    5dac:	61 ce       	rjmp	.-830    	; 0x5a70 <__fp_mintl>
    5dae:	7b ce       	rjmp	.-778    	; 0x5aa6 <__fp_mpack>
    5db0:	09 cf       	rjmp	.-494    	; 0x5bc4 <__fp_szero>
    5db2:	11 f4       	brne	.+4      	; 0x5db8 <round+0x46>
    5db4:	0e f4       	brtc	.+2      	; 0x5db8 <round+0x46>
    5db6:	85 ce       	rjmp	.-758    	; 0x5ac2 <__fp_nan>
    5db8:	76 ce       	rjmp	.-788    	; 0x5aa6 <__fp_mpack>

00005dba <sqrt>:
    5dba:	d2 de       	rcall	.-604    	; 0x5b60 <__fp_splitA>
    5dbc:	d0 f3       	brcs	.-12     	; 0x5db2 <round+0x40>
    5dbe:	99 23       	and	r25, r25
    5dc0:	d9 f3       	breq	.-10     	; 0x5db8 <round+0x46>
    5dc2:	ce f3       	brts	.-14     	; 0x5db6 <round+0x44>
    5dc4:	9f 57       	subi	r25, 0x7F	; 127
    5dc6:	55 0b       	sbc	r21, r21
    5dc8:	87 ff       	sbrs	r24, 7
    5dca:	3f d0       	rcall	.+126    	; 0x5e4a <__fp_norm2>
    5dcc:	00 24       	eor	r0, r0
    5dce:	a0 e6       	ldi	r26, 0x60	; 96
    5dd0:	40 ea       	ldi	r20, 0xA0	; 160
    5dd2:	90 01       	movw	r18, r0
    5dd4:	80 58       	subi	r24, 0x80	; 128
    5dd6:	56 95       	lsr	r21
    5dd8:	97 95       	ror	r25
    5dda:	28 f4       	brcc	.+10     	; 0x5de6 <sqrt+0x2c>
    5ddc:	80 5c       	subi	r24, 0xC0	; 192
    5dde:	66 0f       	add	r22, r22
    5de0:	77 1f       	adc	r23, r23
    5de2:	88 1f       	adc	r24, r24
    5de4:	20 f0       	brcs	.+8      	; 0x5dee <sqrt+0x34>
    5de6:	26 17       	cp	r18, r22
    5de8:	37 07       	cpc	r19, r23
    5dea:	48 07       	cpc	r20, r24
    5dec:	30 f4       	brcc	.+12     	; 0x5dfa <sqrt+0x40>
    5dee:	62 1b       	sub	r22, r18
    5df0:	73 0b       	sbc	r23, r19
    5df2:	84 0b       	sbc	r24, r20
    5df4:	20 29       	or	r18, r0
    5df6:	31 29       	or	r19, r1
    5df8:	4a 2b       	or	r20, r26
    5dfa:	a6 95       	lsr	r26
    5dfc:	17 94       	ror	r1
    5dfe:	07 94       	ror	r0
    5e00:	20 25       	eor	r18, r0
    5e02:	31 25       	eor	r19, r1
    5e04:	4a 27       	eor	r20, r26
    5e06:	58 f7       	brcc	.-42     	; 0x5dde <sqrt+0x24>
    5e08:	66 0f       	add	r22, r22
    5e0a:	77 1f       	adc	r23, r23
    5e0c:	88 1f       	adc	r24, r24
    5e0e:	20 f0       	brcs	.+8      	; 0x5e18 <sqrt+0x5e>
    5e10:	26 17       	cp	r18, r22
    5e12:	37 07       	cpc	r19, r23
    5e14:	48 07       	cpc	r20, r24
    5e16:	30 f4       	brcc	.+12     	; 0x5e24 <sqrt+0x6a>
    5e18:	62 0b       	sbc	r22, r18
    5e1a:	73 0b       	sbc	r23, r19
    5e1c:	84 0b       	sbc	r24, r20
    5e1e:	20 0d       	add	r18, r0
    5e20:	31 1d       	adc	r19, r1
    5e22:	41 1d       	adc	r20, r1
    5e24:	a0 95       	com	r26
    5e26:	81 f7       	brne	.-32     	; 0x5e08 <sqrt+0x4e>
    5e28:	b9 01       	movw	r22, r18
    5e2a:	84 2f       	mov	r24, r20
    5e2c:	91 58       	subi	r25, 0x81	; 129
    5e2e:	88 0f       	add	r24, r24
    5e30:	96 95       	lsr	r25
    5e32:	87 95       	ror	r24
    5e34:	08 95       	ret

00005e36 <square>:
    5e36:	9b 01       	movw	r18, r22
    5e38:	ac 01       	movw	r20, r24
    5e3a:	38 cf       	rjmp	.-400    	; 0x5cac <__mulsf3>

00005e3c <trunc>:
    5e3c:	ab de       	rcall	.-682    	; 0x5b94 <__fp_trunc>
    5e3e:	20 f0       	brcs	.+8      	; 0x5e48 <trunc+0xc>
    5e40:	9f 37       	cpi	r25, 0x7F	; 127
    5e42:	08 f4       	brcc	.+2      	; 0x5e46 <trunc+0xa>
    5e44:	bf ce       	rjmp	.-642    	; 0x5bc4 <__fp_szero>
    5e46:	14 ce       	rjmp	.-984    	; 0x5a70 <__fp_mintl>
    5e48:	2e ce       	rjmp	.-932    	; 0x5aa6 <__fp_mpack>

00005e4a <__fp_norm2>:
    5e4a:	91 50       	subi	r25, 0x01	; 1
    5e4c:	50 40       	sbci	r21, 0x00	; 0
    5e4e:	66 0f       	add	r22, r22
    5e50:	77 1f       	adc	r23, r23
    5e52:	88 1f       	adc	r24, r24
    5e54:	d2 f7       	brpl	.-12     	; 0x5e4a <__fp_norm2>
    5e56:	08 95       	ret

00005e58 <__mulsi3>:
    5e58:	62 9f       	mul	r22, r18
    5e5a:	d0 01       	movw	r26, r0
    5e5c:	73 9f       	mul	r23, r19
    5e5e:	f0 01       	movw	r30, r0
    5e60:	82 9f       	mul	r24, r18
    5e62:	e0 0d       	add	r30, r0
    5e64:	f1 1d       	adc	r31, r1
    5e66:	64 9f       	mul	r22, r20
    5e68:	e0 0d       	add	r30, r0
    5e6a:	f1 1d       	adc	r31, r1
    5e6c:	92 9f       	mul	r25, r18
    5e6e:	f0 0d       	add	r31, r0
    5e70:	83 9f       	mul	r24, r19
    5e72:	f0 0d       	add	r31, r0
    5e74:	74 9f       	mul	r23, r20
    5e76:	f0 0d       	add	r31, r0
    5e78:	65 9f       	mul	r22, r21
    5e7a:	f0 0d       	add	r31, r0
    5e7c:	99 27       	eor	r25, r25
    5e7e:	72 9f       	mul	r23, r18
    5e80:	b0 0d       	add	r27, r0
    5e82:	e1 1d       	adc	r30, r1
    5e84:	f9 1f       	adc	r31, r25
    5e86:	63 9f       	mul	r22, r19
    5e88:	b0 0d       	add	r27, r0
    5e8a:	e1 1d       	adc	r30, r1
    5e8c:	f9 1f       	adc	r31, r25
    5e8e:	bd 01       	movw	r22, r26
    5e90:	cf 01       	movw	r24, r30
    5e92:	11 24       	eor	r1, r1
    5e94:	08 95       	ret

00005e96 <__divmodhi4>:
    5e96:	97 fb       	bst	r25, 7
    5e98:	09 2e       	mov	r0, r25
    5e9a:	07 26       	eor	r0, r23
    5e9c:	0a d0       	rcall	.+20     	; 0x5eb2 <__divmodhi4_neg1>
    5e9e:	77 fd       	sbrc	r23, 7
    5ea0:	04 d0       	rcall	.+8      	; 0x5eaa <__divmodhi4_neg2>
    5ea2:	49 d0       	rcall	.+146    	; 0x5f36 <__udivmodhi4>
    5ea4:	06 d0       	rcall	.+12     	; 0x5eb2 <__divmodhi4_neg1>
    5ea6:	00 20       	and	r0, r0
    5ea8:	1a f4       	brpl	.+6      	; 0x5eb0 <__divmodhi4_exit>

00005eaa <__divmodhi4_neg2>:
    5eaa:	70 95       	com	r23
    5eac:	61 95       	neg	r22
    5eae:	7f 4f       	sbci	r23, 0xFF	; 255

00005eb0 <__divmodhi4_exit>:
    5eb0:	08 95       	ret

00005eb2 <__divmodhi4_neg1>:
    5eb2:	f6 f7       	brtc	.-4      	; 0x5eb0 <__divmodhi4_exit>
    5eb4:	90 95       	com	r25
    5eb6:	81 95       	neg	r24
    5eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eba:	08 95       	ret

00005ebc <__udivmodsi4>:
    5ebc:	a1 e2       	ldi	r26, 0x21	; 33
    5ebe:	1a 2e       	mov	r1, r26
    5ec0:	aa 1b       	sub	r26, r26
    5ec2:	bb 1b       	sub	r27, r27
    5ec4:	fd 01       	movw	r30, r26
    5ec6:	0d c0       	rjmp	.+26     	; 0x5ee2 <__udivmodsi4_ep>

00005ec8 <__udivmodsi4_loop>:
    5ec8:	aa 1f       	adc	r26, r26
    5eca:	bb 1f       	adc	r27, r27
    5ecc:	ee 1f       	adc	r30, r30
    5ece:	ff 1f       	adc	r31, r31
    5ed0:	a2 17       	cp	r26, r18
    5ed2:	b3 07       	cpc	r27, r19
    5ed4:	e4 07       	cpc	r30, r20
    5ed6:	f5 07       	cpc	r31, r21
    5ed8:	20 f0       	brcs	.+8      	; 0x5ee2 <__udivmodsi4_ep>
    5eda:	a2 1b       	sub	r26, r18
    5edc:	b3 0b       	sbc	r27, r19
    5ede:	e4 0b       	sbc	r30, r20
    5ee0:	f5 0b       	sbc	r31, r21

00005ee2 <__udivmodsi4_ep>:
    5ee2:	66 1f       	adc	r22, r22
    5ee4:	77 1f       	adc	r23, r23
    5ee6:	88 1f       	adc	r24, r24
    5ee8:	99 1f       	adc	r25, r25
    5eea:	1a 94       	dec	r1
    5eec:	69 f7       	brne	.-38     	; 0x5ec8 <__udivmodsi4_loop>
    5eee:	60 95       	com	r22
    5ef0:	70 95       	com	r23
    5ef2:	80 95       	com	r24
    5ef4:	90 95       	com	r25
    5ef6:	9b 01       	movw	r18, r22
    5ef8:	ac 01       	movw	r20, r24
    5efa:	bd 01       	movw	r22, r26
    5efc:	cf 01       	movw	r24, r30
    5efe:	08 95       	ret

00005f00 <__divmodsi4>:
    5f00:	97 fb       	bst	r25, 7
    5f02:	09 2e       	mov	r0, r25
    5f04:	05 26       	eor	r0, r21
    5f06:	0e d0       	rcall	.+28     	; 0x5f24 <__divmodsi4_neg1>
    5f08:	57 fd       	sbrc	r21, 7
    5f0a:	04 d0       	rcall	.+8      	; 0x5f14 <__divmodsi4_neg2>
    5f0c:	d7 df       	rcall	.-82     	; 0x5ebc <__udivmodsi4>
    5f0e:	0a d0       	rcall	.+20     	; 0x5f24 <__divmodsi4_neg1>
    5f10:	00 1c       	adc	r0, r0
    5f12:	38 f4       	brcc	.+14     	; 0x5f22 <__divmodsi4_exit>

00005f14 <__divmodsi4_neg2>:
    5f14:	50 95       	com	r21
    5f16:	40 95       	com	r20
    5f18:	30 95       	com	r19
    5f1a:	21 95       	neg	r18
    5f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f1e:	4f 4f       	sbci	r20, 0xFF	; 255
    5f20:	5f 4f       	sbci	r21, 0xFF	; 255

00005f22 <__divmodsi4_exit>:
    5f22:	08 95       	ret

00005f24 <__divmodsi4_neg1>:
    5f24:	f6 f7       	brtc	.-4      	; 0x5f22 <__divmodsi4_exit>
    5f26:	90 95       	com	r25
    5f28:	80 95       	com	r24
    5f2a:	70 95       	com	r23
    5f2c:	61 95       	neg	r22
    5f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f30:	8f 4f       	sbci	r24, 0xFF	; 255
    5f32:	9f 4f       	sbci	r25, 0xFF	; 255
    5f34:	08 95       	ret

00005f36 <__udivmodhi4>:
    5f36:	aa 1b       	sub	r26, r26
    5f38:	bb 1b       	sub	r27, r27
    5f3a:	51 e1       	ldi	r21, 0x11	; 17
    5f3c:	07 c0       	rjmp	.+14     	; 0x5f4c <__udivmodhi4_ep>

00005f3e <__udivmodhi4_loop>:
    5f3e:	aa 1f       	adc	r26, r26
    5f40:	bb 1f       	adc	r27, r27
    5f42:	a6 17       	cp	r26, r22
    5f44:	b7 07       	cpc	r27, r23
    5f46:	10 f0       	brcs	.+4      	; 0x5f4c <__udivmodhi4_ep>
    5f48:	a6 1b       	sub	r26, r22
    5f4a:	b7 0b       	sbc	r27, r23

00005f4c <__udivmodhi4_ep>:
    5f4c:	88 1f       	adc	r24, r24
    5f4e:	99 1f       	adc	r25, r25
    5f50:	5a 95       	dec	r21
    5f52:	a9 f7       	brne	.-22     	; 0x5f3e <__udivmodhi4_loop>
    5f54:	80 95       	com	r24
    5f56:	90 95       	com	r25
    5f58:	bc 01       	movw	r22, r24
    5f5a:	cd 01       	movw	r24, r26
    5f5c:	08 95       	ret

00005f5e <do_rand>:
    5f5e:	af 92       	push	r10
    5f60:	bf 92       	push	r11
    5f62:	cf 92       	push	r12
    5f64:	df 92       	push	r13
    5f66:	ef 92       	push	r14
    5f68:	ff 92       	push	r15
    5f6a:	0f 93       	push	r16
    5f6c:	1f 93       	push	r17
    5f6e:	cf 93       	push	r28
    5f70:	df 93       	push	r29
    5f72:	ec 01       	movw	r28, r24
    5f74:	a8 80       	ld	r10, Y
    5f76:	b9 80       	ldd	r11, Y+1	; 0x01
    5f78:	ca 80       	ldd	r12, Y+2	; 0x02
    5f7a:	db 80       	ldd	r13, Y+3	; 0x03
    5f7c:	a1 14       	cp	r10, r1
    5f7e:	b1 04       	cpc	r11, r1
    5f80:	c1 04       	cpc	r12, r1
    5f82:	d1 04       	cpc	r13, r1
    5f84:	41 f4       	brne	.+16     	; 0x5f96 <do_rand+0x38>
    5f86:	84 e2       	ldi	r24, 0x24	; 36
    5f88:	a8 2e       	mov	r10, r24
    5f8a:	89 ed       	ldi	r24, 0xD9	; 217
    5f8c:	b8 2e       	mov	r11, r24
    5f8e:	8b e5       	ldi	r24, 0x5B	; 91
    5f90:	c8 2e       	mov	r12, r24
    5f92:	87 e0       	ldi	r24, 0x07	; 7
    5f94:	d8 2e       	mov	r13, r24
    5f96:	c6 01       	movw	r24, r12
    5f98:	b5 01       	movw	r22, r10
    5f9a:	2d e1       	ldi	r18, 0x1D	; 29
    5f9c:	33 ef       	ldi	r19, 0xF3	; 243
    5f9e:	41 e0       	ldi	r20, 0x01	; 1
    5fa0:	50 e0       	ldi	r21, 0x00	; 0
    5fa2:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__divmodsi4>
    5fa6:	27 ea       	ldi	r18, 0xA7	; 167
    5fa8:	31 e4       	ldi	r19, 0x41	; 65
    5faa:	40 e0       	ldi	r20, 0x00	; 0
    5fac:	50 e0       	ldi	r21, 0x00	; 0
    5fae:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__mulsi3>
    5fb2:	7b 01       	movw	r14, r22
    5fb4:	8c 01       	movw	r16, r24
    5fb6:	c6 01       	movw	r24, r12
    5fb8:	b5 01       	movw	r22, r10
    5fba:	2d e1       	ldi	r18, 0x1D	; 29
    5fbc:	33 ef       	ldi	r19, 0xF3	; 243
    5fbe:	41 e0       	ldi	r20, 0x01	; 1
    5fc0:	50 e0       	ldi	r21, 0x00	; 0
    5fc2:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__divmodsi4>
    5fc6:	ca 01       	movw	r24, r20
    5fc8:	b9 01       	movw	r22, r18
    5fca:	2c ee       	ldi	r18, 0xEC	; 236
    5fcc:	34 ef       	ldi	r19, 0xF4	; 244
    5fce:	4f ef       	ldi	r20, 0xFF	; 255
    5fd0:	5f ef       	ldi	r21, 0xFF	; 255
    5fd2:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <__mulsi3>
    5fd6:	6e 0d       	add	r22, r14
    5fd8:	7f 1d       	adc	r23, r15
    5fda:	80 1f       	adc	r24, r16
    5fdc:	91 1f       	adc	r25, r17
    5fde:	97 ff       	sbrs	r25, 7
    5fe0:	04 c0       	rjmp	.+8      	; 0x5fea <do_rand+0x8c>
    5fe2:	61 50       	subi	r22, 0x01	; 1
    5fe4:	70 40       	sbci	r23, 0x00	; 0
    5fe6:	80 40       	sbci	r24, 0x00	; 0
    5fe8:	90 48       	sbci	r25, 0x80	; 128
    5fea:	68 83       	st	Y, r22
    5fec:	79 83       	std	Y+1, r23	; 0x01
    5fee:	8a 83       	std	Y+2, r24	; 0x02
    5ff0:	9b 83       	std	Y+3, r25	; 0x03
    5ff2:	9b 01       	movw	r18, r22
    5ff4:	3f 77       	andi	r19, 0x7F	; 127
    5ff6:	c9 01       	movw	r24, r18
    5ff8:	df 91       	pop	r29
    5ffa:	cf 91       	pop	r28
    5ffc:	1f 91       	pop	r17
    5ffe:	0f 91       	pop	r16
    6000:	ff 90       	pop	r15
    6002:	ef 90       	pop	r14
    6004:	df 90       	pop	r13
    6006:	cf 90       	pop	r12
    6008:	bf 90       	pop	r11
    600a:	af 90       	pop	r10
    600c:	08 95       	ret

0000600e <rand_r>:
    600e:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <do_rand>
    6012:	08 95       	ret

00006014 <rand>:
    6014:	81 e0       	ldi	r24, 0x01	; 1
    6016:	92 e0       	ldi	r25, 0x02	; 2
    6018:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <do_rand>
    601c:	08 95       	ret

0000601e <srand>:
    601e:	a0 e0       	ldi	r26, 0x00	; 0
    6020:	b0 e0       	ldi	r27, 0x00	; 0
    6022:	80 93 01 02 	sts	0x0201, r24
    6026:	90 93 02 02 	sts	0x0202, r25
    602a:	a0 93 03 02 	sts	0x0203, r26
    602e:	b0 93 04 02 	sts	0x0204, r27
    6032:	08 95       	ret

00006034 <strtod>:
    6034:	8f 92       	push	r8
    6036:	9f 92       	push	r9
    6038:	af 92       	push	r10
    603a:	bf 92       	push	r11
    603c:	cf 92       	push	r12
    603e:	df 92       	push	r13
    6040:	ef 92       	push	r14
    6042:	ff 92       	push	r15
    6044:	0f 93       	push	r16
    6046:	1f 93       	push	r17
    6048:	cf 93       	push	r28
    604a:	df 93       	push	r29
    604c:	ec 01       	movw	r28, r24
    604e:	5b 01       	movw	r10, r22
    6050:	61 15       	cp	r22, r1
    6052:	71 05       	cpc	r23, r1
    6054:	19 f0       	breq	.+6      	; 0x605c <strtod+0x28>
    6056:	fb 01       	movw	r30, r22
    6058:	91 83       	std	Z+1, r25	; 0x01
    605a:	80 83       	st	Z, r24
    605c:	f9 90       	ld	r15, Y+
    605e:	8f 2d       	mov	r24, r15
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	0e 94 88 31 	call	0x6310	; 0x6310 <isspace>
    6066:	89 2b       	or	r24, r25
    6068:	c9 f7       	brne	.-14     	; 0x605c <strtod+0x28>
    606a:	fd e2       	ldi	r31, 0x2D	; 45
    606c:	ff 16       	cp	r15, r31
    606e:	21 f4       	brne	.+8      	; 0x6078 <strtod+0x44>
    6070:	f9 90       	ld	r15, Y+
    6072:	ee 24       	eor	r14, r14
    6074:	e3 94       	inc	r14
    6076:	05 c0       	rjmp	.+10     	; 0x6082 <strtod+0x4e>
    6078:	2b e2       	ldi	r18, 0x2B	; 43
    607a:	f2 16       	cp	r15, r18
    607c:	09 f4       	brne	.+2      	; 0x6080 <strtod+0x4c>
    607e:	f9 90       	ld	r15, Y+
    6080:	ee 24       	eor	r14, r14
    6082:	8e 01       	movw	r16, r28
    6084:	01 50       	subi	r16, 0x01	; 1
    6086:	10 40       	sbci	r17, 0x00	; 0
    6088:	c8 01       	movw	r24, r16
    608a:	6d e2       	ldi	r22, 0x2D	; 45
    608c:	76 e0       	ldi	r23, 0x06	; 6
    608e:	43 e0       	ldi	r20, 0x03	; 3
    6090:	50 e0       	ldi	r21, 0x00	; 0
    6092:	0e 94 90 31 	call	0x6320	; 0x6320 <strncasecmp_P>
    6096:	89 2b       	or	r24, r25
    6098:	01 f5       	brne	.+64     	; 0x60da <strtod+0xa6>
    609a:	8e 01       	movw	r16, r28
    609c:	0e 5f       	subi	r16, 0xFE	; 254
    609e:	1f 4f       	sbci	r17, 0xFF	; 255
    60a0:	c8 01       	movw	r24, r16
    60a2:	60 e3       	ldi	r22, 0x30	; 48
    60a4:	76 e0       	ldi	r23, 0x06	; 6
    60a6:	45 e0       	ldi	r20, 0x05	; 5
    60a8:	50 e0       	ldi	r21, 0x00	; 0
    60aa:	0e 94 90 31 	call	0x6320	; 0x6320 <strncasecmp_P>
    60ae:	89 2b       	or	r24, r25
    60b0:	19 f4       	brne	.+6      	; 0x60b8 <strtod+0x84>
    60b2:	8e 01       	movw	r16, r28
    60b4:	09 5f       	subi	r16, 0xF9	; 249
    60b6:	1f 4f       	sbci	r17, 0xFF	; 255
    60b8:	a1 14       	cp	r10, r1
    60ba:	b1 04       	cpc	r11, r1
    60bc:	19 f0       	breq	.+6      	; 0x60c4 <strtod+0x90>
    60be:	f5 01       	movw	r30, r10
    60c0:	11 83       	std	Z+1, r17	; 0x01
    60c2:	00 83       	st	Z, r16
    60c4:	e0 fc       	sbrc	r14, 0
    60c6:	04 c0       	rjmp	.+8      	; 0x60d0 <strtod+0x9c>
    60c8:	70 e0       	ldi	r23, 0x00	; 0
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	80 e8       	ldi	r24, 0x80	; 128
    60ce:	14 c0       	rjmp	.+40     	; 0x60f8 <strtod+0xc4>
    60d0:	70 e0       	ldi	r23, 0x00	; 0
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	80 e8       	ldi	r24, 0x80	; 128
    60d6:	6f ef       	ldi	r22, 0xFF	; 255
    60d8:	08 c1       	rjmp	.+528    	; 0x62ea <strtod+0x2b6>
    60da:	c8 01       	movw	r24, r16
    60dc:	65 e3       	ldi	r22, 0x35	; 53
    60de:	76 e0       	ldi	r23, 0x06	; 6
    60e0:	43 e0       	ldi	r20, 0x03	; 3
    60e2:	50 e0       	ldi	r21, 0x00	; 0
    60e4:	0e 94 90 31 	call	0x6320	; 0x6320 <strncasecmp_P>
    60e8:	89 2b       	or	r24, r25
    60ea:	69 f4       	brne	.+26     	; 0x6106 <strtod+0xd2>
    60ec:	a1 14       	cp	r10, r1
    60ee:	b1 04       	cpc	r11, r1
    60f0:	29 f4       	brne	.+10     	; 0x60fc <strtod+0xc8>
    60f2:	70 e0       	ldi	r23, 0x00	; 0
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	80 ec       	ldi	r24, 0xC0	; 192
    60f8:	6f e7       	ldi	r22, 0x7F	; 127
    60fa:	f7 c0       	rjmp	.+494    	; 0x62ea <strtod+0x2b6>
    60fc:	22 96       	adiw	r28, 0x02	; 2
    60fe:	f5 01       	movw	r30, r10
    6100:	d1 83       	std	Z+1, r29	; 0x01
    6102:	c0 83       	st	Z, r28
    6104:	f6 cf       	rjmp	.-20     	; 0x60f2 <strtod+0xbe>
    6106:	88 24       	eor	r8, r8
    6108:	99 24       	eor	r9, r9
    610a:	40 e0       	ldi	r20, 0x00	; 0
    610c:	50 e0       	ldi	r21, 0x00	; 0
    610e:	60 e0       	ldi	r22, 0x00	; 0
    6110:	70 e0       	ldi	r23, 0x00	; 0
    6112:	ef 2d       	mov	r30, r15
    6114:	e0 53       	subi	r30, 0x30	; 48
    6116:	ea 30       	cpi	r30, 0x0A	; 10
    6118:	a0 f5       	brcc	.+104    	; 0x6182 <strtod+0x14e>
    611a:	f2 e0       	ldi	r31, 0x02	; 2
    611c:	ef 2a       	or	r14, r31
    611e:	8e 2d       	mov	r24, r14
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	9c 01       	movw	r18, r24
    6124:	28 70       	andi	r18, 0x08	; 8
    6126:	30 70       	andi	r19, 0x00	; 0
    6128:	e2 fe       	sbrs	r14, 2
    612a:	06 c0       	rjmp	.+12     	; 0x6138 <strtod+0x104>
    612c:	23 2b       	or	r18, r19
    612e:	79 f5       	brne	.+94     	; 0x618e <strtod+0x15a>
    6130:	08 94       	sec
    6132:	81 1c       	adc	r8, r1
    6134:	91 1c       	adc	r9, r1
    6136:	2b c0       	rjmp	.+86     	; 0x618e <strtod+0x15a>
    6138:	23 2b       	or	r18, r19
    613a:	19 f0       	breq	.+6      	; 0x6142 <strtod+0x10e>
    613c:	08 94       	sec
    613e:	81 08       	sbc	r8, r1
    6140:	91 08       	sbc	r9, r1
    6142:	db 01       	movw	r26, r22
    6144:	ca 01       	movw	r24, r20
    6146:	12 e0       	ldi	r17, 0x02	; 2
    6148:	88 0f       	add	r24, r24
    614a:	99 1f       	adc	r25, r25
    614c:	aa 1f       	adc	r26, r26
    614e:	bb 1f       	adc	r27, r27
    6150:	1a 95       	dec	r17
    6152:	d1 f7       	brne	.-12     	; 0x6148 <strtod+0x114>
    6154:	48 0f       	add	r20, r24
    6156:	59 1f       	adc	r21, r25
    6158:	6a 1f       	adc	r22, r26
    615a:	7b 1f       	adc	r23, r27
    615c:	44 0f       	add	r20, r20
    615e:	55 1f       	adc	r21, r21
    6160:	66 1f       	adc	r22, r22
    6162:	77 1f       	adc	r23, r23
    6164:	4e 0f       	add	r20, r30
    6166:	51 1d       	adc	r21, r1
    6168:	61 1d       	adc	r22, r1
    616a:	71 1d       	adc	r23, r1
    616c:	48 39       	cpi	r20, 0x98	; 152
    616e:	29 e9       	ldi	r18, 0x99	; 153
    6170:	52 07       	cpc	r21, r18
    6172:	29 e9       	ldi	r18, 0x99	; 153
    6174:	62 07       	cpc	r22, r18
    6176:	29 e1       	ldi	r18, 0x19	; 25
    6178:	72 07       	cpc	r23, r18
    617a:	48 f0       	brcs	.+18     	; 0x618e <strtod+0x15a>
    617c:	84 e0       	ldi	r24, 0x04	; 4
    617e:	e8 2a       	or	r14, r24
    6180:	06 c0       	rjmp	.+12     	; 0x618e <strtod+0x15a>
    6182:	ee 3f       	cpi	r30, 0xFE	; 254
    6184:	31 f4       	brne	.+12     	; 0x6192 <strtod+0x15e>
    6186:	e3 fc       	sbrc	r14, 3
    6188:	39 c0       	rjmp	.+114    	; 0x61fc <strtod+0x1c8>
    618a:	98 e0       	ldi	r25, 0x08	; 8
    618c:	e9 2a       	or	r14, r25
    618e:	f9 90       	ld	r15, Y+
    6190:	c0 cf       	rjmp	.-128    	; 0x6112 <strtod+0xde>
    6192:	e5 33       	cpi	r30, 0x35	; 53
    6194:	11 f0       	breq	.+4      	; 0x619a <strtod+0x166>
    6196:	e5 31       	cpi	r30, 0x15	; 21
    6198:	89 f5       	brne	.+98     	; 0x61fc <strtod+0x1c8>
    619a:	29 91       	ld	r18, Y+
    619c:	2d 32       	cpi	r18, 0x2D	; 45
    619e:	19 f4       	brne	.+6      	; 0x61a6 <strtod+0x172>
    61a0:	e0 e1       	ldi	r30, 0x10	; 16
    61a2:	ee 2a       	or	r14, r30
    61a4:	05 c0       	rjmp	.+10     	; 0x61b0 <strtod+0x17c>
    61a6:	2b 32       	cpi	r18, 0x2B	; 43
    61a8:	19 f0       	breq	.+6      	; 0x61b0 <strtod+0x17c>
    61aa:	81 e0       	ldi	r24, 0x01	; 1
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	03 c0       	rjmp	.+6      	; 0x61b6 <strtod+0x182>
    61b0:	29 91       	ld	r18, Y+
    61b2:	82 e0       	ldi	r24, 0x02	; 2
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	e2 2f       	mov	r30, r18
    61b8:	e0 53       	subi	r30, 0x30	; 48
    61ba:	ea 30       	cpi	r30, 0x0A	; 10
    61bc:	18 f0       	brcs	.+6      	; 0x61c4 <strtod+0x190>
    61be:	c8 1b       	sub	r28, r24
    61c0:	d9 0b       	sbc	r29, r25
    61c2:	1c c0       	rjmp	.+56     	; 0x61fc <strtod+0x1c8>
    61c4:	20 e0       	ldi	r18, 0x00	; 0
    61c6:	30 e0       	ldi	r19, 0x00	; 0
    61c8:	fc e0       	ldi	r31, 0x0C	; 12
    61ca:	20 38       	cpi	r18, 0x80	; 128
    61cc:	3f 07       	cpc	r19, r31
    61ce:	5c f4       	brge	.+22     	; 0x61e6 <strtod+0x1b2>
    61d0:	c9 01       	movw	r24, r18
    61d2:	88 0f       	add	r24, r24
    61d4:	99 1f       	adc	r25, r25
    61d6:	88 0f       	add	r24, r24
    61d8:	99 1f       	adc	r25, r25
    61da:	28 0f       	add	r18, r24
    61dc:	39 1f       	adc	r19, r25
    61de:	22 0f       	add	r18, r18
    61e0:	33 1f       	adc	r19, r19
    61e2:	2e 0f       	add	r18, r30
    61e4:	31 1d       	adc	r19, r1
    61e6:	e9 91       	ld	r30, Y+
    61e8:	e0 53       	subi	r30, 0x30	; 48
    61ea:	ea 30       	cpi	r30, 0x0A	; 10
    61ec:	68 f3       	brcs	.-38     	; 0x61c8 <strtod+0x194>
    61ee:	e4 fe       	sbrs	r14, 4
    61f0:	03 c0       	rjmp	.+6      	; 0x61f8 <strtod+0x1c4>
    61f2:	30 95       	com	r19
    61f4:	21 95       	neg	r18
    61f6:	3f 4f       	sbci	r19, 0xFF	; 255
    61f8:	82 0e       	add	r8, r18
    61fa:	93 1e       	adc	r9, r19
    61fc:	ce 2c       	mov	r12, r14
    61fe:	dd 24       	eor	r13, r13
    6200:	e1 fe       	sbrs	r14, 1
    6202:	07 c0       	rjmp	.+14     	; 0x6212 <strtod+0x1de>
    6204:	a1 14       	cp	r10, r1
    6206:	b1 04       	cpc	r11, r1
    6208:	21 f0       	breq	.+8      	; 0x6212 <strtod+0x1de>
    620a:	21 97       	sbiw	r28, 0x01	; 1
    620c:	f5 01       	movw	r30, r10
    620e:	d1 83       	std	Z+1, r29	; 0x01
    6210:	c0 83       	st	Z, r28
    6212:	cb 01       	movw	r24, r22
    6214:	ba 01       	movw	r22, r20
    6216:	0e 94 be 2c 	call	0x597c	; 0x597c <__floatunsisf>
    621a:	7b 01       	movw	r14, r22
    621c:	8c 01       	movw	r16, r24
    621e:	f3 e0       	ldi	r31, 0x03	; 3
    6220:	cf 22       	and	r12, r31
    6222:	dd 24       	eor	r13, r13
    6224:	23 e0       	ldi	r18, 0x03	; 3
    6226:	c2 16       	cp	r12, r18
    6228:	d1 04       	cpc	r13, r1
    622a:	21 f4       	brne	.+8      	; 0x6234 <strtod+0x200>
    622c:	17 fb       	bst	r17, 7
    622e:	10 95       	com	r17
    6230:	17 f9       	bld	r17, 7
    6232:	10 95       	com	r17
    6234:	57 01       	movw	r10, r14
    6236:	68 01       	movw	r12, r16
    6238:	c8 01       	movw	r24, r16
    623a:	b7 01       	movw	r22, r14
    623c:	20 e0       	ldi	r18, 0x00	; 0
    623e:	30 e0       	ldi	r19, 0x00	; 0
    6240:	40 e0       	ldi	r20, 0x00	; 0
    6242:	50 e0       	ldi	r21, 0x00	; 0
    6244:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
    6248:	88 23       	and	r24, r24
    624a:	09 f4       	brne	.+2      	; 0x624e <strtod+0x21a>
    624c:	4a c0       	rjmp	.+148    	; 0x62e2 <strtod+0x2ae>
    624e:	97 fe       	sbrs	r9, 7
    6250:	0d c0       	rjmp	.+26     	; 0x626c <strtod+0x238>
    6252:	2c e4       	ldi	r18, 0x4C	; 76
    6254:	e2 2e       	mov	r14, r18
    6256:	26 e0       	ldi	r18, 0x06	; 6
    6258:	f2 2e       	mov	r15, r18
    625a:	90 94       	com	r9
    625c:	81 94       	neg	r8
    625e:	91 08       	sbc	r9, r1
    6260:	93 94       	inc	r9
    6262:	c0 e2       	ldi	r28, 0x20	; 32
    6264:	d0 e0       	ldi	r29, 0x00	; 0
    6266:	00 e0       	ldi	r16, 0x00	; 0
    6268:	10 e0       	ldi	r17, 0x00	; 0
    626a:	12 c0       	rjmp	.+36     	; 0x6290 <strtod+0x25c>
    626c:	94 e6       	ldi	r25, 0x64	; 100
    626e:	e9 2e       	mov	r14, r25
    6270:	96 e0       	ldi	r25, 0x06	; 6
    6272:	f9 2e       	mov	r15, r25
    6274:	f6 cf       	rjmp	.-20     	; 0x6262 <strtod+0x22e>
    6276:	f7 01       	movw	r30, r14
    6278:	25 91       	lpm	r18, Z+
    627a:	35 91       	lpm	r19, Z+
    627c:	45 91       	lpm	r20, Z+
    627e:	54 91       	lpm	r21, Z+
    6280:	c6 01       	movw	r24, r12
    6282:	b5 01       	movw	r22, r10
    6284:	0e 94 56 2e 	call	0x5cac	; 0x5cac <__mulsf3>
    6288:	5b 01       	movw	r10, r22
    628a:	6c 01       	movw	r12, r24
    628c:	8c 1a       	sub	r8, r28
    628e:	9d 0a       	sbc	r9, r29
    6290:	8c 16       	cp	r8, r28
    6292:	9d 06       	cpc	r9, r29
    6294:	84 f7       	brge	.-32     	; 0x6276 <strtod+0x242>
    6296:	d5 95       	asr	r29
    6298:	c7 95       	ror	r28
    629a:	0f 5f       	subi	r16, 0xFF	; 255
    629c:	1f 4f       	sbci	r17, 0xFF	; 255
    629e:	06 30       	cpi	r16, 0x06	; 6
    62a0:	11 05       	cpc	r17, r1
    62a2:	29 f0       	breq	.+10     	; 0x62ae <strtod+0x27a>
    62a4:	8c ef       	ldi	r24, 0xFC	; 252
    62a6:	9f ef       	ldi	r25, 0xFF	; 255
    62a8:	e8 0e       	add	r14, r24
    62aa:	f9 1e       	adc	r15, r25
    62ac:	f1 cf       	rjmp	.-30     	; 0x6290 <strtod+0x25c>
    62ae:	c5 01       	movw	r24, r10
    62b0:	d6 01       	movw	r26, r12
    62b2:	7c 01       	movw	r14, r24
    62b4:	8d 01       	movw	r16, r26
    62b6:	8c 2d       	mov	r24, r12
    62b8:	88 0f       	add	r24, r24
    62ba:	8d 2d       	mov	r24, r13
    62bc:	88 1f       	adc	r24, r24
    62be:	8f 3f       	cpi	r24, 0xFF	; 255
    62c0:	51 f0       	breq	.+20     	; 0x62d6 <strtod+0x2a2>
    62c2:	c6 01       	movw	r24, r12
    62c4:	b5 01       	movw	r22, r10
    62c6:	20 e0       	ldi	r18, 0x00	; 0
    62c8:	30 e0       	ldi	r19, 0x00	; 0
    62ca:	40 e0       	ldi	r20, 0x00	; 0
    62cc:	50 e0       	ldi	r21, 0x00	; 0
    62ce:	0e 94 21 2c 	call	0x5842	; 0x5842 <__cmpsf2>
    62d2:	88 23       	and	r24, r24
    62d4:	31 f4       	brne	.+12     	; 0x62e2 <strtod+0x2ae>
    62d6:	82 e2       	ldi	r24, 0x22	; 34
    62d8:	90 e0       	ldi	r25, 0x00	; 0
    62da:	90 93 f7 06 	sts	0x06F7, r25
    62de:	80 93 f6 06 	sts	0x06F6, r24
    62e2:	7e 2d       	mov	r23, r14
    62e4:	9f 2d       	mov	r25, r15
    62e6:	80 2f       	mov	r24, r16
    62e8:	61 2f       	mov	r22, r17
    62ea:	27 2f       	mov	r18, r23
    62ec:	39 2f       	mov	r19, r25
    62ee:	48 2f       	mov	r20, r24
    62f0:	56 2f       	mov	r21, r22
    62f2:	b9 01       	movw	r22, r18
    62f4:	ca 01       	movw	r24, r20
    62f6:	df 91       	pop	r29
    62f8:	cf 91       	pop	r28
    62fa:	1f 91       	pop	r17
    62fc:	0f 91       	pop	r16
    62fe:	ff 90       	pop	r15
    6300:	ef 90       	pop	r14
    6302:	df 90       	pop	r13
    6304:	cf 90       	pop	r12
    6306:	bf 90       	pop	r11
    6308:	af 90       	pop	r10
    630a:	9f 90       	pop	r9
    630c:	8f 90       	pop	r8
    630e:	08 95       	ret

00006310 <isspace>:
    6310:	91 11       	cpse	r25, r1
    6312:	1e c0       	rjmp	.+60     	; 0x6350 <__ctype_isfalse>
    6314:	80 32       	cpi	r24, 0x20	; 32
    6316:	19 f0       	breq	.+6      	; 0x631e <isspace+0xe>
    6318:	89 50       	subi	r24, 0x09	; 9
    631a:	85 50       	subi	r24, 0x05	; 5
    631c:	d0 f7       	brcc	.-12     	; 0x6312 <isspace+0x2>
    631e:	08 95       	ret

00006320 <strncasecmp_P>:
    6320:	fb 01       	movw	r30, r22
    6322:	dc 01       	movw	r26, r24
    6324:	41 50       	subi	r20, 0x01	; 1
    6326:	50 40       	sbci	r21, 0x00	; 0
    6328:	88 f0       	brcs	.+34     	; 0x634c <strncasecmp_P+0x2c>
    632a:	8d 91       	ld	r24, X+
    632c:	81 34       	cpi	r24, 0x41	; 65
    632e:	1c f0       	brlt	.+6      	; 0x6336 <strncasecmp_P+0x16>
    6330:	8b 35       	cpi	r24, 0x5B	; 91
    6332:	0c f4       	brge	.+2      	; 0x6336 <strncasecmp_P+0x16>
    6334:	80 5e       	subi	r24, 0xE0	; 224
    6336:	65 91       	lpm	r22, Z+
    6338:	61 34       	cpi	r22, 0x41	; 65
    633a:	1c f0       	brlt	.+6      	; 0x6342 <strncasecmp_P+0x22>
    633c:	6b 35       	cpi	r22, 0x5B	; 91
    633e:	0c f4       	brge	.+2      	; 0x6342 <strncasecmp_P+0x22>
    6340:	60 5e       	subi	r22, 0xE0	; 224
    6342:	86 1b       	sub	r24, r22
    6344:	61 11       	cpse	r22, r1
    6346:	71 f3       	breq	.-36     	; 0x6324 <strncasecmp_P+0x4>
    6348:	99 0b       	sbc	r25, r25
    634a:	08 95       	ret
    634c:	88 1b       	sub	r24, r24
    634e:	fc cf       	rjmp	.-8      	; 0x6348 <strncasecmp_P+0x28>

00006350 <__ctype_isfalse>:
    6350:	99 27       	eor	r25, r25
    6352:	88 27       	eor	r24, r24

00006354 <__ctype_istrue>:
    6354:	08 95       	ret

00006356 <_exit>:
    6356:	f8 94       	cli

00006358 <__stop_program>:
    6358:	ff cf       	rjmp	.-2      	; 0x6358 <__stop_program>
