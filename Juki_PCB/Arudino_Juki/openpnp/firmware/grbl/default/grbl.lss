
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000064a4  00006538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000064a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d4  00800206  00800206  0000653e  2**0
                  ALLOC
  3 .debug_aranges 00000710  00000000  00000000  0000653e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000df7  00000000  00000000  00006c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005897  00000000  00000000  00007a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d03  00000000  00000000  0000d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005128  00000000  00000000  0000efdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b80  00000000  00000000  00014108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016ba  00000000  00000000  00014c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000365f  00000000  00000000  00016342  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000be0  00000000  00000000  000199a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 03 	jmp	0x610	; 0x610 <__ctors_end>
       4:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
       8:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
       c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      10:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      14:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      18:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      1c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      20:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      24:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      28:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      2c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      30:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      34:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      38:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      3c:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__vector_15>
      40:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      44:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__vector_17>
      48:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      4c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      50:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__vector_20>
      54:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      58:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      5c:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__vector_23>
      60:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      64:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__vector_25>
      68:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      6c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      70:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      74:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      78:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      7c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      80:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__vector_32>
      84:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      88:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      8c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      90:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      94:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      98:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      9c:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      a0:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      a4:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      a8:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      ac:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      b0:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      b4:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      b8:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      bc:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      c0:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      c4:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      c8:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      cc:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      d0:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      d4:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      d8:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      dc:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      e0:	0c 94 29 03 	jmp	0x652	; 0x652 <__bad_interrupt>
      e4:	75 08       	sbc	r7, r5
      e6:	75 08       	sbc	r7, r5
      e8:	71 08       	sbc	r7, r1
      ea:	6a 08       	sbc	r6, r10
      ec:	63 08       	sbc	r6, r3
      ee:	5e 08       	sbc	r5, r14
      f0:	4c 06       	cpc	r4, r28
      f2:	4c 06       	cpc	r4, r28
      f4:	57 08       	sbc	r5, r7
      f6:	52 08       	sbc	r5, r2
      f8:	4b 08       	sbc	r4, r11
      fa:	44 08       	sbc	r4, r4
      fc:	3d 08       	sbc	r3, r13
      fe:	36 08       	sbc	r3, r6
     100:	2f 08       	sbc	r2, r15
     102:	28 08       	sbc	r2, r8
     104:	21 08       	sbc	r2, r1
     106:	1a 08       	sbc	r1, r10
     108:	13 08       	sbc	r1, r3
     10a:	0c 08       	sbc	r0, r12
     10c:	05 08       	sbc	r0, r5
     10e:	00 08       	sbc	r0, r0
     110:	fb 07       	cpc	r31, r27
     112:	f6 07       	cpc	r31, r22
     114:	ef 07       	cpc	r30, r31
     116:	ea 07       	cpc	r30, r26
     118:	e3 07       	cpc	r30, r19
     11a:	81 07       	cpc	r24, r17
     11c:	4c 06       	cpc	r4, r28
     11e:	d9 07       	cpc	r29, r25
     120:	71 08       	sbc	r7, r1
     122:	d4 07       	cpc	r29, r20
     124:	4c 06       	cpc	r4, r28
     126:	4c 06       	cpc	r4, r28
     128:	4c 06       	cpc	r4, r28
     12a:	4c 06       	cpc	r4, r28
     12c:	4c 06       	cpc	r4, r28
     12e:	4c 06       	cpc	r4, r28
     130:	4c 06       	cpc	r4, r28
     132:	4c 06       	cpc	r4, r28
     134:	4c 06       	cpc	r4, r28
     136:	4c 06       	cpc	r4, r28
     138:	4c 06       	cpc	r4, r28
     13a:	4c 06       	cpc	r4, r28
     13c:	4c 06       	cpc	r4, r28
     13e:	4c 06       	cpc	r4, r28
     140:	4c 06       	cpc	r4, r28
     142:	4c 06       	cpc	r4, r28
     144:	4c 06       	cpc	r4, r28
     146:	4c 06       	cpc	r4, r28
     148:	4c 06       	cpc	r4, r28
     14a:	4c 06       	cpc	r4, r28
     14c:	4c 06       	cpc	r4, r28
     14e:	4c 06       	cpc	r4, r28
     150:	4c 06       	cpc	r4, r28
     152:	4c 06       	cpc	r4, r28
     154:	4c 06       	cpc	r4, r28
     156:	4c 06       	cpc	r4, r28
     158:	4c 06       	cpc	r4, r28
     15a:	4c 06       	cpc	r4, r28
     15c:	71 08       	sbc	r7, r1
     15e:	d1 07       	cpc	r29, r17
     160:	cd 07       	cpc	r28, r29
     162:	c9 07       	cpc	r28, r25
     164:	88 07       	cpc	r24, r24
     166:	85 07       	cpc	r24, r21
     168:	4c 06       	cpc	r4, r28
     16a:	4c 06       	cpc	r4, r28
     16c:	4c 06       	cpc	r4, r28
     16e:	4c 06       	cpc	r4, r28
     170:	4c 06       	cpc	r4, r28
     172:	4c 06       	cpc	r4, r28
     174:	4c 06       	cpc	r4, r28
     176:	4c 06       	cpc	r4, r28
     178:	4c 06       	cpc	r4, r28
     17a:	4c 06       	cpc	r4, r28
     17c:	4c 06       	cpc	r4, r28
     17e:	4c 06       	cpc	r4, r28
     180:	bd 07       	cpc	r27, r29
     182:	b4 07       	cpc	r27, r20
     184:	ab 07       	cpc	r26, r27
     186:	a7 07       	cpc	r26, r23
     188:	a4 07       	cpc	r26, r20
     18a:	4c 06       	cpc	r4, r28
     18c:	4c 06       	cpc	r4, r28
     18e:	4c 06       	cpc	r4, r28
     190:	4c 06       	cpc	r4, r28
     192:	4c 06       	cpc	r4, r28
     194:	4c 06       	cpc	r4, r28
     196:	a1 07       	cpc	r26, r17
     198:	4c 06       	cpc	r4, r28
     19a:	a1 07       	cpc	r26, r17
     19c:	4c 06       	cpc	r4, r28
     19e:	4c 06       	cpc	r4, r28
     1a0:	4c 06       	cpc	r4, r28
     1a2:	4c 06       	cpc	r4, r28
     1a4:	4c 06       	cpc	r4, r28
     1a6:	4c 06       	cpc	r4, r28
     1a8:	4c 06       	cpc	r4, r28
     1aa:	4c 06       	cpc	r4, r28
     1ac:	4c 06       	cpc	r4, r28
     1ae:	4c 06       	cpc	r4, r28
     1b0:	4c 06       	cpc	r4, r28
     1b2:	4c 06       	cpc	r4, r28
     1b4:	4c 06       	cpc	r4, r28
     1b6:	4c 06       	cpc	r4, r28
     1b8:	4c 06       	cpc	r4, r28
     1ba:	4c 06       	cpc	r4, r28
     1bc:	4c 06       	cpc	r4, r28
     1be:	4c 06       	cpc	r4, r28
     1c0:	4c 06       	cpc	r4, r28
     1c2:	4c 06       	cpc	r4, r28
     1c4:	4c 06       	cpc	r4, r28
     1c6:	4c 06       	cpc	r4, r28
     1c8:	9e 07       	cpc	r25, r30
     1ca:	4c 06       	cpc	r4, r28
     1cc:	4c 06       	cpc	r4, r28
     1ce:	4c 06       	cpc	r4, r28
     1d0:	4c 06       	cpc	r4, r28
     1d2:	4c 06       	cpc	r4, r28
     1d4:	4c 06       	cpc	r4, r28
     1d6:	4c 06       	cpc	r4, r28
     1d8:	4c 06       	cpc	r4, r28
     1da:	4c 06       	cpc	r4, r28
     1dc:	4c 06       	cpc	r4, r28
     1de:	4c 06       	cpc	r4, r28
     1e0:	4c 06       	cpc	r4, r28
     1e2:	4c 06       	cpc	r4, r28
     1e4:	4c 06       	cpc	r4, r28
     1e6:	4c 06       	cpc	r4, r28
     1e8:	4c 06       	cpc	r4, r28
     1ea:	4c 06       	cpc	r4, r28
     1ec:	4c 06       	cpc	r4, r28
     1ee:	4c 06       	cpc	r4, r28
     1f0:	4c 06       	cpc	r4, r28
     1f2:	4c 06       	cpc	r4, r28
     1f4:	4c 06       	cpc	r4, r28
     1f6:	4c 06       	cpc	r4, r28
     1f8:	4c 06       	cpc	r4, r28
     1fa:	4c 06       	cpc	r4, r28
     1fc:	4c 06       	cpc	r4, r28
     1fe:	9a 07       	cpc	r25, r26
     200:	4c 06       	cpc	r4, r28
     202:	4c 06       	cpc	r4, r28
     204:	4c 06       	cpc	r4, r28
     206:	4c 06       	cpc	r4, r28
     208:	4c 06       	cpc	r4, r28
     20a:	4c 06       	cpc	r4, r28
     20c:	4c 06       	cpc	r4, r28
     20e:	4c 06       	cpc	r4, r28
     210:	4c 06       	cpc	r4, r28
     212:	96 07       	cpc	r25, r22
     214:	93 07       	cpc	r25, r19
     216:	90 07       	cpc	r25, r16
     218:	8c 07       	cpc	r24, r28
     21a:	c6 07       	cpc	r28, r22
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.2004>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.2002>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.2000>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1998>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1996>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1994>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1992>:
     273:	0d 0a 00                                            ...

00000276 <__c.1990>:
     276:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

00000282 <__c.1988>:
     282:	0d 0a 00                                            ...

00000285 <__c.1986>:
     285:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000290 <__c.1984>:
     290:	0d 0a 00                                            ...

00000293 <__c.1982>:
     293:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000002a3 <__c.1980>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1978>:
     2a6:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000002b5 <__c.1976>:
     2b5:	0d 0a 00                                            ...

000002b8 <__c.1974>:
     2b8:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000002c5 <__c.1972>:
     2c5:	0d 0a 00                                            ...

000002c8 <__c.1970>:
     2c8:	61 76 72 5f 6d 69 6c 6c 69 73 28 29 20 3d 20 00     avr_millis() = .

000002d8 <__c.1968>:
     2d8:	0d 0a 00                                            ...

000002db <__c.1966>:
     2db:	74 6f 5f 6d 69 6c 6c 69 6d 65 74 65 72 73 28 31     to_millimeters(1
     2eb:	30 30 29 20 3d 20 00                                00) = .

000002f2 <__c.1964>:
     2f2:	0d 0a 00                                            ...

000002f5 <__c.1962>:
     2f5:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

00000304 <__c.1960>:
     304:	0d 0a 00                                            ...

00000307 <__c.1958>:
     307:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

00000311 <__c.1956>:
     311:	0d 0a 00                                            ...

00000314 <__c.1954>:
     314:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     324:	3d 20 00                                            = .

00000327 <__c.1952>:
     327:	0d 0a 00                                            ...

0000032a <__c.1950>:
     32a:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     33a:	20 00                                                .

0000033c <__c.1832>:
     33c:	65 72 72 0a 00                                      err..

00000341 <__c.1829>:
     341:	6f 6b 0a 00                                         ok..

00000345 <__c.1825>:
     345:	6e 68 6f 0a 00                                      nho..

0000034a <__c.1821>:
     34a:	6c 69 6d 0a 00                                      lim..

0000034f <__c.1772>:
     34f:	6f 6b 0a 00                                         ok..

00000353 <__c.1746>:
     353:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     363:	6e 67 0d 0a 00                                      ng...

00000368 <__c.1744>:
     368:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     378:	72 0d 0a 00                                         r...

0000037c <__c.1701>:
     37c:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     38c:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     39c:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     3ac:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     3bc:	0d 0a 00                                            ...

000003bf <__c.1699>:
     3bf:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     3cf:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     3df:	61 62 6c 65 64 29 0d 0a 00                          abled)...

000003e8 <__c.1697>:
     3e8:	24 31 30 30 30 20 3d 20 00                          $1000 = .

000003f1 <__c.1695>:
     3f1:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     401:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     411:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     421:	2f 6d 69 6e 29 0d 0a 00                             /min)...

00000429 <__c.1693>:
     429:	24 39 20 3d 20 00                                   $9 = .

0000042f <__c.1691>:
     42f:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     43f:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

0000044d <__c.1689>:
     44d:	24 38 20 3d 20 00                                   $8 = .

00000453 <__c.1687>:
     453:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     463:	29 0d 0a 00                                         )...

00000467 <__c.1685>:
     467:	24 37 20 3d 20 00                                   $7 = .

0000046d <__c.1683>:
     46d:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     47d:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

0000048b <__c.1681>:
     48b:	24 36 20 3d 20 00                                   $6 = .

00000491 <__c.1679>:
     491:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     4a1:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

000004af <__c.1677>:
     4af:	24 35 20 3d 20 00                                   $5 = .

000004b5 <__c.1675>:
     4b5:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     4c5:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

000004d2 <__c.1673>:
     4d2:	24 34 20 3d 20 00                                   $4 = .

000004d8 <__c.1671>:
     4d8:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     4e8:	0a 00                                               ..

000004ea <__c.1669>:
     4ea:	24 33 20 3d 20 00                                   $3 = .

000004f0 <__c.1667>:
     4f0:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

00000500 <__c.1665>:
     500:	24 32 20 3d 20 00                                   $2 = .

00000506 <__c.1663>:
     506:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

00000516 <__c.1661>:
     516:	24 31 20 3d 20 00                                   $1 = .

0000051c <__c.1659>:
     51c:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

0000052c <__c.1657>:
     52c:	24 30 20 3d 20 00                                   $0 = .

00000532 <__c.1655>:
     532:	0d 0a 00                                            ...

00000535 <__c.1653>:
     535:	30 2e 37 36 50 42 00                                0.76PB.

0000053c <__c.1651>:
     53c:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

00000548 <__c.2129>:
     548:	79 4c 69 6d 69 74 32 3a 20 69 73 20 69 6e 20 6c     yLimit2: is in l
     558:	69 6d 69 74 0d 0a 00                                imit...

0000055f <__c.2120>:
     55f:	79 4c 69 6d 69 74 31 3a 20 69 73 20 69 6e 20 6c     yLimit1: is in l
     56f:	69 6d 69 74 0d 0a 00                                imit...

00000576 <__c.2111>:
     576:	78 4c 69 6d 69 74 32 3a 20 69 73 20 69 6e 20 6c     xLimit2: is in l
     586:	69 6d 69 74 0d 0a 00                                imit...

0000058d <__c.2102>:
     58d:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

00000597 <__c.1858>:
     597:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     5a7:	0d 00                                               ..

000005a9 <__c.1893>:
     5a9:	6e 6f 0a 00                                         no..

000005ad <__c.1891>:
     5ad:	79 65 73 0a 00                                      yes..

000005b2 <__c.1810>:
     5b2:	45 72 72 6f 72 3a 20 4f 53 43 4f 4b 49 52 51 20     Error: OSCOKIRQ 
     5c2:	66 61 69 6c 65 64 20 74 6f 20 61 73 73 65 72 74     failed to assert
     5d2:	0a 00                                               ..

000005d4 <pstr_inf>:
     5d4:	49 4e 46                                            INF

000005d7 <pstr_inity>:
     5d7:	49 4e 49 54 59                                      INITY

000005dc <pstr_nan>:
     5dc:	4e 41 4e                                            NAN

000005df <pwr_m10>:
     5df:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     5ef:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000005f7 <pwr_p10>:
     5f7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     607:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000610 <__ctors_end>:
     610:	11 24       	eor	r1, r1
     612:	1f be       	out	0x3f, r1	; 63
     614:	cf ef       	ldi	r28, 0xFF	; 255
     616:	d1 e2       	ldi	r29, 0x21	; 33
     618:	de bf       	out	0x3e, r29	; 62
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	00 e0       	ldi	r16, 0x00	; 0
     61e:	0c bf       	out	0x3c, r16	; 60

00000620 <__do_copy_data>:
     620:	12 e0       	ldi	r17, 0x02	; 2
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b2 e0       	ldi	r27, 0x02	; 2
     626:	e4 ea       	ldi	r30, 0xA4	; 164
     628:	f4 e6       	ldi	r31, 0x64	; 100
     62a:	00 e0       	ldi	r16, 0x00	; 0
     62c:	0b bf       	out	0x3b, r16	; 59
     62e:	02 c0       	rjmp	.+4      	; 0x634 <__do_copy_data+0x14>
     630:	07 90       	elpm	r0, Z+
     632:	0d 92       	st	X+, r0
     634:	a6 30       	cpi	r26, 0x06	; 6
     636:	b1 07       	cpc	r27, r17
     638:	d9 f7       	brne	.-10     	; 0x630 <__do_copy_data+0x10>

0000063a <__do_clear_bss>:
     63a:	19 e0       	ldi	r17, 0x09	; 9
     63c:	a6 e0       	ldi	r26, 0x06	; 6
     63e:	b2 e0       	ldi	r27, 0x02	; 2
     640:	01 c0       	rjmp	.+2      	; 0x644 <.do_clear_bss_start>

00000642 <.do_clear_bss_loop>:
     642:	1d 92       	st	X+, r1

00000644 <.do_clear_bss_start>:
     644:	aa 3d       	cpi	r26, 0xDA	; 218
     646:	b1 07       	cpc	r27, r17
     648:	e1 f7       	brne	.-8      	; 0x642 <.do_clear_bss_loop>
     64a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <main>
     64e:	0c 94 50 32 	jmp	0x64a0	; 0x64a0 <_exit>

00000652 <__bad_interrupt>:
     652:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000656 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     656:	24 9a       	sbi	0x04, 4	; 4
}
     658:	08 95       	ret

0000065a <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     65a:	89 2b       	or	r24, r25
     65c:	11 f4       	brne	.+4      	; 0x662 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     65e:	2c 98       	cbi	0x05, 4	; 5
     660:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     662:	2c 9a       	sbi	0x05, 4	; 5
     664:	08 95       	ret

00000666 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     666:	f9 99       	sbic	0x1f, 1	; 31
     668:	fe cf       	rjmp	.-4      	; 0x666 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     66a:	92 bd       	out	0x22, r25	; 34
     66c:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     672:	80 b5       	in	r24, 0x20	; 32
}
     674:	08 95       	ret

00000676 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     676:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     678:	f9 99       	sbic	0x1f, 1	; 31
     67a:	fe cf       	rjmp	.-4      	; 0x678 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     67c:	92 bd       	out	0x22, r25	; 34
     67e:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     684:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     686:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     688:	89 2f       	mov	r24, r25
     68a:	86 23       	and	r24, r22
     68c:	41 f0       	breq	.+16     	; 0x69e <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     68e:	6f 3f       	cpi	r22, 0xFF	; 255
     690:	71 f0       	breq	.+28     	; 0x6ae <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     692:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     694:	84 e0       	ldi	r24, 0x04	; 4
     696:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     698:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     69a:	78 94       	sei
}
     69c:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     69e:	99 23       	and	r25, r25
     6a0:	e1 f3       	breq	.-8      	; 0x69a <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6a2:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6a4:	84 e2       	ldi	r24, 0x24	; 36
     6a6:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     6a8:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     6aa:	78 94       	sei
}
     6ac:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6ae:	84 e1       	ldi	r24, 0x14	; 20
     6b0:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     6b2:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6b4:	78 94       	sei
}
     6b6:	08 95       	ret

000006b8 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     6b8:	af 92       	push	r10
     6ba:	bf 92       	push	r11
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	6c 01       	movw	r12, r24
     6cc:	8b 01       	movw	r16, r22
     6ce:	5a 01       	movw	r10, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6d0:	41 15       	cp	r20, r1
     6d2:	51 05       	cpc	r21, r1
     6d4:	59 f1       	breq	.+86     	; 0x72c <memcpy_to_eeprom_with_checksum+0x74>
     6d6:	ff 24       	eor	r15, r15
     6d8:	c0 e0       	ldi	r28, 0x00	; 0
     6da:	d0 e0       	ldi	r29, 0x00	; 0
     6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <memcpy_to_eeprom_with_checksum+0x40>
    checksum = (checksum << 1) || (checksum >> 7);
     6de:	21 e0       	ldi	r18, 0x01	; 1
    checksum += *source;
     6e0:	f8 01       	movw	r30, r16
     6e2:	60 81       	ld	r22, Z
     6e4:	f2 2e       	mov	r15, r18
     6e6:	f6 0e       	add	r15, r22
    eeprom_put_char(destination++, *(source++)); 
     6e8:	0e 94 3b 03 	call	0x676	; 0x676 <eeprom_put_char>
     6ec:	21 96       	adiw	r28, 0x01	; 1
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6ee:	ca 15       	cp	r28, r10
     6f0:	db 05       	cpc	r29, r11
     6f2:	61 f0       	breq	.+24     	; 0x70c <memcpy_to_eeprom_with_checksum+0x54>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     6f4:	0f 5f       	subi	r16, 0xFF	; 255
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6f8:	ce 01       	movw	r24, r28
     6fa:	8c 0d       	add	r24, r12
     6fc:	9d 1d       	adc	r25, r13
    checksum = (checksum << 1) || (checksum >> 7);
     6fe:	ff 20       	and	r15, r15
     700:	71 f7       	brne	.-36     	; 0x6de <memcpy_to_eeprom_with_checksum+0x26>
     702:	2f 2d       	mov	r18, r15
     704:	22 1f       	adc	r18, r18
     706:	22 27       	eor	r18, r18
     708:	22 1f       	adc	r18, r18
     70a:	ea cf       	rjmp	.-44     	; 0x6e0 <memcpy_to_eeprom_with_checksum+0x28>
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     70c:	cc 0e       	add	r12, r28
     70e:	dd 1e       	adc	r13, r29
  }
  eeprom_put_char(destination, checksum);
     710:	c6 01       	movw	r24, r12
     712:	6f 2d       	mov	r22, r15
     714:	0e 94 3b 03 	call	0x676	; 0x676 <eeprom_put_char>
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	08 95       	ret
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     72c:	ff 24       	eor	r15, r15
     72e:	f0 cf       	rjmp	.-32     	; 0x710 <memcpy_to_eeprom_with_checksum+0x58>

00000730 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     730:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     732:	41 15       	cp	r20, r1
     734:	51 05       	cpc	r21, r1
     736:	c9 f1       	breq	.+114    	; 0x7aa <memcpy_from_eeprom_with_checksum+0x7a>
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     73e:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     740:	c9 01       	movw	r24, r18
     742:	86 0f       	add	r24, r22
     744:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     746:	f9 99       	sbic	0x1f, 1	; 31
     748:	fe cf       	rjmp	.-4      	; 0x746 <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     74a:	92 bd       	out	0x22, r25	; 34
     74c:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     74e:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     750:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     752:	aa 23       	and	r26, r26
     754:	59 f0       	breq	.+22     	; 0x76c <memcpy_from_eeprom_with_checksum+0x3c>
     756:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     758:	a8 2f       	mov	r26, r24
     75a:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     75c:	90 83       	st	Z, r25
     75e:	2f 5f       	subi	r18, 0xFF	; 255
     760:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     762:	24 17       	cp	r18, r20
     764:	35 07       	cpc	r19, r21
     766:	71 f0       	breq	.+28     	; 0x784 <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	ea cf       	rjmp	.-44     	; 0x740 <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     76c:	8a 2f       	mov	r24, r26
     76e:	88 1f       	adc	r24, r24
     770:	88 27       	eor	r24, r24
     772:	88 1f       	adc	r24, r24
    checksum += data;    
     774:	a8 2f       	mov	r26, r24
     776:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     778:	90 83       	st	Z, r25
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     77e:	24 17       	cp	r18, r20
     780:	35 07       	cpc	r19, r21
     782:	91 f7       	brne	.-28     	; 0x768 <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     784:	62 0f       	add	r22, r18
     786:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     788:	f9 99       	sbic	0x1f, 1	; 31
     78a:	fe cf       	rjmp	.-4      	; 0x788 <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     78c:	72 bd       	out	0x22, r23	; 34
     78e:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     794:	80 b5       	in	r24, 0x20	; 32
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	a8 17       	cp	r26, r24
     79c:	11 f0       	breq	.+4      	; 0x7a2 <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     79e:	c9 01       	movw	r24, r18
     7a0:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     7a2:	21 e0       	ldi	r18, 0x01	; 1
     7a4:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7a6:	c9 01       	movw	r24, r18
     7a8:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7aa:	a0 e0       	ldi	r26, 0x00	; 0
     7ac:	ed cf       	rjmp	.-38     	; 0x788 <memcpy_from_eeprom_with_checksum+0x58>

000007ae <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     7ae:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     7b2:	60 93 30 02 	sts	0x0230, r22
  gc.plane_axis_2 = axis_2;
     7b6:	40 93 31 02 	sts	0x0231, r20
}
     7ba:	08 95       	ret

000007bc <set_feeder_x>:

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
     7bc:	60 93 06 02 	sts	0x0206, r22
     7c0:	70 93 07 02 	sts	0x0207, r23
     7c4:	80 93 08 02 	sts	0x0208, r24
     7c8:	90 93 09 02 	sts	0x0209, r25
}
     7cc:	08 95       	ret

000007ce <set_feeder_y>:

void set_feeder_y( double y )
{
	feeder_x_pos = y;
     7ce:	60 93 06 02 	sts	0x0206, r22
     7d2:	70 93 07 02 	sts	0x0207, r23
     7d6:	80 93 08 02 	sts	0x0208, r24
     7da:	90 93 09 02 	sts	0x0209, r25
}
     7de:	08 95       	ret

000007e0 <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     7e0:	2f 92       	push	r2
     7e2:	3f 92       	push	r3
     7e4:	4f 92       	push	r4
     7e6:	5f 92       	push	r5
     7e8:	6f 92       	push	r6
     7ea:	7f 92       	push	r7
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	28 97       	sbiw	r28, 0x08	; 8
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	69 83       	std	Y+1, r22	; 0x01
     816:	7a 83       	std	Y+2, r23	; 0x02
     818:	8b 83       	std	Y+3, r24	; 0x03
     81a:	9c 83       	std	Y+4, r25	; 0x04
     81c:	2d 83       	std	Y+5, r18	; 0x05
     81e:	3e 83       	std	Y+6, r19	; 0x06
     820:	4f 83       	std	Y+7, r20	; 0x07
     822:	58 87       	std	Y+8, r21	; 0x08
     824:	17 01       	movw	r2, r14
     826:	28 01       	movw	r4, r16
     828:	35 01       	movw	r6, r10
     82a:	46 01       	movw	r8, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e8       	ldi	r20, 0x80	; 128
     832:	5f eb       	ldi	r21, 0xBF	; 191
     834:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
     838:	88 23       	and	r24, r24
     83a:	41 f4       	brne	.+16     	; 0x84c <gotoxy+0x6c>
     83c:	20 90 1c 02 	lds	r2, 0x021C
     840:	30 90 1d 02 	lds	r3, 0x021D
     844:	40 90 1e 02 	lds	r4, 0x021E
     848:	50 90 1f 02 	lds	r5, 0x021F
  if( y == -1) c = gc.position[Y_AXIS] ;
     84c:	6d 81       	ldd	r22, Y+5	; 0x05
     84e:	7e 81       	ldd	r23, Y+6	; 0x06
     850:	8f 81       	ldd	r24, Y+7	; 0x07
     852:	98 85       	ldd	r25, Y+8	; 0x08
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e8       	ldi	r20, 0x80	; 128
     85a:	5f eb       	ldi	r21, 0xBF	; 191
     85c:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
     860:	88 23       	and	r24, r24
     862:	41 f4       	brne	.+16     	; 0x874 <gotoxy+0x94>
     864:	60 90 20 02 	lds	r6, 0x0220
     868:	70 90 21 02 	lds	r7, 0x0221
     86c:	80 90 22 02 	lds	r8, 0x0222
     870:	90 90 23 02 	lds	r9, 0x0223
  if( z == -1) z = gc.position[Z_AXIS] ;
     874:	c2 01       	movw	r24, r4
     876:	b1 01       	movw	r22, r2
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e8       	ldi	r20, 0x80	; 128
     87e:	5f eb       	ldi	r21, 0xBF	; 191
     880:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
     884:	88 23       	and	r24, r24
     886:	41 f4       	brne	.+16     	; 0x898 <gotoxy+0xb8>
     888:	20 90 24 02 	lds	r2, 0x0224
     88c:	30 90 25 02 	lds	r3, 0x0225
     890:	40 90 26 02 	lds	r4, 0x0226
     894:	50 90 27 02 	lds	r5, 0x0227
  if( c == -1) c = gc.position[C_AXIS] ;
     898:	c4 01       	movw	r24, r8
     89a:	b3 01       	movw	r22, r6
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e8       	ldi	r20, 0x80	; 128
     8a2:	5f eb       	ldi	r21, 0xBF	; 191
     8a4:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
     8a8:	88 23       	and	r24, r24
     8aa:	41 f4       	brne	.+16     	; 0x8bc <gotoxy+0xdc>
     8ac:	60 90 28 02 	lds	r6, 0x0228
     8b0:	70 90 29 02 	lds	r7, 0x0229
     8b4:	80 90 2a 02 	lds	r8, 0x022A
     8b8:	90 90 2b 02 	lds	r9, 0x022B

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     8bc:	00 d0       	rcall	.+0      	; 0x8be <gotoxy+0xde>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <gotoxy+0xe0>
     8c0:	80 91 18 02 	lds	r24, 0x0218
     8c4:	90 91 19 02 	lds	r25, 0x0219
     8c8:	a0 91 1a 02 	lds	r26, 0x021A
     8cc:	b0 91 1b 02 	lds	r27, 0x021B
     8d0:	ed b7       	in	r30, 0x3d	; 61
     8d2:	fe b7       	in	r31, 0x3e	; 62
     8d4:	81 83       	std	Z+1, r24	; 0x01
     8d6:	92 83       	std	Z+2, r25	; 0x02
     8d8:	a3 83       	std	Z+3, r26	; 0x03
     8da:	b4 83       	std	Z+4, r27	; 0x04
     8dc:	16 82       	std	Z+6, r1	; 0x06
     8de:	15 82       	std	Z+5, r1	; 0x05
     8e0:	69 81       	ldd	r22, Y+1	; 0x01
     8e2:	7a 81       	ldd	r23, Y+2	; 0x02
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	9c 81       	ldd	r25, Y+4	; 0x04
     8e8:	2d 81       	ldd	r18, Y+5	; 0x05
     8ea:	3e 81       	ldd	r19, Y+6	; 0x06
     8ec:	4f 81       	ldd	r20, Y+7	; 0x07
     8ee:	58 85       	ldd	r21, Y+8	; 0x08
     8f0:	82 01       	movw	r16, r4
     8f2:	71 01       	movw	r14, r2
     8f4:	64 01       	movw	r12, r8
     8f6:	53 01       	movw	r10, r6
     8f8:	0e 94 be 10 	call	0x217c	; 0x217c <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	ab 81       	ldd	r26, Y+3	; 0x03
     902:	bc 81       	ldd	r27, Y+4	; 0x04
     904:	80 93 1c 02 	sts	0x021C, r24
     908:	90 93 1d 02 	sts	0x021D, r25
     90c:	a0 93 1e 02 	sts	0x021E, r26
     910:	b0 93 1f 02 	sts	0x021F, r27
   gc.position[Y_AXIS] = y;
     914:	8d 81       	ldd	r24, Y+5	; 0x05
     916:	9e 81       	ldd	r25, Y+6	; 0x06
     918:	af 81       	ldd	r26, Y+7	; 0x07
     91a:	b8 85       	ldd	r27, Y+8	; 0x08
     91c:	80 93 20 02 	sts	0x0220, r24
     920:	90 93 21 02 	sts	0x0221, r25
     924:	a0 93 22 02 	sts	0x0222, r26
     928:	b0 93 23 02 	sts	0x0223, r27
   gc.position[Z_AXIS] = z;
     92c:	20 92 24 02 	sts	0x0224, r2
     930:	30 92 25 02 	sts	0x0225, r3
     934:	40 92 26 02 	sts	0x0226, r4
     938:	50 92 27 02 	sts	0x0227, r5

   // C axis is always 0
   gc.position[C_AXIS] = c;
     93c:	60 92 28 02 	sts	0x0228, r6
     940:	70 92 29 02 	sts	0x0229, r7
     944:	80 92 2a 02 	sts	0x022A, r8
     948:	90 92 2b 02 	sts	0x022B, r9
     94c:	ad b7       	in	r26, 0x3d	; 61
     94e:	be b7       	in	r27, 0x3e	; 62
     950:	16 96       	adiw	r26, 0x06	; 6
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	be bf       	out	0x3e, r27	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	ad bf       	out	0x3d, r26	; 61

}
     95c:	28 96       	adiw	r28, 0x08	; 8
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	7f 90       	pop	r7
     982:	6f 90       	pop	r6
     984:	5f 90       	pop	r5
     986:	4f 90       	pop	r4
     988:	3f 90       	pop	r3
     98a:	2f 90       	pop	r2
     98c:	08 95       	ret

0000098e <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     98e:	af 92       	push	r10
     990:	bf 92       	push	r11
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	df 93       	push	r29
     9a0:	cf 93       	push	r28
     9a2:	0f 92       	push	r0
     9a4:	0f 92       	push	r0
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	6c 01       	movw	r12, r24
     9ac:	5b 01       	movw	r10, r22
     9ae:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     9b0:	fb 01       	movw	r30, r22
     9b2:	00 81       	ld	r16, Z
     9b4:	11 81       	ldd	r17, Z+1	; 0x01
     9b6:	08 0f       	add	r16, r24
     9b8:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     9ba:	c8 01       	movw	r24, r16
     9bc:	be 01       	movw	r22, r28
     9be:	6f 5f       	subi	r22, 0xFF	; 255
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 bf 30 	call	0x617e	; 0x617e <strtod>
     9c6:	f7 01       	movw	r30, r14
     9c8:	60 83       	st	Z, r22
     9ca:	71 83       	std	Z+1, r23	; 0x01
     9cc:	82 83       	std	Z+2, r24	; 0x02
     9ce:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	80 17       	cp	r24, r16
     9d6:	91 07       	cpc	r25, r17
     9d8:	a9 f0       	breq	.+42     	; 0xa04 <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     9da:	8c 19       	sub	r24, r12
     9dc:	9d 09       	sbc	r25, r13
     9de:	f5 01       	movw	r30, r10
     9e0:	91 83       	std	Z+1, r25	; 0x01
     9e2:	80 83       	st	Z, r24
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     9e8:	c9 01       	movw	r24, r18
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	cf 91       	pop	r28
     9f0:	df 91       	pop	r29
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	80 93 0a 02 	sts	0x020A, r24
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	ec cf       	rjmp	.-40     	; 0x9e8 <read_double+0x5a>

00000a10 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
     a1a:	8b 01       	movw	r16, r22
     a1c:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     a1e:	ed 91       	ld	r30, X+
     a20:	fc 91       	ld	r31, X
     a22:	11 97       	sbiw	r26, 0x01	; 1
     a24:	e4 0f       	add	r30, r20
     a26:	f5 1f       	adc	r31, r21
     a28:	e0 81       	ld	r30, Z
     a2a:	ee 23       	and	r30, r30
     a2c:	39 f0       	breq	.+14     	; 0xa3c <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     a2e:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     a30:	e1 54       	subi	r30, 0x41	; 65
     a32:	ea 31       	cpi	r30, 0x1A	; 26
     a34:	58 f0       	brcs	.+22     	; 0xa4c <next_statement+0x3c>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	80 93 0a 02 	sts	0x020A, r24
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     a40:	c9 01       	movw	r24, r18
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     a4c:	8d 91       	ld	r24, X+
     a4e:	9c 91       	ld	r25, X
     a50:	11 97       	sbiw	r26, 0x01	; 1
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	8d 93       	st	X+, r24
     a56:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     a58:	ca 01       	movw	r24, r20
     a5a:	b9 01       	movw	r22, r18
     a5c:	a8 01       	movw	r20, r16
     a5e:	0e 94 c7 04 	call	0x98e	; 0x98e <read_double>
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	11 f0       	breq	.+4      	; 0xa6a <next_statement+0x5a>
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     a6c:	c9 01       	movw	r24, r18
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	08 95       	ret

00000a78 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     a78:	88 e2       	ldi	r24, 0x28	; 40
     a7a:	ea e0       	ldi	r30, 0x0A	; 10
     a7c:	f2 e0       	ldi	r31, 0x02	; 2
     a7e:	df 01       	movw	r26, r30
     a80:	1d 92       	st	X+, r1
     a82:	8a 95       	dec	r24
     a84:	e9 f7       	brne	.-6      	; 0xa80 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     a86:	60 91 80 09 	lds	r22, 0x0980
     a8a:	70 91 81 09 	lds	r23, 0x0981
     a8e:	80 91 82 09 	lds	r24, 0x0982
     a92:	90 91 83 09 	lds	r25, 0x0983
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e7       	ldi	r20, 0x70	; 112
     a9c:	52 e4       	ldi	r21, 0x42	; 66
     a9e:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
     aa2:	60 93 14 02 	sts	0x0214, r22
     aa6:	70 93 15 02 	sts	0x0215, r23
     aaa:	80 93 16 02 	sts	0x0216, r24
     aae:	90 93 17 02 	sts	0x0217, r25
  gc.seek_rate = settings.default_seek_rate/60;
     ab2:	60 91 84 09 	lds	r22, 0x0984
     ab6:	70 91 85 09 	lds	r23, 0x0985
     aba:	80 91 86 09 	lds	r24, 0x0986
     abe:	90 91 87 09 	lds	r25, 0x0987
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e7       	ldi	r20, 0x70	; 112
     ac8:	52 e4       	ldi	r21, 0x42	; 66
     aca:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
     ace:	60 93 18 02 	sts	0x0218, r22
     ad2:	70 93 19 02 	sts	0x0219, r23
     ad6:	80 93 1a 02 	sts	0x021A, r24
     ada:	90 93 1b 02 	sts	0x021B, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     ade:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	80 93 31 02 	sts	0x0231, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     aee:	90 93 0e 02 	sts	0x020E, r25
}
     af2:	08 95       	ret

00000af4 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     af4:	2f 92       	push	r2
     af6:	3f 92       	push	r3
     af8:	4f 92       	push	r4
     afa:	5f 92       	push	r5
     afc:	6f 92       	push	r6
     afe:	7f 92       	push	r7
     b00:	8f 92       	push	r8
     b02:	9f 92       	push	r9
     b04:	af 92       	push	r10
     b06:	bf 92       	push	r11
     b08:	cf 92       	push	r12
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	df 93       	push	r29
     b16:	cf 93       	push	r28
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	e7 97       	sbiw	r28, 0x37	; 55
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	de bf       	out	0x3e, r29	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     b2a:	1b 82       	std	Y+3, r1	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	88 87       	std	Y+8, r24	; 0x08
     b38:	99 87       	std	Y+9, r25	; 0x09
     b3a:	aa 87       	std	Y+10, r26	; 0x0a
     b3c:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     b3e:	ac e0       	ldi	r26, 0x0C	; 12
     b40:	2a 2e       	mov	r2, r26
     b42:	31 2c       	mov	r3, r1
     b44:	2c 0e       	add	r2, r28
     b46:	3d 1e       	adc	r3, r29
     b48:	80 e1       	ldi	r24, 0x10	; 16
     b4a:	d1 01       	movw	r26, r2
     b4c:	e8 2f       	mov	r30, r24
     b4e:	1d 92       	st	X+, r1
     b50:	ea 95       	dec	r30
     b52:	e9 f7       	brne	.-6      	; 0xb4e <gc_execute_line+0x5a>
  clear_vector(offset);
     b54:	fc e1       	ldi	r31, 0x1C	; 28
     b56:	cf 2e       	mov	r12, r31
     b58:	d1 2c       	mov	r13, r1
     b5a:	cc 0e       	add	r12, r28
     b5c:	dd 1e       	adc	r13, r29
     b5e:	d6 01       	movw	r26, r12
     b60:	1d 92       	st	X+, r1
     b62:	8a 95       	dec	r24
     b64:	e9 f7       	brne	.-6      	; 0xb60 <gc_execute_line+0x6c>

  gc.status_code = GCSTATUS_OK;
     b66:	10 92 0a 02 	sts	0x020A, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     b6a:	f5 01       	movw	r30, r10
     b6c:	80 81       	ld	r24, Z
     b6e:	88 32       	cpi	r24, 0x28	; 40
     b70:	09 f4       	brne	.+2      	; 0xb74 <gc_execute_line+0x80>
     b72:	8a c0       	rjmp	.+276    	; 0xc88 <gc_execute_line+0x194>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     b74:	8f 32       	cpi	r24, 0x2F	; 47
     b76:	09 f4       	brne	.+2      	; 0xb7a <gc_execute_line+0x86>
     b78:	6e c0       	rjmp	.+220    	; 0xc56 <gc_execute_line+0x162>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     b7a:	84 32       	cpi	r24, 0x24	; 36
     b7c:	09 f4       	brne	.+2      	; 0xb80 <gc_execute_line+0x8c>
     b7e:	4d c0       	rjmp	.+154    	; 0xc1a <gc_execute_line+0x126>
     b80:	19 aa       	std	Y+49, r1	; 0x31
     b82:	18 aa       	std	Y+48, r1	; 0x30
     b84:	e2 e0       	ldi	r30, 0x02	; 2
     b86:	6e 2e       	mov	r6, r30
     b88:	71 2c       	mov	r7, r1
     b8a:	6c 0e       	add	r6, r28
     b8c:	7d 1e       	adc	r7, r29
     b8e:	74 e0       	ldi	r23, 0x04	; 4
     b90:	47 2e       	mov	r4, r23
     b92:	51 2c       	mov	r5, r1
     b94:	4c 0e       	add	r4, r28
     b96:	5d 1e       	adc	r5, r29
     b98:	4e 01       	movw	r8, r28
     b9a:	08 94       	sec
     b9c:	81 1c       	adc	r8, r1
     b9e:	91 1c       	adc	r9, r1
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     ba0:	c4 01       	movw	r24, r8
     ba2:	b2 01       	movw	r22, r4
     ba4:	a5 01       	movw	r20, r10
     ba6:	93 01       	movw	r18, r6
     ba8:	0e 94 08 05 	call	0xa10	; 0xa10 <next_statement>
     bac:	89 2b       	or	r24, r25
     bae:	09 f4       	brne	.+2      	; 0xbb2 <gc_execute_line+0xbe>
     bb0:	a0 c2       	rjmp	.+1344   	; 0x10f2 <gc_execute_line+0x5fe>
    int_value = trunc(value);
     bb2:	6c 81       	ldd	r22, Y+4	; 0x04
     bb4:	7d 81       	ldd	r23, Y+5	; 0x05
     bb6:	8e 81       	ldd	r24, Y+6	; 0x06
     bb8:	9f 81       	ldd	r25, Y+7	; 0x07
     bba:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <trunc>
     bbe:	7b 01       	movw	r14, r22
     bc0:	8c 01       	movw	r16, r24
     bc2:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>

    switch(letter) {
     bc6:	29 81       	ldd	r18, Y+1	; 0x01
     bc8:	2d 34       	cpi	r18, 0x4D	; 77
     bca:	09 f4       	brne	.+2      	; 0xbce <gc_execute_line+0xda>
     bcc:	42 c1       	rjmp	.+644    	; 0xe52 <gc_execute_line+0x35e>
     bce:	2e 34       	cpi	r18, 0x4E	; 78
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <gc_execute_line+0xe0>
     bd2:	47 c0       	rjmp	.+142    	; 0xc62 <gc_execute_line+0x16e>
     bd4:	24 34       	cpi	r18, 0x44	; 68
     bd6:	09 f4       	brne	.+2      	; 0xbda <gc_execute_line+0xe6>
     bd8:	6a c0       	rjmp	.+212    	; 0xcae <gc_execute_line+0x1ba>
     bda:	27 34       	cpi	r18, 0x47	; 71
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <gc_execute_line+0xec>
     bde:	56 c0       	rjmp	.+172    	; 0xc8c <gc_execute_line+0x198>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }

    if(gc.status_code) { break; }
     be0:	80 91 0a 02 	lds	r24, 0x020A
     be4:	88 23       	and	r24, r24
     be6:	e1 f2       	breq	.-72     	; 0xba0 <gc_execute_line+0xac>
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     be8:	e7 96       	adiw	r28, 0x37	; 55
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	8f 90       	pop	r8
     c0c:	7f 90       	pop	r7
     c0e:	6f 90       	pop	r6
     c10:	5f 90       	pop	r5
     c12:	4f 90       	pop	r4
     c14:	3f 90       	pop	r3
     c16:	2f 90       	pop	r2
     c18:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	9b 83       	std	Y+3, r25	; 0x03
     c20:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c22:	d5 01       	movw	r26, r10
     c24:	11 96       	adiw	r26, 0x01	; 1
     c26:	8c 91       	ld	r24, X
     c28:	88 23       	and	r24, r24
     c2a:	61 f1       	breq	.+88     	; 0xc84 <gc_execute_line+0x190>
    read_double(line, &char_counter, &p);
     c2c:	8e 01       	movw	r16, r28
     c2e:	0e 5f       	subi	r16, 0xFE	; 254
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	c5 01       	movw	r24, r10
     c34:	b8 01       	movw	r22, r16
     c36:	ae 01       	movw	r20, r28
     c38:	48 5f       	subi	r20, 0xF8	; 248
     c3a:	5f 4f       	sbci	r21, 0xFF	; 255
     c3c:	0e 94 c7 04 	call	0x98e	; 0x98e <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     c40:	2a 81       	ldd	r18, Y+2	; 0x02
     c42:	3b 81       	ldd	r19, Y+3	; 0x03
     c44:	f5 01       	movw	r30, r10
     c46:	e2 0f       	add	r30, r18
     c48:	f3 1f       	adc	r31, r19
     c4a:	80 81       	ld	r24, Z
     c4c:	8d 33       	cpi	r24, 0x3D	; 61
     c4e:	09 f4       	brne	.+2      	; 0xc52 <gc_execute_line+0x15e>
     c50:	34 c1       	rjmp	.+616    	; 0xeba <gc_execute_line+0x3c6>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	c9 cf       	rjmp	.-110    	; 0xbe8 <gc_execute_line+0xf4>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	9b 81       	ldd	r25, Y+3	; 0x03
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	9b 83       	std	Y+3, r25	; 0x03
     c5e:	8a 83       	std	Y+2, r24	; 0x02
     c60:	8f cf       	rjmp	.-226    	; 0xb80 <gc_execute_line+0x8c>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     c62:	20 35       	cpi	r18, 0x50	; 80
     c64:	f9 f0       	breq	.+62     	; 0xca4 <gc_execute_line+0x1b0>
     c66:	24 35       	cpi	r18, 0x54	; 84
     c68:	09 f0       	breq	.+2      	; 0xc6c <gc_execute_line+0x178>
     c6a:	ba cf       	rjmp	.-140    	; 0xbe0 <gc_execute_line+0xec>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     c6c:	c8 01       	movw	r24, r16
     c6e:	b7 01       	movw	r22, r14
     c70:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
     c74:	60 93 2c 02 	sts	0x022C, r22
    }

    if(gc.status_code) { break; }
     c78:	80 91 0a 02 	lds	r24, 0x020A
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <gc_execute_line+0x18e>
     c80:	8f cf       	rjmp	.-226    	; 0xba0 <gc_execute_line+0xac>
     c82:	b2 cf       	rjmp	.-156    	; 0xbe8 <gc_execute_line+0xf4>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c84:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <settings_dump>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	ae cf       	rjmp	.-164    	; 0xbe8 <gc_execute_line+0xf4>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     c8c:	e6 2f       	mov	r30, r22
     c8e:	f7 2f       	mov	r31, r23
     c90:	ef 35       	cpi	r30, 0x5F	; 95
     c92:	f1 05       	cpc	r31, r1
     c94:	08 f4       	brcc	.+2      	; 0xc98 <gc_execute_line+0x1a4>
     c96:	eb c0       	rjmp	.+470    	; 0xe6e <gc_execute_line+0x37a>
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	80 93 0a 02 	sts	0x020A, r24
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     c9e:	80 91 0a 02 	lds	r24, 0x020A
     ca2:	a2 cf       	rjmp	.-188    	; 0xbe8 <gc_execute_line+0xf4>
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
		 case 'P':
			printCurrentPosition();
     ca4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <printCurrentPosition>
			return(gc.status_code);
     ca8:	80 91 0a 02 	lds	r24, 0x020A
     cac:	9d cf       	rjmp	.-198    	; 0xbe8 <gc_execute_line+0xf4>

	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     cae:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     cb0:	8a e2       	ldi	r24, 0x2A	; 42
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
		  	printBinary( DIRECTION_DDR );
     cb8:	60 b3       	in	r22, 0x10	; 16
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cc4:	87 e2       	ldi	r24, 0x27	; 39
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     ccc:	84 e1       	ldi	r24, 0x14	; 20
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
		  	printBinary( DIRECTION_PORT );
     cd4:	61 b3       	in	r22, 0x11	; 17
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <printBinary>
	      	printPgmString(PSTR("\r\n"));
     ce0:	81 e1       	ldi	r24, 0x11	; 17
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

			ch = PORTD;
     ce8:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
		  	printBinary( ch );
     cf2:	ff 24       	eor	r15, r15
     cf4:	00 e0       	ldi	r16, 0x00	; 0
     cf6:	10 e0       	ldi	r17, 0x00	; 0
     cf8:	c8 01       	movw	r24, r16
     cfa:	b7 01       	movw	r22, r14
     cfc:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d00:	84 e0       	ldi	r24, 0x04	; 4
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

			ch = PIND;
     d08:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     d0a:	85 ef       	ldi	r24, 0xF5	; 245
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
		  	printBinary( ch );
     d12:	ff 24       	eor	r15, r15
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	10 e0       	ldi	r17, 0x00	; 0
     d18:	c8 01       	movw	r24, r16
     d1a:	b7 01       	movw	r22, r14
     d1c:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d20:	82 ef       	ldi	r24, 0xF2	; 242
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

	      	printPgmString(PSTR("CAUTION:Simulate mode is on\n"));

#endif

	      	printPgmString(PSTR("to_millimeters(100) = "));
     d28:	8b ed       	ldi	r24, 0xDB	; 219
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     d30:	80 91 0d 02 	lds	r24, 0x020D
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <gc_execute_line+0x246>
     d38:	a2 c0       	rjmp	.+324    	; 0xe7e <gc_execute_line+0x38a>
     d3a:	6c ee       	ldi	r22, 0xEC	; 236
     d3c:	79 e0       	ldi	r23, 0x09	; 9
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
	      	printPgmString(PSTR("CAUTION:Simulate mode is on\n"));

#endif

	      	printPgmString(PSTR("to_millimeters(100) = "));
			printInteger( to_millimeters(100) );
     d42:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d46:	88 ed       	ldi	r24, 0xD8	; 216
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

	      	printPgmString(PSTR("avr_millis() = "));
     d4e:	88 ec       	ldi	r24, 0xC8	; 200
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
			printInteger( avr_millis() );
     d56:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
     d5a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d5e:	85 ec       	ldi	r24, 0xC5	; 197
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>


	      	printPgmString(PSTR("head down = "));
     d66:	88 eb       	ldi	r24, 0xB8	; 184
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
			printInteger( is_head_down() );
     d6e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d80:	85 eb       	ldi	r24, 0xB5	; 181
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     d88:	86 ea       	ldi	r24, 0xA6	; 166
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
			printInteger( head_moving() );
     d90:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     da2:	83 ea       	ldi	r24, 0xA3	; 163
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     daa:	83 e9       	ldi	r24, 0x93	; 147
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
			printInteger( vacuum_state() );
     db2:	0e 94 12 22 	call	0x4424	; 0x4424 <vacuum_state>
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e0       	ldi	r26, 0x00	; 0
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dc4:	80 e9       	ldi	r24, 0x90	; 144
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     dcc:	85 e8       	ldi	r24, 0x85	; 133
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
			printInteger( is_rotated() );
     dd4:	0e 94 ed 20 	call	0x41da	; 0x41da <is_rotated>
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a0 e0       	ldi	r26, 0x00	; 0
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     de6:	82 e8       	ldi	r24, 0x82	; 130
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
     dee:	86 e7       	ldi	r24, 0x76	; 118
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
			printInteger( get_busy() );
     df6:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <get_busy>
     dfa:	aa 27       	eor	r26, r26
     dfc:	97 fd       	sbrc	r25, 7
     dfe:	a0 95       	com	r26
     e00:	ba 2f       	mov	r27, r26
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     e0a:	83 e7       	ldi	r24, 0x73	; 115
     e0c:	92 e0       	ldi	r25, 0x02	; 2
     e0e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>


			if( xLimit1() )
     e12:	0e 94 31 1a 	call	0x3462	; 0x3462 <xLimit1>
     e16:	88 23       	and	r24, r24
     e18:	09 f0       	breq	.+2      	; 0xe1c <gc_execute_line+0x328>
     e1a:	40 c0       	rjmp	.+128    	; 0xe9c <gc_execute_line+0x3a8>
		      	printPgmString(PSTR("XL1\r\n"));

			if( xLimit2() ){
     e1c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <xLimit2>
     e20:	88 23       	and	r24, r24
     e22:	09 f0       	breq	.+2      	; 0xe26 <gc_execute_line+0x332>
     e24:	45 c0       	rjmp	.+138    	; 0xeb0 <gc_execute_line+0x3bc>
		      	printPgmString(PSTR("XL2\r\n"));
			}

			if( yLimit1())
     e26:	0e 94 b0 19 	call	0x3360	; 0x3360 <yLimit1>
     e2a:	88 23       	and	r24, r24
     e2c:	e1 f5       	brne	.+120    	; 0xea6 <gc_execute_line+0x3b2>
		      	printPgmString(PSTR("YL1\r\n"));
			
			if( yLimit2() )
     e2e:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <yLimit2>
     e32:	88 23       	and	r24, r24
     e34:	71 f5       	brne	.+92     	; 0xe92 <gc_execute_line+0x39e>
		      	printPgmString(PSTR("YL2\r\n"));

			if( xHome() )
     e36:	0e 94 25 19 	call	0x324a	; 0x324a <xHome>
     e3a:	88 23       	and	r24, r24
     e3c:	29 f5       	brne	.+74     	; 0xe88 <gc_execute_line+0x394>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( yHome() )
     e3e:	0e 94 28 19 	call	0x3250	; 0x3250 <yHome>
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <gc_execute_line+0x354>
     e46:	2b cf       	rjmp	.-426    	; 0xc9e <gc_execute_line+0x1aa>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     e48:	89 e4       	ldi	r24, 0x49	; 73
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
     e50:	26 cf       	rjmp	.-436    	; 0xc9e <gc_execute_line+0x1aa>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e52:	e6 2f       	mov	r30, r22
     e54:	f7 2f       	mov	r31, r23
     e56:	ed 33       	cpi	r30, 0x3D	; 61
     e58:	f1 05       	cpc	r31, r1
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <gc_execute_line+0x36a>
     e5c:	1d cf       	rjmp	.-454    	; 0xc98 <gc_execute_line+0x1a4>
     e5e:	ee 58       	subi	r30, 0x8E	; 142
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	05 90       	lpm	r0, Z+
     e68:	f4 91       	lpm	r31, Z+
     e6a:	e0 2d       	mov	r30, r0
     e6c:	19 94       	eijmp
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     e6e:	e1 55       	subi	r30, 0x51	; 81
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	05 90       	lpm	r0, Z+
     e78:	f4 91       	lpm	r31, Z+
     e7a:	e0 2d       	mov	r30, r0
     e7c:	19 94       	eijmp
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     e7e:	64 e6       	ldi	r22, 0x64	; 100
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	5d cf       	rjmp	.-326    	; 0xd42 <gc_execute_line+0x24e>
			
			if( yLimit2() )
		      	printPgmString(PSTR("YL2\r\n"));

			if( xHome() )
		      	printPgmString(PSTR("X_HOME\r\n"));
     e88:	82 e5       	ldi	r24, 0x52	; 82
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
     e90:	d6 cf       	rjmp	.-84     	; 0xe3e <gc_execute_line+0x34a>

			if( yLimit1())
		      	printPgmString(PSTR("YL1\r\n"));
			
			if( yLimit2() )
		      	printPgmString(PSTR("YL2\r\n"));
     e92:	8b e5       	ldi	r24, 0x5B	; 91
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
     e9a:	cd cf       	rjmp	.-102    	; 0xe36 <gc_execute_line+0x342>
			printInteger( get_busy() );
	      	printPgmString(PSTR("\r\n"));


			if( xLimit1() )
		      	printPgmString(PSTR("XL1\r\n"));
     e9c:	8d e6       	ldi	r24, 0x6D	; 109
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
     ea4:	bb cf       	rjmp	.-138    	; 0xe1c <gc_execute_line+0x328>
			if( xLimit2() ){
		      	printPgmString(PSTR("XL2\r\n"));
			}

			if( yLimit1())
		      	printPgmString(PSTR("YL1\r\n"));
     ea6:	81 e6       	ldi	r24, 0x61	; 97
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
     eae:	bf cf       	rjmp	.-130    	; 0xe2e <gc_execute_line+0x33a>

			if( xLimit1() )
		      	printPgmString(PSTR("XL1\r\n"));

			if( xLimit2() ){
		      	printPgmString(PSTR("XL2\r\n"));
     eb0:	87 e6       	ldi	r24, 0x67	; 103
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
     eb8:	b6 cf       	rjmp	.-148    	; 0xe26 <gc_execute_line+0x332>
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	3b 83       	std	Y+3, r19	; 0x03
     ec0:	2a 83       	std	Y+2, r18	; 0x02
    read_double(line, &char_counter, &value);
     ec2:	c5 01       	movw	r24, r10
     ec4:	b8 01       	movw	r22, r16
     ec6:	ae 01       	movw	r20, r28
     ec8:	4c 5f       	subi	r20, 0xFC	; 252
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	0e 94 c7 04 	call	0x98e	; 0x98e <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     ed0:	ea 81       	ldd	r30, Y+2	; 0x02
     ed2:	fb 81       	ldd	r31, Y+3	; 0x03
     ed4:	ea 0d       	add	r30, r10
     ed6:	fb 1d       	adc	r31, r11
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	09 f0       	breq	.+2      	; 0xee0 <gc_execute_line+0x3ec>
     ede:	b9 ce       	rjmp	.-654    	; 0xc52 <gc_execute_line+0x15e>
    settings_store_setting(p, value);
     ee0:	68 85       	ldd	r22, Y+8	; 0x08
     ee2:	79 85       	ldd	r23, Y+9	; 0x09
     ee4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee8:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	4c 81       	ldd	r20, Y+4	; 0x04
     ef2:	5d 81       	ldd	r21, Y+5	; 0x05
     ef4:	6e 81       	ldd	r22, Y+6	; 0x06
     ef6:	7f 81       	ldd	r23, Y+7	; 0x07
     ef8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <settings_store_setting>
    return(gc.status_code);
     efc:	80 91 0a 02 	lds	r24, 0x020A
     f00:	73 ce       	rjmp	.-794    	; 0xbe8 <gc_execute_line+0xf4>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
     f02:	0e 94 56 24 	call	0x48ac	; 0x48ac <putdown_part>
     f06:	80 93 0a 02 	sts	0x020A, r24
     f0a:	e1 e0       	ldi	r30, 0x01	; 1
     f0c:	e8 ab       	std	Y+48, r30	; 0x30
     f0e:	68 ce       	rjmp	.-816    	; 0xbe0 <gc_execute_line+0xec>
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	90 93 0b 02 	sts	0x020B, r25
     f16:	64 ce       	rjmp	.-824    	; 0xbe0 <gc_execute_line+0xec>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	90 93 0c 02 	sts	0x020C, r25
     f1e:	60 ce       	rjmp	.-832    	; 0xbe0 <gc_execute_line+0xec>
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	88 ab       	std	Y+48, r24	; 0x30
     f24:	5d ce       	rjmp	.-838    	; 0xbe0 <gc_execute_line+0xec>
     f26:	10 92 0e 02 	sts	0x020E, r1
     f2a:	5a ce       	rjmp	.-844    	; 0xbe0 <gc_execute_line+0xec>
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     f2c:	f1 e0       	ldi	r31, 0x01	; 1
     f2e:	f0 93 0e 02 	sts	0x020E, r31
     f32:	56 ce       	rjmp	.-852    	; 0xbe0 <gc_execute_line+0xec>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     f34:	e4 e0       	ldi	r30, 0x04	; 4
     f36:	e0 93 0b 02 	sts	0x020B, r30
     f3a:	52 ce       	rjmp	.-860    	; 0xbe0 <gc_execute_line+0xec>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	b9 ab       	std	Y+49, r27	; 0x31
     f40:	4f ce       	rjmp	.-866    	; 0xbe0 <gc_execute_line+0xec>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     f42:	b2 e0       	ldi	r27, 0x02	; 2
     f44:	b8 ab       	std	Y+48, r27	; 0x30
     f46:	4c ce       	rjmp	.-872    	; 0xbe0 <gc_execute_line+0xec>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f48:	10 92 0d 02 	sts	0x020D, r1
     f4c:	49 ce       	rjmp	.-878    	; 0xbe0 <gc_execute_line+0xec>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     f4e:	a1 e0       	ldi	r26, 0x01	; 1
     f50:	a0 93 0d 02 	sts	0x020D, r26
     f54:	45 ce       	rjmp	.-886    	; 0xbe0 <gc_execute_line+0xec>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     f62:	10 92 31 02 	sts	0x0231, r1
     f66:	3c ce       	rjmp	.-904    	; 0xbe0 <gc_execute_line+0xec>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f68:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f6c:	e2 e0       	ldi	r30, 0x02	; 2
     f6e:	e0 93 30 02 	sts	0x0230, r30
  gc.plane_axis_2 = axis_2;
     f72:	f1 e0       	ldi	r31, 0x01	; 1
     f74:	f0 93 31 02 	sts	0x0231, r31
     f78:	33 ce       	rjmp	.-922    	; 0xbe0 <gc_execute_line+0xec>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f7a:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f7e:	a1 e0       	ldi	r26, 0x01	; 1
     f80:	a0 93 30 02 	sts	0x0230, r26
  gc.plane_axis_2 = axis_2;
     f84:	b2 e0       	ldi	r27, 0x02	; 2
     f86:	b0 93 31 02 	sts	0x0231, r27
     f8a:	2a ce       	rjmp	.-940    	; 0xbe0 <gc_execute_line+0xec>
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     f8c:	10 92 0c 02 	sts	0x020C, r1
     f90:	27 ce       	rjmp	.-946    	; 0xbe0 <gc_execute_line+0xec>
      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	80 93 0b 02 	sts	0x020B, r24
     f98:	23 ce       	rjmp	.-954    	; 0xbe0 <gc_execute_line+0xec>
	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	f0 93 0b 02 	sts	0x020B, r31
     fa0:	1f ce       	rjmp	.-962    	; 0xbe0 <gc_execute_line+0xec>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     fa2:	10 92 0b 02 	sts	0x020B, r1
     fa6:	1c ce       	rjmp	.-968    	; 0xbe0 <gc_execute_line+0xec>
#ifdef VERBOSE_DEBUG
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
#endif
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;
     fa8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <settings_reset>
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	98 ab       	std	Y+48, r25	; 0x30
     fb0:	17 ce       	rjmp	.-978    	; 0xbe0 <gc_execute_line+0xec>
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
#ifdef VERBOSE_DEBUG
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
#endif
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;
     fb2:	f6 e0       	ldi	r31, 0x06	; 6
     fb4:	f0 93 0a 02 	sts	0x020A, r31
     fb8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <get_limit_bits>
     fbc:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <serialWrite>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	88 ab       	std	Y+48, r24	; 0x30
     fc4:	0d ce       	rjmp	.-998    	; 0xbe0 <gc_execute_line+0xec>
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
     fc6:	0e 94 97 24 	call	0x492e	; 0x492e <pickup_part>
     fca:	80 93 0a 02 	sts	0x020A, r24
     fce:	b1 e0       	ldi	r27, 0x01	; 1
     fd0:	b8 ab       	std	Y+48, r27	; 0x30
     fd2:	06 ce       	rjmp	.-1012   	; 0xbe0 <gc_execute_line+0xec>
		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
     fd4:	0e 94 17 24 	call	0x482e	; 0x482e <vacuum_test>
     fd8:	a1 e0       	ldi	r26, 0x01	; 1
     fda:	a8 ab       	std	Y+48, r26	; 0x30
     fdc:	01 ce       	rjmp	.-1022   	; 0xbe0 <gc_execute_line+0xec>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
     fde:	0e 94 52 22 	call	0x44a4	; 0x44a4 <goto_vacpad>
     fe2:	80 93 0a 02 	sts	0x020A, r24
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	98 ab       	std	Y+48, r25	; 0x30
     fea:	fa cd       	rjmp	.-1036   	; 0xbe0 <gc_execute_line+0xec>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
     fec:	0e 94 b2 20 	call	0x4164	; 0x4164 <check_for_tool>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	88 ab       	std	Y+48, r24	; 0x30
     ff4:	f5 cd       	rjmp	.-1046   	; 0xbe0 <gc_execute_line+0xec>
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
     ff6:	0e 94 17 24 	call	0x482e	; 0x482e <vacuum_test>
     ffa:	f1 e0       	ldi	r31, 0x01	; 1
     ffc:	f8 ab       	std	Y+48, r31	; 0x30
     ffe:	f0 cd       	rjmp	.-1056   	; 0xbe0 <gc_execute_line+0xec>
		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
    1000:	0e 94 29 24 	call	0x4852	; 0x4852 <tape_knock>
    1004:	e1 e0       	ldi	r30, 0x01	; 1
    1006:	e8 ab       	std	Y+48, r30	; 0x30
    1008:	eb cd       	rjmp	.-1066   	; 0xbe0 <gc_execute_line+0xec>
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
    1012:	b1 e0       	ldi	r27, 0x01	; 1
    1014:	b8 ab       	std	Y+48, r27	; 0x30
    1016:	e4 cd       	rjmp	.-1080   	; 0xbe0 <gc_execute_line+0xec>
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
    1020:	a1 e0       	ldi	r26, 0x01	; 1
    1022:	a8 ab       	std	Y+48, r26	; 0x30
    1024:	dd cd       	rjmp	.-1094   	; 0xbe0 <gc_execute_line+0xec>
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;
    1026:	86 e0       	ldi	r24, 0x06	; 6
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	98 ab       	std	Y+48, r25	; 0x30
    1032:	d6 cd       	rjmp	.-1108   	; 0xbe0 <gc_execute_line+0xec>
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
    1034:	85 e0       	ldi	r24, 0x05	; 5
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	88 ab       	std	Y+48, r24	; 0x30
    1040:	cf cd       	rjmp	.-1122   	; 0xbe0 <gc_execute_line+0xec>
		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
    1042:	84 e0       	ldi	r24, 0x04	; 4
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>
    104a:	f1 e0       	ldi	r31, 0x01	; 1
    104c:	f8 ab       	std	Y+48, r31	; 0x30
    104e:	c8 cd       	rjmp	.-1136   	; 0xbe0 <gc_execute_line+0xec>

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>
    1058:	e1 e0       	ldi	r30, 0x01	; 1
    105a:	e8 ab       	std	Y+48, r30	; 0x30
    105c:	c1 cd       	rjmp	.-1150   	; 0xbe0 <gc_execute_line+0xec>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>
    1066:	b1 e0       	ldi	r27, 0x01	; 1
    1068:	b8 ab       	std	Y+48, r27	; 0x30
    106a:	ba cd       	rjmp	.-1164   	; 0xbe0 <gc_execute_line+0xec>
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>
    1074:	a1 e0       	ldi	r26, 0x01	; 1
    1076:	a8 ab       	std	Y+48, r26	; 0x30
    1078:	b3 cd       	rjmp	.-1178   	; 0xbe0 <gc_execute_line+0xec>
		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	98 ab       	std	Y+48, r25	; 0x30
    1086:	ac cd       	rjmp	.-1192   	; 0xbe0 <gc_execute_line+0xec>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	88 ab       	std	Y+48, r24	; 0x30
    1094:	a5 cd       	rjmp	.-1206   	; 0xbe0 <gc_execute_line+0xec>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	f8 ab       	std	Y+48, r31	; 0x30
    10a2:	9e cd       	rjmp	.-1220   	; 0xbe0 <gc_execute_line+0xec>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
    10a4:	10 92 13 02 	sts	0x0213, r1
    10a8:	10 92 12 02 	sts	0x0212, r1
    10ac:	99 cd       	rjmp	.-1230   	; 0xbe0 <gc_execute_line+0xec>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	90 93 13 02 	sts	0x0213, r25
    10b6:	80 93 12 02 	sts	0x0212, r24
    10ba:	92 cd       	rjmp	.-1244   	; 0xbe0 <gc_execute_line+0xec>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
    10bc:	10 92 11 02 	sts	0x0211, r1
    10c0:	10 92 10 02 	sts	0x0210, r1
    10c4:	8d cd       	rjmp	.-1254   	; 0xbe0 <gc_execute_line+0xec>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
    10c6:	ef ef       	ldi	r30, 0xFF	; 255
    10c8:	ff ef       	ldi	r31, 0xFF	; 255
    10ca:	f0 93 11 02 	sts	0x0211, r31
    10ce:	e0 93 10 02 	sts	0x0210, r30
    10d2:	86 cd       	rjmp	.-1268   	; 0xbe0 <gc_execute_line+0xec>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	90 93 11 02 	sts	0x0211, r25
    10dc:	80 93 10 02 	sts	0x0210, r24
    10e0:	7f cd       	rjmp	.-1282   	; 0xbe0 <gc_execute_line+0xec>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    10e2:	b2 e0       	ldi	r27, 0x02	; 2
    10e4:	b0 93 0f 02 	sts	0x020F, r27
    10e8:	7b cd       	rjmp	.-1290   	; 0xbe0 <gc_execute_line+0xec>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    10ea:	a1 e0       	ldi	r26, 0x01	; 1
    10ec:	a0 93 0f 02 	sts	0x020F, r26
    10f0:	77 cd       	rjmp	.-1298   	; 0xbe0 <gc_execute_line+0xec>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    10f2:	80 91 0a 02 	lds	r24, 0x020A
    10f6:	88 23       	and	r24, r24
    10f8:	09 f0       	breq	.+2      	; 0x10fc <gc_execute_line+0x608>
    10fa:	76 cd       	rjmp	.-1300   	; 0xbe8 <gc_execute_line+0xf4>

  char_counter = 0;
    10fc:	1b 82       	std	Y+3, r1	; 0x03
    10fe:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
    1100:	80 e1       	ldi	r24, 0x10	; 16
    1102:	d6 01       	movw	r26, r12
    1104:	1d 92       	st	X+, r1
    1106:	8a 95       	dec	r24
    1108:	e9 f7       	brne	.-6      	; 0x1104 <gc_execute_line+0x610>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
    110a:	d1 01       	movw	r26, r2
    110c:	ec e1       	ldi	r30, 0x1C	; 28
    110e:	f2 e0       	ldi	r31, 0x02	; 2
    1110:	80 e1       	ldi	r24, 0x10	; 16
    1112:	01 90       	ld	r0, Z+
    1114:	0d 92       	st	X+, r0
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	e1 f7       	brne	.-8      	; 0x1112 <gc_execute_line+0x61e>
    111a:	1c aa       	std	Y+52, r1	; 0x34
    111c:	1d aa       	std	Y+53, r1	; 0x35
    111e:	b0 e8       	ldi	r27, 0x80	; 128
    1120:	be ab       	std	Y+54, r27	; 0x36
    1122:	ef eb       	ldi	r30, 0xBF	; 191
    1124:	ef ab       	std	Y+55, r30	; 0x37
    1126:	1b aa       	std	Y+51, r1	; 0x33
    1128:	1a aa       	std	Y+50, r1	; 0x32

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    112a:	c4 01       	movw	r24, r8
    112c:	b2 01       	movw	r22, r4
    112e:	a5 01       	movw	r20, r10
    1130:	93 01       	movw	r18, r6
    1132:	0e 94 08 05 	call	0xa10	; 0xa10 <next_statement>
    1136:	89 2b       	or	r24, r25
    1138:	09 f4       	brne	.+2      	; 0x113c <gc_execute_line+0x648>
    113a:	05 c1       	rjmp	.+522    	; 0x1346 <gc_execute_line+0x852>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    113c:	cc 80       	ldd	r12, Y+4	; 0x04
    113e:	dd 80       	ldd	r13, Y+5	; 0x05
    1140:	ee 80       	ldd	r14, Y+6	; 0x06
    1142:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1144:	80 91 0d 02 	lds	r24, 0x020D
    1148:	88 23       	and	r24, r24
    114a:	d9 f4       	brne	.+54     	; 0x1182 <gc_execute_line+0x68e>
    114c:	a7 01       	movw	r20, r14
    114e:	96 01       	movw	r18, r12

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1150:	09 81       	ldd	r16, Y+1	; 0x01
    1152:	0d 34       	cpi	r16, 0x4D	; 77
    1154:	19 f1       	breq	.+70     	; 0x119c <gc_execute_line+0x6a8>
    1156:	0e 34       	cpi	r16, 0x4E	; 78
    1158:	60 f5       	brcc	.+88     	; 0x11b2 <gc_execute_line+0x6be>
    115a:	08 34       	cpi	r16, 0x48	; 72
    115c:	09 f4       	brne	.+2      	; 0x1160 <gc_execute_line+0x66c>
    115e:	7a c0       	rjmp	.+244    	; 0x1254 <gc_execute_line+0x760>
    1160:	09 34       	cpi	r16, 0x49	; 73
    1162:	b8 f5       	brcc	.+110    	; 0x11d2 <gc_execute_line+0x6de>
    1164:	03 34       	cpi	r16, 0x43	; 67
    1166:	09 f4       	brne	.+2      	; 0x116a <gc_execute_line+0x676>
    1168:	8a c0       	rjmp	.+276    	; 0x127e <gc_execute_line+0x78a>
    116a:	06 34       	cpi	r16, 0x46	; 70
    116c:	f1 f6       	brne	.-68     	; 0x112a <gc_execute_line+0x636>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    116e:	80 91 0c 02 	lds	r24, 0x020C
    1172:	88 23       	and	r24, r24
    1174:	09 f4       	brne	.+2      	; 0x1178 <gc_execute_line+0x684>
    1176:	c1 c0       	rjmp	.+386    	; 0x12fa <gc_execute_line+0x806>
    1178:	2c ab       	std	Y+52, r18	; 0x34
    117a:	3d ab       	std	Y+53, r19	; 0x35
    117c:	4e ab       	std	Y+54, r20	; 0x36
    117e:	5f ab       	std	Y+55, r21	; 0x37
    1180:	d4 cf       	rjmp	.-88     	; 0x112a <gc_execute_line+0x636>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1182:	c7 01       	movw	r24, r14
    1184:	b6 01       	movw	r22, r12
    1186:	23 e3       	ldi	r18, 0x33	; 51
    1188:	33 e3       	ldi	r19, 0x33	; 51
    118a:	4b ec       	ldi	r20, 0xCB	; 203
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1192:	9b 01       	movw	r18, r22
    1194:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1196:	09 81       	ldd	r16, Y+1	; 0x01
    1198:	0d 34       	cpi	r16, 0x4D	; 77
    119a:	e9 f6       	brne	.-70     	; 0x1156 <gc_execute_line+0x662>
	feeder_x_pos = x;
}

void set_feeder_y( double y )
{
	feeder_x_pos = y;
    119c:	20 93 06 02 	sts	0x0206, r18
    11a0:	30 93 07 02 	sts	0x0207, r19
    11a4:	40 93 08 02 	sts	0x0208, r20
    11a8:	50 93 09 02 	sts	0x0209, r21
    11ac:	a1 e0       	ldi	r26, 0x01	; 1
    11ae:	a8 ab       	std	Y+48, r26	; 0x30
    11b0:	bc cf       	rjmp	.-136    	; 0x112a <gc_execute_line+0x636>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11b2:	03 35       	cpi	r16, 0x53	; 83
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <gc_execute_line+0x6c4>
    11b6:	45 c0       	rjmp	.+138    	; 0x1242 <gc_execute_line+0x74e>
    11b8:	04 35       	cpi	r16, 0x54	; 84
    11ba:	e8 f4       	brcc	.+58     	; 0x11f6 <gc_execute_line+0x702>
    11bc:	0e 34       	cpi	r16, 0x4E	; 78
    11be:	09 f4       	brne	.+2      	; 0x11c2 <gc_execute_line+0x6ce>
    11c0:	53 c0       	rjmp	.+166    	; 0x1268 <gc_execute_line+0x774>
    11c2:	00 35       	cpi	r16, 0x50	; 80
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <gc_execute_line+0x6d4>
    11c6:	b1 cf       	rjmp	.-158    	; 0x112a <gc_execute_line+0x636>
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
    11c8:	c8 86       	std	Y+8, r12	; 0x08
    11ca:	d9 86       	std	Y+9, r13	; 0x09
    11cc:	ea 86       	std	Y+10, r14	; 0x0a
    11ce:	fb 86       	std	Y+11, r15	; 0x0b
    11d0:	ac cf       	rjmp	.-168    	; 0x112a <gc_execute_line+0x636>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11d2:	0c 34       	cpi	r16, 0x4C	; 76
    11d4:	08 f0       	brcs	.+2      	; 0x11d8 <gc_execute_line+0x6e4>
    11d6:	a9 cf       	rjmp	.-174    	; 0x112a <gc_execute_line+0x636>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    11d8:	e0 2f       	mov	r30, r16
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	e9 54       	subi	r30, 0x49	; 73
    11de:	f0 40       	sbci	r31, 0x00	; 0
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	e8 0d       	add	r30, r8
    11ea:	f9 1d       	adc	r31, r9
    11ec:	23 8f       	std	Z+27, r18	; 0x1b
    11ee:	34 8f       	std	Z+28, r19	; 0x1c
    11f0:	45 8f       	std	Z+29, r20	; 0x1d
    11f2:	56 8f       	std	Z+30, r21	; 0x1e
    11f4:	9a cf       	rjmp	.-204    	; 0x112a <gc_execute_line+0x636>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11f6:	80 2f       	mov	r24, r16
    11f8:	88 55       	subi	r24, 0x58	; 88
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <gc_execute_line+0x70c>
    11fe:	95 cf       	rjmp	.-214    	; 0x112a <gc_execute_line+0x636>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    1200:	80 91 0e 02 	lds	r24, 0x020E
    1204:	88 23       	and	r24, r24
    1206:	09 f0       	breq	.+2      	; 0x120a <gc_execute_line+0x716>
    1208:	5a c0       	rjmp	.+180    	; 0x12be <gc_execute_line+0x7ca>
    120a:	f9 a9       	ldd	r31, Y+49	; 0x31
    120c:	ff 23       	and	r31, r31
    120e:	09 f0       	breq	.+2      	; 0x1212 <gc_execute_line+0x71e>
    1210:	56 c0       	rjmp	.+172    	; 0x12be <gc_execute_line+0x7ca>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	08 55       	subi	r16, 0x58	; 88
    1216:	10 40       	sbci	r17, 0x00	; 0
    1218:	00 0f       	add	r16, r16
    121a:	11 1f       	adc	r17, r17
    121c:	00 0f       	add	r16, r16
    121e:	11 1f       	adc	r17, r17
    1220:	08 0d       	add	r16, r8
    1222:	19 1d       	adc	r17, r9
    1224:	d8 01       	movw	r26, r16
    1226:	1b 96       	adiw	r26, 0x0b	; 11
    1228:	6d 91       	ld	r22, X+
    122a:	7d 91       	ld	r23, X+
    122c:	8d 91       	ld	r24, X+
    122e:	9c 91       	ld	r25, X
    1230:	1e 97       	sbiw	r26, 0x0e	; 14
    1232:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    1236:	f8 01       	movw	r30, r16
    1238:	63 87       	std	Z+11, r22	; 0x0b
    123a:	74 87       	std	Z+12, r23	; 0x0c
    123c:	85 87       	std	Z+13, r24	; 0x0d
    123e:	96 87       	std	Z+14, r25	; 0x0e
    1240:	74 cf       	rjmp	.-280    	; 0x112a <gc_execute_line+0x636>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    1242:	c7 01       	movw	r24, r14
    1244:	b6 01       	movw	r22, r12
    1246:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
    124a:	70 93 2e 02 	sts	0x022E, r23
    124e:	60 93 2d 02 	sts	0x022D, r22
    1252:	6b cf       	rjmp	.-298    	; 0x112a <gc_execute_line+0x636>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    1254:	ca 01       	movw	r24, r20
    1256:	b9 01       	movw	r22, r18
    1258:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
    125c:	7b ab       	std	Y+51, r23	; 0x33
    125e:	6a ab       	std	Y+50, r22	; 0x32
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    1260:	89 e0       	ldi	r24, 0x09	; 9
    1262:	80 93 0b 02 	sts	0x020B, r24
    1266:	61 cf       	rjmp	.-318    	; 0x112a <gc_execute_line+0x636>

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
    1268:	20 93 06 02 	sts	0x0206, r18
    126c:	30 93 07 02 	sts	0x0207, r19
    1270:	40 93 08 02 	sts	0x0208, r20
    1274:	50 93 09 02 	sts	0x0209, r21
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	98 ab       	std	Y+48, r25	; 0x30
    127c:	56 cf       	rjmp	.-340    	; 0x112a <gc_execute_line+0x636>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    127e:	80 91 0e 02 	lds	r24, 0x020E
    1282:	88 23       	and	r24, r24
    1284:	59 f5       	brne	.+86     	; 0x12dc <gc_execute_line+0x7e8>
    1286:	f9 a9       	ldd	r31, Y+49	; 0x31
    1288:	ff 23       	and	r31, r31
    128a:	41 f5       	brne	.+80     	; 0x12dc <gc_execute_line+0x7e8>
		target[C_AXIS] = gc.position[C_AXIS] + unit_converted_value;
      } else {
        target[C_AXIS] += ( gc.position[C_AXIS] +  unit_converted_value );
    128c:	ca 01       	movw	r24, r20
    128e:	b9 01       	movw	r22, r18
    1290:	20 91 28 02 	lds	r18, 0x0228
    1294:	30 91 29 02 	lds	r19, 0x0229
    1298:	40 91 2a 02 	lds	r20, 0x022A
    129c:	50 91 2b 02 	lds	r21, 0x022B
    12a0:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	68 8d       	ldd	r22, Y+24	; 0x18
    12aa:	79 8d       	ldd	r23, Y+25	; 0x19
    12ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12b0:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    12b4:	68 8f       	std	Y+24, r22	; 0x18
    12b6:	79 8f       	std	Y+25, r23	; 0x19
    12b8:	8a 8f       	std	Y+26, r24	; 0x1a
    12ba:	9b 8f       	std	Y+27, r25	; 0x1b
    12bc:	36 cf       	rjmp	.-404    	; 0x112a <gc_execute_line+0x636>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    12be:	e0 2f       	mov	r30, r16
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	e8 55       	subi	r30, 0x58	; 88
    12c4:	f0 40       	sbci	r31, 0x00	; 0
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	e8 0d       	add	r30, r8
    12d0:	f9 1d       	adc	r31, r9
    12d2:	23 87       	std	Z+11, r18	; 0x0b
    12d4:	34 87       	std	Z+12, r19	; 0x0c
    12d6:	45 87       	std	Z+13, r20	; 0x0d
    12d8:	56 87       	std	Z+14, r21	; 0x0e
    12da:	27 cf       	rjmp	.-434    	; 0x112a <gc_execute_line+0x636>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = gc.position[C_AXIS] + unit_converted_value;
    12dc:	60 91 28 02 	lds	r22, 0x0228
    12e0:	70 91 29 02 	lds	r23, 0x0229
    12e4:	80 91 2a 02 	lds	r24, 0x022A
    12e8:	90 91 2b 02 	lds	r25, 0x022B
    12ec:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    12f0:	68 8f       	std	Y+24, r22	; 0x18
    12f2:	79 8f       	std	Y+25, r23	; 0x19
    12f4:	8a 8f       	std	Y+26, r24	; 0x1a
    12f6:	9b 8f       	std	Y+27, r25	; 0x1b
    12f8:	18 cf       	rjmp	.-464    	; 0x112a <gc_execute_line+0x636>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    12fa:	80 91 0b 02 	lds	r24, 0x020B
    12fe:	88 23       	and	r24, r24
    1300:	89 f4       	brne	.+34     	; 0x1324 <gc_execute_line+0x830>
          gc.seek_rate = unit_converted_value/60;
    1302:	ca 01       	movw	r24, r20
    1304:	b9 01       	movw	r22, r18
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e7       	ldi	r20, 0x70	; 112
    130c:	52 e4       	ldi	r21, 0x42	; 66
    130e:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    1312:	60 93 18 02 	sts	0x0218, r22
    1316:	70 93 19 02 	sts	0x0219, r23
    131a:	80 93 1a 02 	sts	0x021A, r24
    131e:	90 93 1b 02 	sts	0x021B, r25
    1322:	03 cf       	rjmp	.-506    	; 0x112a <gc_execute_line+0x636>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
    1324:	ca 01       	movw	r24, r20
    1326:	b9 01       	movw	r22, r18
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e7       	ldi	r20, 0x70	; 112
    132e:	52 e4       	ldi	r21, 0x42	; 66
    1330:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    1334:	60 93 14 02 	sts	0x0214, r22
    1338:	70 93 15 02 	sts	0x0215, r23
    133c:	80 93 16 02 	sts	0x0216, r24
    1340:	90 93 17 02 	sts	0x0217, r25
    1344:	f2 ce       	rjmp	.-540    	; 0x112a <gc_execute_line+0x636>

    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1346:	80 91 0a 02 	lds	r24, 0x020A
    134a:	88 23       	and	r24, r24
    134c:	09 f0       	breq	.+2      	; 0x1350 <gc_execute_line+0x85c>
    134e:	4c cc       	rjmp	.-1896   	; 0xbe8 <gc_execute_line+0xf4>
    
  // Update spindle state
  if (gc.spindle_direction) {
    1350:	80 91 10 02 	lds	r24, 0x0210
    1354:	90 91 11 02 	lds	r25, 0x0211
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	09 f4       	brne	.+2      	; 0x135e <gc_execute_line+0x86a>
    135c:	5d c0       	rjmp	.+186    	; 0x1418 <gc_execute_line+0x924>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    135e:	40 91 2d 02 	lds	r20, 0x022D
    1362:	50 91 2e 02 	lds	r21, 0x022E
    1366:	66 27       	eor	r22, r22
    1368:	57 fd       	sbrc	r21, 7
    136a:	60 95       	com	r22
    136c:	76 2f       	mov	r23, r22
    136e:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    1372:	80 91 12 02 	lds	r24, 0x0212
    1376:	90 91 13 02 	lds	r25, 0x0213
    137a:	89 2b       	or	r24, r25
    137c:	09 f4       	brne	.+2      	; 0x1380 <gc_execute_line+0x88c>
    137e:	4f c0       	rjmp	.+158    	; 0x141e <gc_execute_line+0x92a>
  	coolant_flood(TRUE);
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 2d 03 	call	0x65a	; 0x65a <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    1388:	b8 a9       	ldd	r27, Y+48	; 0x30
    138a:	b1 30       	cpi	r27, 0x01	; 1
    138c:	09 f4       	brne	.+2      	; 0x1390 <gc_execute_line+0x89c>
    138e:	63 c0       	rjmp	.+198    	; 0x1456 <gc_execute_line+0x962>
    1390:	b1 30       	cpi	r27, 0x01	; 1
    1392:	08 f0       	brcs	.+2      	; 0x1396 <gc_execute_line+0x8a2>
    1394:	49 c0       	rjmp	.+146    	; 0x1428 <gc_execute_line+0x934>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1396:	80 91 0b 02 	lds	r24, 0x020B
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <gc_execute_line+0x8ac>
    139e:	7a c0       	rjmp	.+244    	; 0x1494 <gc_execute_line+0x9a0>
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <gc_execute_line+0x8b2>
    13a4:	6f c0       	rjmp	.+222    	; 0x1484 <gc_execute_line+0x990>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <gc_execute_line+0x8b4>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <gc_execute_line+0x8b6>
    13aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    13ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    13ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    13b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    13b2:	28 89       	ldd	r18, Y+16	; 0x10
    13b4:	39 89       	ldd	r19, Y+17	; 0x11
    13b6:	4a 89       	ldd	r20, Y+18	; 0x12
    13b8:	5b 89       	ldd	r21, Y+19	; 0x13
    13ba:	ec 88       	ldd	r14, Y+20	; 0x14
    13bc:	fd 88       	ldd	r15, Y+21	; 0x15
    13be:	0e 89       	ldd	r16, Y+22	; 0x16
    13c0:	1f 89       	ldd	r17, Y+23	; 0x17
    13c2:	a8 8c       	ldd	r10, Y+24	; 0x18
    13c4:	b9 8c       	ldd	r11, Y+25	; 0x19
    13c6:	ca 8c       	ldd	r12, Y+26	; 0x1a
    13c8:	db 8c       	ldd	r13, Y+27	; 0x1b
    13ca:	60 90 18 02 	lds	r6, 0x0218
    13ce:	70 90 19 02 	lds	r7, 0x0219
    13d2:	80 90 1a 02 	lds	r8, 0x021A
    13d6:	90 90 1b 02 	lds	r9, 0x021B
    13da:	ad b7       	in	r26, 0x3d	; 61
    13dc:	be b7       	in	r27, 0x3e	; 62
    13de:	11 96       	adiw	r26, 0x01	; 1
    13e0:	6d 92       	st	X+, r6
    13e2:	7d 92       	st	X+, r7
    13e4:	8d 92       	st	X+, r8
    13e6:	9c 92       	st	X, r9
    13e8:	14 97       	sbiw	r26, 0x04	; 4
    13ea:	16 96       	adiw	r26, 0x06	; 6
    13ec:	1c 92       	st	X, r1
    13ee:	1e 92       	st	-X, r1
    13f0:	15 97       	sbiw	r26, 0x05	; 5
    13f2:	0e 94 be 10 	call	0x217c	; 0x217c <plan_buffer_line>
    13f6:	ed b7       	in	r30, 0x3d	; 61
    13f8:	fe b7       	in	r31, 0x3e	; 62
    13fa:	36 96       	adiw	r30, 0x06	; 6
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	fe bf       	out	0x3e, r31	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    1406:	ac e1       	ldi	r26, 0x1C	; 28
    1408:	b2 e0       	ldi	r27, 0x02	; 2
    140a:	f1 01       	movw	r30, r2
    140c:	80 e1       	ldi	r24, 0x10	; 16
    140e:	01 90       	ld	r0, Z+
    1410:	0d 92       	st	X+, r0
    1412:	81 50       	subi	r24, 0x01	; 1
    1414:	e1 f7       	brne	.-8      	; 0x140e <gc_execute_line+0x91a>
    1416:	43 cc       	rjmp	.-1914   	; 0xc9e <gc_execute_line+0x1aa>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    1418:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <spindle_stop>
    141c:	aa cf       	rjmp	.-172    	; 0x1372 <gc_execute_line+0x87e>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 2d 03 	call	0x65a	; 0x65a <coolant_flood>
    1426:	b0 cf       	rjmp	.-160    	; 0x1388 <gc_execute_line+0x894>
  }
  
  // Perform any physical actions
  switch (next_action) {
    1428:	b2 30       	cpi	r27, 0x02	; 2
    142a:	21 f1       	breq	.+72     	; 0x1474 <gc_execute_line+0x980>
    142c:	b3 30       	cpi	r27, 0x03	; 3
    142e:	59 f7       	brne	.-42     	; 0x1406 <gc_execute_line+0x912>
	  rotate_head( head);
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1430:	6c 85       	ldd	r22, Y+12	; 0x0c
    1432:	7d 85       	ldd	r23, Y+13	; 0x0d
    1434:	8e 85       	ldd	r24, Y+14	; 0x0e
    1436:	9f 85       	ldd	r25, Y+15	; 0x0f
    1438:	28 89       	ldd	r18, Y+16	; 0x10
    143a:	39 89       	ldd	r19, Y+17	; 0x11
    143c:	4a 89       	ldd	r20, Y+18	; 0x12
    143e:	5b 89       	ldd	r21, Y+19	; 0x13
    1440:	ec 88       	ldd	r14, Y+20	; 0x14
    1442:	fd 88       	ldd	r15, Y+21	; 0x15
    1444:	0e 89       	ldd	r16, Y+22	; 0x16
    1446:	1f 89       	ldd	r17, Y+23	; 0x17
    1448:	a8 8c       	ldd	r10, Y+24	; 0x18
    144a:	b9 8c       	ldd	r11, Y+25	; 0x19
    144c:	ca 8c       	ldd	r12, Y+26	; 0x1a
    144e:	db 8c       	ldd	r13, Y+27	; 0x1b
    1450:	0e 94 ca 0c 	call	0x1994	; 0x1994 <plan_set_current>
    1454:	d8 cf       	rjmp	.-80     	; 0x1406 <gc_execute_line+0x912>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    1456:	68 85       	ldd	r22, Y+8	; 0x08
    1458:	79 85       	ldd	r23, Y+9	; 0x09
    145a:	8a 85       	ldd	r24, Y+10	; 0x0a
    145c:	9b 85       	ldd	r25, Y+11	; 0x0b
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a e7       	ldi	r20, 0x7A	; 122
    1464:	54 e4       	ldi	r21, 0x44	; 68
    1466:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    146a:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
    146e:	0e 94 4d 0b 	call	0x169a	; 0x169a <mc_dwell>
    1472:	c9 cf       	rjmp	.-110    	; 0x1406 <gc_execute_line+0x912>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    1474:	0e 94 4a 0b 	call	0x1694	; 0x1694 <mc_go_home>
    1478:	80 e1       	ldi	r24, 0x10	; 16
    147a:	f1 01       	movw	r30, r2
    147c:	11 92       	st	Z+, r1
    147e:	8a 95       	dec	r24
    1480:	e9 f7       	brne	.-6      	; 0x147c <gc_execute_line+0x988>
    1482:	c1 cf       	rjmp	.-126    	; 0x1406 <gc_execute_line+0x912>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    1484:	89 30       	cpi	r24, 0x09	; 9
    1486:	09 f0       	breq	.+2      	; 0x148a <gc_execute_line+0x996>
    1488:	be cf       	rjmp	.-132    	; 0x1406 <gc_execute_line+0x912>
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    148a:	8a a9       	ldd	r24, Y+50	; 0x32
    148c:	9b a9       	ldd	r25, Y+51	; 0x33
    148e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <rotate_head>
    1492:	b9 cf       	rjmp	.-142    	; 0x1406 <gc_execute_line+0x912>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    1494:	8c 85       	ldd	r24, Y+12	; 0x0c
    1496:	9d 85       	ldd	r25, Y+13	; 0x0d
    1498:	ae 85       	ldd	r26, Y+14	; 0x0e
    149a:	bf 85       	ldd	r27, Y+15	; 0x0f
    149c:	8c a7       	std	Y+44, r24	; 0x2c
    149e:	9d a7       	std	Y+45, r25	; 0x2d
    14a0:	ae a7       	std	Y+46, r26	; 0x2e
    14a2:	bf a7       	std	Y+47, r27	; 0x2f
    14a4:	68 88       	ldd	r6, Y+16	; 0x10
    14a6:	79 88       	ldd	r7, Y+17	; 0x11
    14a8:	8a 88       	ldd	r8, Y+18	; 0x12
    14aa:	9b 88       	ldd	r9, Y+19	; 0x13
    14ac:	ec 88       	ldd	r14, Y+20	; 0x14
    14ae:	fd 88       	ldd	r15, Y+21	; 0x15
    14b0:	0e 89       	ldd	r16, Y+22	; 0x16
    14b2:	1f 89       	ldd	r17, Y+23	; 0x17
    14b4:	a8 8c       	ldd	r10, Y+24	; 0x18
    14b6:	b9 8c       	ldd	r11, Y+25	; 0x19
    14b8:	ca 8c       	ldd	r12, Y+26	; 0x1a
    14ba:	db 8c       	ldd	r13, Y+27	; 0x1b
    14bc:	60 91 0c 02 	lds	r22, 0x020C
    14c0:	66 23       	and	r22, r22
    14c2:	61 f4       	brne	.+24     	; 0x14dc <gc_execute_line+0x9e8>
    14c4:	90 91 14 02 	lds	r25, 0x0214
    14c8:	9c ab       	std	Y+52, r25	; 0x34
    14ca:	a0 91 15 02 	lds	r26, 0x0215
    14ce:	ad ab       	std	Y+53, r26	; 0x35
    14d0:	b0 91 16 02 	lds	r27, 0x0216
    14d4:	be ab       	std	Y+54, r27	; 0x36
    14d6:	e0 91 17 02 	lds	r30, 0x0217
    14da:	ef ab       	std	Y+55, r30	; 0x37
    14dc:	00 d0       	rcall	.+0      	; 0x14de <gc_execute_line+0x9ea>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <gc_execute_line+0x9ec>
    14e0:	4d b6       	in	r4, 0x3d	; 61
    14e2:	5e b6       	in	r5, 0x3e	; 62
    14e4:	08 94       	sec
    14e6:	41 1c       	adc	r4, r1
    14e8:	51 1c       	adc	r5, r1
    14ea:	2c a9       	ldd	r18, Y+52	; 0x34
    14ec:	3d a9       	ldd	r19, Y+53	; 0x35
    14ee:	4e a9       	ldd	r20, Y+54	; 0x36
    14f0:	5f a9       	ldd	r21, Y+55	; 0x37
    14f2:	c9 01       	movw	r24, r18
    14f4:	da 01       	movw	r26, r20
    14f6:	ed b7       	in	r30, 0x3d	; 61
    14f8:	fe b7       	in	r31, 0x3e	; 62
    14fa:	81 83       	std	Z+1, r24	; 0x01
    14fc:	92 83       	std	Z+2, r25	; 0x02
    14fe:	a3 83       	std	Z+3, r26	; 0x03
    1500:	b4 83       	std	Z+4, r27	; 0x04
    1502:	d2 01       	movw	r26, r4
    1504:	14 96       	adiw	r26, 0x04	; 4
    1506:	6c 93       	st	X, r22
    1508:	14 97       	sbiw	r26, 0x04	; 4
    150a:	15 96       	adiw	r26, 0x05	; 5
    150c:	1c 92       	st	X, r1
    150e:	6c a5       	ldd	r22, Y+44	; 0x2c
    1510:	7d a5       	ldd	r23, Y+45	; 0x2d
    1512:	8e a5       	ldd	r24, Y+46	; 0x2e
    1514:	9f a5       	ldd	r25, Y+47	; 0x2f
    1516:	a4 01       	movw	r20, r8
    1518:	93 01       	movw	r18, r6
    151a:	0e 94 be 10 	call	0x217c	; 0x217c <plan_buffer_line>
    151e:	ed b7       	in	r30, 0x3d	; 61
    1520:	fe b7       	in	r31, 0x3e	; 62
    1522:	36 96       	adiw	r30, 0x06	; 6
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	fe bf       	out	0x3e, r31	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	ed bf       	out	0x3d, r30	; 61
    152e:	6b cf       	rjmp	.-298    	; 0x1406 <gc_execute_line+0x912>

00001530 <theta>:


// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1530:	af 92       	push	r10
    1532:	bf 92       	push	r11
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	79 01       	movw	r14, r18
    1542:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    1544:	5f 77       	andi	r21, 0x7F	; 127
    1546:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    154a:	0e 94 8b 2c 	call	0x5916	; 0x5916 <atan>
    154e:	5b 01       	movw	r10, r22
    1550:	6c 01       	movw	r12, r24
  if (y>0) {
    1552:	c8 01       	movw	r24, r16
    1554:	b7 01       	movw	r22, r14
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__gesf2>
    1562:	18 16       	cp	r1, r24
    1564:	5c f4       	brge	.+22     	; 0x157c <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
    1566:	b5 01       	movw	r22, r10
    1568:	c6 01       	movw	r24, r12
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
    157c:	c6 01       	movw	r24, r12
    157e:	b5 01       	movw	r22, r10
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__gesf2>
    158c:	18 16       	cp	r1, r24
    158e:	5c f4       	brge	.+22     	; 0x15a6 <theta+0x76>
    {
      return(M_PI-theta);
    1590:	6b ed       	ldi	r22, 0xDB	; 219
    1592:	7f e0       	ldi	r23, 0x0F	; 15
    1594:	89 e4       	ldi	r24, 0x49	; 73
    1596:	90 e4       	ldi	r25, 0x40	; 64
    1598:	a6 01       	movw	r20, r12
    159a:	95 01       	movw	r18, r10
    159c:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    15a0:	5b 01       	movw	r10, r22
    15a2:	6c 01       	movw	r12, r24
    15a4:	e0 cf       	rjmp	.-64     	; 0x1566 <theta+0x36>
    } else {
      return(-M_PI-theta);
    15a6:	6b ed       	ldi	r22, 0xDB	; 219
    15a8:	7f e0       	ldi	r23, 0x0F	; 15
    15aa:	89 e4       	ldi	r24, 0x49	; 73
    15ac:	90 ec       	ldi	r25, 0xC0	; 192
    15ae:	a6 01       	movw	r20, r12
    15b0:	95 01       	movw	r18, r10
    15b2:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    15b6:	5b 01       	movw	r10, r22
    15b8:	6c 01       	movw	r12, r24
    15ba:	d5 cf       	rjmp	.-86     	; 0x1566 <theta+0x36>

000015bc <main>:
        }
}

int main(void)
{
	setup_timer();
    15bc:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <setup_timer>

	sp_init();        
    15c0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <sp_init>

#ifdef VERBOSE_DEBUG
  serialWrite('1');
#endif
  settings_init();  
    15c4:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <settings_init>

#ifdef VERBOSE_DEBUG
  serialWrite('2');
#endif
  plan_init();      
    15c8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <plan_init>

#ifdef VERBOSE_DEBUG
  serialWrite('3');
#endif
  st_init();       
    15cc:	0e 94 e5 18 	call	0x31ca	; 0x31ca <st_init>

#ifdef VERBOSE_DEBUG
  serialWrite('4');
#endif
  // do limits init first because its dumb at the moment 
  limits_init();
    15d0:	0e 94 32 19 	call	0x3264	; 0x3264 <limits_init>

#ifdef VERBOSE_DEBUG
  serialWrite('5');
#endif
	usb_init();
    15d4:	0e 94 01 2b 	call	0x5602	; 0x5602 <usb_init>

	usb_setEventHandler(pb_usbEventHandler);
    15d8:	87 e3       	ldi	r24, 0x37	; 55
    15da:	9b e0       	ldi	r25, 0x0B	; 11
    15dc:	0e 94 c9 24 	call	0x4992	; 0x4992 <usb_setEventHandler>

#ifdef VERBOSE_DEBUG
  serialWrite('6');
#endif

  spindle_init();   
    15e0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <spindle_init>
  coolant_init();
    15e4:	0e 94 2b 03 	call	0x656	; 0x656 <coolant_init>
  atc_init();
    15e8:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <atc_init>
  head_init();
    15ec:	0e 94 db 20 	call	0x41b6	; 0x41b6 <head_init>
  vacuum_init();
    15f0:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <vacuum_init>
  panel_init();
    15f4:	0e 94 2f 21 	call	0x425e	; 0x425e <panel_init>
  gc_init();
    15f8:	0e 94 3c 05 	call	0xa78	; 0xa78 <gc_init>
 
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n"));
    15fc:	8f e4       	ldi	r24, 0x4F	; 79
    15fe:	93 e0       	ldi	r25, 0x03	; 3
    1600:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    1604:	10 c0       	rjmp	.+32     	; 0x1626 <main+0x6a>
	if(ackHost){
		serialWrite(ackHost);
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    1606:	85 34       	cpi	r24, 0x45	; 69
    1608:	41 f1       	breq	.+80     	; 0x165a <main+0x9e>
    160a:	88 34       	cpi	r24, 0x48	; 72
    160c:	21 f4       	brne	.+8      	; 0x1616 <main+0x5a>
		// H = not homed
		case 'L':
				printPgmString( PSTR("lim\n"));
				break;
		case 'H':
				printPgmString( PSTR("nho\n"));
    160e:	85 e4       	ldi	r24, 0x45	; 69
    1610:	93 e0       	ldi	r25, 0x03	; 3
    1612:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
		case 'E':
			printPgmString( PSTR("err\n"));
			break;
	}

	ackHost = 0;
    1616:	10 92 2e 08 	sts	0x082E, r1

    sp_process(); // ... process the serial protocol
    161a:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <sp_process>

	process_panel(); // check the panel
    161e:	0e 94 b0 21 	call	0x4360	; 0x4360 <process_panel>

	usb_poll();
    1622:	0e 94 16 2b 	call	0x562c	; 0x562c <usb_poll>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    1626:	83 b7       	in	r24, 0x33	; 51
    1628:	81 60       	ori	r24, 0x01	; 1
    162a:	83 bf       	out	0x33, r24	; 51
    162c:	88 95       	sleep
    162e:	83 b7       	in	r24, 0x33	; 51
    1630:	8e 7f       	andi	r24, 0xFE	; 254
    1632:	83 bf       	out	0x33, r24	; 51
	if(ackHost){
		serialWrite(ackHost);
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    1634:	80 91 2e 08 	lds	r24, 0x082E
    1638:	8c 34       	cpi	r24, 0x4C	; 76
    163a:	a1 f0       	breq	.+40     	; 0x1664 <main+0xa8>
    163c:	8d 34       	cpi	r24, 0x4D	; 77
    163e:	18 f3       	brcs	.-58     	; 0x1606 <main+0x4a>
    1640:	8f 34       	cpi	r24, 0x4F	; 79
    1642:	11 f0       	breq	.+4      	; 0x1648 <main+0x8c>
    1644:	88 35       	cpi	r24, 0x58	; 88
    1646:	39 f7       	brne	.-50     	; 0x1616 <main+0x5a>
		case 'H':
				printPgmString( PSTR("nho\n"));
			break;
		case 'O':
		case 'X':
			if( head_moving() == 0 ) 
    1648:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    164c:	88 23       	and	r24, r24
    164e:	19 f7       	brne	.-58     	; 0x1616 <main+0x5a>
				printPgmString( PSTR("ok\n"));
    1650:	81 e4       	ldi	r24, 0x41	; 65
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    1658:	de cf       	rjmp	.-68     	; 0x1616 <main+0x5a>
			break;
		case 'E':
			printPgmString( PSTR("err\n"));
    165a:	8c e3       	ldi	r24, 0x3C	; 60
    165c:	93 e0       	ldi	r25, 0x03	; 3
    165e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    1662:	d9 cf       	rjmp	.-78     	; 0x1616 <main+0x5a>
	switch( ackHost ) {
		// X = move finished ok
		// L = hit a limit
		// H = not homed
		case 'L':
				printPgmString( PSTR("lim\n"));
    1664:	8a e4       	ldi	r24, 0x4A	; 74
    1666:	93 e0       	ldi	r25, 0x03	; 3
    1668:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    166c:	d4 cf       	rjmp	.-88     	; 0x1616 <main+0x5a>

0000166e <pb_usbEventHandler>:
 */
static void pb_usbEventHandler(usb_device * device, usb_eventType event)
{
        //adb_usbConfiguration handle;

        switch (event)
    166e:	66 23       	and	r22, r22
    1670:	39 f4       	brne	.+14     	; 0x1680 <pb_usbEventHandler+0x12>
        {
        case USB_CONNECT:

				serialWrite('U');
    1672:	85 e5       	ldi	r24, 0x55	; 85
    1674:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <serialWrite>
				serialWrite('C');
    1678:	83 e4       	ldi	r24, 0x43	; 67
    167a:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <serialWrite>
    167e:	08 95       	ret
 */
static void pb_usbEventHandler(usb_device * device, usb_eventType event)
{
        //adb_usbConfiguration handle;

        switch (event)
    1680:	61 30       	cpi	r22, 0x01	; 1
    1682:	09 f0       	breq	.+2      	; 0x1686 <pb_usbEventHandler+0x18>
    1684:	08 95       	ret

                break;

        case USB_DISCONNECT:

				serialWrite('U');
    1686:	85 e5       	ldi	r24, 0x55	; 85
    1688:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <serialWrite>
				serialWrite('D');
    168c:	84 e4       	ldi	r24, 0x44	; 68
    168e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <serialWrite>
    1692:	08 95       	ret

00001694 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    1694:	0e 94 75 1a 	call	0x34ea	; 0x34ea <st_go_home>
}
    1698:	08 95       	ret

0000169a <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    169a:	af 92       	push	r10
    169c:	bf 92       	push	r11
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	7b 01       	movw	r14, r22
    16ac:	8c 01       	movw	r16, r24
  st_synchronize();
    16ae:	0e 94 ef 1a 	call	0x35de	; 0x35de <st_synchronize>
  _delay_ms(milliseconds);
    16b2:	c8 01       	movw	r24, r16
    16b4:	b7 01       	movw	r22, r14
    16b6:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__floatunsisf>
    16ba:	5b 01       	movw	r10, r22
    16bc:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4a e7       	ldi	r20, 0x7A	; 122
    16c4:	55 e4       	ldi	r21, 0x45	; 69
    16c6:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    16ca:	7b 01       	movw	r14, r22
    16cc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e8       	ldi	r20, 0x80	; 128
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
    16da:	88 23       	and	r24, r24
    16dc:	7c f1       	brlt	.+94     	; 0x173c <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    16de:	c8 01       	movw	r24, r16
    16e0:	b7 01       	movw	r22, r14
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__gesf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	ac f4       	brge	.+42     	; 0x171c <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	c6 01       	movw	r24, r12
    16f4:	b5 01       	movw	r22, r10
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1702:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
    1706:	cb 01       	movw	r24, r22
		while(__ticks)
    1708:	67 2b       	or	r22, r23
    170a:	79 f0       	breq	.+30     	; 0x172a <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    170c:	20 e9       	ldi	r18, 0x90	; 144
    170e:	31 e0       	ldi	r19, 0x01	; 1
    1710:	f9 01       	movw	r30, r18
    1712:	31 97       	sbiw	r30, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1718:	d9 f7       	brne	.-10     	; 0x1710 <mc_dwell+0x76>
    171a:	07 c0       	rjmp	.+14     	; 0x172a <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	c8 01       	movw	r24, r16
    171e:	b7 01       	movw	r22, r14
    1720:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
    1724:	cb 01       	movw	r24, r22
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <mc_dwell+0x8c>
}
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	df 90       	pop	r13
    1734:	cf 90       	pop	r12
    1736:	bf 90       	pop	r11
    1738:	af 90       	pop	r10
    173a:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	f1 cf       	rjmp	.-30     	; 0x1724 <mc_dwell+0x8a>

00001742 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    1742:	fc 01       	movw	r30, r24
    1744:	60 91 90 09 	lds	r22, 0x0990
    1748:	70 91 91 09 	lds	r23, 0x0991
    174c:	80 91 92 09 	lds	r24, 0x0992
    1750:	90 91 93 09 	lds	r25, 0x0993
    1754:	21 a5       	ldd	r18, Z+41	; 0x29
    1756:	32 a5       	ldd	r19, Z+42	; 0x2a
    1758:	43 a5       	ldd	r20, Z+43	; 0x2b
    175a:	54 a5       	ldd	r21, Z+44	; 0x2c
    175c:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    1760:	08 95       	ret

00001762 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    1762:	80 91 fa 07 	lds	r24, 0x07FA
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	08 95       	ret

0000176a <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    176a:	20 91 e6 07 	lds	r18, 0x07E6
    176e:	30 91 e7 07 	lds	r19, 0x07E7
    1772:	80 91 e8 07 	lds	r24, 0x07E8
    1776:	90 91 e9 07 	lds	r25, 0x07E9
    177a:	28 17       	cp	r18, r24
    177c:	39 07       	cpc	r19, r25
    177e:	69 f0       	breq	.+26     	; 0x179a <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1780:	80 91 e8 07 	lds	r24, 0x07E8
    1784:	90 91 e9 07 	lds	r25, 0x07E9
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	64 e1       	ldi	r22, 0x14	; 20
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
    1792:	90 93 e9 07 	sts	0x07E9, r25
    1796:	80 93 e8 07 	sts	0x07E8, r24
    179a:	08 95       	ret

0000179c <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    179c:	20 91 e6 07 	lds	r18, 0x07E6
    17a0:	30 91 e7 07 	lds	r19, 0x07E7
    17a4:	80 91 e8 07 	lds	r24, 0x07E8
    17a8:	90 91 e9 07 	lds	r25, 0x07E9
    17ac:	28 17       	cp	r18, r24
    17ae:	39 07       	cpc	r19, r25
    17b0:	d1 f0       	breq	.+52     	; 0x17e6 <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    17b2:	20 91 e8 07 	lds	r18, 0x07E8
    17b6:	30 91 e9 07 	lds	r19, 0x07E9
    17ba:	c9 01       	movw	r24, r18
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	ac 01       	movw	r20, r24
    17ca:	44 0f       	add	r20, r20
    17cc:	55 1f       	adc	r21, r21
    17ce:	44 0f       	add	r20, r20
    17d0:	55 1f       	adc	r21, r21
    17d2:	44 0f       	add	r20, r20
    17d4:	55 1f       	adc	r21, r21
    17d6:	48 0f       	add	r20, r24
    17d8:	59 1f       	adc	r21, r25
    17da:	42 0f       	add	r20, r18
    17dc:	53 1f       	adc	r21, r19
    17de:	4e 5c       	subi	r20, 0xCE	; 206
    17e0:	5d 4f       	sbci	r21, 0xFD	; 253
}
    17e2:	ca 01       	movw	r24, r20
    17e4:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    17ea:	ca 01       	movw	r24, r20
    17ec:	08 95       	ret

000017ee <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    17ee:	4f 92       	push	r4
    17f0:	5f 92       	push	r5
    17f2:	6f 92       	push	r6
    17f4:	7f 92       	push	r7
    17f6:	8f 92       	push	r8
    17f8:	9f 92       	push	r9
    17fa:	af 92       	push	r10
    17fc:	bf 92       	push	r11
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	ec 01       	movw	r28, r24
    1810:	4b 01       	movw	r8, r22
  if(!current) { return; }
    1812:	61 15       	cp	r22, r1
    1814:	71 05       	cpc	r23, r1
    1816:	99 f0       	breq	.+38     	; 0x183e <planner_forward_pass_kernel+0x50>
  if(previous) {
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	89 f0       	breq	.+34     	; 0x183e <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    181c:	e9 a8       	ldd	r14, Y+49	; 0x31
    181e:	fa a8       	ldd	r15, Y+50	; 0x32
    1820:	0b a9       	ldd	r16, Y+51	; 0x33
    1822:	1c a9       	ldd	r17, Y+52	; 0x34
    1824:	fb 01       	movw	r30, r22
    1826:	41 a8       	ldd	r4, Z+49	; 0x31
    1828:	52 a8       	ldd	r5, Z+50	; 0x32
    182a:	63 a8       	ldd	r6, Z+51	; 0x33
    182c:	74 a8       	ldd	r7, Z+52	; 0x34
    182e:	c8 01       	movw	r24, r16
    1830:	b7 01       	movw	r22, r14
    1832:	a3 01       	movw	r20, r6
    1834:	92 01       	movw	r18, r4
    1836:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
    183a:	88 23       	and	r24, r24
    183c:	8c f0       	brlt	.+34     	; 0x1860 <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	bf 90       	pop	r11
    1850:	af 90       	pop	r10
    1852:	9f 90       	pop	r9
    1854:	8f 90       	pop	r8
    1856:	7f 90       	pop	r7
    1858:	6f 90       	pop	r6
    185a:	5f 90       	pop	r5
    185c:	4f 90       	pop	r4
    185e:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1860:	f4 01       	movw	r30, r8
    1862:	a1 a4       	ldd	r10, Z+41	; 0x29
    1864:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1866:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1868:	d4 a4       	ldd	r13, Z+44	; 0x2c
    186a:	c8 01       	movw	r24, r16
    186c:	b7 01       	movw	r22, r14
    186e:	a6 01       	movw	r20, r12
    1870:	95 01       	movw	r18, r10
    1872:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1876:	9b 01       	movw	r18, r22
    1878:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    187a:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    187e:	7b 01       	movw	r14, r22
    1880:	8c 01       	movw	r16, r24
    1882:	20 91 8c 09 	lds	r18, 0x098C
    1886:	30 91 8d 09 	lds	r19, 0x098D
    188a:	40 91 8e 09 	lds	r20, 0x098E
    188e:	50 91 8f 09 	lds	r21, 0x098F
    1892:	50 58       	subi	r21, 0x80	; 128
    1894:	ca 01       	movw	r24, r20
    1896:	b9 01       	movw	r22, r18
    1898:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e7       	ldi	r20, 0x70	; 112
    18a2:	52 e4       	ldi	r21, 0x42	; 66
    18a4:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e7       	ldi	r20, 0x70	; 112
    18ae:	52 ec       	ldi	r21, 0xC2	; 194
    18b0:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    18b4:	2d a5       	ldd	r18, Y+45	; 0x2d
    18b6:	3e a5       	ldd	r19, Y+46	; 0x2e
    18b8:	4f a5       	ldd	r20, Y+47	; 0x2f
    18ba:	58 a9       	ldd	r21, Y+48	; 0x30
    18bc:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    18c0:	9b 01       	movw	r18, r22
    18c2:	ac 01       	movw	r20, r24
    18c4:	c8 01       	movw	r24, r16
    18c6:	b7 01       	movw	r22, r14
    18c8:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    18cc:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    18d0:	a6 01       	movw	r20, r12
    18d2:	95 01       	movw	r18, r10
    18d4:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    18d8:	7b 01       	movw	r14, r22
    18da:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    18dc:	c3 01       	movw	r24, r6
    18de:	b2 01       	movw	r22, r4
    18e0:	a8 01       	movw	r20, r16
    18e2:	97 01       	movw	r18, r14
    18e4:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__gesf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	0c f0       	brlt	.+2      	; 0x18ee <planner_forward_pass_kernel+0x100>
    18ec:	a8 cf       	rjmp	.-176    	; 0x183e <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    18ee:	f4 01       	movw	r30, r8
    18f0:	e1 aa       	std	Z+49, r14	; 0x31
    18f2:	f2 aa       	std	Z+50, r15	; 0x32
    18f4:	03 ab       	std	Z+51, r16	; 0x33
    18f6:	14 ab       	std	Z+52, r17	; 0x34
    18f8:	a2 cf       	rjmp	.-188    	; 0x183e <planner_forward_pass_kernel+0x50>

000018fa <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1906:	80 91 e8 07 	lds	r24, 0x07E8
    190a:	90 91 e9 07 	lds	r25, 0x07E9
    190e:	48 2f       	mov	r20, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1910:	08 2f       	mov	r16, r24
    1912:	11 27       	eor	r17, r17
    1914:	07 fd       	sbrc	r16, 7
    1916:	10 95       	com	r17
    1918:	80 91 e6 07 	lds	r24, 0x07E6
    191c:	90 91 e7 07 	lds	r25, 0x07E7
    1920:	08 17       	cp	r16, r24
    1922:	19 07       	cpc	r17, r25
    1924:	91 f1       	breq	.+100    	; 0x198a <planner_forward_pass+0x90>
    1926:	ee 24       	eor	r14, r14
    1928:	ff 24       	eor	r15, r15
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <planner_forward_pass+0x38>
    1930:	7e 01       	movw	r14, r28
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    1932:	89 e4       	ldi	r24, 0x49	; 73
    1934:	48 02       	muls	r20, r24
    1936:	e0 01       	movw	r28, r0
    1938:	11 24       	eor	r1, r1
    193a:	ce 5c       	subi	r28, 0xCE	; 206
    193c:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    193e:	c9 01       	movw	r24, r18
    1940:	b7 01       	movw	r22, r14
    1942:	ae 01       	movw	r20, r28
    1944:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1948:	c8 01       	movw	r24, r16
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	64 e1       	ldi	r22, 0x14	; 20
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
    1954:	48 2f       	mov	r20, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1956:	08 2f       	mov	r16, r24
    1958:	11 27       	eor	r17, r17
    195a:	07 fd       	sbrc	r16, 7
    195c:	10 95       	com	r17
    195e:	80 91 e6 07 	lds	r24, 0x07E6
    1962:	90 91 e7 07 	lds	r25, 0x07E7
    1966:	97 01       	movw	r18, r14
    1968:	08 17       	cp	r16, r24
    196a:	19 07       	cpc	r17, r25
    196c:	09 f7       	brne	.-62     	; 0x1930 <planner_forward_pass+0x36>
    196e:	b7 01       	movw	r22, r14
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    1970:	cb 01       	movw	r24, r22
    1972:	be 01       	movw	r22, r28
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <planner_forward_pass_kernel>
}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	08 95       	ret
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    198a:	c0 e0       	ldi	r28, 0x00	; 0
    198c:	d0 e0       	ldi	r29, 0x00	; 0
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	ee cf       	rjmp	.-36     	; 0x1970 <planner_forward_pass+0x76>

00001994 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    1994:	2f 92       	push	r2
    1996:	3f 92       	push	r3
    1998:	4f 92       	push	r4
    199a:	5f 92       	push	r5
    199c:	6f 92       	push	r6
    199e:	7f 92       	push	r7
    19a0:	8f 92       	push	r8
    19a2:	9f 92       	push	r9
    19a4:	af 92       	push	r10
    19a6:	bf 92       	push	r11
    19a8:	cf 92       	push	r12
    19aa:	df 92       	push	r13
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	3b 01       	movw	r6, r22
    19b6:	4c 01       	movw	r8, r24
    19b8:	19 01       	movw	r2, r18
    19ba:	2a 01       	movw	r4, r20
	st_synchronize();
    19bc:	0e 94 ef 1a 	call	0x35de	; 0x35de <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    19c0:	c4 01       	movw	r24, r8
    19c2:	b3 01       	movw	r22, r6
    19c4:	20 91 6e 09 	lds	r18, 0x096E
    19c8:	30 91 6f 09 	lds	r19, 0x096F
    19cc:	40 91 70 09 	lds	r20, 0x0970
    19d0:	50 91 71 09 	lds	r21, 0x0971
    19d4:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    19d8:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    19dc:	ea ee       	ldi	r30, 0xEA	; 234
    19de:	8e 2e       	mov	r8, r30
    19e0:	e7 e0       	ldi	r30, 0x07	; 7
    19e2:	9e 2e       	mov	r9, r30
    19e4:	60 93 ea 07 	sts	0x07EA, r22
    19e8:	70 93 eb 07 	sts	0x07EB, r23
    19ec:	80 93 ec 07 	sts	0x07EC, r24
    19f0:	90 93 ed 07 	sts	0x07ED, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    19f4:	c2 01       	movw	r24, r4
    19f6:	b1 01       	movw	r22, r2
    19f8:	20 91 72 09 	lds	r18, 0x0972
    19fc:	30 91 73 09 	lds	r19, 0x0973
    1a00:	40 91 74 09 	lds	r20, 0x0974
    1a04:	50 91 75 09 	lds	r21, 0x0975
    1a08:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1a0c:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    1a10:	f4 01       	movw	r30, r8
    1a12:	34 96       	adiw	r30, 0x04	; 4
    1a14:	60 93 ee 07 	sts	0x07EE, r22
    1a18:	71 83       	std	Z+1, r23	; 0x01
    1a1a:	82 83       	std	Z+2, r24	; 0x02
    1a1c:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1a1e:	c8 01       	movw	r24, r16
    1a20:	b7 01       	movw	r22, r14
    1a22:	20 91 76 09 	lds	r18, 0x0976
    1a26:	30 91 77 09 	lds	r19, 0x0977
    1a2a:	40 91 78 09 	lds	r20, 0x0978
    1a2e:	50 91 79 09 	lds	r21, 0x0979
    1a32:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1a36:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    1a3a:	f4 01       	movw	r30, r8
    1a3c:	38 96       	adiw	r30, 0x08	; 8
    1a3e:	60 93 f2 07 	sts	0x07F2, r22
    1a42:	71 83       	std	Z+1, r23	; 0x01
    1a44:	82 83       	std	Z+2, r24	; 0x02
    1a46:	93 83       	std	Z+3, r25	; 0x03

	// C AXIS is always 0
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1a48:	c6 01       	movw	r24, r12
    1a4a:	b5 01       	movw	r22, r10
    1a4c:	20 91 7a 09 	lds	r18, 0x097A
    1a50:	30 91 7b 09 	lds	r19, 0x097B
    1a54:	40 91 7c 09 	lds	r20, 0x097C
    1a58:	50 91 7d 09 	lds	r21, 0x097D
    1a5c:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1a60:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    1a64:	2c e0       	ldi	r18, 0x0C	; 12
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	82 0e       	add	r8, r18
    1a6a:	93 1e       	adc	r9, r19
    1a6c:	60 93 f6 07 	sts	0x07F6, r22
    1a70:	f4 01       	movw	r30, r8
    1a72:	71 83       	std	Z+1, r23	; 0x01
    1a74:	82 83       	std	Z+2, r24	; 0x02
    1a76:	93 83       	std	Z+3, r25	; 0x03
}
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	df 90       	pop	r13
    1a82:	cf 90       	pop	r12
    1a84:	bf 90       	pop	r11
    1a86:	af 90       	pop	r10
    1a88:	9f 90       	pop	r9
    1a8a:	8f 90       	pop	r8
    1a8c:	7f 90       	pop	r7
    1a8e:	6f 90       	pop	r6
    1a90:	5f 90       	pop	r5
    1a92:	4f 90       	pop	r4
    1a94:	3f 90       	pop	r3
    1a96:	2f 90       	pop	r2
    1a98:	08 95       	ret

00001a9a <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	80 91 fa 07 	lds	r24, 0x07FA
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	20 97       	sbiw	r28, 0x00	; 0
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <plan_set_acceleration_manager_enabled+0x18>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	98 17       	cp	r25, r24
    1ab4:	31 f0       	breq	.+12     	; 0x1ac2 <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    1ab6:	0e 94 ef 1a 	call	0x35de	; 0x35de <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    1aba:	10 92 fa 07 	sts	0x07FA, r1
    1abe:	cd 2b       	or	r28, r29
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	80 93 fa 07 	sts	0x07FA, r24
  }
}
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1ad4:	10 92 e7 07 	sts	0x07E7, r1
    1ad8:	10 92 e6 07 	sts	0x07E6, r1
  block_buffer_tail = 0;
    1adc:	10 92 e9 07 	sts	0x07E9, r1
    1ae0:	10 92 e8 07 	sts	0x07E8, r1
  plan_set_acceleration_manager_enabled(TRUE);
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1aec:	80 e1       	ldi	r24, 0x10	; 16
    1aee:	ea ee       	ldi	r30, 0xEA	; 234
    1af0:	f7 e0       	ldi	r31, 0x07	; 7
    1af2:	df 01       	movw	r26, r30
    1af4:	1d 92       	st	X+, r1
    1af6:	8a 95       	dec	r24
    1af8:	e9 f7       	brne	.-6      	; 0x1af4 <plan_init+0x20>
}
    1afa:	08 95       	ret

00001afc <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1afc:	2f 92       	push	r2
    1afe:	3f 92       	push	r3
    1b00:	4f 92       	push	r4
    1b02:	5f 92       	push	r5
    1b04:	6f 92       	push	r6
    1b06:	7f 92       	push	r7
    1b08:	8f 92       	push	r8
    1b0a:	9f 92       	push	r9
    1b0c:	af 92       	push	r10
    1b0e:	bf 92       	push	r11
    1b10:	cf 92       	push	r12
    1b12:	df 92       	push	r13
    1b14:	ef 92       	push	r14
    1b16:	ff 92       	push	r15
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <planner_reverse_pass_kernel+0x26>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <planner_reverse_pass_kernel+0x28>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	8c 01       	movw	r16, r24
    1b2a:	7e 83       	std	Y+6, r23	; 0x06
    1b2c:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1b2e:	67 2b       	or	r22, r23
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <planner_reverse_pass_kernel+0x38>
    1b32:	a3 c0       	rjmp	.+326    	; 0x1c7a <planner_reverse_pass_kernel+0x17e>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1b34:	41 15       	cp	r20, r1
    1b36:	51 05       	cpc	r21, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <planner_reverse_pass_kernel+0x40>
    1b3a:	19 c1       	rjmp	.+562    	; 0x1d6e <planner_reverse_pass_kernel+0x272>
    exit_factor = next->entry_factor;
    1b3c:	da 01       	movw	r26, r20
    1b3e:	d1 96       	adiw	r26, 0x31	; 49
    1b40:	8d 91       	ld	r24, X+
    1b42:	9d 91       	ld	r25, X+
    1b44:	0d 90       	ld	r0, X+
    1b46:	bc 91       	ld	r27, X
    1b48:	a0 2d       	mov	r26, r0
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	ab 83       	std	Y+3, r26	; 0x03
    1b50:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1b52:	01 15       	cp	r16, r1
    1b54:	11 05       	cpc	r17, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <planner_reverse_pass_kernel+0x5e>
    1b58:	03 c1       	rjmp	.+518    	; 0x1d60 <planner_reverse_pass_kernel+0x264>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	61 8d       	ldd	r22, Z+25	; 0x19
    1b5e:	72 8d       	ldd	r23, Z+26	; 0x1a
    1b60:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b62:	94 8d       	ldd	r25, Z+28	; 0x1c
    1b64:	ad 81       	ldd	r26, Y+5	; 0x05
    1b66:	be 81       	ldd	r27, Y+6	; 0x06
    1b68:	59 96       	adiw	r26, 0x19	; 25
    1b6a:	2d 91       	ld	r18, X+
    1b6c:	3d 91       	ld	r19, X+
    1b6e:	4d 91       	ld	r20, X+
    1b70:	5c 91       	ld	r21, X
    1b72:	5c 97       	sbiw	r26, 0x1c	; 28
    1b74:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    1b78:	9b 01       	movw	r18, r22
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1b80:	1b 01       	movw	r2, r22
    1b82:	2c 01       	movw	r4, r24
    1b84:	f8 01       	movw	r30, r16
    1b86:	65 8d       	ldd	r22, Z+29	; 0x1d
    1b88:	76 8d       	ldd	r23, Z+30	; 0x1e
    1b8a:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b8c:	90 a1       	ldd	r25, Z+32	; 0x20
    1b8e:	ad 81       	ldd	r26, Y+5	; 0x05
    1b90:	be 81       	ldd	r27, Y+6	; 0x06
    1b92:	5d 96       	adiw	r26, 0x1d	; 29
    1b94:	2d 91       	ld	r18, X+
    1b96:	3d 91       	ld	r19, X+
    1b98:	4d 91       	ld	r20, X+
    1b9a:	5c 91       	ld	r21, X
    1b9c:	90 97       	sbiw	r26, 0x20	; 32
    1b9e:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    1ba2:	9b 01       	movw	r18, r22
    1ba4:	ac 01       	movw	r20, r24
    1ba6:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1baa:	3b 01       	movw	r6, r22
    1bac:	4c 01       	movw	r8, r24
    1bae:	f8 01       	movw	r30, r16
    1bb0:	61 a1       	ldd	r22, Z+33	; 0x21
    1bb2:	72 a1       	ldd	r23, Z+34	; 0x22
    1bb4:	83 a1       	ldd	r24, Z+35	; 0x23
    1bb6:	94 a1       	ldd	r25, Z+36	; 0x24
    1bb8:	ad 81       	ldd	r26, Y+5	; 0x05
    1bba:	be 81       	ldd	r27, Y+6	; 0x06
    1bbc:	91 96       	adiw	r26, 0x21	; 33
    1bbe:	2d 91       	ld	r18, X+
    1bc0:	3d 91       	ld	r19, X+
    1bc2:	4d 91       	ld	r20, X+
    1bc4:	5c 91       	ld	r21, X
    1bc6:	94 97       	sbiw	r26, 0x24	; 36
    1bc8:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    1bcc:	9b 01       	movw	r18, r22
    1bce:	ac 01       	movw	r20, r24
    1bd0:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1bd4:	5b 01       	movw	r10, r22
    1bd6:	6c 01       	movw	r12, r24
    1bd8:	f8 01       	movw	r30, r16
    1bda:	65 a1       	ldd	r22, Z+37	; 0x25
    1bdc:	76 a1       	ldd	r23, Z+38	; 0x26
    1bde:	87 a1       	ldd	r24, Z+39	; 0x27
    1be0:	90 a5       	ldd	r25, Z+40	; 0x28
    1be2:	ad 81       	ldd	r26, Y+5	; 0x05
    1be4:	be 81       	ldd	r27, Y+6	; 0x06
    1be6:	95 96       	adiw	r26, 0x25	; 37
    1be8:	2d 91       	ld	r18, X+
    1bea:	3d 91       	ld	r19, X+
    1bec:	4d 91       	ld	r20, X+
    1bee:	5c 91       	ld	r21, X
    1bf0:	98 97       	sbiw	r26, 0x28	; 40
    1bf2:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    1bf6:	9b 01       	movw	r18, r22
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1bfe:	7b 01       	movw	r14, r22
    1c00:	8c 01       	movw	r16, r24
    1c02:	c2 01       	movw	r24, r4
    1c04:	b1 01       	movw	r22, r2
    1c06:	a4 01       	movw	r20, r8
    1c08:	93 01       	movw	r18, r6
    1c0a:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    1c0e:	a6 01       	movw	r20, r12
    1c10:	95 01       	movw	r18, r10
    1c12:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    1c16:	a8 01       	movw	r20, r16
    1c18:	97 01       	movw	r18, r14
    1c1a:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    1c1e:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <sqrt>
    1c22:	5b 01       	movw	r10, r22
    1c24:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1c26:	e0 90 90 09 	lds	r14, 0x0990
    1c2a:	f0 90 91 09 	lds	r15, 0x0991
    1c2e:	00 91 92 09 	lds	r16, 0x0992
    1c32:	10 91 93 09 	lds	r17, 0x0993
    1c36:	c8 01       	movw	r24, r16
    1c38:	b7 01       	movw	r22, r14
    1c3a:	a6 01       	movw	r20, r12
    1c3c:	95 01       	movw	r18, r10
    1c3e:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
    1c42:	87 fd       	sbrc	r24, 7
    1c44:	33 c0       	rjmp	.+102    	; 0x1cac <planner_reverse_pass_kernel+0x1b0>
    1c46:	0f 2e       	mov	r0, r31
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	6f 2e       	mov	r6, r31
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	7f 2e       	mov	r7, r31
    1c50:	f0 e8       	ldi	r31, 0x80	; 128
    1c52:	8f 2e       	mov	r8, r31
    1c54:	ff e3       	ldi	r31, 0x3F	; 63
    1c56:	9f 2e       	mov	r9, r31
    1c58:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1c5a:	c4 01       	movw	r24, r8
    1c5c:	b3 01       	movw	r22, r6
    1c5e:	29 81       	ldd	r18, Y+1	; 0x01
    1c60:	3a 81       	ldd	r19, Y+2	; 0x02
    1c62:	4b 81       	ldd	r20, Y+3	; 0x03
    1c64:	5c 81       	ldd	r21, Y+4	; 0x04
    1c66:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__gesf2>
    1c6a:	18 16       	cp	r1, r24
    1c6c:	44 f1       	brlt	.+80     	; 0x1cbe <planner_reverse_pass_kernel+0x1c2>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1c6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c70:	fe 81       	ldd	r31, Y+6	; 0x06
    1c72:	61 aa       	std	Z+49, r6	; 0x31
    1c74:	72 aa       	std	Z+50, r7	; 0x32
    1c76:	83 aa       	std	Z+51, r8	; 0x33
    1c78:	94 aa       	std	Z+52, r9	; 0x34
}
    1c7a:	26 96       	adiw	r28, 0x06	; 6
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	df 90       	pop	r13
    1c94:	cf 90       	pop	r12
    1c96:	bf 90       	pop	r11
    1c98:	af 90       	pop	r10
    1c9a:	9f 90       	pop	r9
    1c9c:	8f 90       	pop	r8
    1c9e:	7f 90       	pop	r7
    1ca0:	6f 90       	pop	r6
    1ca2:	5f 90       	pop	r5
    1ca4:	4f 90       	pop	r4
    1ca6:	3f 90       	pop	r3
    1ca8:	2f 90       	pop	r2
    1caa:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1cac:	c8 01       	movw	r24, r16
    1cae:	b7 01       	movw	r22, r14
    1cb0:	a6 01       	movw	r20, r12
    1cb2:	95 01       	movw	r18, r10
    1cb4:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    1cb8:	3b 01       	movw	r6, r22
    1cba:	4c 01       	movw	r8, r24
    1cbc:	ce cf       	rjmp	.-100    	; 0x1c5a <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1cbe:	ed 81       	ldd	r30, Y+5	; 0x05
    1cc0:	fe 81       	ldd	r31, Y+6	; 0x06
    1cc2:	a1 a4       	ldd	r10, Z+41	; 0x29
    1cc4:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1cc6:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1cc8:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1cca:	c6 01       	movw	r24, r12
    1ccc:	b5 01       	movw	r22, r10
    1cce:	29 81       	ldd	r18, Y+1	; 0x01
    1cd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cd4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cd6:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1cde:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1ce2:	7b 01       	movw	r14, r22
    1ce4:	8c 01       	movw	r16, r24
    1ce6:	20 91 8c 09 	lds	r18, 0x098C
    1cea:	30 91 8d 09 	lds	r19, 0x098D
    1cee:	40 91 8e 09 	lds	r20, 0x098E
    1cf2:	50 91 8f 09 	lds	r21, 0x098F
    1cf6:	50 58       	subi	r21, 0x80	; 128
    1cf8:	ca 01       	movw	r24, r20
    1cfa:	b9 01       	movw	r22, r18
    1cfc:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e7       	ldi	r20, 0x70	; 112
    1d06:	52 e4       	ldi	r21, 0x42	; 66
    1d08:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e7       	ldi	r20, 0x70	; 112
    1d12:	52 ec       	ldi	r21, 0xC2	; 194
    1d14:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1d18:	ad 81       	ldd	r26, Y+5	; 0x05
    1d1a:	be 81       	ldd	r27, Y+6	; 0x06
    1d1c:	9d 96       	adiw	r26, 0x2d	; 45
    1d1e:	2d 91       	ld	r18, X+
    1d20:	3d 91       	ld	r19, X+
    1d22:	4d 91       	ld	r20, X+
    1d24:	5c 91       	ld	r21, X
    1d26:	d0 97       	sbiw	r26, 0x30	; 48
    1d28:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1d2c:	9b 01       	movw	r18, r22
    1d2e:	ac 01       	movw	r20, r24
    1d30:	c8 01       	movw	r24, r16
    1d32:	b7 01       	movw	r22, r14
    1d34:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    1d38:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1d3c:	a6 01       	movw	r20, r12
    1d3e:	95 01       	movw	r18, r10
    1d40:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    1d44:	7b 01       	movw	r14, r22
    1d46:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1d48:	c4 01       	movw	r24, r8
    1d4a:	b3 01       	movw	r22, r6
    1d4c:	a8 01       	movw	r20, r16
    1d4e:	97 01       	movw	r18, r14
    1d50:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__gesf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	0c f0       	brlt	.+2      	; 0x1d5a <planner_reverse_pass_kernel+0x25e>
    1d58:	8a cf       	rjmp	.-236    	; 0x1c6e <planner_reverse_pass_kernel+0x172>
    1d5a:	37 01       	movw	r6, r14
    1d5c:	48 01       	movw	r8, r16
    1d5e:	87 cf       	rjmp	.-242    	; 0x1c6e <planner_reverse_pass_kernel+0x172>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	0e 94 a1 0b 	call	0x1742	; 0x1742 <factor_for_safe_speed>
    1d68:	3b 01       	movw	r6, r22
    1d6a:	4c 01       	movw	r8, r24
    1d6c:	80 cf       	rjmp	.-256    	; 0x1c6e <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	0e 94 a1 0b 	call	0x1742	; 0x1742 <factor_for_safe_speed>
    1d76:	69 83       	std	Y+1, r22	; 0x01
    1d78:	7a 83       	std	Y+2, r23	; 0x02
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	e9 ce       	rjmp	.-558    	; 0x1b52 <planner_reverse_pass_kernel+0x56>

00001d80 <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1d80:	cf 92       	push	r12
    1d82:	df 92       	push	r13
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1d8e:	80 91 e6 07 	lds	r24, 0x07E6
    1d92:	90 91 e7 07 	lds	r25, 0x07E7
    1d96:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d98:	20 91 e8 07 	lds	r18, 0x07E8
    1d9c:	30 91 e9 07 	lds	r19, 0x07E9
    1da0:	99 27       	eor	r25, r25
    1da2:	87 fd       	sbrc	r24, 7
    1da4:	90 95       	com	r25
    1da6:	82 17       	cp	r24, r18
    1da8:	93 07       	cpc	r25, r19
    1daa:	b9 f1       	breq	.+110    	; 0x1e1a <planner_reverse_pass+0x9a>
    1dac:	00 e0       	ldi	r16, 0x00	; 0
    1dae:	10 e0       	ldi	r17, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	19 c0       	rjmp	.+50     	; 0x1de8 <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1db6:	8f 2d       	mov	r24, r15
    1db8:	99 e4       	ldi	r25, 0x49	; 73
    1dba:	89 02       	muls	r24, r25
    1dbc:	b0 01       	movw	r22, r0
    1dbe:	11 24       	eor	r1, r1
    1dc0:	cf 2c       	mov	r12, r15
    1dc2:	dd 24       	eor	r13, r13
    1dc4:	c7 fc       	sbrc	r12, 7
    1dc6:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1dc8:	eb 01       	movw	r28, r22
    1dca:	ce 5c       	subi	r28, 0xCE	; 206
    1dcc:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1dce:	ce 01       	movw	r24, r28
    1dd0:	b8 01       	movw	r22, r16
    1dd2:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1dd6:	80 91 e8 07 	lds	r24, 0x07E8
    1dda:	90 91 e9 07 	lds	r25, 0x07E9
    1dde:	a8 01       	movw	r20, r16
    1de0:	8c 15       	cp	r24, r12
    1de2:	9d 05       	cpc	r25, r13
    1de4:	61 f0       	breq	.+24     	; 0x1dfe <planner_reverse_pass+0x7e>
    1de6:	8e 01       	movw	r16, r28
    block_index--;
    1de8:	fa 94       	dec	r15
    if(block_index < 0) {
    1dea:	f7 fe       	sbrs	r15, 7
    1dec:	e4 cf       	rjmp	.-56     	; 0x1db6 <planner_reverse_pass+0x36>
    1dee:	a3 e1       	ldi	r26, 0x13	; 19
    1df0:	fa 2e       	mov	r15, r26
    1df2:	6b e6       	ldi	r22, 0x6B	; 107
    1df4:	75 e0       	ldi	r23, 0x05	; 5
    1df6:	f3 e1       	ldi	r31, 0x13	; 19
    1df8:	cf 2e       	mov	r12, r31
    1dfa:	d1 2c       	mov	r13, r1
    1dfc:	e5 cf       	rjmp	.-54     	; 0x1dc8 <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1dfe:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	be 01       	movw	r22, r28
    1e06:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <planner_reverse_pass_kernel>
}
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1e1a:	c0 e0       	ldi	r28, 0x00	; 0
    1e1c:	d0 e0       	ldi	r29, 0x00	; 0
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	ee cf       	rjmp	.-36     	; 0x1e00 <planner_reverse_pass+0x80>

00001e24 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1e24:	2f 92       	push	r2
    1e26:	3f 92       	push	r3
    1e28:	4f 92       	push	r4
    1e2a:	5f 92       	push	r5
    1e2c:	6f 92       	push	r6
    1e2e:	7f 92       	push	r7
    1e30:	8f 92       	push	r8
    1e32:	9f 92       	push	r9
    1e34:	af 92       	push	r10
    1e36:	bf 92       	push	r11
    1e38:	cf 92       	push	r12
    1e3a:	df 92       	push	r13
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	62 97       	sbiw	r28, 0x12	; 18
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	9a 8b       	std	Y+18, r25	; 0x12
    1e5a:	89 8b       	std	Y+17, r24	; 0x11
    1e5c:	6a 01       	movw	r12, r20
    1e5e:	7b 01       	movw	r14, r22
    1e60:	18 01       	movw	r2, r16
    1e62:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1e64:	fc 01       	movw	r30, r24
    1e66:	65 89       	ldd	r22, Z+21	; 0x15
    1e68:	76 89       	ldd	r23, Z+22	; 0x16
    1e6a:	87 89       	ldd	r24, Z+23	; 0x17
    1e6c:	90 8d       	ldd	r25, Z+24	; 0x18
    1e6e:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__floatunsisf>
    1e72:	3b 01       	movw	r6, r22
    1e74:	4c 01       	movw	r8, r24
    1e76:	a7 01       	movw	r20, r14
    1e78:	96 01       	movw	r18, r12
    1e7a:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1e7e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <ceil>
    1e82:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
    1e86:	7b 01       	movw	r14, r22
    1e88:	8c 01       	movw	r16, r24
    1e8a:	e9 89       	ldd	r30, Y+17	; 0x11
    1e8c:	fa 89       	ldd	r31, Y+18	; 0x12
    1e8e:	65 ab       	std	Z+53, r22	; 0x35
    1e90:	76 ab       	std	Z+54, r23	; 0x36
    1e92:	87 ab       	std	Z+55, r24	; 0x37
    1e94:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1e96:	c4 01       	movw	r24, r8
    1e98:	b3 01       	movw	r22, r6
    1e9a:	a2 01       	movw	r20, r4
    1e9c:	91 01       	movw	r18, r2
    1e9e:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1ea2:	0e 94 b3 2c 	call	0x5966	; 0x5966 <ceil>
    1ea6:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
    1eaa:	1b 01       	movw	r2, r22
    1eac:	2c 01       	movw	r4, r24
    1eae:	e9 89       	ldd	r30, Y+17	; 0x11
    1eb0:	fa 89       	ldd	r31, Y+18	; 0x12
    1eb2:	61 af       	std	Z+57, r22	; 0x39
    1eb4:	72 af       	std	Z+58, r23	; 0x3a
    1eb6:	83 af       	std	Z+59, r24	; 0x3b
    1eb8:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1eba:	fd 96       	adiw	r30, 0x3d	; 61
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	fd 97       	sbiw	r30, 0x3d	; 61
    1ec6:	fa 8b       	std	Y+18, r31	; 0x12
    1ec8:	e9 8b       	std	Y+17, r30	; 0x11
    1eca:	28 e2       	ldi	r18, 0x28	; 40
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__mulsi3>
    1ed6:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e7       	ldi	r20, 0x70	; 112
    1ee0:	52 e4       	ldi	r21, 0x42	; 66
    1ee2:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1ee6:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
    1eea:	5b 01       	movw	r10, r22
    1eec:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1eee:	c8 01       	movw	r24, r16
    1ef0:	b7 01       	movw	r22, r14
    1ef2:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__floatunsisf>
    1ef6:	7b 01       	movw	r14, r22
    1ef8:	8c 01       	movw	r16, r24
    1efa:	c6 01       	movw	r24, r12
    1efc:	b5 01       	movw	r22, r10
    1efe:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    1f02:	6d 83       	std	Y+5, r22	; 0x05
    1f04:	7e 83       	std	Y+6, r23	; 0x06
    1f06:	8f 83       	std	Y+7, r24	; 0x07
    1f08:	98 87       	std	Y+8, r25	; 0x08
}

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1f0a:	c4 01       	movw	r24, r8
    1f0c:	b3 01       	movw	r22, r6
    1f0e:	a4 01       	movw	r20, r8
    1f10:	93 01       	movw	r18, r6
    1f12:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1f16:	3b 01       	movw	r6, r22
    1f18:	4c 01       	movw	r8, r24
    1f1a:	c8 01       	movw	r24, r16
    1f1c:	b7 01       	movw	r22, r14
    1f1e:	a8 01       	movw	r20, r16
    1f20:	97 01       	movw	r18, r14
    1f22:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1f26:	69 87       	std	Y+9, r22	; 0x09
    1f28:	7a 87       	std	Y+10, r23	; 0x0a
    1f2a:	8b 87       	std	Y+11, r24	; 0x0b
    1f2c:	9c 87       	std	Y+12, r25	; 0x0c
    1f2e:	6d 81       	ldd	r22, Y+5	; 0x05
    1f30:	7e 81       	ldd	r23, Y+6	; 0x06
    1f32:	8f 81       	ldd	r24, Y+7	; 0x07
    1f34:	98 85       	ldd	r25, Y+8	; 0x08
    1f36:	9b 01       	movw	r18, r22
    1f38:	ac 01       	movw	r20, r24
    1f3a:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    1f3e:	6d 87       	std	Y+13, r22	; 0x0d
    1f40:	7e 87       	std	Y+14, r23	; 0x0e
    1f42:	8f 87       	std	Y+15, r24	; 0x0f
    1f44:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1f46:	c4 01       	movw	r24, r8
    1f48:	b3 01       	movw	r22, r6
    1f4a:	29 85       	ldd	r18, Y+9	; 0x09
    1f4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f50:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f52:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    1f56:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f58:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f5a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f5c:	58 89       	ldd	r21, Y+16	; 0x10
    1f5e:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    1f62:	0e 94 b3 2c 	call	0x5966	; 0x5966 <ceil>
    1f66:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
    1f6a:	69 83       	std	Y+1, r22	; 0x01
    1f6c:	7a 83       	std	Y+2, r23	; 0x02
    1f6e:	8b 83       	std	Y+3, r24	; 0x03
    1f70:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1f72:	c2 01       	movw	r24, r4
    1f74:	b1 01       	movw	r22, r2
    1f76:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__floatunsisf>
    1f7a:	9b 01       	movw	r18, r22
    1f7c:	ac 01       	movw	r20, r24
}

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1f7e:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    1f82:	1b 01       	movw	r2, r22
    1f84:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1f86:	a4 01       	movw	r20, r8
    1f88:	93 01       	movw	r18, r6
    1f8a:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    1f8e:	7b 01       	movw	r14, r22
    1f90:	8c 01       	movw	r16, r24
    1f92:	d0 94       	com	r13
    1f94:	c0 94       	com	r12
    1f96:	b0 94       	com	r11
    1f98:	a0 94       	com	r10
    1f9a:	a1 1c       	adc	r10, r1
    1f9c:	b1 1c       	adc	r11, r1
    1f9e:	c1 1c       	adc	r12, r1
    1fa0:	d1 1c       	adc	r13, r1
    1fa2:	c6 01       	movw	r24, r12
    1fa4:	b5 01       	movw	r22, r10
    1fa6:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    1faa:	9b 01       	movw	r18, r22
    1fac:	ac 01       	movw	r20, r24
    1fae:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    1fb2:	9b 01       	movw	r18, r22
    1fb4:	ac 01       	movw	r20, r24
    1fb6:	c8 01       	movw	r24, r16
    1fb8:	b7 01       	movw	r22, r14
    1fba:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    1fbe:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1fc2:	e9 89       	ldd	r30, Y+17	; 0x11
    1fc4:	fa 89       	ldd	r31, Y+18	; 0x12
    1fc6:	a1 88       	ldd	r10, Z+17	; 0x11
    1fc8:	b2 88       	ldd	r11, Z+18	; 0x12
    1fca:	c3 88       	ldd	r12, Z+19	; 0x13
    1fcc:	d4 88       	ldd	r13, Z+20	; 0x14
    1fce:	86 01       	movw	r16, r12
    1fd0:	75 01       	movw	r14, r10
    1fd2:	29 81       	ldd	r18, Y+1	; 0x01
    1fd4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fd6:	4b 81       	ldd	r20, Y+3	; 0x03
    1fd8:	5c 81       	ldd	r21, Y+4	; 0x04
    1fda:	e2 1a       	sub	r14, r18
    1fdc:	f3 0a       	sbc	r15, r19
    1fde:	04 0b       	sbc	r16, r20
    1fe0:	15 0b       	sbc	r17, r21
    1fe2:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
    1fe6:	a8 01       	movw	r20, r16
    1fe8:	97 01       	movw	r18, r14
    1fea:	26 1b       	sub	r18, r22
    1fec:	37 0b       	sbc	r19, r23
    1fee:	48 0b       	sbc	r20, r24
    1ff0:	59 0b       	sbc	r21, r25
    1ff2:	da 01       	movw	r26, r20
    1ff4:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1ff6:	57 fd       	sbrc	r21, 7
    1ff8:	30 c0       	rjmp	.+96     	; 0x205a <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1ffa:	49 89       	ldd	r20, Y+17	; 0x11
    1ffc:	5a 89       	ldd	r21, Y+18	; 0x12
    1ffe:	4f 5b       	subi	r20, 0xBF	; 191
    2000:	5f 4f       	sbci	r21, 0xFF	; 255
    2002:	fa 01       	movw	r30, r20
    2004:	29 81       	ldd	r18, Y+1	; 0x01
    2006:	3a 81       	ldd	r19, Y+2	; 0x02
    2008:	4b 81       	ldd	r20, Y+3	; 0x03
    200a:	5c 81       	ldd	r21, Y+4	; 0x04
    200c:	21 93       	st	Z+, r18
    200e:	31 93       	st	Z+, r19
    2010:	41 93       	st	Z+, r20
    2012:	51 93       	st	Z+, r21
    2014:	fa 8b       	std	Y+18, r31	; 0x12
    2016:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    2018:	82 0f       	add	r24, r18
    201a:	93 1f       	adc	r25, r19
    201c:	a4 1f       	adc	r26, r20
    201e:	b5 1f       	adc	r27, r21
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	a2 83       	std	Z+2, r26	; 0x02
    2026:	b3 83       	std	Z+3, r27	; 0x03
}                    
    2028:	62 96       	adiw	r28, 0x12	; 18
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	cf 90       	pop	r12
    2044:	bf 90       	pop	r11
    2046:	af 90       	pop	r10
    2048:	9f 90       	pop	r9
    204a:	8f 90       	pop	r8
    204c:	7f 90       	pop	r7
    204e:	6f 90       	pop	r6
    2050:	5f 90       	pop	r5
    2052:	4f 90       	pop	r4
    2054:	3f 90       	pop	r3
    2056:	2f 90       	pop	r2
    2058:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    205a:	c6 01       	movw	r24, r12
    205c:	b5 01       	movw	r22, r10
    205e:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    2062:	2d 85       	ldd	r18, Y+13	; 0x0d
    2064:	3e 85       	ldd	r19, Y+14	; 0x0e
    2066:	4f 85       	ldd	r20, Y+15	; 0x0f
    2068:	58 89       	ldd	r21, Y+16	; 0x10
    206a:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    206e:	29 85       	ldd	r18, Y+9	; 0x09
    2070:	3a 85       	ldd	r19, Y+10	; 0x0a
    2072:	4b 85       	ldd	r20, Y+11	; 0x0b
    2074:	5c 85       	ldd	r21, Y+12	; 0x0c
    2076:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	c2 01       	movw	r24, r4
    2080:	b1 01       	movw	r22, r2
    2082:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    2086:	7b 01       	movw	r14, r22
    2088:	8c 01       	movw	r16, r24
    208a:	6d 81       	ldd	r22, Y+5	; 0x05
    208c:	7e 81       	ldd	r23, Y+6	; 0x06
    208e:	8f 81       	ldd	r24, Y+7	; 0x07
    2090:	98 85       	ldd	r25, Y+8	; 0x08
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	50 e4       	ldi	r21, 0x40	; 64
    209a:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	c8 01       	movw	r24, r16
    20a4:	b7 01       	movw	r22, r14
    20a6:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    20aa:	0e 94 b3 2c 	call	0x5966	; 0x5966 <ceil>
    20ae:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
    20b2:	69 83       	std	Y+1, r22	; 0x01
    20b4:	7a 83       	std	Y+2, r23	; 0x02
    20b6:	8b 83       	std	Y+3, r24	; 0x03
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e0       	ldi	r26, 0x00	; 0
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	9b cf       	rjmp	.-202    	; 0x1ffa <calculate_trapezoid_for_block+0x1d6>

000020c4 <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    20d0:	80 91 e8 07 	lds	r24, 0x07E8
    20d4:	90 91 e9 07 	lds	r25, 0x07E9
    20d8:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    20da:	e8 2e       	mov	r14, r24
    20dc:	ff 24       	eor	r15, r15
    20de:	e7 fc       	sbrc	r14, 7
    20e0:	f0 94       	com	r15
    20e2:	80 91 e6 07 	lds	r24, 0x07E6
    20e6:	90 91 e7 07 	lds	r25, 0x07E7
    20ea:	e8 16       	cp	r14, r24
    20ec:	f9 06       	cpc	r15, r25
    20ee:	e1 f1       	breq	.+120    	; 0x2168 <planner_recalculate_trapezoids+0xa4>
    20f0:	e0 e0       	ldi	r30, 0x00	; 0
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <planner_recalculate_trapezoids+0x34>
    20f6:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    20f8:	89 e4       	ldi	r24, 0x49	; 73
    20fa:	28 02       	muls	r18, r24
    20fc:	e0 01       	movw	r28, r0
    20fe:	11 24       	eor	r1, r1
    2100:	ce 5c       	subi	r28, 0xCE	; 206
    2102:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    2104:	30 97       	sbiw	r30, 0x00	; 0
    2106:	59 f0       	breq	.+22     	; 0x211e <planner_recalculate_trapezoids+0x5a>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    2108:	41 a9       	ldd	r20, Z+49	; 0x31
    210a:	52 a9       	ldd	r21, Z+50	; 0x32
    210c:	63 a9       	ldd	r22, Z+51	; 0x33
    210e:	74 a9       	ldd	r23, Z+52	; 0x34
    2110:	09 a9       	ldd	r16, Y+49	; 0x31
    2112:	1a a9       	ldd	r17, Y+50	; 0x32
    2114:	2b a9       	ldd	r18, Y+51	; 0x33
    2116:	3c a9       	ldd	r19, Y+52	; 0x34
    2118:	cf 01       	movw	r24, r30
    211a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    211e:	c7 01       	movw	r24, r14
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	64 e1       	ldi	r22, 0x14	; 20
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
    212a:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    212c:	e8 2e       	mov	r14, r24
    212e:	ff 24       	eor	r15, r15
    2130:	e7 fc       	sbrc	r14, 7
    2132:	f0 94       	com	r15
    2134:	80 91 e6 07 	lds	r24, 0x07E6
    2138:	90 91 e7 07 	lds	r25, 0x07E7
    213c:	e8 16       	cp	r14, r24
    213e:	f9 06       	cpc	r15, r25
    2140:	d1 f6       	brne	.-76     	; 0x20f6 <planner_recalculate_trapezoids+0x32>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    2142:	ce 01       	movw	r24, r28
    2144:	0e 94 a1 0b 	call	0x1742	; 0x1742 <factor_for_safe_speed>
    2148:	8b 01       	movw	r16, r22
    214a:	9c 01       	movw	r18, r24
    214c:	49 a9       	ldd	r20, Y+49	; 0x31
    214e:	5a a9       	ldd	r21, Y+50	; 0x32
    2150:	6b a9       	ldd	r22, Y+51	; 0x33
    2152:	7c a9       	ldd	r23, Y+52	; 0x34
    2154:	ce 01       	movw	r24, r28
    2156:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <calculate_trapezoid_for_block>
}
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	ff 90       	pop	r15
    2164:	ef 90       	pop	r14
    2166:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2168:	c0 e0       	ldi	r28, 0x00	; 0
    216a:	d0 e0       	ldi	r29, 0x00	; 0
    216c:	ea cf       	rjmp	.-44     	; 0x2142 <planner_recalculate_trapezoids+0x7e>

0000216e <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    216e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <planner_reverse_pass>
  planner_forward_pass();
    2172:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <planner_forward_pass>
  planner_recalculate_trapezoids();
    2176:	0e 94 62 10 	call	0x20c4	; 0x20c4 <planner_recalculate_trapezoids>
}
    217a:	08 95       	ret

0000217c <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    217c:	2f 92       	push	r2
    217e:	3f 92       	push	r3
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	cc 54       	subi	r28, 0x4C	; 76
    21a6:	d0 40       	sbci	r29, 0x00	; 0
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	3b 01       	movw	r6, r22
    21b4:	4c 01       	movw	r8, r24
    21b6:	23 96       	adiw	r28, 0x03	; 3
    21b8:	2c af       	std	Y+60, r18	; 0x3c
    21ba:	3d af       	std	Y+61, r19	; 0x3d
    21bc:	4e af       	std	Y+62, r20	; 0x3e
    21be:	5f af       	std	Y+63, r21	; 0x3f
    21c0:	23 97       	sbiw	r28, 0x03	; 3
    21c2:	27 96       	adiw	r28, 0x07	; 7
    21c4:	ec ae       	std	Y+60, r14	; 0x3c
    21c6:	fd ae       	std	Y+61, r15	; 0x3d
    21c8:	0e af       	std	Y+62, r16	; 0x3e
    21ca:	1f af       	std	Y+63, r17	; 0x3f
    21cc:	27 97       	sbiw	r28, 0x07	; 7
	printFloat( c );
	printPgmString(PSTR("\r\n"));

#endif
  
  if( gHomed == FALSE ) 
    21ce:	80 91 2f 08 	lds	r24, 0x082F
    21d2:	88 23       	and	r24, r24
    21d4:	d1 f4       	brne	.+52     	; 0x220a <__stack+0xb>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]

  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    21d6:	c4 5b       	subi	r28, 0xB4	; 180
    21d8:	df 4f       	sbci	r29, 0xFF	; 255
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	bf 90       	pop	r11
    21f6:	af 90       	pop	r10
    21f8:	9f 90       	pop	r9
    21fa:	8f 90       	pop	r8
    21fc:	7f 90       	pop	r7
    21fe:	6f 90       	pop	r6
    2200:	5f 90       	pop	r5
    2202:	4f 90       	pop	r4
    2204:	3f 90       	pop	r3
    2206:	2f 90       	pop	r2
    2208:	08 95       	ret
	
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    220a:	c4 01       	movw	r24, r8
    220c:	b3 01       	movw	r22, r6
    220e:	20 91 6e 09 	lds	r18, 0x096E
    2212:	30 91 6f 09 	lds	r19, 0x096F
    2216:	40 91 70 09 	lds	r20, 0x0970
    221a:	50 91 71 09 	lds	r21, 0x0971
    221e:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    2222:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    2226:	7b 01       	movw	r14, r22
    2228:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    222a:	20 91 72 09 	lds	r18, 0x0972
    222e:	30 91 73 09 	lds	r19, 0x0973
    2232:	40 91 74 09 	lds	r20, 0x0974
    2236:	50 91 75 09 	lds	r21, 0x0975
    223a:	2b af       	std	Y+59, r18	; 0x3b
    223c:	3c af       	std	Y+60, r19	; 0x3c
    223e:	4d af       	std	Y+61, r20	; 0x3d
    2240:	5e af       	std	Y+62, r21	; 0x3e
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2242:	40 91 76 09 	lds	r20, 0x0976
    2246:	50 91 77 09 	lds	r21, 0x0977
    224a:	60 91 78 09 	lds	r22, 0x0978
    224e:	70 91 79 09 	lds	r23, 0x0979
    2252:	4f ab       	std	Y+55, r20	; 0x37
    2254:	58 af       	std	Y+56, r21	; 0x38
    2256:	69 af       	std	Y+57, r22	; 0x39
    2258:	7a af       	std	Y+58, r23	; 0x3a
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    225a:	20 90 7a 09 	lds	r2, 0x097A
    225e:	30 90 7b 09 	lds	r3, 0x097B
    2262:	40 90 7c 09 	lds	r4, 0x097C
    2266:	50 90 7d 09 	lds	r5, 0x097D
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    226a:	80 91 e6 07 	lds	r24, 0x07E6
    226e:	90 91 e7 07 	lds	r25, 0x07E7
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	64 e1       	ldi	r22, 0x14	; 20
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
    227c:	28 96       	adiw	r28, 0x08	; 8
    227e:	8f af       	std	Y+63, r24	; 0x3f
    2280:	28 97       	sbiw	r28, 0x08	; 8
    2282:	29 96       	adiw	r28, 0x09	; 9
    2284:	9f af       	std	Y+63, r25	; 0x3f
    2286:	29 97       	sbiw	r28, 0x09	; 9
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    2288:	20 91 e8 07 	lds	r18, 0x07E8
    228c:	30 91 e9 07 	lds	r19, 0x07E9
    2290:	29 96       	adiw	r28, 0x09	; 9
    2292:	6e ad       	ldd	r22, Y+62	; 0x3e
    2294:	7f ad       	ldd	r23, Y+63	; 0x3f
    2296:	29 97       	sbiw	r28, 0x09	; 9
    2298:	26 17       	cp	r18, r22
    229a:	37 07       	cpc	r19, r23
    229c:	71 f4       	brne	.+28     	; 0x22ba <__stack+0xbb>
    229e:	83 b7       	in	r24, 0x33	; 51
    22a0:	81 60       	ori	r24, 0x01	; 1
    22a2:	83 bf       	out	0x33, r24	; 51
    22a4:	88 95       	sleep
    22a6:	83 b7       	in	r24, 0x33	; 51
    22a8:	8e 7f       	andi	r24, 0xFE	; 254
    22aa:	83 bf       	out	0x33, r24	; 51
    22ac:	80 91 e8 07 	lds	r24, 0x07E8
    22b0:	90 91 e9 07 	lds	r25, 0x07E9
    22b4:	82 17       	cp	r24, r18
    22b6:	93 07       	cpc	r25, r19
    22b8:	91 f3       	breq	.-28     	; 0x229e <__stack+0x9f>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    22ba:	20 91 e6 07 	lds	r18, 0x07E6
    22be:	30 91 e7 07 	lds	r19, 0x07E7
    22c2:	c9 01       	movw	r24, r18
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	dc 01       	movw	r26, r24
    22d2:	aa 0f       	add	r26, r26
    22d4:	bb 1f       	adc	r27, r27
    22d6:	aa 0f       	add	r26, r26
    22d8:	bb 1f       	adc	r27, r27
    22da:	aa 0f       	add	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	a8 0f       	add	r26, r24
    22e0:	b9 1f       	adc	r27, r25
    22e2:	a2 0f       	add	r26, r18
    22e4:	b3 1f       	adc	r27, r19
    22e6:	ae 5c       	subi	r26, 0xCE	; 206
    22e8:	bd 4f       	sbci	r27, 0xFD	; 253
    22ea:	be ab       	std	Y+54, r27	; 0x36
    22ec:	ad ab       	std	Y+53, r26	; 0x35
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    22ee:	80 91 ea 07 	lds	r24, 0x07EA
    22f2:	90 91 eb 07 	lds	r25, 0x07EB
    22f6:	a0 91 ec 07 	lds	r26, 0x07EC
    22fa:	b0 91 ed 07 	lds	r27, 0x07ED
    22fe:	37 01       	movw	r6, r14
    2300:	48 01       	movw	r8, r16
    2302:	68 1a       	sub	r6, r24
    2304:	79 0a       	sbc	r7, r25
    2306:	8a 0a       	sbc	r8, r26
    2308:	9b 0a       	sbc	r9, r27
    230a:	97 fc       	sbrc	r9, 7
    230c:	0a c3       	rjmp	.+1556   	; 0x2922 <__stack+0x723>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    230e:	c2 01       	movw	r24, r4
    2310:	b1 01       	movw	r22, r2
    2312:	a6 01       	movw	r20, r12
    2314:	95 01       	movw	r18, r10
    2316:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    231a:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    231e:	6d 87       	std	Y+13, r22	; 0x0d
    2320:	7e 87       	std	Y+14, r23	; 0x0e
    2322:	8f 87       	std	Y+15, r24	; 0x0f
    2324:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2326:	6f a9       	ldd	r22, Y+55	; 0x37
    2328:	78 ad       	ldd	r23, Y+56	; 0x38
    232a:	89 ad       	ldd	r24, Y+57	; 0x39
    232c:	9a ad       	ldd	r25, Y+58	; 0x3a
    232e:	27 96       	adiw	r28, 0x07	; 7
    2330:	2c ad       	ldd	r18, Y+60	; 0x3c
    2332:	3d ad       	ldd	r19, Y+61	; 0x3d
    2334:	4e ad       	ldd	r20, Y+62	; 0x3e
    2336:	5f ad       	ldd	r21, Y+63	; 0x3f
    2338:	27 97       	sbiw	r28, 0x07	; 7
    233a:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    233e:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    2342:	69 87       	std	Y+9, r22	; 0x09
    2344:	7a 87       	std	Y+10, r23	; 0x0a
    2346:	8b 87       	std	Y+11, r24	; 0x0b
    2348:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    234a:	6b ad       	ldd	r22, Y+59	; 0x3b
    234c:	7c ad       	ldd	r23, Y+60	; 0x3c
    234e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2350:	9e ad       	ldd	r25, Y+62	; 0x3e
    2352:	23 96       	adiw	r28, 0x03	; 3
    2354:	2c ad       	ldd	r18, Y+60	; 0x3c
    2356:	3d ad       	ldd	r19, Y+61	; 0x3d
    2358:	4e ad       	ldd	r20, Y+62	; 0x3e
    235a:	5f ad       	ldd	r21, Y+63	; 0x3f
    235c:	23 97       	sbiw	r28, 0x03	; 3
    235e:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    2362:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    2366:	6d 83       	std	Y+5, r22	; 0x05
    2368:	7e 83       	std	Y+6, r23	; 0x06
    236a:	8f 83       	std	Y+7, r24	; 0x07
    236c:	98 87       	std	Y+8, r25	; 0x08
	
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    236e:	e9 82       	std	Y+1, r14	; 0x01
    2370:	fa 82       	std	Y+2, r15	; 0x02
    2372:	0b 83       	std	Y+3, r16	; 0x03
    2374:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2376:	ed a9       	ldd	r30, Y+53	; 0x35
    2378:	fe a9       	ldd	r31, Y+54	; 0x36
    237a:	60 82       	st	Z, r6
    237c:	71 82       	std	Z+1, r7	; 0x01
    237e:	82 82       	std	Z+2, r8	; 0x02
    2380:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2382:	ad 80       	ldd	r10, Y+5	; 0x05
    2384:	be 80       	ldd	r11, Y+6	; 0x06
    2386:	cf 80       	ldd	r12, Y+7	; 0x07
    2388:	d8 84       	ldd	r13, Y+8	; 0x08
    238a:	80 91 ee 07 	lds	r24, 0x07EE
    238e:	90 91 ef 07 	lds	r25, 0x07EF
    2392:	a0 91 f0 07 	lds	r26, 0x07F0
    2396:	b0 91 f1 07 	lds	r27, 0x07F1
    239a:	a6 01       	movw	r20, r12
    239c:	95 01       	movw	r18, r10
    239e:	28 1b       	sub	r18, r24
    23a0:	39 0b       	sbc	r19, r25
    23a2:	4a 0b       	sbc	r20, r26
    23a4:	5b 0b       	sbc	r21, r27
    23a6:	da 01       	movw	r26, r20
    23a8:	c9 01       	movw	r24, r18
    23aa:	57 fd       	sbrc	r21, 7
    23ac:	cb c2       	rjmp	.+1430   	; 0x2944 <__stack+0x745>
    23ae:	ed a9       	ldd	r30, Y+53	; 0x35
    23b0:	fe a9       	ldd	r31, Y+54	; 0x36
    23b2:	84 83       	std	Z+4, r24	; 0x04
    23b4:	95 83       	std	Z+5, r25	; 0x05
    23b6:	a6 83       	std	Z+6, r26	; 0x06
    23b8:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    23ba:	20 90 f2 07 	lds	r2, 0x07F2
    23be:	30 90 f3 07 	lds	r3, 0x07F3
    23c2:	40 90 f4 07 	lds	r4, 0x07F4
    23c6:	50 90 f5 07 	lds	r5, 0x07F5
    23ca:	69 84       	ldd	r6, Y+9	; 0x09
    23cc:	7a 84       	ldd	r7, Y+10	; 0x0a
    23ce:	8b 84       	ldd	r8, Y+11	; 0x0b
    23d0:	9c 84       	ldd	r9, Y+12	; 0x0c
    23d2:	d4 01       	movw	r26, r8
    23d4:	c3 01       	movw	r24, r6
    23d6:	82 19       	sub	r24, r2
    23d8:	93 09       	sbc	r25, r3
    23da:	a4 09       	sbc	r26, r4
    23dc:	b5 09       	sbc	r27, r5
    23de:	b7 fd       	sbrc	r27, 7
    23e0:	a9 c2       	rjmp	.+1362   	; 0x2934 <__stack+0x735>
    23e2:	ed a9       	ldd	r30, Y+53	; 0x35
    23e4:	fe a9       	ldd	r31, Y+54	; 0x36
    23e6:	80 87       	std	Z+8, r24	; 0x08
    23e8:	91 87       	std	Z+9, r25	; 0x09
    23ea:	a2 87       	std	Z+10, r26	; 0x0a
    23ec:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    23ee:	20 91 f6 07 	lds	r18, 0x07F6
    23f2:	30 91 f7 07 	lds	r19, 0x07F7
    23f6:	40 91 f8 07 	lds	r20, 0x07F8
    23fa:	50 91 f9 07 	lds	r21, 0x07F9
    23fe:	29 8b       	std	Y+17, r18	; 0x11
    2400:	3a 8b       	std	Y+18, r19	; 0x12
    2402:	4b 8b       	std	Y+19, r20	; 0x13
    2404:	5c 8b       	std	Y+20, r21	; 0x14
    2406:	4d 85       	ldd	r20, Y+13	; 0x0d
    2408:	5e 85       	ldd	r21, Y+14	; 0x0e
    240a:	6f 85       	ldd	r22, Y+15	; 0x0f
    240c:	78 89       	ldd	r23, Y+16	; 0x10
    240e:	2d 96       	adiw	r28, 0x0d	; 13
    2410:	4c af       	std	Y+60, r20	; 0x3c
    2412:	5d af       	std	Y+61, r21	; 0x3d
    2414:	6e af       	std	Y+62, r22	; 0x3e
    2416:	7f af       	std	Y+63, r23	; 0x3f
    2418:	2d 97       	sbiw	r28, 0x0d	; 13
    241a:	7a 01       	movw	r14, r20
    241c:	8b 01       	movw	r16, r22
    241e:	69 89       	ldd	r22, Y+17	; 0x11
    2420:	7a 89       	ldd	r23, Y+18	; 0x12
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	e6 1a       	sub	r14, r22
    2428:	f7 0a       	sbc	r15, r23
    242a:	08 0b       	sbc	r16, r24
    242c:	19 0b       	sbc	r17, r25
    242e:	17 fd       	sbrc	r17, 7
    2430:	6f c2       	rjmp	.+1246   	; 0x2910 <__stack+0x711>
    2432:	ad a9       	ldd	r26, Y+53	; 0x35
    2434:	be a9       	ldd	r27, Y+54	; 0x36
    2436:	1c 96       	adiw	r26, 0x0c	; 12
    2438:	ed 92       	st	X+, r14
    243a:	fd 92       	st	X+, r15
    243c:	0d 93       	st	X+, r16
    243e:	1c 93       	st	X, r17
    2440:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    2442:	18 96       	adiw	r26, 0x08	; 8
    2444:	2d 91       	ld	r18, X+
    2446:	3d 91       	ld	r19, X+
    2448:	4d 91       	ld	r20, X+
    244a:	5c 91       	ld	r21, X
    244c:	1b 97       	sbiw	r26, 0x0b	; 11
    244e:	fd 01       	movw	r30, r26
    2450:	84 81       	ldd	r24, Z+4	; 0x04
    2452:	95 81       	ldd	r25, Z+5	; 0x05
    2454:	a6 81       	ldd	r26, Z+6	; 0x06
    2456:	b7 81       	ldd	r27, Z+7	; 0x07
    2458:	82 17       	cp	r24, r18
    245a:	93 07       	cpc	r25, r19
    245c:	a4 07       	cpc	r26, r20
    245e:	b5 07       	cpc	r27, r21
    2460:	48 f1       	brcs	.+82     	; 0x24b4 <__stack+0x2b5>
    2462:	ed a9       	ldd	r30, Y+53	; 0x35
    2464:	fe a9       	ldd	r31, Y+54	; 0x36
    2466:	20 81       	ld	r18, Z
    2468:	31 81       	ldd	r19, Z+1	; 0x01
    246a:	42 81       	ldd	r20, Z+2	; 0x02
    246c:	53 81       	ldd	r21, Z+3	; 0x03
    246e:	82 17       	cp	r24, r18
    2470:	93 07       	cpc	r25, r19
    2472:	a4 07       	cpc	r26, r20
    2474:	b5 07       	cpc	r27, r21
    2476:	b0 f0       	brcs	.+44     	; 0x24a4 <__stack+0x2a5>
    2478:	8e 15       	cp	r24, r14
    247a:	9f 05       	cpc	r25, r15
    247c:	a0 07       	cpc	r26, r16
    247e:	b1 07       	cpc	r27, r17
    2480:	70 f0       	brcs	.+28     	; 0x249e <__stack+0x29f>
    2482:	ed a9       	ldd	r30, Y+53	; 0x35
    2484:	fe a9       	ldd	r31, Y+54	; 0x36
    2486:	81 8b       	std	Z+17, r24	; 0x11
    2488:	92 8b       	std	Z+18, r25	; 0x12
    248a:	a3 8b       	std	Z+19, r26	; 0x13
    248c:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	a1 05       	cpc	r26, r1
    2492:	b1 05       	cpc	r27, r1
    2494:	91 f4       	brne	.+36     	; 0x24ba <__stack+0x2bb>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
#endif

// needs for GUI ACK
 	ackHost = 'X';
    2496:	88 e5       	ldi	r24, 0x58	; 88
    2498:	80 93 2e 08 	sts	0x082E, r24
    249c:	9c ce       	rjmp	.-712    	; 0x21d6 <plan_buffer_line+0x5a>
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    249e:	d8 01       	movw	r26, r16
    24a0:	c7 01       	movw	r24, r14
    24a2:	ef cf       	rjmp	.-34     	; 0x2482 <__stack+0x283>
    24a4:	da 01       	movw	r26, r20
    24a6:	c9 01       	movw	r24, r18
    24a8:	8e 15       	cp	r24, r14
    24aa:	9f 05       	cpc	r25, r15
    24ac:	a0 07       	cpc	r26, r16
    24ae:	b1 07       	cpc	r27, r17
    24b0:	40 f7       	brcc	.-48     	; 0x2482 <__stack+0x283>
    24b2:	f5 cf       	rjmp	.-22     	; 0x249e <__stack+0x29f>
    24b4:	da 01       	movw	r26, r20
    24b6:	c9 01       	movw	r24, r18
    24b8:	d4 cf       	rjmp	.-88     	; 0x2462 <__stack+0x263>
// needs for GUI ACK
 	ackHost = 'X';
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    24ba:	29 81       	ldd	r18, Y+1	; 0x01
    24bc:	3a 81       	ldd	r19, Y+2	; 0x02
    24be:	4b 81       	ldd	r20, Y+3	; 0x03
    24c0:	5c 81       	ldd	r21, Y+4	; 0x04
    24c2:	2d 8f       	std	Y+29, r18	; 0x1d
    24c4:	3e 8f       	std	Y+30, r19	; 0x1e
    24c6:	4f 8f       	std	Y+31, r20	; 0x1f
    24c8:	58 a3       	std	Y+32, r21	; 0x20
    24ca:	80 91 ea 07 	lds	r24, 0x07EA
    24ce:	90 91 eb 07 	lds	r25, 0x07EB
    24d2:	a0 91 ec 07 	lds	r26, 0x07EC
    24d6:	b0 91 ed 07 	lds	r27, 0x07ED
    24da:	28 1b       	sub	r18, r24
    24dc:	39 0b       	sbc	r19, r25
    24de:	4a 0b       	sbc	r20, r26
    24e0:	5b 0b       	sbc	r21, r27
    24e2:	ca 01       	movw	r24, r20
    24e4:	b9 01       	movw	r22, r18
    24e6:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    24ea:	20 91 6e 09 	lds	r18, 0x096E
    24ee:	30 91 6f 09 	lds	r19, 0x096F
    24f2:	40 91 70 09 	lds	r20, 0x0970
    24f6:	50 91 71 09 	lds	r21, 0x0971
    24fa:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    24fe:	69 ab       	std	Y+49, r22	; 0x31
    2500:	7a ab       	std	Y+50, r23	; 0x32
    2502:	8b ab       	std	Y+51, r24	; 0x33
    2504:	9c ab       	std	Y+52, r25	; 0x34
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    2506:	a9 a2       	std	Y+33, r10	; 0x21
    2508:	ba a2       	std	Y+34, r11	; 0x22
    250a:	cb a2       	std	Y+35, r12	; 0x23
    250c:	dc a2       	std	Y+36, r13	; 0x24
    250e:	80 91 ee 07 	lds	r24, 0x07EE
    2512:	90 91 ef 07 	lds	r25, 0x07EF
    2516:	a0 91 f0 07 	lds	r26, 0x07F0
    251a:	b0 91 f1 07 	lds	r27, 0x07F1
    251e:	a6 01       	movw	r20, r12
    2520:	95 01       	movw	r18, r10
    2522:	28 1b       	sub	r18, r24
    2524:	39 0b       	sbc	r19, r25
    2526:	4a 0b       	sbc	r20, r26
    2528:	5b 0b       	sbc	r21, r27
    252a:	ca 01       	movw	r24, r20
    252c:	b9 01       	movw	r22, r18
    252e:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    2532:	20 91 72 09 	lds	r18, 0x0972
    2536:	30 91 73 09 	lds	r19, 0x0973
    253a:	40 91 74 09 	lds	r20, 0x0974
    253e:	50 91 75 09 	lds	r21, 0x0975
    2542:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    2546:	6d a7       	std	Y+45, r22	; 0x2d
    2548:	7e a7       	std	Y+46, r23	; 0x2e
    254a:	8f a7       	std	Y+47, r24	; 0x2f
    254c:	98 ab       	std	Y+48, r25	; 0x30
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    254e:	69 8e       	std	Y+25, r6	; 0x19
    2550:	7a 8e       	std	Y+26, r7	; 0x1a
    2552:	8b 8e       	std	Y+27, r8	; 0x1b
    2554:	9c 8e       	std	Y+28, r9	; 0x1c
    2556:	c4 01       	movw	r24, r8
    2558:	b3 01       	movw	r22, r6
    255a:	62 19       	sub	r22, r2
    255c:	73 09       	sbc	r23, r3
    255e:	84 09       	sbc	r24, r4
    2560:	95 09       	sbc	r25, r5
    2562:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    2566:	20 91 76 09 	lds	r18, 0x0976
    256a:	30 91 77 09 	lds	r19, 0x0977
    256e:	40 91 78 09 	lds	r20, 0x0978
    2572:	50 91 79 09 	lds	r21, 0x0979
    2576:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    257a:	69 a7       	std	Y+41, r22	; 0x29
    257c:	7a a7       	std	Y+42, r23	; 0x2a
    257e:	8b a7       	std	Y+43, r24	; 0x2b
    2580:	9c a7       	std	Y+44, r25	; 0x2c
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2582:	2d 96       	adiw	r28, 0x0d	; 13
    2584:	4c ad       	ldd	r20, Y+60	; 0x3c
    2586:	5d ad       	ldd	r21, Y+61	; 0x3d
    2588:	6e ad       	ldd	r22, Y+62	; 0x3e
    258a:	7f ad       	ldd	r23, Y+63	; 0x3f
    258c:	2d 97       	sbiw	r28, 0x0d	; 13
    258e:	4d 8b       	std	Y+21, r20	; 0x15
    2590:	5e 8b       	std	Y+22, r21	; 0x16
    2592:	6f 8b       	std	Y+23, r22	; 0x17
    2594:	78 8f       	std	Y+24, r23	; 0x18
    2596:	cb 01       	movw	r24, r22
    2598:	ba 01       	movw	r22, r20
    259a:	29 89       	ldd	r18, Y+17	; 0x11
    259c:	3a 89       	ldd	r19, Y+18	; 0x12
    259e:	4b 89       	ldd	r20, Y+19	; 0x13
    25a0:	5c 89       	ldd	r21, Y+20	; 0x14
    25a2:	62 1b       	sub	r22, r18
    25a4:	73 0b       	sbc	r23, r19
    25a6:	84 0b       	sbc	r24, r20
    25a8:	95 0b       	sbc	r25, r21
    25aa:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    25ae:	20 91 7a 09 	lds	r18, 0x097A
    25b2:	30 91 7b 09 	lds	r19, 0x097B
    25b6:	40 91 7c 09 	lds	r20, 0x097C
    25ba:	50 91 7d 09 	lds	r21, 0x097D
    25be:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    25c2:	6d a3       	std	Y+37, r22	; 0x25
    25c4:	7e a3       	std	Y+38, r23	; 0x26
    25c6:	8f a3       	std	Y+39, r24	; 0x27
    25c8:	98 a7       	std	Y+40, r25	; 0x28
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    25ca:	69 a9       	ldd	r22, Y+49	; 0x31
    25cc:	7a a9       	ldd	r23, Y+50	; 0x32
    25ce:	8b a9       	ldd	r24, Y+51	; 0x33
    25d0:	9c a9       	ldd	r25, Y+52	; 0x34
    25d2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <square>
    25d6:	3b 01       	movw	r6, r22
    25d8:	4c 01       	movw	r8, r24
    25da:	6d a5       	ldd	r22, Y+45	; 0x2d
    25dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    25de:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e0:	98 a9       	ldd	r25, Y+48	; 0x30
    25e2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <square>
    25e6:	7b 01       	movw	r14, r22
    25e8:	8c 01       	movw	r16, r24
    25ea:	69 a5       	ldd	r22, Y+41	; 0x29
    25ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    25ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    25f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25f2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <square>
    25f6:	5b 01       	movw	r10, r22
    25f8:	6c 01       	movw	r12, r24
    25fa:	6d a1       	ldd	r22, Y+37	; 0x25
    25fc:	7e a1       	ldd	r23, Y+38	; 0x26
    25fe:	8f a1       	ldd	r24, Y+39	; 0x27
    2600:	98 a5       	ldd	r25, Y+40	; 0x28
    2602:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <square>
    2606:	1b 01       	movw	r2, r22
    2608:	2c 01       	movw	r4, r24
    260a:	c4 01       	movw	r24, r8
    260c:	b3 01       	movw	r22, r6
    260e:	a8 01       	movw	r20, r16
    2610:	97 01       	movw	r18, r14
    2612:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    2616:	a6 01       	movw	r20, r12
    2618:	95 01       	movw	r18, r10
    261a:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    261e:	a2 01       	movw	r20, r4
    2620:	91 01       	movw	r18, r2
    2622:	0e 94 27 2c 	call	0x584e	; 0x584e <__addsf3>
    2626:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <sqrt>
    262a:	ad a9       	ldd	r26, Y+53	; 0x35
    262c:	be a9       	ldd	r27, Y+54	; 0x36
    262e:	9d 96       	adiw	r26, 0x2d	; 45
    2630:	6d 93       	st	X+, r22
    2632:	7d 93       	st	X+, r23
    2634:	8d 93       	st	X+, r24
    2636:	9c 93       	st	X, r25
    2638:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    263a:	a8 96       	adiw	r28, 0x28	; 40
    263c:	ee ad       	ldd	r30, Y+62	; 0x3e
    263e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2640:	a8 97       	sbiw	r28, 0x28	; 40
    2642:	ef 2b       	or	r30, r31
    2644:	09 f0       	breq	.+2      	; 0x2648 <__stack+0x449>
    2646:	86 c1       	rjmp	.+780    	; 0x2954 <__stack+0x755>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2648:	a6 96       	adiw	r28, 0x26	; 38
    264a:	2c ad       	ldd	r18, Y+60	; 0x3c
    264c:	3d ad       	ldd	r19, Y+61	; 0x3d
    264e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2650:	5f ad       	ldd	r21, Y+63	; 0x3f
    2652:	a6 97       	sbiw	r28, 0x26	; 38
    2654:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	34 e2       	ldi	r19, 0x24	; 36
    265c:	44 e7       	ldi	r20, 0x74	; 116
    265e:	59 e4       	ldi	r21, 0x49	; 73
    2660:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2664:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <lround>
    2668:	ac 01       	movw	r20, r24
    266a:	cb 01       	movw	r24, r22
    266c:	da 01       	movw	r26, r20
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2672:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__floatunsisf>
    2676:	9b 01       	movw	r18, r22
    2678:	ac 01       	movw	r20, r24
    267a:	60 ec       	ldi	r22, 0xC0	; 192
    267c:	71 ee       	ldi	r23, 0xE1	; 225
    267e:	84 e6       	ldi	r24, 0x64	; 100
    2680:	9c e4       	ldi	r25, 0x4C	; 76
    2682:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    2686:	7b 01       	movw	r14, r22
    2688:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    268a:	69 a9       	ldd	r22, Y+49	; 0x31
    268c:	7a a9       	ldd	r23, Y+50	; 0x32
    268e:	8b a9       	ldd	r24, Y+51	; 0x33
    2690:	9c a9       	ldd	r25, Y+52	; 0x34
    2692:	a8 01       	movw	r20, r16
    2694:	97 01       	movw	r18, r14
    2696:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    269a:	ad a9       	ldd	r26, Y+53	; 0x35
    269c:	be a9       	ldd	r27, Y+54	; 0x36
    269e:	59 96       	adiw	r26, 0x19	; 25
    26a0:	6d 93       	st	X+, r22
    26a2:	7d 93       	st	X+, r23
    26a4:	8d 93       	st	X+, r24
    26a6:	9c 93       	st	X, r25
    26a8:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    26aa:	6d a5       	ldd	r22, Y+45	; 0x2d
    26ac:	7e a5       	ldd	r23, Y+46	; 0x2e
    26ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b0:	98 a9       	ldd	r25, Y+48	; 0x30
    26b2:	a8 01       	movw	r20, r16
    26b4:	97 01       	movw	r18, r14
    26b6:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    26ba:	ed a9       	ldd	r30, Y+53	; 0x35
    26bc:	fe a9       	ldd	r31, Y+54	; 0x36
    26be:	65 8f       	std	Z+29, r22	; 0x1d
    26c0:	76 8f       	std	Z+30, r23	; 0x1e
    26c2:	87 8f       	std	Z+31, r24	; 0x1f
    26c4:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    26c6:	69 a5       	ldd	r22, Y+41	; 0x29
    26c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    26ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    26cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ce:	a8 01       	movw	r20, r16
    26d0:	97 01       	movw	r18, r14
    26d2:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    26d6:	ad a9       	ldd	r26, Y+53	; 0x35
    26d8:	be a9       	ldd	r27, Y+54	; 0x36
    26da:	91 96       	adiw	r26, 0x21	; 33
    26dc:	6d 93       	st	X+, r22
    26de:	7d 93       	st	X+, r23
    26e0:	8d 93       	st	X+, r24
    26e2:	9c 93       	st	X, r25
    26e4:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    26e6:	6d a1       	ldd	r22, Y+37	; 0x25
    26e8:	7e a1       	ldd	r23, Y+38	; 0x26
    26ea:	8f a1       	ldd	r24, Y+39	; 0x27
    26ec:	98 a5       	ldd	r25, Y+40	; 0x28
    26ee:	a8 01       	movw	r20, r16
    26f0:	97 01       	movw	r18, r14
    26f2:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    26f6:	ed a9       	ldd	r30, Y+53	; 0x35
    26f8:	fe a9       	ldd	r31, Y+54	; 0x36
    26fa:	65 a3       	std	Z+37, r22	; 0x25
    26fc:	76 a3       	std	Z+38, r23	; 0x26
    26fe:	87 a3       	std	Z+39, r24	; 0x27
    2700:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    2702:	65 a5       	ldd	r22, Z+45	; 0x2d
    2704:	76 a5       	ldd	r23, Z+46	; 0x2e
    2706:	87 a5       	ldd	r24, Z+47	; 0x2f
    2708:	90 a9       	ldd	r25, Z+48	; 0x30
    270a:	a8 01       	movw	r20, r16
    270c:	97 01       	movw	r18, r14
    270e:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    2712:	ad a9       	ldd	r26, Y+53	; 0x35
    2714:	be a9       	ldd	r27, Y+54	; 0x36
    2716:	99 96       	adiw	r26, 0x29	; 41
    2718:	6d 93       	st	X+, r22
    271a:	7d 93       	st	X+, r23
    271c:	8d 93       	st	X+, r24
    271e:	9c 93       	st	X, r25
    2720:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    2722:	51 96       	adiw	r26, 0x11	; 17
    2724:	6d 91       	ld	r22, X+
    2726:	7d 91       	ld	r23, X+
    2728:	8d 91       	ld	r24, X+
    272a:	9c 91       	ld	r25, X
    272c:	54 97       	sbiw	r26, 0x14	; 20
    272e:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    2732:	5b 01       	movw	r10, r22
    2734:	6c 01       	movw	r12, r24
    2736:	a8 01       	movw	r20, r16
    2738:	97 01       	movw	r18, r14
    273a:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    273e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <ceil>
    2742:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
    2746:	3b 01       	movw	r6, r22
    2748:	4c 01       	movw	r8, r24
    274a:	ed a9       	ldd	r30, Y+53	; 0x35
    274c:	fe a9       	ldd	r31, Y+54	; 0x36
    274e:	65 8b       	std	Z+21, r22	; 0x15
    2750:	76 8b       	std	Z+22, r23	; 0x16
    2752:	87 8b       	std	Z+23, r24	; 0x17
    2754:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a0 e0       	ldi	r26, 0x00	; 0
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	81 ab       	std	Z+49, r24	; 0x31
    2760:	92 ab       	std	Z+50, r25	; 0x32
    2762:	a3 ab       	std	Z+51, r26	; 0x33
    2764:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2766:	60 91 8c 09 	lds	r22, 0x098C
    276a:	70 91 8d 09 	lds	r23, 0x098D
    276e:	80 91 8e 09 	lds	r24, 0x098E
    2772:	90 91 8f 09 	lds	r25, 0x098F
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e7       	ldi	r20, 0x70	; 112
    277c:	52 e4       	ldi	r21, 0x42	; 66
    277e:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	52 e4       	ldi	r21, 0x42	; 66
    278a:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    278e:	7b 01       	movw	r14, r22
    2790:	8c 01       	movw	r16, r24
    2792:	ad a9       	ldd	r26, Y+53	; 0x35
    2794:	be a9       	ldd	r27, Y+54	; 0x36
    2796:	9d 96       	adiw	r26, 0x2d	; 45
    2798:	6d 91       	ld	r22, X+
    279a:	7d 91       	ld	r23, X+
    279c:	8d 91       	ld	r24, X+
    279e:	9c 91       	ld	r25, X
    27a0:	d0 97       	sbiw	r26, 0x30	; 48
    27a2:	a6 01       	movw	r20, r12
    27a4:	95 01       	movw	r18, r10
    27a6:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    27aa:	9b 01       	movw	r18, r22
    27ac:	ac 01       	movw	r20, r24
    27ae:	c8 01       	movw	r24, r16
    27b0:	b7 01       	movw	r22, r14
    27b2:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    27b6:	0e 94 b3 2c 	call	0x5966	; 0x5966 <ceil>
    27ba:	0d a9       	ldd	r16, Y+53	; 0x35
    27bc:	1e a9       	ldd	r17, Y+54	; 0x36
    27be:	03 5c       	subi	r16, 0xC3	; 195
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
    27c6:	f8 01       	movw	r30, r16
    27c8:	60 83       	st	Z, r22
    27ca:	71 83       	std	Z+1, r23	; 0x01
    27cc:	82 83       	std	Z+2, r24	; 0x02
    27ce:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    27d0:	20 91 fa 07 	lds	r18, 0x07FA
    27d4:	22 23       	and	r18, r18
    27d6:	09 f0       	breq	.+2      	; 0x27da <__stack+0x5db>
    27d8:	ca c0       	rjmp	.+404    	; 0x296e <__stack+0x76f>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    27da:	ad a9       	ldd	r26, Y+53	; 0x35
    27dc:	be a9       	ldd	r27, Y+54	; 0x36
    27de:	d5 96       	adiw	r26, 0x35	; 53
    27e0:	6d 92       	st	X+, r6
    27e2:	7d 92       	st	X+, r7
    27e4:	8d 92       	st	X+, r8
    27e6:	9c 92       	st	X, r9
    27e8:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    27ea:	fd 01       	movw	r30, r26
    27ec:	61 ae       	std	Z+57, r6	; 0x39
    27ee:	72 ae       	std	Z+58, r7	; 0x3a
    27f0:	83 ae       	std	Z+59, r8	; 0x3b
    27f2:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    27f4:	ef 5b       	subi	r30, 0xBF	; 191
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	10 82       	st	Z, r1
    27fa:	11 82       	std	Z+1, r1	; 0x01
    27fc:	12 82       	std	Z+2, r1	; 0x02
    27fe:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    2800:	ad 01       	movw	r20, r26
    2802:	4b 5b       	subi	r20, 0xBB	; 187
    2804:	5f 4f       	sbci	r21, 0xFF	; 255
    2806:	fd 01       	movw	r30, r26
    2808:	81 89       	ldd	r24, Z+17	; 0x11
    280a:	92 89       	ldd	r25, Z+18	; 0x12
    280c:	a3 89       	ldd	r26, Z+19	; 0x13
    280e:	b4 89       	ldd	r27, Z+20	; 0x14
    2810:	fa 01       	movw	r30, r20
    2812:	80 83       	st	Z, r24
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	a2 83       	std	Z+2, r26	; 0x02
    2818:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    281a:	d8 01       	movw	r26, r16
    281c:	1d 92       	st	X+, r1
    281e:	1d 92       	st	X+, r1
    2820:	1d 92       	st	X+, r1
    2822:	1c 92       	st	X, r1
    2824:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    2826:	ed a9       	ldd	r30, Y+53	; 0x35
    2828:	fe a9       	ldd	r31, Y+54	; 0x36
    282a:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    282c:	80 91 ea 07 	lds	r24, 0x07EA
    2830:	90 91 eb 07 	lds	r25, 0x07EB
    2834:	a0 91 ec 07 	lds	r26, 0x07EC
    2838:	b0 91 ed 07 	lds	r27, 0x07ED
    283c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    283e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2840:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2842:	78 a1       	ldd	r23, Y+32	; 0x20
    2844:	48 17       	cp	r20, r24
    2846:	59 07       	cpc	r21, r25
    2848:	6a 07       	cpc	r22, r26
    284a:	7b 07       	cpc	r23, r27
    284c:	14 f4       	brge	.+4      	; 0x2852 <__stack+0x653>
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2852:	80 91 ee 07 	lds	r24, 0x07EE
    2856:	90 91 ef 07 	lds	r25, 0x07EF
    285a:	a0 91 f0 07 	lds	r26, 0x07F0
    285e:	b0 91 f1 07 	lds	r27, 0x07F1
    2862:	49 a1       	ldd	r20, Y+33	; 0x21
    2864:	5a a1       	ldd	r21, Y+34	; 0x22
    2866:	6b a1       	ldd	r22, Y+35	; 0x23
    2868:	7c a1       	ldd	r23, Y+36	; 0x24
    286a:	48 17       	cp	r20, r24
    286c:	59 07       	cpc	r21, r25
    286e:	6a 07       	cpc	r22, r26
    2870:	7b 07       	cpc	r23, r27
    2872:	44 f4       	brge	.+16     	; 0x2884 <__stack+0x685>
    2874:	ad a9       	ldd	r26, Y+53	; 0x35
    2876:	be a9       	ldd	r27, Y+54	; 0x36
    2878:	50 96       	adiw	r26, 0x10	; 16
    287a:	8c 91       	ld	r24, X
    287c:	50 97       	sbiw	r26, 0x10	; 16
    287e:	88 60       	ori	r24, 0x08	; 8
    2880:	50 96       	adiw	r26, 0x10	; 16
    2882:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2884:	80 91 f2 07 	lds	r24, 0x07F2
    2888:	90 91 f3 07 	lds	r25, 0x07F3
    288c:	a0 91 f4 07 	lds	r26, 0x07F4
    2890:	b0 91 f5 07 	lds	r27, 0x07F5
    2894:	49 8d       	ldd	r20, Y+25	; 0x19
    2896:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2898:	6b 8d       	ldd	r22, Y+27	; 0x1b
    289a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    289c:	48 17       	cp	r20, r24
    289e:	59 07       	cpc	r21, r25
    28a0:	6a 07       	cpc	r22, r26
    28a2:	7b 07       	cpc	r23, r27
    28a4:	44 f4       	brge	.+16     	; 0x28b6 <__stack+0x6b7>
    28a6:	ad a9       	ldd	r26, Y+53	; 0x35
    28a8:	be a9       	ldd	r27, Y+54	; 0x36
    28aa:	50 96       	adiw	r26, 0x10	; 16
    28ac:	8c 91       	ld	r24, X
    28ae:	50 97       	sbiw	r26, 0x10	; 16
    28b0:	80 64       	ori	r24, 0x40	; 64
    28b2:	50 96       	adiw	r26, 0x10	; 16
    28b4:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    28b6:	4d 89       	ldd	r20, Y+21	; 0x15
    28b8:	5e 89       	ldd	r21, Y+22	; 0x16
    28ba:	6f 89       	ldd	r22, Y+23	; 0x17
    28bc:	78 8d       	ldd	r23, Y+24	; 0x18
    28be:	89 89       	ldd	r24, Y+17	; 0x11
    28c0:	9a 89       	ldd	r25, Y+18	; 0x12
    28c2:	ab 89       	ldd	r26, Y+19	; 0x13
    28c4:	bc 89       	ldd	r27, Y+20	; 0x14
    28c6:	48 17       	cp	r20, r24
    28c8:	59 07       	cpc	r21, r25
    28ca:	6a 07       	cpc	r22, r26
    28cc:	7b 07       	cpc	r23, r27
    28ce:	44 f4       	brge	.+16     	; 0x28e0 <__stack+0x6e1>
    28d0:	ad a9       	ldd	r26, Y+53	; 0x35
    28d2:	be a9       	ldd	r27, Y+54	; 0x36
    28d4:	50 96       	adiw	r26, 0x10	; 16
    28d6:	8c 91       	ld	r24, X
    28d8:	50 97       	sbiw	r26, 0x10	; 16
    28da:	80 68       	ori	r24, 0x80	; 128
    28dc:	50 96       	adiw	r26, 0x10	; 16
    28de:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    28e0:	29 96       	adiw	r28, 0x09	; 9
    28e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    28e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    28e6:	29 97       	sbiw	r28, 0x09	; 9
    28e8:	f0 93 e7 07 	sts	0x07E7, r31
    28ec:	e0 93 e6 07 	sts	0x07E6, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    28f0:	aa ee       	ldi	r26, 0xEA	; 234
    28f2:	b7 e0       	ldi	r27, 0x07	; 7
    28f4:	fe 01       	movw	r30, r28
    28f6:	31 96       	adiw	r30, 0x01	; 1
    28f8:	80 e1       	ldi	r24, 0x10	; 16
    28fa:	01 90       	ld	r0, Z+
    28fc:	0d 92       	st	X+, r0
    28fe:	81 50       	subi	r24, 0x01	; 1
    2900:	e1 f7       	brne	.-8      	; 0x28fa <__stack+0x6fb>

  if (acceleration_manager_enabled) { planner_recalculate(); }  
    2902:	22 23       	and	r18, r18
    2904:	11 f0       	breq	.+4      	; 0x290a <__stack+0x70b>
    2906:	0e 94 b7 10 	call	0x216e	; 0x216e <planner_recalculate>
  st_wake_up();
    290a:	0e 94 e7 17 	call	0x2fce	; 0x2fce <st_wake_up>
    290e:	63 cc       	rjmp	.-1850   	; 0x21d6 <plan_buffer_line+0x5a>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2910:	10 95       	com	r17
    2912:	00 95       	com	r16
    2914:	f0 94       	com	r15
    2916:	e0 94       	com	r14
    2918:	e1 1c       	adc	r14, r1
    291a:	f1 1c       	adc	r15, r1
    291c:	01 1d       	adc	r16, r1
    291e:	11 1d       	adc	r17, r1
    2920:	88 cd       	rjmp	.-1264   	; 0x2432 <__stack+0x233>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2922:	90 94       	com	r9
    2924:	80 94       	com	r8
    2926:	70 94       	com	r7
    2928:	60 94       	com	r6
    292a:	61 1c       	adc	r6, r1
    292c:	71 1c       	adc	r7, r1
    292e:	81 1c       	adc	r8, r1
    2930:	91 1c       	adc	r9, r1
    2932:	ed cc       	rjmp	.-1574   	; 0x230e <__stack+0x10f>
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2934:	b0 95       	com	r27
    2936:	a0 95       	com	r26
    2938:	90 95       	com	r25
    293a:	81 95       	neg	r24
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	af 4f       	sbci	r26, 0xFF	; 255
    2940:	bf 4f       	sbci	r27, 0xFF	; 255
    2942:	4f cd       	rjmp	.-1378   	; 0x23e2 <__stack+0x1e3>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2944:	b0 95       	com	r27
    2946:	a0 95       	com	r26
    2948:	90 95       	com	r25
    294a:	81 95       	neg	r24
    294c:	9f 4f       	sbci	r25, 0xFF	; 255
    294e:	af 4f       	sbci	r26, 0xFF	; 255
    2950:	bf 4f       	sbci	r27, 0xFF	; 255
    2952:	2d cd       	rjmp	.-1446   	; 0x23ae <__stack+0x1af>
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2954:	60 ec       	ldi	r22, 0xC0	; 192
    2956:	71 ee       	ldi	r23, 0xE1	; 225
    2958:	84 e6       	ldi	r24, 0x64	; 100
    295a:	9c e4       	ldi	r25, 0x4C	; 76
    295c:	a6 96       	adiw	r28, 0x26	; 38
    295e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2960:	3d ad       	ldd	r19, Y+61	; 0x3d
    2962:	4e ad       	ldd	r20, Y+62	; 0x3e
    2964:	5f ad       	ldd	r21, Y+63	; 0x3f
    2966:	a6 97       	sbiw	r28, 0x26	; 38
    2968:	0e 94 ca 2c 	call	0x5994	; 0x5994 <__divsf3>
    296c:	7b ce       	rjmp	.-778    	; 0x2664 <__stack+0x465>
  block->rate_delta = ceil(
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    296e:	8d a9       	ldd	r24, Y+53	; 0x35
    2970:	9e a9       	ldd	r25, Y+54	; 0x36
    2972:	0e 94 a1 0b 	call	0x1742	; 0x1742 <factor_for_safe_speed>
    2976:	8b 01       	movw	r16, r22
    2978:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    297a:	8d a9       	ldd	r24, Y+53	; 0x35
    297c:	9e a9       	ldd	r25, Y+54	; 0x36
    297e:	b9 01       	movw	r22, r18
    2980:	a8 01       	movw	r20, r16
    2982:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <calculate_trapezoid_for_block>
    2986:	29 81       	ldd	r18, Y+1	; 0x01
    2988:	3a 81       	ldd	r19, Y+2	; 0x02
    298a:	4b 81       	ldd	r20, Y+3	; 0x03
    298c:	5c 81       	ldd	r21, Y+4	; 0x04
    298e:	2d 8f       	std	Y+29, r18	; 0x1d
    2990:	3e 8f       	std	Y+30, r19	; 0x1e
    2992:	4f 8f       	std	Y+31, r20	; 0x1f
    2994:	58 a3       	std	Y+32, r21	; 0x20
    2996:	4d 81       	ldd	r20, Y+5	; 0x05
    2998:	5e 81       	ldd	r21, Y+6	; 0x06
    299a:	6f 81       	ldd	r22, Y+7	; 0x07
    299c:	78 85       	ldd	r23, Y+8	; 0x08
    299e:	49 a3       	std	Y+33, r20	; 0x21
    29a0:	5a a3       	std	Y+34, r21	; 0x22
    29a2:	6b a3       	std	Y+35, r22	; 0x23
    29a4:	7c a3       	std	Y+36, r23	; 0x24
    29a6:	69 85       	ldd	r22, Y+9	; 0x09
    29a8:	7a 85       	ldd	r23, Y+10	; 0x0a
    29aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    29ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    29ae:	69 8f       	std	Y+25, r22	; 0x19
    29b0:	7a 8f       	std	Y+26, r23	; 0x1a
    29b2:	8b 8f       	std	Y+27, r24	; 0x1b
    29b4:	9c 8f       	std	Y+28, r25	; 0x1c
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ba:	af 85       	ldd	r26, Y+15	; 0x0f
    29bc:	b8 89       	ldd	r27, Y+16	; 0x10
    29be:	8d 8b       	std	Y+21, r24	; 0x15
    29c0:	9e 8b       	std	Y+22, r25	; 0x16
    29c2:	af 8b       	std	Y+23, r26	; 0x17
    29c4:	b8 8f       	std	Y+24, r27	; 0x18
    29c6:	20 91 f6 07 	lds	r18, 0x07F6
    29ca:	30 91 f7 07 	lds	r19, 0x07F7
    29ce:	40 91 f8 07 	lds	r20, 0x07F8
    29d2:	50 91 f9 07 	lds	r21, 0x07F9
    29d6:	29 8b       	std	Y+17, r18	; 0x11
    29d8:	3a 8b       	std	Y+18, r19	; 0x12
    29da:	4b 8b       	std	Y+19, r20	; 0x13
    29dc:	5c 8b       	std	Y+20, r21	; 0x14
    29de:	20 91 fa 07 	lds	r18, 0x07FA
    29e2:	21 cf       	rjmp	.-446    	; 0x2826 <__stack+0x627>

000029e4 <printCurrentPosition>:
extern volatile char ackHost;


void printCurrentPosition( void ) 
{
	printInteger(position[0]);
    29e4:	60 91 ea 07 	lds	r22, 0x07EA
    29e8:	70 91 eb 07 	lds	r23, 0x07EB
    29ec:	80 91 ec 07 	lds	r24, 0x07EC
    29f0:	90 91 ed 07 	lds	r25, 0x07ED
    29f4:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	serialWrite(',');
    29f8:	8c e2       	ldi	r24, 0x2C	; 44
    29fa:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <serialWrite>
	printInteger(position[1]);
    29fe:	60 91 ee 07 	lds	r22, 0x07EE
    2a02:	70 91 ef 07 	lds	r23, 0x07EF
    2a06:	80 91 f0 07 	lds	r24, 0x07F0
    2a0a:	90 91 f1 07 	lds	r25, 0x07F1
    2a0e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	serialWrite('\n');
    2a12:	8a e0       	ldi	r24, 0x0A	; 10
    2a14:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <serialWrite>
}
    2a18:	08 95       	ret

00002a1a <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    2a1e:	15 e4       	ldi	r17, 0x45	; 69
		case GCSTATUS_OK:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("\nGCSTATUS_OK\n")); 
#endif
			// ack OK
			ackHost = 'O';
    2a20:	0f e4       	ldi	r16, 0x4F	; 79

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2a22:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <serialRead>
    2a26:	98 2f       	mov	r25, r24
    2a28:	8f 3f       	cpi	r24, 0xFF	; 255
    2a2a:	e1 f0       	breq	.+56     	; 0x2a64 <sp_process+0x4a>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    2a2c:	20 91 2d 08 	lds	r18, 0x082D
    2a30:	22 23       	and	r18, r18
    2a32:	21 f0       	breq	.+8      	; 0x2a3c <sp_process+0x22>
    2a34:	9a 30       	cpi	r25, 0x0A	; 10
    2a36:	c9 f0       	breq	.+50     	; 0x2a6a <sp_process+0x50>
    2a38:	9d 30       	cpi	r25, 0x0D	; 13
    2a3a:	b9 f0       	breq	.+46     	; 0x2a6a <sp_process+0x50>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    2a3c:	91 32       	cpi	r25, 0x21	; 33
    2a3e:	8c f3       	brlt	.-30     	; 0x2a22 <sp_process+0x8>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2a40:	89 2f       	mov	r24, r25
    2a42:	81 56       	subi	r24, 0x61	; 97
    2a44:	8a 31       	cpi	r24, 0x1A	; 26
    2a46:	68 f5       	brcc	.+90     	; 0x2aa2 <sp_process+0x88>
      line[char_counter++] = c-'a'+'A';
    2a48:	e2 2f       	mov	r30, r18
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	e5 50       	subi	r30, 0x05	; 5
    2a4e:	f8 4f       	sbci	r31, 0xF8	; 248
    2a50:	90 52       	subi	r25, 0x20	; 32
    2a52:	90 83       	st	Z, r25
    2a54:	2f 5f       	subi	r18, 0xFF	; 255
    2a56:	20 93 2d 08 	sts	0x082D, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2a5a:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <serialRead>
    2a5e:	98 2f       	mov	r25, r24
    2a60:	8f 3f       	cpi	r24, 0xFF	; 255
    2a62:	21 f7       	brne	.-56     	; 0x2a2c <sp_process+0x12>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2a64:	1f 91       	pop	r17
    2a66:	0f 91       	pop	r16
    2a68:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    2a6a:	e2 2f       	mov	r30, r18
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	e5 50       	subi	r30, 0x05	; 5
    2a70:	f8 4f       	sbci	r31, 0xF8	; 248
    2a72:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2a74:	8b ef       	ldi	r24, 0xFB	; 251
    2a76:	97 e0       	ldi	r25, 0x07	; 7
    2a78:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <gc_execute_line>
    2a7c:	98 2f       	mov	r25, r24

// this needs to be fixed so it can reply correctly
static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    2a7e:	80 91 2f 08 	lds	r24, 0x082F
    2a82:	88 23       	and	r24, r24
    2a84:	b9 f0       	breq	.+46     	; 0x2ab4 <sp_process+0x9a>
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    2a86:	10 93 2e 08 	sts	0x082E, r17

	switch(status_code) {          
    2a8a:	94 30       	cpi	r25, 0x04	; 4
    2a8c:	48 f5       	brcc	.+82     	; 0x2ae0 <sp_process+0xc6>
    2a8e:	91 30       	cpi	r25, 0x01	; 1
    2a90:	18 f0       	brcs	.+6      	; 0x2a98 <sp_process+0x7e>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a92:	10 92 2d 08 	sts	0x082D, r1
    2a96:	c5 cf       	rjmp	.-118    	; 0x2a22 <sp_process+0x8>
		case GCSTATUS_OK:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("\nGCSTATUS_OK\n")); 
#endif
			// ack OK
			ackHost = 'O';
    2a98:	00 93 2e 08 	sts	0x082E, r16
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a9c:	10 92 2d 08 	sts	0x082D, r1
    2aa0:	c0 cf       	rjmp	.-128    	; 0x2a22 <sp_process+0x8>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    2aa2:	e2 2f       	mov	r30, r18
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	e5 50       	subi	r30, 0x05	; 5
    2aa8:	f8 4f       	sbci	r31, 0xF8	; 248
    2aaa:	90 83       	st	Z, r25
    2aac:	2f 5f       	subi	r18, 0xFF	; 255
    2aae:	20 93 2d 08 	sts	0x082D, r18
    2ab2:	b7 cf       	rjmp	.-146    	; 0x2a22 <sp_process+0x8>
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    2ab4:	10 93 2e 08 	sts	0x082E, r17


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {

		vacuum(0);
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
		head_down(0);
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
		atc_fire(0);
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    2ad0:	10 92 2f 08 	sts	0x082F, r1

		// stops all but home
		set_busy(TRUE);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2ada:	10 92 2d 08 	sts	0x082D, r1
    2ade:	a1 cf       	rjmp	.-190    	; 0x2a22 <sp_process+0x8>

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';

	switch(status_code) {          
    2ae0:	96 30       	cpi	r25, 0x06	; 6
    2ae2:	19 f0       	breq	.+6      	; 0x2aea <sp_process+0xd0>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    2ae4:	99 23       	and	r25, r25
    2ae6:	a9 f2       	breq	.-86     	; 0x2a92 <sp_process+0x78>
    2ae8:	e7 cf       	rjmp	.-50     	; 0x2ab8 <sp_process+0x9e>
#endif
			break;
		case GCSTATUS_NO_ACK:

			// no ACK
			ackHost = 0;
    2aea:	10 92 2e 08 	sts	0x082E, r1
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2aee:	10 92 2d 08 	sts	0x082D, r1
    2af2:	97 cf       	rjmp	.-210    	; 0x2a22 <sp_process+0x8>

00002af4 <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	76 e9       	ldi	r23, 0x96	; 150
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <beginSerial>
}
    2b00:	08 95       	ret

00002b02 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e2       	ldi	r26, 0x20	; 32
    2b08:	b2 e4       	ldi	r27, 0x42	; 66
    2b0a:	80 93 6e 09 	sts	0x096E, r24
    2b0e:	90 93 6f 09 	sts	0x096F, r25
    2b12:	a0 93 70 09 	sts	0x0970, r26
    2b16:	b0 93 71 09 	sts	0x0971, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2b1a:	80 93 72 09 	sts	0x0972, r24
    2b1e:	90 93 73 09 	sts	0x0973, r25
    2b22:	a0 93 74 09 	sts	0x0974, r26
    2b26:	b0 93 75 09 	sts	0x0975, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2b2a:	80 93 76 09 	sts	0x0976, r24
    2b2e:	90 93 77 09 	sts	0x0977, r25
    2b32:	a0 93 78 09 	sts	0x0978, r26
    2b36:	b0 93 79 09 	sts	0x0979, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2b3a:	80 93 7a 09 	sts	0x097A, r24
    2b3e:	90 93 7b 09 	sts	0x097B, r25
    2b42:	a0 93 7c 09 	sts	0x097C, r26
    2b46:	b0 93 7d 09 	sts	0x097D, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2b4a:	86 e0       	ldi	r24, 0x06	; 6
    2b4c:	80 93 7f 09 	sts	0x097F, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a6 e9       	ldi	r26, 0x96	; 150
    2b56:	b5 e4       	ldi	r27, 0x45	; 69
    2b58:	80 93 80 09 	sts	0x0980, r24
    2b5c:	90 93 81 09 	sts	0x0981, r25
    2b60:	a0 93 82 09 	sts	0x0982, r26
    2b64:	b0 93 83 09 	sts	0x0983, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 ef       	ldi	r26, 0xF0	; 240
    2b6e:	b3 e4       	ldi	r27, 0x43	; 67
    2b70:	80 93 84 09 	sts	0x0984, r24
    2b74:	90 93 85 09 	sts	0x0985, r25
    2b78:	a0 93 86 09 	sts	0x0986, r26
    2b7c:	b0 93 87 09 	sts	0x0987, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a0 e4       	ldi	r26, 0x40	; 64
    2b86:	b2 e4       	ldi	r27, 0x42	; 66
    2b88:	80 93 8c 09 	sts	0x098C, r24
    2b8c:	90 93 8d 09 	sts	0x098D, r25
    2b90:	a0 93 8e 09 	sts	0x098E, r26
    2b94:	b0 93 8f 09 	sts	0x098F, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2b98:	8d ec       	ldi	r24, 0xCD	; 205
    2b9a:	9c ec       	ldi	r25, 0xCC	; 204
    2b9c:	ac ec       	ldi	r26, 0xCC	; 204
    2b9e:	bd e3       	ldi	r27, 0x3D	; 61
    2ba0:	80 93 88 09 	sts	0x0988, r24
    2ba4:	90 93 89 09 	sts	0x0989, r25
    2ba8:	a0 93 8a 09 	sts	0x098A, r26
    2bac:	b0 93 8b 09 	sts	0x098B, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a8 e4       	ldi	r26, 0x48	; 72
    2bb6:	b2 e4       	ldi	r27, 0x42	; 66
    2bb8:	80 93 90 09 	sts	0x0990, r24
    2bbc:	90 93 91 09 	sts	0x0991, r25
    2bc0:	a0 93 92 09 	sts	0x0992, r26
    2bc4:	b0 93 93 09 	sts	0x0993, r27
}
    2bc8:	08 95       	ret

00002bca <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	0e 94 33 03 	call	0x666	; 0x666 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2bd2:	87 36       	cpi	r24, 0x67	; 103
    2bd4:	31 f0       	breq	.+12     	; 0x2be2 <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2bd6:	81 30       	cpi	r24, 0x01	; 1
    2bd8:	a9 f0       	breq	.+42     	; 0x2c04 <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2bde:	c9 01       	movw	r24, r18
    2be0:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2be2:	8e e6       	ldi	r24, 0x6E	; 110
    2be4:	99 e0       	ldi	r25, 0x09	; 9
    2be6:	61 e0       	ldi	r22, 0x01	; 1
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	46 e2       	ldi	r20, 0x26	; 38
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	0e 94 98 03 	call	0x730	; 0x730 <memcpy_from_eeprom_with_checksum>
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	89 2b       	or	r24, r25
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <read_settings+0x30>
    2bf8:	21 e0       	ldi	r18, 0x01	; 1
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	28 27       	eor	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2c00:	c9 01       	movw	r24, r18
    2c02:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2c04:	8e e6       	ldi	r24, 0x6E	; 110
    2c06:	99 e0       	ldi	r25, 0x09	; 9
    2c08:	61 e0       	ldi	r22, 0x01	; 1
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	4b e1       	ldi	r20, 0x1B	; 27
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	0e 94 98 03 	call	0x730	; 0x730 <memcpy_from_eeprom_with_checksum>
    2c14:	89 2b       	or	r24, r25
    2c16:	09 f3       	breq	.-62     	; 0x2bda <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	a0 e4       	ldi	r26, 0x40	; 64
    2c1e:	b2 e4       	ldi	r27, 0x42	; 66
    2c20:	80 93 8c 09 	sts	0x098C, r24
    2c24:	90 93 8d 09 	sts	0x098D, r25
    2c28:	a0 93 8e 09 	sts	0x098E, r26
    2c2c:	b0 93 8f 09 	sts	0x098F, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a8 e4       	ldi	r26, 0x48	; 72
    2c36:	b2 e4       	ldi	r27, 0x42	; 66
    2c38:	80 93 90 09 	sts	0x0990, r24
    2c3c:	90 93 91 09 	sts	0x0991, r25
    2c40:	a0 93 92 09 	sts	0x0992, r26
    2c44:	b0 93 93 09 	sts	0x0993, r27
    2c48:	21 e0       	ldi	r18, 0x01	; 1
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	c8 cf       	rjmp	.-112    	; 0x2bde <read_settings+0x14>

00002c4e <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	67 e6       	ldi	r22, 0x67	; 103
    2c54:	0e 94 3b 03 	call	0x676	; 0x676 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	6e e6       	ldi	r22, 0x6E	; 110
    2c5e:	79 e0       	ldi	r23, 0x09	; 9
    2c60:	46 e2       	ldi	r20, 0x26	; 38
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <memcpy_to_eeprom_with_checksum>
}
    2c68:	08 95       	ret

00002c6a <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2c6a:	fc 01       	movw	r30, r24
  switch(parameter) {
    2c6c:	86 30       	cpi	r24, 0x06	; 6
    2c6e:	91 05       	cpc	r25, r1
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <settings_store_setting+0xa>
    2c72:	6d c0       	rjmp	.+218    	; 0x2d4e <settings_store_setting+0xe4>
    2c74:	87 30       	cpi	r24, 0x07	; 7
    2c76:	91 05       	cpc	r25, r1
    2c78:	a4 f0       	brlt	.+40     	; 0x2ca2 <settings_store_setting+0x38>
    2c7a:	88 30       	cpi	r24, 0x08	; 8
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <settings_store_setting+0x18>
    2c80:	48 c0       	rjmp	.+144    	; 0x2d12 <settings_store_setting+0xa8>
    2c82:	88 30       	cpi	r24, 0x08	; 8
    2c84:	91 05       	cpc	r25, r1
    2c86:	b4 f1       	brlt	.+108    	; 0x2cf4 <settings_store_setting+0x8a>
    2c88:	89 30       	cpi	r24, 0x09	; 9
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <settings_store_setting+0x26>
    2c8e:	7b c0       	rjmp	.+246    	; 0x2d86 <settings_store_setting+0x11c>
    2c90:	e8 5e       	subi	r30, 0xE8	; 232
    2c92:	f3 40       	sbci	r31, 0x03	; 3
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <settings_store_setting+0x2e>
    2c96:	6a c0       	rjmp	.+212    	; 0x2d6c <settings_store_setting+0x102>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2c98:	88 e6       	ldi	r24, 0x68	; 104
    2c9a:	93 e0       	ldi	r25, 0x03	; 3
    2c9c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    2ca0:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    2ca2:	84 30       	cpi	r24, 0x04	; 4
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <settings_store_setting+0x40>
    2ca8:	43 c0       	rjmp	.+134    	; 0x2d30 <settings_store_setting+0xc6>
    2caa:	85 30       	cpi	r24, 0x05	; 5
    2cac:	91 05       	cpc	r25, r1
    2cae:	9c f4       	brge	.+38     	; 0x2cd6 <settings_store_setting+0x6c>
    2cb0:	97 fd       	sbrc	r25, 7
    2cb2:	f2 cf       	rjmp	.-28     	; 0x2c98 <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2cb4:	ee 0f       	add	r30, r30
    2cb6:	ff 1f       	adc	r31, r31
    2cb8:	ee 0f       	add	r30, r30
    2cba:	ff 1f       	adc	r31, r31
    2cbc:	e2 59       	subi	r30, 0x92	; 146
    2cbe:	f6 4f       	sbci	r31, 0xF6	; 246
    2cc0:	40 83       	st	Z, r20
    2cc2:	51 83       	std	Z+1, r21	; 0x01
    2cc4:	62 83       	std	Z+2, r22	; 0x02
    2cc6:	73 83       	std	Z+3, r23	; 0x03
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2cc8:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2ccc:	83 e5       	ldi	r24, 0x53	; 83
    2cce:	93 e0       	ldi	r25, 0x03	; 3
    2cd0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    2cd4:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    2cd6:	40 93 80 09 	sts	0x0980, r20
    2cda:	50 93 81 09 	sts	0x0981, r21
    2cde:	60 93 82 09 	sts	0x0982, r22
    2ce2:	70 93 83 09 	sts	0x0983, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2ce6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2cea:	83 e5       	ldi	r24, 0x53	; 83
    2cec:	93 e0       	ldi	r25, 0x03	; 3
    2cee:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    2cf2:	08 95       	ret
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    2cf4:	40 93 88 09 	sts	0x0988, r20
    2cf8:	50 93 89 09 	sts	0x0989, r21
    2cfc:	60 93 8a 09 	sts	0x098A, r22
    2d00:	70 93 8b 09 	sts	0x098B, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2d04:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d08:	83 e5       	ldi	r24, 0x53	; 83
    2d0a:	93 e0       	ldi	r25, 0x03	; 3
    2d0c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    2d10:	08 95       	ret
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    2d12:	40 93 8c 09 	sts	0x098C, r20
    2d16:	50 93 8d 09 	sts	0x098D, r21
    2d1a:	60 93 8e 09 	sts	0x098E, r22
    2d1e:	70 93 8f 09 	sts	0x098F, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2d22:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d26:	83 e5       	ldi	r24, 0x53	; 83
    2d28:	93 e0       	ldi	r25, 0x03	; 3
    2d2a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    2d2e:	08 95       	ret
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    2d30:	cb 01       	movw	r24, r22
    2d32:	ba 01       	movw	r22, r20
    2d34:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <round>
    2d38:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <__fixunssfsi>
    2d3c:	60 93 7f 09 	sts	0x097F, r22
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2d40:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d44:	83 e5       	ldi	r24, 0x53	; 83
    2d46:	93 e0       	ldi	r25, 0x03	; 3
    2d48:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    2d4c:	08 95       	ret
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    2d4e:	40 93 84 09 	sts	0x0984, r20
    2d52:	50 93 85 09 	sts	0x0985, r21
    2d56:	60 93 86 09 	sts	0x0986, r22
    2d5a:	70 93 87 09 	sts	0x0987, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2d5e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d62:	83 e5       	ldi	r24, 0x53	; 83
    2d64:	93 e0       	ldi	r25, 0x03	; 3
    2d66:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    2d6a:	08 95       	ret
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	ba 01       	movw	r22, r20
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
    2d7c:	88 23       	and	r24, r24
    2d7e:	a9 f0       	breq	.+42     	; 0x2daa <settings_store_setting+0x140>
    2d80:	0e 94 09 18 	call	0x3012	; 0x3012 <st_enable>
    2d84:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    2d86:	db 01       	movw	r26, r22
    2d88:	ca 01       	movw	r24, r20
    2d8a:	bf 77       	andi	r27, 0x7F	; 127
    2d8c:	80 93 90 09 	sts	0x0990, r24
    2d90:	90 93 91 09 	sts	0x0991, r25
    2d94:	a0 93 92 09 	sts	0x0992, r26
    2d98:	b0 93 93 09 	sts	0x0993, r27
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2d9c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2da0:	83 e5       	ldi	r24, 0x53	; 83
    2da2:	93 e0       	ldi	r25, 0x03	; 3
    2da4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    2da8:	08 95       	ret
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    2daa:	0e 94 0b 18 	call	0x3016	; 0x3016 <st_disable>
    2dae:	08 95       	ret

00002db0 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2db0:	8c e3       	ldi	r24, 0x3C	; 60
    2db2:	95 e0       	ldi	r25, 0x05	; 5
    2db4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2db8:	85 e3       	ldi	r24, 0x35	; 53
    2dba:	95 e0       	ldi	r25, 0x05	; 5
    2dbc:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printPgmString(PSTR("\r\n"));
    2dc0:	82 e3       	ldi	r24, 0x32	; 50
    2dc2:	95 e0       	ldi	r25, 0x05	; 5
    2dc4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2dc8:	8c e2       	ldi	r24, 0x2C	; 44
    2dca:	95 e0       	ldi	r25, 0x05	; 5
    2dcc:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2dd0:	60 91 6e 09 	lds	r22, 0x096E
    2dd4:	70 91 6f 09 	lds	r23, 0x096F
    2dd8:	80 91 70 09 	lds	r24, 0x0970
    2ddc:	90 91 71 09 	lds	r25, 0x0971
    2de0:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2de4:	8c e1       	ldi	r24, 0x1C	; 28
    2de6:	95 e0       	ldi	r25, 0x05	; 5
    2de8:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2dec:	86 e1       	ldi	r24, 0x16	; 22
    2dee:	95 e0       	ldi	r25, 0x05	; 5
    2df0:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2df4:	60 91 72 09 	lds	r22, 0x0972
    2df8:	70 91 73 09 	lds	r23, 0x0973
    2dfc:	80 91 74 09 	lds	r24, 0x0974
    2e00:	90 91 75 09 	lds	r25, 0x0975
    2e04:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2e08:	86 e0       	ldi	r24, 0x06	; 6
    2e0a:	95 e0       	ldi	r25, 0x05	; 5
    2e0c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	95 e0       	ldi	r25, 0x05	; 5
    2e14:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2e18:	60 91 76 09 	lds	r22, 0x0976
    2e1c:	70 91 77 09 	lds	r23, 0x0977
    2e20:	80 91 78 09 	lds	r24, 0x0978
    2e24:	90 91 79 09 	lds	r25, 0x0979
    2e28:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2e2c:	80 ef       	ldi	r24, 0xF0	; 240
    2e2e:	94 e0       	ldi	r25, 0x04	; 4
    2e30:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2e34:	8a ee       	ldi	r24, 0xEA	; 234
    2e36:	94 e0       	ldi	r25, 0x04	; 4
    2e38:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2e3c:	60 91 7a 09 	lds	r22, 0x097A
    2e40:	70 91 7b 09 	lds	r23, 0x097B
    2e44:	80 91 7c 09 	lds	r24, 0x097C
    2e48:	90 91 7d 09 	lds	r25, 0x097D
    2e4c:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2e50:	88 ed       	ldi	r24, 0xD8	; 216
    2e52:	94 e0       	ldi	r25, 0x04	; 4
    2e54:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2e58:	82 ed       	ldi	r24, 0xD2	; 210
    2e5a:	94 e0       	ldi	r25, 0x04	; 4
    2e5c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printInteger(settings.pulse_microseconds);
    2e60:	60 91 7f 09 	lds	r22, 0x097F
    2e64:	70 e0       	ldi	r23, 0x00	; 0
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2e6e:	85 eb       	ldi	r24, 0xB5	; 181
    2e70:	94 e0       	ldi	r25, 0x04	; 4
    2e72:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2e76:	8f ea       	ldi	r24, 0xAF	; 175
    2e78:	94 e0       	ldi	r25, 0x04	; 4
    2e7a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.default_feed_rate);
    2e7e:	60 91 80 09 	lds	r22, 0x0980
    2e82:	70 91 81 09 	lds	r23, 0x0981
    2e86:	80 91 82 09 	lds	r24, 0x0982
    2e8a:	90 91 83 09 	lds	r25, 0x0983
    2e8e:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2e92:	81 e9       	ldi	r24, 0x91	; 145
    2e94:	94 e0       	ldi	r25, 0x04	; 4
    2e96:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2e9a:	8b e8       	ldi	r24, 0x8B	; 139
    2e9c:	94 e0       	ldi	r25, 0x04	; 4
    2e9e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.default_seek_rate);
    2ea2:	60 91 84 09 	lds	r22, 0x0984
    2ea6:	70 91 85 09 	lds	r23, 0x0985
    2eaa:	80 91 86 09 	lds	r24, 0x0986
    2eae:	90 91 87 09 	lds	r25, 0x0987
    2eb2:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2eb6:	8d e6       	ldi	r24, 0x6D	; 109
    2eb8:	94 e0       	ldi	r25, 0x04	; 4
    2eba:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2ebe:	87 e6       	ldi	r24, 0x67	; 103
    2ec0:	94 e0       	ldi	r25, 0x04	; 4
    2ec2:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2ec6:	60 91 88 09 	lds	r22, 0x0988
    2eca:	70 91 89 09 	lds	r23, 0x0989
    2ece:	80 91 8a 09 	lds	r24, 0x098A
    2ed2:	90 91 8b 09 	lds	r25, 0x098B
    2ed6:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2eda:	83 e5       	ldi	r24, 0x53	; 83
    2edc:	94 e0       	ldi	r25, 0x04	; 4
    2ede:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2ee2:	8d e4       	ldi	r24, 0x4D	; 77
    2ee4:	94 e0       	ldi	r25, 0x04	; 4
    2ee6:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.acceleration);
    2eea:	60 91 8c 09 	lds	r22, 0x098C
    2eee:	70 91 8d 09 	lds	r23, 0x098D
    2ef2:	80 91 8e 09 	lds	r24, 0x098E
    2ef6:	90 91 8f 09 	lds	r25, 0x098F
    2efa:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2efe:	8f e2       	ldi	r24, 0x2F	; 47
    2f00:	94 e0       	ldi	r25, 0x04	; 4
    2f02:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2f06:	89 e2       	ldi	r24, 0x29	; 41
    2f08:	94 e0       	ldi	r25, 0x04	; 4
    2f0a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printFloat(settings.max_jerk);
    2f0e:	60 91 90 09 	lds	r22, 0x0990
    2f12:	70 91 91 09 	lds	r23, 0x0991
    2f16:	80 91 92 09 	lds	r24, 0x0992
    2f1a:	90 91 93 09 	lds	r25, 0x0993
    2f1e:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2f22:	81 ef       	ldi	r24, 0xF1	; 241
    2f24:	93 e0       	ldi	r25, 0x03	; 3
    2f26:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2f2a:	88 ee       	ldi	r24, 0xE8	; 232
    2f2c:	93 e0       	ldi	r25, 0x03	; 3
    2f2e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
  printInteger(st_is_enabled());
    2f32:	0e 94 0d 18 	call	0x301a	; 0x301a <st_is_enabled>
    2f36:	aa 27       	eor	r26, r26
    2f38:	97 fd       	sbrc	r25, 7
    2f3a:	a0 95       	com	r26
    2f3c:	ba 2f       	mov	r27, r26
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2f46:	8f eb       	ldi	r24, 0xBF	; 191
    2f48:	93 e0       	ldi	r25, 0x03	; 3
    2f4a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2f4e:	8c e7       	ldi	r24, 0x7C	; 124
    2f50:	93 e0       	ldi	r25, 0x03	; 3
    2f52:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
}
    2f56:	08 95       	ret

00002f58 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2f58:	0e 94 e5 15 	call	0x2bca	; 0x2bca <read_settings>
    2f5c:	89 2b       	or	r24, r25
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <settings_init+0xa>
    2f60:	08 95       	ret
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2f62:	0e 94 81 15 	call	0x2b02	; 0x2b02 <settings_reset>
    write_settings();
    2f66:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <write_settings>
    settings_dump();
    2f6a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <settings_dump>
    2f6e:	08 95       	ret

00002f70 <spindle_init>:
#include <avr/io.h>
#include <util/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2f70:	e1 e0       	ldi	r30, 0x01	; 1
    2f72:	f1 e0       	ldi	r31, 0x01	; 1
    2f74:	80 81       	ld	r24, Z
    2f76:	80 64       	ori	r24, 0x40	; 64
    2f78:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2f7a:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2f7c:	3e 9a       	sbi	0x07, 6	; 7

}
    2f7e:	08 95       	ret

00002f80 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2f80:	97 fd       	sbrc	r25, 7
    2f82:	07 c0       	rjmp	.+14     	; 0x2f92 <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2f84:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2f86:	80 91 02 01 	lds	r24, 0x0102
    2f8a:	80 64       	ori	r24, 0x40	; 64
    2f8c:	80 93 02 01 	sts	0x0102, r24
}
    2f90:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2f92:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2f94:	80 91 02 01 	lds	r24, 0x0102
    2f98:	80 64       	ori	r24, 0x40	; 64
    2f9a:	80 93 02 01 	sts	0x0102, r24
}
    2f9e:	08 95       	ret

00002fa0 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2fa0:	e2 e0       	ldi	r30, 0x02	; 2
    2fa2:	f1 e0       	ldi	r31, 0x01	; 1
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8f 7b       	andi	r24, 0xBF	; 191
    2fa8:	80 83       	st	Z, r24
}
    2faa:	08 95       	ret

00002fac <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fac:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fae:	40 e7       	ldi	r20, 0x70	; 112
    2fb0:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2fb2:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fb4:	23 2f       	mov	r18, r19
    2fb6:	2a 95       	dec	r18
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2fba:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fbc:	fa 01       	movw	r30, r20
    2fbe:	31 97       	sbiw	r30, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	2f ef       	ldi	r18, 0xFF	; 255
    2fc6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fc8:	92 07       	cpc	r25, r18
    2fca:	99 f7       	brne	.-26     	; 0x2fb2 <rotate_head+0x6>

}
    2fcc:	08 95       	ret

00002fce <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2fce:	ef e6       	ldi	r30, 0x6F	; 111
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	82 60       	ori	r24, 0x02	; 2
    2fd6:	80 83       	st	Z, r24
}
    2fd8:	08 95       	ret

00002fda <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	90 93 48 08 	sts	0x0848, r25
    2fe0:	80 93 47 08 	sts	0x0847, r24
}
    2fe4:	08 95       	ret

00002fe6 <get_busy>:

int get_busy( void ) 
{
	return busy;
    2fe6:	20 91 47 08 	lds	r18, 0x0847
    2fea:	30 91 48 08 	lds	r19, 0x0848
}
    2fee:	c9 01       	movw	r24, r18
    2ff0:	08 95       	ret

00002ff2 <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2ff2:	1f 92       	push	r1
    2ff4:	0f 92       	push	r0
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	0f 92       	push	r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2ffe:	81 b3       	in	r24, 0x11	; 17
    3000:	85 63       	ori	r24, 0x35	; 53
    3002:	81 bb       	out	0x11, r24	; 17

// turn off C axis
	STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    3004:	46 98       	cbi	0x08, 6	; 8


}
    3006:	8f 91       	pop	r24
    3008:	0f 90       	pop	r0
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	0f 90       	pop	r0
    300e:	1f 90       	pop	r1
    3010:	18 95       	reti

00003012 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3012:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    3014:	08 95       	ret

00003016 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    3016:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    3018:	08 95       	ret

0000301a <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    301a:	3c 99       	sbic	0x07, 4	; 7
    301c:	04 c0       	rjmp	.+8      	; 0x3026 <st_is_enabled+0xc>
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    3022:	c9 01       	movw	r24, r18
    3024:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    3026:	88 b1       	in	r24, 0x08	; 8
    3028:	82 95       	swap	r24
    302a:	8f 70       	andi	r24, 0x0F	; 15
    302c:	80 95       	com	r24
    302e:	81 70       	andi	r24, 0x01	; 1
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    3034:	c9 01       	movw	r24, r18
    3036:	08 95       	ret

00003038 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    3038:	60 30       	cpi	r22, 0x00	; 0
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	72 07       	cpc	r23, r18
    303e:	21 e0       	ldi	r18, 0x01	; 1
    3040:	82 07       	cpc	r24, r18
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	92 07       	cpc	r25, r18
    3046:	08 f4       	brcc	.+2      	; 0x304a <config_step_timer+0x12>
    3048:	5c c0       	rjmp	.+184    	; 0x3102 <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    304a:	60 30       	cpi	r22, 0x00	; 0
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	72 07       	cpc	r23, r18
    3050:	28 e0       	ldi	r18, 0x08	; 8
    3052:	82 07       	cpc	r24, r18
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	92 07       	cpc	r25, r18
    3058:	78 f1       	brcs	.+94     	; 0x30b8 <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    305a:	60 30       	cpi	r22, 0x00	; 0
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	72 07       	cpc	r23, r18
    3060:	20 e4       	ldi	r18, 0x40	; 64
    3062:	82 07       	cpc	r24, r18
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	92 07       	cpc	r25, r18
    3068:	08 f4       	brcc	.+2      	; 0x306c <config_step_timer+0x34>
    306a:	51 c0       	rjmp	.+162    	; 0x310e <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    306c:	60 30       	cpi	r22, 0x00	; 0
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	72 07       	cpc	r23, r18
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	82 07       	cpc	r24, r18
    3076:	21 e0       	ldi	r18, 0x01	; 1
    3078:	92 07       	cpc	r25, r18
    307a:	08 f4       	brcc	.+2      	; 0x307e <config_step_timer+0x46>
    307c:	6d c0       	rjmp	.+218    	; 0x3158 <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    307e:	60 30       	cpi	r22, 0x00	; 0
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	72 07       	cpc	r23, r18
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	82 07       	cpc	r24, r18
    3088:	24 e0       	ldi	r18, 0x04	; 4
    308a:	92 07       	cpc	r25, r18
    308c:	08 f0       	brcs	.+2      	; 0x3090 <config_step_timer+0x58>
    308e:	71 c0       	rjmp	.+226    	; 0x3172 <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	96 95       	lsr	r25
    3094:	87 95       	ror	r24
    3096:	77 95       	ror	r23
    3098:	67 95       	ror	r22
    309a:	2a 95       	dec	r18
    309c:	d1 f7       	brne	.-12     	; 0x3092 <config_step_timer+0x5a>
    309e:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    30a0:	9b 01       	movw	r18, r22
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	8a e0       	ldi	r24, 0x0A	; 10
    30a8:	22 0f       	add	r18, r18
    30aa:	33 1f       	adc	r19, r19
    30ac:	44 1f       	adc	r20, r20
    30ae:	55 1f       	adc	r21, r21
    30b0:	8a 95       	dec	r24
    30b2:	d1 f7       	brne	.-12     	; 0x30a8 <config_step_timer+0x70>
    30b4:	95 e0       	ldi	r25, 0x05	; 5
    30b6:	18 c0       	rjmp	.+48     	; 0x30e8 <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    30b8:	23 e0       	ldi	r18, 0x03	; 3
    30ba:	96 95       	lsr	r25
    30bc:	87 95       	ror	r24
    30be:	77 95       	ror	r23
    30c0:	67 95       	ror	r22
    30c2:	2a 95       	dec	r18
    30c4:	d1 f7       	brne	.-12     	; 0x30ba <config_step_timer+0x82>
    30c6:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    30c8:	9b 01       	movw	r18, r22
    30ca:	40 e0       	ldi	r20, 0x00	; 0
    30cc:	50 e0       	ldi	r21, 0x00	; 0
    30ce:	22 0f       	add	r18, r18
    30d0:	33 1f       	adc	r19, r19
    30d2:	44 1f       	adc	r20, r20
    30d4:	55 1f       	adc	r21, r21
    30d6:	22 0f       	add	r18, r18
    30d8:	33 1f       	adc	r19, r19
    30da:	44 1f       	adc	r20, r20
    30dc:	55 1f       	adc	r21, r21
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	44 1f       	adc	r20, r20
    30e4:	55 1f       	adc	r21, r21
    30e6:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    30e8:	80 91 81 00 	lds	r24, 0x0081
    30ec:	88 7f       	andi	r24, 0xF8	; 248
    30ee:	98 2b       	or	r25, r24
    30f0:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    30f4:	f0 93 89 00 	sts	0x0089, r31
    30f8:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    30fc:	b9 01       	movw	r22, r18
    30fe:	ca 01       	movw	r24, r20
    3100:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    3102:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    3104:	9b 01       	movw	r18, r22
    3106:	40 e0       	ldi	r20, 0x00	; 0
    3108:	50 e0       	ldi	r21, 0x00	; 0
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	ed cf       	rjmp	.-38     	; 0x30e8 <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    310e:	b6 e0       	ldi	r27, 0x06	; 6
    3110:	96 95       	lsr	r25
    3112:	87 95       	ror	r24
    3114:	77 95       	ror	r23
    3116:	67 95       	ror	r22
    3118:	ba 95       	dec	r27
    311a:	d1 f7       	brne	.-12     	; 0x3110 <config_step_timer+0xd8>
    311c:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    311e:	9b 01       	movw	r18, r22
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	22 0f       	add	r18, r18
    3126:	33 1f       	adc	r19, r19
    3128:	44 1f       	adc	r20, r20
    312a:	55 1f       	adc	r21, r21
    312c:	22 0f       	add	r18, r18
    312e:	33 1f       	adc	r19, r19
    3130:	44 1f       	adc	r20, r20
    3132:	55 1f       	adc	r21, r21
    3134:	22 0f       	add	r18, r18
    3136:	33 1f       	adc	r19, r19
    3138:	44 1f       	adc	r20, r20
    313a:	55 1f       	adc	r21, r21
    313c:	22 0f       	add	r18, r18
    313e:	33 1f       	adc	r19, r19
    3140:	44 1f       	adc	r20, r20
    3142:	55 1f       	adc	r21, r21
    3144:	22 0f       	add	r18, r18
    3146:	33 1f       	adc	r19, r19
    3148:	44 1f       	adc	r20, r20
    314a:	55 1f       	adc	r21, r21
    314c:	22 0f       	add	r18, r18
    314e:	33 1f       	adc	r19, r19
    3150:	44 1f       	adc	r20, r20
    3152:	55 1f       	adc	r21, r21
    3154:	93 e0       	ldi	r25, 0x03	; 3
    3156:	c8 cf       	rjmp	.-112    	; 0x30e8 <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    3158:	bb 27       	eor	r27, r27
    315a:	a9 2f       	mov	r26, r25
    315c:	98 2f       	mov	r25, r24
    315e:	87 2f       	mov	r24, r23
    3160:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    3162:	a0 e0       	ldi	r26, 0x00	; 0
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	22 27       	eor	r18, r18
    3168:	38 2f       	mov	r19, r24
    316a:	49 2f       	mov	r20, r25
    316c:	5a 2f       	mov	r21, r26
    316e:	94 e0       	ldi	r25, 0x04	; 4
    3170:	bb cf       	rjmp	.-138    	; 0x30e8 <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    3172:	ef ef       	ldi	r30, 0xFF	; 255
    3174:	ff ef       	ldi	r31, 0xFF	; 255
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	3c ef       	ldi	r19, 0xFC	; 252
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	95 e0       	ldi	r25, 0x05	; 5
    3180:	b3 cf       	rjmp	.-154    	; 0x30e8 <config_step_timer+0xb0>

00003182 <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    3182:	9b 01       	movw	r18, r22
    3184:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    3186:	20 3b       	cpi	r18, 0xB0	; 176
    3188:	84 e0       	ldi	r24, 0x04	; 4
    318a:	38 07       	cpc	r19, r24
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	48 07       	cpc	r20, r24
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	58 07       	cpc	r21, r24
    3194:	78 f4       	brcc	.+30     	; 0x31b4 <set_step_events_per_minute+0x32>
    3196:	60 e0       	ldi	r22, 0x00	; 0
    3198:	75 e3       	ldi	r23, 0x35	; 53
    319a:	8c e0       	ldi	r24, 0x0C	; 12
    319c:	90 e0       	ldi	r25, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    319e:	0e 94 1c 18 	call	0x3038	; 0x3038 <config_step_timer>
    31a2:	60 93 49 08 	sts	0x0849, r22
    31a6:	70 93 4a 08 	sts	0x084A, r23
    31aa:	80 93 4b 08 	sts	0x084B, r24
    31ae:	90 93 4c 08 	sts	0x084C, r25
}
    31b2:	08 95       	ret
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	70 e7       	ldi	r23, 0x70	; 112
    31b8:	88 e3       	ldi	r24, 0x38	; 56
    31ba:	99 e3       	ldi	r25, 0x39	; 57
    31bc:	0e 94 03 30 	call	0x6006	; 0x6006 <__udivmodsi4>
    31c0:	c9 01       	movw	r24, r18
    31c2:	da 01       	movw	r26, r20
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	ea cf       	rjmp	.-44     	; 0x319e <set_step_events_per_minute+0x1c>

000031ca <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    31ca:	80 b3       	in	r24, 0x10	; 16
    31cc:	85 63       	ori	r24, 0x35	; 53
    31ce:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    31d0:	80 b3       	in	r24, 0x10	; 16
    31d2:	8a 6c       	ori	r24, 0xCA	; 202
    31d4:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    31d6:	81 b3       	in	r24, 0x11	; 17
    31d8:	85 63       	ori	r24, 0x35	; 53
    31da:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    31dc:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    31de:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    31e0:	e1 e8       	ldi	r30, 0x81	; 129
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	8f 7e       	andi	r24, 0xEF	; 239
    31e8:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    31ea:	80 81       	ld	r24, Z
    31ec:	88 60       	ori	r24, 0x08	; 8
    31ee:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    31f0:	e0 e8       	ldi	r30, 0x80	; 128
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	8d 7f       	andi	r24, 0xFD	; 253
    31f8:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    31fa:	80 81       	ld	r24, Z
    31fc:	8e 7f       	andi	r24, 0xFE	; 254
    31fe:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    3200:	80 81       	ld	r24, Z
    3202:	8f 73       	andi	r24, 0x3F	; 63
    3204:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    3206:	80 81       	ld	r24, Z
    3208:	8f 7c       	andi	r24, 0xCF	; 207
    320a:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    320c:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    3216:	e0 e7       	ldi	r30, 0x70	; 112
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	81 60       	ori	r24, 0x01	; 1
    321e:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    3220:	60 e7       	ldi	r22, 0x70	; 112
    3222:	77 e1       	ldi	r23, 0x17	; 23
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 c1 18 	call	0x3182	; 0x3182 <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    322c:	ef e6       	ldi	r30, 0x6F	; 111
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	8d 7f       	andi	r24, 0xFD	; 253
    3234:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    3236:	10 92 4d 08 	sts	0x084D, r1
    323a:	10 92 4e 08 	sts	0x084E, r1
    323e:	10 92 4f 08 	sts	0x084F, r1
    3242:	10 92 50 08 	sts	0x0850, r1
  
  sei();
    3246:	78 94       	sei
}
    3248:	08 95       	ret

0000324a <xHome>:
}


unsigned char xHome( void ) 
{
	unsigned char homex = bit_is_set( XHM_PIN, X_HOME );
    324a:	80 b1       	in	r24, 0x00	; 0
		printPgmString(PSTR("xHome: homed\r\n"));
#endif
	}

	return homex;
}
    324c:	80 71       	andi	r24, 0x10	; 16
    324e:	08 95       	ret

00003250 <yHome>:

unsigned char yHome( void ) 
{
	unsigned char homey = bit_is_set( YHM_PIN, Y_HOME );
    3250:	82 b3       	in	r24, 0x12	; 18
		printPgmString(PSTR("yHome: homed\r\n"));
#endif
	}

	return homey;
}
    3252:	81 70       	andi	r24, 0x01	; 1
    3254:	08 95       	ret

00003256 <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    3256:	80 91 6f 00 	lds	r24, 0x006F
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	96 95       	lsr	r25
    325e:	87 95       	ror	r24
}
    3260:	81 70       	andi	r24, 0x01	; 1
    3262:	08 95       	ret

00003264 <limits_init>:


void limits_init(void)
{
	//pickobear specific
	DDRA = 0x0;
    3264:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    3266:	82 e0       	ldi	r24, 0x02	; 2
    3268:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    326a:	17 b8       	out	0x07, r1	; 7
	LIMIT_DDR = 0x0;
    326c:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    326e:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    3270:	9f e8       	ldi	r25, 0x8F	; 143
    3272:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    3274:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    3276:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    327a:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    327e:	3f ec       	ldi	r19, 0xCF	; 207
    3280:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    3284:	20 ef       	ldi	r18, 0xF0	; 240
    3286:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    328a:	8c e9       	ldi	r24, 0x9C	; 156
    328c:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    328e:	82 e2       	ldi	r24, 0x22	; 34
    3290:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    3292:	83 e1       	ldi	r24, 0x13	; 19
    3294:	88 b9       	out	0x08, r24	; 8
#ifdef SIMULATE
	LIMIT_PORT = 0x00; //00000000
	LIMIT_PIN = 0x0;
#else
	LIMIT_PORT = 0x8F; //10001111
    3296:	9b b9       	out	0x0b, r25	; 11
#endif
	PORTE = 0x30;
    3298:	80 e3       	ldi	r24, 0x30	; 48
    329a:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    329c:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    329e:	83 e2       	ldi	r24, 0x23	; 35
    32a0:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    32a2:	83 e0       	ldi	r24, 0x03	; 3
    32a4:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    32a8:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    32ac:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    32b0:	20 93 0b 01 	sts	0x010B, r18
}
    32b4:	08 95       	ret

000032b6 <get_limit_bits>:
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    32b6:	4b 9b       	sbis	0x09, 3	; 9
    32b8:	0c c0       	rjmp	.+24     	; 0x32d2 <get_limit_bits+0x1c>
    32ba:	82 e8       	ldi	r24, 0x82	; 130
      	ret |= _BV( 1 ) ;

	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
    32bc:	4a 99       	sbic	0x09, 2	; 9
      	ret |= _BV( 2 ) ;
    32be:	84 60       	ori	r24, 0x04	; 4

	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
    32c0:	48 99       	sbic	0x09, 0	; 9
      	ret |= _BV( 3 ) ;
    32c2:	88 60       	ori	r24, 0x08	; 8

	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
    32c4:	49 99       	sbic	0x09, 1	; 9
      	ret |= _BV( 4 ) ;
    32c6:	80 61       	ori	r24, 0x10	; 16

	if( bit_is_set( XHM_PIN, X_HOME ) )
    32c8:	04 99       	sbic	0x00, 4	; 0
      	ret |= _BV( 5 ) ;
    32ca:	80 62       	ori	r24, 0x20	; 32

	if( bit_is_set( YHM_PIN, Y_HOME ) )
    32cc:	90 99       	sbic	0x12, 0	; 18
      	ret |= _BV( 6) ;
    32ce:	80 64       	ori	r24, 0x40	; 64

	return ret;

}
    32d0:	08 95       	ret
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    32d2:	80 e8       	ldi	r24, 0x80	; 128
    32d4:	f3 cf       	rjmp	.-26     	; 0x32bc <get_limit_bits+0x6>

000032d6 <yLimit2>:

	return limit;
}

unsigned char yLimit2( void ) 
{
    32d6:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT );
    32d8:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    32da:	18 2f       	mov	r17, r24
    32dc:	12 70       	andi	r17, 0x02	; 2
    32de:	81 ff       	sbrs	r24, 1
    32e0:	06 c0       	rjmp	.+12     	; 0x32ee <yLimit2+0x18>
		// no longer homed
		gHomed = FALSE;
    32e2:	10 92 2f 08 	sts	0x082F, r1
		printPgmString(PSTR("yLimit2: is in limit\r\n"));
    32e6:	88 e4       	ldi	r24, 0x48	; 72
    32e8:	95 e0       	ldi	r25, 0x05	; 5
    32ea:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
	}

	return limit;
}
    32ee:	81 2f       	mov	r24, r17
    32f0:	1f 91       	pop	r17
    32f2:	08 95       	ret

000032f4 <moveBack>:
  }
	return TRUE;
}

unsigned char moveBack( unsigned int distance ) 
{
    32f4:	ff 92       	push	r15
    32f6:	0f 93       	push	r16
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    3300:	81 b3       	in	r24, 0x11	; 17
    3302:	85 73       	andi	r24, 0x35	; 53
    3304:	88 60       	ori	r24, 0x08	; 8
    3306:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3308:	20 97       	sbiw	r28, 0x00	; 0
    330a:	19 f1       	breq	.+70     	; 0x3352 <moveBack+0x5e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    330c:	45 e3       	ldi	r20, 0x35	; 53
    330e:	f4 2e       	mov	r15, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3310:	00 e6       	ldi	r16, 0x60	; 96
    3312:	14 e0       	ldi	r17, 0x04	; 4
    3314:	13 c0       	rjmp	.+38     	; 0x333c <moveBack+0x48>

  	if( yLimit2() || is_head_down()  ) 
    3316:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    331a:	88 23       	and	r24, r24
    331c:	99 f4       	brne	.+38     	; 0x3344 <moveBack+0x50>
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    331e:	81 b3       	in	r24, 0x11	; 17
    3320:	8a 7c       	andi	r24, 0xCA	; 202
    3322:	84 60       	ori	r24, 0x04	; 4
    3324:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3326:	8f 2d       	mov	r24, r15
    3328:	8a 95       	dec	r24
    332a:	f1 f7       	brne	.-4      	; 0x3328 <moveBack+0x34>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    332c:	81 b3       	in	r24, 0x11	; 17
    332e:	8a 7c       	andi	r24, 0xCA	; 202
    3330:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3332:	c8 01       	movw	r24, r16
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <moveBack+0x40>
    3338:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    333a:	59 f0       	breq	.+22     	; 0x3352 <moveBack+0x5e>

  	if( yLimit2() || is_head_down()  ) 
    333c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <yLimit2>
    3340:	88 23       	and	r24, r24
    3342:	49 f3       	breq	.-46     	; 0x3316 <moveBack+0x22>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3344:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	1f 91       	pop	r17
    334c:	0f 91       	pop	r16
    334e:	ff 90       	pop	r15
    3350:	08 95       	ret
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3352:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	08 95       	ret

00003360 <yLimit1>:

	return limit;
}

unsigned char yLimit1( void ) 
{
    3360:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
    3362:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    3364:	18 2f       	mov	r17, r24
    3366:	11 70       	andi	r17, 0x01	; 1
    3368:	80 ff       	sbrs	r24, 0
    336a:	06 c0       	rjmp	.+12     	; 0x3378 <yLimit1+0x18>
		// no longer homed
		gHomed = FALSE;
    336c:	10 92 2f 08 	sts	0x082F, r1
		printPgmString(PSTR("yLimit1: is in limit\r\n"));
    3370:	8f e5       	ldi	r24, 0x5F	; 95
    3372:	95 e0       	ldi	r25, 0x05	; 5
    3374:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
	}

	return limit;
}
    3378:	81 2f       	mov	r24, r17
    337a:	1f 91       	pop	r17
    337c:	08 95       	ret

0000337e <moveForward>:
  }
	return TRUE;
}

unsigned char moveForward( unsigned int distance ) 
{
    337e:	ff 92       	push	r15
    3380:	0f 93       	push	r16
    3382:	1f 93       	push	r17
    3384:	cf 93       	push	r28
    3386:	df 93       	push	r29
    3388:	ec 01       	movw	r28, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    338a:	81 b3       	in	r24, 0x11	; 17
    338c:	85 73       	andi	r24, 0x35	; 53
    338e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3390:	20 97       	sbiw	r28, 0x00	; 0
    3392:	d9 f0       	breq	.+54     	; 0x33ca <moveForward+0x4c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3394:	55 e3       	ldi	r21, 0x35	; 53
    3396:	f5 2e       	mov	r15, r21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3398:	00 e6       	ldi	r16, 0x60	; 96
    339a:	14 e0       	ldi	r17, 0x04	; 4
    339c:	0f c0       	rjmp	.+30     	; 0x33bc <moveForward+0x3e>
		printPgmString(PSTR("\r\n"));

#endif
	}

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    339e:	81 b3       	in	r24, 0x11	; 17
    33a0:	8a 7c       	andi	r24, 0xCA	; 202
    33a2:	84 60       	ori	r24, 0x04	; 4
    33a4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33a6:	8f 2d       	mov	r24, r15
    33a8:	8a 95       	dec	r24
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <moveForward+0x2a>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    33ac:	81 b3       	in	r24, 0x11	; 17
    33ae:	8a 7c       	andi	r24, 0xCA	; 202
    33b0:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33b2:	c8 01       	movw	r24, r16
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <moveForward+0x36>
    33b8:	21 97       	sbiw	r28, 0x01	; 1


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    33ba:	39 f0       	breq	.+14     	; 0x33ca <moveForward+0x4c>

	//  hit left limit or head down?
  	if( yLimit1() || is_head_down()  ) {
    33bc:	0e 94 b0 19 	call	0x3360	; 0x3360 <yLimit1>
    33c0:	88 23       	and	r24, r24
    33c2:	69 f7       	brne	.-38     	; 0x339e <moveForward+0x20>
    33c4:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    33c8:	ea cf       	rjmp	.-44     	; 0x339e <moveForward+0x20>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	ff 90       	pop	r15
    33d6:	08 95       	ret

000033d8 <xLimit2>:

	return limit;
}

unsigned char xLimit2( void ) 
{
    33d8:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, X2_LIMIT_BIT );
    33da:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    33dc:	18 2f       	mov	r17, r24
    33de:	14 70       	andi	r17, 0x04	; 4
    33e0:	82 ff       	sbrs	r24, 2
    33e2:	06 c0       	rjmp	.+12     	; 0x33f0 <xLimit2+0x18>
		// no longer homed
		gHomed = FALSE;
    33e4:	10 92 2f 08 	sts	0x082F, r1
		printPgmString(PSTR("xLimit2: is in limit\r\n"));
    33e8:	86 e7       	ldi	r24, 0x76	; 118
    33ea:	95 e0       	ldi	r25, 0x05	; 5
    33ec:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
	}

	return limit;
}
    33f0:	81 2f       	mov	r24, r17
    33f2:	1f 91       	pop	r17
    33f4:	08 95       	ret

000033f6 <moveRight>:

	return TRUE;
}

unsigned char moveRight( unsigned int distance ) 
{
    33f6:	ff 92       	push	r15
    33f8:	0f 93       	push	r16
    33fa:	1f 93       	push	r17
    33fc:	cf 93       	push	r28
    33fe:	df 93       	push	r29
    3400:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    3402:	81 b3       	in	r24, 0x11	; 17
    3404:	85 73       	andi	r24, 0x35	; 53
    3406:	82 60       	ori	r24, 0x02	; 2
    3408:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    340a:	20 97       	sbiw	r28, 0x00	; 0
    340c:	19 f1       	breq	.+70     	; 0x3454 <moveRight+0x5e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    340e:	65 e3       	ldi	r22, 0x35	; 53
    3410:	f6 2e       	mov	r15, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3412:	00 e6       	ldi	r16, 0x60	; 96
    3414:	14 e0       	ldi	r17, 0x04	; 4
    3416:	13 c0       	rjmp	.+38     	; 0x343e <moveRight+0x48>

	//  hit left limit or head down?
  	if( xLimit2()  || is_head_down()  ) {
    3418:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    341c:	88 23       	and	r24, r24
    341e:	99 f4       	brne	.+38     	; 0x3446 <moveRight+0x50>
		printPgmString(PSTR("\r\nmoveLeft HEAD_DOWN_TEST or X2 LIMIT \r\n"));
#endif
		return 0;  	
	}

	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3420:	81 b3       	in	r24, 0x11	; 17
    3422:	8a 7c       	andi	r24, 0xCA	; 202
    3424:	81 60       	ori	r24, 0x01	; 1
    3426:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3428:	8f 2d       	mov	r24, r15
    342a:	8a 95       	dec	r24
    342c:	f1 f7       	brne	.-4      	; 0x342a <moveRight+0x34>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    342e:	81 b3       	in	r24, 0x11	; 17
    3430:	8a 7c       	andi	r24, 0xCA	; 202
    3432:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3434:	c8 01       	movw	r24, r16
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	f1 f7       	brne	.-4      	; 0x3436 <moveRight+0x40>
    343a:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    343c:	59 f0       	breq	.+22     	; 0x3454 <moveRight+0x5e>

	//  hit left limit or head down?
  	if( xLimit2()  || is_head_down()  ) {
    343e:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <xLimit2>
    3442:	88 23       	and	r24, r24
    3444:	49 f3       	breq	.-46     	; 0x3418 <moveRight+0x22>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3446:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    3450:	ff 90       	pop	r15
    3452:	08 95       	ret
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3454:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	1f 91       	pop	r17
    345c:	0f 91       	pop	r16
    345e:	ff 90       	pop	r15
    3460:	08 95       	ret

00003462 <xLimit1>:

// global home flag ( machine should only do home move if this is FALSE)
unsigned char gHomed = FALSE;

unsigned char xLimit1( void ) 
{
    3462:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
    3464:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    3466:	18 2f       	mov	r17, r24
    3468:	18 70       	andi	r17, 0x08	; 8
    346a:	83 ff       	sbrs	r24, 3
    346c:	06 c0       	rjmp	.+12     	; 0x347a <xLimit1+0x18>
		// no longer homed
		gHomed = FALSE;
    346e:	10 92 2f 08 	sts	0x082F, r1
		printPgmString(PSTR("xLimit1\r\n"));
    3472:	8d e8       	ldi	r24, 0x8D	; 141
    3474:	95 e0       	ldi	r25, 0x05	; 5
    3476:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
	}

	return limit;
}
    347a:	81 2f       	mov	r24, r17
    347c:	1f 91       	pop	r17
    347e:	08 95       	ret

00003480 <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    3480:	ff 92       	push	r15
    3482:	0f 93       	push	r16
    3484:	1f 93       	push	r17
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    348c:	81 b3       	in	r24, 0x11	; 17
    348e:	85 73       	andi	r24, 0x35	; 53
    3490:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3492:	20 97       	sbiw	r28, 0x00	; 0
    3494:	19 f1       	breq	.+70     	; 0x34dc <moveLeft+0x5c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3496:	75 e3       	ldi	r23, 0x35	; 53
    3498:	f7 2e       	mov	r15, r23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    349a:	00 e6       	ldi	r16, 0x60	; 96
    349c:	14 e0       	ldi	r17, 0x04	; 4
    349e:	13 c0       	rjmp	.+38     	; 0x34c6 <moveLeft+0x46>

	//  hit left limit or head down?
  	if( xLimit1() || is_head_down() ) {
    34a0:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    34a4:	88 23       	and	r24, r24
    34a6:	99 f4       	brne	.+38     	; 0x34ce <moveLeft+0x4e>
#endif

		return 0;
	}

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    34a8:	81 b3       	in	r24, 0x11	; 17
    34aa:	8a 7c       	andi	r24, 0xCA	; 202
    34ac:	81 60       	ori	r24, 0x01	; 1
    34ae:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34b0:	8f 2d       	mov	r24, r15
    34b2:	8a 95       	dec	r24
    34b4:	f1 f7       	brne	.-4      	; 0x34b2 <moveLeft+0x32>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    34b6:	81 b3       	in	r24, 0x11	; 17
    34b8:	8a 7c       	andi	r24, 0xCA	; 202
    34ba:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34bc:	c8 01       	movw	r24, r16
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <moveLeft+0x3e>
    34c2:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    34c4:	59 f0       	breq	.+22     	; 0x34dc <moveLeft+0x5c>

	//  hit left limit or head down?
  	if( xLimit1() || is_head_down() ) {
    34c6:	0e 94 31 1a 	call	0x3462	; 0x3462 <xLimit1>
    34ca:	88 23       	and	r24, r24
    34cc:	49 f3       	breq	.-46     	; 0x34a0 <moveLeft+0x20>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    34ce:	80 e0       	ldi	r24, 0x00	; 0
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	1f 91       	pop	r17
    34d6:	0f 91       	pop	r16
    34d8:	ff 90       	pop	r15
    34da:	08 95       	ret
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    34dc:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    34de:	df 91       	pop	r29
    34e0:	cf 91       	pop	r28
    34e2:	1f 91       	pop	r17
    34e4:	0f 91       	pop	r16
    34e6:	ff 90       	pop	r15
    34e8:	08 95       	ret

000034ea <st_go_home>:
	unsigned char yDir = FORWARD;

	unsigned int counter = 0;

	// not homed
	gHomed = FALSE;
    34ea:	10 92 2f 08 	sts	0x082F, r1

	// reset position machine thinks we are at.
	plan_init();
    34ee:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <plan_init>
	gc_init();
    34f2:	0e 94 3c 05 	call	0xa78	; 0xa78 <gc_init>

	// if head down, set head up
	if( is_head_down() ) {
    34f6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    34fa:	88 23       	and	r24, r24
    34fc:	49 f0       	breq	.+18     	; 0x3510 <st_go_home+0x26>
#ifdef VERBOSE_DEBUG

		printPgmString(PSTR("home is_head_down()=1\r\n"));
#endif

		head_down(0);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
		
		//check again
		if(is_head_down() ){
    3506:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    350a:	88 23       	and	r24, r24
    350c:	09 f0       	breq	.+2      	; 0x3510 <st_go_home+0x26>
    350e:	4e c0       	rjmp	.+156    	; 0x35ac <st_go_home+0xc2>
	set_busy(FALSE);
	return ;

#endif

	cli();
    3510:	f8 94       	cli

	// tool changer all down
	atc_fire(0);	
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <atc_fire>
	vacuum(0);
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nX limit1 check\r\n"));
#endif

	// If in left most limit, move to right > more than size of home and limit area
	if( xLimit1() ) {
    3522:	0e 94 31 1a 	call	0x3462	; 0x3462 <xLimit1>
    3526:	88 23       	and	r24, r24
    3528:	89 f0       	breq	.+34     	; 0x354c <st_go_home+0x62>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    352a:	88 ee       	ldi	r24, 0xE8	; 232
    352c:	93 e0       	ldi	r25, 0x03	; 3
    352e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <moveRight>
    3532:	88 23       	and	r24, r24
    3534:	09 f4       	brne	.+2      	; 0x3538 <st_go_home+0x4e>
    3536:	4f c0       	rjmp	.+158    	; 0x35d6 <st_go_home+0xec>
			sei();
			return;
    3538:	20 ed       	ldi	r18, 0xD0	; 208
    353a:	37 e0       	ldi	r19, 0x07	; 7
    353c:	40 e9       	ldi	r20, 0x90	; 144
    353e:	51 e0       	ldi	r21, 0x01	; 1
    3540:	ca 01       	movw	r24, r20
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <st_go_home+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3546:	21 50       	subi	r18, 0x01	; 1
    3548:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354a:	d1 f7       	brne	.-12     	; 0x3540 <st_go_home+0x56>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("\r\nY limit1 check\r\n"));
#endif

	// If in front most limit, move to right > more than size of home and limit area
	if( yLimit1() ) {
    354c:	0e 94 b0 19 	call	0x3360	; 0x3360 <yLimit1>
    3550:	88 23       	and	r24, r24
    3552:	81 f5       	brne	.+96     	; 0x35b4 <st_go_home+0xca>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( xHome() ) {
    3554:	04 99       	sbic	0x00, 4	; 0
    3556:	08 c0       	rjmp	.+16     	; 0x3568 <st_go_home+0x7e>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 )  {
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	0e 94 40 1a 	call	0x3480	; 0x3480 <moveLeft>
    3560:	88 23       	and	r24, r24
    3562:	c1 f7       	brne	.-16     	; 0x3554 <st_go_home+0x6a>
		printPgmString(PSTR("\r\npickobear is homed\r\n"));
#endif
		return;
	}
error:;
	sei();
    3564:	78 94       	sei
    3566:	08 95       	ret
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 )  {
    3568:	20 ed       	ldi	r18, 0xD0	; 208
    356a:	37 e0       	ldi	r19, 0x07	; 7
    356c:	40 e9       	ldi	r20, 0x90	; 144
    356e:	51 e0       	ldi	r21, 0x01	; 1
    3570:	ca 01       	movw	r24, r20
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <st_go_home+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3576:	21 50       	subi	r18, 0x01	; 1
    3578:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	d1 f7       	brne	.-12     	; 0x3570 <st_go_home+0x86>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( yHome() ) {
    357c:	90 9b       	sbis	0x12, 0	; 18
    357e:	0f c0       	rjmp	.+30     	; 0x359e <st_go_home+0xb4>
	printPgmString(PSTR("\r\n"));
#endif



	sei();
    3580:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    3582:	89 b1       	in	r24, 0x09	; 9
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	8f 70       	andi	r24, 0x0F	; 15
    3588:	90 70       	andi	r25, 0x00	; 0
    358a:	89 2b       	or	r24, r25
    358c:	59 f7       	brne	.-42     	; 0x3564 <st_go_home+0x7a>
		gHomed = TRUE ;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	80 93 2f 08 	sts	0x082F, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    3594:	10 92 48 08 	sts	0x0848, r1
    3598:	10 92 47 08 	sts	0x0847, r1
    359c:	08 95       	ret
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	0e 94 bf 19 	call	0x337e	; 0x337e <moveForward>
    35a6:	88 23       	and	r24, r24
    35a8:	49 f7       	brne	.-46     	; 0x357c <st_go_home+0x92>
    35aa:	dc cf       	rjmp	.-72     	; 0x3564 <st_go_home+0x7a>
		//check again
		if(is_head_down() ){
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("home failed, head down\r\n"));
#endif
			ackHost = 'E';
    35ac:	85 e4       	ldi	r24, 0x45	; 69
    35ae:	80 93 2e 08 	sts	0x082E, r24
    35b2:	08 95       	ret

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    35b4:	88 ee       	ldi	r24, 0xE8	; 232
    35b6:	93 e0       	ldi	r25, 0x03	; 3
    35b8:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <moveBack>
    35bc:	88 23       	and	r24, r24
    35be:	69 f0       	breq	.+26     	; 0x35da <st_go_home+0xf0>
			sei();
			return;
    35c0:	20 ed       	ldi	r18, 0xD0	; 208
    35c2:	37 e0       	ldi	r19, 0x07	; 7
    35c4:	40 e9       	ldi	r20, 0x90	; 144
    35c6:	51 e0       	ldi	r21, 0x01	; 1
    35c8:	ca 01       	movw	r24, r20
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <st_go_home+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ce:	21 50       	subi	r18, 0x01	; 1
    35d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d2:	d1 f7       	brne	.-12     	; 0x35c8 <st_go_home+0xde>
    35d4:	bf cf       	rjmp	.-130    	; 0x3554 <st_go_home+0x6a>
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
			sei();
    35d6:	78 94       	sei
    35d8:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
			sei();
    35da:	78 94       	sei
    35dc:	08 95       	ret

000035de <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    35de:	07 c0       	rjmp	.+14     	; 0x35ee <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    35e0:	83 b7       	in	r24, 0x33	; 51
    35e2:	81 60       	ori	r24, 0x01	; 1
    35e4:	83 bf       	out	0x33, r24	; 51
    35e6:	88 95       	sleep
    35e8:	83 b7       	in	r24, 0x33	; 51
    35ea:	8e 7f       	andi	r24, 0xFE	; 254
    35ec:	83 bf       	out	0x33, r24	; 51
    35ee:	0e 94 ce 0b 	call	0x179c	; 0x179c <plan_get_current_block>
    35f2:	89 2b       	or	r24, r25
    35f4:	a9 f7       	brne	.-22     	; 0x35e0 <st_synchronize+0x2>
}
    35f6:	08 95       	ret

000035f8 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    35f8:	1f 92       	push	r1
    35fa:	0f 92       	push	r0
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	0f 92       	push	r0
    3600:	0b b6       	in	r0, 0x3b	; 59
    3602:	0f 92       	push	r0
    3604:	11 24       	eor	r1, r1
    3606:	ef 92       	push	r14
    3608:	ff 92       	push	r15
    360a:	0f 93       	push	r16
    360c:	1f 93       	push	r17
    360e:	2f 93       	push	r18
    3610:	3f 93       	push	r19
    3612:	4f 93       	push	r20
    3614:	5f 93       	push	r21
    3616:	6f 93       	push	r22
    3618:	7f 93       	push	r23
    361a:	8f 93       	push	r24
    361c:	9f 93       	push	r25
    361e:	af 93       	push	r26
    3620:	bf 93       	push	r27
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	ef 93       	push	r30
    3628:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    362a:	80 91 2f 08 	lds	r24, 0x082F
    362e:	88 23       	and	r24, r24
    3630:	49 f1       	breq	.+82     	; 0x3684 <__vector_17+0x8c>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

	// Check all limit switches
	if( LIMIT_PIN & 0xf ) {
    3632:	89 b1       	in	r24, 0x09	; 9
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	8f 70       	andi	r24, 0x0F	; 15
    3638:	90 70       	andi	r25, 0x00	; 0
    363a:	89 2b       	or	r24, r25
    363c:	61 f1       	breq	.+88     	; 0x3696 <__vector_17+0x9e>
		gHomed = FALSE ;
    363e:	10 92 2f 08 	sts	0x082F, r1
		// set ack
		ackHost = 'L';
    3642:	8c e4       	ldi	r24, 0x4C	; 76
    3644:	80 93 2e 08 	sts	0x082E, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    3648:	80 91 6f 00 	lds	r24, 0x006F
    364c:	8d 7f       	andi	r24, 0xFD	; 253
    364e:	80 93 6f 00 	sts	0x006F, r24
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
}
    3652:	ff 91       	pop	r31
    3654:	ef 91       	pop	r30
    3656:	df 91       	pop	r29
    3658:	cf 91       	pop	r28
    365a:	bf 91       	pop	r27
    365c:	af 91       	pop	r26
    365e:	9f 91       	pop	r25
    3660:	8f 91       	pop	r24
    3662:	7f 91       	pop	r23
    3664:	6f 91       	pop	r22
    3666:	5f 91       	pop	r21
    3668:	4f 91       	pop	r20
    366a:	3f 91       	pop	r19
    366c:	2f 91       	pop	r18
    366e:	1f 91       	pop	r17
    3670:	0f 91       	pop	r16
    3672:	ff 90       	pop	r15
    3674:	ef 90       	pop	r14
    3676:	0f 90       	pop	r0
    3678:	0b be       	out	0x3b, r0	; 59
    367a:	0f 90       	pop	r0
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	0f 90       	pop	r0
    3680:	1f 90       	pop	r1
    3682:	18 95       	reti
{        
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
		// set ack
		ackHost = 'H';
    3684:	88 e4       	ldi	r24, 0x48	; 72
    3686:	80 93 2e 08 	sts	0x082E, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    368a:	80 91 6f 00 	lds	r24, 0x006F
    368e:	8d 7f       	andi	r24, 0xFD	; 253
    3690:	80 93 6f 00 	sts	0x006F, r24
    3694:	de cf       	rjmp	.-68     	; 0x3652 <__vector_17+0x5a>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

	// don't move if the head is down, this one is ok to let it keep running  
	if( is_head_down() ) {
    3696:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    369a:	88 23       	and	r24, r24
    369c:	d1 f6       	brne	.-76     	; 0x3652 <__vector_17+0x5a>
		return;
	}

  if(busy){ 
    369e:	80 91 47 08 	lds	r24, 0x0847
    36a2:	90 91 48 08 	lds	r25, 0x0848
    36a6:	89 2b       	or	r24, r25
    36a8:	a1 f6       	brne	.-88     	; 0x3652 <__vector_17+0x5a>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    36aa:	91 b3       	in	r25, 0x11	; 17
    36ac:	80 91 94 09 	lds	r24, 0x0994
    36b0:	8a 7c       	andi	r24, 0xCA	; 202
    36b2:	95 73       	andi	r25, 0x35	; 53
    36b4:	89 2b       	or	r24, r25
    36b6:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    36b8:	81 b3       	in	r24, 0x11	; 17
    36ba:	8a 7c       	andi	r24, 0xCA	; 202
    36bc:	90 91 32 08 	lds	r25, 0x0832
    36c0:	89 2b       	or	r24, r25
    36c2:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    36c4:	80 91 7f 09 	lds	r24, 0x097F
    36c8:	88 0f       	add	r24, r24
    36ca:	84 50       	subi	r24, 0x04	; 4
    36cc:	81 95       	neg	r24
    36ce:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    36d2:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	90 93 48 08 	sts	0x0848, r25
    36dc:	80 93 47 08 	sts	0x0847, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    36e0:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    36e2:	e0 91 30 08 	lds	r30, 0x0830
    36e6:	f0 91 31 08 	lds	r31, 0x0831
    36ea:	30 97       	sbiw	r30, 0x00	; 0
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <__vector_17+0xf8>
    36ee:	cc c1       	rjmp	.+920    	; 0x3a88 <__vector_17+0x490>

    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    36f0:	80 89       	ldd	r24, Z+16	; 0x10
    36f2:	80 93 94 09 	sts	0x0994, r24
    out_bits = 0;
    36f6:	10 92 32 08 	sts	0x0832, r1
    counter_x += current_block->steps_x;
    36fa:	20 91 33 08 	lds	r18, 0x0833
    36fe:	30 91 34 08 	lds	r19, 0x0834
    3702:	40 91 35 08 	lds	r20, 0x0835
    3706:	50 91 36 08 	lds	r21, 0x0836
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	a2 81       	ldd	r26, Z+2	; 0x02
    3710:	b3 81       	ldd	r27, Z+3	; 0x03
    3712:	28 0f       	add	r18, r24
    3714:	39 1f       	adc	r19, r25
    3716:	4a 1f       	adc	r20, r26
    3718:	5b 1f       	adc	r21, r27
    371a:	20 93 33 08 	sts	0x0833, r18
    371e:	30 93 34 08 	sts	0x0834, r19
    3722:	40 93 35 08 	sts	0x0835, r20
    3726:	50 93 36 08 	sts	0x0836, r21
    if (counter_x > 0) {
    372a:	12 16       	cp	r1, r18
    372c:	13 06       	cpc	r1, r19
    372e:	14 06       	cpc	r1, r20
    3730:	15 06       	cpc	r1, r21
    3732:	0c f0       	brlt	.+2      	; 0x3736 <__vector_17+0x13e>
    3734:	47 c1       	rjmp	.+654    	; 0x39c4 <__vector_17+0x3cc>
      out_bits |= (1<<X_STEP_BIT);
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	80 93 32 08 	sts	0x0832, r24
      counter_x -= current_block->step_event_count;
    373c:	e1 88       	ldd	r14, Z+17	; 0x11
    373e:	f2 88       	ldd	r15, Z+18	; 0x12
    3740:	03 89       	ldd	r16, Z+19	; 0x13
    3742:	14 89       	ldd	r17, Z+20	; 0x14
    3744:	2e 19       	sub	r18, r14
    3746:	3f 09       	sbc	r19, r15
    3748:	40 0b       	sbc	r20, r16
    374a:	51 0b       	sbc	r21, r17
    374c:	20 93 33 08 	sts	0x0833, r18
    3750:	30 93 34 08 	sts	0x0834, r19
    3754:	40 93 35 08 	sts	0x0835, r20
    3758:	50 93 36 08 	sts	0x0836, r21
    }
    counter_y += current_block->steps_y;
    375c:	20 91 37 08 	lds	r18, 0x0837
    3760:	30 91 38 08 	lds	r19, 0x0838
    3764:	40 91 39 08 	lds	r20, 0x0839
    3768:	50 91 3a 08 	lds	r21, 0x083A
    376c:	84 81       	ldd	r24, Z+4	; 0x04
    376e:	95 81       	ldd	r25, Z+5	; 0x05
    3770:	a6 81       	ldd	r26, Z+6	; 0x06
    3772:	b7 81       	ldd	r27, Z+7	; 0x07
    3774:	28 0f       	add	r18, r24
    3776:	39 1f       	adc	r19, r25
    3778:	4a 1f       	adc	r20, r26
    377a:	5b 1f       	adc	r21, r27
    377c:	20 93 37 08 	sts	0x0837, r18
    3780:	30 93 38 08 	sts	0x0838, r19
    3784:	40 93 39 08 	sts	0x0839, r20
    3788:	50 93 3a 08 	sts	0x083A, r21
    if (counter_y > 0) {
    378c:	12 16       	cp	r1, r18
    378e:	13 06       	cpc	r1, r19
    3790:	14 06       	cpc	r1, r20
    3792:	15 06       	cpc	r1, r21
    3794:	8c f4       	brge	.+34     	; 0x37b8 <__vector_17+0x1c0>
      out_bits |= (1<<Y_STEP_BIT);
    3796:	80 91 32 08 	lds	r24, 0x0832
    379a:	84 60       	ori	r24, 0x04	; 4
    379c:	80 93 32 08 	sts	0x0832, r24
      counter_y -= current_block->step_event_count;
    37a0:	2e 19       	sub	r18, r14
    37a2:	3f 09       	sbc	r19, r15
    37a4:	40 0b       	sbc	r20, r16
    37a6:	51 0b       	sbc	r21, r17
    37a8:	20 93 37 08 	sts	0x0837, r18
    37ac:	30 93 38 08 	sts	0x0838, r19
    37b0:	40 93 39 08 	sts	0x0839, r20
    37b4:	50 93 3a 08 	sts	0x083A, r21
    }
    counter_z += current_block->steps_z;
    37b8:	20 91 3b 08 	lds	r18, 0x083B
    37bc:	30 91 3c 08 	lds	r19, 0x083C
    37c0:	40 91 3d 08 	lds	r20, 0x083D
    37c4:	50 91 3e 08 	lds	r21, 0x083E
    37c8:	80 85       	ldd	r24, Z+8	; 0x08
    37ca:	91 85       	ldd	r25, Z+9	; 0x09
    37cc:	a2 85       	ldd	r26, Z+10	; 0x0a
    37ce:	b3 85       	ldd	r27, Z+11	; 0x0b
    37d0:	28 0f       	add	r18, r24
    37d2:	39 1f       	adc	r19, r25
    37d4:	4a 1f       	adc	r20, r26
    37d6:	5b 1f       	adc	r21, r27
    37d8:	20 93 3b 08 	sts	0x083B, r18
    37dc:	30 93 3c 08 	sts	0x083C, r19
    37e0:	40 93 3d 08 	sts	0x083D, r20
    37e4:	50 93 3e 08 	sts	0x083E, r21
    if (counter_z > 0) {
    37e8:	12 16       	cp	r1, r18
    37ea:	13 06       	cpc	r1, r19
    37ec:	14 06       	cpc	r1, r20
    37ee:	15 06       	cpc	r1, r21
    37f0:	8c f4       	brge	.+34     	; 0x3814 <__vector_17+0x21c>
      out_bits |= (1<<Z_STEP_BIT);
    37f2:	80 91 32 08 	lds	r24, 0x0832
    37f6:	80 61       	ori	r24, 0x10	; 16
    37f8:	80 93 32 08 	sts	0x0832, r24
      counter_z -= current_block->step_event_count;
    37fc:	2e 19       	sub	r18, r14
    37fe:	3f 09       	sbc	r19, r15
    3800:	40 0b       	sbc	r20, r16
    3802:	51 0b       	sbc	r21, r17
    3804:	20 93 3b 08 	sts	0x083B, r18
    3808:	30 93 3c 08 	sts	0x083C, r19
    380c:	40 93 3d 08 	sts	0x083D, r20
    3810:	50 93 3e 08 	sts	0x083E, r21
    }
    counter_c += current_block->steps_c;
    3814:	20 91 3f 08 	lds	r18, 0x083F
    3818:	30 91 40 08 	lds	r19, 0x0840
    381c:	40 91 41 08 	lds	r20, 0x0841
    3820:	50 91 42 08 	lds	r21, 0x0842
    3824:	84 85       	ldd	r24, Z+12	; 0x0c
    3826:	95 85       	ldd	r25, Z+13	; 0x0d
    3828:	a6 85       	ldd	r26, Z+14	; 0x0e
    382a:	b7 85       	ldd	r27, Z+15	; 0x0f
    382c:	28 0f       	add	r18, r24
    382e:	39 1f       	adc	r19, r25
    3830:	4a 1f       	adc	r20, r26
    3832:	5b 1f       	adc	r21, r27
    3834:	20 93 3f 08 	sts	0x083F, r18
    3838:	30 93 40 08 	sts	0x0840, r19
    383c:	40 93 41 08 	sts	0x0841, r20
    3840:	50 93 42 08 	sts	0x0842, r21
    if (counter_c > 0) {
    3844:	12 16       	cp	r1, r18
    3846:	13 06       	cpc	r1, r19
    3848:	14 06       	cpc	r1, r20
    384a:	15 06       	cpc	r1, r21
    384c:	94 f4       	brge	.+36     	; 0x3872 <__vector_17+0x27a>
      out_bits |= (1<<C_STEP_BIT);
    384e:	80 91 32 08 	lds	r24, 0x0832
    3852:	80 62       	ori	r24, 0x20	; 32
    3854:	80 93 32 08 	sts	0x0832, r24
      counter_c -= current_block->step_event_count;
    3858:	2e 19       	sub	r18, r14
    385a:	3f 09       	sbc	r19, r15
    385c:	40 0b       	sbc	r20, r16
    385e:	51 0b       	sbc	r21, r17
    3860:	20 93 3f 08 	sts	0x083F, r18
    3864:	30 93 40 08 	sts	0x0840, r19
    3868:	40 93 41 08 	sts	0x0841, r20
    386c:	50 93 42 08 	sts	0x0842, r21

	//pulse C axis (head)
		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    3870:	46 9a       	sbi	0x08, 6	; 8



    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3872:	80 91 43 08 	lds	r24, 0x0843
    3876:	90 91 44 08 	lds	r25, 0x0844
    387a:	a0 91 45 08 	lds	r26, 0x0845
    387e:	b0 91 46 08 	lds	r27, 0x0846
    3882:	01 96       	adiw	r24, 0x01	; 1
    3884:	a1 1d       	adc	r26, r1
    3886:	b1 1d       	adc	r27, r1
    3888:	80 93 43 08 	sts	0x0843, r24
    388c:	90 93 44 08 	sts	0x0844, r25
    3890:	a0 93 45 08 	sts	0x0845, r26
    3894:	b0 93 46 08 	sts	0x0846, r27
    if (step_events_completed >= current_block->step_event_count) {
    3898:	8e 15       	cp	r24, r14
    389a:	9f 05       	cpc	r25, r15
    389c:	a0 07       	cpc	r26, r16
    389e:	b1 07       	cpc	r27, r17
    38a0:	08 f0       	brcs	.+2      	; 0x38a4 <__vector_17+0x2ac>
    38a2:	95 c0       	rjmp	.+298    	; 0x39ce <__vector_17+0x3d6>
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
    38a4:	80 91 32 08 	lds	r24, 0x0832
    38a8:	95 e3       	ldi	r25, 0x35	; 53
    38aa:	89 27       	eor	r24, r25
    38ac:	80 93 32 08 	sts	0x0832, r24
  dir_bits ^= DIRECTION_INVERT_MASK;
    38b0:	80 91 94 09 	lds	r24, 0x0994
    38b4:	9a ec       	ldi	r25, 0xCA	; 202
    38b6:	89 27       	eor	r24, r25
    38b8:	80 93 94 09 	sts	0x0994, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    38bc:	20 91 49 08 	lds	r18, 0x0849
    38c0:	30 91 4a 08 	lds	r19, 0x084A
    38c4:	40 91 4b 08 	lds	r20, 0x084B
    38c8:	50 91 4c 08 	lds	r21, 0x084C
    38cc:	80 91 4d 08 	lds	r24, 0x084D
    38d0:	90 91 4e 08 	lds	r25, 0x084E
    38d4:	a0 91 4f 08 	lds	r26, 0x084F
    38d8:	b0 91 50 08 	lds	r27, 0x0850
    38dc:	28 0f       	add	r18, r24
    38de:	39 1f       	adc	r19, r25
    38e0:	4a 1f       	adc	r20, r26
    38e2:	5b 1f       	adc	r21, r27
    38e4:	20 93 4d 08 	sts	0x084D, r18
    38e8:	30 93 4e 08 	sts	0x084E, r19
    38ec:	40 93 4f 08 	sts	0x084F, r20
    38f0:	50 93 50 08 	sts	0x0850, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    38f4:	21 38       	cpi	r18, 0x81	; 129
    38f6:	0a e1       	ldi	r16, 0x1A	; 26
    38f8:	30 07       	cpc	r19, r16
    38fa:	06 e0       	ldi	r16, 0x06	; 6
    38fc:	40 07       	cpc	r20, r16
    38fe:	00 e0       	ldi	r16, 0x00	; 0
    3900:	50 07       	cpc	r21, r16
    3902:	08 f4       	brcc	.+2      	; 0x3906 <__vector_17+0x30e>
    3904:	5a c0       	rjmp	.+180    	; 0x39ba <__vector_17+0x3c2>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    3906:	20 58       	subi	r18, 0x80	; 128
    3908:	3a 41       	sbci	r19, 0x1A	; 26
    390a:	46 40       	sbci	r20, 0x06	; 6
    390c:	50 40       	sbci	r21, 0x00	; 0
    390e:	20 93 4d 08 	sts	0x084D, r18
    3912:	30 93 4e 08 	sts	0x084E, r19
    3916:	40 93 4f 08 	sts	0x084F, r20
    391a:	50 93 50 08 	sts	0x0850, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static inline void trapezoid_generator_tick() {     
  if (current_block) {
    391e:	e0 91 30 08 	lds	r30, 0x0830
    3922:	f0 91 31 08 	lds	r31, 0x0831
    3926:	30 97       	sbiw	r30, 0x00	; 0
    3928:	09 f4       	brne	.+2      	; 0x392c <__vector_17+0x334>
    392a:	47 c0       	rjmp	.+142    	; 0x39ba <__vector_17+0x3c2>
    if (step_events_completed < current_block->accelerate_until) {
    392c:	20 91 43 08 	lds	r18, 0x0843
    3930:	30 91 44 08 	lds	r19, 0x0844
    3934:	40 91 45 08 	lds	r20, 0x0845
    3938:	50 91 46 08 	lds	r21, 0x0846
    393c:	ef 5b       	subi	r30, 0xBF	; 191
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	a2 81       	ldd	r26, Z+2	; 0x02
    3946:	b3 81       	ldd	r27, Z+3	; 0x03
    3948:	e1 54       	subi	r30, 0x41	; 65
    394a:	f0 40       	sbci	r31, 0x00	; 0
    394c:	28 17       	cp	r18, r24
    394e:	39 07       	cpc	r19, r25
    3950:	4a 07       	cpc	r20, r26
    3952:	5b 07       	cpc	r21, r27
    3954:	08 f0       	brcs	.+2      	; 0x3958 <__vector_17+0x360>
    3956:	42 c0       	rjmp	.+132    	; 0x39dc <__vector_17+0x3e4>
      trapezoid_adjusted_rate += current_block->rate_delta;
    3958:	fd 96       	adiw	r30, 0x3d	; 61
    395a:	80 81       	ld	r24, Z
    395c:	91 81       	ldd	r25, Z+1	; 0x01
    395e:	a2 81       	ldd	r26, Z+2	; 0x02
    3960:	b3 81       	ldd	r27, Z+3	; 0x03
    3962:	fd 97       	sbiw	r30, 0x3d	; 61
    3964:	20 91 51 08 	lds	r18, 0x0851
    3968:	30 91 52 08 	lds	r19, 0x0852
    396c:	40 91 53 08 	lds	r20, 0x0853
    3970:	50 91 54 08 	lds	r21, 0x0854
    3974:	28 0f       	add	r18, r24
    3976:	39 1f       	adc	r19, r25
    3978:	4a 1f       	adc	r20, r26
    397a:	5b 1f       	adc	r21, r27
    397c:	20 93 51 08 	sts	0x0851, r18
    3980:	30 93 52 08 	sts	0x0852, r19
    3984:	40 93 53 08 	sts	0x0853, r20
    3988:	50 93 54 08 	sts	0x0854, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    398c:	85 89       	ldd	r24, Z+21	; 0x15
    398e:	96 89       	ldd	r25, Z+22	; 0x16
    3990:	a7 89       	ldd	r26, Z+23	; 0x17
    3992:	b0 8d       	ldd	r27, Z+24	; 0x18
    3994:	82 17       	cp	r24, r18
    3996:	93 07       	cpc	r25, r19
    3998:	a4 07       	cpc	r26, r20
    399a:	b5 07       	cpc	r27, r21
    399c:	50 f4       	brcc	.+20     	; 0x39b2 <__vector_17+0x3ba>
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
        trapezoid_adjusted_rate -= current_block->rate_delta;
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
        trapezoid_adjusted_rate = current_block->final_rate;
    399e:	80 93 51 08 	sts	0x0851, r24
    39a2:	90 93 52 08 	sts	0x0852, r25
    39a6:	a0 93 53 08 	sts	0x0853, r26
    39aa:	b0 93 54 08 	sts	0x0854, r27
    39ae:	9c 01       	movw	r18, r24
    39b0:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    39b2:	ca 01       	movw	r24, r20
    39b4:	b9 01       	movw	r22, r18
    39b6:	0e 94 c1 18 	call	0x3182	; 0x3182 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    39ba:	10 92 48 08 	sts	0x0848, r1
    39be:	10 92 47 08 	sts	0x0847, r1
    39c2:	47 ce       	rjmp	.-882    	; 0x3652 <__vector_17+0x5a>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    39c4:	e1 88       	ldd	r14, Z+17	; 0x11
    39c6:	f2 88       	ldd	r15, Z+18	; 0x12
    39c8:	03 89       	ldd	r16, Z+19	; 0x13
    39ca:	14 89       	ldd	r17, Z+20	; 0x14
    39cc:	c7 ce       	rjmp	.-626    	; 0x375c <__vector_17+0x164>

    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    39ce:	10 92 31 08 	sts	0x0831, r1
    39d2:	10 92 30 08 	sts	0x0830, r1
      plan_discard_current_block();
    39d6:	0e 94 b5 0b 	call	0x176a	; 0x176a <plan_discard_current_block>
    39da:	64 cf       	rjmp	.-312    	; 0x38a4 <__vector_17+0x2ac>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    39dc:	eb 5b       	subi	r30, 0xBB	; 187
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	80 81       	ld	r24, Z
    39e2:	91 81       	ldd	r25, Z+1	; 0x01
    39e4:	a2 81       	ldd	r26, Z+2	; 0x02
    39e6:	b3 81       	ldd	r27, Z+3	; 0x03
    39e8:	e5 54       	subi	r30, 0x45	; 69
    39ea:	f0 40       	sbci	r31, 0x00	; 0
    39ec:	82 17       	cp	r24, r18
    39ee:	93 07       	cpc	r25, r19
    39f0:	a4 07       	cpc	r26, r20
    39f2:	b5 07       	cpc	r27, r21
    39f4:	70 f5       	brcc	.+92     	; 0x3a52 <__vector_17+0x45a>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    39f6:	fd 96       	adiw	r30, 0x3d	; 61
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	fd 97       	sbiw	r30, 0x3d	; 61
    3a02:	20 91 51 08 	lds	r18, 0x0851
    3a06:	30 91 52 08 	lds	r19, 0x0852
    3a0a:	40 91 53 08 	lds	r20, 0x0853
    3a0e:	50 91 54 08 	lds	r21, 0x0854
    3a12:	62 17       	cp	r22, r18
    3a14:	73 07       	cpc	r23, r19
    3a16:	84 07       	cpc	r24, r20
    3a18:	95 07       	cpc	r25, r21
    3a1a:	80 f4       	brcc	.+32     	; 0x3a3c <__vector_17+0x444>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3a1c:	79 01       	movw	r14, r18
    3a1e:	8a 01       	movw	r16, r20
    3a20:	e6 1a       	sub	r14, r22
    3a22:	f7 0a       	sbc	r15, r23
    3a24:	08 0b       	sbc	r16, r24
    3a26:	19 0b       	sbc	r17, r25
    3a28:	e0 92 51 08 	sts	0x0851, r14
    3a2c:	f0 92 52 08 	sts	0x0852, r15
    3a30:	00 93 53 08 	sts	0x0853, r16
    3a34:	10 93 54 08 	sts	0x0854, r17
    3a38:	a8 01       	movw	r20, r16
    3a3a:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    3a3c:	81 ad       	ldd	r24, Z+57	; 0x39
    3a3e:	92 ad       	ldd	r25, Z+58	; 0x3a
    3a40:	a3 ad       	ldd	r26, Z+59	; 0x3b
    3a42:	b4 ad       	ldd	r27, Z+60	; 0x3c
    3a44:	28 17       	cp	r18, r24
    3a46:	39 07       	cpc	r19, r25
    3a48:	4a 07       	cpc	r20, r26
    3a4a:	5b 07       	cpc	r21, r27
    3a4c:	08 f0       	brcs	.+2      	; 0x3a50 <__vector_17+0x458>
    3a4e:	b1 cf       	rjmp	.-158    	; 0x39b2 <__vector_17+0x3ba>
    3a50:	a6 cf       	rjmp	.-180    	; 0x399e <__vector_17+0x3a6>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3a52:	25 89       	ldd	r18, Z+21	; 0x15
    3a54:	36 89       	ldd	r19, Z+22	; 0x16
    3a56:	47 89       	ldd	r20, Z+23	; 0x17
    3a58:	50 8d       	ldd	r21, Z+24	; 0x18
    3a5a:	80 91 51 08 	lds	r24, 0x0851
    3a5e:	90 91 52 08 	lds	r25, 0x0852
    3a62:	a0 91 53 08 	lds	r26, 0x0853
    3a66:	b0 91 54 08 	lds	r27, 0x0854
    3a6a:	28 17       	cp	r18, r24
    3a6c:	39 07       	cpc	r19, r25
    3a6e:	4a 07       	cpc	r20, r26
    3a70:	5b 07       	cpc	r21, r27
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <__vector_17+0x47e>
    3a74:	a2 cf       	rjmp	.-188    	; 0x39ba <__vector_17+0x3c2>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3a76:	20 93 51 08 	sts	0x0851, r18
    3a7a:	30 93 52 08 	sts	0x0852, r19
    3a7e:	40 93 53 08 	sts	0x0853, r20
    3a82:	50 93 54 08 	sts	0x0854, r21
    3a86:	95 cf       	rjmp	.-214    	; 0x39b2 <__vector_17+0x3ba>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    3a88:	0e 94 ce 0b 	call	0x179c	; 0x179c <plan_get_current_block>
    3a8c:	ec 01       	movw	r28, r24
    3a8e:	90 93 31 08 	sts	0x0831, r25
    3a92:	80 93 30 08 	sts	0x0830, r24
    if (current_block != NULL) {
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	09 f4       	brne	.+2      	; 0x3a9c <__vector_17+0x4a4>
    3a9a:	52 c0       	rjmp	.+164    	; 0x3b40 <__vector_17+0x548>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    3a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    3aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    3aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    3aa4:	60 93 51 08 	sts	0x0851, r22
    3aa8:	70 93 52 08 	sts	0x0852, r23
    3aac:	80 93 53 08 	sts	0x0853, r24
    3ab0:	90 93 54 08 	sts	0x0854, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    3ab4:	10 92 4d 08 	sts	0x084D, r1
    3ab8:	10 92 4e 08 	sts	0x084E, r1
    3abc:	10 92 4f 08 	sts	0x084F, r1
    3ac0:	10 92 50 08 	sts	0x0850, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    3ac4:	0e 94 c1 18 	call	0x3182	; 0x3182 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    3ac8:	89 89       	ldd	r24, Y+17	; 0x11
    3aca:	9a 89       	ldd	r25, Y+18	; 0x12
    3acc:	ab 89       	ldd	r26, Y+19	; 0x13
    3ace:	bc 89       	ldd	r27, Y+20	; 0x14
    3ad0:	b5 95       	asr	r27
    3ad2:	a7 95       	ror	r26
    3ad4:	97 95       	ror	r25
    3ad6:	87 95       	ror	r24
    3ad8:	b0 95       	com	r27
    3ada:	a0 95       	com	r26
    3adc:	90 95       	com	r25
    3ade:	81 95       	neg	r24
    3ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae2:	af 4f       	sbci	r26, 0xFF	; 255
    3ae4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ae6:	80 93 33 08 	sts	0x0833, r24
    3aea:	90 93 34 08 	sts	0x0834, r25
    3aee:	a0 93 35 08 	sts	0x0835, r26
    3af2:	b0 93 36 08 	sts	0x0836, r27
      counter_y = counter_x;
    3af6:	80 93 37 08 	sts	0x0837, r24
    3afa:	90 93 38 08 	sts	0x0838, r25
    3afe:	a0 93 39 08 	sts	0x0839, r26
    3b02:	b0 93 3a 08 	sts	0x083A, r27
      counter_z = counter_x;
    3b06:	80 93 3b 08 	sts	0x083B, r24
    3b0a:	90 93 3c 08 	sts	0x083C, r25
    3b0e:	a0 93 3d 08 	sts	0x083D, r26
    3b12:	b0 93 3e 08 	sts	0x083E, r27
      counter_c = counter_x;
    3b16:	80 93 3f 08 	sts	0x083F, r24
    3b1a:	90 93 40 08 	sts	0x0840, r25
    3b1e:	a0 93 41 08 	sts	0x0841, r26
    3b22:	b0 93 42 08 	sts	0x0842, r27
      step_events_completed = 0;
    3b26:	10 92 43 08 	sts	0x0843, r1
    3b2a:	10 92 44 08 	sts	0x0844, r1
    3b2e:	10 92 45 08 	sts	0x0845, r1
    3b32:	10 92 46 08 	sts	0x0846, r1
    3b36:	e0 91 30 08 	lds	r30, 0x0830
    3b3a:	f0 91 31 08 	lds	r31, 0x0831
    3b3e:	d8 cd       	rjmp	.-1104   	; 0x36f0 <__vector_17+0xf8>
    } else {

      DISABLE_STEPPER_DRIVER_INTERRUPT();
    3b40:	80 91 6f 00 	lds	r24, 0x006F
    3b44:	8d 7f       	andi	r24, 0xFD	; 253
    3b46:	80 93 6f 00 	sts	0x006F, r24

		// set ack to host, move has finished
	  ackHost = 'X';
    3b4a:	88 e5       	ldi	r24, 0x58	; 88
    3b4c:	80 93 2e 08 	sts	0x082E, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    3b50:	10 92 32 08 	sts	0x0832, r1
    3b54:	a7 ce       	rjmp	.-690    	; 0x38a4 <__vector_17+0x2ac>

00003b56 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3b56:	ef 92       	push	r14
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	7b 01       	movw	r14, r22
    3b60:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    3b62:	22 e0       	ldi	r18, 0x02	; 2
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 e0       	ldi	r20, 0x00	; 0
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	0e 94 25 30 	call	0x604a	; 0x604a <__divmodsi4>
    3b6e:	20 5c       	subi	r18, 0xC0	; 192
    3b70:	3d 4b       	sbci	r19, 0xBD	; 189
    3b72:	40 4f       	sbci	r20, 0xF0	; 240
    3b74:	5f 4f       	sbci	r21, 0xFF	; 255
    3b76:	ca 01       	movw	r24, r20
    3b78:	b9 01       	movw	r22, r18
    3b7a:	a8 01       	movw	r20, r16
    3b7c:	97 01       	movw	r18, r14
    3b7e:	0e 94 03 30 	call	0x6006	; 0x6006 <__udivmodsi4>
    3b82:	c9 01       	movw	r24, r18
    3b84:	da 01       	movw	r26, r20
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	a1 09       	sbc	r26, r1
    3b8a:	b1 09       	sbc	r27, r1
    3b8c:	29 2f       	mov	r18, r25
    3b8e:	3a 2f       	mov	r19, r26
    3b90:	4b 2f       	mov	r20, r27
    3b92:	55 27       	eor	r21, r21
    3b94:	01 96       	adiw	r24, 0x01	; 1
    3b96:	a1 1d       	adc	r26, r1
    3b98:	b1 1d       	adc	r27, r1
    3b9a:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3b9e:	81 50       	subi	r24, 0x01	; 1
    3ba0:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3ba4:	e0 ec       	ldi	r30, 0xC0	; 192
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	80 81       	ld	r24, Z
    3baa:	8d 7f       	andi	r24, 0xFD	; 253
    3bac:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    3bae:	e1 ec       	ldi	r30, 0xC1	; 193
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	80 81       	ld	r24, Z
    3bb4:	80 61       	ori	r24, 0x10	; 16
    3bb6:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3bb8:	80 81       	ld	r24, Z
    3bba:	88 60       	ori	r24, 0x08	; 8
    3bbc:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3bbe:	80 81       	ld	r24, Z
    3bc0:	80 68       	ori	r24, 0x80	; 128
    3bc2:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	ff 90       	pop	r15
    3bca:	ef 90       	pop	r14
    3bcc:	08 95       	ret

00003bce <serialWrite>:

void serialWrite(unsigned char c)
{
    3bce:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3bd0:	80 91 c0 00 	lds	r24, 0x00C0
    3bd4:	85 ff       	sbrs	r24, 5
    3bd6:	fc cf       	rjmp	.-8      	; 0x3bd0 <serialWrite+0x2>
		;
	UDR0 = c;
    3bd8:	90 93 c6 00 	sts	0x00C6, r25
}
    3bdc:	08 95       	ret

00003bde <serialAvailable>:

int serialAvailable()
{
    3bde:	80 91 55 08 	lds	r24, 0x0855
    3be2:	90 91 56 08 	lds	r25, 0x0856
    3be6:	80 50       	subi	r24, 0x00	; 0
    3be8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bea:	20 91 57 08 	lds	r18, 0x0857
    3bee:	30 91 58 08 	lds	r19, 0x0858
    3bf2:	82 1b       	sub	r24, r18
    3bf4:	93 0b       	sbc	r25, r19
    3bf6:	60 e0       	ldi	r22, 0x00	; 0
    3bf8:	71 e0       	ldi	r23, 0x01	; 1
    3bfa:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3bfe:	08 95       	ret

00003c00 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3c00:	40 91 57 08 	lds	r20, 0x0857
    3c04:	50 91 58 08 	lds	r21, 0x0858
    3c08:	80 91 55 08 	lds	r24, 0x0855
    3c0c:	90 91 56 08 	lds	r25, 0x0856
    3c10:	84 17       	cp	r24, r20
    3c12:	95 07       	cpc	r25, r21
    3c14:	89 f0       	breq	.+34     	; 0x3c38 <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3c16:	fa 01       	movw	r30, r20
    3c18:	e7 5a       	subi	r30, 0xA7	; 167
    3c1a:	f7 4f       	sbci	r31, 0xF7	; 247
    3c1c:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3c1e:	ca 01       	movw	r24, r20
    3c20:	01 96       	adiw	r24, 0x01	; 1
    3c22:	60 e0       	ldi	r22, 0x00	; 0
    3c24:	71 e0       	ldi	r23, 0x01	; 1
    3c26:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
    3c2a:	90 93 58 08 	sts	0x0858, r25
    3c2e:	80 93 57 08 	sts	0x0857, r24
		return c;
    3c32:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3c34:	c9 01       	movw	r24, r18
    3c36:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3c38:	2f ef       	ldi	r18, 0xFF	; 255
    3c3a:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3c3c:	c9 01       	movw	r24, r18
    3c3e:	08 95       	ret

00003c40 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3c40:	80 91 57 08 	lds	r24, 0x0857
    3c44:	90 91 58 08 	lds	r25, 0x0858
    3c48:	90 93 56 08 	sts	0x0856, r25
    3c4c:	80 93 55 08 	sts	0x0855, r24
}
    3c50:	08 95       	ret

00003c52 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3c52:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c54:	80 91 c0 00 	lds	r24, 0x00C0
    3c58:	85 ff       	sbrs	r24, 5
    3c5a:	fc cf       	rjmp	.-8      	; 0x3c54 <printByte+0x2>
		;
	UDR0 = c;
    3c5c:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3c60:	08 95       	ret

00003c62 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3c62:	fc 01       	movw	r30, r24
	while (*s)
    3c64:	90 81       	ld	r25, Z
    3c66:	99 23       	and	r25, r25
    3c68:	51 f0       	breq	.+20     	; 0x3c7e <printString+0x1c>
		printByte(*s++);
    3c6a:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c6c:	80 91 c0 00 	lds	r24, 0x00C0
    3c70:	85 ff       	sbrs	r24, 5
    3c72:	fc cf       	rjmp	.-8      	; 0x3c6c <printString+0xa>
		;
	UDR0 = c;
    3c74:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3c78:	90 81       	ld	r25, Z
    3c7a:	99 23       	and	r25, r25
    3c7c:	b1 f7       	brne	.-20     	; 0x3c6a <printString+0x8>
    3c7e:	08 95       	ret

00003c80 <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3c80:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3c82:	94 91       	lpm	r25, Z+
    3c84:	99 23       	and	r25, r25
    3c86:	51 f0       	breq	.+20     	; 0x3c9c <printPgmString+0x1c>
    3c88:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c8a:	80 91 c0 00 	lds	r24, 0x00C0
    3c8e:	85 ff       	sbrs	r24, 5
    3c90:	fc cf       	rjmp	.-8      	; 0x3c8a <printPgmString+0xa>
		;
	UDR0 = c;
    3c92:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3c96:	94 91       	lpm	r25, Z+
    3c98:	99 23       	and	r25, r25
    3c9a:	b1 f7       	brne	.-20     	; 0x3c88 <printPgmString+0x8>
    3c9c:	08 95       	ret

00003c9e <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3c9e:	2f 92       	push	r2
    3ca0:	3f 92       	push	r3
    3ca2:	4f 92       	push	r4
    3ca4:	5f 92       	push	r5
    3ca6:	6f 92       	push	r6
    3ca8:	7f 92       	push	r7
    3caa:	8f 92       	push	r8
    3cac:	9f 92       	push	r9
    3cae:	af 92       	push	r10
    3cb0:	bf 92       	push	r11
    3cb2:	cf 92       	push	r12
    3cb4:	df 92       	push	r13
    3cb6:	ef 92       	push	r14
    3cb8:	ff 92       	push	r15
    3cba:	0f 93       	push	r16
    3cbc:	1f 93       	push	r17
    3cbe:	df 93       	push	r29
    3cc0:	cf 93       	push	r28
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
    3cc6:	a0 97       	sbiw	r28, 0x20	; 32
    3cc8:	0f b6       	in	r0, 0x3f	; 63
    3cca:	f8 94       	cli
    3ccc:	de bf       	out	0x3e, r29	; 62
    3cce:	0f be       	out	0x3f, r0	; 63
    3cd0:	cd bf       	out	0x3d, r28	; 61
    3cd2:	6b 01       	movw	r12, r22
    3cd4:	7c 01       	movw	r14, r24
    3cd6:	29 01       	movw	r4, r18
    3cd8:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3cda:	61 15       	cp	r22, r1
    3cdc:	71 05       	cpc	r23, r1
    3cde:	81 05       	cpc	r24, r1
    3ce0:	91 05       	cpc	r25, r1
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <printIntegerInBase+0x48>
    3ce4:	50 c0       	rjmp	.+160    	; 0x3d86 <printIntegerInBase+0xe8>
		printByte('0');
		return;
    3ce6:	88 24       	eor	r8, r8
    3ce8:	99 24       	eor	r9, r9
    3cea:	54 01       	movw	r10, r8
    3cec:	1e 01       	movw	r2, r28
    3cee:	08 94       	sec
    3cf0:	21 1c       	adc	r2, r1
    3cf2:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3cf4:	81 01       	movw	r16, r2
    3cf6:	08 0d       	add	r16, r8
    3cf8:	19 1d       	adc	r17, r9
    3cfa:	c7 01       	movw	r24, r14
    3cfc:	b6 01       	movw	r22, r12
    3cfe:	a3 01       	movw	r20, r6
    3d00:	92 01       	movw	r18, r4
    3d02:	0e 94 03 30 	call	0x6006	; 0x6006 <__udivmodsi4>
    3d06:	f8 01       	movw	r30, r16
    3d08:	60 83       	st	Z, r22
    3d0a:	08 94       	sec
    3d0c:	81 1c       	adc	r8, r1
    3d0e:	91 1c       	adc	r9, r1
    3d10:	a1 1c       	adc	r10, r1
    3d12:	b1 1c       	adc	r11, r1
		n /= base;
    3d14:	c7 01       	movw	r24, r14
    3d16:	b6 01       	movw	r22, r12
    3d18:	a3 01       	movw	r20, r6
    3d1a:	92 01       	movw	r18, r4
    3d1c:	0e 94 03 30 	call	0x6006	; 0x6006 <__udivmodsi4>
    3d20:	c9 01       	movw	r24, r18
    3d22:	da 01       	movw	r26, r20
    3d24:	6c 01       	movw	r12, r24
    3d26:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3d28:	c1 14       	cp	r12, r1
    3d2a:	d1 04       	cpc	r13, r1
    3d2c:	e1 04       	cpc	r14, r1
    3d2e:	f1 04       	cpc	r15, r1
    3d30:	09 f7       	brne	.-62     	; 0x3cf4 <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3d32:	81 14       	cp	r8, r1
    3d34:	91 04       	cpc	r9, r1
    3d36:	a1 04       	cpc	r10, r1
    3d38:	b1 04       	cpc	r11, r1
    3d3a:	61 f1       	breq	.+88     	; 0x3d94 <printIntegerInBase+0xf6>
    3d3c:	91 01       	movw	r18, r2
    3d3e:	28 0d       	add	r18, r8
    3d40:	39 1d       	adc	r19, r9
    3d42:	d5 01       	movw	r26, r10
    3d44:	c4 01       	movw	r24, r8
    3d46:	01 97       	sbiw	r24, 0x01	; 1
    3d48:	a1 09       	sbc	r26, r1
    3d4a:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    3d4c:	ac 01       	movw	r20, r24
    3d4e:	48 19       	sub	r20, r8
    3d50:	59 09       	sbc	r21, r9
    3d52:	fa 01       	movw	r30, r20
    3d54:	e2 0f       	add	r30, r18
    3d56:	f3 1f       	adc	r31, r19
    3d58:	e0 81       	ld	r30, Z
    3d5a:	ea 30       	cpi	r30, 0x0A	; 10
    3d5c:	90 f4       	brcc	.+36     	; 0x3d82 <printIntegerInBase+0xe4>
    3d5e:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3d60:	80 91 c0 00 	lds	r24, 0x00C0
    3d64:	85 ff       	sbrs	r24, 5
    3d66:	fc cf       	rjmp	.-8      	; 0x3d60 <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    3d68:	e0 93 c6 00 	sts	0x00C6, r30
    3d6c:	21 50       	subi	r18, 0x01	; 1
    3d6e:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3d70:	22 16       	cp	r2, r18
    3d72:	33 06       	cpc	r3, r19
    3d74:	79 f0       	breq	.+30     	; 0x3d94 <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    3d76:	fa 01       	movw	r30, r20
    3d78:	e2 0f       	add	r30, r18
    3d7a:	f3 1f       	adc	r31, r19
    3d7c:	e0 81       	ld	r30, Z
    3d7e:	ea 30       	cpi	r30, 0x0A	; 10
    3d80:	70 f3       	brcs	.-36     	; 0x3d5e <printIntegerInBase+0xc0>
    3d82:	e9 5c       	subi	r30, 0xC9	; 201
    3d84:	ed cf       	rjmp	.-38     	; 0x3d60 <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3d86:	80 91 c0 00 	lds	r24, 0x00C0
    3d8a:	85 ff       	sbrs	r24, 5
    3d8c:	fc cf       	rjmp	.-8      	; 0x3d86 <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    3d8e:	80 e3       	ldi	r24, 0x30	; 48
    3d90:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3d94:	a0 96       	adiw	r28, 0x20	; 32
    3d96:	0f b6       	in	r0, 0x3f	; 63
    3d98:	f8 94       	cli
    3d9a:	de bf       	out	0x3e, r29	; 62
    3d9c:	0f be       	out	0x3f, r0	; 63
    3d9e:	cd bf       	out	0x3d, r28	; 61
    3da0:	cf 91       	pop	r28
    3da2:	df 91       	pop	r29
    3da4:	1f 91       	pop	r17
    3da6:	0f 91       	pop	r16
    3da8:	ff 90       	pop	r15
    3daa:	ef 90       	pop	r14
    3dac:	df 90       	pop	r13
    3dae:	cf 90       	pop	r12
    3db0:	bf 90       	pop	r11
    3db2:	af 90       	pop	r10
    3db4:	9f 90       	pop	r9
    3db6:	8f 90       	pop	r8
    3db8:	7f 90       	pop	r7
    3dba:	6f 90       	pop	r6
    3dbc:	5f 90       	pop	r5
    3dbe:	4f 90       	pop	r4
    3dc0:	3f 90       	pop	r3
    3dc2:	2f 90       	pop	r2
    3dc4:	08 95       	ret

00003dc6 <printInteger>:

void printInteger(long n)
{
    3dc6:	9b 01       	movw	r18, r22
    3dc8:	ac 01       	movw	r20, r24
	if (n < 0) {
    3dca:	97 fd       	sbrc	r25, 7
    3dcc:	09 c0       	rjmp	.+18     	; 0x3de0 <printInteger+0x1a>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    3dce:	ca 01       	movw	r24, r20
    3dd0:	b9 01       	movw	r22, r18
    3dd2:	2a e0       	ldi	r18, 0x0A	; 10
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	40 e0       	ldi	r20, 0x00	; 0
    3dd8:	50 e0       	ldi	r21, 0x00	; 0
    3dda:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <printIntegerInBase>
}
    3dde:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3de0:	80 91 c0 00 	lds	r24, 0x00C0
    3de4:	85 ff       	sbrs	r24, 5
    3de6:	fc cf       	rjmp	.-8      	; 0x3de0 <printInteger+0x1a>
		;
	UDR0 = c;
    3de8:	8d e2       	ldi	r24, 0x2D	; 45
    3dea:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3dee:	50 95       	com	r21
    3df0:	40 95       	com	r20
    3df2:	30 95       	com	r19
    3df4:	21 95       	neg	r18
    3df6:	3f 4f       	sbci	r19, 0xFF	; 255
    3df8:	4f 4f       	sbci	r20, 0xFF	; 255
    3dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    3dfc:	e8 cf       	rjmp	.-48     	; 0x3dce <printInteger+0x8>

00003dfe <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3dfe:	22 e0       	ldi	r18, 0x02	; 2
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	40 e0       	ldi	r20, 0x00	; 0
    3e04:	50 e0       	ldi	r21, 0x00	; 0
    3e06:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <printIntegerInBase>
  }
    3e0a:	08 95       	ret

00003e0c <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3e0c:	ef 92       	push	r14
    3e0e:	ff 92       	push	r15
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	00 d0       	rcall	.+0      	; 0x3e1a <printFloat+0xe>
    3e1a:	0f 92       	push	r0
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3e20:	ae 01       	movw	r20, r28
    3e22:	4f 5f       	subi	r20, 0xFF	; 255
    3e24:	5f 4f       	sbci	r21, 0xFF	; 255
    3e26:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <modf>
    3e2a:	7b 01       	movw	r14, r22
    3e2c:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3e2e:	69 81       	ldd	r22, Y+1	; 0x01
    3e30:	7a 81       	ldd	r23, Y+2	; 0x02
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	9c 81       	ldd	r25, Y+4	; 0x04
    3e36:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
    3e3a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3e3e:	80 91 c0 00 	lds	r24, 0x00C0
    3e42:	85 ff       	sbrs	r24, 5
    3e44:	fc cf       	rjmp	.-8      	; 0x3e3e <printFloat+0x32>
		;
	UDR0 = c;
    3e46:	8e e2       	ldi	r24, 0x2E	; 46
    3e48:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3e4c:	c8 01       	movw	r24, r16
    3e4e:	b7 01       	movw	r22, r14
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	4a e7       	ldi	r20, 0x7A	; 122
    3e56:	54 e4       	ldi	r21, 0x44	; 68
    3e58:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    3e5c:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <round>
    3e60:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <__fixsfsi>
    3e64:	97 fd       	sbrc	r25, 7
    3e66:	0d c0       	rjmp	.+26     	; 0x3e82 <printFloat+0x76>
    3e68:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <printInteger>
}
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	ff 90       	pop	r15
    3e7e:	ef 90       	pop	r14
    3e80:	08 95       	ret
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3e82:	90 95       	com	r25
    3e84:	80 95       	com	r24
    3e86:	70 95       	com	r23
    3e88:	61 95       	neg	r22
    3e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e90:	eb cf       	rjmp	.-42     	; 0x3e68 <printFloat+0x5c>

00003e92 <__vector_25>:
	rx_buffer_head = rx_buffer_tail;
}

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3e92:	1f 92       	push	r1
    3e94:	0f 92       	push	r0
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	0f 92       	push	r0
    3e9a:	0b b6       	in	r0, 0x3b	; 59
    3e9c:	0f 92       	push	r0
    3e9e:	11 24       	eor	r1, r1
    3ea0:	2f 93       	push	r18
    3ea2:	3f 93       	push	r19
    3ea4:	4f 93       	push	r20
    3ea6:	5f 93       	push	r21
    3ea8:	6f 93       	push	r22
    3eaa:	7f 93       	push	r23
    3eac:	8f 93       	push	r24
    3eae:	9f 93       	push	r25
    3eb0:	af 93       	push	r26
    3eb2:	bf 93       	push	r27
    3eb4:	ef 93       	push	r30
    3eb6:	ff 93       	push	r31
	unsigned char c = UDR0;
    3eb8:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3ebc:	e0 91 55 08 	lds	r30, 0x0855
    3ec0:	f0 91 56 08 	lds	r31, 0x0856
    3ec4:	cf 01       	movw	r24, r30
    3ec6:	01 96       	adiw	r24, 0x01	; 1
    3ec8:	60 e0       	ldi	r22, 0x00	; 0
    3eca:	71 e0       	ldi	r23, 0x01	; 1
    3ecc:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
    3ed0:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3ed2:	80 91 57 08 	lds	r24, 0x0857
    3ed6:	90 91 58 08 	lds	r25, 0x0858
    3eda:	28 17       	cp	r18, r24
    3edc:	39 07       	cpc	r19, r25
    3ede:	39 f0       	breq	.+14     	; 0x3eee <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3ee0:	e7 5a       	subi	r30, 0xA7	; 167
    3ee2:	f7 4f       	sbci	r31, 0xF7	; 247
    3ee4:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3ee6:	30 93 56 08 	sts	0x0856, r19
    3eea:	20 93 55 08 	sts	0x0855, r18
	}

	if( c == 0x0ff ) {
    3eee:	4f 3f       	cpi	r20, 0xFF	; 255
    3ef0:	99 f0       	breq	.+38     	; 0x3f18 <__vector_25+0x86>
		gHomed = 0 ;
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3ef2:	ff 91       	pop	r31
    3ef4:	ef 91       	pop	r30
    3ef6:	bf 91       	pop	r27
    3ef8:	af 91       	pop	r26
    3efa:	9f 91       	pop	r25
    3efc:	8f 91       	pop	r24
    3efe:	7f 91       	pop	r23
    3f00:	6f 91       	pop	r22
    3f02:	5f 91       	pop	r21
    3f04:	4f 91       	pop	r20
    3f06:	3f 91       	pop	r19
    3f08:	2f 91       	pop	r18
    3f0a:	0f 90       	pop	r0
    3f0c:	0b be       	out	0x3b, r0	; 59
    3f0e:	0f 90       	pop	r0
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	0f 90       	pop	r0
    3f14:	1f 90       	pop	r1
    3f16:	18 95       	reti
		rx_buffer_head = i;
	}

	if( c == 0x0ff ) {
		// shut off servo interrupt
		cli();
    3f18:	f8 94       	cli
		st_disable();
    3f1a:	0e 94 0b 18 	call	0x3016	; 0x3016 <st_disable>
		// not homed
		gHomed = 0 ;
    3f1e:	10 92 2f 08 	sts	0x082F, r1
    3f22:	e7 cf       	rjmp	.-50     	; 0x3ef2 <__vector_25+0x60>

00003f24 <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    3f24:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    3f26:	e7 e0       	ldi	r30, 0x07	; 7
    3f28:	f1 e0       	ldi	r31, 0x01	; 1
    3f2a:	80 81       	ld	r24, Z
    3f2c:	81 60       	ori	r24, 0x01	; 1
    3f2e:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3f30:	80 81       	ld	r24, Z
    3f32:	82 60       	ori	r24, 0x02	; 2
    3f34:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3f36:	80 81       	ld	r24, Z
    3f38:	84 60       	ori	r24, 0x04	; 4
    3f3a:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3f3c:	80 81       	ld	r24, Z
    3f3e:	88 60       	ori	r24, 0x08	; 8
    3f40:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3f42:	80 81       	ld	r24, Z
    3f44:	80 64       	ori	r24, 0x40	; 64
    3f46:	80 83       	st	Z, r24

// initialise PORT as well

}
    3f48:	08 95       	ret

00003f4a <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	08 95       	ret

00003f4e <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3f54:	80 91 2f 08 	lds	r24, 0x082F
    3f58:	88 23       	and	r24, r24
    3f5a:	19 f4       	brne	.+6      	; 0x3f62 <atc_fire+0x14>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3f5c:	df 91       	pop	r29
    3f5e:	cf 91       	pop	r28
    3f60:	08 95       	ret

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    3f68:	20 97       	sbiw	r28, 0x00	; 0
    3f6a:	29 f1       	breq	.+74     	; 0x3fb6 <atc_fire+0x68>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3f6c:	80 91 08 01 	lds	r24, 0x0108
    3f70:	81 60       	ori	r24, 0x01	; 1
    3f72:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3f76:	c3 30       	cpi	r28, 0x03	; 3
    3f78:	d1 05       	cpc	r29, r1
    3f7a:	09 f4       	brne	.+2      	; 0x3f7e <atc_fire+0x30>
    3f7c:	46 c0       	rjmp	.+140    	; 0x400a <atc_fire+0xbc>
    3f7e:	c4 30       	cpi	r28, 0x04	; 4
    3f80:	d1 05       	cpc	r29, r1
    3f82:	8c f5       	brge	.+98     	; 0x3fe6 <atc_fire+0x98>
    3f84:	c1 30       	cpi	r28, 0x01	; 1
    3f86:	d1 05       	cpc	r29, r1
    3f88:	09 f4       	brne	.+2      	; 0x3f8c <atc_fire+0x3e>
    3f8a:	6d c0       	rjmp	.+218    	; 0x4066 <atc_fire+0x118>
    3f8c:	22 97       	sbiw	r28, 0x02	; 2
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <atc_fire+0x44>
    3f90:	66 c0       	rjmp	.+204    	; 0x405e <atc_fire+0x110>
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3f92:	80 91 08 01 	lds	r24, 0x0108
    3f96:	8e 7f       	andi	r24, 0xFE	; 254
    3f98:	80 93 08 01 	sts	0x0108, r24
    3f9c:	28 ee       	ldi	r18, 0xE8	; 232
    3f9e:	33 e0       	ldi	r19, 0x03	; 3
    3fa0:	40 e9       	ldi	r20, 0x90	; 144
    3fa2:	51 e0       	ldi	r21, 0x01	; 1
    3fa4:	ca 01       	movw	r24, r20
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <atc_fire+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3faa:	21 50       	subi	r18, 0x01	; 1
    3fac:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fae:	d1 f7       	brne	.-12     	; 0x3fa4 <atc_fire+0x56>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	08 95       	ret

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3fb6:	80 91 08 01 	lds	r24, 0x0108
    3fba:	81 60       	ori	r24, 0x01	; 1
    3fbc:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3fc0:	80 91 08 01 	lds	r24, 0x0108
    3fc4:	82 60       	ori	r24, 0x02	; 2
    3fc6:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3fca:	80 91 08 01 	lds	r24, 0x0108
    3fce:	84 60       	ori	r24, 0x04	; 4
    3fd0:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3fd4:	80 91 08 01 	lds	r24, 0x0108
    3fd8:	88 60       	ori	r24, 0x08	; 8
    3fda:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>
    3fe4:	bb cf       	rjmp	.-138    	; 0x3f5c <atc_fire+0xe>
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3fe6:	c5 30       	cpi	r28, 0x05	; 5
    3fe8:	d1 05       	cpc	r29, r1
    3fea:	09 f4       	brne	.+2      	; 0x3fee <atc_fire+0xa0>
    3fec:	45 c0       	rjmp	.+138    	; 0x4078 <atc_fire+0x12a>
    3fee:	c5 30       	cpi	r28, 0x05	; 5
    3ff0:	d1 05       	cpc	r29, r1
    3ff2:	04 f1       	brlt	.+64     	; 0x4034 <atc_fire+0xe6>
    3ff4:	26 97       	sbiw	r28, 0x06	; 6
    3ff6:	69 f6       	brne	.-102    	; 0x3f92 <atc_fire+0x44>
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3ff8:	80 91 08 01 	lds	r24, 0x0108
    3ffc:	82 60       	ori	r24, 0x02	; 2
    3ffe:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    4002:	80 91 08 01 	lds	r24, 0x0108
    4006:	8b 7f       	andi	r24, 0xFB	; 251
    4008:	1d c0       	rjmp	.+58     	; 0x4044 <atc_fire+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    400a:	80 91 08 01 	lds	r24, 0x0108
    400e:	8d 7f       	andi	r24, 0xFD	; 253
    4010:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    4014:	80 91 08 01 	lds	r24, 0x0108
    4018:	84 60       	ori	r24, 0x04	; 4
    401a:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    401e:	80 91 08 01 	lds	r24, 0x0108
    4022:	87 7f       	andi	r24, 0xF7	; 247
    4024:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    4028:	80 91 08 01 	lds	r24, 0x0108
    402c:	8e 7f       	andi	r24, 0xFE	; 254
    402e:	80 93 08 01 	sts	0x0108, r24
    4032:	af cf       	rjmp	.-162    	; 0x3f92 <atc_fire+0x44>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    4034:	80 91 08 01 	lds	r24, 0x0108
    4038:	8d 7f       	andi	r24, 0xFD	; 253
    403a:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    403e:	80 91 08 01 	lds	r24, 0x0108
    4042:	84 60       	ori	r24, 0x04	; 4
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    4044:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    4048:	80 91 08 01 	lds	r24, 0x0108
    404c:	88 60       	ori	r24, 0x08	; 8
    404e:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    4052:	80 91 08 01 	lds	r24, 0x0108
    4056:	8e 7f       	andi	r24, 0xFE	; 254
    4058:	80 93 08 01 	sts	0x0108, r24
    405c:	9a cf       	rjmp	.-204    	; 0x3f92 <atc_fire+0x44>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    405e:	80 91 08 01 	lds	r24, 0x0108
    4062:	8d 7f       	andi	r24, 0xFD	; 253
    4064:	cc cf       	rjmp	.-104    	; 0x3ffe <atc_fire+0xb0>
 */
 	switch( tool ) {
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    4066:	80 91 08 01 	lds	r24, 0x0108
    406a:	8d 7f       	andi	r24, 0xFD	; 253
    406c:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    4070:	80 91 08 01 	lds	r24, 0x0108
    4074:	8b 7f       	andi	r24, 0xFB	; 251
    4076:	d1 cf       	rjmp	.-94     	; 0x401a <atc_fire+0xcc>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    4078:	80 91 08 01 	lds	r24, 0x0108
    407c:	82 60       	ori	r24, 0x02	; 2
    407e:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    4082:	80 91 08 01 	lds	r24, 0x0108
    4086:	8b 7f       	andi	r24, 0xFB	; 251
    4088:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    408c:	80 91 08 01 	lds	r24, 0x0108
    4090:	87 7f       	andi	r24, 0xF7	; 247
    4092:	80 93 08 01 	sts	0x0108, r24
    4096:	7d cf       	rjmp	.-262    	; 0x3f92 <atc_fire+0x44>

00004098 <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    4098:	1f 93       	push	r17
    409a:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    409c:	80 91 2f 08 	lds	r24, 0x082F
    40a0:	88 23       	and	r24, r24
    40a2:	19 f4       	brne	.+6      	; 0x40aa <DropTool+0x12>
    40a4:	83 e6       	ldi	r24, 0x63	; 99
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    40a6:	1f 91       	pop	r17
    40a8:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    40b2:	88 23       	and	r24, r24
    40b4:	19 f4       	brne	.+6      	; 0x40bc <DropTool+0x24>
    40b6:	85 e0       	ldi	r24, 0x05	; 5
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    40b8:	1f 91       	pop	r17
    40ba:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    40bc:	81 2f       	mov	r24, r17
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <atc_fire>

	// head back up
	head_down( 0 );
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    40d4:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    40d6:	1f 91       	pop	r17
    40d8:	08 95       	ret

000040da <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    40da:	1f 93       	push	r17
    40dc:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    40de:	80 91 2f 08 	lds	r24, 0x082F
    40e2:	88 23       	and	r24, r24
    40e4:	19 f4       	brne	.+6      	; 0x40ec <PickupTool+0x12>
    40e6:	83 e6       	ldi	r24, 0x63	; 99
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    40e8:	1f 91       	pop	r17
    40ea:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    40f4:	88 23       	and	r24, r24
    40f6:	19 f4       	brne	.+6      	; 0x40fe <PickupTool+0x24>
    40f8:	85 e0       	ldi	r24, 0x05	; 5
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    40fa:	1f 91       	pop	r17
    40fc:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    40fe:	81 2f       	mov	r24, r17
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>

	// head back up
	head_down( 0 );
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    410e:	80 e9       	ldi	r24, 0x90	; 144
    4110:	91 e0       	ldi	r25, 0x01	; 1
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <PickupTool+0x38>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    4116:	80 e0       	ldi	r24, 0x00	; 0
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	0e 94 92 20 	call	0x4124	; 0x4124 <atc_change>
    411e:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    4120:	1f 91       	pop	r17
    4122:	08 95       	ret

00004124 <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    412a:	80 91 2f 08 	lds	r24, 0x082F
    412e:	88 23       	and	r24, r24
    4130:	71 f0       	breq	.+28     	; 0x414e <atc_change+0x2a>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    4132:	cf 3f       	cpi	r28, 0xFF	; 255
    4134:	d1 05       	cpc	r29, r1
    4136:	39 f0       	breq	.+14     	; 0x4146 <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    4138:	0e 94 18 22 	call	0x4430	; 0x4430 <run_vacuum_test>
    413c:	88 23       	and	r24, r24
    413e:	59 f0       	breq	.+22     	; 0x4156 <atc_change+0x32>
		PickupTool(tool);
	} else { 
		DropTool(tool);
    4140:	8c 2f       	mov	r24, r28
    4142:	0e 94 4c 20 	call	0x4098	; 0x4098 <DropTool>
    4146:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	08 95       	ret

*/

unsigned char atc_change(int tool)
{
	if( gHomed == FALSE  ){ 
    414e:	83 e6       	ldi	r24, 0x63	; 99
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	08 95       	ret
	if( tool == toolId ) {
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
		PickupTool(tool);
    4156:	8c 2f       	mov	r24, r28
    4158:	0e 94 6d 20 	call	0x40da	; 0x40da <PickupTool>
    415c:	80 e0       	ldi	r24, 0x00	; 0
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    415e:	df 91       	pop	r29
    4160:	cf 91       	pop	r28
    4162:	08 95       	ret

00004164 <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    4164:	80 91 2f 08 	lds	r24, 0x082F
    4168:	88 23       	and	r24, r24
    416a:	11 f4       	brne	.+4      	; 0x4170 <check_for_tool+0xc>
    416c:	83 e6       	ldi	r24, 0x63	; 99
    416e:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    4170:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    4174:	88 23       	and	r24, r24
    4176:	a1 f4       	brne	.+40     	; 0x41a0 <check_for_tool+0x3c>
		head_down( FALSE) ;
	}

	goto_vacpad();
    4178:	0e 94 52 22 	call	0x44a4	; 0x44a4 <goto_vacpad>
	
	head_down(TRUE);
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
	
	vacuum(TRUE);
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>

	if( vacuum_state() == TRUE )  {
    418c:	0e 94 12 22 	call	0x4424	; 0x4424 <vacuum_state>
    4190:	81 30       	cpi	r24, 0x01	; 1
    4192:	59 f0       	breq	.+22     	; 0x41aa <check_for_tool+0x46>
		head_down( FALSE) ;
		return TRUE;
	} else {
		head_down( FALSE) ;
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    419c:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    419e:	08 95       	ret
	}


	//move head up
	if( is_head_down() ) {
		head_down( FALSE) ;
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    41a8:	e7 cf       	rjmp	.-50     	; 0x4178 <check_for_tool+0x14>
	head_down(TRUE);
	
	vacuum(TRUE);

	if( vacuum_state() == TRUE )  {
		head_down( FALSE) ;
    41aa:	80 e0       	ldi	r24, 0x00	; 0
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	08 95       	ret

000041b6 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    41b6:	ea e0       	ldi	r30, 0x0A	; 10
    41b8:	f1 e0       	ldi	r31, 0x01	; 1
    41ba:	80 81       	ld	r24, Z
    41bc:	80 62       	ori	r24, 0x20	; 32
    41be:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    41c0:	eb e0       	ldi	r30, 0x0B	; 11
    41c2:	f1 e0       	ldi	r31, 0x01	; 1
    41c4:	80 81       	ld	r24, Z
    41c6:	80 62       	ori	r24, 0x20	; 32
    41c8:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    41ca:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    41cc:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    41ce:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    41d0:	41 9a       	sbi	0x08, 1	; 8
}
    41d2:	08 95       	ret

000041d4 <is_head_down>:
	return simulate_head_state;
#else

	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    41d4:	86 b1       	in	r24, 0x06	; 6

	return state;

#endif
}
    41d6:	81 70       	andi	r24, 0x01	; 1
    41d8:	08 95       	ret

000041da <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    41da:	86 b1       	in	r24, 0x06	; 6
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	96 95       	lsr	r25
    41e0:	87 95       	ror	r24

	return state;
}
    41e2:	81 70       	andi	r24, 0x01	; 1
    41e4:	08 95       	ret

000041e6 <head_down>:
#ifdef SIMULATE
static unsigned char simulate_head_state = 0;
#endif

char head_down(int state)
{
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    41ec:	80 91 2f 08 	lds	r24, 0x082F
    41f0:	88 23       	and	r24, r24
    41f2:	19 f1       	breq	.+70     	; 0x423a <head_down+0x54>
		return 0;
	}

	// wait til head stops
	while( head_moving() );
    41f4:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    41f8:	88 23       	and	r24, r24
    41fa:	e1 f7       	brne	.-8      	; 0x41f4 <head_down+0xe>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>

// head down mode
  if( state == 0 ) {
    4202:	20 97       	sbiw	r28, 0x00	; 0
    4204:	e9 f0       	breq	.+58     	; 0x4240 <head_down+0x5a>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    4206:	80 91 0b 01 	lds	r24, 0x010B
    420a:	8f 7d       	andi	r24, 0xDF	; 223
    420c:	80 93 0b 01 	sts	0x010B, r24
    4210:	28 ee       	ldi	r18, 0xE8	; 232
    4212:	33 e0       	ldi	r19, 0x03	; 3
    4214:	40 e9       	ldi	r20, 0x90	; 144
    4216:	51 e0       	ldi	r21, 0x01	; 1
    4218:	ca 01       	movw	r24, r20
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <head_down+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    421e:	21 50       	subi	r18, 0x01	; 1
    4220:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4222:	d1 f7       	brne	.-12     	; 0x4218 <head_down+0x32>
	return simulate_head_state;
#else

	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    4224:	86 b1       	in	r24, 0x06	; 6

#ifdef SIMULATE
	simulate_head_state = state;
#endif

  if(is_head_down() != state ) {
    4226:	81 70       	andi	r24, 0x01	; 1
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	8c 17       	cp	r24, r28
    422c:	9d 07       	cpc	r25, r29
    422e:	81 f0       	breq	.+32     	; 0x4250 <head_down+0x6a>

	  printPgmString(PSTR("Head down error\n\r"));
    4230:	87 e9       	ldi	r24, 0x97	; 151
    4232:	95 e0       	ldi	r25, 0x05	; 5
    4234:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    4238:	80 e0       	ldi	r24, 0x00	; 0
  }

 	set_busy( FALSE );

	return 1;
}
    423a:	df 91       	pop	r29
    423c:	cf 91       	pop	r28
    423e:	08 95       	ret
	set_busy( TRUE );

// head down mode
  if( state == 0 ) {

	HEAD_PORT |= _BV( HEAD );
    4240:	80 91 0b 01 	lds	r24, 0x010B
    4244:	80 62       	ori	r24, 0x20	; 32
    4246:	80 93 0b 01 	sts	0x010B, r24
    424a:	28 ee       	ldi	r18, 0xE8	; 232
    424c:	33 e0       	ldi	r19, 0x03	; 3
    424e:	e2 cf       	rjmp	.-60     	; 0x4214 <head_down+0x2e>
	  printPgmString(PSTR("Head down error\n\r"));
	  
	  return 0;
  }

 	set_busy( FALSE );
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>
    4256:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    4258:	df 91       	pop	r29
    425a:	cf 91       	pop	r28
    425c:	08 95       	ret

0000425e <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    425e:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    4260:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    4262:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    4264:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    4266:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    4268:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    426a:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    426c:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    426e:	a4 e0       	ldi	r26, 0x04	; 4
    4270:	b1 e0       	ldi	r27, 0x01	; 1
    4272:	8c 91       	ld	r24, X
    4274:	8e 7f       	andi	r24, 0xFE	; 254
    4276:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    4278:	e5 e0       	ldi	r30, 0x05	; 5
    427a:	f1 e0       	ldi	r31, 0x01	; 1
    427c:	80 81       	ld	r24, Z
    427e:	81 60       	ori	r24, 0x01	; 1
    4280:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    4282:	8c 91       	ld	r24, X
    4284:	8f 7e       	andi	r24, 0xEF	; 239
    4286:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    4288:	80 81       	ld	r24, Z
    428a:	80 61       	ori	r24, 0x10	; 16
    428c:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    428e:	a1 e0       	ldi	r26, 0x01	; 1
    4290:	b1 e0       	ldi	r27, 0x01	; 1
    4292:	8c 91       	ld	r24, X
    4294:	8e 7f       	andi	r24, 0xFE	; 254
    4296:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    4298:	e2 e0       	ldi	r30, 0x02	; 2
    429a:	f1 e0       	ldi	r31, 0x01	; 1
    429c:	80 81       	ld	r24, Z
    429e:	81 60       	ori	r24, 0x01	; 1
    42a0:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    42a2:	8c 91       	ld	r24, X
    42a4:	8d 7f       	andi	r24, 0xFD	; 253
    42a6:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    42a8:	80 81       	ld	r24, Z
    42aa:	82 60       	ori	r24, 0x02	; 2
    42ac:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    42ae:	e0 e9       	ldi	r30, 0x90	; 144
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	80 81       	ld	r24, Z
    42b4:	82 60       	ori	r24, 0x02	; 2
    42b6:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    42b8:	8c e7       	ldi	r24, 0x7C	; 124
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	90 93 99 00 	sts	0x0099, r25
    42c0:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    42c4:	10 92 95 00 	sts	0x0095, r1
    42c8:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    42cc:	84 e0       	ldi	r24, 0x04	; 4
    42ce:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    42d2:	e1 e7       	ldi	r30, 0x71	; 113
    42d4:	f0 e0       	ldi	r31, 0x00	; 0
    42d6:	80 81       	ld	r24, Z
    42d8:	82 60       	ori	r24, 0x02	; 2
    42da:	80 83       	st	Z, r24

}
    42dc:	08 95       	ret

000042de <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    42de:	8c b1       	in	r24, 0x0c	; 12
    42e0:	82 95       	swap	r24
    42e2:	86 95       	lsr	r24
    42e4:	87 70       	andi	r24, 0x07	; 7
    42e6:	80 95       	com	r24

	return state;
}
    42e8:	81 70       	andi	r24, 0x01	; 1
    42ea:	08 95       	ret

000042ec <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    42ec:	82 b3       	in	r24, 0x12	; 18
    42ee:	82 95       	swap	r24
    42f0:	86 95       	lsr	r24
    42f2:	87 70       	andi	r24, 0x07	; 7
    42f4:	80 95       	com	r24

	return state;
}
    42f6:	81 70       	andi	r24, 0x01	; 1
    42f8:	08 95       	ret

000042fa <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    42fa:	8c b1       	in	r24, 0x0c	; 12
    42fc:	82 95       	swap	r24
    42fe:	8f 70       	andi	r24, 0x0F	; 15
    4300:	80 95       	com	r24

	return state;
}
    4302:	81 70       	andi	r24, 0x01	; 1
    4304:	08 95       	ret

00004306 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    4306:	80 91 03 01 	lds	r24, 0x0103
    430a:	86 95       	lsr	r24
    430c:	80 95       	com	r24

	return state;
}
    430e:	81 70       	andi	r24, 0x01	; 1
    4310:	08 95       	ret

00004312 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    4312:	86 b1       	in	r24, 0x06	; 6
    4314:	82 95       	swap	r24
    4316:	8f 70       	andi	r24, 0x0F	; 15
    4318:	80 95       	com	r24

	return state;
}
    431a:	81 70       	andi	r24, 0x01	; 1
    431c:	08 95       	ret

0000431e <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    431e:	80 91 00 01 	lds	r24, 0x0100
    4322:	80 95       	com	r24

	return state;
}
    4324:	81 70       	andi	r24, 0x01	; 1
    4326:	08 95       	ret

00004328 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    4328:	80 91 03 01 	lds	r24, 0x0103
    432c:	80 95       	com	r24

	return state;
}
    432e:	81 70       	andi	r24, 0x01	; 1
    4330:	08 95       	ret

00004332 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    4332:	83 b1       	in	r24, 0x03	; 3
    4334:	82 95       	swap	r24
    4336:	86 95       	lsr	r24
    4338:	87 70       	andi	r24, 0x07	; 7
    433a:	80 95       	com	r24

	return state;
}
    433c:	81 70       	andi	r24, 0x01	; 1
    433e:	08 95       	ret

00004340 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    4340:	80 91 00 01 	lds	r24, 0x0100
    4344:	86 95       	lsr	r24
    4346:	80 95       	com	r24

	return state;
}
    4348:	81 70       	andi	r24, 0x01	; 1
    434a:	08 95       	ret

0000434c <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    434c:	1f 92       	push	r1
    434e:	0f 92       	push	r0
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	0f 92       	push	r0
    4354:	11 24       	eor	r1, r1
	return;
}
    4356:	0f 90       	pop	r0
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	0f 90       	pop	r0
    435c:	1f 90       	pop	r1
    435e:	18 95       	reti

00004360 <process_panel>:
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    4360:	1d 9b       	sbis	0x03, 5	; 3
    4362:	20 c0       	rjmp	.+64     	; 0x43a4 <process_panel+0x44>

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    4364:	80 91 00 01 	lds	r24, 0x0100
    4368:	80 ff       	sbrs	r24, 0
    436a:	0b c0       	rjmp	.+22     	; 0x4382 <process_panel+0x22>
	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
    436c:	80 91 5a 09 	lds	r24, 0x095A
    4370:	81 30       	cpi	r24, 0x01	; 1
    4372:	d9 f0       	breq	.+54     	; 0x43aa <process_panel+0x4a>
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    4374:	34 9b       	sbis	0x06, 4	; 6
    4376:	0e c0       	rjmp	.+28     	; 0x4394 <process_panel+0x34>
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
    4378:	80 91 59 09 	lds	r24, 0x0959
    437c:	81 30       	cpi	r24, 0x01	; 1
    437e:	e1 f0       	breq	.+56     	; 0x43b8 <process_panel+0x58>
    4380:	08 95       	ret
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	80 93 5a 09 	sts	0x095A, r24
		vacuum(1);
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
	} else if(bvac == 1 ) {
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    4390:	34 99       	sbic	0x06, 4	; 6
    4392:	f2 cf       	rjmp	.-28     	; 0x4378 <process_panel+0x18>
		bhead = 1;
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	80 93 59 09 	sts	0x0959, r24
		head_down(1);
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    43a2:	08 95       	ret
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    43a4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <mc_go_home>
    43a8:	dd cf       	rjmp	.-70     	; 0x4364 <process_panel+0x4>

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
		bvac = 0;
    43aa:	10 92 5a 09 	sts	0x095A, r1
		vacuum(0);
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
    43b6:	de cf       	rjmp	.-68     	; 0x4374 <process_panel+0x14>

	if( is_phead() ) {
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
		bhead = 0;
    43b8:	10 92 59 09 	sts	0x0959, r1
		head_down(0);
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    43c4:	08 95       	ret

000043c6 <vacuum_init>:
#include "stepper.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    43c6:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    43c8:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    43ca:	ea e0       	ldi	r30, 0x0A	; 10
    43cc:	f1 e0       	ldi	r31, 0x01	; 1
    43ce:	80 81       	ld	r24, Z
    43d0:	80 61       	ori	r24, 0x10	; 16
    43d2:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    43d4:	eb e0       	ldi	r30, 0x0B	; 11
    43d6:	f1 e0       	ldi	r31, 0x01	; 1
    43d8:	80 81       	ld	r24, Z
    43da:	80 61       	ori	r24, 0x10	; 16
    43dc:	80 83       	st	Z, r24

}
    43de:	08 95       	ret

000043e0 <vacuum>:

// switches vacuum on and off
void vacuum(int state)
{
	if( state == 1 && gHomed == FALSE ) return;
    43e0:	81 30       	cpi	r24, 0x01	; 1
    43e2:	91 05       	cpc	r25, r1
    43e4:	91 f0       	breq	.+36     	; 0x440a <vacuum+0x2a>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    43e6:	89 2b       	or	r24, r25
    43e8:	a1 f4       	brne	.+40     	; 0x4412 <vacuum+0x32>

	HEAD_PORT |= _BV( VACUUM );
    43ea:	80 91 0b 01 	lds	r24, 0x010B
    43ee:	80 61       	ori	r24, 0x10	; 16
    43f0:	80 93 0b 01 	sts	0x010B, r24
    43f4:	24 ef       	ldi	r18, 0xF4	; 244
    43f6:	31 e0       	ldi	r19, 0x01	; 1
    43f8:	40 e9       	ldi	r20, 0x90	; 144
    43fa:	51 e0       	ldi	r21, 0x01	; 1
    43fc:	ca 01       	movw	r24, r20
    43fe:	01 97       	sbiw	r24, 0x01	; 1
    4400:	f1 f7       	brne	.-4      	; 0x43fe <vacuum+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4402:	21 50       	subi	r18, 0x01	; 1
    4404:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4406:	d1 f7       	brne	.-12     	; 0x43fc <vacuum+0x1c>
    4408:	08 95       	ret
}

// switches vacuum on and off
void vacuum(int state)
{
	if( state == 1 && gHomed == FALSE ) return;
    440a:	80 91 2f 08 	lds	r24, 0x082F
    440e:	88 23       	and	r24, r24
    4410:	41 f0       	breq	.+16     	; 0x4422 <vacuum+0x42>

	HEAD_PORT |= _BV( VACUUM );

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    4412:	80 91 0b 01 	lds	r24, 0x010B
    4416:	8f 7e       	andi	r24, 0xEF	; 239
    4418:	80 93 0b 01 	sts	0x010B, r24
    441c:	24 ef       	ldi	r18, 0xF4	; 244
    441e:	31 e0       	ldi	r19, 0x01	; 1
    4420:	eb cf       	rjmp	.-42     	; 0x43f8 <vacuum+0x18>
    4422:	08 95       	ret

00004424 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    4424:	89 b1       	in	r24, 0x09	; 9
    4426:	80 95       	com	r24

	return state;
}
    4428:	88 1f       	adc	r24, r24
    442a:	88 27       	eor	r24, r24
    442c:	88 1f       	adc	r24, r24
    442e:	08 95       	ret

00004430 <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    4430:	af 92       	push	r10
    4432:	bf 92       	push	r11
    4434:	cf 92       	push	r12
    4436:	df 92       	push	r13
    4438:	ef 92       	push	r14
    443a:	ff 92       	push	r15
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    4440:	80 91 2f 08 	lds	r24, 0x082F
    4444:	88 23       	and	r24, r24
    4446:	51 f4       	brne	.+20     	; 0x445c <run_vacuum_test+0x2c>
    4448:	83 e6       	ldi	r24, 0x63	; 99
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	ff 90       	pop	r15
    4450:	ef 90       	pop	r14
    4452:	df 90       	pop	r13
    4454:	cf 90       	pop	r12
    4456:	bf 90       	pop	r11
    4458:	af 90       	pop	r10
    445a:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4464:	63 ec       	ldi	r22, 0xC3	; 195
    4466:	73 ed       	ldi	r23, 0xD3	; 211
    4468:	81 e4       	ldi	r24, 0x41	; 65
    446a:	91 e4       	ldi	r25, 0x41	; 65
    446c:	2a e1       	ldi	r18, 0x1A	; 26
    446e:	3b e8       	ldi	r19, 0x8B	; 139
    4470:	4d e9       	ldi	r20, 0x9D	; 157
    4472:	50 e4       	ldi	r21, 0x40	; 64
    4474:	0f 2e       	mov	r0, r31
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	ef 2e       	mov	r14, r31
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	ff 2e       	mov	r15, r31
    447e:	f0 e8       	ldi	r31, 0x80	; 128
    4480:	0f 2f       	mov	r16, r31
    4482:	ff eb       	ldi	r31, 0xBF	; 191
    4484:	1f 2f       	mov	r17, r31
    4486:	f0 2d       	mov	r31, r0
    4488:	57 01       	movw	r10, r14
    448a:	68 01       	movw	r12, r16
    448c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    4490:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    4494:	88 23       	and	r24, r24
    4496:	e1 f7       	brne	.-8      	; 0x4490 <run_vacuum_test+0x60>
    4498:	80 e9       	ldi	r24, 0x90	; 144
    449a:	91 e0       	ldi	r25, 0x01	; 1
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	f1 f7       	brne	.-4      	; 0x449c <run_vacuum_test+0x6c>
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	d3 cf       	rjmp	.-90     	; 0x444a <run_vacuum_test+0x1a>

000044a4 <goto_vacpad>:
	return GCSTATUS_OK;

}

unsigned char goto_vacpad( void ) 
{
    44a4:	8f 92       	push	r8
    44a6:	9f 92       	push	r9
    44a8:	af 92       	push	r10
    44aa:	bf 92       	push	r11
    44ac:	cf 92       	push	r12
    44ae:	df 92       	push	r13
    44b0:	ef 92       	push	r14
    44b2:	ff 92       	push	r15
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    44b8:	80 91 2f 08 	lds	r24, 0x082F
    44bc:	88 23       	and	r24, r24
    44be:	61 f4       	brne	.+24     	; 0x44d8 <goto_vacpad+0x34>
    44c0:	83 e6       	ldi	r24, 0x63	; 99

	while( is_head_down() ) ;
	
	return GCSTATUS_OK;

}
    44c2:	1f 91       	pop	r17
    44c4:	0f 91       	pop	r16
    44c6:	ff 90       	pop	r15
    44c8:	ef 90       	pop	r14
    44ca:	df 90       	pop	r13
    44cc:	cf 90       	pop	r12
    44ce:	bf 90       	pop	r11
    44d0:	af 90       	pop	r10
    44d2:	9f 90       	pop	r9
    44d4:	8f 90       	pop	r8
    44d6:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
    44d8:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    44dc:	88 23       	and	r24, r24
    44de:	09 f0       	breq	.+2      	; 0x44e2 <goto_vacpad+0x3e>
    44e0:	20 c1       	rjmp	.+576    	; 0x4722 <goto_vacpad+0x27e>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    44e2:	63 ec       	ldi	r22, 0xC3	; 195
    44e4:	73 ed       	ldi	r23, 0xD3	; 211
    44e6:	81 e4       	ldi	r24, 0x41	; 65
    44e8:	91 e4       	ldi	r25, 0x41	; 65
    44ea:	2a e1       	ldi	r18, 0x1A	; 26
    44ec:	3b e8       	ldi	r19, 0x8B	; 139
    44ee:	4d e9       	ldi	r20, 0x9D	; 157
    44f0:	50 e4       	ldi	r21, 0x40	; 64
    44f2:	0f 2e       	mov	r0, r31
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	ef 2e       	mov	r14, r31
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	ff 2e       	mov	r15, r31
    44fc:	f0 e8       	ldi	r31, 0x80	; 128
    44fe:	0f 2f       	mov	r16, r31
    4500:	ff eb       	ldi	r31, 0xBF	; 191
    4502:	1f 2f       	mov	r17, r31
    4504:	f0 2d       	mov	r31, r0
    4506:	57 01       	movw	r10, r14
    4508:	68 01       	movw	r12, r16
    450a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <gotoxy>

	while( head_moving() );	
    450e:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    4512:	88 23       	and	r24, r24
    4514:	e1 f7       	brne	.-8      	; 0x450e <goto_vacpad+0x6a>
    4516:	80 e9       	ldi	r24, 0x90	; 144
    4518:	91 e0       	ldi	r25, 0x01	; 1
    451a:	01 97       	sbiw	r24, 0x01	; 1
    451c:	f1 f7       	brne	.-4      	; 0x451a <goto_vacpad+0x76>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
    4526:	24 ef       	ldi	r18, 0xF4	; 244
    4528:	31 e0       	ldi	r19, 0x01	; 1
    452a:	40 e9       	ldi	r20, 0x90	; 144
    452c:	51 e0       	ldi	r21, 0x01	; 1
    452e:	ca 01       	movw	r24, r20
    4530:	01 97       	sbiw	r24, 0x01	; 1
    4532:	f1 f7       	brne	.-4      	; 0x4530 <goto_vacpad+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4534:	21 50       	subi	r18, 0x01	; 1
    4536:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4538:	d1 f7       	brne	.-12     	; 0x452e <goto_vacpad+0x8a>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    4542:	88 23       	and	r24, r24
    4544:	09 f4       	brne	.+2      	; 0x4548 <goto_vacpad+0xa4>
    4546:	e7 c0       	rjmp	.+462    	; 0x4716 <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4548:	20 e1       	ldi	r18, 0x10	; 16
    454a:	37 e2       	ldi	r19, 0x27	; 39
    454c:	40 e9       	ldi	r20, 0x90	; 144
    454e:	51 e0       	ldi	r21, 0x01	; 1
    4550:	ca 01       	movw	r24, r20
    4552:	01 97       	sbiw	r24, 0x01	; 1
    4554:	f1 f7       	brne	.-4      	; 0x4552 <goto_vacpad+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4556:	21 50       	subi	r18, 0x01	; 1
    4558:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    455a:	d1 f7       	brne	.-12     	; 0x4550 <goto_vacpad+0xac>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    455c:	99 b0       	in	r9, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    456e:	88 23       	and	r24, r24
    4570:	09 f4       	brne	.+2      	; 0x4574 <goto_vacpad+0xd0>
    4572:	c8 c0       	rjmp	.+400    	; 0x4704 <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4574:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    4578:	88 23       	and	r24, r24
    457a:	e1 f7       	brne	.-8      	; 0x4574 <goto_vacpad+0xd0>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    457c:	6d e3       	ldi	r22, 0x3D	; 61
    457e:	7b e9       	ldi	r23, 0x9B	; 155
    4580:	8d e4       	ldi	r24, 0x4D	; 77
    4582:	91 e4       	ldi	r25, 0x41	; 65
    4584:	2c ed       	ldi	r18, 0xDC	; 220
    4586:	38 e6       	ldi	r19, 0x68	; 104
    4588:	44 e9       	ldi	r20, 0x94	; 148
    458a:	50 e4       	ldi	r21, 0x40	; 64
    458c:	0f 2e       	mov	r0, r31
    458e:	f0 e0       	ldi	r31, 0x00	; 0
    4590:	ef 2e       	mov	r14, r31
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	ff 2e       	mov	r15, r31
    4596:	f0 e8       	ldi	r31, 0x80	; 128
    4598:	0f 2f       	mov	r16, r31
    459a:	ff eb       	ldi	r31, 0xBF	; 191
    459c:	1f 2f       	mov	r17, r31
    459e:	f0 2d       	mov	r31, r0
    45a0:	57 01       	movw	r10, r14
    45a2:	68 01       	movw	r12, r16
    45a4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <gotoxy>

	while( head_moving() );	
    45a8:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    45ac:	88 23       	and	r24, r24
    45ae:	e1 f7       	brne	.-8      	; 0x45a8 <goto_vacpad+0x104>
    45b0:	80 e9       	ldi	r24, 0x90	; 144
    45b2:	91 e0       	ldi	r25, 0x01	; 1
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	f1 f7       	brne	.-4      	; 0x45b4 <goto_vacpad+0x110>
    45b8:	20 ea       	ldi	r18, 0xA0	; 160
    45ba:	3f e0       	ldi	r19, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45bc:	40 e9       	ldi	r20, 0x90	; 144
    45be:	51 e0       	ldi	r21, 0x01	; 1
    45c0:	ca 01       	movw	r24, r20
    45c2:	01 97       	sbiw	r24, 0x01	; 1
    45c4:	f1 f7       	brne	.-4      	; 0x45c2 <goto_vacpad+0x11e>
    45c6:	21 50       	subi	r18, 0x01	; 1
    45c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ca:	d1 f7       	brne	.-12     	; 0x45c0 <goto_vacpad+0x11c>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    45d4:	88 23       	and	r24, r24
    45d6:	09 f4       	brne	.+2      	; 0x45da <goto_vacpad+0x136>
    45d8:	95 c0       	rjmp	.+298    	; 0x4704 <goto_vacpad+0x260>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    45da:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    45de:	88 23       	and	r24, r24
    45e0:	e1 f3       	breq	.-8      	; 0x45da <goto_vacpad+0x136>
    45e2:	20 e1       	ldi	r18, 0x10	; 16
    45e4:	37 e2       	ldi	r19, 0x27	; 39
    45e6:	40 e9       	ldi	r20, 0x90	; 144
    45e8:	51 e0       	ldi	r21, 0x01	; 1
    45ea:	ca 01       	movw	r24, r20
    45ec:	01 97       	sbiw	r24, 0x01	; 1
    45ee:	f1 f7       	brne	.-4      	; 0x45ec <goto_vacpad+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f0:	21 50       	subi	r18, 0x01	; 1
    45f2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45f4:	d1 f7       	brne	.-12     	; 0x45ea <goto_vacpad+0x146>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <atc_fire>
    45fe:	20 e4       	ldi	r18, 0x40	; 64
    4600:	3f e1       	ldi	r19, 0x1F	; 31
    4602:	40 e9       	ldi	r20, 0x90	; 144
    4604:	51 e0       	ldi	r21, 0x01	; 1
    4606:	ca 01       	movw	r24, r20
    4608:	01 97       	sbiw	r24, 0x01	; 1
    460a:	f1 f7       	brne	.-4      	; 0x4608 <goto_vacpad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    460c:	21 50       	subi	r18, 0x01	; 1
    460e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4610:	d1 f7       	brne	.-12     	; 0x4606 <goto_vacpad+0x162>
    4612:	88 24       	eor	r8, r8
    4614:	97 fc       	sbrc	r9, 7
    4616:	6b c0       	rjmp	.+214    	; 0x46ee <goto_vacpad+0x24a>
    4618:	88 24       	eor	r8, r8
    461a:	83 94       	inc	r8

		// tool changer off
		atc_fire ( 0 );
		
		// head up
		if( head_down( 0 ) == 0 ) {
    461c:	28 e8       	ldi	r18, 0x88	; 136
    461e:	33 e1       	ldi	r19, 0x13	; 19
    4620:	40 e9       	ldi	r20, 0x90	; 144
    4622:	51 e0       	ldi	r21, 0x01	; 1
    4624:	ca 01       	movw	r24, r20
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	f1 f7       	brne	.-4      	; 0x4626 <goto_vacpad+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462a:	21 50       	subi	r18, 0x01	; 1
    462c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    462e:	d1 f7       	brne	.-12     	; 0x4624 <goto_vacpad+0x180>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    4638:	88 23       	and	r24, r24
    463a:	09 f4       	brne	.+2      	; 0x463e <goto_vacpad+0x19a>
    463c:	63 c0       	rjmp	.+198    	; 0x4704 <goto_vacpad+0x260>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    463e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    4642:	81 30       	cpi	r24, 0x01	; 1
    4644:	e1 f3       	breq	.-8      	; 0x463e <goto_vacpad+0x19a>
    4646:	28 e9       	ldi	r18, 0x98	; 152
    4648:	3a e3       	ldi	r19, 0x3A	; 58
    464a:	40 e9       	ldi	r20, 0x90	; 144
    464c:	51 e0       	ldi	r21, 0x01	; 1
    464e:	ca 01       	movw	r24, r20
    4650:	01 97       	sbiw	r24, 0x01	; 1
    4652:	f1 f7       	brne	.-4      	; 0x4650 <goto_vacpad+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4654:	21 50       	subi	r18, 0x01	; 1
    4656:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4658:	d1 f7       	brne	.-12     	; 0x464e <goto_vacpad+0x1aa>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    465a:	63 ec       	ldi	r22, 0xC3	; 195
    465c:	73 ed       	ldi	r23, 0xD3	; 211
    465e:	81 e4       	ldi	r24, 0x41	; 65
    4660:	91 e4       	ldi	r25, 0x41	; 65
    4662:	2a e1       	ldi	r18, 0x1A	; 26
    4664:	3b e8       	ldi	r19, 0x8B	; 139
    4666:	4d e9       	ldi	r20, 0x9D	; 157
    4668:	50 e4       	ldi	r21, 0x40	; 64
    466a:	0f 2e       	mov	r0, r31
    466c:	f0 e0       	ldi	r31, 0x00	; 0
    466e:	ef 2e       	mov	r14, r31
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	ff 2e       	mov	r15, r31
    4674:	f0 e8       	ldi	r31, 0x80	; 128
    4676:	0f 2f       	mov	r16, r31
    4678:	ff eb       	ldi	r31, 0xBF	; 191
    467a:	1f 2f       	mov	r17, r31
    467c:	f0 2d       	mov	r31, r0
    467e:	57 01       	movw	r10, r14
    4680:	68 01       	movw	r12, r16
    4682:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <gotoxy>

	while( head_moving() );	
    4686:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    468a:	88 23       	and	r24, r24
    468c:	e1 f7       	brne	.-8      	; 0x4686 <goto_vacpad+0x1e2>
    468e:	80 e9       	ldi	r24, 0x90	; 144
    4690:	91 e0       	ldi	r25, 0x01	; 1
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	f1 f7       	brne	.-4      	; 0x4692 <goto_vacpad+0x1ee>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
    469e:	24 ef       	ldi	r18, 0xF4	; 244
    46a0:	31 e0       	ldi	r19, 0x01	; 1
    46a2:	40 e9       	ldi	r20, 0x90	; 144
    46a4:	51 e0       	ldi	r21, 0x01	; 1
    46a6:	ca 01       	movw	r24, r20
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	f1 f7       	brne	.-4      	; 0x46a8 <goto_vacpad+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ac:	21 50       	subi	r18, 0x01	; 1
    46ae:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b0:	d1 f7       	brne	.-12     	; 0x46a6 <goto_vacpad+0x202>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    46ba:	88 23       	and	r24, r24
    46bc:	61 f1       	breq	.+88     	; 0x4716 <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    46be:	20 e1       	ldi	r18, 0x10	; 16
    46c0:	37 e2       	ldi	r19, 0x27	; 39
    46c2:	40 e9       	ldi	r20, 0x90	; 144
    46c4:	51 e0       	ldi	r21, 0x01	; 1
    46c6:	ca 01       	movw	r24, r20
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	f1 f7       	brne	.-4      	; 0x46c8 <goto_vacpad+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46cc:	21 50       	subi	r18, 0x01	; 1
    46ce:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d0:	d1 f7       	brne	.-12     	; 0x46c6 <goto_vacpad+0x222>

   _delay_ms( 1000 );


	// check vacuum
	if( vacuum_state() ) {
    46d2:	4f 99       	sbic	0x09, 7	; 9
    46d4:	19 c0       	rjmp	.+50     	; 0x4708 <goto_vacpad+0x264>
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    46d6:	88 20       	and	r8, r8
    46d8:	49 f1       	breq	.+82     	; 0x472c <goto_vacpad+0x288>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup failed\r\n"));
#endif

// oops
		head_down(0);
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
		vacuum( 0 );
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
    46ea:	85 e0       	ldi	r24, 0x05	; 5
    46ec:	ea ce       	rjmp	.-556    	; 0x44c2 <goto_vacpad+0x1e>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <atc_fire>
		
		// head up
		if( head_down( 0 ) == 0 ) {
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    46fe:	88 23       	and	r24, r24
    4700:	09 f0       	breq	.+2      	; 0x4704 <goto_vacpad+0x260>
    4702:	9d cf       	rjmp	.-198    	; 0x463e <goto_vacpad+0x19a>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4704:	85 e0       	ldi	r24, 0x05	; 5
    4706:	dd ce       	rjmp	.-582    	; 0x44c2 <goto_vacpad+0x1e>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    4708:	81 e0       	ldi	r24, 0x01	; 1
    470a:	88 16       	cp	r8, r24
    470c:	79 f0       	breq	.+30     	; 0x472c <goto_vacpad+0x288>
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
#endif

			head_down(0);
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
			vacuum( 0 );
    4716:	80 e0       	ldi	r24, 0x00	; 0
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>
    471e:	85 e0       	ldi	r24, 0x05	; 5
    4720:	d0 ce       	rjmp	.-608    	; 0x44c2 <goto_vacpad+0x1e>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    472a:	db ce       	rjmp	.-586    	; 0x44e2 <goto_vacpad+0x3e>
		}

	}	

// vacuum off
	vacuum( 0 );
    472c:	80 e0       	ldi	r24, 0x00	; 0
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    473c:	88 23       	and	r24, r24
    473e:	11 f3       	breq	.-60     	; 0x4704 <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4740:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    4744:	88 23       	and	r24, r24
    4746:	e1 f7       	brne	.-8      	; 0x4740 <goto_vacpad+0x29c>
    4748:	bc ce       	rjmp	.-648    	; 0x44c2 <goto_vacpad+0x1e>

0000474a <test_mode>:
	return GCSTATUS_OK;

}

unsigned char test_mode(void)
{
    474a:	8f 92       	push	r8
    474c:	9f 92       	push	r9
    474e:	af 92       	push	r10
    4750:	bf 92       	push	r11
    4752:	cf 92       	push	r12
    4754:	df 92       	push	r13
    4756:	ef 92       	push	r14
    4758:	ff 92       	push	r15
    475a:	0f 93       	push	r16
    475c:	1f 93       	push	r17
    475e:	cf 93       	push	r28
    4760:	df 93       	push	r29
	int i;
	double x,y;

	if( gHomed == FALSE ) {
    4762:	80 91 2f 08 	lds	r24, 0x082F
    4766:	88 23       	and	r24, r24
    4768:	71 f4       	brne	.+28     	; 0x4786 <test_mode+0x3c>
    476a:	83 e6       	ldi	r24, 0x63	; 99

	}

	return GCSTATUS_OK;

}
    476c:	df 91       	pop	r29
    476e:	cf 91       	pop	r28
    4770:	1f 91       	pop	r17
    4772:	0f 91       	pop	r16
    4774:	ff 90       	pop	r15
    4776:	ef 90       	pop	r14
    4778:	df 90       	pop	r13
    477a:	cf 90       	pop	r12
    477c:	bf 90       	pop	r11
    477e:	af 90       	pop	r10
    4780:	9f 90       	pop	r9
    4782:	8f 90       	pop	r8
    4784:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
    4786:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    478a:	88 23       	and	r24, r24
    478c:	09 f0       	breq	.+2      	; 0x4790 <test_mode+0x46>
    478e:	4a c0       	rjmp	.+148    	; 0x4824 <test_mode+0xda>
		head_down( FALSE )  ;
    4790:	88 24       	eor	r8, r8
    4792:	99 24       	eor	r9, r9
    4794:	c0 e9       	ldi	r28, 0x90	; 144
    4796:	d1 e0       	ldi	r29, 0x01	; 1
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
	
		x = rand() %12;
    4798:	0e 94 af 30 	call	0x615e	; 0x615e <rand>
    479c:	8c 01       	movw	r16, r24
		y = rand() %14 ;
    479e:	0e 94 af 30 	call	0x615e	; 0x615e <rand>
    47a2:	6c 01       	movw	r12, r24

		gotoxy( x,y ,-1,-1) ;
    47a4:	c8 01       	movw	r24, r16
    47a6:	6c e0       	ldi	r22, 0x0C	; 12
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
    47ae:	aa 27       	eor	r26, r26
    47b0:	97 fd       	sbrc	r25, 7
    47b2:	a0 95       	com	r26
    47b4:	ba 2f       	mov	r27, r26
    47b6:	bc 01       	movw	r22, r24
    47b8:	cd 01       	movw	r24, r26
    47ba:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    47be:	7b 01       	movw	r14, r22
    47c0:	8c 01       	movw	r16, r24
    47c2:	c6 01       	movw	r24, r12
    47c4:	6e e0       	ldi	r22, 0x0E	; 14
    47c6:	70 e0       	ldi	r23, 0x00	; 0
    47c8:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <__divmodhi4>
    47cc:	aa 27       	eor	r26, r26
    47ce:	97 fd       	sbrc	r25, 7
    47d0:	a0 95       	com	r26
    47d2:	ba 2f       	mov	r27, r26
    47d4:	bc 01       	movw	r22, r24
    47d6:	cd 01       	movw	r24, r26
    47d8:	0e 94 65 2d 	call	0x5aca	; 0x5aca <__floatsisf>
    47dc:	9b 01       	movw	r18, r22
    47de:	ac 01       	movw	r20, r24
    47e0:	c8 01       	movw	r24, r16
    47e2:	b7 01       	movw	r22, r14
    47e4:	0f 2e       	mov	r0, r31
    47e6:	f0 e0       	ldi	r31, 0x00	; 0
    47e8:	ef 2e       	mov	r14, r31
    47ea:	f0 e0       	ldi	r31, 0x00	; 0
    47ec:	ff 2e       	mov	r15, r31
    47ee:	f0 e8       	ldi	r31, 0x80	; 128
    47f0:	0f 2f       	mov	r16, r31
    47f2:	ff eb       	ldi	r31, 0xBF	; 191
    47f4:	1f 2f       	mov	r17, r31
    47f6:	f0 2d       	mov	r31, r0
    47f8:	57 01       	movw	r10, r14
    47fa:	68 01       	movw	r12, r16
    47fc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <gotoxy>
    4800:	28 e8       	ldi	r18, 0x88	; 136
    4802:	33 e1       	ldi	r19, 0x13	; 19
    4804:	ce 01       	movw	r24, r28
    4806:	01 97       	sbiw	r24, 0x01	; 1
    4808:	f1 f7       	brne	.-4      	; 0x4806 <test_mode+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    480a:	21 50       	subi	r18, 0x01	; 1
    480c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    480e:	d1 f7       	brne	.-12     	; 0x4804 <test_mode+0xba>
	if( is_head_down() ) {
		head_down( FALSE )  ;
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
    4810:	08 94       	sec
    4812:	81 1c       	adc	r8, r1
    4814:	91 1c       	adc	r9, r1
    4816:	88 ec       	ldi	r24, 0xC8	; 200
    4818:	88 16       	cp	r8, r24
    481a:	91 04       	cpc	r9, r1
    481c:	09 f0       	breq	.+2      	; 0x4820 <test_mode+0xd6>
    481e:	bc cf       	rjmp	.-136    	; 0x4798 <test_mode+0x4e>
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	a4 cf       	rjmp	.-184    	; 0x476c <test_mode+0x22>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    482c:	b1 cf       	rjmp	.-158    	; 0x4790 <test_mode+0x46>

0000482e <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    482e:	4f 99       	sbic	0x09, 7	; 9
    4830:	05 c0       	rjmp	.+10     	; 0x483c <vacuum_test+0xe>
		
		printPgmString(PSTR("yes\n"));
    4832:	8d ea       	ldi	r24, 0xAD	; 173
    4834:	95 e0       	ldi	r25, 0x05	; 5
    4836:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    483a:	08 95       	ret
	} else {
		printPgmString(PSTR("no\n"));
    483c:	89 ea       	ldi	r24, 0xA9	; 169
    483e:	95 e0       	ldi	r25, 0x05	; 5
    4840:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    4844:	08 95       	ret

00004846 <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    4846:	e7 e0       	ldi	r30, 0x07	; 7
    4848:	f1 e0       	ldi	r31, 0x01	; 1
    484a:	80 81       	ld	r24, Z
    484c:	80 68       	ori	r24, 0x80	; 128
    484e:	80 83       	st	Z, r24
}
    4850:	08 95       	ret

00004852 <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    4852:	80 91 2f 08 	lds	r24, 0x082F
    4856:	88 23       	and	r24, r24
    4858:	41 f1       	breq	.+80     	; 0x48aa <tape_knock+0x58>
   		return ;
   	}


	while( head_moving() );
    485a:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    485e:	88 23       	and	r24, r24
    4860:	e1 f7       	brne	.-8      	; 0x485a <tape_knock+0x8>

	set_busy( TRUE );
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    4868:	80 91 08 01 	lds	r24, 0x0108
    486c:	8f 77       	andi	r24, 0x7F	; 127
    486e:	80 93 08 01 	sts	0x0108, r24
    4872:	20 ed       	ldi	r18, 0xD0	; 208
    4874:	37 e0       	ldi	r19, 0x07	; 7
    4876:	40 e9       	ldi	r20, 0x90	; 144
    4878:	51 e0       	ldi	r21, 0x01	; 1
    487a:	ca 01       	movw	r24, r20
    487c:	01 97       	sbiw	r24, 0x01	; 1
    487e:	f1 f7       	brne	.-4      	; 0x487c <tape_knock+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4880:	21 50       	subi	r18, 0x01	; 1
    4882:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4884:	d1 f7       	brne	.-12     	; 0x487a <tape_knock+0x28>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    4886:	80 91 08 01 	lds	r24, 0x0108
    488a:	80 68       	ori	r24, 0x80	; 128
    488c:	80 93 08 01 	sts	0x0108, r24
    4890:	20 ed       	ldi	r18, 0xD0	; 208
    4892:	37 e0       	ldi	r19, 0x07	; 7
    4894:	40 e9       	ldi	r20, 0x90	; 144
    4896:	51 e0       	ldi	r21, 0x01	; 1
    4898:	ca 01       	movw	r24, r20
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	f1 f7       	brne	.-4      	; 0x489a <tape_knock+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    489e:	21 50       	subi	r18, 0x01	; 1
    48a0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48a2:	d1 f7       	brne	.-12     	; 0x4898 <tape_knock+0x46>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>
    48aa:	08 95       	ret

000048ac <putdown_part>:
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    48ac:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    48b0:	88 23       	and	r24, r24
    48b2:	09 f0       	breq	.+2      	; 0x48b6 <putdown_part+0xa>
    48b4:	3a c0       	rjmp	.+116    	; 0x492a <putdown_part+0x7e>
		return GCSTATUS_FAILED_COMMAND;
	}

	// wait til head stops
	while( head_moving() );
    48b6:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    48ba:	88 23       	and	r24, r24
    48bc:	e1 f7       	brne	.-8      	; 0x48b6 <putdown_part+0xa>

	// maybe?
	while( get_busy() );
    48be:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <get_busy>
    48c2:	89 2b       	or	r24, r25
    48c4:	e1 f7       	brne	.-8      	; 0x48be <putdown_part+0x12>

	set_busy( TRUE ) ;
    48c6:	81 e0       	ldi	r24, 0x01	; 1
    48c8:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>
    48cc:	20 e2       	ldi	r18, 0x20	; 32
    48ce:	33 e0       	ldi	r19, 0x03	; 3
    48d0:	40 e9       	ldi	r20, 0x90	; 144
    48d2:	51 e0       	ldi	r21, 0x01	; 1
    48d4:	ca 01       	movw	r24, r20
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	f1 f7       	brne	.-4      	; 0x48d6 <putdown_part+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48da:	21 50       	subi	r18, 0x01	; 1
    48dc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48de:	d1 f7       	brne	.-12     	; 0x48d4 <putdown_part+0x28>
	}

#endif

	// push head down
	head_down( 1 );
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    48e8:	2c ed       	ldi	r18, 0xDC	; 220
    48ea:	35 e0       	ldi	r19, 0x05	; 5
    48ec:	40 e9       	ldi	r20, 0x90	; 144
    48ee:	51 e0       	ldi	r21, 0x01	; 1
    48f0:	ca 01       	movw	r24, r20
    48f2:	01 97       	sbiw	r24, 0x01	; 1
    48f4:	f1 f7       	brne	.-4      	; 0x48f2 <putdown_part+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48f6:	21 50       	subi	r18, 0x01	; 1
    48f8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48fa:	d1 f7       	brne	.-12     	; 0x48f0 <putdown_part+0x44>

	// settle after head down ( probably doesn't need it  )
	_delay_ms( 150 );

	// vacuum off
	vacuum ( 0 );
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>

	// head up
	head_down ( 0 ) ;
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    490c:	20 e2       	ldi	r18, 0x20	; 32
    490e:	33 e0       	ldi	r19, 0x03	; 3
    4910:	40 e9       	ldi	r20, 0x90	; 144
    4912:	51 e0       	ldi	r21, 0x01	; 1
    4914:	ca 01       	movw	r24, r20
    4916:	01 97       	sbiw	r24, 0x01	; 1
    4918:	f1 f7       	brne	.-4      	; 0x4916 <putdown_part+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    491a:	21 50       	subi	r18, 0x01	; 1
    491c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    491e:	d1 f7       	brne	.-12     	; 0x4914 <putdown_part+0x68>

	_delay_ms( 80 );

	set_busy( FALSE) ;
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>
    4926:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    4928:	08 95       	ret
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    492a:	85 e0       	ldi	r24, 0x05	; 5
    492c:	08 95       	ret

0000492e <pickup_part>:
{
	unsigned char failedCounter;


	// wait til head stops
	while( head_moving() );
    492e:	0e 94 2b 19 	call	0x3256	; 0x3256 <head_moving>
    4932:	88 23       	and	r24, r24
    4934:	e1 f7       	brne	.-8      	; 0x492e <pickup_part>

	// maybe?
	while( get_busy() );
    4936:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <get_busy>
    493a:	89 2b       	or	r24, r25
    493c:	e1 f7       	brne	.-8      	; 0x4936 <pickup_part+0x8>

	// count number of pickup fails
	failedCounter = 0 ;


	if( is_head_down() ){
    493e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <is_head_down>
    4942:	88 23       	and	r24, r24
    4944:	11 f0       	breq	.+4      	; 0x494a <pickup_part+0x1c>
    4946:	85 e0       	ldi	r24, 0x05	; 5
    4948:	08 95       	ret
		return GCSTATUS_FAILED_COMMAND;
	}

	set_busy( TRUE ) ;
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>
	{
// advance part, waits til head has done
// trying tape_knock after pickup		tape_knock();

		// vacuum on
		vacuum ( 1 );
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <vacuum>

		// push head down
		head_down( 1 );
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>
    4960:	2c ed       	ldi	r18, 0xDC	; 220
    4962:	35 e0       	ldi	r19, 0x05	; 5
    4964:	40 e9       	ldi	r20, 0x90	; 144
    4966:	51 e0       	ldi	r21, 0x01	; 1
    4968:	ca 01       	movw	r24, r20
    496a:	01 97       	sbiw	r24, 0x01	; 1
    496c:	f1 f7       	brne	.-4      	; 0x496a <pickup_part+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    496e:	21 50       	subi	r18, 0x01	; 1
    4970:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4972:	d1 f7       	brne	.-12     	; 0x4968 <pickup_part+0x3a>

		//settle (probably doesn't need this)
		_delay_ms( 150 );

		// head up
		head_down ( 0 ) ;
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <head_down>

// advance part, waits til head has done
 		tape_knock();
    497c:	0e 94 29 24 	call	0x4852	; 0x4852 <tape_knock>
    4980:	80 e4       	ldi	r24, 0x40	; 64
    4982:	9c e9       	ldi	r25, 0x9C	; 156
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	f1 f7       	brne	.-4      	; 0x4984 <pickup_part+0x56>

	}

	_delay_ms( 10 );

	set_busy( FALSE ) ;
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	0e 94 ed 17 	call	0x2fda	; 0x2fda <set_busy>
    498e:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    4990:	08 95       	ret

00004992 <usb_setEventHandler>:

static usb_eventHandler * eventHandler;

void usb_setEventHandler(usb_eventHandler * handler)
{
        eventHandler = handler;
    4992:	90 93 5c 09 	sts	0x095C, r25
    4996:	80 93 5b 09 	sts	0x095B, r24
}
    499a:	08 95       	ret

0000499c <usb_fireEvent>:
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void usb_fireEvent(usb_device * device, usb_eventType event)
{
        eventHandler(device, event);
    499c:	e0 91 5b 09 	lds	r30, 0x095B
    49a0:	f0 91 5c 09 	lds	r31, 0x095C
    49a4:	19 95       	eicall
}
    49a6:	08 95       	ret

000049a8 <usb_initEndPoint>:

void usb_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
    49a8:	fc 01       	movw	r30, r24
        endpoint->address = address;
    49aa:	60 83       	st	Z, r22
        endpoint->sendToggle = bmSNDTOG0;
    49ac:	80 e4       	ldi	r24, 0x40	; 64
    49ae:	84 83       	std	Z+4, r24	; 0x04
        endpoint->receiveToggle = bmRCVTOG0;
    49b0:	80 e1       	ldi	r24, 0x10	; 16
    49b2:	85 83       	std	Z+5, r24	; 0x05
}
    49b4:	08 95       	ret

000049b6 <usb_initDevice>:

    return 0;
}

int usb_initDevice(usb_device * device, int configuration)
{
    49b6:	ef 92       	push	r14
    49b8:	ff 92       	push	r15
    49ba:	0f 93       	push	r16
    49bc:	1f 93       	push	r17
    49be:	df 93       	push	r29
    49c0:	cf 93       	push	r28
    49c2:	00 d0       	rcall	.+0      	; 0x49c4 <usb_initDevice+0xe>
    49c4:	0f 92       	push	r0
    49c6:	cd b7       	in	r28, 0x3d	; 61
    49c8:	de b7       	in	r29, 0x3e	; 62
    49ca:	7c 01       	movw	r14, r24
        char buf[4];

        uint8_t rcode;

        // Set the configuration for this USB device.
        rcode = usb_setConfiguration(device, configuration);
    49cc:	0e 94 be 29 	call	0x537c	; 0x537c <usb_setConfiguration>
        if (rcode<0) return rcode;

        // Get the first supported language.
        rcode = usb_getString(device, 0, 0, 4, buf);
    49d0:	c7 01       	movw	r24, r14
    49d2:	60 e0       	ldi	r22, 0x00	; 0
    49d4:	40 e0       	ldi	r20, 0x00	; 0
    49d6:	24 e0       	ldi	r18, 0x04	; 4
    49d8:	30 e0       	ldi	r19, 0x00	; 0
    49da:	8e 01       	movw	r16, r28
    49dc:	0f 5f       	subi	r16, 0xFF	; 255
    49de:	1f 4f       	sbci	r17, 0xFF	; 255
    49e0:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <usb_getString>
        if (rcode<0) return rcode;
    device->firstStringLanguage = (buf[3] << 8) | buf[2];
    49e4:	3c 81       	ldd	r19, Y+4	; 0x04
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	4b 81       	ldd	r20, Y+3	; 0x03
    49ea:	50 e0       	ldi	r21, 0x00	; 0
    49ec:	24 2b       	or	r18, r20
    49ee:	35 2b       	or	r19, r21
    49f0:	f7 01       	movw	r30, r14
    49f2:	35 8b       	std	Z+21, r19	; 0x15
    49f4:	24 8b       	std	Z+20, r18	; 0x14

    return rcode;
}
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	0f 90       	pop	r0
    4a00:	cf 91       	pop	r28
    4a02:	df 91       	pop	r29
    4a04:	1f 91       	pop	r17
    4a06:	0f 91       	pop	r16
    4a08:	ff 90       	pop	r15
    4a0a:	ef 90       	pop	r14
    4a0c:	08 95       	ret

00004a0e <usb_printDeviceInfo>:

/**
 * Print USB device information.
 */
int usb_printDeviceInfo(usb_device * device)
{
    4a0e:	df 93       	push	r29
    4a10:	cf 93       	push	r28
    4a12:	cd b7       	in	r28, 0x3d	; 61
    4a14:	de b7       	in	r29, 0x3e	; 62
    4a16:	62 97       	sbiw	r28, 0x12	; 18
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	f8 94       	cli
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	cd bf       	out	0x3d, r28	; 61
        int rcode;
    // char buf[128];

    // Read the device descriptor
        usb_deviceDescriptor deviceDescriptor;
    rcode = usb_getDeviceDescriptor(device, &deviceDescriptor);
    4a22:	be 01       	movw	r22, r28
    4a24:	6f 5f       	subi	r22, 0xFF	; 255
    4a26:	7f 4f       	sbci	r23, 0xFF	; 255
    4a28:	0e 94 47 2a 	call	0x548e	; 0x548e <usb_getDeviceDescriptor>
    usb_getString(device, deviceDescriptor.iSerialNumber, device->firstStringLanguage, 128, buf);
    avr_serialPrintf("Serial number: %s\n", buf);
    */

    return 0;
}
    4a2c:	62 96       	adiw	r28, 0x12	; 18
    4a2e:	0f b6       	in	r0, 0x3f	; 63
    4a30:	f8 94       	cli
    4a32:	de bf       	out	0x3e, r29	; 62
    4a34:	0f be       	out	0x3f, r0	; 63
    4a36:	cd bf       	out	0x3d, r28	; 61
    4a38:	cf 91       	pop	r28
    4a3a:	df 91       	pop	r29
    4a3c:	08 95       	ret

00004a3e <max3421e_write>:
 * @param value value to write.
 */
void max3421e_write(uint8_t reg, uint8_t value)
{
        // Pull slave select low to indicate start of transfer.
        MAX_SS(0);
    4a3e:	2c 98       	cbi	0x05, 4	; 5

        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
    4a40:	82 60       	ori	r24, 0x02	; 2
    4a42:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    4a44:	0d b4       	in	r0, 0x2d	; 45
    4a46:	07 fe       	sbrs	r0, 7
    4a48:	fd cf       	rjmp	.-6      	; 0x4a44 <max3421e_write+0x6>

        // Transfer value byte.
        SPDR = value;
    4a4a:	6e bd       	out	0x2e, r22	; 46
        while (!(SPSR & (1 << SPIF)));
    4a4c:	0d b4       	in	r0, 0x2d	; 45
    4a4e:	07 fe       	sbrs	r0, 7
    4a50:	fd cf       	rjmp	.-6      	; 0x4a4c <max3421e_write+0xe>

        // Pull slave select high to indicate end of transfer.
        MAX_SS(1);
    4a52:	2c 9a       	sbi	0x05, 4	; 5

        return;
}
    4a54:	08 95       	ret

00004a56 <max3421e_writeMultiple>:
 * @return a pointer to values, incremented by the number of bytes written (values + length).
 */
uint8_t * max3421e_writeMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
        // Pull slave select low to indicate start of transfer.
        MAX_SS(0);
    4a56:	2c 98       	cbi	0x05, 4	; 5

        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
    4a58:	82 60       	ori	r24, 0x02	; 2
    4a5a:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    4a5c:	0d b4       	in	r0, 0x2d	; 45
    4a5e:	07 fe       	sbrs	r0, 7
    4a60:	fd cf       	rjmp	.-6      	; 0x4a5c <max3421e_writeMultiple+0x6>

        // Transfer values.
        while (count--)
    4a62:	66 23       	and	r22, r22
    4a64:	89 f0       	breq	.+34     	; 0x4a88 <max3421e_writeMultiple+0x32>
    4a66:	61 50       	subi	r22, 0x01	; 1
    4a68:	fa 01       	movw	r30, r20
    4a6a:	70 e0       	ldi	r23, 0x00	; 0
    4a6c:	6f 5f       	subi	r22, 0xFF	; 255
    4a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a70:	64 0f       	add	r22, r20
    4a72:	75 1f       	adc	r23, r21
        {
                // Send next value byte.
                SPDR = (*values);
    4a74:	80 81       	ld	r24, Z
    4a76:	8e bd       	out	0x2e, r24	; 46
                while (!(SPSR & (1 << SPIF)));
    4a78:	0d b4       	in	r0, 0x2d	; 45
    4a7a:	07 fe       	sbrs	r0, 7
    4a7c:	fd cf       	rjmp	.-6      	; 0x4a78 <max3421e_writeMultiple+0x22>

                values++;
    4a7e:	31 96       	adiw	r30, 0x01	; 1
        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
        while (!(SPSR & (1 << SPIF)));

        // Transfer values.
        while (count--)
    4a80:	e6 17       	cp	r30, r22
    4a82:	f7 07       	cpc	r31, r23
    4a84:	b9 f7       	brne	.-18     	; 0x4a74 <max3421e_writeMultiple+0x1e>
    4a86:	af 01       	movw	r20, r30

                values++;
        }

        // Pull slave select high to indicate end of transfer.
        MAX_SS(1);
    4a88:	2c 9a       	sbi	0x05, 4	; 5

        return (values);
}
    4a8a:	ca 01       	movw	r24, r20
    4a8c:	08 95       	ret

00004a8e <max3421e_read>:
 * @return result value.
 */
uint8_t max3421e_read(uint8_t reg)
{
        // Pull slave-select high to initiate transfer.
        MAX_SS(0);
    4a8e:	2c 98       	cbi	0x05, 4	; 5

        // Send a command byte containing the register number.
        SPDR = reg;
    4a90:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    4a92:	0d b4       	in	r0, 0x2d	; 45
    4a94:	07 fe       	sbrs	r0, 7
    4a96:	fd cf       	rjmp	.-6      	; 0x4a92 <max3421e_read+0x4>

        // Send an empty byte while reading.
        SPDR = 0;
    4a98:	1e bc       	out	0x2e, r1	; 46
        while (!(SPSR & (1 << SPIF)));
    4a9a:	0d b4       	in	r0, 0x2d	; 45
    4a9c:	07 fe       	sbrs	r0, 7
    4a9e:	fd cf       	rjmp	.-6      	; 0x4a9a <max3421e_read+0xc>

        // Pull slave-select low to signal transfer complete.
        MAX_SS(1);
    4aa0:	2c 9a       	sbi	0x05, 4	; 5

        // Return result byte.
        return (SPDR);
    4aa2:	8e b5       	in	r24, 0x2e	; 46
}
    4aa4:	08 95       	ret

00004aa6 <max3421e_readMultiple>:
 * @return pointer to the input buffer + count.
 */
uint8_t * max3421e_readMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
        // Pull slave-select high to initiate transfer.
        MAX_SS(0);
    4aa6:	2c 98       	cbi	0x05, 4	; 5

        // Send a command byte containing the register number.
        SPDR = reg;
    4aa8:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF))); //wait
    4aaa:	0d b4       	in	r0, 0x2d	; 45
    4aac:	07 fe       	sbrs	r0, 7
    4aae:	fd cf       	rjmp	.-6      	; 0x4aaa <max3421e_readMultiple+0x4>

        // Read [count] bytes.
        while (count--)
    4ab0:	66 23       	and	r22, r22
    4ab2:	89 f0       	breq	.+34     	; 0x4ad6 <max3421e_readMultiple+0x30>
    4ab4:	61 50       	subi	r22, 0x01	; 1
    4ab6:	fa 01       	movw	r30, r20
    4ab8:	70 e0       	ldi	r23, 0x00	; 0
    4aba:	6f 5f       	subi	r22, 0xFF	; 255
    4abc:	7f 4f       	sbci	r23, 0xFF	; 255
    4abe:	64 0f       	add	r22, r20
    4ac0:	75 1f       	adc	r23, r21
        {
                // Send empty byte while reading.
                SPDR = 0;
    4ac2:	1e bc       	out	0x2e, r1	; 46
                while (!(SPSR & (1 << SPIF)));
    4ac4:	0d b4       	in	r0, 0x2d	; 45
    4ac6:	07 fe       	sbrs	r0, 7
    4ac8:	fd cf       	rjmp	.-6      	; 0x4ac4 <max3421e_readMultiple+0x1e>

                *values = SPDR;
    4aca:	8e b5       	in	r24, 0x2e	; 46
    4acc:	81 93       	st	Z+, r24
        // Send a command byte containing the register number.
        SPDR = reg;
        while (!(SPSR & (1 << SPIF))); //wait

        // Read [count] bytes.
        while (count--)
    4ace:	e6 17       	cp	r30, r22
    4ad0:	f7 07       	cpc	r31, r23
    4ad2:	b9 f7       	brne	.-18     	; 0x4ac2 <max3421e_readMultiple+0x1c>
    4ad4:	af 01       	movw	r20, r30
                *values = SPDR;
                values++;
        }

        // Pull slave-select low to signal transfer complete.
        MAX_SS(1);
    4ad6:	2c 9a       	sbi	0x05, 4	; 5

        // Return the byte array + count.
        return (values);
}
    4ad8:	ca 01       	movw	r24, r20
    4ada:	08 95       	ret

00004adc <max3421e_getVbusState>:
 * @return the status of Vbus.
 */
uint8_t max3421e_getVbusState()
{
        return vbusState;
}
    4adc:	80 91 5d 09 	lds	r24, 0x095D
    4ae0:	08 95       	ret

00004ae2 <max3421e_busprobe>:
 * Probes the bus to determine device presence and speed, and switches host to this speed.
 */
void max3421e_busprobe(void)
{
        uint8_t bus_sample;
        bus_sample = max3421e_read(MAX_REG_HRSL); //Get J,K status
    4ae2:	88 ef       	ldi	r24, 0xF8	; 248
    4ae4:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the uint8_t

        switch (bus_sample)
    4ae8:	80 7c       	andi	r24, 0xC0	; 192
    4aea:	80 34       	cpi	r24, 0x40	; 64
    4aec:	81 f0       	breq	.+32     	; 0x4b0e <max3421e_busprobe+0x2c>
    4aee:	81 34       	cpi	r24, 0x41	; 65
    4af0:	28 f0       	brcs	.+10     	; 0x4afc <max3421e_busprobe+0x1a>
    4af2:	80 38       	cpi	r24, 0x80	; 128
    4af4:	c9 f0       	breq	.+50     	; 0x4b28 <max3421e_busprobe+0x46>
    4af6:	80 3c       	cpi	r24, 0xC0	; 192
    4af8:	31 f0       	breq	.+12     	; 0x4b06 <max3421e_busprobe+0x24>
    4afa:	08 95       	ret
    4afc:	88 23       	and	r24, r24
    4afe:	09 f5       	brne	.+66     	; 0x4b42 <max3421e_busprobe+0x60>
                break;
        case (bmSE1): //illegal state
                vbusState = SE1;
                break;
        case (bmSE0): //disconnected state
                vbusState = SE0;
    4b00:	10 92 5d 09 	sts	0x095D, r1
    4b04:	08 95       	ret
                        max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
                        vbusState = FSHOST;
                }
                break;
        case (bmSE1): //illegal state
                vbusState = SE1;
    4b06:	81 e0       	ldi	r24, 0x01	; 1
    4b08:	80 93 5d 09 	sts	0x095D, r24
    4b0c:	08 95       	ret
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST); //start low-speed host
                        vbusState = LSHOST;
                }
                break;
        case (bmKSTATUS):
                if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    4b0e:	88 ed       	ldi	r24, 0xD8	; 216
    4b10:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    4b14:	81 fd       	sbrc	r24, 1
    4b16:	0d c0       	rjmp	.+26     	; 0x4b32 <max3421e_busprobe+0x50>
                {
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
    4b18:	88 ed       	ldi	r24, 0xD8	; 216
    4b1a:	6b ec       	ldi	r22, 0xCB	; 203
    4b1c:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
                        vbusState = LSHOST;
    4b20:	83 e0       	ldi	r24, 0x03	; 3
    4b22:	80 93 5d 09 	sts	0x095D, r24
    4b26:	08 95       	ret

        switch (bus_sample)
        {
        //start full-speed or low-speed host
        case (bmJSTATUS):
                if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    4b28:	88 ed       	ldi	r24, 0xD8	; 216
    4b2a:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    4b2e:	81 fd       	sbrc	r24, 1
    4b30:	f3 cf       	rjmp	.-26     	; 0x4b18 <max3421e_busprobe+0x36>
                {
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
                        vbusState = LSHOST;
                } else
                {
                        max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
    4b32:	88 ed       	ldi	r24, 0xD8	; 216
    4b34:	69 ec       	ldi	r22, 0xC9	; 201
    4b36:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
                        vbusState = FSHOST;
    4b3a:	82 e0       	ldi	r24, 0x02	; 2
    4b3c:	80 93 5d 09 	sts	0x095D, r24
    4b40:	08 95       	ret
    4b42:	08 95       	ret

00004b44 <max3421e_interruptHandler>:

/**
 * Interrupt handler.
 */
uint8_t max3421e_interruptHandler(void)
{
    4b44:	1f 93       	push	r17
        uint8_t interruptStatus;
        uint8_t HIRQ_sendback = 0x00;

        // Determine interrupt source.
        interruptStatus = max3421e_read(MAX_REG_HIRQ);
    4b46:	88 ec       	ldi	r24, 0xC8	; 200
    4b48:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>

        if (interruptStatus & bmFRAMEIRQ)
    4b4c:	86 fd       	sbrc	r24, 6
    4b4e:	0d c0       	rjmp	.+26     	; 0x4b6a <max3421e_interruptHandler+0x26>
    4b50:	10 e0       	ldi	r17, 0x00	; 0
        {
                //->1ms SOF interrupt handler
                HIRQ_sendback |= bmFRAMEIRQ;
        }

        if (interruptStatus & bmCONDETIRQ)
    4b52:	85 ff       	sbrs	r24, 5
    4b54:	03 c0       	rjmp	.+6      	; 0x4b5c <max3421e_interruptHandler+0x18>
        {
                max3421e_busprobe();
    4b56:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <max3421e_busprobe>

                HIRQ_sendback |= bmCONDETIRQ;
    4b5a:	10 62       	ori	r17, 0x20	; 32
        }

        // End HIRQ interrupts handling, clear serviced IRQs
        max3421e_write(MAX_REG_HIRQ, HIRQ_sendback);
    4b5c:	88 ec       	ldi	r24, 0xC8	; 200
    4b5e:	61 2f       	mov	r22, r17
    4b60:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        return (HIRQ_sendback);
}
    4b64:	81 2f       	mov	r24, r17
    4b66:	1f 91       	pop	r17
    4b68:	08 95       	ret
        uint8_t HIRQ_sendback = 0x00;

        // Determine interrupt source.
        interruptStatus = max3421e_read(MAX_REG_HIRQ);

        if (interruptStatus & bmFRAMEIRQ)
    4b6a:	10 e4       	ldi	r17, 0x40	; 64
    4b6c:	f2 cf       	rjmp	.-28     	; 0x4b52 <max3421e_interruptHandler+0xe>

00004b6e <max3421e_gpxInterruptHandler>:
 * GPX interrupt handler
 */
uint8_t max3421e_gpxInterruptHandler(void)
{
        //read GPIN IRQ register
        uint8_t interruptStatus = max3421e_read(MAX_REG_GPINIRQ);
    4b6e:	80 eb       	ldi	r24, 0xB0	; 176
    4b70:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
        //        vbusPwr( ON );
        //        regWr( rGPINIRQ, bmGPINIRQ7 );
        //    }

        return (interruptStatus);
}
    4b74:	08 95       	ret

00004b76 <max3421e_poll>:
/**
 * MAX3421 state change task and interrupt handler.
 * @return error code or 0 if successful.
 */
uint8_t max3421e_poll(void)
{
    4b76:	1f 93       	push	r17
        uint8_t rcode = 0;

        // Check interrupt.
        if (MAX_INT() == 0)
    4b78:	80 91 02 01 	lds	r24, 0x0102
    4b7c:	86 ff       	sbrs	r24, 6
    4b7e:	0a c0       	rjmp	.+20     	; 0x4b94 <max3421e_poll+0x1e>
    4b80:	10 e0       	ldi	r17, 0x00	; 0
                rcode = max3421e_interruptHandler();

        if (MAX_GPX() == 0)
    4b82:	80 91 02 01 	lds	r24, 0x0102
    4b86:	85 fd       	sbrc	r24, 5
    4b88:	02 c0       	rjmp	.+4      	; 0x4b8e <max3421e_poll+0x18>
                max3421e_gpxInterruptHandler();
    4b8a:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <max3421e_gpxInterruptHandler>

        return (rcode);
}
    4b8e:	81 2f       	mov	r24, r17
    4b90:	1f 91       	pop	r17
    4b92:	08 95       	ret
{
        uint8_t rcode = 0;

        // Check interrupt.
        if (MAX_INT() == 0)
                rcode = max3421e_interruptHandler();
    4b94:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <max3421e_interruptHandler>
    4b98:	18 2f       	mov	r17, r24
    4b9a:	f3 cf       	rjmp	.-26     	; 0x4b82 <max3421e_poll+0xc>

00004b9c <max3421e_reset>:
/**
 * Resets the max3412e. Sets the chip reset bit, SPI configuration is not affected.
 * @return true iff success.
 */
boolean max3421e_reset(void)
{
    4b9c:	1f 93       	push	r17
        uint8_t tmp = 0;

        // Chip reset. This stops the oscillator
        max3421e_write(MAX_REG_USBCTL, bmCHIPRES);
    4b9e:	88 e7       	ldi	r24, 0x78	; 120
    4ba0:	60 e2       	ldi	r22, 0x20	; 32
    4ba2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        // Remove the reset
        max3421e_write(MAX_REG_USBCTL, 0x00);
    4ba6:	88 e7       	ldi	r24, 0x78	; 120
    4ba8:	60 e0       	ldi	r22, 0x00	; 0
    4baa:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        avr_delay(10);
    4bae:	6a e0       	ldi	r22, 0x0A	; 10
    4bb0:	70 e0       	ldi	r23, 0x00	; 0
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <avr_delay>
    4bba:	10 e0       	ldi	r17, 0x00	; 0
    4bbc:	02 c0       	rjmp	.+4      	; 0x4bc2 <max3421e_reset+0x26>

        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    4bbe:	11 50       	subi	r17, 0x01	; 1
        {
                // Timeout after 256 attempts.
                tmp++;
                if (tmp == 0)
    4bc0:	41 f0       	breq	.+16     	; 0x4bd2 <max3421e_reset+0x36>
        max3421e_write(MAX_REG_USBCTL, 0x00);

        avr_delay(10);

        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    4bc2:	88 e6       	ldi	r24, 0x68	; 104
    4bc4:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    4bc8:	80 ff       	sbrs	r24, 0
    4bca:	f9 cf       	rjmp	.-14     	; 0x4bbe <max3421e_reset+0x22>
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
                        return (false);
        }

        // Success.
        return (true);
}
    4bce:	1f 91       	pop	r17
    4bd0:	08 95       	ret
        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
        {
                // Timeout after 256 attempts.
                tmp++;
                if (tmp == 0)
    4bd2:	80 e0       	ldi	r24, 0x00	; 0
                        return (false);
        }

        // Success.
        return (true);
}
    4bd4:	1f 91       	pop	r17
    4bd6:	08 95       	ret

00004bd8 <max3421e_powerOn>:
 * Initialises the max3421e after power-on.
 */
void max3421e_powerOn(void)
{
        // Configure full-duplex SPI, interrupt pulse.
        max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
    4bd8:	88 e8       	ldi	r24, 0x88	; 136
    4bda:	6a e1       	ldi	r22, 0x1A	; 26
    4bdc:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        // Stop/start the oscillator.
        if (max3421e_reset() == false)
    4be0:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <max3421e_reset>
    4be4:	88 23       	and	r24, r24
    4be6:	e1 f0       	breq	.+56     	; 0x4c20 <max3421e_powerOn+0x48>
		      	printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));

        // Configure host operation.
        max3421e_write(MAX_REG_MODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ ); // set pull-downs, Host, Separate GPIN IRQ on GPX
    4be8:	88 ed       	ldi	r24, 0xD8	; 216
    4bea:	61 ed       	ldi	r22, 0xD1	; 209
    4bec:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
        max3421e_write(MAX_REG_HIEN, bmCONDETIE | bmFRAMEIE ); //connection detection
    4bf0:	80 ed       	ldi	r24, 0xD0	; 208
    4bf2:	60 e6       	ldi	r22, 0x60	; 96
    4bf4:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        // Check if device is connected.
        max3421e_write(MAX_REG_HCTL, bmSAMPLEBUS ); // sample USB bus
    4bf8:	88 ee       	ldi	r24, 0xE8	; 232
    4bfa:	64 e0       	ldi	r22, 0x04	; 4
    4bfc:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
        while (!(max3421e_read(MAX_REG_HCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    4c00:	88 ee       	ldi	r24, 0xE8	; 232
    4c02:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    4c06:	82 ff       	sbrs	r24, 2
    4c08:	fb cf       	rjmp	.-10     	; 0x4c00 <max3421e_powerOn+0x28>

        max3421e_busprobe(); //check if anything is connected
    4c0a:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <max3421e_busprobe>
        max3421e_write(MAX_REG_HIRQ, bmCONDETIRQ ); //clear connection detect interrupt
    4c0e:	88 ec       	ldi	r24, 0xC8	; 200
    4c10:	60 e2       	ldi	r22, 0x20	; 32
    4c12:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        // Enable interrupt pin.
        max3421e_write(MAX_REG_CPUCTL, 0x01);
    4c16:	80 e8       	ldi	r24, 0x80	; 128
    4c18:	61 e0       	ldi	r22, 0x01	; 1
    4c1a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
}
    4c1e:	08 95       	ret
        // Configure full-duplex SPI, interrupt pulse.
        max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX

        // Stop/start the oscillator.
        if (max3421e_reset() == false)
		      	printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));
    4c20:	82 eb       	ldi	r24, 0xB2	; 178
    4c22:	95 e0       	ldi	r25, 0x05	; 5
    4c24:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <printPgmString>
    4c28:	df cf       	rjmp	.-66     	; 0x4be8 <max3421e_powerOn+0x10>

00004c2a <max3421e_init>:
 * Initialises the max3421e host shield. Initialises the SPI bus and sets the required pin directions.
 * Must be called before powerOn.
 */
void max3421e_init()
{
        spi_begin();
    4c2a:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <spi_begin>

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)

        // Set MAX_INT and MAX_GPX pins to input mode.
        DDRH &= ~(0x40 | 0x20);
    4c2e:	e1 e0       	ldi	r30, 0x01	; 1
    4c30:	f1 e0       	ldi	r31, 0x01	; 1
    4c32:	80 81       	ld	r24, Z
    4c34:	8f 79       	andi	r24, 0x9F	; 159
    4c36:	80 83       	st	Z, r24

        // Set SPI !SS pint to output mode.
        DDRB |= 0x10;
    4c38:	24 9a       	sbi	0x04, 4	; 4

        // Set RESET pin to output
        DDRH |= 0x10;
    4c3a:	80 81       	ld	r24, Z
    4c3c:	80 61       	ori	r24, 0x10	; 16
    4c3e:	80 83       	st	Z, r24

#endif


        // Pull SPI !SS high
        MAX_SS(1);
    4c40:	2c 9a       	sbi	0x05, 4	; 5

        // Reset
        MAX_RESET(1);
    4c42:	e2 e0       	ldi	r30, 0x02	; 2
    4c44:	f1 e0       	ldi	r31, 0x01	; 1
    4c46:	80 81       	ld	r24, Z
    4c48:	80 61       	ori	r24, 0x10	; 16
    4c4a:	80 83       	st	Z, r24
}
    4c4c:	08 95       	ret

00004c4e <spi_begin>:
        // MISO pin automatically overrides to INPUT.
        // When the SS pin is set as OUTPUT, it can be used as
        // a general purpose output port (it doesn't influence
        // SPI operations).

        SPI_PORT_DIR |= SPI_BIT_MOSI | SPI_BIT_SCK | SPI_BIT_SS;
    4c4e:	84 b1       	in	r24, 0x04	; 4
    4c50:	87 60       	ori	r24, 0x07	; 7
    4c52:	84 b9       	out	0x04, r24	; 4
        SPI_PORT_DIR &= ~SPI_BIT_MISO;
    4c54:	23 98       	cbi	0x04, 3	; 4

        SPI_PORT &= ~(SPI_BIT_MOSI | SPI_BIT_SCK);
    4c56:	85 b1       	in	r24, 0x05	; 5
    4c58:	89 7f       	andi	r24, 0xF9	; 249
    4c5a:	85 b9       	out	0x05, r24	; 5
        SPI_PORT |= SPI_BIT_SS;
    4c5c:	28 9a       	sbi	0x05, 0	; 5

        // Warning: if the SS pin ever becomes a LOW INPUT then SPI
        // automatically switches to Slave, so the data direction of
        // the SS pin MUST be kept as OUTPUT.
        SPCR |= _BV(MSTR);
    4c5e:	8c b5       	in	r24, 0x2c	; 44
    4c60:	80 61       	ori	r24, 0x10	; 16
    4c62:	8c bd       	out	0x2c, r24	; 44
        SPCR |= _BV(SPE);
    4c64:	8c b5       	in	r24, 0x2c	; 44
    4c66:	80 64       	ori	r24, 0x40	; 64
    4c68:	8c bd       	out	0x2c, r24	; 44
}
    4c6a:	08 95       	ret

00004c6c <__vector_23>:
volatile uint32_t timer0_millis = 0;
static uint8_t timer0_fract = 0;
volatile uint16_t timer1_overflow_count = 0x0;

SIGNAL(TIMER0_OVF_vect)
{
    4c6c:	1f 92       	push	r1
    4c6e:	0f 92       	push	r0
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	0f 92       	push	r0
    4c74:	11 24       	eor	r1, r1
    4c76:	2f 93       	push	r18
    4c78:	3f 93       	push	r19
    4c7a:	8f 93       	push	r24
    4c7c:	9f 93       	push	r25
    4c7e:	af 93       	push	r26
    4c80:	bf 93       	push	r27

        // copy these to local variables so they can be stored in registers
        // (volatile variables must be read from memory on every access)
        uint32_t m = timer0_millis;
    4c82:	80 91 62 09 	lds	r24, 0x0962
    4c86:	90 91 63 09 	lds	r25, 0x0963
    4c8a:	a0 91 64 09 	lds	r26, 0x0964
    4c8e:	b0 91 65 09 	lds	r27, 0x0965
        uint8_t f = timer0_fract;
    4c92:	30 91 68 09 	lds	r19, 0x0968

        m += MILLIS_INC;
    4c96:	01 96       	adiw	r24, 0x01	; 1
    4c98:	a1 1d       	adc	r26, r1
    4c9a:	b1 1d       	adc	r27, r1
        f += FRACT_INC;
    4c9c:	23 2f       	mov	r18, r19
    4c9e:	2d 5f       	subi	r18, 0xFD	; 253
        if (f >= FRACT_MAX)
    4ca0:	2d 37       	cpi	r18, 0x7D	; 125
    4ca2:	20 f0       	brcs	.+8      	; 0x4cac <__vector_23+0x40>
        {
                f -= FRACT_MAX;
    4ca4:	2d 57       	subi	r18, 0x7D	; 125
                m += 1;
    4ca6:	01 96       	adiw	r24, 0x01	; 1
    4ca8:	a1 1d       	adc	r26, r1
    4caa:	b1 1d       	adc	r27, r1
        }

        timer0_fract = f;
    4cac:	20 93 68 09 	sts	0x0968, r18
        timer0_millis = m;
    4cb0:	80 93 62 09 	sts	0x0962, r24
    4cb4:	90 93 63 09 	sts	0x0963, r25
    4cb8:	a0 93 64 09 	sts	0x0964, r26
    4cbc:	b0 93 65 09 	sts	0x0965, r27
        timer0_overflow_count ++;
    4cc0:	80 91 5e 09 	lds	r24, 0x095E
    4cc4:	90 91 5f 09 	lds	r25, 0x095F
    4cc8:	a0 91 60 09 	lds	r26, 0x0960
    4ccc:	b0 91 61 09 	lds	r27, 0x0961
    4cd0:	01 96       	adiw	r24, 0x01	; 1
    4cd2:	a1 1d       	adc	r26, r1
    4cd4:	b1 1d       	adc	r27, r1
    4cd6:	80 93 5e 09 	sts	0x095E, r24
    4cda:	90 93 5f 09 	sts	0x095F, r25
    4cde:	a0 93 60 09 	sts	0x0960, r26
    4ce2:	b0 93 61 09 	sts	0x0961, r27
}
    4ce6:	bf 91       	pop	r27
    4ce8:	af 91       	pop	r26
    4cea:	9f 91       	pop	r25
    4cec:	8f 91       	pop	r24
    4cee:	3f 91       	pop	r19
    4cf0:	2f 91       	pop	r18
    4cf2:	0f 90       	pop	r0
    4cf4:	0f be       	out	0x3f, r0	; 63
    4cf6:	0f 90       	pop	r0
    4cf8:	1f 90       	pop	r1
    4cfa:	18 95       	reti

00004cfc <avr_millis>:

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4cfc:	8f b7       	in	r24, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4cfe:	f8 94       	cli
        m = timer0_millis;
    4d00:	20 91 62 09 	lds	r18, 0x0962
    4d04:	30 91 63 09 	lds	r19, 0x0963
    4d08:	40 91 64 09 	lds	r20, 0x0964
    4d0c:	50 91 65 09 	lds	r21, 0x0965
        SREG = oldSREG;
    4d10:	8f bf       	out	0x3f, r24	; 63

        // Enable interrupts
        sei();
    4d12:	78 94       	sei

        return m;
}
    4d14:	b9 01       	movw	r22, r18
    4d16:	ca 01       	movw	r24, r20
    4d18:	08 95       	ret

00004d1a <avr_ticks>:

uint64_t avr_ticks()
{
    4d1a:	af 92       	push	r10
    4d1c:	bf 92       	push	r11
    4d1e:	cf 92       	push	r12
    4d20:	df 92       	push	r13
    4d22:	ef 92       	push	r14
    4d24:	ff 92       	push	r15
    4d26:	0f 93       	push	r16
    4d28:	1f 93       	push	r17
        return (timer0_overflow_count * 256 + TCNT0) * 64;
    4d2a:	a0 90 5e 09 	lds	r10, 0x095E
    4d2e:	b0 90 5f 09 	lds	r11, 0x095F
    4d32:	c0 90 60 09 	lds	r12, 0x0960
    4d36:	d0 90 61 09 	lds	r13, 0x0961
    4d3a:	86 b5       	in	r24, 0x26	; 38
    4d3c:	dc 2c       	mov	r13, r12
    4d3e:	cb 2c       	mov	r12, r11
    4d40:	ba 2c       	mov	r11, r10
    4d42:	aa 24       	eor	r10, r10
    4d44:	a8 0e       	add	r10, r24
    4d46:	b1 1c       	adc	r11, r1
    4d48:	c1 1c       	adc	r12, r1
    4d4a:	d1 1c       	adc	r13, r1
    4d4c:	aa 0c       	add	r10, r10
    4d4e:	bb 1c       	adc	r11, r11
    4d50:	cc 1c       	adc	r12, r12
    4d52:	dd 1c       	adc	r13, r13
    4d54:	aa 0c       	add	r10, r10
    4d56:	bb 1c       	adc	r11, r11
    4d58:	cc 1c       	adc	r12, r12
    4d5a:	dd 1c       	adc	r13, r13
    4d5c:	aa 0c       	add	r10, r10
    4d5e:	bb 1c       	adc	r11, r11
    4d60:	cc 1c       	adc	r12, r12
    4d62:	dd 1c       	adc	r13, r13
    4d64:	aa 0c       	add	r10, r10
    4d66:	bb 1c       	adc	r11, r11
    4d68:	cc 1c       	adc	r12, r12
    4d6a:	dd 1c       	adc	r13, r13
    4d6c:	aa 0c       	add	r10, r10
    4d6e:	bb 1c       	adc	r11, r11
    4d70:	cc 1c       	adc	r12, r12
    4d72:	dd 1c       	adc	r13, r13
    4d74:	aa 0c       	add	r10, r10
    4d76:	bb 1c       	adc	r11, r11
    4d78:	cc 1c       	adc	r12, r12
    4d7a:	dd 1c       	adc	r13, r13
}
    4d7c:	95 01       	movw	r18, r10
    4d7e:	a6 01       	movw	r20, r12
    4d80:	60 e0       	ldi	r22, 0x00	; 0
    4d82:	70 e0       	ldi	r23, 0x00	; 0
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	1f 91       	pop	r17
    4d8a:	0f 91       	pop	r16
    4d8c:	ff 90       	pop	r15
    4d8e:	ef 90       	pop	r14
    4d90:	df 90       	pop	r13
    4d92:	cf 90       	pop	r12
    4d94:	bf 90       	pop	r11
    4d96:	af 90       	pop	r10
    4d98:	08 95       	ret

00004d9a <avr_delay>:

void avr_delay(unsigned long ms)
{
    4d9a:	ef 92       	push	r14
    4d9c:	ff 92       	push	r15
    4d9e:	0f 93       	push	r16
    4da0:	1f 93       	push	r17
    4da2:	7b 01       	movw	r14, r22
    4da4:	8c 01       	movw	r16, r24
}

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4da6:	8f b7       	in	r24, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4da8:	f8 94       	cli
        m = timer0_millis;
    4daa:	40 91 62 09 	lds	r20, 0x0962
    4dae:	50 91 63 09 	lds	r21, 0x0963
    4db2:	60 91 64 09 	lds	r22, 0x0964
    4db6:	70 91 65 09 	lds	r23, 0x0965
        SREG = oldSREG;
    4dba:	8f bf       	out	0x3f, r24	; 63

        // Enable interrupts
        sei();
    4dbc:	78 94       	sei
}

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4dbe:	2f b7       	in	r18, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4dc0:	f8 94       	cli
        m = timer0_millis;
    4dc2:	80 91 62 09 	lds	r24, 0x0962
    4dc6:	90 91 63 09 	lds	r25, 0x0963
    4dca:	a0 91 64 09 	lds	r26, 0x0964
    4dce:	b0 91 65 09 	lds	r27, 0x0965
        SREG = oldSREG;
    4dd2:	2f bf       	out	0x3f, r18	; 63

        // Enable interrupts
        sei();
    4dd4:	78 94       	sei

void avr_delay(unsigned long ms)
{
        unsigned long start = avr_millis();

        while (avr_millis() - start <= ms)
    4dd6:	84 1b       	sub	r24, r20
    4dd8:	95 0b       	sbc	r25, r21
    4dda:	a6 0b       	sbc	r26, r22
    4ddc:	b7 0b       	sbc	r27, r23
    4dde:	e8 16       	cp	r14, r24
    4de0:	f9 06       	cpc	r15, r25
    4de2:	0a 07       	cpc	r16, r26
    4de4:	1b 07       	cpc	r17, r27
    4de6:	58 f7       	brcc	.-42     	; 0x4dbe <avr_delay+0x24>
                ;
}
    4de8:	1f 91       	pop	r17
    4dea:	0f 91       	pop	r16
    4dec:	ff 90       	pop	r15
    4dee:	ef 90       	pop	r14
    4df0:	08 95       	ret

00004df2 <avr_micros>:

uint32_t avr_micros()
{
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MICROS_DIVIDER;
    4df2:	80 91 84 00 	lds	r24, 0x0084
    4df6:	90 91 85 00 	lds	r25, 0x0085
    4dfa:	20 91 66 09 	lds	r18, 0x0966
    4dfe:	30 91 67 09 	lds	r19, 0x0967
    4e02:	40 e0       	ldi	r20, 0x00	; 0
    4e04:	50 e0       	ldi	r21, 0x00	; 0
    4e06:	a9 01       	movw	r20, r18
    4e08:	33 27       	eor	r19, r19
    4e0a:	22 27       	eor	r18, r18
    4e0c:	a0 e0       	ldi	r26, 0x00	; 0
    4e0e:	b0 e0       	ldi	r27, 0x00	; 0
    4e10:	28 0f       	add	r18, r24
    4e12:	39 1f       	adc	r19, r25
    4e14:	4a 1f       	adc	r20, r26
    4e16:	5b 1f       	adc	r21, r27
    4e18:	22 0f       	add	r18, r18
    4e1a:	33 1f       	adc	r19, r19
    4e1c:	44 1f       	adc	r20, r20
    4e1e:	55 1f       	adc	r21, r21
    4e20:	22 0f       	add	r18, r18
    4e22:	33 1f       	adc	r19, r19
    4e24:	44 1f       	adc	r20, r20
    4e26:	55 1f       	adc	r21, r21
    4e28:	2c 7f       	andi	r18, 0xFC	; 252
    4e2a:	5f 70       	andi	r21, 0x0F	; 15
}
    4e2c:	b9 01       	movw	r22, r18
    4e2e:	ca 01       	movw	r24, r20
    4e30:	08 95       	ret

00004e32 <__vector_20>:
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MILLIS_DIVIDER;
}
*/

SIGNAL(TIMER1_OVF_vect)
{
    4e32:	1f 92       	push	r1
    4e34:	0f 92       	push	r0
    4e36:	0f b6       	in	r0, 0x3f	; 63
    4e38:	0f 92       	push	r0
    4e3a:	11 24       	eor	r1, r1
    4e3c:	8f 93       	push	r24
    4e3e:	9f 93       	push	r25
        timer1_overflow_count ++;
    4e40:	80 91 66 09 	lds	r24, 0x0966
    4e44:	90 91 67 09 	lds	r25, 0x0967
    4e48:	01 96       	adiw	r24, 0x01	; 1
    4e4a:	90 93 67 09 	sts	0x0967, r25
    4e4e:	80 93 66 09 	sts	0x0966, r24
}
    4e52:	9f 91       	pop	r25
    4e54:	8f 91       	pop	r24
    4e56:	0f 90       	pop	r0
    4e58:	0f be       	out	0x3f, r0	; 63
    4e5a:	0f 90       	pop	r0
    4e5c:	1f 90       	pop	r1
    4e5e:	18 95       	reti

00004e60 <avr_timer1Init>:

void avr_timer1Init()
{
        // Initialise 16-bit timer 1
        // Set prescale to 64
        sbi(TCCR1B, CS01);
    4e60:	e1 e8       	ldi	r30, 0x81	; 129
    4e62:	f0 e0       	ldi	r31, 0x00	; 0
    4e64:	80 81       	ld	r24, Z
    4e66:	82 60       	ori	r24, 0x02	; 2
    4e68:	80 83       	st	Z, r24
        sbi(TCCR1B, CS00);
    4e6a:	80 81       	ld	r24, Z
    4e6c:	81 60       	ori	r24, 0x01	; 1
    4e6e:	80 83       	st	Z, r24

        sbi(TIMSK1, TOIE1);
    4e70:	ef e6       	ldi	r30, 0x6F	; 111
    4e72:	f0 e0       	ldi	r31, 0x00	; 0
    4e74:	80 81       	ld	r24, Z
    4e76:	81 60       	ori	r24, 0x01	; 1
    4e78:	80 83       	st	Z, r24
}
    4e7a:	08 95       	ret

00004e7c <setup_timer>:

void setup_timer()
{
        // this needs to be called before setup() or some functions won't
        // work there
        sei();
    4e7c:	78 94       	sei

        avr_timer1Init();
    4e7e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <avr_timer1Init>
        // set timer 0 prescale factor to 64
        #ifdef __AVR_ATmega128__
        sbi(TCCR0, CS01);
        sbi(TCCR0, CS00);
        #else
        sbi(TCCR0B, CS01);
    4e82:	85 b5       	in	r24, 0x25	; 37
    4e84:	82 60       	ori	r24, 0x02	; 2
    4e86:	85 bd       	out	0x25, r24	; 37
        sbi(TCCR0B, CS00);
    4e88:	85 b5       	in	r24, 0x25	; 37
    4e8a:	81 60       	ori	r24, 0x01	; 1
    4e8c:	85 bd       	out	0x25, r24	; 37

        // enable timer 0 overflow interrupt
        #ifdef __AVR_ATmega128__
        sbi(TIMSK, TOIE0);
        #else
        sbi(TIMSK0, TOIE0);
    4e8e:	ee e6       	ldi	r30, 0x6E	; 110
    4e90:	f0 e0       	ldi	r31, 0x00	; 0
    4e92:	80 81       	ld	r24, Z
    4e94:	81 60       	ori	r24, 0x01	; 1
    4e96:	80 83       	st	Z, r24
        sbi(ADCSRA, ADPS2);
        sbi(ADCSRA, ADPS1);
        sbi(ADCSRA, ADPS0);
        */

}
    4e98:	08 95       	ret

00004e9a <usb_getUsbTaskState>:
}

uint8_t usb_getUsbTaskState()
{
        return (usb_task_state);
}
    4e9a:	80 91 00 02 	lds	r24, 0x0200
    4e9e:	08 95       	ret

00004ea0 <usb_setUsbTaskState>:

void usb_setUsbTaskState(uint8_t state)
{
        usb_task_state = state;
    4ea0:	80 93 00 02 	sts	0x0200, r24
}
    4ea4:	08 95       	ret

00004ea6 <usb_getDevice>:

usb_device * usb_getDevice(uint8_t address)
{
    4ea6:	98 2f       	mov	r25, r24
        if (address>USB_NUMDEVICES+1) return NULL;
    4ea8:	84 30       	cpi	r24, 0x04	; 4
    4eaa:	40 f4       	brcc	.+16     	; 0x4ebc <usb_getDevice+0x16>

        return &(deviceTable[address]);
    4eac:	86 e1       	ldi	r24, 0x16	; 22
    4eae:	98 9f       	mul	r25, r24
    4eb0:	90 01       	movw	r18, r0
    4eb2:	11 24       	eor	r1, r1
    4eb4:	2a 56       	subi	r18, 0x6A	; 106
    4eb6:	36 4f       	sbci	r19, 0xF6	; 246
}
    4eb8:	c9 01       	movw	r24, r18
    4eba:	08 95       	ret
        usb_task_state = state;
}

usb_device * usb_getDevice(uint8_t address)
{
        if (address>USB_NUMDEVICES+1) return NULL;
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0

        return &(deviceTable[address]);
}
    4ec0:	c9 01       	movw	r24, r18
    4ec2:	08 95       	ret

00004ec4 <usb_write>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes written, or error code in case of failure.
 */
int usb_write(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data)
{
    4ec4:	2f 92       	push	r2
    4ec6:	3f 92       	push	r3
    4ec8:	4f 92       	push	r4
    4eca:	5f 92       	push	r5
    4ecc:	6f 92       	push	r6
    4ece:	7f 92       	push	r7
    4ed0:	8f 92       	push	r8
    4ed2:	9f 92       	push	r9
    4ed4:	af 92       	push	r10
    4ed6:	bf 92       	push	r11
    4ed8:	cf 92       	push	r12
    4eda:	df 92       	push	r13
    4edc:	ef 92       	push	r14
    4ede:	ff 92       	push	r15
    4ee0:	0f 93       	push	r16
    4ee2:	1f 93       	push	r17
    4ee4:	df 93       	push	r29
    4ee6:	cf 93       	push	r28
    4ee8:	00 d0       	rcall	.+0      	; 0x4eea <usb_write+0x26>
    4eea:	cd b7       	in	r28, 0x3d	; 61
    4eec:	de b7       	in	r29, 0x3e	; 62
    4eee:	fc 01       	movw	r30, r24
    4ef0:	5b 01       	movw	r10, r22
    4ef2:	2a 01       	movw	r4, r20
    4ef4:	92 2e       	mov	r9, r18
    4ef6:	83 2e       	mov	r8, r19
        uint8_t rcode = 0, retry_count;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    4ef8:	80 ee       	ldi	r24, 0xE0	; 224
    4efa:	60 81       	ld	r22, Z
    4efc:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        unsigned int bytes_tosend, nak_count;
        unsigned int bytes_left = length;
        unsigned int nak_limit = USB_NAK_LIMIT;

        uint32_t timeout = avr_millis() + USB_XFER_TIMEOUT;
    4f00:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    4f04:	6b 01       	movw	r12, r22
    4f06:	7c 01       	movw	r14, r24
    4f08:	88 e8       	ldi	r24, 0x88	; 136
    4f0a:	93 e1       	ldi	r25, 0x13	; 19
    4f0c:	a0 e0       	ldi	r26, 0x00	; 0
    4f0e:	b0 e0       	ldi	r27, 0x00	; 0
    4f10:	c8 0e       	add	r12, r24
    4f12:	d9 1e       	adc	r13, r25
    4f14:	ea 1e       	adc	r14, r26
    4f16:	fb 1e       	adc	r15, r27

        uint8_t maxPacketSize = endpoint->maxPacketSize;
    4f18:	d5 01       	movw	r26, r10
    4f1a:	12 96       	adiw	r26, 0x02	; 2
    4f1c:	1c 91       	ld	r17, X

        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;
    4f1e:	11 23       	and	r17, r17
    4f20:	c9 f4       	brne	.+50     	; 0x4f54 <usb_write+0x90>
    4f22:	0e ef       	ldi	r16, 0xFE	; 254
    4f24:	10 e0       	ldi	r17, 0x00	; 0

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle

        // Should be 0 in all cases.
        return (rcode);
}
    4f26:	c8 01       	movw	r24, r16
    4f28:	0f 90       	pop	r0
    4f2a:	0f 90       	pop	r0
    4f2c:	0f 90       	pop	r0
    4f2e:	cf 91       	pop	r28
    4f30:	df 91       	pop	r29
    4f32:	1f 91       	pop	r17
    4f34:	0f 91       	pop	r16
    4f36:	ff 90       	pop	r15
    4f38:	ef 90       	pop	r14
    4f3a:	df 90       	pop	r13
    4f3c:	cf 90       	pop	r12
    4f3e:	bf 90       	pop	r11
    4f40:	af 90       	pop	r10
    4f42:	9f 90       	pop	r9
    4f44:	8f 90       	pop	r8
    4f46:	7f 90       	pop	r7
    4f48:	6f 90       	pop	r6
    4f4a:	5f 90       	pop	r5
    4f4c:	4f 90       	pop	r4
    4f4e:	3f 90       	pop	r3
    4f50:	2f 90       	pop	r2
    4f52:	08 95       	ret
        uint8_t maxPacketSize = endpoint->maxPacketSize;

        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value
    4f54:	88 ee       	ldi	r24, 0xE8	; 232
    4f56:	f5 01       	movw	r30, r10
    4f58:	64 81       	ldd	r22, Z+4	; 0x04
    4f5a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        while (bytes_left)
    4f5e:	41 14       	cp	r4, r1
    4f60:	51 04       	cpc	r5, r1
    4f62:	09 f4       	brne	.+2      	; 0x4f66 <usb_write+0xa2>
    4f64:	74 c0       	rjmp	.+232    	; 0x504e <usb_write+0x18a>
    4f66:	21 2e       	mov	r2, r17
    4f68:	33 24       	eor	r3, r3
    4f6a:	89 2d       	mov	r24, r9
    4f6c:	98 2d       	mov	r25, r8
    4f6e:	9c 01       	movw	r18, r24
    4f70:	39 01       	movw	r6, r18
        {
                retry_count = 0;
                nak_count = 0;

                bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    4f72:	42 01       	movw	r8, r4
    4f74:	24 14       	cp	r2, r4
    4f76:	35 04       	cpc	r3, r5
    4f78:	08 f4       	brcc	.+2      	; 0x4f7c <usb_write+0xb8>
    4f7a:	67 c0       	rjmp	.+206    	; 0x504a <usb_write+0x186>

                // Filling output FIFO
                max3421e_writeMultiple(MAX_REG_SNDFIFO, bytes_tosend, data_p);
    4f7c:	89 82       	std	Y+1, r8	; 0x01
    4f7e:	80 e1       	ldi	r24, 0x10	; 16
    4f80:	68 2d       	mov	r22, r8
    4f82:	a3 01       	movw	r20, r6
    4f84:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <max3421e_writeMultiple>

                // Set number of bytes to send.
                max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    4f88:	88 e3       	ldi	r24, 0x38	; 56
    4f8a:	68 2d       	mov	r22, r8
    4f8c:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

                // Dispatch packet.
                max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address));
    4f90:	d5 01       	movw	r26, r10
    4f92:	6c 91       	ld	r22, X
    4f94:	60 62       	ori	r22, 0x20	; 32
    4f96:	80 ef       	ldi	r24, 0xF0	; 240
    4f98:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

                // Wait for completion.
                while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    4f9c:	88 ec       	ldi	r24, 0xC8	; 200
    4f9e:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    4fa2:	87 ff       	sbrs	r24, 7
    4fa4:	fb cf       	rjmp	.-10     	; 0x4f9c <usb_write+0xd8>

                // Clear IRQ.
                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4fa6:	88 ec       	ldi	r24, 0xC8	; 200
    4fa8:	60 e8       	ldi	r22, 0x80	; 128
    4faa:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

                rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4fae:	88 ef       	ldi	r24, 0xF8	; 248
    4fb0:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    4fb4:	18 2f       	mov	r17, r24
    4fb6:	1f 70       	andi	r17, 0x0F	; 15

                while (rcode && (timeout > avr_millis()))
    4fb8:	e1 f1       	breq	.+120    	; 0x5032 <usb_write+0x16e>
    4fba:	00 e0       	ldi	r16, 0x00	; 0
    4fbc:	1b 82       	std	Y+3, r1	; 0x03
    4fbe:	1a 82       	std	Y+2, r1	; 0x02
    4fc0:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    4fc4:	6c 15       	cp	r22, r12
    4fc6:	7d 05       	cpc	r23, r13
    4fc8:	8e 05       	cpc	r24, r14
    4fca:	9f 05       	cpc	r25, r15
    4fcc:	90 f5       	brcc	.+100    	; 0x5032 <usb_write+0x16e>
                {
                        switch (rcode)
    4fce:	14 30       	cpi	r17, 0x04	; 4
    4fd0:	29 f0       	breq	.+10     	; 0x4fdc <usb_write+0x118>
    4fd2:	1e 30       	cpi	r17, 0x0E	; 14
    4fd4:	a1 f1       	breq	.+104    	; 0x503e <usb_write+0x17a>
                                {
                                        return (rcode); //return TIMEOUT
                                }
                                break;
                        default:
                                return (rcode);
    4fd6:	01 2f       	mov	r16, r17
    4fd8:	10 e0       	ldi	r17, 0x00	; 0
    4fda:	a5 cf       	rjmp	.-182    	; 0x4f26 <usb_write+0x62>
                while (rcode && (timeout > avr_millis()))
                {
                        switch (rcode)
                        {
                        case hrNAK:
                                nak_count++;
    4fdc:	ea 81       	ldd	r30, Y+2	; 0x02
    4fde:	fb 81       	ldd	r31, Y+3	; 0x03
    4fe0:	31 96       	adiw	r30, 0x01	; 1
    4fe2:	fb 83       	std	Y+3, r31	; 0x03
    4fe4:	ea 83       	std	Y+2, r30	; 0x02
                                if (nak_limit && (nak_count == USB_NAK_LIMIT))
    4fe6:	e0 50       	subi	r30, 0x00	; 0
    4fe8:	fd 47       	sbci	r31, 0x7D	; 125
    4fea:	09 f4       	brne	.+2      	; 0x4fee <usb_write+0x12a>
    4fec:	3c c0       	rjmp	.+120    	; 0x5066 <usb_write+0x1a2>
                        default:
                                return (rcode);
                        }

                        // Process NAK according to Host out NAK bug.
                        max3421e_write(MAX_REG_SNDBC, 0);
    4fee:	88 e3       	ldi	r24, 0x38	; 56
    4ff0:	60 e0       	ldi	r22, 0x00	; 0
    4ff2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
                        max3421e_write(MAX_REG_SNDFIFO, *data_p);
    4ff6:	80 e1       	ldi	r24, 0x10	; 16
    4ff8:	d3 01       	movw	r26, r6
    4ffa:	6c 91       	ld	r22, X
    4ffc:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
                        max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    5000:	88 e3       	ldi	r24, 0x38	; 56
    5002:	69 81       	ldd	r22, Y+1	; 0x01
    5004:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
                        max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address)); //dispatch packet
    5008:	f5 01       	movw	r30, r10
    500a:	60 81       	ld	r22, Z
    500c:	60 62       	ori	r22, 0x20	; 32
    500e:	80 ef       	ldi	r24, 0xF0	; 240
    5010:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

                        // Wait for the completion interrupt.
                        while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    5014:	88 ec       	ldi	r24, 0xC8	; 200
    5016:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    501a:	87 ff       	sbrs	r24, 7
    501c:	fb cf       	rjmp	.-10     	; 0x5014 <usb_write+0x150>

                        // Clear interrupt.
                        max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    501e:	88 ec       	ldi	r24, 0xC8	; 200
    5020:	60 e8       	ldi	r22, 0x80	; 128
    5022:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    5026:	88 ef       	ldi	r24, 0xF8	; 248
    5028:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    502c:	18 2f       	mov	r17, r24
    502e:	1f 70       	andi	r17, 0x0F	; 15
                // Clear IRQ.
                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

                rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

                while (rcode && (timeout > avr_millis()))
    5030:	39 f6       	brne	.-114    	; 0x4fc0 <usb_write+0xfc>
                        max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
    5032:	48 18       	sub	r4, r8
    5034:	59 08       	sbc	r5, r9
        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

        while (bytes_left)
    5036:	e1 f0       	breq	.+56     	; 0x5070 <usb_write+0x1ac>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
    5038:	68 0c       	add	r6, r8
    503a:	79 1c       	adc	r7, r9
    503c:	9a cf       	rjmp	.-204    	; 0x4f72 <usb_write+0xae>
                                {
                                        return (rcode); //return NAK
                                }
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    503e:	0f 5f       	subi	r16, 0xFF	; 255
                                if (retry_count == USB_RETRY_LIMIT)
    5040:	03 30       	cpi	r16, 0x03	; 3
    5042:	a9 f6       	brne	.-86     	; 0x4fee <usb_write+0x12a>
    5044:	0e e0       	ldi	r16, 0x0E	; 14
    5046:	10 e0       	ldi	r17, 0x00	; 0
    5048:	6e cf       	rjmp	.-292    	; 0x4f26 <usb_write+0x62>
        while (bytes_left)
        {
                retry_count = 0;
                nak_count = 0;

                bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    504a:	41 01       	movw	r8, r2
    504c:	97 cf       	rjmp	.-210    	; 0x4f7c <usb_write+0xb8>
        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

        while (bytes_left)
    504e:	00 e0       	ldi	r16, 0x00	; 0
    5050:	10 e0       	ldi	r17, 0x00	; 0

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    5052:	88 ef       	ldi	r24, 0xF8	; 248
    5054:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    5058:	85 fd       	sbrc	r24, 5
    505a:	08 c0       	rjmp	.+16     	; 0x506c <usb_write+0x1a8>
    505c:	80 e4       	ldi	r24, 0x40	; 64
    505e:	d5 01       	movw	r26, r10
    5060:	14 96       	adiw	r26, 0x04	; 4
    5062:	8c 93       	st	X, r24
    5064:	60 cf       	rjmp	.-320    	; 0x4f26 <usb_write+0x62>
                {
                        switch (rcode)
                        {
                        case hrNAK:
                                nak_count++;
                                if (nak_limit && (nak_count == USB_NAK_LIMIT))
    5066:	04 e0       	ldi	r16, 0x04	; 4
    5068:	10 e0       	ldi	r17, 0x00	; 0
    506a:	5d cf       	rjmp	.-326    	; 0x4f26 <usb_write+0x62>

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    506c:	80 e8       	ldi	r24, 0x80	; 128
    506e:	f7 cf       	rjmp	.-18     	; 0x505e <usb_write+0x19a>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
    5070:	01 2f       	mov	r16, r17
    5072:	10 e0       	ldi	r17, 0x00	; 0
    5074:	ee cf       	rjmp	.-36     	; 0x5052 <usb_write+0x18e>

00005076 <usb_bulkWrite>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkWrite(usb_device * device, uint16_t length, uint8_t * data)
{
    5076:	fc 01       	movw	r30, r24
    5078:	db 01       	movw	r26, r22
    507a:	9a 01       	movw	r18, r20
        return usb_write(device, &(device->bulk_out) , length, data);
    507c:	3e 96       	adiw	r30, 0x0e	; 14
    507e:	bf 01       	movw	r22, r30
    5080:	ad 01       	movw	r20, r26
    5082:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <usb_write>
}
    5086:	08 95       	ret

00005088 <usb_dispatchPacket>:

        return &(deviceTable[address]);
}

int usb_dispatchPacket(uint8_t token, usb_endpoint * endpoint, unsigned int nakLimit)
{
    5088:	7f 92       	push	r7
    508a:	8f 92       	push	r8
    508c:	9f 92       	push	r9
    508e:	af 92       	push	r10
    5090:	bf 92       	push	r11
    5092:	cf 92       	push	r12
    5094:	df 92       	push	r13
    5096:	ef 92       	push	r14
    5098:	ff 92       	push	r15
    509a:	0f 93       	push	r16
    509c:	1f 93       	push	r17
    509e:	cf 93       	push	r28
    50a0:	df 93       	push	r29
    50a2:	78 2e       	mov	r7, r24
    50a4:	5b 01       	movw	r10, r22
    50a6:	4a 01       	movw	r8, r20
        uint32_t timeout = avr_millis() + USB_XFER_TIMEOUT;
    50a8:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    50ac:	7b 01       	movw	r14, r22
    50ae:	8c 01       	movw	r16, r24
    50b0:	88 e8       	ldi	r24, 0x88	; 136
    50b2:	93 e1       	ldi	r25, 0x13	; 19
    50b4:	a0 e0       	ldi	r26, 0x00	; 0
    50b6:	b0 e0       	ldi	r27, 0x00	; 0
    50b8:	e8 0e       	add	r14, r24
    50ba:	f9 1e       	adc	r15, r25
    50bc:	0a 1f       	adc	r16, r26
    50be:	1b 1f       	adc	r17, r27
    50c0:	dd 24       	eor	r13, r13
    50c2:	c0 e0       	ldi	r28, 0x00	; 0
    50c4:	d0 e0       	ldi	r29, 0x00	; 0
    50c6:	cc 24       	eor	r12, r12
        uint8_t tmpdata;
        uint8_t rcode = 0;
        unsigned int nak_count = 0;
        char retry_count = 0;

        while (timeout > avr_millis())
    50c8:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    50cc:	6e 15       	cp	r22, r14
    50ce:	7f 05       	cpc	r23, r15
    50d0:	80 07       	cpc	r24, r16
    50d2:	91 07       	cpc	r25, r17
    50d4:	70 f5       	brcc	.+92     	; 0x5132 <usb_dispatchPacket+0xaa>
        {
                // Analyze transfer result.

                // Launch the transfer.
                max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
    50d6:	d5 01       	movw	r26, r10
    50d8:	6c 91       	ld	r22, X
    50da:	67 29       	or	r22, r7
    50dc:	80 ef       	ldi	r24, 0xF0	; 240
    50de:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
                rcode = 0xff;

                // Wait for interrupt
                while (timeout > avr_millis())
    50e2:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    50e6:	6e 15       	cp	r22, r14
    50e8:	7f 05       	cpc	r23, r15
    50ea:	80 07       	cpc	r24, r16
    50ec:	91 07       	cpc	r25, r17
    50ee:	08 f0       	brcs	.+2      	; 0x50f2 <usb_dispatchPacket+0x6a>
    50f0:	41 c0       	rjmp	.+130    	; 0x5174 <usb_dispatchPacket+0xec>
                {
                        tmpdata = max3421e_read(MAX_REG_HIRQ);
    50f2:	88 ec       	ldi	r24, 0xC8	; 200
    50f4:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
                        if (tmpdata & bmHXFRDNIRQ)
    50f8:	87 ff       	sbrs	r24, 7
    50fa:	f3 cf       	rjmp	.-26     	; 0x50e2 <usb_dispatchPacket+0x5a>
                        {
                                // Clear the interrupt.
                                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    50fc:	88 ec       	ldi	r24, 0xC8	; 200
    50fe:	60 e8       	ldi	r22, 0x80	; 128
    5100:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
    5104:	dd 24       	eor	r13, r13
                // Exit if timeout.
                if (rcode != 0x00)
                        return (rcode);

                // Wait for HRSL
                while (timeout > avr_millis())
    5106:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    510a:	6e 15       	cp	r22, r14
    510c:	7f 05       	cpc	r23, r15
    510e:	80 07       	cpc	r24, r16
    5110:	91 07       	cpc	r25, r17
    5112:	48 f4       	brcc	.+18     	; 0x5126 <usb_dispatchPacket+0x9e>
                {
                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    5114:	88 ef       	ldi	r24, 0xF8	; 248
    5116:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    511a:	9f e0       	ldi	r25, 0x0F	; 15
    511c:	d9 2e       	mov	r13, r25
    511e:	d8 22       	and	r13, r24
                        if (rcode != hrBUSY)
    5120:	b1 e0       	ldi	r27, 0x01	; 1
    5122:	db 16       	cp	r13, r27
    5124:	81 f3       	breq	.-32     	; 0x5106 <usb_dispatchPacket+0x7e>
//                      else
//                              avr_serialPrintf("busy!\n");
                }


                switch (rcode)
    5126:	e4 e0       	ldi	r30, 0x04	; 4
    5128:	de 16       	cp	r13, r30
    512a:	e1 f0       	breq	.+56     	; 0x5164 <usb_dispatchPacket+0xdc>
    512c:	fe e0       	ldi	r31, 0x0E	; 14
    512e:	df 16       	cp	r13, r31
    5130:	89 f0       	breq	.+34     	; 0x5154 <usb_dispatchPacket+0xcc>
                        default:
                                return (rcode);
                }
        }

        return (rcode);
    5132:	2d 2d       	mov	r18, r13
    5134:	30 e0       	ldi	r19, 0x00	; 0
}
    5136:	c9 01       	movw	r24, r18
    5138:	df 91       	pop	r29
    513a:	cf 91       	pop	r28
    513c:	1f 91       	pop	r17
    513e:	0f 91       	pop	r16
    5140:	ff 90       	pop	r15
    5142:	ef 90       	pop	r14
    5144:	df 90       	pop	r13
    5146:	cf 90       	pop	r12
    5148:	bf 90       	pop	r11
    514a:	af 90       	pop	r10
    514c:	9f 90       	pop	r9
    514e:	8f 90       	pop	r8
    5150:	7f 90       	pop	r7
    5152:	08 95       	ret
                                nak_count++;
                                if (nak_count == nakLimit)
                                        return (rcode);
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    5154:	c3 94       	inc	r12
                                if (retry_count == USB_RETRY_LIMIT)
    5156:	83 e0       	ldi	r24, 0x03	; 3
    5158:	c8 16       	cp	r12, r24
    515a:	09 f0       	breq	.+2      	; 0x515e <usb_dispatchPacket+0xd6>
    515c:	b5 cf       	rjmp	.-150    	; 0x50c8 <usb_dispatchPacket+0x40>
    515e:	2e e0       	ldi	r18, 0x0E	; 14
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	e9 cf       	rjmp	.-46     	; 0x5136 <usb_dispatchPacket+0xae>


                switch (rcode)
                {
                        case hrNAK:
                                nak_count++;
    5164:	21 96       	adiw	r28, 0x01	; 1
                                if (nak_count == nakLimit)
    5166:	c8 15       	cp	r28, r8
    5168:	d9 05       	cpc	r29, r9
    516a:	09 f0       	breq	.+2      	; 0x516e <usb_dispatchPacket+0xe6>
    516c:	ad cf       	rjmp	.-166    	; 0x50c8 <usb_dispatchPacket+0x40>
    516e:	24 e0       	ldi	r18, 0x04	; 4
    5170:	30 e0       	ldi	r19, 0x00	; 0
    5172:	e1 cf       	rjmp	.-62     	; 0x5136 <usb_dispatchPacket+0xae>
                // Launch the transfer.
                max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
                rcode = 0xff;

                // Wait for interrupt
                while (timeout > avr_millis())
    5174:	2f ef       	ldi	r18, 0xFF	; 255
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	de cf       	rjmp	.-68     	; 0x5136 <usb_dispatchPacket+0xae>

0000517a <usb_read>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int usb_read(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data, unsigned int nakLimit)
{
    517a:	6f 92       	push	r6
    517c:	7f 92       	push	r7
    517e:	8f 92       	push	r8
    5180:	9f 92       	push	r9
    5182:	af 92       	push	r10
    5184:	bf 92       	push	r11
    5186:	cf 92       	push	r12
    5188:	df 92       	push	r13
    518a:	ef 92       	push	r14
    518c:	ff 92       	push	r15
    518e:	0f 93       	push	r16
    5190:	1f 93       	push	r17
    5192:	cf 93       	push	r28
    5194:	df 93       	push	r29
    5196:	fc 01       	movw	r30, r24
    5198:	7b 01       	movw	r14, r22
    519a:	3a 01       	movw	r6, r20
    519c:	69 01       	movw	r12, r18
    519e:	58 01       	movw	r10, r16
        uint16_t rcode, bytesRead;
        uint16_t maxPacketSize = endpoint->maxPacketSize;
    51a0:	db 01       	movw	r26, r22
    51a2:	12 96       	adiw	r26, 0x02	; 2
    51a4:	8d 90       	ld	r8, X+
    51a6:	9c 90       	ld	r9, X
    51a8:	13 97       	sbiw	r26, 0x03	; 3

        unsigned int totalTransferred = 0;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    51aa:	80 ee       	ldi	r24, 0xE0	; 224
    51ac:	60 81       	ld	r22, Z
    51ae:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        // Set toggle value.
        max3421e_write(MAX_REG_HCTL, endpoint->receiveToggle);
    51b2:	88 ee       	ldi	r24, 0xE8	; 232
    51b4:	f7 01       	movw	r30, r14
    51b6:	65 81       	ldd	r22, Z+5	; 0x05
    51b8:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
    51bc:	c0 e0       	ldi	r28, 0x00	; 0
    51be:	d0 e0       	ldi	r29, 0x00	; 0

        while (1)
        {

                // Start IN transfer
                rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	b7 01       	movw	r22, r14
    51c4:	a5 01       	movw	r20, r10
    51c6:	0e 94 44 28 	call	0x5088	; 0x5088 <usb_dispatchPacket>

                if (rcode)
    51ca:	89 2b       	or	r24, r25
    51cc:	d1 f5       	brne	.+116    	; 0x5242 <usb_read+0xc8>

                        return -1;
                }

                // Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
                if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    51ce:	88 ec       	ldi	r24, 0xC8	; 200
    51d0:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    51d4:	82 ff       	sbrs	r24, 2
    51d6:	38 c0       	rjmp	.+112    	; 0x5248 <usb_read+0xce>
                        // TODO: the absence of RCVDAVIRQ indicates a toggle error. Need to add handling for that.
                        return -2;
                }

                // Obtain the number of bytes in FIFO.
                bytesRead = max3421e_read(MAX_REG_RCVBC);
    51d8:	80 e3       	ldi	r24, 0x30	; 48
    51da:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    51de:	68 2f       	mov	r22, r24
    51e0:	08 2f       	mov	r16, r24
    51e2:	10 e0       	ldi	r17, 0x00	; 0

                // Read the data from the FIFO.
                data = max3421e_readMultiple(MAX_REG_RCVFIFO, bytesRead, data);
    51e4:	88 e0       	ldi	r24, 0x08	; 8
    51e6:	a6 01       	movw	r20, r12
    51e8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <max3421e_readMultiple>
    51ec:	6c 01       	movw	r12, r24

                // Clear the interrupt to free the buffer.
                max3421e_write(MAX_REG_HIRQ, bmRCVDAVIRQ);
    51ee:	88 ec       	ldi	r24, 0xC8	; 200
    51f0:	64 e0       	ldi	r22, 0x04	; 4
    51f2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

                totalTransferred += bytesRead;
    51f6:	c0 0f       	add	r28, r16
    51f8:	d1 1f       	adc	r29, r17

                // Check if we're done reading. Either we've received a 'short' packet (<maxPacketSize), or the
                // desired number of bytes has been transferred.
                if ((bytesRead < maxPacketSize) || (totalTransferred >= length))
    51fa:	08 15       	cp	r16, r8
    51fc:	19 05       	cpc	r17, r9
    51fe:	18 f0       	brcs	.+6      	; 0x5206 <usb_read+0x8c>
    5200:	c6 15       	cp	r28, r6
    5202:	d7 05       	cpc	r29, r7
    5204:	e8 f2       	brcs	.-70     	; 0x51c0 <usb_read+0x46>
                {
                        // Remember the toggle value for the next transfer.
                        if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
    5206:	88 ef       	ldi	r24, 0xF8	; 248
    5208:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    520c:	84 ff       	sbrs	r24, 4
    520e:	15 c0       	rjmp	.+42     	; 0x523a <usb_read+0xc0>
                                endpoint->receiveToggle = bmRCVTOG1;
    5210:	80 e2       	ldi	r24, 0x20	; 32
    5212:	d7 01       	movw	r26, r14
    5214:	15 96       	adiw	r26, 0x05	; 5
    5216:	8c 93       	st	X, r24
                        break;
                }
        }

        // Report success.
        return totalTransferred;
    5218:	9e 01       	movw	r18, r28
}
    521a:	c9 01       	movw	r24, r18
    521c:	df 91       	pop	r29
    521e:	cf 91       	pop	r28
    5220:	1f 91       	pop	r17
    5222:	0f 91       	pop	r16
    5224:	ff 90       	pop	r15
    5226:	ef 90       	pop	r14
    5228:	df 90       	pop	r13
    522a:	cf 90       	pop	r12
    522c:	bf 90       	pop	r11
    522e:	af 90       	pop	r10
    5230:	9f 90       	pop	r9
    5232:	8f 90       	pop	r8
    5234:	7f 90       	pop	r7
    5236:	6f 90       	pop	r6
    5238:	08 95       	ret
                {
                        // Remember the toggle value for the next transfer.
                        if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
                                endpoint->receiveToggle = bmRCVTOG1;
                        else
                                endpoint->receiveToggle = bmRCVTOG0;
    523a:	80 e1       	ldi	r24, 0x10	; 16
    523c:	f7 01       	movw	r30, r14
    523e:	85 83       	std	Z+5, r24	; 0x05
    5240:	eb cf       	rjmp	.-42     	; 0x5218 <usb_read+0x9e>
        {

                // Start IN transfer
                rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);

                if (rcode)
    5242:	2f ef       	ldi	r18, 0xFF	; 255
    5244:	3f ef       	ldi	r19, 0xFF	; 255
    5246:	e9 cf       	rjmp	.-46     	; 0x521a <usb_read+0xa0>

                        return -1;
                }

                // Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
                if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    5248:	2e ef       	ldi	r18, 0xFE	; 254
    524a:	3f ef       	ldi	r19, 0xFF	; 255
    524c:	e6 cf       	rjmp	.-52     	; 0x521a <usb_read+0xa0>

0000524e <usb_ctrlData>:
 * @param direction true for input, false for output.
 * @param length number of bytes to transfer.
 * @param data data buffer.
 */
uint8_t usb_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
    524e:	0f 93       	push	r16
    5250:	1f 93       	push	r17
    5252:	fc 01       	movw	r30, r24
        if (direction)
    5254:	66 23       	and	r22, r22
    5256:	51 f4       	brne	.+20     	; 0x526c <usb_ctrlData+0x1e>
                return usb_read(device, &(device->control), length, data, USB_NAK_LIMIT);

        } else
        {
                // OUT transfer
                device->control.sendToggle = bmSNDTOG1;
    5258:	80 e8       	ldi	r24, 0x80	; 128
    525a:	86 83       	std	Z+6, r24	; 0x06
                return usb_write(device, &(device->control), length, data);
    525c:	cf 01       	movw	r24, r30
    525e:	32 96       	adiw	r30, 0x02	; 2
    5260:	bf 01       	movw	r22, r30
    5262:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <usb_write>
        }
}
    5266:	1f 91       	pop	r17
    5268:	0f 91       	pop	r16
    526a:	08 95       	ret
uint8_t usb_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
        if (direction)
        {
                // IN transfer
                device->control.receiveToggle = bmRCVTOG1;
    526c:	80 e2       	ldi	r24, 0x20	; 32
    526e:	87 83       	std	Z+7, r24	; 0x07
                return usb_read(device, &(device->control), length, data, USB_NAK_LIMIT);
    5270:	cf 01       	movw	r24, r30
    5272:	32 96       	adiw	r30, 0x02	; 2
    5274:	bf 01       	movw	r22, r30
    5276:	00 e0       	ldi	r16, 0x00	; 0
    5278:	1d e7       	ldi	r17, 0x7D	; 125
    527a:	0e 94 bd 28 	call	0x517a	; 0x517a <usb_read>
        {
                // OUT transfer
                device->control.sendToggle = bmSNDTOG1;
                return usb_write(device, &(device->control), length, data);
        }
}
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	08 95       	ret

00005284 <usb_controlRequest>:
                uint8_t valueLow,
                uint8_t valueHigh,
                uint16_t index,
                uint16_t length,
                uint8_t * data)
{
    5284:	5f 92       	push	r5
    5286:	6f 92       	push	r6
    5288:	7f 92       	push	r7
    528a:	8f 92       	push	r8
    528c:	9f 92       	push	r9
    528e:	af 92       	push	r10
    5290:	bf 92       	push	r11
    5292:	cf 92       	push	r12
    5294:	df 92       	push	r13
    5296:	ef 92       	push	r14
    5298:	ff 92       	push	r15
    529a:	0f 93       	push	r16
    529c:	1f 93       	push	r17
    529e:	df 93       	push	r29
    52a0:	cf 93       	push	r28
    52a2:	cd b7       	in	r28, 0x3d	; 61
    52a4:	de b7       	in	r29, 0x3e	; 62
    52a6:	28 97       	sbiw	r28, 0x08	; 8
    52a8:	0f b6       	in	r0, 0x3f	; 63
    52aa:	f8 94       	cli
    52ac:	de bf       	out	0x3e, r29	; 62
    52ae:	0f be       	out	0x3f, r0	; 63
    52b0:	cd bf       	out	0x3d, r28	; 61
    52b2:	3c 01       	movw	r6, r24
    52b4:	56 2e       	mov	r5, r22
    52b6:	14 2f       	mov	r17, r20
    52b8:	82 2e       	mov	r8, r18
        boolean direction = false; //request direction, IN or OUT
        uint8_t rcode;
        usb_setupPacket setup_pkt;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    52ba:	80 ee       	ldi	r24, 0xE0	; 224
    52bc:	f3 01       	movw	r30, r6
    52be:	60 81       	ld	r22, Z
    52c0:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>

        if (requestType & 0x80)
                direction = true; //determine request direction

        // Build setup packet.
        setup_pkt.bmRequestType = requestType;
    52c4:	59 82       	std	Y+1, r5	; 0x01
        setup_pkt.bRequest = request;
    52c6:	1a 83       	std	Y+2, r17	; 0x02
        setup_pkt.wValue = valueLow | (valueHigh << 8);
    52c8:	90 2f       	mov	r25, r16
    52ca:	80 e0       	ldi	r24, 0x00	; 0
    52cc:	99 24       	eor	r9, r9
    52ce:	88 29       	or	r24, r8
    52d0:	99 29       	or	r25, r9
    52d2:	9c 83       	std	Y+4, r25	; 0x04
    52d4:	8b 83       	std	Y+3, r24	; 0x03
        setup_pkt.wIndex = index;
    52d6:	fe 82       	std	Y+6, r15	; 0x06
    52d8:	ed 82       	std	Y+5, r14	; 0x05
        setup_pkt.wLength = length;
    52da:	d8 86       	std	Y+8, r13	; 0x08
    52dc:	cf 82       	std	Y+7, r12	; 0x07

        // Write setup packet to the FIFO and dispatch
        max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
    52de:	80 e2       	ldi	r24, 0x20	; 32
    52e0:	68 e0       	ldi	r22, 0x08	; 8
    52e2:	ae 01       	movw	r20, r28
    52e4:	4f 5f       	subi	r20, 0xFF	; 255
    52e6:	5f 4f       	sbci	r21, 0xFF	; 255
    52e8:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <max3421e_writeMultiple>
        rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);
    52ec:	83 01       	movw	r16, r6
    52ee:	0e 5f       	subi	r16, 0xFE	; 254
    52f0:	1f 4f       	sbci	r17, 0xFF	; 255
    52f2:	80 e1       	ldi	r24, 0x10	; 16
    52f4:	b8 01       	movw	r22, r16
    52f6:	40 e0       	ldi	r20, 0x00	; 0
    52f8:	5d e7       	ldi	r21, 0x7D	; 125
    52fa:	0e 94 44 28 	call	0x5088	; 0x5088 <usb_dispatchPacket>

        // Print error in case of failure.
        if (rcode)
    52fe:	88 23       	and	r24, r24
    5300:	c9 f0       	breq	.+50     	; 0x5334 <usb_controlRequest+0xb0>
    5302:	2f ef       	ldi	r18, 0xFF	; 255
    5304:	3f ef       	ldi	r19, 0xFF	; 255

        if (rcode)
                return -3;
        else
                return 0;
}
    5306:	c9 01       	movw	r24, r18
    5308:	28 96       	adiw	r28, 0x08	; 8
    530a:	0f b6       	in	r0, 0x3f	; 63
    530c:	f8 94       	cli
    530e:	de bf       	out	0x3e, r29	; 62
    5310:	0f be       	out	0x3f, r0	; 63
    5312:	cd bf       	out	0x3d, r28	; 61
    5314:	cf 91       	pop	r28
    5316:	df 91       	pop	r29
    5318:	1f 91       	pop	r17
    531a:	0f 91       	pop	r16
    531c:	ff 90       	pop	r15
    531e:	ef 90       	pop	r14
    5320:	df 90       	pop	r13
    5322:	cf 90       	pop	r12
    5324:	bf 90       	pop	r11
    5326:	af 90       	pop	r10
    5328:	9f 90       	pop	r9
    532a:	8f 90       	pop	r8
    532c:	7f 90       	pop	r7
    532e:	6f 90       	pop	r6
    5330:	5f 90       	pop	r5
    5332:	08 95       	ret
        // Write setup packet to the FIFO and dispatch
        max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
        rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);

        // Print error in case of failure.
        if (rcode)
    5334:	f5 2c       	mov	r15, r5
    5336:	ff 1c       	adc	r15, r15
    5338:	ff 24       	eor	r15, r15
    533a:	ff 1c       	adc	r15, r15
//              avr_serialPrintf("Setup packet error: 0x%02x\n", rcode);
                return -1;
        }

        // Data stage, if present
        if (data != NULL)
    533c:	a1 14       	cp	r10, r1
    533e:	b1 04       	cpc	r11, r1
    5340:	31 f0       	breq	.+12     	; 0x534e <usb_controlRequest+0xca>
        {
                rcode = usb_ctrlData(device, direction, length, data);
    5342:	c3 01       	movw	r24, r6
    5344:	6f 2d       	mov	r22, r15
    5346:	a6 01       	movw	r20, r12
    5348:	95 01       	movw	r18, r10
    534a:	0e 94 27 29 	call	0x524e	; 0x524e <usb_ctrlData>
                        return -2;
                }
        }

        // Status stage.
        if (direction)
    534e:	ff 20       	and	r15, r15
    5350:	59 f0       	breq	.+22     	; 0x5368 <usb_controlRequest+0xe4>
                rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
    5352:	80 ea       	ldi	r24, 0xA0	; 160
    5354:	b8 01       	movw	r22, r16
    5356:	40 e0       	ldi	r20, 0x00	; 0
    5358:	5d e7       	ldi	r21, 0x7D	; 125
    535a:	0e 94 44 28 	call	0x5088	; 0x5088 <usb_dispatchPacket>
        else
                rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);

        if (rcode)
    535e:	88 23       	and	r24, r24
    5360:	51 f4       	brne	.+20     	; 0x5376 <usb_controlRequest+0xf2>
    5362:	20 e0       	ldi	r18, 0x00	; 0
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	cf cf       	rjmp	.-98     	; 0x5306 <usb_controlRequest+0x82>

        // Status stage.
        if (direction)
                rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
        else
                rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);
    5368:	80 e8       	ldi	r24, 0x80	; 128
    536a:	b8 01       	movw	r22, r16
    536c:	40 e0       	ldi	r20, 0x00	; 0
    536e:	5d e7       	ldi	r21, 0x7D	; 125
    5370:	0e 94 44 28 	call	0x5088	; 0x5088 <usb_dispatchPacket>
    5374:	f4 cf       	rjmp	.-24     	; 0x535e <usb_controlRequest+0xda>

        if (rcode)
    5376:	2d ef       	ldi	r18, 0xFD	; 253
    5378:	3f ef       	ldi	r19, 0xFF	; 255
    537a:	c5 cf       	rjmp	.-118    	; 0x5306 <usb_controlRequest+0x82>

0000537c <usb_setConfiguration>:
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
}

//set configuration
int usb_setConfiguration(usb_device * device, uint8_t configuration)
{
    537c:	af 92       	push	r10
    537e:	bf 92       	push	r11
    5380:	cf 92       	push	r12
    5382:	df 92       	push	r13
    5384:	ef 92       	push	r14
    5386:	ff 92       	push	r15
    5388:	0f 93       	push	r16
    538a:	26 2f       	mov	r18, r22
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, configuration, 0x00, 0x0000, 0x0000, NULL));
    538c:	60 e0       	ldi	r22, 0x00	; 0
    538e:	49 e0       	ldi	r20, 0x09	; 9
    5390:	00 e0       	ldi	r16, 0x00	; 0
    5392:	ee 24       	eor	r14, r14
    5394:	ff 24       	eor	r15, r15
    5396:	cc 24       	eor	r12, r12
    5398:	dd 24       	eor	r13, r13
    539a:	aa 24       	eor	r10, r10
    539c:	bb 24       	eor	r11, r11
    539e:	0e 94 42 29 	call	0x5284	; 0x5284 <usb_controlRequest>
}
    53a2:	0f 91       	pop	r16
    53a4:	ff 90       	pop	r15
    53a6:	ef 90       	pop	r14
    53a8:	df 90       	pop	r13
    53aa:	cf 90       	pop	r12
    53ac:	bf 90       	pop	r11
    53ae:	af 90       	pop	r10
    53b0:	08 95       	ret

000053b2 <usb_setAddress>:
 * @param device the 'zero' usb device (address 0, endpoint 0)
 * @param address the address to set for the newly connected device
 * @return 0 in case of success, error code otherwise
 */
int usb_setAddress(usb_device * device, uint8_t address)
{
    53b2:	af 92       	push	r10
    53b4:	bf 92       	push	r11
    53b6:	cf 92       	push	r12
    53b8:	df 92       	push	r13
    53ba:	ef 92       	push	r14
    53bc:	ff 92       	push	r15
    53be:	0f 93       	push	r16
    53c0:	26 2f       	mov	r18, r22
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
    53c2:	60 e0       	ldi	r22, 0x00	; 0
    53c4:	45 e0       	ldi	r20, 0x05	; 5
    53c6:	00 e0       	ldi	r16, 0x00	; 0
    53c8:	ee 24       	eor	r14, r14
    53ca:	ff 24       	eor	r15, r15
    53cc:	cc 24       	eor	r12, r12
    53ce:	dd 24       	eor	r13, r13
    53d0:	aa 24       	eor	r10, r10
    53d2:	bb 24       	eor	r11, r11
    53d4:	0e 94 42 29 	call	0x5284	; 0x5284 <usb_controlRequest>
}
    53d8:	0f 91       	pop	r16
    53da:	ff 90       	pop	r15
    53dc:	ef 90       	pop	r14
    53de:	df 90       	pop	r13
    53e0:	cf 90       	pop	r12
    53e2:	bf 90       	pop	r11
    53e4:	af 90       	pop	r10
    53e6:	08 95       	ret

000053e8 <usb_getConfigurationDescriptor>:
 * @param conf configuration number
 * @param length length of the data buffer. This method will not write beyond this boundary.
 * @return number of bytes read, or negative number in case of error.
 */
int usb_getConfigurationDescriptor(usb_device * device, uint8_t conf, uint16_t length, uint8_t * data)
{
    53e8:	4f 92       	push	r4
    53ea:	5f 92       	push	r5
    53ec:	6f 92       	push	r6
    53ee:	7f 92       	push	r7
    53f0:	8f 92       	push	r8
    53f2:	9f 92       	push	r9
    53f4:	af 92       	push	r10
    53f6:	bf 92       	push	r11
    53f8:	cf 92       	push	r12
    53fa:	df 92       	push	r13
    53fc:	ef 92       	push	r14
    53fe:	ff 92       	push	r15
    5400:	0f 93       	push	r16
    5402:	1f 93       	push	r17
    5404:	cf 93       	push	r28
    5406:	df 93       	push	r29
    5408:	4c 01       	movw	r8, r24
    540a:	16 2f       	mov	r17, r22
    540c:	3a 01       	movw	r6, r20
    540e:	e9 01       	movw	r28, r18
        uint16_t descriptorLength;
        int rcode;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
    5410:	60 e8       	ldi	r22, 0x80	; 128
    5412:	46 e0       	ldi	r20, 0x06	; 6
    5414:	21 2f       	mov	r18, r17
    5416:	02 e0       	ldi	r16, 0x02	; 2
    5418:	ee 24       	eor	r14, r14
    541a:	ff 24       	eor	r15, r15
    541c:	34 e0       	ldi	r19, 0x04	; 4
    541e:	c3 2e       	mov	r12, r19
    5420:	d1 2c       	mov	r13, r1
    5422:	5e 01       	movw	r10, r28
    5424:	0e 94 42 29 	call	0x5284	; 0x5284 <usb_controlRequest>
        if (rcode) return -1;
    5428:	89 2b       	or	r24, r25
    542a:	a1 f0       	breq	.+40     	; 0x5454 <usb_getConfigurationDescriptor+0x6c>
    542c:	2f ef       	ldi	r18, 0xFF	; 255
    542e:	3f ef       	ldi	r19, 0xFF	; 255
        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
        if (rcode) return -2;

        return length;
}
    5430:	c9 01       	movw	r24, r18
    5432:	df 91       	pop	r29
    5434:	cf 91       	pop	r28
    5436:	1f 91       	pop	r17
    5438:	0f 91       	pop	r16
    543a:	ff 90       	pop	r15
    543c:	ef 90       	pop	r14
    543e:	df 90       	pop	r13
    5440:	cf 90       	pop	r12
    5442:	bf 90       	pop	r11
    5444:	af 90       	pop	r10
    5446:	9f 90       	pop	r9
    5448:	8f 90       	pop	r8
    544a:	7f 90       	pop	r7
    544c:	6f 90       	pop	r6
    544e:	5f 90       	pop	r5
    5450:	4f 90       	pop	r4
    5452:	08 95       	ret
        uint16_t descriptorLength;
        int rcode;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
        if (rcode) return -1;
    5454:	9b 81       	ldd	r25, Y+3	; 0x03
    5456:	80 e0       	ldi	r24, 0x00	; 0
    5458:	2a 81       	ldd	r18, Y+2	; 0x02
    545a:	42 2e       	mov	r4, r18
    545c:	55 24       	eor	r5, r5
    545e:	48 2a       	or	r4, r24
    5460:	59 2a       	or	r5, r25
    5462:	64 14       	cp	r6, r4
    5464:	75 04       	cpc	r7, r5
    5466:	08 f4       	brcc	.+2      	; 0x546a <usb_getConfigurationDescriptor+0x82>
    5468:	23 01       	movw	r4, r6

        descriptorLength = (data[3] << 8) | data[2];
        if (descriptorLength<length) length = descriptorLength;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
    546a:	c4 01       	movw	r24, r8
    546c:	60 e8       	ldi	r22, 0x80	; 128
    546e:	46 e0       	ldi	r20, 0x06	; 6
    5470:	21 2f       	mov	r18, r17
    5472:	02 e0       	ldi	r16, 0x02	; 2
    5474:	ee 24       	eor	r14, r14
    5476:	ff 24       	eor	r15, r15
    5478:	62 01       	movw	r12, r4
    547a:	5e 01       	movw	r10, r28
    547c:	0e 94 42 29 	call	0x5284	; 0x5284 <usb_controlRequest>
        if (rcode) return -2;
    5480:	89 2b       	or	r24, r25
    5482:	11 f4       	brne	.+4      	; 0x5488 <usb_getConfigurationDescriptor+0xa0>

        return length;
    5484:	92 01       	movw	r18, r4
    5486:	d4 cf       	rjmp	.-88     	; 0x5430 <usb_getConfigurationDescriptor+0x48>
        descriptorLength = (data[3] << 8) | data[2];
        if (descriptorLength<length) length = descriptorLength;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
        if (rcode) return -2;
    5488:	2e ef       	ldi	r18, 0xFE	; 254
    548a:	3f ef       	ldi	r19, 0xFF	; 255
    548c:	d1 cf       	rjmp	.-94     	; 0x5430 <usb_getConfigurationDescriptor+0x48>

0000548e <usb_getDeviceDescriptor>:
 * @param device USB device
 * @param descriptor pointer to a usb_deviceDescriptor record that will be filled with the requested data.
 * @return 0 in case of success, error code otherwise
 */
int usb_getDeviceDescriptor(usb_device * device, usb_deviceDescriptor * descriptor)
{
    548e:	af 92       	push	r10
    5490:	bf 92       	push	r11
    5492:	cf 92       	push	r12
    5494:	df 92       	push	r13
    5496:	ef 92       	push	r14
    5498:	ff 92       	push	r15
    549a:	0f 93       	push	r16
    549c:	5b 01       	movw	r10, r22
        return(usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, sizeof(usb_deviceDescriptor), (uint8_t *)descriptor));
    549e:	60 e8       	ldi	r22, 0x80	; 128
    54a0:	46 e0       	ldi	r20, 0x06	; 6
    54a2:	20 e0       	ldi	r18, 0x00	; 0
    54a4:	01 e0       	ldi	r16, 0x01	; 1
    54a6:	ee 24       	eor	r14, r14
    54a8:	ff 24       	eor	r15, r15
    54aa:	52 e1       	ldi	r21, 0x12	; 18
    54ac:	c5 2e       	mov	r12, r21
    54ae:	d1 2c       	mov	r13, r1
    54b0:	0e 94 42 29 	call	0x5284	; 0x5284 <usb_controlRequest>
}
    54b4:	0f 91       	pop	r16
    54b6:	ff 90       	pop	r15
    54b8:	ef 90       	pop	r14
    54ba:	df 90       	pop	r13
    54bc:	cf 90       	pop	r12
    54be:	bf 90       	pop	r11
    54c0:	af 90       	pop	r10
    54c2:	08 95       	ret

000054c4 <usb_getString>:
 * @param length buffer length.
 * @param str target buffer.
 * @return 0 on success, error code otherwise.
 */
int usb_getString(usb_device * device, uint8_t index, uint8_t languageId, uint16_t length, char * str)
{
    54c4:	2f 92       	push	r2
    54c6:	3f 92       	push	r3
    54c8:	4f 92       	push	r4
    54ca:	5f 92       	push	r5
    54cc:	6f 92       	push	r6
    54ce:	7f 92       	push	r7
    54d0:	8f 92       	push	r8
    54d2:	9f 92       	push	r9
    54d4:	af 92       	push	r10
    54d6:	bf 92       	push	r11
    54d8:	cf 92       	push	r12
    54da:	df 92       	push	r13
    54dc:	ef 92       	push	r14
    54de:	ff 92       	push	r15
    54e0:	0f 93       	push	r16
    54e2:	1f 93       	push	r17
    54e4:	df 93       	push	r29
    54e6:	cf 93       	push	r28
    54e8:	0f 92       	push	r0
    54ea:	cd b7       	in	r28, 0x3d	; 61
    54ec:	de b7       	in	r29, 0x3e	; 62
    54ee:	3c 01       	movw	r6, r24
    54f0:	36 2e       	mov	r3, r22
    54f2:	24 2e       	mov	r2, r20
    54f4:	49 01       	movw	r8, r18
    54f6:	28 01       	movw	r4, r16
        uint8_t stringLength = 0;
    54f8:	19 82       	std	Y+1, r1	; 0x01
        int i, ret = 0;

    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    54fa:	60 e8       	ldi	r22, 0x80	; 128
    54fc:	46 e0       	ldi	r20, 0x06	; 6
    54fe:	23 2d       	mov	r18, r3
    5500:	03 e0       	ldi	r16, 0x03	; 3
    5502:	e2 2c       	mov	r14, r2
    5504:	ff 24       	eor	r15, r15
    5506:	71 e0       	ldi	r23, 0x01	; 1
    5508:	c7 2e       	mov	r12, r23
    550a:	d1 2c       	mov	r13, r1
    550c:	5e 01       	movw	r10, r28
    550e:	08 94       	sec
    5510:	a1 1c       	adc	r10, r1
    5512:	b1 1c       	adc	r11, r1
    5514:	0e 94 42 29 	call	0x5284	; 0x5284 <usb_controlRequest>
    if (ret<0) return -1;
    5518:	97 ff       	sbrs	r25, 7
    551a:	17 c0       	rjmp	.+46     	; 0x554a <usb_getString+0x86>
    551c:	2f ef       	ldi	r18, 0xFF	; 255
    551e:	3f ef       	ldi	r19, 0xFF	; 255
        stringLength = (stringLength - 2) / 2;
        for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
        str[stringLength] = 0;

        return 0;
}
    5520:	c9 01       	movw	r24, r18
    5522:	0f 90       	pop	r0
    5524:	cf 91       	pop	r28
    5526:	df 91       	pop	r29
    5528:	1f 91       	pop	r17
    552a:	0f 91       	pop	r16
    552c:	ff 90       	pop	r15
    552e:	ef 90       	pop	r14
    5530:	df 90       	pop	r13
    5532:	cf 90       	pop	r12
    5534:	bf 90       	pop	r11
    5536:	af 90       	pop	r10
    5538:	9f 90       	pop	r9
    553a:	8f 90       	pop	r8
    553c:	7f 90       	pop	r7
    553e:	6f 90       	pop	r6
    5540:	5f 90       	pop	r5
    5542:	4f 90       	pop	r4
    5544:	3f 90       	pop	r3
    5546:	2f 90       	pop	r2
    5548:	08 95       	ret
    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    554a:	c9 80       	ldd	r12, Y+1	; 0x01
    554c:	8c 2d       	mov	r24, r12
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	88 16       	cp	r8, r24
    5552:	99 06       	cpc	r9, r25
    5554:	80 f1       	brcs	.+96     	; 0x55b6 <usb_getString+0xf2>

        // Get the whole thing.
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    5556:	c3 01       	movw	r24, r6
    5558:	60 e8       	ldi	r22, 0x80	; 128
    555a:	46 e0       	ldi	r20, 0x06	; 6
    555c:	23 2d       	mov	r18, r3
    555e:	03 e0       	ldi	r16, 0x03	; 3
    5560:	e2 2c       	mov	r14, r2
    5562:	ff 24       	eor	r15, r15
    5564:	dd 24       	eor	r13, r13
    5566:	52 01       	movw	r10, r4
    5568:	0e 94 42 29 	call	0x5284	; 0x5284 <usb_controlRequest>
    if (ret<0) return -2;
    556c:	97 fd       	sbrc	r25, 7
    556e:	26 c0       	rjmp	.+76     	; 0x55bc <usb_getString+0xf8>

        // Convert to 8-bit ASCII
        stringLength = (stringLength - 2) / 2;
    5570:	89 81       	ldd	r24, Y+1	; 0x01
    5572:	28 2f       	mov	r18, r24
    5574:	30 e0       	ldi	r19, 0x00	; 0
    5576:	c9 01       	movw	r24, r18
    5578:	02 97       	sbiw	r24, 0x02	; 2
    557a:	97 fd       	sbrc	r25, 7
    557c:	22 c0       	rjmp	.+68     	; 0x55c2 <usb_getString+0xfe>
    557e:	95 95       	asr	r25
    5580:	87 95       	ror	r24
    5582:	89 83       	std	Y+1, r24	; 0x01
        for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
    5584:	88 23       	and	r24, r24
    5586:	01 f1       	breq	.+64     	; 0x55c8 <usb_getString+0x104>
    5588:	b2 01       	movw	r22, r4
    558a:	f2 01       	movw	r30, r4
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	48 2f       	mov	r20, r24
    5592:	50 e0       	ldi	r21, 0x00	; 0
    5594:	2f 5f       	subi	r18, 0xFF	; 255
    5596:	3f 4f       	sbci	r19, 0xFF	; 255
    5598:	82 81       	ldd	r24, Z+2	; 0x02
    559a:	db 01       	movw	r26, r22
    559c:	8d 93       	st	X+, r24
    559e:	bd 01       	movw	r22, r26
    55a0:	32 96       	adiw	r30, 0x02	; 2
    55a2:	da 01       	movw	r26, r20
    55a4:	24 17       	cp	r18, r20
    55a6:	35 07       	cpc	r19, r21
    55a8:	ac f3       	brlt	.-22     	; 0x5594 <usb_getString+0xd0>
        str[stringLength] = 0;
    55aa:	a4 0d       	add	r26, r4
    55ac:	b5 1d       	adc	r27, r5
    55ae:	1c 92       	st	X, r1
    55b0:	20 e0       	ldi	r18, 0x00	; 0
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	b5 cf       	rjmp	.-150    	; 0x5520 <usb_getString+0x5c>
    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    55b6:	c8 2c       	mov	r12, r8
    55b8:	89 82       	std	Y+1, r8	; 0x01
    55ba:	cd cf       	rjmp	.-102    	; 0x5556 <usb_getString+0x92>

        // Get the whole thing.
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    if (ret<0) return -2;
    55bc:	2e ef       	ldi	r18, 0xFE	; 254
    55be:	3f ef       	ldi	r19, 0xFF	; 255
    55c0:	af cf       	rjmp	.-162    	; 0x5520 <usb_getString+0x5c>

        // Convert to 8-bit ASCII
        stringLength = (stringLength - 2) / 2;
    55c2:	c9 01       	movw	r24, r18
    55c4:	01 97       	sbiw	r24, 0x01	; 1
    55c6:	db cf       	rjmp	.-74     	; 0x557e <usb_getString+0xba>
    55c8:	a8 2f       	mov	r26, r24
    55ca:	b0 e0       	ldi	r27, 0x00	; 0
    55cc:	ee cf       	rjmp	.-36     	; 0x55aa <usb_getString+0xe6>

000055ce <usb_bulkRead>:
 * @param data target buffer.
 *
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
    55ce:	0f 93       	push	r16
    55d0:	1f 93       	push	r17
    55d2:	cf 93       	push	r28
    55d4:	df 93       	push	r29
    55d6:	fc 01       	movw	r30, r24
    55d8:	db 01       	movw	r26, r22
    55da:	ea 01       	movw	r28, r20
        return usb_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    55dc:	22 23       	and	r18, r18
    55de:	71 f4       	brne	.+28     	; 0x55fc <usb_bulkRead+0x2e>
    55e0:	00 e0       	ldi	r16, 0x00	; 0
    55e2:	1d e7       	ldi	r17, 0x7D	; 125
    55e4:	cf 01       	movw	r24, r30
    55e6:	38 96       	adiw	r30, 0x08	; 8
    55e8:	bf 01       	movw	r22, r30
    55ea:	ad 01       	movw	r20, r26
    55ec:	9e 01       	movw	r18, r28
    55ee:	0e 94 bd 28 	call	0x517a	; 0x517a <usb_read>
}
    55f2:	df 91       	pop	r29
    55f4:	cf 91       	pop	r28
    55f6:	1f 91       	pop	r17
    55f8:	0f 91       	pop	r16
    55fa:	08 95       	ret
 *
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
        return usb_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    55fc:	01 e0       	ldi	r16, 0x01	; 1
    55fe:	10 e0       	ldi	r17, 0x00	; 0
    5600:	f1 cf       	rjmp	.-30     	; 0x55e4 <usb_bulkRead+0x16>

00005602 <usb_init>:
/**
 * Initialises the USB layer.
 */
void usb_init()
{
        max3421e_init();
    5602:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <max3421e_init>
        max3421e_powerOn();
    5606:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <max3421e_powerOn>

        uint8_t i;

        // Initialise the USB state machine.
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    560a:	81 e1       	ldi	r24, 0x11	; 17
    560c:	80 93 00 02 	sts	0x0200, r24

        // Initialise the device table.
        for (i = 0; i < (USB_NUMDEVICES + 1); i++)
                deviceTable[i].active = false;
    5610:	10 92 97 09 	sts	0x0997, r1
    5614:	10 92 ad 09 	sts	0x09AD, r1
    5618:	10 92 c3 09 	sts	0x09C3, r1

        // Address 0 is used to configure devices and assign them an address when they are first plugged in
        deviceTable[0].address = 0;
    561c:	10 92 96 09 	sts	0x0996, r1
        usb_initEndPoint(&(deviceTable[0].control), 0);
    5620:	88 e9       	ldi	r24, 0x98	; 152
    5622:	99 e0       	ldi	r25, 0x09	; 9
    5624:	60 e0       	ldi	r22, 0x00	; 0
    5626:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <usb_initEndPoint>

}
    562a:	08 95       	ret

0000562c <usb_poll>:

/**
 * USB main task. Performs enumeration/cleanup
 */
void usb_poll(void)
{
    562c:	1f 93       	push	r17
    562e:	df 93       	push	r29
    5630:	cf 93       	push	r28
    5632:	cd b7       	in	r28, 0x3d	; 61
    5634:	de b7       	in	r29, 0x3e	; 62
    5636:	62 97       	sbiw	r28, 0x12	; 18
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	f8 94       	cli
    563c:	de bf       	out	0x3e, r29	; 62
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	cd bf       	out	0x3d, r28	; 61
        uint8_t tmpdata;
        static unsigned long delay = 0;
        usb_deviceDescriptor deviceDescriptor;

        // Poll the MAX3421E device.
        max3421e_poll();
    5642:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <max3421e_poll>

        /* modify USB task state if Vbus changed */
        tmpdata = max3421e_getVbusState();
    5646:	0e 94 6e 25 	call	0x4adc	; 0x4adc <max3421e_getVbusState>

        switch (tmpdata)
    564a:	81 30       	cpi	r24, 0x01	; 1
    564c:	09 f4       	brne	.+2      	; 0x5650 <usb_poll+0x24>
    564e:	44 c0       	rjmp	.+136    	; 0x56d8 <usb_poll+0xac>
    5650:	81 30       	cpi	r24, 0x01	; 1
    5652:	a0 f4       	brcc	.+40     	; 0x567c <usb_poll+0x50>
        {
        case SE1: //illegal state
                usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
                break;
        case SE0: //disconnected
                if ((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    5654:	10 91 00 02 	lds	r17, 0x0200
    5658:	81 2f       	mov	r24, r17
    565a:	80 7f       	andi	r24, 0xF0	; 240
    565c:	80 31       	cpi	r24, 0x10	; 16
    565e:	c1 f0       	breq	.+48     	; 0x5690 <usb_poll+0x64>
                {
                        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    5660:	81 e1       	ldi	r24, 0x11	; 17
    5662:	80 93 00 02 	sts	0x0200, r24
        case USB_DETACHED_SUBSTATE_INITIALIZE:

                // TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
                // devices.
                for (i = 1; i < USB_NUMDEVICES; i++)
                        if (deviceTable[i].active)
    5666:	80 91 ad 09 	lds	r24, 0x09AD
    566a:	88 23       	and	r24, r24
    566c:	09 f0       	breq	.+2      	; 0x5670 <usb_poll+0x44>
    566e:	ce c0       	rjmp	.+412    	; 0x580c <usb_poll+0x1e0>
                                usb_fireEvent(&(deviceTable[i]), USB_DISCONNECT);

                usb_init();
    5670:	0e 94 01 2b 	call	0x5602	; 0x5602 <usb_init>
                usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    5674:	82 e1       	ldi	r24, 0x12	; 18
    5676:	80 93 00 02 	sts	0x0200, r24
    567a:	31 c0       	rjmp	.+98     	; 0x56de <usb_poll+0xb2>
        max3421e_poll();

        /* modify USB task state if Vbus changed */
        tmpdata = max3421e_getVbusState();

        switch (tmpdata)
    567c:	84 30       	cpi	r24, 0x04	; 4
    567e:	08 f0       	brcs	.+2      	; 0x5682 <usb_poll+0x56>
    5680:	41 c0       	rjmp	.+130    	; 0x5704 <usb_poll+0xd8>
                        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
                }
                break;
        case FSHOST: //attached
        case LSHOST:
                if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
    5682:	10 91 00 02 	lds	r17, 0x0200
    5686:	81 2f       	mov	r24, r17
    5688:	80 7f       	andi	r24, 0xF0	; 240
    568a:	80 31       	cpi	r24, 0x10	; 16
    568c:	09 f4       	brne	.+2      	; 0x5690 <usb_poll+0x64>
    568e:	7e c0       	rjmp	.+252    	; 0x578c <usb_poll+0x160>
        }// switch( tmpdata

        //Serial.print("USB task state: ");
        //Serial.println( usb_task_state, HEX );

        switch (usb_task_state)
    5690:	10 34       	cpi	r17, 0x40	; 64
    5692:	e1 f1       	breq	.+120    	; 0x570c <usb_poll+0xe0>
    5694:	11 34       	cpi	r17, 0x41	; 65
    5696:	68 f1       	brcs	.+90     	; 0x56f2 <usb_poll+0xc6>
    5698:	10 36       	cpi	r17, 0x60	; 96
    569a:	09 f4       	brne	.+2      	; 0x569e <usb_poll+0x72>
    569c:	56 c0       	rjmp	.+172    	; 0x574a <usb_poll+0x11e>
    569e:	10 37       	cpi	r17, 0x70	; 112
    56a0:	09 f4       	brne	.+2      	; 0x56a4 <usb_poll+0x78>
    56a2:	99 c0       	rjmp	.+306    	; 0x57d6 <usb_poll+0x1aa>
    56a4:	10 35       	cpi	r17, 0x50	; 80
    56a6:	d9 f4       	brne	.+54     	; 0x56de <usb_poll+0xb2>
                        delay = avr_millis() + 20; //20ms wait after reset per USB spec
                }
                break;

        case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                if (max3421e_read(MAX_REG_HIRQ) & bmFRAMEIRQ)
    56a8:	88 ec       	ldi	r24, 0xC8	; 200
    56aa:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    56ae:	86 ff       	sbrs	r24, 6
    56b0:	16 c0       	rjmp	.+44     	; 0x56de <usb_poll+0xb2>
                { //when first SOF received we can continue
                        if (delay < avr_millis())
    56b2:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    56b6:	20 91 6a 09 	lds	r18, 0x096A
    56ba:	30 91 6b 09 	lds	r19, 0x096B
    56be:	40 91 6c 09 	lds	r20, 0x096C
    56c2:	50 91 6d 09 	lds	r21, 0x096D
    56c6:	26 17       	cp	r18, r22
    56c8:	37 07       	cpc	r19, r23
    56ca:	48 07       	cpc	r20, r24
    56cc:	59 07       	cpc	r21, r25
    56ce:	38 f4       	brcc	.+14     	; 0x56de <usb_poll+0xb2>
                        { //20ms passed
                                usb_task_state
    56d0:	80 e6       	ldi	r24, 0x60	; 96
    56d2:	80 93 00 02 	sts	0x0200, r24
    56d6:	03 c0       	rjmp	.+6      	; 0x56de <usb_poll+0xb2>
        tmpdata = max3421e_getVbusState();

        switch (tmpdata)
        {
        case SE1: //illegal state
                usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    56d8:	83 e1       	ldi	r24, 0x13	; 19
    56da:	80 93 00 02 	sts	0x0200, r24
        case USB_STATE_RUNNING:
                break;
        case USB_STATE_ERROR:
                break;
        }
}
    56de:	62 96       	adiw	r28, 0x12	; 18
    56e0:	0f b6       	in	r0, 0x3f	; 63
    56e2:	f8 94       	cli
    56e4:	de bf       	out	0x3e, r29	; 62
    56e6:	0f be       	out	0x3f, r0	; 63
    56e8:	cd bf       	out	0x3d, r28	; 61
    56ea:	cf 91       	pop	r28
    56ec:	df 91       	pop	r29
    56ee:	1f 91       	pop	r17
    56f0:	08 95       	ret
        }// switch( tmpdata

        //Serial.print("USB task state: ");
        //Serial.println( usb_task_state, HEX );

        switch (usb_task_state)
    56f2:	10 32       	cpi	r17, 0x20	; 32
    56f4:	09 f4       	brne	.+2      	; 0x56f8 <usb_poll+0xcc>
    56f6:	5b c0       	rjmp	.+182    	; 0x57ae <usb_poll+0x182>
    56f8:	10 33       	cpi	r17, 0x30	; 48
    56fa:	09 f4       	brne	.+2      	; 0x56fe <usb_poll+0xd2>
    56fc:	3f c0       	rjmp	.+126    	; 0x577c <usb_poll+0x150>
    56fe:	11 31       	cpi	r17, 0x11	; 17
    5700:	71 f7       	brne	.-36     	; 0x56de <usb_poll+0xb2>
    5702:	b1 cf       	rjmp	.-158    	; 0x5666 <usb_poll+0x3a>
    5704:	10 91 00 02 	lds	r17, 0x0200
    5708:	10 34       	cpi	r17, 0x40	; 64
    570a:	21 f6       	brne	.-120    	; 0x5694 <usb_poll+0x68>
                max3421e_write(MAX_REG_HCTL, bmBUSRST);
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
                break;

        case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                if ((max3421e_read(MAX_REG_HCTL) & bmBUSRST) == 0)
    570c:	88 ee       	ldi	r24, 0xE8	; 232
    570e:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
    5712:	80 fd       	sbrc	r24, 0
    5714:	e4 cf       	rjmp	.-56     	; 0x56de <usb_poll+0xb2>
                {
                        tmpdata = max3421e_read(MAX_REG_MODE) | bmSOFKAENAB; //start SOF generation
    5716:	88 ed       	ldi	r24, 0xD8	; 216
    5718:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <max3421e_read>
                        max3421e_write(MAX_REG_MODE, tmpdata);
    571c:	68 2f       	mov	r22, r24
    571e:	68 60       	ori	r22, 0x08	; 8
    5720:	88 ed       	ldi	r24, 0xD8	; 216
    5722:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
                        //                  max3421e_regWr( rMODE, bmSOFKAENAB );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    5726:	80 e5       	ldi	r24, 0x50	; 80
    5728:	80 93 00 02 	sts	0x0200, r24
                        delay = avr_millis() + 20; //20ms wait after reset per USB spec
    572c:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    5730:	6c 5e       	subi	r22, 0xEC	; 236
    5732:	7f 4f       	sbci	r23, 0xFF	; 255
    5734:	8f 4f       	sbci	r24, 0xFF	; 255
    5736:	9f 4f       	sbci	r25, 0xFF	; 255
    5738:	60 93 6a 09 	sts	0x096A, r22
    573c:	70 93 6b 09 	sts	0x096B, r23
    5740:	80 93 6c 09 	sts	0x096C, r24
    5744:	90 93 6d 09 	sts	0x096D, r25
    5748:	ca cf       	rjmp	.-108    	; 0x56de <usb_poll+0xb2>
                break;

        case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
                // toggle( BPNT_0 );

                deviceTable[0].control.maxPacketSize = 8;
    574a:	88 e0       	ldi	r24, 0x08	; 8
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	90 93 9b 09 	sts	0x099B, r25
    5752:	80 93 9a 09 	sts	0x099A, r24

                rcode = usb_getDeviceDescriptor(&deviceTable[0], &deviceDescriptor);
    5756:	86 e9       	ldi	r24, 0x96	; 150
    5758:	99 e0       	ldi	r25, 0x09	; 9
    575a:	be 01       	movw	r22, r28
    575c:	6f 5f       	subi	r22, 0xFF	; 255
    575e:	7f 4f       	sbci	r23, 0xFF	; 255
    5760:	0e 94 47 2a 	call	0x548e	; 0x548e <usb_getDeviceDescriptor>
                if (rcode == 0)
    5764:	88 23       	and	r24, r24
    5766:	09 f0       	breq	.+2      	; 0x576a <usb_poll+0x13e>
    5768:	4b c0       	rjmp	.+150    	; 0x5800 <usb_poll+0x1d4>
                {
                        deviceTable[0].control.maxPacketSize = deviceDescriptor.bMaxPacketSize0;
    576a:	88 85       	ldd	r24, Y+8	; 0x08
    576c:	80 93 9a 09 	sts	0x099A, r24
    5770:	10 92 9b 09 	sts	0x099B, r1
                        usb_task_state = USB_STATE_ADDRESSING;
    5774:	80 e7       	ldi	r24, 0x70	; 112
    5776:	80 93 00 02 	sts	0x0200, r24
    577a:	b1 cf       	rjmp	.-158    	; 0x56de <usb_poll+0xb2>
                }
                break;

        case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                // Issue bus reset.
                max3421e_write(MAX_REG_HCTL, bmBUSRST);
    577c:	88 ee       	ldi	r24, 0xE8	; 232
    577e:	61 e0       	ldi	r22, 0x01	; 1
    5780:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <max3421e_write>
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    5784:	80 e4       	ldi	r24, 0x40	; 64
    5786:	80 93 00 02 	sts	0x0200, r24
    578a:	a9 cf       	rjmp	.-174    	; 0x56de <usb_poll+0xb2>
                break;
        case FSHOST: //attached
        case LSHOST:
                if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
                {
                        delay = avr_millis() + USB_SETTLE_DELAY;
    578c:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    5790:	68 53       	subi	r22, 0x38	; 56
    5792:	7f 4f       	sbci	r23, 0xFF	; 255
    5794:	8f 4f       	sbci	r24, 0xFF	; 255
    5796:	9f 4f       	sbci	r25, 0xFF	; 255
    5798:	60 93 6a 09 	sts	0x096A, r22
    579c:	70 93 6b 09 	sts	0x096B, r23
    57a0:	80 93 6c 09 	sts	0x096C, r24
    57a4:	90 93 6d 09 	sts	0x096D, r25
                        usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    57a8:	80 e2       	ldi	r24, 0x20	; 32
    57aa:	80 93 00 02 	sts	0x0200, r24
        case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                break;
        case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                break;
        case USB_ATTACHED_SUBSTATE_SETTLE: //setlle time for just attached device
                if (delay < avr_millis())
    57ae:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <avr_millis>
    57b2:	20 91 6a 09 	lds	r18, 0x096A
    57b6:	30 91 6b 09 	lds	r19, 0x096B
    57ba:	40 91 6c 09 	lds	r20, 0x096C
    57be:	50 91 6d 09 	lds	r21, 0x096D
    57c2:	26 17       	cp	r18, r22
    57c4:	37 07       	cpc	r19, r23
    57c6:	48 07       	cpc	r20, r24
    57c8:	59 07       	cpc	r21, r25
    57ca:	08 f0       	brcs	.+2      	; 0x57ce <usb_poll+0x1a2>
    57cc:	88 cf       	rjmp	.-240    	; 0x56de <usb_poll+0xb2>
                {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    57ce:	80 e3       	ldi	r24, 0x30	; 48
    57d0:	80 93 00 02 	sts	0x0200, r24
    57d4:	84 cf       	rjmp	.-248    	; 0x56de <usb_poll+0xb2>
        case USB_STATE_ADDRESSING:

                // Look for an empty spot
                for (i = 1; i < USB_NUMDEVICES; i++)
                {
                        if (!deviceTable[i].active)
    57d6:	80 91 ad 09 	lds	r24, 0x09AD
    57da:	88 23       	and	r24, r24
    57dc:	e9 f0       	breq	.+58     	; 0x5818 <usb_poll+0x1ec>
                }

                // If no vacant spot was found in the device table, fire an error.
                if (usb_task_state == USB_STATE_ADDRESSING)
                {
                        usb_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);
    57de:	82 ec       	ldi	r24, 0xC2	; 194
    57e0:	99 e0       	ldi	r25, 0x09	; 9
    57e2:	62 e0       	ldi	r22, 0x02	; 2
    57e4:	0e 94 ce 24 	call	0x499c	; 0x499c <usb_fireEvent>

                        // No vacant place in devtable
                        usb_error = 0xfe;
    57e8:	8e ef       	ldi	r24, 0xFE	; 254
    57ea:	80 93 69 09 	sts	0x0969, r24
                        usb_task_state = USB_STATE_ERROR;
    57ee:	80 ea       	ldi	r24, 0xA0	; 160
    57f0:	80 93 00 02 	sts	0x0200, r24
    57f4:	74 cf       	rjmp	.-280    	; 0x56de <usb_poll+0xb2>
                                        // NB: I've bypassed the configuring state, because configuration should be handled
                                        // in the usb event handler.
                                        usb_task_state = USB_STATE_RUNNING;
                                } else
                                {
                                        usb_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);
    57f6:	8c ea       	ldi	r24, 0xAC	; 172
    57f8:	99 e0       	ldi	r25, 0x09	; 9
    57fa:	62 e0       	ldi	r22, 0x02	; 2
    57fc:	0e 94 ce 24 	call	0x499c	; 0x499c <usb_fireEvent>

                                        // TODO remove usb_error at some point?
                                        usb_error = USB_STATE_ADDRESSING;
    5800:	10 93 69 09 	sts	0x0969, r17
                                        usb_task_state = USB_STATE_ERROR;
    5804:	80 ea       	ldi	r24, 0xA0	; 160
    5806:	80 93 00 02 	sts	0x0200, r24
    580a:	69 cf       	rjmp	.-302    	; 0x56de <usb_poll+0xb2>

                // TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
                // devices.
                for (i = 1; i < USB_NUMDEVICES; i++)
                        if (deviceTable[i].active)
                                usb_fireEvent(&(deviceTable[i]), USB_DISCONNECT);
    580c:	8c ea       	ldi	r24, 0xAC	; 172
    580e:	99 e0       	ldi	r25, 0x09	; 9
    5810:	61 e0       	ldi	r22, 0x01	; 1
    5812:	0e 94 ce 24 	call	0x499c	; 0x499c <usb_fireEvent>
    5816:	2c cf       	rjmp	.-424    	; 0x5670 <usb_poll+0x44>
                        if (!deviceTable[i].active)
                        {
                                // Set correct MaxPktSize
                                // deviceTable[i].epinfo = deviceTable[0].epinfo;

                                deviceTable[i].address = i;
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	80 93 ac 09 	sts	0x09AC, r24
                                deviceTable[i].active = true;
    581e:	80 93 ad 09 	sts	0x09AD, r24

                                usb_initEndPoint(&(deviceTable[i].control), 0);
    5822:	8e ea       	ldi	r24, 0xAE	; 174
    5824:	99 e0       	ldi	r25, 0x09	; 9
    5826:	60 e0       	ldi	r22, 0x00	; 0
    5828:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <usb_initEndPoint>

                                //temporary record
                                //until plugged with real device endpoint structure
                                rcode = usb_setAddress(&deviceTable[0], i);
    582c:	86 e9       	ldi	r24, 0x96	; 150
    582e:	99 e0       	ldi	r25, 0x09	; 9
    5830:	61 e0       	ldi	r22, 0x01	; 1
    5832:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <usb_setAddress>

                                if (rcode == 0)
    5836:	88 23       	and	r24, r24
    5838:	f1 f6       	brne	.-68     	; 0x57f6 <usb_poll+0x1ca>
                                {
                                        usb_fireEvent(&deviceTable[i], USB_CONNECT);
    583a:	8c ea       	ldi	r24, 0xAC	; 172
    583c:	99 e0       	ldi	r25, 0x09	; 9
    583e:	60 e0       	ldi	r22, 0x00	; 0
    5840:	0e 94 ce 24 	call	0x499c	; 0x499c <usb_fireEvent>
                                        // usb_task_state = USB_STATE_CONFIGURING;
                                        // NB: I've bypassed the configuring state, because configuration should be handled
                                        // in the usb event handler.
                                        usb_task_state = USB_STATE_RUNNING;
    5844:	80 e9       	ldi	r24, 0x90	; 144
    5846:	80 93 00 02 	sts	0x0200, r24
    584a:	49 cf       	rjmp	.-366    	; 0x56de <usb_poll+0xb2>

0000584c <__subsf3>:
    584c:	50 58       	subi	r21, 0x80	; 128

0000584e <__addsf3>:
    584e:	bb 27       	eor	r27, r27
    5850:	aa 27       	eor	r26, r26
    5852:	0e d0       	rcall	.+28     	; 0x5870 <__addsf3x>
    5854:	11 c2       	rjmp	.+1058   	; 0x5c78 <__fp_round>
    5856:	02 d2       	rcall	.+1028   	; 0x5c5c <__fp_pscA>
    5858:	30 f0       	brcs	.+12     	; 0x5866 <__addsf3+0x18>
    585a:	07 d2       	rcall	.+1038   	; 0x5c6a <__fp_pscB>
    585c:	20 f0       	brcs	.+8      	; 0x5866 <__addsf3+0x18>
    585e:	31 f4       	brne	.+12     	; 0x586c <__addsf3+0x1e>
    5860:	9f 3f       	cpi	r25, 0xFF	; 255
    5862:	11 f4       	brne	.+4      	; 0x5868 <__addsf3+0x1a>
    5864:	1e f4       	brtc	.+6      	; 0x586c <__addsf3+0x1e>
    5866:	d2 c1       	rjmp	.+932    	; 0x5c0c <__fp_nan>
    5868:	0e f4       	brtc	.+2      	; 0x586c <__addsf3+0x1e>
    586a:	e0 95       	com	r30
    586c:	e7 fb       	bst	r30, 7
    586e:	9f c1       	rjmp	.+830    	; 0x5bae <__fp_inf>

00005870 <__addsf3x>:
    5870:	e9 2f       	mov	r30, r25
    5872:	13 d2       	rcall	.+1062   	; 0x5c9a <__fp_split3>
    5874:	80 f3       	brcs	.-32     	; 0x5856 <__addsf3+0x8>
    5876:	ba 17       	cp	r27, r26
    5878:	62 07       	cpc	r22, r18
    587a:	73 07       	cpc	r23, r19
    587c:	84 07       	cpc	r24, r20
    587e:	95 07       	cpc	r25, r21
    5880:	18 f0       	brcs	.+6      	; 0x5888 <__addsf3x+0x18>
    5882:	71 f4       	brne	.+28     	; 0x58a0 <__addsf3x+0x30>
    5884:	9e f5       	brtc	.+102    	; 0x58ec <__addsf3x+0x7c>
    5886:	42 c2       	rjmp	.+1156   	; 0x5d0c <__fp_zero>
    5888:	0e f4       	brtc	.+2      	; 0x588c <__addsf3x+0x1c>
    588a:	e0 95       	com	r30
    588c:	0b 2e       	mov	r0, r27
    588e:	ba 2f       	mov	r27, r26
    5890:	a0 2d       	mov	r26, r0
    5892:	0b 01       	movw	r0, r22
    5894:	b9 01       	movw	r22, r18
    5896:	90 01       	movw	r18, r0
    5898:	0c 01       	movw	r0, r24
    589a:	ca 01       	movw	r24, r20
    589c:	a0 01       	movw	r20, r0
    589e:	11 24       	eor	r1, r1
    58a0:	ff 27       	eor	r31, r31
    58a2:	59 1b       	sub	r21, r25
    58a4:	99 f0       	breq	.+38     	; 0x58cc <__addsf3x+0x5c>
    58a6:	59 3f       	cpi	r21, 0xF9	; 249
    58a8:	50 f4       	brcc	.+20     	; 0x58be <__addsf3x+0x4e>
    58aa:	50 3e       	cpi	r21, 0xE0	; 224
    58ac:	68 f1       	brcs	.+90     	; 0x5908 <__addsf3x+0x98>
    58ae:	1a 16       	cp	r1, r26
    58b0:	f0 40       	sbci	r31, 0x00	; 0
    58b2:	a2 2f       	mov	r26, r18
    58b4:	23 2f       	mov	r18, r19
    58b6:	34 2f       	mov	r19, r20
    58b8:	44 27       	eor	r20, r20
    58ba:	58 5f       	subi	r21, 0xF8	; 248
    58bc:	f3 cf       	rjmp	.-26     	; 0x58a4 <__addsf3x+0x34>
    58be:	46 95       	lsr	r20
    58c0:	37 95       	ror	r19
    58c2:	27 95       	ror	r18
    58c4:	a7 95       	ror	r26
    58c6:	f0 40       	sbci	r31, 0x00	; 0
    58c8:	53 95       	inc	r21
    58ca:	c9 f7       	brne	.-14     	; 0x58be <__addsf3x+0x4e>
    58cc:	7e f4       	brtc	.+30     	; 0x58ec <__addsf3x+0x7c>
    58ce:	1f 16       	cp	r1, r31
    58d0:	ba 0b       	sbc	r27, r26
    58d2:	62 0b       	sbc	r22, r18
    58d4:	73 0b       	sbc	r23, r19
    58d6:	84 0b       	sbc	r24, r20
    58d8:	ba f0       	brmi	.+46     	; 0x5908 <__addsf3x+0x98>
    58da:	91 50       	subi	r25, 0x01	; 1
    58dc:	a1 f0       	breq	.+40     	; 0x5906 <__addsf3x+0x96>
    58de:	ff 0f       	add	r31, r31
    58e0:	bb 1f       	adc	r27, r27
    58e2:	66 1f       	adc	r22, r22
    58e4:	77 1f       	adc	r23, r23
    58e6:	88 1f       	adc	r24, r24
    58e8:	c2 f7       	brpl	.-16     	; 0x58da <__addsf3x+0x6a>
    58ea:	0e c0       	rjmp	.+28     	; 0x5908 <__addsf3x+0x98>
    58ec:	ba 0f       	add	r27, r26
    58ee:	62 1f       	adc	r22, r18
    58f0:	73 1f       	adc	r23, r19
    58f2:	84 1f       	adc	r24, r20
    58f4:	48 f4       	brcc	.+18     	; 0x5908 <__addsf3x+0x98>
    58f6:	87 95       	ror	r24
    58f8:	77 95       	ror	r23
    58fa:	67 95       	ror	r22
    58fc:	b7 95       	ror	r27
    58fe:	f7 95       	ror	r31
    5900:	9e 3f       	cpi	r25, 0xFE	; 254
    5902:	08 f0       	brcs	.+2      	; 0x5906 <__addsf3x+0x96>
    5904:	b3 cf       	rjmp	.-154    	; 0x586c <__addsf3+0x1e>
    5906:	93 95       	inc	r25
    5908:	88 0f       	add	r24, r24
    590a:	08 f0       	brcs	.+2      	; 0x590e <__addsf3x+0x9e>
    590c:	99 27       	eor	r25, r25
    590e:	ee 0f       	add	r30, r30
    5910:	97 95       	ror	r25
    5912:	87 95       	ror	r24
    5914:	08 95       	ret

00005916 <atan>:
    5916:	df 93       	push	r29
    5918:	dd 27       	eor	r29, r29
    591a:	b9 2f       	mov	r27, r25
    591c:	bf 77       	andi	r27, 0x7F	; 127
    591e:	40 e8       	ldi	r20, 0x80	; 128
    5920:	5f e3       	ldi	r21, 0x3F	; 63
    5922:	16 16       	cp	r1, r22
    5924:	17 06       	cpc	r1, r23
    5926:	48 07       	cpc	r20, r24
    5928:	5b 07       	cpc	r21, r27
    592a:	10 f4       	brcc	.+4      	; 0x5930 <atan+0x1a>
    592c:	d9 2f       	mov	r29, r25
    592e:	f9 d1       	rcall	.+1010   	; 0x5d22 <inverse>
    5930:	9f 93       	push	r25
    5932:	8f 93       	push	r24
    5934:	7f 93       	push	r23
    5936:	6f 93       	push	r22
    5938:	23 d3       	rcall	.+1606   	; 0x5f80 <square>
    593a:	ec e1       	ldi	r30, 0x1C	; 28
    593c:	f2 e0       	ldi	r31, 0x02	; 2
    593e:	69 d1       	rcall	.+722    	; 0x5c12 <__fp_powser>
    5940:	9b d1       	rcall	.+822    	; 0x5c78 <__fp_round>
    5942:	2f 91       	pop	r18
    5944:	3f 91       	pop	r19
    5946:	4f 91       	pop	r20
    5948:	5f 91       	pop	r21
    594a:	61 d2       	rcall	.+1218   	; 0x5e0e <__mulsf3x>
    594c:	dd 23       	and	r29, r29
    594e:	49 f0       	breq	.+18     	; 0x5962 <atan+0x4c>
    5950:	90 58       	subi	r25, 0x80	; 128
    5952:	a2 ea       	ldi	r26, 0xA2	; 162
    5954:	2a ed       	ldi	r18, 0xDA	; 218
    5956:	3f e0       	ldi	r19, 0x0F	; 15
    5958:	49 ec       	ldi	r20, 0xC9	; 201
    595a:	5f e3       	ldi	r21, 0x3F	; 63
    595c:	d0 78       	andi	r29, 0x80	; 128
    595e:	5d 27       	eor	r21, r29
    5960:	87 df       	rcall	.-242    	; 0x5870 <__addsf3x>
    5962:	df 91       	pop	r29
    5964:	89 c1       	rjmp	.+786    	; 0x5c78 <__fp_round>

00005966 <ceil>:
    5966:	bb d1       	rcall	.+886    	; 0x5cde <__fp_trunc>
    5968:	80 f0       	brcs	.+32     	; 0x598a <ceil+0x24>
    596a:	9f 37       	cpi	r25, 0x7F	; 127
    596c:	40 f4       	brcc	.+16     	; 0x597e <ceil+0x18>
    596e:	91 11       	cpse	r25, r1
    5970:	0e f4       	brtc	.+2      	; 0x5974 <ceil+0xe>
    5972:	cd c1       	rjmp	.+922    	; 0x5d0e <__fp_szero>
    5974:	60 e0       	ldi	r22, 0x00	; 0
    5976:	70 e0       	ldi	r23, 0x00	; 0
    5978:	80 e8       	ldi	r24, 0x80	; 128
    597a:	9f e3       	ldi	r25, 0x3F	; 63
    597c:	08 95       	ret
    597e:	26 f0       	brts	.+8      	; 0x5988 <ceil+0x22>
    5980:	1b 16       	cp	r1, r27
    5982:	61 1d       	adc	r22, r1
    5984:	71 1d       	adc	r23, r1
    5986:	81 1d       	adc	r24, r1
    5988:	18 c1       	rjmp	.+560    	; 0x5bba <__fp_mintl>
    598a:	32 c1       	rjmp	.+612    	; 0x5bf0 <__fp_mpack>

0000598c <__cmpsf2>:
    598c:	ec d0       	rcall	.+472    	; 0x5b66 <__fp_cmp>
    598e:	08 f4       	brcc	.+2      	; 0x5992 <__cmpsf2+0x6>
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	08 95       	ret

00005994 <__divsf3>:
    5994:	0c d0       	rcall	.+24     	; 0x59ae <__divsf3x>
    5996:	70 c1       	rjmp	.+736    	; 0x5c78 <__fp_round>
    5998:	68 d1       	rcall	.+720    	; 0x5c6a <__fp_pscB>
    599a:	40 f0       	brcs	.+16     	; 0x59ac <__divsf3+0x18>
    599c:	5f d1       	rcall	.+702    	; 0x5c5c <__fp_pscA>
    599e:	30 f0       	brcs	.+12     	; 0x59ac <__divsf3+0x18>
    59a0:	21 f4       	brne	.+8      	; 0x59aa <__divsf3+0x16>
    59a2:	5f 3f       	cpi	r21, 0xFF	; 255
    59a4:	19 f0       	breq	.+6      	; 0x59ac <__divsf3+0x18>
    59a6:	03 c1       	rjmp	.+518    	; 0x5bae <__fp_inf>
    59a8:	51 11       	cpse	r21, r1
    59aa:	b1 c1       	rjmp	.+866    	; 0x5d0e <__fp_szero>
    59ac:	2f c1       	rjmp	.+606    	; 0x5c0c <__fp_nan>

000059ae <__divsf3x>:
    59ae:	75 d1       	rcall	.+746    	; 0x5c9a <__fp_split3>
    59b0:	98 f3       	brcs	.-26     	; 0x5998 <__divsf3+0x4>

000059b2 <__divsf3_pse>:
    59b2:	99 23       	and	r25, r25
    59b4:	c9 f3       	breq	.-14     	; 0x59a8 <__divsf3+0x14>
    59b6:	55 23       	and	r21, r21
    59b8:	b1 f3       	breq	.-20     	; 0x59a6 <__divsf3+0x12>
    59ba:	95 1b       	sub	r25, r21
    59bc:	55 0b       	sbc	r21, r21
    59be:	bb 27       	eor	r27, r27
    59c0:	aa 27       	eor	r26, r26
    59c2:	62 17       	cp	r22, r18
    59c4:	73 07       	cpc	r23, r19
    59c6:	84 07       	cpc	r24, r20
    59c8:	38 f0       	brcs	.+14     	; 0x59d8 <__divsf3_pse+0x26>
    59ca:	9f 5f       	subi	r25, 0xFF	; 255
    59cc:	5f 4f       	sbci	r21, 0xFF	; 255
    59ce:	22 0f       	add	r18, r18
    59d0:	33 1f       	adc	r19, r19
    59d2:	44 1f       	adc	r20, r20
    59d4:	aa 1f       	adc	r26, r26
    59d6:	a9 f3       	breq	.-22     	; 0x59c2 <__divsf3_pse+0x10>
    59d8:	33 d0       	rcall	.+102    	; 0x5a40 <__divsf3_pse+0x8e>
    59da:	0e 2e       	mov	r0, r30
    59dc:	3a f0       	brmi	.+14     	; 0x59ec <__divsf3_pse+0x3a>
    59de:	e0 e8       	ldi	r30, 0x80	; 128
    59e0:	30 d0       	rcall	.+96     	; 0x5a42 <__divsf3_pse+0x90>
    59e2:	91 50       	subi	r25, 0x01	; 1
    59e4:	50 40       	sbci	r21, 0x00	; 0
    59e6:	e6 95       	lsr	r30
    59e8:	00 1c       	adc	r0, r0
    59ea:	ca f7       	brpl	.-14     	; 0x59de <__divsf3_pse+0x2c>
    59ec:	29 d0       	rcall	.+82     	; 0x5a40 <__divsf3_pse+0x8e>
    59ee:	fe 2f       	mov	r31, r30
    59f0:	27 d0       	rcall	.+78     	; 0x5a40 <__divsf3_pse+0x8e>
    59f2:	66 0f       	add	r22, r22
    59f4:	77 1f       	adc	r23, r23
    59f6:	88 1f       	adc	r24, r24
    59f8:	bb 1f       	adc	r27, r27
    59fa:	26 17       	cp	r18, r22
    59fc:	37 07       	cpc	r19, r23
    59fe:	48 07       	cpc	r20, r24
    5a00:	ab 07       	cpc	r26, r27
    5a02:	b0 e8       	ldi	r27, 0x80	; 128
    5a04:	09 f0       	breq	.+2      	; 0x5a08 <__divsf3_pse+0x56>
    5a06:	bb 0b       	sbc	r27, r27
    5a08:	80 2d       	mov	r24, r0
    5a0a:	bf 01       	movw	r22, r30
    5a0c:	ff 27       	eor	r31, r31
    5a0e:	93 58       	subi	r25, 0x83	; 131
    5a10:	5f 4f       	sbci	r21, 0xFF	; 255
    5a12:	2a f0       	brmi	.+10     	; 0x5a1e <__divsf3_pse+0x6c>
    5a14:	9e 3f       	cpi	r25, 0xFE	; 254
    5a16:	51 05       	cpc	r21, r1
    5a18:	68 f0       	brcs	.+26     	; 0x5a34 <__divsf3_pse+0x82>
    5a1a:	c9 c0       	rjmp	.+402    	; 0x5bae <__fp_inf>
    5a1c:	78 c1       	rjmp	.+752    	; 0x5d0e <__fp_szero>
    5a1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a20:	ec f3       	brlt	.-6      	; 0x5a1c <__divsf3_pse+0x6a>
    5a22:	98 3e       	cpi	r25, 0xE8	; 232
    5a24:	dc f3       	brlt	.-10     	; 0x5a1c <__divsf3_pse+0x6a>
    5a26:	86 95       	lsr	r24
    5a28:	77 95       	ror	r23
    5a2a:	67 95       	ror	r22
    5a2c:	b7 95       	ror	r27
    5a2e:	f7 95       	ror	r31
    5a30:	9f 5f       	subi	r25, 0xFF	; 255
    5a32:	c9 f7       	brne	.-14     	; 0x5a26 <__divsf3_pse+0x74>
    5a34:	88 0f       	add	r24, r24
    5a36:	91 1d       	adc	r25, r1
    5a38:	96 95       	lsr	r25
    5a3a:	87 95       	ror	r24
    5a3c:	97 f9       	bld	r25, 7
    5a3e:	08 95       	ret
    5a40:	e1 e0       	ldi	r30, 0x01	; 1
    5a42:	66 0f       	add	r22, r22
    5a44:	77 1f       	adc	r23, r23
    5a46:	88 1f       	adc	r24, r24
    5a48:	bb 1f       	adc	r27, r27
    5a4a:	62 17       	cp	r22, r18
    5a4c:	73 07       	cpc	r23, r19
    5a4e:	84 07       	cpc	r24, r20
    5a50:	ba 07       	cpc	r27, r26
    5a52:	20 f0       	brcs	.+8      	; 0x5a5c <__divsf3_pse+0xaa>
    5a54:	62 1b       	sub	r22, r18
    5a56:	73 0b       	sbc	r23, r19
    5a58:	84 0b       	sbc	r24, r20
    5a5a:	ba 0b       	sbc	r27, r26
    5a5c:	ee 1f       	adc	r30, r30
    5a5e:	88 f7       	brcc	.-30     	; 0x5a42 <__divsf3_pse+0x90>
    5a60:	e0 95       	com	r30
    5a62:	08 95       	ret

00005a64 <__fixsfsi>:
    5a64:	04 d0       	rcall	.+8      	; 0x5a6e <__fixunssfsi>
    5a66:	68 94       	set
    5a68:	b1 11       	cpse	r27, r1
    5a6a:	51 c1       	rjmp	.+674    	; 0x5d0e <__fp_szero>
    5a6c:	08 95       	ret

00005a6e <__fixunssfsi>:
    5a6e:	1d d1       	rcall	.+570    	; 0x5caa <__fp_splitA>
    5a70:	88 f0       	brcs	.+34     	; 0x5a94 <__fixunssfsi+0x26>
    5a72:	9f 57       	subi	r25, 0x7F	; 127
    5a74:	90 f0       	brcs	.+36     	; 0x5a9a <__fixunssfsi+0x2c>
    5a76:	b9 2f       	mov	r27, r25
    5a78:	99 27       	eor	r25, r25
    5a7a:	b7 51       	subi	r27, 0x17	; 23
    5a7c:	a0 f0       	brcs	.+40     	; 0x5aa6 <__fixunssfsi+0x38>
    5a7e:	d1 f0       	breq	.+52     	; 0x5ab4 <__fixunssfsi+0x46>
    5a80:	66 0f       	add	r22, r22
    5a82:	77 1f       	adc	r23, r23
    5a84:	88 1f       	adc	r24, r24
    5a86:	99 1f       	adc	r25, r25
    5a88:	1a f0       	brmi	.+6      	; 0x5a90 <__fixunssfsi+0x22>
    5a8a:	ba 95       	dec	r27
    5a8c:	c9 f7       	brne	.-14     	; 0x5a80 <__fixunssfsi+0x12>
    5a8e:	12 c0       	rjmp	.+36     	; 0x5ab4 <__fixunssfsi+0x46>
    5a90:	b1 30       	cpi	r27, 0x01	; 1
    5a92:	81 f0       	breq	.+32     	; 0x5ab4 <__fixunssfsi+0x46>
    5a94:	3b d1       	rcall	.+630    	; 0x5d0c <__fp_zero>
    5a96:	b1 e0       	ldi	r27, 0x01	; 1
    5a98:	08 95       	ret
    5a9a:	38 c1       	rjmp	.+624    	; 0x5d0c <__fp_zero>
    5a9c:	67 2f       	mov	r22, r23
    5a9e:	78 2f       	mov	r23, r24
    5aa0:	88 27       	eor	r24, r24
    5aa2:	b8 5f       	subi	r27, 0xF8	; 248
    5aa4:	39 f0       	breq	.+14     	; 0x5ab4 <__fixunssfsi+0x46>
    5aa6:	b9 3f       	cpi	r27, 0xF9	; 249
    5aa8:	cc f3       	brlt	.-14     	; 0x5a9c <__fixunssfsi+0x2e>
    5aaa:	86 95       	lsr	r24
    5aac:	77 95       	ror	r23
    5aae:	67 95       	ror	r22
    5ab0:	b3 95       	inc	r27
    5ab2:	d9 f7       	brne	.-10     	; 0x5aaa <__fixunssfsi+0x3c>
    5ab4:	3e f4       	brtc	.+14     	; 0x5ac4 <__fixunssfsi+0x56>
    5ab6:	90 95       	com	r25
    5ab8:	80 95       	com	r24
    5aba:	70 95       	com	r23
    5abc:	61 95       	neg	r22
    5abe:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac4:	08 95       	ret

00005ac6 <__floatunsisf>:
    5ac6:	e8 94       	clt
    5ac8:	09 c0       	rjmp	.+18     	; 0x5adc <__floatsisf+0x12>

00005aca <__floatsisf>:
    5aca:	97 fb       	bst	r25, 7
    5acc:	3e f4       	brtc	.+14     	; 0x5adc <__floatsisf+0x12>
    5ace:	90 95       	com	r25
    5ad0:	80 95       	com	r24
    5ad2:	70 95       	com	r23
    5ad4:	61 95       	neg	r22
    5ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    5ada:	9f 4f       	sbci	r25, 0xFF	; 255
    5adc:	99 23       	and	r25, r25
    5ade:	a9 f0       	breq	.+42     	; 0x5b0a <__floatsisf+0x40>
    5ae0:	f9 2f       	mov	r31, r25
    5ae2:	96 e9       	ldi	r25, 0x96	; 150
    5ae4:	bb 27       	eor	r27, r27
    5ae6:	93 95       	inc	r25
    5ae8:	f6 95       	lsr	r31
    5aea:	87 95       	ror	r24
    5aec:	77 95       	ror	r23
    5aee:	67 95       	ror	r22
    5af0:	b7 95       	ror	r27
    5af2:	f1 11       	cpse	r31, r1
    5af4:	f8 cf       	rjmp	.-16     	; 0x5ae6 <__floatsisf+0x1c>
    5af6:	fa f4       	brpl	.+62     	; 0x5b36 <__floatsisf+0x6c>
    5af8:	bb 0f       	add	r27, r27
    5afa:	11 f4       	brne	.+4      	; 0x5b00 <__floatsisf+0x36>
    5afc:	60 ff       	sbrs	r22, 0
    5afe:	1b c0       	rjmp	.+54     	; 0x5b36 <__floatsisf+0x6c>
    5b00:	6f 5f       	subi	r22, 0xFF	; 255
    5b02:	7f 4f       	sbci	r23, 0xFF	; 255
    5b04:	8f 4f       	sbci	r24, 0xFF	; 255
    5b06:	9f 4f       	sbci	r25, 0xFF	; 255
    5b08:	16 c0       	rjmp	.+44     	; 0x5b36 <__floatsisf+0x6c>
    5b0a:	88 23       	and	r24, r24
    5b0c:	11 f0       	breq	.+4      	; 0x5b12 <__floatsisf+0x48>
    5b0e:	96 e9       	ldi	r25, 0x96	; 150
    5b10:	11 c0       	rjmp	.+34     	; 0x5b34 <__floatsisf+0x6a>
    5b12:	77 23       	and	r23, r23
    5b14:	21 f0       	breq	.+8      	; 0x5b1e <__floatsisf+0x54>
    5b16:	9e e8       	ldi	r25, 0x8E	; 142
    5b18:	87 2f       	mov	r24, r23
    5b1a:	76 2f       	mov	r23, r22
    5b1c:	05 c0       	rjmp	.+10     	; 0x5b28 <__floatsisf+0x5e>
    5b1e:	66 23       	and	r22, r22
    5b20:	71 f0       	breq	.+28     	; 0x5b3e <__floatsisf+0x74>
    5b22:	96 e8       	ldi	r25, 0x86	; 134
    5b24:	86 2f       	mov	r24, r22
    5b26:	70 e0       	ldi	r23, 0x00	; 0
    5b28:	60 e0       	ldi	r22, 0x00	; 0
    5b2a:	2a f0       	brmi	.+10     	; 0x5b36 <__floatsisf+0x6c>
    5b2c:	9a 95       	dec	r25
    5b2e:	66 0f       	add	r22, r22
    5b30:	77 1f       	adc	r23, r23
    5b32:	88 1f       	adc	r24, r24
    5b34:	da f7       	brpl	.-10     	; 0x5b2c <__floatsisf+0x62>
    5b36:	88 0f       	add	r24, r24
    5b38:	96 95       	lsr	r25
    5b3a:	87 95       	ror	r24
    5b3c:	97 f9       	bld	r25, 7
    5b3e:	08 95       	ret

00005b40 <floor>:
    5b40:	ce d0       	rcall	.+412    	; 0x5cde <__fp_trunc>
    5b42:	80 f0       	brcs	.+32     	; 0x5b64 <floor+0x24>
    5b44:	9f 37       	cpi	r25, 0x7F	; 127
    5b46:	40 f4       	brcc	.+16     	; 0x5b58 <floor+0x18>
    5b48:	91 11       	cpse	r25, r1
    5b4a:	0e f0       	brts	.+2      	; 0x5b4e <floor+0xe>
    5b4c:	e0 c0       	rjmp	.+448    	; 0x5d0e <__fp_szero>
    5b4e:	60 e0       	ldi	r22, 0x00	; 0
    5b50:	70 e0       	ldi	r23, 0x00	; 0
    5b52:	80 e8       	ldi	r24, 0x80	; 128
    5b54:	9f eb       	ldi	r25, 0xBF	; 191
    5b56:	08 95       	ret
    5b58:	26 f4       	brtc	.+8      	; 0x5b62 <floor+0x22>
    5b5a:	1b 16       	cp	r1, r27
    5b5c:	61 1d       	adc	r22, r1
    5b5e:	71 1d       	adc	r23, r1
    5b60:	81 1d       	adc	r24, r1
    5b62:	2b c0       	rjmp	.+86     	; 0x5bba <__fp_mintl>
    5b64:	45 c0       	rjmp	.+138    	; 0x5bf0 <__fp_mpack>

00005b66 <__fp_cmp>:
    5b66:	99 0f       	add	r25, r25
    5b68:	00 08       	sbc	r0, r0
    5b6a:	55 0f       	add	r21, r21
    5b6c:	aa 0b       	sbc	r26, r26
    5b6e:	e0 e8       	ldi	r30, 0x80	; 128
    5b70:	fe ef       	ldi	r31, 0xFE	; 254
    5b72:	16 16       	cp	r1, r22
    5b74:	17 06       	cpc	r1, r23
    5b76:	e8 07       	cpc	r30, r24
    5b78:	f9 07       	cpc	r31, r25
    5b7a:	c0 f0       	brcs	.+48     	; 0x5bac <__fp_cmp+0x46>
    5b7c:	12 16       	cp	r1, r18
    5b7e:	13 06       	cpc	r1, r19
    5b80:	e4 07       	cpc	r30, r20
    5b82:	f5 07       	cpc	r31, r21
    5b84:	98 f0       	brcs	.+38     	; 0x5bac <__fp_cmp+0x46>
    5b86:	62 1b       	sub	r22, r18
    5b88:	73 0b       	sbc	r23, r19
    5b8a:	84 0b       	sbc	r24, r20
    5b8c:	95 0b       	sbc	r25, r21
    5b8e:	39 f4       	brne	.+14     	; 0x5b9e <__fp_cmp+0x38>
    5b90:	0a 26       	eor	r0, r26
    5b92:	61 f0       	breq	.+24     	; 0x5bac <__fp_cmp+0x46>
    5b94:	23 2b       	or	r18, r19
    5b96:	24 2b       	or	r18, r20
    5b98:	25 2b       	or	r18, r21
    5b9a:	21 f4       	brne	.+8      	; 0x5ba4 <__fp_cmp+0x3e>
    5b9c:	08 95       	ret
    5b9e:	0a 26       	eor	r0, r26
    5ba0:	09 f4       	brne	.+2      	; 0x5ba4 <__fp_cmp+0x3e>
    5ba2:	a1 40       	sbci	r26, 0x01	; 1
    5ba4:	a6 95       	lsr	r26
    5ba6:	8f ef       	ldi	r24, 0xFF	; 255
    5ba8:	81 1d       	adc	r24, r1
    5baa:	81 1d       	adc	r24, r1
    5bac:	08 95       	ret

00005bae <__fp_inf>:
    5bae:	97 f9       	bld	r25, 7
    5bb0:	9f 67       	ori	r25, 0x7F	; 127
    5bb2:	80 e8       	ldi	r24, 0x80	; 128
    5bb4:	70 e0       	ldi	r23, 0x00	; 0
    5bb6:	60 e0       	ldi	r22, 0x00	; 0
    5bb8:	08 95       	ret

00005bba <__fp_mintl>:
    5bba:	88 23       	and	r24, r24
    5bbc:	71 f4       	brne	.+28     	; 0x5bda <__fp_mintl+0x20>
    5bbe:	77 23       	and	r23, r23
    5bc0:	21 f0       	breq	.+8      	; 0x5bca <__fp_mintl+0x10>
    5bc2:	98 50       	subi	r25, 0x08	; 8
    5bc4:	87 2b       	or	r24, r23
    5bc6:	76 2f       	mov	r23, r22
    5bc8:	07 c0       	rjmp	.+14     	; 0x5bd8 <__fp_mintl+0x1e>
    5bca:	66 23       	and	r22, r22
    5bcc:	11 f4       	brne	.+4      	; 0x5bd2 <__fp_mintl+0x18>
    5bce:	99 27       	eor	r25, r25
    5bd0:	0d c0       	rjmp	.+26     	; 0x5bec <__fp_mintl+0x32>
    5bd2:	90 51       	subi	r25, 0x10	; 16
    5bd4:	86 2b       	or	r24, r22
    5bd6:	70 e0       	ldi	r23, 0x00	; 0
    5bd8:	60 e0       	ldi	r22, 0x00	; 0
    5bda:	2a f0       	brmi	.+10     	; 0x5be6 <__fp_mintl+0x2c>
    5bdc:	9a 95       	dec	r25
    5bde:	66 0f       	add	r22, r22
    5be0:	77 1f       	adc	r23, r23
    5be2:	88 1f       	adc	r24, r24
    5be4:	da f7       	brpl	.-10     	; 0x5bdc <__fp_mintl+0x22>
    5be6:	88 0f       	add	r24, r24
    5be8:	96 95       	lsr	r25
    5bea:	87 95       	ror	r24
    5bec:	97 f9       	bld	r25, 7
    5bee:	08 95       	ret

00005bf0 <__fp_mpack>:
    5bf0:	9f 3f       	cpi	r25, 0xFF	; 255
    5bf2:	31 f0       	breq	.+12     	; 0x5c00 <__fp_mpack_finite+0xc>

00005bf4 <__fp_mpack_finite>:
    5bf4:	91 50       	subi	r25, 0x01	; 1
    5bf6:	20 f4       	brcc	.+8      	; 0x5c00 <__fp_mpack_finite+0xc>
    5bf8:	87 95       	ror	r24
    5bfa:	77 95       	ror	r23
    5bfc:	67 95       	ror	r22
    5bfe:	b7 95       	ror	r27
    5c00:	88 0f       	add	r24, r24
    5c02:	91 1d       	adc	r25, r1
    5c04:	96 95       	lsr	r25
    5c06:	87 95       	ror	r24
    5c08:	97 f9       	bld	r25, 7
    5c0a:	08 95       	ret

00005c0c <__fp_nan>:
    5c0c:	9f ef       	ldi	r25, 0xFF	; 255
    5c0e:	80 ec       	ldi	r24, 0xC0	; 192
    5c10:	08 95       	ret

00005c12 <__fp_powser>:
    5c12:	df 93       	push	r29
    5c14:	cf 93       	push	r28
    5c16:	1f 93       	push	r17
    5c18:	0f 93       	push	r16
    5c1a:	ff 92       	push	r15
    5c1c:	ef 92       	push	r14
    5c1e:	df 92       	push	r13
    5c20:	7b 01       	movw	r14, r22
    5c22:	8c 01       	movw	r16, r24
    5c24:	68 94       	set
    5c26:	05 c0       	rjmp	.+10     	; 0x5c32 <__fp_powser+0x20>
    5c28:	da 2e       	mov	r13, r26
    5c2a:	ef 01       	movw	r28, r30
    5c2c:	f0 d0       	rcall	.+480    	; 0x5e0e <__mulsf3x>
    5c2e:	fe 01       	movw	r30, r28
    5c30:	e8 94       	clt
    5c32:	a5 91       	lpm	r26, Z+
    5c34:	25 91       	lpm	r18, Z+
    5c36:	35 91       	lpm	r19, Z+
    5c38:	45 91       	lpm	r20, Z+
    5c3a:	55 91       	lpm	r21, Z+
    5c3c:	ae f3       	brts	.-22     	; 0x5c28 <__fp_powser+0x16>
    5c3e:	ef 01       	movw	r28, r30
    5c40:	17 de       	rcall	.-978    	; 0x5870 <__addsf3x>
    5c42:	fe 01       	movw	r30, r28
    5c44:	97 01       	movw	r18, r14
    5c46:	a8 01       	movw	r20, r16
    5c48:	da 94       	dec	r13
    5c4a:	79 f7       	brne	.-34     	; 0x5c2a <__fp_powser+0x18>
    5c4c:	df 90       	pop	r13
    5c4e:	ef 90       	pop	r14
    5c50:	ff 90       	pop	r15
    5c52:	0f 91       	pop	r16
    5c54:	1f 91       	pop	r17
    5c56:	cf 91       	pop	r28
    5c58:	df 91       	pop	r29
    5c5a:	08 95       	ret

00005c5c <__fp_pscA>:
    5c5c:	00 24       	eor	r0, r0
    5c5e:	0a 94       	dec	r0
    5c60:	16 16       	cp	r1, r22
    5c62:	17 06       	cpc	r1, r23
    5c64:	18 06       	cpc	r1, r24
    5c66:	09 06       	cpc	r0, r25
    5c68:	08 95       	ret

00005c6a <__fp_pscB>:
    5c6a:	00 24       	eor	r0, r0
    5c6c:	0a 94       	dec	r0
    5c6e:	12 16       	cp	r1, r18
    5c70:	13 06       	cpc	r1, r19
    5c72:	14 06       	cpc	r1, r20
    5c74:	05 06       	cpc	r0, r21
    5c76:	08 95       	ret

00005c78 <__fp_round>:
    5c78:	09 2e       	mov	r0, r25
    5c7a:	03 94       	inc	r0
    5c7c:	00 0c       	add	r0, r0
    5c7e:	11 f4       	brne	.+4      	; 0x5c84 <__fp_round+0xc>
    5c80:	88 23       	and	r24, r24
    5c82:	52 f0       	brmi	.+20     	; 0x5c98 <__fp_round+0x20>
    5c84:	bb 0f       	add	r27, r27
    5c86:	40 f4       	brcc	.+16     	; 0x5c98 <__fp_round+0x20>
    5c88:	bf 2b       	or	r27, r31
    5c8a:	11 f4       	brne	.+4      	; 0x5c90 <__fp_round+0x18>
    5c8c:	60 ff       	sbrs	r22, 0
    5c8e:	04 c0       	rjmp	.+8      	; 0x5c98 <__fp_round+0x20>
    5c90:	6f 5f       	subi	r22, 0xFF	; 255
    5c92:	7f 4f       	sbci	r23, 0xFF	; 255
    5c94:	8f 4f       	sbci	r24, 0xFF	; 255
    5c96:	9f 4f       	sbci	r25, 0xFF	; 255
    5c98:	08 95       	ret

00005c9a <__fp_split3>:
    5c9a:	57 fd       	sbrc	r21, 7
    5c9c:	90 58       	subi	r25, 0x80	; 128
    5c9e:	44 0f       	add	r20, r20
    5ca0:	55 1f       	adc	r21, r21
    5ca2:	59 f0       	breq	.+22     	; 0x5cba <__fp_splitA+0x10>
    5ca4:	5f 3f       	cpi	r21, 0xFF	; 255
    5ca6:	71 f0       	breq	.+28     	; 0x5cc4 <__fp_splitA+0x1a>
    5ca8:	47 95       	ror	r20

00005caa <__fp_splitA>:
    5caa:	88 0f       	add	r24, r24
    5cac:	97 fb       	bst	r25, 7
    5cae:	99 1f       	adc	r25, r25
    5cb0:	61 f0       	breq	.+24     	; 0x5cca <__fp_splitA+0x20>
    5cb2:	9f 3f       	cpi	r25, 0xFF	; 255
    5cb4:	79 f0       	breq	.+30     	; 0x5cd4 <__fp_splitA+0x2a>
    5cb6:	87 95       	ror	r24
    5cb8:	08 95       	ret
    5cba:	12 16       	cp	r1, r18
    5cbc:	13 06       	cpc	r1, r19
    5cbe:	14 06       	cpc	r1, r20
    5cc0:	55 1f       	adc	r21, r21
    5cc2:	f2 cf       	rjmp	.-28     	; 0x5ca8 <__fp_split3+0xe>
    5cc4:	46 95       	lsr	r20
    5cc6:	f1 df       	rcall	.-30     	; 0x5caa <__fp_splitA>
    5cc8:	08 c0       	rjmp	.+16     	; 0x5cda <__fp_splitA+0x30>
    5cca:	16 16       	cp	r1, r22
    5ccc:	17 06       	cpc	r1, r23
    5cce:	18 06       	cpc	r1, r24
    5cd0:	99 1f       	adc	r25, r25
    5cd2:	f1 cf       	rjmp	.-30     	; 0x5cb6 <__fp_splitA+0xc>
    5cd4:	86 95       	lsr	r24
    5cd6:	71 05       	cpc	r23, r1
    5cd8:	61 05       	cpc	r22, r1
    5cda:	08 94       	sec
    5cdc:	08 95       	ret

00005cde <__fp_trunc>:
    5cde:	e5 df       	rcall	.-54     	; 0x5caa <__fp_splitA>
    5ce0:	a0 f0       	brcs	.+40     	; 0x5d0a <__fp_trunc+0x2c>
    5ce2:	be e7       	ldi	r27, 0x7E	; 126
    5ce4:	b9 17       	cp	r27, r25
    5ce6:	88 f4       	brcc	.+34     	; 0x5d0a <__fp_trunc+0x2c>
    5ce8:	bb 27       	eor	r27, r27
    5cea:	9f 38       	cpi	r25, 0x8F	; 143
    5cec:	60 f4       	brcc	.+24     	; 0x5d06 <__fp_trunc+0x28>
    5cee:	16 16       	cp	r1, r22
    5cf0:	b1 1d       	adc	r27, r1
    5cf2:	67 2f       	mov	r22, r23
    5cf4:	78 2f       	mov	r23, r24
    5cf6:	88 27       	eor	r24, r24
    5cf8:	98 5f       	subi	r25, 0xF8	; 248
    5cfa:	f7 cf       	rjmp	.-18     	; 0x5cea <__fp_trunc+0xc>
    5cfc:	86 95       	lsr	r24
    5cfe:	77 95       	ror	r23
    5d00:	67 95       	ror	r22
    5d02:	b1 1d       	adc	r27, r1
    5d04:	93 95       	inc	r25
    5d06:	96 39       	cpi	r25, 0x96	; 150
    5d08:	c8 f3       	brcs	.-14     	; 0x5cfc <__fp_trunc+0x1e>
    5d0a:	08 95       	ret

00005d0c <__fp_zero>:
    5d0c:	e8 94       	clt

00005d0e <__fp_szero>:
    5d0e:	bb 27       	eor	r27, r27
    5d10:	66 27       	eor	r22, r22
    5d12:	77 27       	eor	r23, r23
    5d14:	cb 01       	movw	r24, r22
    5d16:	97 f9       	bld	r25, 7
    5d18:	08 95       	ret

00005d1a <__gesf2>:
    5d1a:	25 df       	rcall	.-438    	; 0x5b66 <__fp_cmp>
    5d1c:	08 f4       	brcc	.+2      	; 0x5d20 <__gesf2+0x6>
    5d1e:	8f ef       	ldi	r24, 0xFF	; 255
    5d20:	08 95       	ret

00005d22 <inverse>:
    5d22:	9b 01       	movw	r18, r22
    5d24:	ac 01       	movw	r20, r24
    5d26:	60 e0       	ldi	r22, 0x00	; 0
    5d28:	70 e0       	ldi	r23, 0x00	; 0
    5d2a:	80 e8       	ldi	r24, 0x80	; 128
    5d2c:	9f e3       	ldi	r25, 0x3F	; 63
    5d2e:	32 ce       	rjmp	.-924    	; 0x5994 <__divsf3>

00005d30 <lround>:
    5d30:	bc df       	rcall	.-136    	; 0x5caa <__fp_splitA>
    5d32:	58 f1       	brcs	.+86     	; 0x5d8a <lround+0x5a>
    5d34:	9e 57       	subi	r25, 0x7E	; 126
    5d36:	58 f1       	brcs	.+86     	; 0x5d8e <lround+0x5e>
    5d38:	98 51       	subi	r25, 0x18	; 24
    5d3a:	a0 f0       	brcs	.+40     	; 0x5d64 <lround+0x34>
    5d3c:	e9 f0       	breq	.+58     	; 0x5d78 <lround+0x48>
    5d3e:	98 30       	cpi	r25, 0x08	; 8
    5d40:	20 f5       	brcc	.+72     	; 0x5d8a <lround+0x5a>
    5d42:	09 2e       	mov	r0, r25
    5d44:	99 27       	eor	r25, r25
    5d46:	66 0f       	add	r22, r22
    5d48:	77 1f       	adc	r23, r23
    5d4a:	88 1f       	adc	r24, r24
    5d4c:	99 1f       	adc	r25, r25
    5d4e:	0a 94       	dec	r0
    5d50:	d1 f7       	brne	.-12     	; 0x5d46 <lround+0x16>
    5d52:	12 c0       	rjmp	.+36     	; 0x5d78 <lround+0x48>
    5d54:	06 2e       	mov	r0, r22
    5d56:	67 2f       	mov	r22, r23
    5d58:	78 2f       	mov	r23, r24
    5d5a:	88 27       	eor	r24, r24
    5d5c:	98 5f       	subi	r25, 0xF8	; 248
    5d5e:	11 f4       	brne	.+4      	; 0x5d64 <lround+0x34>
    5d60:	00 0c       	add	r0, r0
    5d62:	07 c0       	rjmp	.+14     	; 0x5d72 <lround+0x42>
    5d64:	99 3f       	cpi	r25, 0xF9	; 249
    5d66:	b4 f3       	brlt	.-20     	; 0x5d54 <lround+0x24>
    5d68:	86 95       	lsr	r24
    5d6a:	77 95       	ror	r23
    5d6c:	67 95       	ror	r22
    5d6e:	93 95       	inc	r25
    5d70:	d9 f7       	brne	.-10     	; 0x5d68 <lround+0x38>
    5d72:	61 1d       	adc	r22, r1
    5d74:	71 1d       	adc	r23, r1
    5d76:	81 1d       	adc	r24, r1
    5d78:	3e f4       	brtc	.+14     	; 0x5d88 <lround+0x58>
    5d7a:	90 95       	com	r25
    5d7c:	80 95       	com	r24
    5d7e:	70 95       	com	r23
    5d80:	61 95       	neg	r22
    5d82:	7f 4f       	sbci	r23, 0xFF	; 255
    5d84:	8f 4f       	sbci	r24, 0xFF	; 255
    5d86:	9f 4f       	sbci	r25, 0xFF	; 255
    5d88:	08 95       	ret
    5d8a:	68 94       	set
    5d8c:	c0 cf       	rjmp	.-128    	; 0x5d0e <__fp_szero>
    5d8e:	be cf       	rjmp	.-132    	; 0x5d0c <__fp_zero>

00005d90 <modf>:
    5d90:	fa 01       	movw	r30, r20
    5d92:	dc 01       	movw	r26, r24
    5d94:	aa 0f       	add	r26, r26
    5d96:	bb 1f       	adc	r27, r27
    5d98:	9b 01       	movw	r18, r22
    5d9a:	ac 01       	movw	r20, r24
    5d9c:	bf 57       	subi	r27, 0x7F	; 127
    5d9e:	28 f4       	brcc	.+10     	; 0x5daa <modf+0x1a>
    5da0:	22 27       	eor	r18, r18
    5da2:	33 27       	eor	r19, r19
    5da4:	44 27       	eor	r20, r20
    5da6:	50 78       	andi	r21, 0x80	; 128
    5da8:	1f c0       	rjmp	.+62     	; 0x5de8 <modf+0x58>
    5daa:	b7 51       	subi	r27, 0x17	; 23
    5dac:	88 f4       	brcc	.+34     	; 0x5dd0 <modf+0x40>
    5dae:	ab 2f       	mov	r26, r27
    5db0:	00 24       	eor	r0, r0
    5db2:	46 95       	lsr	r20
    5db4:	37 95       	ror	r19
    5db6:	27 95       	ror	r18
    5db8:	01 1c       	adc	r0, r1
    5dba:	a3 95       	inc	r26
    5dbc:	d2 f3       	brmi	.-12     	; 0x5db2 <modf+0x22>
    5dbe:	00 20       	and	r0, r0
    5dc0:	69 f0       	breq	.+26     	; 0x5ddc <modf+0x4c>
    5dc2:	22 0f       	add	r18, r18
    5dc4:	33 1f       	adc	r19, r19
    5dc6:	44 1f       	adc	r20, r20
    5dc8:	b3 95       	inc	r27
    5dca:	da f3       	brmi	.-10     	; 0x5dc2 <modf+0x32>
    5dcc:	0d d0       	rcall	.+26     	; 0x5de8 <modf+0x58>
    5dce:	3e cd       	rjmp	.-1412   	; 0x584c <__subsf3>
    5dd0:	61 30       	cpi	r22, 0x01	; 1
    5dd2:	71 05       	cpc	r23, r1
    5dd4:	a0 e8       	ldi	r26, 0x80	; 128
    5dd6:	8a 07       	cpc	r24, r26
    5dd8:	b9 46       	sbci	r27, 0x69	; 105
    5dda:	30 f4       	brcc	.+12     	; 0x5de8 <modf+0x58>
    5ddc:	9b 01       	movw	r18, r22
    5dde:	ac 01       	movw	r20, r24
    5de0:	66 27       	eor	r22, r22
    5de2:	77 27       	eor	r23, r23
    5de4:	88 27       	eor	r24, r24
    5de6:	90 78       	andi	r25, 0x80	; 128
    5de8:	30 96       	adiw	r30, 0x00	; 0
    5dea:	21 f0       	breq	.+8      	; 0x5df4 <modf+0x64>
    5dec:	20 83       	st	Z, r18
    5dee:	31 83       	std	Z+1, r19	; 0x01
    5df0:	42 83       	std	Z+2, r20	; 0x02
    5df2:	53 83       	std	Z+3, r21	; 0x03
    5df4:	08 95       	ret

00005df6 <__mulsf3>:
    5df6:	0b d0       	rcall	.+22     	; 0x5e0e <__mulsf3x>
    5df8:	3f cf       	rjmp	.-386    	; 0x5c78 <__fp_round>
    5dfa:	30 df       	rcall	.-416    	; 0x5c5c <__fp_pscA>
    5dfc:	28 f0       	brcs	.+10     	; 0x5e08 <__mulsf3+0x12>
    5dfe:	35 df       	rcall	.-406    	; 0x5c6a <__fp_pscB>
    5e00:	18 f0       	brcs	.+6      	; 0x5e08 <__mulsf3+0x12>
    5e02:	95 23       	and	r25, r21
    5e04:	09 f0       	breq	.+2      	; 0x5e08 <__mulsf3+0x12>
    5e06:	d3 ce       	rjmp	.-602    	; 0x5bae <__fp_inf>
    5e08:	01 cf       	rjmp	.-510    	; 0x5c0c <__fp_nan>
    5e0a:	11 24       	eor	r1, r1
    5e0c:	80 cf       	rjmp	.-256    	; 0x5d0e <__fp_szero>

00005e0e <__mulsf3x>:
    5e0e:	45 df       	rcall	.-374    	; 0x5c9a <__fp_split3>
    5e10:	a0 f3       	brcs	.-24     	; 0x5dfa <__mulsf3+0x4>

00005e12 <__mulsf3_pse>:
    5e12:	95 9f       	mul	r25, r21
    5e14:	d1 f3       	breq	.-12     	; 0x5e0a <__mulsf3+0x14>
    5e16:	95 0f       	add	r25, r21
    5e18:	50 e0       	ldi	r21, 0x00	; 0
    5e1a:	55 1f       	adc	r21, r21
    5e1c:	62 9f       	mul	r22, r18
    5e1e:	f0 01       	movw	r30, r0
    5e20:	72 9f       	mul	r23, r18
    5e22:	bb 27       	eor	r27, r27
    5e24:	f0 0d       	add	r31, r0
    5e26:	b1 1d       	adc	r27, r1
    5e28:	63 9f       	mul	r22, r19
    5e2a:	aa 27       	eor	r26, r26
    5e2c:	f0 0d       	add	r31, r0
    5e2e:	b1 1d       	adc	r27, r1
    5e30:	aa 1f       	adc	r26, r26
    5e32:	64 9f       	mul	r22, r20
    5e34:	66 27       	eor	r22, r22
    5e36:	b0 0d       	add	r27, r0
    5e38:	a1 1d       	adc	r26, r1
    5e3a:	66 1f       	adc	r22, r22
    5e3c:	82 9f       	mul	r24, r18
    5e3e:	22 27       	eor	r18, r18
    5e40:	b0 0d       	add	r27, r0
    5e42:	a1 1d       	adc	r26, r1
    5e44:	62 1f       	adc	r22, r18
    5e46:	73 9f       	mul	r23, r19
    5e48:	b0 0d       	add	r27, r0
    5e4a:	a1 1d       	adc	r26, r1
    5e4c:	62 1f       	adc	r22, r18
    5e4e:	83 9f       	mul	r24, r19
    5e50:	a0 0d       	add	r26, r0
    5e52:	61 1d       	adc	r22, r1
    5e54:	22 1f       	adc	r18, r18
    5e56:	74 9f       	mul	r23, r20
    5e58:	33 27       	eor	r19, r19
    5e5a:	a0 0d       	add	r26, r0
    5e5c:	61 1d       	adc	r22, r1
    5e5e:	23 1f       	adc	r18, r19
    5e60:	84 9f       	mul	r24, r20
    5e62:	60 0d       	add	r22, r0
    5e64:	21 1d       	adc	r18, r1
    5e66:	82 2f       	mov	r24, r18
    5e68:	76 2f       	mov	r23, r22
    5e6a:	6a 2f       	mov	r22, r26
    5e6c:	11 24       	eor	r1, r1
    5e6e:	9f 57       	subi	r25, 0x7F	; 127
    5e70:	50 40       	sbci	r21, 0x00	; 0
    5e72:	8a f0       	brmi	.+34     	; 0x5e96 <__mulsf3_pse+0x84>
    5e74:	e1 f0       	breq	.+56     	; 0x5eae <__mulsf3_pse+0x9c>
    5e76:	88 23       	and	r24, r24
    5e78:	4a f0       	brmi	.+18     	; 0x5e8c <__mulsf3_pse+0x7a>
    5e7a:	ee 0f       	add	r30, r30
    5e7c:	ff 1f       	adc	r31, r31
    5e7e:	bb 1f       	adc	r27, r27
    5e80:	66 1f       	adc	r22, r22
    5e82:	77 1f       	adc	r23, r23
    5e84:	88 1f       	adc	r24, r24
    5e86:	91 50       	subi	r25, 0x01	; 1
    5e88:	50 40       	sbci	r21, 0x00	; 0
    5e8a:	a9 f7       	brne	.-22     	; 0x5e76 <__mulsf3_pse+0x64>
    5e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    5e8e:	51 05       	cpc	r21, r1
    5e90:	70 f0       	brcs	.+28     	; 0x5eae <__mulsf3_pse+0x9c>
    5e92:	8d ce       	rjmp	.-742    	; 0x5bae <__fp_inf>
    5e94:	3c cf       	rjmp	.-392    	; 0x5d0e <__fp_szero>
    5e96:	5f 3f       	cpi	r21, 0xFF	; 255
    5e98:	ec f3       	brlt	.-6      	; 0x5e94 <__mulsf3_pse+0x82>
    5e9a:	98 3e       	cpi	r25, 0xE8	; 232
    5e9c:	dc f3       	brlt	.-10     	; 0x5e94 <__mulsf3_pse+0x82>
    5e9e:	86 95       	lsr	r24
    5ea0:	77 95       	ror	r23
    5ea2:	67 95       	ror	r22
    5ea4:	b7 95       	ror	r27
    5ea6:	f7 95       	ror	r31
    5ea8:	e7 95       	ror	r30
    5eaa:	9f 5f       	subi	r25, 0xFF	; 255
    5eac:	c1 f7       	brne	.-16     	; 0x5e9e <__mulsf3_pse+0x8c>
    5eae:	fe 2b       	or	r31, r30
    5eb0:	88 0f       	add	r24, r24
    5eb2:	91 1d       	adc	r25, r1
    5eb4:	96 95       	lsr	r25
    5eb6:	87 95       	ror	r24
    5eb8:	97 f9       	bld	r25, 7
    5eba:	08 95       	ret

00005ebc <round>:
    5ebc:	f6 de       	rcall	.-532    	; 0x5caa <__fp_splitA>
    5ebe:	e0 f0       	brcs	.+56     	; 0x5ef8 <round+0x3c>
    5ec0:	9e 37       	cpi	r25, 0x7E	; 126
    5ec2:	d8 f0       	brcs	.+54     	; 0x5efa <round+0x3e>
    5ec4:	96 39       	cpi	r25, 0x96	; 150
    5ec6:	b8 f4       	brcc	.+46     	; 0x5ef6 <round+0x3a>
    5ec8:	9e 38       	cpi	r25, 0x8E	; 142
    5eca:	48 f4       	brcc	.+18     	; 0x5ede <round+0x22>
    5ecc:	67 2f       	mov	r22, r23
    5ece:	78 2f       	mov	r23, r24
    5ed0:	88 27       	eor	r24, r24
    5ed2:	98 5f       	subi	r25, 0xF8	; 248
    5ed4:	f9 cf       	rjmp	.-14     	; 0x5ec8 <round+0xc>
    5ed6:	86 95       	lsr	r24
    5ed8:	77 95       	ror	r23
    5eda:	67 95       	ror	r22
    5edc:	93 95       	inc	r25
    5ede:	95 39       	cpi	r25, 0x95	; 149
    5ee0:	d0 f3       	brcs	.-12     	; 0x5ed6 <round+0x1a>
    5ee2:	b6 2f       	mov	r27, r22
    5ee4:	b1 70       	andi	r27, 0x01	; 1
    5ee6:	6b 0f       	add	r22, r27
    5ee8:	71 1d       	adc	r23, r1
    5eea:	81 1d       	adc	r24, r1
    5eec:	20 f4       	brcc	.+8      	; 0x5ef6 <round+0x3a>
    5eee:	87 95       	ror	r24
    5ef0:	77 95       	ror	r23
    5ef2:	67 95       	ror	r22
    5ef4:	93 95       	inc	r25
    5ef6:	61 ce       	rjmp	.-830    	; 0x5bba <__fp_mintl>
    5ef8:	7b ce       	rjmp	.-778    	; 0x5bf0 <__fp_mpack>
    5efa:	09 cf       	rjmp	.-494    	; 0x5d0e <__fp_szero>
    5efc:	11 f4       	brne	.+4      	; 0x5f02 <round+0x46>
    5efe:	0e f4       	brtc	.+2      	; 0x5f02 <round+0x46>
    5f00:	85 ce       	rjmp	.-758    	; 0x5c0c <__fp_nan>
    5f02:	76 ce       	rjmp	.-788    	; 0x5bf0 <__fp_mpack>

00005f04 <sqrt>:
    5f04:	d2 de       	rcall	.-604    	; 0x5caa <__fp_splitA>
    5f06:	d0 f3       	brcs	.-12     	; 0x5efc <round+0x40>
    5f08:	99 23       	and	r25, r25
    5f0a:	d9 f3       	breq	.-10     	; 0x5f02 <round+0x46>
    5f0c:	ce f3       	brts	.-14     	; 0x5f00 <round+0x44>
    5f0e:	9f 57       	subi	r25, 0x7F	; 127
    5f10:	55 0b       	sbc	r21, r21
    5f12:	87 ff       	sbrs	r24, 7
    5f14:	3f d0       	rcall	.+126    	; 0x5f94 <__fp_norm2>
    5f16:	00 24       	eor	r0, r0
    5f18:	a0 e6       	ldi	r26, 0x60	; 96
    5f1a:	40 ea       	ldi	r20, 0xA0	; 160
    5f1c:	90 01       	movw	r18, r0
    5f1e:	80 58       	subi	r24, 0x80	; 128
    5f20:	56 95       	lsr	r21
    5f22:	97 95       	ror	r25
    5f24:	28 f4       	brcc	.+10     	; 0x5f30 <sqrt+0x2c>
    5f26:	80 5c       	subi	r24, 0xC0	; 192
    5f28:	66 0f       	add	r22, r22
    5f2a:	77 1f       	adc	r23, r23
    5f2c:	88 1f       	adc	r24, r24
    5f2e:	20 f0       	brcs	.+8      	; 0x5f38 <sqrt+0x34>
    5f30:	26 17       	cp	r18, r22
    5f32:	37 07       	cpc	r19, r23
    5f34:	48 07       	cpc	r20, r24
    5f36:	30 f4       	brcc	.+12     	; 0x5f44 <sqrt+0x40>
    5f38:	62 1b       	sub	r22, r18
    5f3a:	73 0b       	sbc	r23, r19
    5f3c:	84 0b       	sbc	r24, r20
    5f3e:	20 29       	or	r18, r0
    5f40:	31 29       	or	r19, r1
    5f42:	4a 2b       	or	r20, r26
    5f44:	a6 95       	lsr	r26
    5f46:	17 94       	ror	r1
    5f48:	07 94       	ror	r0
    5f4a:	20 25       	eor	r18, r0
    5f4c:	31 25       	eor	r19, r1
    5f4e:	4a 27       	eor	r20, r26
    5f50:	58 f7       	brcc	.-42     	; 0x5f28 <sqrt+0x24>
    5f52:	66 0f       	add	r22, r22
    5f54:	77 1f       	adc	r23, r23
    5f56:	88 1f       	adc	r24, r24
    5f58:	20 f0       	brcs	.+8      	; 0x5f62 <sqrt+0x5e>
    5f5a:	26 17       	cp	r18, r22
    5f5c:	37 07       	cpc	r19, r23
    5f5e:	48 07       	cpc	r20, r24
    5f60:	30 f4       	brcc	.+12     	; 0x5f6e <sqrt+0x6a>
    5f62:	62 0b       	sbc	r22, r18
    5f64:	73 0b       	sbc	r23, r19
    5f66:	84 0b       	sbc	r24, r20
    5f68:	20 0d       	add	r18, r0
    5f6a:	31 1d       	adc	r19, r1
    5f6c:	41 1d       	adc	r20, r1
    5f6e:	a0 95       	com	r26
    5f70:	81 f7       	brne	.-32     	; 0x5f52 <sqrt+0x4e>
    5f72:	b9 01       	movw	r22, r18
    5f74:	84 2f       	mov	r24, r20
    5f76:	91 58       	subi	r25, 0x81	; 129
    5f78:	88 0f       	add	r24, r24
    5f7a:	96 95       	lsr	r25
    5f7c:	87 95       	ror	r24
    5f7e:	08 95       	ret

00005f80 <square>:
    5f80:	9b 01       	movw	r18, r22
    5f82:	ac 01       	movw	r20, r24
    5f84:	38 cf       	rjmp	.-400    	; 0x5df6 <__mulsf3>

00005f86 <trunc>:
    5f86:	ab de       	rcall	.-682    	; 0x5cde <__fp_trunc>
    5f88:	20 f0       	brcs	.+8      	; 0x5f92 <trunc+0xc>
    5f8a:	9f 37       	cpi	r25, 0x7F	; 127
    5f8c:	08 f4       	brcc	.+2      	; 0x5f90 <trunc+0xa>
    5f8e:	bf ce       	rjmp	.-642    	; 0x5d0e <__fp_szero>
    5f90:	14 ce       	rjmp	.-984    	; 0x5bba <__fp_mintl>
    5f92:	2e ce       	rjmp	.-932    	; 0x5bf0 <__fp_mpack>

00005f94 <__fp_norm2>:
    5f94:	91 50       	subi	r25, 0x01	; 1
    5f96:	50 40       	sbci	r21, 0x00	; 0
    5f98:	66 0f       	add	r22, r22
    5f9a:	77 1f       	adc	r23, r23
    5f9c:	88 1f       	adc	r24, r24
    5f9e:	d2 f7       	brpl	.-12     	; 0x5f94 <__fp_norm2>
    5fa0:	08 95       	ret

00005fa2 <__mulsi3>:
    5fa2:	62 9f       	mul	r22, r18
    5fa4:	d0 01       	movw	r26, r0
    5fa6:	73 9f       	mul	r23, r19
    5fa8:	f0 01       	movw	r30, r0
    5faa:	82 9f       	mul	r24, r18
    5fac:	e0 0d       	add	r30, r0
    5fae:	f1 1d       	adc	r31, r1
    5fb0:	64 9f       	mul	r22, r20
    5fb2:	e0 0d       	add	r30, r0
    5fb4:	f1 1d       	adc	r31, r1
    5fb6:	92 9f       	mul	r25, r18
    5fb8:	f0 0d       	add	r31, r0
    5fba:	83 9f       	mul	r24, r19
    5fbc:	f0 0d       	add	r31, r0
    5fbe:	74 9f       	mul	r23, r20
    5fc0:	f0 0d       	add	r31, r0
    5fc2:	65 9f       	mul	r22, r21
    5fc4:	f0 0d       	add	r31, r0
    5fc6:	99 27       	eor	r25, r25
    5fc8:	72 9f       	mul	r23, r18
    5fca:	b0 0d       	add	r27, r0
    5fcc:	e1 1d       	adc	r30, r1
    5fce:	f9 1f       	adc	r31, r25
    5fd0:	63 9f       	mul	r22, r19
    5fd2:	b0 0d       	add	r27, r0
    5fd4:	e1 1d       	adc	r30, r1
    5fd6:	f9 1f       	adc	r31, r25
    5fd8:	bd 01       	movw	r22, r26
    5fda:	cf 01       	movw	r24, r30
    5fdc:	11 24       	eor	r1, r1
    5fde:	08 95       	ret

00005fe0 <__divmodhi4>:
    5fe0:	97 fb       	bst	r25, 7
    5fe2:	09 2e       	mov	r0, r25
    5fe4:	07 26       	eor	r0, r23
    5fe6:	0a d0       	rcall	.+20     	; 0x5ffc <__divmodhi4_neg1>
    5fe8:	77 fd       	sbrc	r23, 7
    5fea:	04 d0       	rcall	.+8      	; 0x5ff4 <__divmodhi4_neg2>
    5fec:	49 d0       	rcall	.+146    	; 0x6080 <__udivmodhi4>
    5fee:	06 d0       	rcall	.+12     	; 0x5ffc <__divmodhi4_neg1>
    5ff0:	00 20       	and	r0, r0
    5ff2:	1a f4       	brpl	.+6      	; 0x5ffa <__divmodhi4_exit>

00005ff4 <__divmodhi4_neg2>:
    5ff4:	70 95       	com	r23
    5ff6:	61 95       	neg	r22
    5ff8:	7f 4f       	sbci	r23, 0xFF	; 255

00005ffa <__divmodhi4_exit>:
    5ffa:	08 95       	ret

00005ffc <__divmodhi4_neg1>:
    5ffc:	f6 f7       	brtc	.-4      	; 0x5ffa <__divmodhi4_exit>
    5ffe:	90 95       	com	r25
    6000:	81 95       	neg	r24
    6002:	9f 4f       	sbci	r25, 0xFF	; 255
    6004:	08 95       	ret

00006006 <__udivmodsi4>:
    6006:	a1 e2       	ldi	r26, 0x21	; 33
    6008:	1a 2e       	mov	r1, r26
    600a:	aa 1b       	sub	r26, r26
    600c:	bb 1b       	sub	r27, r27
    600e:	fd 01       	movw	r30, r26
    6010:	0d c0       	rjmp	.+26     	; 0x602c <__udivmodsi4_ep>

00006012 <__udivmodsi4_loop>:
    6012:	aa 1f       	adc	r26, r26
    6014:	bb 1f       	adc	r27, r27
    6016:	ee 1f       	adc	r30, r30
    6018:	ff 1f       	adc	r31, r31
    601a:	a2 17       	cp	r26, r18
    601c:	b3 07       	cpc	r27, r19
    601e:	e4 07       	cpc	r30, r20
    6020:	f5 07       	cpc	r31, r21
    6022:	20 f0       	brcs	.+8      	; 0x602c <__udivmodsi4_ep>
    6024:	a2 1b       	sub	r26, r18
    6026:	b3 0b       	sbc	r27, r19
    6028:	e4 0b       	sbc	r30, r20
    602a:	f5 0b       	sbc	r31, r21

0000602c <__udivmodsi4_ep>:
    602c:	66 1f       	adc	r22, r22
    602e:	77 1f       	adc	r23, r23
    6030:	88 1f       	adc	r24, r24
    6032:	99 1f       	adc	r25, r25
    6034:	1a 94       	dec	r1
    6036:	69 f7       	brne	.-38     	; 0x6012 <__udivmodsi4_loop>
    6038:	60 95       	com	r22
    603a:	70 95       	com	r23
    603c:	80 95       	com	r24
    603e:	90 95       	com	r25
    6040:	9b 01       	movw	r18, r22
    6042:	ac 01       	movw	r20, r24
    6044:	bd 01       	movw	r22, r26
    6046:	cf 01       	movw	r24, r30
    6048:	08 95       	ret

0000604a <__divmodsi4>:
    604a:	97 fb       	bst	r25, 7
    604c:	09 2e       	mov	r0, r25
    604e:	05 26       	eor	r0, r21
    6050:	0e d0       	rcall	.+28     	; 0x606e <__divmodsi4_neg1>
    6052:	57 fd       	sbrc	r21, 7
    6054:	04 d0       	rcall	.+8      	; 0x605e <__divmodsi4_neg2>
    6056:	d7 df       	rcall	.-82     	; 0x6006 <__udivmodsi4>
    6058:	0a d0       	rcall	.+20     	; 0x606e <__divmodsi4_neg1>
    605a:	00 1c       	adc	r0, r0
    605c:	38 f4       	brcc	.+14     	; 0x606c <__divmodsi4_exit>

0000605e <__divmodsi4_neg2>:
    605e:	50 95       	com	r21
    6060:	40 95       	com	r20
    6062:	30 95       	com	r19
    6064:	21 95       	neg	r18
    6066:	3f 4f       	sbci	r19, 0xFF	; 255
    6068:	4f 4f       	sbci	r20, 0xFF	; 255
    606a:	5f 4f       	sbci	r21, 0xFF	; 255

0000606c <__divmodsi4_exit>:
    606c:	08 95       	ret

0000606e <__divmodsi4_neg1>:
    606e:	f6 f7       	brtc	.-4      	; 0x606c <__divmodsi4_exit>
    6070:	90 95       	com	r25
    6072:	80 95       	com	r24
    6074:	70 95       	com	r23
    6076:	61 95       	neg	r22
    6078:	7f 4f       	sbci	r23, 0xFF	; 255
    607a:	8f 4f       	sbci	r24, 0xFF	; 255
    607c:	9f 4f       	sbci	r25, 0xFF	; 255
    607e:	08 95       	ret

00006080 <__udivmodhi4>:
    6080:	aa 1b       	sub	r26, r26
    6082:	bb 1b       	sub	r27, r27
    6084:	51 e1       	ldi	r21, 0x11	; 17
    6086:	07 c0       	rjmp	.+14     	; 0x6096 <__udivmodhi4_ep>

00006088 <__udivmodhi4_loop>:
    6088:	aa 1f       	adc	r26, r26
    608a:	bb 1f       	adc	r27, r27
    608c:	a6 17       	cp	r26, r22
    608e:	b7 07       	cpc	r27, r23
    6090:	10 f0       	brcs	.+4      	; 0x6096 <__udivmodhi4_ep>
    6092:	a6 1b       	sub	r26, r22
    6094:	b7 0b       	sbc	r27, r23

00006096 <__udivmodhi4_ep>:
    6096:	88 1f       	adc	r24, r24
    6098:	99 1f       	adc	r25, r25
    609a:	5a 95       	dec	r21
    609c:	a9 f7       	brne	.-22     	; 0x6088 <__udivmodhi4_loop>
    609e:	80 95       	com	r24
    60a0:	90 95       	com	r25
    60a2:	bc 01       	movw	r22, r24
    60a4:	cd 01       	movw	r24, r26
    60a6:	08 95       	ret

000060a8 <do_rand>:
    60a8:	af 92       	push	r10
    60aa:	bf 92       	push	r11
    60ac:	cf 92       	push	r12
    60ae:	df 92       	push	r13
    60b0:	ef 92       	push	r14
    60b2:	ff 92       	push	r15
    60b4:	0f 93       	push	r16
    60b6:	1f 93       	push	r17
    60b8:	cf 93       	push	r28
    60ba:	df 93       	push	r29
    60bc:	ec 01       	movw	r28, r24
    60be:	a8 80       	ld	r10, Y
    60c0:	b9 80       	ldd	r11, Y+1	; 0x01
    60c2:	ca 80       	ldd	r12, Y+2	; 0x02
    60c4:	db 80       	ldd	r13, Y+3	; 0x03
    60c6:	a1 14       	cp	r10, r1
    60c8:	b1 04       	cpc	r11, r1
    60ca:	c1 04       	cpc	r12, r1
    60cc:	d1 04       	cpc	r13, r1
    60ce:	41 f4       	brne	.+16     	; 0x60e0 <do_rand+0x38>
    60d0:	84 e2       	ldi	r24, 0x24	; 36
    60d2:	a8 2e       	mov	r10, r24
    60d4:	89 ed       	ldi	r24, 0xD9	; 217
    60d6:	b8 2e       	mov	r11, r24
    60d8:	8b e5       	ldi	r24, 0x5B	; 91
    60da:	c8 2e       	mov	r12, r24
    60dc:	87 e0       	ldi	r24, 0x07	; 7
    60de:	d8 2e       	mov	r13, r24
    60e0:	c6 01       	movw	r24, r12
    60e2:	b5 01       	movw	r22, r10
    60e4:	2d e1       	ldi	r18, 0x1D	; 29
    60e6:	33 ef       	ldi	r19, 0xF3	; 243
    60e8:	41 e0       	ldi	r20, 0x01	; 1
    60ea:	50 e0       	ldi	r21, 0x00	; 0
    60ec:	0e 94 25 30 	call	0x604a	; 0x604a <__divmodsi4>
    60f0:	27 ea       	ldi	r18, 0xA7	; 167
    60f2:	31 e4       	ldi	r19, 0x41	; 65
    60f4:	40 e0       	ldi	r20, 0x00	; 0
    60f6:	50 e0       	ldi	r21, 0x00	; 0
    60f8:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__mulsi3>
    60fc:	7b 01       	movw	r14, r22
    60fe:	8c 01       	movw	r16, r24
    6100:	c6 01       	movw	r24, r12
    6102:	b5 01       	movw	r22, r10
    6104:	2d e1       	ldi	r18, 0x1D	; 29
    6106:	33 ef       	ldi	r19, 0xF3	; 243
    6108:	41 e0       	ldi	r20, 0x01	; 1
    610a:	50 e0       	ldi	r21, 0x00	; 0
    610c:	0e 94 25 30 	call	0x604a	; 0x604a <__divmodsi4>
    6110:	ca 01       	movw	r24, r20
    6112:	b9 01       	movw	r22, r18
    6114:	2c ee       	ldi	r18, 0xEC	; 236
    6116:	34 ef       	ldi	r19, 0xF4	; 244
    6118:	4f ef       	ldi	r20, 0xFF	; 255
    611a:	5f ef       	ldi	r21, 0xFF	; 255
    611c:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__mulsi3>
    6120:	6e 0d       	add	r22, r14
    6122:	7f 1d       	adc	r23, r15
    6124:	80 1f       	adc	r24, r16
    6126:	91 1f       	adc	r25, r17
    6128:	97 ff       	sbrs	r25, 7
    612a:	04 c0       	rjmp	.+8      	; 0x6134 <do_rand+0x8c>
    612c:	61 50       	subi	r22, 0x01	; 1
    612e:	70 40       	sbci	r23, 0x00	; 0
    6130:	80 40       	sbci	r24, 0x00	; 0
    6132:	90 48       	sbci	r25, 0x80	; 128
    6134:	68 83       	st	Y, r22
    6136:	79 83       	std	Y+1, r23	; 0x01
    6138:	8a 83       	std	Y+2, r24	; 0x02
    613a:	9b 83       	std	Y+3, r25	; 0x03
    613c:	9b 01       	movw	r18, r22
    613e:	3f 77       	andi	r19, 0x7F	; 127
    6140:	c9 01       	movw	r24, r18
    6142:	df 91       	pop	r29
    6144:	cf 91       	pop	r28
    6146:	1f 91       	pop	r17
    6148:	0f 91       	pop	r16
    614a:	ff 90       	pop	r15
    614c:	ef 90       	pop	r14
    614e:	df 90       	pop	r13
    6150:	cf 90       	pop	r12
    6152:	bf 90       	pop	r11
    6154:	af 90       	pop	r10
    6156:	08 95       	ret

00006158 <rand_r>:
    6158:	0e 94 54 30 	call	0x60a8	; 0x60a8 <do_rand>
    615c:	08 95       	ret

0000615e <rand>:
    615e:	81 e0       	ldi	r24, 0x01	; 1
    6160:	92 e0       	ldi	r25, 0x02	; 2
    6162:	0e 94 54 30 	call	0x60a8	; 0x60a8 <do_rand>
    6166:	08 95       	ret

00006168 <srand>:
    6168:	a0 e0       	ldi	r26, 0x00	; 0
    616a:	b0 e0       	ldi	r27, 0x00	; 0
    616c:	80 93 01 02 	sts	0x0201, r24
    6170:	90 93 02 02 	sts	0x0202, r25
    6174:	a0 93 03 02 	sts	0x0203, r26
    6178:	b0 93 04 02 	sts	0x0204, r27
    617c:	08 95       	ret

0000617e <strtod>:
    617e:	8f 92       	push	r8
    6180:	9f 92       	push	r9
    6182:	af 92       	push	r10
    6184:	bf 92       	push	r11
    6186:	cf 92       	push	r12
    6188:	df 92       	push	r13
    618a:	ef 92       	push	r14
    618c:	ff 92       	push	r15
    618e:	0f 93       	push	r16
    6190:	1f 93       	push	r17
    6192:	cf 93       	push	r28
    6194:	df 93       	push	r29
    6196:	ec 01       	movw	r28, r24
    6198:	5b 01       	movw	r10, r22
    619a:	61 15       	cp	r22, r1
    619c:	71 05       	cpc	r23, r1
    619e:	19 f0       	breq	.+6      	; 0x61a6 <strtod+0x28>
    61a0:	fb 01       	movw	r30, r22
    61a2:	91 83       	std	Z+1, r25	; 0x01
    61a4:	80 83       	st	Z, r24
    61a6:	f9 90       	ld	r15, Y+
    61a8:	8f 2d       	mov	r24, r15
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	0e 94 2d 32 	call	0x645a	; 0x645a <isspace>
    61b0:	89 2b       	or	r24, r25
    61b2:	c9 f7       	brne	.-14     	; 0x61a6 <strtod+0x28>
    61b4:	fd e2       	ldi	r31, 0x2D	; 45
    61b6:	ff 16       	cp	r15, r31
    61b8:	21 f4       	brne	.+8      	; 0x61c2 <strtod+0x44>
    61ba:	f9 90       	ld	r15, Y+
    61bc:	ee 24       	eor	r14, r14
    61be:	e3 94       	inc	r14
    61c0:	05 c0       	rjmp	.+10     	; 0x61cc <strtod+0x4e>
    61c2:	2b e2       	ldi	r18, 0x2B	; 43
    61c4:	f2 16       	cp	r15, r18
    61c6:	09 f4       	brne	.+2      	; 0x61ca <strtod+0x4c>
    61c8:	f9 90       	ld	r15, Y+
    61ca:	ee 24       	eor	r14, r14
    61cc:	8e 01       	movw	r16, r28
    61ce:	01 50       	subi	r16, 0x01	; 1
    61d0:	10 40       	sbci	r17, 0x00	; 0
    61d2:	c8 01       	movw	r24, r16
    61d4:	64 ed       	ldi	r22, 0xD4	; 212
    61d6:	75 e0       	ldi	r23, 0x05	; 5
    61d8:	43 e0       	ldi	r20, 0x03	; 3
    61da:	50 e0       	ldi	r21, 0x00	; 0
    61dc:	0e 94 35 32 	call	0x646a	; 0x646a <strncasecmp_P>
    61e0:	89 2b       	or	r24, r25
    61e2:	01 f5       	brne	.+64     	; 0x6224 <strtod+0xa6>
    61e4:	8e 01       	movw	r16, r28
    61e6:	0e 5f       	subi	r16, 0xFE	; 254
    61e8:	1f 4f       	sbci	r17, 0xFF	; 255
    61ea:	c8 01       	movw	r24, r16
    61ec:	67 ed       	ldi	r22, 0xD7	; 215
    61ee:	75 e0       	ldi	r23, 0x05	; 5
    61f0:	45 e0       	ldi	r20, 0x05	; 5
    61f2:	50 e0       	ldi	r21, 0x00	; 0
    61f4:	0e 94 35 32 	call	0x646a	; 0x646a <strncasecmp_P>
    61f8:	89 2b       	or	r24, r25
    61fa:	19 f4       	brne	.+6      	; 0x6202 <strtod+0x84>
    61fc:	8e 01       	movw	r16, r28
    61fe:	09 5f       	subi	r16, 0xF9	; 249
    6200:	1f 4f       	sbci	r17, 0xFF	; 255
    6202:	a1 14       	cp	r10, r1
    6204:	b1 04       	cpc	r11, r1
    6206:	19 f0       	breq	.+6      	; 0x620e <strtod+0x90>
    6208:	f5 01       	movw	r30, r10
    620a:	11 83       	std	Z+1, r17	; 0x01
    620c:	00 83       	st	Z, r16
    620e:	e0 fc       	sbrc	r14, 0
    6210:	04 c0       	rjmp	.+8      	; 0x621a <strtod+0x9c>
    6212:	70 e0       	ldi	r23, 0x00	; 0
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	80 e8       	ldi	r24, 0x80	; 128
    6218:	14 c0       	rjmp	.+40     	; 0x6242 <strtod+0xc4>
    621a:	70 e0       	ldi	r23, 0x00	; 0
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	80 e8       	ldi	r24, 0x80	; 128
    6220:	6f ef       	ldi	r22, 0xFF	; 255
    6222:	08 c1       	rjmp	.+528    	; 0x6434 <strtod+0x2b6>
    6224:	c8 01       	movw	r24, r16
    6226:	6c ed       	ldi	r22, 0xDC	; 220
    6228:	75 e0       	ldi	r23, 0x05	; 5
    622a:	43 e0       	ldi	r20, 0x03	; 3
    622c:	50 e0       	ldi	r21, 0x00	; 0
    622e:	0e 94 35 32 	call	0x646a	; 0x646a <strncasecmp_P>
    6232:	89 2b       	or	r24, r25
    6234:	69 f4       	brne	.+26     	; 0x6250 <strtod+0xd2>
    6236:	a1 14       	cp	r10, r1
    6238:	b1 04       	cpc	r11, r1
    623a:	29 f4       	brne	.+10     	; 0x6246 <strtod+0xc8>
    623c:	70 e0       	ldi	r23, 0x00	; 0
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	80 ec       	ldi	r24, 0xC0	; 192
    6242:	6f e7       	ldi	r22, 0x7F	; 127
    6244:	f7 c0       	rjmp	.+494    	; 0x6434 <strtod+0x2b6>
    6246:	22 96       	adiw	r28, 0x02	; 2
    6248:	f5 01       	movw	r30, r10
    624a:	d1 83       	std	Z+1, r29	; 0x01
    624c:	c0 83       	st	Z, r28
    624e:	f6 cf       	rjmp	.-20     	; 0x623c <strtod+0xbe>
    6250:	88 24       	eor	r8, r8
    6252:	99 24       	eor	r9, r9
    6254:	40 e0       	ldi	r20, 0x00	; 0
    6256:	50 e0       	ldi	r21, 0x00	; 0
    6258:	60 e0       	ldi	r22, 0x00	; 0
    625a:	70 e0       	ldi	r23, 0x00	; 0
    625c:	ef 2d       	mov	r30, r15
    625e:	e0 53       	subi	r30, 0x30	; 48
    6260:	ea 30       	cpi	r30, 0x0A	; 10
    6262:	a0 f5       	brcc	.+104    	; 0x62cc <strtod+0x14e>
    6264:	f2 e0       	ldi	r31, 0x02	; 2
    6266:	ef 2a       	or	r14, r31
    6268:	8e 2d       	mov	r24, r14
    626a:	90 e0       	ldi	r25, 0x00	; 0
    626c:	9c 01       	movw	r18, r24
    626e:	28 70       	andi	r18, 0x08	; 8
    6270:	30 70       	andi	r19, 0x00	; 0
    6272:	e2 fe       	sbrs	r14, 2
    6274:	06 c0       	rjmp	.+12     	; 0x6282 <strtod+0x104>
    6276:	23 2b       	or	r18, r19
    6278:	79 f5       	brne	.+94     	; 0x62d8 <strtod+0x15a>
    627a:	08 94       	sec
    627c:	81 1c       	adc	r8, r1
    627e:	91 1c       	adc	r9, r1
    6280:	2b c0       	rjmp	.+86     	; 0x62d8 <strtod+0x15a>
    6282:	23 2b       	or	r18, r19
    6284:	19 f0       	breq	.+6      	; 0x628c <strtod+0x10e>
    6286:	08 94       	sec
    6288:	81 08       	sbc	r8, r1
    628a:	91 08       	sbc	r9, r1
    628c:	db 01       	movw	r26, r22
    628e:	ca 01       	movw	r24, r20
    6290:	12 e0       	ldi	r17, 0x02	; 2
    6292:	88 0f       	add	r24, r24
    6294:	99 1f       	adc	r25, r25
    6296:	aa 1f       	adc	r26, r26
    6298:	bb 1f       	adc	r27, r27
    629a:	1a 95       	dec	r17
    629c:	d1 f7       	brne	.-12     	; 0x6292 <strtod+0x114>
    629e:	48 0f       	add	r20, r24
    62a0:	59 1f       	adc	r21, r25
    62a2:	6a 1f       	adc	r22, r26
    62a4:	7b 1f       	adc	r23, r27
    62a6:	44 0f       	add	r20, r20
    62a8:	55 1f       	adc	r21, r21
    62aa:	66 1f       	adc	r22, r22
    62ac:	77 1f       	adc	r23, r23
    62ae:	4e 0f       	add	r20, r30
    62b0:	51 1d       	adc	r21, r1
    62b2:	61 1d       	adc	r22, r1
    62b4:	71 1d       	adc	r23, r1
    62b6:	48 39       	cpi	r20, 0x98	; 152
    62b8:	29 e9       	ldi	r18, 0x99	; 153
    62ba:	52 07       	cpc	r21, r18
    62bc:	29 e9       	ldi	r18, 0x99	; 153
    62be:	62 07       	cpc	r22, r18
    62c0:	29 e1       	ldi	r18, 0x19	; 25
    62c2:	72 07       	cpc	r23, r18
    62c4:	48 f0       	brcs	.+18     	; 0x62d8 <strtod+0x15a>
    62c6:	84 e0       	ldi	r24, 0x04	; 4
    62c8:	e8 2a       	or	r14, r24
    62ca:	06 c0       	rjmp	.+12     	; 0x62d8 <strtod+0x15a>
    62cc:	ee 3f       	cpi	r30, 0xFE	; 254
    62ce:	31 f4       	brne	.+12     	; 0x62dc <strtod+0x15e>
    62d0:	e3 fc       	sbrc	r14, 3
    62d2:	39 c0       	rjmp	.+114    	; 0x6346 <strtod+0x1c8>
    62d4:	98 e0       	ldi	r25, 0x08	; 8
    62d6:	e9 2a       	or	r14, r25
    62d8:	f9 90       	ld	r15, Y+
    62da:	c0 cf       	rjmp	.-128    	; 0x625c <strtod+0xde>
    62dc:	e5 33       	cpi	r30, 0x35	; 53
    62de:	11 f0       	breq	.+4      	; 0x62e4 <strtod+0x166>
    62e0:	e5 31       	cpi	r30, 0x15	; 21
    62e2:	89 f5       	brne	.+98     	; 0x6346 <strtod+0x1c8>
    62e4:	29 91       	ld	r18, Y+
    62e6:	2d 32       	cpi	r18, 0x2D	; 45
    62e8:	19 f4       	brne	.+6      	; 0x62f0 <strtod+0x172>
    62ea:	e0 e1       	ldi	r30, 0x10	; 16
    62ec:	ee 2a       	or	r14, r30
    62ee:	05 c0       	rjmp	.+10     	; 0x62fa <strtod+0x17c>
    62f0:	2b 32       	cpi	r18, 0x2B	; 43
    62f2:	19 f0       	breq	.+6      	; 0x62fa <strtod+0x17c>
    62f4:	81 e0       	ldi	r24, 0x01	; 1
    62f6:	90 e0       	ldi	r25, 0x00	; 0
    62f8:	03 c0       	rjmp	.+6      	; 0x6300 <strtod+0x182>
    62fa:	29 91       	ld	r18, Y+
    62fc:	82 e0       	ldi	r24, 0x02	; 2
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	e2 2f       	mov	r30, r18
    6302:	e0 53       	subi	r30, 0x30	; 48
    6304:	ea 30       	cpi	r30, 0x0A	; 10
    6306:	18 f0       	brcs	.+6      	; 0x630e <strtod+0x190>
    6308:	c8 1b       	sub	r28, r24
    630a:	d9 0b       	sbc	r29, r25
    630c:	1c c0       	rjmp	.+56     	; 0x6346 <strtod+0x1c8>
    630e:	20 e0       	ldi	r18, 0x00	; 0
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	fc e0       	ldi	r31, 0x0C	; 12
    6314:	20 38       	cpi	r18, 0x80	; 128
    6316:	3f 07       	cpc	r19, r31
    6318:	5c f4       	brge	.+22     	; 0x6330 <strtod+0x1b2>
    631a:	c9 01       	movw	r24, r18
    631c:	88 0f       	add	r24, r24
    631e:	99 1f       	adc	r25, r25
    6320:	88 0f       	add	r24, r24
    6322:	99 1f       	adc	r25, r25
    6324:	28 0f       	add	r18, r24
    6326:	39 1f       	adc	r19, r25
    6328:	22 0f       	add	r18, r18
    632a:	33 1f       	adc	r19, r19
    632c:	2e 0f       	add	r18, r30
    632e:	31 1d       	adc	r19, r1
    6330:	e9 91       	ld	r30, Y+
    6332:	e0 53       	subi	r30, 0x30	; 48
    6334:	ea 30       	cpi	r30, 0x0A	; 10
    6336:	68 f3       	brcs	.-38     	; 0x6312 <strtod+0x194>
    6338:	e4 fe       	sbrs	r14, 4
    633a:	03 c0       	rjmp	.+6      	; 0x6342 <strtod+0x1c4>
    633c:	30 95       	com	r19
    633e:	21 95       	neg	r18
    6340:	3f 4f       	sbci	r19, 0xFF	; 255
    6342:	82 0e       	add	r8, r18
    6344:	93 1e       	adc	r9, r19
    6346:	ce 2c       	mov	r12, r14
    6348:	dd 24       	eor	r13, r13
    634a:	e1 fe       	sbrs	r14, 1
    634c:	07 c0       	rjmp	.+14     	; 0x635c <strtod+0x1de>
    634e:	a1 14       	cp	r10, r1
    6350:	b1 04       	cpc	r11, r1
    6352:	21 f0       	breq	.+8      	; 0x635c <strtod+0x1de>
    6354:	21 97       	sbiw	r28, 0x01	; 1
    6356:	f5 01       	movw	r30, r10
    6358:	d1 83       	std	Z+1, r29	; 0x01
    635a:	c0 83       	st	Z, r28
    635c:	cb 01       	movw	r24, r22
    635e:	ba 01       	movw	r22, r20
    6360:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__floatunsisf>
    6364:	7b 01       	movw	r14, r22
    6366:	8c 01       	movw	r16, r24
    6368:	f3 e0       	ldi	r31, 0x03	; 3
    636a:	cf 22       	and	r12, r31
    636c:	dd 24       	eor	r13, r13
    636e:	23 e0       	ldi	r18, 0x03	; 3
    6370:	c2 16       	cp	r12, r18
    6372:	d1 04       	cpc	r13, r1
    6374:	21 f4       	brne	.+8      	; 0x637e <strtod+0x200>
    6376:	17 fb       	bst	r17, 7
    6378:	10 95       	com	r17
    637a:	17 f9       	bld	r17, 7
    637c:	10 95       	com	r17
    637e:	57 01       	movw	r10, r14
    6380:	68 01       	movw	r12, r16
    6382:	c8 01       	movw	r24, r16
    6384:	b7 01       	movw	r22, r14
    6386:	20 e0       	ldi	r18, 0x00	; 0
    6388:	30 e0       	ldi	r19, 0x00	; 0
    638a:	40 e0       	ldi	r20, 0x00	; 0
    638c:	50 e0       	ldi	r21, 0x00	; 0
    638e:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
    6392:	88 23       	and	r24, r24
    6394:	09 f4       	brne	.+2      	; 0x6398 <strtod+0x21a>
    6396:	4a c0       	rjmp	.+148    	; 0x642c <strtod+0x2ae>
    6398:	97 fe       	sbrs	r9, 7
    639a:	0d c0       	rjmp	.+26     	; 0x63b6 <strtod+0x238>
    639c:	23 ef       	ldi	r18, 0xF3	; 243
    639e:	e2 2e       	mov	r14, r18
    63a0:	25 e0       	ldi	r18, 0x05	; 5
    63a2:	f2 2e       	mov	r15, r18
    63a4:	90 94       	com	r9
    63a6:	81 94       	neg	r8
    63a8:	91 08       	sbc	r9, r1
    63aa:	93 94       	inc	r9
    63ac:	c0 e2       	ldi	r28, 0x20	; 32
    63ae:	d0 e0       	ldi	r29, 0x00	; 0
    63b0:	00 e0       	ldi	r16, 0x00	; 0
    63b2:	10 e0       	ldi	r17, 0x00	; 0
    63b4:	12 c0       	rjmp	.+36     	; 0x63da <strtod+0x25c>
    63b6:	9b e0       	ldi	r25, 0x0B	; 11
    63b8:	e9 2e       	mov	r14, r25
    63ba:	96 e0       	ldi	r25, 0x06	; 6
    63bc:	f9 2e       	mov	r15, r25
    63be:	f6 cf       	rjmp	.-20     	; 0x63ac <strtod+0x22e>
    63c0:	f7 01       	movw	r30, r14
    63c2:	25 91       	lpm	r18, Z+
    63c4:	35 91       	lpm	r19, Z+
    63c6:	45 91       	lpm	r20, Z+
    63c8:	54 91       	lpm	r21, Z+
    63ca:	c6 01       	movw	r24, r12
    63cc:	b5 01       	movw	r22, r10
    63ce:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <__mulsf3>
    63d2:	5b 01       	movw	r10, r22
    63d4:	6c 01       	movw	r12, r24
    63d6:	8c 1a       	sub	r8, r28
    63d8:	9d 0a       	sbc	r9, r29
    63da:	8c 16       	cp	r8, r28
    63dc:	9d 06       	cpc	r9, r29
    63de:	84 f7       	brge	.-32     	; 0x63c0 <strtod+0x242>
    63e0:	d5 95       	asr	r29
    63e2:	c7 95       	ror	r28
    63e4:	0f 5f       	subi	r16, 0xFF	; 255
    63e6:	1f 4f       	sbci	r17, 0xFF	; 255
    63e8:	06 30       	cpi	r16, 0x06	; 6
    63ea:	11 05       	cpc	r17, r1
    63ec:	29 f0       	breq	.+10     	; 0x63f8 <strtod+0x27a>
    63ee:	8c ef       	ldi	r24, 0xFC	; 252
    63f0:	9f ef       	ldi	r25, 0xFF	; 255
    63f2:	e8 0e       	add	r14, r24
    63f4:	f9 1e       	adc	r15, r25
    63f6:	f1 cf       	rjmp	.-30     	; 0x63da <strtod+0x25c>
    63f8:	c5 01       	movw	r24, r10
    63fa:	d6 01       	movw	r26, r12
    63fc:	7c 01       	movw	r14, r24
    63fe:	8d 01       	movw	r16, r26
    6400:	8c 2d       	mov	r24, r12
    6402:	88 0f       	add	r24, r24
    6404:	8d 2d       	mov	r24, r13
    6406:	88 1f       	adc	r24, r24
    6408:	8f 3f       	cpi	r24, 0xFF	; 255
    640a:	51 f0       	breq	.+20     	; 0x6420 <strtod+0x2a2>
    640c:	c6 01       	movw	r24, r12
    640e:	b5 01       	movw	r22, r10
    6410:	20 e0       	ldi	r18, 0x00	; 0
    6412:	30 e0       	ldi	r19, 0x00	; 0
    6414:	40 e0       	ldi	r20, 0x00	; 0
    6416:	50 e0       	ldi	r21, 0x00	; 0
    6418:	0e 94 c6 2c 	call	0x598c	; 0x598c <__cmpsf2>
    641c:	88 23       	and	r24, r24
    641e:	31 f4       	brne	.+12     	; 0x642c <strtod+0x2ae>
    6420:	82 e2       	ldi	r24, 0x22	; 34
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	90 93 d9 09 	sts	0x09D9, r25
    6428:	80 93 d8 09 	sts	0x09D8, r24
    642c:	7e 2d       	mov	r23, r14
    642e:	9f 2d       	mov	r25, r15
    6430:	80 2f       	mov	r24, r16
    6432:	61 2f       	mov	r22, r17
    6434:	27 2f       	mov	r18, r23
    6436:	39 2f       	mov	r19, r25
    6438:	48 2f       	mov	r20, r24
    643a:	56 2f       	mov	r21, r22
    643c:	b9 01       	movw	r22, r18
    643e:	ca 01       	movw	r24, r20
    6440:	df 91       	pop	r29
    6442:	cf 91       	pop	r28
    6444:	1f 91       	pop	r17
    6446:	0f 91       	pop	r16
    6448:	ff 90       	pop	r15
    644a:	ef 90       	pop	r14
    644c:	df 90       	pop	r13
    644e:	cf 90       	pop	r12
    6450:	bf 90       	pop	r11
    6452:	af 90       	pop	r10
    6454:	9f 90       	pop	r9
    6456:	8f 90       	pop	r8
    6458:	08 95       	ret

0000645a <isspace>:
    645a:	91 11       	cpse	r25, r1
    645c:	1e c0       	rjmp	.+60     	; 0x649a <__ctype_isfalse>
    645e:	80 32       	cpi	r24, 0x20	; 32
    6460:	19 f0       	breq	.+6      	; 0x6468 <isspace+0xe>
    6462:	89 50       	subi	r24, 0x09	; 9
    6464:	85 50       	subi	r24, 0x05	; 5
    6466:	d0 f7       	brcc	.-12     	; 0x645c <isspace+0x2>
    6468:	08 95       	ret

0000646a <strncasecmp_P>:
    646a:	fb 01       	movw	r30, r22
    646c:	dc 01       	movw	r26, r24
    646e:	41 50       	subi	r20, 0x01	; 1
    6470:	50 40       	sbci	r21, 0x00	; 0
    6472:	88 f0       	brcs	.+34     	; 0x6496 <strncasecmp_P+0x2c>
    6474:	8d 91       	ld	r24, X+
    6476:	81 34       	cpi	r24, 0x41	; 65
    6478:	1c f0       	brlt	.+6      	; 0x6480 <strncasecmp_P+0x16>
    647a:	8b 35       	cpi	r24, 0x5B	; 91
    647c:	0c f4       	brge	.+2      	; 0x6480 <strncasecmp_P+0x16>
    647e:	80 5e       	subi	r24, 0xE0	; 224
    6480:	65 91       	lpm	r22, Z+
    6482:	61 34       	cpi	r22, 0x41	; 65
    6484:	1c f0       	brlt	.+6      	; 0x648c <strncasecmp_P+0x22>
    6486:	6b 35       	cpi	r22, 0x5B	; 91
    6488:	0c f4       	brge	.+2      	; 0x648c <strncasecmp_P+0x22>
    648a:	60 5e       	subi	r22, 0xE0	; 224
    648c:	86 1b       	sub	r24, r22
    648e:	61 11       	cpse	r22, r1
    6490:	71 f3       	breq	.-36     	; 0x646e <strncasecmp_P+0x4>
    6492:	99 0b       	sbc	r25, r25
    6494:	08 95       	ret
    6496:	88 1b       	sub	r24, r24
    6498:	fc cf       	rjmp	.-8      	; 0x6492 <strncasecmp_P+0x28>

0000649a <__ctype_isfalse>:
    649a:	99 27       	eor	r25, r25
    649c:	88 27       	eor	r24, r24

0000649e <__ctype_istrue>:
    649e:	08 95       	ret

000064a0 <_exit>:
    64a0:	f8 94       	cli

000064a2 <__stop_program>:
    64a2:	ff cf       	rjmp	.-2      	; 0x64a2 <__stop_program>
