
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000049d  00800200  00800200  00004bd0  2**0
                  ALLOC
  2 .debug_aranges 000004b8  00000000  00000000  00004bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000008b5  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003d7f  00000000  00000000  0000593d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000014e5  00000000  00000000  000096bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003497  00000000  00000000  0000aba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000770  00000000  00000000  0000e038  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e18  00000000  00000000  0000e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001d95  00000000  00000000  0000f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000888  00000000  00000000  00011355  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 02 	jmp	0x566	; 0x566 <__ctors_end>
       4:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
       8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
       c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      10:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      14:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      18:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      1c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      20:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      24:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      28:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      2c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      30:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      34:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      38:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      3c:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__vector_15>
      40:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      44:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__vector_17>
      48:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      4c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      50:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      54:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      58:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      5c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      60:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      64:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__vector_25>
      68:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      6c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      70:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      74:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      78:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      7c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      80:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      84:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      88:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      8c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      90:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      94:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      98:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      9c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      a0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      a4:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      a8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      ac:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      b0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      b4:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      b8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      bc:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      c0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      c4:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      c8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      cc:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      d0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      d4:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      d8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      dc:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      e0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__bad_interrupt>
      e4:	18 07       	cpc	r17, r24
      e6:	18 07       	cpc	r17, r24
      e8:	1b 07       	cpc	r17, r27
      ea:	1e 07       	cpc	r17, r30
      ec:	25 07       	cpc	r18, r21
      ee:	2a 07       	cpc	r18, r26
      f0:	77 07       	cpc	r23, r23
      f2:	77 07       	cpc	r23, r23
      f4:	2f 07       	cpc	r18, r31
      f6:	36 07       	cpc	r19, r22
      f8:	3b 07       	cpc	r19, r27
      fa:	3e 07       	cpc	r19, r30
      fc:	43 07       	cpc	r20, r19
      fe:	46 07       	cpc	r20, r22
     100:	49 07       	cpc	r20, r25
     102:	4c 07       	cpc	r20, r28
     104:	4f 07       	cpc	r20, r31
     106:	52 07       	cpc	r21, r18
     108:	55 07       	cpc	r21, r21
     10a:	5a 07       	cpc	r21, r26
     10c:	5d 07       	cpc	r21, r29
     10e:	62 07       	cpc	r22, r18
     110:	65 07       	cpc	r22, r21
     112:	68 07       	cpc	r22, r24
     114:	6b 07       	cpc	r22, r27
     116:	72 07       	cpc	r23, r18
     118:	77 07       	cpc	r23, r23
     11a:	77 07       	cpc	r23, r23
     11c:	77 07       	cpc	r23, r23
     11e:	77 07       	cpc	r23, r23
     120:	1b 07       	cpc	r17, r27
     122:	77 07       	cpc	r23, r23
     124:	77 07       	cpc	r23, r23
     126:	77 07       	cpc	r23, r23
     128:	77 07       	cpc	r23, r23
     12a:	77 07       	cpc	r23, r23
     12c:	77 07       	cpc	r23, r23
     12e:	77 07       	cpc	r23, r23
     130:	77 07       	cpc	r23, r23
     132:	77 07       	cpc	r23, r23
     134:	77 07       	cpc	r23, r23
     136:	77 07       	cpc	r23, r23
     138:	77 07       	cpc	r23, r23
     13a:	77 07       	cpc	r23, r23
     13c:	77 07       	cpc	r23, r23
     13e:	77 07       	cpc	r23, r23
     140:	77 07       	cpc	r23, r23
     142:	77 07       	cpc	r23, r23
     144:	77 07       	cpc	r23, r23
     146:	77 07       	cpc	r23, r23
     148:	77 07       	cpc	r23, r23
     14a:	77 07       	cpc	r23, r23
     14c:	77 07       	cpc	r23, r23
     14e:	77 07       	cpc	r23, r23
     150:	77 07       	cpc	r23, r23
     152:	77 07       	cpc	r23, r23
     154:	77 07       	cpc	r23, r23
     156:	77 07       	cpc	r23, r23
     158:	77 07       	cpc	r23, r23
     15a:	77 07       	cpc	r23, r23
     15c:	1b 07       	cpc	r17, r27
     15e:	08 4a       	sbci	r16, 0xA8	; 168
     160:	d7 3b       	cpi	r29, 0xB7	; 183
     162:	3b ce       	rjmp	.-906    	; 0xfffffdda <__eeprom_end+0xff7efdda>
     164:	01 6e       	ori	r16, 0xE1	; 225
     166:	84 bc       	out	0x24, r8	; 36
     168:	bf fd       	.word	0xfdbf	; ????
     16a:	c1 2f       	mov	r28, r17
     16c:	3d 6c       	ori	r19, 0xCD	; 205
     16e:	74 31       	cpi	r23, 0x14	; 20
     170:	9a bd       	out	0x2a, r25	; 42
     172:	56 83       	std	Z+6, r21	; 0x06
     174:	3d da       	rcall	.-2950   	; 0xfffff5f0 <__eeprom_end+0xff7ef5f0>
     176:	3d 00       	.word	0x003d	; ????
     178:	c7 7f       	andi	r28, 0xF7	; 247
     17a:	11 be       	out	0x31, r1	; 49
     17c:	d9 e4       	ldi	r29, 0x49	; 73
     17e:	bb 4c       	sbci	r27, 0xCB	; 203
     180:	3e 91       	ld	r19, -X
     182:	6b aa       	std	Y+51, r6	; 0x33
     184:	aa be       	out	0x3a, r10	; 58
     186:	00 00       	nop
     188:	00 80       	ld	r0, Z
     18a:	3f 59       	subi	r19, 0x9F	; 159

0000018b <__c.1922>:
     18b:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000194 <__c.1920>:
     194:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000019d <__c.1918>:
     19d:	59 4c 32 0d 0a 00                                   YL2...

000001a3 <__c.1916>:
     1a3:	59 4c 31 0d 0a 00                                   YL1...

000001a9 <__c.1914>:
     1a9:	58 4c 32 0d 0a 00                                   XL2...

000001af <__c.1912>:
     1af:	58 4c 31 0d 0a 00                                   XL1...

000001b5 <__c.1910>:
     1b5:	0d 0a 00                                            ...

000001b8 <__c.1908>:
     1b8:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

000001c3 <__c.1906>:
     1c3:	0d 0a 00                                            ...

000001c6 <__c.1904>:
     1c6:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000001d6 <__c.1902>:
     1d6:	0d 0a 00                                            ...

000001d9 <__c.1900>:
     1d9:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000001e8 <__c.1898>:
     1e8:	0d 0a 00                                            ...

000001eb <__c.1896>:
     1eb:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000001f8 <__c.1894>:
     1f8:	0d 0a 00                                            ...

000001fb <__c.1892>:
     1fb:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

0000020a <__c.1890>:
     20a:	0d 0a 00                                            ...

0000020d <__c.1888>:
     20d:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

00000217 <__c.1886>:
     217:	0d 0a 00                                            ...

0000021a <__c.1884>:
     21a:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     22a:	3d 20 00                                            = .

0000022d <__c.1882>:
     22d:	0d 0a 00                                            ...

00000230 <__c.1880>:
     230:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     240:	20 00                                                .

00000242 <__c.1628>:
     242:	6f 6b 0a 0d 00                                      ok...

00000247 <__c.1677>:
     247:	0a 0d 00                                            ...

0000024a <__c.1675>:
     24a:	65 72 72 6f 72 3a 20 00                             error: .

00000252 <__c.1672>:
     252:	65 72 72 6f 72 3a 20 43 6f 6d 6d 61 6e 64 20 46     error: Command F
     262:	61 69 6c 65 64 0a 0d 00                             ailed...

0000026a <__c.1669>:
     26a:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     27a:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

00000288 <__c.1666>:
     288:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     298:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

000002a7 <__c.1663>:
     2a7:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     2b7:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

000002c8 <__c.1660>:
     2c8:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     2d8:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

000002e3 <__c.1656>:
     2e3:	6f 6b 0a 0d 00                                      ok...

000002e8 <__c.1653>:
     2e8:	0d 0a 4e 6f 74 20 68 6f 6d 65 64 0a 0d 00           ..Not homed...

000002f6 <__c.1728>:
     2f6:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     306:	6e 67 0d 0a 00                                      ng...

0000030b <__c.1726>:
     30b:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     31b:	72 0d 0a 00                                         r...

0000031f <__c.1683>:
     31f:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     32f:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     33f:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     34f:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     35f:	0d 0a 00                                            ...

00000362 <__c.1681>:
     362:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     372:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     382:	61 62 6c 65 64 29 0d 0a 00                          abled)...

0000038b <__c.1679>:
     38b:	24 31 30 30 30 20 3d 20 00                          $1000 = .

00000394 <__c.1677>:
     394:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     3a4:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     3b4:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     3c4:	2f 6d 69 6e 29 0d 0a 00                             /min)...

000003cc <__c.1675>:
     3cc:	24 39 20 3d 20 00                                   $9 = .

000003d2 <__c.1673>:
     3d2:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     3e2:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000003f0 <__c.1671>:
     3f0:	24 38 20 3d 20 00                                   $8 = .

000003f6 <__c.1669>:
     3f6:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     406:	29 0d 0a 00                                         )...

0000040a <__c.1667>:
     40a:	24 37 20 3d 20 00                                   $7 = .

00000410 <__c.1665>:
     410:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     420:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

0000042e <__c.1663>:
     42e:	24 36 20 3d 20 00                                   $6 = .

00000434 <__c.1661>:
     434:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     444:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000452 <__c.1659>:
     452:	24 35 20 3d 20 00                                   $5 = .

00000458 <__c.1657>:
     458:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     468:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

00000475 <__c.1655>:
     475:	24 34 20 3d 20 00                                   $4 = .

0000047b <__c.1653>:
     47b:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     48b:	0a 00                                               ..

0000048d <__c.1651>:
     48d:	24 33 20 3d 20 00                                   $3 = .

00000493 <__c.1649>:
     493:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

000004a3 <__c.1647>:
     4a3:	24 32 20 3d 20 00                                   $2 = .

000004a9 <__c.1645>:
     4a9:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

000004b9 <__c.1643>:
     4b9:	24 31 20 3d 20 00                                   $1 = .

000004bf <__c.1641>:
     4bf:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000004cf <__c.1639>:
     4cf:	24 30 20 3d 20 00                                   $0 = .

000004d5 <__c.1637>:
     4d5:	0d 0a 00                                            ...

000004d8 <__c.1635>:
     4d8:	30 2e 37 36 50 42 00                                0.76PB.

000004df <__c.1633>:
     4df:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000004eb <__c.2171>:
     4eb:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

000004f9 <__c.2031>:
     4f9:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

00000503 <__c.2049>:
     503:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

0000050d <__c.1824>:
     50d:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     51d:	0d 00                                               ..

0000051f <__c.1858>:
     51f:	6e 6f 0d 0a 00                                      no...

00000524 <__c.1856>:
     524:	79 65 73 0d 0a 00                                   yes...

0000052a <pstr_inf>:
     52a:	49 4e 46                                            INF

0000052d <pstr_inity>:
     52d:	49 4e 49 54 59                                      INITY

00000532 <pstr_nan>:
     532:	4e 41 4e                                            NAN

00000535 <pwr_m10>:
     535:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     545:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000054d <pwr_p10>:
     54d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     55d:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000566 <__ctors_end>:
     566:	11 24       	eor	r1, r1
     568:	1f be       	out	0x3f, r1	; 63
     56a:	cf ef       	ldi	r28, 0xFF	; 255
     56c:	d1 e2       	ldi	r29, 0x21	; 33
     56e:	de bf       	out	0x3e, r29	; 62
     570:	cd bf       	out	0x3d, r28	; 61
     572:	00 e0       	ldi	r16, 0x00	; 0
     574:	0c bf       	out	0x3c, r16	; 60

00000576 <__do_copy_data>:
     576:	12 e0       	ldi	r17, 0x02	; 2
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b2 e0       	ldi	r27, 0x02	; 2
     57c:	ec e5       	ldi	r30, 0x5C	; 92
     57e:	fb e4       	ldi	r31, 0x4B	; 75
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	0b bf       	out	0x3b, r16	; 59
     584:	02 c0       	rjmp	.+4      	; 0x58a <__do_copy_data+0x14>
     586:	07 90       	elpm	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	a0 30       	cpi	r26, 0x00	; 0
     58c:	b1 07       	cpc	r27, r17
     58e:	d9 f7       	brne	.-10     	; 0x586 <__do_copy_data+0x10>

00000590 <__do_clear_bss>:
     590:	16 e0       	ldi	r17, 0x06	; 6
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	b2 e0       	ldi	r27, 0x02	; 2
     596:	01 c0       	rjmp	.+2      	; 0x59a <.do_clear_bss_start>

00000598 <.do_clear_bss_loop>:
     598:	1d 92       	st	X+, r1

0000059a <.do_clear_bss_start>:
     59a:	ad 39       	cpi	r26, 0x9D	; 157
     59c:	b1 07       	cpc	r27, r17
     59e:	e1 f7       	brne	.-8      	; 0x598 <.do_clear_bss_loop>
     5a0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <main>
     5a4:	0c 94 ac 25 	jmp	0x4b58	; 0x4b58 <_exit>

000005a8 <__bad_interrupt>:
     5a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005ac <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     5ac:	24 9a       	sbi	0x04, 4	; 4
}
     5ae:	08 95       	ret

000005b0 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     5b0:	89 2b       	or	r24, r25
     5b2:	11 f0       	breq	.+4      	; 0x5b8 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     5b4:	2c 9a       	sbi	0x05, 4	; 5
     5b6:	08 95       	ret
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     5b8:	2c 98       	cbi	0x05, 4	; 5
     5ba:	08 95       	ret

000005bc <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5bc:	f9 99       	sbic	0x1f, 1	; 31
     5be:	fe cf       	rjmp	.-4      	; 0x5bc <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     5c0:	92 bd       	out	0x22, r25	; 34
     5c2:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     5c8:	80 b5       	in	r24, 0x20	; 32
}
     5ca:	08 95       	ret

000005cc <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     5cc:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5ce:	f9 99       	sbic	0x1f, 1	; 31
     5d0:	fe cf       	rjmp	.-4      	; 0x5ce <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     5d2:	92 bd       	out	0x22, r25	; 34
     5d4:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     5da:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     5dc:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     5de:	89 2f       	mov	r24, r25
     5e0:	86 23       	and	r24, r22
     5e2:	39 f0       	breq	.+14     	; 0x5f2 <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     5e4:	6f 3f       	cpi	r22, 0xFF	; 255
     5e6:	19 f0       	breq	.+6      	; 0x5ee <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     5e8:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	06 c0       	rjmp	.+12     	; 0x5fa <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5ee:	84 e1       	ldi	r24, 0x14	; 20
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     5f2:	99 23       	and	r25, r25
     5f4:	21 f0       	breq	.+8      	; 0x5fe <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     5f6:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     5f8:	84 e2       	ldi	r24, 0x24	; 36
     5fa:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     5fc:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     5fe:	78 94       	sei
}
     600:	08 95       	ret

00000602 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     602:	8f 92       	push	r8
     604:	9f 92       	push	r9
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	df 93       	push	r29
     616:	cf 93       	push	r28
     618:	0f 92       	push	r0
     61a:	0f 92       	push	r0
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	5c 01       	movw	r10, r24
     622:	6b 01       	movw	r12, r22
     624:	7a 01       	movw	r14, r20
     626:	4a 01       	movw	r8, r20
     628:	00 e0       	ldi	r16, 0x00	; 0
     62a:	1e c0       	rjmp	.+60     	; 0x668 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     62c:	00 23       	and	r16, r16
     62e:	19 f0       	breq	.+6      	; 0x636 <memcpy_to_eeprom_with_checksum+0x34>
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	08 c0       	rjmp	.+16     	; 0x646 <memcpy_to_eeprom_with_checksum+0x44>
     636:	20 2f       	mov	r18, r16
     638:	33 27       	eor	r19, r19
     63a:	27 fd       	sbrc	r18, 7
     63c:	30 95       	com	r19
     63e:	22 27       	eor	r18, r18
     640:	33 0f       	add	r19, r19
     642:	22 1f       	adc	r18, r18
     644:	33 27       	eor	r19, r19
    checksum += *source;
     646:	f6 01       	movw	r30, r12
     648:	61 91       	ld	r22, Z+
     64a:	6f 01       	movw	r12, r30
     64c:	06 2f       	mov	r16, r22
     64e:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     650:	9c 01       	movw	r18, r24
     652:	2f 5f       	subi	r18, 0xFF	; 255
     654:	3f 4f       	sbci	r19, 0xFF	; 255
     656:	3a 83       	std	Y+2, r19	; 0x02
     658:	29 83       	std	Y+1, r18	; 0x01
     65a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     65e:	08 94       	sec
     660:	81 08       	sbc	r8, r1
     662:	91 08       	sbc	r9, r1
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	81 14       	cp	r8, r1
     66a:	91 04       	cpc	r9, r1
     66c:	f9 f6       	brne	.-66     	; 0x62c <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     66e:	c7 01       	movw	r24, r14
     670:	8a 0d       	add	r24, r10
     672:	9b 1d       	adc	r25, r11
     674:	60 2f       	mov	r22, r16
     676:	0e 94 e6 02 	call	0x5cc	; 0x5cc <eeprom_put_char>
}
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	08 95       	ret

00000696 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
     69c:	fb 01       	movw	r30, r22
     69e:	9a 01       	movw	r18, r20
     6a0:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	19 c0       	rjmp	.+50     	; 0x6d8 <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6a6:	f9 99       	sbic	0x1f, 1	; 31
     6a8:	fe cf       	rjmp	.-4      	; 0x6a6 <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     6aa:	f2 bd       	out	0x22, r31	; 34
     6ac:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6ae:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     6b0:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     6b2:	99 23       	and	r25, r25
     6b4:	19 f0       	breq	.+6      	; 0x6bc <memcpy_from_eeprom_with_checksum+0x26>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <memcpy_from_eeprom_with_checksum+0x36>
     6bc:	89 2f       	mov	r24, r25
     6be:	99 27       	eor	r25, r25
     6c0:	87 fd       	sbrc	r24, 7
     6c2:	90 95       	com	r25
     6c4:	88 27       	eor	r24, r24
     6c6:	99 0f       	add	r25, r25
     6c8:	88 1f       	adc	r24, r24
     6ca:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     6cc:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     6ce:	9a 2f       	mov	r25, r26
     6d0:	98 0f       	add	r25, r24
    *(destination++) = data; 
     6d2:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	30 40       	sbci	r19, 0x00	; 0
     6d8:	21 15       	cp	r18, r1
     6da:	31 05       	cpc	r19, r1
     6dc:	21 f7       	brne	.-56     	; 0x6a6 <memcpy_from_eeprom_with_checksum+0x10>
     6de:	46 0f       	add	r20, r22
     6e0:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6e2:	f9 99       	sbic	0x1f, 1	; 31
     6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     6e6:	52 bd       	out	0x22, r21	; 34
     6e8:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     6ee:	80 b5       	in	r24, 0x20	; 32
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	98 17       	cp	r25, r24
     6f6:	11 f4       	brne	.+4      	; 0x6fc <memcpy_from_eeprom_with_checksum+0x66>
     6f8:	21 e0       	ldi	r18, 0x01	; 1
     6fa:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     6fc:	c9 01       	movw	r24, r18
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     704:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     708:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     70c:	40 93 27 02 	sts	0x0227, r20
}
     710:	08 95       	ret

00000712 <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     712:	2f 92       	push	r2
     714:	3f 92       	push	r3
     716:	4f 92       	push	r4
     718:	5f 92       	push	r5
     71a:	6f 92       	push	r6
     71c:	7f 92       	push	r7
     71e:	8f 92       	push	r8
     720:	9f 92       	push	r9
     722:	af 92       	push	r10
     724:	bf 92       	push	r11
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	28 97       	sbiw	r28, 0x08	; 8
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	69 83       	std	Y+1, r22	; 0x01
     748:	7a 83       	std	Y+2, r23	; 0x02
     74a:	8b 83       	std	Y+3, r24	; 0x03
     74c:	9c 83       	std	Y+4, r25	; 0x04
     74e:	2d 83       	std	Y+5, r18	; 0x05
     750:	3e 83       	std	Y+6, r19	; 0x06
     752:	4f 83       	std	Y+7, r20	; 0x07
     754:	58 87       	std	Y+8, r21	; 0x08
     756:	37 01       	movw	r6, r14
     758:	48 01       	movw	r8, r16
     75a:	15 01       	movw	r2, r10
     75c:	26 01       	movw	r4, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	5f eb       	ldi	r21, 0xBF	; 191
     766:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
     76a:	88 23       	and	r24, r24
     76c:	41 f4       	brne	.+16     	; 0x77e <gotoxy+0x6c>
     76e:	60 90 12 02 	lds	r6, 0x0212
     772:	70 90 13 02 	lds	r7, 0x0213
     776:	80 90 14 02 	lds	r8, 0x0214
     77a:	90 90 15 02 	lds	r9, 0x0215
  if( y == -1) c = gc.position[Y_AXIS] ;
     77e:	6d 81       	ldd	r22, Y+5	; 0x05
     780:	7e 81       	ldd	r23, Y+6	; 0x06
     782:	8f 81       	ldd	r24, Y+7	; 0x07
     784:	98 85       	ldd	r25, Y+8	; 0x08
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e8       	ldi	r20, 0x80	; 128
     78c:	5f eb       	ldi	r21, 0xBF	; 191
     78e:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
     792:	88 23       	and	r24, r24
     794:	41 f4       	brne	.+16     	; 0x7a6 <gotoxy+0x94>
     796:	20 90 16 02 	lds	r2, 0x0216
     79a:	30 90 17 02 	lds	r3, 0x0217
     79e:	40 90 18 02 	lds	r4, 0x0218
     7a2:	50 90 19 02 	lds	r5, 0x0219
  if( z == -1) z = gc.position[Z_AXIS] ;
     7a6:	c4 01       	movw	r24, r8
     7a8:	b3 01       	movw	r22, r6
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e8       	ldi	r20, 0x80	; 128
     7b0:	5f eb       	ldi	r21, 0xBF	; 191
     7b2:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
     7b6:	88 23       	and	r24, r24
     7b8:	41 f4       	brne	.+16     	; 0x7ca <gotoxy+0xb8>
     7ba:	60 90 1a 02 	lds	r6, 0x021A
     7be:	70 90 1b 02 	lds	r7, 0x021B
     7c2:	80 90 1c 02 	lds	r8, 0x021C
     7c6:	90 90 1d 02 	lds	r9, 0x021D
  if( c == -1) c = gc.position[C_AXIS] ;
     7ca:	c2 01       	movw	r24, r4
     7cc:	b1 01       	movw	r22, r2
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e8       	ldi	r20, 0x80	; 128
     7d4:	5f eb       	ldi	r21, 0xBF	; 191
     7d6:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
     7da:	88 23       	and	r24, r24
     7dc:	41 f4       	brne	.+16     	; 0x7ee <gotoxy+0xdc>
     7de:	20 90 1e 02 	lds	r2, 0x021E
     7e2:	30 90 1f 02 	lds	r3, 0x021F
     7e6:	40 90 20 02 	lds	r4, 0x0220
     7ea:	50 90 21 02 	lds	r5, 0x0221

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <gotoxy+0xde>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <gotoxy+0xe0>
     7f2:	80 91 0e 02 	lds	r24, 0x020E
     7f6:	90 91 0f 02 	lds	r25, 0x020F
     7fa:	a0 91 10 02 	lds	r26, 0x0210
     7fe:	b0 91 11 02 	lds	r27, 0x0211
     802:	ed b7       	in	r30, 0x3d	; 61
     804:	fe b7       	in	r31, 0x3e	; 62
     806:	81 83       	std	Z+1, r24	; 0x01
     808:	92 83       	std	Z+2, r25	; 0x02
     80a:	a3 83       	std	Z+3, r26	; 0x03
     80c:	b4 83       	std	Z+4, r27	; 0x04
     80e:	16 82       	std	Z+6, r1	; 0x06
     810:	15 82       	std	Z+5, r1	; 0x05
     812:	69 81       	ldd	r22, Y+1	; 0x01
     814:	7a 81       	ldd	r23, Y+2	; 0x02
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	9c 81       	ldd	r25, Y+4	; 0x04
     81a:	2d 81       	ldd	r18, Y+5	; 0x05
     81c:	3e 81       	ldd	r19, Y+6	; 0x06
     81e:	4f 81       	ldd	r20, Y+7	; 0x07
     820:	58 85       	ldd	r21, Y+8	; 0x08
     822:	84 01       	movw	r16, r8
     824:	73 01       	movw	r14, r6
     826:	62 01       	movw	r12, r4
     828:	51 01       	movw	r10, r2
     82a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	ab 81       	ldd	r26, Y+3	; 0x03
     834:	bc 81       	ldd	r27, Y+4	; 0x04
     836:	80 93 12 02 	sts	0x0212, r24
     83a:	90 93 13 02 	sts	0x0213, r25
     83e:	a0 93 14 02 	sts	0x0214, r26
     842:	b0 93 15 02 	sts	0x0215, r27
   gc.position[Y_AXIS] = y;
     846:	8d 81       	ldd	r24, Y+5	; 0x05
     848:	9e 81       	ldd	r25, Y+6	; 0x06
     84a:	af 81       	ldd	r26, Y+7	; 0x07
     84c:	b8 85       	ldd	r27, Y+8	; 0x08
     84e:	80 93 16 02 	sts	0x0216, r24
     852:	90 93 17 02 	sts	0x0217, r25
     856:	a0 93 18 02 	sts	0x0218, r26
     85a:	b0 93 19 02 	sts	0x0219, r27
   gc.position[Z_AXIS] = z;
     85e:	60 92 1a 02 	sts	0x021A, r6
     862:	70 92 1b 02 	sts	0x021B, r7
     866:	80 92 1c 02 	sts	0x021C, r8
     86a:	90 92 1d 02 	sts	0x021D, r9
   gc.position[C_AXIS] = c;
     86e:	20 92 1e 02 	sts	0x021E, r2
     872:	30 92 1f 02 	sts	0x021F, r3
     876:	40 92 20 02 	sts	0x0220, r4
     87a:	50 92 21 02 	sts	0x0221, r5
     87e:	ad b7       	in	r26, 0x3d	; 61
     880:	be b7       	in	r27, 0x3e	; 62
     882:	16 96       	adiw	r26, 0x06	; 6
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	be bf       	out	0x3e, r27	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	ad bf       	out	0x3d, r26	; 61

}
     88e:	28 96       	adiw	r28, 0x08	; 8
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	cf 91       	pop	r28
     89c:	df 91       	pop	r29
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	7f 90       	pop	r7
     8b4:	6f 90       	pop	r6
     8b6:	5f 90       	pop	r5
     8b8:	4f 90       	pop	r4
     8ba:	3f 90       	pop	r3
     8bc:	2f 90       	pop	r2
     8be:	08 95       	ret

000008c0 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	df 93       	push	r29
     8d2:	cf 93       	push	r28
     8d4:	0f 92       	push	r0
     8d6:	0f 92       	push	r0
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	6c 01       	movw	r12, r24
     8de:	5b 01       	movw	r10, r22
     8e0:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     8e2:	fb 01       	movw	r30, r22
     8e4:	00 81       	ld	r16, Z
     8e6:	11 81       	ldd	r17, Z+1	; 0x01
     8e8:	08 0f       	add	r16, r24
     8ea:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     8ec:	c8 01       	movw	r24, r16
     8ee:	be 01       	movw	r22, r28
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	0e 94 1b 24 	call	0x4836	; 0x4836 <strtod>
     8f8:	f7 01       	movw	r30, r14
     8fa:	60 83       	st	Z, r22
     8fc:	71 83       	std	Z+1, r23	; 0x01
     8fe:	82 83       	std	Z+2, r24	; 0x02
     900:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	9a 81       	ldd	r25, Y+2	; 0x02
     906:	80 17       	cp	r24, r16
     908:	91 07       	cpc	r25, r17
     90a:	31 f4       	brne	.+12     	; 0x918 <read_double+0x58>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 93 00 02 	sts	0x0200, r24
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	07 c0       	rjmp	.+14     	; 0x926 <read_double+0x66>
    return(0); 
  };

  *char_counter = end - line;
     918:	8c 19       	sub	r24, r12
     91a:	9d 09       	sbc	r25, r13
     91c:	f5 01       	movw	r30, r10
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     926:	c9 01       	movw	r24, r18
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	cf 91       	pop	r28
     92e:	df 91       	pop	r29
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	08 95       	ret

00000942 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	8b 01       	movw	r16, r22
     94e:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     950:	ed 91       	ld	r30, X+
     952:	fc 91       	ld	r31, X
     954:	11 97       	sbiw	r26, 0x01	; 1
     956:	e4 0f       	add	r30, r20
     958:	f5 1f       	adc	r31, r21
     95a:	e0 81       	ld	r30, Z
     95c:	ee 23       	and	r30, r30
     95e:	39 f0       	breq	.+14     	; 0x96e <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     960:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     962:	e1 54       	subi	r30, 0x41	; 65
     964:	ea 31       	cpi	r30, 0x1A	; 26
     966:	30 f0       	brcs	.+12     	; 0x974 <next_statement+0x32>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	80 93 00 02 	sts	0x0200, r24
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	10 c0       	rjmp	.+32     	; 0x994 <next_statement+0x52>
    return(0);
  }
  (*char_counter)++;
     974:	8d 91       	ld	r24, X+
     976:	9c 91       	ld	r25, X
     978:	11 97       	sbiw	r26, 0x01	; 1
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	8d 93       	st	X+, r24
     97e:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     980:	ca 01       	movw	r24, r20
     982:	b9 01       	movw	r22, r18
     984:	a8 01       	movw	r20, r16
     986:	0e 94 60 04 	call	0x8c0	; 0x8c0 <read_double>
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	11 f0       	breq	.+4      	; 0x992 <next_statement+0x50>
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     994:	c9 01       	movw	r24, r18
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	08 95       	ret

000009a0 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     9a0:	88 e2       	ldi	r24, 0x28	; 40
     9a2:	e0 e0       	ldi	r30, 0x00	; 0
     9a4:	f2 e0       	ldi	r31, 0x02	; 2
     9a6:	df 01       	movw	r26, r30
     9a8:	1d 92       	st	X+, r1
     9aa:	8a 95       	dec	r24
     9ac:	e9 f7       	brne	.-6      	; 0x9a8 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     9ae:	60 91 86 06 	lds	r22, 0x0686
     9b2:	70 91 87 06 	lds	r23, 0x0687
     9b6:	80 91 88 06 	lds	r24, 0x0688
     9ba:	90 91 89 06 	lds	r25, 0x0689
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e7       	ldi	r20, 0x70	; 112
     9c4:	52 e4       	ldi	r21, 0x42	; 66
     9c6:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
     9ca:	60 93 0a 02 	sts	0x020A, r22
     9ce:	70 93 0b 02 	sts	0x020B, r23
     9d2:	80 93 0c 02 	sts	0x020C, r24
     9d6:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     9da:	60 91 8a 06 	lds	r22, 0x068A
     9de:	70 91 8b 06 	lds	r23, 0x068B
     9e2:	80 91 8c 06 	lds	r24, 0x068C
     9e6:	90 91 8d 06 	lds	r25, 0x068D
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e7       	ldi	r20, 0x70	; 112
     9f0:	52 e4       	ldi	r21, 0x42	; 66
     9f2:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
     9f6:	60 93 0e 02 	sts	0x020E, r22
     9fa:	70 93 0f 02 	sts	0x020F, r23
     9fe:	80 93 10 02 	sts	0x0210, r24
     a02:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     a06:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     a16:	90 93 04 02 	sts	0x0204, r25
}
     a1a:	08 95       	ret

00000a1c <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     a1c:	2f 92       	push	r2
     a1e:	3f 92       	push	r3
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	df 93       	push	r29
     a3e:	cf 93       	push	r28
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	e2 97       	sbiw	r28, 0x32	; 50
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     a52:	1b 82       	std	Y+3, r1	; 0x03
     a54:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	a0 e0       	ldi	r26, 0x00	; 0
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	88 87       	std	Y+8, r24	; 0x08
     a60:	99 87       	std	Y+9, r25	; 0x09
     a62:	aa 87       	std	Y+10, r26	; 0x0a
     a64:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     a66:	80 e1       	ldi	r24, 0x10	; 16
     a68:	fe 01       	movw	r30, r28
     a6a:	3c 96       	adiw	r30, 0x0c	; 12
     a6c:	df 01       	movw	r26, r30
     a6e:	98 2f       	mov	r25, r24
     a70:	1d 92       	st	X+, r1
     a72:	9a 95       	dec	r25
     a74:	e9 f7       	brne	.-6      	; 0xa70 <gc_execute_line+0x54>
  clear_vector(offset);
     a76:	fe 01       	movw	r30, r28
     a78:	7c 96       	adiw	r30, 0x1c	; 28
     a7a:	df 01       	movw	r26, r30
     a7c:	1d 92       	st	X+, r1
     a7e:	8a 95       	dec	r24
     a80:	e9 f7       	brne	.-6      	; 0xa7c <gc_execute_line+0x60>

  gc.status_code = GCSTATUS_OK;
     a82:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     a86:	f5 01       	movw	r30, r10
     a88:	80 81       	ld	r24, Z
     a8a:	88 32       	cpi	r24, 0x28	; 40
     a8c:	41 f1       	breq	.+80     	; 0xade <gc_execute_line+0xc2>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     a8e:	8f 32       	cpi	r24, 0x2F	; 47
     a90:	29 f4       	brne	.+10     	; 0xa9c <gc_execute_line+0x80>
     a92:	8a 81       	ldd	r24, Y+2	; 0x02
     a94:	9b 81       	ldd	r25, Y+3	; 0x03
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	9b 83       	std	Y+3, r25	; 0x03
     a9a:	8a 83       	std	Y+2, r24	; 0x02
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     a9c:	d5 01       	movw	r26, r10
     a9e:	8c 91       	ld	r24, X
     aa0:	84 32       	cpi	r24, 0x24	; 36
     aa2:	99 f0       	breq	.+38     	; 0xaca <gc_execute_line+0xae>
     aa4:	55 24       	eor	r5, r5
     aa6:	1c a6       	std	Y+44, r1	; 0x2c
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     aa8:	12 e0       	ldi	r17, 0x02	; 2
     aaa:	21 2e       	mov	r2, r17
     aac:	31 2c       	mov	r3, r1
     aae:	2c 0e       	add	r2, r28
     ab0:	3d 1e       	adc	r3, r29
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     ab2:	b3 e0       	ldi	r27, 0x03	; 3
     ab4:	9b 2e       	mov	r9, r27
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     ab6:	dd 24       	eor	r13, r13
     ab8:	d3 94       	inc	r13
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     aba:	a2 e0       	ldi	r26, 0x02	; 2
     abc:	ca 2e       	mov	r12, r26
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     abe:	f4 e0       	ldi	r31, 0x04	; 4
     ac0:	8f 2e       	mov	r8, r31
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     ac2:	66 24       	eor	r6, r6
     ac4:	6a 94       	dec	r6
     ac6:	76 2c       	mov	r7, r6
     ac8:	1f c2       	rjmp	.+1086   	; 0xf08 <gc_execute_line+0x4ec>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9b 83       	std	Y+3, r25	; 0x03
     ad0:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     ad2:	f5 01       	movw	r30, r10
     ad4:	81 81       	ldd	r24, Z+1	; 0x01
     ad6:	88 23       	and	r24, r24
     ad8:	21 f4       	brne	.+8      	; 0xae2 <gc_execute_line+0xc6>
     ada:	0e 94 8a 14 	call	0x2914	; 0x2914 <settings_dump>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	0a c4       	rjmp	.+2068   	; 0x12f6 <gc_execute_line+0x8da>
    read_double(line, &char_counter, &p);
     ae2:	8e 01       	movw	r16, r28
     ae4:	0e 5f       	subi	r16, 0xFE	; 254
     ae6:	1f 4f       	sbci	r17, 0xFF	; 255
     ae8:	c5 01       	movw	r24, r10
     aea:	b8 01       	movw	r22, r16
     aec:	ae 01       	movw	r20, r28
     aee:	48 5f       	subi	r20, 0xF8	; 248
     af0:	5f 4f       	sbci	r21, 0xFF	; 255
     af2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	9b 81       	ldd	r25, Y+3	; 0x03
     afa:	f5 01       	movw	r30, r10
     afc:	e8 0f       	add	r30, r24
     afe:	f9 1f       	adc	r31, r25
     b00:	20 81       	ld	r18, Z
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	9b 83       	std	Y+3, r25	; 0x03
     b06:	8a 83       	std	Y+2, r24	; 0x02
     b08:	2d 33       	cpi	r18, 0x3D	; 61
     b0a:	09 f0       	breq	.+2      	; 0xb0e <gc_execute_line+0xf2>
     b0c:	f3 c3       	rjmp	.+2022   	; 0x12f4 <gc_execute_line+0x8d8>
    read_double(line, &char_counter, &value);
     b0e:	c5 01       	movw	r24, r10
     b10:	b8 01       	movw	r22, r16
     b12:	ae 01       	movw	r20, r28
     b14:	4c 5f       	subi	r20, 0xFC	; 252
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	0e 94 60 04 	call	0x8c0	; 0x8c0 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     b1c:	ea 81       	ldd	r30, Y+2	; 0x02
     b1e:	fb 81       	ldd	r31, Y+3	; 0x03
     b20:	ea 0d       	add	r30, r10
     b22:	fb 1d       	adc	r31, r11
     b24:	80 81       	ld	r24, Z
     b26:	88 23       	and	r24, r24
     b28:	09 f0       	breq	.+2      	; 0xb2c <gc_execute_line+0x110>
     b2a:	e4 c3       	rjmp	.+1992   	; 0x12f4 <gc_execute_line+0x8d8>
    settings_store_setting(p, value);
     b2c:	68 85       	ldd	r22, Y+8	; 0x08
     b2e:	79 85       	ldd	r23, Y+9	; 0x09
     b30:	8a 85       	ldd	r24, Y+10	; 0x0a
     b32:	9b 85       	ldd	r25, Y+11	; 0x0b
     b34:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	4c 81       	ldd	r20, Y+4	; 0x04
     b3e:	5d 81       	ldd	r21, Y+5	; 0x05
     b40:	6e 81       	ldd	r22, Y+6	; 0x06
     b42:	7f 81       	ldd	r23, Y+7	; 0x07
     b44:	0e 94 0e 14 	call	0x281c	; 0x281c <settings_store_setting>
     b48:	d2 c3       	rjmp	.+1956   	; 0x12ee <gc_execute_line+0x8d2>
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     b4a:	6c 81       	ldd	r22, Y+4	; 0x04
     b4c:	7d 81       	ldd	r23, Y+5	; 0x05
     b4e:	8e 81       	ldd	r24, Y+6	; 0x06
     b50:	9f 81       	ldd	r25, Y+7	; 0x07
     b52:	0e 94 8a 23 	call	0x4714	; 0x4714 <trunc>
     b56:	7b 01       	movw	r14, r22
     b58:	8c 01       	movw	r16, r24
     b5a:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
     b5e:	fb 01       	movw	r30, r22

    switch(letter) {
     b60:	29 81       	ldd	r18, Y+1	; 0x01
     b62:	27 34       	cpi	r18, 0x47	; 71
     b64:	09 f4       	brne	.+2      	; 0xb68 <gc_execute_line+0x14c>
     b66:	b3 c0       	rjmp	.+358    	; 0xcce <gc_execute_line+0x2b2>
     b68:	28 34       	cpi	r18, 0x48	; 72
     b6a:	20 f4       	brcc	.+8      	; 0xb74 <gc_execute_line+0x158>
     b6c:	24 34       	cpi	r18, 0x44	; 68
     b6e:	09 f0       	breq	.+2      	; 0xb72 <gc_execute_line+0x156>
     b70:	c7 c1       	rjmp	.+910    	; 0xf00 <gc_execute_line+0x4e4>
     b72:	07 c0       	rjmp	.+14     	; 0xb82 <gc_execute_line+0x166>
     b74:	2d 34       	cpi	r18, 0x4D	; 77
     b76:	09 f4       	brne	.+2      	; 0xb7a <gc_execute_line+0x15e>
     b78:	4f c1       	rjmp	.+670    	; 0xe18 <gc_execute_line+0x3fc>
     b7a:	24 35       	cpi	r18, 0x54	; 84
     b7c:	09 f0       	breq	.+2      	; 0xb80 <gc_execute_line+0x164>
     b7e:	c0 c1       	rjmp	.+896    	; 0xf00 <gc_execute_line+0x4e4>
     b80:	b9 c1       	rjmp	.+882    	; 0xef4 <gc_execute_line+0x4d8>
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     b82:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     b84:	80 e3       	ldi	r24, 0x30	; 48
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
		  	printBinary( DIRECTION_DDR );
     b8c:	60 b3       	in	r22, 0x10	; 16
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 11 1c 	call	0x3822	; 0x3822 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     b98:	8d e2       	ldi	r24, 0x2D	; 45
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     ba0:	8a e1       	ldi	r24, 0x1A	; 26
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
		  	printBinary( DIRECTION_PORT );
     ba8:	61 b3       	in	r22, 0x11	; 17
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 11 1c 	call	0x3822	; 0x3822 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     bb4:	87 e1       	ldi	r24, 0x17	; 23
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

			ch = PORTD;
     bbc:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     bbe:	8d e0       	ldi	r24, 0x0D	; 13
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
		  	printBinary( ch );
     bc6:	ff 24       	eor	r15, r15
     bc8:	00 e0       	ldi	r16, 0x00	; 0
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	c8 01       	movw	r24, r16
     bce:	b7 01       	movw	r22, r14
     bd0:	0e 94 11 1c 	call	0x3822	; 0x3822 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     bd4:	8a e0       	ldi	r24, 0x0A	; 10
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

			ch = PIND;
     bdc:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     bde:	8b ef       	ldi	r24, 0xFB	; 251
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
		  	printBinary( ch );
     be6:	ff 24       	eor	r15, r15
     be8:	00 e0       	ldi	r16, 0x00	; 0
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	c8 01       	movw	r24, r16
     bee:	b7 01       	movw	r22, r14
     bf0:	0e 94 11 1c 	call	0x3822	; 0x3822 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     bf4:	88 ef       	ldi	r24, 0xF8	; 248
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     bfc:	8b ee       	ldi	r24, 0xEB	; 235
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
			printInteger( is_head_down() );
     c04:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	a0 e0       	ldi	r26, 0x00	; 0
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	bc 01       	movw	r22, r24
     c10:	cd 01       	movw	r24, r26
     c12:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c16:	88 ee       	ldi	r24, 0xE8	; 232
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     c1e:	89 ed       	ldi	r24, 0xD9	; 217
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
			printInteger( head_moving() );
     c26:	0e 94 32 17 	call	0x2e64	; 0x2e64 <head_moving>
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	bc 01       	movw	r22, r24
     c32:	cd 01       	movw	r24, r26
     c34:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c38:	86 ed       	ldi	r24, 0xD6	; 214
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     c40:	86 ec       	ldi	r24, 0xC6	; 198
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
			printInteger( vacuum_state() );
     c48:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <vacuum_state>
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	a0 e0       	ldi	r26, 0x00	; 0
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	bc 01       	movw	r22, r24
     c54:	cd 01       	movw	r24, r26
     c56:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c5a:	83 ec       	ldi	r24, 0xC3	; 195
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     c62:	88 eb       	ldi	r24, 0xB8	; 184
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
			printInteger( is_rotated() );
     c6a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <is_rotated>
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
	      	printPgmString(PSTR("\r\n"));
     c7c:	85 eb       	ldi	r24, 0xB5	; 181
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     c84:	4b 9b       	sbis	0x09, 3	; 9
     c86:	04 c0       	rjmp	.+8      	; 0xc90 <gc_execute_line+0x274>
		      	printPgmString(PSTR("XL1\r\n"));
     c88:	8f ea       	ldi	r24, 0xAF	; 175
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     c90:	4a 9b       	sbis	0x09, 2	; 9
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <gc_execute_line+0x280>
		      	printPgmString(PSTR("XL2\r\n"));
     c94:	89 ea       	ldi	r24, 0xA9	; 169
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     c9c:	48 9b       	sbis	0x09, 0	; 9
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <gc_execute_line+0x28c>
		      	printPgmString(PSTR("YL1\r\n"));
     ca0:	83 ea       	ldi	r24, 0xA3	; 163
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     ca8:	49 9b       	sbis	0x09, 1	; 9
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <gc_execute_line+0x298>
		      	printPgmString(PSTR("YL2\r\n"));
     cac:	8d e9       	ldi	r24, 0x9D	; 157
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

			if( bit_is_set( XHM_PIN, X_HOME ) )
     cb4:	04 9b       	sbis	0x00, 4	; 0
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <gc_execute_line+0x2a4>
		      	printPgmString(PSTR("X_HOME\r\n"));
     cb8:	84 e9       	ldi	r24, 0x94	; 148
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     cc0:	90 9b       	sbis	0x12, 0	; 18
     cc2:	15 c3       	rjmp	.+1578   	; 0x12ee <gc_execute_line+0x8d2>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     cc4:	8b e8       	ldi	r24, 0x8B	; 139
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
     ccc:	10 c3       	rjmp	.+1568   	; 0x12ee <gc_execute_line+0x8d2>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     cce:	65 31       	cpi	r22, 0x15	; 21
     cd0:	71 05       	cpc	r23, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <gc_execute_line+0x2ba>
     cd4:	89 c0       	rjmp	.+274    	; 0xde8 <gc_execute_line+0x3cc>
     cd6:	66 31       	cpi	r22, 0x16	; 22
     cd8:	71 05       	cpc	r23, r1
     cda:	84 f5       	brge	.+96     	; 0xd3c <gc_execute_line+0x320>
     cdc:	64 30       	cpi	r22, 0x04	; 4
     cde:	71 05       	cpc	r23, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <gc_execute_line+0x2c8>
     ce2:	5b c0       	rjmp	.+182    	; 0xd9a <gc_execute_line+0x37e>
     ce4:	65 30       	cpi	r22, 0x05	; 5
     ce6:	71 05       	cpc	r23, r1
     ce8:	a4 f4       	brge	.+40     	; 0xd12 <gc_execute_line+0x2f6>
     cea:	61 30       	cpi	r22, 0x01	; 1
     cec:	71 05       	cpc	r23, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <gc_execute_line+0x2d6>
     cf0:	5a c0       	rjmp	.+180    	; 0xda6 <gc_execute_line+0x38a>
     cf2:	62 30       	cpi	r22, 0x02	; 2
     cf4:	71 05       	cpc	r23, r1
     cf6:	24 f4       	brge	.+8      	; 0xd00 <gc_execute_line+0x2e4>
     cf8:	67 2b       	or	r22, r23
     cfa:	09 f4       	brne	.+2      	; 0xcfe <gc_execute_line+0x2e2>
     cfc:	51 c0       	rjmp	.+162    	; 0xda0 <gc_execute_line+0x384>
     cfe:	f7 c0       	rjmp	.+494    	; 0xeee <gc_execute_line+0x4d2>
     d00:	62 30       	cpi	r22, 0x02	; 2
     d02:	71 05       	cpc	r23, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <gc_execute_line+0x2ec>
     d06:	52 c0       	rjmp	.+164    	; 0xdac <gc_execute_line+0x390>
     d08:	63 30       	cpi	r22, 0x03	; 3
     d0a:	71 05       	cpc	r23, r1
     d0c:	09 f0       	breq	.+2      	; 0xd10 <gc_execute_line+0x2f4>
     d0e:	ef c0       	rjmp	.+478    	; 0xeee <gc_execute_line+0x4d2>
     d10:	50 c0       	rjmp	.+160    	; 0xdb2 <gc_execute_line+0x396>
     d12:	62 31       	cpi	r22, 0x12	; 18
     d14:	71 05       	cpc	r23, r1
     d16:	09 f4       	brne	.+2      	; 0xd1a <gc_execute_line+0x2fe>
     d18:	56 c0       	rjmp	.+172    	; 0xdc6 <gc_execute_line+0x3aa>
     d1a:	63 31       	cpi	r22, 0x13	; 19
     d1c:	71 05       	cpc	r23, r1
     d1e:	2c f4       	brge	.+10     	; 0xd2a <gc_execute_line+0x30e>
     d20:	61 31       	cpi	r22, 0x11	; 17
     d22:	71 05       	cpc	r23, r1
     d24:	09 f0       	breq	.+2      	; 0xd28 <gc_execute_line+0x30c>
     d26:	e3 c0       	rjmp	.+454    	; 0xeee <gc_execute_line+0x4d2>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <gc_execute_line+0x39c>
     d2a:	63 31       	cpi	r22, 0x13	; 19
     d2c:	71 05       	cpc	r23, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <gc_execute_line+0x316>
     d30:	51 c0       	rjmp	.+162    	; 0xdd4 <gc_execute_line+0x3b8>
     d32:	64 31       	cpi	r22, 0x14	; 20
     d34:	71 05       	cpc	r23, r1
     d36:	09 f0       	breq	.+2      	; 0xd3a <gc_execute_line+0x31e>
     d38:	da c0       	rjmp	.+436    	; 0xeee <gc_execute_line+0x4d2>
     d3a:	53 c0       	rjmp	.+166    	; 0xde2 <gc_execute_line+0x3c6>
     d3c:	6a 35       	cpi	r22, 0x5A	; 90
     d3e:	71 05       	cpc	r23, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <gc_execute_line+0x328>
     d42:	5b c0       	rjmp	.+182    	; 0xdfa <gc_execute_line+0x3de>
     d44:	6b 35       	cpi	r22, 0x5B	; 91
     d46:	71 05       	cpc	r23, r1
     d48:	a4 f4       	brge	.+40     	; 0xd72 <gc_execute_line+0x356>
     d4a:	6e 31       	cpi	r22, 0x1E	; 30
     d4c:	71 05       	cpc	r23, r1
     d4e:	11 f1       	breq	.+68     	; 0xd94 <gc_execute_line+0x378>
     d50:	6f 31       	cpi	r22, 0x1F	; 31
     d52:	71 05       	cpc	r23, r1
     d54:	2c f4       	brge	.+10     	; 0xd60 <gc_execute_line+0x344>
     d56:	6c 31       	cpi	r22, 0x1C	; 28
     d58:	71 05       	cpc	r23, r1
     d5a:	09 f0       	breq	.+2      	; 0xd5e <gc_execute_line+0x342>
     d5c:	c8 c0       	rjmp	.+400    	; 0xeee <gc_execute_line+0x4d2>
     d5e:	1a c0       	rjmp	.+52     	; 0xd94 <gc_execute_line+0x378>
     d60:	65 33       	cpi	r22, 0x35	; 53
     d62:	71 05       	cpc	r23, r1
     d64:	09 f4       	brne	.+2      	; 0xd68 <gc_execute_line+0x34c>
     d66:	43 c0       	rjmp	.+134    	; 0xdee <gc_execute_line+0x3d2>
     d68:	60 35       	cpi	r22, 0x50	; 80
     d6a:	71 05       	cpc	r23, r1
     d6c:	09 f0       	breq	.+2      	; 0xd70 <gc_execute_line+0x354>
     d6e:	bf c0       	rjmp	.+382    	; 0xeee <gc_execute_line+0x4d2>
     d70:	41 c0       	rjmp	.+130    	; 0xdf4 <gc_execute_line+0x3d8>
     d72:	6c 35       	cpi	r22, 0x5C	; 92
     d74:	71 05       	cpc	r23, r1
     d76:	09 f4       	brne	.+2      	; 0xd7a <gc_execute_line+0x35e>
     d78:	46 c0       	rjmp	.+140    	; 0xe06 <gc_execute_line+0x3ea>
     d7a:	6c 35       	cpi	r22, 0x5C	; 92
     d7c:	71 05       	cpc	r23, r1
     d7e:	0c f4       	brge	.+2      	; 0xd82 <gc_execute_line+0x366>
     d80:	3f c0       	rjmp	.+126    	; 0xe00 <gc_execute_line+0x3e4>
     d82:	6d 35       	cpi	r22, 0x5D	; 93
     d84:	71 05       	cpc	r23, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <gc_execute_line+0x36e>
     d88:	41 c0       	rjmp	.+130    	; 0xe0c <gc_execute_line+0x3f0>
     d8a:	6e 35       	cpi	r22, 0x5E	; 94
     d8c:	71 05       	cpc	r23, r1
     d8e:	09 f0       	breq	.+2      	; 0xd92 <gc_execute_line+0x376>
     d90:	ae c0       	rjmp	.+348    	; 0xeee <gc_execute_line+0x4d2>
     d92:	3f c0       	rjmp	.+126    	; 0xe12 <gc_execute_line+0x3f6>
     d94:	f2 e0       	ldi	r31, 0x02	; 2
     d96:	fc a7       	std	Y+44, r31	; 0x2c
     d98:	b3 c0       	rjmp	.+358    	; 0xf00 <gc_execute_line+0x4e4>
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	8c a7       	std	Y+44, r24	; 0x2c
     d9e:	b0 c0       	rjmp	.+352    	; 0xf00 <gc_execute_line+0x4e4>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     da0:	10 92 01 02 	sts	0x0201, r1
     da4:	ad c0       	rjmp	.+346    	; 0xf00 <gc_execute_line+0x4e4>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     da6:	d0 92 01 02 	sts	0x0201, r13
     daa:	aa c0       	rjmp	.+340    	; 0xf00 <gc_execute_line+0x4e4>
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     dac:	c0 92 01 02 	sts	0x0201, r12
     db0:	a7 c0       	rjmp	.+334    	; 0xf00 <gc_execute_line+0x4e4>
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     db2:	90 92 01 02 	sts	0x0201, r9
     db6:	a4 c0       	rjmp	.+328    	; 0xf00 <gc_execute_line+0x4e4>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     db8:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     dbc:	d0 92 26 02 	sts	0x0226, r13
  gc.plane_axis_2 = axis_2;
     dc0:	c0 92 27 02 	sts	0x0227, r12
     dc4:	9d c0       	rjmp	.+314    	; 0xf00 <gc_execute_line+0x4e4>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     dc6:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     dca:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     dce:	d0 92 27 02 	sts	0x0227, r13
     dd2:	96 c0       	rjmp	.+300    	; 0xf00 <gc_execute_line+0x4e4>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     dd4:	d0 92 25 02 	sts	0x0225, r13
  gc.plane_axis_1 = axis_1;
     dd8:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     ddc:	10 92 27 02 	sts	0x0227, r1
     de0:	8f c0       	rjmp	.+286    	; 0xf00 <gc_execute_line+0x4e4>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     de2:	d0 92 03 02 	sts	0x0203, r13
     de6:	8c c0       	rjmp	.+280    	; 0xf00 <gc_execute_line+0x4e4>
        case 21: gc.inches_mode = FALSE; break;
     de8:	10 92 03 02 	sts	0x0203, r1
     dec:	89 c0       	rjmp	.+274    	; 0xf00 <gc_execute_line+0x4e4>
     dee:	55 24       	eor	r5, r5
     df0:	53 94       	inc	r5
     df2:	86 c0       	rjmp	.+268    	; 0xf00 <gc_execute_line+0x4e4>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     df4:	80 92 01 02 	sts	0x0201, r8
     df8:	83 c0       	rjmp	.+262    	; 0xf00 <gc_execute_line+0x4e4>
        case 90: gc.absolute_mode = TRUE; break;
     dfa:	d0 92 04 02 	sts	0x0204, r13
     dfe:	80 c0       	rjmp	.+256    	; 0xf00 <gc_execute_line+0x4e4>
        case 91: gc.absolute_mode = FALSE; break;
     e00:	10 92 04 02 	sts	0x0204, r1
     e04:	7d c0       	rjmp	.+250    	; 0xf00 <gc_execute_line+0x4e4>
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	9c a7       	std	Y+44, r25	; 0x2c
     e0a:	7a c0       	rjmp	.+244    	; 0xf00 <gc_execute_line+0x4e4>
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     e0c:	d0 92 02 02 	sts	0x0202, r13
     e10:	77 c0       	rjmp	.+238    	; 0xf00 <gc_execute_line+0x4e4>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     e12:	10 92 02 02 	sts	0x0202, r1
     e16:	74 c0       	rjmp	.+232    	; 0xf00 <gc_execute_line+0x4e4>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e18:	6d 33       	cpi	r22, 0x3D	; 61
     e1a:	71 05       	cpc	r23, r1
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <gc_execute_line+0x404>
     e1e:	67 c0       	rjmp	.+206    	; 0xeee <gc_execute_line+0x4d2>
     e20:	ee 58       	subi	r30, 0x8E	; 142
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	05 90       	lpm	r0, Z+
     e2a:	f4 91       	lpm	r31, Z+
     e2c:	e0 2d       	mov	r30, r0
     e2e:	19 94       	eijmp
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     e30:	d0 92 05 02 	sts	0x0205, r13
     e34:	65 c0       	rjmp	.+202    	; 0xf00 <gc_execute_line+0x4e4>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     e36:	c0 92 05 02 	sts	0x0205, r12
     e3a:	62 c0       	rjmp	.+196    	; 0xf00 <gc_execute_line+0x4e4>
        case 3: gc.spindle_direction = 1; break;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	90 93 07 02 	sts	0x0207, r25
     e44:	80 93 06 02 	sts	0x0206, r24
     e48:	5b c0       	rjmp	.+182    	; 0xf00 <gc_execute_line+0x4e4>
        case 4: gc.spindle_direction = -1; break;
     e4a:	70 92 07 02 	sts	0x0207, r7
     e4e:	60 92 06 02 	sts	0x0206, r6
     e52:	56 c0       	rjmp	.+172    	; 0xf00 <gc_execute_line+0x4e4>
        case 5: gc.spindle_direction = 0; break;
     e54:	10 92 07 02 	sts	0x0207, r1
     e58:	10 92 06 02 	sts	0x0206, r1
     e5c:	51 c0       	rjmp	.+162    	; 0xf00 <gc_execute_line+0x4e4>
        case 8: gc.coolant_flood = 1; break;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 09 02 	sts	0x0209, r25
     e66:	80 93 08 02 	sts	0x0208, r24
     e6a:	4a c0       	rjmp	.+148    	; 0xf00 <gc_execute_line+0x4e4>
        case 9: gc.coolant_flood = 0; break;
     e6c:	10 92 09 02 	sts	0x0209, r1
     e70:	10 92 08 02 	sts	0x0208, r1
     e74:	45 c0       	rjmp	.+138    	; 0xf00 <gc_execute_line+0x4e4>

		// head control
        case 10: head_down(1);break;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <gc_execute_line+0x464>
        case 11: head_down(0);break;
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
     e84:	3d c0       	rjmp	.+122    	; 0xf00 <gc_execute_line+0x4e4>

		// atc
		case 12: atc_change(0);break;
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	11 c0       	rjmp	.+34     	; 0xeae <gc_execute_line+0x492>
		case 13: atc_change(1);break;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e c0       	rjmp	.+28     	; 0xeae <gc_execute_line+0x492>
		case 14: atc_change(2);break;
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0b c0       	rjmp	.+22     	; 0xeae <gc_execute_line+0x492>
		case 15: atc_change(3);break;
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	08 c0       	rjmp	.+16     	; 0xeae <gc_execute_line+0x492>
		case 16: atc_change(4);break;
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <gc_execute_line+0x492>
		case 17: atc_change(5);break;
     ea4:	85 e0       	ldi	r24, 0x05	; 5
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <gc_execute_line+0x492>
		case 18: atc_change(6);break;
     eaa:	86 e0       	ldi	r24, 0x06	; 6
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <atc_change>
     eb2:	26 c0       	rjmp	.+76     	; 0xf00 <gc_execute_line+0x4e4>

		// vacuum
		case 19: vacuum(1);break;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <gc_execute_line+0x4a2>
		case 20: vacuum(0);break;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <vacuum>
     ec2:	1e c0       	rjmp	.+60     	; 0xf00 <gc_execute_line+0x4e4>

		// tape knock
		case 21: tape_knock();break;
     ec4:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <tape_knock>
     ec8:	1b c0       	rjmp	.+54     	; 0xf00 <gc_execute_line+0x4e4>
		case 22: vacuum_test(); break;
     eca:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <vacuum_test>
     ece:	18 c0       	rjmp	.+48     	; 0xf00 <gc_execute_line+0x4e4>
		case 23: check_for_tool(); break;
     ed0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <check_for_tool>
     ed4:	15 c0       	rjmp	.+42     	; 0xf00 <gc_execute_line+0x4e4>
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
     ed6:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <goto_vacpad>
     eda:	80 93 00 02 	sts	0x0200, r24
     ede:	a1 e0       	ldi	r26, 0x01	; 1
     ee0:	ac a7       	std	Y+44, r26	; 0x2c
     ee2:	0e c0       	rjmp	.+28     	; 0xf00 <gc_execute_line+0x4e4>
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
     ee4:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <vacuum_test>
     ee8:	b1 e0       	ldi	r27, 0x01	; 1
     eea:	bc a7       	std	Y+44, r27	; 0x2c
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <gc_execute_line+0x4e4>

        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     eee:	90 92 00 02 	sts	0x0200, r9
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <gc_execute_line+0x4e4>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     ef4:	c8 01       	movw	r24, r16
     ef6:	b7 01       	movw	r22, r14
     ef8:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
     efc:	60 93 22 02 	sts	0x0222, r22
    }

    if(gc.status_code) { break; }
     f00:	80 91 00 02 	lds	r24, 0x0200
     f04:	88 23       	and	r24, r24
     f06:	61 f4       	brne	.+24     	; 0xf20 <gc_execute_line+0x504>
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	be 01       	movw	r22, r28
     f0e:	6c 5f       	subi	r22, 0xFC	; 252
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	a5 01       	movw	r20, r10
     f14:	91 01       	movw	r18, r2
     f16:	0e 94 a1 04 	call	0x942	; 0x942 <next_statement>
     f1a:	89 2b       	or	r24, r25
     f1c:	09 f0       	breq	.+2      	; 0xf20 <gc_execute_line+0x504>
     f1e:	15 ce       	rjmp	.-982    	; 0xb4a <gc_execute_line+0x12e>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     f20:	80 91 00 02 	lds	r24, 0x0200
     f24:	88 23       	and	r24, r24
     f26:	09 f0       	breq	.+2      	; 0xf2a <gc_execute_line+0x50e>
     f28:	e6 c1       	rjmp	.+972    	; 0x12f6 <gc_execute_line+0x8da>

  char_counter = 0;
     f2a:	1b 82       	std	Y+3, r1	; 0x03
     f2c:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
     f2e:	80 e1       	ldi	r24, 0x10	; 16
     f30:	fe 01       	movw	r30, r28
     f32:	7c 96       	adiw	r30, 0x1c	; 28
     f34:	df 01       	movw	r26, r30
     f36:	1d 92       	st	X+, r1
     f38:	8a 95       	dec	r24
     f3a:	e9 f7       	brne	.-6      	; 0xf36 <gc_execute_line+0x51a>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     f3c:	de 01       	movw	r26, r28
     f3e:	1c 96       	adiw	r26, 0x0c	; 12
     f40:	e2 e1       	ldi	r30, 0x12	; 18
     f42:	f2 e0       	ldi	r31, 0x02	; 2
     f44:	80 e1       	ldi	r24, 0x10	; 16
     f46:	01 90       	ld	r0, Z+
     f48:	0d 92       	st	X+, r0
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <gc_execute_line+0x52a>
     f4e:	1d a6       	std	Y+45, r1	; 0x2d
     f50:	1e a6       	std	Y+46, r1	; 0x2e
     f52:	b0 e8       	ldi	r27, 0x80	; 128
     f54:	bf a7       	std	Y+47, r27	; 0x2f
     f56:	ef eb       	ldi	r30, 0xBF	; 191
     f58:	e8 ab       	std	Y+48, r30	; 0x30
     f5a:	66 24       	eor	r6, r6
     f5c:	77 24       	eor	r7, r7

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     f5e:	e2 e0       	ldi	r30, 0x02	; 2
     f60:	2e 2e       	mov	r2, r30
     f62:	31 2c       	mov	r3, r1
     f64:	2c 0e       	add	r2, r28
     f66:	3d 1e       	adc	r3, r29
     f68:	4e 01       	movw	r8, r28
     f6a:	08 94       	sec
     f6c:	81 1c       	adc	r8, r1
     f6e:	91 1c       	adc	r9, r1
	  case 'H':

		// amount to move
		head = unit_converted_value;
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
     f70:	79 e0       	ldi	r23, 0x09	; 9
     f72:	47 2e       	mov	r4, r23
     f74:	c9 c0       	rjmp	.+402    	; 0x1108 <gc_execute_line+0x6ec>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     f76:	cc 80       	ldd	r12, Y+4	; 0x04
     f78:	dd 80       	ldd	r13, Y+5	; 0x05
     f7a:	ee 80       	ldd	r14, Y+6	; 0x06
     f7c:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     f7e:	80 91 03 02 	lds	r24, 0x0203
     f82:	88 23       	and	r24, r24
     f84:	19 f4       	brne	.+6      	; 0xf8c <gc_execute_line+0x570>
     f86:	a7 01       	movw	r20, r14
     f88:	96 01       	movw	r18, r12
     f8a:	0a c0       	rjmp	.+20     	; 0xfa0 <gc_execute_line+0x584>
     f8c:	c7 01       	movw	r24, r14
     f8e:	b6 01       	movw	r22, r12
     f90:	23 e3       	ldi	r18, 0x33	; 51
     f92:	33 e3       	ldi	r19, 0x33	; 51
     f94:	4b ec       	ldi	r20, 0xCB	; 203
     f96:	51 e4       	ldi	r21, 0x41	; 65
     f98:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
     f9c:	9b 01       	movw	r18, r22
     f9e:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     fa0:	09 81       	ldd	r16, Y+1	; 0x01
     fa2:	0c 34       	cpi	r16, 0x4C	; 76
     fa4:	60 f4       	brcc	.+24     	; 0xfbe <gc_execute_line+0x5a2>
     fa6:	09 34       	cpi	r16, 0x49	; 73
     fa8:	08 f0       	brcs	.+2      	; 0xfac <gc_execute_line+0x590>
     faa:	47 c0       	rjmp	.+142    	; 0x103a <gc_execute_line+0x61e>
     fac:	06 34       	cpi	r16, 0x46	; 70
     fae:	b1 f0       	breq	.+44     	; 0xfdc <gc_execute_line+0x5c0>
     fb0:	08 34       	cpi	r16, 0x48	; 72
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <gc_execute_line+0x59a>
     fb4:	a2 c0       	rjmp	.+324    	; 0x10fa <gc_execute_line+0x6de>
     fb6:	03 34       	cpi	r16, 0x43	; 67
     fb8:	09 f0       	breq	.+2      	; 0xfbc <gc_execute_line+0x5a0>
     fba:	a6 c0       	rjmp	.+332    	; 0x1108 <gc_execute_line+0x6ec>
     fbc:	88 c0       	rjmp	.+272    	; 0x10ce <gc_execute_line+0x6b2>
     fbe:	03 35       	cpi	r16, 0x53	; 83
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <gc_execute_line+0x5a8>
     fc2:	4f c0       	rjmp	.+158    	; 0x1062 <gc_execute_line+0x646>
     fc4:	04 35       	cpi	r16, 0x54	; 84
     fc6:	20 f4       	brcc	.+8      	; 0xfd0 <gc_execute_line+0x5b4>
     fc8:	00 35       	cpi	r16, 0x50	; 80
     fca:	09 f0       	breq	.+2      	; 0xfce <gc_execute_line+0x5b2>
     fcc:	9d c0       	rjmp	.+314    	; 0x1108 <gc_execute_line+0x6ec>
     fce:	44 c0       	rjmp	.+136    	; 0x1058 <gc_execute_line+0x63c>
     fd0:	80 2f       	mov	r24, r16
     fd2:	88 55       	subi	r24, 0x58	; 88
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	08 f0       	brcs	.+2      	; 0xfda <gc_execute_line+0x5be>
     fd8:	97 c0       	rjmp	.+302    	; 0x1108 <gc_execute_line+0x6ec>
     fda:	4c c0       	rjmp	.+152    	; 0x1074 <gc_execute_line+0x658>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     fdc:	80 91 02 02 	lds	r24, 0x0202
     fe0:	88 23       	and	r24, r24
     fe2:	29 f0       	breq	.+10     	; 0xfee <gc_execute_line+0x5d2>
     fe4:	2d a7       	std	Y+45, r18	; 0x2d
     fe6:	3e a7       	std	Y+46, r19	; 0x2e
     fe8:	4f a7       	std	Y+47, r20	; 0x2f
     fea:	58 ab       	std	Y+48, r21	; 0x30
     fec:	8d c0       	rjmp	.+282    	; 0x1108 <gc_execute_line+0x6ec>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     fee:	80 91 01 02 	lds	r24, 0x0201
     ff2:	88 23       	and	r24, r24
     ff4:	89 f4       	brne	.+34     	; 0x1018 <gc_execute_line+0x5fc>
          gc.seek_rate = unit_converted_value/60;
     ff6:	ca 01       	movw	r24, r20
     ff8:	b9 01       	movw	r22, r18
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e7       	ldi	r20, 0x70	; 112
    1000:	52 e4       	ldi	r21, 0x42	; 66
    1002:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1006:	60 93 0e 02 	sts	0x020E, r22
    100a:	70 93 0f 02 	sts	0x020F, r23
    100e:	80 93 10 02 	sts	0x0210, r24
    1012:	90 93 11 02 	sts	0x0211, r25
    1016:	78 c0       	rjmp	.+240    	; 0x1108 <gc_execute_line+0x6ec>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
    1018:	ca 01       	movw	r24, r20
    101a:	b9 01       	movw	r22, r18
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e7       	ldi	r20, 0x70	; 112
    1022:	52 e4       	ldi	r21, 0x42	; 66
    1024:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1028:	60 93 0a 02 	sts	0x020A, r22
    102c:	70 93 0b 02 	sts	0x020B, r23
    1030:	80 93 0c 02 	sts	0x020C, r24
    1034:	90 93 0d 02 	sts	0x020D, r25
    1038:	67 c0       	rjmp	.+206    	; 0x1108 <gc_execute_line+0x6ec>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    103a:	e0 2f       	mov	r30, r16
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	e9 54       	subi	r30, 0x49	; 73
    1040:	f0 40       	sbci	r31, 0x00	; 0
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	e8 0d       	add	r30, r8
    104c:	f9 1d       	adc	r31, r9
    104e:	23 8f       	std	Z+27, r18	; 0x1b
    1050:	34 8f       	std	Z+28, r19	; 0x1c
    1052:	45 8f       	std	Z+29, r20	; 0x1d
    1054:	56 8f       	std	Z+30, r21	; 0x1e
    1056:	58 c0       	rjmp	.+176    	; 0x1108 <gc_execute_line+0x6ec>
      case 'P': p = value; break;
    1058:	c8 86       	std	Y+8, r12	; 0x08
    105a:	d9 86       	std	Y+9, r13	; 0x09
    105c:	ea 86       	std	Y+10, r14	; 0x0a
    105e:	fb 86       	std	Y+11, r15	; 0x0b
    1060:	53 c0       	rjmp	.+166    	; 0x1108 <gc_execute_line+0x6ec>
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    1062:	c7 01       	movw	r24, r14
    1064:	b6 01       	movw	r22, r12
    1066:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
    106a:	70 93 24 02 	sts	0x0224, r23
    106e:	60 93 23 02 	sts	0x0223, r22
    1072:	4a c0       	rjmp	.+148    	; 0x1108 <gc_execute_line+0x6ec>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    1074:	80 91 04 02 	lds	r24, 0x0204
    1078:	88 23       	and	r24, r24
    107a:	11 f4       	brne	.+4      	; 0x1080 <gc_execute_line+0x664>
    107c:	55 20       	and	r5, r5
    107e:	79 f0       	breq	.+30     	; 0x109e <gc_execute_line+0x682>
        target[letter - 'X'] = unit_converted_value;
    1080:	e0 2f       	mov	r30, r16
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	e8 55       	subi	r30, 0x58	; 88
    1086:	f0 40       	sbci	r31, 0x00	; 0
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	e8 0d       	add	r30, r8
    1092:	f9 1d       	adc	r31, r9
    1094:	23 87       	std	Z+11, r18	; 0x0b
    1096:	34 87       	std	Z+12, r19	; 0x0c
    1098:	45 87       	std	Z+13, r20	; 0x0d
    109a:	56 87       	std	Z+14, r21	; 0x0e
    109c:	35 c0       	rjmp	.+106    	; 0x1108 <gc_execute_line+0x6ec>
      } else {
        target[letter - 'X'] += unit_converted_value;
    109e:	10 e0       	ldi	r17, 0x00	; 0
    10a0:	08 55       	subi	r16, 0x58	; 88
    10a2:	10 40       	sbci	r17, 0x00	; 0
    10a4:	00 0f       	add	r16, r16
    10a6:	11 1f       	adc	r17, r17
    10a8:	00 0f       	add	r16, r16
    10aa:	11 1f       	adc	r17, r17
    10ac:	08 0d       	add	r16, r8
    10ae:	19 1d       	adc	r17, r9
    10b0:	d8 01       	movw	r26, r16
    10b2:	1b 96       	adiw	r26, 0x0b	; 11
    10b4:	6d 91       	ld	r22, X+
    10b6:	7d 91       	ld	r23, X+
    10b8:	8d 91       	ld	r24, X+
    10ba:	9c 91       	ld	r25, X
    10bc:	1e 97       	sbiw	r26, 0x0e	; 14
    10be:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    10c2:	f8 01       	movw	r30, r16
    10c4:	63 87       	std	Z+11, r22	; 0x0b
    10c6:	74 87       	std	Z+12, r23	; 0x0c
    10c8:	85 87       	std	Z+13, r24	; 0x0d
    10ca:	96 87       	std	Z+14, r25	; 0x0e
    10cc:	1d c0       	rjmp	.+58     	; 0x1108 <gc_execute_line+0x6ec>
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    10ce:	80 91 04 02 	lds	r24, 0x0204
    10d2:	88 23       	and	r24, r24
    10d4:	11 f4       	brne	.+4      	; 0x10da <gc_execute_line+0x6be>
    10d6:	55 20       	and	r5, r5
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <gc_execute_line+0x6c8>
		target[C_AXIS] = unit_converted_value;
    10da:	28 8f       	std	Y+24, r18	; 0x18
    10dc:	39 8f       	std	Y+25, r19	; 0x19
    10de:	4a 8f       	std	Y+26, r20	; 0x1a
    10e0:	5b 8f       	std	Y+27, r21	; 0x1b
    10e2:	12 c0       	rjmp	.+36     	; 0x1108 <gc_execute_line+0x6ec>
      } else {
        target[C_AXIS] += unit_converted_value;
    10e4:	68 8d       	ldd	r22, Y+24	; 0x18
    10e6:	79 8d       	ldd	r23, Y+25	; 0x19
    10e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10ec:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    10f0:	68 8f       	std	Y+24, r22	; 0x18
    10f2:	79 8f       	std	Y+25, r23	; 0x19
    10f4:	8a 8f       	std	Y+26, r24	; 0x1a
    10f6:	9b 8f       	std	Y+27, r25	; 0x1b
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <gc_execute_line+0x6ec>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    10fa:	ca 01       	movw	r24, r20
    10fc:	b9 01       	movw	r22, r18
    10fe:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
    1102:	3b 01       	movw	r6, r22
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    1104:	40 92 01 02 	sts	0x0201, r4
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    1108:	c4 01       	movw	r24, r8
    110a:	be 01       	movw	r22, r28
    110c:	6c 5f       	subi	r22, 0xFC	; 252
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	a5 01       	movw	r20, r10
    1112:	91 01       	movw	r18, r2
    1114:	0e 94 a1 04 	call	0x942	; 0x942 <next_statement>
    1118:	89 2b       	or	r24, r25
    111a:	09 f0       	breq	.+2      	; 0x111e <gc_execute_line+0x702>
    111c:	2c cf       	rjmp	.-424    	; 0xf76 <gc_execute_line+0x55a>
		break;
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    111e:	80 91 00 02 	lds	r24, 0x0200
    1122:	88 23       	and	r24, r24
    1124:	09 f0       	breq	.+2      	; 0x1128 <gc_execute_line+0x70c>
    1126:	e7 c0       	rjmp	.+462    	; 0x12f6 <gc_execute_line+0x8da>
    
  // Update spindle state
  if (gc.spindle_direction) {
    1128:	80 91 06 02 	lds	r24, 0x0206
    112c:	90 91 07 02 	lds	r25, 0x0207
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	59 f0       	breq	.+22     	; 0x114a <gc_execute_line+0x72e>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    1134:	40 91 23 02 	lds	r20, 0x0223
    1138:	50 91 24 02 	lds	r21, 0x0224
    113c:	66 27       	eor	r22, r22
    113e:	57 fd       	sbrc	r21, 7
    1140:	60 95       	com	r22
    1142:	76 2f       	mov	r23, r22
    1144:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <spindle_run>
    1148:	02 c0       	rjmp	.+4      	; 0x114e <gc_execute_line+0x732>
  } else {
    spindle_stop();
    114a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <spindle_stop>
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    114e:	80 91 08 02 	lds	r24, 0x0208
    1152:	90 91 09 02 	lds	r25, 0x0209
    1156:	89 2b       	or	r24, r25
    1158:	19 f0       	breq	.+6      	; 0x1160 <gc_execute_line+0x744>
  	coolant_flood(TRUE);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <gc_execute_line+0x748>
  }
  else {
  	coolant_flood(FALSE);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <coolant_flood>
  }
  
  // Perform any physical actions
  switch (next_action) {
    1168:	fc a5       	ldd	r31, Y+44	; 0x2c
    116a:	f1 30       	cpi	r31, 0x01	; 1
    116c:	91 f0       	breq	.+36     	; 0x1192 <gc_execute_line+0x776>
    116e:	f1 30       	cpi	r31, 0x01	; 1
    1170:	f8 f0       	brcs	.+62     	; 0x11b0 <gc_execute_line+0x794>
    1172:	f2 30       	cpi	r31, 0x02	; 2
    1174:	21 f0       	breq	.+8      	; 0x117e <gc_execute_line+0x762>
    1176:	f3 30       	cpi	r31, 0x03	; 3
    1178:	09 f0       	breq	.+2      	; 0x117c <gc_execute_line+0x760>
    117a:	b0 c0       	rjmp	.+352    	; 0x12dc <gc_execute_line+0x8c0>
    117c:	9d c0       	rjmp	.+314    	; 0x12b8 <gc_execute_line+0x89c>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    117e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <mc_go_home>
    1182:	80 e1       	ldi	r24, 0x10	; 16
    1184:	fe 01       	movw	r30, r28
    1186:	3c 96       	adiw	r30, 0x0c	; 12
    1188:	df 01       	movw	r26, r30
    118a:	1d 92       	st	X+, r1
    118c:	8a 95       	dec	r24
    118e:	e9 f7       	brne	.-6      	; 0x118a <gc_execute_line+0x76e>
    1190:	a5 c0       	rjmp	.+330    	; 0x12dc <gc_execute_line+0x8c0>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    1192:	68 85       	ldd	r22, Y+8	; 0x08
    1194:	79 85       	ldd	r23, Y+9	; 0x09
    1196:	8a 85       	ldd	r24, Y+10	; 0x0a
    1198:	9b 85       	ldd	r25, Y+11	; 0x0b
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a e7       	ldi	r20, 0x7A	; 122
    11a0:	54 e4       	ldi	r21, 0x44	; 68
    11a2:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    11a6:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
    11aa:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <mc_dwell>
    11ae:	96 c0       	rjmp	.+300    	; 0x12dc <gc_execute_line+0x8c0>
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    11b0:	80 91 01 02 	lds	r24, 0x0201
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	99 f1       	breq	.+102    	; 0x121e <gc_execute_line+0x802>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <gc_execute_line+0x7a8>
    11bc:	89 30       	cpi	r24, 0x09	; 9
    11be:	09 f0       	breq	.+2      	; 0x11c2 <gc_execute_line+0x7a6>
    11c0:	8d c0       	rjmp	.+282    	; 0x12dc <gc_execute_line+0x8c0>
    11c2:	76 c0       	rjmp	.+236    	; 0x12b0 <gc_execute_line+0x894>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <gc_execute_line+0x7aa>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <gc_execute_line+0x7ac>
    11c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    11ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    11cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    11ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    11d0:	28 89       	ldd	r18, Y+16	; 0x10
    11d2:	39 89       	ldd	r19, Y+17	; 0x11
    11d4:	4a 89       	ldd	r20, Y+18	; 0x12
    11d6:	5b 89       	ldd	r21, Y+19	; 0x13
    11d8:	ec 88       	ldd	r14, Y+20	; 0x14
    11da:	fd 88       	ldd	r15, Y+21	; 0x15
    11dc:	0e 89       	ldd	r16, Y+22	; 0x16
    11de:	1f 89       	ldd	r17, Y+23	; 0x17
    11e0:	a8 8c       	ldd	r10, Y+24	; 0x18
    11e2:	b9 8c       	ldd	r11, Y+25	; 0x19
    11e4:	ca 8c       	ldd	r12, Y+26	; 0x1a
    11e6:	db 8c       	ldd	r13, Y+27	; 0x1b
    11e8:	60 90 0e 02 	lds	r6, 0x020E
    11ec:	70 90 0f 02 	lds	r7, 0x020F
    11f0:	80 90 10 02 	lds	r8, 0x0210
    11f4:	90 90 11 02 	lds	r9, 0x0211
    11f8:	ed b7       	in	r30, 0x3d	; 61
    11fa:	fe b7       	in	r31, 0x3e	; 62
    11fc:	61 82       	std	Z+1, r6	; 0x01
    11fe:	72 82       	std	Z+2, r7	; 0x02
    1200:	83 82       	std	Z+3, r8	; 0x03
    1202:	94 82       	std	Z+4, r9	; 0x04
    1204:	16 82       	std	Z+6, r1	; 0x06
    1206:	15 82       	std	Z+5, r1	; 0x05
    1208:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <plan_buffer_line>
    120c:	8d b7       	in	r24, 0x3d	; 61
    120e:	9e b7       	in	r25, 0x3e	; 62
    1210:	06 96       	adiw	r24, 0x06	; 6
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	9e bf       	out	0x3e, r25	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	8d bf       	out	0x3d, r24	; 61
    121c:	5f c0       	rjmp	.+190    	; 0x12dc <gc_execute_line+0x8c0>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    121e:	2c 84       	ldd	r2, Y+12	; 0x0c
    1220:	3d 84       	ldd	r3, Y+13	; 0x0d
    1222:	4e 84       	ldd	r4, Y+14	; 0x0e
    1224:	5f 84       	ldd	r5, Y+15	; 0x0f
    1226:	68 88       	ldd	r6, Y+16	; 0x10
    1228:	79 88       	ldd	r7, Y+17	; 0x11
    122a:	8a 88       	ldd	r8, Y+18	; 0x12
    122c:	9b 88       	ldd	r9, Y+19	; 0x13
    122e:	ec 88       	ldd	r14, Y+20	; 0x14
    1230:	fd 88       	ldd	r15, Y+21	; 0x15
    1232:	0e 89       	ldd	r16, Y+22	; 0x16
    1234:	1f 89       	ldd	r17, Y+23	; 0x17
    1236:	a8 8c       	ldd	r10, Y+24	; 0x18
    1238:	b9 8c       	ldd	r11, Y+25	; 0x19
    123a:	ca 8c       	ldd	r12, Y+26	; 0x1a
    123c:	db 8c       	ldd	r13, Y+27	; 0x1b
    123e:	60 91 02 02 	lds	r22, 0x0202
    1242:	66 23       	and	r22, r22
    1244:	61 f4       	brne	.+24     	; 0x125e <gc_execute_line+0x842>
    1246:	90 91 0a 02 	lds	r25, 0x020A
    124a:	9d a7       	std	Y+45, r25	; 0x2d
    124c:	a0 91 0b 02 	lds	r26, 0x020B
    1250:	ae a7       	std	Y+46, r26	; 0x2e
    1252:	b0 91 0c 02 	lds	r27, 0x020C
    1256:	bf a7       	std	Y+47, r27	; 0x2f
    1258:	e0 91 0d 02 	lds	r30, 0x020D
    125c:	e8 ab       	std	Y+48, r30	; 0x30
    125e:	00 d0       	rcall	.+0      	; 0x1260 <gc_execute_line+0x844>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <gc_execute_line+0x846>
    1262:	8d b7       	in	r24, 0x3d	; 61
    1264:	9e b7       	in	r25, 0x3e	; 62
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	9a ab       	std	Y+50, r25	; 0x32
    126a:	89 ab       	std	Y+49, r24	; 0x31
    126c:	2d a5       	ldd	r18, Y+45	; 0x2d
    126e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1270:	4f a5       	ldd	r20, Y+47	; 0x2f
    1272:	58 a9       	ldd	r21, Y+48	; 0x30
    1274:	c9 01       	movw	r24, r18
    1276:	da 01       	movw	r26, r20
    1278:	ed b7       	in	r30, 0x3d	; 61
    127a:	fe b7       	in	r31, 0x3e	; 62
    127c:	81 83       	std	Z+1, r24	; 0x01
    127e:	92 83       	std	Z+2, r25	; 0x02
    1280:	a3 83       	std	Z+3, r26	; 0x03
    1282:	b4 83       	std	Z+4, r27	; 0x04
    1284:	a9 a9       	ldd	r26, Y+49	; 0x31
    1286:	ba a9       	ldd	r27, Y+50	; 0x32
    1288:	14 96       	adiw	r26, 0x04	; 4
    128a:	6c 93       	st	X, r22
    128c:	14 97       	sbiw	r26, 0x04	; 4
    128e:	15 96       	adiw	r26, 0x05	; 5
    1290:	1c 92       	st	X, r1
    1292:	c2 01       	movw	r24, r4
    1294:	b1 01       	movw	r22, r2
    1296:	a4 01       	movw	r20, r8
    1298:	93 01       	movw	r18, r6
    129a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <plan_buffer_line>
    129e:	ed b7       	in	r30, 0x3d	; 61
    12a0:	fe b7       	in	r31, 0x3e	; 62
    12a2:	36 96       	adiw	r30, 0x06	; 6
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	fe bf       	out	0x3e, r31	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	ed bf       	out	0x3d, r30	; 61
    12ae:	16 c0       	rjmp	.+44     	; 0x12dc <gc_execute_line+0x8c0>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    12b0:	c3 01       	movw	r24, r6
    12b2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <rotate_head>
    12b6:	12 c0       	rjmp	.+36     	; 0x12dc <gc_execute_line+0x8c0>
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    12b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    12ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    12bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    12be:	9f 85       	ldd	r25, Y+15	; 0x0f
    12c0:	28 89       	ldd	r18, Y+16	; 0x10
    12c2:	39 89       	ldd	r19, Y+17	; 0x11
    12c4:	4a 89       	ldd	r20, Y+18	; 0x12
    12c6:	5b 89       	ldd	r21, Y+19	; 0x13
    12c8:	ec 88       	ldd	r14, Y+20	; 0x14
    12ca:	fd 88       	ldd	r15, Y+21	; 0x15
    12cc:	0e 89       	ldd	r16, Y+22	; 0x16
    12ce:	1f 89       	ldd	r17, Y+23	; 0x17
    12d0:	a8 8c       	ldd	r10, Y+24	; 0x18
    12d2:	b9 8c       	ldd	r11, Y+25	; 0x19
    12d4:	ca 8c       	ldd	r12, Y+26	; 0x1a
    12d6:	db 8c       	ldd	r13, Y+27	; 0x1b
    12d8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <plan_set_current>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    12dc:	a2 e1       	ldi	r26, 0x12	; 18
    12de:	b2 e0       	ldi	r27, 0x02	; 2
    12e0:	fe 01       	movw	r30, r28
    12e2:	3c 96       	adiw	r30, 0x0c	; 12
    12e4:	80 e1       	ldi	r24, 0x10	; 16
    12e6:	01 90       	ld	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	81 50       	subi	r24, 0x01	; 1
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <gc_execute_line+0x8ca>

  return(gc.status_code);
    12ee:	80 91 00 02 	lds	r24, 0x0200
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <gc_execute_line+0x8da>
    12f4:	83 e0       	ldi	r24, 0x03	; 3
}
    12f6:	e2 96       	adiw	r28, 0x32	; 50
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	bf 90       	pop	r11
    1314:	af 90       	pop	r10
    1316:	9f 90       	pop	r9
    1318:	8f 90       	pop	r8
    131a:	7f 90       	pop	r7
    131c:	6f 90       	pop	r6
    131e:	5f 90       	pop	r5
    1320:	4f 90       	pop	r4
    1322:	3f 90       	pop	r3
    1324:	2f 90       	pop	r2
    1326:	08 95       	ret

00001328 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1328:	af 92       	push	r10
    132a:	bf 92       	push	r11
    132c:	cf 92       	push	r12
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	79 01       	movw	r14, r18
    133a:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    133c:	5f 77       	andi	r21, 0x7F	; 127
    133e:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1342:	0e 94 52 20 	call	0x40a4	; 0x40a4 <atan>
    1346:	5b 01       	movw	r10, r22
    1348:	6c 01       	movw	r12, r24
  if (y>0) {
    134a:	c8 01       	movw	r24, r16
    134c:	b7 01       	movw	r22, r14
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__gesf2>
    135a:	18 16       	cp	r1, r24
    135c:	cc f0       	brlt	.+50     	; 0x1390 <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
    135e:	c6 01       	movw	r24, r12
    1360:	b5 01       	movw	r22, r10
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__gesf2>
    136e:	18 16       	cp	r1, r24
    1370:	2c f4       	brge	.+10     	; 0x137c <theta+0x54>
    {
      return(M_PI-theta);
    1372:	6b ed       	ldi	r22, 0xDB	; 219
    1374:	7f e0       	ldi	r23, 0x0F	; 15
    1376:	89 e4       	ldi	r24, 0x49	; 73
    1378:	90 e4       	ldi	r25, 0x40	; 64
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <theta+0x5c>
    } else {
      return(-M_PI-theta);
    137c:	6b ed       	ldi	r22, 0xDB	; 219
    137e:	7f e0       	ldi	r23, 0x0F	; 15
    1380:	89 e4       	ldi	r24, 0x49	; 73
    1382:	90 ec       	ldi	r25, 0xC0	; 192
    1384:	a6 01       	movw	r20, r12
    1386:	95 01       	movw	r18, r10
    1388:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subsf3>
    138c:	5b 01       	movw	r10, r22
    138e:	6c 01       	movw	r12, r24
    }
  }
}
    1390:	b5 01       	movw	r22, r10
    1392:	c6 01       	movw	r24, r12
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	af 90       	pop	r10
    13a4:	08 95       	ret

000013a6 <main>:
// #  error "As of version 0.6 Grbl only supports atmega328p. If you want to run Grbl on an 168 check out 0.51 ('git co v0_51')"
// #endif

int main(void)
{
  sp_init();        
    13a6:	0e 94 50 13 	call	0x26a0	; 0x26a0 <sp_init>
  settings_init();  
    13aa:	0e 94 5e 15 	call	0x2abc	; 0x2abc <settings_init>
  plan_init();      
    13ae:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <plan_init>
  st_init();        
    13b2:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <st_init>
  limits_init();
    13b6:	0e 94 39 17 	call	0x2e72	; 0x2e72 <limits_init>
  spindle_init();   
    13ba:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <spindle_init>
  coolant_init();
    13be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <coolant_init>
  atc_init();
    13c2:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <atc_init>
  head_init();
    13c6:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <head_init>
  vacuum_init();
    13ca:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <vacuum_init>
  panel_init();
    13ce:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <panel_init>
  gc_init();
    13d2:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    13d6:	82 e4       	ldi	r24, 0x42	; 66
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    13de:	83 b7       	in	r24, 0x33	; 51
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	83 bf       	out	0x33, r24	; 51
    13e4:	88 95       	sleep
    13e6:	83 b7       	in	r24, 0x33	; 51
    13e8:	8e 7f       	andi	r24, 0xFE	; 254
    13ea:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
    13ec:	0e 94 de 12 	call	0x25bc	; 0x25bc <sp_process>
    13f0:	f6 cf       	rjmp	.-20     	; 0x13de <main+0x38>

000013f2 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    13f2:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <st_go_home>
}
    13f6:	08 95       	ret

000013f8 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	7b 01       	movw	r14, r22
    140a:	8c 01       	movw	r16, r24
  st_synchronize();
    140c:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <st_synchronize>
  _delay_ms(milliseconds);
    1410:	c8 01       	movw	r24, r16
    1412:	b7 01       	movw	r22, r14
    1414:	0e 94 2a 21 	call	0x4254	; 0x4254 <__floatunsisf>
    1418:	5b 01       	movw	r10, r22
    141a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a e7       	ldi	r20, 0x7A	; 122
    1422:	55 e4       	ldi	r21, 0x45	; 69
    1424:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1428:	7b 01       	movw	r14, r22
    142a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5f e3       	ldi	r21, 0x3F	; 63
    1434:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
    1438:	88 23       	and	r24, r24
    143a:	1c f4       	brge	.+6      	; 0x1442 <mc_dwell+0x4a>
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	24 c0       	rjmp	.+72     	; 0x148a <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    1442:	c8 01       	movw	r24, r16
    1444:	b7 01       	movw	r22, r14
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__gesf2>
    1452:	18 16       	cp	r1, r24
    1454:	b4 f4       	brge	.+44     	; 0x1482 <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	c6 01       	movw	r24, r12
    1458:	b5 01       	movw	r22, r10
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e2       	ldi	r20, 0x20	; 32
    1460:	51 e4       	ldi	r21, 0x41	; 65
    1462:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1466:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    146a:	80 e9       	ldi	r24, 0x90	; 144
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	05 c0       	rjmp	.+10     	; 0x147a <mc_dwell+0x82>
    1470:	fc 01       	movw	r30, r24
    1472:	31 97       	sbiw	r30, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	61 50       	subi	r22, 0x01	; 1
    1478:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	61 15       	cp	r22, r1
    147c:	71 05       	cpc	r23, r1
    147e:	c1 f7       	brne	.-16     	; 0x1470 <mc_dwell+0x78>
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	c8 01       	movw	r24, r16
    1484:	b7 01       	movw	r22, r14
    1486:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
    148a:	cb 01       	movw	r24, r22
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <mc_dwell+0x94>
}
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	bf 90       	pop	r11
    149e:	af 90       	pop	r10
    14a0:	08 95       	ret

000014a2 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    14a2:	fc 01       	movw	r30, r24
    14a4:	60 91 96 06 	lds	r22, 0x0696
    14a8:	70 91 97 06 	lds	r23, 0x0697
    14ac:	80 91 98 06 	lds	r24, 0x0698
    14b0:	90 91 99 06 	lds	r25, 0x0699
    14b4:	21 a5       	ldd	r18, Z+41	; 0x29
    14b6:	32 a5       	ldd	r19, Z+42	; 0x2a
    14b8:	43 a5       	ldd	r20, Z+43	; 0x2b
    14ba:	54 a5       	ldd	r21, Z+44	; 0x2c
    14bc:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    14c0:	08 95       	ret

000014c2 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    14c2:	80 91 16 05 	lds	r24, 0x0516
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	08 95       	ret

000014ca <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    14ca:	20 91 02 05 	lds	r18, 0x0502
    14ce:	30 91 03 05 	lds	r19, 0x0503
    14d2:	80 91 04 05 	lds	r24, 0x0504
    14d6:	90 91 05 05 	lds	r25, 0x0505
    14da:	28 17       	cp	r18, r24
    14dc:	39 07       	cpc	r19, r25
    14de:	69 f0       	breq	.+26     	; 0x14fa <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    14e0:	80 91 04 05 	lds	r24, 0x0504
    14e4:	90 91 05 05 	lds	r25, 0x0505
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	6a e0       	ldi	r22, 0x0A	; 10
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	0e 94 b7 23 	call	0x476e	; 0x476e <__divmodhi4>
    14f2:	90 93 05 05 	sts	0x0505, r25
    14f6:	80 93 04 05 	sts	0x0504, r24
    14fa:	08 95       	ret

000014fc <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    14fc:	20 91 02 05 	lds	r18, 0x0502
    1500:	30 91 03 05 	lds	r19, 0x0503
    1504:	80 91 04 05 	lds	r24, 0x0504
    1508:	90 91 05 05 	lds	r25, 0x0505
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	19 f4       	brne	.+6      	; 0x1518 <plan_get_current_block+0x1c>
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	0f c0       	rjmp	.+30     	; 0x1536 <plan_get_current_block+0x3a>
  return(&block_buffer[block_buffer_tail]);
    1518:	20 91 04 05 	lds	r18, 0x0504
    151c:	30 91 05 05 	lds	r19, 0x0505
    1520:	89 e4       	ldi	r24, 0x49	; 73
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	28 9f       	mul	r18, r24
    1526:	a0 01       	movw	r20, r0
    1528:	29 9f       	mul	r18, r25
    152a:	50 0d       	add	r21, r0
    152c:	38 9f       	mul	r19, r24
    152e:	50 0d       	add	r21, r0
    1530:	11 24       	eor	r1, r1
    1532:	48 5d       	subi	r20, 0xD8	; 216
    1534:	5d 4f       	sbci	r21, 0xFD	; 253
}
    1536:	ca 01       	movw	r24, r20
    1538:	08 95       	ret

0000153a <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    153a:	4f 92       	push	r4
    153c:	5f 92       	push	r5
    153e:	6f 92       	push	r6
    1540:	7f 92       	push	r7
    1542:	8f 92       	push	r8
    1544:	9f 92       	push	r9
    1546:	af 92       	push	r10
    1548:	bf 92       	push	r11
    154a:	cf 92       	push	r12
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	ec 01       	movw	r28, r24
    155c:	4b 01       	movw	r8, r22
  if(!current) { return; }
    155e:	61 15       	cp	r22, r1
    1560:	71 05       	cpc	r23, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <planner_forward_pass_kernel+0x2c>
    1564:	5e c0       	rjmp	.+188    	; 0x1622 <planner_forward_pass_kernel+0xe8>
  if(previous) {
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	09 f4       	brne	.+2      	; 0x156c <planner_forward_pass_kernel+0x32>
    156a:	5b c0       	rjmp	.+182    	; 0x1622 <planner_forward_pass_kernel+0xe8>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    156c:	e9 a8       	ldd	r14, Y+49	; 0x31
    156e:	fa a8       	ldd	r15, Y+50	; 0x32
    1570:	0b a9       	ldd	r16, Y+51	; 0x33
    1572:	1c a9       	ldd	r17, Y+52	; 0x34
    1574:	fb 01       	movw	r30, r22
    1576:	41 a8       	ldd	r4, Z+49	; 0x31
    1578:	52 a8       	ldd	r5, Z+50	; 0x32
    157a:	63 a8       	ldd	r6, Z+51	; 0x33
    157c:	74 a8       	ldd	r7, Z+52	; 0x34
    157e:	c8 01       	movw	r24, r16
    1580:	b7 01       	movw	r22, r14
    1582:	a3 01       	movw	r20, r6
    1584:	92 01       	movw	r18, r4
    1586:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
    158a:	88 23       	and	r24, r24
    158c:	0c f0       	brlt	.+2      	; 0x1590 <planner_forward_pass_kernel+0x56>
    158e:	49 c0       	rjmp	.+146    	; 0x1622 <planner_forward_pass_kernel+0xe8>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1590:	f4 01       	movw	r30, r8
    1592:	a1 a4       	ldd	r10, Z+41	; 0x29
    1594:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1596:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1598:	d4 a4       	ldd	r13, Z+44	; 0x2c
    159a:	c6 01       	movw	r24, r12
    159c:	b5 01       	movw	r22, r10
    159e:	a8 01       	movw	r20, r16
    15a0:	97 01       	movw	r18, r14
    15a2:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    15a6:	9b 01       	movw	r18, r22
    15a8:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    15aa:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    15ae:	7b 01       	movw	r14, r22
    15b0:	8c 01       	movw	r16, r24
    15b2:	20 91 92 06 	lds	r18, 0x0692
    15b6:	30 91 93 06 	lds	r19, 0x0693
    15ba:	40 91 94 06 	lds	r20, 0x0694
    15be:	50 91 95 06 	lds	r21, 0x0695
    15c2:	50 58       	subi	r21, 0x80	; 128
    15c4:	ca 01       	movw	r24, r20
    15c6:	b9 01       	movw	r22, r18
    15c8:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e7       	ldi	r20, 0x70	; 112
    15d2:	52 e4       	ldi	r21, 0x42	; 66
    15d4:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e7       	ldi	r20, 0x70	; 112
    15de:	52 ec       	ldi	r21, 0xC2	; 194
    15e0:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    15e4:	2d a5       	ldd	r18, Y+45	; 0x2d
    15e6:	3e a5       	ldd	r19, Y+46	; 0x2e
    15e8:	4f a5       	ldd	r20, Y+47	; 0x2f
    15ea:	58 a9       	ldd	r21, Y+48	; 0x30
    15ec:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    15f0:	9b 01       	movw	r18, r22
    15f2:	ac 01       	movw	r20, r24
    15f4:	c8 01       	movw	r24, r16
    15f6:	b7 01       	movw	r22, r14
    15f8:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    15fc:	0e 94 49 23 	call	0x4692	; 0x4692 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1600:	a6 01       	movw	r20, r12
    1602:	95 01       	movw	r18, r10
    1604:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1608:	7b 01       	movw	r14, r22
    160a:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    160c:	a3 01       	movw	r20, r6
    160e:	92 01       	movw	r18, r4
    1610:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
    1614:	88 23       	and	r24, r24
    1616:	2c f4       	brge	.+10     	; 0x1622 <planner_forward_pass_kernel+0xe8>
        current->entry_factor = max_entry_factor;
    1618:	f4 01       	movw	r30, r8
    161a:	e1 aa       	std	Z+49, r14	; 0x31
    161c:	f2 aa       	std	Z+50, r15	; 0x32
    161e:	03 ab       	std	Z+51, r16	; 0x33
    1620:	14 ab       	std	Z+52, r17	; 0x34
      }
    }
  }
}
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	af 90       	pop	r10
    1636:	9f 90       	pop	r9
    1638:	8f 90       	pop	r8
    163a:	7f 90       	pop	r7
    163c:	6f 90       	pop	r6
    163e:	5f 90       	pop	r5
    1640:	4f 90       	pop	r4
    1642:	08 95       	ret

00001644 <planner_forward_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1650:	80 91 04 05 	lds	r24, 0x0504
    1654:	90 91 05 05 	lds	r25, 0x0505
    1658:	48 2f       	mov	r20, r24
    165a:	c0 e0       	ldi	r28, 0x00	; 0
    165c:	d0 e0       	ldi	r29, 0x00	; 0
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	14 c0       	rjmp	.+40     	; 0x168c <planner_forward_pass+0x48>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    1664:	89 e4       	ldi	r24, 0x49	; 73
    1666:	48 02       	muls	r20, r24
    1668:	80 01       	movw	r16, r0
    166a:	11 24       	eor	r1, r1
    166c:	08 5d       	subi	r16, 0xD8	; 216
    166e:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    1670:	c9 01       	movw	r24, r18
    1672:	be 01       	movw	r22, r28
    1674:	a8 01       	movw	r20, r16
    1676:	0e 94 9d 0a 	call	0x153a	; 0x153a <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    167a:	c7 01       	movw	r24, r14
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	6a e0       	ldi	r22, 0x0A	; 10
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	0e 94 b7 23 	call	0x476e	; 0x476e <__divmodhi4>
    1686:	48 2f       	mov	r20, r24
    1688:	9e 01       	movw	r18, r28
    168a:	e8 01       	movw	r28, r16
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    168c:	e4 2e       	mov	r14, r20
    168e:	ff 24       	eor	r15, r15
    1690:	e7 fc       	sbrc	r14, 7
    1692:	f0 94       	com	r15
    1694:	80 91 02 05 	lds	r24, 0x0502
    1698:	90 91 03 05 	lds	r25, 0x0503
    169c:	e8 16       	cp	r14, r24
    169e:	f9 06       	cpc	r15, r25
    16a0:	09 f7       	brne	.-62     	; 0x1664 <planner_forward_pass+0x20>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    16a2:	c9 01       	movw	r24, r18
    16a4:	be 01       	movw	r22, r28
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	0e 94 9d 0a 	call	0x153a	; 0x153a <planner_forward_pass_kernel>
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	08 95       	ret

000016bc <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    16bc:	2f 92       	push	r2
    16be:	3f 92       	push	r3
    16c0:	4f 92       	push	r4
    16c2:	5f 92       	push	r5
    16c4:	6f 92       	push	r6
    16c6:	7f 92       	push	r7
    16c8:	8f 92       	push	r8
    16ca:	9f 92       	push	r9
    16cc:	af 92       	push	r10
    16ce:	bf 92       	push	r11
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	3b 01       	movw	r6, r22
    16de:	4c 01       	movw	r8, r24
    16e0:	19 01       	movw	r2, r18
    16e2:	2a 01       	movw	r4, r20
	st_synchronize();
    16e4:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    16e8:	c4 01       	movw	r24, r8
    16ea:	b3 01       	movw	r22, r6
    16ec:	20 91 74 06 	lds	r18, 0x0674
    16f0:	30 91 75 06 	lds	r19, 0x0675
    16f4:	40 91 76 06 	lds	r20, 0x0676
    16f8:	50 91 77 06 	lds	r21, 0x0677
    16fc:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1700:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    1704:	26 e0       	ldi	r18, 0x06	; 6
    1706:	82 2e       	mov	r8, r18
    1708:	25 e0       	ldi	r18, 0x05	; 5
    170a:	92 2e       	mov	r9, r18
    170c:	60 93 06 05 	sts	0x0506, r22
    1710:	70 93 07 05 	sts	0x0507, r23
    1714:	80 93 08 05 	sts	0x0508, r24
    1718:	90 93 09 05 	sts	0x0509, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    171c:	c2 01       	movw	r24, r4
    171e:	b1 01       	movw	r22, r2
    1720:	20 91 78 06 	lds	r18, 0x0678
    1724:	30 91 79 06 	lds	r19, 0x0679
    1728:	40 91 7a 06 	lds	r20, 0x067A
    172c:	50 91 7b 06 	lds	r21, 0x067B
    1730:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1734:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    1738:	f4 01       	movw	r30, r8
    173a:	34 96       	adiw	r30, 0x04	; 4
    173c:	60 93 0a 05 	sts	0x050A, r22
    1740:	71 83       	std	Z+1, r23	; 0x01
    1742:	82 83       	std	Z+2, r24	; 0x02
    1744:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1746:	c8 01       	movw	r24, r16
    1748:	b7 01       	movw	r22, r14
    174a:	20 91 7c 06 	lds	r18, 0x067C
    174e:	30 91 7d 06 	lds	r19, 0x067D
    1752:	40 91 7e 06 	lds	r20, 0x067E
    1756:	50 91 7f 06 	lds	r21, 0x067F
    175a:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    175e:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    1762:	f4 01       	movw	r30, r8
    1764:	38 96       	adiw	r30, 0x08	; 8
    1766:	60 93 0e 05 	sts	0x050E, r22
    176a:	71 83       	std	Z+1, r23	; 0x01
    176c:	82 83       	std	Z+2, r24	; 0x02
    176e:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1770:	c6 01       	movw	r24, r12
    1772:	b5 01       	movw	r22, r10
    1774:	20 91 80 06 	lds	r18, 0x0680
    1778:	30 91 81 06 	lds	r19, 0x0681
    177c:	40 91 82 06 	lds	r20, 0x0682
    1780:	50 91 83 06 	lds	r21, 0x0683
    1784:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1788:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    178c:	2c e0       	ldi	r18, 0x0C	; 12
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	82 0e       	add	r8, r18
    1792:	93 1e       	adc	r9, r19
    1794:	60 93 12 05 	sts	0x0512, r22
    1798:	f4 01       	movw	r30, r8
    179a:	71 83       	std	Z+1, r23	; 0x01
    179c:	82 83       	std	Z+2, r24	; 0x02
    179e:	93 83       	std	Z+3, r25	; 0x03
}
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	bf 90       	pop	r11
    17ae:	af 90       	pop	r10
    17b0:	9f 90       	pop	r9
    17b2:	8f 90       	pop	r8
    17b4:	7f 90       	pop	r7
    17b6:	6f 90       	pop	r6
    17b8:	5f 90       	pop	r5
    17ba:	4f 90       	pop	r4
    17bc:	3f 90       	pop	r3
    17be:	2f 90       	pop	r2
    17c0:	08 95       	ret

000017c2 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	80 91 16 05 	lds	r24, 0x0516
    17ce:	81 11       	cpse	r24, r1
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	20 97       	sbiw	r28, 0x00	; 0
    17d6:	09 f0       	breq	.+2      	; 0x17da <plan_set_acceleration_manager_enabled+0x18>
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	98 17       	cp	r25, r24
    17dc:	49 f0       	breq	.+18     	; 0x17f0 <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    17de:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    17e2:	10 92 16 05 	sts	0x0516, r1
    17e6:	cd 2b       	or	r28, r29
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <plan_set_acceleration_manager_enabled+0x2e>
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 16 05 	sts	0x0516, r24
  }
}
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    17f6:	10 92 03 05 	sts	0x0503, r1
    17fa:	10 92 02 05 	sts	0x0502, r1
  block_buffer_tail = 0;
    17fe:	10 92 05 05 	sts	0x0505, r1
    1802:	10 92 04 05 	sts	0x0504, r1
  plan_set_acceleration_manager_enabled(TRUE);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    180e:	80 e1       	ldi	r24, 0x10	; 16
    1810:	e6 e0       	ldi	r30, 0x06	; 6
    1812:	f5 e0       	ldi	r31, 0x05	; 5
    1814:	df 01       	movw	r26, r30
    1816:	1d 92       	st	X+, r1
    1818:	8a 95       	dec	r24
    181a:	e9 f7       	brne	.-6      	; 0x1816 <plan_init+0x20>
}
    181c:	08 95       	ret

0000181e <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    181e:	2f 92       	push	r2
    1820:	3f 92       	push	r3
    1822:	4f 92       	push	r4
    1824:	5f 92       	push	r5
    1826:	6f 92       	push	r6
    1828:	7f 92       	push	r7
    182a:	8f 92       	push	r8
    182c:	9f 92       	push	r9
    182e:	af 92       	push	r10
    1830:	bf 92       	push	r11
    1832:	cf 92       	push	r12
    1834:	df 92       	push	r13
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <planner_reverse_pass_kernel+0x26>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <planner_reverse_pass_kernel+0x28>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	8c 01       	movw	r16, r24
    184c:	7e 83       	std	Y+6, r23	; 0x06
    184e:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1850:	67 2b       	or	r22, r23
    1852:	09 f4       	brne	.+2      	; 0x1856 <planner_reverse_pass_kernel+0x38>
    1854:	07 c1       	rjmp	.+526    	; 0x1a64 <planner_reverse_pass_kernel+0x246>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1856:	41 15       	cp	r20, r1
    1858:	51 05       	cpc	r21, r1
    185a:	61 f0       	breq	.+24     	; 0x1874 <planner_reverse_pass_kernel+0x56>
    exit_factor = next->entry_factor;
    185c:	da 01       	movw	r26, r20
    185e:	d1 96       	adiw	r26, 0x31	; 49
    1860:	8d 91       	ld	r24, X+
    1862:	9d 91       	ld	r25, X+
    1864:	0d 90       	ld	r0, X+
    1866:	bc 91       	ld	r27, X
    1868:	a0 2d       	mov	r26, r0
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	ab 83       	std	Y+3, r26	; 0x03
    1870:	bc 83       	std	Y+4, r27	; 0x04
    1872:	08 c0       	rjmp	.+16     	; 0x1884 <planner_reverse_pass_kernel+0x66>
  } else {
    exit_factor = factor_for_safe_speed(current);
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <factor_for_safe_speed>
    187c:	69 83       	std	Y+1, r22	; 0x01
    187e:	7a 83       	std	Y+2, r23	; 0x02
    1880:	8b 83       	std	Y+3, r24	; 0x03
    1882:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1884:	01 15       	cp	r16, r1
    1886:	11 05       	cpc	r17, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <planner_reverse_pass_kernel+0x6e>
    188a:	e0 c0       	rjmp	.+448    	; 0x1a4c <planner_reverse_pass_kernel+0x22e>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    188c:	f8 01       	movw	r30, r16
    188e:	61 8d       	ldd	r22, Z+25	; 0x19
    1890:	72 8d       	ldd	r23, Z+26	; 0x1a
    1892:	83 8d       	ldd	r24, Z+27	; 0x1b
    1894:	94 8d       	ldd	r25, Z+28	; 0x1c
    1896:	ad 81       	ldd	r26, Y+5	; 0x05
    1898:	be 81       	ldd	r27, Y+6	; 0x06
    189a:	59 96       	adiw	r26, 0x19	; 25
    189c:	2d 91       	ld	r18, X+
    189e:	3d 91       	ld	r19, X+
    18a0:	4d 91       	ld	r20, X+
    18a2:	5c 91       	ld	r21, X
    18a4:	5c 97       	sbiw	r26, 0x1c	; 28
    18a6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subsf3>
    18aa:	9b 01       	movw	r18, r22
    18ac:	ac 01       	movw	r20, r24
    18ae:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    18b2:	1b 01       	movw	r2, r22
    18b4:	2c 01       	movw	r4, r24
    18b6:	f8 01       	movw	r30, r16
    18b8:	65 8d       	ldd	r22, Z+29	; 0x1d
    18ba:	76 8d       	ldd	r23, Z+30	; 0x1e
    18bc:	87 8d       	ldd	r24, Z+31	; 0x1f
    18be:	90 a1       	ldd	r25, Z+32	; 0x20
    18c0:	ad 81       	ldd	r26, Y+5	; 0x05
    18c2:	be 81       	ldd	r27, Y+6	; 0x06
    18c4:	5d 96       	adiw	r26, 0x1d	; 29
    18c6:	2d 91       	ld	r18, X+
    18c8:	3d 91       	ld	r19, X+
    18ca:	4d 91       	ld	r20, X+
    18cc:	5c 91       	ld	r21, X
    18ce:	90 97       	sbiw	r26, 0x20	; 32
    18d0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subsf3>
    18d4:	9b 01       	movw	r18, r22
    18d6:	ac 01       	movw	r20, r24
    18d8:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    18dc:	3b 01       	movw	r6, r22
    18de:	4c 01       	movw	r8, r24
    18e0:	f8 01       	movw	r30, r16
    18e2:	61 a1       	ldd	r22, Z+33	; 0x21
    18e4:	72 a1       	ldd	r23, Z+34	; 0x22
    18e6:	83 a1       	ldd	r24, Z+35	; 0x23
    18e8:	94 a1       	ldd	r25, Z+36	; 0x24
    18ea:	ad 81       	ldd	r26, Y+5	; 0x05
    18ec:	be 81       	ldd	r27, Y+6	; 0x06
    18ee:	91 96       	adiw	r26, 0x21	; 33
    18f0:	2d 91       	ld	r18, X+
    18f2:	3d 91       	ld	r19, X+
    18f4:	4d 91       	ld	r20, X+
    18f6:	5c 91       	ld	r21, X
    18f8:	94 97       	sbiw	r26, 0x24	; 36
    18fa:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subsf3>
    18fe:	9b 01       	movw	r18, r22
    1900:	ac 01       	movw	r20, r24
    1902:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1906:	5b 01       	movw	r10, r22
    1908:	6c 01       	movw	r12, r24
    190a:	f8 01       	movw	r30, r16
    190c:	65 a1       	ldd	r22, Z+37	; 0x25
    190e:	76 a1       	ldd	r23, Z+38	; 0x26
    1910:	87 a1       	ldd	r24, Z+39	; 0x27
    1912:	90 a5       	ldd	r25, Z+40	; 0x28
    1914:	ad 81       	ldd	r26, Y+5	; 0x05
    1916:	be 81       	ldd	r27, Y+6	; 0x06
    1918:	95 96       	adiw	r26, 0x25	; 37
    191a:	2d 91       	ld	r18, X+
    191c:	3d 91       	ld	r19, X+
    191e:	4d 91       	ld	r20, X+
    1920:	5c 91       	ld	r21, X
    1922:	98 97       	sbiw	r26, 0x28	; 40
    1924:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subsf3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1930:	7b 01       	movw	r14, r22
    1932:	8c 01       	movw	r16, r24
    1934:	c2 01       	movw	r24, r4
    1936:	b1 01       	movw	r22, r2
    1938:	a4 01       	movw	r20, r8
    193a:	93 01       	movw	r18, r6
    193c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    1940:	a6 01       	movw	r20, r12
    1942:	95 01       	movw	r18, r10
    1944:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    1948:	a8 01       	movw	r20, r16
    194a:	97 01       	movw	r18, r14
    194c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    1950:	0e 94 49 23 	call	0x4692	; 0x4692 <sqrt>
    1954:	5b 01       	movw	r10, r22
    1956:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1958:	e0 90 96 06 	lds	r14, 0x0696
    195c:	f0 90 97 06 	lds	r15, 0x0697
    1960:	00 91 98 06 	lds	r16, 0x0698
    1964:	10 91 99 06 	lds	r17, 0x0699
    1968:	a8 01       	movw	r20, r16
    196a:	97 01       	movw	r18, r14
    196c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__gesf2>
    1970:	18 16       	cp	r1, r24
    1972:	5c f0       	brlt	.+22     	; 0x198a <planner_reverse_pass_kernel+0x16c>
    1974:	0f 2e       	mov	r0, r31
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	6f 2e       	mov	r6, r31
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	7f 2e       	mov	r7, r31
    197e:	f0 e8       	ldi	r31, 0x80	; 128
    1980:	8f 2e       	mov	r8, r31
    1982:	ff e3       	ldi	r31, 0x3F	; 63
    1984:	9f 2e       	mov	r9, r31
    1986:	f0 2d       	mov	r31, r0
    1988:	08 c0       	rjmp	.+16     	; 0x199a <planner_reverse_pass_kernel+0x17c>
      entry_factor = (settings.max_jerk/jerk);
    198a:	c8 01       	movw	r24, r16
    198c:	b7 01       	movw	r22, r14
    198e:	a6 01       	movw	r20, r12
    1990:	95 01       	movw	r18, r10
    1992:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1996:	3b 01       	movw	r6, r22
    1998:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    199a:	c4 01       	movw	r24, r8
    199c:	b3 01       	movw	r22, r6
    199e:	29 81       	ldd	r18, Y+1	; 0x01
    19a0:	3a 81       	ldd	r19, Y+2	; 0x02
    19a2:	4b 81       	ldd	r20, Y+3	; 0x03
    19a4:	5c 81       	ldd	r21, Y+4	; 0x04
    19a6:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__gesf2>
    19aa:	18 16       	cp	r1, r24
    19ac:	0c f0       	brlt	.+2      	; 0x19b0 <planner_reverse_pass_kernel+0x192>
    19ae:	54 c0       	rjmp	.+168    	; 0x1a58 <planner_reverse_pass_kernel+0x23a>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    19b0:	ed 81       	ldd	r30, Y+5	; 0x05
    19b2:	fe 81       	ldd	r31, Y+6	; 0x06
    19b4:	a1 a4       	ldd	r10, Z+41	; 0x29
    19b6:	b2 a4       	ldd	r11, Z+42	; 0x2a
    19b8:	c3 a4       	ldd	r12, Z+43	; 0x2b
    19ba:	d4 a4       	ldd	r13, Z+44	; 0x2c
    19bc:	c6 01       	movw	r24, r12
    19be:	b5 01       	movw	r22, r10
    19c0:	29 81       	ldd	r18, Y+1	; 0x01
    19c2:	3a 81       	ldd	r19, Y+2	; 0x02
    19c4:	4b 81       	ldd	r20, Y+3	; 0x03
    19c6:	5c 81       	ldd	r21, Y+4	; 0x04
    19c8:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    19cc:	9b 01       	movw	r18, r22
    19ce:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    19d0:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    19d4:	7b 01       	movw	r14, r22
    19d6:	8c 01       	movw	r16, r24
    19d8:	20 91 92 06 	lds	r18, 0x0692
    19dc:	30 91 93 06 	lds	r19, 0x0693
    19e0:	40 91 94 06 	lds	r20, 0x0694
    19e4:	50 91 95 06 	lds	r21, 0x0695
    19e8:	50 58       	subi	r21, 0x80	; 128
    19ea:	ca 01       	movw	r24, r20
    19ec:	b9 01       	movw	r22, r18
    19ee:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e7       	ldi	r20, 0x70	; 112
    19f8:	52 e4       	ldi	r21, 0x42	; 66
    19fa:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e7       	ldi	r20, 0x70	; 112
    1a04:	52 ec       	ldi	r21, 0xC2	; 194
    1a06:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1a0a:	ad 81       	ldd	r26, Y+5	; 0x05
    1a0c:	be 81       	ldd	r27, Y+6	; 0x06
    1a0e:	9d 96       	adiw	r26, 0x2d	; 45
    1a10:	2d 91       	ld	r18, X+
    1a12:	3d 91       	ld	r19, X+
    1a14:	4d 91       	ld	r20, X+
    1a16:	5c 91       	ld	r21, X
    1a18:	d0 97       	sbiw	r26, 0x30	; 48
    1a1a:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1a1e:	9b 01       	movw	r18, r22
    1a20:	ac 01       	movw	r20, r24
    1a22:	c8 01       	movw	r24, r16
    1a24:	b7 01       	movw	r22, r14
    1a26:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    1a2a:	0e 94 49 23 	call	0x4692	; 0x4692 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1a2e:	a6 01       	movw	r20, r12
    1a30:	95 01       	movw	r18, r10
    1a32:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1a36:	7b 01       	movw	r14, r22
    1a38:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1a3a:	a4 01       	movw	r20, r8
    1a3c:	93 01       	movw	r18, r6
    1a3e:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
    1a42:	88 23       	and	r24, r24
    1a44:	4c f4       	brge	.+18     	; 0x1a58 <planner_reverse_pass_kernel+0x23a>
    1a46:	37 01       	movw	r6, r14
    1a48:	48 01       	movw	r8, r16
    1a4a:	06 c0       	rjmp	.+12     	; 0x1a58 <planner_reverse_pass_kernel+0x23a>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <factor_for_safe_speed>
    1a54:	3b 01       	movw	r6, r22
    1a56:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1a58:	ed 81       	ldd	r30, Y+5	; 0x05
    1a5a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a5c:	61 aa       	std	Z+49, r6	; 0x31
    1a5e:	72 aa       	std	Z+50, r7	; 0x32
    1a60:	83 aa       	std	Z+51, r8	; 0x33
    1a62:	94 aa       	std	Z+52, r9	; 0x34
}
    1a64:	26 96       	adiw	r28, 0x06	; 6
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	cf 90       	pop	r12
    1a80:	bf 90       	pop	r11
    1a82:	af 90       	pop	r10
    1a84:	9f 90       	pop	r9
    1a86:	8f 90       	pop	r8
    1a88:	7f 90       	pop	r7
    1a8a:	6f 90       	pop	r6
    1a8c:	5f 90       	pop	r5
    1a8e:	4f 90       	pop	r4
    1a90:	3f 90       	pop	r3
    1a92:	2f 90       	pop	r2
    1a94:	08 95       	ret

00001a96 <planner_reverse_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1a96:	ff 92       	push	r15
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1aa0:	80 91 02 05 	lds	r24, 0x0502
    1aa4:	90 91 03 05 	lds	r25, 0x0503
    1aa8:	f8 2e       	mov	r15, r24
    1aaa:	c0 e0       	ldi	r28, 0x00	; 0
    1aac:	d0 e0       	ldi	r29, 0x00	; 0
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	12 c0       	rjmp	.+36     	; 0x1ad8 <planner_reverse_pass+0x42>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    1ab4:	fa 94       	dec	r15
    if(block_index < 0) {
    1ab6:	f7 fe       	sbrs	r15, 7
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <planner_reverse_pass+0x28>
    1aba:	39 e0       	ldi	r19, 0x09	; 9
    1abc:	f3 2e       	mov	r15, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1abe:	8f 2d       	mov	r24, r15
    1ac0:	99 e4       	ldi	r25, 0x49	; 73
    1ac2:	89 02       	muls	r24, r25
    1ac4:	80 01       	movw	r16, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	08 5d       	subi	r16, 0xD8	; 216
    1aca:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1acc:	c8 01       	movw	r24, r16
    1ace:	be 01       	movw	r22, r28
    1ad0:	0e 94 0f 0c 	call	0x181e	; 0x181e <planner_reverse_pass_kernel>
    1ad4:	ae 01       	movw	r20, r28
    1ad6:	e8 01       	movw	r28, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1ad8:	20 91 04 05 	lds	r18, 0x0504
    1adc:	30 91 05 05 	lds	r19, 0x0505
    1ae0:	8f 2d       	mov	r24, r15
    1ae2:	99 27       	eor	r25, r25
    1ae4:	87 fd       	sbrc	r24, 7
    1ae6:	90 95       	com	r25
    1ae8:	82 17       	cp	r24, r18
    1aea:	93 07       	cpc	r25, r19
    1aec:	19 f7       	brne	.-58     	; 0x1ab4 <planner_reverse_pass+0x1e>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	be 01       	movw	r22, r28
    1af4:	0e 94 0f 0c 	call	0x181e	; 0x181e <planner_reverse_pass_kernel>
}
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	08 95       	ret

00001b04 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1b04:	2f 92       	push	r2
    1b06:	3f 92       	push	r3
    1b08:	4f 92       	push	r4
    1b0a:	5f 92       	push	r5
    1b0c:	6f 92       	push	r6
    1b0e:	7f 92       	push	r7
    1b10:	8f 92       	push	r8
    1b12:	9f 92       	push	r9
    1b14:	af 92       	push	r10
    1b16:	bf 92       	push	r11
    1b18:	cf 92       	push	r12
    1b1a:	df 92       	push	r13
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	62 97       	sbiw	r28, 0x12	; 18
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	9a 8b       	std	Y+18, r25	; 0x12
    1b3a:	89 8b       	std	Y+17, r24	; 0x11
    1b3c:	6a 01       	movw	r12, r20
    1b3e:	7b 01       	movw	r14, r22
    1b40:	18 01       	movw	r2, r16
    1b42:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1b44:	fc 01       	movw	r30, r24
    1b46:	65 89       	ldd	r22, Z+21	; 0x15
    1b48:	76 89       	ldd	r23, Z+22	; 0x16
    1b4a:	87 89       	ldd	r24, Z+23	; 0x17
    1b4c:	90 8d       	ldd	r25, Z+24	; 0x18
    1b4e:	0e 94 2a 21 	call	0x4254	; 0x4254 <__floatunsisf>
    1b52:	3b 01       	movw	r6, r22
    1b54:	4c 01       	movw	r8, r24
    1b56:	a7 01       	movw	r20, r14
    1b58:	96 01       	movw	r18, r12
    1b5a:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1b5e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <ceil>
    1b62:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
    1b66:	7b 01       	movw	r14, r22
    1b68:	8c 01       	movw	r16, r24
    1b6a:	e9 89       	ldd	r30, Y+17	; 0x11
    1b6c:	fa 89       	ldd	r31, Y+18	; 0x12
    1b6e:	65 ab       	std	Z+53, r22	; 0x35
    1b70:	76 ab       	std	Z+54, r23	; 0x36
    1b72:	87 ab       	std	Z+55, r24	; 0x37
    1b74:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1b76:	c4 01       	movw	r24, r8
    1b78:	b3 01       	movw	r22, r6
    1b7a:	a2 01       	movw	r20, r4
    1b7c:	91 01       	movw	r18, r2
    1b7e:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1b82:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <ceil>
    1b86:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
    1b8a:	1b 01       	movw	r2, r22
    1b8c:	2c 01       	movw	r4, r24
    1b8e:	e9 89       	ldd	r30, Y+17	; 0x11
    1b90:	fa 89       	ldd	r31, Y+18	; 0x12
    1b92:	61 af       	std	Z+57, r22	; 0x39
    1b94:	72 af       	std	Z+58, r23	; 0x3a
    1b96:	83 af       	std	Z+59, r24	; 0x3b
    1b98:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1b9a:	fd 96       	adiw	r30, 0x3d	; 61
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	fd 97       	sbiw	r30, 0x3d	; 61
    1ba6:	fa 8b       	std	Y+18, r31	; 0x12
    1ba8:	e9 8b       	std	Y+17, r30	; 0x11
    1baa:	28 e2       	ldi	r18, 0x28	; 40
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	0e 94 98 23 	call	0x4730	; 0x4730 <__mulsi3>
    1bb6:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e7       	ldi	r20, 0x70	; 112
    1bc0:	52 e4       	ldi	r21, 0x42	; 66
    1bc2:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1bc6:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
    1bca:	5b 01       	movw	r10, r22
    1bcc:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1bce:	c8 01       	movw	r24, r16
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	0e 94 2a 21 	call	0x4254	; 0x4254 <__floatunsisf>
    1bd6:	7b 01       	movw	r14, r22
    1bd8:	8c 01       	movw	r16, r24
    1bda:	c6 01       	movw	r24, r12
    1bdc:	b5 01       	movw	r22, r10
    1bde:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    1be2:	6d 83       	std	Y+5, r22	; 0x05
    1be4:	7e 83       	std	Y+6, r23	; 0x06
    1be6:	8f 83       	std	Y+7, r24	; 0x07
    1be8:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1bea:	c4 01       	movw	r24, r8
    1bec:	b3 01       	movw	r22, r6
    1bee:	a4 01       	movw	r20, r8
    1bf0:	93 01       	movw	r18, r6
    1bf2:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1bf6:	3b 01       	movw	r6, r22
    1bf8:	4c 01       	movw	r8, r24
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	a8 01       	movw	r20, r16
    1c00:	97 01       	movw	r18, r14
    1c02:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1c06:	69 87       	std	Y+9, r22	; 0x09
    1c08:	7a 87       	std	Y+10, r23	; 0x0a
    1c0a:	8b 87       	std	Y+11, r24	; 0x0b
    1c0c:	9c 87       	std	Y+12, r25	; 0x0c
    1c0e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c10:	7e 81       	ldd	r23, Y+6	; 0x06
    1c12:	8f 81       	ldd	r24, Y+7	; 0x07
    1c14:	98 85       	ldd	r25, Y+8	; 0x08
    1c16:	9b 01       	movw	r18, r22
    1c18:	ac 01       	movw	r20, r24
    1c1a:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    1c1e:	6d 87       	std	Y+13, r22	; 0x0d
    1c20:	7e 87       	std	Y+14, r23	; 0x0e
    1c22:	8f 87       	std	Y+15, r24	; 0x0f
    1c24:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1c26:	c4 01       	movw	r24, r8
    1c28:	b3 01       	movw	r22, r6
    1c2a:	29 85       	ldd	r18, Y+9	; 0x09
    1c2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c2e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c30:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c32:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subsf3>
    1c36:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c38:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c3a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c3c:	58 89       	ldd	r21, Y+16	; 0x10
    1c3e:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1c42:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <ceil>
    1c46:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
    1c4a:	69 83       	std	Y+1, r22	; 0x01
    1c4c:	7a 83       	std	Y+2, r23	; 0x02
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
    1c50:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1c52:	c2 01       	movw	r24, r4
    1c54:	b1 01       	movw	r22, r2
    1c56:	0e 94 2a 21 	call	0x4254	; 0x4254 <__floatunsisf>
    1c5a:	9b 01       	movw	r18, r22
    1c5c:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1c5e:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1c62:	1b 01       	movw	r2, r22
    1c64:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1c66:	a4 01       	movw	r20, r8
    1c68:	93 01       	movw	r18, r6
    1c6a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subsf3>
    1c6e:	7b 01       	movw	r14, r22
    1c70:	8c 01       	movw	r16, r24
    1c72:	d0 94       	com	r13
    1c74:	c0 94       	com	r12
    1c76:	b0 94       	com	r11
    1c78:	a0 94       	com	r10
    1c7a:	a1 1c       	adc	r10, r1
    1c7c:	b1 1c       	adc	r11, r1
    1c7e:	c1 1c       	adc	r12, r1
    1c80:	d1 1c       	adc	r13, r1
    1c82:	c6 01       	movw	r24, r12
    1c84:	b5 01       	movw	r22, r10
    1c86:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    1c92:	9b 01       	movw	r18, r22
    1c94:	ac 01       	movw	r20, r24
    1c96:	c8 01       	movw	r24, r16
    1c98:	b7 01       	movw	r22, r14
    1c9a:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1c9e:	0e 94 67 21 	call	0x42ce	; 0x42ce <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1ca2:	e9 89       	ldd	r30, Y+17	; 0x11
    1ca4:	fa 89       	ldd	r31, Y+18	; 0x12
    1ca6:	a1 88       	ldd	r10, Z+17	; 0x11
    1ca8:	b2 88       	ldd	r11, Z+18	; 0x12
    1caa:	c3 88       	ldd	r12, Z+19	; 0x13
    1cac:	d4 88       	ldd	r13, Z+20	; 0x14
    1cae:	86 01       	movw	r16, r12
    1cb0:	75 01       	movw	r14, r10
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb8:	5c 81       	ldd	r21, Y+4	; 0x04
    1cba:	e2 1a       	sub	r14, r18
    1cbc:	f3 0a       	sbc	r15, r19
    1cbe:	04 0b       	sbc	r16, r20
    1cc0:	15 0b       	sbc	r17, r21
    1cc2:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
    1cc6:	a8 01       	movw	r20, r16
    1cc8:	97 01       	movw	r18, r14
    1cca:	26 1b       	sub	r18, r22
    1ccc:	37 0b       	sbc	r19, r23
    1cce:	48 0b       	sbc	r20, r24
    1cd0:	59 0b       	sbc	r21, r25
    1cd2:	da 01       	movw	r26, r20
    1cd4:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1cd6:	57 ff       	sbrs	r21, 7
    1cd8:	34 c0       	rjmp	.+104    	; 0x1d42 <calculate_trapezoid_for_block+0x23e>
    accelerate_steps = ceil(
    1cda:	c6 01       	movw	r24, r12
    1cdc:	b5 01       	movw	r22, r10
    1cde:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    1ce2:	9b 01       	movw	r18, r22
    1ce4:	ac 01       	movw	r20, r24
    1ce6:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ce8:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cec:	98 89       	ldd	r25, Y+16	; 0x10
    1cee:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1cf2:	29 85       	ldd	r18, Y+9	; 0x09
    1cf4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cf6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cf8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cfa:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subsf3>
    1cfe:	a2 01       	movw	r20, r4
    1d00:	91 01       	movw	r18, r2
    1d02:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    1d06:	7b 01       	movw	r14, r22
    1d08:	8c 01       	movw	r16, r24
    1d0a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d0c:	7e 81       	ldd	r23, Y+6	; 0x06
    1d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d10:	98 85       	ldd	r25, Y+8	; 0x08
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	50 e4       	ldi	r21, 0x40	; 64
    1d1a:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1d1e:	9b 01       	movw	r18, r22
    1d20:	ac 01       	movw	r20, r24
    1d22:	c8 01       	movw	r24, r16
    1d24:	b7 01       	movw	r22, r14
    1d26:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    1d2a:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <ceil>
    1d2e:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
    1d32:	69 83       	std	Y+1, r22	; 0x01
    1d34:	7a 83       	std	Y+2, r23	; 0x02
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e0       	ldi	r26, 0x00	; 0
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1d42:	49 89       	ldd	r20, Y+17	; 0x11
    1d44:	5a 89       	ldd	r21, Y+18	; 0x12
    1d46:	4f 5b       	subi	r20, 0xBF	; 191
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	fa 01       	movw	r30, r20
    1d4c:	29 81       	ldd	r18, Y+1	; 0x01
    1d4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d50:	4b 81       	ldd	r20, Y+3	; 0x03
    1d52:	5c 81       	ldd	r21, Y+4	; 0x04
    1d54:	21 93       	st	Z+, r18
    1d56:	31 93       	st	Z+, r19
    1d58:	41 93       	st	Z+, r20
    1d5a:	51 93       	st	Z+, r21
    1d5c:	fa 8b       	std	Y+18, r31	; 0x12
    1d5e:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1d60:	82 0f       	add	r24, r18
    1d62:	93 1f       	adc	r25, r19
    1d64:	a4 1f       	adc	r26, r20
    1d66:	b5 1f       	adc	r27, r21
    1d68:	80 83       	st	Z, r24
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	a2 83       	std	Z+2, r26	; 0x02
    1d6e:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1d70:	62 96       	adiw	r28, 0x12	; 18
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	ff 90       	pop	r15
    1d86:	ef 90       	pop	r14
    1d88:	df 90       	pop	r13
    1d8a:	cf 90       	pop	r12
    1d8c:	bf 90       	pop	r11
    1d8e:	af 90       	pop	r10
    1d90:	9f 90       	pop	r9
    1d92:	8f 90       	pop	r8
    1d94:	7f 90       	pop	r7
    1d96:	6f 90       	pop	r6
    1d98:	5f 90       	pop	r5
    1d9a:	4f 90       	pop	r4
    1d9c:	3f 90       	pop	r3
    1d9e:	2f 90       	pop	r2
    1da0:	08 95       	ret

00001da2 <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1db2:	80 91 04 05 	lds	r24, 0x0504
    1db6:	90 91 05 05 	lds	r25, 0x0505
    1dba:	28 2f       	mov	r18, r24
    1dbc:	c0 e0       	ldi	r28, 0x00	; 0
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
    1dc0:	1e c0       	rjmp	.+60     	; 0x1dfe <planner_recalculate_trapezoids+0x5c>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    1dc2:	89 e4       	ldi	r24, 0x49	; 73
    1dc4:	28 02       	muls	r18, r24
    1dc6:	70 01       	movw	r14, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	e8 e2       	ldi	r30, 0x28	; 40
    1dcc:	f2 e0       	ldi	r31, 0x02	; 2
    1dce:	ee 0e       	add	r14, r30
    1dd0:	ff 1e       	adc	r15, r31
    if (current) {
    1dd2:	20 97       	sbiw	r28, 0x00	; 0
    1dd4:	61 f0       	breq	.+24     	; 0x1dee <planner_recalculate_trapezoids+0x4c>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1dd6:	49 a9       	ldd	r20, Y+49	; 0x31
    1dd8:	5a a9       	ldd	r21, Y+50	; 0x32
    1dda:	6b a9       	ldd	r22, Y+51	; 0x33
    1ddc:	7c a9       	ldd	r23, Y+52	; 0x34
    1dde:	f7 01       	movw	r30, r14
    1de0:	01 a9       	ldd	r16, Z+49	; 0x31
    1de2:	12 a9       	ldd	r17, Z+50	; 0x32
    1de4:	23 a9       	ldd	r18, Z+51	; 0x33
    1de6:	34 a9       	ldd	r19, Z+52	; 0x34
    1de8:	ce 01       	movw	r24, r28
    1dea:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1dee:	c6 01       	movw	r24, r12
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	6a e0       	ldi	r22, 0x0A	; 10
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	0e 94 b7 23 	call	0x476e	; 0x476e <__divmodhi4>
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	e7 01       	movw	r28, r14
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1dfe:	c2 2e       	mov	r12, r18
    1e00:	dd 24       	eor	r13, r13
    1e02:	c7 fc       	sbrc	r12, 7
    1e04:	d0 94       	com	r13
    1e06:	80 91 02 05 	lds	r24, 0x0502
    1e0a:	90 91 03 05 	lds	r25, 0x0503
    1e0e:	c8 16       	cp	r12, r24
    1e10:	d9 06       	cpc	r13, r25
    1e12:	b9 f6       	brne	.-82     	; 0x1dc2 <planner_recalculate_trapezoids+0x20>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1e14:	ce 01       	movw	r24, r28
    1e16:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <factor_for_safe_speed>
    1e1a:	8b 01       	movw	r16, r22
    1e1c:	9c 01       	movw	r18, r24
    1e1e:	49 a9       	ldd	r20, Y+49	; 0x31
    1e20:	5a a9       	ldd	r21, Y+50	; 0x32
    1e22:	6b a9       	ldd	r22, Y+51	; 0x33
    1e24:	7c a9       	ldd	r23, Y+52	; 0x34
    1e26:	ce 01       	movw	r24, r28
    1e28:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <calculate_trapezoid_for_block>
}
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	08 95       	ret

00001e3e <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    1e3e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <planner_reverse_pass>
  planner_forward_pass();
    1e42:	0e 94 22 0b 	call	0x1644	; 0x1644 <planner_forward_pass>
  planner_recalculate_trapezoids();
    1e46:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <planner_recalculate_trapezoids>
}
    1e4a:	08 95       	ret

00001e4c <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    1e4c:	2f 92       	push	r2
    1e4e:	3f 92       	push	r3
    1e50:	4f 92       	push	r4
    1e52:	5f 92       	push	r5
    1e54:	6f 92       	push	r6
    1e56:	7f 92       	push	r7
    1e58:	8f 92       	push	r8
    1e5a:	9f 92       	push	r9
    1e5c:	af 92       	push	r10
    1e5e:	bf 92       	push	r11
    1e60:	cf 92       	push	r12
    1e62:	df 92       	push	r13
    1e64:	ef 92       	push	r14
    1e66:	ff 92       	push	r15
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	e4 97       	sbiw	r28, 0x34	; 52
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	3b 01       	movw	r6, r22
    1e82:	4c 01       	movw	r8, r24
    1e84:	2f a3       	std	Y+39, r18	; 0x27
    1e86:	38 a7       	std	Y+40, r19	; 0x28
    1e88:	49 a7       	std	Y+41, r20	; 0x29
    1e8a:	5a a7       	std	Y+42, r21	; 0x2a
    1e8c:	eb a6       	std	Y+43, r14	; 0x2b
    1e8e:	fc a6       	std	Y+44, r15	; 0x2c
    1e90:	0d a7       	std	Y+45, r16	; 0x2d
    1e92:	1e a7       	std	Y+46, r17	; 0x2e
    1e94:	af a6       	std	Y+47, r10	; 0x2f
    1e96:	b8 aa       	std	Y+48, r11	; 0x30
    1e98:	c9 aa       	std	Y+49, r12	; 0x31
    1e9a:	da aa       	std	Y+50, r13	; 0x32
	printPgmString(PSTR("z = "));
	printFloat( z );
	printPgmString(PSTR("\r\n"));
#endif
  
  if( gHomed == FALSE ) 
    1e9c:	80 91 4a 05 	lds	r24, 0x054A
    1ea0:	88 23       	and	r24, r24
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <plan_buffer_line+0x5a>
    1ea4:	72 c3       	rjmp	.+1764   	; 0x258a <__stack+0x38b>
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1ea6:	c4 01       	movw	r24, r8
    1ea8:	b3 01       	movw	r22, r6
    1eaa:	20 91 74 06 	lds	r18, 0x0674
    1eae:	30 91 75 06 	lds	r19, 0x0675
    1eb2:	40 91 76 06 	lds	r20, 0x0676
    1eb6:	50 91 77 06 	lds	r21, 0x0677
    1eba:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1ebe:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    1ec2:	7b 01       	movw	r14, r22
    1ec4:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1ec6:	20 91 78 06 	lds	r18, 0x0678
    1eca:	30 91 79 06 	lds	r19, 0x0679
    1ece:	40 91 7a 06 	lds	r20, 0x067A
    1ed2:	50 91 7b 06 	lds	r21, 0x067B
    1ed6:	2b a3       	std	Y+35, r18	; 0x23
    1ed8:	3c a3       	std	Y+36, r19	; 0x24
    1eda:	4d a3       	std	Y+37, r20	; 0x25
    1edc:	5e a3       	std	Y+38, r21	; 0x26
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1ede:	20 90 7c 06 	lds	r2, 0x067C
    1ee2:	30 90 7d 06 	lds	r3, 0x067D
    1ee6:	40 90 7e 06 	lds	r4, 0x067E
    1eea:	50 90 7f 06 	lds	r5, 0x067F
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1eee:	a0 90 80 06 	lds	r10, 0x0680
    1ef2:	b0 90 81 06 	lds	r11, 0x0681
    1ef6:	c0 90 82 06 	lds	r12, 0x0682
    1efa:	d0 90 83 06 	lds	r13, 0x0683
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    1efe:	80 91 02 05 	lds	r24, 0x0502
    1f02:	90 91 03 05 	lds	r25, 0x0503
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	6a e0       	ldi	r22, 0x0A	; 10
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	0e 94 b7 23 	call	0x476e	; 0x476e <__divmodhi4>
    1f10:	8b ab       	std	Y+51, r24	; 0x33
    1f12:	9c ab       	std	Y+52, r25	; 0x34
    1f14:	07 c0       	rjmp	.+14     	; 0x1f24 <plan_buffer_line+0xd8>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    1f16:	83 b7       	in	r24, 0x33	; 51
    1f18:	81 60       	ori	r24, 0x01	; 1
    1f1a:	83 bf       	out	0x33, r24	; 51
    1f1c:	88 95       	sleep
    1f1e:	83 b7       	in	r24, 0x33	; 51
    1f20:	8e 7f       	andi	r24, 0xFE	; 254
    1f22:	83 bf       	out	0x33, r24	; 51
    1f24:	80 91 04 05 	lds	r24, 0x0504
    1f28:	90 91 05 05 	lds	r25, 0x0505
    1f2c:	4b a9       	ldd	r20, Y+51	; 0x33
    1f2e:	5c a9       	ldd	r21, Y+52	; 0x34
    1f30:	84 17       	cp	r24, r20
    1f32:	95 07       	cpc	r25, r21
    1f34:	81 f3       	breq	.-32     	; 0x1f16 <plan_buffer_line+0xca>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1f36:	20 91 02 05 	lds	r18, 0x0502
    1f3a:	30 91 03 05 	lds	r19, 0x0503
    1f3e:	89 e4       	ldi	r24, 0x49	; 73
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	28 9f       	mul	r18, r24
    1f44:	d0 01       	movw	r26, r0
    1f46:	29 9f       	mul	r18, r25
    1f48:	b0 0d       	add	r27, r0
    1f4a:	38 9f       	mul	r19, r24
    1f4c:	b0 0d       	add	r27, r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	a8 5d       	subi	r26, 0xD8	; 216
    1f52:	bd 4f       	sbci	r27, 0xFD	; 253
    1f54:	ba a3       	std	Y+34, r27	; 0x22
    1f56:	a9 a3       	std	Y+33, r26	; 0x21
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1f58:	80 91 06 05 	lds	r24, 0x0506
    1f5c:	90 91 07 05 	lds	r25, 0x0507
    1f60:	a0 91 08 05 	lds	r26, 0x0508
    1f64:	b0 91 09 05 	lds	r27, 0x0509
    1f68:	37 01       	movw	r6, r14
    1f6a:	48 01       	movw	r8, r16
    1f6c:	68 1a       	sub	r6, r24
    1f6e:	79 0a       	sbc	r7, r25
    1f70:	8a 0a       	sbc	r8, r26
    1f72:	9b 0a       	sbc	r9, r27
    1f74:	97 fe       	sbrs	r9, 7
    1f76:	08 c0       	rjmp	.+16     	; 0x1f88 <plan_buffer_line+0x13c>
    1f78:	90 94       	com	r9
    1f7a:	80 94       	com	r8
    1f7c:	70 94       	com	r7
    1f7e:	60 94       	com	r6
    1f80:	61 1c       	adc	r6, r1
    1f82:	71 1c       	adc	r7, r1
    1f84:	81 1c       	adc	r8, r1
    1f86:	91 1c       	adc	r9, r1
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1f88:	6f a5       	ldd	r22, Y+47	; 0x2f
    1f8a:	78 a9       	ldd	r23, Y+48	; 0x30
    1f8c:	89 a9       	ldd	r24, Y+49	; 0x31
    1f8e:	9a a9       	ldd	r25, Y+50	; 0x32
    1f90:	a6 01       	movw	r20, r12
    1f92:	95 01       	movw	r18, r10
    1f94:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1f98:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    1f9c:	6d 87       	std	Y+13, r22	; 0x0d
    1f9e:	7e 87       	std	Y+14, r23	; 0x0e
    1fa0:	8f 87       	std	Y+15, r24	; 0x0f
    1fa2:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1fa4:	6b a5       	ldd	r22, Y+43	; 0x2b
    1fa6:	7c a5       	ldd	r23, Y+44	; 0x2c
    1fa8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1faa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fac:	a2 01       	movw	r20, r4
    1fae:	91 01       	movw	r18, r2
    1fb0:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1fb4:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    1fb8:	69 87       	std	Y+9, r22	; 0x09
    1fba:	7a 87       	std	Y+10, r23	; 0x0a
    1fbc:	8b 87       	std	Y+11, r24	; 0x0b
    1fbe:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1fc0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc8:	2b a1       	ldd	r18, Y+35	; 0x23
    1fca:	3c a1       	ldd	r19, Y+36	; 0x24
    1fcc:	4d a1       	ldd	r20, Y+37	; 0x25
    1fce:	5e a1       	ldd	r21, Y+38	; 0x26
    1fd0:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    1fd4:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    1fd8:	6d 83       	std	Y+5, r22	; 0x05
    1fda:	7e 83       	std	Y+6, r23	; 0x06
    1fdc:	8f 83       	std	Y+7, r24	; 0x07
    1fde:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1fe0:	e9 82       	std	Y+1, r14	; 0x01
    1fe2:	fa 82       	std	Y+2, r15	; 0x02
    1fe4:	0b 83       	std	Y+3, r16	; 0x03
    1fe6:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1fe8:	e9 a1       	ldd	r30, Y+33	; 0x21
    1fea:	fa a1       	ldd	r31, Y+34	; 0x22
    1fec:	60 82       	st	Z, r6
    1fee:	71 82       	std	Z+1, r7	; 0x01
    1ff0:	82 82       	std	Z+2, r8	; 0x02
    1ff2:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    1ff4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ff6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ff8:	4f 81       	ldd	r20, Y+7	; 0x07
    1ffa:	58 85       	ldd	r21, Y+8	; 0x08
    1ffc:	80 91 0a 05 	lds	r24, 0x050A
    2000:	90 91 0b 05 	lds	r25, 0x050B
    2004:	a0 91 0c 05 	lds	r26, 0x050C
    2008:	b0 91 0d 05 	lds	r27, 0x050D
    200c:	28 1b       	sub	r18, r24
    200e:	39 0b       	sbc	r19, r25
    2010:	4a 0b       	sbc	r20, r26
    2012:	5b 0b       	sbc	r21, r27
    2014:	57 ff       	sbrs	r21, 7
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <plan_buffer_line+0x1da>
    2018:	50 95       	com	r21
    201a:	40 95       	com	r20
    201c:	30 95       	com	r19
    201e:	21 95       	neg	r18
    2020:	3f 4f       	sbci	r19, 0xFF	; 255
    2022:	4f 4f       	sbci	r20, 0xFF	; 255
    2024:	5f 4f       	sbci	r21, 0xFF	; 255
    2026:	a9 a1       	ldd	r26, Y+33	; 0x21
    2028:	ba a1       	ldd	r27, Y+34	; 0x22
    202a:	14 96       	adiw	r26, 0x04	; 4
    202c:	2d 93       	st	X+, r18
    202e:	3d 93       	st	X+, r19
    2030:	4d 93       	st	X+, r20
    2032:	5c 93       	st	X, r21
    2034:	17 97       	sbiw	r26, 0x07	; 7
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2036:	29 85       	ldd	r18, Y+9	; 0x09
    2038:	3a 85       	ldd	r19, Y+10	; 0x0a
    203a:	4b 85       	ldd	r20, Y+11	; 0x0b
    203c:	5c 85       	ldd	r21, Y+12	; 0x0c
    203e:	80 91 0e 05 	lds	r24, 0x050E
    2042:	90 91 0f 05 	lds	r25, 0x050F
    2046:	a0 91 10 05 	lds	r26, 0x0510
    204a:	b0 91 11 05 	lds	r27, 0x0511
    204e:	28 1b       	sub	r18, r24
    2050:	39 0b       	sbc	r19, r25
    2052:	4a 0b       	sbc	r20, r26
    2054:	5b 0b       	sbc	r21, r27
    2056:	57 ff       	sbrs	r21, 7
    2058:	07 c0       	rjmp	.+14     	; 0x2068 <plan_buffer_line+0x21c>
    205a:	50 95       	com	r21
    205c:	40 95       	com	r20
    205e:	30 95       	com	r19
    2060:	21 95       	neg	r18
    2062:	3f 4f       	sbci	r19, 0xFF	; 255
    2064:	4f 4f       	sbci	r20, 0xFF	; 255
    2066:	5f 4f       	sbci	r21, 0xFF	; 255
    2068:	e9 a1       	ldd	r30, Y+33	; 0x21
    206a:	fa a1       	ldd	r31, Y+34	; 0x22
    206c:	20 87       	std	Z+8, r18	; 0x08
    206e:	31 87       	std	Z+9, r19	; 0x09
    2070:	42 87       	std	Z+10, r20	; 0x0a
    2072:	53 87       	std	Z+11, r21	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    2074:	a0 90 12 05 	lds	r10, 0x0512
    2078:	b0 90 13 05 	lds	r11, 0x0513
    207c:	c0 90 14 05 	lds	r12, 0x0514
    2080:	d0 90 15 05 	lds	r13, 0x0515
    2084:	2d 85       	ldd	r18, Y+13	; 0x0d
    2086:	3e 85       	ldd	r19, Y+14	; 0x0e
    2088:	4f 85       	ldd	r20, Y+15	; 0x0f
    208a:	58 89       	ldd	r21, Y+16	; 0x10
    208c:	2a 19       	sub	r18, r10
    208e:	3b 09       	sbc	r19, r11
    2090:	4c 09       	sbc	r20, r12
    2092:	5d 09       	sbc	r21, r13
    2094:	57 ff       	sbrs	r21, 7
    2096:	07 c0       	rjmp	.+14     	; 0x20a6 <plan_buffer_line+0x25a>
    2098:	50 95       	com	r21
    209a:	40 95       	com	r20
    209c:	30 95       	com	r19
    209e:	21 95       	neg	r18
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	4f 4f       	sbci	r20, 0xFF	; 255
    20a4:	5f 4f       	sbci	r21, 0xFF	; 255
    20a6:	a9 a1       	ldd	r26, Y+33	; 0x21
    20a8:	ba a1       	ldd	r27, Y+34	; 0x22
    20aa:	1c 96       	adiw	r26, 0x0c	; 12
    20ac:	2d 93       	st	X+, r18
    20ae:	3d 93       	st	X+, r19
    20b0:	4d 93       	st	X+, r20
    20b2:	5c 93       	st	X, r21
    20b4:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    20b6:	18 96       	adiw	r26, 0x08	; 8
    20b8:	ed 90       	ld	r14, X+
    20ba:	fd 90       	ld	r15, X+
    20bc:	0d 91       	ld	r16, X+
    20be:	1c 91       	ld	r17, X
    20c0:	1b 97       	sbiw	r26, 0x0b	; 11
    20c2:	fd 01       	movw	r30, r26
    20c4:	84 81       	ldd	r24, Z+4	; 0x04
    20c6:	95 81       	ldd	r25, Z+5	; 0x05
    20c8:	a6 81       	ldd	r26, Z+6	; 0x06
    20ca:	b7 81       	ldd	r27, Z+7	; 0x07
    20cc:	8e 15       	cp	r24, r14
    20ce:	9f 05       	cpc	r25, r15
    20d0:	a0 07       	cpc	r26, r16
    20d2:	b1 07       	cpc	r27, r17
    20d4:	10 f4       	brcc	.+4      	; 0x20da <plan_buffer_line+0x28e>
    20d6:	d8 01       	movw	r26, r16
    20d8:	c7 01       	movw	r24, r14
    20da:	e9 a1       	ldd	r30, Y+33	; 0x21
    20dc:	fa a1       	ldd	r31, Y+34	; 0x22
    20de:	e0 80       	ld	r14, Z
    20e0:	f1 80       	ldd	r15, Z+1	; 0x01
    20e2:	02 81       	ldd	r16, Z+2	; 0x02
    20e4:	13 81       	ldd	r17, Z+3	; 0x03
    20e6:	8e 15       	cp	r24, r14
    20e8:	9f 05       	cpc	r25, r15
    20ea:	a0 07       	cpc	r26, r16
    20ec:	b1 07       	cpc	r27, r17
    20ee:	10 f4       	brcc	.+4      	; 0x20f4 <plan_buffer_line+0x2a8>
    20f0:	d8 01       	movw	r26, r16
    20f2:	c7 01       	movw	r24, r14
    20f4:	82 17       	cp	r24, r18
    20f6:	93 07       	cpc	r25, r19
    20f8:	a4 07       	cpc	r26, r20
    20fa:	b5 07       	cpc	r27, r21
    20fc:	10 f4       	brcc	.+4      	; 0x2102 <plan_buffer_line+0x2b6>
    20fe:	da 01       	movw	r26, r20
    2100:	c9 01       	movw	r24, r18
    2102:	e9 a1       	ldd	r30, Y+33	; 0x21
    2104:	fa a1       	ldd	r31, Y+34	; 0x22
    2106:	81 8b       	std	Z+17, r24	; 0x11
    2108:	92 8b       	std	Z+18, r25	; 0x12
    210a:	a3 8b       	std	Z+19, r26	; 0x13
    210c:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	a1 05       	cpc	r26, r1
    2112:	b1 05       	cpc	r27, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <plan_buffer_line+0x2cc>
    2116:	39 c2       	rjmp	.+1138   	; 0x258a <__stack+0x38b>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2118:	69 81       	ldd	r22, Y+1	; 0x01
    211a:	7a 81       	ldd	r23, Y+2	; 0x02
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	20 91 06 05 	lds	r18, 0x0506
    2124:	30 91 07 05 	lds	r19, 0x0507
    2128:	40 91 08 05 	lds	r20, 0x0508
    212c:	50 91 09 05 	lds	r21, 0x0509
    2130:	62 1b       	sub	r22, r18
    2132:	73 0b       	sbc	r23, r19
    2134:	84 0b       	sbc	r24, r20
    2136:	95 0b       	sbc	r25, r21
    2138:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    213c:	20 91 74 06 	lds	r18, 0x0674
    2140:	30 91 75 06 	lds	r19, 0x0675
    2144:	40 91 76 06 	lds	r20, 0x0676
    2148:	50 91 77 06 	lds	r21, 0x0677
    214c:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    2150:	6d 8f       	std	Y+29, r22	; 0x1d
    2152:	7e 8f       	std	Y+30, r23	; 0x1e
    2154:	8f 8f       	std	Y+31, r24	; 0x1f
    2156:	98 a3       	std	Y+32, r25	; 0x20
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    2158:	6d 81       	ldd	r22, Y+5	; 0x05
    215a:	7e 81       	ldd	r23, Y+6	; 0x06
    215c:	8f 81       	ldd	r24, Y+7	; 0x07
    215e:	98 85       	ldd	r25, Y+8	; 0x08
    2160:	20 91 0a 05 	lds	r18, 0x050A
    2164:	30 91 0b 05 	lds	r19, 0x050B
    2168:	40 91 0c 05 	lds	r20, 0x050C
    216c:	50 91 0d 05 	lds	r21, 0x050D
    2170:	62 1b       	sub	r22, r18
    2172:	73 0b       	sbc	r23, r19
    2174:	84 0b       	sbc	r24, r20
    2176:	95 0b       	sbc	r25, r21
    2178:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    217c:	20 91 78 06 	lds	r18, 0x0678
    2180:	30 91 79 06 	lds	r19, 0x0679
    2184:	40 91 7a 06 	lds	r20, 0x067A
    2188:	50 91 7b 06 	lds	r21, 0x067B
    218c:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    2190:	69 8f       	std	Y+25, r22	; 0x19
    2192:	7a 8f       	std	Y+26, r23	; 0x1a
    2194:	8b 8f       	std	Y+27, r24	; 0x1b
    2196:	9c 8f       	std	Y+28, r25	; 0x1c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    2198:	69 85       	ldd	r22, Y+9	; 0x09
    219a:	7a 85       	ldd	r23, Y+10	; 0x0a
    219c:	8b 85       	ldd	r24, Y+11	; 0x0b
    219e:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a0:	20 91 0e 05 	lds	r18, 0x050E
    21a4:	30 91 0f 05 	lds	r19, 0x050F
    21a8:	40 91 10 05 	lds	r20, 0x0510
    21ac:	50 91 11 05 	lds	r21, 0x0511
    21b0:	62 1b       	sub	r22, r18
    21b2:	73 0b       	sbc	r23, r19
    21b4:	84 0b       	sbc	r24, r20
    21b6:	95 0b       	sbc	r25, r21
    21b8:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    21bc:	20 91 7c 06 	lds	r18, 0x067C
    21c0:	30 91 7d 06 	lds	r19, 0x067D
    21c4:	40 91 7e 06 	lds	r20, 0x067E
    21c8:	50 91 7f 06 	lds	r21, 0x067F
    21cc:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    21d0:	6d 8b       	std	Y+21, r22	; 0x15
    21d2:	7e 8b       	std	Y+22, r23	; 0x16
    21d4:	8f 8b       	std	Y+23, r24	; 0x17
    21d6:	98 8f       	std	Y+24, r25	; 0x18
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    21d8:	6d 85       	ldd	r22, Y+13	; 0x0d
    21da:	7e 85       	ldd	r23, Y+14	; 0x0e
    21dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21de:	98 89       	ldd	r25, Y+16	; 0x10
    21e0:	6a 19       	sub	r22, r10
    21e2:	7b 09       	sbc	r23, r11
    21e4:	8c 09       	sbc	r24, r12
    21e6:	9d 09       	sbc	r25, r13
    21e8:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    21ec:	20 91 80 06 	lds	r18, 0x0680
    21f0:	30 91 81 06 	lds	r19, 0x0681
    21f4:	40 91 82 06 	lds	r20, 0x0682
    21f8:	50 91 83 06 	lds	r21, 0x0683
    21fc:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    2200:	69 8b       	std	Y+17, r22	; 0x11
    2202:	7a 8b       	std	Y+18, r23	; 0x12
    2204:	8b 8b       	std	Y+19, r24	; 0x13
    2206:	9c 8b       	std	Y+20, r25	; 0x14
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    2208:	6d 8d       	ldd	r22, Y+29	; 0x1d
    220a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    220c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    220e:	98 a1       	ldd	r25, Y+32	; 0x20
    2210:	0e 94 87 23 	call	0x470e	; 0x470e <square>
    2214:	3b 01       	movw	r6, r22
    2216:	4c 01       	movw	r8, r24
    2218:	69 8d       	ldd	r22, Y+25	; 0x19
    221a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2220:	0e 94 87 23 	call	0x470e	; 0x470e <square>
    2224:	7b 01       	movw	r14, r22
    2226:	8c 01       	movw	r16, r24
    2228:	6d 89       	ldd	r22, Y+21	; 0x15
    222a:	7e 89       	ldd	r23, Y+22	; 0x16
    222c:	8f 89       	ldd	r24, Y+23	; 0x17
    222e:	98 8d       	ldd	r25, Y+24	; 0x18
    2230:	0e 94 87 23 	call	0x470e	; 0x470e <square>
    2234:	5b 01       	movw	r10, r22
    2236:	6c 01       	movw	r12, r24
    2238:	69 89       	ldd	r22, Y+17	; 0x11
    223a:	7a 89       	ldd	r23, Y+18	; 0x12
    223c:	8b 89       	ldd	r24, Y+19	; 0x13
    223e:	9c 89       	ldd	r25, Y+20	; 0x14
    2240:	0e 94 87 23 	call	0x470e	; 0x470e <square>
    2244:	1b 01       	movw	r2, r22
    2246:	2c 01       	movw	r4, r24
    2248:	c4 01       	movw	r24, r8
    224a:	b3 01       	movw	r22, r6
    224c:	a8 01       	movw	r20, r16
    224e:	97 01       	movw	r18, r14
    2250:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    2254:	a6 01       	movw	r20, r12
    2256:	95 01       	movw	r18, r10
    2258:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    225c:	a2 01       	movw	r20, r4
    225e:	91 01       	movw	r18, r2
    2260:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__addsf3>
    2264:	0e 94 49 23 	call	0x4692	; 0x4692 <sqrt>
    2268:	9b 01       	movw	r18, r22
    226a:	ac 01       	movw	r20, r24
    226c:	a9 a1       	ldd	r26, Y+33	; 0x21
    226e:	ba a1       	ldd	r27, Y+34	; 0x22
    2270:	9d 96       	adiw	r26, 0x2d	; 45
    2272:	6d 93       	st	X+, r22
    2274:	7d 93       	st	X+, r23
    2276:	8d 93       	st	X+, r24
    2278:	9c 93       	st	X, r25
    227a:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    227c:	60 96       	adiw	r28, 0x10	; 16
    227e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2280:	9f ad       	ldd	r25, Y+63	; 0x3f
    2282:	60 97       	sbiw	r28, 0x10	; 16
    2284:	89 2b       	or	r24, r25
    2286:	89 f4       	brne	.+34     	; 0x22aa <__stack+0xab>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    2288:	ca 01       	movw	r24, r20
    228a:	b9 01       	movw	r22, r18
    228c:	2e 96       	adiw	r28, 0x0e	; 14
    228e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2290:	3d ad       	ldd	r19, Y+61	; 0x3d
    2292:	4e ad       	ldd	r20, Y+62	; 0x3e
    2294:	5f ad       	ldd	r21, Y+63	; 0x3f
    2296:	2e 97       	sbiw	r28, 0x0e	; 14
    2298:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	34 e2       	ldi	r19, 0x24	; 36
    22a0:	44 e7       	ldi	r20, 0x74	; 116
    22a2:	59 e4       	ldi	r21, 0x49	; 73
    22a4:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    22a8:	0c c0       	rjmp	.+24     	; 0x22c2 <__stack+0xc3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    22aa:	60 ec       	ldi	r22, 0xC0	; 192
    22ac:	71 ee       	ldi	r23, 0xE1	; 225
    22ae:	84 e6       	ldi	r24, 0x64	; 100
    22b0:	9c e4       	ldi	r25, 0x4C	; 76
    22b2:	2e 96       	adiw	r28, 0x0e	; 14
    22b4:	2c ad       	ldd	r18, Y+60	; 0x3c
    22b6:	3d ad       	ldd	r19, Y+61	; 0x3d
    22b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    22ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    22bc:	2e 97       	sbiw	r28, 0x0e	; 14
    22be:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    22c2:	0e 94 5f 22 	call	0x44be	; 0x44be <lround>
    22c6:	ac 01       	movw	r20, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	da 01       	movw	r26, r20
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    22d0:	0e 94 2a 21 	call	0x4254	; 0x4254 <__floatunsisf>
    22d4:	9b 01       	movw	r18, r22
    22d6:	ac 01       	movw	r20, r24
    22d8:	60 ec       	ldi	r22, 0xC0	; 192
    22da:	71 ee       	ldi	r23, 0xE1	; 225
    22dc:	84 e6       	ldi	r24, 0x64	; 100
    22de:	9c e4       	ldi	r25, 0x4C	; 76
    22e0:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    22e4:	7b 01       	movw	r14, r22
    22e6:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    22e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22ea:	7e 8d       	ldd	r23, Y+30	; 0x1e
    22ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ee:	98 a1       	ldd	r25, Y+32	; 0x20
    22f0:	a8 01       	movw	r20, r16
    22f2:	97 01       	movw	r18, r14
    22f4:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    22f8:	e9 a1       	ldd	r30, Y+33	; 0x21
    22fa:	fa a1       	ldd	r31, Y+34	; 0x22
    22fc:	61 8f       	std	Z+25, r22	; 0x19
    22fe:	72 8f       	std	Z+26, r23	; 0x1a
    2300:	83 8f       	std	Z+27, r24	; 0x1b
    2302:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_y = delta_y_mm * multiplier;
    2304:	69 8d       	ldd	r22, Y+25	; 0x19
    2306:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2308:	8b 8d       	ldd	r24, Y+27	; 0x1b
    230a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    230c:	a8 01       	movw	r20, r16
    230e:	97 01       	movw	r18, r14
    2310:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    2314:	a9 a1       	ldd	r26, Y+33	; 0x21
    2316:	ba a1       	ldd	r27, Y+34	; 0x22
    2318:	5d 96       	adiw	r26, 0x1d	; 29
    231a:	6d 93       	st	X+, r22
    231c:	7d 93       	st	X+, r23
    231e:	8d 93       	st	X+, r24
    2320:	9c 93       	st	X, r25
    2322:	90 97       	sbiw	r26, 0x20	; 32
  block->speed_z = delta_z_mm * multiplier;
    2324:	6d 89       	ldd	r22, Y+21	; 0x15
    2326:	7e 89       	ldd	r23, Y+22	; 0x16
    2328:	8f 89       	ldd	r24, Y+23	; 0x17
    232a:	98 8d       	ldd	r25, Y+24	; 0x18
    232c:	a8 01       	movw	r20, r16
    232e:	97 01       	movw	r18, r14
    2330:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    2334:	e9 a1       	ldd	r30, Y+33	; 0x21
    2336:	fa a1       	ldd	r31, Y+34	; 0x22
    2338:	61 a3       	std	Z+33, r22	; 0x21
    233a:	72 a3       	std	Z+34, r23	; 0x22
    233c:	83 a3       	std	Z+35, r24	; 0x23
    233e:	94 a3       	std	Z+36, r25	; 0x24
  block->speed_c = delta_c_mm * multiplier;
    2340:	69 89       	ldd	r22, Y+17	; 0x11
    2342:	7a 89       	ldd	r23, Y+18	; 0x12
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	a8 01       	movw	r20, r16
    234a:	97 01       	movw	r18, r14
    234c:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    2350:	a9 a1       	ldd	r26, Y+33	; 0x21
    2352:	ba a1       	ldd	r27, Y+34	; 0x22
    2354:	95 96       	adiw	r26, 0x25	; 37
    2356:	6d 93       	st	X+, r22
    2358:	7d 93       	st	X+, r23
    235a:	8d 93       	st	X+, r24
    235c:	9c 93       	st	X, r25
    235e:	98 97       	sbiw	r26, 0x28	; 40
  block->nominal_speed = block->millimeters * multiplier;
    2360:	9d 96       	adiw	r26, 0x2d	; 45
    2362:	6d 91       	ld	r22, X+
    2364:	7d 91       	ld	r23, X+
    2366:	8d 91       	ld	r24, X+
    2368:	9c 91       	ld	r25, X
    236a:	d0 97       	sbiw	r26, 0x30	; 48
    236c:	a8 01       	movw	r20, r16
    236e:	97 01       	movw	r18, r14
    2370:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    2374:	e9 a1       	ldd	r30, Y+33	; 0x21
    2376:	fa a1       	ldd	r31, Y+34	; 0x22
    2378:	61 a7       	std	Z+41, r22	; 0x29
    237a:	72 a7       	std	Z+42, r23	; 0x2a
    237c:	83 a7       	std	Z+43, r24	; 0x2b
    237e:	94 a7       	std	Z+44, r25	; 0x2c
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    2380:	61 89       	ldd	r22, Z+17	; 0x11
    2382:	72 89       	ldd	r23, Z+18	; 0x12
    2384:	83 89       	ldd	r24, Z+19	; 0x13
    2386:	94 89       	ldd	r25, Z+20	; 0x14
    2388:	0e 94 2c 21 	call	0x4258	; 0x4258 <__floatsisf>
    238c:	5b 01       	movw	r10, r22
    238e:	6c 01       	movw	r12, r24
    2390:	a8 01       	movw	r20, r16
    2392:	97 01       	movw	r18, r14
    2394:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    2398:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <ceil>
    239c:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
    23a0:	3b 01       	movw	r6, r22
    23a2:	4c 01       	movw	r8, r24
    23a4:	a9 a1       	ldd	r26, Y+33	; 0x21
    23a6:	ba a1       	ldd	r27, Y+34	; 0x22
    23a8:	55 96       	adiw	r26, 0x15	; 21
    23aa:	6d 93       	st	X+, r22
    23ac:	7d 93       	st	X+, r23
    23ae:	8d 93       	st	X+, r24
    23b0:	9c 93       	st	X, r25
    23b2:	58 97       	sbiw	r26, 0x18	; 24
  block->entry_factor = 0.0;
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e0       	ldi	r26, 0x00	; 0
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e9 a1       	ldd	r30, Y+33	; 0x21
    23be:	fa a1       	ldd	r31, Y+34	; 0x22
    23c0:	81 ab       	std	Z+49, r24	; 0x31
    23c2:	92 ab       	std	Z+50, r25	; 0x32
    23c4:	a3 ab       	std	Z+51, r26	; 0x33
    23c6:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    23c8:	60 91 92 06 	lds	r22, 0x0692
    23cc:	70 91 93 06 	lds	r23, 0x0693
    23d0:	80 91 94 06 	lds	r24, 0x0694
    23d4:	90 91 95 06 	lds	r25, 0x0695
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e7       	ldi	r20, 0x70	; 112
    23de:	52 e4       	ldi	r21, 0x42	; 66
    23e0:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	52 e4       	ldi	r21, 0x42	; 66
    23ec:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    23f0:	7b 01       	movw	r14, r22
    23f2:	8c 01       	movw	r16, r24
    23f4:	a9 a1       	ldd	r26, Y+33	; 0x21
    23f6:	ba a1       	ldd	r27, Y+34	; 0x22
    23f8:	9d 96       	adiw	r26, 0x2d	; 45
    23fa:	6d 91       	ld	r22, X+
    23fc:	7d 91       	ld	r23, X+
    23fe:	8d 91       	ld	r24, X+
    2400:	9c 91       	ld	r25, X
    2402:	d0 97       	sbiw	r26, 0x30	; 48
    2404:	a6 01       	movw	r20, r12
    2406:	95 01       	movw	r18, r10
    2408:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    240c:	9b 01       	movw	r18, r22
    240e:	ac 01       	movw	r20, r24
    2410:	c8 01       	movw	r24, r16
    2412:	b7 01       	movw	r22, r14
    2414:	0e 94 91 20 	call	0x4122	; 0x4122 <__divsf3>
    2418:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <ceil>
    241c:	09 a1       	ldd	r16, Y+33	; 0x21
    241e:	1a a1       	ldd	r17, Y+34	; 0x22
    2420:	03 5c       	subi	r16, 0xC3	; 195
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
    2428:	f8 01       	movw	r30, r16
    242a:	60 83       	st	Z, r22
    242c:	71 83       	std	Z+1, r23	; 0x01
    242e:	82 83       	std	Z+2, r24	; 0x02
    2430:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    2432:	80 91 16 05 	lds	r24, 0x0516
    2436:	88 23       	and	r24, r24
    2438:	69 f0       	breq	.+26     	; 0x2454 <__stack+0x255>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    243a:	89 a1       	ldd	r24, Y+33	; 0x21
    243c:	9a a1       	ldd	r25, Y+34	; 0x22
    243e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <factor_for_safe_speed>
    2442:	8b 01       	movw	r16, r22
    2444:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    2446:	89 a1       	ldd	r24, Y+33	; 0x21
    2448:	9a a1       	ldd	r25, Y+34	; 0x22
    244a:	b9 01       	movw	r22, r18
    244c:	a8 01       	movw	r20, r16
    244e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <calculate_trapezoid_for_block>
    2452:	26 c0       	rjmp	.+76     	; 0x24a0 <__stack+0x2a1>
  } else {
    block->initial_rate = block->nominal_rate;
    2454:	a9 a1       	ldd	r26, Y+33	; 0x21
    2456:	ba a1       	ldd	r27, Y+34	; 0x22
    2458:	d5 96       	adiw	r26, 0x35	; 53
    245a:	6d 92       	st	X+, r6
    245c:	7d 92       	st	X+, r7
    245e:	8d 92       	st	X+, r8
    2460:	9c 92       	st	X, r9
    2462:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    2464:	fd 01       	movw	r30, r26
    2466:	61 ae       	std	Z+57, r6	; 0x39
    2468:	72 ae       	std	Z+58, r7	; 0x3a
    246a:	83 ae       	std	Z+59, r8	; 0x3b
    246c:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    246e:	ef 5b       	subi	r30, 0xBF	; 191
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	10 82       	st	Z, r1
    2474:	11 82       	std	Z+1, r1	; 0x01
    2476:	12 82       	std	Z+2, r1	; 0x02
    2478:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    247a:	9d 01       	movw	r18, r26
    247c:	2b 5b       	subi	r18, 0xBB	; 187
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
    2480:	fd 01       	movw	r30, r26
    2482:	81 89       	ldd	r24, Z+17	; 0x11
    2484:	92 89       	ldd	r25, Z+18	; 0x12
    2486:	a3 89       	ldd	r26, Z+19	; 0x13
    2488:	b4 89       	ldd	r27, Z+20	; 0x14
    248a:	f9 01       	movw	r30, r18
    248c:	80 83       	st	Z, r24
    248e:	91 83       	std	Z+1, r25	; 0x01
    2490:	a2 83       	std	Z+2, r26	; 0x02
    2492:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    2494:	d8 01       	movw	r26, r16
    2496:	1d 92       	st	X+, r1
    2498:	1d 92       	st	X+, r1
    249a:	1d 92       	st	X+, r1
    249c:	1c 92       	st	X, r1
    249e:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    24a0:	e9 a1       	ldd	r30, Y+33	; 0x21
    24a2:	fa a1       	ldd	r31, Y+34	; 0x22
    24a4:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    24a6:	29 81       	ldd	r18, Y+1	; 0x01
    24a8:	3a 81       	ldd	r19, Y+2	; 0x02
    24aa:	4b 81       	ldd	r20, Y+3	; 0x03
    24ac:	5c 81       	ldd	r21, Y+4	; 0x04
    24ae:	80 91 06 05 	lds	r24, 0x0506
    24b2:	90 91 07 05 	lds	r25, 0x0507
    24b6:	a0 91 08 05 	lds	r26, 0x0508
    24ba:	b0 91 09 05 	lds	r27, 0x0509
    24be:	28 17       	cp	r18, r24
    24c0:	39 07       	cpc	r19, r25
    24c2:	4a 07       	cpc	r20, r26
    24c4:	5b 07       	cpc	r21, r27
    24c6:	14 f4       	brge	.+4      	; 0x24cc <__stack+0x2cd>
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    24cc:	2d 81       	ldd	r18, Y+5	; 0x05
    24ce:	3e 81       	ldd	r19, Y+6	; 0x06
    24d0:	4f 81       	ldd	r20, Y+7	; 0x07
    24d2:	58 85       	ldd	r21, Y+8	; 0x08
    24d4:	80 91 0a 05 	lds	r24, 0x050A
    24d8:	90 91 0b 05 	lds	r25, 0x050B
    24dc:	a0 91 0c 05 	lds	r26, 0x050C
    24e0:	b0 91 0d 05 	lds	r27, 0x050D
    24e4:	28 17       	cp	r18, r24
    24e6:	39 07       	cpc	r19, r25
    24e8:	4a 07       	cpc	r20, r26
    24ea:	5b 07       	cpc	r21, r27
    24ec:	44 f4       	brge	.+16     	; 0x24fe <__stack+0x2ff>
    24ee:	a9 a1       	ldd	r26, Y+33	; 0x21
    24f0:	ba a1       	ldd	r27, Y+34	; 0x22
    24f2:	50 96       	adiw	r26, 0x10	; 16
    24f4:	8c 91       	ld	r24, X
    24f6:	50 97       	sbiw	r26, 0x10	; 16
    24f8:	88 60       	ori	r24, 0x08	; 8
    24fa:	50 96       	adiw	r26, 0x10	; 16
    24fc:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    24fe:	29 85       	ldd	r18, Y+9	; 0x09
    2500:	3a 85       	ldd	r19, Y+10	; 0x0a
    2502:	4b 85       	ldd	r20, Y+11	; 0x0b
    2504:	5c 85       	ldd	r21, Y+12	; 0x0c
    2506:	80 91 0e 05 	lds	r24, 0x050E
    250a:	90 91 0f 05 	lds	r25, 0x050F
    250e:	a0 91 10 05 	lds	r26, 0x0510
    2512:	b0 91 11 05 	lds	r27, 0x0511
    2516:	28 17       	cp	r18, r24
    2518:	39 07       	cpc	r19, r25
    251a:	4a 07       	cpc	r20, r26
    251c:	5b 07       	cpc	r21, r27
    251e:	2c f4       	brge	.+10     	; 0x252a <__stack+0x32b>
    2520:	e9 a1       	ldd	r30, Y+33	; 0x21
    2522:	fa a1       	ldd	r31, Y+34	; 0x22
    2524:	80 89       	ldd	r24, Z+16	; 0x10
    2526:	80 64       	ori	r24, 0x40	; 64
    2528:	80 8b       	std	Z+16, r24	; 0x10
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    252a:	2d 85       	ldd	r18, Y+13	; 0x0d
    252c:	3e 85       	ldd	r19, Y+14	; 0x0e
    252e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2530:	58 89       	ldd	r21, Y+16	; 0x10
    2532:	80 91 12 05 	lds	r24, 0x0512
    2536:	90 91 13 05 	lds	r25, 0x0513
    253a:	a0 91 14 05 	lds	r26, 0x0514
    253e:	b0 91 15 05 	lds	r27, 0x0515
    2542:	28 17       	cp	r18, r24
    2544:	39 07       	cpc	r19, r25
    2546:	4a 07       	cpc	r20, r26
    2548:	5b 07       	cpc	r21, r27
    254a:	44 f4       	brge	.+16     	; 0x255c <__stack+0x35d>
    254c:	a9 a1       	ldd	r26, Y+33	; 0x21
    254e:	ba a1       	ldd	r27, Y+34	; 0x22
    2550:	50 96       	adiw	r26, 0x10	; 16
    2552:	8c 91       	ld	r24, X
    2554:	50 97       	sbiw	r26, 0x10	; 16
    2556:	80 68       	ori	r24, 0x80	; 128
    2558:	50 96       	adiw	r26, 0x10	; 16
    255a:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    255c:	eb a9       	ldd	r30, Y+51	; 0x33
    255e:	fc a9       	ldd	r31, Y+52	; 0x34
    2560:	f0 93 03 05 	sts	0x0503, r31
    2564:	e0 93 02 05 	sts	0x0502, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    2568:	a6 e0       	ldi	r26, 0x06	; 6
    256a:	b5 e0       	ldi	r27, 0x05	; 5
    256c:	fe 01       	movw	r30, r28
    256e:	31 96       	adiw	r30, 0x01	; 1
    2570:	80 e1       	ldi	r24, 0x10	; 16
    2572:	01 90       	ld	r0, Z+
    2574:	0d 92       	st	X+, r0
    2576:	81 50       	subi	r24, 0x01	; 1
    2578:	e1 f7       	brne	.-8      	; 0x2572 <__stack+0x373>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    257a:	80 91 16 05 	lds	r24, 0x0516
    257e:	88 23       	and	r24, r24
    2580:	11 f0       	breq	.+4      	; 0x2586 <__stack+0x387>
    2582:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <planner_recalculate>
  st_wake_up();
    2586:	0e 94 93 15 	call	0x2b26	; 0x2b26 <st_wake_up>
}
    258a:	e4 96       	adiw	r28, 0x34	; 52
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	ef 90       	pop	r14
    25a2:	df 90       	pop	r13
    25a4:	cf 90       	pop	r12
    25a6:	bf 90       	pop	r11
    25a8:	af 90       	pop	r10
    25aa:	9f 90       	pop	r9
    25ac:	8f 90       	pop	r8
    25ae:	7f 90       	pop	r7
    25b0:	6f 90       	pop	r6
    25b2:	5f 90       	pop	r5
    25b4:	4f 90       	pop	r4
    25b6:	3f 90       	pop	r3
    25b8:	2f 90       	pop	r2
    25ba:	08 95       	ret

000025bc <sp_process>:
//  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
//  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	66 c0       	rjmp	.+204    	; 0x268e <sp_process+0xd2>
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    25c2:	e0 91 49 05 	lds	r30, 0x0549
    25c6:	ee 23       	and	r30, r30
    25c8:	09 f4       	brne	.+2      	; 0x25cc <sp_process+0x10>
    25ca:	4f c0       	rjmp	.+158    	; 0x266a <sp_process+0xae>
    25cc:	9a 30       	cpi	r25, 0x0A	; 10
    25ce:	19 f0       	breq	.+6      	; 0x25d6 <sp_process+0x1a>
    25d0:	9d 30       	cpi	r25, 0x0D	; 13
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <sp_process+0x1a>
    25d4:	4a c0       	rjmp	.+148    	; 0x266a <sp_process+0xae>
      line[char_counter] = 0; // terminate string
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	e9 5e       	subi	r30, 0xE9	; 233
    25da:	fa 4f       	sbci	r31, 0xFA	; 250
    25dc:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    25de:	87 e1       	ldi	r24, 0x17	; 23
    25e0:	95 e0       	ldi	r25, 0x05	; 5
    25e2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <gc_execute_line>
    25e6:	68 2f       	mov	r22, r24
static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code)
{
	if( gHomed == FALSE ) {
    25e8:	80 91 4a 05 	lds	r24, 0x054A
    25ec:	88 23       	and	r24, r24
    25ee:	39 f4       	brne	.+14     	; 0x25fe <sp_process+0x42>
    	printPgmString(PSTR("\r\nNot homed\n\r"));status_code = 99;
    25f0:	88 ee       	ldi	r24, 0xE8	; 232
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
    25f8:	c3 e6       	ldi	r28, 0x63	; 99
    25fa:	d0 e0       	ldi	r29, 0x00	; 0
    25fc:	24 c0       	rjmp	.+72     	; 0x2646 <sp_process+0x8a>
	}

  switch(status_code) {          
    25fe:	62 30       	cpi	r22, 0x02	; 2
    2600:	a1 f0       	breq	.+40     	; 0x262a <sp_process+0x6e>
    2602:	63 30       	cpi	r22, 0x03	; 3
    2604:	28 f4       	brcc	.+10     	; 0x2610 <sp_process+0x54>
    2606:	66 23       	and	r22, r22
    2608:	51 f0       	breq	.+20     	; 0x261e <sp_process+0x62>
    260a:	61 30       	cpi	r22, 0x01	; 1
    260c:	d1 f4       	brne	.+52     	; 0x2642 <sp_process+0x86>
    260e:	0a c0       	rjmp	.+20     	; 0x2624 <sp_process+0x68>
    2610:	64 30       	cpi	r22, 0x04	; 4
    2612:	89 f0       	breq	.+34     	; 0x2636 <sp_process+0x7a>
    2614:	64 30       	cpi	r22, 0x04	; 4
    2616:	60 f0       	brcs	.+24     	; 0x2630 <sp_process+0x74>
    2618:	65 30       	cpi	r22, 0x05	; 5
    261a:	99 f4       	brne	.+38     	; 0x2642 <sp_process+0x86>
    261c:	0f c0       	rjmp	.+30     	; 0x263c <sp_process+0x80>
    case GCSTATUS_OK:
    	printPgmString(PSTR("ok\n\r")); 
    261e:	83 ee       	ldi	r24, 0xE3	; 227
    2620:	92 e0       	ldi	r25, 0x02	; 2
    2622:	1e c0       	rjmp	.+60     	; 0x2660 <sp_process+0xa4>
		break;
    case GCSTATUS_BAD_NUMBER_FORMAT:
    	printPgmString(PSTR("error: Bad number format\n\r")); 
    2624:	88 ec       	ldi	r24, 0xC8	; 200
    2626:	92 e0       	ldi	r25, 0x02	; 2
    2628:	1b c0       	rjmp	.+54     	; 0x2660 <sp_process+0xa4>
		break;
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    	printPgmString(PSTR("error: Expected command letter\n\r")); 
    262a:	87 ea       	ldi	r24, 0xA7	; 167
    262c:	92 e0       	ldi	r25, 0x02	; 2
    262e:	18 c0       	rjmp	.+48     	; 0x2660 <sp_process+0xa4>
		break;
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    	printPgmString(PSTR("error: Unsupported statement\n\r")); 
    2630:	88 e8       	ldi	r24, 0x88	; 136
    2632:	92 e0       	ldi	r25, 0x02	; 2
    2634:	15 c0       	rjmp	.+42     	; 0x2660 <sp_process+0xa4>
		break;
    case GCSTATUS_FLOATING_POINT_ERROR:
   		printPgmString(PSTR("error: Floating point error\n\r")); 
    2636:	8a e6       	ldi	r24, 0x6A	; 106
    2638:	92 e0       	ldi	r25, 0x02	; 2
    263a:	12 c0       	rjmp	.+36     	; 0x2660 <sp_process+0xa4>
		break;
    case GCSTATUS_FAILED_COMMAND:
   		printPgmString(PSTR("error: Command Failed\n\r")); 
    263c:	82 e5       	ldi	r24, 0x52	; 82
    263e:	92 e0       	ldi	r25, 0x02	; 2
    2640:	0f c0       	rjmp	.+30     	; 0x2660 <sp_process+0xa4>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    2642:	c6 2f       	mov	r28, r22
    2644:	d0 e0       	ldi	r29, 0x00	; 0
		break;
    case GCSTATUS_FAILED_COMMAND:
   		printPgmString(PSTR("error: Command Failed\n\r")); 
		break;
    default:
    	printPgmString(PSTR("error: "));
    2646:	8a e4       	ldi	r24, 0x4A	; 74
    2648:	92 e0       	ldi	r25, 0x02	; 2
    264a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
    	printInteger(status_code);
    264e:	be 01       	movw	r22, r28
    2650:	88 27       	eor	r24, r24
    2652:	77 fd       	sbrc	r23, 7
    2654:	80 95       	com	r24
    2656:	98 2f       	mov	r25, r24
    2658:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
    	printPgmString(PSTR("\n\r"));
    265c:	87 e4       	ldi	r24, 0x47	; 71
    265e:	92 e0       	ldi	r25, 0x02	; 2
    2660:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2664:	10 92 49 05 	sts	0x0549, r1
    2668:	12 c0       	rjmp	.+36     	; 0x268e <sp_process+0xd2>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    266a:	91 32       	cpi	r25, 0x21	; 33
    266c:	84 f0       	brlt	.+32     	; 0x268e <sp_process+0xd2>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    266e:	89 2f       	mov	r24, r25
    2670:	81 56       	subi	r24, 0x61	; 97
    2672:	ae 2f       	mov	r26, r30
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ef 5f       	subi	r30, 0xFF	; 255
    2678:	8a 31       	cpi	r24, 0x1A	; 26
    267a:	20 f4       	brcc	.+8      	; 0x2684 <sp_process+0xc8>
      line[char_counter++] = c-'a'+'A';
    267c:	a9 5e       	subi	r26, 0xE9	; 233
    267e:	ba 4f       	sbci	r27, 0xFA	; 250
    2680:	90 52       	subi	r25, 0x20	; 32
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <sp_process+0xcc>
    } else {
      line[char_counter++] = c;
    2684:	a9 5e       	subi	r26, 0xE9	; 233
    2686:	ba 4f       	sbci	r27, 0xFA	; 250
    2688:	9c 93       	st	X, r25
    268a:	e0 93 49 05 	sts	0x0549, r30

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    268e:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <serialRead>
    2692:	98 2f       	mov	r25, r24
    2694:	8f 3f       	cpi	r24, 0xFF	; 255
    2696:	09 f0       	breq	.+2      	; 0x269a <sp_process+0xde>
    2698:	94 cf       	rjmp	.-216    	; 0x25c2 <sp_process+0x6>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	08 95       	ret

000026a0 <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	76 e9       	ldi	r23, 0x96	; 150
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 87 1a 	call	0x350e	; 0x350e <beginSerial>
//  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
//  printPgmString(PSTR("\r\n"));  
}
    26ac:	08 95       	ret

000026ae <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	ae e7       	ldi	r26, 0x7E	; 126
    26b4:	b4 e4       	ldi	r27, 0x44	; 68
    26b6:	80 93 74 06 	sts	0x0674, r24
    26ba:	90 93 75 06 	sts	0x0675, r25
    26be:	a0 93 76 06 	sts	0x0676, r26
    26c2:	b0 93 77 06 	sts	0x0677, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    26c6:	80 93 78 06 	sts	0x0678, r24
    26ca:	90 93 79 06 	sts	0x0679, r25
    26ce:	a0 93 7a 06 	sts	0x067A, r26
    26d2:	b0 93 7b 06 	sts	0x067B, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    26d6:	84 ef       	ldi	r24, 0xF4	; 244
    26d8:	99 ef       	ldi	r25, 0xF9	; 249
    26da:	ac e3       	ldi	r26, 0x3C	; 60
    26dc:	b4 e4       	ldi	r27, 0x44	; 68
    26de:	80 93 7c 06 	sts	0x067C, r24
    26e2:	90 93 7d 06 	sts	0x067D, r25
    26e6:	a0 93 7e 06 	sts	0x067E, r26
    26ea:	b0 93 7f 06 	sts	0x067F, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    26ee:	81 ec       	ldi	r24, 0xC1	; 193
    26f0:	9a ec       	ldi	r25, 0xCA	; 202
    26f2:	a1 e3       	ldi	r26, 0x31	; 49
    26f4:	b2 e4       	ldi	r27, 0x42	; 66
    26f6:	80 93 80 06 	sts	0x0680, r24
    26fa:	90 93 81 06 	sts	0x0681, r25
    26fe:	a0 93 82 06 	sts	0x0682, r26
    2702:	b0 93 83 06 	sts	0x0683, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2706:	88 e0       	ldi	r24, 0x08	; 8
    2708:	80 93 85 06 	sts	0x0685, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a0 ef       	ldi	r26, 0xF0	; 240
    2712:	b3 e4       	ldi	r27, 0x43	; 67
    2714:	80 93 86 06 	sts	0x0686, r24
    2718:	90 93 87 06 	sts	0x0687, r25
    271c:	a0 93 88 06 	sts	0x0688, r26
    2720:	b0 93 89 06 	sts	0x0689, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2724:	80 93 8a 06 	sts	0x068A, r24
    2728:	90 93 8b 06 	sts	0x068B, r25
    272c:	a0 93 8c 06 	sts	0x068C, r26
    2730:	b0 93 8d 06 	sts	0x068D, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2734:	8a e9       	ldi	r24, 0x9A	; 154
    2736:	99 e9       	ldi	r25, 0x99	; 153
    2738:	a9 e9       	ldi	r26, 0x99	; 153
    273a:	b0 e4       	ldi	r27, 0x40	; 64
    273c:	80 93 92 06 	sts	0x0692, r24
    2740:	90 93 93 06 	sts	0x0693, r25
    2744:	a0 93 94 06 	sts	0x0694, r26
    2748:	b0 93 95 06 	sts	0x0695, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    274c:	8d ec       	ldi	r24, 0xCD	; 205
    274e:	9c ec       	ldi	r25, 0xCC	; 204
    2750:	ac ec       	ldi	r26, 0xCC	; 204
    2752:	bd e3       	ldi	r27, 0x3D	; 61
    2754:	80 93 8e 06 	sts	0x068E, r24
    2758:	90 93 8f 06 	sts	0x068F, r25
    275c:	a0 93 90 06 	sts	0x0690, r26
    2760:	b0 93 91 06 	sts	0x0691, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a8 e4       	ldi	r26, 0x48	; 72
    276a:	b2 e4       	ldi	r27, 0x42	; 66
    276c:	80 93 96 06 	sts	0x0696, r24
    2770:	90 93 97 06 	sts	0x0697, r25
    2774:	a0 93 98 06 	sts	0x0698, r26
    2778:	b0 93 99 06 	sts	0x0699, r27
}
    277c:	08 95       	ret

0000277e <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 de 02 	call	0x5bc	; 0x5bc <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2786:	87 36       	cpi	r24, 0x67	; 103
    2788:	81 f4       	brne	.+32     	; 0x27aa <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    278a:	84 e7       	ldi	r24, 0x74	; 116
    278c:	96 e0       	ldi	r25, 0x06	; 6
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	46 e2       	ldi	r20, 0x26	; 38
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	0e 94 4b 03 	call	0x696	; 0x696 <memcpy_from_eeprom_with_checksum>
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	89 2b       	or	r24, r25
    279e:	09 f4       	brne	.+2      	; 0x27a2 <read_settings+0x24>
    27a0:	21 e0       	ldi	r18, 0x01	; 1
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	28 27       	eor	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	29 c0       	rjmp	.+82     	; 0x27fc <read_settings+0x7e>
      return(FALSE);
    }
  } 
  else if (version == 1) {
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	29 f5       	brne	.+74     	; 0x27f8 <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    27ae:	84 e7       	ldi	r24, 0x74	; 116
    27b0:	96 e0       	ldi	r25, 0x06	; 6
    27b2:	61 e0       	ldi	r22, 0x01	; 1
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	4b e1       	ldi	r20, 0x1B	; 27
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	0e 94 4b 03 	call	0x696	; 0x696 <memcpy_from_eeprom_with_checksum>
    27be:	89 2b       	or	r24, r25
    27c0:	d9 f0       	breq	.+54     	; 0x27f8 <read_settings+0x7a>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    27c2:	8a e9       	ldi	r24, 0x9A	; 154
    27c4:	99 e9       	ldi	r25, 0x99	; 153
    27c6:	a9 e9       	ldi	r26, 0x99	; 153
    27c8:	b0 e4       	ldi	r27, 0x40	; 64
    27ca:	80 93 92 06 	sts	0x0692, r24
    27ce:	90 93 93 06 	sts	0x0693, r25
    27d2:	a0 93 94 06 	sts	0x0694, r26
    27d6:	b0 93 95 06 	sts	0x0695, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a8 e4       	ldi	r26, 0x48	; 72
    27e0:	b2 e4       	ldi	r27, 0x42	; 66
    27e2:	80 93 96 06 	sts	0x0696, r24
    27e6:	90 93 97 06 	sts	0x0697, r25
    27ea:	a0 93 98 06 	sts	0x0698, r26
    27ee:	b0 93 99 06 	sts	0x0699, r27
    27f2:	21 e0       	ldi	r18, 0x01	; 1
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <read_settings+0x7e>
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    27fc:	c9 01       	movw	r24, r18
    27fe:	08 95       	ret

00002800 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	67 e6       	ldi	r22, 0x67	; 103
    2806:	0e 94 e6 02 	call	0x5cc	; 0x5cc <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	64 e7       	ldi	r22, 0x74	; 116
    2810:	76 e0       	ldi	r23, 0x06	; 6
    2812:	46 e2       	ldi	r20, 0x26	; 38
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	0e 94 01 03 	call	0x602	; 0x602 <memcpy_to_eeprom_with_checksum>
}
    281a:	08 95       	ret

0000281c <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    281c:	fc 01       	movw	r30, r24
  switch(parameter) {
    281e:	86 30       	cpi	r24, 0x06	; 6
    2820:	91 05       	cpc	r25, r1
    2822:	b9 f1       	breq	.+110    	; 0x2892 <settings_store_setting+0x76>
    2824:	87 30       	cpi	r24, 0x07	; 7
    2826:	91 05       	cpc	r25, r1
    2828:	4c f4       	brge	.+18     	; 0x283c <settings_store_setting+0x20>
    282a:	84 30       	cpi	r24, 0x04	; 4
    282c:	91 05       	cpc	r25, r1
    282e:	f9 f0       	breq	.+62     	; 0x286e <settings_store_setting+0x52>
    2830:	85 30       	cpi	r24, 0x05	; 5
    2832:	91 05       	cpc	r25, r1
    2834:	2c f5       	brge	.+74     	; 0x2880 <settings_store_setting+0x64>
    2836:	97 ff       	sbrs	r25, 7
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <settings_store_setting+0x3c>
    283a:	62 c0       	rjmp	.+196    	; 0x2900 <settings_store_setting+0xe4>
    283c:	88 30       	cpi	r24, 0x08	; 8
    283e:	91 05       	cpc	r25, r1
    2840:	d1 f1       	breq	.+116    	; 0x28b6 <settings_store_setting+0x9a>
    2842:	88 30       	cpi	r24, 0x08	; 8
    2844:	91 05       	cpc	r25, r1
    2846:	74 f1       	brlt	.+92     	; 0x28a4 <settings_store_setting+0x88>
    2848:	89 30       	cpi	r24, 0x09	; 9
    284a:	91 05       	cpc	r25, r1
    284c:	e9 f1       	breq	.+122    	; 0x28c8 <settings_store_setting+0xac>
    284e:	e8 5e       	subi	r30, 0xE8	; 232
    2850:	f3 40       	sbci	r31, 0x03	; 3
    2852:	09 f0       	breq	.+2      	; 0x2856 <settings_store_setting+0x3a>
    2854:	55 c0       	rjmp	.+170    	; 0x2900 <settings_store_setting+0xe4>
    2856:	44 c0       	rjmp	.+136    	; 0x28e0 <settings_store_setting+0xc4>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	ec 58       	subi	r30, 0x8C	; 140
    2862:	f9 4f       	sbci	r31, 0xF9	; 249
    2864:	40 83       	st	Z, r20
    2866:	51 83       	std	Z+1, r21	; 0x01
    2868:	62 83       	std	Z+2, r22	; 0x02
    286a:	73 83       	std	Z+3, r23	; 0x03
    286c:	4c c0       	rjmp	.+152    	; 0x2906 <settings_store_setting+0xea>
    case 4: settings.pulse_microseconds = round(value); break;
    286e:	cb 01       	movw	r24, r22
    2870:	ba 01       	movw	r22, r20
    2872:	0e 94 25 23 	call	0x464a	; 0x464a <round>
    2876:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__fixunssfsi>
    287a:	60 93 85 06 	sts	0x0685, r22
    287e:	43 c0       	rjmp	.+134    	; 0x2906 <settings_store_setting+0xea>
    case 5: settings.default_feed_rate = value; break;
    2880:	40 93 86 06 	sts	0x0686, r20
    2884:	50 93 87 06 	sts	0x0687, r21
    2888:	60 93 88 06 	sts	0x0688, r22
    288c:	70 93 89 06 	sts	0x0689, r23
    2890:	3a c0       	rjmp	.+116    	; 0x2906 <settings_store_setting+0xea>
    case 6: settings.default_seek_rate = value; break;
    2892:	40 93 8a 06 	sts	0x068A, r20
    2896:	50 93 8b 06 	sts	0x068B, r21
    289a:	60 93 8c 06 	sts	0x068C, r22
    289e:	70 93 8d 06 	sts	0x068D, r23
    28a2:	31 c0       	rjmp	.+98     	; 0x2906 <settings_store_setting+0xea>
    case 7: settings.mm_per_arc_segment = value; break;
    28a4:	40 93 8e 06 	sts	0x068E, r20
    28a8:	50 93 8f 06 	sts	0x068F, r21
    28ac:	60 93 90 06 	sts	0x0690, r22
    28b0:	70 93 91 06 	sts	0x0691, r23
    28b4:	28 c0       	rjmp	.+80     	; 0x2906 <settings_store_setting+0xea>
    case 8: settings.acceleration = value; break;
    28b6:	40 93 92 06 	sts	0x0692, r20
    28ba:	50 93 93 06 	sts	0x0693, r21
    28be:	60 93 94 06 	sts	0x0694, r22
    28c2:	70 93 95 06 	sts	0x0695, r23
    28c6:	1f c0       	rjmp	.+62     	; 0x2906 <settings_store_setting+0xea>
    case 9: settings.max_jerk = fabs(value); break;
    28c8:	db 01       	movw	r26, r22
    28ca:	ca 01       	movw	r24, r20
    28cc:	bf 77       	andi	r27, 0x7F	; 127
    28ce:	80 93 96 06 	sts	0x0696, r24
    28d2:	90 93 97 06 	sts	0x0697, r25
    28d6:	a0 93 98 06 	sts	0x0698, r26
    28da:	b0 93 99 06 	sts	0x0699, r27
    28de:	13 c0       	rjmp	.+38     	; 0x2906 <settings_store_setting+0xea>
    case 1000:
	  if (!!value) st_enable();
    28e0:	cb 01       	movw	r24, r22
    28e2:	ba 01       	movw	r22, r20
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	19 f0       	breq	.+6      	; 0x28fa <settings_store_setting+0xde>
    28f4:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <st_enable>
    28f8:	08 95       	ret
      else st_disable();
    28fa:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <st_disable>
    28fe:	08 95       	ret
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2900:	8b e0       	ldi	r24, 0x0B	; 11
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	04 c0       	rjmp	.+8      	; 0x290e <settings_store_setting+0xf2>
      return;
  }
  write_settings();
    2906:	0e 94 00 14 	call	0x2800	; 0x2800 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    290a:	86 ef       	ldi	r24, 0xF6	; 246
    290c:	92 e0       	ldi	r25, 0x02	; 2
    290e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
    2912:	08 95       	ret

00002914 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2914:	8f ed       	ldi	r24, 0xDF	; 223
    2916:	94 e0       	ldi	r25, 0x04	; 4
    2918:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    291c:	88 ed       	ldi	r24, 0xD8	; 216
    291e:	94 e0       	ldi	r25, 0x04	; 4
    2920:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printPgmString(PSTR("\r\n"));
    2924:	85 ed       	ldi	r24, 0xD5	; 213
    2926:	94 e0       	ldi	r25, 0x04	; 4
    2928:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    292c:	8f ec       	ldi	r24, 0xCF	; 207
    292e:	94 e0       	ldi	r25, 0x04	; 4
    2930:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2934:	60 91 74 06 	lds	r22, 0x0674
    2938:	70 91 75 06 	lds	r23, 0x0675
    293c:	80 91 76 06 	lds	r24, 0x0676
    2940:	90 91 77 06 	lds	r25, 0x0677
    2944:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2948:	8f eb       	ldi	r24, 0xBF	; 191
    294a:	94 e0       	ldi	r25, 0x04	; 4
    294c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2950:	89 eb       	ldi	r24, 0xB9	; 185
    2952:	94 e0       	ldi	r25, 0x04	; 4
    2954:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2958:	60 91 78 06 	lds	r22, 0x0678
    295c:	70 91 79 06 	lds	r23, 0x0679
    2960:	80 91 7a 06 	lds	r24, 0x067A
    2964:	90 91 7b 06 	lds	r25, 0x067B
    2968:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    296c:	89 ea       	ldi	r24, 0xA9	; 169
    296e:	94 e0       	ldi	r25, 0x04	; 4
    2970:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2974:	83 ea       	ldi	r24, 0xA3	; 163
    2976:	94 e0       	ldi	r25, 0x04	; 4
    2978:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    297c:	60 91 7c 06 	lds	r22, 0x067C
    2980:	70 91 7d 06 	lds	r23, 0x067D
    2984:	80 91 7e 06 	lds	r24, 0x067E
    2988:	90 91 7f 06 	lds	r25, 0x067F
    298c:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2990:	83 e9       	ldi	r24, 0x93	; 147
    2992:	94 e0       	ldi	r25, 0x04	; 4
    2994:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2998:	8d e8       	ldi	r24, 0x8D	; 141
    299a:	94 e0       	ldi	r25, 0x04	; 4
    299c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    29a0:	60 91 80 06 	lds	r22, 0x0680
    29a4:	70 91 81 06 	lds	r23, 0x0681
    29a8:	80 91 82 06 	lds	r24, 0x0682
    29ac:	90 91 83 06 	lds	r25, 0x0683
    29b0:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    29b4:	8b e7       	ldi	r24, 0x7B	; 123
    29b6:	94 e0       	ldi	r25, 0x04	; 4
    29b8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    29bc:	85 e7       	ldi	r24, 0x75	; 117
    29be:	94 e0       	ldi	r25, 0x04	; 4
    29c0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printInteger(settings.pulse_microseconds);
    29c4:	60 91 85 06 	lds	r22, 0x0685
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    29d2:	88 e5       	ldi	r24, 0x58	; 88
    29d4:	94 e0       	ldi	r25, 0x04	; 4
    29d6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    29da:	82 e5       	ldi	r24, 0x52	; 82
    29dc:	94 e0       	ldi	r25, 0x04	; 4
    29de:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.default_feed_rate);
    29e2:	60 91 86 06 	lds	r22, 0x0686
    29e6:	70 91 87 06 	lds	r23, 0x0687
    29ea:	80 91 88 06 	lds	r24, 0x0688
    29ee:	90 91 89 06 	lds	r25, 0x0689
    29f2:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    29f6:	84 e3       	ldi	r24, 0x34	; 52
    29f8:	94 e0       	ldi	r25, 0x04	; 4
    29fa:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    29fe:	8e e2       	ldi	r24, 0x2E	; 46
    2a00:	94 e0       	ldi	r25, 0x04	; 4
    2a02:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.default_seek_rate);
    2a06:	60 91 8a 06 	lds	r22, 0x068A
    2a0a:	70 91 8b 06 	lds	r23, 0x068B
    2a0e:	80 91 8c 06 	lds	r24, 0x068C
    2a12:	90 91 8d 06 	lds	r25, 0x068D
    2a16:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2a1a:	80 e1       	ldi	r24, 0x10	; 16
    2a1c:	94 e0       	ldi	r25, 0x04	; 4
    2a1e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2a22:	8a e0       	ldi	r24, 0x0A	; 10
    2a24:	94 e0       	ldi	r25, 0x04	; 4
    2a26:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2a2a:	60 91 8e 06 	lds	r22, 0x068E
    2a2e:	70 91 8f 06 	lds	r23, 0x068F
    2a32:	80 91 90 06 	lds	r24, 0x0690
    2a36:	90 91 91 06 	lds	r25, 0x0691
    2a3a:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2a3e:	86 ef       	ldi	r24, 0xF6	; 246
    2a40:	93 e0       	ldi	r25, 0x03	; 3
    2a42:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2a46:	80 ef       	ldi	r24, 0xF0	; 240
    2a48:	93 e0       	ldi	r25, 0x03	; 3
    2a4a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.acceleration);
    2a4e:	60 91 92 06 	lds	r22, 0x0692
    2a52:	70 91 93 06 	lds	r23, 0x0693
    2a56:	80 91 94 06 	lds	r24, 0x0694
    2a5a:	90 91 95 06 	lds	r25, 0x0695
    2a5e:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2a62:	82 ed       	ldi	r24, 0xD2	; 210
    2a64:	93 e0       	ldi	r25, 0x03	; 3
    2a66:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2a6a:	8c ec       	ldi	r24, 0xCC	; 204
    2a6c:	93 e0       	ldi	r25, 0x03	; 3
    2a6e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printFloat(settings.max_jerk);
    2a72:	60 91 96 06 	lds	r22, 0x0696
    2a76:	70 91 97 06 	lds	r23, 0x0697
    2a7a:	80 91 98 06 	lds	r24, 0x0698
    2a7e:	90 91 99 06 	lds	r25, 0x0699
    2a82:	0e 94 18 1c 	call	0x3830	; 0x3830 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2a86:	84 e9       	ldi	r24, 0x94	; 148
    2a88:	93 e0       	ldi	r25, 0x03	; 3
    2a8a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2a8e:	8b e8       	ldi	r24, 0x8B	; 139
    2a90:	93 e0       	ldi	r25, 0x03	; 3
    2a92:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
  printInteger(st_is_enabled());
    2a96:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <st_is_enabled>
    2a9a:	aa 27       	eor	r26, r26
    2a9c:	97 fd       	sbrc	r25, 7
    2a9e:	a0 95       	com	r26
    2aa0:	ba 2f       	mov	r27, r26
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2aaa:	82 e6       	ldi	r24, 0x62	; 98
    2aac:	93 e0       	ldi	r25, 0x03	; 3
    2aae:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2ab2:	8f e1       	ldi	r24, 0x1F	; 31
    2ab4:	93 e0       	ldi	r25, 0x03	; 3
    2ab6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
}
    2aba:	08 95       	ret

00002abc <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2abc:	0e 94 bf 13 	call	0x277e	; 0x277e <read_settings>
    2ac0:	89 2b       	or	r24, r25
    2ac2:	31 f4       	brne	.+12     	; 0x2ad0 <settings_init+0x14>
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2ac4:	0e 94 57 13 	call	0x26ae	; 0x26ae <settings_reset>
    write_settings();
    2ac8:	0e 94 00 14 	call	0x2800	; 0x2800 <write_settings>
    settings_dump();
    2acc:	0e 94 8a 14 	call	0x2914	; 0x2914 <settings_dump>
    2ad0:	08 95       	ret

00002ad2 <spindle_init>:
#include <avr/io.h>
#include <avr/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2ad2:	e1 e0       	ldi	r30, 0x01	; 1
    2ad4:	f1 e0       	ldi	r31, 0x01	; 1
    2ad6:	80 81       	ld	r24, Z
    2ad8:	80 64       	ori	r24, 0x40	; 64
    2ada:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2adc:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2ade:	3e 9a       	sbi	0x07, 6	; 7

}
    2ae0:	08 95       	ret

00002ae2 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2ae2:	97 fd       	sbrc	r25, 7
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <spindle_run+0x8>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2ae6:	2f 98       	cbi	0x05, 7	; 5
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <spindle_run+0xa>
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2aea:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2aec:	80 91 02 01 	lds	r24, 0x0102
    2af0:	80 64       	ori	r24, 0x40	; 64
    2af2:	80 93 02 01 	sts	0x0102, r24
}
    2af6:	08 95       	ret

00002af8 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2af8:	e2 e0       	ldi	r30, 0x02	; 2
    2afa:	f1 e0       	ldi	r31, 0x01	; 1
    2afc:	80 81       	ld	r24, Z
    2afe:	8f 7b       	andi	r24, 0xBF	; 191
    2b00:	80 83       	st	Z, r24
}
    2b02:	08 95       	ret

00002b04 <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b04:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b06:	40 e7       	ldi	r20, 0x70	; 112
    2b08:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2b0a:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b0c:	23 2f       	mov	r18, r19
    2b0e:	2a 95       	dec	r18
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2b12:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b14:	fa 01       	movw	r30, r20
    2b16:	31 97       	sbiw	r30, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	2f ef       	ldi	r18, 0xFF	; 255
    2b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b20:	92 07       	cpc	r25, r18
    2b22:	99 f7       	brne	.-26     	; 0x2b0a <rotate_head+0x6>

}
    2b24:	08 95       	ret

00002b26 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2b26:	ef e6       	ldi	r30, 0x6F	; 111
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	82 60       	ori	r24, 0x02	; 2
    2b2e:	80 83       	st	Z, r24
}
    2b30:	08 95       	ret

00002b32 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	90 93 63 05 	sts	0x0563, r25
    2b38:	80 93 62 05 	sts	0x0562, r24
}
    2b3c:	08 95       	ret

00002b3e <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2b3e:	1f 92       	push	r1
    2b40:	0f 92       	push	r0
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	0f 92       	push	r0
    2b46:	11 24       	eor	r1, r1
    2b48:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2b4a:	81 b3       	in	r24, 0x11	; 17
    2b4c:	8a 7c       	andi	r24, 0xCA	; 202
    2b4e:	81 bb       	out	0x11, r24	; 17
}
    2b50:	8f 91       	pop	r24
    2b52:	0f 90       	pop	r0
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	0f 90       	pop	r0
    2b58:	1f 90       	pop	r1
    2b5a:	18 95       	reti

00002b5c <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2b5c:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2b5e:	08 95       	ret

00002b60 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2b60:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2b62:	08 95       	ret

00002b64 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2b64:	3c 99       	sbic	0x07, 4	; 7
    2b66:	03 c0       	rjmp	.+6      	; 0x2b6e <st_is_enabled+0xa>
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	07 c0       	rjmp	.+14     	; 0x2b7c <st_is_enabled+0x18>
    2b6e:	88 b1       	in	r24, 0x08	; 8
    2b70:	82 95       	swap	r24
    2b72:	8f 70       	andi	r24, 0x0F	; 15
    2b74:	80 95       	com	r24
    2b76:	81 70       	andi	r24, 0x01	; 1
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2b7c:	c9 01       	movw	r24, r18
    2b7e:	08 95       	ret

00002b80 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2b80:	60 30       	cpi	r22, 0x00	; 0
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	72 07       	cpc	r23, r18
    2b86:	21 e0       	ldi	r18, 0x01	; 1
    2b88:	82 07       	cpc	r24, r18
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	92 07       	cpc	r25, r18
    2b8e:	30 f4       	brcc	.+12     	; 0x2b9c <config_step_timer+0x1c>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    2b90:	9b 01       	movw	r18, r22
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	e0 e0       	ldi	r30, 0x00	; 0
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	72 c0       	rjmp	.+228    	; 0x2c80 <config_step_timer+0x100>
	} else if (cycles <= 0x7ffffL) {
    2b9c:	60 30       	cpi	r22, 0x00	; 0
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	72 07       	cpc	r23, r18
    2ba2:	28 e0       	ldi	r18, 0x08	; 8
    2ba4:	82 07       	cpc	r24, r18
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	92 07       	cpc	r25, r18
    2baa:	a0 f4       	brcc	.+40     	; 0x2bd4 <config_step_timer+0x54>
    ceiling = cycles >> 3;
    2bac:	b3 e0       	ldi	r27, 0x03	; 3
    2bae:	96 95       	lsr	r25
    2bb0:	87 95       	ror	r24
    2bb2:	77 95       	ror	r23
    2bb4:	67 95       	ror	r22
    2bb6:	ba 95       	dec	r27
    2bb8:	d1 f7       	brne	.-12     	; 0x2bae <config_step_timer+0x2e>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2bba:	9b 01       	movw	r18, r22
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	50 e0       	ldi	r21, 0x00	; 0
    2bc0:	a3 e0       	ldi	r26, 0x03	; 3
    2bc2:	22 0f       	add	r18, r18
    2bc4:	33 1f       	adc	r19, r19
    2bc6:	44 1f       	adc	r20, r20
    2bc8:	55 1f       	adc	r21, r21
    2bca:	aa 95       	dec	r26
    2bcc:	d1 f7       	brne	.-12     	; 0x2bc2 <config_step_timer+0x42>
    2bce:	e1 e0       	ldi	r30, 0x01	; 1
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	56 c0       	rjmp	.+172    	; 0x2c80 <config_step_timer+0x100>
	} else if (cycles <= 0x3fffffL) {
    2bd4:	60 30       	cpi	r22, 0x00	; 0
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	72 07       	cpc	r23, r18
    2bda:	20 e4       	ldi	r18, 0x40	; 64
    2bdc:	82 07       	cpc	r24, r18
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	92 07       	cpc	r25, r18
    2be2:	a0 f4       	brcc	.+40     	; 0x2c0c <config_step_timer+0x8c>
		ceiling =  cycles >> 6;
    2be4:	f6 e0       	ldi	r31, 0x06	; 6
    2be6:	96 95       	lsr	r25
    2be8:	87 95       	ror	r24
    2bea:	77 95       	ror	r23
    2bec:	67 95       	ror	r22
    2bee:	fa 95       	dec	r31
    2bf0:	d1 f7       	brne	.-12     	; 0x2be6 <config_step_timer+0x66>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    2bf2:	9b 01       	movw	r18, r22
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	e6 e0       	ldi	r30, 0x06	; 6
    2bfa:	22 0f       	add	r18, r18
    2bfc:	33 1f       	adc	r19, r19
    2bfe:	44 1f       	adc	r20, r20
    2c00:	55 1f       	adc	r21, r21
    2c02:	ea 95       	dec	r30
    2c04:	d1 f7       	brne	.-12     	; 0x2bfa <config_step_timer+0x7a>
    2c06:	e2 e0       	ldi	r30, 0x02	; 2
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	3a c0       	rjmp	.+116    	; 0x2c80 <config_step_timer+0x100>
	} else if (cycles <= 0xffffffL) {
    2c0c:	60 30       	cpi	r22, 0x00	; 0
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	72 07       	cpc	r23, r18
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	82 07       	cpc	r24, r18
    2c16:	21 e0       	ldi	r18, 0x01	; 1
    2c18:	92 07       	cpc	r25, r18
    2c1a:	70 f4       	brcc	.+28     	; 0x2c38 <config_step_timer+0xb8>
		ceiling =  (cycles >> 8);
    2c1c:	bb 27       	eor	r27, r27
    2c1e:	a9 2f       	mov	r26, r25
    2c20:	98 2f       	mov	r25, r24
    2c22:	87 2f       	mov	r24, r23
    2c24:	bc 01       	movw	r22, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    2c26:	a0 e0       	ldi	r26, 0x00	; 0
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	22 27       	eor	r18, r18
    2c2c:	38 2f       	mov	r19, r24
    2c2e:	49 2f       	mov	r20, r25
    2c30:	5a 2f       	mov	r21, r26
    2c32:	e3 e0       	ldi	r30, 0x03	; 3
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	24 c0       	rjmp	.+72     	; 0x2c80 <config_step_timer+0x100>
	} else if (cycles <= 0x3ffffffL) {
    2c38:	60 30       	cpi	r22, 0x00	; 0
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	72 07       	cpc	r23, r18
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	82 07       	cpc	r24, r18
    2c42:	24 e0       	ldi	r18, 0x04	; 4
    2c44:	92 07       	cpc	r25, r18
    2c46:	48 f0       	brcs	.+18     	; 0x2c5a <config_step_timer+0xda>
    2c48:	6f ef       	ldi	r22, 0xFF	; 255
    2c4a:	7f ef       	ldi	r23, 0xFF	; 255
    2c4c:	e4 e0       	ldi	r30, 0x04	; 4
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	3c ef       	ldi	r19, 0xFC	; 252
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	13 c0       	rjmp	.+38     	; 0x2c80 <config_step_timer+0x100>
		ceiling = (cycles >> 10);
    2c5a:	2a e0       	ldi	r18, 0x0A	; 10
    2c5c:	96 95       	lsr	r25
    2c5e:	87 95       	ror	r24
    2c60:	77 95       	ror	r23
    2c62:	67 95       	ror	r22
    2c64:	2a 95       	dec	r18
    2c66:	d1 f7       	brne	.-12     	; 0x2c5c <config_step_timer+0xdc>
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    2c68:	9b 01       	movw	r18, r22
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	8a e0       	ldi	r24, 0x0A	; 10
    2c70:	22 0f       	add	r18, r18
    2c72:	33 1f       	adc	r19, r19
    2c74:	44 1f       	adc	r20, r20
    2c76:	55 1f       	adc	r21, r21
    2c78:	8a 95       	dec	r24
    2c7a:	d1 f7       	brne	.-12     	; 0x2c70 <config_step_timer+0xf0>
    2c7c:	e4 e0       	ldi	r30, 0x04	; 4
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    2c80:	80 91 81 00 	lds	r24, 0x0081
    2c84:	9e 2f       	mov	r25, r30
    2c86:	9f 5f       	subi	r25, 0xFF	; 255
    2c88:	88 7f       	andi	r24, 0xF8	; 248
    2c8a:	98 2b       	or	r25, r24
    2c8c:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    2c90:	70 93 89 00 	sts	0x0089, r23
    2c94:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}
    2c98:	b9 01       	movw	r22, r18
    2c9a:	ca 01       	movw	r24, r20
    2c9c:	08 95       	ret

00002c9e <set_step_events_per_minute>:

void set_step_events_per_minute(uint32_t steps_per_minute) {
    2c9e:	9b 01       	movw	r18, r22
    2ca0:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    2ca2:	20 3b       	cpi	r18, 0xB0	; 176
    2ca4:	84 e0       	ldi	r24, 0x04	; 4
    2ca6:	38 07       	cpc	r19, r24
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	48 07       	cpc	r20, r24
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	58 07       	cpc	r21, r24
    2cb0:	20 f4       	brcc	.+8      	; 0x2cba <set_step_events_per_minute+0x1c>
    2cb2:	20 eb       	ldi	r18, 0xB0	; 176
    2cb4:	34 e0       	ldi	r19, 0x04	; 4
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2cba:	60 e0       	ldi	r22, 0x00	; 0
    2cbc:	70 e7       	ldi	r23, 0x70	; 112
    2cbe:	88 e3       	ldi	r24, 0x38	; 56
    2cc0:	99 e3       	ldi	r25, 0x39	; 57
    2cc2:	0e 94 ca 23 	call	0x4794	; 0x4794 <__udivmodsi4>
    2cc6:	ca 01       	movw	r24, r20
    2cc8:	b9 01       	movw	r22, r18
    2cca:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <config_step_timer>
    2cce:	60 93 64 05 	sts	0x0564, r22
    2cd2:	70 93 65 05 	sts	0x0565, r23
    2cd6:	80 93 66 05 	sts	0x0566, r24
    2cda:	90 93 67 05 	sts	0x0567, r25
}
    2cde:	08 95       	ret

00002ce0 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    2ce0:	80 b3       	in	r24, 0x10	; 16
    2ce2:	85 63       	ori	r24, 0x35	; 53
    2ce4:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    2ce6:	80 b3       	in	r24, 0x10	; 16
    2ce8:	8a 6c       	ori	r24, 0xCA	; 202
    2cea:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    2cec:	81 b3       	in	r24, 0x11	; 17
    2cee:	8a 7c       	andi	r24, 0xCA	; 202
    2cf0:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2cf2:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2cf4:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    2cf6:	e1 e8       	ldi	r30, 0x81	; 129
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	8f 7e       	andi	r24, 0xEF	; 239
    2cfe:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2d00:	80 81       	ld	r24, Z
    2d02:	88 60       	ori	r24, 0x08	; 8
    2d04:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    2d06:	e0 e8       	ldi	r30, 0x80	; 128
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8d 7f       	andi	r24, 0xFD	; 253
    2d0e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2d10:	80 81       	ld	r24, Z
    2d12:	8e 7f       	andi	r24, 0xFE	; 254
    2d14:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    2d16:	80 81       	ld	r24, Z
    2d18:	8f 73       	andi	r24, 0x3F	; 63
    2d1a:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    2d1c:	80 81       	ld	r24, Z
    2d1e:	8f 7c       	andi	r24, 0xCF	; 207
    2d20:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    2d22:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    2d2c:	e0 e7       	ldi	r30, 0x70	; 112
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	81 60       	ori	r24, 0x01	; 1
    2d34:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    2d36:	60 e7       	ldi	r22, 0x70	; 112
    2d38:	77 e1       	ldi	r23, 0x17	; 23
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    2d42:	ef e6       	ldi	r30, 0x6F	; 111
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	8d 7f       	andi	r24, 0xFD	; 253
    2d4a:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    2d4c:	10 92 68 05 	sts	0x0568, r1
    2d50:	10 92 69 05 	sts	0x0569, r1
    2d54:	10 92 6a 05 	sts	0x056A, r1
    2d58:	10 92 6b 05 	sts	0x056B, r1
  
  sei();
    2d5c:	78 94       	sei
}
    2d5e:	08 95       	ret

00002d60 <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    2d60:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2d62:	81 b3       	in	r24, 0x11	; 17
    2d64:	85 73       	andi	r24, 0x35	; 53
    2d66:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d68:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d6a:	40 e6       	ldi	r20, 0x60	; 96
    2d6c:	54 e0       	ldi	r21, 0x04	; 4
    2d6e:	13 c0       	rjmp	.+38     	; 0x2d96 <moveLeft+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    2d70:	21 50       	subi	r18, 0x01	; 1
    2d72:	30 40       	sbci	r19, 0x00	; 0
    2d74:	4b 9b       	sbis	0x09, 3	; 9
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <moveLeft+0x1c>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	08 95       	ret
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2d7c:	81 b3       	in	r24, 0x11	; 17
    2d7e:	8a 7c       	andi	r24, 0xCA	; 202
    2d80:	81 60       	ori	r24, 0x01	; 1
    2d82:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d84:	89 2f       	mov	r24, r25
    2d86:	8a 95       	dec	r24
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <moveLeft+0x26>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2d8a:	81 b3       	in	r24, 0x11	; 17
    2d8c:	8a 7c       	andi	r24, 0xCA	; 202
    2d8e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d90:	fa 01       	movw	r30, r20
    2d92:	31 97       	sbiw	r30, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <moveLeft+0x32>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2d96:	21 15       	cp	r18, r1
    2d98:	31 05       	cpc	r19, r1
    2d9a:	51 f7       	brne	.-44     	; 0x2d70 <moveLeft+0x10>
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    2d9e:	08 95       	ret

00002da0 <moveRight>:

unsigned char moveRight( unsigned int distance ) 
{
    2da0:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    2da2:	81 b3       	in	r24, 0x11	; 17
    2da4:	85 73       	andi	r24, 0x35	; 53
    2da6:	82 60       	ori	r24, 0x02	; 2
    2da8:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2daa:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dac:	40 e6       	ldi	r20, 0x60	; 96
    2dae:	54 e0       	ldi	r21, 0x04	; 4
    2db0:	13 c0       	rjmp	.+38     	; 0x2dd8 <moveRight+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    2db2:	21 50       	subi	r18, 0x01	; 1
    2db4:	30 40       	sbci	r19, 0x00	; 0
    2db6:	4a 9b       	sbis	0x09, 2	; 9
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <moveRight+0x1e>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	08 95       	ret
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    2dbe:	81 b3       	in	r24, 0x11	; 17
    2dc0:	8a 7c       	andi	r24, 0xCA	; 202
    2dc2:	81 60       	ori	r24, 0x01	; 1
    2dc4:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dc6:	89 2f       	mov	r24, r25
    2dc8:	8a 95       	dec	r24
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <moveRight+0x28>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    2dcc:	81 b3       	in	r24, 0x11	; 17
    2dce:	8a 7c       	andi	r24, 0xCA	; 202
    2dd0:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dd2:	fa 01       	movw	r30, r20
    2dd4:	31 97       	sbiw	r30, 0x01	; 1
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <moveRight+0x34>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2dd8:	21 15       	cp	r18, r1
    2dda:	31 05       	cpc	r19, r1
    2ddc:	51 f7       	brne	.-44     	; 0x2db2 <moveRight+0x12>
    2dde:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2de0:	08 95       	ret

00002de2 <moveForward>:

unsigned char moveForward( unsigned int distance ) 
{
    2de2:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    2de4:	81 b3       	in	r24, 0x11	; 17
    2de6:	85 73       	andi	r24, 0x35	; 53
    2de8:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dea:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dec:	40 e6       	ldi	r20, 0x60	; 96
    2dee:	54 e0       	ldi	r21, 0x04	; 4
    2df0:	13 c0       	rjmp	.+38     	; 0x2e18 <moveForward+0x36>
  // Then pulse the stepping pins
  while(distance--) {

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    2df2:	21 50       	subi	r18, 0x01	; 1
    2df4:	30 40       	sbci	r19, 0x00	; 0
    2df6:	48 9b       	sbis	0x09, 0	; 9
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <moveForward+0x1c>
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	08 95       	ret
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2dfe:	81 b3       	in	r24, 0x11	; 17
    2e00:	8a 7c       	andi	r24, 0xCA	; 202
    2e02:	84 60       	ori	r24, 0x04	; 4
    2e04:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e06:	89 2f       	mov	r24, r25
    2e08:	8a 95       	dec	r24
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <moveForward+0x26>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2e0c:	81 b3       	in	r24, 0x11	; 17
    2e0e:	8a 7c       	andi	r24, 0xCA	; 202
    2e10:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e12:	fa 01       	movw	r30, r20
    2e14:	31 97       	sbiw	r30, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <moveForward+0x32>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2e18:	21 15       	cp	r18, r1
    2e1a:	31 05       	cpc	r19, r1
    2e1c:	51 f7       	brne	.-44     	; 0x2df2 <moveForward+0x10>
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    2e20:	08 95       	ret

00002e22 <moveBack>:

unsigned char moveBack( unsigned int distance ) 
{
    2e22:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    2e24:	81 b3       	in	r24, 0x11	; 17
    2e26:	85 73       	andi	r24, 0x35	; 53
    2e28:	88 60       	ori	r24, 0x08	; 8
    2e2a:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e2c:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e2e:	40 e6       	ldi	r20, 0x60	; 96
    2e30:	54 e0       	ldi	r21, 0x04	; 4
    2e32:	13 c0       	rjmp	.+38     	; 0x2e5a <moveBack+0x38>
  // Then pulse the stepping pins
  while(distance--) {

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    2e34:	21 50       	subi	r18, 0x01	; 1
    2e36:	30 40       	sbci	r19, 0x00	; 0
    2e38:	49 9b       	sbis	0x09, 1	; 9
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <moveBack+0x1e>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	08 95       	ret
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    2e40:	81 b3       	in	r24, 0x11	; 17
    2e42:	8a 7c       	andi	r24, 0xCA	; 202
    2e44:	84 60       	ori	r24, 0x04	; 4
    2e46:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e48:	89 2f       	mov	r24, r25
    2e4a:	8a 95       	dec	r24
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <moveBack+0x28>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    2e4e:	81 b3       	in	r24, 0x11	; 17
    2e50:	8a 7c       	andi	r24, 0xCA	; 202
    2e52:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e54:	fa 01       	movw	r30, r20
    2e56:	31 97       	sbiw	r30, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <moveBack+0x34>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    2e5a:	21 15       	cp	r18, r1
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	51 f7       	brne	.-44     	; 0x2e34 <moveBack+0x12>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    2e62:	08 95       	ret

00002e64 <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    2e64:	80 91 6f 00 	lds	r24, 0x006F
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	96 95       	lsr	r25
    2e6c:	87 95       	ror	r24
}
    2e6e:	81 70       	andi	r24, 0x01	; 1
    2e70:	08 95       	ret

00002e72 <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    2e72:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    2e74:	82 e0       	ldi	r24, 0x02	; 2
    2e76:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    2e78:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    2e7a:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    2e7c:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    2e7e:	9f e8       	ldi	r25, 0x8F	; 143
    2e80:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    2e82:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    2e84:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    2e88:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    2e8c:	3f ec       	ldi	r19, 0xCF	; 207
    2e8e:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    2e92:	20 ef       	ldi	r18, 0xF0	; 240
    2e94:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    2e98:	8c e9       	ldi	r24, 0x9C	; 156
    2e9a:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    2e9c:	82 e2       	ldi	r24, 0x22	; 34
    2e9e:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    2ea0:	83 e1       	ldi	r24, 0x13	; 19
    2ea2:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    2ea4:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    2ea6:	80 e3       	ldi	r24, 0x30	; 48
    2ea8:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    2eaa:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    2eac:	83 e2       	ldi	r24, 0x23	; 35
    2eae:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    2eb0:	83 e0       	ldi	r24, 0x03	; 3
    2eb2:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    2eb6:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    2eba:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    2ebe:	20 93 0b 01 	sts	0x010B, r18
}
    2ec2:	08 95       	ret

00002ec4 <st_go_home>:

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    2ec4:	10 92 4a 05 	sts	0x054A, r1

// reset position machine thinks we are at.
	plan_init();
    2ec8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <plan_init>
	gc_init();
    2ecc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <gc_init>

	// no interrupts
	cli();
    2ed0:	f8 94       	cli

	// if head down, set head up
	if( is_head_down() ) {
    2ed2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    2ed6:	88 23       	and	r24, r24
    2ed8:	69 f0       	breq	.+26     	; 0x2ef4 <st_go_home+0x30>
		head_down(0);
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
		
		//check again
		if(is_head_down() ){
    2ee2:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    2ee6:	88 23       	and	r24, r24
    2ee8:	29 f0       	breq	.+10     	; 0x2ef4 <st_go_home+0x30>
			printPgmString(PSTR("home failed\r\n"));
    2eea:	8b ee       	ldi	r24, 0xEB	; 235
    2eec:	94 e0       	ldi	r25, 0x04	; 4
    2eee:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
    2ef2:	08 95       	ret
		}

	}

	// tool changer off
	atc_fire(0);	
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 6f 1c 	call	0x38de	; 0x38de <atc_fire>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    2efc:	4b 9b       	sbis	0x09, 3	; 9
    2efe:	16 c0       	rjmp	.+44     	; 0x2f2c <st_go_home+0x68>
		// no longer homed
		gHomed = FALSE;
    2f00:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("xLimit1\r\n"));
    2f04:	89 ef       	ldi	r24, 0xF9	; 249
    2f06:	94 e0       	ldi	r25, 0x04	; 4
    2f08:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    2f0c:	88 ee       	ldi	r24, 0xE8	; 232
    2f0e:	93 e0       	ldi	r25, 0x03	; 3
    2f10:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <moveRight>
    2f14:	88 23       	and	r24, r24
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <st_go_home+0x56>
    2f18:	44 c0       	rjmp	.+136    	; 0x2fa2 <st_go_home+0xde>
			return;
    2f1a:	80 ed       	ldi	r24, 0xD0	; 208
    2f1c:	97 e0       	ldi	r25, 0x07	; 7
    2f1e:	20 e9       	ldi	r18, 0x90	; 144
    2f20:	31 e0       	ldi	r19, 0x01	; 1
    2f22:	f9 01       	movw	r30, r18
    2f24:	31 97       	sbiw	r30, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <st_go_home+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2a:	d9 f7       	brne	.-10     	; 0x2f22 <st_go_home+0x5e>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    2f2c:	48 9b       	sbis	0x09, 0	; 9
    2f2e:	15 c0       	rjmp	.+42     	; 0x2f5a <st_go_home+0x96>
		// no longer homed
		gHomed = FALSE;
    2f30:	10 92 4a 05 	sts	0x054A, r1
		printPgmString(PSTR("yLimit1\r\n"));
    2f34:	83 e0       	ldi	r24, 0x03	; 3
    2f36:	95 e0       	ldi	r25, 0x05	; 5
    2f38:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    2f3c:	88 ee       	ldi	r24, 0xE8	; 232
    2f3e:	93 e0       	ldi	r25, 0x03	; 3
    2f40:	0e 94 11 17 	call	0x2e22	; 0x2e22 <moveBack>
    2f44:	88 23       	and	r24, r24
    2f46:	69 f1       	breq	.+90     	; 0x2fa2 <st_go_home+0xde>
			return;
    2f48:	80 ed       	ldi	r24, 0xD0	; 208
    2f4a:	97 e0       	ldi	r25, 0x07	; 7
    2f4c:	20 e9       	ldi	r18, 0x90	; 144
    2f4e:	31 e0       	ldi	r19, 0x01	; 1
    2f50:	f9 01       	movw	r30, r18
    2f52:	31 97       	sbiw	r30, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <st_go_home+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f56:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f58:	d9 f7       	brne	.-10     	; 0x2f50 <st_go_home+0x8c>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    2f5a:	04 99       	sbic	0x00, 4	; 0
    2f5c:	07 c0       	rjmp	.+14     	; 0x2f6c <st_go_home+0xa8>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <moveLeft>
    2f66:	88 23       	and	r24, r24
    2f68:	c1 f7       	brne	.-16     	; 0x2f5a <st_go_home+0x96>
    2f6a:	11 c0       	rjmp	.+34     	; 0x2f8e <st_go_home+0xca>
    2f6c:	80 ed       	ldi	r24, 0xD0	; 208
    2f6e:	97 e0       	ldi	r25, 0x07	; 7
    2f70:	20 e9       	ldi	r18, 0x90	; 144
    2f72:	31 e0       	ldi	r19, 0x01	; 1
    2f74:	f9 01       	movw	r30, r18
    2f76:	31 97       	sbiw	r30, 0x01	; 1
    2f78:	f1 f7       	brne	.-4      	; 0x2f76 <st_go_home+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f7c:	d9 f7       	brne	.-10     	; 0x2f74 <st_go_home+0xb0>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    2f7e:	90 99       	sbic	0x12, 0	; 18
    2f80:	06 c0       	rjmp	.+12     	; 0x2f8e <st_go_home+0xca>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <moveForward>
    2f8a:	88 23       	and	r24, r24
    2f8c:	c1 f7       	brne	.-16     	; 0x2f7e <st_go_home+0xba>

error:;



	sei();
    2f8e:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    2f90:	89 b1       	in	r24, 0x09	; 9
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	8f 70       	andi	r24, 0x0F	; 15
    2f96:	90 70       	andi	r25, 0x00	; 0
    2f98:	89 2b       	or	r24, r25
    2f9a:	19 f4       	brne	.+6      	; 0x2fa2 <st_go_home+0xde>
		gHomed = TRUE ;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	80 93 4a 05 	sts	0x054A, r24
    2fa2:	08 95       	ret

00002fa4 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    2fa4:	07 c0       	rjmp	.+14     	; 0x2fb4 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    2fa6:	83 b7       	in	r24, 0x33	; 51
    2fa8:	81 60       	ori	r24, 0x01	; 1
    2faa:	83 bf       	out	0x33, r24	; 51
    2fac:	88 95       	sleep
    2fae:	83 b7       	in	r24, 0x33	; 51
    2fb0:	8e 7f       	andi	r24, 0xFE	; 254
    2fb2:	83 bf       	out	0x33, r24	; 51
    2fb4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <plan_get_current_block>
    2fb8:	89 2b       	or	r24, r25
    2fba:	a9 f7       	brne	.-22     	; 0x2fa6 <st_synchronize+0x2>
}
    2fbc:	08 95       	ret

00002fbe <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    2fbe:	1f 92       	push	r1
    2fc0:	0f 92       	push	r0
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	0f 92       	push	r0
    2fc6:	0b b6       	in	r0, 0x3b	; 59
    2fc8:	0f 92       	push	r0
    2fca:	11 24       	eor	r1, r1
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	2f 93       	push	r18
    2fd6:	3f 93       	push	r19
    2fd8:	4f 93       	push	r20
    2fda:	5f 93       	push	r21
    2fdc:	6f 93       	push	r22
    2fde:	7f 93       	push	r23
    2fe0:	8f 93       	push	r24
    2fe2:	9f 93       	push	r25
    2fe4:	af 93       	push	r26
    2fe6:	bf 93       	push	r27
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	ef 93       	push	r30
    2fee:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE ) 
    2ff0:	80 91 4a 05 	lds	r24, 0x054A
    2ff4:	88 23       	and	r24, r24
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <__vector_17+0x3c>
    2ff8:	71 c2       	rjmp	.+1250   	; 0x34dc <__vector_17+0x51e>
		return;

// don't move if the head is down  
  if( is_head_down() )
    2ffa:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    2ffe:	88 23       	and	r24, r24
    3000:	09 f0       	breq	.+2      	; 0x3004 <__vector_17+0x46>
    3002:	6c c2       	rjmp	.+1240   	; 0x34dc <__vector_17+0x51e>
  	return;

  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    3004:	80 91 62 05 	lds	r24, 0x0562
    3008:	90 91 63 05 	lds	r25, 0x0563
    300c:	89 2b       	or	r24, r25
    300e:	09 f0       	breq	.+2      	; 0x3012 <__vector_17+0x54>
    3010:	65 c2       	rjmp	.+1226   	; 0x34dc <__vector_17+0x51e>

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    3012:	89 b1       	in	r24, 0x09	; 9
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	8f 70       	andi	r24, 0x0F	; 15
    3018:	90 70       	andi	r25, 0x00	; 0
    301a:	89 2b       	or	r24, r25
    301c:	19 f0       	breq	.+6      	; 0x3024 <__vector_17+0x66>
  	gHomed = FALSE ;
    301e:	10 92 4a 05 	sts	0x054A, r1
    3022:	5c c2       	rjmp	.+1208   	; 0x34dc <__vector_17+0x51e>
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    3024:	91 b3       	in	r25, 0x11	; 17
    3026:	80 91 9a 06 	lds	r24, 0x069A
    302a:	8a 7c       	andi	r24, 0xCA	; 202
    302c:	95 73       	andi	r25, 0x35	; 53
    302e:	89 2b       	or	r24, r25
    3030:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    3032:	81 b3       	in	r24, 0x11	; 17
    3034:	8a 7c       	andi	r24, 0xCA	; 202
    3036:	90 91 4d 05 	lds	r25, 0x054D
    303a:	89 2b       	or	r24, r25
    303c:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    303e:	80 91 85 06 	lds	r24, 0x0685
    3042:	88 0f       	add	r24, r24
    3044:	84 50       	subi	r24, 0x04	; 4
    3046:	81 95       	neg	r24
    3048:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    304c:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	90 93 63 05 	sts	0x0563, r25
    3056:	80 93 62 05 	sts	0x0562, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    305a:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    305c:	80 91 4b 05 	lds	r24, 0x054B
    3060:	90 91 4c 05 	lds	r25, 0x054C
    3064:	89 2b       	or	r24, r25
    3066:	09 f0       	breq	.+2      	; 0x306a <__vector_17+0xac>
    3068:	5d c0       	rjmp	.+186    	; 0x3124 <__vector_17+0x166>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    306a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <plan_get_current_block>
    306e:	ec 01       	movw	r28, r24
    3070:	90 93 4c 05 	sts	0x054C, r25
    3074:	80 93 4b 05 	sts	0x054B, r24
    if (current_block != NULL) {
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	09 f4       	brne	.+2      	; 0x307e <__vector_17+0xc0>
    307c:	4e c0       	rjmp	.+156    	; 0x311a <__vector_17+0x15c>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    307e:	6d a9       	ldd	r22, Y+53	; 0x35
    3080:	7e a9       	ldd	r23, Y+54	; 0x36
    3082:	8f a9       	ldd	r24, Y+55	; 0x37
    3084:	98 ad       	ldd	r25, Y+56	; 0x38
    3086:	60 93 6c 05 	sts	0x056C, r22
    308a:	70 93 6d 05 	sts	0x056D, r23
    308e:	80 93 6e 05 	sts	0x056E, r24
    3092:	90 93 6f 05 	sts	0x056F, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    3096:	10 92 68 05 	sts	0x0568, r1
    309a:	10 92 69 05 	sts	0x0569, r1
    309e:	10 92 6a 05 	sts	0x056A, r1
    30a2:	10 92 6b 05 	sts	0x056B, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    30a6:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    30aa:	89 89       	ldd	r24, Y+17	; 0x11
    30ac:	9a 89       	ldd	r25, Y+18	; 0x12
    30ae:	ab 89       	ldd	r26, Y+19	; 0x13
    30b0:	bc 89       	ldd	r27, Y+20	; 0x14
    30b2:	b5 95       	asr	r27
    30b4:	a7 95       	ror	r26
    30b6:	97 95       	ror	r25
    30b8:	87 95       	ror	r24
    30ba:	b0 95       	com	r27
    30bc:	a0 95       	com	r26
    30be:	90 95       	com	r25
    30c0:	81 95       	neg	r24
    30c2:	9f 4f       	sbci	r25, 0xFF	; 255
    30c4:	af 4f       	sbci	r26, 0xFF	; 255
    30c6:	bf 4f       	sbci	r27, 0xFF	; 255
    30c8:	80 93 4e 05 	sts	0x054E, r24
    30cc:	90 93 4f 05 	sts	0x054F, r25
    30d0:	a0 93 50 05 	sts	0x0550, r26
    30d4:	b0 93 51 05 	sts	0x0551, r27
      counter_y = counter_x;
    30d8:	80 93 52 05 	sts	0x0552, r24
    30dc:	90 93 53 05 	sts	0x0553, r25
    30e0:	a0 93 54 05 	sts	0x0554, r26
    30e4:	b0 93 55 05 	sts	0x0555, r27
      counter_z = counter_x;
    30e8:	80 93 56 05 	sts	0x0556, r24
    30ec:	90 93 57 05 	sts	0x0557, r25
    30f0:	a0 93 58 05 	sts	0x0558, r26
    30f4:	b0 93 59 05 	sts	0x0559, r27
      counter_c = counter_x;
    30f8:	80 93 5a 05 	sts	0x055A, r24
    30fc:	90 93 5b 05 	sts	0x055B, r25
    3100:	a0 93 5c 05 	sts	0x055C, r26
    3104:	b0 93 5d 05 	sts	0x055D, r27
      step_events_completed = 0;
    3108:	10 92 5e 05 	sts	0x055E, r1
    310c:	10 92 5f 05 	sts	0x055F, r1
    3110:	10 92 60 05 	sts	0x0560, r1
    3114:	10 92 61 05 	sts	0x0561, r1
    3118:	05 c0       	rjmp	.+10     	; 0x3124 <__vector_17+0x166>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    311a:	80 91 6f 00 	lds	r24, 0x006F
    311e:	8d 7f       	andi	r24, 0xFD	; 253
    3120:	80 93 6f 00 	sts	0x006F, r24
    }    
  } 

  if (current_block != NULL) {
    3124:	e0 91 4b 05 	lds	r30, 0x054B
    3128:	f0 91 4c 05 	lds	r31, 0x054C
    312c:	30 97       	sbiw	r30, 0x00	; 0
    312e:	09 f4       	brne	.+2      	; 0x3132 <__vector_17+0x174>
    3130:	ee c0       	rjmp	.+476    	; 0x330e <__vector_17+0x350>
    dir_bits = current_block->direction_bits;
    3132:	80 89       	ldd	r24, Z+16	; 0x10
    3134:	80 93 9a 06 	sts	0x069A, r24
    out_bits = 0;
    3138:	10 92 4d 05 	sts	0x054D, r1
    counter_x += current_block->steps_x;
    313c:	20 91 4e 05 	lds	r18, 0x054E
    3140:	30 91 4f 05 	lds	r19, 0x054F
    3144:	40 91 50 05 	lds	r20, 0x0550
    3148:	50 91 51 05 	lds	r21, 0x0551
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	a2 81       	ldd	r26, Z+2	; 0x02
    3152:	b3 81       	ldd	r27, Z+3	; 0x03
    3154:	28 0f       	add	r18, r24
    3156:	39 1f       	adc	r19, r25
    3158:	4a 1f       	adc	r20, r26
    315a:	5b 1f       	adc	r21, r27
    315c:	20 93 4e 05 	sts	0x054E, r18
    3160:	30 93 4f 05 	sts	0x054F, r19
    3164:	40 93 50 05 	sts	0x0550, r20
    3168:	50 93 51 05 	sts	0x0551, r21
    if (counter_x > 0) {
    316c:	12 16       	cp	r1, r18
    316e:	13 06       	cpc	r1, r19
    3170:	14 06       	cpc	r1, r20
    3172:	15 06       	cpc	r1, r21
    3174:	9c f4       	brge	.+38     	; 0x319c <__vector_17+0x1de>
      out_bits |= (1<<X_STEP_BIT);
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	80 93 4d 05 	sts	0x054D, r24
      counter_x -= current_block->step_event_count;
    317c:	81 89       	ldd	r24, Z+17	; 0x11
    317e:	92 89       	ldd	r25, Z+18	; 0x12
    3180:	a3 89       	ldd	r26, Z+19	; 0x13
    3182:	b4 89       	ldd	r27, Z+20	; 0x14
    3184:	28 1b       	sub	r18, r24
    3186:	39 0b       	sbc	r19, r25
    3188:	4a 0b       	sbc	r20, r26
    318a:	5b 0b       	sbc	r21, r27
    318c:	20 93 4e 05 	sts	0x054E, r18
    3190:	30 93 4f 05 	sts	0x054F, r19
    3194:	40 93 50 05 	sts	0x0550, r20
    3198:	50 93 51 05 	sts	0x0551, r21
    }
    counter_y += current_block->steps_y;
    319c:	20 91 52 05 	lds	r18, 0x0552
    31a0:	30 91 53 05 	lds	r19, 0x0553
    31a4:	40 91 54 05 	lds	r20, 0x0554
    31a8:	50 91 55 05 	lds	r21, 0x0555
    31ac:	84 81       	ldd	r24, Z+4	; 0x04
    31ae:	95 81       	ldd	r25, Z+5	; 0x05
    31b0:	a6 81       	ldd	r26, Z+6	; 0x06
    31b2:	b7 81       	ldd	r27, Z+7	; 0x07
    31b4:	28 0f       	add	r18, r24
    31b6:	39 1f       	adc	r19, r25
    31b8:	4a 1f       	adc	r20, r26
    31ba:	5b 1f       	adc	r21, r27
    31bc:	20 93 52 05 	sts	0x0552, r18
    31c0:	30 93 53 05 	sts	0x0553, r19
    31c4:	40 93 54 05 	sts	0x0554, r20
    31c8:	50 93 55 05 	sts	0x0555, r21
    if (counter_y > 0) {
    31cc:	12 16       	cp	r1, r18
    31ce:	13 06       	cpc	r1, r19
    31d0:	14 06       	cpc	r1, r20
    31d2:	15 06       	cpc	r1, r21
    31d4:	ac f4       	brge	.+42     	; 0x3200 <__vector_17+0x242>
      out_bits |= (1<<Y_STEP_BIT);
    31d6:	80 91 4d 05 	lds	r24, 0x054D
    31da:	84 60       	ori	r24, 0x04	; 4
    31dc:	80 93 4d 05 	sts	0x054D, r24
      counter_y -= current_block->step_event_count;
    31e0:	81 89       	ldd	r24, Z+17	; 0x11
    31e2:	92 89       	ldd	r25, Z+18	; 0x12
    31e4:	a3 89       	ldd	r26, Z+19	; 0x13
    31e6:	b4 89       	ldd	r27, Z+20	; 0x14
    31e8:	28 1b       	sub	r18, r24
    31ea:	39 0b       	sbc	r19, r25
    31ec:	4a 0b       	sbc	r20, r26
    31ee:	5b 0b       	sbc	r21, r27
    31f0:	20 93 52 05 	sts	0x0552, r18
    31f4:	30 93 53 05 	sts	0x0553, r19
    31f8:	40 93 54 05 	sts	0x0554, r20
    31fc:	50 93 55 05 	sts	0x0555, r21
    }
    counter_z += current_block->steps_z;
    3200:	20 91 56 05 	lds	r18, 0x0556
    3204:	30 91 57 05 	lds	r19, 0x0557
    3208:	40 91 58 05 	lds	r20, 0x0558
    320c:	50 91 59 05 	lds	r21, 0x0559
    3210:	80 85       	ldd	r24, Z+8	; 0x08
    3212:	91 85       	ldd	r25, Z+9	; 0x09
    3214:	a2 85       	ldd	r26, Z+10	; 0x0a
    3216:	b3 85       	ldd	r27, Z+11	; 0x0b
    3218:	28 0f       	add	r18, r24
    321a:	39 1f       	adc	r19, r25
    321c:	4a 1f       	adc	r20, r26
    321e:	5b 1f       	adc	r21, r27
    3220:	20 93 56 05 	sts	0x0556, r18
    3224:	30 93 57 05 	sts	0x0557, r19
    3228:	40 93 58 05 	sts	0x0558, r20
    322c:	50 93 59 05 	sts	0x0559, r21
    if (counter_z > 0) {
    3230:	12 16       	cp	r1, r18
    3232:	13 06       	cpc	r1, r19
    3234:	14 06       	cpc	r1, r20
    3236:	15 06       	cpc	r1, r21
    3238:	ac f4       	brge	.+42     	; 0x3264 <__vector_17+0x2a6>
      out_bits |= (1<<Z_STEP_BIT);
    323a:	80 91 4d 05 	lds	r24, 0x054D
    323e:	80 61       	ori	r24, 0x10	; 16
    3240:	80 93 4d 05 	sts	0x054D, r24
      counter_z -= current_block->step_event_count;
    3244:	81 89       	ldd	r24, Z+17	; 0x11
    3246:	92 89       	ldd	r25, Z+18	; 0x12
    3248:	a3 89       	ldd	r26, Z+19	; 0x13
    324a:	b4 89       	ldd	r27, Z+20	; 0x14
    324c:	28 1b       	sub	r18, r24
    324e:	39 0b       	sbc	r19, r25
    3250:	4a 0b       	sbc	r20, r26
    3252:	5b 0b       	sbc	r21, r27
    3254:	20 93 56 05 	sts	0x0556, r18
    3258:	30 93 57 05 	sts	0x0557, r19
    325c:	40 93 58 05 	sts	0x0558, r20
    3260:	50 93 59 05 	sts	0x0559, r21
    }
    counter_c += current_block->steps_c;
    3264:	20 91 5a 05 	lds	r18, 0x055A
    3268:	30 91 5b 05 	lds	r19, 0x055B
    326c:	40 91 5c 05 	lds	r20, 0x055C
    3270:	50 91 5d 05 	lds	r21, 0x055D
    3274:	84 85       	ldd	r24, Z+12	; 0x0c
    3276:	95 85       	ldd	r25, Z+13	; 0x0d
    3278:	a6 85       	ldd	r26, Z+14	; 0x0e
    327a:	b7 85       	ldd	r27, Z+15	; 0x0f
    327c:	28 0f       	add	r18, r24
    327e:	39 1f       	adc	r19, r25
    3280:	4a 1f       	adc	r20, r26
    3282:	5b 1f       	adc	r21, r27
    3284:	20 93 5a 05 	sts	0x055A, r18
    3288:	30 93 5b 05 	sts	0x055B, r19
    328c:	40 93 5c 05 	sts	0x055C, r20
    3290:	50 93 5d 05 	sts	0x055D, r21
    if (counter_c > 0) {
    3294:	12 16       	cp	r1, r18
    3296:	13 06       	cpc	r1, r19
    3298:	14 06       	cpc	r1, r20
    329a:	15 06       	cpc	r1, r21
    329c:	ac f4       	brge	.+42     	; 0x32c8 <__vector_17+0x30a>
      out_bits |= (1<<C_STEP_BIT);
    329e:	80 91 4d 05 	lds	r24, 0x054D
    32a2:	80 62       	ori	r24, 0x20	; 32
    32a4:	80 93 4d 05 	sts	0x054D, r24
      counter_c -= current_block->step_event_count;
    32a8:	81 89       	ldd	r24, Z+17	; 0x11
    32aa:	92 89       	ldd	r25, Z+18	; 0x12
    32ac:	a3 89       	ldd	r26, Z+19	; 0x13
    32ae:	b4 89       	ldd	r27, Z+20	; 0x14
    32b0:	28 1b       	sub	r18, r24
    32b2:	39 0b       	sbc	r19, r25
    32b4:	4a 0b       	sbc	r20, r26
    32b6:	5b 0b       	sbc	r21, r27
    32b8:	20 93 5a 05 	sts	0x055A, r18
    32bc:	30 93 5b 05 	sts	0x055B, r19
    32c0:	40 93 5c 05 	sts	0x055C, r20
    32c4:	50 93 5d 05 	sts	0x055D, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    32c8:	80 91 5e 05 	lds	r24, 0x055E
    32cc:	90 91 5f 05 	lds	r25, 0x055F
    32d0:	a0 91 60 05 	lds	r26, 0x0560
    32d4:	b0 91 61 05 	lds	r27, 0x0561
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	a1 1d       	adc	r26, r1
    32dc:	b1 1d       	adc	r27, r1
    32de:	80 93 5e 05 	sts	0x055E, r24
    32e2:	90 93 5f 05 	sts	0x055F, r25
    32e6:	a0 93 60 05 	sts	0x0560, r26
    32ea:	b0 93 61 05 	sts	0x0561, r27
    if (step_events_completed >= current_block->step_event_count) {
    32ee:	21 89       	ldd	r18, Z+17	; 0x11
    32f0:	32 89       	ldd	r19, Z+18	; 0x12
    32f2:	43 89       	ldd	r20, Z+19	; 0x13
    32f4:	54 89       	ldd	r21, Z+20	; 0x14
    32f6:	82 17       	cp	r24, r18
    32f8:	93 07       	cpc	r25, r19
    32fa:	a4 07       	cpc	r26, r20
    32fc:	b5 07       	cpc	r27, r21
    32fe:	48 f0       	brcs	.+18     	; 0x3312 <__vector_17+0x354>
      current_block = NULL;
    3300:	10 92 4c 05 	sts	0x054C, r1
    3304:	10 92 4b 05 	sts	0x054B, r1
      plan_discard_current_block();
    3308:	0e 94 65 0a 	call	0x14ca	; 0x14ca <plan_discard_current_block>
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <__vector_17+0x354>
    }
  } else {
    out_bits = 0;
    330e:	10 92 4d 05 	sts	0x054D, r1
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    3312:	80 91 9a 06 	lds	r24, 0x069A
    3316:	9a e0       	ldi	r25, 0x0A	; 10
    3318:	89 27       	eor	r24, r25
    331a:	80 93 9a 06 	sts	0x069A, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    331e:	20 91 64 05 	lds	r18, 0x0564
    3322:	30 91 65 05 	lds	r19, 0x0565
    3326:	40 91 66 05 	lds	r20, 0x0566
    332a:	50 91 67 05 	lds	r21, 0x0567
    332e:	80 91 68 05 	lds	r24, 0x0568
    3332:	90 91 69 05 	lds	r25, 0x0569
    3336:	a0 91 6a 05 	lds	r26, 0x056A
    333a:	b0 91 6b 05 	lds	r27, 0x056B
    333e:	28 0f       	add	r18, r24
    3340:	39 1f       	adc	r19, r25
    3342:	4a 1f       	adc	r20, r26
    3344:	5b 1f       	adc	r21, r27
    3346:	20 93 68 05 	sts	0x0568, r18
    334a:	30 93 69 05 	sts	0x0569, r19
    334e:	40 93 6a 05 	sts	0x056A, r20
    3352:	50 93 6b 05 	sts	0x056B, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    3356:	21 38       	cpi	r18, 0x81	; 129
    3358:	8a e1       	ldi	r24, 0x1A	; 26
    335a:	38 07       	cpc	r19, r24
    335c:	86 e0       	ldi	r24, 0x06	; 6
    335e:	48 07       	cpc	r20, r24
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	58 07       	cpc	r21, r24
    3364:	08 f4       	brcc	.+2      	; 0x3368 <__vector_17+0x3aa>
    3366:	b6 c0       	rjmp	.+364    	; 0x34d4 <__vector_17+0x516>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    3368:	20 58       	subi	r18, 0x80	; 128
    336a:	3a 41       	sbci	r19, 0x1A	; 26
    336c:	46 40       	sbci	r20, 0x06	; 6
    336e:	50 40       	sbci	r21, 0x00	; 0
    3370:	20 93 68 05 	sts	0x0568, r18
    3374:	30 93 69 05 	sts	0x0569, r19
    3378:	40 93 6a 05 	sts	0x056A, r20
    337c:	50 93 6b 05 	sts	0x056B, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    3380:	e0 91 4b 05 	lds	r30, 0x054B
    3384:	f0 91 4c 05 	lds	r31, 0x054C
    3388:	30 97       	sbiw	r30, 0x00	; 0
    338a:	09 f4       	brne	.+2      	; 0x338e <__vector_17+0x3d0>
    338c:	a3 c0       	rjmp	.+326    	; 0x34d4 <__vector_17+0x516>
    if (step_events_completed < current_block->accelerate_until) {
    338e:	e0 90 5e 05 	lds	r14, 0x055E
    3392:	f0 90 5f 05 	lds	r15, 0x055F
    3396:	00 91 60 05 	lds	r16, 0x0560
    339a:	10 91 61 05 	lds	r17, 0x0561
    339e:	ef 5b       	subi	r30, 0xBF	; 191
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	a2 81       	ldd	r26, Z+2	; 0x02
    33a8:	b3 81       	ldd	r27, Z+3	; 0x03
    33aa:	e1 54       	subi	r30, 0x41	; 65
    33ac:	f0 40       	sbci	r31, 0x00	; 0
    33ae:	e8 16       	cp	r14, r24
    33b0:	f9 06       	cpc	r15, r25
    33b2:	0a 07       	cpc	r16, r26
    33b4:	1b 07       	cpc	r17, r27
    33b6:	68 f5       	brcc	.+90     	; 0x3412 <__vector_17+0x454>
      trapezoid_adjusted_rate += current_block->rate_delta;
    33b8:	fd 96       	adiw	r30, 0x3d	; 61
    33ba:	20 81       	ld	r18, Z
    33bc:	31 81       	ldd	r19, Z+1	; 0x01
    33be:	42 81       	ldd	r20, Z+2	; 0x02
    33c0:	53 81       	ldd	r21, Z+3	; 0x03
    33c2:	fd 97       	sbiw	r30, 0x3d	; 61
    33c4:	80 91 6c 05 	lds	r24, 0x056C
    33c8:	90 91 6d 05 	lds	r25, 0x056D
    33cc:	a0 91 6e 05 	lds	r26, 0x056E
    33d0:	b0 91 6f 05 	lds	r27, 0x056F
    33d4:	28 0f       	add	r18, r24
    33d6:	39 1f       	adc	r19, r25
    33d8:	4a 1f       	adc	r20, r26
    33da:	5b 1f       	adc	r21, r27
    33dc:	20 93 6c 05 	sts	0x056C, r18
    33e0:	30 93 6d 05 	sts	0x056D, r19
    33e4:	40 93 6e 05 	sts	0x056E, r20
    33e8:	50 93 6f 05 	sts	0x056F, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    33ec:	85 89       	ldd	r24, Z+21	; 0x15
    33ee:	96 89       	ldd	r25, Z+22	; 0x16
    33f0:	a7 89       	ldd	r26, Z+23	; 0x17
    33f2:	b0 8d       	ldd	r27, Z+24	; 0x18
    33f4:	82 17       	cp	r24, r18
    33f6:	93 07       	cpc	r25, r19
    33f8:	a4 07       	cpc	r26, r20
    33fa:	b5 07       	cpc	r27, r21
    33fc:	08 f0       	brcs	.+2      	; 0x3400 <__vector_17+0x442>
    33fe:	4e c0       	rjmp	.+156    	; 0x349c <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3400:	80 93 6c 05 	sts	0x056C, r24
    3404:	90 93 6d 05 	sts	0x056D, r25
    3408:	a0 93 6e 05 	sts	0x056E, r26
    340c:	b0 93 6f 05 	sts	0x056F, r27
    3410:	45 c0       	rjmp	.+138    	; 0x349c <__vector_17+0x4de>
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    3412:	eb 5b       	subi	r30, 0xBB	; 187
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	a2 81       	ldd	r26, Z+2	; 0x02
    341c:	b3 81       	ldd	r27, Z+3	; 0x03
    341e:	e5 54       	subi	r30, 0x45	; 69
    3420:	f0 40       	sbci	r31, 0x00	; 0
    3422:	20 91 6c 05 	lds	r18, 0x056C
    3426:	30 91 6d 05 	lds	r19, 0x056D
    342a:	40 91 6e 05 	lds	r20, 0x056E
    342e:	50 91 6f 05 	lds	r21, 0x056F
    3432:	8e 15       	cp	r24, r14
    3434:	9f 05       	cpc	r25, r15
    3436:	a0 07       	cpc	r26, r16
    3438:	b1 07       	cpc	r27, r17
    343a:	c8 f5       	brcc	.+114    	; 0x34ae <__vector_17+0x4f0>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    343c:	fd 96       	adiw	r30, 0x3d	; 61
    343e:	80 81       	ld	r24, Z
    3440:	91 81       	ldd	r25, Z+1	; 0x01
    3442:	a2 81       	ldd	r26, Z+2	; 0x02
    3444:	b3 81       	ldd	r27, Z+3	; 0x03
    3446:	fd 97       	sbiw	r30, 0x3d	; 61
    3448:	82 17       	cp	r24, r18
    344a:	93 07       	cpc	r25, r19
    344c:	a4 07       	cpc	r26, r20
    344e:	b5 07       	cpc	r27, r21
    3450:	60 f4       	brcc	.+24     	; 0x346a <__vector_17+0x4ac>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3452:	28 1b       	sub	r18, r24
    3454:	39 0b       	sbc	r19, r25
    3456:	4a 0b       	sbc	r20, r26
    3458:	5b 0b       	sbc	r21, r27
    345a:	20 93 6c 05 	sts	0x056C, r18
    345e:	30 93 6d 05 	sts	0x056D, r19
    3462:	40 93 6e 05 	sts	0x056E, r20
    3466:	50 93 6f 05 	sts	0x056F, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    346a:	21 ad       	ldd	r18, Z+57	; 0x39
    346c:	32 ad       	ldd	r19, Z+58	; 0x3a
    346e:	43 ad       	ldd	r20, Z+59	; 0x3b
    3470:	54 ad       	ldd	r21, Z+60	; 0x3c
    3472:	80 91 6c 05 	lds	r24, 0x056C
    3476:	90 91 6d 05 	lds	r25, 0x056D
    347a:	a0 91 6e 05 	lds	r26, 0x056E
    347e:	b0 91 6f 05 	lds	r27, 0x056F
    3482:	82 17       	cp	r24, r18
    3484:	93 07       	cpc	r25, r19
    3486:	a4 07       	cpc	r26, r20
    3488:	b5 07       	cpc	r27, r21
    348a:	40 f4       	brcc	.+16     	; 0x349c <__vector_17+0x4de>
        trapezoid_adjusted_rate = current_block->final_rate;
    348c:	20 93 6c 05 	sts	0x056C, r18
    3490:	30 93 6d 05 	sts	0x056D, r19
    3494:	40 93 6e 05 	sts	0x056E, r20
    3498:	50 93 6f 05 	sts	0x056F, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    349c:	60 91 6c 05 	lds	r22, 0x056C
    34a0:	70 91 6d 05 	lds	r23, 0x056D
    34a4:	80 91 6e 05 	lds	r24, 0x056E
    34a8:	90 91 6f 05 	lds	r25, 0x056F
    34ac:	11 c0       	rjmp	.+34     	; 0x34d0 <__vector_17+0x512>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    34ae:	65 89       	ldd	r22, Z+21	; 0x15
    34b0:	76 89       	ldd	r23, Z+22	; 0x16
    34b2:	87 89       	ldd	r24, Z+23	; 0x17
    34b4:	90 8d       	ldd	r25, Z+24	; 0x18
    34b6:	26 17       	cp	r18, r22
    34b8:	37 07       	cpc	r19, r23
    34ba:	48 07       	cpc	r20, r24
    34bc:	59 07       	cpc	r21, r25
    34be:	51 f0       	breq	.+20     	; 0x34d4 <__vector_17+0x516>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    34c0:	60 93 6c 05 	sts	0x056C, r22
    34c4:	70 93 6d 05 	sts	0x056D, r23
    34c8:	80 93 6e 05 	sts	0x056E, r24
    34cc:	90 93 6f 05 	sts	0x056F, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    34d0:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    34d4:	10 92 63 05 	sts	0x0563, r1
    34d8:	10 92 62 05 	sts	0x0562, r1
}
    34dc:	ff 91       	pop	r31
    34de:	ef 91       	pop	r30
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	bf 91       	pop	r27
    34e6:	af 91       	pop	r26
    34e8:	9f 91       	pop	r25
    34ea:	8f 91       	pop	r24
    34ec:	7f 91       	pop	r23
    34ee:	6f 91       	pop	r22
    34f0:	5f 91       	pop	r21
    34f2:	4f 91       	pop	r20
    34f4:	3f 91       	pop	r19
    34f6:	2f 91       	pop	r18
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	0f 90       	pop	r0
    3502:	0b be       	out	0x3b, r0	; 59
    3504:	0f 90       	pop	r0
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	0f 90       	pop	r0
    350a:	1f 90       	pop	r1
    350c:	18 95       	reti

0000350e <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	7b 01       	movw	r14, r22
    3518:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    351a:	22 e0       	ldi	r18, 0x02	; 2
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e0       	ldi	r20, 0x00	; 0
    3520:	50 e0       	ldi	r21, 0x00	; 0
    3522:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <__divmodsi4>
    3526:	20 5c       	subi	r18, 0xC0	; 192
    3528:	3d 4b       	sbci	r19, 0xBD	; 189
    352a:	40 4f       	sbci	r20, 0xF0	; 240
    352c:	5f 4f       	sbci	r21, 0xFF	; 255
    352e:	ca 01       	movw	r24, r20
    3530:	b9 01       	movw	r22, r18
    3532:	a8 01       	movw	r20, r16
    3534:	97 01       	movw	r18, r14
    3536:	0e 94 ca 23 	call	0x4794	; 0x4794 <__udivmodsi4>
    353a:	c9 01       	movw	r24, r18
    353c:	da 01       	movw	r26, r20
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	a1 09       	sbc	r26, r1
    3542:	b1 09       	sbc	r27, r1
    3544:	29 2f       	mov	r18, r25
    3546:	3a 2f       	mov	r19, r26
    3548:	4b 2f       	mov	r20, r27
    354a:	55 27       	eor	r21, r21
    354c:	01 96       	adiw	r24, 0x01	; 1
    354e:	a1 1d       	adc	r26, r1
    3550:	b1 1d       	adc	r27, r1
    3552:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3556:	81 50       	subi	r24, 0x01	; 1
    3558:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    355c:	e0 ec       	ldi	r30, 0xC0	; 192
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	80 81       	ld	r24, Z
    3562:	8d 7f       	andi	r24, 0xFD	; 253
    3564:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    3566:	e1 ec       	ldi	r30, 0xC1	; 193
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	80 81       	ld	r24, Z
    356c:	80 61       	ori	r24, 0x10	; 16
    356e:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3570:	80 81       	ld	r24, Z
    3572:	88 60       	ori	r24, 0x08	; 8
    3574:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3576:	80 81       	ld	r24, Z
    3578:	80 68       	ori	r24, 0x80	; 128
    357a:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	ff 90       	pop	r15
    3582:	ef 90       	pop	r14
    3584:	08 95       	ret

00003586 <serialWrite>:

void serialWrite(unsigned char c)
{
    3586:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3588:	80 91 c0 00 	lds	r24, 0x00C0
    358c:	85 ff       	sbrs	r24, 5
    358e:	fc cf       	rjmp	.-8      	; 0x3588 <serialWrite+0x2>
		;
	UDR0 = c;
    3590:	90 93 c6 00 	sts	0x00C6, r25
}
    3594:	08 95       	ret

00003596 <serialAvailable>:

int serialAvailable()
{
    3596:	80 91 70 05 	lds	r24, 0x0570
    359a:	90 91 71 05 	lds	r25, 0x0571
    359e:	80 50       	subi	r24, 0x00	; 0
    35a0:	9f 4f       	sbci	r25, 0xFF	; 255
    35a2:	20 91 72 05 	lds	r18, 0x0572
    35a6:	30 91 73 05 	lds	r19, 0x0573
    35aa:	82 1b       	sub	r24, r18
    35ac:	93 0b       	sbc	r25, r19
    35ae:	60 e0       	ldi	r22, 0x00	; 0
    35b0:	71 e0       	ldi	r23, 0x01	; 1
    35b2:	0e 94 b7 23 	call	0x476e	; 0x476e <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    35b6:	08 95       	ret

000035b8 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    35b8:	40 91 72 05 	lds	r20, 0x0572
    35bc:	50 91 73 05 	lds	r21, 0x0573
    35c0:	80 91 70 05 	lds	r24, 0x0570
    35c4:	90 91 71 05 	lds	r25, 0x0571
    35c8:	84 17       	cp	r24, r20
    35ca:	95 07       	cpc	r25, r21
    35cc:	19 f4       	brne	.+6      	; 0x35d4 <serialRead+0x1c>
    35ce:	2f ef       	ldi	r18, 0xFF	; 255
    35d0:	3f ef       	ldi	r19, 0xFF	; 255
    35d2:	0f c0       	rjmp	.+30     	; 0x35f2 <serialRead+0x3a>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    35d4:	fa 01       	movw	r30, r20
    35d6:	ec 58       	subi	r30, 0x8C	; 140
    35d8:	fa 4f       	sbci	r31, 0xFA	; 250
    35da:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    35dc:	ca 01       	movw	r24, r20
    35de:	01 96       	adiw	r24, 0x01	; 1
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	71 e0       	ldi	r23, 0x01	; 1
    35e4:	0e 94 b7 23 	call	0x476e	; 0x476e <__divmodhi4>
    35e8:	90 93 73 05 	sts	0x0573, r25
    35ec:	80 93 72 05 	sts	0x0572, r24
		return c;
    35f0:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    35f2:	c9 01       	movw	r24, r18
    35f4:	08 95       	ret

000035f6 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    35f6:	80 91 72 05 	lds	r24, 0x0572
    35fa:	90 91 73 05 	lds	r25, 0x0573
    35fe:	90 93 71 05 	sts	0x0571, r25
    3602:	80 93 70 05 	sts	0x0570, r24
}
    3606:	08 95       	ret

00003608 <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3608:	1f 92       	push	r1
    360a:	0f 92       	push	r0
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	0f 92       	push	r0
    3610:	0b b6       	in	r0, 0x3b	; 59
    3612:	0f 92       	push	r0
    3614:	11 24       	eor	r1, r1
    3616:	2f 93       	push	r18
    3618:	3f 93       	push	r19
    361a:	4f 93       	push	r20
    361c:	5f 93       	push	r21
    361e:	6f 93       	push	r22
    3620:	7f 93       	push	r23
    3622:	8f 93       	push	r24
    3624:	9f 93       	push	r25
    3626:	af 93       	push	r26
    3628:	bf 93       	push	r27
    362a:	ef 93       	push	r30
    362c:	ff 93       	push	r31
	unsigned char c = UDR0;
    362e:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3632:	e0 91 70 05 	lds	r30, 0x0570
    3636:	f0 91 71 05 	lds	r31, 0x0571
    363a:	cf 01       	movw	r24, r30
    363c:	01 96       	adiw	r24, 0x01	; 1
    363e:	60 e0       	ldi	r22, 0x00	; 0
    3640:	71 e0       	ldi	r23, 0x01	; 1
    3642:	0e 94 b7 23 	call	0x476e	; 0x476e <__divmodhi4>
    3646:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3648:	80 91 72 05 	lds	r24, 0x0572
    364c:	90 91 73 05 	lds	r25, 0x0573
    3650:	28 17       	cp	r18, r24
    3652:	39 07       	cpc	r19, r25
    3654:	39 f0       	breq	.+14     	; 0x3664 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3656:	ec 58       	subi	r30, 0x8C	; 140
    3658:	fa 4f       	sbci	r31, 0xFA	; 250
    365a:	40 83       	st	Z, r20
		rx_buffer_head = i;
    365c:	30 93 71 05 	sts	0x0571, r19
    3660:	20 93 70 05 	sts	0x0570, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3664:	ff 91       	pop	r31
    3666:	ef 91       	pop	r30
    3668:	bf 91       	pop	r27
    366a:	af 91       	pop	r26
    366c:	9f 91       	pop	r25
    366e:	8f 91       	pop	r24
    3670:	7f 91       	pop	r23
    3672:	6f 91       	pop	r22
    3674:	5f 91       	pop	r21
    3676:	4f 91       	pop	r20
    3678:	3f 91       	pop	r19
    367a:	2f 91       	pop	r18
    367c:	0f 90       	pop	r0
    367e:	0b be       	out	0x3b, r0	; 59
    3680:	0f 90       	pop	r0
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	0f 90       	pop	r0
    3686:	1f 90       	pop	r1
    3688:	18 95       	reti

0000368a <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    368a:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    368c:	80 91 c0 00 	lds	r24, 0x00C0
    3690:	85 ff       	sbrs	r24, 5
    3692:	fc cf       	rjmp	.-8      	; 0x368c <printByte+0x2>
		;
	UDR0 = c;
    3694:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3698:	08 95       	ret

0000369a <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    369a:	fc 01       	movw	r30, r24
    369c:	07 c0       	rjmp	.+14     	; 0x36ac <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    369e:	80 91 c0 00 	lds	r24, 0x00C0
    36a2:	85 ff       	sbrs	r24, 5
    36a4:	fc cf       	rjmp	.-8      	; 0x369e <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
    36a6:	31 96       	adiw	r30, 0x01	; 1

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    36a8:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    36ac:	90 81       	ld	r25, Z
    36ae:	99 23       	and	r25, r25
    36b0:	b1 f7       	brne	.-20     	; 0x369e <printString+0x4>
		printByte(*s++);
}
    36b2:	08 95       	ret

000036b4 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    36b4:	9c 01       	movw	r18, r24
    36b6:	06 c0       	rjmp	.+12     	; 0x36c4 <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    36b8:	80 91 c0 00 	lds	r24, 0x00C0
    36bc:	85 ff       	sbrs	r24, 5
    36be:	fc cf       	rjmp	.-8      	; 0x36b8 <printPgmString+0x4>
		;
	UDR0 = c;
    36c0:	90 93 c6 00 	sts	0x00C6, r25
    36c4:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    36c6:	2f 5f       	subi	r18, 0xFF	; 255
    36c8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ca:	94 91       	lpm	r25, Z+
    36cc:	99 23       	and	r25, r25
    36ce:	a1 f7       	brne	.-24     	; 0x36b8 <printPgmString+0x4>
		printByte(c);
}
    36d0:	08 95       	ret

000036d2 <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    36d2:	2f 92       	push	r2
    36d4:	3f 92       	push	r3
    36d6:	4f 92       	push	r4
    36d8:	5f 92       	push	r5
    36da:	6f 92       	push	r6
    36dc:	7f 92       	push	r7
    36de:	8f 92       	push	r8
    36e0:	9f 92       	push	r9
    36e2:	af 92       	push	r10
    36e4:	bf 92       	push	r11
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	ff 92       	push	r15
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	a0 97       	sbiw	r28, 0x20	; 32
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	cd bf       	out	0x3d, r28	; 61
    3706:	6b 01       	movw	r12, r22
    3708:	7c 01       	movw	r14, r24
    370a:	29 01       	movw	r4, r18
    370c:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    370e:	61 15       	cp	r22, r1
    3710:	71 05       	cpc	r23, r1
    3712:	81 05       	cpc	r24, r1
    3714:	91 05       	cpc	r25, r1
    3716:	41 f4       	brne	.+16     	; 0x3728 <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3718:	80 91 c0 00 	lds	r24, 0x00C0
    371c:	85 ff       	sbrs	r24, 5
    371e:	fc cf       	rjmp	.-8      	; 0x3718 <printIntegerInBase+0x46>
		;
	UDR0 = c;
    3720:	80 e3       	ldi	r24, 0x30	; 48
    3722:	80 93 c6 00 	sts	0x00C6, r24
    3726:	49 c0       	rjmp	.+146    	; 0x37ba <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
    3728:	88 24       	eor	r8, r8
    372a:	99 24       	eor	r9, r9
    372c:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
    372e:	1e 01       	movw	r2, r28
    3730:	08 94       	sec
    3732:	21 1c       	adc	r2, r1
    3734:	31 1c       	adc	r3, r1
    3736:	81 01       	movw	r16, r2
    3738:	08 0d       	add	r16, r8
    373a:	19 1d       	adc	r17, r9
    373c:	c7 01       	movw	r24, r14
    373e:	b6 01       	movw	r22, r12
    3740:	a3 01       	movw	r20, r6
    3742:	92 01       	movw	r18, r4
    3744:	0e 94 ca 23 	call	0x4794	; 0x4794 <__udivmodsi4>
    3748:	f8 01       	movw	r30, r16
    374a:	60 83       	st	Z, r22
    374c:	08 94       	sec
    374e:	81 1c       	adc	r8, r1
    3750:	91 1c       	adc	r9, r1
    3752:	a1 1c       	adc	r10, r1
    3754:	b1 1c       	adc	r11, r1
		n /= base;
    3756:	c7 01       	movw	r24, r14
    3758:	b6 01       	movw	r22, r12
    375a:	a3 01       	movw	r20, r6
    375c:	92 01       	movw	r18, r4
    375e:	0e 94 ca 23 	call	0x4794	; 0x4794 <__udivmodsi4>
    3762:	c9 01       	movw	r24, r18
    3764:	da 01       	movw	r26, r20
    3766:	6c 01       	movw	r12, r24
    3768:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    376a:	c1 14       	cp	r12, r1
    376c:	d1 04       	cpc	r13, r1
    376e:	e1 04       	cpc	r14, r1
    3770:	f1 04       	cpc	r15, r1
    3772:	09 f7       	brne	.-62     	; 0x3736 <printIntegerInBase+0x64>
    3774:	91 01       	movw	r18, r2
    3776:	28 0d       	add	r18, r8
    3778:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    377a:	be 01       	movw	r22, r28
    377c:	6f 5f       	subi	r22, 0xFF	; 255
    377e:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
    3780:	d5 01       	movw	r26, r10
    3782:	c4 01       	movw	r24, r8
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	a1 09       	sbc	r26, r1
    3788:	b1 09       	sbc	r27, r1
    378a:	ac 01       	movw	r20, r24
    378c:	48 19       	sub	r20, r8
    378e:	59 09       	sbc	r21, r9
    3790:	11 c0       	rjmp	.+34     	; 0x37b4 <printIntegerInBase+0xe2>
    3792:	fa 01       	movw	r30, r20
    3794:	e2 0f       	add	r30, r18
    3796:	f3 1f       	adc	r31, r19
    3798:	e0 81       	ld	r30, Z
    379a:	ea 30       	cpi	r30, 0x0A	; 10
    379c:	10 f4       	brcc	.+4      	; 0x37a2 <printIntegerInBase+0xd0>
    379e:	e0 5d       	subi	r30, 0xD0	; 208
    37a0:	01 c0       	rjmp	.+2      	; 0x37a4 <printIntegerInBase+0xd2>
    37a2:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    37a4:	80 91 c0 00 	lds	r24, 0x00C0
    37a8:	85 ff       	sbrs	r24, 5
    37aa:	fc cf       	rjmp	.-8      	; 0x37a4 <printIntegerInBase+0xd2>
		;
	UDR0 = c;
    37ac:	e0 93 c6 00 	sts	0x00C6, r30
    37b0:	21 50       	subi	r18, 0x01	; 1
    37b2:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    37b4:	62 17       	cp	r22, r18
    37b6:	73 07       	cpc	r23, r19
    37b8:	61 f7       	brne	.-40     	; 0x3792 <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    37ba:	a0 96       	adiw	r28, 0x20	; 32
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	1f 91       	pop	r17
    37cc:	0f 91       	pop	r16
    37ce:	ff 90       	pop	r15
    37d0:	ef 90       	pop	r14
    37d2:	df 90       	pop	r13
    37d4:	cf 90       	pop	r12
    37d6:	bf 90       	pop	r11
    37d8:	af 90       	pop	r10
    37da:	9f 90       	pop	r9
    37dc:	8f 90       	pop	r8
    37de:	7f 90       	pop	r7
    37e0:	6f 90       	pop	r6
    37e2:	5f 90       	pop	r5
    37e4:	4f 90       	pop	r4
    37e6:	3f 90       	pop	r3
    37e8:	2f 90       	pop	r2
    37ea:	08 95       	ret

000037ec <printInteger>:

void printInteger(long n)
{
    37ec:	9b 01       	movw	r18, r22
    37ee:	ac 01       	movw	r20, r24
	if (n < 0) {
    37f0:	97 ff       	sbrs	r25, 7
    37f2:	0e c0       	rjmp	.+28     	; 0x3810 <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    37f4:	80 91 c0 00 	lds	r24, 0x00C0
    37f8:	85 ff       	sbrs	r24, 5
    37fa:	fc cf       	rjmp	.-8      	; 0x37f4 <printInteger+0x8>
		;
	UDR0 = c;
    37fc:	8d e2       	ldi	r24, 0x2D	; 45
    37fe:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3802:	50 95       	com	r21
    3804:	40 95       	com	r20
    3806:	30 95       	com	r19
    3808:	21 95       	neg	r18
    380a:	3f 4f       	sbci	r19, 0xFF	; 255
    380c:	4f 4f       	sbci	r20, 0xFF	; 255
    380e:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
    3810:	ca 01       	movw	r24, r20
    3812:	b9 01       	movw	r22, r18
    3814:	2a e0       	ldi	r18, 0x0A	; 10
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	40 e0       	ldi	r20, 0x00	; 0
    381a:	50 e0       	ldi	r21, 0x00	; 0
    381c:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <printIntegerInBase>
}
    3820:	08 95       	ret

00003822 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3822:	22 e0       	ldi	r18, 0x02	; 2
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <printIntegerInBase>
  }
    382e:	08 95       	ret

00003830 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3830:	ef 92       	push	r14
    3832:	ff 92       	push	r15
    3834:	0f 93       	push	r16
    3836:	1f 93       	push	r17
    3838:	df 93       	push	r29
    383a:	cf 93       	push	r28
    383c:	00 d0       	rcall	.+0      	; 0x383e <printFloat+0xe>
    383e:	0f 92       	push	r0
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3844:	ae 01       	movw	r20, r28
    3846:	4f 5f       	subi	r20, 0xFF	; 255
    3848:	5f 4f       	sbci	r21, 0xFF	; 255
    384a:	0e 94 8f 22 	call	0x451e	; 0x451e <modf>
    384e:	7b 01       	movw	r14, r22
    3850:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3852:	69 81       	ldd	r22, Y+1	; 0x01
    3854:	7a 81       	ldd	r23, Y+2	; 0x02
    3856:	8b 81       	ldd	r24, Y+3	; 0x03
    3858:	9c 81       	ldd	r25, Y+4	; 0x04
    385a:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
    385e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3862:	80 91 c0 00 	lds	r24, 0x00C0
    3866:	85 ff       	sbrs	r24, 5
    3868:	fc cf       	rjmp	.-8      	; 0x3862 <printFloat+0x32>
		;
	UDR0 = c;
    386a:	8e e2       	ldi	r24, 0x2E	; 46
    386c:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3870:	c8 01       	movw	r24, r16
    3872:	b7 01       	movw	r22, r14
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	4a e7       	ldi	r20, 0x7A	; 122
    387a:	54 e4       	ldi	r21, 0x44	; 68
    387c:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    3880:	0e 94 25 23 	call	0x464a	; 0x464a <round>
    3884:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <__fixsfsi>
    3888:	97 ff       	sbrs	r25, 7
    388a:	07 c0       	rjmp	.+14     	; 0x389a <printFloat+0x6a>
    388c:	90 95       	com	r25
    388e:	80 95       	com	r24
    3890:	70 95       	com	r23
    3892:	61 95       	neg	r22
    3894:	7f 4f       	sbci	r23, 0xFF	; 255
    3896:	8f 4f       	sbci	r24, 0xFF	; 255
    3898:	9f 4f       	sbci	r25, 0xFF	; 255
    389a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <printInteger>
}
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	cf 91       	pop	r28
    38a8:	df 91       	pop	r29
    38aa:	1f 91       	pop	r17
    38ac:	0f 91       	pop	r16
    38ae:	ff 90       	pop	r15
    38b0:	ef 90       	pop	r14
    38b2:	08 95       	ret

000038b4 <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    38b4:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    38b6:	e7 e0       	ldi	r30, 0x07	; 7
    38b8:	f1 e0       	ldi	r31, 0x01	; 1
    38ba:	80 81       	ld	r24, Z
    38bc:	81 60       	ori	r24, 0x01	; 1
    38be:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    38c0:	80 81       	ld	r24, Z
    38c2:	82 60       	ori	r24, 0x02	; 2
    38c4:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    38c6:	80 81       	ld	r24, Z
    38c8:	84 60       	ori	r24, 0x04	; 4
    38ca:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    38cc:	80 81       	ld	r24, Z
    38ce:	88 60       	ori	r24, 0x08	; 8
    38d0:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    38d2:	80 81       	ld	r24, Z
    38d4:	80 64       	ori	r24, 0x40	; 64
    38d6:	80 83       	st	Z, r24

// initialise PORT as well

}
    38d8:	08 95       	ret

000038da <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	08 95       	ret

000038de <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    38de:	cf 93       	push	r28
    38e0:	df 93       	push	r29
    38e2:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	0e 94 99 15 	call	0x2b32	; 0x2b32 <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    38ea:	20 97       	sbiw	r28, 0x00	; 0
    38ec:	c1 f4       	brne	.+48     	; 0x391e <atc_fire+0x40>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    38ee:	80 91 08 01 	lds	r24, 0x0108
    38f2:	81 60       	ori	r24, 0x01	; 1
    38f4:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    38f8:	80 91 08 01 	lds	r24, 0x0108
    38fc:	82 60       	ori	r24, 0x02	; 2
    38fe:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3902:	80 91 08 01 	lds	r24, 0x0108
    3906:	84 60       	ori	r24, 0x04	; 4
    3908:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    390c:	80 91 08 01 	lds	r24, 0x0108
    3910:	88 60       	ori	r24, 0x08	; 8
    3912:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	0e 94 99 15 	call	0x2b32	; 0x2b32 <set_busy>
    391c:	70 c0       	rjmp	.+224    	; 0x39fe <atc_fire+0x120>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    391e:	80 91 08 01 	lds	r24, 0x0108
    3922:	81 60       	ori	r24, 0x01	; 1
    3924:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3928:	c3 30       	cpi	r28, 0x03	; 3
    392a:	d1 05       	cpc	r29, r1
    392c:	09 f1       	breq	.+66     	; 0x3970 <atc_fire+0x92>
    392e:	c4 30       	cpi	r28, 0x04	; 4
    3930:	d1 05       	cpc	r29, r1
    3932:	3c f4       	brge	.+14     	; 0x3942 <atc_fire+0x64>
    3934:	c1 30       	cpi	r28, 0x01	; 1
    3936:	d1 05       	cpc	r29, r1
    3938:	71 f0       	breq	.+28     	; 0x3956 <atc_fire+0x78>
    393a:	22 97       	sbiw	r28, 0x02	; 2
    393c:	09 f0       	breq	.+2      	; 0x3940 <atc_fire+0x62>
    393e:	51 c0       	rjmp	.+162    	; 0x39e2 <atc_fire+0x104>
    3940:	13 c0       	rjmp	.+38     	; 0x3968 <atc_fire+0x8a>
    3942:	c5 30       	cpi	r28, 0x05	; 5
    3944:	d1 05       	cpc	r29, r1
    3946:	59 f1       	breq	.+86     	; 0x399e <atc_fire+0xc0>
    3948:	c5 30       	cpi	r28, 0x05	; 5
    394a:	d1 05       	cpc	r29, r1
    394c:	fc f0       	brlt	.+62     	; 0x398c <atc_fire+0xae>
    394e:	26 97       	sbiw	r28, 0x06	; 6
    3950:	09 f0       	breq	.+2      	; 0x3954 <atc_fire+0x76>
    3952:	47 c0       	rjmp	.+142    	; 0x39e2 <atc_fire+0x104>
    3954:	32 c0       	rjmp	.+100    	; 0x39ba <atc_fire+0xdc>
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3956:	80 91 08 01 	lds	r24, 0x0108
    395a:	8d 7f       	andi	r24, 0xFD	; 253
    395c:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3960:	80 91 08 01 	lds	r24, 0x0108
    3964:	8b 7f       	andi	r24, 0xFB	; 251
    3966:	0c c0       	rjmp	.+24     	; 0x3980 <atc_fire+0xa2>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3968:	80 91 08 01 	lds	r24, 0x0108
    396c:	8d 7f       	andi	r24, 0xFD	; 253
    396e:	28 c0       	rjmp	.+80     	; 0x39c0 <atc_fire+0xe2>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3970:	80 91 08 01 	lds	r24, 0x0108
    3974:	8d 7f       	andi	r24, 0xFD	; 253
    3976:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    397a:	80 91 08 01 	lds	r24, 0x0108
    397e:	84 60       	ori	r24, 0x04	; 4
    3980:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3984:	80 91 08 01 	lds	r24, 0x0108
    3988:	87 7f       	andi	r24, 0xF7	; 247
    398a:	24 c0       	rjmp	.+72     	; 0x39d4 <atc_fire+0xf6>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    398c:	80 91 08 01 	lds	r24, 0x0108
    3990:	8d 7f       	andi	r24, 0xFD	; 253
    3992:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3996:	80 91 08 01 	lds	r24, 0x0108
    399a:	84 60       	ori	r24, 0x04	; 4
    399c:	16 c0       	rjmp	.+44     	; 0x39ca <atc_fire+0xec>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    399e:	80 91 08 01 	lds	r24, 0x0108
    39a2:	82 60       	ori	r24, 0x02	; 2
    39a4:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    39a8:	80 91 08 01 	lds	r24, 0x0108
    39ac:	8b 7f       	andi	r24, 0xFB	; 251
    39ae:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    39b2:	80 91 08 01 	lds	r24, 0x0108
    39b6:	87 7f       	andi	r24, 0xF7	; 247
    39b8:	12 c0       	rjmp	.+36     	; 0x39de <atc_fire+0x100>
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    39ba:	80 91 08 01 	lds	r24, 0x0108
    39be:	82 60       	ori	r24, 0x02	; 2
    39c0:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    39c4:	80 91 08 01 	lds	r24, 0x0108
    39c8:	8b 7f       	andi	r24, 0xFB	; 251
    39ca:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    39ce:	80 91 08 01 	lds	r24, 0x0108
    39d2:	88 60       	ori	r24, 0x08	; 8
    39d4:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    39d8:	80 91 08 01 	lds	r24, 0x0108
    39dc:	8e 7f       	andi	r24, 0xFE	; 254
    39de:	80 93 08 01 	sts	0x0108, r24
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    39e2:	80 91 08 01 	lds	r24, 0x0108
    39e6:	8e 7f       	andi	r24, 0xFE	; 254
    39e8:	80 93 08 01 	sts	0x0108, r24
    39ec:	88 ee       	ldi	r24, 0xE8	; 232
    39ee:	93 e0       	ldi	r25, 0x03	; 3
    39f0:	20 e9       	ldi	r18, 0x90	; 144
    39f2:	31 e0       	ldi	r19, 0x01	; 1
    39f4:	f9 01       	movw	r30, r18
    39f6:	31 97       	sbiw	r30, 0x01	; 1
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <atc_fire+0x118>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fc:	d9 f7       	brne	.-10     	; 0x39f4 <atc_fire+0x116>
	_delay_ms( 100 );


// don't turn off busy flag

}
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	08 95       	ret

00003a04 <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    3a04:	1f 93       	push	r17
    3a06:	18 2f       	mov	r17, r24
	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3a10:	88 23       	and	r24, r24
    3a12:	11 f4       	brne	.+4      	; 0x3a18 <DropTool+0x14>
    3a14:	85 e0       	ldi	r24, 0x05	; 5
    3a16:	0d c0       	rjmp	.+26     	; 0x3a32 <DropTool+0x2e>
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    3a18:	81 2f       	mov	r24, r17
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	0e 94 6f 1c 	call	0x38de	; 0x38de <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	0e 94 6f 1c 	call	0x38de	; 0x38de <atc_fire>

	// head back up
	head_down( 0 );
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3a30:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3a32:	1f 91       	pop	r17
    3a34:	08 95       	ret

00003a36 <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    3a36:	1f 93       	push	r17
    3a38:	18 2f       	mov	r17, r24
	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3a42:	88 23       	and	r24, r24
    3a44:	11 f4       	brne	.+4      	; 0x3a4a <PickupTool+0x14>
    3a46:	85 e0       	ldi	r24, 0x05	; 5
    3a48:	11 c0       	rjmp	.+34     	; 0x3a6c <PickupTool+0x36>
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    3a4a:	81 2f       	mov	r24, r17
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <atc_change>

	// head back up
	head_down( 0 );
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3a5a:	80 e9       	ldi	r24, 0x90	; 144
    3a5c:	91 e0       	ldi	r25, 0x01	; 1
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	f1 f7       	brne	.-4      	; 0x3a5e <PickupTool+0x28>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <atc_change>
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3a6c:	1f 91       	pop	r17
    3a6e:	08 95       	ret

00003a70 <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	ec 01       	movw	r28, r24
	// do we have that tool already ?
	if( tool == toolId ) {
    3a76:	8f 3f       	cpi	r24, 0xFF	; 255
    3a78:	91 05       	cpc	r25, r1
    3a7a:	59 f0       	breq	.+22     	; 0x3a92 <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    3a7c:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <run_vacuum_test>
    3a80:	88 23       	and	r24, r24
    3a82:	21 f4       	brne	.+8      	; 0x3a8c <atc_change+0x1c>
		PickupTool(tool);
    3a84:	8c 2f       	mov	r24, r28
    3a86:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <PickupTool>
    3a8a:	03 c0       	rjmp	.+6      	; 0x3a92 <atc_change+0x22>
	} else { 
		DropTool(tool);
    3a8c:	8c 2f       	mov	r24, r28
    3a8e:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <DropTool>
	}

	return GCSTATUS_OK;
}
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	df 91       	pop	r29
    3a96:	cf 91       	pop	r28
    3a98:	08 95       	ret

00003a9a <check_for_tool>:

// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	//move head up
	if( is_head_down() ) {
    3a9a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    3a9e:	88 23       	and	r24, r24
    3aa0:	21 f0       	breq	.+8      	; 0x3aaa <check_for_tool+0x10>
		head_down( FALSE) ;
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
	}

	goto_vacpad();
    3aaa:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <goto_vacpad>
	
	head_down(TRUE);
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
	
	vacuum(TRUE);
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <vacuum>

	if( vacuum_state() == TRUE )  {
    3abe:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <vacuum_state>
    3ac2:	81 30       	cpi	r24, 0x01	; 1
    3ac4:	31 f4       	brne	.+12     	; 0x3ad2 <check_for_tool+0x38>
		head_down( FALSE) ;
    3ac6:	80 e0       	ldi	r24, 0x00	; 0
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	08 95       	ret
		return TRUE;
	} else {
		head_down( FALSE) ;
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3ada:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    3adc:	08 95       	ret

00003ade <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    3ade:	ea e0       	ldi	r30, 0x0A	; 10
    3ae0:	f1 e0       	ldi	r31, 0x01	; 1
    3ae2:	80 81       	ld	r24, Z
    3ae4:	80 62       	ori	r24, 0x20	; 32
    3ae6:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    3ae8:	eb e0       	ldi	r30, 0x0B	; 11
    3aea:	f1 e0       	ldi	r31, 0x01	; 1
    3aec:	80 81       	ld	r24, Z
    3aee:	80 62       	ori	r24, 0x20	; 32
    3af0:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    3af2:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    3af4:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    3af6:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    3af8:	41 9a       	sbi	0x08, 1	; 8
}
    3afa:	08 95       	ret

00003afc <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3afc:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    3afe:	81 70       	andi	r24, 0x01	; 1
    3b00:	08 95       	ret

00003b02 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    3b02:	86 b1       	in	r24, 0x06	; 6
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	96 95       	lsr	r25
    3b08:	87 95       	ror	r24

	return state;
}
    3b0a:	81 70       	andi	r24, 0x01	; 1
    3b0c:	08 95       	ret

00003b0e <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}

// todo: don't allow head down while not homed?
char head_down(int state)
{
    3b0e:	cf 93       	push	r28
    3b10:	df 93       	push	r29
    3b12:	ec 01       	movw	r28, r24
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	0e 94 99 15 	call	0x2b32	; 0x2b32 <set_busy>

// head down mode
  if( state == 0 ) {
    3b1c:	20 97       	sbiw	r28, 0x00	; 0
    3b1e:	21 f4       	brne	.+8      	; 0x3b28 <head_down+0x1a>

	HEAD_PORT |= _BV( HEAD );
    3b20:	80 91 0b 01 	lds	r24, 0x010B
    3b24:	80 62       	ori	r24, 0x20	; 32
    3b26:	03 c0       	rjmp	.+6      	; 0x3b2e <head_down+0x20>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    3b28:	80 91 0b 01 	lds	r24, 0x010B
    3b2c:	8f 7d       	andi	r24, 0xDF	; 223
    3b2e:	80 93 0b 01 	sts	0x010B, r24
    3b32:	80 ed       	ldi	r24, 0xD0	; 208
    3b34:	97 e0       	ldi	r25, 0x07	; 7
    3b36:	20 e9       	ldi	r18, 0x90	; 144
    3b38:	31 e0       	ldi	r19, 0x01	; 1
    3b3a:	f9 01       	movw	r30, r18
    3b3c:	31 97       	sbiw	r30, 0x01	; 1
    3b3e:	f1 f7       	brne	.-4      	; 0x3b3c <head_down+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b42:	d9 f7       	brne	.-10     	; 0x3b3a <head_down+0x2c>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3b44:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    3b46:	81 70       	andi	r24, 0x01	; 1
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	8c 17       	cp	r24, r28
    3b4c:	9d 07       	cpc	r25, r29
    3b4e:	31 f0       	breq	.+12     	; 0x3b5c <head_down+0x4e>

	  printPgmString(PSTR("Head down error\n\r"));
    3b50:	8d e0       	ldi	r24, 0x0D	; 13
    3b52:	95 e0       	ldi	r25, 0x05	; 5
    3b54:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	05 c0       	rjmp	.+10     	; 0x3b66 <head_down+0x58>
	  
	  return 0;
  }

 	set_busy( FALSE );
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	0e 94 99 15 	call	0x2b32	; 0x2b32 <set_busy>
    3b64:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	08 95       	ret

00003b6c <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    3b6c:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    3b6e:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    3b70:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    3b72:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    3b74:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    3b76:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    3b78:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    3b7a:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    3b7c:	a4 e0       	ldi	r26, 0x04	; 4
    3b7e:	b1 e0       	ldi	r27, 0x01	; 1
    3b80:	8c 91       	ld	r24, X
    3b82:	8e 7f       	andi	r24, 0xFE	; 254
    3b84:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    3b86:	e5 e0       	ldi	r30, 0x05	; 5
    3b88:	f1 e0       	ldi	r31, 0x01	; 1
    3b8a:	80 81       	ld	r24, Z
    3b8c:	81 60       	ori	r24, 0x01	; 1
    3b8e:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    3b90:	8c 91       	ld	r24, X
    3b92:	8f 7e       	andi	r24, 0xEF	; 239
    3b94:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    3b96:	80 81       	ld	r24, Z
    3b98:	80 61       	ori	r24, 0x10	; 16
    3b9a:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    3b9c:	a1 e0       	ldi	r26, 0x01	; 1
    3b9e:	b1 e0       	ldi	r27, 0x01	; 1
    3ba0:	8c 91       	ld	r24, X
    3ba2:	8e 7f       	andi	r24, 0xFE	; 254
    3ba4:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    3ba6:	e2 e0       	ldi	r30, 0x02	; 2
    3ba8:	f1 e0       	ldi	r31, 0x01	; 1
    3baa:	80 81       	ld	r24, Z
    3bac:	81 60       	ori	r24, 0x01	; 1
    3bae:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    3bb0:	8c 91       	ld	r24, X
    3bb2:	8d 7f       	andi	r24, 0xFD	; 253
    3bb4:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    3bb6:	80 81       	ld	r24, Z
    3bb8:	82 60       	ori	r24, 0x02	; 2
    3bba:	80 83       	st	Z, r24

}
    3bbc:	08 95       	ret

00003bbe <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    3bbe:	8c b1       	in	r24, 0x0c	; 12
    3bc0:	82 95       	swap	r24
    3bc2:	86 95       	lsr	r24
    3bc4:	87 70       	andi	r24, 0x07	; 7
    3bc6:	80 95       	com	r24

	return state;
}
    3bc8:	81 70       	andi	r24, 0x01	; 1
    3bca:	08 95       	ret

00003bcc <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    3bcc:	82 b3       	in	r24, 0x12	; 18
    3bce:	82 95       	swap	r24
    3bd0:	86 95       	lsr	r24
    3bd2:	87 70       	andi	r24, 0x07	; 7
    3bd4:	80 95       	com	r24

	return state;
}
    3bd6:	81 70       	andi	r24, 0x01	; 1
    3bd8:	08 95       	ret

00003bda <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    3bda:	8c b1       	in	r24, 0x0c	; 12
    3bdc:	82 95       	swap	r24
    3bde:	8f 70       	andi	r24, 0x0F	; 15
    3be0:	80 95       	com	r24

	return state;
}
    3be2:	81 70       	andi	r24, 0x01	; 1
    3be4:	08 95       	ret

00003be6 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    3be6:	80 91 03 01 	lds	r24, 0x0103
    3bea:	86 95       	lsr	r24
    3bec:	80 95       	com	r24

	return state;
}
    3bee:	81 70       	andi	r24, 0x01	; 1
    3bf0:	08 95       	ret

00003bf2 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    3bf2:	86 b1       	in	r24, 0x06	; 6
    3bf4:	82 95       	swap	r24
    3bf6:	8f 70       	andi	r24, 0x0F	; 15
    3bf8:	80 95       	com	r24

	return state;
}
    3bfa:	81 70       	andi	r24, 0x01	; 1
    3bfc:	08 95       	ret

00003bfe <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    3bfe:	80 91 00 01 	lds	r24, 0x0100
    3c02:	80 95       	com	r24

	return state;
}
    3c04:	81 70       	andi	r24, 0x01	; 1
    3c06:	08 95       	ret

00003c08 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    3c08:	80 91 03 01 	lds	r24, 0x0103
    3c0c:	80 95       	com	r24

	return state;
}
    3c0e:	81 70       	andi	r24, 0x01	; 1
    3c10:	08 95       	ret

00003c12 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    3c12:	83 b1       	in	r24, 0x03	; 3
    3c14:	82 95       	swap	r24
    3c16:	86 95       	lsr	r24
    3c18:	87 70       	andi	r24, 0x07	; 7
    3c1a:	80 95       	com	r24

	return state;
}
    3c1c:	81 70       	andi	r24, 0x01	; 1
    3c1e:	08 95       	ret

00003c20 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    3c20:	80 91 00 01 	lds	r24, 0x0100
    3c24:	86 95       	lsr	r24
    3c26:	80 95       	com	r24

	return state;
}
    3c28:	81 70       	andi	r24, 0x01	; 1
    3c2a:	08 95       	ret

00003c2c <vacuum_init>:
#include "settings.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    3c2c:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    3c2e:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    3c30:	ea e0       	ldi	r30, 0x0A	; 10
    3c32:	f1 e0       	ldi	r31, 0x01	; 1
    3c34:	80 81       	ld	r24, Z
    3c36:	80 61       	ori	r24, 0x10	; 16
    3c38:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    3c3a:	eb e0       	ldi	r30, 0x0B	; 11
    3c3c:	f1 e0       	ldi	r31, 0x01	; 1
    3c3e:	80 81       	ld	r24, Z
    3c40:	80 61       	ori	r24, 0x10	; 16
    3c42:	80 83       	st	Z, r24

}
    3c44:	08 95       	ret

00003c46 <vacuum>:
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    3c46:	89 2b       	or	r24, r25
    3c48:	21 f4       	brne	.+8      	; 0x3c52 <vacuum+0xc>

	HEAD_PORT |= _BV( VACUUM );
    3c4a:	80 91 0b 01 	lds	r24, 0x010B
    3c4e:	80 61       	ori	r24, 0x10	; 16
    3c50:	03 c0       	rjmp	.+6      	; 0x3c58 <vacuum+0x12>

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    3c52:	80 91 0b 01 	lds	r24, 0x010B
    3c56:	8f 7e       	andi	r24, 0xEF	; 239
    3c58:	80 93 0b 01 	sts	0x010B, r24
    3c5c:	88 e8       	ldi	r24, 0x88	; 136
    3c5e:	93 e1       	ldi	r25, 0x13	; 19
    3c60:	20 e9       	ldi	r18, 0x90	; 144
    3c62:	31 e0       	ldi	r19, 0x01	; 1
    3c64:	f9 01       	movw	r30, r18
    3c66:	31 97       	sbiw	r30, 0x01	; 1
    3c68:	f1 f7       	brne	.-4      	; 0x3c66 <vacuum+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6c:	d9 f7       	brne	.-10     	; 0x3c64 <vacuum+0x1e>
  }

   // wait for air to get settled
   _delay_ms( AIR_SETTLE_TIME );

}
    3c6e:	08 95       	ret

00003c70 <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    3c70:	89 b1       	in	r24, 0x09	; 9
    3c72:	80 95       	com	r24

	return state;
}
    3c74:	88 1f       	adc	r24, r24
    3c76:	88 27       	eor	r24, r24
    3c78:	88 1f       	adc	r24, r24
    3c7a:	08 95       	ret

00003c7c <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    3c7c:	af 92       	push	r10
    3c7e:	bf 92       	push	r11
    3c80:	cf 92       	push	r12
    3c82:	df 92       	push	r13
    3c84:	ef 92       	push	r14
    3c86:	ff 92       	push	r15
    3c88:	0f 93       	push	r16
    3c8a:	1f 93       	push	r17
// switch vacuum on, faster, wastes air
	vacuum( 1 );
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    3c94:	63 ec       	ldi	r22, 0xC3	; 195
    3c96:	73 ed       	ldi	r23, 0xD3	; 211
    3c98:	81 e4       	ldi	r24, 0x41	; 65
    3c9a:	91 e4       	ldi	r25, 0x41	; 65
    3c9c:	2a e1       	ldi	r18, 0x1A	; 26
    3c9e:	3b e8       	ldi	r19, 0x8B	; 139
    3ca0:	4d e9       	ldi	r20, 0x9D	; 157
    3ca2:	50 e4       	ldi	r21, 0x40	; 64
    3ca4:	0f 2e       	mov	r0, r31
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	ef 2e       	mov	r14, r31
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	ff 2e       	mov	r15, r31
    3cae:	f0 e8       	ldi	r31, 0x80	; 128
    3cb0:	0f 2f       	mov	r16, r31
    3cb2:	ff eb       	ldi	r31, 0xBF	; 191
    3cb4:	1f 2f       	mov	r17, r31
    3cb6:	f0 2d       	mov	r31, r0
    3cb8:	57 01       	movw	r10, r14
    3cba:	68 01       	movw	r12, r16
    3cbc:	0e 94 89 03 	call	0x712	; 0x712 <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    3cc0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <head_moving>
    3cc4:	89 2b       	or	r24, r25
    3cc6:	e1 f7       	brne	.-8      	; 0x3cc0 <run_vacuum_test+0x44>
    3cc8:	80 e9       	ldi	r24, 0x90	; 144
    3cca:	91 e0       	ldi	r25, 0x01	; 1
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <run_vacuum_test+0x50>

	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

}
    3cd0:	1f 91       	pop	r17
    3cd2:	0f 91       	pop	r16
    3cd4:	ff 90       	pop	r15
    3cd6:	ef 90       	pop	r14
    3cd8:	df 90       	pop	r13
    3cda:	cf 90       	pop	r12
    3cdc:	bf 90       	pop	r11
    3cde:	af 90       	pop	r10
    3ce0:	08 95       	ret

00003ce2 <goto_vacpad>:

unsigned char goto_vacpad( void ) 
{
    3ce2:	8f 92       	push	r8
    3ce4:	9f 92       	push	r9
    3ce6:	af 92       	push	r10
    3ce8:	bf 92       	push	r11
    3cea:	cf 92       	push	r12
    3cec:	df 92       	push	r13
    3cee:	ef 92       	push	r14
    3cf0:	ff 92       	push	r15
    3cf2:	0f 93       	push	r16
    3cf4:	1f 93       	push	r17

	unsigned char hasTool = FALSE;

	if( is_head_down() ) {
    3cf6:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    3cfa:	88 23       	and	r24, r24
    3cfc:	21 f0       	breq	.+8      	; 0x3d06 <goto_vacpad+0x24>
		head_down( FALSE )  ;
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    3d06:	63 ec       	ldi	r22, 0xC3	; 195
    3d08:	73 ed       	ldi	r23, 0xD3	; 211
    3d0a:	81 e4       	ldi	r24, 0x41	; 65
    3d0c:	91 e4       	ldi	r25, 0x41	; 65
    3d0e:	2a e1       	ldi	r18, 0x1A	; 26
    3d10:	3b e8       	ldi	r19, 0x8B	; 139
    3d12:	4d e9       	ldi	r20, 0x9D	; 157
    3d14:	50 e4       	ldi	r21, 0x40	; 64
    3d16:	0f 2e       	mov	r0, r31
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	ef 2e       	mov	r14, r31
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	ff 2e       	mov	r15, r31
    3d20:	f0 e8       	ldi	r31, 0x80	; 128
    3d22:	0f 2f       	mov	r16, r31
    3d24:	ff eb       	ldi	r31, 0xBF	; 191
    3d26:	1f 2f       	mov	r17, r31
    3d28:	f0 2d       	mov	r31, r0
    3d2a:	57 01       	movw	r10, r14
    3d2c:	68 01       	movw	r12, r16
    3d2e:	0e 94 89 03 	call	0x712	; 0x712 <gotoxy>

	while( head_moving() );	
    3d32:	0e 94 32 17 	call	0x2e64	; 0x2e64 <head_moving>
    3d36:	89 2b       	or	r24, r25
    3d38:	e1 f7       	brne	.-8      	; 0x3d32 <goto_vacpad+0x50>
    3d3a:	80 e9       	ldi	r24, 0x90	; 144
    3d3c:	91 e0       	ldi	r25, 0x01	; 1
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <goto_vacpad+0x5c>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <vacuum>
    3d4a:	88 e8       	ldi	r24, 0x88	; 136
    3d4c:	93 e1       	ldi	r25, 0x13	; 19
    3d4e:	20 e9       	ldi	r18, 0x90	; 144
    3d50:	31 e0       	ldi	r19, 0x01	; 1
    3d52:	f9 01       	movw	r30, r18
    3d54:	31 97       	sbiw	r30, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <goto_vacpad+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d58:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5a:	d9 f7       	brne	.-10     	; 0x3d52 <goto_vacpad+0x70>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3d64:	88 23       	and	r24, r24
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <goto_vacpad+0x88>
    3d68:	ca c0       	rjmp	.+404    	; 0x3efe <goto_vacpad+0x21c>

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    3d6a:	80 e1       	ldi	r24, 0x10	; 16
    3d6c:	97 e2       	ldi	r25, 0x27	; 39
    3d6e:	20 e9       	ldi	r18, 0x90	; 144
    3d70:	31 e0       	ldi	r19, 0x01	; 1
    3d72:	f9 01       	movw	r30, r18
    3d74:	31 97       	sbiw	r30, 0x01	; 1
    3d76:	f1 f7       	brne	.-4      	; 0x3d74 <goto_vacpad+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7a:	d9 f7       	brne	.-10     	; 0x3d72 <goto_vacpad+0x90>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    3d7c:	89 b0       	in	r8, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3d8e:	88 23       	and	r24, r24
    3d90:	09 f4       	brne	.+2      	; 0x3d94 <goto_vacpad+0xb2>
    3d92:	da c0       	rjmp	.+436    	; 0x3f48 <goto_vacpad+0x266>

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    3d94:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    3d98:	88 23       	and	r24, r24
    3d9a:	e1 f7       	brne	.-8      	; 0x3d94 <goto_vacpad+0xb2>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    3d9c:	6d e3       	ldi	r22, 0x3D	; 61
    3d9e:	7b e9       	ldi	r23, 0x9B	; 155
    3da0:	8d e4       	ldi	r24, 0x4D	; 77
    3da2:	91 e4       	ldi	r25, 0x41	; 65
    3da4:	2c ed       	ldi	r18, 0xDC	; 220
    3da6:	38 e6       	ldi	r19, 0x68	; 104
    3da8:	44 e9       	ldi	r20, 0x94	; 148
    3daa:	50 e4       	ldi	r21, 0x40	; 64
    3dac:	0f 2e       	mov	r0, r31
    3dae:	f0 e0       	ldi	r31, 0x00	; 0
    3db0:	ef 2e       	mov	r14, r31
    3db2:	f0 e0       	ldi	r31, 0x00	; 0
    3db4:	ff 2e       	mov	r15, r31
    3db6:	f0 e8       	ldi	r31, 0x80	; 128
    3db8:	0f 2f       	mov	r16, r31
    3dba:	ff eb       	ldi	r31, 0xBF	; 191
    3dbc:	1f 2f       	mov	r17, r31
    3dbe:	f0 2d       	mov	r31, r0
    3dc0:	57 01       	movw	r10, r14
    3dc2:	68 01       	movw	r12, r16
    3dc4:	0e 94 89 03 	call	0x712	; 0x712 <gotoxy>

	while( head_moving() );	
    3dc8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <head_moving>
    3dcc:	89 2b       	or	r24, r25
    3dce:	e1 f7       	brne	.-8      	; 0x3dc8 <goto_vacpad+0xe6>
    3dd0:	80 e9       	ldi	r24, 0x90	; 144
    3dd2:	91 e0       	ldi	r25, 0x01	; 1
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	f1 f7       	brne	.-4      	; 0x3dd4 <goto_vacpad+0xf2>
    3dd8:	80 ed       	ldi	r24, 0xD0	; 208
    3dda:	97 e0       	ldi	r25, 0x07	; 7
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ddc:	20 e9       	ldi	r18, 0x90	; 144
    3dde:	31 e0       	ldi	r19, 0x01	; 1
    3de0:	f9 01       	movw	r30, r18
    3de2:	31 97       	sbiw	r30, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <goto_vacpad+0x100>
    3de6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de8:	d9 f7       	brne	.-10     	; 0x3de0 <goto_vacpad+0xfe>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 200 );

//head down
	if( head_down( 1 ) == 0 ) {
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3df2:	88 23       	and	r24, r24
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <goto_vacpad+0x116>
    3df6:	a8 c0       	rjmp	.+336    	; 0x3f48 <goto_vacpad+0x266>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    3df8:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    3dfc:	88 23       	and	r24, r24
    3dfe:	e1 f3       	breq	.-8      	; 0x3df8 <goto_vacpad+0x116>
    3e00:	80 e4       	ldi	r24, 0x40	; 64
    3e02:	9f e1       	ldi	r25, 0x1F	; 31
    3e04:	20 e9       	ldi	r18, 0x90	; 144
    3e06:	31 e0       	ldi	r19, 0x01	; 1
    3e08:	f9 01       	movw	r30, r18
    3e0a:	31 97       	sbiw	r30, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <goto_vacpad+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e10:	d9 f7       	brne	.-10     	; 0x3e08 <goto_vacpad+0x126>
	
	_delay_ms( 800 );


	// atc up
	atc_fire( 1 ) ;
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	0e 94 6f 1c 	call	0x38de	; 0x38de <atc_fire>
    3e1a:	88 e8       	ldi	r24, 0x88	; 136
    3e1c:	93 e1       	ldi	r25, 0x13	; 19
    3e1e:	20 e9       	ldi	r18, 0x90	; 144
    3e20:	31 e0       	ldi	r19, 0x01	; 1
    3e22:	f9 01       	movw	r30, r18
    3e24:	31 97       	sbiw	r30, 0x01	; 1
    3e26:	f1 f7       	brne	.-4      	; 0x3e24 <goto_vacpad+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e2a:	d9 f7       	brne	.-10     	; 0x3e22 <goto_vacpad+0x140>
    3e2c:	99 24       	eor	r9, r9
    3e2e:	87 fc       	sbrc	r8, 7
    3e30:	0b c0       	rjmp	.+22     	; 0x3e48 <goto_vacpad+0x166>
    3e32:	99 24       	eor	r9, r9
    3e34:	93 94       	inc	r9
	// tool changer off
		atc_fire ( 0 );
	} else {

		// tool changer off
		atc_fire ( 0 );
    3e36:	80 e0       	ldi	r24, 0x00	; 0
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	0e 94 6f 1c 	call	0x38de	; 0x38de <atc_fire>
    3e3e:	28 e8       	ldi	r18, 0x88	; 136
    3e40:	33 e1       	ldi	r19, 0x13	; 19
    3e42:	40 e9       	ldi	r20, 0x90	; 144
    3e44:	51 e0       	ldi	r21, 0x01	; 1
    3e46:	10 c0       	rjmp	.+32     	; 0x3e68 <goto_vacpad+0x186>
	_delay_ms( 500 );

	if( hasTool == FALSE ) {

		// head up
		if( head_down( 0 ) == 0 ) {
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3e50:	88 23       	and	r24, r24
    3e52:	29 f4       	brne	.+10     	; 0x3e5e <goto_vacpad+0x17c>

			atc_fire ( 0 );
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	0e 94 6f 1c 	call	0x38de	; 0x38de <atc_fire>
    3e5c:	75 c0       	rjmp	.+234    	; 0x3f48 <goto_vacpad+0x266>

			return GCSTATUS_FAILED_COMMAND;	
		}

	// tool changer off
		atc_fire ( 0 );
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	0e 94 6f 1c 	call	0x38de	; 0x38de <atc_fire>
    3e66:	0d c0       	rjmp	.+26     	; 0x3e82 <goto_vacpad+0x1a0>
    3e68:	ca 01       	movw	r24, r20
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <goto_vacpad+0x188>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6e:	21 50       	subi	r18, 0x01	; 1
    3e70:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e72:	d1 f7       	brne	.-12     	; 0x3e68 <goto_vacpad+0x186>
		atc_fire ( 0 );
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3e7c:	88 23       	and	r24, r24
    3e7e:	09 f4       	brne	.+2      	; 0x3e82 <goto_vacpad+0x1a0>
    3e80:	63 c0       	rjmp	.+198    	; 0x3f48 <goto_vacpad+0x266>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    3e82:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    3e86:	81 30       	cpi	r24, 0x01	; 1
    3e88:	e1 f3       	breq	.-8      	; 0x3e82 <goto_vacpad+0x1a0>
    3e8a:	88 e9       	ldi	r24, 0x98	; 152
    3e8c:	9a e3       	ldi	r25, 0x3A	; 58
    3e8e:	20 e9       	ldi	r18, 0x90	; 144
    3e90:	31 e0       	ldi	r19, 0x01	; 1
    3e92:	f9 01       	movw	r30, r18
    3e94:	31 97       	sbiw	r30, 0x01	; 1
    3e96:	f1 f7       	brne	.-4      	; 0x3e94 <goto_vacpad+0x1b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9a:	d9 f7       	brne	.-10     	; 0x3e92 <goto_vacpad+0x1b0>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    3e9c:	63 ec       	ldi	r22, 0xC3	; 195
    3e9e:	73 ed       	ldi	r23, 0xD3	; 211
    3ea0:	81 e4       	ldi	r24, 0x41	; 65
    3ea2:	91 e4       	ldi	r25, 0x41	; 65
    3ea4:	2a e1       	ldi	r18, 0x1A	; 26
    3ea6:	3b e8       	ldi	r19, 0x8B	; 139
    3ea8:	4d e9       	ldi	r20, 0x9D	; 157
    3eaa:	50 e4       	ldi	r21, 0x40	; 64
    3eac:	0f 2e       	mov	r0, r31
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	ef 2e       	mov	r14, r31
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	ff 2e       	mov	r15, r31
    3eb6:	f0 e8       	ldi	r31, 0x80	; 128
    3eb8:	0f 2f       	mov	r16, r31
    3eba:	ff eb       	ldi	r31, 0xBF	; 191
    3ebc:	1f 2f       	mov	r17, r31
    3ebe:	f0 2d       	mov	r31, r0
    3ec0:	57 01       	movw	r10, r14
    3ec2:	68 01       	movw	r12, r16
    3ec4:	0e 94 89 03 	call	0x712	; 0x712 <gotoxy>

	while( head_moving() );	
    3ec8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <head_moving>
    3ecc:	89 2b       	or	r24, r25
    3ece:	e1 f7       	brne	.-8      	; 0x3ec8 <goto_vacpad+0x1e6>
    3ed0:	80 e9       	ldi	r24, 0x90	; 144
    3ed2:	91 e0       	ldi	r25, 0x01	; 1
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	f1 f7       	brne	.-4      	; 0x3ed4 <goto_vacpad+0x1f2>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <vacuum>
    3ee0:	88 e8       	ldi	r24, 0x88	; 136
    3ee2:	93 e1       	ldi	r25, 0x13	; 19
    3ee4:	20 e9       	ldi	r18, 0x90	; 144
    3ee6:	31 e0       	ldi	r19, 0x01	; 1
    3ee8:	f9 01       	movw	r30, r18
    3eea:	31 97       	sbiw	r30, 0x01	; 1
    3eec:	f1 f7       	brne	.-4      	; 0x3eea <goto_vacpad+0x208>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef0:	d9 f7       	brne	.-10     	; 0x3ee8 <goto_vacpad+0x206>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3efa:	88 23       	and	r24, r24
    3efc:	29 f4       	brne	.+10     	; 0x3f08 <goto_vacpad+0x226>

		vacuum ( 0 );
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <vacuum>
    3f06:	20 c0       	rjmp	.+64     	; 0x3f48 <goto_vacpad+0x266>
		return GCSTATUS_FAILED_COMMAND;	
    3f08:	80 e1       	ldi	r24, 0x10	; 16
    3f0a:	97 e2       	ldi	r25, 0x27	; 39
    3f0c:	20 e9       	ldi	r18, 0x90	; 144
    3f0e:	31 e0       	ldi	r19, 0x01	; 1
    3f10:	f9 01       	movw	r30, r18
    3f12:	31 97       	sbiw	r30, 0x01	; 1
    3f14:	f1 f7       	brne	.-4      	; 0x3f12 <goto_vacpad+0x230>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f18:	d9 f7       	brne	.-10     	; 0x3f10 <goto_vacpad+0x22e>
	}

   _delay_ms( 1000 );

	// check vacuum
	if( vacuum_state() ) {
    3f1a:	4f 99       	sbic	0x09, 7	; 9
    3f1c:	03 c0       	rjmp	.+6      	; 0x3f24 <goto_vacpad+0x242>

		// vacuum is blocked
		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    3f1e:	99 20       	and	r9, r9
    3f20:	21 f0       	breq	.+8      	; 0x3f2a <goto_vacpad+0x248>
    3f22:	12 c0       	rjmp	.+36     	; 0x3f48 <goto_vacpad+0x266>
	} else {

		// vacuum is free

		// were we dropping off?
		if( hasTool == TRUE ) { 
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	98 16       	cp	r9, r24
    3f28:	79 f4       	brne	.+30     	; 0x3f48 <goto_vacpad+0x266>
		}

	}	

// vacuum off
	vacuum( 0 );
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <head_down>
    3f3a:	88 23       	and	r24, r24
    3f3c:	29 f0       	breq	.+10     	; 0x3f48 <goto_vacpad+0x266>

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    3f3e:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <is_head_down>
    3f42:	88 23       	and	r24, r24
    3f44:	e1 f7       	brne	.-8      	; 0x3f3e <goto_vacpad+0x25c>
    3f46:	01 c0       	rjmp	.+2      	; 0x3f4a <goto_vacpad+0x268>
    3f48:	85 e0       	ldi	r24, 0x05	; 5
	
	return GCSTATUS_OK;

}
    3f4a:	1f 91       	pop	r17
    3f4c:	0f 91       	pop	r16
    3f4e:	ff 90       	pop	r15
    3f50:	ef 90       	pop	r14
    3f52:	df 90       	pop	r13
    3f54:	cf 90       	pop	r12
    3f56:	bf 90       	pop	r11
    3f58:	af 90       	pop	r10
    3f5a:	9f 90       	pop	r9
    3f5c:	8f 90       	pop	r8
    3f5e:	08 95       	ret

00003f60 <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    3f60:	4f 99       	sbic	0x09, 7	; 9
    3f62:	03 c0       	rjmp	.+6      	; 0x3f6a <vacuum_test+0xa>
		
		printPgmString(PSTR("yes\r\n"));
    3f64:	84 e2       	ldi	r24, 0x24	; 36
    3f66:	95 e0       	ldi	r25, 0x05	; 5
    3f68:	02 c0       	rjmp	.+4      	; 0x3f6e <vacuum_test+0xe>
	} else {
		printPgmString(PSTR("no\r\n"));
    3f6a:	8f e1       	ldi	r24, 0x1F	; 31
    3f6c:	95 e0       	ldi	r25, 0x05	; 5
    3f6e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <printPgmString>
    3f72:	08 95       	ret

00003f74 <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    3f74:	e7 e0       	ldi	r30, 0x07	; 7
    3f76:	f1 e0       	ldi	r31, 0x01	; 1
    3f78:	80 81       	ld	r24, Z
    3f7a:	80 68       	ori	r24, 0x80	; 128
    3f7c:	80 83       	st	Z, r24
}
    3f7e:	08 95       	ret

00003f80 <tape_knock>:
{
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    3f80:	80 91 4a 05 	lds	r24, 0x054A
    3f84:	88 23       	and	r24, r24
    3f86:	41 f1       	breq	.+80     	; 0x3fd8 <tape_knock+0x58>
   		return ;
   	}


	while( head_moving() );
    3f88:	0e 94 32 17 	call	0x2e64	; 0x2e64 <head_moving>
    3f8c:	89 2b       	or	r24, r25
    3f8e:	e1 f7       	brne	.-8      	; 0x3f88 <tape_knock+0x8>

	 set_busy( TRUE );
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 99 15 	call	0x2b32	; 0x2b32 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    3f98:	80 91 08 01 	lds	r24, 0x0108
    3f9c:	8f 77       	andi	r24, 0x7F	; 127
    3f9e:	80 93 08 01 	sts	0x0108, r24
    3fa2:	80 ed       	ldi	r24, 0xD0	; 208
    3fa4:	97 e0       	ldi	r25, 0x07	; 7
    3fa6:	20 e9       	ldi	r18, 0x90	; 144
    3fa8:	31 e0       	ldi	r19, 0x01	; 1
    3faa:	f9 01       	movw	r30, r18
    3fac:	31 97       	sbiw	r30, 0x01	; 1
    3fae:	f1 f7       	brne	.-4      	; 0x3fac <tape_knock+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb2:	d9 f7       	brne	.-10     	; 0x3faa <tape_knock+0x2a>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    3fb4:	80 91 08 01 	lds	r24, 0x0108
    3fb8:	80 68       	ori	r24, 0x80	; 128
    3fba:	80 93 08 01 	sts	0x0108, r24
    3fbe:	80 ed       	ldi	r24, 0xD0	; 208
    3fc0:	97 e0       	ldi	r25, 0x07	; 7
    3fc2:	20 e9       	ldi	r18, 0x90	; 144
    3fc4:	31 e0       	ldi	r19, 0x01	; 1
    3fc6:	f9 01       	movw	r30, r18
    3fc8:	31 97       	sbiw	r30, 0x01	; 1
    3fca:	f1 f7       	brne	.-4      	; 0x3fc8 <tape_knock+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fce:	d9 f7       	brne	.-10     	; 0x3fc6 <tape_knock+0x46>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <set_busy>
    3fd8:	08 95       	ret

00003fda <__subsf3>:
    3fda:	50 58       	subi	r21, 0x80	; 128

00003fdc <__addsf3>:
    3fdc:	bb 27       	eor	r27, r27
    3fde:	aa 27       	eor	r26, r26
    3fe0:	0e d0       	rcall	.+28     	; 0x3ffe <__addsf3x>
    3fe2:	11 c2       	rjmp	.+1058   	; 0x4406 <__fp_round>
    3fe4:	02 d2       	rcall	.+1028   	; 0x43ea <__fp_pscA>
    3fe6:	30 f0       	brcs	.+12     	; 0x3ff4 <__addsf3+0x18>
    3fe8:	07 d2       	rcall	.+1038   	; 0x43f8 <__fp_pscB>
    3fea:	20 f0       	brcs	.+8      	; 0x3ff4 <__addsf3+0x18>
    3fec:	31 f4       	brne	.+12     	; 0x3ffa <__addsf3+0x1e>
    3fee:	9f 3f       	cpi	r25, 0xFF	; 255
    3ff0:	11 f4       	brne	.+4      	; 0x3ff6 <__addsf3+0x1a>
    3ff2:	1e f4       	brtc	.+6      	; 0x3ffa <__addsf3+0x1e>
    3ff4:	d2 c1       	rjmp	.+932    	; 0x439a <__fp_nan>
    3ff6:	0e f4       	brtc	.+2      	; 0x3ffa <__addsf3+0x1e>
    3ff8:	e0 95       	com	r30
    3ffa:	e7 fb       	bst	r30, 7
    3ffc:	9f c1       	rjmp	.+830    	; 0x433c <__fp_inf>

00003ffe <__addsf3x>:
    3ffe:	e9 2f       	mov	r30, r25
    4000:	13 d2       	rcall	.+1062   	; 0x4428 <__fp_split3>
    4002:	80 f3       	brcs	.-32     	; 0x3fe4 <__addsf3+0x8>
    4004:	ba 17       	cp	r27, r26
    4006:	62 07       	cpc	r22, r18
    4008:	73 07       	cpc	r23, r19
    400a:	84 07       	cpc	r24, r20
    400c:	95 07       	cpc	r25, r21
    400e:	18 f0       	brcs	.+6      	; 0x4016 <__addsf3x+0x18>
    4010:	71 f4       	brne	.+28     	; 0x402e <__addsf3x+0x30>
    4012:	9e f5       	brtc	.+102    	; 0x407a <__addsf3x+0x7c>
    4014:	42 c2       	rjmp	.+1156   	; 0x449a <__fp_zero>
    4016:	0e f4       	brtc	.+2      	; 0x401a <__addsf3x+0x1c>
    4018:	e0 95       	com	r30
    401a:	0b 2e       	mov	r0, r27
    401c:	ba 2f       	mov	r27, r26
    401e:	a0 2d       	mov	r26, r0
    4020:	0b 01       	movw	r0, r22
    4022:	b9 01       	movw	r22, r18
    4024:	90 01       	movw	r18, r0
    4026:	0c 01       	movw	r0, r24
    4028:	ca 01       	movw	r24, r20
    402a:	a0 01       	movw	r20, r0
    402c:	11 24       	eor	r1, r1
    402e:	ff 27       	eor	r31, r31
    4030:	59 1b       	sub	r21, r25
    4032:	99 f0       	breq	.+38     	; 0x405a <__addsf3x+0x5c>
    4034:	59 3f       	cpi	r21, 0xF9	; 249
    4036:	50 f4       	brcc	.+20     	; 0x404c <__addsf3x+0x4e>
    4038:	50 3e       	cpi	r21, 0xE0	; 224
    403a:	68 f1       	brcs	.+90     	; 0x4096 <__addsf3x+0x98>
    403c:	1a 16       	cp	r1, r26
    403e:	f0 40       	sbci	r31, 0x00	; 0
    4040:	a2 2f       	mov	r26, r18
    4042:	23 2f       	mov	r18, r19
    4044:	34 2f       	mov	r19, r20
    4046:	44 27       	eor	r20, r20
    4048:	58 5f       	subi	r21, 0xF8	; 248
    404a:	f3 cf       	rjmp	.-26     	; 0x4032 <__addsf3x+0x34>
    404c:	46 95       	lsr	r20
    404e:	37 95       	ror	r19
    4050:	27 95       	ror	r18
    4052:	a7 95       	ror	r26
    4054:	f0 40       	sbci	r31, 0x00	; 0
    4056:	53 95       	inc	r21
    4058:	c9 f7       	brne	.-14     	; 0x404c <__addsf3x+0x4e>
    405a:	7e f4       	brtc	.+30     	; 0x407a <__addsf3x+0x7c>
    405c:	1f 16       	cp	r1, r31
    405e:	ba 0b       	sbc	r27, r26
    4060:	62 0b       	sbc	r22, r18
    4062:	73 0b       	sbc	r23, r19
    4064:	84 0b       	sbc	r24, r20
    4066:	ba f0       	brmi	.+46     	; 0x4096 <__addsf3x+0x98>
    4068:	91 50       	subi	r25, 0x01	; 1
    406a:	a1 f0       	breq	.+40     	; 0x4094 <__addsf3x+0x96>
    406c:	ff 0f       	add	r31, r31
    406e:	bb 1f       	adc	r27, r27
    4070:	66 1f       	adc	r22, r22
    4072:	77 1f       	adc	r23, r23
    4074:	88 1f       	adc	r24, r24
    4076:	c2 f7       	brpl	.-16     	; 0x4068 <__addsf3x+0x6a>
    4078:	0e c0       	rjmp	.+28     	; 0x4096 <__addsf3x+0x98>
    407a:	ba 0f       	add	r27, r26
    407c:	62 1f       	adc	r22, r18
    407e:	73 1f       	adc	r23, r19
    4080:	84 1f       	adc	r24, r20
    4082:	48 f4       	brcc	.+18     	; 0x4096 <__addsf3x+0x98>
    4084:	87 95       	ror	r24
    4086:	77 95       	ror	r23
    4088:	67 95       	ror	r22
    408a:	b7 95       	ror	r27
    408c:	f7 95       	ror	r31
    408e:	9e 3f       	cpi	r25, 0xFE	; 254
    4090:	08 f0       	brcs	.+2      	; 0x4094 <__addsf3x+0x96>
    4092:	b3 cf       	rjmp	.-154    	; 0x3ffa <__addsf3+0x1e>
    4094:	93 95       	inc	r25
    4096:	88 0f       	add	r24, r24
    4098:	08 f0       	brcs	.+2      	; 0x409c <__addsf3x+0x9e>
    409a:	99 27       	eor	r25, r25
    409c:	ee 0f       	add	r30, r30
    409e:	97 95       	ror	r25
    40a0:	87 95       	ror	r24
    40a2:	08 95       	ret

000040a4 <atan>:
    40a4:	df 93       	push	r29
    40a6:	dd 27       	eor	r29, r29
    40a8:	b9 2f       	mov	r27, r25
    40aa:	bf 77       	andi	r27, 0x7F	; 127
    40ac:	40 e8       	ldi	r20, 0x80	; 128
    40ae:	5f e3       	ldi	r21, 0x3F	; 63
    40b0:	16 16       	cp	r1, r22
    40b2:	17 06       	cpc	r1, r23
    40b4:	48 07       	cpc	r20, r24
    40b6:	5b 07       	cpc	r21, r27
    40b8:	10 f4       	brcc	.+4      	; 0x40be <atan+0x1a>
    40ba:	d9 2f       	mov	r29, r25
    40bc:	f9 d1       	rcall	.+1010   	; 0x44b0 <inverse>
    40be:	9f 93       	push	r25
    40c0:	8f 93       	push	r24
    40c2:	7f 93       	push	r23
    40c4:	6f 93       	push	r22
    40c6:	23 d3       	rcall	.+1606   	; 0x470e <square>
    40c8:	ee e5       	ldi	r30, 0x5E	; 94
    40ca:	f1 e0       	ldi	r31, 0x01	; 1
    40cc:	69 d1       	rcall	.+722    	; 0x43a0 <__fp_powser>
    40ce:	9b d1       	rcall	.+822    	; 0x4406 <__fp_round>
    40d0:	2f 91       	pop	r18
    40d2:	3f 91       	pop	r19
    40d4:	4f 91       	pop	r20
    40d6:	5f 91       	pop	r21
    40d8:	61 d2       	rcall	.+1218   	; 0x459c <__mulsf3x>
    40da:	dd 23       	and	r29, r29
    40dc:	49 f0       	breq	.+18     	; 0x40f0 <atan+0x4c>
    40de:	90 58       	subi	r25, 0x80	; 128
    40e0:	a2 ea       	ldi	r26, 0xA2	; 162
    40e2:	2a ed       	ldi	r18, 0xDA	; 218
    40e4:	3f e0       	ldi	r19, 0x0F	; 15
    40e6:	49 ec       	ldi	r20, 0xC9	; 201
    40e8:	5f e3       	ldi	r21, 0x3F	; 63
    40ea:	d0 78       	andi	r29, 0x80	; 128
    40ec:	5d 27       	eor	r21, r29
    40ee:	87 df       	rcall	.-242    	; 0x3ffe <__addsf3x>
    40f0:	df 91       	pop	r29
    40f2:	89 c1       	rjmp	.+786    	; 0x4406 <__fp_round>

000040f4 <ceil>:
    40f4:	bb d1       	rcall	.+886    	; 0x446c <__fp_trunc>
    40f6:	80 f0       	brcs	.+32     	; 0x4118 <ceil+0x24>
    40f8:	9f 37       	cpi	r25, 0x7F	; 127
    40fa:	40 f4       	brcc	.+16     	; 0x410c <ceil+0x18>
    40fc:	91 11       	cpse	r25, r1
    40fe:	0e f4       	brtc	.+2      	; 0x4102 <ceil+0xe>
    4100:	cd c1       	rjmp	.+922    	; 0x449c <__fp_szero>
    4102:	60 e0       	ldi	r22, 0x00	; 0
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	80 e8       	ldi	r24, 0x80	; 128
    4108:	9f e3       	ldi	r25, 0x3F	; 63
    410a:	08 95       	ret
    410c:	26 f0       	brts	.+8      	; 0x4116 <ceil+0x22>
    410e:	1b 16       	cp	r1, r27
    4110:	61 1d       	adc	r22, r1
    4112:	71 1d       	adc	r23, r1
    4114:	81 1d       	adc	r24, r1
    4116:	18 c1       	rjmp	.+560    	; 0x4348 <__fp_mintl>
    4118:	32 c1       	rjmp	.+612    	; 0x437e <__fp_mpack>

0000411a <__cmpsf2>:
    411a:	ec d0       	rcall	.+472    	; 0x42f4 <__fp_cmp>
    411c:	08 f4       	brcc	.+2      	; 0x4120 <__cmpsf2+0x6>
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	08 95       	ret

00004122 <__divsf3>:
    4122:	0c d0       	rcall	.+24     	; 0x413c <__divsf3x>
    4124:	70 c1       	rjmp	.+736    	; 0x4406 <__fp_round>
    4126:	68 d1       	rcall	.+720    	; 0x43f8 <__fp_pscB>
    4128:	40 f0       	brcs	.+16     	; 0x413a <__divsf3+0x18>
    412a:	5f d1       	rcall	.+702    	; 0x43ea <__fp_pscA>
    412c:	30 f0       	brcs	.+12     	; 0x413a <__divsf3+0x18>
    412e:	21 f4       	brne	.+8      	; 0x4138 <__divsf3+0x16>
    4130:	5f 3f       	cpi	r21, 0xFF	; 255
    4132:	19 f0       	breq	.+6      	; 0x413a <__divsf3+0x18>
    4134:	03 c1       	rjmp	.+518    	; 0x433c <__fp_inf>
    4136:	51 11       	cpse	r21, r1
    4138:	b1 c1       	rjmp	.+866    	; 0x449c <__fp_szero>
    413a:	2f c1       	rjmp	.+606    	; 0x439a <__fp_nan>

0000413c <__divsf3x>:
    413c:	75 d1       	rcall	.+746    	; 0x4428 <__fp_split3>
    413e:	98 f3       	brcs	.-26     	; 0x4126 <__divsf3+0x4>

00004140 <__divsf3_pse>:
    4140:	99 23       	and	r25, r25
    4142:	c9 f3       	breq	.-14     	; 0x4136 <__divsf3+0x14>
    4144:	55 23       	and	r21, r21
    4146:	b1 f3       	breq	.-20     	; 0x4134 <__divsf3+0x12>
    4148:	95 1b       	sub	r25, r21
    414a:	55 0b       	sbc	r21, r21
    414c:	bb 27       	eor	r27, r27
    414e:	aa 27       	eor	r26, r26
    4150:	62 17       	cp	r22, r18
    4152:	73 07       	cpc	r23, r19
    4154:	84 07       	cpc	r24, r20
    4156:	38 f0       	brcs	.+14     	; 0x4166 <__divsf3_pse+0x26>
    4158:	9f 5f       	subi	r25, 0xFF	; 255
    415a:	5f 4f       	sbci	r21, 0xFF	; 255
    415c:	22 0f       	add	r18, r18
    415e:	33 1f       	adc	r19, r19
    4160:	44 1f       	adc	r20, r20
    4162:	aa 1f       	adc	r26, r26
    4164:	a9 f3       	breq	.-22     	; 0x4150 <__divsf3_pse+0x10>
    4166:	33 d0       	rcall	.+102    	; 0x41ce <__divsf3_pse+0x8e>
    4168:	0e 2e       	mov	r0, r30
    416a:	3a f0       	brmi	.+14     	; 0x417a <__divsf3_pse+0x3a>
    416c:	e0 e8       	ldi	r30, 0x80	; 128
    416e:	30 d0       	rcall	.+96     	; 0x41d0 <__divsf3_pse+0x90>
    4170:	91 50       	subi	r25, 0x01	; 1
    4172:	50 40       	sbci	r21, 0x00	; 0
    4174:	e6 95       	lsr	r30
    4176:	00 1c       	adc	r0, r0
    4178:	ca f7       	brpl	.-14     	; 0x416c <__divsf3_pse+0x2c>
    417a:	29 d0       	rcall	.+82     	; 0x41ce <__divsf3_pse+0x8e>
    417c:	fe 2f       	mov	r31, r30
    417e:	27 d0       	rcall	.+78     	; 0x41ce <__divsf3_pse+0x8e>
    4180:	66 0f       	add	r22, r22
    4182:	77 1f       	adc	r23, r23
    4184:	88 1f       	adc	r24, r24
    4186:	bb 1f       	adc	r27, r27
    4188:	26 17       	cp	r18, r22
    418a:	37 07       	cpc	r19, r23
    418c:	48 07       	cpc	r20, r24
    418e:	ab 07       	cpc	r26, r27
    4190:	b0 e8       	ldi	r27, 0x80	; 128
    4192:	09 f0       	breq	.+2      	; 0x4196 <__divsf3_pse+0x56>
    4194:	bb 0b       	sbc	r27, r27
    4196:	80 2d       	mov	r24, r0
    4198:	bf 01       	movw	r22, r30
    419a:	ff 27       	eor	r31, r31
    419c:	93 58       	subi	r25, 0x83	; 131
    419e:	5f 4f       	sbci	r21, 0xFF	; 255
    41a0:	2a f0       	brmi	.+10     	; 0x41ac <__divsf3_pse+0x6c>
    41a2:	9e 3f       	cpi	r25, 0xFE	; 254
    41a4:	51 05       	cpc	r21, r1
    41a6:	68 f0       	brcs	.+26     	; 0x41c2 <__divsf3_pse+0x82>
    41a8:	c9 c0       	rjmp	.+402    	; 0x433c <__fp_inf>
    41aa:	78 c1       	rjmp	.+752    	; 0x449c <__fp_szero>
    41ac:	5f 3f       	cpi	r21, 0xFF	; 255
    41ae:	ec f3       	brlt	.-6      	; 0x41aa <__divsf3_pse+0x6a>
    41b0:	98 3e       	cpi	r25, 0xE8	; 232
    41b2:	dc f3       	brlt	.-10     	; 0x41aa <__divsf3_pse+0x6a>
    41b4:	86 95       	lsr	r24
    41b6:	77 95       	ror	r23
    41b8:	67 95       	ror	r22
    41ba:	b7 95       	ror	r27
    41bc:	f7 95       	ror	r31
    41be:	9f 5f       	subi	r25, 0xFF	; 255
    41c0:	c9 f7       	brne	.-14     	; 0x41b4 <__divsf3_pse+0x74>
    41c2:	88 0f       	add	r24, r24
    41c4:	91 1d       	adc	r25, r1
    41c6:	96 95       	lsr	r25
    41c8:	87 95       	ror	r24
    41ca:	97 f9       	bld	r25, 7
    41cc:	08 95       	ret
    41ce:	e1 e0       	ldi	r30, 0x01	; 1
    41d0:	66 0f       	add	r22, r22
    41d2:	77 1f       	adc	r23, r23
    41d4:	88 1f       	adc	r24, r24
    41d6:	bb 1f       	adc	r27, r27
    41d8:	62 17       	cp	r22, r18
    41da:	73 07       	cpc	r23, r19
    41dc:	84 07       	cpc	r24, r20
    41de:	ba 07       	cpc	r27, r26
    41e0:	20 f0       	brcs	.+8      	; 0x41ea <__divsf3_pse+0xaa>
    41e2:	62 1b       	sub	r22, r18
    41e4:	73 0b       	sbc	r23, r19
    41e6:	84 0b       	sbc	r24, r20
    41e8:	ba 0b       	sbc	r27, r26
    41ea:	ee 1f       	adc	r30, r30
    41ec:	88 f7       	brcc	.-30     	; 0x41d0 <__divsf3_pse+0x90>
    41ee:	e0 95       	com	r30
    41f0:	08 95       	ret

000041f2 <__fixsfsi>:
    41f2:	04 d0       	rcall	.+8      	; 0x41fc <__fixunssfsi>
    41f4:	68 94       	set
    41f6:	b1 11       	cpse	r27, r1
    41f8:	51 c1       	rjmp	.+674    	; 0x449c <__fp_szero>
    41fa:	08 95       	ret

000041fc <__fixunssfsi>:
    41fc:	1d d1       	rcall	.+570    	; 0x4438 <__fp_splitA>
    41fe:	88 f0       	brcs	.+34     	; 0x4222 <__fixunssfsi+0x26>
    4200:	9f 57       	subi	r25, 0x7F	; 127
    4202:	90 f0       	brcs	.+36     	; 0x4228 <__fixunssfsi+0x2c>
    4204:	b9 2f       	mov	r27, r25
    4206:	99 27       	eor	r25, r25
    4208:	b7 51       	subi	r27, 0x17	; 23
    420a:	a0 f0       	brcs	.+40     	; 0x4234 <__fixunssfsi+0x38>
    420c:	d1 f0       	breq	.+52     	; 0x4242 <__fixunssfsi+0x46>
    420e:	66 0f       	add	r22, r22
    4210:	77 1f       	adc	r23, r23
    4212:	88 1f       	adc	r24, r24
    4214:	99 1f       	adc	r25, r25
    4216:	1a f0       	brmi	.+6      	; 0x421e <__fixunssfsi+0x22>
    4218:	ba 95       	dec	r27
    421a:	c9 f7       	brne	.-14     	; 0x420e <__fixunssfsi+0x12>
    421c:	12 c0       	rjmp	.+36     	; 0x4242 <__fixunssfsi+0x46>
    421e:	b1 30       	cpi	r27, 0x01	; 1
    4220:	81 f0       	breq	.+32     	; 0x4242 <__fixunssfsi+0x46>
    4222:	3b d1       	rcall	.+630    	; 0x449a <__fp_zero>
    4224:	b1 e0       	ldi	r27, 0x01	; 1
    4226:	08 95       	ret
    4228:	38 c1       	rjmp	.+624    	; 0x449a <__fp_zero>
    422a:	67 2f       	mov	r22, r23
    422c:	78 2f       	mov	r23, r24
    422e:	88 27       	eor	r24, r24
    4230:	b8 5f       	subi	r27, 0xF8	; 248
    4232:	39 f0       	breq	.+14     	; 0x4242 <__fixunssfsi+0x46>
    4234:	b9 3f       	cpi	r27, 0xF9	; 249
    4236:	cc f3       	brlt	.-14     	; 0x422a <__fixunssfsi+0x2e>
    4238:	86 95       	lsr	r24
    423a:	77 95       	ror	r23
    423c:	67 95       	ror	r22
    423e:	b3 95       	inc	r27
    4240:	d9 f7       	brne	.-10     	; 0x4238 <__fixunssfsi+0x3c>
    4242:	3e f4       	brtc	.+14     	; 0x4252 <__fixunssfsi+0x56>
    4244:	90 95       	com	r25
    4246:	80 95       	com	r24
    4248:	70 95       	com	r23
    424a:	61 95       	neg	r22
    424c:	7f 4f       	sbci	r23, 0xFF	; 255
    424e:	8f 4f       	sbci	r24, 0xFF	; 255
    4250:	9f 4f       	sbci	r25, 0xFF	; 255
    4252:	08 95       	ret

00004254 <__floatunsisf>:
    4254:	e8 94       	clt
    4256:	09 c0       	rjmp	.+18     	; 0x426a <__floatsisf+0x12>

00004258 <__floatsisf>:
    4258:	97 fb       	bst	r25, 7
    425a:	3e f4       	brtc	.+14     	; 0x426a <__floatsisf+0x12>
    425c:	90 95       	com	r25
    425e:	80 95       	com	r24
    4260:	70 95       	com	r23
    4262:	61 95       	neg	r22
    4264:	7f 4f       	sbci	r23, 0xFF	; 255
    4266:	8f 4f       	sbci	r24, 0xFF	; 255
    4268:	9f 4f       	sbci	r25, 0xFF	; 255
    426a:	99 23       	and	r25, r25
    426c:	a9 f0       	breq	.+42     	; 0x4298 <__floatsisf+0x40>
    426e:	f9 2f       	mov	r31, r25
    4270:	96 e9       	ldi	r25, 0x96	; 150
    4272:	bb 27       	eor	r27, r27
    4274:	93 95       	inc	r25
    4276:	f6 95       	lsr	r31
    4278:	87 95       	ror	r24
    427a:	77 95       	ror	r23
    427c:	67 95       	ror	r22
    427e:	b7 95       	ror	r27
    4280:	f1 11       	cpse	r31, r1
    4282:	f8 cf       	rjmp	.-16     	; 0x4274 <__floatsisf+0x1c>
    4284:	fa f4       	brpl	.+62     	; 0x42c4 <__floatsisf+0x6c>
    4286:	bb 0f       	add	r27, r27
    4288:	11 f4       	brne	.+4      	; 0x428e <__floatsisf+0x36>
    428a:	60 ff       	sbrs	r22, 0
    428c:	1b c0       	rjmp	.+54     	; 0x42c4 <__floatsisf+0x6c>
    428e:	6f 5f       	subi	r22, 0xFF	; 255
    4290:	7f 4f       	sbci	r23, 0xFF	; 255
    4292:	8f 4f       	sbci	r24, 0xFF	; 255
    4294:	9f 4f       	sbci	r25, 0xFF	; 255
    4296:	16 c0       	rjmp	.+44     	; 0x42c4 <__floatsisf+0x6c>
    4298:	88 23       	and	r24, r24
    429a:	11 f0       	breq	.+4      	; 0x42a0 <__floatsisf+0x48>
    429c:	96 e9       	ldi	r25, 0x96	; 150
    429e:	11 c0       	rjmp	.+34     	; 0x42c2 <__floatsisf+0x6a>
    42a0:	77 23       	and	r23, r23
    42a2:	21 f0       	breq	.+8      	; 0x42ac <__floatsisf+0x54>
    42a4:	9e e8       	ldi	r25, 0x8E	; 142
    42a6:	87 2f       	mov	r24, r23
    42a8:	76 2f       	mov	r23, r22
    42aa:	05 c0       	rjmp	.+10     	; 0x42b6 <__floatsisf+0x5e>
    42ac:	66 23       	and	r22, r22
    42ae:	71 f0       	breq	.+28     	; 0x42cc <__floatsisf+0x74>
    42b0:	96 e8       	ldi	r25, 0x86	; 134
    42b2:	86 2f       	mov	r24, r22
    42b4:	70 e0       	ldi	r23, 0x00	; 0
    42b6:	60 e0       	ldi	r22, 0x00	; 0
    42b8:	2a f0       	brmi	.+10     	; 0x42c4 <__floatsisf+0x6c>
    42ba:	9a 95       	dec	r25
    42bc:	66 0f       	add	r22, r22
    42be:	77 1f       	adc	r23, r23
    42c0:	88 1f       	adc	r24, r24
    42c2:	da f7       	brpl	.-10     	; 0x42ba <__floatsisf+0x62>
    42c4:	88 0f       	add	r24, r24
    42c6:	96 95       	lsr	r25
    42c8:	87 95       	ror	r24
    42ca:	97 f9       	bld	r25, 7
    42cc:	08 95       	ret

000042ce <floor>:
    42ce:	ce d0       	rcall	.+412    	; 0x446c <__fp_trunc>
    42d0:	80 f0       	brcs	.+32     	; 0x42f2 <floor+0x24>
    42d2:	9f 37       	cpi	r25, 0x7F	; 127
    42d4:	40 f4       	brcc	.+16     	; 0x42e6 <floor+0x18>
    42d6:	91 11       	cpse	r25, r1
    42d8:	0e f0       	brts	.+2      	; 0x42dc <floor+0xe>
    42da:	e0 c0       	rjmp	.+448    	; 0x449c <__fp_szero>
    42dc:	60 e0       	ldi	r22, 0x00	; 0
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	80 e8       	ldi	r24, 0x80	; 128
    42e2:	9f eb       	ldi	r25, 0xBF	; 191
    42e4:	08 95       	ret
    42e6:	26 f4       	brtc	.+8      	; 0x42f0 <floor+0x22>
    42e8:	1b 16       	cp	r1, r27
    42ea:	61 1d       	adc	r22, r1
    42ec:	71 1d       	adc	r23, r1
    42ee:	81 1d       	adc	r24, r1
    42f0:	2b c0       	rjmp	.+86     	; 0x4348 <__fp_mintl>
    42f2:	45 c0       	rjmp	.+138    	; 0x437e <__fp_mpack>

000042f4 <__fp_cmp>:
    42f4:	99 0f       	add	r25, r25
    42f6:	00 08       	sbc	r0, r0
    42f8:	55 0f       	add	r21, r21
    42fa:	aa 0b       	sbc	r26, r26
    42fc:	e0 e8       	ldi	r30, 0x80	; 128
    42fe:	fe ef       	ldi	r31, 0xFE	; 254
    4300:	16 16       	cp	r1, r22
    4302:	17 06       	cpc	r1, r23
    4304:	e8 07       	cpc	r30, r24
    4306:	f9 07       	cpc	r31, r25
    4308:	c0 f0       	brcs	.+48     	; 0x433a <__fp_cmp+0x46>
    430a:	12 16       	cp	r1, r18
    430c:	13 06       	cpc	r1, r19
    430e:	e4 07       	cpc	r30, r20
    4310:	f5 07       	cpc	r31, r21
    4312:	98 f0       	brcs	.+38     	; 0x433a <__fp_cmp+0x46>
    4314:	62 1b       	sub	r22, r18
    4316:	73 0b       	sbc	r23, r19
    4318:	84 0b       	sbc	r24, r20
    431a:	95 0b       	sbc	r25, r21
    431c:	39 f4       	brne	.+14     	; 0x432c <__fp_cmp+0x38>
    431e:	0a 26       	eor	r0, r26
    4320:	61 f0       	breq	.+24     	; 0x433a <__fp_cmp+0x46>
    4322:	23 2b       	or	r18, r19
    4324:	24 2b       	or	r18, r20
    4326:	25 2b       	or	r18, r21
    4328:	21 f4       	brne	.+8      	; 0x4332 <__fp_cmp+0x3e>
    432a:	08 95       	ret
    432c:	0a 26       	eor	r0, r26
    432e:	09 f4       	brne	.+2      	; 0x4332 <__fp_cmp+0x3e>
    4330:	a1 40       	sbci	r26, 0x01	; 1
    4332:	a6 95       	lsr	r26
    4334:	8f ef       	ldi	r24, 0xFF	; 255
    4336:	81 1d       	adc	r24, r1
    4338:	81 1d       	adc	r24, r1
    433a:	08 95       	ret

0000433c <__fp_inf>:
    433c:	97 f9       	bld	r25, 7
    433e:	9f 67       	ori	r25, 0x7F	; 127
    4340:	80 e8       	ldi	r24, 0x80	; 128
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	60 e0       	ldi	r22, 0x00	; 0
    4346:	08 95       	ret

00004348 <__fp_mintl>:
    4348:	88 23       	and	r24, r24
    434a:	71 f4       	brne	.+28     	; 0x4368 <__fp_mintl+0x20>
    434c:	77 23       	and	r23, r23
    434e:	21 f0       	breq	.+8      	; 0x4358 <__fp_mintl+0x10>
    4350:	98 50       	subi	r25, 0x08	; 8
    4352:	87 2b       	or	r24, r23
    4354:	76 2f       	mov	r23, r22
    4356:	07 c0       	rjmp	.+14     	; 0x4366 <__fp_mintl+0x1e>
    4358:	66 23       	and	r22, r22
    435a:	11 f4       	brne	.+4      	; 0x4360 <__fp_mintl+0x18>
    435c:	99 27       	eor	r25, r25
    435e:	0d c0       	rjmp	.+26     	; 0x437a <__fp_mintl+0x32>
    4360:	90 51       	subi	r25, 0x10	; 16
    4362:	86 2b       	or	r24, r22
    4364:	70 e0       	ldi	r23, 0x00	; 0
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	2a f0       	brmi	.+10     	; 0x4374 <__fp_mintl+0x2c>
    436a:	9a 95       	dec	r25
    436c:	66 0f       	add	r22, r22
    436e:	77 1f       	adc	r23, r23
    4370:	88 1f       	adc	r24, r24
    4372:	da f7       	brpl	.-10     	; 0x436a <__fp_mintl+0x22>
    4374:	88 0f       	add	r24, r24
    4376:	96 95       	lsr	r25
    4378:	87 95       	ror	r24
    437a:	97 f9       	bld	r25, 7
    437c:	08 95       	ret

0000437e <__fp_mpack>:
    437e:	9f 3f       	cpi	r25, 0xFF	; 255
    4380:	31 f0       	breq	.+12     	; 0x438e <__fp_mpack_finite+0xc>

00004382 <__fp_mpack_finite>:
    4382:	91 50       	subi	r25, 0x01	; 1
    4384:	20 f4       	brcc	.+8      	; 0x438e <__fp_mpack_finite+0xc>
    4386:	87 95       	ror	r24
    4388:	77 95       	ror	r23
    438a:	67 95       	ror	r22
    438c:	b7 95       	ror	r27
    438e:	88 0f       	add	r24, r24
    4390:	91 1d       	adc	r25, r1
    4392:	96 95       	lsr	r25
    4394:	87 95       	ror	r24
    4396:	97 f9       	bld	r25, 7
    4398:	08 95       	ret

0000439a <__fp_nan>:
    439a:	9f ef       	ldi	r25, 0xFF	; 255
    439c:	80 ec       	ldi	r24, 0xC0	; 192
    439e:	08 95       	ret

000043a0 <__fp_powser>:
    43a0:	df 93       	push	r29
    43a2:	cf 93       	push	r28
    43a4:	1f 93       	push	r17
    43a6:	0f 93       	push	r16
    43a8:	ff 92       	push	r15
    43aa:	ef 92       	push	r14
    43ac:	df 92       	push	r13
    43ae:	7b 01       	movw	r14, r22
    43b0:	8c 01       	movw	r16, r24
    43b2:	68 94       	set
    43b4:	05 c0       	rjmp	.+10     	; 0x43c0 <__fp_powser+0x20>
    43b6:	da 2e       	mov	r13, r26
    43b8:	ef 01       	movw	r28, r30
    43ba:	f0 d0       	rcall	.+480    	; 0x459c <__mulsf3x>
    43bc:	fe 01       	movw	r30, r28
    43be:	e8 94       	clt
    43c0:	a5 91       	lpm	r26, Z+
    43c2:	25 91       	lpm	r18, Z+
    43c4:	35 91       	lpm	r19, Z+
    43c6:	45 91       	lpm	r20, Z+
    43c8:	55 91       	lpm	r21, Z+
    43ca:	ae f3       	brts	.-22     	; 0x43b6 <__fp_powser+0x16>
    43cc:	ef 01       	movw	r28, r30
    43ce:	17 de       	rcall	.-978    	; 0x3ffe <__addsf3x>
    43d0:	fe 01       	movw	r30, r28
    43d2:	97 01       	movw	r18, r14
    43d4:	a8 01       	movw	r20, r16
    43d6:	da 94       	dec	r13
    43d8:	79 f7       	brne	.-34     	; 0x43b8 <__fp_powser+0x18>
    43da:	df 90       	pop	r13
    43dc:	ef 90       	pop	r14
    43de:	ff 90       	pop	r15
    43e0:	0f 91       	pop	r16
    43e2:	1f 91       	pop	r17
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	08 95       	ret

000043ea <__fp_pscA>:
    43ea:	00 24       	eor	r0, r0
    43ec:	0a 94       	dec	r0
    43ee:	16 16       	cp	r1, r22
    43f0:	17 06       	cpc	r1, r23
    43f2:	18 06       	cpc	r1, r24
    43f4:	09 06       	cpc	r0, r25
    43f6:	08 95       	ret

000043f8 <__fp_pscB>:
    43f8:	00 24       	eor	r0, r0
    43fa:	0a 94       	dec	r0
    43fc:	12 16       	cp	r1, r18
    43fe:	13 06       	cpc	r1, r19
    4400:	14 06       	cpc	r1, r20
    4402:	05 06       	cpc	r0, r21
    4404:	08 95       	ret

00004406 <__fp_round>:
    4406:	09 2e       	mov	r0, r25
    4408:	03 94       	inc	r0
    440a:	00 0c       	add	r0, r0
    440c:	11 f4       	brne	.+4      	; 0x4412 <__fp_round+0xc>
    440e:	88 23       	and	r24, r24
    4410:	52 f0       	brmi	.+20     	; 0x4426 <__fp_round+0x20>
    4412:	bb 0f       	add	r27, r27
    4414:	40 f4       	brcc	.+16     	; 0x4426 <__fp_round+0x20>
    4416:	bf 2b       	or	r27, r31
    4418:	11 f4       	brne	.+4      	; 0x441e <__fp_round+0x18>
    441a:	60 ff       	sbrs	r22, 0
    441c:	04 c0       	rjmp	.+8      	; 0x4426 <__fp_round+0x20>
    441e:	6f 5f       	subi	r22, 0xFF	; 255
    4420:	7f 4f       	sbci	r23, 0xFF	; 255
    4422:	8f 4f       	sbci	r24, 0xFF	; 255
    4424:	9f 4f       	sbci	r25, 0xFF	; 255
    4426:	08 95       	ret

00004428 <__fp_split3>:
    4428:	57 fd       	sbrc	r21, 7
    442a:	90 58       	subi	r25, 0x80	; 128
    442c:	44 0f       	add	r20, r20
    442e:	55 1f       	adc	r21, r21
    4430:	59 f0       	breq	.+22     	; 0x4448 <__fp_splitA+0x10>
    4432:	5f 3f       	cpi	r21, 0xFF	; 255
    4434:	71 f0       	breq	.+28     	; 0x4452 <__fp_splitA+0x1a>
    4436:	47 95       	ror	r20

00004438 <__fp_splitA>:
    4438:	88 0f       	add	r24, r24
    443a:	97 fb       	bst	r25, 7
    443c:	99 1f       	adc	r25, r25
    443e:	61 f0       	breq	.+24     	; 0x4458 <__fp_splitA+0x20>
    4440:	9f 3f       	cpi	r25, 0xFF	; 255
    4442:	79 f0       	breq	.+30     	; 0x4462 <__fp_splitA+0x2a>
    4444:	87 95       	ror	r24
    4446:	08 95       	ret
    4448:	12 16       	cp	r1, r18
    444a:	13 06       	cpc	r1, r19
    444c:	14 06       	cpc	r1, r20
    444e:	55 1f       	adc	r21, r21
    4450:	f2 cf       	rjmp	.-28     	; 0x4436 <__fp_split3+0xe>
    4452:	46 95       	lsr	r20
    4454:	f1 df       	rcall	.-30     	; 0x4438 <__fp_splitA>
    4456:	08 c0       	rjmp	.+16     	; 0x4468 <__fp_splitA+0x30>
    4458:	16 16       	cp	r1, r22
    445a:	17 06       	cpc	r1, r23
    445c:	18 06       	cpc	r1, r24
    445e:	99 1f       	adc	r25, r25
    4460:	f1 cf       	rjmp	.-30     	; 0x4444 <__fp_splitA+0xc>
    4462:	86 95       	lsr	r24
    4464:	71 05       	cpc	r23, r1
    4466:	61 05       	cpc	r22, r1
    4468:	08 94       	sec
    446a:	08 95       	ret

0000446c <__fp_trunc>:
    446c:	e5 df       	rcall	.-54     	; 0x4438 <__fp_splitA>
    446e:	a0 f0       	brcs	.+40     	; 0x4498 <__fp_trunc+0x2c>
    4470:	be e7       	ldi	r27, 0x7E	; 126
    4472:	b9 17       	cp	r27, r25
    4474:	88 f4       	brcc	.+34     	; 0x4498 <__fp_trunc+0x2c>
    4476:	bb 27       	eor	r27, r27
    4478:	9f 38       	cpi	r25, 0x8F	; 143
    447a:	60 f4       	brcc	.+24     	; 0x4494 <__fp_trunc+0x28>
    447c:	16 16       	cp	r1, r22
    447e:	b1 1d       	adc	r27, r1
    4480:	67 2f       	mov	r22, r23
    4482:	78 2f       	mov	r23, r24
    4484:	88 27       	eor	r24, r24
    4486:	98 5f       	subi	r25, 0xF8	; 248
    4488:	f7 cf       	rjmp	.-18     	; 0x4478 <__fp_trunc+0xc>
    448a:	86 95       	lsr	r24
    448c:	77 95       	ror	r23
    448e:	67 95       	ror	r22
    4490:	b1 1d       	adc	r27, r1
    4492:	93 95       	inc	r25
    4494:	96 39       	cpi	r25, 0x96	; 150
    4496:	c8 f3       	brcs	.-14     	; 0x448a <__fp_trunc+0x1e>
    4498:	08 95       	ret

0000449a <__fp_zero>:
    449a:	e8 94       	clt

0000449c <__fp_szero>:
    449c:	bb 27       	eor	r27, r27
    449e:	66 27       	eor	r22, r22
    44a0:	77 27       	eor	r23, r23
    44a2:	cb 01       	movw	r24, r22
    44a4:	97 f9       	bld	r25, 7
    44a6:	08 95       	ret

000044a8 <__gesf2>:
    44a8:	25 df       	rcall	.-438    	; 0x42f4 <__fp_cmp>
    44aa:	08 f4       	brcc	.+2      	; 0x44ae <__gesf2+0x6>
    44ac:	8f ef       	ldi	r24, 0xFF	; 255
    44ae:	08 95       	ret

000044b0 <inverse>:
    44b0:	9b 01       	movw	r18, r22
    44b2:	ac 01       	movw	r20, r24
    44b4:	60 e0       	ldi	r22, 0x00	; 0
    44b6:	70 e0       	ldi	r23, 0x00	; 0
    44b8:	80 e8       	ldi	r24, 0x80	; 128
    44ba:	9f e3       	ldi	r25, 0x3F	; 63
    44bc:	32 ce       	rjmp	.-924    	; 0x4122 <__divsf3>

000044be <lround>:
    44be:	bc df       	rcall	.-136    	; 0x4438 <__fp_splitA>
    44c0:	58 f1       	brcs	.+86     	; 0x4518 <lround+0x5a>
    44c2:	9e 57       	subi	r25, 0x7E	; 126
    44c4:	58 f1       	brcs	.+86     	; 0x451c <lround+0x5e>
    44c6:	98 51       	subi	r25, 0x18	; 24
    44c8:	a0 f0       	brcs	.+40     	; 0x44f2 <lround+0x34>
    44ca:	e9 f0       	breq	.+58     	; 0x4506 <lround+0x48>
    44cc:	98 30       	cpi	r25, 0x08	; 8
    44ce:	20 f5       	brcc	.+72     	; 0x4518 <lround+0x5a>
    44d0:	09 2e       	mov	r0, r25
    44d2:	99 27       	eor	r25, r25
    44d4:	66 0f       	add	r22, r22
    44d6:	77 1f       	adc	r23, r23
    44d8:	88 1f       	adc	r24, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	0a 94       	dec	r0
    44de:	d1 f7       	brne	.-12     	; 0x44d4 <lround+0x16>
    44e0:	12 c0       	rjmp	.+36     	; 0x4506 <lround+0x48>
    44e2:	06 2e       	mov	r0, r22
    44e4:	67 2f       	mov	r22, r23
    44e6:	78 2f       	mov	r23, r24
    44e8:	88 27       	eor	r24, r24
    44ea:	98 5f       	subi	r25, 0xF8	; 248
    44ec:	11 f4       	brne	.+4      	; 0x44f2 <lround+0x34>
    44ee:	00 0c       	add	r0, r0
    44f0:	07 c0       	rjmp	.+14     	; 0x4500 <lround+0x42>
    44f2:	99 3f       	cpi	r25, 0xF9	; 249
    44f4:	b4 f3       	brlt	.-20     	; 0x44e2 <lround+0x24>
    44f6:	86 95       	lsr	r24
    44f8:	77 95       	ror	r23
    44fa:	67 95       	ror	r22
    44fc:	93 95       	inc	r25
    44fe:	d9 f7       	brne	.-10     	; 0x44f6 <lround+0x38>
    4500:	61 1d       	adc	r22, r1
    4502:	71 1d       	adc	r23, r1
    4504:	81 1d       	adc	r24, r1
    4506:	3e f4       	brtc	.+14     	; 0x4516 <lround+0x58>
    4508:	90 95       	com	r25
    450a:	80 95       	com	r24
    450c:	70 95       	com	r23
    450e:	61 95       	neg	r22
    4510:	7f 4f       	sbci	r23, 0xFF	; 255
    4512:	8f 4f       	sbci	r24, 0xFF	; 255
    4514:	9f 4f       	sbci	r25, 0xFF	; 255
    4516:	08 95       	ret
    4518:	68 94       	set
    451a:	c0 cf       	rjmp	.-128    	; 0x449c <__fp_szero>
    451c:	be cf       	rjmp	.-132    	; 0x449a <__fp_zero>

0000451e <modf>:
    451e:	fa 01       	movw	r30, r20
    4520:	dc 01       	movw	r26, r24
    4522:	aa 0f       	add	r26, r26
    4524:	bb 1f       	adc	r27, r27
    4526:	9b 01       	movw	r18, r22
    4528:	ac 01       	movw	r20, r24
    452a:	bf 57       	subi	r27, 0x7F	; 127
    452c:	28 f4       	brcc	.+10     	; 0x4538 <modf+0x1a>
    452e:	22 27       	eor	r18, r18
    4530:	33 27       	eor	r19, r19
    4532:	44 27       	eor	r20, r20
    4534:	50 78       	andi	r21, 0x80	; 128
    4536:	1f c0       	rjmp	.+62     	; 0x4576 <modf+0x58>
    4538:	b7 51       	subi	r27, 0x17	; 23
    453a:	88 f4       	brcc	.+34     	; 0x455e <modf+0x40>
    453c:	ab 2f       	mov	r26, r27
    453e:	00 24       	eor	r0, r0
    4540:	46 95       	lsr	r20
    4542:	37 95       	ror	r19
    4544:	27 95       	ror	r18
    4546:	01 1c       	adc	r0, r1
    4548:	a3 95       	inc	r26
    454a:	d2 f3       	brmi	.-12     	; 0x4540 <modf+0x22>
    454c:	00 20       	and	r0, r0
    454e:	69 f0       	breq	.+26     	; 0x456a <modf+0x4c>
    4550:	22 0f       	add	r18, r18
    4552:	33 1f       	adc	r19, r19
    4554:	44 1f       	adc	r20, r20
    4556:	b3 95       	inc	r27
    4558:	da f3       	brmi	.-10     	; 0x4550 <modf+0x32>
    455a:	0d d0       	rcall	.+26     	; 0x4576 <modf+0x58>
    455c:	3e cd       	rjmp	.-1412   	; 0x3fda <__subsf3>
    455e:	61 30       	cpi	r22, 0x01	; 1
    4560:	71 05       	cpc	r23, r1
    4562:	a0 e8       	ldi	r26, 0x80	; 128
    4564:	8a 07       	cpc	r24, r26
    4566:	b9 46       	sbci	r27, 0x69	; 105
    4568:	30 f4       	brcc	.+12     	; 0x4576 <modf+0x58>
    456a:	9b 01       	movw	r18, r22
    456c:	ac 01       	movw	r20, r24
    456e:	66 27       	eor	r22, r22
    4570:	77 27       	eor	r23, r23
    4572:	88 27       	eor	r24, r24
    4574:	90 78       	andi	r25, 0x80	; 128
    4576:	30 96       	adiw	r30, 0x00	; 0
    4578:	21 f0       	breq	.+8      	; 0x4582 <modf+0x64>
    457a:	20 83       	st	Z, r18
    457c:	31 83       	std	Z+1, r19	; 0x01
    457e:	42 83       	std	Z+2, r20	; 0x02
    4580:	53 83       	std	Z+3, r21	; 0x03
    4582:	08 95       	ret

00004584 <__mulsf3>:
    4584:	0b d0       	rcall	.+22     	; 0x459c <__mulsf3x>
    4586:	3f cf       	rjmp	.-386    	; 0x4406 <__fp_round>
    4588:	30 df       	rcall	.-416    	; 0x43ea <__fp_pscA>
    458a:	28 f0       	brcs	.+10     	; 0x4596 <__mulsf3+0x12>
    458c:	35 df       	rcall	.-406    	; 0x43f8 <__fp_pscB>
    458e:	18 f0       	brcs	.+6      	; 0x4596 <__mulsf3+0x12>
    4590:	95 23       	and	r25, r21
    4592:	09 f0       	breq	.+2      	; 0x4596 <__mulsf3+0x12>
    4594:	d3 ce       	rjmp	.-602    	; 0x433c <__fp_inf>
    4596:	01 cf       	rjmp	.-510    	; 0x439a <__fp_nan>
    4598:	11 24       	eor	r1, r1
    459a:	80 cf       	rjmp	.-256    	; 0x449c <__fp_szero>

0000459c <__mulsf3x>:
    459c:	45 df       	rcall	.-374    	; 0x4428 <__fp_split3>
    459e:	a0 f3       	brcs	.-24     	; 0x4588 <__mulsf3+0x4>

000045a0 <__mulsf3_pse>:
    45a0:	95 9f       	mul	r25, r21
    45a2:	d1 f3       	breq	.-12     	; 0x4598 <__mulsf3+0x14>
    45a4:	95 0f       	add	r25, r21
    45a6:	50 e0       	ldi	r21, 0x00	; 0
    45a8:	55 1f       	adc	r21, r21
    45aa:	62 9f       	mul	r22, r18
    45ac:	f0 01       	movw	r30, r0
    45ae:	72 9f       	mul	r23, r18
    45b0:	bb 27       	eor	r27, r27
    45b2:	f0 0d       	add	r31, r0
    45b4:	b1 1d       	adc	r27, r1
    45b6:	63 9f       	mul	r22, r19
    45b8:	aa 27       	eor	r26, r26
    45ba:	f0 0d       	add	r31, r0
    45bc:	b1 1d       	adc	r27, r1
    45be:	aa 1f       	adc	r26, r26
    45c0:	64 9f       	mul	r22, r20
    45c2:	66 27       	eor	r22, r22
    45c4:	b0 0d       	add	r27, r0
    45c6:	a1 1d       	adc	r26, r1
    45c8:	66 1f       	adc	r22, r22
    45ca:	82 9f       	mul	r24, r18
    45cc:	22 27       	eor	r18, r18
    45ce:	b0 0d       	add	r27, r0
    45d0:	a1 1d       	adc	r26, r1
    45d2:	62 1f       	adc	r22, r18
    45d4:	73 9f       	mul	r23, r19
    45d6:	b0 0d       	add	r27, r0
    45d8:	a1 1d       	adc	r26, r1
    45da:	62 1f       	adc	r22, r18
    45dc:	83 9f       	mul	r24, r19
    45de:	a0 0d       	add	r26, r0
    45e0:	61 1d       	adc	r22, r1
    45e2:	22 1f       	adc	r18, r18
    45e4:	74 9f       	mul	r23, r20
    45e6:	33 27       	eor	r19, r19
    45e8:	a0 0d       	add	r26, r0
    45ea:	61 1d       	adc	r22, r1
    45ec:	23 1f       	adc	r18, r19
    45ee:	84 9f       	mul	r24, r20
    45f0:	60 0d       	add	r22, r0
    45f2:	21 1d       	adc	r18, r1
    45f4:	82 2f       	mov	r24, r18
    45f6:	76 2f       	mov	r23, r22
    45f8:	6a 2f       	mov	r22, r26
    45fa:	11 24       	eor	r1, r1
    45fc:	9f 57       	subi	r25, 0x7F	; 127
    45fe:	50 40       	sbci	r21, 0x00	; 0
    4600:	8a f0       	brmi	.+34     	; 0x4624 <__mulsf3_pse+0x84>
    4602:	e1 f0       	breq	.+56     	; 0x463c <__mulsf3_pse+0x9c>
    4604:	88 23       	and	r24, r24
    4606:	4a f0       	brmi	.+18     	; 0x461a <__mulsf3_pse+0x7a>
    4608:	ee 0f       	add	r30, r30
    460a:	ff 1f       	adc	r31, r31
    460c:	bb 1f       	adc	r27, r27
    460e:	66 1f       	adc	r22, r22
    4610:	77 1f       	adc	r23, r23
    4612:	88 1f       	adc	r24, r24
    4614:	91 50       	subi	r25, 0x01	; 1
    4616:	50 40       	sbci	r21, 0x00	; 0
    4618:	a9 f7       	brne	.-22     	; 0x4604 <__mulsf3_pse+0x64>
    461a:	9e 3f       	cpi	r25, 0xFE	; 254
    461c:	51 05       	cpc	r21, r1
    461e:	70 f0       	brcs	.+28     	; 0x463c <__mulsf3_pse+0x9c>
    4620:	8d ce       	rjmp	.-742    	; 0x433c <__fp_inf>
    4622:	3c cf       	rjmp	.-392    	; 0x449c <__fp_szero>
    4624:	5f 3f       	cpi	r21, 0xFF	; 255
    4626:	ec f3       	brlt	.-6      	; 0x4622 <__mulsf3_pse+0x82>
    4628:	98 3e       	cpi	r25, 0xE8	; 232
    462a:	dc f3       	brlt	.-10     	; 0x4622 <__mulsf3_pse+0x82>
    462c:	86 95       	lsr	r24
    462e:	77 95       	ror	r23
    4630:	67 95       	ror	r22
    4632:	b7 95       	ror	r27
    4634:	f7 95       	ror	r31
    4636:	e7 95       	ror	r30
    4638:	9f 5f       	subi	r25, 0xFF	; 255
    463a:	c1 f7       	brne	.-16     	; 0x462c <__mulsf3_pse+0x8c>
    463c:	fe 2b       	or	r31, r30
    463e:	88 0f       	add	r24, r24
    4640:	91 1d       	adc	r25, r1
    4642:	96 95       	lsr	r25
    4644:	87 95       	ror	r24
    4646:	97 f9       	bld	r25, 7
    4648:	08 95       	ret

0000464a <round>:
    464a:	f6 de       	rcall	.-532    	; 0x4438 <__fp_splitA>
    464c:	e0 f0       	brcs	.+56     	; 0x4686 <round+0x3c>
    464e:	9e 37       	cpi	r25, 0x7E	; 126
    4650:	d8 f0       	brcs	.+54     	; 0x4688 <round+0x3e>
    4652:	96 39       	cpi	r25, 0x96	; 150
    4654:	b8 f4       	brcc	.+46     	; 0x4684 <round+0x3a>
    4656:	9e 38       	cpi	r25, 0x8E	; 142
    4658:	48 f4       	brcc	.+18     	; 0x466c <round+0x22>
    465a:	67 2f       	mov	r22, r23
    465c:	78 2f       	mov	r23, r24
    465e:	88 27       	eor	r24, r24
    4660:	98 5f       	subi	r25, 0xF8	; 248
    4662:	f9 cf       	rjmp	.-14     	; 0x4656 <round+0xc>
    4664:	86 95       	lsr	r24
    4666:	77 95       	ror	r23
    4668:	67 95       	ror	r22
    466a:	93 95       	inc	r25
    466c:	95 39       	cpi	r25, 0x95	; 149
    466e:	d0 f3       	brcs	.-12     	; 0x4664 <round+0x1a>
    4670:	b6 2f       	mov	r27, r22
    4672:	b1 70       	andi	r27, 0x01	; 1
    4674:	6b 0f       	add	r22, r27
    4676:	71 1d       	adc	r23, r1
    4678:	81 1d       	adc	r24, r1
    467a:	20 f4       	brcc	.+8      	; 0x4684 <round+0x3a>
    467c:	87 95       	ror	r24
    467e:	77 95       	ror	r23
    4680:	67 95       	ror	r22
    4682:	93 95       	inc	r25
    4684:	61 ce       	rjmp	.-830    	; 0x4348 <__fp_mintl>
    4686:	7b ce       	rjmp	.-778    	; 0x437e <__fp_mpack>
    4688:	09 cf       	rjmp	.-494    	; 0x449c <__fp_szero>
    468a:	11 f4       	brne	.+4      	; 0x4690 <round+0x46>
    468c:	0e f4       	brtc	.+2      	; 0x4690 <round+0x46>
    468e:	85 ce       	rjmp	.-758    	; 0x439a <__fp_nan>
    4690:	76 ce       	rjmp	.-788    	; 0x437e <__fp_mpack>

00004692 <sqrt>:
    4692:	d2 de       	rcall	.-604    	; 0x4438 <__fp_splitA>
    4694:	d0 f3       	brcs	.-12     	; 0x468a <round+0x40>
    4696:	99 23       	and	r25, r25
    4698:	d9 f3       	breq	.-10     	; 0x4690 <round+0x46>
    469a:	ce f3       	brts	.-14     	; 0x468e <round+0x44>
    469c:	9f 57       	subi	r25, 0x7F	; 127
    469e:	55 0b       	sbc	r21, r21
    46a0:	87 ff       	sbrs	r24, 7
    46a2:	3f d0       	rcall	.+126    	; 0x4722 <__fp_norm2>
    46a4:	00 24       	eor	r0, r0
    46a6:	a0 e6       	ldi	r26, 0x60	; 96
    46a8:	40 ea       	ldi	r20, 0xA0	; 160
    46aa:	90 01       	movw	r18, r0
    46ac:	80 58       	subi	r24, 0x80	; 128
    46ae:	56 95       	lsr	r21
    46b0:	97 95       	ror	r25
    46b2:	28 f4       	brcc	.+10     	; 0x46be <sqrt+0x2c>
    46b4:	80 5c       	subi	r24, 0xC0	; 192
    46b6:	66 0f       	add	r22, r22
    46b8:	77 1f       	adc	r23, r23
    46ba:	88 1f       	adc	r24, r24
    46bc:	20 f0       	brcs	.+8      	; 0x46c6 <sqrt+0x34>
    46be:	26 17       	cp	r18, r22
    46c0:	37 07       	cpc	r19, r23
    46c2:	48 07       	cpc	r20, r24
    46c4:	30 f4       	brcc	.+12     	; 0x46d2 <sqrt+0x40>
    46c6:	62 1b       	sub	r22, r18
    46c8:	73 0b       	sbc	r23, r19
    46ca:	84 0b       	sbc	r24, r20
    46cc:	20 29       	or	r18, r0
    46ce:	31 29       	or	r19, r1
    46d0:	4a 2b       	or	r20, r26
    46d2:	a6 95       	lsr	r26
    46d4:	17 94       	ror	r1
    46d6:	07 94       	ror	r0
    46d8:	20 25       	eor	r18, r0
    46da:	31 25       	eor	r19, r1
    46dc:	4a 27       	eor	r20, r26
    46de:	58 f7       	brcc	.-42     	; 0x46b6 <sqrt+0x24>
    46e0:	66 0f       	add	r22, r22
    46e2:	77 1f       	adc	r23, r23
    46e4:	88 1f       	adc	r24, r24
    46e6:	20 f0       	brcs	.+8      	; 0x46f0 <sqrt+0x5e>
    46e8:	26 17       	cp	r18, r22
    46ea:	37 07       	cpc	r19, r23
    46ec:	48 07       	cpc	r20, r24
    46ee:	30 f4       	brcc	.+12     	; 0x46fc <sqrt+0x6a>
    46f0:	62 0b       	sbc	r22, r18
    46f2:	73 0b       	sbc	r23, r19
    46f4:	84 0b       	sbc	r24, r20
    46f6:	20 0d       	add	r18, r0
    46f8:	31 1d       	adc	r19, r1
    46fa:	41 1d       	adc	r20, r1
    46fc:	a0 95       	com	r26
    46fe:	81 f7       	brne	.-32     	; 0x46e0 <sqrt+0x4e>
    4700:	b9 01       	movw	r22, r18
    4702:	84 2f       	mov	r24, r20
    4704:	91 58       	subi	r25, 0x81	; 129
    4706:	88 0f       	add	r24, r24
    4708:	96 95       	lsr	r25
    470a:	87 95       	ror	r24
    470c:	08 95       	ret

0000470e <square>:
    470e:	9b 01       	movw	r18, r22
    4710:	ac 01       	movw	r20, r24
    4712:	38 cf       	rjmp	.-400    	; 0x4584 <__mulsf3>

00004714 <trunc>:
    4714:	ab de       	rcall	.-682    	; 0x446c <__fp_trunc>
    4716:	20 f0       	brcs	.+8      	; 0x4720 <trunc+0xc>
    4718:	9f 37       	cpi	r25, 0x7F	; 127
    471a:	08 f4       	brcc	.+2      	; 0x471e <trunc+0xa>
    471c:	bf ce       	rjmp	.-642    	; 0x449c <__fp_szero>
    471e:	14 ce       	rjmp	.-984    	; 0x4348 <__fp_mintl>
    4720:	2e ce       	rjmp	.-932    	; 0x437e <__fp_mpack>

00004722 <__fp_norm2>:
    4722:	91 50       	subi	r25, 0x01	; 1
    4724:	50 40       	sbci	r21, 0x00	; 0
    4726:	66 0f       	add	r22, r22
    4728:	77 1f       	adc	r23, r23
    472a:	88 1f       	adc	r24, r24
    472c:	d2 f7       	brpl	.-12     	; 0x4722 <__fp_norm2>
    472e:	08 95       	ret

00004730 <__mulsi3>:
    4730:	62 9f       	mul	r22, r18
    4732:	d0 01       	movw	r26, r0
    4734:	73 9f       	mul	r23, r19
    4736:	f0 01       	movw	r30, r0
    4738:	82 9f       	mul	r24, r18
    473a:	e0 0d       	add	r30, r0
    473c:	f1 1d       	adc	r31, r1
    473e:	64 9f       	mul	r22, r20
    4740:	e0 0d       	add	r30, r0
    4742:	f1 1d       	adc	r31, r1
    4744:	92 9f       	mul	r25, r18
    4746:	f0 0d       	add	r31, r0
    4748:	83 9f       	mul	r24, r19
    474a:	f0 0d       	add	r31, r0
    474c:	74 9f       	mul	r23, r20
    474e:	f0 0d       	add	r31, r0
    4750:	65 9f       	mul	r22, r21
    4752:	f0 0d       	add	r31, r0
    4754:	99 27       	eor	r25, r25
    4756:	72 9f       	mul	r23, r18
    4758:	b0 0d       	add	r27, r0
    475a:	e1 1d       	adc	r30, r1
    475c:	f9 1f       	adc	r31, r25
    475e:	63 9f       	mul	r22, r19
    4760:	b0 0d       	add	r27, r0
    4762:	e1 1d       	adc	r30, r1
    4764:	f9 1f       	adc	r31, r25
    4766:	bd 01       	movw	r22, r26
    4768:	cf 01       	movw	r24, r30
    476a:	11 24       	eor	r1, r1
    476c:	08 95       	ret

0000476e <__divmodhi4>:
    476e:	97 fb       	bst	r25, 7
    4770:	09 2e       	mov	r0, r25
    4772:	07 26       	eor	r0, r23
    4774:	0a d0       	rcall	.+20     	; 0x478a <__divmodhi4_neg1>
    4776:	77 fd       	sbrc	r23, 7
    4778:	04 d0       	rcall	.+8      	; 0x4782 <__divmodhi4_neg2>
    477a:	49 d0       	rcall	.+146    	; 0x480e <__udivmodhi4>
    477c:	06 d0       	rcall	.+12     	; 0x478a <__divmodhi4_neg1>
    477e:	00 20       	and	r0, r0
    4780:	1a f4       	brpl	.+6      	; 0x4788 <__divmodhi4_exit>

00004782 <__divmodhi4_neg2>:
    4782:	70 95       	com	r23
    4784:	61 95       	neg	r22
    4786:	7f 4f       	sbci	r23, 0xFF	; 255

00004788 <__divmodhi4_exit>:
    4788:	08 95       	ret

0000478a <__divmodhi4_neg1>:
    478a:	f6 f7       	brtc	.-4      	; 0x4788 <__divmodhi4_exit>
    478c:	90 95       	com	r25
    478e:	81 95       	neg	r24
    4790:	9f 4f       	sbci	r25, 0xFF	; 255
    4792:	08 95       	ret

00004794 <__udivmodsi4>:
    4794:	a1 e2       	ldi	r26, 0x21	; 33
    4796:	1a 2e       	mov	r1, r26
    4798:	aa 1b       	sub	r26, r26
    479a:	bb 1b       	sub	r27, r27
    479c:	fd 01       	movw	r30, r26
    479e:	0d c0       	rjmp	.+26     	; 0x47ba <__udivmodsi4_ep>

000047a0 <__udivmodsi4_loop>:
    47a0:	aa 1f       	adc	r26, r26
    47a2:	bb 1f       	adc	r27, r27
    47a4:	ee 1f       	adc	r30, r30
    47a6:	ff 1f       	adc	r31, r31
    47a8:	a2 17       	cp	r26, r18
    47aa:	b3 07       	cpc	r27, r19
    47ac:	e4 07       	cpc	r30, r20
    47ae:	f5 07       	cpc	r31, r21
    47b0:	20 f0       	brcs	.+8      	; 0x47ba <__udivmodsi4_ep>
    47b2:	a2 1b       	sub	r26, r18
    47b4:	b3 0b       	sbc	r27, r19
    47b6:	e4 0b       	sbc	r30, r20
    47b8:	f5 0b       	sbc	r31, r21

000047ba <__udivmodsi4_ep>:
    47ba:	66 1f       	adc	r22, r22
    47bc:	77 1f       	adc	r23, r23
    47be:	88 1f       	adc	r24, r24
    47c0:	99 1f       	adc	r25, r25
    47c2:	1a 94       	dec	r1
    47c4:	69 f7       	brne	.-38     	; 0x47a0 <__udivmodsi4_loop>
    47c6:	60 95       	com	r22
    47c8:	70 95       	com	r23
    47ca:	80 95       	com	r24
    47cc:	90 95       	com	r25
    47ce:	9b 01       	movw	r18, r22
    47d0:	ac 01       	movw	r20, r24
    47d2:	bd 01       	movw	r22, r26
    47d4:	cf 01       	movw	r24, r30
    47d6:	08 95       	ret

000047d8 <__divmodsi4>:
    47d8:	97 fb       	bst	r25, 7
    47da:	09 2e       	mov	r0, r25
    47dc:	05 26       	eor	r0, r21
    47de:	0e d0       	rcall	.+28     	; 0x47fc <__divmodsi4_neg1>
    47e0:	57 fd       	sbrc	r21, 7
    47e2:	04 d0       	rcall	.+8      	; 0x47ec <__divmodsi4_neg2>
    47e4:	d7 df       	rcall	.-82     	; 0x4794 <__udivmodsi4>
    47e6:	0a d0       	rcall	.+20     	; 0x47fc <__divmodsi4_neg1>
    47e8:	00 1c       	adc	r0, r0
    47ea:	38 f4       	brcc	.+14     	; 0x47fa <__divmodsi4_exit>

000047ec <__divmodsi4_neg2>:
    47ec:	50 95       	com	r21
    47ee:	40 95       	com	r20
    47f0:	30 95       	com	r19
    47f2:	21 95       	neg	r18
    47f4:	3f 4f       	sbci	r19, 0xFF	; 255
    47f6:	4f 4f       	sbci	r20, 0xFF	; 255
    47f8:	5f 4f       	sbci	r21, 0xFF	; 255

000047fa <__divmodsi4_exit>:
    47fa:	08 95       	ret

000047fc <__divmodsi4_neg1>:
    47fc:	f6 f7       	brtc	.-4      	; 0x47fa <__divmodsi4_exit>
    47fe:	90 95       	com	r25
    4800:	80 95       	com	r24
    4802:	70 95       	com	r23
    4804:	61 95       	neg	r22
    4806:	7f 4f       	sbci	r23, 0xFF	; 255
    4808:	8f 4f       	sbci	r24, 0xFF	; 255
    480a:	9f 4f       	sbci	r25, 0xFF	; 255
    480c:	08 95       	ret

0000480e <__udivmodhi4>:
    480e:	aa 1b       	sub	r26, r26
    4810:	bb 1b       	sub	r27, r27
    4812:	51 e1       	ldi	r21, 0x11	; 17
    4814:	07 c0       	rjmp	.+14     	; 0x4824 <__udivmodhi4_ep>

00004816 <__udivmodhi4_loop>:
    4816:	aa 1f       	adc	r26, r26
    4818:	bb 1f       	adc	r27, r27
    481a:	a6 17       	cp	r26, r22
    481c:	b7 07       	cpc	r27, r23
    481e:	10 f0       	brcs	.+4      	; 0x4824 <__udivmodhi4_ep>
    4820:	a6 1b       	sub	r26, r22
    4822:	b7 0b       	sbc	r27, r23

00004824 <__udivmodhi4_ep>:
    4824:	88 1f       	adc	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	5a 95       	dec	r21
    482a:	a9 f7       	brne	.-22     	; 0x4816 <__udivmodhi4_loop>
    482c:	80 95       	com	r24
    482e:	90 95       	com	r25
    4830:	bc 01       	movw	r22, r24
    4832:	cd 01       	movw	r24, r26
    4834:	08 95       	ret

00004836 <strtod>:
    4836:	8f 92       	push	r8
    4838:	9f 92       	push	r9
    483a:	af 92       	push	r10
    483c:	bf 92       	push	r11
    483e:	cf 92       	push	r12
    4840:	df 92       	push	r13
    4842:	ef 92       	push	r14
    4844:	ff 92       	push	r15
    4846:	0f 93       	push	r16
    4848:	1f 93       	push	r17
    484a:	cf 93       	push	r28
    484c:	df 93       	push	r29
    484e:	ec 01       	movw	r28, r24
    4850:	5b 01       	movw	r10, r22
    4852:	61 15       	cp	r22, r1
    4854:	71 05       	cpc	r23, r1
    4856:	19 f0       	breq	.+6      	; 0x485e <strtod+0x28>
    4858:	fb 01       	movw	r30, r22
    485a:	91 83       	std	Z+1, r25	; 0x01
    485c:	80 83       	st	Z, r24
    485e:	f9 90       	ld	r15, Y+
    4860:	8f 2d       	mov	r24, r15
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	0e 94 89 25 	call	0x4b12	; 0x4b12 <isspace>
    4868:	89 2b       	or	r24, r25
    486a:	c9 f7       	brne	.-14     	; 0x485e <strtod+0x28>
    486c:	fd e2       	ldi	r31, 0x2D	; 45
    486e:	ff 16       	cp	r15, r31
    4870:	21 f4       	brne	.+8      	; 0x487a <strtod+0x44>
    4872:	f9 90       	ld	r15, Y+
    4874:	ee 24       	eor	r14, r14
    4876:	e3 94       	inc	r14
    4878:	05 c0       	rjmp	.+10     	; 0x4884 <strtod+0x4e>
    487a:	2b e2       	ldi	r18, 0x2B	; 43
    487c:	f2 16       	cp	r15, r18
    487e:	09 f4       	brne	.+2      	; 0x4882 <strtod+0x4c>
    4880:	f9 90       	ld	r15, Y+
    4882:	ee 24       	eor	r14, r14
    4884:	8e 01       	movw	r16, r28
    4886:	01 50       	subi	r16, 0x01	; 1
    4888:	10 40       	sbci	r17, 0x00	; 0
    488a:	c8 01       	movw	r24, r16
    488c:	6a e2       	ldi	r22, 0x2A	; 42
    488e:	75 e0       	ldi	r23, 0x05	; 5
    4890:	43 e0       	ldi	r20, 0x03	; 3
    4892:	50 e0       	ldi	r21, 0x00	; 0
    4894:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strncasecmp_P>
    4898:	89 2b       	or	r24, r25
    489a:	01 f5       	brne	.+64     	; 0x48dc <strtod+0xa6>
    489c:	8e 01       	movw	r16, r28
    489e:	0e 5f       	subi	r16, 0xFE	; 254
    48a0:	1f 4f       	sbci	r17, 0xFF	; 255
    48a2:	c8 01       	movw	r24, r16
    48a4:	6d e2       	ldi	r22, 0x2D	; 45
    48a6:	75 e0       	ldi	r23, 0x05	; 5
    48a8:	45 e0       	ldi	r20, 0x05	; 5
    48aa:	50 e0       	ldi	r21, 0x00	; 0
    48ac:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strncasecmp_P>
    48b0:	89 2b       	or	r24, r25
    48b2:	19 f4       	brne	.+6      	; 0x48ba <strtod+0x84>
    48b4:	8e 01       	movw	r16, r28
    48b6:	09 5f       	subi	r16, 0xF9	; 249
    48b8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ba:	a1 14       	cp	r10, r1
    48bc:	b1 04       	cpc	r11, r1
    48be:	19 f0       	breq	.+6      	; 0x48c6 <strtod+0x90>
    48c0:	f5 01       	movw	r30, r10
    48c2:	11 83       	std	Z+1, r17	; 0x01
    48c4:	00 83       	st	Z, r16
    48c6:	e0 fc       	sbrc	r14, 0
    48c8:	04 c0       	rjmp	.+8      	; 0x48d2 <strtod+0x9c>
    48ca:	70 e0       	ldi	r23, 0x00	; 0
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	80 e8       	ldi	r24, 0x80	; 128
    48d0:	14 c0       	rjmp	.+40     	; 0x48fa <strtod+0xc4>
    48d2:	70 e0       	ldi	r23, 0x00	; 0
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	80 e8       	ldi	r24, 0x80	; 128
    48d8:	6f ef       	ldi	r22, 0xFF	; 255
    48da:	08 c1       	rjmp	.+528    	; 0x4aec <strtod+0x2b6>
    48dc:	c8 01       	movw	r24, r16
    48de:	62 e3       	ldi	r22, 0x32	; 50
    48e0:	75 e0       	ldi	r23, 0x05	; 5
    48e2:	43 e0       	ldi	r20, 0x03	; 3
    48e4:	50 e0       	ldi	r21, 0x00	; 0
    48e6:	0e 94 91 25 	call	0x4b22	; 0x4b22 <strncasecmp_P>
    48ea:	89 2b       	or	r24, r25
    48ec:	69 f4       	brne	.+26     	; 0x4908 <strtod+0xd2>
    48ee:	a1 14       	cp	r10, r1
    48f0:	b1 04       	cpc	r11, r1
    48f2:	29 f4       	brne	.+10     	; 0x48fe <strtod+0xc8>
    48f4:	70 e0       	ldi	r23, 0x00	; 0
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	80 ec       	ldi	r24, 0xC0	; 192
    48fa:	6f e7       	ldi	r22, 0x7F	; 127
    48fc:	f7 c0       	rjmp	.+494    	; 0x4aec <strtod+0x2b6>
    48fe:	22 96       	adiw	r28, 0x02	; 2
    4900:	f5 01       	movw	r30, r10
    4902:	d1 83       	std	Z+1, r29	; 0x01
    4904:	c0 83       	st	Z, r28
    4906:	f6 cf       	rjmp	.-20     	; 0x48f4 <strtod+0xbe>
    4908:	88 24       	eor	r8, r8
    490a:	99 24       	eor	r9, r9
    490c:	40 e0       	ldi	r20, 0x00	; 0
    490e:	50 e0       	ldi	r21, 0x00	; 0
    4910:	60 e0       	ldi	r22, 0x00	; 0
    4912:	70 e0       	ldi	r23, 0x00	; 0
    4914:	ef 2d       	mov	r30, r15
    4916:	e0 53       	subi	r30, 0x30	; 48
    4918:	ea 30       	cpi	r30, 0x0A	; 10
    491a:	a0 f5       	brcc	.+104    	; 0x4984 <strtod+0x14e>
    491c:	f2 e0       	ldi	r31, 0x02	; 2
    491e:	ef 2a       	or	r14, r31
    4920:	8e 2d       	mov	r24, r14
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	9c 01       	movw	r18, r24
    4926:	28 70       	andi	r18, 0x08	; 8
    4928:	30 70       	andi	r19, 0x00	; 0
    492a:	e2 fe       	sbrs	r14, 2
    492c:	06 c0       	rjmp	.+12     	; 0x493a <strtod+0x104>
    492e:	23 2b       	or	r18, r19
    4930:	79 f5       	brne	.+94     	; 0x4990 <strtod+0x15a>
    4932:	08 94       	sec
    4934:	81 1c       	adc	r8, r1
    4936:	91 1c       	adc	r9, r1
    4938:	2b c0       	rjmp	.+86     	; 0x4990 <strtod+0x15a>
    493a:	23 2b       	or	r18, r19
    493c:	19 f0       	breq	.+6      	; 0x4944 <strtod+0x10e>
    493e:	08 94       	sec
    4940:	81 08       	sbc	r8, r1
    4942:	91 08       	sbc	r9, r1
    4944:	db 01       	movw	r26, r22
    4946:	ca 01       	movw	r24, r20
    4948:	12 e0       	ldi	r17, 0x02	; 2
    494a:	88 0f       	add	r24, r24
    494c:	99 1f       	adc	r25, r25
    494e:	aa 1f       	adc	r26, r26
    4950:	bb 1f       	adc	r27, r27
    4952:	1a 95       	dec	r17
    4954:	d1 f7       	brne	.-12     	; 0x494a <strtod+0x114>
    4956:	48 0f       	add	r20, r24
    4958:	59 1f       	adc	r21, r25
    495a:	6a 1f       	adc	r22, r26
    495c:	7b 1f       	adc	r23, r27
    495e:	44 0f       	add	r20, r20
    4960:	55 1f       	adc	r21, r21
    4962:	66 1f       	adc	r22, r22
    4964:	77 1f       	adc	r23, r23
    4966:	4e 0f       	add	r20, r30
    4968:	51 1d       	adc	r21, r1
    496a:	61 1d       	adc	r22, r1
    496c:	71 1d       	adc	r23, r1
    496e:	48 39       	cpi	r20, 0x98	; 152
    4970:	29 e9       	ldi	r18, 0x99	; 153
    4972:	52 07       	cpc	r21, r18
    4974:	29 e9       	ldi	r18, 0x99	; 153
    4976:	62 07       	cpc	r22, r18
    4978:	29 e1       	ldi	r18, 0x19	; 25
    497a:	72 07       	cpc	r23, r18
    497c:	48 f0       	brcs	.+18     	; 0x4990 <strtod+0x15a>
    497e:	84 e0       	ldi	r24, 0x04	; 4
    4980:	e8 2a       	or	r14, r24
    4982:	06 c0       	rjmp	.+12     	; 0x4990 <strtod+0x15a>
    4984:	ee 3f       	cpi	r30, 0xFE	; 254
    4986:	31 f4       	brne	.+12     	; 0x4994 <strtod+0x15e>
    4988:	e3 fc       	sbrc	r14, 3
    498a:	39 c0       	rjmp	.+114    	; 0x49fe <strtod+0x1c8>
    498c:	98 e0       	ldi	r25, 0x08	; 8
    498e:	e9 2a       	or	r14, r25
    4990:	f9 90       	ld	r15, Y+
    4992:	c0 cf       	rjmp	.-128    	; 0x4914 <strtod+0xde>
    4994:	e5 33       	cpi	r30, 0x35	; 53
    4996:	11 f0       	breq	.+4      	; 0x499c <strtod+0x166>
    4998:	e5 31       	cpi	r30, 0x15	; 21
    499a:	89 f5       	brne	.+98     	; 0x49fe <strtod+0x1c8>
    499c:	29 91       	ld	r18, Y+
    499e:	2d 32       	cpi	r18, 0x2D	; 45
    49a0:	19 f4       	brne	.+6      	; 0x49a8 <strtod+0x172>
    49a2:	e0 e1       	ldi	r30, 0x10	; 16
    49a4:	ee 2a       	or	r14, r30
    49a6:	05 c0       	rjmp	.+10     	; 0x49b2 <strtod+0x17c>
    49a8:	2b 32       	cpi	r18, 0x2B	; 43
    49aa:	19 f0       	breq	.+6      	; 0x49b2 <strtod+0x17c>
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	03 c0       	rjmp	.+6      	; 0x49b8 <strtod+0x182>
    49b2:	29 91       	ld	r18, Y+
    49b4:	82 e0       	ldi	r24, 0x02	; 2
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	e2 2f       	mov	r30, r18
    49ba:	e0 53       	subi	r30, 0x30	; 48
    49bc:	ea 30       	cpi	r30, 0x0A	; 10
    49be:	18 f0       	brcs	.+6      	; 0x49c6 <strtod+0x190>
    49c0:	c8 1b       	sub	r28, r24
    49c2:	d9 0b       	sbc	r29, r25
    49c4:	1c c0       	rjmp	.+56     	; 0x49fe <strtod+0x1c8>
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	fc e0       	ldi	r31, 0x0C	; 12
    49cc:	20 38       	cpi	r18, 0x80	; 128
    49ce:	3f 07       	cpc	r19, r31
    49d0:	5c f4       	brge	.+22     	; 0x49e8 <strtod+0x1b2>
    49d2:	c9 01       	movw	r24, r18
    49d4:	88 0f       	add	r24, r24
    49d6:	99 1f       	adc	r25, r25
    49d8:	88 0f       	add	r24, r24
    49da:	99 1f       	adc	r25, r25
    49dc:	28 0f       	add	r18, r24
    49de:	39 1f       	adc	r19, r25
    49e0:	22 0f       	add	r18, r18
    49e2:	33 1f       	adc	r19, r19
    49e4:	2e 0f       	add	r18, r30
    49e6:	31 1d       	adc	r19, r1
    49e8:	e9 91       	ld	r30, Y+
    49ea:	e0 53       	subi	r30, 0x30	; 48
    49ec:	ea 30       	cpi	r30, 0x0A	; 10
    49ee:	68 f3       	brcs	.-38     	; 0x49ca <strtod+0x194>
    49f0:	e4 fe       	sbrs	r14, 4
    49f2:	03 c0       	rjmp	.+6      	; 0x49fa <strtod+0x1c4>
    49f4:	30 95       	com	r19
    49f6:	21 95       	neg	r18
    49f8:	3f 4f       	sbci	r19, 0xFF	; 255
    49fa:	82 0e       	add	r8, r18
    49fc:	93 1e       	adc	r9, r19
    49fe:	ce 2c       	mov	r12, r14
    4a00:	dd 24       	eor	r13, r13
    4a02:	e1 fe       	sbrs	r14, 1
    4a04:	07 c0       	rjmp	.+14     	; 0x4a14 <strtod+0x1de>
    4a06:	a1 14       	cp	r10, r1
    4a08:	b1 04       	cpc	r11, r1
    4a0a:	21 f0       	breq	.+8      	; 0x4a14 <strtod+0x1de>
    4a0c:	21 97       	sbiw	r28, 0x01	; 1
    4a0e:	f5 01       	movw	r30, r10
    4a10:	d1 83       	std	Z+1, r29	; 0x01
    4a12:	c0 83       	st	Z, r28
    4a14:	cb 01       	movw	r24, r22
    4a16:	ba 01       	movw	r22, r20
    4a18:	0e 94 2a 21 	call	0x4254	; 0x4254 <__floatunsisf>
    4a1c:	7b 01       	movw	r14, r22
    4a1e:	8c 01       	movw	r16, r24
    4a20:	f3 e0       	ldi	r31, 0x03	; 3
    4a22:	cf 22       	and	r12, r31
    4a24:	dd 24       	eor	r13, r13
    4a26:	23 e0       	ldi	r18, 0x03	; 3
    4a28:	c2 16       	cp	r12, r18
    4a2a:	d1 04       	cpc	r13, r1
    4a2c:	21 f4       	brne	.+8      	; 0x4a36 <strtod+0x200>
    4a2e:	17 fb       	bst	r17, 7
    4a30:	10 95       	com	r17
    4a32:	17 f9       	bld	r17, 7
    4a34:	10 95       	com	r17
    4a36:	57 01       	movw	r10, r14
    4a38:	68 01       	movw	r12, r16
    4a3a:	c8 01       	movw	r24, r16
    4a3c:	b7 01       	movw	r22, r14
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	40 e0       	ldi	r20, 0x00	; 0
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
    4a4a:	88 23       	and	r24, r24
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <strtod+0x21a>
    4a4e:	4a c0       	rjmp	.+148    	; 0x4ae4 <strtod+0x2ae>
    4a50:	97 fe       	sbrs	r9, 7
    4a52:	0d c0       	rjmp	.+26     	; 0x4a6e <strtod+0x238>
    4a54:	29 e4       	ldi	r18, 0x49	; 73
    4a56:	e2 2e       	mov	r14, r18
    4a58:	25 e0       	ldi	r18, 0x05	; 5
    4a5a:	f2 2e       	mov	r15, r18
    4a5c:	90 94       	com	r9
    4a5e:	81 94       	neg	r8
    4a60:	91 08       	sbc	r9, r1
    4a62:	93 94       	inc	r9
    4a64:	c0 e2       	ldi	r28, 0x20	; 32
    4a66:	d0 e0       	ldi	r29, 0x00	; 0
    4a68:	00 e0       	ldi	r16, 0x00	; 0
    4a6a:	10 e0       	ldi	r17, 0x00	; 0
    4a6c:	12 c0       	rjmp	.+36     	; 0x4a92 <strtod+0x25c>
    4a6e:	91 e6       	ldi	r25, 0x61	; 97
    4a70:	e9 2e       	mov	r14, r25
    4a72:	95 e0       	ldi	r25, 0x05	; 5
    4a74:	f9 2e       	mov	r15, r25
    4a76:	f6 cf       	rjmp	.-20     	; 0x4a64 <strtod+0x22e>
    4a78:	f7 01       	movw	r30, r14
    4a7a:	25 91       	lpm	r18, Z+
    4a7c:	35 91       	lpm	r19, Z+
    4a7e:	45 91       	lpm	r20, Z+
    4a80:	54 91       	lpm	r21, Z+
    4a82:	c6 01       	movw	r24, r12
    4a84:	b5 01       	movw	r22, r10
    4a86:	0e 94 c2 22 	call	0x4584	; 0x4584 <__mulsf3>
    4a8a:	5b 01       	movw	r10, r22
    4a8c:	6c 01       	movw	r12, r24
    4a8e:	8c 1a       	sub	r8, r28
    4a90:	9d 0a       	sbc	r9, r29
    4a92:	8c 16       	cp	r8, r28
    4a94:	9d 06       	cpc	r9, r29
    4a96:	84 f7       	brge	.-32     	; 0x4a78 <strtod+0x242>
    4a98:	d5 95       	asr	r29
    4a9a:	c7 95       	ror	r28
    4a9c:	0f 5f       	subi	r16, 0xFF	; 255
    4a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa0:	06 30       	cpi	r16, 0x06	; 6
    4aa2:	11 05       	cpc	r17, r1
    4aa4:	29 f0       	breq	.+10     	; 0x4ab0 <strtod+0x27a>
    4aa6:	8c ef       	ldi	r24, 0xFC	; 252
    4aa8:	9f ef       	ldi	r25, 0xFF	; 255
    4aaa:	e8 0e       	add	r14, r24
    4aac:	f9 1e       	adc	r15, r25
    4aae:	f1 cf       	rjmp	.-30     	; 0x4a92 <strtod+0x25c>
    4ab0:	c5 01       	movw	r24, r10
    4ab2:	d6 01       	movw	r26, r12
    4ab4:	7c 01       	movw	r14, r24
    4ab6:	8d 01       	movw	r16, r26
    4ab8:	8c 2d       	mov	r24, r12
    4aba:	88 0f       	add	r24, r24
    4abc:	8d 2d       	mov	r24, r13
    4abe:	88 1f       	adc	r24, r24
    4ac0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ac2:	51 f0       	breq	.+20     	; 0x4ad8 <strtod+0x2a2>
    4ac4:	c6 01       	movw	r24, r12
    4ac6:	b5 01       	movw	r22, r10
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	40 e0       	ldi	r20, 0x00	; 0
    4ace:	50 e0       	ldi	r21, 0x00	; 0
    4ad0:	0e 94 8d 20 	call	0x411a	; 0x411a <__cmpsf2>
    4ad4:	88 23       	and	r24, r24
    4ad6:	31 f4       	brne	.+12     	; 0x4ae4 <strtod+0x2ae>
    4ad8:	82 e2       	ldi	r24, 0x22	; 34
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	90 93 9c 06 	sts	0x069C, r25
    4ae0:	80 93 9b 06 	sts	0x069B, r24
    4ae4:	7e 2d       	mov	r23, r14
    4ae6:	9f 2d       	mov	r25, r15
    4ae8:	80 2f       	mov	r24, r16
    4aea:	61 2f       	mov	r22, r17
    4aec:	27 2f       	mov	r18, r23
    4aee:	39 2f       	mov	r19, r25
    4af0:	48 2f       	mov	r20, r24
    4af2:	56 2f       	mov	r21, r22
    4af4:	b9 01       	movw	r22, r18
    4af6:	ca 01       	movw	r24, r20
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	ff 90       	pop	r15
    4b02:	ef 90       	pop	r14
    4b04:	df 90       	pop	r13
    4b06:	cf 90       	pop	r12
    4b08:	bf 90       	pop	r11
    4b0a:	af 90       	pop	r10
    4b0c:	9f 90       	pop	r9
    4b0e:	8f 90       	pop	r8
    4b10:	08 95       	ret

00004b12 <isspace>:
    4b12:	91 11       	cpse	r25, r1
    4b14:	1e c0       	rjmp	.+60     	; 0x4b52 <__ctype_isfalse>
    4b16:	80 32       	cpi	r24, 0x20	; 32
    4b18:	19 f0       	breq	.+6      	; 0x4b20 <isspace+0xe>
    4b1a:	89 50       	subi	r24, 0x09	; 9
    4b1c:	85 50       	subi	r24, 0x05	; 5
    4b1e:	d0 f7       	brcc	.-12     	; 0x4b14 <isspace+0x2>
    4b20:	08 95       	ret

00004b22 <strncasecmp_P>:
    4b22:	fb 01       	movw	r30, r22
    4b24:	dc 01       	movw	r26, r24
    4b26:	41 50       	subi	r20, 0x01	; 1
    4b28:	50 40       	sbci	r21, 0x00	; 0
    4b2a:	88 f0       	brcs	.+34     	; 0x4b4e <strncasecmp_P+0x2c>
    4b2c:	8d 91       	ld	r24, X+
    4b2e:	81 34       	cpi	r24, 0x41	; 65
    4b30:	1c f0       	brlt	.+6      	; 0x4b38 <strncasecmp_P+0x16>
    4b32:	8b 35       	cpi	r24, 0x5B	; 91
    4b34:	0c f4       	brge	.+2      	; 0x4b38 <strncasecmp_P+0x16>
    4b36:	80 5e       	subi	r24, 0xE0	; 224
    4b38:	65 91       	lpm	r22, Z+
    4b3a:	61 34       	cpi	r22, 0x41	; 65
    4b3c:	1c f0       	brlt	.+6      	; 0x4b44 <strncasecmp_P+0x22>
    4b3e:	6b 35       	cpi	r22, 0x5B	; 91
    4b40:	0c f4       	brge	.+2      	; 0x4b44 <strncasecmp_P+0x22>
    4b42:	60 5e       	subi	r22, 0xE0	; 224
    4b44:	86 1b       	sub	r24, r22
    4b46:	61 11       	cpse	r22, r1
    4b48:	71 f3       	breq	.-36     	; 0x4b26 <strncasecmp_P+0x4>
    4b4a:	99 0b       	sbc	r25, r25
    4b4c:	08 95       	ret
    4b4e:	88 1b       	sub	r24, r24
    4b50:	fc cf       	rjmp	.-8      	; 0x4b4a <strncasecmp_P+0x28>

00004b52 <__ctype_isfalse>:
    4b52:	99 27       	eor	r25, r25
    4b54:	88 27       	eor	r24, r24

00004b56 <__ctype_istrue>:
    4b56:	08 95       	ret

00004b58 <_exit>:
    4b58:	f8 94       	cli

00004b5a <__stop_program>:
    4b5a:	ff cf       	rjmp	.-2      	; 0x4b5a <__stop_program>
