
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00006398  0000642c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fb  00800206  00800206  00006432  2**0
                  ALLOC
  3 .debug_aranges 00000708  00000000  00000000  00006432  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dde  00000000  00000000  00006b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005773  00000000  00000000  00007918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001c89  00000000  00000000  0000d08b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004fcc  00000000  00000000  0000ed14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b70  00000000  00000000  00013ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016bd  00000000  00000000  00014850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003510  00000000  00000000  00015f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bc0  00000000  00000000  0001941d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 03 	jmp	0x62c	; 0x62c <__ctors_end>
       4:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
       8:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
       c:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      10:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      14:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      18:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      1c:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      20:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      24:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      28:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      2c:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      30:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      34:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      38:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      3c:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__vector_15>
      40:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      44:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <__vector_17>
      48:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      4c:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      50:	0c 94 93 26 	jmp	0x4d26	; 0x4d26 <__vector_20>
      54:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      58:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      5c:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <__vector_23>
      60:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      64:	0c 94 bc 1e 	jmp	0x3d78	; 0x3d78 <__vector_25>
      68:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      6c:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      70:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      74:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      78:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      7c:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      80:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <__vector_32>
      84:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      88:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      8c:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      90:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      94:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      98:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      9c:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      a0:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      a4:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      a8:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      ac:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      b0:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      b4:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      b8:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      bc:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      c0:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      c4:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      c8:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      cc:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      d0:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      d4:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      d8:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      dc:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      e0:	0c 94 37 03 	jmp	0x66e	; 0x66e <__bad_interrupt>
      e4:	a0 07       	cpc	r26, r16
      e6:	9c 07       	cpc	r25, r28
      e8:	98 07       	cpc	r25, r24
      ea:	94 07       	cpc	r25, r20
      ec:	88 07       	cpc	r24, r24
      ee:	2d 07       	cpc	r18, r29
      f0:	2d 07       	cpc	r18, r29
      f2:	2d 07       	cpc	r18, r29
      f4:	2d 07       	cpc	r18, r29
      f6:	2d 07       	cpc	r18, r29
      f8:	2d 07       	cpc	r18, r29
      fa:	2d 07       	cpc	r18, r29
      fc:	2d 07       	cpc	r18, r29
      fe:	2d 07       	cpc	r18, r29
     100:	2d 07       	cpc	r18, r29
     102:	2d 07       	cpc	r18, r29
     104:	2d 07       	cpc	r18, r29
     106:	8b 07       	cpc	r24, r27
     108:	c1 07       	cpc	r28, r17
     10a:	b8 07       	cpc	r27, r24
     10c:	b4 07       	cpc	r27, r20
     10e:	b1 07       	cpc	r27, r17
     110:	2d 07       	cpc	r18, r29
     112:	2d 07       	cpc	r18, r29
     114:	2d 07       	cpc	r18, r29
     116:	2d 07       	cpc	r18, r29
     118:	2d 07       	cpc	r18, r29
     11a:	2d 07       	cpc	r18, r29
     11c:	ae 07       	cpc	r26, r30
     11e:	2d 07       	cpc	r18, r29
     120:	ae 07       	cpc	r26, r30
     122:	2d 07       	cpc	r18, r29
     124:	2d 07       	cpc	r18, r29
     126:	2d 07       	cpc	r18, r29
     128:	2d 07       	cpc	r18, r29
     12a:	2d 07       	cpc	r18, r29
     12c:	2d 07       	cpc	r18, r29
     12e:	2d 07       	cpc	r18, r29
     130:	2d 07       	cpc	r18, r29
     132:	2d 07       	cpc	r18, r29
     134:	2d 07       	cpc	r18, r29
     136:	2d 07       	cpc	r18, r29
     138:	2d 07       	cpc	r18, r29
     13a:	2d 07       	cpc	r18, r29
     13c:	2d 07       	cpc	r18, r29
     13e:	2d 07       	cpc	r18, r29
     140:	2d 07       	cpc	r18, r29
     142:	2d 07       	cpc	r18, r29
     144:	2d 07       	cpc	r18, r29
     146:	2d 07       	cpc	r18, r29
     148:	2d 07       	cpc	r18, r29
     14a:	2d 07       	cpc	r18, r29
     14c:	2d 07       	cpc	r18, r29
     14e:	ab 07       	cpc	r26, r27
     150:	2d 07       	cpc	r18, r29
     152:	2d 07       	cpc	r18, r29
     154:	2d 07       	cpc	r18, r29
     156:	2d 07       	cpc	r18, r29
     158:	2d 07       	cpc	r18, r29
     15a:	2d 07       	cpc	r18, r29
     15c:	2d 07       	cpc	r18, r29
     15e:	2d 07       	cpc	r18, r29
     160:	2d 07       	cpc	r18, r29
     162:	2d 07       	cpc	r18, r29
     164:	2d 07       	cpc	r18, r29
     166:	2d 07       	cpc	r18, r29
     168:	2d 07       	cpc	r18, r29
     16a:	2d 07       	cpc	r18, r29
     16c:	2d 07       	cpc	r18, r29
     16e:	2d 07       	cpc	r18, r29
     170:	2d 07       	cpc	r18, r29
     172:	2d 07       	cpc	r18, r29
     174:	2d 07       	cpc	r18, r29
     176:	2d 07       	cpc	r18, r29
     178:	2d 07       	cpc	r18, r29
     17a:	2d 07       	cpc	r18, r29
     17c:	2d 07       	cpc	r18, r29
     17e:	2d 07       	cpc	r18, r29
     180:	2d 07       	cpc	r18, r29
     182:	2d 07       	cpc	r18, r29
     184:	a7 07       	cpc	r26, r23
     186:	2d 07       	cpc	r18, r29
     188:	2d 07       	cpc	r18, r29
     18a:	2d 07       	cpc	r18, r29
     18c:	2d 07       	cpc	r18, r29
     18e:	2d 07       	cpc	r18, r29
     190:	2d 07       	cpc	r18, r29
     192:	2d 07       	cpc	r18, r29
     194:	2d 07       	cpc	r18, r29
     196:	2d 07       	cpc	r18, r29
     198:	a3 07       	cpc	r26, r19
     19a:	d4 07       	cpc	r29, r20
     19c:	d1 07       	cpc	r29, r17
     19e:	cd 07       	cpc	r28, r29
     1a0:	ca 07       	cpc	r28, r26
     1a2:	e9 07       	cpc	r30, r25
     1a4:	e9 07       	cpc	r30, r25
     1a6:	e5 07       	cpc	r30, r21
     1a8:	de 07       	cpc	r29, r30
     1aa:	d7 07       	cpc	r29, r23
     1ac:	1c 08       	sbc	r1, r12
     1ae:	2d 07       	cpc	r18, r29
     1b0:	2d 07       	cpc	r18, r29
     1b2:	15 08       	sbc	r1, r5
     1b4:	10 08       	sbc	r1, r0
     1b6:	09 08       	sbc	r0, r9
     1b8:	02 08       	sbc	r0, r2
     1ba:	fb 07       	cpc	r31, r27
     1bc:	f4 07       	cpc	r31, r20
     1be:	ed 07       	cpc	r30, r29
     1c0:	4e 08       	sbc	r4, r14
     1c2:	47 08       	sbc	r4, r7
     1c4:	40 08       	sbc	r4, r0
     1c6:	39 08       	sbc	r3, r9
     1c8:	32 08       	sbc	r3, r2
     1ca:	2b 08       	sbc	r2, r11
     1cc:	26 08       	sbc	r2, r6
     1ce:	21 08       	sbc	r2, r1
     1d0:	77 08       	sbc	r7, r7
     1d2:	70 08       	sbc	r7, r0
     1d4:	6b 08       	sbc	r6, r11
     1d6:	64 08       	sbc	r6, r4
     1d8:	84 07       	cpc	r24, r20
     1da:	2d 07       	cpc	r18, r29
     1dc:	55 08       	sbc	r5, r5
     1de:	e5 07       	cpc	r30, r21
     1e0:	5f 08       	sbc	r5, r15
     1e2:	2d 07       	cpc	r18, r29
     1e4:	2d 07       	cpc	r18, r29
     1e6:	2d 07       	cpc	r18, r29
     1e8:	2d 07       	cpc	r18, r29
     1ea:	2d 07       	cpc	r18, r29
     1ec:	2d 07       	cpc	r18, r29
     1ee:	2d 07       	cpc	r18, r29
     1f0:	2d 07       	cpc	r18, r29
     1f2:	2d 07       	cpc	r18, r29
     1f4:	2d 07       	cpc	r18, r29
     1f6:	2d 07       	cpc	r18, r29
     1f8:	2d 07       	cpc	r18, r29
     1fa:	2d 07       	cpc	r18, r29
     1fc:	2d 07       	cpc	r18, r29
     1fe:	2d 07       	cpc	r18, r29
     200:	2d 07       	cpc	r18, r29
     202:	2d 07       	cpc	r18, r29
     204:	2d 07       	cpc	r18, r29
     206:	2d 07       	cpc	r18, r29
     208:	2d 07       	cpc	r18, r29
     20a:	2d 07       	cpc	r18, r29
     20c:	2d 07       	cpc	r18, r29
     20e:	2d 07       	cpc	r18, r29
     210:	2d 07       	cpc	r18, r29
     212:	2d 07       	cpc	r18, r29
     214:	2d 07       	cpc	r18, r29
     216:	2d 07       	cpc	r18, r29
     218:	2d 07       	cpc	r18, r29
     21a:	e5 07       	cpc	r30, r21
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.2003>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.2001>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.1999>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1997>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1995>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1993>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1991>:
     273:	0d 0a 00                                            ...

00000276 <__c.1989>:
     276:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

00000282 <__c.1987>:
     282:	0d 0a 00                                            ...

00000285 <__c.1985>:
     285:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000290 <__c.1983>:
     290:	0d 0a 00                                            ...

00000293 <__c.1981>:
     293:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000002a3 <__c.1979>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1977>:
     2a6:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000002b5 <__c.1975>:
     2b5:	0d 0a 00                                            ...

000002b8 <__c.1973>:
     2b8:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000002c5 <__c.1971>:
     2c5:	0d 0a 00                                            ...

000002c8 <__c.1969>:
     2c8:	61 76 72 5f 6d 69 6c 6c 69 73 28 29 20 3d 20 00     avr_millis() = .

000002d8 <__c.1967>:
     2d8:	0d 0a 00                                            ...

000002db <__c.1965>:
     2db:	74 6f 5f 6d 69 6c 6c 69 6d 65 74 65 72 73 28 31     to_millimeters(1
     2eb:	30 30 29 20 3d 20 00                                00) = .

000002f2 <__c.1963>:
     2f2:	43 41 55 54 49 4f 4e 3a 53 69 6d 75 6c 61 74 65     CAUTION:Simulate
     302:	20 6d 6f 64 65 20 69 73 20 6f 6e 0a 00               mode is on..

0000030f <__c.1961>:
     30f:	0d 0a 00                                            ...

00000312 <__c.1959>:
     312:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

00000321 <__c.1957>:
     321:	0d 0a 00                                            ...

00000324 <__c.1955>:
     324:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

0000032e <__c.1953>:
     32e:	0d 0a 00                                            ...

00000331 <__c.1951>:
     331:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     341:	3d 20 00                                            = .

00000344 <__c.1949>:
     344:	0d 0a 00                                            ...

00000347 <__c.1947>:
     347:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     357:	20 00                                                .

00000359 <__c.1830>:
     359:	65 72 72 0a 00                                      err..

0000035e <__c.1827>:
     35e:	6f 6b 0a 00                                         ok..

00000362 <__c.1823>:
     362:	6e 68 6f 0a 00                                      nho..

00000367 <__c.1819>:
     367:	6c 69 6d 0a 00                                      lim..

0000036c <__c.1770>:
     36c:	6f 6b 0a 00                                         ok..

00000370 <__c.1746>:
     370:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     380:	6e 67 0d 0a 00                                      ng...

00000385 <__c.1744>:
     385:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     395:	72 0d 0a 00                                         r...

00000399 <__c.1701>:
     399:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     3a9:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     3b9:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     3c9:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     3d9:	0d 0a 00                                            ...

000003dc <__c.1699>:
     3dc:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     3ec:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     3fc:	61 62 6c 65 64 29 0d 0a 00                          abled)...

00000405 <__c.1697>:
     405:	24 31 30 30 30 20 3d 20 00                          $1000 = .

0000040e <__c.1695>:
     40e:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     41e:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     42e:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     43e:	2f 6d 69 6e 29 0d 0a 00                             /min)...

00000446 <__c.1693>:
     446:	24 39 20 3d 20 00                                   $9 = .

0000044c <__c.1691>:
     44c:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     45c:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

0000046a <__c.1689>:
     46a:	24 38 20 3d 20 00                                   $8 = .

00000470 <__c.1687>:
     470:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     480:	29 0d 0a 00                                         )...

00000484 <__c.1685>:
     484:	24 37 20 3d 20 00                                   $7 = .

0000048a <__c.1683>:
     48a:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     49a:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

000004a8 <__c.1681>:
     4a8:	24 36 20 3d 20 00                                   $6 = .

000004ae <__c.1679>:
     4ae:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     4be:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

000004cc <__c.1677>:
     4cc:	24 35 20 3d 20 00                                   $5 = .

000004d2 <__c.1675>:
     4d2:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     4e2:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

000004ef <__c.1673>:
     4ef:	24 34 20 3d 20 00                                   $4 = .

000004f5 <__c.1671>:
     4f5:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     505:	0a 00                                               ..

00000507 <__c.1669>:
     507:	24 33 20 3d 20 00                                   $3 = .

0000050d <__c.1667>:
     50d:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

0000051d <__c.1665>:
     51d:	24 32 20 3d 20 00                                   $2 = .

00000523 <__c.1663>:
     523:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

00000533 <__c.1661>:
     533:	24 31 20 3d 20 00                                   $1 = .

00000539 <__c.1659>:
     539:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

00000549 <__c.1657>:
     549:	24 30 20 3d 20 00                                   $0 = .

0000054f <__c.1655>:
     54f:	0d 0a 00                                            ...

00000552 <__c.1653>:
     552:	30 2e 37 36 50 42 00                                0.76PB.

00000559 <__c.1651>:
     559:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

00000565 <__c.2121>:
     565:	79 4c 69 6d 69 74 32 3a 20 69 73 20 69 6e 20 6c     yLimit2: is in l
     575:	69 6d 69 74 0d 0a 00                                imit...

0000057c <__c.2112>:
     57c:	79 4c 69 6d 69 74 31 3a 20 69 73 20 69 6e 20 6c     yLimit1: is in l
     58c:	69 6d 69 74 0d 0a 00                                imit...

00000593 <__c.2103>:
     593:	78 4c 69 6d 69 74 32 3a 20 69 73 20 69 6e 20 6c     xLimit2: is in l
     5a3:	69 6d 69 74 0d 0a 00                                imit...

000005aa <__c.2094>:
     5aa:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000005b4 <__c.1857>:
     5b4:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     5c4:	0d 00                                               ..

000005c6 <__c.1891>:
     5c6:	6e 6f 0a 00                                         no..

000005ca <__c.1889>:
     5ca:	79 65 73 0a 00                                      yes..

000005cf <__c.1810>:
     5cf:	45 72 72 6f 72 3a 20 4f 53 43 4f 4b 49 52 51 20     Error: OSCOKIRQ 
     5df:	66 61 69 6c 65 64 20 74 6f 20 61 73 73 65 72 74     failed to assert
     5ef:	0a 00                                               ..

000005f1 <pstr_inf>:
     5f1:	49 4e 46                                            INF

000005f4 <pstr_inity>:
     5f4:	49 4e 49 54 59                                      INITY

000005f9 <pstr_nan>:
     5f9:	4e 41 4e                                            NAN

000005fc <pwr_m10>:
     5fc:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     60c:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000614 <pwr_p10>:
     614:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     624:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000062c <__ctors_end>:
     62c:	11 24       	eor	r1, r1
     62e:	1f be       	out	0x3f, r1	; 63
     630:	cf ef       	ldi	r28, 0xFF	; 255
     632:	d1 e2       	ldi	r29, 0x21	; 33
     634:	de bf       	out	0x3e, r29	; 62
     636:	cd bf       	out	0x3d, r28	; 61
     638:	00 e0       	ldi	r16, 0x00	; 0
     63a:	0c bf       	out	0x3c, r16	; 60

0000063c <__do_copy_data>:
     63c:	12 e0       	ldi	r17, 0x02	; 2
     63e:	a0 e0       	ldi	r26, 0x00	; 0
     640:	b2 e0       	ldi	r27, 0x02	; 2
     642:	e8 e9       	ldi	r30, 0x98	; 152
     644:	f3 e6       	ldi	r31, 0x63	; 99
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	0b bf       	out	0x3b, r16	; 59
     64a:	02 c0       	rjmp	.+4      	; 0x650 <__do_copy_data+0x14>
     64c:	07 90       	elpm	r0, Z+
     64e:	0d 92       	st	X+, r0
     650:	a6 30       	cpi	r26, 0x06	; 6
     652:	b1 07       	cpc	r27, r17
     654:	d9 f7       	brne	.-10     	; 0x64c <__do_copy_data+0x10>

00000656 <__do_clear_bss>:
     656:	17 e0       	ldi	r17, 0x07	; 7
     658:	a6 e0       	ldi	r26, 0x06	; 6
     65a:	b2 e0       	ldi	r27, 0x02	; 2
     65c:	01 c0       	rjmp	.+2      	; 0x660 <.do_clear_bss_start>

0000065e <.do_clear_bss_loop>:
     65e:	1d 92       	st	X+, r1

00000660 <.do_clear_bss_start>:
     660:	a1 30       	cpi	r26, 0x01	; 1
     662:	b1 07       	cpc	r27, r17
     664:	e1 f7       	brne	.-8      	; 0x65e <.do_clear_bss_loop>
     666:	0e 94 c9 0a 	call	0x1592	; 0x1592 <main>
     66a:	0c 94 ca 31 	jmp	0x6394	; 0x6394 <_exit>

0000066e <__bad_interrupt>:
     66e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000672 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     672:	24 9a       	sbi	0x04, 4	; 4
}
     674:	08 95       	ret

00000676 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     676:	89 2b       	or	r24, r25
     678:	11 f4       	brne	.+4      	; 0x67e <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     67a:	2c 98       	cbi	0x05, 4	; 5
     67c:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     67e:	2c 9a       	sbi	0x05, 4	; 5
     680:	08 95       	ret

00000682 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     682:	f9 99       	sbic	0x1f, 1	; 31
     684:	fe cf       	rjmp	.-4      	; 0x682 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     686:	92 bd       	out	0x22, r25	; 34
     688:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     68e:	80 b5       	in	r24, 0x20	; 32
}
     690:	08 95       	ret

00000692 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     692:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     694:	f9 99       	sbic	0x1f, 1	; 31
     696:	fe cf       	rjmp	.-4      	; 0x694 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     698:	92 bd       	out	0x22, r25	; 34
     69a:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     6a0:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     6a2:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     6a4:	89 2f       	mov	r24, r25
     6a6:	86 23       	and	r24, r22
     6a8:	41 f0       	breq	.+16     	; 0x6ba <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     6aa:	6f 3f       	cpi	r22, 0xFF	; 255
     6ac:	71 f0       	breq	.+28     	; 0x6ca <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     6ae:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     6b4:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6b6:	78 94       	sei
}
     6b8:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     6ba:	99 23       	and	r25, r25
     6bc:	e1 f3       	breq	.-8      	; 0x6b6 <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6be:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6c0:	84 e2       	ldi	r24, 0x24	; 36
     6c2:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     6c4:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     6c6:	78 94       	sei
}
     6c8:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6ca:	84 e1       	ldi	r24, 0x14	; 20
     6cc:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     6ce:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6d0:	78 94       	sei
}
     6d2:	08 95       	ret

000006d4 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	6c 01       	movw	r12, r24
     6e8:	8b 01       	movw	r16, r22
     6ea:	5a 01       	movw	r10, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6ec:	41 15       	cp	r20, r1
     6ee:	51 05       	cpc	r21, r1
     6f0:	59 f1       	breq	.+86     	; 0x748 <memcpy_to_eeprom_with_checksum+0x74>
     6f2:	ff 24       	eor	r15, r15
     6f4:	c0 e0       	ldi	r28, 0x00	; 0
     6f6:	d0 e0       	ldi	r29, 0x00	; 0
     6f8:	0d c0       	rjmp	.+26     	; 0x714 <memcpy_to_eeprom_with_checksum+0x40>
    checksum = (checksum << 1) || (checksum >> 7);
     6fa:	21 e0       	ldi	r18, 0x01	; 1
    checksum += *source;
     6fc:	f8 01       	movw	r30, r16
     6fe:	60 81       	ld	r22, Z
     700:	f2 2e       	mov	r15, r18
     702:	f6 0e       	add	r15, r22
    eeprom_put_char(destination++, *(source++)); 
     704:	0e 94 49 03 	call	0x692	; 0x692 <eeprom_put_char>
     708:	21 96       	adiw	r28, 0x01	; 1
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     70a:	ca 15       	cp	r28, r10
     70c:	db 05       	cpc	r29, r11
     70e:	61 f0       	breq	.+24     	; 0x728 <memcpy_to_eeprom_with_checksum+0x54>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     710:	0f 5f       	subi	r16, 0xFF	; 255
     712:	1f 4f       	sbci	r17, 0xFF	; 255
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     714:	ce 01       	movw	r24, r28
     716:	8c 0d       	add	r24, r12
     718:	9d 1d       	adc	r25, r13
    checksum = (checksum << 1) || (checksum >> 7);
     71a:	ff 20       	and	r15, r15
     71c:	71 f7       	brne	.-36     	; 0x6fa <memcpy_to_eeprom_with_checksum+0x26>
     71e:	2f 2d       	mov	r18, r15
     720:	22 1f       	adc	r18, r18
     722:	22 27       	eor	r18, r18
     724:	22 1f       	adc	r18, r18
     726:	ea cf       	rjmp	.-44     	; 0x6fc <memcpy_to_eeprom_with_checksum+0x28>
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     728:	cc 0e       	add	r12, r28
     72a:	dd 1e       	adc	r13, r29
  }
  eeprom_put_char(destination, checksum);
     72c:	c6 01       	movw	r24, r12
     72e:	6f 2d       	mov	r22, r15
     730:	0e 94 49 03 	call	0x692	; 0x692 <eeprom_put_char>
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	bf 90       	pop	r11
     744:	af 90       	pop	r10
     746:	08 95       	ret
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     748:	ff 24       	eor	r15, r15
     74a:	f0 cf       	rjmp	.-32     	; 0x72c <memcpy_to_eeprom_with_checksum+0x58>

0000074c <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     74c:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     74e:	41 15       	cp	r20, r1
     750:	51 05       	cpc	r21, r1
     752:	c9 f1       	breq	.+114    	; 0x7c6 <memcpy_from_eeprom_with_checksum+0x7a>
     754:	a0 e0       	ldi	r26, 0x00	; 0
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     75a:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     75c:	c9 01       	movw	r24, r18
     75e:	86 0f       	add	r24, r22
     760:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     762:	f9 99       	sbic	0x1f, 1	; 31
     764:	fe cf       	rjmp	.-4      	; 0x762 <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     766:	92 bd       	out	0x22, r25	; 34
     768:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     76a:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     76c:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     76e:	aa 23       	and	r26, r26
     770:	59 f0       	breq	.+22     	; 0x788 <memcpy_from_eeprom_with_checksum+0x3c>
     772:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     774:	a8 2f       	mov	r26, r24
     776:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     778:	90 83       	st	Z, r25
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     77e:	24 17       	cp	r18, r20
     780:	35 07       	cpc	r19, r21
     782:	71 f0       	breq	.+28     	; 0x7a0 <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     784:	31 96       	adiw	r30, 0x01	; 1
     786:	ea cf       	rjmp	.-44     	; 0x75c <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     788:	8a 2f       	mov	r24, r26
     78a:	88 1f       	adc	r24, r24
     78c:	88 27       	eor	r24, r24
     78e:	88 1f       	adc	r24, r24
    checksum += data;    
     790:	a8 2f       	mov	r26, r24
     792:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     794:	90 83       	st	Z, r25
     796:	2f 5f       	subi	r18, 0xFF	; 255
     798:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     79a:	24 17       	cp	r18, r20
     79c:	35 07       	cpc	r19, r21
     79e:	91 f7       	brne	.-28     	; 0x784 <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     7a0:	62 0f       	add	r22, r18
     7a2:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7a4:	f9 99       	sbic	0x1f, 1	; 31
     7a6:	fe cf       	rjmp	.-4      	; 0x7a4 <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     7a8:	72 bd       	out	0x22, r23	; 34
     7aa:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     7b0:	80 b5       	in	r24, 0x20	; 32
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	a8 17       	cp	r26, r24
     7b8:	11 f0       	breq	.+4      	; 0x7be <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7ba:	c9 01       	movw	r24, r18
     7bc:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7c2:	c9 01       	movw	r24, r18
     7c4:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	ed cf       	rjmp	.-38     	; 0x7a4 <memcpy_from_eeprom_with_checksum+0x58>

000007ca <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     7ca:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     7ce:	60 93 30 02 	sts	0x0230, r22
  gc.plane_axis_2 = axis_2;
     7d2:	40 93 31 02 	sts	0x0231, r20
}
     7d6:	08 95       	ret

000007d8 <set_feeder_x>:

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
     7d8:	60 93 06 02 	sts	0x0206, r22
     7dc:	70 93 07 02 	sts	0x0207, r23
     7e0:	80 93 08 02 	sts	0x0208, r24
     7e4:	90 93 09 02 	sts	0x0209, r25
}
     7e8:	08 95       	ret

000007ea <set_feeder_y>:

void set_feeder_y( double y )
{
	feeder_x_pos = y;
     7ea:	60 93 06 02 	sts	0x0206, r22
     7ee:	70 93 07 02 	sts	0x0207, r23
     7f2:	80 93 08 02 	sts	0x0208, r24
     7f6:	90 93 09 02 	sts	0x0209, r25
}
     7fa:	08 95       	ret

000007fc <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     7fc:	2f 92       	push	r2
     7fe:	3f 92       	push	r3
     800:	4f 92       	push	r4
     802:	5f 92       	push	r5
     804:	6f 92       	push	r6
     806:	7f 92       	push	r7
     808:	8f 92       	push	r8
     80a:	9f 92       	push	r9
     80c:	af 92       	push	r10
     80e:	bf 92       	push	r11
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	df 93       	push	r29
     81e:	cf 93       	push	r28
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	28 97       	sbiw	r28, 0x08	; 8
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	69 83       	std	Y+1, r22	; 0x01
     832:	7a 83       	std	Y+2, r23	; 0x02
     834:	8b 83       	std	Y+3, r24	; 0x03
     836:	9c 83       	std	Y+4, r25	; 0x04
     838:	2d 83       	std	Y+5, r18	; 0x05
     83a:	3e 83       	std	Y+6, r19	; 0x06
     83c:	4f 83       	std	Y+7, r20	; 0x07
     83e:	58 87       	std	Y+8, r21	; 0x08
     840:	17 01       	movw	r2, r14
     842:	28 01       	movw	r4, r16
     844:	35 01       	movw	r6, r10
     846:	46 01       	movw	r8, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e8       	ldi	r20, 0x80	; 128
     84e:	5f eb       	ldi	r21, 0xBF	; 191
     850:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
     854:	88 23       	and	r24, r24
     856:	41 f4       	brne	.+16     	; 0x868 <gotoxy+0x6c>
     858:	20 90 1c 02 	lds	r2, 0x021C
     85c:	30 90 1d 02 	lds	r3, 0x021D
     860:	40 90 1e 02 	lds	r4, 0x021E
     864:	50 90 1f 02 	lds	r5, 0x021F
  if( y == -1) c = gc.position[Y_AXIS] ;
     868:	6d 81       	ldd	r22, Y+5	; 0x05
     86a:	7e 81       	ldd	r23, Y+6	; 0x06
     86c:	8f 81       	ldd	r24, Y+7	; 0x07
     86e:	98 85       	ldd	r25, Y+8	; 0x08
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e8       	ldi	r20, 0x80	; 128
     876:	5f eb       	ldi	r21, 0xBF	; 191
     878:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
     87c:	88 23       	and	r24, r24
     87e:	41 f4       	brne	.+16     	; 0x890 <gotoxy+0x94>
     880:	60 90 20 02 	lds	r6, 0x0220
     884:	70 90 21 02 	lds	r7, 0x0221
     888:	80 90 22 02 	lds	r8, 0x0222
     88c:	90 90 23 02 	lds	r9, 0x0223
  if( z == -1) z = gc.position[Z_AXIS] ;
     890:	c2 01       	movw	r24, r4
     892:	b1 01       	movw	r22, r2
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 e8       	ldi	r20, 0x80	; 128
     89a:	5f eb       	ldi	r21, 0xBF	; 191
     89c:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
     8a0:	88 23       	and	r24, r24
     8a2:	41 f4       	brne	.+16     	; 0x8b4 <gotoxy+0xb8>
     8a4:	20 90 24 02 	lds	r2, 0x0224
     8a8:	30 90 25 02 	lds	r3, 0x0225
     8ac:	40 90 26 02 	lds	r4, 0x0226
     8b0:	50 90 27 02 	lds	r5, 0x0227
  if( c == -1) c = gc.position[C_AXIS] ;
     8b4:	c4 01       	movw	r24, r8
     8b6:	b3 01       	movw	r22, r6
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 e8       	ldi	r20, 0x80	; 128
     8be:	5f eb       	ldi	r21, 0xBF	; 191
     8c0:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
     8c4:	88 23       	and	r24, r24
     8c6:	41 f4       	brne	.+16     	; 0x8d8 <gotoxy+0xdc>
     8c8:	60 90 28 02 	lds	r6, 0x0228
     8cc:	70 90 29 02 	lds	r7, 0x0229
     8d0:	80 90 2a 02 	lds	r8, 0x022A
     8d4:	90 90 2b 02 	lds	r9, 0x022B

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     8d8:	00 d0       	rcall	.+0      	; 0x8da <gotoxy+0xde>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <gotoxy+0xe0>
     8dc:	80 91 18 02 	lds	r24, 0x0218
     8e0:	90 91 19 02 	lds	r25, 0x0219
     8e4:	a0 91 1a 02 	lds	r26, 0x021A
     8e8:	b0 91 1b 02 	lds	r27, 0x021B
     8ec:	ed b7       	in	r30, 0x3d	; 61
     8ee:	fe b7       	in	r31, 0x3e	; 62
     8f0:	81 83       	std	Z+1, r24	; 0x01
     8f2:	92 83       	std	Z+2, r25	; 0x02
     8f4:	a3 83       	std	Z+3, r26	; 0x03
     8f6:	b4 83       	std	Z+4, r27	; 0x04
     8f8:	16 82       	std	Z+6, r1	; 0x06
     8fa:	15 82       	std	Z+5, r1	; 0x05
     8fc:	69 81       	ldd	r22, Y+1	; 0x01
     8fe:	7a 81       	ldd	r23, Y+2	; 0x02
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	2d 81       	ldd	r18, Y+5	; 0x05
     906:	3e 81       	ldd	r19, Y+6	; 0x06
     908:	4f 81       	ldd	r20, Y+7	; 0x07
     90a:	58 85       	ldd	r21, Y+8	; 0x08
     90c:	82 01       	movw	r16, r4
     90e:	71 01       	movw	r14, r2
     910:	64 01       	movw	r12, r8
     912:	53 01       	movw	r10, r6
     914:	0e 94 a9 10 	call	0x2152	; 0x2152 <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	ab 81       	ldd	r26, Y+3	; 0x03
     91e:	bc 81       	ldd	r27, Y+4	; 0x04
     920:	80 93 1c 02 	sts	0x021C, r24
     924:	90 93 1d 02 	sts	0x021D, r25
     928:	a0 93 1e 02 	sts	0x021E, r26
     92c:	b0 93 1f 02 	sts	0x021F, r27
   gc.position[Y_AXIS] = y;
     930:	8d 81       	ldd	r24, Y+5	; 0x05
     932:	9e 81       	ldd	r25, Y+6	; 0x06
     934:	af 81       	ldd	r26, Y+7	; 0x07
     936:	b8 85       	ldd	r27, Y+8	; 0x08
     938:	80 93 20 02 	sts	0x0220, r24
     93c:	90 93 21 02 	sts	0x0221, r25
     940:	a0 93 22 02 	sts	0x0222, r26
     944:	b0 93 23 02 	sts	0x0223, r27
   gc.position[Z_AXIS] = z;
     948:	20 92 24 02 	sts	0x0224, r2
     94c:	30 92 25 02 	sts	0x0225, r3
     950:	40 92 26 02 	sts	0x0226, r4
     954:	50 92 27 02 	sts	0x0227, r5
   gc.position[C_AXIS] = c;
     958:	60 92 28 02 	sts	0x0228, r6
     95c:	70 92 29 02 	sts	0x0229, r7
     960:	80 92 2a 02 	sts	0x022A, r8
     964:	90 92 2b 02 	sts	0x022B, r9
     968:	ad b7       	in	r26, 0x3d	; 61
     96a:	be b7       	in	r27, 0x3e	; 62
     96c:	16 96       	adiw	r26, 0x06	; 6
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	be bf       	out	0x3e, r27	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	ad bf       	out	0x3d, r26	; 61

}
     978:	28 96       	adiw	r28, 0x08	; 8
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	cf 91       	pop	r28
     986:	df 91       	pop	r29
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	8f 90       	pop	r8
     99c:	7f 90       	pop	r7
     99e:	6f 90       	pop	r6
     9a0:	5f 90       	pop	r5
     9a2:	4f 90       	pop	r4
     9a4:	3f 90       	pop	r3
     9a6:	2f 90       	pop	r2
     9a8:	08 95       	ret

000009aa <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     9aa:	af 92       	push	r10
     9ac:	bf 92       	push	r11
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	0f 92       	push	r0
     9c0:	0f 92       	push	r0
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	6c 01       	movw	r12, r24
     9c8:	5b 01       	movw	r10, r22
     9ca:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     9cc:	fb 01       	movw	r30, r22
     9ce:	00 81       	ld	r16, Z
     9d0:	11 81       	ldd	r17, Z+1	; 0x01
     9d2:	08 0f       	add	r16, r24
     9d4:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     9d6:	c8 01       	movw	r24, r16
     9d8:	be 01       	movw	r22, r28
     9da:	6f 5f       	subi	r22, 0xFF	; 255
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	0e 94 39 30 	call	0x6072	; 0x6072 <strtod>
     9e2:	f7 01       	movw	r30, r14
     9e4:	60 83       	st	Z, r22
     9e6:	71 83       	std	Z+1, r23	; 0x01
     9e8:	82 83       	std	Z+2, r24	; 0x02
     9ea:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	9a 81       	ldd	r25, Y+2	; 0x02
     9f0:	80 17       	cp	r24, r16
     9f2:	91 07       	cpc	r25, r17
     9f4:	a9 f0       	breq	.+42     	; 0xa20 <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     9f6:	8c 19       	sub	r24, r12
     9f8:	9d 09       	sbc	r25, r13
     9fa:	f5 01       	movw	r30, r10
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	80 83       	st	Z, r24
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     a04:	c9 01       	movw	r24, r18
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 0a 02 	sts	0x020A, r24
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	ec cf       	rjmp	.-40     	; 0xa04 <read_double+0x5a>

00000a2c <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
     a36:	8b 01       	movw	r16, r22
     a38:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     a3a:	ed 91       	ld	r30, X+
     a3c:	fc 91       	ld	r31, X
     a3e:	11 97       	sbiw	r26, 0x01	; 1
     a40:	e4 0f       	add	r30, r20
     a42:	f5 1f       	adc	r31, r21
     a44:	e0 81       	ld	r30, Z
     a46:	ee 23       	and	r30, r30
     a48:	39 f0       	breq	.+14     	; 0xa58 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     a4a:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     a4c:	e1 54       	subi	r30, 0x41	; 65
     a4e:	ea 31       	cpi	r30, 0x1A	; 26
     a50:	58 f0       	brcs	.+22     	; 0xa68 <next_statement+0x3c>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	80 93 0a 02 	sts	0x020A, r24
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     a5c:	c9 01       	movw	r24, r18
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     a68:	8d 91       	ld	r24, X+
     a6a:	9c 91       	ld	r25, X
     a6c:	11 97       	sbiw	r26, 0x01	; 1
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	8d 93       	st	X+, r24
     a72:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     a74:	ca 01       	movw	r24, r20
     a76:	b9 01       	movw	r22, r18
     a78:	a8 01       	movw	r20, r16
     a7a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <read_double>
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	11 f0       	breq	.+4      	; 0xa86 <next_statement+0x5a>
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     a88:	c9 01       	movw	r24, r18
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     a94:	88 e2       	ldi	r24, 0x28	; 40
     a96:	ea e0       	ldi	r30, 0x0A	; 10
     a98:	f2 e0       	ldi	r31, 0x02	; 2
     a9a:	df 01       	movw	r26, r30
     a9c:	1d 92       	st	X+, r1
     a9e:	8a 95       	dec	r24
     aa0:	e9 f7       	brne	.-6      	; 0xa9c <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     aa2:	60 91 a7 06 	lds	r22, 0x06A7
     aa6:	70 91 a8 06 	lds	r23, 0x06A8
     aaa:	80 91 a9 06 	lds	r24, 0x06A9
     aae:	90 91 aa 06 	lds	r25, 0x06AA
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e7       	ldi	r20, 0x70	; 112
     ab8:	52 e4       	ldi	r21, 0x42	; 66
     aba:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
     abe:	60 93 14 02 	sts	0x0214, r22
     ac2:	70 93 15 02 	sts	0x0215, r23
     ac6:	80 93 16 02 	sts	0x0216, r24
     aca:	90 93 17 02 	sts	0x0217, r25
  gc.seek_rate = settings.default_seek_rate/60;
     ace:	60 91 ab 06 	lds	r22, 0x06AB
     ad2:	70 91 ac 06 	lds	r23, 0x06AC
     ad6:	80 91 ad 06 	lds	r24, 0x06AD
     ada:	90 91 ae 06 	lds	r25, 0x06AE
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e7       	ldi	r20, 0x70	; 112
     ae4:	52 e4       	ldi	r21, 0x42	; 66
     ae6:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
     aea:	60 93 18 02 	sts	0x0218, r22
     aee:	70 93 19 02 	sts	0x0219, r23
     af2:	80 93 1a 02 	sts	0x021A, r24
     af6:	90 93 1b 02 	sts	0x021B, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     afa:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	80 93 31 02 	sts	0x0231, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     b0a:	90 93 0e 02 	sts	0x020E, r25
}
     b0e:	08 95       	ret

00000b10 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     b10:	2f 92       	push	r2
     b12:	3f 92       	push	r3
     b14:	4f 92       	push	r4
     b16:	5f 92       	push	r5
     b18:	6f 92       	push	r6
     b1a:	7f 92       	push	r7
     b1c:	8f 92       	push	r8
     b1e:	9f 92       	push	r9
     b20:	af 92       	push	r10
     b22:	bf 92       	push	r11
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	df 93       	push	r29
     b32:	cf 93       	push	r28
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	e7 97       	sbiw	r28, 0x37	; 55
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     b46:	1b 82       	std	Y+3, r1	; 0x03
     b48:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	88 87       	std	Y+8, r24	; 0x08
     b54:	99 87       	std	Y+9, r25	; 0x09
     b56:	aa 87       	std	Y+10, r26	; 0x0a
     b58:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     b5a:	ac e0       	ldi	r26, 0x0C	; 12
     b5c:	2a 2e       	mov	r2, r26
     b5e:	31 2c       	mov	r3, r1
     b60:	2c 0e       	add	r2, r28
     b62:	3d 1e       	adc	r3, r29
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	d1 01       	movw	r26, r2
     b68:	e8 2f       	mov	r30, r24
     b6a:	1d 92       	st	X+, r1
     b6c:	ea 95       	dec	r30
     b6e:	e9 f7       	brne	.-6      	; 0xb6a <gc_execute_line+0x5a>
  clear_vector(offset);
     b70:	fc e1       	ldi	r31, 0x1C	; 28
     b72:	cf 2e       	mov	r12, r31
     b74:	d1 2c       	mov	r13, r1
     b76:	cc 0e       	add	r12, r28
     b78:	dd 1e       	adc	r13, r29
     b7a:	d6 01       	movw	r26, r12
     b7c:	1d 92       	st	X+, r1
     b7e:	8a 95       	dec	r24
     b80:	e9 f7       	brne	.-6      	; 0xb7c <gc_execute_line+0x6c>

  gc.status_code = GCSTATUS_OK;
     b82:	10 92 0a 02 	sts	0x020A, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     b86:	f5 01       	movw	r30, r10
     b88:	80 81       	ld	r24, Z
     b8a:	88 32       	cpi	r24, 0x28	; 40
     b8c:	09 f4       	brne	.+2      	; 0xb90 <gc_execute_line+0x80>
     b8e:	86 c0       	rjmp	.+268    	; 0xc9c <gc_execute_line+0x18c>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     b90:	8f 32       	cpi	r24, 0x2F	; 47
     b92:	09 f4       	brne	.+2      	; 0xb96 <gc_execute_line+0x86>
     b94:	6e c0       	rjmp	.+220    	; 0xc72 <gc_execute_line+0x162>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     b96:	84 32       	cpi	r24, 0x24	; 36
     b98:	09 f4       	brne	.+2      	; 0xb9c <gc_execute_line+0x8c>
     b9a:	4a c0       	rjmp	.+148    	; 0xc30 <gc_execute_line+0x120>
     b9c:	19 aa       	std	Y+49, r1	; 0x31
     b9e:	18 aa       	std	Y+48, r1	; 0x30
     ba0:	e2 e0       	ldi	r30, 0x02	; 2
     ba2:	6e 2e       	mov	r6, r30
     ba4:	71 2c       	mov	r7, r1
     ba6:	6c 0e       	add	r6, r28
     ba8:	7d 1e       	adc	r7, r29
     baa:	74 e0       	ldi	r23, 0x04	; 4
     bac:	47 2e       	mov	r4, r23
     bae:	51 2c       	mov	r5, r1
     bb0:	4c 0e       	add	r4, r28
     bb2:	5d 1e       	adc	r5, r29
     bb4:	4e 01       	movw	r8, r28
     bb6:	08 94       	sec
     bb8:	81 1c       	adc	r8, r1
     bba:	91 1c       	adc	r9, r1
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     bbc:	c4 01       	movw	r24, r8
     bbe:	b2 01       	movw	r22, r4
     bc0:	a5 01       	movw	r20, r10
     bc2:	93 01       	movw	r18, r6
     bc4:	0e 94 16 05 	call	0xa2c	; 0xa2c <next_statement>
     bc8:	89 2b       	or	r24, r25
     bca:	09 f4       	brne	.+2      	; 0xbce <gc_execute_line+0xbe>
     bcc:	95 c2       	rjmp	.+1322   	; 0x10f8 <gc_execute_line+0x5e8>
    int_value = trunc(value);
     bce:	6c 81       	ldd	r22, Y+4	; 0x04
     bd0:	7d 81       	ldd	r23, Y+5	; 0x05
     bd2:	8e 81       	ldd	r24, Y+6	; 0x06
     bd4:	9f 81       	ldd	r25, Y+7	; 0x07
     bd6:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <trunc>
     bda:	7b 01       	movw	r14, r22
     bdc:	8c 01       	movw	r16, r24
     bde:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>

    switch(letter) {
     be2:	29 81       	ldd	r18, Y+1	; 0x01
     be4:	27 34       	cpi	r18, 0x47	; 71
     be6:	09 f4       	brne	.+2      	; 0xbea <gc_execute_line+0xda>
     be8:	3c c1       	rjmp	.+632    	; 0xe62 <gc_execute_line+0x352>
     bea:	28 34       	cpi	r18, 0x48	; 72
     bec:	08 f0       	brcs	.+2      	; 0xbf0 <gc_execute_line+0xe0>
     bee:	47 c0       	rjmp	.+142    	; 0xc7e <gc_execute_line+0x16e>
     bf0:	24 34       	cpi	r18, 0x44	; 68
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <gc_execute_line+0xe6>
     bf4:	55 c0       	rjmp	.+170    	; 0xca0 <gc_execute_line+0x190>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }

    if(gc.status_code) { break; }
     bf6:	80 91 0a 02 	lds	r24, 0x020A
     bfa:	88 23       	and	r24, r24
     bfc:	f9 f2       	breq	.-66     	; 0xbbc <gc_execute_line+0xac>
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     bfe:	e7 96       	adiw	r28, 0x37	; 55
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	9f 90       	pop	r9
     c20:	8f 90       	pop	r8
     c22:	7f 90       	pop	r7
     c24:	6f 90       	pop	r6
     c26:	5f 90       	pop	r5
     c28:	4f 90       	pop	r4
     c2a:	3f 90       	pop	r3
     c2c:	2f 90       	pop	r2
     c2e:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c38:	d5 01       	movw	r26, r10
     c3a:	11 96       	adiw	r26, 0x01	; 1
     c3c:	8c 91       	ld	r24, X
     c3e:	88 23       	and	r24, r24
     c40:	59 f1       	breq	.+86     	; 0xc98 <gc_execute_line+0x188>
    read_double(line, &char_counter, &p);
     c42:	8e 01       	movw	r16, r28
     c44:	0e 5f       	subi	r16, 0xFE	; 254
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
     c48:	c5 01       	movw	r24, r10
     c4a:	b8 01       	movw	r22, r16
     c4c:	ae 01       	movw	r20, r28
     c4e:	48 5f       	subi	r20, 0xF8	; 248
     c50:	5f 4f       	sbci	r21, 0xFF	; 255
     c52:	0e 94 d5 04 	call	0x9aa	; 0x9aa <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	9b 81       	ldd	r25, Y+3	; 0x03
     c5a:	f5 01       	movw	r30, r10
     c5c:	e8 0f       	add	r30, r24
     c5e:	f9 1f       	adc	r31, r25
     c60:	20 81       	ld	r18, Z
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	9b 83       	std	Y+3, r25	; 0x03
     c66:	8a 83       	std	Y+2, r24	; 0x02
     c68:	2d 33       	cpi	r18, 0x3D	; 61
     c6a:	09 f4       	brne	.+2      	; 0xc6e <gc_execute_line+0x15e>
     c6c:	2d c1       	rjmp	.+602    	; 0xec8 <gc_execute_line+0x3b8>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	c6 cf       	rjmp	.-116    	; 0xbfe <gc_execute_line+0xee>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	9b 81       	ldd	r25, Y+3	; 0x03
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	9b 83       	std	Y+3, r25	; 0x03
     c7a:	8a 83       	std	Y+2, r24	; 0x02
     c7c:	8f cf       	rjmp	.-226    	; 0xb9c <gc_execute_line+0x8c>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     c7e:	2d 34       	cpi	r18, 0x4D	; 77
     c80:	09 f4       	brne	.+2      	; 0xc84 <gc_execute_line+0x174>
     c82:	e6 c0       	rjmp	.+460    	; 0xe50 <gc_execute_line+0x340>
     c84:	24 35       	cpi	r18, 0x54	; 84
     c86:	09 f0       	breq	.+2      	; 0xc8a <gc_execute_line+0x17a>
     c88:	b6 cf       	rjmp	.-148    	; 0xbf6 <gc_execute_line+0xe6>


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     c8a:	c8 01       	movw	r24, r16
     c8c:	b7 01       	movw	r22, r14
     c8e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
     c92:	60 93 2c 02 	sts	0x022C, r22
     c96:	af cf       	rjmp	.-162    	; 0xbf6 <gc_execute_line+0xe6>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c98:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <settings_dump>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	af cf       	rjmp	.-162    	; 0xbfe <gc_execute_line+0xee>
    switch(letter) {
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     ca0:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     ca2:	87 e4       	ldi	r24, 0x47	; 71
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
		  	printBinary( DIRECTION_DDR );
     caa:	60 b3       	in	r22, 0x10	; 16
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cb6:	84 e4       	ldi	r24, 0x44	; 68
     cb8:	93 e0       	ldi	r25, 0x03	; 3
     cba:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     cbe:	81 e3       	ldi	r24, 0x31	; 49
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
		  	printBinary( DIRECTION_PORT );
     cc6:	61 b3       	in	r22, 0x11	; 17
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cd2:	8e e2       	ldi	r24, 0x2E	; 46
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

			ch = PORTD;
     cda:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     cdc:	84 e2       	ldi	r24, 0x24	; 36
     cde:	93 e0       	ldi	r25, 0x03	; 3
     ce0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
		  	printBinary( ch );
     ce4:	ff 24       	eor	r15, r15
     ce6:	00 e0       	ldi	r16, 0x00	; 0
     ce8:	10 e0       	ldi	r17, 0x00	; 0
     cea:	c8 01       	movw	r24, r16
     cec:	b7 01       	movw	r22, r14
     cee:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cf2:	81 e2       	ldi	r24, 0x21	; 33
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

			ch = PIND;
     cfa:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     cfc:	82 e1       	ldi	r24, 0x12	; 18
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
		  	printBinary( ch );
     d04:	ff 24       	eor	r15, r15
     d06:	00 e0       	ldi	r16, 0x00	; 0
     d08:	10 e0       	ldi	r17, 0x00	; 0
     d0a:	c8 01       	movw	r24, r16
     d0c:	b7 01       	movw	r22, r14
     d0e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d12:	8f e0       	ldi	r24, 0x0F	; 15
     d14:	93 e0       	ldi	r25, 0x03	; 3
     d16:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
#endif

#ifdef SIMULATE

	      	printPgmString(PSTR("CAUTION:Simulate mode is on\n"));
     d1a:	82 ef       	ldi	r24, 0xF2	; 242
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

#endif

	      	printPgmString(PSTR("to_millimeters(100) = "));
     d22:	8b ed       	ldi	r24, 0xDB	; 219
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     d2a:	80 91 0d 02 	lds	r24, 0x020D
     d2e:	88 23       	and	r24, r24
     d30:	09 f0       	breq	.+2      	; 0xd34 <gc_execute_line+0x224>
     d32:	ac c0       	rjmp	.+344    	; 0xe8c <gc_execute_line+0x37c>
     d34:	64 e6       	ldi	r22, 0x64	; 100
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
	      	printPgmString(PSTR("CAUTION:Simulate mode is on\n"));

#endif

	      	printPgmString(PSTR("to_millimeters(100) = "));
			printInteger( to_millimeters(100) );
     d3c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d40:	88 ed       	ldi	r24, 0xD8	; 216
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

	      	printPgmString(PSTR("avr_millis() = "));
     d48:	88 ec       	ldi	r24, 0xC8	; 200
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
			printInteger( avr_millis() );
     d50:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
     d54:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d58:	85 ec       	ldi	r24, 0xC5	; 197
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>


	      	printPgmString(PSTR("head down = "));
     d60:	88 eb       	ldi	r24, 0xB8	; 184
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
			printInteger( is_head_down() );
     d68:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	a0 e0       	ldi	r26, 0x00	; 0
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d7a:	85 eb       	ldi	r24, 0xB5	; 181
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     d82:	86 ea       	ldi	r24, 0xA6	; 166
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
			printInteger( head_moving() );
     d8a:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a0 e0       	ldi	r26, 0x00	; 0
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d9c:	83 ea       	ldi	r24, 0xA3	; 163
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     da4:	83 e9       	ldi	r24, 0x93	; 147
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
			printInteger( vacuum_state() );
     dac:	0e 94 86 21 	call	0x430c	; 0x430c <vacuum_state>
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dbe:	80 e9       	ldi	r24, 0x90	; 144
     dc0:	92 e0       	ldi	r25, 0x02	; 2
     dc2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     dc6:	85 e8       	ldi	r24, 0x85	; 133
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
			printInteger( is_rotated() );
     dce:	0e 94 60 20 	call	0x40c0	; 0x40c0 <is_rotated>
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
	      	printPgmString(PSTR("\r\n"));
     de0:	82 e8       	ldi	r24, 0x82	; 130
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
     de8:	86 e7       	ldi	r24, 0x76	; 118
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
			printInteger( get_busy() );
     df0:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <get_busy>
     df4:	aa 27       	eor	r26, r26
     df6:	97 fd       	sbrc	r25, 7
     df8:	a0 95       	com	r26
     dfa:	ba 2f       	mov	r27, r26
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
	      	printPgmString(PSTR("\r\n"));
     e04:	83 e7       	ldi	r24, 0x73	; 115
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>


			if( xLimit1() )
     e0c:	0e 94 1f 1a 	call	0x343e	; 0x343e <xLimit1>
     e10:	88 23       	and	r24, r24
     e12:	09 f0       	breq	.+2      	; 0xe16 <gc_execute_line+0x306>
     e14:	40 c0       	rjmp	.+128    	; 0xe96 <gc_execute_line+0x386>
		      	printPgmString(PSTR("XL1\r\n"));

			if( xLimit2() ){
     e16:	0e 94 da 19 	call	0x33b4	; 0x33b4 <xLimit2>
     e1a:	88 23       	and	r24, r24
     e1c:	09 f0       	breq	.+2      	; 0xe20 <gc_execute_line+0x310>
     e1e:	4f c0       	rjmp	.+158    	; 0xebe <gc_execute_line+0x3ae>
		      	printPgmString(PSTR("XL2\r\n"));
			}

			if( yLimit1())
     e20:	0e 94 9e 19 	call	0x333c	; 0x333c <yLimit1>
     e24:	88 23       	and	r24, r24
     e26:	09 f0       	breq	.+2      	; 0xe2a <gc_execute_line+0x31a>
     e28:	45 c0       	rjmp	.+138    	; 0xeb4 <gc_execute_line+0x3a4>
		      	printPgmString(PSTR("YL1\r\n"));
			
			if( yLimit2() )
     e2a:	0e 94 59 19 	call	0x32b2	; 0x32b2 <yLimit2>
     e2e:	88 23       	and	r24, r24
     e30:	e1 f5       	brne	.+120    	; 0xeaa <gc_execute_line+0x39a>
		      	printPgmString(PSTR("YL2\r\n"));

			if( xHome() )
     e32:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <xHome>
     e36:	88 23       	and	r24, r24
     e38:	99 f5       	brne	.+102    	; 0xea0 <gc_execute_line+0x390>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( yHome() )
     e3a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <yHome>
     e3e:	88 23       	and	r24, r24
     e40:	21 f0       	breq	.+8      	; 0xe4a <gc_execute_line+0x33a>
		      	printPgmString(PSTR("Y_HOME\r\n"));
     e42:	89 e4       	ldi	r24, 0x49	; 73
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     e4a:	80 91 0a 02 	lds	r24, 0x020A
     e4e:	d7 ce       	rjmp	.-594    	; 0xbfe <gc_execute_line+0xee>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e50:	e6 2f       	mov	r30, r22
     e52:	f7 2f       	mov	r31, r23
     e54:	ed 33       	cpi	r30, 0x3D	; 61
     e56:	f1 05       	cpc	r31, r1
     e58:	88 f0       	brcs	.+34     	; 0xe7c <gc_execute_line+0x36c>
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;


        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	80 93 0a 02 	sts	0x020A, r24
     e60:	f4 cf       	rjmp	.-24     	; 0xe4a <gc_execute_line+0x33a>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     e62:	e6 2f       	mov	r30, r22
     e64:	f7 2f       	mov	r31, r23
     e66:	ef 35       	cpi	r30, 0x5F	; 95
     e68:	f1 05       	cpc	r31, r1
     e6a:	b8 f7       	brcc	.-18     	; 0xe5a <gc_execute_line+0x34a>
     e6c:	ee 58       	subi	r30, 0x8E	; 142
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	05 90       	lpm	r0, Z+
     e76:	f4 91       	lpm	r31, Z+
     e78:	e0 2d       	mov	r30, r0
     e7a:	19 94       	eijmp
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e7c:	ef 52       	subi	r30, 0x2F	; 47
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	05 90       	lpm	r0, Z+
     e86:	f4 91       	lpm	r31, Z+
     e88:	e0 2d       	mov	r30, r0
     e8a:	19 94       	eijmp
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     e8c:	6c ee       	ldi	r22, 0xEC	; 236
     e8e:	79 e0       	ldi	r23, 0x09	; 9
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	53 cf       	rjmp	.-346    	; 0xd3c <gc_execute_line+0x22c>
			printInteger( get_busy() );
	      	printPgmString(PSTR("\r\n"));


			if( xLimit1() )
		      	printPgmString(PSTR("XL1\r\n"));
     e96:	8d e6       	ldi	r24, 0x6D	; 109
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
     e9e:	bb cf       	rjmp	.-138    	; 0xe16 <gc_execute_line+0x306>
			
			if( yLimit2() )
		      	printPgmString(PSTR("YL2\r\n"));

			if( xHome() )
		      	printPgmString(PSTR("X_HOME\r\n"));
     ea0:	82 e5       	ldi	r24, 0x52	; 82
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
     ea8:	c8 cf       	rjmp	.-112    	; 0xe3a <gc_execute_line+0x32a>

			if( yLimit1())
		      	printPgmString(PSTR("YL1\r\n"));
			
			if( yLimit2() )
		      	printPgmString(PSTR("YL2\r\n"));
     eaa:	8b e5       	ldi	r24, 0x5B	; 91
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
     eb2:	bf cf       	rjmp	.-130    	; 0xe32 <gc_execute_line+0x322>
			if( xLimit2() ){
		      	printPgmString(PSTR("XL2\r\n"));
			}

			if( yLimit1())
		      	printPgmString(PSTR("YL1\r\n"));
     eb4:	81 e6       	ldi	r24, 0x61	; 97
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
     ebc:	b6 cf       	rjmp	.-148    	; 0xe2a <gc_execute_line+0x31a>

			if( xLimit1() )
		      	printPgmString(PSTR("XL1\r\n"));

			if( xLimit2() ){
		      	printPgmString(PSTR("XL2\r\n"));
     ebe:	87 e6       	ldi	r24, 0x67	; 103
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
     ec6:	ac cf       	rjmp	.-168    	; 0xe20 <gc_execute_line+0x310>
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    read_double(line, &char_counter, &value);
     ec8:	c5 01       	movw	r24, r10
     eca:	b8 01       	movw	r22, r16
     ecc:	ae 01       	movw	r20, r28
     ece:	4c 5f       	subi	r20, 0xFC	; 252
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     ed6:	ea 81       	ldd	r30, Y+2	; 0x02
     ed8:	fb 81       	ldd	r31, Y+3	; 0x03
     eda:	ea 0d       	add	r30, r10
     edc:	fb 1d       	adc	r31, r11
     ede:	80 81       	ld	r24, Z
     ee0:	88 23       	and	r24, r24
     ee2:	09 f0       	breq	.+2      	; 0xee6 <gc_execute_line+0x3d6>
     ee4:	c4 ce       	rjmp	.-632    	; 0xc6e <gc_execute_line+0x15e>
    settings_store_setting(p, value);
     ee6:	68 85       	ldd	r22, Y+8	; 0x08
     ee8:	79 85       	ldd	r23, Y+9	; 0x09
     eea:	8a 85       	ldd	r24, Y+10	; 0x0a
     eec:	9b 85       	ldd	r25, Y+11	; 0x0b
     eee:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	4c 81       	ldd	r20, Y+4	; 0x04
     ef8:	5d 81       	ldd	r21, Y+5	; 0x05
     efa:	6e 81       	ldd	r22, Y+6	; 0x06
     efc:	7f 81       	ldd	r23, Y+7	; 0x07
     efe:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <settings_store_setting>
    return(gc.status_code);
     f02:	80 91 0a 02 	lds	r24, 0x020A
     f06:	7b ce       	rjmp	.-778    	; 0xbfe <gc_execute_line+0xee>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
     f08:	0e 94 ca 23 	call	0x4794	; 0x4794 <putdown_part>
     f0c:	80 93 0a 02 	sts	0x020A, r24
     f10:	e1 e0       	ldi	r30, 0x01	; 1
     f12:	e8 ab       	std	Y+48, r30	; 0x30
     f14:	70 ce       	rjmp	.-800    	; 0xbf6 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f16:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f1a:	a1 e0       	ldi	r26, 0x01	; 1
     f1c:	a0 93 30 02 	sts	0x0230, r26
  gc.plane_axis_2 = axis_2;
     f20:	b2 e0       	ldi	r27, 0x02	; 2
     f22:	b0 93 31 02 	sts	0x0231, r27
     f26:	67 ce       	rjmp	.-818    	; 0xbf6 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	90 93 0b 02 	sts	0x020B, r25
     f2e:	63 ce       	rjmp	.-826    	; 0xbf6 <gc_execute_line+0xe6>
      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	80 93 0b 02 	sts	0x020B, r24
     f36:	5f ce       	rjmp	.-834    	; 0xbf6 <gc_execute_line+0xe6>
	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     f38:	f1 e0       	ldi	r31, 0x01	; 1
     f3a:	f0 93 0b 02 	sts	0x020B, r31
     f3e:	5b ce       	rjmp	.-842    	; 0xbf6 <gc_execute_line+0xe6>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     f40:	10 92 0b 02 	sts	0x020B, r1
     f44:	58 ce       	rjmp	.-848    	; 0xbf6 <gc_execute_line+0xe6>
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	f0 93 0e 02 	sts	0x020E, r31
     f4c:	54 ce       	rjmp	.-856    	; 0xbf6 <gc_execute_line+0xe6>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     f4e:	e4 e0       	ldi	r30, 0x04	; 4
     f50:	e0 93 0b 02 	sts	0x020B, r30
     f54:	50 ce       	rjmp	.-864    	; 0xbf6 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f56:	b1 e0       	ldi	r27, 0x01	; 1
     f58:	b9 ab       	std	Y+49, r27	; 0x31
     f5a:	4d ce       	rjmp	.-870    	; 0xbf6 <gc_execute_line+0xe6>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     f5c:	b2 e0       	ldi	r27, 0x02	; 2
     f5e:	b8 ab       	std	Y+48, r27	; 0x30
     f60:	4a ce       	rjmp	.-876    	; 0xbf6 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f62:	10 92 0d 02 	sts	0x020D, r1
     f66:	47 ce       	rjmp	.-882    	; 0xbf6 <gc_execute_line+0xe6>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     f68:	a1 e0       	ldi	r26, 0x01	; 1
     f6a:	a0 93 0d 02 	sts	0x020D, r26
     f6e:	43 ce       	rjmp	.-890    	; 0xbf6 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 2f 02 	sts	0x022F, r24
  gc.plane_axis_1 = axis_1;
     f76:	92 e0       	ldi	r25, 0x02	; 2
     f78:	90 93 30 02 	sts	0x0230, r25
  gc.plane_axis_2 = axis_2;
     f7c:	10 92 31 02 	sts	0x0231, r1
     f80:	3a ce       	rjmp	.-908    	; 0xbf6 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f82:	10 92 2f 02 	sts	0x022F, r1
  gc.plane_axis_1 = axis_1;
     f86:	e2 e0       	ldi	r30, 0x02	; 2
     f88:	e0 93 30 02 	sts	0x0230, r30
  gc.plane_axis_2 = axis_2;
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	f0 93 31 02 	sts	0x0231, r31
     f92:	31 ce       	rjmp	.-926    	; 0xbf6 <gc_execute_line+0xe6>
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     f94:	10 92 0c 02 	sts	0x020C, r1
     f98:	2e ce       	rjmp	.-932    	; 0xbf6 <gc_execute_line+0xe6>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	90 93 0c 02 	sts	0x020C, r25
     fa0:	2a ce       	rjmp	.-940    	; 0xbf6 <gc_execute_line+0xe6>
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	88 ab       	std	Y+48, r24	; 0x30
     fa6:	27 ce       	rjmp	.-946    	; 0xbf6 <gc_execute_line+0xe6>
     fa8:	10 92 0e 02 	sts	0x020E, r1
     fac:	24 ce       	rjmp	.-952    	; 0xbf6 <gc_execute_line+0xe6>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     fae:	ef ef       	ldi	r30, 0xFF	; 255
     fb0:	ff ef       	ldi	r31, 0xFF	; 255
     fb2:	f0 93 11 02 	sts	0x0211, r31
     fb6:	e0 93 10 02 	sts	0x0210, r30
     fba:	1d ce       	rjmp	.-966    	; 0xbf6 <gc_execute_line+0xe6>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	90 93 11 02 	sts	0x0211, r25
     fc4:	80 93 10 02 	sts	0x0210, r24
     fc8:	16 ce       	rjmp	.-980    	; 0xbf6 <gc_execute_line+0xe6>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     fca:	b2 e0       	ldi	r27, 0x02	; 2
     fcc:	b0 93 0f 02 	sts	0x020F, r27
     fd0:	12 ce       	rjmp	.-988    	; 0xbf6 <gc_execute_line+0xe6>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     fd2:	a1 e0       	ldi	r26, 0x01	; 1
     fd4:	a0 93 0f 02 	sts	0x020F, r26
     fd8:	0e ce       	rjmp	.-996    	; 0xbf6 <gc_execute_line+0xe6>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>
     fe2:	b1 e0       	ldi	r27, 0x01	; 1
     fe4:	b8 ab       	std	Y+48, r27	; 0x30
     fe6:	07 ce       	rjmp	.-1010   	; 0xbf6 <gc_execute_line+0xe6>
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>
     ff0:	a1 e0       	ldi	r26, 0x01	; 1
     ff2:	a8 ab       	std	Y+48, r26	; 0x30
     ff4:	00 ce       	rjmp	.-1024   	; 0xbf6 <gc_execute_line+0xe6>
		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	98 ab       	std	Y+48, r25	; 0x30
    1002:	f9 cd       	rjmp	.-1038   	; 0xbf6 <gc_execute_line+0xe6>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	88 ab       	std	Y+48, r24	; 0x30
    1010:	f2 cd       	rjmp	.-1052   	; 0xbf6 <gc_execute_line+0xe6>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	f8 ab       	std	Y+48, r31	; 0x30
    101e:	eb cd       	rjmp	.-1066   	; 0xbf6 <gc_execute_line+0xe6>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
    1020:	10 92 13 02 	sts	0x0213, r1
    1024:	10 92 12 02 	sts	0x0212, r1
    1028:	e6 cd       	rjmp	.-1076   	; 0xbf6 <gc_execute_line+0xe6>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	90 93 13 02 	sts	0x0213, r25
    1032:	80 93 12 02 	sts	0x0212, r24
    1036:	df cd       	rjmp	.-1090   	; 0xbf6 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
    1038:	10 92 11 02 	sts	0x0211, r1
    103c:	10 92 10 02 	sts	0x0210, r1
    1040:	da cd       	rjmp	.-1100   	; 0xbf6 <gc_execute_line+0xe6>
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
    1042:	0e 94 8b 23 	call	0x4716	; 0x4716 <vacuum_test>
    1046:	f1 e0       	ldi	r31, 0x01	; 1
    1048:	f8 ab       	std	Y+48, r31	; 0x30
    104a:	d5 cd       	rjmp	.-1110   	; 0xbf6 <gc_execute_line+0xe6>
		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
    104c:	0e 94 9d 23 	call	0x473a	; 0x473a <tape_knock>
    1050:	e1 e0       	ldi	r30, 0x01	; 1
    1052:	e8 ab       	std	Y+48, r30	; 0x30
    1054:	d0 cd       	rjmp	.-1120   	; 0xbf6 <gc_execute_line+0xe6>
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
    105e:	b1 e0       	ldi	r27, 0x01	; 1
    1060:	b8 ab       	std	Y+48, r27	; 0x30
    1062:	c9 cd       	rjmp	.-1134   	; 0xbf6 <gc_execute_line+0xe6>
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
    106c:	a1 e0       	ldi	r26, 0x01	; 1
    106e:	a8 ab       	std	Y+48, r26	; 0x30
    1070:	c2 cd       	rjmp	.-1148   	; 0xbf6 <gc_execute_line+0xe6>
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
		case 18: atc_change(6);next_action = NEXT_ACTION_DWELL ;break;
    1072:	86 e0       	ldi	r24, 0x06	; 6
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	98 ab       	std	Y+48, r25	; 0x30
    107e:	bb cd       	rjmp	.-1162   	; 0xbf6 <gc_execute_line+0xe6>
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
		case 17: atc_change(5);next_action = NEXT_ACTION_DWELL ;break;
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	88 ab       	std	Y+48, r24	; 0x30
    108c:	b4 cd       	rjmp	.-1176   	; 0xbf6 <gc_execute_line+0xe6>
		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
		case 16: atc_change(4);next_action = NEXT_ACTION_DWELL ;break;
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>
    1096:	f1 e0       	ldi	r31, 0x01	; 1
    1098:	f8 ab       	std	Y+48, r31	; 0x30
    109a:	ad cd       	rjmp	.-1190   	; 0xbf6 <gc_execute_line+0xe6>

		// atc
		case 12: atc_change(0);next_action = NEXT_ACTION_DWELL ;break;
		case 13: atc_change(1);next_action = NEXT_ACTION_DWELL ;break;
		case 14: atc_change(2);next_action = NEXT_ACTION_DWELL ;break;
		case 15: atc_change(3);next_action = NEXT_ACTION_DWELL ;break;
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>
    10a4:	e1 e0       	ldi	r30, 0x01	; 1
    10a6:	e8 ab       	std	Y+48, r30	; 0x30
    10a8:	a6 cd       	rjmp	.-1204   	; 0xbf6 <gc_execute_line+0xe6>
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
#ifdef VERBOSE_DEBUG
		case 28:  gc.status_code = test_mode() ;next_action = NEXT_ACTION_DWELL ; break;
#endif
		case 29:  gc.status_code = GCSTATUS_NO_ACK ;serialWrite( get_limit_bits() );next_action = NEXT_ACTION_DWELL ; break;
    10aa:	f6 e0       	ldi	r31, 0x06	; 6
    10ac:	f0 93 0a 02 	sts	0x020A, r31
    10b0:	0e 94 2b 19 	call	0x3256	; 0x3256 <get_limit_bits>
    10b4:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <serialWrite>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	88 ab       	std	Y+48, r24	; 0x30
    10bc:	9c cd       	rjmp	.-1224   	; 0xbf6 <gc_execute_line+0xe6>

		case 31:	settings_reset();next_action = NEXT_ACTION_DWELL ;break;
    10be:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <settings_reset>
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	98 ab       	std	Y+48, r25	; 0x30
    10c6:	97 cd       	rjmp	.-1234   	; 0xbf6 <gc_execute_line+0xe6>
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
    10c8:	0e 94 0b 24 	call	0x4816	; 0x4816 <pickup_part>
    10cc:	80 93 0a 02 	sts	0x020A, r24
    10d0:	b1 e0       	ldi	r27, 0x01	; 1
    10d2:	b8 ab       	std	Y+48, r27	; 0x30
    10d4:	90 cd       	rjmp	.-1248   	; 0xbf6 <gc_execute_line+0xe6>
		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
    10d6:	0e 94 8b 23 	call	0x4716	; 0x4716 <vacuum_test>
    10da:	a1 e0       	ldi	r26, 0x01	; 1
    10dc:	a8 ab       	std	Y+48, r26	; 0x30
    10de:	8b cd       	rjmp	.-1258   	; 0xbf6 <gc_execute_line+0xe6>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
    10e0:	0e 94 c6 21 	call	0x438c	; 0x438c <goto_vacpad>
    10e4:	80 93 0a 02 	sts	0x020A, r24
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	98 ab       	std	Y+48, r25	; 0x30
    10ec:	84 cd       	rjmp	.-1272   	; 0xbf6 <gc_execute_line+0xe6>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
    10ee:	0e 94 25 20 	call	0x404a	; 0x404a <check_for_tool>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	88 ab       	std	Y+48, r24	; 0x30
    10f6:	7f cd       	rjmp	.-1282   	; 0xbf6 <gc_execute_line+0xe6>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    10f8:	80 91 0a 02 	lds	r24, 0x020A
    10fc:	88 23       	and	r24, r24
    10fe:	09 f0       	breq	.+2      	; 0x1102 <gc_execute_line+0x5f2>
    1100:	7e cd       	rjmp	.-1284   	; 0xbfe <gc_execute_line+0xee>

  char_counter = 0;
    1102:	1b 82       	std	Y+3, r1	; 0x03
    1104:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
    1106:	80 e1       	ldi	r24, 0x10	; 16
    1108:	d6 01       	movw	r26, r12
    110a:	1d 92       	st	X+, r1
    110c:	8a 95       	dec	r24
    110e:	e9 f7       	brne	.-6      	; 0x110a <gc_execute_line+0x5fa>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
    1110:	d1 01       	movw	r26, r2
    1112:	ec e1       	ldi	r30, 0x1C	; 28
    1114:	f2 e0       	ldi	r31, 0x02	; 2
    1116:	80 e1       	ldi	r24, 0x10	; 16
    1118:	01 90       	ld	r0, Z+
    111a:	0d 92       	st	X+, r0
    111c:	81 50       	subi	r24, 0x01	; 1
    111e:	e1 f7       	brne	.-8      	; 0x1118 <gc_execute_line+0x608>
    1120:	1c aa       	std	Y+52, r1	; 0x34
    1122:	1d aa       	std	Y+53, r1	; 0x35
    1124:	b0 e8       	ldi	r27, 0x80	; 128
    1126:	be ab       	std	Y+54, r27	; 0x36
    1128:	ef eb       	ldi	r30, 0xBF	; 191
    112a:	ef ab       	std	Y+55, r30	; 0x37
    112c:	1b aa       	std	Y+51, r1	; 0x33
    112e:	1a aa       	std	Y+50, r1	; 0x32

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    1130:	c4 01       	movw	r24, r8
    1132:	b2 01       	movw	r22, r4
    1134:	a5 01       	movw	r20, r10
    1136:	93 01       	movw	r18, r6
    1138:	0e 94 16 05 	call	0xa2c	; 0xa2c <next_statement>
    113c:	89 2b       	or	r24, r25
    113e:	09 f4       	brne	.+2      	; 0x1142 <gc_execute_line+0x632>
    1140:	ed c0       	rjmp	.+474    	; 0x131c <gc_execute_line+0x80c>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    1142:	cc 80       	ldd	r12, Y+4	; 0x04
    1144:	dd 80       	ldd	r13, Y+5	; 0x05
    1146:	ee 80       	ldd	r14, Y+6	; 0x06
    1148:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    114a:	80 91 0d 02 	lds	r24, 0x020D
    114e:	88 23       	and	r24, r24
    1150:	d9 f4       	brne	.+54     	; 0x1188 <gc_execute_line+0x678>
    1152:	a7 01       	movw	r20, r14
    1154:	96 01       	movw	r18, r12

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1156:	09 81       	ldd	r16, Y+1	; 0x01
    1158:	0d 34       	cpi	r16, 0x4D	; 77
    115a:	19 f1       	breq	.+70     	; 0x11a2 <gc_execute_line+0x692>
    115c:	0e 34       	cpi	r16, 0x4E	; 78
    115e:	60 f5       	brcc	.+88     	; 0x11b8 <gc_execute_line+0x6a8>
    1160:	08 34       	cpi	r16, 0x48	; 72
    1162:	09 f4       	brne	.+2      	; 0x1166 <gc_execute_line+0x656>
    1164:	7a c0       	rjmp	.+244    	; 0x125a <gc_execute_line+0x74a>
    1166:	09 34       	cpi	r16, 0x49	; 73
    1168:	b8 f5       	brcc	.+110    	; 0x11d8 <gc_execute_line+0x6c8>
    116a:	03 34       	cpi	r16, 0x43	; 67
    116c:	09 f4       	brne	.+2      	; 0x1170 <gc_execute_line+0x660>
    116e:	8a c0       	rjmp	.+276    	; 0x1284 <gc_execute_line+0x774>
    1170:	06 34       	cpi	r16, 0x46	; 70
    1172:	f1 f6       	brne	.-68     	; 0x1130 <gc_execute_line+0x620>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    1174:	80 91 0c 02 	lds	r24, 0x020C
    1178:	88 23       	and	r24, r24
    117a:	09 f4       	brne	.+2      	; 0x117e <gc_execute_line+0x66e>
    117c:	a9 c0       	rjmp	.+338    	; 0x12d0 <gc_execute_line+0x7c0>
    117e:	2c ab       	std	Y+52, r18	; 0x34
    1180:	3d ab       	std	Y+53, r19	; 0x35
    1182:	4e ab       	std	Y+54, r20	; 0x36
    1184:	5f ab       	std	Y+55, r21	; 0x37
    1186:	d4 cf       	rjmp	.-88     	; 0x1130 <gc_execute_line+0x620>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    1188:	c7 01       	movw	r24, r14
    118a:	b6 01       	movw	r22, r12
    118c:	23 e3       	ldi	r18, 0x33	; 51
    118e:	33 e3       	ldi	r19, 0x33	; 51
    1190:	4b ec       	ldi	r20, 0xCB	; 203
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    119c:	09 81       	ldd	r16, Y+1	; 0x01
    119e:	0d 34       	cpi	r16, 0x4D	; 77
    11a0:	e9 f6       	brne	.-70     	; 0x115c <gc_execute_line+0x64c>
	feeder_x_pos = x;
}

void set_feeder_y( double y )
{
	feeder_x_pos = y;
    11a2:	20 93 06 02 	sts	0x0206, r18
    11a6:	30 93 07 02 	sts	0x0207, r19
    11aa:	40 93 08 02 	sts	0x0208, r20
    11ae:	50 93 09 02 	sts	0x0209, r21
    11b2:	a1 e0       	ldi	r26, 0x01	; 1
    11b4:	a8 ab       	std	Y+48, r26	; 0x30
    11b6:	bc cf       	rjmp	.-136    	; 0x1130 <gc_execute_line+0x620>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11b8:	03 35       	cpi	r16, 0x53	; 83
    11ba:	09 f4       	brne	.+2      	; 0x11be <gc_execute_line+0x6ae>
    11bc:	45 c0       	rjmp	.+138    	; 0x1248 <gc_execute_line+0x738>
    11be:	04 35       	cpi	r16, 0x54	; 84
    11c0:	e8 f4       	brcc	.+58     	; 0x11fc <gc_execute_line+0x6ec>
    11c2:	0e 34       	cpi	r16, 0x4E	; 78
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <gc_execute_line+0x6b8>
    11c6:	53 c0       	rjmp	.+166    	; 0x126e <gc_execute_line+0x75e>
    11c8:	00 35       	cpi	r16, 0x50	; 80
    11ca:	09 f0       	breq	.+2      	; 0x11ce <gc_execute_line+0x6be>
    11cc:	b1 cf       	rjmp	.-158    	; 0x1130 <gc_execute_line+0x620>
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
    11ce:	c8 86       	std	Y+8, r12	; 0x08
    11d0:	d9 86       	std	Y+9, r13	; 0x09
    11d2:	ea 86       	std	Y+10, r14	; 0x0a
    11d4:	fb 86       	std	Y+11, r15	; 0x0b
    11d6:	ac cf       	rjmp	.-168    	; 0x1130 <gc_execute_line+0x620>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11d8:	0c 34       	cpi	r16, 0x4C	; 76
    11da:	08 f0       	brcs	.+2      	; 0x11de <gc_execute_line+0x6ce>
    11dc:	a9 cf       	rjmp	.-174    	; 0x1130 <gc_execute_line+0x620>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    11de:	e0 2f       	mov	r30, r16
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	e9 54       	subi	r30, 0x49	; 73
    11e4:	f0 40       	sbci	r31, 0x00	; 0
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	e8 0d       	add	r30, r8
    11f0:	f9 1d       	adc	r31, r9
    11f2:	23 8f       	std	Z+27, r18	; 0x1b
    11f4:	34 8f       	std	Z+28, r19	; 0x1c
    11f6:	45 8f       	std	Z+29, r20	; 0x1d
    11f8:	56 8f       	std	Z+30, r21	; 0x1e
    11fa:	9a cf       	rjmp	.-204    	; 0x1130 <gc_execute_line+0x620>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    11fc:	80 2f       	mov	r24, r16
    11fe:	88 55       	subi	r24, 0x58	; 88
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	08 f0       	brcs	.+2      	; 0x1206 <gc_execute_line+0x6f6>
    1204:	95 cf       	rjmp	.-214    	; 0x1130 <gc_execute_line+0x620>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    1206:	80 91 0e 02 	lds	r24, 0x020E
    120a:	88 23       	and	r24, r24
    120c:	09 f0       	breq	.+2      	; 0x1210 <gc_execute_line+0x700>
    120e:	4c c0       	rjmp	.+152    	; 0x12a8 <gc_execute_line+0x798>
    1210:	f9 a9       	ldd	r31, Y+49	; 0x31
    1212:	ff 23       	and	r31, r31
    1214:	09 f0       	breq	.+2      	; 0x1218 <gc_execute_line+0x708>
    1216:	48 c0       	rjmp	.+144    	; 0x12a8 <gc_execute_line+0x798>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    1218:	10 e0       	ldi	r17, 0x00	; 0
    121a:	08 55       	subi	r16, 0x58	; 88
    121c:	10 40       	sbci	r17, 0x00	; 0
    121e:	00 0f       	add	r16, r16
    1220:	11 1f       	adc	r17, r17
    1222:	00 0f       	add	r16, r16
    1224:	11 1f       	adc	r17, r17
    1226:	08 0d       	add	r16, r8
    1228:	19 1d       	adc	r17, r9
    122a:	d8 01       	movw	r26, r16
    122c:	1b 96       	adiw	r26, 0x0b	; 11
    122e:	6d 91       	ld	r22, X+
    1230:	7d 91       	ld	r23, X+
    1232:	8d 91       	ld	r24, X+
    1234:	9c 91       	ld	r25, X
    1236:	1e 97       	sbiw	r26, 0x0e	; 14
    1238:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    123c:	f8 01       	movw	r30, r16
    123e:	63 87       	std	Z+11, r22	; 0x0b
    1240:	74 87       	std	Z+12, r23	; 0x0c
    1242:	85 87       	std	Z+13, r24	; 0x0d
    1244:	96 87       	std	Z+14, r25	; 0x0e
    1246:	74 cf       	rjmp	.-280    	; 0x1130 <gc_execute_line+0x620>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    1248:	c7 01       	movw	r24, r14
    124a:	b6 01       	movw	r22, r12
    124c:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
    1250:	70 93 2e 02 	sts	0x022E, r23
    1254:	60 93 2d 02 	sts	0x022D, r22
    1258:	6b cf       	rjmp	.-298    	; 0x1130 <gc_execute_line+0x620>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    125a:	ca 01       	movw	r24, r20
    125c:	b9 01       	movw	r22, r18
    125e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
    1262:	7b ab       	std	Y+51, r23	; 0x33
    1264:	6a ab       	std	Y+50, r22	; 0x32
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    1266:	89 e0       	ldi	r24, 0x09	; 9
    1268:	80 93 0b 02 	sts	0x020B, r24
    126c:	61 cf       	rjmp	.-318    	; 0x1130 <gc_execute_line+0x620>

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
    126e:	20 93 06 02 	sts	0x0206, r18
    1272:	30 93 07 02 	sts	0x0207, r19
    1276:	40 93 08 02 	sts	0x0208, r20
    127a:	50 93 09 02 	sts	0x0209, r21
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	98 ab       	std	Y+48, r25	; 0x30
    1282:	56 cf       	rjmp	.-340    	; 0x1130 <gc_execute_line+0x620>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    1284:	80 91 0e 02 	lds	r24, 0x020E
    1288:	88 23       	and	r24, r24
    128a:	e9 f4       	brne	.+58     	; 0x12c6 <gc_execute_line+0x7b6>
    128c:	f9 a9       	ldd	r31, Y+49	; 0x31
    128e:	ff 23       	and	r31, r31
    1290:	d1 f4       	brne	.+52     	; 0x12c6 <gc_execute_line+0x7b6>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
    1292:	68 8d       	ldd	r22, Y+24	; 0x18
    1294:	79 8d       	ldd	r23, Y+25	; 0x19
    1296:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1298:	9b 8d       	ldd	r25, Y+27	; 0x1b
    129a:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    129e:	68 8f       	std	Y+24, r22	; 0x18
    12a0:	79 8f       	std	Y+25, r23	; 0x19
    12a2:	8a 8f       	std	Y+26, r24	; 0x1a
    12a4:	9b 8f       	std	Y+27, r25	; 0x1b
    12a6:	44 cf       	rjmp	.-376    	; 0x1130 <gc_execute_line+0x620>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    12a8:	e0 2f       	mov	r30, r16
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	e8 55       	subi	r30, 0x58	; 88
    12ae:	f0 40       	sbci	r31, 0x00	; 0
    12b0:	ee 0f       	add	r30, r30
    12b2:	ff 1f       	adc	r31, r31
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	e8 0d       	add	r30, r8
    12ba:	f9 1d       	adc	r31, r9
    12bc:	23 87       	std	Z+11, r18	; 0x0b
    12be:	34 87       	std	Z+12, r19	; 0x0c
    12c0:	45 87       	std	Z+13, r20	; 0x0d
    12c2:	56 87       	std	Z+14, r21	; 0x0e
    12c4:	35 cf       	rjmp	.-406    	; 0x1130 <gc_execute_line+0x620>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
    12c6:	28 8f       	std	Y+24, r18	; 0x18
    12c8:	39 8f       	std	Y+25, r19	; 0x19
    12ca:	4a 8f       	std	Y+26, r20	; 0x1a
    12cc:	5b 8f       	std	Y+27, r21	; 0x1b
    12ce:	30 cf       	rjmp	.-416    	; 0x1130 <gc_execute_line+0x620>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    12d0:	80 91 0b 02 	lds	r24, 0x020B
    12d4:	88 23       	and	r24, r24
    12d6:	89 f4       	brne	.+34     	; 0x12fa <gc_execute_line+0x7ea>
          gc.seek_rate = unit_converted_value/60;
    12d8:	ca 01       	movw	r24, r20
    12da:	b9 01       	movw	r22, r18
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e7       	ldi	r20, 0x70	; 112
    12e2:	52 e4       	ldi	r21, 0x42	; 66
    12e4:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    12e8:	60 93 18 02 	sts	0x0218, r22
    12ec:	70 93 19 02 	sts	0x0219, r23
    12f0:	80 93 1a 02 	sts	0x021A, r24
    12f4:	90 93 1b 02 	sts	0x021B, r25
    12f8:	1b cf       	rjmp	.-458    	; 0x1130 <gc_execute_line+0x620>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters per second
    12fa:	ca 01       	movw	r24, r20
    12fc:	b9 01       	movw	r22, r18
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e7       	ldi	r20, 0x70	; 112
    1304:	52 e4       	ldi	r21, 0x42	; 66
    1306:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    130a:	60 93 14 02 	sts	0x0214, r22
    130e:	70 93 15 02 	sts	0x0215, r23
    1312:	80 93 16 02 	sts	0x0216, r24
    1316:	90 93 17 02 	sts	0x0217, r25
    131a:	0a cf       	rjmp	.-492    	; 0x1130 <gc_execute_line+0x620>

    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    131c:	80 91 0a 02 	lds	r24, 0x020A
    1320:	88 23       	and	r24, r24
    1322:	09 f0       	breq	.+2      	; 0x1326 <gc_execute_line+0x816>
    1324:	6c cc       	rjmp	.-1832   	; 0xbfe <gc_execute_line+0xee>
    
  // Update spindle state
  if (gc.spindle_direction) {
    1326:	80 91 10 02 	lds	r24, 0x0210
    132a:	90 91 11 02 	lds	r25, 0x0211
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	09 f4       	brne	.+2      	; 0x1334 <gc_execute_line+0x824>
    1332:	5d c0       	rjmp	.+186    	; 0x13ee <gc_execute_line+0x8de>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    1334:	40 91 2d 02 	lds	r20, 0x022D
    1338:	50 91 2e 02 	lds	r21, 0x022E
    133c:	66 27       	eor	r22, r22
    133e:	57 fd       	sbrc	r21, 7
    1340:	60 95       	com	r22
    1342:	76 2f       	mov	r23, r22
    1344:	0e 94 90 17 	call	0x2f20	; 0x2f20 <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    1348:	80 91 12 02 	lds	r24, 0x0212
    134c:	90 91 13 02 	lds	r25, 0x0213
    1350:	89 2b       	or	r24, r25
    1352:	09 f4       	brne	.+2      	; 0x1356 <gc_execute_line+0x846>
    1354:	4f c0       	rjmp	.+158    	; 0x13f4 <gc_execute_line+0x8e4>
  	coolant_flood(TRUE);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 3b 03 	call	0x676	; 0x676 <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    135e:	b8 a9       	ldd	r27, Y+48	; 0x30
    1360:	b1 30       	cpi	r27, 0x01	; 1
    1362:	09 f4       	brne	.+2      	; 0x1366 <gc_execute_line+0x856>
    1364:	63 c0       	rjmp	.+198    	; 0x142c <gc_execute_line+0x91c>
    1366:	b1 30       	cpi	r27, 0x01	; 1
    1368:	08 f0       	brcs	.+2      	; 0x136c <gc_execute_line+0x85c>
    136a:	49 c0       	rjmp	.+146    	; 0x13fe <gc_execute_line+0x8ee>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    136c:	80 91 0b 02 	lds	r24, 0x020B
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	09 f4       	brne	.+2      	; 0x1376 <gc_execute_line+0x866>
    1374:	7a c0       	rjmp	.+244    	; 0x146a <gc_execute_line+0x95a>
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	08 f0       	brcs	.+2      	; 0x137c <gc_execute_line+0x86c>
    137a:	6f c0       	rjmp	.+222    	; 0x145a <gc_execute_line+0x94a>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    137c:	00 d0       	rcall	.+0      	; 0x137e <gc_execute_line+0x86e>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <gc_execute_line+0x870>
    1380:	6c 85       	ldd	r22, Y+12	; 0x0c
    1382:	7d 85       	ldd	r23, Y+13	; 0x0d
    1384:	8e 85       	ldd	r24, Y+14	; 0x0e
    1386:	9f 85       	ldd	r25, Y+15	; 0x0f
    1388:	28 89       	ldd	r18, Y+16	; 0x10
    138a:	39 89       	ldd	r19, Y+17	; 0x11
    138c:	4a 89       	ldd	r20, Y+18	; 0x12
    138e:	5b 89       	ldd	r21, Y+19	; 0x13
    1390:	ec 88       	ldd	r14, Y+20	; 0x14
    1392:	fd 88       	ldd	r15, Y+21	; 0x15
    1394:	0e 89       	ldd	r16, Y+22	; 0x16
    1396:	1f 89       	ldd	r17, Y+23	; 0x17
    1398:	a8 8c       	ldd	r10, Y+24	; 0x18
    139a:	b9 8c       	ldd	r11, Y+25	; 0x19
    139c:	ca 8c       	ldd	r12, Y+26	; 0x1a
    139e:	db 8c       	ldd	r13, Y+27	; 0x1b
    13a0:	60 90 18 02 	lds	r6, 0x0218
    13a4:	70 90 19 02 	lds	r7, 0x0219
    13a8:	80 90 1a 02 	lds	r8, 0x021A
    13ac:	90 90 1b 02 	lds	r9, 0x021B
    13b0:	ad b7       	in	r26, 0x3d	; 61
    13b2:	be b7       	in	r27, 0x3e	; 62
    13b4:	11 96       	adiw	r26, 0x01	; 1
    13b6:	6d 92       	st	X+, r6
    13b8:	7d 92       	st	X+, r7
    13ba:	8d 92       	st	X+, r8
    13bc:	9c 92       	st	X, r9
    13be:	14 97       	sbiw	r26, 0x04	; 4
    13c0:	16 96       	adiw	r26, 0x06	; 6
    13c2:	1c 92       	st	X, r1
    13c4:	1e 92       	st	-X, r1
    13c6:	15 97       	sbiw	r26, 0x05	; 5
    13c8:	0e 94 a9 10 	call	0x2152	; 0x2152 <plan_buffer_line>
    13cc:	ed b7       	in	r30, 0x3d	; 61
    13ce:	fe b7       	in	r31, 0x3e	; 62
    13d0:	36 96       	adiw	r30, 0x06	; 6
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	fe bf       	out	0x3e, r31	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    13dc:	ac e1       	ldi	r26, 0x1C	; 28
    13de:	b2 e0       	ldi	r27, 0x02	; 2
    13e0:	f1 01       	movw	r30, r2
    13e2:	80 e1       	ldi	r24, 0x10	; 16
    13e4:	01 90       	ld	r0, Z+
    13e6:	0d 92       	st	X+, r0
    13e8:	81 50       	subi	r24, 0x01	; 1
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <gc_execute_line+0x8d4>
    13ec:	2e cd       	rjmp	.-1444   	; 0xe4a <gc_execute_line+0x33a>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    13ee:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <spindle_stop>
    13f2:	aa cf       	rjmp	.-172    	; 0x1348 <gc_execute_line+0x838>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 3b 03 	call	0x676	; 0x676 <coolant_flood>
    13fc:	b0 cf       	rjmp	.-160    	; 0x135e <gc_execute_line+0x84e>
  }
  
  // Perform any physical actions
  switch (next_action) {
    13fe:	b2 30       	cpi	r27, 0x02	; 2
    1400:	21 f1       	breq	.+72     	; 0x144a <gc_execute_line+0x93a>
    1402:	b3 30       	cpi	r27, 0x03	; 3
    1404:	59 f7       	brne	.-42     	; 0x13dc <gc_execute_line+0x8cc>
	  rotate_head( head);
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1406:	6c 85       	ldd	r22, Y+12	; 0x0c
    1408:	7d 85       	ldd	r23, Y+13	; 0x0d
    140a:	8e 85       	ldd	r24, Y+14	; 0x0e
    140c:	9f 85       	ldd	r25, Y+15	; 0x0f
    140e:	28 89       	ldd	r18, Y+16	; 0x10
    1410:	39 89       	ldd	r19, Y+17	; 0x11
    1412:	4a 89       	ldd	r20, Y+18	; 0x12
    1414:	5b 89       	ldd	r21, Y+19	; 0x13
    1416:	ec 88       	ldd	r14, Y+20	; 0x14
    1418:	fd 88       	ldd	r15, Y+21	; 0x15
    141a:	0e 89       	ldd	r16, Y+22	; 0x16
    141c:	1f 89       	ldd	r17, Y+23	; 0x17
    141e:	a8 8c       	ldd	r10, Y+24	; 0x18
    1420:	b9 8c       	ldd	r11, Y+25	; 0x19
    1422:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1424:	db 8c       	ldd	r13, Y+27	; 0x1b
    1426:	0e 94 b5 0c 	call	0x196a	; 0x196a <plan_set_current>
    142a:	d8 cf       	rjmp	.-80     	; 0x13dc <gc_execute_line+0x8cc>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    142c:	68 85       	ldd	r22, Y+8	; 0x08
    142e:	79 85       	ldd	r23, Y+9	; 0x09
    1430:	8a 85       	ldd	r24, Y+10	; 0x0a
    1432:	9b 85       	ldd	r25, Y+11	; 0x0b
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a e7       	ldi	r20, 0x7A	; 122
    143a:	54 e4       	ldi	r21, 0x44	; 68
    143c:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1440:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
    1444:	0e 94 38 0b 	call	0x1670	; 0x1670 <mc_dwell>
    1448:	c9 cf       	rjmp	.-110    	; 0x13dc <gc_execute_line+0x8cc>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    144a:	0e 94 35 0b 	call	0x166a	; 0x166a <mc_go_home>
    144e:	80 e1       	ldi	r24, 0x10	; 16
    1450:	f1 01       	movw	r30, r2
    1452:	11 92       	st	Z+, r1
    1454:	8a 95       	dec	r24
    1456:	e9 f7       	brne	.-6      	; 0x1452 <gc_execute_line+0x942>
    1458:	c1 cf       	rjmp	.-126    	; 0x13dc <gc_execute_line+0x8cc>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    145a:	89 30       	cpi	r24, 0x09	; 9
    145c:	09 f0       	breq	.+2      	; 0x1460 <gc_execute_line+0x950>
    145e:	be cf       	rjmp	.-132    	; 0x13dc <gc_execute_line+0x8cc>
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    1460:	8a a9       	ldd	r24, Y+50	; 0x32
    1462:	9b a9       	ldd	r25, Y+51	; 0x33
    1464:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <rotate_head>
    1468:	b9 cf       	rjmp	.-142    	; 0x13dc <gc_execute_line+0x8cc>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    146a:	8c 85       	ldd	r24, Y+12	; 0x0c
    146c:	9d 85       	ldd	r25, Y+13	; 0x0d
    146e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1470:	bf 85       	ldd	r27, Y+15	; 0x0f
    1472:	8c a7       	std	Y+44, r24	; 0x2c
    1474:	9d a7       	std	Y+45, r25	; 0x2d
    1476:	ae a7       	std	Y+46, r26	; 0x2e
    1478:	bf a7       	std	Y+47, r27	; 0x2f
    147a:	68 88       	ldd	r6, Y+16	; 0x10
    147c:	79 88       	ldd	r7, Y+17	; 0x11
    147e:	8a 88       	ldd	r8, Y+18	; 0x12
    1480:	9b 88       	ldd	r9, Y+19	; 0x13
    1482:	ec 88       	ldd	r14, Y+20	; 0x14
    1484:	fd 88       	ldd	r15, Y+21	; 0x15
    1486:	0e 89       	ldd	r16, Y+22	; 0x16
    1488:	1f 89       	ldd	r17, Y+23	; 0x17
    148a:	a8 8c       	ldd	r10, Y+24	; 0x18
    148c:	b9 8c       	ldd	r11, Y+25	; 0x19
    148e:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1490:	db 8c       	ldd	r13, Y+27	; 0x1b
    1492:	60 91 0c 02 	lds	r22, 0x020C
    1496:	66 23       	and	r22, r22
    1498:	61 f4       	brne	.+24     	; 0x14b2 <gc_execute_line+0x9a2>
    149a:	90 91 14 02 	lds	r25, 0x0214
    149e:	9c ab       	std	Y+52, r25	; 0x34
    14a0:	a0 91 15 02 	lds	r26, 0x0215
    14a4:	ad ab       	std	Y+53, r26	; 0x35
    14a6:	b0 91 16 02 	lds	r27, 0x0216
    14aa:	be ab       	std	Y+54, r27	; 0x36
    14ac:	e0 91 17 02 	lds	r30, 0x0217
    14b0:	ef ab       	std	Y+55, r30	; 0x37
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <gc_execute_line+0x9a4>
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <gc_execute_line+0x9a6>
    14b6:	4d b6       	in	r4, 0x3d	; 61
    14b8:	5e b6       	in	r5, 0x3e	; 62
    14ba:	08 94       	sec
    14bc:	41 1c       	adc	r4, r1
    14be:	51 1c       	adc	r5, r1
    14c0:	2c a9       	ldd	r18, Y+52	; 0x34
    14c2:	3d a9       	ldd	r19, Y+53	; 0x35
    14c4:	4e a9       	ldd	r20, Y+54	; 0x36
    14c6:	5f a9       	ldd	r21, Y+55	; 0x37
    14c8:	c9 01       	movw	r24, r18
    14ca:	da 01       	movw	r26, r20
    14cc:	ed b7       	in	r30, 0x3d	; 61
    14ce:	fe b7       	in	r31, 0x3e	; 62
    14d0:	81 83       	std	Z+1, r24	; 0x01
    14d2:	92 83       	std	Z+2, r25	; 0x02
    14d4:	a3 83       	std	Z+3, r26	; 0x03
    14d6:	b4 83       	std	Z+4, r27	; 0x04
    14d8:	d2 01       	movw	r26, r4
    14da:	14 96       	adiw	r26, 0x04	; 4
    14dc:	6c 93       	st	X, r22
    14de:	14 97       	sbiw	r26, 0x04	; 4
    14e0:	15 96       	adiw	r26, 0x05	; 5
    14e2:	1c 92       	st	X, r1
    14e4:	6c a5       	ldd	r22, Y+44	; 0x2c
    14e6:	7d a5       	ldd	r23, Y+45	; 0x2d
    14e8:	8e a5       	ldd	r24, Y+46	; 0x2e
    14ea:	9f a5       	ldd	r25, Y+47	; 0x2f
    14ec:	a4 01       	movw	r20, r8
    14ee:	93 01       	movw	r18, r6
    14f0:	0e 94 a9 10 	call	0x2152	; 0x2152 <plan_buffer_line>
    14f4:	ed b7       	in	r30, 0x3d	; 61
    14f6:	fe b7       	in	r31, 0x3e	; 62
    14f8:	36 96       	adiw	r30, 0x06	; 6
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	fe bf       	out	0x3e, r31	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	ed bf       	out	0x3d, r30	; 61
    1504:	6b cf       	rjmp	.-298    	; 0x13dc <gc_execute_line+0x8cc>

00001506 <theta>:


// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1506:	af 92       	push	r10
    1508:	bf 92       	push	r11
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	79 01       	movw	r14, r18
    1518:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    151a:	5f 77       	andi	r21, 0x7F	; 127
    151c:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    1520:	0e 94 05 2c 	call	0x580a	; 0x580a <atan>
    1524:	5b 01       	movw	r10, r22
    1526:	6c 01       	movw	r12, r24
  if (y>0) {
    1528:	c8 01       	movw	r24, r16
    152a:	b7 01       	movw	r22, r14
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__gesf2>
    1538:	18 16       	cp	r1, r24
    153a:	5c f4       	brge	.+22     	; 0x1552 <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
    153c:	b5 01       	movw	r22, r10
    153e:	c6 01       	movw	r24, r12
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	bf 90       	pop	r11
    154e:	af 90       	pop	r10
    1550:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
    1552:	c6 01       	movw	r24, r12
    1554:	b5 01       	movw	r22, r10
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__gesf2>
    1562:	18 16       	cp	r1, r24
    1564:	5c f4       	brge	.+22     	; 0x157c <theta+0x76>
    {
      return(M_PI-theta);
    1566:	6b ed       	ldi	r22, 0xDB	; 219
    1568:	7f e0       	ldi	r23, 0x0F	; 15
    156a:	89 e4       	ldi	r24, 0x49	; 73
    156c:	90 e4       	ldi	r25, 0x40	; 64
    156e:	a6 01       	movw	r20, r12
    1570:	95 01       	movw	r18, r10
    1572:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    1576:	5b 01       	movw	r10, r22
    1578:	6c 01       	movw	r12, r24
    157a:	e0 cf       	rjmp	.-64     	; 0x153c <theta+0x36>
    } else {
      return(-M_PI-theta);
    157c:	6b ed       	ldi	r22, 0xDB	; 219
    157e:	7f e0       	ldi	r23, 0x0F	; 15
    1580:	89 e4       	ldi	r24, 0x49	; 73
    1582:	90 ec       	ldi	r25, 0xC0	; 192
    1584:	a6 01       	movw	r20, r12
    1586:	95 01       	movw	r18, r10
    1588:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    158c:	5b 01       	movw	r10, r22
    158e:	6c 01       	movw	r12, r24
    1590:	d5 cf       	rjmp	.-86     	; 0x153c <theta+0x36>

00001592 <main>:
        }
}

int main(void)
{
	setup_timer();
    1592:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <setup_timer>

	sp_init();        
    1596:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <sp_init>

#ifdef VERBOSE_DEBUG
  serialWrite('1');
#endif
  settings_init();  
    159a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <settings_init>

#ifdef VERBOSE_DEBUG
  serialWrite('2');
#endif
  plan_init();      
    159e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <plan_init>

#ifdef VERBOSE_DEBUG
  serialWrite('3');
#endif
  st_init();       
    15a2:	0e 94 b4 18 	call	0x3168	; 0x3168 <st_init>

#ifdef VERBOSE_DEBUG
  serialWrite('4');
#endif
  // do limits init first because its dumb at the moment 
  limits_init();
    15a6:	0e 94 01 19 	call	0x3202	; 0x3202 <limits_init>

#ifdef VERBOSE_DEBUG
  serialWrite('5');
#endif
	usb_init();
    15aa:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <usb_init>

	usb_setEventHandler(pb_usbEventHandler);
    15ae:	82 e2       	ldi	r24, 0x22	; 34
    15b0:	9b e0       	ldi	r25, 0x0B	; 11
    15b2:	0e 94 43 24 	call	0x4886	; 0x4886 <usb_setEventHandler>

#ifdef VERBOSE_DEBUG
  serialWrite('6');
#endif

  spindle_init();   
    15b6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <spindle_init>
  coolant_init();
    15ba:	0e 94 39 03 	call	0x672	; 0x672 <coolant_init>
  atc_init();
    15be:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <atc_init>
  head_init();
    15c2:	0e 94 4e 20 	call	0x409c	; 0x409c <head_init>
  vacuum_init();
    15c6:	0e 94 57 21 	call	0x42ae	; 0x42ae <vacuum_init>
  panel_init();
    15ca:	0e 94 a3 20 	call	0x4146	; 0x4146 <panel_init>
  gc_init();
    15ce:	0e 94 4a 05 	call	0xa94	; 0xa94 <gc_init>
 
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n"));
    15d2:	8c e6       	ldi	r24, 0x6C	; 108
    15d4:	93 e0       	ldi	r25, 0x03	; 3
    15d6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    15da:	10 c0       	rjmp	.+32     	; 0x15fc <main+0x6a>
	if(ackHost){
		serialWrite(ackHost);
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    15dc:	85 34       	cpi	r24, 0x45	; 69
    15de:	41 f1       	breq	.+80     	; 0x1630 <main+0x9e>
    15e0:	88 34       	cpi	r24, 0x48	; 72
    15e2:	21 f4       	brne	.+8      	; 0x15ec <main+0x5a>
		// H = not homed
		case 'L':
				printPgmString( PSTR("lim\n"));
				break;
		case 'H':
				printPgmString( PSTR("nho\n"));
    15e4:	82 e6       	ldi	r24, 0x62	; 98
    15e6:	93 e0       	ldi	r25, 0x03	; 3
    15e8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
		case 'E':
			printPgmString( PSTR("err\n"));
			break;
	}

	ackHost = 0;
    15ec:	10 92 54 05 	sts	0x0554, r1

    sp_process(); // ... process the serial protocol
    15f0:	0e 94 dd 14 	call	0x29ba	; 0x29ba <sp_process>

	process_panel(); // check the panel
    15f4:	0e 94 24 21 	call	0x4248	; 0x4248 <process_panel>

	usb_poll();
    15f8:	0e 94 90 2a 	call	0x5520	; 0x5520 <usb_poll>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    15fc:	83 b7       	in	r24, 0x33	; 51
    15fe:	81 60       	ori	r24, 0x01	; 1
    1600:	83 bf       	out	0x33, r24	; 51
    1602:	88 95       	sleep
    1604:	83 b7       	in	r24, 0x33	; 51
    1606:	8e 7f       	andi	r24, 0xFE	; 254
    1608:	83 bf       	out	0x33, r24	; 51
	if(ackHost){
		serialWrite(ackHost);
	}
#endif
	// sends the move ACK back to the host ( sleep mode isn't working on the mega )
	switch( ackHost ) {
    160a:	80 91 54 05 	lds	r24, 0x0554
    160e:	8c 34       	cpi	r24, 0x4C	; 76
    1610:	a1 f0       	breq	.+40     	; 0x163a <main+0xa8>
    1612:	8d 34       	cpi	r24, 0x4D	; 77
    1614:	18 f3       	brcs	.-58     	; 0x15dc <main+0x4a>
    1616:	8f 34       	cpi	r24, 0x4F	; 79
    1618:	11 f0       	breq	.+4      	; 0x161e <main+0x8c>
    161a:	88 35       	cpi	r24, 0x58	; 88
    161c:	39 f7       	brne	.-50     	; 0x15ec <main+0x5a>
		case 'H':
				printPgmString( PSTR("nho\n"));
			break;
		case 'O':
		case 'X':
			if( head_moving() == 0 ) 
    161e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    1622:	88 23       	and	r24, r24
    1624:	19 f7       	brne	.-58     	; 0x15ec <main+0x5a>
				printPgmString( PSTR("ok\n"));
    1626:	8e e5       	ldi	r24, 0x5E	; 94
    1628:	93 e0       	ldi	r25, 0x03	; 3
    162a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    162e:	de cf       	rjmp	.-68     	; 0x15ec <main+0x5a>
			break;
		case 'E':
			printPgmString( PSTR("err\n"));
    1630:	89 e5       	ldi	r24, 0x59	; 89
    1632:	93 e0       	ldi	r25, 0x03	; 3
    1634:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    1638:	d9 cf       	rjmp	.-78     	; 0x15ec <main+0x5a>
	switch( ackHost ) {
		// X = move finished ok
		// L = hit a limit
		// H = not homed
		case 'L':
				printPgmString( PSTR("lim\n"));
    163a:	87 e6       	ldi	r24, 0x67	; 103
    163c:	93 e0       	ldi	r25, 0x03	; 3
    163e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    1642:	d4 cf       	rjmp	.-88     	; 0x15ec <main+0x5a>

00001644 <pb_usbEventHandler>:
 */
static void pb_usbEventHandler(usb_device * device, usb_eventType event)
{
        //adb_usbConfiguration handle;

        switch (event)
    1644:	66 23       	and	r22, r22
    1646:	39 f4       	brne	.+14     	; 0x1656 <pb_usbEventHandler+0x12>
        {
        case USB_CONNECT:

				serialWrite('U');
    1648:	85 e5       	ldi	r24, 0x55	; 85
    164a:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <serialWrite>
				serialWrite('C');
    164e:	83 e4       	ldi	r24, 0x43	; 67
    1650:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <serialWrite>
    1654:	08 95       	ret
 */
static void pb_usbEventHandler(usb_device * device, usb_eventType event)
{
        //adb_usbConfiguration handle;

        switch (event)
    1656:	61 30       	cpi	r22, 0x01	; 1
    1658:	09 f0       	breq	.+2      	; 0x165c <pb_usbEventHandler+0x18>
    165a:	08 95       	ret

                break;

        case USB_DISCONNECT:

				serialWrite('U');
    165c:	85 e5       	ldi	r24, 0x55	; 85
    165e:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <serialWrite>
				serialWrite('D');
    1662:	84 e4       	ldi	r24, 0x44	; 68
    1664:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <serialWrite>
    1668:	08 95       	ret

0000166a <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    166a:	0e 94 3b 19 	call	0x3276	; 0x3276 <st_go_home>
}
    166e:	08 95       	ret

00001670 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	7b 01       	movw	r14, r22
    1682:	8c 01       	movw	r16, r24
  st_synchronize();
    1684:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <st_synchronize>
  _delay_ms(milliseconds);
    1688:	c8 01       	movw	r24, r16
    168a:	b7 01       	movw	r22, r14
    168c:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <__floatunsisf>
    1690:	5b 01       	movw	r10, r22
    1692:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a e7       	ldi	r20, 0x7A	; 122
    169a:	55 e4       	ldi	r21, 0x45	; 69
    169c:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    16a0:	7b 01       	movw	r14, r22
    16a2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	7c f1       	brlt	.+94     	; 0x1712 <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    16b4:	c8 01       	movw	r24, r16
    16b6:	b7 01       	movw	r22, r14
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	3f ef       	ldi	r19, 0xFF	; 255
    16bc:	4f e7       	ldi	r20, 0x7F	; 127
    16be:	57 e4       	ldi	r21, 0x47	; 71
    16c0:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__gesf2>
    16c4:	18 16       	cp	r1, r24
    16c6:	ac f4       	brge	.+42     	; 0x16f2 <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c8:	c6 01       	movw	r24, r12
    16ca:	b5 01       	movw	r22, r10
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    16d8:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
    16dc:	cb 01       	movw	r24, r22
		while(__ticks)
    16de:	67 2b       	or	r22, r23
    16e0:	79 f0       	breq	.+30     	; 0x1700 <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e2:	20 e9       	ldi	r18, 0x90	; 144
    16e4:	31 e0       	ldi	r19, 0x01	; 1
    16e6:	f9 01       	movw	r30, r18
    16e8:	31 97       	sbiw	r30, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	d9 f7       	brne	.-10     	; 0x16e6 <mc_dwell+0x76>
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	c8 01       	movw	r24, r16
    16f4:	b7 01       	movw	r22, r14
    16f6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
    16fa:	cb 01       	movw	r24, r22
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <mc_dwell+0x8c>
}
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	f1 cf       	rjmp	.-30     	; 0x16fa <mc_dwell+0x8a>

00001718 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    1718:	fc 01       	movw	r30, r24
    171a:	60 91 b7 06 	lds	r22, 0x06B7
    171e:	70 91 b8 06 	lds	r23, 0x06B8
    1722:	80 91 b9 06 	lds	r24, 0x06B9
    1726:	90 91 ba 06 	lds	r25, 0x06BA
    172a:	21 a5       	ldd	r18, Z+41	; 0x29
    172c:	32 a5       	ldd	r19, Z+42	; 0x2a
    172e:	43 a5       	ldd	r20, Z+43	; 0x2b
    1730:	54 a5       	ldd	r21, Z+44	; 0x2c
    1732:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    1736:	08 95       	ret

00001738 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    1738:	80 91 20 05 	lds	r24, 0x0520
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	08 95       	ret

00001740 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1740:	20 91 0c 05 	lds	r18, 0x050C
    1744:	30 91 0d 05 	lds	r19, 0x050D
    1748:	80 91 0e 05 	lds	r24, 0x050E
    174c:	90 91 0f 05 	lds	r25, 0x050F
    1750:	28 17       	cp	r18, r24
    1752:	39 07       	cpc	r19, r25
    1754:	69 f0       	breq	.+26     	; 0x1770 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    1756:	80 91 0e 05 	lds	r24, 0x050E
    175a:	90 91 0f 05 	lds	r25, 0x050F
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	6a e0       	ldi	r22, 0x0A	; 10
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
    1768:	90 93 0f 05 	sts	0x050F, r25
    176c:	80 93 0e 05 	sts	0x050E, r24
    1770:	08 95       	ret

00001772 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1772:	20 91 0c 05 	lds	r18, 0x050C
    1776:	30 91 0d 05 	lds	r19, 0x050D
    177a:	80 91 0e 05 	lds	r24, 0x050E
    177e:	90 91 0f 05 	lds	r25, 0x050F
    1782:	28 17       	cp	r18, r24
    1784:	39 07       	cpc	r19, r25
    1786:	d1 f0       	breq	.+52     	; 0x17bc <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    1788:	20 91 0e 05 	lds	r18, 0x050E
    178c:	30 91 0f 05 	lds	r19, 0x050F
    1790:	c9 01       	movw	r24, r18
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	ac 01       	movw	r20, r24
    17a0:	44 0f       	add	r20, r20
    17a2:	55 1f       	adc	r21, r21
    17a4:	44 0f       	add	r20, r20
    17a6:	55 1f       	adc	r21, r21
    17a8:	44 0f       	add	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	48 0f       	add	r20, r24
    17ae:	59 1f       	adc	r21, r25
    17b0:	42 0f       	add	r20, r18
    17b2:	53 1f       	adc	r21, r19
    17b4:	4e 5c       	subi	r20, 0xCE	; 206
    17b6:	5d 4f       	sbci	r21, 0xFD	; 253
}
    17b8:	ca 01       	movw	r24, r20
    17ba:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    17c0:	ca 01       	movw	r24, r20
    17c2:	08 95       	ret

000017c4 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    17c4:	4f 92       	push	r4
    17c6:	5f 92       	push	r5
    17c8:	6f 92       	push	r6
    17ca:	7f 92       	push	r7
    17cc:	8f 92       	push	r8
    17ce:	9f 92       	push	r9
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
    17e6:	4b 01       	movw	r8, r22
  if(!current) { return; }
    17e8:	61 15       	cp	r22, r1
    17ea:	71 05       	cpc	r23, r1
    17ec:	99 f0       	breq	.+38     	; 0x1814 <planner_forward_pass_kernel+0x50>
  if(previous) {
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	89 f0       	breq	.+34     	; 0x1814 <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    17f2:	e9 a8       	ldd	r14, Y+49	; 0x31
    17f4:	fa a8       	ldd	r15, Y+50	; 0x32
    17f6:	0b a9       	ldd	r16, Y+51	; 0x33
    17f8:	1c a9       	ldd	r17, Y+52	; 0x34
    17fa:	fb 01       	movw	r30, r22
    17fc:	41 a8       	ldd	r4, Z+49	; 0x31
    17fe:	52 a8       	ldd	r5, Z+50	; 0x32
    1800:	63 a8       	ldd	r6, Z+51	; 0x33
    1802:	74 a8       	ldd	r7, Z+52	; 0x34
    1804:	c8 01       	movw	r24, r16
    1806:	b7 01       	movw	r22, r14
    1808:	a3 01       	movw	r20, r6
    180a:	92 01       	movw	r18, r4
    180c:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
    1810:	88 23       	and	r24, r24
    1812:	8c f0       	brlt	.+34     	; 0x1836 <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	df 90       	pop	r13
    1822:	cf 90       	pop	r12
    1824:	bf 90       	pop	r11
    1826:	af 90       	pop	r10
    1828:	9f 90       	pop	r9
    182a:	8f 90       	pop	r8
    182c:	7f 90       	pop	r7
    182e:	6f 90       	pop	r6
    1830:	5f 90       	pop	r5
    1832:	4f 90       	pop	r4
    1834:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1836:	f4 01       	movw	r30, r8
    1838:	a1 a4       	ldd	r10, Z+41	; 0x29
    183a:	b2 a4       	ldd	r11, Z+42	; 0x2a
    183c:	c3 a4       	ldd	r12, Z+43	; 0x2b
    183e:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1840:	c8 01       	movw	r24, r16
    1842:	b7 01       	movw	r22, r14
    1844:	a6 01       	movw	r20, r12
    1846:	95 01       	movw	r18, r10
    1848:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    184c:	9b 01       	movw	r18, r22
    184e:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1850:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1854:	7b 01       	movw	r14, r22
    1856:	8c 01       	movw	r16, r24
    1858:	20 91 b3 06 	lds	r18, 0x06B3
    185c:	30 91 b4 06 	lds	r19, 0x06B4
    1860:	40 91 b5 06 	lds	r20, 0x06B5
    1864:	50 91 b6 06 	lds	r21, 0x06B6
    1868:	50 58       	subi	r21, 0x80	; 128
    186a:	ca 01       	movw	r24, r20
    186c:	b9 01       	movw	r22, r18
    186e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e7       	ldi	r20, 0x70	; 112
    1878:	52 e4       	ldi	r21, 0x42	; 66
    187a:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e7       	ldi	r20, 0x70	; 112
    1884:	52 ec       	ldi	r21, 0xC2	; 194
    1886:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    188a:	2d a5       	ldd	r18, Y+45	; 0x2d
    188c:	3e a5       	ldd	r19, Y+46	; 0x2e
    188e:	4f a5       	ldd	r20, Y+47	; 0x2f
    1890:	58 a9       	ldd	r21, Y+48	; 0x30
    1892:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1896:	9b 01       	movw	r18, r22
    1898:	ac 01       	movw	r20, r24
    189a:	c8 01       	movw	r24, r16
    189c:	b7 01       	movw	r22, r14
    189e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    18a2:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    18a6:	a6 01       	movw	r20, r12
    18a8:	95 01       	movw	r18, r10
    18aa:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    18ae:	7b 01       	movw	r14, r22
    18b0:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    18b2:	c3 01       	movw	r24, r6
    18b4:	b2 01       	movw	r22, r4
    18b6:	a8 01       	movw	r20, r16
    18b8:	97 01       	movw	r18, r14
    18ba:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__gesf2>
    18be:	18 16       	cp	r1, r24
    18c0:	0c f0       	brlt	.+2      	; 0x18c4 <planner_forward_pass_kernel+0x100>
    18c2:	a8 cf       	rjmp	.-176    	; 0x1814 <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    18c4:	f4 01       	movw	r30, r8
    18c6:	e1 aa       	std	Z+49, r14	; 0x31
    18c8:	f2 aa       	std	Z+50, r15	; 0x32
    18ca:	03 ab       	std	Z+51, r16	; 0x33
    18cc:	14 ab       	std	Z+52, r17	; 0x34
    18ce:	a2 cf       	rjmp	.-188    	; 0x1814 <planner_forward_pass_kernel+0x50>

000018d0 <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    18dc:	80 91 0e 05 	lds	r24, 0x050E
    18e0:	90 91 0f 05 	lds	r25, 0x050F
    18e4:	48 2f       	mov	r20, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    18e6:	08 2f       	mov	r16, r24
    18e8:	11 27       	eor	r17, r17
    18ea:	07 fd       	sbrc	r16, 7
    18ec:	10 95       	com	r17
    18ee:	80 91 0c 05 	lds	r24, 0x050C
    18f2:	90 91 0d 05 	lds	r25, 0x050D
    18f6:	08 17       	cp	r16, r24
    18f8:	19 07       	cpc	r17, r25
    18fa:	91 f1       	breq	.+100    	; 0x1960 <planner_forward_pass+0x90>
    18fc:	ee 24       	eor	r14, r14
    18fe:	ff 24       	eor	r15, r15
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <planner_forward_pass+0x38>
    1906:	7e 01       	movw	r14, r28
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    1908:	89 e4       	ldi	r24, 0x49	; 73
    190a:	48 02       	muls	r20, r24
    190c:	e0 01       	movw	r28, r0
    190e:	11 24       	eor	r1, r1
    1910:	ce 5c       	subi	r28, 0xCE	; 206
    1912:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    1914:	c9 01       	movw	r24, r18
    1916:	b7 01       	movw	r22, r14
    1918:	ae 01       	movw	r20, r28
    191a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    191e:	c8 01       	movw	r24, r16
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	6a e0       	ldi	r22, 0x0A	; 10
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
    192a:	48 2f       	mov	r20, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    192c:	08 2f       	mov	r16, r24
    192e:	11 27       	eor	r17, r17
    1930:	07 fd       	sbrc	r16, 7
    1932:	10 95       	com	r17
    1934:	80 91 0c 05 	lds	r24, 0x050C
    1938:	90 91 0d 05 	lds	r25, 0x050D
    193c:	97 01       	movw	r18, r14
    193e:	08 17       	cp	r16, r24
    1940:	19 07       	cpc	r17, r25
    1942:	09 f7       	brne	.-62     	; 0x1906 <planner_forward_pass+0x36>
    1944:	b7 01       	movw	r22, r14
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    1946:	cb 01       	movw	r24, r22
    1948:	be 01       	movw	r22, r28
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <planner_forward_pass_kernel>
}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	08 95       	ret
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1960:	c0 e0       	ldi	r28, 0x00	; 0
    1962:	d0 e0       	ldi	r29, 0x00	; 0
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	ee cf       	rjmp	.-36     	; 0x1946 <planner_forward_pass+0x76>

0000196a <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    196a:	2f 92       	push	r2
    196c:	3f 92       	push	r3
    196e:	4f 92       	push	r4
    1970:	5f 92       	push	r5
    1972:	6f 92       	push	r6
    1974:	7f 92       	push	r7
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	3b 01       	movw	r6, r22
    198c:	4c 01       	movw	r8, r24
    198e:	19 01       	movw	r2, r18
    1990:	2a 01       	movw	r4, r20
	st_synchronize();
    1992:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1996:	c4 01       	movw	r24, r8
    1998:	b3 01       	movw	r22, r6
    199a:	20 91 95 06 	lds	r18, 0x0695
    199e:	30 91 96 06 	lds	r19, 0x0696
    19a2:	40 91 97 06 	lds	r20, 0x0697
    19a6:	50 91 98 06 	lds	r21, 0x0698
    19aa:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    19ae:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    19b2:	e0 e1       	ldi	r30, 0x10	; 16
    19b4:	8e 2e       	mov	r8, r30
    19b6:	e5 e0       	ldi	r30, 0x05	; 5
    19b8:	9e 2e       	mov	r9, r30
    19ba:	60 93 10 05 	sts	0x0510, r22
    19be:	70 93 11 05 	sts	0x0511, r23
    19c2:	80 93 12 05 	sts	0x0512, r24
    19c6:	90 93 13 05 	sts	0x0513, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    19ca:	c2 01       	movw	r24, r4
    19cc:	b1 01       	movw	r22, r2
    19ce:	20 91 99 06 	lds	r18, 0x0699
    19d2:	30 91 9a 06 	lds	r19, 0x069A
    19d6:	40 91 9b 06 	lds	r20, 0x069B
    19da:	50 91 9c 06 	lds	r21, 0x069C
    19de:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    19e2:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    19e6:	f4 01       	movw	r30, r8
    19e8:	34 96       	adiw	r30, 0x04	; 4
    19ea:	60 93 14 05 	sts	0x0514, r22
    19ee:	71 83       	std	Z+1, r23	; 0x01
    19f0:	82 83       	std	Z+2, r24	; 0x02
    19f2:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    19f4:	c8 01       	movw	r24, r16
    19f6:	b7 01       	movw	r22, r14
    19f8:	20 91 9d 06 	lds	r18, 0x069D
    19fc:	30 91 9e 06 	lds	r19, 0x069E
    1a00:	40 91 9f 06 	lds	r20, 0x069F
    1a04:	50 91 a0 06 	lds	r21, 0x06A0
    1a08:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1a0c:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    1a10:	f4 01       	movw	r30, r8
    1a12:	38 96       	adiw	r30, 0x08	; 8
    1a14:	60 93 18 05 	sts	0x0518, r22
    1a18:	71 83       	std	Z+1, r23	; 0x01
    1a1a:	82 83       	std	Z+2, r24	; 0x02
    1a1c:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1a1e:	c6 01       	movw	r24, r12
    1a20:	b5 01       	movw	r22, r10
    1a22:	20 91 a1 06 	lds	r18, 0x06A1
    1a26:	30 91 a2 06 	lds	r19, 0x06A2
    1a2a:	40 91 a3 06 	lds	r20, 0x06A3
    1a2e:	50 91 a4 06 	lds	r21, 0x06A4
    1a32:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1a36:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    1a3a:	2c e0       	ldi	r18, 0x0C	; 12
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	82 0e       	add	r8, r18
    1a40:	93 1e       	adc	r9, r19
    1a42:	60 93 1c 05 	sts	0x051C, r22
    1a46:	f4 01       	movw	r30, r8
    1a48:	71 83       	std	Z+1, r23	; 0x01
    1a4a:	82 83       	std	Z+2, r24	; 0x02
    1a4c:	93 83       	std	Z+3, r25	; 0x03
}
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	df 90       	pop	r13
    1a58:	cf 90       	pop	r12
    1a5a:	bf 90       	pop	r11
    1a5c:	af 90       	pop	r10
    1a5e:	9f 90       	pop	r9
    1a60:	8f 90       	pop	r8
    1a62:	7f 90       	pop	r7
    1a64:	6f 90       	pop	r6
    1a66:	5f 90       	pop	r5
    1a68:	4f 90       	pop	r4
    1a6a:	3f 90       	pop	r3
    1a6c:	2f 90       	pop	r2
    1a6e:	08 95       	ret

00001a70 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	80 91 20 05 	lds	r24, 0x0520
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	20 97       	sbiw	r28, 0x00	; 0
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <plan_set_acceleration_manager_enabled+0x18>
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	98 17       	cp	r25, r24
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    1a8c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    1a90:	10 92 20 05 	sts	0x0520, r1
    1a94:	cd 2b       	or	r28, r29
    1a96:	19 f4       	brne	.+6      	; 0x1a9e <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 20 05 	sts	0x0520, r24
  }
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	08 95       	ret

00001aaa <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    1aaa:	10 92 0d 05 	sts	0x050D, r1
    1aae:	10 92 0c 05 	sts	0x050C, r1
  block_buffer_tail = 0;
    1ab2:	10 92 0f 05 	sts	0x050F, r1
    1ab6:	10 92 0e 05 	sts	0x050E, r1
  plan_set_acceleration_manager_enabled(TRUE);
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1ac2:	80 e1       	ldi	r24, 0x10	; 16
    1ac4:	e0 e1       	ldi	r30, 0x10	; 16
    1ac6:	f5 e0       	ldi	r31, 0x05	; 5
    1ac8:	df 01       	movw	r26, r30
    1aca:	1d 92       	st	X+, r1
    1acc:	8a 95       	dec	r24
    1ace:	e9 f7       	brne	.-6      	; 0x1aca <plan_init+0x20>
}
    1ad0:	08 95       	ret

00001ad2 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1ad2:	2f 92       	push	r2
    1ad4:	3f 92       	push	r3
    1ad6:	4f 92       	push	r4
    1ad8:	5f 92       	push	r5
    1ada:	6f 92       	push	r6
    1adc:	7f 92       	push	r7
    1ade:	8f 92       	push	r8
    1ae0:	9f 92       	push	r9
    1ae2:	af 92       	push	r10
    1ae4:	bf 92       	push	r11
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <planner_reverse_pass_kernel+0x26>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <planner_reverse_pass_kernel+0x28>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	8c 01       	movw	r16, r24
    1b00:	7e 83       	std	Y+6, r23	; 0x06
    1b02:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1b04:	67 2b       	or	r22, r23
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <planner_reverse_pass_kernel+0x38>
    1b08:	a3 c0       	rjmp	.+326    	; 0x1c50 <planner_reverse_pass_kernel+0x17e>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    1b0a:	41 15       	cp	r20, r1
    1b0c:	51 05       	cpc	r21, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <planner_reverse_pass_kernel+0x40>
    1b10:	19 c1       	rjmp	.+562    	; 0x1d44 <planner_reverse_pass_kernel+0x272>
    exit_factor = next->entry_factor;
    1b12:	da 01       	movw	r26, r20
    1b14:	d1 96       	adiw	r26, 0x31	; 49
    1b16:	8d 91       	ld	r24, X+
    1b18:	9d 91       	ld	r25, X+
    1b1a:	0d 90       	ld	r0, X+
    1b1c:	bc 91       	ld	r27, X
    1b1e:	a0 2d       	mov	r26, r0
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	ab 83       	std	Y+3, r26	; 0x03
    1b26:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1b28:	01 15       	cp	r16, r1
    1b2a:	11 05       	cpc	r17, r1
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <planner_reverse_pass_kernel+0x5e>
    1b2e:	03 c1       	rjmp	.+518    	; 0x1d36 <planner_reverse_pass_kernel+0x264>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1b30:	f8 01       	movw	r30, r16
    1b32:	61 8d       	ldd	r22, Z+25	; 0x19
    1b34:	72 8d       	ldd	r23, Z+26	; 0x1a
    1b36:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b38:	94 8d       	ldd	r25, Z+28	; 0x1c
    1b3a:	ad 81       	ldd	r26, Y+5	; 0x05
    1b3c:	be 81       	ldd	r27, Y+6	; 0x06
    1b3e:	59 96       	adiw	r26, 0x19	; 25
    1b40:	2d 91       	ld	r18, X+
    1b42:	3d 91       	ld	r19, X+
    1b44:	4d 91       	ld	r20, X+
    1b46:	5c 91       	ld	r21, X
    1b48:	5c 97       	sbiw	r26, 0x1c	; 28
    1b4a:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
    1b52:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1b56:	1b 01       	movw	r2, r22
    1b58:	2c 01       	movw	r4, r24
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	65 8d       	ldd	r22, Z+29	; 0x1d
    1b5e:	76 8d       	ldd	r23, Z+30	; 0x1e
    1b60:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b62:	90 a1       	ldd	r25, Z+32	; 0x20
    1b64:	ad 81       	ldd	r26, Y+5	; 0x05
    1b66:	be 81       	ldd	r27, Y+6	; 0x06
    1b68:	5d 96       	adiw	r26, 0x1d	; 29
    1b6a:	2d 91       	ld	r18, X+
    1b6c:	3d 91       	ld	r19, X+
    1b6e:	4d 91       	ld	r20, X+
    1b70:	5c 91       	ld	r21, X
    1b72:	90 97       	sbiw	r26, 0x20	; 32
    1b74:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    1b78:	9b 01       	movw	r18, r22
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1b80:	3b 01       	movw	r6, r22
    1b82:	4c 01       	movw	r8, r24
    1b84:	f8 01       	movw	r30, r16
    1b86:	61 a1       	ldd	r22, Z+33	; 0x21
    1b88:	72 a1       	ldd	r23, Z+34	; 0x22
    1b8a:	83 a1       	ldd	r24, Z+35	; 0x23
    1b8c:	94 a1       	ldd	r25, Z+36	; 0x24
    1b8e:	ad 81       	ldd	r26, Y+5	; 0x05
    1b90:	be 81       	ldd	r27, Y+6	; 0x06
    1b92:	91 96       	adiw	r26, 0x21	; 33
    1b94:	2d 91       	ld	r18, X+
    1b96:	3d 91       	ld	r19, X+
    1b98:	4d 91       	ld	r20, X+
    1b9a:	5c 91       	ld	r21, X
    1b9c:	94 97       	sbiw	r26, 0x24	; 36
    1b9e:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    1ba2:	9b 01       	movw	r18, r22
    1ba4:	ac 01       	movw	r20, r24
    1ba6:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1baa:	5b 01       	movw	r10, r22
    1bac:	6c 01       	movw	r12, r24
    1bae:	f8 01       	movw	r30, r16
    1bb0:	65 a1       	ldd	r22, Z+37	; 0x25
    1bb2:	76 a1       	ldd	r23, Z+38	; 0x26
    1bb4:	87 a1       	ldd	r24, Z+39	; 0x27
    1bb6:	90 a5       	ldd	r25, Z+40	; 0x28
    1bb8:	ad 81       	ldd	r26, Y+5	; 0x05
    1bba:	be 81       	ldd	r27, Y+6	; 0x06
    1bbc:	95 96       	adiw	r26, 0x25	; 37
    1bbe:	2d 91       	ld	r18, X+
    1bc0:	3d 91       	ld	r19, X+
    1bc2:	4d 91       	ld	r20, X+
    1bc4:	5c 91       	ld	r21, X
    1bc6:	98 97       	sbiw	r26, 0x28	; 40
    1bc8:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    1bcc:	9b 01       	movw	r18, r22
    1bce:	ac 01       	movw	r20, r24
    1bd0:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1bd4:	7b 01       	movw	r14, r22
    1bd6:	8c 01       	movw	r16, r24
    1bd8:	c2 01       	movw	r24, r4
    1bda:	b1 01       	movw	r22, r2
    1bdc:	a4 01       	movw	r20, r8
    1bde:	93 01       	movw	r18, r6
    1be0:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    1be4:	a6 01       	movw	r20, r12
    1be6:	95 01       	movw	r18, r10
    1be8:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    1bec:	a8 01       	movw	r20, r16
    1bee:	97 01       	movw	r18, r14
    1bf0:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    1bf4:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <sqrt>
    1bf8:	5b 01       	movw	r10, r22
    1bfa:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1bfc:	e0 90 b7 06 	lds	r14, 0x06B7
    1c00:	f0 90 b8 06 	lds	r15, 0x06B8
    1c04:	00 91 b9 06 	lds	r16, 0x06B9
    1c08:	10 91 ba 06 	lds	r17, 0x06BA
    1c0c:	c8 01       	movw	r24, r16
    1c0e:	b7 01       	movw	r22, r14
    1c10:	a6 01       	movw	r20, r12
    1c12:	95 01       	movw	r18, r10
    1c14:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
    1c18:	87 fd       	sbrc	r24, 7
    1c1a:	33 c0       	rjmp	.+102    	; 0x1c82 <planner_reverse_pass_kernel+0x1b0>
    1c1c:	0f 2e       	mov	r0, r31
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	6f 2e       	mov	r6, r31
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	7f 2e       	mov	r7, r31
    1c26:	f0 e8       	ldi	r31, 0x80	; 128
    1c28:	8f 2e       	mov	r8, r31
    1c2a:	ff e3       	ldi	r31, 0x3F	; 63
    1c2c:	9f 2e       	mov	r9, r31
    1c2e:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1c30:	c4 01       	movw	r24, r8
    1c32:	b3 01       	movw	r22, r6
    1c34:	29 81       	ldd	r18, Y+1	; 0x01
    1c36:	3a 81       	ldd	r19, Y+2	; 0x02
    1c38:	4b 81       	ldd	r20, Y+3	; 0x03
    1c3a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c3c:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__gesf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	44 f1       	brlt	.+80     	; 0x1c94 <planner_reverse_pass_kernel+0x1c2>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1c44:	ed 81       	ldd	r30, Y+5	; 0x05
    1c46:	fe 81       	ldd	r31, Y+6	; 0x06
    1c48:	61 aa       	std	Z+49, r6	; 0x31
    1c4a:	72 aa       	std	Z+50, r7	; 0x32
    1c4c:	83 aa       	std	Z+51, r8	; 0x33
    1c4e:	94 aa       	std	Z+52, r9	; 0x34
}
    1c50:	26 96       	adiw	r28, 0x06	; 6
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	9f 90       	pop	r9
    1c72:	8f 90       	pop	r8
    1c74:	7f 90       	pop	r7
    1c76:	6f 90       	pop	r6
    1c78:	5f 90       	pop	r5
    1c7a:	4f 90       	pop	r4
    1c7c:	3f 90       	pop	r3
    1c7e:	2f 90       	pop	r2
    1c80:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1c82:	c8 01       	movw	r24, r16
    1c84:	b7 01       	movw	r22, r14
    1c86:	a6 01       	movw	r20, r12
    1c88:	95 01       	movw	r18, r10
    1c8a:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    1c8e:	3b 01       	movw	r6, r22
    1c90:	4c 01       	movw	r8, r24
    1c92:	ce cf       	rjmp	.-100    	; 0x1c30 <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1c94:	ed 81       	ldd	r30, Y+5	; 0x05
    1c96:	fe 81       	ldd	r31, Y+6	; 0x06
    1c98:	a1 a4       	ldd	r10, Z+41	; 0x29
    1c9a:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1c9c:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1c9e:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1ca0:	c6 01       	movw	r24, r12
    1ca2:	b5 01       	movw	r22, r10
    1ca4:	29 81       	ldd	r18, Y+1	; 0x01
    1ca6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ca8:	4b 81       	ldd	r20, Y+3	; 0x03
    1caa:	5c 81       	ldd	r21, Y+4	; 0x04
    1cac:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1cb0:	9b 01       	movw	r18, r22
    1cb2:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1cb4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1cb8:	7b 01       	movw	r14, r22
    1cba:	8c 01       	movw	r16, r24
    1cbc:	20 91 b3 06 	lds	r18, 0x06B3
    1cc0:	30 91 b4 06 	lds	r19, 0x06B4
    1cc4:	40 91 b5 06 	lds	r20, 0x06B5
    1cc8:	50 91 b6 06 	lds	r21, 0x06B6
    1ccc:	50 58       	subi	r21, 0x80	; 128
    1cce:	ca 01       	movw	r24, r20
    1cd0:	b9 01       	movw	r22, r18
    1cd2:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e7       	ldi	r20, 0x70	; 112
    1cdc:	52 e4       	ldi	r21, 0x42	; 66
    1cde:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e7       	ldi	r20, 0x70	; 112
    1ce8:	52 ec       	ldi	r21, 0xC2	; 194
    1cea:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1cee:	ad 81       	ldd	r26, Y+5	; 0x05
    1cf0:	be 81       	ldd	r27, Y+6	; 0x06
    1cf2:	9d 96       	adiw	r26, 0x2d	; 45
    1cf4:	2d 91       	ld	r18, X+
    1cf6:	3d 91       	ld	r19, X+
    1cf8:	4d 91       	ld	r20, X+
    1cfa:	5c 91       	ld	r21, X
    1cfc:	d0 97       	sbiw	r26, 0x30	; 48
    1cfe:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	c8 01       	movw	r24, r16
    1d08:	b7 01       	movw	r22, r14
    1d0a:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    1d0e:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1d12:	a6 01       	movw	r20, r12
    1d14:	95 01       	movw	r18, r10
    1d16:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    1d1a:	7b 01       	movw	r14, r22
    1d1c:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1d1e:	c4 01       	movw	r24, r8
    1d20:	b3 01       	movw	r22, r6
    1d22:	a8 01       	movw	r20, r16
    1d24:	97 01       	movw	r18, r14
    1d26:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <__gesf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	0c f0       	brlt	.+2      	; 0x1d30 <planner_reverse_pass_kernel+0x25e>
    1d2e:	8a cf       	rjmp	.-236    	; 0x1c44 <planner_reverse_pass_kernel+0x172>
    1d30:	37 01       	movw	r6, r14
    1d32:	48 01       	movw	r8, r16
    1d34:	87 cf       	rjmp	.-242    	; 0x1c44 <planner_reverse_pass_kernel+0x172>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <factor_for_safe_speed>
    1d3e:	3b 01       	movw	r6, r22
    1d40:	4c 01       	movw	r8, r24
    1d42:	80 cf       	rjmp	.-256    	; 0x1c44 <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	0e 94 8c 0b 	call	0x1718	; 0x1718 <factor_for_safe_speed>
    1d4c:	69 83       	std	Y+1, r22	; 0x01
    1d4e:	7a 83       	std	Y+2, r23	; 0x02
    1d50:	8b 83       	std	Y+3, r24	; 0x03
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	e9 ce       	rjmp	.-558    	; 0x1b28 <planner_reverse_pass_kernel+0x56>

00001d56 <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1d64:	80 91 0c 05 	lds	r24, 0x050C
    1d68:	90 91 0d 05 	lds	r25, 0x050D
    1d6c:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1d6e:	20 91 0e 05 	lds	r18, 0x050E
    1d72:	30 91 0f 05 	lds	r19, 0x050F
    1d76:	99 27       	eor	r25, r25
    1d78:	87 fd       	sbrc	r24, 7
    1d7a:	90 95       	com	r25
    1d7c:	82 17       	cp	r24, r18
    1d7e:	93 07       	cpc	r25, r19
    1d80:	b9 f1       	breq	.+110    	; 0x1df0 <planner_reverse_pass+0x9a>
    1d82:	00 e0       	ldi	r16, 0x00	; 0
    1d84:	10 e0       	ldi	r17, 0x00	; 0
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	19 c0       	rjmp	.+50     	; 0x1dbe <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1d8c:	8f 2d       	mov	r24, r15
    1d8e:	99 e4       	ldi	r25, 0x49	; 73
    1d90:	89 02       	muls	r24, r25
    1d92:	b0 01       	movw	r22, r0
    1d94:	11 24       	eor	r1, r1
    1d96:	cf 2c       	mov	r12, r15
    1d98:	dd 24       	eor	r13, r13
    1d9a:	c7 fc       	sbrc	r12, 7
    1d9c:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1d9e:	eb 01       	movw	r28, r22
    1da0:	ce 5c       	subi	r28, 0xCE	; 206
    1da2:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1da4:	ce 01       	movw	r24, r28
    1da6:	b8 01       	movw	r22, r16
    1da8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1dac:	80 91 0e 05 	lds	r24, 0x050E
    1db0:	90 91 0f 05 	lds	r25, 0x050F
    1db4:	a8 01       	movw	r20, r16
    1db6:	8c 15       	cp	r24, r12
    1db8:	9d 05       	cpc	r25, r13
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <planner_reverse_pass+0x7e>
    1dbc:	8e 01       	movw	r16, r28
    block_index--;
    1dbe:	fa 94       	dec	r15
    if(block_index < 0) {
    1dc0:	f7 fe       	sbrs	r15, 7
    1dc2:	e4 cf       	rjmp	.-56     	; 0x1d8c <planner_reverse_pass+0x36>
    1dc4:	a9 e0       	ldi	r26, 0x09	; 9
    1dc6:	fa 2e       	mov	r15, r26
    1dc8:	61 e9       	ldi	r22, 0x91	; 145
    1dca:	72 e0       	ldi	r23, 0x02	; 2
    1dcc:	f9 e0       	ldi	r31, 0x09	; 9
    1dce:	cf 2e       	mov	r12, r31
    1dd0:	d1 2c       	mov	r13, r1
    1dd2:	e5 cf       	rjmp	.-54     	; 0x1d9e <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1dd4:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	be 01       	movw	r22, r28
    1ddc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <planner_reverse_pass_kernel>
}
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	df 90       	pop	r13
    1dec:	cf 90       	pop	r12
    1dee:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1df0:	c0 e0       	ldi	r28, 0x00	; 0
    1df2:	d0 e0       	ldi	r29, 0x00	; 0
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	ee cf       	rjmp	.-36     	; 0x1dd6 <planner_reverse_pass+0x80>

00001dfa <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1dfa:	2f 92       	push	r2
    1dfc:	3f 92       	push	r3
    1dfe:	4f 92       	push	r4
    1e00:	5f 92       	push	r5
    1e02:	6f 92       	push	r6
    1e04:	7f 92       	push	r7
    1e06:	8f 92       	push	r8
    1e08:	9f 92       	push	r9
    1e0a:	af 92       	push	r10
    1e0c:	bf 92       	push	r11
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	62 97       	sbiw	r28, 0x12	; 18
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	9a 8b       	std	Y+18, r25	; 0x12
    1e30:	89 8b       	std	Y+17, r24	; 0x11
    1e32:	6a 01       	movw	r12, r20
    1e34:	7b 01       	movw	r14, r22
    1e36:	18 01       	movw	r2, r16
    1e38:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	65 89       	ldd	r22, Z+21	; 0x15
    1e3e:	76 89       	ldd	r23, Z+22	; 0x16
    1e40:	87 89       	ldd	r24, Z+23	; 0x17
    1e42:	90 8d       	ldd	r25, Z+24	; 0x18
    1e44:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <__floatunsisf>
    1e48:	3b 01       	movw	r6, r22
    1e4a:	4c 01       	movw	r8, r24
    1e4c:	a7 01       	movw	r20, r14
    1e4e:	96 01       	movw	r18, r12
    1e50:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1e54:	0e 94 2d 2c 	call	0x585a	; 0x585a <ceil>
    1e58:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
    1e5c:	7b 01       	movw	r14, r22
    1e5e:	8c 01       	movw	r16, r24
    1e60:	e9 89       	ldd	r30, Y+17	; 0x11
    1e62:	fa 89       	ldd	r31, Y+18	; 0x12
    1e64:	65 ab       	std	Z+53, r22	; 0x35
    1e66:	76 ab       	std	Z+54, r23	; 0x36
    1e68:	87 ab       	std	Z+55, r24	; 0x37
    1e6a:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1e6c:	c4 01       	movw	r24, r8
    1e6e:	b3 01       	movw	r22, r6
    1e70:	a2 01       	movw	r20, r4
    1e72:	91 01       	movw	r18, r2
    1e74:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1e78:	0e 94 2d 2c 	call	0x585a	; 0x585a <ceil>
    1e7c:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
    1e80:	1b 01       	movw	r2, r22
    1e82:	2c 01       	movw	r4, r24
    1e84:	e9 89       	ldd	r30, Y+17	; 0x11
    1e86:	fa 89       	ldd	r31, Y+18	; 0x12
    1e88:	61 af       	std	Z+57, r22	; 0x39
    1e8a:	72 af       	std	Z+58, r23	; 0x3a
    1e8c:	83 af       	std	Z+59, r24	; 0x3b
    1e8e:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1e90:	fd 96       	adiw	r30, 0x3d	; 61
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	fd 97       	sbiw	r30, 0x3d	; 61
    1e9c:	fa 8b       	std	Y+18, r31	; 0x12
    1e9e:	e9 8b       	std	Y+17, r30	; 0x11
    1ea0:	28 e2       	ldi	r18, 0x28	; 40
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__mulsi3>
    1eac:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e7       	ldi	r20, 0x70	; 112
    1eb6:	52 e4       	ldi	r21, 0x42	; 66
    1eb8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1ebc:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
    1ec0:	5b 01       	movw	r10, r22
    1ec2:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1ec4:	c8 01       	movw	r24, r16
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <__floatunsisf>
    1ecc:	7b 01       	movw	r14, r22
    1ece:	8c 01       	movw	r16, r24
    1ed0:	c6 01       	movw	r24, r12
    1ed2:	b5 01       	movw	r22, r10
    1ed4:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    1ed8:	6d 83       	std	Y+5, r22	; 0x05
    1eda:	7e 83       	std	Y+6, r23	; 0x06
    1edc:	8f 83       	std	Y+7, r24	; 0x07
    1ede:	98 87       	std	Y+8, r25	; 0x08


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1ee0:	c4 01       	movw	r24, r8
    1ee2:	b3 01       	movw	r22, r6
    1ee4:	a4 01       	movw	r20, r8
    1ee6:	93 01       	movw	r18, r6
    1ee8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1eec:	3b 01       	movw	r6, r22
    1eee:	4c 01       	movw	r8, r24
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	b7 01       	movw	r22, r14
    1ef4:	a8 01       	movw	r20, r16
    1ef6:	97 01       	movw	r18, r14
    1ef8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1efc:	69 87       	std	Y+9, r22	; 0x09
    1efe:	7a 87       	std	Y+10, r23	; 0x0a
    1f00:	8b 87       	std	Y+11, r24	; 0x0b
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
    1f04:	6d 81       	ldd	r22, Y+5	; 0x05
    1f06:	7e 81       	ldd	r23, Y+6	; 0x06
    1f08:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0a:	98 85       	ldd	r25, Y+8	; 0x08
    1f0c:	9b 01       	movw	r18, r22
    1f0e:	ac 01       	movw	r20, r24
    1f10:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    1f14:	6d 87       	std	Y+13, r22	; 0x0d
    1f16:	7e 87       	std	Y+14, r23	; 0x0e
    1f18:	8f 87       	std	Y+15, r24	; 0x0f
    1f1a:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1f1c:	c4 01       	movw	r24, r8
    1f1e:	b3 01       	movw	r22, r6
    1f20:	29 85       	ldd	r18, Y+9	; 0x09
    1f22:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f24:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f26:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f28:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    1f2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f30:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f32:	58 89       	ldd	r21, Y+16	; 0x10
    1f34:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    1f38:	0e 94 2d 2c 	call	0x585a	; 0x585a <ceil>
    1f3c:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
    1f40:	69 83       	std	Y+1, r22	; 0x01
    1f42:	7a 83       	std	Y+2, r23	; 0x02
    1f44:	8b 83       	std	Y+3, r24	; 0x03
    1f46:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1f48:	c2 01       	movw	r24, r4
    1f4a:	b1 01       	movw	r22, r2
    1f4c:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <__floatunsisf>
    1f50:	9b 01       	movw	r18, r22
    1f52:	ac 01       	movw	r20, r24


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1f54:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    1f58:	1b 01       	movw	r2, r22
    1f5a:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1f5c:	a4 01       	movw	r20, r8
    1f5e:	93 01       	movw	r18, r6
    1f60:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    1f64:	7b 01       	movw	r14, r22
    1f66:	8c 01       	movw	r16, r24
    1f68:	d0 94       	com	r13
    1f6a:	c0 94       	com	r12
    1f6c:	b0 94       	com	r11
    1f6e:	a0 94       	com	r10
    1f70:	a1 1c       	adc	r10, r1
    1f72:	b1 1c       	adc	r11, r1
    1f74:	c1 1c       	adc	r12, r1
    1f76:	d1 1c       	adc	r13, r1
    1f78:	c6 01       	movw	r24, r12
    1f7a:	b5 01       	movw	r22, r10
    1f7c:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    1f80:	9b 01       	movw	r18, r22
    1f82:	ac 01       	movw	r20, r24
    1f84:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    1f88:	9b 01       	movw	r18, r22
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	b7 01       	movw	r22, r14
    1f90:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    1f94:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1f98:	e9 89       	ldd	r30, Y+17	; 0x11
    1f9a:	fa 89       	ldd	r31, Y+18	; 0x12
    1f9c:	a1 88       	ldd	r10, Z+17	; 0x11
    1f9e:	b2 88       	ldd	r11, Z+18	; 0x12
    1fa0:	c3 88       	ldd	r12, Z+19	; 0x13
    1fa2:	d4 88       	ldd	r13, Z+20	; 0x14
    1fa4:	86 01       	movw	r16, r12
    1fa6:	75 01       	movw	r14, r10
    1fa8:	29 81       	ldd	r18, Y+1	; 0x01
    1faa:	3a 81       	ldd	r19, Y+2	; 0x02
    1fac:	4b 81       	ldd	r20, Y+3	; 0x03
    1fae:	5c 81       	ldd	r21, Y+4	; 0x04
    1fb0:	e2 1a       	sub	r14, r18
    1fb2:	f3 0a       	sbc	r15, r19
    1fb4:	04 0b       	sbc	r16, r20
    1fb6:	15 0b       	sbc	r17, r21
    1fb8:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
    1fbc:	a8 01       	movw	r20, r16
    1fbe:	97 01       	movw	r18, r14
    1fc0:	26 1b       	sub	r18, r22
    1fc2:	37 0b       	sbc	r19, r23
    1fc4:	48 0b       	sbc	r20, r24
    1fc6:	59 0b       	sbc	r21, r25
    1fc8:	da 01       	movw	r26, r20
    1fca:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1fcc:	57 fd       	sbrc	r21, 7
    1fce:	30 c0       	rjmp	.+96     	; 0x2030 <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1fd0:	49 89       	ldd	r20, Y+17	; 0x11
    1fd2:	5a 89       	ldd	r21, Y+18	; 0x12
    1fd4:	4f 5b       	subi	r20, 0xBF	; 191
    1fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd8:	fa 01       	movw	r30, r20
    1fda:	29 81       	ldd	r18, Y+1	; 0x01
    1fdc:	3a 81       	ldd	r19, Y+2	; 0x02
    1fde:	4b 81       	ldd	r20, Y+3	; 0x03
    1fe0:	5c 81       	ldd	r21, Y+4	; 0x04
    1fe2:	21 93       	st	Z+, r18
    1fe4:	31 93       	st	Z+, r19
    1fe6:	41 93       	st	Z+, r20
    1fe8:	51 93       	st	Z+, r21
    1fea:	fa 8b       	std	Y+18, r31	; 0x12
    1fec:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1fee:	82 0f       	add	r24, r18
    1ff0:	93 1f       	adc	r25, r19
    1ff2:	a4 1f       	adc	r26, r20
    1ff4:	b5 1f       	adc	r27, r21
    1ff6:	80 83       	st	Z, r24
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	a2 83       	std	Z+2, r26	; 0x02
    1ffc:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1ffe:	62 96       	adiw	r28, 0x12	; 18
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	ff 90       	pop	r15
    2014:	ef 90       	pop	r14
    2016:	df 90       	pop	r13
    2018:	cf 90       	pop	r12
    201a:	bf 90       	pop	r11
    201c:	af 90       	pop	r10
    201e:	9f 90       	pop	r9
    2020:	8f 90       	pop	r8
    2022:	7f 90       	pop	r7
    2024:	6f 90       	pop	r6
    2026:	5f 90       	pop	r5
    2028:	4f 90       	pop	r4
    202a:	3f 90       	pop	r3
    202c:	2f 90       	pop	r2
    202e:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    2030:	c6 01       	movw	r24, r12
    2032:	b5 01       	movw	r22, r10
    2034:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    2038:	2d 85       	ldd	r18, Y+13	; 0x0d
    203a:	3e 85       	ldd	r19, Y+14	; 0x0e
    203c:	4f 85       	ldd	r20, Y+15	; 0x0f
    203e:	58 89       	ldd	r21, Y+16	; 0x10
    2040:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    2044:	29 85       	ldd	r18, Y+9	; 0x09
    2046:	3a 85       	ldd	r19, Y+10	; 0x0a
    2048:	4b 85       	ldd	r20, Y+11	; 0x0b
    204a:	5c 85       	ldd	r21, Y+12	; 0x0c
    204c:	0e 94 a0 2b 	call	0x5740	; 0x5740 <__subsf3>
    2050:	9b 01       	movw	r18, r22
    2052:	ac 01       	movw	r20, r24
    2054:	c2 01       	movw	r24, r4
    2056:	b1 01       	movw	r22, r2
    2058:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    205c:	7b 01       	movw	r14, r22
    205e:	8c 01       	movw	r16, r24
    2060:	6d 81       	ldd	r22, Y+5	; 0x05
    2062:	7e 81       	ldd	r23, Y+6	; 0x06
    2064:	8f 81       	ldd	r24, Y+7	; 0x07
    2066:	98 85       	ldd	r25, Y+8	; 0x08
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	50 e4       	ldi	r21, 0x40	; 64
    2070:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    2074:	9b 01       	movw	r18, r22
    2076:	ac 01       	movw	r20, r24
    2078:	c8 01       	movw	r24, r16
    207a:	b7 01       	movw	r22, r14
    207c:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    2080:	0e 94 2d 2c 	call	0x585a	; 0x585a <ceil>
    2084:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
    2088:	69 83       	std	Y+1, r22	; 0x01
    208a:	7a 83       	std	Y+2, r23	; 0x02
    208c:	8b 83       	std	Y+3, r24	; 0x03
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	9b cf       	rjmp	.-202    	; 0x1fd0 <calculate_trapezoid_for_block+0x1d6>

0000209a <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    20a6:	80 91 0e 05 	lds	r24, 0x050E
    20aa:	90 91 0f 05 	lds	r25, 0x050F
    20ae:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    20b0:	e8 2e       	mov	r14, r24
    20b2:	ff 24       	eor	r15, r15
    20b4:	e7 fc       	sbrc	r14, 7
    20b6:	f0 94       	com	r15
    20b8:	80 91 0c 05 	lds	r24, 0x050C
    20bc:	90 91 0d 05 	lds	r25, 0x050D
    20c0:	e8 16       	cp	r14, r24
    20c2:	f9 06       	cpc	r15, r25
    20c4:	e1 f1       	breq	.+120    	; 0x213e <planner_recalculate_trapezoids+0xa4>
    20c6:	e0 e0       	ldi	r30, 0x00	; 0
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <planner_recalculate_trapezoids+0x34>
    20cc:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    20ce:	89 e4       	ldi	r24, 0x49	; 73
    20d0:	28 02       	muls	r18, r24
    20d2:	e0 01       	movw	r28, r0
    20d4:	11 24       	eor	r1, r1
    20d6:	ce 5c       	subi	r28, 0xCE	; 206
    20d8:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    20da:	30 97       	sbiw	r30, 0x00	; 0
    20dc:	59 f0       	breq	.+22     	; 0x20f4 <planner_recalculate_trapezoids+0x5a>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    20de:	41 a9       	ldd	r20, Z+49	; 0x31
    20e0:	52 a9       	ldd	r21, Z+50	; 0x32
    20e2:	63 a9       	ldd	r22, Z+51	; 0x33
    20e4:	74 a9       	ldd	r23, Z+52	; 0x34
    20e6:	09 a9       	ldd	r16, Y+49	; 0x31
    20e8:	1a a9       	ldd	r17, Y+50	; 0x32
    20ea:	2b a9       	ldd	r18, Y+51	; 0x33
    20ec:	3c a9       	ldd	r19, Y+52	; 0x34
    20ee:	cf 01       	movw	r24, r30
    20f0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    20f4:	c7 01       	movw	r24, r14
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	6a e0       	ldi	r22, 0x0A	; 10
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
    2100:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2102:	e8 2e       	mov	r14, r24
    2104:	ff 24       	eor	r15, r15
    2106:	e7 fc       	sbrc	r14, 7
    2108:	f0 94       	com	r15
    210a:	80 91 0c 05 	lds	r24, 0x050C
    210e:	90 91 0d 05 	lds	r25, 0x050D
    2112:	e8 16       	cp	r14, r24
    2114:	f9 06       	cpc	r15, r25
    2116:	d1 f6       	brne	.-76     	; 0x20cc <planner_recalculate_trapezoids+0x32>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    2118:	ce 01       	movw	r24, r28
    211a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <factor_for_safe_speed>
    211e:	8b 01       	movw	r16, r22
    2120:	9c 01       	movw	r18, r24
    2122:	49 a9       	ldd	r20, Y+49	; 0x31
    2124:	5a a9       	ldd	r21, Y+50	; 0x32
    2126:	6b a9       	ldd	r22, Y+51	; 0x33
    2128:	7c a9       	ldd	r23, Y+52	; 0x34
    212a:	ce 01       	movw	r24, r28
    212c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <calculate_trapezoid_for_block>
}
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	ff 90       	pop	r15
    213a:	ef 90       	pop	r14
    213c:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    213e:	c0 e0       	ldi	r28, 0x00	; 0
    2140:	d0 e0       	ldi	r29, 0x00	; 0
    2142:	ea cf       	rjmp	.-44     	; 0x2118 <planner_recalculate_trapezoids+0x7e>

00002144 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    2144:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <planner_reverse_pass>
  planner_forward_pass();
    2148:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <planner_forward_pass>
  planner_recalculate_trapezoids();
    214c:	0e 94 4d 10 	call	0x209a	; 0x209a <planner_recalculate_trapezoids>
}
    2150:	08 95       	ret

00002152 <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    2152:	2f 92       	push	r2
    2154:	3f 92       	push	r3
    2156:	4f 92       	push	r4
    2158:	5f 92       	push	r5
    215a:	6f 92       	push	r6
    215c:	7f 92       	push	r7
    215e:	8f 92       	push	r8
    2160:	9f 92       	push	r9
    2162:	af 92       	push	r10
    2164:	bf 92       	push	r11
    2166:	cf 92       	push	r12
    2168:	df 92       	push	r13
    216a:	ef 92       	push	r14
    216c:	ff 92       	push	r15
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	cc 54       	subi	r28, 0x4C	; 76
    217c:	d0 40       	sbci	r29, 0x00	; 0
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	3b 01       	movw	r6, r22
    218a:	4c 01       	movw	r8, r24
    218c:	23 96       	adiw	r28, 0x03	; 3
    218e:	2c af       	std	Y+60, r18	; 0x3c
    2190:	3d af       	std	Y+61, r19	; 0x3d
    2192:	4e af       	std	Y+62, r20	; 0x3e
    2194:	5f af       	std	Y+63, r21	; 0x3f
    2196:	23 97       	sbiw	r28, 0x03	; 3
    2198:	27 96       	adiw	r28, 0x07	; 7
    219a:	ec ae       	std	Y+60, r14	; 0x3c
    219c:	fd ae       	std	Y+61, r15	; 0x3d
    219e:	0e af       	std	Y+62, r16	; 0x3e
    21a0:	1f af       	std	Y+63, r17	; 0x3f
    21a2:	27 97       	sbiw	r28, 0x07	; 7
	printPgmString(PSTR("z = "));
	printFloat( z );
	printPgmString(PSTR("\r\n"));
#endif
  
  if( gHomed == FALSE ) 
    21a4:	80 91 55 05 	lds	r24, 0x0555
    21a8:	88 23       	and	r24, r24
    21aa:	d1 f4       	brne	.+52     	; 0x21e0 <plan_buffer_line+0x8e>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    21ac:	c4 5b       	subi	r28, 0xB4	; 180
    21ae:	df 4f       	sbci	r29, 0xFF	; 255
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	9f 90       	pop	r9
    21d0:	8f 90       	pop	r8
    21d2:	7f 90       	pop	r7
    21d4:	6f 90       	pop	r6
    21d6:	5f 90       	pop	r5
    21d8:	4f 90       	pop	r4
    21da:	3f 90       	pop	r3
    21dc:	2f 90       	pop	r2
    21de:	08 95       	ret
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    21e0:	c4 01       	movw	r24, r8
    21e2:	b3 01       	movw	r22, r6
    21e4:	20 91 95 06 	lds	r18, 0x0695
    21e8:	30 91 96 06 	lds	r19, 0x0696
    21ec:	40 91 97 06 	lds	r20, 0x0697
    21f0:	50 91 98 06 	lds	r21, 0x0698
    21f4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    21f8:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    21fc:	7b 01       	movw	r14, r22
    21fe:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2200:	20 91 99 06 	lds	r18, 0x0699
    2204:	30 91 9a 06 	lds	r19, 0x069A
    2208:	40 91 9b 06 	lds	r20, 0x069B
    220c:	50 91 9c 06 	lds	r21, 0x069C
    2210:	2b af       	std	Y+59, r18	; 0x3b
    2212:	3c af       	std	Y+60, r19	; 0x3c
    2214:	4d af       	std	Y+61, r20	; 0x3d
    2216:	5e af       	std	Y+62, r21	; 0x3e
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    2218:	40 91 9d 06 	lds	r20, 0x069D
    221c:	50 91 9e 06 	lds	r21, 0x069E
    2220:	60 91 9f 06 	lds	r22, 0x069F
    2224:	70 91 a0 06 	lds	r23, 0x06A0
    2228:	4f ab       	std	Y+55, r20	; 0x37
    222a:	58 af       	std	Y+56, r21	; 0x38
    222c:	69 af       	std	Y+57, r22	; 0x39
    222e:	7a af       	std	Y+58, r23	; 0x3a
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    2230:	20 90 a1 06 	lds	r2, 0x06A1
    2234:	30 90 a2 06 	lds	r3, 0x06A2
    2238:	40 90 a3 06 	lds	r4, 0x06A3
    223c:	50 90 a4 06 	lds	r5, 0x06A4
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    2240:	80 91 0c 05 	lds	r24, 0x050C
    2244:	90 91 0d 05 	lds	r25, 0x050D
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	6a e0       	ldi	r22, 0x0A	; 10
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
    2252:	28 96       	adiw	r28, 0x08	; 8
    2254:	8f af       	std	Y+63, r24	; 0x3f
    2256:	28 97       	sbiw	r28, 0x08	; 8
    2258:	29 96       	adiw	r28, 0x09	; 9
    225a:	9f af       	std	Y+63, r25	; 0x3f
    225c:	29 97       	sbiw	r28, 0x09	; 9
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    225e:	20 91 0e 05 	lds	r18, 0x050E
    2262:	30 91 0f 05 	lds	r19, 0x050F
    2266:	29 96       	adiw	r28, 0x09	; 9
    2268:	6e ad       	ldd	r22, Y+62	; 0x3e
    226a:	7f ad       	ldd	r23, Y+63	; 0x3f
    226c:	29 97       	sbiw	r28, 0x09	; 9
    226e:	26 17       	cp	r18, r22
    2270:	37 07       	cpc	r19, r23
    2272:	71 f4       	brne	.+28     	; 0x2290 <__stack+0x91>
    2274:	83 b7       	in	r24, 0x33	; 51
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	83 bf       	out	0x33, r24	; 51
    227a:	88 95       	sleep
    227c:	83 b7       	in	r24, 0x33	; 51
    227e:	8e 7f       	andi	r24, 0xFE	; 254
    2280:	83 bf       	out	0x33, r24	; 51
    2282:	80 91 0e 05 	lds	r24, 0x050E
    2286:	90 91 0f 05 	lds	r25, 0x050F
    228a:	82 17       	cp	r24, r18
    228c:	93 07       	cpc	r25, r19
    228e:	91 f3       	breq	.-28     	; 0x2274 <__stack+0x75>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    2290:	20 91 0c 05 	lds	r18, 0x050C
    2294:	30 91 0d 05 	lds	r19, 0x050D
    2298:	c9 01       	movw	r24, r18
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	dc 01       	movw	r26, r24
    22a8:	aa 0f       	add	r26, r26
    22aa:	bb 1f       	adc	r27, r27
    22ac:	aa 0f       	add	r26, r26
    22ae:	bb 1f       	adc	r27, r27
    22b0:	aa 0f       	add	r26, r26
    22b2:	bb 1f       	adc	r27, r27
    22b4:	a8 0f       	add	r26, r24
    22b6:	b9 1f       	adc	r27, r25
    22b8:	a2 0f       	add	r26, r18
    22ba:	b3 1f       	adc	r27, r19
    22bc:	ae 5c       	subi	r26, 0xCE	; 206
    22be:	bd 4f       	sbci	r27, 0xFD	; 253
    22c0:	be ab       	std	Y+54, r27	; 0x36
    22c2:	ad ab       	std	Y+53, r26	; 0x35
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    22c4:	80 91 10 05 	lds	r24, 0x0510
    22c8:	90 91 11 05 	lds	r25, 0x0511
    22cc:	a0 91 12 05 	lds	r26, 0x0512
    22d0:	b0 91 13 05 	lds	r27, 0x0513
    22d4:	37 01       	movw	r6, r14
    22d6:	48 01       	movw	r8, r16
    22d8:	68 1a       	sub	r6, r24
    22da:	79 0a       	sbc	r7, r25
    22dc:	8a 0a       	sbc	r8, r26
    22de:	9b 0a       	sbc	r9, r27
    22e0:	97 fc       	sbrc	r9, 7
    22e2:	0a c3       	rjmp	.+1556   	; 0x28f8 <__stack+0x6f9>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    22e4:	c2 01       	movw	r24, r4
    22e6:	b1 01       	movw	r22, r2
    22e8:	a6 01       	movw	r20, r12
    22ea:	95 01       	movw	r18, r10
    22ec:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    22f0:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    22f4:	6d 87       	std	Y+13, r22	; 0x0d
    22f6:	7e 87       	std	Y+14, r23	; 0x0e
    22f8:	8f 87       	std	Y+15, r24	; 0x0f
    22fa:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    22fc:	6f a9       	ldd	r22, Y+55	; 0x37
    22fe:	78 ad       	ldd	r23, Y+56	; 0x38
    2300:	89 ad       	ldd	r24, Y+57	; 0x39
    2302:	9a ad       	ldd	r25, Y+58	; 0x3a
    2304:	27 96       	adiw	r28, 0x07	; 7
    2306:	2c ad       	ldd	r18, Y+60	; 0x3c
    2308:	3d ad       	ldd	r19, Y+61	; 0x3d
    230a:	4e ad       	ldd	r20, Y+62	; 0x3e
    230c:	5f ad       	ldd	r21, Y+63	; 0x3f
    230e:	27 97       	sbiw	r28, 0x07	; 7
    2310:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    2314:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    2318:	69 87       	std	Y+9, r22	; 0x09
    231a:	7a 87       	std	Y+10, r23	; 0x0a
    231c:	8b 87       	std	Y+11, r24	; 0x0b
    231e:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2320:	6b ad       	ldd	r22, Y+59	; 0x3b
    2322:	7c ad       	ldd	r23, Y+60	; 0x3c
    2324:	8d ad       	ldd	r24, Y+61	; 0x3d
    2326:	9e ad       	ldd	r25, Y+62	; 0x3e
    2328:	23 96       	adiw	r28, 0x03	; 3
    232a:	2c ad       	ldd	r18, Y+60	; 0x3c
    232c:	3d ad       	ldd	r19, Y+61	; 0x3d
    232e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2330:	5f ad       	ldd	r21, Y+63	; 0x3f
    2332:	23 97       	sbiw	r28, 0x03	; 3
    2334:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    2338:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    233c:	6d 83       	std	Y+5, r22	; 0x05
    233e:	7e 83       	std	Y+6, r23	; 0x06
    2340:	8f 83       	std	Y+7, r24	; 0x07
    2342:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    2344:	e9 82       	std	Y+1, r14	; 0x01
    2346:	fa 82       	std	Y+2, r15	; 0x02
    2348:	0b 83       	std	Y+3, r16	; 0x03
    234a:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    234c:	ed a9       	ldd	r30, Y+53	; 0x35
    234e:	fe a9       	ldd	r31, Y+54	; 0x36
    2350:	60 82       	st	Z, r6
    2352:	71 82       	std	Z+1, r7	; 0x01
    2354:	82 82       	std	Z+2, r8	; 0x02
    2356:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2358:	ad 80       	ldd	r10, Y+5	; 0x05
    235a:	be 80       	ldd	r11, Y+6	; 0x06
    235c:	cf 80       	ldd	r12, Y+7	; 0x07
    235e:	d8 84       	ldd	r13, Y+8	; 0x08
    2360:	80 91 14 05 	lds	r24, 0x0514
    2364:	90 91 15 05 	lds	r25, 0x0515
    2368:	a0 91 16 05 	lds	r26, 0x0516
    236c:	b0 91 17 05 	lds	r27, 0x0517
    2370:	a6 01       	movw	r20, r12
    2372:	95 01       	movw	r18, r10
    2374:	28 1b       	sub	r18, r24
    2376:	39 0b       	sbc	r19, r25
    2378:	4a 0b       	sbc	r20, r26
    237a:	5b 0b       	sbc	r21, r27
    237c:	da 01       	movw	r26, r20
    237e:	c9 01       	movw	r24, r18
    2380:	57 fd       	sbrc	r21, 7
    2382:	cb c2       	rjmp	.+1430   	; 0x291a <__stack+0x71b>
    2384:	ed a9       	ldd	r30, Y+53	; 0x35
    2386:	fe a9       	ldd	r31, Y+54	; 0x36
    2388:	84 83       	std	Z+4, r24	; 0x04
    238a:	95 83       	std	Z+5, r25	; 0x05
    238c:	a6 83       	std	Z+6, r26	; 0x06
    238e:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2390:	20 90 18 05 	lds	r2, 0x0518
    2394:	30 90 19 05 	lds	r3, 0x0519
    2398:	40 90 1a 05 	lds	r4, 0x051A
    239c:	50 90 1b 05 	lds	r5, 0x051B
    23a0:	69 84       	ldd	r6, Y+9	; 0x09
    23a2:	7a 84       	ldd	r7, Y+10	; 0x0a
    23a4:	8b 84       	ldd	r8, Y+11	; 0x0b
    23a6:	9c 84       	ldd	r9, Y+12	; 0x0c
    23a8:	d4 01       	movw	r26, r8
    23aa:	c3 01       	movw	r24, r6
    23ac:	82 19       	sub	r24, r2
    23ae:	93 09       	sbc	r25, r3
    23b0:	a4 09       	sbc	r26, r4
    23b2:	b5 09       	sbc	r27, r5
    23b4:	b7 fd       	sbrc	r27, 7
    23b6:	a9 c2       	rjmp	.+1362   	; 0x290a <__stack+0x70b>
    23b8:	ed a9       	ldd	r30, Y+53	; 0x35
    23ba:	fe a9       	ldd	r31, Y+54	; 0x36
    23bc:	80 87       	std	Z+8, r24	; 0x08
    23be:	91 87       	std	Z+9, r25	; 0x09
    23c0:	a2 87       	std	Z+10, r26	; 0x0a
    23c2:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    23c4:	20 91 1c 05 	lds	r18, 0x051C
    23c8:	30 91 1d 05 	lds	r19, 0x051D
    23cc:	40 91 1e 05 	lds	r20, 0x051E
    23d0:	50 91 1f 05 	lds	r21, 0x051F
    23d4:	29 8b       	std	Y+17, r18	; 0x11
    23d6:	3a 8b       	std	Y+18, r19	; 0x12
    23d8:	4b 8b       	std	Y+19, r20	; 0x13
    23da:	5c 8b       	std	Y+20, r21	; 0x14
    23dc:	4d 85       	ldd	r20, Y+13	; 0x0d
    23de:	5e 85       	ldd	r21, Y+14	; 0x0e
    23e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    23e2:	78 89       	ldd	r23, Y+16	; 0x10
    23e4:	2d 96       	adiw	r28, 0x0d	; 13
    23e6:	4c af       	std	Y+60, r20	; 0x3c
    23e8:	5d af       	std	Y+61, r21	; 0x3d
    23ea:	6e af       	std	Y+62, r22	; 0x3e
    23ec:	7f af       	std	Y+63, r23	; 0x3f
    23ee:	2d 97       	sbiw	r28, 0x0d	; 13
    23f0:	7a 01       	movw	r14, r20
    23f2:	8b 01       	movw	r16, r22
    23f4:	69 89       	ldd	r22, Y+17	; 0x11
    23f6:	7a 89       	ldd	r23, Y+18	; 0x12
    23f8:	8b 89       	ldd	r24, Y+19	; 0x13
    23fa:	9c 89       	ldd	r25, Y+20	; 0x14
    23fc:	e6 1a       	sub	r14, r22
    23fe:	f7 0a       	sbc	r15, r23
    2400:	08 0b       	sbc	r16, r24
    2402:	19 0b       	sbc	r17, r25
    2404:	17 fd       	sbrc	r17, 7
    2406:	6f c2       	rjmp	.+1246   	; 0x28e6 <__stack+0x6e7>
    2408:	ad a9       	ldd	r26, Y+53	; 0x35
    240a:	be a9       	ldd	r27, Y+54	; 0x36
    240c:	1c 96       	adiw	r26, 0x0c	; 12
    240e:	ed 92       	st	X+, r14
    2410:	fd 92       	st	X+, r15
    2412:	0d 93       	st	X+, r16
    2414:	1c 93       	st	X, r17
    2416:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    2418:	18 96       	adiw	r26, 0x08	; 8
    241a:	2d 91       	ld	r18, X+
    241c:	3d 91       	ld	r19, X+
    241e:	4d 91       	ld	r20, X+
    2420:	5c 91       	ld	r21, X
    2422:	1b 97       	sbiw	r26, 0x0b	; 11
    2424:	fd 01       	movw	r30, r26
    2426:	84 81       	ldd	r24, Z+4	; 0x04
    2428:	95 81       	ldd	r25, Z+5	; 0x05
    242a:	a6 81       	ldd	r26, Z+6	; 0x06
    242c:	b7 81       	ldd	r27, Z+7	; 0x07
    242e:	82 17       	cp	r24, r18
    2430:	93 07       	cpc	r25, r19
    2432:	a4 07       	cpc	r26, r20
    2434:	b5 07       	cpc	r27, r21
    2436:	48 f1       	brcs	.+82     	; 0x248a <__stack+0x28b>
    2438:	ed a9       	ldd	r30, Y+53	; 0x35
    243a:	fe a9       	ldd	r31, Y+54	; 0x36
    243c:	20 81       	ld	r18, Z
    243e:	31 81       	ldd	r19, Z+1	; 0x01
    2440:	42 81       	ldd	r20, Z+2	; 0x02
    2442:	53 81       	ldd	r21, Z+3	; 0x03
    2444:	82 17       	cp	r24, r18
    2446:	93 07       	cpc	r25, r19
    2448:	a4 07       	cpc	r26, r20
    244a:	b5 07       	cpc	r27, r21
    244c:	b0 f0       	brcs	.+44     	; 0x247a <__stack+0x27b>
    244e:	8e 15       	cp	r24, r14
    2450:	9f 05       	cpc	r25, r15
    2452:	a0 07       	cpc	r26, r16
    2454:	b1 07       	cpc	r27, r17
    2456:	70 f0       	brcs	.+28     	; 0x2474 <__stack+0x275>
    2458:	ed a9       	ldd	r30, Y+53	; 0x35
    245a:	fe a9       	ldd	r31, Y+54	; 0x36
    245c:	81 8b       	std	Z+17, r24	; 0x11
    245e:	92 8b       	std	Z+18, r25	; 0x12
    2460:	a3 8b       	std	Z+19, r26	; 0x13
    2462:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	a1 05       	cpc	r26, r1
    2468:	b1 05       	cpc	r27, r1
    246a:	91 f4       	brne	.+36     	; 0x2490 <__stack+0x291>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
#endif

// needs for GUI ACK
 	ackHost = 'X';
    246c:	88 e5       	ldi	r24, 0x58	; 88
    246e:	80 93 54 05 	sts	0x0554, r24
    2472:	9c ce       	rjmp	.-712    	; 0x21ac <plan_buffer_line+0x5a>
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    2474:	d8 01       	movw	r26, r16
    2476:	c7 01       	movw	r24, r14
    2478:	ef cf       	rjmp	.-34     	; 0x2458 <__stack+0x259>
    247a:	da 01       	movw	r26, r20
    247c:	c9 01       	movw	r24, r18
    247e:	8e 15       	cp	r24, r14
    2480:	9f 05       	cpc	r25, r15
    2482:	a0 07       	cpc	r26, r16
    2484:	b1 07       	cpc	r27, r17
    2486:	40 f7       	brcc	.-48     	; 0x2458 <__stack+0x259>
    2488:	f5 cf       	rjmp	.-22     	; 0x2474 <__stack+0x275>
    248a:	da 01       	movw	r26, r20
    248c:	c9 01       	movw	r24, r18
    248e:	d4 cf       	rjmp	.-88     	; 0x2438 <__stack+0x239>
// needs for GUI ACK
 	ackHost = 'X';
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2490:	29 81       	ldd	r18, Y+1	; 0x01
    2492:	3a 81       	ldd	r19, Y+2	; 0x02
    2494:	4b 81       	ldd	r20, Y+3	; 0x03
    2496:	5c 81       	ldd	r21, Y+4	; 0x04
    2498:	2d 8f       	std	Y+29, r18	; 0x1d
    249a:	3e 8f       	std	Y+30, r19	; 0x1e
    249c:	4f 8f       	std	Y+31, r20	; 0x1f
    249e:	58 a3       	std	Y+32, r21	; 0x20
    24a0:	80 91 10 05 	lds	r24, 0x0510
    24a4:	90 91 11 05 	lds	r25, 0x0511
    24a8:	a0 91 12 05 	lds	r26, 0x0512
    24ac:	b0 91 13 05 	lds	r27, 0x0513
    24b0:	28 1b       	sub	r18, r24
    24b2:	39 0b       	sbc	r19, r25
    24b4:	4a 0b       	sbc	r20, r26
    24b6:	5b 0b       	sbc	r21, r27
    24b8:	ca 01       	movw	r24, r20
    24ba:	b9 01       	movw	r22, r18
    24bc:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    24c0:	20 91 95 06 	lds	r18, 0x0695
    24c4:	30 91 96 06 	lds	r19, 0x0696
    24c8:	40 91 97 06 	lds	r20, 0x0697
    24cc:	50 91 98 06 	lds	r21, 0x0698
    24d0:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    24d4:	69 ab       	std	Y+49, r22	; 0x31
    24d6:	7a ab       	std	Y+50, r23	; 0x32
    24d8:	8b ab       	std	Y+51, r24	; 0x33
    24da:	9c ab       	std	Y+52, r25	; 0x34
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    24dc:	a9 a2       	std	Y+33, r10	; 0x21
    24de:	ba a2       	std	Y+34, r11	; 0x22
    24e0:	cb a2       	std	Y+35, r12	; 0x23
    24e2:	dc a2       	std	Y+36, r13	; 0x24
    24e4:	80 91 14 05 	lds	r24, 0x0514
    24e8:	90 91 15 05 	lds	r25, 0x0515
    24ec:	a0 91 16 05 	lds	r26, 0x0516
    24f0:	b0 91 17 05 	lds	r27, 0x0517
    24f4:	a6 01       	movw	r20, r12
    24f6:	95 01       	movw	r18, r10
    24f8:	28 1b       	sub	r18, r24
    24fa:	39 0b       	sbc	r19, r25
    24fc:	4a 0b       	sbc	r20, r26
    24fe:	5b 0b       	sbc	r21, r27
    2500:	ca 01       	movw	r24, r20
    2502:	b9 01       	movw	r22, r18
    2504:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    2508:	20 91 99 06 	lds	r18, 0x0699
    250c:	30 91 9a 06 	lds	r19, 0x069A
    2510:	40 91 9b 06 	lds	r20, 0x069B
    2514:	50 91 9c 06 	lds	r21, 0x069C
    2518:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    251c:	6d a7       	std	Y+45, r22	; 0x2d
    251e:	7e a7       	std	Y+46, r23	; 0x2e
    2520:	8f a7       	std	Y+47, r24	; 0x2f
    2522:	98 ab       	std	Y+48, r25	; 0x30
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    2524:	69 8e       	std	Y+25, r6	; 0x19
    2526:	7a 8e       	std	Y+26, r7	; 0x1a
    2528:	8b 8e       	std	Y+27, r8	; 0x1b
    252a:	9c 8e       	std	Y+28, r9	; 0x1c
    252c:	c4 01       	movw	r24, r8
    252e:	b3 01       	movw	r22, r6
    2530:	62 19       	sub	r22, r2
    2532:	73 09       	sbc	r23, r3
    2534:	84 09       	sbc	r24, r4
    2536:	95 09       	sbc	r25, r5
    2538:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    253c:	20 91 9d 06 	lds	r18, 0x069D
    2540:	30 91 9e 06 	lds	r19, 0x069E
    2544:	40 91 9f 06 	lds	r20, 0x069F
    2548:	50 91 a0 06 	lds	r21, 0x06A0
    254c:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    2550:	69 a7       	std	Y+41, r22	; 0x29
    2552:	7a a7       	std	Y+42, r23	; 0x2a
    2554:	8b a7       	std	Y+43, r24	; 0x2b
    2556:	9c a7       	std	Y+44, r25	; 0x2c
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2558:	2d 96       	adiw	r28, 0x0d	; 13
    255a:	4c ad       	ldd	r20, Y+60	; 0x3c
    255c:	5d ad       	ldd	r21, Y+61	; 0x3d
    255e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2560:	7f ad       	ldd	r23, Y+63	; 0x3f
    2562:	2d 97       	sbiw	r28, 0x0d	; 13
    2564:	4d 8b       	std	Y+21, r20	; 0x15
    2566:	5e 8b       	std	Y+22, r21	; 0x16
    2568:	6f 8b       	std	Y+23, r22	; 0x17
    256a:	78 8f       	std	Y+24, r23	; 0x18
    256c:	cb 01       	movw	r24, r22
    256e:	ba 01       	movw	r22, r20
    2570:	29 89       	ldd	r18, Y+17	; 0x11
    2572:	3a 89       	ldd	r19, Y+18	; 0x12
    2574:	4b 89       	ldd	r20, Y+19	; 0x13
    2576:	5c 89       	ldd	r21, Y+20	; 0x14
    2578:	62 1b       	sub	r22, r18
    257a:	73 0b       	sbc	r23, r19
    257c:	84 0b       	sbc	r24, r20
    257e:	95 0b       	sbc	r25, r21
    2580:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    2584:	20 91 a1 06 	lds	r18, 0x06A1
    2588:	30 91 a2 06 	lds	r19, 0x06A2
    258c:	40 91 a3 06 	lds	r20, 0x06A3
    2590:	50 91 a4 06 	lds	r21, 0x06A4
    2594:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    2598:	6d a3       	std	Y+37, r22	; 0x25
    259a:	7e a3       	std	Y+38, r23	; 0x26
    259c:	8f a3       	std	Y+39, r24	; 0x27
    259e:	98 a7       	std	Y+40, r25	; 0x28
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    25a0:	69 a9       	ldd	r22, Y+49	; 0x31
    25a2:	7a a9       	ldd	r23, Y+50	; 0x32
    25a4:	8b a9       	ldd	r24, Y+51	; 0x33
    25a6:	9c a9       	ldd	r25, Y+52	; 0x34
    25a8:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <square>
    25ac:	3b 01       	movw	r6, r22
    25ae:	4c 01       	movw	r8, r24
    25b0:	6d a5       	ldd	r22, Y+45	; 0x2d
    25b2:	7e a5       	ldd	r23, Y+46	; 0x2e
    25b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b6:	98 a9       	ldd	r25, Y+48	; 0x30
    25b8:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <square>
    25bc:	7b 01       	movw	r14, r22
    25be:	8c 01       	movw	r16, r24
    25c0:	69 a5       	ldd	r22, Y+41	; 0x29
    25c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    25c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    25c8:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <square>
    25cc:	5b 01       	movw	r10, r22
    25ce:	6c 01       	movw	r12, r24
    25d0:	6d a1       	ldd	r22, Y+37	; 0x25
    25d2:	7e a1       	ldd	r23, Y+38	; 0x26
    25d4:	8f a1       	ldd	r24, Y+39	; 0x27
    25d6:	98 a5       	ldd	r25, Y+40	; 0x28
    25d8:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <square>
    25dc:	1b 01       	movw	r2, r22
    25de:	2c 01       	movw	r4, r24
    25e0:	c4 01       	movw	r24, r8
    25e2:	b3 01       	movw	r22, r6
    25e4:	a8 01       	movw	r20, r16
    25e6:	97 01       	movw	r18, r14
    25e8:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    25ec:	a6 01       	movw	r20, r12
    25ee:	95 01       	movw	r18, r10
    25f0:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    25f4:	a2 01       	movw	r20, r4
    25f6:	91 01       	movw	r18, r2
    25f8:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__addsf3>
    25fc:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <sqrt>
    2600:	ad a9       	ldd	r26, Y+53	; 0x35
    2602:	be a9       	ldd	r27, Y+54	; 0x36
    2604:	9d 96       	adiw	r26, 0x2d	; 45
    2606:	6d 93       	st	X+, r22
    2608:	7d 93       	st	X+, r23
    260a:	8d 93       	st	X+, r24
    260c:	9c 93       	st	X, r25
    260e:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    2610:	a8 96       	adiw	r28, 0x28	; 40
    2612:	ee ad       	ldd	r30, Y+62	; 0x3e
    2614:	ff ad       	ldd	r31, Y+63	; 0x3f
    2616:	a8 97       	sbiw	r28, 0x28	; 40
    2618:	ef 2b       	or	r30, r31
    261a:	09 f0       	breq	.+2      	; 0x261e <__stack+0x41f>
    261c:	86 c1       	rjmp	.+780    	; 0x292a <__stack+0x72b>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    261e:	a6 96       	adiw	r28, 0x26	; 38
    2620:	2c ad       	ldd	r18, Y+60	; 0x3c
    2622:	3d ad       	ldd	r19, Y+61	; 0x3d
    2624:	4e ad       	ldd	r20, Y+62	; 0x3e
    2626:	5f ad       	ldd	r21, Y+63	; 0x3f
    2628:	a6 97       	sbiw	r28, 0x26	; 38
    262a:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	34 e2       	ldi	r19, 0x24	; 36
    2632:	44 e7       	ldi	r20, 0x74	; 116
    2634:	59 e4       	ldi	r21, 0x49	; 73
    2636:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    263a:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <lround>
    263e:	ac 01       	movw	r20, r24
    2640:	cb 01       	movw	r24, r22
    2642:	da 01       	movw	r26, r20
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2648:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <__floatunsisf>
    264c:	9b 01       	movw	r18, r22
    264e:	ac 01       	movw	r20, r24
    2650:	60 ec       	ldi	r22, 0xC0	; 192
    2652:	71 ee       	ldi	r23, 0xE1	; 225
    2654:	84 e6       	ldi	r24, 0x64	; 100
    2656:	9c e4       	ldi	r25, 0x4C	; 76
    2658:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    265c:	7b 01       	movw	r14, r22
    265e:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2660:	69 a9       	ldd	r22, Y+49	; 0x31
    2662:	7a a9       	ldd	r23, Y+50	; 0x32
    2664:	8b a9       	ldd	r24, Y+51	; 0x33
    2666:	9c a9       	ldd	r25, Y+52	; 0x34
    2668:	a8 01       	movw	r20, r16
    266a:	97 01       	movw	r18, r14
    266c:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    2670:	ad a9       	ldd	r26, Y+53	; 0x35
    2672:	be a9       	ldd	r27, Y+54	; 0x36
    2674:	59 96       	adiw	r26, 0x19	; 25
    2676:	6d 93       	st	X+, r22
    2678:	7d 93       	st	X+, r23
    267a:	8d 93       	st	X+, r24
    267c:	9c 93       	st	X, r25
    267e:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    2680:	6d a5       	ldd	r22, Y+45	; 0x2d
    2682:	7e a5       	ldd	r23, Y+46	; 0x2e
    2684:	8f a5       	ldd	r24, Y+47	; 0x2f
    2686:	98 a9       	ldd	r25, Y+48	; 0x30
    2688:	a8 01       	movw	r20, r16
    268a:	97 01       	movw	r18, r14
    268c:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    2690:	ed a9       	ldd	r30, Y+53	; 0x35
    2692:	fe a9       	ldd	r31, Y+54	; 0x36
    2694:	65 8f       	std	Z+29, r22	; 0x1d
    2696:	76 8f       	std	Z+30, r23	; 0x1e
    2698:	87 8f       	std	Z+31, r24	; 0x1f
    269a:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    269c:	69 a5       	ldd	r22, Y+41	; 0x29
    269e:	7a a5       	ldd	r23, Y+42	; 0x2a
    26a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26a4:	a8 01       	movw	r20, r16
    26a6:	97 01       	movw	r18, r14
    26a8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    26ac:	ad a9       	ldd	r26, Y+53	; 0x35
    26ae:	be a9       	ldd	r27, Y+54	; 0x36
    26b0:	91 96       	adiw	r26, 0x21	; 33
    26b2:	6d 93       	st	X+, r22
    26b4:	7d 93       	st	X+, r23
    26b6:	8d 93       	st	X+, r24
    26b8:	9c 93       	st	X, r25
    26ba:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    26bc:	6d a1       	ldd	r22, Y+37	; 0x25
    26be:	7e a1       	ldd	r23, Y+38	; 0x26
    26c0:	8f a1       	ldd	r24, Y+39	; 0x27
    26c2:	98 a5       	ldd	r25, Y+40	; 0x28
    26c4:	a8 01       	movw	r20, r16
    26c6:	97 01       	movw	r18, r14
    26c8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    26cc:	ed a9       	ldd	r30, Y+53	; 0x35
    26ce:	fe a9       	ldd	r31, Y+54	; 0x36
    26d0:	65 a3       	std	Z+37, r22	; 0x25
    26d2:	76 a3       	std	Z+38, r23	; 0x26
    26d4:	87 a3       	std	Z+39, r24	; 0x27
    26d6:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    26d8:	65 a5       	ldd	r22, Z+45	; 0x2d
    26da:	76 a5       	ldd	r23, Z+46	; 0x2e
    26dc:	87 a5       	ldd	r24, Z+47	; 0x2f
    26de:	90 a9       	ldd	r25, Z+48	; 0x30
    26e0:	a8 01       	movw	r20, r16
    26e2:	97 01       	movw	r18, r14
    26e4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    26e8:	ad a9       	ldd	r26, Y+53	; 0x35
    26ea:	be a9       	ldd	r27, Y+54	; 0x36
    26ec:	99 96       	adiw	r26, 0x29	; 41
    26ee:	6d 93       	st	X+, r22
    26f0:	7d 93       	st	X+, r23
    26f2:	8d 93       	st	X+, r24
    26f4:	9c 93       	st	X, r25
    26f6:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    26f8:	51 96       	adiw	r26, 0x11	; 17
    26fa:	6d 91       	ld	r22, X+
    26fc:	7d 91       	ld	r23, X+
    26fe:	8d 91       	ld	r24, X+
    2700:	9c 91       	ld	r25, X
    2702:	54 97       	sbiw	r26, 0x14	; 20
    2704:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    2708:	5b 01       	movw	r10, r22
    270a:	6c 01       	movw	r12, r24
    270c:	a8 01       	movw	r20, r16
    270e:	97 01       	movw	r18, r14
    2710:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    2714:	0e 94 2d 2c 	call	0x585a	; 0x585a <ceil>
    2718:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
    271c:	3b 01       	movw	r6, r22
    271e:	4c 01       	movw	r8, r24
    2720:	ed a9       	ldd	r30, Y+53	; 0x35
    2722:	fe a9       	ldd	r31, Y+54	; 0x36
    2724:	65 8b       	std	Z+21, r22	; 0x15
    2726:	76 8b       	std	Z+22, r23	; 0x16
    2728:	87 8b       	std	Z+23, r24	; 0x17
    272a:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 e0       	ldi	r26, 0x00	; 0
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	81 ab       	std	Z+49, r24	; 0x31
    2736:	92 ab       	std	Z+50, r25	; 0x32
    2738:	a3 ab       	std	Z+51, r26	; 0x33
    273a:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    273c:	60 91 b3 06 	lds	r22, 0x06B3
    2740:	70 91 b4 06 	lds	r23, 0x06B4
    2744:	80 91 b5 06 	lds	r24, 0x06B5
    2748:	90 91 b6 06 	lds	r25, 0x06B6
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e7       	ldi	r20, 0x70	; 112
    2752:	52 e4       	ldi	r21, 0x42	; 66
    2754:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	52 e4       	ldi	r21, 0x42	; 66
    2760:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    2764:	7b 01       	movw	r14, r22
    2766:	8c 01       	movw	r16, r24
    2768:	ad a9       	ldd	r26, Y+53	; 0x35
    276a:	be a9       	ldd	r27, Y+54	; 0x36
    276c:	9d 96       	adiw	r26, 0x2d	; 45
    276e:	6d 91       	ld	r22, X+
    2770:	7d 91       	ld	r23, X+
    2772:	8d 91       	ld	r24, X+
    2774:	9c 91       	ld	r25, X
    2776:	d0 97       	sbiw	r26, 0x30	; 48
    2778:	a6 01       	movw	r20, r12
    277a:	95 01       	movw	r18, r10
    277c:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    2780:	9b 01       	movw	r18, r22
    2782:	ac 01       	movw	r20, r24
    2784:	c8 01       	movw	r24, r16
    2786:	b7 01       	movw	r22, r14
    2788:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    278c:	0e 94 2d 2c 	call	0x585a	; 0x585a <ceil>
    2790:	0d a9       	ldd	r16, Y+53	; 0x35
    2792:	1e a9       	ldd	r17, Y+54	; 0x36
    2794:	03 5c       	subi	r16, 0xC3	; 195
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
    279c:	f8 01       	movw	r30, r16
    279e:	60 83       	st	Z, r22
    27a0:	71 83       	std	Z+1, r23	; 0x01
    27a2:	82 83       	std	Z+2, r24	; 0x02
    27a4:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    27a6:	20 91 20 05 	lds	r18, 0x0520
    27aa:	22 23       	and	r18, r18
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <__stack+0x5b1>
    27ae:	ca c0       	rjmp	.+404    	; 0x2944 <__stack+0x745>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    27b0:	ad a9       	ldd	r26, Y+53	; 0x35
    27b2:	be a9       	ldd	r27, Y+54	; 0x36
    27b4:	d5 96       	adiw	r26, 0x35	; 53
    27b6:	6d 92       	st	X+, r6
    27b8:	7d 92       	st	X+, r7
    27ba:	8d 92       	st	X+, r8
    27bc:	9c 92       	st	X, r9
    27be:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    27c0:	fd 01       	movw	r30, r26
    27c2:	61 ae       	std	Z+57, r6	; 0x39
    27c4:	72 ae       	std	Z+58, r7	; 0x3a
    27c6:	83 ae       	std	Z+59, r8	; 0x3b
    27c8:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    27ca:	ef 5b       	subi	r30, 0xBF	; 191
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	10 82       	st	Z, r1
    27d0:	11 82       	std	Z+1, r1	; 0x01
    27d2:	12 82       	std	Z+2, r1	; 0x02
    27d4:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    27d6:	ad 01       	movw	r20, r26
    27d8:	4b 5b       	subi	r20, 0xBB	; 187
    27da:	5f 4f       	sbci	r21, 0xFF	; 255
    27dc:	fd 01       	movw	r30, r26
    27de:	81 89       	ldd	r24, Z+17	; 0x11
    27e0:	92 89       	ldd	r25, Z+18	; 0x12
    27e2:	a3 89       	ldd	r26, Z+19	; 0x13
    27e4:	b4 89       	ldd	r27, Z+20	; 0x14
    27e6:	fa 01       	movw	r30, r20
    27e8:	80 83       	st	Z, r24
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	a2 83       	std	Z+2, r26	; 0x02
    27ee:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    27f0:	d8 01       	movw	r26, r16
    27f2:	1d 92       	st	X+, r1
    27f4:	1d 92       	st	X+, r1
    27f6:	1d 92       	st	X+, r1
    27f8:	1c 92       	st	X, r1
    27fa:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    27fc:	ed a9       	ldd	r30, Y+53	; 0x35
    27fe:	fe a9       	ldd	r31, Y+54	; 0x36
    2800:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    2802:	80 91 10 05 	lds	r24, 0x0510
    2806:	90 91 11 05 	lds	r25, 0x0511
    280a:	a0 91 12 05 	lds	r26, 0x0512
    280e:	b0 91 13 05 	lds	r27, 0x0513
    2812:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2814:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2816:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2818:	78 a1       	ldd	r23, Y+32	; 0x20
    281a:	48 17       	cp	r20, r24
    281c:	59 07       	cpc	r21, r25
    281e:	6a 07       	cpc	r22, r26
    2820:	7b 07       	cpc	r23, r27
    2822:	14 f4       	brge	.+4      	; 0x2828 <__stack+0x629>
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2828:	80 91 14 05 	lds	r24, 0x0514
    282c:	90 91 15 05 	lds	r25, 0x0515
    2830:	a0 91 16 05 	lds	r26, 0x0516
    2834:	b0 91 17 05 	lds	r27, 0x0517
    2838:	49 a1       	ldd	r20, Y+33	; 0x21
    283a:	5a a1       	ldd	r21, Y+34	; 0x22
    283c:	6b a1       	ldd	r22, Y+35	; 0x23
    283e:	7c a1       	ldd	r23, Y+36	; 0x24
    2840:	48 17       	cp	r20, r24
    2842:	59 07       	cpc	r21, r25
    2844:	6a 07       	cpc	r22, r26
    2846:	7b 07       	cpc	r23, r27
    2848:	44 f4       	brge	.+16     	; 0x285a <__stack+0x65b>
    284a:	ad a9       	ldd	r26, Y+53	; 0x35
    284c:	be a9       	ldd	r27, Y+54	; 0x36
    284e:	50 96       	adiw	r26, 0x10	; 16
    2850:	8c 91       	ld	r24, X
    2852:	50 97       	sbiw	r26, 0x10	; 16
    2854:	88 60       	ori	r24, 0x08	; 8
    2856:	50 96       	adiw	r26, 0x10	; 16
    2858:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    285a:	80 91 18 05 	lds	r24, 0x0518
    285e:	90 91 19 05 	lds	r25, 0x0519
    2862:	a0 91 1a 05 	lds	r26, 0x051A
    2866:	b0 91 1b 05 	lds	r27, 0x051B
    286a:	49 8d       	ldd	r20, Y+25	; 0x19
    286c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    286e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2870:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2872:	48 17       	cp	r20, r24
    2874:	59 07       	cpc	r21, r25
    2876:	6a 07       	cpc	r22, r26
    2878:	7b 07       	cpc	r23, r27
    287a:	44 f4       	brge	.+16     	; 0x288c <__stack+0x68d>
    287c:	ad a9       	ldd	r26, Y+53	; 0x35
    287e:	be a9       	ldd	r27, Y+54	; 0x36
    2880:	50 96       	adiw	r26, 0x10	; 16
    2882:	8c 91       	ld	r24, X
    2884:	50 97       	sbiw	r26, 0x10	; 16
    2886:	80 64       	ori	r24, 0x40	; 64
    2888:	50 96       	adiw	r26, 0x10	; 16
    288a:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    288c:	4d 89       	ldd	r20, Y+21	; 0x15
    288e:	5e 89       	ldd	r21, Y+22	; 0x16
    2890:	6f 89       	ldd	r22, Y+23	; 0x17
    2892:	78 8d       	ldd	r23, Y+24	; 0x18
    2894:	89 89       	ldd	r24, Y+17	; 0x11
    2896:	9a 89       	ldd	r25, Y+18	; 0x12
    2898:	ab 89       	ldd	r26, Y+19	; 0x13
    289a:	bc 89       	ldd	r27, Y+20	; 0x14
    289c:	48 17       	cp	r20, r24
    289e:	59 07       	cpc	r21, r25
    28a0:	6a 07       	cpc	r22, r26
    28a2:	7b 07       	cpc	r23, r27
    28a4:	44 f4       	brge	.+16     	; 0x28b6 <__stack+0x6b7>
    28a6:	ad a9       	ldd	r26, Y+53	; 0x35
    28a8:	be a9       	ldd	r27, Y+54	; 0x36
    28aa:	50 96       	adiw	r26, 0x10	; 16
    28ac:	8c 91       	ld	r24, X
    28ae:	50 97       	sbiw	r26, 0x10	; 16
    28b0:	80 68       	ori	r24, 0x80	; 128
    28b2:	50 96       	adiw	r26, 0x10	; 16
    28b4:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    28b6:	29 96       	adiw	r28, 0x09	; 9
    28b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    28ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    28bc:	29 97       	sbiw	r28, 0x09	; 9
    28be:	f0 93 0d 05 	sts	0x050D, r31
    28c2:	e0 93 0c 05 	sts	0x050C, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    28c6:	a0 e1       	ldi	r26, 0x10	; 16
    28c8:	b5 e0       	ldi	r27, 0x05	; 5
    28ca:	fe 01       	movw	r30, r28
    28cc:	31 96       	adiw	r30, 0x01	; 1
    28ce:	80 e1       	ldi	r24, 0x10	; 16
    28d0:	01 90       	ld	r0, Z+
    28d2:	0d 92       	st	X+, r0
    28d4:	81 50       	subi	r24, 0x01	; 1
    28d6:	e1 f7       	brne	.-8      	; 0x28d0 <__stack+0x6d1>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    28d8:	22 23       	and	r18, r18
    28da:	11 f0       	breq	.+4      	; 0x28e0 <__stack+0x6e1>
    28dc:	0e 94 a2 10 	call	0x2144	; 0x2144 <planner_recalculate>
  st_wake_up();
    28e0:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <st_wake_up>
    28e4:	63 cc       	rjmp	.-1850   	; 0x21ac <plan_buffer_line+0x5a>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    28e6:	10 95       	com	r17
    28e8:	00 95       	com	r16
    28ea:	f0 94       	com	r15
    28ec:	e0 94       	com	r14
    28ee:	e1 1c       	adc	r14, r1
    28f0:	f1 1c       	adc	r15, r1
    28f2:	01 1d       	adc	r16, r1
    28f4:	11 1d       	adc	r17, r1
    28f6:	88 cd       	rjmp	.-1264   	; 0x2408 <__stack+0x209>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    28f8:	90 94       	com	r9
    28fa:	80 94       	com	r8
    28fc:	70 94       	com	r7
    28fe:	60 94       	com	r6
    2900:	61 1c       	adc	r6, r1
    2902:	71 1c       	adc	r7, r1
    2904:	81 1c       	adc	r8, r1
    2906:	91 1c       	adc	r9, r1
    2908:	ed cc       	rjmp	.-1574   	; 0x22e4 <__stack+0xe5>
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    290a:	b0 95       	com	r27
    290c:	a0 95       	com	r26
    290e:	90 95       	com	r25
    2910:	81 95       	neg	r24
    2912:	9f 4f       	sbci	r25, 0xFF	; 255
    2914:	af 4f       	sbci	r26, 0xFF	; 255
    2916:	bf 4f       	sbci	r27, 0xFF	; 255
    2918:	4f cd       	rjmp	.-1378   	; 0x23b8 <__stack+0x1b9>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    291a:	b0 95       	com	r27
    291c:	a0 95       	com	r26
    291e:	90 95       	com	r25
    2920:	81 95       	neg	r24
    2922:	9f 4f       	sbci	r25, 0xFF	; 255
    2924:	af 4f       	sbci	r26, 0xFF	; 255
    2926:	bf 4f       	sbci	r27, 0xFF	; 255
    2928:	2d cd       	rjmp	.-1446   	; 0x2384 <__stack+0x185>
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    292a:	60 ec       	ldi	r22, 0xC0	; 192
    292c:	71 ee       	ldi	r23, 0xE1	; 225
    292e:	84 e6       	ldi	r24, 0x64	; 100
    2930:	9c e4       	ldi	r25, 0x4C	; 76
    2932:	a6 96       	adiw	r28, 0x26	; 38
    2934:	2c ad       	ldd	r18, Y+60	; 0x3c
    2936:	3d ad       	ldd	r19, Y+61	; 0x3d
    2938:	4e ad       	ldd	r20, Y+62	; 0x3e
    293a:	5f ad       	ldd	r21, Y+63	; 0x3f
    293c:	a6 97       	sbiw	r28, 0x26	; 38
    293e:	0e 94 44 2c 	call	0x5888	; 0x5888 <__divsf3>
    2942:	7b ce       	rjmp	.-778    	; 0x263a <__stack+0x43b>
  block->rate_delta = ceil(
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    2944:	8d a9       	ldd	r24, Y+53	; 0x35
    2946:	9e a9       	ldd	r25, Y+54	; 0x36
    2948:	0e 94 8c 0b 	call	0x1718	; 0x1718 <factor_for_safe_speed>
    294c:	8b 01       	movw	r16, r22
    294e:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    2950:	8d a9       	ldd	r24, Y+53	; 0x35
    2952:	9e a9       	ldd	r25, Y+54	; 0x36
    2954:	b9 01       	movw	r22, r18
    2956:	a8 01       	movw	r20, r16
    2958:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <calculate_trapezoid_for_block>
    295c:	29 81       	ldd	r18, Y+1	; 0x01
    295e:	3a 81       	ldd	r19, Y+2	; 0x02
    2960:	4b 81       	ldd	r20, Y+3	; 0x03
    2962:	5c 81       	ldd	r21, Y+4	; 0x04
    2964:	2d 8f       	std	Y+29, r18	; 0x1d
    2966:	3e 8f       	std	Y+30, r19	; 0x1e
    2968:	4f 8f       	std	Y+31, r20	; 0x1f
    296a:	58 a3       	std	Y+32, r21	; 0x20
    296c:	4d 81       	ldd	r20, Y+5	; 0x05
    296e:	5e 81       	ldd	r21, Y+6	; 0x06
    2970:	6f 81       	ldd	r22, Y+7	; 0x07
    2972:	78 85       	ldd	r23, Y+8	; 0x08
    2974:	49 a3       	std	Y+33, r20	; 0x21
    2976:	5a a3       	std	Y+34, r21	; 0x22
    2978:	6b a3       	std	Y+35, r22	; 0x23
    297a:	7c a3       	std	Y+36, r23	; 0x24
    297c:	69 85       	ldd	r22, Y+9	; 0x09
    297e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2980:	8b 85       	ldd	r24, Y+11	; 0x0b
    2982:	9c 85       	ldd	r25, Y+12	; 0x0c
    2984:	69 8f       	std	Y+25, r22	; 0x19
    2986:	7a 8f       	std	Y+26, r23	; 0x1a
    2988:	8b 8f       	std	Y+27, r24	; 0x1b
    298a:	9c 8f       	std	Y+28, r25	; 0x1c
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	af 85       	ldd	r26, Y+15	; 0x0f
    2992:	b8 89       	ldd	r27, Y+16	; 0x10
    2994:	8d 8b       	std	Y+21, r24	; 0x15
    2996:	9e 8b       	std	Y+22, r25	; 0x16
    2998:	af 8b       	std	Y+23, r26	; 0x17
    299a:	b8 8f       	std	Y+24, r27	; 0x18
    299c:	20 91 1c 05 	lds	r18, 0x051C
    29a0:	30 91 1d 05 	lds	r19, 0x051D
    29a4:	40 91 1e 05 	lds	r20, 0x051E
    29a8:	50 91 1f 05 	lds	r21, 0x051F
    29ac:	29 8b       	std	Y+17, r18	; 0x11
    29ae:	3a 8b       	std	Y+18, r19	; 0x12
    29b0:	4b 8b       	std	Y+19, r20	; 0x13
    29b2:	5c 8b       	std	Y+20, r21	; 0x14
    29b4:	20 91 20 05 	lds	r18, 0x0520
    29b8:	21 cf       	rjmp	.-446    	; 0x27fc <__stack+0x5fd>

000029ba <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    29be:	15 e4       	ldi	r17, 0x45	; 69
		case GCSTATUS_OK:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("\nGCSTATUS_OK\n")); 
#endif
			// ack OK
			ackHost = 'O';
    29c0:	0f e4       	ldi	r16, 0x4F	; 79

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    29c2:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <serialRead>
    29c6:	98 2f       	mov	r25, r24
    29c8:	8f 3f       	cpi	r24, 0xFF	; 255
    29ca:	e1 f0       	breq	.+56     	; 0x2a04 <sp_process+0x4a>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    29cc:	20 91 53 05 	lds	r18, 0x0553
    29d0:	22 23       	and	r18, r18
    29d2:	21 f0       	breq	.+8      	; 0x29dc <sp_process+0x22>
    29d4:	9a 30       	cpi	r25, 0x0A	; 10
    29d6:	c9 f0       	breq	.+50     	; 0x2a0a <sp_process+0x50>
    29d8:	9d 30       	cpi	r25, 0x0D	; 13
    29da:	b9 f0       	breq	.+46     	; 0x2a0a <sp_process+0x50>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    29dc:	91 32       	cpi	r25, 0x21	; 33
    29de:	8c f3       	brlt	.-30     	; 0x29c2 <sp_process+0x8>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    29e0:	89 2f       	mov	r24, r25
    29e2:	81 56       	subi	r24, 0x61	; 97
    29e4:	8a 31       	cpi	r24, 0x1A	; 26
    29e6:	68 f5       	brcc	.+90     	; 0x2a42 <sp_process+0x88>
      line[char_counter++] = c-'a'+'A';
    29e8:	e2 2f       	mov	r30, r18
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	ef 5d       	subi	r30, 0xDF	; 223
    29ee:	fa 4f       	sbci	r31, 0xFA	; 250
    29f0:	90 52       	subi	r25, 0x20	; 32
    29f2:	90 83       	st	Z, r25
    29f4:	2f 5f       	subi	r18, 0xFF	; 255
    29f6:	20 93 53 05 	sts	0x0553, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    29fa:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <serialRead>
    29fe:	98 2f       	mov	r25, r24
    2a00:	8f 3f       	cpi	r24, 0xFF	; 255
    2a02:	21 f7       	brne	.-56     	; 0x29cc <sp_process+0x12>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    2a0a:	e2 2f       	mov	r30, r18
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	ef 5d       	subi	r30, 0xDF	; 223
    2a10:	fa 4f       	sbci	r31, 0xFA	; 250
    2a12:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    2a14:	81 e2       	ldi	r24, 0x21	; 33
    2a16:	95 e0       	ldi	r25, 0x05	; 5
    2a18:	0e 94 88 05 	call	0xb10	; 0xb10 <gc_execute_line>
    2a1c:	98 2f       	mov	r25, r24

// this needs to be fixed so it can reply correctly
static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    2a1e:	80 91 55 05 	lds	r24, 0x0555
    2a22:	88 23       	and	r24, r24
    2a24:	b9 f0       	breq	.+46     	; 0x2a54 <sp_process+0x9a>
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    2a26:	10 93 54 05 	sts	0x0554, r17

	switch(status_code) {          
    2a2a:	94 30       	cpi	r25, 0x04	; 4
    2a2c:	48 f5       	brcc	.+82     	; 0x2a80 <sp_process+0xc6>
    2a2e:	91 30       	cpi	r25, 0x01	; 1
    2a30:	18 f0       	brcs	.+6      	; 0x2a38 <sp_process+0x7e>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a32:	10 92 53 05 	sts	0x0553, r1
    2a36:	c5 cf       	rjmp	.-118    	; 0x29c2 <sp_process+0x8>
		case GCSTATUS_OK:
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("\nGCSTATUS_OK\n")); 
#endif
			// ack OK
			ackHost = 'O';
    2a38:	00 93 54 05 	sts	0x0554, r16
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a3c:	10 92 53 05 	sts	0x0553, r1
    2a40:	c0 cf       	rjmp	.-128    	; 0x29c2 <sp_process+0x8>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    2a42:	e2 2f       	mov	r30, r18
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	ef 5d       	subi	r30, 0xDF	; 223
    2a48:	fa 4f       	sbci	r31, 0xFA	; 250
    2a4a:	90 83       	st	Z, r25
    2a4c:	2f 5f       	subi	r18, 0xFF	; 255
    2a4e:	20 93 53 05 	sts	0x0553, r18
    2a52:	b7 cf       	rjmp	.-146    	; 0x29c2 <sp_process+0x8>
		status_code = GCSTATUS_NOT_HOMED;
	}

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';
    2a54:	10 93 54 05 	sts	0x0554, r17


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {

		vacuum(0);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
		head_down(0);
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
		atc_fire(0);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    2a70:	10 92 55 05 	sts	0x0555, r1

		// stops all but home
		set_busy(TRUE);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a7a:	10 92 53 05 	sts	0x0553, r1
    2a7e:	a1 cf       	rjmp	.-190    	; 0x29c2 <sp_process+0x8>

	// what if ackHost is already set to something ?
	// ack ERR
	ackHost = 'E';

	switch(status_code) {          
    2a80:	96 30       	cpi	r25, 0x06	; 6
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <sp_process+0xd0>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    2a84:	99 23       	and	r25, r25
    2a86:	a9 f2       	breq	.-86     	; 0x2a32 <sp_process+0x78>
    2a88:	e7 cf       	rjmp	.-50     	; 0x2a58 <sp_process+0x9e>
#endif
			break;
		case GCSTATUS_NO_ACK:

			// no ACK
			ackHost = 0;
    2a8a:	10 92 54 05 	sts	0x0554, r1
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    2a8e:	10 92 53 05 	sts	0x0553, r1
    2a92:	97 cf       	rjmp	.-210    	; 0x29c2 <sp_process+0x8>

00002a94 <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	76 e9       	ldi	r23, 0x96	; 150
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <beginSerial>
}
    2aa0:	08 95       	ret

00002aa2 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	a0 e2       	ldi	r26, 0x20	; 32
    2aa8:	b2 e4       	ldi	r27, 0x42	; 66
    2aaa:	80 93 95 06 	sts	0x0695, r24
    2aae:	90 93 96 06 	sts	0x0696, r25
    2ab2:	a0 93 97 06 	sts	0x0697, r26
    2ab6:	b0 93 98 06 	sts	0x0698, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2aba:	80 93 99 06 	sts	0x0699, r24
    2abe:	90 93 9a 06 	sts	0x069A, r25
    2ac2:	a0 93 9b 06 	sts	0x069B, r26
    2ac6:	b0 93 9c 06 	sts	0x069C, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2aca:	80 93 9d 06 	sts	0x069D, r24
    2ace:	90 93 9e 06 	sts	0x069E, r25
    2ad2:	a0 93 9f 06 	sts	0x069F, r26
    2ad6:	b0 93 a0 06 	sts	0x06A0, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2ada:	80 93 a1 06 	sts	0x06A1, r24
    2ade:	90 93 a2 06 	sts	0x06A2, r25
    2ae2:	a0 93 a3 06 	sts	0x06A3, r26
    2ae6:	b0 93 a4 06 	sts	0x06A4, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2aea:	86 e0       	ldi	r24, 0x06	; 6
    2aec:	80 93 a6 06 	sts	0x06A6, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	a6 e9       	ldi	r26, 0x96	; 150
    2af6:	b5 e4       	ldi	r27, 0x45	; 69
    2af8:	80 93 a7 06 	sts	0x06A7, r24
    2afc:	90 93 a8 06 	sts	0x06A8, r25
    2b00:	a0 93 a9 06 	sts	0x06A9, r26
    2b04:	b0 93 aa 06 	sts	0x06AA, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 ef       	ldi	r26, 0xF0	; 240
    2b0e:	b3 e4       	ldi	r27, 0x43	; 67
    2b10:	80 93 ab 06 	sts	0x06AB, r24
    2b14:	90 93 ac 06 	sts	0x06AC, r25
    2b18:	a0 93 ad 06 	sts	0x06AD, r26
    2b1c:	b0 93 ae 06 	sts	0x06AE, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a0 e4       	ldi	r26, 0x40	; 64
    2b26:	b2 e4       	ldi	r27, 0x42	; 66
    2b28:	80 93 b3 06 	sts	0x06B3, r24
    2b2c:	90 93 b4 06 	sts	0x06B4, r25
    2b30:	a0 93 b5 06 	sts	0x06B5, r26
    2b34:	b0 93 b6 06 	sts	0x06B6, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2b38:	8d ec       	ldi	r24, 0xCD	; 205
    2b3a:	9c ec       	ldi	r25, 0xCC	; 204
    2b3c:	ac ec       	ldi	r26, 0xCC	; 204
    2b3e:	bd e3       	ldi	r27, 0x3D	; 61
    2b40:	80 93 af 06 	sts	0x06AF, r24
    2b44:	90 93 b0 06 	sts	0x06B0, r25
    2b48:	a0 93 b1 06 	sts	0x06B1, r26
    2b4c:	b0 93 b2 06 	sts	0x06B2, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a8 e4       	ldi	r26, 0x48	; 72
    2b56:	b2 e4       	ldi	r27, 0x42	; 66
    2b58:	80 93 b7 06 	sts	0x06B7, r24
    2b5c:	90 93 b8 06 	sts	0x06B8, r25
    2b60:	a0 93 b9 06 	sts	0x06B9, r26
    2b64:	b0 93 ba 06 	sts	0x06BA, r27
}
    2b68:	08 95       	ret

00002b6a <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 41 03 	call	0x682	; 0x682 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2b72:	87 36       	cpi	r24, 0x67	; 103
    2b74:	31 f0       	breq	.+12     	; 0x2b82 <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2b76:	81 30       	cpi	r24, 0x01	; 1
    2b78:	a9 f0       	breq	.+42     	; 0x2ba4 <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2b7e:	c9 01       	movw	r24, r18
    2b80:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2b82:	85 e9       	ldi	r24, 0x95	; 149
    2b84:	96 e0       	ldi	r25, 0x06	; 6
    2b86:	61 e0       	ldi	r22, 0x01	; 1
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	46 e2       	ldi	r20, 0x26	; 38
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	0e 94 a6 03 	call	0x74c	; 0x74c <memcpy_from_eeprom_with_checksum>
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	89 2b       	or	r24, r25
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <read_settings+0x30>
    2b98:	21 e0       	ldi	r18, 0x01	; 1
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	28 27       	eor	r18, r24
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2ba0:	c9 01       	movw	r24, r18
    2ba2:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2ba4:	85 e9       	ldi	r24, 0x95	; 149
    2ba6:	96 e0       	ldi	r25, 0x06	; 6
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	4b e1       	ldi	r20, 0x1B	; 27
    2bae:	50 e0       	ldi	r21, 0x00	; 0
    2bb0:	0e 94 a6 03 	call	0x74c	; 0x74c <memcpy_from_eeprom_with_checksum>
    2bb4:	89 2b       	or	r24, r25
    2bb6:	09 f3       	breq	.-62     	; 0x2b7a <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	a0 e4       	ldi	r26, 0x40	; 64
    2bbe:	b2 e4       	ldi	r27, 0x42	; 66
    2bc0:	80 93 b3 06 	sts	0x06B3, r24
    2bc4:	90 93 b4 06 	sts	0x06B4, r25
    2bc8:	a0 93 b5 06 	sts	0x06B5, r26
    2bcc:	b0 93 b6 06 	sts	0x06B6, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a8 e4       	ldi	r26, 0x48	; 72
    2bd6:	b2 e4       	ldi	r27, 0x42	; 66
    2bd8:	80 93 b7 06 	sts	0x06B7, r24
    2bdc:	90 93 b8 06 	sts	0x06B8, r25
    2be0:	a0 93 b9 06 	sts	0x06B9, r26
    2be4:	b0 93 ba 06 	sts	0x06BA, r27
    2be8:	21 e0       	ldi	r18, 0x01	; 1
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	c8 cf       	rjmp	.-112    	; 0x2b7e <read_settings+0x14>

00002bee <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	67 e6       	ldi	r22, 0x67	; 103
    2bf4:	0e 94 49 03 	call	0x692	; 0x692 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	65 e9       	ldi	r22, 0x95	; 149
    2bfe:	76 e0       	ldi	r23, 0x06	; 6
    2c00:	46 e2       	ldi	r20, 0x26	; 38
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <memcpy_to_eeprom_with_checksum>
}
    2c08:	08 95       	ret

00002c0a <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2c0a:	fc 01       	movw	r30, r24
  switch(parameter) {
    2c0c:	86 30       	cpi	r24, 0x06	; 6
    2c0e:	91 05       	cpc	r25, r1
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <settings_store_setting+0xa>
    2c12:	6d c0       	rjmp	.+218    	; 0x2cee <settings_store_setting+0xe4>
    2c14:	87 30       	cpi	r24, 0x07	; 7
    2c16:	91 05       	cpc	r25, r1
    2c18:	a4 f0       	brlt	.+40     	; 0x2c42 <settings_store_setting+0x38>
    2c1a:	88 30       	cpi	r24, 0x08	; 8
    2c1c:	91 05       	cpc	r25, r1
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <settings_store_setting+0x18>
    2c20:	48 c0       	rjmp	.+144    	; 0x2cb2 <settings_store_setting+0xa8>
    2c22:	88 30       	cpi	r24, 0x08	; 8
    2c24:	91 05       	cpc	r25, r1
    2c26:	b4 f1       	brlt	.+108    	; 0x2c94 <settings_store_setting+0x8a>
    2c28:	89 30       	cpi	r24, 0x09	; 9
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <settings_store_setting+0x26>
    2c2e:	7b c0       	rjmp	.+246    	; 0x2d26 <settings_store_setting+0x11c>
    2c30:	e8 5e       	subi	r30, 0xE8	; 232
    2c32:	f3 40       	sbci	r31, 0x03	; 3
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <settings_store_setting+0x2e>
    2c36:	6a c0       	rjmp	.+212    	; 0x2d0c <settings_store_setting+0x102>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2c38:	85 e8       	ldi	r24, 0x85	; 133
    2c3a:	93 e0       	ldi	r25, 0x03	; 3
    2c3c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    2c40:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    2c42:	84 30       	cpi	r24, 0x04	; 4
    2c44:	91 05       	cpc	r25, r1
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <settings_store_setting+0x40>
    2c48:	43 c0       	rjmp	.+134    	; 0x2cd0 <settings_store_setting+0xc6>
    2c4a:	85 30       	cpi	r24, 0x05	; 5
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	9c f4       	brge	.+38     	; 0x2c76 <settings_store_setting+0x6c>
    2c50:	97 fd       	sbrc	r25, 7
    2c52:	f2 cf       	rjmp	.-28     	; 0x2c38 <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2c54:	ee 0f       	add	r30, r30
    2c56:	ff 1f       	adc	r31, r31
    2c58:	ee 0f       	add	r30, r30
    2c5a:	ff 1f       	adc	r31, r31
    2c5c:	eb 56       	subi	r30, 0x6B	; 107
    2c5e:	f9 4f       	sbci	r31, 0xF9	; 249
    2c60:	40 83       	st	Z, r20
    2c62:	51 83       	std	Z+1, r21	; 0x01
    2c64:	62 83       	std	Z+2, r22	; 0x02
    2c66:	73 83       	std	Z+3, r23	; 0x03
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c68:	0e 94 f7 15 	call	0x2bee	; 0x2bee <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c6c:	80 e7       	ldi	r24, 0x70	; 112
    2c6e:	93 e0       	ldi	r25, 0x03	; 3
    2c70:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    2c74:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    2c76:	40 93 a7 06 	sts	0x06A7, r20
    2c7a:	50 93 a8 06 	sts	0x06A8, r21
    2c7e:	60 93 a9 06 	sts	0x06A9, r22
    2c82:	70 93 aa 06 	sts	0x06AA, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c86:	0e 94 f7 15 	call	0x2bee	; 0x2bee <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c8a:	80 e7       	ldi	r24, 0x70	; 112
    2c8c:	93 e0       	ldi	r25, 0x03	; 3
    2c8e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    2c92:	08 95       	ret
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    2c94:	40 93 af 06 	sts	0x06AF, r20
    2c98:	50 93 b0 06 	sts	0x06B0, r21
    2c9c:	60 93 b1 06 	sts	0x06B1, r22
    2ca0:	70 93 b2 06 	sts	0x06B2, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2ca4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2ca8:	80 e7       	ldi	r24, 0x70	; 112
    2caa:	93 e0       	ldi	r25, 0x03	; 3
    2cac:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    2cb0:	08 95       	ret
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    2cb2:	40 93 b3 06 	sts	0x06B3, r20
    2cb6:	50 93 b4 06 	sts	0x06B4, r21
    2cba:	60 93 b5 06 	sts	0x06B5, r22
    2cbe:	70 93 b6 06 	sts	0x06B6, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2cc2:	0e 94 f7 15 	call	0x2bee	; 0x2bee <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2cc6:	80 e7       	ldi	r24, 0x70	; 112
    2cc8:	93 e0       	ldi	r25, 0x03	; 3
    2cca:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    2cce:	08 95       	ret
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	ba 01       	movw	r22, r20
    2cd4:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <round>
    2cd8:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__fixunssfsi>
    2cdc:	60 93 a6 06 	sts	0x06A6, r22
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2ce0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2ce4:	80 e7       	ldi	r24, 0x70	; 112
    2ce6:	93 e0       	ldi	r25, 0x03	; 3
    2ce8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    2cec:	08 95       	ret
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    2cee:	40 93 ab 06 	sts	0x06AB, r20
    2cf2:	50 93 ac 06 	sts	0x06AC, r21
    2cf6:	60 93 ad 06 	sts	0x06AD, r22
    2cfa:	70 93 ae 06 	sts	0x06AE, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2cfe:	0e 94 f7 15 	call	0x2bee	; 0x2bee <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d02:	80 e7       	ldi	r24, 0x70	; 112
    2d04:	93 e0       	ldi	r25, 0x03	; 3
    2d06:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    2d0a:	08 95       	ret
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	ba 01       	movw	r22, r20
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
    2d1c:	88 23       	and	r24, r24
    2d1e:	a9 f0       	breq	.+42     	; 0x2d4a <settings_store_setting+0x140>
    2d20:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <st_enable>
    2d24:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    2d26:	db 01       	movw	r26, r22
    2d28:	ca 01       	movw	r24, r20
    2d2a:	bf 77       	andi	r27, 0x7F	; 127
    2d2c:	80 93 b7 06 	sts	0x06B7, r24
    2d30:	90 93 b8 06 	sts	0x06B8, r25
    2d34:	a0 93 b9 06 	sts	0x06B9, r26
    2d38:	b0 93 ba 06 	sts	0x06BA, r27
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2d3c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2d40:	80 e7       	ldi	r24, 0x70	; 112
    2d42:	93 e0       	ldi	r25, 0x03	; 3
    2d44:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    2d48:	08 95       	ret
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    2d4a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <st_disable>
    2d4e:	08 95       	ret

00002d50 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2d50:	89 e5       	ldi	r24, 0x59	; 89
    2d52:	95 e0       	ldi	r25, 0x05	; 5
    2d54:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2d58:	82 e5       	ldi	r24, 0x52	; 82
    2d5a:	95 e0       	ldi	r25, 0x05	; 5
    2d5c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printPgmString(PSTR("\r\n"));
    2d60:	8f e4       	ldi	r24, 0x4F	; 79
    2d62:	95 e0       	ldi	r25, 0x05	; 5
    2d64:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2d68:	89 e4       	ldi	r24, 0x49	; 73
    2d6a:	95 e0       	ldi	r25, 0x05	; 5
    2d6c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2d70:	60 91 95 06 	lds	r22, 0x0695
    2d74:	70 91 96 06 	lds	r23, 0x0696
    2d78:	80 91 97 06 	lds	r24, 0x0697
    2d7c:	90 91 98 06 	lds	r25, 0x0698
    2d80:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2d84:	89 e3       	ldi	r24, 0x39	; 57
    2d86:	95 e0       	ldi	r25, 0x05	; 5
    2d88:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2d8c:	83 e3       	ldi	r24, 0x33	; 51
    2d8e:	95 e0       	ldi	r25, 0x05	; 5
    2d90:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2d94:	60 91 99 06 	lds	r22, 0x0699
    2d98:	70 91 9a 06 	lds	r23, 0x069A
    2d9c:	80 91 9b 06 	lds	r24, 0x069B
    2da0:	90 91 9c 06 	lds	r25, 0x069C
    2da4:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2da8:	83 e2       	ldi	r24, 0x23	; 35
    2daa:	95 e0       	ldi	r25, 0x05	; 5
    2dac:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2db0:	8d e1       	ldi	r24, 0x1D	; 29
    2db2:	95 e0       	ldi	r25, 0x05	; 5
    2db4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2db8:	60 91 9d 06 	lds	r22, 0x069D
    2dbc:	70 91 9e 06 	lds	r23, 0x069E
    2dc0:	80 91 9f 06 	lds	r24, 0x069F
    2dc4:	90 91 a0 06 	lds	r25, 0x06A0
    2dc8:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2dcc:	8d e0       	ldi	r24, 0x0D	; 13
    2dce:	95 e0       	ldi	r25, 0x05	; 5
    2dd0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2dd4:	87 e0       	ldi	r24, 0x07	; 7
    2dd6:	95 e0       	ldi	r25, 0x05	; 5
    2dd8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2ddc:	60 91 a1 06 	lds	r22, 0x06A1
    2de0:	70 91 a2 06 	lds	r23, 0x06A2
    2de4:	80 91 a3 06 	lds	r24, 0x06A3
    2de8:	90 91 a4 06 	lds	r25, 0x06A4
    2dec:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2df0:	85 ef       	ldi	r24, 0xF5	; 245
    2df2:	94 e0       	ldi	r25, 0x04	; 4
    2df4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2df8:	8f ee       	ldi	r24, 0xEF	; 239
    2dfa:	94 e0       	ldi	r25, 0x04	; 4
    2dfc:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printInteger(settings.pulse_microseconds);
    2e00:	60 91 a6 06 	lds	r22, 0x06A6
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2e0e:	82 ed       	ldi	r24, 0xD2	; 210
    2e10:	94 e0       	ldi	r25, 0x04	; 4
    2e12:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2e16:	8c ec       	ldi	r24, 0xCC	; 204
    2e18:	94 e0       	ldi	r25, 0x04	; 4
    2e1a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.default_feed_rate);
    2e1e:	60 91 a7 06 	lds	r22, 0x06A7
    2e22:	70 91 a8 06 	lds	r23, 0x06A8
    2e26:	80 91 a9 06 	lds	r24, 0x06A9
    2e2a:	90 91 aa 06 	lds	r25, 0x06AA
    2e2e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2e32:	8e ea       	ldi	r24, 0xAE	; 174
    2e34:	94 e0       	ldi	r25, 0x04	; 4
    2e36:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2e3a:	88 ea       	ldi	r24, 0xA8	; 168
    2e3c:	94 e0       	ldi	r25, 0x04	; 4
    2e3e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.default_seek_rate);
    2e42:	60 91 ab 06 	lds	r22, 0x06AB
    2e46:	70 91 ac 06 	lds	r23, 0x06AC
    2e4a:	80 91 ad 06 	lds	r24, 0x06AD
    2e4e:	90 91 ae 06 	lds	r25, 0x06AE
    2e52:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2e56:	8a e8       	ldi	r24, 0x8A	; 138
    2e58:	94 e0       	ldi	r25, 0x04	; 4
    2e5a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2e5e:	84 e8       	ldi	r24, 0x84	; 132
    2e60:	94 e0       	ldi	r25, 0x04	; 4
    2e62:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2e66:	60 91 af 06 	lds	r22, 0x06AF
    2e6a:	70 91 b0 06 	lds	r23, 0x06B0
    2e6e:	80 91 b1 06 	lds	r24, 0x06B1
    2e72:	90 91 b2 06 	lds	r25, 0x06B2
    2e76:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2e7a:	80 e7       	ldi	r24, 0x70	; 112
    2e7c:	94 e0       	ldi	r25, 0x04	; 4
    2e7e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2e82:	8a e6       	ldi	r24, 0x6A	; 106
    2e84:	94 e0       	ldi	r25, 0x04	; 4
    2e86:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.acceleration);
    2e8a:	60 91 b3 06 	lds	r22, 0x06B3
    2e8e:	70 91 b4 06 	lds	r23, 0x06B4
    2e92:	80 91 b5 06 	lds	r24, 0x06B5
    2e96:	90 91 b6 06 	lds	r25, 0x06B6
    2e9a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2e9e:	8c e4       	ldi	r24, 0x4C	; 76
    2ea0:	94 e0       	ldi	r25, 0x04	; 4
    2ea2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2ea6:	86 e4       	ldi	r24, 0x46	; 70
    2ea8:	94 e0       	ldi	r25, 0x04	; 4
    2eaa:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printFloat(settings.max_jerk);
    2eae:	60 91 b7 06 	lds	r22, 0x06B7
    2eb2:	70 91 b8 06 	lds	r23, 0x06B8
    2eb6:	80 91 b9 06 	lds	r24, 0x06B9
    2eba:	90 91 ba 06 	lds	r25, 0x06BA
    2ebe:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2ec2:	8e e0       	ldi	r24, 0x0E	; 14
    2ec4:	94 e0       	ldi	r25, 0x04	; 4
    2ec6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2eca:	85 e0       	ldi	r24, 0x05	; 5
    2ecc:	94 e0       	ldi	r25, 0x04	; 4
    2ece:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
  printInteger(st_is_enabled());
    2ed2:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <st_is_enabled>
    2ed6:	aa 27       	eor	r26, r26
    2ed8:	97 fd       	sbrc	r25, 7
    2eda:	a0 95       	com	r26
    2edc:	ba 2f       	mov	r27, r26
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2ee6:	8c ed       	ldi	r24, 0xDC	; 220
    2ee8:	93 e0       	ldi	r25, 0x03	; 3
    2eea:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2eee:	89 e9       	ldi	r24, 0x99	; 153
    2ef0:	93 e0       	ldi	r25, 0x03	; 3
    2ef2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
}
    2ef6:	08 95       	ret

00002ef8 <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2ef8:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <read_settings>
    2efc:	89 2b       	or	r24, r25
    2efe:	09 f0       	breq	.+2      	; 0x2f02 <settings_init+0xa>
    2f00:	08 95       	ret
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2f02:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <settings_reset>
    write_settings();
    2f06:	0e 94 f7 15 	call	0x2bee	; 0x2bee <write_settings>
    settings_dump();
    2f0a:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <settings_dump>
    2f0e:	08 95       	ret

00002f10 <spindle_init>:
#include <avr/io.h>
#include <util/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2f10:	e1 e0       	ldi	r30, 0x01	; 1
    2f12:	f1 e0       	ldi	r31, 0x01	; 1
    2f14:	80 81       	ld	r24, Z
    2f16:	80 64       	ori	r24, 0x40	; 64
    2f18:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2f1a:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2f1c:	3e 9a       	sbi	0x07, 6	; 7

}
    2f1e:	08 95       	ret

00002f20 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2f20:	97 fd       	sbrc	r25, 7
    2f22:	07 c0       	rjmp	.+14     	; 0x2f32 <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2f24:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2f26:	80 91 02 01 	lds	r24, 0x0102
    2f2a:	80 64       	ori	r24, 0x40	; 64
    2f2c:	80 93 02 01 	sts	0x0102, r24
}
    2f30:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2f32:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2f34:	80 91 02 01 	lds	r24, 0x0102
    2f38:	80 64       	ori	r24, 0x40	; 64
    2f3a:	80 93 02 01 	sts	0x0102, r24
}
    2f3e:	08 95       	ret

00002f40 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2f40:	e2 e0       	ldi	r30, 0x02	; 2
    2f42:	f1 e0       	ldi	r31, 0x01	; 1
    2f44:	80 81       	ld	r24, Z
    2f46:	8f 7b       	andi	r24, 0xBF	; 191
    2f48:	80 83       	st	Z, r24
}
    2f4a:	08 95       	ret

00002f4c <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f4c:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f4e:	40 e7       	ldi	r20, 0x70	; 112
    2f50:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2f52:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f54:	23 2f       	mov	r18, r19
    2f56:	2a 95       	dec	r18
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2f5a:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f5c:	fa 01       	movw	r30, r20
    2f5e:	31 97       	sbiw	r30, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	2f ef       	ldi	r18, 0xFF	; 255
    2f66:	8f 3f       	cpi	r24, 0xFF	; 255
    2f68:	92 07       	cpc	r25, r18
    2f6a:	99 f7       	brne	.-26     	; 0x2f52 <rotate_head+0x6>

}
    2f6c:	08 95       	ret

00002f6e <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2f6e:	ef e6       	ldi	r30, 0x6F	; 111
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	82 60       	ori	r24, 0x02	; 2
    2f76:	80 83       	st	Z, r24
}
    2f78:	08 95       	ret

00002f7a <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	90 93 6e 05 	sts	0x056E, r25
    2f80:	80 93 6d 05 	sts	0x056D, r24
}
    2f84:	08 95       	ret

00002f86 <get_busy>:

int get_busy( void ) 
{
	return busy;
    2f86:	20 91 6d 05 	lds	r18, 0x056D
    2f8a:	30 91 6e 05 	lds	r19, 0x056E
}
    2f8e:	c9 01       	movw	r24, r18
    2f90:	08 95       	ret

00002f92 <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2f92:	1f 92       	push	r1
    2f94:	0f 92       	push	r0
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	0f 92       	push	r0
    2f9a:	11 24       	eor	r1, r1
    2f9c:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2f9e:	81 b3       	in	r24, 0x11	; 17
    2fa0:	85 63       	ori	r24, 0x35	; 53
    2fa2:	81 bb       	out	0x11, r24	; 17
}
    2fa4:	8f 91       	pop	r24
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2fb0:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2fb2:	08 95       	ret

00002fb4 <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2fb4:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2fb6:	08 95       	ret

00002fb8 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2fb8:	3c 99       	sbic	0x07, 4	; 7
    2fba:	04 c0       	rjmp	.+8      	; 0x2fc4 <st_is_enabled+0xc>
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2fc0:	c9 01       	movw	r24, r18
    2fc2:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2fc4:	88 b1       	in	r24, 0x08	; 8
    2fc6:	82 95       	swap	r24
    2fc8:	8f 70       	andi	r24, 0x0F	; 15
    2fca:	80 95       	com	r24
    2fcc:	81 70       	andi	r24, 0x01	; 1
    2fce:	28 2f       	mov	r18, r24
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2fd2:	c9 01       	movw	r24, r18
    2fd4:	08 95       	ret

00002fd6 <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2fd6:	60 30       	cpi	r22, 0x00	; 0
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	72 07       	cpc	r23, r18
    2fdc:	21 e0       	ldi	r18, 0x01	; 1
    2fde:	82 07       	cpc	r24, r18
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	92 07       	cpc	r25, r18
    2fe4:	08 f4       	brcc	.+2      	; 0x2fe8 <config_step_timer+0x12>
    2fe6:	5c c0       	rjmp	.+184    	; 0x30a0 <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    2fe8:	60 30       	cpi	r22, 0x00	; 0
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	72 07       	cpc	r23, r18
    2fee:	28 e0       	ldi	r18, 0x08	; 8
    2ff0:	82 07       	cpc	r24, r18
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	92 07       	cpc	r25, r18
    2ff6:	78 f1       	brcs	.+94     	; 0x3056 <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    2ff8:	60 30       	cpi	r22, 0x00	; 0
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	72 07       	cpc	r23, r18
    2ffe:	20 e4       	ldi	r18, 0x40	; 64
    3000:	82 07       	cpc	r24, r18
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	92 07       	cpc	r25, r18
    3006:	08 f4       	brcc	.+2      	; 0x300a <config_step_timer+0x34>
    3008:	51 c0       	rjmp	.+162    	; 0x30ac <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    300a:	60 30       	cpi	r22, 0x00	; 0
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	72 07       	cpc	r23, r18
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	82 07       	cpc	r24, r18
    3014:	21 e0       	ldi	r18, 0x01	; 1
    3016:	92 07       	cpc	r25, r18
    3018:	08 f4       	brcc	.+2      	; 0x301c <config_step_timer+0x46>
    301a:	6d c0       	rjmp	.+218    	; 0x30f6 <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    301c:	60 30       	cpi	r22, 0x00	; 0
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	72 07       	cpc	r23, r18
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	82 07       	cpc	r24, r18
    3026:	24 e0       	ldi	r18, 0x04	; 4
    3028:	92 07       	cpc	r25, r18
    302a:	08 f0       	brcs	.+2      	; 0x302e <config_step_timer+0x58>
    302c:	71 c0       	rjmp	.+226    	; 0x3110 <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    302e:	2a e0       	ldi	r18, 0x0A	; 10
    3030:	96 95       	lsr	r25
    3032:	87 95       	ror	r24
    3034:	77 95       	ror	r23
    3036:	67 95       	ror	r22
    3038:	2a 95       	dec	r18
    303a:	d1 f7       	brne	.-12     	; 0x3030 <config_step_timer+0x5a>
    303c:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    303e:	9b 01       	movw	r18, r22
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	8a e0       	ldi	r24, 0x0A	; 10
    3046:	22 0f       	add	r18, r18
    3048:	33 1f       	adc	r19, r19
    304a:	44 1f       	adc	r20, r20
    304c:	55 1f       	adc	r21, r21
    304e:	8a 95       	dec	r24
    3050:	d1 f7       	brne	.-12     	; 0x3046 <config_step_timer+0x70>
    3052:	95 e0       	ldi	r25, 0x05	; 5
    3054:	18 c0       	rjmp	.+48     	; 0x3086 <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    3056:	23 e0       	ldi	r18, 0x03	; 3
    3058:	96 95       	lsr	r25
    305a:	87 95       	ror	r24
    305c:	77 95       	ror	r23
    305e:	67 95       	ror	r22
    3060:	2a 95       	dec	r18
    3062:	d1 f7       	brne	.-12     	; 0x3058 <config_step_timer+0x82>
    3064:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    3066:	9b 01       	movw	r18, r22
    3068:	40 e0       	ldi	r20, 0x00	; 0
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	22 0f       	add	r18, r18
    306e:	33 1f       	adc	r19, r19
    3070:	44 1f       	adc	r20, r20
    3072:	55 1f       	adc	r21, r21
    3074:	22 0f       	add	r18, r18
    3076:	33 1f       	adc	r19, r19
    3078:	44 1f       	adc	r20, r20
    307a:	55 1f       	adc	r21, r21
    307c:	22 0f       	add	r18, r18
    307e:	33 1f       	adc	r19, r19
    3080:	44 1f       	adc	r20, r20
    3082:	55 1f       	adc	r21, r21
    3084:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    3086:	80 91 81 00 	lds	r24, 0x0081
    308a:	88 7f       	andi	r24, 0xF8	; 248
    308c:	98 2b       	or	r25, r24
    308e:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    3092:	f0 93 89 00 	sts	0x0089, r31
    3096:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    309a:	b9 01       	movw	r22, r18
    309c:	ca 01       	movw	r24, r20
    309e:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    30a0:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    30a2:	9b 01       	movw	r18, r22
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	91 e0       	ldi	r25, 0x01	; 1
    30aa:	ed cf       	rjmp	.-38     	; 0x3086 <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    30ac:	b6 e0       	ldi	r27, 0x06	; 6
    30ae:	96 95       	lsr	r25
    30b0:	87 95       	ror	r24
    30b2:	77 95       	ror	r23
    30b4:	67 95       	ror	r22
    30b6:	ba 95       	dec	r27
    30b8:	d1 f7       	brne	.-12     	; 0x30ae <config_step_timer+0xd8>
    30ba:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    30bc:	9b 01       	movw	r18, r22
    30be:	40 e0       	ldi	r20, 0x00	; 0
    30c0:	50 e0       	ldi	r21, 0x00	; 0
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	44 1f       	adc	r20, r20
    30c8:	55 1f       	adc	r21, r21
    30ca:	22 0f       	add	r18, r18
    30cc:	33 1f       	adc	r19, r19
    30ce:	44 1f       	adc	r20, r20
    30d0:	55 1f       	adc	r21, r21
    30d2:	22 0f       	add	r18, r18
    30d4:	33 1f       	adc	r19, r19
    30d6:	44 1f       	adc	r20, r20
    30d8:	55 1f       	adc	r21, r21
    30da:	22 0f       	add	r18, r18
    30dc:	33 1f       	adc	r19, r19
    30de:	44 1f       	adc	r20, r20
    30e0:	55 1f       	adc	r21, r21
    30e2:	22 0f       	add	r18, r18
    30e4:	33 1f       	adc	r19, r19
    30e6:	44 1f       	adc	r20, r20
    30e8:	55 1f       	adc	r21, r21
    30ea:	22 0f       	add	r18, r18
    30ec:	33 1f       	adc	r19, r19
    30ee:	44 1f       	adc	r20, r20
    30f0:	55 1f       	adc	r21, r21
    30f2:	93 e0       	ldi	r25, 0x03	; 3
    30f4:	c8 cf       	rjmp	.-112    	; 0x3086 <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    30f6:	bb 27       	eor	r27, r27
    30f8:	a9 2f       	mov	r26, r25
    30fa:	98 2f       	mov	r25, r24
    30fc:	87 2f       	mov	r24, r23
    30fe:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    3100:	a0 e0       	ldi	r26, 0x00	; 0
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	22 27       	eor	r18, r18
    3106:	38 2f       	mov	r19, r24
    3108:	49 2f       	mov	r20, r25
    310a:	5a 2f       	mov	r21, r26
    310c:	94 e0       	ldi	r25, 0x04	; 4
    310e:	bb cf       	rjmp	.-138    	; 0x3086 <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    3110:	ef ef       	ldi	r30, 0xFF	; 255
    3112:	ff ef       	ldi	r31, 0xFF	; 255
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	3c ef       	ldi	r19, 0xFC	; 252
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	50 e0       	ldi	r21, 0x00	; 0
    311c:	95 e0       	ldi	r25, 0x05	; 5
    311e:	b3 cf       	rjmp	.-154    	; 0x3086 <config_step_timer+0xb0>

00003120 <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    3120:	9b 01       	movw	r18, r22
    3122:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    3124:	20 3b       	cpi	r18, 0xB0	; 176
    3126:	84 e0       	ldi	r24, 0x04	; 4
    3128:	38 07       	cpc	r19, r24
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	48 07       	cpc	r20, r24
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	58 07       	cpc	r21, r24
    3132:	78 f4       	brcc	.+30     	; 0x3152 <set_step_events_per_minute+0x32>
    3134:	60 e0       	ldi	r22, 0x00	; 0
    3136:	75 e3       	ldi	r23, 0x35	; 53
    3138:	8c e0       	ldi	r24, 0x0C	; 12
    313a:	90 e0       	ldi	r25, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    313c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <config_step_timer>
    3140:	60 93 6f 05 	sts	0x056F, r22
    3144:	70 93 70 05 	sts	0x0570, r23
    3148:	80 93 71 05 	sts	0x0571, r24
    314c:	90 93 72 05 	sts	0x0572, r25
}
    3150:	08 95       	ret
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    3152:	60 e0       	ldi	r22, 0x00	; 0
    3154:	70 e7       	ldi	r23, 0x70	; 112
    3156:	88 e3       	ldi	r24, 0x38	; 56
    3158:	99 e3       	ldi	r25, 0x39	; 57
    315a:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <__udivmodsi4>
    315e:	c9 01       	movw	r24, r18
    3160:	da 01       	movw	r26, r20
    3162:	bc 01       	movw	r22, r24
    3164:	cd 01       	movw	r24, r26
    3166:	ea cf       	rjmp	.-44     	; 0x313c <set_step_events_per_minute+0x1c>

00003168 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    3168:	80 b3       	in	r24, 0x10	; 16
    316a:	85 63       	ori	r24, 0x35	; 53
    316c:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    316e:	80 b3       	in	r24, 0x10	; 16
    3170:	8a 6c       	ori	r24, 0xCA	; 202
    3172:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    3174:	81 b3       	in	r24, 0x11	; 17
    3176:	85 63       	ori	r24, 0x35	; 53
    3178:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    317a:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    317c:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    317e:	e1 e8       	ldi	r30, 0x81	; 129
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	8f 7e       	andi	r24, 0xEF	; 239
    3186:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    3188:	80 81       	ld	r24, Z
    318a:	88 60       	ori	r24, 0x08	; 8
    318c:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    318e:	e0 e8       	ldi	r30, 0x80	; 128
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	8d 7f       	andi	r24, 0xFD	; 253
    3196:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    3198:	80 81       	ld	r24, Z
    319a:	8e 7f       	andi	r24, 0xFE	; 254
    319c:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    319e:	80 81       	ld	r24, Z
    31a0:	8f 73       	andi	r24, 0x3F	; 63
    31a2:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    31a4:	80 81       	ld	r24, Z
    31a6:	8f 7c       	andi	r24, 0xCF	; 207
    31a8:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    31aa:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    31ae:	82 e0       	ldi	r24, 0x02	; 2
    31b0:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    31b4:	e0 e7       	ldi	r30, 0x70	; 112
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	81 60       	ori	r24, 0x01	; 1
    31bc:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    31be:	60 e7       	ldi	r22, 0x70	; 112
    31c0:	77 e1       	ldi	r23, 0x17	; 23
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 90 18 	call	0x3120	; 0x3120 <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    31ca:	ef e6       	ldi	r30, 0x6F	; 111
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	8d 7f       	andi	r24, 0xFD	; 253
    31d2:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    31d4:	10 92 73 05 	sts	0x0573, r1
    31d8:	10 92 74 05 	sts	0x0574, r1
    31dc:	10 92 75 05 	sts	0x0575, r1
    31e0:	10 92 76 05 	sts	0x0576, r1
  
  sei();
    31e4:	78 94       	sei
}
    31e6:	08 95       	ret

000031e8 <xHome>:
}


unsigned char xHome( void ) 
{
	unsigned char homex = bit_is_set( XHM_PIN, X_HOME );
    31e8:	80 b1       	in	r24, 0x00	; 0
		printPgmString(PSTR("xHome: homed\r\n"));
#endif
	}

	return homex;
}
    31ea:	80 71       	andi	r24, 0x10	; 16
    31ec:	08 95       	ret

000031ee <yHome>:

unsigned char yHome( void ) 
{
	unsigned char homey = bit_is_set( YHM_PIN, Y_HOME );
    31ee:	82 b3       	in	r24, 0x12	; 18
		printPgmString(PSTR("yHome: homed\r\n"));
#endif
	}

	return homey;
}
    31f0:	81 70       	andi	r24, 0x01	; 1
    31f2:	08 95       	ret

000031f4 <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    31f4:	80 91 6f 00 	lds	r24, 0x006F
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	96 95       	lsr	r25
    31fc:	87 95       	ror	r24
}
    31fe:	81 70       	andi	r24, 0x01	; 1
    3200:	08 95       	ret

00003202 <limits_init>:


void limits_init(void)
{
	//pickobear specific
	DDRA = 0x0;
    3202:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    3204:	82 e0       	ldi	r24, 0x02	; 2
    3206:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    3208:	17 b8       	out	0x07, r1	; 7
	LIMIT_DDR = 0x0;
    320a:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    320c:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    320e:	9f e8       	ldi	r25, 0x8F	; 143
    3210:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    3212:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    3214:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    3218:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    321c:	3f ec       	ldi	r19, 0xCF	; 207
    321e:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    3222:	20 ef       	ldi	r18, 0xF0	; 240
    3224:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    3228:	8c e9       	ldi	r24, 0x9C	; 156
    322a:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    322c:	82 e2       	ldi	r24, 0x22	; 34
    322e:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    3230:	83 e1       	ldi	r24, 0x13	; 19
    3232:	88 b9       	out	0x08, r24	; 8
#ifdef SIMULATE
	LIMIT_PORT = 0x00; //00000000
    3234:	1b b8       	out	0x0b, r1	; 11
	LIMIT_PIN = 0x0;
    3236:	19 b8       	out	0x09, r1	; 9
#else
	LIMIT_PORT = 0x8F; //10001111
#endif
	PORTE = 0x30;
    3238:	80 e3       	ldi	r24, 0x30	; 48
    323a:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    323c:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    323e:	83 e2       	ldi	r24, 0x23	; 35
    3240:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    3242:	83 e0       	ldi	r24, 0x03	; 3
    3244:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    3248:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    324c:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    3250:	20 93 0b 01 	sts	0x010B, r18
}
    3254:	08 95       	ret

00003256 <get_limit_bits>:
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    3256:	4b 9b       	sbis	0x09, 3	; 9
    3258:	0c c0       	rjmp	.+24     	; 0x3272 <get_limit_bits+0x1c>
    325a:	82 e8       	ldi	r24, 0x82	; 130
      	ret |= _BV( 1 ) ;

	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
    325c:	4a 99       	sbic	0x09, 2	; 9
      	ret |= _BV( 2 ) ;
    325e:	84 60       	ori	r24, 0x04	; 4

	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
    3260:	48 99       	sbic	0x09, 0	; 9
      	ret |= _BV( 3 ) ;
    3262:	88 60       	ori	r24, 0x08	; 8

	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
    3264:	49 99       	sbic	0x09, 1	; 9
      	ret |= _BV( 4 ) ;
    3266:	80 61       	ori	r24, 0x10	; 16

	if( bit_is_set( XHM_PIN, X_HOME ) )
    3268:	04 99       	sbic	0x00, 4	; 0
      	ret |= _BV( 5 ) ;
    326a:	80 62       	ori	r24, 0x20	; 32

	if( bit_is_set( YHM_PIN, Y_HOME ) )
    326c:	90 99       	sbic	0x12, 0	; 18
      	ret |= _BV( 6) ;
    326e:	80 64       	ori	r24, 0x40	; 64

	return ret;

}
    3270:	08 95       	ret
unsigned char get_limit_bits( void )
{
	// don't want it to return zero
	unsigned char ret = _BV( 7 );

	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
    3272:	80 e8       	ldi	r24, 0x80	; 128
    3274:	f3 cf       	rjmp	.-26     	; 0x325c <get_limit_bits+0x6>

00003276 <st_go_home>:
	unsigned char yDir = FORWARD;

	unsigned int counter = 0;

	// not homed
	gHomed = FALSE;
    3276:	10 92 55 05 	sts	0x0555, r1

	// reset position machine thinks we are at.
	plan_init();
    327a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <plan_init>
	gc_init();
    327e:	0e 94 4a 05 	call	0xa94	; 0xa94 <gc_init>

	// if head down, set head up
	if( is_head_down() ) {
    3282:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    3286:	88 23       	and	r24, r24
    3288:	41 f4       	brne	.+16     	; 0x329a <st_go_home+0x24>
		}

	}

#ifdef SIMULATE
	gHomed = TRUE ;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	80 93 55 05 	sts	0x0555, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    3290:	10 92 6e 05 	sts	0x056E, r1
    3294:	10 92 6d 05 	sts	0x056D, r1
    3298:	08 95       	ret
#ifdef VERBOSE_DEBUG

		printPgmString(PSTR("home is_head_down()=1\r\n"));
#endif

		head_down(0);
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
		
		//check again
		if(is_head_down() ){
    32a2:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    32a6:	88 23       	and	r24, r24
    32a8:	81 f3       	breq	.-32     	; 0x328a <st_go_home+0x14>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("home failed, head down\r\n"));
#endif
			ackHost = 'E';
    32aa:	85 e4       	ldi	r24, 0x45	; 69
    32ac:	80 93 54 05 	sts	0x0554, r24
    32b0:	08 95       	ret

000032b2 <yLimit2>:

	return limit;
}

unsigned char yLimit2( void ) 
{
    32b2:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT );
    32b4:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    32b6:	18 2f       	mov	r17, r24
    32b8:	12 70       	andi	r17, 0x02	; 2
    32ba:	81 ff       	sbrs	r24, 1
    32bc:	06 c0       	rjmp	.+12     	; 0x32ca <yLimit2+0x18>
		// no longer homed
		gHomed = FALSE;
    32be:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("yLimit2: is in limit\r\n"));
    32c2:	85 e6       	ldi	r24, 0x65	; 101
    32c4:	95 e0       	ldi	r25, 0x05	; 5
    32c6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
	}

	return limit;
}
    32ca:	81 2f       	mov	r24, r17
    32cc:	1f 91       	pop	r17
    32ce:	08 95       	ret

000032d0 <moveBack>:
  }
	return TRUE;
}

unsigned char moveBack( unsigned int distance ) 
{
    32d0:	ff 92       	push	r15
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    32dc:	81 b3       	in	r24, 0x11	; 17
    32de:	85 73       	andi	r24, 0x35	; 53
    32e0:	88 60       	ori	r24, 0x08	; 8
    32e2:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    32e4:	20 97       	sbiw	r28, 0x00	; 0
    32e6:	19 f1       	breq	.+70     	; 0x332e <moveBack+0x5e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32e8:	45 e3       	ldi	r20, 0x35	; 53
    32ea:	f4 2e       	mov	r15, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32ec:	00 e6       	ldi	r16, 0x60	; 96
    32ee:	14 e0       	ldi	r17, 0x04	; 4
    32f0:	13 c0       	rjmp	.+38     	; 0x3318 <moveBack+0x48>

  	if( yLimit2() || is_head_down()  ) 
    32f2:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    32f6:	88 23       	and	r24, r24
    32f8:	99 f4       	brne	.+38     	; 0x3320 <moveBack+0x50>
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    32fa:	81 b3       	in	r24, 0x11	; 17
    32fc:	8a 7c       	andi	r24, 0xCA	; 202
    32fe:	84 60       	ori	r24, 0x04	; 4
    3300:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3302:	8f 2d       	mov	r24, r15
    3304:	8a 95       	dec	r24
    3306:	f1 f7       	brne	.-4      	; 0x3304 <moveBack+0x34>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3308:	81 b3       	in	r24, 0x11	; 17
    330a:	8a 7c       	andi	r24, 0xCA	; 202
    330c:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    330e:	c8 01       	movw	r24, r16
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	f1 f7       	brne	.-4      	; 0x3310 <moveBack+0x40>
    3314:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3316:	59 f0       	breq	.+22     	; 0x332e <moveBack+0x5e>

  	if( yLimit2() || is_head_down()  ) 
    3318:	0e 94 59 19 	call	0x32b2	; 0x32b2 <yLimit2>
    331c:	88 23       	and	r24, r24
    331e:	49 f3       	breq	.-46     	; 0x32f2 <moveBack+0x22>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3320:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	1f 91       	pop	r17
    3328:	0f 91       	pop	r16
    332a:	ff 90       	pop	r15
    332c:	08 95       	ret
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    332e:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3330:	df 91       	pop	r29
    3332:	cf 91       	pop	r28
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	ff 90       	pop	r15
    333a:	08 95       	ret

0000333c <yLimit1>:

	return limit;
}

unsigned char yLimit1( void ) 
{
    333c:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
    333e:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    3340:	18 2f       	mov	r17, r24
    3342:	11 70       	andi	r17, 0x01	; 1
    3344:	80 ff       	sbrs	r24, 0
    3346:	06 c0       	rjmp	.+12     	; 0x3354 <yLimit1+0x18>
		// no longer homed
		gHomed = FALSE;
    3348:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("yLimit1: is in limit\r\n"));
    334c:	8c e7       	ldi	r24, 0x7C	; 124
    334e:	95 e0       	ldi	r25, 0x05	; 5
    3350:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
	}

	return limit;
}
    3354:	81 2f       	mov	r24, r17
    3356:	1f 91       	pop	r17
    3358:	08 95       	ret

0000335a <moveForward>:
  }
	return TRUE;
}

unsigned char moveForward( unsigned int distance ) 
{
    335a:	ff 92       	push	r15
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	ec 01       	movw	r28, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3366:	81 b3       	in	r24, 0x11	; 17
    3368:	85 73       	andi	r24, 0x35	; 53
    336a:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    336c:	20 97       	sbiw	r28, 0x00	; 0
    336e:	d9 f0       	breq	.+54     	; 0x33a6 <moveForward+0x4c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3370:	55 e3       	ldi	r21, 0x35	; 53
    3372:	f5 2e       	mov	r15, r21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3374:	00 e6       	ldi	r16, 0x60	; 96
    3376:	14 e0       	ldi	r17, 0x04	; 4
    3378:	0f c0       	rjmp	.+30     	; 0x3398 <moveForward+0x3e>
		printPgmString(PSTR("\r\n"));

#endif
	}

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    337a:	81 b3       	in	r24, 0x11	; 17
    337c:	8a 7c       	andi	r24, 0xCA	; 202
    337e:	84 60       	ori	r24, 0x04	; 4
    3380:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3382:	8f 2d       	mov	r24, r15
    3384:	8a 95       	dec	r24
    3386:	f1 f7       	brne	.-4      	; 0x3384 <moveForward+0x2a>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3388:	81 b3       	in	r24, 0x11	; 17
    338a:	8a 7c       	andi	r24, 0xCA	; 202
    338c:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    338e:	c8 01       	movw	r24, r16
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <moveForward+0x36>
    3394:	21 97       	sbiw	r28, 0x01	; 1


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3396:	39 f0       	breq	.+14     	; 0x33a6 <moveForward+0x4c>

	//  hit left limit or head down?
  	if( yLimit1() || is_head_down()  ) {
    3398:	0e 94 9e 19 	call	0x333c	; 0x333c <yLimit1>
    339c:	88 23       	and	r24, r24
    339e:	69 f7       	brne	.-38     	; 0x337a <moveForward+0x20>
    33a0:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    33a4:	ea cf       	rjmp	.-44     	; 0x337a <moveForward+0x20>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	df 91       	pop	r29
    33aa:	cf 91       	pop	r28
    33ac:	1f 91       	pop	r17
    33ae:	0f 91       	pop	r16
    33b0:	ff 90       	pop	r15
    33b2:	08 95       	ret

000033b4 <xLimit2>:

	return limit;
}

unsigned char xLimit2( void ) 
{
    33b4:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, X2_LIMIT_BIT );
    33b6:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    33b8:	18 2f       	mov	r17, r24
    33ba:	14 70       	andi	r17, 0x04	; 4
    33bc:	82 ff       	sbrs	r24, 2
    33be:	06 c0       	rjmp	.+12     	; 0x33cc <xLimit2+0x18>
		// no longer homed
		gHomed = FALSE;
    33c0:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("xLimit2: is in limit\r\n"));
    33c4:	83 e9       	ldi	r24, 0x93	; 147
    33c6:	95 e0       	ldi	r25, 0x05	; 5
    33c8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
	}

	return limit;
}
    33cc:	81 2f       	mov	r24, r17
    33ce:	1f 91       	pop	r17
    33d0:	08 95       	ret

000033d2 <moveRight>:

	return TRUE;
}

unsigned char moveRight( unsigned int distance ) 
{
    33d2:	ff 92       	push	r15
    33d4:	0f 93       	push	r16
    33d6:	1f 93       	push	r17
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
    33dc:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    33de:	81 b3       	in	r24, 0x11	; 17
    33e0:	85 73       	andi	r24, 0x35	; 53
    33e2:	82 60       	ori	r24, 0x02	; 2
    33e4:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    33e6:	20 97       	sbiw	r28, 0x00	; 0
    33e8:	19 f1       	breq	.+70     	; 0x3430 <moveRight+0x5e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33ea:	65 e3       	ldi	r22, 0x35	; 53
    33ec:	f6 2e       	mov	r15, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33ee:	00 e6       	ldi	r16, 0x60	; 96
    33f0:	14 e0       	ldi	r17, 0x04	; 4
    33f2:	13 c0       	rjmp	.+38     	; 0x341a <moveRight+0x48>

	//  hit left limit or head down?
  	if( xLimit2()  || is_head_down()  ) {
    33f4:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    33f8:	88 23       	and	r24, r24
    33fa:	99 f4       	brne	.+38     	; 0x3422 <moveRight+0x50>
		printPgmString(PSTR("\r\nmoveLeft HEAD_DOWN_TEST or X2 LIMIT \r\n"));
#endif
		return 0;  	
	}

	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    33fc:	81 b3       	in	r24, 0x11	; 17
    33fe:	8a 7c       	andi	r24, 0xCA	; 202
    3400:	81 60       	ori	r24, 0x01	; 1
    3402:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3404:	8f 2d       	mov	r24, r15
    3406:	8a 95       	dec	r24
    3408:	f1 f7       	brne	.-4      	; 0x3406 <moveRight+0x34>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    340a:	81 b3       	in	r24, 0x11	; 17
    340c:	8a 7c       	andi	r24, 0xCA	; 202
    340e:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3410:	c8 01       	movw	r24, r16
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <moveRight+0x40>
    3416:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3418:	59 f0       	breq	.+22     	; 0x3430 <moveRight+0x5e>

	//  hit left limit or head down?
  	if( xLimit2()  || is_head_down()  ) {
    341a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <xLimit2>
    341e:	88 23       	and	r24, r24
    3420:	49 f3       	breq	.-46     	; 0x33f4 <moveRight+0x22>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3422:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	08 95       	ret
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3430:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3432:	df 91       	pop	r29
    3434:	cf 91       	pop	r28
    3436:	1f 91       	pop	r17
    3438:	0f 91       	pop	r16
    343a:	ff 90       	pop	r15
    343c:	08 95       	ret

0000343e <xLimit1>:

// global home flag ( machine should only do home move if this is FALSE)
unsigned char gHomed = FALSE;

unsigned char xLimit1( void ) 
{
    343e:	1f 93       	push	r17
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
    3440:	89 b1       	in	r24, 0x09	; 9
	
	if( limit ) {
    3442:	18 2f       	mov	r17, r24
    3444:	18 70       	andi	r17, 0x08	; 8
    3446:	83 ff       	sbrs	r24, 3
    3448:	06 c0       	rjmp	.+12     	; 0x3456 <xLimit1+0x18>
		// no longer homed
		gHomed = FALSE;
    344a:	10 92 55 05 	sts	0x0555, r1
		printPgmString(PSTR("xLimit1\r\n"));
    344e:	8a ea       	ldi	r24, 0xAA	; 170
    3450:	95 e0       	ldi	r25, 0x05	; 5
    3452:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
	}

	return limit;
}
    3456:	81 2f       	mov	r24, r17
    3458:	1f 91       	pop	r17
    345a:	08 95       	ret

0000345c <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	ec 01       	movw	r28, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3468:	81 b3       	in	r24, 0x11	; 17
    346a:	85 73       	andi	r24, 0x35	; 53
    346c:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    346e:	20 97       	sbiw	r28, 0x00	; 0
    3470:	19 f1       	breq	.+70     	; 0x34b8 <moveLeft+0x5c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3472:	75 e3       	ldi	r23, 0x35	; 53
    3474:	f7 2e       	mov	r15, r23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3476:	00 e6       	ldi	r16, 0x60	; 96
    3478:	14 e0       	ldi	r17, 0x04	; 4
    347a:	13 c0       	rjmp	.+38     	; 0x34a2 <moveLeft+0x46>

	//  hit left limit or head down?
  	if( xLimit1() || is_head_down() ) {
    347c:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    3480:	88 23       	and	r24, r24
    3482:	99 f4       	brne	.+38     	; 0x34aa <moveLeft+0x4e>
#endif

		return 0;
	}

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3484:	81 b3       	in	r24, 0x11	; 17
    3486:	8a 7c       	andi	r24, 0xCA	; 202
    3488:	81 60       	ori	r24, 0x01	; 1
    348a:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    348c:	8f 2d       	mov	r24, r15
    348e:	8a 95       	dec	r24
    3490:	f1 f7       	brne	.-4      	; 0x348e <moveLeft+0x32>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3492:	81 b3       	in	r24, 0x11	; 17
    3494:	8a 7c       	andi	r24, 0xCA	; 202
    3496:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3498:	c8 01       	movw	r24, r16
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <moveLeft+0x3e>
    349e:	21 97       	sbiw	r28, 0x01	; 1
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    34a0:	59 f0       	breq	.+22     	; 0x34b8 <moveLeft+0x5c>

	//  hit left limit or head down?
  	if( xLimit1() || is_head_down() ) {
    34a2:	0e 94 1f 1a 	call	0x343e	; 0x343e <xLimit1>
    34a6:	88 23       	and	r24, r24
    34a8:	49 f3       	breq	.-46     	; 0x347c <moveLeft+0x20>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    34aa:	80 e0       	ldi	r24, 0x00	; 0
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	1f 91       	pop	r17
    34b2:	0f 91       	pop	r16
    34b4:	ff 90       	pop	r15
    34b6:	08 95       	ret
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    34b8:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	08 95       	ret

000034c6 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    34c6:	07 c0       	rjmp	.+14     	; 0x34d6 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    34c8:	83 b7       	in	r24, 0x33	; 51
    34ca:	81 60       	ori	r24, 0x01	; 1
    34cc:	83 bf       	out	0x33, r24	; 51
    34ce:	88 95       	sleep
    34d0:	83 b7       	in	r24, 0x33	; 51
    34d2:	8e 7f       	andi	r24, 0xFE	; 254
    34d4:	83 bf       	out	0x33, r24	; 51
    34d6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <plan_get_current_block>
    34da:	89 2b       	or	r24, r25
    34dc:	a9 f7       	brne	.-22     	; 0x34c8 <st_synchronize+0x2>
}
    34de:	08 95       	ret

000034e0 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    34e0:	1f 92       	push	r1
    34e2:	0f 92       	push	r0
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	0f 92       	push	r0
    34e8:	0b b6       	in	r0, 0x3b	; 59
    34ea:	0f 92       	push	r0
    34ec:	11 24       	eor	r1, r1
    34ee:	ef 92       	push	r14
    34f0:	ff 92       	push	r15
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	2f 93       	push	r18
    34f8:	3f 93       	push	r19
    34fa:	4f 93       	push	r20
    34fc:	5f 93       	push	r21
    34fe:	6f 93       	push	r22
    3500:	7f 93       	push	r23
    3502:	8f 93       	push	r24
    3504:	9f 93       	push	r25
    3506:	af 93       	push	r26
    3508:	bf 93       	push	r27
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	ef 93       	push	r30
    3510:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    3512:	80 91 55 05 	lds	r24, 0x0555
    3516:	88 23       	and	r24, r24
    3518:	49 f1       	breq	.+82     	; 0x356c <__vector_17+0x8c>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

	// Check all limit switches
	if( LIMIT_PIN & 0xf ) {
    351a:	89 b1       	in	r24, 0x09	; 9
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	8f 70       	andi	r24, 0x0F	; 15
    3520:	90 70       	andi	r25, 0x00	; 0
    3522:	89 2b       	or	r24, r25
    3524:	61 f1       	breq	.+88     	; 0x357e <__vector_17+0x9e>
		gHomed = FALSE ;
    3526:	10 92 55 05 	sts	0x0555, r1
		// set ack
		ackHost = 'L';
    352a:	8c e4       	ldi	r24, 0x4C	; 76
    352c:	80 93 54 05 	sts	0x0554, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    3530:	80 91 6f 00 	lds	r24, 0x006F
    3534:	8d 7f       	andi	r24, 0xFD	; 253
    3536:	80 93 6f 00 	sts	0x006F, r24
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
}
    353a:	ff 91       	pop	r31
    353c:	ef 91       	pop	r30
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	bf 91       	pop	r27
    3544:	af 91       	pop	r26
    3546:	9f 91       	pop	r25
    3548:	8f 91       	pop	r24
    354a:	7f 91       	pop	r23
    354c:	6f 91       	pop	r22
    354e:	5f 91       	pop	r21
    3550:	4f 91       	pop	r20
    3552:	3f 91       	pop	r19
    3554:	2f 91       	pop	r18
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	ff 90       	pop	r15
    355c:	ef 90       	pop	r14
    355e:	0f 90       	pop	r0
    3560:	0b be       	out	0x3b, r0	; 59
    3562:	0f 90       	pop	r0
    3564:	0f be       	out	0x3f, r0	; 63
    3566:	0f 90       	pop	r0
    3568:	1f 90       	pop	r1
    356a:	18 95       	reti
{        
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
		// set ack
		ackHost = 'H';
    356c:	88 e4       	ldi	r24, 0x48	; 72
    356e:	80 93 54 05 	sts	0x0554, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    3572:	80 91 6f 00 	lds	r24, 0x006F
    3576:	8d 7f       	andi	r24, 0xFD	; 253
    3578:	80 93 6f 00 	sts	0x006F, r24
    357c:	de cf       	rjmp	.-68     	; 0x353a <__vector_17+0x5a>
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

	// don't move if the head is down, this one is ok to let it keep running  
	if( is_head_down() ) {
    357e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    3582:	88 23       	and	r24, r24
    3584:	d1 f6       	brne	.-76     	; 0x353a <__vector_17+0x5a>
		return;
	}

  if(busy){ 
    3586:	80 91 6d 05 	lds	r24, 0x056D
    358a:	90 91 6e 05 	lds	r25, 0x056E
    358e:	89 2b       	or	r24, r25
    3590:	a1 f6       	brne	.-88     	; 0x353a <__vector_17+0x5a>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    3592:	91 b3       	in	r25, 0x11	; 17
    3594:	80 91 bb 06 	lds	r24, 0x06BB
    3598:	8a 7c       	andi	r24, 0xCA	; 202
    359a:	95 73       	andi	r25, 0x35	; 53
    359c:	89 2b       	or	r24, r25
    359e:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    35a0:	81 b3       	in	r24, 0x11	; 17
    35a2:	8a 7c       	andi	r24, 0xCA	; 202
    35a4:	90 91 58 05 	lds	r25, 0x0558
    35a8:	89 2b       	or	r24, r25
    35aa:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    35ac:	80 91 a6 06 	lds	r24, 0x06A6
    35b0:	88 0f       	add	r24, r24
    35b2:	84 50       	subi	r24, 0x04	; 4
    35b4:	81 95       	neg	r24
    35b6:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    35ba:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	90 93 6e 05 	sts	0x056E, r25
    35c4:	80 93 6d 05 	sts	0x056D, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    35c8:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    35ca:	e0 91 56 05 	lds	r30, 0x0556
    35ce:	f0 91 57 05 	lds	r31, 0x0557
    35d2:	30 97       	sbiw	r30, 0x00	; 0
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <__vector_17+0xf8>
    35d6:	cb c1       	rjmp	.+918    	; 0x396e <__vector_17+0x48e>

    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    35d8:	80 89       	ldd	r24, Z+16	; 0x10
    35da:	80 93 bb 06 	sts	0x06BB, r24
    out_bits = 0;
    35de:	10 92 58 05 	sts	0x0558, r1
    counter_x += current_block->steps_x;
    35e2:	20 91 59 05 	lds	r18, 0x0559
    35e6:	30 91 5a 05 	lds	r19, 0x055A
    35ea:	40 91 5b 05 	lds	r20, 0x055B
    35ee:	50 91 5c 05 	lds	r21, 0x055C
    35f2:	80 81       	ld	r24, Z
    35f4:	91 81       	ldd	r25, Z+1	; 0x01
    35f6:	a2 81       	ldd	r26, Z+2	; 0x02
    35f8:	b3 81       	ldd	r27, Z+3	; 0x03
    35fa:	28 0f       	add	r18, r24
    35fc:	39 1f       	adc	r19, r25
    35fe:	4a 1f       	adc	r20, r26
    3600:	5b 1f       	adc	r21, r27
    3602:	20 93 59 05 	sts	0x0559, r18
    3606:	30 93 5a 05 	sts	0x055A, r19
    360a:	40 93 5b 05 	sts	0x055B, r20
    360e:	50 93 5c 05 	sts	0x055C, r21
    if (counter_x > 0) {
    3612:	12 16       	cp	r1, r18
    3614:	13 06       	cpc	r1, r19
    3616:	14 06       	cpc	r1, r20
    3618:	15 06       	cpc	r1, r21
    361a:	0c f0       	brlt	.+2      	; 0x361e <__vector_17+0x13e>
    361c:	46 c1       	rjmp	.+652    	; 0x38aa <__vector_17+0x3ca>
      out_bits |= (1<<X_STEP_BIT);
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	80 93 58 05 	sts	0x0558, r24
      counter_x -= current_block->step_event_count;
    3624:	e1 88       	ldd	r14, Z+17	; 0x11
    3626:	f2 88       	ldd	r15, Z+18	; 0x12
    3628:	03 89       	ldd	r16, Z+19	; 0x13
    362a:	14 89       	ldd	r17, Z+20	; 0x14
    362c:	2e 19       	sub	r18, r14
    362e:	3f 09       	sbc	r19, r15
    3630:	40 0b       	sbc	r20, r16
    3632:	51 0b       	sbc	r21, r17
    3634:	20 93 59 05 	sts	0x0559, r18
    3638:	30 93 5a 05 	sts	0x055A, r19
    363c:	40 93 5b 05 	sts	0x055B, r20
    3640:	50 93 5c 05 	sts	0x055C, r21
    }
    counter_y += current_block->steps_y;
    3644:	20 91 5d 05 	lds	r18, 0x055D
    3648:	30 91 5e 05 	lds	r19, 0x055E
    364c:	40 91 5f 05 	lds	r20, 0x055F
    3650:	50 91 60 05 	lds	r21, 0x0560
    3654:	84 81       	ldd	r24, Z+4	; 0x04
    3656:	95 81       	ldd	r25, Z+5	; 0x05
    3658:	a6 81       	ldd	r26, Z+6	; 0x06
    365a:	b7 81       	ldd	r27, Z+7	; 0x07
    365c:	28 0f       	add	r18, r24
    365e:	39 1f       	adc	r19, r25
    3660:	4a 1f       	adc	r20, r26
    3662:	5b 1f       	adc	r21, r27
    3664:	20 93 5d 05 	sts	0x055D, r18
    3668:	30 93 5e 05 	sts	0x055E, r19
    366c:	40 93 5f 05 	sts	0x055F, r20
    3670:	50 93 60 05 	sts	0x0560, r21
    if (counter_y > 0) {
    3674:	12 16       	cp	r1, r18
    3676:	13 06       	cpc	r1, r19
    3678:	14 06       	cpc	r1, r20
    367a:	15 06       	cpc	r1, r21
    367c:	8c f4       	brge	.+34     	; 0x36a0 <__vector_17+0x1c0>
      out_bits |= (1<<Y_STEP_BIT);
    367e:	80 91 58 05 	lds	r24, 0x0558
    3682:	84 60       	ori	r24, 0x04	; 4
    3684:	80 93 58 05 	sts	0x0558, r24
      counter_y -= current_block->step_event_count;
    3688:	2e 19       	sub	r18, r14
    368a:	3f 09       	sbc	r19, r15
    368c:	40 0b       	sbc	r20, r16
    368e:	51 0b       	sbc	r21, r17
    3690:	20 93 5d 05 	sts	0x055D, r18
    3694:	30 93 5e 05 	sts	0x055E, r19
    3698:	40 93 5f 05 	sts	0x055F, r20
    369c:	50 93 60 05 	sts	0x0560, r21
    }
    counter_z += current_block->steps_z;
    36a0:	20 91 61 05 	lds	r18, 0x0561
    36a4:	30 91 62 05 	lds	r19, 0x0562
    36a8:	40 91 63 05 	lds	r20, 0x0563
    36ac:	50 91 64 05 	lds	r21, 0x0564
    36b0:	80 85       	ldd	r24, Z+8	; 0x08
    36b2:	91 85       	ldd	r25, Z+9	; 0x09
    36b4:	a2 85       	ldd	r26, Z+10	; 0x0a
    36b6:	b3 85       	ldd	r27, Z+11	; 0x0b
    36b8:	28 0f       	add	r18, r24
    36ba:	39 1f       	adc	r19, r25
    36bc:	4a 1f       	adc	r20, r26
    36be:	5b 1f       	adc	r21, r27
    36c0:	20 93 61 05 	sts	0x0561, r18
    36c4:	30 93 62 05 	sts	0x0562, r19
    36c8:	40 93 63 05 	sts	0x0563, r20
    36cc:	50 93 64 05 	sts	0x0564, r21
    if (counter_z > 0) {
    36d0:	12 16       	cp	r1, r18
    36d2:	13 06       	cpc	r1, r19
    36d4:	14 06       	cpc	r1, r20
    36d6:	15 06       	cpc	r1, r21
    36d8:	8c f4       	brge	.+34     	; 0x36fc <__vector_17+0x21c>
      out_bits |= (1<<Z_STEP_BIT);
    36da:	80 91 58 05 	lds	r24, 0x0558
    36de:	80 61       	ori	r24, 0x10	; 16
    36e0:	80 93 58 05 	sts	0x0558, r24
      counter_z -= current_block->step_event_count;
    36e4:	2e 19       	sub	r18, r14
    36e6:	3f 09       	sbc	r19, r15
    36e8:	40 0b       	sbc	r20, r16
    36ea:	51 0b       	sbc	r21, r17
    36ec:	20 93 61 05 	sts	0x0561, r18
    36f0:	30 93 62 05 	sts	0x0562, r19
    36f4:	40 93 63 05 	sts	0x0563, r20
    36f8:	50 93 64 05 	sts	0x0564, r21
    }
    counter_c += current_block->steps_c;
    36fc:	20 91 65 05 	lds	r18, 0x0565
    3700:	30 91 66 05 	lds	r19, 0x0566
    3704:	40 91 67 05 	lds	r20, 0x0567
    3708:	50 91 68 05 	lds	r21, 0x0568
    370c:	84 85       	ldd	r24, Z+12	; 0x0c
    370e:	95 85       	ldd	r25, Z+13	; 0x0d
    3710:	a6 85       	ldd	r26, Z+14	; 0x0e
    3712:	b7 85       	ldd	r27, Z+15	; 0x0f
    3714:	28 0f       	add	r18, r24
    3716:	39 1f       	adc	r19, r25
    3718:	4a 1f       	adc	r20, r26
    371a:	5b 1f       	adc	r21, r27
    371c:	20 93 65 05 	sts	0x0565, r18
    3720:	30 93 66 05 	sts	0x0566, r19
    3724:	40 93 67 05 	sts	0x0567, r20
    3728:	50 93 68 05 	sts	0x0568, r21
    if (counter_c > 0) {
    372c:	12 16       	cp	r1, r18
    372e:	13 06       	cpc	r1, r19
    3730:	14 06       	cpc	r1, r20
    3732:	15 06       	cpc	r1, r21
    3734:	8c f4       	brge	.+34     	; 0x3758 <__vector_17+0x278>
      out_bits |= (1<<C_STEP_BIT);
    3736:	80 91 58 05 	lds	r24, 0x0558
    373a:	80 62       	ori	r24, 0x20	; 32
    373c:	80 93 58 05 	sts	0x0558, r24
      counter_c -= current_block->step_event_count;
    3740:	2e 19       	sub	r18, r14
    3742:	3f 09       	sbc	r19, r15
    3744:	40 0b       	sbc	r20, r16
    3746:	51 0b       	sbc	r21, r17
    3748:	20 93 65 05 	sts	0x0565, r18
    374c:	30 93 66 05 	sts	0x0566, r19
    3750:	40 93 67 05 	sts	0x0567, r20
    3754:	50 93 68 05 	sts	0x0568, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3758:	80 91 69 05 	lds	r24, 0x0569
    375c:	90 91 6a 05 	lds	r25, 0x056A
    3760:	a0 91 6b 05 	lds	r26, 0x056B
    3764:	b0 91 6c 05 	lds	r27, 0x056C
    3768:	01 96       	adiw	r24, 0x01	; 1
    376a:	a1 1d       	adc	r26, r1
    376c:	b1 1d       	adc	r27, r1
    376e:	80 93 69 05 	sts	0x0569, r24
    3772:	90 93 6a 05 	sts	0x056A, r25
    3776:	a0 93 6b 05 	sts	0x056B, r26
    377a:	b0 93 6c 05 	sts	0x056C, r27
    if (step_events_completed >= current_block->step_event_count) {
    377e:	8e 15       	cp	r24, r14
    3780:	9f 05       	cpc	r25, r15
    3782:	a0 07       	cpc	r26, r16
    3784:	b1 07       	cpc	r27, r17
    3786:	08 f0       	brcs	.+2      	; 0x378a <__vector_17+0x2aa>
    3788:	95 c0       	rjmp	.+298    	; 0x38b4 <__vector_17+0x3d4>
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
    378a:	80 91 58 05 	lds	r24, 0x0558
    378e:	95 e3       	ldi	r25, 0x35	; 53
    3790:	89 27       	eor	r24, r25
    3792:	80 93 58 05 	sts	0x0558, r24
  dir_bits ^= DIRECTION_INVERT_MASK;
    3796:	80 91 bb 06 	lds	r24, 0x06BB
    379a:	9a ec       	ldi	r25, 0xCA	; 202
    379c:	89 27       	eor	r24, r25
    379e:	80 93 bb 06 	sts	0x06BB, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    37a2:	20 91 6f 05 	lds	r18, 0x056F
    37a6:	30 91 70 05 	lds	r19, 0x0570
    37aa:	40 91 71 05 	lds	r20, 0x0571
    37ae:	50 91 72 05 	lds	r21, 0x0572
    37b2:	80 91 73 05 	lds	r24, 0x0573
    37b6:	90 91 74 05 	lds	r25, 0x0574
    37ba:	a0 91 75 05 	lds	r26, 0x0575
    37be:	b0 91 76 05 	lds	r27, 0x0576
    37c2:	28 0f       	add	r18, r24
    37c4:	39 1f       	adc	r19, r25
    37c6:	4a 1f       	adc	r20, r26
    37c8:	5b 1f       	adc	r21, r27
    37ca:	20 93 73 05 	sts	0x0573, r18
    37ce:	30 93 74 05 	sts	0x0574, r19
    37d2:	40 93 75 05 	sts	0x0575, r20
    37d6:	50 93 76 05 	sts	0x0576, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    37da:	21 38       	cpi	r18, 0x81	; 129
    37dc:	0a e1       	ldi	r16, 0x1A	; 26
    37de:	30 07       	cpc	r19, r16
    37e0:	06 e0       	ldi	r16, 0x06	; 6
    37e2:	40 07       	cpc	r20, r16
    37e4:	00 e0       	ldi	r16, 0x00	; 0
    37e6:	50 07       	cpc	r21, r16
    37e8:	08 f4       	brcc	.+2      	; 0x37ec <__vector_17+0x30c>
    37ea:	5a c0       	rjmp	.+180    	; 0x38a0 <__vector_17+0x3c0>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    37ec:	20 58       	subi	r18, 0x80	; 128
    37ee:	3a 41       	sbci	r19, 0x1A	; 26
    37f0:	46 40       	sbci	r20, 0x06	; 6
    37f2:	50 40       	sbci	r21, 0x00	; 0
    37f4:	20 93 73 05 	sts	0x0573, r18
    37f8:	30 93 74 05 	sts	0x0574, r19
    37fc:	40 93 75 05 	sts	0x0575, r20
    3800:	50 93 76 05 	sts	0x0576, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
static inline void trapezoid_generator_tick() {     
  if (current_block) {
    3804:	e0 91 56 05 	lds	r30, 0x0556
    3808:	f0 91 57 05 	lds	r31, 0x0557
    380c:	30 97       	sbiw	r30, 0x00	; 0
    380e:	09 f4       	brne	.+2      	; 0x3812 <__vector_17+0x332>
    3810:	47 c0       	rjmp	.+142    	; 0x38a0 <__vector_17+0x3c0>
    if (step_events_completed < current_block->accelerate_until) {
    3812:	20 91 69 05 	lds	r18, 0x0569
    3816:	30 91 6a 05 	lds	r19, 0x056A
    381a:	40 91 6b 05 	lds	r20, 0x056B
    381e:	50 91 6c 05 	lds	r21, 0x056C
    3822:	ef 5b       	subi	r30, 0xBF	; 191
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	80 81       	ld	r24, Z
    3828:	91 81       	ldd	r25, Z+1	; 0x01
    382a:	a2 81       	ldd	r26, Z+2	; 0x02
    382c:	b3 81       	ldd	r27, Z+3	; 0x03
    382e:	e1 54       	subi	r30, 0x41	; 65
    3830:	f0 40       	sbci	r31, 0x00	; 0
    3832:	28 17       	cp	r18, r24
    3834:	39 07       	cpc	r19, r25
    3836:	4a 07       	cpc	r20, r26
    3838:	5b 07       	cpc	r21, r27
    383a:	08 f0       	brcs	.+2      	; 0x383e <__vector_17+0x35e>
    383c:	42 c0       	rjmp	.+132    	; 0x38c2 <__vector_17+0x3e2>
      trapezoid_adjusted_rate += current_block->rate_delta;
    383e:	fd 96       	adiw	r30, 0x3d	; 61
    3840:	80 81       	ld	r24, Z
    3842:	91 81       	ldd	r25, Z+1	; 0x01
    3844:	a2 81       	ldd	r26, Z+2	; 0x02
    3846:	b3 81       	ldd	r27, Z+3	; 0x03
    3848:	fd 97       	sbiw	r30, 0x3d	; 61
    384a:	20 91 77 05 	lds	r18, 0x0577
    384e:	30 91 78 05 	lds	r19, 0x0578
    3852:	40 91 79 05 	lds	r20, 0x0579
    3856:	50 91 7a 05 	lds	r21, 0x057A
    385a:	28 0f       	add	r18, r24
    385c:	39 1f       	adc	r19, r25
    385e:	4a 1f       	adc	r20, r26
    3860:	5b 1f       	adc	r21, r27
    3862:	20 93 77 05 	sts	0x0577, r18
    3866:	30 93 78 05 	sts	0x0578, r19
    386a:	40 93 79 05 	sts	0x0579, r20
    386e:	50 93 7a 05 	sts	0x057A, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3872:	85 89       	ldd	r24, Z+21	; 0x15
    3874:	96 89       	ldd	r25, Z+22	; 0x16
    3876:	a7 89       	ldd	r26, Z+23	; 0x17
    3878:	b0 8d       	ldd	r27, Z+24	; 0x18
    387a:	82 17       	cp	r24, r18
    387c:	93 07       	cpc	r25, r19
    387e:	a4 07       	cpc	r26, r20
    3880:	b5 07       	cpc	r27, r21
    3882:	50 f4       	brcc	.+20     	; 0x3898 <__vector_17+0x3b8>
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
        trapezoid_adjusted_rate -= current_block->rate_delta;
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
        trapezoid_adjusted_rate = current_block->final_rate;
    3884:	80 93 77 05 	sts	0x0577, r24
    3888:	90 93 78 05 	sts	0x0578, r25
    388c:	a0 93 79 05 	sts	0x0579, r26
    3890:	b0 93 7a 05 	sts	0x057A, r27
    3894:	9c 01       	movw	r18, r24
    3896:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3898:	ca 01       	movw	r24, r20
    389a:	b9 01       	movw	r22, r18
    389c:	0e 94 90 18 	call	0x3120	; 0x3120 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    38a0:	10 92 6e 05 	sts	0x056E, r1
    38a4:	10 92 6d 05 	sts	0x056D, r1
    38a8:	48 ce       	rjmp	.-880    	; 0x353a <__vector_17+0x5a>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    38aa:	e1 88       	ldd	r14, Z+17	; 0x11
    38ac:	f2 88       	ldd	r15, Z+18	; 0x12
    38ae:	03 89       	ldd	r16, Z+19	; 0x13
    38b0:	14 89       	ldd	r17, Z+20	; 0x14
    38b2:	c8 ce       	rjmp	.-624    	; 0x3644 <__vector_17+0x164>
      counter_c -= current_block->step_event_count;
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    38b4:	10 92 57 05 	sts	0x0557, r1
    38b8:	10 92 56 05 	sts	0x0556, r1
      plan_discard_current_block();
    38bc:	0e 94 a0 0b 	call	0x1740	; 0x1740 <plan_discard_current_block>
    38c0:	64 cf       	rjmp	.-312    	; 0x378a <__vector_17+0x2aa>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    38c2:	eb 5b       	subi	r30, 0xBB	; 187
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 81       	ld	r24, Z
    38c8:	91 81       	ldd	r25, Z+1	; 0x01
    38ca:	a2 81       	ldd	r26, Z+2	; 0x02
    38cc:	b3 81       	ldd	r27, Z+3	; 0x03
    38ce:	e5 54       	subi	r30, 0x45	; 69
    38d0:	f0 40       	sbci	r31, 0x00	; 0
    38d2:	82 17       	cp	r24, r18
    38d4:	93 07       	cpc	r25, r19
    38d6:	a4 07       	cpc	r26, r20
    38d8:	b5 07       	cpc	r27, r21
    38da:	70 f5       	brcc	.+92     	; 0x3938 <__vector_17+0x458>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    38dc:	fd 96       	adiw	r30, 0x3d	; 61
    38de:	60 81       	ld	r22, Z
    38e0:	71 81       	ldd	r23, Z+1	; 0x01
    38e2:	82 81       	ldd	r24, Z+2	; 0x02
    38e4:	93 81       	ldd	r25, Z+3	; 0x03
    38e6:	fd 97       	sbiw	r30, 0x3d	; 61
    38e8:	20 91 77 05 	lds	r18, 0x0577
    38ec:	30 91 78 05 	lds	r19, 0x0578
    38f0:	40 91 79 05 	lds	r20, 0x0579
    38f4:	50 91 7a 05 	lds	r21, 0x057A
    38f8:	62 17       	cp	r22, r18
    38fa:	73 07       	cpc	r23, r19
    38fc:	84 07       	cpc	r24, r20
    38fe:	95 07       	cpc	r25, r21
    3900:	80 f4       	brcc	.+32     	; 0x3922 <__vector_17+0x442>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3902:	79 01       	movw	r14, r18
    3904:	8a 01       	movw	r16, r20
    3906:	e6 1a       	sub	r14, r22
    3908:	f7 0a       	sbc	r15, r23
    390a:	08 0b       	sbc	r16, r24
    390c:	19 0b       	sbc	r17, r25
    390e:	e0 92 77 05 	sts	0x0577, r14
    3912:	f0 92 78 05 	sts	0x0578, r15
    3916:	00 93 79 05 	sts	0x0579, r16
    391a:	10 93 7a 05 	sts	0x057A, r17
    391e:	a8 01       	movw	r20, r16
    3920:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    3922:	81 ad       	ldd	r24, Z+57	; 0x39
    3924:	92 ad       	ldd	r25, Z+58	; 0x3a
    3926:	a3 ad       	ldd	r26, Z+59	; 0x3b
    3928:	b4 ad       	ldd	r27, Z+60	; 0x3c
    392a:	28 17       	cp	r18, r24
    392c:	39 07       	cpc	r19, r25
    392e:	4a 07       	cpc	r20, r26
    3930:	5b 07       	cpc	r21, r27
    3932:	08 f0       	brcs	.+2      	; 0x3936 <__vector_17+0x456>
    3934:	b1 cf       	rjmp	.-158    	; 0x3898 <__vector_17+0x3b8>
    3936:	a6 cf       	rjmp	.-180    	; 0x3884 <__vector_17+0x3a4>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    3938:	25 89       	ldd	r18, Z+21	; 0x15
    393a:	36 89       	ldd	r19, Z+22	; 0x16
    393c:	47 89       	ldd	r20, Z+23	; 0x17
    393e:	50 8d       	ldd	r21, Z+24	; 0x18
    3940:	80 91 77 05 	lds	r24, 0x0577
    3944:	90 91 78 05 	lds	r25, 0x0578
    3948:	a0 91 79 05 	lds	r26, 0x0579
    394c:	b0 91 7a 05 	lds	r27, 0x057A
    3950:	28 17       	cp	r18, r24
    3952:	39 07       	cpc	r19, r25
    3954:	4a 07       	cpc	r20, r26
    3956:	5b 07       	cpc	r21, r27
    3958:	09 f4       	brne	.+2      	; 0x395c <__vector_17+0x47c>
    395a:	a2 cf       	rjmp	.-188    	; 0x38a0 <__vector_17+0x3c0>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    395c:	20 93 77 05 	sts	0x0577, r18
    3960:	30 93 78 05 	sts	0x0578, r19
    3964:	40 93 79 05 	sts	0x0579, r20
    3968:	50 93 7a 05 	sts	0x057A, r21
    396c:	95 cf       	rjmp	.-214    	; 0x3898 <__vector_17+0x3b8>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    396e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <plan_get_current_block>
    3972:	ec 01       	movw	r28, r24
    3974:	90 93 57 05 	sts	0x0557, r25
    3978:	80 93 56 05 	sts	0x0556, r24
    if (current_block != NULL) {
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	09 f4       	brne	.+2      	; 0x3982 <__vector_17+0x4a2>
    3980:	52 c0       	rjmp	.+164    	; 0x3a26 <__vector_17+0x546>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
static inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3982:	6d a9       	ldd	r22, Y+53	; 0x35
    3984:	7e a9       	ldd	r23, Y+54	; 0x36
    3986:	8f a9       	ldd	r24, Y+55	; 0x37
    3988:	98 ad       	ldd	r25, Y+56	; 0x38
    398a:	60 93 77 05 	sts	0x0577, r22
    398e:	70 93 78 05 	sts	0x0578, r23
    3992:	80 93 79 05 	sts	0x0579, r24
    3996:	90 93 7a 05 	sts	0x057A, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    399a:	10 92 73 05 	sts	0x0573, r1
    399e:	10 92 74 05 	sts	0x0574, r1
    39a2:	10 92 75 05 	sts	0x0575, r1
    39a6:	10 92 76 05 	sts	0x0576, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    39aa:	0e 94 90 18 	call	0x3120	; 0x3120 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    39ae:	89 89       	ldd	r24, Y+17	; 0x11
    39b0:	9a 89       	ldd	r25, Y+18	; 0x12
    39b2:	ab 89       	ldd	r26, Y+19	; 0x13
    39b4:	bc 89       	ldd	r27, Y+20	; 0x14
    39b6:	b5 95       	asr	r27
    39b8:	a7 95       	ror	r26
    39ba:	97 95       	ror	r25
    39bc:	87 95       	ror	r24
    39be:	b0 95       	com	r27
    39c0:	a0 95       	com	r26
    39c2:	90 95       	com	r25
    39c4:	81 95       	neg	r24
    39c6:	9f 4f       	sbci	r25, 0xFF	; 255
    39c8:	af 4f       	sbci	r26, 0xFF	; 255
    39ca:	bf 4f       	sbci	r27, 0xFF	; 255
    39cc:	80 93 59 05 	sts	0x0559, r24
    39d0:	90 93 5a 05 	sts	0x055A, r25
    39d4:	a0 93 5b 05 	sts	0x055B, r26
    39d8:	b0 93 5c 05 	sts	0x055C, r27
      counter_y = counter_x;
    39dc:	80 93 5d 05 	sts	0x055D, r24
    39e0:	90 93 5e 05 	sts	0x055E, r25
    39e4:	a0 93 5f 05 	sts	0x055F, r26
    39e8:	b0 93 60 05 	sts	0x0560, r27
      counter_z = counter_x;
    39ec:	80 93 61 05 	sts	0x0561, r24
    39f0:	90 93 62 05 	sts	0x0562, r25
    39f4:	a0 93 63 05 	sts	0x0563, r26
    39f8:	b0 93 64 05 	sts	0x0564, r27
      counter_c = counter_x;
    39fc:	80 93 65 05 	sts	0x0565, r24
    3a00:	90 93 66 05 	sts	0x0566, r25
    3a04:	a0 93 67 05 	sts	0x0567, r26
    3a08:	b0 93 68 05 	sts	0x0568, r27
      step_events_completed = 0;
    3a0c:	10 92 69 05 	sts	0x0569, r1
    3a10:	10 92 6a 05 	sts	0x056A, r1
    3a14:	10 92 6b 05 	sts	0x056B, r1
    3a18:	10 92 6c 05 	sts	0x056C, r1
    3a1c:	e0 91 56 05 	lds	r30, 0x0556
    3a20:	f0 91 57 05 	lds	r31, 0x0557
    3a24:	d9 cd       	rjmp	.-1102   	; 0x35d8 <__vector_17+0xf8>
    } else {

      DISABLE_STEPPER_DRIVER_INTERRUPT();
    3a26:	80 91 6f 00 	lds	r24, 0x006F
    3a2a:	8d 7f       	andi	r24, 0xFD	; 253
    3a2c:	80 93 6f 00 	sts	0x006F, r24

		// set ack to host, move has finished
	  ackHost = 'X';
    3a30:	88 e5       	ldi	r24, 0x58	; 88
    3a32:	80 93 54 05 	sts	0x0554, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    3a36:	10 92 58 05 	sts	0x0558, r1
    3a3a:	a7 ce       	rjmp	.-690    	; 0x378a <__vector_17+0x2aa>

00003a3c <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3a3c:	ef 92       	push	r14
    3a3e:	ff 92       	push	r15
    3a40:	0f 93       	push	r16
    3a42:	1f 93       	push	r17
    3a44:	7b 01       	movw	r14, r22
    3a46:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    3a48:	22 e0       	ldi	r18, 0x02	; 2
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	40 e0       	ldi	r20, 0x00	; 0
    3a4e:	50 e0       	ldi	r21, 0x00	; 0
    3a50:	0e 94 9f 2f 	call	0x5f3e	; 0x5f3e <__divmodsi4>
    3a54:	20 5c       	subi	r18, 0xC0	; 192
    3a56:	3d 4b       	sbci	r19, 0xBD	; 189
    3a58:	40 4f       	sbci	r20, 0xF0	; 240
    3a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a5c:	ca 01       	movw	r24, r20
    3a5e:	b9 01       	movw	r22, r18
    3a60:	a8 01       	movw	r20, r16
    3a62:	97 01       	movw	r18, r14
    3a64:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <__udivmodsi4>
    3a68:	c9 01       	movw	r24, r18
    3a6a:	da 01       	movw	r26, r20
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	a1 09       	sbc	r26, r1
    3a70:	b1 09       	sbc	r27, r1
    3a72:	29 2f       	mov	r18, r25
    3a74:	3a 2f       	mov	r19, r26
    3a76:	4b 2f       	mov	r20, r27
    3a78:	55 27       	eor	r21, r21
    3a7a:	01 96       	adiw	r24, 0x01	; 1
    3a7c:	a1 1d       	adc	r26, r1
    3a7e:	b1 1d       	adc	r27, r1
    3a80:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    3a84:	81 50       	subi	r24, 0x01	; 1
    3a86:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3a8a:	e0 ec       	ldi	r30, 0xC0	; 192
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	80 81       	ld	r24, Z
    3a90:	8d 7f       	andi	r24, 0xFD	; 253
    3a92:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    3a94:	e1 ec       	ldi	r30, 0xC1	; 193
    3a96:	f0 e0       	ldi	r31, 0x00	; 0
    3a98:	80 81       	ld	r24, Z
    3a9a:	80 61       	ori	r24, 0x10	; 16
    3a9c:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    3a9e:	80 81       	ld	r24, Z
    3aa0:	88 60       	ori	r24, 0x08	; 8
    3aa2:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    3aa4:	80 81       	ld	r24, Z
    3aa6:	80 68       	ori	r24, 0x80	; 128
    3aa8:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	ff 90       	pop	r15
    3ab0:	ef 90       	pop	r14
    3ab2:	08 95       	ret

00003ab4 <serialWrite>:

void serialWrite(unsigned char c)
{
    3ab4:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    3ab6:	80 91 c0 00 	lds	r24, 0x00C0
    3aba:	85 ff       	sbrs	r24, 5
    3abc:	fc cf       	rjmp	.-8      	; 0x3ab6 <serialWrite+0x2>
		;
	UDR0 = c;
    3abe:	90 93 c6 00 	sts	0x00C6, r25
}
    3ac2:	08 95       	ret

00003ac4 <serialAvailable>:

int serialAvailable()
{
    3ac4:	80 91 7b 05 	lds	r24, 0x057B
    3ac8:	90 91 7c 05 	lds	r25, 0x057C
    3acc:	80 50       	subi	r24, 0x00	; 0
    3ace:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad0:	20 91 7d 05 	lds	r18, 0x057D
    3ad4:	30 91 7e 05 	lds	r19, 0x057E
    3ad8:	82 1b       	sub	r24, r18
    3ada:	93 0b       	sbc	r25, r19
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	71 e0       	ldi	r23, 0x01	; 1
    3ae0:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    3ae4:	08 95       	ret

00003ae6 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3ae6:	40 91 7d 05 	lds	r20, 0x057D
    3aea:	50 91 7e 05 	lds	r21, 0x057E
    3aee:	80 91 7b 05 	lds	r24, 0x057B
    3af2:	90 91 7c 05 	lds	r25, 0x057C
    3af6:	84 17       	cp	r24, r20
    3af8:	95 07       	cpc	r25, r21
    3afa:	89 f0       	breq	.+34     	; 0x3b1e <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3afc:	fa 01       	movw	r30, r20
    3afe:	e1 58       	subi	r30, 0x81	; 129
    3b00:	fa 4f       	sbci	r31, 0xFA	; 250
    3b02:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3b04:	ca 01       	movw	r24, r20
    3b06:	01 96       	adiw	r24, 0x01	; 1
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	71 e0       	ldi	r23, 0x01	; 1
    3b0c:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
    3b10:	90 93 7e 05 	sts	0x057E, r25
    3b14:	80 93 7d 05 	sts	0x057D, r24
		return c;
    3b18:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3b1a:	c9 01       	movw	r24, r18
    3b1c:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3b1e:	2f ef       	ldi	r18, 0xFF	; 255
    3b20:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3b22:	c9 01       	movw	r24, r18
    3b24:	08 95       	ret

00003b26 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3b26:	80 91 7d 05 	lds	r24, 0x057D
    3b2a:	90 91 7e 05 	lds	r25, 0x057E
    3b2e:	90 93 7c 05 	sts	0x057C, r25
    3b32:	80 93 7b 05 	sts	0x057B, r24
}
    3b36:	08 95       	ret

00003b38 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3b38:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3b3a:	80 91 c0 00 	lds	r24, 0x00C0
    3b3e:	85 ff       	sbrs	r24, 5
    3b40:	fc cf       	rjmp	.-8      	; 0x3b3a <printByte+0x2>
		;
	UDR0 = c;
    3b42:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3b46:	08 95       	ret

00003b48 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3b48:	fc 01       	movw	r30, r24
	while (*s)
    3b4a:	90 81       	ld	r25, Z
    3b4c:	99 23       	and	r25, r25
    3b4e:	51 f0       	breq	.+20     	; 0x3b64 <printString+0x1c>
		printByte(*s++);
    3b50:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3b52:	80 91 c0 00 	lds	r24, 0x00C0
    3b56:	85 ff       	sbrs	r24, 5
    3b58:	fc cf       	rjmp	.-8      	; 0x3b52 <printString+0xa>
		;
	UDR0 = c;
    3b5a:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3b5e:	90 81       	ld	r25, Z
    3b60:	99 23       	and	r25, r25
    3b62:	b1 f7       	brne	.-20     	; 0x3b50 <printString+0x8>
    3b64:	08 95       	ret

00003b66 <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3b66:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3b68:	94 91       	lpm	r25, Z+
    3b6a:	99 23       	and	r25, r25
    3b6c:	51 f0       	breq	.+20     	; 0x3b82 <printPgmString+0x1c>
    3b6e:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3b70:	80 91 c0 00 	lds	r24, 0x00C0
    3b74:	85 ff       	sbrs	r24, 5
    3b76:	fc cf       	rjmp	.-8      	; 0x3b70 <printPgmString+0xa>
		;
	UDR0 = c;
    3b78:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3b7c:	94 91       	lpm	r25, Z+
    3b7e:	99 23       	and	r25, r25
    3b80:	b1 f7       	brne	.-20     	; 0x3b6e <printPgmString+0x8>
    3b82:	08 95       	ret

00003b84 <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3b84:	2f 92       	push	r2
    3b86:	3f 92       	push	r3
    3b88:	4f 92       	push	r4
    3b8a:	5f 92       	push	r5
    3b8c:	6f 92       	push	r6
    3b8e:	7f 92       	push	r7
    3b90:	8f 92       	push	r8
    3b92:	9f 92       	push	r9
    3b94:	af 92       	push	r10
    3b96:	bf 92       	push	r11
    3b98:	cf 92       	push	r12
    3b9a:	df 92       	push	r13
    3b9c:	ef 92       	push	r14
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	a0 97       	sbiw	r28, 0x20	; 32
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	6b 01       	movw	r12, r22
    3bba:	7c 01       	movw	r14, r24
    3bbc:	29 01       	movw	r4, r18
    3bbe:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3bc0:	61 15       	cp	r22, r1
    3bc2:	71 05       	cpc	r23, r1
    3bc4:	81 05       	cpc	r24, r1
    3bc6:	91 05       	cpc	r25, r1
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <printIntegerInBase+0x48>
    3bca:	50 c0       	rjmp	.+160    	; 0x3c6c <printIntegerInBase+0xe8>
		printByte('0');
		return;
    3bcc:	88 24       	eor	r8, r8
    3bce:	99 24       	eor	r9, r9
    3bd0:	54 01       	movw	r10, r8
    3bd2:	1e 01       	movw	r2, r28
    3bd4:	08 94       	sec
    3bd6:	21 1c       	adc	r2, r1
    3bd8:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3bda:	81 01       	movw	r16, r2
    3bdc:	08 0d       	add	r16, r8
    3bde:	19 1d       	adc	r17, r9
    3be0:	c7 01       	movw	r24, r14
    3be2:	b6 01       	movw	r22, r12
    3be4:	a3 01       	movw	r20, r6
    3be6:	92 01       	movw	r18, r4
    3be8:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <__udivmodsi4>
    3bec:	f8 01       	movw	r30, r16
    3bee:	60 83       	st	Z, r22
    3bf0:	08 94       	sec
    3bf2:	81 1c       	adc	r8, r1
    3bf4:	91 1c       	adc	r9, r1
    3bf6:	a1 1c       	adc	r10, r1
    3bf8:	b1 1c       	adc	r11, r1
		n /= base;
    3bfa:	c7 01       	movw	r24, r14
    3bfc:	b6 01       	movw	r22, r12
    3bfe:	a3 01       	movw	r20, r6
    3c00:	92 01       	movw	r18, r4
    3c02:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <__udivmodsi4>
    3c06:	c9 01       	movw	r24, r18
    3c08:	da 01       	movw	r26, r20
    3c0a:	6c 01       	movw	r12, r24
    3c0c:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3c0e:	c1 14       	cp	r12, r1
    3c10:	d1 04       	cpc	r13, r1
    3c12:	e1 04       	cpc	r14, r1
    3c14:	f1 04       	cpc	r15, r1
    3c16:	09 f7       	brne	.-62     	; 0x3bda <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3c18:	81 14       	cp	r8, r1
    3c1a:	91 04       	cpc	r9, r1
    3c1c:	a1 04       	cpc	r10, r1
    3c1e:	b1 04       	cpc	r11, r1
    3c20:	61 f1       	breq	.+88     	; 0x3c7a <printIntegerInBase+0xf6>
    3c22:	91 01       	movw	r18, r2
    3c24:	28 0d       	add	r18, r8
    3c26:	39 1d       	adc	r19, r9
    3c28:	d5 01       	movw	r26, r10
    3c2a:	c4 01       	movw	r24, r8
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	a1 09       	sbc	r26, r1
    3c30:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    3c32:	ac 01       	movw	r20, r24
    3c34:	48 19       	sub	r20, r8
    3c36:	59 09       	sbc	r21, r9
    3c38:	fa 01       	movw	r30, r20
    3c3a:	e2 0f       	add	r30, r18
    3c3c:	f3 1f       	adc	r31, r19
    3c3e:	e0 81       	ld	r30, Z
    3c40:	ea 30       	cpi	r30, 0x0A	; 10
    3c42:	90 f4       	brcc	.+36     	; 0x3c68 <printIntegerInBase+0xe4>
    3c44:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c46:	80 91 c0 00 	lds	r24, 0x00C0
    3c4a:	85 ff       	sbrs	r24, 5
    3c4c:	fc cf       	rjmp	.-8      	; 0x3c46 <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    3c4e:	e0 93 c6 00 	sts	0x00C6, r30
    3c52:	21 50       	subi	r18, 0x01	; 1
    3c54:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3c56:	22 16       	cp	r2, r18
    3c58:	33 06       	cpc	r3, r19
    3c5a:	79 f0       	breq	.+30     	; 0x3c7a <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    3c5c:	fa 01       	movw	r30, r20
    3c5e:	e2 0f       	add	r30, r18
    3c60:	f3 1f       	adc	r31, r19
    3c62:	e0 81       	ld	r30, Z
    3c64:	ea 30       	cpi	r30, 0x0A	; 10
    3c66:	70 f3       	brcs	.-36     	; 0x3c44 <printIntegerInBase+0xc0>
    3c68:	e9 5c       	subi	r30, 0xC9	; 201
    3c6a:	ed cf       	rjmp	.-38     	; 0x3c46 <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c6c:	80 91 c0 00 	lds	r24, 0x00C0
    3c70:	85 ff       	sbrs	r24, 5
    3c72:	fc cf       	rjmp	.-8      	; 0x3c6c <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    3c74:	80 e3       	ldi	r24, 0x30	; 48
    3c76:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3c7a:	a0 96       	adiw	r28, 0x20	; 32
    3c7c:	0f b6       	in	r0, 0x3f	; 63
    3c7e:	f8 94       	cli
    3c80:	de bf       	out	0x3e, r29	; 62
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	cd bf       	out	0x3d, r28	; 61
    3c86:	cf 91       	pop	r28
    3c88:	df 91       	pop	r29
    3c8a:	1f 91       	pop	r17
    3c8c:	0f 91       	pop	r16
    3c8e:	ff 90       	pop	r15
    3c90:	ef 90       	pop	r14
    3c92:	df 90       	pop	r13
    3c94:	cf 90       	pop	r12
    3c96:	bf 90       	pop	r11
    3c98:	af 90       	pop	r10
    3c9a:	9f 90       	pop	r9
    3c9c:	8f 90       	pop	r8
    3c9e:	7f 90       	pop	r7
    3ca0:	6f 90       	pop	r6
    3ca2:	5f 90       	pop	r5
    3ca4:	4f 90       	pop	r4
    3ca6:	3f 90       	pop	r3
    3ca8:	2f 90       	pop	r2
    3caa:	08 95       	ret

00003cac <printInteger>:

void printInteger(long n)
{
    3cac:	9b 01       	movw	r18, r22
    3cae:	ac 01       	movw	r20, r24
	if (n < 0) {
    3cb0:	97 fd       	sbrc	r25, 7
    3cb2:	09 c0       	rjmp	.+18     	; 0x3cc6 <printInteger+0x1a>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    3cb4:	ca 01       	movw	r24, r20
    3cb6:	b9 01       	movw	r22, r18
    3cb8:	2a e0       	ldi	r18, 0x0A	; 10
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <printIntegerInBase>
}
    3cc4:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3cc6:	80 91 c0 00 	lds	r24, 0x00C0
    3cca:	85 ff       	sbrs	r24, 5
    3ccc:	fc cf       	rjmp	.-8      	; 0x3cc6 <printInteger+0x1a>
		;
	UDR0 = c;
    3cce:	8d e2       	ldi	r24, 0x2D	; 45
    3cd0:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3cd4:	50 95       	com	r21
    3cd6:	40 95       	com	r20
    3cd8:	30 95       	com	r19
    3cda:	21 95       	neg	r18
    3cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cde:	4f 4f       	sbci	r20, 0xFF	; 255
    3ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce2:	e8 cf       	rjmp	.-48     	; 0x3cb4 <printInteger+0x8>

00003ce4 <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3ce4:	22 e0       	ldi	r18, 0x02	; 2
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	50 e0       	ldi	r21, 0x00	; 0
    3cec:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <printIntegerInBase>
  }
    3cf0:	08 95       	ret

00003cf2 <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3cf2:	ef 92       	push	r14
    3cf4:	ff 92       	push	r15
    3cf6:	0f 93       	push	r16
    3cf8:	1f 93       	push	r17
    3cfa:	df 93       	push	r29
    3cfc:	cf 93       	push	r28
    3cfe:	00 d0       	rcall	.+0      	; 0x3d00 <printFloat+0xe>
    3d00:	0f 92       	push	r0
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3d06:	ae 01       	movw	r20, r28
    3d08:	4f 5f       	subi	r20, 0xFF	; 255
    3d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d0c:	0e 94 42 2e 	call	0x5c84	; 0x5c84 <modf>
    3d10:	7b 01       	movw	r14, r22
    3d12:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3d14:	69 81       	ldd	r22, Y+1	; 0x01
    3d16:	7a 81       	ldd	r23, Y+2	; 0x02
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1c:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
    3d20:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3d24:	80 91 c0 00 	lds	r24, 0x00C0
    3d28:	85 ff       	sbrs	r24, 5
    3d2a:	fc cf       	rjmp	.-8      	; 0x3d24 <printFloat+0x32>
		;
	UDR0 = c;
    3d2c:	8e e2       	ldi	r24, 0x2E	; 46
    3d2e:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3d32:	c8 01       	movw	r24, r16
    3d34:	b7 01       	movw	r22, r14
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a e7       	ldi	r20, 0x7A	; 122
    3d3c:	54 e4       	ldi	r21, 0x44	; 68
    3d3e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    3d42:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <round>
    3d46:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__fixsfsi>
    3d4a:	97 fd       	sbrc	r25, 7
    3d4c:	0d c0       	rjmp	.+26     	; 0x3d68 <printFloat+0x76>
    3d4e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <printInteger>
}
    3d52:	0f 90       	pop	r0
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	1f 91       	pop	r17
    3d60:	0f 91       	pop	r16
    3d62:	ff 90       	pop	r15
    3d64:	ef 90       	pop	r14
    3d66:	08 95       	ret
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3d68:	90 95       	com	r25
    3d6a:	80 95       	com	r24
    3d6c:	70 95       	com	r23
    3d6e:	61 95       	neg	r22
    3d70:	7f 4f       	sbci	r23, 0xFF	; 255
    3d72:	8f 4f       	sbci	r24, 0xFF	; 255
    3d74:	9f 4f       	sbci	r25, 0xFF	; 255
    3d76:	eb cf       	rjmp	.-42     	; 0x3d4e <printFloat+0x5c>

00003d78 <__vector_25>:
	rx_buffer_head = rx_buffer_tail;
}

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3d78:	1f 92       	push	r1
    3d7a:	0f 92       	push	r0
    3d7c:	0f b6       	in	r0, 0x3f	; 63
    3d7e:	0f 92       	push	r0
    3d80:	0b b6       	in	r0, 0x3b	; 59
    3d82:	0f 92       	push	r0
    3d84:	11 24       	eor	r1, r1
    3d86:	2f 93       	push	r18
    3d88:	3f 93       	push	r19
    3d8a:	4f 93       	push	r20
    3d8c:	5f 93       	push	r21
    3d8e:	6f 93       	push	r22
    3d90:	7f 93       	push	r23
    3d92:	8f 93       	push	r24
    3d94:	9f 93       	push	r25
    3d96:	af 93       	push	r26
    3d98:	bf 93       	push	r27
    3d9a:	ef 93       	push	r30
    3d9c:	ff 93       	push	r31
	unsigned char c = UDR0;
    3d9e:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3da2:	e0 91 7b 05 	lds	r30, 0x057B
    3da6:	f0 91 7c 05 	lds	r31, 0x057C
    3daa:	cf 01       	movw	r24, r30
    3dac:	01 96       	adiw	r24, 0x01	; 1
    3dae:	60 e0       	ldi	r22, 0x00	; 0
    3db0:	71 e0       	ldi	r23, 0x01	; 1
    3db2:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
    3db6:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3db8:	80 91 7d 05 	lds	r24, 0x057D
    3dbc:	90 91 7e 05 	lds	r25, 0x057E
    3dc0:	28 17       	cp	r18, r24
    3dc2:	39 07       	cpc	r19, r25
    3dc4:	39 f0       	breq	.+14     	; 0x3dd4 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3dc6:	e1 58       	subi	r30, 0x81	; 129
    3dc8:	fa 4f       	sbci	r31, 0xFA	; 250
    3dca:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3dcc:	30 93 7c 05 	sts	0x057C, r19
    3dd0:	20 93 7b 05 	sts	0x057B, r18
	}

	if( c == 0x0ff ) {
    3dd4:	4f 3f       	cpi	r20, 0xFF	; 255
    3dd6:	99 f0       	breq	.+38     	; 0x3dfe <__vector_25+0x86>
		gHomed = 0 ;
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3dd8:	ff 91       	pop	r31
    3dda:	ef 91       	pop	r30
    3ddc:	bf 91       	pop	r27
    3dde:	af 91       	pop	r26
    3de0:	9f 91       	pop	r25
    3de2:	8f 91       	pop	r24
    3de4:	7f 91       	pop	r23
    3de6:	6f 91       	pop	r22
    3de8:	5f 91       	pop	r21
    3dea:	4f 91       	pop	r20
    3dec:	3f 91       	pop	r19
    3dee:	2f 91       	pop	r18
    3df0:	0f 90       	pop	r0
    3df2:	0b be       	out	0x3b, r0	; 59
    3df4:	0f 90       	pop	r0
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	0f 90       	pop	r0
    3dfa:	1f 90       	pop	r1
    3dfc:	18 95       	reti
		rx_buffer_head = i;
	}

	if( c == 0x0ff ) {
		// shut off servo interrupt
		cli();
    3dfe:	f8 94       	cli
		st_disable();
    3e00:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <st_disable>
		// not homed
		gHomed = 0 ;
    3e04:	10 92 55 05 	sts	0x0555, r1
    3e08:	e7 cf       	rjmp	.-50     	; 0x3dd8 <__vector_25+0x60>

00003e0a <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    3e0a:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    3e0c:	e7 e0       	ldi	r30, 0x07	; 7
    3e0e:	f1 e0       	ldi	r31, 0x01	; 1
    3e10:	80 81       	ld	r24, Z
    3e12:	81 60       	ori	r24, 0x01	; 1
    3e14:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3e16:	80 81       	ld	r24, Z
    3e18:	82 60       	ori	r24, 0x02	; 2
    3e1a:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3e1c:	80 81       	ld	r24, Z
    3e1e:	84 60       	ori	r24, 0x04	; 4
    3e20:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3e22:	80 81       	ld	r24, Z
    3e24:	88 60       	ori	r24, 0x08	; 8
    3e26:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3e28:	80 81       	ld	r24, Z
    3e2a:	80 64       	ori	r24, 0x40	; 64
    3e2c:	80 83       	st	Z, r24

// initialise PORT as well

}
    3e2e:	08 95       	ret

00003e30 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	08 95       	ret

00003e34 <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3e3a:	80 91 55 05 	lds	r24, 0x0555
    3e3e:	88 23       	and	r24, r24
    3e40:	19 f4       	brne	.+6      	; 0x3e48 <atc_fire+0x14>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3e42:	df 91       	pop	r29
    3e44:	cf 91       	pop	r28
    3e46:	08 95       	ret

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    3e4e:	20 97       	sbiw	r28, 0x00	; 0
    3e50:	29 f1       	breq	.+74     	; 0x3e9c <atc_fire+0x68>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e52:	80 91 08 01 	lds	r24, 0x0108
    3e56:	81 60       	ori	r24, 0x01	; 1
    3e58:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3e5c:	c3 30       	cpi	r28, 0x03	; 3
    3e5e:	d1 05       	cpc	r29, r1
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <atc_fire+0x30>
    3e62:	46 c0       	rjmp	.+140    	; 0x3ef0 <atc_fire+0xbc>
    3e64:	c4 30       	cpi	r28, 0x04	; 4
    3e66:	d1 05       	cpc	r29, r1
    3e68:	8c f5       	brge	.+98     	; 0x3ecc <atc_fire+0x98>
    3e6a:	c1 30       	cpi	r28, 0x01	; 1
    3e6c:	d1 05       	cpc	r29, r1
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <atc_fire+0x3e>
    3e70:	6d c0       	rjmp	.+218    	; 0x3f4c <atc_fire+0x118>
    3e72:	22 97       	sbiw	r28, 0x02	; 2
    3e74:	09 f4       	brne	.+2      	; 0x3e78 <atc_fire+0x44>
    3e76:	66 c0       	rjmp	.+204    	; 0x3f44 <atc_fire+0x110>
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e78:	80 91 08 01 	lds	r24, 0x0108
    3e7c:	8e 7f       	andi	r24, 0xFE	; 254
    3e7e:	80 93 08 01 	sts	0x0108, r24
    3e82:	28 ee       	ldi	r18, 0xE8	; 232
    3e84:	33 e0       	ldi	r19, 0x03	; 3
    3e86:	40 e9       	ldi	r20, 0x90	; 144
    3e88:	51 e0       	ldi	r21, 0x01	; 1
    3e8a:	ca 01       	movw	r24, r20
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
    3e8e:	f1 f7       	brne	.-4      	; 0x3e8c <atc_fire+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e90:	21 50       	subi	r18, 0x01	; 1
    3e92:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e94:	d1 f7       	brne	.-12     	; 0x3e8a <atc_fire+0x56>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	08 95       	ret

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e9c:	80 91 08 01 	lds	r24, 0x0108
    3ea0:	81 60       	ori	r24, 0x01	; 1
    3ea2:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3ea6:	80 91 08 01 	lds	r24, 0x0108
    3eaa:	82 60       	ori	r24, 0x02	; 2
    3eac:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3eb0:	80 91 08 01 	lds	r24, 0x0108
    3eb4:	84 60       	ori	r24, 0x04	; 4
    3eb6:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3eba:	80 91 08 01 	lds	r24, 0x0108
    3ebe:	88 60       	ori	r24, 0x08	; 8
    3ec0:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>
    3eca:	bb cf       	rjmp	.-138    	; 0x3e42 <atc_fire+0xe>
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3ecc:	c5 30       	cpi	r28, 0x05	; 5
    3ece:	d1 05       	cpc	r29, r1
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <atc_fire+0xa0>
    3ed2:	45 c0       	rjmp	.+138    	; 0x3f5e <atc_fire+0x12a>
    3ed4:	c5 30       	cpi	r28, 0x05	; 5
    3ed6:	d1 05       	cpc	r29, r1
    3ed8:	04 f1       	brlt	.+64     	; 0x3f1a <atc_fire+0xe6>
    3eda:	26 97       	sbiw	r28, 0x06	; 6
    3edc:	69 f6       	brne	.-102    	; 0x3e78 <atc_fire+0x44>
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3ede:	80 91 08 01 	lds	r24, 0x0108
    3ee2:	82 60       	ori	r24, 0x02	; 2
    3ee4:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3ee8:	80 91 08 01 	lds	r24, 0x0108
    3eec:	8b 7f       	andi	r24, 0xFB	; 251
    3eee:	1d c0       	rjmp	.+58     	; 0x3f2a <atc_fire+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3ef0:	80 91 08 01 	lds	r24, 0x0108
    3ef4:	8d 7f       	andi	r24, 0xFD	; 253
    3ef6:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3efa:	80 91 08 01 	lds	r24, 0x0108
    3efe:	84 60       	ori	r24, 0x04	; 4
    3f00:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3f04:	80 91 08 01 	lds	r24, 0x0108
    3f08:	87 7f       	andi	r24, 0xF7	; 247
    3f0a:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3f0e:	80 91 08 01 	lds	r24, 0x0108
    3f12:	8e 7f       	andi	r24, 0xFE	; 254
    3f14:	80 93 08 01 	sts	0x0108, r24
    3f18:	af cf       	rjmp	.-162    	; 0x3e78 <atc_fire+0x44>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3f1a:	80 91 08 01 	lds	r24, 0x0108
    3f1e:	8d 7f       	andi	r24, 0xFD	; 253
    3f20:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3f24:	80 91 08 01 	lds	r24, 0x0108
    3f28:	84 60       	ori	r24, 0x04	; 4
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3f2a:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3f2e:	80 91 08 01 	lds	r24, 0x0108
    3f32:	88 60       	ori	r24, 0x08	; 8
    3f34:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3f38:	80 91 08 01 	lds	r24, 0x0108
    3f3c:	8e 7f       	andi	r24, 0xFE	; 254
    3f3e:	80 93 08 01 	sts	0x0108, r24
    3f42:	9a cf       	rjmp	.-204    	; 0x3e78 <atc_fire+0x44>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3f44:	80 91 08 01 	lds	r24, 0x0108
    3f48:	8d 7f       	andi	r24, 0xFD	; 253
    3f4a:	cc cf       	rjmp	.-104    	; 0x3ee4 <atc_fire+0xb0>
 */
 	switch( tool ) {
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3f4c:	80 91 08 01 	lds	r24, 0x0108
    3f50:	8d 7f       	andi	r24, 0xFD	; 253
    3f52:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3f56:	80 91 08 01 	lds	r24, 0x0108
    3f5a:	8b 7f       	andi	r24, 0xFB	; 251
    3f5c:	d1 cf       	rjmp	.-94     	; 0x3f00 <atc_fire+0xcc>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    3f5e:	80 91 08 01 	lds	r24, 0x0108
    3f62:	82 60       	ori	r24, 0x02	; 2
    3f64:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3f68:	80 91 08 01 	lds	r24, 0x0108
    3f6c:	8b 7f       	andi	r24, 0xFB	; 251
    3f6e:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    3f72:	80 91 08 01 	lds	r24, 0x0108
    3f76:	87 7f       	andi	r24, 0xF7	; 247
    3f78:	80 93 08 01 	sts	0x0108, r24
    3f7c:	7d cf       	rjmp	.-262    	; 0x3e78 <atc_fire+0x44>

00003f7e <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    3f7e:	1f 93       	push	r17
    3f80:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3f82:	80 91 55 05 	lds	r24, 0x0555
    3f86:	88 23       	and	r24, r24
    3f88:	19 f4       	brne	.+6      	; 0x3f90 <DropTool+0x12>
    3f8a:	83 e6       	ldi	r24, 0x63	; 99
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3f8c:	1f 91       	pop	r17
    3f8e:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    3f98:	88 23       	and	r24, r24
    3f9a:	19 f4       	brne	.+6      	; 0x3fa2 <DropTool+0x24>
    3f9c:	85 e0       	ldi	r24, 0x05	; 5
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3f9e:	1f 91       	pop	r17
    3fa0:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    3fa2:	81 2f       	mov	r24, r17
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <atc_fire>

	// head back up
	head_down( 0 );
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    3fba:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3fbc:	1f 91       	pop	r17
    3fbe:	08 95       	ret

00003fc0 <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    3fc0:	1f 93       	push	r17
    3fc2:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3fc4:	80 91 55 05 	lds	r24, 0x0555
    3fc8:	88 23       	and	r24, r24
    3fca:	19 f4       	brne	.+6      	; 0x3fd2 <PickupTool+0x12>
    3fcc:	83 e6       	ldi	r24, 0x63	; 99
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3fce:	1f 91       	pop	r17
    3fd0:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    3fda:	88 23       	and	r24, r24
    3fdc:	19 f4       	brne	.+6      	; 0x3fe4 <PickupTool+0x24>
    3fde:	85 e0       	ldi	r24, 0x05	; 5
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3fe0:	1f 91       	pop	r17
    3fe2:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    3fe4:	81 2f       	mov	r24, r17
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>

	// head back up
	head_down( 0 );
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    3ff4:	80 e9       	ldi	r24, 0x90	; 144
    3ff6:	91 e0       	ldi	r25, 0x01	; 1
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	f1 f7       	brne	.-4      	; 0x3ff8 <PickupTool+0x38>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 05 20 	call	0x400a	; 0x400a <atc_change>
    4004:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    4006:	1f 91       	pop	r17
    4008:	08 95       	ret

0000400a <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    4010:	80 91 55 05 	lds	r24, 0x0555
    4014:	88 23       	and	r24, r24
    4016:	71 f0       	breq	.+28     	; 0x4034 <atc_change+0x2a>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    4018:	cf 3f       	cpi	r28, 0xFF	; 255
    401a:	d1 05       	cpc	r29, r1
    401c:	39 f0       	breq	.+14     	; 0x402c <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    401e:	0e 94 8c 21 	call	0x4318	; 0x4318 <run_vacuum_test>
    4022:	88 23       	and	r24, r24
    4024:	59 f0       	breq	.+22     	; 0x403c <atc_change+0x32>
		PickupTool(tool);
	} else { 
		DropTool(tool);
    4026:	8c 2f       	mov	r24, r28
    4028:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <DropTool>
    402c:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	08 95       	ret

*/

unsigned char atc_change(int tool)
{
	if( gHomed == FALSE  ){ 
    4034:	83 e6       	ldi	r24, 0x63	; 99
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    4036:	df 91       	pop	r29
    4038:	cf 91       	pop	r28
    403a:	08 95       	ret
	if( tool == toolId ) {
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
		PickupTool(tool);
    403c:	8c 2f       	mov	r24, r28
    403e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <PickupTool>
    4042:	80 e0       	ldi	r24, 0x00	; 0
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    4044:	df 91       	pop	r29
    4046:	cf 91       	pop	r28
    4048:	08 95       	ret

0000404a <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    404a:	80 91 55 05 	lds	r24, 0x0555
    404e:	88 23       	and	r24, r24
    4050:	11 f4       	brne	.+4      	; 0x4056 <check_for_tool+0xc>
    4052:	83 e6       	ldi	r24, 0x63	; 99
    4054:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    4056:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    405a:	88 23       	and	r24, r24
    405c:	a1 f4       	brne	.+40     	; 0x4086 <check_for_tool+0x3c>
		head_down( FALSE) ;
	}

	goto_vacpad();
    405e:	0e 94 c6 21 	call	0x438c	; 0x438c <goto_vacpad>
	
	head_down(TRUE);
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
	
	vacuum(TRUE);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>

	if( vacuum_state() == TRUE )  {
    4072:	0e 94 86 21 	call	0x430c	; 0x430c <vacuum_state>
    4076:	81 30       	cpi	r24, 0x01	; 1
    4078:	59 f0       	breq	.+22     	; 0x4090 <check_for_tool+0x46>
		head_down( FALSE) ;
		return TRUE;
	} else {
		head_down( FALSE) ;
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    4082:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    4084:	08 95       	ret
	}


	//move head up
	if( is_head_down() ) {
		head_down( FALSE) ;
    4086:	80 e0       	ldi	r24, 0x00	; 0
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    408e:	e7 cf       	rjmp	.-50     	; 0x405e <check_for_tool+0x14>
	head_down(TRUE);
	
	vacuum(TRUE);

	if( vacuum_state() == TRUE )  {
		head_down( FALSE) ;
    4090:	80 e0       	ldi	r24, 0x00	; 0
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	08 95       	ret

0000409c <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    409c:	ea e0       	ldi	r30, 0x0A	; 10
    409e:	f1 e0       	ldi	r31, 0x01	; 1
    40a0:	80 81       	ld	r24, Z
    40a2:	80 62       	ori	r24, 0x20	; 32
    40a4:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    40a6:	eb e0       	ldi	r30, 0x0B	; 11
    40a8:	f1 e0       	ldi	r31, 0x01	; 1
    40aa:	80 81       	ld	r24, Z
    40ac:	80 62       	ori	r24, 0x20	; 32
    40ae:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    40b0:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    40b2:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    40b4:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    40b6:	41 9a       	sbi	0x08, 1	; 8
}
    40b8:	08 95       	ret

000040ba <is_head_down>:
	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;

	return state;

#endif
}
    40ba:	80 91 7f 06 	lds	r24, 0x067F
    40be:	08 95       	ret

000040c0 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    40c0:	86 b1       	in	r24, 0x06	; 6
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	96 95       	lsr	r25
    40c6:	87 95       	ror	r24

	return state;
}
    40c8:	81 70       	andi	r24, 0x01	; 1
    40ca:	08 95       	ret

000040cc <head_down>:
#ifdef SIMULATE
static unsigned char simulate_head_state = 0;
#endif

char head_down(int state)
{
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    40d2:	80 91 55 05 	lds	r24, 0x0555
    40d6:	88 23       	and	r24, r24
    40d8:	21 f1       	breq	.+72     	; 0x4122 <head_down+0x56>
		return 0;
	}

	// wait til head stops
	while( head_moving() );
    40da:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    40de:	88 23       	and	r24, r24
    40e0:	e1 f7       	brne	.-8      	; 0x40da <head_down+0xe>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>

// head down mode
  if( state == 0 ) {
    40e8:	20 97       	sbiw	r28, 0x00	; 0
    40ea:	f1 f0       	breq	.+60     	; 0x4128 <head_down+0x5c>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    40ec:	80 91 0b 01 	lds	r24, 0x010B
    40f0:	8f 7d       	andi	r24, 0xDF	; 223
    40f2:	80 93 0b 01 	sts	0x010B, r24
    40f6:	20 ed       	ldi	r18, 0xD0	; 208
    40f8:	37 e0       	ldi	r19, 0x07	; 7
    40fa:	40 e9       	ldi	r20, 0x90	; 144
    40fc:	51 e0       	ldi	r21, 0x01	; 1
    40fe:	ca 01       	movw	r24, r20
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <head_down+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4104:	21 50       	subi	r18, 0x01	; 1
    4106:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4108:	d1 f7       	brne	.-12     	; 0x40fe <head_down+0x32>

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

#ifdef SIMULATE
	simulate_head_state = state;
    410a:	c0 93 7f 06 	sts	0x067F, r28
#endif

  if(is_head_down() != state ) {
    410e:	8c 2f       	mov	r24, r28
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	8c 17       	cp	r24, r28
    4114:	9d 07       	cpc	r25, r29
    4116:	81 f0       	breq	.+32     	; 0x4138 <head_down+0x6c>

	  printPgmString(PSTR("Head down error\n\r"));
    4118:	84 eb       	ldi	r24, 0xB4	; 180
    411a:	95 e0       	ldi	r25, 0x05	; 5
    411c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    4120:	80 e0       	ldi	r24, 0x00	; 0
  }

 	set_busy( FALSE );

	return 1;
}
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	08 95       	ret
	set_busy( TRUE );

// head down mode
  if( state == 0 ) {

	HEAD_PORT |= _BV( HEAD );
    4128:	80 91 0b 01 	lds	r24, 0x010B
    412c:	80 62       	ori	r24, 0x20	; 32
    412e:	80 93 0b 01 	sts	0x010B, r24
    4132:	20 ed       	ldi	r18, 0xD0	; 208
    4134:	37 e0       	ldi	r19, 0x07	; 7
    4136:	e1 cf       	rjmp	.-62     	; 0x40fa <head_down+0x2e>
	  printPgmString(PSTR("Head down error\n\r"));
	  
	  return 0;
  }

 	set_busy( FALSE );
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>
    413e:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    4140:	df 91       	pop	r29
    4142:	cf 91       	pop	r28
    4144:	08 95       	ret

00004146 <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    4146:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    4148:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    414a:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    414c:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    414e:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    4150:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    4152:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    4154:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    4156:	a4 e0       	ldi	r26, 0x04	; 4
    4158:	b1 e0       	ldi	r27, 0x01	; 1
    415a:	8c 91       	ld	r24, X
    415c:	8e 7f       	andi	r24, 0xFE	; 254
    415e:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    4160:	e5 e0       	ldi	r30, 0x05	; 5
    4162:	f1 e0       	ldi	r31, 0x01	; 1
    4164:	80 81       	ld	r24, Z
    4166:	81 60       	ori	r24, 0x01	; 1
    4168:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    416a:	8c 91       	ld	r24, X
    416c:	8f 7e       	andi	r24, 0xEF	; 239
    416e:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    4170:	80 81       	ld	r24, Z
    4172:	80 61       	ori	r24, 0x10	; 16
    4174:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    4176:	a1 e0       	ldi	r26, 0x01	; 1
    4178:	b1 e0       	ldi	r27, 0x01	; 1
    417a:	8c 91       	ld	r24, X
    417c:	8e 7f       	andi	r24, 0xFE	; 254
    417e:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    4180:	e2 e0       	ldi	r30, 0x02	; 2
    4182:	f1 e0       	ldi	r31, 0x01	; 1
    4184:	80 81       	ld	r24, Z
    4186:	81 60       	ori	r24, 0x01	; 1
    4188:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    418a:	8c 91       	ld	r24, X
    418c:	8d 7f       	andi	r24, 0xFD	; 253
    418e:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    4190:	80 81       	ld	r24, Z
    4192:	82 60       	ori	r24, 0x02	; 2
    4194:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    4196:	e0 e9       	ldi	r30, 0x90	; 144
    4198:	f0 e0       	ldi	r31, 0x00	; 0
    419a:	80 81       	ld	r24, Z
    419c:	82 60       	ori	r24, 0x02	; 2
    419e:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    41a0:	8c e7       	ldi	r24, 0x7C	; 124
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	90 93 99 00 	sts	0x0099, r25
    41a8:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    41ac:	10 92 95 00 	sts	0x0095, r1
    41b0:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    41b4:	84 e0       	ldi	r24, 0x04	; 4
    41b6:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    41ba:	e1 e7       	ldi	r30, 0x71	; 113
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
    41be:	80 81       	ld	r24, Z
    41c0:	82 60       	ori	r24, 0x02	; 2
    41c2:	80 83       	st	Z, r24

}
    41c4:	08 95       	ret

000041c6 <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    41c6:	8c b1       	in	r24, 0x0c	; 12
    41c8:	82 95       	swap	r24
    41ca:	86 95       	lsr	r24
    41cc:	87 70       	andi	r24, 0x07	; 7
    41ce:	80 95       	com	r24

	return state;
}
    41d0:	81 70       	andi	r24, 0x01	; 1
    41d2:	08 95       	ret

000041d4 <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    41d4:	82 b3       	in	r24, 0x12	; 18
    41d6:	82 95       	swap	r24
    41d8:	86 95       	lsr	r24
    41da:	87 70       	andi	r24, 0x07	; 7
    41dc:	80 95       	com	r24

	return state;
}
    41de:	81 70       	andi	r24, 0x01	; 1
    41e0:	08 95       	ret

000041e2 <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    41e2:	8c b1       	in	r24, 0x0c	; 12
    41e4:	82 95       	swap	r24
    41e6:	8f 70       	andi	r24, 0x0F	; 15
    41e8:	80 95       	com	r24

	return state;
}
    41ea:	81 70       	andi	r24, 0x01	; 1
    41ec:	08 95       	ret

000041ee <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    41ee:	80 91 03 01 	lds	r24, 0x0103
    41f2:	86 95       	lsr	r24
    41f4:	80 95       	com	r24

	return state;
}
    41f6:	81 70       	andi	r24, 0x01	; 1
    41f8:	08 95       	ret

000041fa <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    41fa:	86 b1       	in	r24, 0x06	; 6
    41fc:	82 95       	swap	r24
    41fe:	8f 70       	andi	r24, 0x0F	; 15
    4200:	80 95       	com	r24

	return state;
}
    4202:	81 70       	andi	r24, 0x01	; 1
    4204:	08 95       	ret

00004206 <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    4206:	80 91 00 01 	lds	r24, 0x0100
    420a:	80 95       	com	r24

	return state;
}
    420c:	81 70       	andi	r24, 0x01	; 1
    420e:	08 95       	ret

00004210 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    4210:	80 91 03 01 	lds	r24, 0x0103
    4214:	80 95       	com	r24

	return state;
}
    4216:	81 70       	andi	r24, 0x01	; 1
    4218:	08 95       	ret

0000421a <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    421a:	83 b1       	in	r24, 0x03	; 3
    421c:	82 95       	swap	r24
    421e:	86 95       	lsr	r24
    4220:	87 70       	andi	r24, 0x07	; 7
    4222:	80 95       	com	r24

	return state;
}
    4224:	81 70       	andi	r24, 0x01	; 1
    4226:	08 95       	ret

00004228 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    4228:	80 91 00 01 	lds	r24, 0x0100
    422c:	86 95       	lsr	r24
    422e:	80 95       	com	r24

	return state;
}
    4230:	81 70       	andi	r24, 0x01	; 1
    4232:	08 95       	ret

00004234 <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    4234:	1f 92       	push	r1
    4236:	0f 92       	push	r0
    4238:	0f b6       	in	r0, 0x3f	; 63
    423a:	0f 92       	push	r0
    423c:	11 24       	eor	r1, r1
	return;
}
    423e:	0f 90       	pop	r0
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	0f 90       	pop	r0
    4244:	1f 90       	pop	r1
    4246:	18 95       	reti

00004248 <process_panel>:
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    4248:	1d 9b       	sbis	0x03, 5	; 3
    424a:	20 c0       	rjmp	.+64     	; 0x428c <process_panel+0x44>

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    424c:	80 91 00 01 	lds	r24, 0x0100
    4250:	80 ff       	sbrs	r24, 0
    4252:	0b c0       	rjmp	.+22     	; 0x426a <process_panel+0x22>
	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
    4254:	80 91 81 06 	lds	r24, 0x0681
    4258:	81 30       	cpi	r24, 0x01	; 1
    425a:	d9 f0       	breq	.+54     	; 0x4292 <process_panel+0x4a>
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    425c:	34 9b       	sbis	0x06, 4	; 6
    425e:	0e c0       	rjmp	.+28     	; 0x427c <process_panel+0x34>
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
    4260:	80 91 80 06 	lds	r24, 0x0680
    4264:	81 30       	cpi	r24, 0x01	; 1
    4266:	e1 f0       	breq	.+56     	; 0x42a0 <process_panel+0x58>
    4268:	08 95       	ret
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	80 93 81 06 	sts	0x0681, r24
		vacuum(1);
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
	} else if(bvac == 1 ) {
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    4278:	34 99       	sbic	0x06, 4	; 6
    427a:	f2 cf       	rjmp	.-28     	; 0x4260 <process_panel+0x18>
		bhead = 1;
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	80 93 80 06 	sts	0x0680, r24
		head_down(1);
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    428a:	08 95       	ret
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    428c:	0e 94 35 0b 	call	0x166a	; 0x166a <mc_go_home>
    4290:	dd cf       	rjmp	.-70     	; 0x424c <process_panel+0x4>

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
		bvac = 0;
    4292:	10 92 81 06 	sts	0x0681, r1
		vacuum(0);
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
    429e:	de cf       	rjmp	.-68     	; 0x425c <process_panel+0x14>

	if( is_phead() ) {
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
		bhead = 0;
    42a0:	10 92 80 06 	sts	0x0680, r1
		head_down(0);
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    42ac:	08 95       	ret

000042ae <vacuum_init>:
#include "stepper.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    42ae:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    42b0:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    42b2:	ea e0       	ldi	r30, 0x0A	; 10
    42b4:	f1 e0       	ldi	r31, 0x01	; 1
    42b6:	80 81       	ld	r24, Z
    42b8:	80 61       	ori	r24, 0x10	; 16
    42ba:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    42bc:	eb e0       	ldi	r30, 0x0B	; 11
    42be:	f1 e0       	ldi	r31, 0x01	; 1
    42c0:	80 81       	ld	r24, Z
    42c2:	80 61       	ori	r24, 0x10	; 16
    42c4:	80 83       	st	Z, r24

}
    42c6:	08 95       	ret

000042c8 <vacuum>:

// switches vacuum on and off
void vacuum(int state)
{
	if( state == 1 && gHomed == FALSE ) return;
    42c8:	81 30       	cpi	r24, 0x01	; 1
    42ca:	91 05       	cpc	r25, r1
    42cc:	91 f0       	breq	.+36     	; 0x42f2 <vacuum+0x2a>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    42ce:	89 2b       	or	r24, r25
    42d0:	a1 f4       	brne	.+40     	; 0x42fa <vacuum+0x32>

	HEAD_PORT |= _BV( VACUUM );
    42d2:	80 91 0b 01 	lds	r24, 0x010B
    42d6:	80 61       	ori	r24, 0x10	; 16
    42d8:	80 93 0b 01 	sts	0x010B, r24
    42dc:	28 e8       	ldi	r18, 0x88	; 136
    42de:	33 e1       	ldi	r19, 0x13	; 19
    42e0:	40 e9       	ldi	r20, 0x90	; 144
    42e2:	51 e0       	ldi	r21, 0x01	; 1
    42e4:	ca 01       	movw	r24, r20
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	f1 f7       	brne	.-4      	; 0x42e6 <vacuum+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ea:	21 50       	subi	r18, 0x01	; 1
    42ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ee:	d1 f7       	brne	.-12     	; 0x42e4 <vacuum+0x1c>
    42f0:	08 95       	ret
}

// switches vacuum on and off
void vacuum(int state)
{
	if( state == 1 && gHomed == FALSE ) return;
    42f2:	80 91 55 05 	lds	r24, 0x0555
    42f6:	88 23       	and	r24, r24
    42f8:	41 f0       	breq	.+16     	; 0x430a <vacuum+0x42>

	HEAD_PORT |= _BV( VACUUM );

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    42fa:	80 91 0b 01 	lds	r24, 0x010B
    42fe:	8f 7e       	andi	r24, 0xEF	; 239
    4300:	80 93 0b 01 	sts	0x010B, r24
    4304:	28 e8       	ldi	r18, 0x88	; 136
    4306:	33 e1       	ldi	r19, 0x13	; 19
    4308:	eb cf       	rjmp	.-42     	; 0x42e0 <vacuum+0x18>
    430a:	08 95       	ret

0000430c <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    430c:	89 b1       	in	r24, 0x09	; 9
    430e:	80 95       	com	r24

	return state;
}
    4310:	88 1f       	adc	r24, r24
    4312:	88 27       	eor	r24, r24
    4314:	88 1f       	adc	r24, r24
    4316:	08 95       	ret

00004318 <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    4318:	af 92       	push	r10
    431a:	bf 92       	push	r11
    431c:	cf 92       	push	r12
    431e:	df 92       	push	r13
    4320:	ef 92       	push	r14
    4322:	ff 92       	push	r15
    4324:	0f 93       	push	r16
    4326:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    4328:	80 91 55 05 	lds	r24, 0x0555
    432c:	88 23       	and	r24, r24
    432e:	51 f4       	brne	.+20     	; 0x4344 <run_vacuum_test+0x2c>
    4330:	83 e6       	ldi	r24, 0x63	; 99
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	ff 90       	pop	r15
    4338:	ef 90       	pop	r14
    433a:	df 90       	pop	r13
    433c:	cf 90       	pop	r12
    433e:	bf 90       	pop	r11
    4340:	af 90       	pop	r10
    4342:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    434c:	63 ec       	ldi	r22, 0xC3	; 195
    434e:	73 ed       	ldi	r23, 0xD3	; 211
    4350:	81 e4       	ldi	r24, 0x41	; 65
    4352:	91 e4       	ldi	r25, 0x41	; 65
    4354:	2a e1       	ldi	r18, 0x1A	; 26
    4356:	3b e8       	ldi	r19, 0x8B	; 139
    4358:	4d e9       	ldi	r20, 0x9D	; 157
    435a:	50 e4       	ldi	r21, 0x40	; 64
    435c:	0f 2e       	mov	r0, r31
    435e:	f0 e0       	ldi	r31, 0x00	; 0
    4360:	ef 2e       	mov	r14, r31
    4362:	f0 e0       	ldi	r31, 0x00	; 0
    4364:	ff 2e       	mov	r15, r31
    4366:	f0 e8       	ldi	r31, 0x80	; 128
    4368:	0f 2f       	mov	r16, r31
    436a:	ff eb       	ldi	r31, 0xBF	; 191
    436c:	1f 2f       	mov	r17, r31
    436e:	f0 2d       	mov	r31, r0
    4370:	57 01       	movw	r10, r14
    4372:	68 01       	movw	r12, r16
    4374:	0e 94 fe 03 	call	0x7fc	; 0x7fc <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    4378:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    437c:	88 23       	and	r24, r24
    437e:	e1 f7       	brne	.-8      	; 0x4378 <run_vacuum_test+0x60>
    4380:	80 e9       	ldi	r24, 0x90	; 144
    4382:	91 e0       	ldi	r25, 0x01	; 1
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	f1 f7       	brne	.-4      	; 0x4384 <run_vacuum_test+0x6c>
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	d3 cf       	rjmp	.-90     	; 0x4332 <run_vacuum_test+0x1a>

0000438c <goto_vacpad>:
	return GCSTATUS_OK;

}

unsigned char goto_vacpad( void ) 
{
    438c:	8f 92       	push	r8
    438e:	9f 92       	push	r9
    4390:	af 92       	push	r10
    4392:	bf 92       	push	r11
    4394:	cf 92       	push	r12
    4396:	df 92       	push	r13
    4398:	ef 92       	push	r14
    439a:	ff 92       	push	r15
    439c:	0f 93       	push	r16
    439e:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    43a0:	80 91 55 05 	lds	r24, 0x0555
    43a4:	88 23       	and	r24, r24
    43a6:	61 f4       	brne	.+24     	; 0x43c0 <goto_vacpad+0x34>
    43a8:	83 e6       	ldi	r24, 0x63	; 99

	while( is_head_down() ) ;
	
	return GCSTATUS_OK;

}
    43aa:	1f 91       	pop	r17
    43ac:	0f 91       	pop	r16
    43ae:	ff 90       	pop	r15
    43b0:	ef 90       	pop	r14
    43b2:	df 90       	pop	r13
    43b4:	cf 90       	pop	r12
    43b6:	bf 90       	pop	r11
    43b8:	af 90       	pop	r10
    43ba:	9f 90       	pop	r9
    43bc:	8f 90       	pop	r8
    43be:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
    43c0:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    43c4:	88 23       	and	r24, r24
    43c6:	09 f0       	breq	.+2      	; 0x43ca <goto_vacpad+0x3e>
    43c8:	20 c1       	rjmp	.+576    	; 0x460a <goto_vacpad+0x27e>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    43ca:	63 ec       	ldi	r22, 0xC3	; 195
    43cc:	73 ed       	ldi	r23, 0xD3	; 211
    43ce:	81 e4       	ldi	r24, 0x41	; 65
    43d0:	91 e4       	ldi	r25, 0x41	; 65
    43d2:	2a e1       	ldi	r18, 0x1A	; 26
    43d4:	3b e8       	ldi	r19, 0x8B	; 139
    43d6:	4d e9       	ldi	r20, 0x9D	; 157
    43d8:	50 e4       	ldi	r21, 0x40	; 64
    43da:	0f 2e       	mov	r0, r31
    43dc:	f0 e0       	ldi	r31, 0x00	; 0
    43de:	ef 2e       	mov	r14, r31
    43e0:	f0 e0       	ldi	r31, 0x00	; 0
    43e2:	ff 2e       	mov	r15, r31
    43e4:	f0 e8       	ldi	r31, 0x80	; 128
    43e6:	0f 2f       	mov	r16, r31
    43e8:	ff eb       	ldi	r31, 0xBF	; 191
    43ea:	1f 2f       	mov	r17, r31
    43ec:	f0 2d       	mov	r31, r0
    43ee:	57 01       	movw	r10, r14
    43f0:	68 01       	movw	r12, r16
    43f2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <gotoxy>

	while( head_moving() );	
    43f6:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    43fa:	88 23       	and	r24, r24
    43fc:	e1 f7       	brne	.-8      	; 0x43f6 <goto_vacpad+0x6a>
    43fe:	80 e9       	ldi	r24, 0x90	; 144
    4400:	91 e0       	ldi	r25, 0x01	; 1
    4402:	01 97       	sbiw	r24, 0x01	; 1
    4404:	f1 f7       	brne	.-4      	; 0x4402 <goto_vacpad+0x76>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
    440e:	28 e8       	ldi	r18, 0x88	; 136
    4410:	33 e1       	ldi	r19, 0x13	; 19
    4412:	40 e9       	ldi	r20, 0x90	; 144
    4414:	51 e0       	ldi	r21, 0x01	; 1
    4416:	ca 01       	movw	r24, r20
    4418:	01 97       	sbiw	r24, 0x01	; 1
    441a:	f1 f7       	brne	.-4      	; 0x4418 <goto_vacpad+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    441c:	21 50       	subi	r18, 0x01	; 1
    441e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4420:	d1 f7       	brne	.-12     	; 0x4416 <goto_vacpad+0x8a>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    442a:	88 23       	and	r24, r24
    442c:	09 f4       	brne	.+2      	; 0x4430 <goto_vacpad+0xa4>
    442e:	e7 c0       	rjmp	.+462    	; 0x45fe <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4430:	20 e1       	ldi	r18, 0x10	; 16
    4432:	37 e2       	ldi	r19, 0x27	; 39
    4434:	40 e9       	ldi	r20, 0x90	; 144
    4436:	51 e0       	ldi	r21, 0x01	; 1
    4438:	ca 01       	movw	r24, r20
    443a:	01 97       	sbiw	r24, 0x01	; 1
    443c:	f1 f7       	brne	.-4      	; 0x443a <goto_vacpad+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443e:	21 50       	subi	r18, 0x01	; 1
    4440:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4442:	d1 f7       	brne	.-12     	; 0x4438 <goto_vacpad+0xac>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    4444:	99 b0       	in	r9, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    444e:	80 e0       	ldi	r24, 0x00	; 0
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    4456:	88 23       	and	r24, r24
    4458:	09 f4       	brne	.+2      	; 0x445c <goto_vacpad+0xd0>
    445a:	c8 c0       	rjmp	.+400    	; 0x45ec <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    445c:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    4460:	88 23       	and	r24, r24
    4462:	e1 f7       	brne	.-8      	; 0x445c <goto_vacpad+0xd0>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    4464:	6d e3       	ldi	r22, 0x3D	; 61
    4466:	7b e9       	ldi	r23, 0x9B	; 155
    4468:	8d e4       	ldi	r24, 0x4D	; 77
    446a:	91 e4       	ldi	r25, 0x41	; 65
    446c:	2c ed       	ldi	r18, 0xDC	; 220
    446e:	38 e6       	ldi	r19, 0x68	; 104
    4470:	44 e9       	ldi	r20, 0x94	; 148
    4472:	50 e4       	ldi	r21, 0x40	; 64
    4474:	0f 2e       	mov	r0, r31
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	ef 2e       	mov	r14, r31
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	ff 2e       	mov	r15, r31
    447e:	f0 e8       	ldi	r31, 0x80	; 128
    4480:	0f 2f       	mov	r16, r31
    4482:	ff eb       	ldi	r31, 0xBF	; 191
    4484:	1f 2f       	mov	r17, r31
    4486:	f0 2d       	mov	r31, r0
    4488:	57 01       	movw	r10, r14
    448a:	68 01       	movw	r12, r16
    448c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <gotoxy>

	while( head_moving() );	
    4490:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    4494:	88 23       	and	r24, r24
    4496:	e1 f7       	brne	.-8      	; 0x4490 <goto_vacpad+0x104>
    4498:	80 e9       	ldi	r24, 0x90	; 144
    449a:	91 e0       	ldi	r25, 0x01	; 1
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	f1 f7       	brne	.-4      	; 0x449c <goto_vacpad+0x110>
    44a0:	20 ea       	ldi	r18, 0xA0	; 160
    44a2:	3f e0       	ldi	r19, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a4:	40 e9       	ldi	r20, 0x90	; 144
    44a6:	51 e0       	ldi	r21, 0x01	; 1
    44a8:	ca 01       	movw	r24, r20
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	f1 f7       	brne	.-4      	; 0x44aa <goto_vacpad+0x11e>
    44ae:	21 50       	subi	r18, 0x01	; 1
    44b0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b2:	d1 f7       	brne	.-12     	; 0x44a8 <goto_vacpad+0x11c>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    44bc:	88 23       	and	r24, r24
    44be:	09 f4       	brne	.+2      	; 0x44c2 <goto_vacpad+0x136>
    44c0:	95 c0       	rjmp	.+298    	; 0x45ec <goto_vacpad+0x260>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    44c2:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    44c6:	88 23       	and	r24, r24
    44c8:	e1 f3       	breq	.-8      	; 0x44c2 <goto_vacpad+0x136>
    44ca:	20 e1       	ldi	r18, 0x10	; 16
    44cc:	37 e2       	ldi	r19, 0x27	; 39
    44ce:	40 e9       	ldi	r20, 0x90	; 144
    44d0:	51 e0       	ldi	r21, 0x01	; 1
    44d2:	ca 01       	movw	r24, r20
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	f1 f7       	brne	.-4      	; 0x44d4 <goto_vacpad+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d8:	21 50       	subi	r18, 0x01	; 1
    44da:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44dc:	d1 f7       	brne	.-12     	; 0x44d2 <goto_vacpad+0x146>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <atc_fire>
    44e6:	20 e4       	ldi	r18, 0x40	; 64
    44e8:	3f e1       	ldi	r19, 0x1F	; 31
    44ea:	40 e9       	ldi	r20, 0x90	; 144
    44ec:	51 e0       	ldi	r21, 0x01	; 1
    44ee:	ca 01       	movw	r24, r20
    44f0:	01 97       	sbiw	r24, 0x01	; 1
    44f2:	f1 f7       	brne	.-4      	; 0x44f0 <goto_vacpad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f4:	21 50       	subi	r18, 0x01	; 1
    44f6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44f8:	d1 f7       	brne	.-12     	; 0x44ee <goto_vacpad+0x162>
    44fa:	88 24       	eor	r8, r8
    44fc:	97 fc       	sbrc	r9, 7
    44fe:	6b c0       	rjmp	.+214    	; 0x45d6 <goto_vacpad+0x24a>
    4500:	88 24       	eor	r8, r8
    4502:	83 94       	inc	r8

		// tool changer off
		atc_fire ( 0 );
		
		// head up
		if( head_down( 0 ) == 0 ) {
    4504:	28 e8       	ldi	r18, 0x88	; 136
    4506:	33 e1       	ldi	r19, 0x13	; 19
    4508:	40 e9       	ldi	r20, 0x90	; 144
    450a:	51 e0       	ldi	r21, 0x01	; 1
    450c:	ca 01       	movw	r24, r20
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	f1 f7       	brne	.-4      	; 0x450e <goto_vacpad+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4512:	21 50       	subi	r18, 0x01	; 1
    4514:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4516:	d1 f7       	brne	.-12     	; 0x450c <goto_vacpad+0x180>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    4520:	88 23       	and	r24, r24
    4522:	09 f4       	brne	.+2      	; 0x4526 <goto_vacpad+0x19a>
    4524:	63 c0       	rjmp	.+198    	; 0x45ec <goto_vacpad+0x260>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    4526:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    452a:	81 30       	cpi	r24, 0x01	; 1
    452c:	e1 f3       	breq	.-8      	; 0x4526 <goto_vacpad+0x19a>
    452e:	28 e9       	ldi	r18, 0x98	; 152
    4530:	3a e3       	ldi	r19, 0x3A	; 58
    4532:	40 e9       	ldi	r20, 0x90	; 144
    4534:	51 e0       	ldi	r21, 0x01	; 1
    4536:	ca 01       	movw	r24, r20
    4538:	01 97       	sbiw	r24, 0x01	; 1
    453a:	f1 f7       	brne	.-4      	; 0x4538 <goto_vacpad+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    453c:	21 50       	subi	r18, 0x01	; 1
    453e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4540:	d1 f7       	brne	.-12     	; 0x4536 <goto_vacpad+0x1aa>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4542:	63 ec       	ldi	r22, 0xC3	; 195
    4544:	73 ed       	ldi	r23, 0xD3	; 211
    4546:	81 e4       	ldi	r24, 0x41	; 65
    4548:	91 e4       	ldi	r25, 0x41	; 65
    454a:	2a e1       	ldi	r18, 0x1A	; 26
    454c:	3b e8       	ldi	r19, 0x8B	; 139
    454e:	4d e9       	ldi	r20, 0x9D	; 157
    4550:	50 e4       	ldi	r21, 0x40	; 64
    4552:	0f 2e       	mov	r0, r31
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	ef 2e       	mov	r14, r31
    4558:	f0 e0       	ldi	r31, 0x00	; 0
    455a:	ff 2e       	mov	r15, r31
    455c:	f0 e8       	ldi	r31, 0x80	; 128
    455e:	0f 2f       	mov	r16, r31
    4560:	ff eb       	ldi	r31, 0xBF	; 191
    4562:	1f 2f       	mov	r17, r31
    4564:	f0 2d       	mov	r31, r0
    4566:	57 01       	movw	r10, r14
    4568:	68 01       	movw	r12, r16
    456a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <gotoxy>

	while( head_moving() );	
    456e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    4572:	88 23       	and	r24, r24
    4574:	e1 f7       	brne	.-8      	; 0x456e <goto_vacpad+0x1e2>
    4576:	80 e9       	ldi	r24, 0x90	; 144
    4578:	91 e0       	ldi	r25, 0x01	; 1
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	f1 f7       	brne	.-4      	; 0x457a <goto_vacpad+0x1ee>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
    4586:	28 e8       	ldi	r18, 0x88	; 136
    4588:	33 e1       	ldi	r19, 0x13	; 19
    458a:	40 e9       	ldi	r20, 0x90	; 144
    458c:	51 e0       	ldi	r21, 0x01	; 1
    458e:	ca 01       	movw	r24, r20
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	f1 f7       	brne	.-4      	; 0x4590 <goto_vacpad+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4594:	21 50       	subi	r18, 0x01	; 1
    4596:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4598:	d1 f7       	brne	.-12     	; 0x458e <goto_vacpad+0x202>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    45a2:	88 23       	and	r24, r24
    45a4:	61 f1       	breq	.+88     	; 0x45fe <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    45a6:	20 e1       	ldi	r18, 0x10	; 16
    45a8:	37 e2       	ldi	r19, 0x27	; 39
    45aa:	40 e9       	ldi	r20, 0x90	; 144
    45ac:	51 e0       	ldi	r21, 0x01	; 1
    45ae:	ca 01       	movw	r24, r20
    45b0:	01 97       	sbiw	r24, 0x01	; 1
    45b2:	f1 f7       	brne	.-4      	; 0x45b0 <goto_vacpad+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b4:	21 50       	subi	r18, 0x01	; 1
    45b6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b8:	d1 f7       	brne	.-12     	; 0x45ae <goto_vacpad+0x222>

   _delay_ms( 1000 );


	// check vacuum
	if( vacuum_state() ) {
    45ba:	4f 99       	sbic	0x09, 7	; 9
    45bc:	19 c0       	rjmp	.+50     	; 0x45f0 <goto_vacpad+0x264>
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    45be:	88 20       	and	r8, r8
    45c0:	49 f1       	breq	.+82     	; 0x4614 <goto_vacpad+0x288>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup failed\r\n"));
#endif

// oops
		head_down(0);
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
		vacuum( 0 );
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
    45d2:	85 e0       	ldi	r24, 0x05	; 5
    45d4:	ea ce       	rjmp	.-556    	; 0x43aa <goto_vacpad+0x1e>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <atc_fire>
		
		// head up
		if( head_down( 0 ) == 0 ) {
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    45e6:	88 23       	and	r24, r24
    45e8:	09 f0       	breq	.+2      	; 0x45ec <goto_vacpad+0x260>
    45ea:	9d cf       	rjmp	.-198    	; 0x4526 <goto_vacpad+0x19a>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    45ec:	85 e0       	ldi	r24, 0x05	; 5
    45ee:	dd ce       	rjmp	.-582    	; 0x43aa <goto_vacpad+0x1e>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	88 16       	cp	r8, r24
    45f4:	79 f0       	breq	.+30     	; 0x4614 <goto_vacpad+0x288>
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
#endif

			head_down(0);
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
			vacuum( 0 );
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>
    4606:	85 e0       	ldi	r24, 0x05	; 5
    4608:	d0 ce       	rjmp	.-608    	; 0x43aa <goto_vacpad+0x1e>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    4612:	db ce       	rjmp	.-586    	; 0x43ca <goto_vacpad+0x3e>
		}

	}	

// vacuum off
	vacuum( 0 );
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    4624:	88 23       	and	r24, r24
    4626:	11 f3       	breq	.-60     	; 0x45ec <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    4628:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    462c:	88 23       	and	r24, r24
    462e:	e1 f7       	brne	.-8      	; 0x4628 <goto_vacpad+0x29c>
    4630:	bc ce       	rjmp	.-648    	; 0x43aa <goto_vacpad+0x1e>

00004632 <test_mode>:
	return GCSTATUS_OK;

}

unsigned char test_mode(void)
{
    4632:	8f 92       	push	r8
    4634:	9f 92       	push	r9
    4636:	af 92       	push	r10
    4638:	bf 92       	push	r11
    463a:	cf 92       	push	r12
    463c:	df 92       	push	r13
    463e:	ef 92       	push	r14
    4640:	ff 92       	push	r15
    4642:	0f 93       	push	r16
    4644:	1f 93       	push	r17
    4646:	cf 93       	push	r28
    4648:	df 93       	push	r29
	int i;
	double x,y;

	if( gHomed == FALSE ) {
    464a:	80 91 55 05 	lds	r24, 0x0555
    464e:	88 23       	and	r24, r24
    4650:	71 f4       	brne	.+28     	; 0x466e <test_mode+0x3c>
    4652:	83 e6       	ldi	r24, 0x63	; 99

	}

	return GCSTATUS_OK;

}
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	1f 91       	pop	r17
    465a:	0f 91       	pop	r16
    465c:	ff 90       	pop	r15
    465e:	ef 90       	pop	r14
    4660:	df 90       	pop	r13
    4662:	cf 90       	pop	r12
    4664:	bf 90       	pop	r11
    4666:	af 90       	pop	r10
    4668:	9f 90       	pop	r9
    466a:	8f 90       	pop	r8
    466c:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
    466e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    4672:	88 23       	and	r24, r24
    4674:	09 f0       	breq	.+2      	; 0x4678 <test_mode+0x46>
    4676:	4a c0       	rjmp	.+148    	; 0x470c <test_mode+0xda>
		head_down( FALSE )  ;
    4678:	88 24       	eor	r8, r8
    467a:	99 24       	eor	r9, r9
    467c:	c0 e9       	ldi	r28, 0x90	; 144
    467e:	d1 e0       	ldi	r29, 0x01	; 1
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
	
		x = rand() %12;
    4680:	0e 94 29 30 	call	0x6052	; 0x6052 <rand>
    4684:	8c 01       	movw	r16, r24
		y = rand() %14 ;
    4686:	0e 94 29 30 	call	0x6052	; 0x6052 <rand>
    468a:	6c 01       	movw	r12, r24

		gotoxy( x,y ,-1,-1) ;
    468c:	c8 01       	movw	r24, r16
    468e:	6c e0       	ldi	r22, 0x0C	; 12
    4690:	70 e0       	ldi	r23, 0x00	; 0
    4692:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
    4696:	aa 27       	eor	r26, r26
    4698:	97 fd       	sbrc	r25, 7
    469a:	a0 95       	com	r26
    469c:	ba 2f       	mov	r27, r26
    469e:	bc 01       	movw	r22, r24
    46a0:	cd 01       	movw	r24, r26
    46a2:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    46a6:	7b 01       	movw	r14, r22
    46a8:	8c 01       	movw	r16, r24
    46aa:	c6 01       	movw	r24, r12
    46ac:	6e e0       	ldi	r22, 0x0E	; 14
    46ae:	70 e0       	ldi	r23, 0x00	; 0
    46b0:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <__divmodhi4>
    46b4:	aa 27       	eor	r26, r26
    46b6:	97 fd       	sbrc	r25, 7
    46b8:	a0 95       	com	r26
    46ba:	ba 2f       	mov	r27, r26
    46bc:	bc 01       	movw	r22, r24
    46be:	cd 01       	movw	r24, r26
    46c0:	0e 94 df 2c 	call	0x59be	; 0x59be <__floatsisf>
    46c4:	9b 01       	movw	r18, r22
    46c6:	ac 01       	movw	r20, r24
    46c8:	c8 01       	movw	r24, r16
    46ca:	b7 01       	movw	r22, r14
    46cc:	0f 2e       	mov	r0, r31
    46ce:	f0 e0       	ldi	r31, 0x00	; 0
    46d0:	ef 2e       	mov	r14, r31
    46d2:	f0 e0       	ldi	r31, 0x00	; 0
    46d4:	ff 2e       	mov	r15, r31
    46d6:	f0 e8       	ldi	r31, 0x80	; 128
    46d8:	0f 2f       	mov	r16, r31
    46da:	ff eb       	ldi	r31, 0xBF	; 191
    46dc:	1f 2f       	mov	r17, r31
    46de:	f0 2d       	mov	r31, r0
    46e0:	57 01       	movw	r10, r14
    46e2:	68 01       	movw	r12, r16
    46e4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <gotoxy>
    46e8:	28 e8       	ldi	r18, 0x88	; 136
    46ea:	33 e1       	ldi	r19, 0x13	; 19
    46ec:	ce 01       	movw	r24, r28
    46ee:	01 97       	sbiw	r24, 0x01	; 1
    46f0:	f1 f7       	brne	.-4      	; 0x46ee <test_mode+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f2:	21 50       	subi	r18, 0x01	; 1
    46f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46f6:	d1 f7       	brne	.-12     	; 0x46ec <test_mode+0xba>
	if( is_head_down() ) {
		head_down( FALSE )  ;
	}

	
	for( i = 0 ; i < 200 ; i++ ) {
    46f8:	08 94       	sec
    46fa:	81 1c       	adc	r8, r1
    46fc:	91 1c       	adc	r9, r1
    46fe:	88 ec       	ldi	r24, 0xC8	; 200
    4700:	88 16       	cp	r8, r24
    4702:	91 04       	cpc	r9, r1
    4704:	09 f0       	breq	.+2      	; 0x4708 <test_mode+0xd6>
    4706:	bc cf       	rjmp	.-136    	; 0x4680 <test_mode+0x4e>
    4708:	80 e0       	ldi	r24, 0x00	; 0
    470a:	a4 cf       	rjmp	.-184    	; 0x4654 <test_mode+0x22>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("test_mode\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    4714:	b1 cf       	rjmp	.-158    	; 0x4678 <test_mode+0x46>

00004716 <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    4716:	4f 99       	sbic	0x09, 7	; 9
    4718:	05 c0       	rjmp	.+10     	; 0x4724 <vacuum_test+0xe>
		
		printPgmString(PSTR("yes\n"));
    471a:	8a ec       	ldi	r24, 0xCA	; 202
    471c:	95 e0       	ldi	r25, 0x05	; 5
    471e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    4722:	08 95       	ret
	} else {
		printPgmString(PSTR("no\n"));
    4724:	86 ec       	ldi	r24, 0xC6	; 198
    4726:	95 e0       	ldi	r25, 0x05	; 5
    4728:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    472c:	08 95       	ret

0000472e <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    472e:	e7 e0       	ldi	r30, 0x07	; 7
    4730:	f1 e0       	ldi	r31, 0x01	; 1
    4732:	80 81       	ld	r24, Z
    4734:	80 68       	ori	r24, 0x80	; 128
    4736:	80 83       	st	Z, r24
}
    4738:	08 95       	ret

0000473a <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    473a:	80 91 55 05 	lds	r24, 0x0555
    473e:	88 23       	and	r24, r24
    4740:	41 f1       	breq	.+80     	; 0x4792 <tape_knock+0x58>
   		return ;
   	}


	while( head_moving() );
    4742:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    4746:	88 23       	and	r24, r24
    4748:	e1 f7       	brne	.-8      	; 0x4742 <tape_knock+0x8>

	set_busy( TRUE );
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    4750:	80 91 08 01 	lds	r24, 0x0108
    4754:	8f 77       	andi	r24, 0x7F	; 127
    4756:	80 93 08 01 	sts	0x0108, r24
    475a:	20 ed       	ldi	r18, 0xD0	; 208
    475c:	37 e0       	ldi	r19, 0x07	; 7
    475e:	40 e9       	ldi	r20, 0x90	; 144
    4760:	51 e0       	ldi	r21, 0x01	; 1
    4762:	ca 01       	movw	r24, r20
    4764:	01 97       	sbiw	r24, 0x01	; 1
    4766:	f1 f7       	brne	.-4      	; 0x4764 <tape_knock+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4768:	21 50       	subi	r18, 0x01	; 1
    476a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    476c:	d1 f7       	brne	.-12     	; 0x4762 <tape_knock+0x28>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    476e:	80 91 08 01 	lds	r24, 0x0108
    4772:	80 68       	ori	r24, 0x80	; 128
    4774:	80 93 08 01 	sts	0x0108, r24
    4778:	20 ed       	ldi	r18, 0xD0	; 208
    477a:	37 e0       	ldi	r19, 0x07	; 7
    477c:	40 e9       	ldi	r20, 0x90	; 144
    477e:	51 e0       	ldi	r21, 0x01	; 1
    4780:	ca 01       	movw	r24, r20
    4782:	01 97       	sbiw	r24, 0x01	; 1
    4784:	f1 f7       	brne	.-4      	; 0x4782 <tape_knock+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4786:	21 50       	subi	r18, 0x01	; 1
    4788:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    478a:	d1 f7       	brne	.-12     	; 0x4780 <tape_knock+0x46>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>
    4792:	08 95       	ret

00004794 <putdown_part>:
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    4794:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    4798:	88 23       	and	r24, r24
    479a:	09 f0       	breq	.+2      	; 0x479e <putdown_part+0xa>
    479c:	3a c0       	rjmp	.+116    	; 0x4812 <putdown_part+0x7e>
		return GCSTATUS_FAILED_COMMAND;
	}

	// wait til head stops
	while( head_moving() );
    479e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    47a2:	88 23       	and	r24, r24
    47a4:	e1 f7       	brne	.-8      	; 0x479e <putdown_part+0xa>

	// maybe?
	while( get_busy() );
    47a6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <get_busy>
    47aa:	89 2b       	or	r24, r25
    47ac:	e1 f7       	brne	.-8      	; 0x47a6 <putdown_part+0x12>

	set_busy( TRUE ) ;
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>
    47b4:	28 ee       	ldi	r18, 0xE8	; 232
    47b6:	33 e0       	ldi	r19, 0x03	; 3
    47b8:	40 e9       	ldi	r20, 0x90	; 144
    47ba:	51 e0       	ldi	r21, 0x01	; 1
    47bc:	ca 01       	movw	r24, r20
    47be:	01 97       	sbiw	r24, 0x01	; 1
    47c0:	f1 f7       	brne	.-4      	; 0x47be <putdown_part+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c2:	21 50       	subi	r18, 0x01	; 1
    47c4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c6:	d1 f7       	brne	.-12     	; 0x47bc <putdown_part+0x28>
	}

#endif

	// push head down
	head_down( 1 );
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    47d0:	24 ec       	ldi	r18, 0xC4	; 196
    47d2:	39 e0       	ldi	r19, 0x09	; 9
    47d4:	40 e9       	ldi	r20, 0x90	; 144
    47d6:	51 e0       	ldi	r21, 0x01	; 1
    47d8:	ca 01       	movw	r24, r20
    47da:	01 97       	sbiw	r24, 0x01	; 1
    47dc:	f1 f7       	brne	.-4      	; 0x47da <putdown_part+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47de:	21 50       	subi	r18, 0x01	; 1
    47e0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e2:	d1 f7       	brne	.-12     	; 0x47d8 <putdown_part+0x44>

	// settle after head down ( probably doesn't need it  )
	_delay_ms( 250 );

	// vacuum off
	vacuum ( 0 );
    47e4:	80 e0       	ldi	r24, 0x00	; 0
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>

	// head up
	head_down ( 0 ) ;
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    47f4:	28 e8       	ldi	r18, 0x88	; 136
    47f6:	33 e1       	ldi	r19, 0x13	; 19
    47f8:	40 e9       	ldi	r20, 0x90	; 144
    47fa:	51 e0       	ldi	r21, 0x01	; 1
    47fc:	ca 01       	movw	r24, r20
    47fe:	01 97       	sbiw	r24, 0x01	; 1
    4800:	f1 f7       	brne	.-4      	; 0x47fe <putdown_part+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4802:	21 50       	subi	r18, 0x01	; 1
    4804:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4806:	d1 f7       	brne	.-12     	; 0x47fc <putdown_part+0x68>

	_delay_ms( 500 );

	set_busy( FALSE) ;
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>
    480e:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    4810:	08 95       	ret
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    4812:	85 e0       	ldi	r24, 0x05	; 5
    4814:	08 95       	ret

00004816 <pickup_part>:
	unsigned char failedCounter;



	// wait til head stops
	while( head_moving() );
    4816:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <head_moving>
    481a:	88 23       	and	r24, r24
    481c:	e1 f7       	brne	.-8      	; 0x4816 <pickup_part>

	// maybe?
	while( get_busy() );
    481e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <get_busy>
    4822:	89 2b       	or	r24, r25
    4824:	e1 f7       	brne	.-8      	; 0x481e <pickup_part+0x8>

	// count number of pickup fails
	failedCounter = 0 ;


	if( is_head_down() ){
    4826:	0e 94 5d 20 	call	0x40ba	; 0x40ba <is_head_down>
    482a:	88 23       	and	r24, r24
    482c:	11 f0       	breq	.+4      	; 0x4832 <pickup_part+0x1c>
    482e:	85 e0       	ldi	r24, 0x05	; 5
    4830:	08 95       	ret
		return GCSTATUS_FAILED_COMMAND;
	}

	set_busy( TRUE ) ;
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>

	//for(;;)  (oops!)
	{

		// advance part, waits til head has done
		tape_knock();
    4838:	0e 94 9d 23 	call	0x473a	; 0x473a <tape_knock>

		// vacuum on
		vacuum ( 1 );
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	0e 94 64 21 	call	0x42c8	; 0x42c8 <vacuum>

		// push head down
		head_down( 1 );
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    484c:	28 e8       	ldi	r18, 0x88	; 136
    484e:	33 e1       	ldi	r19, 0x13	; 19
    4850:	40 e9       	ldi	r20, 0x90	; 144
    4852:	51 e0       	ldi	r21, 0x01	; 1
    4854:	ca 01       	movw	r24, r20
    4856:	01 97       	sbiw	r24, 0x01	; 1
    4858:	f1 f7       	brne	.-4      	; 0x4856 <pickup_part+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485a:	21 50       	subi	r18, 0x01	; 1
    485c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    485e:	d1 f7       	brne	.-12     	; 0x4854 <pickup_part+0x3e>

		//settle (probably doesn't need this)
		_delay_ms( 500 );

		// head up
		head_down ( 0 ) ;
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	0e 94 66 20 	call	0x40cc	; 0x40cc <head_down>
    4868:	28 e8       	ldi	r18, 0x88	; 136
    486a:	33 e1       	ldi	r19, 0x13	; 19
    486c:	40 e9       	ldi	r20, 0x90	; 144
    486e:	51 e0       	ldi	r21, 0x01	; 1
    4870:	ca 01       	movw	r24, r20
    4872:	01 97       	sbiw	r24, 0x01	; 1
    4874:	f1 f7       	brne	.-4      	; 0x4872 <pickup_part+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4876:	21 50       	subi	r18, 0x01	; 1
    4878:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    487a:	d1 f7       	brne	.-12     	; 0x4870 <pickup_part+0x5a>

	}

	_delay_ms( 500 );

	set_busy( FALSE ) ;
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <set_busy>
    4882:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    4884:	08 95       	ret

00004886 <usb_setEventHandler>:

static usb_eventHandler * eventHandler;

void usb_setEventHandler(usb_eventHandler * handler)
{
        eventHandler = handler;
    4886:	90 93 83 06 	sts	0x0683, r25
    488a:	80 93 82 06 	sts	0x0682, r24
}
    488e:	08 95       	ret

00004890 <usb_fireEvent>:
 * @param device the device the events relates to.
 * @param event event type (i.e. connected, disconnected)
 */
void usb_fireEvent(usb_device * device, usb_eventType event)
{
        eventHandler(device, event);
    4890:	e0 91 82 06 	lds	r30, 0x0682
    4894:	f0 91 83 06 	lds	r31, 0x0683
    4898:	19 95       	eicall
}
    489a:	08 95       	ret

0000489c <usb_initEndPoint>:

void usb_initEndPoint(usb_endpoint * endpoint, uint8_t address)
{
    489c:	fc 01       	movw	r30, r24
        endpoint->address = address;
    489e:	60 83       	st	Z, r22
        endpoint->sendToggle = bmSNDTOG0;
    48a0:	80 e4       	ldi	r24, 0x40	; 64
    48a2:	84 83       	std	Z+4, r24	; 0x04
        endpoint->receiveToggle = bmRCVTOG0;
    48a4:	80 e1       	ldi	r24, 0x10	; 16
    48a6:	85 83       	std	Z+5, r24	; 0x05
}
    48a8:	08 95       	ret

000048aa <usb_initDevice>:

    return 0;
}

int usb_initDevice(usb_device * device, int configuration)
{
    48aa:	ef 92       	push	r14
    48ac:	ff 92       	push	r15
    48ae:	0f 93       	push	r16
    48b0:	1f 93       	push	r17
    48b2:	df 93       	push	r29
    48b4:	cf 93       	push	r28
    48b6:	00 d0       	rcall	.+0      	; 0x48b8 <usb_initDevice+0xe>
    48b8:	0f 92       	push	r0
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
    48be:	7c 01       	movw	r14, r24
        char buf[4];

        uint8_t rcode;

        // Set the configuration for this USB device.
        rcode = usb_setConfiguration(device, configuration);
    48c0:	0e 94 38 29 	call	0x5270	; 0x5270 <usb_setConfiguration>
        if (rcode<0) return rcode;

        // Get the first supported language.
        rcode = usb_getString(device, 0, 0, 4, buf);
    48c4:	c7 01       	movw	r24, r14
    48c6:	60 e0       	ldi	r22, 0x00	; 0
    48c8:	40 e0       	ldi	r20, 0x00	; 0
    48ca:	24 e0       	ldi	r18, 0x04	; 4
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	8e 01       	movw	r16, r28
    48d0:	0f 5f       	subi	r16, 0xFF	; 255
    48d2:	1f 4f       	sbci	r17, 0xFF	; 255
    48d4:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <usb_getString>
        if (rcode<0) return rcode;
    device->firstStringLanguage = (buf[3] << 8) | buf[2];
    48d8:	3c 81       	ldd	r19, Y+4	; 0x04
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	4b 81       	ldd	r20, Y+3	; 0x03
    48de:	50 e0       	ldi	r21, 0x00	; 0
    48e0:	24 2b       	or	r18, r20
    48e2:	35 2b       	or	r19, r21
    48e4:	f7 01       	movw	r30, r14
    48e6:	35 8b       	std	Z+21, r19	; 0x15
    48e8:	24 8b       	std	Z+20, r18	; 0x14

    return rcode;
}
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	0f 90       	pop	r0
    48ee:	0f 90       	pop	r0
    48f0:	0f 90       	pop	r0
    48f2:	0f 90       	pop	r0
    48f4:	cf 91       	pop	r28
    48f6:	df 91       	pop	r29
    48f8:	1f 91       	pop	r17
    48fa:	0f 91       	pop	r16
    48fc:	ff 90       	pop	r15
    48fe:	ef 90       	pop	r14
    4900:	08 95       	ret

00004902 <usb_printDeviceInfo>:

/**
 * Print USB device information.
 */
int usb_printDeviceInfo(usb_device * device)
{
    4902:	df 93       	push	r29
    4904:	cf 93       	push	r28
    4906:	cd b7       	in	r28, 0x3d	; 61
    4908:	de b7       	in	r29, 0x3e	; 62
    490a:	62 97       	sbiw	r28, 0x12	; 18
    490c:	0f b6       	in	r0, 0x3f	; 63
    490e:	f8 94       	cli
    4910:	de bf       	out	0x3e, r29	; 62
    4912:	0f be       	out	0x3f, r0	; 63
    4914:	cd bf       	out	0x3d, r28	; 61
        int rcode;
    // char buf[128];

    // Read the device descriptor
        usb_deviceDescriptor deviceDescriptor;
    rcode = usb_getDeviceDescriptor(device, &deviceDescriptor);
    4916:	be 01       	movw	r22, r28
    4918:	6f 5f       	subi	r22, 0xFF	; 255
    491a:	7f 4f       	sbci	r23, 0xFF	; 255
    491c:	0e 94 c1 29 	call	0x5382	; 0x5382 <usb_getDeviceDescriptor>
    usb_getString(device, deviceDescriptor.iSerialNumber, device->firstStringLanguage, 128, buf);
    avr_serialPrintf("Serial number: %s\n", buf);
    */

    return 0;
}
    4920:	62 96       	adiw	r28, 0x12	; 18
    4922:	0f b6       	in	r0, 0x3f	; 63
    4924:	f8 94       	cli
    4926:	de bf       	out	0x3e, r29	; 62
    4928:	0f be       	out	0x3f, r0	; 63
    492a:	cd bf       	out	0x3d, r28	; 61
    492c:	cf 91       	pop	r28
    492e:	df 91       	pop	r29
    4930:	08 95       	ret

00004932 <max3421e_write>:
 * @param value value to write.
 */
void max3421e_write(uint8_t reg, uint8_t value)
{
        // Pull slave select low to indicate start of transfer.
        MAX_SS(0);
    4932:	2c 98       	cbi	0x05, 4	; 5

        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
    4934:	82 60       	ori	r24, 0x02	; 2
    4936:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    4938:	0d b4       	in	r0, 0x2d	; 45
    493a:	07 fe       	sbrs	r0, 7
    493c:	fd cf       	rjmp	.-6      	; 0x4938 <max3421e_write+0x6>

        // Transfer value byte.
        SPDR = value;
    493e:	6e bd       	out	0x2e, r22	; 46
        while (!(SPSR & (1 << SPIF)));
    4940:	0d b4       	in	r0, 0x2d	; 45
    4942:	07 fe       	sbrs	r0, 7
    4944:	fd cf       	rjmp	.-6      	; 0x4940 <max3421e_write+0xe>

        // Pull slave select high to indicate end of transfer.
        MAX_SS(1);
    4946:	2c 9a       	sbi	0x05, 4	; 5

        return;
}
    4948:	08 95       	ret

0000494a <max3421e_writeMultiple>:
 * @return a pointer to values, incremented by the number of bytes written (values + length).
 */
uint8_t * max3421e_writeMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
        // Pull slave select low to indicate start of transfer.
        MAX_SS(0);
    494a:	2c 98       	cbi	0x05, 4	; 5

        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
    494c:	82 60       	ori	r24, 0x02	; 2
    494e:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    4950:	0d b4       	in	r0, 0x2d	; 45
    4952:	07 fe       	sbrs	r0, 7
    4954:	fd cf       	rjmp	.-6      	; 0x4950 <max3421e_writeMultiple+0x6>

        // Transfer values.
        while (count--)
    4956:	66 23       	and	r22, r22
    4958:	89 f0       	breq	.+34     	; 0x497c <max3421e_writeMultiple+0x32>
    495a:	61 50       	subi	r22, 0x01	; 1
    495c:	fa 01       	movw	r30, r20
    495e:	70 e0       	ldi	r23, 0x00	; 0
    4960:	6f 5f       	subi	r22, 0xFF	; 255
    4962:	7f 4f       	sbci	r23, 0xFF	; 255
    4964:	64 0f       	add	r22, r20
    4966:	75 1f       	adc	r23, r21
        {
                // Send next value byte.
                SPDR = (*values);
    4968:	80 81       	ld	r24, Z
    496a:	8e bd       	out	0x2e, r24	; 46
                while (!(SPSR & (1 << SPIF)));
    496c:	0d b4       	in	r0, 0x2d	; 45
    496e:	07 fe       	sbrs	r0, 7
    4970:	fd cf       	rjmp	.-6      	; 0x496c <max3421e_writeMultiple+0x22>

                values++;
    4972:	31 96       	adiw	r30, 0x01	; 1
        // Transfer command byte, 0x02 indicates write.
        SPDR = (reg | 0x02);
        while (!(SPSR & (1 << SPIF)));

        // Transfer values.
        while (count--)
    4974:	e6 17       	cp	r30, r22
    4976:	f7 07       	cpc	r31, r23
    4978:	b9 f7       	brne	.-18     	; 0x4968 <max3421e_writeMultiple+0x1e>
    497a:	af 01       	movw	r20, r30

                values++;
        }

        // Pull slave select high to indicate end of transfer.
        MAX_SS(1);
    497c:	2c 9a       	sbi	0x05, 4	; 5

        return (values);
}
    497e:	ca 01       	movw	r24, r20
    4980:	08 95       	ret

00004982 <max3421e_read>:
 * @return result value.
 */
uint8_t max3421e_read(uint8_t reg)
{
        // Pull slave-select high to initiate transfer.
        MAX_SS(0);
    4982:	2c 98       	cbi	0x05, 4	; 5

        // Send a command byte containing the register number.
        SPDR = reg;
    4984:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF)));
    4986:	0d b4       	in	r0, 0x2d	; 45
    4988:	07 fe       	sbrs	r0, 7
    498a:	fd cf       	rjmp	.-6      	; 0x4986 <max3421e_read+0x4>

        // Send an empty byte while reading.
        SPDR = 0;
    498c:	1e bc       	out	0x2e, r1	; 46
        while (!(SPSR & (1 << SPIF)));
    498e:	0d b4       	in	r0, 0x2d	; 45
    4990:	07 fe       	sbrs	r0, 7
    4992:	fd cf       	rjmp	.-6      	; 0x498e <max3421e_read+0xc>

        // Pull slave-select low to signal transfer complete.
        MAX_SS(1);
    4994:	2c 9a       	sbi	0x05, 4	; 5

        // Return result byte.
        return (SPDR);
    4996:	8e b5       	in	r24, 0x2e	; 46
}
    4998:	08 95       	ret

0000499a <max3421e_readMultiple>:
 * @return pointer to the input buffer + count.
 */
uint8_t * max3421e_readMultiple(uint8_t reg, uint8_t count, uint8_t * values)
{
        // Pull slave-select high to initiate transfer.
        MAX_SS(0);
    499a:	2c 98       	cbi	0x05, 4	; 5

        // Send a command byte containing the register number.
        SPDR = reg;
    499c:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & (1 << SPIF))); //wait
    499e:	0d b4       	in	r0, 0x2d	; 45
    49a0:	07 fe       	sbrs	r0, 7
    49a2:	fd cf       	rjmp	.-6      	; 0x499e <max3421e_readMultiple+0x4>

        // Read [count] bytes.
        while (count--)
    49a4:	66 23       	and	r22, r22
    49a6:	89 f0       	breq	.+34     	; 0x49ca <max3421e_readMultiple+0x30>
    49a8:	61 50       	subi	r22, 0x01	; 1
    49aa:	fa 01       	movw	r30, r20
    49ac:	70 e0       	ldi	r23, 0x00	; 0
    49ae:	6f 5f       	subi	r22, 0xFF	; 255
    49b0:	7f 4f       	sbci	r23, 0xFF	; 255
    49b2:	64 0f       	add	r22, r20
    49b4:	75 1f       	adc	r23, r21
        {
                // Send empty byte while reading.
                SPDR = 0;
    49b6:	1e bc       	out	0x2e, r1	; 46
                while (!(SPSR & (1 << SPIF)));
    49b8:	0d b4       	in	r0, 0x2d	; 45
    49ba:	07 fe       	sbrs	r0, 7
    49bc:	fd cf       	rjmp	.-6      	; 0x49b8 <max3421e_readMultiple+0x1e>

                *values = SPDR;
    49be:	8e b5       	in	r24, 0x2e	; 46
    49c0:	81 93       	st	Z+, r24
        // Send a command byte containing the register number.
        SPDR = reg;
        while (!(SPSR & (1 << SPIF))); //wait

        // Read [count] bytes.
        while (count--)
    49c2:	e6 17       	cp	r30, r22
    49c4:	f7 07       	cpc	r31, r23
    49c6:	b9 f7       	brne	.-18     	; 0x49b6 <max3421e_readMultiple+0x1c>
    49c8:	af 01       	movw	r20, r30
                *values = SPDR;
                values++;
        }

        // Pull slave-select low to signal transfer complete.
        MAX_SS(1);
    49ca:	2c 9a       	sbi	0x05, 4	; 5

        // Return the byte array + count.
        return (values);
}
    49cc:	ca 01       	movw	r24, r20
    49ce:	08 95       	ret

000049d0 <max3421e_getVbusState>:
 * @return the status of Vbus.
 */
uint8_t max3421e_getVbusState()
{
        return vbusState;
}
    49d0:	80 91 84 06 	lds	r24, 0x0684
    49d4:	08 95       	ret

000049d6 <max3421e_busprobe>:
 * Probes the bus to determine device presence and speed, and switches host to this speed.
 */
void max3421e_busprobe(void)
{
        uint8_t bus_sample;
        bus_sample = max3421e_read(MAX_REG_HRSL); //Get J,K status
    49d6:	88 ef       	ldi	r24, 0xF8	; 248
    49d8:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the uint8_t

        switch (bus_sample)
    49dc:	80 7c       	andi	r24, 0xC0	; 192
    49de:	80 34       	cpi	r24, 0x40	; 64
    49e0:	81 f0       	breq	.+32     	; 0x4a02 <max3421e_busprobe+0x2c>
    49e2:	81 34       	cpi	r24, 0x41	; 65
    49e4:	28 f0       	brcs	.+10     	; 0x49f0 <max3421e_busprobe+0x1a>
    49e6:	80 38       	cpi	r24, 0x80	; 128
    49e8:	c9 f0       	breq	.+50     	; 0x4a1c <max3421e_busprobe+0x46>
    49ea:	80 3c       	cpi	r24, 0xC0	; 192
    49ec:	31 f0       	breq	.+12     	; 0x49fa <max3421e_busprobe+0x24>
    49ee:	08 95       	ret
    49f0:	88 23       	and	r24, r24
    49f2:	09 f5       	brne	.+66     	; 0x4a36 <max3421e_busprobe+0x60>
                break;
        case (bmSE1): //illegal state
                vbusState = SE1;
                break;
        case (bmSE0): //disconnected state
                vbusState = SE0;
    49f4:	10 92 84 06 	sts	0x0684, r1
    49f8:	08 95       	ret
                        max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
                        vbusState = FSHOST;
                }
                break;
        case (bmSE1): //illegal state
                vbusState = SE1;
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	80 93 84 06 	sts	0x0684, r24
    4a00:	08 95       	ret
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST); //start low-speed host
                        vbusState = LSHOST;
                }
                break;
        case (bmKSTATUS):
                if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    4a02:	88 ed       	ldi	r24, 0xD8	; 216
    4a04:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4a08:	81 fd       	sbrc	r24, 1
    4a0a:	0d c0       	rjmp	.+26     	; 0x4a26 <max3421e_busprobe+0x50>
                {
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
    4a0c:	88 ed       	ldi	r24, 0xD8	; 216
    4a0e:	6b ec       	ldi	r22, 0xCB	; 203
    4a10:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
                        vbusState = LSHOST;
    4a14:	83 e0       	ldi	r24, 0x03	; 3
    4a16:	80 93 84 06 	sts	0x0684, r24
    4a1a:	08 95       	ret

        switch (bus_sample)
        {
        //start full-speed or low-speed host
        case (bmJSTATUS):
                if ((max3421e_read(MAX_REG_MODE) & bmLOWSPEED) == 0)
    4a1c:	88 ed       	ldi	r24, 0xD8	; 216
    4a1e:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4a22:	81 fd       	sbrc	r24, 1
    4a24:	f3 cf       	rjmp	.-26     	; 0x4a0c <max3421e_busprobe+0x36>
                {
                        max3421e_write(MAX_REG_MODE, MODE_LS_HOST ); //start low-speed host
                        vbusState = LSHOST;
                } else
                {
                        max3421e_write(MAX_REG_MODE, MODE_FS_HOST ); //start full-speed host
    4a26:	88 ed       	ldi	r24, 0xD8	; 216
    4a28:	69 ec       	ldi	r22, 0xC9	; 201
    4a2a:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
                        vbusState = FSHOST;
    4a2e:	82 e0       	ldi	r24, 0x02	; 2
    4a30:	80 93 84 06 	sts	0x0684, r24
    4a34:	08 95       	ret
    4a36:	08 95       	ret

00004a38 <max3421e_interruptHandler>:

/**
 * Interrupt handler.
 */
uint8_t max3421e_interruptHandler(void)
{
    4a38:	1f 93       	push	r17
        uint8_t interruptStatus;
        uint8_t HIRQ_sendback = 0x00;

        // Determine interrupt source.
        interruptStatus = max3421e_read(MAX_REG_HIRQ);
    4a3a:	88 ec       	ldi	r24, 0xC8	; 200
    4a3c:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>

        if (interruptStatus & bmFRAMEIRQ)
    4a40:	86 fd       	sbrc	r24, 6
    4a42:	0d c0       	rjmp	.+26     	; 0x4a5e <max3421e_interruptHandler+0x26>
    4a44:	10 e0       	ldi	r17, 0x00	; 0
        {
                //->1ms SOF interrupt handler
                HIRQ_sendback |= bmFRAMEIRQ;
        }

        if (interruptStatus & bmCONDETIRQ)
    4a46:	85 ff       	sbrs	r24, 5
    4a48:	03 c0       	rjmp	.+6      	; 0x4a50 <max3421e_interruptHandler+0x18>
        {
                max3421e_busprobe();
    4a4a:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <max3421e_busprobe>

                HIRQ_sendback |= bmCONDETIRQ;
    4a4e:	10 62       	ori	r17, 0x20	; 32
        }

        // End HIRQ interrupts handling, clear serviced IRQs
        max3421e_write(MAX_REG_HIRQ, HIRQ_sendback);
    4a50:	88 ec       	ldi	r24, 0xC8	; 200
    4a52:	61 2f       	mov	r22, r17
    4a54:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        return (HIRQ_sendback);
}
    4a58:	81 2f       	mov	r24, r17
    4a5a:	1f 91       	pop	r17
    4a5c:	08 95       	ret
        uint8_t HIRQ_sendback = 0x00;

        // Determine interrupt source.
        interruptStatus = max3421e_read(MAX_REG_HIRQ);

        if (interruptStatus & bmFRAMEIRQ)
    4a5e:	10 e4       	ldi	r17, 0x40	; 64
    4a60:	f2 cf       	rjmp	.-28     	; 0x4a46 <max3421e_interruptHandler+0xe>

00004a62 <max3421e_gpxInterruptHandler>:
 * GPX interrupt handler
 */
uint8_t max3421e_gpxInterruptHandler(void)
{
        //read GPIN IRQ register
        uint8_t interruptStatus = max3421e_read(MAX_REG_GPINIRQ);
    4a62:	80 eb       	ldi	r24, 0xB0	; 176
    4a64:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
        //        vbusPwr( ON );
        //        regWr( rGPINIRQ, bmGPINIRQ7 );
        //    }

        return (interruptStatus);
}
    4a68:	08 95       	ret

00004a6a <max3421e_poll>:
/**
 * MAX3421 state change task and interrupt handler.
 * @return error code or 0 if successful.
 */
uint8_t max3421e_poll(void)
{
    4a6a:	1f 93       	push	r17
        uint8_t rcode = 0;

        // Check interrupt.
        if (MAX_INT() == 0)
    4a6c:	80 91 02 01 	lds	r24, 0x0102
    4a70:	86 ff       	sbrs	r24, 6
    4a72:	0a c0       	rjmp	.+20     	; 0x4a88 <max3421e_poll+0x1e>
    4a74:	10 e0       	ldi	r17, 0x00	; 0
                rcode = max3421e_interruptHandler();

        if (MAX_GPX() == 0)
    4a76:	80 91 02 01 	lds	r24, 0x0102
    4a7a:	85 fd       	sbrc	r24, 5
    4a7c:	02 c0       	rjmp	.+4      	; 0x4a82 <max3421e_poll+0x18>
                max3421e_gpxInterruptHandler();
    4a7e:	0e 94 31 25 	call	0x4a62	; 0x4a62 <max3421e_gpxInterruptHandler>

        return (rcode);
}
    4a82:	81 2f       	mov	r24, r17
    4a84:	1f 91       	pop	r17
    4a86:	08 95       	ret
{
        uint8_t rcode = 0;

        // Check interrupt.
        if (MAX_INT() == 0)
                rcode = max3421e_interruptHandler();
    4a88:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <max3421e_interruptHandler>
    4a8c:	18 2f       	mov	r17, r24
    4a8e:	f3 cf       	rjmp	.-26     	; 0x4a76 <max3421e_poll+0xc>

00004a90 <max3421e_reset>:
/**
 * Resets the max3412e. Sets the chip reset bit, SPI configuration is not affected.
 * @return true iff success.
 */
boolean max3421e_reset(void)
{
    4a90:	1f 93       	push	r17
        uint8_t tmp = 0;

        // Chip reset. This stops the oscillator
        max3421e_write(MAX_REG_USBCTL, bmCHIPRES);
    4a92:	88 e7       	ldi	r24, 0x78	; 120
    4a94:	60 e2       	ldi	r22, 0x20	; 32
    4a96:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        // Remove the reset
        max3421e_write(MAX_REG_USBCTL, 0x00);
    4a9a:	88 e7       	ldi	r24, 0x78	; 120
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        avr_delay(10);
    4aa2:	6a e0       	ldi	r22, 0x0A	; 10
    4aa4:	70 e0       	ldi	r23, 0x00	; 0
    4aa6:	80 e0       	ldi	r24, 0x00	; 0
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <avr_delay>
    4aae:	10 e0       	ldi	r17, 0x00	; 0
    4ab0:	02 c0       	rjmp	.+4      	; 0x4ab6 <max3421e_reset+0x26>

        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    4ab2:	11 50       	subi	r17, 0x01	; 1
        {
                // Timeout after 256 attempts.
                tmp++;
                if (tmp == 0)
    4ab4:	41 f0       	breq	.+16     	; 0x4ac6 <max3421e_reset+0x36>
        max3421e_write(MAX_REG_USBCTL, 0x00);

        avr_delay(10);

        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
    4ab6:	88 e6       	ldi	r24, 0x68	; 104
    4ab8:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4abc:	80 ff       	sbrs	r24, 0
    4abe:	f9 cf       	rjmp	.-14     	; 0x4ab2 <max3421e_reset+0x22>
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
                        return (false);
        }

        // Success.
        return (true);
}
    4ac2:	1f 91       	pop	r17
    4ac4:	08 95       	ret
        // Wait until the PLL is stable
        while (!(max3421e_read(MAX_REG_USBIRQ) & bmOSCOKIRQ))
        {
                // Timeout after 256 attempts.
                tmp++;
                if (tmp == 0)
    4ac6:	80 e0       	ldi	r24, 0x00	; 0
                        return (false);
        }

        // Success.
        return (true);
}
    4ac8:	1f 91       	pop	r17
    4aca:	08 95       	ret

00004acc <max3421e_powerOn>:
 * Initialises the max3421e after power-on.
 */
void max3421e_powerOn(void)
{
        // Configure full-duplex SPI, interrupt pulse.
        max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
    4acc:	88 e8       	ldi	r24, 0x88	; 136
    4ace:	6a e1       	ldi	r22, 0x1A	; 26
    4ad0:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        // Stop/start the oscillator.
        if (max3421e_reset() == false)
    4ad4:	0e 94 48 25 	call	0x4a90	; 0x4a90 <max3421e_reset>
    4ad8:	88 23       	and	r24, r24
    4ada:	e1 f0       	breq	.+56     	; 0x4b14 <max3421e_powerOn+0x48>
		      	printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));

        // Configure host operation.
        max3421e_write(MAX_REG_MODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ ); // set pull-downs, Host, Separate GPIN IRQ on GPX
    4adc:	88 ed       	ldi	r24, 0xD8	; 216
    4ade:	61 ed       	ldi	r22, 0xD1	; 209
    4ae0:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
        max3421e_write(MAX_REG_HIEN, bmCONDETIE | bmFRAMEIE ); //connection detection
    4ae4:	80 ed       	ldi	r24, 0xD0	; 208
    4ae6:	60 e6       	ldi	r22, 0x60	; 96
    4ae8:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        // Check if device is connected.
        max3421e_write(MAX_REG_HCTL, bmSAMPLEBUS ); // sample USB bus
    4aec:	88 ee       	ldi	r24, 0xE8	; 232
    4aee:	64 e0       	ldi	r22, 0x04	; 4
    4af0:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
        while (!(max3421e_read(MAX_REG_HCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    4af4:	88 ee       	ldi	r24, 0xE8	; 232
    4af6:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4afa:	82 ff       	sbrs	r24, 2
    4afc:	fb cf       	rjmp	.-10     	; 0x4af4 <max3421e_powerOn+0x28>

        max3421e_busprobe(); //check if anything is connected
    4afe:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <max3421e_busprobe>
        max3421e_write(MAX_REG_HIRQ, bmCONDETIRQ ); //clear connection detect interrupt
    4b02:	88 ec       	ldi	r24, 0xC8	; 200
    4b04:	60 e2       	ldi	r22, 0x20	; 32
    4b06:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        // Enable interrupt pin.
        max3421e_write(MAX_REG_CPUCTL, 0x01);
    4b0a:	80 e8       	ldi	r24, 0x80	; 128
    4b0c:	61 e0       	ldi	r22, 0x01	; 1
    4b0e:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
}
    4b12:	08 95       	ret
        // Configure full-duplex SPI, interrupt pulse.
        max3421e_write(MAX_REG_PINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX

        // Stop/start the oscillator.
        if (max3421e_reset() == false)
		      	printPgmString(PSTR("Error: OSCOKIRQ failed to assert\n"));
    4b14:	8f ec       	ldi	r24, 0xCF	; 207
    4b16:	95 e0       	ldi	r25, 0x05	; 5
    4b18:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <printPgmString>
    4b1c:	df cf       	rjmp	.-66     	; 0x4adc <max3421e_powerOn+0x10>

00004b1e <max3421e_init>:
 * Initialises the max3421e host shield. Initialises the SPI bus and sets the required pin directions.
 * Must be called before powerOn.
 */
void max3421e_init()
{
        spi_begin();
    4b1e:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <spi_begin>

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)

        // Set MAX_INT and MAX_GPX pins to input mode.
        DDRH &= ~(0x40 | 0x20);
    4b22:	e1 e0       	ldi	r30, 0x01	; 1
    4b24:	f1 e0       	ldi	r31, 0x01	; 1
    4b26:	80 81       	ld	r24, Z
    4b28:	8f 79       	andi	r24, 0x9F	; 159
    4b2a:	80 83       	st	Z, r24

        // Set SPI !SS pint to output mode.
        DDRB |= 0x10;
    4b2c:	24 9a       	sbi	0x04, 4	; 4

        // Set RESET pin to output
        DDRH |= 0x10;
    4b2e:	80 81       	ld	r24, Z
    4b30:	80 61       	ori	r24, 0x10	; 16
    4b32:	80 83       	st	Z, r24

#endif


        // Pull SPI !SS high
        MAX_SS(1);
    4b34:	2c 9a       	sbi	0x05, 4	; 5

        // Reset
        MAX_RESET(1);
    4b36:	e2 e0       	ldi	r30, 0x02	; 2
    4b38:	f1 e0       	ldi	r31, 0x01	; 1
    4b3a:	80 81       	ld	r24, Z
    4b3c:	80 61       	ori	r24, 0x10	; 16
    4b3e:	80 83       	st	Z, r24
}
    4b40:	08 95       	ret

00004b42 <spi_begin>:
        // MISO pin automatically overrides to INPUT.
        // When the SS pin is set as OUTPUT, it can be used as
        // a general purpose output port (it doesn't influence
        // SPI operations).

        SPI_PORT_DIR |= SPI_BIT_MOSI | SPI_BIT_SCK | SPI_BIT_SS;
    4b42:	84 b1       	in	r24, 0x04	; 4
    4b44:	87 60       	ori	r24, 0x07	; 7
    4b46:	84 b9       	out	0x04, r24	; 4
        SPI_PORT_DIR &= ~SPI_BIT_MISO;
    4b48:	23 98       	cbi	0x04, 3	; 4

        SPI_PORT &= ~(SPI_BIT_MOSI | SPI_BIT_SCK);
    4b4a:	85 b1       	in	r24, 0x05	; 5
    4b4c:	89 7f       	andi	r24, 0xF9	; 249
    4b4e:	85 b9       	out	0x05, r24	; 5
        SPI_PORT |= SPI_BIT_SS;
    4b50:	28 9a       	sbi	0x05, 0	; 5

        // Warning: if the SS pin ever becomes a LOW INPUT then SPI
        // automatically switches to Slave, so the data direction of
        // the SS pin MUST be kept as OUTPUT.
        SPCR |= _BV(MSTR);
    4b52:	8c b5       	in	r24, 0x2c	; 44
    4b54:	80 61       	ori	r24, 0x10	; 16
    4b56:	8c bd       	out	0x2c, r24	; 44
        SPCR |= _BV(SPE);
    4b58:	8c b5       	in	r24, 0x2c	; 44
    4b5a:	80 64       	ori	r24, 0x40	; 64
    4b5c:	8c bd       	out	0x2c, r24	; 44
}
    4b5e:	08 95       	ret

00004b60 <__vector_23>:
volatile uint32_t timer0_millis = 0;
static uint8_t timer0_fract = 0;
volatile uint16_t timer1_overflow_count = 0x0;

SIGNAL(TIMER0_OVF_vect)
{
    4b60:	1f 92       	push	r1
    4b62:	0f 92       	push	r0
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	0f 92       	push	r0
    4b68:	11 24       	eor	r1, r1
    4b6a:	2f 93       	push	r18
    4b6c:	3f 93       	push	r19
    4b6e:	8f 93       	push	r24
    4b70:	9f 93       	push	r25
    4b72:	af 93       	push	r26
    4b74:	bf 93       	push	r27

        // copy these to local variables so they can be stored in registers
        // (volatile variables must be read from memory on every access)
        uint32_t m = timer0_millis;
    4b76:	80 91 89 06 	lds	r24, 0x0689
    4b7a:	90 91 8a 06 	lds	r25, 0x068A
    4b7e:	a0 91 8b 06 	lds	r26, 0x068B
    4b82:	b0 91 8c 06 	lds	r27, 0x068C
        uint8_t f = timer0_fract;
    4b86:	30 91 8f 06 	lds	r19, 0x068F

        m += MILLIS_INC;
    4b8a:	01 96       	adiw	r24, 0x01	; 1
    4b8c:	a1 1d       	adc	r26, r1
    4b8e:	b1 1d       	adc	r27, r1
        f += FRACT_INC;
    4b90:	23 2f       	mov	r18, r19
    4b92:	2d 5f       	subi	r18, 0xFD	; 253
        if (f >= FRACT_MAX)
    4b94:	2d 37       	cpi	r18, 0x7D	; 125
    4b96:	20 f0       	brcs	.+8      	; 0x4ba0 <__vector_23+0x40>
        {
                f -= FRACT_MAX;
    4b98:	2d 57       	subi	r18, 0x7D	; 125
                m += 1;
    4b9a:	01 96       	adiw	r24, 0x01	; 1
    4b9c:	a1 1d       	adc	r26, r1
    4b9e:	b1 1d       	adc	r27, r1
        }

        timer0_fract = f;
    4ba0:	20 93 8f 06 	sts	0x068F, r18
        timer0_millis = m;
    4ba4:	80 93 89 06 	sts	0x0689, r24
    4ba8:	90 93 8a 06 	sts	0x068A, r25
    4bac:	a0 93 8b 06 	sts	0x068B, r26
    4bb0:	b0 93 8c 06 	sts	0x068C, r27
        timer0_overflow_count ++;
    4bb4:	80 91 85 06 	lds	r24, 0x0685
    4bb8:	90 91 86 06 	lds	r25, 0x0686
    4bbc:	a0 91 87 06 	lds	r26, 0x0687
    4bc0:	b0 91 88 06 	lds	r27, 0x0688
    4bc4:	01 96       	adiw	r24, 0x01	; 1
    4bc6:	a1 1d       	adc	r26, r1
    4bc8:	b1 1d       	adc	r27, r1
    4bca:	80 93 85 06 	sts	0x0685, r24
    4bce:	90 93 86 06 	sts	0x0686, r25
    4bd2:	a0 93 87 06 	sts	0x0687, r26
    4bd6:	b0 93 88 06 	sts	0x0688, r27
}
    4bda:	bf 91       	pop	r27
    4bdc:	af 91       	pop	r26
    4bde:	9f 91       	pop	r25
    4be0:	8f 91       	pop	r24
    4be2:	3f 91       	pop	r19
    4be4:	2f 91       	pop	r18
    4be6:	0f 90       	pop	r0
    4be8:	0f be       	out	0x3f, r0	; 63
    4bea:	0f 90       	pop	r0
    4bec:	1f 90       	pop	r1
    4bee:	18 95       	reti

00004bf0 <avr_millis>:

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4bf0:	8f b7       	in	r24, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4bf2:	f8 94       	cli
        m = timer0_millis;
    4bf4:	20 91 89 06 	lds	r18, 0x0689
    4bf8:	30 91 8a 06 	lds	r19, 0x068A
    4bfc:	40 91 8b 06 	lds	r20, 0x068B
    4c00:	50 91 8c 06 	lds	r21, 0x068C
        SREG = oldSREG;
    4c04:	8f bf       	out	0x3f, r24	; 63

        // Enable interrupts
        sei();
    4c06:	78 94       	sei

        return m;
}
    4c08:	b9 01       	movw	r22, r18
    4c0a:	ca 01       	movw	r24, r20
    4c0c:	08 95       	ret

00004c0e <avr_ticks>:

uint64_t avr_ticks()
{
    4c0e:	af 92       	push	r10
    4c10:	bf 92       	push	r11
    4c12:	cf 92       	push	r12
    4c14:	df 92       	push	r13
    4c16:	ef 92       	push	r14
    4c18:	ff 92       	push	r15
    4c1a:	0f 93       	push	r16
    4c1c:	1f 93       	push	r17
        return (timer0_overflow_count * 256 + TCNT0) * 64;
    4c1e:	a0 90 85 06 	lds	r10, 0x0685
    4c22:	b0 90 86 06 	lds	r11, 0x0686
    4c26:	c0 90 87 06 	lds	r12, 0x0687
    4c2a:	d0 90 88 06 	lds	r13, 0x0688
    4c2e:	86 b5       	in	r24, 0x26	; 38
    4c30:	dc 2c       	mov	r13, r12
    4c32:	cb 2c       	mov	r12, r11
    4c34:	ba 2c       	mov	r11, r10
    4c36:	aa 24       	eor	r10, r10
    4c38:	a8 0e       	add	r10, r24
    4c3a:	b1 1c       	adc	r11, r1
    4c3c:	c1 1c       	adc	r12, r1
    4c3e:	d1 1c       	adc	r13, r1
    4c40:	aa 0c       	add	r10, r10
    4c42:	bb 1c       	adc	r11, r11
    4c44:	cc 1c       	adc	r12, r12
    4c46:	dd 1c       	adc	r13, r13
    4c48:	aa 0c       	add	r10, r10
    4c4a:	bb 1c       	adc	r11, r11
    4c4c:	cc 1c       	adc	r12, r12
    4c4e:	dd 1c       	adc	r13, r13
    4c50:	aa 0c       	add	r10, r10
    4c52:	bb 1c       	adc	r11, r11
    4c54:	cc 1c       	adc	r12, r12
    4c56:	dd 1c       	adc	r13, r13
    4c58:	aa 0c       	add	r10, r10
    4c5a:	bb 1c       	adc	r11, r11
    4c5c:	cc 1c       	adc	r12, r12
    4c5e:	dd 1c       	adc	r13, r13
    4c60:	aa 0c       	add	r10, r10
    4c62:	bb 1c       	adc	r11, r11
    4c64:	cc 1c       	adc	r12, r12
    4c66:	dd 1c       	adc	r13, r13
    4c68:	aa 0c       	add	r10, r10
    4c6a:	bb 1c       	adc	r11, r11
    4c6c:	cc 1c       	adc	r12, r12
    4c6e:	dd 1c       	adc	r13, r13
}
    4c70:	95 01       	movw	r18, r10
    4c72:	a6 01       	movw	r20, r12
    4c74:	60 e0       	ldi	r22, 0x00	; 0
    4c76:	70 e0       	ldi	r23, 0x00	; 0
    4c78:	80 e0       	ldi	r24, 0x00	; 0
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	1f 91       	pop	r17
    4c7e:	0f 91       	pop	r16
    4c80:	ff 90       	pop	r15
    4c82:	ef 90       	pop	r14
    4c84:	df 90       	pop	r13
    4c86:	cf 90       	pop	r12
    4c88:	bf 90       	pop	r11
    4c8a:	af 90       	pop	r10
    4c8c:	08 95       	ret

00004c8e <avr_delay>:

void avr_delay(unsigned long ms)
{
    4c8e:	ef 92       	push	r14
    4c90:	ff 92       	push	r15
    4c92:	0f 93       	push	r16
    4c94:	1f 93       	push	r17
    4c96:	7b 01       	movw	r14, r22
    4c98:	8c 01       	movw	r16, r24
}

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4c9a:	8f b7       	in	r24, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4c9c:	f8 94       	cli
        m = timer0_millis;
    4c9e:	40 91 89 06 	lds	r20, 0x0689
    4ca2:	50 91 8a 06 	lds	r21, 0x068A
    4ca6:	60 91 8b 06 	lds	r22, 0x068B
    4caa:	70 91 8c 06 	lds	r23, 0x068C
        SREG = oldSREG;
    4cae:	8f bf       	out	0x3f, r24	; 63

        // Enable interrupts
        sei();
    4cb0:	78 94       	sei
}

unsigned long avr_millis()
{
        unsigned long m;
        uint8_t oldSREG = SREG;
    4cb2:	2f b7       	in	r18, 0x3f	; 63

        // disable interrupts while we read timer0_millis or we might get an
        // inconsistent value (e.g. in the middle of a write to timer0_millis)
        cli();
    4cb4:	f8 94       	cli
        m = timer0_millis;
    4cb6:	80 91 89 06 	lds	r24, 0x0689
    4cba:	90 91 8a 06 	lds	r25, 0x068A
    4cbe:	a0 91 8b 06 	lds	r26, 0x068B
    4cc2:	b0 91 8c 06 	lds	r27, 0x068C
        SREG = oldSREG;
    4cc6:	2f bf       	out	0x3f, r18	; 63

        // Enable interrupts
        sei();
    4cc8:	78 94       	sei

void avr_delay(unsigned long ms)
{
        unsigned long start = avr_millis();

        while (avr_millis() - start <= ms)
    4cca:	84 1b       	sub	r24, r20
    4ccc:	95 0b       	sbc	r25, r21
    4cce:	a6 0b       	sbc	r26, r22
    4cd0:	b7 0b       	sbc	r27, r23
    4cd2:	e8 16       	cp	r14, r24
    4cd4:	f9 06       	cpc	r15, r25
    4cd6:	0a 07       	cpc	r16, r26
    4cd8:	1b 07       	cpc	r17, r27
    4cda:	58 f7       	brcc	.-42     	; 0x4cb2 <avr_delay+0x24>
                ;
}
    4cdc:	1f 91       	pop	r17
    4cde:	0f 91       	pop	r16
    4ce0:	ff 90       	pop	r15
    4ce2:	ef 90       	pop	r14
    4ce4:	08 95       	ret

00004ce6 <avr_micros>:

uint32_t avr_micros()
{
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MICROS_DIVIDER;
    4ce6:	80 91 84 00 	lds	r24, 0x0084
    4cea:	90 91 85 00 	lds	r25, 0x0085
    4cee:	20 91 8d 06 	lds	r18, 0x068D
    4cf2:	30 91 8e 06 	lds	r19, 0x068E
    4cf6:	40 e0       	ldi	r20, 0x00	; 0
    4cf8:	50 e0       	ldi	r21, 0x00	; 0
    4cfa:	a9 01       	movw	r20, r18
    4cfc:	33 27       	eor	r19, r19
    4cfe:	22 27       	eor	r18, r18
    4d00:	a0 e0       	ldi	r26, 0x00	; 0
    4d02:	b0 e0       	ldi	r27, 0x00	; 0
    4d04:	28 0f       	add	r18, r24
    4d06:	39 1f       	adc	r19, r25
    4d08:	4a 1f       	adc	r20, r26
    4d0a:	5b 1f       	adc	r21, r27
    4d0c:	22 0f       	add	r18, r18
    4d0e:	33 1f       	adc	r19, r19
    4d10:	44 1f       	adc	r20, r20
    4d12:	55 1f       	adc	r21, r21
    4d14:	22 0f       	add	r18, r18
    4d16:	33 1f       	adc	r19, r19
    4d18:	44 1f       	adc	r20, r20
    4d1a:	55 1f       	adc	r21, r21
    4d1c:	2c 7f       	andi	r18, 0xFC	; 252
    4d1e:	5f 70       	andi	r21, 0x0F	; 15
}
    4d20:	b9 01       	movw	r22, r18
    4d22:	ca 01       	movw	r24, r20
    4d24:	08 95       	ret

00004d26 <__vector_20>:
        return ((uint32_t)(TCNT1 + ((uint32_t)timer1_overflow_count << 16)) * TIMER1_MULTIPLIER) / TIMER1_MILLIS_DIVIDER;
}
*/

SIGNAL(TIMER1_OVF_vect)
{
    4d26:	1f 92       	push	r1
    4d28:	0f 92       	push	r0
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	0f 92       	push	r0
    4d2e:	11 24       	eor	r1, r1
    4d30:	8f 93       	push	r24
    4d32:	9f 93       	push	r25
        timer1_overflow_count ++;
    4d34:	80 91 8d 06 	lds	r24, 0x068D
    4d38:	90 91 8e 06 	lds	r25, 0x068E
    4d3c:	01 96       	adiw	r24, 0x01	; 1
    4d3e:	90 93 8e 06 	sts	0x068E, r25
    4d42:	80 93 8d 06 	sts	0x068D, r24
}
    4d46:	9f 91       	pop	r25
    4d48:	8f 91       	pop	r24
    4d4a:	0f 90       	pop	r0
    4d4c:	0f be       	out	0x3f, r0	; 63
    4d4e:	0f 90       	pop	r0
    4d50:	1f 90       	pop	r1
    4d52:	18 95       	reti

00004d54 <avr_timer1Init>:

void avr_timer1Init()
{
        // Initialise 16-bit timer 1
        // Set prescale to 64
        sbi(TCCR1B, CS01);
    4d54:	e1 e8       	ldi	r30, 0x81	; 129
    4d56:	f0 e0       	ldi	r31, 0x00	; 0
    4d58:	80 81       	ld	r24, Z
    4d5a:	82 60       	ori	r24, 0x02	; 2
    4d5c:	80 83       	st	Z, r24
        sbi(TCCR1B, CS00);
    4d5e:	80 81       	ld	r24, Z
    4d60:	81 60       	ori	r24, 0x01	; 1
    4d62:	80 83       	st	Z, r24

        sbi(TIMSK1, TOIE1);
    4d64:	ef e6       	ldi	r30, 0x6F	; 111
    4d66:	f0 e0       	ldi	r31, 0x00	; 0
    4d68:	80 81       	ld	r24, Z
    4d6a:	81 60       	ori	r24, 0x01	; 1
    4d6c:	80 83       	st	Z, r24
}
    4d6e:	08 95       	ret

00004d70 <setup_timer>:

void setup_timer()
{
        // this needs to be called before setup() or some functions won't
        // work there
        sei();
    4d70:	78 94       	sei

        avr_timer1Init();
    4d72:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <avr_timer1Init>
        // set timer 0 prescale factor to 64
        #ifdef __AVR_ATmega128__
        sbi(TCCR0, CS01);
        sbi(TCCR0, CS00);
        #else
        sbi(TCCR0B, CS01);
    4d76:	85 b5       	in	r24, 0x25	; 37
    4d78:	82 60       	ori	r24, 0x02	; 2
    4d7a:	85 bd       	out	0x25, r24	; 37
        sbi(TCCR0B, CS00);
    4d7c:	85 b5       	in	r24, 0x25	; 37
    4d7e:	81 60       	ori	r24, 0x01	; 1
    4d80:	85 bd       	out	0x25, r24	; 37

        // enable timer 0 overflow interrupt
        #ifdef __AVR_ATmega128__
        sbi(TIMSK, TOIE0);
        #else
        sbi(TIMSK0, TOIE0);
    4d82:	ee e6       	ldi	r30, 0x6E	; 110
    4d84:	f0 e0       	ldi	r31, 0x00	; 0
    4d86:	80 81       	ld	r24, Z
    4d88:	81 60       	ori	r24, 0x01	; 1
    4d8a:	80 83       	st	Z, r24
        sbi(ADCSRA, ADPS2);
        sbi(ADCSRA, ADPS1);
        sbi(ADCSRA, ADPS0);
        */

}
    4d8c:	08 95       	ret

00004d8e <usb_getUsbTaskState>:
}

uint8_t usb_getUsbTaskState()
{
        return (usb_task_state);
}
    4d8e:	80 91 00 02 	lds	r24, 0x0200
    4d92:	08 95       	ret

00004d94 <usb_setUsbTaskState>:

void usb_setUsbTaskState(uint8_t state)
{
        usb_task_state = state;
    4d94:	80 93 00 02 	sts	0x0200, r24
}
    4d98:	08 95       	ret

00004d9a <usb_getDevice>:

usb_device * usb_getDevice(uint8_t address)
{
    4d9a:	98 2f       	mov	r25, r24
        if (address>USB_NUMDEVICES+1) return NULL;
    4d9c:	84 30       	cpi	r24, 0x04	; 4
    4d9e:	40 f4       	brcc	.+16     	; 0x4db0 <usb_getDevice+0x16>

        return &(deviceTable[address]);
    4da0:	86 e1       	ldi	r24, 0x16	; 22
    4da2:	98 9f       	mul	r25, r24
    4da4:	90 01       	movw	r18, r0
    4da6:	11 24       	eor	r1, r1
    4da8:	23 54       	subi	r18, 0x43	; 67
    4daa:	39 4f       	sbci	r19, 0xF9	; 249
}
    4dac:	c9 01       	movw	r24, r18
    4dae:	08 95       	ret
        usb_task_state = state;
}

usb_device * usb_getDevice(uint8_t address)
{
        if (address>USB_NUMDEVICES+1) return NULL;
    4db0:	20 e0       	ldi	r18, 0x00	; 0
    4db2:	30 e0       	ldi	r19, 0x00	; 0

        return &(deviceTable[address]);
}
    4db4:	c9 01       	movw	r24, r18
    4db6:	08 95       	ret

00004db8 <usb_write>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes written, or error code in case of failure.
 */
int usb_write(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data)
{
    4db8:	2f 92       	push	r2
    4dba:	3f 92       	push	r3
    4dbc:	4f 92       	push	r4
    4dbe:	5f 92       	push	r5
    4dc0:	6f 92       	push	r6
    4dc2:	7f 92       	push	r7
    4dc4:	8f 92       	push	r8
    4dc6:	9f 92       	push	r9
    4dc8:	af 92       	push	r10
    4dca:	bf 92       	push	r11
    4dcc:	cf 92       	push	r12
    4dce:	df 92       	push	r13
    4dd0:	ef 92       	push	r14
    4dd2:	ff 92       	push	r15
    4dd4:	0f 93       	push	r16
    4dd6:	1f 93       	push	r17
    4dd8:	df 93       	push	r29
    4dda:	cf 93       	push	r28
    4ddc:	00 d0       	rcall	.+0      	; 0x4dde <usb_write+0x26>
    4dde:	cd b7       	in	r28, 0x3d	; 61
    4de0:	de b7       	in	r29, 0x3e	; 62
    4de2:	fc 01       	movw	r30, r24
    4de4:	5b 01       	movw	r10, r22
    4de6:	2a 01       	movw	r4, r20
    4de8:	92 2e       	mov	r9, r18
    4dea:	83 2e       	mov	r8, r19
        uint8_t rcode = 0, retry_count;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    4dec:	80 ee       	ldi	r24, 0xE0	; 224
    4dee:	60 81       	ld	r22, Z
    4df0:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        unsigned int bytes_tosend, nak_count;
        unsigned int bytes_left = length;
        unsigned int nak_limit = USB_NAK_LIMIT;

        uint32_t timeout = avr_millis() + USB_XFER_TIMEOUT;
    4df4:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    4df8:	6b 01       	movw	r12, r22
    4dfa:	7c 01       	movw	r14, r24
    4dfc:	88 e8       	ldi	r24, 0x88	; 136
    4dfe:	93 e1       	ldi	r25, 0x13	; 19
    4e00:	a0 e0       	ldi	r26, 0x00	; 0
    4e02:	b0 e0       	ldi	r27, 0x00	; 0
    4e04:	c8 0e       	add	r12, r24
    4e06:	d9 1e       	adc	r13, r25
    4e08:	ea 1e       	adc	r14, r26
    4e0a:	fb 1e       	adc	r15, r27

        uint8_t maxPacketSize = endpoint->maxPacketSize;
    4e0c:	d5 01       	movw	r26, r10
    4e0e:	12 96       	adiw	r26, 0x02	; 2
    4e10:	1c 91       	ld	r17, X

        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;
    4e12:	11 23       	and	r17, r17
    4e14:	c9 f4       	brne	.+50     	; 0x4e48 <usb_write+0x90>
    4e16:	0e ef       	ldi	r16, 0xFE	; 254
    4e18:	10 e0       	ldi	r17, 0x00	; 0

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle

        // Should be 0 in all cases.
        return (rcode);
}
    4e1a:	c8 01       	movw	r24, r16
    4e1c:	0f 90       	pop	r0
    4e1e:	0f 90       	pop	r0
    4e20:	0f 90       	pop	r0
    4e22:	cf 91       	pop	r28
    4e24:	df 91       	pop	r29
    4e26:	1f 91       	pop	r17
    4e28:	0f 91       	pop	r16
    4e2a:	ff 90       	pop	r15
    4e2c:	ef 90       	pop	r14
    4e2e:	df 90       	pop	r13
    4e30:	cf 90       	pop	r12
    4e32:	bf 90       	pop	r11
    4e34:	af 90       	pop	r10
    4e36:	9f 90       	pop	r9
    4e38:	8f 90       	pop	r8
    4e3a:	7f 90       	pop	r7
    4e3c:	6f 90       	pop	r6
    4e3e:	5f 90       	pop	r5
    4e40:	4f 90       	pop	r4
    4e42:	3f 90       	pop	r3
    4e44:	2f 90       	pop	r2
    4e46:	08 95       	ret
        uint8_t maxPacketSize = endpoint->maxPacketSize;

        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value
    4e48:	88 ee       	ldi	r24, 0xE8	; 232
    4e4a:	f5 01       	movw	r30, r10
    4e4c:	64 81       	ldd	r22, Z+4	; 0x04
    4e4e:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        while (bytes_left)
    4e52:	41 14       	cp	r4, r1
    4e54:	51 04       	cpc	r5, r1
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <usb_write+0xa2>
    4e58:	74 c0       	rjmp	.+232    	; 0x4f42 <usb_write+0x18a>
    4e5a:	21 2e       	mov	r2, r17
    4e5c:	33 24       	eor	r3, r3
    4e5e:	89 2d       	mov	r24, r9
    4e60:	98 2d       	mov	r25, r8
    4e62:	9c 01       	movw	r18, r24
    4e64:	39 01       	movw	r6, r18
        {
                retry_count = 0;
                nak_count = 0;

                bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    4e66:	42 01       	movw	r8, r4
    4e68:	24 14       	cp	r2, r4
    4e6a:	35 04       	cpc	r3, r5
    4e6c:	08 f4       	brcc	.+2      	; 0x4e70 <usb_write+0xb8>
    4e6e:	67 c0       	rjmp	.+206    	; 0x4f3e <usb_write+0x186>

                // Filling output FIFO
                max3421e_writeMultiple(MAX_REG_SNDFIFO, bytes_tosend, data_p);
    4e70:	89 82       	std	Y+1, r8	; 0x01
    4e72:	80 e1       	ldi	r24, 0x10	; 16
    4e74:	68 2d       	mov	r22, r8
    4e76:	a3 01       	movw	r20, r6
    4e78:	0e 94 a5 24 	call	0x494a	; 0x494a <max3421e_writeMultiple>

                // Set number of bytes to send.
                max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    4e7c:	88 e3       	ldi	r24, 0x38	; 56
    4e7e:	68 2d       	mov	r22, r8
    4e80:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

                // Dispatch packet.
                max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address));
    4e84:	d5 01       	movw	r26, r10
    4e86:	6c 91       	ld	r22, X
    4e88:	60 62       	ori	r22, 0x20	; 32
    4e8a:	80 ef       	ldi	r24, 0xF0	; 240
    4e8c:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

                // Wait for completion.
                while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    4e90:	88 ec       	ldi	r24, 0xC8	; 200
    4e92:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4e96:	87 ff       	sbrs	r24, 7
    4e98:	fb cf       	rjmp	.-10     	; 0x4e90 <usb_write+0xd8>

                // Clear IRQ.
                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4e9a:	88 ec       	ldi	r24, 0xC8	; 200
    4e9c:	60 e8       	ldi	r22, 0x80	; 128
    4e9e:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

                rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4ea2:	88 ef       	ldi	r24, 0xF8	; 248
    4ea4:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4ea8:	18 2f       	mov	r17, r24
    4eaa:	1f 70       	andi	r17, 0x0F	; 15

                while (rcode && (timeout > avr_millis()))
    4eac:	e1 f1       	breq	.+120    	; 0x4f26 <usb_write+0x16e>
    4eae:	00 e0       	ldi	r16, 0x00	; 0
    4eb0:	1b 82       	std	Y+3, r1	; 0x03
    4eb2:	1a 82       	std	Y+2, r1	; 0x02
    4eb4:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    4eb8:	6c 15       	cp	r22, r12
    4eba:	7d 05       	cpc	r23, r13
    4ebc:	8e 05       	cpc	r24, r14
    4ebe:	9f 05       	cpc	r25, r15
    4ec0:	90 f5       	brcc	.+100    	; 0x4f26 <usb_write+0x16e>
                {
                        switch (rcode)
    4ec2:	14 30       	cpi	r17, 0x04	; 4
    4ec4:	29 f0       	breq	.+10     	; 0x4ed0 <usb_write+0x118>
    4ec6:	1e 30       	cpi	r17, 0x0E	; 14
    4ec8:	a1 f1       	breq	.+104    	; 0x4f32 <usb_write+0x17a>
                                {
                                        return (rcode); //return TIMEOUT
                                }
                                break;
                        default:
                                return (rcode);
    4eca:	01 2f       	mov	r16, r17
    4ecc:	10 e0       	ldi	r17, 0x00	; 0
    4ece:	a5 cf       	rjmp	.-182    	; 0x4e1a <usb_write+0x62>
                while (rcode && (timeout > avr_millis()))
                {
                        switch (rcode)
                        {
                        case hrNAK:
                                nak_count++;
    4ed0:	ea 81       	ldd	r30, Y+2	; 0x02
    4ed2:	fb 81       	ldd	r31, Y+3	; 0x03
    4ed4:	31 96       	adiw	r30, 0x01	; 1
    4ed6:	fb 83       	std	Y+3, r31	; 0x03
    4ed8:	ea 83       	std	Y+2, r30	; 0x02
                                if (nak_limit && (nak_count == USB_NAK_LIMIT))
    4eda:	e0 50       	subi	r30, 0x00	; 0
    4edc:	fd 47       	sbci	r31, 0x7D	; 125
    4ede:	09 f4       	brne	.+2      	; 0x4ee2 <usb_write+0x12a>
    4ee0:	3c c0       	rjmp	.+120    	; 0x4f5a <usb_write+0x1a2>
                        default:
                                return (rcode);
                        }

                        // Process NAK according to Host out NAK bug.
                        max3421e_write(MAX_REG_SNDBC, 0);
    4ee2:	88 e3       	ldi	r24, 0x38	; 56
    4ee4:	60 e0       	ldi	r22, 0x00	; 0
    4ee6:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
                        max3421e_write(MAX_REG_SNDFIFO, *data_p);
    4eea:	80 e1       	ldi	r24, 0x10	; 16
    4eec:	d3 01       	movw	r26, r6
    4eee:	6c 91       	ld	r22, X
    4ef0:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
                        max3421e_write(MAX_REG_SNDBC, bytes_tosend);
    4ef4:	88 e3       	ldi	r24, 0x38	; 56
    4ef6:	69 81       	ldd	r22, Y+1	; 0x01
    4ef8:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
                        max3421e_write(MAX_REG_HXFR, (tokOUT | endpoint->address)); //dispatch packet
    4efc:	f5 01       	movw	r30, r10
    4efe:	60 81       	ld	r22, Z
    4f00:	60 62       	ori	r22, 0x20	; 32
    4f02:	80 ef       	ldi	r24, 0xF0	; 240
    4f04:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

                        // Wait for the completion interrupt.
                        while (!(max3421e_read(MAX_REG_HIRQ) & bmHXFRDNIRQ));
    4f08:	88 ec       	ldi	r24, 0xC8	; 200
    4f0a:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4f0e:	87 ff       	sbrs	r24, 7
    4f10:	fb cf       	rjmp	.-10     	; 0x4f08 <usb_write+0x150>

                        // Clear interrupt.
                        max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4f12:	88 ec       	ldi	r24, 0xC8	; 200
    4f14:	60 e8       	ldi	r22, 0x80	; 128
    4f16:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    4f1a:	88 ef       	ldi	r24, 0xF8	; 248
    4f1c:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4f20:	18 2f       	mov	r17, r24
    4f22:	1f 70       	andi	r17, 0x0F	; 15
                // Clear IRQ.
                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

                rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);

                while (rcode && (timeout > avr_millis()))
    4f24:	39 f6       	brne	.-114    	; 0x4eb4 <usb_write+0xfc>
                        max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
    4f26:	48 18       	sub	r4, r8
    4f28:	59 08       	sbc	r5, r9
        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

        while (bytes_left)
    4f2a:	e1 f0       	breq	.+56     	; 0x4f64 <usb_write+0x1ac>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
    4f2c:	68 0c       	add	r6, r8
    4f2e:	79 1c       	adc	r7, r9
    4f30:	9a cf       	rjmp	.-204    	; 0x4e66 <usb_write+0xae>
                                {
                                        return (rcode); //return NAK
                                }
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    4f32:	0f 5f       	subi	r16, 0xFF	; 255
                                if (retry_count == USB_RETRY_LIMIT)
    4f34:	03 30       	cpi	r16, 0x03	; 3
    4f36:	a9 f6       	brne	.-86     	; 0x4ee2 <usb_write+0x12a>
    4f38:	0e e0       	ldi	r16, 0x0E	; 14
    4f3a:	10 e0       	ldi	r17, 0x00	; 0
    4f3c:	6e cf       	rjmp	.-292    	; 0x4e1a <usb_write+0x62>
        while (bytes_left)
        {
                retry_count = 0;
                nak_count = 0;

                bytes_tosend = (bytes_left >= maxPacketSize) ? maxPacketSize : bytes_left;
    4f3e:	41 01       	movw	r8, r2
    4f40:	97 cf       	rjmp	.-210    	; 0x4e70 <usb_write+0xb8>
        // If maximum packet size is not set, return.
        if (!maxPacketSize) return 0xFE;

        max3421e_write(MAX_REG_HCTL, endpoint->sendToggle); //set toggle value

        while (bytes_left)
    4f42:	00 e0       	ldi	r16, 0x00	; 0
    4f44:	10 e0       	ldi	r17, 0x00	; 0

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    4f46:	88 ef       	ldi	r24, 0xF8	; 248
    4f48:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    4f4c:	85 fd       	sbrc	r24, 5
    4f4e:	08 c0       	rjmp	.+16     	; 0x4f60 <usb_write+0x1a8>
    4f50:	80 e4       	ldi	r24, 0x40	; 64
    4f52:	d5 01       	movw	r26, r10
    4f54:	14 96       	adiw	r26, 0x04	; 4
    4f56:	8c 93       	st	X, r24
    4f58:	60 cf       	rjmp	.-320    	; 0x4e1a <usb_write+0x62>
                {
                        switch (rcode)
                        {
                        case hrNAK:
                                nak_count++;
                                if (nak_limit && (nak_count == USB_NAK_LIMIT))
    4f5a:	04 e0       	ldi	r16, 0x04	; 4
    4f5c:	10 e0       	ldi	r17, 0x00	; 0
    4f5e:	5d cf       	rjmp	.-326    	; 0x4e1a <usb_write+0x62>

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }

        endpoint->sendToggle = (max3421e_read(MAX_REG_HRSL) & bmSNDTOGRD) ? bmSNDTOG1 : bmSNDTOG0; //update toggle
    4f60:	80 e8       	ldi	r24, 0x80	; 128
    4f62:	f7 cf       	rjmp	.-18     	; 0x4f52 <usb_write+0x19a>

                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
                }

                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
    4f64:	01 2f       	mov	r16, r17
    4f66:	10 e0       	ldi	r17, 0x00	; 0
    4f68:	ee cf       	rjmp	.-36     	; 0x4f46 <usb_write+0x18e>

00004f6a <usb_bulkWrite>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkWrite(usb_device * device, uint16_t length, uint8_t * data)
{
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	db 01       	movw	r26, r22
    4f6e:	9a 01       	movw	r18, r20
        return usb_write(device, &(device->bulk_out) , length, data);
    4f70:	3e 96       	adiw	r30, 0x0e	; 14
    4f72:	bf 01       	movw	r22, r30
    4f74:	ad 01       	movw	r20, r26
    4f76:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <usb_write>
}
    4f7a:	08 95       	ret

00004f7c <usb_dispatchPacket>:

        return &(deviceTable[address]);
}

int usb_dispatchPacket(uint8_t token, usb_endpoint * endpoint, unsigned int nakLimit)
{
    4f7c:	7f 92       	push	r7
    4f7e:	8f 92       	push	r8
    4f80:	9f 92       	push	r9
    4f82:	af 92       	push	r10
    4f84:	bf 92       	push	r11
    4f86:	cf 92       	push	r12
    4f88:	df 92       	push	r13
    4f8a:	ef 92       	push	r14
    4f8c:	ff 92       	push	r15
    4f8e:	0f 93       	push	r16
    4f90:	1f 93       	push	r17
    4f92:	cf 93       	push	r28
    4f94:	df 93       	push	r29
    4f96:	78 2e       	mov	r7, r24
    4f98:	5b 01       	movw	r10, r22
    4f9a:	4a 01       	movw	r8, r20
        uint32_t timeout = avr_millis() + USB_XFER_TIMEOUT;
    4f9c:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    4fa0:	7b 01       	movw	r14, r22
    4fa2:	8c 01       	movw	r16, r24
    4fa4:	88 e8       	ldi	r24, 0x88	; 136
    4fa6:	93 e1       	ldi	r25, 0x13	; 19
    4fa8:	a0 e0       	ldi	r26, 0x00	; 0
    4faa:	b0 e0       	ldi	r27, 0x00	; 0
    4fac:	e8 0e       	add	r14, r24
    4fae:	f9 1e       	adc	r15, r25
    4fb0:	0a 1f       	adc	r16, r26
    4fb2:	1b 1f       	adc	r17, r27
    4fb4:	dd 24       	eor	r13, r13
    4fb6:	c0 e0       	ldi	r28, 0x00	; 0
    4fb8:	d0 e0       	ldi	r29, 0x00	; 0
    4fba:	cc 24       	eor	r12, r12
        uint8_t tmpdata;
        uint8_t rcode = 0;
        unsigned int nak_count = 0;
        char retry_count = 0;

        while (timeout > avr_millis())
    4fbc:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    4fc0:	6e 15       	cp	r22, r14
    4fc2:	7f 05       	cpc	r23, r15
    4fc4:	80 07       	cpc	r24, r16
    4fc6:	91 07       	cpc	r25, r17
    4fc8:	70 f5       	brcc	.+92     	; 0x5026 <usb_dispatchPacket+0xaa>
        {
                // Analyze transfer result.

                // Launch the transfer.
                max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
    4fca:	d5 01       	movw	r26, r10
    4fcc:	6c 91       	ld	r22, X
    4fce:	67 29       	or	r22, r7
    4fd0:	80 ef       	ldi	r24, 0xF0	; 240
    4fd2:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
                rcode = 0xff;

                // Wait for interrupt
                while (timeout > avr_millis())
    4fd6:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    4fda:	6e 15       	cp	r22, r14
    4fdc:	7f 05       	cpc	r23, r15
    4fde:	80 07       	cpc	r24, r16
    4fe0:	91 07       	cpc	r25, r17
    4fe2:	08 f0       	brcs	.+2      	; 0x4fe6 <usb_dispatchPacket+0x6a>
    4fe4:	41 c0       	rjmp	.+130    	; 0x5068 <usb_dispatchPacket+0xec>
                {
                        tmpdata = max3421e_read(MAX_REG_HIRQ);
    4fe6:	88 ec       	ldi	r24, 0xC8	; 200
    4fe8:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
                        if (tmpdata & bmHXFRDNIRQ)
    4fec:	87 ff       	sbrs	r24, 7
    4fee:	f3 cf       	rjmp	.-26     	; 0x4fd6 <usb_dispatchPacket+0x5a>
                        {
                                // Clear the interrupt.
                                max3421e_write(MAX_REG_HIRQ, bmHXFRDNIRQ);
    4ff0:	88 ec       	ldi	r24, 0xC8	; 200
    4ff2:	60 e8       	ldi	r22, 0x80	; 128
    4ff4:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
    4ff8:	dd 24       	eor	r13, r13
                // Exit if timeout.
                if (rcode != 0x00)
                        return (rcode);

                // Wait for HRSL
                while (timeout > avr_millis())
    4ffa:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    4ffe:	6e 15       	cp	r22, r14
    5000:	7f 05       	cpc	r23, r15
    5002:	80 07       	cpc	r24, r16
    5004:	91 07       	cpc	r25, r17
    5006:	48 f4       	brcc	.+18     	; 0x501a <usb_dispatchPacket+0x9e>
                {
                        rcode = (max3421e_read(MAX_REG_HRSL) & 0x0f);
    5008:	88 ef       	ldi	r24, 0xF8	; 248
    500a:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    500e:	9f e0       	ldi	r25, 0x0F	; 15
    5010:	d9 2e       	mov	r13, r25
    5012:	d8 22       	and	r13, r24
                        if (rcode != hrBUSY)
    5014:	b1 e0       	ldi	r27, 0x01	; 1
    5016:	db 16       	cp	r13, r27
    5018:	81 f3       	breq	.-32     	; 0x4ffa <usb_dispatchPacket+0x7e>
//                      else
//                              avr_serialPrintf("busy!\n");
                }


                switch (rcode)
    501a:	e4 e0       	ldi	r30, 0x04	; 4
    501c:	de 16       	cp	r13, r30
    501e:	e1 f0       	breq	.+56     	; 0x5058 <usb_dispatchPacket+0xdc>
    5020:	fe e0       	ldi	r31, 0x0E	; 14
    5022:	df 16       	cp	r13, r31
    5024:	89 f0       	breq	.+34     	; 0x5048 <usb_dispatchPacket+0xcc>
                        default:
                                return (rcode);
                }
        }

        return (rcode);
    5026:	2d 2d       	mov	r18, r13
    5028:	30 e0       	ldi	r19, 0x00	; 0
}
    502a:	c9 01       	movw	r24, r18
    502c:	df 91       	pop	r29
    502e:	cf 91       	pop	r28
    5030:	1f 91       	pop	r17
    5032:	0f 91       	pop	r16
    5034:	ff 90       	pop	r15
    5036:	ef 90       	pop	r14
    5038:	df 90       	pop	r13
    503a:	cf 90       	pop	r12
    503c:	bf 90       	pop	r11
    503e:	af 90       	pop	r10
    5040:	9f 90       	pop	r9
    5042:	8f 90       	pop	r8
    5044:	7f 90       	pop	r7
    5046:	08 95       	ret
                                nak_count++;
                                if (nak_count == nakLimit)
                                        return (rcode);
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    5048:	c3 94       	inc	r12
                                if (retry_count == USB_RETRY_LIMIT)
    504a:	83 e0       	ldi	r24, 0x03	; 3
    504c:	c8 16       	cp	r12, r24
    504e:	09 f0       	breq	.+2      	; 0x5052 <usb_dispatchPacket+0xd6>
    5050:	b5 cf       	rjmp	.-150    	; 0x4fbc <usb_dispatchPacket+0x40>
    5052:	2e e0       	ldi	r18, 0x0E	; 14
    5054:	30 e0       	ldi	r19, 0x00	; 0
    5056:	e9 cf       	rjmp	.-46     	; 0x502a <usb_dispatchPacket+0xae>


                switch (rcode)
                {
                        case hrNAK:
                                nak_count++;
    5058:	21 96       	adiw	r28, 0x01	; 1
                                if (nak_count == nakLimit)
    505a:	c8 15       	cp	r28, r8
    505c:	d9 05       	cpc	r29, r9
    505e:	09 f0       	breq	.+2      	; 0x5062 <usb_dispatchPacket+0xe6>
    5060:	ad cf       	rjmp	.-166    	; 0x4fbc <usb_dispatchPacket+0x40>
    5062:	24 e0       	ldi	r18, 0x04	; 4
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	e1 cf       	rjmp	.-62     	; 0x502a <usb_dispatchPacket+0xae>
                // Launch the transfer.
                max3421e_write(MAX_REG_HXFR, (token | endpoint->address));
                rcode = 0xff;

                // Wait for interrupt
                while (timeout > avr_millis())
    5068:	2f ef       	ldi	r18, 0xFF	; 255
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	de cf       	rjmp	.-68     	; 0x502a <usb_dispatchPacket+0xae>

0000506e <usb_read>:
 * @param device length number of bytes to read.
 * @param data target buffer.
 * @return number of bytes read, or error code in case of failure.
 */
int usb_read(usb_device * device, usb_endpoint * endpoint, uint16_t length, uint8_t * data, unsigned int nakLimit)
{
    506e:	6f 92       	push	r6
    5070:	7f 92       	push	r7
    5072:	8f 92       	push	r8
    5074:	9f 92       	push	r9
    5076:	af 92       	push	r10
    5078:	bf 92       	push	r11
    507a:	cf 92       	push	r12
    507c:	df 92       	push	r13
    507e:	ef 92       	push	r14
    5080:	ff 92       	push	r15
    5082:	0f 93       	push	r16
    5084:	1f 93       	push	r17
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	fc 01       	movw	r30, r24
    508c:	7b 01       	movw	r14, r22
    508e:	3a 01       	movw	r6, r20
    5090:	69 01       	movw	r12, r18
    5092:	58 01       	movw	r10, r16
        uint16_t rcode, bytesRead;
        uint16_t maxPacketSize = endpoint->maxPacketSize;
    5094:	db 01       	movw	r26, r22
    5096:	12 96       	adiw	r26, 0x02	; 2
    5098:	8d 90       	ld	r8, X+
    509a:	9c 90       	ld	r9, X
    509c:	13 97       	sbiw	r26, 0x03	; 3

        unsigned int totalTransferred = 0;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    509e:	80 ee       	ldi	r24, 0xE0	; 224
    50a0:	60 81       	ld	r22, Z
    50a2:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        // Set toggle value.
        max3421e_write(MAX_REG_HCTL, endpoint->receiveToggle);
    50a6:	88 ee       	ldi	r24, 0xE8	; 232
    50a8:	f7 01       	movw	r30, r14
    50aa:	65 81       	ldd	r22, Z+5	; 0x05
    50ac:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
    50b0:	c0 e0       	ldi	r28, 0x00	; 0
    50b2:	d0 e0       	ldi	r29, 0x00	; 0

        while (1)
        {

                // Start IN transfer
                rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	b7 01       	movw	r22, r14
    50b8:	a5 01       	movw	r20, r10
    50ba:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <usb_dispatchPacket>

                if (rcode)
    50be:	89 2b       	or	r24, r25
    50c0:	d1 f5       	brne	.+116    	; 0x5136 <usb_read+0xc8>

                        return -1;
                }

                // Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
                if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    50c2:	88 ec       	ldi	r24, 0xC8	; 200
    50c4:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    50c8:	82 ff       	sbrs	r24, 2
    50ca:	38 c0       	rjmp	.+112    	; 0x513c <usb_read+0xce>
                        // TODO: the absence of RCVDAVIRQ indicates a toggle error. Need to add handling for that.
                        return -2;
                }

                // Obtain the number of bytes in FIFO.
                bytesRead = max3421e_read(MAX_REG_RCVBC);
    50cc:	80 e3       	ldi	r24, 0x30	; 48
    50ce:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    50d2:	68 2f       	mov	r22, r24
    50d4:	08 2f       	mov	r16, r24
    50d6:	10 e0       	ldi	r17, 0x00	; 0

                // Read the data from the FIFO.
                data = max3421e_readMultiple(MAX_REG_RCVFIFO, bytesRead, data);
    50d8:	88 e0       	ldi	r24, 0x08	; 8
    50da:	a6 01       	movw	r20, r12
    50dc:	0e 94 cd 24 	call	0x499a	; 0x499a <max3421e_readMultiple>
    50e0:	6c 01       	movw	r12, r24

                // Clear the interrupt to free the buffer.
                max3421e_write(MAX_REG_HIRQ, bmRCVDAVIRQ);
    50e2:	88 ec       	ldi	r24, 0xC8	; 200
    50e4:	64 e0       	ldi	r22, 0x04	; 4
    50e6:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

                totalTransferred += bytesRead;
    50ea:	c0 0f       	add	r28, r16
    50ec:	d1 1f       	adc	r29, r17

                // Check if we're done reading. Either we've received a 'short' packet (<maxPacketSize), or the
                // desired number of bytes has been transferred.
                if ((bytesRead < maxPacketSize) || (totalTransferred >= length))
    50ee:	08 15       	cp	r16, r8
    50f0:	19 05       	cpc	r17, r9
    50f2:	18 f0       	brcs	.+6      	; 0x50fa <usb_read+0x8c>
    50f4:	c6 15       	cp	r28, r6
    50f6:	d7 05       	cpc	r29, r7
    50f8:	e8 f2       	brcs	.-70     	; 0x50b4 <usb_read+0x46>
                {
                        // Remember the toggle value for the next transfer.
                        if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
    50fa:	88 ef       	ldi	r24, 0xF8	; 248
    50fc:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    5100:	84 ff       	sbrs	r24, 4
    5102:	15 c0       	rjmp	.+42     	; 0x512e <usb_read+0xc0>
                                endpoint->receiveToggle = bmRCVTOG1;
    5104:	80 e2       	ldi	r24, 0x20	; 32
    5106:	d7 01       	movw	r26, r14
    5108:	15 96       	adiw	r26, 0x05	; 5
    510a:	8c 93       	st	X, r24
                        break;
                }
        }

        // Report success.
        return totalTransferred;
    510c:	9e 01       	movw	r18, r28
}
    510e:	c9 01       	movw	r24, r18
    5110:	df 91       	pop	r29
    5112:	cf 91       	pop	r28
    5114:	1f 91       	pop	r17
    5116:	0f 91       	pop	r16
    5118:	ff 90       	pop	r15
    511a:	ef 90       	pop	r14
    511c:	df 90       	pop	r13
    511e:	cf 90       	pop	r12
    5120:	bf 90       	pop	r11
    5122:	af 90       	pop	r10
    5124:	9f 90       	pop	r9
    5126:	8f 90       	pop	r8
    5128:	7f 90       	pop	r7
    512a:	6f 90       	pop	r6
    512c:	08 95       	ret
                {
                        // Remember the toggle value for the next transfer.
                        if (max3421e_read(MAX_REG_HRSL) & bmRCVTOGRD)
                                endpoint->receiveToggle = bmRCVTOG1;
                        else
                                endpoint->receiveToggle = bmRCVTOG0;
    512e:	80 e1       	ldi	r24, 0x10	; 16
    5130:	f7 01       	movw	r30, r14
    5132:	85 83       	std	Z+5, r24	; 0x05
    5134:	eb cf       	rjmp	.-42     	; 0x510c <usb_read+0x9e>
        {

                // Start IN transfer
                rcode = usb_dispatchPacket(tokIN, endpoint, nakLimit);

                if (rcode)
    5136:	2f ef       	ldi	r18, 0xFF	; 255
    5138:	3f ef       	ldi	r19, 0xFF	; 255
    513a:	e9 cf       	rjmp	.-46     	; 0x510e <usb_read+0xa0>

                        return -1;
                }

                // Assert that the RCVDAVIRQ bit in register MAX_REG_HIRQ is set.
                if ((max3421e_read(MAX_REG_HIRQ) & bmRCVDAVIRQ) == 0)
    513c:	2e ef       	ldi	r18, 0xFE	; 254
    513e:	3f ef       	ldi	r19, 0xFF	; 255
    5140:	e6 cf       	rjmp	.-52     	; 0x510e <usb_read+0xa0>

00005142 <usb_ctrlData>:
 * @param direction true for input, false for output.
 * @param length number of bytes to transfer.
 * @param data data buffer.
 */
uint8_t usb_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
    5142:	0f 93       	push	r16
    5144:	1f 93       	push	r17
    5146:	fc 01       	movw	r30, r24
        if (direction)
    5148:	66 23       	and	r22, r22
    514a:	51 f4       	brne	.+20     	; 0x5160 <usb_ctrlData+0x1e>
                return usb_read(device, &(device->control), length, data, USB_NAK_LIMIT);

        } else
        {
                // OUT transfer
                device->control.sendToggle = bmSNDTOG1;
    514c:	80 e8       	ldi	r24, 0x80	; 128
    514e:	86 83       	std	Z+6, r24	; 0x06
                return usb_write(device, &(device->control), length, data);
    5150:	cf 01       	movw	r24, r30
    5152:	32 96       	adiw	r30, 0x02	; 2
    5154:	bf 01       	movw	r22, r30
    5156:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <usb_write>
        }
}
    515a:	1f 91       	pop	r17
    515c:	0f 91       	pop	r16
    515e:	08 95       	ret
uint8_t usb_ctrlData(usb_device * device, boolean direction, uint16_t length, uint8_t * data)
{
        if (direction)
        {
                // IN transfer
                device->control.receiveToggle = bmRCVTOG1;
    5160:	80 e2       	ldi	r24, 0x20	; 32
    5162:	87 83       	std	Z+7, r24	; 0x07
                return usb_read(device, &(device->control), length, data, USB_NAK_LIMIT);
    5164:	cf 01       	movw	r24, r30
    5166:	32 96       	adiw	r30, 0x02	; 2
    5168:	bf 01       	movw	r22, r30
    516a:	00 e0       	ldi	r16, 0x00	; 0
    516c:	1d e7       	ldi	r17, 0x7D	; 125
    516e:	0e 94 37 28 	call	0x506e	; 0x506e <usb_read>
        {
                // OUT transfer
                device->control.sendToggle = bmSNDTOG1;
                return usb_write(device, &(device->control), length, data);
        }
}
    5172:	1f 91       	pop	r17
    5174:	0f 91       	pop	r16
    5176:	08 95       	ret

00005178 <usb_controlRequest>:
                uint8_t valueLow,
                uint8_t valueHigh,
                uint16_t index,
                uint16_t length,
                uint8_t * data)
{
    5178:	5f 92       	push	r5
    517a:	6f 92       	push	r6
    517c:	7f 92       	push	r7
    517e:	8f 92       	push	r8
    5180:	9f 92       	push	r9
    5182:	af 92       	push	r10
    5184:	bf 92       	push	r11
    5186:	cf 92       	push	r12
    5188:	df 92       	push	r13
    518a:	ef 92       	push	r14
    518c:	ff 92       	push	r15
    518e:	0f 93       	push	r16
    5190:	1f 93       	push	r17
    5192:	df 93       	push	r29
    5194:	cf 93       	push	r28
    5196:	cd b7       	in	r28, 0x3d	; 61
    5198:	de b7       	in	r29, 0x3e	; 62
    519a:	28 97       	sbiw	r28, 0x08	; 8
    519c:	0f b6       	in	r0, 0x3f	; 63
    519e:	f8 94       	cli
    51a0:	de bf       	out	0x3e, r29	; 62
    51a2:	0f be       	out	0x3f, r0	; 63
    51a4:	cd bf       	out	0x3d, r28	; 61
    51a6:	3c 01       	movw	r6, r24
    51a8:	56 2e       	mov	r5, r22
    51aa:	14 2f       	mov	r17, r20
    51ac:	82 2e       	mov	r8, r18
        boolean direction = false; //request direction, IN or OUT
        uint8_t rcode;
        usb_setupPacket setup_pkt;

        // Set device address.
        max3421e_write(MAX_REG_PERADDR, device->address);
    51ae:	80 ee       	ldi	r24, 0xE0	; 224
    51b0:	f3 01       	movw	r30, r6
    51b2:	60 81       	ld	r22, Z
    51b4:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>

        if (requestType & 0x80)
                direction = true; //determine request direction

        // Build setup packet.
        setup_pkt.bmRequestType = requestType;
    51b8:	59 82       	std	Y+1, r5	; 0x01
        setup_pkt.bRequest = request;
    51ba:	1a 83       	std	Y+2, r17	; 0x02
        setup_pkt.wValue = valueLow | (valueHigh << 8);
    51bc:	90 2f       	mov	r25, r16
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	99 24       	eor	r9, r9
    51c2:	88 29       	or	r24, r8
    51c4:	99 29       	or	r25, r9
    51c6:	9c 83       	std	Y+4, r25	; 0x04
    51c8:	8b 83       	std	Y+3, r24	; 0x03
        setup_pkt.wIndex = index;
    51ca:	fe 82       	std	Y+6, r15	; 0x06
    51cc:	ed 82       	std	Y+5, r14	; 0x05
        setup_pkt.wLength = length;
    51ce:	d8 86       	std	Y+8, r13	; 0x08
    51d0:	cf 82       	std	Y+7, r12	; 0x07

        // Write setup packet to the FIFO and dispatch
        max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
    51d2:	80 e2       	ldi	r24, 0x20	; 32
    51d4:	68 e0       	ldi	r22, 0x08	; 8
    51d6:	ae 01       	movw	r20, r28
    51d8:	4f 5f       	subi	r20, 0xFF	; 255
    51da:	5f 4f       	sbci	r21, 0xFF	; 255
    51dc:	0e 94 a5 24 	call	0x494a	; 0x494a <max3421e_writeMultiple>
        rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);
    51e0:	83 01       	movw	r16, r6
    51e2:	0e 5f       	subi	r16, 0xFE	; 254
    51e4:	1f 4f       	sbci	r17, 0xFF	; 255
    51e6:	80 e1       	ldi	r24, 0x10	; 16
    51e8:	b8 01       	movw	r22, r16
    51ea:	40 e0       	ldi	r20, 0x00	; 0
    51ec:	5d e7       	ldi	r21, 0x7D	; 125
    51ee:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <usb_dispatchPacket>

        // Print error in case of failure.
        if (rcode)
    51f2:	88 23       	and	r24, r24
    51f4:	c9 f0       	breq	.+50     	; 0x5228 <usb_controlRequest+0xb0>
    51f6:	2f ef       	ldi	r18, 0xFF	; 255
    51f8:	3f ef       	ldi	r19, 0xFF	; 255

        if (rcode)
                return -3;
        else
                return 0;
}
    51fa:	c9 01       	movw	r24, r18
    51fc:	28 96       	adiw	r28, 0x08	; 8
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	f8 94       	cli
    5202:	de bf       	out	0x3e, r29	; 62
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	cd bf       	out	0x3d, r28	; 61
    5208:	cf 91       	pop	r28
    520a:	df 91       	pop	r29
    520c:	1f 91       	pop	r17
    520e:	0f 91       	pop	r16
    5210:	ff 90       	pop	r15
    5212:	ef 90       	pop	r14
    5214:	df 90       	pop	r13
    5216:	cf 90       	pop	r12
    5218:	bf 90       	pop	r11
    521a:	af 90       	pop	r10
    521c:	9f 90       	pop	r9
    521e:	8f 90       	pop	r8
    5220:	7f 90       	pop	r7
    5222:	6f 90       	pop	r6
    5224:	5f 90       	pop	r5
    5226:	08 95       	ret
        // Write setup packet to the FIFO and dispatch
        max3421e_writeMultiple(MAX_REG_SUDFIFO, 8, (uint8_t *) &setup_pkt);
        rcode = usb_dispatchPacket(tokSETUP, &(device->control), USB_NAK_LIMIT);

        // Print error in case of failure.
        if (rcode)
    5228:	f5 2c       	mov	r15, r5
    522a:	ff 1c       	adc	r15, r15
    522c:	ff 24       	eor	r15, r15
    522e:	ff 1c       	adc	r15, r15
//              avr_serialPrintf("Setup packet error: 0x%02x\n", rcode);
                return -1;
        }

        // Data stage, if present
        if (data != NULL)
    5230:	a1 14       	cp	r10, r1
    5232:	b1 04       	cpc	r11, r1
    5234:	31 f0       	breq	.+12     	; 0x5242 <usb_controlRequest+0xca>
        {
                rcode = usb_ctrlData(device, direction, length, data);
    5236:	c3 01       	movw	r24, r6
    5238:	6f 2d       	mov	r22, r15
    523a:	a6 01       	movw	r20, r12
    523c:	95 01       	movw	r18, r10
    523e:	0e 94 a1 28 	call	0x5142	; 0x5142 <usb_ctrlData>
                        return -2;
                }
        }

        // Status stage.
        if (direction)
    5242:	ff 20       	and	r15, r15
    5244:	59 f0       	breq	.+22     	; 0x525c <usb_controlRequest+0xe4>
                rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
    5246:	80 ea       	ldi	r24, 0xA0	; 160
    5248:	b8 01       	movw	r22, r16
    524a:	40 e0       	ldi	r20, 0x00	; 0
    524c:	5d e7       	ldi	r21, 0x7D	; 125
    524e:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <usb_dispatchPacket>
        else
                rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);

        if (rcode)
    5252:	88 23       	and	r24, r24
    5254:	51 f4       	brne	.+20     	; 0x526a <usb_controlRequest+0xf2>
    5256:	20 e0       	ldi	r18, 0x00	; 0
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	cf cf       	rjmp	.-98     	; 0x51fa <usb_controlRequest+0x82>

        // Status stage.
        if (direction)
                rcode = usb_dispatchPacket(tokOUTHS, &(device->control), USB_NAK_LIMIT);
        else
                rcode = usb_dispatchPacket(tokINHS, &(device->control), USB_NAK_LIMIT);
    525c:	80 e8       	ldi	r24, 0x80	; 128
    525e:	b8 01       	movw	r22, r16
    5260:	40 e0       	ldi	r20, 0x00	; 0
    5262:	5d e7       	ldi	r21, 0x7D	; 125
    5264:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <usb_dispatchPacket>
    5268:	f4 cf       	rjmp	.-24     	; 0x5252 <usb_controlRequest+0xda>

        if (rcode)
    526a:	2d ef       	ldi	r18, 0xFD	; 253
    526c:	3f ef       	ldi	r19, 0xFF	; 255
    526e:	c5 cf       	rjmp	.-118    	; 0x51fa <usb_controlRequest+0x82>

00005270 <usb_setConfiguration>:
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
}

//set configuration
int usb_setConfiguration(usb_device * device, uint8_t configuration)
{
    5270:	af 92       	push	r10
    5272:	bf 92       	push	r11
    5274:	cf 92       	push	r12
    5276:	df 92       	push	r13
    5278:	ef 92       	push	r14
    527a:	ff 92       	push	r15
    527c:	0f 93       	push	r16
    527e:	26 2f       	mov	r18, r22
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, configuration, 0x00, 0x0000, 0x0000, NULL));
    5280:	60 e0       	ldi	r22, 0x00	; 0
    5282:	49 e0       	ldi	r20, 0x09	; 9
    5284:	00 e0       	ldi	r16, 0x00	; 0
    5286:	ee 24       	eor	r14, r14
    5288:	ff 24       	eor	r15, r15
    528a:	cc 24       	eor	r12, r12
    528c:	dd 24       	eor	r13, r13
    528e:	aa 24       	eor	r10, r10
    5290:	bb 24       	eor	r11, r11
    5292:	0e 94 bc 28 	call	0x5178	; 0x5178 <usb_controlRequest>
}
    5296:	0f 91       	pop	r16
    5298:	ff 90       	pop	r15
    529a:	ef 90       	pop	r14
    529c:	df 90       	pop	r13
    529e:	cf 90       	pop	r12
    52a0:	bf 90       	pop	r11
    52a2:	af 90       	pop	r10
    52a4:	08 95       	ret

000052a6 <usb_setAddress>:
 * @param device the 'zero' usb device (address 0, endpoint 0)
 * @param address the address to set for the newly connected device
 * @return 0 in case of success, error code otherwise
 */
int usb_setAddress(usb_device * device, uint8_t address)
{
    52a6:	af 92       	push	r10
    52a8:	bf 92       	push	r11
    52aa:	cf 92       	push	r12
    52ac:	df 92       	push	r13
    52ae:	ef 92       	push	r14
    52b0:	ff 92       	push	r15
    52b2:	0f 93       	push	r16
    52b4:	26 2f       	mov	r18, r22
    return(usb_controlRequest(device, bmREQ_SET, USB_REQUEST_SET_ADDRESS, address, 0x00, 0x0000, 0x0000, NULL));
    52b6:	60 e0       	ldi	r22, 0x00	; 0
    52b8:	45 e0       	ldi	r20, 0x05	; 5
    52ba:	00 e0       	ldi	r16, 0x00	; 0
    52bc:	ee 24       	eor	r14, r14
    52be:	ff 24       	eor	r15, r15
    52c0:	cc 24       	eor	r12, r12
    52c2:	dd 24       	eor	r13, r13
    52c4:	aa 24       	eor	r10, r10
    52c6:	bb 24       	eor	r11, r11
    52c8:	0e 94 bc 28 	call	0x5178	; 0x5178 <usb_controlRequest>
}
    52cc:	0f 91       	pop	r16
    52ce:	ff 90       	pop	r15
    52d0:	ef 90       	pop	r14
    52d2:	df 90       	pop	r13
    52d4:	cf 90       	pop	r12
    52d6:	bf 90       	pop	r11
    52d8:	af 90       	pop	r10
    52da:	08 95       	ret

000052dc <usb_getConfigurationDescriptor>:
 * @param conf configuration number
 * @param length length of the data buffer. This method will not write beyond this boundary.
 * @return number of bytes read, or negative number in case of error.
 */
int usb_getConfigurationDescriptor(usb_device * device, uint8_t conf, uint16_t length, uint8_t * data)
{
    52dc:	4f 92       	push	r4
    52de:	5f 92       	push	r5
    52e0:	6f 92       	push	r6
    52e2:	7f 92       	push	r7
    52e4:	8f 92       	push	r8
    52e6:	9f 92       	push	r9
    52e8:	af 92       	push	r10
    52ea:	bf 92       	push	r11
    52ec:	cf 92       	push	r12
    52ee:	df 92       	push	r13
    52f0:	ef 92       	push	r14
    52f2:	ff 92       	push	r15
    52f4:	0f 93       	push	r16
    52f6:	1f 93       	push	r17
    52f8:	cf 93       	push	r28
    52fa:	df 93       	push	r29
    52fc:	4c 01       	movw	r8, r24
    52fe:	16 2f       	mov	r17, r22
    5300:	3a 01       	movw	r6, r20
    5302:	e9 01       	movw	r28, r18
        uint16_t descriptorLength;
        int rcode;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
    5304:	60 e8       	ldi	r22, 0x80	; 128
    5306:	46 e0       	ldi	r20, 0x06	; 6
    5308:	21 2f       	mov	r18, r17
    530a:	02 e0       	ldi	r16, 0x02	; 2
    530c:	ee 24       	eor	r14, r14
    530e:	ff 24       	eor	r15, r15
    5310:	34 e0       	ldi	r19, 0x04	; 4
    5312:	c3 2e       	mov	r12, r19
    5314:	d1 2c       	mov	r13, r1
    5316:	5e 01       	movw	r10, r28
    5318:	0e 94 bc 28 	call	0x5178	; 0x5178 <usb_controlRequest>
        if (rcode) return -1;
    531c:	89 2b       	or	r24, r25
    531e:	a1 f0       	breq	.+40     	; 0x5348 <usb_getConfigurationDescriptor+0x6c>
    5320:	2f ef       	ldi	r18, 0xFF	; 255
    5322:	3f ef       	ldi	r19, 0xFF	; 255
        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
        if (rcode) return -2;

        return length;
}
    5324:	c9 01       	movw	r24, r18
    5326:	df 91       	pop	r29
    5328:	cf 91       	pop	r28
    532a:	1f 91       	pop	r17
    532c:	0f 91       	pop	r16
    532e:	ff 90       	pop	r15
    5330:	ef 90       	pop	r14
    5332:	df 90       	pop	r13
    5334:	cf 90       	pop	r12
    5336:	bf 90       	pop	r11
    5338:	af 90       	pop	r10
    533a:	9f 90       	pop	r9
    533c:	8f 90       	pop	r8
    533e:	7f 90       	pop	r7
    5340:	6f 90       	pop	r6
    5342:	5f 90       	pop	r5
    5344:	4f 90       	pop	r4
    5346:	08 95       	ret
        uint16_t descriptorLength;
        int rcode;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, 4, data));
        if (rcode) return -1;
    5348:	9b 81       	ldd	r25, Y+3	; 0x03
    534a:	80 e0       	ldi	r24, 0x00	; 0
    534c:	2a 81       	ldd	r18, Y+2	; 0x02
    534e:	42 2e       	mov	r4, r18
    5350:	55 24       	eor	r5, r5
    5352:	48 2a       	or	r4, r24
    5354:	59 2a       	or	r5, r25
    5356:	64 14       	cp	r6, r4
    5358:	75 04       	cpc	r7, r5
    535a:	08 f4       	brcc	.+2      	; 0x535e <usb_getConfigurationDescriptor+0x82>
    535c:	23 01       	movw	r4, r6

        descriptorLength = (data[3] << 8) | data[2];
        if (descriptorLength<length) length = descriptorLength;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
    535e:	c4 01       	movw	r24, r8
    5360:	60 e8       	ldi	r22, 0x80	; 128
    5362:	46 e0       	ldi	r20, 0x06	; 6
    5364:	21 2f       	mov	r18, r17
    5366:	02 e0       	ldi	r16, 0x02	; 2
    5368:	ee 24       	eor	r14, r14
    536a:	ff 24       	eor	r15, r15
    536c:	62 01       	movw	r12, r4
    536e:	5e 01       	movw	r10, r28
    5370:	0e 94 bc 28 	call	0x5178	; 0x5178 <usb_controlRequest>
        if (rcode) return -2;
    5374:	89 2b       	or	r24, r25
    5376:	11 f4       	brne	.+4      	; 0x537c <usb_getConfigurationDescriptor+0xa0>

        return length;
    5378:	92 01       	movw	r18, r4
    537a:	d4 cf       	rjmp	.-88     	; 0x5324 <usb_getConfigurationDescriptor+0x48>
        descriptorLength = (data[3] << 8) | data[2];
        if (descriptorLength<length) length = descriptorLength;

        // Read the length of the configuration descriptor.
        rcode = (usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, length, data));
        if (rcode) return -2;
    537c:	2e ef       	ldi	r18, 0xFE	; 254
    537e:	3f ef       	ldi	r19, 0xFF	; 255
    5380:	d1 cf       	rjmp	.-94     	; 0x5324 <usb_getConfigurationDescriptor+0x48>

00005382 <usb_getDeviceDescriptor>:
 * @param device USB device
 * @param descriptor pointer to a usb_deviceDescriptor record that will be filled with the requested data.
 * @return 0 in case of success, error code otherwise
 */
int usb_getDeviceDescriptor(usb_device * device, usb_deviceDescriptor * descriptor)
{
    5382:	af 92       	push	r10
    5384:	bf 92       	push	r11
    5386:	cf 92       	push	r12
    5388:	df 92       	push	r13
    538a:	ef 92       	push	r14
    538c:	ff 92       	push	r15
    538e:	0f 93       	push	r16
    5390:	5b 01       	movw	r10, r22
        return(usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, sizeof(usb_deviceDescriptor), (uint8_t *)descriptor));
    5392:	60 e8       	ldi	r22, 0x80	; 128
    5394:	46 e0       	ldi	r20, 0x06	; 6
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	01 e0       	ldi	r16, 0x01	; 1
    539a:	ee 24       	eor	r14, r14
    539c:	ff 24       	eor	r15, r15
    539e:	52 e1       	ldi	r21, 0x12	; 18
    53a0:	c5 2e       	mov	r12, r21
    53a2:	d1 2c       	mov	r13, r1
    53a4:	0e 94 bc 28 	call	0x5178	; 0x5178 <usb_controlRequest>
}
    53a8:	0f 91       	pop	r16
    53aa:	ff 90       	pop	r15
    53ac:	ef 90       	pop	r14
    53ae:	df 90       	pop	r13
    53b0:	cf 90       	pop	r12
    53b2:	bf 90       	pop	r11
    53b4:	af 90       	pop	r10
    53b6:	08 95       	ret

000053b8 <usb_getString>:
 * @param length buffer length.
 * @param str target buffer.
 * @return 0 on success, error code otherwise.
 */
int usb_getString(usb_device * device, uint8_t index, uint8_t languageId, uint16_t length, char * str)
{
    53b8:	2f 92       	push	r2
    53ba:	3f 92       	push	r3
    53bc:	4f 92       	push	r4
    53be:	5f 92       	push	r5
    53c0:	6f 92       	push	r6
    53c2:	7f 92       	push	r7
    53c4:	8f 92       	push	r8
    53c6:	9f 92       	push	r9
    53c8:	af 92       	push	r10
    53ca:	bf 92       	push	r11
    53cc:	cf 92       	push	r12
    53ce:	df 92       	push	r13
    53d0:	ef 92       	push	r14
    53d2:	ff 92       	push	r15
    53d4:	0f 93       	push	r16
    53d6:	1f 93       	push	r17
    53d8:	df 93       	push	r29
    53da:	cf 93       	push	r28
    53dc:	0f 92       	push	r0
    53de:	cd b7       	in	r28, 0x3d	; 61
    53e0:	de b7       	in	r29, 0x3e	; 62
    53e2:	3c 01       	movw	r6, r24
    53e4:	36 2e       	mov	r3, r22
    53e6:	24 2e       	mov	r2, r20
    53e8:	49 01       	movw	r8, r18
    53ea:	28 01       	movw	r4, r16
        uint8_t stringLength = 0;
    53ec:	19 82       	std	Y+1, r1	; 0x01
        int i, ret = 0;

    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    53ee:	60 e8       	ldi	r22, 0x80	; 128
    53f0:	46 e0       	ldi	r20, 0x06	; 6
    53f2:	23 2d       	mov	r18, r3
    53f4:	03 e0       	ldi	r16, 0x03	; 3
    53f6:	e2 2c       	mov	r14, r2
    53f8:	ff 24       	eor	r15, r15
    53fa:	71 e0       	ldi	r23, 0x01	; 1
    53fc:	c7 2e       	mov	r12, r23
    53fe:	d1 2c       	mov	r13, r1
    5400:	5e 01       	movw	r10, r28
    5402:	08 94       	sec
    5404:	a1 1c       	adc	r10, r1
    5406:	b1 1c       	adc	r11, r1
    5408:	0e 94 bc 28 	call	0x5178	; 0x5178 <usb_controlRequest>
    if (ret<0) return -1;
    540c:	97 ff       	sbrs	r25, 7
    540e:	17 c0       	rjmp	.+46     	; 0x543e <usb_getString+0x86>
    5410:	2f ef       	ldi	r18, 0xFF	; 255
    5412:	3f ef       	ldi	r19, 0xFF	; 255
        stringLength = (stringLength - 2) / 2;
        for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
        str[stringLength] = 0;

        return 0;
}
    5414:	c9 01       	movw	r24, r18
    5416:	0f 90       	pop	r0
    5418:	cf 91       	pop	r28
    541a:	df 91       	pop	r29
    541c:	1f 91       	pop	r17
    541e:	0f 91       	pop	r16
    5420:	ff 90       	pop	r15
    5422:	ef 90       	pop	r14
    5424:	df 90       	pop	r13
    5426:	cf 90       	pop	r12
    5428:	bf 90       	pop	r11
    542a:	af 90       	pop	r10
    542c:	9f 90       	pop	r9
    542e:	8f 90       	pop	r8
    5430:	7f 90       	pop	r7
    5432:	6f 90       	pop	r6
    5434:	5f 90       	pop	r5
    5436:	4f 90       	pop	r4
    5438:	3f 90       	pop	r3
    543a:	2f 90       	pop	r2
    543c:	08 95       	ret
    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    543e:	c9 80       	ldd	r12, Y+1	; 0x01
    5440:	8c 2d       	mov	r24, r12
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	88 16       	cp	r8, r24
    5446:	99 06       	cpc	r9, r25
    5448:	80 f1       	brcs	.+96     	; 0x54aa <usb_getString+0xf2>

        // Get the whole thing.
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    544a:	c3 01       	movw	r24, r6
    544c:	60 e8       	ldi	r22, 0x80	; 128
    544e:	46 e0       	ldi	r20, 0x06	; 6
    5450:	23 2d       	mov	r18, r3
    5452:	03 e0       	ldi	r16, 0x03	; 3
    5454:	e2 2c       	mov	r14, r2
    5456:	ff 24       	eor	r15, r15
    5458:	dd 24       	eor	r13, r13
    545a:	52 01       	movw	r10, r4
    545c:	0e 94 bc 28 	call	0x5178	; 0x5178 <usb_controlRequest>
    if (ret<0) return -2;
    5460:	97 fd       	sbrc	r25, 7
    5462:	26 c0       	rjmp	.+76     	; 0x54b0 <usb_getString+0xf8>

        // Convert to 8-bit ASCII
        stringLength = (stringLength - 2) / 2;
    5464:	89 81       	ldd	r24, Y+1	; 0x01
    5466:	28 2f       	mov	r18, r24
    5468:	30 e0       	ldi	r19, 0x00	; 0
    546a:	c9 01       	movw	r24, r18
    546c:	02 97       	sbiw	r24, 0x02	; 2
    546e:	97 fd       	sbrc	r25, 7
    5470:	22 c0       	rjmp	.+68     	; 0x54b6 <usb_getString+0xfe>
    5472:	95 95       	asr	r25
    5474:	87 95       	ror	r24
    5476:	89 83       	std	Y+1, r24	; 0x01
        for (i=0; i<stringLength; i++) str[i] = str[2+i*2];
    5478:	88 23       	and	r24, r24
    547a:	01 f1       	breq	.+64     	; 0x54bc <usb_getString+0x104>
    547c:	b2 01       	movw	r22, r4
    547e:	f2 01       	movw	r30, r4
    5480:	20 e0       	ldi	r18, 0x00	; 0
    5482:	30 e0       	ldi	r19, 0x00	; 0
    5484:	48 2f       	mov	r20, r24
    5486:	50 e0       	ldi	r21, 0x00	; 0
    5488:	2f 5f       	subi	r18, 0xFF	; 255
    548a:	3f 4f       	sbci	r19, 0xFF	; 255
    548c:	82 81       	ldd	r24, Z+2	; 0x02
    548e:	db 01       	movw	r26, r22
    5490:	8d 93       	st	X+, r24
    5492:	bd 01       	movw	r22, r26
    5494:	32 96       	adiw	r30, 0x02	; 2
    5496:	da 01       	movw	r26, r20
    5498:	24 17       	cp	r18, r20
    549a:	35 07       	cpc	r19, r21
    549c:	ac f3       	brlt	.-22     	; 0x5488 <usb_getString+0xd0>
        str[stringLength] = 0;
    549e:	a4 0d       	add	r26, r4
    54a0:	b5 1d       	adc	r27, r5
    54a2:	1c 92       	st	X, r1
    54a4:	20 e0       	ldi	r18, 0x00	; 0
    54a6:	30 e0       	ldi	r19, 0x00	; 0
    54a8:	b5 cf       	rjmp	.-150    	; 0x5414 <usb_getString+0x5c>
    // Get string length;
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, sizeof(uint8_t), &stringLength);
    if (ret<0) return -1;

    // Trim string size to fit the target buffer.
    if (stringLength>length) stringLength = length;
    54aa:	c8 2c       	mov	r12, r8
    54ac:	89 82       	std	Y+1, r8	; 0x01
    54ae:	cd cf       	rjmp	.-102    	; 0x544a <usb_getString+0x92>

        // Get the whole thing.
        ret = usb_controlRequest(device, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, languageId, stringLength, (uint8_t *)str);
    if (ret<0) return -2;
    54b0:	2e ef       	ldi	r18, 0xFE	; 254
    54b2:	3f ef       	ldi	r19, 0xFF	; 255
    54b4:	af cf       	rjmp	.-162    	; 0x5414 <usb_getString+0x5c>

        // Convert to 8-bit ASCII
        stringLength = (stringLength - 2) / 2;
    54b6:	c9 01       	movw	r24, r18
    54b8:	01 97       	sbiw	r24, 0x01	; 1
    54ba:	db cf       	rjmp	.-74     	; 0x5472 <usb_getString+0xba>
    54bc:	a8 2f       	mov	r26, r24
    54be:	b0 e0       	ldi	r27, 0x00	; 0
    54c0:	ee cf       	rjmp	.-36     	; 0x549e <usb_getString+0xe6>

000054c2 <usb_bulkRead>:
 * @param data target buffer.
 *
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
    54c2:	0f 93       	push	r16
    54c4:	1f 93       	push	r17
    54c6:	cf 93       	push	r28
    54c8:	df 93       	push	r29
    54ca:	fc 01       	movw	r30, r24
    54cc:	db 01       	movw	r26, r22
    54ce:	ea 01       	movw	r28, r20
        return usb_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    54d0:	22 23       	and	r18, r18
    54d2:	71 f4       	brne	.+28     	; 0x54f0 <usb_bulkRead+0x2e>
    54d4:	00 e0       	ldi	r16, 0x00	; 0
    54d6:	1d e7       	ldi	r17, 0x7D	; 125
    54d8:	cf 01       	movw	r24, r30
    54da:	38 96       	adiw	r30, 0x08	; 8
    54dc:	bf 01       	movw	r22, r30
    54de:	ad 01       	movw	r20, r26
    54e0:	9e 01       	movw	r18, r28
    54e2:	0e 94 37 28 	call	0x506e	; 0x506e <usb_read>
}
    54e6:	df 91       	pop	r29
    54e8:	cf 91       	pop	r28
    54ea:	1f 91       	pop	r17
    54ec:	0f 91       	pop	r16
    54ee:	08 95       	ret
 *
 * @return number of bytes read, or error code in case of failure.
 */
int usb_bulkRead(usb_device * device, uint16_t length, uint8_t * data, boolean poll)
{
        return usb_read(device, &(device->bulk_in), length, data, poll ? 1 : USB_NAK_LIMIT);
    54f0:	01 e0       	ldi	r16, 0x01	; 1
    54f2:	10 e0       	ldi	r17, 0x00	; 0
    54f4:	f1 cf       	rjmp	.-30     	; 0x54d8 <usb_bulkRead+0x16>

000054f6 <usb_init>:
/**
 * Initialises the USB layer.
 */
void usb_init()
{
        max3421e_init();
    54f6:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <max3421e_init>
        max3421e_powerOn();
    54fa:	0e 94 66 25 	call	0x4acc	; 0x4acc <max3421e_powerOn>

        uint8_t i;

        // Initialise the USB state machine.
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    54fe:	81 e1       	ldi	r24, 0x11	; 17
    5500:	80 93 00 02 	sts	0x0200, r24

        // Initialise the device table.
        for (i = 0; i < (USB_NUMDEVICES + 1); i++)
                deviceTable[i].active = false;
    5504:	10 92 be 06 	sts	0x06BE, r1
    5508:	10 92 d4 06 	sts	0x06D4, r1
    550c:	10 92 ea 06 	sts	0x06EA, r1

        // Address 0 is used to configure devices and assign them an address when they are first plugged in
        deviceTable[0].address = 0;
    5510:	10 92 bd 06 	sts	0x06BD, r1
        usb_initEndPoint(&(deviceTable[0].control), 0);
    5514:	8f eb       	ldi	r24, 0xBF	; 191
    5516:	96 e0       	ldi	r25, 0x06	; 6
    5518:	60 e0       	ldi	r22, 0x00	; 0
    551a:	0e 94 4e 24 	call	0x489c	; 0x489c <usb_initEndPoint>

}
    551e:	08 95       	ret

00005520 <usb_poll>:

/**
 * USB main task. Performs enumeration/cleanup
 */
void usb_poll(void)
{
    5520:	1f 93       	push	r17
    5522:	df 93       	push	r29
    5524:	cf 93       	push	r28
    5526:	cd b7       	in	r28, 0x3d	; 61
    5528:	de b7       	in	r29, 0x3e	; 62
    552a:	62 97       	sbiw	r28, 0x12	; 18
    552c:	0f b6       	in	r0, 0x3f	; 63
    552e:	f8 94       	cli
    5530:	de bf       	out	0x3e, r29	; 62
    5532:	0f be       	out	0x3f, r0	; 63
    5534:	cd bf       	out	0x3d, r28	; 61
        uint8_t tmpdata;
        static unsigned long delay = 0;
        usb_deviceDescriptor deviceDescriptor;

        // Poll the MAX3421E device.
        max3421e_poll();
    5536:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <max3421e_poll>

        /* modify USB task state if Vbus changed */
        tmpdata = max3421e_getVbusState();
    553a:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <max3421e_getVbusState>

        switch (tmpdata)
    553e:	81 30       	cpi	r24, 0x01	; 1
    5540:	09 f4       	brne	.+2      	; 0x5544 <usb_poll+0x24>
    5542:	44 c0       	rjmp	.+136    	; 0x55cc <usb_poll+0xac>
    5544:	81 30       	cpi	r24, 0x01	; 1
    5546:	a0 f4       	brcc	.+40     	; 0x5570 <usb_poll+0x50>
        {
        case SE1: //illegal state
                usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
                break;
        case SE0: //disconnected
                if ((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    5548:	10 91 00 02 	lds	r17, 0x0200
    554c:	81 2f       	mov	r24, r17
    554e:	80 7f       	andi	r24, 0xF0	; 240
    5550:	80 31       	cpi	r24, 0x10	; 16
    5552:	c1 f0       	breq	.+48     	; 0x5584 <usb_poll+0x64>
                {
                        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    5554:	81 e1       	ldi	r24, 0x11	; 17
    5556:	80 93 00 02 	sts	0x0200, r24
        case USB_DETACHED_SUBSTATE_INITIALIZE:

                // TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
                // devices.
                for (i = 1; i < USB_NUMDEVICES; i++)
                        if (deviceTable[i].active)
    555a:	80 91 d4 06 	lds	r24, 0x06D4
    555e:	88 23       	and	r24, r24
    5560:	09 f0       	breq	.+2      	; 0x5564 <usb_poll+0x44>
    5562:	ce c0       	rjmp	.+412    	; 0x5700 <usb_poll+0x1e0>
                                usb_fireEvent(&(deviceTable[i]), USB_DISCONNECT);

                usb_init();
    5564:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <usb_init>
                usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    5568:	82 e1       	ldi	r24, 0x12	; 18
    556a:	80 93 00 02 	sts	0x0200, r24
    556e:	31 c0       	rjmp	.+98     	; 0x55d2 <usb_poll+0xb2>
        max3421e_poll();

        /* modify USB task state if Vbus changed */
        tmpdata = max3421e_getVbusState();

        switch (tmpdata)
    5570:	84 30       	cpi	r24, 0x04	; 4
    5572:	08 f0       	brcs	.+2      	; 0x5576 <usb_poll+0x56>
    5574:	41 c0       	rjmp	.+130    	; 0x55f8 <usb_poll+0xd8>
                        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
                }
                break;
        case FSHOST: //attached
        case LSHOST:
                if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
    5576:	10 91 00 02 	lds	r17, 0x0200
    557a:	81 2f       	mov	r24, r17
    557c:	80 7f       	andi	r24, 0xF0	; 240
    557e:	80 31       	cpi	r24, 0x10	; 16
    5580:	09 f4       	brne	.+2      	; 0x5584 <usb_poll+0x64>
    5582:	7e c0       	rjmp	.+252    	; 0x5680 <usb_poll+0x160>
        }// switch( tmpdata

        //Serial.print("USB task state: ");
        //Serial.println( usb_task_state, HEX );

        switch (usb_task_state)
    5584:	10 34       	cpi	r17, 0x40	; 64
    5586:	e1 f1       	breq	.+120    	; 0x5600 <usb_poll+0xe0>
    5588:	11 34       	cpi	r17, 0x41	; 65
    558a:	68 f1       	brcs	.+90     	; 0x55e6 <usb_poll+0xc6>
    558c:	10 36       	cpi	r17, 0x60	; 96
    558e:	09 f4       	brne	.+2      	; 0x5592 <usb_poll+0x72>
    5590:	56 c0       	rjmp	.+172    	; 0x563e <usb_poll+0x11e>
    5592:	10 37       	cpi	r17, 0x70	; 112
    5594:	09 f4       	brne	.+2      	; 0x5598 <usb_poll+0x78>
    5596:	99 c0       	rjmp	.+306    	; 0x56ca <usb_poll+0x1aa>
    5598:	10 35       	cpi	r17, 0x50	; 80
    559a:	d9 f4       	brne	.+54     	; 0x55d2 <usb_poll+0xb2>
                        delay = avr_millis() + 20; //20ms wait after reset per USB spec
                }
                break;

        case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                if (max3421e_read(MAX_REG_HIRQ) & bmFRAMEIRQ)
    559c:	88 ec       	ldi	r24, 0xC8	; 200
    559e:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    55a2:	86 ff       	sbrs	r24, 6
    55a4:	16 c0       	rjmp	.+44     	; 0x55d2 <usb_poll+0xb2>
                { //when first SOF received we can continue
                        if (delay < avr_millis())
    55a6:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    55aa:	20 91 91 06 	lds	r18, 0x0691
    55ae:	30 91 92 06 	lds	r19, 0x0692
    55b2:	40 91 93 06 	lds	r20, 0x0693
    55b6:	50 91 94 06 	lds	r21, 0x0694
    55ba:	26 17       	cp	r18, r22
    55bc:	37 07       	cpc	r19, r23
    55be:	48 07       	cpc	r20, r24
    55c0:	59 07       	cpc	r21, r25
    55c2:	38 f4       	brcc	.+14     	; 0x55d2 <usb_poll+0xb2>
                        { //20ms passed
                                usb_task_state
    55c4:	80 e6       	ldi	r24, 0x60	; 96
    55c6:	80 93 00 02 	sts	0x0200, r24
    55ca:	03 c0       	rjmp	.+6      	; 0x55d2 <usb_poll+0xb2>
        tmpdata = max3421e_getVbusState();

        switch (tmpdata)
        {
        case SE1: //illegal state
                usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    55cc:	83 e1       	ldi	r24, 0x13	; 19
    55ce:	80 93 00 02 	sts	0x0200, r24
        case USB_STATE_RUNNING:
                break;
        case USB_STATE_ERROR:
                break;
        }
}
    55d2:	62 96       	adiw	r28, 0x12	; 18
    55d4:	0f b6       	in	r0, 0x3f	; 63
    55d6:	f8 94       	cli
    55d8:	de bf       	out	0x3e, r29	; 62
    55da:	0f be       	out	0x3f, r0	; 63
    55dc:	cd bf       	out	0x3d, r28	; 61
    55de:	cf 91       	pop	r28
    55e0:	df 91       	pop	r29
    55e2:	1f 91       	pop	r17
    55e4:	08 95       	ret
        }// switch( tmpdata

        //Serial.print("USB task state: ");
        //Serial.println( usb_task_state, HEX );

        switch (usb_task_state)
    55e6:	10 32       	cpi	r17, 0x20	; 32
    55e8:	09 f4       	brne	.+2      	; 0x55ec <usb_poll+0xcc>
    55ea:	5b c0       	rjmp	.+182    	; 0x56a2 <usb_poll+0x182>
    55ec:	10 33       	cpi	r17, 0x30	; 48
    55ee:	09 f4       	brne	.+2      	; 0x55f2 <usb_poll+0xd2>
    55f0:	3f c0       	rjmp	.+126    	; 0x5670 <usb_poll+0x150>
    55f2:	11 31       	cpi	r17, 0x11	; 17
    55f4:	71 f7       	brne	.-36     	; 0x55d2 <usb_poll+0xb2>
    55f6:	b1 cf       	rjmp	.-158    	; 0x555a <usb_poll+0x3a>
    55f8:	10 91 00 02 	lds	r17, 0x0200
    55fc:	10 34       	cpi	r17, 0x40	; 64
    55fe:	21 f6       	brne	.-120    	; 0x5588 <usb_poll+0x68>
                max3421e_write(MAX_REG_HCTL, bmBUSRST);
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
                break;

        case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                if ((max3421e_read(MAX_REG_HCTL) & bmBUSRST) == 0)
    5600:	88 ee       	ldi	r24, 0xE8	; 232
    5602:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
    5606:	80 fd       	sbrc	r24, 0
    5608:	e4 cf       	rjmp	.-56     	; 0x55d2 <usb_poll+0xb2>
                {
                        tmpdata = max3421e_read(MAX_REG_MODE) | bmSOFKAENAB; //start SOF generation
    560a:	88 ed       	ldi	r24, 0xD8	; 216
    560c:	0e 94 c1 24 	call	0x4982	; 0x4982 <max3421e_read>
                        max3421e_write(MAX_REG_MODE, tmpdata);
    5610:	68 2f       	mov	r22, r24
    5612:	68 60       	ori	r22, 0x08	; 8
    5614:	88 ed       	ldi	r24, 0xD8	; 216
    5616:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
                        //                  max3421e_regWr( rMODE, bmSOFKAENAB );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    561a:	80 e5       	ldi	r24, 0x50	; 80
    561c:	80 93 00 02 	sts	0x0200, r24
                        delay = avr_millis() + 20; //20ms wait after reset per USB spec
    5620:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    5624:	6c 5e       	subi	r22, 0xEC	; 236
    5626:	7f 4f       	sbci	r23, 0xFF	; 255
    5628:	8f 4f       	sbci	r24, 0xFF	; 255
    562a:	9f 4f       	sbci	r25, 0xFF	; 255
    562c:	60 93 91 06 	sts	0x0691, r22
    5630:	70 93 92 06 	sts	0x0692, r23
    5634:	80 93 93 06 	sts	0x0693, r24
    5638:	90 93 94 06 	sts	0x0694, r25
    563c:	ca cf       	rjmp	.-108    	; 0x55d2 <usb_poll+0xb2>
                break;

        case USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE:
                // toggle( BPNT_0 );

                deviceTable[0].control.maxPacketSize = 8;
    563e:	88 e0       	ldi	r24, 0x08	; 8
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	90 93 c2 06 	sts	0x06C2, r25
    5646:	80 93 c1 06 	sts	0x06C1, r24

                rcode = usb_getDeviceDescriptor(&deviceTable[0], &deviceDescriptor);
    564a:	8d eb       	ldi	r24, 0xBD	; 189
    564c:	96 e0       	ldi	r25, 0x06	; 6
    564e:	be 01       	movw	r22, r28
    5650:	6f 5f       	subi	r22, 0xFF	; 255
    5652:	7f 4f       	sbci	r23, 0xFF	; 255
    5654:	0e 94 c1 29 	call	0x5382	; 0x5382 <usb_getDeviceDescriptor>
                if (rcode == 0)
    5658:	88 23       	and	r24, r24
    565a:	09 f0       	breq	.+2      	; 0x565e <usb_poll+0x13e>
    565c:	4b c0       	rjmp	.+150    	; 0x56f4 <usb_poll+0x1d4>
                {
                        deviceTable[0].control.maxPacketSize = deviceDescriptor.bMaxPacketSize0;
    565e:	88 85       	ldd	r24, Y+8	; 0x08
    5660:	80 93 c1 06 	sts	0x06C1, r24
    5664:	10 92 c2 06 	sts	0x06C2, r1
                        usb_task_state = USB_STATE_ADDRESSING;
    5668:	80 e7       	ldi	r24, 0x70	; 112
    566a:	80 93 00 02 	sts	0x0200, r24
    566e:	b1 cf       	rjmp	.-158    	; 0x55d2 <usb_poll+0xb2>
                }
                break;

        case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                // Issue bus reset.
                max3421e_write(MAX_REG_HCTL, bmBUSRST);
    5670:	88 ee       	ldi	r24, 0xE8	; 232
    5672:	61 e0       	ldi	r22, 0x01	; 1
    5674:	0e 94 99 24 	call	0x4932	; 0x4932 <max3421e_write>
                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    5678:	80 e4       	ldi	r24, 0x40	; 64
    567a:	80 93 00 02 	sts	0x0200, r24
    567e:	a9 cf       	rjmp	.-174    	; 0x55d2 <usb_poll+0xb2>
                break;
        case FSHOST: //attached
        case LSHOST:
                if ((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)
                {
                        delay = avr_millis() + USB_SETTLE_DELAY;
    5680:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    5684:	68 53       	subi	r22, 0x38	; 56
    5686:	7f 4f       	sbci	r23, 0xFF	; 255
    5688:	8f 4f       	sbci	r24, 0xFF	; 255
    568a:	9f 4f       	sbci	r25, 0xFF	; 255
    568c:	60 93 91 06 	sts	0x0691, r22
    5690:	70 93 92 06 	sts	0x0692, r23
    5694:	80 93 93 06 	sts	0x0693, r24
    5698:	90 93 94 06 	sts	0x0694, r25
                        usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    569c:	80 e2       	ldi	r24, 0x20	; 32
    569e:	80 93 00 02 	sts	0x0200, r24
        case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                break;
        case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                break;
        case USB_ATTACHED_SUBSTATE_SETTLE: //setlle time for just attached device
                if (delay < avr_millis())
    56a2:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <avr_millis>
    56a6:	20 91 91 06 	lds	r18, 0x0691
    56aa:	30 91 92 06 	lds	r19, 0x0692
    56ae:	40 91 93 06 	lds	r20, 0x0693
    56b2:	50 91 94 06 	lds	r21, 0x0694
    56b6:	26 17       	cp	r18, r22
    56b8:	37 07       	cpc	r19, r23
    56ba:	48 07       	cpc	r20, r24
    56bc:	59 07       	cpc	r21, r25
    56be:	08 f0       	brcs	.+2      	; 0x56c2 <usb_poll+0x1a2>
    56c0:	88 cf       	rjmp	.-240    	; 0x55d2 <usb_poll+0xb2>
                {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    56c2:	80 e3       	ldi	r24, 0x30	; 48
    56c4:	80 93 00 02 	sts	0x0200, r24
    56c8:	84 cf       	rjmp	.-248    	; 0x55d2 <usb_poll+0xb2>
        case USB_STATE_ADDRESSING:

                // Look for an empty spot
                for (i = 1; i < USB_NUMDEVICES; i++)
                {
                        if (!deviceTable[i].active)
    56ca:	80 91 d4 06 	lds	r24, 0x06D4
    56ce:	88 23       	and	r24, r24
    56d0:	e9 f0       	breq	.+58     	; 0x570c <usb_poll+0x1ec>
                }

                // If no vacant spot was found in the device table, fire an error.
                if (usb_task_state == USB_STATE_ADDRESSING)
                {
                        usb_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);
    56d2:	89 ee       	ldi	r24, 0xE9	; 233
    56d4:	96 e0       	ldi	r25, 0x06	; 6
    56d6:	62 e0       	ldi	r22, 0x02	; 2
    56d8:	0e 94 48 24 	call	0x4890	; 0x4890 <usb_fireEvent>

                        // No vacant place in devtable
                        usb_error = 0xfe;
    56dc:	8e ef       	ldi	r24, 0xFE	; 254
    56de:	80 93 90 06 	sts	0x0690, r24
                        usb_task_state = USB_STATE_ERROR;
    56e2:	80 ea       	ldi	r24, 0xA0	; 160
    56e4:	80 93 00 02 	sts	0x0200, r24
    56e8:	74 cf       	rjmp	.-280    	; 0x55d2 <usb_poll+0xb2>
                                        // NB: I've bypassed the configuring state, because configuration should be handled
                                        // in the usb event handler.
                                        usb_task_state = USB_STATE_RUNNING;
                                } else
                                {
                                        usb_fireEvent(&deviceTable[i], USB_ADRESSING_ERROR);
    56ea:	83 ed       	ldi	r24, 0xD3	; 211
    56ec:	96 e0       	ldi	r25, 0x06	; 6
    56ee:	62 e0       	ldi	r22, 0x02	; 2
    56f0:	0e 94 48 24 	call	0x4890	; 0x4890 <usb_fireEvent>

                                        // TODO remove usb_error at some point?
                                        usb_error = USB_STATE_ADDRESSING;
    56f4:	10 93 90 06 	sts	0x0690, r17
                                        usb_task_state = USB_STATE_ERROR;
    56f8:	80 ea       	ldi	r24, 0xA0	; 160
    56fa:	80 93 00 02 	sts	0x0200, r24
    56fe:	69 cf       	rjmp	.-302    	; 0x55d2 <usb_poll+0xb2>

                // TODO right now it looks like the USB board is just reset on disconnect. Fire disconnect for all connected
                // devices.
                for (i = 1; i < USB_NUMDEVICES; i++)
                        if (deviceTable[i].active)
                                usb_fireEvent(&(deviceTable[i]), USB_DISCONNECT);
    5700:	83 ed       	ldi	r24, 0xD3	; 211
    5702:	96 e0       	ldi	r25, 0x06	; 6
    5704:	61 e0       	ldi	r22, 0x01	; 1
    5706:	0e 94 48 24 	call	0x4890	; 0x4890 <usb_fireEvent>
    570a:	2c cf       	rjmp	.-424    	; 0x5564 <usb_poll+0x44>
                        if (!deviceTable[i].active)
                        {
                                // Set correct MaxPktSize
                                // deviceTable[i].epinfo = deviceTable[0].epinfo;

                                deviceTable[i].address = i;
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	80 93 d3 06 	sts	0x06D3, r24
                                deviceTable[i].active = true;
    5712:	80 93 d4 06 	sts	0x06D4, r24

                                usb_initEndPoint(&(deviceTable[i].control), 0);
    5716:	85 ed       	ldi	r24, 0xD5	; 213
    5718:	96 e0       	ldi	r25, 0x06	; 6
    571a:	60 e0       	ldi	r22, 0x00	; 0
    571c:	0e 94 4e 24 	call	0x489c	; 0x489c <usb_initEndPoint>

                                //temporary record
                                //until plugged with real device endpoint structure
                                rcode = usb_setAddress(&deviceTable[0], i);
    5720:	8d eb       	ldi	r24, 0xBD	; 189
    5722:	96 e0       	ldi	r25, 0x06	; 6
    5724:	61 e0       	ldi	r22, 0x01	; 1
    5726:	0e 94 53 29 	call	0x52a6	; 0x52a6 <usb_setAddress>

                                if (rcode == 0)
    572a:	88 23       	and	r24, r24
    572c:	f1 f6       	brne	.-68     	; 0x56ea <usb_poll+0x1ca>
                                {
                                        usb_fireEvent(&deviceTable[i], USB_CONNECT);
    572e:	83 ed       	ldi	r24, 0xD3	; 211
    5730:	96 e0       	ldi	r25, 0x06	; 6
    5732:	60 e0       	ldi	r22, 0x00	; 0
    5734:	0e 94 48 24 	call	0x4890	; 0x4890 <usb_fireEvent>
                                        // usb_task_state = USB_STATE_CONFIGURING;
                                        // NB: I've bypassed the configuring state, because configuration should be handled
                                        // in the usb event handler.
                                        usb_task_state = USB_STATE_RUNNING;
    5738:	80 e9       	ldi	r24, 0x90	; 144
    573a:	80 93 00 02 	sts	0x0200, r24
    573e:	49 cf       	rjmp	.-366    	; 0x55d2 <usb_poll+0xb2>

00005740 <__subsf3>:
    5740:	50 58       	subi	r21, 0x80	; 128

00005742 <__addsf3>:
    5742:	bb 27       	eor	r27, r27
    5744:	aa 27       	eor	r26, r26
    5746:	0e d0       	rcall	.+28     	; 0x5764 <__addsf3x>
    5748:	11 c2       	rjmp	.+1058   	; 0x5b6c <__fp_round>
    574a:	02 d2       	rcall	.+1028   	; 0x5b50 <__fp_pscA>
    574c:	30 f0       	brcs	.+12     	; 0x575a <__addsf3+0x18>
    574e:	07 d2       	rcall	.+1038   	; 0x5b5e <__fp_pscB>
    5750:	20 f0       	brcs	.+8      	; 0x575a <__addsf3+0x18>
    5752:	31 f4       	brne	.+12     	; 0x5760 <__addsf3+0x1e>
    5754:	9f 3f       	cpi	r25, 0xFF	; 255
    5756:	11 f4       	brne	.+4      	; 0x575c <__addsf3+0x1a>
    5758:	1e f4       	brtc	.+6      	; 0x5760 <__addsf3+0x1e>
    575a:	d2 c1       	rjmp	.+932    	; 0x5b00 <__fp_nan>
    575c:	0e f4       	brtc	.+2      	; 0x5760 <__addsf3+0x1e>
    575e:	e0 95       	com	r30
    5760:	e7 fb       	bst	r30, 7
    5762:	9f c1       	rjmp	.+830    	; 0x5aa2 <__fp_inf>

00005764 <__addsf3x>:
    5764:	e9 2f       	mov	r30, r25
    5766:	13 d2       	rcall	.+1062   	; 0x5b8e <__fp_split3>
    5768:	80 f3       	brcs	.-32     	; 0x574a <__addsf3+0x8>
    576a:	ba 17       	cp	r27, r26
    576c:	62 07       	cpc	r22, r18
    576e:	73 07       	cpc	r23, r19
    5770:	84 07       	cpc	r24, r20
    5772:	95 07       	cpc	r25, r21
    5774:	18 f0       	brcs	.+6      	; 0x577c <__addsf3x+0x18>
    5776:	71 f4       	brne	.+28     	; 0x5794 <__addsf3x+0x30>
    5778:	9e f5       	brtc	.+102    	; 0x57e0 <__addsf3x+0x7c>
    577a:	42 c2       	rjmp	.+1156   	; 0x5c00 <__fp_zero>
    577c:	0e f4       	brtc	.+2      	; 0x5780 <__addsf3x+0x1c>
    577e:	e0 95       	com	r30
    5780:	0b 2e       	mov	r0, r27
    5782:	ba 2f       	mov	r27, r26
    5784:	a0 2d       	mov	r26, r0
    5786:	0b 01       	movw	r0, r22
    5788:	b9 01       	movw	r22, r18
    578a:	90 01       	movw	r18, r0
    578c:	0c 01       	movw	r0, r24
    578e:	ca 01       	movw	r24, r20
    5790:	a0 01       	movw	r20, r0
    5792:	11 24       	eor	r1, r1
    5794:	ff 27       	eor	r31, r31
    5796:	59 1b       	sub	r21, r25
    5798:	99 f0       	breq	.+38     	; 0x57c0 <__addsf3x+0x5c>
    579a:	59 3f       	cpi	r21, 0xF9	; 249
    579c:	50 f4       	brcc	.+20     	; 0x57b2 <__addsf3x+0x4e>
    579e:	50 3e       	cpi	r21, 0xE0	; 224
    57a0:	68 f1       	brcs	.+90     	; 0x57fc <__addsf3x+0x98>
    57a2:	1a 16       	cp	r1, r26
    57a4:	f0 40       	sbci	r31, 0x00	; 0
    57a6:	a2 2f       	mov	r26, r18
    57a8:	23 2f       	mov	r18, r19
    57aa:	34 2f       	mov	r19, r20
    57ac:	44 27       	eor	r20, r20
    57ae:	58 5f       	subi	r21, 0xF8	; 248
    57b0:	f3 cf       	rjmp	.-26     	; 0x5798 <__addsf3x+0x34>
    57b2:	46 95       	lsr	r20
    57b4:	37 95       	ror	r19
    57b6:	27 95       	ror	r18
    57b8:	a7 95       	ror	r26
    57ba:	f0 40       	sbci	r31, 0x00	; 0
    57bc:	53 95       	inc	r21
    57be:	c9 f7       	brne	.-14     	; 0x57b2 <__addsf3x+0x4e>
    57c0:	7e f4       	brtc	.+30     	; 0x57e0 <__addsf3x+0x7c>
    57c2:	1f 16       	cp	r1, r31
    57c4:	ba 0b       	sbc	r27, r26
    57c6:	62 0b       	sbc	r22, r18
    57c8:	73 0b       	sbc	r23, r19
    57ca:	84 0b       	sbc	r24, r20
    57cc:	ba f0       	brmi	.+46     	; 0x57fc <__addsf3x+0x98>
    57ce:	91 50       	subi	r25, 0x01	; 1
    57d0:	a1 f0       	breq	.+40     	; 0x57fa <__addsf3x+0x96>
    57d2:	ff 0f       	add	r31, r31
    57d4:	bb 1f       	adc	r27, r27
    57d6:	66 1f       	adc	r22, r22
    57d8:	77 1f       	adc	r23, r23
    57da:	88 1f       	adc	r24, r24
    57dc:	c2 f7       	brpl	.-16     	; 0x57ce <__addsf3x+0x6a>
    57de:	0e c0       	rjmp	.+28     	; 0x57fc <__addsf3x+0x98>
    57e0:	ba 0f       	add	r27, r26
    57e2:	62 1f       	adc	r22, r18
    57e4:	73 1f       	adc	r23, r19
    57e6:	84 1f       	adc	r24, r20
    57e8:	48 f4       	brcc	.+18     	; 0x57fc <__addsf3x+0x98>
    57ea:	87 95       	ror	r24
    57ec:	77 95       	ror	r23
    57ee:	67 95       	ror	r22
    57f0:	b7 95       	ror	r27
    57f2:	f7 95       	ror	r31
    57f4:	9e 3f       	cpi	r25, 0xFE	; 254
    57f6:	08 f0       	brcs	.+2      	; 0x57fa <__addsf3x+0x96>
    57f8:	b3 cf       	rjmp	.-154    	; 0x5760 <__addsf3+0x1e>
    57fa:	93 95       	inc	r25
    57fc:	88 0f       	add	r24, r24
    57fe:	08 f0       	brcs	.+2      	; 0x5802 <__addsf3x+0x9e>
    5800:	99 27       	eor	r25, r25
    5802:	ee 0f       	add	r30, r30
    5804:	97 95       	ror	r25
    5806:	87 95       	ror	r24
    5808:	08 95       	ret

0000580a <atan>:
    580a:	df 93       	push	r29
    580c:	dd 27       	eor	r29, r29
    580e:	b9 2f       	mov	r27, r25
    5810:	bf 77       	andi	r27, 0x7F	; 127
    5812:	40 e8       	ldi	r20, 0x80	; 128
    5814:	5f e3       	ldi	r21, 0x3F	; 63
    5816:	16 16       	cp	r1, r22
    5818:	17 06       	cpc	r1, r23
    581a:	48 07       	cpc	r20, r24
    581c:	5b 07       	cpc	r21, r27
    581e:	10 f4       	brcc	.+4      	; 0x5824 <atan+0x1a>
    5820:	d9 2f       	mov	r29, r25
    5822:	f9 d1       	rcall	.+1010   	; 0x5c16 <inverse>
    5824:	9f 93       	push	r25
    5826:	8f 93       	push	r24
    5828:	7f 93       	push	r23
    582a:	6f 93       	push	r22
    582c:	23 d3       	rcall	.+1606   	; 0x5e74 <square>
    582e:	ec e1       	ldi	r30, 0x1C	; 28
    5830:	f2 e0       	ldi	r31, 0x02	; 2
    5832:	69 d1       	rcall	.+722    	; 0x5b06 <__fp_powser>
    5834:	9b d1       	rcall	.+822    	; 0x5b6c <__fp_round>
    5836:	2f 91       	pop	r18
    5838:	3f 91       	pop	r19
    583a:	4f 91       	pop	r20
    583c:	5f 91       	pop	r21
    583e:	61 d2       	rcall	.+1218   	; 0x5d02 <__mulsf3x>
    5840:	dd 23       	and	r29, r29
    5842:	49 f0       	breq	.+18     	; 0x5856 <atan+0x4c>
    5844:	90 58       	subi	r25, 0x80	; 128
    5846:	a2 ea       	ldi	r26, 0xA2	; 162
    5848:	2a ed       	ldi	r18, 0xDA	; 218
    584a:	3f e0       	ldi	r19, 0x0F	; 15
    584c:	49 ec       	ldi	r20, 0xC9	; 201
    584e:	5f e3       	ldi	r21, 0x3F	; 63
    5850:	d0 78       	andi	r29, 0x80	; 128
    5852:	5d 27       	eor	r21, r29
    5854:	87 df       	rcall	.-242    	; 0x5764 <__addsf3x>
    5856:	df 91       	pop	r29
    5858:	89 c1       	rjmp	.+786    	; 0x5b6c <__fp_round>

0000585a <ceil>:
    585a:	bb d1       	rcall	.+886    	; 0x5bd2 <__fp_trunc>
    585c:	80 f0       	brcs	.+32     	; 0x587e <ceil+0x24>
    585e:	9f 37       	cpi	r25, 0x7F	; 127
    5860:	40 f4       	brcc	.+16     	; 0x5872 <ceil+0x18>
    5862:	91 11       	cpse	r25, r1
    5864:	0e f4       	brtc	.+2      	; 0x5868 <ceil+0xe>
    5866:	cd c1       	rjmp	.+922    	; 0x5c02 <__fp_szero>
    5868:	60 e0       	ldi	r22, 0x00	; 0
    586a:	70 e0       	ldi	r23, 0x00	; 0
    586c:	80 e8       	ldi	r24, 0x80	; 128
    586e:	9f e3       	ldi	r25, 0x3F	; 63
    5870:	08 95       	ret
    5872:	26 f0       	brts	.+8      	; 0x587c <ceil+0x22>
    5874:	1b 16       	cp	r1, r27
    5876:	61 1d       	adc	r22, r1
    5878:	71 1d       	adc	r23, r1
    587a:	81 1d       	adc	r24, r1
    587c:	18 c1       	rjmp	.+560    	; 0x5aae <__fp_mintl>
    587e:	32 c1       	rjmp	.+612    	; 0x5ae4 <__fp_mpack>

00005880 <__cmpsf2>:
    5880:	ec d0       	rcall	.+472    	; 0x5a5a <__fp_cmp>
    5882:	08 f4       	brcc	.+2      	; 0x5886 <__cmpsf2+0x6>
    5884:	81 e0       	ldi	r24, 0x01	; 1
    5886:	08 95       	ret

00005888 <__divsf3>:
    5888:	0c d0       	rcall	.+24     	; 0x58a2 <__divsf3x>
    588a:	70 c1       	rjmp	.+736    	; 0x5b6c <__fp_round>
    588c:	68 d1       	rcall	.+720    	; 0x5b5e <__fp_pscB>
    588e:	40 f0       	brcs	.+16     	; 0x58a0 <__divsf3+0x18>
    5890:	5f d1       	rcall	.+702    	; 0x5b50 <__fp_pscA>
    5892:	30 f0       	brcs	.+12     	; 0x58a0 <__divsf3+0x18>
    5894:	21 f4       	brne	.+8      	; 0x589e <__divsf3+0x16>
    5896:	5f 3f       	cpi	r21, 0xFF	; 255
    5898:	19 f0       	breq	.+6      	; 0x58a0 <__divsf3+0x18>
    589a:	03 c1       	rjmp	.+518    	; 0x5aa2 <__fp_inf>
    589c:	51 11       	cpse	r21, r1
    589e:	b1 c1       	rjmp	.+866    	; 0x5c02 <__fp_szero>
    58a0:	2f c1       	rjmp	.+606    	; 0x5b00 <__fp_nan>

000058a2 <__divsf3x>:
    58a2:	75 d1       	rcall	.+746    	; 0x5b8e <__fp_split3>
    58a4:	98 f3       	brcs	.-26     	; 0x588c <__divsf3+0x4>

000058a6 <__divsf3_pse>:
    58a6:	99 23       	and	r25, r25
    58a8:	c9 f3       	breq	.-14     	; 0x589c <__divsf3+0x14>
    58aa:	55 23       	and	r21, r21
    58ac:	b1 f3       	breq	.-20     	; 0x589a <__divsf3+0x12>
    58ae:	95 1b       	sub	r25, r21
    58b0:	55 0b       	sbc	r21, r21
    58b2:	bb 27       	eor	r27, r27
    58b4:	aa 27       	eor	r26, r26
    58b6:	62 17       	cp	r22, r18
    58b8:	73 07       	cpc	r23, r19
    58ba:	84 07       	cpc	r24, r20
    58bc:	38 f0       	brcs	.+14     	; 0x58cc <__divsf3_pse+0x26>
    58be:	9f 5f       	subi	r25, 0xFF	; 255
    58c0:	5f 4f       	sbci	r21, 0xFF	; 255
    58c2:	22 0f       	add	r18, r18
    58c4:	33 1f       	adc	r19, r19
    58c6:	44 1f       	adc	r20, r20
    58c8:	aa 1f       	adc	r26, r26
    58ca:	a9 f3       	breq	.-22     	; 0x58b6 <__divsf3_pse+0x10>
    58cc:	33 d0       	rcall	.+102    	; 0x5934 <__divsf3_pse+0x8e>
    58ce:	0e 2e       	mov	r0, r30
    58d0:	3a f0       	brmi	.+14     	; 0x58e0 <__divsf3_pse+0x3a>
    58d2:	e0 e8       	ldi	r30, 0x80	; 128
    58d4:	30 d0       	rcall	.+96     	; 0x5936 <__divsf3_pse+0x90>
    58d6:	91 50       	subi	r25, 0x01	; 1
    58d8:	50 40       	sbci	r21, 0x00	; 0
    58da:	e6 95       	lsr	r30
    58dc:	00 1c       	adc	r0, r0
    58de:	ca f7       	brpl	.-14     	; 0x58d2 <__divsf3_pse+0x2c>
    58e0:	29 d0       	rcall	.+82     	; 0x5934 <__divsf3_pse+0x8e>
    58e2:	fe 2f       	mov	r31, r30
    58e4:	27 d0       	rcall	.+78     	; 0x5934 <__divsf3_pse+0x8e>
    58e6:	66 0f       	add	r22, r22
    58e8:	77 1f       	adc	r23, r23
    58ea:	88 1f       	adc	r24, r24
    58ec:	bb 1f       	adc	r27, r27
    58ee:	26 17       	cp	r18, r22
    58f0:	37 07       	cpc	r19, r23
    58f2:	48 07       	cpc	r20, r24
    58f4:	ab 07       	cpc	r26, r27
    58f6:	b0 e8       	ldi	r27, 0x80	; 128
    58f8:	09 f0       	breq	.+2      	; 0x58fc <__divsf3_pse+0x56>
    58fa:	bb 0b       	sbc	r27, r27
    58fc:	80 2d       	mov	r24, r0
    58fe:	bf 01       	movw	r22, r30
    5900:	ff 27       	eor	r31, r31
    5902:	93 58       	subi	r25, 0x83	; 131
    5904:	5f 4f       	sbci	r21, 0xFF	; 255
    5906:	2a f0       	brmi	.+10     	; 0x5912 <__divsf3_pse+0x6c>
    5908:	9e 3f       	cpi	r25, 0xFE	; 254
    590a:	51 05       	cpc	r21, r1
    590c:	68 f0       	brcs	.+26     	; 0x5928 <__divsf3_pse+0x82>
    590e:	c9 c0       	rjmp	.+402    	; 0x5aa2 <__fp_inf>
    5910:	78 c1       	rjmp	.+752    	; 0x5c02 <__fp_szero>
    5912:	5f 3f       	cpi	r21, 0xFF	; 255
    5914:	ec f3       	brlt	.-6      	; 0x5910 <__divsf3_pse+0x6a>
    5916:	98 3e       	cpi	r25, 0xE8	; 232
    5918:	dc f3       	brlt	.-10     	; 0x5910 <__divsf3_pse+0x6a>
    591a:	86 95       	lsr	r24
    591c:	77 95       	ror	r23
    591e:	67 95       	ror	r22
    5920:	b7 95       	ror	r27
    5922:	f7 95       	ror	r31
    5924:	9f 5f       	subi	r25, 0xFF	; 255
    5926:	c9 f7       	brne	.-14     	; 0x591a <__divsf3_pse+0x74>
    5928:	88 0f       	add	r24, r24
    592a:	91 1d       	adc	r25, r1
    592c:	96 95       	lsr	r25
    592e:	87 95       	ror	r24
    5930:	97 f9       	bld	r25, 7
    5932:	08 95       	ret
    5934:	e1 e0       	ldi	r30, 0x01	; 1
    5936:	66 0f       	add	r22, r22
    5938:	77 1f       	adc	r23, r23
    593a:	88 1f       	adc	r24, r24
    593c:	bb 1f       	adc	r27, r27
    593e:	62 17       	cp	r22, r18
    5940:	73 07       	cpc	r23, r19
    5942:	84 07       	cpc	r24, r20
    5944:	ba 07       	cpc	r27, r26
    5946:	20 f0       	brcs	.+8      	; 0x5950 <__divsf3_pse+0xaa>
    5948:	62 1b       	sub	r22, r18
    594a:	73 0b       	sbc	r23, r19
    594c:	84 0b       	sbc	r24, r20
    594e:	ba 0b       	sbc	r27, r26
    5950:	ee 1f       	adc	r30, r30
    5952:	88 f7       	brcc	.-30     	; 0x5936 <__divsf3_pse+0x90>
    5954:	e0 95       	com	r30
    5956:	08 95       	ret

00005958 <__fixsfsi>:
    5958:	04 d0       	rcall	.+8      	; 0x5962 <__fixunssfsi>
    595a:	68 94       	set
    595c:	b1 11       	cpse	r27, r1
    595e:	51 c1       	rjmp	.+674    	; 0x5c02 <__fp_szero>
    5960:	08 95       	ret

00005962 <__fixunssfsi>:
    5962:	1d d1       	rcall	.+570    	; 0x5b9e <__fp_splitA>
    5964:	88 f0       	brcs	.+34     	; 0x5988 <__fixunssfsi+0x26>
    5966:	9f 57       	subi	r25, 0x7F	; 127
    5968:	90 f0       	brcs	.+36     	; 0x598e <__fixunssfsi+0x2c>
    596a:	b9 2f       	mov	r27, r25
    596c:	99 27       	eor	r25, r25
    596e:	b7 51       	subi	r27, 0x17	; 23
    5970:	a0 f0       	brcs	.+40     	; 0x599a <__fixunssfsi+0x38>
    5972:	d1 f0       	breq	.+52     	; 0x59a8 <__fixunssfsi+0x46>
    5974:	66 0f       	add	r22, r22
    5976:	77 1f       	adc	r23, r23
    5978:	88 1f       	adc	r24, r24
    597a:	99 1f       	adc	r25, r25
    597c:	1a f0       	brmi	.+6      	; 0x5984 <__fixunssfsi+0x22>
    597e:	ba 95       	dec	r27
    5980:	c9 f7       	brne	.-14     	; 0x5974 <__fixunssfsi+0x12>
    5982:	12 c0       	rjmp	.+36     	; 0x59a8 <__fixunssfsi+0x46>
    5984:	b1 30       	cpi	r27, 0x01	; 1
    5986:	81 f0       	breq	.+32     	; 0x59a8 <__fixunssfsi+0x46>
    5988:	3b d1       	rcall	.+630    	; 0x5c00 <__fp_zero>
    598a:	b1 e0       	ldi	r27, 0x01	; 1
    598c:	08 95       	ret
    598e:	38 c1       	rjmp	.+624    	; 0x5c00 <__fp_zero>
    5990:	67 2f       	mov	r22, r23
    5992:	78 2f       	mov	r23, r24
    5994:	88 27       	eor	r24, r24
    5996:	b8 5f       	subi	r27, 0xF8	; 248
    5998:	39 f0       	breq	.+14     	; 0x59a8 <__fixunssfsi+0x46>
    599a:	b9 3f       	cpi	r27, 0xF9	; 249
    599c:	cc f3       	brlt	.-14     	; 0x5990 <__fixunssfsi+0x2e>
    599e:	86 95       	lsr	r24
    59a0:	77 95       	ror	r23
    59a2:	67 95       	ror	r22
    59a4:	b3 95       	inc	r27
    59a6:	d9 f7       	brne	.-10     	; 0x599e <__fixunssfsi+0x3c>
    59a8:	3e f4       	brtc	.+14     	; 0x59b8 <__fixunssfsi+0x56>
    59aa:	90 95       	com	r25
    59ac:	80 95       	com	r24
    59ae:	70 95       	com	r23
    59b0:	61 95       	neg	r22
    59b2:	7f 4f       	sbci	r23, 0xFF	; 255
    59b4:	8f 4f       	sbci	r24, 0xFF	; 255
    59b6:	9f 4f       	sbci	r25, 0xFF	; 255
    59b8:	08 95       	ret

000059ba <__floatunsisf>:
    59ba:	e8 94       	clt
    59bc:	09 c0       	rjmp	.+18     	; 0x59d0 <__floatsisf+0x12>

000059be <__floatsisf>:
    59be:	97 fb       	bst	r25, 7
    59c0:	3e f4       	brtc	.+14     	; 0x59d0 <__floatsisf+0x12>
    59c2:	90 95       	com	r25
    59c4:	80 95       	com	r24
    59c6:	70 95       	com	r23
    59c8:	61 95       	neg	r22
    59ca:	7f 4f       	sbci	r23, 0xFF	; 255
    59cc:	8f 4f       	sbci	r24, 0xFF	; 255
    59ce:	9f 4f       	sbci	r25, 0xFF	; 255
    59d0:	99 23       	and	r25, r25
    59d2:	a9 f0       	breq	.+42     	; 0x59fe <__floatsisf+0x40>
    59d4:	f9 2f       	mov	r31, r25
    59d6:	96 e9       	ldi	r25, 0x96	; 150
    59d8:	bb 27       	eor	r27, r27
    59da:	93 95       	inc	r25
    59dc:	f6 95       	lsr	r31
    59de:	87 95       	ror	r24
    59e0:	77 95       	ror	r23
    59e2:	67 95       	ror	r22
    59e4:	b7 95       	ror	r27
    59e6:	f1 11       	cpse	r31, r1
    59e8:	f8 cf       	rjmp	.-16     	; 0x59da <__floatsisf+0x1c>
    59ea:	fa f4       	brpl	.+62     	; 0x5a2a <__floatsisf+0x6c>
    59ec:	bb 0f       	add	r27, r27
    59ee:	11 f4       	brne	.+4      	; 0x59f4 <__floatsisf+0x36>
    59f0:	60 ff       	sbrs	r22, 0
    59f2:	1b c0       	rjmp	.+54     	; 0x5a2a <__floatsisf+0x6c>
    59f4:	6f 5f       	subi	r22, 0xFF	; 255
    59f6:	7f 4f       	sbci	r23, 0xFF	; 255
    59f8:	8f 4f       	sbci	r24, 0xFF	; 255
    59fa:	9f 4f       	sbci	r25, 0xFF	; 255
    59fc:	16 c0       	rjmp	.+44     	; 0x5a2a <__floatsisf+0x6c>
    59fe:	88 23       	and	r24, r24
    5a00:	11 f0       	breq	.+4      	; 0x5a06 <__floatsisf+0x48>
    5a02:	96 e9       	ldi	r25, 0x96	; 150
    5a04:	11 c0       	rjmp	.+34     	; 0x5a28 <__floatsisf+0x6a>
    5a06:	77 23       	and	r23, r23
    5a08:	21 f0       	breq	.+8      	; 0x5a12 <__floatsisf+0x54>
    5a0a:	9e e8       	ldi	r25, 0x8E	; 142
    5a0c:	87 2f       	mov	r24, r23
    5a0e:	76 2f       	mov	r23, r22
    5a10:	05 c0       	rjmp	.+10     	; 0x5a1c <__floatsisf+0x5e>
    5a12:	66 23       	and	r22, r22
    5a14:	71 f0       	breq	.+28     	; 0x5a32 <__floatsisf+0x74>
    5a16:	96 e8       	ldi	r25, 0x86	; 134
    5a18:	86 2f       	mov	r24, r22
    5a1a:	70 e0       	ldi	r23, 0x00	; 0
    5a1c:	60 e0       	ldi	r22, 0x00	; 0
    5a1e:	2a f0       	brmi	.+10     	; 0x5a2a <__floatsisf+0x6c>
    5a20:	9a 95       	dec	r25
    5a22:	66 0f       	add	r22, r22
    5a24:	77 1f       	adc	r23, r23
    5a26:	88 1f       	adc	r24, r24
    5a28:	da f7       	brpl	.-10     	; 0x5a20 <__floatsisf+0x62>
    5a2a:	88 0f       	add	r24, r24
    5a2c:	96 95       	lsr	r25
    5a2e:	87 95       	ror	r24
    5a30:	97 f9       	bld	r25, 7
    5a32:	08 95       	ret

00005a34 <floor>:
    5a34:	ce d0       	rcall	.+412    	; 0x5bd2 <__fp_trunc>
    5a36:	80 f0       	brcs	.+32     	; 0x5a58 <floor+0x24>
    5a38:	9f 37       	cpi	r25, 0x7F	; 127
    5a3a:	40 f4       	brcc	.+16     	; 0x5a4c <floor+0x18>
    5a3c:	91 11       	cpse	r25, r1
    5a3e:	0e f0       	brts	.+2      	; 0x5a42 <floor+0xe>
    5a40:	e0 c0       	rjmp	.+448    	; 0x5c02 <__fp_szero>
    5a42:	60 e0       	ldi	r22, 0x00	; 0
    5a44:	70 e0       	ldi	r23, 0x00	; 0
    5a46:	80 e8       	ldi	r24, 0x80	; 128
    5a48:	9f eb       	ldi	r25, 0xBF	; 191
    5a4a:	08 95       	ret
    5a4c:	26 f4       	brtc	.+8      	; 0x5a56 <floor+0x22>
    5a4e:	1b 16       	cp	r1, r27
    5a50:	61 1d       	adc	r22, r1
    5a52:	71 1d       	adc	r23, r1
    5a54:	81 1d       	adc	r24, r1
    5a56:	2b c0       	rjmp	.+86     	; 0x5aae <__fp_mintl>
    5a58:	45 c0       	rjmp	.+138    	; 0x5ae4 <__fp_mpack>

00005a5a <__fp_cmp>:
    5a5a:	99 0f       	add	r25, r25
    5a5c:	00 08       	sbc	r0, r0
    5a5e:	55 0f       	add	r21, r21
    5a60:	aa 0b       	sbc	r26, r26
    5a62:	e0 e8       	ldi	r30, 0x80	; 128
    5a64:	fe ef       	ldi	r31, 0xFE	; 254
    5a66:	16 16       	cp	r1, r22
    5a68:	17 06       	cpc	r1, r23
    5a6a:	e8 07       	cpc	r30, r24
    5a6c:	f9 07       	cpc	r31, r25
    5a6e:	c0 f0       	brcs	.+48     	; 0x5aa0 <__fp_cmp+0x46>
    5a70:	12 16       	cp	r1, r18
    5a72:	13 06       	cpc	r1, r19
    5a74:	e4 07       	cpc	r30, r20
    5a76:	f5 07       	cpc	r31, r21
    5a78:	98 f0       	brcs	.+38     	; 0x5aa0 <__fp_cmp+0x46>
    5a7a:	62 1b       	sub	r22, r18
    5a7c:	73 0b       	sbc	r23, r19
    5a7e:	84 0b       	sbc	r24, r20
    5a80:	95 0b       	sbc	r25, r21
    5a82:	39 f4       	brne	.+14     	; 0x5a92 <__fp_cmp+0x38>
    5a84:	0a 26       	eor	r0, r26
    5a86:	61 f0       	breq	.+24     	; 0x5aa0 <__fp_cmp+0x46>
    5a88:	23 2b       	or	r18, r19
    5a8a:	24 2b       	or	r18, r20
    5a8c:	25 2b       	or	r18, r21
    5a8e:	21 f4       	brne	.+8      	; 0x5a98 <__fp_cmp+0x3e>
    5a90:	08 95       	ret
    5a92:	0a 26       	eor	r0, r26
    5a94:	09 f4       	brne	.+2      	; 0x5a98 <__fp_cmp+0x3e>
    5a96:	a1 40       	sbci	r26, 0x01	; 1
    5a98:	a6 95       	lsr	r26
    5a9a:	8f ef       	ldi	r24, 0xFF	; 255
    5a9c:	81 1d       	adc	r24, r1
    5a9e:	81 1d       	adc	r24, r1
    5aa0:	08 95       	ret

00005aa2 <__fp_inf>:
    5aa2:	97 f9       	bld	r25, 7
    5aa4:	9f 67       	ori	r25, 0x7F	; 127
    5aa6:	80 e8       	ldi	r24, 0x80	; 128
    5aa8:	70 e0       	ldi	r23, 0x00	; 0
    5aaa:	60 e0       	ldi	r22, 0x00	; 0
    5aac:	08 95       	ret

00005aae <__fp_mintl>:
    5aae:	88 23       	and	r24, r24
    5ab0:	71 f4       	brne	.+28     	; 0x5ace <__fp_mintl+0x20>
    5ab2:	77 23       	and	r23, r23
    5ab4:	21 f0       	breq	.+8      	; 0x5abe <__fp_mintl+0x10>
    5ab6:	98 50       	subi	r25, 0x08	; 8
    5ab8:	87 2b       	or	r24, r23
    5aba:	76 2f       	mov	r23, r22
    5abc:	07 c0       	rjmp	.+14     	; 0x5acc <__fp_mintl+0x1e>
    5abe:	66 23       	and	r22, r22
    5ac0:	11 f4       	brne	.+4      	; 0x5ac6 <__fp_mintl+0x18>
    5ac2:	99 27       	eor	r25, r25
    5ac4:	0d c0       	rjmp	.+26     	; 0x5ae0 <__fp_mintl+0x32>
    5ac6:	90 51       	subi	r25, 0x10	; 16
    5ac8:	86 2b       	or	r24, r22
    5aca:	70 e0       	ldi	r23, 0x00	; 0
    5acc:	60 e0       	ldi	r22, 0x00	; 0
    5ace:	2a f0       	brmi	.+10     	; 0x5ada <__fp_mintl+0x2c>
    5ad0:	9a 95       	dec	r25
    5ad2:	66 0f       	add	r22, r22
    5ad4:	77 1f       	adc	r23, r23
    5ad6:	88 1f       	adc	r24, r24
    5ad8:	da f7       	brpl	.-10     	; 0x5ad0 <__fp_mintl+0x22>
    5ada:	88 0f       	add	r24, r24
    5adc:	96 95       	lsr	r25
    5ade:	87 95       	ror	r24
    5ae0:	97 f9       	bld	r25, 7
    5ae2:	08 95       	ret

00005ae4 <__fp_mpack>:
    5ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    5ae6:	31 f0       	breq	.+12     	; 0x5af4 <__fp_mpack_finite+0xc>

00005ae8 <__fp_mpack_finite>:
    5ae8:	91 50       	subi	r25, 0x01	; 1
    5aea:	20 f4       	brcc	.+8      	; 0x5af4 <__fp_mpack_finite+0xc>
    5aec:	87 95       	ror	r24
    5aee:	77 95       	ror	r23
    5af0:	67 95       	ror	r22
    5af2:	b7 95       	ror	r27
    5af4:	88 0f       	add	r24, r24
    5af6:	91 1d       	adc	r25, r1
    5af8:	96 95       	lsr	r25
    5afa:	87 95       	ror	r24
    5afc:	97 f9       	bld	r25, 7
    5afe:	08 95       	ret

00005b00 <__fp_nan>:
    5b00:	9f ef       	ldi	r25, 0xFF	; 255
    5b02:	80 ec       	ldi	r24, 0xC0	; 192
    5b04:	08 95       	ret

00005b06 <__fp_powser>:
    5b06:	df 93       	push	r29
    5b08:	cf 93       	push	r28
    5b0a:	1f 93       	push	r17
    5b0c:	0f 93       	push	r16
    5b0e:	ff 92       	push	r15
    5b10:	ef 92       	push	r14
    5b12:	df 92       	push	r13
    5b14:	7b 01       	movw	r14, r22
    5b16:	8c 01       	movw	r16, r24
    5b18:	68 94       	set
    5b1a:	05 c0       	rjmp	.+10     	; 0x5b26 <__fp_powser+0x20>
    5b1c:	da 2e       	mov	r13, r26
    5b1e:	ef 01       	movw	r28, r30
    5b20:	f0 d0       	rcall	.+480    	; 0x5d02 <__mulsf3x>
    5b22:	fe 01       	movw	r30, r28
    5b24:	e8 94       	clt
    5b26:	a5 91       	lpm	r26, Z+
    5b28:	25 91       	lpm	r18, Z+
    5b2a:	35 91       	lpm	r19, Z+
    5b2c:	45 91       	lpm	r20, Z+
    5b2e:	55 91       	lpm	r21, Z+
    5b30:	ae f3       	brts	.-22     	; 0x5b1c <__fp_powser+0x16>
    5b32:	ef 01       	movw	r28, r30
    5b34:	17 de       	rcall	.-978    	; 0x5764 <__addsf3x>
    5b36:	fe 01       	movw	r30, r28
    5b38:	97 01       	movw	r18, r14
    5b3a:	a8 01       	movw	r20, r16
    5b3c:	da 94       	dec	r13
    5b3e:	79 f7       	brne	.-34     	; 0x5b1e <__fp_powser+0x18>
    5b40:	df 90       	pop	r13
    5b42:	ef 90       	pop	r14
    5b44:	ff 90       	pop	r15
    5b46:	0f 91       	pop	r16
    5b48:	1f 91       	pop	r17
    5b4a:	cf 91       	pop	r28
    5b4c:	df 91       	pop	r29
    5b4e:	08 95       	ret

00005b50 <__fp_pscA>:
    5b50:	00 24       	eor	r0, r0
    5b52:	0a 94       	dec	r0
    5b54:	16 16       	cp	r1, r22
    5b56:	17 06       	cpc	r1, r23
    5b58:	18 06       	cpc	r1, r24
    5b5a:	09 06       	cpc	r0, r25
    5b5c:	08 95       	ret

00005b5e <__fp_pscB>:
    5b5e:	00 24       	eor	r0, r0
    5b60:	0a 94       	dec	r0
    5b62:	12 16       	cp	r1, r18
    5b64:	13 06       	cpc	r1, r19
    5b66:	14 06       	cpc	r1, r20
    5b68:	05 06       	cpc	r0, r21
    5b6a:	08 95       	ret

00005b6c <__fp_round>:
    5b6c:	09 2e       	mov	r0, r25
    5b6e:	03 94       	inc	r0
    5b70:	00 0c       	add	r0, r0
    5b72:	11 f4       	brne	.+4      	; 0x5b78 <__fp_round+0xc>
    5b74:	88 23       	and	r24, r24
    5b76:	52 f0       	brmi	.+20     	; 0x5b8c <__fp_round+0x20>
    5b78:	bb 0f       	add	r27, r27
    5b7a:	40 f4       	brcc	.+16     	; 0x5b8c <__fp_round+0x20>
    5b7c:	bf 2b       	or	r27, r31
    5b7e:	11 f4       	brne	.+4      	; 0x5b84 <__fp_round+0x18>
    5b80:	60 ff       	sbrs	r22, 0
    5b82:	04 c0       	rjmp	.+8      	; 0x5b8c <__fp_round+0x20>
    5b84:	6f 5f       	subi	r22, 0xFF	; 255
    5b86:	7f 4f       	sbci	r23, 0xFF	; 255
    5b88:	8f 4f       	sbci	r24, 0xFF	; 255
    5b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b8c:	08 95       	ret

00005b8e <__fp_split3>:
    5b8e:	57 fd       	sbrc	r21, 7
    5b90:	90 58       	subi	r25, 0x80	; 128
    5b92:	44 0f       	add	r20, r20
    5b94:	55 1f       	adc	r21, r21
    5b96:	59 f0       	breq	.+22     	; 0x5bae <__fp_splitA+0x10>
    5b98:	5f 3f       	cpi	r21, 0xFF	; 255
    5b9a:	71 f0       	breq	.+28     	; 0x5bb8 <__fp_splitA+0x1a>
    5b9c:	47 95       	ror	r20

00005b9e <__fp_splitA>:
    5b9e:	88 0f       	add	r24, r24
    5ba0:	97 fb       	bst	r25, 7
    5ba2:	99 1f       	adc	r25, r25
    5ba4:	61 f0       	breq	.+24     	; 0x5bbe <__fp_splitA+0x20>
    5ba6:	9f 3f       	cpi	r25, 0xFF	; 255
    5ba8:	79 f0       	breq	.+30     	; 0x5bc8 <__fp_splitA+0x2a>
    5baa:	87 95       	ror	r24
    5bac:	08 95       	ret
    5bae:	12 16       	cp	r1, r18
    5bb0:	13 06       	cpc	r1, r19
    5bb2:	14 06       	cpc	r1, r20
    5bb4:	55 1f       	adc	r21, r21
    5bb6:	f2 cf       	rjmp	.-28     	; 0x5b9c <__fp_split3+0xe>
    5bb8:	46 95       	lsr	r20
    5bba:	f1 df       	rcall	.-30     	; 0x5b9e <__fp_splitA>
    5bbc:	08 c0       	rjmp	.+16     	; 0x5bce <__fp_splitA+0x30>
    5bbe:	16 16       	cp	r1, r22
    5bc0:	17 06       	cpc	r1, r23
    5bc2:	18 06       	cpc	r1, r24
    5bc4:	99 1f       	adc	r25, r25
    5bc6:	f1 cf       	rjmp	.-30     	; 0x5baa <__fp_splitA+0xc>
    5bc8:	86 95       	lsr	r24
    5bca:	71 05       	cpc	r23, r1
    5bcc:	61 05       	cpc	r22, r1
    5bce:	08 94       	sec
    5bd0:	08 95       	ret

00005bd2 <__fp_trunc>:
    5bd2:	e5 df       	rcall	.-54     	; 0x5b9e <__fp_splitA>
    5bd4:	a0 f0       	brcs	.+40     	; 0x5bfe <__fp_trunc+0x2c>
    5bd6:	be e7       	ldi	r27, 0x7E	; 126
    5bd8:	b9 17       	cp	r27, r25
    5bda:	88 f4       	brcc	.+34     	; 0x5bfe <__fp_trunc+0x2c>
    5bdc:	bb 27       	eor	r27, r27
    5bde:	9f 38       	cpi	r25, 0x8F	; 143
    5be0:	60 f4       	brcc	.+24     	; 0x5bfa <__fp_trunc+0x28>
    5be2:	16 16       	cp	r1, r22
    5be4:	b1 1d       	adc	r27, r1
    5be6:	67 2f       	mov	r22, r23
    5be8:	78 2f       	mov	r23, r24
    5bea:	88 27       	eor	r24, r24
    5bec:	98 5f       	subi	r25, 0xF8	; 248
    5bee:	f7 cf       	rjmp	.-18     	; 0x5bde <__fp_trunc+0xc>
    5bf0:	86 95       	lsr	r24
    5bf2:	77 95       	ror	r23
    5bf4:	67 95       	ror	r22
    5bf6:	b1 1d       	adc	r27, r1
    5bf8:	93 95       	inc	r25
    5bfa:	96 39       	cpi	r25, 0x96	; 150
    5bfc:	c8 f3       	brcs	.-14     	; 0x5bf0 <__fp_trunc+0x1e>
    5bfe:	08 95       	ret

00005c00 <__fp_zero>:
    5c00:	e8 94       	clt

00005c02 <__fp_szero>:
    5c02:	bb 27       	eor	r27, r27
    5c04:	66 27       	eor	r22, r22
    5c06:	77 27       	eor	r23, r23
    5c08:	cb 01       	movw	r24, r22
    5c0a:	97 f9       	bld	r25, 7
    5c0c:	08 95       	ret

00005c0e <__gesf2>:
    5c0e:	25 df       	rcall	.-438    	; 0x5a5a <__fp_cmp>
    5c10:	08 f4       	brcc	.+2      	; 0x5c14 <__gesf2+0x6>
    5c12:	8f ef       	ldi	r24, 0xFF	; 255
    5c14:	08 95       	ret

00005c16 <inverse>:
    5c16:	9b 01       	movw	r18, r22
    5c18:	ac 01       	movw	r20, r24
    5c1a:	60 e0       	ldi	r22, 0x00	; 0
    5c1c:	70 e0       	ldi	r23, 0x00	; 0
    5c1e:	80 e8       	ldi	r24, 0x80	; 128
    5c20:	9f e3       	ldi	r25, 0x3F	; 63
    5c22:	32 ce       	rjmp	.-924    	; 0x5888 <__divsf3>

00005c24 <lround>:
    5c24:	bc df       	rcall	.-136    	; 0x5b9e <__fp_splitA>
    5c26:	58 f1       	brcs	.+86     	; 0x5c7e <lround+0x5a>
    5c28:	9e 57       	subi	r25, 0x7E	; 126
    5c2a:	58 f1       	brcs	.+86     	; 0x5c82 <lround+0x5e>
    5c2c:	98 51       	subi	r25, 0x18	; 24
    5c2e:	a0 f0       	brcs	.+40     	; 0x5c58 <lround+0x34>
    5c30:	e9 f0       	breq	.+58     	; 0x5c6c <lround+0x48>
    5c32:	98 30       	cpi	r25, 0x08	; 8
    5c34:	20 f5       	brcc	.+72     	; 0x5c7e <lround+0x5a>
    5c36:	09 2e       	mov	r0, r25
    5c38:	99 27       	eor	r25, r25
    5c3a:	66 0f       	add	r22, r22
    5c3c:	77 1f       	adc	r23, r23
    5c3e:	88 1f       	adc	r24, r24
    5c40:	99 1f       	adc	r25, r25
    5c42:	0a 94       	dec	r0
    5c44:	d1 f7       	brne	.-12     	; 0x5c3a <lround+0x16>
    5c46:	12 c0       	rjmp	.+36     	; 0x5c6c <lround+0x48>
    5c48:	06 2e       	mov	r0, r22
    5c4a:	67 2f       	mov	r22, r23
    5c4c:	78 2f       	mov	r23, r24
    5c4e:	88 27       	eor	r24, r24
    5c50:	98 5f       	subi	r25, 0xF8	; 248
    5c52:	11 f4       	brne	.+4      	; 0x5c58 <lround+0x34>
    5c54:	00 0c       	add	r0, r0
    5c56:	07 c0       	rjmp	.+14     	; 0x5c66 <lround+0x42>
    5c58:	99 3f       	cpi	r25, 0xF9	; 249
    5c5a:	b4 f3       	brlt	.-20     	; 0x5c48 <lround+0x24>
    5c5c:	86 95       	lsr	r24
    5c5e:	77 95       	ror	r23
    5c60:	67 95       	ror	r22
    5c62:	93 95       	inc	r25
    5c64:	d9 f7       	brne	.-10     	; 0x5c5c <lround+0x38>
    5c66:	61 1d       	adc	r22, r1
    5c68:	71 1d       	adc	r23, r1
    5c6a:	81 1d       	adc	r24, r1
    5c6c:	3e f4       	brtc	.+14     	; 0x5c7c <lround+0x58>
    5c6e:	90 95       	com	r25
    5c70:	80 95       	com	r24
    5c72:	70 95       	com	r23
    5c74:	61 95       	neg	r22
    5c76:	7f 4f       	sbci	r23, 0xFF	; 255
    5c78:	8f 4f       	sbci	r24, 0xFF	; 255
    5c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7c:	08 95       	ret
    5c7e:	68 94       	set
    5c80:	c0 cf       	rjmp	.-128    	; 0x5c02 <__fp_szero>
    5c82:	be cf       	rjmp	.-132    	; 0x5c00 <__fp_zero>

00005c84 <modf>:
    5c84:	fa 01       	movw	r30, r20
    5c86:	dc 01       	movw	r26, r24
    5c88:	aa 0f       	add	r26, r26
    5c8a:	bb 1f       	adc	r27, r27
    5c8c:	9b 01       	movw	r18, r22
    5c8e:	ac 01       	movw	r20, r24
    5c90:	bf 57       	subi	r27, 0x7F	; 127
    5c92:	28 f4       	brcc	.+10     	; 0x5c9e <modf+0x1a>
    5c94:	22 27       	eor	r18, r18
    5c96:	33 27       	eor	r19, r19
    5c98:	44 27       	eor	r20, r20
    5c9a:	50 78       	andi	r21, 0x80	; 128
    5c9c:	1f c0       	rjmp	.+62     	; 0x5cdc <modf+0x58>
    5c9e:	b7 51       	subi	r27, 0x17	; 23
    5ca0:	88 f4       	brcc	.+34     	; 0x5cc4 <modf+0x40>
    5ca2:	ab 2f       	mov	r26, r27
    5ca4:	00 24       	eor	r0, r0
    5ca6:	46 95       	lsr	r20
    5ca8:	37 95       	ror	r19
    5caa:	27 95       	ror	r18
    5cac:	01 1c       	adc	r0, r1
    5cae:	a3 95       	inc	r26
    5cb0:	d2 f3       	brmi	.-12     	; 0x5ca6 <modf+0x22>
    5cb2:	00 20       	and	r0, r0
    5cb4:	69 f0       	breq	.+26     	; 0x5cd0 <modf+0x4c>
    5cb6:	22 0f       	add	r18, r18
    5cb8:	33 1f       	adc	r19, r19
    5cba:	44 1f       	adc	r20, r20
    5cbc:	b3 95       	inc	r27
    5cbe:	da f3       	brmi	.-10     	; 0x5cb6 <modf+0x32>
    5cc0:	0d d0       	rcall	.+26     	; 0x5cdc <modf+0x58>
    5cc2:	3e cd       	rjmp	.-1412   	; 0x5740 <__subsf3>
    5cc4:	61 30       	cpi	r22, 0x01	; 1
    5cc6:	71 05       	cpc	r23, r1
    5cc8:	a0 e8       	ldi	r26, 0x80	; 128
    5cca:	8a 07       	cpc	r24, r26
    5ccc:	b9 46       	sbci	r27, 0x69	; 105
    5cce:	30 f4       	brcc	.+12     	; 0x5cdc <modf+0x58>
    5cd0:	9b 01       	movw	r18, r22
    5cd2:	ac 01       	movw	r20, r24
    5cd4:	66 27       	eor	r22, r22
    5cd6:	77 27       	eor	r23, r23
    5cd8:	88 27       	eor	r24, r24
    5cda:	90 78       	andi	r25, 0x80	; 128
    5cdc:	30 96       	adiw	r30, 0x00	; 0
    5cde:	21 f0       	breq	.+8      	; 0x5ce8 <modf+0x64>
    5ce0:	20 83       	st	Z, r18
    5ce2:	31 83       	std	Z+1, r19	; 0x01
    5ce4:	42 83       	std	Z+2, r20	; 0x02
    5ce6:	53 83       	std	Z+3, r21	; 0x03
    5ce8:	08 95       	ret

00005cea <__mulsf3>:
    5cea:	0b d0       	rcall	.+22     	; 0x5d02 <__mulsf3x>
    5cec:	3f cf       	rjmp	.-386    	; 0x5b6c <__fp_round>
    5cee:	30 df       	rcall	.-416    	; 0x5b50 <__fp_pscA>
    5cf0:	28 f0       	brcs	.+10     	; 0x5cfc <__mulsf3+0x12>
    5cf2:	35 df       	rcall	.-406    	; 0x5b5e <__fp_pscB>
    5cf4:	18 f0       	brcs	.+6      	; 0x5cfc <__mulsf3+0x12>
    5cf6:	95 23       	and	r25, r21
    5cf8:	09 f0       	breq	.+2      	; 0x5cfc <__mulsf3+0x12>
    5cfa:	d3 ce       	rjmp	.-602    	; 0x5aa2 <__fp_inf>
    5cfc:	01 cf       	rjmp	.-510    	; 0x5b00 <__fp_nan>
    5cfe:	11 24       	eor	r1, r1
    5d00:	80 cf       	rjmp	.-256    	; 0x5c02 <__fp_szero>

00005d02 <__mulsf3x>:
    5d02:	45 df       	rcall	.-374    	; 0x5b8e <__fp_split3>
    5d04:	a0 f3       	brcs	.-24     	; 0x5cee <__mulsf3+0x4>

00005d06 <__mulsf3_pse>:
    5d06:	95 9f       	mul	r25, r21
    5d08:	d1 f3       	breq	.-12     	; 0x5cfe <__mulsf3+0x14>
    5d0a:	95 0f       	add	r25, r21
    5d0c:	50 e0       	ldi	r21, 0x00	; 0
    5d0e:	55 1f       	adc	r21, r21
    5d10:	62 9f       	mul	r22, r18
    5d12:	f0 01       	movw	r30, r0
    5d14:	72 9f       	mul	r23, r18
    5d16:	bb 27       	eor	r27, r27
    5d18:	f0 0d       	add	r31, r0
    5d1a:	b1 1d       	adc	r27, r1
    5d1c:	63 9f       	mul	r22, r19
    5d1e:	aa 27       	eor	r26, r26
    5d20:	f0 0d       	add	r31, r0
    5d22:	b1 1d       	adc	r27, r1
    5d24:	aa 1f       	adc	r26, r26
    5d26:	64 9f       	mul	r22, r20
    5d28:	66 27       	eor	r22, r22
    5d2a:	b0 0d       	add	r27, r0
    5d2c:	a1 1d       	adc	r26, r1
    5d2e:	66 1f       	adc	r22, r22
    5d30:	82 9f       	mul	r24, r18
    5d32:	22 27       	eor	r18, r18
    5d34:	b0 0d       	add	r27, r0
    5d36:	a1 1d       	adc	r26, r1
    5d38:	62 1f       	adc	r22, r18
    5d3a:	73 9f       	mul	r23, r19
    5d3c:	b0 0d       	add	r27, r0
    5d3e:	a1 1d       	adc	r26, r1
    5d40:	62 1f       	adc	r22, r18
    5d42:	83 9f       	mul	r24, r19
    5d44:	a0 0d       	add	r26, r0
    5d46:	61 1d       	adc	r22, r1
    5d48:	22 1f       	adc	r18, r18
    5d4a:	74 9f       	mul	r23, r20
    5d4c:	33 27       	eor	r19, r19
    5d4e:	a0 0d       	add	r26, r0
    5d50:	61 1d       	adc	r22, r1
    5d52:	23 1f       	adc	r18, r19
    5d54:	84 9f       	mul	r24, r20
    5d56:	60 0d       	add	r22, r0
    5d58:	21 1d       	adc	r18, r1
    5d5a:	82 2f       	mov	r24, r18
    5d5c:	76 2f       	mov	r23, r22
    5d5e:	6a 2f       	mov	r22, r26
    5d60:	11 24       	eor	r1, r1
    5d62:	9f 57       	subi	r25, 0x7F	; 127
    5d64:	50 40       	sbci	r21, 0x00	; 0
    5d66:	8a f0       	brmi	.+34     	; 0x5d8a <__mulsf3_pse+0x84>
    5d68:	e1 f0       	breq	.+56     	; 0x5da2 <__mulsf3_pse+0x9c>
    5d6a:	88 23       	and	r24, r24
    5d6c:	4a f0       	brmi	.+18     	; 0x5d80 <__mulsf3_pse+0x7a>
    5d6e:	ee 0f       	add	r30, r30
    5d70:	ff 1f       	adc	r31, r31
    5d72:	bb 1f       	adc	r27, r27
    5d74:	66 1f       	adc	r22, r22
    5d76:	77 1f       	adc	r23, r23
    5d78:	88 1f       	adc	r24, r24
    5d7a:	91 50       	subi	r25, 0x01	; 1
    5d7c:	50 40       	sbci	r21, 0x00	; 0
    5d7e:	a9 f7       	brne	.-22     	; 0x5d6a <__mulsf3_pse+0x64>
    5d80:	9e 3f       	cpi	r25, 0xFE	; 254
    5d82:	51 05       	cpc	r21, r1
    5d84:	70 f0       	brcs	.+28     	; 0x5da2 <__mulsf3_pse+0x9c>
    5d86:	8d ce       	rjmp	.-742    	; 0x5aa2 <__fp_inf>
    5d88:	3c cf       	rjmp	.-392    	; 0x5c02 <__fp_szero>
    5d8a:	5f 3f       	cpi	r21, 0xFF	; 255
    5d8c:	ec f3       	brlt	.-6      	; 0x5d88 <__mulsf3_pse+0x82>
    5d8e:	98 3e       	cpi	r25, 0xE8	; 232
    5d90:	dc f3       	brlt	.-10     	; 0x5d88 <__mulsf3_pse+0x82>
    5d92:	86 95       	lsr	r24
    5d94:	77 95       	ror	r23
    5d96:	67 95       	ror	r22
    5d98:	b7 95       	ror	r27
    5d9a:	f7 95       	ror	r31
    5d9c:	e7 95       	ror	r30
    5d9e:	9f 5f       	subi	r25, 0xFF	; 255
    5da0:	c1 f7       	brne	.-16     	; 0x5d92 <__mulsf3_pse+0x8c>
    5da2:	fe 2b       	or	r31, r30
    5da4:	88 0f       	add	r24, r24
    5da6:	91 1d       	adc	r25, r1
    5da8:	96 95       	lsr	r25
    5daa:	87 95       	ror	r24
    5dac:	97 f9       	bld	r25, 7
    5dae:	08 95       	ret

00005db0 <round>:
    5db0:	f6 de       	rcall	.-532    	; 0x5b9e <__fp_splitA>
    5db2:	e0 f0       	brcs	.+56     	; 0x5dec <round+0x3c>
    5db4:	9e 37       	cpi	r25, 0x7E	; 126
    5db6:	d8 f0       	brcs	.+54     	; 0x5dee <round+0x3e>
    5db8:	96 39       	cpi	r25, 0x96	; 150
    5dba:	b8 f4       	brcc	.+46     	; 0x5dea <round+0x3a>
    5dbc:	9e 38       	cpi	r25, 0x8E	; 142
    5dbe:	48 f4       	brcc	.+18     	; 0x5dd2 <round+0x22>
    5dc0:	67 2f       	mov	r22, r23
    5dc2:	78 2f       	mov	r23, r24
    5dc4:	88 27       	eor	r24, r24
    5dc6:	98 5f       	subi	r25, 0xF8	; 248
    5dc8:	f9 cf       	rjmp	.-14     	; 0x5dbc <round+0xc>
    5dca:	86 95       	lsr	r24
    5dcc:	77 95       	ror	r23
    5dce:	67 95       	ror	r22
    5dd0:	93 95       	inc	r25
    5dd2:	95 39       	cpi	r25, 0x95	; 149
    5dd4:	d0 f3       	brcs	.-12     	; 0x5dca <round+0x1a>
    5dd6:	b6 2f       	mov	r27, r22
    5dd8:	b1 70       	andi	r27, 0x01	; 1
    5dda:	6b 0f       	add	r22, r27
    5ddc:	71 1d       	adc	r23, r1
    5dde:	81 1d       	adc	r24, r1
    5de0:	20 f4       	brcc	.+8      	; 0x5dea <round+0x3a>
    5de2:	87 95       	ror	r24
    5de4:	77 95       	ror	r23
    5de6:	67 95       	ror	r22
    5de8:	93 95       	inc	r25
    5dea:	61 ce       	rjmp	.-830    	; 0x5aae <__fp_mintl>
    5dec:	7b ce       	rjmp	.-778    	; 0x5ae4 <__fp_mpack>
    5dee:	09 cf       	rjmp	.-494    	; 0x5c02 <__fp_szero>
    5df0:	11 f4       	brne	.+4      	; 0x5df6 <round+0x46>
    5df2:	0e f4       	brtc	.+2      	; 0x5df6 <round+0x46>
    5df4:	85 ce       	rjmp	.-758    	; 0x5b00 <__fp_nan>
    5df6:	76 ce       	rjmp	.-788    	; 0x5ae4 <__fp_mpack>

00005df8 <sqrt>:
    5df8:	d2 de       	rcall	.-604    	; 0x5b9e <__fp_splitA>
    5dfa:	d0 f3       	brcs	.-12     	; 0x5df0 <round+0x40>
    5dfc:	99 23       	and	r25, r25
    5dfe:	d9 f3       	breq	.-10     	; 0x5df6 <round+0x46>
    5e00:	ce f3       	brts	.-14     	; 0x5df4 <round+0x44>
    5e02:	9f 57       	subi	r25, 0x7F	; 127
    5e04:	55 0b       	sbc	r21, r21
    5e06:	87 ff       	sbrs	r24, 7
    5e08:	3f d0       	rcall	.+126    	; 0x5e88 <__fp_norm2>
    5e0a:	00 24       	eor	r0, r0
    5e0c:	a0 e6       	ldi	r26, 0x60	; 96
    5e0e:	40 ea       	ldi	r20, 0xA0	; 160
    5e10:	90 01       	movw	r18, r0
    5e12:	80 58       	subi	r24, 0x80	; 128
    5e14:	56 95       	lsr	r21
    5e16:	97 95       	ror	r25
    5e18:	28 f4       	brcc	.+10     	; 0x5e24 <sqrt+0x2c>
    5e1a:	80 5c       	subi	r24, 0xC0	; 192
    5e1c:	66 0f       	add	r22, r22
    5e1e:	77 1f       	adc	r23, r23
    5e20:	88 1f       	adc	r24, r24
    5e22:	20 f0       	brcs	.+8      	; 0x5e2c <sqrt+0x34>
    5e24:	26 17       	cp	r18, r22
    5e26:	37 07       	cpc	r19, r23
    5e28:	48 07       	cpc	r20, r24
    5e2a:	30 f4       	brcc	.+12     	; 0x5e38 <sqrt+0x40>
    5e2c:	62 1b       	sub	r22, r18
    5e2e:	73 0b       	sbc	r23, r19
    5e30:	84 0b       	sbc	r24, r20
    5e32:	20 29       	or	r18, r0
    5e34:	31 29       	or	r19, r1
    5e36:	4a 2b       	or	r20, r26
    5e38:	a6 95       	lsr	r26
    5e3a:	17 94       	ror	r1
    5e3c:	07 94       	ror	r0
    5e3e:	20 25       	eor	r18, r0
    5e40:	31 25       	eor	r19, r1
    5e42:	4a 27       	eor	r20, r26
    5e44:	58 f7       	brcc	.-42     	; 0x5e1c <sqrt+0x24>
    5e46:	66 0f       	add	r22, r22
    5e48:	77 1f       	adc	r23, r23
    5e4a:	88 1f       	adc	r24, r24
    5e4c:	20 f0       	brcs	.+8      	; 0x5e56 <sqrt+0x5e>
    5e4e:	26 17       	cp	r18, r22
    5e50:	37 07       	cpc	r19, r23
    5e52:	48 07       	cpc	r20, r24
    5e54:	30 f4       	brcc	.+12     	; 0x5e62 <sqrt+0x6a>
    5e56:	62 0b       	sbc	r22, r18
    5e58:	73 0b       	sbc	r23, r19
    5e5a:	84 0b       	sbc	r24, r20
    5e5c:	20 0d       	add	r18, r0
    5e5e:	31 1d       	adc	r19, r1
    5e60:	41 1d       	adc	r20, r1
    5e62:	a0 95       	com	r26
    5e64:	81 f7       	brne	.-32     	; 0x5e46 <sqrt+0x4e>
    5e66:	b9 01       	movw	r22, r18
    5e68:	84 2f       	mov	r24, r20
    5e6a:	91 58       	subi	r25, 0x81	; 129
    5e6c:	88 0f       	add	r24, r24
    5e6e:	96 95       	lsr	r25
    5e70:	87 95       	ror	r24
    5e72:	08 95       	ret

00005e74 <square>:
    5e74:	9b 01       	movw	r18, r22
    5e76:	ac 01       	movw	r20, r24
    5e78:	38 cf       	rjmp	.-400    	; 0x5cea <__mulsf3>

00005e7a <trunc>:
    5e7a:	ab de       	rcall	.-682    	; 0x5bd2 <__fp_trunc>
    5e7c:	20 f0       	brcs	.+8      	; 0x5e86 <trunc+0xc>
    5e7e:	9f 37       	cpi	r25, 0x7F	; 127
    5e80:	08 f4       	brcc	.+2      	; 0x5e84 <trunc+0xa>
    5e82:	bf ce       	rjmp	.-642    	; 0x5c02 <__fp_szero>
    5e84:	14 ce       	rjmp	.-984    	; 0x5aae <__fp_mintl>
    5e86:	2e ce       	rjmp	.-932    	; 0x5ae4 <__fp_mpack>

00005e88 <__fp_norm2>:
    5e88:	91 50       	subi	r25, 0x01	; 1
    5e8a:	50 40       	sbci	r21, 0x00	; 0
    5e8c:	66 0f       	add	r22, r22
    5e8e:	77 1f       	adc	r23, r23
    5e90:	88 1f       	adc	r24, r24
    5e92:	d2 f7       	brpl	.-12     	; 0x5e88 <__fp_norm2>
    5e94:	08 95       	ret

00005e96 <__mulsi3>:
    5e96:	62 9f       	mul	r22, r18
    5e98:	d0 01       	movw	r26, r0
    5e9a:	73 9f       	mul	r23, r19
    5e9c:	f0 01       	movw	r30, r0
    5e9e:	82 9f       	mul	r24, r18
    5ea0:	e0 0d       	add	r30, r0
    5ea2:	f1 1d       	adc	r31, r1
    5ea4:	64 9f       	mul	r22, r20
    5ea6:	e0 0d       	add	r30, r0
    5ea8:	f1 1d       	adc	r31, r1
    5eaa:	92 9f       	mul	r25, r18
    5eac:	f0 0d       	add	r31, r0
    5eae:	83 9f       	mul	r24, r19
    5eb0:	f0 0d       	add	r31, r0
    5eb2:	74 9f       	mul	r23, r20
    5eb4:	f0 0d       	add	r31, r0
    5eb6:	65 9f       	mul	r22, r21
    5eb8:	f0 0d       	add	r31, r0
    5eba:	99 27       	eor	r25, r25
    5ebc:	72 9f       	mul	r23, r18
    5ebe:	b0 0d       	add	r27, r0
    5ec0:	e1 1d       	adc	r30, r1
    5ec2:	f9 1f       	adc	r31, r25
    5ec4:	63 9f       	mul	r22, r19
    5ec6:	b0 0d       	add	r27, r0
    5ec8:	e1 1d       	adc	r30, r1
    5eca:	f9 1f       	adc	r31, r25
    5ecc:	bd 01       	movw	r22, r26
    5ece:	cf 01       	movw	r24, r30
    5ed0:	11 24       	eor	r1, r1
    5ed2:	08 95       	ret

00005ed4 <__divmodhi4>:
    5ed4:	97 fb       	bst	r25, 7
    5ed6:	09 2e       	mov	r0, r25
    5ed8:	07 26       	eor	r0, r23
    5eda:	0a d0       	rcall	.+20     	; 0x5ef0 <__divmodhi4_neg1>
    5edc:	77 fd       	sbrc	r23, 7
    5ede:	04 d0       	rcall	.+8      	; 0x5ee8 <__divmodhi4_neg2>
    5ee0:	49 d0       	rcall	.+146    	; 0x5f74 <__udivmodhi4>
    5ee2:	06 d0       	rcall	.+12     	; 0x5ef0 <__divmodhi4_neg1>
    5ee4:	00 20       	and	r0, r0
    5ee6:	1a f4       	brpl	.+6      	; 0x5eee <__divmodhi4_exit>

00005ee8 <__divmodhi4_neg2>:
    5ee8:	70 95       	com	r23
    5eea:	61 95       	neg	r22
    5eec:	7f 4f       	sbci	r23, 0xFF	; 255

00005eee <__divmodhi4_exit>:
    5eee:	08 95       	ret

00005ef0 <__divmodhi4_neg1>:
    5ef0:	f6 f7       	brtc	.-4      	; 0x5eee <__divmodhi4_exit>
    5ef2:	90 95       	com	r25
    5ef4:	81 95       	neg	r24
    5ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef8:	08 95       	ret

00005efa <__udivmodsi4>:
    5efa:	a1 e2       	ldi	r26, 0x21	; 33
    5efc:	1a 2e       	mov	r1, r26
    5efe:	aa 1b       	sub	r26, r26
    5f00:	bb 1b       	sub	r27, r27
    5f02:	fd 01       	movw	r30, r26
    5f04:	0d c0       	rjmp	.+26     	; 0x5f20 <__udivmodsi4_ep>

00005f06 <__udivmodsi4_loop>:
    5f06:	aa 1f       	adc	r26, r26
    5f08:	bb 1f       	adc	r27, r27
    5f0a:	ee 1f       	adc	r30, r30
    5f0c:	ff 1f       	adc	r31, r31
    5f0e:	a2 17       	cp	r26, r18
    5f10:	b3 07       	cpc	r27, r19
    5f12:	e4 07       	cpc	r30, r20
    5f14:	f5 07       	cpc	r31, r21
    5f16:	20 f0       	brcs	.+8      	; 0x5f20 <__udivmodsi4_ep>
    5f18:	a2 1b       	sub	r26, r18
    5f1a:	b3 0b       	sbc	r27, r19
    5f1c:	e4 0b       	sbc	r30, r20
    5f1e:	f5 0b       	sbc	r31, r21

00005f20 <__udivmodsi4_ep>:
    5f20:	66 1f       	adc	r22, r22
    5f22:	77 1f       	adc	r23, r23
    5f24:	88 1f       	adc	r24, r24
    5f26:	99 1f       	adc	r25, r25
    5f28:	1a 94       	dec	r1
    5f2a:	69 f7       	brne	.-38     	; 0x5f06 <__udivmodsi4_loop>
    5f2c:	60 95       	com	r22
    5f2e:	70 95       	com	r23
    5f30:	80 95       	com	r24
    5f32:	90 95       	com	r25
    5f34:	9b 01       	movw	r18, r22
    5f36:	ac 01       	movw	r20, r24
    5f38:	bd 01       	movw	r22, r26
    5f3a:	cf 01       	movw	r24, r30
    5f3c:	08 95       	ret

00005f3e <__divmodsi4>:
    5f3e:	97 fb       	bst	r25, 7
    5f40:	09 2e       	mov	r0, r25
    5f42:	05 26       	eor	r0, r21
    5f44:	0e d0       	rcall	.+28     	; 0x5f62 <__divmodsi4_neg1>
    5f46:	57 fd       	sbrc	r21, 7
    5f48:	04 d0       	rcall	.+8      	; 0x5f52 <__divmodsi4_neg2>
    5f4a:	d7 df       	rcall	.-82     	; 0x5efa <__udivmodsi4>
    5f4c:	0a d0       	rcall	.+20     	; 0x5f62 <__divmodsi4_neg1>
    5f4e:	00 1c       	adc	r0, r0
    5f50:	38 f4       	brcc	.+14     	; 0x5f60 <__divmodsi4_exit>

00005f52 <__divmodsi4_neg2>:
    5f52:	50 95       	com	r21
    5f54:	40 95       	com	r20
    5f56:	30 95       	com	r19
    5f58:	21 95       	neg	r18
    5f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f5c:	4f 4f       	sbci	r20, 0xFF	; 255
    5f5e:	5f 4f       	sbci	r21, 0xFF	; 255

00005f60 <__divmodsi4_exit>:
    5f60:	08 95       	ret

00005f62 <__divmodsi4_neg1>:
    5f62:	f6 f7       	brtc	.-4      	; 0x5f60 <__divmodsi4_exit>
    5f64:	90 95       	com	r25
    5f66:	80 95       	com	r24
    5f68:	70 95       	com	r23
    5f6a:	61 95       	neg	r22
    5f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f70:	9f 4f       	sbci	r25, 0xFF	; 255
    5f72:	08 95       	ret

00005f74 <__udivmodhi4>:
    5f74:	aa 1b       	sub	r26, r26
    5f76:	bb 1b       	sub	r27, r27
    5f78:	51 e1       	ldi	r21, 0x11	; 17
    5f7a:	07 c0       	rjmp	.+14     	; 0x5f8a <__udivmodhi4_ep>

00005f7c <__udivmodhi4_loop>:
    5f7c:	aa 1f       	adc	r26, r26
    5f7e:	bb 1f       	adc	r27, r27
    5f80:	a6 17       	cp	r26, r22
    5f82:	b7 07       	cpc	r27, r23
    5f84:	10 f0       	brcs	.+4      	; 0x5f8a <__udivmodhi4_ep>
    5f86:	a6 1b       	sub	r26, r22
    5f88:	b7 0b       	sbc	r27, r23

00005f8a <__udivmodhi4_ep>:
    5f8a:	88 1f       	adc	r24, r24
    5f8c:	99 1f       	adc	r25, r25
    5f8e:	5a 95       	dec	r21
    5f90:	a9 f7       	brne	.-22     	; 0x5f7c <__udivmodhi4_loop>
    5f92:	80 95       	com	r24
    5f94:	90 95       	com	r25
    5f96:	bc 01       	movw	r22, r24
    5f98:	cd 01       	movw	r24, r26
    5f9a:	08 95       	ret

00005f9c <do_rand>:
    5f9c:	af 92       	push	r10
    5f9e:	bf 92       	push	r11
    5fa0:	cf 92       	push	r12
    5fa2:	df 92       	push	r13
    5fa4:	ef 92       	push	r14
    5fa6:	ff 92       	push	r15
    5fa8:	0f 93       	push	r16
    5faa:	1f 93       	push	r17
    5fac:	cf 93       	push	r28
    5fae:	df 93       	push	r29
    5fb0:	ec 01       	movw	r28, r24
    5fb2:	a8 80       	ld	r10, Y
    5fb4:	b9 80       	ldd	r11, Y+1	; 0x01
    5fb6:	ca 80       	ldd	r12, Y+2	; 0x02
    5fb8:	db 80       	ldd	r13, Y+3	; 0x03
    5fba:	a1 14       	cp	r10, r1
    5fbc:	b1 04       	cpc	r11, r1
    5fbe:	c1 04       	cpc	r12, r1
    5fc0:	d1 04       	cpc	r13, r1
    5fc2:	41 f4       	brne	.+16     	; 0x5fd4 <do_rand+0x38>
    5fc4:	84 e2       	ldi	r24, 0x24	; 36
    5fc6:	a8 2e       	mov	r10, r24
    5fc8:	89 ed       	ldi	r24, 0xD9	; 217
    5fca:	b8 2e       	mov	r11, r24
    5fcc:	8b e5       	ldi	r24, 0x5B	; 91
    5fce:	c8 2e       	mov	r12, r24
    5fd0:	87 e0       	ldi	r24, 0x07	; 7
    5fd2:	d8 2e       	mov	r13, r24
    5fd4:	c6 01       	movw	r24, r12
    5fd6:	b5 01       	movw	r22, r10
    5fd8:	2d e1       	ldi	r18, 0x1D	; 29
    5fda:	33 ef       	ldi	r19, 0xF3	; 243
    5fdc:	41 e0       	ldi	r20, 0x01	; 1
    5fde:	50 e0       	ldi	r21, 0x00	; 0
    5fe0:	0e 94 9f 2f 	call	0x5f3e	; 0x5f3e <__divmodsi4>
    5fe4:	27 ea       	ldi	r18, 0xA7	; 167
    5fe6:	31 e4       	ldi	r19, 0x41	; 65
    5fe8:	40 e0       	ldi	r20, 0x00	; 0
    5fea:	50 e0       	ldi	r21, 0x00	; 0
    5fec:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__mulsi3>
    5ff0:	7b 01       	movw	r14, r22
    5ff2:	8c 01       	movw	r16, r24
    5ff4:	c6 01       	movw	r24, r12
    5ff6:	b5 01       	movw	r22, r10
    5ff8:	2d e1       	ldi	r18, 0x1D	; 29
    5ffa:	33 ef       	ldi	r19, 0xF3	; 243
    5ffc:	41 e0       	ldi	r20, 0x01	; 1
    5ffe:	50 e0       	ldi	r21, 0x00	; 0
    6000:	0e 94 9f 2f 	call	0x5f3e	; 0x5f3e <__divmodsi4>
    6004:	ca 01       	movw	r24, r20
    6006:	b9 01       	movw	r22, r18
    6008:	2c ee       	ldi	r18, 0xEC	; 236
    600a:	34 ef       	ldi	r19, 0xF4	; 244
    600c:	4f ef       	ldi	r20, 0xFF	; 255
    600e:	5f ef       	ldi	r21, 0xFF	; 255
    6010:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__mulsi3>
    6014:	6e 0d       	add	r22, r14
    6016:	7f 1d       	adc	r23, r15
    6018:	80 1f       	adc	r24, r16
    601a:	91 1f       	adc	r25, r17
    601c:	97 ff       	sbrs	r25, 7
    601e:	04 c0       	rjmp	.+8      	; 0x6028 <do_rand+0x8c>
    6020:	61 50       	subi	r22, 0x01	; 1
    6022:	70 40       	sbci	r23, 0x00	; 0
    6024:	80 40       	sbci	r24, 0x00	; 0
    6026:	90 48       	sbci	r25, 0x80	; 128
    6028:	68 83       	st	Y, r22
    602a:	79 83       	std	Y+1, r23	; 0x01
    602c:	8a 83       	std	Y+2, r24	; 0x02
    602e:	9b 83       	std	Y+3, r25	; 0x03
    6030:	9b 01       	movw	r18, r22
    6032:	3f 77       	andi	r19, 0x7F	; 127
    6034:	c9 01       	movw	r24, r18
    6036:	df 91       	pop	r29
    6038:	cf 91       	pop	r28
    603a:	1f 91       	pop	r17
    603c:	0f 91       	pop	r16
    603e:	ff 90       	pop	r15
    6040:	ef 90       	pop	r14
    6042:	df 90       	pop	r13
    6044:	cf 90       	pop	r12
    6046:	bf 90       	pop	r11
    6048:	af 90       	pop	r10
    604a:	08 95       	ret

0000604c <rand_r>:
    604c:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <do_rand>
    6050:	08 95       	ret

00006052 <rand>:
    6052:	81 e0       	ldi	r24, 0x01	; 1
    6054:	92 e0       	ldi	r25, 0x02	; 2
    6056:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <do_rand>
    605a:	08 95       	ret

0000605c <srand>:
    605c:	a0 e0       	ldi	r26, 0x00	; 0
    605e:	b0 e0       	ldi	r27, 0x00	; 0
    6060:	80 93 01 02 	sts	0x0201, r24
    6064:	90 93 02 02 	sts	0x0202, r25
    6068:	a0 93 03 02 	sts	0x0203, r26
    606c:	b0 93 04 02 	sts	0x0204, r27
    6070:	08 95       	ret

00006072 <strtod>:
    6072:	8f 92       	push	r8
    6074:	9f 92       	push	r9
    6076:	af 92       	push	r10
    6078:	bf 92       	push	r11
    607a:	cf 92       	push	r12
    607c:	df 92       	push	r13
    607e:	ef 92       	push	r14
    6080:	ff 92       	push	r15
    6082:	0f 93       	push	r16
    6084:	1f 93       	push	r17
    6086:	cf 93       	push	r28
    6088:	df 93       	push	r29
    608a:	ec 01       	movw	r28, r24
    608c:	5b 01       	movw	r10, r22
    608e:	61 15       	cp	r22, r1
    6090:	71 05       	cpc	r23, r1
    6092:	19 f0       	breq	.+6      	; 0x609a <strtod+0x28>
    6094:	fb 01       	movw	r30, r22
    6096:	91 83       	std	Z+1, r25	; 0x01
    6098:	80 83       	st	Z, r24
    609a:	f9 90       	ld	r15, Y+
    609c:	8f 2d       	mov	r24, r15
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	0e 94 a7 31 	call	0x634e	; 0x634e <isspace>
    60a4:	89 2b       	or	r24, r25
    60a6:	c9 f7       	brne	.-14     	; 0x609a <strtod+0x28>
    60a8:	fd e2       	ldi	r31, 0x2D	; 45
    60aa:	ff 16       	cp	r15, r31
    60ac:	21 f4       	brne	.+8      	; 0x60b6 <strtod+0x44>
    60ae:	f9 90       	ld	r15, Y+
    60b0:	ee 24       	eor	r14, r14
    60b2:	e3 94       	inc	r14
    60b4:	05 c0       	rjmp	.+10     	; 0x60c0 <strtod+0x4e>
    60b6:	2b e2       	ldi	r18, 0x2B	; 43
    60b8:	f2 16       	cp	r15, r18
    60ba:	09 f4       	brne	.+2      	; 0x60be <strtod+0x4c>
    60bc:	f9 90       	ld	r15, Y+
    60be:	ee 24       	eor	r14, r14
    60c0:	8e 01       	movw	r16, r28
    60c2:	01 50       	subi	r16, 0x01	; 1
    60c4:	10 40       	sbci	r17, 0x00	; 0
    60c6:	c8 01       	movw	r24, r16
    60c8:	61 ef       	ldi	r22, 0xF1	; 241
    60ca:	75 e0       	ldi	r23, 0x05	; 5
    60cc:	43 e0       	ldi	r20, 0x03	; 3
    60ce:	50 e0       	ldi	r21, 0x00	; 0
    60d0:	0e 94 af 31 	call	0x635e	; 0x635e <strncasecmp_P>
    60d4:	89 2b       	or	r24, r25
    60d6:	01 f5       	brne	.+64     	; 0x6118 <strtod+0xa6>
    60d8:	8e 01       	movw	r16, r28
    60da:	0e 5f       	subi	r16, 0xFE	; 254
    60dc:	1f 4f       	sbci	r17, 0xFF	; 255
    60de:	c8 01       	movw	r24, r16
    60e0:	64 ef       	ldi	r22, 0xF4	; 244
    60e2:	75 e0       	ldi	r23, 0x05	; 5
    60e4:	45 e0       	ldi	r20, 0x05	; 5
    60e6:	50 e0       	ldi	r21, 0x00	; 0
    60e8:	0e 94 af 31 	call	0x635e	; 0x635e <strncasecmp_P>
    60ec:	89 2b       	or	r24, r25
    60ee:	19 f4       	brne	.+6      	; 0x60f6 <strtod+0x84>
    60f0:	8e 01       	movw	r16, r28
    60f2:	09 5f       	subi	r16, 0xF9	; 249
    60f4:	1f 4f       	sbci	r17, 0xFF	; 255
    60f6:	a1 14       	cp	r10, r1
    60f8:	b1 04       	cpc	r11, r1
    60fa:	19 f0       	breq	.+6      	; 0x6102 <strtod+0x90>
    60fc:	f5 01       	movw	r30, r10
    60fe:	11 83       	std	Z+1, r17	; 0x01
    6100:	00 83       	st	Z, r16
    6102:	e0 fc       	sbrc	r14, 0
    6104:	04 c0       	rjmp	.+8      	; 0x610e <strtod+0x9c>
    6106:	70 e0       	ldi	r23, 0x00	; 0
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	80 e8       	ldi	r24, 0x80	; 128
    610c:	14 c0       	rjmp	.+40     	; 0x6136 <strtod+0xc4>
    610e:	70 e0       	ldi	r23, 0x00	; 0
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	80 e8       	ldi	r24, 0x80	; 128
    6114:	6f ef       	ldi	r22, 0xFF	; 255
    6116:	08 c1       	rjmp	.+528    	; 0x6328 <strtod+0x2b6>
    6118:	c8 01       	movw	r24, r16
    611a:	69 ef       	ldi	r22, 0xF9	; 249
    611c:	75 e0       	ldi	r23, 0x05	; 5
    611e:	43 e0       	ldi	r20, 0x03	; 3
    6120:	50 e0       	ldi	r21, 0x00	; 0
    6122:	0e 94 af 31 	call	0x635e	; 0x635e <strncasecmp_P>
    6126:	89 2b       	or	r24, r25
    6128:	69 f4       	brne	.+26     	; 0x6144 <strtod+0xd2>
    612a:	a1 14       	cp	r10, r1
    612c:	b1 04       	cpc	r11, r1
    612e:	29 f4       	brne	.+10     	; 0x613a <strtod+0xc8>
    6130:	70 e0       	ldi	r23, 0x00	; 0
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	80 ec       	ldi	r24, 0xC0	; 192
    6136:	6f e7       	ldi	r22, 0x7F	; 127
    6138:	f7 c0       	rjmp	.+494    	; 0x6328 <strtod+0x2b6>
    613a:	22 96       	adiw	r28, 0x02	; 2
    613c:	f5 01       	movw	r30, r10
    613e:	d1 83       	std	Z+1, r29	; 0x01
    6140:	c0 83       	st	Z, r28
    6142:	f6 cf       	rjmp	.-20     	; 0x6130 <strtod+0xbe>
    6144:	88 24       	eor	r8, r8
    6146:	99 24       	eor	r9, r9
    6148:	40 e0       	ldi	r20, 0x00	; 0
    614a:	50 e0       	ldi	r21, 0x00	; 0
    614c:	60 e0       	ldi	r22, 0x00	; 0
    614e:	70 e0       	ldi	r23, 0x00	; 0
    6150:	ef 2d       	mov	r30, r15
    6152:	e0 53       	subi	r30, 0x30	; 48
    6154:	ea 30       	cpi	r30, 0x0A	; 10
    6156:	a0 f5       	brcc	.+104    	; 0x61c0 <strtod+0x14e>
    6158:	f2 e0       	ldi	r31, 0x02	; 2
    615a:	ef 2a       	or	r14, r31
    615c:	8e 2d       	mov	r24, r14
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	9c 01       	movw	r18, r24
    6162:	28 70       	andi	r18, 0x08	; 8
    6164:	30 70       	andi	r19, 0x00	; 0
    6166:	e2 fe       	sbrs	r14, 2
    6168:	06 c0       	rjmp	.+12     	; 0x6176 <strtod+0x104>
    616a:	23 2b       	or	r18, r19
    616c:	79 f5       	brne	.+94     	; 0x61cc <strtod+0x15a>
    616e:	08 94       	sec
    6170:	81 1c       	adc	r8, r1
    6172:	91 1c       	adc	r9, r1
    6174:	2b c0       	rjmp	.+86     	; 0x61cc <strtod+0x15a>
    6176:	23 2b       	or	r18, r19
    6178:	19 f0       	breq	.+6      	; 0x6180 <strtod+0x10e>
    617a:	08 94       	sec
    617c:	81 08       	sbc	r8, r1
    617e:	91 08       	sbc	r9, r1
    6180:	db 01       	movw	r26, r22
    6182:	ca 01       	movw	r24, r20
    6184:	12 e0       	ldi	r17, 0x02	; 2
    6186:	88 0f       	add	r24, r24
    6188:	99 1f       	adc	r25, r25
    618a:	aa 1f       	adc	r26, r26
    618c:	bb 1f       	adc	r27, r27
    618e:	1a 95       	dec	r17
    6190:	d1 f7       	brne	.-12     	; 0x6186 <strtod+0x114>
    6192:	48 0f       	add	r20, r24
    6194:	59 1f       	adc	r21, r25
    6196:	6a 1f       	adc	r22, r26
    6198:	7b 1f       	adc	r23, r27
    619a:	44 0f       	add	r20, r20
    619c:	55 1f       	adc	r21, r21
    619e:	66 1f       	adc	r22, r22
    61a0:	77 1f       	adc	r23, r23
    61a2:	4e 0f       	add	r20, r30
    61a4:	51 1d       	adc	r21, r1
    61a6:	61 1d       	adc	r22, r1
    61a8:	71 1d       	adc	r23, r1
    61aa:	48 39       	cpi	r20, 0x98	; 152
    61ac:	29 e9       	ldi	r18, 0x99	; 153
    61ae:	52 07       	cpc	r21, r18
    61b0:	29 e9       	ldi	r18, 0x99	; 153
    61b2:	62 07       	cpc	r22, r18
    61b4:	29 e1       	ldi	r18, 0x19	; 25
    61b6:	72 07       	cpc	r23, r18
    61b8:	48 f0       	brcs	.+18     	; 0x61cc <strtod+0x15a>
    61ba:	84 e0       	ldi	r24, 0x04	; 4
    61bc:	e8 2a       	or	r14, r24
    61be:	06 c0       	rjmp	.+12     	; 0x61cc <strtod+0x15a>
    61c0:	ee 3f       	cpi	r30, 0xFE	; 254
    61c2:	31 f4       	brne	.+12     	; 0x61d0 <strtod+0x15e>
    61c4:	e3 fc       	sbrc	r14, 3
    61c6:	39 c0       	rjmp	.+114    	; 0x623a <strtod+0x1c8>
    61c8:	98 e0       	ldi	r25, 0x08	; 8
    61ca:	e9 2a       	or	r14, r25
    61cc:	f9 90       	ld	r15, Y+
    61ce:	c0 cf       	rjmp	.-128    	; 0x6150 <strtod+0xde>
    61d0:	e5 33       	cpi	r30, 0x35	; 53
    61d2:	11 f0       	breq	.+4      	; 0x61d8 <strtod+0x166>
    61d4:	e5 31       	cpi	r30, 0x15	; 21
    61d6:	89 f5       	brne	.+98     	; 0x623a <strtod+0x1c8>
    61d8:	29 91       	ld	r18, Y+
    61da:	2d 32       	cpi	r18, 0x2D	; 45
    61dc:	19 f4       	brne	.+6      	; 0x61e4 <strtod+0x172>
    61de:	e0 e1       	ldi	r30, 0x10	; 16
    61e0:	ee 2a       	or	r14, r30
    61e2:	05 c0       	rjmp	.+10     	; 0x61ee <strtod+0x17c>
    61e4:	2b 32       	cpi	r18, 0x2B	; 43
    61e6:	19 f0       	breq	.+6      	; 0x61ee <strtod+0x17c>
    61e8:	81 e0       	ldi	r24, 0x01	; 1
    61ea:	90 e0       	ldi	r25, 0x00	; 0
    61ec:	03 c0       	rjmp	.+6      	; 0x61f4 <strtod+0x182>
    61ee:	29 91       	ld	r18, Y+
    61f0:	82 e0       	ldi	r24, 0x02	; 2
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	e2 2f       	mov	r30, r18
    61f6:	e0 53       	subi	r30, 0x30	; 48
    61f8:	ea 30       	cpi	r30, 0x0A	; 10
    61fa:	18 f0       	brcs	.+6      	; 0x6202 <strtod+0x190>
    61fc:	c8 1b       	sub	r28, r24
    61fe:	d9 0b       	sbc	r29, r25
    6200:	1c c0       	rjmp	.+56     	; 0x623a <strtod+0x1c8>
    6202:	20 e0       	ldi	r18, 0x00	; 0
    6204:	30 e0       	ldi	r19, 0x00	; 0
    6206:	fc e0       	ldi	r31, 0x0C	; 12
    6208:	20 38       	cpi	r18, 0x80	; 128
    620a:	3f 07       	cpc	r19, r31
    620c:	5c f4       	brge	.+22     	; 0x6224 <strtod+0x1b2>
    620e:	c9 01       	movw	r24, r18
    6210:	88 0f       	add	r24, r24
    6212:	99 1f       	adc	r25, r25
    6214:	88 0f       	add	r24, r24
    6216:	99 1f       	adc	r25, r25
    6218:	28 0f       	add	r18, r24
    621a:	39 1f       	adc	r19, r25
    621c:	22 0f       	add	r18, r18
    621e:	33 1f       	adc	r19, r19
    6220:	2e 0f       	add	r18, r30
    6222:	31 1d       	adc	r19, r1
    6224:	e9 91       	ld	r30, Y+
    6226:	e0 53       	subi	r30, 0x30	; 48
    6228:	ea 30       	cpi	r30, 0x0A	; 10
    622a:	68 f3       	brcs	.-38     	; 0x6206 <strtod+0x194>
    622c:	e4 fe       	sbrs	r14, 4
    622e:	03 c0       	rjmp	.+6      	; 0x6236 <strtod+0x1c4>
    6230:	30 95       	com	r19
    6232:	21 95       	neg	r18
    6234:	3f 4f       	sbci	r19, 0xFF	; 255
    6236:	82 0e       	add	r8, r18
    6238:	93 1e       	adc	r9, r19
    623a:	ce 2c       	mov	r12, r14
    623c:	dd 24       	eor	r13, r13
    623e:	e1 fe       	sbrs	r14, 1
    6240:	07 c0       	rjmp	.+14     	; 0x6250 <strtod+0x1de>
    6242:	a1 14       	cp	r10, r1
    6244:	b1 04       	cpc	r11, r1
    6246:	21 f0       	breq	.+8      	; 0x6250 <strtod+0x1de>
    6248:	21 97       	sbiw	r28, 0x01	; 1
    624a:	f5 01       	movw	r30, r10
    624c:	d1 83       	std	Z+1, r29	; 0x01
    624e:	c0 83       	st	Z, r28
    6250:	cb 01       	movw	r24, r22
    6252:	ba 01       	movw	r22, r20
    6254:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <__floatunsisf>
    6258:	7b 01       	movw	r14, r22
    625a:	8c 01       	movw	r16, r24
    625c:	f3 e0       	ldi	r31, 0x03	; 3
    625e:	cf 22       	and	r12, r31
    6260:	dd 24       	eor	r13, r13
    6262:	23 e0       	ldi	r18, 0x03	; 3
    6264:	c2 16       	cp	r12, r18
    6266:	d1 04       	cpc	r13, r1
    6268:	21 f4       	brne	.+8      	; 0x6272 <strtod+0x200>
    626a:	17 fb       	bst	r17, 7
    626c:	10 95       	com	r17
    626e:	17 f9       	bld	r17, 7
    6270:	10 95       	com	r17
    6272:	57 01       	movw	r10, r14
    6274:	68 01       	movw	r12, r16
    6276:	c8 01       	movw	r24, r16
    6278:	b7 01       	movw	r22, r14
    627a:	20 e0       	ldi	r18, 0x00	; 0
    627c:	30 e0       	ldi	r19, 0x00	; 0
    627e:	40 e0       	ldi	r20, 0x00	; 0
    6280:	50 e0       	ldi	r21, 0x00	; 0
    6282:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
    6286:	88 23       	and	r24, r24
    6288:	09 f4       	brne	.+2      	; 0x628c <strtod+0x21a>
    628a:	4a c0       	rjmp	.+148    	; 0x6320 <strtod+0x2ae>
    628c:	97 fe       	sbrs	r9, 7
    628e:	0d c0       	rjmp	.+26     	; 0x62aa <strtod+0x238>
    6290:	20 e1       	ldi	r18, 0x10	; 16
    6292:	e2 2e       	mov	r14, r18
    6294:	26 e0       	ldi	r18, 0x06	; 6
    6296:	f2 2e       	mov	r15, r18
    6298:	90 94       	com	r9
    629a:	81 94       	neg	r8
    629c:	91 08       	sbc	r9, r1
    629e:	93 94       	inc	r9
    62a0:	c0 e2       	ldi	r28, 0x20	; 32
    62a2:	d0 e0       	ldi	r29, 0x00	; 0
    62a4:	00 e0       	ldi	r16, 0x00	; 0
    62a6:	10 e0       	ldi	r17, 0x00	; 0
    62a8:	12 c0       	rjmp	.+36     	; 0x62ce <strtod+0x25c>
    62aa:	98 e2       	ldi	r25, 0x28	; 40
    62ac:	e9 2e       	mov	r14, r25
    62ae:	96 e0       	ldi	r25, 0x06	; 6
    62b0:	f9 2e       	mov	r15, r25
    62b2:	f6 cf       	rjmp	.-20     	; 0x62a0 <strtod+0x22e>
    62b4:	f7 01       	movw	r30, r14
    62b6:	25 91       	lpm	r18, Z+
    62b8:	35 91       	lpm	r19, Z+
    62ba:	45 91       	lpm	r20, Z+
    62bc:	54 91       	lpm	r21, Z+
    62be:	c6 01       	movw	r24, r12
    62c0:	b5 01       	movw	r22, r10
    62c2:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__mulsf3>
    62c6:	5b 01       	movw	r10, r22
    62c8:	6c 01       	movw	r12, r24
    62ca:	8c 1a       	sub	r8, r28
    62cc:	9d 0a       	sbc	r9, r29
    62ce:	8c 16       	cp	r8, r28
    62d0:	9d 06       	cpc	r9, r29
    62d2:	84 f7       	brge	.-32     	; 0x62b4 <strtod+0x242>
    62d4:	d5 95       	asr	r29
    62d6:	c7 95       	ror	r28
    62d8:	0f 5f       	subi	r16, 0xFF	; 255
    62da:	1f 4f       	sbci	r17, 0xFF	; 255
    62dc:	06 30       	cpi	r16, 0x06	; 6
    62de:	11 05       	cpc	r17, r1
    62e0:	29 f0       	breq	.+10     	; 0x62ec <strtod+0x27a>
    62e2:	8c ef       	ldi	r24, 0xFC	; 252
    62e4:	9f ef       	ldi	r25, 0xFF	; 255
    62e6:	e8 0e       	add	r14, r24
    62e8:	f9 1e       	adc	r15, r25
    62ea:	f1 cf       	rjmp	.-30     	; 0x62ce <strtod+0x25c>
    62ec:	c5 01       	movw	r24, r10
    62ee:	d6 01       	movw	r26, r12
    62f0:	7c 01       	movw	r14, r24
    62f2:	8d 01       	movw	r16, r26
    62f4:	8c 2d       	mov	r24, r12
    62f6:	88 0f       	add	r24, r24
    62f8:	8d 2d       	mov	r24, r13
    62fa:	88 1f       	adc	r24, r24
    62fc:	8f 3f       	cpi	r24, 0xFF	; 255
    62fe:	51 f0       	breq	.+20     	; 0x6314 <strtod+0x2a2>
    6300:	c6 01       	movw	r24, r12
    6302:	b5 01       	movw	r22, r10
    6304:	20 e0       	ldi	r18, 0x00	; 0
    6306:	30 e0       	ldi	r19, 0x00	; 0
    6308:	40 e0       	ldi	r20, 0x00	; 0
    630a:	50 e0       	ldi	r21, 0x00	; 0
    630c:	0e 94 40 2c 	call	0x5880	; 0x5880 <__cmpsf2>
    6310:	88 23       	and	r24, r24
    6312:	31 f4       	brne	.+12     	; 0x6320 <strtod+0x2ae>
    6314:	82 e2       	ldi	r24, 0x22	; 34
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	90 93 00 07 	sts	0x0700, r25
    631c:	80 93 ff 06 	sts	0x06FF, r24
    6320:	7e 2d       	mov	r23, r14
    6322:	9f 2d       	mov	r25, r15
    6324:	80 2f       	mov	r24, r16
    6326:	61 2f       	mov	r22, r17
    6328:	27 2f       	mov	r18, r23
    632a:	39 2f       	mov	r19, r25
    632c:	48 2f       	mov	r20, r24
    632e:	56 2f       	mov	r21, r22
    6330:	b9 01       	movw	r22, r18
    6332:	ca 01       	movw	r24, r20
    6334:	df 91       	pop	r29
    6336:	cf 91       	pop	r28
    6338:	1f 91       	pop	r17
    633a:	0f 91       	pop	r16
    633c:	ff 90       	pop	r15
    633e:	ef 90       	pop	r14
    6340:	df 90       	pop	r13
    6342:	cf 90       	pop	r12
    6344:	bf 90       	pop	r11
    6346:	af 90       	pop	r10
    6348:	9f 90       	pop	r9
    634a:	8f 90       	pop	r8
    634c:	08 95       	ret

0000634e <isspace>:
    634e:	91 11       	cpse	r25, r1
    6350:	1e c0       	rjmp	.+60     	; 0x638e <__ctype_isfalse>
    6352:	80 32       	cpi	r24, 0x20	; 32
    6354:	19 f0       	breq	.+6      	; 0x635c <isspace+0xe>
    6356:	89 50       	subi	r24, 0x09	; 9
    6358:	85 50       	subi	r24, 0x05	; 5
    635a:	d0 f7       	brcc	.-12     	; 0x6350 <isspace+0x2>
    635c:	08 95       	ret

0000635e <strncasecmp_P>:
    635e:	fb 01       	movw	r30, r22
    6360:	dc 01       	movw	r26, r24
    6362:	41 50       	subi	r20, 0x01	; 1
    6364:	50 40       	sbci	r21, 0x00	; 0
    6366:	88 f0       	brcs	.+34     	; 0x638a <strncasecmp_P+0x2c>
    6368:	8d 91       	ld	r24, X+
    636a:	81 34       	cpi	r24, 0x41	; 65
    636c:	1c f0       	brlt	.+6      	; 0x6374 <strncasecmp_P+0x16>
    636e:	8b 35       	cpi	r24, 0x5B	; 91
    6370:	0c f4       	brge	.+2      	; 0x6374 <strncasecmp_P+0x16>
    6372:	80 5e       	subi	r24, 0xE0	; 224
    6374:	65 91       	lpm	r22, Z+
    6376:	61 34       	cpi	r22, 0x41	; 65
    6378:	1c f0       	brlt	.+6      	; 0x6380 <strncasecmp_P+0x22>
    637a:	6b 35       	cpi	r22, 0x5B	; 91
    637c:	0c f4       	brge	.+2      	; 0x6380 <strncasecmp_P+0x22>
    637e:	60 5e       	subi	r22, 0xE0	; 224
    6380:	86 1b       	sub	r24, r22
    6382:	61 11       	cpse	r22, r1
    6384:	71 f3       	breq	.-36     	; 0x6362 <strncasecmp_P+0x4>
    6386:	99 0b       	sbc	r25, r25
    6388:	08 95       	ret
    638a:	88 1b       	sub	r24, r24
    638c:	fc cf       	rjmp	.-8      	; 0x6386 <strncasecmp_P+0x28>

0000638e <__ctype_isfalse>:
    638e:	99 27       	eor	r25, r25
    6390:	88 27       	eor	r24, r24

00006392 <__ctype_istrue>:
    6392:	08 95       	ret

00006394 <_exit>:
    6394:	f8 94       	cli

00006396 <__stop_program>:
    6396:	ff cf       	rjmp	.-2      	; 0x6396 <__stop_program>
