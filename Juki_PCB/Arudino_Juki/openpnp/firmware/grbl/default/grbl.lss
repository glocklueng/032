
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000004a4  00800200  00800200  00005328  2**0
                  ALLOC
  2 .debug_aranges 000004f0  00000000  00000000  00005328  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000933  00000000  00000000  00005818  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000040e9  00000000  00000000  0000614b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001623  00000000  00000000  0000a234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003cc1  00000000  00000000  0000b857  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000007e0  00000000  00000000  0000f518  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000ea9  00000000  00000000  0000fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000246c  00000000  00000000  00010ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a68  00000000  00000000  0001300d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1c 03 	jmp	0x638	; 0x638 <__ctors_end>
       4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
       8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
       c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      10:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      14:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      18:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      1c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      20:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      24:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      28:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      2c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      30:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      34:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      38:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      3c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__vector_15>
      40:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      44:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__vector_17>
      48:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      4c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      50:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      54:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      58:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      5c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      60:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      64:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__vector_25>
      68:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      6c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      70:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      74:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      78:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      7c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      80:	0c 94 96 20 	jmp	0x412c	; 0x412c <__vector_32>
      84:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      88:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      8c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      90:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      94:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      98:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      9c:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      a0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      a4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      a8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      ac:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      b0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      b4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      b8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      bc:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      c0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      c4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      c8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      cc:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      d0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      d4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      d8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      dc:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      e0:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__bad_interrupt>
      e4:	70 07       	cpc	r23, r16
      e6:	6c 07       	cpc	r22, r28
      e8:	68 07       	cpc	r22, r24
      ea:	64 07       	cpc	r22, r20
      ec:	58 07       	cpc	r21, r24
      ee:	fd 06       	cpc	r15, r29
      f0:	fd 06       	cpc	r15, r29
      f2:	fd 06       	cpc	r15, r29
      f4:	fd 06       	cpc	r15, r29
      f6:	fd 06       	cpc	r15, r29
      f8:	fd 06       	cpc	r15, r29
      fa:	fd 06       	cpc	r15, r29
      fc:	fd 06       	cpc	r15, r29
      fe:	fd 06       	cpc	r15, r29
     100:	fd 06       	cpc	r15, r29
     102:	fd 06       	cpc	r15, r29
     104:	fd 06       	cpc	r15, r29
     106:	5b 07       	cpc	r21, r27
     108:	91 07       	cpc	r25, r17
     10a:	88 07       	cpc	r24, r24
     10c:	84 07       	cpc	r24, r20
     10e:	81 07       	cpc	r24, r17
     110:	fd 06       	cpc	r15, r29
     112:	fd 06       	cpc	r15, r29
     114:	fd 06       	cpc	r15, r29
     116:	fd 06       	cpc	r15, r29
     118:	fd 06       	cpc	r15, r29
     11a:	fd 06       	cpc	r15, r29
     11c:	7e 07       	cpc	r23, r30
     11e:	fd 06       	cpc	r15, r29
     120:	7e 07       	cpc	r23, r30
     122:	fd 06       	cpc	r15, r29
     124:	fd 06       	cpc	r15, r29
     126:	fd 06       	cpc	r15, r29
     128:	fd 06       	cpc	r15, r29
     12a:	fd 06       	cpc	r15, r29
     12c:	fd 06       	cpc	r15, r29
     12e:	fd 06       	cpc	r15, r29
     130:	fd 06       	cpc	r15, r29
     132:	fd 06       	cpc	r15, r29
     134:	fd 06       	cpc	r15, r29
     136:	fd 06       	cpc	r15, r29
     138:	fd 06       	cpc	r15, r29
     13a:	fd 06       	cpc	r15, r29
     13c:	fd 06       	cpc	r15, r29
     13e:	fd 06       	cpc	r15, r29
     140:	fd 06       	cpc	r15, r29
     142:	fd 06       	cpc	r15, r29
     144:	fd 06       	cpc	r15, r29
     146:	fd 06       	cpc	r15, r29
     148:	fd 06       	cpc	r15, r29
     14a:	fd 06       	cpc	r15, r29
     14c:	fd 06       	cpc	r15, r29
     14e:	7b 07       	cpc	r23, r27
     150:	fd 06       	cpc	r15, r29
     152:	fd 06       	cpc	r15, r29
     154:	fd 06       	cpc	r15, r29
     156:	fd 06       	cpc	r15, r29
     158:	fd 06       	cpc	r15, r29
     15a:	fd 06       	cpc	r15, r29
     15c:	fd 06       	cpc	r15, r29
     15e:	fd 06       	cpc	r15, r29
     160:	fd 06       	cpc	r15, r29
     162:	fd 06       	cpc	r15, r29
     164:	fd 06       	cpc	r15, r29
     166:	fd 06       	cpc	r15, r29
     168:	fd 06       	cpc	r15, r29
     16a:	fd 06       	cpc	r15, r29
     16c:	fd 06       	cpc	r15, r29
     16e:	fd 06       	cpc	r15, r29
     170:	fd 06       	cpc	r15, r29
     172:	fd 06       	cpc	r15, r29
     174:	fd 06       	cpc	r15, r29
     176:	fd 06       	cpc	r15, r29
     178:	fd 06       	cpc	r15, r29
     17a:	fd 06       	cpc	r15, r29
     17c:	fd 06       	cpc	r15, r29
     17e:	fd 06       	cpc	r15, r29
     180:	fd 06       	cpc	r15, r29
     182:	fd 06       	cpc	r15, r29
     184:	77 07       	cpc	r23, r23
     186:	fd 06       	cpc	r15, r29
     188:	fd 06       	cpc	r15, r29
     18a:	fd 06       	cpc	r15, r29
     18c:	fd 06       	cpc	r15, r29
     18e:	fd 06       	cpc	r15, r29
     190:	fd 06       	cpc	r15, r29
     192:	fd 06       	cpc	r15, r29
     194:	fd 06       	cpc	r15, r29
     196:	fd 06       	cpc	r15, r29
     198:	73 07       	cpc	r23, r19
     19a:	a4 07       	cpc	r26, r20
     19c:	a1 07       	cpc	r26, r17
     19e:	9d 07       	cpc	r25, r29
     1a0:	9a 07       	cpc	r25, r26
     1a2:	ff 07       	cpc	r31, r31
     1a4:	ff 07       	cpc	r31, r31
     1a6:	fb 07       	cpc	r31, r27
     1a8:	f4 07       	cpc	r31, r20
     1aa:	ed 07       	cpc	r30, r29
     1ac:	2c 08       	sbc	r2, r12
     1ae:	fd 06       	cpc	r15, r29
     1b0:	fd 06       	cpc	r15, r29
     1b2:	25 08       	sbc	r2, r5
     1b4:	20 08       	sbc	r2, r0
     1b6:	19 08       	sbc	r1, r9
     1b8:	12 08       	sbc	r1, r2
     1ba:	0d 08       	sbc	r0, r13
     1bc:	08 08       	sbc	r0, r8
     1be:	03 08       	sbc	r0, r3
     1c0:	d0 07       	cpc	r29, r16
     1c2:	cb 07       	cpc	r28, r27
     1c4:	c6 07       	cpc	r28, r22
     1c6:	c1 07       	cpc	r28, r17
     1c8:	ba 07       	cpc	r27, r26
     1ca:	b3 07       	cpc	r27, r19
     1cc:	ae 07       	cpc	r26, r30
     1ce:	56 07       	cpc	r21, r22
     1d0:	e8 07       	cpc	r30, r24
     1d2:	e1 07       	cpc	r30, r17
     1d4:	dc 07       	cpc	r29, r28
     1d6:	d5 07       	cpc	r29, r21
     1d8:	a7 07       	cpc	r26, r23
     1da:	fd 06       	cpc	r15, r29
     1dc:	fd 06       	cpc	r15, r29
     1de:	fb 07       	cpc	r31, r27
     1e0:	fd 06       	cpc	r15, r29
     1e2:	fd 06       	cpc	r15, r29
     1e4:	fd 06       	cpc	r15, r29
     1e6:	fd 06       	cpc	r15, r29
     1e8:	fd 06       	cpc	r15, r29
     1ea:	fd 06       	cpc	r15, r29
     1ec:	fd 06       	cpc	r15, r29
     1ee:	fd 06       	cpc	r15, r29
     1f0:	fd 06       	cpc	r15, r29
     1f2:	fd 06       	cpc	r15, r29
     1f4:	fd 06       	cpc	r15, r29
     1f6:	fd 06       	cpc	r15, r29
     1f8:	fd 06       	cpc	r15, r29
     1fa:	fd 06       	cpc	r15, r29
     1fc:	fd 06       	cpc	r15, r29
     1fe:	fd 06       	cpc	r15, r29
     200:	fd 06       	cpc	r15, r29
     202:	fd 06       	cpc	r15, r29
     204:	fd 06       	cpc	r15, r29
     206:	fd 06       	cpc	r15, r29
     208:	fd 06       	cpc	r15, r29
     20a:	fd 06       	cpc	r15, r29
     20c:	fd 06       	cpc	r15, r29
     20e:	fd 06       	cpc	r15, r29
     210:	fd 06       	cpc	r15, r29
     212:	fd 06       	cpc	r15, r29
     214:	fd 06       	cpc	r15, r29
     216:	fd 06       	cpc	r15, r29
     218:	fd 06       	cpc	r15, r29
     21a:	fb 07       	cpc	r31, r27
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 59       	subi	r19, 0x9F	; 159

00000249 <__c.1940>:
     249:	59 5f 48 4f 4d 45 0d 0a 00                          Y_HOME...

00000252 <__c.1938>:
     252:	58 5f 48 4f 4d 45 0d 0a 00                          X_HOME...

0000025b <__c.1936>:
     25b:	59 4c 32 0d 0a 00                                   YL2...

00000261 <__c.1934>:
     261:	59 4c 31 0d 0a 00                                   YL1...

00000267 <__c.1932>:
     267:	58 4c 32 0d 0a 00                                   XL2...

0000026d <__c.1930>:
     26d:	58 4c 31 0d 0a 00                                   XL1...

00000273 <__c.1928>:
     273:	0d 0a 00                                            ...

00000276 <__c.1926>:
     276:	67 65 74 5f 62 75 73 79 20 3d 20 00                 get_busy = .

00000282 <__c.1924>:
     282:	0d 0a 00                                            ...

00000285 <__c.1922>:
     285:	72 6f 74 61 74 65 64 20 3d 20 00                    rotated = .

00000290 <__c.1920>:
     290:	0d 0a 00                                            ...

00000293 <__c.1918>:
     293:	76 61 63 75 75 6d 5f 73 74 61 74 65 20 3d 20 00     vacuum_state = .

000002a3 <__c.1916>:
     2a3:	0d 0a 00                                            ...

000002a6 <__c.1914>:
     2a6:	68 65 61 64 5f 6d 6f 76 69 6e 67 20 3d 20 00        head_moving = .

000002b5 <__c.1912>:
     2b5:	0d 0a 00                                            ...

000002b8 <__c.1910>:
     2b8:	68 65 61 64 20 64 6f 77 6e 20 3d 20 00              head down = .

000002c5 <__c.1908>:
     2c5:	0d 0a 00                                            ...

000002c8 <__c.1906>:
     2c8:	50 49 4e 44 20 6c 69 6d 69 74 73 20 3d 20 00        PIND limits = .

000002d7 <__c.1904>:
     2d7:	0d 0a 00                                            ...

000002da <__c.1902>:
     2da:	50 4f 52 54 44 20 20 3d 20 00                       PORTD  = .

000002e4 <__c.1900>:
     2e4:	0d 0a 00                                            ...

000002e7 <__c.1898>:
     2e7:	44 49 52 45 43 54 49 4f 4e 5f 50 4f 52 54 20 20     DIRECTION_PORT  
     2f7:	3d 20 00                                            = .

000002fa <__c.1896>:
     2fa:	0d 0a 00                                            ...

000002fd <__c.1894>:
     2fd:	44 49 52 45 43 54 49 4f 4e 5f 44 44 52 20 20 3d     DIRECTION_DDR  =
     30d:	20 00                                                .

0000030f <__c.1633>:
     30f:	6f 6b 0a 0d 00                                      ok...

00000314 <__c.1678>:
     314:	0a 0d 00                                            ...

00000317 <__c.1676>:
     317:	65 72 72 6f 72 3a 20 00                             error: .

0000031f <__c.1673>:
     31f:	65 72 72 6f 72 3a 20 4e 6f 74 20 68 6f 6d 65 64     error: Not homed
     32f:	0a 0d 00                                            ...

00000332 <__c.1670>:
     332:	65 72 72 6f 72 3a 20 43 6f 6d 6d 61 6e 64 20 46     error: Command F
     342:	61 69 6c 65 64 0a 0d 00                             ailed...

0000034a <__c.1667>:
     34a:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     35a:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

00000368 <__c.1664>:
     368:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     378:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

00000387 <__c.1661>:
     387:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     397:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

000003a8 <__c.1658>:
     3a8:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     3b8:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

000003c3 <__c.1654>:
     3c3:	6f 6b 0a 0d 00                                      ok...

000003c8 <__c.1730>:
     3c8:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     3d8:	6e 67 0d 0a 00                                      ng...

000003dd <__c.1728>:
     3dd:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     3ed:	72 0d 0a 00                                         r...

000003f1 <__c.1685>:
     3f1:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     401:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     411:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     421:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     431:	0d 0a 00                                            ...

00000434 <__c.1683>:
     434:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     444:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     454:	61 62 6c 65 64 29 0d 0a 00                          abled)...

0000045d <__c.1681>:
     45d:	24 31 30 30 30 20 3d 20 00                          $1000 = .

00000466 <__c.1679>:
     466:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     476:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     486:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     496:	2f 6d 69 6e 29 0d 0a 00                             /min)...

0000049e <__c.1677>:
     49e:	24 39 20 3d 20 00                                   $9 = .

000004a4 <__c.1675>:
     4a4:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     4b4:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

000004c2 <__c.1673>:
     4c2:	24 38 20 3d 20 00                                   $8 = .

000004c8 <__c.1671>:
     4c8:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     4d8:	29 0d 0a 00                                         )...

000004dc <__c.1669>:
     4dc:	24 37 20 3d 20 00                                   $7 = .

000004e2 <__c.1667>:
     4e2:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     4f2:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000500 <__c.1665>:
     500:	24 36 20 3d 20 00                                   $6 = .

00000506 <__c.1663>:
     506:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     516:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

00000524 <__c.1661>:
     524:	24 35 20 3d 20 00                                   $5 = .

0000052a <__c.1659>:
     52a:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     53a:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

00000547 <__c.1657>:
     547:	24 34 20 3d 20 00                                   $4 = .

0000054d <__c.1655>:
     54d:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     55d:	0a 00                                               ..

0000055f <__c.1653>:
     55f:	24 33 20 3d 20 00                                   $3 = .

00000565 <__c.1651>:
     565:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

00000575 <__c.1649>:
     575:	24 32 20 3d 20 00                                   $2 = .

0000057b <__c.1647>:
     57b:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

0000058b <__c.1645>:
     58b:	24 31 20 3d 20 00                                   $1 = .

00000591 <__c.1643>:
     591:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000005a1 <__c.1641>:
     5a1:	24 30 20 3d 20 00                                   $0 = .

000005a7 <__c.1639>:
     5a7:	0d 0a 00                                            ...

000005aa <__c.1637>:
     5aa:	30 2e 37 36 50 42 00                                0.76PB.

000005b1 <__c.1635>:
     5b1:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

000005bd <__c.2182>:
     5bd:	68 6f 6d 65 20 66 61 69 6c 65 64 0d 0a 00           home failed...

000005cb <__c.2042>:
     5cb:	78 4c 69 6d 69 74 31 0d 0a 00                       xLimit1...

000005d5 <__c.2060>:
     5d5:	79 4c 69 6d 69 74 31 0d 0a 00                       yLimit1...

000005df <__c.1828>:
     5df:	48 65 61 64 20 64 6f 77 6e 20 65 72 72 6f 72 0a     Head down error.
     5ef:	0d 00                                               ..

000005f1 <__c.1859>:
     5f1:	6e 6f 0d 0a 00                                      no...

000005f6 <__c.1857>:
     5f6:	79 65 73 0d 0a 00                                   yes...

000005fc <pstr_inf>:
     5fc:	49 4e 46                                            INF

000005ff <pstr_inity>:
     5ff:	49 4e 49 54 59                                      INITY

00000604 <pstr_nan>:
     604:	4e 41 4e                                            NAN

00000607 <pwr_m10>:
     607:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     617:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000061f <pwr_p10>:
     61f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     62f:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000638 <__ctors_end>:
     638:	11 24       	eor	r1, r1
     63a:	1f be       	out	0x3f, r1	; 63
     63c:	cf ef       	ldi	r28, 0xFF	; 255
     63e:	d1 e2       	ldi	r29, 0x21	; 33
     640:	de bf       	out	0x3e, r29	; 62
     642:	cd bf       	out	0x3d, r28	; 61
     644:	00 e0       	ldi	r16, 0x00	; 0
     646:	0c bf       	out	0x3c, r16	; 60

00000648 <__do_copy_data>:
     648:	12 e0       	ldi	r17, 0x02	; 2
     64a:	a0 e0       	ldi	r26, 0x00	; 0
     64c:	b2 e0       	ldi	r27, 0x02	; 2
     64e:	e4 eb       	ldi	r30, 0xB4	; 180
     650:	f2 e5       	ldi	r31, 0x52	; 82
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	0b bf       	out	0x3b, r16	; 59
     656:	02 c0       	rjmp	.+4      	; 0x65c <__do_copy_data+0x14>
     658:	07 90       	elpm	r0, Z+
     65a:	0d 92       	st	X+, r0
     65c:	a0 30       	cpi	r26, 0x00	; 0
     65e:	b1 07       	cpc	r27, r17
     660:	d9 f7       	brne	.-10     	; 0x658 <__do_copy_data+0x10>

00000662 <__do_clear_bss>:
     662:	16 e0       	ldi	r17, 0x06	; 6
     664:	a0 e0       	ldi	r26, 0x00	; 0
     666:	b2 e0       	ldi	r27, 0x02	; 2
     668:	01 c0       	rjmp	.+2      	; 0x66c <.do_clear_bss_start>

0000066a <.do_clear_bss_loop>:
     66a:	1d 92       	st	X+, r1

0000066c <.do_clear_bss_start>:
     66c:	a4 3a       	cpi	r26, 0xA4	; 164
     66e:	b1 07       	cpc	r27, r17
     670:	e1 f7       	brne	.-8      	; 0x66a <.do_clear_bss_loop>
     672:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <main>
     676:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <_exit>

0000067a <__bad_interrupt>:
     67a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000067e <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     67e:	24 9a       	sbi	0x04, 4	; 4
}
     680:	08 95       	ret

00000682 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     682:	89 2b       	or	r24, r25
     684:	11 f4       	brne	.+4      	; 0x68a <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     686:	2c 98       	cbi	0x05, 4	; 5
     688:	08 95       	ret
}

void coolant_flood(int on) 
{
  if (on) {
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     68a:	2c 9a       	sbi	0x05, 4	; 5
     68c:	08 95       	ret

0000068e <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     68e:	f9 99       	sbic	0x1f, 1	; 31
     690:	fe cf       	rjmp	.-4      	; 0x68e <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     692:	92 bd       	out	0x22, r25	; 34
     694:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     69a:	80 b5       	in	r24, 0x20	; 32
}
     69c:	08 95       	ret

0000069e <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     69e:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     6a0:	f9 99       	sbic	0x1f, 1	; 31
     6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     6a4:	92 bd       	out	0x22, r25	; 34
     6a6:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     6ac:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     6ae:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     6b0:	89 2f       	mov	r24, r25
     6b2:	86 23       	and	r24, r22
     6b4:	41 f0       	breq	.+16     	; 0x6c6 <eeprom_put_char+0x28>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     6b6:	6f 3f       	cpi	r22, 0xFF	; 255
     6b8:	71 f0       	breq	.+28     	; 0x6d6 <eeprom_put_char+0x38>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     6ba:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6bc:	84 e0       	ldi	r24, 0x04	; 4
     6be:	8f bb       	out	0x1f, r24	; 31
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
     6c0:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6c2:	78 94       	sei
}
     6c4:	08 95       	ret
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     6c6:	99 23       	and	r25, r25
     6c8:	e1 f3       	breq	.-8      	; 0x6c2 <eeprom_put_char+0x24>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     6ca:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6cc:	84 e2       	ldi	r24, 0x24	; 36
     6ce:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     6d0:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     6d2:	78 94       	sei
}
     6d4:	08 95       	ret
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     6d6:	84 e1       	ldi	r24, 0x14	; 20
     6d8:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM0);  // ...and Erase-only mode.
			EECR |= (1<<EEPE);  // Start Erase-only operation.
     6da:	f9 9a       	sbi	0x1f, 1	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
		}
	}
	
	sei(); // Restore interrupt flag state.
     6dc:	78 94       	sei
}
     6de:	08 95       	ret

000006e0 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     6e0:	af 92       	push	r10
     6e2:	bf 92       	push	r11
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	6c 01       	movw	r12, r24
     6f4:	8b 01       	movw	r16, r22
     6f6:	5a 01       	movw	r10, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     6f8:	41 15       	cp	r20, r1
     6fa:	51 05       	cpc	r21, r1
     6fc:	59 f1       	breq	.+86     	; 0x754 <memcpy_to_eeprom_with_checksum+0x74>
     6fe:	ff 24       	eor	r15, r15
     700:	c0 e0       	ldi	r28, 0x00	; 0
     702:	d0 e0       	ldi	r29, 0x00	; 0
     704:	0d c0       	rjmp	.+26     	; 0x720 <memcpy_to_eeprom_with_checksum+0x40>
    checksum = (checksum << 1) || (checksum >> 7);
     706:	21 e0       	ldi	r18, 0x01	; 1
    checksum += *source;
     708:	f8 01       	movw	r30, r16
     70a:	60 81       	ld	r22, Z
     70c:	f2 2e       	mov	r15, r18
     70e:	f6 0e       	add	r15, r22
    eeprom_put_char(destination++, *(source++)); 
     710:	0e 94 4f 03 	call	0x69e	; 0x69e <eeprom_put_char>
     714:	21 96       	adiw	r28, 0x01	; 1
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     716:	ca 15       	cp	r28, r10
     718:	db 05       	cpc	r29, r11
     71a:	61 f0       	breq	.+24     	; 0x734 <memcpy_to_eeprom_with_checksum+0x54>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     71c:	0f 5f       	subi	r16, 0xFF	; 255
     71e:	1f 4f       	sbci	r17, 0xFF	; 255
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     720:	ce 01       	movw	r24, r28
     722:	8c 0d       	add	r24, r12
     724:	9d 1d       	adc	r25, r13
    checksum = (checksum << 1) || (checksum >> 7);
     726:	ff 20       	and	r15, r15
     728:	71 f7       	brne	.-36     	; 0x706 <memcpy_to_eeprom_with_checksum+0x26>
     72a:	2f 2d       	mov	r18, r15
     72c:	22 1f       	adc	r18, r18
     72e:	22 27       	eor	r18, r18
     730:	22 1f       	adc	r18, r18
     732:	ea cf       	rjmp	.-44     	; 0x708 <memcpy_to_eeprom_with_checksum+0x28>
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
     734:	cc 0e       	add	r12, r28
     736:	dd 1e       	adc	r13, r29
  }
  eeprom_put_char(destination, checksum);
     738:	c6 01       	movw	r24, r12
     73a:	6f 2d       	mov	r22, r15
     73c:	0e 94 4f 03 	call	0x69e	; 0x69e <eeprom_put_char>
}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	08 95       	ret
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     754:	ff 24       	eor	r15, r15
     756:	f0 cf       	rjmp	.-32     	; 0x738 <memcpy_to_eeprom_with_checksum+0x58>

00000758 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     758:	fc 01       	movw	r30, r24
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     75a:	41 15       	cp	r20, r1
     75c:	51 05       	cpc	r21, r1
     75e:	c9 f1       	breq	.+114    	; 0x7d2 <memcpy_from_eeprom_with_checksum+0x7a>
     760:	a0 e0       	ldi	r26, 0x00	; 0
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     766:	b1 e0       	ldi	r27, 0x01	; 1
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     768:	c9 01       	movw	r24, r18
     76a:	86 0f       	add	r24, r22
     76c:	97 1f       	adc	r25, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     76e:	f9 99       	sbic	0x1f, 1	; 31
     770:	fe cf       	rjmp	.-4      	; 0x76e <memcpy_from_eeprom_with_checksum+0x16>
	EEAR = addr; // Set EEPROM address register.
     772:	92 bd       	out	0x22, r25	; 34
     774:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     776:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     778:	90 b5       	in	r25, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     77a:	aa 23       	and	r26, r26
     77c:	59 f0       	breq	.+22     	; 0x794 <memcpy_from_eeprom_with_checksum+0x3c>
     77e:	81 e0       	ldi	r24, 0x01	; 1
    checksum += data;    
     780:	a8 2f       	mov	r26, r24
     782:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     784:	90 83       	st	Z, r25
     786:	2f 5f       	subi	r18, 0xFF	; 255
     788:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     78a:	24 17       	cp	r18, r20
     78c:	35 07       	cpc	r19, r21
     78e:	71 f0       	breq	.+28     	; 0x7ac <memcpy_from_eeprom_with_checksum+0x54>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     790:	31 96       	adiw	r30, 0x01	; 1
     792:	ea cf       	rjmp	.-44     	; 0x768 <memcpy_from_eeprom_with_checksum+0x10>

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     794:	8a 2f       	mov	r24, r26
     796:	88 1f       	adc	r24, r24
     798:	88 27       	eor	r24, r24
     79a:	88 1f       	adc	r24, r24
    checksum += data;    
     79c:	a8 2f       	mov	r26, r24
     79e:	a9 0f       	add	r26, r25
    *(destination++) = data; 
     7a0:	90 83       	st	Z, r25
     7a2:	2f 5f       	subi	r18, 0xFF	; 255
     7a4:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7a6:	24 17       	cp	r18, r20
     7a8:	35 07       	cpc	r19, r21
     7aa:	91 f7       	brne	.-28     	; 0x790 <memcpy_from_eeprom_with_checksum+0x38>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
     7ac:	62 0f       	add	r22, r18
     7ae:	73 1f       	adc	r23, r19
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     7b0:	f9 99       	sbic	0x1f, 1	; 31
     7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <memcpy_from_eeprom_with_checksum+0x58>
	EEAR = addr; // Set EEPROM address register.
     7b4:	72 bd       	out	0x22, r23	; 34
     7b6:	61 bd       	out	0x21, r22	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     7bc:	80 b5       	in	r24, 0x20	; 32
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	a8 17       	cp	r26, r24
     7c4:	11 f0       	breq	.+4      	; 0x7ca <memcpy_from_eeprom_with_checksum+0x72>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7c6:	c9 01       	movw	r24, r18
     7c8:	08 95       	ret
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
     7ca:	21 e0       	ldi	r18, 0x01	; 1
     7cc:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     7ce:	c9 01       	movw	r24, r18
     7d0:	08 95       	ret
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     7d2:	a0 e0       	ldi	r26, 0x00	; 0
     7d4:	ed cf       	rjmp	.-38     	; 0x7b0 <memcpy_from_eeprom_with_checksum+0x58>

000007d6 <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     7d6:	80 93 29 02 	sts	0x0229, r24
  gc.plane_axis_1 = axis_1;
     7da:	60 93 2a 02 	sts	0x022A, r22
  gc.plane_axis_2 = axis_2;
     7de:	40 93 2b 02 	sts	0x022B, r20
}
     7e2:	08 95       	ret

000007e4 <set_feeder_x>:

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
     7e4:	60 93 00 02 	sts	0x0200, r22
     7e8:	70 93 01 02 	sts	0x0201, r23
     7ec:	80 93 02 02 	sts	0x0202, r24
     7f0:	90 93 03 02 	sts	0x0203, r25
}
     7f4:	08 95       	ret

000007f6 <set_feeder_y>:

void set_feeder_y( double y )
{
	feeder_x_pos = y;
     7f6:	60 93 00 02 	sts	0x0200, r22
     7fa:	70 93 01 02 	sts	0x0201, r23
     7fe:	80 93 02 02 	sts	0x0202, r24
     802:	90 93 03 02 	sts	0x0203, r25
}
     806:	08 95       	ret

00000808 <gotoxy>:
 * goto xyzc 
 *
 */

void gotoxy( double x,double y, double z,double c )
{
     808:	2f 92       	push	r2
     80a:	3f 92       	push	r3
     80c:	4f 92       	push	r4
     80e:	5f 92       	push	r5
     810:	6f 92       	push	r6
     812:	7f 92       	push	r7
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	df 93       	push	r29
     82a:	cf 93       	push	r28
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	28 97       	sbiw	r28, 0x08	; 8
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	69 83       	std	Y+1, r22	; 0x01
     83e:	7a 83       	std	Y+2, r23	; 0x02
     840:	8b 83       	std	Y+3, r24	; 0x03
     842:	9c 83       	std	Y+4, r25	; 0x04
     844:	2d 83       	std	Y+5, r18	; 0x05
     846:	3e 83       	std	Y+6, r19	; 0x06
     848:	4f 83       	std	Y+7, r20	; 0x07
     84a:	58 87       	std	Y+8, r21	; 0x08
     84c:	17 01       	movw	r2, r14
     84e:	28 01       	movw	r4, r16
     850:	35 01       	movw	r6, r10
     852:	46 01       	movw	r8, r12

  // if -1 use current pos
  if( x == -1) z = gc.position[X_AXIS] ;
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e8       	ldi	r20, 0x80	; 128
     85a:	5f eb       	ldi	r21, 0xBF	; 191
     85c:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
     860:	88 23       	and	r24, r24
     862:	41 f4       	brne	.+16     	; 0x874 <gotoxy+0x6c>
     864:	20 90 16 02 	lds	r2, 0x0216
     868:	30 90 17 02 	lds	r3, 0x0217
     86c:	40 90 18 02 	lds	r4, 0x0218
     870:	50 90 19 02 	lds	r5, 0x0219
  if( y == -1) c = gc.position[Y_AXIS] ;
     874:	6d 81       	ldd	r22, Y+5	; 0x05
     876:	7e 81       	ldd	r23, Y+6	; 0x06
     878:	8f 81       	ldd	r24, Y+7	; 0x07
     87a:	98 85       	ldd	r25, Y+8	; 0x08
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	5f eb       	ldi	r21, 0xBF	; 191
     884:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
     888:	88 23       	and	r24, r24
     88a:	41 f4       	brne	.+16     	; 0x89c <gotoxy+0x94>
     88c:	60 90 1a 02 	lds	r6, 0x021A
     890:	70 90 1b 02 	lds	r7, 0x021B
     894:	80 90 1c 02 	lds	r8, 0x021C
     898:	90 90 1d 02 	lds	r9, 0x021D
  if( z == -1) z = gc.position[Z_AXIS] ;
     89c:	c2 01       	movw	r24, r4
     89e:	b1 01       	movw	r22, r2
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e8       	ldi	r20, 0x80	; 128
     8a6:	5f eb       	ldi	r21, 0xBF	; 191
     8a8:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
     8ac:	88 23       	and	r24, r24
     8ae:	41 f4       	brne	.+16     	; 0x8c0 <gotoxy+0xb8>
     8b0:	20 90 1e 02 	lds	r2, 0x021E
     8b4:	30 90 1f 02 	lds	r3, 0x021F
     8b8:	40 90 20 02 	lds	r4, 0x0220
     8bc:	50 90 21 02 	lds	r5, 0x0221
  if( c == -1) c = gc.position[C_AXIS] ;
     8c0:	c4 01       	movw	r24, r8
     8c2:	b3 01       	movw	r22, r6
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e8       	ldi	r20, 0x80	; 128
     8ca:	5f eb       	ldi	r21, 0xBF	; 191
     8cc:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
     8d0:	88 23       	and	r24, r24
     8d2:	41 f4       	brne	.+16     	; 0x8e4 <gotoxy+0xdc>
     8d4:	60 90 22 02 	lds	r6, 0x0222
     8d8:	70 90 23 02 	lds	r7, 0x0223
     8dc:	80 90 24 02 	lds	r8, 0x0224
     8e0:	90 90 25 02 	lds	r9, 0x0225

   // could also use gc_execute_line("G1X100Y100Z100F100\r\n");	
   mc_line(x, y, z, c, gc.seek_rate, FALSE);
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <gotoxy+0xde>
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <gotoxy+0xe0>
     8e8:	80 91 12 02 	lds	r24, 0x0212
     8ec:	90 91 13 02 	lds	r25, 0x0213
     8f0:	a0 91 14 02 	lds	r26, 0x0214
     8f4:	b0 91 15 02 	lds	r27, 0x0215
     8f8:	ed b7       	in	r30, 0x3d	; 61
     8fa:	fe b7       	in	r31, 0x3e	; 62
     8fc:	81 83       	std	Z+1, r24	; 0x01
     8fe:	92 83       	std	Z+2, r25	; 0x02
     900:	a3 83       	std	Z+3, r26	; 0x03
     902:	b4 83       	std	Z+4, r27	; 0x04
     904:	16 82       	std	Z+6, r1	; 0x06
     906:	15 82       	std	Z+5, r1	; 0x05
     908:	69 81       	ldd	r22, Y+1	; 0x01
     90a:	7a 81       	ldd	r23, Y+2	; 0x02
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	2d 81       	ldd	r18, Y+5	; 0x05
     912:	3e 81       	ldd	r19, Y+6	; 0x06
     914:	4f 81       	ldd	r20, Y+7	; 0x07
     916:	58 85       	ldd	r21, Y+8	; 0x08
     918:	82 01       	movw	r16, r4
     91a:	71 01       	movw	r14, r2
     91c:	64 01       	movw	r12, r8
     91e:	53 01       	movw	r10, r6
     920:	0e 94 23 10 	call	0x2046	; 0x2046 <plan_buffer_line>
 
   // update position  
   gc.position[X_AXIS] = x;
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	9a 81       	ldd	r25, Y+2	; 0x02
     928:	ab 81       	ldd	r26, Y+3	; 0x03
     92a:	bc 81       	ldd	r27, Y+4	; 0x04
     92c:	80 93 16 02 	sts	0x0216, r24
     930:	90 93 17 02 	sts	0x0217, r25
     934:	a0 93 18 02 	sts	0x0218, r26
     938:	b0 93 19 02 	sts	0x0219, r27
   gc.position[Y_AXIS] = y;
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	9e 81       	ldd	r25, Y+6	; 0x06
     940:	af 81       	ldd	r26, Y+7	; 0x07
     942:	b8 85       	ldd	r27, Y+8	; 0x08
     944:	80 93 1a 02 	sts	0x021A, r24
     948:	90 93 1b 02 	sts	0x021B, r25
     94c:	a0 93 1c 02 	sts	0x021C, r26
     950:	b0 93 1d 02 	sts	0x021D, r27
   gc.position[Z_AXIS] = z;
     954:	20 92 1e 02 	sts	0x021E, r2
     958:	30 92 1f 02 	sts	0x021F, r3
     95c:	40 92 20 02 	sts	0x0220, r4
     960:	50 92 21 02 	sts	0x0221, r5
   gc.position[C_AXIS] = c;
     964:	60 92 22 02 	sts	0x0222, r6
     968:	70 92 23 02 	sts	0x0223, r7
     96c:	80 92 24 02 	sts	0x0224, r8
     970:	90 92 25 02 	sts	0x0225, r9
     974:	ad b7       	in	r26, 0x3d	; 61
     976:	be b7       	in	r27, 0x3e	; 62
     978:	16 96       	adiw	r26, 0x06	; 6
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	be bf       	out	0x3e, r27	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	ad bf       	out	0x3d, r26	; 61

}
     984:	28 96       	adiw	r28, 0x08	; 8
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	bf 90       	pop	r11
     9a2:	af 90       	pop	r10
     9a4:	9f 90       	pop	r9
     9a6:	8f 90       	pop	r8
     9a8:	7f 90       	pop	r7
     9aa:	6f 90       	pop	r6
     9ac:	5f 90       	pop	r5
     9ae:	4f 90       	pop	r4
     9b0:	3f 90       	pop	r3
     9b2:	2f 90       	pop	r2
     9b4:	08 95       	ret

000009b6 <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	0f 92       	push	r0
     9cc:	0f 92       	push	r0
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	6c 01       	movw	r12, r24
     9d4:	5b 01       	movw	r10, r22
     9d6:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     9d8:	fb 01       	movw	r30, r22
     9da:	00 81       	ld	r16, Z
     9dc:	11 81       	ldd	r17, Z+1	; 0x01
     9de:	08 0f       	add	r16, r24
     9e0:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     9e2:	c8 01       	movw	r24, r16
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <strtod>
     9ee:	f7 01       	movw	r30, r14
     9f0:	60 83       	st	Z, r22
     9f2:	71 83       	std	Z+1, r23	; 0x01
     9f4:	82 83       	std	Z+2, r24	; 0x02
     9f6:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	80 17       	cp	r24, r16
     9fe:	91 07       	cpc	r25, r17
     a00:	a9 f0       	breq	.+42     	; 0xa2c <read_double+0x76>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
    return(0); 
  };

  *char_counter = end - line;
     a02:	8c 19       	sub	r24, r12
     a04:	9d 09       	sbc	r25, r13
     a06:	f5 01       	movw	r30, r10
     a08:	91 83       	std	Z+1, r25	; 0x01
     a0a:	80 83       	st	Z, r24
     a0c:	21 e0       	ldi	r18, 0x01	; 1
     a0e:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     a10:	c9 01       	movw	r24, r18
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	cf 91       	pop	r28
     a18:	df 91       	pop	r29
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	bf 90       	pop	r11
     a28:	af 90       	pop	r10
     a2a:	08 95       	ret
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 04 02 	sts	0x0204, r24
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	ec cf       	rjmp	.-40     	; 0xa10 <read_double+0x5a>

00000a38 <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	ec 01       	movw	r28, r24
     a42:	8b 01       	movw	r16, r22
     a44:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     a46:	ed 91       	ld	r30, X+
     a48:	fc 91       	ld	r31, X
     a4a:	11 97       	sbiw	r26, 0x01	; 1
     a4c:	e4 0f       	add	r30, r20
     a4e:	f5 1f       	adc	r31, r21
     a50:	e0 81       	ld	r30, Z
     a52:	ee 23       	and	r30, r30
     a54:	39 f0       	breq	.+14     	; 0xa64 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     a56:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     a58:	e1 54       	subi	r30, 0x41	; 65
     a5a:	ea 31       	cpi	r30, 0x1A	; 26
     a5c:	58 f0       	brcs	.+22     	; 0xa74 <next_statement+0x3c>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	80 93 04 02 	sts	0x0204, r24
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
  (*char_counter)++;
  if (!read_double(line, char_counter, double_ptr)) {
    return(0);
  };
  return(1);
}
     a68:	c9 01       	movw	r24, r18
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	08 95       	ret
  *letter = line[*char_counter];
  if((*letter < 'A') || (*letter > 'Z')) {
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
    return(0);
  }
  (*char_counter)++;
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	11 97       	sbiw	r26, 0x01	; 1
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	8d 93       	st	X+, r24
     a7e:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     a80:	ca 01       	movw	r24, r20
     a82:	b9 01       	movw	r22, r18
     a84:	a8 01       	movw	r20, r16
     a86:	0e 94 db 04 	call	0x9b6	; 0x9b6 <read_double>
     a8a:	00 97       	sbiw	r24, 0x00	; 0
     a8c:	11 f0       	breq	.+4      	; 0xa92 <next_statement+0x5a>
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     a94:	c9 01       	movw	r24, r18
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     aa0:	88 e2       	ldi	r24, 0x28	; 40
     aa2:	e4 e0       	ldi	r30, 0x04	; 4
     aa4:	f2 e0       	ldi	r31, 0x02	; 2
     aa6:	df 01       	movw	r26, r30
     aa8:	1d 92       	st	X+, r1
     aaa:	8a 95       	dec	r24
     aac:	e9 f7       	brne	.-6      	; 0xaa8 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     aae:	60 91 8d 06 	lds	r22, 0x068D
     ab2:	70 91 8e 06 	lds	r23, 0x068E
     ab6:	80 91 8f 06 	lds	r24, 0x068F
     aba:	90 91 90 06 	lds	r25, 0x0690
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e7       	ldi	r20, 0x70	; 112
     ac4:	52 e4       	ldi	r21, 0x42	; 66
     ac6:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
     aca:	60 93 0e 02 	sts	0x020E, r22
     ace:	70 93 0f 02 	sts	0x020F, r23
     ad2:	80 93 10 02 	sts	0x0210, r24
     ad6:	90 93 11 02 	sts	0x0211, r25
  gc.seek_rate = settings.default_seek_rate/60;
     ada:	60 91 91 06 	lds	r22, 0x0691
     ade:	70 91 92 06 	lds	r23, 0x0692
     ae2:	80 91 93 06 	lds	r24, 0x0693
     ae6:	90 91 94 06 	lds	r25, 0x0694
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e7       	ldi	r20, 0x70	; 112
     af0:	52 e4       	ldi	r21, 0x42	; 66
     af2:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
     af6:	60 93 12 02 	sts	0x0212, r22
     afa:	70 93 13 02 	sts	0x0213, r23
     afe:	80 93 14 02 	sts	0x0214, r24
     b02:	90 93 15 02 	sts	0x0215, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     b06:	10 92 29 02 	sts	0x0229, r1
  gc.plane_axis_1 = axis_1;
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	90 93 2a 02 	sts	0x022A, r25
  gc.plane_axis_2 = axis_2;
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	80 93 2b 02 	sts	0x022B, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     b16:	90 93 08 02 	sts	0x0208, r25
}
     b1a:	08 95       	ret

00000b1c <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     b1c:	2f 92       	push	r2
     b1e:	3f 92       	push	r3
     b20:	4f 92       	push	r4
     b22:	5f 92       	push	r5
     b24:	6f 92       	push	r6
     b26:	7f 92       	push	r7
     b28:	8f 92       	push	r8
     b2a:	9f 92       	push	r9
     b2c:	af 92       	push	r10
     b2e:	bf 92       	push	r11
     b30:	cf 92       	push	r12
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	e7 97       	sbiw	r28, 0x37	; 55
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     b52:	1b 82       	std	Y+3, r1	; 0x03
     b54:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	88 87       	std	Y+8, r24	; 0x08
     b60:	99 87       	std	Y+9, r25	; 0x09
     b62:	aa 87       	std	Y+10, r26	; 0x0a
     b64:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     b66:	ac e0       	ldi	r26, 0x0C	; 12
     b68:	2a 2e       	mov	r2, r26
     b6a:	31 2c       	mov	r3, r1
     b6c:	2c 0e       	add	r2, r28
     b6e:	3d 1e       	adc	r3, r29
     b70:	80 e1       	ldi	r24, 0x10	; 16
     b72:	d1 01       	movw	r26, r2
     b74:	e8 2f       	mov	r30, r24
     b76:	1d 92       	st	X+, r1
     b78:	ea 95       	dec	r30
     b7a:	e9 f7       	brne	.-6      	; 0xb76 <gc_execute_line+0x5a>
  clear_vector(offset);
     b7c:	fc e1       	ldi	r31, 0x1C	; 28
     b7e:	cf 2e       	mov	r12, r31
     b80:	d1 2c       	mov	r13, r1
     b82:	cc 0e       	add	r12, r28
     b84:	dd 1e       	adc	r13, r29
     b86:	d6 01       	movw	r26, r12
     b88:	1d 92       	st	X+, r1
     b8a:	8a 95       	dec	r24
     b8c:	e9 f7       	brne	.-6      	; 0xb88 <gc_execute_line+0x6c>

  gc.status_code = GCSTATUS_OK;
     b8e:	10 92 04 02 	sts	0x0204, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     b92:	f5 01       	movw	r30, r10
     b94:	80 81       	ld	r24, Z
     b96:	88 32       	cpi	r24, 0x28	; 40
     b98:	09 f4       	brne	.+2      	; 0xb9c <gc_execute_line+0x80>
     b9a:	86 c0       	rjmp	.+268    	; 0xca8 <gc_execute_line+0x18c>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     b9c:	8f 32       	cpi	r24, 0x2F	; 47
     b9e:	09 f4       	brne	.+2      	; 0xba2 <gc_execute_line+0x86>
     ba0:	6e c0       	rjmp	.+220    	; 0xc7e <gc_execute_line+0x162>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     ba2:	84 32       	cpi	r24, 0x24	; 36
     ba4:	09 f4       	brne	.+2      	; 0xba8 <gc_execute_line+0x8c>
     ba6:	4a c0       	rjmp	.+148    	; 0xc3c <gc_execute_line+0x120>
     ba8:	19 aa       	std	Y+49, r1	; 0x31
     baa:	18 aa       	std	Y+48, r1	; 0x30
     bac:	e2 e0       	ldi	r30, 0x02	; 2
     bae:	6e 2e       	mov	r6, r30
     bb0:	71 2c       	mov	r7, r1
     bb2:	6c 0e       	add	r6, r28
     bb4:	7d 1e       	adc	r7, r29
     bb6:	74 e0       	ldi	r23, 0x04	; 4
     bb8:	47 2e       	mov	r4, r23
     bba:	51 2c       	mov	r5, r1
     bbc:	4c 0e       	add	r4, r28
     bbe:	5d 1e       	adc	r5, r29
     bc0:	4e 01       	movw	r8, r28
     bc2:	08 94       	sec
     bc4:	81 1c       	adc	r8, r1
     bc6:	91 1c       	adc	r9, r1
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     bc8:	c4 01       	movw	r24, r8
     bca:	b2 01       	movw	r22, r4
     bcc:	a5 01       	movw	r20, r10
     bce:	93 01       	movw	r18, r6
     bd0:	0e 94 1c 05 	call	0xa38	; 0xa38 <next_statement>
     bd4:	89 2b       	or	r24, r25
     bd6:	09 f4       	brne	.+2      	; 0xbda <gc_execute_line+0xbe>
     bd8:	44 c2       	rjmp	.+1160   	; 0x1062 <gc_execute_line+0x546>
    int_value = trunc(value);
     bda:	6c 81       	ldd	r22, Y+4	; 0x04
     bdc:	7d 81       	ldd	r23, Y+5	; 0x05
     bde:	8e 81       	ldd	r24, Y+6	; 0x06
     be0:	9f 81       	ldd	r25, Y+7	; 0x07
     be2:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <trunc>
     be6:	7b 01       	movw	r14, r22
     be8:	8c 01       	movw	r16, r24
     bea:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>

    switch(letter) {
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	27 34       	cpi	r18, 0x47	; 71
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <gc_execute_line+0xda>
     bf4:	06 c1       	rjmp	.+524    	; 0xe02 <gc_execute_line+0x2e6>
     bf6:	28 34       	cpi	r18, 0x48	; 72
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <gc_execute_line+0xe0>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <gc_execute_line+0x16e>
     bfc:	24 34       	cpi	r18, 0x44	; 68
     bfe:	09 f4       	brne	.+2      	; 0xc02 <gc_execute_line+0xe6>
     c00:	55 c0       	rjmp	.+170    	; 0xcac <gc_execute_line+0x190>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
    }

    if(gc.status_code) { break; }
     c02:	80 91 04 02 	lds	r24, 0x0204
     c06:	88 23       	and	r24, r24
     c08:	f9 f2       	breq	.-66     	; 0xbc8 <gc_execute_line+0xac>
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
}
     c0a:	e7 96       	adiw	r28, 0x37	; 55
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	bf 90       	pop	r11
     c28:	af 90       	pop	r10
     c2a:	9f 90       	pop	r9
     c2c:	8f 90       	pop	r8
     c2e:	7f 90       	pop	r7
     c30:	6f 90       	pop	r6
     c32:	5f 90       	pop	r5
     c34:	4f 90       	pop	r4
     c36:	3f 90       	pop	r3
     c38:	2f 90       	pop	r2
     c3a:	08 95       	ret
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     c44:	d5 01       	movw	r26, r10
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	8c 91       	ld	r24, X
     c4a:	88 23       	and	r24, r24
     c4c:	59 f1       	breq	.+86     	; 0xca4 <gc_execute_line+0x188>
    read_double(line, &char_counter, &p);
     c4e:	8e 01       	movw	r16, r28
     c50:	0e 5f       	subi	r16, 0xFE	; 254
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	c5 01       	movw	r24, r10
     c56:	b8 01       	movw	r22, r16
     c58:	ae 01       	movw	r20, r28
     c5a:	48 5f       	subi	r20, 0xF8	; 248
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	f5 01       	movw	r30, r10
     c68:	e8 0f       	add	r30, r24
     c6a:	f9 1f       	adc	r31, r25
     c6c:	20 81       	ld	r18, Z
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	9b 83       	std	Y+3, r25	; 0x03
     c72:	8a 83       	std	Y+2, r24	; 0x02
     c74:	2d 33       	cpi	r18, 0x3D	; 61
     c76:	09 f4       	brne	.+2      	; 0xc7a <gc_execute_line+0x15e>
     c78:	f9 c0       	rjmp	.+498    	; 0xe6c <gc_execute_line+0x350>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	c6 cf       	rjmp	.-116    	; 0xc0a <gc_execute_line+0xee>

  gc.status_code = GCSTATUS_OK;
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	9b 83       	std	Y+3, r25	; 0x03
     c86:	8a 83       	std	Y+2, r24	; 0x02
     c88:	8f cf       	rjmp	.-226    	; 0xba8 <gc_execute_line+0x8c>

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);

    switch(letter) {
     c8a:	2d 34       	cpi	r18, 0x4D	; 77
     c8c:	09 f4       	brne	.+2      	; 0xc90 <gc_execute_line+0x174>
     c8e:	b0 c0       	rjmp	.+352    	; 0xdf0 <gc_execute_line+0x2d4>
     c90:	24 35       	cpi	r18, 0x54	; 84
     c92:	09 f0       	breq	.+2      	; 0xc96 <gc_execute_line+0x17a>
     c94:	b6 cf       	rjmp	.-148    	; 0xc02 <gc_execute_line+0xe6>
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;

        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     c96:	c8 01       	movw	r24, r16
     c98:	b7 01       	movw	r22, r14
     c9a:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
     c9e:	60 93 26 02 	sts	0x0226, r22
     ca2:	af cf       	rjmp	.-162    	; 0xc02 <gc_execute_line+0xe6>
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     ca4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <settings_dump>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	af cf       	rjmp	.-162    	; 0xc0a <gc_execute_line+0xee>
    switch(letter) {
	  case 'D':
		{	
#if 1
			unsigned char ch;
			ch = DDRD;
     cac:	8a b1       	in	r24, 0x0a	; 10
	      	printPgmString(PSTR("DIRECTION_DDR  = "));
     cae:	8d ef       	ldi	r24, 0xFD	; 253
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
		  	printBinary( DIRECTION_DDR );
     cb6:	60 b3       	in	r22, 0x10	; 16
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cc2:	8a ef       	ldi	r24, 0xFA	; 250
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

	      	printPgmString(PSTR("DIRECTION_PORT  = "));
     cca:	87 ee       	ldi	r24, 0xE7	; 231
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
		  	printBinary( DIRECTION_PORT );
     cd2:	61 b3       	in	r22, 0x11	; 17
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cde:	84 ee       	ldi	r24, 0xE4	; 228
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

			ch = PORTD;
     ce6:	eb b0       	in	r14, 0x0b	; 11
	      	printPgmString(PSTR("PORTD  = "));
     ce8:	8a ed       	ldi	r24, 0xDA	; 218
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
		  	printBinary( ch );
     cf0:	ff 24       	eor	r15, r15
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 e0       	ldi	r17, 0x00	; 0
     cf6:	c8 01       	movw	r24, r16
     cf8:	b7 01       	movw	r22, r14
     cfa:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <printBinary>
	      	printPgmString(PSTR("\r\n"));
     cfe:	87 ed       	ldi	r24, 0xD7	; 215
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

			ch = PIND;
     d06:	e9 b0       	in	r14, 0x09	; 9
	      	printPgmString(PSTR("PIND limits = "));
     d08:	88 ec       	ldi	r24, 0xC8	; 200
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
		  	printBinary( ch );
     d10:	ff 24       	eor	r15, r15
     d12:	00 e0       	ldi	r16, 0x00	; 0
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	c8 01       	movw	r24, r16
     d18:	b7 01       	movw	r22, r14
     d1a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <printBinary>
	      	printPgmString(PSTR("\r\n"));
     d1e:	85 ec       	ldi	r24, 0xC5	; 197
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
#endif

	      	printPgmString(PSTR("head down = "));
     d26:	88 eb       	ldi	r24, 0xB8	; 184
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
			printInteger( is_head_down() );
     d2e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a0 e0       	ldi	r26, 0x00	; 0
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d40:	85 eb       	ldi	r24, 0xB5	; 181
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

	      	printPgmString(PSTR("head_moving = "));
     d48:	86 ea       	ldi	r24, 0xA6	; 166
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
			printInteger( head_moving() );
     d50:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d62:	83 ea       	ldi	r24, 0xA3	; 163
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

	      	printPgmString(PSTR("vacuum_state = "));
     d6a:	83 e9       	ldi	r24, 0x93	; 147
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
			printInteger( vacuum_state() );
     d72:	0e 94 ff 20 	call	0x41fe	; 0x41fe <vacuum_state>
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     d84:	80 e9       	ldi	r24, 0x90	; 144
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

	      	printPgmString(PSTR("rotated = "));
     d8c:	85 e8       	ldi	r24, 0x85	; 133
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
			printInteger( is_rotated() );
     d94:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <is_rotated>
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a0 e0       	ldi	r26, 0x00	; 0
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     da6:	82 e8       	ldi	r24, 0x82	; 130
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
	      	printPgmString(PSTR("get_busy = "));
     dae:	86 e7       	ldi	r24, 0x76	; 118
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
			printInteger( get_busy() );
     db6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <get_busy>
     dba:	aa 27       	eor	r26, r26
     dbc:	97 fd       	sbrc	r25, 7
     dbe:	a0 95       	com	r26
     dc0:	ba 2f       	mov	r27, r26
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
	      	printPgmString(PSTR("\r\n"));
     dca:	83 e7       	ldi	r24, 0x73	; 115
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
     dd2:	4b 99       	sbic	0x09, 3	; 9
     dd4:	46 c0       	rjmp	.+140    	; 0xe62 <gc_execute_line+0x346>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
     dd6:	4a 99       	sbic	0x09, 2	; 9
     dd8:	3f c0       	rjmp	.+126    	; 0xe58 <gc_execute_line+0x33c>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
     dda:	48 99       	sbic	0x09, 0	; 9
     ddc:	38 c0       	rjmp	.+112    	; 0xe4e <gc_execute_line+0x332>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
     dde:	49 99       	sbic	0x09, 1	; 9
     de0:	31 c0       	rjmp	.+98     	; 0xe44 <gc_execute_line+0x328>
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
     de2:	04 99       	sbic	0x00, 4	; 0
     de4:	2a c0       	rjmp	.+84     	; 0xe3a <gc_execute_line+0x31e>
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
     de6:	90 99       	sbic	0x12, 0	; 18
     de8:	21 c0       	rjmp	.+66     	; 0xe2c <gc_execute_line+0x310>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     dea:	80 91 04 02 	lds	r24, 0x0204
     dee:	0d cf       	rjmp	.-486    	; 0xc0a <gc_execute_line+0xee>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     df0:	e6 2f       	mov	r30, r22
     df2:	f7 2f       	mov	r31, r23
     df4:	ed 33       	cpi	r30, 0x3D	; 61
     df6:	f1 05       	cpc	r31, r1
     df8:	88 f0       	brcs	.+34     	; 0xe1c <gc_execute_line+0x300>
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;

        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	80 93 04 02 	sts	0x0204, r24
     e00:	f4 cf       	rjmp	.-24     	; 0xdea <gc_execute_line+0x2ce>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     e02:	e6 2f       	mov	r30, r22
     e04:	f7 2f       	mov	r31, r23
     e06:	ef 35       	cpi	r30, 0x5F	; 95
     e08:	f1 05       	cpc	r31, r1
     e0a:	b8 f7       	brcc	.-18     	; 0xdfa <gc_execute_line+0x2de>
     e0c:	ee 58       	subi	r30, 0x8E	; 142
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	05 90       	lpm	r0, Z+
     e16:	f4 91       	lpm	r31, Z+
     e18:	e0 2d       	mov	r30, r0
     e1a:	19 94       	eijmp
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     e1c:	ef 52       	subi	r30, 0x2F	; 47
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	05 90       	lpm	r0, Z+
     e26:	f4 91       	lpm	r31, Z+
     e28:	e0 2d       	mov	r30, r0
     e2a:	19 94       	eijmp

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));

			if( bit_is_set( YHM_PIN, Y_HOME ) )
		      	printPgmString(PSTR("Y_HOME\r\n"));
     e2c:	89 e4       	ldi	r24, 0x49	; 73
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];

  return(gc.status_code);
     e34:	80 91 04 02 	lds	r24, 0x0204
     e38:	e8 ce       	rjmp	.-560    	; 0xc0a <gc_execute_line+0xee>
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));

			if( bit_is_set( XHM_PIN, X_HOME ) )
		      	printPgmString(PSTR("X_HOME\r\n"));
     e3a:	82 e5       	ldi	r24, 0x52	; 82
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
     e42:	d1 cf       	rjmp	.-94     	; 0xde6 <gc_execute_line+0x2ca>
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
			if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) )
		      	printPgmString(PSTR("YL2\r\n"));
     e44:	8b e5       	ldi	r24, 0x5B	; 91
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
     e4c:	ca cf       	rjmp	.-108    	; 0xde2 <gc_execute_line+0x2c6>
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));

			if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ))
		      	printPgmString(PSTR("YL1\r\n"));
     e4e:	81 e6       	ldi	r24, 0x61	; 97
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
     e56:	c3 cf       	rjmp	.-122    	; 0xdde <gc_execute_line+0x2c2>


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
			if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL2\r\n"));
     e58:	87 e6       	ldi	r24, 0x67	; 103
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
     e60:	bc cf       	rjmp	.-136    	; 0xdda <gc_execute_line+0x2be>
			printInteger( get_busy() );
	      	printPgmString(PSTR("\r\n"));


			if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) )
		      	printPgmString(PSTR("XL1\r\n"));
     e62:	8d e6       	ldi	r24, 0x6D	; 109
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
     e6a:	b5 cf       	rjmp	.-150    	; 0xdd6 <gc_execute_line+0x2ba>
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
    read_double(line, &char_counter, &p);
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
    read_double(line, &char_counter, &value);
     e6c:	c5 01       	movw	r24, r10
     e6e:	b8 01       	movw	r22, r16
     e70:	ae 01       	movw	r20, r28
     e72:	4c 5f       	subi	r20, 0xFC	; 252
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
     e76:	0e 94 db 04 	call	0x9b6	; 0x9b6 <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     e7a:	ea 81       	ldd	r30, Y+2	; 0x02
     e7c:	fb 81       	ldd	r31, Y+3	; 0x03
     e7e:	ea 0d       	add	r30, r10
     e80:	fb 1d       	adc	r31, r11
     e82:	80 81       	ld	r24, Z
     e84:	88 23       	and	r24, r24
     e86:	09 f0       	breq	.+2      	; 0xe8a <gc_execute_line+0x36e>
     e88:	f8 ce       	rjmp	.-528    	; 0xc7a <gc_execute_line+0x15e>
    settings_store_setting(p, value);
     e8a:	68 85       	ldd	r22, Y+8	; 0x08
     e8c:	79 85       	ldd	r23, Y+9	; 0x09
     e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e90:	9b 85       	ldd	r25, Y+11	; 0x0b
     e92:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	4c 81       	ldd	r20, Y+4	; 0x04
     e9c:	5d 81       	ldd	r21, Y+5	; 0x05
     e9e:	6e 81       	ldd	r22, Y+6	; 0x06
     ea0:	7f 81       	ldd	r23, Y+7	; 0x07
     ea2:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <settings_store_setting>
    return(gc.status_code);
     ea6:	80 91 04 02 	lds	r24, 0x0204
     eaa:	af ce       	rjmp	.-674    	; 0xc0a <gc_execute_line+0xee>
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
     eac:	0e 94 92 22 	call	0x4524	; 0x4524 <vacuum_test>
     eb0:	e1 e0       	ldi	r30, 0x01	; 1
     eb2:	e8 ab       	std	Y+48, r30	; 0x30
     eb4:	a6 ce       	rjmp	.-692    	; 0xc02 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     eb6:	10 92 29 02 	sts	0x0229, r1
  gc.plane_axis_1 = axis_1;
     eba:	a1 e0       	ldi	r26, 0x01	; 1
     ebc:	a0 93 2a 02 	sts	0x022A, r26
  gc.plane_axis_2 = axis_2;
     ec0:	b2 e0       	ldi	r27, 0x02	; 2
     ec2:	b0 93 2b 02 	sts	0x022B, r27
     ec6:	9d ce       	rjmp	.-710    	; 0xc02 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
        case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	90 93 05 02 	sts	0x0205, r25
     ece:	99 ce       	rjmp	.-718    	; 0xc02 <gc_execute_line+0xe6>
      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
#if defined  (__AVR_ATmega328P__ ) || defined( __AVR_ATmega2560__ )       
        case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	80 93 05 02 	sts	0x0205, r24
     ed6:	95 ce       	rjmp	.-726    	; 0xc02 <gc_execute_line+0xe6>
	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     ed8:	f1 e0       	ldi	r31, 0x01	; 1
     eda:	f0 93 05 02 	sts	0x0205, r31
     ede:	91 ce       	rjmp	.-734    	; 0xc02 <gc_execute_line+0xe6>

	       break;

      case 'G':
      switch(int_value) {
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     ee0:	10 92 05 02 	sts	0x0205, r1
     ee4:	8e ce       	rjmp	.-740    	; 0xc02 <gc_execute_line+0xe6>
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	f0 93 08 02 	sts	0x0208, r31
     eec:	8a ce       	rjmp	.-748    	; 0xc02 <gc_execute_line+0xe6>
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     eee:	e4 e0       	ldi	r30, 0x04	; 4
     ef0:	e0 93 05 02 	sts	0x0205, r30
     ef4:	86 ce       	rjmp	.-756    	; 0xc02 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     ef6:	b1 e0       	ldi	r27, 0x01	; 1
     ef8:	b9 ab       	std	Y+49, r27	; 0x31
     efa:	83 ce       	rjmp	.-762    	; 0xc02 <gc_execute_line+0xe6>
			return(gc.status_code);

	       break;

      case 'G':
      switch(int_value) {
     efc:	b2 e0       	ldi	r27, 0x02	; 2
     efe:	b8 ab       	std	Y+48, r27	; 0x30
     f00:	80 ce       	rjmp	.-768    	; 0xc02 <gc_execute_line+0xe6>
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
        case 21: gc.inches_mode = FALSE; break;
     f02:	10 92 07 02 	sts	0x0207, r1
     f06:	7d ce       	rjmp	.-774    	; 0xc02 <gc_execute_line+0xe6>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     f08:	a1 e0       	ldi	r26, 0x01	; 1
     f0a:	a0 93 07 02 	sts	0x0207, r26
     f0e:	79 ce       	rjmp	.-782    	; 0xc02 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 29 02 	sts	0x0229, r24
  gc.plane_axis_1 = axis_1;
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	90 93 2a 02 	sts	0x022A, r25
  gc.plane_axis_2 = axis_2;
     f1c:	10 92 2b 02 	sts	0x022B, r1
     f20:	70 ce       	rjmp	.-800    	; 0xc02 <gc_execute_line+0xe6>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     f22:	10 92 29 02 	sts	0x0229, r1
  gc.plane_axis_1 = axis_1;
     f26:	e2 e0       	ldi	r30, 0x02	; 2
     f28:	e0 93 2a 02 	sts	0x022A, r30
  gc.plane_axis_2 = axis_2;
     f2c:	f1 e0       	ldi	r31, 0x01	; 1
     f2e:	f0 93 2b 02 	sts	0x022B, r31
     f32:	67 ce       	rjmp	.-818    	; 0xc02 <gc_execute_line+0xe6>
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     f34:	10 92 06 02 	sts	0x0206, r1
     f38:	64 ce       	rjmp	.-824    	; 0xc02 <gc_execute_line+0xe6>
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	90 93 06 02 	sts	0x0206, r25
     f40:	60 ce       	rjmp	.-832    	; 0xc02 <gc_execute_line+0xe6>
        case 21: gc.inches_mode = FALSE; break;
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
        case 90: gc.absolute_mode = TRUE; break;
        case 91: gc.absolute_mode = FALSE; break;
     f42:	83 e0       	ldi	r24, 0x03	; 3
     f44:	88 ab       	std	Y+48, r24	; 0x30
     f46:	5d ce       	rjmp	.-838    	; 0xc02 <gc_execute_line+0xe6>
     f48:	10 92 08 02 	sts	0x0208, r1
     f4c:	5a ce       	rjmp	.-844    	; 0xc02 <gc_execute_line+0xe6>
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
		case 27:  gc.status_code = putdown_part() ;next_action = NEXT_ACTION_DWELL ; break;
     f4e:	0e 94 a4 22 	call	0x4548	; 0x4548 <putdown_part>
     f52:	80 93 04 02 	sts	0x0204, r24
     f56:	b1 e0       	ldi	r27, 0x01	; 1
     f58:	b8 ab       	std	Y+48, r27	; 0x30
     f5a:	53 ce       	rjmp	.-858    	; 0xc02 <gc_execute_line+0xe6>
		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
     f5c:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <tape_knock>
     f60:	b1 e0       	ldi	r27, 0x01	; 1
     f62:	b8 ab       	std	Y+48, r27	; 0x30
     f64:	4e ce       	rjmp	.-868    	; 0xc02 <gc_execute_line+0xe6>
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
     f6e:	a1 e0       	ldi	r26, 0x01	; 1
     f70:	a8 ab       	std	Y+48, r26	; 0x30
     f72:	47 ce       	rjmp	.-882    	; 0xc02 <gc_execute_line+0xe6>
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;

		// vacuum
		case 19: vacuum(1);next_action = NEXT_ACTION_DWELL ;break;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	98 ab       	std	Y+48, r25	; 0x30
     f80:	40 ce       	rjmp	.-896    	; 0xc02 <gc_execute_line+0xe6>
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
		case 18: atc_change(6);break;
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>
     f8a:	3b ce       	rjmp	.-906    	; 0xc02 <gc_execute_line+0xe6>
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
		case 17: atc_change(5);break;
     f8c:	85 e0       	ldi	r24, 0x05	; 5
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>
     f94:	36 ce       	rjmp	.-916    	; 0xc02 <gc_execute_line+0xe6>
		// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
		case 16: atc_change(4);break;
     f96:	84 e0       	ldi	r24, 0x04	; 4
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>
     f9e:	31 ce       	rjmp	.-926    	; 0xc02 <gc_execute_line+0xe6>

		// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
		case 15: atc_change(3);break;
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>
     fa8:	2c ce       	rjmp	.-936    	; 0xc02 <gc_execute_line+0xe6>
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
		case 26:  gc.status_code = pickup_part() ;next_action = NEXT_ACTION_DWELL ; break;
     faa:	0e 94 05 23 	call	0x460a	; 0x460a <pickup_part>
     fae:	80 93 04 02 	sts	0x0204, r24
     fb2:	a1 e0       	ldi	r26, 0x01	; 1
     fb4:	a8 ab       	std	Y+48, r26	; 0x30
     fb6:	25 ce       	rjmp	.-950    	; 0xc02 <gc_execute_line+0xe6>
		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
		case 25: vacuum_test() ;next_action = NEXT_ACTION_DWELL ; break;
     fb8:	0e 94 92 22 	call	0x4524	; 0x4524 <vacuum_test>
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	98 ab       	std	Y+48, r25	; 0x30
     fc0:	20 ce       	rjmp	.-960    	; 0xc02 <gc_execute_line+0xe6>

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
		case 24: gc.status_code = goto_vacpad() ;next_action = NEXT_ACTION_DWELL ; break;
     fc2:	0e 94 3f 21 	call	0x427e	; 0x427e <goto_vacpad>
     fc6:	80 93 04 02 	sts	0x0204, r24
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	88 ab       	std	Y+48, r24	; 0x30
     fce:	19 ce       	rjmp	.-974    	; 0xc02 <gc_execute_line+0xe6>
		case 20: vacuum(0);next_action = NEXT_ACTION_DWELL ;break;

		// tape knock
		case 21: tape_knock();next_action = NEXT_ACTION_DWELL ;break;
		case 22: vacuum_test();next_action = NEXT_ACTION_DWELL ; break;
		case 23: check_for_tool();next_action = NEXT_ACTION_DWELL ; break;
     fd0:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <check_for_tool>
     fd4:	f1 e0       	ldi	r31, 0x01	; 1
     fd6:	f8 ab       	std	Y+48, r31	; 0x30
     fd8:	14 ce       	rjmp	.-984    	; 0xc02 <gc_execute_line+0xe6>
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     fda:	ef ef       	ldi	r30, 0xFF	; 255
     fdc:	ff ef       	ldi	r31, 0xFF	; 255
     fde:	f0 93 0b 02 	sts	0x020B, r31
     fe2:	e0 93 0a 02 	sts	0x020A, r30
     fe6:	0d ce       	rjmp	.-998    	; 0xc02 <gc_execute_line+0xe6>
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	90 93 0b 02 	sts	0x020B, r25
     ff0:	80 93 0a 02 	sts	0x020A, r24
     ff4:	06 ce       	rjmp	.-1012   	; 0xc02 <gc_execute_line+0xe6>
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     ff6:	b2 e0       	ldi	r27, 0x02	; 2
     ff8:	b0 93 09 02 	sts	0x0209, r27
     ffc:	02 ce       	rjmp	.-1020   	; 0xc02 <gc_execute_line+0xe6>
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     ffe:	a1 e0       	ldi	r26, 0x01	; 1
    1000:	a0 93 09 02 	sts	0x0209, r26
    1004:	fe cd       	rjmp	.-1028   	; 0xc02 <gc_execute_line+0xe6>
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
		case 14: atc_change(2);break;
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>
    100e:	f9 cd       	rjmp	.-1038   	; 0xc02 <gc_execute_line+0xe6>
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);break;
		case 13: atc_change(1);break;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>
    1018:	f4 cd       	rjmp	.-1048   	; 0xc02 <gc_execute_line+0xe6>
		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;

		// atc
		case 12: atc_change(0);break;
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>
    1022:	ef cd       	rjmp	.-1058   	; 0xc02 <gc_execute_line+0xe6>
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
        case 11: head_down(0);next_action = NEXT_ACTION_DWELL ;break;
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	88 ab       	std	Y+48, r24	; 0x30
    1030:	e8 cd       	rjmp	.-1072   	; 0xc02 <gc_execute_line+0xe6>
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;

		// head control
        case 10: head_down(1);next_action = NEXT_ACTION_DWELL ;break;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    103a:	f1 e0       	ldi	r31, 0x01	; 1
    103c:	f8 ab       	std	Y+48, r31	; 0x30
    103e:	e1 cd       	rjmp	.-1086   	; 0xc02 <gc_execute_line+0xe6>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
    1040:	10 92 0d 02 	sts	0x020D, r1
    1044:	10 92 0c 02 	sts	0x020C, r1
    1048:	dc cd       	rjmp	.-1096   	; 0xc02 <gc_execute_line+0xe6>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	90 93 0d 02 	sts	0x020D, r25
    1052:	80 93 0c 02 	sts	0x020C, r24
    1056:	d5 cd       	rjmp	.-1110   	; 0xc02 <gc_execute_line+0xe6>
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
    1058:	10 92 0b 02 	sts	0x020B, r1
    105c:	10 92 0a 02 	sts	0x020A, r1
    1060:	d0 cd       	rjmp	.-1120   	; 0xc02 <gc_execute_line+0xe6>

    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1062:	80 91 04 02 	lds	r24, 0x0204
    1066:	88 23       	and	r24, r24
    1068:	09 f0       	breq	.+2      	; 0x106c <gc_execute_line+0x550>
    106a:	cf cd       	rjmp	.-1122   	; 0xc0a <gc_execute_line+0xee>

  char_counter = 0;
    106c:	1b 82       	std	Y+3, r1	; 0x03
    106e:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
    1070:	80 e1       	ldi	r24, 0x10	; 16
    1072:	f6 01       	movw	r30, r12
    1074:	11 92       	st	Z+, r1
    1076:	8a 95       	dec	r24
    1078:	e9 f7       	brne	.-6      	; 0x1074 <gc_execute_line+0x558>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
    107a:	d1 01       	movw	r26, r2
    107c:	e6 e1       	ldi	r30, 0x16	; 22
    107e:	f2 e0       	ldi	r31, 0x02	; 2
    1080:	80 e1       	ldi	r24, 0x10	; 16
    1082:	01 90       	ld	r0, Z+
    1084:	0d 92       	st	X+, r0
    1086:	81 50       	subi	r24, 0x01	; 1
    1088:	e1 f7       	brne	.-8      	; 0x1082 <gc_execute_line+0x566>
    108a:	1c aa       	std	Y+52, r1	; 0x34
    108c:	1d aa       	std	Y+53, r1	; 0x35
    108e:	f0 e8       	ldi	r31, 0x80	; 128
    1090:	fe ab       	std	Y+54, r31	; 0x36
    1092:	8f eb       	ldi	r24, 0xBF	; 191
    1094:	8f ab       	std	Y+55, r24	; 0x37
    1096:	1b aa       	std	Y+51, r1	; 0x33
    1098:	1a aa       	std	Y+50, r1	; 0x32

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    109a:	c4 01       	movw	r24, r8
    109c:	b2 01       	movw	r22, r4
    109e:	a5 01       	movw	r20, r10
    10a0:	93 01       	movw	r18, r6
    10a2:	0e 94 1c 05 	call	0xa38	; 0xa38 <next_statement>
    10a6:	89 2b       	or	r24, r25
    10a8:	09 f4       	brne	.+2      	; 0x10ac <gc_execute_line+0x590>
    10aa:	ed c0       	rjmp	.+474    	; 0x1286 <gc_execute_line+0x76a>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    10ac:	cc 80       	ldd	r12, Y+4	; 0x04
    10ae:	dd 80       	ldd	r13, Y+5	; 0x05
    10b0:	ee 80       	ldd	r14, Y+6	; 0x06
    10b2:	ff 80       	ldd	r15, Y+7	; 0x07
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    10b4:	80 91 07 02 	lds	r24, 0x0207
    10b8:	88 23       	and	r24, r24
    10ba:	d9 f4       	brne	.+54     	; 0x10f2 <gc_execute_line+0x5d6>
    10bc:	a7 01       	movw	r20, r14
    10be:	96 01       	movw	r18, r12

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    10c0:	09 81       	ldd	r16, Y+1	; 0x01
    10c2:	0d 34       	cpi	r16, 0x4D	; 77
    10c4:	19 f1       	breq	.+70     	; 0x110c <gc_execute_line+0x5f0>
    10c6:	0e 34       	cpi	r16, 0x4E	; 78
    10c8:	60 f5       	brcc	.+88     	; 0x1122 <gc_execute_line+0x606>
    10ca:	08 34       	cpi	r16, 0x48	; 72
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <gc_execute_line+0x5b4>
    10ce:	7a c0       	rjmp	.+244    	; 0x11c4 <gc_execute_line+0x6a8>
    10d0:	09 34       	cpi	r16, 0x49	; 73
    10d2:	b8 f5       	brcc	.+110    	; 0x1142 <gc_execute_line+0x626>
    10d4:	03 34       	cpi	r16, 0x43	; 67
    10d6:	09 f4       	brne	.+2      	; 0x10da <gc_execute_line+0x5be>
    10d8:	8a c0       	rjmp	.+276    	; 0x11ee <gc_execute_line+0x6d2>
    10da:	06 34       	cpi	r16, 0x46	; 70
    10dc:	f1 f6       	brne	.-68     	; 0x109a <gc_execute_line+0x57e>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
    10de:	80 91 06 02 	lds	r24, 0x0206
    10e2:	88 23       	and	r24, r24
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <gc_execute_line+0x5cc>
    10e6:	a9 c0       	rjmp	.+338    	; 0x123a <gc_execute_line+0x71e>
    10e8:	2c ab       	std	Y+52, r18	; 0x34
    10ea:	3d ab       	std	Y+53, r19	; 0x35
    10ec:	4e ab       	std	Y+54, r20	; 0x36
    10ee:	5f ab       	std	Y+55, r21	; 0x37
    10f0:	d4 cf       	rjmp	.-88     	; 0x109a <gc_execute_line+0x57e>
}

extern uint8_t dir_bits;

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
    10f2:	c7 01       	movw	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	23 e3       	ldi	r18, 0x33	; 51
    10f8:	33 e3       	ldi	r19, 0x33	; 51
    10fa:	4b ec       	ldi	r20, 0xCB	; 203
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1106:	09 81       	ldd	r16, Y+1	; 0x01
    1108:	0d 34       	cpi	r16, 0x4D	; 77
    110a:	e9 f6       	brne	.-70     	; 0x10c6 <gc_execute_line+0x5aa>
	feeder_x_pos = x;
}

void set_feeder_y( double y )
{
	feeder_x_pos = y;
    110c:	20 93 00 02 	sts	0x0200, r18
    1110:	30 93 01 02 	sts	0x0201, r19
    1114:	40 93 02 02 	sts	0x0202, r20
    1118:	50 93 03 02 	sts	0x0203, r21
    111c:	a1 e0       	ldi	r26, 0x01	; 1
    111e:	a8 ab       	std	Y+48, r26	; 0x30
    1120:	bc cf       	rjmp	.-136    	; 0x109a <gc_execute_line+0x57e>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1122:	03 35       	cpi	r16, 0x53	; 83
    1124:	09 f4       	brne	.+2      	; 0x1128 <gc_execute_line+0x60c>
    1126:	45 c0       	rjmp	.+138    	; 0x11b2 <gc_execute_line+0x696>
    1128:	04 35       	cpi	r16, 0x54	; 84
    112a:	e8 f4       	brcc	.+58     	; 0x1166 <gc_execute_line+0x64a>
    112c:	0e 34       	cpi	r16, 0x4E	; 78
    112e:	09 f4       	brne	.+2      	; 0x1132 <gc_execute_line+0x616>
    1130:	53 c0       	rjmp	.+166    	; 0x11d8 <gc_execute_line+0x6bc>
    1132:	00 35       	cpi	r16, 0x50	; 80
    1134:	09 f0       	breq	.+2      	; 0x1138 <gc_execute_line+0x61c>
    1136:	b1 cf       	rjmp	.-158    	; 0x109a <gc_execute_line+0x57e>
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
    1138:	c8 86       	std	Y+8, r12	; 0x08
    113a:	d9 86       	std	Y+9, r13	; 0x09
    113c:	ea 86       	std	Y+10, r14	; 0x0a
    113e:	fb 86       	std	Y+11, r15	; 0x0b
    1140:	ac cf       	rjmp	.-168    	; 0x109a <gc_execute_line+0x57e>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1142:	0c 34       	cpi	r16, 0x4C	; 76
    1144:	08 f0       	brcs	.+2      	; 0x1148 <gc_execute_line+0x62c>
    1146:	a9 cf       	rjmp	.-174    	; 0x109a <gc_execute_line+0x57e>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
    1148:	e0 2f       	mov	r30, r16
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	e9 54       	subi	r30, 0x49	; 73
    114e:	f0 40       	sbci	r31, 0x00	; 0
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	e8 0d       	add	r30, r8
    115a:	f9 1d       	adc	r31, r9
    115c:	23 8f       	std	Z+27, r18	; 0x1b
    115e:	34 8f       	std	Z+28, r19	; 0x1c
    1160:	45 8f       	std	Z+29, r20	; 0x1d
    1162:	56 8f       	std	Z+30, r21	; 0x1e
    1164:	9a cf       	rjmp	.-204    	; 0x109a <gc_execute_line+0x57e>

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
    1166:	80 2f       	mov	r24, r16
    1168:	88 55       	subi	r24, 0x58	; 88
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	08 f0       	brcs	.+2      	; 0x1170 <gc_execute_line+0x654>
    116e:	95 cf       	rjmp	.-214    	; 0x109a <gc_execute_line+0x57e>
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
    1170:	80 91 08 02 	lds	r24, 0x0208
    1174:	88 23       	and	r24, r24
    1176:	09 f0       	breq	.+2      	; 0x117a <gc_execute_line+0x65e>
    1178:	4c c0       	rjmp	.+152    	; 0x1212 <gc_execute_line+0x6f6>
    117a:	99 a9       	ldd	r25, Y+49	; 0x31
    117c:	99 23       	and	r25, r25
    117e:	09 f0       	breq	.+2      	; 0x1182 <gc_execute_line+0x666>
    1180:	48 c0       	rjmp	.+144    	; 0x1212 <gc_execute_line+0x6f6>
        target[letter - 'X'] = unit_converted_value;
      } else {
        target[letter - 'X'] += unit_converted_value;
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	08 55       	subi	r16, 0x58	; 88
    1186:	10 40       	sbci	r17, 0x00	; 0
    1188:	00 0f       	add	r16, r16
    118a:	11 1f       	adc	r17, r17
    118c:	00 0f       	add	r16, r16
    118e:	11 1f       	adc	r17, r17
    1190:	08 0d       	add	r16, r8
    1192:	19 1d       	adc	r17, r9
    1194:	d8 01       	movw	r26, r16
    1196:	1b 96       	adiw	r26, 0x0b	; 11
    1198:	6d 91       	ld	r22, X+
    119a:	7d 91       	ld	r23, X+
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	1e 97       	sbiw	r26, 0x0e	; 14
    11a2:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    11a6:	f8 01       	movw	r30, r16
    11a8:	63 87       	std	Z+11, r22	; 0x0b
    11aa:	74 87       	std	Z+12, r23	; 0x0c
    11ac:	85 87       	std	Z+13, r24	; 0x0d
    11ae:	96 87       	std	Z+14, r25	; 0x0e
    11b0:	74 cf       	rjmp	.-280    	; 0x109a <gc_execute_line+0x57e>
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
    11b2:	c7 01       	movw	r24, r14
    11b4:	b6 01       	movw	r22, r12
    11b6:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
    11ba:	70 93 28 02 	sts	0x0228, r23
    11be:	60 93 27 02 	sts	0x0227, r22
    11c2:	6b cf       	rjmp	.-298    	; 0x109a <gc_execute_line+0x57e>
      }
	  break;
	  case 'H':

		// amount to move
		head = unit_converted_value;
    11c4:	ca 01       	movw	r24, r20
    11c6:	b9 01       	movw	r22, r18
    11c8:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    11cc:	7b ab       	std	Y+51, r23	; 0x33
    11ce:	6a ab       	std	Y+50, r22	; 0x32
		// move the head
		gc.motion_mode = MOTION_MODE_HEAD;
    11d0:	89 e0       	ldi	r24, 0x09	; 9
    11d2:	80 93 05 02 	sts	0x0205, r24
    11d6:	61 cf       	rjmp	.-318    	; 0x109a <gc_execute_line+0x57e>

static double feeder_x_pos = 0, feeder_y_pos =0;

void set_feeder_x( double x )
{
	feeder_x_pos = x;
    11d8:	20 93 00 02 	sts	0x0200, r18
    11dc:	30 93 01 02 	sts	0x0201, r19
    11e0:	40 93 02 02 	sts	0x0202, r20
    11e4:	50 93 03 02 	sts	0x0203, r21
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	98 ab       	std	Y+48, r25	; 0x30
    11ec:	56 cf       	rjmp	.-340    	; 0x109a <gc_execute_line+0x57e>
      } else {
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
    11ee:	80 91 08 02 	lds	r24, 0x0208
    11f2:	88 23       	and	r24, r24
    11f4:	e9 f4       	brne	.+58     	; 0x1230 <gc_execute_line+0x714>
    11f6:	f9 a9       	ldd	r31, Y+49	; 0x31
    11f8:	ff 23       	and	r31, r31
    11fa:	d1 f4       	brne	.+52     	; 0x1230 <gc_execute_line+0x714>
		target[C_AXIS] = unit_converted_value;
      } else {
        target[C_AXIS] += unit_converted_value;
    11fc:	68 8d       	ldd	r22, Y+24	; 0x18
    11fe:	79 8d       	ldd	r23, Y+25	; 0x19
    1200:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1202:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1204:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1208:	68 8f       	std	Y+24, r22	; 0x18
    120a:	79 8f       	std	Y+25, r23	; 0x19
    120c:	8a 8f       	std	Y+26, r24	; 0x1a
    120e:	9b 8f       	std	Y+27, r25	; 0x1b
    1210:	44 cf       	rjmp	.-376    	; 0x109a <gc_execute_line+0x57e>
      case 'P': p = value; break;
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
        target[letter - 'X'] = unit_converted_value;
    1212:	e0 2f       	mov	r30, r16
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	e8 55       	subi	r30, 0x58	; 88
    1218:	f0 40       	sbci	r31, 0x00	; 0
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	e8 0d       	add	r30, r8
    1224:	f9 1d       	adc	r31, r9
    1226:	23 87       	std	Z+11, r18	; 0x0b
    1228:	34 87       	std	Z+12, r19	; 0x0c
    122a:	45 87       	std	Z+13, r20	; 0x0d
    122c:	56 87       	std	Z+14, r21	; 0x0e
    122e:	35 cf       	rjmp	.-406    	; 0x109a <gc_execute_line+0x57e>
        target[letter - 'X'] += unit_converted_value;
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
		target[C_AXIS] = unit_converted_value;
    1230:	28 8f       	std	Y+24, r18	; 0x18
    1232:	39 8f       	std	Y+25, r19	; 0x19
    1234:	4a 8f       	std	Y+26, r20	; 0x1a
    1236:	5b 8f       	std	Y+27, r21	; 0x1b
    1238:	30 cf       	rjmp	.-416    	; 0x109a <gc_execute_line+0x57e>
    switch(letter) {
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
    123a:	80 91 05 02 	lds	r24, 0x0205
    123e:	88 23       	and	r24, r24
    1240:	89 f4       	brne	.+34     	; 0x1264 <gc_execute_line+0x748>
          gc.seek_rate = unit_converted_value/60;
    1242:	ca 01       	movw	r24, r20
    1244:	b9 01       	movw	r22, r18
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e7       	ldi	r20, 0x70	; 112
    124c:	52 e4       	ldi	r21, 0x42	; 66
    124e:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    1252:	60 93 12 02 	sts	0x0212, r22
    1256:	70 93 13 02 	sts	0x0213, r23
    125a:	80 93 14 02 	sts	0x0214, r24
    125e:	90 93 15 02 	sts	0x0215, r25
    1262:	1b cf       	rjmp	.-458    	; 0x109a <gc_execute_line+0x57e>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
    1264:	ca 01       	movw	r24, r20
    1266:	b9 01       	movw	r22, r18
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e7       	ldi	r20, 0x70	; 112
    126e:	52 e4       	ldi	r21, 0x42	; 66
    1270:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    1274:	60 93 0e 02 	sts	0x020E, r22
    1278:	70 93 0f 02 	sts	0x020F, r23
    127c:	80 93 10 02 	sts	0x0210, r24
    1280:	90 93 11 02 	sts	0x0211, r25
    1284:	0a cf       	rjmp	.-492    	; 0x109a <gc_execute_line+0x57e>

    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1286:	80 91 04 02 	lds	r24, 0x0204
    128a:	88 23       	and	r24, r24
    128c:	09 f0       	breq	.+2      	; 0x1290 <gc_execute_line+0x774>
    128e:	bd cc       	rjmp	.-1670   	; 0xc0a <gc_execute_line+0xee>
    
  // Update spindle state
  if (gc.spindle_direction) {
    1290:	80 91 0a 02 	lds	r24, 0x020A
    1294:	90 91 0b 02 	lds	r25, 0x020B
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	09 f4       	brne	.+2      	; 0x129e <gc_execute_line+0x782>
    129c:	5d c0       	rjmp	.+186    	; 0x1358 <gc_execute_line+0x83c>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
    129e:	40 91 27 02 	lds	r20, 0x0227
    12a2:	50 91 28 02 	lds	r21, 0x0228
    12a6:	66 27       	eor	r22, r22
    12a8:	57 fd       	sbrc	r21, 7
    12aa:	60 95       	com	r22
    12ac:	76 2f       	mov	r23, r22
    12ae:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <spindle_run>
  } else {
    spindle_stop();
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
    12b2:	80 91 0c 02 	lds	r24, 0x020C
    12b6:	90 91 0d 02 	lds	r25, 0x020D
    12ba:	89 2b       	or	r24, r25
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <gc_execute_line+0x7a4>
    12be:	4f c0       	rjmp	.+158    	; 0x135e <gc_execute_line+0x842>
  	coolant_flood(TRUE);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 41 03 	call	0x682	; 0x682 <coolant_flood>
  else {
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    12c8:	b8 a9       	ldd	r27, Y+48	; 0x30
    12ca:	b1 30       	cpi	r27, 0x01	; 1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <gc_execute_line+0x7b4>
    12ce:	63 c0       	rjmp	.+198    	; 0x1396 <gc_execute_line+0x87a>
    12d0:	b1 30       	cpi	r27, 0x01	; 1
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <gc_execute_line+0x7ba>
    12d4:	49 c0       	rjmp	.+146    	; 0x1368 <gc_execute_line+0x84c>
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    12d6:	80 91 05 02 	lds	r24, 0x0205
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <gc_execute_line+0x7c4>
    12de:	7a c0       	rjmp	.+244    	; 0x13d4 <gc_execute_line+0x8b8>
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <gc_execute_line+0x7ca>
    12e4:	6f c0       	rjmp	.+222    	; 0x13c4 <gc_execute_line+0x8a8>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <gc_execute_line+0x7cc>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <gc_execute_line+0x7ce>
    12ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    12ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    12ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    12f2:	28 89       	ldd	r18, Y+16	; 0x10
    12f4:	39 89       	ldd	r19, Y+17	; 0x11
    12f6:	4a 89       	ldd	r20, Y+18	; 0x12
    12f8:	5b 89       	ldd	r21, Y+19	; 0x13
    12fa:	ec 88       	ldd	r14, Y+20	; 0x14
    12fc:	fd 88       	ldd	r15, Y+21	; 0x15
    12fe:	0e 89       	ldd	r16, Y+22	; 0x16
    1300:	1f 89       	ldd	r17, Y+23	; 0x17
    1302:	a8 8c       	ldd	r10, Y+24	; 0x18
    1304:	b9 8c       	ldd	r11, Y+25	; 0x19
    1306:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1308:	db 8c       	ldd	r13, Y+27	; 0x1b
    130a:	60 90 12 02 	lds	r6, 0x0212
    130e:	70 90 13 02 	lds	r7, 0x0213
    1312:	80 90 14 02 	lds	r8, 0x0214
    1316:	90 90 15 02 	lds	r9, 0x0215
    131a:	ad b7       	in	r26, 0x3d	; 61
    131c:	be b7       	in	r27, 0x3e	; 62
    131e:	11 96       	adiw	r26, 0x01	; 1
    1320:	6d 92       	st	X+, r6
    1322:	7d 92       	st	X+, r7
    1324:	8d 92       	st	X+, r8
    1326:	9c 92       	st	X, r9
    1328:	14 97       	sbiw	r26, 0x04	; 4
    132a:	16 96       	adiw	r26, 0x06	; 6
    132c:	1c 92       	st	X, r1
    132e:	1e 92       	st	-X, r1
    1330:	15 97       	sbiw	r26, 0x05	; 5
    1332:	0e 94 23 10 	call	0x2046	; 0x2046 <plan_buffer_line>
    1336:	ed b7       	in	r30, 0x3d	; 61
    1338:	fe b7       	in	r31, 0x3e	; 62
    133a:	36 96       	adiw	r30, 0x06	; 6
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	fe bf       	out	0x3e, r31	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	ed bf       	out	0x3d, r30	; 61
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
    1346:	a6 e1       	ldi	r26, 0x16	; 22
    1348:	b2 e0       	ldi	r27, 0x02	; 2
    134a:	f1 01       	movw	r30, r2
    134c:	80 e1       	ldi	r24, 0x10	; 16
    134e:	01 90       	ld	r0, Z+
    1350:	0d 92       	st	X+, r0
    1352:	81 50       	subi	r24, 0x01	; 1
    1354:	e1 f7       	brne	.-8      	; 0x134e <gc_execute_line+0x832>
    1356:	49 cd       	rjmp	.-1390   	; 0xdea <gc_execute_line+0x2ce>
    
  // Update spindle state
  if (gc.spindle_direction) {
    spindle_run(gc.spindle_direction, gc.spindle_speed);
  } else {
    spindle_stop();
    1358:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <spindle_stop>
    135c:	aa cf       	rjmp	.-172    	; 0x12b2 <gc_execute_line+0x796>
  // Update coolant state
  if (gc.coolant_flood) {
  	coolant_flood(TRUE);
  }
  else {
  	coolant_flood(FALSE);
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 41 03 	call	0x682	; 0x682 <coolant_flood>
    1366:	b0 cf       	rjmp	.-160    	; 0x12c8 <gc_execute_line+0x7ac>
  }
  
  // Perform any physical actions
  switch (next_action) {
    1368:	b2 30       	cpi	r27, 0x02	; 2
    136a:	21 f1       	breq	.+72     	; 0x13b4 <gc_execute_line+0x898>
    136c:	b3 30       	cpi	r27, 0x03	; 3
    136e:	59 f7       	brne	.-42     	; 0x1346 <gc_execute_line+0x82a>
	  rotate_head( head);
	  break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
    1370:	6c 85       	ldd	r22, Y+12	; 0x0c
    1372:	7d 85       	ldd	r23, Y+13	; 0x0d
    1374:	8e 85       	ldd	r24, Y+14	; 0x0e
    1376:	9f 85       	ldd	r25, Y+15	; 0x0f
    1378:	28 89       	ldd	r18, Y+16	; 0x10
    137a:	39 89       	ldd	r19, Y+17	; 0x11
    137c:	4a 89       	ldd	r20, Y+18	; 0x12
    137e:	5b 89       	ldd	r21, Y+19	; 0x13
    1380:	ec 88       	ldd	r14, Y+20	; 0x14
    1382:	fd 88       	ldd	r15, Y+21	; 0x15
    1384:	0e 89       	ldd	r16, Y+22	; 0x16
    1386:	1f 89       	ldd	r17, Y+23	; 0x17
    1388:	a8 8c       	ldd	r10, Y+24	; 0x18
    138a:	b9 8c       	ldd	r11, Y+25	; 0x19
    138c:	ca 8c       	ldd	r12, Y+26	; 0x1a
    138e:	db 8c       	ldd	r13, Y+27	; 0x1b
    1390:	0e 94 2f 0c 	call	0x185e	; 0x185e <plan_set_current>
    1394:	d8 cf       	rjmp	.-80     	; 0x1346 <gc_execute_line+0x82a>
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    1396:	68 85       	ldd	r22, Y+8	; 0x08
    1398:	79 85       	ldd	r23, Y+9	; 0x09
    139a:	8a 85       	ldd	r24, Y+10	; 0x0a
    139c:	9b 85       	ldd	r25, Y+11	; 0x0b
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4a e7       	ldi	r20, 0x7A	; 122
    13a4:	54 e4       	ldi	r21, 0x44	; 68
    13a6:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    13aa:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    13ae:	0e 94 b2 0a 	call	0x1564	; 0x1564 <mc_dwell>
    13b2:	c9 cf       	rjmp	.-110    	; 0x1346 <gc_execute_line+0x82a>
  	coolant_flood(FALSE);
  }
  
  // Perform any physical actions
  switch (next_action) {
    case NEXT_ACTION_GO_HOME: mc_go_home(); memset(target,0,sizeof(target));break;
    13b4:	0e 94 af 0a 	call	0x155e	; 0x155e <mc_go_home>
    13b8:	80 e1       	ldi	r24, 0x10	; 16
    13ba:	f1 01       	movw	r30, r2
    13bc:	11 92       	st	Z+, r1
    13be:	8a 95       	dec	r24
    13c0:	e9 f7       	brne	.-6      	; 0x13bc <gc_execute_line+0x8a0>
    13c2:	c1 cf       	rjmp	.-126    	; 0x1346 <gc_execute_line+0x82a>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
    13c4:	89 30       	cpi	r24, 0x09	; 9
    13c6:	09 f0       	breq	.+2      	; 0x13ca <gc_execute_line+0x8ae>
    13c8:	be cf       	rjmp	.-132    	; 0x1346 <gc_execute_line+0x82a>
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
	  case MOTION_MODE_HEAD:
	  rotate_head( head);
    13ca:	8a a9       	ldd	r24, Y+50	; 0x32
    13cc:	9b a9       	ldd	r25, Y+51	; 0x33
    13ce:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <rotate_head>
    13d2:	b9 cf       	rjmp	.-142    	; 0x1346 <gc_execute_line+0x82a>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
    13d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13d8:	ae 85       	ldd	r26, Y+14	; 0x0e
    13da:	bf 85       	ldd	r27, Y+15	; 0x0f
    13dc:	8c a7       	std	Y+44, r24	; 0x2c
    13de:	9d a7       	std	Y+45, r25	; 0x2d
    13e0:	ae a7       	std	Y+46, r26	; 0x2e
    13e2:	bf a7       	std	Y+47, r27	; 0x2f
    13e4:	68 88       	ldd	r6, Y+16	; 0x10
    13e6:	79 88       	ldd	r7, Y+17	; 0x11
    13e8:	8a 88       	ldd	r8, Y+18	; 0x12
    13ea:	9b 88       	ldd	r9, Y+19	; 0x13
    13ec:	ec 88       	ldd	r14, Y+20	; 0x14
    13ee:	fd 88       	ldd	r15, Y+21	; 0x15
    13f0:	0e 89       	ldd	r16, Y+22	; 0x16
    13f2:	1f 89       	ldd	r17, Y+23	; 0x17
    13f4:	a8 8c       	ldd	r10, Y+24	; 0x18
    13f6:	b9 8c       	ldd	r11, Y+25	; 0x19
    13f8:	ca 8c       	ldd	r12, Y+26	; 0x1a
    13fa:	db 8c       	ldd	r13, Y+27	; 0x1b
    13fc:	60 91 06 02 	lds	r22, 0x0206
    1400:	66 23       	and	r22, r22
    1402:	61 f4       	brne	.+24     	; 0x141c <gc_execute_line+0x900>
    1404:	90 91 0e 02 	lds	r25, 0x020E
    1408:	9c ab       	std	Y+52, r25	; 0x34
    140a:	a0 91 0f 02 	lds	r26, 0x020F
    140e:	ad ab       	std	Y+53, r26	; 0x35
    1410:	b0 91 10 02 	lds	r27, 0x0210
    1414:	be ab       	std	Y+54, r27	; 0x36
    1416:	e0 91 11 02 	lds	r30, 0x0211
    141a:	ef ab       	std	Y+55, r30	; 0x37
    141c:	00 d0       	rcall	.+0      	; 0x141e <gc_execute_line+0x902>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <gc_execute_line+0x904>
    1420:	4d b6       	in	r4, 0x3d	; 61
    1422:	5e b6       	in	r5, 0x3e	; 62
    1424:	08 94       	sec
    1426:	41 1c       	adc	r4, r1
    1428:	51 1c       	adc	r5, r1
    142a:	2c a9       	ldd	r18, Y+52	; 0x34
    142c:	3d a9       	ldd	r19, Y+53	; 0x35
    142e:	4e a9       	ldd	r20, Y+54	; 0x36
    1430:	5f a9       	ldd	r21, Y+55	; 0x37
    1432:	c9 01       	movw	r24, r18
    1434:	da 01       	movw	r26, r20
    1436:	ed b7       	in	r30, 0x3d	; 61
    1438:	fe b7       	in	r31, 0x3e	; 62
    143a:	81 83       	std	Z+1, r24	; 0x01
    143c:	92 83       	std	Z+2, r25	; 0x02
    143e:	a3 83       	std	Z+3, r26	; 0x03
    1440:	b4 83       	std	Z+4, r27	; 0x04
    1442:	d2 01       	movw	r26, r4
    1444:	14 96       	adiw	r26, 0x04	; 4
    1446:	6c 93       	st	X, r22
    1448:	14 97       	sbiw	r26, 0x04	; 4
    144a:	15 96       	adiw	r26, 0x05	; 5
    144c:	1c 92       	st	X, r1
    144e:	6c a5       	ldd	r22, Y+44	; 0x2c
    1450:	7d a5       	ldd	r23, Y+45	; 0x2d
    1452:	8e a5       	ldd	r24, Y+46	; 0x2e
    1454:	9f a5       	ldd	r25, Y+47	; 0x2f
    1456:	a4 01       	movw	r20, r8
    1458:	93 01       	movw	r18, r6
    145a:	0e 94 23 10 	call	0x2046	; 0x2046 <plan_buffer_line>
    145e:	ed b7       	in	r30, 0x3d	; 61
    1460:	fe b7       	in	r31, 0x3e	; 62
    1462:	36 96       	adiw	r30, 0x06	; 6
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	fe bf       	out	0x3e, r31	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	ed bf       	out	0x3d, r30	; 61
    146e:	6b cf       	rjmp	.-298    	; 0x1346 <gc_execute_line+0x82a>

00001470 <theta>:


// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
    1470:	af 92       	push	r10
    1472:	bf 92       	push	r11
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	79 01       	movw	r14, r18
    1482:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
    1484:	5f 77       	andi	r21, 0x7F	; 127
    1486:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    148a:	0e 94 fe 23 	call	0x47fc	; 0x47fc <atan>
    148e:	5b 01       	movw	r10, r22
    1490:	6c 01       	movw	r12, r24
  if (y>0) {
    1492:	c8 01       	movw	r24, r16
    1494:	b7 01       	movw	r22, r14
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__gesf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	5c f4       	brge	.+22     	; 0x14bc <theta+0x4c>
      return(M_PI-theta);
    } else {
      return(-M_PI-theta);
    }
  }
}
    14a6:	b5 01       	movw	r22, r10
    14a8:	c6 01       	movw	r24, r12
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	bf 90       	pop	r11
    14b8:	af 90       	pop	r10
    14ba:	08 95       	ret
{
  double theta = atan(x/fabs(y));
  if (y>0) {
    return(theta);
  } else {
    if (theta>0) 
    14bc:	c6 01       	movw	r24, r12
    14be:	b5 01       	movw	r22, r10
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__gesf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	5c f4       	brge	.+22     	; 0x14e6 <theta+0x76>
    {
      return(M_PI-theta);
    14d0:	6b ed       	ldi	r22, 0xDB	; 219
    14d2:	7f e0       	ldi	r23, 0x0F	; 15
    14d4:	89 e4       	ldi	r24, 0x49	; 73
    14d6:	90 e4       	ldi	r25, 0x40	; 64
    14d8:	a6 01       	movw	r20, r12
    14da:	95 01       	movw	r18, r10
    14dc:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    14e0:	5b 01       	movw	r10, r22
    14e2:	6c 01       	movw	r12, r24
    14e4:	e0 cf       	rjmp	.-64     	; 0x14a6 <theta+0x36>
    } else {
      return(-M_PI-theta);
    14e6:	6b ed       	ldi	r22, 0xDB	; 219
    14e8:	7f e0       	ldi	r23, 0x0F	; 15
    14ea:	89 e4       	ldi	r24, 0x49	; 73
    14ec:	90 ec       	ldi	r25, 0xC0	; 192
    14ee:	a6 01       	movw	r20, r12
    14f0:	95 01       	movw	r18, r10
    14f2:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    14f6:	5b 01       	movw	r10, r22
    14f8:	6c 01       	movw	r12, r24
    14fa:	d5 cf       	rjmp	.-86     	; 0x14a6 <theta+0x36>

000014fc <main>:
// stepper interrupt ack to host
extern char ackHost;

int main(void)
{
  sp_init();        
    14fc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <sp_init>
  settings_init();  
    1500:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <settings_init>
  plan_init();      
    1504:	0e 94 cf 0c 	call	0x199e	; 0x199e <plan_init>
  st_init();        
    1508:	0e 94 5f 18 	call	0x30be	; 0x30be <st_init>
  limits_init();
    150c:	0e 94 44 19 	call	0x3288	; 0x3288 <limits_init>
  spindle_init();   
    1510:	0e 94 33 17 	call	0x2e66	; 0x2e66 <spindle_init>
  coolant_init();
    1514:	0e 94 3f 03 	call	0x67e	; 0x67e <coolant_init>
  atc_init();
    1518:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <atc_init>
  head_init();
    151c:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <head_init>
  vacuum_init();
    1520:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <vacuum_init>
  panel_init();
    1524:	0e 94 1f 20 	call	0x403e	; 0x403e <panel_init>
  gc_init();
    1528:	0e 94 50 05 	call	0xaa0	; 0xaa0 <gc_init>
 
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
    152c:	8f e0       	ldi	r24, 0x0F	; 15
    152e:	93 e0       	ldi	r25, 0x03	; 3
    1530:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    1534:	04 c0       	rjmp	.+8      	; 0x153e <main+0x42>
	if( ackHost != 0 ) {
		serialWrite( ackHost );
		ackHost = 0;
	}

    sp_process(); // ... process the serial protocol
    1536:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <sp_process>

	process_panel(); // check the panel
    153a:	0e 94 a0 20 	call	0x4140	; 0x4140 <process_panel>


	}

  for(;;){
    sleep_mode(); // Wait for it ...
    153e:	83 b7       	in	r24, 0x33	; 51
    1540:	81 60       	ori	r24, 0x01	; 1
    1542:	83 bf       	out	0x33, r24	; 51
    1544:	88 95       	sleep
    1546:	83 b7       	in	r24, 0x33	; 51
    1548:	8e 7f       	andi	r24, 0xFE	; 254
    154a:	83 bf       	out	0x33, r24	; 51
	
	if( ackHost != 0 ) {
    154c:	80 91 4e 05 	lds	r24, 0x054E
    1550:	88 23       	and	r24, r24
    1552:	89 f3       	breq	.-30     	; 0x1536 <main+0x3a>
		serialWrite( ackHost );
    1554:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <serialWrite>
		ackHost = 0;
    1558:	10 92 4e 05 	sts	0x054E, r1
    155c:	ec cf       	rjmp	.-40     	; 0x1536 <main+0x3a>

0000155e <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
    155e:	0e 94 6d 19 	call	0x32da	; 0x32da <st_go_home>
}
    1562:	08 95       	ret

00001564 <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	7b 01       	movw	r14, r22
    1576:	8c 01       	movw	r16, r24
  st_synchronize();
    1578:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <st_synchronize>
  _delay_ms(milliseconds);
    157c:	c8 01       	movw	r24, r16
    157e:	b7 01       	movw	r22, r14
    1580:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__floatunsisf>
    1584:	5b 01       	movw	r10, r22
    1586:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	4a e7       	ldi	r20, 0x7A	; 122
    158e:	55 e4       	ldi	r21, 0x45	; 69
    1590:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1594:	7b 01       	movw	r14, r22
    1596:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	7c f1       	brlt	.+94     	; 0x1606 <mc_dwell+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    15a8:	c8 01       	movw	r24, r16
    15aa:	b7 01       	movw	r22, r14
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__gesf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	ac f4       	brge	.+42     	; 0x15e6 <mc_dwell+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	c6 01       	movw	r24, r12
    15be:	b5 01       	movw	r22, r10
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	51 e4       	ldi	r21, 0x41	; 65
    15c8:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    15cc:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    15d0:	cb 01       	movw	r24, r22
		while(__ticks)
    15d2:	67 2b       	or	r22, r23
    15d4:	79 f0       	breq	.+30     	; 0x15f4 <mc_dwell+0x90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15d6:	20 e9       	ldi	r18, 0x90	; 144
    15d8:	31 e0       	ldi	r19, 0x01	; 1
    15da:	f9 01       	movw	r30, r18
    15dc:	31 97       	sbiw	r30, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <mc_dwell+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e2:	d9 f7       	brne	.-10     	; 0x15da <mc_dwell+0x76>
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <mc_dwell+0x90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	c8 01       	movw	r24, r16
    15e8:	b7 01       	movw	r22, r14
    15ea:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    15ee:	cb 01       	movw	r24, r22
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <mc_dwell+0x8c>
}
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	bf 90       	pop	r11
    1602:	af 90       	pop	r10
    1604:	08 95       	ret
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	f1 cf       	rjmp	.-30     	; 0x15ee <mc_dwell+0x8a>

0000160c <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
    160c:	fc 01       	movw	r30, r24
    160e:	60 91 9d 06 	lds	r22, 0x069D
    1612:	70 91 9e 06 	lds	r23, 0x069E
    1616:	80 91 9f 06 	lds	r24, 0x069F
    161a:	90 91 a0 06 	lds	r25, 0x06A0
    161e:	21 a5       	ldd	r18, Z+41	; 0x29
    1620:	32 a5       	ldd	r19, Z+42	; 0x2a
    1622:	43 a5       	ldd	r20, Z+43	; 0x2b
    1624:	54 a5       	ldd	r21, Z+44	; 0x2c
    1626:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
    162a:	08 95       	ret

0000162c <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
    162c:	80 91 1a 05 	lds	r24, 0x051A
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	08 95       	ret

00001634 <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
    1634:	20 91 06 05 	lds	r18, 0x0506
    1638:	30 91 07 05 	lds	r19, 0x0507
    163c:	80 91 08 05 	lds	r24, 0x0508
    1640:	90 91 09 05 	lds	r25, 0x0509
    1644:	28 17       	cp	r18, r24
    1646:	39 07       	cpc	r19, r25
    1648:	69 f0       	breq	.+26     	; 0x1664 <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
    164a:	80 91 08 05 	lds	r24, 0x0508
    164e:	90 91 09 05 	lds	r25, 0x0509
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	6a e0       	ldi	r22, 0x0A	; 10
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__divmodhi4>
    165c:	90 93 09 05 	sts	0x0509, r25
    1660:	80 93 08 05 	sts	0x0508, r24
    1664:	08 95       	ret

00001666 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    1666:	20 91 06 05 	lds	r18, 0x0506
    166a:	30 91 07 05 	lds	r19, 0x0507
    166e:	80 91 08 05 	lds	r24, 0x0508
    1672:	90 91 09 05 	lds	r25, 0x0509
    1676:	28 17       	cp	r18, r24
    1678:	39 07       	cpc	r19, r25
    167a:	d1 f0       	breq	.+52     	; 0x16b0 <plan_get_current_block+0x4a>
  return(&block_buffer[block_buffer_tail]);
    167c:	20 91 08 05 	lds	r18, 0x0508
    1680:	30 91 09 05 	lds	r19, 0x0509
    1684:	c9 01       	movw	r24, r18
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	ac 01       	movw	r20, r24
    1694:	44 0f       	add	r20, r20
    1696:	55 1f       	adc	r21, r21
    1698:	44 0f       	add	r20, r20
    169a:	55 1f       	adc	r21, r21
    169c:	44 0f       	add	r20, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	48 0f       	add	r20, r24
    16a2:	59 1f       	adc	r21, r25
    16a4:	42 0f       	add	r20, r18
    16a6:	53 1f       	adc	r21, r19
    16a8:	44 5d       	subi	r20, 0xD4	; 212
    16aa:	5d 4f       	sbci	r21, 0xFD	; 253
}
    16ac:	ca 01       	movw	r24, r20
    16ae:	08 95       	ret
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	50 e0       	ldi	r21, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    16b4:	ca 01       	movw	r24, r20
    16b6:	08 95       	ret

000016b8 <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    16b8:	4f 92       	push	r4
    16ba:	5f 92       	push	r5
    16bc:	6f 92       	push	r6
    16be:	7f 92       	push	r7
    16c0:	8f 92       	push	r8
    16c2:	9f 92       	push	r9
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	ec 01       	movw	r28, r24
    16da:	4b 01       	movw	r8, r22
  if(!current) { return; }
    16dc:	61 15       	cp	r22, r1
    16de:	71 05       	cpc	r23, r1
    16e0:	99 f0       	breq	.+38     	; 0x1708 <planner_forward_pass_kernel+0x50>
  if(previous) {
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	89 f0       	breq	.+34     	; 0x1708 <planner_forward_pass_kernel+0x50>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    16e6:	e9 a8       	ldd	r14, Y+49	; 0x31
    16e8:	fa a8       	ldd	r15, Y+50	; 0x32
    16ea:	0b a9       	ldd	r16, Y+51	; 0x33
    16ec:	1c a9       	ldd	r17, Y+52	; 0x34
    16ee:	fb 01       	movw	r30, r22
    16f0:	41 a8       	ldd	r4, Z+49	; 0x31
    16f2:	52 a8       	ldd	r5, Z+50	; 0x32
    16f4:	63 a8       	ldd	r6, Z+51	; 0x33
    16f6:	74 a8       	ldd	r7, Z+52	; 0x34
    16f8:	c8 01       	movw	r24, r16
    16fa:	b7 01       	movw	r22, r14
    16fc:	a3 01       	movw	r20, r6
    16fe:	92 01       	movw	r18, r4
    1700:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
    1704:	88 23       	and	r24, r24
    1706:	8c f0       	brlt	.+34     	; 0x172a <planner_forward_pass_kernel+0x72>
      if (max_entry_factor < current->entry_factor) {
        current->entry_factor = max_entry_factor;
      }
    }
  }
}
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	7f 90       	pop	r7
    1722:	6f 90       	pop	r6
    1724:	5f 90       	pop	r5
    1726:	4f 90       	pop	r4
    1728:	08 95       	ret
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    172a:	f4 01       	movw	r30, r8
    172c:	a1 a4       	ldd	r10, Z+41	; 0x29
    172e:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1730:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1732:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1734:	c8 01       	movw	r24, r16
    1736:	b7 01       	movw	r22, r14
    1738:	a6 01       	movw	r20, r12
    173a:	95 01       	movw	r18, r10
    173c:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1740:	9b 01       	movw	r18, r22
    1742:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1744:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1748:	7b 01       	movw	r14, r22
    174a:	8c 01       	movw	r16, r24
    174c:	20 91 99 06 	lds	r18, 0x0699
    1750:	30 91 9a 06 	lds	r19, 0x069A
    1754:	40 91 9b 06 	lds	r20, 0x069B
    1758:	50 91 9c 06 	lds	r21, 0x069C
    175c:	50 58       	subi	r21, 0x80	; 128
    175e:	ca 01       	movw	r24, r20
    1760:	b9 01       	movw	r22, r18
    1762:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e7       	ldi	r20, 0x70	; 112
    176c:	52 e4       	ldi	r21, 0x42	; 66
    176e:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e7       	ldi	r20, 0x70	; 112
    1778:	52 ec       	ldi	r21, 0xC2	; 194
    177a:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    177e:	2d a5       	ldd	r18, Y+45	; 0x2d
    1780:	3e a5       	ldd	r19, Y+46	; 0x2e
    1782:	4f a5       	ldd	r20, Y+47	; 0x2f
    1784:	58 a9       	ldd	r21, Y+48	; 0x30
    1786:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    178a:	9b 01       	movw	r18, r22
    178c:	ac 01       	movw	r20, r24
    178e:	c8 01       	movw	r24, r16
    1790:	b7 01       	movw	r22, r14
    1792:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1796:	0e 94 f5 26 	call	0x4dea	; 0x4dea <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    179a:	a6 01       	movw	r20, r12
    179c:	95 01       	movw	r18, r10
    179e:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    17a2:	7b 01       	movw	r14, r22
    17a4:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	a8 01       	movw	r20, r16
    17ac:	97 01       	movw	r18, r14
    17ae:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__gesf2>
    17b2:	18 16       	cp	r1, r24
    17b4:	0c f0       	brlt	.+2      	; 0x17b8 <planner_forward_pass_kernel+0x100>
    17b6:	a8 cf       	rjmp	.-176    	; 0x1708 <planner_forward_pass_kernel+0x50>
        current->entry_factor = max_entry_factor;
    17b8:	f4 01       	movw	r30, r8
    17ba:	e1 aa       	std	Z+49, r14	; 0x31
    17bc:	f2 aa       	std	Z+50, r15	; 0x32
    17be:	03 ab       	std	Z+51, r16	; 0x33
    17c0:	14 ab       	std	Z+52, r17	; 0x34
    17c2:	a2 cf       	rjmp	.-188    	; 0x1708 <planner_forward_pass_kernel+0x50>

000017c4 <planner_forward_pass>:
  }
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    17d0:	80 91 08 05 	lds	r24, 0x0508
    17d4:	90 91 09 05 	lds	r25, 0x0509
    17d8:	48 2f       	mov	r20, r24
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    17da:	08 2f       	mov	r16, r24
    17dc:	11 27       	eor	r17, r17
    17de:	07 fd       	sbrc	r16, 7
    17e0:	10 95       	com	r17
    17e2:	80 91 06 05 	lds	r24, 0x0506
    17e6:	90 91 07 05 	lds	r25, 0x0507
    17ea:	08 17       	cp	r16, r24
    17ec:	19 07       	cpc	r17, r25
    17ee:	91 f1       	breq	.+100    	; 0x1854 <planner_forward_pass+0x90>
    17f0:	ee 24       	eor	r14, r14
    17f2:	ff 24       	eor	r15, r15
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <planner_forward_pass+0x38>
    17fa:	7e 01       	movw	r14, r28
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    17fc:	89 e4       	ldi	r24, 0x49	; 73
    17fe:	48 02       	muls	r20, r24
    1800:	e0 01       	movw	r28, r0
    1802:	11 24       	eor	r1, r1
    1804:	c4 5d       	subi	r28, 0xD4	; 212
    1806:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    1808:	c9 01       	movw	r24, r18
    180a:	b7 01       	movw	r22, r14
    180c:	ae 01       	movw	r20, r28
    180e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1812:	c8 01       	movw	r24, r16
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	6a e0       	ldi	r22, 0x0A	; 10
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__divmodhi4>
    181e:	48 2f       	mov	r20, r24
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1820:	08 2f       	mov	r16, r24
    1822:	11 27       	eor	r17, r17
    1824:	07 fd       	sbrc	r16, 7
    1826:	10 95       	com	r17
    1828:	80 91 06 05 	lds	r24, 0x0506
    182c:	90 91 07 05 	lds	r25, 0x0507
    1830:	97 01       	movw	r18, r14
    1832:	08 17       	cp	r16, r24
    1834:	19 07       	cpc	r17, r25
    1836:	09 f7       	brne	.-62     	; 0x17fa <planner_forward_pass+0x36>
    1838:	b7 01       	movw	r22, r14
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    183a:	cb 01       	movw	r24, r22
    183c:	be 01       	movw	r22, r28
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <planner_forward_pass_kernel>
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	08 95       	ret
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1854:	c0 e0       	ldi	r28, 0x00	; 0
    1856:	d0 e0       	ldi	r29, 0x00	; 0
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	ee cf       	rjmp	.-36     	; 0x183a <planner_forward_pass+0x76>

0000185e <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    185e:	2f 92       	push	r2
    1860:	3f 92       	push	r3
    1862:	4f 92       	push	r4
    1864:	5f 92       	push	r5
    1866:	6f 92       	push	r6
    1868:	7f 92       	push	r7
    186a:	8f 92       	push	r8
    186c:	9f 92       	push	r9
    186e:	af 92       	push	r10
    1870:	bf 92       	push	r11
    1872:	cf 92       	push	r12
    1874:	df 92       	push	r13
    1876:	ef 92       	push	r14
    1878:	ff 92       	push	r15
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	3b 01       	movw	r6, r22
    1880:	4c 01       	movw	r8, r24
    1882:	19 01       	movw	r2, r18
    1884:	2a 01       	movw	r4, r20
	st_synchronize();
    1886:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    188a:	c4 01       	movw	r24, r8
    188c:	b3 01       	movw	r22, r6
    188e:	20 91 7b 06 	lds	r18, 0x067B
    1892:	30 91 7c 06 	lds	r19, 0x067C
    1896:	40 91 7d 06 	lds	r20, 0x067D
    189a:	50 91 7e 06 	lds	r21, 0x067E
    189e:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    18a2:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    18a6:	ea e0       	ldi	r30, 0x0A	; 10
    18a8:	8e 2e       	mov	r8, r30
    18aa:	e5 e0       	ldi	r30, 0x05	; 5
    18ac:	9e 2e       	mov	r9, r30
    18ae:	60 93 0a 05 	sts	0x050A, r22
    18b2:	70 93 0b 05 	sts	0x050B, r23
    18b6:	80 93 0c 05 	sts	0x050C, r24
    18ba:	90 93 0d 05 	sts	0x050D, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    18be:	c2 01       	movw	r24, r4
    18c0:	b1 01       	movw	r22, r2
    18c2:	20 91 7f 06 	lds	r18, 0x067F
    18c6:	30 91 80 06 	lds	r19, 0x0680
    18ca:	40 91 81 06 	lds	r20, 0x0681
    18ce:	50 91 82 06 	lds	r21, 0x0682
    18d2:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    18d6:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    18da:	f4 01       	movw	r30, r8
    18dc:	34 96       	adiw	r30, 0x04	; 4
    18de:	60 93 0e 05 	sts	0x050E, r22
    18e2:	71 83       	std	Z+1, r23	; 0x01
    18e4:	82 83       	std	Z+2, r24	; 0x02
    18e6:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    18e8:	c8 01       	movw	r24, r16
    18ea:	b7 01       	movw	r22, r14
    18ec:	20 91 83 06 	lds	r18, 0x0683
    18f0:	30 91 84 06 	lds	r19, 0x0684
    18f4:	40 91 85 06 	lds	r20, 0x0685
    18f8:	50 91 86 06 	lds	r21, 0x0686
    18fc:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1900:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    1904:	f4 01       	movw	r30, r8
    1906:	38 96       	adiw	r30, 0x08	; 8
    1908:	60 93 12 05 	sts	0x0512, r22
    190c:	71 83       	std	Z+1, r23	; 0x01
    190e:	82 83       	std	Z+2, r24	; 0x02
    1910:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1912:	c6 01       	movw	r24, r12
    1914:	b5 01       	movw	r22, r10
    1916:	20 91 87 06 	lds	r18, 0x0687
    191a:	30 91 88 06 	lds	r19, 0x0688
    191e:	40 91 89 06 	lds	r20, 0x0689
    1922:	50 91 8a 06 	lds	r21, 0x068A
    1926:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    192a:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    192e:	2c e0       	ldi	r18, 0x0C	; 12
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	82 0e       	add	r8, r18
    1934:	93 1e       	adc	r9, r19
    1936:	60 93 16 05 	sts	0x0516, r22
    193a:	f4 01       	movw	r30, r8
    193c:	71 83       	std	Z+1, r23	; 0x01
    193e:	82 83       	std	Z+2, r24	; 0x02
    1940:	93 83       	std	Z+3, r25	; 0x03
}
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	bf 90       	pop	r11
    1950:	af 90       	pop	r10
    1952:	9f 90       	pop	r9
    1954:	8f 90       	pop	r8
    1956:	7f 90       	pop	r7
    1958:	6f 90       	pop	r6
    195a:	5f 90       	pop	r5
    195c:	4f 90       	pop	r4
    195e:	3f 90       	pop	r3
    1960:	2f 90       	pop	r2
    1962:	08 95       	ret

00001964 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	80 91 1a 05 	lds	r24, 0x051A
    1970:	81 11       	cpse	r24, r1
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	20 97       	sbiw	r28, 0x00	; 0
    1978:	09 f0       	breq	.+2      	; 0x197c <plan_set_acceleration_manager_enabled+0x18>
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	98 17       	cp	r25, r24
    197e:	31 f0       	breq	.+12     	; 0x198c <plan_set_acceleration_manager_enabled+0x28>
    st_synchronize();
    1980:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    1984:	10 92 1a 05 	sts	0x051A, r1
    1988:	cd 2b       	or	r28, r29
    198a:	19 f4       	brne	.+6      	; 0x1992 <plan_set_acceleration_manager_enabled+0x2e>
  }
}
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	08 95       	ret
}

void plan_set_acceleration_manager_enabled(int enabled) {
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    st_synchronize();
    acceleration_manager_enabled = !!enabled;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	80 93 1a 05 	sts	0x051A, r24
  }
}
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    199e:	10 92 07 05 	sts	0x0507, r1
    19a2:	10 92 06 05 	sts	0x0506, r1
  block_buffer_tail = 0;
    19a6:	10 92 09 05 	sts	0x0509, r1
    19aa:	10 92 08 05 	sts	0x0508, r1
  plan_set_acceleration_manager_enabled(TRUE);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    19b6:	80 e1       	ldi	r24, 0x10	; 16
    19b8:	ea e0       	ldi	r30, 0x0A	; 10
    19ba:	f5 e0       	ldi	r31, 0x05	; 5
    19bc:	df 01       	movw	r26, r30
    19be:	1d 92       	st	X+, r1
    19c0:	8a 95       	dec	r24
    19c2:	e9 f7       	brne	.-6      	; 0x19be <plan_init+0x20>
}
    19c4:	08 95       	ret

000019c6 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    19c6:	2f 92       	push	r2
    19c8:	3f 92       	push	r3
    19ca:	4f 92       	push	r4
    19cc:	5f 92       	push	r5
    19ce:	6f 92       	push	r6
    19d0:	7f 92       	push	r7
    19d2:	8f 92       	push	r8
    19d4:	9f 92       	push	r9
    19d6:	af 92       	push	r10
    19d8:	bf 92       	push	r11
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <planner_reverse_pass_kernel+0x26>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <planner_reverse_pass_kernel+0x28>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	8c 01       	movw	r16, r24
    19f4:	7e 83       	std	Y+6, r23	; 0x06
    19f6:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    19f8:	67 2b       	or	r22, r23
    19fa:	09 f4       	brne	.+2      	; 0x19fe <planner_reverse_pass_kernel+0x38>
    19fc:	a3 c0       	rjmp	.+326    	; 0x1b44 <planner_reverse_pass_kernel+0x17e>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    19fe:	41 15       	cp	r20, r1
    1a00:	51 05       	cpc	r21, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <planner_reverse_pass_kernel+0x40>
    1a04:	19 c1       	rjmp	.+562    	; 0x1c38 <planner_reverse_pass_kernel+0x272>
    exit_factor = next->entry_factor;
    1a06:	da 01       	movw	r26, r20
    1a08:	d1 96       	adiw	r26, 0x31	; 49
    1a0a:	8d 91       	ld	r24, X+
    1a0c:	9d 91       	ld	r25, X+
    1a0e:	0d 90       	ld	r0, X+
    1a10:	bc 91       	ld	r27, X
    1a12:	a0 2d       	mov	r26, r0
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	ab 83       	std	Y+3, r26	; 0x03
    1a1a:	bc 83       	std	Y+4, r27	; 0x04
  } else {
    exit_factor = factor_for_safe_speed(current);
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1a1c:	01 15       	cp	r16, r1
    1a1e:	11 05       	cpc	r17, r1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <planner_reverse_pass_kernel+0x5e>
    1a22:	03 c1       	rjmp	.+518    	; 0x1c2a <planner_reverse_pass_kernel+0x264>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1a24:	f8 01       	movw	r30, r16
    1a26:	61 8d       	ldd	r22, Z+25	; 0x19
    1a28:	72 8d       	ldd	r23, Z+26	; 0x1a
    1a2a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a2c:	94 8d       	ldd	r25, Z+28	; 0x1c
    1a2e:	ad 81       	ldd	r26, Y+5	; 0x05
    1a30:	be 81       	ldd	r27, Y+6	; 0x06
    1a32:	59 96       	adiw	r26, 0x19	; 25
    1a34:	2d 91       	ld	r18, X+
    1a36:	3d 91       	ld	r19, X+
    1a38:	4d 91       	ld	r20, X+
    1a3a:	5c 91       	ld	r21, X
    1a3c:	5c 97       	sbiw	r26, 0x1c	; 28
    1a3e:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    1a42:	9b 01       	movw	r18, r22
    1a44:	ac 01       	movw	r20, r24
    1a46:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1a4a:	1b 01       	movw	r2, r22
    1a4c:	2c 01       	movw	r4, r24
    1a4e:	f8 01       	movw	r30, r16
    1a50:	65 8d       	ldd	r22, Z+29	; 0x1d
    1a52:	76 8d       	ldd	r23, Z+30	; 0x1e
    1a54:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a56:	90 a1       	ldd	r25, Z+32	; 0x20
    1a58:	ad 81       	ldd	r26, Y+5	; 0x05
    1a5a:	be 81       	ldd	r27, Y+6	; 0x06
    1a5c:	5d 96       	adiw	r26, 0x1d	; 29
    1a5e:	2d 91       	ld	r18, X+
    1a60:	3d 91       	ld	r19, X+
    1a62:	4d 91       	ld	r20, X+
    1a64:	5c 91       	ld	r21, X
    1a66:	90 97       	sbiw	r26, 0x20	; 32
    1a68:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	ac 01       	movw	r20, r24
    1a70:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1a74:	3b 01       	movw	r6, r22
    1a76:	4c 01       	movw	r8, r24
    1a78:	f8 01       	movw	r30, r16
    1a7a:	61 a1       	ldd	r22, Z+33	; 0x21
    1a7c:	72 a1       	ldd	r23, Z+34	; 0x22
    1a7e:	83 a1       	ldd	r24, Z+35	; 0x23
    1a80:	94 a1       	ldd	r25, Z+36	; 0x24
    1a82:	ad 81       	ldd	r26, Y+5	; 0x05
    1a84:	be 81       	ldd	r27, Y+6	; 0x06
    1a86:	91 96       	adiw	r26, 0x21	; 33
    1a88:	2d 91       	ld	r18, X+
    1a8a:	3d 91       	ld	r19, X+
    1a8c:	4d 91       	ld	r20, X+
    1a8e:	5c 91       	ld	r21, X
    1a90:	94 97       	sbiw	r26, 0x24	; 36
    1a92:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    1a96:	9b 01       	movw	r18, r22
    1a98:	ac 01       	movw	r20, r24
    1a9a:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1a9e:	5b 01       	movw	r10, r22
    1aa0:	6c 01       	movw	r12, r24
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	65 a1       	ldd	r22, Z+37	; 0x25
    1aa6:	76 a1       	ldd	r23, Z+38	; 0x26
    1aa8:	87 a1       	ldd	r24, Z+39	; 0x27
    1aaa:	90 a5       	ldd	r25, Z+40	; 0x28
    1aac:	ad 81       	ldd	r26, Y+5	; 0x05
    1aae:	be 81       	ldd	r27, Y+6	; 0x06
    1ab0:	95 96       	adiw	r26, 0x25	; 37
    1ab2:	2d 91       	ld	r18, X+
    1ab4:	3d 91       	ld	r19, X+
    1ab6:	4d 91       	ld	r20, X+
    1ab8:	5c 91       	ld	r21, X
    1aba:	98 97       	sbiw	r26, 0x28	; 40
    1abc:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1ac8:	7b 01       	movw	r14, r22
    1aca:	8c 01       	movw	r16, r24
    1acc:	c2 01       	movw	r24, r4
    1ace:	b1 01       	movw	r22, r2
    1ad0:	a4 01       	movw	r20, r8
    1ad2:	93 01       	movw	r18, r6
    1ad4:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1ad8:	a6 01       	movw	r20, r12
    1ada:	95 01       	movw	r18, r10
    1adc:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1ae0:	a8 01       	movw	r20, r16
    1ae2:	97 01       	movw	r18, r14
    1ae4:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1ae8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <sqrt>
    1aec:	5b 01       	movw	r10, r22
    1aee:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    1af0:	e0 90 9d 06 	lds	r14, 0x069D
    1af4:	f0 90 9e 06 	lds	r15, 0x069E
    1af8:	00 91 9f 06 	lds	r16, 0x069F
    1afc:	10 91 a0 06 	lds	r17, 0x06A0
    1b00:	c8 01       	movw	r24, r16
    1b02:	b7 01       	movw	r22, r14
    1b04:	a6 01       	movw	r20, r12
    1b06:	95 01       	movw	r18, r10
    1b08:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
    1b0c:	87 fd       	sbrc	r24, 7
    1b0e:	33 c0       	rjmp	.+102    	; 0x1b76 <planner_reverse_pass_kernel+0x1b0>
    1b10:	0f 2e       	mov	r0, r31
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	6f 2e       	mov	r6, r31
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	7f 2e       	mov	r7, r31
    1b1a:	f0 e8       	ldi	r31, 0x80	; 128
    1b1c:	8f 2e       	mov	r8, r31
    1b1e:	ff e3       	ldi	r31, 0x3F	; 63
    1b20:	9f 2e       	mov	r9, r31
    1b22:	f0 2d       	mov	r31, r0
      entry_factor = (settings.max_jerk/jerk);
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    1b24:	c4 01       	movw	r24, r8
    1b26:	b3 01       	movw	r22, r6
    1b28:	29 81       	ldd	r18, Y+1	; 0x01
    1b2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b2c:	4b 81       	ldd	r20, Y+3	; 0x03
    1b2e:	5c 81       	ldd	r21, Y+4	; 0x04
    1b30:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__gesf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	44 f1       	brlt	.+80     	; 0x1b88 <planner_reverse_pass_kernel+0x1c2>
  } else {
    entry_factor = factor_for_safe_speed(current);
  }
    
  // Store result
  current->entry_factor = entry_factor;
    1b38:	ed 81       	ldd	r30, Y+5	; 0x05
    1b3a:	fe 81       	ldd	r31, Y+6	; 0x06
    1b3c:	61 aa       	std	Z+49, r6	; 0x31
    1b3e:	72 aa       	std	Z+50, r7	; 0x32
    1b40:	83 aa       	std	Z+51, r8	; 0x33
    1b42:	94 aa       	std	Z+52, r9	; 0x34
}
    1b44:	26 96       	adiw	r28, 0x06	; 6
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	bf 90       	pop	r11
    1b62:	af 90       	pop	r10
    1b64:	9f 90       	pop	r9
    1b66:	8f 90       	pop	r8
    1b68:	7f 90       	pop	r7
    1b6a:	6f 90       	pop	r6
    1b6c:	5f 90       	pop	r5
    1b6e:	4f 90       	pop	r4
    1b70:	3f 90       	pop	r3
    1b72:	2f 90       	pop	r2
    1b74:	08 95       	ret
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
      entry_factor = (settings.max_jerk/jerk);
    1b76:	c8 01       	movw	r24, r16
    1b78:	b7 01       	movw	r22, r14
    1b7a:	a6 01       	movw	r20, r12
    1b7c:	95 01       	movw	r18, r10
    1b7e:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    1b82:	3b 01       	movw	r6, r22
    1b84:	4c 01       	movw	r8, r24
    1b86:	ce cf       	rjmp	.-100    	; 0x1b24 <planner_reverse_pass_kernel+0x15e>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    1b88:	ed 81       	ldd	r30, Y+5	; 0x05
    1b8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1b8c:	a1 a4       	ldd	r10, Z+41	; 0x29
    1b8e:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1b90:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1b92:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1b94:	c6 01       	movw	r24, r12
    1b96:	b5 01       	movw	r22, r10
    1b98:	29 81       	ldd	r18, Y+1	; 0x01
    1b9a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9c:	4b 81       	ldd	r20, Y+3	; 0x03
    1b9e:	5c 81       	ldd	r21, Y+4	; 0x04
    1ba0:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1ba4:	9b 01       	movw	r18, r22
    1ba6:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    1ba8:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1bac:	7b 01       	movw	r14, r22
    1bae:	8c 01       	movw	r16, r24
    1bb0:	20 91 99 06 	lds	r18, 0x0699
    1bb4:	30 91 9a 06 	lds	r19, 0x069A
    1bb8:	40 91 9b 06 	lds	r20, 0x069B
    1bbc:	50 91 9c 06 	lds	r21, 0x069C
    1bc0:	50 58       	subi	r21, 0x80	; 128
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	b9 01       	movw	r22, r18
    1bc6:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e7       	ldi	r20, 0x70	; 112
    1bd0:	52 e4       	ldi	r21, 0x42	; 66
    1bd2:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e7       	ldi	r20, 0x70	; 112
    1bdc:	52 ec       	ldi	r21, 0xC2	; 194
    1bde:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1be2:	ad 81       	ldd	r26, Y+5	; 0x05
    1be4:	be 81       	ldd	r27, Y+6	; 0x06
    1be6:	9d 96       	adiw	r26, 0x2d	; 45
    1be8:	2d 91       	ld	r18, X+
    1bea:	3d 91       	ld	r19, X+
    1bec:	4d 91       	ld	r20, X+
    1bee:	5c 91       	ld	r21, X
    1bf0:	d0 97       	sbiw	r26, 0x30	; 48
    1bf2:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1bf6:	9b 01       	movw	r18, r22
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1c02:	0e 94 f5 26 	call	0x4dea	; 0x4dea <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1c06:	a6 01       	movw	r20, r12
    1c08:	95 01       	movw	r18, r10
    1c0a:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    1c0e:	7b 01       	movw	r14, r22
    1c10:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    1c12:	c4 01       	movw	r24, r8
    1c14:	b3 01       	movw	r22, r6
    1c16:	a8 01       	movw	r20, r16
    1c18:	97 01       	movw	r18, r14
    1c1a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__gesf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	0c f0       	brlt	.+2      	; 0x1c24 <planner_reverse_pass_kernel+0x25e>
    1c22:	8a cf       	rjmp	.-236    	; 0x1b38 <planner_reverse_pass_kernel+0x172>
    1c24:	37 01       	movw	r6, r14
    1c26:	48 01       	movw	r8, r16
    1c28:	87 cf       	rjmp	.-242    	; 0x1b38 <planner_reverse_pass_kernel+0x172>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2e:	0e 94 06 0b 	call	0x160c	; 0x160c <factor_for_safe_speed>
    1c32:	3b 01       	movw	r6, r22
    1c34:	4c 01       	movw	r8, r24
    1c36:	80 cf       	rjmp	.-256    	; 0x1b38 <planner_reverse_pass_kernel+0x172>
  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    exit_factor = next->entry_factor;
  } else {
    exit_factor = factor_for_safe_speed(current);
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	0e 94 06 0b 	call	0x160c	; 0x160c <factor_for_safe_speed>
    1c40:	69 83       	std	Y+1, r22	; 0x01
    1c42:	7a 83       	std	Y+2, r23	; 0x02
    1c44:	8b 83       	std	Y+3, r24	; 0x03
    1c46:	9c 83       	std	Y+4, r25	; 0x04
    1c48:	e9 ce       	rjmp	.-558    	; 0x1a1c <planner_reverse_pass_kernel+0x56>

00001c4a <planner_reverse_pass>:
  current->entry_factor = entry_factor;
}

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1c58:	80 91 06 05 	lds	r24, 0x0506
    1c5c:	90 91 07 05 	lds	r25, 0x0507
    1c60:	f8 2e       	mov	r15, r24
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1c62:	20 91 08 05 	lds	r18, 0x0508
    1c66:	30 91 09 05 	lds	r19, 0x0509
    1c6a:	99 27       	eor	r25, r25
    1c6c:	87 fd       	sbrc	r24, 7
    1c6e:	90 95       	com	r25
    1c70:	82 17       	cp	r24, r18
    1c72:	93 07       	cpc	r25, r19
    1c74:	b9 f1       	breq	.+110    	; 0x1ce4 <planner_reverse_pass+0x9a>
    1c76:	00 e0       	ldi	r16, 0x00	; 0
    1c78:	10 e0       	ldi	r17, 0x00	; 0
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	19 c0       	rjmp	.+50     	; 0x1cb2 <planner_reverse_pass+0x68>
    block_index--;
    if(block_index < 0) {
    1c80:	8f 2d       	mov	r24, r15
    1c82:	99 e4       	ldi	r25, 0x49	; 73
    1c84:	89 02       	muls	r24, r25
    1c86:	b0 01       	movw	r22, r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	cf 2c       	mov	r12, r15
    1c8c:	dd 24       	eor	r13, r13
    1c8e:	c7 fc       	sbrc	r12, 7
    1c90:	d0 94       	com	r13
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    1c92:	eb 01       	movw	r28, r22
    1c94:	c4 5d       	subi	r28, 0xD4	; 212
    1c96:	dd 4f       	sbci	r29, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    1c98:	ce 01       	movw	r24, r28
    1c9a:	b8 01       	movw	r22, r16
    1c9c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <planner_reverse_pass_kernel>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1ca0:	80 91 08 05 	lds	r24, 0x0508
    1ca4:	90 91 09 05 	lds	r25, 0x0509
    1ca8:	a8 01       	movw	r20, r16
    1caa:	8c 15       	cp	r24, r12
    1cac:	9d 05       	cpc	r25, r13
    1cae:	61 f0       	breq	.+24     	; 0x1cc8 <planner_reverse_pass+0x7e>
    1cb0:	8e 01       	movw	r16, r28
    block_index--;
    1cb2:	fa 94       	dec	r15
    if(block_index < 0) {
    1cb4:	f7 fe       	sbrs	r15, 7
    1cb6:	e4 cf       	rjmp	.-56     	; 0x1c80 <planner_reverse_pass+0x36>
    1cb8:	a9 e0       	ldi	r26, 0x09	; 9
    1cba:	fa 2e       	mov	r15, r26
    1cbc:	61 e9       	ldi	r22, 0x91	; 145
    1cbe:	72 e0       	ldi	r23, 0x02	; 2
    1cc0:	f9 e0       	ldi	r31, 0x09	; 9
    1cc2:	cf 2e       	mov	r12, r31
    1cc4:	d1 2c       	mov	r13, r1
    1cc6:	e5 cf       	rjmp	.-54     	; 0x1c92 <planner_reverse_pass+0x48>
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1cc8:	a8 01       	movw	r20, r16
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	be 01       	movw	r22, r28
    1cd0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <planner_reverse_pass_kernel>
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	08 95       	ret
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    1ce4:	c0 e0       	ldi	r28, 0x00	; 0
    1ce6:	d0 e0       	ldi	r29, 0x00	; 0
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	ee cf       	rjmp	.-36     	; 0x1cca <planner_reverse_pass+0x80>

00001cee <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    1cee:	2f 92       	push	r2
    1cf0:	3f 92       	push	r3
    1cf2:	4f 92       	push	r4
    1cf4:	5f 92       	push	r5
    1cf6:	6f 92       	push	r6
    1cf8:	7f 92       	push	r7
    1cfa:	8f 92       	push	r8
    1cfc:	9f 92       	push	r9
    1cfe:	af 92       	push	r10
    1d00:	bf 92       	push	r11
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	62 97       	sbiw	r28, 0x12	; 18
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	9a 8b       	std	Y+18, r25	; 0x12
    1d24:	89 8b       	std	Y+17, r24	; 0x11
    1d26:	6a 01       	movw	r12, r20
    1d28:	7b 01       	movw	r14, r22
    1d2a:	18 01       	movw	r2, r16
    1d2c:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1d2e:	fc 01       	movw	r30, r24
    1d30:	65 89       	ldd	r22, Z+21	; 0x15
    1d32:	76 89       	ldd	r23, Z+22	; 0x16
    1d34:	87 89       	ldd	r24, Z+23	; 0x17
    1d36:	90 8d       	ldd	r25, Z+24	; 0x18
    1d38:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__floatunsisf>
    1d3c:	3b 01       	movw	r6, r22
    1d3e:	4c 01       	movw	r8, r24
    1d40:	a7 01       	movw	r20, r14
    1d42:	96 01       	movw	r18, r12
    1d44:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1d48:	0e 94 26 24 	call	0x484c	; 0x484c <ceil>
    1d4c:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    1d50:	7b 01       	movw	r14, r22
    1d52:	8c 01       	movw	r16, r24
    1d54:	e9 89       	ldd	r30, Y+17	; 0x11
    1d56:	fa 89       	ldd	r31, Y+18	; 0x12
    1d58:	65 ab       	std	Z+53, r22	; 0x35
    1d5a:	76 ab       	std	Z+54, r23	; 0x36
    1d5c:	87 ab       	std	Z+55, r24	; 0x37
    1d5e:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    1d60:	c4 01       	movw	r24, r8
    1d62:	b3 01       	movw	r22, r6
    1d64:	a2 01       	movw	r20, r4
    1d66:	91 01       	movw	r18, r2
    1d68:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1d6c:	0e 94 26 24 	call	0x484c	; 0x484c <ceil>
    1d70:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    1d74:	1b 01       	movw	r2, r22
    1d76:	2c 01       	movw	r4, r24
    1d78:	e9 89       	ldd	r30, Y+17	; 0x11
    1d7a:	fa 89       	ldd	r31, Y+18	; 0x12
    1d7c:	61 af       	std	Z+57, r22	; 0x39
    1d7e:	72 af       	std	Z+58, r23	; 0x3a
    1d80:	83 af       	std	Z+59, r24	; 0x3b
    1d82:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    1d84:	fd 96       	adiw	r30, 0x3d	; 61
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	fd 97       	sbiw	r30, 0x3d	; 61
    1d90:	fa 8b       	std	Y+18, r31	; 0x12
    1d92:	e9 8b       	std	Y+17, r30	; 0x11
    1d94:	28 e2       	ldi	r18, 0x28	; 40
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	0e 94 44 27 	call	0x4e88	; 0x4e88 <__mulsi3>
    1da0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e7       	ldi	r20, 0x70	; 112
    1daa:	52 e4       	ldi	r21, 0x42	; 66
    1dac:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1db0:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
    1db4:	5b 01       	movw	r10, r22
    1db6:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1db8:	c8 01       	movw	r24, r16
    1dba:	b7 01       	movw	r22, r14
    1dbc:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__floatunsisf>
    1dc0:	7b 01       	movw	r14, r22
    1dc2:	8c 01       	movw	r16, r24
    1dc4:	c6 01       	movw	r24, r12
    1dc6:	b5 01       	movw	r22, r10
    1dc8:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    1dcc:	6d 83       	std	Y+5, r22	; 0x05
    1dce:	7e 83       	std	Y+6, r23	; 0x06
    1dd0:	8f 83       	std	Y+7, r24	; 0x07
    1dd2:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1dd4:	c4 01       	movw	r24, r8
    1dd6:	b3 01       	movw	r22, r6
    1dd8:	a4 01       	movw	r20, r8
    1dda:	93 01       	movw	r18, r6
    1ddc:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1de0:	3b 01       	movw	r6, r22
    1de2:	4c 01       	movw	r8, r24
    1de4:	c8 01       	movw	r24, r16
    1de6:	b7 01       	movw	r22, r14
    1de8:	a8 01       	movw	r20, r16
    1dea:	97 01       	movw	r18, r14
    1dec:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1df0:	69 87       	std	Y+9, r22	; 0x09
    1df2:	7a 87       	std	Y+10, r23	; 0x0a
    1df4:	8b 87       	std	Y+11, r24	; 0x0b
    1df6:	9c 87       	std	Y+12, r25	; 0x0c
    1df8:	6d 81       	ldd	r22, Y+5	; 0x05
    1dfa:	7e 81       	ldd	r23, Y+6	; 0x06
    1dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfe:	98 85       	ldd	r25, Y+8	; 0x08
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1e08:	6d 87       	std	Y+13, r22	; 0x0d
    1e0a:	7e 87       	std	Y+14, r23	; 0x0e
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
    1e0e:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    1e10:	c4 01       	movw	r24, r8
    1e12:	b3 01       	movw	r22, r6
    1e14:	29 85       	ldd	r18, Y+9	; 0x09
    1e16:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e18:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e1c:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    1e20:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e22:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e24:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e26:	58 89       	ldd	r21, Y+16	; 0x10
    1e28:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    1e2c:	0e 94 26 24 	call	0x484c	; 0x484c <ceil>
    1e30:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
    1e34:	69 83       	std	Y+1, r22	; 0x01
    1e36:	7a 83       	std	Y+2, r23	; 0x02
    1e38:	8b 83       	std	Y+3, r24	; 0x03
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1e3c:	c2 01       	movw	r24, r4
    1e3e:	b1 01       	movw	r22, r2
    1e40:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__floatunsisf>
    1e44:	9b 01       	movw	r18, r22
    1e46:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1e48:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1e4c:	1b 01       	movw	r2, r22
    1e4e:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1e50:	a4 01       	movw	r20, r8
    1e52:	93 01       	movw	r18, r6
    1e54:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    1e58:	7b 01       	movw	r14, r22
    1e5a:	8c 01       	movw	r16, r24
    1e5c:	d0 94       	com	r13
    1e5e:	c0 94       	com	r12
    1e60:	b0 94       	com	r11
    1e62:	a0 94       	com	r10
    1e64:	a1 1c       	adc	r10, r1
    1e66:	b1 1c       	adc	r11, r1
    1e68:	c1 1c       	adc	r12, r1
    1e6a:	d1 1c       	adc	r13, r1
    1e6c:	c6 01       	movw	r24, r12
    1e6e:	b5 01       	movw	r22, r10
    1e70:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    1e74:	9b 01       	movw	r18, r22
    1e76:	ac 01       	movw	r20, r24
    1e78:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1e7c:	9b 01       	movw	r18, r22
    1e7e:	ac 01       	movw	r20, r24
    1e80:	c8 01       	movw	r24, r16
    1e82:	b7 01       	movw	r22, r14
    1e84:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    1e88:	0e 94 13 25 	call	0x4a26	; 0x4a26 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1e8c:	e9 89       	ldd	r30, Y+17	; 0x11
    1e8e:	fa 89       	ldd	r31, Y+18	; 0x12
    1e90:	a1 88       	ldd	r10, Z+17	; 0x11
    1e92:	b2 88       	ldd	r11, Z+18	; 0x12
    1e94:	c3 88       	ldd	r12, Z+19	; 0x13
    1e96:	d4 88       	ldd	r13, Z+20	; 0x14
    1e98:	86 01       	movw	r16, r12
    1e9a:	75 01       	movw	r14, r10
    1e9c:	29 81       	ldd	r18, Y+1	; 0x01
    1e9e:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea0:	4b 81       	ldd	r20, Y+3	; 0x03
    1ea2:	5c 81       	ldd	r21, Y+4	; 0x04
    1ea4:	e2 1a       	sub	r14, r18
    1ea6:	f3 0a       	sbc	r15, r19
    1ea8:	04 0b       	sbc	r16, r20
    1eaa:	15 0b       	sbc	r17, r21
    1eac:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
    1eb0:	a8 01       	movw	r20, r16
    1eb2:	97 01       	movw	r18, r14
    1eb4:	26 1b       	sub	r18, r22
    1eb6:	37 0b       	sbc	r19, r23
    1eb8:	48 0b       	sbc	r20, r24
    1eba:	59 0b       	sbc	r21, r25
    1ebc:	da 01       	movw	r26, r20
    1ebe:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    1ec0:	57 fd       	sbrc	r21, 7
    1ec2:	30 c0       	rjmp	.+96     	; 0x1f24 <calculate_trapezoid_for_block+0x236>
    accelerate_steps = ceil(
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1ec4:	49 89       	ldd	r20, Y+17	; 0x11
    1ec6:	5a 89       	ldd	r21, Y+18	; 0x12
    1ec8:	4f 5b       	subi	r20, 0xBF	; 191
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	fa 01       	movw	r30, r20
    1ece:	29 81       	ldd	r18, Y+1	; 0x01
    1ed0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed2:	4b 81       	ldd	r20, Y+3	; 0x03
    1ed4:	5c 81       	ldd	r21, Y+4	; 0x04
    1ed6:	21 93       	st	Z+, r18
    1ed8:	31 93       	st	Z+, r19
    1eda:	41 93       	st	Z+, r20
    1edc:	51 93       	st	Z+, r21
    1ede:	fa 8b       	std	Y+18, r31	; 0x12
    1ee0:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1ee2:	82 0f       	add	r24, r18
    1ee4:	93 1f       	adc	r25, r19
    1ee6:	a4 1f       	adc	r26, r20
    1ee8:	b5 1f       	adc	r27, r21
    1eea:	80 83       	st	Z, r24
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	a2 83       	std	Z+2, r26	; 0x02
    1ef0:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1ef2:	62 96       	adiw	r28, 0x12	; 18
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	9f 90       	pop	r9
    1f14:	8f 90       	pop	r8
    1f16:	7f 90       	pop	r7
    1f18:	6f 90       	pop	r6
    1f1a:	5f 90       	pop	r5
    1f1c:	4f 90       	pop	r4
    1f1e:	3f 90       	pop	r3
    1f20:	2f 90       	pop	r2
    1f22:	08 95       	ret
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    1f24:	c6 01       	movw	r24, r12
    1f26:	b5 01       	movw	r22, r10
    1f28:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    1f2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f30:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f32:	58 89       	ldd	r21, Y+16	; 0x10
    1f34:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1f38:	29 85       	ldd	r18, Y+9	; 0x09
    1f3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f3c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f3e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f40:	0e 94 99 23 	call	0x4732	; 0x4732 <__subsf3>
    1f44:	9b 01       	movw	r18, r22
    1f46:	ac 01       	movw	r20, r24
    1f48:	c2 01       	movw	r24, r4
    1f4a:	b1 01       	movw	r22, r2
    1f4c:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    1f50:	7b 01       	movw	r14, r22
    1f52:	8c 01       	movw	r16, r24
    1f54:	6d 81       	ldd	r22, Y+5	; 0x05
    1f56:	7e 81       	ldd	r23, Y+6	; 0x06
    1f58:	8f 81       	ldd	r24, Y+7	; 0x07
    1f5a:	98 85       	ldd	r25, Y+8	; 0x08
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	50 e4       	ldi	r21, 0x40	; 64
    1f64:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    1f68:	9b 01       	movw	r18, r22
    1f6a:	ac 01       	movw	r20, r24
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	b7 01       	movw	r22, r14
    1f70:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    1f74:	0e 94 26 24 	call	0x484c	; 0x484c <ceil>
    1f78:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
    1f7c:	69 83       	std	Y+1, r22	; 0x01
    1f7e:	7a 83       	std	Y+2, r23	; 0x02
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e0       	ldi	r26, 0x00	; 0
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	9b cf       	rjmp	.-202    	; 0x1ec4 <calculate_trapezoid_for_block+0x1d6>

00001f8e <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1f9a:	80 91 08 05 	lds	r24, 0x0508
    1f9e:	90 91 09 05 	lds	r25, 0x0509
    1fa2:	28 2f       	mov	r18, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1fa4:	e8 2e       	mov	r14, r24
    1fa6:	ff 24       	eor	r15, r15
    1fa8:	e7 fc       	sbrc	r14, 7
    1faa:	f0 94       	com	r15
    1fac:	80 91 06 05 	lds	r24, 0x0506
    1fb0:	90 91 07 05 	lds	r25, 0x0507
    1fb4:	e8 16       	cp	r14, r24
    1fb6:	f9 06       	cpc	r15, r25
    1fb8:	e1 f1       	breq	.+120    	; 0x2032 <planner_recalculate_trapezoids+0xa4>
    1fba:	e0 e0       	ldi	r30, 0x00	; 0
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <planner_recalculate_trapezoids+0x34>
    1fc0:	fe 01       	movw	r30, r28
    current = next;
    next = &block_buffer[block_index];
    1fc2:	89 e4       	ldi	r24, 0x49	; 73
    1fc4:	28 02       	muls	r18, r24
    1fc6:	e0 01       	movw	r28, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	c4 5d       	subi	r28, 0xD4	; 212
    1fcc:	dd 4f       	sbci	r29, 0xFD	; 253
    if (current) {
    1fce:	30 97       	sbiw	r30, 0x00	; 0
    1fd0:	59 f0       	breq	.+22     	; 0x1fe8 <planner_recalculate_trapezoids+0x5a>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    1fd2:	41 a9       	ldd	r20, Z+49	; 0x31
    1fd4:	52 a9       	ldd	r21, Z+50	; 0x32
    1fd6:	63 a9       	ldd	r22, Z+51	; 0x33
    1fd8:	74 a9       	ldd	r23, Z+52	; 0x34
    1fda:	09 a9       	ldd	r16, Y+49	; 0x31
    1fdc:	1a a9       	ldd	r17, Y+50	; 0x32
    1fde:	2b a9       	ldd	r18, Y+51	; 0x33
    1fe0:	3c a9       	ldd	r19, Y+52	; 0x34
    1fe2:	cf 01       	movw	r24, r30
    1fe4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    1fe8:	c7 01       	movw	r24, r14
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	6a e0       	ldi	r22, 0x0A	; 10
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__divmodhi4>
    1ff4:	28 2f       	mov	r18, r24
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    1ff6:	e8 2e       	mov	r14, r24
    1ff8:	ff 24       	eor	r15, r15
    1ffa:	e7 fc       	sbrc	r14, 7
    1ffc:	f0 94       	com	r15
    1ffe:	80 91 06 05 	lds	r24, 0x0506
    2002:	90 91 07 05 	lds	r25, 0x0507
    2006:	e8 16       	cp	r14, r24
    2008:	f9 06       	cpc	r15, r25
    200a:	d1 f6       	brne	.-76     	; 0x1fc0 <planner_recalculate_trapezoids+0x32>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    200c:	ce 01       	movw	r24, r28
    200e:	0e 94 06 0b 	call	0x160c	; 0x160c <factor_for_safe_speed>
    2012:	8b 01       	movw	r16, r22
    2014:	9c 01       	movw	r18, r24
    2016:	49 a9       	ldd	r20, Y+49	; 0x31
    2018:	5a a9       	ldd	r21, Y+50	; 0x32
    201a:	6b a9       	ldd	r22, Y+51	; 0x33
    201c:	7c a9       	ldd	r23, Y+52	; 0x34
    201e:	ce 01       	movw	r24, r28
    2020:	0e 94 77 0e 	call	0x1cee	; 0x1cee <calculate_trapezoid_for_block>
}
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	08 95       	ret
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    2032:	c0 e0       	ldi	r28, 0x00	; 0
    2034:	d0 e0       	ldi	r29, 0x00	; 0
    2036:	ea cf       	rjmp	.-44     	; 0x200c <planner_recalculate_trapezoids+0x7e>

00002038 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    2038:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <planner_reverse_pass>
  planner_forward_pass();
    203c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <planner_forward_pass>
  planner_recalculate_trapezoids();
    2040:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <planner_recalculate_trapezoids>
}
    2044:	08 95       	ret

00002046 <plan_buffer_line>:

// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) 
{
    2046:	2f 92       	push	r2
    2048:	3f 92       	push	r3
    204a:	4f 92       	push	r4
    204c:	5f 92       	push	r5
    204e:	6f 92       	push	r6
    2050:	7f 92       	push	r7
    2052:	8f 92       	push	r8
    2054:	9f 92       	push	r9
    2056:	af 92       	push	r10
    2058:	bf 92       	push	r11
    205a:	cf 92       	push	r12
    205c:	df 92       	push	r13
    205e:	ef 92       	push	r14
    2060:	ff 92       	push	r15
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	cc 54       	subi	r28, 0x4C	; 76
    2070:	d0 40       	sbci	r29, 0x00	; 0
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	3b 01       	movw	r6, r22
    207e:	4c 01       	movw	r8, r24
    2080:	23 96       	adiw	r28, 0x03	; 3
    2082:	2c af       	std	Y+60, r18	; 0x3c
    2084:	3d af       	std	Y+61, r19	; 0x3d
    2086:	4e af       	std	Y+62, r20	; 0x3e
    2088:	5f af       	std	Y+63, r21	; 0x3f
    208a:	23 97       	sbiw	r28, 0x03	; 3
    208c:	27 96       	adiw	r28, 0x07	; 7
    208e:	ec ae       	std	Y+60, r14	; 0x3c
    2090:	fd ae       	std	Y+61, r15	; 0x3d
    2092:	0e af       	std	Y+62, r16	; 0x3e
    2094:	1f af       	std	Y+63, r17	; 0x3f
    2096:	27 97       	sbiw	r28, 0x07	; 7
	printPgmString(PSTR("z = "));
	printFloat( z );
	printPgmString(PSTR("\r\n"));
#endif
  
  if( gHomed == FALSE ) 
    2098:	80 91 4f 05 	lds	r24, 0x054F
    209c:	88 23       	and	r24, r24
    209e:	d1 f4       	brne	.+52     	; 0x20d4 <plan_buffer_line+0x8e>
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
  st_wake_up();
}
    20a0:	c4 5b       	subi	r28, 0xB4	; 180
    20a2:	df 4f       	sbci	r29, 0xFF	; 255
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	df 90       	pop	r13
    20bc:	cf 90       	pop	r12
    20be:	bf 90       	pop	r11
    20c0:	af 90       	pop	r10
    20c2:	9f 90       	pop	r9
    20c4:	8f 90       	pop	r8
    20c6:	7f 90       	pop	r7
    20c8:	6f 90       	pop	r6
    20ca:	5f 90       	pop	r5
    20cc:	4f 90       	pop	r4
    20ce:	3f 90       	pop	r3
    20d0:	2f 90       	pop	r2
    20d2:	08 95       	ret
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    20d4:	c4 01       	movw	r24, r8
    20d6:	b3 01       	movw	r22, r6
    20d8:	20 91 7b 06 	lds	r18, 0x067B
    20dc:	30 91 7c 06 	lds	r19, 0x067C
    20e0:	40 91 7d 06 	lds	r20, 0x067D
    20e4:	50 91 7e 06 	lds	r21, 0x067E
    20e8:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    20ec:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    20f0:	7b 01       	movw	r14, r22
    20f2:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    20f4:	20 91 7f 06 	lds	r18, 0x067F
    20f8:	30 91 80 06 	lds	r19, 0x0680
    20fc:	40 91 81 06 	lds	r20, 0x0681
    2100:	50 91 82 06 	lds	r21, 0x0682
    2104:	2b af       	std	Y+59, r18	; 0x3b
    2106:	3c af       	std	Y+60, r19	; 0x3c
    2108:	4d af       	std	Y+61, r20	; 0x3d
    210a:	5e af       	std	Y+62, r21	; 0x3e
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    210c:	40 91 83 06 	lds	r20, 0x0683
    2110:	50 91 84 06 	lds	r21, 0x0684
    2114:	60 91 85 06 	lds	r22, 0x0685
    2118:	70 91 86 06 	lds	r23, 0x0686
    211c:	4f ab       	std	Y+55, r20	; 0x37
    211e:	58 af       	std	Y+56, r21	; 0x38
    2120:	69 af       	std	Y+57, r22	; 0x39
    2122:	7a af       	std	Y+58, r23	; 0x3a
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    2124:	20 90 87 06 	lds	r2, 0x0687
    2128:	30 90 88 06 	lds	r3, 0x0688
    212c:	40 90 89 06 	lds	r4, 0x0689
    2130:	50 90 8a 06 	lds	r5, 0x068A
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    2134:	80 91 06 05 	lds	r24, 0x0506
    2138:	90 91 07 05 	lds	r25, 0x0507
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	6a e0       	ldi	r22, 0x0A	; 10
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__divmodhi4>
    2146:	28 96       	adiw	r28, 0x08	; 8
    2148:	8f af       	std	Y+63, r24	; 0x3f
    214a:	28 97       	sbiw	r28, 0x08	; 8
    214c:	29 96       	adiw	r28, 0x09	; 9
    214e:	9f af       	std	Y+63, r25	; 0x3f
    2150:	29 97       	sbiw	r28, 0x09	; 9
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    2152:	20 91 08 05 	lds	r18, 0x0508
    2156:	30 91 09 05 	lds	r19, 0x0509
    215a:	29 96       	adiw	r28, 0x09	; 9
    215c:	6e ad       	ldd	r22, Y+62	; 0x3e
    215e:	7f ad       	ldd	r23, Y+63	; 0x3f
    2160:	29 97       	sbiw	r28, 0x09	; 9
    2162:	26 17       	cp	r18, r22
    2164:	37 07       	cpc	r19, r23
    2166:	71 f4       	brne	.+28     	; 0x2184 <plan_buffer_line+0x13e>
    2168:	83 b7       	in	r24, 0x33	; 51
    216a:	81 60       	ori	r24, 0x01	; 1
    216c:	83 bf       	out	0x33, r24	; 51
    216e:	88 95       	sleep
    2170:	83 b7       	in	r24, 0x33	; 51
    2172:	8e 7f       	andi	r24, 0xFE	; 254
    2174:	83 bf       	out	0x33, r24	; 51
    2176:	80 91 08 05 	lds	r24, 0x0508
    217a:	90 91 09 05 	lds	r25, 0x0509
    217e:	82 17       	cp	r24, r18
    2180:	93 07       	cpc	r25, r19
    2182:	91 f3       	breq	.-28     	; 0x2168 <plan_buffer_line+0x122>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    2184:	20 91 06 05 	lds	r18, 0x0506
    2188:	30 91 07 05 	lds	r19, 0x0507
    218c:	c9 01       	movw	r24, r18
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	dc 01       	movw	r26, r24
    219c:	aa 0f       	add	r26, r26
    219e:	bb 1f       	adc	r27, r27
    21a0:	aa 0f       	add	r26, r26
    21a2:	bb 1f       	adc	r27, r27
    21a4:	aa 0f       	add	r26, r26
    21a6:	bb 1f       	adc	r27, r27
    21a8:	a8 0f       	add	r26, r24
    21aa:	b9 1f       	adc	r27, r25
    21ac:	a2 0f       	add	r26, r18
    21ae:	b3 1f       	adc	r27, r19
    21b0:	a4 5d       	subi	r26, 0xD4	; 212
    21b2:	bd 4f       	sbci	r27, 0xFD	; 253
    21b4:	be ab       	std	Y+54, r27	; 0x36
    21b6:	ad ab       	std	Y+53, r26	; 0x35
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    21b8:	80 91 0a 05 	lds	r24, 0x050A
    21bc:	90 91 0b 05 	lds	r25, 0x050B
    21c0:	a0 91 0c 05 	lds	r26, 0x050C
    21c4:	b0 91 0d 05 	lds	r27, 0x050D
    21c8:	37 01       	movw	r6, r14
    21ca:	48 01       	movw	r8, r16
    21cc:	68 1a       	sub	r6, r24
    21ce:	79 0a       	sbc	r7, r25
    21d0:	8a 0a       	sbc	r8, r26
    21d2:	9b 0a       	sbc	r9, r27
    21d4:	97 fc       	sbrc	r9, 7
    21d6:	2c c3       	rjmp	.+1624   	; 0x2830 <__stack+0x631>
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    21d8:	c2 01       	movw	r24, r4
    21da:	b1 01       	movw	r22, r2
    21dc:	a6 01       	movw	r20, r12
    21de:	95 01       	movw	r18, r10
    21e0:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    21e4:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    21e8:	6d 87       	std	Y+13, r22	; 0x0d
    21ea:	7e 87       	std	Y+14, r23	; 0x0e
    21ec:	8f 87       	std	Y+15, r24	; 0x0f
    21ee:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    21f0:	6f a9       	ldd	r22, Y+55	; 0x37
    21f2:	78 ad       	ldd	r23, Y+56	; 0x38
    21f4:	89 ad       	ldd	r24, Y+57	; 0x39
    21f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    21f8:	27 96       	adiw	r28, 0x07	; 7
    21fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    21fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    21fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    2200:	5f ad       	ldd	r21, Y+63	; 0x3f
    2202:	27 97       	sbiw	r28, 0x07	; 7
    2204:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    2208:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    220c:	69 87       	std	Y+9, r22	; 0x09
    220e:	7a 87       	std	Y+10, r23	; 0x0a
    2210:	8b 87       	std	Y+11, r24	; 0x0b
    2212:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    2214:	6b ad       	ldd	r22, Y+59	; 0x3b
    2216:	7c ad       	ldd	r23, Y+60	; 0x3c
    2218:	8d ad       	ldd	r24, Y+61	; 0x3d
    221a:	9e ad       	ldd	r25, Y+62	; 0x3e
    221c:	23 96       	adiw	r28, 0x03	; 3
    221e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2220:	3d ad       	ldd	r19, Y+61	; 0x3d
    2222:	4e ad       	ldd	r20, Y+62	; 0x3e
    2224:	5f ad       	ldd	r21, Y+63	; 0x3f
    2226:	23 97       	sbiw	r28, 0x03	; 3
    2228:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    222c:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    2230:	6d 83       	std	Y+5, r22	; 0x05
    2232:	7e 83       	std	Y+6, r23	; 0x06
    2234:	8f 83       	std	Y+7, r24	; 0x07
    2236:	98 87       	std	Y+8, r25	; 0x08
	  
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    2238:	e9 82       	std	Y+1, r14	; 0x01
    223a:	fa 82       	std	Y+2, r15	; 0x02
    223c:	0b 83       	std	Y+3, r16	; 0x03
    223e:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2240:	ed a9       	ldd	r30, Y+53	; 0x35
    2242:	fe a9       	ldd	r31, Y+54	; 0x36
    2244:	60 82       	st	Z, r6
    2246:	71 82       	std	Z+1, r7	; 0x01
    2248:	82 82       	std	Z+2, r8	; 0x02
    224a:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    224c:	ad 80       	ldd	r10, Y+5	; 0x05
    224e:	be 80       	ldd	r11, Y+6	; 0x06
    2250:	cf 80       	ldd	r12, Y+7	; 0x07
    2252:	d8 84       	ldd	r13, Y+8	; 0x08
    2254:	80 91 0e 05 	lds	r24, 0x050E
    2258:	90 91 0f 05 	lds	r25, 0x050F
    225c:	a0 91 10 05 	lds	r26, 0x0510
    2260:	b0 91 11 05 	lds	r27, 0x0511
    2264:	a6 01       	movw	r20, r12
    2266:	95 01       	movw	r18, r10
    2268:	28 1b       	sub	r18, r24
    226a:	39 0b       	sbc	r19, r25
    226c:	4a 0b       	sbc	r20, r26
    226e:	5b 0b       	sbc	r21, r27
    2270:	da 01       	movw	r26, r20
    2272:	c9 01       	movw	r24, r18
    2274:	57 fd       	sbrc	r21, 7
    2276:	d4 c2       	rjmp	.+1448   	; 0x2820 <__stack+0x621>
    2278:	ed a9       	ldd	r30, Y+53	; 0x35
    227a:	fe a9       	ldd	r31, Y+54	; 0x36
    227c:	84 83       	std	Z+4, r24	; 0x04
    227e:	95 83       	std	Z+5, r25	; 0x05
    2280:	a6 83       	std	Z+6, r26	; 0x06
    2282:	b7 83       	std	Z+7, r27	; 0x07
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2284:	20 90 12 05 	lds	r2, 0x0512
    2288:	30 90 13 05 	lds	r3, 0x0513
    228c:	40 90 14 05 	lds	r4, 0x0514
    2290:	50 90 15 05 	lds	r5, 0x0515
    2294:	69 84       	ldd	r6, Y+9	; 0x09
    2296:	7a 84       	ldd	r7, Y+10	; 0x0a
    2298:	8b 84       	ldd	r8, Y+11	; 0x0b
    229a:	9c 84       	ldd	r9, Y+12	; 0x0c
    229c:	d4 01       	movw	r26, r8
    229e:	c3 01       	movw	r24, r6
    22a0:	82 19       	sub	r24, r2
    22a2:	93 09       	sbc	r25, r3
    22a4:	a4 09       	sbc	r26, r4
    22a6:	b5 09       	sbc	r27, r5
    22a8:	b7 fd       	sbrc	r27, 7
    22aa:	b2 c2       	rjmp	.+1380   	; 0x2810 <__stack+0x611>
    22ac:	ed a9       	ldd	r30, Y+53	; 0x35
    22ae:	fe a9       	ldd	r31, Y+54	; 0x36
    22b0:	80 87       	std	Z+8, r24	; 0x08
    22b2:	91 87       	std	Z+9, r25	; 0x09
    22b4:	a2 87       	std	Z+10, r26	; 0x0a
    22b6:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    22b8:	20 91 16 05 	lds	r18, 0x0516
    22bc:	30 91 17 05 	lds	r19, 0x0517
    22c0:	40 91 18 05 	lds	r20, 0x0518
    22c4:	50 91 19 05 	lds	r21, 0x0519
    22c8:	29 8b       	std	Y+17, r18	; 0x11
    22ca:	3a 8b       	std	Y+18, r19	; 0x12
    22cc:	4b 8b       	std	Y+19, r20	; 0x13
    22ce:	5c 8b       	std	Y+20, r21	; 0x14
    22d0:	4d 85       	ldd	r20, Y+13	; 0x0d
    22d2:	5e 85       	ldd	r21, Y+14	; 0x0e
    22d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    22d6:	78 89       	ldd	r23, Y+16	; 0x10
    22d8:	2d 96       	adiw	r28, 0x0d	; 13
    22da:	4c af       	std	Y+60, r20	; 0x3c
    22dc:	5d af       	std	Y+61, r21	; 0x3d
    22de:	6e af       	std	Y+62, r22	; 0x3e
    22e0:	7f af       	std	Y+63, r23	; 0x3f
    22e2:	2d 97       	sbiw	r28, 0x0d	; 13
    22e4:	7a 01       	movw	r14, r20
    22e6:	8b 01       	movw	r16, r22
    22e8:	69 89       	ldd	r22, Y+17	; 0x11
    22ea:	7a 89       	ldd	r23, Y+18	; 0x12
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	9c 89       	ldd	r25, Y+20	; 0x14
    22f0:	e6 1a       	sub	r14, r22
    22f2:	f7 0a       	sbc	r15, r23
    22f4:	08 0b       	sbc	r16, r24
    22f6:	19 0b       	sbc	r17, r25
    22f8:	17 fd       	sbrc	r17, 7
    22fa:	81 c2       	rjmp	.+1282   	; 0x27fe <__stack+0x5ff>
    22fc:	ad a9       	ldd	r26, Y+53	; 0x35
    22fe:	be a9       	ldd	r27, Y+54	; 0x36
    2300:	1c 96       	adiw	r26, 0x0c	; 12
    2302:	ed 92       	st	X+, r14
    2304:	fd 92       	st	X+, r15
    2306:	0d 93       	st	X+, r16
    2308:	1c 93       	st	X, r17
    230a:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    230c:	18 96       	adiw	r26, 0x08	; 8
    230e:	2d 91       	ld	r18, X+
    2310:	3d 91       	ld	r19, X+
    2312:	4d 91       	ld	r20, X+
    2314:	5c 91       	ld	r21, X
    2316:	1b 97       	sbiw	r26, 0x0b	; 11
    2318:	fd 01       	movw	r30, r26
    231a:	84 81       	ldd	r24, Z+4	; 0x04
    231c:	95 81       	ldd	r25, Z+5	; 0x05
    231e:	a6 81       	ldd	r26, Z+6	; 0x06
    2320:	b7 81       	ldd	r27, Z+7	; 0x07
    2322:	82 17       	cp	r24, r18
    2324:	93 07       	cpc	r25, r19
    2326:	a4 07       	cpc	r26, r20
    2328:	b5 07       	cpc	r27, r21
    232a:	08 f4       	brcc	.+2      	; 0x232e <__stack+0x12f>
    232c:	54 c2       	rjmp	.+1192   	; 0x27d6 <__stack+0x5d7>
    232e:	ed a9       	ldd	r30, Y+53	; 0x35
    2330:	fe a9       	ldd	r31, Y+54	; 0x36
    2332:	20 81       	ld	r18, Z
    2334:	31 81       	ldd	r19, Z+1	; 0x01
    2336:	42 81       	ldd	r20, Z+2	; 0x02
    2338:	53 81       	ldd	r21, Z+3	; 0x03
    233a:	82 17       	cp	r24, r18
    233c:	93 07       	cpc	r25, r19
    233e:	a4 07       	cpc	r26, r20
    2340:	b5 07       	cpc	r27, r21
    2342:	08 f4       	brcc	.+2      	; 0x2346 <__stack+0x147>
    2344:	3f c2       	rjmp	.+1150   	; 0x27c4 <__stack+0x5c5>
    2346:	8e 15       	cp	r24, r14
    2348:	9f 05       	cpc	r25, r15
    234a:	a0 07       	cpc	r26, r16
    234c:	b1 07       	cpc	r27, r17
    234e:	08 f4       	brcc	.+2      	; 0x2352 <__stack+0x153>
    2350:	36 c2       	rjmp	.+1132   	; 0x27be <__stack+0x5bf>
    2352:	ed a9       	ldd	r30, Y+53	; 0x35
    2354:	fe a9       	ldd	r31, Y+54	; 0x36
    2356:	81 8b       	std	Z+17, r24	; 0x11
    2358:	92 8b       	std	Z+18, r25	; 0x12
    235a:	a3 8b       	std	Z+19, r26	; 0x13
    235c:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { 
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	a1 05       	cpc	r26, r1
    2362:	b1 05       	cpc	r27, r1
    2364:	09 f4       	brne	.+2      	; 0x2368 <__stack+0x169>
    2366:	3a c2       	rjmp	.+1140   	; 0x27dc <__stack+0x5dd>
// needs for ACK
 	serialWrite('X');
  	return; 
  };
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    2368:	29 81       	ldd	r18, Y+1	; 0x01
    236a:	3a 81       	ldd	r19, Y+2	; 0x02
    236c:	4b 81       	ldd	r20, Y+3	; 0x03
    236e:	5c 81       	ldd	r21, Y+4	; 0x04
    2370:	2d 8f       	std	Y+29, r18	; 0x1d
    2372:	3e 8f       	std	Y+30, r19	; 0x1e
    2374:	4f 8f       	std	Y+31, r20	; 0x1f
    2376:	58 a3       	std	Y+32, r21	; 0x20
    2378:	80 91 0a 05 	lds	r24, 0x050A
    237c:	90 91 0b 05 	lds	r25, 0x050B
    2380:	a0 91 0c 05 	lds	r26, 0x050C
    2384:	b0 91 0d 05 	lds	r27, 0x050D
    2388:	28 1b       	sub	r18, r24
    238a:	39 0b       	sbc	r19, r25
    238c:	4a 0b       	sbc	r20, r26
    238e:	5b 0b       	sbc	r21, r27
    2390:	ca 01       	movw	r24, r20
    2392:	b9 01       	movw	r22, r18
    2394:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    2398:	20 91 7b 06 	lds	r18, 0x067B
    239c:	30 91 7c 06 	lds	r19, 0x067C
    23a0:	40 91 7d 06 	lds	r20, 0x067D
    23a4:	50 91 7e 06 	lds	r21, 0x067E
    23a8:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    23ac:	69 ab       	std	Y+49, r22	; 0x31
    23ae:	7a ab       	std	Y+50, r23	; 0x32
    23b0:	8b ab       	std	Y+51, r24	; 0x33
    23b2:	9c ab       	std	Y+52, r25	; 0x34
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    23b4:	a9 a2       	std	Y+33, r10	; 0x21
    23b6:	ba a2       	std	Y+34, r11	; 0x22
    23b8:	cb a2       	std	Y+35, r12	; 0x23
    23ba:	dc a2       	std	Y+36, r13	; 0x24
    23bc:	80 91 0e 05 	lds	r24, 0x050E
    23c0:	90 91 0f 05 	lds	r25, 0x050F
    23c4:	a0 91 10 05 	lds	r26, 0x0510
    23c8:	b0 91 11 05 	lds	r27, 0x0511
    23cc:	a6 01       	movw	r20, r12
    23ce:	95 01       	movw	r18, r10
    23d0:	28 1b       	sub	r18, r24
    23d2:	39 0b       	sbc	r19, r25
    23d4:	4a 0b       	sbc	r20, r26
    23d6:	5b 0b       	sbc	r21, r27
    23d8:	ca 01       	movw	r24, r20
    23da:	b9 01       	movw	r22, r18
    23dc:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    23e0:	20 91 7f 06 	lds	r18, 0x067F
    23e4:	30 91 80 06 	lds	r19, 0x0680
    23e8:	40 91 81 06 	lds	r20, 0x0681
    23ec:	50 91 82 06 	lds	r21, 0x0682
    23f0:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    23f4:	6d a7       	std	Y+45, r22	; 0x2d
    23f6:	7e a7       	std	Y+46, r23	; 0x2e
    23f8:	8f a7       	std	Y+47, r24	; 0x2f
    23fa:	98 ab       	std	Y+48, r25	; 0x30
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    23fc:	69 8e       	std	Y+25, r6	; 0x19
    23fe:	7a 8e       	std	Y+26, r7	; 0x1a
    2400:	8b 8e       	std	Y+27, r8	; 0x1b
    2402:	9c 8e       	std	Y+28, r9	; 0x1c
    2404:	c4 01       	movw	r24, r8
    2406:	b3 01       	movw	r22, r6
    2408:	62 19       	sub	r22, r2
    240a:	73 09       	sbc	r23, r3
    240c:	84 09       	sbc	r24, r4
    240e:	95 09       	sbc	r25, r5
    2410:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    2414:	20 91 83 06 	lds	r18, 0x0683
    2418:	30 91 84 06 	lds	r19, 0x0684
    241c:	40 91 85 06 	lds	r20, 0x0685
    2420:	50 91 86 06 	lds	r21, 0x0686
    2424:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    2428:	69 a7       	std	Y+41, r22	; 0x29
    242a:	7a a7       	std	Y+42, r23	; 0x2a
    242c:	8b a7       	std	Y+43, r24	; 0x2b
    242e:	9c a7       	std	Y+44, r25	; 0x2c
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    2430:	2d 96       	adiw	r28, 0x0d	; 13
    2432:	4c ad       	ldd	r20, Y+60	; 0x3c
    2434:	5d ad       	ldd	r21, Y+61	; 0x3d
    2436:	6e ad       	ldd	r22, Y+62	; 0x3e
    2438:	7f ad       	ldd	r23, Y+63	; 0x3f
    243a:	2d 97       	sbiw	r28, 0x0d	; 13
    243c:	4d 8b       	std	Y+21, r20	; 0x15
    243e:	5e 8b       	std	Y+22, r21	; 0x16
    2440:	6f 8b       	std	Y+23, r22	; 0x17
    2442:	78 8f       	std	Y+24, r23	; 0x18
    2444:	cb 01       	movw	r24, r22
    2446:	ba 01       	movw	r22, r20
    2448:	29 89       	ldd	r18, Y+17	; 0x11
    244a:	3a 89       	ldd	r19, Y+18	; 0x12
    244c:	4b 89       	ldd	r20, Y+19	; 0x13
    244e:	5c 89       	ldd	r21, Y+20	; 0x14
    2450:	62 1b       	sub	r22, r18
    2452:	73 0b       	sbc	r23, r19
    2454:	84 0b       	sbc	r24, r20
    2456:	95 0b       	sbc	r25, r21
    2458:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    245c:	20 91 87 06 	lds	r18, 0x0687
    2460:	30 91 88 06 	lds	r19, 0x0688
    2464:	40 91 89 06 	lds	r20, 0x0689
    2468:	50 91 8a 06 	lds	r21, 0x068A
    246c:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    2470:	6d a3       	std	Y+37, r22	; 0x25
    2472:	7e a3       	std	Y+38, r23	; 0x26
    2474:	8f a3       	std	Y+39, r24	; 0x27
    2476:	98 a7       	std	Y+40, r25	; 0x28
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    2478:	69 a9       	ldd	r22, Y+49	; 0x31
    247a:	7a a9       	ldd	r23, Y+50	; 0x32
    247c:	8b a9       	ldd	r24, Y+51	; 0x33
    247e:	9c a9       	ldd	r25, Y+52	; 0x34
    2480:	0e 94 33 27 	call	0x4e66	; 0x4e66 <square>
    2484:	3b 01       	movw	r6, r22
    2486:	4c 01       	movw	r8, r24
    2488:	6d a5       	ldd	r22, Y+45	; 0x2d
    248a:	7e a5       	ldd	r23, Y+46	; 0x2e
    248c:	8f a5       	ldd	r24, Y+47	; 0x2f
    248e:	98 a9       	ldd	r25, Y+48	; 0x30
    2490:	0e 94 33 27 	call	0x4e66	; 0x4e66 <square>
    2494:	7b 01       	movw	r14, r22
    2496:	8c 01       	movw	r16, r24
    2498:	69 a5       	ldd	r22, Y+41	; 0x29
    249a:	7a a5       	ldd	r23, Y+42	; 0x2a
    249c:	8b a5       	ldd	r24, Y+43	; 0x2b
    249e:	9c a5       	ldd	r25, Y+44	; 0x2c
    24a0:	0e 94 33 27 	call	0x4e66	; 0x4e66 <square>
    24a4:	5b 01       	movw	r10, r22
    24a6:	6c 01       	movw	r12, r24
    24a8:	6d a1       	ldd	r22, Y+37	; 0x25
    24aa:	7e a1       	ldd	r23, Y+38	; 0x26
    24ac:	8f a1       	ldd	r24, Y+39	; 0x27
    24ae:	98 a5       	ldd	r25, Y+40	; 0x28
    24b0:	0e 94 33 27 	call	0x4e66	; 0x4e66 <square>
    24b4:	1b 01       	movw	r2, r22
    24b6:	2c 01       	movw	r4, r24
    24b8:	c4 01       	movw	r24, r8
    24ba:	b3 01       	movw	r22, r6
    24bc:	a8 01       	movw	r20, r16
    24be:	97 01       	movw	r18, r14
    24c0:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    24c4:	a6 01       	movw	r20, r12
    24c6:	95 01       	movw	r18, r10
    24c8:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    24cc:	a2 01       	movw	r20, r4
    24ce:	91 01       	movw	r18, r2
    24d0:	0e 94 9a 23 	call	0x4734	; 0x4734 <__addsf3>
    24d4:	0e 94 f5 26 	call	0x4dea	; 0x4dea <sqrt>
    24d8:	ad a9       	ldd	r26, Y+53	; 0x35
    24da:	be a9       	ldd	r27, Y+54	; 0x36
    24dc:	9d 96       	adiw	r26, 0x2d	; 45
    24de:	6d 93       	st	X+, r22
    24e0:	7d 93       	st	X+, r23
    24e2:	8d 93       	st	X+, r24
    24e4:	9c 93       	st	X, r25
    24e6:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    24e8:	a8 96       	adiw	r28, 0x28	; 40
    24ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    24ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    24ee:	a8 97       	sbiw	r28, 0x28	; 40
    24f0:	ef 2b       	or	r30, r31
    24f2:	09 f0       	breq	.+2      	; 0x24f6 <__stack+0x2f7>
    24f4:	77 c1       	rjmp	.+750    	; 0x27e4 <__stack+0x5e5>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    24f6:	a6 96       	adiw	r28, 0x26	; 38
    24f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    24fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    24fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    24fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    2500:	a6 97       	sbiw	r28, 0x26	; 38
    2502:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	34 e2       	ldi	r19, 0x24	; 36
    250a:	44 e7       	ldi	r20, 0x74	; 116
    250c:	59 e4       	ldi	r21, 0x49	; 73
    250e:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    2512:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <lround>
    2516:	ac 01       	movw	r20, r24
    2518:	cb 01       	movw	r24, r22
    251a:	da 01       	movw	r26, r20
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    2520:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__floatunsisf>
    2524:	9b 01       	movw	r18, r22
    2526:	ac 01       	movw	r20, r24
    2528:	60 ec       	ldi	r22, 0xC0	; 192
    252a:	71 ee       	ldi	r23, 0xE1	; 225
    252c:	84 e6       	ldi	r24, 0x64	; 100
    252e:	9c e4       	ldi	r25, 0x4C	; 76
    2530:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    2534:	7b 01       	movw	r14, r22
    2536:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    2538:	69 a9       	ldd	r22, Y+49	; 0x31
    253a:	7a a9       	ldd	r23, Y+50	; 0x32
    253c:	8b a9       	ldd	r24, Y+51	; 0x33
    253e:	9c a9       	ldd	r25, Y+52	; 0x34
    2540:	a8 01       	movw	r20, r16
    2542:	97 01       	movw	r18, r14
    2544:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    2548:	ad a9       	ldd	r26, Y+53	; 0x35
    254a:	be a9       	ldd	r27, Y+54	; 0x36
    254c:	59 96       	adiw	r26, 0x19	; 25
    254e:	6d 93       	st	X+, r22
    2550:	7d 93       	st	X+, r23
    2552:	8d 93       	st	X+, r24
    2554:	9c 93       	st	X, r25
    2556:	5c 97       	sbiw	r26, 0x1c	; 28
  block->speed_y = delta_y_mm * multiplier;
    2558:	6d a5       	ldd	r22, Y+45	; 0x2d
    255a:	7e a5       	ldd	r23, Y+46	; 0x2e
    255c:	8f a5       	ldd	r24, Y+47	; 0x2f
    255e:	98 a9       	ldd	r25, Y+48	; 0x30
    2560:	a8 01       	movw	r20, r16
    2562:	97 01       	movw	r18, r14
    2564:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    2568:	ed a9       	ldd	r30, Y+53	; 0x35
    256a:	fe a9       	ldd	r31, Y+54	; 0x36
    256c:	65 8f       	std	Z+29, r22	; 0x1d
    256e:	76 8f       	std	Z+30, r23	; 0x1e
    2570:	87 8f       	std	Z+31, r24	; 0x1f
    2572:	90 a3       	std	Z+32, r25	; 0x20
  block->speed_z = delta_z_mm * multiplier;
    2574:	69 a5       	ldd	r22, Y+41	; 0x29
    2576:	7a a5       	ldd	r23, Y+42	; 0x2a
    2578:	8b a5       	ldd	r24, Y+43	; 0x2b
    257a:	9c a5       	ldd	r25, Y+44	; 0x2c
    257c:	a8 01       	movw	r20, r16
    257e:	97 01       	movw	r18, r14
    2580:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    2584:	ad a9       	ldd	r26, Y+53	; 0x35
    2586:	be a9       	ldd	r27, Y+54	; 0x36
    2588:	91 96       	adiw	r26, 0x21	; 33
    258a:	6d 93       	st	X+, r22
    258c:	7d 93       	st	X+, r23
    258e:	8d 93       	st	X+, r24
    2590:	9c 93       	st	X, r25
    2592:	94 97       	sbiw	r26, 0x24	; 36
  block->speed_c = delta_c_mm * multiplier;
    2594:	6d a1       	ldd	r22, Y+37	; 0x25
    2596:	7e a1       	ldd	r23, Y+38	; 0x26
    2598:	8f a1       	ldd	r24, Y+39	; 0x27
    259a:	98 a5       	ldd	r25, Y+40	; 0x28
    259c:	a8 01       	movw	r20, r16
    259e:	97 01       	movw	r18, r14
    25a0:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    25a4:	ed a9       	ldd	r30, Y+53	; 0x35
    25a6:	fe a9       	ldd	r31, Y+54	; 0x36
    25a8:	65 a3       	std	Z+37, r22	; 0x25
    25aa:	76 a3       	std	Z+38, r23	; 0x26
    25ac:	87 a3       	std	Z+39, r24	; 0x27
    25ae:	90 a7       	std	Z+40, r25	; 0x28
  block->nominal_speed = block->millimeters * multiplier;
    25b0:	65 a5       	ldd	r22, Z+45	; 0x2d
    25b2:	76 a5       	ldd	r23, Z+46	; 0x2e
    25b4:	87 a5       	ldd	r24, Z+47	; 0x2f
    25b6:	90 a9       	ldd	r25, Z+48	; 0x30
    25b8:	a8 01       	movw	r20, r16
    25ba:	97 01       	movw	r18, r14
    25bc:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    25c0:	ad a9       	ldd	r26, Y+53	; 0x35
    25c2:	be a9       	ldd	r27, Y+54	; 0x36
    25c4:	99 96       	adiw	r26, 0x29	; 41
    25c6:	6d 93       	st	X+, r22
    25c8:	7d 93       	st	X+, r23
    25ca:	8d 93       	st	X+, r24
    25cc:	9c 93       	st	X, r25
    25ce:	9c 97       	sbiw	r26, 0x2c	; 44
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    25d0:	51 96       	adiw	r26, 0x11	; 17
    25d2:	6d 91       	ld	r22, X+
    25d4:	7d 91       	ld	r23, X+
    25d6:	8d 91       	ld	r24, X+
    25d8:	9c 91       	ld	r25, X
    25da:	54 97       	sbiw	r26, 0x14	; 20
    25dc:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    25e0:	5b 01       	movw	r10, r22
    25e2:	6c 01       	movw	r12, r24
    25e4:	a8 01       	movw	r20, r16
    25e6:	97 01       	movw	r18, r14
    25e8:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    25ec:	0e 94 26 24 	call	0x484c	; 0x484c <ceil>
    25f0:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    25f4:	3b 01       	movw	r6, r22
    25f6:	4c 01       	movw	r8, r24
    25f8:	ed a9       	ldd	r30, Y+53	; 0x35
    25fa:	fe a9       	ldd	r31, Y+54	; 0x36
    25fc:	65 8b       	std	Z+21, r22	; 0x15
    25fe:	76 8b       	std	Z+22, r23	; 0x16
    2600:	87 8b       	std	Z+23, r24	; 0x17
    2602:	90 8f       	std	Z+24, r25	; 0x18
  block->entry_factor = 0.0;
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e0       	ldi	r26, 0x00	; 0
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	81 ab       	std	Z+49, r24	; 0x31
    260e:	92 ab       	std	Z+50, r25	; 0x32
    2610:	a3 ab       	std	Z+51, r26	; 0x33
    2612:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    2614:	60 91 99 06 	lds	r22, 0x0699
    2618:	70 91 9a 06 	lds	r23, 0x069A
    261c:	80 91 9b 06 	lds	r24, 0x069B
    2620:	90 91 9c 06 	lds	r25, 0x069C
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e7       	ldi	r20, 0x70	; 112
    262a:	52 e4       	ldi	r21, 0x42	; 66
    262c:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	52 e4       	ldi	r21, 0x42	; 66
    2638:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    263c:	7b 01       	movw	r14, r22
    263e:	8c 01       	movw	r16, r24
    2640:	ad a9       	ldd	r26, Y+53	; 0x35
    2642:	be a9       	ldd	r27, Y+54	; 0x36
    2644:	9d 96       	adiw	r26, 0x2d	; 45
    2646:	6d 91       	ld	r22, X+
    2648:	7d 91       	ld	r23, X+
    264a:	8d 91       	ld	r24, X+
    264c:	9c 91       	ld	r25, X
    264e:	d0 97       	sbiw	r26, 0x30	; 48
    2650:	a6 01       	movw	r20, r12
    2652:	95 01       	movw	r18, r10
    2654:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    2658:	9b 01       	movw	r18, r22
    265a:	ac 01       	movw	r20, r24
    265c:	c8 01       	movw	r24, r16
    265e:	b7 01       	movw	r22, r14
    2660:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    2664:	0e 94 26 24 	call	0x484c	; 0x484c <ceil>
    2668:	0d a9       	ldd	r16, Y+53	; 0x35
    266a:	1e a9       	ldd	r17, Y+54	; 0x36
    266c:	03 5c       	subi	r16, 0xC3	; 195
    266e:	1f 4f       	sbci	r17, 0xFF	; 255
    2670:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
    2674:	f8 01       	movw	r30, r16
    2676:	60 83       	st	Z, r22
    2678:	71 83       	std	Z+1, r23	; 0x01
    267a:	82 83       	std	Z+2, r24	; 0x02
    267c:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    267e:	20 91 1a 05 	lds	r18, 0x051A
    2682:	22 23       	and	r18, r18
    2684:	09 f0       	breq	.+2      	; 0x2688 <__stack+0x489>
    2686:	dd c0       	rjmp	.+442    	; 0x2842 <__stack+0x643>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
  } else {
    block->initial_rate = block->nominal_rate;
    2688:	ad a9       	ldd	r26, Y+53	; 0x35
    268a:	be a9       	ldd	r27, Y+54	; 0x36
    268c:	d5 96       	adiw	r26, 0x35	; 53
    268e:	6d 92       	st	X+, r6
    2690:	7d 92       	st	X+, r7
    2692:	8d 92       	st	X+, r8
    2694:	9c 92       	st	X, r9
    2696:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    2698:	fd 01       	movw	r30, r26
    269a:	61 ae       	std	Z+57, r6	; 0x39
    269c:	72 ae       	std	Z+58, r7	; 0x3a
    269e:	83 ae       	std	Z+59, r8	; 0x3b
    26a0:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    26a2:	ef 5b       	subi	r30, 0xBF	; 191
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	10 82       	st	Z, r1
    26a8:	11 82       	std	Z+1, r1	; 0x01
    26aa:	12 82       	std	Z+2, r1	; 0x02
    26ac:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    26ae:	ad 01       	movw	r20, r26
    26b0:	4b 5b       	subi	r20, 0xBB	; 187
    26b2:	5f 4f       	sbci	r21, 0xFF	; 255
    26b4:	fd 01       	movw	r30, r26
    26b6:	81 89       	ldd	r24, Z+17	; 0x11
    26b8:	92 89       	ldd	r25, Z+18	; 0x12
    26ba:	a3 89       	ldd	r26, Z+19	; 0x13
    26bc:	b4 89       	ldd	r27, Z+20	; 0x14
    26be:	fa 01       	movw	r30, r20
    26c0:	80 83       	st	Z, r24
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	a2 83       	std	Z+2, r26	; 0x02
    26c6:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    26c8:	d8 01       	movw	r26, r16
    26ca:	1d 92       	st	X+, r1
    26cc:	1d 92       	st	X+, r1
    26ce:	1d 92       	st	X+, r1
    26d0:	1c 92       	st	X, r1
    26d2:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    26d4:	ed a9       	ldd	r30, Y+53	; 0x35
    26d6:	fe a9       	ldd	r31, Y+54	; 0x36
    26d8:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    26da:	80 91 0a 05 	lds	r24, 0x050A
    26de:	90 91 0b 05 	lds	r25, 0x050B
    26e2:	a0 91 0c 05 	lds	r26, 0x050C
    26e6:	b0 91 0d 05 	lds	r27, 0x050D
    26ea:	4d 8d       	ldd	r20, Y+29	; 0x1d
    26ec:	5e 8d       	ldd	r21, Y+30	; 0x1e
    26ee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26f0:	78 a1       	ldd	r23, Y+32	; 0x20
    26f2:	48 17       	cp	r20, r24
    26f4:	59 07       	cpc	r21, r25
    26f6:	6a 07       	cpc	r22, r26
    26f8:	7b 07       	cpc	r23, r27
    26fa:	14 f4       	brge	.+4      	; 0x2700 <__stack+0x501>
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    2700:	80 91 0e 05 	lds	r24, 0x050E
    2704:	90 91 0f 05 	lds	r25, 0x050F
    2708:	a0 91 10 05 	lds	r26, 0x0510
    270c:	b0 91 11 05 	lds	r27, 0x0511
    2710:	49 a1       	ldd	r20, Y+33	; 0x21
    2712:	5a a1       	ldd	r21, Y+34	; 0x22
    2714:	6b a1       	ldd	r22, Y+35	; 0x23
    2716:	7c a1       	ldd	r23, Y+36	; 0x24
    2718:	48 17       	cp	r20, r24
    271a:	59 07       	cpc	r21, r25
    271c:	6a 07       	cpc	r22, r26
    271e:	7b 07       	cpc	r23, r27
    2720:	44 f4       	brge	.+16     	; 0x2732 <__stack+0x533>
    2722:	ad a9       	ldd	r26, Y+53	; 0x35
    2724:	be a9       	ldd	r27, Y+54	; 0x36
    2726:	50 96       	adiw	r26, 0x10	; 16
    2728:	8c 91       	ld	r24, X
    272a:	50 97       	sbiw	r26, 0x10	; 16
    272c:	88 60       	ori	r24, 0x08	; 8
    272e:	50 96       	adiw	r26, 0x10	; 16
    2730:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    2732:	80 91 12 05 	lds	r24, 0x0512
    2736:	90 91 13 05 	lds	r25, 0x0513
    273a:	a0 91 14 05 	lds	r26, 0x0514
    273e:	b0 91 15 05 	lds	r27, 0x0515
    2742:	49 8d       	ldd	r20, Y+25	; 0x19
    2744:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2746:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2748:	7c 8d       	ldd	r23, Y+28	; 0x1c
    274a:	48 17       	cp	r20, r24
    274c:	59 07       	cpc	r21, r25
    274e:	6a 07       	cpc	r22, r26
    2750:	7b 07       	cpc	r23, r27
    2752:	44 f4       	brge	.+16     	; 0x2764 <__stack+0x565>
    2754:	ad a9       	ldd	r26, Y+53	; 0x35
    2756:	be a9       	ldd	r27, Y+54	; 0x36
    2758:	50 96       	adiw	r26, 0x10	; 16
    275a:	8c 91       	ld	r24, X
    275c:	50 97       	sbiw	r26, 0x10	; 16
    275e:	80 64       	ori	r24, 0x40	; 64
    2760:	50 96       	adiw	r26, 0x10	; 16
    2762:	8c 93       	st	X, r24
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    2764:	4d 89       	ldd	r20, Y+21	; 0x15
    2766:	5e 89       	ldd	r21, Y+22	; 0x16
    2768:	6f 89       	ldd	r22, Y+23	; 0x17
    276a:	78 8d       	ldd	r23, Y+24	; 0x18
    276c:	89 89       	ldd	r24, Y+17	; 0x11
    276e:	9a 89       	ldd	r25, Y+18	; 0x12
    2770:	ab 89       	ldd	r26, Y+19	; 0x13
    2772:	bc 89       	ldd	r27, Y+20	; 0x14
    2774:	48 17       	cp	r20, r24
    2776:	59 07       	cpc	r21, r25
    2778:	6a 07       	cpc	r22, r26
    277a:	7b 07       	cpc	r23, r27
    277c:	44 f4       	brge	.+16     	; 0x278e <__stack+0x58f>
    277e:	ad a9       	ldd	r26, Y+53	; 0x35
    2780:	be a9       	ldd	r27, Y+54	; 0x36
    2782:	50 96       	adiw	r26, 0x10	; 16
    2784:	8c 91       	ld	r24, X
    2786:	50 97       	sbiw	r26, 0x10	; 16
    2788:	80 68       	ori	r24, 0x80	; 128
    278a:	50 96       	adiw	r26, 0x10	; 16
    278c:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    278e:	29 96       	adiw	r28, 0x09	; 9
    2790:	ee ad       	ldd	r30, Y+62	; 0x3e
    2792:	ff ad       	ldd	r31, Y+63	; 0x3f
    2794:	29 97       	sbiw	r28, 0x09	; 9
    2796:	f0 93 07 05 	sts	0x0507, r31
    279a:	e0 93 06 05 	sts	0x0506, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    279e:	aa e0       	ldi	r26, 0x0A	; 10
    27a0:	b5 e0       	ldi	r27, 0x05	; 5
    27a2:	fe 01       	movw	r30, r28
    27a4:	31 96       	adiw	r30, 0x01	; 1
    27a6:	80 e1       	ldi	r24, 0x10	; 16
    27a8:	01 90       	ld	r0, Z+
    27aa:	0d 92       	st	X+, r0
    27ac:	81 50       	subi	r24, 0x01	; 1
    27ae:	e1 f7       	brne	.-8      	; 0x27a8 <__stack+0x5a9>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    27b0:	22 23       	and	r18, r18
    27b2:	11 f0       	breq	.+4      	; 0x27b8 <__stack+0x5b9>
    27b4:	0e 94 1c 10 	call	0x2038	; 0x2038 <planner_recalculate>
  st_wake_up();
    27b8:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <st_wake_up>
    27bc:	71 cc       	rjmp	.-1822   	; 0x20a0 <plan_buffer_line+0x5a>
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    27be:	d8 01       	movw	r26, r16
    27c0:	c7 01       	movw	r24, r14
    27c2:	c7 cd       	rjmp	.-1138   	; 0x2352 <__stack+0x153>
    27c4:	da 01       	movw	r26, r20
    27c6:	c9 01       	movw	r24, r18
    27c8:	8e 15       	cp	r24, r14
    27ca:	9f 05       	cpc	r25, r15
    27cc:	a0 07       	cpc	r26, r16
    27ce:	b1 07       	cpc	r27, r17
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <__stack+0x5d5>
    27d2:	bf cd       	rjmp	.-1154   	; 0x2352 <__stack+0x153>
    27d4:	f4 cf       	rjmp	.-24     	; 0x27be <__stack+0x5bf>
    27d6:	da 01       	movw	r26, r20
    27d8:	c9 01       	movw	r24, r18
    27da:	a9 cd       	rjmp	.-1198   	; 0x232e <__stack+0x12f>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("didn't move"));
#endif

// needs for ACK
 	serialWrite('X');
    27dc:	88 e5       	ldi	r24, 0x58	; 88
    27de:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <serialWrite>
    27e2:	5e cc       	rjmp	.-1860   	; 0x20a0 <plan_buffer_line+0x5a>
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    microseconds = lround((block->millimeters/feed_rate)*1000000);
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    27e4:	60 ec       	ldi	r22, 0xC0	; 192
    27e6:	71 ee       	ldi	r23, 0xE1	; 225
    27e8:	84 e6       	ldi	r24, 0x64	; 100
    27ea:	9c e4       	ldi	r25, 0x4C	; 76
    27ec:	a6 96       	adiw	r28, 0x26	; 38
    27ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    27f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    27f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    27f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    27f6:	a6 97       	sbiw	r28, 0x26	; 38
    27f8:	0e 94 3d 24 	call	0x487a	; 0x487a <__divsf3>
    27fc:	8a ce       	rjmp	.-748    	; 0x2512 <__stack+0x313>
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    27fe:	10 95       	com	r17
    2800:	00 95       	com	r16
    2802:	f0 94       	com	r15
    2804:	e0 94       	com	r14
    2806:	e1 1c       	adc	r14, r1
    2808:	f1 1c       	adc	r15, r1
    280a:	01 1d       	adc	r16, r1
    280c:	11 1d       	adc	r17, r1
    280e:	76 cd       	rjmp	.-1300   	; 0x22fc <__stack+0xfd>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    2810:	b0 95       	com	r27
    2812:	a0 95       	com	r26
    2814:	90 95       	com	r25
    2816:	81 95       	neg	r24
    2818:	9f 4f       	sbci	r25, 0xFF	; 255
    281a:	af 4f       	sbci	r26, 0xFF	; 255
    281c:	bf 4f       	sbci	r27, 0xFF	; 255
    281e:	46 cd       	rjmp	.-1396   	; 0x22ac <__stack+0xad>
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    2820:	b0 95       	com	r27
    2822:	a0 95       	com	r26
    2824:	90 95       	com	r25
    2826:	81 95       	neg	r24
    2828:	9f 4f       	sbci	r25, 0xFF	; 255
    282a:	af 4f       	sbci	r26, 0xFF	; 255
    282c:	bf 4f       	sbci	r27, 0xFF	; 255
    282e:	24 cd       	rjmp	.-1464   	; 0x2278 <__stack+0x79>
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    2830:	90 94       	com	r9
    2832:	80 94       	com	r8
    2834:	70 94       	com	r7
    2836:	60 94       	com	r6
    2838:	61 1c       	adc	r6, r1
    283a:	71 1c       	adc	r7, r1
    283c:	81 1c       	adc	r8, r1
    283e:	91 1c       	adc	r9, r1
    2840:	cb cc       	rjmp	.-1642   	; 0x21d8 <plan_buffer_line+0x192>
  block->rate_delta = ceil(
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    2842:	8d a9       	ldd	r24, Y+53	; 0x35
    2844:	9e a9       	ldd	r25, Y+54	; 0x36
    2846:	0e 94 06 0b 	call	0x160c	; 0x160c <factor_for_safe_speed>
    284a:	8b 01       	movw	r16, r22
    284c:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    284e:	8d a9       	ldd	r24, Y+53	; 0x35
    2850:	9e a9       	ldd	r25, Y+54	; 0x36
    2852:	b9 01       	movw	r22, r18
    2854:	a8 01       	movw	r20, r16
    2856:	0e 94 77 0e 	call	0x1cee	; 0x1cee <calculate_trapezoid_for_block>
    285a:	29 81       	ldd	r18, Y+1	; 0x01
    285c:	3a 81       	ldd	r19, Y+2	; 0x02
    285e:	4b 81       	ldd	r20, Y+3	; 0x03
    2860:	5c 81       	ldd	r21, Y+4	; 0x04
    2862:	2d 8f       	std	Y+29, r18	; 0x1d
    2864:	3e 8f       	std	Y+30, r19	; 0x1e
    2866:	4f 8f       	std	Y+31, r20	; 0x1f
    2868:	58 a3       	std	Y+32, r21	; 0x20
    286a:	4d 81       	ldd	r20, Y+5	; 0x05
    286c:	5e 81       	ldd	r21, Y+6	; 0x06
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	49 a3       	std	Y+33, r20	; 0x21
    2874:	5a a3       	std	Y+34, r21	; 0x22
    2876:	6b a3       	std	Y+35, r22	; 0x23
    2878:	7c a3       	std	Y+36, r23	; 0x24
    287a:	69 85       	ldd	r22, Y+9	; 0x09
    287c:	7a 85       	ldd	r23, Y+10	; 0x0a
    287e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2880:	9c 85       	ldd	r25, Y+12	; 0x0c
    2882:	69 8f       	std	Y+25, r22	; 0x19
    2884:	7a 8f       	std	Y+26, r23	; 0x1a
    2886:	8b 8f       	std	Y+27, r24	; 0x1b
    2888:	9c 8f       	std	Y+28, r25	; 0x1c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	af 85       	ldd	r26, Y+15	; 0x0f
    2890:	b8 89       	ldd	r27, Y+16	; 0x10
    2892:	8d 8b       	std	Y+21, r24	; 0x15
    2894:	9e 8b       	std	Y+22, r25	; 0x16
    2896:	af 8b       	std	Y+23, r26	; 0x17
    2898:	b8 8f       	std	Y+24, r27	; 0x18
    289a:	20 91 16 05 	lds	r18, 0x0516
    289e:	30 91 17 05 	lds	r19, 0x0517
    28a2:	40 91 18 05 	lds	r20, 0x0518
    28a6:	50 91 19 05 	lds	r21, 0x0519
    28aa:	29 8b       	std	Y+17, r18	; 0x11
    28ac:	3a 8b       	std	Y+18, r19	; 0x12
    28ae:	4b 8b       	std	Y+19, r20	; 0x13
    28b0:	5c 8b       	std	Y+20, r21	; 0x14
    28b2:	20 91 1a 05 	lds	r18, 0x051A
    28b6:	0e cf       	rjmp	.-484    	; 0x26d4 <__stack+0x4d5>

000028b8 <sp_process>:
{
  beginSerial(BAUD_RATE);    
}

void sp_process(void)
{
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    28bc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <serialRead>
    28c0:	98 2f       	mov	r25, r24
    28c2:	8f 3f       	cpi	r24, 0xFF	; 255
    28c4:	e1 f0       	breq	.+56     	; 0x28fe <sp_process+0x46>
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    28c6:	20 91 4d 05 	lds	r18, 0x054D
    28ca:	22 23       	and	r18, r18
    28cc:	21 f0       	breq	.+8      	; 0x28d6 <sp_process+0x1e>
    28ce:	9a 30       	cpi	r25, 0x0A	; 10
    28d0:	c9 f0       	breq	.+50     	; 0x2904 <sp_process+0x4c>
    28d2:	9d 30       	cpi	r25, 0x0D	; 13
    28d4:	b9 f0       	breq	.+46     	; 0x2904 <sp_process+0x4c>
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    } else if (c <= ' ') { // Throw away whitespace and control characters
    28d6:	91 32       	cpi	r25, 0x21	; 33
    28d8:	8c f3       	brlt	.-30     	; 0x28bc <sp_process+0x4>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    28da:	89 2f       	mov	r24, r25
    28dc:	81 56       	subi	r24, 0x61	; 97
    28de:	8a 31       	cpi	r24, 0x1A	; 26
    28e0:	c0 f5       	brcc	.+112    	; 0x2952 <sp_process+0x9a>
      line[char_counter++] = c-'a'+'A';
    28e2:	e2 2f       	mov	r30, r18
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	e5 5e       	subi	r30, 0xE5	; 229
    28e8:	fa 4f       	sbci	r31, 0xFA	; 250
    28ea:	90 52       	subi	r25, 0x20	; 32
    28ec:	90 83       	st	Z, r25
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	20 93 4d 05 	sts	0x054D, r18

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    28f4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <serialRead>
    28f8:	98 2f       	mov	r25, r24
    28fa:	8f 3f       	cpi	r24, 0xFF	; 255
    28fc:	21 f7       	brne	.-56     	; 0x28c6 <sp_process+0xe>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    28fe:	1f 91       	pop	r17
    2900:	0f 91       	pop	r16
    2902:	08 95       	ret
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
    2904:	e2 2f       	mov	r30, r18
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	e5 5e       	subi	r30, 0xE5	; 229
    290a:	fa 4f       	sbci	r31, 0xFA	; 250
    290c:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    290e:	8b e1       	ldi	r24, 0x1B	; 27
    2910:	95 e0       	ldi	r25, 0x05	; 5
    2912:	0e 94 8e 05 	call	0xb1c	; 0xb1c <gc_execute_line>
    2916:	08 2f       	mov	r16, r24
static uint8_t char_counter;

static void status_message(int status_code)
{
	// Always override
	if( gHomed == FALSE ) {
    2918:	80 91 4f 05 	lds	r24, 0x054F
    291c:	88 23       	and	r24, r24
    291e:	11 f5       	brne	.+68     	; 0x2964 <sp_process+0xac>
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n\r")); 
			break;
		case GCSTATUS_NOT_HOMED:
			printPgmString(PSTR("error: Not homed\n\r")); 
    2920:	8f e1       	ldi	r24, 0x1F	; 31
    2922:	93 e0       	ldi	r25, 0x03	; 3
    2924:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {

		vacuum(0);
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
		head_down(0);
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
		atc_fire(0);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <atc_fire>


		// do these two last, or the previous ones won't work
		gHomed = FALSE ;
    2940:	10 92 4f 05 	sts	0x054F, r1

		// stops all but home
		set_busy(TRUE);
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <set_busy>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    294c:	10 92 4d 05 	sts	0x054D, r1
    2950:	b5 cf       	rjmp	.-150    	; 0x28bc <sp_process+0x4>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    2952:	e2 2f       	mov	r30, r18
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	e5 5e       	subi	r30, 0xE5	; 229
    2958:	fa 4f       	sbci	r31, 0xFA	; 250
    295a:	90 83       	st	Z, r25
    295c:	2f 5f       	subi	r18, 0xFF	; 255
    295e:	20 93 4d 05 	sts	0x054D, r18
    2962:	ac cf       	rjmp	.-168    	; 0x28bc <sp_process+0x4>
	// Always override
	if( gHomed == FALSE ) {
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    2964:	03 30       	cpi	r16, 0x03	; 3
    2966:	c1 f1       	breq	.+112    	; 0x29d8 <sp_process+0x120>
    2968:	04 30       	cpi	r16, 0x04	; 4
    296a:	c8 f0       	brcs	.+50     	; 0x299e <sp_process+0xe6>
    296c:	05 30       	cpi	r16, 0x05	; 5
    296e:	79 f1       	breq	.+94     	; 0x29ce <sp_process+0x116>
    2970:	05 30       	cpi	r16, 0x05	; 5
    2972:	f0 f0       	brcs	.+60     	; 0x29b0 <sp_process+0xf8>
    2974:	03 36       	cpi	r16, 0x63	; 99
    2976:	a1 f2       	breq	.-88     	; 0x2920 <sp_process+0x68>
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
    2978:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case GCSTATUS_NOT_HOMED:
			printPgmString(PSTR("error: Not homed\n\r")); 
			break;
		default:
			printPgmString(PSTR("error: "));
    297a:	87 e1       	ldi	r24, 0x17	; 23
    297c:	93 e0       	ldi	r25, 0x03	; 3
    297e:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
			printInteger(status_code);
    2982:	b8 01       	movw	r22, r16
    2984:	88 27       	eor	r24, r24
    2986:	77 fd       	sbrc	r23, 7
    2988:	80 95       	com	r24
    298a:	98 2f       	mov	r25, r24
    298c:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
			printPgmString(PSTR("\n\r"));
    2990:	84 e1       	ldi	r24, 0x14	; 20
    2992:	93 e0       	ldi	r25, 0x03	; 3
    2994:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
			break;
	}


	// if didn't pass, stop everything , can only do home after this
	if( status_code != GCSTATUS_OK ) {
    2998:	01 2b       	or	r16, r17
    299a:	c1 f2       	breq	.-80     	; 0x294c <sp_process+0x94>
    299c:	c5 cf       	rjmp	.-118    	; 0x2928 <sp_process+0x70>
	// Always override
	if( gHomed == FALSE ) {
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
    299e:	01 30       	cpi	r16, 0x01	; 1
    29a0:	89 f0       	breq	.+34     	; 0x29c4 <sp_process+0x10c>
    29a2:	02 30       	cpi	r16, 0x02	; 2
    29a4:	50 f0       	brcs	.+20     	; 0x29ba <sp_process+0x102>
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n\r")); 
			// typos are ok
			return;
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n\r")); 
    29a6:	87 e8       	ldi	r24, 0x87	; 135
    29a8:	93 e0       	ldi	r25, 0x03	; 3
    29aa:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    29ae:	ce cf       	rjmp	.-100    	; 0x294c <sp_process+0x94>
			printPgmString(PSTR("error: Unsupported statement\n\r")); 
			// typos are ok
			return;

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n\r")); 
    29b0:	8a e4       	ldi	r24, 0x4A	; 74
    29b2:	93 e0       	ldi	r25, 0x03	; 3
    29b4:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    29b8:	b7 cf       	rjmp	.-146    	; 0x2928 <sp_process+0x70>
		status_code = GCSTATUS_NOT_HOMED;
	}

	switch(status_code) {          
		case GCSTATUS_OK:
			printPgmString(PSTR("ok\n\r")); 
    29ba:	83 ec       	ldi	r24, 0xC3	; 195
    29bc:	93 e0       	ldi	r25, 0x03	; 3
    29be:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    29c2:	c4 cf       	rjmp	.-120    	; 0x294c <sp_process+0x94>
			break;
		case GCSTATUS_BAD_NUMBER_FORMAT:
			printPgmString(PSTR("error: Bad number format\n\r")); 
    29c4:	88 ea       	ldi	r24, 0xA8	; 168
    29c6:	93 e0       	ldi	r25, 0x03	; 3
    29c8:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    29cc:	bf cf       	rjmp	.-130    	; 0x294c <sp_process+0x94>

		case GCSTATUS_FLOATING_POINT_ERROR:
			printPgmString(PSTR("error: Floating point error\n\r")); 
			break;
		case GCSTATUS_FAILED_COMMAND:
			printPgmString(PSTR("error: Command Failed\n\r")); 
    29ce:	82 e3       	ldi	r24, 0x32	; 50
    29d0:	93 e0       	ldi	r25, 0x03	; 3
    29d2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    29d6:	a8 cf       	rjmp	.-176    	; 0x2928 <sp_process+0x70>
		case GCSTATUS_EXPECTED_COMMAND_LETTER:
			printPgmString(PSTR("error: Expected command letter\n\r")); 
			// typos are ok
			return;
		case GCSTATUS_UNSUPPORTED_STATEMENT:
			printPgmString(PSTR("error: Unsupported statement\n\r")); 
    29d8:	88 e6       	ldi	r24, 0x68	; 104
    29da:	93 e0       	ldi	r25, 0x03	; 3
    29dc:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    29e0:	b5 cf       	rjmp	.-150    	; 0x294c <sp_process+0x94>

000029e2 <sp_init>:
	}
}

void sp_init() 
{
  beginSerial(BAUD_RATE);    
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	76 e9       	ldi	r23, 0x96	; 150
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 a1 1c 	call	0x3942	; 0x3942 <beginSerial>
}
    29ee:	08 95       	ret

000029f0 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	ae e7       	ldi	r26, 0x7E	; 126
    29f6:	b4 e4       	ldi	r27, 0x44	; 68
    29f8:	80 93 7b 06 	sts	0x067B, r24
    29fc:	90 93 7c 06 	sts	0x067C, r25
    2a00:	a0 93 7d 06 	sts	0x067D, r26
    2a04:	b0 93 7e 06 	sts	0x067E, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2a08:	80 93 7f 06 	sts	0x067F, r24
    2a0c:	90 93 80 06 	sts	0x0680, r25
    2a10:	a0 93 81 06 	sts	0x0681, r26
    2a14:	b0 93 82 06 	sts	0x0682, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2a18:	84 ef       	ldi	r24, 0xF4	; 244
    2a1a:	99 ef       	ldi	r25, 0xF9	; 249
    2a1c:	ac e3       	ldi	r26, 0x3C	; 60
    2a1e:	b4 e4       	ldi	r27, 0x44	; 68
    2a20:	80 93 83 06 	sts	0x0683, r24
    2a24:	90 93 84 06 	sts	0x0684, r25
    2a28:	a0 93 85 06 	sts	0x0685, r26
    2a2c:	b0 93 86 06 	sts	0x0686, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    2a30:	81 ec       	ldi	r24, 0xC1	; 193
    2a32:	9a ec       	ldi	r25, 0xCA	; 202
    2a34:	a1 e3       	ldi	r26, 0x31	; 49
    2a36:	b2 e4       	ldi	r27, 0x42	; 66
    2a38:	80 93 87 06 	sts	0x0687, r24
    2a3c:	90 93 88 06 	sts	0x0688, r25
    2a40:	a0 93 89 06 	sts	0x0689, r26
    2a44:	b0 93 8a 06 	sts	0x068A, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2a48:	88 e0       	ldi	r24, 0x08	; 8
    2a4a:	80 93 8c 06 	sts	0x068C, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	a0 ef       	ldi	r26, 0xF0	; 240
    2a54:	b3 e4       	ldi	r27, 0x43	; 67
    2a56:	80 93 8d 06 	sts	0x068D, r24
    2a5a:	90 93 8e 06 	sts	0x068E, r25
    2a5e:	a0 93 8f 06 	sts	0x068F, r26
    2a62:	b0 93 90 06 	sts	0x0690, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2a66:	80 93 91 06 	sts	0x0691, r24
    2a6a:	90 93 92 06 	sts	0x0692, r25
    2a6e:	a0 93 93 06 	sts	0x0693, r26
    2a72:	b0 93 94 06 	sts	0x0694, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2a76:	8a e9       	ldi	r24, 0x9A	; 154
    2a78:	99 e9       	ldi	r25, 0x99	; 153
    2a7a:	a9 e9       	ldi	r26, 0x99	; 153
    2a7c:	b0 e4       	ldi	r27, 0x40	; 64
    2a7e:	80 93 99 06 	sts	0x0699, r24
    2a82:	90 93 9a 06 	sts	0x069A, r25
    2a86:	a0 93 9b 06 	sts	0x069B, r26
    2a8a:	b0 93 9c 06 	sts	0x069C, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2a8e:	8d ec       	ldi	r24, 0xCD	; 205
    2a90:	9c ec       	ldi	r25, 0xCC	; 204
    2a92:	ac ec       	ldi	r26, 0xCC	; 204
    2a94:	bd e3       	ldi	r27, 0x3D	; 61
    2a96:	80 93 95 06 	sts	0x0695, r24
    2a9a:	90 93 96 06 	sts	0x0696, r25
    2a9e:	a0 93 97 06 	sts	0x0697, r26
    2aa2:	b0 93 98 06 	sts	0x0698, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a8 e4       	ldi	r26, 0x48	; 72
    2aac:	b2 e4       	ldi	r27, 0x42	; 66
    2aae:	80 93 9d 06 	sts	0x069D, r24
    2ab2:	90 93 9e 06 	sts	0x069E, r25
    2ab6:	a0 93 9f 06 	sts	0x069F, r26
    2aba:	b0 93 a0 06 	sts	0x06A0, r27
}
    2abe:	08 95       	ret

00002ac0 <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	0e 94 47 03 	call	0x68e	; 0x68e <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2ac8:	87 36       	cpi	r24, 0x67	; 103
    2aca:	31 f0       	breq	.+12     	; 0x2ad8 <read_settings+0x18>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(FALSE);
    }
  } 
  else if (version == 1) {
    2acc:	81 30       	cpi	r24, 0x01	; 1
    2ace:	a9 f0       	breq	.+42     	; 0x2afa <read_settings+0x3a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    settings.max_jerk = DEFAULT_MAX_JERK;
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2ad4:	c9 01       	movw	r24, r18
    2ad6:	08 95       	ret
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
  
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2ad8:	8b e7       	ldi	r24, 0x7B	; 123
    2ada:	96 e0       	ldi	r25, 0x06	; 6
    2adc:	61 e0       	ldi	r22, 0x01	; 1
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	46 e2       	ldi	r20, 0x26	; 38
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	0e 94 ac 03 	call	0x758	; 0x758 <memcpy_from_eeprom_with_checksum>
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	89 2b       	or	r24, r25
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <read_settings+0x30>
    2aee:	21 e0       	ldi	r18, 0x01	; 1
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	28 27       	eor	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    2af6:	c9 01       	movw	r24, r18
    2af8:	08 95       	ret
      return(FALSE);
    }
  } 
  else if (version == 1) {
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2afa:	8b e7       	ldi	r24, 0x7B	; 123
    2afc:	96 e0       	ldi	r25, 0x06	; 6
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	4b e1       	ldi	r20, 0x1B	; 27
    2b04:	50 e0       	ldi	r21, 0x00	; 0
    2b06:	0e 94 ac 03 	call	0x758	; 0x758 <memcpy_from_eeprom_with_checksum>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	09 f3       	breq	.-62     	; 0x2ad0 <read_settings+0x10>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2b0e:	8a e9       	ldi	r24, 0x9A	; 154
    2b10:	99 e9       	ldi	r25, 0x99	; 153
    2b12:	a9 e9       	ldi	r26, 0x99	; 153
    2b14:	b0 e4       	ldi	r27, 0x40	; 64
    2b16:	80 93 99 06 	sts	0x0699, r24
    2b1a:	90 93 9a 06 	sts	0x069A, r25
    2b1e:	a0 93 9b 06 	sts	0x069B, r26
    2b22:	b0 93 9c 06 	sts	0x069C, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a8 e4       	ldi	r26, 0x48	; 72
    2b2c:	b2 e4       	ldi	r27, 0x42	; 66
    2b2e:	80 93 9d 06 	sts	0x069D, r24
    2b32:	90 93 9e 06 	sts	0x069E, r25
    2b36:	a0 93 9f 06 	sts	0x069F, r26
    2b3a:	b0 93 a0 06 	sts	0x06A0, r27
    2b3e:	21 e0       	ldi	r18, 0x01	; 1
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	c8 cf       	rjmp	.-112    	; 0x2ad4 <read_settings+0x14>

00002b44 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	67 e6       	ldi	r22, 0x67	; 103
    2b4a:	0e 94 4f 03 	call	0x69e	; 0x69e <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	6b e7       	ldi	r22, 0x7B	; 123
    2b54:	76 e0       	ldi	r23, 0x06	; 6
    2b56:	46 e2       	ldi	r20, 0x26	; 38
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <memcpy_to_eeprom_with_checksum>
}
    2b5e:	08 95       	ret

00002b60 <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2b60:	fc 01       	movw	r30, r24
  switch(parameter) {
    2b62:	86 30       	cpi	r24, 0x06	; 6
    2b64:	91 05       	cpc	r25, r1
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <settings_store_setting+0xa>
    2b68:	6d c0       	rjmp	.+218    	; 0x2c44 <settings_store_setting+0xe4>
    2b6a:	87 30       	cpi	r24, 0x07	; 7
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	a4 f0       	brlt	.+40     	; 0x2b98 <settings_store_setting+0x38>
    2b70:	88 30       	cpi	r24, 0x08	; 8
    2b72:	91 05       	cpc	r25, r1
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <settings_store_setting+0x18>
    2b76:	48 c0       	rjmp	.+144    	; 0x2c08 <settings_store_setting+0xa8>
    2b78:	88 30       	cpi	r24, 0x08	; 8
    2b7a:	91 05       	cpc	r25, r1
    2b7c:	b4 f1       	brlt	.+108    	; 0x2bea <settings_store_setting+0x8a>
    2b7e:	89 30       	cpi	r24, 0x09	; 9
    2b80:	91 05       	cpc	r25, r1
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <settings_store_setting+0x26>
    2b84:	7b c0       	rjmp	.+246    	; 0x2c7c <settings_store_setting+0x11c>
    2b86:	e8 5e       	subi	r30, 0xE8	; 232
    2b88:	f3 40       	sbci	r31, 0x03	; 3
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <settings_store_setting+0x2e>
    2b8c:	6a c0       	rjmp	.+212    	; 0x2c62 <settings_store_setting+0x102>
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    2b8e:	8d ed       	ldi	r24, 0xDD	; 221
    2b90:	93 e0       	ldi	r25, 0x03	; 3
    2b92:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    2b96:	08 95       	ret
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    2b98:	84 30       	cpi	r24, 0x04	; 4
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <settings_store_setting+0x40>
    2b9e:	43 c0       	rjmp	.+134    	; 0x2c26 <settings_store_setting+0xc6>
    2ba0:	85 30       	cpi	r24, 0x05	; 5
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	9c f4       	brge	.+38     	; 0x2bcc <settings_store_setting+0x6c>
    2ba6:	97 fd       	sbrc	r25, 7
    2ba8:	f2 cf       	rjmp	.-28     	; 0x2b8e <settings_store_setting+0x2e>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2baa:	ee 0f       	add	r30, r30
    2bac:	ff 1f       	adc	r31, r31
    2bae:	ee 0f       	add	r30, r30
    2bb0:	ff 1f       	adc	r31, r31
    2bb2:	e5 58       	subi	r30, 0x85	; 133
    2bb4:	f9 4f       	sbci	r31, 0xF9	; 249
    2bb6:	40 83       	st	Z, r20
    2bb8:	51 83       	std	Z+1, r21	; 0x01
    2bba:	62 83       	std	Z+2, r22	; 0x02
    2bbc:	73 83       	std	Z+3, r23	; 0x03
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2bbe:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2bc2:	88 ec       	ldi	r24, 0xC8	; 200
    2bc4:	93 e0       	ldi	r25, 0x03	; 3
    2bc6:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    2bca:	08 95       	ret
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    2bcc:	40 93 8d 06 	sts	0x068D, r20
    2bd0:	50 93 8e 06 	sts	0x068E, r21
    2bd4:	60 93 8f 06 	sts	0x068F, r22
    2bd8:	70 93 90 06 	sts	0x0690, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2bdc:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2be0:	88 ec       	ldi	r24, 0xC8	; 200
    2be2:	93 e0       	ldi	r25, 0x03	; 3
    2be4:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    2be8:	08 95       	ret
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    2bea:	40 93 95 06 	sts	0x0695, r20
    2bee:	50 93 96 06 	sts	0x0696, r21
    2bf2:	60 93 97 06 	sts	0x0697, r22
    2bf6:	70 93 98 06 	sts	0x0698, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2bfa:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2bfe:	88 ec       	ldi	r24, 0xC8	; 200
    2c00:	93 e0       	ldi	r25, 0x03	; 3
    2c02:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    2c06:	08 95       	ret
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    2c08:	40 93 99 06 	sts	0x0699, r20
    2c0c:	50 93 9a 06 	sts	0x069A, r21
    2c10:	60 93 9b 06 	sts	0x069B, r22
    2c14:	70 93 9c 06 	sts	0x069C, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c18:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c1c:	88 ec       	ldi	r24, 0xC8	; 200
    2c1e:	93 e0       	ldi	r25, 0x03	; 3
    2c20:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    2c24:	08 95       	ret
// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    2c26:	cb 01       	movw	r24, r22
    2c28:	ba 01       	movw	r22, r20
    2c2a:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <round>
    2c2e:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    2c32:	60 93 8c 06 	sts	0x068C, r22
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c36:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c3a:	88 ec       	ldi	r24, 0xC8	; 200
    2c3c:	93 e0       	ldi	r25, 0x03	; 3
    2c3e:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    2c42:	08 95       	ret
  switch(parameter) {
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    2c44:	40 93 91 06 	sts	0x0691, r20
    2c48:	50 93 92 06 	sts	0x0692, r21
    2c4c:	60 93 93 06 	sts	0x0693, r22
    2c50:	70 93 94 06 	sts	0x0694, r23
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c54:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c58:	88 ec       	ldi	r24, 0xC8	; 200
    2c5a:	93 e0       	ldi	r25, 0x03	; 3
    2c5c:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    2c60:	08 95       	ret
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
    2c62:	cb 01       	movw	r24, r22
    2c64:	ba 01       	movw	r22, r20
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	a9 f0       	breq	.+42     	; 0x2ca0 <settings_store_setting+0x140>
    2c76:	0e 94 83 17 	call	0x2f06	; 0x2f06 <st_enable>
    2c7a:	08 95       	ret
    case 4: settings.pulse_microseconds = round(value); break;
    case 5: settings.default_feed_rate = value; break;
    case 6: settings.default_seek_rate = value; break;
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    2c7c:	db 01       	movw	r26, r22
    2c7e:	ca 01       	movw	r24, r20
    2c80:	bf 77       	andi	r27, 0x7F	; 127
    2c82:	80 93 9d 06 	sts	0x069D, r24
    2c86:	90 93 9e 06 	sts	0x069E, r25
    2c8a:	a0 93 9f 06 	sts	0x069F, r26
    2c8e:	b0 93 a0 06 	sts	0x06A0, r27
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
      return;
  }
  write_settings();
    2c92:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    2c96:	88 ec       	ldi	r24, 0xC8	; 200
    2c98:	93 e0       	ldi	r25, 0x03	; 3
    2c9a:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    2c9e:	08 95       	ret
    case 7: settings.mm_per_arc_segment = value; break;
    case 8: settings.acceleration = value; break;
    case 9: settings.max_jerk = fabs(value); break;
    case 1000:
	  if (!!value) st_enable();
      else st_disable();
    2ca0:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <st_disable>
    2ca4:	08 95       	ret

00002ca6 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    2ca6:	81 eb       	ldi	r24, 0xB1	; 177
    2ca8:	95 e0       	ldi	r25, 0x05	; 5
    2caa:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    2cae:	8a ea       	ldi	r24, 0xAA	; 170
    2cb0:	95 e0       	ldi	r25, 0x05	; 5
    2cb2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printPgmString(PSTR("\r\n"));
    2cb6:	87 ea       	ldi	r24, 0xA7	; 167
    2cb8:	95 e0       	ldi	r25, 0x05	; 5
    2cba:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    2cbe:	81 ea       	ldi	r24, 0xA1	; 161
    2cc0:	95 e0       	ldi	r25, 0x05	; 5
    2cc2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    2cc6:	60 91 7b 06 	lds	r22, 0x067B
    2cca:	70 91 7c 06 	lds	r23, 0x067C
    2cce:	80 91 7d 06 	lds	r24, 0x067D
    2cd2:	90 91 7e 06 	lds	r25, 0x067E
    2cd6:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    2cda:	81 e9       	ldi	r24, 0x91	; 145
    2cdc:	95 e0       	ldi	r25, 0x05	; 5
    2cde:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2ce2:	8b e8       	ldi	r24, 0x8B	; 139
    2ce4:	95 e0       	ldi	r25, 0x05	; 5
    2ce6:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2cea:	60 91 7f 06 	lds	r22, 0x067F
    2cee:	70 91 80 06 	lds	r23, 0x0680
    2cf2:	80 91 81 06 	lds	r24, 0x0681
    2cf6:	90 91 82 06 	lds	r25, 0x0682
    2cfa:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    2cfe:	8b e7       	ldi	r24, 0x7B	; 123
    2d00:	95 e0       	ldi	r25, 0x05	; 5
    2d02:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2d06:	85 e7       	ldi	r24, 0x75	; 117
    2d08:	95 e0       	ldi	r25, 0x05	; 5
    2d0a:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    2d0e:	60 91 83 06 	lds	r22, 0x0683
    2d12:	70 91 84 06 	lds	r23, 0x0684
    2d16:	80 91 85 06 	lds	r24, 0x0685
    2d1a:	90 91 86 06 	lds	r25, 0x0686
    2d1e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2d22:	85 e6       	ldi	r24, 0x65	; 101
    2d24:	95 e0       	ldi	r25, 0x05	; 5
    2d26:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2d2a:	8f e5       	ldi	r24, 0x5F	; 95
    2d2c:	95 e0       	ldi	r25, 0x05	; 5
    2d2e:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2d32:	60 91 87 06 	lds	r22, 0x0687
    2d36:	70 91 88 06 	lds	r23, 0x0688
    2d3a:	80 91 89 06 	lds	r24, 0x0689
    2d3e:	90 91 8a 06 	lds	r25, 0x068A
    2d42:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2d46:	8d e4       	ldi	r24, 0x4D	; 77
    2d48:	95 e0       	ldi	r25, 0x05	; 5
    2d4a:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    2d4e:	87 e4       	ldi	r24, 0x47	; 71
    2d50:	95 e0       	ldi	r25, 0x05	; 5
    2d52:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printInteger(settings.pulse_microseconds);
    2d56:	60 91 8c 06 	lds	r22, 0x068C
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2d64:	8a e2       	ldi	r24, 0x2A	; 42
    2d66:	95 e0       	ldi	r25, 0x05	; 5
    2d68:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    2d6c:	84 e2       	ldi	r24, 0x24	; 36
    2d6e:	95 e0       	ldi	r25, 0x05	; 5
    2d70:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.default_feed_rate);
    2d74:	60 91 8d 06 	lds	r22, 0x068D
    2d78:	70 91 8e 06 	lds	r23, 0x068E
    2d7c:	80 91 8f 06 	lds	r24, 0x068F
    2d80:	90 91 90 06 	lds	r25, 0x0690
    2d84:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    2d88:	86 e0       	ldi	r24, 0x06	; 6
    2d8a:	95 e0       	ldi	r25, 0x05	; 5
    2d8c:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	95 e0       	ldi	r25, 0x05	; 5
    2d94:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.default_seek_rate);
    2d98:	60 91 91 06 	lds	r22, 0x0691
    2d9c:	70 91 92 06 	lds	r23, 0x0692
    2da0:	80 91 93 06 	lds	r24, 0x0693
    2da4:	90 91 94 06 	lds	r25, 0x0694
    2da8:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    2dac:	82 ee       	ldi	r24, 0xE2	; 226
    2dae:	94 e0       	ldi	r25, 0x04	; 4
    2db0:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    2db4:	8c ed       	ldi	r24, 0xDC	; 220
    2db6:	94 e0       	ldi	r25, 0x04	; 4
    2db8:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    2dbc:	60 91 95 06 	lds	r22, 0x0695
    2dc0:	70 91 96 06 	lds	r23, 0x0696
    2dc4:	80 91 97 06 	lds	r24, 0x0697
    2dc8:	90 91 98 06 	lds	r25, 0x0698
    2dcc:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    2dd0:	88 ec       	ldi	r24, 0xC8	; 200
    2dd2:	94 e0       	ldi	r25, 0x04	; 4
    2dd4:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    2dd8:	82 ec       	ldi	r24, 0xC2	; 194
    2dda:	94 e0       	ldi	r25, 0x04	; 4
    2ddc:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.acceleration);
    2de0:	60 91 99 06 	lds	r22, 0x0699
    2de4:	70 91 9a 06 	lds	r23, 0x069A
    2de8:	80 91 9b 06 	lds	r24, 0x069B
    2dec:	90 91 9c 06 	lds	r25, 0x069C
    2df0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2df4:	84 ea       	ldi	r24, 0xA4	; 164
    2df6:	94 e0       	ldi	r25, 0x04	; 4
    2df8:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    2dfc:	8e e9       	ldi	r24, 0x9E	; 158
    2dfe:	94 e0       	ldi	r25, 0x04	; 4
    2e00:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printFloat(settings.max_jerk);
    2e04:	60 91 9d 06 	lds	r22, 0x069D
    2e08:	70 91 9e 06 	lds	r23, 0x069E
    2e0c:	80 91 9f 06 	lds	r24, 0x069F
    2e10:	90 91 a0 06 	lds	r25, 0x06A0
    2e14:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2e18:	86 e6       	ldi	r24, 0x66	; 102
    2e1a:	94 e0       	ldi	r25, 0x04	; 4
    2e1c:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    2e20:	8d e5       	ldi	r24, 0x5D	; 93
    2e22:	94 e0       	ldi	r25, 0x04	; 4
    2e24:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
  printInteger(st_is_enabled());
    2e28:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <st_is_enabled>
    2e2c:	aa 27       	eor	r26, r26
    2e2e:	97 fd       	sbrc	r25, 7
    2e30:	a0 95       	com	r26
    2e32:	ba 2f       	mov	r27, r26
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    2e3c:	84 e3       	ldi	r24, 0x34	; 52
    2e3e:	94 e0       	ldi	r25, 0x04	; 4
    2e40:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2e44:	81 ef       	ldi	r24, 0xF1	; 241
    2e46:	93 e0       	ldi	r25, 0x03	; 3
    2e48:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
}
    2e4c:	08 95       	ret

00002e4e <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    2e4e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <read_settings>
    2e52:	89 2b       	or	r24, r25
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <settings_init+0xa>
    2e56:	08 95       	ret
 //   printPgmString(PSTR("'$' to dump current settings\r\n"));
  } else {
   // printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    settings_reset();
    2e58:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <settings_reset>
    write_settings();
    2e5c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <write_settings>
    settings_dump();
    2e60:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <settings_dump>
    2e64:	08 95       	ret

00002e66 <spindle_init>:
#include <avr/io.h>
#include <avr/delay.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2e66:	e1 e0       	ldi	r30, 0x01	; 1
    2e68:	f1 e0       	ldi	r31, 0x01	; 1
    2e6a:	80 81       	ld	r24, Z
    2e6c:	80 64       	ori	r24, 0x40	; 64
    2e6e:	80 83       	st	Z, r24
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2e70:	27 9a       	sbi	0x04, 7	; 4

  STEPPERS_ENABLE_DDR |= _BV( HEAD_ROT );
    2e72:	3e 9a       	sbi	0x07, 6	; 7

}
    2e74:	08 95       	ret

00002e76 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    2e76:	97 fd       	sbrc	r25, 7
    2e78:	07 c0       	rjmp	.+14     	; 0x2e88 <spindle_run+0x12>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    2e7a:	2f 98       	cbi	0x05, 7	; 5
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2e7c:	80 91 02 01 	lds	r24, 0x0102
    2e80:	80 64       	ori	r24, 0x40	; 64
    2e82:	80 93 02 01 	sts	0x0102, r24
}
    2e86:	08 95       	ret
void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    2e88:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    2e8a:	80 91 02 01 	lds	r24, 0x0102
    2e8e:	80 64       	ori	r24, 0x40	; 64
    2e90:	80 93 02 01 	sts	0x0102, r24
}
    2e94:	08 95       	ret

00002e96 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    2e96:	e2 e0       	ldi	r30, 0x02	; 2
    2e98:	f1 e0       	ldi	r31, 0x01	; 1
    2e9a:	80 81       	ld	r24, Z
    2e9c:	8f 7b       	andi	r24, 0xBF	; 191
    2e9e:	80 83       	st	Z, r24
}
    2ea0:	08 95       	ret

00002ea2 <rotate_head>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ea2:	35 e3       	ldi	r19, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ea4:	40 e7       	ldi	r20, 0x70	; 112
    2ea6:	57 e1       	ldi	r21, 0x17	; 23

void rotate_head( int steps )
{
	do {

		STEPPERS_ENABLE_PORT |= _BV( HEAD_ROT  );
    2ea8:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eaa:	23 2f       	mov	r18, r19
    2eac:	2a 95       	dec	r18
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <rotate_head+0xa>
		_delay_us( 10 );

	    STEPPERS_ENABLE_PORT &= ~_BV(HEAD_ROT);
    2eb0:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eb2:	fa 01       	movw	r30, r20
    2eb4:	31 97       	sbiw	r30, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <rotate_head+0x12>
		_delay_us(1500);

	} while( steps-- );
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	2f ef       	ldi	r18, 0xFF	; 255
    2ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ebe:	92 07       	cpc	r25, r18
    2ec0:	99 f7       	brne	.-26     	; 0x2ea8 <rotate_head+0x6>

}
    2ec2:	08 95       	ret

00002ec4 <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    2ec4:	ef e6       	ldi	r30, 0x6F	; 111
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	82 60       	ori	r24, 0x02	; 2
    2ecc:	80 83       	st	Z, r24
}
    2ece:	08 95       	ret

00002ed0 <set_busy>:
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	90 93 68 05 	sts	0x0568, r25
    2ed6:	80 93 67 05 	sts	0x0567, r24
}
    2eda:	08 95       	ret

00002edc <get_busy>:

int get_busy( void ) 
{
	return busy;
    2edc:	20 91 67 05 	lds	r18, 0x0567
    2ee0:	30 91 68 05 	lds	r19, 0x0568
}
    2ee4:	c9 01       	movw	r24, r18
    2ee6:	08 95       	ret

00002ee8 <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    2ee8:	1f 92       	push	r1
    2eea:	0f 92       	push	r0
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	0f 92       	push	r0
    2ef0:	11 24       	eor	r1, r1
    2ef2:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    2ef4:	81 b3       	in	r24, 0x11	; 17
    2ef6:	8a 7c       	andi	r24, 0xCA	; 202
    2ef8:	81 bb       	out	0x11, r24	; 17
}
    2efa:	8f 91       	pop	r24
    2efc:	0f 90       	pop	r0
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	0f 90       	pop	r0
    2f02:	1f 90       	pop	r1
    2f04:	18 95       	reti

00002f06 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f06:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    2f08:	08 95       	ret

00002f0a <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2f0a:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    2f0c:	08 95       	ret

00002f0e <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2f0e:	3c 99       	sbic	0x07, 4	; 7
    2f10:	04 c0       	rjmp	.+8      	; 0x2f1a <st_is_enabled+0xc>
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2f16:	c9 01       	movw	r24, r18
    2f18:	08 95       	ret
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    2f1a:	88 b1       	in	r24, 0x08	; 8
    2f1c:	82 95       	swap	r24
    2f1e:	8f 70       	andi	r24, 0x0F	; 15
    2f20:	80 95       	com	r24
    2f22:	81 70       	andi	r24, 0x01	; 1
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    2f28:	c9 01       	movw	r24, r18
    2f2a:	08 95       	ret

00002f2c <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    2f2c:	60 30       	cpi	r22, 0x00	; 0
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	72 07       	cpc	r23, r18
    2f32:	21 e0       	ldi	r18, 0x01	; 1
    2f34:	82 07       	cpc	r24, r18
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	92 07       	cpc	r25, r18
    2f3a:	08 f4       	brcc	.+2      	; 0x2f3e <config_step_timer+0x12>
    2f3c:	5c c0       	rjmp	.+184    	; 0x2ff6 <config_step_timer+0xca>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    2f3e:	60 30       	cpi	r22, 0x00	; 0
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	72 07       	cpc	r23, r18
    2f44:	28 e0       	ldi	r18, 0x08	; 8
    2f46:	82 07       	cpc	r24, r18
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	92 07       	cpc	r25, r18
    2f4c:	78 f1       	brcs	.+94     	; 0x2fac <config_step_timer+0x80>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
    2f4e:	60 30       	cpi	r22, 0x00	; 0
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	72 07       	cpc	r23, r18
    2f54:	20 e4       	ldi	r18, 0x40	; 64
    2f56:	82 07       	cpc	r24, r18
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	92 07       	cpc	r25, r18
    2f5c:	08 f4       	brcc	.+2      	; 0x2f60 <config_step_timer+0x34>
    2f5e:	51 c0       	rjmp	.+162    	; 0x3002 <config_step_timer+0xd6>
		ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
	} else if (cycles <= 0xffffffL) {
    2f60:	60 30       	cpi	r22, 0x00	; 0
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	72 07       	cpc	r23, r18
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	82 07       	cpc	r24, r18
    2f6a:	21 e0       	ldi	r18, 0x01	; 1
    2f6c:	92 07       	cpc	r25, r18
    2f6e:	08 f4       	brcc	.+2      	; 0x2f72 <config_step_timer+0x46>
    2f70:	6d c0       	rjmp	.+218    	; 0x304c <config_step_timer+0x120>
		ceiling =  (cycles >> 8);
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
	} else if (cycles <= 0x3ffffffL) {
    2f72:	60 30       	cpi	r22, 0x00	; 0
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	72 07       	cpc	r23, r18
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	82 07       	cpc	r24, r18
    2f7c:	24 e0       	ldi	r18, 0x04	; 4
    2f7e:	92 07       	cpc	r25, r18
    2f80:	08 f0       	brcs	.+2      	; 0x2f84 <config_step_timer+0x58>
    2f82:	71 c0       	rjmp	.+226    	; 0x3066 <config_step_timer+0x13a>
		ceiling = (cycles >> 10);
    2f84:	2a e0       	ldi	r18, 0x0A	; 10
    2f86:	96 95       	lsr	r25
    2f88:	87 95       	ror	r24
    2f8a:	77 95       	ror	r23
    2f8c:	67 95       	ror	r22
    2f8e:	2a 95       	dec	r18
    2f90:	d1 f7       	brne	.-12     	; 0x2f86 <config_step_timer+0x5a>
    2f92:	fb 01       	movw	r30, r22
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    2f94:	9b 01       	movw	r18, r22
    2f96:	40 e0       	ldi	r20, 0x00	; 0
    2f98:	50 e0       	ldi	r21, 0x00	; 0
    2f9a:	8a e0       	ldi	r24, 0x0A	; 10
    2f9c:	22 0f       	add	r18, r18
    2f9e:	33 1f       	adc	r19, r19
    2fa0:	44 1f       	adc	r20, r20
    2fa2:	55 1f       	adc	r21, r21
    2fa4:	8a 95       	dec	r24
    2fa6:	d1 f7       	brne	.-12     	; 0x2f9c <config_step_timer+0x70>
    2fa8:	95 e0       	ldi	r25, 0x05	; 5
    2faa:	18 c0       	rjmp	.+48     	; 0x2fdc <config_step_timer+0xb0>
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    2fac:	23 e0       	ldi	r18, 0x03	; 3
    2fae:	96 95       	lsr	r25
    2fb0:	87 95       	ror	r24
    2fb2:	77 95       	ror	r23
    2fb4:	67 95       	ror	r22
    2fb6:	2a 95       	dec	r18
    2fb8:	d1 f7       	brne	.-12     	; 0x2fae <config_step_timer+0x82>
    2fba:	fb 01       	movw	r30, r22
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2fbc:	9b 01       	movw	r18, r22
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	22 0f       	add	r18, r18
    2fc4:	33 1f       	adc	r19, r19
    2fc6:	44 1f       	adc	r20, r20
    2fc8:	55 1f       	adc	r21, r21
    2fca:	22 0f       	add	r18, r18
    2fcc:	33 1f       	adc	r19, r19
    2fce:	44 1f       	adc	r20, r20
    2fd0:	55 1f       	adc	r21, r21
    2fd2:	22 0f       	add	r18, r18
    2fd4:	33 1f       	adc	r19, r19
    2fd6:	44 1f       	adc	r20, r20
    2fd8:	55 1f       	adc	r21, r21
    2fda:	92 e0       	ldi	r25, 0x02	; 2
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    2fdc:	80 91 81 00 	lds	r24, 0x0081
    2fe0:	88 7f       	andi	r24, 0xF8	; 248
    2fe2:	98 2b       	or	r25, r24
    2fe4:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    2fe8:	f0 93 89 00 	sts	0x0089, r31
    2fec:	e0 93 88 00 	sts	0x0088, r30
  return(actual_cycles);
}
    2ff0:	b9 01       	movw	r22, r18
    2ff2:	ca 01       	movw	r24, r20
    2ff4:	08 95       	ret
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
		ceiling = cycles;
    2ff6:	fb 01       	movw	r30, r22
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    2ff8:	9b 01       	movw	r18, r22
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	91 e0       	ldi	r25, 0x01	; 1
    3000:	ed cf       	rjmp	.-38     	; 0x2fdc <config_step_timer+0xb0>
	} else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
	} else if (cycles <= 0x3fffffL) {
		ceiling =  cycles >> 6;
    3002:	b6 e0       	ldi	r27, 0x06	; 6
    3004:	96 95       	lsr	r25
    3006:	87 95       	ror	r24
    3008:	77 95       	ror	r23
    300a:	67 95       	ror	r22
    300c:	ba 95       	dec	r27
    300e:	d1 f7       	brne	.-12     	; 0x3004 <config_step_timer+0xd8>
    3010:	fb 01       	movw	r30, r22
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    3012:	9b 01       	movw	r18, r22
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	50 e0       	ldi	r21, 0x00	; 0
    3018:	22 0f       	add	r18, r18
    301a:	33 1f       	adc	r19, r19
    301c:	44 1f       	adc	r20, r20
    301e:	55 1f       	adc	r21, r21
    3020:	22 0f       	add	r18, r18
    3022:	33 1f       	adc	r19, r19
    3024:	44 1f       	adc	r20, r20
    3026:	55 1f       	adc	r21, r21
    3028:	22 0f       	add	r18, r18
    302a:	33 1f       	adc	r19, r19
    302c:	44 1f       	adc	r20, r20
    302e:	55 1f       	adc	r21, r21
    3030:	22 0f       	add	r18, r18
    3032:	33 1f       	adc	r19, r19
    3034:	44 1f       	adc	r20, r20
    3036:	55 1f       	adc	r21, r21
    3038:	22 0f       	add	r18, r18
    303a:	33 1f       	adc	r19, r19
    303c:	44 1f       	adc	r20, r20
    303e:	55 1f       	adc	r21, r21
    3040:	22 0f       	add	r18, r18
    3042:	33 1f       	adc	r19, r19
    3044:	44 1f       	adc	r20, r20
    3046:	55 1f       	adc	r21, r21
    3048:	93 e0       	ldi	r25, 0x03	; 3
    304a:	c8 cf       	rjmp	.-112    	; 0x2fdc <config_step_timer+0xb0>
	} else if (cycles <= 0xffffffL) {
		ceiling =  (cycles >> 8);
    304c:	bb 27       	eor	r27, r27
    304e:	a9 2f       	mov	r26, r25
    3050:	98 2f       	mov	r25, r24
    3052:	87 2f       	mov	r24, r23
    3054:	fc 01       	movw	r30, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    3056:	a0 e0       	ldi	r26, 0x00	; 0
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	22 27       	eor	r18, r18
    305c:	38 2f       	mov	r19, r24
    305e:	49 2f       	mov	r20, r25
    3060:	5a 2f       	mov	r21, r26
    3062:	94 e0       	ldi	r25, 0x04	; 4
    3064:	bb cf       	rjmp	.-138    	; 0x2fdc <config_step_timer+0xb0>
	} else if (cycles <= 0x3ffffffL) {
    3066:	ef ef       	ldi	r30, 0xFF	; 255
    3068:	ff ef       	ldi	r31, 0xFF	; 255
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	3c ef       	ldi	r19, 0xFC	; 252
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	50 e0       	ldi	r21, 0x00	; 0
    3072:	95 e0       	ldi	r25, 0x05	; 5
    3074:	b3 cf       	rjmp	.-154    	; 0x2fdc <config_step_timer+0xb0>

00003076 <set_step_events_per_minute>:
  // Set ceiling
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
    3076:	9b 01       	movw	r18, r22
    3078:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    307a:	20 3b       	cpi	r18, 0xB0	; 176
    307c:	84 e0       	ldi	r24, 0x04	; 4
    307e:	38 07       	cpc	r19, r24
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	48 07       	cpc	r20, r24
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	58 07       	cpc	r21, r24
    3088:	78 f4       	brcc	.+30     	; 0x30a8 <set_step_events_per_minute+0x32>
    308a:	60 e0       	ldi	r22, 0x00	; 0
    308c:	75 e3       	ldi	r23, 0x35	; 53
    308e:	8c e0       	ldi	r24, 0x0C	; 12
    3090:	90 e0       	ldi	r25, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    3092:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <config_step_timer>
    3096:	60 93 69 05 	sts	0x0569, r22
    309a:	70 93 6a 05 	sts	0x056A, r23
    309e:	80 93 6b 05 	sts	0x056B, r24
    30a2:	90 93 6c 05 	sts	0x056C, r25
}
    30a6:	08 95       	ret
  OCR1A = ceiling;
  return(actual_cycles);
}

void set_step_events_per_minute(uint32_t steps_per_minute) {
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	70 e7       	ldi	r23, 0x70	; 112
    30ac:	88 e3       	ldi	r24, 0x38	; 56
    30ae:	99 e3       	ldi	r25, 0x39	; 57
    30b0:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodsi4>
    30b4:	c9 01       	movw	r24, r18
    30b6:	da 01       	movw	r26, r20
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	ea cf       	rjmp	.-44     	; 0x3092 <set_step_events_per_minute+0x1c>

000030be <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    30be:	80 b3       	in	r24, 0x10	; 16
    30c0:	85 63       	ori	r24, 0x35	; 53
    30c2:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    30c4:	80 b3       	in	r24, 0x10	; 16
    30c6:	8a 6c       	ori	r24, 0xCA	; 202
    30c8:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    30ca:	81 b3       	in	r24, 0x11	; 17
    30cc:	8a 7c       	andi	r24, 0xCA	; 202
    30ce:	81 bb       	out	0x11, r24	; 17
 // see limit setup
 // LIMIT_DDR &= ~(LIMIT_MASK);
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    30d0:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    30d2:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    30d4:	e1 e8       	ldi	r30, 0x81	; 129
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	8f 7e       	andi	r24, 0xEF	; 239
    30dc:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    30de:	80 81       	ld	r24, Z
    30e0:	88 60       	ori	r24, 0x08	; 8
    30e2:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    30e4:	e0 e8       	ldi	r30, 0x80	; 128
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	8d 7f       	andi	r24, 0xFD	; 253
    30ec:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    30ee:	80 81       	ld	r24, Z
    30f0:	8e 7f       	andi	r24, 0xFE	; 254
    30f2:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    30f4:	80 81       	ld	r24, Z
    30f6:	8f 73       	andi	r24, 0x3F	; 63
    30f8:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    30fa:	80 81       	ld	r24, Z
    30fc:	8f 7c       	andi	r24, 0xCF	; 207
    30fe:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    3100:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    3104:	82 e0       	ldi	r24, 0x02	; 2
    3106:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    310a:	e0 e7       	ldi	r30, 0x70	; 112
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	81 60       	ori	r24, 0x01	; 1
    3112:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    3114:	60 e7       	ldi	r22, 0x70	; 112
    3116:	77 e1       	ldi	r23, 0x17	; 23
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	0e 94 3b 18 	call	0x3076	; 0x3076 <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    3120:	ef e6       	ldi	r30, 0x6F	; 111
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	8d 7f       	andi	r24, 0xFD	; 253
    3128:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    312a:	10 92 6d 05 	sts	0x056D, r1
    312e:	10 92 6e 05 	sts	0x056E, r1
    3132:	10 92 6f 05 	sts	0x056F, r1
    3136:	10 92 70 05 	sts	0x0570, r1
  
  sei();
    313a:	78 94       	sei
}
    313c:	08 95       	ret

0000313e <moveLeft>:

#define PULSE_LENGTH			(  10 )
#define PULSE_OFF_LENGTH 		( 280 )

unsigned char moveLeft( unsigned int distance ) 
{
    313e:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    3140:	81 b3       	in	r24, 0x11	; 17
    3142:	85 73       	andi	r24, 0x35	; 53
    3144:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3146:	21 15       	cp	r18, r1
    3148:	31 05       	cpc	r19, r1
    314a:	e1 f0       	breq	.+56     	; 0x3184 <moveLeft+0x46>

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    314c:	4b 99       	sbic	0x09, 3	; 9
    314e:	1c c0       	rjmp	.+56     	; 0x3188 <moveLeft+0x4a>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3150:	21 50       	subi	r18, 0x01	; 1
    3152:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3154:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3156:	40 e6       	ldi	r20, 0x60	; 96
    3158:	54 e0       	ldi	r21, 0x04	; 4
    315a:	04 c0       	rjmp	.+8      	; 0x3164 <moveLeft+0x26>

	//  hit left limit ?
  	if( bit_is_set( LIMIT_PIN, X1_LIMIT_BIT ) ) 
    315c:	21 50       	subi	r18, 0x01	; 1
    315e:	30 40       	sbci	r19, 0x00	; 0
    3160:	4b 99       	sbic	0x09, 3	; 9
    3162:	12 c0       	rjmp	.+36     	; 0x3188 <moveLeft+0x4a>
		return 0;

     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    3164:	81 b3       	in	r24, 0x11	; 17
    3166:	8a 7c       	andi	r24, 0xCA	; 202
    3168:	81 60       	ori	r24, 0x01	; 1
    316a:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    316c:	89 2f       	mov	r24, r25
    316e:	8a 95       	dec	r24
    3170:	f1 f7       	brne	.-4      	; 0x316e <moveLeft+0x30>
	 _delay_us( PULSE_LENGTH ) ;
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3172:	81 b3       	in	r24, 0x11	; 17
    3174:	8a 7c       	andi	r24, 0xCA	; 202
    3176:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3178:	fa 01       	movw	r30, r20
    317a:	31 97       	sbiw	r30, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <moveLeft+0x3c>
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    317e:	21 15       	cp	r18, r1
    3180:	31 05       	cpc	r19, r1
    3182:	61 f7       	brne	.-40     	; 0x315c <moveLeft+0x1e>
    3184:	81 e0       	ldi	r24, 0x01	; 1
     STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }

	return TRUE;
}
    3186:	08 95       	ret
unsigned char moveLeft( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	08 95       	ret

0000318c <moveRight>:

	return TRUE;
}

unsigned char moveRight( unsigned int distance ) 
{
    318c:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
    318e:	81 b3       	in	r24, 0x11	; 17
    3190:	85 73       	andi	r24, 0x35	; 53
    3192:	82 60       	ori	r24, 0x02	; 2
    3194:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3196:	21 15       	cp	r18, r1
    3198:	31 05       	cpc	r19, r1
    319a:	e1 f0       	breq	.+56     	; 0x31d4 <moveRight+0x48>

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    319c:	4a 99       	sbic	0x09, 2	; 9
    319e:	1c c0       	rjmp	.+56     	; 0x31d8 <moveRight+0x4c>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31a0:	21 50       	subi	r18, 0x01	; 1
    31a2:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31a4:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31a6:	40 e6       	ldi	r20, 0x60	; 96
    31a8:	54 e0       	ldi	r21, 0x04	; 4
    31aa:	04 c0       	rjmp	.+8      	; 0x31b4 <moveRight+0x28>

  	if( bit_is_set( LIMIT_PIN, X2_LIMIT_BIT ) ) return 0;
    31ac:	21 50       	subi	r18, 0x01	; 1
    31ae:	30 40       	sbci	r19, 0x00	; 0
    31b0:	4a 99       	sbic	0x09, 2	; 9
    31b2:	12 c0       	rjmp	.+36     	; 0x31d8 <moveRight+0x4c>
  	
	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<X_STEP_BIT);	
    31b4:	81 b3       	in	r24, 0x11	; 17
    31b6:	8a 7c       	andi	r24, 0xCA	; 202
    31b8:	81 60       	ori	r24, 0x01	; 1
    31ba:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31bc:	89 2f       	mov	r24, r25
    31be:	8a 95       	dec	r24
    31c0:	f1 f7       	brne	.-4      	; 0x31be <moveRight+0x32>
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
    31c2:	81 b3       	in	r24, 0x11	; 17
    31c4:	8a 7c       	andi	r24, 0xCA	; 202
    31c6:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31c8:	fa 01       	movw	r30, r20
    31ca:	31 97       	sbiw	r30, 0x01	; 1
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <moveRight+0x3e>
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31ce:	21 15       	cp	r18, r1
    31d0:	31 05       	cpc	r19, r1
    31d2:	61 f7       	brne	.-40     	; 0x31ac <moveRight+0x20>
    31d4:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
  	STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    31d6:	08 95       	ret
unsigned char moveRight( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<X_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	08 95       	ret

000031dc <moveForward>:
  }
	return TRUE;
}

unsigned char moveForward( unsigned int distance ) 
{
    31dc:	9c 01       	movw	r18, r24


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
    31de:	81 b3       	in	r24, 0x11	; 17
    31e0:	85 73       	andi	r24, 0x35	; 53
    31e2:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    31e4:	21 15       	cp	r18, r1
    31e6:	31 05       	cpc	r19, r1
    31e8:	e1 f0       	breq	.+56     	; 0x3222 <moveForward+0x46>

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    31ea:	48 99       	sbic	0x09, 0	; 9
    31ec:	1c c0       	rjmp	.+56     	; 0x3226 <moveForward+0x4a>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    31ee:	21 50       	subi	r18, 0x01	; 1
    31f0:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31f2:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31f4:	40 e6       	ldi	r20, 0x60	; 96
    31f6:	54 e0       	ldi	r21, 0x04	; 4
    31f8:	04 c0       	rjmp	.+8      	; 0x3202 <moveForward+0x26>

	//  hit limit ?
  	if( bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT ) ) 
    31fa:	21 50       	subi	r18, 0x01	; 1
    31fc:	30 40       	sbci	r19, 0x00	; 0
    31fe:	48 99       	sbic	0x09, 0	; 9
    3200:	12 c0       	rjmp	.+36     	; 0x3226 <moveForward+0x4a>
		return 0;


    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3202:	81 b3       	in	r24, 0x11	; 17
    3204:	8a 7c       	andi	r24, 0xCA	; 202
    3206:	84 60       	ori	r24, 0x04	; 4
    3208:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    320a:	89 2f       	mov	r24, r25
    320c:	8a 95       	dec	r24
    320e:	f1 f7       	brne	.-4      	; 0x320c <moveForward+0x30>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3210:	81 b3       	in	r24, 0x11	; 17
    3212:	8a 7c       	andi	r24, 0xCA	; 202
    3214:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3216:	fa 01       	movw	r30, r20
    3218:	31 97       	sbiw	r30, 0x01	; 1
    321a:	f1 f7       	brne	.-4      	; 0x3218 <moveForward+0x3c>


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    321c:	21 15       	cp	r18, r1
    321e:	31 05       	cpc	r19, r1
    3220:	61 f7       	brne	.-40     	; 0x31fa <moveForward+0x1e>
    3222:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
	return TRUE;
}
    3224:	08 95       	ret


  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (0 & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	08 95       	ret

0000322a <moveBack>:
  }
	return TRUE;
}

unsigned char moveBack( unsigned int distance ) 
{
    322a:	9c 01       	movw	r18, r24
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
    322c:	81 b3       	in	r24, 0x11	; 17
    322e:	85 73       	andi	r24, 0x35	; 53
    3230:	88 60       	ori	r24, 0x08	; 8
    3232:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  while(distance--) {
    3234:	21 15       	cp	r18, r1
    3236:	31 05       	cpc	r19, r1
    3238:	e1 f0       	breq	.+56     	; 0x3272 <moveBack+0x48>

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    323a:	49 99       	sbic	0x09, 1	; 9
    323c:	1c c0       	rjmp	.+56     	; 0x3276 <moveBack+0x4c>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    323e:	21 50       	subi	r18, 0x01	; 1
    3240:	30 40       	sbci	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3242:	95 e3       	ldi	r25, 0x35	; 53
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3244:	40 e6       	ldi	r20, 0x60	; 96
    3246:	54 e0       	ldi	r21, 0x04	; 4
    3248:	04 c0       	rjmp	.+8      	; 0x3252 <moveBack+0x28>

  	if( bit_is_set( LIMIT_PIN, Y2_LIMIT_BIT ) ) 
    324a:	21 50       	subi	r18, 0x01	; 1
    324c:	30 40       	sbci	r19, 0x00	; 0
    324e:	49 99       	sbic	0x09, 1	; 9
    3250:	12 c0       	rjmp	.+36     	; 0x3276 <moveBack+0x4c>
		return 0;

    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (1<<Y_STEP_BIT);	
    3252:	81 b3       	in	r24, 0x11	; 17
    3254:	8a 7c       	andi	r24, 0xCA	; 202
    3256:	84 60       	ori	r24, 0x04	; 4
    3258:	81 bb       	out	0x11, r24	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    325a:	89 2f       	mov	r24, r25
    325c:	8a 95       	dec	r24
    325e:	f1 f7       	brne	.-4      	; 0x325c <moveBack+0x32>
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
    3260:	81 b3       	in	r24, 0x11	; 17
    3262:	8a 7c       	andi	r24, 0xCA	; 202
    3264:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3266:	fa 01       	movw	r30, r20
    3268:	31 97       	sbiw	r30, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <moveBack+0x3e>
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    326c:	21 15       	cp	r18, r1
    326e:	31 05       	cpc	r19, r1
    3270:	61 f7       	brne	.-40     	; 0x324a <moveBack+0x20>
    3272:	81 e0       	ldi	r24, 0x01	; 1
	 _delay_us( PULSE_LENGTH ) ;
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK);	
	 _delay_us( PULSE_OFF_LENGTH ) ;
  }
  return TRUE;
}
    3274:	08 95       	ret
unsigned char moveBack( unsigned int distance ) 
{
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | ((1<<Y_DIRECTION_BIT) & DIRECTION_MASK);
  // Then pulse the stepping pins
  while(distance--) {
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	08 95       	ret

0000327a <head_moving>:

}

unsigned char head_moving( void ) 
{
	return IS_STEPPER_DRIVER_INTERRUPT_ENABLED()?1:0;
    327a:	80 91 6f 00 	lds	r24, 0x006F
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	96 95       	lsr	r25
    3282:	87 95       	ror	r24
}
    3284:	81 70       	andi	r24, 0x01	; 1
    3286:	08 95       	ret

00003288 <limits_init>:

void limits_init(void)
{

	//pickobear specific
	DDRA = 0x0;
    3288:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x2;
    328a:	82 e0       	ldi	r24, 0x02	; 2
    328c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0;
    328e:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x0;
    3290:	1a b8       	out	0x0a, r1	; 10
	DDRE = 0x0;
    3292:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x8F;
    3294:	9f e8       	ldi	r25, 0x8F	; 143
    3296:	90 bb       	out	0x10, r25	; 16
	DDRG = 0x0;
    3298:	13 ba       	out	0x13, r1	; 19
	DDRH = 0x0;
    329a:	10 92 01 01 	sts	0x0101, r1
	DDRJ = 0x0;
    329e:	10 92 04 01 	sts	0x0104, r1
	DDRK = 0xCF;
    32a2:	3f ec       	ldi	r19, 0xCF	; 207
    32a4:	30 93 07 01 	sts	0x0107, r19
	DDRL = 0xF0;
    32a8:	20 ef       	ldi	r18, 0xF0	; 240
    32aa:	20 93 0a 01 	sts	0x010A, r18

	PORTA = 0x9C;
    32ae:	8c e9       	ldi	r24, 0x9C	; 156
    32b0:	82 b9       	out	0x02, r24	; 2
	PORTB = 0x22;
    32b2:	82 e2       	ldi	r24, 0x22	; 34
    32b4:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x13;
    32b6:	83 e1       	ldi	r24, 0x13	; 19
    32b8:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x8F;
    32ba:	9b b9       	out	0x0b, r25	; 11
	PORTE = 0x30;
    32bc:	80 e3       	ldi	r24, 0x30	; 48
    32be:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0x8F;
    32c0:	91 bb       	out	0x11, r25	; 17
	PORTG = 0x23;
    32c2:	83 e2       	ldi	r24, 0x23	; 35
    32c4:	84 bb       	out	0x14, r24	; 20
	PORTH = 0x3;
    32c6:	83 e0       	ldi	r24, 0x03	; 3
    32c8:	80 93 02 01 	sts	0x0102, r24
	PORTJ = 0x3;
    32cc:	80 93 05 01 	sts	0x0105, r24
	PORTK = 0xCF;
    32d0:	30 93 08 01 	sts	0x0108, r19
	PORTL = 0xF0;
    32d4:	20 93 0b 01 	sts	0x010B, r18
}
    32d8:	08 95       	ret

000032da <st_go_home>:

	unsigned int counter = 0;


	// not homed
	gHomed = FALSE;
    32da:	10 92 4f 05 	sts	0x054F, r1

// reset position machine thinks we are at.
	plan_init();
    32de:	0e 94 cf 0c 	call	0x199e	; 0x199e <plan_init>
	gc_init();
    32e2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <gc_init>



	// if head down, set head up
	if( is_head_down() ) {
    32e6:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    32ea:	88 23       	and	r24, r24
    32ec:	49 f0       	breq	.+18     	; 0x3300 <st_go_home+0x26>
		head_down(0);
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
		
		//check again
		if(is_head_down() ){
    32f6:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    32fa:	88 23       	and	r24, r24
    32fc:	09 f0       	breq	.+2      	; 0x3300 <st_go_home+0x26>
    32fe:	62 c0       	rjmp	.+196    	; 0x33c4 <st_go_home+0xea>
			printPgmString(PSTR("home failed\r\n"));
			return;
		}

	}
	cli();
    3300:	f8 94       	cli
	// tool changer off
	atc_fire(0);	
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <atc_fire>

static unsigned char xLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
    330a:	4b 99       	sbic	0x09, 3	; 9
    330c:	2c c0       	rjmp	.+88     	; 0x3366 <st_go_home+0x8c>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    330e:	48 99       	sbic	0x09, 0	; 9
    3310:	42 c0       	rjmp	.+132    	; 0x3396 <st_go_home+0xbc>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		// are we homed ?	
		if( bit_is_set( XHM_PIN, X_HOME ) ) {
    3312:	04 99       	sbic	0x00, 4	; 0
    3314:	15 c0       	rjmp	.+42     	; 0x3340 <st_go_home+0x66>
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	0e 94 9f 18 	call	0x313e	; 0x313e <moveLeft>
    331e:	88 23       	and	r24, r24
    3320:	c1 f7       	brne	.-16     	; 0x3312 <st_go_home+0x38>
	printPgmString(PSTR("\r\n"));
#endif

error:;

	sei();
    3322:	78 94       	sei


  if( ( LIMIT_PIN & 0xf) == 0x0 )  {
    3324:	89 b1       	in	r24, 0x09	; 9
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	8f 70       	andi	r24, 0x0F	; 15
    332a:	90 70       	andi	r25, 0x00	; 0
    332c:	89 2b       	or	r24, r25
    332e:	39 f4       	brne	.+14     	; 0x333e <st_go_home+0x64>
		gHomed = TRUE ;
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	80 93 4f 05 	sts	0x054F, r24
}

// need a way to tell the stepers not to move ( cli / sei ? )
void set_busy(unsigned char state ) 
{
	busy = state;
    3336:	10 92 68 05 	sts	0x0568, r1
    333a:	10 92 67 05 	sts	0x0567, r1
    333e:	08 95       	ret
			
		}

		// no, crawl to home
		if ( xDir == LEFT) {
			if( moveLeft(1) == 0 ) 
    3340:	20 ed       	ldi	r18, 0xD0	; 208
    3342:	37 e0       	ldi	r19, 0x07	; 7
    3344:	40 e9       	ldi	r20, 0x90	; 144
    3346:	51 e0       	ldi	r21, 0x01	; 1
    3348:	ca 01       	movw	r24, r20
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	f1 f7       	brne	.-4      	; 0x334a <st_go_home+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334e:	21 50       	subi	r18, 0x01	; 1
    3350:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3352:	d1 f7       	brne	.-12     	; 0x3348 <st_go_home+0x6e>
		int counter = 0;

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("."));
#endif
		if( bit_is_set( YHM_PIN, Y_HOME ) ) {
    3354:	90 99       	sbic	0x12, 0	; 18
    3356:	e5 cf       	rjmp	.-54     	; 0x3322 <st_go_home+0x48>
			yDir = STOP;
			
		}

		if ( yDir == FORWARD ) {
			if( moveForward(1) ==  0 ) {
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 ee 18 	call	0x31dc	; 0x31dc <moveForward>
    3360:	88 23       	and	r24, r24
    3362:	c1 f7       	brne	.-16     	; 0x3354 <st_go_home+0x7a>
    3364:	de cf       	rjmp	.-68     	; 0x3322 <st_go_home+0x48>
{
	unsigned char limit = bit_is_set( LIMIT_PIN, X1_LIMIT_BIT );
	
	if( limit ) {
		// no longer homed
		gHomed = FALSE;
    3366:	10 92 4f 05 	sts	0x054F, r1
		printPgmString(PSTR("xLimit1\r\n"));
    336a:	8b ec       	ldi	r24, 0xCB	; 203
    336c:	95 e0       	ldi	r25, 0x05	; 5
    336e:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
    3372:	88 ee       	ldi	r24, 0xE8	; 232
    3374:	93 e0       	ldi	r25, 0x03	; 3
    3376:	0e 94 c6 18 	call	0x318c	; 0x318c <moveRight>
    337a:	88 23       	and	r24, r24
    337c:	41 f1       	breq	.+80     	; 0x33ce <st_go_home+0xf4>
			sei();
			return;
    337e:	20 ed       	ldi	r18, 0xD0	; 208
    3380:	37 e0       	ldi	r19, 0x07	; 7
    3382:	40 e9       	ldi	r20, 0x90	; 144
    3384:	51 e0       	ldi	r21, 0x01	; 1
    3386:	ca 01       	movw	r24, r20
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <st_go_home+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338c:	21 50       	subi	r18, 0x01	; 1
    338e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3390:	d1 f7       	brne	.-12     	; 0x3386 <st_go_home+0xac>
}
static unsigned char yLimit1( void ) 
{
	unsigned char limit = bit_is_set( LIMIT_PIN, Y1_LIMIT_BIT );
	
	if( limit ) {
    3392:	48 9b       	sbis	0x09, 0	; 9
    3394:	be cf       	rjmp	.-132    	; 0x3312 <st_go_home+0x38>
		// no longer homed
		gHomed = FALSE;
    3396:	10 92 4f 05 	sts	0x054F, r1
		printPgmString(PSTR("yLimit1\r\n"));
    339a:	85 ed       	ldi	r24, 0xD5	; 213
    339c:	95 e0       	ldi	r25, 0x05	; 5
    339e:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
    33a2:	88 ee       	ldi	r24, 0xE8	; 232
    33a4:	93 e0       	ldi	r25, 0x03	; 3
    33a6:	0e 94 15 19 	call	0x322a	; 0x322a <moveBack>
    33aa:	88 23       	and	r24, r24
    33ac:	91 f0       	breq	.+36     	; 0x33d2 <st_go_home+0xf8>
			sei();
			return;
    33ae:	20 ed       	ldi	r18, 0xD0	; 208
    33b0:	37 e0       	ldi	r19, 0x07	; 7
    33b2:	40 e9       	ldi	r20, 0x90	; 144
    33b4:	51 e0       	ldi	r21, 0x01	; 1
    33b6:	ca 01       	movw	r24, r20
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	f1 f7       	brne	.-4      	; 0x33b8 <st_go_home+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33bc:	21 50       	subi	r18, 0x01	; 1
    33be:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c0:	d1 f7       	brne	.-12     	; 0x33b6 <st_go_home+0xdc>
    33c2:	a7 cf       	rjmp	.-178    	; 0x3312 <st_go_home+0x38>
	if( is_head_down() ) {
		head_down(0);
		
		//check again
		if(is_head_down() ){
			printPgmString(PSTR("home failed\r\n"));
    33c4:	8d eb       	ldi	r24, 0xBD	; 189
    33c6:	95 e0       	ldi	r25, 0x05	; 5
    33c8:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    33cc:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("xLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveRight( 1000 ) == 0 ) {
			sei();
    33ce:	78 94       	sei
    33d0:	08 95       	ret
#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("yLimit1\r\n"));
#endif
		// move out far enough that the home and limit switches are passed
		if( moveBack( 1000 ) == 0 ) {
			sei();
    33d2:	78 94       	sei
    33d4:	08 95       	ret

000033d6 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    33d6:	07 c0       	rjmp	.+14     	; 0x33e6 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    33d8:	83 b7       	in	r24, 0x33	; 51
    33da:	81 60       	ori	r24, 0x01	; 1
    33dc:	83 bf       	out	0x33, r24	; 51
    33de:	88 95       	sleep
    33e0:	83 b7       	in	r24, 0x33	; 51
    33e2:	8e 7f       	andi	r24, 0xFE	; 254
    33e4:	83 bf       	out	0x33, r24	; 51
    33e6:	0e 94 33 0b 	call	0x1666	; 0x1666 <plan_get_current_block>
    33ea:	89 2b       	or	r24, r25
    33ec:	a9 f7       	brne	.-22     	; 0x33d8 <st_synchronize+0x2>
}
    33ee:	08 95       	ret

000033f0 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    33f0:	1f 92       	push	r1
    33f2:	0f 92       	push	r0
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	0f 92       	push	r0
    33f8:	0b b6       	in	r0, 0x3b	; 59
    33fa:	0f 92       	push	r0
    33fc:	11 24       	eor	r1, r1
    33fe:	ef 92       	push	r14
    3400:	ff 92       	push	r15
    3402:	0f 93       	push	r16
    3404:	1f 93       	push	r17
    3406:	2f 93       	push	r18
    3408:	3f 93       	push	r19
    340a:	4f 93       	push	r20
    340c:	5f 93       	push	r21
    340e:	6f 93       	push	r22
    3410:	7f 93       	push	r23
    3412:	8f 93       	push	r24
    3414:	9f 93       	push	r25
    3416:	af 93       	push	r26
    3418:	bf 93       	push	r27
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	ef 93       	push	r30
    3420:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it

	if ( gHomed == FALSE )  {
    3422:	80 91 4f 05 	lds	r24, 0x054F
    3426:	88 23       	and	r24, r24
    3428:	09 f5       	brne	.+66     	; 0x346c <__vector_17+0x7c>
		// set ack
		ackHost = 'H';
    342a:	88 e4       	ldi	r24, 0x48	; 72
    342c:	80 93 4e 05 	sts	0x054E, r24
		DISABLE_STEPPER_DRIVER_INTERRUPT();
    3430:	80 91 6f 00 	lds	r24, 0x006F
    3434:	8d 7f       	andi	r24, 0xFD	; 253
    3436:	80 93 6f 00 	sts	0x006F, r24
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
}
    343a:	ff 91       	pop	r31
    343c:	ef 91       	pop	r30
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	bf 91       	pop	r27
    3444:	af 91       	pop	r26
    3446:	9f 91       	pop	r25
    3448:	8f 91       	pop	r24
    344a:	7f 91       	pop	r23
    344c:	6f 91       	pop	r22
    344e:	5f 91       	pop	r21
    3450:	4f 91       	pop	r20
    3452:	3f 91       	pop	r19
    3454:	2f 91       	pop	r18
    3456:	1f 91       	pop	r17
    3458:	0f 91       	pop	r16
    345a:	ff 90       	pop	r15
    345c:	ef 90       	pop	r14
    345e:	0f 90       	pop	r0
    3460:	0b be       	out	0x3b, r0	; 59
    3462:	0f 90       	pop	r0
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	0f 90       	pop	r0
    3468:	1f 90       	pop	r1
    346a:	18 95       	reti
		DISABLE_STEPPER_DRIVER_INTERRUPT();
		return;
	}

// don't move if the head is down, this one is ok to let it keep running  
  if( is_head_down() ) {
    346c:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    3470:	88 23       	and	r24, r24
    3472:	19 f7       	brne	.-58     	; 0x343a <__vector_17+0x4a>
  	return;
 }

  if(busy){ 
    3474:	80 91 67 05 	lds	r24, 0x0567
    3478:	90 91 68 05 	lds	r25, 0x0568
    347c:	89 2b       	or	r24, r25
    347e:	e9 f6       	brne	.-70     	; 0x343a <__vector_17+0x4a>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
    3480:	89 b1       	in	r24, 0x09	; 9
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	8f 70       	andi	r24, 0x0F	; 15
    3486:	90 70       	andi	r25, 0x00	; 0
    3488:	89 2b       	or	r24, r25
    348a:	09 f0       	breq	.+2      	; 0x348e <__vector_17+0x9e>
    348c:	8b c1       	rjmp	.+790    	; 0x37a4 <__vector_17+0x3b4>
	DISABLE_STEPPER_DRIVER_INTERRUPT();
	return;
  }

  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    348e:	91 b3       	in	r25, 0x11	; 17
    3490:	80 91 a1 06 	lds	r24, 0x06A1
    3494:	8a 7c       	andi	r24, 0xCA	; 202
    3496:	95 73       	andi	r25, 0x35	; 53
    3498:	89 2b       	or	r24, r25
    349a:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    349c:	81 b3       	in	r24, 0x11	; 17
    349e:	8a 7c       	andi	r24, 0xCA	; 202
    34a0:	90 91 52 05 	lds	r25, 0x0552
    34a4:	89 2b       	or	r24, r25
    34a6:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    34a8:	80 91 8c 06 	lds	r24, 0x068C
    34ac:	88 0f       	add	r24, r24
    34ae:	84 50       	subi	r24, 0x04	; 4
    34b0:	81 95       	neg	r24
    34b2:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    34b6:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	90 93 68 05 	sts	0x0568, r25
    34c0:	80 93 67 05 	sts	0x0567, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    34c4:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    34c6:	e0 91 50 05 	lds	r30, 0x0550
    34ca:	f0 91 51 05 	lds	r31, 0x0551
    34ce:	30 97       	sbiw	r30, 0x00	; 0
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <__vector_17+0xe4>
    34d2:	d0 c1       	rjmp	.+928    	; 0x3874 <__vector_17+0x484>

    }    
  } 

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    34d4:	80 89       	ldd	r24, Z+16	; 0x10
    34d6:	80 93 a1 06 	sts	0x06A1, r24
    out_bits = 0;
    34da:	10 92 52 05 	sts	0x0552, r1
    counter_x += current_block->steps_x;
    34de:	20 91 53 05 	lds	r18, 0x0553
    34e2:	30 91 54 05 	lds	r19, 0x0554
    34e6:	40 91 55 05 	lds	r20, 0x0555
    34ea:	50 91 56 05 	lds	r21, 0x0556
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	a2 81       	ldd	r26, Z+2	; 0x02
    34f4:	b3 81       	ldd	r27, Z+3	; 0x03
    34f6:	28 0f       	add	r18, r24
    34f8:	39 1f       	adc	r19, r25
    34fa:	4a 1f       	adc	r20, r26
    34fc:	5b 1f       	adc	r21, r27
    34fe:	20 93 53 05 	sts	0x0553, r18
    3502:	30 93 54 05 	sts	0x0554, r19
    3506:	40 93 55 05 	sts	0x0555, r20
    350a:	50 93 56 05 	sts	0x0556, r21
    if (counter_x > 0) {
    350e:	12 16       	cp	r1, r18
    3510:	13 06       	cpc	r1, r19
    3512:	14 06       	cpc	r1, r20
    3514:	15 06       	cpc	r1, r21
    3516:	0c f0       	brlt	.+2      	; 0x351a <__vector_17+0x12a>
    3518:	40 c1       	rjmp	.+640    	; 0x379a <__vector_17+0x3aa>
      out_bits |= (1<<X_STEP_BIT);
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	80 93 52 05 	sts	0x0552, r24
      counter_x -= current_block->step_event_count;
    3520:	e1 88       	ldd	r14, Z+17	; 0x11
    3522:	f2 88       	ldd	r15, Z+18	; 0x12
    3524:	03 89       	ldd	r16, Z+19	; 0x13
    3526:	14 89       	ldd	r17, Z+20	; 0x14
    3528:	2e 19       	sub	r18, r14
    352a:	3f 09       	sbc	r19, r15
    352c:	40 0b       	sbc	r20, r16
    352e:	51 0b       	sbc	r21, r17
    3530:	20 93 53 05 	sts	0x0553, r18
    3534:	30 93 54 05 	sts	0x0554, r19
    3538:	40 93 55 05 	sts	0x0555, r20
    353c:	50 93 56 05 	sts	0x0556, r21
    }
    counter_y += current_block->steps_y;
    3540:	20 91 57 05 	lds	r18, 0x0557
    3544:	30 91 58 05 	lds	r19, 0x0558
    3548:	40 91 59 05 	lds	r20, 0x0559
    354c:	50 91 5a 05 	lds	r21, 0x055A
    3550:	84 81       	ldd	r24, Z+4	; 0x04
    3552:	95 81       	ldd	r25, Z+5	; 0x05
    3554:	a6 81       	ldd	r26, Z+6	; 0x06
    3556:	b7 81       	ldd	r27, Z+7	; 0x07
    3558:	28 0f       	add	r18, r24
    355a:	39 1f       	adc	r19, r25
    355c:	4a 1f       	adc	r20, r26
    355e:	5b 1f       	adc	r21, r27
    3560:	20 93 57 05 	sts	0x0557, r18
    3564:	30 93 58 05 	sts	0x0558, r19
    3568:	40 93 59 05 	sts	0x0559, r20
    356c:	50 93 5a 05 	sts	0x055A, r21
    if (counter_y > 0) {
    3570:	12 16       	cp	r1, r18
    3572:	13 06       	cpc	r1, r19
    3574:	14 06       	cpc	r1, r20
    3576:	15 06       	cpc	r1, r21
    3578:	8c f4       	brge	.+34     	; 0x359c <__vector_17+0x1ac>
      out_bits |= (1<<Y_STEP_BIT);
    357a:	80 91 52 05 	lds	r24, 0x0552
    357e:	84 60       	ori	r24, 0x04	; 4
    3580:	80 93 52 05 	sts	0x0552, r24
      counter_y -= current_block->step_event_count;
    3584:	2e 19       	sub	r18, r14
    3586:	3f 09       	sbc	r19, r15
    3588:	40 0b       	sbc	r20, r16
    358a:	51 0b       	sbc	r21, r17
    358c:	20 93 57 05 	sts	0x0557, r18
    3590:	30 93 58 05 	sts	0x0558, r19
    3594:	40 93 59 05 	sts	0x0559, r20
    3598:	50 93 5a 05 	sts	0x055A, r21
    }
    counter_z += current_block->steps_z;
    359c:	20 91 5b 05 	lds	r18, 0x055B
    35a0:	30 91 5c 05 	lds	r19, 0x055C
    35a4:	40 91 5d 05 	lds	r20, 0x055D
    35a8:	50 91 5e 05 	lds	r21, 0x055E
    35ac:	80 85       	ldd	r24, Z+8	; 0x08
    35ae:	91 85       	ldd	r25, Z+9	; 0x09
    35b0:	a2 85       	ldd	r26, Z+10	; 0x0a
    35b2:	b3 85       	ldd	r27, Z+11	; 0x0b
    35b4:	28 0f       	add	r18, r24
    35b6:	39 1f       	adc	r19, r25
    35b8:	4a 1f       	adc	r20, r26
    35ba:	5b 1f       	adc	r21, r27
    35bc:	20 93 5b 05 	sts	0x055B, r18
    35c0:	30 93 5c 05 	sts	0x055C, r19
    35c4:	40 93 5d 05 	sts	0x055D, r20
    35c8:	50 93 5e 05 	sts	0x055E, r21
    if (counter_z > 0) {
    35cc:	12 16       	cp	r1, r18
    35ce:	13 06       	cpc	r1, r19
    35d0:	14 06       	cpc	r1, r20
    35d2:	15 06       	cpc	r1, r21
    35d4:	8c f4       	brge	.+34     	; 0x35f8 <__vector_17+0x208>
      out_bits |= (1<<Z_STEP_BIT);
    35d6:	80 91 52 05 	lds	r24, 0x0552
    35da:	80 61       	ori	r24, 0x10	; 16
    35dc:	80 93 52 05 	sts	0x0552, r24
      counter_z -= current_block->step_event_count;
    35e0:	2e 19       	sub	r18, r14
    35e2:	3f 09       	sbc	r19, r15
    35e4:	40 0b       	sbc	r20, r16
    35e6:	51 0b       	sbc	r21, r17
    35e8:	20 93 5b 05 	sts	0x055B, r18
    35ec:	30 93 5c 05 	sts	0x055C, r19
    35f0:	40 93 5d 05 	sts	0x055D, r20
    35f4:	50 93 5e 05 	sts	0x055E, r21
    }
    counter_c += current_block->steps_c;
    35f8:	20 91 5f 05 	lds	r18, 0x055F
    35fc:	30 91 60 05 	lds	r19, 0x0560
    3600:	40 91 61 05 	lds	r20, 0x0561
    3604:	50 91 62 05 	lds	r21, 0x0562
    3608:	84 85       	ldd	r24, Z+12	; 0x0c
    360a:	95 85       	ldd	r25, Z+13	; 0x0d
    360c:	a6 85       	ldd	r26, Z+14	; 0x0e
    360e:	b7 85       	ldd	r27, Z+15	; 0x0f
    3610:	28 0f       	add	r18, r24
    3612:	39 1f       	adc	r19, r25
    3614:	4a 1f       	adc	r20, r26
    3616:	5b 1f       	adc	r21, r27
    3618:	20 93 5f 05 	sts	0x055F, r18
    361c:	30 93 60 05 	sts	0x0560, r19
    3620:	40 93 61 05 	sts	0x0561, r20
    3624:	50 93 62 05 	sts	0x0562, r21
    if (counter_c > 0) {
    3628:	12 16       	cp	r1, r18
    362a:	13 06       	cpc	r1, r19
    362c:	14 06       	cpc	r1, r20
    362e:	15 06       	cpc	r1, r21
    3630:	8c f4       	brge	.+34     	; 0x3654 <__vector_17+0x264>
      out_bits |= (1<<C_STEP_BIT);
    3632:	80 91 52 05 	lds	r24, 0x0552
    3636:	80 62       	ori	r24, 0x20	; 32
    3638:	80 93 52 05 	sts	0x0552, r24
      counter_c -= current_block->step_event_count;
    363c:	2e 19       	sub	r18, r14
    363e:	3f 09       	sbc	r19, r15
    3640:	40 0b       	sbc	r20, r16
    3642:	51 0b       	sbc	r21, r17
    3644:	20 93 5f 05 	sts	0x055F, r18
    3648:	30 93 60 05 	sts	0x0560, r19
    364c:	40 93 61 05 	sts	0x0561, r20
    3650:	50 93 62 05 	sts	0x0562, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    3654:	80 91 63 05 	lds	r24, 0x0563
    3658:	90 91 64 05 	lds	r25, 0x0564
    365c:	a0 91 65 05 	lds	r26, 0x0565
    3660:	b0 91 66 05 	lds	r27, 0x0566
    3664:	01 96       	adiw	r24, 0x01	; 1
    3666:	a1 1d       	adc	r26, r1
    3668:	b1 1d       	adc	r27, r1
    366a:	80 93 63 05 	sts	0x0563, r24
    366e:	90 93 64 05 	sts	0x0564, r25
    3672:	a0 93 65 05 	sts	0x0565, r26
    3676:	b0 93 66 05 	sts	0x0566, r27
    if (step_events_completed >= current_block->step_event_count) {
    367a:	8e 15       	cp	r24, r14
    367c:	9f 05       	cpc	r25, r15
    367e:	a0 07       	cpc	r26, r16
    3680:	b1 07       	cpc	r27, r17
    3682:	08 f0       	brcs	.+2      	; 0x3686 <__vector_17+0x296>
    3684:	9a c0       	rjmp	.+308    	; 0x37ba <__vector_17+0x3ca>
    }
  } else {
    out_bits = 0;
  }          
  out_bits ^= STEP_INVERT_MASK;
  dir_bits ^= DIRECTION_INVERT_MASK;
    3686:	80 91 a1 06 	lds	r24, 0x06A1
    368a:	9a e0       	ldi	r25, 0x0A	; 10
    368c:	89 27       	eor	r24, r25
    368e:	80 93 a1 06 	sts	0x06A1, r24
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    3692:	20 91 69 05 	lds	r18, 0x0569
    3696:	30 91 6a 05 	lds	r19, 0x056A
    369a:	40 91 6b 05 	lds	r20, 0x056B
    369e:	50 91 6c 05 	lds	r21, 0x056C
    36a2:	80 91 6d 05 	lds	r24, 0x056D
    36a6:	90 91 6e 05 	lds	r25, 0x056E
    36aa:	a0 91 6f 05 	lds	r26, 0x056F
    36ae:	b0 91 70 05 	lds	r27, 0x0570
    36b2:	28 0f       	add	r18, r24
    36b4:	39 1f       	adc	r19, r25
    36b6:	4a 1f       	adc	r20, r26
    36b8:	5b 1f       	adc	r21, r27
    36ba:	20 93 6d 05 	sts	0x056D, r18
    36be:	30 93 6e 05 	sts	0x056E, r19
    36c2:	40 93 6f 05 	sts	0x056F, r20
    36c6:	50 93 70 05 	sts	0x0570, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    36ca:	21 38       	cpi	r18, 0x81	; 129
    36cc:	0a e1       	ldi	r16, 0x1A	; 26
    36ce:	30 07       	cpc	r19, r16
    36d0:	06 e0       	ldi	r16, 0x06	; 6
    36d2:	40 07       	cpc	r20, r16
    36d4:	00 e0       	ldi	r16, 0x00	; 0
    36d6:	50 07       	cpc	r21, r16
    36d8:	08 f4       	brcc	.+2      	; 0x36dc <__vector_17+0x2ec>
    36da:	5a c0       	rjmp	.+180    	; 0x3790 <__vector_17+0x3a0>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    36dc:	20 58       	subi	r18, 0x80	; 128
    36de:	3a 41       	sbci	r19, 0x1A	; 26
    36e0:	46 40       	sbci	r20, 0x06	; 6
    36e2:	50 40       	sbci	r21, 0x00	; 0
    36e4:	20 93 6d 05 	sts	0x056D, r18
    36e8:	30 93 6e 05 	sts	0x056E, r19
    36ec:	40 93 6f 05 	sts	0x056F, r20
    36f0:	50 93 70 05 	sts	0x0570, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    36f4:	e0 91 50 05 	lds	r30, 0x0550
    36f8:	f0 91 51 05 	lds	r31, 0x0551
    36fc:	30 97       	sbiw	r30, 0x00	; 0
    36fe:	09 f4       	brne	.+2      	; 0x3702 <__vector_17+0x312>
    3700:	47 c0       	rjmp	.+142    	; 0x3790 <__vector_17+0x3a0>
    if (step_events_completed < current_block->accelerate_until) {
    3702:	20 91 63 05 	lds	r18, 0x0563
    3706:	30 91 64 05 	lds	r19, 0x0564
    370a:	40 91 65 05 	lds	r20, 0x0565
    370e:	50 91 66 05 	lds	r21, 0x0566
    3712:	ef 5b       	subi	r30, 0xBF	; 191
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	a2 81       	ldd	r26, Z+2	; 0x02
    371c:	b3 81       	ldd	r27, Z+3	; 0x03
    371e:	e1 54       	subi	r30, 0x41	; 65
    3720:	f0 40       	sbci	r31, 0x00	; 0
    3722:	28 17       	cp	r18, r24
    3724:	39 07       	cpc	r19, r25
    3726:	4a 07       	cpc	r20, r26
    3728:	5b 07       	cpc	r21, r27
    372a:	08 f0       	brcs	.+2      	; 0x372e <__vector_17+0x33e>
    372c:	4d c0       	rjmp	.+154    	; 0x37c8 <__vector_17+0x3d8>
      trapezoid_adjusted_rate += current_block->rate_delta;
    372e:	fd 96       	adiw	r30, 0x3d	; 61
    3730:	80 81       	ld	r24, Z
    3732:	91 81       	ldd	r25, Z+1	; 0x01
    3734:	a2 81       	ldd	r26, Z+2	; 0x02
    3736:	b3 81       	ldd	r27, Z+3	; 0x03
    3738:	fd 97       	sbiw	r30, 0x3d	; 61
    373a:	20 91 71 05 	lds	r18, 0x0571
    373e:	30 91 72 05 	lds	r19, 0x0572
    3742:	40 91 73 05 	lds	r20, 0x0573
    3746:	50 91 74 05 	lds	r21, 0x0574
    374a:	28 0f       	add	r18, r24
    374c:	39 1f       	adc	r19, r25
    374e:	4a 1f       	adc	r20, r26
    3750:	5b 1f       	adc	r21, r27
    3752:	20 93 71 05 	sts	0x0571, r18
    3756:	30 93 72 05 	sts	0x0572, r19
    375a:	40 93 73 05 	sts	0x0573, r20
    375e:	50 93 74 05 	sts	0x0574, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    3762:	85 89       	ldd	r24, Z+21	; 0x15
    3764:	96 89       	ldd	r25, Z+22	; 0x16
    3766:	a7 89       	ldd	r26, Z+23	; 0x17
    3768:	b0 8d       	ldd	r27, Z+24	; 0x18
    376a:	82 17       	cp	r24, r18
    376c:	93 07       	cpc	r25, r19
    376e:	a4 07       	cpc	r26, r20
    3770:	b5 07       	cpc	r27, r21
    3772:	50 f4       	brcc	.+20     	; 0x3788 <__vector_17+0x398>
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
        trapezoid_adjusted_rate -= current_block->rate_delta;
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
        trapezoid_adjusted_rate = current_block->final_rate;
    3774:	80 93 71 05 	sts	0x0571, r24
    3778:	90 93 72 05 	sts	0x0572, r25
    377c:	a0 93 73 05 	sts	0x0573, r26
    3780:	b0 93 74 05 	sts	0x0574, r27
    3784:	9c 01       	movw	r18, r24
    3786:	ad 01       	movw	r20, r26
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
        set_step_events_per_minute(trapezoid_adjusted_rate);
    3788:	ca 01       	movw	r24, r20
    378a:	b9 01       	movw	r22, r18
    378c:	0e 94 3b 18 	call	0x3076	; 0x3076 <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    3790:	10 92 68 05 	sts	0x0568, r1
    3794:	10 92 67 05 	sts	0x0567, r1
    3798:	50 ce       	rjmp	.-864    	; 0x343a <__vector_17+0x4a>

  if (current_block != NULL) {
    dir_bits = current_block->direction_bits;
    out_bits = 0;
    counter_x += current_block->steps_x;
    if (counter_x > 0) {
    379a:	e1 88       	ldd	r14, Z+17	; 0x11
    379c:	f2 88       	ldd	r15, Z+18	; 0x12
    379e:	03 89       	ldd	r16, Z+19	; 0x13
    37a0:	14 89       	ldd	r17, Z+20	; 0x14
    37a2:	ce ce       	rjmp	.-612    	; 0x3540 <__vector_17+0x150>
  	return; 
  } // The busy-flag is used to avoid reentering this interrupt

  // Check all limit switches
  if( LIMIT_PIN & 0xf ) {
	gHomed = FALSE ;
    37a4:	10 92 4f 05 	sts	0x054F, r1
		// set ack
	  ackHost = 'L';
    37a8:	8c e4       	ldi	r24, 0x4C	; 76
    37aa:	80 93 4e 05 	sts	0x054E, r24
	DISABLE_STEPPER_DRIVER_INTERRUPT();
    37ae:	80 91 6f 00 	lds	r24, 0x006F
    37b2:	8d 7f       	andi	r24, 0xFD	; 253
    37b4:	80 93 6f 00 	sts	0x006F, r24
    37b8:	40 ce       	rjmp	.-896    	; 0x343a <__vector_17+0x4a>
      counter_c -= current_block->step_event_count;
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
    37ba:	10 92 51 05 	sts	0x0551, r1
    37be:	10 92 50 05 	sts	0x0550, r1
      plan_discard_current_block();
    37c2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <plan_discard_current_block>
    37c6:	5f cf       	rjmp	.-322    	; 0x3686 <__vector_17+0x296>
      trapezoid_adjusted_rate += current_block->rate_delta;
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
        trapezoid_adjusted_rate = current_block->nominal_rate;
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    37c8:	eb 5b       	subi	r30, 0xBB	; 187
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	91 81       	ldd	r25, Z+1	; 0x01
    37d0:	a2 81       	ldd	r26, Z+2	; 0x02
    37d2:	b3 81       	ldd	r27, Z+3	; 0x03
    37d4:	e5 54       	subi	r30, 0x45	; 69
    37d6:	f0 40       	sbci	r31, 0x00	; 0
    37d8:	82 17       	cp	r24, r18
    37da:	93 07       	cpc	r25, r19
    37dc:	a4 07       	cpc	r26, r20
    37de:	b5 07       	cpc	r27, r21
    37e0:	70 f5       	brcc	.+92     	; 0x383e <__vector_17+0x44e>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    37e2:	fd 96       	adiw	r30, 0x3d	; 61
    37e4:	60 81       	ld	r22, Z
    37e6:	71 81       	ldd	r23, Z+1	; 0x01
    37e8:	82 81       	ldd	r24, Z+2	; 0x02
    37ea:	93 81       	ldd	r25, Z+3	; 0x03
    37ec:	fd 97       	sbiw	r30, 0x3d	; 61
    37ee:	20 91 71 05 	lds	r18, 0x0571
    37f2:	30 91 72 05 	lds	r19, 0x0572
    37f6:	40 91 73 05 	lds	r20, 0x0573
    37fa:	50 91 74 05 	lds	r21, 0x0574
    37fe:	62 17       	cp	r22, r18
    3800:	73 07       	cpc	r23, r19
    3802:	84 07       	cpc	r24, r20
    3804:	95 07       	cpc	r25, r21
    3806:	80 f4       	brcc	.+32     	; 0x3828 <__vector_17+0x438>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    3808:	79 01       	movw	r14, r18
    380a:	8a 01       	movw	r16, r20
    380c:	e6 1a       	sub	r14, r22
    380e:	f7 0a       	sbc	r15, r23
    3810:	08 0b       	sbc	r16, r24
    3812:	19 0b       	sbc	r17, r25
    3814:	e0 92 71 05 	sts	0x0571, r14
    3818:	f0 92 72 05 	sts	0x0572, r15
    381c:	00 93 73 05 	sts	0x0573, r16
    3820:	10 93 74 05 	sts	0x0574, r17
    3824:	a8 01       	movw	r20, r16
    3826:	97 01       	movw	r18, r14
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    3828:	81 ad       	ldd	r24, Z+57	; 0x39
    382a:	92 ad       	ldd	r25, Z+58	; 0x3a
    382c:	a3 ad       	ldd	r26, Z+59	; 0x3b
    382e:	b4 ad       	ldd	r27, Z+60	; 0x3c
    3830:	28 17       	cp	r18, r24
    3832:	39 07       	cpc	r19, r25
    3834:	4a 07       	cpc	r20, r26
    3836:	5b 07       	cpc	r21, r27
    3838:	08 f0       	brcs	.+2      	; 0x383c <__vector_17+0x44c>
    383a:	a6 cf       	rjmp	.-180    	; 0x3788 <__vector_17+0x398>
    383c:	9b cf       	rjmp	.-202    	; 0x3774 <__vector_17+0x384>
        trapezoid_adjusted_rate = current_block->final_rate;
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    383e:	25 89       	ldd	r18, Z+21	; 0x15
    3840:	36 89       	ldd	r19, Z+22	; 0x16
    3842:	47 89       	ldd	r20, Z+23	; 0x17
    3844:	50 8d       	ldd	r21, Z+24	; 0x18
    3846:	80 91 71 05 	lds	r24, 0x0571
    384a:	90 91 72 05 	lds	r25, 0x0572
    384e:	a0 91 73 05 	lds	r26, 0x0573
    3852:	b0 91 74 05 	lds	r27, 0x0574
    3856:	28 17       	cp	r18, r24
    3858:	39 07       	cpc	r19, r25
    385a:	4a 07       	cpc	r20, r26
    385c:	5b 07       	cpc	r21, r27
    385e:	09 f4       	brne	.+2      	; 0x3862 <__vector_17+0x472>
    3860:	97 cf       	rjmp	.-210    	; 0x3790 <__vector_17+0x3a0>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    3862:	20 93 71 05 	sts	0x0571, r18
    3866:	30 93 72 05 	sts	0x0572, r19
    386a:	40 93 73 05 	sts	0x0573, r20
    386e:	50 93 74 05 	sts	0x0574, r21
    3872:	8a cf       	rjmp	.-236    	; 0x3788 <__vector_17+0x398>
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    3874:	0e 94 33 0b 	call	0x1666	; 0x1666 <plan_get_current_block>
    3878:	ec 01       	movw	r28, r24
    387a:	90 93 51 05 	sts	0x0551, r25
    387e:	80 93 50 05 	sts	0x0550, r24
    if (current_block != NULL) {
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	09 f4       	brne	.+2      	; 0x3888 <__vector_17+0x498>
    3886:	52 c0       	rjmp	.+164    	; 0x392c <__vector_17+0x53c>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    3888:	6d a9       	ldd	r22, Y+53	; 0x35
    388a:	7e a9       	ldd	r23, Y+54	; 0x36
    388c:	8f a9       	ldd	r24, Y+55	; 0x37
    388e:	98 ad       	ldd	r25, Y+56	; 0x38
    3890:	60 93 71 05 	sts	0x0571, r22
    3894:	70 93 72 05 	sts	0x0572, r23
    3898:	80 93 73 05 	sts	0x0573, r24
    389c:	90 93 74 05 	sts	0x0574, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    38a0:	10 92 6d 05 	sts	0x056D, r1
    38a4:	10 92 6e 05 	sts	0x056E, r1
    38a8:	10 92 6f 05 	sts	0x056F, r1
    38ac:	10 92 70 05 	sts	0x0570, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    38b0:	0e 94 3b 18 	call	0x3076	; 0x3076 <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    38b4:	89 89       	ldd	r24, Y+17	; 0x11
    38b6:	9a 89       	ldd	r25, Y+18	; 0x12
    38b8:	ab 89       	ldd	r26, Y+19	; 0x13
    38ba:	bc 89       	ldd	r27, Y+20	; 0x14
    38bc:	b5 95       	asr	r27
    38be:	a7 95       	ror	r26
    38c0:	97 95       	ror	r25
    38c2:	87 95       	ror	r24
    38c4:	b0 95       	com	r27
    38c6:	a0 95       	com	r26
    38c8:	90 95       	com	r25
    38ca:	81 95       	neg	r24
    38cc:	9f 4f       	sbci	r25, 0xFF	; 255
    38ce:	af 4f       	sbci	r26, 0xFF	; 255
    38d0:	bf 4f       	sbci	r27, 0xFF	; 255
    38d2:	80 93 53 05 	sts	0x0553, r24
    38d6:	90 93 54 05 	sts	0x0554, r25
    38da:	a0 93 55 05 	sts	0x0555, r26
    38de:	b0 93 56 05 	sts	0x0556, r27
      counter_y = counter_x;
    38e2:	80 93 57 05 	sts	0x0557, r24
    38e6:	90 93 58 05 	sts	0x0558, r25
    38ea:	a0 93 59 05 	sts	0x0559, r26
    38ee:	b0 93 5a 05 	sts	0x055A, r27
      counter_z = counter_x;
    38f2:	80 93 5b 05 	sts	0x055B, r24
    38f6:	90 93 5c 05 	sts	0x055C, r25
    38fa:	a0 93 5d 05 	sts	0x055D, r26
    38fe:	b0 93 5e 05 	sts	0x055E, r27
      counter_c = counter_x;
    3902:	80 93 5f 05 	sts	0x055F, r24
    3906:	90 93 60 05 	sts	0x0560, r25
    390a:	a0 93 61 05 	sts	0x0561, r26
    390e:	b0 93 62 05 	sts	0x0562, r27
      step_events_completed = 0;
    3912:	10 92 63 05 	sts	0x0563, r1
    3916:	10 92 64 05 	sts	0x0564, r1
    391a:	10 92 65 05 	sts	0x0565, r1
    391e:	10 92 66 05 	sts	0x0566, r1
    3922:	e0 91 50 05 	lds	r30, 0x0550
    3926:	f0 91 51 05 	lds	r31, 0x0551
    392a:	d4 cd       	rjmp	.-1112   	; 0x34d4 <__vector_17+0xe4>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    392c:	80 91 6f 00 	lds	r24, 0x006F
    3930:	8d 7f       	andi	r24, 0xFD	; 253
    3932:	80 93 6f 00 	sts	0x006F, r24

		// set ack
	  ackHost = 'X';
    3936:	88 e5       	ldi	r24, 0x58	; 88
    3938:	80 93 4e 05 	sts	0x054E, r24
    if (step_events_completed >= current_block->step_event_count) {
      current_block = NULL;
      plan_discard_current_block();
    }
  } else {
    out_bits = 0;
    393c:	10 92 52 05 	sts	0x0552, r1
    3940:	a2 ce       	rjmp	.-700    	; 0x3686 <__vector_17+0x296>

00003942 <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    3942:	ef 92       	push	r14
    3944:	ff 92       	push	r15
    3946:	0f 93       	push	r16
    3948:	1f 93       	push	r17
    394a:	7b 01       	movw	r14, r22
    394c:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    394e:	22 e0       	ldi	r18, 0x02	; 2
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	40 e0       	ldi	r20, 0x00	; 0
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__divmodsi4>
    395a:	20 5c       	subi	r18, 0xC0	; 192
    395c:	3d 4b       	sbci	r19, 0xBD	; 189
    395e:	40 4f       	sbci	r20, 0xF0	; 240
    3960:	5f 4f       	sbci	r21, 0xFF	; 255
    3962:	ca 01       	movw	r24, r20
    3964:	b9 01       	movw	r22, r18
    3966:	a8 01       	movw	r20, r16
    3968:	97 01       	movw	r18, r14
    396a:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodsi4>
    396e:	c9 01       	movw	r24, r18
    3970:	da 01       	movw	r26, r20
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	a1 09       	sbc	r26, r1
    3976:	b1 09       	sbc	r27, r1
    3978:	29 2f       	mov	r18, r25
    397a:	3a 2f       	mov	r19, r26
    397c:	4b 2f       	mov	r20, r27
    397e:	55 27       	eor	r21, r21
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	a1 1d       	adc	r26, r1
    3984:	b1 1d       	adc	r27, r1
    3986:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    398a:	81 50       	subi	r24, 0x01	; 1
    398c:	80 93 c4 00 	sts	0x00C4, r24
	
  /* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    3990:	e0 ec       	ldi	r30, 0xC0	; 192
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	8d 7f       	andi	r24, 0xFD	; 253
    3998:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    399a:	e1 ec       	ldi	r30, 0xC1	; 193
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	80 61       	ori	r24, 0x10	; 16
    39a2:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    39a4:	80 81       	ld	r24, Z
    39a6:	88 60       	ori	r24, 0x08	; 8
    39a8:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    39aa:	80 81       	ld	r24, Z
    39ac:	80 68       	ori	r24, 0x80	; 128
    39ae:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	08 95       	ret

000039ba <serialWrite>:

void serialWrite(unsigned char c)
{
    39ba:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    39bc:	80 91 c0 00 	lds	r24, 0x00C0
    39c0:	85 ff       	sbrs	r24, 5
    39c2:	fc cf       	rjmp	.-8      	; 0x39bc <serialWrite+0x2>
		;
	UDR0 = c;
    39c4:	90 93 c6 00 	sts	0x00C6, r25
}
    39c8:	08 95       	ret

000039ca <serialAvailable>:

int serialAvailable()
{
    39ca:	80 91 75 05 	lds	r24, 0x0575
    39ce:	90 91 76 05 	lds	r25, 0x0576
    39d2:	80 50       	subi	r24, 0x00	; 0
    39d4:	9f 4f       	sbci	r25, 0xFF	; 255
    39d6:	20 91 77 05 	lds	r18, 0x0577
    39da:	30 91 78 05 	lds	r19, 0x0578
    39de:	82 1b       	sub	r24, r18
    39e0:	93 0b       	sbc	r25, r19
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	71 e0       	ldi	r23, 0x01	; 1
    39e6:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    39ea:	08 95       	ret

000039ec <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    39ec:	40 91 77 05 	lds	r20, 0x0577
    39f0:	50 91 78 05 	lds	r21, 0x0578
    39f4:	80 91 75 05 	lds	r24, 0x0575
    39f8:	90 91 76 05 	lds	r25, 0x0576
    39fc:	84 17       	cp	r24, r20
    39fe:	95 07       	cpc	r25, r21
    3a00:	89 f0       	breq	.+34     	; 0x3a24 <serialRead+0x38>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    3a02:	fa 01       	movw	r30, r20
    3a04:	e7 58       	subi	r30, 0x87	; 135
    3a06:	fa 4f       	sbci	r31, 0xFA	; 250
    3a08:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    3a0a:	ca 01       	movw	r24, r20
    3a0c:	01 96       	adiw	r24, 0x01	; 1
    3a0e:	60 e0       	ldi	r22, 0x00	; 0
    3a10:	71 e0       	ldi	r23, 0x01	; 1
    3a12:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__divmodhi4>
    3a16:	90 93 78 05 	sts	0x0578, r25
    3a1a:	80 93 77 05 	sts	0x0577, r24
		return c;
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    3a20:	c9 01       	movw	r24, r18
    3a22:	08 95       	ret
}

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    3a24:	2f ef       	ldi	r18, 0xFF	; 255
    3a26:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
		return c;
	}
}
    3a28:	c9 01       	movw	r24, r18
    3a2a:	08 95       	ret

00003a2c <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    3a2c:	80 91 77 05 	lds	r24, 0x0577
    3a30:	90 91 78 05 	lds	r25, 0x0578
    3a34:	90 93 76 05 	sts	0x0576, r25
    3a38:	80 93 75 05 	sts	0x0575, r24
}
    3a3c:	08 95       	ret

00003a3e <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    3a3e:	1f 92       	push	r1
    3a40:	0f 92       	push	r0
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	0f 92       	push	r0
    3a46:	0b b6       	in	r0, 0x3b	; 59
    3a48:	0f 92       	push	r0
    3a4a:	11 24       	eor	r1, r1
    3a4c:	2f 93       	push	r18
    3a4e:	3f 93       	push	r19
    3a50:	4f 93       	push	r20
    3a52:	5f 93       	push	r21
    3a54:	6f 93       	push	r22
    3a56:	7f 93       	push	r23
    3a58:	8f 93       	push	r24
    3a5a:	9f 93       	push	r25
    3a5c:	af 93       	push	r26
    3a5e:	bf 93       	push	r27
    3a60:	ef 93       	push	r30
    3a62:	ff 93       	push	r31
	unsigned char c = UDR0;
    3a64:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    3a68:	e0 91 75 05 	lds	r30, 0x0575
    3a6c:	f0 91 76 05 	lds	r31, 0x0576
    3a70:	cf 01       	movw	r24, r30
    3a72:	01 96       	adiw	r24, 0x01	; 1
    3a74:	60 e0       	ldi	r22, 0x00	; 0
    3a76:	71 e0       	ldi	r23, 0x01	; 1
    3a78:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <__divmodhi4>
    3a7c:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    3a7e:	80 91 77 05 	lds	r24, 0x0577
    3a82:	90 91 78 05 	lds	r25, 0x0578
    3a86:	28 17       	cp	r18, r24
    3a88:	39 07       	cpc	r19, r25
    3a8a:	39 f0       	breq	.+14     	; 0x3a9a <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    3a8c:	e7 58       	subi	r30, 0x87	; 135
    3a8e:	fa 4f       	sbci	r31, 0xFA	; 250
    3a90:	40 83       	st	Z, r20
		rx_buffer_head = i;
    3a92:	30 93 76 05 	sts	0x0576, r19
    3a96:	20 93 75 05 	sts	0x0575, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    3a9a:	ff 91       	pop	r31
    3a9c:	ef 91       	pop	r30
    3a9e:	bf 91       	pop	r27
    3aa0:	af 91       	pop	r26
    3aa2:	9f 91       	pop	r25
    3aa4:	8f 91       	pop	r24
    3aa6:	7f 91       	pop	r23
    3aa8:	6f 91       	pop	r22
    3aaa:	5f 91       	pop	r21
    3aac:	4f 91       	pop	r20
    3aae:	3f 91       	pop	r19
    3ab0:	2f 91       	pop	r18
    3ab2:	0f 90       	pop	r0
    3ab4:	0b be       	out	0x3b, r0	; 59
    3ab6:	0f 90       	pop	r0
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	0f 90       	pop	r0
    3abc:	1f 90       	pop	r1
    3abe:	18 95       	reti

00003ac0 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    3ac0:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3ac2:	80 91 c0 00 	lds	r24, 0x00C0
    3ac6:	85 ff       	sbrs	r24, 5
    3ac8:	fc cf       	rjmp	.-8      	; 0x3ac2 <printByte+0x2>
		;
	UDR0 = c;
    3aca:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    3ace:	08 95       	ret

00003ad0 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    3ad0:	fc 01       	movw	r30, r24
	while (*s)
    3ad2:	90 81       	ld	r25, Z
    3ad4:	99 23       	and	r25, r25
    3ad6:	51 f0       	breq	.+20     	; 0x3aec <printString+0x1c>
		printByte(*s++);
    3ad8:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3ada:	80 91 c0 00 	lds	r24, 0x00C0
    3ade:	85 ff       	sbrs	r24, 5
    3ae0:	fc cf       	rjmp	.-8      	; 0x3ada <printString+0xa>
		;
	UDR0 = c;
    3ae2:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    3ae6:	90 81       	ld	r25, Z
    3ae8:	99 23       	and	r25, r25
    3aea:	b1 f7       	brne	.-20     	; 0x3ad8 <printString+0x8>
    3aec:	08 95       	ret

00003aee <printPgmString>:
		printByte(*s++);
}

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    3aee:	fc 01       	movw	r30, r24
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3af0:	94 91       	lpm	r25, Z+
    3af2:	99 23       	and	r25, r25
    3af4:	51 f0       	breq	.+20     	; 0x3b0a <printPgmString+0x1c>
    3af6:	31 96       	adiw	r30, 0x01	; 1
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3af8:	80 91 c0 00 	lds	r24, 0x00C0
    3afc:	85 ff       	sbrs	r24, 5
    3afe:	fc cf       	rjmp	.-8      	; 0x3af8 <printPgmString+0xa>
		;
	UDR0 = c;
    3b00:	90 93 c6 00 	sts	0x00C6, r25

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    3b04:	94 91       	lpm	r25, Z+
    3b06:	99 23       	and	r25, r25
    3b08:	b1 f7       	brne	.-20     	; 0x3af6 <printPgmString+0x8>
    3b0a:	08 95       	ret

00003b0c <printIntegerInBase>:
		printByte(c);
}

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    3b0c:	2f 92       	push	r2
    3b0e:	3f 92       	push	r3
    3b10:	4f 92       	push	r4
    3b12:	5f 92       	push	r5
    3b14:	6f 92       	push	r6
    3b16:	7f 92       	push	r7
    3b18:	8f 92       	push	r8
    3b1a:	9f 92       	push	r9
    3b1c:	af 92       	push	r10
    3b1e:	bf 92       	push	r11
    3b20:	cf 92       	push	r12
    3b22:	df 92       	push	r13
    3b24:	ef 92       	push	r14
    3b26:	ff 92       	push	r15
    3b28:	0f 93       	push	r16
    3b2a:	1f 93       	push	r17
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	a0 97       	sbiw	r28, 0x20	; 32
    3b36:	0f b6       	in	r0, 0x3f	; 63
    3b38:	f8 94       	cli
    3b3a:	de bf       	out	0x3e, r29	; 62
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	cd bf       	out	0x3d, r28	; 61
    3b40:	6b 01       	movw	r12, r22
    3b42:	7c 01       	movw	r14, r24
    3b44:	29 01       	movw	r4, r18
    3b46:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    3b48:	61 15       	cp	r22, r1
    3b4a:	71 05       	cpc	r23, r1
    3b4c:	81 05       	cpc	r24, r1
    3b4e:	91 05       	cpc	r25, r1
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <printIntegerInBase+0x48>
    3b52:	50 c0       	rjmp	.+160    	; 0x3bf4 <printIntegerInBase+0xe8>
		printByte('0');
		return;
    3b54:	88 24       	eor	r8, r8
    3b56:	99 24       	eor	r9, r9
    3b58:	54 01       	movw	r10, r8
    3b5a:	1e 01       	movw	r2, r28
    3b5c:	08 94       	sec
    3b5e:	21 1c       	adc	r2, r1
    3b60:	31 1c       	adc	r3, r1
	} 

	while (n > 0) {
		buf[i++] = n % base;
    3b62:	81 01       	movw	r16, r2
    3b64:	08 0d       	add	r16, r8
    3b66:	19 1d       	adc	r17, r9
    3b68:	c7 01       	movw	r24, r14
    3b6a:	b6 01       	movw	r22, r12
    3b6c:	a3 01       	movw	r20, r6
    3b6e:	92 01       	movw	r18, r4
    3b70:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodsi4>
    3b74:	f8 01       	movw	r30, r16
    3b76:	60 83       	st	Z, r22
    3b78:	08 94       	sec
    3b7a:	81 1c       	adc	r8, r1
    3b7c:	91 1c       	adc	r9, r1
    3b7e:	a1 1c       	adc	r10, r1
    3b80:	b1 1c       	adc	r11, r1
		n /= base;
    3b82:	c7 01       	movw	r24, r14
    3b84:	b6 01       	movw	r22, r12
    3b86:	a3 01       	movw	r20, r6
    3b88:	92 01       	movw	r18, r4
    3b8a:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodsi4>
    3b8e:	c9 01       	movw	r24, r18
    3b90:	da 01       	movw	r26, r20
    3b92:	6c 01       	movw	r12, r24
    3b94:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    3b96:	c1 14       	cp	r12, r1
    3b98:	d1 04       	cpc	r13, r1
    3b9a:	e1 04       	cpc	r14, r1
    3b9c:	f1 04       	cpc	r15, r1
    3b9e:	09 f7       	brne	.-62     	; 0x3b62 <printIntegerInBase+0x56>
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3ba0:	81 14       	cp	r8, r1
    3ba2:	91 04       	cpc	r9, r1
    3ba4:	a1 04       	cpc	r10, r1
    3ba6:	b1 04       	cpc	r11, r1
    3ba8:	61 f1       	breq	.+88     	; 0x3c02 <printIntegerInBase+0xf6>
    3baa:	91 01       	movw	r18, r2
    3bac:	28 0d       	add	r18, r8
    3bae:	39 1d       	adc	r19, r9
    3bb0:	d5 01       	movw	r26, r10
    3bb2:	c4 01       	movw	r24, r8
    3bb4:	01 97       	sbiw	r24, 0x01	; 1
    3bb6:	a1 09       	sbc	r26, r1
    3bb8:	b1 09       	sbc	r27, r1
		printByte(buf[i - 1] < 10 ?
    3bba:	ac 01       	movw	r20, r24
    3bbc:	48 19       	sub	r20, r8
    3bbe:	59 09       	sbc	r21, r9
    3bc0:	fa 01       	movw	r30, r20
    3bc2:	e2 0f       	add	r30, r18
    3bc4:	f3 1f       	adc	r31, r19
    3bc6:	e0 81       	ld	r30, Z
    3bc8:	ea 30       	cpi	r30, 0x0A	; 10
    3bca:	90 f4       	brcc	.+36     	; 0x3bf0 <printIntegerInBase+0xe4>
    3bcc:	e0 5d       	subi	r30, 0xD0	; 208
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3bce:	80 91 c0 00 	lds	r24, 0x00C0
    3bd2:	85 ff       	sbrs	r24, 5
    3bd4:	fc cf       	rjmp	.-8      	; 0x3bce <printIntegerInBase+0xc2>
		;
	UDR0 = c;
    3bd6:	e0 93 c6 00 	sts	0x00C6, r30
    3bda:	21 50       	subi	r18, 0x01	; 1
    3bdc:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    3bde:	22 16       	cp	r2, r18
    3be0:	33 06       	cpc	r3, r19
    3be2:	79 f0       	breq	.+30     	; 0x3c02 <printIntegerInBase+0xf6>
		printByte(buf[i - 1] < 10 ?
    3be4:	fa 01       	movw	r30, r20
    3be6:	e2 0f       	add	r30, r18
    3be8:	f3 1f       	adc	r31, r19
    3bea:	e0 81       	ld	r30, Z
    3bec:	ea 30       	cpi	r30, 0x0A	; 10
    3bee:	70 f3       	brcs	.-36     	; 0x3bcc <printIntegerInBase+0xc0>
    3bf0:	e9 5c       	subi	r30, 0xC9	; 201
    3bf2:	ed cf       	rjmp	.-38     	; 0x3bce <printIntegerInBase+0xc2>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3bf4:	80 91 c0 00 	lds	r24, 0x00C0
    3bf8:	85 ff       	sbrs	r24, 5
    3bfa:	fc cf       	rjmp	.-8      	; 0x3bf4 <printIntegerInBase+0xe8>
		;
	UDR0 = c;
    3bfc:	80 e3       	ldi	r24, 0x30	; 48
    3bfe:	80 93 c6 00 	sts	0x00C6, r24

	for (; i > 0; i--)
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    3c02:	a0 96       	adiw	r28, 0x20	; 32
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
    3c0e:	cf 91       	pop	r28
    3c10:	df 91       	pop	r29
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	ff 90       	pop	r15
    3c18:	ef 90       	pop	r14
    3c1a:	df 90       	pop	r13
    3c1c:	cf 90       	pop	r12
    3c1e:	bf 90       	pop	r11
    3c20:	af 90       	pop	r10
    3c22:	9f 90       	pop	r9
    3c24:	8f 90       	pop	r8
    3c26:	7f 90       	pop	r7
    3c28:	6f 90       	pop	r6
    3c2a:	5f 90       	pop	r5
    3c2c:	4f 90       	pop	r4
    3c2e:	3f 90       	pop	r3
    3c30:	2f 90       	pop	r2
    3c32:	08 95       	ret

00003c34 <printInteger>:

void printInteger(long n)
{
    3c34:	9b 01       	movw	r18, r22
    3c36:	ac 01       	movw	r20, r24
	if (n < 0) {
    3c38:	97 fd       	sbrc	r25, 7
    3c3a:	09 c0       	rjmp	.+18     	; 0x3c4e <printInteger+0x1a>
		printByte('-');
		n = -n;
	}

	printIntegerInBase(n, 10);
    3c3c:	ca 01       	movw	r24, r20
    3c3e:	b9 01       	movw	r22, r18
    3c40:	2a e0       	ldi	r18, 0x0A	; 10
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	40 e0       	ldi	r20, 0x00	; 0
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <printIntegerInBase>
}
    3c4c:	08 95       	ret
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3c4e:	80 91 c0 00 	lds	r24, 0x00C0
    3c52:	85 ff       	sbrs	r24, 5
    3c54:	fc cf       	rjmp	.-8      	; 0x3c4e <printInteger+0x1a>
		;
	UDR0 = c;
    3c56:	8d e2       	ldi	r24, 0x2D	; 45
    3c58:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    3c5c:	50 95       	com	r21
    3c5e:	40 95       	com	r20
    3c60:	30 95       	com	r19
    3c62:	21 95       	neg	r18
    3c64:	3f 4f       	sbci	r19, 0xFF	; 255
    3c66:	4f 4f       	sbci	r20, 0xFF	; 255
    3c68:	5f 4f       	sbci	r21, 0xFF	; 255
    3c6a:	e8 cf       	rjmp	.-48     	; 0x3c3c <printInteger+0x8>

00003c6c <printBinary>:
//  printIntegerInBase(n, 8);
// }
// 
void printBinary(unsigned long n)
{
 printIntegerInBase(n, 2);
    3c6c:	22 e0       	ldi	r18, 0x02	; 2
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e0       	ldi	r20, 0x00	; 0
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <printIntegerInBase>
  }
    3c78:	08 95       	ret

00003c7a <printFloat>:

	printIntegerInBase(n, 10);
}

void printFloat(double n)
{
    3c7a:	ef 92       	push	r14
    3c7c:	ff 92       	push	r15
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	00 d0       	rcall	.+0      	; 0x3c88 <printFloat+0xe>
    3c88:	0f 92       	push	r0
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3c8e:	ae 01       	movw	r20, r28
    3c90:	4f 5f       	subi	r20, 0xFF	; 255
    3c92:	5f 4f       	sbci	r21, 0xFF	; 255
    3c94:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <modf>
    3c98:	7b 01       	movw	r14, r22
    3c9a:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3c9c:	69 81       	ldd	r22, Y+1	; 0x01
    3c9e:	7a 81       	ldd	r23, Y+2	; 0x02
    3ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca4:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
    3ca8:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3cac:	80 91 c0 00 	lds	r24, 0x00C0
    3cb0:	85 ff       	sbrs	r24, 5
    3cb2:	fc cf       	rjmp	.-8      	; 0x3cac <printFloat+0x32>
		;
	UDR0 = c;
    3cb4:	8e e2       	ldi	r24, 0x2E	; 46
    3cb6:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3cba:	c8 01       	movw	r24, r16
    3cbc:	b7 01       	movw	r22, r14
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	4a e7       	ldi	r20, 0x7A	; 122
    3cc4:	54 e4       	ldi	r21, 0x44	; 68
    3cc6:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    3cca:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <round>
    3cce:	0e 94 a5 24 	call	0x494a	; 0x494a <__fixsfsi>
    3cd2:	97 fd       	sbrc	r25, 7
    3cd4:	0d c0       	rjmp	.+26     	; 0x3cf0 <printFloat+0x76>
    3cd6:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <printInteger>
}
    3cda:	0f 90       	pop	r0
    3cdc:	0f 90       	pop	r0
    3cde:	0f 90       	pop	r0
    3ce0:	0f 90       	pop	r0
    3ce2:	cf 91       	pop	r28
    3ce4:	df 91       	pop	r29
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	ff 90       	pop	r15
    3cec:	ef 90       	pop	r14
    3cee:	08 95       	ret
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    3cf0:	90 95       	com	r25
    3cf2:	80 95       	com	r24
    3cf4:	70 95       	com	r23
    3cf6:	61 95       	neg	r22
    3cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    3cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfe:	eb cf       	rjmp	.-42     	; 0x3cd6 <printFloat+0x5c>

00003d00 <atc_init>:
#include "stepper.h"

void atc_init()
{
	// set the toolchangers as outputs
	STEPPING_DDR |= _BV( SPARE1 ); // spare 1 is on a different port
    3d00:	87 9a       	sbi	0x10, 7	; 16

	SPARE_DDR |= _BV( SPARE2 );
    3d02:	e7 e0       	ldi	r30, 0x07	; 7
    3d04:	f1 e0       	ldi	r31, 0x01	; 1
    3d06:	80 81       	ld	r24, Z
    3d08:	81 60       	ori	r24, 0x01	; 1
    3d0a:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE3 );
    3d0c:	80 81       	ld	r24, Z
    3d0e:	82 60       	ori	r24, 0x02	; 2
    3d10:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE4 );
    3d12:	80 81       	ld	r24, Z
    3d14:	84 60       	ori	r24, 0x04	; 4
    3d16:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE5 );
    3d18:	80 81       	ld	r24, Z
    3d1a:	88 60       	ori	r24, 0x08	; 8
    3d1c:	80 83       	st	Z, r24
	SPARE_DDR |= _BV( SPARE6 );
    3d1e:	80 81       	ld	r24, Z
    3d20:	80 64       	ori	r24, 0x40	; 64
    3d22:	80 83       	st	Z, r24

// initialise PORT as well

}
    3d24:	08 95       	ret

00003d26 <has_tool>:
}

unsigned char has_tool( void )
{
	return 0;
}
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	08 95       	ret

00003d2a <atc_fire>:



// tool changer
void atc_fire(int tool)
{
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3d30:	80 91 4f 05 	lds	r24, 0x054F
    3d34:	88 23       	and	r24, r24
    3d36:	19 f4       	brne	.+6      	; 0x3d3e <atc_fire+0x14>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	08 95       	ret

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("atc change\n\r"));
#endif

	set_busy( TRUE ) ;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <set_busy>

	// turn off toolchanger
	if( tool == 0 ) {
    3d44:	20 97       	sbiw	r28, 0x00	; 0
    3d46:	29 f1       	breq	.+74     	; 0x3d92 <atc_fire+0x68>

		return;
	}
  
	// air off and down
	SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3d48:	80 91 08 01 	lds	r24, 0x0108
    3d4c:	81 60       	ori	r24, 0x01	; 1
    3d4e:	80 93 08 01 	sts	0x0108, r24
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3d52:	c3 30       	cpi	r28, 0x03	; 3
    3d54:	d1 05       	cpc	r29, r1
    3d56:	09 f4       	brne	.+2      	; 0x3d5a <atc_fire+0x30>
    3d58:	46 c0       	rjmp	.+140    	; 0x3de6 <atc_fire+0xbc>
    3d5a:	c4 30       	cpi	r28, 0x04	; 4
    3d5c:	d1 05       	cpc	r29, r1
    3d5e:	8c f5       	brge	.+98     	; 0x3dc2 <atc_fire+0x98>
    3d60:	c1 30       	cpi	r28, 0x01	; 1
    3d62:	d1 05       	cpc	r29, r1
    3d64:	09 f4       	brne	.+2      	; 0x3d68 <atc_fire+0x3e>
    3d66:	6d c0       	rjmp	.+218    	; 0x3e42 <atc_fire+0x118>
    3d68:	22 97       	sbiw	r28, 0x02	; 2
    3d6a:	09 f4       	brne	.+2      	; 0x3d6e <atc_fire+0x44>
    3d6c:	66 c0       	rjmp	.+204    	; 0x3e3a <atc_fire+0x110>
		}


	// switch ATC on

	CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3d6e:	80 91 08 01 	lds	r24, 0x0108
    3d72:	8e 7f       	andi	r24, 0xFE	; 254
    3d74:	80 93 08 01 	sts	0x0108, r24
    3d78:	28 ee       	ldi	r18, 0xE8	; 232
    3d7a:	33 e0       	ldi	r19, 0x03	; 3
    3d7c:	40 e9       	ldi	r20, 0x90	; 144
    3d7e:	51 e0       	ldi	r21, 0x01	; 1
    3d80:	ca 01       	movw	r24, r20
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <atc_fire+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d86:	21 50       	subi	r18, 0x01	; 1
    3d88:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8a:	d1 f7       	brne	.-12     	; 0x3d80 <atc_fire+0x56>
	_delay_ms( 100 );


// don't turn off busy flag

}
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	08 95       	ret

#ifdef VERBOSE_DEBUG
		printPgmString(PSTR("ATCs off\n\r"));
#endif
		// set air off
		SET_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3d92:	80 91 08 01 	lds	r24, 0x0108
    3d96:	81 60       	ori	r24, 0x01	; 1
    3d98:	80 93 08 01 	sts	0x0108, r24

		//	 clear state
		SET_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3d9c:	80 91 08 01 	lds	r24, 0x0108
    3da0:	82 60       	ori	r24, 0x02	; 2
    3da2:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3da6:	80 91 08 01 	lds	r24, 0x0108
    3daa:	84 60       	ori	r24, 0x04	; 4
    3dac:	80 93 08 01 	sts	0x0108, r24
		SET_BIT(SPARE_PORT, _BV( SPARE5 ) );
    3db0:	80 91 08 01 	lds	r24, 0x0108
    3db4:	88 60       	ori	r24, 0x08	; 8
    3db6:	80 93 08 01 	sts	0x0108, r24

		// head can move again
		set_busy( FALSE ) ;
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <set_busy>
    3dc0:	bb cf       	rjmp	.-138    	; 0x3d38 <atc_fire+0xe>
 010 = tool 3
 011 = tool 4 
 100 = tool 5
 101 = tool 6
 */
 	switch( tool ) {
    3dc2:	c5 30       	cpi	r28, 0x05	; 5
    3dc4:	d1 05       	cpc	r29, r1
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <atc_fire+0xa0>
    3dc8:	45 c0       	rjmp	.+138    	; 0x3e54 <atc_fire+0x12a>
    3dca:	c5 30       	cpi	r28, 0x05	; 5
    3dcc:	d1 05       	cpc	r29, r1
    3dce:	04 f1       	brlt	.+64     	; 0x3e10 <atc_fire+0xe6>
    3dd0:	26 97       	sbiw	r28, 0x06	; 6
    3dd2:	69 f6       	brne	.-102    	; 0x3d6e <atc_fire+0x44>
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
    3dd4:	80 91 08 01 	lds	r24, 0x0108
    3dd8:	82 60       	ori	r24, 0x02	; 2
    3dda:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3dde:	80 91 08 01 	lds	r24, 0x0108
    3de2:	8b 7f       	andi	r24, 0xFB	; 251
    3de4:	1d c0       	rjmp	.+58     	; 0x3e20 <atc_fire+0xf6>


			break;
		case 3: // M15

			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3de6:	80 91 08 01 	lds	r24, 0x0108
    3dea:	8d 7f       	andi	r24, 0xFD	; 253
    3dec:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3df0:	80 91 08 01 	lds	r24, 0x0108
    3df4:	84 60       	ori	r24, 0x04	; 4
    3df6:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3dfa:	80 91 08 01 	lds	r24, 0x0108
    3dfe:	87 7f       	andi	r24, 0xF7	; 247
    3e00:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e04:	80 91 08 01 	lds	r24, 0x0108
    3e08:	8e 7f       	andi	r24, 0xFE	; 254
    3e0a:	80 93 08 01 	sts	0x0108, r24
    3e0e:	af cf       	rjmp	.-162    	; 0x3d6e <atc_fire+0x44>

			break;
		case 4: // M16

		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e10:	80 91 08 01 	lds	r24, 0x0108
    3e14:	8d 7f       	andi	r24, 0xFD	; 253
    3e16:	80 93 08 01 	sts	0x0108, r24
			SET_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e1a:	80 91 08 01 	lds	r24, 0x0108
    3e1e:	84 60       	ori	r24, 0x04	; 4
		
			break;
		case 6: // M18
		
			SET_BIT  (SPARE_PORT, _BV( SPARE3 ) );
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e20:	80 93 08 01 	sts	0x0108, r24
			SET_BIT  (SPARE_PORT, _BV( SPARE5 ) );
    3e24:	80 91 08 01 	lds	r24, 0x0108
    3e28:	88 60       	ori	r24, 0x08	; 8
    3e2a:	80 93 08 01 	sts	0x0108, r24
		
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
    3e2e:	80 91 08 01 	lds	r24, 0x0108
    3e32:	8e 7f       	andi	r24, 0xFE	; 254
    3e34:	80 93 08 01 	sts	0x0108, r24
    3e38:	9a cf       	rjmp	.-204    	; 0x3d6e <atc_fire+0x44>
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );

			break;
		case 2: // M14
		
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e3a:	80 91 08 01 	lds	r24, 0x0108
    3e3e:	8d 7f       	andi	r24, 0xFD	; 253
    3e40:	cc cf       	rjmp	.-104    	; 0x3dda <atc_fire+0xb0>
 */
 	switch( tool ) {
  	
		// select tool M13
		case 1:
			CLEAR_BIT(SPARE_PORT, _BV( SPARE3 ) );
    3e42:	80 91 08 01 	lds	r24, 0x0108
    3e46:	8d 7f       	andi	r24, 0xFD	; 253
    3e48:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT(SPARE_PORT, _BV( SPARE4 ) );
    3e4c:	80 91 08 01 	lds	r24, 0x0108
    3e50:	8b 7f       	andi	r24, 0xFB	; 251
    3e52:	d1 cf       	rjmp	.-94     	; 0x3df6 <atc_fire+0xcc>
			//on
			CLEAR_BIT(SPARE_PORT, _BV( SPARE2 ) );
			break;
		case 5: // M17
		
			SET_BIT   (SPARE_PORT, _BV( SPARE3 ) );
    3e54:	80 91 08 01 	lds	r24, 0x0108
    3e58:	82 60       	ori	r24, 0x02	; 2
    3e5a:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE4 ) );
    3e5e:	80 91 08 01 	lds	r24, 0x0108
    3e62:	8b 7f       	andi	r24, 0xFB	; 251
    3e64:	80 93 08 01 	sts	0x0108, r24
			CLEAR_BIT (SPARE_PORT, _BV( SPARE5 ) );
    3e68:	80 91 08 01 	lds	r24, 0x0108
    3e6c:	87 7f       	andi	r24, 0xF7	; 247
    3e6e:	80 93 08 01 	sts	0x0108, r24
    3e72:	7d cf       	rjmp	.-262    	; 0x3d6e <atc_fire+0x44>

00003e74 <DropTool>:
	return GCSTATUS_OK;

}

char DropTool( unsigned char tool )
{
    3e74:	1f 93       	push	r17
    3e76:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3e78:	80 91 4f 05 	lds	r24, 0x054F
    3e7c:	88 23       	and	r24, r24
    3e7e:	19 f4       	brne	.+6      	; 0x3e86 <DropTool+0x12>
    3e80:	83 e6       	ldi	r24, 0x63	; 99
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3e82:	1f 91       	pop	r17
    3e84:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    3e8e:	88 23       	and	r24, r24
    3e90:	19 f4       	brne	.+6      	; 0x3e98 <DropTool+0x24>
    3e92:	85 e0       	ldi	r24, 0x05	; 5
	// head back up
	head_down( 0 );
	
	return GCSTATUS_OK;

}
    3e94:	1f 91       	pop	r17
    3e96:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_fire( tool ) ;
    3e98:	81 2f       	mov	r24, r17
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <atc_fire>

	// tool changer down, should no longer be marked as busy, head can move.
	atc_fire( 0 );
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <atc_fire>

	// head back up
	head_down( 0 );
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3eb2:	1f 91       	pop	r17
    3eb4:	08 95       	ret

00003eb6 <PickupTool>:

// this should to the whole procedure

// these two are similatr enough they could be one function
char PickupTool( unsigned char tool )
{
    3eb6:	1f 93       	push	r17
    3eb8:	18 2f       	mov	r17, r24
	if( gHomed == FALSE  ){ 
    3eba:	80 91 4f 05 	lds	r24, 0x054F
    3ebe:	88 23       	and	r24, r24
    3ec0:	19 f4       	brne	.+6      	; 0x3ec8 <PickupTool+0x12>
    3ec2:	83 e6       	ldi	r24, 0x63	; 99
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3ec4:	1f 91       	pop	r17
    3ec6:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

	// head down, won't return til its done
	if( head_down( 1 ) == 0 ) {
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    3ed0:	88 23       	and	r24, r24
    3ed2:	19 f4       	brne	.+6      	; 0x3eda <PickupTool+0x24>
    3ed4:	85 e0       	ldi	r24, 0x05	; 5
	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
	
	return GCSTATUS_OK;

}
    3ed6:	1f 91       	pop	r17
    3ed8:	08 95       	ret
		// Head failed to go down.
		return GCSTATUS_FAILED_COMMAND;
	}

	// bring up atc, inbuilt delay, marked as busy so gantry can't move, atc doesn't know if its up or down
	atc_change( tool ) ;
    3eda:	81 2f       	mov	r24, r17
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>

	// head back up
	head_down( 0 );
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    3eea:	80 e9       	ldi	r24, 0x90	; 144
    3eec:	91 e0       	ldi	r25, 0x01	; 1
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	f1 f7       	brne	.-4      	; 0x3eee <PickupTool+0x38>

	_delay_us(100);

	// tool changer down, should no longer be marked as busy, head can move.
	atc_change( 0 );
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <atc_change>
    3efa:	80 e0       	ldi	r24, 0x00	; 0
	
	return GCSTATUS_OK;

}
    3efc:	1f 91       	pop	r17
    3efe:	08 95       	ret

00003f00 <atc_change>:
	Failed ?

*/

unsigned char atc_change(int tool)
{
    3f00:	cf 93       	push	r28
    3f02:	df 93       	push	r29
    3f04:	ec 01       	movw	r28, r24
	if( gHomed == FALSE  ){ 
    3f06:	80 91 4f 05 	lds	r24, 0x054F
    3f0a:	88 23       	and	r24, r24
    3f0c:	71 f0       	breq	.+28     	; 0x3f2a <atc_change+0x2a>
		return GCSTATUS_NOT_HOMED;
	}


	// do we have that tool already ?
	if( tool == toolId ) {
    3f0e:	cf 3f       	cpi	r28, 0xFF	; 255
    3f10:	d1 05       	cpc	r29, r1
    3f12:	39 f0       	breq	.+14     	; 0x3f22 <atc_change+0x22>
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
    3f14:	0e 94 05 21 	call	0x420a	; 0x420a <run_vacuum_test>
    3f18:	88 23       	and	r24, r24
    3f1a:	59 f0       	breq	.+22     	; 0x3f32 <atc_change+0x32>
		PickupTool(tool);
	} else { 
		DropTool(tool);
    3f1c:	8c 2f       	mov	r24, r28
    3f1e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DropTool>
    3f22:	80 e0       	ldi	r24, 0x00	; 0
	}

	return GCSTATUS_OK;
}
    3f24:	df 91       	pop	r29
    3f26:	cf 91       	pop	r28
    3f28:	08 95       	ret

*/

unsigned char atc_change(int tool)
{
	if( gHomed == FALSE  ){ 
    3f2a:	83 e6       	ldi	r24, 0x63	; 99
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	08 95       	ret
	if( tool == toolId ) {
		return GCSTATUS_OK;
	}
	
	if( run_vacuum_test() == 0 ) {
		PickupTool(tool);
    3f32:	8c 2f       	mov	r24, r28
    3f34:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <PickupTool>
    3f38:	80 e0       	ldi	r24, 0x00	; 0
	} else { 
		DropTool(tool);
	}

	return GCSTATUS_OK;
}
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	08 95       	ret

00003f40 <check_for_tool>:


// check to see if the head has a tool in it
unsigned char check_for_tool( void ) 
{	
	if( gHomed == FALSE  ){ 
    3f40:	80 91 4f 05 	lds	r24, 0x054F
    3f44:	88 23       	and	r24, r24
    3f46:	11 f4       	brne	.+4      	; 0x3f4c <check_for_tool+0xc>
    3f48:	83 e6       	ldi	r24, 0x63	; 99
    3f4a:	08 95       	ret
		return GCSTATUS_NOT_HOMED;
	}


	//move head up
	if( is_head_down() ) {
    3f4c:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    3f50:	88 23       	and	r24, r24
    3f52:	a1 f4       	brne	.+40     	; 0x3f7c <check_for_tool+0x3c>
		head_down( FALSE) ;
	}

	goto_vacpad();
    3f54:	0e 94 3f 21 	call	0x427e	; 0x427e <goto_vacpad>
	
	head_down(TRUE);
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
	
	vacuum(TRUE);
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>

	if( vacuum_state() == TRUE )  {
    3f68:	0e 94 ff 20 	call	0x41fe	; 0x41fe <vacuum_state>
    3f6c:	81 30       	cpi	r24, 0x01	; 1
    3f6e:	59 f0       	breq	.+22     	; 0x3f86 <check_for_tool+0x46>
		head_down( FALSE) ;
		return TRUE;
	} else {
		head_down( FALSE) ;
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    3f78:	80 e0       	ldi	r24, 0x00	; 0
		return FALSE; 
	}
}
    3f7a:	08 95       	ret
	}


	//move head up
	if( is_head_down() ) {
		head_down( FALSE) ;
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    3f84:	e7 cf       	rjmp	.-50     	; 0x3f54 <check_for_tool+0x14>
	head_down(TRUE);
	
	vacuum(TRUE);

	if( vacuum_state() == TRUE )  {
		head_down( FALSE) ;
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	08 95       	ret

00003f92 <head_init>:


void head_init()
{
// set the head as an output
	HEAD_DDR |= _BV( HEAD );
    3f92:	ea e0       	ldi	r30, 0x0A	; 10
    3f94:	f1 e0       	ldi	r31, 0x01	; 1
    3f96:	80 81       	ld	r24, Z
    3f98:	80 62       	ori	r24, 0x20	; 32
    3f9a:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( HEAD );
    3f9c:	eb e0       	ldi	r30, 0x0B	; 11
    3f9e:	f1 e0       	ldi	r31, 0x01	; 1
    3fa0:	80 81       	ld	r24, Z
    3fa2:	80 62       	ori	r24, 0x20	; 32
    3fa4:	80 83       	st	Z, r24

// setup head sensor
	HEADDT_DDR  &= ~(_BV( HEAD_DOWN_TEST ));
    3fa6:	38 98       	cbi	0x07, 0	; 7
	HEADDT_PORT |= (_BV( HEAD_DOWN_TEST ));
    3fa8:	40 9a       	sbi	0x08, 0	; 8

// setup 90o sensor
	HEADDT_DDR  &= ~(_BV( D90 ));
    3faa:	39 98       	cbi	0x07, 1	; 7
	HEADDT_PORT |= (_BV( D90 ));
    3fac:	41 9a       	sbi	0x08, 1	; 8
}
    3fae:	08 95       	ret

00003fb0 <is_head_down>:

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    3fb0:	86 b1       	in	r24, 0x06	; 6

	return state;
}
    3fb2:	81 70       	andi	r24, 0x01	; 1
    3fb4:	08 95       	ret

00003fb6 <is_rotated>:

unsigned char is_rotated( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, D90 )?1:0;
    3fb6:	86 b1       	in	r24, 0x06	; 6
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	96 95       	lsr	r25
    3fbc:	87 95       	ror	r24

	return state;
}
    3fbe:	81 70       	andi	r24, 0x01	; 1
    3fc0:	08 95       	ret

00003fc2 <head_down>:
	HEADDT_PORT |= (_BV( D90 ));
}


char head_down(int state)
{
    3fc2:	cf 93       	push	r28
    3fc4:	df 93       	push	r29
    3fc6:	ec 01       	movw	r28, r24

	// this one is interesting, it can't rely on the busy flag so lets use gHomed instead
	if( gHomed == FALSE  ){ 
    3fc8:	80 91 4f 05 	lds	r24, 0x054F
    3fcc:	88 23       	and	r24, r24
    3fce:	21 f1       	breq	.+72     	; 0x4018 <head_down+0x56>
		return 0;
	}

	// wait til head stops
	while( head_moving() );
    3fd0:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
    3fd4:	89 2b       	or	r24, r25
    3fd6:	e1 f7       	brne	.-8      	; 0x3fd0 <head_down+0xe>

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("dbg: head_down\n\r"));
#endif

	set_busy( TRUE );
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <set_busy>

// head down mode
  if( state == 0 ) {
    3fe0:	20 97       	sbiw	r28, 0x00	; 0
    3fe2:	e9 f0       	breq	.+58     	; 0x401e <head_down+0x5c>
	
	// wait til head up.

  } else {

	HEAD_PORT &= ~(_BV( HEAD ));
    3fe4:	80 91 0b 01 	lds	r24, 0x010B
    3fe8:	8f 7d       	andi	r24, 0xDF	; 223
    3fea:	80 93 0b 01 	sts	0x010B, r24
    3fee:	20 ed       	ldi	r18, 0xD0	; 208
    3ff0:	37 e0       	ldi	r19, 0x07	; 7
    3ff2:	40 e9       	ldi	r20, 0x90	; 144
    3ff4:	51 e0       	ldi	r21, 0x01	; 1
    3ff6:	ca 01       	movw	r24, r20
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	f1 f7       	brne	.-4      	; 0x3ff8 <head_down+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffc:	21 50       	subi	r18, 0x01	; 1
    3ffe:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4000:	d1 f7       	brne	.-12     	; 0x3ff6 <head_down+0x34>

unsigned char is_head_down( void )
{
	unsigned char state ;

	state  = bit_is_set( HEADDT_PIN, HEAD_DOWN_TEST )?1:0;
    4002:	86 b1       	in	r24, 0x06	; 6
  }

	//	 length of a delay for the head to move up and down
  _delay_ms( HEAD_SETTLE_TIME ) ;

  if(is_head_down() != state ) {
    4004:	81 70       	andi	r24, 0x01	; 1
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	8c 17       	cp	r24, r28
    400a:	9d 07       	cpc	r25, r29
    400c:	81 f0       	breq	.+32     	; 0x402e <head_down+0x6c>

	  printPgmString(PSTR("Head down error\n\r"));
    400e:	8f ed       	ldi	r24, 0xDF	; 223
    4010:	95 e0       	ldi	r25, 0x05	; 5
    4012:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    4016:	80 e0       	ldi	r24, 0x00	; 0
  }

 	set_busy( FALSE );

	return 1;
}
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	08 95       	ret
	set_busy( TRUE );

// head down mode
  if( state == 0 ) {

	HEAD_PORT |= _BV( HEAD );
    401e:	80 91 0b 01 	lds	r24, 0x010B
    4022:	80 62       	ori	r24, 0x20	; 32
    4024:	80 93 0b 01 	sts	0x010B, r24
    4028:	20 ed       	ldi	r18, 0xD0	; 208
    402a:	37 e0       	ldi	r19, 0x07	; 7
    402c:	e2 cf       	rjmp	.-60     	; 0x3ff2 <head_down+0x30>
	  printPgmString(PSTR("Head down error\n\r"));
	  
	  return 0;
  }

 	set_busy( FALSE );
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <set_busy>
    4036:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    4038:	df 91       	pop	r29
    403a:	cf 91       	pop	r28
    403c:	08 95       	ret

0000403e <panel_init>:
// Setup pin interrupts
void panel_init()
{
// set the panel as inputs
// home, morg switch
	DDRB  &= ~(_BV( PANEL_HOME ));
    403e:	25 98       	cbi	0x04, 5	; 4
	PORTB |=   _BV( PANEL_HOME );
    4040:	2d 9a       	sbi	0x05, 5	; 5

// head down switch
	DDRC  &= ~(_BV( PANEL_HEAD ));
    4042:	3c 98       	cbi	0x07, 4	; 7
	PORTC |=   _BV( PANEL_HEAD );
    4044:	44 9a       	sbi	0x08, 4	; 8

// go forward switch
	DDRE  &= ~(_BV( PANEL_FORWARD ));
    4046:	69 98       	cbi	0x0d, 1	; 13
	PORTE |=   _BV( PANEL_FORWARD );
    4048:	71 9a       	sbi	0x0e, 1	; 14

	DDRG  &= ~(_BV( PANEL_RIGHT ));
    404a:	9d 98       	cbi	0x13, 5	; 19
	PORTG |=   _BV( PANEL_RIGHT );
    404c:	a5 9a       	sbi	0x14, 5	; 20

// fast move switch
	DDRJ  &= ~(_BV( PANEL_FAST ));
    404e:	a4 e0       	ldi	r26, 0x04	; 4
    4050:	b1 e0       	ldi	r27, 0x01	; 1
    4052:	8c 91       	ld	r24, X
    4054:	8e 7f       	andi	r24, 0xFE	; 254
    4056:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_FAST );
    4058:	e5 e0       	ldi	r30, 0x05	; 5
    405a:	f1 e0       	ldi	r31, 0x01	; 1
    405c:	80 81       	ld	r24, Z
    405e:	81 60       	ori	r24, 0x01	; 1
    4060:	80 83       	st	Z, r24

	DDRJ  &= ~(_BV( PANEL_BACK ));
    4062:	8c 91       	ld	r24, X
    4064:	8f 7e       	andi	r24, 0xEF	; 239
    4066:	8c 93       	st	X, r24
	PORTJ |=   _BV( PANEL_BACK );
    4068:	80 81       	ld	r24, Z
    406a:	80 61       	ori	r24, 0x10	; 16
    406c:	80 83       	st	Z, r24

// switch on vacuum
	DDRH  &= ~(_BV( PANEL_VAC ));
    406e:	a1 e0       	ldi	r26, 0x01	; 1
    4070:	b1 e0       	ldi	r27, 0x01	; 1
    4072:	8c 91       	ld	r24, X
    4074:	8e 7f       	andi	r24, 0xFE	; 254
    4076:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_VAC );
    4078:	e2 e0       	ldi	r30, 0x02	; 2
    407a:	f1 e0       	ldi	r31, 0x01	; 1
    407c:	80 81       	ld	r24, Z
    407e:	81 60       	ori	r24, 0x01	; 1
    4080:	80 83       	st	Z, r24

// teach mode
	DDRH  &= ~(_BV( PANEL_TEACH ));
    4082:	8c 91       	ld	r24, X
    4084:	8d 7f       	andi	r24, 0xFD	; 253
    4086:	8c 93       	st	X, r24
	PORTH |=   _BV( PANEL_TEACH );
    4088:	80 81       	ld	r24, Z
    408a:	82 60       	ori	r24, 0x02	; 2
    408c:	80 83       	st	Z, r24

	TCCR3A |= (1 << WGM21); //ctc mode
    408e:	e0 e9       	ldi	r30, 0x90	; 144
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	82 60       	ori	r24, 0x02	; 2
    4096:	80 83       	st	Z, r24
	OCR3A   = 124; //set timer maximum to 124
    4098:	8c e7       	ldi	r24, 0x7C	; 124
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	90 93 99 00 	sts	0x0099, r25
    40a0:	80 93 98 00 	sts	0x0098, r24
	TCNT3   = 0;//reset timer
    40a4:	10 92 95 00 	sts	0x0095, r1
    40a8:	10 92 94 00 	sts	0x0094, r1
	TCCR3B  = 0b00000100; //((1 << CS22)|(1 << CS20));  //prescaler 64
    40ac:	84 e0       	ldi	r24, 0x04	; 4
    40ae:	80 93 91 00 	sts	0x0091, r24
	TIMSK3 |= (1 << OCIE2A);  //enable timer interrupt
    40b2:	e1 e7       	ldi	r30, 0x71	; 113
    40b4:	f0 e0       	ldi	r31, 0x00	; 0
    40b6:	80 81       	ld	r24, Z
    40b8:	82 60       	ori	r24, 0x02	; 2
    40ba:	80 83       	st	Z, r24

}
    40bc:	08 95       	ret

000040be <is_pleft>:

unsigned char is_pleft( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_LEFT )?0:1;
    40be:	8c b1       	in	r24, 0x0c	; 12
    40c0:	82 95       	swap	r24
    40c2:	86 95       	lsr	r24
    40c4:	87 70       	andi	r24, 0x07	; 7
    40c6:	80 95       	com	r24

	return state;
}
    40c8:	81 70       	andi	r24, 0x01	; 1
    40ca:	08 95       	ret

000040cc <is_pright>:

unsigned char is_pright( void )
{
	unsigned char state ;

	state  = bit_is_set( PING, PANEL_RIGHT )?0:1;
    40cc:	82 b3       	in	r24, 0x12	; 18
    40ce:	82 95       	swap	r24
    40d0:	86 95       	lsr	r24
    40d2:	87 70       	andi	r24, 0x07	; 7
    40d4:	80 95       	com	r24

	return state;
}
    40d6:	81 70       	andi	r24, 0x01	; 1
    40d8:	08 95       	ret

000040da <is_pback>:

unsigned char is_pback( void )
{
	unsigned char state ;

	state  = bit_is_set( PINE, PANEL_BACK )?0:1;
    40da:	8c b1       	in	r24, 0x0c	; 12
    40dc:	82 95       	swap	r24
    40de:	8f 70       	andi	r24, 0x0F	; 15
    40e0:	80 95       	com	r24

	return state;
}
    40e2:	81 70       	andi	r24, 0x01	; 1
    40e4:	08 95       	ret

000040e6 <is_pforward>:

unsigned char is_pforward( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FORWARD )?0:1;
    40e6:	80 91 03 01 	lds	r24, 0x0103
    40ea:	86 95       	lsr	r24
    40ec:	80 95       	com	r24

	return state;
}
    40ee:	81 70       	andi	r24, 0x01	; 1
    40f0:	08 95       	ret

000040f2 <is_phead>:

unsigned char is_phead( void )
{
	unsigned char state ;

	state  = bit_is_set( PINC, PANEL_HEAD )?0:1;
    40f2:	86 b1       	in	r24, 0x06	; 6
    40f4:	82 95       	swap	r24
    40f6:	8f 70       	andi	r24, 0x0F	; 15
    40f8:	80 95       	com	r24

	return state;
}
    40fa:	81 70       	andi	r24, 0x01	; 1
    40fc:	08 95       	ret

000040fe <is_pvac>:

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    40fe:	80 91 00 01 	lds	r24, 0x0100
    4102:	80 95       	com	r24

	return state;
}
    4104:	81 70       	andi	r24, 0x01	; 1
    4106:	08 95       	ret

00004108 <is_pfast>:

unsigned char is_pfast( void )
{
	unsigned char state ;

	state  = bit_is_set( PINJ, PANEL_FAST )?0:1;
    4108:	80 91 03 01 	lds	r24, 0x0103
    410c:	80 95       	com	r24

	return state;
}
    410e:	81 70       	andi	r24, 0x01	; 1
    4110:	08 95       	ret

00004112 <is_phome>:

unsigned char is_phome( void )
{
	unsigned char state ;

	state  = bit_is_set( PINB, PANEL_HOME )?0:1;
    4112:	83 b1       	in	r24, 0x03	; 3
    4114:	82 95       	swap	r24
    4116:	86 95       	lsr	r24
    4118:	87 70       	andi	r24, 0x07	; 7
    411a:	80 95       	com	r24

	return state;
}
    411c:	81 70       	andi	r24, 0x01	; 1
    411e:	08 95       	ret

00004120 <is_pteach>:

unsigned char is_pteach( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_TEACH )?0:1;
    4120:	80 91 00 01 	lds	r24, 0x0100
    4124:	86 95       	lsr	r24
    4126:	80 95       	com	r24

	return state;
}
    4128:	81 70       	andi	r24, 0x01	; 1
    412a:	08 95       	ret

0000412c <__vector_32>:
}


// Put the panel on an interrupt
SIGNAL(TIMER3_COMPA_vect)
{
    412c:	1f 92       	push	r1
    412e:	0f 92       	push	r0
    4130:	0f b6       	in	r0, 0x3f	; 63
    4132:	0f 92       	push	r0
    4134:	11 24       	eor	r1, r1
	return;
}
    4136:	0f 90       	pop	r0
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	0f 90       	pop	r0
    413c:	1f 90       	pop	r1
    413e:	18 95       	reti

00004140 <process_panel>:
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    4140:	1d 9b       	sbis	0x03, 5	; 3
    4142:	20 c0       	rjmp	.+64     	; 0x4184 <process_panel+0x44>

unsigned char is_pvac( void )
{
	unsigned char state ;

	state  = bit_is_set( PINH, PANEL_VAC )?0:1;
    4144:	80 91 00 01 	lds	r24, 0x0100
    4148:	80 ff       	sbrs	r24, 0
    414a:	0b c0       	rjmp	.+22     	; 0x4162 <process_panel+0x22>
	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
    414c:	80 91 7a 06 	lds	r24, 0x067A
    4150:	81 30       	cpi	r24, 0x01	; 1
    4152:	d9 f0       	breq	.+54     	; 0x418a <process_panel+0x4a>
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    4154:	34 9b       	sbis	0x06, 4	; 6
    4156:	0e c0       	rjmp	.+28     	; 0x4174 <process_panel+0x34>
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
    4158:	80 91 79 06 	lds	r24, 0x0679
    415c:	81 30       	cpi	r24, 0x01	; 1
    415e:	e1 f0       	breq	.+56     	; 0x4198 <process_panel+0x58>
    4160:	08 95       	ret
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();

	if( is_pvac() ) {
		bvac = 1;
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	80 93 7a 06 	sts	0x067A, r24
		vacuum(1);
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
	} else if(bvac == 1 ) {
		bvac = 0;
		vacuum(0);
	}	

	if( is_phead() ) {
    4170:	34 99       	sbic	0x06, 4	; 6
    4172:	f2 cf       	rjmp	.-28     	; 0x4158 <process_panel+0x18>
		bhead = 1;
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	80 93 79 06 	sts	0x0679, r24
		head_down(1);
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    4182:	08 95       	ret
void process_panel(void ) 
{
	static	char bvac = 0;
	static	char bhead = 0;

	if( is_phome() ) mc_go_home();
    4184:	0e 94 af 0a 	call	0x155e	; 0x155e <mc_go_home>
    4188:	dd cf       	rjmp	.-70     	; 0x4144 <process_panel+0x4>

	if( is_pvac() ) {
		bvac = 1;
		vacuum(1);
	} else if(bvac == 1 ) {
		bvac = 0;
    418a:	10 92 7a 06 	sts	0x067A, r1
		vacuum(0);
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
    4196:	de cf       	rjmp	.-68     	; 0x4154 <process_panel+0x14>

	if( is_phead() ) {
		bhead = 1;
		head_down(1);
	} else if(bhead == 1 ) {
		bhead = 0;
    4198:	10 92 79 06 	sts	0x0679, r1
		head_down(0);
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    41a4:	08 95       	ret

000041a6 <vacuum_init>:
#include "settings.h"

void vacuum_init(void)
{
	// setup vacuum sensor TAC
	LIMIT_DDR &= ~(_BV( TACSENSE ) );
    41a6:	57 98       	cbi	0x0a, 7	; 10
	LIMIT_PORT |= (_BV( TACSENSE ) );
    41a8:	5f 9a       	sbi	0x0b, 7	; 11

	// Vacuum on/off control
	HEAD_DDR  |= _BV( VACUUM );
    41aa:	ea e0       	ldi	r30, 0x0A	; 10
    41ac:	f1 e0       	ldi	r31, 0x01	; 1
    41ae:	80 81       	ld	r24, Z
    41b0:	80 61       	ori	r24, 0x10	; 16
    41b2:	80 83       	st	Z, r24
	HEAD_PORT |= _BV( VACUUM );
    41b4:	eb e0       	ldi	r30, 0x0B	; 11
    41b6:	f1 e0       	ldi	r31, 0x01	; 1
    41b8:	80 81       	ld	r24, Z
    41ba:	80 61       	ori	r24, 0x10	; 16
    41bc:	80 83       	st	Z, r24

}
    41be:	08 95       	ret

000041c0 <vacuum>:

// switches vacuum on and off
void vacuum(int state)
{
    41c0:	9c 01       	movw	r18, r24
	if( gHomed == FALSE ) return;
    41c2:	80 91 4f 05 	lds	r24, 0x054F
    41c6:	88 23       	and	r24, r24
    41c8:	89 f0       	breq	.+34     	; 0x41ec <vacuum+0x2c>
#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("vacuum change\n\r"));
#endif

// vacuum  on / off
  if( state == 0 ) {
    41ca:	23 2b       	or	r18, r19
    41cc:	81 f0       	breq	.+32     	; 0x41ee <vacuum+0x2e>

	HEAD_PORT |= _BV( VACUUM );

  } else {

	HEAD_PORT &= ~(_BV( VACUUM ));
    41ce:	80 91 0b 01 	lds	r24, 0x010B
    41d2:	8f 7e       	andi	r24, 0xEF	; 239
    41d4:	80 93 0b 01 	sts	0x010B, r24
    41d8:	28 e8       	ldi	r18, 0x88	; 136
    41da:	33 e1       	ldi	r19, 0x13	; 19
    41dc:	40 e9       	ldi	r20, 0x90	; 144
    41de:	51 e0       	ldi	r21, 0x01	; 1
    41e0:	ca 01       	movw	r24, r20
    41e2:	01 97       	sbiw	r24, 0x01	; 1
    41e4:	f1 f7       	brne	.-4      	; 0x41e2 <vacuum+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e6:	21 50       	subi	r18, 0x01	; 1
    41e8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ea:	d1 f7       	brne	.-12     	; 0x41e0 <vacuum+0x20>
    41ec:	08 95       	ret
#endif

// vacuum  on / off
  if( state == 0 ) {

	HEAD_PORT |= _BV( VACUUM );
    41ee:	80 91 0b 01 	lds	r24, 0x010B
    41f2:	80 61       	ori	r24, 0x10	; 16
    41f4:	80 93 0b 01 	sts	0x010B, r24
    41f8:	28 e8       	ldi	r18, 0x88	; 136
    41fa:	33 e1       	ldi	r19, 0x13	; 19
    41fc:	ef cf       	rjmp	.-34     	; 0x41dc <vacuum+0x1c>

000041fe <vacuum_state>:
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    41fe:	89 b1       	in	r24, 0x09	; 9
    4200:	80 95       	com	r24

	return state;
}
    4202:	88 1f       	adc	r24, r24
    4204:	88 27       	eor	r24, r24
    4206:	88 1f       	adc	r24, r24
    4208:	08 95       	ret

0000420a <run_vacuum_test>:
	}
}

/* This runs the whole test , vaccum on, goes to pad, head down, test vacuum, head up, returns state */
unsigned char run_vacuum_test( void )
{
    420a:	af 92       	push	r10
    420c:	bf 92       	push	r11
    420e:	cf 92       	push	r12
    4210:	df 92       	push	r13
    4212:	ef 92       	push	r14
    4214:	ff 92       	push	r15
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
	if( gHomed == FALSE  ){ 
    421a:	80 91 4f 05 	lds	r24, 0x054F
    421e:	88 23       	and	r24, r24
    4220:	51 f4       	brne	.+20     	; 0x4236 <run_vacuum_test+0x2c>
    4222:	83 e6       	ldi	r24, 0x63	; 99
	// settle head
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	return GCSTATUS_OK;

}
    4224:	1f 91       	pop	r17
    4226:	0f 91       	pop	r16
    4228:	ff 90       	pop	r15
    422a:	ef 90       	pop	r14
    422c:	df 90       	pop	r13
    422e:	cf 90       	pop	r12
    4230:	bf 90       	pop	r11
    4232:	af 90       	pop	r10
    4234:	08 95       	ret
	if( gHomed == FALSE  ){ 
		return GCSTATUS_NOT_HOMED;
	}

// switch vacuum on, faster, wastes air
	vacuum( 1 );
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>

	// move to pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    423e:	63 ec       	ldi	r22, 0xC3	; 195
    4240:	73 ed       	ldi	r23, 0xD3	; 211
    4242:	81 e4       	ldi	r24, 0x41	; 65
    4244:	91 e4       	ldi	r25, 0x41	; 65
    4246:	2a e1       	ldi	r18, 0x1A	; 26
    4248:	3b e8       	ldi	r19, 0x8B	; 139
    424a:	4d e9       	ldi	r20, 0x9D	; 157
    424c:	50 e4       	ldi	r21, 0x40	; 64
    424e:	0f 2e       	mov	r0, r31
    4250:	f0 e0       	ldi	r31, 0x00	; 0
    4252:	ef 2e       	mov	r14, r31
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	ff 2e       	mov	r15, r31
    4258:	f0 e8       	ldi	r31, 0x80	; 128
    425a:	0f 2f       	mov	r16, r31
    425c:	ff eb       	ldi	r31, 0xBF	; 191
    425e:	1f 2f       	mov	r17, r31
    4260:	f0 2d       	mov	r31, r0
    4262:	57 01       	movw	r10, r14
    4264:	68 01       	movw	r12, r16
    4266:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>

	// this only checks if the interrupt is enable right now, not really if the machine is moving, which should be the same thing.
	while( head_moving() ) ;
    426a:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
    426e:	89 2b       	or	r24, r25
    4270:	e1 f7       	brne	.-8      	; 0x426a <run_vacuum_test+0x60>
    4272:	80 e9       	ldi	r24, 0x90	; 144
    4274:	91 e0       	ldi	r25, 0x01	; 1
    4276:	01 97       	sbiw	r24, 0x01	; 1
    4278:	f1 f7       	brne	.-4      	; 0x4276 <run_vacuum_test+0x6c>
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	d3 cf       	rjmp	.-90     	; 0x4224 <run_vacuum_test+0x1a>

0000427e <goto_vacpad>:
	return GCSTATUS_OK;

}

unsigned char goto_vacpad( void ) 
{
    427e:	8f 92       	push	r8
    4280:	9f 92       	push	r9
    4282:	af 92       	push	r10
    4284:	bf 92       	push	r11
    4286:	cf 92       	push	r12
    4288:	df 92       	push	r13
    428a:	ef 92       	push	r14
    428c:	ff 92       	push	r15
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
	unsigned char hasTool = FALSE;

	if( gHomed == FALSE ) {
    4292:	80 91 4f 05 	lds	r24, 0x054F
    4296:	88 23       	and	r24, r24
    4298:	61 f4       	brne	.+24     	; 0x42b2 <goto_vacpad+0x34>
    429a:	83 e6       	ldi	r24, 0x63	; 99

	while( is_head_down() ) ;
	
	return GCSTATUS_OK;

}
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	df 90       	pop	r13
    42a6:	cf 90       	pop	r12
    42a8:	bf 90       	pop	r11
    42aa:	af 90       	pop	r10
    42ac:	9f 90       	pop	r9
    42ae:	8f 90       	pop	r8
    42b0:	08 95       	ret
	}
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
    42b2:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    42b6:	88 23       	and	r24, r24
    42b8:	09 f0       	breq	.+2      	; 0x42bc <goto_vacpad+0x3e>
    42ba:	20 c1       	rjmp	.+576    	; 0x44fc <goto_vacpad+0x27e>
	
	// what pickobear sends
	// G1X12.1142Y4.92323F100

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    42bc:	63 ec       	ldi	r22, 0xC3	; 195
    42be:	73 ed       	ldi	r23, 0xD3	; 211
    42c0:	81 e4       	ldi	r24, 0x41	; 65
    42c2:	91 e4       	ldi	r25, 0x41	; 65
    42c4:	2a e1       	ldi	r18, 0x1A	; 26
    42c6:	3b e8       	ldi	r19, 0x8B	; 139
    42c8:	4d e9       	ldi	r20, 0x9D	; 157
    42ca:	50 e4       	ldi	r21, 0x40	; 64
    42cc:	0f 2e       	mov	r0, r31
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	ef 2e       	mov	r14, r31
    42d2:	f0 e0       	ldi	r31, 0x00	; 0
    42d4:	ff 2e       	mov	r15, r31
    42d6:	f0 e8       	ldi	r31, 0x80	; 128
    42d8:	0f 2f       	mov	r16, r31
    42da:	ff eb       	ldi	r31, 0xBF	; 191
    42dc:	1f 2f       	mov	r17, r31
    42de:	f0 2d       	mov	r31, r0
    42e0:	57 01       	movw	r10, r14
    42e2:	68 01       	movw	r12, r16
    42e4:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>

	while( head_moving() );	
    42e8:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
    42ec:	89 2b       	or	r24, r25
    42ee:	e1 f7       	brne	.-8      	; 0x42e8 <goto_vacpad+0x6a>
    42f0:	80 e9       	ldi	r24, 0x90	; 144
    42f2:	91 e0       	ldi	r25, 0x01	; 1
    42f4:	01 97       	sbiw	r24, 0x01	; 1
    42f6:	f1 f7       	brne	.-4      	; 0x42f4 <goto_vacpad+0x76>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
    4300:	28 e8       	ldi	r18, 0x88	; 136
    4302:	33 e1       	ldi	r19, 0x13	; 19
    4304:	40 e9       	ldi	r20, 0x90	; 144
    4306:	51 e0       	ldi	r21, 0x01	; 1
    4308:	ca 01       	movw	r24, r20
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	f1 f7       	brne	.-4      	; 0x430a <goto_vacpad+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    430e:	21 50       	subi	r18, 0x01	; 1
    4310:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4312:	d1 f7       	brne	.-12     	; 0x4308 <goto_vacpad+0x8a>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    431c:	88 23       	and	r24, r24
    431e:	09 f4       	brne	.+2      	; 0x4322 <goto_vacpad+0xa4>
    4320:	e7 c0       	rjmp	.+462    	; 0x44f0 <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to go down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4322:	20 e1       	ldi	r18, 0x10	; 16
    4324:	37 e2       	ldi	r19, 0x27	; 39
    4326:	40 e9       	ldi	r20, 0x90	; 144
    4328:	51 e0       	ldi	r21, 0x01	; 1
    432a:	ca 01       	movw	r24, r20
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <goto_vacpad+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4330:	21 50       	subi	r18, 0x01	; 1
    4332:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4334:	d1 f7       	brne	.-12     	; 0x432a <goto_vacpad+0xac>
// is vacuum working ?
unsigned char vacuum_state( void )
{
	unsigned char state ;

	state  = bit_is_set( LIMIT_PIN, TACSENSE )?0:1;
    4336:	99 b0       	in	r9, 0x09	; 9
		printPgmString(PSTR("vacuum_test:0 picking up tool\r\n"));
#endif
	}

// vacuum off
	vacuum( 0 );
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    4348:	88 23       	and	r24, r24
    434a:	09 f4       	brne	.+2      	; 0x434e <goto_vacpad+0xd0>
    434c:	c8 c0       	rjmp	.+400    	; 0x44de <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    434e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    4352:	88 23       	and	r24, r24
    4354:	e1 f7       	brne	.-8      	; 0x434e <goto_vacpad+0xd0>


// move to ATC tool 1
//	G1X12.8504Y4.6378F100

	gotoxy(ATC_1_X,ATC_1_Y,-1,-1);
    4356:	6d e3       	ldi	r22, 0x3D	; 61
    4358:	7b e9       	ldi	r23, 0x9B	; 155
    435a:	8d e4       	ldi	r24, 0x4D	; 77
    435c:	91 e4       	ldi	r25, 0x41	; 65
    435e:	2c ed       	ldi	r18, 0xDC	; 220
    4360:	38 e6       	ldi	r19, 0x68	; 104
    4362:	44 e9       	ldi	r20, 0x94	; 148
    4364:	50 e4       	ldi	r21, 0x40	; 64
    4366:	0f 2e       	mov	r0, r31
    4368:	f0 e0       	ldi	r31, 0x00	; 0
    436a:	ef 2e       	mov	r14, r31
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	ff 2e       	mov	r15, r31
    4370:	f0 e8       	ldi	r31, 0x80	; 128
    4372:	0f 2f       	mov	r16, r31
    4374:	ff eb       	ldi	r31, 0xBF	; 191
    4376:	1f 2f       	mov	r17, r31
    4378:	f0 2d       	mov	r31, r0
    437a:	57 01       	movw	r10, r14
    437c:	68 01       	movw	r12, r16
    437e:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>

	while( head_moving() );	
    4382:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
    4386:	89 2b       	or	r24, r25
    4388:	e1 f7       	brne	.-8      	; 0x4382 <goto_vacpad+0x104>
    438a:	80 e9       	ldi	r24, 0x90	; 144
    438c:	91 e0       	ldi	r25, 0x01	; 1
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <goto_vacpad+0x110>
    4392:	20 ea       	ldi	r18, 0xA0	; 160
    4394:	3f e0       	ldi	r19, 0x0F	; 15
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4396:	40 e9       	ldi	r20, 0x90	; 144
    4398:	51 e0       	ldi	r21, 0x01	; 1
    439a:	ca 01       	movw	r24, r20
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	f1 f7       	brne	.-4      	; 0x439c <goto_vacpad+0x11e>
    43a0:	21 50       	subi	r18, 0x01	; 1
    43a2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a4:	d1 f7       	brne	.-12     	; 0x439a <goto_vacpad+0x11c>
	_delay_us( HEAD_MOVE_SETTLE_TIME );

	_delay_ms( 400 );

//head down
	if( head_down( 1 ) == 0 ) {
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    43ae:	88 23       	and	r24, r24
    43b0:	09 f4       	brne	.+2      	; 0x43b4 <goto_vacpad+0x136>
    43b2:	95 c0       	rjmp	.+298    	; 0x44de <goto_vacpad+0x260>
		return GCSTATUS_FAILED_COMMAND;	

	}

	// wait til head is down
	while( is_head_down() == 0 ) ;
    43b4:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    43b8:	88 23       	and	r24, r24
    43ba:	e1 f3       	breq	.-8      	; 0x43b4 <goto_vacpad+0x136>
    43bc:	20 e1       	ldi	r18, 0x10	; 16
    43be:	37 e2       	ldi	r19, 0x27	; 39
    43c0:	40 e9       	ldi	r20, 0x90	; 144
    43c2:	51 e0       	ldi	r21, 0x01	; 1
    43c4:	ca 01       	movw	r24, r20
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <goto_vacpad+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ca:	21 50       	subi	r18, 0x01	; 1
    43cc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ce:	d1 f7       	brne	.-12     	; 0x43c4 <goto_vacpad+0x146>
	
	_delay_ms( 1000 );


	// atc up
	atc_fire( 1 ) ;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <atc_fire>
    43d8:	20 e4       	ldi	r18, 0x40	; 64
    43da:	3f e1       	ldi	r19, 0x1F	; 31
    43dc:	40 e9       	ldi	r20, 0x90	; 144
    43de:	51 e0       	ldi	r21, 0x01	; 1
    43e0:	ca 01       	movw	r24, r20
    43e2:	01 97       	sbiw	r24, 0x01	; 1
    43e4:	f1 f7       	brne	.-4      	; 0x43e2 <goto_vacpad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e6:	21 50       	subi	r18, 0x01	; 1
    43e8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ea:	d1 f7       	brne	.-12     	; 0x43e0 <goto_vacpad+0x162>
    43ec:	88 24       	eor	r8, r8
    43ee:	97 fc       	sbrc	r9, 7
    43f0:	6b c0       	rjmp	.+214    	; 0x44c8 <goto_vacpad+0x24a>
    43f2:	88 24       	eor	r8, r8
    43f4:	83 94       	inc	r8

		// tool changer off
		atc_fire ( 0 );
		
		// head up
		if( head_down( 0 ) == 0 ) {
    43f6:	28 e8       	ldi	r18, 0x88	; 136
    43f8:	33 e1       	ldi	r19, 0x13	; 19
    43fa:	40 e9       	ldi	r20, 0x90	; 144
    43fc:	51 e0       	ldi	r21, 0x01	; 1
    43fe:	ca 01       	movw	r24, r20
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <goto_vacpad+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4404:	21 50       	subi	r18, 0x01	; 1
    4406:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4408:	d1 f7       	brne	.-12     	; 0x43fe <goto_vacpad+0x180>
	} else {
	
		_delay_ms( 500 );

	// head up
		if( head_down( 0 ) == 0 ) {
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    4412:	88 23       	and	r24, r24
    4414:	09 f4       	brne	.+2      	; 0x4418 <goto_vacpad+0x19a>
    4416:	63 c0       	rjmp	.+198    	; 0x44de <goto_vacpad+0x260>
		}

	}

// wait til head is up
	while( is_head_down() == 1 ) ;
    4418:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	e1 f3       	breq	.-8      	; 0x4418 <goto_vacpad+0x19a>
    4420:	28 e9       	ldi	r18, 0x98	; 152
    4422:	3a e3       	ldi	r19, 0x3A	; 58
    4424:	40 e9       	ldi	r20, 0x90	; 144
    4426:	51 e0       	ldi	r21, 0x01	; 1
    4428:	ca 01       	movw	r24, r20
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	f1 f7       	brne	.-4      	; 0x442a <goto_vacpad+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    442e:	21 50       	subi	r18, 0x01	; 1
    4430:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4432:	d1 f7       	brne	.-12     	; 0x4428 <goto_vacpad+0x1aa>

	_delay_ms( 1500 );

	// move head to vacuum pad
	gotoxy( VACUUM_PAD_X, VACUUM_PAD_Y ,-1,-1) ;
    4434:	63 ec       	ldi	r22, 0xC3	; 195
    4436:	73 ed       	ldi	r23, 0xD3	; 211
    4438:	81 e4       	ldi	r24, 0x41	; 65
    443a:	91 e4       	ldi	r25, 0x41	; 65
    443c:	2a e1       	ldi	r18, 0x1A	; 26
    443e:	3b e8       	ldi	r19, 0x8B	; 139
    4440:	4d e9       	ldi	r20, 0x9D	; 157
    4442:	50 e4       	ldi	r21, 0x40	; 64
    4444:	0f 2e       	mov	r0, r31
    4446:	f0 e0       	ldi	r31, 0x00	; 0
    4448:	ef 2e       	mov	r14, r31
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	ff 2e       	mov	r15, r31
    444e:	f0 e8       	ldi	r31, 0x80	; 128
    4450:	0f 2f       	mov	r16, r31
    4452:	ff eb       	ldi	r31, 0xBF	; 191
    4454:	1f 2f       	mov	r17, r31
    4456:	f0 2d       	mov	r31, r0
    4458:	57 01       	movw	r10, r14
    445a:	68 01       	movw	r12, r16
    445c:	0e 94 04 04 	call	0x808	; 0x808 <gotoxy>

	while( head_moving() );	
    4460:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
    4464:	89 2b       	or	r24, r25
    4466:	e1 f7       	brne	.-8      	; 0x4460 <goto_vacpad+0x1e2>
    4468:	80 e9       	ldi	r24, 0x90	; 144
    446a:	91 e0       	ldi	r25, 0x01	; 1
    446c:	01 97       	sbiw	r24, 0x01	; 1
    446e:	f1 f7       	brne	.-4      	; 0x446c <goto_vacpad+0x1ee>

	_delay_us( HEAD_MOVE_SETTLE_TIME );

// vacuum down, wait, test vacuum

	vacuum( 1 );
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
    4478:	28 e8       	ldi	r18, 0x88	; 136
    447a:	33 e1       	ldi	r19, 0x13	; 19
    447c:	40 e9       	ldi	r20, 0x90	; 144
    447e:	51 e0       	ldi	r21, 0x01	; 1
    4480:	ca 01       	movw	r24, r20
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	f1 f7       	brne	.-4      	; 0x4482 <goto_vacpad+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4486:	21 50       	subi	r18, 0x01	; 1
    4488:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    448a:	d1 f7       	brne	.-12     	; 0x4480 <goto_vacpad+0x202>

   _delay_ms( AIR_SETTLE_TIME );

	if( head_down( 1 ) == 0 ) {
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    4494:	88 23       	and	r24, r24
    4496:	61 f1       	breq	.+88     	; 0x44f0 <goto_vacpad+0x272>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad:  head failed to down\r\n"));
#endif

		vacuum ( 0 );
		return GCSTATUS_FAILED_COMMAND;	
    4498:	20 e1       	ldi	r18, 0x10	; 16
    449a:	37 e2       	ldi	r19, 0x27	; 39
    449c:	40 e9       	ldi	r20, 0x90	; 144
    449e:	51 e0       	ldi	r21, 0x01	; 1
    44a0:	ca 01       	movw	r24, r20
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	f1 f7       	brne	.-4      	; 0x44a2 <goto_vacpad+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a6:	21 50       	subi	r18, 0x01	; 1
    44a8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44aa:	d1 f7       	brne	.-12     	; 0x44a0 <goto_vacpad+0x222>
	}

   _delay_ms( 1000 );

	// check vacuum
	if( vacuum_state() ) {
    44ac:	4f 99       	sbic	0x09, 7	; 9
    44ae:	19 c0       	rjmp	.+50     	; 0x44e2 <goto_vacpad+0x264>
			printPgmString(PSTR("goto_vacpad:  detected blockage\r\n"));
#endif

		
		// were we picking up?
		if( hasTool == FALSE  ) { 
    44b0:	88 20       	and	r8, r8
    44b2:	49 f1       	breq	.+82     	; 0x4506 <goto_vacpad+0x288>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool pickup failed\r\n"));
#endif

// oops
		head_down(0);
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
		vacuum( 0 );
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
    44c4:	85 e0       	ldi	r24, 0x05	; 5
    44c6:	ea ce       	rjmp	.-556    	; 0x429c <goto_vacpad+0x1e>
	_delay_ms( 800 );

	if( hasTool == FALSE ) {

		// tool changer off
		atc_fire ( 0 );
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <atc_fire>
		
		// head up
		if( head_down( 0 ) == 0 ) {
    44d0:	80 e0       	ldi	r24, 0x00	; 0
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    44d8:	88 23       	and	r24, r24
    44da:	09 f0       	breq	.+2      	; 0x44de <goto_vacpad+0x260>
    44dc:	9d cf       	rjmp	.-198    	; 0x4418 <goto_vacpad+0x19a>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    44de:	85 e0       	ldi	r24, 0x05	; 5
    44e0:	dd ce       	rjmp	.-582    	; 0x429c <goto_vacpad+0x1e>

			// vacuuum =  0
			// drop or pick

		// were we dropping off?
		if( hasTool == TRUE ) { 
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	88 16       	cp	r8, r24
    44e6:	79 f0       	breq	.+30     	; 0x4506 <goto_vacpad+0x288>
		} else {
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("tool drop failed\r\n"));
#endif

			head_down(0);
    44e8:	80 e0       	ldi	r24, 0x00	; 0
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
			vacuum( 0 );
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
    44f8:	85 e0       	ldi	r24, 0x05	; 5
    44fa:	d0 ce       	rjmp	.-608    	; 0x429c <goto_vacpad+0x1e>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("goto_vacpad\r\n"));
#endif

	if( is_head_down() ) {
		head_down( FALSE )  ;
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    4504:	db ce       	rjmp	.-586    	; 0x42bc <goto_vacpad+0x3e>
		}

	}	

// vacuum off
	vacuum( 0 );
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>

// head up
	if( head_down( 0 ) == 0 ) {
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    4516:	88 23       	and	r24, r24
    4518:	11 f3       	breq	.-60     	; 0x44de <goto_vacpad+0x260>
#endif

		return GCSTATUS_FAILED_COMMAND;
	}

	while( is_head_down() ) ;
    451a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    451e:	88 23       	and	r24, r24
    4520:	e1 f7       	brne	.-8      	; 0x451a <goto_vacpad+0x29c>
    4522:	bc ce       	rjmp	.-648    	; 0x429c <goto_vacpad+0x1e>

00004524 <vacuum_test>:
}


void vacuum_test( void )
{
	if( vacuum_state()  == 1 ) { 
    4524:	4f 99       	sbic	0x09, 7	; 9
    4526:	05 c0       	rjmp	.+10     	; 0x4532 <vacuum_test+0xe>
		
		printPgmString(PSTR("yes\r\n"));
    4528:	86 ef       	ldi	r24, 0xF6	; 246
    452a:	95 e0       	ldi	r25, 0x05	; 5
    452c:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    4530:	08 95       	ret
	} else {
		printPgmString(PSTR("no\r\n"));
    4532:	81 ef       	ldi	r24, 0xF1	; 241
    4534:	95 e0       	ldi	r25, 0x05	; 5
    4536:	0e 94 77 1d 	call	0x3aee	; 0x3aee <printPgmString>
    453a:	08 95       	ret

0000453c <tape_init>:


void tape_init(void)
{
// set the tape knock as an output
	TAPE_DDR |= _BV( TAPE_KNOCK );
    453c:	e7 e0       	ldi	r30, 0x07	; 7
    453e:	f1 e0       	ldi	r31, 0x01	; 1
    4540:	80 81       	ld	r24, Z
    4542:	80 68       	ori	r24, 0x80	; 128
    4544:	80 83       	st	Z, r24
}
    4546:	08 95       	ret

00004548 <putdown_part>:
  *
  */

char putdown_part ( void )
{
	if( is_head_down() ){
    4548:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    454c:	88 23       	and	r24, r24
    454e:	b1 f4       	brne	.+44     	; 0x457c <putdown_part+0x34>
		return GCSTATUS_FAILED_COMMAND;
	}

	// wait til head stops
	while( head_moving() );
    4550:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
    4554:	88 23       	and	r24, r24
    4556:	e1 f7       	brne	.-8      	; 0x4550 <putdown_part+0x8>
    4558:	28 ee       	ldi	r18, 0xE8	; 232
    455a:	33 e0       	ldi	r19, 0x03	; 3
    455c:	40 e9       	ldi	r20, 0x90	; 144
    455e:	51 e0       	ldi	r21, 0x01	; 1
    4560:	ca 01       	movw	r24, r20
    4562:	01 97       	sbiw	r24, 0x01	; 1
    4564:	f1 f7       	brne	.-4      	; 0x4562 <putdown_part+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4566:	21 50       	subi	r18, 0x01	; 1
    4568:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456a:	d1 f7       	brne	.-12     	; 0x4560 <putdown_part+0x18>
	// settle time
	_delay_ms( 100 );


	// check vacuum here
	if( vacuum_state() == 0 ) {
    456c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <vacuum_state>
    4570:	89 2b       	or	r24, r25
    4572:	31 f4       	brne	.+12     	; 0x4580 <putdown_part+0x38>
#ifdef VERBOSE_DEBUG
			printPgmString(PSTR("putdown_part:  part was lost in transit!\r\n"));
#endif
		
		// vacuum off
		vacuum ( 0 );
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
    457c:	85 e0       	ldi	r24, 0x05	; 5
    457e:	08 95       	ret
		return GCSTATUS_FAILED_COMMAND;	
	}


	// push head down
	head_down( 1 );
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    4588:	24 ec       	ldi	r18, 0xC4	; 196
    458a:	39 e0       	ldi	r19, 0x09	; 9
    458c:	40 e9       	ldi	r20, 0x90	; 144
    458e:	51 e0       	ldi	r21, 0x01	; 1
    4590:	ca 01       	movw	r24, r20
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	f1 f7       	brne	.-4      	; 0x4592 <putdown_part+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4596:	21 50       	subi	r18, 0x01	; 1
    4598:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    459a:	d1 f7       	brne	.-12     	; 0x4590 <putdown_part+0x48>

	// settle after head down ( probably doesn't need it  )
	_delay_ms( 250 );

	// vacuum off
	vacuum ( 0 );
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>

	// head up
	head_down ( 0 ) ;
    45a4:	80 e0       	ldi	r24, 0x00	; 0
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    45ac:	80 e0       	ldi	r24, 0x00	; 0

	return GCSTATUS_OK;

}
    45ae:	08 95       	ret

000045b0 <tape_knock>:

#ifdef VERBOSE_DEBUG
	printPgmString(PSTR("tape knock\n\r"));
#endif

	if( gHomed == FALSE ) {
    45b0:	80 91 4f 05 	lds	r24, 0x054F
    45b4:	88 23       	and	r24, r24
    45b6:	41 f1       	breq	.+80     	; 0x4608 <tape_knock+0x58>
   		return ;
   	}


	while( head_moving() );
    45b8:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
    45bc:	88 23       	and	r24, r24
    45be:	e1 f7       	brne	.-8      	; 0x45b8 <tape_knock+0x8>

	set_busy( TRUE );
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <set_busy>

	TAPE_PORT &= ~(_BV( TAPE_KNOCK ));
    45c6:	80 91 08 01 	lds	r24, 0x0108
    45ca:	8f 77       	andi	r24, 0x7F	; 127
    45cc:	80 93 08 01 	sts	0x0108, r24
    45d0:	20 ed       	ldi	r18, 0xD0	; 208
    45d2:	37 e0       	ldi	r19, 0x07	; 7
    45d4:	40 e9       	ldi	r20, 0x90	; 144
    45d6:	51 e0       	ldi	r21, 0x01	; 1
    45d8:	ca 01       	movw	r24, r20
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	f1 f7       	brne	.-4      	; 0x45da <tape_knock+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45de:	21 50       	subi	r18, 0x01	; 1
    45e0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45e2:	d1 f7       	brne	.-12     	; 0x45d8 <tape_knock+0x28>

	_delay_ms( TAPE_KNOCK_SETTLE );

	TAPE_PORT |= _BV( TAPE_KNOCK );
    45e4:	80 91 08 01 	lds	r24, 0x0108
    45e8:	80 68       	ori	r24, 0x80	; 128
    45ea:	80 93 08 01 	sts	0x0108, r24
    45ee:	20 ed       	ldi	r18, 0xD0	; 208
    45f0:	37 e0       	ldi	r19, 0x07	; 7
    45f2:	40 e9       	ldi	r20, 0x90	; 144
    45f4:	51 e0       	ldi	r21, 0x01	; 1
    45f6:	ca 01       	movw	r24, r20
    45f8:	01 97       	sbiw	r24, 0x01	; 1
    45fa:	f1 f7       	brne	.-4      	; 0x45f8 <tape_knock+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fc:	21 50       	subi	r18, 0x01	; 1
    45fe:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4600:	d1 f7       	brne	.-12     	; 0x45f6 <tape_knock+0x46>

	_delay_ms( TAPE_KNOCK_SETTLE );

	 set_busy( FALSE );
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <set_busy>
    4608:	08 95       	ret

0000460a <pickup_part>:
  *
  */


char pickup_part ( void ) 
{
    460a:	8f 92       	push	r8
    460c:	9f 92       	push	r9
    460e:	af 92       	push	r10
    4610:	bf 92       	push	r11
    4612:	cf 92       	push	r12
    4614:	df 92       	push	r13
    4616:	ef 92       	push	r14
    4618:	ff 92       	push	r15
    461a:	0f 93       	push	r16
    461c:	1f 93       	push	r17
    461e:	cf 93       	push	r28
    4620:	df 93       	push	r29
	unsigned char failedCounter;

	// wait til head stops
	while( head_moving() );
    4622:	0e 94 3d 19 	call	0x327a	; 0x327a <head_moving>
    4626:	88 23       	and	r24, r24
    4628:	e1 f7       	brne	.-8      	; 0x4622 <pickup_part+0x18>

	// count number of pickup fails
	failedCounter = 0 ;

	if( is_head_down() ){
    462a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <is_head_down>
    462e:	88 23       	and	r24, r24
    4630:	09 f0       	breq	.+2      	; 0x4634 <pickup_part+0x2a>
    4632:	59 c0       	rjmp	.+178    	; 0x46e6 <pickup_part+0xdc>
    4634:	84 ef       	ldi	r24, 0xF4	; 244
    4636:	88 2e       	mov	r8, r24
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	98 2e       	mov	r9, r24
    463c:	c0 e9       	ldi	r28, 0x90	; 144
    463e:	d1 e0       	ldi	r29, 0x01	; 1
	}

	for(;;) {

		// advance part, waits til head has done
		tape_knock();
    4640:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <tape_knock>

		// vacuum on
		vacuum ( 1 );
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>

		// push head down
		head_down( 1 );
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>
    4654:	28 e8       	ldi	r18, 0x88	; 136
    4656:	33 e1       	ldi	r19, 0x13	; 19
    4658:	ce 01       	movw	r24, r28
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	f1 f7       	brne	.-4      	; 0x465a <pickup_part+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465e:	21 50       	subi	r18, 0x01	; 1
    4660:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4662:	d1 f7       	brne	.-12     	; 0x4658 <pickup_part+0x4e>

		//settle (probably doesn't need this)
		_delay_ms( 500 );

		// head up
		head_down ( 0 ) ;
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <head_down>

		// check vacuum line...
		if( vacuum_state() == 0 ) {
    466c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <vacuum_state>
    4670:	89 2b       	or	r24, r25
    4672:	09 f0       	breq	.+2      	; 0x4676 <pickup_part+0x6c>
    4674:	5c c0       	rjmp	.+184    	; 0x472e <pickup_part+0x124>

			// vacuum off
			vacuum ( 0 );
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <vacuum>
#endif
		
			// failed to pickup a part
			failedCounter ++ ;

			if( failedCounter == 4 ) {
    467e:	90 ed       	ldi	r25, 0xD0	; 208
    4680:	89 16       	cp	r8, r25
    4682:	97 e0       	ldi	r25, 0x07	; 7
    4684:	99 06       	cpc	r9, r25
    4686:	79 f1       	breq	.+94     	; 0x46e6 <pickup_part+0xdc>
				return GCSTATUS_FAILED_COMMAND;

			}

			// delay 500ms ( based on counter ? )  let the air compressor catch up, as that may be the problem
			_delay_ms( 500 * failedCounter );
    4688:	b4 01       	movw	r22, r8
    468a:	88 27       	eor	r24, r24
    468c:	77 fd       	sbrc	r23, 7
    468e:	80 95       	com	r24
    4690:	98 2f       	mov	r25, r24
    4692:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatsisf>
    4696:	5b 01       	movw	r10, r22
    4698:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	4a e7       	ldi	r20, 0x7A	; 122
    46a0:	55 e4       	ldi	r21, 0x45	; 69
    46a2:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    46a6:	7b 01       	movw	r14, r22
    46a8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	40 e8       	ldi	r20, 0x80	; 128
    46b0:	5f e3       	ldi	r21, 0x3F	; 63
    46b2:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
    46b6:	88 23       	and	r24, r24
    46b8:	bc f1       	brlt	.+110    	; 0x4728 <pickup_part+0x11e>
		__ticks = 1;
	else if (__tmp > 65535)
    46ba:	c8 01       	movw	r24, r16
    46bc:	b7 01       	movw	r22, r14
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	3f ef       	ldi	r19, 0xFF	; 255
    46c2:	4f e7       	ldi	r20, 0x7F	; 127
    46c4:	57 e4       	ldi	r21, 0x47	; 71
    46c6:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__gesf2>
    46ca:	18 16       	cp	r1, r24
    46cc:	d4 f0       	brlt	.+52     	; 0x4702 <pickup_part+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ce:	c8 01       	movw	r24, r16
    46d0:	b7 01       	movw	r22, r14
    46d2:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    46d6:	cb 01       	movw	r24, r22
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	f1 f7       	brne	.-4      	; 0x46d8 <pickup_part+0xce>
	while( head_moving() );

	// count number of pickup fails
	failedCounter = 0 ;

	if( is_head_down() ){
    46dc:	84 ef       	ldi	r24, 0xF4	; 244
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	88 0e       	add	r8, r24
    46e2:	99 1e       	adc	r9, r25
    46e4:	ad cf       	rjmp	.-166    	; 0x4640 <pickup_part+0x36>
    46e6:	85 e0       	ldi	r24, 0x05	; 5

	}

	return GCSTATUS_OK;

}
    46e8:	df 91       	pop	r29
    46ea:	cf 91       	pop	r28
    46ec:	1f 91       	pop	r17
    46ee:	0f 91       	pop	r16
    46f0:	ff 90       	pop	r15
    46f2:	ef 90       	pop	r14
    46f4:	df 90       	pop	r13
    46f6:	cf 90       	pop	r12
    46f8:	bf 90       	pop	r11
    46fa:	af 90       	pop	r10
    46fc:	9f 90       	pop	r9
    46fe:	8f 90       	pop	r8
    4700:	08 95       	ret
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4702:	c6 01       	movw	r24, r12
    4704:	b5 01       	movw	r22, r10
    4706:	20 e0       	ldi	r18, 0x00	; 0
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	40 e2       	ldi	r20, 0x20	; 32
    470c:	51 e4       	ldi	r21, 0x41	; 65
    470e:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    4712:	0e 94 aa 24 	call	0x4954	; 0x4954 <__fixunssfsi>
    4716:	cb 01       	movw	r24, r22
		while(__ticks)
    4718:	67 2b       	or	r22, r23
    471a:	01 f3       	breq	.-64     	; 0x46dc <pickup_part+0xd2>
    471c:	fe 01       	movw	r30, r28
    471e:	31 97       	sbiw	r30, 0x01	; 1
    4720:	f1 f7       	brne	.-4      	; 0x471e <pickup_part+0x114>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4722:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4724:	d9 f7       	brne	.-10     	; 0x471c <pickup_part+0x112>
    4726:	da cf       	rjmp	.-76     	; 0x46dc <pickup_part+0xd2>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    4728:	61 e0       	ldi	r22, 0x01	; 1
    472a:	70 e0       	ldi	r23, 0x00	; 0
    472c:	d4 cf       	rjmp	.-88     	; 0x46d6 <pickup_part+0xcc>

		// head up
		head_down ( 0 ) ;

		// check vacuum line...
		if( vacuum_state() == 0 ) {
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	db cf       	rjmp	.-74     	; 0x46e8 <pickup_part+0xde>

00004732 <__subsf3>:
    4732:	50 58       	subi	r21, 0x80	; 128

00004734 <__addsf3>:
    4734:	bb 27       	eor	r27, r27
    4736:	aa 27       	eor	r26, r26
    4738:	0e d0       	rcall	.+28     	; 0x4756 <__addsf3x>
    473a:	11 c2       	rjmp	.+1058   	; 0x4b5e <__fp_round>
    473c:	02 d2       	rcall	.+1028   	; 0x4b42 <__fp_pscA>
    473e:	30 f0       	brcs	.+12     	; 0x474c <__addsf3+0x18>
    4740:	07 d2       	rcall	.+1038   	; 0x4b50 <__fp_pscB>
    4742:	20 f0       	brcs	.+8      	; 0x474c <__addsf3+0x18>
    4744:	31 f4       	brne	.+12     	; 0x4752 <__addsf3+0x1e>
    4746:	9f 3f       	cpi	r25, 0xFF	; 255
    4748:	11 f4       	brne	.+4      	; 0x474e <__addsf3+0x1a>
    474a:	1e f4       	brtc	.+6      	; 0x4752 <__addsf3+0x1e>
    474c:	d2 c1       	rjmp	.+932    	; 0x4af2 <__fp_nan>
    474e:	0e f4       	brtc	.+2      	; 0x4752 <__addsf3+0x1e>
    4750:	e0 95       	com	r30
    4752:	e7 fb       	bst	r30, 7
    4754:	9f c1       	rjmp	.+830    	; 0x4a94 <__fp_inf>

00004756 <__addsf3x>:
    4756:	e9 2f       	mov	r30, r25
    4758:	13 d2       	rcall	.+1062   	; 0x4b80 <__fp_split3>
    475a:	80 f3       	brcs	.-32     	; 0x473c <__addsf3+0x8>
    475c:	ba 17       	cp	r27, r26
    475e:	62 07       	cpc	r22, r18
    4760:	73 07       	cpc	r23, r19
    4762:	84 07       	cpc	r24, r20
    4764:	95 07       	cpc	r25, r21
    4766:	18 f0       	brcs	.+6      	; 0x476e <__addsf3x+0x18>
    4768:	71 f4       	brne	.+28     	; 0x4786 <__addsf3x+0x30>
    476a:	9e f5       	brtc	.+102    	; 0x47d2 <__addsf3x+0x7c>
    476c:	42 c2       	rjmp	.+1156   	; 0x4bf2 <__fp_zero>
    476e:	0e f4       	brtc	.+2      	; 0x4772 <__addsf3x+0x1c>
    4770:	e0 95       	com	r30
    4772:	0b 2e       	mov	r0, r27
    4774:	ba 2f       	mov	r27, r26
    4776:	a0 2d       	mov	r26, r0
    4778:	0b 01       	movw	r0, r22
    477a:	b9 01       	movw	r22, r18
    477c:	90 01       	movw	r18, r0
    477e:	0c 01       	movw	r0, r24
    4780:	ca 01       	movw	r24, r20
    4782:	a0 01       	movw	r20, r0
    4784:	11 24       	eor	r1, r1
    4786:	ff 27       	eor	r31, r31
    4788:	59 1b       	sub	r21, r25
    478a:	99 f0       	breq	.+38     	; 0x47b2 <__addsf3x+0x5c>
    478c:	59 3f       	cpi	r21, 0xF9	; 249
    478e:	50 f4       	brcc	.+20     	; 0x47a4 <__addsf3x+0x4e>
    4790:	50 3e       	cpi	r21, 0xE0	; 224
    4792:	68 f1       	brcs	.+90     	; 0x47ee <__addsf3x+0x98>
    4794:	1a 16       	cp	r1, r26
    4796:	f0 40       	sbci	r31, 0x00	; 0
    4798:	a2 2f       	mov	r26, r18
    479a:	23 2f       	mov	r18, r19
    479c:	34 2f       	mov	r19, r20
    479e:	44 27       	eor	r20, r20
    47a0:	58 5f       	subi	r21, 0xF8	; 248
    47a2:	f3 cf       	rjmp	.-26     	; 0x478a <__addsf3x+0x34>
    47a4:	46 95       	lsr	r20
    47a6:	37 95       	ror	r19
    47a8:	27 95       	ror	r18
    47aa:	a7 95       	ror	r26
    47ac:	f0 40       	sbci	r31, 0x00	; 0
    47ae:	53 95       	inc	r21
    47b0:	c9 f7       	brne	.-14     	; 0x47a4 <__addsf3x+0x4e>
    47b2:	7e f4       	brtc	.+30     	; 0x47d2 <__addsf3x+0x7c>
    47b4:	1f 16       	cp	r1, r31
    47b6:	ba 0b       	sbc	r27, r26
    47b8:	62 0b       	sbc	r22, r18
    47ba:	73 0b       	sbc	r23, r19
    47bc:	84 0b       	sbc	r24, r20
    47be:	ba f0       	brmi	.+46     	; 0x47ee <__addsf3x+0x98>
    47c0:	91 50       	subi	r25, 0x01	; 1
    47c2:	a1 f0       	breq	.+40     	; 0x47ec <__addsf3x+0x96>
    47c4:	ff 0f       	add	r31, r31
    47c6:	bb 1f       	adc	r27, r27
    47c8:	66 1f       	adc	r22, r22
    47ca:	77 1f       	adc	r23, r23
    47cc:	88 1f       	adc	r24, r24
    47ce:	c2 f7       	brpl	.-16     	; 0x47c0 <__addsf3x+0x6a>
    47d0:	0e c0       	rjmp	.+28     	; 0x47ee <__addsf3x+0x98>
    47d2:	ba 0f       	add	r27, r26
    47d4:	62 1f       	adc	r22, r18
    47d6:	73 1f       	adc	r23, r19
    47d8:	84 1f       	adc	r24, r20
    47da:	48 f4       	brcc	.+18     	; 0x47ee <__addsf3x+0x98>
    47dc:	87 95       	ror	r24
    47de:	77 95       	ror	r23
    47e0:	67 95       	ror	r22
    47e2:	b7 95       	ror	r27
    47e4:	f7 95       	ror	r31
    47e6:	9e 3f       	cpi	r25, 0xFE	; 254
    47e8:	08 f0       	brcs	.+2      	; 0x47ec <__addsf3x+0x96>
    47ea:	b3 cf       	rjmp	.-154    	; 0x4752 <__addsf3+0x1e>
    47ec:	93 95       	inc	r25
    47ee:	88 0f       	add	r24, r24
    47f0:	08 f0       	brcs	.+2      	; 0x47f4 <__addsf3x+0x9e>
    47f2:	99 27       	eor	r25, r25
    47f4:	ee 0f       	add	r30, r30
    47f6:	97 95       	ror	r25
    47f8:	87 95       	ror	r24
    47fa:	08 95       	ret

000047fc <atan>:
    47fc:	df 93       	push	r29
    47fe:	dd 27       	eor	r29, r29
    4800:	b9 2f       	mov	r27, r25
    4802:	bf 77       	andi	r27, 0x7F	; 127
    4804:	40 e8       	ldi	r20, 0x80	; 128
    4806:	5f e3       	ldi	r21, 0x3F	; 63
    4808:	16 16       	cp	r1, r22
    480a:	17 06       	cpc	r1, r23
    480c:	48 07       	cpc	r20, r24
    480e:	5b 07       	cpc	r21, r27
    4810:	10 f4       	brcc	.+4      	; 0x4816 <atan+0x1a>
    4812:	d9 2f       	mov	r29, r25
    4814:	f9 d1       	rcall	.+1010   	; 0x4c08 <inverse>
    4816:	9f 93       	push	r25
    4818:	8f 93       	push	r24
    481a:	7f 93       	push	r23
    481c:	6f 93       	push	r22
    481e:	23 d3       	rcall	.+1606   	; 0x4e66 <square>
    4820:	ec e1       	ldi	r30, 0x1C	; 28
    4822:	f2 e0       	ldi	r31, 0x02	; 2
    4824:	69 d1       	rcall	.+722    	; 0x4af8 <__fp_powser>
    4826:	9b d1       	rcall	.+822    	; 0x4b5e <__fp_round>
    4828:	2f 91       	pop	r18
    482a:	3f 91       	pop	r19
    482c:	4f 91       	pop	r20
    482e:	5f 91       	pop	r21
    4830:	61 d2       	rcall	.+1218   	; 0x4cf4 <__mulsf3x>
    4832:	dd 23       	and	r29, r29
    4834:	49 f0       	breq	.+18     	; 0x4848 <atan+0x4c>
    4836:	90 58       	subi	r25, 0x80	; 128
    4838:	a2 ea       	ldi	r26, 0xA2	; 162
    483a:	2a ed       	ldi	r18, 0xDA	; 218
    483c:	3f e0       	ldi	r19, 0x0F	; 15
    483e:	49 ec       	ldi	r20, 0xC9	; 201
    4840:	5f e3       	ldi	r21, 0x3F	; 63
    4842:	d0 78       	andi	r29, 0x80	; 128
    4844:	5d 27       	eor	r21, r29
    4846:	87 df       	rcall	.-242    	; 0x4756 <__addsf3x>
    4848:	df 91       	pop	r29
    484a:	89 c1       	rjmp	.+786    	; 0x4b5e <__fp_round>

0000484c <ceil>:
    484c:	bb d1       	rcall	.+886    	; 0x4bc4 <__fp_trunc>
    484e:	80 f0       	brcs	.+32     	; 0x4870 <ceil+0x24>
    4850:	9f 37       	cpi	r25, 0x7F	; 127
    4852:	40 f4       	brcc	.+16     	; 0x4864 <ceil+0x18>
    4854:	91 11       	cpse	r25, r1
    4856:	0e f4       	brtc	.+2      	; 0x485a <ceil+0xe>
    4858:	cd c1       	rjmp	.+922    	; 0x4bf4 <__fp_szero>
    485a:	60 e0       	ldi	r22, 0x00	; 0
    485c:	70 e0       	ldi	r23, 0x00	; 0
    485e:	80 e8       	ldi	r24, 0x80	; 128
    4860:	9f e3       	ldi	r25, 0x3F	; 63
    4862:	08 95       	ret
    4864:	26 f0       	brts	.+8      	; 0x486e <ceil+0x22>
    4866:	1b 16       	cp	r1, r27
    4868:	61 1d       	adc	r22, r1
    486a:	71 1d       	adc	r23, r1
    486c:	81 1d       	adc	r24, r1
    486e:	18 c1       	rjmp	.+560    	; 0x4aa0 <__fp_mintl>
    4870:	32 c1       	rjmp	.+612    	; 0x4ad6 <__fp_mpack>

00004872 <__cmpsf2>:
    4872:	ec d0       	rcall	.+472    	; 0x4a4c <__fp_cmp>
    4874:	08 f4       	brcc	.+2      	; 0x4878 <__cmpsf2+0x6>
    4876:	81 e0       	ldi	r24, 0x01	; 1
    4878:	08 95       	ret

0000487a <__divsf3>:
    487a:	0c d0       	rcall	.+24     	; 0x4894 <__divsf3x>
    487c:	70 c1       	rjmp	.+736    	; 0x4b5e <__fp_round>
    487e:	68 d1       	rcall	.+720    	; 0x4b50 <__fp_pscB>
    4880:	40 f0       	brcs	.+16     	; 0x4892 <__divsf3+0x18>
    4882:	5f d1       	rcall	.+702    	; 0x4b42 <__fp_pscA>
    4884:	30 f0       	brcs	.+12     	; 0x4892 <__divsf3+0x18>
    4886:	21 f4       	brne	.+8      	; 0x4890 <__divsf3+0x16>
    4888:	5f 3f       	cpi	r21, 0xFF	; 255
    488a:	19 f0       	breq	.+6      	; 0x4892 <__divsf3+0x18>
    488c:	03 c1       	rjmp	.+518    	; 0x4a94 <__fp_inf>
    488e:	51 11       	cpse	r21, r1
    4890:	b1 c1       	rjmp	.+866    	; 0x4bf4 <__fp_szero>
    4892:	2f c1       	rjmp	.+606    	; 0x4af2 <__fp_nan>

00004894 <__divsf3x>:
    4894:	75 d1       	rcall	.+746    	; 0x4b80 <__fp_split3>
    4896:	98 f3       	brcs	.-26     	; 0x487e <__divsf3+0x4>

00004898 <__divsf3_pse>:
    4898:	99 23       	and	r25, r25
    489a:	c9 f3       	breq	.-14     	; 0x488e <__divsf3+0x14>
    489c:	55 23       	and	r21, r21
    489e:	b1 f3       	breq	.-20     	; 0x488c <__divsf3+0x12>
    48a0:	95 1b       	sub	r25, r21
    48a2:	55 0b       	sbc	r21, r21
    48a4:	bb 27       	eor	r27, r27
    48a6:	aa 27       	eor	r26, r26
    48a8:	62 17       	cp	r22, r18
    48aa:	73 07       	cpc	r23, r19
    48ac:	84 07       	cpc	r24, r20
    48ae:	38 f0       	brcs	.+14     	; 0x48be <__divsf3_pse+0x26>
    48b0:	9f 5f       	subi	r25, 0xFF	; 255
    48b2:	5f 4f       	sbci	r21, 0xFF	; 255
    48b4:	22 0f       	add	r18, r18
    48b6:	33 1f       	adc	r19, r19
    48b8:	44 1f       	adc	r20, r20
    48ba:	aa 1f       	adc	r26, r26
    48bc:	a9 f3       	breq	.-22     	; 0x48a8 <__divsf3_pse+0x10>
    48be:	33 d0       	rcall	.+102    	; 0x4926 <__divsf3_pse+0x8e>
    48c0:	0e 2e       	mov	r0, r30
    48c2:	3a f0       	brmi	.+14     	; 0x48d2 <__divsf3_pse+0x3a>
    48c4:	e0 e8       	ldi	r30, 0x80	; 128
    48c6:	30 d0       	rcall	.+96     	; 0x4928 <__divsf3_pse+0x90>
    48c8:	91 50       	subi	r25, 0x01	; 1
    48ca:	50 40       	sbci	r21, 0x00	; 0
    48cc:	e6 95       	lsr	r30
    48ce:	00 1c       	adc	r0, r0
    48d0:	ca f7       	brpl	.-14     	; 0x48c4 <__divsf3_pse+0x2c>
    48d2:	29 d0       	rcall	.+82     	; 0x4926 <__divsf3_pse+0x8e>
    48d4:	fe 2f       	mov	r31, r30
    48d6:	27 d0       	rcall	.+78     	; 0x4926 <__divsf3_pse+0x8e>
    48d8:	66 0f       	add	r22, r22
    48da:	77 1f       	adc	r23, r23
    48dc:	88 1f       	adc	r24, r24
    48de:	bb 1f       	adc	r27, r27
    48e0:	26 17       	cp	r18, r22
    48e2:	37 07       	cpc	r19, r23
    48e4:	48 07       	cpc	r20, r24
    48e6:	ab 07       	cpc	r26, r27
    48e8:	b0 e8       	ldi	r27, 0x80	; 128
    48ea:	09 f0       	breq	.+2      	; 0x48ee <__divsf3_pse+0x56>
    48ec:	bb 0b       	sbc	r27, r27
    48ee:	80 2d       	mov	r24, r0
    48f0:	bf 01       	movw	r22, r30
    48f2:	ff 27       	eor	r31, r31
    48f4:	93 58       	subi	r25, 0x83	; 131
    48f6:	5f 4f       	sbci	r21, 0xFF	; 255
    48f8:	2a f0       	brmi	.+10     	; 0x4904 <__divsf3_pse+0x6c>
    48fa:	9e 3f       	cpi	r25, 0xFE	; 254
    48fc:	51 05       	cpc	r21, r1
    48fe:	68 f0       	brcs	.+26     	; 0x491a <__divsf3_pse+0x82>
    4900:	c9 c0       	rjmp	.+402    	; 0x4a94 <__fp_inf>
    4902:	78 c1       	rjmp	.+752    	; 0x4bf4 <__fp_szero>
    4904:	5f 3f       	cpi	r21, 0xFF	; 255
    4906:	ec f3       	brlt	.-6      	; 0x4902 <__divsf3_pse+0x6a>
    4908:	98 3e       	cpi	r25, 0xE8	; 232
    490a:	dc f3       	brlt	.-10     	; 0x4902 <__divsf3_pse+0x6a>
    490c:	86 95       	lsr	r24
    490e:	77 95       	ror	r23
    4910:	67 95       	ror	r22
    4912:	b7 95       	ror	r27
    4914:	f7 95       	ror	r31
    4916:	9f 5f       	subi	r25, 0xFF	; 255
    4918:	c9 f7       	brne	.-14     	; 0x490c <__divsf3_pse+0x74>
    491a:	88 0f       	add	r24, r24
    491c:	91 1d       	adc	r25, r1
    491e:	96 95       	lsr	r25
    4920:	87 95       	ror	r24
    4922:	97 f9       	bld	r25, 7
    4924:	08 95       	ret
    4926:	e1 e0       	ldi	r30, 0x01	; 1
    4928:	66 0f       	add	r22, r22
    492a:	77 1f       	adc	r23, r23
    492c:	88 1f       	adc	r24, r24
    492e:	bb 1f       	adc	r27, r27
    4930:	62 17       	cp	r22, r18
    4932:	73 07       	cpc	r23, r19
    4934:	84 07       	cpc	r24, r20
    4936:	ba 07       	cpc	r27, r26
    4938:	20 f0       	brcs	.+8      	; 0x4942 <__divsf3_pse+0xaa>
    493a:	62 1b       	sub	r22, r18
    493c:	73 0b       	sbc	r23, r19
    493e:	84 0b       	sbc	r24, r20
    4940:	ba 0b       	sbc	r27, r26
    4942:	ee 1f       	adc	r30, r30
    4944:	88 f7       	brcc	.-30     	; 0x4928 <__divsf3_pse+0x90>
    4946:	e0 95       	com	r30
    4948:	08 95       	ret

0000494a <__fixsfsi>:
    494a:	04 d0       	rcall	.+8      	; 0x4954 <__fixunssfsi>
    494c:	68 94       	set
    494e:	b1 11       	cpse	r27, r1
    4950:	51 c1       	rjmp	.+674    	; 0x4bf4 <__fp_szero>
    4952:	08 95       	ret

00004954 <__fixunssfsi>:
    4954:	1d d1       	rcall	.+570    	; 0x4b90 <__fp_splitA>
    4956:	88 f0       	brcs	.+34     	; 0x497a <__fixunssfsi+0x26>
    4958:	9f 57       	subi	r25, 0x7F	; 127
    495a:	90 f0       	brcs	.+36     	; 0x4980 <__fixunssfsi+0x2c>
    495c:	b9 2f       	mov	r27, r25
    495e:	99 27       	eor	r25, r25
    4960:	b7 51       	subi	r27, 0x17	; 23
    4962:	a0 f0       	brcs	.+40     	; 0x498c <__fixunssfsi+0x38>
    4964:	d1 f0       	breq	.+52     	; 0x499a <__fixunssfsi+0x46>
    4966:	66 0f       	add	r22, r22
    4968:	77 1f       	adc	r23, r23
    496a:	88 1f       	adc	r24, r24
    496c:	99 1f       	adc	r25, r25
    496e:	1a f0       	brmi	.+6      	; 0x4976 <__fixunssfsi+0x22>
    4970:	ba 95       	dec	r27
    4972:	c9 f7       	brne	.-14     	; 0x4966 <__fixunssfsi+0x12>
    4974:	12 c0       	rjmp	.+36     	; 0x499a <__fixunssfsi+0x46>
    4976:	b1 30       	cpi	r27, 0x01	; 1
    4978:	81 f0       	breq	.+32     	; 0x499a <__fixunssfsi+0x46>
    497a:	3b d1       	rcall	.+630    	; 0x4bf2 <__fp_zero>
    497c:	b1 e0       	ldi	r27, 0x01	; 1
    497e:	08 95       	ret
    4980:	38 c1       	rjmp	.+624    	; 0x4bf2 <__fp_zero>
    4982:	67 2f       	mov	r22, r23
    4984:	78 2f       	mov	r23, r24
    4986:	88 27       	eor	r24, r24
    4988:	b8 5f       	subi	r27, 0xF8	; 248
    498a:	39 f0       	breq	.+14     	; 0x499a <__fixunssfsi+0x46>
    498c:	b9 3f       	cpi	r27, 0xF9	; 249
    498e:	cc f3       	brlt	.-14     	; 0x4982 <__fixunssfsi+0x2e>
    4990:	86 95       	lsr	r24
    4992:	77 95       	ror	r23
    4994:	67 95       	ror	r22
    4996:	b3 95       	inc	r27
    4998:	d9 f7       	brne	.-10     	; 0x4990 <__fixunssfsi+0x3c>
    499a:	3e f4       	brtc	.+14     	; 0x49aa <__fixunssfsi+0x56>
    499c:	90 95       	com	r25
    499e:	80 95       	com	r24
    49a0:	70 95       	com	r23
    49a2:	61 95       	neg	r22
    49a4:	7f 4f       	sbci	r23, 0xFF	; 255
    49a6:	8f 4f       	sbci	r24, 0xFF	; 255
    49a8:	9f 4f       	sbci	r25, 0xFF	; 255
    49aa:	08 95       	ret

000049ac <__floatunsisf>:
    49ac:	e8 94       	clt
    49ae:	09 c0       	rjmp	.+18     	; 0x49c2 <__floatsisf+0x12>

000049b0 <__floatsisf>:
    49b0:	97 fb       	bst	r25, 7
    49b2:	3e f4       	brtc	.+14     	; 0x49c2 <__floatsisf+0x12>
    49b4:	90 95       	com	r25
    49b6:	80 95       	com	r24
    49b8:	70 95       	com	r23
    49ba:	61 95       	neg	r22
    49bc:	7f 4f       	sbci	r23, 0xFF	; 255
    49be:	8f 4f       	sbci	r24, 0xFF	; 255
    49c0:	9f 4f       	sbci	r25, 0xFF	; 255
    49c2:	99 23       	and	r25, r25
    49c4:	a9 f0       	breq	.+42     	; 0x49f0 <__floatsisf+0x40>
    49c6:	f9 2f       	mov	r31, r25
    49c8:	96 e9       	ldi	r25, 0x96	; 150
    49ca:	bb 27       	eor	r27, r27
    49cc:	93 95       	inc	r25
    49ce:	f6 95       	lsr	r31
    49d0:	87 95       	ror	r24
    49d2:	77 95       	ror	r23
    49d4:	67 95       	ror	r22
    49d6:	b7 95       	ror	r27
    49d8:	f1 11       	cpse	r31, r1
    49da:	f8 cf       	rjmp	.-16     	; 0x49cc <__floatsisf+0x1c>
    49dc:	fa f4       	brpl	.+62     	; 0x4a1c <__floatsisf+0x6c>
    49de:	bb 0f       	add	r27, r27
    49e0:	11 f4       	brne	.+4      	; 0x49e6 <__floatsisf+0x36>
    49e2:	60 ff       	sbrs	r22, 0
    49e4:	1b c0       	rjmp	.+54     	; 0x4a1c <__floatsisf+0x6c>
    49e6:	6f 5f       	subi	r22, 0xFF	; 255
    49e8:	7f 4f       	sbci	r23, 0xFF	; 255
    49ea:	8f 4f       	sbci	r24, 0xFF	; 255
    49ec:	9f 4f       	sbci	r25, 0xFF	; 255
    49ee:	16 c0       	rjmp	.+44     	; 0x4a1c <__floatsisf+0x6c>
    49f0:	88 23       	and	r24, r24
    49f2:	11 f0       	breq	.+4      	; 0x49f8 <__floatsisf+0x48>
    49f4:	96 e9       	ldi	r25, 0x96	; 150
    49f6:	11 c0       	rjmp	.+34     	; 0x4a1a <__floatsisf+0x6a>
    49f8:	77 23       	and	r23, r23
    49fa:	21 f0       	breq	.+8      	; 0x4a04 <__floatsisf+0x54>
    49fc:	9e e8       	ldi	r25, 0x8E	; 142
    49fe:	87 2f       	mov	r24, r23
    4a00:	76 2f       	mov	r23, r22
    4a02:	05 c0       	rjmp	.+10     	; 0x4a0e <__floatsisf+0x5e>
    4a04:	66 23       	and	r22, r22
    4a06:	71 f0       	breq	.+28     	; 0x4a24 <__floatsisf+0x74>
    4a08:	96 e8       	ldi	r25, 0x86	; 134
    4a0a:	86 2f       	mov	r24, r22
    4a0c:	70 e0       	ldi	r23, 0x00	; 0
    4a0e:	60 e0       	ldi	r22, 0x00	; 0
    4a10:	2a f0       	brmi	.+10     	; 0x4a1c <__floatsisf+0x6c>
    4a12:	9a 95       	dec	r25
    4a14:	66 0f       	add	r22, r22
    4a16:	77 1f       	adc	r23, r23
    4a18:	88 1f       	adc	r24, r24
    4a1a:	da f7       	brpl	.-10     	; 0x4a12 <__floatsisf+0x62>
    4a1c:	88 0f       	add	r24, r24
    4a1e:	96 95       	lsr	r25
    4a20:	87 95       	ror	r24
    4a22:	97 f9       	bld	r25, 7
    4a24:	08 95       	ret

00004a26 <floor>:
    4a26:	ce d0       	rcall	.+412    	; 0x4bc4 <__fp_trunc>
    4a28:	80 f0       	brcs	.+32     	; 0x4a4a <floor+0x24>
    4a2a:	9f 37       	cpi	r25, 0x7F	; 127
    4a2c:	40 f4       	brcc	.+16     	; 0x4a3e <floor+0x18>
    4a2e:	91 11       	cpse	r25, r1
    4a30:	0e f0       	brts	.+2      	; 0x4a34 <floor+0xe>
    4a32:	e0 c0       	rjmp	.+448    	; 0x4bf4 <__fp_szero>
    4a34:	60 e0       	ldi	r22, 0x00	; 0
    4a36:	70 e0       	ldi	r23, 0x00	; 0
    4a38:	80 e8       	ldi	r24, 0x80	; 128
    4a3a:	9f eb       	ldi	r25, 0xBF	; 191
    4a3c:	08 95       	ret
    4a3e:	26 f4       	brtc	.+8      	; 0x4a48 <floor+0x22>
    4a40:	1b 16       	cp	r1, r27
    4a42:	61 1d       	adc	r22, r1
    4a44:	71 1d       	adc	r23, r1
    4a46:	81 1d       	adc	r24, r1
    4a48:	2b c0       	rjmp	.+86     	; 0x4aa0 <__fp_mintl>
    4a4a:	45 c0       	rjmp	.+138    	; 0x4ad6 <__fp_mpack>

00004a4c <__fp_cmp>:
    4a4c:	99 0f       	add	r25, r25
    4a4e:	00 08       	sbc	r0, r0
    4a50:	55 0f       	add	r21, r21
    4a52:	aa 0b       	sbc	r26, r26
    4a54:	e0 e8       	ldi	r30, 0x80	; 128
    4a56:	fe ef       	ldi	r31, 0xFE	; 254
    4a58:	16 16       	cp	r1, r22
    4a5a:	17 06       	cpc	r1, r23
    4a5c:	e8 07       	cpc	r30, r24
    4a5e:	f9 07       	cpc	r31, r25
    4a60:	c0 f0       	brcs	.+48     	; 0x4a92 <__fp_cmp+0x46>
    4a62:	12 16       	cp	r1, r18
    4a64:	13 06       	cpc	r1, r19
    4a66:	e4 07       	cpc	r30, r20
    4a68:	f5 07       	cpc	r31, r21
    4a6a:	98 f0       	brcs	.+38     	; 0x4a92 <__fp_cmp+0x46>
    4a6c:	62 1b       	sub	r22, r18
    4a6e:	73 0b       	sbc	r23, r19
    4a70:	84 0b       	sbc	r24, r20
    4a72:	95 0b       	sbc	r25, r21
    4a74:	39 f4       	brne	.+14     	; 0x4a84 <__fp_cmp+0x38>
    4a76:	0a 26       	eor	r0, r26
    4a78:	61 f0       	breq	.+24     	; 0x4a92 <__fp_cmp+0x46>
    4a7a:	23 2b       	or	r18, r19
    4a7c:	24 2b       	or	r18, r20
    4a7e:	25 2b       	or	r18, r21
    4a80:	21 f4       	brne	.+8      	; 0x4a8a <__fp_cmp+0x3e>
    4a82:	08 95       	ret
    4a84:	0a 26       	eor	r0, r26
    4a86:	09 f4       	brne	.+2      	; 0x4a8a <__fp_cmp+0x3e>
    4a88:	a1 40       	sbci	r26, 0x01	; 1
    4a8a:	a6 95       	lsr	r26
    4a8c:	8f ef       	ldi	r24, 0xFF	; 255
    4a8e:	81 1d       	adc	r24, r1
    4a90:	81 1d       	adc	r24, r1
    4a92:	08 95       	ret

00004a94 <__fp_inf>:
    4a94:	97 f9       	bld	r25, 7
    4a96:	9f 67       	ori	r25, 0x7F	; 127
    4a98:	80 e8       	ldi	r24, 0x80	; 128
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	08 95       	ret

00004aa0 <__fp_mintl>:
    4aa0:	88 23       	and	r24, r24
    4aa2:	71 f4       	brne	.+28     	; 0x4ac0 <__fp_mintl+0x20>
    4aa4:	77 23       	and	r23, r23
    4aa6:	21 f0       	breq	.+8      	; 0x4ab0 <__fp_mintl+0x10>
    4aa8:	98 50       	subi	r25, 0x08	; 8
    4aaa:	87 2b       	or	r24, r23
    4aac:	76 2f       	mov	r23, r22
    4aae:	07 c0       	rjmp	.+14     	; 0x4abe <__fp_mintl+0x1e>
    4ab0:	66 23       	and	r22, r22
    4ab2:	11 f4       	brne	.+4      	; 0x4ab8 <__fp_mintl+0x18>
    4ab4:	99 27       	eor	r25, r25
    4ab6:	0d c0       	rjmp	.+26     	; 0x4ad2 <__fp_mintl+0x32>
    4ab8:	90 51       	subi	r25, 0x10	; 16
    4aba:	86 2b       	or	r24, r22
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	60 e0       	ldi	r22, 0x00	; 0
    4ac0:	2a f0       	brmi	.+10     	; 0x4acc <__fp_mintl+0x2c>
    4ac2:	9a 95       	dec	r25
    4ac4:	66 0f       	add	r22, r22
    4ac6:	77 1f       	adc	r23, r23
    4ac8:	88 1f       	adc	r24, r24
    4aca:	da f7       	brpl	.-10     	; 0x4ac2 <__fp_mintl+0x22>
    4acc:	88 0f       	add	r24, r24
    4ace:	96 95       	lsr	r25
    4ad0:	87 95       	ror	r24
    4ad2:	97 f9       	bld	r25, 7
    4ad4:	08 95       	ret

00004ad6 <__fp_mpack>:
    4ad6:	9f 3f       	cpi	r25, 0xFF	; 255
    4ad8:	31 f0       	breq	.+12     	; 0x4ae6 <__fp_mpack_finite+0xc>

00004ada <__fp_mpack_finite>:
    4ada:	91 50       	subi	r25, 0x01	; 1
    4adc:	20 f4       	brcc	.+8      	; 0x4ae6 <__fp_mpack_finite+0xc>
    4ade:	87 95       	ror	r24
    4ae0:	77 95       	ror	r23
    4ae2:	67 95       	ror	r22
    4ae4:	b7 95       	ror	r27
    4ae6:	88 0f       	add	r24, r24
    4ae8:	91 1d       	adc	r25, r1
    4aea:	96 95       	lsr	r25
    4aec:	87 95       	ror	r24
    4aee:	97 f9       	bld	r25, 7
    4af0:	08 95       	ret

00004af2 <__fp_nan>:
    4af2:	9f ef       	ldi	r25, 0xFF	; 255
    4af4:	80 ec       	ldi	r24, 0xC0	; 192
    4af6:	08 95       	ret

00004af8 <__fp_powser>:
    4af8:	df 93       	push	r29
    4afa:	cf 93       	push	r28
    4afc:	1f 93       	push	r17
    4afe:	0f 93       	push	r16
    4b00:	ff 92       	push	r15
    4b02:	ef 92       	push	r14
    4b04:	df 92       	push	r13
    4b06:	7b 01       	movw	r14, r22
    4b08:	8c 01       	movw	r16, r24
    4b0a:	68 94       	set
    4b0c:	05 c0       	rjmp	.+10     	; 0x4b18 <__fp_powser+0x20>
    4b0e:	da 2e       	mov	r13, r26
    4b10:	ef 01       	movw	r28, r30
    4b12:	f0 d0       	rcall	.+480    	; 0x4cf4 <__mulsf3x>
    4b14:	fe 01       	movw	r30, r28
    4b16:	e8 94       	clt
    4b18:	a5 91       	lpm	r26, Z+
    4b1a:	25 91       	lpm	r18, Z+
    4b1c:	35 91       	lpm	r19, Z+
    4b1e:	45 91       	lpm	r20, Z+
    4b20:	55 91       	lpm	r21, Z+
    4b22:	ae f3       	brts	.-22     	; 0x4b0e <__fp_powser+0x16>
    4b24:	ef 01       	movw	r28, r30
    4b26:	17 de       	rcall	.-978    	; 0x4756 <__addsf3x>
    4b28:	fe 01       	movw	r30, r28
    4b2a:	97 01       	movw	r18, r14
    4b2c:	a8 01       	movw	r20, r16
    4b2e:	da 94       	dec	r13
    4b30:	79 f7       	brne	.-34     	; 0x4b10 <__fp_powser+0x18>
    4b32:	df 90       	pop	r13
    4b34:	ef 90       	pop	r14
    4b36:	ff 90       	pop	r15
    4b38:	0f 91       	pop	r16
    4b3a:	1f 91       	pop	r17
    4b3c:	cf 91       	pop	r28
    4b3e:	df 91       	pop	r29
    4b40:	08 95       	ret

00004b42 <__fp_pscA>:
    4b42:	00 24       	eor	r0, r0
    4b44:	0a 94       	dec	r0
    4b46:	16 16       	cp	r1, r22
    4b48:	17 06       	cpc	r1, r23
    4b4a:	18 06       	cpc	r1, r24
    4b4c:	09 06       	cpc	r0, r25
    4b4e:	08 95       	ret

00004b50 <__fp_pscB>:
    4b50:	00 24       	eor	r0, r0
    4b52:	0a 94       	dec	r0
    4b54:	12 16       	cp	r1, r18
    4b56:	13 06       	cpc	r1, r19
    4b58:	14 06       	cpc	r1, r20
    4b5a:	05 06       	cpc	r0, r21
    4b5c:	08 95       	ret

00004b5e <__fp_round>:
    4b5e:	09 2e       	mov	r0, r25
    4b60:	03 94       	inc	r0
    4b62:	00 0c       	add	r0, r0
    4b64:	11 f4       	brne	.+4      	; 0x4b6a <__fp_round+0xc>
    4b66:	88 23       	and	r24, r24
    4b68:	52 f0       	brmi	.+20     	; 0x4b7e <__fp_round+0x20>
    4b6a:	bb 0f       	add	r27, r27
    4b6c:	40 f4       	brcc	.+16     	; 0x4b7e <__fp_round+0x20>
    4b6e:	bf 2b       	or	r27, r31
    4b70:	11 f4       	brne	.+4      	; 0x4b76 <__fp_round+0x18>
    4b72:	60 ff       	sbrs	r22, 0
    4b74:	04 c0       	rjmp	.+8      	; 0x4b7e <__fp_round+0x20>
    4b76:	6f 5f       	subi	r22, 0xFF	; 255
    4b78:	7f 4f       	sbci	r23, 0xFF	; 255
    4b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b7e:	08 95       	ret

00004b80 <__fp_split3>:
    4b80:	57 fd       	sbrc	r21, 7
    4b82:	90 58       	subi	r25, 0x80	; 128
    4b84:	44 0f       	add	r20, r20
    4b86:	55 1f       	adc	r21, r21
    4b88:	59 f0       	breq	.+22     	; 0x4ba0 <__fp_splitA+0x10>
    4b8a:	5f 3f       	cpi	r21, 0xFF	; 255
    4b8c:	71 f0       	breq	.+28     	; 0x4baa <__fp_splitA+0x1a>
    4b8e:	47 95       	ror	r20

00004b90 <__fp_splitA>:
    4b90:	88 0f       	add	r24, r24
    4b92:	97 fb       	bst	r25, 7
    4b94:	99 1f       	adc	r25, r25
    4b96:	61 f0       	breq	.+24     	; 0x4bb0 <__fp_splitA+0x20>
    4b98:	9f 3f       	cpi	r25, 0xFF	; 255
    4b9a:	79 f0       	breq	.+30     	; 0x4bba <__fp_splitA+0x2a>
    4b9c:	87 95       	ror	r24
    4b9e:	08 95       	ret
    4ba0:	12 16       	cp	r1, r18
    4ba2:	13 06       	cpc	r1, r19
    4ba4:	14 06       	cpc	r1, r20
    4ba6:	55 1f       	adc	r21, r21
    4ba8:	f2 cf       	rjmp	.-28     	; 0x4b8e <__fp_split3+0xe>
    4baa:	46 95       	lsr	r20
    4bac:	f1 df       	rcall	.-30     	; 0x4b90 <__fp_splitA>
    4bae:	08 c0       	rjmp	.+16     	; 0x4bc0 <__fp_splitA+0x30>
    4bb0:	16 16       	cp	r1, r22
    4bb2:	17 06       	cpc	r1, r23
    4bb4:	18 06       	cpc	r1, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	f1 cf       	rjmp	.-30     	; 0x4b9c <__fp_splitA+0xc>
    4bba:	86 95       	lsr	r24
    4bbc:	71 05       	cpc	r23, r1
    4bbe:	61 05       	cpc	r22, r1
    4bc0:	08 94       	sec
    4bc2:	08 95       	ret

00004bc4 <__fp_trunc>:
    4bc4:	e5 df       	rcall	.-54     	; 0x4b90 <__fp_splitA>
    4bc6:	a0 f0       	brcs	.+40     	; 0x4bf0 <__fp_trunc+0x2c>
    4bc8:	be e7       	ldi	r27, 0x7E	; 126
    4bca:	b9 17       	cp	r27, r25
    4bcc:	88 f4       	brcc	.+34     	; 0x4bf0 <__fp_trunc+0x2c>
    4bce:	bb 27       	eor	r27, r27
    4bd0:	9f 38       	cpi	r25, 0x8F	; 143
    4bd2:	60 f4       	brcc	.+24     	; 0x4bec <__fp_trunc+0x28>
    4bd4:	16 16       	cp	r1, r22
    4bd6:	b1 1d       	adc	r27, r1
    4bd8:	67 2f       	mov	r22, r23
    4bda:	78 2f       	mov	r23, r24
    4bdc:	88 27       	eor	r24, r24
    4bde:	98 5f       	subi	r25, 0xF8	; 248
    4be0:	f7 cf       	rjmp	.-18     	; 0x4bd0 <__fp_trunc+0xc>
    4be2:	86 95       	lsr	r24
    4be4:	77 95       	ror	r23
    4be6:	67 95       	ror	r22
    4be8:	b1 1d       	adc	r27, r1
    4bea:	93 95       	inc	r25
    4bec:	96 39       	cpi	r25, 0x96	; 150
    4bee:	c8 f3       	brcs	.-14     	; 0x4be2 <__fp_trunc+0x1e>
    4bf0:	08 95       	ret

00004bf2 <__fp_zero>:
    4bf2:	e8 94       	clt

00004bf4 <__fp_szero>:
    4bf4:	bb 27       	eor	r27, r27
    4bf6:	66 27       	eor	r22, r22
    4bf8:	77 27       	eor	r23, r23
    4bfa:	cb 01       	movw	r24, r22
    4bfc:	97 f9       	bld	r25, 7
    4bfe:	08 95       	ret

00004c00 <__gesf2>:
    4c00:	25 df       	rcall	.-438    	; 0x4a4c <__fp_cmp>
    4c02:	08 f4       	brcc	.+2      	; 0x4c06 <__gesf2+0x6>
    4c04:	8f ef       	ldi	r24, 0xFF	; 255
    4c06:	08 95       	ret

00004c08 <inverse>:
    4c08:	9b 01       	movw	r18, r22
    4c0a:	ac 01       	movw	r20, r24
    4c0c:	60 e0       	ldi	r22, 0x00	; 0
    4c0e:	70 e0       	ldi	r23, 0x00	; 0
    4c10:	80 e8       	ldi	r24, 0x80	; 128
    4c12:	9f e3       	ldi	r25, 0x3F	; 63
    4c14:	32 ce       	rjmp	.-924    	; 0x487a <__divsf3>

00004c16 <lround>:
    4c16:	bc df       	rcall	.-136    	; 0x4b90 <__fp_splitA>
    4c18:	58 f1       	brcs	.+86     	; 0x4c70 <lround+0x5a>
    4c1a:	9e 57       	subi	r25, 0x7E	; 126
    4c1c:	58 f1       	brcs	.+86     	; 0x4c74 <lround+0x5e>
    4c1e:	98 51       	subi	r25, 0x18	; 24
    4c20:	a0 f0       	brcs	.+40     	; 0x4c4a <lround+0x34>
    4c22:	e9 f0       	breq	.+58     	; 0x4c5e <lround+0x48>
    4c24:	98 30       	cpi	r25, 0x08	; 8
    4c26:	20 f5       	brcc	.+72     	; 0x4c70 <lround+0x5a>
    4c28:	09 2e       	mov	r0, r25
    4c2a:	99 27       	eor	r25, r25
    4c2c:	66 0f       	add	r22, r22
    4c2e:	77 1f       	adc	r23, r23
    4c30:	88 1f       	adc	r24, r24
    4c32:	99 1f       	adc	r25, r25
    4c34:	0a 94       	dec	r0
    4c36:	d1 f7       	brne	.-12     	; 0x4c2c <lround+0x16>
    4c38:	12 c0       	rjmp	.+36     	; 0x4c5e <lround+0x48>
    4c3a:	06 2e       	mov	r0, r22
    4c3c:	67 2f       	mov	r22, r23
    4c3e:	78 2f       	mov	r23, r24
    4c40:	88 27       	eor	r24, r24
    4c42:	98 5f       	subi	r25, 0xF8	; 248
    4c44:	11 f4       	brne	.+4      	; 0x4c4a <lround+0x34>
    4c46:	00 0c       	add	r0, r0
    4c48:	07 c0       	rjmp	.+14     	; 0x4c58 <lround+0x42>
    4c4a:	99 3f       	cpi	r25, 0xF9	; 249
    4c4c:	b4 f3       	brlt	.-20     	; 0x4c3a <lround+0x24>
    4c4e:	86 95       	lsr	r24
    4c50:	77 95       	ror	r23
    4c52:	67 95       	ror	r22
    4c54:	93 95       	inc	r25
    4c56:	d9 f7       	brne	.-10     	; 0x4c4e <lround+0x38>
    4c58:	61 1d       	adc	r22, r1
    4c5a:	71 1d       	adc	r23, r1
    4c5c:	81 1d       	adc	r24, r1
    4c5e:	3e f4       	brtc	.+14     	; 0x4c6e <lround+0x58>
    4c60:	90 95       	com	r25
    4c62:	80 95       	com	r24
    4c64:	70 95       	com	r23
    4c66:	61 95       	neg	r22
    4c68:	7f 4f       	sbci	r23, 0xFF	; 255
    4c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    4c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c6e:	08 95       	ret
    4c70:	68 94       	set
    4c72:	c0 cf       	rjmp	.-128    	; 0x4bf4 <__fp_szero>
    4c74:	be cf       	rjmp	.-132    	; 0x4bf2 <__fp_zero>

00004c76 <modf>:
    4c76:	fa 01       	movw	r30, r20
    4c78:	dc 01       	movw	r26, r24
    4c7a:	aa 0f       	add	r26, r26
    4c7c:	bb 1f       	adc	r27, r27
    4c7e:	9b 01       	movw	r18, r22
    4c80:	ac 01       	movw	r20, r24
    4c82:	bf 57       	subi	r27, 0x7F	; 127
    4c84:	28 f4       	brcc	.+10     	; 0x4c90 <modf+0x1a>
    4c86:	22 27       	eor	r18, r18
    4c88:	33 27       	eor	r19, r19
    4c8a:	44 27       	eor	r20, r20
    4c8c:	50 78       	andi	r21, 0x80	; 128
    4c8e:	1f c0       	rjmp	.+62     	; 0x4cce <modf+0x58>
    4c90:	b7 51       	subi	r27, 0x17	; 23
    4c92:	88 f4       	brcc	.+34     	; 0x4cb6 <modf+0x40>
    4c94:	ab 2f       	mov	r26, r27
    4c96:	00 24       	eor	r0, r0
    4c98:	46 95       	lsr	r20
    4c9a:	37 95       	ror	r19
    4c9c:	27 95       	ror	r18
    4c9e:	01 1c       	adc	r0, r1
    4ca0:	a3 95       	inc	r26
    4ca2:	d2 f3       	brmi	.-12     	; 0x4c98 <modf+0x22>
    4ca4:	00 20       	and	r0, r0
    4ca6:	69 f0       	breq	.+26     	; 0x4cc2 <modf+0x4c>
    4ca8:	22 0f       	add	r18, r18
    4caa:	33 1f       	adc	r19, r19
    4cac:	44 1f       	adc	r20, r20
    4cae:	b3 95       	inc	r27
    4cb0:	da f3       	brmi	.-10     	; 0x4ca8 <modf+0x32>
    4cb2:	0d d0       	rcall	.+26     	; 0x4cce <modf+0x58>
    4cb4:	3e cd       	rjmp	.-1412   	; 0x4732 <__subsf3>
    4cb6:	61 30       	cpi	r22, 0x01	; 1
    4cb8:	71 05       	cpc	r23, r1
    4cba:	a0 e8       	ldi	r26, 0x80	; 128
    4cbc:	8a 07       	cpc	r24, r26
    4cbe:	b9 46       	sbci	r27, 0x69	; 105
    4cc0:	30 f4       	brcc	.+12     	; 0x4cce <modf+0x58>
    4cc2:	9b 01       	movw	r18, r22
    4cc4:	ac 01       	movw	r20, r24
    4cc6:	66 27       	eor	r22, r22
    4cc8:	77 27       	eor	r23, r23
    4cca:	88 27       	eor	r24, r24
    4ccc:	90 78       	andi	r25, 0x80	; 128
    4cce:	30 96       	adiw	r30, 0x00	; 0
    4cd0:	21 f0       	breq	.+8      	; 0x4cda <modf+0x64>
    4cd2:	20 83       	st	Z, r18
    4cd4:	31 83       	std	Z+1, r19	; 0x01
    4cd6:	42 83       	std	Z+2, r20	; 0x02
    4cd8:	53 83       	std	Z+3, r21	; 0x03
    4cda:	08 95       	ret

00004cdc <__mulsf3>:
    4cdc:	0b d0       	rcall	.+22     	; 0x4cf4 <__mulsf3x>
    4cde:	3f cf       	rjmp	.-386    	; 0x4b5e <__fp_round>
    4ce0:	30 df       	rcall	.-416    	; 0x4b42 <__fp_pscA>
    4ce2:	28 f0       	brcs	.+10     	; 0x4cee <__mulsf3+0x12>
    4ce4:	35 df       	rcall	.-406    	; 0x4b50 <__fp_pscB>
    4ce6:	18 f0       	brcs	.+6      	; 0x4cee <__mulsf3+0x12>
    4ce8:	95 23       	and	r25, r21
    4cea:	09 f0       	breq	.+2      	; 0x4cee <__mulsf3+0x12>
    4cec:	d3 ce       	rjmp	.-602    	; 0x4a94 <__fp_inf>
    4cee:	01 cf       	rjmp	.-510    	; 0x4af2 <__fp_nan>
    4cf0:	11 24       	eor	r1, r1
    4cf2:	80 cf       	rjmp	.-256    	; 0x4bf4 <__fp_szero>

00004cf4 <__mulsf3x>:
    4cf4:	45 df       	rcall	.-374    	; 0x4b80 <__fp_split3>
    4cf6:	a0 f3       	brcs	.-24     	; 0x4ce0 <__mulsf3+0x4>

00004cf8 <__mulsf3_pse>:
    4cf8:	95 9f       	mul	r25, r21
    4cfa:	d1 f3       	breq	.-12     	; 0x4cf0 <__mulsf3+0x14>
    4cfc:	95 0f       	add	r25, r21
    4cfe:	50 e0       	ldi	r21, 0x00	; 0
    4d00:	55 1f       	adc	r21, r21
    4d02:	62 9f       	mul	r22, r18
    4d04:	f0 01       	movw	r30, r0
    4d06:	72 9f       	mul	r23, r18
    4d08:	bb 27       	eor	r27, r27
    4d0a:	f0 0d       	add	r31, r0
    4d0c:	b1 1d       	adc	r27, r1
    4d0e:	63 9f       	mul	r22, r19
    4d10:	aa 27       	eor	r26, r26
    4d12:	f0 0d       	add	r31, r0
    4d14:	b1 1d       	adc	r27, r1
    4d16:	aa 1f       	adc	r26, r26
    4d18:	64 9f       	mul	r22, r20
    4d1a:	66 27       	eor	r22, r22
    4d1c:	b0 0d       	add	r27, r0
    4d1e:	a1 1d       	adc	r26, r1
    4d20:	66 1f       	adc	r22, r22
    4d22:	82 9f       	mul	r24, r18
    4d24:	22 27       	eor	r18, r18
    4d26:	b0 0d       	add	r27, r0
    4d28:	a1 1d       	adc	r26, r1
    4d2a:	62 1f       	adc	r22, r18
    4d2c:	73 9f       	mul	r23, r19
    4d2e:	b0 0d       	add	r27, r0
    4d30:	a1 1d       	adc	r26, r1
    4d32:	62 1f       	adc	r22, r18
    4d34:	83 9f       	mul	r24, r19
    4d36:	a0 0d       	add	r26, r0
    4d38:	61 1d       	adc	r22, r1
    4d3a:	22 1f       	adc	r18, r18
    4d3c:	74 9f       	mul	r23, r20
    4d3e:	33 27       	eor	r19, r19
    4d40:	a0 0d       	add	r26, r0
    4d42:	61 1d       	adc	r22, r1
    4d44:	23 1f       	adc	r18, r19
    4d46:	84 9f       	mul	r24, r20
    4d48:	60 0d       	add	r22, r0
    4d4a:	21 1d       	adc	r18, r1
    4d4c:	82 2f       	mov	r24, r18
    4d4e:	76 2f       	mov	r23, r22
    4d50:	6a 2f       	mov	r22, r26
    4d52:	11 24       	eor	r1, r1
    4d54:	9f 57       	subi	r25, 0x7F	; 127
    4d56:	50 40       	sbci	r21, 0x00	; 0
    4d58:	8a f0       	brmi	.+34     	; 0x4d7c <__mulsf3_pse+0x84>
    4d5a:	e1 f0       	breq	.+56     	; 0x4d94 <__mulsf3_pse+0x9c>
    4d5c:	88 23       	and	r24, r24
    4d5e:	4a f0       	brmi	.+18     	; 0x4d72 <__mulsf3_pse+0x7a>
    4d60:	ee 0f       	add	r30, r30
    4d62:	ff 1f       	adc	r31, r31
    4d64:	bb 1f       	adc	r27, r27
    4d66:	66 1f       	adc	r22, r22
    4d68:	77 1f       	adc	r23, r23
    4d6a:	88 1f       	adc	r24, r24
    4d6c:	91 50       	subi	r25, 0x01	; 1
    4d6e:	50 40       	sbci	r21, 0x00	; 0
    4d70:	a9 f7       	brne	.-22     	; 0x4d5c <__mulsf3_pse+0x64>
    4d72:	9e 3f       	cpi	r25, 0xFE	; 254
    4d74:	51 05       	cpc	r21, r1
    4d76:	70 f0       	brcs	.+28     	; 0x4d94 <__mulsf3_pse+0x9c>
    4d78:	8d ce       	rjmp	.-742    	; 0x4a94 <__fp_inf>
    4d7a:	3c cf       	rjmp	.-392    	; 0x4bf4 <__fp_szero>
    4d7c:	5f 3f       	cpi	r21, 0xFF	; 255
    4d7e:	ec f3       	brlt	.-6      	; 0x4d7a <__mulsf3_pse+0x82>
    4d80:	98 3e       	cpi	r25, 0xE8	; 232
    4d82:	dc f3       	brlt	.-10     	; 0x4d7a <__mulsf3_pse+0x82>
    4d84:	86 95       	lsr	r24
    4d86:	77 95       	ror	r23
    4d88:	67 95       	ror	r22
    4d8a:	b7 95       	ror	r27
    4d8c:	f7 95       	ror	r31
    4d8e:	e7 95       	ror	r30
    4d90:	9f 5f       	subi	r25, 0xFF	; 255
    4d92:	c1 f7       	brne	.-16     	; 0x4d84 <__mulsf3_pse+0x8c>
    4d94:	fe 2b       	or	r31, r30
    4d96:	88 0f       	add	r24, r24
    4d98:	91 1d       	adc	r25, r1
    4d9a:	96 95       	lsr	r25
    4d9c:	87 95       	ror	r24
    4d9e:	97 f9       	bld	r25, 7
    4da0:	08 95       	ret

00004da2 <round>:
    4da2:	f6 de       	rcall	.-532    	; 0x4b90 <__fp_splitA>
    4da4:	e0 f0       	brcs	.+56     	; 0x4dde <round+0x3c>
    4da6:	9e 37       	cpi	r25, 0x7E	; 126
    4da8:	d8 f0       	brcs	.+54     	; 0x4de0 <round+0x3e>
    4daa:	96 39       	cpi	r25, 0x96	; 150
    4dac:	b8 f4       	brcc	.+46     	; 0x4ddc <round+0x3a>
    4dae:	9e 38       	cpi	r25, 0x8E	; 142
    4db0:	48 f4       	brcc	.+18     	; 0x4dc4 <round+0x22>
    4db2:	67 2f       	mov	r22, r23
    4db4:	78 2f       	mov	r23, r24
    4db6:	88 27       	eor	r24, r24
    4db8:	98 5f       	subi	r25, 0xF8	; 248
    4dba:	f9 cf       	rjmp	.-14     	; 0x4dae <round+0xc>
    4dbc:	86 95       	lsr	r24
    4dbe:	77 95       	ror	r23
    4dc0:	67 95       	ror	r22
    4dc2:	93 95       	inc	r25
    4dc4:	95 39       	cpi	r25, 0x95	; 149
    4dc6:	d0 f3       	brcs	.-12     	; 0x4dbc <round+0x1a>
    4dc8:	b6 2f       	mov	r27, r22
    4dca:	b1 70       	andi	r27, 0x01	; 1
    4dcc:	6b 0f       	add	r22, r27
    4dce:	71 1d       	adc	r23, r1
    4dd0:	81 1d       	adc	r24, r1
    4dd2:	20 f4       	brcc	.+8      	; 0x4ddc <round+0x3a>
    4dd4:	87 95       	ror	r24
    4dd6:	77 95       	ror	r23
    4dd8:	67 95       	ror	r22
    4dda:	93 95       	inc	r25
    4ddc:	61 ce       	rjmp	.-830    	; 0x4aa0 <__fp_mintl>
    4dde:	7b ce       	rjmp	.-778    	; 0x4ad6 <__fp_mpack>
    4de0:	09 cf       	rjmp	.-494    	; 0x4bf4 <__fp_szero>
    4de2:	11 f4       	brne	.+4      	; 0x4de8 <round+0x46>
    4de4:	0e f4       	brtc	.+2      	; 0x4de8 <round+0x46>
    4de6:	85 ce       	rjmp	.-758    	; 0x4af2 <__fp_nan>
    4de8:	76 ce       	rjmp	.-788    	; 0x4ad6 <__fp_mpack>

00004dea <sqrt>:
    4dea:	d2 de       	rcall	.-604    	; 0x4b90 <__fp_splitA>
    4dec:	d0 f3       	brcs	.-12     	; 0x4de2 <round+0x40>
    4dee:	99 23       	and	r25, r25
    4df0:	d9 f3       	breq	.-10     	; 0x4de8 <round+0x46>
    4df2:	ce f3       	brts	.-14     	; 0x4de6 <round+0x44>
    4df4:	9f 57       	subi	r25, 0x7F	; 127
    4df6:	55 0b       	sbc	r21, r21
    4df8:	87 ff       	sbrs	r24, 7
    4dfa:	3f d0       	rcall	.+126    	; 0x4e7a <__fp_norm2>
    4dfc:	00 24       	eor	r0, r0
    4dfe:	a0 e6       	ldi	r26, 0x60	; 96
    4e00:	40 ea       	ldi	r20, 0xA0	; 160
    4e02:	90 01       	movw	r18, r0
    4e04:	80 58       	subi	r24, 0x80	; 128
    4e06:	56 95       	lsr	r21
    4e08:	97 95       	ror	r25
    4e0a:	28 f4       	brcc	.+10     	; 0x4e16 <sqrt+0x2c>
    4e0c:	80 5c       	subi	r24, 0xC0	; 192
    4e0e:	66 0f       	add	r22, r22
    4e10:	77 1f       	adc	r23, r23
    4e12:	88 1f       	adc	r24, r24
    4e14:	20 f0       	brcs	.+8      	; 0x4e1e <sqrt+0x34>
    4e16:	26 17       	cp	r18, r22
    4e18:	37 07       	cpc	r19, r23
    4e1a:	48 07       	cpc	r20, r24
    4e1c:	30 f4       	brcc	.+12     	; 0x4e2a <sqrt+0x40>
    4e1e:	62 1b       	sub	r22, r18
    4e20:	73 0b       	sbc	r23, r19
    4e22:	84 0b       	sbc	r24, r20
    4e24:	20 29       	or	r18, r0
    4e26:	31 29       	or	r19, r1
    4e28:	4a 2b       	or	r20, r26
    4e2a:	a6 95       	lsr	r26
    4e2c:	17 94       	ror	r1
    4e2e:	07 94       	ror	r0
    4e30:	20 25       	eor	r18, r0
    4e32:	31 25       	eor	r19, r1
    4e34:	4a 27       	eor	r20, r26
    4e36:	58 f7       	brcc	.-42     	; 0x4e0e <sqrt+0x24>
    4e38:	66 0f       	add	r22, r22
    4e3a:	77 1f       	adc	r23, r23
    4e3c:	88 1f       	adc	r24, r24
    4e3e:	20 f0       	brcs	.+8      	; 0x4e48 <sqrt+0x5e>
    4e40:	26 17       	cp	r18, r22
    4e42:	37 07       	cpc	r19, r23
    4e44:	48 07       	cpc	r20, r24
    4e46:	30 f4       	brcc	.+12     	; 0x4e54 <sqrt+0x6a>
    4e48:	62 0b       	sbc	r22, r18
    4e4a:	73 0b       	sbc	r23, r19
    4e4c:	84 0b       	sbc	r24, r20
    4e4e:	20 0d       	add	r18, r0
    4e50:	31 1d       	adc	r19, r1
    4e52:	41 1d       	adc	r20, r1
    4e54:	a0 95       	com	r26
    4e56:	81 f7       	brne	.-32     	; 0x4e38 <sqrt+0x4e>
    4e58:	b9 01       	movw	r22, r18
    4e5a:	84 2f       	mov	r24, r20
    4e5c:	91 58       	subi	r25, 0x81	; 129
    4e5e:	88 0f       	add	r24, r24
    4e60:	96 95       	lsr	r25
    4e62:	87 95       	ror	r24
    4e64:	08 95       	ret

00004e66 <square>:
    4e66:	9b 01       	movw	r18, r22
    4e68:	ac 01       	movw	r20, r24
    4e6a:	38 cf       	rjmp	.-400    	; 0x4cdc <__mulsf3>

00004e6c <trunc>:
    4e6c:	ab de       	rcall	.-682    	; 0x4bc4 <__fp_trunc>
    4e6e:	20 f0       	brcs	.+8      	; 0x4e78 <trunc+0xc>
    4e70:	9f 37       	cpi	r25, 0x7F	; 127
    4e72:	08 f4       	brcc	.+2      	; 0x4e76 <trunc+0xa>
    4e74:	bf ce       	rjmp	.-642    	; 0x4bf4 <__fp_szero>
    4e76:	14 ce       	rjmp	.-984    	; 0x4aa0 <__fp_mintl>
    4e78:	2e ce       	rjmp	.-932    	; 0x4ad6 <__fp_mpack>

00004e7a <__fp_norm2>:
    4e7a:	91 50       	subi	r25, 0x01	; 1
    4e7c:	50 40       	sbci	r21, 0x00	; 0
    4e7e:	66 0f       	add	r22, r22
    4e80:	77 1f       	adc	r23, r23
    4e82:	88 1f       	adc	r24, r24
    4e84:	d2 f7       	brpl	.-12     	; 0x4e7a <__fp_norm2>
    4e86:	08 95       	ret

00004e88 <__mulsi3>:
    4e88:	62 9f       	mul	r22, r18
    4e8a:	d0 01       	movw	r26, r0
    4e8c:	73 9f       	mul	r23, r19
    4e8e:	f0 01       	movw	r30, r0
    4e90:	82 9f       	mul	r24, r18
    4e92:	e0 0d       	add	r30, r0
    4e94:	f1 1d       	adc	r31, r1
    4e96:	64 9f       	mul	r22, r20
    4e98:	e0 0d       	add	r30, r0
    4e9a:	f1 1d       	adc	r31, r1
    4e9c:	92 9f       	mul	r25, r18
    4e9e:	f0 0d       	add	r31, r0
    4ea0:	83 9f       	mul	r24, r19
    4ea2:	f0 0d       	add	r31, r0
    4ea4:	74 9f       	mul	r23, r20
    4ea6:	f0 0d       	add	r31, r0
    4ea8:	65 9f       	mul	r22, r21
    4eaa:	f0 0d       	add	r31, r0
    4eac:	99 27       	eor	r25, r25
    4eae:	72 9f       	mul	r23, r18
    4eb0:	b0 0d       	add	r27, r0
    4eb2:	e1 1d       	adc	r30, r1
    4eb4:	f9 1f       	adc	r31, r25
    4eb6:	63 9f       	mul	r22, r19
    4eb8:	b0 0d       	add	r27, r0
    4eba:	e1 1d       	adc	r30, r1
    4ebc:	f9 1f       	adc	r31, r25
    4ebe:	bd 01       	movw	r22, r26
    4ec0:	cf 01       	movw	r24, r30
    4ec2:	11 24       	eor	r1, r1
    4ec4:	08 95       	ret

00004ec6 <__divmodhi4>:
    4ec6:	97 fb       	bst	r25, 7
    4ec8:	09 2e       	mov	r0, r25
    4eca:	07 26       	eor	r0, r23
    4ecc:	0a d0       	rcall	.+20     	; 0x4ee2 <__divmodhi4_neg1>
    4ece:	77 fd       	sbrc	r23, 7
    4ed0:	04 d0       	rcall	.+8      	; 0x4eda <__divmodhi4_neg2>
    4ed2:	49 d0       	rcall	.+146    	; 0x4f66 <__udivmodhi4>
    4ed4:	06 d0       	rcall	.+12     	; 0x4ee2 <__divmodhi4_neg1>
    4ed6:	00 20       	and	r0, r0
    4ed8:	1a f4       	brpl	.+6      	; 0x4ee0 <__divmodhi4_exit>

00004eda <__divmodhi4_neg2>:
    4eda:	70 95       	com	r23
    4edc:	61 95       	neg	r22
    4ede:	7f 4f       	sbci	r23, 0xFF	; 255

00004ee0 <__divmodhi4_exit>:
    4ee0:	08 95       	ret

00004ee2 <__divmodhi4_neg1>:
    4ee2:	f6 f7       	brtc	.-4      	; 0x4ee0 <__divmodhi4_exit>
    4ee4:	90 95       	com	r25
    4ee6:	81 95       	neg	r24
    4ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    4eea:	08 95       	ret

00004eec <__udivmodsi4>:
    4eec:	a1 e2       	ldi	r26, 0x21	; 33
    4eee:	1a 2e       	mov	r1, r26
    4ef0:	aa 1b       	sub	r26, r26
    4ef2:	bb 1b       	sub	r27, r27
    4ef4:	fd 01       	movw	r30, r26
    4ef6:	0d c0       	rjmp	.+26     	; 0x4f12 <__udivmodsi4_ep>

00004ef8 <__udivmodsi4_loop>:
    4ef8:	aa 1f       	adc	r26, r26
    4efa:	bb 1f       	adc	r27, r27
    4efc:	ee 1f       	adc	r30, r30
    4efe:	ff 1f       	adc	r31, r31
    4f00:	a2 17       	cp	r26, r18
    4f02:	b3 07       	cpc	r27, r19
    4f04:	e4 07       	cpc	r30, r20
    4f06:	f5 07       	cpc	r31, r21
    4f08:	20 f0       	brcs	.+8      	; 0x4f12 <__udivmodsi4_ep>
    4f0a:	a2 1b       	sub	r26, r18
    4f0c:	b3 0b       	sbc	r27, r19
    4f0e:	e4 0b       	sbc	r30, r20
    4f10:	f5 0b       	sbc	r31, r21

00004f12 <__udivmodsi4_ep>:
    4f12:	66 1f       	adc	r22, r22
    4f14:	77 1f       	adc	r23, r23
    4f16:	88 1f       	adc	r24, r24
    4f18:	99 1f       	adc	r25, r25
    4f1a:	1a 94       	dec	r1
    4f1c:	69 f7       	brne	.-38     	; 0x4ef8 <__udivmodsi4_loop>
    4f1e:	60 95       	com	r22
    4f20:	70 95       	com	r23
    4f22:	80 95       	com	r24
    4f24:	90 95       	com	r25
    4f26:	9b 01       	movw	r18, r22
    4f28:	ac 01       	movw	r20, r24
    4f2a:	bd 01       	movw	r22, r26
    4f2c:	cf 01       	movw	r24, r30
    4f2e:	08 95       	ret

00004f30 <__divmodsi4>:
    4f30:	97 fb       	bst	r25, 7
    4f32:	09 2e       	mov	r0, r25
    4f34:	05 26       	eor	r0, r21
    4f36:	0e d0       	rcall	.+28     	; 0x4f54 <__divmodsi4_neg1>
    4f38:	57 fd       	sbrc	r21, 7
    4f3a:	04 d0       	rcall	.+8      	; 0x4f44 <__divmodsi4_neg2>
    4f3c:	d7 df       	rcall	.-82     	; 0x4eec <__udivmodsi4>
    4f3e:	0a d0       	rcall	.+20     	; 0x4f54 <__divmodsi4_neg1>
    4f40:	00 1c       	adc	r0, r0
    4f42:	38 f4       	brcc	.+14     	; 0x4f52 <__divmodsi4_exit>

00004f44 <__divmodsi4_neg2>:
    4f44:	50 95       	com	r21
    4f46:	40 95       	com	r20
    4f48:	30 95       	com	r19
    4f4a:	21 95       	neg	r18
    4f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f4e:	4f 4f       	sbci	r20, 0xFF	; 255
    4f50:	5f 4f       	sbci	r21, 0xFF	; 255

00004f52 <__divmodsi4_exit>:
    4f52:	08 95       	ret

00004f54 <__divmodsi4_neg1>:
    4f54:	f6 f7       	brtc	.-4      	; 0x4f52 <__divmodsi4_exit>
    4f56:	90 95       	com	r25
    4f58:	80 95       	com	r24
    4f5a:	70 95       	com	r23
    4f5c:	61 95       	neg	r22
    4f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f60:	8f 4f       	sbci	r24, 0xFF	; 255
    4f62:	9f 4f       	sbci	r25, 0xFF	; 255
    4f64:	08 95       	ret

00004f66 <__udivmodhi4>:
    4f66:	aa 1b       	sub	r26, r26
    4f68:	bb 1b       	sub	r27, r27
    4f6a:	51 e1       	ldi	r21, 0x11	; 17
    4f6c:	07 c0       	rjmp	.+14     	; 0x4f7c <__udivmodhi4_ep>

00004f6e <__udivmodhi4_loop>:
    4f6e:	aa 1f       	adc	r26, r26
    4f70:	bb 1f       	adc	r27, r27
    4f72:	a6 17       	cp	r26, r22
    4f74:	b7 07       	cpc	r27, r23
    4f76:	10 f0       	brcs	.+4      	; 0x4f7c <__udivmodhi4_ep>
    4f78:	a6 1b       	sub	r26, r22
    4f7a:	b7 0b       	sbc	r27, r23

00004f7c <__udivmodhi4_ep>:
    4f7c:	88 1f       	adc	r24, r24
    4f7e:	99 1f       	adc	r25, r25
    4f80:	5a 95       	dec	r21
    4f82:	a9 f7       	brne	.-22     	; 0x4f6e <__udivmodhi4_loop>
    4f84:	80 95       	com	r24
    4f86:	90 95       	com	r25
    4f88:	bc 01       	movw	r22, r24
    4f8a:	cd 01       	movw	r24, r26
    4f8c:	08 95       	ret

00004f8e <strtod>:
    4f8e:	8f 92       	push	r8
    4f90:	9f 92       	push	r9
    4f92:	af 92       	push	r10
    4f94:	bf 92       	push	r11
    4f96:	cf 92       	push	r12
    4f98:	df 92       	push	r13
    4f9a:	ef 92       	push	r14
    4f9c:	ff 92       	push	r15
    4f9e:	0f 93       	push	r16
    4fa0:	1f 93       	push	r17
    4fa2:	cf 93       	push	r28
    4fa4:	df 93       	push	r29
    4fa6:	ec 01       	movw	r28, r24
    4fa8:	5b 01       	movw	r10, r22
    4faa:	61 15       	cp	r22, r1
    4fac:	71 05       	cpc	r23, r1
    4fae:	19 f0       	breq	.+6      	; 0x4fb6 <strtod+0x28>
    4fb0:	fb 01       	movw	r30, r22
    4fb2:	91 83       	std	Z+1, r25	; 0x01
    4fb4:	80 83       	st	Z, r24
    4fb6:	f9 90       	ld	r15, Y+
    4fb8:	8f 2d       	mov	r24, r15
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	0e 94 35 29 	call	0x526a	; 0x526a <isspace>
    4fc0:	89 2b       	or	r24, r25
    4fc2:	c9 f7       	brne	.-14     	; 0x4fb6 <strtod+0x28>
    4fc4:	fd e2       	ldi	r31, 0x2D	; 45
    4fc6:	ff 16       	cp	r15, r31
    4fc8:	21 f4       	brne	.+8      	; 0x4fd2 <strtod+0x44>
    4fca:	f9 90       	ld	r15, Y+
    4fcc:	ee 24       	eor	r14, r14
    4fce:	e3 94       	inc	r14
    4fd0:	05 c0       	rjmp	.+10     	; 0x4fdc <strtod+0x4e>
    4fd2:	2b e2       	ldi	r18, 0x2B	; 43
    4fd4:	f2 16       	cp	r15, r18
    4fd6:	09 f4       	brne	.+2      	; 0x4fda <strtod+0x4c>
    4fd8:	f9 90       	ld	r15, Y+
    4fda:	ee 24       	eor	r14, r14
    4fdc:	8e 01       	movw	r16, r28
    4fde:	01 50       	subi	r16, 0x01	; 1
    4fe0:	10 40       	sbci	r17, 0x00	; 0
    4fe2:	c8 01       	movw	r24, r16
    4fe4:	6c ef       	ldi	r22, 0xFC	; 252
    4fe6:	75 e0       	ldi	r23, 0x05	; 5
    4fe8:	43 e0       	ldi	r20, 0x03	; 3
    4fea:	50 e0       	ldi	r21, 0x00	; 0
    4fec:	0e 94 3d 29 	call	0x527a	; 0x527a <strncasecmp_P>
    4ff0:	89 2b       	or	r24, r25
    4ff2:	01 f5       	brne	.+64     	; 0x5034 <strtod+0xa6>
    4ff4:	8e 01       	movw	r16, r28
    4ff6:	0e 5f       	subi	r16, 0xFE	; 254
    4ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    4ffa:	c8 01       	movw	r24, r16
    4ffc:	6f ef       	ldi	r22, 0xFF	; 255
    4ffe:	75 e0       	ldi	r23, 0x05	; 5
    5000:	45 e0       	ldi	r20, 0x05	; 5
    5002:	50 e0       	ldi	r21, 0x00	; 0
    5004:	0e 94 3d 29 	call	0x527a	; 0x527a <strncasecmp_P>
    5008:	89 2b       	or	r24, r25
    500a:	19 f4       	brne	.+6      	; 0x5012 <strtod+0x84>
    500c:	8e 01       	movw	r16, r28
    500e:	09 5f       	subi	r16, 0xF9	; 249
    5010:	1f 4f       	sbci	r17, 0xFF	; 255
    5012:	a1 14       	cp	r10, r1
    5014:	b1 04       	cpc	r11, r1
    5016:	19 f0       	breq	.+6      	; 0x501e <strtod+0x90>
    5018:	f5 01       	movw	r30, r10
    501a:	11 83       	std	Z+1, r17	; 0x01
    501c:	00 83       	st	Z, r16
    501e:	e0 fc       	sbrc	r14, 0
    5020:	04 c0       	rjmp	.+8      	; 0x502a <strtod+0x9c>
    5022:	70 e0       	ldi	r23, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	80 e8       	ldi	r24, 0x80	; 128
    5028:	14 c0       	rjmp	.+40     	; 0x5052 <strtod+0xc4>
    502a:	70 e0       	ldi	r23, 0x00	; 0
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	80 e8       	ldi	r24, 0x80	; 128
    5030:	6f ef       	ldi	r22, 0xFF	; 255
    5032:	08 c1       	rjmp	.+528    	; 0x5244 <strtod+0x2b6>
    5034:	c8 01       	movw	r24, r16
    5036:	64 e0       	ldi	r22, 0x04	; 4
    5038:	76 e0       	ldi	r23, 0x06	; 6
    503a:	43 e0       	ldi	r20, 0x03	; 3
    503c:	50 e0       	ldi	r21, 0x00	; 0
    503e:	0e 94 3d 29 	call	0x527a	; 0x527a <strncasecmp_P>
    5042:	89 2b       	or	r24, r25
    5044:	69 f4       	brne	.+26     	; 0x5060 <strtod+0xd2>
    5046:	a1 14       	cp	r10, r1
    5048:	b1 04       	cpc	r11, r1
    504a:	29 f4       	brne	.+10     	; 0x5056 <strtod+0xc8>
    504c:	70 e0       	ldi	r23, 0x00	; 0
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	80 ec       	ldi	r24, 0xC0	; 192
    5052:	6f e7       	ldi	r22, 0x7F	; 127
    5054:	f7 c0       	rjmp	.+494    	; 0x5244 <strtod+0x2b6>
    5056:	22 96       	adiw	r28, 0x02	; 2
    5058:	f5 01       	movw	r30, r10
    505a:	d1 83       	std	Z+1, r29	; 0x01
    505c:	c0 83       	st	Z, r28
    505e:	f6 cf       	rjmp	.-20     	; 0x504c <strtod+0xbe>
    5060:	88 24       	eor	r8, r8
    5062:	99 24       	eor	r9, r9
    5064:	40 e0       	ldi	r20, 0x00	; 0
    5066:	50 e0       	ldi	r21, 0x00	; 0
    5068:	60 e0       	ldi	r22, 0x00	; 0
    506a:	70 e0       	ldi	r23, 0x00	; 0
    506c:	ef 2d       	mov	r30, r15
    506e:	e0 53       	subi	r30, 0x30	; 48
    5070:	ea 30       	cpi	r30, 0x0A	; 10
    5072:	a0 f5       	brcc	.+104    	; 0x50dc <strtod+0x14e>
    5074:	f2 e0       	ldi	r31, 0x02	; 2
    5076:	ef 2a       	or	r14, r31
    5078:	8e 2d       	mov	r24, r14
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	9c 01       	movw	r18, r24
    507e:	28 70       	andi	r18, 0x08	; 8
    5080:	30 70       	andi	r19, 0x00	; 0
    5082:	e2 fe       	sbrs	r14, 2
    5084:	06 c0       	rjmp	.+12     	; 0x5092 <strtod+0x104>
    5086:	23 2b       	or	r18, r19
    5088:	79 f5       	brne	.+94     	; 0x50e8 <strtod+0x15a>
    508a:	08 94       	sec
    508c:	81 1c       	adc	r8, r1
    508e:	91 1c       	adc	r9, r1
    5090:	2b c0       	rjmp	.+86     	; 0x50e8 <strtod+0x15a>
    5092:	23 2b       	or	r18, r19
    5094:	19 f0       	breq	.+6      	; 0x509c <strtod+0x10e>
    5096:	08 94       	sec
    5098:	81 08       	sbc	r8, r1
    509a:	91 08       	sbc	r9, r1
    509c:	db 01       	movw	r26, r22
    509e:	ca 01       	movw	r24, r20
    50a0:	12 e0       	ldi	r17, 0x02	; 2
    50a2:	88 0f       	add	r24, r24
    50a4:	99 1f       	adc	r25, r25
    50a6:	aa 1f       	adc	r26, r26
    50a8:	bb 1f       	adc	r27, r27
    50aa:	1a 95       	dec	r17
    50ac:	d1 f7       	brne	.-12     	; 0x50a2 <strtod+0x114>
    50ae:	48 0f       	add	r20, r24
    50b0:	59 1f       	adc	r21, r25
    50b2:	6a 1f       	adc	r22, r26
    50b4:	7b 1f       	adc	r23, r27
    50b6:	44 0f       	add	r20, r20
    50b8:	55 1f       	adc	r21, r21
    50ba:	66 1f       	adc	r22, r22
    50bc:	77 1f       	adc	r23, r23
    50be:	4e 0f       	add	r20, r30
    50c0:	51 1d       	adc	r21, r1
    50c2:	61 1d       	adc	r22, r1
    50c4:	71 1d       	adc	r23, r1
    50c6:	48 39       	cpi	r20, 0x98	; 152
    50c8:	29 e9       	ldi	r18, 0x99	; 153
    50ca:	52 07       	cpc	r21, r18
    50cc:	29 e9       	ldi	r18, 0x99	; 153
    50ce:	62 07       	cpc	r22, r18
    50d0:	29 e1       	ldi	r18, 0x19	; 25
    50d2:	72 07       	cpc	r23, r18
    50d4:	48 f0       	brcs	.+18     	; 0x50e8 <strtod+0x15a>
    50d6:	84 e0       	ldi	r24, 0x04	; 4
    50d8:	e8 2a       	or	r14, r24
    50da:	06 c0       	rjmp	.+12     	; 0x50e8 <strtod+0x15a>
    50dc:	ee 3f       	cpi	r30, 0xFE	; 254
    50de:	31 f4       	brne	.+12     	; 0x50ec <strtod+0x15e>
    50e0:	e3 fc       	sbrc	r14, 3
    50e2:	39 c0       	rjmp	.+114    	; 0x5156 <strtod+0x1c8>
    50e4:	98 e0       	ldi	r25, 0x08	; 8
    50e6:	e9 2a       	or	r14, r25
    50e8:	f9 90       	ld	r15, Y+
    50ea:	c0 cf       	rjmp	.-128    	; 0x506c <strtod+0xde>
    50ec:	e5 33       	cpi	r30, 0x35	; 53
    50ee:	11 f0       	breq	.+4      	; 0x50f4 <strtod+0x166>
    50f0:	e5 31       	cpi	r30, 0x15	; 21
    50f2:	89 f5       	brne	.+98     	; 0x5156 <strtod+0x1c8>
    50f4:	29 91       	ld	r18, Y+
    50f6:	2d 32       	cpi	r18, 0x2D	; 45
    50f8:	19 f4       	brne	.+6      	; 0x5100 <strtod+0x172>
    50fa:	e0 e1       	ldi	r30, 0x10	; 16
    50fc:	ee 2a       	or	r14, r30
    50fe:	05 c0       	rjmp	.+10     	; 0x510a <strtod+0x17c>
    5100:	2b 32       	cpi	r18, 0x2B	; 43
    5102:	19 f0       	breq	.+6      	; 0x510a <strtod+0x17c>
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	03 c0       	rjmp	.+6      	; 0x5110 <strtod+0x182>
    510a:	29 91       	ld	r18, Y+
    510c:	82 e0       	ldi	r24, 0x02	; 2
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	e2 2f       	mov	r30, r18
    5112:	e0 53       	subi	r30, 0x30	; 48
    5114:	ea 30       	cpi	r30, 0x0A	; 10
    5116:	18 f0       	brcs	.+6      	; 0x511e <strtod+0x190>
    5118:	c8 1b       	sub	r28, r24
    511a:	d9 0b       	sbc	r29, r25
    511c:	1c c0       	rjmp	.+56     	; 0x5156 <strtod+0x1c8>
    511e:	20 e0       	ldi	r18, 0x00	; 0
    5120:	30 e0       	ldi	r19, 0x00	; 0
    5122:	fc e0       	ldi	r31, 0x0C	; 12
    5124:	20 38       	cpi	r18, 0x80	; 128
    5126:	3f 07       	cpc	r19, r31
    5128:	5c f4       	brge	.+22     	; 0x5140 <strtod+0x1b2>
    512a:	c9 01       	movw	r24, r18
    512c:	88 0f       	add	r24, r24
    512e:	99 1f       	adc	r25, r25
    5130:	88 0f       	add	r24, r24
    5132:	99 1f       	adc	r25, r25
    5134:	28 0f       	add	r18, r24
    5136:	39 1f       	adc	r19, r25
    5138:	22 0f       	add	r18, r18
    513a:	33 1f       	adc	r19, r19
    513c:	2e 0f       	add	r18, r30
    513e:	31 1d       	adc	r19, r1
    5140:	e9 91       	ld	r30, Y+
    5142:	e0 53       	subi	r30, 0x30	; 48
    5144:	ea 30       	cpi	r30, 0x0A	; 10
    5146:	68 f3       	brcs	.-38     	; 0x5122 <strtod+0x194>
    5148:	e4 fe       	sbrs	r14, 4
    514a:	03 c0       	rjmp	.+6      	; 0x5152 <strtod+0x1c4>
    514c:	30 95       	com	r19
    514e:	21 95       	neg	r18
    5150:	3f 4f       	sbci	r19, 0xFF	; 255
    5152:	82 0e       	add	r8, r18
    5154:	93 1e       	adc	r9, r19
    5156:	ce 2c       	mov	r12, r14
    5158:	dd 24       	eor	r13, r13
    515a:	e1 fe       	sbrs	r14, 1
    515c:	07 c0       	rjmp	.+14     	; 0x516c <strtod+0x1de>
    515e:	a1 14       	cp	r10, r1
    5160:	b1 04       	cpc	r11, r1
    5162:	21 f0       	breq	.+8      	; 0x516c <strtod+0x1de>
    5164:	21 97       	sbiw	r28, 0x01	; 1
    5166:	f5 01       	movw	r30, r10
    5168:	d1 83       	std	Z+1, r29	; 0x01
    516a:	c0 83       	st	Z, r28
    516c:	cb 01       	movw	r24, r22
    516e:	ba 01       	movw	r22, r20
    5170:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__floatunsisf>
    5174:	7b 01       	movw	r14, r22
    5176:	8c 01       	movw	r16, r24
    5178:	f3 e0       	ldi	r31, 0x03	; 3
    517a:	cf 22       	and	r12, r31
    517c:	dd 24       	eor	r13, r13
    517e:	23 e0       	ldi	r18, 0x03	; 3
    5180:	c2 16       	cp	r12, r18
    5182:	d1 04       	cpc	r13, r1
    5184:	21 f4       	brne	.+8      	; 0x518e <strtod+0x200>
    5186:	17 fb       	bst	r17, 7
    5188:	10 95       	com	r17
    518a:	17 f9       	bld	r17, 7
    518c:	10 95       	com	r17
    518e:	57 01       	movw	r10, r14
    5190:	68 01       	movw	r12, r16
    5192:	c8 01       	movw	r24, r16
    5194:	b7 01       	movw	r22, r14
    5196:	20 e0       	ldi	r18, 0x00	; 0
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	40 e0       	ldi	r20, 0x00	; 0
    519c:	50 e0       	ldi	r21, 0x00	; 0
    519e:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
    51a2:	88 23       	and	r24, r24
    51a4:	09 f4       	brne	.+2      	; 0x51a8 <strtod+0x21a>
    51a6:	4a c0       	rjmp	.+148    	; 0x523c <strtod+0x2ae>
    51a8:	97 fe       	sbrs	r9, 7
    51aa:	0d c0       	rjmp	.+26     	; 0x51c6 <strtod+0x238>
    51ac:	2b e1       	ldi	r18, 0x1B	; 27
    51ae:	e2 2e       	mov	r14, r18
    51b0:	26 e0       	ldi	r18, 0x06	; 6
    51b2:	f2 2e       	mov	r15, r18
    51b4:	90 94       	com	r9
    51b6:	81 94       	neg	r8
    51b8:	91 08       	sbc	r9, r1
    51ba:	93 94       	inc	r9
    51bc:	c0 e2       	ldi	r28, 0x20	; 32
    51be:	d0 e0       	ldi	r29, 0x00	; 0
    51c0:	00 e0       	ldi	r16, 0x00	; 0
    51c2:	10 e0       	ldi	r17, 0x00	; 0
    51c4:	12 c0       	rjmp	.+36     	; 0x51ea <strtod+0x25c>
    51c6:	93 e3       	ldi	r25, 0x33	; 51
    51c8:	e9 2e       	mov	r14, r25
    51ca:	96 e0       	ldi	r25, 0x06	; 6
    51cc:	f9 2e       	mov	r15, r25
    51ce:	f6 cf       	rjmp	.-20     	; 0x51bc <strtod+0x22e>
    51d0:	f7 01       	movw	r30, r14
    51d2:	25 91       	lpm	r18, Z+
    51d4:	35 91       	lpm	r19, Z+
    51d6:	45 91       	lpm	r20, Z+
    51d8:	54 91       	lpm	r21, Z+
    51da:	c6 01       	movw	r24, r12
    51dc:	b5 01       	movw	r22, r10
    51de:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__mulsf3>
    51e2:	5b 01       	movw	r10, r22
    51e4:	6c 01       	movw	r12, r24
    51e6:	8c 1a       	sub	r8, r28
    51e8:	9d 0a       	sbc	r9, r29
    51ea:	8c 16       	cp	r8, r28
    51ec:	9d 06       	cpc	r9, r29
    51ee:	84 f7       	brge	.-32     	; 0x51d0 <strtod+0x242>
    51f0:	d5 95       	asr	r29
    51f2:	c7 95       	ror	r28
    51f4:	0f 5f       	subi	r16, 0xFF	; 255
    51f6:	1f 4f       	sbci	r17, 0xFF	; 255
    51f8:	06 30       	cpi	r16, 0x06	; 6
    51fa:	11 05       	cpc	r17, r1
    51fc:	29 f0       	breq	.+10     	; 0x5208 <strtod+0x27a>
    51fe:	8c ef       	ldi	r24, 0xFC	; 252
    5200:	9f ef       	ldi	r25, 0xFF	; 255
    5202:	e8 0e       	add	r14, r24
    5204:	f9 1e       	adc	r15, r25
    5206:	f1 cf       	rjmp	.-30     	; 0x51ea <strtod+0x25c>
    5208:	c5 01       	movw	r24, r10
    520a:	d6 01       	movw	r26, r12
    520c:	7c 01       	movw	r14, r24
    520e:	8d 01       	movw	r16, r26
    5210:	8c 2d       	mov	r24, r12
    5212:	88 0f       	add	r24, r24
    5214:	8d 2d       	mov	r24, r13
    5216:	88 1f       	adc	r24, r24
    5218:	8f 3f       	cpi	r24, 0xFF	; 255
    521a:	51 f0       	breq	.+20     	; 0x5230 <strtod+0x2a2>
    521c:	c6 01       	movw	r24, r12
    521e:	b5 01       	movw	r22, r10
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	40 e0       	ldi	r20, 0x00	; 0
    5226:	50 e0       	ldi	r21, 0x00	; 0
    5228:	0e 94 39 24 	call	0x4872	; 0x4872 <__cmpsf2>
    522c:	88 23       	and	r24, r24
    522e:	31 f4       	brne	.+12     	; 0x523c <strtod+0x2ae>
    5230:	82 e2       	ldi	r24, 0x22	; 34
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	90 93 a3 06 	sts	0x06A3, r25
    5238:	80 93 a2 06 	sts	0x06A2, r24
    523c:	7e 2d       	mov	r23, r14
    523e:	9f 2d       	mov	r25, r15
    5240:	80 2f       	mov	r24, r16
    5242:	61 2f       	mov	r22, r17
    5244:	27 2f       	mov	r18, r23
    5246:	39 2f       	mov	r19, r25
    5248:	48 2f       	mov	r20, r24
    524a:	56 2f       	mov	r21, r22
    524c:	b9 01       	movw	r22, r18
    524e:	ca 01       	movw	r24, r20
    5250:	df 91       	pop	r29
    5252:	cf 91       	pop	r28
    5254:	1f 91       	pop	r17
    5256:	0f 91       	pop	r16
    5258:	ff 90       	pop	r15
    525a:	ef 90       	pop	r14
    525c:	df 90       	pop	r13
    525e:	cf 90       	pop	r12
    5260:	bf 90       	pop	r11
    5262:	af 90       	pop	r10
    5264:	9f 90       	pop	r9
    5266:	8f 90       	pop	r8
    5268:	08 95       	ret

0000526a <isspace>:
    526a:	91 11       	cpse	r25, r1
    526c:	1e c0       	rjmp	.+60     	; 0x52aa <__ctype_isfalse>
    526e:	80 32       	cpi	r24, 0x20	; 32
    5270:	19 f0       	breq	.+6      	; 0x5278 <isspace+0xe>
    5272:	89 50       	subi	r24, 0x09	; 9
    5274:	85 50       	subi	r24, 0x05	; 5
    5276:	d0 f7       	brcc	.-12     	; 0x526c <isspace+0x2>
    5278:	08 95       	ret

0000527a <strncasecmp_P>:
    527a:	fb 01       	movw	r30, r22
    527c:	dc 01       	movw	r26, r24
    527e:	41 50       	subi	r20, 0x01	; 1
    5280:	50 40       	sbci	r21, 0x00	; 0
    5282:	88 f0       	brcs	.+34     	; 0x52a6 <strncasecmp_P+0x2c>
    5284:	8d 91       	ld	r24, X+
    5286:	81 34       	cpi	r24, 0x41	; 65
    5288:	1c f0       	brlt	.+6      	; 0x5290 <strncasecmp_P+0x16>
    528a:	8b 35       	cpi	r24, 0x5B	; 91
    528c:	0c f4       	brge	.+2      	; 0x5290 <strncasecmp_P+0x16>
    528e:	80 5e       	subi	r24, 0xE0	; 224
    5290:	65 91       	lpm	r22, Z+
    5292:	61 34       	cpi	r22, 0x41	; 65
    5294:	1c f0       	brlt	.+6      	; 0x529c <strncasecmp_P+0x22>
    5296:	6b 35       	cpi	r22, 0x5B	; 91
    5298:	0c f4       	brge	.+2      	; 0x529c <strncasecmp_P+0x22>
    529a:	60 5e       	subi	r22, 0xE0	; 224
    529c:	86 1b       	sub	r24, r22
    529e:	61 11       	cpse	r22, r1
    52a0:	71 f3       	breq	.-36     	; 0x527e <strncasecmp_P+0x4>
    52a2:	99 0b       	sbc	r25, r25
    52a4:	08 95       	ret
    52a6:	88 1b       	sub	r24, r24
    52a8:	fc cf       	rjmp	.-8      	; 0x52a2 <strncasecmp_P+0x28>

000052aa <__ctype_isfalse>:
    52aa:	99 27       	eor	r25, r25
    52ac:	88 27       	eor	r24, r24

000052ae <__ctype_istrue>:
    52ae:	08 95       	ret

000052b0 <_exit>:
    52b0:	f8 94       	cli

000052b2 <__stop_program>:
    52b2:	ff cf       	rjmp	.-2      	; 0x52b2 <__stop_program>
