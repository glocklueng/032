
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000026f  00800200  00800200  00003cb8  2**0
                  ALLOC
  2 .debug_aranges 00000308  00000000  00000000  00003cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000060d  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002490  00000000  00000000  000045cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000c9d  00000000  00000000  00006a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001eab  00000000  00000000  000076fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004b0  00000000  00000000  000095a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000bba  00000000  00000000  00009a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000012bf  00000000  00000000  0000a612  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002e0  00000000  00000000  0000b8d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__ctors_end>
       4:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
       8:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
       c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      10:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      14:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      18:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      1c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      20:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      24:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      28:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      2c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      30:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      34:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      38:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      3c:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__vector_15>
      40:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      44:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__vector_17>
      48:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      4c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      50:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      54:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      58:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      5c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      60:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      64:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__vector_25>
      68:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      6c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      70:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      74:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      78:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      7c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      80:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      84:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      88:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      8c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      90:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      94:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      98:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      9c:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      a0:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      a4:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      a8:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      ac:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      b0:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      b4:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      b8:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      bc:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      c0:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      c4:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      c8:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      cc:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      d0:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      d4:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      d8:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      dc:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      e0:	0c 94 40 02 	jmp	0x480	; 0x480 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 6f       	ori	r19, 0xFF	; 255

00000111 <__c.1567>:
     111:	6f 6b 0a 0d 00                                      ok...

00000116 <__c.1624>:
     116:	0a 0d 00                                            ...

00000119 <__c.1622>:
     119:	65 72 72 6f 72 3a 20 00                             error: .

00000121 <__c.1619>:
     121:	65 72 72 6f 72 3a 20 46 6c 6f 61 74 69 6e 67 20     error: Floating 
     131:	70 6f 69 6e 74 20 65 72 72 6f 72 0a 0d 00           point error...

0000013f <__c.1616>:
     13f:	65 72 72 6f 72 3a 20 55 6e 73 75 70 70 6f 72 74     error: Unsupport
     14f:	65 64 20 73 74 61 74 65 6d 65 6e 74 0a 0d 00        ed statement...

0000015e <__c.1613>:
     15e:	65 72 72 6f 72 3a 20 45 78 70 65 63 74 65 64 20     error: Expected 
     16e:	63 6f 6d 6d 61 6e 64 20 6c 65 74 74 65 72 0a 0d     command letter..
	...

0000017f <__c.1610>:
     17f:	65 72 72 6f 72 3a 20 42 61 64 20 6e 75 6d 62 65     error: Bad numbe
     18f:	72 20 66 6f 72 6d 61 74 0a 0d 00                    r format...

0000019a <__c.1606>:
     19a:	6f 6b 0a 0d 00                                      ok...

0000019f <__c.1631>:
     19f:	0d 0a 00                                            ...

000001a2 <__c.1629>:
     1a2:	0d 0a 4f 70 65 6e 50 6e 50 2f 47 72 62 6c 20 30     ..OpenPnP/Grbl 0
     1b2:	2e 37 36 00                                         .76.

000001b6 <__c.1734>:
     1b6:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
     1c6:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
     1d6:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
     1e6:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

000001f1 <__c.1732>:
     1f1:	27 24 27 20 74 6f 20 64 75 6d 70 20 63 75 72 72     '$' to dump curr
     201:	65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a 00        ent settings...

00000210 <__c.1724>:
     210:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     220:	6e 67 0d 0a 00                                      ng...

00000225 <__c.1722>:
     225:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     235:	72 0d 0a 00                                         r...

00000239 <__c.1679>:
     239:	27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20 73 65     '$x=value' to se
     249:	74 20 70 61 72 61 6d 65 74 65 72 20 6f 72 20 6a     t parameter or j
     259:	75 73 74 20 27 24 27 20 74 6f 20 64 75 6d 70 20     ust '$' to dump 
     269:	63 75 72 72 65 6e 74 20 73 65 74 74 69 6e 67 73     current settings
     279:	0d 0a 00                                            ...

0000027c <__c.1677>:
     27c:	20 28 73 74 65 70 70 65 72 73 3a 20 30 20 3d 20      (steppers: 0 = 
     28c:	64 69 73 61 62 6c 65 64 2c 20 31 20 3d 20 65 6e     disabled, 1 = en
     29c:	61 62 6c 65 64 29 0d 0a 00                          abled)...

000002a5 <__c.1675>:
     2a5:	24 31 30 30 30 20 3d 20 00                          $1000 = .

000002ae <__c.1673>:
     2ae:	20 28 6d 61 78 20 69 6e 73 74 61 6e 74 20 63 6f      (max instant co
     2be:	72 6e 65 72 69 6e 67 20 73 70 65 65 64 20 63 68     rnering speed ch
     2ce:	61 6e 67 65 20 69 6e 20 64 65 6c 74 61 20 6d 6d     ange in delta mm
     2de:	2f 6d 69 6e 29 0d 0a 00                             /min)...

000002e6 <__c.1671>:
     2e6:	24 39 20 3d 20 00                                   $9 = .

000002ec <__c.1669>:
     2ec:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     2fc:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 00           n mm/sec^2)...

0000030a <__c.1667>:
     30a:	24 38 20 3d 20 00                                   $8 = .

00000310 <__c.1665>:
     310:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     320:	29 0d 0a 00                                         )...

00000324 <__c.1663>:
     324:	24 37 20 3d 20 00                                   $7 = .

0000032a <__c.1661>:
     32a:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     33a:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 00            seek rate)...

00000348 <__c.1659>:
     348:	24 36 20 3d 20 00                                   $6 = .

0000034e <__c.1657>:
     34e:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     35e:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 00            feed rate)...

0000036c <__c.1655>:
     36c:	24 35 20 3d 20 00                                   $5 = .

00000372 <__c.1653>:
     372:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     382:	74 65 70 20 70 75 6c 73 65 29 0d 0a 00              tep pulse)...

0000038f <__c.1651>:
     38f:	24 34 20 3d 20 00                                   $4 = .

00000395 <__c.1649>:
     395:	20 28 73 74 65 70 73 2f 64 65 67 2e 20 63 29 0d      (steps/deg. c).
     3a5:	0a 00                                               ..

000003a7 <__c.1647>:
     3a7:	24 33 20 3d 20 00                                   $3 = .

000003ad <__c.1645>:
     3ad:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 00      (steps/mm z)...

000003bd <__c.1643>:
     3bd:	24 32 20 3d 20 00                                   $2 = .

000003c3 <__c.1641>:
     3c3:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 00      (steps/mm y)...

000003d3 <__c.1639>:
     3d3:	24 31 20 3d 20 00                                   $1 = .

000003d9 <__c.1637>:
     3d9:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 00      (steps/mm x)...

000003e9 <__c.1635>:
     3e9:	24 30 20 3d 20 00                                   $0 = .

000003ef <__c.1633>:
     3ef:	0d 0a 00                                            ...

000003f2 <__c.1631>:
     3f2:	30 2e 37 36 00                                      0.76.

000003f7 <__c.1629>:
     3f7:	24 56 45 52 53 49 4f 4e 20 3d 20 00                 $VERSION = .

00000403 <pstr_inf>:
     403:	49 4e 46                                            INF

00000406 <pstr_inity>:
     406:	49 4e 49 54 59                                      INITY

0000040b <pstr_nan>:
     40b:	4e 41 4e                                            NAN

0000040e <pwr_m10>:
     40e:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     41e:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000426 <pwr_p10>:
     426:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     436:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000043e <__ctors_end>:
     43e:	11 24       	eor	r1, r1
     440:	1f be       	out	0x3f, r1	; 63
     442:	cf ef       	ldi	r28, 0xFF	; 255
     444:	d1 e2       	ldi	r29, 0x21	; 33
     446:	de bf       	out	0x3e, r29	; 62
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	00 e0       	ldi	r16, 0x00	; 0
     44c:	0c bf       	out	0x3c, r16	; 60

0000044e <__do_copy_data>:
     44e:	12 e0       	ldi	r17, 0x02	; 2
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b2 e0       	ldi	r27, 0x02	; 2
     454:	e4 e4       	ldi	r30, 0x44	; 68
     456:	fc e3       	ldi	r31, 0x3C	; 60
     458:	00 e0       	ldi	r16, 0x00	; 0
     45a:	0b bf       	out	0x3b, r16	; 59
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__do_copy_data+0x14>
     45e:	07 90       	elpm	r0, Z+
     460:	0d 92       	st	X+, r0
     462:	a0 30       	cpi	r26, 0x00	; 0
     464:	b1 07       	cpc	r27, r17
     466:	d9 f7       	brne	.-10     	; 0x45e <__do_copy_data+0x10>

00000468 <__do_clear_bss>:
     468:	14 e0       	ldi	r17, 0x04	; 4
     46a:	a0 e0       	ldi	r26, 0x00	; 0
     46c:	b2 e0       	ldi	r27, 0x02	; 2
     46e:	01 c0       	rjmp	.+2      	; 0x472 <.do_clear_bss_start>

00000470 <.do_clear_bss_loop>:
     470:	1d 92       	st	X+, r1

00000472 <.do_clear_bss_start>:
     472:	af 36       	cpi	r26, 0x6F	; 111
     474:	b1 07       	cpc	r27, r17
     476:	e1 f7       	brne	.-8      	; 0x470 <.do_clear_bss_loop>
     478:	0e 94 57 07 	call	0xeae	; 0xeae <main>
     47c:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <_exit>

00000480 <__bad_interrupt>:
     480:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000484 <coolant_init>:

#include <avr/io.h>

void coolant_init()
{
  FLOOD_COOLANT_DDR |= 1<<FLOOD_COOLANT_BIT;
     484:	24 9a       	sbi	0x04, 4	; 4
}
     486:	08 95       	ret

00000488 <coolant_flood>:

void coolant_flood(int on) 
{
  if (on) {
     488:	89 2b       	or	r24, r25
     48a:	11 f0       	breq	.+4      	; 0x490 <coolant_flood+0x8>
    FLOOD_COOLANT_PORT |= 1<<FLOOD_COOLANT_BIT;
     48c:	2c 9a       	sbi	0x05, 4	; 5
     48e:	08 95       	ret
  }
  else {
    FLOOD_COOLANT_PORT &= ~(1<<FLOOD_COOLANT_BIT);
     490:	2c 98       	cbi	0x05, 4	; 5
     492:	08 95       	ret

00000494 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     494:	f9 99       	sbic	0x1f, 1	; 31
     496:	fe cf       	rjmp	.-4      	; 0x494 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
     498:	92 bd       	out	0x22, r25	; 34
     49a:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     4a0:	80 b5       	in	r24, 0x20	; 32
}
     4a2:	08 95       	ret

000004a4 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
     4a4:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     4a6:	f9 99       	sbic	0x1f, 1	; 31
     4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
     4aa:	92 bd       	out	0x22, r25	; 34
     4ac:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
     4b2:	90 b5       	in	r25, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
     4b4:	96 27       	eor	r25, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
     4b6:	89 2f       	mov	r24, r25
     4b8:	86 23       	and	r24, r22
     4ba:	39 f0       	breq	.+14     	; 0x4ca <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
     4bc:	6f 3f       	cpi	r22, 0xFF	; 255
     4be:	19 f0       	breq	.+6      	; 0x4c6 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
     4c0:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     4c6:	84 e1       	ldi	r24, 0x14	; 20
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
     4ca:	99 23       	and	r25, r25
     4cc:	21 f0       	breq	.+8      	; 0x4d6 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
     4ce:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
     4d0:	84 e2       	ldi	r24, 0x24	; 36
     4d2:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
     4d4:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
     4d6:	78 94       	sei
}
     4d8:	08 95       	ret

000004da <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	df 93       	push	r29
     4ee:	cf 93       	push	r28
     4f0:	0f 92       	push	r0
     4f2:	0f 92       	push	r0
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	5c 01       	movw	r10, r24
     4fa:	6b 01       	movw	r12, r22
     4fc:	7a 01       	movw	r14, r20
     4fe:	4a 01       	movw	r8, r20
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	1e c0       	rjmp	.+60     	; 0x540 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
     504:	00 23       	and	r16, r16
     506:	19 f0       	breq	.+6      	; 0x50e <memcpy_to_eeprom_with_checksum+0x34>
     508:	21 e0       	ldi	r18, 0x01	; 1
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	08 c0       	rjmp	.+16     	; 0x51e <memcpy_to_eeprom_with_checksum+0x44>
     50e:	20 2f       	mov	r18, r16
     510:	33 27       	eor	r19, r19
     512:	27 fd       	sbrc	r18, 7
     514:	30 95       	com	r19
     516:	22 27       	eor	r18, r18
     518:	33 0f       	add	r19, r19
     51a:	22 1f       	adc	r18, r18
     51c:	33 27       	eor	r19, r19
    checksum += *source;
     51e:	f6 01       	movw	r30, r12
     520:	61 91       	ld	r22, Z+
     522:	6f 01       	movw	r12, r30
     524:	06 2f       	mov	r16, r22
     526:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
     528:	9c 01       	movw	r18, r24
     52a:	2f 5f       	subi	r18, 0xFF	; 255
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	3a 83       	std	Y+2, r19	; 0x02
     530:	29 83       	std	Y+1, r18	; 0x01
     532:	0e 94 52 02 	call	0x4a4	; 0x4a4 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
     536:	08 94       	sec
     538:	81 08       	sbc	r8, r1
     53a:	91 08       	sbc	r9, r1
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	81 14       	cp	r8, r1
     542:	91 04       	cpc	r9, r1
     544:	f9 f6       	brne	.-66     	; 0x504 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
     546:	c7 01       	movw	r24, r14
     548:	8a 0d       	add	r24, r10
     54a:	9b 1d       	adc	r25, r11
     54c:	60 2f       	mov	r22, r16
     54e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <eeprom_put_char>
}
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	cf 91       	pop	r28
     558:	df 91       	pop	r29
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	bf 90       	pop	r11
     566:	af 90       	pop	r10
     568:	9f 90       	pop	r9
     56a:	8f 90       	pop	r8
     56c:	08 95       	ret

0000056e <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
     574:	fb 01       	movw	r30, r22
     576:	9a 01       	movw	r18, r20
     578:	90 e0       	ldi	r25, 0x00	; 0
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
     57a:	b1 e0       	ldi	r27, 0x01	; 1
     57c:	19 c0       	rjmp	.+50     	; 0x5b0 <memcpy_from_eeprom_with_checksum+0x42>
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     57e:	f9 99       	sbic	0x1f, 1	; 31
     580:	fe cf       	rjmp	.-4      	; 0x57e <memcpy_from_eeprom_with_checksum+0x10>
	EEAR = addr; // Set EEPROM address register.
     582:	f2 bd       	out	0x22, r31	; 34
     584:	e1 bd       	out	0x21, r30	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     586:	bf bb       	out	0x1f, r27	; 31
	return EEDR; // Return the byte read from EEPROM.
     588:	a0 b5       	in	r26, 0x20	; 32

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
     58a:	99 23       	and	r25, r25
     58c:	19 f0       	breq	.+6      	; 0x594 <memcpy_from_eeprom_with_checksum+0x26>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	08 c0       	rjmp	.+16     	; 0x5a4 <memcpy_from_eeprom_with_checksum+0x36>
     594:	89 2f       	mov	r24, r25
     596:	99 27       	eor	r25, r25
     598:	87 fd       	sbrc	r24, 7
     59a:	90 95       	com	r25
     59c:	88 27       	eor	r24, r24
     59e:	99 0f       	add	r25, r25
     5a0:	88 1f       	adc	r24, r24
     5a2:	99 27       	eor	r25, r25
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
     5a4:	31 96       	adiw	r30, 0x01	; 1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
     5a6:	9a 2f       	mov	r25, r26
     5a8:	98 0f       	add	r25, r24
    *(destination++) = data; 
     5aa:	a9 93       	st	Y+, r26
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
     5ac:	21 50       	subi	r18, 0x01	; 1
     5ae:	30 40       	sbci	r19, 0x00	; 0
     5b0:	21 15       	cp	r18, r1
     5b2:	31 05       	cpc	r19, r1
     5b4:	21 f7       	brne	.-56     	; 0x57e <memcpy_from_eeprom_with_checksum+0x10>
     5b6:	46 0f       	add	r20, r22
     5b8:	57 1f       	adc	r21, r23
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
     5ba:	f9 99       	sbic	0x1f, 1	; 31
     5bc:	fe cf       	rjmp	.-4      	; 0x5ba <memcpy_from_eeprom_with_checksum+0x4c>
	EEAR = addr; // Set EEPROM address register.
     5be:	52 bd       	out	0x22, r21	; 34
     5c0:	41 bd       	out	0x21, r20	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
     5c6:	80 b5       	in	r24, 0x20	; 32
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	98 17       	cp	r25, r24
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <memcpy_from_eeprom_with_checksum+0x66>
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	30 e0       	ldi	r19, 0x00	; 0
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
}
     5d4:	c9 01       	movw	r24, r18
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <select_plane>:
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     5dc:	80 93 25 02 	sts	0x0225, r24
  gc.plane_axis_1 = axis_1;
     5e0:	60 93 26 02 	sts	0x0226, r22
  gc.plane_axis_2 = axis_2;
     5e4:	40 93 27 02 	sts	0x0227, r20
}
     5e8:	08 95       	ret

000005ea <read_double>:
}

int read_double(char *line,               //!< string: line of RS274/NGC code being processed
                     int *char_counter,   //!< pointer to a counter for position on the line 
                     double *double_ptr)  //!< pointer to double to be read                  
{
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	0f 92       	push	r0
     600:	0f 92       	push	r0
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
     606:	6c 01       	movw	r12, r24
     608:	5b 01       	movw	r10, r22
     60a:	7a 01       	movw	r14, r20
  char *start = line + *char_counter;
     60c:	fb 01       	movw	r30, r22
     60e:	00 81       	ld	r16, Z
     610:	11 81       	ldd	r17, Z+1	; 0x01
     612:	08 0f       	add	r16, r24
     614:	19 1f       	adc	r17, r25
  char *end;
  
  *double_ptr = strtod(start, &end);
     616:	c8 01       	movw	r24, r16
     618:	be 01       	movw	r22, r28
     61a:	6f 5f       	subi	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	0e 94 8f 1c 	call	0x391e	; 0x391e <strtod>
     622:	f7 01       	movw	r30, r14
     624:	60 83       	st	Z, r22
     626:	71 83       	std	Z+1, r23	; 0x01
     628:	82 83       	std	Z+2, r24	; 0x02
     62a:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	80 17       	cp	r24, r16
     632:	91 07       	cpc	r25, r17
     634:	31 f4       	brne	.+12     	; 0x642 <read_double+0x58>
    FAIL(GCSTATUS_BAD_NUMBER_FORMAT); 
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	80 93 00 02 	sts	0x0200, r24
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	07 c0       	rjmp	.+14     	; 0x650 <read_double+0x66>
    return(0); 
  };

  *char_counter = end - line;
     642:	8c 19       	sub	r24, r12
     644:	9d 09       	sbc	r25, r13
     646:	f5 01       	movw	r30, r10
     648:	91 83       	std	Z+1, r25	; 0x01
     64a:	80 83       	st	Z, r24
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
  return(1);
}
     650:	c9 01       	movw	r24, r18
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	bf 90       	pop	r11
     668:	af 90       	pop	r10
     66a:	08 95       	ret

0000066c <next_statement>:
}

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter) {
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	ec 01       	movw	r28, r24
     676:	8b 01       	movw	r16, r22
     678:	d9 01       	movw	r26, r18
  if (line[*char_counter] == 0) {
     67a:	ed 91       	ld	r30, X+
     67c:	fc 91       	ld	r31, X
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	e4 0f       	add	r30, r20
     682:	f5 1f       	adc	r31, r21
     684:	e0 81       	ld	r30, Z
     686:	ee 23       	and	r30, r30
     688:	39 f0       	breq	.+14     	; 0x698 <next_statement+0x2c>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     68a:	e8 83       	st	Y, r30
  if((*letter < 'A') || (*letter > 'Z')) {
     68c:	e1 54       	subi	r30, 0x41	; 65
     68e:	ea 31       	cpi	r30, 0x1A	; 26
     690:	30 f0       	brcs	.+12     	; 0x69e <next_statement+0x32>
    FAIL(GCSTATUS_EXPECTED_COMMAND_LETTER);
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	80 93 00 02 	sts	0x0200, r24
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	10 c0       	rjmp	.+32     	; 0x6be <next_statement+0x52>
    return(0);
  }
  (*char_counter)++;
     69e:	8d 91       	ld	r24, X+
     6a0:	9c 91       	ld	r25, X
     6a2:	11 97       	sbiw	r26, 0x01	; 1
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	8d 93       	st	X+, r24
     6a8:	9c 93       	st	X, r25
  if (!read_double(line, char_counter, double_ptr)) {
     6aa:	ca 01       	movw	r24, r20
     6ac:	b9 01       	movw	r22, r18
     6ae:	a8 01       	movw	r20, r16
     6b0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <read_double>
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	11 f0       	breq	.+4      	; 0x6bc <next_statement+0x50>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	9c 01       	movw	r18, r24
    return(0);
  };
  return(1);
}
     6be:	c9 01       	movw	r24, r18
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <gc_init>:
  gc.plane_axis_1 = axis_1;
  gc.plane_axis_2 = axis_2;
}

void gc_init() {
  memset(&gc, 0, sizeof(gc));
     6ca:	88 e2       	ldi	r24, 0x28	; 40
     6cc:	e0 e0       	ldi	r30, 0x00	; 0
     6ce:	f2 e0       	ldi	r31, 0x02	; 2
     6d0:	df 01       	movw	r26, r30
     6d2:	1d 92       	st	X+, r1
     6d4:	8a 95       	dec	r24
     6d6:	e9 f7       	brne	.-6      	; 0x6d2 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate/60;
     6d8:	60 91 59 04 	lds	r22, 0x0459
     6dc:	70 91 5a 04 	lds	r23, 0x045A
     6e0:	80 91 5b 04 	lds	r24, 0x045B
     6e4:	90 91 5c 04 	lds	r25, 0x045C
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e7       	ldi	r20, 0x70	; 112
     6ee:	52 e4       	ldi	r21, 0x42	; 66
     6f0:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
     6f4:	60 93 0a 02 	sts	0x020A, r22
     6f8:	70 93 0b 02 	sts	0x020B, r23
     6fc:	80 93 0c 02 	sts	0x020C, r24
     700:	90 93 0d 02 	sts	0x020D, r25
  gc.seek_rate = settings.default_seek_rate/60;
     704:	60 91 5d 04 	lds	r22, 0x045D
     708:	70 91 5e 04 	lds	r23, 0x045E
     70c:	80 91 5f 04 	lds	r24, 0x045F
     710:	90 91 60 04 	lds	r25, 0x0460
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e7       	ldi	r20, 0x70	; 112
     71a:	52 e4       	ldi	r21, 0x42	; 66
     71c:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
     720:	60 93 0e 02 	sts	0x020E, r22
     724:	70 93 0f 02 	sts	0x020F, r23
     728:	80 93 10 02 	sts	0x0210, r24
     72c:	90 93 11 02 	sts	0x0211, r25
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     730:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	90 93 26 02 	sts	0x0226, r25
  gc.plane_axis_2 = axis_2;
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	80 93 27 02 	sts	0x0227, r24
void gc_init() {
  memset(&gc, 0, sizeof(gc));
  gc.feed_rate = settings.default_feed_rate/60;
  gc.seek_rate = settings.default_seek_rate/60;
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
     740:	90 93 04 02 	sts	0x0204, r25
}
     744:	08 95       	ret

00000746 <gc_execute_line>:
  }
}

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace).
uint8_t gc_execute_line(char *line) {
     746:	2f 92       	push	r2
     748:	3f 92       	push	r3
     74a:	4f 92       	push	r4
     74c:	5f 92       	push	r5
     74e:	6f 92       	push	r6
     750:	7f 92       	push	r7
     752:	8f 92       	push	r8
     754:	9f 92       	push	r9
     756:	af 92       	push	r10
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	e2 97       	sbiw	r28, 0x32	; 50
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	5c 01       	movw	r10, r24
  int char_counter = 0;  
     77c:	1b 82       	std	Y+3, r1	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
  uint8_t absolute_override = FALSE;          /* 1 = absolute motion for this block only {G53} */
  uint8_t next_action = NEXT_ACTION_DEFAULT;  /* The action that will be taken by the parsed line */
  
  double target[4], offset[4];  
  
  double p = 0, r = 0;
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	88 87       	std	Y+8, r24	; 0x08
     78a:	99 87       	std	Y+9, r25	; 0x09
     78c:	aa 87       	std	Y+10, r26	; 0x0a
     78e:	bb 87       	std	Y+11, r27	; 0x0b
  int int_value;
  
  clear_vector(target);
     790:	80 e1       	ldi	r24, 0x10	; 16
     792:	fe 01       	movw	r30, r28
     794:	3c 96       	adiw	r30, 0x0c	; 12
     796:	df 01       	movw	r26, r30
     798:	98 2f       	mov	r25, r24
     79a:	1d 92       	st	X+, r1
     79c:	9a 95       	dec	r25
     79e:	e9 f7       	brne	.-6      	; 0x79a <gc_execute_line+0x54>
  clear_vector(offset);
     7a0:	fe 01       	movw	r30, r28
     7a2:	7c 96       	adiw	r30, 0x1c	; 28
     7a4:	df 01       	movw	r26, r30
     7a6:	1d 92       	st	X+, r1
     7a8:	8a 95       	dec	r24
     7aa:	e9 f7       	brne	.-6      	; 0x7a6 <gc_execute_line+0x60>

  gc.status_code = GCSTATUS_OK;
     7ac:	10 92 00 02 	sts	0x0200, r1
  
  // Disregard comments and block delete
  if (line[0] == '(') { return(gc.status_code); }
     7b0:	f5 01       	movw	r30, r10
     7b2:	80 81       	ld	r24, Z
     7b4:	88 32       	cpi	r24, 0x28	; 40
     7b6:	41 f1       	breq	.+80     	; 0x808 <gc_execute_line+0xc2>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
     7b8:	8f 32       	cpi	r24, 0x2F	; 47
     7ba:	29 f4       	brne	.+10     	; 0x7c6 <gc_execute_line+0x80>
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	9b 81       	ldd	r25, Y+3	; 0x03
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	9b 83       	std	Y+3, r25	; 0x03
     7c4:	8a 83       	std	Y+2, r24	; 0x02
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
     7c6:	d5 01       	movw	r26, r10
     7c8:	8c 91       	ld	r24, X
     7ca:	84 32       	cpi	r24, 0x24	; 36
     7cc:	99 f0       	breq	.+38     	; 0x7f4 <gc_execute_line+0xae>
     7ce:	77 24       	eor	r7, r7
     7d0:	1c a6       	std	Y+44, r1	; 0x2c
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     7d2:	1e 01       	movw	r2, r28
     7d4:	08 94       	sec
     7d6:	21 1c       	adc	r2, r1
     7d8:	31 1c       	adc	r3, r1
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
     7da:	44 24       	eor	r4, r4
     7dc:	4a 94       	dec	r4
     7de:	54 2c       	mov	r5, r4
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
        case 9: gc.coolant_flood = 0; break;
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     7e0:	b3 e0       	ldi	r27, 0x03	; 3
     7e2:	6b 2e       	mov	r6, r27
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     7e4:	a2 e0       	ldi	r26, 0x02	; 2
     7e6:	ca 2e       	mov	r12, r26
        case 3: gc.spindle_direction = 1; break;
        case 4: gc.spindle_direction = -1; break;
        case 5: gc.spindle_direction = 0; break;
        case 8: gc.coolant_flood = 1; break;
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	8f 2e       	mov	r8, r31
     7ec:	91 2c       	mov	r9, r1
      }
      break;
      
      case 'M':
      switch(int_value) {
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     7ee:	dd 24       	eor	r13, r13
     7f0:	d3 94       	inc	r13
     7f2:	2b c1       	rjmp	.+598    	; 0xa4a <gc_execute_line+0x304>
  if (line[0] == '/') { char_counter++; } // ignore block delete  
  
  // If the line starts with an '$' it is a configuration-command
  if (line[0] == '$') { 
    // Parameter lines are on the form '$4=374.3' or '$' to dump current settings
    char_counter = 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9b 83       	std	Y+3, r25	; 0x03
     7fa:	8a 83       	std	Y+2, r24	; 0x02
    if(line[char_counter] == 0) { settings_dump(); return(GCSTATUS_OK); }
     7fc:	f5 01       	movw	r30, r10
     7fe:	81 81       	ldd	r24, Z+1	; 0x01
     800:	88 23       	and	r24, r24
     802:	21 f4       	brne	.+8      	; 0x80c <gc_execute_line+0xc6>
     804:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <settings_dump>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	f9 c2       	rjmp	.+1522   	; 0xdfe <gc_execute_line+0x6b8>
    read_double(line, &char_counter, &p);
     80c:	8e 01       	movw	r16, r28
     80e:	0e 5f       	subi	r16, 0xFE	; 254
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	c5 01       	movw	r24, r10
     814:	b8 01       	movw	r22, r16
     816:	ae 01       	movw	r20, r28
     818:	48 5f       	subi	r20, 0xF8	; 248
     81a:	5f 4f       	sbci	r21, 0xFF	; 255
     81c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <read_double>
    if(line[char_counter++] != '=') { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     820:	2a 81       	ldd	r18, Y+2	; 0x02
     822:	3b 81       	ldd	r19, Y+3	; 0x03
     824:	f5 01       	movw	r30, r10
     826:	e2 0f       	add	r30, r18
     828:	f3 1f       	adc	r31, r19
     82a:	80 81       	ld	r24, Z
     82c:	8d 33       	cpi	r24, 0x3D	; 61
     82e:	09 f0       	breq	.+2      	; 0x832 <gc_execute_line+0xec>
     830:	e5 c2       	rjmp	.+1482   	; 0xdfc <gc_execute_line+0x6b6>
     832:	2f 5f       	subi	r18, 0xFF	; 255
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	3b 83       	std	Y+3, r19	; 0x03
     838:	2a 83       	std	Y+2, r18	; 0x02
    read_double(line, &char_counter, &value);
     83a:	c5 01       	movw	r24, r10
     83c:	b8 01       	movw	r22, r16
     83e:	ae 01       	movw	r20, r28
     840:	4c 5f       	subi	r20, 0xFC	; 252
     842:	5f 4f       	sbci	r21, 0xFF	; 255
     844:	0e 94 f5 02 	call	0x5ea	; 0x5ea <read_double>
    if(line[char_counter] != 0) { return(GCSTATUS_UNSUPPORTED_STATEMENT); }
     848:	ea 81       	ldd	r30, Y+2	; 0x02
     84a:	fb 81       	ldd	r31, Y+3	; 0x03
     84c:	ea 0d       	add	r30, r10
     84e:	fb 1d       	adc	r31, r11
     850:	80 81       	ld	r24, Z
     852:	88 23       	and	r24, r24
     854:	09 f0       	breq	.+2      	; 0x858 <gc_execute_line+0x112>
     856:	d2 c2       	rjmp	.+1444   	; 0xdfc <gc_execute_line+0x6b6>
    settings_store_setting(p, value);
     858:	68 85       	ldd	r22, Y+8	; 0x08
     85a:	79 85       	ldd	r23, Y+9	; 0x09
     85c:	8a 85       	ldd	r24, Y+10	; 0x0a
     85e:	9b 85       	ldd	r25, Y+11	; 0x0b
     860:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	4c 81       	ldd	r20, Y+4	; 0x04
     86a:	5d 81       	ldd	r21, Y+5	; 0x05
     86c:	6e 81       	ldd	r22, Y+6	; 0x06
     86e:	7f 81       	ldd	r23, Y+7	; 0x07
     870:	0e 94 66 11 	call	0x22cc	; 0x22cc <settings_store_setting>
     874:	c0 c2       	rjmp	.+1408   	; 0xdf6 <gc_execute_line+0x6b0>
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
     876:	6c 81       	ldd	r22, Y+4	; 0x04
     878:	7d 81       	ldd	r23, Y+5	; 0x05
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	9f 81       	ldd	r25, Y+7	; 0x07
     87e:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <trunc>
     882:	7b 01       	movw	r14, r22
     884:	8c 01       	movw	r16, r24
     886:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
    switch(letter) {
     88a:	49 81       	ldd	r20, Y+1	; 0x01
     88c:	4d 34       	cpi	r20, 0x4D	; 77
     88e:	09 f4       	brne	.+2      	; 0x892 <gc_execute_line+0x14c>
     890:	8d c0       	rjmp	.+282    	; 0x9ac <gc_execute_line+0x266>
     892:	44 35       	cpi	r20, 0x54	; 84
     894:	09 f4       	brne	.+2      	; 0x898 <gc_execute_line+0x152>
     896:	cf c0       	rjmp	.+414    	; 0xa36 <gc_execute_line+0x2f0>
     898:	47 34       	cpi	r20, 0x47	; 71
     89a:	09 f0       	breq	.+2      	; 0x89e <gc_execute_line+0x158>
     89c:	d2 c0       	rjmp	.+420    	; 0xa42 <gc_execute_line+0x2fc>
      case 'G':
      switch(int_value) {
     89e:	6c 31       	cpi	r22, 0x1C	; 28
     8a0:	71 05       	cpc	r23, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <gc_execute_line+0x160>
     8a4:	46 c0       	rjmp	.+140    	; 0x932 <gc_execute_line+0x1ec>
     8a6:	6d 31       	cpi	r22, 0x1D	; 29
     8a8:	71 05       	cpc	r23, r1
     8aa:	14 f5       	brge	.+68     	; 0x8f0 <gc_execute_line+0x1aa>
     8ac:	61 31       	cpi	r22, 0x11	; 17
     8ae:	71 05       	cpc	r23, r1
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <gc_execute_line+0x16e>
     8b2:	4b c0       	rjmp	.+150    	; 0x94a <gc_execute_line+0x204>
     8b4:	62 31       	cpi	r22, 0x12	; 18
     8b6:	71 05       	cpc	r23, r1
     8b8:	5c f4       	brge	.+22     	; 0x8d0 <gc_execute_line+0x18a>
     8ba:	61 30       	cpi	r22, 0x01	; 1
     8bc:	71 05       	cpc	r23, r1
     8be:	09 f4       	brne	.+2      	; 0x8c2 <gc_execute_line+0x17c>
     8c0:	41 c0       	rjmp	.+130    	; 0x944 <gc_execute_line+0x1fe>
     8c2:	64 30       	cpi	r22, 0x04	; 4
     8c4:	71 05       	cpc	r23, r1
     8c6:	c1 f1       	breq	.+112    	; 0x938 <gc_execute_line+0x1f2>
     8c8:	61 15       	cp	r22, r1
     8ca:	71 05       	cpc	r23, r1
     8cc:	c1 f1       	breq	.+112    	; 0x93e <gc_execute_line+0x1f8>
     8ce:	b0 c0       	rjmp	.+352    	; 0xa30 <gc_execute_line+0x2ea>
     8d0:	63 31       	cpi	r22, 0x13	; 19
     8d2:	71 05       	cpc	r23, r1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <gc_execute_line+0x192>
     8d6:	47 c0       	rjmp	.+142    	; 0x966 <gc_execute_line+0x220>
     8d8:	63 31       	cpi	r22, 0x13	; 19
     8da:	71 05       	cpc	r23, r1
     8dc:	ec f1       	brlt	.+122    	; 0x958 <gc_execute_line+0x212>
     8de:	64 31       	cpi	r22, 0x14	; 20
     8e0:	71 05       	cpc	r23, r1
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <gc_execute_line+0x1a0>
     8e4:	47 c0       	rjmp	.+142    	; 0x974 <gc_execute_line+0x22e>
     8e6:	65 31       	cpi	r22, 0x15	; 21
     8e8:	71 05       	cpc	r23, r1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <gc_execute_line+0x1a8>
     8ec:	a1 c0       	rjmp	.+322    	; 0xa30 <gc_execute_line+0x2ea>
     8ee:	45 c0       	rjmp	.+138    	; 0x97a <gc_execute_line+0x234>
     8f0:	6a 35       	cpi	r22, 0x5A	; 90
     8f2:	71 05       	cpc	r23, r1
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <gc_execute_line+0x1b2>
     8f6:	4b c0       	rjmp	.+150    	; 0x98e <gc_execute_line+0x248>
     8f8:	6b 35       	cpi	r22, 0x5B	; 91
     8fa:	71 05       	cpc	r23, r1
     8fc:	5c f4       	brge	.+22     	; 0x914 <gc_execute_line+0x1ce>
     8fe:	65 33       	cpi	r22, 0x35	; 53
     900:	71 05       	cpc	r23, r1
     902:	f1 f1       	breq	.+124    	; 0x980 <gc_execute_line+0x23a>
     904:	60 35       	cpi	r22, 0x50	; 80
     906:	71 05       	cpc	r23, r1
     908:	f1 f1       	breq	.+124    	; 0x986 <gc_execute_line+0x240>
     90a:	6e 31       	cpi	r22, 0x1E	; 30
     90c:	71 05       	cpc	r23, r1
     90e:	09 f0       	breq	.+2      	; 0x912 <gc_execute_line+0x1cc>
     910:	8f c0       	rjmp	.+286    	; 0xa30 <gc_execute_line+0x2ea>
     912:	0f c0       	rjmp	.+30     	; 0x932 <gc_execute_line+0x1ec>
     914:	6c 35       	cpi	r22, 0x5C	; 92
     916:	71 05       	cpc	r23, r1
     918:	09 f4       	brne	.+2      	; 0x91c <gc_execute_line+0x1d6>
     91a:	3f c0       	rjmp	.+126    	; 0x99a <gc_execute_line+0x254>
     91c:	6c 35       	cpi	r22, 0x5C	; 92
     91e:	71 05       	cpc	r23, r1
     920:	cc f1       	brlt	.+114    	; 0x994 <gc_execute_line+0x24e>
     922:	6d 35       	cpi	r22, 0x5D	; 93
     924:	71 05       	cpc	r23, r1
     926:	e1 f1       	breq	.+120    	; 0x9a0 <gc_execute_line+0x25a>
     928:	6e 35       	cpi	r22, 0x5E	; 94
     92a:	71 05       	cpc	r23, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <gc_execute_line+0x1ea>
     92e:	80 c0       	rjmp	.+256    	; 0xa30 <gc_execute_line+0x2ea>
     930:	3a c0       	rjmp	.+116    	; 0x9a6 <gc_execute_line+0x260>
     932:	f2 e0       	ldi	r31, 0x02	; 2
     934:	fc a7       	std	Y+44, r31	; 0x2c
     936:	85 c0       	rjmp	.+266    	; 0xa42 <gc_execute_line+0x2fc>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	8c a7       	std	Y+44, r24	; 0x2c
     93c:	82 c0       	rjmp	.+260    	; 0xa42 <gc_execute_line+0x2fc>
        case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
     93e:	10 92 01 02 	sts	0x0201, r1
     942:	7f c0       	rjmp	.+254    	; 0xa42 <gc_execute_line+0x2fc>
        case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
     944:	d0 92 01 02 	sts	0x0201, r13
     948:	7c c0       	rjmp	.+248    	; 0xa42 <gc_execute_line+0x2fc>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     94a:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     94e:	d0 92 26 02 	sts	0x0226, r13
  gc.plane_axis_2 = axis_2;
     952:	c0 92 27 02 	sts	0x0227, r12
     956:	75 c0       	rjmp	.+234    	; 0xa42 <gc_execute_line+0x2fc>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     958:	10 92 25 02 	sts	0x0225, r1
  gc.plane_axis_1 = axis_1;
     95c:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     960:	d0 92 27 02 	sts	0x0227, r13
     964:	6e c0       	rjmp	.+220    	; 0xa42 <gc_execute_line+0x2fc>
int next_statement(char *letter, double *double_ptr, char *line, int *char_counter);


void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     966:	d0 92 25 02 	sts	0x0225, r13
  gc.plane_axis_1 = axis_1;
     96a:	c0 92 26 02 	sts	0x0226, r12
  gc.plane_axis_2 = axis_2;
     96e:	10 92 27 02 	sts	0x0227, r1
     972:	67 c0       	rjmp	.+206    	; 0xa42 <gc_execute_line+0x2fc>
#endif        
        case 4: next_action = NEXT_ACTION_DWELL; break;
        case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
        case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
        case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
        case 20: gc.inches_mode = TRUE; break;
     974:	d0 92 03 02 	sts	0x0203, r13
     978:	64 c0       	rjmp	.+200    	; 0xa42 <gc_execute_line+0x2fc>
        case 21: gc.inches_mode = FALSE; break;
     97a:	10 92 03 02 	sts	0x0203, r1
     97e:	61 c0       	rjmp	.+194    	; 0xa42 <gc_execute_line+0x2fc>
     980:	77 24       	eor	r7, r7
     982:	73 94       	inc	r7
     984:	5e c0       	rjmp	.+188    	; 0xa42 <gc_execute_line+0x2fc>
        case 28: case 30: next_action = NEXT_ACTION_GO_HOME; break;
        case 53: absolute_override = TRUE; break;
        case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	90 93 01 02 	sts	0x0201, r25
     98c:	5a c0       	rjmp	.+180    	; 0xa42 <gc_execute_line+0x2fc>
        case 90: gc.absolute_mode = TRUE; break;
     98e:	d0 92 04 02 	sts	0x0204, r13
     992:	57 c0       	rjmp	.+174    	; 0xa42 <gc_execute_line+0x2fc>
        case 91: gc.absolute_mode = FALSE; break;
     994:	10 92 04 02 	sts	0x0204, r1
     998:	54 c0       	rjmp	.+168    	; 0xa42 <gc_execute_line+0x2fc>
     99a:	a3 e0       	ldi	r26, 0x03	; 3
     99c:	ac a7       	std	Y+44, r26	; 0x2c
     99e:	51 c0       	rjmp	.+162    	; 0xa42 <gc_execute_line+0x2fc>
        case 92: next_action = NEXT_ACTION_SET_OFFSETS; break;
        case 93: gc.inverse_feed_rate_mode = TRUE; break;
     9a0:	d0 92 02 02 	sts	0x0202, r13
     9a4:	4e c0       	rjmp	.+156    	; 0xa42 <gc_execute_line+0x2fc>
        case 94: gc.inverse_feed_rate_mode = FALSE; break;
     9a6:	10 92 02 02 	sts	0x0202, r1
     9aa:	4b c0       	rjmp	.+150    	; 0xa42 <gc_execute_line+0x2fc>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
      }
      break;
      
      case 'M':
      switch(int_value) {
     9ac:	64 30       	cpi	r22, 0x04	; 4
     9ae:	71 05       	cpc	r23, r1
     9b0:	59 f1       	breq	.+86     	; 0xa08 <gc_execute_line+0x2c2>
     9b2:	65 30       	cpi	r22, 0x05	; 5
     9b4:	71 05       	cpc	r23, r1
     9b6:	4c f4       	brge	.+18     	; 0x9ca <gc_execute_line+0x284>
     9b8:	62 30       	cpi	r22, 0x02	; 2
     9ba:	71 05       	cpc	r23, r1
     9bc:	e9 f0       	breq	.+58     	; 0x9f8 <gc_execute_line+0x2b2>
     9be:	63 30       	cpi	r22, 0x03	; 3
     9c0:	71 05       	cpc	r23, r1
     9c2:	ec f4       	brge	.+58     	; 0x9fe <gc_execute_line+0x2b8>
     9c4:	77 23       	and	r23, r23
     9c6:	ac f4       	brge	.+42     	; 0x9f2 <gc_execute_line+0x2ac>
     9c8:	33 c0       	rjmp	.+102    	; 0xa30 <gc_execute_line+0x2ea>
     9ca:	69 30       	cpi	r22, 0x09	; 9
     9cc:	71 05       	cpc	r23, r1
     9ce:	59 f1       	breq	.+86     	; 0xa26 <gc_execute_line+0x2e0>
     9d0:	6a 30       	cpi	r22, 0x0A	; 10
     9d2:	71 05       	cpc	r23, r1
     9d4:	3c f4       	brge	.+14     	; 0x9e4 <gc_execute_line+0x29e>
     9d6:	65 30       	cpi	r22, 0x05	; 5
     9d8:	71 05       	cpc	r23, r1
     9da:	d9 f0       	breq	.+54     	; 0xa12 <gc_execute_line+0x2cc>
     9dc:	68 30       	cpi	r22, 0x08	; 8
     9de:	71 05       	cpc	r23, r1
     9e0:	39 f5       	brne	.+78     	; 0xa30 <gc_execute_line+0x2ea>
     9e2:	1c c0       	rjmp	.+56     	; 0xa1c <gc_execute_line+0x2d6>
     9e4:	6e 31       	cpi	r22, 0x1E	; 30
     9e6:	71 05       	cpc	r23, r1
     9e8:	39 f0       	breq	.+14     	; 0x9f8 <gc_execute_line+0x2b2>
     9ea:	6c 33       	cpi	r22, 0x3C	; 60
     9ec:	71 05       	cpc	r23, r1
     9ee:	01 f5       	brne	.+64     	; 0xa30 <gc_execute_line+0x2ea>
     9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <gc_execute_line+0x2b2>
        case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
     9f2:	d0 92 05 02 	sts	0x0205, r13
     9f6:	25 c0       	rjmp	.+74     	; 0xa42 <gc_execute_line+0x2fc>
        case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
     9f8:	c0 92 05 02 	sts	0x0205, r12
     9fc:	22 c0       	rjmp	.+68     	; 0xa42 <gc_execute_line+0x2fc>
        case 3: gc.spindle_direction = 1; break;
     9fe:	90 92 07 02 	sts	0x0207, r9
     a02:	80 92 06 02 	sts	0x0206, r8
     a06:	1d c0       	rjmp	.+58     	; 0xa42 <gc_execute_line+0x2fc>
        case 4: gc.spindle_direction = -1; break;
     a08:	50 92 07 02 	sts	0x0207, r5
     a0c:	40 92 06 02 	sts	0x0206, r4
     a10:	18 c0       	rjmp	.+48     	; 0xa42 <gc_execute_line+0x2fc>
        case 5: gc.spindle_direction = 0; break;
     a12:	10 92 07 02 	sts	0x0207, r1
     a16:	10 92 06 02 	sts	0x0206, r1
     a1a:	13 c0       	rjmp	.+38     	; 0xa42 <gc_execute_line+0x2fc>
        case 8: gc.coolant_flood = 1; break;
     a1c:	90 92 09 02 	sts	0x0209, r9
     a20:	80 92 08 02 	sts	0x0208, r8
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <gc_execute_line+0x2fc>
        case 9: gc.coolant_flood = 0; break;
     a26:	10 92 09 02 	sts	0x0209, r1
     a2a:	10 92 08 02 	sts	0x0208, r1
     a2e:	09 c0       	rjmp	.+18     	; 0xa42 <gc_execute_line+0x2fc>
        default: FAIL(GCSTATUS_UNSUPPORTED_STATEMENT);
     a30:	60 92 00 02 	sts	0x0200, r6
     a34:	06 c0       	rjmp	.+12     	; 0xa42 <gc_execute_line+0x2fc>
      }            
      break;
      case 'T': gc.tool = trunc(value); break;
     a36:	c8 01       	movw	r24, r16
     a38:	b7 01       	movw	r22, r14
     a3a:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fixunssfsi>
     a3e:	60 93 22 02 	sts	0x0222, r22
    }
    if(gc.status_code) { break; }
     a42:	80 91 00 02 	lds	r24, 0x0200
     a46:	88 23       	and	r24, r24
     a48:	69 f4       	brne	.+26     	; 0xa64 <gc_execute_line+0x31e>
  }
  
  /* We'll handle this as g-code. First: parse all statements */

  // Pass 1: Commands
  while(next_statement(&letter, &value, line, &char_counter)) {
     a4a:	c1 01       	movw	r24, r2
     a4c:	be 01       	movw	r22, r28
     a4e:	6c 5f       	subi	r22, 0xFC	; 252
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	a5 01       	movw	r20, r10
     a54:	9e 01       	movw	r18, r28
     a56:	2e 5f       	subi	r18, 0xFE	; 254
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	0e 94 36 03 	call	0x66c	; 0x66c <next_statement>
     a5e:	89 2b       	or	r24, r25
     a60:	09 f0       	breq	.+2      	; 0xa64 <gc_execute_line+0x31e>
     a62:	09 cf       	rjmp	.-494    	; 0x876 <gc_execute_line+0x130>
    }
    if(gc.status_code) { break; }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     a64:	80 91 00 02 	lds	r24, 0x0200
     a68:	88 23       	and	r24, r24
     a6a:	09 f0       	breq	.+2      	; 0xa6e <gc_execute_line+0x328>
     a6c:	c8 c1       	rjmp	.+912    	; 0xdfe <gc_execute_line+0x6b8>

  char_counter = 0;
     a6e:	1b 82       	std	Y+3, r1	; 0x03
     a70:	1a 82       	std	Y+2, r1	; 0x02
  clear_vector(offset);
     a72:	80 e1       	ldi	r24, 0x10	; 16
     a74:	fe 01       	movw	r30, r28
     a76:	7c 96       	adiw	r30, 0x1c	; 28
     a78:	df 01       	movw	r26, r30
     a7a:	1d 92       	st	X+, r1
     a7c:	8a 95       	dec	r24
     a7e:	e9 f7       	brne	.-6      	; 0xa7a <gc_execute_line+0x334>
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position
     a80:	de 01       	movw	r26, r28
     a82:	1c 96       	adiw	r26, 0x0c	; 12
     a84:	e2 e1       	ldi	r30, 0x12	; 18
     a86:	f2 e0       	ldi	r31, 0x02	; 2
     a88:	80 e1       	ldi	r24, 0x10	; 16
     a8a:	01 90       	ld	r0, Z+
     a8c:	0d 92       	st	X+, r0
     a8e:	81 50       	subi	r24, 0x01	; 1
     a90:	e1 f7       	brne	.-8      	; 0xa8a <gc_execute_line+0x344>
     a92:	1d a6       	std	Y+45, r1	; 0x2d
     a94:	1e a6       	std	Y+46, r1	; 0x2e
     a96:	b0 e8       	ldi	r27, 0x80	; 128
     a98:	bf a7       	std	Y+47, r27	; 0x2f
     a9a:	ef eb       	ldi	r30, 0xBF	; 191
     a9c:	e8 ab       	std	Y+48, r30	; 0x30

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     a9e:	e4 e0       	ldi	r30, 0x04	; 4
     aa0:	2e 2e       	mov	r2, r30
     aa2:	31 2c       	mov	r3, r1
     aa4:	2c 0e       	add	r2, r28
     aa6:	3d 1e       	adc	r3, r29
     aa8:	72 e0       	ldi	r23, 0x02	; 2
     aaa:	47 2e       	mov	r4, r23
     aac:	51 2c       	mov	r5, r1
     aae:	4c 0e       	add	r4, r28
     ab0:	5d 1e       	adc	r5, r29
     ab2:	4e 01       	movw	r8, r28
     ab4:	08 94       	sec
     ab6:	81 1c       	adc	r8, r1
     ab8:	91 1c       	adc	r9, r1
     aba:	bf c0       	rjmp	.+382    	; 0xc3a <gc_execute_line+0x4f4>
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
     abc:	cc 80       	ldd	r12, Y+4	; 0x04
     abe:	dd 80       	ldd	r13, Y+5	; 0x05
     ac0:	ee 80       	ldd	r14, Y+6	; 0x06
     ac2:	ff 80       	ldd	r15, Y+7	; 0x07
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
  gc.absolute_mode = TRUE;
}

static float to_millimeters(double value) {
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     ac4:	80 91 03 02 	lds	r24, 0x0203
     ac8:	88 23       	and	r24, r24
     aca:	19 f4       	brne	.+6      	; 0xad2 <gc_execute_line+0x38c>
     acc:	a7 01       	movw	r20, r14
     ace:	96 01       	movw	r18, r12
     ad0:	0a c0       	rjmp	.+20     	; 0xae6 <gc_execute_line+0x3a0>
     ad2:	c7 01       	movw	r24, r14
     ad4:	b6 01       	movw	r22, r12
     ad6:	23 e3       	ldi	r18, 0x33	; 51
     ad8:	33 e3       	ldi	r19, 0x33	; 51
     ada:	4b ec       	ldi	r20, 0xCB	; 203
     adc:	51 e4       	ldi	r21, 0x41	; 65
     ade:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    unit_converted_value = to_millimeters(value);
    switch(letter) {
     ae6:	09 81       	ldd	r16, Y+1	; 0x01
     ae8:	0c 34       	cpi	r16, 0x4C	; 76
     aea:	50 f4       	brcc	.+20     	; 0xb00 <gc_execute_line+0x3ba>
     aec:	09 34       	cpi	r16, 0x49	; 73
     aee:	08 f0       	brcs	.+2      	; 0xaf2 <gc_execute_line+0x3ac>
     af0:	45 c0       	rjmp	.+138    	; 0xb7c <gc_execute_line+0x436>
     af2:	03 34       	cpi	r16, 0x43	; 67
     af4:	09 f4       	brne	.+2      	; 0xaf8 <gc_execute_line+0x3b2>
     af6:	8c c0       	rjmp	.+280    	; 0xc10 <gc_execute_line+0x4ca>
     af8:	06 34       	cpi	r16, 0x46	; 70
     afa:	09 f0       	breq	.+2      	; 0xafe <gc_execute_line+0x3b8>
     afc:	9e c0       	rjmp	.+316    	; 0xc3a <gc_execute_line+0x4f4>
     afe:	0f c0       	rjmp	.+30     	; 0xb1e <gc_execute_line+0x3d8>
     b00:	03 35       	cpi	r16, 0x53	; 83
     b02:	09 f4       	brne	.+2      	; 0xb06 <gc_execute_line+0x3c0>
     b04:	4f c0       	rjmp	.+158    	; 0xba4 <gc_execute_line+0x45e>
     b06:	04 35       	cpi	r16, 0x54	; 84
     b08:	20 f4       	brcc	.+8      	; 0xb12 <gc_execute_line+0x3cc>
     b0a:	00 35       	cpi	r16, 0x50	; 80
     b0c:	09 f0       	breq	.+2      	; 0xb10 <gc_execute_line+0x3ca>
     b0e:	95 c0       	rjmp	.+298    	; 0xc3a <gc_execute_line+0x4f4>
     b10:	44 c0       	rjmp	.+136    	; 0xb9a <gc_execute_line+0x454>
     b12:	80 2f       	mov	r24, r16
     b14:	88 55       	subi	r24, 0x58	; 88
     b16:	83 30       	cpi	r24, 0x03	; 3
     b18:	08 f0       	brcs	.+2      	; 0xb1c <gc_execute_line+0x3d6>
     b1a:	8f c0       	rjmp	.+286    	; 0xc3a <gc_execute_line+0x4f4>
     b1c:	4c c0       	rjmp	.+152    	; 0xbb6 <gc_execute_line+0x470>
      case 'F': 
      if (gc.inverse_feed_rate_mode) {
     b1e:	80 91 02 02 	lds	r24, 0x0202
     b22:	88 23       	and	r24, r24
     b24:	29 f0       	breq	.+10     	; 0xb30 <gc_execute_line+0x3ea>
     b26:	2d a7       	std	Y+45, r18	; 0x2d
     b28:	3e a7       	std	Y+46, r19	; 0x2e
     b2a:	4f a7       	std	Y+47, r20	; 0x2f
     b2c:	58 ab       	std	Y+48, r21	; 0x30
     b2e:	85 c0       	rjmp	.+266    	; 0xc3a <gc_execute_line+0x4f4>
        inverse_feed_rate = unit_converted_value; // seconds per motion for this motion only
      } else {          
        if (gc.motion_mode == MOTION_MODE_SEEK) {
     b30:	80 91 01 02 	lds	r24, 0x0201
     b34:	88 23       	and	r24, r24
     b36:	89 f4       	brne	.+34     	; 0xb5a <gc_execute_line+0x414>
          gc.seek_rate = unit_converted_value/60;
     b38:	ca 01       	movw	r24, r20
     b3a:	b9 01       	movw	r22, r18
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e7       	ldi	r20, 0x70	; 112
     b42:	52 e4       	ldi	r21, 0x42	; 66
     b44:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
     b48:	60 93 0e 02 	sts	0x020E, r22
     b4c:	70 93 0f 02 	sts	0x020F, r23
     b50:	80 93 10 02 	sts	0x0210, r24
     b54:	90 93 11 02 	sts	0x0211, r25
     b58:	70 c0       	rjmp	.+224    	; 0xc3a <gc_execute_line+0x4f4>
        } else {
          gc.feed_rate = unit_converted_value/60; // millimeters pr second
     b5a:	ca 01       	movw	r24, r20
     b5c:	b9 01       	movw	r22, r18
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e7       	ldi	r20, 0x70	; 112
     b64:	52 e4       	ldi	r21, 0x42	; 66
     b66:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
     b6a:	60 93 0a 02 	sts	0x020A, r22
     b6e:	70 93 0b 02 	sts	0x020B, r23
     b72:	80 93 0c 02 	sts	0x020C, r24
     b76:	90 93 0d 02 	sts	0x020D, r25
     b7a:	5f c0       	rjmp	.+190    	; 0xc3a <gc_execute_line+0x4f4>
        }
      }
      break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = unit_converted_value; break;
     b7c:	e0 2f       	mov	r30, r16
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	e9 54       	subi	r30, 0x49	; 73
     b82:	f0 40       	sbci	r31, 0x00	; 0
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	e8 0d       	add	r30, r8
     b8e:	f9 1d       	adc	r31, r9
     b90:	23 8f       	std	Z+27, r18	; 0x1b
     b92:	34 8f       	std	Z+28, r19	; 0x1c
     b94:	45 8f       	std	Z+29, r20	; 0x1d
     b96:	56 8f       	std	Z+30, r21	; 0x1e
     b98:	50 c0       	rjmp	.+160    	; 0xc3a <gc_execute_line+0x4f4>
      case 'P': p = value; break;
     b9a:	c8 86       	std	Y+8, r12	; 0x08
     b9c:	d9 86       	std	Y+9, r13	; 0x09
     b9e:	ea 86       	std	Y+10, r14	; 0x0a
     ba0:	fb 86       	std	Y+11, r15	; 0x0b
     ba2:	4b c0       	rjmp	.+150    	; 0xc3a <gc_execute_line+0x4f4>
      case 'R': r = unit_converted_value; radius_mode = TRUE; break;
      case 'S': gc.spindle_speed = value; break;
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
     bac:	70 93 24 02 	sts	0x0224, r23
     bb0:	60 93 23 02 	sts	0x0223, r22
     bb4:	42 c0       	rjmp	.+132    	; 0xc3a <gc_execute_line+0x4f4>
      case 'X': case 'Y': case 'Z':
      if (gc.absolute_mode || absolute_override) {
     bb6:	80 91 04 02 	lds	r24, 0x0204
     bba:	88 23       	and	r24, r24
     bbc:	11 f4       	brne	.+4      	; 0xbc2 <gc_execute_line+0x47c>
     bbe:	77 20       	and	r7, r7
     bc0:	79 f0       	breq	.+30     	; 0xbe0 <gc_execute_line+0x49a>
        target[letter - 'X'] = unit_converted_value;
     bc2:	e0 2f       	mov	r30, r16
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	e8 55       	subi	r30, 0x58	; 88
     bc8:	f0 40       	sbci	r31, 0x00	; 0
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	e8 0d       	add	r30, r8
     bd4:	f9 1d       	adc	r31, r9
     bd6:	23 87       	std	Z+11, r18	; 0x0b
     bd8:	34 87       	std	Z+12, r19	; 0x0c
     bda:	45 87       	std	Z+13, r20	; 0x0d
     bdc:	56 87       	std	Z+14, r21	; 0x0e
     bde:	2d c0       	rjmp	.+90     	; 0xc3a <gc_execute_line+0x4f4>
      } else {
        target[letter - 'X'] += unit_converted_value;
     be0:	10 e0       	ldi	r17, 0x00	; 0
     be2:	08 55       	subi	r16, 0x58	; 88
     be4:	10 40       	sbci	r17, 0x00	; 0
     be6:	00 0f       	add	r16, r16
     be8:	11 1f       	adc	r17, r17
     bea:	00 0f       	add	r16, r16
     bec:	11 1f       	adc	r17, r17
     bee:	08 0d       	add	r16, r8
     bf0:	19 1d       	adc	r17, r9
     bf2:	d8 01       	movw	r26, r16
     bf4:	1b 96       	adiw	r26, 0x0b	; 11
     bf6:	6d 91       	ld	r22, X+
     bf8:	7d 91       	ld	r23, X+
     bfa:	8d 91       	ld	r24, X+
     bfc:	9c 91       	ld	r25, X
     bfe:	1e 97       	sbiw	r26, 0x0e	; 14
     c00:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
     c04:	f8 01       	movw	r30, r16
     c06:	63 87       	std	Z+11, r22	; 0x0b
     c08:	74 87       	std	Z+12, r23	; 0x0c
     c0a:	85 87       	std	Z+13, r24	; 0x0d
     c0c:	96 87       	std	Z+14, r25	; 0x0e
     c0e:	15 c0       	rjmp	.+42     	; 0xc3a <gc_execute_line+0x4f4>
      }
      break;
      case 'C':
      if (gc.absolute_mode || absolute_override) {
     c10:	80 91 04 02 	lds	r24, 0x0204
     c14:	88 23       	and	r24, r24
     c16:	11 f4       	brne	.+4      	; 0xc1c <gc_execute_line+0x4d6>
     c18:	77 20       	and	r7, r7
     c1a:	29 f0       	breq	.+10     	; 0xc26 <gc_execute_line+0x4e0>
		target[C_AXIS] = unit_converted_value;
     c1c:	28 8f       	std	Y+24, r18	; 0x18
     c1e:	39 8f       	std	Y+25, r19	; 0x19
     c20:	4a 8f       	std	Y+26, r20	; 0x1a
     c22:	5b 8f       	std	Y+27, r21	; 0x1b
     c24:	0a c0       	rjmp	.+20     	; 0xc3a <gc_execute_line+0x4f4>
      } else {
        target[C_AXIS] += unit_converted_value;
     c26:	68 8d       	ldd	r22, Y+24	; 0x18
     c28:	79 8d       	ldd	r23, Y+25	; 0x19
     c2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c2e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
     c32:	68 8f       	std	Y+24, r22	; 0x18
     c34:	79 8f       	std	Y+25, r23	; 0x19
     c36:	8a 8f       	std	Y+26, r24	; 0x1a
     c38:	9b 8f       	std	Y+27, r25	; 0x1b
  char_counter = 0;
  clear_vector(offset);
  memcpy(target, gc.position, sizeof(target)); // i.e. target = gc.position

  // Pass 2: Parameters
  while(next_statement(&letter, &value, line, &char_counter)) {
     c3a:	c4 01       	movw	r24, r8
     c3c:	b1 01       	movw	r22, r2
     c3e:	a5 01       	movw	r20, r10
     c40:	92 01       	movw	r18, r4
     c42:	0e 94 36 03 	call	0x66c	; 0x66c <next_statement>
     c46:	89 2b       	or	r24, r25
     c48:	09 f0       	breq	.+2      	; 0xc4c <gc_execute_line+0x506>
     c4a:	38 cf       	rjmp	.-400    	; 0xabc <gc_execute_line+0x376>
      break;      
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
     c4c:	80 91 00 02 	lds	r24, 0x0200
     c50:	88 23       	and	r24, r24
     c52:	09 f0       	breq	.+2      	; 0xc56 <gc_execute_line+0x510>
     c54:	d4 c0       	rjmp	.+424    	; 0xdfe <gc_execute_line+0x6b8>
    
  // Update spindle state
  if (gc.spindle_direction) {
     c56:	80 91 06 02 	lds	r24, 0x0206
     c5a:	90 91 07 02 	lds	r25, 0x0207
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	59 f0       	breq	.+22     	; 0xc78 <gc_execute_line+0x532>
    spindle_run(gc.spindle_direction, gc.spindle_speed);
     c62:	40 91 23 02 	lds	r20, 0x0223
     c66:	50 91 24 02 	lds	r21, 0x0224
     c6a:	66 27       	eor	r22, r22
     c6c:	57 fd       	sbrc	r21, 7
     c6e:	60 95       	com	r22
     c70:	76 2f       	mov	r23, r22
     c72:	0e 94 cd 12 	call	0x259a	; 0x259a <spindle_run>
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <gc_execute_line+0x536>
  } else {
    spindle_stop();
     c78:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <spindle_stop>
  }
  
  // Update coolant state
  if (gc.coolant_flood) {
     c7c:	80 91 08 02 	lds	r24, 0x0208
     c80:	90 91 09 02 	lds	r25, 0x0209
     c84:	89 2b       	or	r24, r25
     c86:	19 f0       	breq	.+6      	; 0xc8e <gc_execute_line+0x548>
  	coolant_flood(TRUE);
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <gc_execute_line+0x54c>
  }
  else {
  	coolant_flood(FALSE);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 44 02 	call	0x488	; 0x488 <coolant_flood>
  }
  
  // Perform any physical actions
  switch (next_action) {
     c96:	fc a5       	ldd	r31, Y+44	; 0x2c
     c98:	f1 30       	cpi	r31, 0x01	; 1
     c9a:	59 f0       	breq	.+22     	; 0xcb2 <gc_execute_line+0x56c>
     c9c:	f1 30       	cpi	r31, 0x01	; 1
     c9e:	c0 f0       	brcs	.+48     	; 0xcd0 <gc_execute_line+0x58a>
     ca0:	f2 30       	cpi	r31, 0x02	; 2
     ca2:	21 f0       	breq	.+8      	; 0xcac <gc_execute_line+0x566>
     ca4:	f3 30       	cpi	r31, 0x03	; 3
     ca6:	09 f0       	breq	.+2      	; 0xcaa <gc_execute_line+0x564>
     ca8:	9d c0       	rjmp	.+314    	; 0xde4 <gc_execute_line+0x69e>
     caa:	8a c0       	rjmp	.+276    	; 0xdc0 <gc_execute_line+0x67a>
    case NEXT_ACTION_GO_HOME: mc_go_home(); break;
     cac:	0e 94 73 07 	call	0xee6	; 0xee6 <mc_go_home>
     cb0:	99 c0       	rjmp	.+306    	; 0xde4 <gc_execute_line+0x69e>
    case NEXT_ACTION_DWELL: mc_dwell(trunc(p*1000)); break;
     cb2:	68 85       	ldd	r22, Y+8	; 0x08
     cb4:	79 85       	ldd	r23, Y+9	; 0x09
     cb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     cb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a e7       	ldi	r20, 0x7A	; 122
     cc0:	54 e4       	ldi	r21, 0x44	; 68
     cc2:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
     cc6:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fixunssfsi>
     cca:	0e 94 76 07 	call	0xeec	; 0xeec <mc_dwell>
     cce:	8a c0       	rjmp	.+276    	; 0xde4 <gc_execute_line+0x69e>
    case NEXT_ACTION_DEFAULT: 
    switch (gc.motion_mode) {
     cd0:	80 91 01 02 	lds	r24, 0x0201
     cd4:	88 23       	and	r24, r24
     cd6:	21 f0       	breq	.+8      	; 0xce0 <gc_execute_line+0x59a>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	09 f0       	breq	.+2      	; 0xcde <gc_execute_line+0x598>
     cdc:	83 c0       	rjmp	.+262    	; 0xde4 <gc_execute_line+0x69e>
     cde:	27 c0       	rjmp	.+78     	; 0xd2e <gc_execute_line+0x5e8>
      case MOTION_MODE_CANCEL: break;
      case MOTION_MODE_SEEK:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS], gc.seek_rate, FALSE);
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <gc_execute_line+0x59c>
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <gc_execute_line+0x59e>
     ce4:	6c 85       	ldd	r22, Y+12	; 0x0c
     ce6:	7d 85       	ldd	r23, Y+13	; 0x0d
     ce8:	8e 85       	ldd	r24, Y+14	; 0x0e
     cea:	9f 85       	ldd	r25, Y+15	; 0x0f
     cec:	28 89       	ldd	r18, Y+16	; 0x10
     cee:	39 89       	ldd	r19, Y+17	; 0x11
     cf0:	4a 89       	ldd	r20, Y+18	; 0x12
     cf2:	5b 89       	ldd	r21, Y+19	; 0x13
     cf4:	ec 88       	ldd	r14, Y+20	; 0x14
     cf6:	fd 88       	ldd	r15, Y+21	; 0x15
     cf8:	0e 89       	ldd	r16, Y+22	; 0x16
     cfa:	1f 89       	ldd	r17, Y+23	; 0x17
     cfc:	a8 8c       	ldd	r10, Y+24	; 0x18
     cfe:	b9 8c       	ldd	r11, Y+25	; 0x19
     d00:	ca 8c       	ldd	r12, Y+26	; 0x1a
     d02:	db 8c       	ldd	r13, Y+27	; 0x1b
     d04:	60 90 0e 02 	lds	r6, 0x020E
     d08:	70 90 0f 02 	lds	r7, 0x020F
     d0c:	80 90 10 02 	lds	r8, 0x0210
     d10:	90 90 11 02 	lds	r9, 0x0211
     d14:	ad b7       	in	r26, 0x3d	; 61
     d16:	be b7       	in	r27, 0x3e	; 62
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	6d 92       	st	X+, r6
     d1c:	7d 92       	st	X+, r7
     d1e:	8d 92       	st	X+, r8
     d20:	9c 92       	st	X, r9
     d22:	14 97       	sbiw	r26, 0x04	; 4
     d24:	16 96       	adiw	r26, 0x06	; 6
     d26:	1c 92       	st	X, r1
     d28:	1e 92       	st	-X, r1
     d2a:	15 97       	sbiw	r26, 0x05	; 5
     d2c:	3e c0       	rjmp	.+124    	; 0xdaa <gc_execute_line+0x664>
      break;
      case MOTION_MODE_LINEAR:
      mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS],
     d2e:	2c 84       	ldd	r2, Y+12	; 0x0c
     d30:	3d 84       	ldd	r3, Y+13	; 0x0d
     d32:	4e 84       	ldd	r4, Y+14	; 0x0e
     d34:	5f 84       	ldd	r5, Y+15	; 0x0f
     d36:	68 88       	ldd	r6, Y+16	; 0x10
     d38:	79 88       	ldd	r7, Y+17	; 0x11
     d3a:	8a 88       	ldd	r8, Y+18	; 0x12
     d3c:	9b 88       	ldd	r9, Y+19	; 0x13
     d3e:	ec 88       	ldd	r14, Y+20	; 0x14
     d40:	fd 88       	ldd	r15, Y+21	; 0x15
     d42:	0e 89       	ldd	r16, Y+22	; 0x16
     d44:	1f 89       	ldd	r17, Y+23	; 0x17
     d46:	a8 8c       	ldd	r10, Y+24	; 0x18
     d48:	b9 8c       	ldd	r11, Y+25	; 0x19
     d4a:	ca 8c       	ldd	r12, Y+26	; 0x1a
     d4c:	db 8c       	ldd	r13, Y+27	; 0x1b
     d4e:	60 91 02 02 	lds	r22, 0x0202
     d52:	66 23       	and	r22, r22
     d54:	61 f4       	brne	.+24     	; 0xd6e <gc_execute_line+0x628>
     d56:	f0 91 0a 02 	lds	r31, 0x020A
     d5a:	fd a7       	std	Y+45, r31	; 0x2d
     d5c:	80 91 0b 02 	lds	r24, 0x020B
     d60:	8e a7       	std	Y+46, r24	; 0x2e
     d62:	90 91 0c 02 	lds	r25, 0x020C
     d66:	9f a7       	std	Y+47, r25	; 0x2f
     d68:	a0 91 0d 02 	lds	r26, 0x020D
     d6c:	a8 ab       	std	Y+48, r26	; 0x30
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <gc_execute_line+0x62a>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <gc_execute_line+0x62c>
     d72:	ed b7       	in	r30, 0x3d	; 61
     d74:	fe b7       	in	r31, 0x3e	; 62
     d76:	31 96       	adiw	r30, 0x01	; 1
     d78:	fa ab       	std	Y+50, r31	; 0x32
     d7a:	e9 ab       	std	Y+49, r30	; 0x31
     d7c:	2d a5       	ldd	r18, Y+45	; 0x2d
     d7e:	3e a5       	ldd	r19, Y+46	; 0x2e
     d80:	4f a5       	ldd	r20, Y+47	; 0x2f
     d82:	58 a9       	ldd	r21, Y+48	; 0x30
     d84:	c9 01       	movw	r24, r18
     d86:	da 01       	movw	r26, r20
     d88:	ed b7       	in	r30, 0x3d	; 61
     d8a:	fe b7       	in	r31, 0x3e	; 62
     d8c:	81 83       	std	Z+1, r24	; 0x01
     d8e:	92 83       	std	Z+2, r25	; 0x02
     d90:	a3 83       	std	Z+3, r26	; 0x03
     d92:	b4 83       	std	Z+4, r27	; 0x04
     d94:	a9 a9       	ldd	r26, Y+49	; 0x31
     d96:	ba a9       	ldd	r27, Y+50	; 0x32
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	6c 93       	st	X, r22
     d9c:	14 97       	sbiw	r26, 0x04	; 4
     d9e:	15 96       	adiw	r26, 0x05	; 5
     da0:	1c 92       	st	X, r1
     da2:	c2 01       	movw	r24, r4
     da4:	b1 01       	movw	r22, r2
     da6:	a4 01       	movw	r20, r8
     da8:	93 01       	movw	r18, r6
     daa:	0e 94 a0 0c 	call	0x1940	; 0x1940 <plan_buffer_line>
     dae:	ed b7       	in	r30, 0x3d	; 61
     db0:	fe b7       	in	r31, 0x3e	; 62
     db2:	36 96       	adiw	r30, 0x06	; 6
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	fe bf       	out	0x3e, r31	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	ed bf       	out	0x3d, r30	; 61
     dbe:	12 c0       	rjmp	.+36     	; 0xde4 <gc_execute_line+0x69e>
        (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode);
      break;
    }
    break;
    case NEXT_ACTION_SET_OFFSETS:
      mc_set_current(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], target[C_AXIS]);
     dc0:	6c 85       	ldd	r22, Y+12	; 0x0c
     dc2:	7d 85       	ldd	r23, Y+13	; 0x0d
     dc4:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc6:	9f 85       	ldd	r25, Y+15	; 0x0f
     dc8:	28 89       	ldd	r18, Y+16	; 0x10
     dca:	39 89       	ldd	r19, Y+17	; 0x11
     dcc:	4a 89       	ldd	r20, Y+18	; 0x12
     dce:	5b 89       	ldd	r21, Y+19	; 0x13
     dd0:	ec 88       	ldd	r14, Y+20	; 0x14
     dd2:	fd 88       	ldd	r15, Y+21	; 0x15
     dd4:	0e 89       	ldd	r16, Y+22	; 0x16
     dd6:	1f 89       	ldd	r17, Y+23	; 0x17
     dd8:	a8 8c       	ldd	r10, Y+24	; 0x18
     dda:	b9 8c       	ldd	r11, Y+25	; 0x19
     ddc:	ca 8c       	ldd	r12, Y+26	; 0x1a
     dde:	db 8c       	ldd	r13, Y+27	; 0x1b
     de0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <plan_set_current>
  }
  
  // As far as the parser is concerned, the position is now == target. In reality the
  // motion control system might still be processing the action and the real tool position
  // in any intermediate location.
  memcpy(gc.position, target, sizeof(gc.position)); // gc.position[] = target[];
     de4:	a2 e1       	ldi	r26, 0x12	; 18
     de6:	b2 e0       	ldi	r27, 0x02	; 2
     de8:	fe 01       	movw	r30, r28
     dea:	3c 96       	adiw	r30, 0x0c	; 12
     dec:	80 e1       	ldi	r24, 0x10	; 16
     dee:	01 90       	ld	r0, Z+
     df0:	0d 92       	st	X+, r0
     df2:	81 50       	subi	r24, 0x01	; 1
     df4:	e1 f7       	brne	.-8      	; 0xdee <gc_execute_line+0x6a8>

  return(gc.status_code);
     df6:	80 91 00 02 	lds	r24, 0x0200
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <gc_execute_line+0x6b8>
     dfc:	83 e0       	ldi	r24, 0x03	; 3
}
     dfe:	e2 96       	adiw	r28, 0x32	; 50
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	bf 90       	pop	r11
     e1c:	af 90       	pop	r10
     e1e:	9f 90       	pop	r9
     e20:	8f 90       	pop	r8
     e22:	7f 90       	pop	r7
     e24:	6f 90       	pop	r6
     e26:	5f 90       	pop	r5
     e28:	4f 90       	pop	r4
     e2a:	3f 90       	pop	r3
     e2c:	2f 90       	pop	r2
     e2e:	08 95       	ret

00000e30 <theta>:
}

// Find the angle in radians of deviance from the positive y axis. negative angles to the left of y-axis, 
// positive to the right.
double theta(double x, double y)
{
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	79 01       	movw	r14, r18
     e42:	8a 01       	movw	r16, r20
  double theta = atan(x/fabs(y));
     e44:	5f 77       	andi	r21, 0x7F	; 127
     e46:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
     e4a:	0e 94 c6 18 	call	0x318c	; 0x318c <atan>
     e4e:	5b 01       	movw	r10, r22
     e50:	6c 01       	movw	r12, r24
  if (y>0) {
     e52:	c8 01       	movw	r24, r16
     e54:	b7 01       	movw	r22, r14
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__gesf2>
     e62:	18 16       	cp	r1, r24
     e64:	cc f0       	brlt	.+50     	; 0xe98 <theta+0x68>
    return(theta);
  } else {
    if (theta>0) 
     e66:	c6 01       	movw	r24, r12
     e68:	b5 01       	movw	r22, r10
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__gesf2>
     e76:	18 16       	cp	r1, r24
     e78:	2c f4       	brge	.+10     	; 0xe84 <theta+0x54>
    {
      return(M_PI-theta);
     e7a:	6b ed       	ldi	r22, 0xDB	; 219
     e7c:	7f e0       	ldi	r23, 0x0F	; 15
     e7e:	89 e4       	ldi	r24, 0x49	; 73
     e80:	90 e4       	ldi	r25, 0x40	; 64
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <theta+0x5c>
    } else {
      return(-M_PI-theta);
     e84:	6b ed       	ldi	r22, 0xDB	; 219
     e86:	7f e0       	ldi	r23, 0x0F	; 15
     e88:	89 e4       	ldi	r24, 0x49	; 73
     e8a:	90 ec       	ldi	r25, 0xC0	; 192
     e8c:	a6 01       	movw	r20, r12
     e8e:	95 01       	movw	r18, r10
     e90:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__subsf3>
     e94:	5b 01       	movw	r10, r22
     e96:	6c 01       	movw	r12, r24
    }
  }
}
     e98:	b5 01       	movw	r22, r10
     e9a:	c6 01       	movw	r24, r12
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	08 95       	ret

00000eae <main>:
// #endif

int main(void)
{
	int i;
  sp_init();        
     eae:	0e 94 a4 10 	call	0x2148	; 0x2148 <sp_init>
  settings_init();  
     eb2:	0e 94 b6 12 	call	0x256c	; 0x256c <settings_init>
  plan_init();      
     eb6:	0e 94 75 09 	call	0x12ea	; 0x12ea <plan_init>
  st_init();        
     eba:	0e 94 ae 13 	call	0x275c	; 0x275c <st_init>
  spindle_init();   
     ebe:	0e 94 ca 12 	call	0x2594	; 0x2594 <spindle_init>
  coolant_init();
     ec2:	0e 94 42 02 	call	0x484	; 0x484 <coolant_init>
  gc_init();
     ec6:	0e 94 65 03 	call	0x6ca	; 0x6ca <gc_init>
  
  // Once everything is initialized, send the standard "ok" to let clients
  // know it's okay to go ahead
  printPgmString(PSTR("ok\n\r"));
     eca:	81 e1       	ldi	r24, 0x11	; 17
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>

  for(;;){
    sleep_mode(); // Wait for it ...
     ed2:	83 b7       	in	r24, 0x33	; 51
     ed4:	81 60       	ori	r24, 0x01	; 1
     ed6:	83 bf       	out	0x33, r24	; 51
     ed8:	88 95       	sleep
     eda:	83 b7       	in	r24, 0x33	; 51
     edc:	8e 7f       	andi	r24, 0xFE	; 254
     ede:	83 bf       	out	0x33, r24	; 51
    sp_process(); // ... process the serial protocol
     ee0:	0e 94 47 10 	call	0x208e	; 0x208e <sp_process>
     ee4:	f6 cf       	rjmp	.-20     	; 0xed2 <main+0x24>

00000ee6 <mc_go_home>:
  _delay_ms(milliseconds);
}

void mc_go_home()
{
  st_go_home();
     ee6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <st_go_home>
}
     eea:	08 95       	ret

00000eec <mc_dwell>:
#include "planner.h"
#include "wiring_serial.h"


void mc_dwell(uint32_t milliseconds) 
{
     eec:	af 92       	push	r10
     eee:	bf 92       	push	r11
     ef0:	cf 92       	push	r12
     ef2:	df 92       	push	r13
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	7b 01       	movw	r14, r22
     efe:	8c 01       	movw	r16, r24
  st_synchronize();
     f00:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <st_synchronize>
  _delay_ms(milliseconds);
     f04:	c8 01       	movw	r24, r16
     f06:	b7 01       	movw	r22, r14
     f08:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatunsisf>
     f0c:	5b 01       	movw	r10, r22
     f0e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	4a e7       	ldi	r20, 0x7A	; 122
     f16:	55 e4       	ldi	r21, 0x45	; 69
     f18:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
     f1c:	7b 01       	movw	r14, r22
     f1e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 01 19 	call	0x3202	; 0x3202 <__cmpsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	1c f4       	brge	.+6      	; 0xf36 <mc_dwell+0x4a>
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	24 c0       	rjmp	.+72     	; 0xf7e <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     f36:	c8 01       	movw	r24, r16
     f38:	b7 01       	movw	r22, r14
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	4f e7       	ldi	r20, 0x7F	; 127
     f40:	57 e4       	ldi	r21, 0x47	; 71
     f42:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__gesf2>
     f46:	18 16       	cp	r1, r24
     f48:	b4 f4       	brge	.+44     	; 0xf76 <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4a:	c6 01       	movw	r24, r12
     f4c:	b5 01       	movw	r22, r10
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
     f5a:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f5e:	80 e9       	ldi	r24, 0x90	; 144
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <mc_dwell+0x82>
     f64:	fc 01       	movw	r30, r24
     f66:	31 97       	sbiw	r30, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	61 50       	subi	r22, 0x01	; 1
     f6c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6e:	61 15       	cp	r22, r1
     f70:	71 05       	cpc	r23, r1
     f72:	c1 f7       	brne	.-16     	; 0xf64 <mc_dwell+0x78>
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f76:	c8 01       	movw	r24, r16
     f78:	b7 01       	movw	r22, r14
     f7a:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fixunssfsi>
     f7e:	cb 01       	movw	r24, r22
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <mc_dwell+0x94>
}
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	bf 90       	pop	r11
     f92:	af 90       	pop	r10
     f94:	08 95       	ret

00000f96 <factor_for_safe_speed>:
  );
}

// Calculate a braking factor to reach baseline speed which is max_jerk/2, e.g. the 
// speed under which you cannot exceed max_jerk no matter what you do.
double factor_for_safe_speed(block_t *block) {
     f96:	fc 01       	movw	r30, r24
     f98:	60 91 69 04 	lds	r22, 0x0469
     f9c:	70 91 6a 04 	lds	r23, 0x046A
     fa0:	80 91 6b 04 	lds	r24, 0x046B
     fa4:	90 91 6c 04 	lds	r25, 0x046C
     fa8:	21 a5       	ldd	r18, Z+41	; 0x29
     faa:	32 a5       	ldd	r19, Z+42	; 0x2a
     fac:	43 a5       	ldd	r20, Z+43	; 0x2b
     fae:	54 a5       	ldd	r21, Z+44	; 0x2c
     fb0:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
  return(settings.max_jerk/block->nominal_speed);  
}
     fb4:	08 95       	ret

00000fb6 <plan_is_acceleration_manager_enabled>:
  }
}

int plan_is_acceleration_manager_enabled() {
  return(acceleration_manager_enabled);
}
     fb6:	80 91 a9 03 	lds	r24, 0x03A9
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	08 95       	ret

00000fbe <plan_discard_current_block>:

 void plan_discard_current_block() {
  if (block_buffer_head != block_buffer_tail) {
     fbe:	20 91 95 03 	lds	r18, 0x0395
     fc2:	30 91 96 03 	lds	r19, 0x0396
     fc6:	80 91 97 03 	lds	r24, 0x0397
     fca:	90 91 98 03 	lds	r25, 0x0398
     fce:	28 17       	cp	r18, r24
     fd0:	39 07       	cpc	r19, r25
     fd2:	69 f0       	breq	.+26     	; 0xfee <plan_discard_current_block+0x30>
    block_buffer_tail = (block_buffer_tail + 1) % BLOCK_BUFFER_SIZE;  
     fd4:	80 91 97 03 	lds	r24, 0x0397
     fd8:	90 91 98 03 	lds	r25, 0x0398
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	65 e0       	ldi	r22, 0x05	; 5
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
     fe6:	90 93 98 03 	sts	0x0398, r25
     fea:	80 93 97 03 	sts	0x0397, r24
     fee:	08 95       	ret

00000ff0 <plan_get_current_block>:
  }
}

 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
     ff0:	20 91 95 03 	lds	r18, 0x0395
     ff4:	30 91 96 03 	lds	r19, 0x0396
     ff8:	80 91 97 03 	lds	r24, 0x0397
     ffc:	90 91 98 03 	lds	r25, 0x0398
    1000:	28 17       	cp	r18, r24
    1002:	39 07       	cpc	r19, r25
    1004:	19 f4       	brne	.+6      	; 0x100c <plan_get_current_block+0x1c>
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	0f c0       	rjmp	.+30     	; 0x102a <plan_get_current_block+0x3a>
  return(&block_buffer[block_buffer_tail]);
    100c:	20 91 97 03 	lds	r18, 0x0397
    1010:	30 91 98 03 	lds	r19, 0x0398
    1014:	89 e4       	ldi	r24, 0x49	; 73
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	28 9f       	mul	r18, r24
    101a:	a0 01       	movw	r20, r0
    101c:	29 9f       	mul	r18, r25
    101e:	50 0d       	add	r21, r0
    1020:	38 9f       	mul	r19, r24
    1022:	50 0d       	add	r21, r0
    1024:	11 24       	eor	r1, r1
    1026:	48 5d       	subi	r20, 0xD8	; 216
    1028:	5d 4f       	sbci	r21, 0xFD	; 253
}
    102a:	ca 01       	movw	r24, r20
    102c:	08 95       	ret

0000102e <planner_forward_pass_kernel>:
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
}

// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
    1050:	4b 01       	movw	r8, r22
  if(!current) { return; }
    1052:	61 15       	cp	r22, r1
    1054:	71 05       	cpc	r23, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <planner_forward_pass_kernel+0x2c>
    1058:	5e c0       	rjmp	.+188    	; 0x1116 <planner_forward_pass_kernel+0xe8>
  if(previous) {
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	09 f4       	brne	.+2      	; 0x1060 <planner_forward_pass_kernel+0x32>
    105e:	5b c0       	rjmp	.+182    	; 0x1116 <planner_forward_pass_kernel+0xe8>
    // If the previous block is an acceleration block, but it is not long enough to 
    // complete the full speed change within the block, we need to adjust out entry
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
    1060:	e9 a8       	ldd	r14, Y+49	; 0x31
    1062:	fa a8       	ldd	r15, Y+50	; 0x32
    1064:	0b a9       	ldd	r16, Y+51	; 0x33
    1066:	1c a9       	ldd	r17, Y+52	; 0x34
    1068:	fb 01       	movw	r30, r22
    106a:	41 a8       	ldd	r4, Z+49	; 0x31
    106c:	52 a8       	ldd	r5, Z+50	; 0x32
    106e:	63 a8       	ldd	r6, Z+51	; 0x33
    1070:	74 a8       	ldd	r7, Z+52	; 0x34
    1072:	c8 01       	movw	r24, r16
    1074:	b7 01       	movw	r22, r14
    1076:	a3 01       	movw	r20, r6
    1078:	92 01       	movw	r18, r4
    107a:	0e 94 01 19 	call	0x3202	; 0x3202 <__cmpsf2>
    107e:	88 23       	and	r24, r24
    1080:	0c f0       	brlt	.+2      	; 0x1084 <planner_forward_pass_kernel+0x56>
    1082:	49 c0       	rjmp	.+146    	; 0x1116 <planner_forward_pass_kernel+0xe8>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
    1084:	f4 01       	movw	r30, r8
    1086:	a1 a4       	ldd	r10, Z+41	; 0x29
    1088:	b2 a4       	ldd	r11, Z+42	; 0x2a
    108a:	c3 a4       	ldd	r12, Z+43	; 0x2b
    108c:	d4 a4       	ldd	r13, Z+44	; 0x2c
    108e:	c6 01       	movw	r24, r12
    1090:	b5 01       	movw	r22, r10
    1092:	a8 01       	movw	r20, r16
    1094:	97 01       	movw	r18, r14
    1096:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    109e:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    10a2:	7b 01       	movw	r14, r22
    10a4:	8c 01       	movw	r16, r24
    10a6:	20 91 65 04 	lds	r18, 0x0465
    10aa:	30 91 66 04 	lds	r19, 0x0466
    10ae:	40 91 67 04 	lds	r20, 0x0467
    10b2:	50 91 68 04 	lds	r21, 0x0468
    10b6:	50 58       	subi	r21, 0x80	; 128
    10b8:	ca 01       	movw	r24, r20
    10ba:	b9 01       	movw	r22, r18
    10bc:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e7       	ldi	r20, 0x70	; 112
    10c6:	52 e4       	ldi	r21, 0x42	; 66
    10c8:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e7       	ldi	r20, 0x70	; 112
    10d2:	52 ec       	ldi	r21, 0xC2	; 194
    10d4:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    10d8:	2d a5       	ldd	r18, Y+45	; 0x2d
    10da:	3e a5       	ldd	r19, Y+46	; 0x2e
    10dc:	4f a5       	ldd	r20, Y+47	; 0x2f
    10de:	58 a9       	ldd	r21, Y+48	; 0x30
    10e0:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	c8 01       	movw	r24, r16
    10ea:	b7 01       	movw	r22, r14
    10ec:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    10f0:	0e 94 bd 1b 	call	0x377a	; 0x377a <sqrt>
    // speed accordingly. Remember current->entry_factor equals the exit factor of 
    // the previous block.
    if(previous->entry_factor < current->entry_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,
        current->nominal_speed*previous->entry_factor, previous->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    10f4:	a6 01       	movw	r20, r12
    10f6:	95 01       	movw	r18, r10
    10f8:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    10fc:	7b 01       	movw	r14, r22
    10fe:	8c 01       	movw	r16, r24
      if (max_entry_factor < current->entry_factor) {
    1100:	a3 01       	movw	r20, r6
    1102:	92 01       	movw	r18, r4
    1104:	0e 94 01 19 	call	0x3202	; 0x3202 <__cmpsf2>
    1108:	88 23       	and	r24, r24
    110a:	2c f4       	brge	.+10     	; 0x1116 <planner_forward_pass_kernel+0xe8>
        current->entry_factor = max_entry_factor;
    110c:	f4 01       	movw	r30, r8
    110e:	e1 aa       	std	Z+49, r14	; 0x31
    1110:	f2 aa       	std	Z+50, r15	; 0x32
    1112:	03 ab       	std	Z+51, r16	; 0x33
    1114:	14 ab       	std	Z+52, r17	; 0x34
      }
    }
  }
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	cf 90       	pop	r12
    1126:	bf 90       	pop	r11
    1128:	af 90       	pop	r10
    112a:	9f 90       	pop	r9
    112c:	8f 90       	pop	r8
    112e:	7f 90       	pop	r7
    1130:	6f 90       	pop	r6
    1132:	5f 90       	pop	r5
    1134:	4f 90       	pop	r4
    1136:	08 95       	ret

00001138 <planner_forward_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
void planner_forward_pass() {
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    1144:	80 91 97 03 	lds	r24, 0x0397
    1148:	90 91 98 03 	lds	r25, 0x0398
    114c:	48 2f       	mov	r20, r24
    114e:	c0 e0       	ldi	r28, 0x00	; 0
    1150:	d0 e0       	ldi	r29, 0x00	; 0
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	14 c0       	rjmp	.+40     	; 0x1180 <planner_forward_pass+0x48>
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    1158:	89 e4       	ldi	r24, 0x49	; 73
    115a:	48 02       	muls	r20, r24
    115c:	80 01       	movw	r16, r0
    115e:	11 24       	eor	r1, r1
    1160:	08 5d       	subi	r16, 0xD8	; 216
    1162:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    1164:	c9 01       	movw	r24, r18
    1166:	be 01       	movw	r22, r28
    1168:	a8 01       	movw	r20, r16
    116a:	0e 94 17 08 	call	0x102e	; 0x102e <planner_forward_pass_kernel>
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    116e:	c7 01       	movw	r24, r14
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	65 e0       	ldi	r22, 0x05	; 5
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    117a:	48 2f       	mov	r20, r24
    117c:	9e 01       	movw	r18, r28
    117e:	e8 01       	movw	r28, r16
// implements the forward pass.
void planner_forward_pass() {
  int8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    1180:	e4 2e       	mov	r14, r20
    1182:	ff 24       	eor	r15, r15
    1184:	e7 fc       	sbrc	r14, 7
    1186:	f0 94       	com	r15
    1188:	80 91 95 03 	lds	r24, 0x0395
    118c:	90 91 96 03 	lds	r25, 0x0396
    1190:	e8 16       	cp	r14, r24
    1192:	f9 06       	cpc	r15, r25
    1194:	09 f7       	brne	.-62     	; 0x1158 <planner_forward_pass+0x20>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    1196:	c9 01       	movw	r24, r18
    1198:	be 01       	movw	r22, r28
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	0e 94 17 08 	call	0x102e	; 0x102e <planner_forward_pass_kernel>
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	08 95       	ret

000011b0 <plan_set_current>:
 block_t *plan_get_current_block() {
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
  return(&block_buffer[block_buffer_tail]);
}

void plan_set_current(double x, double y, double z, double c) {
    11b0:	2f 92       	push	r2
    11b2:	3f 92       	push	r3
    11b4:	4f 92       	push	r4
    11b6:	5f 92       	push	r5
    11b8:	6f 92       	push	r6
    11ba:	7f 92       	push	r7
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	3b 01       	movw	r6, r22
    11d2:	4c 01       	movw	r8, r24
    11d4:	19 01       	movw	r2, r18
    11d6:	2a 01       	movw	r4, r20
	st_synchronize();
    11d8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <st_synchronize>
    position[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    11dc:	c4 01       	movw	r24, r8
    11de:	b3 01       	movw	r22, r6
    11e0:	20 91 47 04 	lds	r18, 0x0447
    11e4:	30 91 48 04 	lds	r19, 0x0448
    11e8:	40 91 49 04 	lds	r20, 0x0449
    11ec:	50 91 4a 04 	lds	r21, 0x044A
    11f0:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    11f4:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    11f8:	29 e9       	ldi	r18, 0x99	; 153
    11fa:	82 2e       	mov	r8, r18
    11fc:	23 e0       	ldi	r18, 0x03	; 3
    11fe:	92 2e       	mov	r9, r18
    1200:	60 93 99 03 	sts	0x0399, r22
    1204:	70 93 9a 03 	sts	0x039A, r23
    1208:	80 93 9b 03 	sts	0x039B, r24
    120c:	90 93 9c 03 	sts	0x039C, r25
    position[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1210:	c2 01       	movw	r24, r4
    1212:	b1 01       	movw	r22, r2
    1214:	20 91 4b 04 	lds	r18, 0x044B
    1218:	30 91 4c 04 	lds	r19, 0x044C
    121c:	40 91 4d 04 	lds	r20, 0x044D
    1220:	50 91 4e 04 	lds	r21, 0x044E
    1224:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1228:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    122c:	f4 01       	movw	r30, r8
    122e:	34 96       	adiw	r30, 0x04	; 4
    1230:	60 93 9d 03 	sts	0x039D, r22
    1234:	71 83       	std	Z+1, r23	; 0x01
    1236:	82 83       	std	Z+2, r24	; 0x02
    1238:	93 83       	std	Z+3, r25	; 0x03
    position[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    123a:	c8 01       	movw	r24, r16
    123c:	b7 01       	movw	r22, r14
    123e:	20 91 4f 04 	lds	r18, 0x044F
    1242:	30 91 50 04 	lds	r19, 0x0450
    1246:	40 91 51 04 	lds	r20, 0x0451
    124a:	50 91 52 04 	lds	r21, 0x0452
    124e:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1252:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    1256:	f4 01       	movw	r30, r8
    1258:	38 96       	adiw	r30, 0x08	; 8
    125a:	60 93 a1 03 	sts	0x03A1, r22
    125e:	71 83       	std	Z+1, r23	; 0x01
    1260:	82 83       	std	Z+2, r24	; 0x02
    1262:	93 83       	std	Z+3, r25	; 0x03
    position[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1264:	c6 01       	movw	r24, r12
    1266:	b5 01       	movw	r22, r10
    1268:	20 91 53 04 	lds	r18, 0x0453
    126c:	30 91 54 04 	lds	r19, 0x0454
    1270:	40 91 55 04 	lds	r20, 0x0455
    1274:	50 91 56 04 	lds	r21, 0x0456
    1278:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    127c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    1280:	2c e0       	ldi	r18, 0x0C	; 12
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	82 0e       	add	r8, r18
    1286:	93 1e       	adc	r9, r19
    1288:	60 93 a5 03 	sts	0x03A5, r22
    128c:	f4 01       	movw	r30, r8
    128e:	71 83       	std	Z+1, r23	; 0x01
    1290:	82 83       	std	Z+2, r24	; 0x02
    1292:	93 83       	std	Z+3, r25	; 0x03
}
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	bf 90       	pop	r11
    12a2:	af 90       	pop	r10
    12a4:	9f 90       	pop	r9
    12a6:	8f 90       	pop	r8
    12a8:	7f 90       	pop	r7
    12aa:	6f 90       	pop	r6
    12ac:	5f 90       	pop	r5
    12ae:	4f 90       	pop	r4
    12b0:	3f 90       	pop	r3
    12b2:	2f 90       	pop	r2
    12b4:	08 95       	ret

000012b6 <plan_set_acceleration_manager_enabled>:
  block_buffer_tail = 0;
  plan_set_acceleration_manager_enabled(TRUE);
  clear_vector(position);
}

void plan_set_acceleration_manager_enabled(int enabled) {
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ec 01       	movw	r28, r24
  if ((!!acceleration_manager_enabled) != (!!enabled)) {
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	80 91 a9 03 	lds	r24, 0x03A9
    12c2:	81 11       	cpse	r24, r1
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	20 97       	sbiw	r28, 0x00	; 0
    12ca:	09 f0       	breq	.+2      	; 0x12ce <plan_set_acceleration_manager_enabled+0x18>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	98 17       	cp	r25, r24
    12d0:	49 f0       	breq	.+18     	; 0x12e4 <plan_set_acceleration_manager_enabled+0x2e>
    st_synchronize();
    12d2:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <st_synchronize>
    acceleration_manager_enabled = !!enabled;
    12d6:	10 92 a9 03 	sts	0x03A9, r1
    12da:	cd 2b       	or	r28, r29
    12dc:	19 f0       	breq	.+6      	; 0x12e4 <plan_set_acceleration_manager_enabled+0x2e>
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 93 a9 03 	sts	0x03A9, r24
  }
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <plan_init>:
  planner_forward_pass();
  planner_recalculate_trapezoids();
}

void plan_init() {
  block_buffer_head = 0;
    12ea:	10 92 96 03 	sts	0x0396, r1
    12ee:	10 92 95 03 	sts	0x0395, r1
  block_buffer_tail = 0;
    12f2:	10 92 98 03 	sts	0x0398, r1
    12f6:	10 92 97 03 	sts	0x0397, r1
  plan_set_acceleration_manager_enabled(TRUE);
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <plan_set_acceleration_manager_enabled>
  clear_vector(position);
    1302:	80 e1       	ldi	r24, 0x10	; 16
    1304:	e9 e9       	ldi	r30, 0x99	; 153
    1306:	f3 e0       	ldi	r31, 0x03	; 3
    1308:	df 01       	movw	r26, r30
    130a:	1d 92       	st	X+, r1
    130c:	8a 95       	dec	r24
    130e:	e9 f7       	brne	.-6      	; 0x130a <plan_init+0x20>
}
    1310:	08 95       	ret

00001312 <planner_reverse_pass_kernel>:
double factor_for_safe_speed(block_t *block) {
  return(settings.max_jerk/block->nominal_speed);  
}

// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) {
    1312:	2f 92       	push	r2
    1314:	3f 92       	push	r3
    1316:	4f 92       	push	r4
    1318:	5f 92       	push	r5
    131a:	6f 92       	push	r6
    131c:	7f 92       	push	r7
    131e:	8f 92       	push	r8
    1320:	9f 92       	push	r9
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <planner_reverse_pass_kernel+0x26>
    1338:	00 d0       	rcall	.+0      	; 0x133a <planner_reverse_pass_kernel+0x28>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	8c 01       	movw	r16, r24
    1340:	7e 83       	std	Y+6, r23	; 0x06
    1342:	6d 83       	std	Y+5, r22	; 0x05
  if(!current) { return; }
    1344:	67 2b       	or	r22, r23
    1346:	09 f4       	brne	.+2      	; 0x134a <planner_reverse_pass_kernel+0x38>
    1348:	07 c1       	rjmp	.+526    	; 0x1558 <planner_reverse_pass_kernel+0x246>

  double entry_factor = 1.0;
  double exit_factor;
  if (next) {
    134a:	41 15       	cp	r20, r1
    134c:	51 05       	cpc	r21, r1
    134e:	61 f0       	breq	.+24     	; 0x1368 <planner_reverse_pass_kernel+0x56>
    exit_factor = next->entry_factor;
    1350:	da 01       	movw	r26, r20
    1352:	d1 96       	adiw	r26, 0x31	; 49
    1354:	8d 91       	ld	r24, X+
    1356:	9d 91       	ld	r25, X+
    1358:	0d 90       	ld	r0, X+
    135a:	bc 91       	ld	r27, X
    135c:	a0 2d       	mov	r26, r0
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	ab 83       	std	Y+3, r26	; 0x03
    1364:	bc 83       	std	Y+4, r27	; 0x04
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <planner_reverse_pass_kernel+0x66>
  } else {
    exit_factor = factor_for_safe_speed(current);
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	0e 94 cb 07 	call	0xf96	; 0xf96 <factor_for_safe_speed>
    1370:	69 83       	std	Y+1, r22	; 0x01
    1372:	7a 83       	std	Y+2, r23	; 0x02
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	9c 83       	std	Y+4, r25	; 0x04
  }
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    1378:	01 15       	cp	r16, r1
    137a:	11 05       	cpc	r17, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <planner_reverse_pass_kernel+0x6e>
    137e:	e0 c0       	rjmp	.+448    	; 0x1540 <planner_reverse_pass_kernel+0x22e>

// "Junction jerk" in this context is the immediate change in speed at the junction of two blocks.
// This method will calculate the junction jerk as the euclidean distance between the nominal 
// velocities of the respective blocks.
inline double junction_jerk(block_t *before, block_t *after) {
  return(sqrt(
    1380:	f8 01       	movw	r30, r16
    1382:	61 8d       	ldd	r22, Z+25	; 0x19
    1384:	72 8d       	ldd	r23, Z+26	; 0x1a
    1386:	83 8d       	ldd	r24, Z+27	; 0x1b
    1388:	94 8d       	ldd	r25, Z+28	; 0x1c
    138a:	ad 81       	ldd	r26, Y+5	; 0x05
    138c:	be 81       	ldd	r27, Y+6	; 0x06
    138e:	59 96       	adiw	r26, 0x19	; 25
    1390:	2d 91       	ld	r18, X+
    1392:	3d 91       	ld	r19, X+
    1394:	4d 91       	ld	r20, X+
    1396:	5c 91       	ld	r21, X
    1398:	5c 97       	sbiw	r26, 0x1c	; 28
    139a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__subsf3>
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    13a6:	1b 01       	movw	r2, r22
    13a8:	2c 01       	movw	r4, r24
    13aa:	f8 01       	movw	r30, r16
    13ac:	65 8d       	ldd	r22, Z+29	; 0x1d
    13ae:	76 8d       	ldd	r23, Z+30	; 0x1e
    13b0:	87 8d       	ldd	r24, Z+31	; 0x1f
    13b2:	90 a1       	ldd	r25, Z+32	; 0x20
    13b4:	ad 81       	ldd	r26, Y+5	; 0x05
    13b6:	be 81       	ldd	r27, Y+6	; 0x06
    13b8:	5d 96       	adiw	r26, 0x1d	; 29
    13ba:	2d 91       	ld	r18, X+
    13bc:	3d 91       	ld	r19, X+
    13be:	4d 91       	ld	r20, X+
    13c0:	5c 91       	ld	r21, X
    13c2:	90 97       	sbiw	r26, 0x20	; 32
    13c4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__subsf3>
    13c8:	9b 01       	movw	r18, r22
    13ca:	ac 01       	movw	r20, r24
    13cc:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    13d0:	3b 01       	movw	r6, r22
    13d2:	4c 01       	movw	r8, r24
    13d4:	f8 01       	movw	r30, r16
    13d6:	61 a1       	ldd	r22, Z+33	; 0x21
    13d8:	72 a1       	ldd	r23, Z+34	; 0x22
    13da:	83 a1       	ldd	r24, Z+35	; 0x23
    13dc:	94 a1       	ldd	r25, Z+36	; 0x24
    13de:	ad 81       	ldd	r26, Y+5	; 0x05
    13e0:	be 81       	ldd	r27, Y+6	; 0x06
    13e2:	91 96       	adiw	r26, 0x21	; 33
    13e4:	2d 91       	ld	r18, X+
    13e6:	3d 91       	ld	r19, X+
    13e8:	4d 91       	ld	r20, X+
    13ea:	5c 91       	ld	r21, X
    13ec:	94 97       	sbiw	r26, 0x24	; 36
    13ee:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__subsf3>
    13f2:	9b 01       	movw	r18, r22
    13f4:	ac 01       	movw	r20, r24
    13f6:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    13fa:	5b 01       	movw	r10, r22
    13fc:	6c 01       	movw	r12, r24
    13fe:	f8 01       	movw	r30, r16
    1400:	65 a1       	ldd	r22, Z+37	; 0x25
    1402:	76 a1       	ldd	r23, Z+38	; 0x26
    1404:	87 a1       	ldd	r24, Z+39	; 0x27
    1406:	90 a5       	ldd	r25, Z+40	; 0x28
    1408:	ad 81       	ldd	r26, Y+5	; 0x05
    140a:	be 81       	ldd	r27, Y+6	; 0x06
    140c:	95 96       	adiw	r26, 0x25	; 37
    140e:	2d 91       	ld	r18, X+
    1410:	3d 91       	ld	r19, X+
    1412:	4d 91       	ld	r20, X+
    1414:	5c 91       	ld	r21, X
    1416:	98 97       	sbiw	r26, 0x28	; 40
    1418:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__subsf3>
    141c:	9b 01       	movw	r18, r22
    141e:	ac 01       	movw	r20, r24
    1420:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1424:	7b 01       	movw	r14, r22
    1426:	8c 01       	movw	r16, r24
    1428:	c2 01       	movw	r24, r4
    142a:	b1 01       	movw	r22, r2
    142c:	a4 01       	movw	r20, r8
    142e:	93 01       	movw	r18, r6
    1430:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    1434:	a6 01       	movw	r20, r12
    1436:	95 01       	movw	r18, r10
    1438:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    143c:	a8 01       	movw	r20, r16
    143e:	97 01       	movw	r18, r14
    1440:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    1444:	0e 94 bd 1b 	call	0x377a	; 0x377a <sqrt>
    1448:	5b 01       	movw	r10, r22
    144a:	6c 01       	movw	r12, r24
  
  // Calculate the entry_factor for the current block. 
  if (previous) {
    // Reduce speed so that junction_jerk is within the maximum allowed
    double jerk = junction_jerk(previous, current);
    if (jerk > settings.max_jerk) {
    144c:	e0 90 69 04 	lds	r14, 0x0469
    1450:	f0 90 6a 04 	lds	r15, 0x046A
    1454:	00 91 6b 04 	lds	r16, 0x046B
    1458:	10 91 6c 04 	lds	r17, 0x046C
    145c:	a8 01       	movw	r20, r16
    145e:	97 01       	movw	r18, r14
    1460:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__gesf2>
    1464:	18 16       	cp	r1, r24
    1466:	5c f0       	brlt	.+22     	; 0x147e <planner_reverse_pass_kernel+0x16c>
    1468:	0f 2e       	mov	r0, r31
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	6f 2e       	mov	r6, r31
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	7f 2e       	mov	r7, r31
    1472:	f0 e8       	ldi	r31, 0x80	; 128
    1474:	8f 2e       	mov	r8, r31
    1476:	ff e3       	ldi	r31, 0x3F	; 63
    1478:	9f 2e       	mov	r9, r31
    147a:	f0 2d       	mov	r31, r0
    147c:	08 c0       	rjmp	.+16     	; 0x148e <planner_reverse_pass_kernel+0x17c>
      entry_factor = (settings.max_jerk/jerk);
    147e:	c8 01       	movw	r24, r16
    1480:	b7 01       	movw	r22, r14
    1482:	a6 01       	movw	r20, r12
    1484:	95 01       	movw	r18, r10
    1486:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    148a:	3b 01       	movw	r6, r22
    148c:	4c 01       	movw	r8, r24
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
    148e:	c4 01       	movw	r24, r8
    1490:	b3 01       	movw	r22, r6
    1492:	29 81       	ldd	r18, Y+1	; 0x01
    1494:	3a 81       	ldd	r19, Y+2	; 0x02
    1496:	4b 81       	ldd	r20, Y+3	; 0x03
    1498:	5c 81       	ldd	r21, Y+4	; 0x04
    149a:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__gesf2>
    149e:	18 16       	cp	r1, r24
    14a0:	0c f0       	brlt	.+2      	; 0x14a4 <planner_reverse_pass_kernel+0x192>
    14a2:	54 c0       	rjmp	.+168    	; 0x154c <planner_reverse_pass_kernel+0x23a>
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
    14a4:	ed 81       	ldd	r30, Y+5	; 0x05
    14a6:	fe 81       	ldd	r31, Y+6	; 0x06
    14a8:	a1 a4       	ldd	r10, Z+41	; 0x29
    14aa:	b2 a4       	ldd	r11, Z+42	; 0x2a
    14ac:	c3 a4       	ldd	r12, Z+43	; 0x2b
    14ae:	d4 a4       	ldd	r13, Z+44	; 0x2c
    14b0:	c6 01       	movw	r24, r12
    14b2:	b5 01       	movw	r22, r10
    14b4:	29 81       	ldd	r18, Y+1	; 0x01
    14b6:	3a 81       	ldd	r19, Y+2	; 0x02
    14b8:	4b 81       	ldd	r20, Y+3	; 0x03
    14ba:	5c 81       	ldd	r21, Y+4	; 0x04
    14bc:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    14c0:	9b 01       	movw	r18, r22
    14c2:	ac 01       	movw	r20, r24
}                    

// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
// acceleration within the allotted distance.
inline double max_allowable_speed(double acceleration, double target_velocity, double distance) {
  return(
    14c4:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    14c8:	7b 01       	movw	r14, r22
    14ca:	8c 01       	movw	r16, r24
    14cc:	20 91 65 04 	lds	r18, 0x0465
    14d0:	30 91 66 04 	lds	r19, 0x0466
    14d4:	40 91 67 04 	lds	r20, 0x0467
    14d8:	50 91 68 04 	lds	r21, 0x0468
    14dc:	50 58       	subi	r21, 0x80	; 128
    14de:	ca 01       	movw	r24, r20
    14e0:	b9 01       	movw	r22, r18
    14e2:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e7       	ldi	r20, 0x70	; 112
    14ec:	52 e4       	ldi	r21, 0x42	; 66
    14ee:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e7       	ldi	r20, 0x70	; 112
    14f8:	52 ec       	ldi	r21, 0xC2	; 194
    14fa:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    14fe:	ad 81       	ldd	r26, Y+5	; 0x05
    1500:	be 81       	ldd	r27, Y+6	; 0x06
    1502:	9d 96       	adiw	r26, 0x2d	; 45
    1504:	2d 91       	ld	r18, X+
    1506:	3d 91       	ld	r19, X+
    1508:	4d 91       	ld	r20, X+
    150a:	5c 91       	ld	r21, X
    150c:	d0 97       	sbiw	r26, 0x30	; 48
    150e:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	c8 01       	movw	r24, r16
    1518:	b7 01       	movw	r22, r14
    151a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    151e:	0e 94 bd 1b 	call	0x377a	; 0x377a <sqrt>
    } 
    // If the required deceleration across the block is too rapid, reduce the entry_factor accordingly.
    if (entry_factor > exit_factor) {
      double max_entry_speed = max_allowable_speed(-settings.acceleration,current->nominal_speed*exit_factor, 
        current->millimeters);
      double max_entry_factor = max_entry_speed/current->nominal_speed;
    1522:	a6 01       	movw	r20, r12
    1524:	95 01       	movw	r18, r10
    1526:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    152a:	7b 01       	movw	r14, r22
    152c:	8c 01       	movw	r16, r24
      if (max_entry_factor < entry_factor) {
    152e:	a4 01       	movw	r20, r8
    1530:	93 01       	movw	r18, r6
    1532:	0e 94 01 19 	call	0x3202	; 0x3202 <__cmpsf2>
    1536:	88 23       	and	r24, r24
    1538:	4c f4       	brge	.+18     	; 0x154c <planner_reverse_pass_kernel+0x23a>
    153a:	37 01       	movw	r6, r14
    153c:	48 01       	movw	r8, r16
    153e:	06 c0       	rjmp	.+12     	; 0x154c <planner_reverse_pass_kernel+0x23a>
        entry_factor = max_entry_factor;
      }
    }    
  } else {
    entry_factor = factor_for_safe_speed(current);
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	0e 94 cb 07 	call	0xf96	; 0xf96 <factor_for_safe_speed>
    1548:	3b 01       	movw	r6, r22
    154a:	4c 01       	movw	r8, r24
  }
    
  // Store result
  current->entry_factor = entry_factor;
    154c:	ed 81       	ldd	r30, Y+5	; 0x05
    154e:	fe 81       	ldd	r31, Y+6	; 0x06
    1550:	61 aa       	std	Z+49, r6	; 0x31
    1552:	72 aa       	std	Z+50, r7	; 0x32
    1554:	83 aa       	std	Z+51, r8	; 0x33
    1556:	94 aa       	std	Z+52, r9	; 0x34
}
    1558:	26 96       	adiw	r28, 0x06	; 6
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <planner_reverse_pass>:

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
  auto int8_t block_index = block_buffer_head;
    1594:	80 91 95 03 	lds	r24, 0x0395
    1598:	90 91 96 03 	lds	r25, 0x0396
    159c:	f8 2e       	mov	r15, r24
    159e:	c0 e0       	ldi	r28, 0x00	; 0
    15a0:	d0 e0       	ldi	r29, 0x00	; 0
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	12 c0       	rjmp	.+36     	; 0x15cc <planner_reverse_pass+0x42>
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index--;
    15a8:	fa 94       	dec	r15
    if(block_index < 0) {
    15aa:	f7 fe       	sbrs	r15, 7
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <planner_reverse_pass+0x28>
    15ae:	34 e0       	ldi	r19, 0x04	; 4
    15b0:	f3 2e       	mov	r15, r19
      block_index = BLOCK_BUFFER_SIZE-1;
    }
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    15b2:	8f 2d       	mov	r24, r15
    15b4:	99 e4       	ldi	r25, 0x49	; 73
    15b6:	89 02       	muls	r24, r25
    15b8:	80 01       	movw	r16, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	08 5d       	subi	r16, 0xD8	; 216
    15be:	1d 4f       	sbci	r17, 0xFD	; 253
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
    15c0:	c8 01       	movw	r24, r16
    15c2:	be 01       	movw	r22, r28
    15c4:	0e 94 89 09 	call	0x1312	; 0x1312 <planner_reverse_pass_kernel>
    15c8:	ae 01       	movw	r20, r28
    15ca:	e8 01       	movw	r28, r16
// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
void planner_reverse_pass() {
  auto int8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    15cc:	20 91 97 03 	lds	r18, 0x0397
    15d0:	30 91 98 03 	lds	r19, 0x0398
    15d4:	8f 2d       	mov	r24, r15
    15d6:	99 27       	eor	r25, r25
    15d8:	87 fd       	sbrc	r24, 7
    15da:	90 95       	com	r25
    15dc:	82 17       	cp	r24, r18
    15de:	93 07       	cpc	r25, r19
    15e0:	19 f7       	brne	.-58     	; 0x15a8 <planner_reverse_pass+0x1e>
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    planner_reverse_pass_kernel(block[0], block[1], block[2]);
  }
  planner_reverse_pass_kernel(NULL, block[0], block[1]);
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	be 01       	movw	r22, r28
    15e8:	0e 94 89 09 	call	0x1312	; 0x1312 <planner_reverse_pass_kernel>
}
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	08 95       	ret

000015f8 <calculate_trapezoid_for_block>:
                                   |             + <- nominal_rate*exit_factor  
                                   +-------------+                              
                                       time -->                                 
*/                                                                              

void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
    15f8:	2f 92       	push	r2
    15fa:	3f 92       	push	r3
    15fc:	4f 92       	push	r4
    15fe:	5f 92       	push	r5
    1600:	6f 92       	push	r6
    1602:	7f 92       	push	r7
    1604:	8f 92       	push	r8
    1606:	9f 92       	push	r9
    1608:	af 92       	push	r10
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	62 97       	sbiw	r28, 0x12	; 18
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	9a 8b       	std	Y+18, r25	; 0x12
    162e:	89 8b       	std	Y+17, r24	; 0x11
    1630:	6a 01       	movw	r12, r20
    1632:	7b 01       	movw	r14, r22
    1634:	18 01       	movw	r2, r16
    1636:	29 01       	movw	r4, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
    1638:	fc 01       	movw	r30, r24
    163a:	65 89       	ldd	r22, Z+21	; 0x15
    163c:	76 89       	ldd	r23, Z+22	; 0x16
    163e:	87 89       	ldd	r24, Z+23	; 0x17
    1640:	90 8d       	ldd	r25, Z+24	; 0x18
    1642:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatunsisf>
    1646:	3b 01       	movw	r6, r22
    1648:	4c 01       	movw	r8, r24
    164a:	a7 01       	movw	r20, r14
    164c:	96 01       	movw	r18, r12
    164e:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1652:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ceil>
    1656:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fixunssfsi>
    165a:	7b 01       	movw	r14, r22
    165c:	8c 01       	movw	r16, r24
    165e:	e9 89       	ldd	r30, Y+17	; 0x11
    1660:	fa 89       	ldd	r31, Y+18	; 0x12
    1662:	65 ab       	std	Z+53, r22	; 0x35
    1664:	76 ab       	std	Z+54, r23	; 0x36
    1666:	87 ab       	std	Z+55, r24	; 0x37
    1668:	90 af       	std	Z+56, r25	; 0x38
  block->final_rate = ceil(block->nominal_rate*exit_factor);
    166a:	c4 01       	movw	r24, r8
    166c:	b3 01       	movw	r22, r6
    166e:	a2 01       	movw	r20, r4
    1670:	91 01       	movw	r18, r2
    1672:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1676:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ceil>
    167a:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fixunssfsi>
    167e:	1b 01       	movw	r2, r22
    1680:	2c 01       	movw	r4, r24
    1682:	e9 89       	ldd	r30, Y+17	; 0x11
    1684:	fa 89       	ldd	r31, Y+18	; 0x12
    1686:	61 af       	std	Z+57, r22	; 0x39
    1688:	72 af       	std	Z+58, r23	; 0x3a
    168a:	83 af       	std	Z+59, r24	; 0x3b
    168c:	94 af       	std	Z+60, r25	; 0x3c
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
    168e:	fd 96       	adiw	r30, 0x3d	; 61
    1690:	60 81       	ld	r22, Z
    1692:	71 81       	ldd	r23, Z+1	; 0x01
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	fd 97       	sbiw	r30, 0x3d	; 61
    169a:	fa 8b       	std	Y+18, r31	; 0x12
    169c:	e9 8b       	std	Y+17, r30	; 0x11
    169e:	28 e2       	ldi	r18, 0x28	; 40
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__mulsi3>
    16aa:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e7       	ldi	r20, 0x70	; 112
    16b4:	52 e4       	ldi	r21, 0x42	; 66
    16b6:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    16ba:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
    16be:	5b 01       	movw	r10, r22
    16c0:	6c 01       	movw	r12, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    16c2:	c8 01       	movw	r24, r16
    16c4:	b7 01       	movw	r22, r14
    16c6:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatunsisf>
    16ca:	7b 01       	movw	r14, r22
    16cc:	8c 01       	movw	r16, r24
    16ce:	c6 01       	movw	r24, r12
    16d0:	b5 01       	movw	r22, r10
    16d2:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    16d6:	6d 83       	std	Y+5, r22	; 0x05
    16d8:	7e 83       	std	Y+6, r23	; 0x06
    16da:	8f 83       	std	Y+7, r24	; 0x07
    16dc:	98 87       	std	Y+8, r25	; 0x08
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    16de:	c4 01       	movw	r24, r8
    16e0:	b3 01       	movw	r22, r6
    16e2:	a4 01       	movw	r20, r8
    16e4:	93 01       	movw	r18, r6
    16e6:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    16ea:	3b 01       	movw	r6, r22
    16ec:	4c 01       	movw	r8, r24
    16ee:	c8 01       	movw	r24, r16
    16f0:	b7 01       	movw	r22, r14
    16f2:	a8 01       	movw	r20, r16
    16f4:	97 01       	movw	r18, r14
    16f6:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    16fa:	69 87       	std	Y+9, r22	; 0x09
    16fc:	7a 87       	std	Y+10, r23	; 0x0a
    16fe:	8b 87       	std	Y+11, r24	; 0x0b
    1700:	9c 87       	std	Y+12, r25	; 0x0c
    1702:	6d 81       	ldd	r22, Y+5	; 0x05
    1704:	7e 81       	ldd	r23, Y+6	; 0x06
    1706:	8f 81       	ldd	r24, Y+7	; 0x07
    1708:	98 85       	ldd	r25, Y+8	; 0x08
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    1712:	6d 87       	std	Y+13, r22	; 0x0d
    1714:	7e 87       	std	Y+14, r23	; 0x0e
    1716:	8f 87       	std	Y+15, r24	; 0x0f
    1718:	98 8b       	std	Y+16, r25	; 0x10
void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) {
  block->initial_rate = ceil(block->nominal_rate*entry_factor);
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    171a:	c4 01       	movw	r24, r8
    171c:	b3 01       	movw	r22, r6
    171e:	29 85       	ldd	r18, Y+9	; 0x09
    1720:	3a 85       	ldd	r19, Y+10	; 0x0a
    1722:	4b 85       	ldd	r20, Y+11	; 0x0b
    1724:	5c 85       	ldd	r21, Y+12	; 0x0c
    1726:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__subsf3>
    172a:	2d 85       	ldd	r18, Y+13	; 0x0d
    172c:	3e 85       	ldd	r19, Y+14	; 0x0e
    172e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1730:	58 89       	ldd	r21, Y+16	; 0x10
    1732:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1736:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ceil>
    173a:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
    173e:	69 83       	std	Y+1, r22	; 0x01
    1740:	7a 83       	std	Y+2, r23	; 0x02
    1742:	8b 83       	std	Y+3, r24	; 0x03
    1744:	9c 83       	std	Y+4, r25	; 0x04
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    1746:	c2 01       	movw	r24, r4
    1748:	b1 01       	movw	r22, r2
    174a:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatunsisf>
    174e:	9b 01       	movw	r18, r22
    1750:	ac 01       	movw	r20, r24
#define ONE_MINUTE_OF_MICROSECONDS 60000000.0

// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
inline double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) {
  return(
    1752:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1756:	1b 01       	movw	r2, r22
    1758:	2c 01       	movw	r4, r24
  block->final_rate = ceil(block->nominal_rate*exit_factor);
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0;
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    175a:	a4 01       	movw	r20, r8
    175c:	93 01       	movw	r18, r6
    175e:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__subsf3>
    1762:	7b 01       	movw	r14, r22
    1764:	8c 01       	movw	r16, r24
    1766:	d0 94       	com	r13
    1768:	c0 94       	com	r12
    176a:	b0 94       	com	r11
    176c:	a0 94       	com	r10
    176e:	a1 1c       	adc	r10, r1
    1770:	b1 1c       	adc	r11, r1
    1772:	c1 1c       	adc	r12, r1
    1774:	d1 1c       	adc	r13, r1
    1776:	c6 01       	movw	r24, r12
    1778:	b5 01       	movw	r22, r10
    177a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	c8 01       	movw	r24, r16
    178c:	b7 01       	movw	r22, r14
    178e:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1792:	0e 94 db 19 	call	0x33b6	; 0x33b6 <floor>

  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    1796:	e9 89       	ldd	r30, Y+17	; 0x11
    1798:	fa 89       	ldd	r31, Y+18	; 0x12
    179a:	a1 88       	ldd	r10, Z+17	; 0x11
    179c:	b2 88       	ldd	r11, Z+18	; 0x12
    179e:	c3 88       	ldd	r12, Z+19	; 0x13
    17a0:	d4 88       	ldd	r13, Z+20	; 0x14
    17a2:	86 01       	movw	r16, r12
    17a4:	75 01       	movw	r14, r10
    17a6:	29 81       	ldd	r18, Y+1	; 0x01
    17a8:	3a 81       	ldd	r19, Y+2	; 0x02
    17aa:	4b 81       	ldd	r20, Y+3	; 0x03
    17ac:	5c 81       	ldd	r21, Y+4	; 0x04
    17ae:	e2 1a       	sub	r14, r18
    17b0:	f3 0a       	sbc	r15, r19
    17b2:	04 0b       	sbc	r16, r20
    17b4:	15 0b       	sbc	r17, r21
    17b6:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
    17ba:	a8 01       	movw	r20, r16
    17bc:	97 01       	movw	r18, r14
    17be:	26 1b       	sub	r18, r22
    17c0:	37 0b       	sbc	r19, r23
    17c2:	48 0b       	sbc	r20, r24
    17c4:	59 0b       	sbc	r21, r25
    17c6:	da 01       	movw	r26, r20
    17c8:	c9 01       	movw	r24, r18
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    17ca:	57 ff       	sbrs	r21, 7
    17cc:	34 c0       	rjmp	.+104    	; 0x1836 <calculate_trapezoid_for_block+0x23e>
    accelerate_steps = ceil(
    17ce:	c6 01       	movw	r24, r12
    17d0:	b5 01       	movw	r22, r10
    17d2:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	6d 85       	ldd	r22, Y+13	; 0x0d
    17dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    17de:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e0:	98 89       	ldd	r25, Y+16	; 0x10
    17e2:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    17e6:	29 85       	ldd	r18, Y+9	; 0x09
    17e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    17ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    17ee:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__subsf3>
    17f2:	a2 01       	movw	r20, r4
    17f4:	91 01       	movw	r18, r2
    17f6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    17fa:	7b 01       	movw	r14, r22
    17fc:	8c 01       	movw	r16, r24
    17fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1800:	7e 81       	ldd	r23, Y+6	; 0x06
    1802:	8f 81       	ldd	r24, Y+7	; 0x07
    1804:	98 85       	ldd	r25, Y+8	; 0x08
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	50 e4       	ldi	r21, 0x40	; 64
    180e:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1812:	9b 01       	movw	r18, r22
    1814:	ac 01       	movw	r20, r24
    1816:	c8 01       	movw	r24, r16
    1818:	b7 01       	movw	r22, r14
    181a:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    181e:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ceil>
    1822:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
    1826:	69 83       	std	Y+1, r22	; 0x01
    1828:	7a 83       	std	Y+2, r23	; 0x02
    182a:	8b 83       	std	Y+3, r24	; 0x03
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e0       	ldi	r26, 0x00	; 0
    1834:	b0 e0       	ldi	r27, 0x00	; 0
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    plateau_steps = 0;
  }  
  
  block->accelerate_until = accelerate_steps;
    1836:	49 89       	ldd	r20, Y+17	; 0x11
    1838:	5a 89       	ldd	r21, Y+18	; 0x12
    183a:	4f 5b       	subi	r20, 0xBF	; 191
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	fa 01       	movw	r30, r20
    1840:	29 81       	ldd	r18, Y+1	; 0x01
    1842:	3a 81       	ldd	r19, Y+2	; 0x02
    1844:	4b 81       	ldd	r20, Y+3	; 0x03
    1846:	5c 81       	ldd	r21, Y+4	; 0x04
    1848:	21 93       	st	Z+, r18
    184a:	31 93       	st	Z+, r19
    184c:	41 93       	st	Z+, r20
    184e:	51 93       	st	Z+, r21
    1850:	fa 8b       	std	Y+18, r31	; 0x12
    1852:	e9 8b       	std	Y+17, r30	; 0x11
  block->decelerate_after = accelerate_steps+plateau_steps;
    1854:	82 0f       	add	r24, r18
    1856:	93 1f       	adc	r25, r19
    1858:	a4 1f       	adc	r26, r20
    185a:	b5 1f       	adc	r27, r21
    185c:	80 83       	st	Z, r24
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	a2 83       	std	Z+2, r26	; 0x02
    1862:	b3 83       	std	Z+3, r27	; 0x03
}                    
    1864:	62 96       	adiw	r28, 0x12	; 18
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	cf 90       	pop	r12
    1880:	bf 90       	pop	r11
    1882:	af 90       	pop	r10
    1884:	9f 90       	pop	r9
    1886:	8f 90       	pop	r8
    1888:	7f 90       	pop	r7
    188a:	6f 90       	pop	r6
    188c:	5f 90       	pop	r5
    188e:	4f 90       	pop	r4
    1890:	3f 90       	pop	r3
    1892:	2f 90       	pop	r2
    1894:	08 95       	ret

00001896 <planner_recalculate_trapezoids>:
}

// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
// entry_factor for each junction. Must be called by planner_recalculate() after 
// updating the blocks.
void planner_recalculate_trapezoids() {
    1896:	cf 92       	push	r12
    1898:	df 92       	push	r13
    189a:	ef 92       	push	r14
    189c:	ff 92       	push	r15
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
  int8_t block_index = block_buffer_tail;
    18a6:	80 91 97 03 	lds	r24, 0x0397
    18aa:	90 91 98 03 	lds	r25, 0x0398
    18ae:	28 2f       	mov	r18, r24
    18b0:	c0 e0       	ldi	r28, 0x00	; 0
    18b2:	d0 e0       	ldi	r29, 0x00	; 0
    18b4:	1e c0       	rjmp	.+60     	; 0x18f2 <planner_recalculate_trapezoids+0x5c>
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    18b6:	89 e4       	ldi	r24, 0x49	; 73
    18b8:	28 02       	muls	r18, r24
    18ba:	70 01       	movw	r14, r0
    18bc:	11 24       	eor	r1, r1
    18be:	e8 e2       	ldi	r30, 0x28	; 40
    18c0:	f2 e0       	ldi	r31, 0x02	; 2
    18c2:	ee 0e       	add	r14, r30
    18c4:	ff 1e       	adc	r15, r31
    if (current) {
    18c6:	20 97       	sbiw	r28, 0x00	; 0
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <planner_recalculate_trapezoids+0x4c>
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    18ca:	49 a9       	ldd	r20, Y+49	; 0x31
    18cc:	5a a9       	ldd	r21, Y+50	; 0x32
    18ce:	6b a9       	ldd	r22, Y+51	; 0x33
    18d0:	7c a9       	ldd	r23, Y+52	; 0x34
    18d2:	f7 01       	movw	r30, r14
    18d4:	01 a9       	ldd	r16, Z+49	; 0x31
    18d6:	12 a9       	ldd	r17, Z+50	; 0x32
    18d8:	23 a9       	ldd	r18, Z+51	; 0x33
    18da:	34 a9       	ldd	r19, Z+52	; 0x34
    18dc:	ce 01       	movw	r24, r28
    18de:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <calculate_trapezoid_for_block>
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
    18e2:	c6 01       	movw	r24, r12
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	65 e0       	ldi	r22, 0x05	; 5
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    18ee:	28 2f       	mov	r18, r24
    18f0:	e7 01       	movw	r28, r14
void planner_recalculate_trapezoids() {
  int8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    18f2:	c2 2e       	mov	r12, r18
    18f4:	dd 24       	eor	r13, r13
    18f6:	c7 fc       	sbrc	r12, 7
    18f8:	d0 94       	com	r13
    18fa:	80 91 95 03 	lds	r24, 0x0395
    18fe:	90 91 96 03 	lds	r25, 0x0396
    1902:	c8 16       	cp	r12, r24
    1904:	d9 06       	cpc	r13, r25
    1906:	b9 f6       	brne	.-82     	; 0x18b6 <planner_recalculate_trapezoids+0x20>
    if (current) {
      calculate_trapezoid_for_block(current, current->entry_factor, next->entry_factor);      
    }
    block_index = (block_index+1) % BLOCK_BUFFER_SIZE;
  }
  calculate_trapezoid_for_block(next, next->entry_factor, factor_for_safe_speed(next));
    1908:	ce 01       	movw	r24, r28
    190a:	0e 94 cb 07 	call	0xf96	; 0xf96 <factor_for_safe_speed>
    190e:	8b 01       	movw	r16, r22
    1910:	9c 01       	movw	r18, r24
    1912:	49 a9       	ldd	r20, Y+49	; 0x31
    1914:	5a a9       	ldd	r21, Y+50	; 0x32
    1916:	6b a9       	ldd	r22, Y+51	; 0x33
    1918:	7c a9       	ldd	r23, Y+52	; 0x34
    191a:	ce 01       	movw	r24, r28
    191c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <calculate_trapezoid_for_block>
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	08 95       	ret

00001932 <planner_recalculate>:
// the set limit. Finally it will:
//
//   3. Recalculate trapezoids for all blocks.

void planner_recalculate() {     
  planner_reverse_pass();
    1932:	0e 94 c5 0a 	call	0x158a	; 0x158a <planner_reverse_pass>
  planner_forward_pass();
    1936:	0e 94 9c 08 	call	0x1138	; 0x1138 <planner_forward_pass>
  planner_recalculate_trapezoids();
    193a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <planner_recalculate_trapezoids>
}
    193e:	08 95       	ret

00001940 <plan_buffer_line>:


// Add a new linear movement to the buffer. steps_x, _y, _z and _c is the absolute position in 
// mm. Microseconds specify how many microseconds the move should take to perform. To aid acceleration
// calculation the caller must also provide the physical length of the line in millimeters.
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
    1940:	2f 92       	push	r2
    1942:	3f 92       	push	r3
    1944:	4f 92       	push	r4
    1946:	5f 92       	push	r5
    1948:	6f 92       	push	r6
    194a:	7f 92       	push	r7
    194c:	8f 92       	push	r8
    194e:	9f 92       	push	r9
    1950:	af 92       	push	r10
    1952:	bf 92       	push	r11
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	e4 97       	sbiw	r28, 0x34	; 52
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	2f a3       	std	Y+39, r18	; 0x27
    1976:	38 a7       	std	Y+40, r19	; 0x28
    1978:	49 a7       	std	Y+41, r20	; 0x29
    197a:	5a a7       	std	Y+42, r21	; 0x2a
    197c:	eb a6       	std	Y+43, r14	; 0x2b
    197e:	fc a6       	std	Y+44, r15	; 0x2c
    1980:	0d a7       	std	Y+45, r16	; 0x2d
    1982:	1e a7       	std	Y+46, r17	; 0x2e
    1984:	af a6       	std	Y+47, r10	; 0x2f
    1986:	b8 aa       	std	Y+48, r11	; 0x30
    1988:	c9 aa       	std	Y+49, r12	; 0x31
    198a:	da aa       	std	Y+50, r13	; 0x32
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    198c:	20 91 47 04 	lds	r18, 0x0447
    1990:	30 91 48 04 	lds	r19, 0x0448
    1994:	40 91 49 04 	lds	r20, 0x0449
    1998:	50 91 4a 04 	lds	r21, 0x044A
    199c:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    19a0:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    19a4:	7b 01       	movw	r14, r22
    19a6:	8c 01       	movw	r16, r24
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    19a8:	20 91 4b 04 	lds	r18, 0x044B
    19ac:	30 91 4c 04 	lds	r19, 0x044C
    19b0:	40 91 4d 04 	lds	r20, 0x044D
    19b4:	50 91 4e 04 	lds	r21, 0x044E
    19b8:	2b a3       	std	Y+35, r18	; 0x23
    19ba:	3c a3       	std	Y+36, r19	; 0x24
    19bc:	4d a3       	std	Y+37, r20	; 0x25
    19be:	5e a3       	std	Y+38, r21	; 0x26
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    19c0:	20 90 4f 04 	lds	r2, 0x044F
    19c4:	30 90 50 04 	lds	r3, 0x0450
    19c8:	40 90 51 04 	lds	r4, 0x0451
    19cc:	50 90 52 04 	lds	r5, 0x0452
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    19d0:	a0 90 53 04 	lds	r10, 0x0453
    19d4:	b0 90 54 04 	lds	r11, 0x0454
    19d8:	c0 90 55 04 	lds	r12, 0x0455
    19dc:	d0 90 56 04 	lds	r13, 0x0456
  
  // Calculate the buffer head after we push this byte
	int next_buffer_head = (block_buffer_head + 1) % BLOCK_BUFFER_SIZE;	
    19e0:	80 91 95 03 	lds	r24, 0x0395
    19e4:	90 91 96 03 	lds	r25, 0x0396
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	65 e0       	ldi	r22, 0x05	; 5
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    19f2:	8b ab       	std	Y+51, r24	; 0x33
    19f4:	9c ab       	std	Y+52, r25	; 0x34
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <plan_buffer_line+0xc6>
	// If the buffer is full: good! That means we are well ahead of the robot. 
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
    19f8:	83 b7       	in	r24, 0x33	; 51
    19fa:	81 60       	ori	r24, 0x01	; 1
    19fc:	83 bf       	out	0x33, r24	; 51
    19fe:	88 95       	sleep
    1a00:	83 b7       	in	r24, 0x33	; 51
    1a02:	8e 7f       	andi	r24, 0xFE	; 254
    1a04:	83 bf       	out	0x33, r24	; 51
    1a06:	80 91 97 03 	lds	r24, 0x0397
    1a0a:	90 91 98 03 	lds	r25, 0x0398
    1a0e:	4b a9       	ldd	r20, Y+51	; 0x33
    1a10:	5c a9       	ldd	r21, Y+52	; 0x34
    1a12:	84 17       	cp	r24, r20
    1a14:	95 07       	cpc	r25, r21
    1a16:	81 f3       	breq	.-32     	; 0x19f8 <plan_buffer_line+0xb8>
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    1a18:	20 91 95 03 	lds	r18, 0x0395
    1a1c:	30 91 96 03 	lds	r19, 0x0396
    1a20:	89 e4       	ldi	r24, 0x49	; 73
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	28 9f       	mul	r18, r24
    1a26:	d0 01       	movw	r26, r0
    1a28:	29 9f       	mul	r18, r25
    1a2a:	b0 0d       	add	r27, r0
    1a2c:	38 9f       	mul	r19, r24
    1a2e:	b0 0d       	add	r27, r0
    1a30:	11 24       	eor	r1, r1
    1a32:	a8 5d       	subi	r26, 0xD8	; 216
    1a34:	bd 4f       	sbci	r27, 0xFD	; 253
    1a36:	ba a3       	std	Y+34, r27	; 0x22
    1a38:	a9 a3       	std	Y+33, r26	; 0x21
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1a3a:	80 91 99 03 	lds	r24, 0x0399
    1a3e:	90 91 9a 03 	lds	r25, 0x039A
    1a42:	a0 91 9b 03 	lds	r26, 0x039B
    1a46:	b0 91 9c 03 	lds	r27, 0x039C
    1a4a:	37 01       	movw	r6, r14
    1a4c:	48 01       	movw	r8, r16
    1a4e:	68 1a       	sub	r6, r24
    1a50:	79 0a       	sbc	r7, r25
    1a52:	8a 0a       	sbc	r8, r26
    1a54:	9b 0a       	sbc	r9, r27
    1a56:	97 fe       	sbrs	r9, 7
    1a58:	08 c0       	rjmp	.+16     	; 0x1a6a <plan_buffer_line+0x12a>
    1a5a:	90 94       	com	r9
    1a5c:	80 94       	com	r8
    1a5e:	70 94       	com	r7
    1a60:	60 94       	com	r6
    1a62:	61 1c       	adc	r6, r1
    1a64:	71 1c       	adc	r7, r1
    1a66:	81 1c       	adc	r8, r1
    1a68:	91 1c       	adc	r9, r1
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
  target[C_AXIS] = lround(c*settings.steps_per_mm[C_AXIS]);     
    1a6a:	6f a5       	ldd	r22, Y+47	; 0x2f
    1a6c:	78 a9       	ldd	r23, Y+48	; 0x30
    1a6e:	89 a9       	ldd	r24, Y+49	; 0x31
    1a70:	9a a9       	ldd	r25, Y+50	; 0x32
    1a72:	a6 01       	movw	r20, r12
    1a74:	95 01       	movw	r18, r10
    1a76:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1a7a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    1a7e:	6d 87       	std	Y+13, r22	; 0x0d
    1a80:	7e 87       	std	Y+14, r23	; 0x0e
    1a82:	8f 87       	std	Y+15, r24	; 0x0f
    1a84:	98 8b       	std	Y+16, r25	; 0x10
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    1a86:	6b a5       	ldd	r22, Y+43	; 0x2b
    1a88:	7c a5       	ldd	r23, Y+44	; 0x2c
    1a8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a8e:	a2 01       	movw	r20, r4
    1a90:	91 01       	movw	r18, r2
    1a92:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1a96:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    1a9a:	69 87       	std	Y+9, r22	; 0x09
    1a9c:	7a 87       	std	Y+10, r23	; 0x0a
    1a9e:	8b 87       	std	Y+11, r24	; 0x0b
    1aa0:	9c 87       	std	Y+12, r25	; 0x0c
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    1aa2:	6f a1       	ldd	r22, Y+39	; 0x27
    1aa4:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa6:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aaa:	2b a1       	ldd	r18, Y+35	; 0x23
    1aac:	3c a1       	ldd	r19, Y+36	; 0x24
    1aae:	4d a1       	ldd	r20, Y+37	; 0x25
    1ab0:	5e a1       	ldd	r21, Y+38	; 0x26
    1ab2:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1ab6:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    1aba:	6d 83       	std	Y+5, r22	; 0x05
    1abc:	7e 83       	std	Y+6, r23	; 0x06
    1abe:	8f 83       	std	Y+7, r24	; 0x07
    1ac0:	98 87       	std	Y+8, r25	; 0x08
void plan_buffer_line(double x, double y, double z, double c, double feed_rate, int invert_feed_rate) {
  // The target position of the tool in absolute steps
  
  // Calculate target position in absolute steps
  int32_t target[4];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    1ac2:	e9 82       	std	Y+1, r14	; 0x01
    1ac4:	fa 82       	std	Y+2, r15	; 0x02
    1ac6:	0b 83       	std	Y+3, r16	; 0x03
    1ac8:	1c 83       	std	Y+4, r17	; 0x04
	// Rest here until there is room in the buffer.
  while(block_buffer_tail == next_buffer_head) { sleep_mode(); }
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-position[X_AXIS]);
    1aca:	e9 a1       	ldd	r30, Y+33	; 0x21
    1acc:	fa a1       	ldd	r31, Y+34	; 0x22
    1ace:	60 82       	st	Z, r6
    1ad0:	71 82       	std	Z+1, r7	; 0x01
    1ad2:	82 82       	std	Z+2, r8	; 0x02
    1ad4:	93 82       	std	Z+3, r9	; 0x03
  block->steps_y = labs(target[Y_AXIS]-position[Y_AXIS]);
    1ad6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad8:	3e 81       	ldd	r19, Y+6	; 0x06
    1ada:	4f 81       	ldd	r20, Y+7	; 0x07
    1adc:	58 85       	ldd	r21, Y+8	; 0x08
    1ade:	80 91 9d 03 	lds	r24, 0x039D
    1ae2:	90 91 9e 03 	lds	r25, 0x039E
    1ae6:	a0 91 9f 03 	lds	r26, 0x039F
    1aea:	b0 91 a0 03 	lds	r27, 0x03A0
    1aee:	28 1b       	sub	r18, r24
    1af0:	39 0b       	sbc	r19, r25
    1af2:	4a 0b       	sbc	r20, r26
    1af4:	5b 0b       	sbc	r21, r27
    1af6:	57 ff       	sbrs	r21, 7
    1af8:	07 c0       	rjmp	.+14     	; 0x1b08 <plan_buffer_line+0x1c8>
    1afa:	50 95       	com	r21
    1afc:	40 95       	com	r20
    1afe:	30 95       	com	r19
    1b00:	21 95       	neg	r18
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	4f 4f       	sbci	r20, 0xFF	; 255
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	a9 a1       	ldd	r26, Y+33	; 0x21
    1b0a:	ba a1       	ldd	r27, Y+34	; 0x22
    1b0c:	14 96       	adiw	r26, 0x04	; 4
    1b0e:	2d 93       	st	X+, r18
    1b10:	3d 93       	st	X+, r19
    1b12:	4d 93       	st	X+, r20
    1b14:	5c 93       	st	X, r21
    1b16:	17 97       	sbiw	r26, 0x07	; 7
  block->steps_z = labs(target[Z_AXIS]-position[Z_AXIS]);
    1b18:	a0 90 a1 03 	lds	r10, 0x03A1
    1b1c:	b0 90 a2 03 	lds	r11, 0x03A2
    1b20:	c0 90 a3 03 	lds	r12, 0x03A3
    1b24:	d0 90 a4 03 	lds	r13, 0x03A4
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b2e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b30:	8a 19       	sub	r24, r10
    1b32:	9b 09       	sbc	r25, r11
    1b34:	ac 09       	sbc	r26, r12
    1b36:	bd 09       	sbc	r27, r13
    1b38:	b7 ff       	sbrs	r27, 7
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <plan_buffer_line+0x20a>
    1b3c:	b0 95       	com	r27
    1b3e:	a0 95       	com	r26
    1b40:	90 95       	com	r25
    1b42:	81 95       	neg	r24
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	af 4f       	sbci	r26, 0xFF	; 255
    1b48:	bf 4f       	sbci	r27, 0xFF	; 255
    1b4a:	e9 a1       	ldd	r30, Y+33	; 0x21
    1b4c:	fa a1       	ldd	r31, Y+34	; 0x22
    1b4e:	80 87       	std	Z+8, r24	; 0x08
    1b50:	91 87       	std	Z+9, r25	; 0x09
    1b52:	a2 87       	std	Z+10, r26	; 0x0a
    1b54:	b3 87       	std	Z+11, r27	; 0x0b
  block->steps_c = labs(target[C_AXIS]-position[C_AXIS]);
    1b56:	60 90 a5 03 	lds	r6, 0x03A5
    1b5a:	70 90 a6 03 	lds	r7, 0x03A6
    1b5e:	80 90 a7 03 	lds	r8, 0x03A7
    1b62:	90 90 a8 03 	lds	r9, 0x03A8
    1b66:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b68:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b6a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b6c:	58 89       	ldd	r21, Y+16	; 0x10
    1b6e:	26 19       	sub	r18, r6
    1b70:	37 09       	sbc	r19, r7
    1b72:	48 09       	sbc	r20, r8
    1b74:	59 09       	sbc	r21, r9
    1b76:	57 ff       	sbrs	r21, 7
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <plan_buffer_line+0x248>
    1b7a:	50 95       	com	r21
    1b7c:	40 95       	com	r20
    1b7e:	30 95       	com	r19
    1b80:	21 95       	neg	r18
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	4f 4f       	sbci	r20, 0xFF	; 255
    1b86:	5f 4f       	sbci	r21, 0xFF	; 255
    1b88:	a9 a1       	ldd	r26, Y+33	; 0x21
    1b8a:	ba a1       	ldd	r27, Y+34	; 0x22
    1b8c:	1c 96       	adiw	r26, 0x0c	; 12
    1b8e:	2d 93       	st	X+, r18
    1b90:	3d 93       	st	X+, r19
    1b92:	4d 93       	st	X+, r20
    1b94:	5c 93       	st	X, r21
    1b96:	1f 97       	sbiw	r26, 0x0f	; 15
  block->step_event_count = max(block->steps_x, max(block->steps_y, max(block->steps_z, block->steps_c)));  
    1b98:	18 96       	adiw	r26, 0x08	; 8
    1b9a:	ed 90       	ld	r14, X+
    1b9c:	fd 90       	ld	r15, X+
    1b9e:	0d 91       	ld	r16, X+
    1ba0:	1c 91       	ld	r17, X
    1ba2:	1b 97       	sbiw	r26, 0x0b	; 11
    1ba4:	fd 01       	movw	r30, r26
    1ba6:	84 81       	ldd	r24, Z+4	; 0x04
    1ba8:	95 81       	ldd	r25, Z+5	; 0x05
    1baa:	a6 81       	ldd	r26, Z+6	; 0x06
    1bac:	b7 81       	ldd	r27, Z+7	; 0x07
    1bae:	8e 15       	cp	r24, r14
    1bb0:	9f 05       	cpc	r25, r15
    1bb2:	a0 07       	cpc	r26, r16
    1bb4:	b1 07       	cpc	r27, r17
    1bb6:	10 f4       	brcc	.+4      	; 0x1bbc <plan_buffer_line+0x27c>
    1bb8:	d8 01       	movw	r26, r16
    1bba:	c7 01       	movw	r24, r14
    1bbc:	e9 a1       	ldd	r30, Y+33	; 0x21
    1bbe:	fa a1       	ldd	r31, Y+34	; 0x22
    1bc0:	e0 80       	ld	r14, Z
    1bc2:	f1 80       	ldd	r15, Z+1	; 0x01
    1bc4:	02 81       	ldd	r16, Z+2	; 0x02
    1bc6:	13 81       	ldd	r17, Z+3	; 0x03
    1bc8:	8e 15       	cp	r24, r14
    1bca:	9f 05       	cpc	r25, r15
    1bcc:	a0 07       	cpc	r26, r16
    1bce:	b1 07       	cpc	r27, r17
    1bd0:	10 f4       	brcc	.+4      	; 0x1bd6 <plan_buffer_line+0x296>
    1bd2:	d8 01       	movw	r26, r16
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	82 17       	cp	r24, r18
    1bd8:	93 07       	cpc	r25, r19
    1bda:	a4 07       	cpc	r26, r20
    1bdc:	b5 07       	cpc	r27, r21
    1bde:	10 f4       	brcc	.+4      	; 0x1be4 <plan_buffer_line+0x2a4>
    1be0:	da 01       	movw	r26, r20
    1be2:	c9 01       	movw	r24, r18
    1be4:	e9 a1       	ldd	r30, Y+33	; 0x21
    1be6:	fa a1       	ldd	r31, Y+34	; 0x22
    1be8:	81 8b       	std	Z+17, r24	; 0x11
    1bea:	92 8b       	std	Z+18, r25	; 0x12
    1bec:	a3 8b       	std	Z+19, r26	; 0x13
    1bee:	b4 8b       	std	Z+20, r27	; 0x14
  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	a1 05       	cpc	r26, r1
    1bf4:	b1 05       	cpc	r27, r1
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <plan_buffer_line+0x2ba>
    1bf8:	31 c2       	rjmp	.+1122   	; 0x205c <plan_buffer_line+0x71c>
  
  double delta_x_mm = (target[X_AXIS]-position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    1bfa:	69 81       	ldd	r22, Y+1	; 0x01
    1bfc:	7a 81       	ldd	r23, Y+2	; 0x02
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	20 91 99 03 	lds	r18, 0x0399
    1c06:	30 91 9a 03 	lds	r19, 0x039A
    1c0a:	40 91 9b 03 	lds	r20, 0x039B
    1c0e:	50 91 9c 03 	lds	r21, 0x039C
    1c12:	62 1b       	sub	r22, r18
    1c14:	73 0b       	sbc	r23, r19
    1c16:	84 0b       	sbc	r24, r20
    1c18:	95 0b       	sbc	r25, r21
    1c1a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    1c1e:	20 91 47 04 	lds	r18, 0x0447
    1c22:	30 91 48 04 	lds	r19, 0x0448
    1c26:	40 91 49 04 	lds	r20, 0x0449
    1c2a:	50 91 4a 04 	lds	r21, 0x044A
    1c2e:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1c32:	6d 8f       	std	Y+29, r22	; 0x1d
    1c34:	7e 8f       	std	Y+30, r23	; 0x1e
    1c36:	8f 8f       	std	Y+31, r24	; 0x1f
    1c38:	98 a3       	std	Y+32, r25	; 0x20
  double delta_y_mm = (target[Y_AXIS]-position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    1c3a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c3c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c40:	98 85       	ldd	r25, Y+8	; 0x08
    1c42:	20 91 9d 03 	lds	r18, 0x039D
    1c46:	30 91 9e 03 	lds	r19, 0x039E
    1c4a:	40 91 9f 03 	lds	r20, 0x039F
    1c4e:	50 91 a0 03 	lds	r21, 0x03A0
    1c52:	62 1b       	sub	r22, r18
    1c54:	73 0b       	sbc	r23, r19
    1c56:	84 0b       	sbc	r24, r20
    1c58:	95 0b       	sbc	r25, r21
    1c5a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    1c5e:	20 91 4b 04 	lds	r18, 0x044B
    1c62:	30 91 4c 04 	lds	r19, 0x044C
    1c66:	40 91 4d 04 	lds	r20, 0x044D
    1c6a:	50 91 4e 04 	lds	r21, 0x044E
    1c6e:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1c72:	69 8f       	std	Y+25, r22	; 0x19
    1c74:	7a 8f       	std	Y+26, r23	; 0x1a
    1c76:	8b 8f       	std	Y+27, r24	; 0x1b
    1c78:	9c 8f       	std	Y+28, r25	; 0x1c
  double delta_z_mm = (target[Z_AXIS]-position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    1c7a:	69 85       	ldd	r22, Y+9	; 0x09
    1c7c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c80:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c82:	6a 19       	sub	r22, r10
    1c84:	7b 09       	sbc	r23, r11
    1c86:	8c 09       	sbc	r24, r12
    1c88:	9d 09       	sbc	r25, r13
    1c8a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    1c8e:	20 91 4f 04 	lds	r18, 0x044F
    1c92:	30 91 50 04 	lds	r19, 0x0450
    1c96:	40 91 51 04 	lds	r20, 0x0451
    1c9a:	50 91 52 04 	lds	r21, 0x0452
    1c9e:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1ca2:	6d 8b       	std	Y+21, r22	; 0x15
    1ca4:	7e 8b       	std	Y+22, r23	; 0x16
    1ca6:	8f 8b       	std	Y+23, r24	; 0x17
    1ca8:	98 8f       	std	Y+24, r25	; 0x18
  // G: Treat rotational C axis as if linear (in mm). In settings.h, set steps_per_mm[C_AXIS] 
  //    such that 360.0mm = 1 revolution (360 degrees). In other words, 1mm = 1 degree of rotation.
  //    The C axis feedrate will then be in units of, "degrees per minute" and the coordinates in 
  //    angular degrees.
  double delta_c_mm = (target[C_AXIS]-position[C_AXIS])/settings.steps_per_mm[C_AXIS];
    1caa:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cac:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb0:	98 89       	ldd	r25, Y+16	; 0x10
    1cb2:	66 19       	sub	r22, r6
    1cb4:	77 09       	sbc	r23, r7
    1cb6:	88 09       	sbc	r24, r8
    1cb8:	99 09       	sbc	r25, r9
    1cba:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    1cbe:	20 91 53 04 	lds	r18, 0x0453
    1cc2:	30 91 54 04 	lds	r19, 0x0454
    1cc6:	40 91 55 04 	lds	r20, 0x0455
    1cca:	50 91 56 04 	lds	r21, 0x0456
    1cce:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1cd2:	69 8b       	std	Y+17, r22	; 0x11
    1cd4:	7a 8b       	std	Y+18, r23	; 0x12
    1cd6:	8b 8b       	std	Y+19, r24	; 0x13
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
  block->millimeters = sqrt(square(delta_x_mm) + square(delta_y_mm) + square(delta_z_mm) + square(delta_c_mm));	
    1cda:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cdc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1cde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ce0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ce2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <square>
    1ce6:	3b 01       	movw	r6, r22
    1ce8:	4c 01       	movw	r8, r24
    1cea:	69 8d       	ldd	r22, Y+25	; 0x19
    1cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <square>
    1cf6:	7b 01       	movw	r14, r22
    1cf8:	8c 01       	movw	r16, r24
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <square>
    1d06:	5b 01       	movw	r10, r22
    1d08:	6c 01       	movw	r12, r24
    1d0a:	69 89       	ldd	r22, Y+17	; 0x11
    1d0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d10:	9c 89       	ldd	r25, Y+20	; 0x14
    1d12:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <square>
    1d16:	1b 01       	movw	r2, r22
    1d18:	2c 01       	movw	r4, r24
    1d1a:	c4 01       	movw	r24, r8
    1d1c:	b3 01       	movw	r22, r6
    1d1e:	a8 01       	movw	r20, r16
    1d20:	97 01       	movw	r18, r14
    1d22:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    1d26:	a6 01       	movw	r20, r12
    1d28:	95 01       	movw	r18, r10
    1d2a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    1d2e:	a2 01       	movw	r20, r4
    1d30:	91 01       	movw	r18, r2
    1d32:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__addsf3>
    1d36:	0e 94 bd 1b 	call	0x377a	; 0x377a <sqrt>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	a9 a1       	ldd	r26, Y+33	; 0x21
    1d40:	ba a1       	ldd	r27, Y+34	; 0x22
    1d42:	9d 96       	adiw	r26, 0x2d	; 45
    1d44:	6d 93       	st	X+, r22
    1d46:	7d 93       	st	X+, r23
    1d48:	8d 93       	st	X+, r24
    1d4a:	9c 93       	st	X, r25
    1d4c:	d0 97       	sbiw	r26, 0x30	; 48
  
  uint32_t microseconds;
  if (!invert_feed_rate) {
    1d4e:	60 96       	adiw	r28, 0x10	; 16
    1d50:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d52:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d54:	60 97       	sbiw	r28, 0x10	; 16
    1d56:	89 2b       	or	r24, r25
    1d58:	89 f4       	brne	.+34     	; 0x1d7c <plan_buffer_line+0x43c>
    microseconds = lround((block->millimeters/feed_rate)*1000000);
    1d5a:	ca 01       	movw	r24, r20
    1d5c:	b9 01       	movw	r22, r18
    1d5e:	2e 96       	adiw	r28, 0x0e	; 14
    1d60:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d62:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d64:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d66:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d68:	2e 97       	sbiw	r28, 0x0e	; 14
    1d6a:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	34 e2       	ldi	r19, 0x24	; 36
    1d72:	44 e7       	ldi	r20, 0x74	; 116
    1d74:	59 e4       	ldi	r21, 0x49	; 73
    1d76:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1d7a:	0c c0       	rjmp	.+24     	; 0x1d94 <plan_buffer_line+0x454>
  } else {
    microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    1d7c:	60 ec       	ldi	r22, 0xC0	; 192
    1d7e:	71 ee       	ldi	r23, 0xE1	; 225
    1d80:	84 e6       	ldi	r24, 0x64	; 100
    1d82:	9c e4       	ldi	r25, 0x4C	; 76
    1d84:	2e 96       	adiw	r28, 0x0e	; 14
    1d86:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d88:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d8a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d8c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d8e:	2e 97       	sbiw	r28, 0x0e	; 14
    1d90:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1d94:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <lround>
    1d98:	ac 01       	movw	r20, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	da 01       	movw	r26, r20
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
  }
  
  // Calculate speed in mm/minute for each axis
  double multiplier = 60.0*1000000.0/microseconds;
    1da2:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatunsisf>
    1da6:	9b 01       	movw	r18, r22
    1da8:	ac 01       	movw	r20, r24
    1daa:	60 ec       	ldi	r22, 0xC0	; 192
    1dac:	71 ee       	ldi	r23, 0xE1	; 225
    1dae:	84 e6       	ldi	r24, 0x64	; 100
    1db0:	9c e4       	ldi	r25, 0x4C	; 76
    1db2:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1db6:	7b 01       	movw	r14, r22
    1db8:	8c 01       	movw	r16, r24
  block->speed_x = delta_x_mm * multiplier;
    1dba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1dbc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1dbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1dc2:	a8 01       	movw	r20, r16
    1dc4:	97 01       	movw	r18, r14
    1dc6:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1dca:	e9 a1       	ldd	r30, Y+33	; 0x21
    1dcc:	fa a1       	ldd	r31, Y+34	; 0x22
    1dce:	61 8f       	std	Z+25, r22	; 0x19
    1dd0:	72 8f       	std	Z+26, r23	; 0x1a
    1dd2:	83 8f       	std	Z+27, r24	; 0x1b
    1dd4:	94 8f       	std	Z+28, r25	; 0x1c
  block->speed_y = delta_y_mm * multiplier;
    1dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dde:	a8 01       	movw	r20, r16
    1de0:	97 01       	movw	r18, r14
    1de2:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1de6:	a9 a1       	ldd	r26, Y+33	; 0x21
    1de8:	ba a1       	ldd	r27, Y+34	; 0x22
    1dea:	5d 96       	adiw	r26, 0x1d	; 29
    1dec:	6d 93       	st	X+, r22
    1dee:	7d 93       	st	X+, r23
    1df0:	8d 93       	st	X+, r24
    1df2:	9c 93       	st	X, r25
    1df4:	90 97       	sbiw	r26, 0x20	; 32
  block->speed_z = delta_z_mm * multiplier;
    1df6:	6d 89       	ldd	r22, Y+21	; 0x15
    1df8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfe:	a8 01       	movw	r20, r16
    1e00:	97 01       	movw	r18, r14
    1e02:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1e06:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e08:	fa a1       	ldd	r31, Y+34	; 0x22
    1e0a:	61 a3       	std	Z+33, r22	; 0x21
    1e0c:	72 a3       	std	Z+34, r23	; 0x22
    1e0e:	83 a3       	std	Z+35, r24	; 0x23
    1e10:	94 a3       	std	Z+36, r25	; 0x24
  block->speed_c = delta_c_mm * multiplier;
    1e12:	69 89       	ldd	r22, Y+17	; 0x11
    1e14:	7a 89       	ldd	r23, Y+18	; 0x12
    1e16:	8b 89       	ldd	r24, Y+19	; 0x13
    1e18:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1a:	a8 01       	movw	r20, r16
    1e1c:	97 01       	movw	r18, r14
    1e1e:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1e22:	a9 a1       	ldd	r26, Y+33	; 0x21
    1e24:	ba a1       	ldd	r27, Y+34	; 0x22
    1e26:	95 96       	adiw	r26, 0x25	; 37
    1e28:	6d 93       	st	X+, r22
    1e2a:	7d 93       	st	X+, r23
    1e2c:	8d 93       	st	X+, r24
    1e2e:	9c 93       	st	X, r25
    1e30:	98 97       	sbiw	r26, 0x28	; 40
  block->nominal_speed = block->millimeters * multiplier;
    1e32:	9d 96       	adiw	r26, 0x2d	; 45
    1e34:	6d 91       	ld	r22, X+
    1e36:	7d 91       	ld	r23, X+
    1e38:	8d 91       	ld	r24, X+
    1e3a:	9c 91       	ld	r25, X
    1e3c:	d0 97       	sbiw	r26, 0x30	; 48
    1e3e:	a8 01       	movw	r20, r16
    1e40:	97 01       	movw	r18, r14
    1e42:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1e46:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e48:	fa a1       	ldd	r31, Y+34	; 0x22
    1e4a:	61 a7       	std	Z+41, r22	; 0x29
    1e4c:	72 a7       	std	Z+42, r23	; 0x2a
    1e4e:	83 a7       	std	Z+43, r24	; 0x2b
    1e50:	94 a7       	std	Z+44, r25	; 0x2c
  block->nominal_rate = ceil(block->step_event_count * multiplier);  
    1e52:	61 89       	ldd	r22, Z+17	; 0x11
    1e54:	72 89       	ldd	r23, Z+18	; 0x12
    1e56:	83 89       	ldd	r24, Z+19	; 0x13
    1e58:	94 89       	ldd	r25, Z+20	; 0x14
    1e5a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__floatsisf>
    1e5e:	5b 01       	movw	r10, r22
    1e60:	6c 01       	movw	r12, r24
    1e62:	a8 01       	movw	r20, r16
    1e64:	97 01       	movw	r18, r14
    1e66:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1e6a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ceil>
    1e6e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fixunssfsi>
    1e72:	3b 01       	movw	r6, r22
    1e74:	4c 01       	movw	r8, r24
    1e76:	a9 a1       	ldd	r26, Y+33	; 0x21
    1e78:	ba a1       	ldd	r27, Y+34	; 0x22
    1e7a:	55 96       	adiw	r26, 0x15	; 21
    1e7c:	6d 93       	st	X+, r22
    1e7e:	7d 93       	st	X+, r23
    1e80:	8d 93       	st	X+, r24
    1e82:	9c 93       	st	X, r25
    1e84:	58 97       	sbiw	r26, 0x18	; 24
  block->entry_factor = 0.0;
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e90:	fa a1       	ldd	r31, Y+34	; 0x22
    1e92:	81 ab       	std	Z+49, r24	; 0x31
    1e94:	92 ab       	std	Z+50, r25	; 0x32
    1e96:	a3 ab       	std	Z+51, r26	; 0x33
    1e98:	b4 ab       	std	Z+52, r27	; 0x34
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  double travel_per_step = block->millimeters/block->step_event_count;
  block->rate_delta = ceil(
    1e9a:	60 91 65 04 	lds	r22, 0x0465
    1e9e:	70 91 66 04 	lds	r23, 0x0466
    1ea2:	80 91 67 04 	lds	r24, 0x0467
    1ea6:	90 91 68 04 	lds	r25, 0x0468
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e7       	ldi	r20, 0x70	; 112
    1eb0:	52 e4       	ldi	r21, 0x42	; 66
    1eb2:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e2       	ldi	r20, 0x20	; 32
    1ebc:	52 e4       	ldi	r21, 0x42	; 66
    1ebe:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1ec2:	7b 01       	movw	r14, r22
    1ec4:	8c 01       	movw	r16, r24
    1ec6:	a9 a1       	ldd	r26, Y+33	; 0x21
    1ec8:	ba a1       	ldd	r27, Y+34	; 0x22
    1eca:	9d 96       	adiw	r26, 0x2d	; 45
    1ecc:	6d 91       	ld	r22, X+
    1ece:	7d 91       	ld	r23, X+
    1ed0:	8d 91       	ld	r24, X+
    1ed2:	9c 91       	ld	r25, X
    1ed4:	d0 97       	sbiw	r26, 0x30	; 48
    1ed6:	a6 01       	movw	r20, r12
    1ed8:	95 01       	movw	r18, r10
    1eda:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1ede:	9b 01       	movw	r18, r22
    1ee0:	ac 01       	movw	r20, r24
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	b7 01       	movw	r22, r14
    1ee6:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3>
    1eea:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ceil>
    1eee:	09 a1       	ldd	r16, Y+33	; 0x21
    1ef0:	1a a1       	ldd	r17, Y+34	; 0x22
    1ef2:	03 5c       	subi	r16, 0xC3	; 195
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
    1efa:	f8 01       	movw	r30, r16
    1efc:	60 83       	st	Z, r22
    1efe:	71 83       	std	Z+1, r23	; 0x01
    1f00:	82 83       	std	Z+2, r24	; 0x02
    1f02:	93 83       	std	Z+3, r25	; 0x03
    ((settings.acceleration*60.0)/(ACCELERATION_TICKS_PER_SECOND))/ // acceleration mm/sec/sec per acceleration_tick
    travel_per_step);                                               // convert to: acceleration steps/min/acceleration_tick    
  if (acceleration_manager_enabled) {
    1f04:	80 91 a9 03 	lds	r24, 0x03A9
    1f08:	88 23       	and	r24, r24
    1f0a:	69 f0       	breq	.+26     	; 0x1f26 <plan_buffer_line+0x5e6>
    // compute a preliminary conservative acceleration trapezoid
    double safe_speed_factor = factor_for_safe_speed(block);
    1f0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f10:	0e 94 cb 07 	call	0xf96	; 0xf96 <factor_for_safe_speed>
    1f14:	8b 01       	movw	r16, r22
    1f16:	9c 01       	movw	r18, r24
    calculate_trapezoid_for_block(block, safe_speed_factor, safe_speed_factor); 
    1f18:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	a8 01       	movw	r20, r16
    1f20:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <calculate_trapezoid_for_block>
    1f24:	26 c0       	rjmp	.+76     	; 0x1f72 <plan_buffer_line+0x632>
  } else {
    block->initial_rate = block->nominal_rate;
    1f26:	a9 a1       	ldd	r26, Y+33	; 0x21
    1f28:	ba a1       	ldd	r27, Y+34	; 0x22
    1f2a:	d5 96       	adiw	r26, 0x35	; 53
    1f2c:	6d 92       	st	X+, r6
    1f2e:	7d 92       	st	X+, r7
    1f30:	8d 92       	st	X+, r8
    1f32:	9c 92       	st	X, r9
    1f34:	d8 97       	sbiw	r26, 0x38	; 56
    block->final_rate = block->nominal_rate;
    1f36:	fd 01       	movw	r30, r26
    1f38:	61 ae       	std	Z+57, r6	; 0x39
    1f3a:	72 ae       	std	Z+58, r7	; 0x3a
    1f3c:	83 ae       	std	Z+59, r8	; 0x3b
    1f3e:	94 ae       	std	Z+60, r9	; 0x3c
    block->accelerate_until = 0;
    1f40:	ef 5b       	subi	r30, 0xBF	; 191
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	10 82       	st	Z, r1
    1f46:	11 82       	std	Z+1, r1	; 0x01
    1f48:	12 82       	std	Z+2, r1	; 0x02
    1f4a:	13 82       	std	Z+3, r1	; 0x03
    block->decelerate_after = block->step_event_count;
    1f4c:	9d 01       	movw	r18, r26
    1f4e:	2b 5b       	subi	r18, 0xBB	; 187
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	fd 01       	movw	r30, r26
    1f54:	81 89       	ldd	r24, Z+17	; 0x11
    1f56:	92 89       	ldd	r25, Z+18	; 0x12
    1f58:	a3 89       	ldd	r26, Z+19	; 0x13
    1f5a:	b4 89       	ldd	r27, Z+20	; 0x14
    1f5c:	f9 01       	movw	r30, r18
    1f5e:	80 83       	st	Z, r24
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	a2 83       	std	Z+2, r26	; 0x02
    1f64:	b3 83       	std	Z+3, r27	; 0x03
    block->rate_delta = 0;
    1f66:	d8 01       	movw	r26, r16
    1f68:	1d 92       	st	X+, r1
    1f6a:	1d 92       	st	X+, r1
    1f6c:	1d 92       	st	X+, r1
    1f6e:	1c 92       	st	X, r1
    1f70:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  // Compute direction bits for this block
  block->direction_bits = 0;
    1f72:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f74:	fa a1       	ldd	r31, Y+34	; 0x22
    1f76:	10 8a       	std	Z+16, r1	; 0x10
  if (target[X_AXIS] < position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    1f78:	29 81       	ldd	r18, Y+1	; 0x01
    1f7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f7c:	4b 81       	ldd	r20, Y+3	; 0x03
    1f7e:	5c 81       	ldd	r21, Y+4	; 0x04
    1f80:	80 91 99 03 	lds	r24, 0x0399
    1f84:	90 91 9a 03 	lds	r25, 0x039A
    1f88:	a0 91 9b 03 	lds	r26, 0x039B
    1f8c:	b0 91 9c 03 	lds	r27, 0x039C
    1f90:	28 17       	cp	r18, r24
    1f92:	39 07       	cpc	r19, r25
    1f94:	4a 07       	cpc	r20, r26
    1f96:	5b 07       	cpc	r21, r27
    1f98:	14 f4       	brge	.+4      	; 0x1f9e <plan_buffer_line+0x65e>
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	80 8b       	std	Z+16, r24	; 0x10
  if (target[Y_AXIS] < position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    1f9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fa2:	4f 81       	ldd	r20, Y+7	; 0x07
    1fa4:	58 85       	ldd	r21, Y+8	; 0x08
    1fa6:	80 91 9d 03 	lds	r24, 0x039D
    1faa:	90 91 9e 03 	lds	r25, 0x039E
    1fae:	a0 91 9f 03 	lds	r26, 0x039F
    1fb2:	b0 91 a0 03 	lds	r27, 0x03A0
    1fb6:	28 17       	cp	r18, r24
    1fb8:	39 07       	cpc	r19, r25
    1fba:	4a 07       	cpc	r20, r26
    1fbc:	5b 07       	cpc	r21, r27
    1fbe:	44 f4       	brge	.+16     	; 0x1fd0 <plan_buffer_line+0x690>
    1fc0:	a9 a1       	ldd	r26, Y+33	; 0x21
    1fc2:	ba a1       	ldd	r27, Y+34	; 0x22
    1fc4:	50 96       	adiw	r26, 0x10	; 16
    1fc6:	8c 91       	ld	r24, X
    1fc8:	50 97       	sbiw	r26, 0x10	; 16
    1fca:	88 60       	ori	r24, 0x08	; 8
    1fcc:	50 96       	adiw	r26, 0x10	; 16
    1fce:	8c 93       	st	X, r24
  if (target[Z_AXIS] < position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    1fd0:	29 85       	ldd	r18, Y+9	; 0x09
    1fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fd6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fd8:	80 91 a1 03 	lds	r24, 0x03A1
    1fdc:	90 91 a2 03 	lds	r25, 0x03A2
    1fe0:	a0 91 a3 03 	lds	r26, 0x03A3
    1fe4:	b0 91 a4 03 	lds	r27, 0x03A4
    1fe8:	28 17       	cp	r18, r24
    1fea:	39 07       	cpc	r19, r25
    1fec:	4a 07       	cpc	r20, r26
    1fee:	5b 07       	cpc	r21, r27
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <plan_buffer_line+0x6bc>
    1ff2:	e9 a1       	ldd	r30, Y+33	; 0x21
    1ff4:	fa a1       	ldd	r31, Y+34	; 0x22
    1ff6:	80 89       	ldd	r24, Z+16	; 0x10
    1ff8:	80 64       	ori	r24, 0x40	; 64
    1ffa:	80 8b       	std	Z+16, r24	; 0x10
  if (target[C_AXIS] < position[C_AXIS]) { block->direction_bits |= (1<<C_DIRECTION_BIT); }
    1ffc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ffe:	3e 85       	ldd	r19, Y+14	; 0x0e
    2000:	4f 85       	ldd	r20, Y+15	; 0x0f
    2002:	58 89       	ldd	r21, Y+16	; 0x10
    2004:	80 91 a5 03 	lds	r24, 0x03A5
    2008:	90 91 a6 03 	lds	r25, 0x03A6
    200c:	a0 91 a7 03 	lds	r26, 0x03A7
    2010:	b0 91 a8 03 	lds	r27, 0x03A8
    2014:	28 17       	cp	r18, r24
    2016:	39 07       	cpc	r19, r25
    2018:	4a 07       	cpc	r20, r26
    201a:	5b 07       	cpc	r21, r27
    201c:	44 f4       	brge	.+16     	; 0x202e <plan_buffer_line+0x6ee>
    201e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2020:	ba a1       	ldd	r27, Y+34	; 0x22
    2022:	50 96       	adiw	r26, 0x10	; 16
    2024:	8c 91       	ld	r24, X
    2026:	50 97       	sbiw	r26, 0x10	; 16
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	50 96       	adiw	r26, 0x10	; 16
    202c:	8c 93       	st	X, r24
  
  // Move buffer head
  block_buffer_head = next_buffer_head;     
    202e:	eb a9       	ldd	r30, Y+51	; 0x33
    2030:	fc a9       	ldd	r31, Y+52	; 0x34
    2032:	f0 93 96 03 	sts	0x0396, r31
    2036:	e0 93 95 03 	sts	0x0395, r30
  // Update position 
  memcpy(position, target, sizeof(target)); // position[] = target[]
    203a:	a9 e9       	ldi	r26, 0x99	; 153
    203c:	b3 e0       	ldi	r27, 0x03	; 3
    203e:	fe 01       	movw	r30, r28
    2040:	31 96       	adiw	r30, 0x01	; 1
    2042:	80 e1       	ldi	r24, 0x10	; 16
    2044:	01 90       	ld	r0, Z+
    2046:	0d 92       	st	X+, r0
    2048:	81 50       	subi	r24, 0x01	; 1
    204a:	e1 f7       	brne	.-8      	; 0x2044 <plan_buffer_line+0x704>
  
  if (acceleration_manager_enabled) { planner_recalculate(); }  
    204c:	80 91 a9 03 	lds	r24, 0x03A9
    2050:	88 23       	and	r24, r24
    2052:	11 f0       	breq	.+4      	; 0x2058 <plan_buffer_line+0x718>
    2054:	0e 94 99 0c 	call	0x1932	; 0x1932 <planner_recalculate>
  st_wake_up();
    2058:	0e 94 d6 12 	call	0x25ac	; 0x25ac <st_wake_up>
}
    205c:	e4 96       	adiw	r28, 0x34	; 52
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	9f 90       	pop	r9
    207e:	8f 90       	pop	r8
    2080:	7f 90       	pop	r7
    2082:	6f 90       	pop	r6
    2084:	5f 90       	pop	r5
    2086:	4f 90       	pop	r4
    2088:	3f 90       	pop	r3
    208a:	2f 90       	pop	r2
    208c:	08 95       	ret

0000208e <sp_process>:
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
  printPgmString(PSTR("\r\n"));  
}

void sp_process(void)
{
    208e:	1f 93       	push	r17
    2090:	53 c0       	rjmp	.+166    	; 0x2138 <sp_process+0xaa>
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
    2092:	e0 91 dc 03 	lds	r30, 0x03DC
    2096:	ee 23       	and	r30, r30
    2098:	e9 f1       	breq	.+122    	; 0x2114 <sp_process+0x86>
    209a:	9a 30       	cpi	r25, 0x0A	; 10
    209c:	11 f0       	breq	.+4      	; 0x20a2 <sp_process+0x14>
    209e:	9d 30       	cpi	r25, 0x0D	; 13
    20a0:	c9 f5       	brne	.+114    	; 0x2114 <sp_process+0x86>
      line[char_counter] = 0; // terminate string
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	e6 55       	subi	r30, 0x56	; 86
    20a6:	fc 4f       	sbci	r31, 0xFC	; 252
    20a8:	10 82       	st	Z, r1
      status_message(gc_execute_line(line));
    20aa:	8a ea       	ldi	r24, 0xAA	; 170
    20ac:	93 e0       	ldi	r25, 0x03	; 3
    20ae:	0e 94 a3 03 	call	0x746	; 0x746 <gc_execute_line>
    20b2:	18 2f       	mov	r17, r24

static char line[LINE_BUFFER_SIZE];
static uint8_t char_counter;

static void status_message(int status_code) {
  switch(status_code) {          
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	91 f0       	breq	.+36     	; 0x20dc <sp_process+0x4e>
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	28 f4       	brcc	.+10     	; 0x20c6 <sp_process+0x38>
    20bc:	88 23       	and	r24, r24
    20be:	41 f0       	breq	.+16     	; 0x20d0 <sp_process+0x42>
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	a9 f4       	brne	.+42     	; 0x20ee <sp_process+0x60>
    20c4:	08 c0       	rjmp	.+16     	; 0x20d6 <sp_process+0x48>
    20c6:	83 30       	cpi	r24, 0x03	; 3
    20c8:	61 f0       	breq	.+24     	; 0x20e2 <sp_process+0x54>
    20ca:	84 30       	cpi	r24, 0x04	; 4
    20cc:	81 f4       	brne	.+32     	; 0x20ee <sp_process+0x60>
    20ce:	0c c0       	rjmp	.+24     	; 0x20e8 <sp_process+0x5a>
    case GCSTATUS_OK:
    printPgmString(PSTR("ok\n\r")); break;
    20d0:	8a e9       	ldi	r24, 0x9A	; 154
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	1a c0       	rjmp	.+52     	; 0x210a <sp_process+0x7c>
    case GCSTATUS_BAD_NUMBER_FORMAT:
    printPgmString(PSTR("error: Bad number format\n\r")); break;
    20d6:	8f e7       	ldi	r24, 0x7F	; 127
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	17 c0       	rjmp	.+46     	; 0x210a <sp_process+0x7c>
    case GCSTATUS_EXPECTED_COMMAND_LETTER:
    printPgmString(PSTR("error: Expected command letter\n\r")); break;
    20dc:	8e e5       	ldi	r24, 0x5E	; 94
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	14 c0       	rjmp	.+40     	; 0x210a <sp_process+0x7c>
    case GCSTATUS_UNSUPPORTED_STATEMENT:
    printPgmString(PSTR("error: Unsupported statement\n\r")); break;
    20e2:	8f e3       	ldi	r24, 0x3F	; 63
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	11 c0       	rjmp	.+34     	; 0x210a <sp_process+0x7c>
    case GCSTATUS_FLOATING_POINT_ERROR:
    printPgmString(PSTR("error: Floating point error\n\r")); break;
    20e8:	81 e2       	ldi	r24, 0x21	; 33
    20ea:	91 e0       	ldi	r25, 0x01	; 1
    20ec:	0e c0       	rjmp	.+28     	; 0x210a <sp_process+0x7c>
    default:
    printPgmString(PSTR("error: "));
    20ee:	89 e1       	ldi	r24, 0x19	; 25
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
    printInteger(status_code);
    20f6:	61 2f       	mov	r22, r17
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	88 27       	eor	r24, r24
    20fc:	77 fd       	sbrc	r23, 7
    20fe:	80 95       	com	r24
    2100:	98 2f       	mov	r25, r24
    2102:	0e 94 04 18 	call	0x3008	; 0x3008 <printInteger>
    printPgmString(PSTR("\n\r"));
    2106:	86 e1       	ldi	r24, 0x16	; 22
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  while((c = serialRead()) != -1) 
  {
      if((char_counter > 0) && ((c == '\n') || (c == '\r'))) {  // Line is complete. Then execute!
      line[char_counter] = 0; // terminate string
      status_message(gc_execute_line(line));
      char_counter = 0; // reset line buffer index
    210e:	10 92 dc 03 	sts	0x03DC, r1
    2112:	12 c0       	rjmp	.+36     	; 0x2138 <sp_process+0xaa>
    } else if (c <= ' ') { // Throw away whitespace and control characters
    2114:	91 32       	cpi	r25, 0x21	; 33
    2116:	84 f0       	brlt	.+32     	; 0x2138 <sp_process+0xaa>
    } else if (c >= 'a' && c <= 'z') { // Uppercase lowercase
    2118:	89 2f       	mov	r24, r25
    211a:	81 56       	subi	r24, 0x61	; 97
    211c:	ae 2f       	mov	r26, r30
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ef 5f       	subi	r30, 0xFF	; 255
    2122:	8a 31       	cpi	r24, 0x1A	; 26
    2124:	20 f4       	brcc	.+8      	; 0x212e <sp_process+0xa0>
      line[char_counter++] = c-'a'+'A';
    2126:	a6 55       	subi	r26, 0x56	; 86
    2128:	bc 4f       	sbci	r27, 0xFC	; 252
    212a:	90 52       	subi	r25, 0x20	; 32
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <sp_process+0xa4>
    } else {
      line[char_counter++] = c;
    212e:	a6 55       	subi	r26, 0x56	; 86
    2130:	bc 4f       	sbci	r27, 0xFC	; 252
    2132:	9c 93       	st	X, r25
    2134:	e0 93 dc 03 	sts	0x03DC, r30

void sp_process(void)
{
  // force signed
  signed char c;
  while((c = serialRead()) != -1) 
    2138:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <serialRead>
    213c:	98 2f       	mov	r25, r24
    213e:	8f 3f       	cpi	r24, 0xFF	; 255
    2140:	09 f0       	breq	.+2      	; 0x2144 <sp_process+0xb6>
    2142:	a7 cf       	rjmp	.-178    	; 0x2092 <sp_process+0x4>
      line[char_counter++] = c-'a'+'A';
    } else {
      line[char_counter++] = c;
    }
  }
}
    2144:	1f 91       	pop	r17
    2146:	08 95       	ret

00002148 <sp_init>:
  }
}

void sp_init() 
{
  beginSerial(BAUD_RATE);  
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	76 e9       	ldi	r23, 0x96	; 150
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <beginSerial>
  printPgmString(PSTR("\r\nOpenPnP/Grbl " GRBL_VERSION));
    2154:	82 ea       	ldi	r24, 0xA2	; 162
    2156:	91 e0       	ldi	r25, 0x01	; 1
    2158:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printPgmString(PSTR("\r\n"));  
    215c:	8f e9       	ldi	r24, 0x9F	; 159
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
}
    2164:	08 95       	ret

00002166 <settings_reset>:
  double mm_per_arc_segment;
} settings_v1_t;


void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2166:	84 ef       	ldi	r24, 0xF4	; 244
    2168:	99 ef       	ldi	r25, 0xF9	; 249
    216a:	ac e3       	ldi	r26, 0x3C	; 60
    216c:	b4 e4       	ldi	r27, 0x44	; 68
    216e:	80 93 47 04 	sts	0x0447, r24
    2172:	90 93 48 04 	sts	0x0448, r25
    2176:	a0 93 49 04 	sts	0x0449, r26
    217a:	b0 93 4a 04 	sts	0x044A, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    217e:	80 93 4b 04 	sts	0x044B, r24
    2182:	90 93 4c 04 	sts	0x044C, r25
    2186:	a0 93 4d 04 	sts	0x044D, r26
    218a:	b0 93 4e 04 	sts	0x044E, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    218e:	80 93 4f 04 	sts	0x044F, r24
    2192:	90 93 50 04 	sts	0x0450, r25
    2196:	a0 93 51 04 	sts	0x0451, r26
    219a:	b0 93 52 04 	sts	0x0452, r27
  settings.steps_per_mm[C_AXIS] = DEFAULT_C_STEPS_PER_MM;
    219e:	81 ec       	ldi	r24, 0xC1	; 193
    21a0:	9a ec       	ldi	r25, 0xCA	; 202
    21a2:	a1 e3       	ldi	r26, 0x31	; 49
    21a4:	b2 e4       	ldi	r27, 0x42	; 66
    21a6:	80 93 53 04 	sts	0x0453, r24
    21aa:	90 93 54 04 	sts	0x0454, r25
    21ae:	a0 93 55 04 	sts	0x0455, r26
    21b2:	b0 93 56 04 	sts	0x0456, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    21b6:	8e e1       	ldi	r24, 0x1E	; 30
    21b8:	80 93 58 04 	sts	0x0458, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a0 ef       	ldi	r26, 0xF0	; 240
    21c2:	b3 e4       	ldi	r27, 0x43	; 67
    21c4:	80 93 59 04 	sts	0x0459, r24
    21c8:	90 93 5a 04 	sts	0x045A, r25
    21cc:	a0 93 5b 04 	sts	0x045B, r26
    21d0:	b0 93 5c 04 	sts	0x045C, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    21d4:	80 93 5d 04 	sts	0x045D, r24
    21d8:	90 93 5e 04 	sts	0x045E, r25
    21dc:	a0 93 5f 04 	sts	0x045F, r26
    21e0:	b0 93 60 04 	sts	0x0460, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    21e4:	8a e9       	ldi	r24, 0x9A	; 154
    21e6:	99 e9       	ldi	r25, 0x99	; 153
    21e8:	a9 e9       	ldi	r26, 0x99	; 153
    21ea:	b0 e4       	ldi	r27, 0x40	; 64
    21ec:	80 93 65 04 	sts	0x0465, r24
    21f0:	90 93 66 04 	sts	0x0466, r25
    21f4:	a0 93 67 04 	sts	0x0467, r26
    21f8:	b0 93 68 04 	sts	0x0468, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    21fc:	8d ec       	ldi	r24, 0xCD	; 205
    21fe:	9c ec       	ldi	r25, 0xCC	; 204
    2200:	ac ec       	ldi	r26, 0xCC	; 204
    2202:	bd e3       	ldi	r27, 0x3D	; 61
    2204:	80 93 61 04 	sts	0x0461, r24
    2208:	90 93 62 04 	sts	0x0462, r25
    220c:	a0 93 63 04 	sts	0x0463, r26
    2210:	b0 93 64 04 	sts	0x0464, r27
  settings.max_jerk = DEFAULT_MAX_JERK;
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a8 e4       	ldi	r26, 0x48	; 72
    221a:	b2 e4       	ldi	r27, 0x42	; 66
    221c:	80 93 69 04 	sts	0x0469, r24
    2220:	90 93 6a 04 	sts	0x046A, r25
    2224:	a0 93 6b 04 	sts	0x046B, r26
    2228:	b0 93 6c 04 	sts	0x046C, r27
}
    222c:	08 95       	ret

0000222e <read_settings>:
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_get_char>
  
  if (version == SETTINGS_VERSION) {
    2236:	87 36       	cpi	r24, 0x67	; 103
    2238:	81 f4       	brne	.+32     	; 0x225a <read_settings+0x2c>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    223a:	87 e4       	ldi	r24, 0x47	; 71
    223c:	94 e0       	ldi	r25, 0x04	; 4
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	46 e2       	ldi	r20, 0x26	; 38
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	0e 94 b7 02 	call	0x56e	; 0x56e <memcpy_from_eeprom_with_checksum>
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	89 2b       	or	r24, r25
    224e:	09 f4       	brne	.+2      	; 0x2252 <read_settings+0x24>
    2250:	21 e0       	ldi	r18, 0x01	; 1
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	28 27       	eor	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	29 c0       	rjmp	.+82     	; 0x22ac <read_settings+0x7e>
      return(FALSE);
    }
  } 
  else if (version == 1) {
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	29 f5       	brne	.+74     	; 0x22a8 <read_settings+0x7a>
    // Migrate from old settings version
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    225e:	87 e4       	ldi	r24, 0x47	; 71
    2260:	94 e0       	ldi	r25, 0x04	; 4
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	4b e1       	ldi	r20, 0x1B	; 27
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	0e 94 b7 02 	call	0x56e	; 0x56e <memcpy_from_eeprom_with_checksum>
    226e:	89 2b       	or	r24, r25
    2270:	d9 f0       	breq	.+54     	; 0x22a8 <read_settings+0x7a>
      return(FALSE);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2272:	8a e9       	ldi	r24, 0x9A	; 154
    2274:	99 e9       	ldi	r25, 0x99	; 153
    2276:	a9 e9       	ldi	r26, 0x99	; 153
    2278:	b0 e4       	ldi	r27, 0x40	; 64
    227a:	80 93 65 04 	sts	0x0465, r24
    227e:	90 93 66 04 	sts	0x0466, r25
    2282:	a0 93 67 04 	sts	0x0467, r26
    2286:	b0 93 68 04 	sts	0x0468, r27
    settings.max_jerk = DEFAULT_MAX_JERK;
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a8 e4       	ldi	r26, 0x48	; 72
    2290:	b2 e4       	ldi	r27, 0x42	; 66
    2292:	80 93 69 04 	sts	0x0469, r24
    2296:	90 93 6a 04 	sts	0x046A, r25
    229a:	a0 93 6b 04 	sts	0x046B, r26
    229e:	b0 93 6c 04 	sts	0x046C, r27
    22a2:	21 e0       	ldi	r18, 0x01	; 1
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <read_settings+0x7e>
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
  }
  else {      
    return(FALSE);
  }
  return(TRUE);
}
    22ac:	c9 01       	movw	r24, r18
    22ae:	08 95       	ret

000022b0 <write_settings>:
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	67 e6       	ldi	r22, 0x67	; 103
    22b6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	67 e4       	ldi	r22, 0x47	; 71
    22c0:	74 e0       	ldi	r23, 0x04	; 4
    22c2:	46 e2       	ldi	r20, 0x26	; 38
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	0e 94 6d 02 	call	0x4da	; 0x4da <memcpy_to_eeprom_with_checksum>
}
    22ca:	08 95       	ret

000022cc <settings_store_setting>:
  }
  return(TRUE);
}

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    22cc:	fc 01       	movw	r30, r24
  switch(parameter) {
    22ce:	86 30       	cpi	r24, 0x06	; 6
    22d0:	91 05       	cpc	r25, r1
    22d2:	b9 f1       	breq	.+110    	; 0x2342 <settings_store_setting+0x76>
    22d4:	87 30       	cpi	r24, 0x07	; 7
    22d6:	91 05       	cpc	r25, r1
    22d8:	4c f4       	brge	.+18     	; 0x22ec <settings_store_setting+0x20>
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	91 05       	cpc	r25, r1
    22de:	f9 f0       	breq	.+62     	; 0x231e <settings_store_setting+0x52>
    22e0:	85 30       	cpi	r24, 0x05	; 5
    22e2:	91 05       	cpc	r25, r1
    22e4:	2c f5       	brge	.+74     	; 0x2330 <settings_store_setting+0x64>
    22e6:	97 ff       	sbrs	r25, 7
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <settings_store_setting+0x3c>
    22ea:	62 c0       	rjmp	.+196    	; 0x23b0 <settings_store_setting+0xe4>
    22ec:	88 30       	cpi	r24, 0x08	; 8
    22ee:	91 05       	cpc	r25, r1
    22f0:	d1 f1       	breq	.+116    	; 0x2366 <settings_store_setting+0x9a>
    22f2:	88 30       	cpi	r24, 0x08	; 8
    22f4:	91 05       	cpc	r25, r1
    22f6:	74 f1       	brlt	.+92     	; 0x2354 <settings_store_setting+0x88>
    22f8:	89 30       	cpi	r24, 0x09	; 9
    22fa:	91 05       	cpc	r25, r1
    22fc:	e9 f1       	breq	.+122    	; 0x2378 <settings_store_setting+0xac>
    22fe:	e8 5e       	subi	r30, 0xE8	; 232
    2300:	f3 40       	sbci	r31, 0x03	; 3
    2302:	09 f0       	breq	.+2      	; 0x2306 <settings_store_setting+0x3a>
    2304:	55 c0       	rjmp	.+170    	; 0x23b0 <settings_store_setting+0xe4>
    2306:	44 c0       	rjmp	.+136    	; 0x2390 <settings_store_setting+0xc4>
    case 0: case 1: case 2: case 3:
    settings.steps_per_mm[parameter] = value; break;
    2308:	ee 0f       	add	r30, r30
    230a:	ff 1f       	adc	r31, r31
    230c:	ee 0f       	add	r30, r30
    230e:	ff 1f       	adc	r31, r31
    2310:	e9 5b       	subi	r30, 0xB9	; 185
    2312:	fb 4f       	sbci	r31, 0xFB	; 251
    2314:	40 83       	st	Z, r20
    2316:	51 83       	std	Z+1, r21	; 0x01
    2318:	62 83       	std	Z+2, r22	; 0x02
    231a:	73 83       	std	Z+3, r23	; 0x03
    231c:	4c c0       	rjmp	.+152    	; 0x23b6 <settings_store_setting+0xea>
    case 4: settings.pulse_microseconds = round(value); break;
    231e:	cb 01       	movw	r24, r22
    2320:	ba 01       	movw	r22, r20
    2322:	0e 94 99 1b 	call	0x3732	; 0x3732 <round>
    2326:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__fixunssfsi>
    232a:	60 93 58 04 	sts	0x0458, r22
    232e:	43 c0       	rjmp	.+134    	; 0x23b6 <settings_store_setting+0xea>
    case 5: settings.default_feed_rate = value; break;
    2330:	40 93 59 04 	sts	0x0459, r20
    2334:	50 93 5a 04 	sts	0x045A, r21
    2338:	60 93 5b 04 	sts	0x045B, r22
    233c:	70 93 5c 04 	sts	0x045C, r23
    2340:	3a c0       	rjmp	.+116    	; 0x23b6 <settings_store_setting+0xea>
    case 6: settings.default_seek_rate = value; break;
    2342:	40 93 5d 04 	sts	0x045D, r20
    2346:	50 93 5e 04 	sts	0x045E, r21
    234a:	60 93 5f 04 	sts	0x045F, r22
    234e:	70 93 60 04 	sts	0x0460, r23
    2352:	31 c0       	rjmp	.+98     	; 0x23b6 <settings_store_setting+0xea>
    case 7: settings.mm_per_arc_segment = value; break;
    2354:	40 93 61 04 	sts	0x0461, r20
    2358:	50 93 62 04 	sts	0x0462, r21
    235c:	60 93 63 04 	sts	0x0463, r22
    2360:	70 93 64 04 	sts	0x0464, r23
    2364:	28 c0       	rjmp	.+80     	; 0x23b6 <settings_store_setting+0xea>
    case 8: settings.acceleration = value; break;
    2366:	40 93 65 04 	sts	0x0465, r20
    236a:	50 93 66 04 	sts	0x0466, r21
    236e:	60 93 67 04 	sts	0x0467, r22
    2372:	70 93 68 04 	sts	0x0468, r23
    2376:	1f c0       	rjmp	.+62     	; 0x23b6 <settings_store_setting+0xea>
    case 9: settings.max_jerk = fabs(value); break;
    2378:	db 01       	movw	r26, r22
    237a:	ca 01       	movw	r24, r20
    237c:	bf 77       	andi	r27, 0x7F	; 127
    237e:	80 93 69 04 	sts	0x0469, r24
    2382:	90 93 6a 04 	sts	0x046A, r25
    2386:	a0 93 6b 04 	sts	0x046B, r26
    238a:	b0 93 6c 04 	sts	0x046C, r27
    238e:	13 c0       	rjmp	.+38     	; 0x23b6 <settings_store_setting+0xea>
    case 1000:
	  if (!!value) st_enable();
    2390:	cb 01       	movw	r24, r22
    2392:	ba 01       	movw	r22, r20
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	0e 94 01 19 	call	0x3202	; 0x3202 <__cmpsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	19 f0       	breq	.+6      	; 0x23aa <settings_store_setting+0xde>
    23a4:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <st_enable>
    23a8:	08 95       	ret
      else st_disable();
    23aa:	0e 94 ee 12 	call	0x25dc	; 0x25dc <st_disable>
    23ae:	08 95       	ret
      return;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    23b0:	85 e2       	ldi	r24, 0x25	; 37
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	04 c0       	rjmp	.+8      	; 0x23be <settings_store_setting+0xf2>
      return;
  }
  write_settings();
    23b6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    23ba:	80 e1       	ldi	r24, 0x10	; 16
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
    23c2:	08 95       	ret

000023c4 <settings_dump>:
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
  settings.max_jerk = DEFAULT_MAX_JERK;
}

void settings_dump() {
  printPgmString(PSTR("$VERSION = "));
    23c4:	87 ef       	ldi	r24, 0xF7	; 247
    23c6:	93 e0       	ldi	r25, 0x03	; 3
    23c8:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printPgmString(PSTR(GRBL_VERSION));
    23cc:	82 ef       	ldi	r24, 0xF2	; 242
    23ce:	93 e0       	ldi	r25, 0x03	; 3
    23d0:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printPgmString(PSTR("\r\n"));
    23d4:	8f ee       	ldi	r24, 0xEF	; 239
    23d6:	93 e0       	ldi	r25, 0x03	; 3
    23d8:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$0 = ")); 
    23dc:	89 ee       	ldi	r24, 0xE9	; 233
    23de:	93 e0       	ldi	r25, 0x03	; 3
    23e0:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.steps_per_mm[X_AXIS]);
    23e4:	60 91 47 04 	lds	r22, 0x0447
    23e8:	70 91 48 04 	lds	r23, 0x0448
    23ec:	80 91 49 04 	lds	r24, 0x0449
    23f0:	90 91 4a 04 	lds	r25, 0x044A
    23f4:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n"));
    23f8:	89 ed       	ldi	r24, 0xD9	; 217
    23fa:	93 e0       	ldi	r25, 0x03	; 3
    23fc:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$1 = ")); 
    2400:	83 ed       	ldi	r24, 0xD3	; 211
    2402:	93 e0       	ldi	r25, 0x03	; 3
    2404:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.steps_per_mm[Y_AXIS]);
    2408:	60 91 4b 04 	lds	r22, 0x044B
    240c:	70 91 4c 04 	lds	r23, 0x044C
    2410:	80 91 4d 04 	lds	r24, 0x044D
    2414:	90 91 4e 04 	lds	r25, 0x044E
    2418:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n"));
    241c:	83 ec       	ldi	r24, 0xC3	; 195
    241e:	93 e0       	ldi	r25, 0x03	; 3
    2420:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$2 = ")); 
    2424:	8d eb       	ldi	r24, 0xBD	; 189
    2426:	93 e0       	ldi	r25, 0x03	; 3
    2428:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.steps_per_mm[Z_AXIS]);
    242c:	60 91 4f 04 	lds	r22, 0x044F
    2430:	70 91 50 04 	lds	r23, 0x0450
    2434:	80 91 51 04 	lds	r24, 0x0451
    2438:	90 91 52 04 	lds	r25, 0x0452
    243c:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n"));
    2440:	8d ea       	ldi	r24, 0xAD	; 173
    2442:	93 e0       	ldi	r25, 0x03	; 3
    2444:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$3 = ")); 
    2448:	87 ea       	ldi	r24, 0xA7	; 167
    244a:	93 e0       	ldi	r25, 0x03	; 3
    244c:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.steps_per_mm[C_AXIS]);
    2450:	60 91 53 04 	lds	r22, 0x0453
    2454:	70 91 54 04 	lds	r23, 0x0454
    2458:	80 91 55 04 	lds	r24, 0x0455
    245c:	90 91 56 04 	lds	r25, 0x0456
    2460:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (steps/deg. c)\r\n"));
    2464:	85 e9       	ldi	r24, 0x95	; 149
    2466:	93 e0       	ldi	r25, 0x03	; 3
    2468:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
    
  printPgmString(PSTR("$4 = ")); 
    246c:	8f e8       	ldi	r24, 0x8F	; 143
    246e:	93 e0       	ldi	r25, 0x03	; 3
    2470:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printInteger(settings.pulse_microseconds);
    2474:	60 91 58 04 	lds	r22, 0x0458
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 04 18 	call	0x3008	; 0x3008 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n"));
    2482:	82 e7       	ldi	r24, 0x72	; 114
    2484:	93 e0       	ldi	r25, 0x03	; 3
    2486:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$5 = ")); 
    248a:	8c e6       	ldi	r24, 0x6C	; 108
    248c:	93 e0       	ldi	r25, 0x03	; 3
    248e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.default_feed_rate);
    2492:	60 91 59 04 	lds	r22, 0x0459
    2496:	70 91 5a 04 	lds	r23, 0x045A
    249a:	80 91 5b 04 	lds	r24, 0x045B
    249e:	90 91 5c 04 	lds	r25, 0x045C
    24a2:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n"));
    24a6:	8e e4       	ldi	r24, 0x4E	; 78
    24a8:	93 e0       	ldi	r25, 0x03	; 3
    24aa:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>

  printPgmString(PSTR("$6 = ")); 
    24ae:	88 e4       	ldi	r24, 0x48	; 72
    24b0:	93 e0       	ldi	r25, 0x03	; 3
    24b2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.default_seek_rate);
    24b6:	60 91 5d 04 	lds	r22, 0x045D
    24ba:	70 91 5e 04 	lds	r23, 0x045E
    24be:	80 91 5f 04 	lds	r24, 0x045F
    24c2:	90 91 60 04 	lds	r25, 0x0460
    24c6:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n"));
    24ca:	8a e2       	ldi	r24, 0x2A	; 42
    24cc:	93 e0       	ldi	r25, 0x03	; 3
    24ce:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$7 = ")); 
    24d2:	84 e2       	ldi	r24, 0x24	; 36
    24d4:	93 e0       	ldi	r25, 0x03	; 3
    24d6:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.mm_per_arc_segment);
    24da:	60 91 61 04 	lds	r22, 0x0461
    24de:	70 91 62 04 	lds	r23, 0x0462
    24e2:	80 91 63 04 	lds	r24, 0x0463
    24e6:	90 91 64 04 	lds	r25, 0x0464
    24ea:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n"));
    24ee:	80 e1       	ldi	r24, 0x10	; 16
    24f0:	93 e0       	ldi	r25, 0x03	; 3
    24f2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$8 = ")); 
    24f6:	8a e0       	ldi	r24, 0x0A	; 10
    24f8:	93 e0       	ldi	r25, 0x03	; 3
    24fa:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.acceleration);
    24fe:	60 91 65 04 	lds	r22, 0x0465
    2502:	70 91 66 04 	lds	r23, 0x0466
    2506:	80 91 67 04 	lds	r24, 0x0467
    250a:	90 91 68 04 	lds	r25, 0x0468
    250e:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n"));
    2512:	8c ee       	ldi	r24, 0xEC	; 236
    2514:	92 e0       	ldi	r25, 0x02	; 2
    2516:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$9 = ")); 
    251a:	86 ee       	ldi	r24, 0xE6	; 230
    251c:	92 e0       	ldi	r25, 0x02	; 2
    251e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printFloat(settings.max_jerk);
    2522:	60 91 69 04 	lds	r22, 0x0469
    2526:	70 91 6a 04 	lds	r23, 0x046A
    252a:	80 91 6b 04 	lds	r24, 0x046B
    252e:	90 91 6c 04 	lds	r25, 0x046C
    2532:	0e 94 1f 18 	call	0x303e	; 0x303e <printFloat>
  printPgmString(PSTR(" (max instant cornering speed change in delta mm/min)\r\n"));
    2536:	8e ea       	ldi	r24, 0xAE	; 174
    2538:	92 e0       	ldi	r25, 0x02	; 2
    253a:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  
  printPgmString(PSTR("$1000 = "));
    253e:	85 ea       	ldi	r24, 0xA5	; 165
    2540:	92 e0       	ldi	r25, 0x02	; 2
    2542:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
  printInteger(st_is_enabled());
    2546:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <st_is_enabled>
    254a:	aa 27       	eor	r26, r26
    254c:	97 fd       	sbrc	r25, 7
    254e:	a0 95       	com	r26
    2550:	ba 2f       	mov	r27, r26
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 04 18 	call	0x3008	; 0x3008 <printInteger>
  printPgmString(PSTR(" (steppers: 0 = disabled, 1 = enabled)\r\n"));
    255a:	8c e7       	ldi	r24, 0x7C	; 124
    255c:	92 e0       	ldi	r25, 0x02	; 2
    255e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
	
  printPgmString(PSTR("'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2562:	89 e3       	ldi	r24, 0x39	; 57
    2564:	92 e0       	ldi	r25, 0x02	; 2
    2566:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
}
    256a:	08 95       	ret

0000256c <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(read_settings()) {
    256c:	0e 94 17 11 	call	0x222e	; 0x222e <read_settings>
    2570:	89 2b       	or	r24, r25
    2572:	29 f0       	breq	.+10     	; 0x257e <settings_init+0x12>
    printPgmString(PSTR("'$' to dump current settings\r\n"));
    2574:	81 ef       	ldi	r24, 0xF1	; 241
    2576:	91 e0       	ldi	r25, 0x01	; 1
    2578:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
    257c:	08 95       	ret
  } else {
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    257e:	86 eb       	ldi	r24, 0xB6	; 182
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <printPgmString>
    settings_reset();
    2586:	0e 94 b3 10 	call	0x2166	; 0x2166 <settings_reset>
    write_settings();
    258a:	0e 94 58 11 	call	0x22b0	; 0x22b0 <write_settings>
    settings_dump();
    258e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <settings_dump>
    2592:	08 95       	ret

00002594 <spindle_init>:

#include <avr/io.h>

void spindle_init()
{
  SPINDLE_ENABLE_DDR |= 1<<SPINDLE_ENABLE_BIT;
    2594:	0e 9a       	sbi	0x01, 6	; 1
  SPINDLE_DIRECTION_DDR |= 1<<SPINDLE_DIRECTION_BIT;
    2596:	27 9a       	sbi	0x04, 7	; 4
}
    2598:	08 95       	ret

0000259a <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
  if(direction >= 0) {
    259a:	97 fd       	sbrc	r25, 7
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <spindle_run+0x8>
    SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
    259e:	2f 98       	cbi	0x05, 7	; 5
    25a0:	01 c0       	rjmp	.+2      	; 0x25a4 <spindle_run+0xa>
  } else {
    SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    25a2:	2f 9a       	sbi	0x05, 7	; 5
  }
  SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    25a4:	16 9a       	sbi	0x02, 6	; 2
}
    25a6:	08 95       	ret

000025a8 <spindle_stop>:

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    25a8:	16 98       	cbi	0x02, 6	; 2
}
    25aa:	08 95       	ret

000025ac <st_wake_up>:
//  that is called ACCELERATION_TICKS_PER_SECOND times per second.

void set_step_events_per_minute(uint32_t steps_per_minute);

void st_wake_up() {
  ENABLE_STEPPER_DRIVER_INTERRUPT();  
    25ac:	ef e6       	ldi	r30, 0x6F	; 111
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	82 60       	ori	r24, 0x02	; 2
    25b4:	80 83       	st	Z, r24
}
    25b6:	08 95       	ret

000025b8 <__vector_15>:
}

// This interrupt is set up by SIG_OUTPUT_COMPARE1A when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
SIGNAL(TIMER2_OVF_vect)
{
    25b8:	1f 92       	push	r1
    25ba:	0f 92       	push	r0
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	0f 92       	push	r0
    25c0:	11 24       	eor	r1, r1
    25c2:	8f 93       	push	r24
  // reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (STEP_INVERT_MASK & STEP_MASK); 
    25c4:	81 b3       	in	r24, 0x11	; 17
    25c6:	8a 7c       	andi	r24, 0xCA	; 202
    25c8:	81 60       	ori	r24, 0x01	; 1
    25ca:	81 bb       	out	0x11, r24	; 17
}
    25cc:	8f 91       	pop	r24
    25ce:	0f 90       	pop	r0
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	0f 90       	pop	r0
    25d4:	1f 90       	pop	r1
    25d6:	18 95       	reti

000025d8 <st_enable>:
  
  sei();
}

void st_enable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    25d8:	44 98       	cbi	0x08, 4	; 8
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}
    25da:	08 95       	ret

000025dc <st_disable>:

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    25dc:	44 9a       	sbi	0x08, 4	; 8
  	(STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT);
}
    25de:	08 95       	ret

000025e0 <st_is_enabled>:

int st_is_enabled() {
  return !!((STEPPERS_ENABLE_DDR & (1<<STEPPERS_ENABLE_BIT)) && 
    25e0:	3c 99       	sbic	0x07, 4	; 7
    25e2:	03 c0       	rjmp	.+6      	; 0x25ea <st_is_enabled+0xa>
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	07 c0       	rjmp	.+14     	; 0x25f8 <st_is_enabled+0x18>
    25ea:	88 b1       	in	r24, 0x08	; 8
    25ec:	82 95       	swap	r24
    25ee:	8f 70       	andi	r24, 0x0F	; 15
    25f0:	80 95       	com	r24
    25f2:	81 70       	andi	r24, 0x01	; 1
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}
    25f8:	c9 01       	movw	r24, r18
    25fa:	08 95       	ret

000025fc <config_step_timer>:
uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
	if (cycles <= 0xffffL) {
    25fc:	60 30       	cpi	r22, 0x00	; 0
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	72 07       	cpc	r23, r18
    2602:	21 e0       	ldi	r18, 0x01	; 1
    2604:	82 07       	cpc	r24, r18
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	92 07       	cpc	r25, r18
    260a:	30 f4       	brcc	.+12     	; 0x2618 <config_step_timer+0x1c>
		ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    260c:	9b 01       	movw	r18, r22
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	e0 e0       	ldi	r30, 0x00	; 0
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	72 c0       	rjmp	.+228    	; 0x26fc <config_step_timer+0x100>
	} else if (cycles <= 0x7ffffL) {
    2618:	60 30       	cpi	r22, 0x00	; 0
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	72 07       	cpc	r23, r18
    261e:	28 e0       	ldi	r18, 0x08	; 8
    2620:	82 07       	cpc	r24, r18
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	92 07       	cpc	r25, r18
    2626:	a0 f4       	brcc	.+40     	; 0x2650 <config_step_timer+0x54>
    ceiling = cycles >> 3;
    2628:	b3 e0       	ldi	r27, 0x03	; 3
    262a:	96 95       	lsr	r25
    262c:	87 95       	ror	r24
    262e:	77 95       	ror	r23
    2630:	67 95       	ror	r22
    2632:	ba 95       	dec	r27
    2634:	d1 f7       	brne	.-12     	; 0x262a <config_step_timer+0x2e>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    2636:	9b 01       	movw	r18, r22
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	a3 e0       	ldi	r26, 0x03	; 3
    263e:	22 0f       	add	r18, r18
    2640:	33 1f       	adc	r19, r19
    2642:	44 1f       	adc	r20, r20
    2644:	55 1f       	adc	r21, r21
    2646:	aa 95       	dec	r26
    2648:	d1 f7       	brne	.-12     	; 0x263e <config_step_timer+0x42>
    264a:	e1 e0       	ldi	r30, 0x01	; 1
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	56 c0       	rjmp	.+172    	; 0x26fc <config_step_timer+0x100>
	} else if (cycles <= 0x3fffffL) {
    2650:	60 30       	cpi	r22, 0x00	; 0
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	72 07       	cpc	r23, r18
    2656:	20 e4       	ldi	r18, 0x40	; 64
    2658:	82 07       	cpc	r24, r18
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	92 07       	cpc	r25, r18
    265e:	a0 f4       	brcc	.+40     	; 0x2688 <config_step_timer+0x8c>
		ceiling =  cycles >> 6;
    2660:	f6 e0       	ldi	r31, 0x06	; 6
    2662:	96 95       	lsr	r25
    2664:	87 95       	ror	r24
    2666:	77 95       	ror	r23
    2668:	67 95       	ror	r22
    266a:	fa 95       	dec	r31
    266c:	d1 f7       	brne	.-12     	; 0x2662 <config_step_timer+0x66>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    266e:	9b 01       	movw	r18, r22
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	e6 e0       	ldi	r30, 0x06	; 6
    2676:	22 0f       	add	r18, r18
    2678:	33 1f       	adc	r19, r19
    267a:	44 1f       	adc	r20, r20
    267c:	55 1f       	adc	r21, r21
    267e:	ea 95       	dec	r30
    2680:	d1 f7       	brne	.-12     	; 0x2676 <config_step_timer+0x7a>
    2682:	e2 e0       	ldi	r30, 0x02	; 2
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	3a c0       	rjmp	.+116    	; 0x26fc <config_step_timer+0x100>
	} else if (cycles <= 0xffffffL) {
    2688:	60 30       	cpi	r22, 0x00	; 0
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	72 07       	cpc	r23, r18
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	82 07       	cpc	r24, r18
    2692:	21 e0       	ldi	r18, 0x01	; 1
    2694:	92 07       	cpc	r25, r18
    2696:	70 f4       	brcc	.+28     	; 0x26b4 <config_step_timer+0xb8>
		ceiling =  (cycles >> 8);
    2698:	bb 27       	eor	r27, r27
    269a:	a9 2f       	mov	r26, r25
    269c:	98 2f       	mov	r25, r24
    269e:	87 2f       	mov	r24, r23
    26a0:	bc 01       	movw	r22, r24
    prescaler = 3; // prescaler: 256
    actual_cycles = ceiling * 256L;
    26a2:	a0 e0       	ldi	r26, 0x00	; 0
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	22 27       	eor	r18, r18
    26a8:	38 2f       	mov	r19, r24
    26aa:	49 2f       	mov	r20, r25
    26ac:	5a 2f       	mov	r21, r26
    26ae:	e3 e0       	ldi	r30, 0x03	; 3
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	24 c0       	rjmp	.+72     	; 0x26fc <config_step_timer+0x100>
	} else if (cycles <= 0x3ffffffL) {
    26b4:	60 30       	cpi	r22, 0x00	; 0
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	72 07       	cpc	r23, r18
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	82 07       	cpc	r24, r18
    26be:	24 e0       	ldi	r18, 0x04	; 4
    26c0:	92 07       	cpc	r25, r18
    26c2:	48 f0       	brcs	.+18     	; 0x26d6 <config_step_timer+0xda>
    26c4:	6f ef       	ldi	r22, 0xFF	; 255
    26c6:	7f ef       	ldi	r23, 0xFF	; 255
    26c8:	e4 e0       	ldi	r30, 0x04	; 4
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3c ef       	ldi	r19, 0xFC	; 252
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	13 c0       	rjmp	.+38     	; 0x26fc <config_step_timer+0x100>
		ceiling = (cycles >> 10);
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	96 95       	lsr	r25
    26da:	87 95       	ror	r24
    26dc:	77 95       	ror	r23
    26de:	67 95       	ror	r22
    26e0:	2a 95       	dec	r18
    26e2:	d1 f7       	brne	.-12     	; 0x26d8 <config_step_timer+0xdc>
    prescaler = 4; // prescaler: 1024
    actual_cycles = ceiling * 1024L;    
    26e4:	9b 01       	movw	r18, r22
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	8a e0       	ldi	r24, 0x0A	; 10
    26ec:	22 0f       	add	r18, r18
    26ee:	33 1f       	adc	r19, r19
    26f0:	44 1f       	adc	r20, r20
    26f2:	55 1f       	adc	r21, r21
    26f4:	8a 95       	dec	r24
    26f6:	d1 f7       	brne	.-12     	; 0x26ec <config_step_timer+0xf0>
    26f8:	e4 e0       	ldi	r30, 0x04	; 4
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
		ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
	}
	// Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    26fc:	80 91 81 00 	lds	r24, 0x0081
    2700:	9e 2f       	mov	r25, r30
    2702:	9f 5f       	subi	r25, 0xFF	; 255
    2704:	88 7f       	andi	r24, 0xF8	; 248
    2706:	98 2b       	or	r25, r24
    2708:	90 93 81 00 	sts	0x0081, r25
  // Set ceiling
  OCR1A = ceiling;
    270c:	70 93 89 00 	sts	0x0089, r23
    2710:	60 93 88 00 	sts	0x0088, r22
  return(actual_cycles);
}
    2714:	b9 01       	movw	r22, r18
    2716:	ca 01       	movw	r24, r20
    2718:	08 95       	ret

0000271a <set_step_events_per_minute>:

void set_step_events_per_minute(uint32_t steps_per_minute) {
    271a:	9b 01       	movw	r18, r22
    271c:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    271e:	20 3b       	cpi	r18, 0xB0	; 176
    2720:	84 e0       	ldi	r24, 0x04	; 4
    2722:	38 07       	cpc	r19, r24
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	48 07       	cpc	r20, r24
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	58 07       	cpc	r21, r24
    272c:	20 f4       	brcc	.+8      	; 0x2736 <set_step_events_per_minute+0x1c>
    272e:	20 eb       	ldi	r18, 0xB0	; 176
    2730:	34 e0       	ldi	r19, 0x04	; 4
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
  cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	70 e7       	ldi	r23, 0x70	; 112
    273a:	88 e3       	ldi	r24, 0x38	; 56
    273c:	99 e3       	ldi	r25, 0x39	; 57
    273e:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodsi4>
    2742:	ca 01       	movw	r24, r20
    2744:	b9 01       	movw	r22, r18
    2746:	0e 94 fe 12 	call	0x25fc	; 0x25fc <config_step_timer>
    274a:	60 93 f7 03 	sts	0x03F7, r22
    274e:	70 93 f8 03 	sts	0x03F8, r23
    2752:	80 93 f9 03 	sts	0x03F9, r24
    2756:	90 93 fa 03 	sts	0x03FA, r25
}
    275a:	08 95       	ret

0000275c <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
	// Configure directions of interface pins
  STEPPING_DDR |= STEP_MASK;
    275c:	80 b3       	in	r24, 0x10	; 16
    275e:	85 63       	ori	r24, 0x35	; 53
    2760:	80 bb       	out	0x10, r24	; 16
  DIRECTION_DDR |= DIRECTION_MASK;
    2762:	80 b3       	in	r24, 0x10	; 16
    2764:	8a 6c       	ori	r24, 0xCA	; 202
    2766:	80 bb       	out	0x10, r24	; 16
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | STEP_INVERT_MASK;
    2768:	81 b3       	in	r24, 0x11	; 17
    276a:	8a 7c       	andi	r24, 0xCA	; 202
    276c:	81 60       	ori	r24, 0x01	; 1
    276e:	81 bb       	out	0x11, r24	; 17
  LIMIT_DDR &= ~(LIMIT_MASK);
    2770:	8a b1       	in	r24, 0x0a	; 10
    2772:	80 7f       	andi	r24, 0xF0	; 240
    2774:	8a b9       	out	0x0a, r24	; 10
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
    2776:	3c 9a       	sbi	0x07, 4	; 7
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
  	((1<<STEPPERS_ENABLE_BIT) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT));
}

void st_disable() {
  STEPPERS_ENABLE_PORT = (STEPPERS_ENABLE_PORT & ~(1<<STEPPERS_ENABLE_BIT)) | 
    2778:	44 9a       	sbi	0x08, 4	; 8
  STEPPERS_ENABLE_DDR |= 1<<STEPPERS_ENABLE_BIT;
  
  st_disable();
  
	// waveform generation = 0100 = CTC
	TCCR1B &= ~(1<<WGM13);
    277a:	e1 e8       	ldi	r30, 0x81	; 129
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	8f 7e       	andi	r24, 0xEF	; 239
    2782:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
    2784:	80 81       	ld	r24, Z
    2786:	88 60       	ori	r24, 0x08	; 8
    2788:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11); 
    278a:	e0 e8       	ldi	r30, 0x80	; 128
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	8d 7f       	andi	r24, 0xFD	; 253
    2792:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);
    2794:	80 81       	ld	r24, Z
    2796:	8e 7f       	andi	r24, 0xFE	; 254
    2798:	80 83       	st	Z, r24

	// output mode = 00 (disconnected)
	TCCR1A &= ~(3<<COM1A0); 
    279a:	80 81       	ld	r24, Z
    279c:	8f 73       	andi	r24, 0x3F	; 63
    279e:	80 83       	st	Z, r24
	TCCR1A &= ~(3<<COM1B0); 
    27a0:	80 81       	ld	r24, Z
    27a2:	8f 7c       	andi	r24, 0xCF	; 207
    27a4:	80 83       	st	Z, r24
	
	// Configure Timer 2
  TCCR2A = 0;         // Normal operation
    27a6:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = (1<<CS21); // Full speed, 1/8 prescaler
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 |= (1<<TOIE2);      
    27b0:	e0 e7       	ldi	r30, 0x70	; 112
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	81 60       	ori	r24, 0x01	; 1
    27b8:	80 83       	st	Z, r24
  
  set_step_events_per_minute(6000);
    27ba:	60 e7       	ldi	r22, 0x70	; 112
    27bc:	77 e1       	ldi	r23, 0x17	; 23
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 8d 13 	call	0x271a	; 0x271a <set_step_events_per_minute>
  DISABLE_STEPPER_DRIVER_INTERRUPT();  
    27c6:	ef e6       	ldi	r30, 0x6F	; 111
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	8d 7f       	andi	r24, 0xFD	; 253
    27ce:	80 83       	st	Z, r24
  trapezoid_tick_cycle_counter = 0;
    27d0:	10 92 fb 03 	sts	0x03FB, r1
    27d4:	10 92 fc 03 	sts	0x03FC, r1
    27d8:	10 92 fd 03 	sts	0x03FD, r1
    27dc:	10 92 fe 03 	sts	0x03FE, r1
  
  sei();
    27e0:	78 94       	sei
}
    27e2:	08 95       	ret

000027e4 <st_go_home>:
}

void st_go_home()
{
  // Todo: Perform the homing cycle
}
    27e4:	08 95       	ret

000027e6 <st_synchronize>:
    ((STEPPERS_ENABLE_PORT & (1<<STEPPERS_ENABLE_BIT)) ^ (STEPPERS_ENABLE_INVERT<<STEPPERS_ENABLE_BIT)));
}

// Block until all buffered steps are executed
void st_synchronize()
{
    27e6:	07 c0       	rjmp	.+14     	; 0x27f6 <st_synchronize+0x10>
  while(plan_get_current_block()) { sleep_mode(); }    
    27e8:	83 b7       	in	r24, 0x33	; 51
    27ea:	81 60       	ori	r24, 0x01	; 1
    27ec:	83 bf       	out	0x33, r24	; 51
    27ee:	88 95       	sleep
    27f0:	83 b7       	in	r24, 0x33	; 51
    27f2:	8e 7f       	andi	r24, 0xFE	; 254
    27f4:	83 bf       	out	0x33, r24	; 51
    27f6:	0e 94 f8 07 	call	0xff0	; 0xff0 <plan_get_current_block>
    27fa:	89 2b       	or	r24, r25
    27fc:	a9 f7       	brne	.-22     	; 0x27e8 <st_synchronize+0x2>
}
    27fe:	08 95       	ret

00002800 <__vector_17>:

// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is  executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse.
SIGNAL(TIMER1_COMPA_vect)
{        
    2800:	1f 92       	push	r1
    2802:	0f 92       	push	r0
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	0f 92       	push	r0
    2808:	0b b6       	in	r0, 0x3b	; 59
    280a:	0f 92       	push	r0
    280c:	11 24       	eor	r1, r1
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	2f 93       	push	r18
    2818:	3f 93       	push	r19
    281a:	4f 93       	push	r20
    281c:	5f 93       	push	r21
    281e:	6f 93       	push	r22
    2820:	7f 93       	push	r23
    2822:	8f 93       	push	r24
    2824:	9f 93       	push	r25
    2826:	af 93       	push	r26
    2828:	bf 93       	push	r27
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	ef 93       	push	r30
    2830:	ff 93       	push	r31
  // TODO: Check if the busy-flag can be eliminated by just disabling this interrupt while we are in it
  
  if(busy){ return; } // The busy-flag is used to avoid reentering this interrupt
    2832:	80 91 f5 03 	lds	r24, 0x03F5
    2836:	90 91 f6 03 	lds	r25, 0x03F6
    283a:	89 2b       	or	r24, r25
    283c:	09 f0       	breq	.+2      	; 0x2840 <__vector_17+0x40>
    283e:	5c c2       	rjmp	.+1208   	; 0x2cf8 <__vector_17+0x4f8>
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (dir_bits & DIRECTION_MASK);
    2840:	91 b3       	in	r25, 0x11	; 17
    2842:	80 91 e0 03 	lds	r24, 0x03E0
    2846:	8a 7c       	andi	r24, 0xCA	; 202
    2848:	95 73       	andi	r25, 0x35	; 53
    284a:	89 2b       	or	r24, r25
    284c:	81 bb       	out	0x11, r24	; 17
  // Then pulse the stepping pins
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    284e:	81 b3       	in	r24, 0x11	; 17
    2850:	8a 7c       	andi	r24, 0xCA	; 202
    2852:	90 91 df 03 	lds	r25, 0x03DF
    2856:	89 2b       	or	r24, r25
    2858:	81 bb       	out	0x11, r24	; 17
  // Reset step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds.  Clear the overflow flag to stop a queued
  // interrupt from resetting the step pulse too soon.
  TCNT2 = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND)/8);
    285a:	80 91 58 04 	lds	r24, 0x0458
    285e:	88 0f       	add	r24, r24
    2860:	84 50       	subi	r24, 0x04	; 4
    2862:	81 95       	neg	r24
    2864:	80 93 b2 00 	sts	0x00B2, r24
  TIFR2 |= (1<<TOV2);
    2868:	b8 9a       	sbi	0x17, 0	; 23

  busy = TRUE;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	90 93 f6 03 	sts	0x03F6, r25
    2872:	80 93 f5 03 	sts	0x03F5, r24
  sei(); // Re enable interrupts (normally disabled while inside an interrupt handler)
    2876:	78 94       	sei
         // ((We re-enable interrupts in order for SIG_OVERFLOW2 to be able to be triggered 
         // at exactly the right time even if we occasionally spend a lot of time inside this handler.))
    
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    2878:	80 91 dd 03 	lds	r24, 0x03DD
    287c:	90 91 de 03 	lds	r25, 0x03DE
    2880:	89 2b       	or	r24, r25
    2882:	09 f0       	breq	.+2      	; 0x2886 <__vector_17+0x86>
    2884:	5d c0       	rjmp	.+186    	; 0x2940 <__vector_17+0x140>
    // Anything in the buffer?
    current_block = plan_get_current_block();
    2886:	0e 94 f8 07 	call	0xff0	; 0xff0 <plan_get_current_block>
    288a:	ec 01       	movw	r28, r24
    288c:	90 93 de 03 	sts	0x03DE, r25
    2890:	80 93 dd 03 	sts	0x03DD, r24
    if (current_block != NULL) {
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	09 f4       	brne	.+2      	; 0x289a <__vector_17+0x9a>
    2898:	4e c0       	rjmp	.+156    	; 0x2936 <__vector_17+0x136>
}

// Initializes the trapezoid generator from the current block. Called whenever a new 
// block begins.
inline void trapezoid_generator_reset() {
  trapezoid_adjusted_rate = current_block->initial_rate;  
    289a:	6d a9       	ldd	r22, Y+53	; 0x35
    289c:	7e a9       	ldd	r23, Y+54	; 0x36
    289e:	8f a9       	ldd	r24, Y+55	; 0x37
    28a0:	98 ad       	ldd	r25, Y+56	; 0x38
    28a2:	60 93 ff 03 	sts	0x03FF, r22
    28a6:	70 93 00 04 	sts	0x0400, r23
    28aa:	80 93 01 04 	sts	0x0401, r24
    28ae:	90 93 02 04 	sts	0x0402, r25
  trapezoid_tick_cycle_counter = 0; // Always start a new trapezoid with a full acceleration tick
    28b2:	10 92 fb 03 	sts	0x03FB, r1
    28b6:	10 92 fc 03 	sts	0x03FC, r1
    28ba:	10 92 fd 03 	sts	0x03FD, r1
    28be:	10 92 fe 03 	sts	0x03FE, r1
  set_step_events_per_minute(trapezoid_adjusted_rate);
    28c2:	0e 94 8d 13 	call	0x271a	; 0x271a <set_step_events_per_minute>
  if (current_block == NULL) {
    // Anything in the buffer?
    current_block = plan_get_current_block();
    if (current_block != NULL) {
      trapezoid_generator_reset();
      counter_x = -(current_block->step_event_count >> 1);
    28c6:	89 89       	ldd	r24, Y+17	; 0x11
    28c8:	9a 89       	ldd	r25, Y+18	; 0x12
    28ca:	ab 89       	ldd	r26, Y+19	; 0x13
    28cc:	bc 89       	ldd	r27, Y+20	; 0x14
    28ce:	b5 95       	asr	r27
    28d0:	a7 95       	ror	r26
    28d2:	97 95       	ror	r25
    28d4:	87 95       	ror	r24
    28d6:	b0 95       	com	r27
    28d8:	a0 95       	com	r26
    28da:	90 95       	com	r25
    28dc:	81 95       	neg	r24
    28de:	9f 4f       	sbci	r25, 0xFF	; 255
    28e0:	af 4f       	sbci	r26, 0xFF	; 255
    28e2:	bf 4f       	sbci	r27, 0xFF	; 255
    28e4:	80 93 e1 03 	sts	0x03E1, r24
    28e8:	90 93 e2 03 	sts	0x03E2, r25
    28ec:	a0 93 e3 03 	sts	0x03E3, r26
    28f0:	b0 93 e4 03 	sts	0x03E4, r27
      counter_y = counter_x;
    28f4:	80 93 e5 03 	sts	0x03E5, r24
    28f8:	90 93 e6 03 	sts	0x03E6, r25
    28fc:	a0 93 e7 03 	sts	0x03E7, r26
    2900:	b0 93 e8 03 	sts	0x03E8, r27
      counter_z = counter_x;
    2904:	80 93 e9 03 	sts	0x03E9, r24
    2908:	90 93 ea 03 	sts	0x03EA, r25
    290c:	a0 93 eb 03 	sts	0x03EB, r26
    2910:	b0 93 ec 03 	sts	0x03EC, r27
      counter_c = counter_x;
    2914:	80 93 ed 03 	sts	0x03ED, r24
    2918:	90 93 ee 03 	sts	0x03EE, r25
    291c:	a0 93 ef 03 	sts	0x03EF, r26
    2920:	b0 93 f0 03 	sts	0x03F0, r27
      step_events_completed = 0;
    2924:	10 92 f1 03 	sts	0x03F1, r1
    2928:	10 92 f2 03 	sts	0x03F2, r1
    292c:	10 92 f3 03 	sts	0x03F3, r1
    2930:	10 92 f4 03 	sts	0x03F4, r1
    2934:	05 c0       	rjmp	.+10     	; 0x2940 <__vector_17+0x140>
    } else {
      DISABLE_STEPPER_DRIVER_INTERRUPT();
    2936:	80 91 6f 00 	lds	r24, 0x006F
    293a:	8d 7f       	andi	r24, 0xFD	; 253
    293c:	80 93 6f 00 	sts	0x006F, r24
    }    
  } 

  if (current_block != NULL) {
    2940:	e0 91 dd 03 	lds	r30, 0x03DD
    2944:	f0 91 de 03 	lds	r31, 0x03DE
    2948:	30 97       	sbiw	r30, 0x00	; 0
    294a:	09 f4       	brne	.+2      	; 0x294e <__vector_17+0x14e>
    294c:	ee c0       	rjmp	.+476    	; 0x2b2a <__vector_17+0x32a>
    dir_bits = current_block->direction_bits;
    294e:	80 89       	ldd	r24, Z+16	; 0x10
    2950:	80 93 e0 03 	sts	0x03E0, r24
    out_bits = 0;
    2954:	10 92 df 03 	sts	0x03DF, r1
    counter_x += current_block->steps_x;
    2958:	20 91 e1 03 	lds	r18, 0x03E1
    295c:	30 91 e2 03 	lds	r19, 0x03E2
    2960:	40 91 e3 03 	lds	r20, 0x03E3
    2964:	50 91 e4 03 	lds	r21, 0x03E4
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	a2 81       	ldd	r26, Z+2	; 0x02
    296e:	b3 81       	ldd	r27, Z+3	; 0x03
    2970:	28 0f       	add	r18, r24
    2972:	39 1f       	adc	r19, r25
    2974:	4a 1f       	adc	r20, r26
    2976:	5b 1f       	adc	r21, r27
    2978:	20 93 e1 03 	sts	0x03E1, r18
    297c:	30 93 e2 03 	sts	0x03E2, r19
    2980:	40 93 e3 03 	sts	0x03E3, r20
    2984:	50 93 e4 03 	sts	0x03E4, r21
    if (counter_x > 0) {
    2988:	12 16       	cp	r1, r18
    298a:	13 06       	cpc	r1, r19
    298c:	14 06       	cpc	r1, r20
    298e:	15 06       	cpc	r1, r21
    2990:	9c f4       	brge	.+38     	; 0x29b8 <__vector_17+0x1b8>
      out_bits |= (1<<X_STEP_BIT);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	80 93 df 03 	sts	0x03DF, r24
      counter_x -= current_block->step_event_count;
    2998:	81 89       	ldd	r24, Z+17	; 0x11
    299a:	92 89       	ldd	r25, Z+18	; 0x12
    299c:	a3 89       	ldd	r26, Z+19	; 0x13
    299e:	b4 89       	ldd	r27, Z+20	; 0x14
    29a0:	28 1b       	sub	r18, r24
    29a2:	39 0b       	sbc	r19, r25
    29a4:	4a 0b       	sbc	r20, r26
    29a6:	5b 0b       	sbc	r21, r27
    29a8:	20 93 e1 03 	sts	0x03E1, r18
    29ac:	30 93 e2 03 	sts	0x03E2, r19
    29b0:	40 93 e3 03 	sts	0x03E3, r20
    29b4:	50 93 e4 03 	sts	0x03E4, r21
    }
    counter_y += current_block->steps_y;
    29b8:	20 91 e5 03 	lds	r18, 0x03E5
    29bc:	30 91 e6 03 	lds	r19, 0x03E6
    29c0:	40 91 e7 03 	lds	r20, 0x03E7
    29c4:	50 91 e8 03 	lds	r21, 0x03E8
    29c8:	84 81       	ldd	r24, Z+4	; 0x04
    29ca:	95 81       	ldd	r25, Z+5	; 0x05
    29cc:	a6 81       	ldd	r26, Z+6	; 0x06
    29ce:	b7 81       	ldd	r27, Z+7	; 0x07
    29d0:	28 0f       	add	r18, r24
    29d2:	39 1f       	adc	r19, r25
    29d4:	4a 1f       	adc	r20, r26
    29d6:	5b 1f       	adc	r21, r27
    29d8:	20 93 e5 03 	sts	0x03E5, r18
    29dc:	30 93 e6 03 	sts	0x03E6, r19
    29e0:	40 93 e7 03 	sts	0x03E7, r20
    29e4:	50 93 e8 03 	sts	0x03E8, r21
    if (counter_y > 0) {
    29e8:	12 16       	cp	r1, r18
    29ea:	13 06       	cpc	r1, r19
    29ec:	14 06       	cpc	r1, r20
    29ee:	15 06       	cpc	r1, r21
    29f0:	ac f4       	brge	.+42     	; 0x2a1c <__vector_17+0x21c>
      out_bits |= (1<<Y_STEP_BIT);
    29f2:	80 91 df 03 	lds	r24, 0x03DF
    29f6:	84 60       	ori	r24, 0x04	; 4
    29f8:	80 93 df 03 	sts	0x03DF, r24
      counter_y -= current_block->step_event_count;
    29fc:	81 89       	ldd	r24, Z+17	; 0x11
    29fe:	92 89       	ldd	r25, Z+18	; 0x12
    2a00:	a3 89       	ldd	r26, Z+19	; 0x13
    2a02:	b4 89       	ldd	r27, Z+20	; 0x14
    2a04:	28 1b       	sub	r18, r24
    2a06:	39 0b       	sbc	r19, r25
    2a08:	4a 0b       	sbc	r20, r26
    2a0a:	5b 0b       	sbc	r21, r27
    2a0c:	20 93 e5 03 	sts	0x03E5, r18
    2a10:	30 93 e6 03 	sts	0x03E6, r19
    2a14:	40 93 e7 03 	sts	0x03E7, r20
    2a18:	50 93 e8 03 	sts	0x03E8, r21
    }
    counter_z += current_block->steps_z;
    2a1c:	20 91 e9 03 	lds	r18, 0x03E9
    2a20:	30 91 ea 03 	lds	r19, 0x03EA
    2a24:	40 91 eb 03 	lds	r20, 0x03EB
    2a28:	50 91 ec 03 	lds	r21, 0x03EC
    2a2c:	80 85       	ldd	r24, Z+8	; 0x08
    2a2e:	91 85       	ldd	r25, Z+9	; 0x09
    2a30:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a32:	b3 85       	ldd	r27, Z+11	; 0x0b
    2a34:	28 0f       	add	r18, r24
    2a36:	39 1f       	adc	r19, r25
    2a38:	4a 1f       	adc	r20, r26
    2a3a:	5b 1f       	adc	r21, r27
    2a3c:	20 93 e9 03 	sts	0x03E9, r18
    2a40:	30 93 ea 03 	sts	0x03EA, r19
    2a44:	40 93 eb 03 	sts	0x03EB, r20
    2a48:	50 93 ec 03 	sts	0x03EC, r21
    if (counter_z > 0) {
    2a4c:	12 16       	cp	r1, r18
    2a4e:	13 06       	cpc	r1, r19
    2a50:	14 06       	cpc	r1, r20
    2a52:	15 06       	cpc	r1, r21
    2a54:	ac f4       	brge	.+42     	; 0x2a80 <__vector_17+0x280>
      out_bits |= (1<<Z_STEP_BIT);
    2a56:	80 91 df 03 	lds	r24, 0x03DF
    2a5a:	80 61       	ori	r24, 0x10	; 16
    2a5c:	80 93 df 03 	sts	0x03DF, r24
      counter_z -= current_block->step_event_count;
    2a60:	81 89       	ldd	r24, Z+17	; 0x11
    2a62:	92 89       	ldd	r25, Z+18	; 0x12
    2a64:	a3 89       	ldd	r26, Z+19	; 0x13
    2a66:	b4 89       	ldd	r27, Z+20	; 0x14
    2a68:	28 1b       	sub	r18, r24
    2a6a:	39 0b       	sbc	r19, r25
    2a6c:	4a 0b       	sbc	r20, r26
    2a6e:	5b 0b       	sbc	r21, r27
    2a70:	20 93 e9 03 	sts	0x03E9, r18
    2a74:	30 93 ea 03 	sts	0x03EA, r19
    2a78:	40 93 eb 03 	sts	0x03EB, r20
    2a7c:	50 93 ec 03 	sts	0x03EC, r21
    }
    counter_c += current_block->steps_c;
    2a80:	20 91 ed 03 	lds	r18, 0x03ED
    2a84:	30 91 ee 03 	lds	r19, 0x03EE
    2a88:	40 91 ef 03 	lds	r20, 0x03EF
    2a8c:	50 91 f0 03 	lds	r21, 0x03F0
    2a90:	84 85       	ldd	r24, Z+12	; 0x0c
    2a92:	95 85       	ldd	r25, Z+13	; 0x0d
    2a94:	a6 85       	ldd	r26, Z+14	; 0x0e
    2a96:	b7 85       	ldd	r27, Z+15	; 0x0f
    2a98:	28 0f       	add	r18, r24
    2a9a:	39 1f       	adc	r19, r25
    2a9c:	4a 1f       	adc	r20, r26
    2a9e:	5b 1f       	adc	r21, r27
    2aa0:	20 93 ed 03 	sts	0x03ED, r18
    2aa4:	30 93 ee 03 	sts	0x03EE, r19
    2aa8:	40 93 ef 03 	sts	0x03EF, r20
    2aac:	50 93 f0 03 	sts	0x03F0, r21
    if (counter_c > 0) {
    2ab0:	12 16       	cp	r1, r18
    2ab2:	13 06       	cpc	r1, r19
    2ab4:	14 06       	cpc	r1, r20
    2ab6:	15 06       	cpc	r1, r21
    2ab8:	ac f4       	brge	.+42     	; 0x2ae4 <__vector_17+0x2e4>
      out_bits |= (1<<C_STEP_BIT);
    2aba:	80 91 df 03 	lds	r24, 0x03DF
    2abe:	80 62       	ori	r24, 0x20	; 32
    2ac0:	80 93 df 03 	sts	0x03DF, r24
      counter_c -= current_block->step_event_count;
    2ac4:	81 89       	ldd	r24, Z+17	; 0x11
    2ac6:	92 89       	ldd	r25, Z+18	; 0x12
    2ac8:	a3 89       	ldd	r26, Z+19	; 0x13
    2aca:	b4 89       	ldd	r27, Z+20	; 0x14
    2acc:	28 1b       	sub	r18, r24
    2ace:	39 0b       	sbc	r19, r25
    2ad0:	4a 0b       	sbc	r20, r26
    2ad2:	5b 0b       	sbc	r21, r27
    2ad4:	20 93 ed 03 	sts	0x03ED, r18
    2ad8:	30 93 ee 03 	sts	0x03EE, r19
    2adc:	40 93 ef 03 	sts	0x03EF, r20
    2ae0:	50 93 f0 03 	sts	0x03F0, r21
    }    
    // If current block is finished, reset pointer 
    step_events_completed += 1;
    2ae4:	80 91 f1 03 	lds	r24, 0x03F1
    2ae8:	90 91 f2 03 	lds	r25, 0x03F2
    2aec:	a0 91 f3 03 	lds	r26, 0x03F3
    2af0:	b0 91 f4 03 	lds	r27, 0x03F4
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	a1 1d       	adc	r26, r1
    2af8:	b1 1d       	adc	r27, r1
    2afa:	80 93 f1 03 	sts	0x03F1, r24
    2afe:	90 93 f2 03 	sts	0x03F2, r25
    2b02:	a0 93 f3 03 	sts	0x03F3, r26
    2b06:	b0 93 f4 03 	sts	0x03F4, r27
    if (step_events_completed >= current_block->step_event_count) {
    2b0a:	21 89       	ldd	r18, Z+17	; 0x11
    2b0c:	32 89       	ldd	r19, Z+18	; 0x12
    2b0e:	43 89       	ldd	r20, Z+19	; 0x13
    2b10:	54 89       	ldd	r21, Z+20	; 0x14
    2b12:	82 17       	cp	r24, r18
    2b14:	93 07       	cpc	r25, r19
    2b16:	a4 07       	cpc	r26, r20
    2b18:	b5 07       	cpc	r27, r21
    2b1a:	48 f0       	brcs	.+18     	; 0x2b2e <__vector_17+0x32e>
      current_block = NULL;
    2b1c:	10 92 de 03 	sts	0x03DE, r1
    2b20:	10 92 dd 03 	sts	0x03DD, r1
      plan_discard_current_block();
    2b24:	0e 94 df 07 	call	0xfbe	; 0xfbe <plan_discard_current_block>
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <__vector_17+0x32e>
    }
  } else {
    out_bits = 0;
    2b2a:	10 92 df 03 	sts	0x03DF, r1
  }          
  out_bits ^= STEP_INVERT_MASK;
    2b2e:	80 91 df 03 	lds	r24, 0x03DF
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	89 27       	eor	r24, r25
    2b36:	80 93 df 03 	sts	0x03DF, r24
  dir_bits ^= DIRECTION_INVERT_MASK;
  
  // In average this generates a trapezoid_generator_tick every CYCLES_PER_ACCELERATION_TICK by keeping track
  // of the number of elapsed cycles. The code assumes that step_events occur significantly more often than
  // trapezoid_generator_ticks as they well should. 
  trapezoid_tick_cycle_counter += cycles_per_step_event;
    2b3a:	20 91 f7 03 	lds	r18, 0x03F7
    2b3e:	30 91 f8 03 	lds	r19, 0x03F8
    2b42:	40 91 f9 03 	lds	r20, 0x03F9
    2b46:	50 91 fa 03 	lds	r21, 0x03FA
    2b4a:	80 91 fb 03 	lds	r24, 0x03FB
    2b4e:	90 91 fc 03 	lds	r25, 0x03FC
    2b52:	a0 91 fd 03 	lds	r26, 0x03FD
    2b56:	b0 91 fe 03 	lds	r27, 0x03FE
    2b5a:	28 0f       	add	r18, r24
    2b5c:	39 1f       	adc	r19, r25
    2b5e:	4a 1f       	adc	r20, r26
    2b60:	5b 1f       	adc	r21, r27
    2b62:	20 93 fb 03 	sts	0x03FB, r18
    2b66:	30 93 fc 03 	sts	0x03FC, r19
    2b6a:	40 93 fd 03 	sts	0x03FD, r20
    2b6e:	50 93 fe 03 	sts	0x03FE, r21
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    2b72:	21 38       	cpi	r18, 0x81	; 129
    2b74:	8a e1       	ldi	r24, 0x1A	; 26
    2b76:	38 07       	cpc	r19, r24
    2b78:	86 e0       	ldi	r24, 0x06	; 6
    2b7a:	48 07       	cpc	r20, r24
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	58 07       	cpc	r21, r24
    2b80:	08 f4       	brcc	.+2      	; 0x2b84 <__vector_17+0x384>
    2b82:	b6 c0       	rjmp	.+364    	; 0x2cf0 <__vector_17+0x4f0>
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    2b84:	20 58       	subi	r18, 0x80	; 128
    2b86:	3a 41       	sbci	r19, 0x1A	; 26
    2b88:	46 40       	sbci	r20, 0x06	; 6
    2b8a:	50 40       	sbci	r21, 0x00	; 0
    2b8c:	20 93 fb 03 	sts	0x03FB, r18
    2b90:	30 93 fc 03 	sts	0x03FC, r19
    2b94:	40 93 fd 03 	sts	0x03FD, r20
    2b98:	50 93 fe 03 	sts	0x03FE, r21

// This is called ACCELERATION_TICKS_PER_SECOND times per second by the step_event
// interrupt. It can be assumed that the trapezoid-generator-parameters and the
// current_block stays untouched by outside handlers for the duration of this function call.
inline void trapezoid_generator_tick() {     
  if (current_block) {
    2b9c:	e0 91 dd 03 	lds	r30, 0x03DD
    2ba0:	f0 91 de 03 	lds	r31, 0x03DE
    2ba4:	30 97       	sbiw	r30, 0x00	; 0
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <__vector_17+0x3aa>
    2ba8:	a3 c0       	rjmp	.+326    	; 0x2cf0 <__vector_17+0x4f0>
    if (step_events_completed < current_block->accelerate_until) {
    2baa:	e0 90 f1 03 	lds	r14, 0x03F1
    2bae:	f0 90 f2 03 	lds	r15, 0x03F2
    2bb2:	00 91 f3 03 	lds	r16, 0x03F3
    2bb6:	10 91 f4 03 	lds	r17, 0x03F4
    2bba:	ef 5b       	subi	r30, 0xBF	; 191
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	a2 81       	ldd	r26, Z+2	; 0x02
    2bc4:	b3 81       	ldd	r27, Z+3	; 0x03
    2bc6:	e1 54       	subi	r30, 0x41	; 65
    2bc8:	f0 40       	sbci	r31, 0x00	; 0
    2bca:	e8 16       	cp	r14, r24
    2bcc:	f9 06       	cpc	r15, r25
    2bce:	0a 07       	cpc	r16, r26
    2bd0:	1b 07       	cpc	r17, r27
    2bd2:	68 f5       	brcc	.+90     	; 0x2c2e <__vector_17+0x42e>
      trapezoid_adjusted_rate += current_block->rate_delta;
    2bd4:	fd 96       	adiw	r30, 0x3d	; 61
    2bd6:	20 81       	ld	r18, Z
    2bd8:	31 81       	ldd	r19, Z+1	; 0x01
    2bda:	42 81       	ldd	r20, Z+2	; 0x02
    2bdc:	53 81       	ldd	r21, Z+3	; 0x03
    2bde:	fd 97       	sbiw	r30, 0x3d	; 61
    2be0:	80 91 ff 03 	lds	r24, 0x03FF
    2be4:	90 91 00 04 	lds	r25, 0x0400
    2be8:	a0 91 01 04 	lds	r26, 0x0401
    2bec:	b0 91 02 04 	lds	r27, 0x0402
    2bf0:	28 0f       	add	r18, r24
    2bf2:	39 1f       	adc	r19, r25
    2bf4:	4a 1f       	adc	r20, r26
    2bf6:	5b 1f       	adc	r21, r27
    2bf8:	20 93 ff 03 	sts	0x03FF, r18
    2bfc:	30 93 00 04 	sts	0x0400, r19
    2c00:	40 93 01 04 	sts	0x0401, r20
    2c04:	50 93 02 04 	sts	0x0402, r21
      if (trapezoid_adjusted_rate > current_block->nominal_rate ) {
    2c08:	85 89       	ldd	r24, Z+21	; 0x15
    2c0a:	96 89       	ldd	r25, Z+22	; 0x16
    2c0c:	a7 89       	ldd	r26, Z+23	; 0x17
    2c0e:	b0 8d       	ldd	r27, Z+24	; 0x18
    2c10:	82 17       	cp	r24, r18
    2c12:	93 07       	cpc	r25, r19
    2c14:	a4 07       	cpc	r26, r20
    2c16:	b5 07       	cpc	r27, r21
    2c18:	08 f0       	brcs	.+2      	; 0x2c1c <__vector_17+0x41c>
    2c1a:	4e c0       	rjmp	.+156    	; 0x2cb8 <__vector_17+0x4b8>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    2c1c:	80 93 ff 03 	sts	0x03FF, r24
    2c20:	90 93 00 04 	sts	0x0400, r25
    2c24:	a0 93 01 04 	sts	0x0401, r26
    2c28:	b0 93 02 04 	sts	0x0402, r27
    2c2c:	45 c0       	rjmp	.+138    	; 0x2cb8 <__vector_17+0x4b8>
      }
      set_step_events_per_minute(trapezoid_adjusted_rate);
    } else if (step_events_completed > current_block->decelerate_after) {
    2c2e:	eb 5b       	subi	r30, 0xBB	; 187
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	a2 81       	ldd	r26, Z+2	; 0x02
    2c38:	b3 81       	ldd	r27, Z+3	; 0x03
    2c3a:	e5 54       	subi	r30, 0x45	; 69
    2c3c:	f0 40       	sbci	r31, 0x00	; 0
    2c3e:	20 91 ff 03 	lds	r18, 0x03FF
    2c42:	30 91 00 04 	lds	r19, 0x0400
    2c46:	40 91 01 04 	lds	r20, 0x0401
    2c4a:	50 91 02 04 	lds	r21, 0x0402
    2c4e:	8e 15       	cp	r24, r14
    2c50:	9f 05       	cpc	r25, r15
    2c52:	a0 07       	cpc	r26, r16
    2c54:	b1 07       	cpc	r27, r17
    2c56:	c8 f5       	brcc	.+114    	; 0x2cca <__vector_17+0x4ca>
      // NOTE: We will only reduce speed if the result will be > 0. This catches small
      // rounding errors that might leave steps hanging after the last trapezoid tick.
      if (trapezoid_adjusted_rate > current_block->rate_delta) {
    2c58:	fd 96       	adiw	r30, 0x3d	; 61
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	a2 81       	ldd	r26, Z+2	; 0x02
    2c60:	b3 81       	ldd	r27, Z+3	; 0x03
    2c62:	fd 97       	sbiw	r30, 0x3d	; 61
    2c64:	82 17       	cp	r24, r18
    2c66:	93 07       	cpc	r25, r19
    2c68:	a4 07       	cpc	r26, r20
    2c6a:	b5 07       	cpc	r27, r21
    2c6c:	60 f4       	brcc	.+24     	; 0x2c86 <__vector_17+0x486>
        trapezoid_adjusted_rate -= current_block->rate_delta;
    2c6e:	28 1b       	sub	r18, r24
    2c70:	39 0b       	sbc	r19, r25
    2c72:	4a 0b       	sbc	r20, r26
    2c74:	5b 0b       	sbc	r21, r27
    2c76:	20 93 ff 03 	sts	0x03FF, r18
    2c7a:	30 93 00 04 	sts	0x0400, r19
    2c7e:	40 93 01 04 	sts	0x0401, r20
    2c82:	50 93 02 04 	sts	0x0402, r21
      }
      if (trapezoid_adjusted_rate < current_block->final_rate) {
    2c86:	21 ad       	ldd	r18, Z+57	; 0x39
    2c88:	32 ad       	ldd	r19, Z+58	; 0x3a
    2c8a:	43 ad       	ldd	r20, Z+59	; 0x3b
    2c8c:	54 ad       	ldd	r21, Z+60	; 0x3c
    2c8e:	80 91 ff 03 	lds	r24, 0x03FF
    2c92:	90 91 00 04 	lds	r25, 0x0400
    2c96:	a0 91 01 04 	lds	r26, 0x0401
    2c9a:	b0 91 02 04 	lds	r27, 0x0402
    2c9e:	82 17       	cp	r24, r18
    2ca0:	93 07       	cpc	r25, r19
    2ca2:	a4 07       	cpc	r26, r20
    2ca4:	b5 07       	cpc	r27, r21
    2ca6:	40 f4       	brcc	.+16     	; 0x2cb8 <__vector_17+0x4b8>
        trapezoid_adjusted_rate = current_block->final_rate;
    2ca8:	20 93 ff 03 	sts	0x03FF, r18
    2cac:	30 93 00 04 	sts	0x0400, r19
    2cb0:	40 93 01 04 	sts	0x0401, r20
    2cb4:	50 93 02 04 	sts	0x0402, r21
      }        
      set_step_events_per_minute(trapezoid_adjusted_rate);
    2cb8:	60 91 ff 03 	lds	r22, 0x03FF
    2cbc:	70 91 00 04 	lds	r23, 0x0400
    2cc0:	80 91 01 04 	lds	r24, 0x0401
    2cc4:	90 91 02 04 	lds	r25, 0x0402
    2cc8:	11 c0       	rjmp	.+34     	; 0x2cec <__vector_17+0x4ec>
    } else {
      // Make sure we cruise at exactly nominal rate
      if (trapezoid_adjusted_rate != current_block->nominal_rate) {
    2cca:	65 89       	ldd	r22, Z+21	; 0x15
    2ccc:	76 89       	ldd	r23, Z+22	; 0x16
    2cce:	87 89       	ldd	r24, Z+23	; 0x17
    2cd0:	90 8d       	ldd	r25, Z+24	; 0x18
    2cd2:	26 17       	cp	r18, r22
    2cd4:	37 07       	cpc	r19, r23
    2cd6:	48 07       	cpc	r20, r24
    2cd8:	59 07       	cpc	r21, r25
    2cda:	51 f0       	breq	.+20     	; 0x2cf0 <__vector_17+0x4f0>
        trapezoid_adjusted_rate = current_block->nominal_rate;
    2cdc:	60 93 ff 03 	sts	0x03FF, r22
    2ce0:	70 93 00 04 	sts	0x0400, r23
    2ce4:	80 93 01 04 	sts	0x0401, r24
    2ce8:	90 93 02 04 	sts	0x0402, r25
        set_step_events_per_minute(trapezoid_adjusted_rate);
    2cec:	0e 94 8d 13 	call	0x271a	; 0x271a <set_step_events_per_minute>
  if(trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    trapezoid_generator_tick();
  }
  
  busy=FALSE;
    2cf0:	10 92 f6 03 	sts	0x03F6, r1
    2cf4:	10 92 f5 03 	sts	0x03F5, r1
}
    2cf8:	ff 91       	pop	r31
    2cfa:	ef 91       	pop	r30
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	bf 91       	pop	r27
    2d02:	af 91       	pop	r26
    2d04:	9f 91       	pop	r25
    2d06:	8f 91       	pop	r24
    2d08:	7f 91       	pop	r23
    2d0a:	6f 91       	pop	r22
    2d0c:	5f 91       	pop	r21
    2d0e:	4f 91       	pop	r20
    2d10:	3f 91       	pop	r19
    2d12:	2f 91       	pop	r18
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	0f 90       	pop	r0
    2d1e:	0b be       	out	0x3b, r0	; 59
    2d20:	0f 90       	pop	r0
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	0f 90       	pop	r0
    2d26:	1f 90       	pop	r1
    2d28:	18 95       	reti

00002d2a <beginSerial>:

int rx_buffer_head = 0;
int rx_buffer_tail = 0;

void beginSerial(long baud)
{
    2d2a:	ef 92       	push	r14
    2d2c:	ff 92       	push	r15
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
    2d32:	7b 01       	movw	r14, r22
    2d34:	8c 01       	movw	r16, r24
	UBRR0H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
    2d36:	22 e0       	ldi	r18, 0x02	; 2
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <__divmodsi4>
    2d42:	20 5c       	subi	r18, 0xC0	; 192
    2d44:	3d 4b       	sbci	r19, 0xBD	; 189
    2d46:	40 4f       	sbci	r20, 0xF0	; 240
    2d48:	5f 4f       	sbci	r21, 0xFF	; 255
    2d4a:	ca 01       	movw	r24, r20
    2d4c:	b9 01       	movw	r22, r18
    2d4e:	a8 01       	movw	r20, r16
    2d50:	97 01       	movw	r18, r14
    2d52:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodsi4>
    2d56:	c9 01       	movw	r24, r18
    2d58:	da 01       	movw	r26, r20
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	a1 09       	sbc	r26, r1
    2d5e:	b1 09       	sbc	r27, r1
    2d60:	29 2f       	mov	r18, r25
    2d62:	3a 2f       	mov	r19, r26
    2d64:	4b 2f       	mov	r20, r27
    2d66:	55 27       	eor	r21, r21
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	a1 1d       	adc	r26, r1
    2d6c:	b1 1d       	adc	r27, r1
    2d6e:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = ((F_CPU / 16 + baud / 2) / baud - 1);
    2d72:	81 50       	subi	r24, 0x01	; 1
    2d74:	80 93 c4 00 	sts	0x00C4, r24
	
	/* baud doubler off  - Only needed on Uno XXX */
  UCSR0A &= ~(1 << U2X0);
    2d78:	e0 ec       	ldi	r30, 0xC0	; 192
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	8d 7f       	andi	r24, 0xFD	; 253
    2d80:	80 83       	st	Z, r24
          
	// enable rx and tx
  UCSR0B |= 1<<RXEN0;
    2d82:	e1 ec       	ldi	r30, 0xC1	; 193
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	80 61       	ori	r24, 0x10	; 16
    2d8a:	80 83       	st	Z, r24
  UCSR0B |= 1<<TXEN0;
    2d8c:	80 81       	ld	r24, Z
    2d8e:	88 60       	ori	r24, 0x08	; 8
    2d90:	80 83       	st	Z, r24
	
	// enable interrupt on complete reception of a byte
  UCSR0B |= 1<<RXCIE0;
    2d92:	80 81       	ld	r24, Z
    2d94:	80 68       	ori	r24, 0x80	; 128
    2d96:	80 83       	st	Z, r24
	
	// defaults to 8-bit, no parity, 1 stop bit
}
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	ff 90       	pop	r15
    2d9e:	ef 90       	pop	r14
    2da0:	08 95       	ret

00002da2 <serialWrite>:

void serialWrite(unsigned char c)
{
    2da2:	98 2f       	mov	r25, r24
	while (!(UCSR0A & (1 << UDRE0)))
    2da4:	80 91 c0 00 	lds	r24, 0x00C0
    2da8:	85 ff       	sbrs	r24, 5
    2daa:	fc cf       	rjmp	.-8      	; 0x2da4 <serialWrite+0x2>
		;
	UDR0 = c;
    2dac:	90 93 c6 00 	sts	0x00C6, r25
}
    2db0:	08 95       	ret

00002db2 <serialAvailable>:

int serialAvailable()
{
    2db2:	80 91 03 04 	lds	r24, 0x0403
    2db6:	90 91 04 04 	lds	r25, 0x0404
    2dba:	80 5c       	subi	r24, 0xC0	; 192
    2dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbe:	20 91 05 04 	lds	r18, 0x0405
    2dc2:	30 91 06 04 	lds	r19, 0x0406
    2dc6:	82 1b       	sub	r24, r18
    2dc8:	93 0b       	sbc	r25, r19
    2dca:	60 e4       	ldi	r22, 0x40	; 64
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
	return (RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail) % RX_BUFFER_SIZE;
}
    2dd2:	08 95       	ret

00002dd4 <serialRead>:

int serialRead()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rx_buffer_head == rx_buffer_tail) {
    2dd4:	40 91 05 04 	lds	r20, 0x0405
    2dd8:	50 91 06 04 	lds	r21, 0x0406
    2ddc:	80 91 03 04 	lds	r24, 0x0403
    2de0:	90 91 04 04 	lds	r25, 0x0404
    2de4:	84 17       	cp	r24, r20
    2de6:	95 07       	cpc	r25, r21
    2de8:	19 f4       	brne	.+6      	; 0x2df0 <serialRead+0x1c>
    2dea:	2f ef       	ldi	r18, 0xFF	; 255
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	0f c0       	rjmp	.+30     	; 0x2e0e <serialRead+0x3a>
		return -1;
	} else {
		unsigned char c = rx_buffer[rx_buffer_tail];
    2df0:	fa 01       	movw	r30, r20
    2df2:	e9 5f       	subi	r30, 0xF9	; 249
    2df4:	fb 4f       	sbci	r31, 0xFB	; 251
    2df6:	20 81       	ld	r18, Z
		rx_buffer_tail = (rx_buffer_tail + 1) % RX_BUFFER_SIZE;
    2df8:	ca 01       	movw	r24, r20
    2dfa:	01 96       	adiw	r24, 0x01	; 1
    2dfc:	60 e4       	ldi	r22, 0x40	; 64
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    2e04:	90 93 06 04 	sts	0x0406, r25
    2e08:	80 93 05 04 	sts	0x0405, r24
		return c;
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    2e0e:	c9 01       	movw	r24, r18
    2e10:	08 95       	ret

00002e12 <serialFlush>:
	// don't reverse this or there may be problems if the RX interrupt
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.
	rx_buffer_head = rx_buffer_tail;
    2e12:	80 91 05 04 	lds	r24, 0x0405
    2e16:	90 91 06 04 	lds	r25, 0x0406
    2e1a:	90 93 04 04 	sts	0x0404, r25
    2e1e:	80 93 03 04 	sts	0x0403, r24
}
    2e22:	08 95       	ret

00002e24 <__vector_25>:

//change for atmega2560
SIGNAL(USART0_RX_vect)
{
    2e24:	1f 92       	push	r1
    2e26:	0f 92       	push	r0
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	0f 92       	push	r0
    2e2c:	0b b6       	in	r0, 0x3b	; 59
    2e2e:	0f 92       	push	r0
    2e30:	11 24       	eor	r1, r1
    2e32:	2f 93       	push	r18
    2e34:	3f 93       	push	r19
    2e36:	4f 93       	push	r20
    2e38:	5f 93       	push	r21
    2e3a:	6f 93       	push	r22
    2e3c:	7f 93       	push	r23
    2e3e:	8f 93       	push	r24
    2e40:	9f 93       	push	r25
    2e42:	af 93       	push	r26
    2e44:	bf 93       	push	r27
    2e46:	ef 93       	push	r30
    2e48:	ff 93       	push	r31
	unsigned char c = UDR0;
    2e4a:	40 91 c6 00 	lds	r20, 0x00C6
	int i = (rx_buffer_head + 1) % RX_BUFFER_SIZE;
    2e4e:	e0 91 03 04 	lds	r30, 0x0403
    2e52:	f0 91 04 04 	lds	r31, 0x0404
    2e56:	cf 01       	movw	r24, r30
    2e58:	01 96       	adiw	r24, 0x01	; 1
    2e5a:	60 e4       	ldi	r22, 0x40	; 64
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__divmodhi4>
    2e62:	9c 01       	movw	r18, r24

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != rx_buffer_tail) {
    2e64:	80 91 05 04 	lds	r24, 0x0405
    2e68:	90 91 06 04 	lds	r25, 0x0406
    2e6c:	28 17       	cp	r18, r24
    2e6e:	39 07       	cpc	r19, r25
    2e70:	39 f0       	breq	.+14     	; 0x2e80 <__vector_25+0x5c>
		rx_buffer[rx_buffer_head] = c;
    2e72:	e9 5f       	subi	r30, 0xF9	; 249
    2e74:	fb 4f       	sbci	r31, 0xFB	; 251
    2e76:	40 83       	st	Z, r20
		rx_buffer_head = i;
    2e78:	30 93 04 04 	sts	0x0404, r19
    2e7c:	20 93 03 04 	sts	0x0403, r18
	}

//	UDR0 = c; // Echo back the received byte back to the computer 

}
    2e80:	ff 91       	pop	r31
    2e82:	ef 91       	pop	r30
    2e84:	bf 91       	pop	r27
    2e86:	af 91       	pop	r26
    2e88:	9f 91       	pop	r25
    2e8a:	8f 91       	pop	r24
    2e8c:	7f 91       	pop	r23
    2e8e:	6f 91       	pop	r22
    2e90:	5f 91       	pop	r21
    2e92:	4f 91       	pop	r20
    2e94:	3f 91       	pop	r19
    2e96:	2f 91       	pop	r18
    2e98:	0f 90       	pop	r0
    2e9a:	0b be       	out	0x3b, r0	; 59
    2e9c:	0f 90       	pop	r0
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	0f 90       	pop	r0
    2ea2:	1f 90       	pop	r1
    2ea4:	18 95       	reti

00002ea6 <printByte>:
// {
//  // do nothing, we only support serial printing, not lcd.
// }

void printByte(unsigned char c)
{
    2ea6:	98 2f       	mov	r25, r24
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    2ea8:	80 91 c0 00 	lds	r24, 0x00C0
    2eac:	85 ff       	sbrs	r24, 5
    2eae:	fc cf       	rjmp	.-8      	; 0x2ea8 <printByte+0x2>
		;
	UDR0 = c;
    2eb0:	90 93 c6 00 	sts	0x00C6, r25
// }

void printByte(unsigned char c)
{
	serialWrite(c);
}
    2eb4:	08 95       	ret

00002eb6 <printString>:
// {
//  printByte('\n');
// }
// 
void printString(const char *s)
{
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	07 c0       	rjmp	.+14     	; 0x2ec8 <printString+0x12>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    2eba:	80 91 c0 00 	lds	r24, 0x00C0
    2ebe:	85 ff       	sbrs	r24, 5
    2ec0:	fc cf       	rjmp	.-8      	; 0x2eba <printString+0x4>
// }
// 
void printString(const char *s)
{
	while (*s)
		printByte(*s++);
    2ec2:	31 96       	adiw	r30, 0x01	; 1

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
		;
	UDR0 = c;
    2ec4:	90 93 c6 00 	sts	0x00C6, r25
//  printByte('\n');
// }
// 
void printString(const char *s)
{
	while (*s)
    2ec8:	90 81       	ld	r25, Z
    2eca:	99 23       	and	r25, r25
    2ecc:	b1 f7       	brne	.-20     	; 0x2eba <printString+0x4>
		printByte(*s++);
}
    2ece:	08 95       	ret

00002ed0 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    2ed0:	9c 01       	movw	r18, r24
    2ed2:	06 c0       	rjmp	.+12     	; 0x2ee0 <printPgmString+0x10>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    2ed4:	80 91 c0 00 	lds	r24, 0x00C0
    2ed8:	85 ff       	sbrs	r24, 5
    2eda:	fc cf       	rjmp	.-8      	; 0x2ed4 <printPgmString+0x4>
		;
	UDR0 = c;
    2edc:	90 93 c6 00 	sts	0x00C6, r25
    2ee0:	f9 01       	movw	r30, r18

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
	while ((c = pgm_read_byte_near(s++)))
    2ee2:	2f 5f       	subi	r18, 0xFF	; 255
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	94 91       	lpm	r25, Z+
    2ee8:	99 23       	and	r25, r25
    2eea:	a1 f7       	brne	.-24     	; 0x2ed4 <printPgmString+0x4>
		printByte(c);
}
    2eec:	08 95       	ret

00002eee <printIntegerInBase>:

void printIntegerInBase(unsigned long n, unsigned long base)
{ 
    2eee:	2f 92       	push	r2
    2ef0:	3f 92       	push	r3
    2ef2:	4f 92       	push	r4
    2ef4:	5f 92       	push	r5
    2ef6:	6f 92       	push	r6
    2ef8:	7f 92       	push	r7
    2efa:	8f 92       	push	r8
    2efc:	9f 92       	push	r9
    2efe:	af 92       	push	r10
    2f00:	bf 92       	push	r11
    2f02:	cf 92       	push	r12
    2f04:	df 92       	push	r13
    2f06:	ef 92       	push	r14
    2f08:	ff 92       	push	r15
    2f0a:	0f 93       	push	r16
    2f0c:	1f 93       	push	r17
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	a0 97       	sbiw	r28, 0x20	; 32
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	6b 01       	movw	r12, r22
    2f24:	7c 01       	movw	r14, r24
    2f26:	29 01       	movw	r4, r18
    2f28:	3a 01       	movw	r6, r20
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
    2f2a:	61 15       	cp	r22, r1
    2f2c:	71 05       	cpc	r23, r1
    2f2e:	81 05       	cpc	r24, r1
    2f30:	91 05       	cpc	r25, r1
    2f32:	41 f4       	brne	.+16     	; 0x2f44 <printIntegerInBase+0x56>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    2f34:	80 91 c0 00 	lds	r24, 0x00C0
    2f38:	85 ff       	sbrs	r24, 5
    2f3a:	fc cf       	rjmp	.-8      	; 0x2f34 <printIntegerInBase+0x46>
		;
	UDR0 = c;
    2f3c:	80 e3       	ldi	r24, 0x30	; 48
    2f3e:	80 93 c6 00 	sts	0x00C6, r24
    2f42:	49 c0       	rjmp	.+146    	; 0x2fd6 <printIntegerInBase+0xe8>
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
	unsigned long i = 0;

	if (n == 0) {
		printByte('0');
		return;
    2f44:	88 24       	eor	r8, r8
    2f46:	99 24       	eor	r9, r9
    2f48:	54 01       	movw	r10, r8
	} 

	while (n > 0) {
		buf[i++] = n % base;
    2f4a:	1e 01       	movw	r2, r28
    2f4c:	08 94       	sec
    2f4e:	21 1c       	adc	r2, r1
    2f50:	31 1c       	adc	r3, r1
    2f52:	81 01       	movw	r16, r2
    2f54:	08 0d       	add	r16, r8
    2f56:	19 1d       	adc	r17, r9
    2f58:	c7 01       	movw	r24, r14
    2f5a:	b6 01       	movw	r22, r12
    2f5c:	a3 01       	movw	r20, r6
    2f5e:	92 01       	movw	r18, r4
    2f60:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodsi4>
    2f64:	f8 01       	movw	r30, r16
    2f66:	60 83       	st	Z, r22
    2f68:	08 94       	sec
    2f6a:	81 1c       	adc	r8, r1
    2f6c:	91 1c       	adc	r9, r1
    2f6e:	a1 1c       	adc	r10, r1
    2f70:	b1 1c       	adc	r11, r1
		n /= base;
    2f72:	c7 01       	movw	r24, r14
    2f74:	b6 01       	movw	r22, r12
    2f76:	a3 01       	movw	r20, r6
    2f78:	92 01       	movw	r18, r4
    2f7a:	0e 94 3e 1c 	call	0x387c	; 0x387c <__udivmodsi4>
    2f7e:	c9 01       	movw	r24, r18
    2f80:	da 01       	movw	r26, r20
    2f82:	6c 01       	movw	r12, r24
    2f84:	7d 01       	movw	r14, r26
	if (n == 0) {
		printByte('0');
		return;
	} 

	while (n > 0) {
    2f86:	c1 14       	cp	r12, r1
    2f88:	d1 04       	cpc	r13, r1
    2f8a:	e1 04       	cpc	r14, r1
    2f8c:	f1 04       	cpc	r15, r1
    2f8e:	09 f7       	brne	.-62     	; 0x2f52 <printIntegerInBase+0x64>
    2f90:	91 01       	movw	r18, r2
    2f92:	28 0d       	add	r18, r8
    2f94:	39 1d       	adc	r19, r9
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    2f96:	be 01       	movw	r22, r28
    2f98:	6f 5f       	subi	r22, 0xFF	; 255
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255
		printByte(buf[i - 1] < 10 ?
    2f9c:	d5 01       	movw	r26, r10
    2f9e:	c4 01       	movw	r24, r8
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	a1 09       	sbc	r26, r1
    2fa4:	b1 09       	sbc	r27, r1
    2fa6:	ac 01       	movw	r20, r24
    2fa8:	48 19       	sub	r20, r8
    2faa:	59 09       	sbc	r21, r9
    2fac:	11 c0       	rjmp	.+34     	; 0x2fd0 <printIntegerInBase+0xe2>
    2fae:	fa 01       	movw	r30, r20
    2fb0:	e2 0f       	add	r30, r18
    2fb2:	f3 1f       	adc	r31, r19
    2fb4:	e0 81       	ld	r30, Z
    2fb6:	ea 30       	cpi	r30, 0x0A	; 10
    2fb8:	10 f4       	brcc	.+4      	; 0x2fbe <printIntegerInBase+0xd0>
    2fba:	e0 5d       	subi	r30, 0xD0	; 208
    2fbc:	01 c0       	rjmp	.+2      	; 0x2fc0 <printIntegerInBase+0xd2>
    2fbe:	e9 5c       	subi	r30, 0xC9	; 201
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    2fc0:	80 91 c0 00 	lds	r24, 0x00C0
    2fc4:	85 ff       	sbrs	r24, 5
    2fc6:	fc cf       	rjmp	.-8      	; 0x2fc0 <printIntegerInBase+0xd2>
		;
	UDR0 = c;
    2fc8:	e0 93 c6 00 	sts	0x00C6, r30
    2fcc:	21 50       	subi	r18, 0x01	; 1
    2fce:	30 40       	sbci	r19, 0x00	; 0
	while (n > 0) {
		buf[i++] = n % base;
		n /= base;
	}

	for (; i > 0; i--)
    2fd0:	62 17       	cp	r22, r18
    2fd2:	73 07       	cpc	r23, r19
    2fd4:	61 f7       	brne	.-40     	; 0x2fae <printIntegerInBase+0xc0>
		printByte(buf[i - 1] < 10 ?
			'0' + buf[i - 1] :
			'A' + buf[i - 1] - 10);
}
    2fd6:	a0 96       	adiw	r28, 0x20	; 32
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	ff 90       	pop	r15
    2fec:	ef 90       	pop	r14
    2fee:	df 90       	pop	r13
    2ff0:	cf 90       	pop	r12
    2ff2:	bf 90       	pop	r11
    2ff4:	af 90       	pop	r10
    2ff6:	9f 90       	pop	r9
    2ff8:	8f 90       	pop	r8
    2ffa:	7f 90       	pop	r7
    2ffc:	6f 90       	pop	r6
    2ffe:	5f 90       	pop	r5
    3000:	4f 90       	pop	r4
    3002:	3f 90       	pop	r3
    3004:	2f 90       	pop	r2
    3006:	08 95       	ret

00003008 <printInteger>:

void printInteger(long n)
{
    3008:	9b 01       	movw	r18, r22
    300a:	ac 01       	movw	r20, r24
	if (n < 0) {
    300c:	97 ff       	sbrs	r25, 7
    300e:	0e c0       	rjmp	.+28     	; 0x302c <printInteger+0x24>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3010:	80 91 c0 00 	lds	r24, 0x00C0
    3014:	85 ff       	sbrs	r24, 5
    3016:	fc cf       	rjmp	.-8      	; 0x3010 <printInteger+0x8>
		;
	UDR0 = c;
    3018:	8d e2       	ldi	r24, 0x2D	; 45
    301a:	80 93 c6 00 	sts	0x00C6, r24

void printInteger(long n)
{
	if (n < 0) {
		printByte('-');
		n = -n;
    301e:	50 95       	com	r21
    3020:	40 95       	com	r20
    3022:	30 95       	com	r19
    3024:	21 95       	neg	r18
    3026:	3f 4f       	sbci	r19, 0xFF	; 255
    3028:	4f 4f       	sbci	r20, 0xFF	; 255
    302a:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	printIntegerInBase(n, 10);
    302c:	ca 01       	movw	r24, r20
    302e:	b9 01       	movw	r22, r18
    3030:	2a e0       	ldi	r18, 0x0A	; 10
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	50 e0       	ldi	r21, 0x00	; 0
    3038:	0e 94 77 17 	call	0x2eee	; 0x2eee <printIntegerInBase>
}
    303c:	08 95       	ret

0000303e <printFloat>:

void printFloat(double n)
{
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	00 d0       	rcall	.+0      	; 0x304c <printFloat+0xe>
    304c:	0f 92       	push	r0
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
    3052:	ae 01       	movw	r20, r28
    3054:	4f 5f       	subi	r20, 0xFF	; 255
    3056:	5f 4f       	sbci	r21, 0xFF	; 255
    3058:	0e 94 03 1b 	call	0x3606	; 0x3606 <modf>
    305c:	7b 01       	movw	r14, r22
    305e:	8c 01       	movw	r16, r24
  printInteger(integer_part);
    3060:	69 81       	ldd	r22, Y+1	; 0x01
    3062:	7a 81       	ldd	r23, Y+2	; 0x02
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	9c 81       	ldd	r25, Y+4	; 0x04
    3068:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
    306c:	0e 94 04 18 	call	0x3008	; 0x3008 <printInteger>
	// defaults to 8-bit, no parity, 1 stop bit
}

void serialWrite(unsigned char c)
{
	while (!(UCSR0A & (1 << UDRE0)))
    3070:	80 91 c0 00 	lds	r24, 0x00C0
    3074:	85 ff       	sbrs	r24, 5
    3076:	fc cf       	rjmp	.-8      	; 0x3070 <printFloat+0x32>
		;
	UDR0 = c;
    3078:	8e e2       	ldi	r24, 0x2E	; 46
    307a:	80 93 c6 00 	sts	0x00C6, r24
{
  double integer_part, fractional_part;
  fractional_part = modf(n, &integer_part);
  printInteger(integer_part);
  printByte('.');
  printInteger(labs(round(fractional_part*1000)));
    307e:	c8 01       	movw	r24, r16
    3080:	b7 01       	movw	r22, r14
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	4a e7       	ldi	r20, 0x7A	; 122
    3088:	54 e4       	ldi	r21, 0x44	; 68
    308a:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    308e:	0e 94 99 1b 	call	0x3732	; 0x3732 <round>
    3092:	0e 94 6d 19 	call	0x32da	; 0x32da <__fixsfsi>
    3096:	97 ff       	sbrs	r25, 7
    3098:	07 c0       	rjmp	.+14     	; 0x30a8 <printFloat+0x6a>
    309a:	90 95       	com	r25
    309c:	80 95       	com	r24
    309e:	70 95       	com	r23
    30a0:	61 95       	neg	r22
    30a2:	7f 4f       	sbci	r23, 0xFF	; 255
    30a4:	8f 4f       	sbci	r24, 0xFF	; 255
    30a6:	9f 4f       	sbci	r25, 0xFF	; 255
    30a8:	0e 94 04 18 	call	0x3008	; 0x3008 <printInteger>
}
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	ff 90       	pop	r15
    30be:	ef 90       	pop	r14
    30c0:	08 95       	ret

000030c2 <__subsf3>:
    30c2:	50 58       	subi	r21, 0x80	; 128

000030c4 <__addsf3>:
    30c4:	bb 27       	eor	r27, r27
    30c6:	aa 27       	eor	r26, r26
    30c8:	0e d0       	rcall	.+28     	; 0x30e6 <__addsf3x>
    30ca:	11 c2       	rjmp	.+1058   	; 0x34ee <__fp_round>
    30cc:	02 d2       	rcall	.+1028   	; 0x34d2 <__fp_pscA>
    30ce:	30 f0       	brcs	.+12     	; 0x30dc <__addsf3+0x18>
    30d0:	07 d2       	rcall	.+1038   	; 0x34e0 <__fp_pscB>
    30d2:	20 f0       	brcs	.+8      	; 0x30dc <__addsf3+0x18>
    30d4:	31 f4       	brne	.+12     	; 0x30e2 <__addsf3+0x1e>
    30d6:	9f 3f       	cpi	r25, 0xFF	; 255
    30d8:	11 f4       	brne	.+4      	; 0x30de <__addsf3+0x1a>
    30da:	1e f4       	brtc	.+6      	; 0x30e2 <__addsf3+0x1e>
    30dc:	d2 c1       	rjmp	.+932    	; 0x3482 <__fp_nan>
    30de:	0e f4       	brtc	.+2      	; 0x30e2 <__addsf3+0x1e>
    30e0:	e0 95       	com	r30
    30e2:	e7 fb       	bst	r30, 7
    30e4:	9f c1       	rjmp	.+830    	; 0x3424 <__fp_inf>

000030e6 <__addsf3x>:
    30e6:	e9 2f       	mov	r30, r25
    30e8:	13 d2       	rcall	.+1062   	; 0x3510 <__fp_split3>
    30ea:	80 f3       	brcs	.-32     	; 0x30cc <__addsf3+0x8>
    30ec:	ba 17       	cp	r27, r26
    30ee:	62 07       	cpc	r22, r18
    30f0:	73 07       	cpc	r23, r19
    30f2:	84 07       	cpc	r24, r20
    30f4:	95 07       	cpc	r25, r21
    30f6:	18 f0       	brcs	.+6      	; 0x30fe <__addsf3x+0x18>
    30f8:	71 f4       	brne	.+28     	; 0x3116 <__addsf3x+0x30>
    30fa:	9e f5       	brtc	.+102    	; 0x3162 <__addsf3x+0x7c>
    30fc:	42 c2       	rjmp	.+1156   	; 0x3582 <__fp_zero>
    30fe:	0e f4       	brtc	.+2      	; 0x3102 <__addsf3x+0x1c>
    3100:	e0 95       	com	r30
    3102:	0b 2e       	mov	r0, r27
    3104:	ba 2f       	mov	r27, r26
    3106:	a0 2d       	mov	r26, r0
    3108:	0b 01       	movw	r0, r22
    310a:	b9 01       	movw	r22, r18
    310c:	90 01       	movw	r18, r0
    310e:	0c 01       	movw	r0, r24
    3110:	ca 01       	movw	r24, r20
    3112:	a0 01       	movw	r20, r0
    3114:	11 24       	eor	r1, r1
    3116:	ff 27       	eor	r31, r31
    3118:	59 1b       	sub	r21, r25
    311a:	99 f0       	breq	.+38     	; 0x3142 <__addsf3x+0x5c>
    311c:	59 3f       	cpi	r21, 0xF9	; 249
    311e:	50 f4       	brcc	.+20     	; 0x3134 <__addsf3x+0x4e>
    3120:	50 3e       	cpi	r21, 0xE0	; 224
    3122:	68 f1       	brcs	.+90     	; 0x317e <__addsf3x+0x98>
    3124:	1a 16       	cp	r1, r26
    3126:	f0 40       	sbci	r31, 0x00	; 0
    3128:	a2 2f       	mov	r26, r18
    312a:	23 2f       	mov	r18, r19
    312c:	34 2f       	mov	r19, r20
    312e:	44 27       	eor	r20, r20
    3130:	58 5f       	subi	r21, 0xF8	; 248
    3132:	f3 cf       	rjmp	.-26     	; 0x311a <__addsf3x+0x34>
    3134:	46 95       	lsr	r20
    3136:	37 95       	ror	r19
    3138:	27 95       	ror	r18
    313a:	a7 95       	ror	r26
    313c:	f0 40       	sbci	r31, 0x00	; 0
    313e:	53 95       	inc	r21
    3140:	c9 f7       	brne	.-14     	; 0x3134 <__addsf3x+0x4e>
    3142:	7e f4       	brtc	.+30     	; 0x3162 <__addsf3x+0x7c>
    3144:	1f 16       	cp	r1, r31
    3146:	ba 0b       	sbc	r27, r26
    3148:	62 0b       	sbc	r22, r18
    314a:	73 0b       	sbc	r23, r19
    314c:	84 0b       	sbc	r24, r20
    314e:	ba f0       	brmi	.+46     	; 0x317e <__addsf3x+0x98>
    3150:	91 50       	subi	r25, 0x01	; 1
    3152:	a1 f0       	breq	.+40     	; 0x317c <__addsf3x+0x96>
    3154:	ff 0f       	add	r31, r31
    3156:	bb 1f       	adc	r27, r27
    3158:	66 1f       	adc	r22, r22
    315a:	77 1f       	adc	r23, r23
    315c:	88 1f       	adc	r24, r24
    315e:	c2 f7       	brpl	.-16     	; 0x3150 <__addsf3x+0x6a>
    3160:	0e c0       	rjmp	.+28     	; 0x317e <__addsf3x+0x98>
    3162:	ba 0f       	add	r27, r26
    3164:	62 1f       	adc	r22, r18
    3166:	73 1f       	adc	r23, r19
    3168:	84 1f       	adc	r24, r20
    316a:	48 f4       	brcc	.+18     	; 0x317e <__addsf3x+0x98>
    316c:	87 95       	ror	r24
    316e:	77 95       	ror	r23
    3170:	67 95       	ror	r22
    3172:	b7 95       	ror	r27
    3174:	f7 95       	ror	r31
    3176:	9e 3f       	cpi	r25, 0xFE	; 254
    3178:	08 f0       	brcs	.+2      	; 0x317c <__addsf3x+0x96>
    317a:	b3 cf       	rjmp	.-154    	; 0x30e2 <__addsf3+0x1e>
    317c:	93 95       	inc	r25
    317e:	88 0f       	add	r24, r24
    3180:	08 f0       	brcs	.+2      	; 0x3184 <__addsf3x+0x9e>
    3182:	99 27       	eor	r25, r25
    3184:	ee 0f       	add	r30, r30
    3186:	97 95       	ror	r25
    3188:	87 95       	ror	r24
    318a:	08 95       	ret

0000318c <atan>:
    318c:	df 93       	push	r29
    318e:	dd 27       	eor	r29, r29
    3190:	b9 2f       	mov	r27, r25
    3192:	bf 77       	andi	r27, 0x7F	; 127
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	16 16       	cp	r1, r22
    319a:	17 06       	cpc	r1, r23
    319c:	48 07       	cpc	r20, r24
    319e:	5b 07       	cpc	r21, r27
    31a0:	10 f4       	brcc	.+4      	; 0x31a6 <atan+0x1a>
    31a2:	d9 2f       	mov	r29, r25
    31a4:	f9 d1       	rcall	.+1010   	; 0x3598 <inverse>
    31a6:	9f 93       	push	r25
    31a8:	8f 93       	push	r24
    31aa:	7f 93       	push	r23
    31ac:	6f 93       	push	r22
    31ae:	23 d3       	rcall	.+1606   	; 0x37f6 <square>
    31b0:	e4 ee       	ldi	r30, 0xE4	; 228
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	69 d1       	rcall	.+722    	; 0x3488 <__fp_powser>
    31b6:	9b d1       	rcall	.+822    	; 0x34ee <__fp_round>
    31b8:	2f 91       	pop	r18
    31ba:	3f 91       	pop	r19
    31bc:	4f 91       	pop	r20
    31be:	5f 91       	pop	r21
    31c0:	61 d2       	rcall	.+1218   	; 0x3684 <__mulsf3x>
    31c2:	dd 23       	and	r29, r29
    31c4:	49 f0       	breq	.+18     	; 0x31d8 <atan+0x4c>
    31c6:	90 58       	subi	r25, 0x80	; 128
    31c8:	a2 ea       	ldi	r26, 0xA2	; 162
    31ca:	2a ed       	ldi	r18, 0xDA	; 218
    31cc:	3f e0       	ldi	r19, 0x0F	; 15
    31ce:	49 ec       	ldi	r20, 0xC9	; 201
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	d0 78       	andi	r29, 0x80	; 128
    31d4:	5d 27       	eor	r21, r29
    31d6:	87 df       	rcall	.-242    	; 0x30e6 <__addsf3x>
    31d8:	df 91       	pop	r29
    31da:	89 c1       	rjmp	.+786    	; 0x34ee <__fp_round>

000031dc <ceil>:
    31dc:	bb d1       	rcall	.+886    	; 0x3554 <__fp_trunc>
    31de:	80 f0       	brcs	.+32     	; 0x3200 <ceil+0x24>
    31e0:	9f 37       	cpi	r25, 0x7F	; 127
    31e2:	40 f4       	brcc	.+16     	; 0x31f4 <ceil+0x18>
    31e4:	91 11       	cpse	r25, r1
    31e6:	0e f4       	brtc	.+2      	; 0x31ea <ceil+0xe>
    31e8:	cd c1       	rjmp	.+922    	; 0x3584 <__fp_szero>
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	80 e8       	ldi	r24, 0x80	; 128
    31f0:	9f e3       	ldi	r25, 0x3F	; 63
    31f2:	08 95       	ret
    31f4:	26 f0       	brts	.+8      	; 0x31fe <ceil+0x22>
    31f6:	1b 16       	cp	r1, r27
    31f8:	61 1d       	adc	r22, r1
    31fa:	71 1d       	adc	r23, r1
    31fc:	81 1d       	adc	r24, r1
    31fe:	18 c1       	rjmp	.+560    	; 0x3430 <__fp_mintl>
    3200:	32 c1       	rjmp	.+612    	; 0x3466 <__fp_mpack>

00003202 <__cmpsf2>:
    3202:	ec d0       	rcall	.+472    	; 0x33dc <__fp_cmp>
    3204:	08 f4       	brcc	.+2      	; 0x3208 <__cmpsf2+0x6>
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	08 95       	ret

0000320a <__divsf3>:
    320a:	0c d0       	rcall	.+24     	; 0x3224 <__divsf3x>
    320c:	70 c1       	rjmp	.+736    	; 0x34ee <__fp_round>
    320e:	68 d1       	rcall	.+720    	; 0x34e0 <__fp_pscB>
    3210:	40 f0       	brcs	.+16     	; 0x3222 <__divsf3+0x18>
    3212:	5f d1       	rcall	.+702    	; 0x34d2 <__fp_pscA>
    3214:	30 f0       	brcs	.+12     	; 0x3222 <__divsf3+0x18>
    3216:	21 f4       	brne	.+8      	; 0x3220 <__divsf3+0x16>
    3218:	5f 3f       	cpi	r21, 0xFF	; 255
    321a:	19 f0       	breq	.+6      	; 0x3222 <__divsf3+0x18>
    321c:	03 c1       	rjmp	.+518    	; 0x3424 <__fp_inf>
    321e:	51 11       	cpse	r21, r1
    3220:	b1 c1       	rjmp	.+866    	; 0x3584 <__fp_szero>
    3222:	2f c1       	rjmp	.+606    	; 0x3482 <__fp_nan>

00003224 <__divsf3x>:
    3224:	75 d1       	rcall	.+746    	; 0x3510 <__fp_split3>
    3226:	98 f3       	brcs	.-26     	; 0x320e <__divsf3+0x4>

00003228 <__divsf3_pse>:
    3228:	99 23       	and	r25, r25
    322a:	c9 f3       	breq	.-14     	; 0x321e <__divsf3+0x14>
    322c:	55 23       	and	r21, r21
    322e:	b1 f3       	breq	.-20     	; 0x321c <__divsf3+0x12>
    3230:	95 1b       	sub	r25, r21
    3232:	55 0b       	sbc	r21, r21
    3234:	bb 27       	eor	r27, r27
    3236:	aa 27       	eor	r26, r26
    3238:	62 17       	cp	r22, r18
    323a:	73 07       	cpc	r23, r19
    323c:	84 07       	cpc	r24, r20
    323e:	38 f0       	brcs	.+14     	; 0x324e <__divsf3_pse+0x26>
    3240:	9f 5f       	subi	r25, 0xFF	; 255
    3242:	5f 4f       	sbci	r21, 0xFF	; 255
    3244:	22 0f       	add	r18, r18
    3246:	33 1f       	adc	r19, r19
    3248:	44 1f       	adc	r20, r20
    324a:	aa 1f       	adc	r26, r26
    324c:	a9 f3       	breq	.-22     	; 0x3238 <__divsf3_pse+0x10>
    324e:	33 d0       	rcall	.+102    	; 0x32b6 <__divsf3_pse+0x8e>
    3250:	0e 2e       	mov	r0, r30
    3252:	3a f0       	brmi	.+14     	; 0x3262 <__divsf3_pse+0x3a>
    3254:	e0 e8       	ldi	r30, 0x80	; 128
    3256:	30 d0       	rcall	.+96     	; 0x32b8 <__divsf3_pse+0x90>
    3258:	91 50       	subi	r25, 0x01	; 1
    325a:	50 40       	sbci	r21, 0x00	; 0
    325c:	e6 95       	lsr	r30
    325e:	00 1c       	adc	r0, r0
    3260:	ca f7       	brpl	.-14     	; 0x3254 <__divsf3_pse+0x2c>
    3262:	29 d0       	rcall	.+82     	; 0x32b6 <__divsf3_pse+0x8e>
    3264:	fe 2f       	mov	r31, r30
    3266:	27 d0       	rcall	.+78     	; 0x32b6 <__divsf3_pse+0x8e>
    3268:	66 0f       	add	r22, r22
    326a:	77 1f       	adc	r23, r23
    326c:	88 1f       	adc	r24, r24
    326e:	bb 1f       	adc	r27, r27
    3270:	26 17       	cp	r18, r22
    3272:	37 07       	cpc	r19, r23
    3274:	48 07       	cpc	r20, r24
    3276:	ab 07       	cpc	r26, r27
    3278:	b0 e8       	ldi	r27, 0x80	; 128
    327a:	09 f0       	breq	.+2      	; 0x327e <__divsf3_pse+0x56>
    327c:	bb 0b       	sbc	r27, r27
    327e:	80 2d       	mov	r24, r0
    3280:	bf 01       	movw	r22, r30
    3282:	ff 27       	eor	r31, r31
    3284:	93 58       	subi	r25, 0x83	; 131
    3286:	5f 4f       	sbci	r21, 0xFF	; 255
    3288:	2a f0       	brmi	.+10     	; 0x3294 <__divsf3_pse+0x6c>
    328a:	9e 3f       	cpi	r25, 0xFE	; 254
    328c:	51 05       	cpc	r21, r1
    328e:	68 f0       	brcs	.+26     	; 0x32aa <__divsf3_pse+0x82>
    3290:	c9 c0       	rjmp	.+402    	; 0x3424 <__fp_inf>
    3292:	78 c1       	rjmp	.+752    	; 0x3584 <__fp_szero>
    3294:	5f 3f       	cpi	r21, 0xFF	; 255
    3296:	ec f3       	brlt	.-6      	; 0x3292 <__divsf3_pse+0x6a>
    3298:	98 3e       	cpi	r25, 0xE8	; 232
    329a:	dc f3       	brlt	.-10     	; 0x3292 <__divsf3_pse+0x6a>
    329c:	86 95       	lsr	r24
    329e:	77 95       	ror	r23
    32a0:	67 95       	ror	r22
    32a2:	b7 95       	ror	r27
    32a4:	f7 95       	ror	r31
    32a6:	9f 5f       	subi	r25, 0xFF	; 255
    32a8:	c9 f7       	brne	.-14     	; 0x329c <__divsf3_pse+0x74>
    32aa:	88 0f       	add	r24, r24
    32ac:	91 1d       	adc	r25, r1
    32ae:	96 95       	lsr	r25
    32b0:	87 95       	ror	r24
    32b2:	97 f9       	bld	r25, 7
    32b4:	08 95       	ret
    32b6:	e1 e0       	ldi	r30, 0x01	; 1
    32b8:	66 0f       	add	r22, r22
    32ba:	77 1f       	adc	r23, r23
    32bc:	88 1f       	adc	r24, r24
    32be:	bb 1f       	adc	r27, r27
    32c0:	62 17       	cp	r22, r18
    32c2:	73 07       	cpc	r23, r19
    32c4:	84 07       	cpc	r24, r20
    32c6:	ba 07       	cpc	r27, r26
    32c8:	20 f0       	brcs	.+8      	; 0x32d2 <__divsf3_pse+0xaa>
    32ca:	62 1b       	sub	r22, r18
    32cc:	73 0b       	sbc	r23, r19
    32ce:	84 0b       	sbc	r24, r20
    32d0:	ba 0b       	sbc	r27, r26
    32d2:	ee 1f       	adc	r30, r30
    32d4:	88 f7       	brcc	.-30     	; 0x32b8 <__divsf3_pse+0x90>
    32d6:	e0 95       	com	r30
    32d8:	08 95       	ret

000032da <__fixsfsi>:
    32da:	04 d0       	rcall	.+8      	; 0x32e4 <__fixunssfsi>
    32dc:	68 94       	set
    32de:	b1 11       	cpse	r27, r1
    32e0:	51 c1       	rjmp	.+674    	; 0x3584 <__fp_szero>
    32e2:	08 95       	ret

000032e4 <__fixunssfsi>:
    32e4:	1d d1       	rcall	.+570    	; 0x3520 <__fp_splitA>
    32e6:	88 f0       	brcs	.+34     	; 0x330a <__fixunssfsi+0x26>
    32e8:	9f 57       	subi	r25, 0x7F	; 127
    32ea:	90 f0       	brcs	.+36     	; 0x3310 <__fixunssfsi+0x2c>
    32ec:	b9 2f       	mov	r27, r25
    32ee:	99 27       	eor	r25, r25
    32f0:	b7 51       	subi	r27, 0x17	; 23
    32f2:	a0 f0       	brcs	.+40     	; 0x331c <__fixunssfsi+0x38>
    32f4:	d1 f0       	breq	.+52     	; 0x332a <__fixunssfsi+0x46>
    32f6:	66 0f       	add	r22, r22
    32f8:	77 1f       	adc	r23, r23
    32fa:	88 1f       	adc	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	1a f0       	brmi	.+6      	; 0x3306 <__fixunssfsi+0x22>
    3300:	ba 95       	dec	r27
    3302:	c9 f7       	brne	.-14     	; 0x32f6 <__fixunssfsi+0x12>
    3304:	12 c0       	rjmp	.+36     	; 0x332a <__fixunssfsi+0x46>
    3306:	b1 30       	cpi	r27, 0x01	; 1
    3308:	81 f0       	breq	.+32     	; 0x332a <__fixunssfsi+0x46>
    330a:	3b d1       	rcall	.+630    	; 0x3582 <__fp_zero>
    330c:	b1 e0       	ldi	r27, 0x01	; 1
    330e:	08 95       	ret
    3310:	38 c1       	rjmp	.+624    	; 0x3582 <__fp_zero>
    3312:	67 2f       	mov	r22, r23
    3314:	78 2f       	mov	r23, r24
    3316:	88 27       	eor	r24, r24
    3318:	b8 5f       	subi	r27, 0xF8	; 248
    331a:	39 f0       	breq	.+14     	; 0x332a <__fixunssfsi+0x46>
    331c:	b9 3f       	cpi	r27, 0xF9	; 249
    331e:	cc f3       	brlt	.-14     	; 0x3312 <__fixunssfsi+0x2e>
    3320:	86 95       	lsr	r24
    3322:	77 95       	ror	r23
    3324:	67 95       	ror	r22
    3326:	b3 95       	inc	r27
    3328:	d9 f7       	brne	.-10     	; 0x3320 <__fixunssfsi+0x3c>
    332a:	3e f4       	brtc	.+14     	; 0x333a <__fixunssfsi+0x56>
    332c:	90 95       	com	r25
    332e:	80 95       	com	r24
    3330:	70 95       	com	r23
    3332:	61 95       	neg	r22
    3334:	7f 4f       	sbci	r23, 0xFF	; 255
    3336:	8f 4f       	sbci	r24, 0xFF	; 255
    3338:	9f 4f       	sbci	r25, 0xFF	; 255
    333a:	08 95       	ret

0000333c <__floatunsisf>:
    333c:	e8 94       	clt
    333e:	09 c0       	rjmp	.+18     	; 0x3352 <__floatsisf+0x12>

00003340 <__floatsisf>:
    3340:	97 fb       	bst	r25, 7
    3342:	3e f4       	brtc	.+14     	; 0x3352 <__floatsisf+0x12>
    3344:	90 95       	com	r25
    3346:	80 95       	com	r24
    3348:	70 95       	com	r23
    334a:	61 95       	neg	r22
    334c:	7f 4f       	sbci	r23, 0xFF	; 255
    334e:	8f 4f       	sbci	r24, 0xFF	; 255
    3350:	9f 4f       	sbci	r25, 0xFF	; 255
    3352:	99 23       	and	r25, r25
    3354:	a9 f0       	breq	.+42     	; 0x3380 <__floatsisf+0x40>
    3356:	f9 2f       	mov	r31, r25
    3358:	96 e9       	ldi	r25, 0x96	; 150
    335a:	bb 27       	eor	r27, r27
    335c:	93 95       	inc	r25
    335e:	f6 95       	lsr	r31
    3360:	87 95       	ror	r24
    3362:	77 95       	ror	r23
    3364:	67 95       	ror	r22
    3366:	b7 95       	ror	r27
    3368:	f1 11       	cpse	r31, r1
    336a:	f8 cf       	rjmp	.-16     	; 0x335c <__floatsisf+0x1c>
    336c:	fa f4       	brpl	.+62     	; 0x33ac <__floatsisf+0x6c>
    336e:	bb 0f       	add	r27, r27
    3370:	11 f4       	brne	.+4      	; 0x3376 <__floatsisf+0x36>
    3372:	60 ff       	sbrs	r22, 0
    3374:	1b c0       	rjmp	.+54     	; 0x33ac <__floatsisf+0x6c>
    3376:	6f 5f       	subi	r22, 0xFF	; 255
    3378:	7f 4f       	sbci	r23, 0xFF	; 255
    337a:	8f 4f       	sbci	r24, 0xFF	; 255
    337c:	9f 4f       	sbci	r25, 0xFF	; 255
    337e:	16 c0       	rjmp	.+44     	; 0x33ac <__floatsisf+0x6c>
    3380:	88 23       	and	r24, r24
    3382:	11 f0       	breq	.+4      	; 0x3388 <__floatsisf+0x48>
    3384:	96 e9       	ldi	r25, 0x96	; 150
    3386:	11 c0       	rjmp	.+34     	; 0x33aa <__floatsisf+0x6a>
    3388:	77 23       	and	r23, r23
    338a:	21 f0       	breq	.+8      	; 0x3394 <__floatsisf+0x54>
    338c:	9e e8       	ldi	r25, 0x8E	; 142
    338e:	87 2f       	mov	r24, r23
    3390:	76 2f       	mov	r23, r22
    3392:	05 c0       	rjmp	.+10     	; 0x339e <__floatsisf+0x5e>
    3394:	66 23       	and	r22, r22
    3396:	71 f0       	breq	.+28     	; 0x33b4 <__floatsisf+0x74>
    3398:	96 e8       	ldi	r25, 0x86	; 134
    339a:	86 2f       	mov	r24, r22
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	60 e0       	ldi	r22, 0x00	; 0
    33a0:	2a f0       	brmi	.+10     	; 0x33ac <__floatsisf+0x6c>
    33a2:	9a 95       	dec	r25
    33a4:	66 0f       	add	r22, r22
    33a6:	77 1f       	adc	r23, r23
    33a8:	88 1f       	adc	r24, r24
    33aa:	da f7       	brpl	.-10     	; 0x33a2 <__floatsisf+0x62>
    33ac:	88 0f       	add	r24, r24
    33ae:	96 95       	lsr	r25
    33b0:	87 95       	ror	r24
    33b2:	97 f9       	bld	r25, 7
    33b4:	08 95       	ret

000033b6 <floor>:
    33b6:	ce d0       	rcall	.+412    	; 0x3554 <__fp_trunc>
    33b8:	80 f0       	brcs	.+32     	; 0x33da <floor+0x24>
    33ba:	9f 37       	cpi	r25, 0x7F	; 127
    33bc:	40 f4       	brcc	.+16     	; 0x33ce <floor+0x18>
    33be:	91 11       	cpse	r25, r1
    33c0:	0e f0       	brts	.+2      	; 0x33c4 <floor+0xe>
    33c2:	e0 c0       	rjmp	.+448    	; 0x3584 <__fp_szero>
    33c4:	60 e0       	ldi	r22, 0x00	; 0
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	80 e8       	ldi	r24, 0x80	; 128
    33ca:	9f eb       	ldi	r25, 0xBF	; 191
    33cc:	08 95       	ret
    33ce:	26 f4       	brtc	.+8      	; 0x33d8 <floor+0x22>
    33d0:	1b 16       	cp	r1, r27
    33d2:	61 1d       	adc	r22, r1
    33d4:	71 1d       	adc	r23, r1
    33d6:	81 1d       	adc	r24, r1
    33d8:	2b c0       	rjmp	.+86     	; 0x3430 <__fp_mintl>
    33da:	45 c0       	rjmp	.+138    	; 0x3466 <__fp_mpack>

000033dc <__fp_cmp>:
    33dc:	99 0f       	add	r25, r25
    33de:	00 08       	sbc	r0, r0
    33e0:	55 0f       	add	r21, r21
    33e2:	aa 0b       	sbc	r26, r26
    33e4:	e0 e8       	ldi	r30, 0x80	; 128
    33e6:	fe ef       	ldi	r31, 0xFE	; 254
    33e8:	16 16       	cp	r1, r22
    33ea:	17 06       	cpc	r1, r23
    33ec:	e8 07       	cpc	r30, r24
    33ee:	f9 07       	cpc	r31, r25
    33f0:	c0 f0       	brcs	.+48     	; 0x3422 <__fp_cmp+0x46>
    33f2:	12 16       	cp	r1, r18
    33f4:	13 06       	cpc	r1, r19
    33f6:	e4 07       	cpc	r30, r20
    33f8:	f5 07       	cpc	r31, r21
    33fa:	98 f0       	brcs	.+38     	; 0x3422 <__fp_cmp+0x46>
    33fc:	62 1b       	sub	r22, r18
    33fe:	73 0b       	sbc	r23, r19
    3400:	84 0b       	sbc	r24, r20
    3402:	95 0b       	sbc	r25, r21
    3404:	39 f4       	brne	.+14     	; 0x3414 <__fp_cmp+0x38>
    3406:	0a 26       	eor	r0, r26
    3408:	61 f0       	breq	.+24     	; 0x3422 <__fp_cmp+0x46>
    340a:	23 2b       	or	r18, r19
    340c:	24 2b       	or	r18, r20
    340e:	25 2b       	or	r18, r21
    3410:	21 f4       	brne	.+8      	; 0x341a <__fp_cmp+0x3e>
    3412:	08 95       	ret
    3414:	0a 26       	eor	r0, r26
    3416:	09 f4       	brne	.+2      	; 0x341a <__fp_cmp+0x3e>
    3418:	a1 40       	sbci	r26, 0x01	; 1
    341a:	a6 95       	lsr	r26
    341c:	8f ef       	ldi	r24, 0xFF	; 255
    341e:	81 1d       	adc	r24, r1
    3420:	81 1d       	adc	r24, r1
    3422:	08 95       	ret

00003424 <__fp_inf>:
    3424:	97 f9       	bld	r25, 7
    3426:	9f 67       	ori	r25, 0x7F	; 127
    3428:	80 e8       	ldi	r24, 0x80	; 128
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	08 95       	ret

00003430 <__fp_mintl>:
    3430:	88 23       	and	r24, r24
    3432:	71 f4       	brne	.+28     	; 0x3450 <__fp_mintl+0x20>
    3434:	77 23       	and	r23, r23
    3436:	21 f0       	breq	.+8      	; 0x3440 <__fp_mintl+0x10>
    3438:	98 50       	subi	r25, 0x08	; 8
    343a:	87 2b       	or	r24, r23
    343c:	76 2f       	mov	r23, r22
    343e:	07 c0       	rjmp	.+14     	; 0x344e <__fp_mintl+0x1e>
    3440:	66 23       	and	r22, r22
    3442:	11 f4       	brne	.+4      	; 0x3448 <__fp_mintl+0x18>
    3444:	99 27       	eor	r25, r25
    3446:	0d c0       	rjmp	.+26     	; 0x3462 <__fp_mintl+0x32>
    3448:	90 51       	subi	r25, 0x10	; 16
    344a:	86 2b       	or	r24, r22
    344c:	70 e0       	ldi	r23, 0x00	; 0
    344e:	60 e0       	ldi	r22, 0x00	; 0
    3450:	2a f0       	brmi	.+10     	; 0x345c <__fp_mintl+0x2c>
    3452:	9a 95       	dec	r25
    3454:	66 0f       	add	r22, r22
    3456:	77 1f       	adc	r23, r23
    3458:	88 1f       	adc	r24, r24
    345a:	da f7       	brpl	.-10     	; 0x3452 <__fp_mintl+0x22>
    345c:	88 0f       	add	r24, r24
    345e:	96 95       	lsr	r25
    3460:	87 95       	ror	r24
    3462:	97 f9       	bld	r25, 7
    3464:	08 95       	ret

00003466 <__fp_mpack>:
    3466:	9f 3f       	cpi	r25, 0xFF	; 255
    3468:	31 f0       	breq	.+12     	; 0x3476 <__fp_mpack_finite+0xc>

0000346a <__fp_mpack_finite>:
    346a:	91 50       	subi	r25, 0x01	; 1
    346c:	20 f4       	brcc	.+8      	; 0x3476 <__fp_mpack_finite+0xc>
    346e:	87 95       	ror	r24
    3470:	77 95       	ror	r23
    3472:	67 95       	ror	r22
    3474:	b7 95       	ror	r27
    3476:	88 0f       	add	r24, r24
    3478:	91 1d       	adc	r25, r1
    347a:	96 95       	lsr	r25
    347c:	87 95       	ror	r24
    347e:	97 f9       	bld	r25, 7
    3480:	08 95       	ret

00003482 <__fp_nan>:
    3482:	9f ef       	ldi	r25, 0xFF	; 255
    3484:	80 ec       	ldi	r24, 0xC0	; 192
    3486:	08 95       	ret

00003488 <__fp_powser>:
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	1f 93       	push	r17
    348e:	0f 93       	push	r16
    3490:	ff 92       	push	r15
    3492:	ef 92       	push	r14
    3494:	df 92       	push	r13
    3496:	7b 01       	movw	r14, r22
    3498:	8c 01       	movw	r16, r24
    349a:	68 94       	set
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <__fp_powser+0x20>
    349e:	da 2e       	mov	r13, r26
    34a0:	ef 01       	movw	r28, r30
    34a2:	f0 d0       	rcall	.+480    	; 0x3684 <__mulsf3x>
    34a4:	fe 01       	movw	r30, r28
    34a6:	e8 94       	clt
    34a8:	a5 91       	lpm	r26, Z+
    34aa:	25 91       	lpm	r18, Z+
    34ac:	35 91       	lpm	r19, Z+
    34ae:	45 91       	lpm	r20, Z+
    34b0:	55 91       	lpm	r21, Z+
    34b2:	ae f3       	brts	.-22     	; 0x349e <__fp_powser+0x16>
    34b4:	ef 01       	movw	r28, r30
    34b6:	17 de       	rcall	.-978    	; 0x30e6 <__addsf3x>
    34b8:	fe 01       	movw	r30, r28
    34ba:	97 01       	movw	r18, r14
    34bc:	a8 01       	movw	r20, r16
    34be:	da 94       	dec	r13
    34c0:	79 f7       	brne	.-34     	; 0x34a0 <__fp_powser+0x18>
    34c2:	df 90       	pop	r13
    34c4:	ef 90       	pop	r14
    34c6:	ff 90       	pop	r15
    34c8:	0f 91       	pop	r16
    34ca:	1f 91       	pop	r17
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <__fp_pscA>:
    34d2:	00 24       	eor	r0, r0
    34d4:	0a 94       	dec	r0
    34d6:	16 16       	cp	r1, r22
    34d8:	17 06       	cpc	r1, r23
    34da:	18 06       	cpc	r1, r24
    34dc:	09 06       	cpc	r0, r25
    34de:	08 95       	ret

000034e0 <__fp_pscB>:
    34e0:	00 24       	eor	r0, r0
    34e2:	0a 94       	dec	r0
    34e4:	12 16       	cp	r1, r18
    34e6:	13 06       	cpc	r1, r19
    34e8:	14 06       	cpc	r1, r20
    34ea:	05 06       	cpc	r0, r21
    34ec:	08 95       	ret

000034ee <__fp_round>:
    34ee:	09 2e       	mov	r0, r25
    34f0:	03 94       	inc	r0
    34f2:	00 0c       	add	r0, r0
    34f4:	11 f4       	brne	.+4      	; 0x34fa <__fp_round+0xc>
    34f6:	88 23       	and	r24, r24
    34f8:	52 f0       	brmi	.+20     	; 0x350e <__fp_round+0x20>
    34fa:	bb 0f       	add	r27, r27
    34fc:	40 f4       	brcc	.+16     	; 0x350e <__fp_round+0x20>
    34fe:	bf 2b       	or	r27, r31
    3500:	11 f4       	brne	.+4      	; 0x3506 <__fp_round+0x18>
    3502:	60 ff       	sbrs	r22, 0
    3504:	04 c0       	rjmp	.+8      	; 0x350e <__fp_round+0x20>
    3506:	6f 5f       	subi	r22, 0xFF	; 255
    3508:	7f 4f       	sbci	r23, 0xFF	; 255
    350a:	8f 4f       	sbci	r24, 0xFF	; 255
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	08 95       	ret

00003510 <__fp_split3>:
    3510:	57 fd       	sbrc	r21, 7
    3512:	90 58       	subi	r25, 0x80	; 128
    3514:	44 0f       	add	r20, r20
    3516:	55 1f       	adc	r21, r21
    3518:	59 f0       	breq	.+22     	; 0x3530 <__fp_splitA+0x10>
    351a:	5f 3f       	cpi	r21, 0xFF	; 255
    351c:	71 f0       	breq	.+28     	; 0x353a <__fp_splitA+0x1a>
    351e:	47 95       	ror	r20

00003520 <__fp_splitA>:
    3520:	88 0f       	add	r24, r24
    3522:	97 fb       	bst	r25, 7
    3524:	99 1f       	adc	r25, r25
    3526:	61 f0       	breq	.+24     	; 0x3540 <__fp_splitA+0x20>
    3528:	9f 3f       	cpi	r25, 0xFF	; 255
    352a:	79 f0       	breq	.+30     	; 0x354a <__fp_splitA+0x2a>
    352c:	87 95       	ror	r24
    352e:	08 95       	ret
    3530:	12 16       	cp	r1, r18
    3532:	13 06       	cpc	r1, r19
    3534:	14 06       	cpc	r1, r20
    3536:	55 1f       	adc	r21, r21
    3538:	f2 cf       	rjmp	.-28     	; 0x351e <__fp_split3+0xe>
    353a:	46 95       	lsr	r20
    353c:	f1 df       	rcall	.-30     	; 0x3520 <__fp_splitA>
    353e:	08 c0       	rjmp	.+16     	; 0x3550 <__fp_splitA+0x30>
    3540:	16 16       	cp	r1, r22
    3542:	17 06       	cpc	r1, r23
    3544:	18 06       	cpc	r1, r24
    3546:	99 1f       	adc	r25, r25
    3548:	f1 cf       	rjmp	.-30     	; 0x352c <__fp_splitA+0xc>
    354a:	86 95       	lsr	r24
    354c:	71 05       	cpc	r23, r1
    354e:	61 05       	cpc	r22, r1
    3550:	08 94       	sec
    3552:	08 95       	ret

00003554 <__fp_trunc>:
    3554:	e5 df       	rcall	.-54     	; 0x3520 <__fp_splitA>
    3556:	a0 f0       	brcs	.+40     	; 0x3580 <__fp_trunc+0x2c>
    3558:	be e7       	ldi	r27, 0x7E	; 126
    355a:	b9 17       	cp	r27, r25
    355c:	88 f4       	brcc	.+34     	; 0x3580 <__fp_trunc+0x2c>
    355e:	bb 27       	eor	r27, r27
    3560:	9f 38       	cpi	r25, 0x8F	; 143
    3562:	60 f4       	brcc	.+24     	; 0x357c <__fp_trunc+0x28>
    3564:	16 16       	cp	r1, r22
    3566:	b1 1d       	adc	r27, r1
    3568:	67 2f       	mov	r22, r23
    356a:	78 2f       	mov	r23, r24
    356c:	88 27       	eor	r24, r24
    356e:	98 5f       	subi	r25, 0xF8	; 248
    3570:	f7 cf       	rjmp	.-18     	; 0x3560 <__fp_trunc+0xc>
    3572:	86 95       	lsr	r24
    3574:	77 95       	ror	r23
    3576:	67 95       	ror	r22
    3578:	b1 1d       	adc	r27, r1
    357a:	93 95       	inc	r25
    357c:	96 39       	cpi	r25, 0x96	; 150
    357e:	c8 f3       	brcs	.-14     	; 0x3572 <__fp_trunc+0x1e>
    3580:	08 95       	ret

00003582 <__fp_zero>:
    3582:	e8 94       	clt

00003584 <__fp_szero>:
    3584:	bb 27       	eor	r27, r27
    3586:	66 27       	eor	r22, r22
    3588:	77 27       	eor	r23, r23
    358a:	cb 01       	movw	r24, r22
    358c:	97 f9       	bld	r25, 7
    358e:	08 95       	ret

00003590 <__gesf2>:
    3590:	25 df       	rcall	.-438    	; 0x33dc <__fp_cmp>
    3592:	08 f4       	brcc	.+2      	; 0x3596 <__gesf2+0x6>
    3594:	8f ef       	ldi	r24, 0xFF	; 255
    3596:	08 95       	ret

00003598 <inverse>:
    3598:	9b 01       	movw	r18, r22
    359a:	ac 01       	movw	r20, r24
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	70 e0       	ldi	r23, 0x00	; 0
    35a0:	80 e8       	ldi	r24, 0x80	; 128
    35a2:	9f e3       	ldi	r25, 0x3F	; 63
    35a4:	32 ce       	rjmp	.-924    	; 0x320a <__divsf3>

000035a6 <lround>:
    35a6:	bc df       	rcall	.-136    	; 0x3520 <__fp_splitA>
    35a8:	58 f1       	brcs	.+86     	; 0x3600 <lround+0x5a>
    35aa:	9e 57       	subi	r25, 0x7E	; 126
    35ac:	58 f1       	brcs	.+86     	; 0x3604 <lround+0x5e>
    35ae:	98 51       	subi	r25, 0x18	; 24
    35b0:	a0 f0       	brcs	.+40     	; 0x35da <lround+0x34>
    35b2:	e9 f0       	breq	.+58     	; 0x35ee <lround+0x48>
    35b4:	98 30       	cpi	r25, 0x08	; 8
    35b6:	20 f5       	brcc	.+72     	; 0x3600 <lround+0x5a>
    35b8:	09 2e       	mov	r0, r25
    35ba:	99 27       	eor	r25, r25
    35bc:	66 0f       	add	r22, r22
    35be:	77 1f       	adc	r23, r23
    35c0:	88 1f       	adc	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	0a 94       	dec	r0
    35c6:	d1 f7       	brne	.-12     	; 0x35bc <lround+0x16>
    35c8:	12 c0       	rjmp	.+36     	; 0x35ee <lround+0x48>
    35ca:	06 2e       	mov	r0, r22
    35cc:	67 2f       	mov	r22, r23
    35ce:	78 2f       	mov	r23, r24
    35d0:	88 27       	eor	r24, r24
    35d2:	98 5f       	subi	r25, 0xF8	; 248
    35d4:	11 f4       	brne	.+4      	; 0x35da <lround+0x34>
    35d6:	00 0c       	add	r0, r0
    35d8:	07 c0       	rjmp	.+14     	; 0x35e8 <lround+0x42>
    35da:	99 3f       	cpi	r25, 0xF9	; 249
    35dc:	b4 f3       	brlt	.-20     	; 0x35ca <lround+0x24>
    35de:	86 95       	lsr	r24
    35e0:	77 95       	ror	r23
    35e2:	67 95       	ror	r22
    35e4:	93 95       	inc	r25
    35e6:	d9 f7       	brne	.-10     	; 0x35de <lround+0x38>
    35e8:	61 1d       	adc	r22, r1
    35ea:	71 1d       	adc	r23, r1
    35ec:	81 1d       	adc	r24, r1
    35ee:	3e f4       	brtc	.+14     	; 0x35fe <lround+0x58>
    35f0:	90 95       	com	r25
    35f2:	80 95       	com	r24
    35f4:	70 95       	com	r23
    35f6:	61 95       	neg	r22
    35f8:	7f 4f       	sbci	r23, 0xFF	; 255
    35fa:	8f 4f       	sbci	r24, 0xFF	; 255
    35fc:	9f 4f       	sbci	r25, 0xFF	; 255
    35fe:	08 95       	ret
    3600:	68 94       	set
    3602:	c0 cf       	rjmp	.-128    	; 0x3584 <__fp_szero>
    3604:	be cf       	rjmp	.-132    	; 0x3582 <__fp_zero>

00003606 <modf>:
    3606:	fa 01       	movw	r30, r20
    3608:	dc 01       	movw	r26, r24
    360a:	aa 0f       	add	r26, r26
    360c:	bb 1f       	adc	r27, r27
    360e:	9b 01       	movw	r18, r22
    3610:	ac 01       	movw	r20, r24
    3612:	bf 57       	subi	r27, 0x7F	; 127
    3614:	28 f4       	brcc	.+10     	; 0x3620 <modf+0x1a>
    3616:	22 27       	eor	r18, r18
    3618:	33 27       	eor	r19, r19
    361a:	44 27       	eor	r20, r20
    361c:	50 78       	andi	r21, 0x80	; 128
    361e:	1f c0       	rjmp	.+62     	; 0x365e <modf+0x58>
    3620:	b7 51       	subi	r27, 0x17	; 23
    3622:	88 f4       	brcc	.+34     	; 0x3646 <modf+0x40>
    3624:	ab 2f       	mov	r26, r27
    3626:	00 24       	eor	r0, r0
    3628:	46 95       	lsr	r20
    362a:	37 95       	ror	r19
    362c:	27 95       	ror	r18
    362e:	01 1c       	adc	r0, r1
    3630:	a3 95       	inc	r26
    3632:	d2 f3       	brmi	.-12     	; 0x3628 <modf+0x22>
    3634:	00 20       	and	r0, r0
    3636:	69 f0       	breq	.+26     	; 0x3652 <modf+0x4c>
    3638:	22 0f       	add	r18, r18
    363a:	33 1f       	adc	r19, r19
    363c:	44 1f       	adc	r20, r20
    363e:	b3 95       	inc	r27
    3640:	da f3       	brmi	.-10     	; 0x3638 <modf+0x32>
    3642:	0d d0       	rcall	.+26     	; 0x365e <modf+0x58>
    3644:	3e cd       	rjmp	.-1412   	; 0x30c2 <__subsf3>
    3646:	61 30       	cpi	r22, 0x01	; 1
    3648:	71 05       	cpc	r23, r1
    364a:	a0 e8       	ldi	r26, 0x80	; 128
    364c:	8a 07       	cpc	r24, r26
    364e:	b9 46       	sbci	r27, 0x69	; 105
    3650:	30 f4       	brcc	.+12     	; 0x365e <modf+0x58>
    3652:	9b 01       	movw	r18, r22
    3654:	ac 01       	movw	r20, r24
    3656:	66 27       	eor	r22, r22
    3658:	77 27       	eor	r23, r23
    365a:	88 27       	eor	r24, r24
    365c:	90 78       	andi	r25, 0x80	; 128
    365e:	30 96       	adiw	r30, 0x00	; 0
    3660:	21 f0       	breq	.+8      	; 0x366a <modf+0x64>
    3662:	20 83       	st	Z, r18
    3664:	31 83       	std	Z+1, r19	; 0x01
    3666:	42 83       	std	Z+2, r20	; 0x02
    3668:	53 83       	std	Z+3, r21	; 0x03
    366a:	08 95       	ret

0000366c <__mulsf3>:
    366c:	0b d0       	rcall	.+22     	; 0x3684 <__mulsf3x>
    366e:	3f cf       	rjmp	.-386    	; 0x34ee <__fp_round>
    3670:	30 df       	rcall	.-416    	; 0x34d2 <__fp_pscA>
    3672:	28 f0       	brcs	.+10     	; 0x367e <__mulsf3+0x12>
    3674:	35 df       	rcall	.-406    	; 0x34e0 <__fp_pscB>
    3676:	18 f0       	brcs	.+6      	; 0x367e <__mulsf3+0x12>
    3678:	95 23       	and	r25, r21
    367a:	09 f0       	breq	.+2      	; 0x367e <__mulsf3+0x12>
    367c:	d3 ce       	rjmp	.-602    	; 0x3424 <__fp_inf>
    367e:	01 cf       	rjmp	.-510    	; 0x3482 <__fp_nan>
    3680:	11 24       	eor	r1, r1
    3682:	80 cf       	rjmp	.-256    	; 0x3584 <__fp_szero>

00003684 <__mulsf3x>:
    3684:	45 df       	rcall	.-374    	; 0x3510 <__fp_split3>
    3686:	a0 f3       	brcs	.-24     	; 0x3670 <__mulsf3+0x4>

00003688 <__mulsf3_pse>:
    3688:	95 9f       	mul	r25, r21
    368a:	d1 f3       	breq	.-12     	; 0x3680 <__mulsf3+0x14>
    368c:	95 0f       	add	r25, r21
    368e:	50 e0       	ldi	r21, 0x00	; 0
    3690:	55 1f       	adc	r21, r21
    3692:	62 9f       	mul	r22, r18
    3694:	f0 01       	movw	r30, r0
    3696:	72 9f       	mul	r23, r18
    3698:	bb 27       	eor	r27, r27
    369a:	f0 0d       	add	r31, r0
    369c:	b1 1d       	adc	r27, r1
    369e:	63 9f       	mul	r22, r19
    36a0:	aa 27       	eor	r26, r26
    36a2:	f0 0d       	add	r31, r0
    36a4:	b1 1d       	adc	r27, r1
    36a6:	aa 1f       	adc	r26, r26
    36a8:	64 9f       	mul	r22, r20
    36aa:	66 27       	eor	r22, r22
    36ac:	b0 0d       	add	r27, r0
    36ae:	a1 1d       	adc	r26, r1
    36b0:	66 1f       	adc	r22, r22
    36b2:	82 9f       	mul	r24, r18
    36b4:	22 27       	eor	r18, r18
    36b6:	b0 0d       	add	r27, r0
    36b8:	a1 1d       	adc	r26, r1
    36ba:	62 1f       	adc	r22, r18
    36bc:	73 9f       	mul	r23, r19
    36be:	b0 0d       	add	r27, r0
    36c0:	a1 1d       	adc	r26, r1
    36c2:	62 1f       	adc	r22, r18
    36c4:	83 9f       	mul	r24, r19
    36c6:	a0 0d       	add	r26, r0
    36c8:	61 1d       	adc	r22, r1
    36ca:	22 1f       	adc	r18, r18
    36cc:	74 9f       	mul	r23, r20
    36ce:	33 27       	eor	r19, r19
    36d0:	a0 0d       	add	r26, r0
    36d2:	61 1d       	adc	r22, r1
    36d4:	23 1f       	adc	r18, r19
    36d6:	84 9f       	mul	r24, r20
    36d8:	60 0d       	add	r22, r0
    36da:	21 1d       	adc	r18, r1
    36dc:	82 2f       	mov	r24, r18
    36de:	76 2f       	mov	r23, r22
    36e0:	6a 2f       	mov	r22, r26
    36e2:	11 24       	eor	r1, r1
    36e4:	9f 57       	subi	r25, 0x7F	; 127
    36e6:	50 40       	sbci	r21, 0x00	; 0
    36e8:	8a f0       	brmi	.+34     	; 0x370c <__mulsf3_pse+0x84>
    36ea:	e1 f0       	breq	.+56     	; 0x3724 <__mulsf3_pse+0x9c>
    36ec:	88 23       	and	r24, r24
    36ee:	4a f0       	brmi	.+18     	; 0x3702 <__mulsf3_pse+0x7a>
    36f0:	ee 0f       	add	r30, r30
    36f2:	ff 1f       	adc	r31, r31
    36f4:	bb 1f       	adc	r27, r27
    36f6:	66 1f       	adc	r22, r22
    36f8:	77 1f       	adc	r23, r23
    36fa:	88 1f       	adc	r24, r24
    36fc:	91 50       	subi	r25, 0x01	; 1
    36fe:	50 40       	sbci	r21, 0x00	; 0
    3700:	a9 f7       	brne	.-22     	; 0x36ec <__mulsf3_pse+0x64>
    3702:	9e 3f       	cpi	r25, 0xFE	; 254
    3704:	51 05       	cpc	r21, r1
    3706:	70 f0       	brcs	.+28     	; 0x3724 <__mulsf3_pse+0x9c>
    3708:	8d ce       	rjmp	.-742    	; 0x3424 <__fp_inf>
    370a:	3c cf       	rjmp	.-392    	; 0x3584 <__fp_szero>
    370c:	5f 3f       	cpi	r21, 0xFF	; 255
    370e:	ec f3       	brlt	.-6      	; 0x370a <__mulsf3_pse+0x82>
    3710:	98 3e       	cpi	r25, 0xE8	; 232
    3712:	dc f3       	brlt	.-10     	; 0x370a <__mulsf3_pse+0x82>
    3714:	86 95       	lsr	r24
    3716:	77 95       	ror	r23
    3718:	67 95       	ror	r22
    371a:	b7 95       	ror	r27
    371c:	f7 95       	ror	r31
    371e:	e7 95       	ror	r30
    3720:	9f 5f       	subi	r25, 0xFF	; 255
    3722:	c1 f7       	brne	.-16     	; 0x3714 <__mulsf3_pse+0x8c>
    3724:	fe 2b       	or	r31, r30
    3726:	88 0f       	add	r24, r24
    3728:	91 1d       	adc	r25, r1
    372a:	96 95       	lsr	r25
    372c:	87 95       	ror	r24
    372e:	97 f9       	bld	r25, 7
    3730:	08 95       	ret

00003732 <round>:
    3732:	f6 de       	rcall	.-532    	; 0x3520 <__fp_splitA>
    3734:	e0 f0       	brcs	.+56     	; 0x376e <round+0x3c>
    3736:	9e 37       	cpi	r25, 0x7E	; 126
    3738:	d8 f0       	brcs	.+54     	; 0x3770 <round+0x3e>
    373a:	96 39       	cpi	r25, 0x96	; 150
    373c:	b8 f4       	brcc	.+46     	; 0x376c <round+0x3a>
    373e:	9e 38       	cpi	r25, 0x8E	; 142
    3740:	48 f4       	brcc	.+18     	; 0x3754 <round+0x22>
    3742:	67 2f       	mov	r22, r23
    3744:	78 2f       	mov	r23, r24
    3746:	88 27       	eor	r24, r24
    3748:	98 5f       	subi	r25, 0xF8	; 248
    374a:	f9 cf       	rjmp	.-14     	; 0x373e <round+0xc>
    374c:	86 95       	lsr	r24
    374e:	77 95       	ror	r23
    3750:	67 95       	ror	r22
    3752:	93 95       	inc	r25
    3754:	95 39       	cpi	r25, 0x95	; 149
    3756:	d0 f3       	brcs	.-12     	; 0x374c <round+0x1a>
    3758:	b6 2f       	mov	r27, r22
    375a:	b1 70       	andi	r27, 0x01	; 1
    375c:	6b 0f       	add	r22, r27
    375e:	71 1d       	adc	r23, r1
    3760:	81 1d       	adc	r24, r1
    3762:	20 f4       	brcc	.+8      	; 0x376c <round+0x3a>
    3764:	87 95       	ror	r24
    3766:	77 95       	ror	r23
    3768:	67 95       	ror	r22
    376a:	93 95       	inc	r25
    376c:	61 ce       	rjmp	.-830    	; 0x3430 <__fp_mintl>
    376e:	7b ce       	rjmp	.-778    	; 0x3466 <__fp_mpack>
    3770:	09 cf       	rjmp	.-494    	; 0x3584 <__fp_szero>
    3772:	11 f4       	brne	.+4      	; 0x3778 <round+0x46>
    3774:	0e f4       	brtc	.+2      	; 0x3778 <round+0x46>
    3776:	85 ce       	rjmp	.-758    	; 0x3482 <__fp_nan>
    3778:	76 ce       	rjmp	.-788    	; 0x3466 <__fp_mpack>

0000377a <sqrt>:
    377a:	d2 de       	rcall	.-604    	; 0x3520 <__fp_splitA>
    377c:	d0 f3       	brcs	.-12     	; 0x3772 <round+0x40>
    377e:	99 23       	and	r25, r25
    3780:	d9 f3       	breq	.-10     	; 0x3778 <round+0x46>
    3782:	ce f3       	brts	.-14     	; 0x3776 <round+0x44>
    3784:	9f 57       	subi	r25, 0x7F	; 127
    3786:	55 0b       	sbc	r21, r21
    3788:	87 ff       	sbrs	r24, 7
    378a:	3f d0       	rcall	.+126    	; 0x380a <__fp_norm2>
    378c:	00 24       	eor	r0, r0
    378e:	a0 e6       	ldi	r26, 0x60	; 96
    3790:	40 ea       	ldi	r20, 0xA0	; 160
    3792:	90 01       	movw	r18, r0
    3794:	80 58       	subi	r24, 0x80	; 128
    3796:	56 95       	lsr	r21
    3798:	97 95       	ror	r25
    379a:	28 f4       	brcc	.+10     	; 0x37a6 <sqrt+0x2c>
    379c:	80 5c       	subi	r24, 0xC0	; 192
    379e:	66 0f       	add	r22, r22
    37a0:	77 1f       	adc	r23, r23
    37a2:	88 1f       	adc	r24, r24
    37a4:	20 f0       	brcs	.+8      	; 0x37ae <sqrt+0x34>
    37a6:	26 17       	cp	r18, r22
    37a8:	37 07       	cpc	r19, r23
    37aa:	48 07       	cpc	r20, r24
    37ac:	30 f4       	brcc	.+12     	; 0x37ba <sqrt+0x40>
    37ae:	62 1b       	sub	r22, r18
    37b0:	73 0b       	sbc	r23, r19
    37b2:	84 0b       	sbc	r24, r20
    37b4:	20 29       	or	r18, r0
    37b6:	31 29       	or	r19, r1
    37b8:	4a 2b       	or	r20, r26
    37ba:	a6 95       	lsr	r26
    37bc:	17 94       	ror	r1
    37be:	07 94       	ror	r0
    37c0:	20 25       	eor	r18, r0
    37c2:	31 25       	eor	r19, r1
    37c4:	4a 27       	eor	r20, r26
    37c6:	58 f7       	brcc	.-42     	; 0x379e <sqrt+0x24>
    37c8:	66 0f       	add	r22, r22
    37ca:	77 1f       	adc	r23, r23
    37cc:	88 1f       	adc	r24, r24
    37ce:	20 f0       	brcs	.+8      	; 0x37d8 <sqrt+0x5e>
    37d0:	26 17       	cp	r18, r22
    37d2:	37 07       	cpc	r19, r23
    37d4:	48 07       	cpc	r20, r24
    37d6:	30 f4       	brcc	.+12     	; 0x37e4 <sqrt+0x6a>
    37d8:	62 0b       	sbc	r22, r18
    37da:	73 0b       	sbc	r23, r19
    37dc:	84 0b       	sbc	r24, r20
    37de:	20 0d       	add	r18, r0
    37e0:	31 1d       	adc	r19, r1
    37e2:	41 1d       	adc	r20, r1
    37e4:	a0 95       	com	r26
    37e6:	81 f7       	brne	.-32     	; 0x37c8 <sqrt+0x4e>
    37e8:	b9 01       	movw	r22, r18
    37ea:	84 2f       	mov	r24, r20
    37ec:	91 58       	subi	r25, 0x81	; 129
    37ee:	88 0f       	add	r24, r24
    37f0:	96 95       	lsr	r25
    37f2:	87 95       	ror	r24
    37f4:	08 95       	ret

000037f6 <square>:
    37f6:	9b 01       	movw	r18, r22
    37f8:	ac 01       	movw	r20, r24
    37fa:	38 cf       	rjmp	.-400    	; 0x366c <__mulsf3>

000037fc <trunc>:
    37fc:	ab de       	rcall	.-682    	; 0x3554 <__fp_trunc>
    37fe:	20 f0       	brcs	.+8      	; 0x3808 <trunc+0xc>
    3800:	9f 37       	cpi	r25, 0x7F	; 127
    3802:	08 f4       	brcc	.+2      	; 0x3806 <trunc+0xa>
    3804:	bf ce       	rjmp	.-642    	; 0x3584 <__fp_szero>
    3806:	14 ce       	rjmp	.-984    	; 0x3430 <__fp_mintl>
    3808:	2e ce       	rjmp	.-932    	; 0x3466 <__fp_mpack>

0000380a <__fp_norm2>:
    380a:	91 50       	subi	r25, 0x01	; 1
    380c:	50 40       	sbci	r21, 0x00	; 0
    380e:	66 0f       	add	r22, r22
    3810:	77 1f       	adc	r23, r23
    3812:	88 1f       	adc	r24, r24
    3814:	d2 f7       	brpl	.-12     	; 0x380a <__fp_norm2>
    3816:	08 95       	ret

00003818 <__mulsi3>:
    3818:	62 9f       	mul	r22, r18
    381a:	d0 01       	movw	r26, r0
    381c:	73 9f       	mul	r23, r19
    381e:	f0 01       	movw	r30, r0
    3820:	82 9f       	mul	r24, r18
    3822:	e0 0d       	add	r30, r0
    3824:	f1 1d       	adc	r31, r1
    3826:	64 9f       	mul	r22, r20
    3828:	e0 0d       	add	r30, r0
    382a:	f1 1d       	adc	r31, r1
    382c:	92 9f       	mul	r25, r18
    382e:	f0 0d       	add	r31, r0
    3830:	83 9f       	mul	r24, r19
    3832:	f0 0d       	add	r31, r0
    3834:	74 9f       	mul	r23, r20
    3836:	f0 0d       	add	r31, r0
    3838:	65 9f       	mul	r22, r21
    383a:	f0 0d       	add	r31, r0
    383c:	99 27       	eor	r25, r25
    383e:	72 9f       	mul	r23, r18
    3840:	b0 0d       	add	r27, r0
    3842:	e1 1d       	adc	r30, r1
    3844:	f9 1f       	adc	r31, r25
    3846:	63 9f       	mul	r22, r19
    3848:	b0 0d       	add	r27, r0
    384a:	e1 1d       	adc	r30, r1
    384c:	f9 1f       	adc	r31, r25
    384e:	bd 01       	movw	r22, r26
    3850:	cf 01       	movw	r24, r30
    3852:	11 24       	eor	r1, r1
    3854:	08 95       	ret

00003856 <__divmodhi4>:
    3856:	97 fb       	bst	r25, 7
    3858:	09 2e       	mov	r0, r25
    385a:	07 26       	eor	r0, r23
    385c:	0a d0       	rcall	.+20     	; 0x3872 <__divmodhi4_neg1>
    385e:	77 fd       	sbrc	r23, 7
    3860:	04 d0       	rcall	.+8      	; 0x386a <__divmodhi4_neg2>
    3862:	49 d0       	rcall	.+146    	; 0x38f6 <__udivmodhi4>
    3864:	06 d0       	rcall	.+12     	; 0x3872 <__divmodhi4_neg1>
    3866:	00 20       	and	r0, r0
    3868:	1a f4       	brpl	.+6      	; 0x3870 <__divmodhi4_exit>

0000386a <__divmodhi4_neg2>:
    386a:	70 95       	com	r23
    386c:	61 95       	neg	r22
    386e:	7f 4f       	sbci	r23, 0xFF	; 255

00003870 <__divmodhi4_exit>:
    3870:	08 95       	ret

00003872 <__divmodhi4_neg1>:
    3872:	f6 f7       	brtc	.-4      	; 0x3870 <__divmodhi4_exit>
    3874:	90 95       	com	r25
    3876:	81 95       	neg	r24
    3878:	9f 4f       	sbci	r25, 0xFF	; 255
    387a:	08 95       	ret

0000387c <__udivmodsi4>:
    387c:	a1 e2       	ldi	r26, 0x21	; 33
    387e:	1a 2e       	mov	r1, r26
    3880:	aa 1b       	sub	r26, r26
    3882:	bb 1b       	sub	r27, r27
    3884:	fd 01       	movw	r30, r26
    3886:	0d c0       	rjmp	.+26     	; 0x38a2 <__udivmodsi4_ep>

00003888 <__udivmodsi4_loop>:
    3888:	aa 1f       	adc	r26, r26
    388a:	bb 1f       	adc	r27, r27
    388c:	ee 1f       	adc	r30, r30
    388e:	ff 1f       	adc	r31, r31
    3890:	a2 17       	cp	r26, r18
    3892:	b3 07       	cpc	r27, r19
    3894:	e4 07       	cpc	r30, r20
    3896:	f5 07       	cpc	r31, r21
    3898:	20 f0       	brcs	.+8      	; 0x38a2 <__udivmodsi4_ep>
    389a:	a2 1b       	sub	r26, r18
    389c:	b3 0b       	sbc	r27, r19
    389e:	e4 0b       	sbc	r30, r20
    38a0:	f5 0b       	sbc	r31, r21

000038a2 <__udivmodsi4_ep>:
    38a2:	66 1f       	adc	r22, r22
    38a4:	77 1f       	adc	r23, r23
    38a6:	88 1f       	adc	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	1a 94       	dec	r1
    38ac:	69 f7       	brne	.-38     	; 0x3888 <__udivmodsi4_loop>
    38ae:	60 95       	com	r22
    38b0:	70 95       	com	r23
    38b2:	80 95       	com	r24
    38b4:	90 95       	com	r25
    38b6:	9b 01       	movw	r18, r22
    38b8:	ac 01       	movw	r20, r24
    38ba:	bd 01       	movw	r22, r26
    38bc:	cf 01       	movw	r24, r30
    38be:	08 95       	ret

000038c0 <__divmodsi4>:
    38c0:	97 fb       	bst	r25, 7
    38c2:	09 2e       	mov	r0, r25
    38c4:	05 26       	eor	r0, r21
    38c6:	0e d0       	rcall	.+28     	; 0x38e4 <__divmodsi4_neg1>
    38c8:	57 fd       	sbrc	r21, 7
    38ca:	04 d0       	rcall	.+8      	; 0x38d4 <__divmodsi4_neg2>
    38cc:	d7 df       	rcall	.-82     	; 0x387c <__udivmodsi4>
    38ce:	0a d0       	rcall	.+20     	; 0x38e4 <__divmodsi4_neg1>
    38d0:	00 1c       	adc	r0, r0
    38d2:	38 f4       	brcc	.+14     	; 0x38e2 <__divmodsi4_exit>

000038d4 <__divmodsi4_neg2>:
    38d4:	50 95       	com	r21
    38d6:	40 95       	com	r20
    38d8:	30 95       	com	r19
    38da:	21 95       	neg	r18
    38dc:	3f 4f       	sbci	r19, 0xFF	; 255
    38de:	4f 4f       	sbci	r20, 0xFF	; 255
    38e0:	5f 4f       	sbci	r21, 0xFF	; 255

000038e2 <__divmodsi4_exit>:
    38e2:	08 95       	ret

000038e4 <__divmodsi4_neg1>:
    38e4:	f6 f7       	brtc	.-4      	; 0x38e2 <__divmodsi4_exit>
    38e6:	90 95       	com	r25
    38e8:	80 95       	com	r24
    38ea:	70 95       	com	r23
    38ec:	61 95       	neg	r22
    38ee:	7f 4f       	sbci	r23, 0xFF	; 255
    38f0:	8f 4f       	sbci	r24, 0xFF	; 255
    38f2:	9f 4f       	sbci	r25, 0xFF	; 255
    38f4:	08 95       	ret

000038f6 <__udivmodhi4>:
    38f6:	aa 1b       	sub	r26, r26
    38f8:	bb 1b       	sub	r27, r27
    38fa:	51 e1       	ldi	r21, 0x11	; 17
    38fc:	07 c0       	rjmp	.+14     	; 0x390c <__udivmodhi4_ep>

000038fe <__udivmodhi4_loop>:
    38fe:	aa 1f       	adc	r26, r26
    3900:	bb 1f       	adc	r27, r27
    3902:	a6 17       	cp	r26, r22
    3904:	b7 07       	cpc	r27, r23
    3906:	10 f0       	brcs	.+4      	; 0x390c <__udivmodhi4_ep>
    3908:	a6 1b       	sub	r26, r22
    390a:	b7 0b       	sbc	r27, r23

0000390c <__udivmodhi4_ep>:
    390c:	88 1f       	adc	r24, r24
    390e:	99 1f       	adc	r25, r25
    3910:	5a 95       	dec	r21
    3912:	a9 f7       	brne	.-22     	; 0x38fe <__udivmodhi4_loop>
    3914:	80 95       	com	r24
    3916:	90 95       	com	r25
    3918:	bc 01       	movw	r22, r24
    391a:	cd 01       	movw	r24, r26
    391c:	08 95       	ret

0000391e <strtod>:
    391e:	8f 92       	push	r8
    3920:	9f 92       	push	r9
    3922:	af 92       	push	r10
    3924:	bf 92       	push	r11
    3926:	cf 92       	push	r12
    3928:	df 92       	push	r13
    392a:	ef 92       	push	r14
    392c:	ff 92       	push	r15
    392e:	0f 93       	push	r16
    3930:	1f 93       	push	r17
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	ec 01       	movw	r28, r24
    3938:	5b 01       	movw	r10, r22
    393a:	61 15       	cp	r22, r1
    393c:	71 05       	cpc	r23, r1
    393e:	19 f0       	breq	.+6      	; 0x3946 <strtod+0x28>
    3940:	fb 01       	movw	r30, r22
    3942:	91 83       	std	Z+1, r25	; 0x01
    3944:	80 83       	st	Z, r24
    3946:	f9 90       	ld	r15, Y+
    3948:	8f 2d       	mov	r24, r15
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <isspace>
    3950:	89 2b       	or	r24, r25
    3952:	c9 f7       	brne	.-14     	; 0x3946 <strtod+0x28>
    3954:	fd e2       	ldi	r31, 0x2D	; 45
    3956:	ff 16       	cp	r15, r31
    3958:	21 f4       	brne	.+8      	; 0x3962 <strtod+0x44>
    395a:	f9 90       	ld	r15, Y+
    395c:	ee 24       	eor	r14, r14
    395e:	e3 94       	inc	r14
    3960:	05 c0       	rjmp	.+10     	; 0x396c <strtod+0x4e>
    3962:	2b e2       	ldi	r18, 0x2B	; 43
    3964:	f2 16       	cp	r15, r18
    3966:	09 f4       	brne	.+2      	; 0x396a <strtod+0x4c>
    3968:	f9 90       	ld	r15, Y+
    396a:	ee 24       	eor	r14, r14
    396c:	8e 01       	movw	r16, r28
    396e:	01 50       	subi	r16, 0x01	; 1
    3970:	10 40       	sbci	r17, 0x00	; 0
    3972:	c8 01       	movw	r24, r16
    3974:	63 e0       	ldi	r22, 0x03	; 3
    3976:	74 e0       	ldi	r23, 0x04	; 4
    3978:	43 e0       	ldi	r20, 0x03	; 3
    397a:	50 e0       	ldi	r21, 0x00	; 0
    397c:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <strncasecmp_P>
    3980:	89 2b       	or	r24, r25
    3982:	01 f5       	brne	.+64     	; 0x39c4 <strtod+0xa6>
    3984:	8e 01       	movw	r16, r28
    3986:	0e 5f       	subi	r16, 0xFE	; 254
    3988:	1f 4f       	sbci	r17, 0xFF	; 255
    398a:	c8 01       	movw	r24, r16
    398c:	66 e0       	ldi	r22, 0x06	; 6
    398e:	74 e0       	ldi	r23, 0x04	; 4
    3990:	45 e0       	ldi	r20, 0x05	; 5
    3992:	50 e0       	ldi	r21, 0x00	; 0
    3994:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <strncasecmp_P>
    3998:	89 2b       	or	r24, r25
    399a:	19 f4       	brne	.+6      	; 0x39a2 <strtod+0x84>
    399c:	8e 01       	movw	r16, r28
    399e:	09 5f       	subi	r16, 0xF9	; 249
    39a0:	1f 4f       	sbci	r17, 0xFF	; 255
    39a2:	a1 14       	cp	r10, r1
    39a4:	b1 04       	cpc	r11, r1
    39a6:	19 f0       	breq	.+6      	; 0x39ae <strtod+0x90>
    39a8:	f5 01       	movw	r30, r10
    39aa:	11 83       	std	Z+1, r17	; 0x01
    39ac:	00 83       	st	Z, r16
    39ae:	e0 fc       	sbrc	r14, 0
    39b0:	04 c0       	rjmp	.+8      	; 0x39ba <strtod+0x9c>
    39b2:	70 e0       	ldi	r23, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	80 e8       	ldi	r24, 0x80	; 128
    39b8:	14 c0       	rjmp	.+40     	; 0x39e2 <strtod+0xc4>
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	80 e8       	ldi	r24, 0x80	; 128
    39c0:	6f ef       	ldi	r22, 0xFF	; 255
    39c2:	08 c1       	rjmp	.+528    	; 0x3bd4 <strtod+0x2b6>
    39c4:	c8 01       	movw	r24, r16
    39c6:	6b e0       	ldi	r22, 0x0B	; 11
    39c8:	74 e0       	ldi	r23, 0x04	; 4
    39ca:	43 e0       	ldi	r20, 0x03	; 3
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <strncasecmp_P>
    39d2:	89 2b       	or	r24, r25
    39d4:	69 f4       	brne	.+26     	; 0x39f0 <strtod+0xd2>
    39d6:	a1 14       	cp	r10, r1
    39d8:	b1 04       	cpc	r11, r1
    39da:	29 f4       	brne	.+10     	; 0x39e6 <strtod+0xc8>
    39dc:	70 e0       	ldi	r23, 0x00	; 0
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	80 ec       	ldi	r24, 0xC0	; 192
    39e2:	6f e7       	ldi	r22, 0x7F	; 127
    39e4:	f7 c0       	rjmp	.+494    	; 0x3bd4 <strtod+0x2b6>
    39e6:	22 96       	adiw	r28, 0x02	; 2
    39e8:	f5 01       	movw	r30, r10
    39ea:	d1 83       	std	Z+1, r29	; 0x01
    39ec:	c0 83       	st	Z, r28
    39ee:	f6 cf       	rjmp	.-20     	; 0x39dc <strtod+0xbe>
    39f0:	88 24       	eor	r8, r8
    39f2:	99 24       	eor	r9, r9
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	50 e0       	ldi	r21, 0x00	; 0
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	ef 2d       	mov	r30, r15
    39fe:	e0 53       	subi	r30, 0x30	; 48
    3a00:	ea 30       	cpi	r30, 0x0A	; 10
    3a02:	a0 f5       	brcc	.+104    	; 0x3a6c <strtod+0x14e>
    3a04:	f2 e0       	ldi	r31, 0x02	; 2
    3a06:	ef 2a       	or	r14, r31
    3a08:	8e 2d       	mov	r24, r14
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9c 01       	movw	r18, r24
    3a0e:	28 70       	andi	r18, 0x08	; 8
    3a10:	30 70       	andi	r19, 0x00	; 0
    3a12:	e2 fe       	sbrs	r14, 2
    3a14:	06 c0       	rjmp	.+12     	; 0x3a22 <strtod+0x104>
    3a16:	23 2b       	or	r18, r19
    3a18:	79 f5       	brne	.+94     	; 0x3a78 <strtod+0x15a>
    3a1a:	08 94       	sec
    3a1c:	81 1c       	adc	r8, r1
    3a1e:	91 1c       	adc	r9, r1
    3a20:	2b c0       	rjmp	.+86     	; 0x3a78 <strtod+0x15a>
    3a22:	23 2b       	or	r18, r19
    3a24:	19 f0       	breq	.+6      	; 0x3a2c <strtod+0x10e>
    3a26:	08 94       	sec
    3a28:	81 08       	sbc	r8, r1
    3a2a:	91 08       	sbc	r9, r1
    3a2c:	db 01       	movw	r26, r22
    3a2e:	ca 01       	movw	r24, r20
    3a30:	12 e0       	ldi	r17, 0x02	; 2
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	aa 1f       	adc	r26, r26
    3a38:	bb 1f       	adc	r27, r27
    3a3a:	1a 95       	dec	r17
    3a3c:	d1 f7       	brne	.-12     	; 0x3a32 <strtod+0x114>
    3a3e:	48 0f       	add	r20, r24
    3a40:	59 1f       	adc	r21, r25
    3a42:	6a 1f       	adc	r22, r26
    3a44:	7b 1f       	adc	r23, r27
    3a46:	44 0f       	add	r20, r20
    3a48:	55 1f       	adc	r21, r21
    3a4a:	66 1f       	adc	r22, r22
    3a4c:	77 1f       	adc	r23, r23
    3a4e:	4e 0f       	add	r20, r30
    3a50:	51 1d       	adc	r21, r1
    3a52:	61 1d       	adc	r22, r1
    3a54:	71 1d       	adc	r23, r1
    3a56:	48 39       	cpi	r20, 0x98	; 152
    3a58:	29 e9       	ldi	r18, 0x99	; 153
    3a5a:	52 07       	cpc	r21, r18
    3a5c:	29 e9       	ldi	r18, 0x99	; 153
    3a5e:	62 07       	cpc	r22, r18
    3a60:	29 e1       	ldi	r18, 0x19	; 25
    3a62:	72 07       	cpc	r23, r18
    3a64:	48 f0       	brcs	.+18     	; 0x3a78 <strtod+0x15a>
    3a66:	84 e0       	ldi	r24, 0x04	; 4
    3a68:	e8 2a       	or	r14, r24
    3a6a:	06 c0       	rjmp	.+12     	; 0x3a78 <strtod+0x15a>
    3a6c:	ee 3f       	cpi	r30, 0xFE	; 254
    3a6e:	31 f4       	brne	.+12     	; 0x3a7c <strtod+0x15e>
    3a70:	e3 fc       	sbrc	r14, 3
    3a72:	39 c0       	rjmp	.+114    	; 0x3ae6 <strtod+0x1c8>
    3a74:	98 e0       	ldi	r25, 0x08	; 8
    3a76:	e9 2a       	or	r14, r25
    3a78:	f9 90       	ld	r15, Y+
    3a7a:	c0 cf       	rjmp	.-128    	; 0x39fc <strtod+0xde>
    3a7c:	e5 33       	cpi	r30, 0x35	; 53
    3a7e:	11 f0       	breq	.+4      	; 0x3a84 <strtod+0x166>
    3a80:	e5 31       	cpi	r30, 0x15	; 21
    3a82:	89 f5       	brne	.+98     	; 0x3ae6 <strtod+0x1c8>
    3a84:	29 91       	ld	r18, Y+
    3a86:	2d 32       	cpi	r18, 0x2D	; 45
    3a88:	19 f4       	brne	.+6      	; 0x3a90 <strtod+0x172>
    3a8a:	e0 e1       	ldi	r30, 0x10	; 16
    3a8c:	ee 2a       	or	r14, r30
    3a8e:	05 c0       	rjmp	.+10     	; 0x3a9a <strtod+0x17c>
    3a90:	2b 32       	cpi	r18, 0x2B	; 43
    3a92:	19 f0       	breq	.+6      	; 0x3a9a <strtod+0x17c>
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	03 c0       	rjmp	.+6      	; 0x3aa0 <strtod+0x182>
    3a9a:	29 91       	ld	r18, Y+
    3a9c:	82 e0       	ldi	r24, 0x02	; 2
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	e2 2f       	mov	r30, r18
    3aa2:	e0 53       	subi	r30, 0x30	; 48
    3aa4:	ea 30       	cpi	r30, 0x0A	; 10
    3aa6:	18 f0       	brcs	.+6      	; 0x3aae <strtod+0x190>
    3aa8:	c8 1b       	sub	r28, r24
    3aaa:	d9 0b       	sbc	r29, r25
    3aac:	1c c0       	rjmp	.+56     	; 0x3ae6 <strtod+0x1c8>
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	fc e0       	ldi	r31, 0x0C	; 12
    3ab4:	20 38       	cpi	r18, 0x80	; 128
    3ab6:	3f 07       	cpc	r19, r31
    3ab8:	5c f4       	brge	.+22     	; 0x3ad0 <strtod+0x1b2>
    3aba:	c9 01       	movw	r24, r18
    3abc:	88 0f       	add	r24, r24
    3abe:	99 1f       	adc	r25, r25
    3ac0:	88 0f       	add	r24, r24
    3ac2:	99 1f       	adc	r25, r25
    3ac4:	28 0f       	add	r18, r24
    3ac6:	39 1f       	adc	r19, r25
    3ac8:	22 0f       	add	r18, r18
    3aca:	33 1f       	adc	r19, r19
    3acc:	2e 0f       	add	r18, r30
    3ace:	31 1d       	adc	r19, r1
    3ad0:	e9 91       	ld	r30, Y+
    3ad2:	e0 53       	subi	r30, 0x30	; 48
    3ad4:	ea 30       	cpi	r30, 0x0A	; 10
    3ad6:	68 f3       	brcs	.-38     	; 0x3ab2 <strtod+0x194>
    3ad8:	e4 fe       	sbrs	r14, 4
    3ada:	03 c0       	rjmp	.+6      	; 0x3ae2 <strtod+0x1c4>
    3adc:	30 95       	com	r19
    3ade:	21 95       	neg	r18
    3ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae2:	82 0e       	add	r8, r18
    3ae4:	93 1e       	adc	r9, r19
    3ae6:	ce 2c       	mov	r12, r14
    3ae8:	dd 24       	eor	r13, r13
    3aea:	e1 fe       	sbrs	r14, 1
    3aec:	07 c0       	rjmp	.+14     	; 0x3afc <strtod+0x1de>
    3aee:	a1 14       	cp	r10, r1
    3af0:	b1 04       	cpc	r11, r1
    3af2:	21 f0       	breq	.+8      	; 0x3afc <strtod+0x1de>
    3af4:	21 97       	sbiw	r28, 0x01	; 1
    3af6:	f5 01       	movw	r30, r10
    3af8:	d1 83       	std	Z+1, r29	; 0x01
    3afa:	c0 83       	st	Z, r28
    3afc:	cb 01       	movw	r24, r22
    3afe:	ba 01       	movw	r22, r20
    3b00:	0e 94 9e 19 	call	0x333c	; 0x333c <__floatunsisf>
    3b04:	7b 01       	movw	r14, r22
    3b06:	8c 01       	movw	r16, r24
    3b08:	f3 e0       	ldi	r31, 0x03	; 3
    3b0a:	cf 22       	and	r12, r31
    3b0c:	dd 24       	eor	r13, r13
    3b0e:	23 e0       	ldi	r18, 0x03	; 3
    3b10:	c2 16       	cp	r12, r18
    3b12:	d1 04       	cpc	r13, r1
    3b14:	21 f4       	brne	.+8      	; 0x3b1e <strtod+0x200>
    3b16:	17 fb       	bst	r17, 7
    3b18:	10 95       	com	r17
    3b1a:	17 f9       	bld	r17, 7
    3b1c:	10 95       	com	r17
    3b1e:	57 01       	movw	r10, r14
    3b20:	68 01       	movw	r12, r16
    3b22:	c8 01       	movw	r24, r16
    3b24:	b7 01       	movw	r22, r14
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e0       	ldi	r20, 0x00	; 0
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	0e 94 01 19 	call	0x3202	; 0x3202 <__cmpsf2>
    3b32:	88 23       	and	r24, r24
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <strtod+0x21a>
    3b36:	4a c0       	rjmp	.+148    	; 0x3bcc <strtod+0x2ae>
    3b38:	97 fe       	sbrs	r9, 7
    3b3a:	0d c0       	rjmp	.+26     	; 0x3b56 <strtod+0x238>
    3b3c:	22 e2       	ldi	r18, 0x22	; 34
    3b3e:	e2 2e       	mov	r14, r18
    3b40:	24 e0       	ldi	r18, 0x04	; 4
    3b42:	f2 2e       	mov	r15, r18
    3b44:	90 94       	com	r9
    3b46:	81 94       	neg	r8
    3b48:	91 08       	sbc	r9, r1
    3b4a:	93 94       	inc	r9
    3b4c:	c0 e2       	ldi	r28, 0x20	; 32
    3b4e:	d0 e0       	ldi	r29, 0x00	; 0
    3b50:	00 e0       	ldi	r16, 0x00	; 0
    3b52:	10 e0       	ldi	r17, 0x00	; 0
    3b54:	12 c0       	rjmp	.+36     	; 0x3b7a <strtod+0x25c>
    3b56:	9a e3       	ldi	r25, 0x3A	; 58
    3b58:	e9 2e       	mov	r14, r25
    3b5a:	94 e0       	ldi	r25, 0x04	; 4
    3b5c:	f9 2e       	mov	r15, r25
    3b5e:	f6 cf       	rjmp	.-20     	; 0x3b4c <strtod+0x22e>
    3b60:	f7 01       	movw	r30, r14
    3b62:	25 91       	lpm	r18, Z+
    3b64:	35 91       	lpm	r19, Z+
    3b66:	45 91       	lpm	r20, Z+
    3b68:	54 91       	lpm	r21, Z+
    3b6a:	c6 01       	movw	r24, r12
    3b6c:	b5 01       	movw	r22, r10
    3b6e:	0e 94 36 1b 	call	0x366c	; 0x366c <__mulsf3>
    3b72:	5b 01       	movw	r10, r22
    3b74:	6c 01       	movw	r12, r24
    3b76:	8c 1a       	sub	r8, r28
    3b78:	9d 0a       	sbc	r9, r29
    3b7a:	8c 16       	cp	r8, r28
    3b7c:	9d 06       	cpc	r9, r29
    3b7e:	84 f7       	brge	.-32     	; 0x3b60 <strtod+0x242>
    3b80:	d5 95       	asr	r29
    3b82:	c7 95       	ror	r28
    3b84:	0f 5f       	subi	r16, 0xFF	; 255
    3b86:	1f 4f       	sbci	r17, 0xFF	; 255
    3b88:	06 30       	cpi	r16, 0x06	; 6
    3b8a:	11 05       	cpc	r17, r1
    3b8c:	29 f0       	breq	.+10     	; 0x3b98 <strtod+0x27a>
    3b8e:	8c ef       	ldi	r24, 0xFC	; 252
    3b90:	9f ef       	ldi	r25, 0xFF	; 255
    3b92:	e8 0e       	add	r14, r24
    3b94:	f9 1e       	adc	r15, r25
    3b96:	f1 cf       	rjmp	.-30     	; 0x3b7a <strtod+0x25c>
    3b98:	c5 01       	movw	r24, r10
    3b9a:	d6 01       	movw	r26, r12
    3b9c:	7c 01       	movw	r14, r24
    3b9e:	8d 01       	movw	r16, r26
    3ba0:	8c 2d       	mov	r24, r12
    3ba2:	88 0f       	add	r24, r24
    3ba4:	8d 2d       	mov	r24, r13
    3ba6:	88 1f       	adc	r24, r24
    3ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    3baa:	51 f0       	breq	.+20     	; 0x3bc0 <strtod+0x2a2>
    3bac:	c6 01       	movw	r24, r12
    3bae:	b5 01       	movw	r22, r10
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	50 e0       	ldi	r21, 0x00	; 0
    3bb8:	0e 94 01 19 	call	0x3202	; 0x3202 <__cmpsf2>
    3bbc:	88 23       	and	r24, r24
    3bbe:	31 f4       	brne	.+12     	; 0x3bcc <strtod+0x2ae>
    3bc0:	82 e2       	ldi	r24, 0x22	; 34
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	90 93 6e 04 	sts	0x046E, r25
    3bc8:	80 93 6d 04 	sts	0x046D, r24
    3bcc:	7e 2d       	mov	r23, r14
    3bce:	9f 2d       	mov	r25, r15
    3bd0:	80 2f       	mov	r24, r16
    3bd2:	61 2f       	mov	r22, r17
    3bd4:	27 2f       	mov	r18, r23
    3bd6:	39 2f       	mov	r19, r25
    3bd8:	48 2f       	mov	r20, r24
    3bda:	56 2f       	mov	r21, r22
    3bdc:	b9 01       	movw	r22, r18
    3bde:	ca 01       	movw	r24, r20
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	1f 91       	pop	r17
    3be6:	0f 91       	pop	r16
    3be8:	ff 90       	pop	r15
    3bea:	ef 90       	pop	r14
    3bec:	df 90       	pop	r13
    3bee:	cf 90       	pop	r12
    3bf0:	bf 90       	pop	r11
    3bf2:	af 90       	pop	r10
    3bf4:	9f 90       	pop	r9
    3bf6:	8f 90       	pop	r8
    3bf8:	08 95       	ret

00003bfa <isspace>:
    3bfa:	91 11       	cpse	r25, r1
    3bfc:	1e c0       	rjmp	.+60     	; 0x3c3a <__ctype_isfalse>
    3bfe:	80 32       	cpi	r24, 0x20	; 32
    3c00:	19 f0       	breq	.+6      	; 0x3c08 <isspace+0xe>
    3c02:	89 50       	subi	r24, 0x09	; 9
    3c04:	85 50       	subi	r24, 0x05	; 5
    3c06:	d0 f7       	brcc	.-12     	; 0x3bfc <isspace+0x2>
    3c08:	08 95       	ret

00003c0a <strncasecmp_P>:
    3c0a:	fb 01       	movw	r30, r22
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	41 50       	subi	r20, 0x01	; 1
    3c10:	50 40       	sbci	r21, 0x00	; 0
    3c12:	88 f0       	brcs	.+34     	; 0x3c36 <strncasecmp_P+0x2c>
    3c14:	8d 91       	ld	r24, X+
    3c16:	81 34       	cpi	r24, 0x41	; 65
    3c18:	1c f0       	brlt	.+6      	; 0x3c20 <strncasecmp_P+0x16>
    3c1a:	8b 35       	cpi	r24, 0x5B	; 91
    3c1c:	0c f4       	brge	.+2      	; 0x3c20 <strncasecmp_P+0x16>
    3c1e:	80 5e       	subi	r24, 0xE0	; 224
    3c20:	65 91       	lpm	r22, Z+
    3c22:	61 34       	cpi	r22, 0x41	; 65
    3c24:	1c f0       	brlt	.+6      	; 0x3c2c <strncasecmp_P+0x22>
    3c26:	6b 35       	cpi	r22, 0x5B	; 91
    3c28:	0c f4       	brge	.+2      	; 0x3c2c <strncasecmp_P+0x22>
    3c2a:	60 5e       	subi	r22, 0xE0	; 224
    3c2c:	86 1b       	sub	r24, r22
    3c2e:	61 11       	cpse	r22, r1
    3c30:	71 f3       	breq	.-36     	; 0x3c0e <strncasecmp_P+0x4>
    3c32:	99 0b       	sbc	r25, r25
    3c34:	08 95       	ret
    3c36:	88 1b       	sub	r24, r24
    3c38:	fc cf       	rjmp	.-8      	; 0x3c32 <strncasecmp_P+0x28>

00003c3a <__ctype_isfalse>:
    3c3a:	99 27       	eor	r25, r25
    3c3c:	88 27       	eor	r24, r24

00003c3e <__ctype_istrue>:
    3c3e:	08 95       	ret

00003c40 <_exit>:
    3c40:	f8 94       	cli

00003c42 <__stop_program>:
    3c42:	ff cf       	rjmp	.-2      	; 0x3c42 <__stop_program>
