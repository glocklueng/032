
bit1synth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000163e  000016d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000163e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800122  00800122  000016f4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022f  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000785  00000000  00000000  00001943  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ff  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073c  00000000  00000000  000022c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f1  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000169  00000000  00000000  00002dd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__ctors_end>
       4:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
       8:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
       c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      10:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      14:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      18:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      1c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      20:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      24:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      28:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      2c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      30:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__vector_12>
      34:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      38:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      3c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      40:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      44:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      48:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_18>
      4c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      50:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      54:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      58:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      5c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      60:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      64:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      68:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      6c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      70:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      74:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      78:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      7c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      80:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      84:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>
      88:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__bad_interrupt>

0000008c <freqvals>:
      8c:	ff ff ff ff ff ff ff ff ff ff 61 fd 28 ef ff ff     ..........a.(...
      9c:	ff ff ff ff ff ff ff ff ff ff 61 fd 28 ef bc e1     ..........a.(...
      ac:	10 d5 1b c9 d1 bd 2a b3 1c a9 9e 9f a8 96 34 8e     ......*.......4.
      bc:	38 86 b0 7e 94 77 dd 70 88 6a 8d 64 e8 5e 95 59     8..~.w.p.j.d.^.Y
      cc:	8d 54 ce 4f 54 4b 19 47 1c 43 57 3f c9 3b 6e 38     .T.OTK.G.CW?.;n8
      dc:	43 35 46 32 74 2f ca 2c 46 2a e7 27 a9 25 8c 23     C5F2t/.,F*.'.%.#
      ec:	8d 21 ab 1f e4 1d 37 1c a1 1a 23 19 b9 17 64 16     .!....7...#...d.
      fc:	23 15 f3 13 d4 12 c6 11 c6 10 d5 0f f2 0e 1b 0e     #...............
     10c:	50 0d 91 0c dc 0b 32 0b 91 0a f9 09 6a 09 e2 08     P.....2.....j...
     11c:	63 08 ea 07 78 07 0d 07 a8 06 48 06 ee 05 98 05     c...x.....H.....
     12c:	48 05 fc 04 b4 04 71 04 31 04 f5 03 bc 03 86 03     H.....q.1.......
     13c:	53 03 23 03 f6 02 cc 02 a3 02 7d 02 5a 02 38 02     S.#.......}.Z.8.
     14c:	18 02 fa 01 dd 01 c2 01 a9 01 91 01 7b 01 65 01     ............{.e.
     15c:	51 01 3e 01 2c 01 1b 01 0b 01 fc 00 ee 00 e1 00     Q.>.,...........
     16c:	d4 00 c8 00 bd 00 b2 00 a8 00 9f 00 96 00 8d 00     ................
     17c:	85 00 7e 00 77 00 70 00 6a 00 64 00 5e 00 59 00     ..~.w.p.j.d.^.Y.

0000018c <led30>:
     18c:	00 7f 03 1f 03 c7 03 f1 01 3f 03 4f 03 d3 03 f4     .........?.O....
     19c:	00 f7 00 df 03 37 03 cd 01 f3 01 cf 03 73 03 dc     .....7.......s..
     1ac:	01 fc 00 fd 03 7c 03 3d                             .....|.=

000001b4 <smb>:
     1b4:	90 4f 7f 80 4f 00 90 4d 7f 80 4d 00 90 4a 7f 80     .O..O..M..M..J..
     1c4:	4a 00 90 47 7f 80 47 00 90 43 7f 80 43 00 90 41     J..G..G..C..C..A
     1d4:	7f 80 41 00 90 3e 7f 80 3e 00 90 3b 7f 80 3b 00     ..A..>..>..;..;.
     1e4:	90 37 7f 80 37 00 90 36 7f 80 36 00 90 35 7f 80     .7..7..6..6..5..
     1f4:	35 00 90 32 7f 80 32 00 90 2f 7f 80 2f 00 90 2b     5..2..2../../..+
     204:	7f 80 2b 00 90 37 7f 80 37 00 90 47 7f 80 47 00     ..+..7..7..G..G.
     214:	90 43 7f 80 43 00 90 40 7f 80 40 00 90 43 7f 80     .C..C..@..@..C..
     224:	43 00 90 48 7f 80 48 00 90 40 7f 80 40 00 90 43     C..H..H..@..@..C
     234:	7f 80 43 00 90 3f 7f 80 3f 00 90 43 7f 80 43 00     ..C..?..?..C..C.
     244:	90 47 7f 80 47 00 90 3f 7f 80 3f 00 90 43 7f 80     .G..G..?..?..C..
     254:	43 00 90 40 7f 80 40 00 90 45 7f 80 45 00 90 47     C..@..@..E..E..G
     264:	7f 80 47 00 90 48 7f 80 48 00 90 4a 7f 80 4a 00     ..G..H..H..J..J.
     274:	90 40 7f 80 40 00 90 43 7f 80 43 00 90 48 7f 80     .@..@..C..C..H..
     284:	48 00 90 40 7f 80 40 00 90 43 7f 80 43 00 90 3f     H..@..@..C..C..?
     294:	7f 80 3f 00 90 43 7f 80 43 00 90 47 7f 80 47 00     ..?..C..C..G..G.
     2a4:	90 41 7f 80 41 00 90 43 7f 80 43 00 90 48 7f 80     .A..A..C..C..H..
     2b4:	48 00 90 37 7f 80 37 00 90 39 7f 80 39 00 90 37     H..7..7..9..9..7
     2c4:	7f 80 37 00 90 3b 7f 80 3b 00 90 39 7f 80 39 00     ..7..;..;..9..9.
     2d4:	90 37 7f 80 37 00 90 3e 7f 80 3e 00 90 43 7f 80     .7..7..>..>..C..
     2e4:	43 00 90 47 7f 80 47 00 90 3e 7f 80 3e 00 90 43     C..G..G..>..>..C
     2f4:	7f 80 43 00 90 3d 7f 80 3d 00 90 43 7f 80 43 00     ..C..=..=..C..C.
     304:	90 46 7f 80 46 00 90 3d 7f 80 3d 00 90 43 7f 80     .F..F..=..=..C..
     314:	43 00 90 3e 7f 80 3e 00 90 45 7f 80 45 00 90 47     C..>..>..E..E..G
     324:	7f 80 47 00 90 48 7f 80 48 00 90 49 7f 80 49 00     ..G..H..H..I..I.
     334:	90 3e 7f 80 3e 00 90 43 7f 80 43 00 90 47 7f 80     .>..>..C..C..G..
     344:	47 00 90 3e 7f 80 3e 00 90 43 7f 80 43 00 90 3b     G..>..>..C..C..;
     354:	7f 80 3b 00 90 43 7f 80 43 00 90 47 7f 80 47 00     ..;..C..C..G..G.
     364:	90 41 7f 80 41 00 90 47 7f 80 47 00 90 48 7f 80     .A..A..G..G..H..
     374:	48 00 90 37 7f 80 37 00 90 39 7f 80 39 00 90 37     H..7..7..9..9..7
     384:	7f 80 37 00 90 3b 7f 80 3b 00 90 3c 7f 80 3c 00     ..7..;..;..<..<.
     394:	90 3e 7f 80 3e 00 90 4c 7f 80 4c 00 90 48 7f 80     .>..>..L..L..H..
     3a4:	48 00 90 4c 7f 80 4c 00 90 48 7f 80 48 00 90 4a     H..L..L..H..H..J
     3b4:	7f 80 4a 00 90 47 7f 80 47 00 90 4a 7f 80 4a 00     ..J..G..G..J..J.
     3c4:	90 47 7f 80 47 00 90 49 7f 80 49 00 90 46 7f 80     .G..G..I..I..F..
     3d4:	46 00 90 49 7f 80 49 00 90 46 7f 80 46 00 90 49     F..I..I..F..F..I
     3e4:	7f 80 49 00 90 49 7f 80 49 00 90 49 7f 80 49 00     ..I..I..I..I..I.
     3f4:	90 4f 7f 80 4f 00 90 4a 7f 80 4a 00 90 45 7f 80     .O..O..J..J..E..
     404:	45 00 90 4a 7f 80 4a 00 90 45 7f 80 45 00 90 49     E..J..J..E..E..I
     414:	7f 80 49 00 90 45 7f 80 45 00 90 49 7f 80 49 00     ..I..E..E..I..I.
     424:	90 45 7f 80 45 00 90 48 7f 80 48 00 90 45 7f 80     .E..E..H..H..E..
     434:	45 00 90 48 7f 80 48 00 90 45 7f 80 45 00 90 47     E..H..H..E..E..G
     444:	7f 80 47 00 90 47 7f 80 47 00 90 47 7f 80 47 00     ..G..G..G..G..G.
     454:	90 4d 7f 80 4d 00 90 3c 7f 80 3c 00 90 43 7f 80     .M..M..<..<..C..
     464:	43 00 90 43 7f 80 43 00 90 3c 7f 80 3c 00 90 43     C..C..C..<..<..C
     474:	7f 80 43 00 90 41 7f 80 41 00 90 43 7f 80 43 00     ..C..A..A..C..C.
     484:	90 47 7f 80 47 00 90 47 7f 80 47 00 90 47 7f 80     .G..G..G..G..G..
     494:	47 00 90 47 7f 80 47 00 90 41 7f 80 41 00 90 3c     G..G..G..A..A..<
     4a4:	7f 80 3c 00 90 37 7f 80 37 00 90 34 7f 80 34 00     ..<..7..7..4..4.
     4b4:	90 32 7f 80 32 00 90 30 7f 80 30 00 90 2b 7f 80     .2..2..0..0..+..
     4c4:	2b 00 90 28 7f 80 28 00 90 26 7f 80 26 00 90 30     +..(..(..&..&..0
     4d4:	7f 80 30 00 90 3a 7f 80 3a 00 90 39 7f 80 39 00     ..0..:..:..9..9.
     4e4:	90 38 7f 80 38 00 90 37 7f 80 37 00 90 36 7f 80     .8..8..7..7..6..
     4f4:	36 00 90 35 7f 80 35 00 90 34 7f 80 34 00 90 33     6..5..5..4..4..3
     504:	7f 80 33 00 90 32 7f 80 32 00 90 31 7f 80 31 00     ..3..2..2..1..1.
     514:	90 2f 7f 80 2f 00 90 2d 7f 80 2d 00 90 2c 7f 80     ./../..-..-..,..
     524:	2c 00 90 2b 7f 80 2b 00 90 2a 7f 80 2a 00 90 3f     ,..+..+..*..*..?
     534:	7f 80 3f 00 90 3e 7f 80 3e 00 90 3d 7f 80 3d 00     ..?..>..>..=..=.
     544:	90 3c 7f 80 3c 00 90 3b 7f 80 3b 00 90 3a 7f 80     .<..<..;..;..:..
     554:	3a 00 90 39 7f 80 39 00 90 38 7f 80 38 00 90 37     :..9..9..8..8..7
     564:	7f 80 37 00 90 36 7f 80 36 00 90 35 7f 80 35 00     ..7..6..6..5..5.
     574:	90 34 7f 80 34 00 90 32 7f 80 32 00 90 31 7f 80     .4..4..2..2..1..
     584:	31 00 90 30 7f 80 30 00 90 2f 7f 80 2f 00           1..0..0../../.

00000592 <daft>:
     592:	90 3e 7f 80 3e 00 90 36 7f 80 36 00 90 3b 7f 80     .>..>..6..6..;..
     5a2:	3b 00 90 36 7f 80 36 00 90 3e 7f 80 3e 00 90 36     ;..6..6..>..>..6
     5b2:	7f 80 36 00 90 3b 7f 80 3b 00 90 36 7f 80 36 00     ..6..;..;..6..6.
     5c2:	90 3e 7f 80 3e 00 90 36 7f 80 36 00 90 3b 7f 80     .>..>..6..6..;..
     5d2:	3b 00 90 36 7f 80 36 00 90 3e 7f 80 3e 00 90 36     ;..6..6..>..>..6
     5e2:	7f 80 36 00 90 3b 7f 80 3b 00 90 36 7f 80 36 00     ..6..;..;..6..6.
     5f2:	90 3e 7f 80 3e 00 90 38 7f 80 38 00 90 3b 7f 80     .>..>..8..8..;..
     602:	3b 00 90 38 7f 80 38 00 90 3e 7f 80 3e 00 90 38     ;..8..8..>..>..8
     612:	7f 80 38 00 90 3b 7f 80 3b 00 90 38 7f 80 38 00     ..8..;..;..8..8.
     622:	90 3e 7f 80 3e 00 90 38 7f 80 38 00 90 3b 7f 80     .>..>..8..8..;..
     632:	3b 00 90 38 7f 80 38 00 90 3e 7f 80 3e 00 90 38     ;..8..8..>..>..8
     642:	7f 80 38 00 90 3b 7f 80 3b 00 90 38 7f 80 38 00     ..8..;..;..8..8.
     652:	90 43 7f 80 43 00 90 3b 7f 80 3b 00 90 40 7f 80     .C..C..;..;..@..
     662:	40 00 90 3b 7f 80 3b 00 90 43 7f 80 43 00 90 3b     @..;..;..C..C..;
     672:	7f 80 3b 00 90 40 7f 80 40 00 90 3b 7f 80 3b 00     ..;..@..@..;..;.
     682:	90 43 7f 80 43 00 90 3b 7f 80 3b 00 90 40 7f 80     .C..C..;..;..@..
     692:	40 00 90 3b 7f 80 3b 00 90 43 7f 80 43 00 90 3b     @..;..;..C..C..;
     6a2:	7f 80 3b 00 90 40 7f 80 40 00 90 3b 7f 80 3b 00     ..;..@..@..;..;.
     6b2:	90 40 7f 80 40 00 90 39 7f 80 39 00 90 3d 7f 80     .@..@..9..9..=..
     6c2:	3d 00 90 39 7f 80 39 00 90 40 7f 80 40 00 90 39     =..9..9..@..@..9
     6d2:	7f 80 39 00 90 3d 7f 80 3d 00 90 39 7f 80 39 00     ..9..=..=..9..9.
     6e2:	90 40 7f 80 40 00 90 39 7f 80 39 00 90 3d 7f 80     .@..@..9..9..=..
     6f2:	3d 00 90 39 7f 80 39 00 90 40 7f 80 40 00 90 39     =..9..9..@..@..9
     702:	7f 80 39 00 90 3d 7f 80 3d 00 90 39 7f 80 39 00     ..9..=..=..9..9.
     712:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     722:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     732:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     742:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     752:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     762:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     772:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     782:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     792:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     7a2:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     7b2:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     7c2:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     7d2:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     7e2:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     7f2:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     802:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     812:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     822:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     832:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     842:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     852:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     862:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     872:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     882:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     892:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     8a2:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     8b2:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     8c2:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     8d2:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     8e2:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     8f2:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     902:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     912:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     922:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     932:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     942:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     952:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     962:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     972:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     982:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     992:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     9a2:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     9b2:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     9c2:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     9d2:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     9e2:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     9f2:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     a02:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     a12:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     a22:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     a32:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     a42:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     a52:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     a62:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     a72:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     a82:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     a92:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     aa2:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     ab2:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     ac2:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     ad2:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     ae2:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     af2:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     b02:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     b12:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     b22:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     b32:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     b42:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     b52:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     b62:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     b72:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     b82:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     b92:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     ba2:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     bb2:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     bc2:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     bd2:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     be2:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     bf2:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     c02:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     c12:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     c22:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     c32:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     c42:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     c52:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     c62:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     c72:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     c82:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     c92:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     ca2:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     cb2:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     cc2:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     cd2:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     ce2:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     cf2:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     d02:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     d12:	90 4a 7f 80 4a 00                                   .J..J.

00000d18 <__ctors_end>:
     d18:	11 24       	eor	r1, r1
     d1a:	1f be       	out	0x3f, r1	; 63
     d1c:	cf ef       	ldi	r28, 0xFF	; 255
     d1e:	d0 e1       	ldi	r29, 0x10	; 16
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	cd bf       	out	0x3d, r28	; 61

00000d24 <__do_copy_data>:
     d24:	11 e0       	ldi	r17, 0x01	; 1
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b1 e0       	ldi	r27, 0x01	; 1
     d2a:	ee e3       	ldi	r30, 0x3E	; 62
     d2c:	f6 e1       	ldi	r31, 0x16	; 22
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <.do_copy_data_start>

00000d30 <.do_copy_data_loop>:
     d30:	05 90       	lpm	r0, Z+
     d32:	0d 92       	st	X+, r0

00000d34 <.do_copy_data_start>:
     d34:	a2 32       	cpi	r26, 0x22	; 34
     d36:	b1 07       	cpc	r27, r17
     d38:	d9 f7       	brne	.-10     	; 0xd30 <.do_copy_data_loop>

00000d3a <__do_clear_bss>:
     d3a:	11 e0       	ldi	r17, 0x01	; 1
     d3c:	a2 e2       	ldi	r26, 0x22	; 34
     d3e:	b1 e0       	ldi	r27, 0x01	; 1
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <.do_clear_bss_start>

00000d42 <.do_clear_bss_loop>:
     d42:	1d 92       	st	X+, r1

00000d44 <.do_clear_bss_start>:
     d44:	aa 37       	cpi	r26, 0x7A	; 122
     d46:	b1 07       	cpc	r27, r17
     d48:	e1 f7       	brne	.-8      	; 0xd42 <.do_clear_bss_loop>
     d4a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <main>
     d4e:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_exit>

00000d52 <__bad_interrupt>:
     d52:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d56 <lfsr_rand>:

// faster noise generator than rand()
uint16_t lfsr_rand()
{
  static uint16_t lfsr = 0xACE1u;
  lfsr = (lfsr >> 1) ^ (-(lfsr & 1u) & 0xB400u);
     d56:	80 91 1f 01 	lds	r24, 0x011F
     d5a:	90 91 20 01 	lds	r25, 0x0120
     d5e:	9c 01       	movw	r18, r24
     d60:	21 70       	andi	r18, 0x01	; 1
     d62:	30 70       	andi	r19, 0x00	; 0
     d64:	30 95       	com	r19
     d66:	21 95       	neg	r18
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	20 70       	andi	r18, 0x00	; 0
     d6c:	34 7b       	andi	r19, 0xB4	; 180
     d6e:	96 95       	lsr	r25
     d70:	87 95       	ror	r24
     d72:	28 27       	eor	r18, r24
     d74:	39 27       	eor	r19, r25
     d76:	30 93 20 01 	sts	0x0120, r19
     d7a:	20 93 1f 01 	sts	0x011F, r18
  return lfsr;
}
     d7e:	c9 01       	movw	r24, r18
     d80:	08 95       	ret

00000d82 <midi_init>:
	// set baud rate

#define BAUD 31250

#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
     d82:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = UBRRL_VALUE;
     d86:	8f e1       	ldi	r24, 0x1F	; 31
     d88:	89 b9       	out	0x09, r24	; 9
#if USE_2X
	UCSR0A |= _BV(U2X0);
#else
	UCSR0A &= ~_BV(U2X0);
     d8a:	59 98       	cbi	0x0b, 1	; 11
#endif

	// enable rx, turn on interrupt
	// 8 data bits, no parity, 1 stop bit
	UCSR0B = _BV(RXCIE0) | _BV(RXEN0);
     d8c:	80 e9       	ldi	r24, 0x90	; 144
     d8e:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     d90:	86 e0       	ldi	r24, 0x06	; 6
     d92:	80 93 95 00 	sts	0x0095, r24
}
     d96:	08 95       	ret

00000d98 <processMessage>:
	processMessage( lastByte); 

}

void processMessage( unsigned char byte) 
{
     d98:	98 2f       	mov	r25, r24
  
  // is it a status byte?
  if (byte >= 0x80)
     d9a:	87 ff       	sbrs	r24, 7
     d9c:	20 c0       	rjmp	.+64     	; 0xdde <processMessage+0x46>
  {
    usemidi = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 60 01 	sts	0x0160, r24
    switch (byte)
     da4:	9c 3f       	cpi	r25, 0xFC	; 252
     da6:	a1 f0       	breq	.+40     	; 0xdd0 <processMessage+0x38>
     da8:	9d 3f       	cpi	r25, 0xFD	; 253
     daa:	28 f4       	brcc	.+10     	; 0xdb6 <processMessage+0x1e>
     dac:	90 38       	cpi	r25, 0x80	; 128
     dae:	49 f0       	breq	.+18     	; 0xdc2 <processMessage+0x2a>
     db0:	90 39       	cpi	r25, 0x90	; 144
     db2:	81 f4       	brne	.+32     	; 0xdd4 <processMessage+0x3c>
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <processMessage+0x30>
     db6:	9e 3f       	cpi	r25, 0xFE	; 254
     db8:	09 f4       	brne	.+2      	; 0xdbc <processMessage+0x24>
     dba:	5a c0       	rjmp	.+180    	; 0xe70 <processMessage+0xd8>
     dbc:	9f 3f       	cpi	r25, 0xFF	; 255
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <processMessage+0x3c>
     dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <processMessage+0x38>
    {
      case 0x80:
        midimode = MIDI_NOTE_OFF;
     dc2:	80 93 62 01 	sts	0x0162, r24
     dc6:	2e c0       	rjmp	.+92     	; 0xe24 <processMessage+0x8c>
        midibytesleft = 2;
        break;
      case 0x90:
        midimode = MIDI_NOTE_ON;
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	80 93 62 01 	sts	0x0162, r24
     dce:	2b c0       	rjmp	.+86     	; 0xe26 <processMessage+0x8e>
        break;
      case 0xFE: // active sense
        break;
      case 0xFC: // stop
      case 0xFF: // reset
        noteon = 0;
     dd0:	10 92 61 01 	sts	0x0161, r1
      default:
        midimode = MIDI_OTHER;
     dd4:	10 92 62 01 	sts	0x0162, r1
        midibytesleft = 0;
     dd8:	10 92 63 01 	sts	0x0163, r1
     ddc:	08 95       	ret
    }
  }
  else
  {
    // save the second and third bytes
    if (midibytesleft > 0)
     dde:	20 91 63 01 	lds	r18, 0x0163
     de2:	12 16       	cp	r1, r18
     de4:	4c f4       	brge	.+18     	; 0xdf8 <processMessage+0x60>
    {
      midibuffer[0] = midibuffer[1];
     de6:	80 91 79 01 	lds	r24, 0x0179
     dea:	80 93 78 01 	sts	0x0178, r24
      midibuffer[1] = byte;
     dee:	90 93 79 01 	sts	0x0179, r25
      midibytesleft--;
     df2:	21 50       	subi	r18, 0x01	; 1
     df4:	20 93 63 01 	sts	0x0163, r18
    }

    // got all bytes; parse message
    if (midibytesleft <= 0)
     df8:	80 91 63 01 	lds	r24, 0x0163
     dfc:	18 16       	cp	r1, r24
     dfe:	c4 f1       	brlt	.+112    	; 0xe70 <processMessage+0xd8>
    {
      uint8_t note = midibuffer[0];
     e00:	20 91 78 01 	lds	r18, 0x0178
      switch (midimode)
     e04:	80 91 62 01 	lds	r24, 0x0162
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	19 f0       	breq	.+6      	; 0xe12 <processMessage+0x7a>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	81 f5       	brne	.+96     	; 0xe70 <processMessage+0xd8>
     e10:	0d c0       	rjmp	.+26     	; 0xe2c <processMessage+0x94>
      {
        case MIDI_NOTE_OFF:
          if (note == midilastnote)
     e12:	80 91 0b 01 	lds	r24, 0x010B
     e16:	28 17       	cp	r18, r24
     e18:	29 f4       	brne	.+10     	; 0xe24 <processMessage+0x8c>
          {
            noteon = 0;
     e1a:	10 92 61 01 	sts	0x0161, r1
            midilastnote = 0xFF;
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	80 93 0b 01 	sts	0x010B, r24
          }
          midibytesleft = 2; // receive more note off events
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	80 93 63 01 	sts	0x0163, r24
     e2a:	08 95       	ret
          break;
        case MIDI_NOTE_ON:
          // turn note off if velocity is zero
          if (midibuffer[1] == 0 && note == midilastnote)
     e2c:	80 91 79 01 	lds	r24, 0x0179
     e30:	88 23       	and	r24, r24
     e32:	51 f4       	brne	.+20     	; 0xe48 <processMessage+0xb0>
     e34:	80 91 0b 01 	lds	r24, 0x010B
     e38:	28 17       	cp	r18, r24
     e3a:	b9 f4       	brne	.+46     	; 0xe6a <processMessage+0xd2>
          {
            noteon = 0;
     e3c:	10 92 61 01 	sts	0x0161, r1
            midilastnote = 0xFF;
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	80 93 0b 01 	sts	0x010B, r24
     e46:	11 c0       	rjmp	.+34     	; 0xe6a <processMessage+0xd2>
          }
          else if (midibuffer[1] != 0)
          {
            noteon = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 93 61 01 	sts	0x0161, r24
            pitch = pgm_read_word(freqvals+note);
     e4e:	e2 2f       	mov	r30, r18
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	e4 57       	subi	r30, 0x74	; 116
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	85 91       	lpm	r24, Z+
     e5c:	94 91       	lpm	r25, Z+
     e5e:	90 93 09 01 	sts	0x0109, r25
     e62:	80 93 08 01 	sts	0x0108, r24
            midilastnote = note;
     e66:	20 93 0b 01 	sts	0x010B, r18
          }
          midibytesleft = 2; // receive more note on events
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	80 93 63 01 	sts	0x0163, r24
     e70:	08 95       	ret

00000e72 <__vector_18>:

static volatile unsigned char lastByte;

// midi receive interrupt
ISR(USART0_RX_vect)
{
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
	lastByte = UDR0 ;
     e94:	8c b1       	in	r24, 0x0c	; 12
     e96:	80 93 75 01 	sts	0x0175, r24

	processMessage( lastByte); 
     e9a:	80 91 75 01 	lds	r24, 0x0175
     e9e:	0e 94 cc 06 	call	0xd98	; 0xd98 <processMessage>

}
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <__vector_12>:
}


// timer interrupt; update audio out
ISR(TIMER1_COMPA_vect)
{
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31

  uint8_t shiftout;
  if (wavenum != 7)
     ee6:	80 91 5f 01 	lds	r24, 0x015F
     eea:	87 30       	cpi	r24, 0x07	; 7
     eec:	e1 f0       	breq	.+56     	; 0xf26 <__vector_12+0x62>
  {
    shiftout = waveform & 1;
     eee:	20 91 76 01 	lds	r18, 0x0176
     ef2:	30 91 77 01 	lds	r19, 0x0177
    waveform >>= 1;
     ef6:	80 91 76 01 	lds	r24, 0x0176
     efa:	90 91 77 01 	lds	r25, 0x0177
     efe:	96 95       	lsr	r25
     f00:	87 95       	ror	r24
     f02:	90 93 77 01 	sts	0x0177, r25
     f06:	80 93 76 01 	sts	0x0176, r24
    if (shiftout)
     f0a:	32 2f       	mov	r19, r18
     f0c:	31 70       	andi	r19, 0x01	; 1
     f0e:	20 ff       	sbrs	r18, 0
     f10:	0e c0       	rjmp	.+28     	; 0xf2e <__vector_12+0x6a>
      waveform |= (1 << 15);
     f12:	80 91 76 01 	lds	r24, 0x0176
     f16:	90 91 77 01 	lds	r25, 0x0177
     f1a:	90 68       	ori	r25, 0x80	; 128
     f1c:	90 93 77 01 	sts	0x0177, r25
     f20:	80 93 76 01 	sts	0x0176, r24
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <__vector_12+0x6a>
  }
  else
  {
    shiftout = lfsr_rand() & 1;
     f26:	0e 94 ab 06 	call	0xd56	; 0xd56 <lfsr_rand>
     f2a:	38 2f       	mov	r19, r24
     f2c:	31 70       	andi	r19, 0x01	; 1
  }

  // apply envelope
  shiftout &= envval;
     f2e:	20 91 0c 01 	lds	r18, 0x010C
  
  // mute if note off
  shiftout &= noteon;
     f32:	90 91 61 01 	lds	r25, 0x0161

//	if(noteon)
//		PORTC 	= waveform;

	if (noteon) {
     f36:	80 91 61 01 	lds	r24, 0x0161
     f3a:	88 23       	and	r24, r24
     f3c:	49 f0       	breq	.+18     	; 0xf50 <__vector_12+0x8c>
  {
    shiftout = lfsr_rand() & 1;
  }

  // apply envelope
  shiftout &= envval;
     f3e:	92 23       	and	r25, r18
//		PORTC 	= waveform;

	if (noteon) {

  // update audio pin (we're using all pins for more volume ), using  0xff-knobs[PITCH_KNOB].val; will let you use the pitch slider as volume
  if (shiftout) 
     f40:	93 23       	and	r25, r19
     f42:	29 f0       	breq	.+10     	; 0xf4e <__vector_12+0x8a>
    PORTC = 0xff-knobs[PITCH_KNOB].val;
     f44:	80 91 3b 01 	lds	r24, 0x013B
     f48:	80 95       	com	r24
     f4a:	85 bb       	out	0x15, r24	; 21
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <__vector_12+0x8c>
  else
	PORTC =0;
     f4e:	15 ba       	out	0x15, r1	; 21
}
}
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <read_adc>:

// sample an ADC channel
void read_adc(knob_t *k)
{
     f72:	fc 01       	movw	r30, r24

  uint16_t val = ADCL;
     f74:	34 b1       	in	r19, 0x04	; 4
  val += (ADCH << 8);
     f76:	25 b1       	in	r18, 0x05	; 5
  // accumulate value
  k->accum += val;
     f78:	92 2f       	mov	r25, r18
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	83 0f       	add	r24, r19
     f7e:	91 1d       	adc	r25, r1
     f80:	9c 01       	movw	r18, r24
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	a4 81       	ldd	r26, Z+4	; 0x04
     f8c:	b5 81       	ldd	r27, Z+5	; 0x05
     f8e:	28 0f       	add	r18, r24
     f90:	39 1f       	adc	r19, r25
     f92:	4a 1f       	adc	r20, r26
     f94:	5b 1f       	adc	r21, r27
     f96:	22 83       	std	Z+2, r18	; 0x02
     f98:	33 83       	std	Z+3, r19	; 0x03
     f9a:	44 83       	std	Z+4, r20	; 0x04
     f9c:	55 83       	std	Z+5, r21	; 0x05

  // take average when timer overflows
  if (adctimer == 0)
     f9e:	80 91 22 01 	lds	r24, 0x0122
     fa2:	88 23       	and	r24, r24
     fa4:	69 f4       	brne	.+26     	; 0xfc0 <read_adc+0x4e>
  {
    k->val = k->accum / NUM_ADC_SAMPLES;
     fa6:	75 e0       	ldi	r23, 0x05	; 5
     fa8:	56 95       	lsr	r21
     faa:	47 95       	ror	r20
     fac:	37 95       	ror	r19
     fae:	27 95       	ror	r18
     fb0:	7a 95       	dec	r23
     fb2:	d1 f7       	brne	.-12     	; 0xfa8 <read_adc+0x36>
     fb4:	31 83       	std	Z+1, r19	; 0x01
     fb6:	20 83       	st	Z, r18
    k->accum = 0;
     fb8:	12 82       	std	Z+2, r1	; 0x02
     fba:	13 82       	std	Z+3, r1	; 0x03
     fbc:	14 82       	std	Z+4, r1	; 0x04
     fbe:	15 82       	std	Z+5, r1	; 0x05
     fc0:	08 95       	ret

00000fc2 <update_pitch>:

// set new pitch
void update_pitch()
{
  uint16_t newpitch = (usemidi) ? pitch-(lfoval*4U)
                                : 200U + ((pitch-lfoval)*4U);
     fc2:	80 91 60 01 	lds	r24, 0x0160
     fc6:	40 91 67 01 	lds	r20, 0x0167
     fca:	50 91 68 01 	lds	r21, 0x0168
     fce:	20 91 08 01 	lds	r18, 0x0108
     fd2:	30 91 09 01 	lds	r19, 0x0109
     fd6:	88 23       	and	r24, r24
     fd8:	39 f0       	breq	.+14     	; 0xfe8 <update_pitch+0x26>
     fda:	44 0f       	add	r20, r20
     fdc:	55 1f       	adc	r21, r21
     fde:	44 0f       	add	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	24 1b       	sub	r18, r20
     fe4:	35 0b       	sbc	r19, r21
     fe6:	08 c0       	rjmp	.+16     	; 0xff8 <update_pitch+0x36>
     fe8:	2e 5c       	subi	r18, 0xCE	; 206
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	24 1b       	sub	r18, r20
     fee:	35 0b       	sbc	r19, r21
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
  if (newpitch != outpitch)
     ff8:	80 91 64 01 	lds	r24, 0x0164
     ffc:	90 91 65 01 	lds	r25, 0x0165
    1000:	28 17       	cp	r18, r24
    1002:	39 07       	cpc	r19, r25
    1004:	69 f0       	breq	.+26     	; 0x1020 <update_pitch+0x5e>
  {
    outpitch = newpitch;
    1006:	30 93 65 01 	sts	0x0165, r19
    100a:	20 93 64 01 	sts	0x0164, r18
    if (TCNT1 > outpitch)
    100e:	8c b5       	in	r24, 0x2c	; 44
    1010:	9d b5       	in	r25, 0x2d	; 45
    1012:	28 17       	cp	r18, r24
    1014:	39 07       	cpc	r19, r25
    1016:	10 f4       	brcc	.+4      	; 0x101c <update_pitch+0x5a>
      TCNT1 = 0;
    1018:	1d bc       	out	0x2d, r1	; 45
    101a:	1c bc       	out	0x2c, r1	; 44
    OCR1A = outpitch;
    101c:	3b bd       	out	0x2b, r19	; 43
    101e:	2a bd       	out	0x2a, r18	; 42
    1020:	08 95       	ret

00001022 <update_lfo>:
}

// update lfo state
void update_lfo()
{
  switch (lfowavenum)
    1022:	40 91 0a 01 	lds	r20, 0x010A
    1026:	43 30       	cpi	r20, 0x03	; 3
    1028:	09 f4       	brne	.+2      	; 0x102c <update_lfo+0xa>
    102a:	5a c0       	rjmp	.+180    	; 0x10e0 <update_lfo+0xbe>
    102c:	44 30       	cpi	r20, 0x04	; 4
    102e:	60 f4       	brcc	.+24     	; 0x1048 <update_lfo+0x26>
    1030:	41 30       	cpi	r20, 0x01	; 1
    1032:	b1 f1       	breq	.+108    	; 0x10a0 <update_lfo+0x7e>
    1034:	20 91 66 01 	lds	r18, 0x0166
    1038:	60 91 69 01 	lds	r22, 0x0169
    103c:	70 91 6a 01 	lds	r23, 0x016A
    1040:	42 30       	cpi	r20, 0x02	; 2
    1042:	08 f0       	brcs	.+2      	; 0x1046 <update_lfo+0x24>
    1044:	41 c0       	rjmp	.+130    	; 0x10c8 <update_lfo+0xa6>
    1046:	0d c0       	rjmp	.+26     	; 0x1062 <update_lfo+0x40>
    1048:	45 30       	cpi	r20, 0x05	; 5
    104a:	09 f4       	brne	.+2      	; 0x104e <update_lfo+0x2c>
    104c:	6c c0       	rjmp	.+216    	; 0x1126 <__stack+0x27>
    104e:	45 30       	cpi	r20, 0x05	; 5
    1050:	08 f4       	brcc	.+2      	; 0x1054 <update_lfo+0x32>
    1052:	53 c0       	rjmp	.+166    	; 0x10fa <update_lfo+0xd8>
    1054:	46 30       	cpi	r20, 0x06	; 6
    1056:	09 f4       	brne	.+2      	; 0x105a <update_lfo+0x38>
    1058:	85 c0       	rjmp	.+266    	; 0x1164 <__stack+0x65>
    105a:	47 30       	cpi	r20, 0x07	; 7
    105c:	09 f0       	breq	.+2      	; 0x1060 <update_lfo+0x3e>
    105e:	bb c0       	rjmp	.+374    	; 0x11d6 <__stack+0xd7>
    1060:	aa c0       	rjmp	.+340    	; 0x11b6 <__stack+0xb7>
  {
    case 0: // triangle
      lfoval = (lfotimer*lfodelta) >> 8;
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	26 9f       	mul	r18, r22
    1066:	c0 01       	movw	r24, r0
    1068:	27 9f       	mul	r18, r23
    106a:	90 0d       	add	r25, r0
    106c:	36 9f       	mul	r19, r22
    106e:	90 0d       	add	r25, r0
    1070:	11 24       	eor	r1, r1
    1072:	49 2f       	mov	r20, r25
    1074:	55 27       	eor	r21, r21
    1076:	50 93 68 01 	sts	0x0168, r21
    107a:	40 93 67 01 	sts	0x0167, r20
      if (lfotimer >= lfofreq/2)
    107e:	80 91 59 01 	lds	r24, 0x0159
    1082:	90 91 5a 01 	lds	r25, 0x015A
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	28 17       	cp	r18, r24
    108c:	39 07       	cpc	r19, r25
    108e:	08 f4       	brcc	.+2      	; 0x1092 <update_lfo+0x70>
    1090:	a2 c0       	rjmp	.+324    	; 0x11d6 <__stack+0xd7>
        lfoval = lfodepth - lfoval;
    1092:	80 91 5b 01 	lds	r24, 0x015B
    1096:	90 91 5c 01 	lds	r25, 0x015C
    109a:	84 1b       	sub	r24, r20
    109c:	95 0b       	sbc	r25, r21
    109e:	97 c0       	rjmp	.+302    	; 0x11ce <__stack+0xcf>
      break;
    case 1: // sawtooth up
      lfoval = (lfotimer*lfodelta) >> 8;
    10a0:	80 91 66 01 	lds	r24, 0x0166
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	20 91 69 01 	lds	r18, 0x0169
    10aa:	30 91 6a 01 	lds	r19, 0x016A
    10ae:	ac 01       	movw	r20, r24
    10b0:	42 9f       	mul	r20, r18
    10b2:	c0 01       	movw	r24, r0
    10b4:	43 9f       	mul	r20, r19
    10b6:	90 0d       	add	r25, r0
    10b8:	52 9f       	mul	r21, r18
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	90 93 67 01 	sts	0x0167, r25
    10c2:	10 92 68 01 	sts	0x0168, r1
    10c6:	87 c0       	rjmp	.+270    	; 0x11d6 <__stack+0xd7>
      break;
    case 2: // sawtooth down
      lfoval = lfodepth - ((lfotimer*lfodelta) >> 8);
    10c8:	82 2f       	mov	r24, r18
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	86 9f       	mul	r24, r22
    10ce:	90 01       	movw	r18, r0
    10d0:	87 9f       	mul	r24, r23
    10d2:	30 0d       	add	r19, r0
    10d4:	96 9f       	mul	r25, r22
    10d6:	30 0d       	add	r19, r0
    10d8:	11 24       	eor	r1, r1
    10da:	23 2f       	mov	r18, r19
    10dc:	33 27       	eor	r19, r19
    10de:	5f c0       	rjmp	.+190    	; 0x119e <__stack+0x9f>
      break;
    case 3: // square
      lfoval = (lfotimer >= lfofreq/2) ? lfodepth : 0;
    10e0:	20 91 66 01 	lds	r18, 0x0166
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	80 91 59 01 	lds	r24, 0x0159
    10ea:	90 91 5a 01 	lds	r25, 0x015A
    10ee:	96 95       	lsr	r25
    10f0:	87 95       	ror	r24
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	90 f4       	brcc	.+36     	; 0x111c <__stack+0x1d>
    10f8:	0e c0       	rjmp	.+28     	; 0x1116 <__stack+0x17>
      break;
    case 4: // half square
      lfoval = (lfotimer < lfofreq/4) ? lfodepth : 0;
    10fa:	20 91 66 01 	lds	r18, 0x0166
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	80 91 59 01 	lds	r24, 0x0159
    1104:	90 91 5a 01 	lds	r25, 0x015A
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	96 95       	lsr	r25
    110e:	87 95       	ror	r24
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	18 f0       	brcs	.+6      	; 0x111c <__stack+0x1d>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	59 c0       	rjmp	.+178    	; 0x11ce <__stack+0xcf>
    111c:	80 91 5b 01 	lds	r24, 0x015B
    1120:	90 91 5c 01 	lds	r25, 0x015C
    1124:	54 c0       	rjmp	.+168    	; 0x11ce <__stack+0xcf>
      break;
    case 5: // half sawtooth up
      if (lfotimer < lfofreq/2)
    1126:	80 91 66 01 	lds	r24, 0x0166
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	80 91 59 01 	lds	r24, 0x0159
    1132:	90 91 5a 01 	lds	r25, 0x015A
    1136:	96 95       	lsr	r25
    1138:	87 95       	ror	r24
    113a:	28 17       	cp	r18, r24
    113c:	39 07       	cpc	r19, r25
    113e:	b0 f5       	brcc	.+108    	; 0x11ac <__stack+0xad>
        lfoval = (lfotimer*lfodelta) >> 7;
    1140:	80 91 69 01 	lds	r24, 0x0169
    1144:	90 91 6a 01 	lds	r25, 0x016A
    1148:	ac 01       	movw	r20, r24
    114a:	24 9f       	mul	r18, r20
    114c:	c0 01       	movw	r24, r0
    114e:	25 9f       	mul	r18, r21
    1150:	90 0d       	add	r25, r0
    1152:	34 9f       	mul	r19, r20
    1154:	90 0d       	add	r25, r0
    1156:	11 24       	eor	r1, r1
    1158:	88 0f       	add	r24, r24
    115a:	89 2f       	mov	r24, r25
    115c:	88 1f       	adc	r24, r24
    115e:	99 0b       	sbc	r25, r25
    1160:	91 95       	neg	r25
    1162:	35 c0       	rjmp	.+106    	; 0x11ce <__stack+0xcf>
      else
        lfoval = 0;
      break;
    case 6: // half sawtooth down
      if (lfotimer < lfofreq/2)
    1164:	80 91 66 01 	lds	r24, 0x0166
    1168:	48 2f       	mov	r20, r24
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	80 91 59 01 	lds	r24, 0x0159
    1170:	90 91 5a 01 	lds	r25, 0x015A
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	48 17       	cp	r20, r24
    117a:	59 07       	cpc	r21, r25
    117c:	b8 f4       	brcc	.+46     	; 0x11ac <__stack+0xad>
        lfoval = lfodepth - ((lfotimer*lfodelta) >> 7);
    117e:	80 91 69 01 	lds	r24, 0x0169
    1182:	90 91 6a 01 	lds	r25, 0x016A
    1186:	48 9f       	mul	r20, r24
    1188:	90 01       	movw	r18, r0
    118a:	49 9f       	mul	r20, r25
    118c:	30 0d       	add	r19, r0
    118e:	58 9f       	mul	r21, r24
    1190:	30 0d       	add	r19, r0
    1192:	11 24       	eor	r1, r1
    1194:	22 0f       	add	r18, r18
    1196:	23 2f       	mov	r18, r19
    1198:	22 1f       	adc	r18, r18
    119a:	33 0b       	sbc	r19, r19
    119c:	31 95       	neg	r19
    119e:	80 91 5b 01 	lds	r24, 0x015B
    11a2:	90 91 5c 01 	lds	r25, 0x015C
    11a6:	82 1b       	sub	r24, r18
    11a8:	93 0b       	sbc	r25, r19
    11aa:	11 c0       	rjmp	.+34     	; 0x11ce <__stack+0xcf>
      else
        lfoval = 0;
    11ac:	10 92 68 01 	sts	0x0168, r1
    11b0:	10 92 67 01 	sts	0x0167, r1
    11b4:	10 c0       	rjmp	.+32     	; 0x11d6 <__stack+0xd7>
      break;
    case 7: // random
      if (lfotimer == 0)
    11b6:	80 91 66 01 	lds	r24, 0x0166
    11ba:	88 23       	and	r24, r24
    11bc:	61 f4       	brne	.+24     	; 0x11d6 <__stack+0xd7>
        lfoval = lfsr_rand() % lfodepth;
    11be:	0e 94 ab 06 	call	0xd56	; 0xd56 <lfsr_rand>
    11c2:	60 91 5b 01 	lds	r22, 0x015B
    11c6:	70 91 5c 01 	lds	r23, 0x015C
    11ca:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
    11ce:	90 93 68 01 	sts	0x0168, r25
    11d2:	80 93 67 01 	sts	0x0167, r24
  if (lfotimer < lfofreq/2)
   ;//set_bit(PORT(LEDS), LFO_LED_PIN);
  else
    ;//clear_bit(PORT(LEDS), LFO_LED_PIN);

  lfotimer++;
    11d6:	80 91 66 01 	lds	r24, 0x0166
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	80 93 66 01 	sts	0x0166, r24
  if (lfotimer >= lfofreq)
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	20 91 59 01 	lds	r18, 0x0159
    11e6:	30 91 5a 01 	lds	r19, 0x015A
    11ea:	82 17       	cp	r24, r18
    11ec:	93 07       	cpc	r25, r19
    11ee:	10 f0       	brcs	.+4      	; 0x11f4 <__stack+0xf5>
    lfotimer = 0;
    11f0:	10 92 66 01 	sts	0x0166, r1
    11f4:	08 95       	ret

000011f6 <update_env>:

// update envelope state
void update_env()
{
  // increment envelope timer and wrap around
  envtimer++;
    11f6:	80 91 6b 01 	lds	r24, 0x016B
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	80 93 6b 01 	sts	0x016B, r24
  if (envtimer >= envfreq)
    1200:	90 91 5d 01 	lds	r25, 0x015D
    1204:	89 17       	cp	r24, r25
    1206:	10 f0       	brcs	.+4      	; 0x120c <update_env+0x16>
    envtimer = 0;
    1208:	10 92 6b 01 	sts	0x016B, r1

  // determine output value
  envval = (envtimer <= envwidth);
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	90 91 6b 01 	lds	r25, 0x016B
    1212:	80 91 5e 01 	lds	r24, 0x015E
    1216:	89 17       	cp	r24, r25
    1218:	08 f0       	brcs	.+2      	; 0x121c <update_env+0x26>
    121a:	21 e0       	ldi	r18, 0x01	; 1
    121c:	20 93 0c 01 	sts	0x010C, r18
  if (envval)
    1220:	80 91 0c 01 	lds	r24, 0x010C
    ;//set_bit(PORT(LEDS),ENV_LED_PIN);
  else
    ;//clear_bit(PORT(LEDS),ENV_LED_PIN);
}
    1224:	08 95       	ret

00001226 <update_synth_params>:

// update parameters based on knob values
void update_synth_params()
{
  // disregard pitch if midi enabled
  if (!usemidi)
    1226:	80 91 60 01 	lds	r24, 0x0160
    122a:	88 23       	and	r24, r24
    122c:	41 f4       	brne	.+16     	; 0x123e <update_synth_params+0x18>
    pitch = knobs[PITCH_KNOB].val;
    122e:	80 91 3b 01 	lds	r24, 0x013B
    1232:	90 91 3c 01 	lds	r25, 0x013C
    1236:	90 93 09 01 	sts	0x0109, r25
    123a:	80 93 08 01 	sts	0x0108, r24
  
  uint8_t newwavenum = knobs[AUDIO_WF_KNOB].val >> 7;
    123e:	20 91 47 01 	lds	r18, 0x0147
    1242:	30 91 48 01 	lds	r19, 0x0148
    1246:	22 0f       	add	r18, r18
    1248:	23 2f       	mov	r18, r19
    124a:	22 1f       	adc	r18, r18
    124c:	33 0b       	sbc	r19, r19
    124e:	31 95       	neg	r19
  if (newwavenum != wavenum)
    1250:	80 91 5f 01 	lds	r24, 0x015F
    1254:	82 17       	cp	r24, r18
    1256:	91 f0       	breq	.+36     	; 0x127c <update_synth_params+0x56>
  {
    wavenum = newwavenum;
    1258:	20 93 5f 01 	sts	0x015F, r18
    waveform = waveforms[wavenum];
    125c:	e0 91 5f 01 	lds	r30, 0x015F
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	e3 5f       	subi	r30, 0xF3	; 243
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	90 93 77 01 	sts	0x0177, r25
    1272:	80 93 76 01 	sts	0x0176, r24
    ledpulse = 1;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 6c 01 	sts	0x016C, r24
  }

  uint8_t newlfowavenum = knobs[LFO_WF_KNOB].val >> 7;
    127c:	20 91 23 01 	lds	r18, 0x0123
    1280:	30 91 24 01 	lds	r19, 0x0124
    1284:	22 0f       	add	r18, r18
    1286:	23 2f       	mov	r18, r19
    1288:	22 1f       	adc	r18, r18
    128a:	33 0b       	sbc	r19, r19
    128c:	31 95       	neg	r19
  if (newlfowavenum != lfowavenum)
    128e:	80 91 0a 01 	lds	r24, 0x010A
    1292:	82 17       	cp	r24, r18
    1294:	29 f0       	breq	.+10     	; 0x12a0 <update_synth_params+0x7a>
  {
    lfowavenum = newlfowavenum;
    1296:	20 93 0a 01 	sts	0x010A, r18
    ledpulse = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 93 6c 01 	sts	0x016C, r24
  }

  // pulse the power LED to indicate waveform changes
  if (ledpulse)
    12a0:	80 91 6c 01 	lds	r24, 0x016C
    12a4:	88 23       	and	r24, r24
    12a6:	19 f0       	breq	.+6      	; 0x12ae <update_synth_params+0x88>
  {
    ;//clear_bit(PORT(LEDS), PWR_LED_PIN);
    ledpulse--;
    12a8:	81 50       	subi	r24, 0x01	; 1
    12aa:	80 93 6c 01 	sts	0x016C, r24
  }
  else
    ;//set_bit(PORT(LEDS), PWR_LED_PIN);    
  
  lfofreq = knobs[LFO_FREQ_KNOB].val >> 2;
    12ae:	60 91 35 01 	lds	r22, 0x0135
    12b2:	70 91 36 01 	lds	r23, 0x0136
    12b6:	76 95       	lsr	r23
    12b8:	67 95       	ror	r22
    12ba:	76 95       	lsr	r23
    12bc:	67 95       	ror	r22
    12be:	70 93 5a 01 	sts	0x015A, r23
    12c2:	60 93 59 01 	sts	0x0159, r22
  lfodepth = knobs[LFO_DEPTH_KNOB].val >> 2;
    12c6:	20 91 2f 01 	lds	r18, 0x012F
    12ca:	30 91 30 01 	lds	r19, 0x0130
    12ce:	36 95       	lsr	r19
    12d0:	27 95       	ror	r18
    12d2:	36 95       	lsr	r19
    12d4:	27 95       	ror	r18
    12d6:	30 93 5c 01 	sts	0x015C, r19
    12da:	20 93 5b 01 	sts	0x015B, r18
  lfodelta = (lfofreq) ? (lfodepth*256U) / lfofreq : 0;
    12de:	61 15       	cp	r22, r1
    12e0:	71 05       	cpc	r23, r1
    12e2:	19 f4       	brne	.+6      	; 0x12ea <update_synth_params+0xc4>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <update_synth_params+0xce>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	92 2f       	mov	r25, r18
    12ee:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodhi4>
    12f2:	cb 01       	movw	r24, r22
    12f4:	90 93 6a 01 	sts	0x016A, r25
    12f8:	80 93 69 01 	sts	0x0169, r24
  
  envfreq = knobs[ENV_FREQ_KNOB].val >> 2;
    12fc:	80 91 41 01 	lds	r24, 0x0141
    1300:	90 91 42 01 	lds	r25, 0x0142
    1304:	96 95       	lsr	r25
    1306:	87 95       	ror	r24
    1308:	96 95       	lsr	r25
    130a:	87 95       	ror	r24
    130c:	80 93 5d 01 	sts	0x015D, r24
  envwidth = knobs[ENV_WIDTH_KNOB].val >> 2;
    1310:	80 91 29 01 	lds	r24, 0x0129
    1314:	90 91 2a 01 	lds	r25, 0x012A
    1318:	96 95       	lsr	r25
    131a:	87 95       	ror	r24
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	80 93 5e 01 	sts	0x015E, r24
}
    1324:	08 95       	ret

00001326 <SetRC>:


// Write to LED Array - Takes in a Row and Column
// this routine is written to help understand how the process works, not fast.
void SetRC( unsigned char R, unsigned char C ) 
{	
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
	unsigned char b1,b2;
	unsigned char port_a, ddr_a;

	if ( C  > 4  ) C = 0;
    132e:	65 30       	cpi	r22, 0x05	; 5
    1330:	08 f0       	brcs	.+2      	; 0x1334 <SetRC+0xe>
    1332:	60 e0       	ldi	r22, 0x00	; 0
	if ( R  > 5  ) R = 0;
    1334:	86 30       	cpi	r24, 0x06	; 6
    1336:	08 f0       	brcs	.+2      	; 0x133a <SetRC+0x14>
    1338:	80 e0       	ldi	r24, 0x00	; 0

	// get current values, Can't cache PORTA/DDRA since the sound interrupt can change, 
	// should cache DDRD6/PORTD6 instead
	port_a = PORTA;
    133a:	2b b3       	in	r18, 0x1b	; 27
	ddr_a = DDRA;
    133c:	3a b3       	in	r19, 0x1a	; 26

	//	read two values from array, we use pgm_read_byte because the data is in program memory space
	// its 4*2 because there are 4 leds in each column, and two bytes per led
	b1 = pgm_read_byte(&led30[ (R*(4*2))+(C*2)   ] ) ;
    133e:	a8 2f       	mov	r26, r24
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	aa 0f       	add	r26, r26
    1344:	bb 1f       	adc	r27, r27
    1346:	aa 0f       	add	r26, r26
    1348:	bb 1f       	adc	r27, r27
    134a:	a6 0f       	add	r26, r22
    134c:	b1 1d       	adc	r27, r1
    134e:	aa 0f       	add	r26, r26
    1350:	bb 1f       	adc	r27, r27
    1352:	cd 01       	movw	r24, r26
    1354:	84 57       	subi	r24, 0x74	; 116
    1356:	9e 4f       	sbci	r25, 0xFE	; 254
    1358:	fc 01       	movw	r30, r24
    135a:	44 91       	lpm	r20, Z+
	b2 = pgm_read_byte(&led30[((R*(4*2))+(C*2))+1] ) ;
    135c:	a3 57       	subi	r26, 0x73	; 115
    135e:	be 4f       	sbci	r27, 0xFE	; 254
    1360:	fd 01       	movw	r30, r26
    1362:	54 91       	lpm	r21, Z+

	//	b1 = led30[ (R*(4*2))+(C*2)   ]  ;
	//	b2 = led30[((R*(4*2))+(C*2))+1];
	
	// if 10 == 11 then set to don't care (input ) tristate for PB0
	if( GET_BIT( b1,1 )==1 && GET_BIT( b1,0 )==1 ) {
    1364:	84 2f       	mov	r24, r20
    1366:	86 95       	lsr	r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	8c 01       	movw	r16, r24
    136c:	01 70       	andi	r16, 0x01	; 1
    136e:	10 70       	andi	r17, 0x00	; 0
    1370:	80 ff       	sbrs	r24, 0
    1372:	05 c0       	rjmp	.+10     	; 0x137e <SetRC+0x58>
    1374:	40 ff       	sbrs	r20, 0
    1376:	03 c0       	rjmp	.+6      	; 0x137e <SetRC+0x58>

		CLR_BIT(ddr_a,2 );
    1378:	93 2f       	mov	r25, r19
    137a:	9b 7f       	andi	r25, 0xFB	; 251
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <SetRC+0x5c>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,2 );
    137e:	93 2f       	mov	r25, r19
    1380:	94 60       	ori	r25, 0x04	; 4
	}

	// if 76 == 11 then set to don't care (input ) tristate  for PB1
	if( GET_BIT( b2,7 )==1 && GET_BIT( b2,6 )==1 ) {
    1382:	57 ff       	sbrs	r21, 7
    1384:	0a c0       	rjmp	.+20     	; 0x139a <SetRC+0x74>
    1386:	85 2f       	mov	r24, r21
    1388:	82 95       	swap	r24
    138a:	86 95       	lsr	r24
    138c:	86 95       	lsr	r24
    138e:	83 70       	andi	r24, 0x03	; 3
    1390:	80 ff       	sbrs	r24, 0
    1392:	03 c0       	rjmp	.+6      	; 0x139a <SetRC+0x74>

		CLR_BIT(ddr_a,1 );
    1394:	39 2f       	mov	r19, r25
    1396:	3d 7f       	andi	r19, 0xFD	; 253
    1398:	02 c0       	rjmp	.+4      	; 0x139e <SetRC+0x78>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,1 );
    139a:	39 2f       	mov	r19, r25
    139c:	32 60       	ori	r19, 0x02	; 2
	}

	// if 54 == 11 then set to don't care (input ) tristate for PB2
	if( GET_BIT( b2,5 )==1 && GET_BIT( b2,4 )==1 ) {
    139e:	85 2f       	mov	r24, r21
    13a0:	82 95       	swap	r24
    13a2:	86 95       	lsr	r24
    13a4:	87 70       	andi	r24, 0x07	; 7
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	ec 01       	movw	r28, r24
    13aa:	c1 70       	andi	r28, 0x01	; 1
    13ac:	d0 70       	andi	r29, 0x00	; 0
    13ae:	80 ff       	sbrs	r24, 0
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <SetRC+0x9a>
    13b2:	85 2f       	mov	r24, r21
    13b4:	82 95       	swap	r24
    13b6:	8f 70       	andi	r24, 0x0F	; 15
    13b8:	80 ff       	sbrs	r24, 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <SetRC+0x9a>

		CLR_BIT(ddr_a,0 );
    13bc:	3e 7f       	andi	r19, 0xFE	; 254
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <SetRC+0x9c>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,0 );
    13c0:	31 60       	ori	r19, 0x01	; 1
	}

	// if 32 == 11 then set to don't care (input ) tristate for PB3
	if( GET_BIT( b2,3 )==1 && GET_BIT( b2,2 )==1 ) {
    13c2:	85 2f       	mov	r24, r21
    13c4:	86 95       	lsr	r24
    13c6:	86 95       	lsr	r24
    13c8:	86 95       	lsr	r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	dc 01       	movw	r26, r24
    13ce:	a1 70       	andi	r26, 0x01	; 1
    13d0:	b0 70       	andi	r27, 0x00	; 0
    13d2:	80 ff       	sbrs	r24, 0
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <SetRC+0xbe>
    13d6:	85 2f       	mov	r24, r21
    13d8:	86 95       	lsr	r24
    13da:	86 95       	lsr	r24
    13dc:	80 ff       	sbrs	r24, 0
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <SetRC+0xbe>

		CLR_BIT(ddr_a,4 );
    13e0:	3f 7e       	andi	r19, 0xEF	; 239
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <SetRC+0xc0>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,4 );
    13e4:	30 61       	ori	r19, 0x10	; 16
	}

	// if 10 == 11 then set to don't care (input ) tristate for PB4
	if( GET_BIT( b2,1 )==1 && GET_BIT( b2,0 )==1 ) {
    13e6:	85 2f       	mov	r24, r21
    13e8:	86 95       	lsr	r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	bc 01       	movw	r22, r24
    13ee:	61 70       	andi	r22, 0x01	; 1
    13f0:	70 70       	andi	r23, 0x00	; 0
    13f2:	80 ff       	sbrs	r24, 0
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <SetRC+0xda>
    13f6:	50 ff       	sbrs	r21, 0
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <SetRC+0xda>

		CLR_BIT(ddr_a,3 );
    13fa:	93 2f       	mov	r25, r19
    13fc:	97 7f       	andi	r25, 0xF7	; 247
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <SetRC+0xde>

	} else { 

		// otherwise its an output
		SET_BIT(ddr_a ,3 );
    1400:	93 2f       	mov	r25, r19
    1402:	98 60       	ori	r25, 0x08	; 8

	/// all of the DDR's are set


	// if 10 == 00 then set to low for PB0
	if( GET_BIT( b1,1 )==0 && GET_BIT( b1,0 )==0 ) {
    1404:	01 2b       	or	r16, r17
    1406:	29 f4       	brne	.+10     	; 0x1412 <SetRC+0xec>
    1408:	40 fd       	sbrc	r20, 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <SetRC+0xea>

		CLR_BIT(port_a,2); //set to off
    140c:	2b 7f       	andi	r18, 0xFB	; 251
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <SetRC+0xec>

	// if 32 == 01 then set to high for PB0
	} else if( GET_BIT( b1,1 )==0 && GET_BIT( b1,0 )==1 ) { 

		// set to on
		SET_BIT(port_a ,2 );
    1410:	24 60       	ori	r18, 0x04	; 4
	}

	// if 76 == 00 then set to low for PB1
	if( GET_BIT( b2,7 )==0 && GET_BIT( b2,6 )==0 ) {
    1412:	57 fd       	sbrc	r21, 7
    1414:	0a c0       	rjmp	.+20     	; 0x142a <SetRC+0x104>
    1416:	85 2f       	mov	r24, r21
    1418:	82 95       	swap	r24
    141a:	86 95       	lsr	r24
    141c:	86 95       	lsr	r24
    141e:	83 70       	andi	r24, 0x03	; 3
    1420:	80 fd       	sbrc	r24, 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <SetRC+0x102>

		CLR_BIT(port_a,1); //set to off
    1424:	2d 7f       	andi	r18, 0xFD	; 253
    1426:	01 c0       	rjmp	.+2      	; 0x142a <SetRC+0x104>

	// if 32 == 01 then set to high for PB1
	} else if( GET_BIT( b2,7 )==0 && GET_BIT( b2,6 ) ==1 ) { 

		// set to on
		SET_BIT(port_a ,1 );
    1428:	22 60       	ori	r18, 0x02	; 2
	}


	// if 54 == 00 then set to low for PB2
	if( GET_BIT( b2,5 )==0 && GET_BIT( b2,4 )==0 ) {
    142a:	cd 2b       	or	r28, r29
    142c:	41 f4       	brne	.+16     	; 0x143e <SetRC+0x118>
    142e:	85 2f       	mov	r24, r21
    1430:	82 95       	swap	r24
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	80 fd       	sbrc	r24, 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <SetRC+0x116>

		CLR_BIT(port_a,0); //set to off
    1438:	2e 7f       	andi	r18, 0xFE	; 254
    143a:	01 c0       	rjmp	.+2      	; 0x143e <SetRC+0x118>

	// if 32 == 01 then set to high for PB2
	} else if( GET_BIT( b2,5 )==0 && GET_BIT( b2,4 )==1 ) { 

		// set to on
		SET_BIT(port_a ,0 );
    143c:	21 60       	ori	r18, 0x01	; 1
	}

	// if 32 == 00 then set to low for PB3
	if( GET_BIT( b2,3 )==0 && GET_BIT( b2,2 )==0 ) {
    143e:	ab 2b       	or	r26, r27
    1440:	41 f4       	brne	.+16     	; 0x1452 <SetRC+0x12c>
    1442:	85 2f       	mov	r24, r21
    1444:	86 95       	lsr	r24
    1446:	86 95       	lsr	r24
    1448:	80 fd       	sbrc	r24, 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <SetRC+0x12a>

		CLR_BIT(port_a,4); //set to off
    144c:	2f 7e       	andi	r18, 0xEF	; 239
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <SetRC+0x12c>

	// if 32 == 01 then set to high for PB3
	} else if( GET_BIT( b2,3 ) ==0 && GET_BIT( b2,2 )==1 ) { 

		// set to on
		SET_BIT(port_a ,4 );
    1450:	20 61       	ori	r18, 0x10	; 16
	}

	// if 10 == 00 then set to low for PB4
	if( GET_BIT( b2,1 )==0 && GET_BIT( b2,0 )==0 ) {
    1452:	67 2b       	or	r22, r23
    1454:	29 f4       	brne	.+10     	; 0x1460 <SetRC+0x13a>
    1456:	50 fd       	sbrc	r21, 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <SetRC+0x138>

		CLR_BIT(port_a,3); //set to off
    145a:	27 7f       	andi	r18, 0xF7	; 247
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <SetRC+0x13a>

	// if 32 == 01 then set to high for PB4
	} else if( GET_BIT( b2,1)==0 && GET_BIT( b2,0 )==1 ) { 

		// set to on
		SET_BIT(port_a ,3 );
    145e:	28 60       	ori	r18, 0x08	; 8
	}

	//set all at once.
	PORTA = port_a;
    1460:	2b bb       	out	0x1b, r18	; 27
	DDRA = ddr_a;
    1462:	9a bb       	out	0x1a, r25	; 26
}
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <scrollLEDS>:

void scrollLEDS(void)
{
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
	static int c = 0;
	static int r = 0;

	static unsigned short count = 0;

	count ++ ;
    1476:	80 91 6d 01 	lds	r24, 0x016D
    147a:	90 91 6e 01 	lds	r25, 0x016E
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	90 93 6e 01 	sts	0x016E, r25
    1484:	80 93 6d 01 	sts	0x016D, r24

	if ( count < 10  ) return;
    1488:	0a 97       	sbiw	r24, 0x0a	; 10
    148a:	60 f1       	brcs	.+88     	; 0x14e4 <scrollLEDS+0x76>

	count = 0;
    148c:	10 92 6e 01 	sts	0x016E, r1
    1490:	10 92 6d 01 	sts	0x016D, r1

	SetRC(r,c);
    1494:	00 91 6f 01 	lds	r16, 0x016F
    1498:	10 91 70 01 	lds	r17, 0x0170
    149c:	c0 91 71 01 	lds	r28, 0x0171
    14a0:	d0 91 72 01 	lds	r29, 0x0172
    14a4:	80 2f       	mov	r24, r16
    14a6:	6c 2f       	mov	r22, r28
    14a8:	0e 94 93 09 	call	0x1326	; 0x1326 <SetRC>

	r++ ;
    14ac:	0f 5f       	subi	r16, 0xFF	; 255
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	10 93 70 01 	sts	0x0170, r17
    14b4:	00 93 6f 01 	sts	0x016F, r16

	if ( r == 5 )  {
    14b8:	05 30       	cpi	r16, 0x05	; 5
    14ba:	11 05       	cpc	r17, r1
    14bc:	49 f4       	brne	.+18     	; 0x14d0 <scrollLEDS+0x62>
		r = 0;
    14be:	10 92 70 01 	sts	0x0170, r1
    14c2:	10 92 6f 01 	sts	0x016F, r1
		c++ ;
    14c6:	21 96       	adiw	r28, 0x01	; 1
    14c8:	d0 93 72 01 	sts	0x0172, r29
    14cc:	c0 93 71 01 	sts	0x0171, r28
	}

	if ( c == 4 ) { 
    14d0:	80 91 71 01 	lds	r24, 0x0171
    14d4:	90 91 72 01 	lds	r25, 0x0172
    14d8:	04 97       	sbiw	r24, 0x04	; 4
    14da:	21 f4       	brne	.+8      	; 0x14e4 <scrollLEDS+0x76>
		c = 0;
    14dc:	10 92 72 01 	sts	0x0172, r1
    14e0:	10 92 71 01 	sts	0x0171, r1
	}
	 
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <main>:
  envfreq = knobs[ENV_FREQ_KNOB].val >> 2;
  envwidth = knobs[ENV_WIDTH_KNOB].val >> 2;
}

int main(void)
{
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
  // enable outputs
  DDR(AUDIO) |= _BV(AUDIO_PIN);
    14f8:	a0 9a       	sbi	0x14, 0	; 20
  DDR(LEDS)  |= _BV(ENV_LED_PIN) | _BV(LFO_LED_PIN) | _BV(PWR_LED_PIN);
    14fa:	8a b3       	in	r24, 0x1a	; 26
    14fc:	8c 61       	ori	r24, 0x1C	; 28
    14fe:	8a bb       	out	0x1a, r24	; 26
  DDR(MUXCTL) |= _BV(MUXCTL_PIN);
    1500:	8d 9a       	sbi	0x11, 5	; 17

  DDRC  = 0xff;
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	84 bb       	out	0x14, r24	; 20
  // turn on power LED
  ;//set_bit(PORT(LEDS), PWR_LED_PIN);

  // set up main oscillator
  TCCR1B |= _BV(WGM12);  // enable CTC
    1506:	8e b5       	in	r24, 0x2e	; 46
    1508:	88 60       	ori	r24, 0x08	; 8
    150a:	8e bd       	out	0x2e, r24	; 46
  TIMSK |= _BV(OCIE1A); // enable CTC interrupt
    150c:	87 b7       	in	r24, 0x37	; 55
    150e:	80 61       	ori	r24, 0x10	; 16
    1510:	87 bf       	out	0x37, r24	; 55

  // set up ADC
  ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 1/128 prescaler
    1512:	86 b1       	in	r24, 0x06	; 6
    1514:	87 60       	ori	r24, 0x07	; 7
    1516:	86 b9       	out	0x06, r24	; 6
  ADCSRA |= _BV(ADEN); // enable ADC
    1518:	37 9a       	sbi	0x06, 7	; 6

  // set up midi
  midi_init();
    151a:	0e 94 c1 06 	call	0xd82	; 0xd82 <midi_init>

  sei(); // enable interrupts
    151e:	78 94       	sei
 
  lfowavenum = 0;
    1520:	10 92 0a 01 	sts	0x010A, r1
  wavenum = 0;
    1524:	10 92 5f 01 	sts	0x015F, r1
  waveform = waveforms[wavenum];
    1528:	e0 91 5f 01 	lds	r30, 0x015F
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	ee 0f       	add	r30, r30
    1530:	ff 1f       	adc	r31, r31
    1532:	e3 5f       	subi	r30, 0xF3	; 243
    1534:	fe 4f       	sbci	r31, 0xFE	; 254
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	90 93 77 01 	sts	0x0177, r25
    153e:	80 93 76 01 	sts	0x0176, r24

  update_pitch();
    1542:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <update_pitch>
  TCCR1B |= _BV(CS11); // set prescaler to 8; starts oscillator  
    1546:	8e b5       	in	r24, 0x2e	; 46
    1548:	82 60       	ori	r24, 0x02	; 2
    154a:	8e bd       	out	0x2e, r24	; 46

  adctimer = 0;
    154c:	10 92 22 01 	sts	0x0122, r1
			if( daftIndex == sizeof( smb ) ) {
				daftIndex = 0;

			}

			counter = PLAY_SPEED;
    1550:	fd e2       	ldi	r31, 0x2D	; 45
    1552:	ef 2e       	mov	r14, r31
    1554:	f1 2c       	mov	r15, r1
  adctimer = 0;
  for (;;)
  {
    uint8_t adcchan = 0;

    adctimer++;
    1556:	80 91 22 01 	lds	r24, 0x0122
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	80 93 22 01 	sts	0x0122, r24
    adctimer &= (NUM_ADC_SAMPLES-1);
    1560:	80 91 22 01 	lds	r24, 0x0122
    1564:	8f 71       	andi	r24, 0x1F	; 31
    1566:	80 93 22 01 	sts	0x0122, r24

    // select mux channel group 0
    clear_bit(PORT(MUXCTL), MUXCTL_PIN);
    156a:	95 98       	cbi	0x12, 5	; 18
    156c:	c3 e2       	ldi	r28, 0x23	; 35
    156e:	d1 e0       	ldi	r29, 0x01	; 1
    1570:	10 e0       	ldi	r17, 0x00	; 0

    // read ADC channels
    for (adcchan = 0; adcchan < NUM_ADC_CHANNELS; adcchan++)
    {
      ADMUX = _BV(REFS0) | adcchan;
    1572:	81 2f       	mov	r24, r17
    1574:	80 64       	ori	r24, 0x40	; 64
    1576:	87 b9       	out	0x07, r24	; 7
      ADCSRA |= _BV(ADSC);
    1578:	36 9a       	sbi	0x06, 6	; 6
      loop_until_bit_is_clear(ADCSRA, ADSC);
    157a:	36 99       	sbic	0x06, 6	; 6
    157c:	fe cf       	rjmp	.-4      	; 0x157a <main+0x8c>

      read_adc(knobs+adcchan);
    157e:	ce 01       	movw	r24, r28
    1580:	0e 94 b9 07 	call	0xf72	; 0xf72 <read_adc>

    // select mux channel group 0
    clear_bit(PORT(MUXCTL), MUXCTL_PIN);

    // read ADC channels
    for (adcchan = 0; adcchan < NUM_ADC_CHANNELS; adcchan++)
    1584:	1f 5f       	subi	r17, 0xFF	; 255
    1586:	26 96       	adiw	r28, 0x06	; 6
    1588:	18 30       	cpi	r17, 0x08	; 8
    158a:	99 f7       	brne	.-26     	; 0x1572 <main+0x84>
      read_adc(knobs+adcchan);
    }
   
 
    // update values after we've read averaged values from all knobs
    if (adctimer == 0) {
    158c:	80 91 22 01 	lds	r24, 0x0122
    1590:	88 23       	and	r24, r24
    1592:	11 f4       	brne	.+4      	; 0x1598 <main+0xaa>
      update_synth_params();
    1594:	0e 94 13 09 	call	0x1226	; 0x1226 <update_synth_params>
	}

    update_lfo();
    1598:	0e 94 11 08 	call	0x1022	; 0x1022 <update_lfo>
    update_env();
    159c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <update_env>
    update_pitch();
    15a0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <update_pitch>

	scrollLEDS();
    15a4:	0e 94 37 0a 	call	0x146e	; 0x146e <scrollLEDS>

#if 1

	if( selfPlay ) 
    15a8:	80 91 06 01 	lds	r24, 0x0106
    15ac:	90 91 07 01 	lds	r25, 0x0107
    15b0:	89 2b       	or	r24, r25
    15b2:	89 f2       	breq	.-94     	; 0x1556 <main+0x68>
	{
		if( counter == 0 ) {
    15b4:	80 91 04 01 	lds	r24, 0x0104
    15b8:	90 91 05 01 	lds	r25, 0x0105
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	19 f5       	brne	.+70     	; 0x1606 <main+0x118>

			processMessage(   pgm_read_byte(&smb[daftIndex]) );
    15c0:	e0 91 73 01 	lds	r30, 0x0173
    15c4:	f0 91 74 01 	lds	r31, 0x0174
    15c8:	ec 54       	subi	r30, 0x4C	; 76
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	e4 91       	lpm	r30, Z+
    15ce:	8e 2f       	mov	r24, r30
    15d0:	0e 94 cc 06 	call	0xd98	; 0xd98 <processMessage>

			daftIndex ++; 
    15d4:	80 91 73 01 	lds	r24, 0x0173
    15d8:	90 91 74 01 	lds	r25, 0x0174
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	90 93 74 01 	sts	0x0174, r25
    15e2:	80 93 73 01 	sts	0x0173, r24

			if( daftIndex == sizeof( smb ) ) {
    15e6:	80 91 73 01 	lds	r24, 0x0173
    15ea:	90 91 74 01 	lds	r25, 0x0174
    15ee:	8e 5d       	subi	r24, 0xDE	; 222
    15f0:	93 40       	sbci	r25, 0x03	; 3
    15f2:	21 f4       	brne	.+8      	; 0x15fc <main+0x10e>
				daftIndex = 0;
    15f4:	10 92 74 01 	sts	0x0174, r1
    15f8:	10 92 73 01 	sts	0x0173, r1

			}

			counter = PLAY_SPEED;
    15fc:	f0 92 05 01 	sts	0x0105, r15
    1600:	e0 92 04 01 	sts	0x0104, r14
    1604:	a8 cf       	rjmp	.-176    	; 0x1556 <main+0x68>

		} else {
			counter -- ;
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	90 93 05 01 	sts	0x0105, r25
    160c:	80 93 04 01 	sts	0x0104, r24
    1610:	a2 cf       	rjmp	.-188    	; 0x1556 <main+0x68>

00001612 <__udivmodhi4>:
    1612:	aa 1b       	sub	r26, r26
    1614:	bb 1b       	sub	r27, r27
    1616:	51 e1       	ldi	r21, 0x11	; 17
    1618:	07 c0       	rjmp	.+14     	; 0x1628 <__udivmodhi4_ep>

0000161a <__udivmodhi4_loop>:
    161a:	aa 1f       	adc	r26, r26
    161c:	bb 1f       	adc	r27, r27
    161e:	a6 17       	cp	r26, r22
    1620:	b7 07       	cpc	r27, r23
    1622:	10 f0       	brcs	.+4      	; 0x1628 <__udivmodhi4_ep>
    1624:	a6 1b       	sub	r26, r22
    1626:	b7 0b       	sbc	r27, r23

00001628 <__udivmodhi4_ep>:
    1628:	88 1f       	adc	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	5a 95       	dec	r21
    162e:	a9 f7       	brne	.-22     	; 0x161a <__udivmodhi4_loop>
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	08 95       	ret

0000163a <_exit>:
    163a:	f8 94       	cli

0000163c <__stop_program>:
    163c:	ff cf       	rjmp	.-2      	; 0x163c <__stop_program>
