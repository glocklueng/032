
4bit_layer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  000006e8  0000077c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800200  00800200  0000087c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000034c  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ce  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e9  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f7  00000000  00000000  0000139f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e1  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_12>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_16>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	12 e0       	ldi	r17, 0x02	; 2
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b2 e0       	ldi	r27, 0x02	; 2
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a0 32       	cpi	r26, 0x20	; 32
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 17 03 	call	0x62e	; 0x62e <main>
  c2:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <init_interrupts>:

#include "triangle.h"

void init_interrupts() {
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
  ca:	80 e9       	ldi	r24, 0x90	; 144
  cc:	8a b9       	out	0x0a, r24	; 10

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 95 00 	sts	0x0095, r24

	/* Set the baud rate to 31250 for MIDI */
	UBRR0L = 0x27; // For 20MHz Clock
  d4:	87 e2       	ldi	r24, 0x27	; 39
  d6:	89 b9       	out	0x09, r24	; 9
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	8b b9       	out	0x0b, r24	; 11
	//UBRR0L = 0x13;		// FOr 10MHz Clock

	/* Enable USART Receive interrupt */
	enable_USART_interrupts();

}
  dc:	08 95       	ret

000000de <init_io>:

void init_io() {
	//b0 - b3 of PORT C is output
	DDRC = 0x0F;
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	84 bb       	out	0x14, r24	; 20

	//b4 0 v7 of PORT D is input (MIDI Channel selection)
	DDRD &= 0b00001111;
  e2:	81 b3       	in	r24, 0x11	; 17
  e4:	8f 70       	andi	r24, 0x0F	; 15
  e6:	81 bb       	out	0x11, r24	; 17

	//enable internal pull-up resistors for MIDI Channel selection bits
	PORTD |= 0b11110000;
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	80 6f       	ori	r24, 0xF0	; 240
  ec:	82 bb       	out	0x12, r24	; 18
}
  ee:	08 95       	ret

000000f0 <init_timers>:

void init_timers() {

	//8-bit timer 0 for decay, sweep, vibrato effects?
	//Enable Overflow interrupts for Timer 0
	TIMSK = 0b00000001;
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	97 bf       	out	0x37, r25	; 55

	//Normal counter operation
	TCCR1A = 0b00000000;
  f4:	1f bc       	out	0x2f, r1	; 47

	//Divide by 1024 prescalar
	TCCR1B = 0b00000101;
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	8e bd       	out	0x2e, r24	; 46

	//Start terminal count at zero
	TCNT0 = 0x00;
  fa:	12 be       	out	0x32, r1	; 50

	//16-bit timer 1 for main frequency generation
	TIMSK |= 0b00000010; // Enable A and B compare interrupts
  fc:	87 b7       	in	r24, 0x37	; 55
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	87 bf       	out	0x37, r24	; 55

	TCCR1A = 0b00000001;
 102:	9f bd       	out	0x2f, r25	; 47

	// Prescaler 1, Fast PWM
	TCCR1B = 0b00010001;
 104:	81 e1       	ldi	r24, 0x11	; 17
 106:	8e bd       	out	0x2e, r24	; 46

	//Start count at zero now
	TCNT1H = 0;
 108:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
 10a:	1c bc       	out	0x2c, r1	; 44
}
 10c:	08 95       	ret

0000010e <USART_RX_vect>:
	}
	return 0;
}

/* USART Received byte interrupt (get MIDI byte)*/
ISR(USART_RX_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
	byte_received = UDR0;
 11a:	8c b1       	in	r24, 0x0c	; 12
 11c:	80 93 06 02 	sts	0x0206, r24
	byte_ready = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 00 02 	sts	0x0200, r24
}
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	if(note_on_gate == 1) {
 142:	80 91 13 02 	lds	r24, 0x0213
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	39 f5       	brne	.+78     	; 0x198 <__vector_12+0x66>
		fivebit_counter ++;
 14a:	80 91 14 02 	lds	r24, 0x0214
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	80 93 14 02 	sts	0x0214, r24

		//Reset counter if 'overflowed'
		if(fivebit_counter> 31) fivebit_counter = 0;
 154:	80 32       	cpi	r24, 0x20	; 32
 156:	10 f0       	brcs	.+4      	; 0x15c <__vector_12+0x2a>
 158:	10 92 14 02 	sts	0x0214, r1

		//Each amplitude b0-3 is XNORed with b4 to create output
		unsigned char strobe = (fivebit_counter & 0b00010000) >> 4;
 15c:	20 91 14 02 	lds	r18, 0x0214
 160:	82 2f       	mov	r24, r18
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	80 71       	andi	r24, 0x10	; 16
 166:	90 70       	andi	r25, 0x00	; 0
 168:	68 94       	set
 16a:	13 f8       	bld	r1, 3
 16c:	95 95       	asr	r25
 16e:	87 95       	ror	r24
 170:	16 94       	lsr	r1
 172:	e1 f7       	brne	.-8      	; 0x16c <__vector_12+0x3a>
 174:	98 2f       	mov	r25, r24
		if(strobe == 1) {
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	19 f4       	brne	.+6      	; 0x180 <__vector_12+0x4e>
			amplitude = ~(fivebit_counter ^ 0b00001111);
 17a:	80 ef       	ldi	r24, 0xF0	; 240
 17c:	28 27       	eor	r18, r24
 17e:	01 c0       	rjmp	.+2      	; 0x182 <__vector_12+0x50>
		} else {
			amplitude = ~(fivebit_counter ^ 0b00000000);
 180:	20 95       	com	r18
 182:	20 93 0b 02 	sts	0x020B, r18
		}
		amplitude &= 0b11101111;
		amplitude |= (strobe << 4);
 186:	92 95       	swap	r25
 188:	90 7f       	andi	r25, 0xF0	; 240
 18a:	80 91 0b 02 	lds	r24, 0x020B
 18e:	8f 7e       	andi	r24, 0xEF	; 239
 190:	98 2b       	or	r25, r24
 192:	90 93 0b 02 	sts	0x020B, r25
		PORTC = amplitude;
 196:	95 bb       	out	0x15, r25	; 21
	}
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31

	/* Sweep */
	if((sweep_enabled == 1) && (sweep_amount> 0) && (note_on_gate == 1)) {
 1ca:	80 91 1b 02 	lds	r24, 0x021B
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <__vector_16+0x2c>
 1d2:	6c c0       	rjmp	.+216    	; 0x2ac <__vector_16+0x104>
 1d4:	20 91 1e 02 	lds	r18, 0x021E
 1d8:	22 23       	and	r18, r18
 1da:	09 f4       	brne	.+2      	; 0x1de <__vector_16+0x36>
 1dc:	67 c0       	rjmp	.+206    	; 0x2ac <__vector_16+0x104>
 1de:	80 91 13 02 	lds	r24, 0x0213
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <__vector_16+0x40>
 1e6:	62 c0       	rjmp	.+196    	; 0x2ac <__vector_16+0x104>
		fake_16_timer ++;
 1e8:	80 91 11 02 	lds	r24, 0x0211
 1ec:	90 91 12 02 	lds	r25, 0x0212
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 12 02 	sts	0x0212, r25
 1f6:	80 93 11 02 	sts	0x0211, r24
		if(fake_16_timer >= 2) {
 1fa:	02 97       	sbiw	r24, 0x02	; 2
 1fc:	08 f4       	brcc	.+2      	; 0x200 <__vector_16+0x58>
 1fe:	56 c0       	rjmp	.+172    	; 0x2ac <__vector_16+0x104>

			unsigned int sweep_mod = sweep_amount * note_table[playing_midi_note] / (8 * playing_midi_note);
 200:	60 91 0a 02 	lds	r22, 0x020A
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	66 0f       	add	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	fb 01       	movw	r30, r22
 20c:	e0 50       	subi	r30, 0x00	; 0
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	01 90       	ld	r0, Z+
 212:	f0 81       	ld	r31, Z
 214:	e0 2d       	mov	r30, r0
 216:	82 2f       	mov	r24, r18
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	9c 01       	movw	r18, r24
 224:	e2 9f       	mul	r30, r18
 226:	c0 01       	movw	r24, r0
 228:	e3 9f       	mul	r30, r19
 22a:	90 0d       	add	r25, r0
 22c:	f2 9f       	mul	r31, r18
 22e:	90 0d       	add	r25, r0
 230:	11 24       	eor	r1, r1
 232:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__udivmodhi4>
 236:	9b 01       	movw	r18, r22

			//Sweep down mode
			if(sweep_direction == SWEEP_DOWN) {
 238:	80 91 19 02 	lds	r24, 0x0219
 23c:	40 91 04 02 	lds	r20, 0x0204
 240:	50 91 05 02 	lds	r21, 0x0205
 244:	88 23       	and	r24, r24
 246:	59 f4       	brne	.+22     	; 0x25e <__vector_16+0xb6>
				if(frequency < MAXIMUM_FREQ) {
 248:	8a e4       	ldi	r24, 0x4A	; 74
 24a:	48 33       	cpi	r20, 0x38	; 56
 24c:	58 07       	cpc	r21, r24
 24e:	98 f4       	brcc	.+38     	; 0x276 <__vector_16+0xce>
					frequency += sweep_mod;
 250:	24 0f       	add	r18, r20
 252:	35 1f       	adc	r19, r21
 254:	30 93 05 02 	sts	0x0205, r19
 258:	20 93 04 02 	sts	0x0204, r18
 25c:	17 c0       	rjmp	.+46     	; 0x28c <__vector_16+0xe4>
				}
			}
			//Sweep up mode
			else
			{
				if(frequency> MINIMUM_FREQ+sweep_mod) {
 25e:	cb 01       	movw	r24, r22
 260:	cc 96       	adiw	r24, 0x3c	; 60
 262:	84 17       	cp	r24, r20
 264:	95 07       	cpc	r25, r21
 266:	38 f4       	brcc	.+14     	; 0x276 <__vector_16+0xce>
					frequency -= sweep_mod;
 268:	46 1b       	sub	r20, r22
 26a:	57 0b       	sbc	r21, r23
 26c:	50 93 05 02 	sts	0x0205, r21
 270:	40 93 04 02 	sts	0x0204, r20
 274:	0b c0       	rjmp	.+22     	; 0x28c <__vector_16+0xe4>
				}
				else
				{
					if(sweep_loop_enabled == 1) {
 276:	80 91 1f 02 	lds	r24, 0x021F
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	29 f4       	brne	.+10     	; 0x288 <__vector_16+0xe0>
						frequency = note_table[playing_midi_note];
 27e:	f0 93 05 02 	sts	0x0205, r31
 282:	e0 93 04 02 	sts	0x0204, r30
 286:	02 c0       	rjmp	.+4      	; 0x28c <__vector_16+0xe4>
					}
					else {
						amplitude = 0;
 288:	10 92 0b 02 	sts	0x020B, r1

	}
}

void update_frequency(unsigned int new_frequency) {
	OCR1A = new_frequency + fine_pitch_bend;
 28c:	80 91 0f 02 	lds	r24, 0x020F
 290:	90 91 10 02 	lds	r25, 0x0210
 294:	20 91 04 02 	lds	r18, 0x0204
 298:	30 91 05 02 	lds	r19, 0x0205
 29c:	82 0f       	add	r24, r18
 29e:	93 1f       	adc	r25, r19
 2a0:	9b bd       	out	0x2b, r25	; 43
 2a2:	8a bd       	out	0x2a, r24	; 42
					}
				}
			}

			update_frequency(frequency);
			fake_16_timer = 0;
 2a4:	10 92 12 02 	sts	0x0212, r1
 2a8:	10 92 11 02 	sts	0x0211, r1
		}

	}

}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <enable_USART_interrupts>:
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
 2ce:	80 e8       	ldi	r24, 0x80	; 128
 2d0:	8b b9       	out	0x0b, r24	; 11
}
 2d2:	08 95       	ret

000002d4 <disable_USART_interrupts>:

void disable_USART_interrupts() {
	UCSR0A = (0 << RXCIE0);
 2d4:	1b b8       	out	0x0b, r1	; 11
}
 2d6:	08 95       	ret

000002d8 <note_on>:

void note_on() {
	num_bytes = 0;
 2d8:	10 92 01 02 	sts	0x0201, r1
	//Reset main timer1
	TCNT1 = 0;
 2dc:	1d bc       	out	0x2d, r1	; 45
 2de:	1c bc       	out	0x2c, r1	; 44
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
 2e0:	e0 91 03 02 	lds	r30, 0x0203
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	ee 0f       	add	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	e0 50       	subi	r30, 0x00	; 0
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	80 81       	ld	r24, Z
 2f0:	91 81       	ldd	r25, Z+1	; 0x01
 2f2:	90 93 05 02 	sts	0x0205, r25
 2f6:	80 93 04 02 	sts	0x0204, r24

	}
}

void update_frequency(unsigned int new_frequency) {
	OCR1A = new_frequency + fine_pitch_bend;
 2fa:	20 91 0f 02 	lds	r18, 0x020F
 2fe:	30 91 10 02 	lds	r19, 0x0210
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	9b bd       	out	0x2b, r25	; 43
 308:	8a bd       	out	0x2a, r24	; 42
	//Reset main timer1
	TCNT1 = 0;
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
	update_frequency(frequency);
	note_on_gate = 1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 13 02 	sts	0x0213, r24
}
 310:	08 95       	ret

00000312 <note_off>:

void note_off() {
	num_bytes = 0;
 312:	10 92 01 02 	sts	0x0201, r1
	note_on_gate = 0;
 316:	10 92 13 02 	sts	0x0213, r1
}
 31a:	08 95       	ret

0000031c <process_cc>:

void process_cc() {
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
	num_ccs = 0;
 320:	10 92 07 02 	sts	0x0207, r1

	switch (current_midi_cc) {
 324:	80 91 1d 02 	lds	r24, 0x021D
 328:	8c 30       	cpi	r24, 0x0C	; 12
 32a:	09 f4       	brne	.+2      	; 0x32e <process_cc+0x12>
 32c:	3f c0       	rjmp	.+126    	; 0x3ac <process_cc+0x90>
 32e:	8d 30       	cpi	r24, 0x0D	; 13
 330:	30 f4       	brcc	.+12     	; 0x33e <process_cc+0x22>
 332:	87 30       	cpi	r24, 0x07	; 7
 334:	69 f0       	breq	.+26     	; 0x350 <process_cc+0x34>
 336:	88 30       	cpi	r24, 0x08	; 8
 338:	09 f0       	breq	.+2      	; 0x33c <process_cc+0x20>
 33a:	63 c0       	rjmp	.+198    	; 0x402 <process_cc+0xe6>
 33c:	0e c0       	rjmp	.+28     	; 0x35a <process_cc+0x3e>
 33e:	8e 30       	cpi	r24, 0x0E	; 14
 340:	09 f4       	brne	.+2      	; 0x344 <process_cc+0x28>
 342:	4a c0       	rjmp	.+148    	; 0x3d8 <process_cc+0xbc>
 344:	8e 30       	cpi	r24, 0x0E	; 14
 346:	e8 f1       	brcs	.+122    	; 0x3c2 <process_cc+0xa6>
 348:	8f 30       	cpi	r24, 0x0F	; 15
 34a:	09 f0       	breq	.+2      	; 0x34e <process_cc+0x32>
 34c:	5a c0       	rjmp	.+180    	; 0x402 <process_cc+0xe6>
 34e:	4f c0       	rjmp	.+158    	; 0x3ee <process_cc+0xd2>

	case MASTER_VOLUME_CC:
		master_volume = current_midi_ccdata;
 350:	80 91 16 02 	lds	r24, 0x0216
 354:	80 93 02 02 	sts	0x0202, r24
 358:	54 c0       	rjmp	.+168    	; 0x402 <process_cc+0xe6>
		break;
	case FINE_PITCH_CC:
		fine_pitch_bend = ((note_table[playing_midi_note - 1]
 35a:	e0 91 0a 02 	lds	r30, 0x020A
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	df 01       	movw	r26, r30
 366:	a0 50       	subi	r26, 0x00	; 0
 368:	bf 4f       	sbci	r27, 0xFF	; 255
 36a:	0d 91       	ld	r16, X+
 36c:	1c 91       	ld	r17, X
 36e:	e2 50       	subi	r30, 0x02	; 2
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	20 81       	ld	r18, Z
 374:	31 81       	ldd	r19, Z+1	; 0x01
 376:	20 1b       	sub	r18, r16
 378:	31 0b       	sbc	r19, r17
 37a:	80 91 16 02 	lds	r24, 0x0216
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	24 9f       	mul	r18, r20
 384:	c0 01       	movw	r24, r0
 386:	25 9f       	mul	r18, r21
 388:	90 0d       	add	r25, r0
 38a:	34 9f       	mul	r19, r20
 38c:	90 0d       	add	r25, r0
 38e:	11 24       	eor	r1, r1
 390:	60 ec       	ldi	r22, 0xC0	; 192
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__udivmodhi4>
 398:	cb 01       	movw	r24, r22
 39a:	70 93 10 02 	sts	0x0210, r23
 39e:	60 93 0f 02 	sts	0x020F, r22

	}
}

void update_frequency(unsigned int new_frequency) {
	OCR1A = new_frequency + fine_pitch_bend;
 3a2:	80 0f       	add	r24, r16
 3a4:	91 1f       	adc	r25, r17
 3a6:	9b bd       	out	0x2b, r25	; 43
 3a8:	8a bd       	out	0x2a, r24	; 42
 3aa:	2b c0       	rjmp	.+86     	; 0x402 <process_cc+0xe6>
		                               - note_table[playing_midi_note]) * current_midi_ccdata) / 192;
		update_frequency(note_table[playing_midi_note]);
		break;

	case SWEEP_ENABLED_CC:
		if (current_midi_ccdata > 64)
 3ac:	80 91 16 02 	lds	r24, 0x0216
 3b0:	81 34       	cpi	r24, 0x41	; 65
 3b2:	20 f0       	brcs	.+8      	; 0x3bc <process_cc+0xa0>
			sweep_enabled = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 1b 02 	sts	0x021B, r24
 3ba:	23 c0       	rjmp	.+70     	; 0x402 <process_cc+0xe6>
		else
			sweep_enabled = 0;
 3bc:	10 92 1b 02 	sts	0x021B, r1
 3c0:	20 c0       	rjmp	.+64     	; 0x402 <process_cc+0xe6>
		break;

	case SWEEP_DIRECTION_CC:
		if (current_midi_ccdata > 64)
 3c2:	80 91 16 02 	lds	r24, 0x0216
 3c6:	81 34       	cpi	r24, 0x41	; 65
 3c8:	20 f0       	brcs	.+8      	; 0x3d2 <process_cc+0xb6>
			sweep_direction = SWEEP_UP;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 19 02 	sts	0x0219, r24
 3d0:	18 c0       	rjmp	.+48     	; 0x402 <process_cc+0xe6>
		else
			sweep_direction = SWEEP_DOWN;
 3d2:	10 92 19 02 	sts	0x0219, r1
 3d6:	15 c0       	rjmp	.+42     	; 0x402 <process_cc+0xe6>
		break;

	case SWEEP_AMOUNT_CC:
		sweep_amount = current_midi_ccdata;
 3d8:	20 91 16 02 	lds	r18, 0x0216
 3dc:	20 93 1e 02 	sts	0x021E, r18
		OCR1B = sweep_amount * 1024;
 3e0:	92 2f       	mov	r25, r18
 3e2:	99 0f       	add	r25, r25
 3e4:	99 0f       	add	r25, r25
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	99 bd       	out	0x29, r25	; 41
 3ea:	88 bd       	out	0x28, r24	; 40
 3ec:	0a c0       	rjmp	.+20     	; 0x402 <process_cc+0xe6>
		break;
	case SWEEP_LOOP_ENABLED_CC:
		if (current_midi_ccdata > 64)
 3ee:	80 91 16 02 	lds	r24, 0x0216
 3f2:	81 34       	cpi	r24, 0x41	; 65
 3f4:	20 f0       	brcs	.+8      	; 0x3fe <process_cc+0xe2>
			sweep_loop_enabled = 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 1f 02 	sts	0x021F, r24
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <process_cc+0xe6>
		else
			sweep_loop_enabled = 0;
 3fe:	10 92 1f 02 	sts	0x021F, r1
		break;

	}
}
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <update_frequency>:

void update_frequency(unsigned int new_frequency) {
	OCR1A = new_frequency + fine_pitch_bend;
 408:	20 91 0f 02 	lds	r18, 0x020F
 40c:	30 91 10 02 	lds	r19, 0x0210
 410:	28 0f       	add	r18, r24
 412:	39 1f       	adc	r19, r25
 414:	3b bd       	out	0x2b, r19	; 43
 416:	2a bd       	out	0x2a, r18	; 42
}
 418:	08 95       	ret

0000041a <bend_pitch>:

void bend_pitch() {
	num_pbs = 0;
 41a:	10 92 1a 02 	sts	0x021A, r1

	if (current_midi_pb_h > 63) {
 41e:	60 91 09 02 	lds	r22, 0x0209
 422:	60 34       	cpi	r22, 0x40	; 64
 424:	80 f1       	brcs	.+96     	; 0x486 <bend_pitch+0x6c>
		distance
 426:	e0 91 0a 02 	lds	r30, 0x020A
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	df 01       	movw	r26, r30
 432:	a0 50       	subi	r26, 0x00	; 0
 434:	bf 4f       	sbci	r27, 0xFF	; 255
 436:	4d 91       	ld	r20, X+
 438:	5c 91       	ld	r21, X
 43a:	ec 5f       	subi	r30, 0xFC	; 252
 43c:	fe 4f       	sbci	r31, 0xFE	; 254
 43e:	80 81       	ld	r24, Z
 440:	91 81       	ldd	r25, Z+1	; 0x01
 442:	9a 01       	movw	r18, r20
 444:	28 1b       	sub	r18, r24
 446:	39 0b       	sbc	r19, r25
 448:	86 2f       	mov	r24, r22
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	cf 97       	sbiw	r24, 0x3f	; 63
 44e:	bc 01       	movw	r22, r24
 450:	26 9f       	mul	r18, r22
 452:	c0 01       	movw	r24, r0
 454:	27 9f       	mul	r18, r23
 456:	90 0d       	add	r25, r0
 458:	36 9f       	mul	r19, r22
 45a:	90 0d       	add	r25, r0
 45c:	11 24       	eor	r1, r1
 45e:	26 e0       	ldi	r18, 0x06	; 6
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	2a 95       	dec	r18
 466:	e1 f7       	brne	.-8      	; 0x460 <bend_pitch+0x46>
 468:	90 93 0e 02 	sts	0x020E, r25
 46c:	80 93 0d 02 	sts	0x020D, r24

	}
}

void update_frequency(unsigned int new_frequency) {
	OCR1A = new_frequency + fine_pitch_bend;
 470:	20 91 0f 02 	lds	r18, 0x020F
 474:	30 91 10 02 	lds	r19, 0x0210
 478:	42 0f       	add	r20, r18
 47a:	53 1f       	adc	r21, r19
 47c:	48 1b       	sub	r20, r24
 47e:	59 0b       	sbc	r21, r25
 480:	5b bd       	out	0x2b, r21	; 43
 482:	4a bd       	out	0x2a, r20	; 42
 484:	08 95       	ret
		distance
		= ((note_table[playing_midi_note]
		               - note_table[playing_midi_note + 2])
		               * (current_midi_pb_h - 63)) / 64;
		update_frequency(note_table[playing_midi_note] - distance);
	} else if ((current_midi_pb_h < 63) && (playing_midi_note > 1)) {
 486:	6f 33       	cpi	r22, 0x3F	; 63
 488:	89 f1       	breq	.+98     	; 0x4ec <bend_pitch+0xd2>
 48a:	e0 91 0a 02 	lds	r30, 0x020A
 48e:	e2 30       	cpi	r30, 0x02	; 2
 490:	68 f1       	brcs	.+90     	; 0x4ec <bend_pitch+0xd2>
		distance = ((note_table[playing_midi_note - 2]
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	df 01       	movw	r26, r30
 49a:	a0 50       	subi	r26, 0x00	; 0
 49c:	bf 4f       	sbci	r27, 0xFF	; 255
 49e:	4d 91       	ld	r20, X+
 4a0:	5c 91       	ld	r21, X
 4a2:	e4 50       	subi	r30, 0x04	; 4
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	20 81       	ld	r18, Z
 4a8:	31 81       	ldd	r19, Z+1	; 0x01
 4aa:	24 1b       	sub	r18, r20
 4ac:	35 0b       	sbc	r19, r21
 4ae:	80 e4       	ldi	r24, 0x40	; 64
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	86 1b       	sub	r24, r22
 4b4:	91 09       	sbc	r25, r1
 4b6:	bc 01       	movw	r22, r24
 4b8:	26 9f       	mul	r18, r22
 4ba:	c0 01       	movw	r24, r0
 4bc:	27 9f       	mul	r18, r23
 4be:	90 0d       	add	r25, r0
 4c0:	36 9f       	mul	r19, r22
 4c2:	90 0d       	add	r25, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	76 e0       	ldi	r23, 0x06	; 6
 4c8:	96 95       	lsr	r25
 4ca:	87 95       	ror	r24
 4cc:	7a 95       	dec	r23
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <bend_pitch+0xae>
 4d0:	90 93 0e 02 	sts	0x020E, r25
 4d4:	80 93 0d 02 	sts	0x020D, r24

	}
}

void update_frequency(unsigned int new_frequency) {
	OCR1A = new_frequency + fine_pitch_bend;
 4d8:	20 91 0f 02 	lds	r18, 0x020F
 4dc:	30 91 10 02 	lds	r19, 0x0210
 4e0:	42 0f       	add	r20, r18
 4e2:	53 1f       	adc	r21, r19
 4e4:	48 0f       	add	r20, r24
 4e6:	59 1f       	adc	r21, r25
 4e8:	5b bd       	out	0x2b, r21	; 43
 4ea:	4a bd       	out	0x2a, r20	; 42
 4ec:	08 95       	ret

000004ee <check_byte_received>:
}

void check_byte_received() {

	//Is there a byte waiting in the buffer?
	if (byte_ready == 1) {
 4ee:	30 91 00 02 	lds	r19, 0x0200
 4f2:	31 30       	cpi	r19, 0x01	; 1
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <check_byte_received+0xa>
 4f6:	89 c0       	rjmp	.+274    	; 0x60a <check_byte_received+0x11c>
		//Is this a stupid byte like Clock or Active sensing?
		if (byte_received < 0xF0) {
 4f8:	20 91 06 02 	lds	r18, 0x0206
 4fc:	20 3f       	cpi	r18, 0xF0	; 240
 4fe:	08 f0       	brcs	.+2      	; 0x502 <check_byte_received+0x14>
 500:	82 c0       	rjmp	.+260    	; 0x606 <check_byte_received+0x118>
			//Is this a status byte? ...
			if (byte_received >= 0x80) {
 502:	27 ff       	sbrs	r18, 7
 504:	24 c0       	rjmp	.+72     	; 0x54e <check_byte_received+0x60>
				unsigned char temp_midi_channel = byte_received & 0x0F;
 506:	92 2f       	mov	r25, r18
 508:	9f 70       	andi	r25, 0x0F	; 15
				//Is this for one of our channels?
				if (temp_midi_channel == midi_channel) {
 50a:	80 91 1c 02 	lds	r24, 0x021C
 50e:	98 17       	cp	r25, r24
 510:	d9 f4       	brne	.+54     	; 0x548 <check_byte_received+0x5a>
					current_midi_channel = temp_midi_channel;
 512:	90 93 0c 02 	sts	0x020C, r25

					//What kind of status byte is this?
					unsigned char status_type = (byte_received & 0xF0);
					switch (status_type) {
 516:	82 2f       	mov	r24, r18
 518:	80 7f       	andi	r24, 0xF0	; 240
 51a:	80 39       	cpi	r24, 0x90	; 144
 51c:	51 f0       	breq	.+20     	; 0x532 <check_byte_received+0x44>
 51e:	81 39       	cpi	r24, 0x91	; 145
 520:	18 f4       	brcc	.+6      	; 0x528 <check_byte_received+0x3a>
 522:	80 38       	cpi	r24, 0x80	; 128
 524:	89 f4       	brne	.+34     	; 0x548 <check_byte_received+0x5a>
 526:	08 c0       	rjmp	.+16     	; 0x538 <check_byte_received+0x4a>
 528:	80 3b       	cpi	r24, 0xB0	; 176
 52a:	41 f0       	breq	.+16     	; 0x53c <check_byte_received+0x4e>
 52c:	80 3e       	cpi	r24, 0xE0	; 224
 52e:	61 f4       	brne	.+24     	; 0x548 <check_byte_received+0x5a>
 530:	09 c0       	rjmp	.+18     	; 0x544 <check_byte_received+0x56>
					case (MIDI_STATUS_TYPE_NOTEON):
						current_midi_status = MIDI_STATUS_NOTEON;
 532:	30 93 15 02 	sts	0x0215, r19
 536:	67 c0       	rjmp	.+206    	; 0x606 <check_byte_received+0x118>
					break;
					case (MIDI_STATUS_TYPE_NOTEOFF):
						current_midi_status = MIDI_STATUS_NOTEOFF;
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	01 c0       	rjmp	.+2      	; 0x53e <check_byte_received+0x50>
					break;
					case (MIDI_STATUS_TYPE_CC):
						current_midi_status = MIDI_STATUS_CC;
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	80 93 15 02 	sts	0x0215, r24
 542:	61 c0       	rjmp	.+194    	; 0x606 <check_byte_received+0x118>
					break;
					case (MIDI_STATUS_TYPE_PB):
						current_midi_status = MIDI_STATUS_PB;
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	fb cf       	rjmp	.-10     	; 0x53e <check_byte_received+0x50>
					break;
					default:
						current_midi_status = MIDI_STATUS_NONE;
					}
				} else {
					current_midi_status = 0;
 548:	10 92 15 02 	sts	0x0215, r1
 54c:	5c c0       	rjmp	.+184    	; 0x606 <check_byte_received+0x118>
				}
			}
			// ... or is it a data byte?
			else {
				switch (current_midi_status) {
 54e:	90 91 15 02 	lds	r25, 0x0215
 552:	92 30       	cpi	r25, 0x02	; 2
 554:	29 f1       	breq	.+74     	; 0x5a0 <check_byte_received+0xb2>
 556:	93 30       	cpi	r25, 0x03	; 3
 558:	20 f4       	brcc	.+8      	; 0x562 <check_byte_received+0x74>
 55a:	91 30       	cpi	r25, 0x01	; 1
 55c:	09 f0       	breq	.+2      	; 0x560 <check_byte_received+0x72>
 55e:	53 c0       	rjmp	.+166    	; 0x606 <check_byte_received+0x118>
 560:	06 c0       	rjmp	.+12     	; 0x56e <check_byte_received+0x80>
 562:	93 30       	cpi	r25, 0x03	; 3
 564:	a1 f1       	breq	.+104    	; 0x5ce <check_byte_received+0xe0>
 566:	94 30       	cpi	r25, 0x04	; 4
 568:	09 f0       	breq	.+2      	; 0x56c <check_byte_received+0x7e>
 56a:	4d c0       	rjmp	.+154    	; 0x606 <check_byte_received+0x118>
 56c:	3e c0       	rjmp	.+124    	; 0x5ea <check_byte_received+0xfc>
				case (MIDI_STATUS_NOTEON):

					//Is this a velocity byte?
					if (num_bytes > 0) {
 56e:	80 91 01 02 	lds	r24, 0x0201
 572:	88 23       	and	r24, r24
 574:	81 f0       	breq	.+32     	; 0x596 <check_byte_received+0xa8>
 576:	90 91 03 02 	lds	r25, 0x0203

						//If the velocity sent was 0, then this is really a NOTE-OFF
						if (byte_received > 0) {
 57a:	22 23       	and	r18, r18
 57c:	29 f0       	breq	.+10     	; 0x588 <check_byte_received+0x9a>
							//current_midi_velocity = byte_received;
							playing_midi_note = current_midi_note;
 57e:	90 93 0a 02 	sts	0x020A, r25
							note_on();
 582:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <note_on>
 586:	10 c0       	rjmp	.+32     	; 0x5a8 <check_byte_received+0xba>
						} else {
							if (current_midi_note == playing_midi_note) {
 588:	80 91 0a 02 	lds	r24, 0x020A
 58c:	98 17       	cp	r25, r24
 58e:	61 f4       	brne	.+24     	; 0x5a8 <check_byte_received+0xba>
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
	note_on_gate = 0;
 590:	10 92 13 02 	sts	0x0213, r1
 594:	09 c0       	rjmp	.+18     	; 0x5a8 <check_byte_received+0xba>
						num_bytes = 0;
					}

				//Or is this a note data byte?
					else {
						current_midi_note = byte_received;
 596:	20 93 03 02 	sts	0x0203, r18
						num_bytes++;
 59a:	90 93 01 02 	sts	0x0201, r25
 59e:	14 c0       	rjmp	.+40     	; 0x5c8 <check_byte_received+0xda>

				break;

				case (MIDI_STATUS_NOTEOFF):
					//Is this a velocity byte?
					if (num_bytes > 0) {
 5a0:	80 91 01 02 	lds	r24, 0x0201
 5a4:	88 23       	and	r24, r24
 5a6:	19 f0       	breq	.+6      	; 0x5ae <check_byte_received+0xc0>
						//Who cares? We aren't implementing aftertouch
						num_bytes = 0;
 5a8:	10 92 01 02 	sts	0x0201, r1
 5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <check_byte_received+0xda>
					} else {
						/* This is a note byte. Let's see if it's the same as the currently
						 * playing note. Only then will we note_off()
						 */

						if (byte_received == playing_midi_note) {
 5ae:	80 91 0a 02 	lds	r24, 0x020A
 5b2:	28 17       	cp	r18, r24
 5b4:	21 f4       	brne	.+8      	; 0x5be <check_byte_received+0xd0>
	update_frequency(frequency);
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
 5b6:	10 92 01 02 	sts	0x0201, r1
	note_on_gate = 0;
 5ba:	10 92 13 02 	sts	0x0213, r1
						 */

						if (byte_received == playing_midi_note) {
							note_off();
						}
						num_bytes++;
 5be:	80 91 01 02 	lds	r24, 0x0201
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	80 93 01 02 	sts	0x0201, r24
	}

}

void clear_byte_received() {
	byte_received = 0;
 5c8:	10 92 06 02 	sts	0x0206, r1
 5cc:	1c c0       	rjmp	.+56     	; 0x606 <check_byte_received+0x118>

				break;

				case (MIDI_STATUS_CC):
					//Did we already get a CC Status byte?
					if (num_ccs > 0) {
 5ce:	80 91 07 02 	lds	r24, 0x0207
 5d2:	88 23       	and	r24, r24
 5d4:	29 f0       	breq	.+10     	; 0x5e0 <check_byte_received+0xf2>
						current_midi_ccdata = byte_received;
 5d6:	20 93 16 02 	sts	0x0216, r18
						process_cc();
 5da:	0e 94 8e 01 	call	0x31c	; 0x31c <process_cc>
 5de:	13 c0       	rjmp	.+38     	; 0x606 <check_byte_received+0x118>
					}
				//Or is this a new CC status byte?
					else {
						current_midi_cc = byte_received;
 5e0:	20 93 1d 02 	sts	0x021D, r18
						num_ccs++;
 5e4:	30 93 07 02 	sts	0x0207, r19
 5e8:	0e c0       	rjmp	.+28     	; 0x606 <check_byte_received+0x118>
					}
				break;

				case (MIDI_STATUS_PB):
					//How many PB related bytes have we gotten?
					switch (num_pbs) {
 5ea:	80 91 1a 02 	lds	r24, 0x021A
 5ee:	88 23       	and	r24, r24
 5f0:	19 f0       	breq	.+6      	; 0x5f8 <check_byte_received+0x10a>
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	41 f4       	brne	.+16     	; 0x606 <check_byte_received+0x118>
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <check_byte_received+0x110>
					case (0):
						//First byte is 7 LSB
						//Don't care about it for now
						//current_midi_pb_l = byte_received;

						num_pbs++;
 5f8:	30 93 1a 02 	sts	0x021A, r19
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <check_byte_received+0x118>
					break;
					case (1):
						//Second byte has 7 MSB
						current_midi_pb_h = byte_received;
 5fe:	20 93 09 02 	sts	0x0209, r18
					//Combine to get 14 bytes 0 - 13
					//current_midi_pb = ((current_midi_pb_h << 7)|(current_midi_pb_l << 0));
					bend_pitch();
 602:	0e 94 0d 02 	call	0x41a	; 0x41a <bend_pitch>
				break;
				}
			}

		}
		byte_ready = 0;
 606:	10 92 00 02 	sts	0x0200, r1
 60a:	08 95       	ret

0000060c <clear_byte_received>:
	}

}

void clear_byte_received() {
	byte_received = 0;
 60c:	10 92 06 02 	sts	0x0206, r1
}
 610:	08 95       	ret

00000612 <check_channel_set>:

void check_channel_set() {
	midi_channel = 0;
	//Get 4-bit (0-16) MIDI CHannel from PORTD b4-b7)
	midi_channel |= (~PIND & 0xF0) >> 4;
 612:	80 b3       	in	r24, 0x10	; 16
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	80 95       	com	r24
 618:	90 95       	com	r25
 61a:	80 7f       	andi	r24, 0xF0	; 240
 61c:	90 70       	andi	r25, 0x00	; 0
 61e:	54 e0       	ldi	r21, 0x04	; 4
 620:	95 95       	asr	r25
 622:	87 95       	ror	r24
 624:	5a 95       	dec	r21
 626:	e1 f7       	brne	.-8      	; 0x620 <check_channel_set+0xe>
 628:	80 93 1c 02 	sts	0x021C, r24

}
 62c:	08 95       	ret

0000062e <main>:
	TCNT1L = 0;
}

int main(void) {
	/* Disable interrupts at first */
	cli();
 62e:	f8 94       	cli

}

void init_io() {
	//b0 - b3 of PORT C is output
	DDRC = 0x0F;
 630:	8f e0       	ldi	r24, 0x0F	; 15
 632:	84 bb       	out	0x14, r24	; 20

	//b4 0 v7 of PORT D is input (MIDI Channel selection)
	DDRD &= 0b00001111;
 634:	81 b3       	in	r24, 0x11	; 17
 636:	8f 70       	andi	r24, 0x0F	; 15
 638:	81 bb       	out	0x11, r24	; 17

	//enable internal pull-up resistors for MIDI Channel selection bits
	PORTD |= 0b11110000;
 63a:	82 b3       	in	r24, 0x12	; 18
 63c:	80 6f       	ori	r24, 0xF0	; 240
 63e:	82 bb       	out	0x12, r24	; 18

	/* Setup I/O Pins */
	init_io();

	/* Setup Timers */
	init_timers();
 640:	0e 94 78 00 	call	0xf0	; 0xf0 <init_timers>

#include "triangle.h"

void init_interrupts() {
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
 644:	80 e9       	ldi	r24, 0x90	; 144
 646:	8a b9       	out	0x0a, r24	; 10

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
 648:	86 e0       	ldi	r24, 0x06	; 6
 64a:	80 93 95 00 	sts	0x0095, r24

	/* Set the baud rate to 31250 for MIDI */
	UBRR0L = 0x27; // For 20MHz Clock
 64e:	87 e2       	ldi	r24, 0x27	; 39
 650:	89 b9       	out	0x09, r24	; 9
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	8b b9       	out	0x0b, r24	; 11
	init_timers();

	/* Enable USART and Pin Interrupts */
	init_interrupts();

	PORTB = 0xFF;
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	88 bb       	out	0x18, r24	; 24

	OCR1A = 500;
 65a:	84 ef       	ldi	r24, 0xF4	; 244
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	9b bd       	out	0x2b, r25	; 43
 660:	8a bd       	out	0x2a, r24	; 42

	/*Pitch bend needs to start at 64 (middle value) or pitch will start out
	 two half steps too low (0 = max bend downward)
	 */
	current_midi_pb_l = current_midi_pb_h = 64;
 662:	80 e4       	ldi	r24, 0x40	; 64
 664:	80 93 09 02 	sts	0x0209, r24
 668:	80 93 08 02 	sts	0x0208, r24

	num_bytes = 0;
 66c:	10 92 01 02 	sts	0x0201, r1
	num_ccs = 0;
 670:	10 92 07 02 	sts	0x0207, r1
	num_pbs = 0;
 674:	10 92 1a 02 	sts	0x021A, r1
	byte_ready = 0;
 678:	10 92 00 02 	sts	0x0200, r1
	midi_channel = 0;
 67c:	10 92 1c 02 	sts	0x021C, r1
	master_volume = 127;
 680:	8f e7       	ldi	r24, 0x7F	; 127
 682:	80 93 02 02 	sts	0x0202, r24

	amplitude = 0;
 686:	10 92 0b 02 	sts	0x020B, r1
	fine_pitch_bend = 0;
 68a:	10 92 10 02 	sts	0x0210, r1
 68e:	10 92 0f 02 	sts	0x020F, r1
	note_on_gate = 0;
 692:	10 92 13 02 	sts	0x0213, r1

	sweep_enabled = 1;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	80 93 1b 02 	sts	0x021B, r24
	sweep_direction = SWEEP_UP;
 69c:	80 93 19 02 	sts	0x0219, r24
	sweep_amount = 0;
 6a0:	10 92 1e 02 	sts	0x021E, r1
	sweep_loop_enabled = 1;
 6a4:	80 93 1f 02 	sts	0x021F, r24
	fake_16_timer = 0;
 6a8:	10 92 12 02 	sts	0x0212, r1
 6ac:	10 92 11 02 	sts	0x0211, r1

	/* Finally, enable global interrupts */
	sei();
 6b0:	78 94       	sei

	/*Main Loop*/
	while (1) {
		check_channel_set();
 6b2:	0e 94 09 03 	call	0x612	; 0x612 <check_channel_set>
		check_byte_received();
 6b6:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_byte_received>
 6ba:	fb cf       	rjmp	.-10     	; 0x6b2 <main+0x84>

000006bc <__udivmodhi4>:
 6bc:	aa 1b       	sub	r26, r26
 6be:	bb 1b       	sub	r27, r27
 6c0:	51 e1       	ldi	r21, 0x11	; 17
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <__udivmodhi4_ep>

000006c4 <__udivmodhi4_loop>:
 6c4:	aa 1f       	adc	r26, r26
 6c6:	bb 1f       	adc	r27, r27
 6c8:	a6 17       	cp	r26, r22
 6ca:	b7 07       	cpc	r27, r23
 6cc:	10 f0       	brcs	.+4      	; 0x6d2 <__udivmodhi4_ep>
 6ce:	a6 1b       	sub	r26, r22
 6d0:	b7 0b       	sbc	r27, r23

000006d2 <__udivmodhi4_ep>:
 6d2:	88 1f       	adc	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	5a 95       	dec	r21
 6d8:	a9 f7       	brne	.-22     	; 0x6c4 <__udivmodhi4_loop>
 6da:	80 95       	com	r24
 6dc:	90 95       	com	r25
 6de:	bc 01       	movw	r22, r24
 6e0:	cd 01       	movw	r24, r26
 6e2:	08 95       	ret

000006e4 <_exit>:
 6e4:	f8 94       	cli

000006e6 <__stop_program>:
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <__stop_program>
