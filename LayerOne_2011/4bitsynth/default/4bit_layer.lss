
4bit_layer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000040e  00800100  000020ae  00002142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  0080050e  0080050e  00002550  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005ea  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002af2  00000000  00000000  00002cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014a6  00000000  00000000  000057cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a53  00000000  00000000  00006c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  000086c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c2  00000000  00000000  000089d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dc5  00000000  00000000  0000919a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00009f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 04 	jmp	0x812	; 0x812 <__ctors_end>
       4:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
       8:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
       c:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      10:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      14:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      18:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      1c:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      20:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      24:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      28:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      2c:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      30:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_12>
      34:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      38:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_14>
      3c:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      40:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      44:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      48:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_18>
      4c:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      50:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      54:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      58:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      5c:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      60:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      64:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      68:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_26>
      6c:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      70:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      74:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      78:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      7c:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      80:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      84:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>
      88:	0c 94 28 04 	jmp	0x850	; 0x850 <__bad_interrupt>

0000008c <daft>:
      8c:	90 3e 7f 80 3e 00 90 36 7f 80 36 00 90 3b 7f 80     .>..>..6..6..;..
      9c:	3b 00 90 36 7f 80 36 00 90 3e 7f 80 3e 00 90 36     ;..6..6..>..>..6
      ac:	7f 80 36 00 90 3b 7f 80 3b 00 90 36 7f 80 36 00     ..6..;..;..6..6.
      bc:	90 3e 7f 80 3e 00 90 36 7f 80 36 00 90 3b 7f 80     .>..>..6..6..;..
      cc:	3b 00 90 36 7f 80 36 00 90 3e 7f 80 3e 00 90 36     ;..6..6..>..>..6
      dc:	7f 80 36 00 90 3b 7f 80 3b 00 90 36 7f 80 36 00     ..6..;..;..6..6.
      ec:	90 3e 7f 80 3e 00 90 38 7f 80 38 00 90 3b 7f 80     .>..>..8..8..;..
      fc:	3b 00 90 38 7f 80 38 00 90 3e 7f 80 3e 00 90 38     ;..8..8..>..>..8
     10c:	7f 80 38 00 90 3b 7f 80 3b 00 90 38 7f 80 38 00     ..8..;..;..8..8.
     11c:	90 3e 7f 80 3e 00 90 38 7f 80 38 00 90 3b 7f 80     .>..>..8..8..;..
     12c:	3b 00 90 38 7f 80 38 00 90 3e 7f 80 3e 00 90 38     ;..8..8..>..>..8
     13c:	7f 80 38 00 90 3b 7f 80 3b 00 90 38 7f 80 38 00     ..8..;..;..8..8.
     14c:	90 43 7f 80 43 00 90 3b 7f 80 3b 00 90 40 7f 80     .C..C..;..;..@..
     15c:	40 00 90 3b 7f 80 3b 00 90 43 7f 80 43 00 90 3b     @..;..;..C..C..;
     16c:	7f 80 3b 00 90 40 7f 80 40 00 90 3b 7f 80 3b 00     ..;..@..@..;..;.
     17c:	90 43 7f 80 43 00 90 3b 7f 80 3b 00 90 40 7f 80     .C..C..;..;..@..
     18c:	40 00 90 3b 7f 80 3b 00 90 43 7f 80 43 00 90 3b     @..;..;..C..C..;
     19c:	7f 80 3b 00 90 40 7f 80 40 00 90 3b 7f 80 3b 00     ..;..@..@..;..;.
     1ac:	90 40 7f 80 40 00 90 39 7f 80 39 00 90 3d 7f 80     .@..@..9..9..=..
     1bc:	3d 00 90 39 7f 80 39 00 90 40 7f 80 40 00 90 39     =..9..9..@..@..9
     1cc:	7f 80 39 00 90 3d 7f 80 3d 00 90 39 7f 80 39 00     ..9..=..=..9..9.
     1dc:	90 40 7f 80 40 00 90 39 7f 80 39 00 90 3d 7f 80     .@..@..9..9..=..
     1ec:	3d 00 90 39 7f 80 39 00 90 40 7f 80 40 00 90 39     =..9..9..@..@..9
     1fc:	7f 80 39 00 90 3d 7f 80 3d 00 90 39 7f 80 39 00     ..9..=..=..9..9.
     20c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     21c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     22c:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     23c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     24c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     25c:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     26c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     27c:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     28c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     29c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     2ac:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     2bc:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     2cc:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     2dc:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     2ec:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     2fc:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     30c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     31c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     32c:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     33c:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     34c:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     35c:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     36c:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     37c:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     38c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     39c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     3ac:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     3bc:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     3cc:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     3dc:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     3ec:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     3fc:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     40c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     41c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     42c:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     43c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     44c:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     45c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     46c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     47c:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     48c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     49c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     4ac:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     4bc:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     4cc:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     4dc:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     4ec:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     4fc:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     50c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     51c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     52c:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     53c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     54c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     55c:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     56c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     57c:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     58c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     59c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     5ac:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     5bc:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     5cc:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     5dc:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     5ec:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     5fc:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     60c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     61c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     62c:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     63c:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     64c:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     65c:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     66c:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     67c:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     68c:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     69c:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     6ac:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     6bc:	90 4a 7f 80 4a 00 90 42 7f 80 42 00 90 47 7f 80     .J..J..B..B..G..
     6cc:	47 00 90 42 7f 80 42 00 90 4a 7f 80 4a 00 90 42     G..B..B..J..J..B
     6dc:	7f 80 42 00 90 47 7f 80 47 00 90 42 7f 80 42 00     ..B..G..G..B..B.
     6ec:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     6fc:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     70c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     71c:	90 4a 7f 80 4a 00 90 44 7f 80 44 00 90 47 7f 80     .J..J..D..D..G..
     72c:	47 00 90 44 7f 80 44 00 90 4a 7f 80 4a 00 90 44     G..D..D..J..J..D
     73c:	7f 80 44 00 90 47 7f 80 47 00 90 44 7f 80 44 00     ..D..G..G..D..D.
     74c:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     75c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     76c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     77c:	90 4f 7f 80 4f 00 90 47 7f 80 47 00 90 4c 7f 80     .O..O..G..G..L..
     78c:	4c 00 90 47 7f 80 47 00 90 4f 7f 80 4f 00 90 47     L..G..G..O..O..G
     79c:	7f 80 47 00 90 4c 7f 80 4c 00 90 47 7f 80 47 00     ..G..L..L..G..G.
     7ac:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     7bc:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     7cc:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     7dc:	90 4c 7f 80 4c 00 90 45 7f 80 45 00 90 49 7f 80     .L..L..E..E..I..
     7ec:	49 00 90 45 7f 80 45 00 90 4c 7f 80 4c 00 90 45     I..E..E..L..L..E
     7fc:	7f 80 45 00 90 49 7f 80 49 00 90 45 7f 80 45 00     ..E..I..I..E..E.
     80c:	90 4a 7f 80 4a 00                                   .J..J.

00000812 <__ctors_end>:
     812:	11 24       	eor	r1, r1
     814:	1f be       	out	0x3f, r1	; 63
     816:	cf ef       	ldi	r28, 0xFF	; 255
     818:	d0 e1       	ldi	r29, 0x10	; 16
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	cd bf       	out	0x3d, r28	; 61

0000081e <__do_copy_data>:
     81e:	15 e0       	ldi	r17, 0x05	; 5
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b1 e0       	ldi	r27, 0x01	; 1
     824:	ee ea       	ldi	r30, 0xAE	; 174
     826:	f0 e2       	ldi	r31, 0x20	; 32
     828:	00 e0       	ldi	r16, 0x00	; 0
     82a:	0b bf       	out	0x3b, r16	; 59
     82c:	02 c0       	rjmp	.+4      	; 0x832 <__do_copy_data+0x14>
     82e:	07 90       	elpm	r0, Z+
     830:	0d 92       	st	X+, r0
     832:	ae 30       	cpi	r26, 0x0E	; 14
     834:	b1 07       	cpc	r27, r17
     836:	d9 f7       	brne	.-10     	; 0x82e <__do_copy_data+0x10>

00000838 <__do_clear_bss>:
     838:	15 e0       	ldi	r17, 0x05	; 5
     83a:	ae e0       	ldi	r26, 0x0E	; 14
     83c:	b5 e0       	ldi	r27, 0x05	; 5
     83e:	01 c0       	rjmp	.+2      	; 0x842 <.do_clear_bss_start>

00000840 <.do_clear_bss_loop>:
     840:	1d 92       	st	X+, r1

00000842 <.do_clear_bss_start>:
     842:	ad 36       	cpi	r26, 0x6D	; 109
     844:	b1 07       	cpc	r27, r17
     846:	e1 f7       	brne	.-8      	; 0x840 <.do_clear_bss_loop>
     848:	0e 94 2f 07 	call	0xe5e	; 0xe5e <main>
     84c:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <_exit>

00000850 <__bad_interrupt>:
     850:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000854 <read_adc>:
};


// sample an ADC channel
void read_adc(knob_t *k)
{
     854:	fc 01       	movw	r30, r24

	uint16_t val = ADCL;
     856:	34 b1       	in	r19, 0x04	; 4
	val += (ADCH << 8);
     858:	25 b1       	in	r18, 0x05	; 5
	// accumulate value
	k->accum += val;
     85a:	92 2f       	mov	r25, r18
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	83 0f       	add	r24, r19
     860:	91 1d       	adc	r25, r1
     862:	9c 01       	movw	r18, r24
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	93 81       	ldd	r25, Z+3	; 0x03
     86c:	a4 81       	ldd	r26, Z+4	; 0x04
     86e:	b5 81       	ldd	r27, Z+5	; 0x05
     870:	28 0f       	add	r18, r24
     872:	39 1f       	adc	r19, r25
     874:	4a 1f       	adc	r20, r26
     876:	5b 1f       	adc	r21, r27
     878:	22 83       	std	Z+2, r18	; 0x02
     87a:	33 83       	std	Z+3, r19	; 0x03
     87c:	44 83       	std	Z+4, r20	; 0x04
     87e:	55 83       	std	Z+5, r21	; 0x05

	// take average when timer overflows
	if (adctimer == 0)
     880:	80 91 0e 05 	lds	r24, 0x050E
     884:	88 23       	and	r24, r24
     886:	69 f4       	brne	.+26     	; 0x8a2 <read_adc+0x4e>
	{
		k->val = k->accum / NUM_ADC_SAMPLES;
     888:	85 e0       	ldi	r24, 0x05	; 5
     88a:	56 95       	lsr	r21
     88c:	47 95       	ror	r20
     88e:	37 95       	ror	r19
     890:	27 95       	ror	r18
     892:	8a 95       	dec	r24
     894:	d1 f7       	brne	.-12     	; 0x88a <read_adc+0x36>
     896:	31 83       	std	Z+1, r19	; 0x01
     898:	20 83       	st	Z, r18
		k->accum = 0;
     89a:	12 82       	std	Z+2, r1	; 0x02
     89c:	13 82       	std	Z+3, r1	; 0x03
     89e:	14 82       	std	Z+4, r1	; 0x04
     8a0:	15 82       	std	Z+5, r1	; 0x05
     8a2:	08 95       	ret

000008a4 <init_interrupts>:
	}
}

void init_interrupts() {
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
     8a4:	80 e9       	ldi	r24, 0x90	; 144
     8a6:	8a b9       	out	0x0a, r24	; 10

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
     8a8:	86 e0       	ldi	r24, 0x06	; 6
     8aa:	80 93 95 00 	sts	0x0095, r24

	// These were for the original synth, changed for the l1 human badge
	//UBRR0L = 0x27; // For 20MHz Clock
	//UBRR0L = 0x13;		// FOr 10MHz Clock

	UBRR0H = high((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
     8ae:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
     8b2:	8f e1       	ldi	r24, 0x1F	; 31
     8b4:	89 b9       	out	0x09, r24	; 9
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
     8b6:	80 e8       	ldi	r24, 0x80	; 128
     8b8:	8b b9       	out	0x0b, r24	; 11
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);

	/* Enable USART Receive interrupt */
	enable_USART_interrupts();

}
     8ba:	08 95       	ret

000008bc <init_io>:

void init_io( void )
{
	//b0 - b3 of PORT C is output
	DDRC = 0xFF;
     8bc:	8f ef       	ldi	r24, 0xFF	; 255
     8be:	84 bb       	out	0x14, r24	; 20

	// for led
	DDRE = 0xff;
     8c0:	82 b9       	out	0x02, r24	; 2

	//b4 0 v7 of PORT D is input (MIDI Channel selection)
	DDRD &= 0b00001111;
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	8f 70       	andi	r24, 0x0F	; 15
     8c6:	81 bb       	out	0x11, r24	; 17

	//enable internal pull-up resistors for MIDI Channel selection bits
	PORTD |= 0b11110000;
     8c8:	82 b3       	in	r24, 0x12	; 18
     8ca:	80 6f       	ori	r24, 0xF0	; 240
     8cc:	82 bb       	out	0x12, r24	; 18
}
     8ce:	08 95       	ret

000008d0 <init_timers>:
void init_timers( void )
{

	//8-bit timer 0 for decay, sweep, vibrato effects?
	//Enable Overflow interrupts for Timer 0
	TIMSK = 0b00000001;
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	97 bf       	out	0x37, r25	; 55

	//Normal counter operation
	TCCR1A = 0b00000000;
     8d4:	1f bc       	out	0x2f, r1	; 47

	//Divide by 1024 prescalar
	TCCR1B = 0b00000101;
     8d6:	85 e0       	ldi	r24, 0x05	; 5
     8d8:	8e bd       	out	0x2e, r24	; 46

	//Start terminal count at zero
	TCNT0 = 0x00;
     8da:	12 be       	out	0x32, r1	; 50

	//16-bit timer 1 for main frequency generation
	TIMSK |= _BV(TOIE1) | _BV( OCIE1A ) ;
     8dc:	87 b7       	in	r24, 0x37	; 55
     8de:	84 61       	ori	r24, 0x14	; 20
     8e0:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= 0b00100000; // Enable A and B compare interrupts

	TCCR1A = 0b00000001;
     8e2:	9f bd       	out	0x2f, r25	; 47

	// Prescaler 1, Fast PWM
	TCCR1B = 0b00010001;
     8e4:	81 e1       	ldi	r24, 0x11	; 17
     8e6:	8e bd       	out	0x2e, r24	; 46

	//Start count at zero now
	TCNT1H = 0;
     8e8:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
     8ea:	1c bc       	out	0x2c, r1	; 44
}
     8ec:	08 95       	ret

000008ee <init_adc>:

void init_adc( void ) 
{
	// set up ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 1/128 prescaler
     8ee:	86 b1       	in	r24, 0x06	; 6
     8f0:	87 60       	ori	r24, 0x07	; 7
     8f2:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= _BV(ADEN); 							// enable ADC
     8f4:	37 9a       	sbi	0x06, 7	; 6
}
     8f6:	08 95       	ret

000008f8 <__vector_18>:
	return 0;
}
unsigned short daftIndex = 0;

/* USART Received byte interrupt (get MIDI byte)*/
ISR(USART0_RX_vect) {
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	8f 93       	push	r24
     904:	9f 93       	push	r25
	byte_received = UDR0;
     906:	8c b1       	in	r24, 0x0c	; 12
     908:	80 93 51 05 	sts	0x0551, r24
	byte_ready = 1;
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	90 93 4b 05 	sts	0x054B, r25
	PORTE ^=0x1;
     912:	83 b1       	in	r24, 0x03	; 3
     914:	89 27       	eor	r24, r25
     916:	83 b9       	out	0x03, r24	; 3
}
     918:	9f 91       	pop	r25
     91a:	8f 91       	pop	r24
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	2f 93       	push	r18
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25

	PORTE ^=0x1;
     936:	83 b1       	in	r24, 0x03	; 3
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	89 27       	eor	r24, r25
     93c:	83 b9       	out	0x03, r24	; 3

	if(note_on_gate == 1) {
     93e:	80 91 5e 05 	lds	r24, 0x055E
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	39 f5       	brne	.+78     	; 0x994 <__vector_12+0x6e>
		fivebit_counter ++;
     946:	80 91 5f 05 	lds	r24, 0x055F
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	80 93 5f 05 	sts	0x055F, r24

		//Reset counter if 'overflowed'
		if(fivebit_counter> 31) fivebit_counter = 0;
     950:	80 32       	cpi	r24, 0x20	; 32
     952:	10 f0       	brcs	.+4      	; 0x958 <__vector_12+0x32>
     954:	10 92 5f 05 	sts	0x055F, r1

		//Each amplitude b0-3 is XNORed with b4 to create output
		unsigned char strobe = (fivebit_counter & 0b00010000) >> 4;
     958:	20 91 5f 05 	lds	r18, 0x055F
     95c:	82 2f       	mov	r24, r18
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	80 71       	andi	r24, 0x10	; 16
     962:	90 70       	andi	r25, 0x00	; 0
     964:	68 94       	set
     966:	13 f8       	bld	r1, 3
     968:	95 95       	asr	r25
     96a:	87 95       	ror	r24
     96c:	16 94       	lsr	r1
     96e:	e1 f7       	brne	.-8      	; 0x968 <__vector_12+0x42>
     970:	98 2f       	mov	r25, r24
		if(strobe == 1) {
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	19 f4       	brne	.+6      	; 0x97c <__vector_12+0x56>
			amplitude = ~(fivebit_counter ^ 0b00001111);
     976:	80 ef       	ldi	r24, 0xF0	; 240
     978:	28 27       	eor	r18, r24
     97a:	01 c0       	rjmp	.+2      	; 0x97e <__vector_12+0x58>
		} else {
			amplitude = ~(fivebit_counter ^ 0b00000000);
     97c:	20 95       	com	r18
     97e:	20 93 56 05 	sts	0x0556, r18
		}
		amplitude &= 0b11101111;
		amplitude |= (strobe << 4);
     982:	92 95       	swap	r25
     984:	90 7f       	andi	r25, 0xF0	; 240
     986:	80 91 56 05 	lds	r24, 0x0556
     98a:	8f 7e       	andi	r24, 0xEF	; 239
     98c:	98 2b       	or	r25, r24
     98e:	90 93 56 05 	sts	0x0556, r25
		PORTC = amplitude;
     992:	95 bb       	out	0x15, r25	; 21
	}

}
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <__vector_14>:

ISR(TIMER1_OVF_vect) 
{
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	0b b6       	in	r0, 0x3b	; 59
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	/* Sweep */
	if((sweep_enabled == 1) && (sweep_amount> 0) && (note_on_gate == 1)) {
     9ca:	80 91 66 05 	lds	r24, 0x0566
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <__vector_14+0x30>
     9d2:	6c c0       	rjmp	.+216    	; 0xaac <__vector_14+0x108>
     9d4:	20 91 69 05 	lds	r18, 0x0569
     9d8:	22 23       	and	r18, r18
     9da:	09 f4       	brne	.+2      	; 0x9de <__vector_14+0x3a>
     9dc:	67 c0       	rjmp	.+206    	; 0xaac <__vector_14+0x108>
     9de:	80 91 5e 05 	lds	r24, 0x055E
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <__vector_14+0x44>
     9e6:	62 c0       	rjmp	.+196    	; 0xaac <__vector_14+0x108>
		fake_16_timer ++;
     9e8:	80 91 5c 05 	lds	r24, 0x055C
     9ec:	90 91 5d 05 	lds	r25, 0x055D
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	90 93 5d 05 	sts	0x055D, r25
     9f6:	80 93 5c 05 	sts	0x055C, r24
		if(fake_16_timer >= 2) {
     9fa:	02 97       	sbiw	r24, 0x02	; 2
     9fc:	08 f4       	brcc	.+2      	; 0xa00 <__vector_14+0x5c>
     9fe:	56 c0       	rjmp	.+172    	; 0xaac <__vector_14+0x108>

			unsigned int sweep_mod = sweep_amount * note_table[playing_midi_note] / (8 * playing_midi_note);
     a00:	60 91 55 05 	lds	r22, 0x0555
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	66 0f       	add	r22, r22
     a08:	77 1f       	adc	r23, r23
     a0a:	fb 01       	movw	r30, r22
     a0c:	e0 50       	subi	r30, 0x00	; 0
     a0e:	ff 4f       	sbci	r31, 0xFF	; 255
     a10:	01 90       	ld	r0, Z+
     a12:	f0 81       	ld	r31, Z
     a14:	e0 2d       	mov	r30, r0
     a16:	82 2f       	mov	r24, r18
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	66 0f       	add	r22, r22
     a1c:	77 1f       	adc	r23, r23
     a1e:	66 0f       	add	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	9c 01       	movw	r18, r24
     a24:	e2 9f       	mul	r30, r18
     a26:	c0 01       	movw	r24, r0
     a28:	e3 9f       	mul	r30, r19
     a2a:	90 0d       	add	r25, r0
     a2c:	f2 9f       	mul	r31, r18
     a2e:	90 0d       	add	r25, r0
     a30:	11 24       	eor	r1, r1
     a32:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__udivmodhi4>
     a36:	9b 01       	movw	r18, r22

			//Sweep down mode
			if(sweep_direction == SWEEP_DOWN) {
     a38:	80 91 64 05 	lds	r24, 0x0564
     a3c:	40 91 4f 05 	lds	r20, 0x054F
     a40:	50 91 50 05 	lds	r21, 0x0550
     a44:	88 23       	and	r24, r24
     a46:	59 f4       	brne	.+22     	; 0xa5e <__vector_14+0xba>
				if(frequency < MAXIMUM_FREQ) {
     a48:	8a e4       	ldi	r24, 0x4A	; 74
     a4a:	48 33       	cpi	r20, 0x38	; 56
     a4c:	58 07       	cpc	r21, r24
     a4e:	98 f4       	brcc	.+38     	; 0xa76 <__vector_14+0xd2>
					frequency += sweep_mod;
     a50:	24 0f       	add	r18, r20
     a52:	35 1f       	adc	r19, r21
     a54:	30 93 50 05 	sts	0x0550, r19
     a58:	20 93 4f 05 	sts	0x054F, r18
     a5c:	17 c0       	rjmp	.+46     	; 0xa8c <__vector_14+0xe8>
				}
			}
			//Sweep up mode
			else
			{
				if(frequency> MINIMUM_FREQ+sweep_mod) {
     a5e:	cb 01       	movw	r24, r22
     a60:	cc 96       	adiw	r24, 0x3c	; 60
     a62:	84 17       	cp	r24, r20
     a64:	95 07       	cpc	r25, r21
     a66:	38 f4       	brcc	.+14     	; 0xa76 <__vector_14+0xd2>
					frequency -= sweep_mod;
     a68:	46 1b       	sub	r20, r22
     a6a:	57 0b       	sbc	r21, r23
     a6c:	50 93 50 05 	sts	0x0550, r21
     a70:	40 93 4f 05 	sts	0x054F, r20
     a74:	0b c0       	rjmp	.+22     	; 0xa8c <__vector_14+0xe8>
				}
				else
				{
					if(sweep_loop_enabled == 1) {
     a76:	80 91 6c 05 	lds	r24, 0x056C
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	29 f4       	brne	.+10     	; 0xa88 <__vector_14+0xe4>
						frequency = note_table[playing_midi_note];
     a7e:	f0 93 50 05 	sts	0x0550, r31
     a82:	e0 93 4f 05 	sts	0x054F, r30
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <__vector_14+0xe8>
					}
					else {
						amplitude = 0;
     a88:	10 92 56 05 	sts	0x0556, r1
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     a8c:	80 91 5a 05 	lds	r24, 0x055A
     a90:	90 91 5b 05 	lds	r25, 0x055B
     a94:	20 91 4f 05 	lds	r18, 0x054F
     a98:	30 91 50 05 	lds	r19, 0x0550
     a9c:	82 0f       	add	r24, r18
     a9e:	93 1f       	adc	r25, r19
     aa0:	9b bd       	out	0x2b, r25	; 43
     aa2:	8a bd       	out	0x2a, r24	; 42
					}
				}
			}

			update_frequency(frequency);
			fake_16_timer = 0;
     aa4:	10 92 5d 05 	sts	0x055D, r1
     aa8:	10 92 5c 05 	sts	0x055C, r1
		}

	}

}
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0b be       	out	0x3b, r0	; 59
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f 90       	pop	r0
     ace:	1f 90       	pop	r1
     ad0:	18 95       	reti

00000ad2 <enable_USART_interrupts>:
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
     ad2:	80 e8       	ldi	r24, 0x80	; 128
     ad4:	8b b9       	out	0x0b, r24	; 11
}
     ad6:	08 95       	ret

00000ad8 <disable_USART_interrupts>:

void disable_USART_interrupts() {
	UCSR0A = (0 << RXCIE0);
     ad8:	1b b8       	out	0x0b, r1	; 11
}
     ada:	08 95       	ret

00000adc <note_on>:

void note_on() {
	num_bytes = 0;
     adc:	10 92 4c 05 	sts	0x054C, r1
	//Reset main timer1
	TCNT1 = 0;
     ae0:	1d bc       	out	0x2d, r1	; 45
     ae2:	1c bc       	out	0x2c, r1	; 44
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
     ae4:	e0 91 4e 05 	lds	r30, 0x054E
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	e0 50       	subi	r30, 0x00	; 0
     af0:	ff 4f       	sbci	r31, 0xFF	; 255
     af2:	80 81       	ld	r24, Z
     af4:	91 81       	ldd	r25, Z+1	; 0x01
     af6:	90 93 50 05 	sts	0x0550, r25
     afa:	80 93 4f 05 	sts	0x054F, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     afe:	20 91 5a 05 	lds	r18, 0x055A
     b02:	30 91 5b 05 	lds	r19, 0x055B
     b06:	82 0f       	add	r24, r18
     b08:	93 1f       	adc	r25, r19
     b0a:	9b bd       	out	0x2b, r25	; 43
     b0c:	8a bd       	out	0x2a, r24	; 42
	//Reset main timer1
	TCNT1 = 0;
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
	update_frequency(frequency);
	note_on_gate = 1;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 5e 05 	sts	0x055E, r24
}
     b14:	08 95       	ret

00000b16 <note_off>:

void note_off() {
	num_bytes = 0;
     b16:	10 92 4c 05 	sts	0x054C, r1
	note_on_gate = 0;
     b1a:	10 92 5e 05 	sts	0x055E, r1
}
     b1e:	08 95       	ret

00000b20 <process_cc>:

void process_cc() {
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
	num_ccs = 0;
     b24:	10 92 52 05 	sts	0x0552, r1

	switch (current_midi_cc) {
     b28:	80 91 68 05 	lds	r24, 0x0568
     b2c:	8c 30       	cpi	r24, 0x0C	; 12
     b2e:	09 f4       	brne	.+2      	; 0xb32 <process_cc+0x12>
     b30:	3f c0       	rjmp	.+126    	; 0xbb0 <process_cc+0x90>
     b32:	8d 30       	cpi	r24, 0x0D	; 13
     b34:	30 f4       	brcc	.+12     	; 0xb42 <process_cc+0x22>
     b36:	87 30       	cpi	r24, 0x07	; 7
     b38:	69 f0       	breq	.+26     	; 0xb54 <process_cc+0x34>
     b3a:	88 30       	cpi	r24, 0x08	; 8
     b3c:	09 f0       	breq	.+2      	; 0xb40 <process_cc+0x20>
     b3e:	63 c0       	rjmp	.+198    	; 0xc06 <process_cc+0xe6>
     b40:	0e c0       	rjmp	.+28     	; 0xb5e <process_cc+0x3e>
     b42:	8e 30       	cpi	r24, 0x0E	; 14
     b44:	09 f4       	brne	.+2      	; 0xb48 <process_cc+0x28>
     b46:	4a c0       	rjmp	.+148    	; 0xbdc <process_cc+0xbc>
     b48:	8e 30       	cpi	r24, 0x0E	; 14
     b4a:	e8 f1       	brcs	.+122    	; 0xbc6 <process_cc+0xa6>
     b4c:	8f 30       	cpi	r24, 0x0F	; 15
     b4e:	09 f0       	breq	.+2      	; 0xb52 <process_cc+0x32>
     b50:	5a c0       	rjmp	.+180    	; 0xc06 <process_cc+0xe6>
     b52:	4f c0       	rjmp	.+158    	; 0xbf2 <process_cc+0xd2>

	case MASTER_VOLUME_CC:
		master_volume = current_midi_ccdata;
     b54:	80 91 61 05 	lds	r24, 0x0561
     b58:	80 93 4d 05 	sts	0x054D, r24
     b5c:	54 c0       	rjmp	.+168    	; 0xc06 <process_cc+0xe6>
		break;
	case FINE_PITCH_CC:
		fine_pitch_bend = ((note_table[playing_midi_note - 1]
     b5e:	e0 91 55 05 	lds	r30, 0x0555
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	df 01       	movw	r26, r30
     b6a:	a0 50       	subi	r26, 0x00	; 0
     b6c:	bf 4f       	sbci	r27, 0xFF	; 255
     b6e:	0d 91       	ld	r16, X+
     b70:	1c 91       	ld	r17, X
     b72:	e2 50       	subi	r30, 0x02	; 2
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	20 81       	ld	r18, Z
     b78:	31 81       	ldd	r19, Z+1	; 0x01
     b7a:	20 1b       	sub	r18, r16
     b7c:	31 0b       	sbc	r19, r17
     b7e:	80 91 61 05 	lds	r24, 0x0561
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	ac 01       	movw	r20, r24
     b86:	24 9f       	mul	r18, r20
     b88:	c0 01       	movw	r24, r0
     b8a:	25 9f       	mul	r18, r21
     b8c:	90 0d       	add	r25, r0
     b8e:	34 9f       	mul	r19, r20
     b90:	90 0d       	add	r25, r0
     b92:	11 24       	eor	r1, r1
     b94:	60 ec       	ldi	r22, 0xC0	; 192
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__udivmodhi4>
     b9c:	cb 01       	movw	r24, r22
     b9e:	70 93 5b 05 	sts	0x055B, r23
     ba2:	60 93 5a 05 	sts	0x055A, r22
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     ba6:	80 0f       	add	r24, r16
     ba8:	91 1f       	adc	r25, r17
     baa:	9b bd       	out	0x2b, r25	; 43
     bac:	8a bd       	out	0x2a, r24	; 42
     bae:	2b c0       	rjmp	.+86     	; 0xc06 <process_cc+0xe6>
		                               - note_table[playing_midi_note]) * current_midi_ccdata) / 192;
		update_frequency(note_table[playing_midi_note]);
		break;

	case SWEEP_ENABLED_CC:
		if (current_midi_ccdata > 64)
     bb0:	80 91 61 05 	lds	r24, 0x0561
     bb4:	81 34       	cpi	r24, 0x41	; 65
     bb6:	20 f0       	brcs	.+8      	; 0xbc0 <process_cc+0xa0>
			sweep_enabled = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 66 05 	sts	0x0566, r24
     bbe:	23 c0       	rjmp	.+70     	; 0xc06 <process_cc+0xe6>
		else
			sweep_enabled = 0;
     bc0:	10 92 66 05 	sts	0x0566, r1
     bc4:	20 c0       	rjmp	.+64     	; 0xc06 <process_cc+0xe6>
		break;

	case SWEEP_DIRECTION_CC:
		if (current_midi_ccdata > 64)
     bc6:	80 91 61 05 	lds	r24, 0x0561
     bca:	81 34       	cpi	r24, 0x41	; 65
     bcc:	20 f0       	brcs	.+8      	; 0xbd6 <process_cc+0xb6>
			sweep_direction = SWEEP_UP;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	80 93 64 05 	sts	0x0564, r24
     bd4:	18 c0       	rjmp	.+48     	; 0xc06 <process_cc+0xe6>
		else
			sweep_direction = SWEEP_DOWN;
     bd6:	10 92 64 05 	sts	0x0564, r1
     bda:	15 c0       	rjmp	.+42     	; 0xc06 <process_cc+0xe6>
		break;

	case SWEEP_AMOUNT_CC:
		sweep_amount = current_midi_ccdata;
     bdc:	20 91 61 05 	lds	r18, 0x0561
     be0:	20 93 69 05 	sts	0x0569, r18
		OCR1B = sweep_amount * 1024;
     be4:	92 2f       	mov	r25, r18
     be6:	99 0f       	add	r25, r25
     be8:	99 0f       	add	r25, r25
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	99 bd       	out	0x29, r25	; 41
     bee:	88 bd       	out	0x28, r24	; 40
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <process_cc+0xe6>
		break;
	case SWEEP_LOOP_ENABLED_CC:
		if (current_midi_ccdata > 64)
     bf2:	80 91 61 05 	lds	r24, 0x0561
     bf6:	81 34       	cpi	r24, 0x41	; 65
     bf8:	20 f0       	brcs	.+8      	; 0xc02 <process_cc+0xe2>
			sweep_loop_enabled = 1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 93 6c 05 	sts	0x056C, r24
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <process_cc+0xe6>
		else
			sweep_loop_enabled = 0;
     c02:	10 92 6c 05 	sts	0x056C, r1
		break;

	}
}
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <update_frequency>:

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     c0c:	20 91 5a 05 	lds	r18, 0x055A
     c10:	30 91 5b 05 	lds	r19, 0x055B
     c14:	28 0f       	add	r18, r24
     c16:	39 1f       	adc	r19, r25
     c18:	3b bd       	out	0x2b, r19	; 43
     c1a:	2a bd       	out	0x2a, r18	; 42
}
     c1c:	08 95       	ret

00000c1e <bend_pitch>:

void bend_pitch() {
	num_pbs = 0;
     c1e:	10 92 65 05 	sts	0x0565, r1

	if (current_midi_pb_h > 63) {
     c22:	60 91 54 05 	lds	r22, 0x0554
     c26:	60 34       	cpi	r22, 0x40	; 64
     c28:	80 f1       	brcs	.+96     	; 0xc8a <bend_pitch+0x6c>
		distance
     c2a:	e0 91 55 05 	lds	r30, 0x0555
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	df 01       	movw	r26, r30
     c36:	a0 50       	subi	r26, 0x00	; 0
     c38:	bf 4f       	sbci	r27, 0xFF	; 255
     c3a:	4d 91       	ld	r20, X+
     c3c:	5c 91       	ld	r21, X
     c3e:	ec 5f       	subi	r30, 0xFC	; 252
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	9a 01       	movw	r18, r20
     c48:	28 1b       	sub	r18, r24
     c4a:	39 0b       	sbc	r19, r25
     c4c:	86 2f       	mov	r24, r22
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	cf 97       	sbiw	r24, 0x3f	; 63
     c52:	bc 01       	movw	r22, r24
     c54:	26 9f       	mul	r18, r22
     c56:	c0 01       	movw	r24, r0
     c58:	27 9f       	mul	r18, r23
     c5a:	90 0d       	add	r25, r0
     c5c:	36 9f       	mul	r19, r22
     c5e:	90 0d       	add	r25, r0
     c60:	11 24       	eor	r1, r1
     c62:	26 e0       	ldi	r18, 0x06	; 6
     c64:	96 95       	lsr	r25
     c66:	87 95       	ror	r24
     c68:	2a 95       	dec	r18
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <bend_pitch+0x46>
     c6c:	90 93 59 05 	sts	0x0559, r25
     c70:	80 93 58 05 	sts	0x0558, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     c74:	20 91 5a 05 	lds	r18, 0x055A
     c78:	30 91 5b 05 	lds	r19, 0x055B
     c7c:	42 0f       	add	r20, r18
     c7e:	53 1f       	adc	r21, r19
     c80:	48 1b       	sub	r20, r24
     c82:	59 0b       	sbc	r21, r25
     c84:	5b bd       	out	0x2b, r21	; 43
     c86:	4a bd       	out	0x2a, r20	; 42
     c88:	08 95       	ret
		distance
		= ((note_table[playing_midi_note]
		               - note_table[playing_midi_note + 2])
		               * (current_midi_pb_h - 63)) / 64;
		update_frequency(note_table[playing_midi_note] - distance);
	} else if ((current_midi_pb_h < 63) && (playing_midi_note > 1)) {
     c8a:	6f 33       	cpi	r22, 0x3F	; 63
     c8c:	89 f1       	breq	.+98     	; 0xcf0 <bend_pitch+0xd2>
     c8e:	e0 91 55 05 	lds	r30, 0x0555
     c92:	e2 30       	cpi	r30, 0x02	; 2
     c94:	68 f1       	brcs	.+90     	; 0xcf0 <bend_pitch+0xd2>
		distance = ((note_table[playing_midi_note - 2]
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	df 01       	movw	r26, r30
     c9e:	a0 50       	subi	r26, 0x00	; 0
     ca0:	bf 4f       	sbci	r27, 0xFF	; 255
     ca2:	4d 91       	ld	r20, X+
     ca4:	5c 91       	ld	r21, X
     ca6:	e4 50       	subi	r30, 0x04	; 4
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	20 81       	ld	r18, Z
     cac:	31 81       	ldd	r19, Z+1	; 0x01
     cae:	24 1b       	sub	r18, r20
     cb0:	35 0b       	sbc	r19, r21
     cb2:	80 e4       	ldi	r24, 0x40	; 64
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	86 1b       	sub	r24, r22
     cb8:	91 09       	sbc	r25, r1
     cba:	bc 01       	movw	r22, r24
     cbc:	26 9f       	mul	r18, r22
     cbe:	c0 01       	movw	r24, r0
     cc0:	27 9f       	mul	r18, r23
     cc2:	90 0d       	add	r25, r0
     cc4:	36 9f       	mul	r19, r22
     cc6:	90 0d       	add	r25, r0
     cc8:	11 24       	eor	r1, r1
     cca:	76 e0       	ldi	r23, 0x06	; 6
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	7a 95       	dec	r23
     cd2:	e1 f7       	brne	.-8      	; 0xccc <bend_pitch+0xae>
     cd4:	90 93 59 05 	sts	0x0559, r25
     cd8:	80 93 58 05 	sts	0x0558, r24
	}
}

void update_frequency(unsigned int new_frequency) 
{
	OCR1A = new_frequency + fine_pitch_bend;
     cdc:	20 91 5a 05 	lds	r18, 0x055A
     ce0:	30 91 5b 05 	lds	r19, 0x055B
     ce4:	42 0f       	add	r20, r18
     ce6:	53 1f       	adc	r21, r19
     ce8:	48 0f       	add	r20, r24
     cea:	59 1f       	adc	r21, r25
     cec:	5b bd       	out	0x2b, r21	; 43
     cee:	4a bd       	out	0x2a, r20	; 42
     cf0:	08 95       	ret

00000cf2 <check_byte_received>:

void check_byte_received() 
{
#if 1

	if( selfPlay ) {
     cf2:	80 91 45 05 	lds	r24, 0x0545
     cf6:	88 23       	and	r24, r24
     cf8:	39 f1       	breq	.+78     	; 0xd48 <check_byte_received+0x56>
		if( counter == 0 ) {
     cfa:	80 91 04 03 	lds	r24, 0x0304
     cfe:	90 91 05 03 	lds	r25, 0x0305
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	e1 f4       	brne	.+56     	; 0xd3e <check_byte_received+0x4c>
			byte_received = pgm_read_byte(&daft[daftIndex]);
     d06:	80 91 46 05 	lds	r24, 0x0546
     d0a:	90 91 47 05 	lds	r25, 0x0547
     d0e:	fc 01       	movw	r30, r24
     d10:	e4 57       	subi	r30, 0x74	; 116
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	e4 91       	lpm	r30, Z+
     d16:	e0 93 51 05 	sts	0x0551, r30
			daftIndex ++; 
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	90 93 47 05 	sts	0x0547, r25
     d20:	80 93 46 05 	sts	0x0546, r24
			if( daftIndex == sizeof( daft ) ) {
     d24:	86 58       	subi	r24, 0x86	; 134
     d26:	97 40       	sbci	r25, 0x07	; 7
     d28:	21 f4       	brne	.+8      	; 0xd32 <check_byte_received+0x40>
				daftIndex = 0;
     d2a:	10 92 47 05 	sts	0x0547, r1
     d2e:	10 92 46 05 	sts	0x0546, r1

			}
			byte_ready = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 4b 05 	sts	0x054B, r24
			counter = 2000;
     d38:	80 ed       	ldi	r24, 0xD0	; 208
     d3a:	97 e0       	ldi	r25, 0x07	; 7
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <check_byte_received+0x4e>

		} else {
			counter -- ;
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	90 93 05 03 	sts	0x0305, r25
     d44:	80 93 04 03 	sts	0x0304, r24
		}
		}
#endif

	//Is there a byte waiting in the buffer?
	if (byte_ready == 1) {
     d48:	30 91 4b 05 	lds	r19, 0x054B
     d4c:	31 30       	cpi	r19, 0x01	; 1
     d4e:	09 f0       	breq	.+2      	; 0xd52 <check_byte_received+0x60>
     d50:	85 c0       	rjmp	.+266    	; 0xe5c <check_byte_received+0x16a>
		//Is this a stupid byte like Clock or Active sensing?
		if (byte_received < 0xF0) {
     d52:	20 91 51 05 	lds	r18, 0x0551
     d56:	20 3f       	cpi	r18, 0xF0	; 240
     d58:	08 f0       	brcs	.+2      	; 0xd5c <check_byte_received+0x6a>
     d5a:	7e c0       	rjmp	.+252    	; 0xe58 <check_byte_received+0x166>
			//Is this a status byte? ...
			if (byte_received >= 0x80) {
     d5c:	27 ff       	sbrs	r18, 7
     d5e:	20 c0       	rjmp	.+64     	; 0xda0 <check_byte_received+0xae>
				unsigned char temp_midi_channel = byte_received & 0x0F;
				//Is this for one of our channels?
				if ( 1 ) // (temp_midi_channel == midi_channel) 
				{
					current_midi_channel = temp_midi_channel;
     d60:	82 2f       	mov	r24, r18
     d62:	8f 70       	andi	r24, 0x0F	; 15
     d64:	80 93 57 05 	sts	0x0557, r24

					//What kind of status byte is this?
					unsigned char status_type = (byte_received & 0xF0);
					switch (status_type) {
     d68:	82 2f       	mov	r24, r18
     d6a:	80 7f       	andi	r24, 0xF0	; 240
     d6c:	80 39       	cpi	r24, 0x90	; 144
     d6e:	51 f0       	breq	.+20     	; 0xd84 <check_byte_received+0x92>
     d70:	81 39       	cpi	r24, 0x91	; 145
     d72:	18 f4       	brcc	.+6      	; 0xd7a <check_byte_received+0x88>
     d74:	80 38       	cpi	r24, 0x80	; 128
     d76:	89 f4       	brne	.+34     	; 0xd9a <check_byte_received+0xa8>
     d78:	08 c0       	rjmp	.+16     	; 0xd8a <check_byte_received+0x98>
     d7a:	80 3b       	cpi	r24, 0xB0	; 176
     d7c:	41 f0       	breq	.+16     	; 0xd8e <check_byte_received+0x9c>
     d7e:	80 3e       	cpi	r24, 0xE0	; 224
     d80:	61 f4       	brne	.+24     	; 0xd9a <check_byte_received+0xa8>
     d82:	07 c0       	rjmp	.+14     	; 0xd92 <check_byte_received+0xa0>
					case (MIDI_STATUS_TYPE_NOTEON):
						current_midi_status = MIDI_STATUS_NOTEON;
     d84:	30 93 60 05 	sts	0x0560, r19
     d88:	67 c0       	rjmp	.+206    	; 0xe58 <check_byte_received+0x166>
					break;
					case (MIDI_STATUS_TYPE_NOTEOFF):
						current_midi_status = MIDI_STATUS_NOTEOFF;
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <check_byte_received+0xa2>
					break;
					case (MIDI_STATUS_TYPE_CC):
						current_midi_status = MIDI_STATUS_CC;
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <check_byte_received+0xa2>
					break;
					case (MIDI_STATUS_TYPE_PB):
						current_midi_status = MIDI_STATUS_PB;
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	80 93 60 05 	sts	0x0560, r24
     d98:	5f c0       	rjmp	.+190    	; 0xe58 <check_byte_received+0x166>
					break;
					default:
						current_midi_status = MIDI_STATUS_NONE;
     d9a:	10 92 60 05 	sts	0x0560, r1
     d9e:	5c c0       	rjmp	.+184    	; 0xe58 <check_byte_received+0x166>
					current_midi_status = 0;
				}
			}
			// ... or is it a data byte?
			else {
				switch (current_midi_status) {
     da0:	90 91 60 05 	lds	r25, 0x0560
     da4:	92 30       	cpi	r25, 0x02	; 2
     da6:	29 f1       	breq	.+74     	; 0xdf2 <check_byte_received+0x100>
     da8:	93 30       	cpi	r25, 0x03	; 3
     daa:	20 f4       	brcc	.+8      	; 0xdb4 <check_byte_received+0xc2>
     dac:	91 30       	cpi	r25, 0x01	; 1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <check_byte_received+0xc0>
     db0:	53 c0       	rjmp	.+166    	; 0xe58 <check_byte_received+0x166>
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <check_byte_received+0xce>
     db4:	93 30       	cpi	r25, 0x03	; 3
     db6:	a1 f1       	breq	.+104    	; 0xe20 <check_byte_received+0x12e>
     db8:	94 30       	cpi	r25, 0x04	; 4
     dba:	09 f0       	breq	.+2      	; 0xdbe <check_byte_received+0xcc>
     dbc:	4d c0       	rjmp	.+154    	; 0xe58 <check_byte_received+0x166>
     dbe:	3e c0       	rjmp	.+124    	; 0xe3c <check_byte_received+0x14a>
				case (MIDI_STATUS_NOTEON):

					//Is this a velocity byte?
					if (num_bytes > 0) {
     dc0:	80 91 4c 05 	lds	r24, 0x054C
     dc4:	88 23       	and	r24, r24
     dc6:	81 f0       	breq	.+32     	; 0xde8 <check_byte_received+0xf6>
     dc8:	90 91 4e 05 	lds	r25, 0x054E

						//If the velocity sent was 0, then this is really a NOTE-OFF
						if (byte_received > 0) {
     dcc:	22 23       	and	r18, r18
     dce:	29 f0       	breq	.+10     	; 0xdda <check_byte_received+0xe8>
							//current_midi_velocity = byte_received;
							playing_midi_note = current_midi_note;
     dd0:	90 93 55 05 	sts	0x0555, r25
							note_on();
     dd4:	0e 94 6e 05 	call	0xadc	; 0xadc <note_on>
     dd8:	10 c0       	rjmp	.+32     	; 0xdfa <check_byte_received+0x108>
						} else {
							if (current_midi_note == playing_midi_note) {
     dda:	80 91 55 05 	lds	r24, 0x0555
     dde:	98 17       	cp	r25, r24
     de0:	61 f4       	brne	.+24     	; 0xdfa <check_byte_received+0x108>
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
	note_on_gate = 0;
     de2:	10 92 5e 05 	sts	0x055E, r1
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <check_byte_received+0x108>
						num_bytes = 0;
					}

				//Or is this a note data byte?
					else {
						current_midi_note = byte_received;
     de8:	20 93 4e 05 	sts	0x054E, r18
						num_bytes++;
     dec:	90 93 4c 05 	sts	0x054C, r25
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <check_byte_received+0x128>

				break;

				case (MIDI_STATUS_NOTEOFF):
					//Is this a velocity byte?
					if (num_bytes > 0) {
     df2:	80 91 4c 05 	lds	r24, 0x054C
     df6:	88 23       	and	r24, r24
     df8:	19 f0       	breq	.+6      	; 0xe00 <check_byte_received+0x10e>
						//Who cares? We aren't implementing aftertouch
						num_bytes = 0;
     dfa:	10 92 4c 05 	sts	0x054C, r1
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <check_byte_received+0x128>
					} else {
						/* This is a note byte. Let's see if it's the same as the currently
						 * playing note. Only then will we note_off()
						 */

						if (byte_received == playing_midi_note) {
     e00:	80 91 55 05 	lds	r24, 0x0555
     e04:	28 17       	cp	r18, r24
     e06:	21 f4       	brne	.+8      	; 0xe10 <check_byte_received+0x11e>
	update_frequency(frequency);
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
     e08:	10 92 4c 05 	sts	0x054C, r1
	note_on_gate = 0;
     e0c:	10 92 5e 05 	sts	0x055E, r1
						 */

						if (byte_received == playing_midi_note) {
							note_off();
						}
						num_bytes++;
     e10:	80 91 4c 05 	lds	r24, 0x054C
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	80 93 4c 05 	sts	0x054C, r24
	}

}

void clear_byte_received() {
	byte_received = 0;
     e1a:	10 92 51 05 	sts	0x0551, r1
     e1e:	1c c0       	rjmp	.+56     	; 0xe58 <check_byte_received+0x166>

				break;

				case (MIDI_STATUS_CC):
					//Did we already get a CC Status byte?
					if (num_ccs > 0) {
     e20:	80 91 52 05 	lds	r24, 0x0552
     e24:	88 23       	and	r24, r24
     e26:	29 f0       	breq	.+10     	; 0xe32 <check_byte_received+0x140>
						current_midi_ccdata = byte_received;
     e28:	20 93 61 05 	sts	0x0561, r18
						process_cc();
     e2c:	0e 94 90 05 	call	0xb20	; 0xb20 <process_cc>
     e30:	13 c0       	rjmp	.+38     	; 0xe58 <check_byte_received+0x166>
					}
				//Or is this a new CC status byte?
					else {
						current_midi_cc = byte_received;
     e32:	20 93 68 05 	sts	0x0568, r18
						num_ccs++;
     e36:	30 93 52 05 	sts	0x0552, r19
     e3a:	0e c0       	rjmp	.+28     	; 0xe58 <check_byte_received+0x166>
					}
				break;

				case (MIDI_STATUS_PB):
					//How many PB related bytes have we gotten?
					switch (num_pbs) {
     e3c:	80 91 65 05 	lds	r24, 0x0565
     e40:	88 23       	and	r24, r24
     e42:	19 f0       	breq	.+6      	; 0xe4a <check_byte_received+0x158>
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	41 f4       	brne	.+16     	; 0xe58 <check_byte_received+0x166>
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <check_byte_received+0x15e>
					case (0):
						//First byte is 7 LSB
						//Don't care about it for now
						//current_midi_pb_l = byte_received;

						num_pbs++;
     e4a:	30 93 65 05 	sts	0x0565, r19
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <check_byte_received+0x166>
					break;
					case (1):
						//Second byte has 7 MSB
						current_midi_pb_h = byte_received;
     e50:	20 93 54 05 	sts	0x0554, r18
						//Combine to get 14 bytes 0 - 13
						//current_midi_pb = ((current_midi_pb_h << 7)|(current_midi_pb_l << 0));
						bend_pitch();
     e54:	0e 94 0f 06 	call	0xc1e	; 0xc1e <bend_pitch>
				break;
				}
			}

		}
		byte_ready = 0;
     e58:	10 92 4b 05 	sts	0x054B, r1
     e5c:	08 95       	ret

00000e5e <main>:
}

int main(void) 
{
	/* Disable interrupts at first */
	cli();
     e5e:	f8 94       	cli

	/* Setup I/O Pins */
	init_io();
     e60:	0e 94 5e 04 	call	0x8bc	; 0x8bc <init_io>


	/* Setup Timers */
	init_timers();
     e64:	0e 94 68 04 	call	0x8d0	; 0x8d0 <init_timers>
	}
}

void init_interrupts() {
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
     e68:	80 e9       	ldi	r24, 0x90	; 144
     e6a:	8a b9       	out	0x0a, r24	; 10

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	80 93 95 00 	sts	0x0095, r24

	// These were for the original synth, changed for the l1 human badge
	//UBRR0L = 0x27; // For 20MHz Clock
	//UBRR0L = 0x13;		// FOr 10MHz Clock

	UBRR0H = high((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
     e72:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
     e76:	8f e1       	ldi	r24, 0x1F	; 31
     e78:	89 b9       	out	0x09, r24	; 9
		byte_ready = 0;
	}
}

void enable_USART_interrupts() {
	UCSR0A = (1 << RXCIE0);
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	8b b9       	out	0x0b, r24	; 11

	/* Enable USART and Pin Interrupts */
	init_interrupts();


	PORTB = 0xFF;
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	88 bb       	out	0x18, r24	; 24

	OCR1A = 500;
     e82:	84 ef       	ldi	r24, 0xF4	; 244
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	9b bd       	out	0x2b, r25	; 43
     e88:	8a bd       	out	0x2a, r24	; 42
}

void init_adc( void ) 
{
	// set up ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 1/128 prescaler
     e8a:	86 b1       	in	r24, 0x06	; 6
     e8c:	87 60       	ori	r24, 0x07	; 7
     e8e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= _BV(ADEN); 							// enable ADC
     e90:	37 9a       	sbi	0x06, 7	; 6

	/*
		Pitch bend needs to start at 64 (middle value) or pitch will start out
		two half steps too low (0 = max bend downward)
	 */
	current_midi_pb_l = current_midi_pb_h = 64;
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	80 93 54 05 	sts	0x0554, r24
     e98:	80 93 53 05 	sts	0x0553, r24

	num_bytes = 0;
     e9c:	10 92 4c 05 	sts	0x054C, r1
	num_ccs = 0;
     ea0:	10 92 52 05 	sts	0x0552, r1
	num_pbs = 0;
     ea4:	10 92 65 05 	sts	0x0565, r1
	byte_ready = 0;
     ea8:	10 92 4b 05 	sts	0x054B, r1
	midi_channel = 0;
     eac:	10 92 67 05 	sts	0x0567, r1
	master_volume = 127;
     eb0:	8f e7       	ldi	r24, 0x7F	; 127
     eb2:	80 93 4d 05 	sts	0x054D, r24

	amplitude = 0;
     eb6:	10 92 56 05 	sts	0x0556, r1
	fine_pitch_bend = 0;
     eba:	10 92 5b 05 	sts	0x055B, r1
     ebe:	10 92 5a 05 	sts	0x055A, r1
	note_on_gate = 0;
     ec2:	10 92 5e 05 	sts	0x055E, r1

	sweep_enabled = 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	80 93 66 05 	sts	0x0566, r24
	sweep_direction = SWEEP_UP;
     ecc:	80 93 64 05 	sts	0x0564, r24
	sweep_amount = 0;
     ed0:	10 92 69 05 	sts	0x0569, r1
	sweep_loop_enabled = 1;
     ed4:	80 93 6c 05 	sts	0x056C, r24
	fake_16_timer = 0;
     ed8:	10 92 5d 05 	sts	0x055D, r1
     edc:	10 92 5c 05 	sts	0x055C, r1

	/* Finally, enable global interrupts */
	sei();
     ee0:	78 94       	sei

	//play(song[1]);

  	adctimer = 0;
     ee2:	10 92 0e 05 	sts	0x050E, r1
	/*Main Loop*/
	while (1) {

	    uint8_t adcchan = 0;

	    adctimer++;
     ee6:	80 91 0e 05 	lds	r24, 0x050E
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	80 93 0e 05 	sts	0x050E, r24
	    adctimer &= (NUM_ADC_SAMPLES-1);
     ef0:	80 91 0e 05 	lds	r24, 0x050E
     ef4:	8f 71       	andi	r24, 0x1F	; 31
     ef6:	80 93 0e 05 	sts	0x050E, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0

	    // read ADC channels
	    for (adcchan = 0; adcchan < NUM_ADC_CHANNELS; adcchan++) {

			ADMUX = _BV(REFS0) | adcchan;
     efc:	89 2f       	mov	r24, r25
     efe:	80 64       	ori	r24, 0x40	; 64
     f00:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= _BV(ADSC);
     f02:	36 9a       	sbi	0x06, 6	; 6

	    adctimer++;
	    adctimer &= (NUM_ADC_SAMPLES-1);

	    // read ADC channels
	    for (adcchan = 0; adcchan < NUM_ADC_CHANNELS; adcchan++) {
     f04:	9f 5f       	subi	r25, 0xFF	; 255
     f06:	98 30       	cpi	r25, 0x08	; 8
     f08:	c9 f7       	brne	.-14     	; 0xefc <main+0x9e>
//			read_adc(knobs+adcchan);


	    }

		check_byte_received();
     f0a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <check_byte_received>


	    // update values after we've read averaged values from all knobs
	    if ( adctimer == 0 ) {
     f0e:	80 91 0e 05 	lds	r24, 0x050E
     f12:	88 23       	and	r24, r24
     f14:	41 f7       	brne	.-48     	; 0xee6 <main+0x88>

			fine_pitch_bend = knobs[PITCH_KNOB].val;	
     f16:	80 91 0f 05 	lds	r24, 0x050F
     f1a:	90 91 10 05 	lds	r25, 0x0510
     f1e:	90 93 5b 05 	sts	0x055B, r25
     f22:	80 93 5a 05 	sts	0x055A, r24
     f26:	df cf       	rjmp	.-66     	; 0xee6 <main+0x88>

00000f28 <clear_byte_received>:
	}

}

void clear_byte_received() {
	byte_received = 0;
     f28:	10 92 51 05 	sts	0x0551, r1
}
     f2c:	08 95       	ret

00000f2e <check_channel_set>:

void check_channel_set() {
	midi_channel = 0;
     f2e:	10 92 67 05 	sts	0x0567, r1
	//Get 4-bit (0-16) MIDI CHannel from PORTD b4-b7)
	//midi_channel |= (~PIND & 0xF0) >> 4;

}
     f32:	08 95       	ret

00000f34 <pgm_read_byte1>:
#define OCTAVE_OFFSET (0)
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
     f34:	fc 01       	movw	r30, r24
	return *p;
}
     f36:	80 81       	ld	r24, Z
     f38:	08 95       	ret

00000f3a <play>:

void play(const unsigned char *p)
{
     f3a:	2f 92       	push	r2
     f3c:	3f 92       	push	r3
     f3e:	4f 92       	push	r4
     f40:	5f 92       	push	r5
     f42:	6f 92       	push	r6
     f44:	7f 92       	push	r7
     f46:	8f 92       	push	r8
     f48:	9f 92       	push	r9
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <play+0x26>
     f60:	0f 92       	push	r0
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <play+0x30>
  // format: d=N,o=N,b=NNN:
  // find the start (skip name, etc)

  while( pgm_read_byte1(p) != ':' ) {

	p++;					// ignore name
     f68:	cf 01       	movw	r24, r30
  
	
  // format: d=N,o=N,b=NNN:
  // find the start (skip name, etc)

  while( pgm_read_byte1(p) != ':' ) {
     f6a:	fc 01       	movw	r30, r24
     f6c:	81 91       	ld	r24, Z+
     f6e:	8a 33       	cpi	r24, 0x3A	; 58
     f70:	d9 f7       	brne	.-10     	; 0xf68 <play+0x2e>

	p++;					// ignore name
  }
  	p++;                     // skip ':'
     f72:	fb 83       	std	Y+3, r31	; 0x03
     f74:	ea 83       	std	Y+2, r30	; 0x02
		
  // get default duration
  if(pgm_read_byte1(p) == 'd') {
     f76:	80 81       	ld	r24, Z
     f78:	84 36       	cpi	r24, 0x64	; 100
     f7a:	21 f0       	breq	.+8      	; 0xf84 <play+0x4a>
     f7c:	04 e0       	ldi	r16, 0x04	; 4
     f7e:	e0 2e       	mov	r14, r16
     f80:	f1 2c       	mov	r15, r1
     f82:	26 c0       	rjmp	.+76     	; 0xfd0 <play+0x96>
    p++; p++;              // skip "d="
     f84:	32 96       	adiw	r30, 0x02	; 2
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	11 c0       	rjmp	.+34     	; 0xfae <play+0x74>
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
      num = (num * 10) + ((*p++) - '0');
     f8c:	c9 01       	movw	r24, r18
     f8e:	13 e0       	ldi	r17, 0x03	; 3
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	1a 95       	dec	r17
     f96:	e1 f7       	brne	.-8      	; 0xf90 <play+0x56>
     f98:	22 0f       	add	r18, r18
     f9a:	33 1f       	adc	r19, r19
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	24 2f       	mov	r18, r20
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	20 53       	subi	r18, 0x30	; 48
     fa6:	30 40       	sbci	r19, 0x00	; 0
     fa8:	28 0f       	add	r18, r24
     faa:	39 1f       	adc	r19, r25
     fac:	31 96       	adiw	r30, 0x01	; 1
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
     fae:	40 81       	ld	r20, Z
		
  // get default duration
  if(pgm_read_byte1(p) == 'd') {
    p++; p++;              // skip "d="
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
     fb0:	40 33       	cpi	r20, 0x30	; 48
     fb2:	10 f0       	brcs	.+4      	; 0xfb8 <play+0x7e>
     fb4:	4a 33       	cpi	r20, 0x3A	; 58
     fb6:	50 f3       	brcs	.-44     	; 0xf8c <play+0x52>
      num = (num * 10) + ((*p++) - '0');
    }
    if(num > 0) default_dur = num;
     fb8:	21 15       	cp	r18, r1
     fba:	31 05       	cpc	r19, r1
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <play+0x8c>
     fbe:	a4 e0       	ldi	r26, 0x04	; 4
     fc0:	ea 2e       	mov	r14, r26
     fc2:	f1 2c       	mov	r15, r1
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <play+0x8e>
     fc6:	79 01       	movw	r14, r18
    p++;                   // skip comma
     fc8:	cf 01       	movw	r24, r30
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	9b 83       	std	Y+3, r25	; 0x03
     fce:	8a 83       	std	Y+2, r24	; 0x02
  }


  // get default octave
  if(pgm_read_byte1(p) == 'o') {
     fd0:	ea 81       	ldd	r30, Y+2	; 0x02
     fd2:	fb 81       	ldd	r31, Y+3	; 0x03
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 36       	cpi	r24, 0x6F	; 111
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <play+0xa6>
     fda:	06 e0       	ldi	r16, 0x06	; 6
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	16 c0       	rjmp	.+44     	; 0x100c <play+0xd2>
    p++; p++;              // skip "o="
     fe0:	ea 81       	ldd	r30, Y+2	; 0x02
     fe2:	fb 81       	ldd	r31, Y+3	; 0x03
     fe4:	31 96       	adiw	r30, 0x01	; 1
     fe6:	af 01       	movw	r20, r30
     fe8:	4f 5f       	subi	r20, 0xFF	; 255
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
    num = pgm_read_byte1(p) - '0';p++;
     fec:	81 81       	ldd	r24, Z+1	; 0x01
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9c 01       	movw	r18, r24
     ff2:	20 53       	subi	r18, 0x30	; 48
     ff4:	30 40       	sbci	r19, 0x00	; 0
    if(num >= 3 && num <=7) default_oct = num;
     ff6:	c3 97       	sbiw	r24, 0x33	; 51
     ff8:	05 97       	sbiw	r24, 0x05	; 5
     ffa:	10 f4       	brcc	.+4      	; 0x1000 <play+0xc6>
     ffc:	89 01       	movw	r16, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <play+0xca>
    1000:	06 e0       	ldi	r16, 0x06	; 6
    1002:	10 e0       	ldi	r17, 0x00	; 0
    p++;                   // skip comma
    1004:	ca 01       	movw	r24, r20
    1006:	02 96       	adiw	r24, 0x02	; 2
    1008:	9b 83       	std	Y+3, r25	; 0x03
    100a:	8a 83       	std	Y+2, r24	; 0x02
  }


  // get BPM
  if(pgm_read_byte1(p) == 'b') {
    100c:	ea 81       	ldd	r30, Y+2	; 0x02
    100e:	fb 81       	ldd	r31, Y+3	; 0x03
    1010:	80 81       	ld	r24, Z
    1012:	82 36       	cpi	r24, 0x62	; 98
    1014:	19 f0       	breq	.+6      	; 0x101c <play+0xe2>
    1016:	2f e3       	ldi	r18, 0x3F	; 63
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	20 c0       	rjmp	.+64     	; 0x105c <play+0x122>
    p++; p++;              // skip "b="
    101c:	ea 81       	ldd	r30, Y+2	; 0x02
    101e:	fb 81       	ldd	r31, Y+3	; 0x03
    1020:	32 96       	adiw	r30, 0x02	; 2
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	11 c0       	rjmp	.+34     	; 0x104a <play+0x110>
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
      num = (num * 10) + (pgm_read_byte1(p) - '0'); p++;
    1028:	c9 01       	movw	r24, r18
    102a:	73 e0       	ldi	r23, 0x03	; 3
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	7a 95       	dec	r23
    1032:	e1 f7       	brne	.-8      	; 0x102c <play+0xf2>
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
    1038:	82 0f       	add	r24, r18
    103a:	93 1f       	adc	r25, r19
    103c:	24 2f       	mov	r18, r20
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	20 53       	subi	r18, 0x30	; 48
    1042:	30 40       	sbci	r19, 0x00	; 0
    1044:	28 0f       	add	r18, r24
    1046:	39 1f       	adc	r19, r25
    1048:	31 96       	adiw	r30, 0x01	; 1
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    104a:	40 81       	ld	r20, Z

  // get BPM
  if(pgm_read_byte1(p) == 'b') {
    p++; p++;              // skip "b="
    num = 0;
    while(isdigit(pgm_read_byte1(p))) {
    104c:	40 33       	cpi	r20, 0x30	; 48
    104e:	10 f0       	brcs	.+4      	; 0x1054 <play+0x11a>
    1050:	4a 33       	cpi	r20, 0x3A	; 58
    1052:	50 f3       	brcs	.-44     	; 0x1028 <play+0xee>
      num = (num * 10) + (pgm_read_byte1(p) - '0'); p++;
    }
	
    bpm = num;
    p++;                   // skip colon
    1054:	cf 01       	movw	r24, r30
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	9b 83       	std	Y+3, r25	; 0x03
    105a:	8a 83       	std	Y+2, r24	; 0x02
  }

  // BPM usually expresses the number of quarter notes per minute
  wholenote = (60 * 1000L / bpm) * 4;  // this is the time for whole note (in milliseconds)
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	60 e6       	ldi	r22, 0x60	; 96
    1062:	7a ee       	ldi	r23, 0xEA	; 234
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 03 10 	call	0x2006	; 0x2006 <__divmodsi4>
    106c:	39 01       	movw	r6, r18
    106e:	4a 01       	movw	r8, r20
    1070:	52 e0       	ldi	r21, 0x02	; 2
    1072:	66 0c       	add	r6, r6
    1074:	77 1c       	adc	r7, r7
    1076:	88 1c       	adc	r8, r8
    1078:	99 1c       	adc	r9, r9
    107a:	5a 95       	dec	r21
    107c:	d1 f7       	brne	.-12     	; 0x1072 <play+0x138>
    }
    
    if( num ) { 
	  duration = wholenote / num;
    } else {
	  duration = wholenote / default_dur;  // we will need to check if we are a dotted note after
    107e:	17 01       	movw	r2, r14
    1080:	44 24       	eor	r4, r4
    1082:	55 24       	eor	r5, r5
    // get scale
    if(isdigit(pgm_read_byte1(p))) {
      scale = pgm_read_byte1(p) - '0';
      p++;
    } else {
      scale = default_oct;
    1084:	09 83       	std	Y+1, r16	; 0x01
    1086:	19 c1       	rjmp	.+562    	; 0x12ba <__stack+0x1bb>
    
	// first, get note duration, if available
    num = 0;
    
	while( isdigit(pgm_read_byte1(p)) ) {
      num = (num * 10) + ((*p++) - '0');
    1088:	c9 01       	movw	r24, r18
    108a:	43 e0       	ldi	r20, 0x03	; 3
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	4a 95       	dec	r20
    1092:	e1 f7       	brne	.-8      	; 0x108c <play+0x152>
    1094:	22 0f       	add	r18, r18
    1096:	33 1f       	adc	r19, r19
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	21 2f       	mov	r18, r17
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	20 53       	subi	r18, 0x30	; 48
    10a2:	30 40       	sbci	r19, 0x00	; 0
    10a4:	28 0f       	add	r18, r24
    10a6:	39 1f       	adc	r19, r25
    10a8:	ea 81       	ldd	r30, Y+2	; 0x02
    10aa:	fb 81       	ldd	r31, Y+3	; 0x03
    10ac:	31 96       	adiw	r30, 0x01	; 1
    10ae:	fb 83       	std	Y+3, r31	; 0x03
    10b0:	ea 83       	std	Y+2, r30	; 0x02
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    10b2:	ea 81       	ldd	r30, Y+2	; 0x02
    10b4:	fb 81       	ldd	r31, Y+3	; 0x03
    10b6:	10 81       	ld	r17, Z
  while( pgm_read_byte1(p) ) {
    
	// first, get note duration, if available
    num = 0;
    
	while( isdigit(pgm_read_byte1(p)) ) {
    10b8:	10 33       	cpi	r17, 0x30	; 48
    10ba:	10 f0       	brcs	.+4      	; 0x10c0 <play+0x186>
    10bc:	1a 33       	cpi	r17, 0x3A	; 58
    10be:	20 f3       	brcs	.-56     	; 0x1088 <play+0x14e>
      num = (num * 10) + ((*p++) - '0');
    }
    
    if( num ) { 
    10c0:	21 15       	cp	r18, r1
    10c2:	31 05       	cpc	r19, r1
    10c4:	29 f0       	breq	.+10     	; 0x10d0 <play+0x196>
	  duration = wholenote / num;
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	c4 01       	movw	r24, r8
    10cc:	b3 01       	movw	r22, r6
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <play+0x19e>
    } else {
	  duration = wholenote / default_dur;  // we will need to check if we are a dotted note after
    10d0:	c4 01       	movw	r24, r8
    10d2:	b3 01       	movw	r22, r6
    10d4:	a2 01       	movw	r20, r4
    10d6:	91 01       	movw	r18, r2
    10d8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__udivmodsi4>
    10dc:	c9 01       	movw	r24, r18
    10de:	da 01       	movw	r26, r20
    10e0:	ac 01       	movw	r20, r24
    10e2:	bd 01       	movw	r22, r26
	}
	
    // get the note
    switch( pgm_read_byte1(p) ) {
    10e4:	14 36       	cpi	r17, 0x64	; 100
    10e6:	81 f0       	breq	.+32     	; 0x1108 <__stack+0x9>
    10e8:	15 36       	cpi	r17, 0x65	; 101
    10ea:	38 f4       	brcc	.+14     	; 0x10fa <play+0x1c0>
    10ec:	12 36       	cpi	r17, 0x62	; 98
    10ee:	61 f0       	breq	.+24     	; 0x1108 <__stack+0x9>
    10f0:	13 36       	cpi	r17, 0x63	; 99
    10f2:	60 f4       	brcc	.+24     	; 0x110c <__stack+0xd>
    10f4:	11 36       	cpi	r17, 0x61	; 97
    10f6:	a1 f4       	brne	.+40     	; 0x1120 <__stack+0x21>
    10f8:	11 c0       	rjmp	.+34     	; 0x111c <__stack+0x1d>
    10fa:	16 36       	cpi	r17, 0x66	; 102
    10fc:	59 f0       	breq	.+22     	; 0x1114 <__stack+0x15>
    10fe:	16 36       	cpi	r17, 0x66	; 102
    1100:	38 f0       	brcs	.+14     	; 0x1110 <__stack+0x11>
    1102:	17 36       	cpi	r17, 0x67	; 103
    1104:	69 f4       	brne	.+26     	; 0x1120 <__stack+0x21>
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <__stack+0x19>
    1108:	23 e0       	ldi	r18, 0x03	; 3
    110a:	0b c0       	rjmp	.+22     	; 0x1122 <__stack+0x23>
    110c:	21 e0       	ldi	r18, 0x01	; 1
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <__stack+0x23>
    1110:	2a e0       	ldi	r18, 0x0A	; 10
    1112:	07 c0       	rjmp	.+14     	; 0x1122 <__stack+0x23>
      case 'd':
        note = 3;
        break;
      case 'e':
        note = 10;
        break;
    1114:	29 e0       	ldi	r18, 0x09	; 9
    1116:	05 c0       	rjmp	.+10     	; 0x1122 <__stack+0x23>
      case 'f':
        note = 9;
        break;
    1118:	27 e0       	ldi	r18, 0x07	; 7
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <__stack+0x23>
      case 'g':
        note = 7;
        break;
    111c:	25 e0       	ldi	r18, 0x05	; 5
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <__stack+0x23>
      case 'a':
        note = 5;
        break;
    1120:	20 e0       	ldi	r18, 0x00	; 0
      default:
        note = 0;
    }


    p++;
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	9b 83       	std	Y+3, r25	; 0x03
    112a:	8a 83       	std	Y+2, r24	; 0x02

    // get optional '#' sharp
    if(pgm_read_byte1(p) == '#') {
    112c:	fc 01       	movw	r30, r24
    112e:	80 81       	ld	r24, Z
    1130:	83 32       	cpi	r24, 0x23	; 35
    1132:	21 f4       	brne	.+8      	; 0x113c <__stack+0x3d>
      note++;
    1134:	2f 5f       	subi	r18, 0xFF	; 255
      p++;
    1136:	31 96       	adiw	r30, 0x01	; 1
    1138:	fb 83       	std	Y+3, r31	; 0x03
    113a:	ea 83       	std	Y+2, r30	; 0x02
    }

    // get optional '.' dotted note
    if(pgm_read_byte1(p) == '.') {
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	80 81       	ld	r24, Z
    1142:	8e 32       	cpi	r24, 0x2E	; 46
    1144:	69 f4       	brne	.+26     	; 0x1160 <__stack+0x61>
      duration += duration/2;
    1146:	db 01       	movw	r26, r22
    1148:	ca 01       	movw	r24, r20
    114a:	b6 95       	lsr	r27
    114c:	a7 95       	ror	r26
    114e:	97 95       	ror	r25
    1150:	87 95       	ror	r24
    1152:	48 0f       	add	r20, r24
    1154:	59 1f       	adc	r21, r25
    1156:	6a 1f       	adc	r22, r26
    1158:	7b 1f       	adc	r23, r27
      p++;
    115a:	31 96       	adiw	r30, 0x01	; 1
    115c:	fb 83       	std	Y+3, r31	; 0x03
    115e:	ea 83       	std	Y+2, r30	; 0x02
#define TONE_PIN 13
#define isdigit(n) (n >= '0' && n <= '9')

unsigned char pgm_read_byte1( const unsigned char *p) 
{
	return *p;
    1160:	ea 81       	ldd	r30, Y+2	; 0x02
    1162:	fb 81       	ldd	r31, Y+3	; 0x03
    1164:	80 81       	ld	r24, Z
      duration += duration/2;
      p++;
    }
  
    // get scale
    if(isdigit(pgm_read_byte1(p))) {
    1166:	80 33       	cpi	r24, 0x30	; 48
    1168:	40 f0       	brcs	.+16     	; 0x117a <__stack+0x7b>
    116a:	8a 33       	cpi	r24, 0x3A	; 58
    116c:	30 f4       	brcc	.+12     	; 0x117a <__stack+0x7b>
      scale = pgm_read_byte1(p) - '0';
    116e:	98 2f       	mov	r25, r24
    1170:	90 53       	subi	r25, 0x30	; 48
      p++;
    1172:	31 96       	adiw	r30, 0x01	; 1
    1174:	fb 83       	std	Y+3, r31	; 0x03
    1176:	ea 83       	std	Y+2, r30	; 0x02
    1178:	01 c0       	rjmp	.+2      	; 0x117c <__stack+0x7d>
    } else {
      scale = default_oct;
    117a:	99 81       	ldd	r25, Y+1	; 0x01
	 //note = 11;
	 //scale  = 3+4;

    scale += OCTAVE_OFFSET;

    if(pgm_read_byte1(p) == ',')
    117c:	ea 81       	ldd	r30, Y+2	; 0x02
    117e:	fb 81       	ldd	r31, Y+3	; 0x03
    1180:	80 81       	ld	r24, Z
    1182:	8c 32       	cpi	r24, 0x2C	; 44
    1184:	19 f4       	brne	.+6      	; 0x118c <__stack+0x8d>
      p++;       // skip comma for next note (or we may be at the end)
    1186:	31 96       	adiw	r30, 0x01	; 1
    1188:	fb 83       	std	Y+3, r31	; 0x03
    118a:	ea 83       	std	Y+2, r30	; 0x02

	duration /= 2;
    118c:	7a 01       	movw	r14, r20
    118e:	8b 01       	movw	r16, r22
    1190:	16 95       	lsr	r17
    1192:	07 95       	ror	r16
    1194:	f7 94       	ror	r15
    1196:	e7 94       	ror	r14
    1198:	f5 eb       	ldi	r31, 0xB5	; 181
    119a:	ef 16       	cp	r14, r31
    119c:	f1 04       	cpc	r15, r1
    119e:	01 05       	cpc	r16, r1
    11a0:	11 05       	cpc	r17, r1
    11a2:	28 f0       	brcs	.+10     	; 0x11ae <__stack+0xaf>
    11a4:	54 eb       	ldi	r21, 0xB4	; 180
    11a6:	e5 2e       	mov	r14, r21
    11a8:	f1 2c       	mov	r15, r1
    11aa:	01 2d       	mov	r16, r1
    11ac:	11 2d       	mov	r17, r1
	if( duration > 180 ) duration = 180;


    if( note ) {
    11ae:	22 23       	and	r18, r18
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <__stack+0xb5>
    11b2:	40 c0       	rjmp	.+128    	; 0x1234 <__stack+0x135>

	  // play the note

	  	current_midi_note = (((scale - 4) * 12) + note);
    11b4:	20 53       	subi	r18, 0x30	; 48
    11b6:	3c e0       	ldi	r19, 0x0C	; 12
    11b8:	93 9f       	mul	r25, r19
    11ba:	c0 01       	movw	r24, r0
    11bc:	11 24       	eor	r1, r1
    11be:	28 0f       	add	r18, r24
    11c0:	20 93 4e 05 	sts	0x054E, r18

//		frequency = note_table[current_midi_note];

		note_on();
    11c4:	0e 94 6e 05 	call	0xadc	; 0xadc <note_on>

	 	_delay_ms( duration );
    11c8:	c8 01       	movw	r24, r16
    11ca:	b7 01       	movw	r22, r14
    11cc:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
    11d0:	5b 01       	movw	r10, r22
    11d2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	4a e7       	ldi	r20, 0x7A	; 122
    11da:	55 e4       	ldi	r21, 0x45	; 69
    11dc:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
    11e0:	7b 01       	movw	r14, r22
    11e2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__ltsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	d4 f1       	brlt	.+116    	; 0x1268 <__stack+0x169>
		__ticks = 1;
	else if (__tmp > 65535)
    11f4:	c8 01       	movw	r24, r16
    11f6:	b7 01       	movw	r22, r14
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	3f ef       	ldi	r19, 0xFF	; 255
    11fc:	4f e7       	ldi	r20, 0x7F	; 127
    11fe:	57 e4       	ldi	r21, 0x47	; 71
    1200:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__gtsf2>
    1204:	18 16       	cp	r1, r24
    1206:	0c f0       	brlt	.+2      	; 0x120a <__stack+0x10b>
    1208:	51 c0       	rjmp	.+162    	; 0x12ac <__stack+0x1ad>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120a:	c6 01       	movw	r24, r12
    120c:	b5 01       	movw	r22, r10
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e2       	ldi	r20, 0x20	; 32
    1214:	51 e4       	ldi	r21, 0x41	; 65
    1216:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
    121a:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fixunssfsi>
    121e:	06 c0       	rjmp	.+12     	; 0x122c <__stack+0x12d>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1220:	80 e9       	ldi	r24, 0x90	; 144
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <__stack+0x125>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1228:	61 50       	subi	r22, 0x01	; 1
    122a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122c:	61 15       	cp	r22, r1
    122e:	71 05       	cpc	r23, r1
    1230:	b9 f7       	brne	.-18     	; 0x1220 <__stack+0x121>
    1232:	43 c0       	rjmp	.+134    	; 0x12ba <__stack+0x1bb>
	update_frequency(frequency);
	note_on_gate = 1;
}

void note_off() {
	num_bytes = 0;
    1234:	10 92 4c 05 	sts	0x054C, r1
	note_on_gate = 0;
    1238:	10 92 5e 05 	sts	0x055E, r1
//	 	note_off();
  
	} else {
	
	 	note_off();
	  _delay_ms( duration );
    123c:	c8 01       	movw	r24, r16
    123e:	b7 01       	movw	r22, r14
    1240:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
    1244:	5b 01       	movw	r10, r22
    1246:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4a e7       	ldi	r20, 0x7A	; 122
    124e:	55 e4       	ldi	r21, 0x45	; 69
    1250:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
    1254:	7b 01       	movw	r14, r22
    1256:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__ltsf2>
    1264:	88 23       	and	r24, r24
    1266:	1c f4       	brge	.+6      	; 0x126e <__stack+0x16f>
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	23 c0       	rjmp	.+70     	; 0x12b4 <__stack+0x1b5>
		__ticks = 1;
	else if (__tmp > 65535)
    126e:	c8 01       	movw	r24, r16
    1270:	b7 01       	movw	r22, r14
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	3f ef       	ldi	r19, 0xFF	; 255
    1276:	4f e7       	ldi	r20, 0x7F	; 127
    1278:	57 e4       	ldi	r21, 0x47	; 71
    127a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__gtsf2>
    127e:	18 16       	cp	r1, r24
    1280:	ac f4       	brge	.+42     	; 0x12ac <__stack+0x1ad>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1282:	c6 01       	movw	r24, r12
    1284:	b5 01       	movw	r22, r10
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e2       	ldi	r20, 0x20	; 32
    128c:	51 e4       	ldi	r21, 0x41	; 65
    128e:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
    1292:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fixunssfsi>
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <__stack+0x1a5>
    1298:	80 e9       	ldi	r24, 0x90	; 144
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <__stack+0x19d>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a0:	61 50       	subi	r22, 0x01	; 1
    12a2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	61 15       	cp	r22, r1
    12a6:	71 05       	cpc	r23, r1
    12a8:	b9 f7       	brne	.-18     	; 0x1298 <__stack+0x199>
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <__stack+0x1bb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ac:	c8 01       	movw	r24, r16
    12ae:	b7 01       	movw	r22, r14
    12b0:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fixunssfsi>
    12b4:	cb 01       	movw	r24, r22
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <__stack+0x1b7>

  // BPM usually expresses the number of quarter notes per minute
  wholenote = (60 * 1000L / bpm) * 4;  // this is the time for whole note (in milliseconds)

  // begin note loop
  while( pgm_read_byte1(p) ) {
    12ba:	ea 81       	ldd	r30, Y+2	; 0x02
    12bc:	fb 81       	ldd	r31, Y+3	; 0x03
    12be:	80 81       	ld	r24, Z
    12c0:	88 23       	and	r24, r24
    12c2:	19 f0       	breq	.+6      	; 0x12ca <__stack+0x1cb>
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	f4 ce       	rjmp	.-536    	; 0x10b2 <play+0x178>
	  _delay_ms( duration );
	  
    }
  }
	
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	bf 90       	pop	r11
    12e2:	af 90       	pop	r10
    12e4:	9f 90       	pop	r9
    12e6:	8f 90       	pop	r8
    12e8:	7f 90       	pop	r7
    12ea:	6f 90       	pop	r6
    12ec:	5f 90       	pop	r5
    12ee:	4f 90       	pop	r4
    12f0:	3f 90       	pop	r3
    12f2:	2f 90       	pop	r2
    12f4:	08 95       	ret

000012f6 <__vector_26>:
uint16_t accumulator = 0;  // large number holds phase
uint8_t indexi = 0;        // index for wave lookup (the upper 8 bits of the accumulator)

// timer 1 is audio interrupt timer
ISR(TIMER3_COMPA_vect) 
{
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	0b b6       	in	r0, 0x3b	; 59
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	8f 93       	push	r24
    130a:	9f 93       	push	r25
    130c:	ef 93       	push	r30
    130e:	ff 93       	push	r31
  // calculate frequency mod
  accumulator = accumulator + frequency;  // add in pith, the higher the number, the faster it rolls over, the more cycles per second
    1310:	80 91 4f 05 	lds	r24, 0x054F
    1314:	90 91 50 05 	lds	r25, 0x0550
    1318:	20 91 48 05 	lds	r18, 0x0548
    131c:	30 91 49 05 	lds	r19, 0x0549
    1320:	82 0f       	add	r24, r18
    1322:	93 1f       	adc	r25, r19
    1324:	90 93 49 05 	sts	0x0549, r25
    1328:	80 93 48 05 	sts	0x0548, r24
  indexi = accumulator >> 8;   // use top 8 bits as wavetable index
    132c:	90 93 4a 05 	sts	0x054A, r25

  PORTC = sine[indexi];    // get sample from wave table
    1330:	e6 e0       	ldi	r30, 0x06	; 6
    1332:	f3 e0       	ldi	r31, 0x03	; 3
    1334:	e9 0f       	add	r30, r25
    1336:	f1 1d       	adc	r31, r1
    1338:	80 81       	ld	r24, Z
    133a:	85 bb       	out	0x15, r24	; 21
}
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0b be       	out	0x3b, r0	; 59
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <__fixunssfsi>:
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	7b 01       	movw	r14, r22
    1360:	8c 01       	movw	r16, r24
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	5f e4       	ldi	r21, 0x4F	; 79
    136a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__gesf2>
    136e:	88 23       	and	r24, r24
    1370:	8c f0       	brlt	.+34     	; 0x1394 <__fixunssfsi+0x3e>
    1372:	c8 01       	movw	r24, r16
    1374:	b7 01       	movw	r22, r14
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	5f e4       	ldi	r21, 0x4F	; 79
    137e:	0e 94 23 0b 	call	0x1646	; 0x1646 <__subsf3>
    1382:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fixsfsi>
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	20 50       	subi	r18, 0x00	; 0
    138c:	30 40       	sbci	r19, 0x00	; 0
    138e:	40 40       	sbci	r20, 0x00	; 0
    1390:	50 48       	sbci	r21, 0x80	; 128
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <__fixunssfsi+0x4a>
    1394:	c8 01       	movw	r24, r16
    1396:	b7 01       	movw	r22, r14
    1398:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fixsfsi>
    139c:	9b 01       	movw	r18, r22
    139e:	ac 01       	movw	r20, r24
    13a0:	b9 01       	movw	r22, r18
    13a2:	ca 01       	movw	r24, r20
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	08 95       	ret

000013ae <_fpadd_parts>:
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ed ed       	ldi	r30, 0xDD	; 221
    13b4:	f9 e0       	ldi	r31, 0x09	; 9
    13b6:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__prologue_saves__>
    13ba:	dc 01       	movw	r26, r24
    13bc:	2b 01       	movw	r4, r22
    13be:	fa 01       	movw	r30, r20
    13c0:	9c 91       	ld	r25, X
    13c2:	92 30       	cpi	r25, 0x02	; 2
    13c4:	08 f4       	brcc	.+2      	; 0x13c8 <_fpadd_parts+0x1a>
    13c6:	39 c1       	rjmp	.+626    	; 0x163a <_fpadd_parts+0x28c>
    13c8:	eb 01       	movw	r28, r22
    13ca:	88 81       	ld	r24, Y
    13cc:	82 30       	cpi	r24, 0x02	; 2
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <_fpadd_parts+0x24>
    13d0:	33 c1       	rjmp	.+614    	; 0x1638 <_fpadd_parts+0x28a>
    13d2:	94 30       	cpi	r25, 0x04	; 4
    13d4:	69 f4       	brne	.+26     	; 0x13f0 <_fpadd_parts+0x42>
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	09 f0       	breq	.+2      	; 0x13dc <_fpadd_parts+0x2e>
    13da:	2f c1       	rjmp	.+606    	; 0x163a <_fpadd_parts+0x28c>
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	9c 91       	ld	r25, X
    13e0:	11 97       	sbiw	r26, 0x01	; 1
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	98 17       	cp	r25, r24
    13e6:	09 f4       	brne	.+2      	; 0x13ea <_fpadd_parts+0x3c>
    13e8:	28 c1       	rjmp	.+592    	; 0x163a <_fpadd_parts+0x28c>
    13ea:	a6 e0       	ldi	r26, 0x06	; 6
    13ec:	b4 e0       	ldi	r27, 0x04	; 4
    13ee:	25 c1       	rjmp	.+586    	; 0x163a <_fpadd_parts+0x28c>
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <_fpadd_parts+0x48>
    13f4:	21 c1       	rjmp	.+578    	; 0x1638 <_fpadd_parts+0x28a>
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	a9 f4       	brne	.+42     	; 0x1424 <_fpadd_parts+0x76>
    13fa:	92 30       	cpi	r25, 0x02	; 2
    13fc:	09 f0       	breq	.+2      	; 0x1400 <_fpadd_parts+0x52>
    13fe:	1d c1       	rjmp	.+570    	; 0x163a <_fpadd_parts+0x28c>
    1400:	9a 01       	movw	r18, r20
    1402:	ad 01       	movw	r20, r26
    1404:	88 e0       	ldi	r24, 0x08	; 8
    1406:	ea 01       	movw	r28, r20
    1408:	09 90       	ld	r0, Y+
    140a:	ae 01       	movw	r20, r28
    140c:	e9 01       	movw	r28, r18
    140e:	09 92       	st	Y+, r0
    1410:	9e 01       	movw	r18, r28
    1412:	81 50       	subi	r24, 0x01	; 1
    1414:	c1 f7       	brne	.-16     	; 0x1406 <_fpadd_parts+0x58>
    1416:	e2 01       	movw	r28, r4
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	11 96       	adiw	r26, 0x01	; 1
    141c:	9c 91       	ld	r25, X
    141e:	89 23       	and	r24, r25
    1420:	81 83       	std	Z+1, r24	; 0x01
    1422:	08 c1       	rjmp	.+528    	; 0x1634 <_fpadd_parts+0x286>
    1424:	92 30       	cpi	r25, 0x02	; 2
    1426:	09 f4       	brne	.+2      	; 0x142a <_fpadd_parts+0x7c>
    1428:	07 c1       	rjmp	.+526    	; 0x1638 <_fpadd_parts+0x28a>
    142a:	12 96       	adiw	r26, 0x02	; 2
    142c:	2d 90       	ld	r2, X+
    142e:	3c 90       	ld	r3, X
    1430:	13 97       	sbiw	r26, 0x03	; 3
    1432:	eb 01       	movw	r28, r22
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	14 96       	adiw	r26, 0x04	; 4
    143a:	ad 90       	ld	r10, X+
    143c:	bd 90       	ld	r11, X+
    143e:	cd 90       	ld	r12, X+
    1440:	dc 90       	ld	r13, X
    1442:	17 97       	sbiw	r26, 0x07	; 7
    1444:	ec 80       	ldd	r14, Y+4	; 0x04
    1446:	fd 80       	ldd	r15, Y+5	; 0x05
    1448:	0e 81       	ldd	r16, Y+6	; 0x06
    144a:	1f 81       	ldd	r17, Y+7	; 0x07
    144c:	91 01       	movw	r18, r2
    144e:	28 1b       	sub	r18, r24
    1450:	39 0b       	sbc	r19, r25
    1452:	b9 01       	movw	r22, r18
    1454:	37 ff       	sbrs	r19, 7
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <_fpadd_parts+0xb2>
    1458:	66 27       	eor	r22, r22
    145a:	77 27       	eor	r23, r23
    145c:	62 1b       	sub	r22, r18
    145e:	73 0b       	sbc	r23, r19
    1460:	60 32       	cpi	r22, 0x20	; 32
    1462:	71 05       	cpc	r23, r1
    1464:	0c f0       	brlt	.+2      	; 0x1468 <_fpadd_parts+0xba>
    1466:	61 c0       	rjmp	.+194    	; 0x152a <_fpadd_parts+0x17c>
    1468:	12 16       	cp	r1, r18
    146a:	13 06       	cpc	r1, r19
    146c:	6c f5       	brge	.+90     	; 0x14c8 <_fpadd_parts+0x11a>
    146e:	37 01       	movw	r6, r14
    1470:	48 01       	movw	r8, r16
    1472:	06 2e       	mov	r0, r22
    1474:	04 c0       	rjmp	.+8      	; 0x147e <_fpadd_parts+0xd0>
    1476:	96 94       	lsr	r9
    1478:	87 94       	ror	r8
    147a:	77 94       	ror	r7
    147c:	67 94       	ror	r6
    147e:	0a 94       	dec	r0
    1480:	d2 f7       	brpl	.-12     	; 0x1476 <_fpadd_parts+0xc8>
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <_fpadd_parts+0xe6>
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	44 1f       	adc	r20, r20
    1492:	55 1f       	adc	r21, r21
    1494:	6a 95       	dec	r22
    1496:	d2 f7       	brpl	.-12     	; 0x148c <_fpadd_parts+0xde>
    1498:	21 50       	subi	r18, 0x01	; 1
    149a:	30 40       	sbci	r19, 0x00	; 0
    149c:	40 40       	sbci	r20, 0x00	; 0
    149e:	50 40       	sbci	r21, 0x00	; 0
    14a0:	2e 21       	and	r18, r14
    14a2:	3f 21       	and	r19, r15
    14a4:	40 23       	and	r20, r16
    14a6:	51 23       	and	r21, r17
    14a8:	21 15       	cp	r18, r1
    14aa:	31 05       	cpc	r19, r1
    14ac:	41 05       	cpc	r20, r1
    14ae:	51 05       	cpc	r21, r1
    14b0:	21 f0       	breq	.+8      	; 0x14ba <_fpadd_parts+0x10c>
    14b2:	21 e0       	ldi	r18, 0x01	; 1
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	79 01       	movw	r14, r18
    14bc:	8a 01       	movw	r16, r20
    14be:	e6 28       	or	r14, r6
    14c0:	f7 28       	or	r15, r7
    14c2:	08 29       	or	r16, r8
    14c4:	19 29       	or	r17, r9
    14c6:	3c c0       	rjmp	.+120    	; 0x1540 <_fpadd_parts+0x192>
    14c8:	23 2b       	or	r18, r19
    14ca:	d1 f1       	breq	.+116    	; 0x1540 <_fpadd_parts+0x192>
    14cc:	26 0e       	add	r2, r22
    14ce:	37 1e       	adc	r3, r23
    14d0:	35 01       	movw	r6, r10
    14d2:	46 01       	movw	r8, r12
    14d4:	06 2e       	mov	r0, r22
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <_fpadd_parts+0x132>
    14d8:	96 94       	lsr	r9
    14da:	87 94       	ror	r8
    14dc:	77 94       	ror	r7
    14de:	67 94       	ror	r6
    14e0:	0a 94       	dec	r0
    14e2:	d2 f7       	brpl	.-12     	; 0x14d8 <_fpadd_parts+0x12a>
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <_fpadd_parts+0x148>
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	44 1f       	adc	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	6a 95       	dec	r22
    14f8:	d2 f7       	brpl	.-12     	; 0x14ee <_fpadd_parts+0x140>
    14fa:	21 50       	subi	r18, 0x01	; 1
    14fc:	30 40       	sbci	r19, 0x00	; 0
    14fe:	40 40       	sbci	r20, 0x00	; 0
    1500:	50 40       	sbci	r21, 0x00	; 0
    1502:	2a 21       	and	r18, r10
    1504:	3b 21       	and	r19, r11
    1506:	4c 21       	and	r20, r12
    1508:	5d 21       	and	r21, r13
    150a:	21 15       	cp	r18, r1
    150c:	31 05       	cpc	r19, r1
    150e:	41 05       	cpc	r20, r1
    1510:	51 05       	cpc	r21, r1
    1512:	21 f0       	breq	.+8      	; 0x151c <_fpadd_parts+0x16e>
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	59 01       	movw	r10, r18
    151e:	6a 01       	movw	r12, r20
    1520:	a6 28       	or	r10, r6
    1522:	b7 28       	or	r11, r7
    1524:	c8 28       	or	r12, r8
    1526:	d9 28       	or	r13, r9
    1528:	0b c0       	rjmp	.+22     	; 0x1540 <_fpadd_parts+0x192>
    152a:	82 15       	cp	r24, r2
    152c:	93 05       	cpc	r25, r3
    152e:	2c f0       	brlt	.+10     	; 0x153a <_fpadd_parts+0x18c>
    1530:	1c 01       	movw	r2, r24
    1532:	aa 24       	eor	r10, r10
    1534:	bb 24       	eor	r11, r11
    1536:	65 01       	movw	r12, r10
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <_fpadd_parts+0x192>
    153a:	ee 24       	eor	r14, r14
    153c:	ff 24       	eor	r15, r15
    153e:	87 01       	movw	r16, r14
    1540:	11 96       	adiw	r26, 0x01	; 1
    1542:	9c 91       	ld	r25, X
    1544:	d2 01       	movw	r26, r4
    1546:	11 96       	adiw	r26, 0x01	; 1
    1548:	8c 91       	ld	r24, X
    154a:	98 17       	cp	r25, r24
    154c:	09 f4       	brne	.+2      	; 0x1550 <_fpadd_parts+0x1a2>
    154e:	45 c0       	rjmp	.+138    	; 0x15da <_fpadd_parts+0x22c>
    1550:	99 23       	and	r25, r25
    1552:	39 f0       	breq	.+14     	; 0x1562 <_fpadd_parts+0x1b4>
    1554:	a8 01       	movw	r20, r16
    1556:	97 01       	movw	r18, r14
    1558:	2a 19       	sub	r18, r10
    155a:	3b 09       	sbc	r19, r11
    155c:	4c 09       	sbc	r20, r12
    155e:	5d 09       	sbc	r21, r13
    1560:	06 c0       	rjmp	.+12     	; 0x156e <_fpadd_parts+0x1c0>
    1562:	a6 01       	movw	r20, r12
    1564:	95 01       	movw	r18, r10
    1566:	2e 19       	sub	r18, r14
    1568:	3f 09       	sbc	r19, r15
    156a:	40 0b       	sbc	r20, r16
    156c:	51 0b       	sbc	r21, r17
    156e:	57 fd       	sbrc	r21, 7
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <_fpadd_parts+0x1d4>
    1572:	11 82       	std	Z+1, r1	; 0x01
    1574:	33 82       	std	Z+3, r3	; 0x03
    1576:	22 82       	std	Z+2, r2	; 0x02
    1578:	24 83       	std	Z+4, r18	; 0x04
    157a:	35 83       	std	Z+5, r19	; 0x05
    157c:	46 83       	std	Z+6, r20	; 0x06
    157e:	57 83       	std	Z+7, r21	; 0x07
    1580:	1d c0       	rjmp	.+58     	; 0x15bc <_fpadd_parts+0x20e>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	81 83       	std	Z+1, r24	; 0x01
    1586:	33 82       	std	Z+3, r3	; 0x03
    1588:	22 82       	std	Z+2, r2	; 0x02
    158a:	88 27       	eor	r24, r24
    158c:	99 27       	eor	r25, r25
    158e:	dc 01       	movw	r26, r24
    1590:	82 1b       	sub	r24, r18
    1592:	93 0b       	sbc	r25, r19
    1594:	a4 0b       	sbc	r26, r20
    1596:	b5 0b       	sbc	r27, r21
    1598:	84 83       	std	Z+4, r24	; 0x04
    159a:	95 83       	std	Z+5, r25	; 0x05
    159c:	a6 83       	std	Z+6, r26	; 0x06
    159e:	b7 83       	std	Z+7, r27	; 0x07
    15a0:	0d c0       	rjmp	.+26     	; 0x15bc <_fpadd_parts+0x20e>
    15a2:	22 0f       	add	r18, r18
    15a4:	33 1f       	adc	r19, r19
    15a6:	44 1f       	adc	r20, r20
    15a8:	55 1f       	adc	r21, r21
    15aa:	24 83       	std	Z+4, r18	; 0x04
    15ac:	35 83       	std	Z+5, r19	; 0x05
    15ae:	46 83       	std	Z+6, r20	; 0x06
    15b0:	57 83       	std	Z+7, r21	; 0x07
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	93 83       	std	Z+3, r25	; 0x03
    15ba:	82 83       	std	Z+2, r24	; 0x02
    15bc:	24 81       	ldd	r18, Z+4	; 0x04
    15be:	35 81       	ldd	r19, Z+5	; 0x05
    15c0:	46 81       	ldd	r20, Z+6	; 0x06
    15c2:	57 81       	ldd	r21, Z+7	; 0x07
    15c4:	da 01       	movw	r26, r20
    15c6:	c9 01       	movw	r24, r18
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	a1 09       	sbc	r26, r1
    15cc:	b1 09       	sbc	r27, r1
    15ce:	8f 5f       	subi	r24, 0xFF	; 255
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	af 4f       	sbci	r26, 0xFF	; 255
    15d4:	bf 43       	sbci	r27, 0x3F	; 63
    15d6:	28 f3       	brcs	.-54     	; 0x15a2 <_fpadd_parts+0x1f4>
    15d8:	0b c0       	rjmp	.+22     	; 0x15f0 <_fpadd_parts+0x242>
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	33 82       	std	Z+3, r3	; 0x03
    15de:	22 82       	std	Z+2, r2	; 0x02
    15e0:	ea 0c       	add	r14, r10
    15e2:	fb 1c       	adc	r15, r11
    15e4:	0c 1d       	adc	r16, r12
    15e6:	1d 1d       	adc	r17, r13
    15e8:	e4 82       	std	Z+4, r14	; 0x04
    15ea:	f5 82       	std	Z+5, r15	; 0x05
    15ec:	06 83       	std	Z+6, r16	; 0x06
    15ee:	17 83       	std	Z+7, r17	; 0x07
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	80 83       	st	Z, r24
    15f4:	24 81       	ldd	r18, Z+4	; 0x04
    15f6:	35 81       	ldd	r19, Z+5	; 0x05
    15f8:	46 81       	ldd	r20, Z+6	; 0x06
    15fa:	57 81       	ldd	r21, Z+7	; 0x07
    15fc:	57 ff       	sbrs	r21, 7
    15fe:	1a c0       	rjmp	.+52     	; 0x1634 <_fpadd_parts+0x286>
    1600:	c9 01       	movw	r24, r18
    1602:	aa 27       	eor	r26, r26
    1604:	97 fd       	sbrc	r25, 7
    1606:	a0 95       	com	r26
    1608:	ba 2f       	mov	r27, r26
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	90 70       	andi	r25, 0x00	; 0
    160e:	a0 70       	andi	r26, 0x00	; 0
    1610:	b0 70       	andi	r27, 0x00	; 0
    1612:	56 95       	lsr	r21
    1614:	47 95       	ror	r20
    1616:	37 95       	ror	r19
    1618:	27 95       	ror	r18
    161a:	82 2b       	or	r24, r18
    161c:	93 2b       	or	r25, r19
    161e:	a4 2b       	or	r26, r20
    1620:	b5 2b       	or	r27, r21
    1622:	84 83       	std	Z+4, r24	; 0x04
    1624:	95 83       	std	Z+5, r25	; 0x05
    1626:	a6 83       	std	Z+6, r26	; 0x06
    1628:	b7 83       	std	Z+7, r27	; 0x07
    162a:	82 81       	ldd	r24, Z+2	; 0x02
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	93 83       	std	Z+3, r25	; 0x03
    1632:	82 83       	std	Z+2, r24	; 0x02
    1634:	df 01       	movw	r26, r30
    1636:	01 c0       	rjmp	.+2      	; 0x163a <_fpadd_parts+0x28c>
    1638:	d2 01       	movw	r26, r4
    163a:	cd 01       	movw	r24, r26
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	e2 e1       	ldi	r30, 0x12	; 18
    1642:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__epilogue_restores__>

00001646 <__subsf3>:
    1646:	a0 e2       	ldi	r26, 0x20	; 32
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e9 e2       	ldi	r30, 0x29	; 41
    164c:	fb e0       	ldi	r31, 0x0B	; 11
    164e:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
    1652:	69 83       	std	Y+1, r22	; 0x01
    1654:	7a 83       	std	Y+2, r23	; 0x02
    1656:	8b 83       	std	Y+3, r24	; 0x03
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	2d 83       	std	Y+5, r18	; 0x05
    165c:	3e 83       	std	Y+6, r19	; 0x06
    165e:	4f 83       	std	Y+7, r20	; 0x07
    1660:	58 87       	std	Y+8, r21	; 0x08
    1662:	e9 e0       	ldi	r30, 0x09	; 9
    1664:	ee 2e       	mov	r14, r30
    1666:	f1 2c       	mov	r15, r1
    1668:	ec 0e       	add	r14, r28
    166a:	fd 1e       	adc	r15, r29
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	b7 01       	movw	r22, r14
    1672:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    1676:	8e 01       	movw	r16, r28
    1678:	0f 5e       	subi	r16, 0xEF	; 239
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	ce 01       	movw	r24, r28
    167e:	05 96       	adiw	r24, 0x05	; 5
    1680:	b8 01       	movw	r22, r16
    1682:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    1686:	8a 89       	ldd	r24, Y+18	; 0x12
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	89 27       	eor	r24, r25
    168c:	8a 8b       	std	Y+18, r24	; 0x12
    168e:	c7 01       	movw	r24, r14
    1690:	b8 01       	movw	r22, r16
    1692:	ae 01       	movw	r20, r28
    1694:	47 5e       	subi	r20, 0xE7	; 231
    1696:	5f 4f       	sbci	r21, 0xFF	; 255
    1698:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_fpadd_parts>
    169c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__pack_f>
    16a0:	a0 96       	adiw	r28, 0x20	; 32
    16a2:	e6 e0       	ldi	r30, 0x06	; 6
    16a4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

000016a8 <__addsf3>:
    16a8:	a0 e2       	ldi	r26, 0x20	; 32
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ea e5       	ldi	r30, 0x5A	; 90
    16ae:	fb e0       	ldi	r31, 0x0B	; 11
    16b0:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
    16b4:	69 83       	std	Y+1, r22	; 0x01
    16b6:	7a 83       	std	Y+2, r23	; 0x02
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	2d 83       	std	Y+5, r18	; 0x05
    16be:	3e 83       	std	Y+6, r19	; 0x06
    16c0:	4f 83       	std	Y+7, r20	; 0x07
    16c2:	58 87       	std	Y+8, r21	; 0x08
    16c4:	f9 e0       	ldi	r31, 0x09	; 9
    16c6:	ef 2e       	mov	r14, r31
    16c8:	f1 2c       	mov	r15, r1
    16ca:	ec 0e       	add	r14, r28
    16cc:	fd 1e       	adc	r15, r29
    16ce:	ce 01       	movw	r24, r28
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	b7 01       	movw	r22, r14
    16d4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    16d8:	8e 01       	movw	r16, r28
    16da:	0f 5e       	subi	r16, 0xEF	; 239
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	ce 01       	movw	r24, r28
    16e0:	05 96       	adiw	r24, 0x05	; 5
    16e2:	b8 01       	movw	r22, r16
    16e4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    16e8:	c7 01       	movw	r24, r14
    16ea:	b8 01       	movw	r22, r16
    16ec:	ae 01       	movw	r20, r28
    16ee:	47 5e       	subi	r20, 0xE7	; 231
    16f0:	5f 4f       	sbci	r21, 0xFF	; 255
    16f2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_fpadd_parts>
    16f6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__pack_f>
    16fa:	a0 96       	adiw	r28, 0x20	; 32
    16fc:	e6 e0       	ldi	r30, 0x06	; 6
    16fe:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

00001702 <__mulsf3>:
    1702:	a0 e2       	ldi	r26, 0x20	; 32
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e8       	ldi	r30, 0x87	; 135
    1708:	fb e0       	ldi	r31, 0x0B	; 11
    170a:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__prologue_saves__>
    170e:	69 83       	std	Y+1, r22	; 0x01
    1710:	7a 83       	std	Y+2, r23	; 0x02
    1712:	8b 83       	std	Y+3, r24	; 0x03
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	2d 83       	std	Y+5, r18	; 0x05
    1718:	3e 83       	std	Y+6, r19	; 0x06
    171a:	4f 83       	std	Y+7, r20	; 0x07
    171c:	58 87       	std	Y+8, r21	; 0x08
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	be 01       	movw	r22, r28
    1724:	67 5f       	subi	r22, 0xF7	; 247
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    172c:	ce 01       	movw	r24, r28
    172e:	05 96       	adiw	r24, 0x05	; 5
    1730:	be 01       	movw	r22, r28
    1732:	6f 5e       	subi	r22, 0xEF	; 239
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    173a:	99 85       	ldd	r25, Y+9	; 0x09
    173c:	92 30       	cpi	r25, 0x02	; 2
    173e:	88 f0       	brcs	.+34     	; 0x1762 <__mulsf3+0x60>
    1740:	89 89       	ldd	r24, Y+17	; 0x11
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	c8 f0       	brcs	.+50     	; 0x1778 <__mulsf3+0x76>
    1746:	94 30       	cpi	r25, 0x04	; 4
    1748:	19 f4       	brne	.+6      	; 0x1750 <__mulsf3+0x4e>
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	51 f4       	brne	.+20     	; 0x1762 <__mulsf3+0x60>
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <__mulsf3+0x56>
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	29 f4       	brne	.+10     	; 0x175e <__mulsf3+0x5c>
    1754:	92 30       	cpi	r25, 0x02	; 2
    1756:	81 f4       	brne	.+32     	; 0x1778 <__mulsf3+0x76>
    1758:	86 e0       	ldi	r24, 0x06	; 6
    175a:	94 e0       	ldi	r25, 0x04	; 4
    175c:	c6 c0       	rjmp	.+396    	; 0x18ea <__mulsf3+0x1e8>
    175e:	92 30       	cpi	r25, 0x02	; 2
    1760:	49 f4       	brne	.+18     	; 0x1774 <__mulsf3+0x72>
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	8a 89       	ldd	r24, Y+18	; 0x12
    1768:	98 13       	cpse	r25, r24
    176a:	21 e0       	ldi	r18, 0x01	; 1
    176c:	2a 87       	std	Y+10, r18	; 0x0a
    176e:	ce 01       	movw	r24, r28
    1770:	09 96       	adiw	r24, 0x09	; 9
    1772:	bb c0       	rjmp	.+374    	; 0x18ea <__mulsf3+0x1e8>
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	49 f4       	brne	.+18     	; 0x178a <__mulsf3+0x88>
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	9a 85       	ldd	r25, Y+10	; 0x0a
    177c:	8a 89       	ldd	r24, Y+18	; 0x12
    177e:	98 13       	cpse	r25, r24
    1780:	21 e0       	ldi	r18, 0x01	; 1
    1782:	2a 8b       	std	Y+18, r18	; 0x12
    1784:	ce 01       	movw	r24, r28
    1786:	41 96       	adiw	r24, 0x11	; 17
    1788:	b0 c0       	rjmp	.+352    	; 0x18ea <__mulsf3+0x1e8>
    178a:	2d 84       	ldd	r2, Y+13	; 0x0d
    178c:	3e 84       	ldd	r3, Y+14	; 0x0e
    178e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1790:	58 88       	ldd	r5, Y+16	; 0x10
    1792:	6d 88       	ldd	r6, Y+21	; 0x15
    1794:	7e 88       	ldd	r7, Y+22	; 0x16
    1796:	8f 88       	ldd	r8, Y+23	; 0x17
    1798:	98 8c       	ldd	r9, Y+24	; 0x18
    179a:	ee 24       	eor	r14, r14
    179c:	ff 24       	eor	r15, r15
    179e:	87 01       	movw	r16, r14
    17a0:	aa 24       	eor	r10, r10
    17a2:	bb 24       	eor	r11, r11
    17a4:	65 01       	movw	r12, r10
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	e0 e0       	ldi	r30, 0x00	; 0
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	c1 01       	movw	r24, r2
    17b4:	81 70       	andi	r24, 0x01	; 1
    17b6:	90 70       	andi	r25, 0x00	; 0
    17b8:	89 2b       	or	r24, r25
    17ba:	e9 f0       	breq	.+58     	; 0x17f6 <__mulsf3+0xf4>
    17bc:	e6 0c       	add	r14, r6
    17be:	f7 1c       	adc	r15, r7
    17c0:	08 1d       	adc	r16, r8
    17c2:	19 1d       	adc	r17, r9
    17c4:	9a 01       	movw	r18, r20
    17c6:	ab 01       	movw	r20, r22
    17c8:	2a 0d       	add	r18, r10
    17ca:	3b 1d       	adc	r19, r11
    17cc:	4c 1d       	adc	r20, r12
    17ce:	5d 1d       	adc	r21, r13
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e0       	ldi	r26, 0x00	; 0
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e6 14       	cp	r14, r6
    17da:	f7 04       	cpc	r15, r7
    17dc:	08 05       	cpc	r16, r8
    17de:	19 05       	cpc	r17, r9
    17e0:	20 f4       	brcc	.+8      	; 0x17ea <__mulsf3+0xe8>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a0 e0       	ldi	r26, 0x00	; 0
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	ba 01       	movw	r22, r20
    17ec:	a9 01       	movw	r20, r18
    17ee:	48 0f       	add	r20, r24
    17f0:	59 1f       	adc	r21, r25
    17f2:	6a 1f       	adc	r22, r26
    17f4:	7b 1f       	adc	r23, r27
    17f6:	aa 0c       	add	r10, r10
    17f8:	bb 1c       	adc	r11, r11
    17fa:	cc 1c       	adc	r12, r12
    17fc:	dd 1c       	adc	r13, r13
    17fe:	97 fe       	sbrs	r9, 7
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <__mulsf3+0x110>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e0       	ldi	r26, 0x00	; 0
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	a8 2a       	or	r10, r24
    180c:	b9 2a       	or	r11, r25
    180e:	ca 2a       	or	r12, r26
    1810:	db 2a       	or	r13, r27
    1812:	31 96       	adiw	r30, 0x01	; 1
    1814:	e0 32       	cpi	r30, 0x20	; 32
    1816:	f1 05       	cpc	r31, r1
    1818:	49 f0       	breq	.+18     	; 0x182c <__mulsf3+0x12a>
    181a:	66 0c       	add	r6, r6
    181c:	77 1c       	adc	r7, r7
    181e:	88 1c       	adc	r8, r8
    1820:	99 1c       	adc	r9, r9
    1822:	56 94       	lsr	r5
    1824:	47 94       	ror	r4
    1826:	37 94       	ror	r3
    1828:	27 94       	ror	r2
    182a:	c3 cf       	rjmp	.-122    	; 0x17b2 <__mulsf3+0xb0>
    182c:	fa 85       	ldd	r31, Y+10	; 0x0a
    182e:	ea 89       	ldd	r30, Y+18	; 0x12
    1830:	2b 89       	ldd	r18, Y+19	; 0x13
    1832:	3c 89       	ldd	r19, Y+20	; 0x14
    1834:	8b 85       	ldd	r24, Y+11	; 0x0b
    1836:	9c 85       	ldd	r25, Y+12	; 0x0c
    1838:	28 0f       	add	r18, r24
    183a:	39 1f       	adc	r19, r25
    183c:	2e 5f       	subi	r18, 0xFE	; 254
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	17 c0       	rjmp	.+46     	; 0x1870 <__mulsf3+0x16e>
    1842:	ca 01       	movw	r24, r20
    1844:	81 70       	andi	r24, 0x01	; 1
    1846:	90 70       	andi	r25, 0x00	; 0
    1848:	89 2b       	or	r24, r25
    184a:	61 f0       	breq	.+24     	; 0x1864 <__mulsf3+0x162>
    184c:	16 95       	lsr	r17
    184e:	07 95       	ror	r16
    1850:	f7 94       	ror	r15
    1852:	e7 94       	ror	r14
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e8       	ldi	r27, 0x80	; 128
    185c:	e8 2a       	or	r14, r24
    185e:	f9 2a       	or	r15, r25
    1860:	0a 2b       	or	r16, r26
    1862:	1b 2b       	or	r17, r27
    1864:	76 95       	lsr	r23
    1866:	67 95       	ror	r22
    1868:	57 95       	ror	r21
    186a:	47 95       	ror	r20
    186c:	2f 5f       	subi	r18, 0xFF	; 255
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	77 fd       	sbrc	r23, 7
    1872:	e7 cf       	rjmp	.-50     	; 0x1842 <__mulsf3+0x140>
    1874:	0c c0       	rjmp	.+24     	; 0x188e <__mulsf3+0x18c>
    1876:	44 0f       	add	r20, r20
    1878:	55 1f       	adc	r21, r21
    187a:	66 1f       	adc	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	17 fd       	sbrc	r17, 7
    1880:	41 60       	ori	r20, 0x01	; 1
    1882:	ee 0c       	add	r14, r14
    1884:	ff 1c       	adc	r15, r15
    1886:	00 1f       	adc	r16, r16
    1888:	11 1f       	adc	r17, r17
    188a:	21 50       	subi	r18, 0x01	; 1
    188c:	30 40       	sbci	r19, 0x00	; 0
    188e:	40 30       	cpi	r20, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	59 07       	cpc	r21, r25
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	69 07       	cpc	r22, r25
    1898:	90 e4       	ldi	r25, 0x40	; 64
    189a:	79 07       	cpc	r23, r25
    189c:	60 f3       	brcs	.-40     	; 0x1876 <__mulsf3+0x174>
    189e:	2b 8f       	std	Y+27, r18	; 0x1b
    18a0:	3c 8f       	std	Y+28, r19	; 0x1c
    18a2:	db 01       	movw	r26, r22
    18a4:	ca 01       	movw	r24, r20
    18a6:	8f 77       	andi	r24, 0x7F	; 127
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	a0 70       	andi	r26, 0x00	; 0
    18ac:	b0 70       	andi	r27, 0x00	; 0
    18ae:	80 34       	cpi	r24, 0x40	; 64
    18b0:	91 05       	cpc	r25, r1
    18b2:	a1 05       	cpc	r26, r1
    18b4:	b1 05       	cpc	r27, r1
    18b6:	61 f4       	brne	.+24     	; 0x18d0 <__mulsf3+0x1ce>
    18b8:	47 fd       	sbrc	r20, 7
    18ba:	0a c0       	rjmp	.+20     	; 0x18d0 <__mulsf3+0x1ce>
    18bc:	e1 14       	cp	r14, r1
    18be:	f1 04       	cpc	r15, r1
    18c0:	01 05       	cpc	r16, r1
    18c2:	11 05       	cpc	r17, r1
    18c4:	29 f0       	breq	.+10     	; 0x18d0 <__mulsf3+0x1ce>
    18c6:	40 5c       	subi	r20, 0xC0	; 192
    18c8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ca:	6f 4f       	sbci	r22, 0xFF	; 255
    18cc:	7f 4f       	sbci	r23, 0xFF	; 255
    18ce:	40 78       	andi	r20, 0x80	; 128
    18d0:	1a 8e       	std	Y+26, r1	; 0x1a
    18d2:	fe 17       	cp	r31, r30
    18d4:	11 f0       	breq	.+4      	; 0x18da <__mulsf3+0x1d8>
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	8a 8f       	std	Y+26, r24	; 0x1a
    18da:	4d 8f       	std	Y+29, r20	; 0x1d
    18dc:	5e 8f       	std	Y+30, r21	; 0x1e
    18de:	6f 8f       	std	Y+31, r22	; 0x1f
    18e0:	78 a3       	std	Y+32, r23	; 0x20
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	89 8f       	std	Y+25, r24	; 0x19
    18e6:	ce 01       	movw	r24, r28
    18e8:	49 96       	adiw	r24, 0x19	; 25
    18ea:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__pack_f>
    18ee:	a0 96       	adiw	r28, 0x20	; 32
    18f0:	e2 e1       	ldi	r30, 0x12	; 18
    18f2:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__epilogue_restores__>

000018f6 <__gtsf2>:
    18f6:	a8 e1       	ldi	r26, 0x18	; 24
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e1 e8       	ldi	r30, 0x81	; 129
    18fc:	fc e0       	ldi	r31, 0x0C	; 12
    18fe:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
    1902:	69 83       	std	Y+1, r22	; 0x01
    1904:	7a 83       	std	Y+2, r23	; 0x02
    1906:	8b 83       	std	Y+3, r24	; 0x03
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	2d 83       	std	Y+5, r18	; 0x05
    190c:	3e 83       	std	Y+6, r19	; 0x06
    190e:	4f 83       	std	Y+7, r20	; 0x07
    1910:	58 87       	std	Y+8, r21	; 0x08
    1912:	89 e0       	ldi	r24, 0x09	; 9
    1914:	e8 2e       	mov	r14, r24
    1916:	f1 2c       	mov	r15, r1
    1918:	ec 0e       	add	r14, r28
    191a:	fd 1e       	adc	r15, r29
    191c:	ce 01       	movw	r24, r28
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	b7 01       	movw	r22, r14
    1922:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    1926:	8e 01       	movw	r16, r28
    1928:	0f 5e       	subi	r16, 0xEF	; 239
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	ce 01       	movw	r24, r28
    192e:	05 96       	adiw	r24, 0x05	; 5
    1930:	b8 01       	movw	r22, r16
    1932:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    1936:	89 85       	ldd	r24, Y+9	; 0x09
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	40 f0       	brcs	.+16     	; 0x194c <__gtsf2+0x56>
    193c:	89 89       	ldd	r24, Y+17	; 0x11
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	28 f0       	brcs	.+10     	; 0x194c <__gtsf2+0x56>
    1942:	c7 01       	movw	r24, r14
    1944:	b8 01       	movw	r22, r16
    1946:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__fpcmp_parts_f>
    194a:	01 c0       	rjmp	.+2      	; 0x194e <__gtsf2+0x58>
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	68 96       	adiw	r28, 0x18	; 24
    1950:	e6 e0       	ldi	r30, 0x06	; 6
    1952:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

00001956 <__gesf2>:
    1956:	a8 e1       	ldi	r26, 0x18	; 24
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e1 eb       	ldi	r30, 0xB1	; 177
    195c:	fc e0       	ldi	r31, 0x0C	; 12
    195e:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
    1962:	69 83       	std	Y+1, r22	; 0x01
    1964:	7a 83       	std	Y+2, r23	; 0x02
    1966:	8b 83       	std	Y+3, r24	; 0x03
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	2d 83       	std	Y+5, r18	; 0x05
    196c:	3e 83       	std	Y+6, r19	; 0x06
    196e:	4f 83       	std	Y+7, r20	; 0x07
    1970:	58 87       	std	Y+8, r21	; 0x08
    1972:	89 e0       	ldi	r24, 0x09	; 9
    1974:	e8 2e       	mov	r14, r24
    1976:	f1 2c       	mov	r15, r1
    1978:	ec 0e       	add	r14, r28
    197a:	fd 1e       	adc	r15, r29
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	b7 01       	movw	r22, r14
    1982:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    1986:	8e 01       	movw	r16, r28
    1988:	0f 5e       	subi	r16, 0xEF	; 239
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	ce 01       	movw	r24, r28
    198e:	05 96       	adiw	r24, 0x05	; 5
    1990:	b8 01       	movw	r22, r16
    1992:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	40 f0       	brcs	.+16     	; 0x19ac <__gesf2+0x56>
    199c:	89 89       	ldd	r24, Y+17	; 0x11
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	28 f0       	brcs	.+10     	; 0x19ac <__gesf2+0x56>
    19a2:	c7 01       	movw	r24, r14
    19a4:	b8 01       	movw	r22, r16
    19a6:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__fpcmp_parts_f>
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <__gesf2+0x58>
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	68 96       	adiw	r28, 0x18	; 24
    19b0:	e6 e0       	ldi	r30, 0x06	; 6
    19b2:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

000019b6 <__ltsf2>:
    19b6:	a8 e1       	ldi	r26, 0x18	; 24
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e1 ee       	ldi	r30, 0xE1	; 225
    19bc:	fc e0       	ldi	r31, 0x0C	; 12
    19be:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
    19c2:	69 83       	std	Y+1, r22	; 0x01
    19c4:	7a 83       	std	Y+2, r23	; 0x02
    19c6:	8b 83       	std	Y+3, r24	; 0x03
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	2d 83       	std	Y+5, r18	; 0x05
    19cc:	3e 83       	std	Y+6, r19	; 0x06
    19ce:	4f 83       	std	Y+7, r20	; 0x07
    19d0:	58 87       	std	Y+8, r21	; 0x08
    19d2:	89 e0       	ldi	r24, 0x09	; 9
    19d4:	e8 2e       	mov	r14, r24
    19d6:	f1 2c       	mov	r15, r1
    19d8:	ec 0e       	add	r14, r28
    19da:	fd 1e       	adc	r15, r29
    19dc:	ce 01       	movw	r24, r28
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	b7 01       	movw	r22, r14
    19e2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    19e6:	8e 01       	movw	r16, r28
    19e8:	0f 5e       	subi	r16, 0xEF	; 239
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	ce 01       	movw	r24, r28
    19ee:	05 96       	adiw	r24, 0x05	; 5
    19f0:	b8 01       	movw	r22, r16
    19f2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	40 f0       	brcs	.+16     	; 0x1a0c <__ltsf2+0x56>
    19fc:	89 89       	ldd	r24, Y+17	; 0x11
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	28 f0       	brcs	.+10     	; 0x1a0c <__ltsf2+0x56>
    1a02:	c7 01       	movw	r24, r14
    1a04:	b8 01       	movw	r22, r16
    1a06:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__fpcmp_parts_f>
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <__ltsf2+0x58>
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	68 96       	adiw	r28, 0x18	; 24
    1a10:	e6 e0       	ldi	r30, 0x06	; 6
    1a12:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

00001a16 <__fixsfsi>:
    1a16:	ac e0       	ldi	r26, 0x0C	; 12
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e1 e1       	ldi	r30, 0x11	; 17
    1a1c:	fd e0       	ldi	r31, 0x0D	; 13
    1a1e:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__prologue_saves__+0x20>
    1a22:	69 83       	std	Y+1, r22	; 0x01
    1a24:	7a 83       	std	Y+2, r23	; 0x02
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	9c 83       	std	Y+4, r25	; 0x04
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	be 01       	movw	r22, r28
    1a30:	6b 5f       	subi	r22, 0xFB	; 251
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__unpack_f>
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	61 f1       	breq	.+88     	; 0x1a96 <__fixsfsi+0x80>
    1a3e:	82 30       	cpi	r24, 0x02	; 2
    1a40:	50 f1       	brcs	.+84     	; 0x1a96 <__fixsfsi+0x80>
    1a42:	84 30       	cpi	r24, 0x04	; 4
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <__fixsfsi+0x38>
    1a46:	8e 81       	ldd	r24, Y+6	; 0x06
    1a48:	88 23       	and	r24, r24
    1a4a:	51 f1       	breq	.+84     	; 0x1aa0 <__fixsfsi+0x8a>
    1a4c:	2e c0       	rjmp	.+92     	; 0x1aaa <__fixsfsi+0x94>
    1a4e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a50:	38 85       	ldd	r19, Y+8	; 0x08
    1a52:	37 fd       	sbrc	r19, 7
    1a54:	20 c0       	rjmp	.+64     	; 0x1a96 <__fixsfsi+0x80>
    1a56:	6e 81       	ldd	r22, Y+6	; 0x06
    1a58:	2f 31       	cpi	r18, 0x1F	; 31
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	1c f0       	brlt	.+6      	; 0x1a64 <__fixsfsi+0x4e>
    1a5e:	66 23       	and	r22, r22
    1a60:	f9 f0       	breq	.+62     	; 0x1aa0 <__fixsfsi+0x8a>
    1a62:	23 c0       	rjmp	.+70     	; 0x1aaa <__fixsfsi+0x94>
    1a64:	8e e1       	ldi	r24, 0x1E	; 30
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	82 1b       	sub	r24, r18
    1a6a:	93 0b       	sbc	r25, r19
    1a6c:	29 85       	ldd	r18, Y+9	; 0x09
    1a6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a70:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a72:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <__fixsfsi+0x68>
    1a76:	56 95       	lsr	r21
    1a78:	47 95       	ror	r20
    1a7a:	37 95       	ror	r19
    1a7c:	27 95       	ror	r18
    1a7e:	8a 95       	dec	r24
    1a80:	d2 f7       	brpl	.-12     	; 0x1a76 <__fixsfsi+0x60>
    1a82:	66 23       	and	r22, r22
    1a84:	b1 f0       	breq	.+44     	; 0x1ab2 <__fixsfsi+0x9c>
    1a86:	50 95       	com	r21
    1a88:	40 95       	com	r20
    1a8a:	30 95       	com	r19
    1a8c:	21 95       	neg	r18
    1a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a90:	4f 4f       	sbci	r20, 0xFF	; 255
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <__fixsfsi+0x9c>
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <__fixsfsi+0x9c>
    1aa0:	2f ef       	ldi	r18, 0xFF	; 255
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f ef       	ldi	r20, 0xFF	; 255
    1aa6:	5f e7       	ldi	r21, 0x7F	; 127
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <__fixsfsi+0x9c>
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	50 e8       	ldi	r21, 0x80	; 128
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	ca 01       	movw	r24, r20
    1ab6:	2c 96       	adiw	r28, 0x0c	; 12
    1ab8:	e2 e0       	ldi	r30, 0x02	; 2
    1aba:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__epilogue_restores__+0x20>

00001abe <__floatunsisf>:
    1abe:	a8 e0       	ldi	r26, 0x08	; 8
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e5 e6       	ldi	r30, 0x65	; 101
    1ac4:	fd e0       	ldi	r31, 0x0D	; 13
    1ac6:	0c 94 26 10 	jmp	0x204c	; 0x204c <__prologue_saves__+0x10>
    1aca:	7b 01       	movw	r14, r22
    1acc:	8c 01       	movw	r16, r24
    1ace:	61 15       	cp	r22, r1
    1ad0:	71 05       	cpc	r23, r1
    1ad2:	81 05       	cpc	r24, r1
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	19 f4       	brne	.+6      	; 0x1ade <__floatunsisf+0x20>
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	60 c0       	rjmp	.+192    	; 0x1b9e <__floatunsisf+0xe0>
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	8e e1       	ldi	r24, 0x1E	; 30
    1ae4:	c8 2e       	mov	r12, r24
    1ae6:	d1 2c       	mov	r13, r1
    1ae8:	dc 82       	std	Y+4, r13	; 0x04
    1aea:	cb 82       	std	Y+3, r12	; 0x03
    1aec:	ed 82       	std	Y+5, r14	; 0x05
    1aee:	fe 82       	std	Y+6, r15	; 0x06
    1af0:	0f 83       	std	Y+7, r16	; 0x07
    1af2:	18 87       	std	Y+8, r17	; 0x08
    1af4:	c8 01       	movw	r24, r16
    1af6:	b7 01       	movw	r22, r14
    1af8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__clzsi2>
    1afc:	fc 01       	movw	r30, r24
    1afe:	31 97       	sbiw	r30, 0x01	; 1
    1b00:	f7 ff       	sbrs	r31, 7
    1b02:	3b c0       	rjmp	.+118    	; 0x1b7a <__floatunsisf+0xbc>
    1b04:	22 27       	eor	r18, r18
    1b06:	33 27       	eor	r19, r19
    1b08:	2e 1b       	sub	r18, r30
    1b0a:	3f 0b       	sbc	r19, r31
    1b0c:	57 01       	movw	r10, r14
    1b0e:	68 01       	movw	r12, r16
    1b10:	02 2e       	mov	r0, r18
    1b12:	04 c0       	rjmp	.+8      	; 0x1b1c <__floatunsisf+0x5e>
    1b14:	d6 94       	lsr	r13
    1b16:	c7 94       	ror	r12
    1b18:	b7 94       	ror	r11
    1b1a:	a7 94       	ror	r10
    1b1c:	0a 94       	dec	r0
    1b1e:	d2 f7       	brpl	.-12     	; 0x1b14 <__floatunsisf+0x56>
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	04 c0       	rjmp	.+8      	; 0x1b3a <__floatunsisf+0x7c>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	aa 1f       	adc	r26, r26
    1b38:	bb 1f       	adc	r27, r27
    1b3a:	2a 95       	dec	r18
    1b3c:	d2 f7       	brpl	.-12     	; 0x1b32 <__floatunsisf+0x74>
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	a1 09       	sbc	r26, r1
    1b42:	b1 09       	sbc	r27, r1
    1b44:	8e 21       	and	r24, r14
    1b46:	9f 21       	and	r25, r15
    1b48:	a0 23       	and	r26, r16
    1b4a:	b1 23       	and	r27, r17
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	a1 05       	cpc	r26, r1
    1b50:	b1 05       	cpc	r27, r1
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <__floatunsisf+0x9e>
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	4a 29       	or	r20, r10
    1b5e:	5b 29       	or	r21, r11
    1b60:	6c 29       	or	r22, r12
    1b62:	7d 29       	or	r23, r13
    1b64:	4d 83       	std	Y+5, r20	; 0x05
    1b66:	5e 83       	std	Y+6, r21	; 0x06
    1b68:	6f 83       	std	Y+7, r22	; 0x07
    1b6a:	78 87       	std	Y+8, r23	; 0x08
    1b6c:	8e e1       	ldi	r24, 0x1E	; 30
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	8e 1b       	sub	r24, r30
    1b72:	9f 0b       	sbc	r25, r31
    1b74:	9c 83       	std	Y+4, r25	; 0x04
    1b76:	8b 83       	std	Y+3, r24	; 0x03
    1b78:	12 c0       	rjmp	.+36     	; 0x1b9e <__floatunsisf+0xe0>
    1b7a:	30 97       	sbiw	r30, 0x00	; 0
    1b7c:	81 f0       	breq	.+32     	; 0x1b9e <__floatunsisf+0xe0>
    1b7e:	0e 2e       	mov	r0, r30
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <__floatunsisf+0xcc>
    1b82:	ee 0c       	add	r14, r14
    1b84:	ff 1c       	adc	r15, r15
    1b86:	00 1f       	adc	r16, r16
    1b88:	11 1f       	adc	r17, r17
    1b8a:	0a 94       	dec	r0
    1b8c:	d2 f7       	brpl	.-12     	; 0x1b82 <__floatunsisf+0xc4>
    1b8e:	ed 82       	std	Y+5, r14	; 0x05
    1b90:	fe 82       	std	Y+6, r15	; 0x06
    1b92:	0f 83       	std	Y+7, r16	; 0x07
    1b94:	18 87       	std	Y+8, r17	; 0x08
    1b96:	ce 1a       	sub	r12, r30
    1b98:	df 0a       	sbc	r13, r31
    1b9a:	dc 82       	std	Y+4, r13	; 0x04
    1b9c:	cb 82       	std	Y+3, r12	; 0x03
    1b9e:	1a 82       	std	Y+2, r1	; 0x02
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__pack_f>
    1ba8:	28 96       	adiw	r28, 0x08	; 8
    1baa:	ea e0       	ldi	r30, 0x0A	; 10
    1bac:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__epilogue_restores__+0x10>

00001bb0 <__clzsi2>:
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	7b 01       	movw	r14, r22
    1bba:	8c 01       	movw	r16, r24
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	e8 16       	cp	r14, r24
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	f8 06       	cpc	r15, r24
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	08 07       	cpc	r16, r24
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	18 07       	cpc	r17, r24
    1bcc:	88 f4       	brcc	.+34     	; 0x1bf0 <__clzsi2+0x40>
    1bce:	8f ef       	ldi	r24, 0xFF	; 255
    1bd0:	e8 16       	cp	r14, r24
    1bd2:	f1 04       	cpc	r15, r1
    1bd4:	01 05       	cpc	r16, r1
    1bd6:	11 05       	cpc	r17, r1
    1bd8:	31 f0       	breq	.+12     	; 0x1be6 <__clzsi2+0x36>
    1bda:	28 f0       	brcs	.+10     	; 0x1be6 <__clzsi2+0x36>
    1bdc:	88 e0       	ldi	r24, 0x08	; 8
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	17 c0       	rjmp	.+46     	; 0x1c14 <__clzsi2+0x64>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	12 c0       	rjmp	.+36     	; 0x1c14 <__clzsi2+0x64>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	e8 16       	cp	r14, r24
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	f8 06       	cpc	r15, r24
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	08 07       	cpc	r16, r24
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	18 07       	cpc	r17, r24
    1c00:	28 f0       	brcs	.+10     	; 0x1c0c <__clzsi2+0x5c>
    1c02:	88 e1       	ldi	r24, 0x18	; 24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <__clzsi2+0x64>
    1c0c:	80 e1       	ldi	r24, 0x10	; 16
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	20 e2       	ldi	r18, 0x20	; 32
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	28 1b       	sub	r18, r24
    1c1e:	39 0b       	sbc	r19, r25
    1c20:	4a 0b       	sbc	r20, r26
    1c22:	5b 0b       	sbc	r21, r27
    1c24:	04 c0       	rjmp	.+8      	; 0x1c2e <__clzsi2+0x7e>
    1c26:	16 95       	lsr	r17
    1c28:	07 95       	ror	r16
    1c2a:	f7 94       	ror	r15
    1c2c:	e7 94       	ror	r14
    1c2e:	8a 95       	dec	r24
    1c30:	d2 f7       	brpl	.-12     	; 0x1c26 <__clzsi2+0x76>
    1c32:	f7 01       	movw	r30, r14
    1c34:	e2 5f       	subi	r30, 0xF2	; 242
    1c36:	fb 4f       	sbci	r31, 0xFB	; 251
    1c38:	80 81       	ld	r24, Z
    1c3a:	28 1b       	sub	r18, r24
    1c3c:	31 09       	sbc	r19, r1
    1c3e:	41 09       	sbc	r20, r1
    1c40:	51 09       	sbc	r21, r1
    1c42:	c9 01       	movw	r24, r18
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	08 95       	ret

00001c4e <__pack_f>:
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	fc 01       	movw	r30, r24
    1c5a:	e4 80       	ldd	r14, Z+4	; 0x04
    1c5c:	f5 80       	ldd	r15, Z+5	; 0x05
    1c5e:	06 81       	ldd	r16, Z+6	; 0x06
    1c60:	17 81       	ldd	r17, Z+7	; 0x07
    1c62:	d1 80       	ldd	r13, Z+1	; 0x01
    1c64:	80 81       	ld	r24, Z
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	48 f4       	brcc	.+18     	; 0x1c7c <__pack_f+0x2e>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e1       	ldi	r26, 0x10	; 16
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e8 2a       	or	r14, r24
    1c74:	f9 2a       	or	r15, r25
    1c76:	0a 2b       	or	r16, r26
    1c78:	1b 2b       	or	r17, r27
    1c7a:	a5 c0       	rjmp	.+330    	; 0x1dc6 <__pack_f+0x178>
    1c7c:	84 30       	cpi	r24, 0x04	; 4
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <__pack_f+0x34>
    1c80:	9f c0       	rjmp	.+318    	; 0x1dc0 <__pack_f+0x172>
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	21 f4       	brne	.+8      	; 0x1c8e <__pack_f+0x40>
    1c86:	ee 24       	eor	r14, r14
    1c88:	ff 24       	eor	r15, r15
    1c8a:	87 01       	movw	r16, r14
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <__pack_f+0x4a>
    1c8e:	e1 14       	cp	r14, r1
    1c90:	f1 04       	cpc	r15, r1
    1c92:	01 05       	cpc	r16, r1
    1c94:	11 05       	cpc	r17, r1
    1c96:	19 f4       	brne	.+6      	; 0x1c9e <__pack_f+0x50>
    1c98:	e0 e0       	ldi	r30, 0x00	; 0
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	96 c0       	rjmp	.+300    	; 0x1dca <__pack_f+0x17c>
    1c9e:	62 81       	ldd	r22, Z+2	; 0x02
    1ca0:	73 81       	ldd	r23, Z+3	; 0x03
    1ca2:	9f ef       	ldi	r25, 0xFF	; 255
    1ca4:	62 38       	cpi	r22, 0x82	; 130
    1ca6:	79 07       	cpc	r23, r25
    1ca8:	0c f0       	brlt	.+2      	; 0x1cac <__pack_f+0x5e>
    1caa:	5b c0       	rjmp	.+182    	; 0x1d62 <__pack_f+0x114>
    1cac:	22 e8       	ldi	r18, 0x82	; 130
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	26 1b       	sub	r18, r22
    1cb2:	37 0b       	sbc	r19, r23
    1cb4:	2a 31       	cpi	r18, 0x1A	; 26
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	2c f0       	brlt	.+10     	; 0x1cc4 <__pack_f+0x76>
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	2a c0       	rjmp	.+84     	; 0x1d18 <__pack_f+0xca>
    1cc4:	b8 01       	movw	r22, r16
    1cc6:	a7 01       	movw	r20, r14
    1cc8:	02 2e       	mov	r0, r18
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <__pack_f+0x86>
    1ccc:	76 95       	lsr	r23
    1cce:	67 95       	ror	r22
    1cd0:	57 95       	ror	r21
    1cd2:	47 95       	ror	r20
    1cd4:	0a 94       	dec	r0
    1cd6:	d2 f7       	brpl	.-12     	; 0x1ccc <__pack_f+0x7e>
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <__pack_f+0x9c>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	aa 1f       	adc	r26, r26
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	2a 95       	dec	r18
    1cec:	d2 f7       	brpl	.-12     	; 0x1ce2 <__pack_f+0x94>
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	a1 09       	sbc	r26, r1
    1cf2:	b1 09       	sbc	r27, r1
    1cf4:	8e 21       	and	r24, r14
    1cf6:	9f 21       	and	r25, r15
    1cf8:	a0 23       	and	r26, r16
    1cfa:	b1 23       	and	r27, r17
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	a1 05       	cpc	r26, r1
    1d00:	b1 05       	cpc	r27, r1
    1d02:	21 f0       	breq	.+8      	; 0x1d0c <__pack_f+0xbe>
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e0       	ldi	r26, 0x00	; 0
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	9a 01       	movw	r18, r20
    1d0e:	ab 01       	movw	r20, r22
    1d10:	28 2b       	or	r18, r24
    1d12:	39 2b       	or	r19, r25
    1d14:	4a 2b       	or	r20, r26
    1d16:	5b 2b       	or	r21, r27
    1d18:	da 01       	movw	r26, r20
    1d1a:	c9 01       	movw	r24, r18
    1d1c:	8f 77       	andi	r24, 0x7F	; 127
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	a0 70       	andi	r26, 0x00	; 0
    1d22:	b0 70       	andi	r27, 0x00	; 0
    1d24:	80 34       	cpi	r24, 0x40	; 64
    1d26:	91 05       	cpc	r25, r1
    1d28:	a1 05       	cpc	r26, r1
    1d2a:	b1 05       	cpc	r27, r1
    1d2c:	39 f4       	brne	.+14     	; 0x1d3c <__pack_f+0xee>
    1d2e:	27 ff       	sbrs	r18, 7
    1d30:	09 c0       	rjmp	.+18     	; 0x1d44 <__pack_f+0xf6>
    1d32:	20 5c       	subi	r18, 0xC0	; 192
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
    1d36:	4f 4f       	sbci	r20, 0xFF	; 255
    1d38:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3a:	04 c0       	rjmp	.+8      	; 0x1d44 <__pack_f+0xf6>
    1d3c:	21 5c       	subi	r18, 0xC1	; 193
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	4f 4f       	sbci	r20, 0xFF	; 255
    1d42:	5f 4f       	sbci	r21, 0xFF	; 255
    1d44:	e0 e0       	ldi	r30, 0x00	; 0
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	20 30       	cpi	r18, 0x00	; 0
    1d4a:	a0 e0       	ldi	r26, 0x00	; 0
    1d4c:	3a 07       	cpc	r19, r26
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	4a 07       	cpc	r20, r26
    1d52:	a0 e4       	ldi	r26, 0x40	; 64
    1d54:	5a 07       	cpc	r21, r26
    1d56:	10 f0       	brcs	.+4      	; 0x1d5c <__pack_f+0x10e>
    1d58:	e1 e0       	ldi	r30, 0x01	; 1
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	79 01       	movw	r14, r18
    1d5e:	8a 01       	movw	r16, r20
    1d60:	27 c0       	rjmp	.+78     	; 0x1db0 <__pack_f+0x162>
    1d62:	60 38       	cpi	r22, 0x80	; 128
    1d64:	71 05       	cpc	r23, r1
    1d66:	64 f5       	brge	.+88     	; 0x1dc0 <__pack_f+0x172>
    1d68:	fb 01       	movw	r30, r22
    1d6a:	e1 58       	subi	r30, 0x81	; 129
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	d8 01       	movw	r26, r16
    1d70:	c7 01       	movw	r24, r14
    1d72:	8f 77       	andi	r24, 0x7F	; 127
    1d74:	90 70       	andi	r25, 0x00	; 0
    1d76:	a0 70       	andi	r26, 0x00	; 0
    1d78:	b0 70       	andi	r27, 0x00	; 0
    1d7a:	80 34       	cpi	r24, 0x40	; 64
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	a1 05       	cpc	r26, r1
    1d80:	b1 05       	cpc	r27, r1
    1d82:	39 f4       	brne	.+14     	; 0x1d92 <__pack_f+0x144>
    1d84:	e7 fe       	sbrs	r14, 7
    1d86:	0d c0       	rjmp	.+26     	; 0x1da2 <__pack_f+0x154>
    1d88:	80 e4       	ldi	r24, 0x40	; 64
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <__pack_f+0x14c>
    1d92:	8f e3       	ldi	r24, 0x3F	; 63
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a0 e0       	ldi	r26, 0x00	; 0
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e8 0e       	add	r14, r24
    1d9c:	f9 1e       	adc	r15, r25
    1d9e:	0a 1f       	adc	r16, r26
    1da0:	1b 1f       	adc	r17, r27
    1da2:	17 ff       	sbrs	r17, 7
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <__pack_f+0x162>
    1da6:	16 95       	lsr	r17
    1da8:	07 95       	ror	r16
    1daa:	f7 94       	ror	r15
    1dac:	e7 94       	ror	r14
    1dae:	31 96       	adiw	r30, 0x01	; 1
    1db0:	87 e0       	ldi	r24, 0x07	; 7
    1db2:	16 95       	lsr	r17
    1db4:	07 95       	ror	r16
    1db6:	f7 94       	ror	r15
    1db8:	e7 94       	ror	r14
    1dba:	8a 95       	dec	r24
    1dbc:	d1 f7       	brne	.-12     	; 0x1db2 <__pack_f+0x164>
    1dbe:	05 c0       	rjmp	.+10     	; 0x1dca <__pack_f+0x17c>
    1dc0:	ee 24       	eor	r14, r14
    1dc2:	ff 24       	eor	r15, r15
    1dc4:	87 01       	movw	r16, r14
    1dc6:	ef ef       	ldi	r30, 0xFF	; 255
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	6e 2f       	mov	r22, r30
    1dcc:	67 95       	ror	r22
    1dce:	66 27       	eor	r22, r22
    1dd0:	67 95       	ror	r22
    1dd2:	90 2f       	mov	r25, r16
    1dd4:	9f 77       	andi	r25, 0x7F	; 127
    1dd6:	d7 94       	ror	r13
    1dd8:	dd 24       	eor	r13, r13
    1dda:	d7 94       	ror	r13
    1ddc:	8e 2f       	mov	r24, r30
    1dde:	86 95       	lsr	r24
    1de0:	49 2f       	mov	r20, r25
    1de2:	46 2b       	or	r20, r22
    1de4:	58 2f       	mov	r21, r24
    1de6:	5d 29       	or	r21, r13
    1de8:	b7 01       	movw	r22, r14
    1dea:	ca 01       	movw	r24, r20
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	df 90       	pop	r13
    1df6:	08 95       	ret

00001df8 <__unpack_f>:
    1df8:	fc 01       	movw	r30, r24
    1dfa:	db 01       	movw	r26, r22
    1dfc:	40 81       	ld	r20, Z
    1dfe:	51 81       	ldd	r21, Z+1	; 0x01
    1e00:	22 81       	ldd	r18, Z+2	; 0x02
    1e02:	62 2f       	mov	r22, r18
    1e04:	6f 77       	andi	r22, 0x7F	; 127
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	22 1f       	adc	r18, r18
    1e0a:	22 27       	eor	r18, r18
    1e0c:	22 1f       	adc	r18, r18
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	89 2f       	mov	r24, r25
    1e12:	88 0f       	add	r24, r24
    1e14:	82 2b       	or	r24, r18
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	99 27       	eor	r25, r25
    1e1e:	99 1f       	adc	r25, r25
    1e20:	11 96       	adiw	r26, 0x01	; 1
    1e22:	9c 93       	st	X, r25
    1e24:	11 97       	sbiw	r26, 0x01	; 1
    1e26:	21 15       	cp	r18, r1
    1e28:	31 05       	cpc	r19, r1
    1e2a:	a9 f5       	brne	.+106    	; 0x1e96 <__unpack_f+0x9e>
    1e2c:	41 15       	cp	r20, r1
    1e2e:	51 05       	cpc	r21, r1
    1e30:	61 05       	cpc	r22, r1
    1e32:	71 05       	cpc	r23, r1
    1e34:	11 f4       	brne	.+4      	; 0x1e3a <__unpack_f+0x42>
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	37 c0       	rjmp	.+110    	; 0x1ea8 <__unpack_f+0xb0>
    1e3a:	82 e8       	ldi	r24, 0x82	; 130
    1e3c:	9f ef       	ldi	r25, 0xFF	; 255
    1e3e:	13 96       	adiw	r26, 0x03	; 3
    1e40:	9c 93       	st	X, r25
    1e42:	8e 93       	st	-X, r24
    1e44:	12 97       	sbiw	r26, 0x02	; 2
    1e46:	9a 01       	movw	r18, r20
    1e48:	ab 01       	movw	r20, r22
    1e4a:	67 e0       	ldi	r22, 0x07	; 7
    1e4c:	22 0f       	add	r18, r18
    1e4e:	33 1f       	adc	r19, r19
    1e50:	44 1f       	adc	r20, r20
    1e52:	55 1f       	adc	r21, r21
    1e54:	6a 95       	dec	r22
    1e56:	d1 f7       	brne	.-12     	; 0x1e4c <__unpack_f+0x54>
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	8c 93       	st	X, r24
    1e5c:	0d c0       	rjmp	.+26     	; 0x1e78 <__unpack_f+0x80>
    1e5e:	22 0f       	add	r18, r18
    1e60:	33 1f       	adc	r19, r19
    1e62:	44 1f       	adc	r20, r20
    1e64:	55 1f       	adc	r21, r21
    1e66:	12 96       	adiw	r26, 0x02	; 2
    1e68:	8d 91       	ld	r24, X+
    1e6a:	9c 91       	ld	r25, X
    1e6c:	13 97       	sbiw	r26, 0x03	; 3
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	13 96       	adiw	r26, 0x03	; 3
    1e72:	9c 93       	st	X, r25
    1e74:	8e 93       	st	-X, r24
    1e76:	12 97       	sbiw	r26, 0x02	; 2
    1e78:	20 30       	cpi	r18, 0x00	; 0
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	38 07       	cpc	r19, r24
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	48 07       	cpc	r20, r24
    1e82:	80 e4       	ldi	r24, 0x40	; 64
    1e84:	58 07       	cpc	r21, r24
    1e86:	58 f3       	brcs	.-42     	; 0x1e5e <__unpack_f+0x66>
    1e88:	14 96       	adiw	r26, 0x04	; 4
    1e8a:	2d 93       	st	X+, r18
    1e8c:	3d 93       	st	X+, r19
    1e8e:	4d 93       	st	X+, r20
    1e90:	5c 93       	st	X, r21
    1e92:	17 97       	sbiw	r26, 0x07	; 7
    1e94:	08 95       	ret
    1e96:	2f 3f       	cpi	r18, 0xFF	; 255
    1e98:	31 05       	cpc	r19, r1
    1e9a:	79 f4       	brne	.+30     	; 0x1eba <__unpack_f+0xc2>
    1e9c:	41 15       	cp	r20, r1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	61 05       	cpc	r22, r1
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <__unpack_f+0xb4>
    1ea6:	84 e0       	ldi	r24, 0x04	; 4
    1ea8:	8c 93       	st	X, r24
    1eaa:	08 95       	ret
    1eac:	64 ff       	sbrs	r22, 4
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <__unpack_f+0xbe>
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	8c 93       	st	X, r24
    1eb4:	12 c0       	rjmp	.+36     	; 0x1eda <__unpack_f+0xe2>
    1eb6:	1c 92       	st	X, r1
    1eb8:	10 c0       	rjmp	.+32     	; 0x1eda <__unpack_f+0xe2>
    1eba:	2f 57       	subi	r18, 0x7F	; 127
    1ebc:	30 40       	sbci	r19, 0x00	; 0
    1ebe:	13 96       	adiw	r26, 0x03	; 3
    1ec0:	3c 93       	st	X, r19
    1ec2:	2e 93       	st	-X, r18
    1ec4:	12 97       	sbiw	r26, 0x02	; 2
    1ec6:	83 e0       	ldi	r24, 0x03	; 3
    1ec8:	8c 93       	st	X, r24
    1eca:	87 e0       	ldi	r24, 0x07	; 7
    1ecc:	44 0f       	add	r20, r20
    1ece:	55 1f       	adc	r21, r21
    1ed0:	66 1f       	adc	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	8a 95       	dec	r24
    1ed6:	d1 f7       	brne	.-12     	; 0x1ecc <__unpack_f+0xd4>
    1ed8:	70 64       	ori	r23, 0x40	; 64
    1eda:	14 96       	adiw	r26, 0x04	; 4
    1edc:	4d 93       	st	X+, r20
    1ede:	5d 93       	st	X+, r21
    1ee0:	6d 93       	st	X+, r22
    1ee2:	7c 93       	st	X, r23
    1ee4:	17 97       	sbiw	r26, 0x07	; 7
    1ee6:	08 95       	ret

00001ee8 <__fpcmp_parts_f>:
    1ee8:	1f 93       	push	r17
    1eea:	dc 01       	movw	r26, r24
    1eec:	fb 01       	movw	r30, r22
    1eee:	9c 91       	ld	r25, X
    1ef0:	92 30       	cpi	r25, 0x02	; 2
    1ef2:	08 f4       	brcc	.+2      	; 0x1ef6 <__fpcmp_parts_f+0xe>
    1ef4:	47 c0       	rjmp	.+142    	; 0x1f84 <__fpcmp_parts_f+0x9c>
    1ef6:	80 81       	ld	r24, Z
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	08 f4       	brcc	.+2      	; 0x1efe <__fpcmp_parts_f+0x16>
    1efc:	43 c0       	rjmp	.+134    	; 0x1f84 <__fpcmp_parts_f+0x9c>
    1efe:	94 30       	cpi	r25, 0x04	; 4
    1f00:	51 f4       	brne	.+20     	; 0x1f16 <__fpcmp_parts_f+0x2e>
    1f02:	11 96       	adiw	r26, 0x01	; 1
    1f04:	1c 91       	ld	r17, X
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	99 f5       	brne	.+102    	; 0x1f70 <__fpcmp_parts_f+0x88>
    1f0a:	81 81       	ldd	r24, Z+1	; 0x01
    1f0c:	68 2f       	mov	r22, r24
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	61 1b       	sub	r22, r17
    1f12:	71 09       	sbc	r23, r1
    1f14:	3f c0       	rjmp	.+126    	; 0x1f94 <__fpcmp_parts_f+0xac>
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	21 f0       	breq	.+8      	; 0x1f22 <__fpcmp_parts_f+0x3a>
    1f1a:	92 30       	cpi	r25, 0x02	; 2
    1f1c:	31 f4       	brne	.+12     	; 0x1f2a <__fpcmp_parts_f+0x42>
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	b9 f1       	breq	.+110    	; 0x1f90 <__fpcmp_parts_f+0xa8>
    1f22:	81 81       	ldd	r24, Z+1	; 0x01
    1f24:	88 23       	and	r24, r24
    1f26:	89 f1       	breq	.+98     	; 0x1f8a <__fpcmp_parts_f+0xa2>
    1f28:	2d c0       	rjmp	.+90     	; 0x1f84 <__fpcmp_parts_f+0x9c>
    1f2a:	11 96       	adiw	r26, 0x01	; 1
    1f2c:	1c 91       	ld	r17, X
    1f2e:	11 97       	sbiw	r26, 0x01	; 1
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	f1 f0       	breq	.+60     	; 0x1f70 <__fpcmp_parts_f+0x88>
    1f34:	81 81       	ldd	r24, Z+1	; 0x01
    1f36:	18 17       	cp	r17, r24
    1f38:	d9 f4       	brne	.+54     	; 0x1f70 <__fpcmp_parts_f+0x88>
    1f3a:	12 96       	adiw	r26, 0x02	; 2
    1f3c:	2d 91       	ld	r18, X+
    1f3e:	3c 91       	ld	r19, X
    1f40:	13 97       	sbiw	r26, 0x03	; 3
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	82 17       	cp	r24, r18
    1f48:	93 07       	cpc	r25, r19
    1f4a:	94 f0       	brlt	.+36     	; 0x1f70 <__fpcmp_parts_f+0x88>
    1f4c:	28 17       	cp	r18, r24
    1f4e:	39 07       	cpc	r19, r25
    1f50:	bc f0       	brlt	.+46     	; 0x1f80 <__fpcmp_parts_f+0x98>
    1f52:	14 96       	adiw	r26, 0x04	; 4
    1f54:	8d 91       	ld	r24, X+
    1f56:	9d 91       	ld	r25, X+
    1f58:	0d 90       	ld	r0, X+
    1f5a:	bc 91       	ld	r27, X
    1f5c:	a0 2d       	mov	r26, r0
    1f5e:	24 81       	ldd	r18, Z+4	; 0x04
    1f60:	35 81       	ldd	r19, Z+5	; 0x05
    1f62:	46 81       	ldd	r20, Z+6	; 0x06
    1f64:	57 81       	ldd	r21, Z+7	; 0x07
    1f66:	28 17       	cp	r18, r24
    1f68:	39 07       	cpc	r19, r25
    1f6a:	4a 07       	cpc	r20, r26
    1f6c:	5b 07       	cpc	r21, r27
    1f6e:	18 f4       	brcc	.+6      	; 0x1f76 <__fpcmp_parts_f+0x8e>
    1f70:	11 23       	and	r17, r17
    1f72:	41 f0       	breq	.+16     	; 0x1f84 <__fpcmp_parts_f+0x9c>
    1f74:	0a c0       	rjmp	.+20     	; 0x1f8a <__fpcmp_parts_f+0xa2>
    1f76:	82 17       	cp	r24, r18
    1f78:	93 07       	cpc	r25, r19
    1f7a:	a4 07       	cpc	r26, r20
    1f7c:	b5 07       	cpc	r27, r21
    1f7e:	40 f4       	brcc	.+16     	; 0x1f90 <__fpcmp_parts_f+0xa8>
    1f80:	11 23       	and	r17, r17
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <__fpcmp_parts_f+0xa2>
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	70 e0       	ldi	r23, 0x00	; 0
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <__fpcmp_parts_f+0xac>
    1f8a:	6f ef       	ldi	r22, 0xFF	; 255
    1f8c:	7f ef       	ldi	r23, 0xFF	; 255
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <__fpcmp_parts_f+0xac>
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	cb 01       	movw	r24, r22
    1f96:	1f 91       	pop	r17
    1f98:	08 95       	ret

00001f9a <__udivmodhi4>:
    1f9a:	aa 1b       	sub	r26, r26
    1f9c:	bb 1b       	sub	r27, r27
    1f9e:	51 e1       	ldi	r21, 0x11	; 17
    1fa0:	07 c0       	rjmp	.+14     	; 0x1fb0 <__udivmodhi4_ep>

00001fa2 <__udivmodhi4_loop>:
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	bb 1f       	adc	r27, r27
    1fa6:	a6 17       	cp	r26, r22
    1fa8:	b7 07       	cpc	r27, r23
    1faa:	10 f0       	brcs	.+4      	; 0x1fb0 <__udivmodhi4_ep>
    1fac:	a6 1b       	sub	r26, r22
    1fae:	b7 0b       	sbc	r27, r23

00001fb0 <__udivmodhi4_ep>:
    1fb0:	88 1f       	adc	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	5a 95       	dec	r21
    1fb6:	a9 f7       	brne	.-22     	; 0x1fa2 <__udivmodhi4_loop>
    1fb8:	80 95       	com	r24
    1fba:	90 95       	com	r25
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	08 95       	ret

00001fc2 <__udivmodsi4>:
    1fc2:	a1 e2       	ldi	r26, 0x21	; 33
    1fc4:	1a 2e       	mov	r1, r26
    1fc6:	aa 1b       	sub	r26, r26
    1fc8:	bb 1b       	sub	r27, r27
    1fca:	fd 01       	movw	r30, r26
    1fcc:	0d c0       	rjmp	.+26     	; 0x1fe8 <__udivmodsi4_ep>

00001fce <__udivmodsi4_loop>:
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	ee 1f       	adc	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	a2 17       	cp	r26, r18
    1fd8:	b3 07       	cpc	r27, r19
    1fda:	e4 07       	cpc	r30, r20
    1fdc:	f5 07       	cpc	r31, r21
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <__udivmodsi4_ep>
    1fe0:	a2 1b       	sub	r26, r18
    1fe2:	b3 0b       	sbc	r27, r19
    1fe4:	e4 0b       	sbc	r30, r20
    1fe6:	f5 0b       	sbc	r31, r21

00001fe8 <__udivmodsi4_ep>:
    1fe8:	66 1f       	adc	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	1a 94       	dec	r1
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <__udivmodsi4_loop>
    1ff4:	60 95       	com	r22
    1ff6:	70 95       	com	r23
    1ff8:	80 95       	com	r24
    1ffa:	90 95       	com	r25
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	ac 01       	movw	r20, r24
    2000:	bd 01       	movw	r22, r26
    2002:	cf 01       	movw	r24, r30
    2004:	08 95       	ret

00002006 <__divmodsi4>:
    2006:	97 fb       	bst	r25, 7
    2008:	09 2e       	mov	r0, r25
    200a:	05 26       	eor	r0, r21
    200c:	0e d0       	rcall	.+28     	; 0x202a <__divmodsi4_neg1>
    200e:	57 fd       	sbrc	r21, 7
    2010:	04 d0       	rcall	.+8      	; 0x201a <__divmodsi4_neg2>
    2012:	d7 df       	rcall	.-82     	; 0x1fc2 <__udivmodsi4>
    2014:	0a d0       	rcall	.+20     	; 0x202a <__divmodsi4_neg1>
    2016:	00 1c       	adc	r0, r0
    2018:	38 f4       	brcc	.+14     	; 0x2028 <__divmodsi4_exit>

0000201a <__divmodsi4_neg2>:
    201a:	50 95       	com	r21
    201c:	40 95       	com	r20
    201e:	30 95       	com	r19
    2020:	21 95       	neg	r18
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	4f 4f       	sbci	r20, 0xFF	; 255
    2026:	5f 4f       	sbci	r21, 0xFF	; 255

00002028 <__divmodsi4_exit>:
    2028:	08 95       	ret

0000202a <__divmodsi4_neg1>:
    202a:	f6 f7       	brtc	.-4      	; 0x2028 <__divmodsi4_exit>
    202c:	90 95       	com	r25
    202e:	80 95       	com	r24
    2030:	70 95       	com	r23
    2032:	61 95       	neg	r22
    2034:	7f 4f       	sbci	r23, 0xFF	; 255
    2036:	8f 4f       	sbci	r24, 0xFF	; 255
    2038:	9f 4f       	sbci	r25, 0xFF	; 255
    203a:	08 95       	ret

0000203c <__prologue_saves__>:
    203c:	2f 92       	push	r2
    203e:	3f 92       	push	r3
    2040:	4f 92       	push	r4
    2042:	5f 92       	push	r5
    2044:	6f 92       	push	r6
    2046:	7f 92       	push	r7
    2048:	8f 92       	push	r8
    204a:	9f 92       	push	r9
    204c:	af 92       	push	r10
    204e:	bf 92       	push	r11
    2050:	cf 92       	push	r12
    2052:	df 92       	push	r13
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	ca 1b       	sub	r28, r26
    2066:	db 0b       	sbc	r29, r27
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	09 94       	ijmp

00002074 <__epilogue_restores__>:
    2074:	2a 88       	ldd	r2, Y+18	; 0x12
    2076:	39 88       	ldd	r3, Y+17	; 0x11
    2078:	48 88       	ldd	r4, Y+16	; 0x10
    207a:	5f 84       	ldd	r5, Y+15	; 0x0f
    207c:	6e 84       	ldd	r6, Y+14	; 0x0e
    207e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2080:	8c 84       	ldd	r8, Y+12	; 0x0c
    2082:	9b 84       	ldd	r9, Y+11	; 0x0b
    2084:	aa 84       	ldd	r10, Y+10	; 0x0a
    2086:	b9 84       	ldd	r11, Y+9	; 0x09
    2088:	c8 84       	ldd	r12, Y+8	; 0x08
    208a:	df 80       	ldd	r13, Y+7	; 0x07
    208c:	ee 80       	ldd	r14, Y+6	; 0x06
    208e:	fd 80       	ldd	r15, Y+5	; 0x05
    2090:	0c 81       	ldd	r16, Y+4	; 0x04
    2092:	1b 81       	ldd	r17, Y+3	; 0x03
    2094:	aa 81       	ldd	r26, Y+2	; 0x02
    2096:	b9 81       	ldd	r27, Y+1	; 0x01
    2098:	ce 0f       	add	r28, r30
    209a:	d1 1d       	adc	r29, r1
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	ed 01       	movw	r28, r26
    20a8:	08 95       	ret

000020aa <_exit>:
    20aa:	f8 94       	cli

000020ac <__stop_program>:
    20ac:	ff cf       	rjmp	.-2      	; 0x20ac <__stop_program>
