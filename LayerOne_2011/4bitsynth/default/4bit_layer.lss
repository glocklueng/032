
4bit_layer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  00000a86  00000b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800200  00800200  00000c1a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000034a  00000000  00000000  00000c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000049b  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010b  00000000  00000000  0000141f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f7  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_12>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_14>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_18>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	12 e0       	ldi	r17, 0x02	; 2
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b2 e0       	ldi	r27, 0x02	; 2
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a0 32       	cpi	r26, 0x20	; 32
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  c2:	0c 94 41 05 	jmp	0xa82	; 0xa82 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <init_interrupts>:
#include "triangle.h"

#define CPU_FREQUENCY		( (unsigned long)16000000UL )
#define	BAUD_RATE			( (unsigned long)31250UL )

void init_interrupts() {
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	//Turn on USART reception and | RX Interrupt
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
  d2:	ea e2       	ldi	r30, 0x2A	; 42
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 e9       	ldi	r24, 0x90	; 144
  d8:	80 83       	st	Z, r24

	//8-bit, 1 stop, Asynch.
	UCSR0C = (0 << UMSEL0) | (0 << UPM00) | (0 << USBS0) | (3 << UCSZ00);
  da:	e5 e9       	ldi	r30, 0x95	; 149
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 83       	st	Z, r24

	// These were for the original synth, changed for the l1 human badge
	//UBRR0L = 0x27; // For 20MHz Clock
	//UBRR0L = 0x13;		// FOr 10MHz Clock

	UBRR0H = high((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
  e2:	e0 e9       	ldi	r30, 0x90	; 144
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
	UBRR0L = low((CPU_FREQUENCY / (BAUD_RATE * 16)) - 1);
  e8:	e9 e2       	ldi	r30, 0x29	; 41
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	80 83       	st	Z, r24

	/* Enable USART Receive interrupt */
	enable_USART_interrupts();
  f0:	0e 94 65 03 	call	0x6ca	; 0x6ca <enable_USART_interrupts>

}
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <init_io>:

void init_io() {
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	//b0 - b3 of PORT C is output
	DDRC = 0xFF;
 102:	e4 e3       	ldi	r30, 0x34	; 52
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	80 83       	st	Z, r24

	// for led
	DDRE = 0xff;
 10a:	e2 e2       	ldi	r30, 0x22	; 34
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	80 83       	st	Z, r24

	//b4 0 v7 of PORT D is input (MIDI Channel selection)
	DDRD &= 0b00001111;
 112:	a1 e3       	ldi	r26, 0x31	; 49
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e1 e3       	ldi	r30, 0x31	; 49
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	8c 93       	st	X, r24

	//enable internal pull-up resistors for MIDI Channel selection bits
	PORTD |= 0b11110000;
 120:	a2 e3       	ldi	r26, 0x32	; 50
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e2 e3       	ldi	r30, 0x32	; 50
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 6f       	ori	r24, 0xF0	; 240
 12c:	8c 93       	st	X, r24
}
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <init_timers>:

void init_timers() {
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62

	//8-bit timer 0 for decay, sweep, vibrato effects?
	//Enable Overflow interrupts for Timer 0
	TIMSK = 0b00000001;
 13c:	e7 e5       	ldi	r30, 0x57	; 87
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 83       	st	Z, r24

	//Normal counter operation
	TCCR1A = 0b00000000;
 144:	ef e4       	ldi	r30, 0x4F	; 79
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	10 82       	st	Z, r1

	//Divide by 1024 prescalar
	TCCR1B = 0b00000101;
 14a:	ee e4       	ldi	r30, 0x4E	; 78
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	80 83       	st	Z, r24

	//Start terminal count at zero
	TCNT0 = 0x00;
 152:	e2 e5       	ldi	r30, 0x52	; 82
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	10 82       	st	Z, r1

	//16-bit timer 1 for main frequency generation
	TIMSK |= _BV(TOIE1) | _BV( OCIE1A ) ;
 158:	a7 e5       	ldi	r26, 0x57	; 87
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e7 e5       	ldi	r30, 0x57	; 87
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	84 61       	ori	r24, 0x14	; 20
 164:	8c 93       	st	X, r24
	//TIMSK |= 0b00100000; // Enable A and B compare interrupts

	TCCR1A = 0b00000001;
 166:	ef e4       	ldi	r30, 0x4F	; 79
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 83       	st	Z, r24

	// Prescaler 1, Fast PWM
	TCCR1B = 0b00010001;
 16e:	ee e4       	ldi	r30, 0x4E	; 78
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	81 e1       	ldi	r24, 0x11	; 17
 174:	80 83       	st	Z, r24

	//Start count at zero now
	TCNT1H = 0;
 176:	ed e4       	ldi	r30, 0x4D	; 77
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	10 82       	st	Z, r1
	TCNT1L = 0;
 17c:	ec e4       	ldi	r30, 0x4C	; 76
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	10 82       	st	Z, r1
}
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <main>:

int main(void) {
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	/* Disable interrupts at first */
	cli();
 190:	f8 94       	cli

	/* Setup I/O Pins */
	init_io();
 192:	0e 94 7d 00 	call	0xfa	; 0xfa <init_io>

	/* Setup Timers */
	init_timers();
 196:	0e 94 9a 00 	call	0x134	; 0x134 <init_timers>

	/* Enable USART and Pin Interrupts */
	init_interrupts();
 19a:	0e 94 65 00 	call	0xca	; 0xca <init_interrupts>

	PORTB = 0xFF;
 19e:	e8 e3       	ldi	r30, 0x38	; 56
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	80 83       	st	Z, r24

	OCR1A = 500;
 1a6:	ea e4       	ldi	r30, 0x4A	; 74
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	84 ef       	ldi	r24, 0xF4	; 244
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	91 83       	std	Z+1, r25	; 0x01
 1b0:	80 83       	st	Z, r24

	/*Pitch bend needs to start at 64 (middle value) or pitch will start out
	 two half steps too low (0 = max bend downward)
	 */
	current_midi_pb_l = current_midi_pb_h = 64;
 1b2:	80 e4       	ldi	r24, 0x40	; 64
 1b4:	80 93 09 02 	sts	0x0209, r24
 1b8:	80 91 09 02 	lds	r24, 0x0209
 1bc:	80 93 08 02 	sts	0x0208, r24

	num_bytes = 0;
 1c0:	10 92 01 02 	sts	0x0201, r1
	num_ccs = 0;
 1c4:	10 92 07 02 	sts	0x0207, r1
	num_pbs = 0;
 1c8:	10 92 1a 02 	sts	0x021A, r1
	byte_ready = 0;
 1cc:	10 92 00 02 	sts	0x0200, r1
	midi_channel = 0;
 1d0:	10 92 1c 02 	sts	0x021C, r1
	master_volume = 127;
 1d4:	8f e7       	ldi	r24, 0x7F	; 127
 1d6:	80 93 02 02 	sts	0x0202, r24

	amplitude = 0;
 1da:	10 92 0b 02 	sts	0x020B, r1
	fine_pitch_bend = 0;
 1de:	10 92 10 02 	sts	0x0210, r1
 1e2:	10 92 0f 02 	sts	0x020F, r1
	note_on_gate = 0;
 1e6:	10 92 13 02 	sts	0x0213, r1

	sweep_enabled = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 1b 02 	sts	0x021B, r24
	sweep_direction = SWEEP_UP;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 19 02 	sts	0x0219, r24
	sweep_amount = 0;
 1f6:	10 92 1e 02 	sts	0x021E, r1
	sweep_loop_enabled = 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 1f 02 	sts	0x021F, r24
	fake_16_timer = 0;
 200:	10 92 12 02 	sts	0x0212, r1
 204:	10 92 11 02 	sts	0x0211, r1

	/* Finally, enable global interrupts */
	sei();
 208:	78 94       	sei

	/*Main Loop*/
	while (1) {
		check_channel_set();
 20a:	0e 94 24 05 	call	0xa48	; 0xa48 <check_channel_set>
		check_byte_received();
 20e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <check_byte_received>
 212:	fb cf       	rjmp	.-10     	; 0x20a <main+0x82>

00000214 <__vector_18>:
	}
	return 0;
}

/* USART Received byte interrupt (get MIDI byte)*/
ISR(USART0_RX_vect) {
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
	byte_received = UDR0;
 230:	ec e2       	ldi	r30, 0x2C	; 44
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 93 06 02 	sts	0x0206, r24
	byte_ready = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 00 02 	sts	0x0200, r24
	PORTE ^=0xff;
 240:	a3 e2       	ldi	r26, 0x23	; 35
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e3 e2       	ldi	r30, 0x23	; 35
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 95       	com	r24
 24c:	8c 93       	st	X, r24
}
 24e:	cf 91       	pop	r28
 250:	df 91       	pop	r29
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	0f 92       	push	r0
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	if(note_on_gate == 1) {
 282:	80 91 13 02 	lds	r24, 0x0213
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	09 f0       	breq	.+2      	; 0x28c <__vector_12+0x26>
 28a:	43 c0       	rjmp	.+134    	; 0x312 <__vector_12+0xac>
		fivebit_counter ++;
 28c:	80 91 14 02 	lds	r24, 0x0214
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 93 14 02 	sts	0x0214, r24

		//Reset counter if 'overflowed'
		if(fivebit_counter> 31) fivebit_counter = 0;
 296:	80 91 14 02 	lds	r24, 0x0214
 29a:	80 32       	cpi	r24, 0x20	; 32
 29c:	10 f0       	brcs	.+4      	; 0x2a2 <__vector_12+0x3c>
 29e:	10 92 14 02 	sts	0x0214, r1

		//Each amplitude b0-3 is XNORed with b4 to create output
		unsigned char strobe = (fivebit_counter & 0b00010000) >> 4;
 2a2:	80 91 14 02 	lds	r24, 0x0214
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	80 71       	andi	r24, 0x10	; 16
 2ac:	90 70       	andi	r25, 0x00	; 0
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	95 95       	asr	r25
 2b4:	87 95       	ror	r24
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	95 95       	asr	r25
 2bc:	87 95       	ror	r24
 2be:	89 83       	std	Y+1, r24	; 0x01
		if(strobe == 1) {
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	41 f4       	brne	.+16     	; 0x2d6 <__vector_12+0x70>
			amplitude = ~(fivebit_counter ^ 0b00001111);
 2c6:	80 91 14 02 	lds	r24, 0x0214
 2ca:	98 2f       	mov	r25, r24
 2cc:	80 ef       	ldi	r24, 0xF0	; 240
 2ce:	89 27       	eor	r24, r25
 2d0:	80 93 0b 02 	sts	0x020B, r24
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <__vector_12+0x7a>
		} else {
			amplitude = ~(fivebit_counter ^ 0b00000000);
 2d6:	80 91 14 02 	lds	r24, 0x0214
 2da:	80 95       	com	r24
 2dc:	80 93 0b 02 	sts	0x020B, r24
		}
		amplitude &= 0b11101111;
 2e0:	80 91 0b 02 	lds	r24, 0x020B
 2e4:	8f 7e       	andi	r24, 0xEF	; 239
 2e6:	80 93 0b 02 	sts	0x020B, r24
		amplitude |= (strobe << 4);
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	88 2f       	mov	r24, r24
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	82 95       	swap	r24
 2f2:	92 95       	swap	r25
 2f4:	90 7f       	andi	r25, 0xF0	; 240
 2f6:	98 27       	eor	r25, r24
 2f8:	80 7f       	andi	r24, 0xF0	; 240
 2fa:	98 27       	eor	r25, r24
 2fc:	98 2f       	mov	r25, r24
 2fe:	80 91 0b 02 	lds	r24, 0x020B
 302:	89 2b       	or	r24, r25
 304:	80 93 0b 02 	sts	0x020B, r24
		PORTC = amplitude;
 308:	e5 e3       	ldi	r30, 0x35	; 53
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 91 0b 02 	lds	r24, 0x020B
 310:	80 83       	st	Z, r24
	}
}
 312:	0f 90       	pop	r0
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_14>:

ISR(TIMER1_OVF_vect) {
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	2f 93       	push	r18
 336:	3f 93       	push	r19
 338:	4f 93       	push	r20
 33a:	5f 93       	push	r21
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	00 d0       	rcall	.+0      	; 0x352 <__vector_14+0x28>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62

	/* Sweep */
	if((sweep_enabled == 1) && (sweep_amount> 0) && (note_on_gate == 1)) {
 356:	80 91 1b 02 	lds	r24, 0x021B
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	09 f0       	breq	.+2      	; 0x360 <__vector_14+0x36>
 35e:	ac c0       	rjmp	.+344    	; 0x4b8 <__vector_14+0x18e>
 360:	80 91 1e 02 	lds	r24, 0x021E
 364:	88 23       	and	r24, r24
 366:	09 f4       	brne	.+2      	; 0x36a <__vector_14+0x40>
 368:	a7 c0       	rjmp	.+334    	; 0x4b8 <__vector_14+0x18e>
 36a:	80 91 13 02 	lds	r24, 0x0213
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	09 f0       	breq	.+2      	; 0x374 <__vector_14+0x4a>
 372:	a2 c0       	rjmp	.+324    	; 0x4b8 <__vector_14+0x18e>
		fake_16_timer ++;
 374:	80 91 11 02 	lds	r24, 0x0211
 378:	90 91 12 02 	lds	r25, 0x0212
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	90 93 12 02 	sts	0x0212, r25
 382:	80 93 11 02 	sts	0x0211, r24
		if(fake_16_timer >= 2) {
 386:	80 91 11 02 	lds	r24, 0x0211
 38a:	90 91 12 02 	lds	r25, 0x0212
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	91 05       	cpc	r25, r1
 392:	08 f4       	brcc	.+2      	; 0x396 <__vector_14+0x6c>
 394:	91 c0       	rjmp	.+290    	; 0x4b8 <__vector_14+0x18e>

			unsigned int sweep_mod = sweep_amount * note_table[playing_midi_note] / (8 * playing_midi_note);
 396:	80 91 1e 02 	lds	r24, 0x021E
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	80 91 0a 02 	lds	r24, 0x020A
 3a2:	88 2f       	mov	r24, r24
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	fc 01       	movw	r30, r24
 3ac:	e0 50       	subi	r30, 0x00	; 0
 3ae:	ff 4f       	sbci	r31, 0xFF	; 255
 3b0:	80 81       	ld	r24, Z
 3b2:	91 81       	ldd	r25, Z+1	; 0x01
 3b4:	28 9f       	mul	r18, r24
 3b6:	a0 01       	movw	r20, r0
 3b8:	29 9f       	mul	r18, r25
 3ba:	50 0d       	add	r21, r0
 3bc:	38 9f       	mul	r19, r24
 3be:	50 0d       	add	r21, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	80 91 0a 02 	lds	r24, 0x020A
 3c6:	88 2f       	mov	r24, r24
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	9c 01       	movw	r18, r24
 3d8:	ca 01       	movw	r24, r20
 3da:	b9 01       	movw	r22, r18
 3dc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__udivmodhi4>
 3e0:	cb 01       	movw	r24, r22
 3e2:	9a 83       	std	Y+2, r25	; 0x02
 3e4:	89 83       	std	Y+1, r24	; 0x01

			//Sweep down mode
			if(sweep_direction == SWEEP_DOWN) {
 3e6:	80 91 19 02 	lds	r24, 0x0219
 3ea:	88 23       	and	r24, r24
 3ec:	61 f5       	brne	.+88     	; 0x446 <__vector_14+0x11c>
				if(frequency < MAXIMUM_FREQ) {
 3ee:	80 91 04 02 	lds	r24, 0x0204
 3f2:	90 91 05 02 	lds	r25, 0x0205
 3f6:	2a e4       	ldi	r18, 0x4A	; 74
 3f8:	88 33       	cpi	r24, 0x38	; 56
 3fa:	92 07       	cpc	r25, r18
 3fc:	68 f4       	brcc	.+26     	; 0x418 <__vector_14+0xee>
					frequency += sweep_mod;
 3fe:	80 91 04 02 	lds	r24, 0x0204
 402:	90 91 05 02 	lds	r25, 0x0205
 406:	29 81       	ldd	r18, Y+1	; 0x01
 408:	3a 81       	ldd	r19, Y+2	; 0x02
 40a:	82 0f       	add	r24, r18
 40c:	93 1f       	adc	r25, r19
 40e:	90 93 05 02 	sts	0x0205, r25
 412:	80 93 04 02 	sts	0x0204, r24
 416:	46 c0       	rjmp	.+140    	; 0x4a4 <__vector_14+0x17a>
				}
				else
				{
					if(sweep_loop_enabled == 1) {
 418:	80 91 1f 02 	lds	r24, 0x021F
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	81 f4       	brne	.+32     	; 0x440 <__vector_14+0x116>
						frequency = note_table[playing_midi_note];
 420:	80 91 0a 02 	lds	r24, 0x020A
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	fc 01       	movw	r30, r24
 42e:	e0 50       	subi	r30, 0x00	; 0
 430:	ff 4f       	sbci	r31, 0xFF	; 255
 432:	80 81       	ld	r24, Z
 434:	91 81       	ldd	r25, Z+1	; 0x01
 436:	90 93 05 02 	sts	0x0205, r25
 43a:	80 93 04 02 	sts	0x0204, r24
 43e:	32 c0       	rjmp	.+100    	; 0x4a4 <__vector_14+0x17a>
					}
					else {
						amplitude = 0;
 440:	10 92 0b 02 	sts	0x020B, r1
 444:	2f c0       	rjmp	.+94     	; 0x4a4 <__vector_14+0x17a>
				}
			}
			//Sweep up mode
			else
			{
				if(frequency> MINIMUM_FREQ+sweep_mod) {
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	9a 81       	ldd	r25, Y+2	; 0x02
 44a:	9c 01       	movw	r18, r24
 44c:	24 5c       	subi	r18, 0xC4	; 196
 44e:	3f 4f       	sbci	r19, 0xFF	; 255
 450:	80 91 04 02 	lds	r24, 0x0204
 454:	90 91 05 02 	lds	r25, 0x0205
 458:	28 17       	cp	r18, r24
 45a:	39 07       	cpc	r19, r25
 45c:	68 f4       	brcc	.+26     	; 0x478 <__vector_14+0x14e>
					frequency -= sweep_mod;
 45e:	80 91 04 02 	lds	r24, 0x0204
 462:	90 91 05 02 	lds	r25, 0x0205
 466:	29 81       	ldd	r18, Y+1	; 0x01
 468:	3a 81       	ldd	r19, Y+2	; 0x02
 46a:	82 1b       	sub	r24, r18
 46c:	93 0b       	sbc	r25, r19
 46e:	90 93 05 02 	sts	0x0205, r25
 472:	80 93 04 02 	sts	0x0204, r24
 476:	16 c0       	rjmp	.+44     	; 0x4a4 <__vector_14+0x17a>
				}
				else
				{
					if(sweep_loop_enabled == 1) {
 478:	80 91 1f 02 	lds	r24, 0x021F
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	81 f4       	brne	.+32     	; 0x4a0 <__vector_14+0x176>
						frequency = note_table[playing_midi_note];
 480:	80 91 0a 02 	lds	r24, 0x020A
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	fc 01       	movw	r30, r24
 48e:	e0 50       	subi	r30, 0x00	; 0
 490:	ff 4f       	sbci	r31, 0xFF	; 255
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	90 93 05 02 	sts	0x0205, r25
 49a:	80 93 04 02 	sts	0x0204, r24
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__vector_14+0x17a>
					}
					else {
						amplitude = 0;
 4a0:	10 92 0b 02 	sts	0x020B, r1
					}
				}
			}

			update_frequency(frequency);
 4a4:	80 91 04 02 	lds	r24, 0x0204
 4a8:	90 91 05 02 	lds	r25, 0x0205
 4ac:	0e 94 58 04 	call	0x8b0	; 0x8b0 <update_frequency>
			fake_16_timer = 0;
 4b0:	10 92 12 02 	sts	0x0212, r1
 4b4:	10 92 11 02 	sts	0x0211, r1
		}

	}

}
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	cf 91       	pop	r28
 4be:	df 91       	pop	r29
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <check_byte_received>:

void check_byte_received() {
 4e2:	df 93       	push	r29
 4e4:	cf 93       	push	r28
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	28 97       	sbiw	r28, 0x08	; 8
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61

	//Is there a byte waiting in the buffer?
	if (byte_ready == 1) {
 4f6:	80 91 00 02 	lds	r24, 0x0200
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	09 f0       	breq	.+2      	; 0x500 <check_byte_received+0x1e>
 4fe:	dc c0       	rjmp	.+440    	; 0x6b8 <check_byte_received+0x1d6>
		//Is this a stupid byte like Clock or Active sensing?
		if (byte_received < 0xF0) {
 500:	80 91 06 02 	lds	r24, 0x0206
 504:	80 3f       	cpi	r24, 0xF0	; 240
 506:	08 f0       	brcs	.+2      	; 0x50a <check_byte_received+0x28>
 508:	d5 c0       	rjmp	.+426    	; 0x6b4 <check_byte_received+0x1d2>
			//Is this a status byte? ...
			if (byte_received >= 0x80) {
 50a:	80 91 06 02 	lds	r24, 0x0206
 50e:	88 23       	and	r24, r24
 510:	0c f0       	brlt	.+2      	; 0x514 <check_byte_received+0x32>
 512:	3e c0       	rjmp	.+124    	; 0x590 <check_byte_received+0xae>
				unsigned char temp_midi_channel = byte_received & 0x0F;
 514:	80 91 06 02 	lds	r24, 0x0206
 518:	8f 70       	andi	r24, 0x0F	; 15
 51a:	8a 83       	std	Y+2, r24	; 0x02
				//Is this for one of our channels?
				if ( 1 ) // (temp_midi_channel == midi_channel) 
				{
					current_midi_channel = temp_midi_channel;
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	80 93 0c 02 	sts	0x020C, r24

					//What kind of status byte is this?
					unsigned char status_type = (byte_received & 0xF0);
 522:	80 91 06 02 	lds	r24, 0x0206
 526:	80 7f       	andi	r24, 0xF0	; 240
 528:	89 83       	std	Y+1, r24	; 0x01
					switch (status_type) {
 52a:	89 81       	ldd	r24, Y+1	; 0x01
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	38 87       	std	Y+8, r19	; 0x08
 532:	2f 83       	std	Y+7, r18	; 0x07
 534:	8f 81       	ldd	r24, Y+7	; 0x07
 536:	98 85       	ldd	r25, Y+8	; 0x08
 538:	80 39       	cpi	r24, 0x90	; 144
 53a:	91 05       	cpc	r25, r1
 53c:	b1 f0       	breq	.+44     	; 0x56a <check_byte_received+0x88>
 53e:	2f 81       	ldd	r18, Y+7	; 0x07
 540:	38 85       	ldd	r19, Y+8	; 0x08
 542:	21 39       	cpi	r18, 0x91	; 145
 544:	31 05       	cpc	r19, r1
 546:	34 f4       	brge	.+12     	; 0x554 <check_byte_received+0x72>
 548:	8f 81       	ldd	r24, Y+7	; 0x07
 54a:	98 85       	ldd	r25, Y+8	; 0x08
 54c:	80 38       	cpi	r24, 0x80	; 128
 54e:	91 05       	cpc	r25, r1
 550:	81 f0       	breq	.+32     	; 0x572 <check_byte_received+0x90>
 552:	1b c0       	rjmp	.+54     	; 0x58a <check_byte_received+0xa8>
 554:	2f 81       	ldd	r18, Y+7	; 0x07
 556:	38 85       	ldd	r19, Y+8	; 0x08
 558:	20 3b       	cpi	r18, 0xB0	; 176
 55a:	31 05       	cpc	r19, r1
 55c:	71 f0       	breq	.+28     	; 0x57a <check_byte_received+0x98>
 55e:	8f 81       	ldd	r24, Y+7	; 0x07
 560:	98 85       	ldd	r25, Y+8	; 0x08
 562:	80 3e       	cpi	r24, 0xE0	; 224
 564:	91 05       	cpc	r25, r1
 566:	69 f0       	breq	.+26     	; 0x582 <check_byte_received+0xa0>
 568:	10 c0       	rjmp	.+32     	; 0x58a <check_byte_received+0xa8>
					case (MIDI_STATUS_TYPE_NOTEON):
						current_midi_status = MIDI_STATUS_NOTEON;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	80 93 15 02 	sts	0x0215, r24
 570:	a1 c0       	rjmp	.+322    	; 0x6b4 <check_byte_received+0x1d2>
					break;
					case (MIDI_STATUS_TYPE_NOTEOFF):
						current_midi_status = MIDI_STATUS_NOTEOFF;
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	80 93 15 02 	sts	0x0215, r24
 578:	9d c0       	rjmp	.+314    	; 0x6b4 <check_byte_received+0x1d2>
					break;
					case (MIDI_STATUS_TYPE_CC):
						current_midi_status = MIDI_STATUS_CC;
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	80 93 15 02 	sts	0x0215, r24
 580:	99 c0       	rjmp	.+306    	; 0x6b4 <check_byte_received+0x1d2>
					break;
					case (MIDI_STATUS_TYPE_PB):
						current_midi_status = MIDI_STATUS_PB;
 582:	84 e0       	ldi	r24, 0x04	; 4
 584:	80 93 15 02 	sts	0x0215, r24
 588:	95 c0       	rjmp	.+298    	; 0x6b4 <check_byte_received+0x1d2>
					break;
					default:
						current_midi_status = MIDI_STATUS_NONE;
 58a:	10 92 15 02 	sts	0x0215, r1
 58e:	92 c0       	rjmp	.+292    	; 0x6b4 <check_byte_received+0x1d2>
					current_midi_status = 0;
				}
			}
			// ... or is it a data byte?
			else {
				switch (current_midi_status) {
 590:	80 91 15 02 	lds	r24, 0x0215
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	3e 83       	std	Y+6, r19	; 0x06
 59a:	2d 83       	std	Y+5, r18	; 0x05
 59c:	8d 81       	ldd	r24, Y+5	; 0x05
 59e:	9e 81       	ldd	r25, Y+6	; 0x06
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	91 05       	cpc	r25, r1
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <check_byte_received+0xc6>
 5a6:	3e c0       	rjmp	.+124    	; 0x624 <check_byte_received+0x142>
 5a8:	2d 81       	ldd	r18, Y+5	; 0x05
 5aa:	3e 81       	ldd	r19, Y+6	; 0x06
 5ac:	23 30       	cpi	r18, 0x03	; 3
 5ae:	31 05       	cpc	r19, r1
 5b0:	34 f4       	brge	.+12     	; 0x5be <check_byte_received+0xdc>
 5b2:	8d 81       	ldd	r24, Y+5	; 0x05
 5b4:	9e 81       	ldd	r25, Y+6	; 0x06
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	91 05       	cpc	r25, r1
 5ba:	71 f0       	breq	.+28     	; 0x5d8 <check_byte_received+0xf6>
 5bc:	7b c0       	rjmp	.+246    	; 0x6b4 <check_byte_received+0x1d2>
 5be:	2d 81       	ldd	r18, Y+5	; 0x05
 5c0:	3e 81       	ldd	r19, Y+6	; 0x06
 5c2:	23 30       	cpi	r18, 0x03	; 3
 5c4:	31 05       	cpc	r19, r1
 5c6:	09 f4       	brne	.+2      	; 0x5ca <check_byte_received+0xe8>
 5c8:	44 c0       	rjmp	.+136    	; 0x652 <check_byte_received+0x170>
 5ca:	8d 81       	ldd	r24, Y+5	; 0x05
 5cc:	9e 81       	ldd	r25, Y+6	; 0x06
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	91 05       	cpc	r25, r1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <check_byte_received+0xf4>
 5d4:	53 c0       	rjmp	.+166    	; 0x67c <check_byte_received+0x19a>
 5d6:	6e c0       	rjmp	.+220    	; 0x6b4 <check_byte_received+0x1d2>
				case (MIDI_STATUS_NOTEON):

					//Is this a velocity byte?
					if (num_bytes > 0) {
 5d8:	80 91 01 02 	lds	r24, 0x0201
 5dc:	88 23       	and	r24, r24
 5de:	b1 f0       	breq	.+44     	; 0x60c <check_byte_received+0x12a>

						//If the velocity sent was 0, then this is really a NOTE-OFF
						if (byte_received > 0) {
 5e0:	80 91 06 02 	lds	r24, 0x0206
 5e4:	88 23       	and	r24, r24
 5e6:	39 f0       	breq	.+14     	; 0x5f6 <check_byte_received+0x114>
							//current_midi_velocity = byte_received;
							playing_midi_note = current_midi_note;
 5e8:	80 91 03 02 	lds	r24, 0x0203
 5ec:	80 93 0a 02 	sts	0x020A, r24
							note_on();
 5f0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <note_on>
 5f4:	08 c0       	rjmp	.+16     	; 0x606 <check_byte_received+0x124>
						} else {
							if (current_midi_note == playing_midi_note) {
 5f6:	90 91 03 02 	lds	r25, 0x0203
 5fa:	80 91 0a 02 	lds	r24, 0x020A
 5fe:	98 17       	cp	r25, r24
 600:	11 f4       	brne	.+4      	; 0x606 <check_byte_received+0x124>
								//current_midi_velocity = 0;
								note_off();
 602:	0e 94 9f 03 	call	0x73e	; 0x73e <note_off>
							}
						}
						num_bytes = 0;
 606:	10 92 01 02 	sts	0x0201, r1
 60a:	09 c0       	rjmp	.+18     	; 0x61e <check_byte_received+0x13c>
					}

				//Or is this a note data byte?
					else {
						current_midi_note = byte_received;
 60c:	80 91 06 02 	lds	r24, 0x0206
 610:	80 93 03 02 	sts	0x0203, r24
						num_bytes++;
 614:	80 91 01 02 	lds	r24, 0x0201
 618:	8f 5f       	subi	r24, 0xFF	; 255
 61a:	80 93 01 02 	sts	0x0201, r24
					}

				//Clear the byte so we don't process it twice
				clear_byte_received();
 61e:	0e 94 1b 05 	call	0xa36	; 0xa36 <clear_byte_received>
 622:	48 c0       	rjmp	.+144    	; 0x6b4 <check_byte_received+0x1d2>

				break;

				case (MIDI_STATUS_NOTEOFF):
					//Is this a velocity byte?
					if (num_bytes > 0) {
 624:	80 91 01 02 	lds	r24, 0x0201
 628:	88 23       	and	r24, r24
 62a:	19 f0       	breq	.+6      	; 0x632 <check_byte_received+0x150>
						//Who cares? We aren't implementing aftertouch
						num_bytes = 0;
 62c:	10 92 01 02 	sts	0x0201, r1
 630:	0d c0       	rjmp	.+26     	; 0x64c <check_byte_received+0x16a>
					} else {
						/* This is a note byte. Let's see if it's the same as the currently
						 * playing note. Only then will we note_off()
						 */

						if (byte_received == playing_midi_note) {
 632:	90 91 06 02 	lds	r25, 0x0206
 636:	80 91 0a 02 	lds	r24, 0x020A
 63a:	98 17       	cp	r25, r24
 63c:	11 f4       	brne	.+4      	; 0x642 <check_byte_received+0x160>
							note_off();
 63e:	0e 94 9f 03 	call	0x73e	; 0x73e <note_off>
						}
						num_bytes++;
 642:	80 91 01 02 	lds	r24, 0x0201
 646:	8f 5f       	subi	r24, 0xFF	; 255
 648:	80 93 01 02 	sts	0x0201, r24
					}

				//Clear the byte so we don't process it twice
				clear_byte_received();
 64c:	0e 94 1b 05 	call	0xa36	; 0xa36 <clear_byte_received>
 650:	31 c0       	rjmp	.+98     	; 0x6b4 <check_byte_received+0x1d2>

				break;

				case (MIDI_STATUS_CC):
					//Did we already get a CC Status byte?
					if (num_ccs > 0) {
 652:	80 91 07 02 	lds	r24, 0x0207
 656:	88 23       	and	r24, r24
 658:	39 f0       	breq	.+14     	; 0x668 <check_byte_received+0x186>
						current_midi_ccdata = byte_received;
 65a:	80 91 06 02 	lds	r24, 0x0206
 65e:	80 93 16 02 	sts	0x0216, r24
						process_cc();
 662:	0e 94 aa 03 	call	0x754	; 0x754 <process_cc>
 666:	26 c0       	rjmp	.+76     	; 0x6b4 <check_byte_received+0x1d2>
					}
				//Or is this a new CC status byte?
					else {
						current_midi_cc = byte_received;
 668:	80 91 06 02 	lds	r24, 0x0206
 66c:	80 93 1d 02 	sts	0x021D, r24
						num_ccs++;
 670:	80 91 07 02 	lds	r24, 0x0207
 674:	8f 5f       	subi	r24, 0xFF	; 255
 676:	80 93 07 02 	sts	0x0207, r24
 67a:	1c c0       	rjmp	.+56     	; 0x6b4 <check_byte_received+0x1d2>
					}
				break;

				case (MIDI_STATUS_PB):
					//How many PB related bytes have we gotten?
					switch (num_pbs) {
 67c:	80 91 1a 02 	lds	r24, 0x021A
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	3c 83       	std	Y+4, r19	; 0x04
 686:	2b 83       	std	Y+3, r18	; 0x03
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	9c 81       	ldd	r25, Y+4	; 0x04
 68c:	00 97       	sbiw	r24, 0x00	; 0
 68e:	31 f0       	breq	.+12     	; 0x69c <check_byte_received+0x1ba>
 690:	2b 81       	ldd	r18, Y+3	; 0x03
 692:	3c 81       	ldd	r19, Y+4	; 0x04
 694:	21 30       	cpi	r18, 0x01	; 1
 696:	31 05       	cpc	r19, r1
 698:	39 f0       	breq	.+14     	; 0x6a8 <check_byte_received+0x1c6>
 69a:	0c c0       	rjmp	.+24     	; 0x6b4 <check_byte_received+0x1d2>
					case (0):
						//First byte is 7 LSB
						//Don't care about it for now
						//current_midi_pb_l = byte_received;

						num_pbs++;
 69c:	80 91 1a 02 	lds	r24, 0x021A
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	80 93 1a 02 	sts	0x021A, r24
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <check_byte_received+0x1d2>
					break;
					case (1):
						//Second byte has 7 MSB
						current_midi_pb_h = byte_received;
 6a8:	80 91 06 02 	lds	r24, 0x0206
 6ac:	80 93 09 02 	sts	0x0209, r24
					//Combine to get 14 bytes 0 - 13
					//current_midi_pb = ((current_midi_pb_h << 7)|(current_midi_pb_l << 0));
					bend_pitch();
 6b0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <bend_pitch>
				break;
				}
			}

		}
		byte_ready = 0;
 6b4:	10 92 00 02 	sts	0x0200, r1
	}
}
 6b8:	28 96       	adiw	r28, 0x08	; 8
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	cf 91       	pop	r28
 6c6:	df 91       	pop	r29
 6c8:	08 95       	ret

000006ca <enable_USART_interrupts>:

void enable_USART_interrupts() {
 6ca:	df 93       	push	r29
 6cc:	cf 93       	push	r28
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
	UCSR0A = (1 << RXCIE0);
 6d2:	eb e2       	ldi	r30, 0x2B	; 43
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 e8       	ldi	r24, 0x80	; 128
 6d8:	80 83       	st	Z, r24
}
 6da:	cf 91       	pop	r28
 6dc:	df 91       	pop	r29
 6de:	08 95       	ret

000006e0 <disable_USART_interrupts>:

void disable_USART_interrupts() {
 6e0:	df 93       	push	r29
 6e2:	cf 93       	push	r28
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
	UCSR0A = (0 << RXCIE0);
 6e8:	eb e2       	ldi	r30, 0x2B	; 43
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	10 82       	st	Z, r1
}
 6ee:	cf 91       	pop	r28
 6f0:	df 91       	pop	r29
 6f2:	08 95       	ret

000006f4 <note_on>:

void note_on() {
 6f4:	df 93       	push	r29
 6f6:	cf 93       	push	r28
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62
	num_bytes = 0;
 6fc:	10 92 01 02 	sts	0x0201, r1
	//Reset main timer1
	TCNT1 = 0;
 700:	ec e4       	ldi	r30, 0x4C	; 76
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	11 82       	std	Z+1, r1	; 0x01
 706:	10 82       	st	Z, r1
	//Set timer count corresponding to midi note and thus musical note
	frequency = note_table[current_midi_note];
 708:	80 91 03 02 	lds	r24, 0x0203
 70c:	88 2f       	mov	r24, r24
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	fc 01       	movw	r30, r24
 716:	e0 50       	subi	r30, 0x00	; 0
 718:	ff 4f       	sbci	r31, 0xFF	; 255
 71a:	80 81       	ld	r24, Z
 71c:	91 81       	ldd	r25, Z+1	; 0x01
 71e:	90 93 05 02 	sts	0x0205, r25
 722:	80 93 04 02 	sts	0x0204, r24
	update_frequency(frequency);
 726:	80 91 04 02 	lds	r24, 0x0204
 72a:	90 91 05 02 	lds	r25, 0x0205
 72e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <update_frequency>
	note_on_gate = 1;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	80 93 13 02 	sts	0x0213, r24
}
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	08 95       	ret

0000073e <note_off>:

void note_off() {
 73e:	df 93       	push	r29
 740:	cf 93       	push	r28
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
	num_bytes = 0;
 746:	10 92 01 02 	sts	0x0201, r1
	note_on_gate = 0;
 74a:	10 92 13 02 	sts	0x0213, r1
}
 74e:	cf 91       	pop	r28
 750:	df 91       	pop	r29
 752:	08 95       	ret

00000754 <process_cc>:

void process_cc() {
 754:	df 93       	push	r29
 756:	cf 93       	push	r28
 758:	00 d0       	rcall	.+0      	; 0x75a <process_cc+0x6>
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
	num_ccs = 0;
 75e:	10 92 07 02 	sts	0x0207, r1

	switch (current_midi_cc) {
 762:	80 91 1d 02 	lds	r24, 0x021D
 766:	28 2f       	mov	r18, r24
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	3a 83       	std	Y+2, r19	; 0x02
 76c:	29 83       	std	Y+1, r18	; 0x01
 76e:	49 81       	ldd	r20, Y+1	; 0x01
 770:	5a 81       	ldd	r21, Y+2	; 0x02
 772:	4c 30       	cpi	r20, 0x0C	; 12
 774:	51 05       	cpc	r21, r1
 776:	09 f4       	brne	.+2      	; 0x77a <process_cc+0x26>
 778:	65 c0       	rjmp	.+202    	; 0x844 <process_cc+0xf0>
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	9a 81       	ldd	r25, Y+2	; 0x02
 77e:	8d 30       	cpi	r24, 0x0D	; 13
 780:	91 05       	cpc	r25, r1
 782:	5c f4       	brge	.+22     	; 0x79a <process_cc+0x46>
 784:	29 81       	ldd	r18, Y+1	; 0x01
 786:	3a 81       	ldd	r19, Y+2	; 0x02
 788:	27 30       	cpi	r18, 0x07	; 7
 78a:	31 05       	cpc	r19, r1
 78c:	c9 f0       	breq	.+50     	; 0x7c0 <process_cc+0x6c>
 78e:	49 81       	ldd	r20, Y+1	; 0x01
 790:	5a 81       	ldd	r21, Y+2	; 0x02
 792:	48 30       	cpi	r20, 0x08	; 8
 794:	51 05       	cpc	r21, r1
 796:	c9 f0       	breq	.+50     	; 0x7ca <process_cc+0x76>
 798:	86 c0       	rjmp	.+268    	; 0x8a6 <process_cc+0x152>
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	9a 81       	ldd	r25, Y+2	; 0x02
 79e:	8e 30       	cpi	r24, 0x0E	; 14
 7a0:	91 05       	cpc	r25, r1
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <process_cc+0x52>
 7a4:	65 c0       	rjmp	.+202    	; 0x870 <process_cc+0x11c>
 7a6:	29 81       	ldd	r18, Y+1	; 0x01
 7a8:	3a 81       	ldd	r19, Y+2	; 0x02
 7aa:	2e 30       	cpi	r18, 0x0E	; 14
 7ac:	31 05       	cpc	r19, r1
 7ae:	0c f4       	brge	.+2      	; 0x7b2 <process_cc+0x5e>
 7b0:	54 c0       	rjmp	.+168    	; 0x85a <process_cc+0x106>
 7b2:	49 81       	ldd	r20, Y+1	; 0x01
 7b4:	5a 81       	ldd	r21, Y+2	; 0x02
 7b6:	4f 30       	cpi	r20, 0x0F	; 15
 7b8:	51 05       	cpc	r21, r1
 7ba:	09 f4       	brne	.+2      	; 0x7be <process_cc+0x6a>
 7bc:	6a c0       	rjmp	.+212    	; 0x892 <process_cc+0x13e>
 7be:	73 c0       	rjmp	.+230    	; 0x8a6 <process_cc+0x152>

	case MASTER_VOLUME_CC:
		master_volume = current_midi_ccdata;
 7c0:	80 91 16 02 	lds	r24, 0x0216
 7c4:	80 93 02 02 	sts	0x0202, r24
 7c8:	6e c0       	rjmp	.+220    	; 0x8a6 <process_cc+0x152>
		break;
	case FINE_PITCH_CC:
		fine_pitch_bend = ((note_table[playing_midi_note - 1]
 7ca:	80 91 0a 02 	lds	r24, 0x020A
 7ce:	88 2f       	mov	r24, r24
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	fc 01       	movw	r30, r24
 7da:	e0 50       	subi	r30, 0x00	; 0
 7dc:	ff 4f       	sbci	r31, 0xFF	; 255
 7de:	20 81       	ld	r18, Z
 7e0:	31 81       	ldd	r19, Z+1	; 0x01
 7e2:	80 91 0a 02 	lds	r24, 0x020A
 7e6:	88 2f       	mov	r24, r24
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	fc 01       	movw	r30, r24
 7f0:	e0 50       	subi	r30, 0x00	; 0
 7f2:	ff 4f       	sbci	r31, 0xFF	; 255
 7f4:	80 81       	ld	r24, Z
 7f6:	91 81       	ldd	r25, Z+1	; 0x01
 7f8:	28 1b       	sub	r18, r24
 7fa:	39 0b       	sbc	r19, r25
 7fc:	80 91 16 02 	lds	r24, 0x0216
 800:	88 2f       	mov	r24, r24
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	ac 01       	movw	r20, r24
 806:	24 9f       	mul	r18, r20
 808:	c0 01       	movw	r24, r0
 80a:	25 9f       	mul	r18, r21
 80c:	90 0d       	add	r25, r0
 80e:	34 9f       	mul	r19, r20
 810:	90 0d       	add	r25, r0
 812:	11 24       	eor	r1, r1
 814:	20 ec       	ldi	r18, 0xC0	; 192
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	b9 01       	movw	r22, r18
 81a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__udivmodhi4>
 81e:	cb 01       	movw	r24, r22
 820:	90 93 10 02 	sts	0x0210, r25
 824:	80 93 0f 02 	sts	0x020F, r24
		                               - note_table[playing_midi_note]) * current_midi_ccdata) / 192;
		update_frequency(note_table[playing_midi_note]);
 828:	80 91 0a 02 	lds	r24, 0x020A
 82c:	88 2f       	mov	r24, r24
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	fc 01       	movw	r30, r24
 836:	e0 50       	subi	r30, 0x00	; 0
 838:	ff 4f       	sbci	r31, 0xFF	; 255
 83a:	80 81       	ld	r24, Z
 83c:	91 81       	ldd	r25, Z+1	; 0x01
 83e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <update_frequency>
 842:	31 c0       	rjmp	.+98     	; 0x8a6 <process_cc+0x152>
		break;

	case SWEEP_ENABLED_CC:
		if (current_midi_ccdata > 64)
 844:	80 91 16 02 	lds	r24, 0x0216
 848:	81 34       	cpi	r24, 0x41	; 65
 84a:	20 f0       	brcs	.+8      	; 0x854 <process_cc+0x100>
			sweep_enabled = 1;
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	80 93 1b 02 	sts	0x021B, r24
 852:	29 c0       	rjmp	.+82     	; 0x8a6 <process_cc+0x152>
		else
			sweep_enabled = 0;
 854:	10 92 1b 02 	sts	0x021B, r1
 858:	26 c0       	rjmp	.+76     	; 0x8a6 <process_cc+0x152>
		break;

	case SWEEP_DIRECTION_CC:
		if (current_midi_ccdata > 64)
 85a:	80 91 16 02 	lds	r24, 0x0216
 85e:	81 34       	cpi	r24, 0x41	; 65
 860:	20 f0       	brcs	.+8      	; 0x86a <process_cc+0x116>
			sweep_direction = SWEEP_UP;
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 19 02 	sts	0x0219, r24
 868:	1e c0       	rjmp	.+60     	; 0x8a6 <process_cc+0x152>
		else
			sweep_direction = SWEEP_DOWN;
 86a:	10 92 19 02 	sts	0x0219, r1
 86e:	1b c0       	rjmp	.+54     	; 0x8a6 <process_cc+0x152>
		break;

	case SWEEP_AMOUNT_CC:
		sweep_amount = current_midi_ccdata;
 870:	80 91 16 02 	lds	r24, 0x0216
 874:	80 93 1e 02 	sts	0x021E, r24
		OCR1B = sweep_amount * 1024;
 878:	e8 e4       	ldi	r30, 0x48	; 72
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 91 1e 02 	lds	r24, 0x021E
 880:	88 2f       	mov	r24, r24
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	98 2f       	mov	r25, r24
 886:	88 27       	eor	r24, r24
 888:	99 0f       	add	r25, r25
 88a:	99 0f       	add	r25, r25
 88c:	91 83       	std	Z+1, r25	; 0x01
 88e:	80 83       	st	Z, r24
 890:	0a c0       	rjmp	.+20     	; 0x8a6 <process_cc+0x152>
		break;
	case SWEEP_LOOP_ENABLED_CC:
		if (current_midi_ccdata > 64)
 892:	80 91 16 02 	lds	r24, 0x0216
 896:	81 34       	cpi	r24, 0x41	; 65
 898:	20 f0       	brcs	.+8      	; 0x8a2 <process_cc+0x14e>
			sweep_loop_enabled = 1;
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	80 93 1f 02 	sts	0x021F, r24
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <process_cc+0x152>
		else
			sweep_loop_enabled = 0;
 8a2:	10 92 1f 02 	sts	0x021F, r1
		break;

	}
}
 8a6:	0f 90       	pop	r0
 8a8:	0f 90       	pop	r0
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	08 95       	ret

000008b0 <update_frequency>:

void update_frequency(unsigned int new_frequency) 
{
 8b0:	df 93       	push	r29
 8b2:	cf 93       	push	r28
 8b4:	00 d0       	rcall	.+0      	; 0x8b6 <update_frequency+0x6>
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
 8ba:	9a 83       	std	Y+2, r25	; 0x02
 8bc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = new_frequency + fine_pitch_bend;
 8be:	ea e4       	ldi	r30, 0x4A	; 74
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	20 91 0f 02 	lds	r18, 0x020F
 8c6:	30 91 10 02 	lds	r19, 0x0210
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	9a 81       	ldd	r25, Y+2	; 0x02
 8ce:	82 0f       	add	r24, r18
 8d0:	93 1f       	adc	r25, r19
 8d2:	91 83       	std	Z+1, r25	; 0x01
 8d4:	80 83       	st	Z, r24
}
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	cf 91       	pop	r28
 8dc:	df 91       	pop	r29
 8de:	08 95       	ret

000008e0 <bend_pitch>:

void bend_pitch() {
 8e0:	df 93       	push	r29
 8e2:	cf 93       	push	r28
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
	num_pbs = 0;
 8e8:	10 92 1a 02 	sts	0x021A, r1

	if (current_midi_pb_h > 63) {
 8ec:	80 91 09 02 	lds	r24, 0x0209
 8f0:	80 34       	cpi	r24, 0x40	; 64
 8f2:	08 f4       	brcc	.+2      	; 0x8f6 <bend_pitch+0x16>
 8f4:	49 c0       	rjmp	.+146    	; 0x988 <bend_pitch+0xa8>
		distance
 8f6:	80 91 0a 02 	lds	r24, 0x020A
 8fa:	88 2f       	mov	r24, r24
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	88 0f       	add	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	fc 01       	movw	r30, r24
 904:	e0 50       	subi	r30, 0x00	; 0
 906:	ff 4f       	sbci	r31, 0xFF	; 255
 908:	20 81       	ld	r18, Z
 90a:	31 81       	ldd	r19, Z+1	; 0x01
 90c:	80 91 0a 02 	lds	r24, 0x020A
 910:	88 2f       	mov	r24, r24
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	02 96       	adiw	r24, 0x02	; 2
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	fc 01       	movw	r30, r24
 91c:	e0 50       	subi	r30, 0x00	; 0
 91e:	ff 4f       	sbci	r31, 0xFF	; 255
 920:	80 81       	ld	r24, Z
 922:	91 81       	ldd	r25, Z+1	; 0x01
 924:	28 1b       	sub	r18, r24
 926:	39 0b       	sbc	r19, r25
 928:	80 91 09 02 	lds	r24, 0x0209
 92c:	88 2f       	mov	r24, r24
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	cf 97       	sbiw	r24, 0x3f	; 63
 932:	ac 01       	movw	r20, r24
 934:	24 9f       	mul	r18, r20
 936:	c0 01       	movw	r24, r0
 938:	25 9f       	mul	r18, r21
 93a:	90 0d       	add	r25, r0
 93c:	34 9f       	mul	r19, r20
 93e:	90 0d       	add	r25, r0
 940:	11 24       	eor	r1, r1
 942:	00 24       	eor	r0, r0
 944:	88 0f       	add	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	00 1c       	adc	r0, r0
 94a:	88 0f       	add	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	00 1c       	adc	r0, r0
 950:	89 2f       	mov	r24, r25
 952:	90 2d       	mov	r25, r0
 954:	90 93 0e 02 	sts	0x020E, r25
 958:	80 93 0d 02 	sts	0x020D, r24
		= ((note_table[playing_midi_note]
		               - note_table[playing_midi_note + 2])
		               * (current_midi_pb_h - 63)) / 64;
		update_frequency(note_table[playing_midi_note] - distance);
 95c:	80 91 0a 02 	lds	r24, 0x020A
 960:	88 2f       	mov	r24, r24
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	fc 01       	movw	r30, r24
 96a:	e0 50       	subi	r30, 0x00	; 0
 96c:	ff 4f       	sbci	r31, 0xFF	; 255
 96e:	20 81       	ld	r18, Z
 970:	31 81       	ldd	r19, Z+1	; 0x01
 972:	80 91 0d 02 	lds	r24, 0x020D
 976:	90 91 0e 02 	lds	r25, 0x020E
 97a:	a9 01       	movw	r20, r18
 97c:	48 1b       	sub	r20, r24
 97e:	59 0b       	sbc	r21, r25
 980:	ca 01       	movw	r24, r20
 982:	0e 94 58 04 	call	0x8b0	; 0x8b0 <update_frequency>
 986:	54 c0       	rjmp	.+168    	; 0xa30 <bend_pitch+0x150>
	} else if ((current_midi_pb_h < 63) && (playing_midi_note > 1)) {
 988:	80 91 09 02 	lds	r24, 0x0209
 98c:	8f 33       	cpi	r24, 0x3F	; 63
 98e:	08 f0       	brcs	.+2      	; 0x992 <bend_pitch+0xb2>
 990:	4f c0       	rjmp	.+158    	; 0xa30 <bend_pitch+0x150>
 992:	80 91 0a 02 	lds	r24, 0x020A
 996:	82 30       	cpi	r24, 0x02	; 2
 998:	08 f4       	brcc	.+2      	; 0x99c <bend_pitch+0xbc>
 99a:	4a c0       	rjmp	.+148    	; 0xa30 <bend_pitch+0x150>
		distance = ((note_table[playing_midi_note - 2]
 99c:	80 91 0a 02 	lds	r24, 0x020A
 9a0:	88 2f       	mov	r24, r24
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	02 97       	sbiw	r24, 0x02	; 2
 9a6:	88 0f       	add	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	fc 01       	movw	r30, r24
 9ac:	e0 50       	subi	r30, 0x00	; 0
 9ae:	ff 4f       	sbci	r31, 0xFF	; 255
 9b0:	20 81       	ld	r18, Z
 9b2:	31 81       	ldd	r19, Z+1	; 0x01
 9b4:	80 91 0a 02 	lds	r24, 0x020A
 9b8:	88 2f       	mov	r24, r24
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	88 0f       	add	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	fc 01       	movw	r30, r24
 9c2:	e0 50       	subi	r30, 0x00	; 0
 9c4:	ff 4f       	sbci	r31, 0xFF	; 255
 9c6:	80 81       	ld	r24, Z
 9c8:	91 81       	ldd	r25, Z+1	; 0x01
 9ca:	a9 01       	movw	r20, r18
 9cc:	48 1b       	sub	r20, r24
 9ce:	59 0b       	sbc	r21, r25
 9d0:	80 91 09 02 	lds	r24, 0x0209
 9d4:	28 2f       	mov	r18, r24
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	80 e4       	ldi	r24, 0x40	; 64
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	82 1b       	sub	r24, r18
 9de:	93 0b       	sbc	r25, r19
 9e0:	9c 01       	movw	r18, r24
 9e2:	42 9f       	mul	r20, r18
 9e4:	c0 01       	movw	r24, r0
 9e6:	43 9f       	mul	r20, r19
 9e8:	90 0d       	add	r25, r0
 9ea:	52 9f       	mul	r21, r18
 9ec:	90 0d       	add	r25, r0
 9ee:	11 24       	eor	r1, r1
 9f0:	00 24       	eor	r0, r0
 9f2:	88 0f       	add	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	00 1c       	adc	r0, r0
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	00 1c       	adc	r0, r0
 9fe:	89 2f       	mov	r24, r25
 a00:	90 2d       	mov	r25, r0
 a02:	90 93 0e 02 	sts	0x020E, r25
 a06:	80 93 0d 02 	sts	0x020D, r24
		                        - note_table[playing_midi_note]) * (64 - current_midi_pb_h))
		                        / 64;
		update_frequency(note_table[playing_midi_note] + distance);
 a0a:	80 91 0a 02 	lds	r24, 0x020A
 a0e:	88 2f       	mov	r24, r24
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	88 0f       	add	r24, r24
 a14:	99 1f       	adc	r25, r25
 a16:	fc 01       	movw	r30, r24
 a18:	e0 50       	subi	r30, 0x00	; 0
 a1a:	ff 4f       	sbci	r31, 0xFF	; 255
 a1c:	20 81       	ld	r18, Z
 a1e:	31 81       	ldd	r19, Z+1	; 0x01
 a20:	80 91 0d 02 	lds	r24, 0x020D
 a24:	90 91 0e 02 	lds	r25, 0x020E
 a28:	82 0f       	add	r24, r18
 a2a:	93 1f       	adc	r25, r19
 a2c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <update_frequency>
	}

}
 a30:	cf 91       	pop	r28
 a32:	df 91       	pop	r29
 a34:	08 95       	ret

00000a36 <clear_byte_received>:

void clear_byte_received() {
 a36:	df 93       	push	r29
 a38:	cf 93       	push	r28
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
	byte_received = 0;
 a3e:	10 92 06 02 	sts	0x0206, r1
}
 a42:	cf 91       	pop	r28
 a44:	df 91       	pop	r29
 a46:	08 95       	ret

00000a48 <check_channel_set>:

void check_channel_set() {
 a48:	df 93       	push	r29
 a4a:	cf 93       	push	r28
 a4c:	cd b7       	in	r28, 0x3d	; 61
 a4e:	de b7       	in	r29, 0x3e	; 62
	midi_channel = 0;
 a50:	10 92 1c 02 	sts	0x021C, r1
	//Get 4-bit (0-16) MIDI CHannel from PORTD b4-b7)
	//midi_channel |= (~PIND & 0xF0) >> 4;

}
 a54:	cf 91       	pop	r28
 a56:	df 91       	pop	r29
 a58:	08 95       	ret

00000a5a <__udivmodhi4>:
 a5a:	aa 1b       	sub	r26, r26
 a5c:	bb 1b       	sub	r27, r27
 a5e:	51 e1       	ldi	r21, 0x11	; 17
 a60:	07 c0       	rjmp	.+14     	; 0xa70 <__udivmodhi4_ep>

00000a62 <__udivmodhi4_loop>:
 a62:	aa 1f       	adc	r26, r26
 a64:	bb 1f       	adc	r27, r27
 a66:	a6 17       	cp	r26, r22
 a68:	b7 07       	cpc	r27, r23
 a6a:	10 f0       	brcs	.+4      	; 0xa70 <__udivmodhi4_ep>
 a6c:	a6 1b       	sub	r26, r22
 a6e:	b7 0b       	sbc	r27, r23

00000a70 <__udivmodhi4_ep>:
 a70:	88 1f       	adc	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	5a 95       	dec	r21
 a76:	a9 f7       	brne	.-22     	; 0xa62 <__udivmodhi4_loop>
 a78:	80 95       	com	r24
 a7a:	90 95       	com	r25
 a7c:	bc 01       	movw	r22, r24
 a7e:	cd 01       	movw	r24, r26
 a80:	08 95       	ret

00000a82 <_exit>:
 a82:	f8 94       	cli

00000a84 <__stop_program>:
 a84:	ff cf       	rjmp	.-2      	; 0xa84 <__stop_program>
